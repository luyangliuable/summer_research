 SPDX-License-Identifier: GPL-2.0
  f_phonet.c -- USB CDC Phonet function
  Copyright (C) 2007-2008 Nokia Corporation. All rights reserved.
  Author: RÃ©mi Denis-Courmont
-------------------------------------------------------------------------
-------------------------------------------------------------------------
 .bInterfaceNumber =	DYNAMIC, 
 ??? 
 .bMasterInterface0 =	DYNAMIC, 
 .bSlaveInterface0 =	DYNAMIC, 
 .bInterfaceNumber =	DYNAMIC, 
 .bInterfaceNumber =	DYNAMIC, 
-------------------------------------------------------------------------
 disconnected 
 disabled 
 race with carrier loss 
-------------------------------------------------------------------------
  Queue buffer for data from the host
 Last fragment 
 First fragment 
 Can't use pskb_pull() on page in IRQ 
 Last fragment 
 Do not resubmit in these cases: 
 disconnect 
 hw reset 
 dequeued (unlink or netif down) 
 Do resubmit in these cases: 
 request buffer overflow 
-------------------------------------------------------------------------
 control interface, no altsetting 
 data intf (0: inactive, 1: active) 
 remain disabled until set_alt 
-------------------------------------------------------------------------
	
	  in driversusbgadgetconfigfs.c:configfs_composite_bind()
	  configurations are bound in sequence with list_for_each_entry,
	  in each configuration its functions are bound in sequence
	  with list_for_each_entry, so we assume no race condition
	  with regard to phonet_opts->bound access
 Reserve interface IDs 
 Reserve endpoints 
 Do not try to bind Phonet twice... 
 Incoming USB requests 
 Outgoing USB requests 
 We are already disconnected 
 Create net device 
 SPDX-License-Identifier: GPL-2.0+
  c67x00-ll-hpi.c: Cypress C67X00 USB Low level interface using HPI
  Copyright (C) 2006-2008 Barco N.V.
     Derived from the Cypress cy7c67200300 ezusb linux driver and
     based on multiple host controller drivers inside the linux kernel.
 -------------------------------------------------------------------------- 
 Interface definitions 
 Registers 0 to COMM_REGS-1 
 Software interrupts 
 114, 115: 
 -----------------------------------------------------------------------
  HPI implementation
  The c67x00 chip also support control via SPI or HSS serial
  interfaces. However, this driver assumes that register access can
  be performed from IRQ context. While this is a safe assumption with
  the HPI interface, it is not true for the serial interfaces.
 HPI registers 
  According to CY7C67300 specification (tables 140 and 141) HPI read and
  write cycle duration Tcyc must be at least 6T long, where T is 148MHz,
  which is 125ns.
  Only data is little endian, addr has cpu endianess
  Only data is little endian, addr has cpu endianess
 -------------------------------------------------------------------------- 
 Transactions 
 -------------------------------------------------------------------------- 
 General functions 
 clear register to allow next message 
  c67x00_ll_usb_clear_status - clear the USB status bits
 -------------------------------------------------------------------------- 
 -------------------------------------------------------------------------- 
 Host specific functions 
 No return path for error code; crash spectacularly 
 Reset USB port for 50ms 
 No return path for error code; crash spectacularly 
 Set port into host mode 
 Clear interrupts 
 Check 
 Clear connect change 
 Enable interrupts 
 Enable pull down transistors 
 -------------------------------------------------------------------------- 
 -------------------------------------------------------------------------- 
 -------------------------------------------------------------------------- 
  c67x00_ll_write_mem_le16 - write into c67x00 memory
  Only data is little endian, addr has cpu endianess.
 Sanity check 
 unaligned access 
  c67x00_ll_read_mem_le16 - read from c67x00 memory
  Only data is little endian, addr has cpu endianess.
 unaligned access 
 -------------------------------------------------------------------------- 
 SPDX-License-Identifier: GPL-2.0+
  c67x00-hcd.c: Cypress C67X00 USB Host Controller Driver
  Copyright (C) 2006-2008 Barco N.V.
     Derived from the Cypress cy7c67200300 ezusb linux driver and
     based on multiple host controller drivers inside the linux kernel.
 --------------------------------------------------------------------------
  Root Hub Support
  __u8  bLength; 
  __u8  bDescriptorType; Hub-descriptor 
  __u8  bNbrPorts; 
 __u16  wHubCharacteristics; 
   (per-port OC, no power switching) 
  __u8  bPwrOn2pwrGood; 2ms 
  __u8  bHubContrCurrent; 0 mA 
  __u8  DeviceRemovable;  7 Ports max  
  __u8  PortPwrCtrlMask;  7 ports max  
 bit 0 denotes hub change, b1..n port change 
 hub power 
 We don't implement these 
 Power always enabled 
			 Reset the port so that the c67x00 also notices the
 ---------------------------------------------------------------------
  Main part of host controller driver
  c67x00_hcd_irq
  This function is called from the interrupt handler in c67x00-drv.c
 Handle sie message flags 
 Handle Start of frame events 
  c67x00_hcd_start: Host controller start hook
  c67x00_hcd_stop: Host controller stop hook
 Nothing to do 
	
	  basic lifecycle operations
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
 ---------------------------------------------------------------------
  SetupTeardown routines
 may be called with controller, bus, and devices active 
 SPDX-License-Identifier: GPL-2.0+
  c67x00-drv.c: Cypress C67X00 USB Common infrastructure
  Copyright (C) 2006-2008 Barco N.V.
     Derived from the Cypress cy7c67200300 ezusb linux driver and
     based on multiple host controller drivers inside the linux kernel.
  This file implements the common infrastructure for using the c67x00.
  It is both the link between the platform configuration and subdrivers and
  the link between the common hardware parts and the subdrivers (e.g.
  interrupt handling).
  The c67x00 has 2 SIE's (serial interface engine) which can be configured
  to be host, device or OTG (with some limitations, E.G. only SIE1 can be OTG).
  Depending on the platform configuration, the SIE's are created and
  the corresponding subdriver is initialized (c67x00_probe_sie).
 ------------------------------------------------------------------------- 
 SPDX-License-Identifier: GPL-2.0+
  c67x00-sched.c: Cypress C67X00 USB Host Controller Driver - TD scheduling
  Copyright (C) 2006-2008 Barco N.V.
     Derived from the Cypress cy7c67200300 ezusb linux driver and
     based on multiple host controller drivers inside the linux kernel.
  These are the stages for a control urb, they are kept
  in both urb->interval and td->privdata.
 -------------------------------------------------------------------------- 
  struct c67x00_ep_data: Host endpoint data structure
 For intisoc transactions 
  struct c67x00_td
  Hardware parts are little endiannes, SW in CPU endianess.
 HW specific part 
 Bytes 0-1 
 Bytes 2-3 
 Byte 4 
 Byte 5 
 Byte 6 
 Byte 7 
 Byte 8 
 Byte 9 
 Bytes 10-11 
 SW part 
	 These are needed for handling the toggle bits:
	  an urb can be dequeued while a td is in progress
	  after checking the td, the toggle bit might need to
 packet number for isoc 
 Residue: signed 8bits, neg -> OVERFLOW, pos -> UNDERFLOW 
 -------------------------------------------------------------------------- 
  dbg_td - Dump the contents of the TD
 -------------------------------------------------------------------------- 
 Helper functions 
  frame_add
  Software wraparound for framenumbers.
  frame_after - is frame a after frame b
  frame_after_eq - is frame a after or equal to frame b
 -------------------------------------------------------------------------- 
  c67x00_release_urb - remove link from all tds to this urb
  Disconnects the urb from it's tds, so that it can be given back.
  pre: urb->hcpriv != NULL
	 TODO this might be not so efficient when we've got many urbs!
	  Alternatives:
	     only clear when needed
	     keep a list of tds with each urbp
 -------------------------------------------------------------------------- 
 Check if endpoint already has a c67x00_ep_data struct allocated 
 Allocate and initialize a new c67x00 endpoint data structure 
	 hold a reference to udev as long as this endpoint lives,
 For ISOC and INT endpoints, start ASAP: 
	 Add the endpoint data to one of the pipe lists; must be added
 loop waiting for all transfers in the endpoint queue to complete 
 Drop the lock so we can sleep waiting for the hardware 
		 it could happen that we reinitialize this completion, while
		  somebody was waiting for that completion.  The timeout and
 -------------------------------------------------------------------------- 
 Allocate and initialize urb private data 
 Make sure host controller is running 
	 TODO claim bandwidth with usb_claim_bandwidth?
 Nothing receivedtransmitted yet 
 Assume always URB_ISO_ASAP, FIXME 
 Go right after the last one 
 Add the URB to the endpoint queue 
 If this is the only URB, kick start the controller 
 -------------------------------------------------------------------------- 
  pre: c67x00 locked, urb unlocked
 -------------------------------------------------------------------------- 
	 According to the C67x00 BIOS user manual, page 3-18,19, the
	  following calculations provide the full speed bit times for
	  a transaction.
	 
	  FS(in)	= 112.5 +  9.36BC + HOST_DELAY
	  FS(in,iso)	=  90.5 +  9.36BC + HOST_DELAY
	  FS(out)	= 112.5 +  9.36BC + HOST_DELAY
	  FS(out,iso)	=  78.4 +  9.36BC + HOST_DELAY
	  LS(in)	= 802.4 + 75.78BC + HOST_DELAY
	  LS(out)	= 802.6 + 74.67BC + HOST_DELAY
	 
	  HOST_DELAY == 106 for the c67200 and c67300.
 make calculations in 1100 bit times to maintain resolution 
 Low speed pipe 
 FS pipes 
	 Scale back down to integer bit times.  Use a host delay of 106.
 -------------------------------------------------------------------------- 
  td_addr and buf_addr must be word aligned
 Not really an error, but expected 
 SW part 
 HW part 
 SW part 
 properly align 
 -------------------------------------------------------------------------- 
 td wasn't created 
  return 0 in case more bandwidth is available, else errorcode
  return 0 in case more bandwidth is available, else errorcode
 -------------------------------------------------------------------------- 
 traverse every endpoint on the list 
 and add the first urb 
 isochronous transfer rely on this 
 Check if we can proceed 
 Reinitialize variables 
 Fill the list 
 -------------------------------------------------------------------------- 
  Get TD from C67X00
 dbg_td(c67x00, td, "STALL"); 
 This was an empty packet 
 Smaller then full packet 
 -------------------------------------------------------------------------- 
 Remove all td's from the list which come
  after last_td and are meant for the same pipe.
 -------------------------------------------------------------------------- 
 isochronous tds are handled separately 
 Don't count setup_packet with normal data: 
 Last packet 
 -------------------------------------------------------------------------- 
  c67x00_check_td_list - handle tds which have been processed by the c67x00
  pre: current_td == 0
 get the TD 
 urb can be NULL! 
 Handle isochronous transfers separately 
		 When an error occurs, all td's for that pipe go into an
		  inactive state. This state matches successful transfers so
 Sequence ok and acked, don't need to fix toggle 
 Overflow 
 next in list could have been removed, due to clear_pipe! 
 -------------------------------------------------------------------------- 
	 If all tds are processed, we can check the previous frame (if
	  there was any) and start our next frame.
  Send td to C67X00
 Last td in list 
 -------------------------------------------------------------------------- 
  c67x00_do_work - Schedulers state machine
 Make sure all tds are processed 
	 no td's are being processed (current == 0)
 Don't send tds in same frame 
 If no urbs are scheduled, our work is done 
 TD's have been added to the frame 
 -------------------------------------------------------------------------- 
 SPDX-License-Identifier: GPL-2.0
  Texas Instruments DA8xxOMAP-L1x "glue layer"
  Copyright (c) 2008-2009 MontaVista Software, Inc. <source@mvista.com>
  Based on the DaVinci "glue layer" code.
  Copyright (C) 2005-2006 by Texas Instruments
  DT support
  Copyright (c) 2016 Petr Kulhavy <petr@barix.com>
  This file is part of the Inventra Controller Driver for Linux.
  DA8XX specific definitions
 USB 2.0 OTG module registers 
 Control register bits 
 EP0 + 4 Tx EPs 
 4 Rx EPs 
 USB interrupt register bits 
 8 Mentor 
 interrupts and DRVVBUS interrupt 
  Because we don't set CTRL.UINT, it's "important" to:
 	- not readwrite INTRUSBINTRUSBE (except during
 	  initial setup, as a workaround);
 	- use INTSETINTCLR instead.
  da8xx_musb_enable - enable interrupts
 Workaround: setup IRQs through both register sets. 
 Force the DRVVBUS IRQ so we can start polling for ID change. 
  da8xx_musb_disable - disable HDRC and flush interrupts
	
	  We poll because DaVinci's won't expose several OTG-critical
	  status change events (from the transceiver) otherwise.
		
		  Wait till VBUS falls below SessionEnd (~0.2 V); the 1.3
		  RTL seems to mis-handle session "start" otherwise (or in
		  our case "recover"), in routine "VBUS was valid by the time
		  VBUSERR got reported during enumeration" cases.
		
		  There's no ID-changed IRQ, so we have no good way to tell
		  when to switch to the A-Default state machine (by setting
		  the DEVCTL.Session bit).
		 
		  Workaround:  whenever we're in B_IDLE, try setting the
		  session flag every few seconds.  If it works, ID was
		  grounded and we're now in the A-Default state machine.
		 
		  NOTE: setting the session flag is _supposed_ to trigger
		  SRP but clearly it doesn't.
 Never idle if active, or when VBUS timeout is not set as host 
	
	  NOTE: DA8XX shadows the Mentor IRQs.  Don't manage them through
	  the Mentor registers (except for setup), use the TI ones and EOI.
 Acknowledge and handle non-CPPI interrupts 
	
	  DRVVBUS IRQs are the only proxy we have (a very poor one!) for
	  DA8xx's missing ID change IRQ.  We need an ID change IRQ to
	  switch appropriately between halves of the OTG state machine.
	  Managing DEVCTL.Session per Mentor docs requires that we know its
	  value but DEVCTL.BDevice is invalid without DEVCTL.Session set.
	  Also, DRVVBUS pulses for SRP (but not at 5 V)...
			
			  The Mentor core doesn't debounce VBUS as needed
			  to cope with device connect current spikes. This
			  means it's not uncommon for bus-powered devices
			  to get VBUS errors during enumeration.
			 
			  This is a workaround, but newer RTL from Mentor
			  seems to allow a better one: "re"-starting sessions
			  without waiting for VBUS to stop registering in
			  devctl.
			
			  When babble condition happens, drvvbus interrupt
			  is also generated. Ignore this drvvbus interrupt
			  and let babble interrupt handler recovers the
			  controller; otherwise, the host-mode flag is lost
			  due to the MUSB_DEV_MODE() call below and babble
			  recovery logic will not be called.
 EOI needs to be written for the IRQ to be re-asserted. 
 Poll for ID change 
	
	  The PHY has some issues when it is forced in device or host mode.
	  Unless the user request another mode, configure the PHY in OTG mode.
 Force VBUS valid, ID = 0 
 Force VBUS valid, ID = 1 
 Don't override the VBUSID comparators 
 Returns zero if e.g. not clocked 
 Reset the controller 
 Start the on-chip PHY and its PLL. 
 NOTE: IRQs are in mixed mode, not bypass to pure MUSB 
 SPDX-License-Identifier: GPL-2.0
  MUSB OTG driver peripheral support
  Copyright 2005 Mentor Graphics Corporation
  Copyright (C) 2005-2006 by Texas Instruments
  Copyright (C) 2006-2007 Nokia Corporation
  Copyright (C) 2009 MontaVista Software, Inc. <source@mvista.com>
 ----------------------------------------------------------------------- 
 Maps the buffer to dma  
	 Check if DMA engine can handle this request.
	  DMA code must reject the USB request explicitly.
	  Default behaviour is to map the request.
 Unmap the buffer from dma and maps it back to cpu 
 PRE_MAPPED 
  Immediately complete a request.
  @param request the request to complete
  @param status the status to complete the request with
  Context: controller locked, IRQs blocked.
 ----------------------------------------------------------------------- 
  Abort requests queued to an endpoint using the status. Synchronous.
  caller locked controller and blocked irqs, and selected this ep.
			
			  The programming guide says that we must not clear
			  the DMAMODE bit before DMAENAB, so we only
			  clear it in the second write...
 ----------------------------------------------------------------------- 
 Data transfers - pure PIO, pure DMA, or mixed mode 
  This assumes the separate CPPI engine is responding to DMA requests
  from the usb core ... sequenced a bit differently from mentor dma.
  An endpoint is transmitting data. This can be called either from
  the IRQ routine or from ep.queue() to kickstart a request on an
  endpoint.
  Context: controller locked, IRQs blocked, endpoint selected
 Check if EP is disabled 
 we shouldn't get here while DMA is active ... but we do ... 
 read TXCSR before 
 setup DMA, then program endpoint CSR 
 MUSB_TXCSR_P_ISO is still set correctly 
					
					  We must not clear the DMAMODE bit
					  before the DMAENAB bit -- and the
					  latter doesn't always get cleared
					  before we get here...
 against programming guide 
					
					  Enable Autoset according to table
					  below
					  bulk_split hb_mult	Autoset_Enable
					 	0	0	Yes(Normal)
					 	0	>0	No(High BW ISO)
					 	1	0	Yes(HS bulk)
					 	1	>0	Yes(FS bulk)
 program endpoint CSR first, then setup DMA 
 ensure writebuffer is empty 
			
			  NOTE host side sets DMAENAB later than this; both are
			  OK since the transfer dma glue (between CPPI and
			  Mentor fifos) just tells CPPI it could start. Data
			  only moves to the USB TX fifo when both fifos are
			  ready.
			
			  "mode" is irrelevant here; handle terminating ZLPs
			  like PIO does, since the hardware RNDIS mode seems
			  unreliable except for the
			  last-packet-is-already-short case.
 invariant: prequest->buf is non-null 
		
		  Unmap the dma buffer back to cpu if dma channel
		  programming fails
 host may already have the data when this message shows... 
  FIFO state update (e.g. data ready).
  Called from IRQ,  with controller locked.
	
	  REVISIT: for high bandwidth, MUSB_TXCSR_P_INCOMPTX
	  probably rates reporting as a host error.
 We NAKed, no big deal... little reason to care. 
		
		  SHOULD NOT HAPPEN... has with CPPI though, after
		  changing SENDSTALL (and other cases); harmless?
 Ensure writebuffer is empty. 
		
		  First, maybe a terminating short packet. Some DMA
		  engines might handle this by themselves.
			
			  On DMA completion, FIFO may not be
			  available yet...
			
			  In the giveback function the MUSB lock is
			  released and acquired after sometime. During
			  this time period the INDEX register could get
			  changed by the gadget_queue function especially
			  on SMP systems. Reselect the INDEX to be sure
			  we are readingmodifying the right registers
 ------------------------------------------------------------ 
  Context: controller locked, IRQs blocked, endpoint selected
 Check if EP is disabled 
 We shouldn't get here while DMA is active, but we do... 
		 NOTE:  CPPI won't actually stop advancing the DMA
		  queue after short packet transfers, so this is almost
		  always going to run as IRQ-per-packet DMA so that
		  faults will be handled correctly.
			 make sure that if an rxpkt arrived after the irq,
			  the cppi engine will be ready to take it as soon
			  as DMA is enabled
		
		  Enable Mode 1 on RX transfers only when short_not_ok flag
		  is set. Currently short_not_ok flag is set only from
		  file_storage and f_mass_storage drivers
	 We use DMA Req mode 0 in rx_csr, and DMA controller operates in
	  mode 0 only. So we do not get endpoint interrupts due to DMA
	  completion. We only get interrupts from DMA controller.
	 
	  We could operate in DMA mode 1 if we knew the size of the transfer
	  in advance. For mass storage class, request->length = what the host
	  sends, so that'd work.  But for pretty much everything else,
	  request->length is routinely more than what the host sends. For
	  most these gadgets, end of is signified either by a short packet,
	  or filling the last byte of the buffer.  (Sending extra data in
	  that last pckate should trigger an overflow fault.)  But in mode 1,
	  we don't get DMA completion interrupt for short packets.
	 
	  Theoretically, we could enable DMAReq irq (MUSB_RXCSR_DMAMODE = 1),
	  to get endpoint interrupt on every DMA req, but that didn't seem
	  to work reliably.
	 
	  REVISIT an updated g_file_storage can set req->short_not_ok, which
	  then becomes usable as a runtime "use mode 1" hint...
 Experimental: Mode1 works with mass storage use cases 
					
					  this special sequence (enabling and then
					  disabling MUSB_RXCSR_DMAMODE) is required
					  to get DMAReq to activate
 In case first packet is short 
 Mode must be set after DMAENAB 
			
			  Unmap the dma buffer back to cpu if dma channel
			  programming fails. This buffer is mapped if the
			  channel allocation is successful
			
			  Clear DMAENAB and AUTOCLEAR for the
			  PIO mode transfer
			 REVISIT if we left anything in the fifo, flush
			  it and report -EOVERFLOW
 ack the read! 
 reach the end or short packet detected 
  Data ready for a request; called from IRQ
 csr |= MUSB_RXCSR_P_WZC_BITS; 
 REVISIT not necessarily an error 
 "should not happen"; likely RXPKTRDY pending for DMA 
 Autoclear doesn't clear RxPktRdy for short packets 
 ack the read! 
 incomplete, and not short? wait for next IN packet 
			 In double buffer case, continue to unload fifo if
 			  there is Rx packet in FIFO.
		
		  In the giveback function the MUSB lock is
		  released and acquired after sometime. During
		  this time period the INDEX register could get
		  changed by the gadget_queue function especially
		  on SMP systems. Reselect the INDEX to be sure
		  we are readingmodifying the right registers
 Analyze request 
 ------------------------------------------------------------ 
 check direction and (later) maxpacket size against endpoint 
 REVISIT this rules out high bandwidth periodic transfers 
	 enable the interrupts for the endpoint, set the endpoint
	  packet size (or fail), set the mode, clear the fifo
		 REVISIT if can_bulk_split(), use by updating "tmp";
		  likewise high bandwidth periodic tx
		 Set TXMAXP with the FIFO size of the endpoint
		  to disable double buffering mode.
 set twice in case of double buffering 
 REVISIT may be inappropriate wo FIFONOTEMPTY ... 
		 REVISIT if can_bulk_combine() use by updating "tmp"
		  likewise high bandwidth periodic rx
		 Set RXMAXP with the FIFO size of the endpoint
		  to disable double buffering mode.
 force shared fifo to OUT-only mode 
 set twice in case of double buffering 
	 NOTE:  all the IO code _should_ work fine without DMA, in case
	  for some reason you run out of channels here.
  Disable an endpoint flushing all requests queued.
 zero the endpoint sizes 
 abort all pending DMA and requests 
  Allocate a request for an endpoint.
  Reused by ep0 code.
  Free a request
  Reused by ep0 code.
  Context: controller locked, IRQs blocked.
 request is mine now... 
 don't queue if the ep is down 
 add request to the list 
 it this is the head of the queue, start io ... 
 if the hardware doesn't have the request, easy ... 
 ... else abort the dma transfer ... 
		 NOTE: by sticking to easily tested hardwaredriver states,
		  we leave counting of in-flight packets imprecise.
  Set or clear the halt bit of an endpoint. A halted endpoint won't txrx any
  data but will queue requests.
  exported to ep0 code
 Cannot portably stall with non-empty FIFO 
 setclear the stall and toggle bits 
 maybe start the first request in the queue 
  Sets the halt feature with the clear requests ignored
 FIXME return zero unless RXPKTRDY is set 
 disable interrupts 
			
			  Setting both TXPKTRDY and FLUSHFIFO makes controller
			  to interrupt current FIFO loading, but not flushing
			  the already loaded ones.
 REVISIT may be inappropriate wo FIFONOTEMPTY ... 
 re-enable interrupt 
 ----------------------------------------------------------------------- 
		 NOTE:  OTG state machine doesn't include B_SUSPENDED;
		  that's part of the standard usb 1.1 state machine, and
		  doesn't affect OTG transitions.
 Start SRP ... OTG not required. 
 Block idling for at least 1s 
 FIXME do this next chunk in a timer callback, no udelay 
 FIXME if on, HdrcStart; if off, HdrcStop 
	
	  FIXME iff driver's softconnect flag is set (as it is during probe,
	  though that can clear it), just musb_pullup().
	 NOTE: this assumes we are sensing vbus; we'd rather
	  not pullup unless the B-session is active.
 .vbus_session		= musb_gadget_vbus_session, 
 ----------------------------------------------------------------------- 
 Registration 
 Only this registration code "knows" the rule (from USB standards)
  about there being only one external upstream port.  It assumes
  all peripheral ports are external...
  Initialize the endpoints exposed to peripheral drivers, with backlinks
  to the rest of the driver state.
 initialize endpoint list just once 
 || !epnum ) {
 called once during driver setup to initialize and link into
  the driver model; memory is zeroed.
	 REVISIT minor race:  if (erroneously) setting up two
	  musb peripherals at the same time, only the bus lock
	  is probably held.
 this "gadget" abstractsvirtualizes the controller 
 don't support otg protocols 
  Register the gadget driver. Used by gadget drivers when
  registering themselves with the controller.
  -EINVAL something went wrong (not driver)
  -EBUSY another gadget is already using the controller
  -ENOMEM no memory to perform the operation
  @param driver the gadget driver
  @return <0 if error, 0 if everything is fine
	 REVISIT:  funcall to other code, which also
	  handles power budgeting ... this way also
	  ensures HdrcStart is indirectly called.
  Unregister the gadget driver. Used by gadget drivers when
  unregistering themselves from the controller.
  @param driver the gadget driver to unregister
	
	  REVISIT always use otg_set_peripheral() here too;
	  this needs to shut down the OTG engine.
	
	  FIXME we need to be able to register another
	  gadget driver here and have everything work;
	  that currently misbehaves.
 Force check of devctl register for PM runtime 
 ----------------------------------------------------------------------- 
 lifecycle operations called through plat_uds.c 
 called when SOF packets stop for 3+ msec 
		 REVISIT if B_HOST, clear DEVCTL.HOSTREQ;
		  A_PERIPHERAL may need care too
 Called during SRP 
 called when VBUS drops below session threshold, and in other cases 
 clear HR 
 don't draw vbus until new b-default session 
 report reset, if we didn't already (flushing EP state) 
 clear HR 
 what speed did we negotiate? 
 start in USB_STATE_DEFAULT 
	 Normal reset, as B-Device;
	  or else after HNP, as A-Device
		 USB device controllers that are not OTG compatible
		  may not have DEVCTL register in silicon.
		  In that case, do not rely on devctl for setting
		  peripheral mode.
 start with default limits on VBUS power draw 
 SPDX-License-Identifier: GPL-2.0
  TUSB6010 USB 2.0 OTG Dual Role controller OMAP DMA interface
  Copyright (C) 2006 Nokia Corporation
  Tony Lindgren <tony@atomide.com>
 REVISIT: Really 6, but req5 not OK 
  Allocate dmareq0 to the current channel unless it's already taken
  See also musb_dma_completion in plat_uds.c and musb_g_[tx|rx]() in
  musb_gadget.c.
 HW issue #10: XFR_SIZE may get corrupt on DMA (both async & sync) 
 Transfer remaining 1 - 31 bytes 
	 We must terminate short tx transfers manually by setting TXPKTRDY.
	  REVISIT: This same problem may occur with other MUSB dma as well.
	  Easy to test with g_ether by pinging the MUSB board with ping -s54.
	
	  HW issue #10: Async dma will eventually corrupt the XFR_SIZE
	  register which will cause missed DMA interrupt. We could try to
	  use a timer for the callback, but it is unsafe as the XFR_SIZE
	  register is corrupt, and we won't know if the DMA worked.
	
	  Because of HW issue #10, it seems like mixing sync DMA and async
	  PIO access can confuse the DMA. Make sure XFR_SIZE is reset before
	  using the channel for DMA.
			 REVISIT: This should get blocked earlier, happens
			  with MSC ErrorRecoveryTest
 Since we're recycling dma areas, we need to clean or invalidate 
 Use 16-bit transfer if dma_addr is not 32-bit aligned 
	
	  Prepare MUSB for DMA transfer
 Start DMA transfer 
 Send transfer_packet_sz packets at a time 
 Receive transfer_packet_sz packets at a time 
 REVISIT: Why does dmareq5 not work? 
 Free up the DMA channels 
		
		  Request DMA channels:
		  - one channel in case of non multichannel mode
		  - MAX_DMAREQ number of channels in multichannel mode
 REVISIT: Get dmareq lines used from board-.c 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019 MediaTek Inc.
  Author:
   Min Guo <min.guo@mediatek.com>
   Yonglong Wu <yonglong.wu@mediatek.com>
 MediaTek controller toggle enable and status reg 
 ep0 FADDR must be 0 when (re)entering peripheral mode 
 W1C 
 W1C 
 Set TXRX toggle enable 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2005-2006 by Texas Instruments
  This file implements a DMA  interface using TI's CPPI DMA.
  For now it's DaVinci-only, but CPPI isn't specific to DaVinci or USB.
  The TUSB6020, using VLYNQ, has CPPI that looks much like DaVinci.
 CPPI DMA status 7-mar-2006:
  - See musb_{host,gadget}.c for more info
  - Correct RX DMA generally forces the engine into irq-per-packet mode,
    which can easily saturate the CPU under non-mass-storage loads.
  NOTES 24-aug-2006 (2.6.18-rc4):
  - peripheral RXDMA wedged in a test with packets of length 5125121.
    evidently after the 1 byte packet was received and acked, the queue
    of BDs got garbaged so it wouldn't empty the fifo.  (rxcsr 0x2003,
    and RX DMA0: 4 left, 80000000 8feff880, 8feff860 8feff860; 8f321401
    004001ff 00000001 .. 8feff860)  Host was just getting NAKed on tx
    of its next (512 byte) packet.  IRQ issues?
  REVISIT:  the "transfer DMA" glue between CPPI and USB fifos will
  evidently also directly update the RX and TX CSRs ... so audit all
  host and peripheral side DMA code to avoid CSR access after DMA has
  been started.
 REVISIT now we can avoid preallocating these descriptors; or
  more simply, switch to a global freelist not per-channel ones.
  Note: at full speed, 64 descriptors == 4K bulk data.
	 REVISIT this "should not be needed",
	  but lack of it sure seemed to hurt ...
   Start DMA controller
   Initialize the DMA controller as necessary.
 zero out entire rx state RAM entry for the channel 
 zero out entire tx state RAM entry for the channel 
 musb_writel(&tx->tx_dummy, 0, 0); 
 initialize channel fields 
 build the BD Free list for the channel 
 free all its bds 
 do whatever is necessary to start controller 
 setup BD list on a per channel basis 
 initialise txrx channel head pointers to zero 
 enable individual cppi channels 
 enable txrx CPPI control 
 disable RNDIS mode, also host rx RNDIS autorequest 
   Stop DMA controller
   De-Init the DMA controller as necessary.
 DISABLE INDIVIDUAL CHANNEL Interrupts 
 FIXME restructure of txdma to use bds like rxdma 
	 in Tx Case proper teardown is supported. We resort to disabling
	  TxRx CPPI after cleanup of Tx channels. Before TX teardown is
	  complete TX CPPI cannot be disabled.
disable txrx cppi 
 While dma channel is allocated, we only want the core irqs active
  for fault reports, otherwise we'd get irqs that we don't care about.
  Except for TX irqs, where dma done != fifo empty and reusable ...
  NOTE: docs don't say either way, but irq masking enables irqs.
  REVISIT same issue applies to pure PIO usage too, and non-cppi dma...
  Allocate a CPPI Channel for DMA.  With CPPI, channels are bound to
  each transfer direction of a non-control endpoint, so allocating
  (and deallocating) is mostly a way to notice bad housekeeping on
  the software side.  We assume the irqs are always active.
 ep0 doesn't use DMA; remember cppi indices are 0..N-1 
	 return the corresponding CPPI Channel Handle, and
	  probably disable the non-CPPI irq until we need it.
	 REVISIT make this an error later once the same driver code works
	  with the other DMA engine too
 Release a CPPI Channel.  
 REVISIT:  for paranoia, check state and abort if needed... 
 for now, leave its cppi IRQ enabled (we won't trigger it) 
 Context: controller irqlocked 
 Context: controller irqlocked 
 dummyunused word 6 
 Context: controller irqlocked 
 we may need to change the rndis flag for this cppi channel 
 NOTE:  DaVinci autoreq is ignored except for host side "RNDIS" mode RX;
  so we won't ever use it (see "CPPI RX Woes" below).
 assert(is_host_active(musb)) 
 start from "AutoReq never" 
	 HCD arranged reqpkt for packet #1.  we arrange int
	  for all but the last one, maybe in two segments.
 use two segments, autoreq "all" then the last "never" 
 one segment, autoreq "all-but-last" 
 make sure that autoreq is updated before continuing 
 REQPKT is turned off after each segment 
 flush writebuffer 
 Buffer enqueuing Logic:
   - RX builds new queues each time, to help handle routine "early
     termination" cases (faults, including errors and short reads)
     more correctly.
   - for now, TX reuses the same queue of BDs every time
  REVISIT long term, we want a normal dynamic model.
  ... the goal will be to append to the
  existing queue, processing completed "dma buffers" (segments) on the fly.
  Otherwise we force an IRQ latency between requests, which slows us a lot
  (especially in "transparent" dma).  Unfortunately that model seems to be
  inherent in the DMA model from the Mentor code, except in the rare case
  of transfers big enough (~128+ KB) that we could append "middle" segments
  in the TX paths.  (RX can't do this, see below.)
  That's true even in the CPPI- friendly iso case, where most urbs have
  several small segments provided in a group and where the "packet at a time"
  "transparent" DMA model is always correct, even on the RX side.
  CPPI TX:
  ========
  TX is a lot more reasonable than RX; it doesn't need to run in
  irq-per-packet mode very often.  RNDIS mode seems to behave too
  (except how it handles the exactly-N-packets case).  Building a
  txdma queue with multiple requests (urb or usb_request) looks
  like it would work ... but fault handling would need much testing.
  The main issue with TX mode RNDIS relates to transfer lengths that
  are an exact multiple of the packet length.  It appears that there's
  a hiccup in that case (maybe the DMA completes before the ZLP gets
  written?) boiling down to not being able to rely on CPPI writing any
  terminating zero length packet before the next transfer is written.
  So that's punted to PIO; better yet, gadget drivers can avoid it.
  Plus, there's allegedly an undocumented constraint that rndis transfer
  length be a multiple of 64 bytes ... but the chip doesn't act that
  way, and we really don't _want_ that behavior anyway.
  On TX, "transparent" mode works ... although experiments have shown
  problems trying to use the SOPEOP bits in different USB packets.
  REVISIT try to handle terminating zero length packets using CPPI
  instead of doing it by PIO after an IRQ.  (Meanwhile, make Ethernet
  links avoid that issue by forcing them to avoid zlps.)
	 TX can use the CPPI "rndis" mode, where we can probably fit this
	  transfer in one BD and one IRQ.  The only time we would NOT want
	  to use it is when hardware constraints prevent it, or if we'd
	  trigger the "send a ZLP?" confusion.
	 assuming here that channel_program is called during
	  transfer initiation ... current code maintains state
	  for one outstanding request only (no queues, not even
	  the implicit ones of an iso urb).
	 FIXME use BD pool like RX side does, and just queue
	  the minimum number for this request.
	 Prepare queue of BDs first, then hand it to hardware.
	  All BDs except maybe the last should be of full packet
	  size; for RNDIS there _is_ only that last packet.
		 FIXME set EOP only on the last packet,
		  SOP only on the first ... avoid IRQs
 only this one may be a partial USB Packet 
 update the last BD enqueued to the list 
 BDs live in DMA-coherent memory, but writes might be pending 
 Write to the HeadPtr in state RAM to trigger 
  CPPI RX Woes:
  =============
  Consider a 1KB bulk RX buffer in two scenarios:  (a) it's fed two 300 byte
  packets back-to-back, and (b) it's fed two 512 byte packets back-to-back.
  (Full speed transfers have similar scenarios.)
  The correct behavior for Linux is that (a) fills the buffer with 300 bytes,
  and the next packet goes into a buffer that's queued later; while (b) fills
  the buffer with 1024 bytes.  How to do that with CPPI?
  - RX queues in "rndis" mode -- one single BD -- handle (a) correctly, but
    (b) loses BADLY because nothing (!) happens when that second packet
    fills the buffer, much less when a third one arrives.  (Which makes this
    not a "true" RNDIS mode.  In the RNDIS protocol short-packet termination
    is optional, and it's fine if peripherals -- not hosts! -- pad messages
    out to end-of-buffer.  Standard PCI host controller DMA descriptors
    implement that mode by default ... which is no accident.)
  - RX queues in "transparent" mode -- two BDs with 512 bytes each -- have
    converse problems:  (b) is handled right, but (a) loses badly.  CPPI RX
    ignores SOPEOP markings and processes both of those BDs; so both packets
    are loaded into the buffer (with a 212 byte gap between them), and the next
    buffer queued will NOT get its 300 bytes of data. (It seems like SOPEOP
    are intended as outputs for RX queues, not inputs...)
  - A variant of "transparent" mode -- one BD at a time -- is the only way to
    reliably make both cases work, with software handling both cases correctly
    and at the significant penalty of needing an IRQ per packet.  (The lack of
    IO overlap can be slightly ameliorated by enabling double buffering.)
  So how to get rid of IRQ-per-packet?  The transparent multi-BD case could
  be used in special cases like mass storage, which sets URB_SHORT_NOT_OK
  (or maybe its peripheral side counterpart) to flag (a) scenarios as errors
  with guaranteed driver level fault recovery and scrubbing out what's left
  of that garbaged datastream.
  But there seems to be no way to identify the cases where CPPI RNDIS mode
  is appropriate -- which do NOT include RNDIS host drivers, but do include
  the CDC Ethernet driver! -- and the documentation is incompletewrong.
  So we can't _ever_ use RX RNDIS mode ... except by using a heuristic
  that applies best on the peripheral side (and which could fail rudely).
  Leaving only "transparent" mode; we avoid multi-bd modes in almost all
  cases other than mass storage class.  Otherwise we're correct but slow,
  since CPPI penalizes our need for a "true RNDIS" default mode.
 Heuristic, intended to kick in for ethernetrndis peripheral ONLY
  IFF
   (a)	peripheral mode ... since rndis peripherals could pad their
 	writes to hosts, causing io failure; or we'd have to cope with
 	a largely unknowable variety of host side protocol variants
   (b)	and short reads are NOT errors ... since full reads would
 	cause those same io failures
   (c)	and read length is
 	- less than 64KB (max per cppi descriptor)
 	- not a multiple of 4096 (g_zero default, full reads typical)
 	- N (>1) packets long, ditto (full reads not EXPECTED)
  THEN
    try rx rndis mode
  Cost of heuristic failing:  RXDMA wedges at the end of transfers that
  fill out the whole buffer.  Buggy host side usb network drivers could
  trigger that, but "in the field" such bugs seem to be all but unknown.
  So this module parameter lets the heuristic be disabled.  When using
  gadgetfs, the heuristic will probably need to be disabled.
  cppi_next_rx_segment - dma read for the next chunk of a buffer
  @musb: the controller
  @rx: dma channel
  @onepacket: true unless caller treats short reads as errors, and
 	performs fault recovery above usbcore.
  Context: controller irqlocked
  See above notes about why we can't use multi-BD RX queues except in
  rare cases (mass storage class), and can never use the hardware "rndis"
  mode (since it's not a "true" RNDIS mode) with complete safety..
  It's ESSENTIAL that callers specify "onepacket" mode unless they kick in
  code to recover from corrupted datastreams after each short transfer.
 almost every USB driver, host or peripheral side 
 maybe apply the heuristic above 
 virtually nothing except mass storage class 
	 In host mode, autorequest logic can generate some IN tokens; it's
	  tricky since we can't leave REQPKT set in RXCSR after the transfer
	  finishes. So:  multipacket transfers involve two or more segments.
	  And always at least two IRQs ... RNDIS mode is not an option.
	 only queue one segment at a time, since the hardware prevents
	  correct queue shutdown after unexpected short packets
 Build BDs for all packets in this segment 
 all but the last packet will be maxpacket size 
offset << 16) + bd_len;
 we always expect at least one reusable BD! 
	 short reads and other faults should terminate this entire
	  dma segment.  we want one "dma packet" per dma segment, not
	  one per USB packet, terminating the whole queue at once...
	  NOTE that current hardware seems to ignore SOP and EOP.
 in case the preceding transfer left some state... 
 BDs live in DMA-coherent memory, but writes might be pending 
	 REVISIT specs say to write this AFTER the BUFCNT register
	  below ... but that loses badly.
	 bufferCount must be at least 3, and zeroes on completion
	  unless it underflows below zero, or stops at two, or keeps
	  growing ... grr.
  cppi_channel_program - program channel for data transfer
  @ch: the channel
  @maxpacket: max packet size
  @mode: For RX, 1 unless the usb protocol driver promised to treat
 	all short reads as errors and kick in high level fault recovery.
 	For TX, ignored because of RNDIS mode racesglitches.
  @dma_addr: dma address of buffer
  @len: length of buffer
  Context: controller irqlocked
 fault irq handler should have handled cleanup 
 WARN_ON(1); 
 WARN_ON(1); 
 set transfer parameters, then queue up its first segment 
 TX channel? or RX? 
 run through all completed BDs 
 catch latest BD writes from CPPI 
 actual packet received length 
			 NOTE:  when we get a short packet, RXCSR_H_REQPKT
			  must have been cleared, and no more DMA packets may
			  active be in the queue... TI docs didn't say, but
			  CPPI ignores those BDs even though OWN is still set.
		 If we got here, we expect to ack at least one BD; meanwhile
		  CPPI may completing other BDs while we scan this list...
		 
		  RACE: we can notice OWN cleared before CPPI raises the
		  matching irq by writing that BD as the completion pointer.
		  In such cases, stop scanning and wait for the irq, avoiding
		  lost acks and states where BD ownership is unclear.
 stop scanning on end-of-segment 
 dma abort, lost ack, or ... 
			 if we land here on the host side, H_REQPKT will
			  be clear and we need to restart the queue...
		 REVISIT seems like "autoreq all but EOP" doesn't...
		  setting it here "should" be racey, but seems to work
 process TX channels 
		 FIXME  need a cppi_tx_scan() routine, which
		  can also be called from abort code
		
		  If Head is null then this could mean that a abort interrupt
		  that needs to be acknowledged.
 run through all completed BDs 
 catch latest BD writes from CPPI 
			 write completion register to acknowledge
			  processing of completed BDs, and possibly
			  release the IRQ; EOQ might not be set ...
			 
			  REVISIT use the same ack strategy as rx
			 
			  REVISIT have observed bit 18 set; huh??
 if ((bd->hw_options & CPPI_EOQ_MASK)) 
 stop scanning on end-of-segment 
 on end of segment, maybe go to next one 
 cppi_dump_tx(4, tx_ch, "complete"); 
 transfer more, or report completion 
				 Bigger transfer than we could fit in
				  that first batch of descriptors...
 Start processing the RX block 
 let incomplete dma segments finish 
 start another dma segment if needed 
 all segments completed! 
 write to CPPI EOI register to re-enable interrupts 
 Instantiate a software object representing a DMA controller. 
	 NOTE: allocating from on-chip SRAM would give the least
	  contention for memory access, if that ever matters here.
 setup BufferPool 
   Destroy a previously-instantiated DMA controller.
 assert:  caller stopped the controller first 
  Context: controller irqlocked, endpoint selected
 from RX or TX fault irq handler 
 the hardware needs shutting down 
	 REVISIT should rely on caller having done this,
	  and caller should rely on us not changing it.
	  peripheral code is safe ... check host too.
 REVISIT put timeouts on these controller handshakes 
 teardown DMA engine then usb core 
		 FIXME clean up the transfer state ... here?
		  the completion routine should get called with
		  an appropriate status code.
		
		  1. Write to completion Ptr value 0x1(bit 0 set)
		     (write back mode)
		  2. Wait for abort interrupt and then put the channel in
		     compare mode by writing 1 to the tx_complete register.
		 REVISIT tx side _should_ clean up the same way
		  as the RX side ... this does no cleanup at all!
 RX  {
		 NOTE: docs don't guarantee any of this works ...  we
		  expect that if the usb core stops telling the cppi core
		  to pull more data from it, then it'll be safe to flush
		  current RX DMA state iff any pending fifo transfer is done.
 for host, ensure ReqPkt is never set again 
 for host, clear (just) ReqPkt at end of current packet(s) 
 clear dma enable 
		 Quiesce: wait for current dma to finish (if not cleanup).
		  We can't use bit zero of stateram->rx_sop, since that
		  refers to an entire "DMA packet" not just emptying the
		  current fifo.  Most segments need multiple usb packets.
		 scan the current list, reporting any data that was
		  transferred and acking any IRQ
		 clobber the existing state once it's idle
		 
		  NOTE:  arguably, we should also wait for all the other
		  RX channels to quiesce (how??) and then temporarily
		  disable RXCPPI_CTRL_REG ... but it seems that we can
		  rely on the controller restarting from state ram, with
		  only RXCPPI_BUFCNT state being bogus.  BUFCNT will
		  correct itself after the next DMA transfer though.
		 
		  REVISIT does using rndis mode change that?
 next DMA request _should_ load cppi head ptr 
 ... we don't "free" that list, only mutate it in place.  
 clean up previously pending bds 
 TBD Queries:
  Power Management ... probably turn off cppi during suspend, restart;
  check state ram?  Clocking is presumably shared with usb core.
 SPDX-License-Identifier: GPL-2.0
  MUSB OTG driver virtual root hub support
  Copyright 2005 Mentor Graphics Corporation
  Copyright (C) 2005-2006 by Texas Instruments
  Copyright (C) 2006-2007 Nokia Corporation
	
	  ISSUE:  DaVinci (RTL 1.300) disconnects after
	  resume of high speed peripherals (but not full
	  speed ones).
 NOTE: it might really be A_WAIT_BCON ... 
	 NOTE:  this doesn't necessarily put PHY into low power mode,
	  turning off its clock; that's a function of PHY integration and
	  MUSB_POWER_ENSUSPEND.  PHY may need a clock (sigh) to detect
	  SE0 changing to connect (J) or wakeup (K) states.
 Needed for OPT A tests 
	 NOTE:  caller guarantees it will turn off the reset when
	  the appropriate amount of time has passed
		
		  If RESUME is set, we must make sure it stays minimum 20 ms.
		  Then we must clear RESUME and wait a bit to let musb start
		  generating SOFs. If we don't do this, OPT HS A 6.8 tests
		  fail with "Error! Did not receive an SOF before suspend
		  detected".
 take into account the minimum delay after resume 
 Give the core 1 ms to clear MUSB_POWER_RESUME 
---------------------------------------------------------------------
 Caller may or may not hold musb->lock 
 called in_irq() via usb_hcd_poll_rh_status() 
	
	  In host-only mode we start a connection right away. In OTG mode
	  we have to wait until we loaded a gadget. We don't really need a
	  gadget if we operate as a host but we should not start a session
	  as a device without a gadget or else we explode.
	 hub features:  always zero, setting is a NOP
	  port features: reported, sometimes updated when host is active
	  no indicators
 per-port power switching 
 no overcurrent reporting 
 msec2 
 workaround bogus struct definition 
 port 1 
 port change status is more interesting 
			 NOTE: this controller has a strange state machine
			  that involves "requesting sessions" according to
			  magic side effects from incompletely-described
			  rules about startup...
			 
			  This call is what really starts the host mode; be
			  very careful about side effects if you reorder any
			  initialization logic, e.g. for OTG, or change any
			  logic relating to VBUS power-up.
 "protocol stall" on error 
 SPDX-License-Identifier: GPL-2.0
  MUSB OTG driver - support for Mentor's DMA controller
  Copyright 2005 Mentor Graphics Corporation
  Copyright (C) 2005-2007 by Texas Instruments
 control register (16-bit): 
 Tx => mode 1; Rx => mode 0 
 addresscount 
 control (this should start things) 
	
	  The DMA engine in RTL1.8 and above cannot handle
	  DMA addresses that are not aligned to a 4 byte boundary.
	  It ends up masking the last two bits of the address
	  programmed in DMA_ADDR.
	 
	  Fail such DMA transfers, so that the backup PIO mode
	  can carry out the transfer
			
			  The programming guide says that we must clear
			  the DMAENAB bit before the DMAMODE bit...
 completed 
					
					  The programming guide says that we
					  must clear DMAENAB before DMAMODE.
 Send out the packet 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2005-2007 by Texas Instruments
  Some code has been taken from tusb6010.c
  Copyrights for that are attributable to:
  Copyright (C) 2006 Nokia Corporation
  Tony Lindgren <tony@atomide.com>
  This file is part of the Inventra Controller Driver for Linux.
 in any role 
 enable MSTANDBY 
 disable MSTANDBY 
  HDRC controls CPEN, but beware current surges during device connect.
  They can trigger transient overcurrent conditions that must be ignored.
  Note that we're skipping A_WAIT_VFALL -> A_IDLE and jumping right to B_IDLE
  as set by musb_set_peripheral().
			
			  On multiple ID ground interrupts just keep enabling
			  VBUS. At least cpcap VBUS shuts down otherwise.
	 We require some kind of external transceiver, hooked
	  up through ULPI.  TWL4030-family PMICs include one,
	  which needs a driver, drivers aren't always needed.
	 We can't totally remove musb->xceiv as of now because
	  musb core uses xceiv.state and xceiv.otg. Once we have
	  a separate state machine to handle otg, these can be moved
	  out of xceiv and then we can start using the generic PHY
	  framework
 OMAP4 uses Internal PHY GS70 which uses UTMI interface 
 Disable ULPI 
 Enable UTMI  
	
	  REVISIT if we ever have two instances of the wrapper, we will be
	  in big trouble
 Wait for musb to get oriented. Otherwise we can get babble 
 I2C and SPI PHYs need to be suspended before the glue layer 
 Glue layer needs to be suspended after musb_suspend() 
 SPDX-License-Identifier: GPL-2.0
  MUSB OTG driver debugfs support
  Copyright 2010 Nokia Corporation
  Contact: Felipe Balbi <felipe.balbi@nokia.com>
 Terminating Entry 
			
			  musb_save_context() called in musb_runtime_suspend()
			  might cache devctl with SESSION bit cleared during
			  soft-disconnect, so specifically set SESSION bit
			  here to preserve it for musb_runtime_resume().
  In host mode, connectdisconnect the bus without physically
  remove the devices.
 __init_or_exit  musb_exit_debugfs(struct musb musb)
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2010 ST-Ericsson AB
  Mian Yousaf Kaukab <mian.yousaf.kaukab@stericsson.com>
  Based on omap2430.c
	 HDRC controls CPEN, but beware current surges during device
	  connect.  They can trigger transient overcurrent conditions
	  that must be ignored.
 start the session 
			
			  Wait for the musb to set as A device to enable the
			  VBUS
		 NOTE: we're skipping A_WAIT_VFALL -> A_IDLE and jumping
		  right to B_IDLE...
	
	  Devctl values will be updated after vbus goes below
	  session_valid. The time taken depends on the capacitance
	  on VBUS line. The max discharge time can be upto 1 sec
	  as per the spec. Typically on our platform, it is 200ms
 SPDX-License-Identifier: GPL-2.0
  MUSB OTG driver core code
  Copyright 2005 Mentor Graphics Corporation
  Copyright (C) 2005-2006 by Texas Instruments
  Copyright (C) 2006-2007 Nokia Corporation
  Inventra (Multipoint) Dual-Role Controller Driver for Linux.
  This consists of a Host Controller Driver (HCD) and a peripheral
  controller driver implementing the "Gadget" API; OTG support is
  in the works.  These are normal Linux-USB controller drivers which
  use IRQs and have no dedicated thread.
  This version of the driver has only been used with products from
  Texas Instruments.  Those products integrate the Inventra logic
  with other DMA, IRQ, and bus modules, as well as other logic that
  needs to be reflected in this driver.
  NOTE:  the original Mentor code here was pretty much a collection
  of mechanisms that don't seem to have been fully integratedworking
  for any Linux kernel version.  This version aims at Linux 2.6.now,
  Key open issues include:
   - Lack of host-side transaction scheduling, for all transfer types.
     The hardware doesn't do it; instead, software must.
     This is not an issue for OTG devices that don't support external
     hubs, but for more "normal" USB hosts it's a user issue that the
     "multipoint" support doesn't scale in the expected ways.  That
     includes DaVinci EVM in a common non-OTG mode.
        Control and bulk use dedicated endpoints, and there's as
         yet no mechanism to either (a) reclaim the hardware when
         peripherals are NAKing, which gets complicated with bulk
         endpoints, or (b) use more than a single bulk endpoint in
         each direction.
         RESULT:  one device may be perceived as blocking another one.
        Interrupt and isochronous will dynamically allocate endpoint
         hardware, but (a) there's no record keeping for bandwidth;
         (b) in the common case that few endpoints are available, there
         is no mechanism to reuse endpoints to talk to multiple devices.
         RESULT:  At one extreme, bandwidth can be overcommitted in
         some hardware configurations, no faults will be reported.
         At the other extreme, the bandwidth capabilities which do
         exist tend to be severely undercommitted.  You can't yet hook
         up both a keyboard and a mouse to an external USB hub.
  This gets many kinds of configuration information:
 	- Kconfig for everything user-configurable
 	- platform_device for addressing, irq, and platform_data
 	- platform_data is mostly for board-specific information
 	  (plus recentrly, SOC or family details)
  Most of the conditional compilation will (someday) vanish.
-------------------------------------------------------------------------
-------------------------------------------------------------------------
 Make sure the transceiver is not in low power mode 
	 REVISIT: musbhdrc_ulpi_an.pdf recommends setting the
	  ULPICarKitControlDisableUTMI after clearing POWER_SUSPENDM.
 Make sure the transceiver is not in low power mode 
-------------------------------------------------------------------------
 "flat" mapping: each endpoint has its own io address 
 "indexed" mapping: INDEX register controls register bank select 
  Load an endpoint's FIFO
 we can't assume unaligned reads work 
 best case is 32bit-aligned source address 
 byte aligned 
  Unload an endpoint's FIFO
 we can't assume unaligned writes work 
 best case is 32bit-aligned destination address 
 byte aligned 
  Old style IO functions
  New style IO functions
  musb_set_host - set and initialize host mode
  @musb: musb controller driver data
  At least some musb revisions need to enable devctl session bit in
  peripheral mode to switch to host mode. Initializes things to host
  mode and sets A_IDLE. SoC glue needs to advance state further
  based on phy provided VBUS state.
  Note that the SoC glue code may need to wait for musb to settle
  on enable before calling this to avoid babble.
  musb_set_peripheral - set and initialize peripheral mode
  @musb: musb controller driver data
  Clears devctl session bit and initializes things for peripheral
  mode and sets B_IDLE. SoC glue needs to advance state further
  based on phy provided VBUS state.
-------------------------------------------------------------------------
 for high speed test mode; see USB 2.0 spec 7.1.20 
 implicit SYNC then DATA0 to start 
 JKJKJKJK x9 
 JJKKJJKK x8 
 JJJJKKKK x8 
 JJJJJJJKKKKKKK x8 
 JJJJJJJK x8 
 JKKKKKKK x10, JK 
 implicit CRC16 then EOP to end 
-------------------------------------------------------------------------
  Handles OTG hnp timeouts, such as b_ase0_brst
  Stops the HNP transition. Caller must take care of locking.
 REVISIT: Start SESSION_REQUEST here? 
	
	  When returning to A state after HNP, avoid hub_port_rebounce(),
	  which cause occasional OPT A "Did not receive reset after connect"
	  errors.
 remote wakeup? 
 possibly DISCONNECT is upcoming 
			 disconnect while suspended?  we may
			  not get a disconnect irq...
 return IRQ_HANDLED to tell the caller to return immediately 
	 IRQ arrives from ID pin sense or (later, if VBUS power
	  is removed) SRP.  responses are time critical:
	   - turn on VBUS (with silicon-specific mechanism)
	   - go through A_WAIT_VRISE
	   - ... to A_WAIT_BCON.
	  a_wait_vrise_tmout triggers VBUS_ERROR transitions
	 During connection as an A-Device, we may see a short
	  current spikes causing voltage drop, because of cable
	  and peripheral capacitance combined with vbus draw.
	  (So: less common with truly self-powered devices, where
	  vbus doesn't act like a power supply.)
	 
	  Such spikes are short; usually less than ~500 usec, max
	  of ~2 msec.  That is, they're not sustained overcurrent
	  errors, though they're reported using VBUSERROR irqs.
	 
	  Workarounds:  (a) hardware: use self powered devices.
	  (b) software:  ignore non-repeated VBUS errors.
	 
	  REVISIT:  do delays from lots of DEBUG_KERNEL checks
	  make trouble here, keeping VBUS < 4.4V ?
		 recovery is dicey once we've gotten past the
		  initial stages of enumeration, but if VBUS
		  stayed ok at the other end of the link, and
		  another reset is due (at least for high speed,
		  to redo the chirp etc), it might work OK...
 case 3 << MUSB_DEVCTL_VBUS_SHIFT: 
 go through A_WAIT_VFALL then start a new session 
		 We also come here if the cable is removed, since
		  this silicon doesn't report ID-no-longer-grounded.
		 
		  We depend on T(a_wait_bcon) to shut us down, and
		  hope users don't do anything dicey during this
		  undesired detour through A_WAIT_BCON.
 Transition to B_PERIPHERAL, see 6.8.2.6 p 44 
 "should not happen" 
 high vs full speed is just a guess until after reset 
 indicate new connection to OTG machine 
		 REVISIT this behaves for "real disconnect"
		  cases; make sure the other transitions from
		  from B_HOST act right too.  The B_HOST code
		  in hnp_stop() is currently not used...
  mentor saves a bit: bus reset and babble share the same irq.
  only host sees babble; only peripheral sees bus reset.
		
		  When BABBLE happens what we can depends on which
		  platform MUSB is running, because some platforms
		  implemented proprietary means for 'recovering' from
		  Babble conditions. One such platform is AM335x. In
		  most cases, however, the only thing we can do is
		  drop the session.
 OPT TD.4.7-900ms 
 never use invalid T(a_wait_bcon) 
  Interrupt Service Routine to record USB "global" interrupts.
  Since these do not happen often and signify things of
  paramount importance, it seems OK to check them individually;
  the order of the tests is specified in the manual
  @param musb instance pointer
  @param int_usb register contents
  @param devctl
	 in host mode, the peripheral may issue remote wakeup.
	  in peripheral mode, the host may resume the link.
	  spurious RESUME irqs happen too, paired with SUSPEND.
 see manual for the order of the tests 
 REVISIT ... this would be for multiplexing periodic endpoints, or
  supporting transfer phasing to prevent exceeding ISO bandwidth
  limits of a given frame or microframe.
  It's not needed for peripheral side, which dedicates endpoints;
  though it _might_ use SOF irqs for other purposes.
  And it's not currently needed for host side, which also dedicates
  endpoints, relies on TXRX interval registers, and isn't claimed
  to support ISO transfers yet.
 start any periodic Tx transfers waiting for current frame 
			
			  FIXME handle framecounter wraps (12 bits)
			  eliminate duplicated StartUrb logic
 end of for loop 
-------------------------------------------------------------------------
 disable interrupts 
  flush pending interrupts 
  Set INT enable registers, enable interrupts 
  Program the HDRC to start (enable interrupts, dma, etc.).
	
	  treating UNKNOWN as unspecified maximum speed, in which case
	  we will default to high-speed.
	 session started after:
	  (a) ID-grounded irq, host mode;
	  (b) vbus presentconnect IRQ, peripheral mode;
	  (c) peripheral initiates, using SRP
  Make the HDRC stop (disable interrupts, etc.);
  reversible by musb_start
  called on gadget driver unregister
  with controller locked, irqs blocked
  acts as a NOP unless some role activated the hardware
 stop IRQs, timers, ... 
	 FIXME
	   - mark host andor peripheral drivers unusableinactive
	   - disable DMA (and enable it in HdrcStart)
	   - make sure we can musb_start() after musb_stop(); with
	     OTG mode, gadget driver module rmmodmodprobe cycles that
	   - ...
-------------------------------------------------------------------------
  The silicon either has hard-wired endpoint configurations, or else
  "dynamic fifo" sizing.  The driver has support for both, though at this
  writing only the dynamic sizing is very well tested.   Since we switched
  away from compile-time hardware parameters, we can no longer rely on
  dead code elimination to leave only the relevant one in the object file.
  We don't currently use dynamic fifo setup capability to do anything
  more than selecting one of a bunch of predefined configurations.
 "modprobe ... fifo_mode=1" etc 
  tables defining fifo_mode values.  define more if you like.
  for host side, make sure both halves of ep1 are set up.
 mode 0 - fits in 2KB 
 mode 1 - fits in 4KB 
 mode 2 - fits in 4KB 
 mode 3 - fits in 4KB 
 mode 4 - fits in 16KB 
 mode 5 - fits in 8KB 
  configure a fifo; for non-shared endpoints, this may be called
  once for a tx fifo and once for an rx fifo.
  returns negative errno or offset for next fifo.
 expect hw_ep has already been zero-initialized 
 configure the FIFO 
	 EP0 reserved endpoint for control, bidirectional;
	  EP1 reserved for bulk, two unidirectional halves.
 REVISIT error check:  be sure ep0 can both rx and tx ... 
	 NOTE rx and tx endpoint irqs aren't managed separately,
	  which happens to be ok
 assert(offset > 0) 
	 NOTE:  for RTL versions >= 1.400 EPINFO and RAMINFO would
	  be better than static musb->config->num_eps and DYN_FIFO_SIZE...
  ep_config_from_hw - when MUSB_C_DYNFIFO_DEF is false
  @param musb the controller
 FIXME pick up ep0 maxpacket size 
 FIXME set up hw_ep->{rx,tx}_double_buffered 
 pick an RXTX endpoint for bulk 
		 REVISIT:  this algorithm is lazy, we should at least
		  try to pick a double buffered endpoint.
 Initialize MUSB (M)HDRC part of the USB hardware subsystem;
  configure endpoints, or take their config from silicon
 log core options (read using indexed model) 
 log release info 
 configure ep0 
 discover endpoint configuration 
 finish init, and print endpoint config 
-------------------------------------------------------------------------
  handle all the irqs defined by the HDRC core. for now we expect:  other
  irq sources (phy, dma, etc) will be handled first, musb->int_ values
  will be assigned, and the irq will already have been acked.
  called in irq context with spinlock held, irqs blocked
	
	  According to Mentor Graphics' documentation, flowchart on page 98,
	  IRQ should be handled as follows:
	 
	  . Resume IRQ
	  . Session Request IRQ
	  . VBUS Error IRQ
	  . Suspend IRQ
	  . Connect IRQ
	  . Disconnect IRQ
	  . ResetBabble IRQ
	  . SOF IRQ (we're not using this one)
	  . Endpoint 0 IRQ
	  . TX Endpoints
	  . RX Endpoints
	 
	  We will be following that flowchart in order to avoid any problems
	  that might arise with internal Finite State Machine.
 we have just handled endpoint 0 IRQ, clear it 
 "modprobe ... use_dma=0" etc 
 called with controller lock already held 
 endpoint 0 
 endpoints 1..15 
 receive 
  musb_mailbox - optional phy notifier function
  @status phy state change
  Optionally gets called from the USB PHY. Note that the USB PHY must be
  disabled at the point the phy_callback is registered or unregistered.
-------------------------------------------------------------------------
 force T(a_wait_bcon) to be zerounlimited OR valid 
 Use default MUSB method by means of DEVCTL register 
 Gadget drivers can't know that a host is connected so they might want
  to start SRP, but users can.  This allows userspace to trigger SRP.
  Check the musb devctl session bit to determine if we want to
  allow PM runtime for the device. In general, we want to keep things
  active when the session bit is set except after host disconnect.
  Only called from musb_irq_work. If this ever needs to get called
  elsewhere, proper locking must be implemented for musb->session.
 Handle session status quirks first 
 No need to do anything if session has not changed 
 Block PM or allow PM? 
		
		  We can get a spurious MUSB_INTR_SESSREQ interrupt on start-up
		  in B-peripheral mode with nothing connected and the session
		  bit clears silently. Check status again in 3 seconds.
 Only used to provide driver mode change events 
	
	  wait at least 320 cycles of 60MHz clock. That's 5.3us, we will give
	  it some slack and wait for 10us.
 drop session bit 
 tell usbcore about it 
	
	  When a babble condition occurs, the musb controller
	  removes the session bit and the endpoint config is lost.
 restart session 
 --------------------------------------------------------------------------
  Init support
	 this has multiple entry modes. it handles fault cleanup after
	  probe(), where things may be partially set up, as well as rmmod
	  cleanup after everything's been de-activated.
  Called from musb_runtime_resume(), musb_resume(), and
  musb_queue_resume_work(). Callers must take musb->lock.
  Called to run work if device is active or else queue the work to happen
  on resume. Caller must take musb->lock and must hold an RPM reference.
  Note that we cowardly refuse queuing work after musb PM runtime
  resume is done calling musb_run_resume_work() and return -EINPROGRESS
  instead.
  Perform generic per-controller initialization.
  @dev: the controller (already clocked, etc)
  @nIrq: IRQ number
  @ctrl: virtual address of controller registers,
 	not yet corrected for platform-specific offsets
	 The driver might handle more features than the board; OK.
	  Fail when the board needs a feature that's not enabled.
 allocate 
	
	  Initialize the default IO functions. At least omap2430 needs
	  these early. We initialize the platform specific IO functions
	  later on.
	 The musb_platform_init() call:
	    - adjusts musb->mregs
	    - sets the musb->isr
	    - may initialize an integrated transceiver
	    - initializes musb->xceiv, usually by otg_get_phy()
	    - stops powering VBUS
	 
	  There are various transceiver configurations.
	  DaVinci, TUSB60x0, and others integrate them.  OMAP3 uses
	  externaldiscrete ones in various flavors (twl4030 family,
	  isp1504, non-OTG, etc) mostly hooking up through ULPI.
 Most devices use indexed offset or flat offset 
 At least tusb6010 has its own offsets 
	
	  We need musb_readwrite functions initialized for PM.
	  Note that at least 2430 glue needs autosuspend delay
	  somewhere above 300 ms for the hardware to idle properly
	  after disconnecting the cable in host mode. Let's use
	  500 ms for some margin.
 be sure interrupts are disabled before connecting ISR 
 MUSB_POWER_SOFTCONN might be already set, JZ4740 does this. 
 Init IRQ workqueue before request_irq 
 setup musb parts of the core (especially endpoints) 
 attach to the IRQ 
 FIXME this handles wakeup irqs wrong 
 program PHY to use external vBus if required 
-------------------------------------------------------------------------
 all implementations (PCI bridge to FPGA, VLYNQ, etc) should just
  bridge to a platform device; this driver then suffices.
	 this gets called on rmmod.
	   - Host mode: host may still be active
	   - Peripheral mode: peripheral is deactivated (or never-activated)
	   - OTG mode: both roles are deactivated (or never-activated)
 Don't affect SUSPENDMRESUME bits in POWER reg 
		 FIXME force disconnect unless we know USB will wake
		  the system up quickly enough to respond ...
		 we know all the children are suspended; sometimes
		  they will even be wakeup-enabled.
	
	  For static cmos like DaVinci, register values were preserved
	  unless for some reason the whole soc powered down or the USB
	  module got reset through the PSC (vs just being disabled).
	 
	  For the DSPS glue layer though, a full register restore has to
	  be done. As it shouldn't harm other platforms, we do it
	  unconditionally.
 session might be disabled in suspend 
	
	  When pm_runtime_get_sync called for the first time in driver
	  init,  some of the structure is still not initialized which is
	  used in restore function. But clock needs to be
	  enabled before any register access, so
	  pm_runtime_get_sync has to be called.
	  Also context restore without save does not make
	  any sense
 SPDX-License-Identifier: GPL-2.0
	
	  AM335x Advisory 1.0.13: Due to internal synchronisation error the
	  data toggle may reset from DATA1 to DATA0 during receiving data from
	  more than one endpoint.
 done, complete 
		
		  transmit ZLP using PIO mode for transfers which size is
		  multiple of EP packet size.
 next iteration, reload 
			
			  Don't use the early-TX-interrupt workaround below
			  for Isoch transfter. Since Isoch are periodic
			  transfer, by the time the next transfer is
			  scheduled, the current one should be done already.
			 
			  This avoids audio playback underrun issue.
	
	  On AM335x it has been observed that the TX interrupt fires
	  too early that means the TXFIFO is not yet empty but the DMA
	  engine says that it is done with the transfer. We don't
	  receive a FIFO empty interrupt so the only thing we can do is
	  to poll for the bit. On HS it usually takes 2us, on FS around
	  110us - 150us depending on the transfer size.
	  We spin on HS (no longer than than 25us and setup a timer on
	  FS to check for the bit and complete the transfer.
	
	  Due to AM335x' Advisory 1.0.13 we are not allowed to transfer more
	  than max packet size at a time.
 RNDIS mode 
 gen rndis 
 auto req 
 fallback mode 
 AM335x Advisory 1.0.13. No workaround for device RX mode 
 delay to drain to cppi dma pipeline for isoch 
 wait to drain cppi dma pipe line 
 DA8xx Advisory 2.3.27: wait 250 ms before to start the teardown 
 SPDX-License-Identifier: GPL-2.0+
  Allwinner sun4i MUSB Glue Layer
  Copyright (C) 2015 Hans de Goede <hdegoede@redhat.com>
  Based on code from
  Allwinner Technology Co., Ltd. <www.allwinnertech.com>
  Register offsets, note sunxi musb has a different layout then most
  musb implementations, we translate the layout in musb_readb & friends.
 VEND0 bits 
 flags 
 Our readwrite methods need access and do not get passed in a musb ref :| 
 phy_power_on  off may sleep, so we use a workqueue  
 ep0 FADDR must be 0 when (re)entering peripheral mode 
 Register notifier before calling phy_init() 
 Stop the musb-core from doing runtime pm (not supported on sunxi) 
 musb_core does not call us in a balanced manner 
	
	  phy_set_mode may sleep, and we're called with a spinlock held,
	  so let sunxi_musb_work deal with it.
	
	  Schedule a phy_set_mode with the current glue->phy_mode value,
	  this will force end the current session.
  sunxi musb register layout
  0x00 - 0x17	fifo regs, 1 long per fifo
  0x40 - 0x57	generic control regs (power - frame)
  0x80 - 0x8f	ep control regs (addressed through hw_ep->regs, indexed)
  0x90 - 0x97	fifo control regs (indexed)
  0x98 - 0x9f	multipoint  busctl regs (indexed)
  0xc0		configdata reg
 indexed, so ignore epnum 
 generic control or fifo control reg access 
 No testmode on sunxi 
 See musb_read_configdata() 
 A33 saves a reg, and we get to hardcode this 
 Offset for these is fixed by sunxi_musb_busctl_offset() 
 multipoint  busctl reg access 
 ep control reg access 
 sunxi has a 2 byte hole before the txtype register 
 generic control or fifo control reg access 
 Offset for these is fixed by sunxi_musb_busctl_offset() 
 multipoint  busctl reg access 
 ep control reg access 
 generic control or fifo control reg access 
 sunxi musb version is not known 
 ep control reg access 
 generic control or fifo control reg access 
 ep control reg access 
 Allwinner OTG supports up to 5 endpoints 
 H3V3s OTG supports only 4 endpoints 
 SPDX-License-Identifier: GPL-2.0
  Texas Instruments DSPS platforms "glue layer"
  Copyright (C) 2012, by Texas Instruments
  Based on the am35x "glue layer" code.
  This file is part of the Inventra Controller Driver for Linux.
  musb_dsps.c will be a common file for all the TI DSPS platforms
  such as dm64x, dm36x, dm35x, da8x, am35x and ti81x.
  For now only ti81x is using this and in future davinci.c, am35x.c
  da8xx.c would be merged to this file after testing.
  DSPS musb wrapper register offset.
  FIXME: This should be expanded to have all the wrapper registers from TI DSPS
  musb ips.
 bit positions for control 
 bit positions for interrupt 
 bit positions for phy_utmi 
 bit positions for mode 
 miscellaneous stuff 
  register shadow for suspend
  DSPS glue structure.
 child musb pdev 
 wrapper register offsets 
 optional vbus irq 
 last timer data for each instance 
  If no vbus irq from the PMIC is configured, we need to poll VBUS status.
 USBSS   USB AM335x 
  dsps_musb_enable - enable interrupts
 Workaround: setup IRQs through both register sets. 
	
	  start polling for runtime PM active and idle,
	  and for ID change in dual-role idle mode.
  dsps_musb_disable - disable HDRC and flush interrupts
 Caller must take musb->lock 
	
	  We poll because DSPS IP's won't expose several OTG-critical
	  status change events (from the transceiver) otherwise.
 keep VBUS on for host-only mode 
 musb->lock might already been held 
 Get endpoint interrupts 
 Get usb core interrupts 
			
			  The Mentor core doesn't debounce VBUS as needed
			  to cope with device connect current spikes. This
			  means it's not uncommon for bus-powered devices
			  to get VBUS errors during enumeration.
			 
			  This is a workaround, but newer RTL from Mentor
			  seems to allow a better one: "re"-starting sessions
			  without waiting for VBUS to stop registering in
			  devctl.
 NOTE: this must complete power-on within 100 ms. 
 Poll for ID change and connect 
 NOP driver needs change if supporting dual instance 
 Returns zero if e.g. not clocked 
 Reset the musb 
 reset the otgdisable bit, needed for host mode to work 
	
	   Check whether the dsps version has babble control enabled.
	  In latest silicon revision the babble control logic is enabled.
	  If MUSB_BABBLE_CTL returns 0x4 then we have the babble control
	  logic enabled.
		
		  if we're setting mode to host-only or device-only, we're
		  going to ignore whatever the PHY sends us and just force
		  ID pin status by SW
		
		  if we're setting mode to host-only or device-only, we're
		  going to ignore whatever the PHY sends us and just force
		  ID pin status by SW
	
	  check line monitor flag to check whether babble is
	  due to noise
		
		  babble is due to noise, then set transmit idle (d7 bit)
		  to resume normal operation
 wait till line monitor flag cleared 
 check whether stuck_at_j bit cleared 
			
			  real babble condition has occurred
			  restart the controller to start the
			  session again
 Similar to am35x, dm81xx support only 32-bit read operation 
 Read any remaining 1 to 3 bytes 
 CONFIG_USB_TI_CPPI41_DMA 
 CONFIG_USB_TI_CPPI41_DMA 
 allocate the child platform device 
 DT keeps this entry in mA, musb expects it as per USB spec 
 allocate glue 
 ms 
 This can happen if the musb device is in -EPROBE_DEFER 
 SPDX-License-Identifier: GPL-2.0
  MUSB OTG driver host support
  Copyright 2005 Mentor Graphics Corporation
  Copyright (C) 2005-2006 by Texas Instruments
  Copyright (C) 2006-2007 Nokia Corporation
  Copyright (C) 2008-2009 MontaVista Software, Inc. <source@mvista.com>
 MUSB HOST status 22-mar-2006
  - There's still lots of partial code duplication for fault paths, so
    they aren't handled as consistently as they need to be.
  - PIO mostly behaved when last tested.
      + including ep0, with all usbtest cases 9, 10
      + usbtest 14 (ep0out) doesn't seem to run at all
      + double buffered OUTTX endpoints saw stalls(!) with certain usbtest
        configurations, but otherwise double buffering passes basic tests.
      + for 2.6.N, for N > ~10, needs API changes for hcd framework.
  - DMA (CPPI) ... partially behaves, not currently recommended
      + about 115 the speed of typical EHCI implementations (PCI)
      + RX, all too often reqpkt seems to misbehave after tx
      + TX, no known issues (other than evident silicon issue)
  - DMA (MentorOMAP) ...has at least toggle update problems
  - [23-feb-2009] minimal traffic scheduling to avoid bulk RX packet
    starvation ... nothing yet for TX, interrupt, or bulk.
  - Not tested with HNP, but some SRP paths seem to behave.
  NOTE 24-August-2006:
  - Bulk traffic finally uses both sides of hardware ep1, freeing up an
    extra endpoint for periodic use enabling hub + keybd + mouse.  That
    mostly works, except that with "usbnet" it's easy to trigger cases
    with "ping" where RX loses.  (a) ping to davinci, even "ping -f",
    fine; but (b) ping _from_ davinci, even "ping -c 1", ICMP RX loses
    although ARP RX wins.  (That test was done with a full speed link.)
  NOTE on endpoint usage:
  CONTROL transfers all go through ep0.  BULK ones go through dedicated IN
  and OUT endpoints ... hardware is dedicated for those "async" queue(s).
  (Yes, bulk _could_ use more of the endpoints than that, and would even
  benefit from it.)
  INTERUPPT and ISOCHRONOUS transfers are scheduled to the other endpoints.
  So far that scheduling is both dumb and optimistic:  the endpoint will be
  "claimed" until its software queue is no longer refilled.  No multiplexing
  of transfers between endpoints, or anything clever.
  Clear TX fifo. Needed to avoid BABBLE errors.
		
		  FIXME: sometimes the tx fifo flush failed, it has been
		  observed during device disconnect on AM335x.
		 
		  To reproduce the issue, ensure tx urb(s) are queued when
		  unplug the usb device which is connected to AM335x usb
		  host port.
		 
		  I found using a usb-ethernet device and running iperf
		  (client on AM335x) has very high chance to trigger it.
		 
		  Better to turn on musb_dbg() in musb_cleanup_urb() with
		  CPPI enabled to see the issue when aborting the tx channel.
 scrub any data left in the fifo 
 and reset for the next transfer 
  Start transmit. Caller is responsible for locking shared resources.
  musb must be locked.
 NOTE: no locks here; caller should lock and select EP 
 NOTE: no locks here; caller should lock and select EP 
  Start the URB at the front of an endpoint's queue
  end must be claimed from the caller.
  Context: controller locked, irqs blocked
 initialize software qh state 
 gather right source of data 
 control transfers always start with SETUP 
 bulk, interrupt 
 actual_length may be nonzero on retry paths 
 Configure endpoint 
 transmit may have more work: start it when it is time 
 determine if the time is right for a periodic transfer 
		 FIXME this doesn't implement that scheduling policy ...
		  or handle framecounter wrapping
 Always assume URB_ISO_ASAP 
			 REVISIT the SOF irq handler shouldn't duplicate
			  this code; and we don't init urb->start_frame...
 enable SOF interrupt so we can count down 
 ifndef	CONFIG_ARCH_DAVINCI 
 Context: caller owns controller lock, IRQs are blocked 
  Advance this hardware endpoint's queue, completing the specified URB and
  advancing to either the next URB queued to that qh, or else invalidating
  that qh and advancing to the next qh scheduled after the current one.
  Context: caller owns controller lock, IRQs are blocked
 save toggle eagerly, for paranoia 
	 reclaim resources (and bandwidth) ASAP; deschedule it, and
	  invalidate qh as soon as list_empty(&hep->urb_list)
 Clobber old pointers to this qh 
			 fifo policy for these lists, except that NAKing
			  should rotate a qh to the end (for fairness).
			 this is where periodic bandwidth should be
			  de-allocated if it's tracked and allocated;
			  and where we'd update the schedule tree...
	 we don't want fifo to fill itself again;
	  ignore dma (various models),
	  leave toggle alone (may not have been saved yet)
 write 2x to allow double buffering 
 flush writebuffer 
  PIO RX for a packet (or part of it).
 musb_ep_select(mbase, epnum); 
 unload FIFO 
 see if we are done 
 non-isoch 
 see if we are done 
 REVISIT this assumes AUTOCLEAR is never set 
 we don't always need to reinit a given side of an endpoint...
  when we do, use txrx reinit routine and then construct a new CSR
  to address data toggle, NYET, and DMA or PIO.
  it's possible that driver bugs (especially for DMA) or aborting a
  transfer might have left the endpoint busier than it should be.
  the busynot-empty tests are basically paranoia.
	 NOTE:  we know the "rx" fifo reinit never triggers for ep0.
	  That always uses tx_reinit since ep0 repurposes TX register
	  offsets; the initial SETUP packet is also a kind of OUT.
 if programmed for Tx, put it in RX mode 
		
		  Clear the MODE bit (and everything else) to enable Rx.
		  NOTE: we mustn't clear the DMAMODE bit before DMAENAB.
 scrub all previous state, clearing toggle 
 target addr and (for multipoint) hub addrport 
 protocolendpoint, intervalNAKlimit, io size 
 NOTE: bulk combining rewrites high bits of maxpacket 
	 Set RXMAXP with the FIFO size of the endpoint
	  to disable double buffer mode.
 autoset shouldn't be set in high bandwidth 
		
		  Enable Autoset according to table
		  below
		  bulk_split hb_mult	Autoset_Enable
		 	0	1	Yes(Normal)
		 	0	>1	No(High BW ISO)
		 	1	1	Yes(HS bulk)
		 	1	>1	Yes(FS bulk)
 against programmer's guide 
	
	  TX uses "RNDIS" mode automatically but needs help
	  to identify the zero-length-final-packet case.
	
	  Ensure the data reaches to main memory before starting
	  DMA transfer
  Program an HDRC endpoint as per the given URB
  Context: irqs blocked, controller lock held
 candidate for DMA? 
 make sure we clear DMAEnab, autoSet bits from previous run 
 OUTtransmitEP0 or INreceive? 
 disable interrupt in case we flush 
 general endpoint setup 
 flush all old state, set default 
			
			  We could be flushing valid
			  packets in double buffering
			  case
			
			  We must not clear the DMAMODE bit before or in
			  the same cycle with the DMAENAB bit, so we clear
			  the latter first...
 REVISIT may need to clear FLUSHFIFO ... 
 endpoint 0: just flush 
 target addr and (for multipoint) hub addrport 
 FIXME if !epnum, do the same for RX ... 
 protocolendpointintervalNAKlimit 
 PIO to load FIFO 
 re-enable interrupt 
 INreceive 
 scrub any stale state, leaving toggle alone 
 kick things off 
 Candidate for DMA 
 AUTOREQ is in a DMA register 
			
			  Unless caller treats short RX transfers as
			  errors, we dare not queue multiple transfers.
 Schedule next QH from musb->in_bulkout_bulk and move the current qh to
  the end; avoids starvation for other endpoints.
		
		  Need to stop the transaction by clearing REQPKT first
		  then the NAK Timeout bit ref MUSBMHDRC USB 2.0 HIGH-SPEED
		  DUAL-ROLE CONTROLLER Programmer's Guide, section 9.2.2
 clear nak timeout bit 
 move cur_qh to end of queue 
 get the next qh from musb->in_bulk 
 set rx_reinit and schedule the next qh 
 move cur_qh to end of queue 
 get the next qh from musb->out_bulk 
 set tx_reinit and schedule the next qh 
  Service the default endpoint (ep0) as host.
  Return true until it's time to start the status stage.
			 always terminate on short read; it's
			  rarely reported as an error.
  Handle default endpoint interrupt as host. Only called in IRQ time
  from musb_interrupt().
  called with controller irqlocked
 ep0 only has one queue, "in" 
 if we just did status stage, we are done 
 prepare status 
		 NOTE:  this code path would be a good place to PAUSE a
		  control transfer, if another one is queued, so that
		  ep0 is more likely to stay busy.  That's already done
		  for bulk RX transfers.
		 
		  if (qh->ring.next != &musb->control), then
		  we have a candidate... NAKing is NOT an error
 use the proper sequence to abort the transfer 
 clear it 
		 stop endpoint since we have no place for its data, this
 call common logic and prepare response 
 more packets required 
 data transfer complete; perform status phase 
 disable ping token in status phase 
 flag status stage 
 call completion handler if done 
 Host side TX (OUT) using Mentor DMA works as follows:
	submit_urb ->
		- if queue was empty, Program Endpoint
		- ... which starts DMA to fifo in mode 1 or 0
	DMA Isr (transfer complete) -> TxAvail()
		- Stop DMA (~DmaEnab)	(<--- Alert ... currently happens
					only in musb_cleanup_urb)
		- TxPktRdy has to be set in mode 0 or for
			short packets in mode 1.
 Service a Tx-Available or dma completion irq for the endpoint 
 with CPPI, DMA sometimes triggers "extra" irqs 
 check for errors 
 dma was disabled, fifo flushed 
 stall; record URB status 
 (NON-ISO) dma was disabled, fifo flushed 
			 NOTE:  this code path would be a good place to PAUSE a
			  transfer, if there's some other (nonperiodic) tx urb
			  that could use this fifo.  (dma complicates it...)
			  That's already done for bulk RX transfers.
			 
			  if (bulk && qh->ring.next != &musb->out_bulk), then
			  we have a candidate... NAKing is NOT an error
		 do the proper sequence to abort the transfer in the
		  usb core; the dma engine should already be stopped.
 REVISIT may need to clear FLUSHFIFO ... 
 second cppi case 
		
		  DMA has completed.  But if we're using DMA mode 1 (multi
		  packet DMA), we need a terminal TXPKTRDY interrupt before
		  we can consider this transfer completed, lest we trash
		  its last packet when writing the next URB's data.  So we
		  switch back to mode 0 to get that interrupt; we'll come
		  back here once it happens.
			
			  We shouldn't clear DMAMODE with DMAENAB set; so
			  clear them in a safe order.  That should be OK
			  once TXPKTRDY has been set (and I've never seen
			  it being 0 at this moment -- DMA interrupt latency
			  is significant) but if it hasn't been then we have
			  no choice but to stop being polite and ignore the
			  programmer's guide... :-)
			 
			  Note that we must write TXCSR with TXPKTRDY cleared
			  in order not to re-trigger the packet send (this bit
			  can't be cleared by CPU), and there's another caveat:
			  TXPKTRDY may be set shortly and then cleared in the
			  double-buffered FIFO mode, so we do an extra TXCSR
			  read for debouncing...
			
			  There is no guarantee that we'll get an interrupt
			  after clearing DMAMODE as we might have done this
			  too late (after TXPKTRDY was cleared by controller).
			  Re-read TXCSR as we have spoiled its previous value.
		
		  We may get here from a DMA completion or TXPKTRDY interrupt.
		  In any case, we must check the FIFO status here and bail out
		  only if the FIFO still has data -- that should prevent the
		  "missed" TXPKTRDY interrupts and deal with double-buffered
		  FIFO mode too...
 see if we need to send more data, or ZLP 
	 urb->status != -EINPROGRESS means request has been faulted,
	  so we must abort this transfer after cleanup
 set status 
	
	  PIO: start next packet in this URB.
	 
	  REVISIT: some docs say that when hw_ep->tx_double_buffered,
	  (and presumably, FIFO is not half-full) we should write two
	  packets before updating TXCSR; other docs disagree...
 Unmap the buffer so that CPU can use it 
	
	  We need to map sg if the transfer_buffer is
	  NULL.
 sg_miter_start is already done in musb_ep_program 
 Seems to set up ISO for cppi41 and not advance len. See commit c57c41d 
 Host side RX (IN) using Mentor DMA works as follows:
	submit_urb ->
		- if queue was empty, ProgramEndpoint
		- first IN token is sent out (by setting ReqPkt)
	LinuxIsr -> RxReady()
	\	=> first packet is received
	|	- Set in mode 0 (DmaEnab, ~ReqPkt)
	|		-> DMA Isr (transfer complete) -> RxReady()
	|		    - Ack receive (~RxPktRdy), turn off DMA (~DmaEnab)
	|		    - if urb not complete, send next IN token (ReqPkt)
	|			   |		else complete urb.
	|			   |
	---------------------------
  Nuances of mode 1:
 	For short packets, no ack (+RxPktRdy) is sent automatically
 	(even if AutoClear is ON)
 	For full packets, ack (~RxPktRdy) and next IN token (+ReqPkt) is sent
 	automatically => major problem, as collecting the next packet becomes
 	difficult. Hence mode 1 is not used.
  REVISIT
 	All we care about at this driver level is that
        (a) all URBs terminate with REQPKT cleared and fifo(s) empty;
        (b) termination conditions are: short RX, or buffer full;
        (c) fault modes include
            - iff URB_SHORT_NOT_OK, short RX status is -EREMOTEIO.
              (and that endpoint's dma queue stops immediately)
            - overflow (full, PLUS more bytes in the terminal packet)
 	So for example, usb-storage sets URB_SHORT_NOT_OK, and would
 	thus be a great candidate for using mode 1 ... for all but the
 	last packet of one URB's transfer.
		 even if there was an error, we did the dma
		  for iso_frame_desc->length
 REVISIT: Why ignore return value here? 
 done if urb buffer is full or short packet is recd 
 send IN token for next packet, without AUTOREQ 
 Disadvantage of using mode 1:
 	It's basically usable only for mass storage class; essentially all
 	other protocols also terminate transfers on short packets.
  Details:
 	An extra IN token is sent at the end of the transfer (due to AUTOREQ)
 	If you try to use mode 1 for (transfer_buffer_length - 512), and try
 	to use the extra IN token to grab the last packet using mode 0, then
 	the problem is that you cannot be sure when the device will send the
 	last packet and RxPktRdy set. Sometimes the packet is recd too soon
 	such that it gets lost when RxCSR is re-set at the end of the mode 1
 	transfer, while sometimes it is recd just a little late so that if you
 	try to configure for mode 0 soon after the mode 1 transfer is
 	completed, you will find rxcount 0. Okay, so you might think why not
 	wait for an interrupt when the pkt is recd. Well, you won't get any!
	 because of the issue below, mode 1 will
	  only rarely behave with correct semantics.
 See comments above on disadvantages of using mode 1 
 autoclear shouldn't be set in high bandwidth 
	 REVISIT if when actual_length != 0,
	  transfer_buffer_length needs to be
	  adjusted first...
  Service an RX interrupt for the given IN endpoint; docs cover bulk, iso,
  and high-bandwidth IN transfer cases.
		 REVISIT -- THIS SHOULD NEVER HAPPEN ... but, at least
		  usbtest #11 (unlinks) triggers it regularly, sometimes
		  with fifo full.  (Only with DMA??)
	 check for errors, concurrent stall & unlink is not really
 stall; record URB status 
		
		  The three-strikes error could only happen when the USB
		  device is not accessible, for example detached or powered
		  off. So return the fatal error -ESHUTDOWN so hopefully the
		  USB device drivers won't immediately resubmit the same URB.
			 NOTE: NAKing is NOT an error, so we want to
			  continue.  Except ... if there's a request for
			  another QH, use that instead of starving it.
			 
			  Devices like Ethernet and serial adapters keep
			  reads posted at all times, which will starve
			  other devices without this logic.
 packet error reported later 
 faults abort the transfer 
 clean up dma and collect transfer count 
 SHOULD NEVER HAPPEN ... but at least DaVinci has done it 
	 thorough shutdown for now ... given more precise fault handling
	  and better queueing support, we might keep a DMA pipeline going
	  while processing this irq for earlier completions.
 FIXME this is _way_ too much in-line logic for Mentor DMA 
		 REVISIT this happened for a while on some short reads...
		  the cleanup still needs investigation... looks bad...
		  and also duplicates dma cleanup code above ... plus,
		  shouldn't this be the "half full" double buffer case?
 if no errors, be sure a packet is ready for unloading 
 FIXME this is another "SHOULD NEVER HAPPEN" 
 SCRUB (RX) 
 do the proper sequence to abort the transfer 
 we are expecting IN packets 
 Unmap the buffer so that CPU can use it 
			
			  We need to map sg if the transfer_buffer is
			  NULL.
 Calculate the number of bytes received 
 schedule nodes correspond to peripheral endpoints, like an OHCI QH.
  the software schedule associates multiple such nodes with a given
  host side hardware endpoint + direction; scheduling may activate
  that hardware endpoint.
 use fixed hardware for control and bulk 
 else, periodic transfers get muxed to other endpoints 
	
	  We know this qh hasn't been scheduled, so all we need to do
	  is choose which hardware endpoint to put it on ...
	 
	  REVISIT what we really want here is a regular schedule tree
	  like e.g. OHCI uses.
			
			  Mentor controller has a bug in that if we schedule
			  a BULK Tx transfer on an endpoint that had earlier
			  handled ISOC then the BULK transfer has to start on
			  a zero toggle.  If the BULK transfer starts on a 1
			  toggle then this transfer will fail as the mentor
			  controller starts the Bulk transfer on a 0 toggle
			  irrespective of the programming of the toggle bits
			  in the TXCSR register.  Check for this condition
			  while allocating the EP for a Tx Bulk transfer.  If
			  so skip this EP.
 use bulk reserved ep1 if no other ep is free 
		 Enable bulk RXTX NAK timeout scheme when bulk requests are
		  multiplexed. This scheme does not work in high speed to full
		  speed scenario as NAK interrupts are not coming from a
		  full speed device connected to a high speed device.
		  NAK timeout interval is 8 (128 uframe or 16ms) for HS and
		  4 (8 frame or 8ms) for FS device.
 host role must be active 
	 DMA mapping was already done, if needed, and this urb is on
	  hep->urb_list now ... so we're done, unless hep wasn't yet
	  scheduled onto a live qh.
	 
	  REVISIT best to keep hep->hcpriv valid until the endpoint gets
	  disabled, testing for empty qh->ring and avoiding qh setup costs
	  except for the first urb queued after a config change.
	 Allocate and initialize qh, minimizing the work done each time
	  hw_ep gets reprogrammed, or with irqs blocked.  Then schedule it.
	 
	  REVISIT consider a dedicated qh kmem_cache, so it's harder
	  for bugs in other kernel code to break this driver...
	 Bits 11 & 12 of wMaxPacketSize encode high bandwidth multiplier.
	  Some musb cores don't support high bandwidth ISO transfers; and
	  we don't (yet!) support high bandwidth interrupt transfers.
 NOTE: urb->dev->devnum is wrong during SET_ADDRESS 
 precompute rxtypetxtypetype0 register 
 Precompute RXINTERVALTXINTERVAL register 
		
		  Fulllow speeds use the  linear encoding,
		  high speed uses the logarithmic encoding.
 ISO always uses logarithmic encoding 
		 REVISIT we actually want to use NAK limits, hinting to the
		  transfer scheduling logic to try some other qh, e.g. try
		  for 2 msec first:
		 
		  interval = (USB_SPEED_HIGH == urb->dev->speed) ? 16 : 2;
		 
		  The downside of disabling this is that transfer scheduling
		  gets VERY unfair for nonperiodic transfers; a misbehaving
		  peripheral could make that hurt.  That's perfectly normal
		  for reads from network or serial adapters ... so we have
		  partial NAKlimit support for bulk RX.
		 
		  The upside of disabling it is simpler transfer scheduling.
 precompute addressing for external hubtt ports 
 set up tt info if needed 
	 invariant: hep->hcpriv is null OR the qh that's already scheduled.
	  until we get real dma queues (with an entry for each urbbuffer),
	  we only have work to do in the former case.
		 some concurrent activity submitted another urb to hep...
		  odd, rare, error prone, but legal.
		 FIXME set urb->start_frame for isointr, it's tested in
		  musb_start_urb(), but otherwise only konicawc cares ...
  abort a transfer that's at the head of a hardware queue.
  called with controller locked, irqs blocked
  that hardware queue advances to the next transfer, unless prevented
 turn off DMA requests, discard state, stop polling ... 
 giveback saves bulk toggle 
 clear the endpoint's irq status here to avoid bogus irqs 
 REVISIT may need to clear FLUSHFIFO ... 
 flush cpu writebuffer 
	
	  Any URB not actively programmed into endpoint hardware can be
	  immediately given back; that's any URB not at the head of an
	  endpoint queue, unless someday we get real DMA queues.  And even
	  if it's at the head, it might not be known to the hardware...
	 
	  Otherwise abort current transfer, pending DMA, etc.; urb->status
	  has already been updated.  This is a synchronous abort; it'd be
	  OK to hold off until after some IRQ, though.
	 
	  NOTE: qh is invalid unless !list_empty(&hep->urb_list)
		 If nothing else (usually musb_giveback) is using it
		  and its URB list has emptied, recycle this qh.
 disable an endpoint 
 NOTE: qh is invalid unless !list_empty(&hep->urb_list) 
 Kick the first URB off the hardware, if needed 
 make software (then hardware) stop ASAP 
 cleanup 
		 Then nuke all the others ... and advance the
		  queue on hw_ep (e.g. bulk ring) when we're done.
		 Just empty the queue; the hardware is busy with
		  other transfers, and since !qh->is_ready nothing
		  will activate any of these as it advances.
	 NOTE: musb_start() is called when the hub driver turns
	  on port power, or when (OTG) peripheral starts.
		 ID could be grounded even if there's no device
		  on the other end of the cable.  NOTE that the
		  A_WAIT_VRISE timers are messy with MUSB...
 Allocate a buffer with enough padding for alignment 
 Position our struct temp_buffer such that data is aligned 
	
	  The DMA engine in RTL1.8 and above cannot handle
	  DMA addresses that are not aligned to a 4 byte boundary.
	  For such engine implemented (un)map_urb_for_dma hooks.
	  Do not use these hooks for RTL<1.8
 Do not use this hook for RTL<1.8 (see description above) 
 !CONFIG_MUSB_PIO_ONLY 
	 not using irq handler or reset hooks from usbcore, since
	  those must be shared with peripheral code for OTG configs
 .start_port_reset	= NULL, 
 .hub_irq_enable	= NULL, 
 usbcore sets dev->driver_data to hcd, and sometimes uses that... 
 don't support otg protocols 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2005-2006 by Texas Instruments
  This file is part of the Inventra Controller Driver for Linux.
 REVISIT (PM) we should be able to keep the PHY in low power mode most
  of the time (24 MHZ oscillator and PLL off, etc) by setting POWER.D0
  and, when in host mode, autosuspending idle root ports... PHYPLLON
  (overriding SUSPENDM?) then likely needs to stay off.
 power everything up; start the on-chip PHY and its PLL 
 wait for PLL to lock before proceeding 
 powerdown the on-chip PHY, its PLL, and the OTG block 
 workaround:  setup irqs through both register sets 
 force a DRVVBUS irq so we can start polling for ID change 
  Disable the HDRC and flush interrupts
	 because we don't set CTRLR.UINT, "important" to:
	   - not readwrite INTRUSBINTRUSBE
	   - (except during initial setup, as workaround)
	   - use INTSETRINTCLRR instead
  VBUS SWITCHING IS BOARD-SPECIFIC ... at least for the DM6446 EVM,
  which doesn't wire DRVVBUS to the FET that switches it.  Unclear
  if that's a problem with the DM6446 chip or just with that board.
  In either case, the DM355 EVM automates DRVVBUS the normal way,
  when J10 is out, and TI documents it as handling OTG.
 I2C operations are always synchronous, and require a task context.
  With unloaded systems, using the shared workqueue seems to suffice
  to satisfy the 100msec A_WAIT_VRISE timeout...
 This GPIO handling is entirely optional 
 01 vs "-1 == unknowninit" 
	 We poll because DaVinci's won't expose several OTG-critical
	 status change events (from the transceiver) otherwise.
		 Wait till VBUS falls below SessionEnd (~0.2V); the 1.3 RTL
		  seems to mis-handle session "start" otherwise (or in our
		  case "recover"), in routine "VBUS was valid by the time
		  VBUSERR got reported during enumeration" cases.
		
		  There's no ID-changed IRQ, so we have no good way to tell
		  when to switch to the A-Default state machine (by setting
		  the DEVCTL.SESSION flag).
		 
		  Workaround:  whenever we're in B_IDLE, try setting the
		  session flag every few seconds.  If it works, ID was
		  grounded and we're now in the A-Default state machine.
		 
		  NOTE setting the session flag is _supposed_ to trigger
		  SRP, but clearly it doesn't.
	 NOTE: DaVinci shadows the Mentor IRQs.  Don't manage them through
	  the Mentor registers (except for setup), use the TI ones and EOI.
	 
	  Docs describe irq "vector" registers associated with the CPPI and
	  USB EOI registers.  These hold a bitmask corresponding to the
	  current IRQ, not an irq handler address.  Would using those bits
	  resolve some of the races observed in this dispatch code??
	 CPPI interrupts share the same IRQ line, but have their own
	  mask, state, "vector", and EOI registers.
 ack and handle non-CPPI interrupts 
	 DRVVBUS irqs are the only proxy we have (a very poor one!) for
	  DaVinci's missing ID change IRQ.  We need an ID change IRQ to
	  switch appropriately between halves of the OTG state machine.
	  Managing DEVCTL.SESSION per Mentor docs requires we know its
	  value, but DEVCTL.BDEVICE is invalid without DEVCTL.SESSION set.
	  Also, DRVVBUS pulses for SRP (but not at 5V) ...
			 The Mentor core doesn't debounce VBUS as needed
			  to cope with device connect current spikes. This
			  means it's not uncommon for bus-powered devices
			  to get VBUS errors during enumeration.
			 
			  This is a workaround, but newer RTL from Mentor
			  seems to allow a better one: "re"starting sessions
			  without waiting (on EVM, a long time) for VBUS
			  to stop registering in devctl.
		 NOTE:  this must complete poweron within 100 msec
		  (OTG_TIME_A_WAIT_VRISE) but we don't check for that.
 irq stays asserted until EOI is written 
 poll for ID change 
 EVM can't do this (right?) 
 returns zero if e.g. not clocked 
	 dm355 EVM swaps D+D- for signal integrity, and
	  is clocked from the main 24 MHz crystal.
	 On dm355, the default-A state machine needs DRVVBUS control.
	  If we won't be a host, there's no need to turn it on.
 reset the controller 
 start the on-chip PHY and its PLL 
 NOTE:  irqs are in mixed mode, not bypass to pure-musb 
 force VBUS off 
off, 1);
	
	  delay, to avoid problems with module reload.
	  if there's no peripheral connected, this can take a
	  long time to fall, especially on EVM with huge C133.
 in OTG mode, another host might be connected 
	
	  For DM6467 3 resources are passed. A placeholder for the 3rd
	  resource is always there, so it's safe to always copy it...
 SPDX-License-Identifier: GPL-2.0+
  driversusbmusbux500_dma.c
  U8500 DMA support code
  Copyright (C) 2009 STMicroelectronics
  Copyright (C) 2011 ST-Ericsson SA
  Authors:
 	Mian Yousaf Kaukab <mian.yousaf.kaukab@stericsson.com>
 	Praveena Nadahally <praveen.nadahally@stericsson.com>
 	Rajaram Regupathy <ragupathy.rajaram@stericsson.com>
 Work function invoked from DMA callback to handle rx transfers. 
	 8 DMA channels (0 - 7). Each DMA channel can only be allocated
	  to specified hw_ep. For example DMA channel 0 can only be allocated
	  to hw_ep 1 and 9.
 Check if channel is already used. 
 Prepare the loop for RX channels 
 Release already allocated channels 
 Prepare the loop for TX channels 
 Save physical address for DMA controller. 
 SPDX-License-Identifier: GPL-2.0
  musb_trace.c - MUSB Controller Trace Support
  Copyright (C) 2015 Texas Instruments Incorporated - http:www.ti.com
  Author: Bin Liu <b-liu@ti.com>
 SPDX-License-Identifier: GPL-2.0
  MUSB OTG peripheral driver ep0 handling
  Copyright 2005 Mentor Graphics Corporation
  Copyright (C) 2005-2006 by Texas Instruments
  Copyright (C) 2006-2007 Nokia Corporation
  Copyright (C) 2008-2009 MontaVista Software, Inc. <source@mvista.com>
 ep0 is always musb->endpoints[0].ep_in 
  locking note:  we use only the controller lock, for simpler correctness.
  It's always held with IRQs blocked.
  It protects the ep0 request queue as well as ep0_state, not just the
  controller and indexed registers.  And that lock stays held unless it
  needs to be dropped to allow reentering this driver ... like upcalls to
  the gadget driver, or adjusting endpoint halt status.
 handle a standard GET_STATUS request
  Context:  caller holds controller lock
 class, vendor, etc ... delegate 
 fill up the fifo; caller updates csr0 
  handle a control-IN request, the end0 buffer contains the current request
  that is supposed to be a standard control request. Assumes the fifo to
  be at least 2 bytes long.
  @return 0 if the request was NOT HANDLED,
  < 0 when error
  > 0 when the request is processed
  Context:  caller holds controller lock
 not handled 
 case USB_REQ_SYNC_FRAME: 
  Context:  caller holds controller lock
  Tries to start B-device HNP negotiation if enabled via sysfs
  Handle all control requests with no DATA stage, including standard
  requests such as:
  USB_REQ_SET_CONFIGURATION, USB_REQ_SET_INTERFACE, unrecognized
 	always delegated to the gadget driver
  USB_REQ_SET_ADDRESS, USB_REQ_CLEAR_FEATURE, USB_REQ_SET_FEATURE
 	always handled here, except for classvendor... features
  Context:  caller holds controller lock
 the gadget driver handles everything except what we MUST handle 
 change it after the status stage 
 Ignore request if endpoint is wedged 
 Maybe start the first request in the queue 
 select ep0 again 
 class, vendor, etc ... delegate 
 TEST_FORCE_HS 
 TEST_FORCE_FS 
 TEST_FIFO_ACCESS 
 TEST_FORCE_HOST 
 enter test mode after irq 
 select ep0 again 
 class, vendor, etc ... delegate 
 delegate SET_CONFIGURATION, etc 
 we have an ep0out data packet
  Context:  caller holds controller lock
	 read packet and ack; or stall because of gadget driver bug:
	  should have provided the rx buffer before setup() returned.
 read the buffer 
	 Completion handler may choose to stall, e.g. because the
	  message just received holds invalid data.
  transmitting to the host (IN), this code might be called from IRQ
  and from kernel thread.
  Context:  caller holds controller lock
 WARN_ON(1); 
 load the data 
 update the flags 
	 report completions as soon as the fifo's loaded; there's no
	  win in waiting till this last packet gets acked.  (other than
	  very precise fault reporting, needed by USB TMC; possible with
	  this hardware, but not usable from portable gadget drivers.)
 send it out, triggering a "txpktrdy cleared" irq 
  Read a SETUP packet (struct usb_ctrlrequest) from the hardware.
  Fields are left in USB byte-order.
  Context:  caller holds controller lock.
	 NOTE:  earlier 2.6 versions changed setup packets to host
	  order, but now USB packets always stay in USB byte order.
 clean up any leftover transfers 
	 For zero-data requests we want to delay the STATUS stage to
	  avoid SETUPEND errors.  If we read data (OUT), delay accepting
	  packets until there's a buffer to store them in.
	 
	  If we write data, the controller acts happier if we enable
	  the TX FIFO right away, and give the controller a moment
	  to switch modes...
  Handle peripheral ep0 interrupt
  Context: irq handler; we won't re-enter the driver that way.
 select ep0 
		
		  If DATAEND is set we should not call the callback,
		  hence the status stage is not complete.
 I sent a stall.. need to acknowledge it now.. 
 request ended "early" 
 Transition into the early status phase 
 NOTE:  request may need completion 
	 docs from Mentor only describe tx, rx, and idlesetup states.
	  we need to handle nuances around status stages, and also the
	  case where status and setup stages come back-to-back ...
 irq on clearing txpktrdy 
 irq on set rxpktrdy 
 end of sequence #2 (OUTRX state) or #3 (no data) 
		 update address (if needed) only @ the end of the
		  status phase per usb spec, which also guarantees
		  we get 10 msec to receive this irq... until this
		  is done we won't see the next packet.
 enter test mode if needed (exit by reset) 
 end of sequence #1: write to host (TX state) 
		
		  In case when several interrupts can get coalesced,
		  check to see if we've already received a SETUP packet...
		
		  This state is typically (but not always) indiscernible
		  from the status states since the corresponding interrupts
		  tend to happen within too little period of time (with only
		  a zero-length packet in between) and so get coalesced...
 sometimes the RESET won't be reported 
			 sequence #3 (no data stage), includes requests
			  we can't forward (notably SET_ADDRESS and the
			  deviceendpoint feature setclear operations)
			  plus SET_CONFIGURATION and others we must
				
				  We're expecting no data in any case, so
				  always set the DATAEND bit -- doing this
				  here helps avoid SetupEnd interrupt coming
				  in the idle stage when we're stalling...
 status stage might be immediate 
			 sequence #1 (IN to host), includes GET_STATUS
			  requests that we can't forward, GET_DESCRIPTOR
			  and others that we must
 sequence #2 (OUT from host), always forward 
 MUSB_EP0_STAGE_RX 
			 unless we need to delegate this to the gadget
			  driver, we know how to wrap this up:  csr0 has
			  not yet been written.
		 This should not happen. But happens with tusb6010 with
		  g_file_storage and high speed. Do nothing.
 "can't happen" 
 always enabled 
 always enabled 
 control-OUT data 
 control-IN data 
 zero-length data 
 add request to the list 
 sequence #1, IN ... start writing the data 
 sequence #3, no-data ... issue IN status 
	 else for sequence #2 (OUT), caller provides a buffer
	  before the next packet arrives.  deferred responses
	  (after SETUP is acked) are racey.
 we just won't support this 
	 Stalls are usually issued after parsing SETUP packet, either
	  directly in irq context from setup() or else later.
 control-IN data 
 STALL for zero-length data 
 control-OUT data 
	 It's also OK to issue stalls during callbacks when a non-empty
	  DATA stage buffer has been read (or even written).
 control-OUT status 
 control-IN status 
 SPDX-License-Identifier: GPL-2.0
  TUSB6010 USB 2.0 OTG Dual Role controller
  Copyright (C) 2006 Nokia Corporation
  Tony Lindgren <tony@atomide.com>
  Notes:
  - Driver assumes that interface to external host (main CPU) is
    configured for NOR FLASH interface instead of VLYNQ serial
    interface.
  Checks the revision. We need to use the DMA register as 3.0 does not
  have correct versions for TUSB_PRCM_REV or TUSB_INT_CTRL_REV.
  Workaround for spontaneous WBUS wake-up issue #2 for tusb3.0.
  Disables power detection in PHY for the duration of idle.
 TUSB mapping: "flat" plus ep0 special cases 
  TUSB6010 doesn't allow 8-bit access; 16-bit access is the minimum.
  TUSB 6010 may use a parallel bus that doesn't support byte ops;
  so both loading and unloading FIFOs need explicit byte counts.
 Write the rest 1 - 3 bytes to FIFO 
 Read the rest 1 - 3 bytes from FIFO 
 Best case is 32bit-aligned destination address 
 Cannot use writesw, fifo is 32-bit 
 Best case is 32bit-aligned destination address 
 Cannot use readsw, fifo is 32-bit 
 This is used by gadget drivers, and OTG transceiver logic, allowing
  at most mA current to be drawn from VBUS during a Default-B session
  (that is, while VBUS exceeds 4.4V).  In Default-A (including pure host
  mode), or low power Default-B sessions, something else supplies power.
  Caller must take care of locking.
	 tps65030 seems to consume max 100mA, with maybe 60mA available
	  (measured on one board) for things other than tps and tusb.
	 
	  Boards sharing the CPU clock with CLKIN will need to prevent
	  certain idle sleep states while the USB link is active.
	 
	  REVISIT we could use VBUS to supply only _one_ of { 1.5V, 3.3V }.
	  The actual current usage would be very board-specific.  For now,
	  it's simpler to just use an aggregate (also board-specific).
 workaround for issue 13:  change clock during chip idle
  (to be fixed in rev3 silicon) ... symptoms include disconnect
  or looping suspendresume cycles
	 0 = refclk (clkin, XI)
	  1 = PHY 60 MHz (internal PLL)
	  2 = not supported
	  3 = what?
 FIXME tusb6010_platform_retime(mode == 0); 
  Idle TUSB6010 until next wake-up event; NOR access always wakes.
  Other code ensures that we idle unless we're connected _and_ the
  USB link is not suspended ... and tells us the relevant wakeup
  events.  SW_EN for voltage is handled separately.
	 REVISIT writeup of WID implies that if WID set and ID is grounded,
	  TUSB_PHY_OTG_CTRL.TUSB_PHY_OTG_CTRL_OTG_ID_PULLUP must be cleared.
	  Presumably that's mostly to save power, hence WID is immaterial ...
 issue 4: when driving vbus, use hipower (vbus_det) comparator 
  Updates cable VBUS status. Caller must take care of locking.
	 Temporarily enable VBUS detection if it was disabled for
	  suspend mode. Unless it's enabled otg_stat and devctl will
	  not show correct VBUS state.
 wait until hub_wq handles port change status 
  Maybe put TUSB6010 into idle mode mode depending on USB link status,
  like "disconnected" or "suspended".  We'll be woken out of it by
  connect, resume, or disconnect.
  Needs to be called as the last function everywhere where there is
  register access to TUSB6010 because of NOR flash wake-up.
  Caller should own controller spinlock.
  Delay because peripheral enables D+ pullup 3msec after SE0, and
  we don't want to treat that full speed J as a wakeup event.
  ... peripherals must draw only suspend current after 10 msec.
 Never idle if active, or when VBUS timeout is not set as host 
 ticks of 60 MHz clock 
	 HDRC controls CPEN, but beware current surges during device
	  connect.  They can trigger transient overcurrent conditions
	  that must be ignored.
 If ID pin is grounded, we want to be a_idle 
  Sets the mode to OTG, peripheral or host by changing the ID detection.
  Caller must take care of locking.
  Note that if a mini-A cable is plugged in the ID line will stay down as
  the weak ID pull-up is not able to pull the ID up.
 Disable PHY ID detect, ground ID 
 Disable PHY ID detect, keep ID pull-up on 
 Use PHY ID detection 
 ID pin 
 Don't allow idling immediately 
 VBUS state change 
 B-dev state machine:  no vbus ~= disconnect 
 ? musb_root_disconnect(musb); 
 INTR_DISCONNECT can hide... 
 A-dev state machine  {
 CONNECT can wake if a_wait_bcon is set 
				
				  OPT FS A TD.4.6 needs few seconds for
				  A_WAIT_VRISE
				 ignore; A-session-valid < VBUS_VALID2,
				  we monitor this with the timer
				 REVISIT this irq triggers during short
				  spikes caused by enumeration ...
 OTG timer expiration 
			 VBUS has probably been valid for a while now,
			  but may well have bounced out of range a bit
 REVISIT report overcurrent to hub? 
 Mask all interrupts to allow using both edge and level GPIO irq 
 Acknowledge wake-up source interrupts 
 there are issues re-locking the PLL on wakeup ... 
 work around issue 8 
 work around issue 13 (2nd half) 
 REVISIT host side TUSB_PRCM_WHOSTDISCON, TUSB_PRCM_WBUS 
 OTG state change reports (annoyingly) not issued by Mentor core 
	
	  Just clear the DMA interrupt if it comes as the completion for both
	  TX and RX is handled by the DMA callback in tusb6010_omap
 EP interrupts. In OCP mode tusb6010 mirrors the MUSB interrupts 
 Acknowledge TUSB interrupts. Clear only non-reserved bits 
  Enables TUSB6010. Caller must take care of locking.
  REVISIT:
  - Check what is unnecessary in MGC_HdrcStart()
	 Setup TUSB6010 main interrupt mask. Enable all interrupts except SOF.
 Setup TUSB interrupt, disable DMA and GPIO interrupts 
 Clear all subsystem interrups 
 Acknowledge pending interrupt(s) 
	 Only 0 clock cycles for minimum interrupt de-assertion time and
 maybe force into the Default-A OTG state machine 
  Disables TUSB6010. Caller must take care of locking.
 FIXME stop DMA, IRQs, timers, ... 
 disable all IRQs 
  Sets up TUSB6010 CPU interface specific signals and registers
  Note: Settings optimized for OMAP24xx
	
	  Disable GPIO[5:0] pullups (used as output DMA requests)
	  Don't disable GPIO[7:6] as they are needed for wake-up.
 Disable all pullups on NOR IF, DMAREQ0 and DMAREQ1 
 Turn GPIO[5:0] to DMAREQ[5:0] signals 
	 Burst size 16x16 bits, all six DMA requests enabled, DMA request
 Set 0 wait count for synchronous burst access 
	 The uint bit for "USB non-PDR interrupt enable" has to be 1 when
 Select PHY free running 60MHz as a system clock 
	 VBus valid timer 1us, disable DFTDebug and VLYNQ clocks for
	  power saving, enable VBus detect and session end comparators,
 simplify:  always sensepullup ID pins, as if in OTG mode 
 dma address for async dma 
 dma address for sync dma 
	 Offsets from base: VLYNQ at 0x000, MUSB regs at 0x400,
	  FIFOs at 0x600, TUSB at 0x800
 SPDX-License-Identifier: GPL-2.0+
  Ingenic JZ4740 "glue layer"
  Copyright (C) 2013, Apelete Seketeli <apelete@seketeli.net>
	
	  The controller is gadget only, the state of the host mode IRQ bits is
	  undefined. Mask them to make sure that the musb driver core will
	  never see them set
 Silicon does not implement USB OTG. 
 Max EPs scanned, driver will decide which EP can be used. 
 RAMbits needed to configure EPs from table 
	
	  Silicon does not implement ConfigData register.
	  Set dyn_fifo to avoid reading EP config from hardware.
 TODO: support OTG 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0
  Texas Instruments AM35x "glue layer"
  Copyright (c) 2010, by Texas Instruments
  Based on the DA8xx "glue layer" code.
  Copyright (c) 2008-2009, MontaVista Software, Inc. <source@mvista.com>
  This file is part of the Inventra Controller Driver for Linux.
  AM35x specific definitions
 USB 2.0 OTG module registers 
 0x10 Reserved 
 0x5c Reserved 
 Control register bits 
 USB interrupt register bits 
 EP0 + 15 Tx EPs 
 15 Rx EPs 
  am35x_musb_enable - enable interrupts
 Workaround: setup IRQs through both register sets. 
 Force the DRVVBUS IRQ so we can start polling for ID change. 
  am35x_musb_disable - disable HDRC and flush interrupts
	
	  We poll because AM35x's won't expose several OTG-critical
	  status change events (from the transceiver) otherwise.
 Never idle if active, or when VBUS timeout is not set as host 
 Get endpoint interrupts 
 Get usb core interrupts 
	
	  DRVVBUS IRQs are the only proxy we have (a very poor one!) for
	  AM35x's missing ID change IRQ.  We need an ID change IRQ to
	  switch appropriately between halves of the OTG state machine.
	  Managing DEVCTL.SESSION per Mentor docs requires that we know its
	  value but DEVCTL.BDEVICE is invalid without DEVCTL.SESSION set.
	  Also, DRVVBUS pulses for SRP (but not at 5V) ...
			
			  The Mentor core doesn't debounce VBUS as needed
			  to cope with device connect current spikes. This
			  means it's not uncommon for bus-powered devices
			  to get VBUS errors during enumeration.
			 
			  This is a workaround, but newer RTL from Mentor
			  seems to allow a better one: "re"-starting sessions
			  without waiting for VBUS to stop registering in
			  devctl.
 NOTE: this must complete power-on within 100 ms. 
 Drop spurious RX and TX if device is disconnected 
 EOI needs to be written for the IRQ to be re-asserted. 
 clear level interrupt 
 write EOI 
 Poll for ID change 
 Returns zero if e.g. not clocked 
 Reset the musb 
 Reset the controller 
 Start the on-chip PHY and its PLL. 
 clear level interrupt 
 Shutdown the on-chip PHY and its PLL. 
 AM35x supports only 32bit read operation 
 Read for 32bit-aligned destination address 
	
	  Now read the remaining 1 to 3 byte or complete length if
	  unaligned address.
 Shutdown the on-chip PHY and its PLL. 
 Start the on-chip PHY and its PLL. 
 SPDX-License-Identifier: GPL-2.0
  driversusbdriver.c - most of the driver model stuff for usb
  (C) Copyright 2005 Greg Kroah-Hartman <gregkh@suse.de>
  based on driversusbusb.c which had the following copyrights:
 	(C) Copyright Linus Torvalds 1999
 	(C) Copyright Johannes Erdfelt 1999-2001
 	(C) Copyright Andreas Gal 1999
 	(C) Copyright Gregory P. Smith 1999
 	(C) Copyright Deti Fliegl 1999 (new USB architecture)
 	(C) Copyright Randy Dunlap 2000
 	(C) Copyright David Brownell 2000-2004
 	(C) Copyright Yggdrasil Computing, Inc. 2000
 		(usb_device_id matching changes by Adam J. Richter)
 	(C) Copyright Greg Kroah-Hartman 2002-2003
  Released under the GPLv2 only.
  NOTE! This is not actually a driver at all, rather this is
  just a collection of helper routines that implement the
  matching, probing, releasing, suspending and resuming for
  real drivers.
  Adds a new dynamic USBdevice ID to this driver,
  and cause the driver to probe for all devices again.
  Remove a USB device ID from this driver
 called from driver core with dev locked 
 TODO: Add real matching code 
	 The device should always appear to be in use
	  unless the driver supports autosuspend.
	 Probe the USB device with the driver in hand, but only
	  defer to a generic driver in case the current USB
	  device driver has an id_table or a match function; i.e.,
	  when the device driver was explicitly matched against
	  a device.
	 
	  If the device driver does not have either of these,
	  then we assume that it can bind to any device and is
	  not truly a more specializednon-generic driver, so a
	  return value of -ENODEV should not force the device
	  to be handled by the generic USB driver, as there
	  can still be another, more specialized, device driver.
	 
	  This accommodates the usbip driver.
	 
	  TODO: What if, in the future, there are multiple
	  specialized USB device drivers for a particular device?
	  In such cases, there is a need to try all matching
	  specialised device drivers prior to setting the
	  use_generic_driver bit.
 called from driver core with dev locked 
 called from driver core with dev locked 
	 Probed interfaces are initially active.  They are
	  runtime-PM-enabled only if the driver has autosuspend support.
	  They are sensitive to their children's power states.
	 If the new driver doesn't allow hub-initiated LPM, and we can't
	  disable hub-initiated LPM, then fail the probe.
	 
	  Otherwise, leaving LPM enabled should be harmless, because the
	  endpoint intervals should remain the same, and the U1U2 timeouts
	  should remain the same.
	 
	  If we need to install alt setting 0 before probe, or another alt
	  setting during probe, that should also be fine.  usb_set_interface()
	  will attempt to disable LPM, and fail if it can't disable it.
 Carry out a deferred switch to altsetting 0 
 If the LPM disable succeeded, balance the ref counts. 
 If the LPM disable succeeded, balance the ref counts. 
 Unbound interfaces are always runtime-PM-disabled and -suspended 
 called from driver core with dev locked 
 Autoresume for set_interface call below 
	 If hub-initiated LPM policy may change, attempt to disable LPM until
	  the driver is unbound.  If LPM isn't disabled, that's fine because it
	  wouldn't be enabled unless all the bound interfaces supported
	  hub-initiated LPM.
	
	  Terminate all URBs for this interface unless the driver
	  supports "soft" unbinding and the device is still present.
 Free streams 
	 Reset other interface state.
	  We cannot do a Set-Interface if the device is suspended or
	  if it is prepared for a system sleep (since installing a new
	  altsetting means creating new endpoint device entries).
	  When either of these happens, defer the Set-Interface.
		 Already in altsetting 0 so skip Set-Interface.
		  Just re-enable it without affecting the endpoint toggles.
 Attempt to re-enable USB3 LPM, if the disable succeeded. 
 Unbound interfaces are always runtime-PM-disabled and -suspended 
  usb_driver_claim_interface - bind a driver to an interface
  @driver: the driver to be bound
  @iface: the interface to which it will be bound; must be in the
 	usb device's active configuration
  @data: driver data associated with that interface
  This is used by usb device drivers that need to claim more than one
  interface on a device when probing (audio and acm are current examples).
  No device driver should directly modify internal usb_interface or
  usb_device structure members.
  Callers must own the device lock, so driver probe() entries don't need
  extra locking, but other call contexts may need to explicitly claim that
  lock.
  Return: 0 on success.
 reject claim if interface is not authorized 
	 Claimed interfaces are initially inactive (suspended) and
	  runtime-PM-enabled, but only if the driver has autosuspend
	  support.  Otherwise they are marked active, to prevent the
	  device from being autosuspended, but left disabled.  In either
	  case they are sensitive to their children's power states.
	 if interface was already added, bind now; else let
	  the future device_add() bind it, bypassing probe()
		
		  Unbound interfaces are always runtime-PM-disabled
		  and runtime-PM-suspended
  usb_driver_release_interface - unbind a driver from an interface
  @driver: the driver to be unbound
  @iface: the interface from which it will be unbound
  This can be used by drivers to release an interface without waiting
  for their disconnect() methods to be called.  In typical cases this
  also causes the driver disconnect() method to be called.
  This call is synchronous, and may not be used in an interrupt context.
  Callers must own the device lock, so driver disconnect() entries don't
  need extra locking, but other call contexts may need to explicitly claim
  that lock.
 this should never happen, don't release something that's not ours 
 don't release from within disconnect() 
	 Release via the driver core only if the interface
	  has already been registered
 returns 0 if no match, 1 if match 
	 No need to test id->bcdDevice_lo != 0, since 0 is never
 returns 0 if no match, 1 if match 
	 The interface class, subclass, protocol and number should never be
	  checked for a match if the device class is Vendor Specific,
 returns 0 if no match, 1 if match 
 proc_connectinfo in devio.c may call us with id == NULL. 
  usb_match_id - find first usb_device_id matching device or interface
  @interface: the interface of interest
  @id: array of usb_device_id structures, terminated by zero entry
  usb_match_id searches an array of usb_device_id's and returns
  the first one matching the device or interface, or null.
  This is used when binding (or rebinding) a driver to an interface.
  Most USB device drivers will use this indirectly, through the usb core,
  but some layered driver frameworks use it directly.
  These device tables are exported with MODULE_DEVICE_TABLE, through
  modutils, to support the driver loading functionality of USB hotplugging.
  Return: The first matching usb_device_id, or %NULL.
  What Matches:
  The "match_flags" element in a usb_device_id controls which
  members are used.  If the corresponding bit is set, the
  value in the device_id must match its corresponding member
  in the device or interface descriptor, or else the device_id
  does not match.
  "driver_info" is normally used only by device drivers,
  but you can create a wildcard "matches anything" usb_device_id
  as a driver's "modules.usbmap" entry if you provide an id with
  only a nonzero "driver_info" field.  If you do this, the USB device
  driver's probe() routine should use additional intelligence to
  decide whether to bind to the specified interface.
  What Makes Good usb_device_id Tables:
  The match algorithm is very simple, so that intelligence in
  driver selection must come from smart driver id records.
  Unless you have good reasons to use another selection policy,
  provide match elements only in related groups, and order match
  specifiers from specific to general.  Use the macros provided
  for that purpose if you can.
  The most specific match specifiers use device descriptor
  data.  These are commonly used with product-specific matches;
  the USB_DEVICE macro lets you provide vendor and product IDs,
  and you can also match against ranges of product revisions.
  These are widely used for devices with application or vendor
  specific bDeviceClass values.
  Matches based on device classsubclassprotocol specifications
  are slightly more general; use the USB_DEVICE_INFO macro, or
  its siblings.  These are used with single-function devices
  where bDeviceClass doesn't specify that each interface has
  its own class.
  Matches based on interface classsubclassprotocol are the
  most general; they let drivers bind to any interface on a
  multiple-function device.  Use the USB_INTERFACE_INFO
  macro, or its siblings, to match class-per-interface style
  devices (as recorded in bInterfaceClass).
  Note that an entry created by USB_INTERFACE_INFO won't match
  any interface if the device class is set to Vendor-Specific.
  This is deliberate; according to the USB spec the meanings of
  the interface classsubclassprotocol for these devices are also
  vendor-specific, and hence matching against a standard product
  class wouldn't work anyway.  If you really want to use an
  interface-based match for such a device, create a match record
  that also specifies the vendor ID.  (Unforunately there isn't a
  standard macro for creating records like this.)
  Within those groups, remember that not all combinations are
  meaningful.  For example, don't give a product version range
  without vendor and product IDs; or specify a protocol without
  its associated class and subclass.
 proc_connectinfo in devio.c may call us with id == NULL. 
	 It is important to check that id->driver_info is nonzero,
	   since an entry that is all zeroes except for a nonzero
	   id->driver_info is the way to create an entry that
	   indicates that the driver want to examine every
 devices and interfaces are handled separately 
 interface drivers never match devices 
		 If the device driver under consideration does not have a
		  id_table or a match function, then let the driver's probe
		  function decide.
 device drivers never match interfaces 
 driver is often null here; dev_dbg() would oops 
 per-device configurations are common 
 class-based driver binding models 
 Don't reprobe if current driver isn't usb_generic_driver 
  usb_register_device_driver - register a USB device (not interface) driver
  @new_udriver: USB operations for the device driver
  @owner: module owner of this driver.
  Registers a USB device driver with the USB core.  The list of
  unattached devices will be rescanned whenever a new driver is
  added, allowing the new driver to attach to any recognized devices.
  Return: A negative error code on failure and 0 on success.
		
		  Check whether any device could be better served with
		  this new driver
  usb_deregister_device_driver - unregister a USB device (not interface) driver
  @udriver: USB operations of the device driver to unregister
  Context: must be able to sleep
  Unlinks the specified driver from the internal USB driver list.
  usb_register_driver - register a USB interface driver
  @new_driver: USB operations for the interface driver
  @owner: module owner of this driver.
  @mod_name: module name string
  Registers a USB interface driver with the USB core.  The list of
  unattached interfaces will be rescanned whenever a new driver is
  added, allowing the new driver to attach to any recognized interfaces.
  Return: A negative error code on failure and 0 on success.
  NOTE: if you want your driver to use the USB major number, you must call
  usb_register_dev() to enable that functionality.  This function no longer
  takes care of that.
  usb_deregister - unregister a USB interface driver
  @driver: USB operations of the interface driver to unregister
  Context: must be able to sleep
  Unlinks the specified driver from the internal USB driver list.
  NOTE: If you called usb_register_dev(), you still need to call
  usb_deregister_dev() to clean up your driver's allocated minor numbers,
  this  call will no longer do it for you.
 Forced unbinding of a USB interface driver, either because
  it doesn't support pre_resetpost_resetreset_resume or
  because it doesn't support suspendresume.
  The caller must hold @intf's device's lock, but not @intf's lock.
 Mark the interface for later rebinding 
  Unbind drivers for @udev's marked interfaces.  These interfaces have
  the needs_binding flag set, for example by usb_resume_interface().
  The caller must hold @udev's device lock.
 Delayed forced unbinding of a USB interface driver and scan
  for rebinding.
  The caller must hold @intf's device's lock, but not @intf's lock.
  Note: Rebinds will be skipped if a system sleep transition is in
  progress and the PM "complete" callback hasn't occurred yet.
 Delayed unbind of an existing driver 
 Try to rebind the interface 
  Rebind drivers to @udev's marked interfaces.  These interfaces have
  the needs_binding flag set.
  The caller must hold @udev's device lock.
  Unbind all of @udev's marked interfaces and then rebind all of them.
  This ordering is necessary because some drivers claim several interfaces
  when they are first probed.
  The caller must hold @udev's device lock.
 Unbind drivers for @udev's interfaces that don't support suspendresume
  There is no check for reset_resume here because it can be determined
  only during resume whether reset_resume is needed.
  The caller must hold @udev's device lock.
 For devices that don't have a driver, we do a generic suspend. 
 Can't resume it if it doesn't have a driver. 
	 Non-root devices on a fulllow-speed bus must wait for their
	  companion high-speed root hub, in case a handoff is needed.
 at this time we know the driver supports suspend 
 Don't let autoresume interfere with unbinding 
 Can't resume it if it doesn't have a driver. 
 Carry out a deferred switch to altsetting 0 
 Don't resume if the interface is marked for rebinding 
 Later we will unbind the driver andor reprobe, if necessary 
  usb_suspend_both - suspend a USB device and its interfaces
  @udev: the usb_device to suspend
  @msg: Power Management message describing this state transition
  This is the central routine for suspending USB devices.  It calls the
  suspend methods for all the interface drivers in @udev and then calls
  the suspend method for @udev itself.  When the routine is called in
  autosuspend, if an error occurs at any stage, all the interfaces
  which were suspended are resumed so that they remain in the same
  state as the device, but when called from system sleep, all error
  from suspend methods of interfaces and the non-root-hub device itself
  are simply ignored, so all suspended interfaces are only resumed
  to the device's state when @udev is root-hub and its suspend method
  returns failure.
  Autosuspend requests originating from a child device or an interface
  driver may be made without the protection of @udev's device lock, but
  all other suspend calls will hold the lock.  Usbcore will insure that
  method calls do not arrive during bind, unbind, or reset operations.
  However drivers must be prepared to handle suspend calls arriving at
  unpredictable times.
  This routine can run only in process context.
  Return: 0 if the suspend succeeded.
 Suspend all the interfaces and then udev itself 
 Ignore errors during system sleep transitions 
		
		  Ignore errors from non-root-hub devices during
		  system sleep transitions.  For the most part,
		  these devices should go to low power anyway when
		  the entire bus is suspended.
		
		  If the device is inaccessible, don't try to resume
		  suspended interfaces and just return the error.
 If the suspend failed, resume interfaces that did get suspended 
	 If the suspend succeeded then prevent any more URB submissions
	  and flush any outstanding URBs.
  usb_resume_both - resume a USB device and its interfaces
  @udev: the usb_device to resume
  @msg: Power Management message describing this state transition
  This is the central routine for resuming USB devices.  It calls the
  the resume method for @udev and then calls the resume methods for all
  the interface drivers in @udev.
  Autoresume requests originating from a child device or an interface
  driver may be made without the protection of @udev's device lock, but
  all other resume calls will hold the lock.  Usbcore will insure that
  method calls do not arrive during bind, unbind, or reset operations.
  However drivers must be prepared to handle resume calls arriving at
  unpredictable times.
  This routine can run only in process context.
  Return: 0 on success.
 Resume the device 
 Resume the interfaces 
	 Remote wakeup is needed only when we actually go to sleep.
	  For things like FREEZE and QUIESCE, if the device is already
	  autosuspended then its current wakeup setting is okay.
	 Enable remote wakeup if it is allowed, even if no interface drivers
	  actually want it.
	 If the device is autosuspended with the wrong wakeup setting,
	  autoresume now so the setting can be changed.
 The device lock is held by the PM core 
	 From now on we are sure all drivers support suspendresume
	  but not necessarily reset_resume()
	  so we may still need to unbind and rebind upon resume
 The device lock is held by the PM core 
	 For PM complete calls, all we do is rebind interfaces
	  whose needs_binding flag is set
 The device lock is held by the PM core 
	 For all calls, take the device back to full power and
	  tell the PM core in case it was autosuspended previously.
	  Unbind the interfaces that will need rebinding later,
	  because they fail to support reset_resume.
	  (This can't be done in usb_resume_interface()
	  above because it doesn't own the right set of locks.)
	 Avoid PM error messages for devices disconnected while suspended
	  as we'll display regular disconnect messages just a bit later.
  usb_enable_autosuspend - allow a USB device to be autosuspended
  @udev: the USB device which may be autosuspended
  This routine allows @udev to be autosuspended.  An autosuspend won't
  take place until the autosuspend_delay has elapsed and all the other
  necessary conditions are satisfied.
  The caller must hold @udev's device lock.
  usb_disable_autosuspend - prevent a USB device from being autosuspended
  @udev: the USB device which may not be autosuspended
  This routine prevents @udev from being autosuspended and wakes it up
  if it is already autosuspended.
  The caller must hold @udev's device lock.
  usb_autosuspend_device - delayed autosuspend of a USB device and its interfaces
  @udev: the usb_device to autosuspend
  This routine should be called when a core subsystem is finished using
  @udev and wants to allow it to autosuspend.  Examples would be when
  @udev's device file in usbfs is closed or after a configuration change.
  @udev's usage counter is decremented; if it drops to 0 and all the
  interfaces are inactive then a delayed autosuspend will be attempted.
  The attempt may fail (see autosuspend_check()).
  The caller must hold @udev's device lock.
  This routine can run only in process context.
  usb_autoresume_device - immediately autoresume a USB device and its interfaces
  @udev: the usb_device to autoresume
  This routine should be called when a core subsystem wants to use @udev
  and needs to guarantee that it is not suspended.  No autosuspend will
  occur until usb_autosuspend_device() is called.  (Note that this will
  not prevent suspend events originating in the PM core.)  Examples would
  be when @udev's device file in usbfs is opened or when a remote-wakeup
  request is received.
  @udev's usage counter is incremented to prevent subsequent autosuspends.
  However if the autoresume fails then the usage counter is re-decremented.
  The caller must hold @udev's device lock.
  This routine can run only in process context.
  Return: 0 on success. A negative error code otherwise.
  usb_autopm_put_interface - decrement a USB interface's PM-usage counter
  @intf: the usb_interface whose counter should be decremented
  This routine should be called by an interface driver when it is
  finished using @intf and wants to allow it to autosuspend.  A typical
  example would be a character-device driver when its device file is
  closed.
  The routine decrements @intf's usage counter.  When the counter reaches
  0, a delayed autosuspend request for @intf's device is attempted.  The
  attempt may fail (see autosuspend_check()).
  This routine can run only in process context.
  usb_autopm_put_interface_async - decrement a USB interface's PM-usage counter
  @intf: the usb_interface whose counter should be decremented
  This routine does much the same thing as usb_autopm_put_interface():
  It decrements @intf's usage counter and schedules a delayed
  autosuspend request if the counter is <= 0.  The difference is that it
  does not perform any synchronization; callers should hold a private
  lock and handle all synchronization issues themselves.
  Typically a driver would call this routine during an URB's completion
  handler, if no more URBs were pending.
  This routine can run in atomic context.
  usb_autopm_put_interface_no_suspend - decrement a USB interface's PM-usage counter
  @intf: the usb_interface whose counter should be decremented
  This routine decrements @intf's usage counter but does not carry out an
  autosuspend.
  This routine can run in atomic context.
  usb_autopm_get_interface - increment a USB interface's PM-usage counter
  @intf: the usb_interface whose counter should be incremented
  This routine should be called by an interface driver when it wants to
  use @intf and needs to guarantee that it is not suspended.  In addition,
  the routine prevents @intf from being autosuspended subsequently.  (Note
  that this will not prevent suspend events originating in the PM core.)
  This prevention will persist until usb_autopm_put_interface() is called
  or @intf is unbound.  A typical example would be a character-device
  driver when its device file is opened.
  @intf's usage counter is incremented to prevent subsequent autosuspends.
  However if the autoresume fails then the counter is re-decremented.
  This routine can run only in process context.
  Return: 0 on success.
  usb_autopm_get_interface_async - increment a USB interface's PM-usage counter
  @intf: the usb_interface whose counter should be incremented
  This routine does much the same thing as
  usb_autopm_get_interface(): It increments @intf's usage counter and
  queues an autoresume request if the device is suspended.  The
  differences are that it does not perform any synchronization (callers
  should hold a private lock and handle all synchronization issues
  themselves), and it does not autoresume the device directly (it only
  queues a request).  After a successful call, the device may not yet be
  resumed.
  This routine can run in atomic context.
  Return: 0 on success. A negative error code otherwise.
  usb_autopm_get_interface_no_resume - increment a USB interface's PM-usage counter
  @intf: the usb_interface whose counter should be incremented
  This routine increments @intf's usage counter but does not carry out an
  autoresume.
  This routine can run in atomic context.
 Internal routine to check whether we may autosuspend a device. 
	 Fail if autosuspend is disabled, or any interfaces are in use, or
	  any interface drivers require remote wakeup but it isn't available.
			 We don't need to check interfaces that are
			  disabled for runtime PM.  Either they are unbound
			  or else their drivers don't support autosuspend
			  and so they are permanently active.
			 Don't allow autosuspend if the device will need
			  a reset-resume and any of its interface drivers
			  doesn't include support or needs remote wakeup.
	
	  If the device is a direct child of the root hub and the HCD
	  doesn't handle wakeup requests, don't allow autosuspend when
	  wakeup is needed.
	 A USB device can be suspended if it passes the various autosuspend
	  checks.  Runtime suspend for a USB device means suspending all the
	  interfaces and then the device itself.
 Allow a retry if autosuspend failed temporarily 
	
	  The PM core reacts badly unless the return code is 0,
	  -EAGAIN, or -EBUSY, so always return -EBUSY on an error
	  (except for root hubs, because they don't suspend through
	  an upstream port like other USB devices).
	 Runtime resume for a USB device means resuming both the device
	  and all its interfaces.
	 An idle USB device can be suspended if it passes the various
	  autosuspend checks.
 Tell the core not to suspend it, though. 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
  usb port device code
  Copyright (C) 2012 Intel Corp
  Author: Lan Tianyu <tianyu.lan@intel.com>
	 If device is connected to the port, disable or enable lpm
	  to make new u1 u2 setting take effect immediately.
	
	  Power on our usb3 peer before this usb2 port to prevent a usb3
	  device from degrading to its usb2 connection
		
		  Our preference is to simply wait for the port to reconnect,
		  as that is the lowest latency method to restart the port.
		  However, there are cases where toggling port power results in
		  the host port and the device port getting out of sync causing
		  a link training live lock.  Upon timeout, flag the port as
		  needing warm reset recovery (to be performed later by
		  usb_port_resume() as requested via usb_wakeup_notification())
 Force the child awake to revalidate after the power loss. 
	
	  Our peer usb3 port may now be able to suspend, so
	  asynchronously queue a suspend request to observe that this
	  usb2 port is now off.
	
	  We need to wake the HiSpeed port to make sure we don't race
	  setting ->peer with usb_port_runtime_suspend().  Otherwise we
	  may miss a suspend event for the SuperSpeed port.
	
	  The SuperSpeed reference is dropped when the HiSpeed port in
	  this relationship suspends, i.e. when it is safe to allow a
	  SuperSpeed connection to drop since there is no risk of a
	  device degrading to its powered-off HiSpeed connection.
	 
	  Also, drop the HiSpeed ref taken above.
	
	  We wake the HiSpeed port to make sure we don't race its
	  usb_port_runtime_resume() event which takes a SuperSpeed ref
	  when ->peer is !NULL.
 Drop the SuperSpeed ref held on behalf of the active HiSpeed port 
 Drop the ref taken above 
  For each usb hub device in the system check to see if it is in the
  peer domain of the given port_dev, and if it is check to see if it
  has a port that matches the given port by location
 peer_hcd is provisional until we verify it against the known peer 
 done 
  Find the peer port either via explicit platform firmware "location"
  data, the peer hcd for root hubs, or the upstream peer relationship
  for all other hubs.
	
	  If location data is available then we can only peer this port
	  by a location match, not the default peer (lest we create a
	  situation where we need to go back and undo a default peering
	  when the port is later peered by location data)
 we link the peer in match_location() if found 
	
	  we found a valid default peer, last check is to make sure it
	  does not have location data
 Set default policy of port-poweroff disabled. 
	
	  Enable runtime pm and hold a refernce that hub_configure()
	  will drop once the PM_QOS_NO_POWER_OFF flag state has been set
	  and the hub has been fully registered (hdev->maxchild set).
	
	  Keep hidden the ability to enable port-poweroff if the hub
	  does not support power switching.
 Attempt to let userspace take over the policy. 
 Userspace owns the policy, drop the kernel 'no_poweroff' request. 
 SPDX-License-Identifier: GPL-2.0+
  (C) Copyright Linus Torvalds 1999
  (C) Copyright Johannes Erdfelt 1999-2001
  (C) Copyright Andreas Gal 1999
  (C) Copyright Gregory P. Smith 1999
  (C) Copyright Deti Fliegl 1999
  (C) Copyright Randy Dunlap 2000
  (C) Copyright David Brownell 2000-2002
-------------------------------------------------------------------------
  USB Host Controller Driver framework
  Plugs into usbcore (usb_bus) and lets HCDs share code, minimizing
  HCD-specific behaviorsbugs.
  This does error checks, tracks devices and urbs, and delegates to a
  "hc_driver" only for code (and data) that really needs to know about
  hardware differences.  That includes root hub registers, io queues,
  and so on ... but as little else as possible.
  Shared code includes most of the "root hub" code (these are emulated,
  though each HC's hardware works differently) and PCI glue, plus request
  tracking overhead.  The HCD code should only block on spinlocks or on
  hardware handshaking; blocking on software events (such as other kernel
  threads releasing resources, or completing actions) is all generic.
  Happens the USB 2.0 spec says this would be invisible inside the "USBD",
  and includes mostly a "HCDI" (HCD Interface) along with some APIs used
  only by the hub driver ... and that neither should be seen or used by
  usb client device drivers.
  Contributors of ideas or unattributed patches include: David Brownell,
  Roman Weissgaerber, Rory Bolt, Greg Kroah-Hartman, ...
  HISTORY:
  2002-02-21	Pull in most of the usb_bus support from usb.c; some
 		associated cleanup.  "usb_hcd" still != "usb_bus".
  2001-12-12	Initial patch version for Linux 2.5.1 kernel.
-------------------------------------------------------------------------
 Keep track of which host controller drivers are loaded 
 host controllers we manage 
 used when allocating bus numbers 
 used when updating list of hcds 
 exported only for usbfs 
 used for controlling access to virtual root hubs 
 used when updating an endpoint's URB list 
 used to protect against unlinking URBs after the device is gone 
 wait queue for synchronous unlinks 
-------------------------------------------------------------------------
  Sharable chunks of root hub code.
-------------------------------------------------------------------------
 usb 3.1 root hub device descriptor 
  __u8  bLength; 
 __u8 bDescriptorType; Device 
  __le16 bcdUSB; v3.1 
  __u8  bDeviceClass; HUB_CLASSCODE 
  __u8  bDeviceSubClass; 
  __u8  bDeviceProtocol; USB 3 hub 
  __u8  bMaxPacketSize0; 2^9 = 512 Bytes 
  __le16 idVendor; Linux Foundation 0x1d6b 
  __le16 idProduct; device 0x0003 
  __le16 bcdDevice 
  __u8  iManufacturer; 
  __u8  iProduct; 
  __u8  iSerialNumber; 
  __u8  bNumConfigurations; 
 usb 3.0 root hub device descriptor 
  __u8  bLength; 
 __u8 bDescriptorType; Device 
  __le16 bcdUSB; v3.0 
  __u8  bDeviceClass; HUB_CLASSCODE 
  __u8  bDeviceSubClass; 
  __u8  bDeviceProtocol; USB 3.0 hub 
  __u8  bMaxPacketSize0; 2^9 = 512 Bytes 
  __le16 idVendor; Linux Foundation 0x1d6b 
  __le16 idProduct; device 0x0003 
  __le16 bcdDevice 
  __u8  iManufacturer; 
  __u8  iProduct; 
  __u8  iSerialNumber; 
  __u8  bNumConfigurations; 
 usb 2.5 (wireless USB 1.0) root hub device descriptor 
  __u8  bLength; 
 __u8 bDescriptorType; Device 
  __le16 bcdUSB; v2.5 
  __u8  bDeviceClass; HUB_CLASSCODE 
  __u8  bDeviceSubClass; 
  __u8  bDeviceProtocol; [ usb 2.0 no TT ] 
  __u8  bMaxPacketSize0; always 0xFF (WUSB Spec 7.4.1). 
  __le16 idVendor; Linux Foundation 0x1d6b 
  __le16 idProduct; device 0x0002 
  __le16 bcdDevice 
  __u8  iManufacturer; 
  __u8  iProduct; 
  __u8  iSerialNumber; 
  __u8  bNumConfigurations; 
 usb 2.0 root hub device descriptor 
  __u8  bLength; 
 __u8 bDescriptorType; Device 
  __le16 bcdUSB; v2.0 
  __u8  bDeviceClass; HUB_CLASSCODE 
  __u8  bDeviceSubClass; 
  __u8  bDeviceProtocol; [ usb 2.0 no TT ] 
  __u8  bMaxPacketSize0; 64 Bytes 
  __le16 idVendor; Linux Foundation 0x1d6b 
  __le16 idProduct; device 0x0002 
  __le16 bcdDevice 
  __u8  iManufacturer; 
  __u8  iProduct; 
  __u8  iSerialNumber; 
  __u8  bNumConfigurations; 
 no usb 2.0 root hub "device qualifier" descriptor: one speed only 
 usb 1.1 root hub device descriptor 
  __u8  bLength; 
 __u8 bDescriptorType; Device 
  __le16 bcdUSB; v1.1 
  __u8  bDeviceClass; HUB_CLASSCODE 
  __u8  bDeviceSubClass; 
  __u8  bDeviceProtocol; [ lowfull speeds only ] 
  __u8  bMaxPacketSize0; 64 Bytes 
  __le16 idVendor; Linux Foundation 0x1d6b 
  __le16 idProduct; device 0x0001 
  __le16 bcdDevice 
  __u8  iManufacturer; 
  __u8  iProduct; 
  __u8  iSerialNumber; 
  __u8  bNumConfigurations; 
-------------------------------------------------------------------------
 Configuration descriptors for our root hubs 
 one configuration 
  __u8  bLength; 
 __u8 bDescriptorType; Configuration 
  __le16 wTotalLength; 
  __u8  bNumInterfaces; (1) 
  __u8  bConfigurationValue; 
  __u8  iConfiguration; 
	0xc0,         __u8  bmAttributes;
				 Bit 7: must be set,
				     6: Self-powered,
				     5: Remote wakeup,
  __u8  MaxPower; 
	 USB 1.1:
	  USB 2.0, single TT organization (mandatory):
	 	one interface, protocol 0
	 
	  USB 2.0, multiple TT organization (optional):
	 	two interfaces, protocols 1 (like single TT)
	 	and 2 (multiple TT mode) ... config is
	 	sometimes settable
	 	NOT IMPLEMENTED
 one interface 
  __u8  if_bLength; 
 __u8 if_bDescriptorType; Interface 
  __u8  if_bInterfaceNumber; 
  __u8  if_bAlternateSetting; 
  __u8  if_bNumEndpoints; 
  __u8  if_bInterfaceClass; HUB_CLASSCODE 
  __u8  if_bInterfaceSubClass; 
  __u8  if_bInterfaceProtocol; [usb1.1 or single tt] 
  __u8  if_iInterface; 
 one endpoint (status change endpoint) 
  __u8  ep_bLength; 
 __u8 ep_bDescriptorType; Endpoint 
  __u8  ep_bEndpointAddress; IN Endpoint 1 
  __u8  ep_bmAttributes; Interrupt 
  __le16 ep_wMaxPacketSize; 1 + (MAX_ROOT_PORTS  8) 
  __u8  ep_bInterval; (255ms -- usb 2.0 spec) 
 one configuration 
  __u8  bLength; 
 __u8 bDescriptorType; Configuration 
  __le16 wTotalLength; 
  __u8  bNumInterfaces; (1) 
  __u8  bConfigurationValue; 
  __u8  iConfiguration; 
	0xc0,         __u8  bmAttributes;
				 Bit 7: must be set,
				     6: Self-powered,
				     5: Remote wakeup,
  __u8  MaxPower; 
	 USB 1.1:
	  USB 2.0, single TT organization (mandatory):
	 	one interface, protocol 0
	 
	  USB 2.0, multiple TT organization (optional):
	 	two interfaces, protocols 1 (like single TT)
	 	and 2 (multiple TT mode) ... config is
	 	sometimes settable
	 	NOT IMPLEMENTED
 one interface 
  __u8  if_bLength; 
 __u8 if_bDescriptorType; Interface 
  __u8  if_bInterfaceNumber; 
  __u8  if_bAlternateSetting; 
  __u8  if_bNumEndpoints; 
  __u8  if_bInterfaceClass; HUB_CLASSCODE 
  __u8  if_bInterfaceSubClass; 
  __u8  if_bInterfaceProtocol; [usb1.1 or single tt] 
  __u8  if_iInterface; 
 one endpoint (status change endpoint) 
  __u8  ep_bLength; 
 __u8 ep_bDescriptorType; Endpoint 
  __u8  ep_bEndpointAddress; IN Endpoint 1 
  __u8  ep_bmAttributes; Interrupt 
		     __le16 ep_wMaxPacketSize; 1 + (MAX_ROOT_PORTS  8)
  __u8  ep_bInterval; (256ms -- usb 2.0 spec) 
 one configuration 
  __u8  bLength; 
 __u8 bDescriptorType; Configuration 
  __le16 wTotalLength; 
  __u8  bNumInterfaces; (1) 
  __u8  bConfigurationValue; 
  __u8  iConfiguration; 
	0xc0,         __u8  bmAttributes;
				 Bit 7: must be set,
				     6: Self-powered,
				     5: Remote wakeup,
  __u8  MaxPower; 
 one interface 
  __u8  if_bLength; 
 __u8 if_bDescriptorType; Interface 
  __u8  if_bInterfaceNumber; 
  __u8  if_bAlternateSetting; 
  __u8  if_bNumEndpoints; 
  __u8  if_bInterfaceClass; HUB_CLASSCODE 
  __u8  if_bInterfaceSubClass; 
  __u8  if_bInterfaceProtocol; 
  __u8  if_iInterface; 
 one endpoint (status change endpoint) 
  __u8  ep_bLength; 
 __u8 ep_bDescriptorType; Endpoint 
  __u8  ep_bEndpointAddress; IN Endpoint 1 
  __u8  ep_bmAttributes; Interrupt 
		     __le16 ep_wMaxPacketSize; 1 + (MAX_ROOT_PORTS  8)
  __u8  ep_bInterval; (256ms -- usb 2.0 spec) 
 one SuperSpeed endpoint companion descriptor 
 __u8 ss_bLength 
 __u8 ss_bDescriptorType; SuperSpeed EP 
 Companion 
 __u8 ss_bMaxBurst; allows 1 TX between ACKs 
 __u8 ss_bmAttributes; 1 packet per service interval 
 __le16 ss_wBytesPerInterval; 15 bits for max 15 ports 
 authorized_default behaviour:
  -1 is authorized for all devices except wireless (old behaviour)
  0 is unauthorized for all devices
  1 is authorized for all devices
  2 is authorized for internal devices
-------------------------------------------------------------------------
  ascii2desc() - Helper routine for producing UTF-16LE string descriptors
  @s: Null-terminated ASCII (actually ISO-8859-1) string
  @buf: Buffer for USB string descriptor (header + UTF-16LE)
  @len: Length (in bytes; may be odd) of descriptor buffer.
  Return: The number of bytes filled in: 2 + 2strlen(s) or @len,
  whichever is less.
  Note:
  USB String descriptors can contain at most 126 characters; input
  strings longer than that are truncated.
 Longest possible UTF string descriptor 
 Now t is first 16 bits to store 
  rh_string() - provides string descriptors for root hub
  @id: the string ID number (0: langids, 1: serial #, 2: product, 3: vendor)
  @hcd: the host controller for this root hub
  @data: buffer for output packet
  @len: length of the provided buffer
  Produces either a manufacturer, product or serial number string for the
  virtual root hub device.
  Return: The number of bytes filled in: the length of the descriptor or
  of the provided buffer, whichever is less.
 language ids 
 Array of LANGID codes (0x0409 is MSFT-speak for "en-us") 
www.usb.orgdevelopersdocsUSB_LANGIDs.pdf 
 Serial number 
 Product name 
 Manufacturer 
 Can't happen; caller guarantees it 
 Root hub control transfers execute synchronously 
 Indicate it's queued 
	
	  tbuf should be at least as big as the
	  USB hub descriptor.
 DEVICE REQUESTS 
	 The root hub's remote wakeup enable bit is implemented using
	  driver model wakeup flags.  If this system supports wakeup
	  through USB, userspace may change the default "allow wakeup"
	  policy through sysfs or these calls.
	 
	  Most root hubs support wakeup from downstream devices, for
	  runtime power management (disabling USB clocks and reducing
	  VBUS power usage).  However, not all of them do so; silicon,
	  board, and BIOS bugs here are not uncommon, so these can't
	  be treated quite like external hubs.
	 
	  Likewise, not all root hubs will pass wakeup events upstream,
	  to wake up the whole system.  So don't assume root hub and
	  controller capabilities are identical.
 unsupported IDs --> "protocol stall" 
 wValue == urb->dev->devaddr 
 INTERFACE REQUESTS (no defined featurestatus flags) 
 ENDPOINT REQUESTS 
 ENDPOINT_HALT flag 
 CLASS REQUESTS (and errors) 
 non-generic request 
 other port status types return 8 bytes 
 len is returned by hub_control 
 "protocol stall" on error 
 hub_control may return the length of data copied. 
 always USB_DIR_IN, toward host 
 report whether RH hardware supports remote wakeup 
 report whether RH hardware has an integrated TT 
 any errors get returned through the urb completion 
-------------------------------------------------------------------------
  Root Hub interrupt transfers are polled using a timer if the
  driver requests it; otherwise the driver is responsible for
  calling usb_hcd_poll_rh_status() when an event occurs.
  Completion handler may not sleep. See usb_hcd_giveback_urb() for details.
 Any root hubs with > 31 ports? 
 try to complete the status urb 
	 The USB 2.0 spec says 256 ms.  This is close enough and won't
	  exceed that limit if HZ is 100. The math is more clunky than
	  maybe expected, this is to make sure that all timers for USB devices
 timer callback 
-------------------------------------------------------------------------
 indicate it's queued 
 If a status change has already occurred, report it ASAP 
-------------------------------------------------------------------------
 Unlinks of root-hub control URBs are legal, but they don't do anything
  since these URBs always execute synchronously.
 Control URB 
 Do nothing 
 Status URB 
-------------------------------------------------------------------------
  usb_bus_init - shared initialization code
  @bus: the bus structure being initialized
  This code is used to initialize a usb_bus structure, memory for which is
  separately managed.
-------------------------------------------------------------------------
  usb_register_bus - registers the USB host controller with the usb core
  @bus: pointer to the bus to register
  Context: task context, might sleep.
  Assigns a bus number, and links the controller into usbcore data
  structures so that it can be seen by scanning the bus list.
  Return: 0 if successful. A negative error code otherwise.
  usb_deregister_bus - deregisters the USB host controller
  @bus: pointer to the bus to deregister
  Context: task context, might sleep.
  Recycles the bus number, and unlinks the controller from usbcore data
  structures so that it won't be seen by scanning the bus list.
	
	  NOTE: make sure that all the devices are removed by the
	  controller code, as well as having it call this when cleaning
	  itself up
  register_root_hub - called by usb_add_hcd() to register a root hub
  @hcd: host controller for this root hub
  This function registers the root hub with the USB subsystem.  It sets up
  the device properly in the device tree and then calls usb_new_device()
  to register the usb device.  It also assigns the root hub's USB address
  (always 1).
  Return: 0 if successful. A negative error code otherwise.
 Did the HC die before the root hub was registered? 
 This time clean up 
  usb_hcd_start_port_resume - a root-hub port is sending a resume signal
  @bus: the bus which the root hub belongs to
  @portnum: the port which is being resumed
  HCDs should call this function when they know that a resume signal is
  being sent to a root-hub port.  The root hub will be prevented from
  going into autosuspend until usb_hcd_end_port_resume() is called.
  The bus's private lock must be held by the caller.
  usb_hcd_end_port_resume - a root-hub port has stopped sending a resume signal
  @bus: the bus which the root hub belongs to
  @portnum: the port which is being resumed
  HCDs should call this function when they know that a resume signal has
  stopped being sent to a root-hub port.  The root hub will be allowed to
  autosuspend again.
  The bus's private lock must be held by the caller.
-------------------------------------------------------------------------
  usb_calc_bus_time - approximate periodic transaction time in nanoseconds
  @speed: from dev->speed; USB_SPEED_{LOW,FULL,HIGH}
  @is_input: true iff the transaction sends data to the host
  @isoc: true for isochronous transactions, false for interrupt ones
  @bytecount: how many bytes in the transaction.
  Return: Approximate bus time in nanoseconds for a periodic transaction.
  Note:
  See USB 2.0 spec section 5.11.3; only periodic transfers need to be
  scheduled in software, this function is only used for such scheduling.
 INTR only 
 ISOC or INTR 
 ISOC or INTR 
 FIXME adjust for input vs output 
-------------------------------------------------------------------------
  Generic HC operations.
-------------------------------------------------------------------------
  usb_hcd_link_urb_to_ep - add an URB to its endpoint queue
  @hcd: host controller to which @urb was submitted
  @urb: URB being submitted
  Host controller drivers should call this routine in their enqueue()
  method.  The HCD's private spinlock must be held and interrupts must
  be disabled.  The actions carried out here are required for URB
  submission, as well as for endpoint shutdown and for usb_kill_urb.
  Return: 0 for no error, otherwise a negative error code (in which case
  the enqueue() method must fail).  If no error occurs but enqueue() fails
  anyway, it must call usb_hcd_unlink_urb_from_ep() before releasing
  the private spinlock and returning.
 Check that the URB isn't being killed 
	
	  Check the host controller's state and add the URB to the
	  endpoint's queue.
  usb_hcd_check_unlink_urb - check whether an URB may be unlinked
  @hcd: host controller to which @urb was submitted
  @urb: URB being checked for unlinkability
  @status: error code to store in @urb if the unlink succeeds
  Host controller drivers should call this routine in their dequeue()
  method.  The HCD's private spinlock must be held and interrupts must
  be disabled.  The actions carried out here are required for making
  sure than an unlink is valid.
  Return: 0 for no error, otherwise a negative error code (in which case
  the dequeue() method must fail).  The possible error codes are:
 	-EIDRM: @urb was not submitted or has already completed.
 		The completion function may not have been called yet.
 	-EBUSY: @urb has already been unlinked.
 insist the urb is still queued 
	 Any status except -EINPROGRESS means something already started to
	  unlink this URB from the hardware.  So there's no more work to do.
  usb_hcd_unlink_urb_from_ep - remove an URB from its endpoint queue
  @hcd: host controller to which @urb was submitted
  @urb: URB being unlinked
  Host controller drivers should call this routine before calling
  usb_hcd_giveback_urb().  The HCD's private spinlock must be held and
  interrupts must be disabled.  The actions carried out here are required
  for URB completion.
 clear all state linking urb to this dev (and hcd) 
  Some usb host controllers can only perform dma using a small SRAM area.
  The usb core itself is however optimized for host controllers that can dma
  using regular system memory - like pci devices doing bus mastering.
  To support host controllers with limited dma capabilities we provide dma
  bounce buffers. This feature can be enabled by initializing
  hcd->localmem_pool using usb_hcd_setup_local_mem().
  The initialized hcd->localmem_pool then tells the usb code to allocate all
  data for dma using the genalloc API.
  So, to summarize...
  - We need "local" memory, canonical example being
    a small SRAM on a discrete controller being the
    only memory that the controller can read ...
    (a) "normal" kernel memory is no good, and
    (b) there's not enough to share
  - So we use that, even though the primary requirement
    is that the memory be "local" (hence addressable
    by that device), not "coherent".
	
	  Store the virtual address of the buffer at the end
	  of the allocated dma buffer. The size of the buffer
	  may be uneven so use unaligned functions instead
	  of just rounding up. It makes sense to optimize for
	  memory footprint over access speed since the amount
	  of memory available for dma may be limited.
 Make it safe to call this routine more than once 
 Make it safe to call this routine more than once 
	 Map the URB's buffers for DMA access.
	  Lower level HCD code should use _dma exclusively,
	  unless it uses pio or talks to another transport,
	  or uses the provided scatter gather list for bulk.
 We don't support sg for isoc transfers ! 
-------------------------------------------------------------------------
 may be called in any context with a valid urb->dev usecount
  caller surrenders "ownership" of urb
  expects usb_submit_urb() to have sanity checked and conditioned all
  inputs in the urb
	 increment urb's reference count as part of giving it to the HCD
	  (which will control it).  HCD guarantees that it either returns
	  an error or calls giveback(), but not both.
	 NOTE requirements on root-hub callers (usbfs and the hub
	  driver, for now):  URBs' urb->transfer_buffer must be
	  valid and usb_buffer_{sync,unmap}() not be needed, since
	  they could clobber root hub response data.  Also, control
	  URBs must be submitted in process context with interrupts
	  enabled.
-------------------------------------------------------------------------
 this makes the hcd giveback() the urb more quickly, by kicking it
  off hardware queues (which may take a while) and returning it as
  soon as practical.  we've already set up the urb's return status,
  but we can't know if the callback completed already.
		 The only reason an HCD might fail this call is if
		  it has not yet fully queued the urb to begin with.
  called in any context
  caller guarantees urb won't be recycled till both unlink()
  and the urb's completion function return
	 Prevent the device and bus from going away while
	  the unlink is carried out.  If they are already gone
	  then urb->use_count must be 0, since disconnected
	  devices can't have any active URBs.
-------------------------------------------------------------------------
 pass ownership to the completion handler 
	
	  This function can be called in task context inside another remote
	  coverage collection section, but kcov doesn't support that kind of
	  recursion yet. Only collect coverage in softirq context for now.
 check if there are new URBs to giveback 
  usb_hcd_giveback_urb - return URB from HCD to device driver
  @hcd: host controller returning the URB
  @urb: urb being returned to the USB device driver.
  @status: completion status code for the URB.
  Context: atomic. The completion callback is invoked in caller's context.
  For HCDs with HCD_BH flag set, the completion callback is invoked in tasklet
  context (except for URBs submitted to the root hub which always complete in
  caller's context).
  This hands the URB from HCD to its USB device driver, using its
  completion function.  The HCD has freed all per-urb resources
  (and is done using urb->hcpriv).  It also released all HCD locks;
  the device driver won't cause problems if it frees, modifies,
  or resubmits this URB.
  If @urb was unlinked, the value of @status will be overridden by
  @urb->unlinked.  Erroneous short transfers are detected in case
  the HCD hasn't checked for them.
 pass status to tasklet via unlinked 
-------------------------------------------------------------------------
 Cancel all URBs pending on this endpoint and wait for the endpoint's
  queue to drain completely.  The caller must first insure that no more
  URBs can be submitted for this endpoint.
 No more submits can occur 
 kick hcd 
 list contents may have changed 
 Wait until the endpoint queue is completely empty 
 The list may have changed while we acquired the spinlock 
  usb_hcd_alloc_bandwidth - check whether a new bandwidth setting exceeds
 				the bus bandwidth
  @udev: target &usb_device
  @new_config: new configuration to install
  @cur_alt: the current alternate interface setting
  @new_alt: alternate interface setting that is being installed
  To change configurations, pass in the new configuration in new_config,
  and pass NULL for cur_alt and new_alt.
  To reset a device's configuration (put the device in the ADDRESSED state),
  pass in NULL for new_config, cur_alt, and new_alt.
  To change alternate interface settings, pass in NULL for new_config,
  pass in the current alternate interface setting in cur_alt,
  and pass in the new alternate interface setting in new_alt.
  Return: An error if the requested bandwidth change exceeds the
  bus bandwidth or host controller internal resources.
 Configuration is being removed - set configuration 0 
	 Check if the HCD says there's enough bandwidth.  Enable all endpoints
	  each interface's alt setting 0 and ask the HCD to check the bandwidth
	  of the bus.  There will always be bandwidth for endpoint 0, so it's
	  ok to exclude it.
		 Remove endpoints (except endpoint 0, which is always on the
		  schedule) from the old config from the schedule
 Set up endpoints for alternate interface setting 0 
 No alt setting 0? Pick the first setting. 
			
			  The USB core just reset the device, so the xHCI host
			  and the device will think alt setting 0 is installed.
			  However, the USB core will pass in the alternate
			  setting installed before the reset as cur_alt.  Dig
			  out the alternate setting 0 structure, or the first
			  alternate setting if a broken device doesn't have alt
			  setting 0.
 Drop all the endpoints in the current alt setting 
 Add all the endpoints in the new alt setting 
 Disables the endpoint: synchronizes with the hcd to make sure all
  endpoint state is gone from hardware.  usb_hcd_flush_endpoint() must
  have been called previously.  Use for set_configuration, set_interface,
  driver removal, physical disconnect.
  example:  a qh stored in ep->hcpriv, holding state related to endpoint
  type, maxpacket size, toggle, halt status, and scheduling.
  usb_hcd_reset_endpoint - reset host endpoint state
  @udev: USB device.
  @ep:   the endpoint to reset.
  Resets any host endpoint state such as the toggle bit, sequence
  number and current window.
  usb_alloc_streams - allocate bulk endpoint stream IDs.
  @interface:		alternate setting that includes all endpoints.
  @eps:		array of endpoints that need streams.
  @num_eps:		number of endpoints in the array.
  @num_streams:	number of streams to allocate.
  @mem_flags:		flags hcd should use to allocate memory.
  Sets up a group of bulk endpoints to have @num_streams stream IDs available.
  Drivers may queue multiple transfers to different stream IDs, which may
  complete in a different order than they were queued.
  Return: On success, the number of allocated streams. On failure, a negative
  error code.
 Streams only apply to bulk endpoints. 
 Re-alloc is not allowed 
  usb_free_streams - free bulk endpoint stream IDs.
  @interface:	alternate setting that includes all endpoints.
  @eps:	array of endpoints to remove streams from.
  @num_eps:	number of endpoints in the array.
  @mem_flags:	flags hcd should use to allocate memory.
  Reverts a group of bulk endpoints back to not using stream IDs.
  Can fail if we are given bad arguments, or HCD is broken.
  Return: 0 on success. On failure, a negative error code.
 Double-free is not allowed 
 Protect against drivers that try to unlink URBs after the device
  is gone, by waiting until all unlinks for @udev are finished.
  Since we don't currently track URBs by device, simply wait until
  nothing is running in the locked region of usb_hcd_unlink_urb().
-------------------------------------------------------------------------
 called in any context 
-------------------------------------------------------------------------
  Allocate and initialize a control URB. This request will be used by the
  EHSET SINGLE_STEP_SET_FEATURE test in which the DATA and STATUS stages
  of the GetDescriptor request are sent 15 seconds after the SETUP stage.
  Return NULL if failed.
 Obtain udev of the rhub's child port 
 Fill Setup packet for GetDescriptor 
 Submit just the SETUP stage 
 Complete remaining DATA and STATUS stages using the same URB 
 CONFIG_USB_HCD_TEST_MODE 
-------------------------------------------------------------------------
 Did we race with a root-hub wakeup event? 
		
		  Check whether any of the enabled ports on the root hub are
		  unsuspended.  If they are then a TRSMRCY delay is needed
		  (this is what the USB-2 spec calls a "global resume").
		  Otherwise we can skip the delay.
 TRSMRCY 
 Workqueue routine for root-hub remote wakeup 
  usb_hcd_resume_root_hub - called by HCD to resume its root hub
  @hcd: host controller for this root hub
  The USB host controller calls this function when its root hub is
  suspended (with the remote wakeup feature enabled) and a remote
  wakeup request is received.  The routine submits a workqueue request
  to resume the root hub (that is, manage its downstream ports again).
 CONFIG_PM 
-------------------------------------------------------------------------
  usb_bus_start_enum - start immediate enumeration (for OTG)
  @bus: the bus (must use hcd framework)
  @port_num: 1-based number of port; usually bus->otg_port
  Context: atomic
  Starts enumeration, with an immediate reset followed later by
  hub_wq identifying and possibly configuring the device.
  This is needed by OTG controller drivers, where it helps meet
  HNP protocol timing requirements for starting a port reset.
  Return: 0 if successful.
	 NOTE: since HNP can't start by grabbing the bus's address0_sem,
	  boards with root hubs hooked up to internal devices (instead of
	  just the OTG port) may need more attention to resetting...
	 allocate hub_wq shortly after (first) root port reset finishes;
	  it may issue others, until at least 50 msecs have passed.
-------------------------------------------------------------------------
  usb_hcd_irq - hook IRQs to HCD framework (bus glue)
  @irq: the IRQ being raised
  @__hcd: pointer to the HCD whose IRQ is being signaled
  If the controller isn't HALTed, calls the driver's irq handler.
  Checks whether the controller is now dead.
  Return: %IRQ_HANDLED if the IRQ was handled. %IRQ_NONE otherwise.
-------------------------------------------------------------------------
 Workqueue routine for when the root-hub has died. 
 Notify user space that the host controller has died 
  usb_hc_died - report abnormal shutdown of a host controller (bus glue)
  @hcd: pointer to the HCD representing the controller
  This is called by bus glue to report a USB host controller that died
  while operations may still have been pending.  It's called automatically
  by the PCI glue, so only glue for non-PCI busses should need to call it.
  Only call this function with the primary HCD.
 make hub_wq clean up old urbs and devices 
 make hub_wq clean up old urbs and devices 
 Handle the case where this function gets called with a shared HCD 
 Make sure that the other roothub is also deallocated. 
-------------------------------------------------------------------------
  usb_create_shared_hcd - create and initialize an HCD structure
  @driver: HC driver that will use this hcd
  @dev: device for this HC, stored in hcd->self.controller
  @bus_name: value to store in hcd->self.bus_name
  @primary_hcd: a pointer to the usb_hcd structure that is sharing the
               PCI device.  Only allocate certain resources for the primary HCD
  Context: task context, might sleep.
  Allocate a struct usb_hcd, with extra space at the end for the
  HC driver's private data.  Initialize the generic members of the
  hcd structure.
  Return: On success, a pointer to the created and initialized HCD structure.
  On failure (e.g. if memory is unavailable), %NULL.
  usb_create_hcd - create and initialize an HCD structure
  @driver: HC driver that will use this hcd
  @dev: device for this HC, stored in hcd->self.controller
  @bus_name: value to store in hcd->self.bus_name
  Context: task context, might sleep.
  Allocate a struct usb_hcd, with extra space at the end for the
  HC driver's private data.  Initialize the generic members of the
  hcd structure.
  Return: On success, a pointer to the created and initialized HCD
  structure. On failure (e.g. if memory is unavailable), %NULL.
  Roothubs that share one PCI device must also share the bandwidth mutex.
  Don't deallocate the bandwidth_mutex until the last shared usb_hcd is
  deallocated.
  Make sure to deallocate the bandwidth_mutex only when the last HCD is
  freed.  When hcd_release() is called for either hcd in a peer set,
  invalidate the peer's ->shared_hcd and ->primary_hcd pointers.
  Before we free this root hub, flush in-flight peering attempts
  and disable peer lookups
  usb_stop_hcd - Halt the HCD
  @hcd: the usb_hcd that has to be halted
  Stop the root-hub polling timer and invoke the HCD's ->stop callback.
 In case the HCD restarted the timer, stop it again. 
  usb_add_hcd - finish generic HCD structure initialization and register
  @hcd: the usb_hcd structure to initialize
  @irqnum: Interrupt line to allocate
  @irqflags: Interrupt type flags
  Finish the remaining parts of generic HCD initialization: allocate the
  buffers of consistent memory, register the bus, request the IRQ line,
  and call the driver's reset() and start() routines.
 per default all interfaces are authorized 
	 HC is in reset state, but accessible.  Now do the one-time init,
	  bottom up so that hcds can customize the root hubs before hub_wq
	  starts talking to them.  (Note, bus id is assigned early too.)
	 wakeup flag init defaults to "everything works" for root hubs,
	  but drivers can override it in reset() if needed, along with
	  recording the overall controller's system wakeup capability.
	 HCD_FLAG_RH_RUNNING doesn't matter until the root hub is
	  registered.  But since the controller can die at any time,
	  let's initialize the flag before touching the hardware.
	 "reset" is misnamed; its role is now one-time init. the controller
	  should already have been reset (and boot firmware kicked off etc).
 NOTE: root hub and controller capabilities may not be the same 
 initialize tasklets 
	 enable irqs just before we start the controller,
	  if the BIOS provides legacy PCI irqs.
 starting here, usbcore will pay attention to this root hub 
  usb_remove_hcd - shutdown processing for generic HCDs
  @hcd: the usb_hcd structure to remove
  Context: task context, might sleep.
  Disconnects the root hub, then reverses the effects of usb_add_hcd(),
  invoking the HCD's stop() method.
 Sets rhdev to NULL 
	
	  tasklet_kill() isn't needed here because:
	  - driver's disconnect() called from usb_disconnect() should
	    make sure its URBs are completed during the disconnect()
	    callback
	 
	  - it is too late to run complete() here since driver may have
	    been removed already now
	 Prevent any more root-hub status calls from the timer.
	  The HCD might still restart the timer (if a port status change
	  interrupt occurs), but usb_hcd_poll_rh_status() won't invoke
	  the hub_status_data() callback.
 No need for pm_runtime_put(), we're shutting down 
	
	  Here we pass a dma_addr_t but the arg type is a phys_addr_t.
	  It's not backed by system memory and thus there's no kernel mapping
	  for it.
-------------------------------------------------------------------------
  The registration is unlocked.
  We do it this way because we do not want to lock in hot paths.
  Notice that the code is minimally error-proof. Because usbmon needs
  symbols from usbcore, usbcore gets referenced and cannot be unloaded first.
 CONFIG_USB_MON || CONFIG_USB_MON_MODULE 
 SPDX-License-Identifier: GPL-2.0+
  devices.c
  (C) Copyright 1999 Randy Dunlap.
  (C) Copyright 1999,2000 Thomas Sailer <sailer@ife.ee.ethz.ch>.
      (proc file per device)
  (C) Copyright 1999 Deti Fliegl (new USB architecture)
  <mountpoint>devices contains USB topology, device, config, class,
  interface, & endpoint data.
  I considered using devbususbdevice# for each device
  as it is attached or detached, but I didn't like this for some
  reason -- maybe it's just too deep of a directory structure.
  I also don't like looking in multiple places to gather and view
  the data.  Having only one file for .devices also prevents race
  conditions that could arise if a program was reading device info
  for devices that are being removed (unplugged).  (That is, the
  program may find a directory for devnum_12 then try to open it,
  but it was just unplugged, so the directory is now deleted.
  But programs would just have to be prepared for situations like
  this in any plug-and-play environment.)
  1999-12-16: Thomas Sailer <sailer@ife.ee.ethz.ch>
    Converted the whole proc stuff to real
    read methods. Now not the whole device list needs to fit
    into one page, only the device list for one bus.
    Added a poll method to syskerneldebugusbdevices, to wake
    up an eventual usbd
  2000-01-04: Thomas Sailer <sailer@ife.ee.ethz.ch>
    Turned into its own filesystem
  2000-07-05: Ashley Montanaro <ashley@compsoc.man.ac.uk>
    Converted file reading routine to dump to buffer once
    per device, not per bus
 Define ALLOW_SERIAL_NUMBER if you want to see the serial number of devices 
 T:  Bus=dd Lev=dd Prnt=dd Port=dd Cnt=dd Dev#=ddd Spd=dddd MxCh=dd 
 S:  Manufacturer=xxxx 
 S:  Product=xxxx 
 S:  SerialNumber=xxxx 
 B:  Alloc=dddddd us (xx%), #Int=ddd, #Iso=ddd 
 D:  Ver=xx.xx Cls=xx(sssss) Sub=xx Prot=xx MxPS=dd #Cfgs=dd 
 P:  Vendor=xxxx ProdID=xxxx Rev=xx.xx 
 C:  #Ifs=dd Cfg#=dd Atr=xx MPwr=dddmA 
 A:  FirstIf#=dd IfCount=dd Cls=xx(sssss) Sub=xx Prot=xx 
 I:  If#=dd Alt=dd #EPs=dd Cls=xx(sssss) Sub=xx Prot=xx Driver=xxxx
 E:  Ad=xx(s) Atr=xx(ssss) MxPS=dddd Ivl=D?s 
 max. 5 chars. per name string 
 leave as last 
 this isn't checking for illegal values 
 ctrl is bidirectional 
 "can't happen" 
 mark active altsetting 
 TBD:
  0. TBDs
  1. marking active interface altsettings (code lists all, but should mark
     which ones are active, if any)
 mark activeactualcurrent cfg. 
 getting these some in 2.3.7; none in 2.3.6 
  Dump the different USB descriptors.
  Dump the different strings that this device holds.
 active ? 
 TBD: may want to add this code later 
 PROC_EXTRA 
 This is a recursive function. Parameters:
  buffer - the user-space buffer to write data into
  nbytes - the maximum number of bytes to write
  skip_bytes - the number of bytes to skip before writing anything
  file_offset - the offset into the devices file on completion
  The caller must own the device lock.
 don't bother with anything else if we're not writing any data 
	 allocate 2^1 pages = 8K (on i386);
	
	  So the root hub's parent is 0 and any device that is
	  plugged into the root hub has a parent of 0.
 usb 1.1 root hub code 
 Wireless has no real fixed speed 
	
	  level = topology-tier level;
	  parent_devnum = parent device number;
	  index = parent's connector number;
	  count = device count at this level
 If this is the root hub, display the bandwidth information 
 superhigh speed reserves 80%, fulllow reserves 90% 
		 report "average" periodic allocation over a microsecond.
		  the schedules are actually bursty, HCDs need to deal with
		  that and just computereport this average.
 if we can start copying some data to the user 
 Now look at all of this device's children. 
 print devices for all busses 
 recurse through all children of the root hub 
 SPDX-License-Identifier: GPL-2.0
  All the USB notify logic
  (C) Copyright 2005 Greg Kroah-Hartman <gregkh@suse.de>
  notifier functions originally based on those in kernelsys.c
  but fixed up to not be so broken.
  Released under the GPLv2 only.
  usb_register_notify - register a notifier callback whenever a usb change happens
  @nb: pointer to the notifier block for the callback events.
  These changes are either USB devices or busses being added or removed.
  usb_unregister_notify - unregister a notifier callback
  @nb: pointer to the notifier block for the callback events.
  usb_register_notify() must have been previously called for this function
  to work properly.
 SPDX-License-Identifier: GPL-2.0
  USB port LED trigger
  Copyright (C) 2016 RafaÅ MiÅecki <rafal@milecki.pl>
 Amount of connected matching devices 
  Helpers
  usbport_trig_usb_dev_observed - Check if dev is connected to observed port
  usbport_trig_update_count - Recalculate amount of connected matching devices
  Device attr
  Adding & removing ports
  usbport_trig_port_observed - Check if port should be observed
	
	  Get node of port being added
	 
	  FIXME: This is really the device node of the connected device
 Amount of trigger sources for this LED 
 Check list of sources for this specific port 
  Init, exit, etc.
 List of ports 
 Notifications 
 SPDX-License-Identifier: GPL-2.0
  DMA memory management for framework level HCD code (hc_driver)
  This implementation plugs in through generic "usb_bus" level methods,
  and should work with all USB controllers, regardless of bus type.
  Released under the GPLv2 only.
  DMA-Coherent Buffers
 FIXME tune these based on pool statistics ... 
	
	  The pool_max values must never be smaller than
	  ARCH_KMALLOC_MINALIGN.
 Original value is okay 
 Don't use this pool 
 We don't allow this 
 SETUP primitives 
  hcd_buffer_create - initialize buffer pools
  @hcd: the bus whose buffer pools are to be initialized
  Context: task context, might sleep
  Call this as part of initializing a host controller that uses the dma
  memory allocators.  It initializes some pools of dma-coherent memory that
  will be shared by all drivers using that controller.
  Call hcd_buffer_destroy() to clean up after using those pools.
  Return: 0 if successful. A negative errno value otherwise.
  hcd_buffer_destroy - deallocate buffer pools
  @hcd: the bus whose buffer pools are to be destroyed
  Context: task context, might sleep
  This frees the buffer pools created by hcd_buffer_create().
 sometimes allocfree could use kmalloc with GFP_DMA, for
  better sharing and to leverage mmslab.c intelligence.
 some USB hosts just use PIO 
 SPDX-License-Identifier: GPL-2.0
  driversusbcoreusb.c
  (C) Copyright Linus Torvalds 1999
  (C) Copyright Johannes Erdfelt 1999-2001
  (C) Copyright Andreas Gal 1999
  (C) Copyright Gregory P. Smith 1999
  (C) Copyright Deti Fliegl 1999 (new USB architecture)
  (C) Copyright Randy Dunlap 2000
  (C) Copyright David Brownell 2000-2004
  (C) Copyright Yggdrasil Computing, Inc. 2000
      (usb_device_id matching changes by Adam J. Richter)
  (C) Copyright Greg Kroah-Hartman 2002-2003
  Released under the GPLv2 only.
  NOTE! This is not actually a driver at all, rather this is
  just a collection of helper routines that implement the
  generic USB things that the real drivers can use..
  Think of this as a "USB library" rather than anything else,
  with no callbacks.  Callbacks are evil.
 Disable USB when built into kernel image 
  for external read access to <nousb>
 Default delay value, in seconds 
  usb_find_common_endpoints() -- look up common endpoint descriptors
  @alt:	alternate setting to search
  @bulk_in:	pointer to descriptor pointer, or NULL
  @bulk_out:	pointer to descriptor pointer, or NULL
  @int_in:	pointer to descriptor pointer, or NULL
  @int_out:	pointer to descriptor pointer, or NULL
  Search the alternate setting's endpoint descriptors for the first bulk-in,
  bulk-out, interrupt-in and interrupt-out endpoints and return them in the
  provided pointers (unless they are NULL).
  If a requested endpoint is not found, the corresponding pointer is set to
  NULL.
  Return: Zero if all requested descriptors were found, or -ENXIO otherwise.
  usb_find_common_endpoints_reverse() -- look up common endpoint descriptors
  @alt:	alternate setting to search
  @bulk_in:	pointer to descriptor pointer, or NULL
  @bulk_out:	pointer to descriptor pointer, or NULL
  @int_in:	pointer to descriptor pointer, or NULL
  @int_out:	pointer to descriptor pointer, or NULL
  Search the alternate setting's endpoint descriptors for the last bulk-in,
  bulk-out, interrupt-in and interrupt-out endpoints and return them in the
  provided pointers (unless they are NULL).
  If a requested endpoint is not found, the corresponding pointer is set to
  NULL.
  Return: Zero if all requested descriptors were found, or -ENXIO otherwise.
  usb_find_alt_setting() - Given a configuration, find the alternate setting
  for the given interface.
  @config: the configuration to search (not necessarily the current config).
  @iface_num: interface number to search in
  @alt_num: alternate interface setting number to search for.
  Search the configuration's interface cache for the given alt setting.
  Return: The alternate setting, if found. %NULL otherwise.
  usb_ifnum_to_if - get the interface object with a given interface number
  @dev: the device whose current configuration is considered
  @ifnum: the desired interface
  This walks the device descriptor for the currently active configuration
  to find the interface object with the particular interface number.
  Note that configuration descriptors are not required to assign interface
  numbers sequentially, so that it would be incorrect to assume that
  the first interface in that descriptor corresponds to interface zero.
  This routine helps device drivers avoid such mistakes.
  However, you should make sure that you do the right thing with any
  alternate settings available for this interfaces.
  Don't call this function unless you are bound to one of the interfaces
  on this device or you have locked the device!
  Return: A pointer to the interface that has @ifnum as interface number,
  if found. %NULL otherwise.
  usb_altnum_to_altsetting - get the altsetting structure with a given alternate setting number.
  @intf: the interface containing the altsetting in question
  @altnum: the desired alternate setting number
  This searches the altsetting array of the specified interface for
  an entry with the correct bAlternateSetting value.
  Note that altsettings need not be stored sequentially by number, so
  it would be incorrect to assume that the first altsetting entry in
  the array corresponds to altsetting zero.  This routine helps device
  drivers avoid such mistakes.
  Don't call this function unless you are bound to the intf interface
  or you have locked the device!
  Return: A pointer to the entry of the altsetting array of @intf that
  has @altnum as the alternate setting number. %NULL if not found.
  usb_find_interface - find usb_interface pointer for driver and device
  @drv: the driver whose current configuration is considered
  @minor: the minor number of the desired device
  This walks the bus device list and returns a pointer to the interface
  with the matching minor and driver.  Note, this only works for devices
  that share the USB major number.
  Return: A pointer to the interface with the matching major and @minor.
 Drop reference count from bus_find_device 
 There are struct usb_interface on the same bus, filter them out 
  usb_for_each_dev - iterate over all USB devices in the system
  @data: data pointer that will be handed to the callback function
  @fn: callback function to be called for each USB device
  Iterate over all USB devices and call @fn for each, passing it @data. If it
  returns anything other than 0, we break the iteration prematurely and return
  that value.
  usb_for_each_port - interate over all USB ports in the system
  @data: data pointer that will be handed to the callback function
  @fn: callback function to be called for each USB port
  Iterate over all USB ports and call @fn for each, passing it @data. If it
  returns anything other than 0, we break the iteration prematurely and return
  that value.
  usb_release_dev - free a usb device structure when all users of it are finished.
  @dev: device that's been disconnected
  Will be called only by the device core when all users of this usb device are
  done.
 USB device Power-Management thunks.
  There's no need to distinguish here between quiescing a USB device
  and powering it down; the generic_suspend() routine takes care of
  it by skipping the usb_port_suspend() call for a quiesce.  And for
  USB interfaces there's no difference at all.
 Implement eventually? 
 Currently used only for rebinding interfaces 
 CONFIG_PM 
 Returns 1 if @usb_bus is WUSB, 0 otherwise 
 Root hub always ok [and always wired] 
  usb_alloc_dev - usb device constructor (usbcore-internal)
  @parent: hub to which device is connected; null to allocate a root hub
  @bus: bus used to access the device
  @port1: one-based index of port; ignored for root hubs
  Context: task context, might sleep.
  Only hub drivers (including virtual root hub drivers for host
  controllers) should ever call this.
  This call may not be used in a non-sleeping context.
  Return: On success, a pointer to the allocated usb device. %NULL on
  failure.
 Root hubs aren't true devices, so don't allocate HCD resources 
 ep0 maxpacket comes later, from device descriptor 
	 Save readable and stable topology id, distinguishing devices
	  by location for diagnostics, tools, driver model, etc.  The
	  string is a path along hub ports, from the root.  Each device's
	  dev->devpath will be stable until USB is re-cabled, and hubs
	  are often labeled with these port numbers.  The name isn't
	  as stable:  bus->busnum changes easily from modprobe order,
	  cardbus or pci hotplugging, and so on.
 match any labeling on the hubs; it's one-based 
 Root ports are not counted in route string 
 Route string assumes hubs have less than 16 ports 
 device under root hub's port 
 hub driver sets up TT records 
  usb_get_dev - increments the reference count of the usb device structure
  @dev: the device being referenced
  Each live reference to a device should be refcounted.
  Drivers for USB interfaces should normally record such references in
  their probe() methods, when they bind to an interface, and release
  them by calling usb_put_dev(), in their disconnect() methods.
  Return: A pointer to the device with the incremented reference counter.
  usb_put_dev - release a use of the usb device structure
  @dev: device that's been disconnected
  Must be called when a user of a device is finished with it.  When the last
  user of the device calls this function, the memory of the device is freed.
  usb_get_intf - increments the reference count of the usb interface structure
  @intf: the interface being referenced
  Each live reference to a interface must be refcounted.
  Drivers for USB interfaces should normally record such references in
  their probe() methods, when they bind to an interface, and release
  them by calling usb_put_intf(), in their disconnect() methods.
  Return: A pointer to the interface with the incremented reference counter.
  usb_put_intf - release a use of the usb interface structure
  @intf: interface that's been decremented
  Must be called when a user of an interface is finished with it.  When the
  last user of the interface calls this function, the memory of the interface
  is freed.
  usb_intf_get_dma_device - acquire a reference on the usb interface's DMA endpoint
  @intf: the usb interface
  While a USB device cannot perform DMA operations by itself, many USB
  controllers can. A call to usb_intf_get_dma_device() returns the DMA endpoint
  for the given USB interface, if any. The returned device structure must be
  released with put_device().
  See also usb_get_dma_device().
  Returns: A reference to the usb interface's DMA endpoint; or NULL if none
           exists.
			USB device locking
  USB devices and interfaces are locked using the semaphore in their
  embedded struct device.  The hub driver guarantees that whenever a
  device is connected or disconnected, drivers are called with the
  USB device locked as well as their particular interface.
  Complications arise when several devices are to be locked at the same
  time.  Only hub-aware drivers that are part of usbcore ever have to
  do this; nobody else needs to worry about it.  The rule for locking
  is simple:
 	When locking both a device and its parent, always lock the
 	the parent first.
  usb_lock_device_for_reset - cautiously acquire the lock for a usb device structure
  @udev: device that's being locked
  @iface: interface bound to the driver making the request (optional)
  Attempts to acquire the device lock, but fails if the device is
  NOTATTACHED or SUSPENDED, or if iface is specified and the interface
  is neither BINDING nor BOUND.  Rather than sleeping to wait for the
  lock, the routine polls repeatedly.  This is to prevent deadlock with
  disconnect; in some drivers (such as usb-storage) the disconnect()
  or suspend() method will block waiting for a device reset to complete.
  Return: A negative error code for failure, otherwise 0.
		 If we can't acquire the lock after waiting one second,
  usb_get_current_frame_number - return current bus frame number
  @dev: the device whose bus is being queried
  Return: The current frame number for the USB host controller used
  with the given USB device. This can be used when scheduling
  isochronous requests.
  Note: Different kinds of host controller have different "scheduling
  horizons". While one type might support scheduling only 32 frames
  into the future, others could support scheduling up to 1024 frames
  into the future.
-------------------------------------------------------------------
  __usb_get_extra_descriptor() finds a descriptor of specific type in the
  extra field of the interface and endpoint descriptor structs.
  usb_alloc_coherent - allocate dma-consistent buffer for URB_NO_xxx_DMA_MAP
  @dev: device the buffer will be used with
  @size: requested buffer size
  @mem_flags: affect whether allocation may block
  @dma: used to return DMA address of buffer
  Return: Either null (indicating no buffer could be allocated), or the
  cpu-space pointer to a buffer that may be used to perform DMA to the
  specified device.  Such cpu-space buffers are returned along with the DMA
  address (through the pointer provided).
  Note:
  These buffers are used with URB_NO_xxx_DMA_MAP set in urb->transfer_flags
  to avoid behaviors like using "DMA bounce buffers", or thrashing IOMMU
  hardware during URB completionresubmit.  The implementation varies between
  platforms, depending on details of how DMA will work to this device.
  Using these buffers also eliminates cacheline sharing problems on
  architectures where CPU caches are not DMA-coherent.  On systems without
  bus-snooping caches, these buffers are uncached.
  When the buffer is no longer used, free it with usb_free_coherent().
  usb_free_coherent - free memory allocated with usb_alloc_coherent()
  @dev: device the buffer was used with
  @size: requested buffer size
  @addr: CPU address of buffer
  @dma: DMA address of buffer
  This reclaims an IO buffer, letting it be reused.  The memory must have
  been allocated using usb_alloc_coherent(), and the parameters must match
  those provided in that allocation request.
  Notifications of device and interface registration
  Init
  Cleanup
 This will matter if shutdownreboot does exitcalls. 
 SPDX-License-Identifier: GPL-2.0
  of.c		The helpers for hcd device tree support
  Copyright (C) 2016 Freescale Semiconductor, Inc.
 	Author: Peter Chen <peter.chen@freescale.com>
  Copyright (C) 2017 Johan Hovold <johan@kernel.org>
  usb_of_get_device_node() - get a USB device node
  @hub: hub to which device is connected
  @port1: one-based index of port
  Look up the node of a USB device given its parent hub device and one-based
  port number.
  Return: A pointer to the node with incremented refcount if found, or
  %NULL otherwise.
  usb_of_has_combined_node() - determine whether a device has a combined node
  @udev: USB device
  Determine whether a USB device has a so called combined node which is
  shared with its sole interface. This is the case if and only if the device
  has a node and its descriptors report the following:
 	1) bDeviceClass is 0 or 9, and
 	2) bNumConfigurations is 1, and
 	3) bNumInterfaces is 1.
  Return: True iff the device has a device node and its descriptors match the
  criteria for a combined node.
  usb_of_get_interface_node() - get a USB interface node
  @udev: USB device of interface
  @config: configuration value
  @ifnum: interface number
  Look up the node of a USB interface given its USB device, configuration
  value and interface number.
  Return: A pointer to the node with incremented refcount if found, or
  %NULL otherwise.
 SPDX-License-Identifier: GPL-2.0
  driversusbgeneric.c - generic driver for USB devices (not interfaces)
  (C) Copyright 2005 Greg Kroah-Hartman <gregkh@suse.de>
  based on driversusbusb.c which had the following copyrights:
 	(C) Copyright Linus Torvalds 1999
 	(C) Copyright Johannes Erdfelt 1999-2001
 	(C) Copyright Andreas Gal 1999
 	(C) Copyright Gregory P. Smith 1999
 	(C) Copyright Deti Fliegl 1999 (new USB architecture)
 	(C) Copyright Randy Dunlap 2000
 	(C) Copyright David Brownell 2000-2004
 	(C) Copyright Yggdrasil Computing, Inc. 2000
 		(usb_device_id matching changes by Adam J. Richter)
 	(C) Copyright Greg Kroah-Hartman 2002-2003
  Released under the GPLv2 only.
 It's possible that a config has no interfaces! 
		
		  HP's USB bus-powered keyboard has only one configuration
		  and it claims to be self-powered; other devices may have
		  similar errors in their descriptors.  If the next test
		  were allowed to execute, such configurations would always
		  be rejected and the devices would not work as expected.
		  In the meantime, we run the risk of selecting a config
		  that requires external power at a time when that power
		  isn't available.  It seems to be the lesser of two evils.
		 
		  Bugzilla #6448 reports a device that appears to crash
		  when it receives a GET_DEVICE_STATUS request!  We don't
		  have any other way to tell whether a device is self-powered,
		  but since we don't use that information anywhere but here,
		  the call has been removed.
		 
		  Maybe the GET_DEVICE_STATUS call and the test below can
		  be reinstated when device firmwares become more reliable.
		  Don't hold your breath.
 Rule out self-powered configs for a bus-powered device 
		
		  The next test may not be as effective as it should be.
		  Some hubs have errors in their descriptor, claiming
		  to be self-powered when they are really bus-powered.
		  We will overestimate the amount of current such hubs
		  make available for each port.
		 
		  This is a fairly benign sort of failure.  It won't
		  cause us to reject configurations that we should have
		  accepted.
 Rule out configs that draw too much bus current 
		
		  Select first configuration as default for audio so that
		  devices that don't comply with UAC3 protocol are supported.
		  But, still iterate through other configurations and
		  select UAC3 compliant config if present.
 Always prefer the first found UAC3 config 
 If there is no UAC3 config, prefer the first config 
			 Unconditional continue, because the rest of the code
			  in the loop is irrelevant for audio devices, and
			  because it can reassign best, which for audio devices
			  we don't want.
		 When the first config's first interface is one of Microsoft's
		  pet nonstandard Ethernet-over-USB protocols, ignore it unless
		  this kernel has enabled the necessary host side driver.
		  But: Don't ignore it if it's the only config.
		 From the remaining configs, choose the first one whose
		  first interface is for a non-vendor-specific class.
		  Reason: Linux is more likely to have a class driver
		 If all the remaining configs are vendor-specific,
	
	  If any other driver wants the device, leave the device to this other
	  driver.
	 Choose and set the configuration.  This registers the interfaces
	  with the driver core and lets interface drivers bind to them.
				 This need not be fatal.  The user can try to
 USB device state == configured ... usable 
	 if this is only an unbind, not a physical disconnect, then
	 Normal USB devices suspend through their upstream port.
	  Root hubs don't have upstream ports to suspend,
	  so we have to shut down their downstream HC-to-USB
	  interfaces manually by doing a bus (or "global") suspend.
	
	  Non-root USB2 devices don't need to do anything for FREEZE
	  or PRETHAW. USB3 devices don't support global suspend and
	  needs to be selectively suspended.
	 Normal USB devices resumereset through their upstream port.
	  Root hubs don't have upstream ports to resume or reset,
	  so we have to start up their downstream HC-to-USB
	  interfaces manually by doing a bus (or "global") resume.
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
  USB device quirk handling logic and table
  Copyright (c) 2007 Oliver Neukum
  Copyright (c) 2007 Greg Kroah-Hartman <gregkh@suse.de>
 Each entry consists of VID:PID:flags 
 Collect the flags 
 Ignore unrecognized flag characters 
 Lists of quirky USB devices, split in device quirks and interface quirks.
  Device quirks are applied at the very beginning of the enumeration process,
  right after reading the device descriptor. They can thus only match on device
  information.
  Interface quirks are applied after reading all the configuration descriptors.
  They can match on both device and interface information.
  Note that the DELAY_INIT and HONOR_BNUMINTERFACES quirks do not make sense as
  interface quirks, as they only influence the enumeration process which is run
  before processing the interface quirks.
  Please keep the lists ordered by:
  	1) Vendor ID
  	2) Product ID
  	3) Class ID
 CBM - Flash disk 
 WORLDE Controller KS49 or Prodipe MIDI 49C USB controller 
 WORLDE easy key (easykey.25) MIDI controller  
 HP 53005370C scanner 
 HP v222w 16GB Mini USB Drive 
 Creative SB Audigy 2 NX 
 USB3503 
 Microsoft Wireless Laser Mouse 6000 Receiver 
 Microsoft LifeCam-VX700 v2.0 
 Microsoft Surface Dock Ethernet (RTL8153 GigE) 
 Cherry Stream G230 2.0 (G85-231) and 3.0 (G85-232) 
 Logitech HD Webcam C270 
 Logitech HD Pro Webcams C920, C920-C, C922, C925e and C930e 
 Logitech ConferenceCam CC3000e 
 Logitech PTZ Pro Camera 
 Logitech Screen Share 
 Logitech Quickcam Fusion 
 Logitech Quickcam Orbit MP 
 Logitech Quickcam Pro for Notebook 
 Logitech Quickcam Pro 5000 
 Logitech Quickcam OEM Dell Notebook 
 Logitech Quickcam OEM Cisco VT Camera II 
 Logitech Harmony 700-series 
 Philips PSC805 audio device 
 Plantronic Audio 655 DSP 
 Plantronic Audio 648 USB 
 Artisman Watchdog Dongle 
 Microchip Joss Optical infrared touchboard device 
 CarrolTouch 4000U 
 CarrolTouch 4500U 
 Samsung Android phone modem - ID conflict with SPH-I500 
 Elan Touchscreen 
 Roland SC-8820 
 Edirol SD-20 
 Alcor Micro Corp. Hub 
 appletouch 
 Genesys Logic hub, internally used by KY-688 USB 3.1 Type-C Hub 
 ELSA MicroLink 56K 
 Genesys Logic hub, internally used by Moshi USB to Ethernet Adapter 
 Avision AV600U 
 Saitek Cyborg Gold Joystick 
 Agfa SNAPSCAN 1212U 
 Guillemot Webcam Hercules Dualpix Exchange (2nd ID) 
 Guillemot Webcam Hercules Dualpix Exchange
 Guillemot Hercules DJ Console audio card (BZ 208357) 
 Midiman M-Audio Keystation 88es 
 SanDisk Ultra Fit and Ultra Flair 
 M-Systems Flash Disk Pioneers 
 Baum Vario Ultra 
 Sound Devices USBPre2 
 Sound Devices MixPre-D 
 Keytouch QWERTY Panel keyboard 
 Kingston DataTraveler 3.0 
 X-RiteGretag-Macbeth Eye-One Pro display colorimeter 
 ELMO L-12F document camera 
 Broadcom BCM92035DGROM BT dongle 
 MAYA44USB sound device 
 ASUS Base Station(T100) 
 Realtek hub in Dell WD19 (Type-C) 
 Generic RTL8153 based ethernet adapters 
 SONiX USB DEVICE Touchpad 
 Action Semiconductor flash disk 
 novation SoundControl XL 
 Huawei 4G LTE module 
 SKYMEDI USB_DRIVE 
 Razer - Razer Blade Keyboard 
 Lenovo ThinkCenter A630Z TI024Gen3 usb-audio 
 Lenovo ThinkPad USB-C Dock Gen2 Ethernet (RTL8153 GigE) 
 BUILDWIN Photo Frame 
 Protocol and OTG Electrical Test Device 
 Terminus Technology Inc. Hub 
 Corsair K70 RGB 
 Corsair Strafe 
 Corsair Strafe RGB 
 Corsair K70 LUX RGB 
 Corsair K70 LUX 
 Corsair K70 RGB RAPDIFIRE 
 MIDI keyboard WORLDE MINI 
 Acer C120 LED Projector 
 Blackmagic Design Intensity Shuttle 
 Blackmagic Design UltraStudio SDI 
 Hauppauge HVR-950q 
 Raydium Touchscreen 
 DJI CineSSD 
 INTEL VALUE SSD 
 terminating entry must be last 
 Logitech UVC Cameras 
 terminating entry must be last 
 Lenovo Mouse with Pixart controller 
 Pixart Mouse 
 Logitech Optical Mouse M90M100 
 terminating entry must be last 
  Entries for endpoints that should be ignored when parsing configuration
  descriptors.
  Matched for devices with USB_QUIRK_ENDPOINT_IGNORE.
 The device should be attached directly to root hub 
  Detect any quirks the device has, and do any housekeeping for it if needed.
	
	  Pixart-based mice would trigger remote wakeup issue on AMD
	  Yangtze chipset, so set them as RESET_RESUME flag.
 Hubs are automatically enabled for USB-PERSIST 
 CONFIG_USB_DEFAULT_PERSIST 
 SPDX-License-Identifier: GPL-2.0
  driversusbcorefile.c
  (C) Copyright Linus Torvalds 1999
  (C) Copyright Johannes Erdfelt 1999-2001
  (C) Copyright Andreas Gal 1999
  (C) Copyright Gregory P. Smith 1999
  (C) Copyright Deti Fliegl 1999 (new USB architecture)
  (C) Copyright Randy Dunlap 2000
  (C) Copyright David Brownell 2000-2001 (kernel hotplug, usb_device_id,
 	more docs, etc)
  (C) Copyright Yggdrasil Computing, Inc. 2000
      (usb_device_id matching changes by Adam J. Richter)
  (C) Copyright Greg Kroah-Hartman 2002-2003
  Released under the GPLv2 only.
 Curiouser and curiouser... NULL ->open() as "no device" ? 
 Ok, we cheat as we know we only have one usb_class 
  usb_register_dev - register a USB device, and ask for a minor number
  @intf: pointer to the usb_interface that is being registered
  @class_driver: pointer to the usb_class_driver for this device
  This should be called by all USB drivers that use the USB major number.
  If CONFIG_USB_DYNAMIC_MINORS is enabled, the minor number will be
  dynamically allocated out of the list of available ones.  If it is not
  enabled, the minor number will be based on the next available free minor,
  starting at the class_driver->minor_base.
  This function also creates a usb class device in the sysfs tree.
  usb_deregister_dev() must be called when the driver is done with
  the minor numbers given out by this function.
  Return: -EINVAL if something bad happens with trying to register a
  device, and 0 on success.
	
	  We don't care what the device tries to start at, we want to start
	  at zero to pack the devices into the smallest available space with
	  no holes in the minor range.
 create a usb class device for this usb interface 
  usb_deregister_dev - deregister a USB device's dynamic minor.
  @intf: pointer to the usb_interface that is being deregistered
  @class_driver: pointer to the usb_class_driver for this device
  Used in conjunction with usb_register_dev().  This function is called
  when the USB driver is finished with the minor numbers gotten from a
  call to usb_register_dev() (usually when the device is disconnected
  from the system.)
  This function also removes the usb class device from the sysfs tree.
  This should be called by all drivers that use the USB major number.
 SPDX-License-Identifier: GPL-2.0
  message.c - synchronous message handling
  Released under the GPLv2 only.
 for scatterlist macros 
 for usbcore internals 
  Starts urb and waits for completion or timeout. Note that this call
  is NOT interruptible. Many device driver io requests should be
  interruptible and therefore these drivers should implement their
  own interruptible routines.
-------------------------------------------------------------------
 returns status (negative) or length (positive) 
  usb_control_msg - Builds a control urb, sends it off and waits for completion
  @dev: pointer to the usb device to send the message to
  @pipe: endpoint "pipe" to send the message to
  @request: USB message request value
  @requesttype: USB message request type value
  @value: USB message value
  @index: USB message index value
  @data: pointer to the data to send
  @size: length in bytes of the data to send
  @timeout: time in msecs to wait for the message to complete before timing
 	out (if 0 the wait is forever)
  Context: task context, might sleep.
  This function sends a simple control message to a specified endpoint and
  waits for the message to complete, or timeout.
  Don't use this function from within an interrupt context. If you need
  an asynchronous message, or need to send a message from within interrupt
  context, use usb_submit_urb(). If a thread in your driver uses this call,
  make sure your disconnect() method can wait for it to complete. Since you
  don't have a handle on the URB used, you can't cancel the request.
  Return: If successful, the number of bytes transferred. Otherwise, a negative
  error number.
 Linger a bit, prior to the next control message. 
  usb_control_msg_send - Builds a control "send" message, sends it off and waits for completion
  @dev: pointer to the usb device to send the message to
  @endpoint: endpoint to send the message to
  @request: USB message request value
  @requesttype: USB message request type value
  @value: USB message value
  @index: USB message index value
  @driver_data: pointer to the data to send
  @size: length in bytes of the data to send
  @timeout: time in msecs to wait for the message to complete before timing
 	out (if 0 the wait is forever)
  @memflags: the flags for memory allocation for buffers
  Context: !in_interrupt ()
  This function sends a control message to a specified endpoint that is not
  expected to fill in a response (i.e. a "send message") and waits for the
  message to complete, or timeout.
  Do not use this function from within an interrupt context. If you need
  an asynchronous message, or need to send a message from within interrupt
  context, use usb_submit_urb(). If a thread in your driver uses this call,
  make sure your disconnect() method can wait for it to complete. Since you
  don't have a handle on the URB used, you can't cancel the request.
  The data pointer can be made to a reference on the stack, or anywhere else,
  as it will not be modified at all.  This does not have the restriction that
  usb_control_msg() has where the data pointer must be to dynamically allocated
  memory (i.e. memory that can be successfully DMAed to a device).
  Return: If successful, 0 is returned, Otherwise, a negative error number.
  usb_control_msg_recv - Builds a control "receive" message, sends it off and waits for completion
  @dev: pointer to the usb device to send the message to
  @endpoint: endpoint to send the message to
  @request: USB message request value
  @requesttype: USB message request type value
  @value: USB message value
  @index: USB message index value
  @driver_data: pointer to the data to be filled in by the message
  @size: length in bytes of the data to be received
  @timeout: time in msecs to wait for the message to complete before timing
 	out (if 0 the wait is forever)
  @memflags: the flags for memory allocation for buffers
  Context: !in_interrupt ()
  This function sends a control message to a specified endpoint that is
  expected to fill in a response (i.e. a "receive message") and waits for the
  message to complete, or timeout.
  Do not use this function from within an interrupt context. If you need
  an asynchronous message, or need to send a message from within interrupt
  context, use usb_submit_urb(). If a thread in your driver uses this call,
  make sure your disconnect() method can wait for it to complete. Since you
  don't have a handle on the URB used, you can't cancel the request.
  The data pointer can be made to a reference on the stack, or anywhere else
  that can be successfully written to.  This function does not have the
  restriction that usb_control_msg() has where the data pointer must be to
  dynamically allocated memory (i.e. memory that can be successfully DMAed to a
  device).
  The "whole" message must be properly received from the device in order for
  this function to be successful.  If a device returns less than the expected
  amount of data, then the function will fail.  Do not use this for messages
  where a variable amount of data might be returned.
  Return: If successful, 0 is returned, Otherwise, a negative error number.
  usb_interrupt_msg - Builds an interrupt urb, sends it off and waits for completion
  @usb_dev: pointer to the usb device to send the message to
  @pipe: endpoint "pipe" to send the message to
  @data: pointer to the data to send
  @len: length in bytes of the data to send
  @actual_length: pointer to a location to put the actual length transferred
 	in bytes
  @timeout: time in msecs to wait for the message to complete before
 	timing out (if 0 the wait is forever)
  Context: task context, might sleep.
  This function sends a simple interrupt message to a specified endpoint and
  waits for the message to complete, or timeout.
  Don't use this function from within an interrupt context. If you need
  an asynchronous message, or need to send a message from within interrupt
  context, use usb_submit_urb() If a thread in your driver uses this call,
  make sure your disconnect() method can wait for it to complete. Since you
  don't have a handle on the URB used, you can't cancel the request.
  Return:
  If successful, 0. Otherwise a negative error number. The number of actual
  bytes transferred will be stored in the @actual_length parameter.
  usb_bulk_msg - Builds a bulk urb, sends it off and waits for completion
  @usb_dev: pointer to the usb device to send the message to
  @pipe: endpoint "pipe" to send the message to
  @data: pointer to the data to send
  @len: length in bytes of the data to send
  @actual_length: pointer to a location to put the actual length transferred
 	in bytes
  @timeout: time in msecs to wait for the message to complete before
 	timing out (if 0 the wait is forever)
  Context: task context, might sleep.
  This function sends a simple bulk message to a specified endpoint
  and waits for the message to complete, or timeout.
  Don't use this function from within an interrupt context. If you need
  an asynchronous message, or need to send a message from within interrupt
  context, use usb_submit_urb() If a thread in your driver uses this call,
  make sure your disconnect() method can wait for it to complete. Since you
  don't have a handle on the URB used, you can't cancel the request.
  Because there is no usb_interrupt_msg() and no USBDEVFS_INTERRUPT ioctl,
  users are forced to abuse this routine by using it to submit URBs for
  interrupt endpoints.  We will take the liberty of creating an interrupt URB
  (with the default interval) if the target is an interrupt endpoint.
  Return:
  If successful, 0. Otherwise a negative error number. The number of actual
  bytes transferred will be stored in the @actual_length parameter.
-------------------------------------------------------------------
	 In 2.5 we require hcds' endpoint queues not to progress after fault
	  reports, until the completion callback (this!) returns.  That lets
	  device driver code (like this routine) unlink queued urbs first,
	  if it needs to, since the HC won't work on them at all.  So it's
	  not possible for page N+1 to overwrite page N, and so on.
	 
	  That's only for "hard" faults; "soft" faults (unlinks) sometimes
	  complete before the HCD can get requests away from hardware,
	  though never during cleanup after a hard fault.
 BUG (); 
		 the previous urbs, and this one, completed already.
		  unlink pending urbs so they won't rxtx bad data.
		  careful: unlink can sometimes be synchronous...
 on the last completion, signal usb_sg_wait() 
  usb_sg_init - initializes scatterlist-based bulkinterrupt IO request
  @io: request block being initialized.  until usb_sg_wait() returns,
 	treat this as a pointer to an opaque block of memory,
  @dev: the usb device that will send or receive the data
  @pipe: endpoint "pipe" used to transfer the data
  @period: polling rate for interrupt endpoints, in frames or
  	(for high speed endpoints) microframes; ignored for bulk
  @sg: scatterlist entries
  @nents: how many entries in the scatterlist
  @length: how many bytes to send from the scatterlist, or zero to
  	send every byte identified in the list.
  @mem_flags: SLAB_ flags affecting memory allocations in this call
  This initializes a scattergather request, allocating resources such as
  IO mappings and urb memory (except maybe memory used by USB controller
  drivers).
  The request must be issued using usb_sg_wait(), which waits for the IO to
  complete (or to be canceled) and then cleans up all resources allocated by
  usb_sg_init().
  The request may be canceled with usb_sg_cancel(), either before or after
  usb_sg_wait() is called.
  Return: Zero for success, else a negative errno value.
 initialize all the urbs we'll use 
 There is no single transfer buffer 
 A length of zero means transfer the whole sg list 
			
			  Some systems can't use DMA; they use PIO instead.
			  For their sakes, transfer_buffer is set whenever
			  possible.
 transaction state 
  usb_sg_wait - synchronously execute scattergather request
  @io: request block handle, as initialized with usb_sg_init().
  	some fields become accessible when this call returns.
  Context: task context, might sleep.
  This function blocks until the specified IO operation completes.  It
  leverages the grouping of the related IO requests to get good transfer
  rates, by queueing the requests.  At higher speeds, such queuing can
  significantly improve USB throughput.
  There are three kinds of completion for this function.
  (1) success, where io->status is zero.  The number of io->bytes
      transferred is as requested.
  (2) error, where io->status is a negative errno value.  The number
      of io->bytes transferred before the error is usually less
      than requested, and can be nonzero.
  (3) cancellation, a type of error with status -ECONNRESET that
      is initiated by usb_sg_cancel().
  When this function returns, all memory allocated through usb_sg_init() or
  this call will have been freed.  The request block parameter may still be
  passed to usb_sg_cancel(), or it may be freed.  It could also be
  reinitialized and then reused.
  Data Transfer Rates:
  Bulk transfers are valid for full or high speed endpoints.
  The best full speed data rate is 19 packets of 64 bytes each
  per frame, or 1216 bytes per millisecond.
  The best high speed data rate is 13 packets of 512 bytes each
  per microframe, or 52 KBytes per millisecond.
  The reason to use interrupt transfers through this API would most likely
  be to reserve high speed bandwidth, where up to 24 KBytes per millisecond
  could be transferred.  That capability is less useful for low or full
  speed interrupt endpoints, which allow at most one packet per millisecond,
  of at most 8 or 64 bytes (respectively).
  It is not necessary to call this function to reserve bandwidth for devices
  under an xHCI host controller, as the bandwidth is reserved when the
  configuration or interface alt setting is selected.
 queue the urbs.  
 maybe we retrying will recover 
 hc didn't queue this one 
			 no error? continue immediately.
			 
			  NOTE: to work better with UHCI (4K IO buffer may
			  need 3K of TDs) it may be good to limit how many
			  URBs are queued at once; N milliseconds?
 fail any uncompleted urbs 
	 OK, yes, this could be packaged as non-blocking.
	  So could the submit loop above ... but it's easier to
	  solve neither problem than to solve both!
  usb_sg_cancel - stop scattergather io issued by usb_sg_wait()
  @io: request block, initialized with usb_sg_init()
  This stops a request after it has been started by usb_sg_wait().
  It can also prevents one initialized by usb_sg_init() from starting,
  so that call just frees resources allocated to the request.
 shut everything down 
 Keep the request alive until we're done 
-------------------------------------------------------------------
  usb_get_descriptor - issues a generic GET_DESCRIPTOR request
  @dev: the device whose descriptor is being retrieved
  @type: the descriptor type (USB_DT_)
  @index: the number of the descriptor
  @buf: where to put the descriptor
  @size: how big is "buf"?
  Context: task context, might sleep.
  Gets a USB descriptor.  Convenience functions exist to simplify
  getting some types of descriptors.  Use
  usb_get_string() or usb_string() for USB_DT_STRING.
  Device (USB_DT_DEVICE) and configuration descriptors (USB_DT_CONFIG)
  are part of the device structure.
  In addition to a number of USB-standard descriptors, some
  devices also use class-specific or vendor-specific descriptors.
  This call is synchronous, and may not be used in an interrupt context.
  Return: The number of bytes received on success, or else the status code
  returned by the underlying usb_control_msg() call.
 No point in asking for no data 
 Make sure we parse really received data 
 retry on length 0 or error; some devices are flakey 
  usb_get_string - gets a string descriptor
  @dev: the device whose string descriptor is being retrieved
  @langid: code for language chosen (from string descriptor zero)
  @index: the number of the descriptor
  @buf: where to put the string
  @size: how big is "buf"?
  Context: task context, might sleep.
  Retrieves a string, encoded using UTF-16LE (Unicode, 16 bits per character,
  in little-endian byte order).
  The usb_string() function will often be a convenient way to turn
  these strings into kernel-printable form.
  Strings may be referenced in device, configuration, interface, or other
  descriptors, and could also be used in vendor-specific ways.
  This call is synchronous, and may not be used in an interrupt context.
  Return: The number of bytes received on success, or else the status code
  returned by the underlying usb_control_msg() call.
 No point in asking for no data 
 retry on length 0 or stall; some devices are flakey 
	 Try to read the string descriptor by asking for the maximum
	 If that failed try to read the descriptor length, then
 There might be extra junk at the end of the descriptor 
 force a multiple of two 
	 If the string was reported but is malformed, default to english
	 In case of all other errors, we assume the device is not able to
	  deal with strings at all. Set string_langid to -1 in order to
 always use the first langid listed 
  usb_string - returns UTF-8 version of a string descriptor
  @dev: the device whose string descriptor is being retrieved
  @index: the number of the descriptor
  @buf: where to put the string
  @size: how big is "buf"?
  Context: task context, might sleep.
  This converts the UTF-16LE encoded strings returned by devices, from
  usb_get_string_descriptor(), to null-terminated UTF-8 encoded ones
  that are more usable in most kernel contexts.  Note that this function
  chooses strings in the first language supported by the device.
  This call is synchronous, and may not be used in an interrupt context.
  Return: length of the string (>= 0) or usb_control_msg status (< 0).
 leave room for trailing NULL char in output buffer 
 one UTF-8-encoded 16-bit character has at most three bytes 
  usb_cache_string - read a string descriptor and cache it for later use
  @udev: the device whose string descriptor is being read
  @index: the descriptor index
  Return: A pointer to a kmalloc'ed buffer containing the descriptor string,
  or %NULL if the index is 0 or the string could not be read.
  usb_get_device_descriptor - (re)reads the device descriptor (usbcore)
  @dev: the device whose device descriptor is being updated
  @size: how much of the descriptor to read
  Context: task context, might sleep.
  Updates the copy of the device descriptor stored in the device structure,
  which dedicates space for this purpose.
  Not exported, only for use by the core.  If drivers really want to read
  the device descriptor directly, they can call usb_get_descriptor() with
  type = USB_DT_DEVICE and index = 0.
  This call is synchronous, and may not be used in an interrupt context.
  Return: The number of bytes received on success, or else the status code
  returned by the underlying usb_control_msg() call.
  usb_set_isoch_delay - informs the device of the packet transmit delay
  @dev: the device whose delay is to be informed
  Context: task context, might sleep
  Since this is an optional request, we don't bother if it fails.
 skip hub devices 
 skip non-SSnon-SSP devices 
  usb_get_status - issues a GET_STATUS call
  @dev: the device whose status is being checked
  @recip: USB_RECIP_; for device, interface, or endpoint
  @type: USB_STATUS_TYPE_; for standard or PTM status types
  @target: zero (for device), else interface or endpoint number
  @data: pointer to two bytes of bitmap data
  Context: task context, might sleep.
  Returns device, interface, or endpoint status.  Normally only of
  interest to see if the device is self powered, or has enabled the
  remote wakeup facility; or whether a bulk or interrupt endpoint
  is halted ("stalled").
  Bits in these status bitmaps are set using the SET_FEATURE request,
  and cleared using the CLEAR_FEATURE request.  The usb_clear_halt()
  function should be used to clear halt ("stall") status.
  This call is synchronous, and may not be used in an interrupt context.
  Returns 0 and the status value in @data (in host byte order) on success,
  or else the status code from the underlying usb_control_msg() call.
  usb_clear_halt - tells device to clear endpoint haltstall condition
  @dev: device whose endpoint is halted
  @pipe: endpoint "pipe" being cleared
  Context: task context, might sleep.
  This is used to clear halt conditions for bulk and interrupt endpoints,
  as reported by URB completion status.  Endpoints that are halted are
  sometimes referred to as being "stalled".  Such endpoints are unable
  to transmit or receive data until the halt status is cleared.  Any URBs
  queued for such an endpoint should normally be unlinked by the driver
  before clearing the halt condition, as described in sections 5.7.5
  and 5.8.5 of the USB 2.0 spec.
  Note that control and isochronous endpoints don't halt, although control
  endpoints report "protocol stall" (for unsupported requests) using the
  same status code used to report a true stall.
  This call is synchronous, and may not be used in an interrupt context.
  Return: Zero on success, or else the status code returned by the
  underlying usb_control_msg() call.
	 we don't care if it wasn't halted first. in fact some devices
	  (like some ibmcam model 1 units) seem to expect hosts to make
	  this request for iso endpoints, which can't halt!
 don't un-halt or force to DATA0 except on success 
	 NOTE:  seems like Microsoft and Apple don't bother verifying
	  the clear "took", so some devices could lock up if you check...
	  such as the Hagiwara FlashGate DUAL.  So we won't bother.
	 
	  NOTE:  make sure the logic here doesn't diverge much from
	  the copy in usb-storage, for as long as we need two copies.
  usb_disable_endpoint -- Disable an endpoint by address
  @dev: the device whose endpoint is being disabled
  @epaddr: the endpoint's address.  Endpoint number for output,
 	endpoint number + USB_DIR_IN for input
  @reset_hardware: flag to erase any endpoint state stored in the
 	controller hardware
  Disables the endpoint for URB submission and nukes all pending URBs.
  If @reset_hardware is set then also deallocates hcdhardware state
  for the endpoint.
  usb_reset_endpoint - Reset an endpoint's state.
  @dev: the device whose endpoint is to be reset
  @epaddr: the endpoint's address.  Endpoint number for output,
 	endpoint number + USB_DIR_IN for input
  Resets any host-side endpoint state such as the toggle bit,
  sequence number or current window.
  usb_disable_interface -- Disable all endpoints for an interface
  @dev: the device whose interface is being disabled
  @intf: pointer to the interface descriptor
  @reset_hardware: flag to erase any endpoint state stored in the
 	controller hardware
  Disables all the endpoints for the interface's current altsetting.
  usb_disable_device_endpoints -- Disable all endpoints for a device
  @dev: the device whose endpoints are being disabled
  @skip_ep0: 0 to disable endpoint 0, 1 to skip it.
 First pass: Cancel URBs, leave endpoint pointers intact. 
 Remove endpoints from the host controller internal state 
 Second pass: remove endpoint pointers 
  usb_disable_device - Disable all the endpoints for a USB device
  @dev: the device whose endpoints are being disabled
  @skip_ep0: 0 to disable endpoint 0, 1 to skip it.
  Disables all the device's endpoints, potentially including endpoint 0.
  Deallocates hcdhardware state for the endpoints (nuking all or most
  pending urbs) and usbcore state for the interfaces, so that usbcore
  must usb_set_configuration() before any interfaces could be used.
	 getting rid of interfaces will disconnect
	  any drivers bound to them (a key side effect)
		
		  FIXME: In order to avoid self-deadlock involving the
		  bandwidth_mutex, we have to mark all the interfaces
		  before unregistering any of them.
 remove this interface if it has been registered 
		 Now that the interfaces are unbound, nobody should
		  try to access them.
  usb_enable_endpoint - Enable an endpoint for USB communications
  @dev: the device whose interface is being enabled
  @ep: the endpoint
  @reset_ep: flag to reset the endpoint state
  Resets the endpoint state if asked, and sets dev->ep_{in,out} pointers.
  For control endpoints, both the input and output sides are handled.
  usb_enable_interface - Enable all the endpoints for an interface
  @dev: the device whose interface is being enabled
  @intf: pointer to the interface descriptor
  @reset_eps: flag to reset the endpoints' state
  Enables all the endpoints for the interface's current altsetting.
  usb_set_interface - Makes a particular alternate setting be current
  @dev: the device whose interface is being updated
  @interface: the interface being updated
  @alternate: the setting being chosen.
  Context: task context, might sleep.
  This is used to enable data transfers on interfaces that may not
  be enabled by default.  Not all devices support such configurability.
  Only the driver bound to an interface may change its setting.
  Within any given configuration, each interface may have several
  alternative settings.  These are often used to control levels of
  bandwidth consumption.  For example, the default setting for a high
  speed interrupt endpoint may not send more than 64 bytes per microframe,
  while interrupt transfers of up to 3KBytes per microframe are legal.
  Also, isochronous endpoints may never be part of an
  interface's default setting.  To access such bandwidth, alternate
  interface settings must be made current.
  Note that in the Linux USB subsystem, bandwidth associated with
  an endpoint in a given alternate setting is not reserved until an URB
  is submitted that needs that bandwidth.  Some other operating systems
  allocate bandwidth early, when a configuration is chosen.
  xHCI reserves bandwidth and configures the alternate setting in
  usb_hcd_alloc_bandwidth(). If it fails the original interface altsetting
  may be disabled. Drivers cannot rely on any particular alternate
  setting being in effect after a failure.
  This call is synchronous, and may not be used in an interrupt context.
  Also, drivers must not change altsettings while urbs are scheduled for
  endpoints in that interface; all such urbs must first be completed
  (perhaps forced by unlinking).
  Return: Zero on success, or else the status code returned by the
  underlying usb_control_msg() call.
	
	  usb3 hosts configure the interface in usb_hcd_alloc_bandwidth,
	  including freeing dropped endpoint ring buffers.
	  Make sure the interface endpoints are flushed before that
	 Make sure we have enough bandwidth for this alternate interface.
	  Remove the current alt setting and add the new alt setting.
	 Disable LPM, and re-enable it once the new alt setting is installed,
	  so that the xHCI driver can recalculate the U1U2 timeouts.
 Changing alt-setting also frees any allocated streams 
	 9.4.10 says devices don't need this and are free to STALL the
	  request if the interface only has one alternate setting.
 Re-instate the old alt setting 
	 FIXME drivers shouldn't need to replicatebugfix the logic here
	  when they implement async or easily-killable versions of this or
	  other "should-be-internal" functions (like clear_halt).
	  should hcd+usbcore postprocess control requests?
 prevent submissions using previous endpoint settings 
 Now that the interface is installed, re-enable LPM. 
	 If the interface only has one altsetting and the device didn't
	  accept the request, we attempt to carry out the equivalent action
	  by manually clearing the HALT feature for each endpoint in the
	  new altsetting.
	 9.1.1.5: reset toggles for all endpoints in the new altsetting
	 
	  Note:
	  Despite EP0 is always present in all interfacesAS, the list of
	  endpoints from the descriptor does not contain EP0. Due to its
	  omnipresence one might expect EP0 being considered "affected" by
	  any SetInterface request and hence assume toggles need to be reset.
	  However, EP0 toggles are re-synced for every individual transfer
	  during the SETUP stage - hence EP0 toggles are "don't care" here.
	  (Likewise, EP0 never "halts" on well designed devices.)
  usb_reset_configuration - lightweight device reset
  @dev: the device whose configuration is being reset
  This issues a standard SET_CONFIGURATION request to the device using
  the current configuration.  The effect is to reset most USB-related
  state in the device, including interface altsettings (reset to zero),
  endpoint halts (cleared), and endpoint state (only for bulk and interrupt
  endpoints).  Other usbcore state is unchanged, including bindings of
  usb device drivers to interfaces.
  Because this affects multiple interfaces, avoid using this with composite
  (multi-interface) devices.  Instead, the driver for each interface may
  use usb_set_interface() on the interfaces it claims.  Be careful though;
  some devices don't support the SET_INTERFACE request, and others won't
  reset all the interface state (notably endpoint state).  Resetting the whole
  configuration would affect other drivers' interfaces.
  The caller must own the device lock.
  Return: Zero on success, else a negative error code.
  If this routine fails the device will probably be in an unusable state
  with endpoints disabled, and interfaces only partially enabled.
	 caller must have locked the device and must own
	  the usb bus readlock (so driver bindings are stable);
	  calls during probe() are fine
 skip ep0
	 Disable LPM, and re-enable it once the configuration is reset, so
	  that the xHCI driver can recalculate the U1U2 timeouts.
 xHCI adds all endpoints in usb_hcd_alloc_bandwidth 
 re-init hchcd interfaceendpoint state 
		 No altsetting 0?  We'll assume the first altsetting.
		  We could use a GetInterface call, but if a device is
		  so non-compliant that it doesn't have altsetting 0
		  then I wouldn't trust its reply anyway.
 Now that the interfaces are installed, re-enable LPM. 
  usb_deauthorize_interface - deauthorize an USB interface
  @intf: USB interface structure
  usb_authorize_interface - authorize an USB interface
  @intf: USB interface structure
 authorize interface 
  Internal function to queue a device reset
  See usb_queue_reset_device() for more details
 Undo _get_ in usb_queue_reset_device() 
  usb_set_configuration - Makes a particular device setting be current
  @dev: the device whose configuration is being updated
  @configuration: the configuration being chosen.
  Context: task context, might sleep. Caller holds device lock.
  This is used to enable non-default device modes.  Not all devices
  use this kind of configurability; many devices only have one
  configuration.
  @configuration is the value of the configuration to be installed.
  According to the USB spec (e.g. section 9.1.1.5), configuration values
  must be non-zero; a value of zero indicates that the device in
  unconfigured.  However some devices erroneously use 0 as one of their
  configuration values.  To help manage such devices, this routine will
  accept @configuration = -1 as indicating the device should be put in
  an unconfigured state.
  USB device configurations may affect Linux interoperability,
  power consumption and the functionality available.  For example,
  the default configuration is limited to using 100mA of bus power,
  so that when certain device functionality requires more power,
  and the device is bus powered, that functionality should be in some
  non-default device configuration.  Other device modes may also be
  reflected as configuration options, such as whether two ISDN
  channels are available independently; and choosing between open
  standard device protocols (like CDC) or proprietary ones.
  Note that a non-authorized device (dev->authorized == 0) will only
  be put in unconfigured mode.
  Note that USB has an additional level of device configurability,
  associated with interfaces.  That configurability is accessed using
  usb_set_interface().
  This call is synchronous. The calling context must be able to sleep,
  must own the device lock, and must not hold the driver model's USB
  bus mutex; usb interface driver probe() methods cannot use this routine.
  Returns zero on success, or else the status code returned by the
  underlying call that failed.  On successful completion, each interface
  in the original device configuration has been destroyed, and each one
  in the new configuration has been probed by all relevant usb device
  drivers currently known to the kernel.
	 The USB spec says configuration 0 means unconfigured.
	  But if a device includes a configuration numbered 0,
	  we will accept it as a correctly configured state.
	  Use -1 if you really want to unconfigure the device.
	 Allocate memory for new interfaces before doing anything else,
 Wake up the device so we can send it the Set-Config request 
	 if it's already configured, clear out old state first.
	  getting rid of old interfaces means unbinding their drivers.
 Skip ep0 
 Get rid of pending async Set-Config requests for this device 
	 Make sure we have bandwidth (and available HCD resources) for this
	  configuration.  Remove endpoints from the schedule if we're dropping
	  this configuration to set configuration 0.  After this point, the
	  host controller will not allow submissions to dropped endpoints.  If
	  this call fails, the device state is unchanged.
	 Disable LPM, and re-enable it once the new configuration is
	  installed, so that the xHCI driver can recalculate the U1U2
	  timeouts.
	
	  Initialize the new interface structures and the
	  hchcdusbcore interfaceendpoint state.
		 No altsetting 0?  We'll assume the first altsetting.
		  We could use a GetInterface call, but if a device is
		  so non-compliant that it doesn't have altsetting 0
		  then I wouldn't trust its reply anyway.
		
		  All the old state is gone, so what else can we do?
		  The device is probably useless now anyway.
 Leave LPM disabled while the device is unconfigured. 
 Now that the interfaces are installed, re-enable LPM. 
 Enable LTM if it was turned off by usb_disable_device. 
	 Now that all the interfaces are set up, register them
	  to trigger binding of drivers to interfaces.  probe()
	  routines may install different altsettings and may
	  claim() any interfaces not yet bound.  Many class drivers
	  need that: CDC, audio, video, etc.
 Worker routine for usb_driver_set_configuration() 
 Is req still valid? 
 Cancel pending Set-Config requests for a device whose configuration
  was just changed
 Mark as cancelled 
  usb_driver_set_configuration - Provide a way for drivers to change device configurations
  @udev: the device whose configuration is being updated
  @config: the configuration being chosen.
  Context: In process context, must be able to sleep
  Device interface drivers are not allowed to change device configurations.
  This is because changing configurations will destroy the interface the
  driver is bound to and create new ones; it would be like a floppy-disk
  driver telling the computer to replace the floppy-disk drive with a
  tape drive!
  Still, in certain specialized circumstances the need may arise.  This
  routine gets around the normal restrictions by using a work thread to
  submit the change-config request.
  Return: 0 if the request was successfully queued, error code otherwise.
  The caller has no way to know whether the queued request will eventually
  succeed.
  cdc_parse_cdc_header - parse the extra headers present in CDC devices
  @hdr: the place to put the results of the parsing
  @intf: the interface for which parsing is requested
  @buffer: pointer to the extra headers to be parsed
  @buflen: length of the extra headers
  This evaluates the extra headers present in CDC devices which
  bind the interfaces for data and control and provide details
  about the capabilities of the device.
  Return: number of descriptors parsed or -EINVAL
  if the header is contradictory beyond salvage
 duplicates are ignored 
 duplicates are not tolerated 
 we've found it 
			
			  there are LOTS more CDC descriptors that
			  could legitimately be found here.
 SPDX-License-Identifier: GPL-2.0
  Released under the GPLv2 only.
 Hard limit 
 Arbitrary limit 
 Find the next descriptor of type dt1 or dt2 
	 Store the number of descriptors skipped and return the
	
	  The SuperSpeedPlus Isoc endpoint companion descriptor immediately
	  follows the SuperSpeed Endpoint Companion descriptor
	 The SuperSpeed endpoint companion descriptor is supposed to
	  be the first thing immediately following the endpoint descriptor.
		 Fill in some default values.
		  Leave bmAttributes as zero, which will mean no streams for
		  bulk, and isoc won't support multiple bursts of packets.
		  With bursts of only one packet, and a Mult of 1, the max
		  amount of data moved per endpoint service interval is one
		  packet.
 Check the various values 
 Parse a possible SuperSpeedPlus isoc ep companion descriptor 
 Bulk should be 512, but some devices use 1024: we will warn below 
  Check for duplicate endpoint addresses in other interfaces and in the
  altsetting currently being parsed.
 Only store as many endpoints as we have room for 
 Check for duplicate endpoint addresses 
 Ignore some endpoints 
	
	  Fix up bInterval values outside the legal range.
	  Use 10 or 8 ms if no proper value can be guessed.
 i = min, j = max, n = default 
			
			  Many device manufacturers are using full-speed
			  bInterval values in high-speed interrupt endpoint
			  descriptors. Try to fix those and fall back to an
			  8-ms default value otherwise.
 8 ms = 2^(7-1) uframes 
			
			  Adjust bInterval for quirked devices.
			
			  This quirk fixes bIntervals reported in ms.
			
			  This quirk fixes bIntervals reported in
			  linear microframes.
 USB_SPEED_FULL or _LOW 
			
			  For low-speed, 10 ms is the official minimum.
			  But some "overclocked" devices might want faster
			  polling so we'll allow it.
 8 ms = 2^(7-1) uframes 
 USB_SPEED_FULL 
 8 ms = 2^(4-1) frames 
	 Some buggy low-speed devices have Bulk endpoints, which is
	  explicitly forbidden by the USB spec.  In an attempt to make
	  them usable, we will try treating them as Interrupt endpoints.
	
	  Validate the wMaxPacketSize field.
	  Some devices have isochronous endpoints in altsetting 0;
	  the USB-2 spec requires such endpoints to have wMaxPacketSize = 0
	  (see the end of section 5.6.3), so don't warn about them.
 Find the highest legal maxpacket size for this endpoint 
 additional transactions per microframe 
 Bits 12..11 are allowed only for HS periodic endpoints 
	
	  Some buggy high speed devices have bulk endpoints using
	  maxpacket sizes other than 512.  High speed HCDs may not
	  be able to handle that particular bug, so let's warn...
 Parse a possible SuperSpeed endpoint companion descriptor 
	 Skip over any Class Specific or Vendor Specific descriptors;
 Which interface entry is this? 
 Check for duplicate altsetting entries 
	 Skip over any Class Specific or Vendor Specific descriptors;
 Allocate space for the right(?) number of endpoints 
 Use as a counter 
 Can't allocate 0 bytes 
 Parse all the endpoint descriptors 
 Adjusted later
	 Go through the descriptors, checking their length and counting the
			 Have we already encountered this interface?
 for ((buffer2 = buffer, size2 = size); ...) 
 Check for missing interface numbers 
 Allocate the usb_interface_caches and altsetting arrays 
 FIXME: parse the BOS descriptor 
	 Skip over any Class Specific or Vendor Specific descriptors;
 Parse all the interfacealtsetting descriptors 
 Check for missing altsettings 
 hub-only!! ... and only exported for resetreinit path.
  otherwise used internally on disconnectdestroy path
  Get the USB config descriptors, cache and parse'em
  hub-only!! ... and only in reset path, or usb_new_device()
  (used by real hubs and virtual root hubs)
		 We grab just the first descriptor so we know how long
 Now that we know the length, get the whole thing 
 Get BOS descriptor set 
 Get BOS descriptor 
 Now let's get the whole BOS descriptor set 
 Wireless USB cap descriptor is handled by wusb 
 SPDX-License-Identifier: GPL-2.0
  USB-ACPI glue code
  Copyright 2012 Red Hat <mjg@redhat.com>
  usb_acpi_power_manageable - check whether usb port has
  acpi power resource.
  @hdev: USB device belonging to the usb hub
  @index: port index based zero
  Return true if the port has acpi power resource and false if no.
  usb_acpi_set_power_state - control usb port's power via acpi power
  resource
  @hdev: USB device belonging to the usb hub
  @index: port index based zero
  @enable: power state expected to be set
  Notice to use usb_acpi_power_manageable() to check whether the usb port
  has acpi power resource before invoking this function.
  Returns 0 on success, else negative errno.
	
	  According to 9.14 in ACPI Spec 6.2. _PLD indicates whether usb port
	  is user visible and _UPC indicates whether it is connectable. If
	  the port was visible and connectable, it could be freely connected
	  and disconnected with USB devices. If no visible and connectable,
	  a usb device is directly hard-wired to the port. If no visible and
	  no connectable, the port would be not used.
  Private to usb-acpi, all the core needs to know is that
  port_dev->location is non-zero when it has been set by the firmware.
 Get the struct usb_device point of port's hub 
	
	  The root hub ports' parent is the root hub. The non-root-hub
	  ports' parent is the parent hub port which the hub is
	  connected to.
 root hub is only child (_ADR=0) under its parent, the HC 
	
	  This is an embedded USB device connected to a port and such
	  devices share port's ACPI companion.
	
	  The USB hierarchy like following:
	 
	  Device (EHC1)
	 	Device (HUBN)
	 		Device (PR01)
	 			Device (PR11)
	 			Device (PR12)
	 				Device (FN12)
	 				Device (FN13)
	 			Device (PR13)
	 			...
	  where HUBN is root hub, and PRNN are USB ports and devices
	  connected to them, and FNNN are individualk functions for
	  connected composite USB devices. PRNN and FNNN may contain
	  _CRS and other methods describing sideband resources for
	  the connected device.
	 
	  On the kernel side both root hub and embedded USB devices are
	  represented as instances of usb_device structure, and ports
	  are represented as usb_port structures, so the whole process
	  is split into 2 parts: finding companions for devices and
	  finding companions for ports.
	 
	  Note that we do not handle individual functions of composite
	  devices yet, for that we would need to assign companions to
	  devices corresponding to USB interfaces.
 SPDX-License-Identifier: GPL-2.0
  driversusbcoresysfs.c
  (C) Copyright 2002 David Brownell
  (C) Copyright 2002,2004 Greg Kroah-Hartman
  (C) Copyright 2002,2004 IBM Corp.
  All of the sysfs file attributes for usb devices and interfaces.
  Released under the GPLv2 only.
 Active configuration fields 
 configuration value is always present, and rw 
 String fields 
 Hubs are always enabled for USB_PERSIST 
		 Hubs are automatically enabled for USB_PERSIST,
		  no point in creating the attribute file.
  If the device is resumed, the last time the device was suspended has
  been pre-subtracted from active_duration.  We add the current time to
  get the duration that the device was actually active.
  If the device is suspended, the active_duration is up-to-date.
 CONFIG_PM 
 Descriptor fields 
 show if the device is authorized (1) or not (0) 
  Authorize a device to be used in the system
  Writing a 0 deauthorizes the device, writing a 1 authorizes it.
 "Safely remove a device" 
 To avoid races, first unconfigure and then remove 
 current configuration's attributes 
 device attributes 
 When modifying this list, be sure to modify dev_string_attrs_are_visible()
  accordingly.
 Binary descriptors 
	 The binary attribute begins with the device descriptor.
	  Following that are the raw descriptor entries for all the
	  configurations (config plus subsidiary descriptors).
 dev descr + max-size raw descriptor 
  Show & store the current value of authorized_default
  interface_authorized_default_show - show default authorization status
  for USB interfaces
  note: interface_authorized_default is the default value
        for initializing the authorized attribute of interfaces
  interface_authorized_default_store - store default authorization status
  for USB interfaces
  note: interface_authorized_default is the default value
        for initializing the authorized attribute of interfaces
 Group all the USB bus attributes 
 we want them in the same directory 
 Interface Association Descriptor fields 
 Interface fields 
 Devices will be autosuspended even when an interface isn't claimed 
  interface_authorized_show - show authorization status of an USB interface
  1 is authorized, 0 is deauthorized
  interface_authorized_store - authorize or deauthorize an USB interface
 This is not a serious error 
 SPDX-License-Identifier: GPL-2.0
  USB hub driver.
  (C) Copyright 1999 Linus Torvalds
  (C) Copyright 1999 Johannes Erdfelt
  (C) Copyright 1999 Gregory P. Smith
  (C) Copyright 2001 Brad Hards (bhards@bigpond.net.au)
  Released under the GPLv2 only.
 ns 
 ns 
 ns 
 Protect struct usb_device->state and ->children members
  Note: Both are also protected by ->dev.sem, except that ->state can
 workqueue to process hub events 
 synchronize hub-port addremove and peering operations 
 cycle leds on hubs that aren't blinking for attention 
  Device SATA8000 FW1.0 from DATAST0R Technology Corp requires about
  10 seconds to send reply for the initial 64-byte descriptor request.
 define initial 64-byte descriptor request timeout in milliseconds 
  As of 2.6.10 we introduce a new USB device initialization scheme which
  closely resembles the way Windows works.  Hopefully it will be compatible
  with a wider range of devices than the old scheme.  However some previously
  working devices may start giving rise to "device not accepting address"
  errors; if that happens the user can try the old scheme by adjusting the
  following module parameters.
  For maximum flexibility there are two boolean parameters to control the
  hub driver's behavior.  On the first initialization attempt, if the
  "old_scheme_first" parameter is set then the old scheme will be used,
  otherwise the new scheme is used.  If that fails and "use_both_schemes"
  is set, then the driver will make another attempt, using the other scheme.
 Mutual exclusion for EHCI CF initialization.  This interferes with
  port reset on some companion controllers.
 Note that hdev or one of its children must be locked! 
 Some devices have trouble with LPM 
	 USB 2.1 (and greater) devices indicate LPM support through
	  their USB 2.0 Extended Capabilities BOS descriptor.
	
	  According to the USB 3.0 spec, all USB 3.0 devices must support LPM.
	  However, there are some that don't, and they set the U1U2 exit
	  latencies to zero.
  Set the Maximum Exit Latency (MEL) for the host to wakup up the path from
  U1U2, send a PING to the device and receive a PING_RESPONSE.
  See USB 3.1 section C.1.5.2
	
	  tMEL1. time to transition path from host to device into U0.
	  MEL for parent already contains the delay up to parent, so only add
	  the exit latency for the last link (pick the slower exit latency),
	  and the hub header decode latency. See USB 3.1 section C 2.2.1
	  Store MEL in nanoseconds
	
	  tMEL2. Time to submit PING packet. Sum of tTPTransmissionDelay for
	  each link + wHubDelay for each hub. Add only for last link.
	  tMEL4, the time for PING_RESPONSE to traverse upstream is similar.
	  Multiply by 2 to include it as well.
	
	  tMEL3, tPingResponse. Time taken by device to generate PING_RESPONSE
	  after receiving PING. Also add 2100ns as stated in USB 3.1 C 1.5.2.4
	  to cover the delay if the PING_RESPONSE is queued behind a Max Packet
	  Size DP.
	  Note these delays should be added only once for the entire path, so
	  add them to the MEL of the device connected to the roothub.
  Set the maximum Device to Host Exit Latency (PEL) for the device to initiate
  a transition from either U1 or U2.
	
	  First, the device sends an LFPS to transition the link between the
	  device and the parent hub into U0.  The exit latency is the bigger of
	  the device exit latency or the hub exit latency.
	
	  When the hub starts to receive the LFPS, there is a slight delay for
	  it to figure out that one of the ports is sending an LFPS.  Then it
	  will forward the LFPS to its upstream link.  The exit latency is the
	  delay, plus the PEL that we calculated for this hub.
	
	  According to figure C-7 in the USB 3.0 spec, the PEL for this device
	  is the greater of the two exit latencies.
  Set the System Exit Latency (SEL) to indicate the total worst-case time from
  when a device initiates a transition to U0, until when it will receive the
  first packet from the host controller.
  Section C.1.5.1 describes the four components to this:
   - t1: device PEL
   - t2: time for the ERDY to make it from the device to the host.
   - t3: a host-specific delay to process the ERDY.
   - t4: time for the packet to make it from the host to the device.
  t3 is specific to both the xHCI host and the platform the host is integrated
  into.  The Intel HW folks have said it's negligible, FIXME if a different
  vendor says otherwise.
 t1 = device PEL 
 How many external hubs are in between the device & the root port. 
 t2 = 2.1us + 250ns  (num_hubs - 1) 
 t4 = 250ns  num_hubs 
	 It doesn't take time to transition the roothub into U0, since it
	  doesn't have an upstream link.
	
	  Appendix C, section C.2.2.2, says that there is a slight delay from
	  when the parent hub notices the downstream port is trying to
	  transition to U0 to when the hub initiates a U0 transition on its
	  upstream port.  The section says the delays are tPort2PortU1EL and
	  tPort2PortU2EL, but it doesn't define what they are.
	 
	  The hub chapter, sections 10.4.2.4 and 10.4.2.5 seem to be talking
	  about the same delays.  Use the maximum delay calculations from those
	  sections.  For U1, it's tHubPort2PortExitLat, which is 1us max.  For
	  U2, it's tHubPort2PortExitLat + U2DevExitLat - U1DevExitLat.  I
	  assume the device exit latencies they are talking about are the hub
	  exit latencies.
	 
	  What do we do if the U2 exit latency is less than the U1 exit
	  latency?  It's possible, although not likely...
 Now that we've got PEL, calculate SEL. 
 USB 2.0 spec Section 11.24.4.5 
 Make sure we have the DeviceRemovable field. 
  USB 2.0 spec Section 11.24.2.1
  USB 2.0 spec Section 11.24.2.2
  USB 2.0 spec Section 11.24.2.13
  USB 2.0 spec Section 11.24.2.7.1.10 and table 11-7
  for info about using port indicators
 30%-50% duty cycle 
 cycle marker 
 blinking green = sw attention 
 blinking amber = hw attention 
 blink greenamber = reserved 
 use a short timeout for hubport status fetches 
  USB 2.0 spec Section 11.24.2.6
  USB 2.0 spec Section 11.24.2.7
  USB 3.1 takes into use the wValue and wLength fields, spec Section 10.16.2.6
	
	  Suppress autosuspend until the event is proceed.
	 
	  Be careful and make sure that the symmetric operation is
	  always called. We are here only when there is no pending
	  work for this hub. Therefore put the interface either when
	  the new work is called or when it is canceled.
 the work has already been scheduled 
  Let the USB core know that a USB 3.0 device has sent a Function Wake Device
  Notification, which indicates it had initiated remote wakeup.
  USB 3.0 hubs do not report the port link state change from U3 to U0 when the
  device initiates resume, so the USB core will not receive notice of the
  resume through the normal hub interrupt URB.
 completion function, fires on port status changes and various faults 
 synchronous unlink 
 async unlink 
 hardware going away 
 presumably an error 
 Cause a hub reset after 10 consecutive errors 
 let hub_wq handle things 
 we got data:  port status changed 
 Something happened, let hub_wq figure it out 
 USB 2.0 spec Section 11.24.2.3 
 Need to clear both directions for control ep 
  enumeration blocks hub_wq for a long time. we use keventd instead, since
  long blocking there is the exception, not the rule.  accordingly, HCDs
  talking to TTs must queue control transfers (not just bulk and iso), so
  both can talk to the same hub concurrently.
 drop lock so HCD can concurrently report other TT errors 
 Tell the HCD, even if the operation failed 
  usb_hub_set_port_power - control hub port's power state
  @hdev: USB device belonging to the usb hub
  @hub: target hub
  @port1: port index
  @set: expected status
  call this function to control port's power via setting or
  clearing the port's PORT_POWER feature.
  Return: 0 if successful. A negative error code otherwise.
  usb_hub_clear_tt_buffer - clear controlbulk TT state in high speed hub
  @urb: an URB associated with the failed or incomplete split transaction
  High speed HCDs use this to tell the hub driver that some split control or
  bulk transaction failed in a way that requires clearing internal state of
  a transaction translator.  This is normally detected (and reported) from
  interrupt context.
  It may not be possible for that hub to handle additional full (or low)
  speed transactions until that state is fully cleared out.
  Return: 0 if successful. A negative error code otherwise.
	 we've got to cope with an arbitrary number of pending TT clears,
	  since each TT has "at least two" buffers that can need it (and
	  there can be many TTs per hub).  even if they're uncommon.
 FIXME recover somehow ... RESET_TT? 
 info that CLEAR_TT_BUFFER needs 
 info for completion callback 
 tell keventd to clear state for this TT 
	 Enable power on each port.  Some hubs have reserved values
	  of LPSM (> 2) in their descriptors, even though they are
	  USB 2.0 hubs.  Some hubs do not implement port-power switching
	  but only emulate it.  In all cases, the ports won't work
	  unless we send these messages to the hub.
  Disable a port and mark a logical connect-change event, so that some
  time later hub_wq will disconnect() any existing usb_device on the port
  and will re-enumerate if there actually is a device attached.
	 FIXME let caller ask to power down the port:
	   - some devices won't enumerate without a VBUS power cycle
	   - SRP saves power that way
	   - ... new call, TBD ...
	  That's easy if this hub can switch power per-port, and
	  hub_wq reactivates the port later (timer, SRP, etc).
	  Powerdown must be optional, because of resetDFU.
  usb_remove_device - disable a device's port on its parent hub
  @udev: device to be disabled and removed
  Context: @udev locked, must be able to sleep.
  After @udev's port has been disabled, hub_wq is notified and it will
  see that the device has been disconnected.  When the device is
  physically unplugged and something is plugged in, the events will
  be received and processed normally.
  Return: 0 if successful. A negative error code otherwise.
 Can't remove a root hub 
 INITs must come first 
 Continue a partial initialization 
 Was the hub disconnected while we were waiting? 
	 The superspeed hub except for root hub has to use Hub Depth
	  value as an offset into the route string to locate the bits
	  it uses to determine the downstream port number. So hub driver
	  should send a set hub depth request to superspeed hub after
	  the superspeed hub is set configuration in initialization or
	  reset procedure.
	 
	  After a resume, port power should still be on.
	  For any other type of activation, turn it on.
		 Speed up system boot by using a delayed_work for the
		  hub's initial power-up delays.  This is pretty awkward
		  and the implementation looks like a home-brewed sort of
		  setjmplongjmp, but it saves at least 100 ms for each
		  root hub (assuming usbcore is compiled into the kernel
		  rather than as a module).  It adds up.
		 
		  This can't be done for HUB_RESUME or HUB_RESET_RESUME
		  because for those activation types the ports have to be
		  operational when we return.  In theory this could be done
		  for HUB_POST_RESET, but it's easier not to.
 Suppress autosuspend until init is done 
 Continues at init2: below 
			 The internal host controller state for the hub device
			  may be gone after a host power loss on system resume.
			  Update the device's info so the HW knows it's a hub.
	
	  Check each port and set hub->change_bits to let hub_wq know
	  which ports need attention.
		
		  After anything other than HUB_RESUME (i.e., initialization
		  or any sort of reset), every port should be disabled.
		  Unconnected ports should likewise be disabled (paranoia),
		  and so should ports for which we have no usb_device.
			
			  USB3 protocol ports will automatically transition
			  to Enabled state when detect an USB3.0 device attach.
			  Do not disable USB3 protocol ports, just pretend
			  power was lost
 Make sure a warm-reset request is handled by port_event 
		
		  Add debounce if USB3 link is in pollinglink training state.
		  Link will automatically transition to Enabled state after
		  link training completes.
 Clear status-change flags; we'll debounce later 
		 We can forget about a "removed" device when there's a
		  physical disconnect or the connect status changes.
			 Tell hub_wq to disconnect the device or
			  check for a new connection or over current condition.
			  Based on USB2.0 Spec Section 11.12.5,
			  C_PORT_OVER_CURRENT could be set while
			  PORT_OVER_CURRENT is not. So check for any of them.
			 The power session apparently survived the resume.
			  If there was an overcurrent or suspend change
			  (i.e., remote wakeup request), have hub_wq
			  take care of it.  Look at the port link state
			  for USB 3.0 hubs, since they don't have a suspend
			  change bit, and they don't set the port link change
			  bit on device-initiated resume.
			 Don't set the change_bits when the device
			  was powered off.
 The power session is gone; tell hub_wq 
	 If no port-status-change flags were set, we don't need any
	  debouncing.  If flags were set we can try to debounce the
	  ports all at once right now, instead of letting hub_wq do them
	  one at a time later on.
	 
	  If any port-status changes do occur during this delay, hub_wq
	  will see them later and handle them normally.
 Don't do a long sleep inside a workqueue routine 
 Continues at init3: below 
 Scan all ports that need attention 
 Allow autosuspend if it was suppressed 
 Implement the continuations for the delays above 
 hub_wq and related activity won't re-trigger 
 Disconnect all the children 
 Stop hub_wq and related activity 
 caller has locked the hub device 
 caller has locked the hub device 
	 Request the entire hub descriptor.
	  hub->descriptor can handle USB_MAXCHILDREN ports,
	  but a (non-SS) hub canwill return fewer bytes here.
	
	  Accumulate wHubDelay + 40ns for every hub in the tree of devices.
	  The resulting value will be used for SetIsochDelay() request.
 FIXME for USB 3.0, skip for now 
 USB 3.0 hubs don't have a TT 
 Note 8 FS bit times == (8 bits  12000000 bps) ~= 666ns 
 probe() zeroes hub->indicator[] 
	 power budgeting mostly matters with bus-powered hubs,
	  and battery-powered root hubs (may provide just 8 mA).
 7.2.1 
 Self-powered external hub 
		 FIXME: What about battery-powered external hubs that
 local power status reports aren't always correct 
	 set up the interrupt endpoint
	  We use the EP's maxpacket size instead of (PORTS+1+7)8
	  bytes as USB2.0[11.12.3] says because some hubs are known
	  to send more data (and thus cause overflow). For root hubs,
	  maxpktsize is defined in hcd.c's fake endpoint descriptors
 maybe cycle the hub leds 
	 Update the HCD's internal representation of this hub before hub_wq
	  starts getting port status changes for devices under the hub.
 hub_disconnect() frees urb and descriptor 
	
	  Stop adding new hub events. We do not want to block here and thus
	  will not try to remove any pending work item.
 Disconnect all children and quiesce the hub 
 Avoid races with recursively_mark_NOTATTACHED() 
 Some hubs have a subclass of 1, which AFAICT according to the 
  specs is not defined, but it works 
 Multiple endpoints? What kind of mutant ninja-hub is this? 
 If the first endpoint is not interrupt IN, we'd better punt! 
	
	  Set default autosuspend delay as 0 to speedup bus suspend,
	  based on the below considerations:
	 
	  - Unlike other drivers, the hub driver does not rely on the
	    autosuspend delay to provide enough time to handle a wakeup
	    event, and the submitted status URB is just to check future
	    change on hub downstream ports, so it is safe to do it.
	 
	  - The patch might cause one or more auto supendresume for
	    below very rare devices when they are plugged into hub
	    first time:
	 
	    	devices having trouble initializing, and disconnect
	    	themselves from the bus and then reconnect a second
	    	or so later
	 
	    	devices just for downloading firmware, and disconnects
	    	themselves after completing it
	 
	    For these quite rare devices, their drivers may change the
	    autosuspend delay of their parent hub in the probe() to one
	    appropriate value to avoid the subtle problem if someone
	    does care it.
	 
	  - The patch may cause one or more auto suspendresume on
	    hub during running 'lsusb', but it is probably too
	    infrequent to worry about.
	 
	  - Change autosuspend delay of hub can avoid unnecessary auto
	    suspend timer for hub, also may decrease power consumption
	    of USB bus.
	 
	  - If user has indicated to prevent autosuspend by passing
	    usbcore.autosuspend = -1 then keep autosuspend disabled.
	
	  Hubs have proper suspendresume support, except for root hubs
	  where the controller driver doesn't have bus_suspend and
	  bus_resume methods.
 normal device 
 root hub 
 We found a hub 
 assert ifno == 0 (part of hub spec) 
  Allow user programs to claim ports on a hub.  When a device is attached
  to one of these "claimed" ports, the program will "own" the device.
	 Devices not managed by the hub driver
	  will always have maxchild equal to 0.
 In the following three functions, the caller must hold hdev's lock 
 The caller must hold udev's lock 
  usb_set_device_state - change a device's current state (usbcore, hcds)
  @udev: pointer to device whose state should be changed
  @new_state: new state value to be stored
  udev->state is _not_ fully protected by the device lock.  Although
  most transitions are made only while holding the lock, the state can
  can change to USB_STATE_NOTATTACHED at almost any time.  This
  is so that devices can be marked as disconnected as soon as possible,
  without having to wait for any semaphores to be released.  As a result,
  all changes to any device's state must be protected by the
  device_state_lock spinlock.
  Once a device has been added to the device tree, all changes to its state
  should be made using this routine.  The state should _not_ be set directly.
  If udev->state is already USB_STATE_NOTATTACHED then no change is made.
  Otherwise udev->state is set to new_state, and if new_state is
  USB_STATE_NOTATTACHED then all of udev's descendants' states are also set
  to USB_STATE_NOTATTACHED.
 do nothing 
		 root hub wakeup capabilities are managed out-of-band
		  and may involve silicon errata ... ignore them here.
 No change to wakeup settings 
  Choose a device number.
  Device numbers are used as filenames in usbfs.  On USB-1.1 and
  USB-2.0 buses they are also used as device addresses, however on
  USB-3.0 buses the address is assigned by the controller hardware
  and it usually is not the same as the device number.
  WUSB devices are simple: they have no hubs behind, so the mapping
  device <-> virtual port number becomes 1:1. Why? to simplify the
  life of the device connection logic in
  driversusbwusbcoredevconnect.c. When we do the initial secret
  handshake we need to assign a temporary address in the unauthorized
  space. For simplicity we use the first virtual port number found to
  be free [driversusbwusbcoredevconnect.c:wusbhc_devconnect_ack()]
  and that becomes it's address [X < 128] or its unauthorized address
  [X | 0x80].
  We add 1 as an offset to the one-based USB-stack port number
  (zero-based wusb virtual port index) for two reasons: (a) dev addr
  0 is reserved by USB for default address; (b) Linux's USB stack
  uses always #1 for the root hub of the controller. So USB stack's
  port #1, which is wusb virtual-port #0 has address #2.
  Devices connected under xHCI are not as simple.  The host controller
  supports virtualization, so the hardware assigns device addresses and
  the HCD must setup data structures before issuing a set address
  command to the hardware.
 be safe when more hub events are proceed in parallel 
		 Try to allocate the next devnum beginning at
 The address for a WUSB device is managed by wusbcore. 
 Root hubs aren't real devices, so don't free HCD resources 
 Free up all the children before we remove this device 
  usb_disconnect - disconnect a device (usbcore-internal)
  @pdev: pointer to device being disconnected
  Context: task context, might sleep
  Something got disconnected. Get rid of it and all of its children.
  If pdev is a normal device then the parent hub must already be locked.
  If pdev is a root hub then the caller must hold the usb_bus_idr_lock,
  which protects the set of root hubs as well as the list of buses.
  Only hub drivers (including virtual root hub drivers for host
  controllers) should ever call this.
  This call is synchronous, and may not be used in an interrupt context.
	 mark the device as inactive, so any further urb submissions for
	  this device (and any of its children) will fail immediately.
	  this quiesces everything except pending urbs.
	
	  Ensure that the pm runtime code knows that the USB device
	  is in the process of being disconnected.
	 deallocate hcdhardware state ... nuking all pending urbs and
	  cleaning up all state associated with the current configuration
	  so that the hardware is now fully quiesced.
		
		  As usb_port_runtime_resume() de-references udev, make
		  sure no resumes occur during removal
	 Unregister the device.  The device driver is responsible
	  for de-configuring the device and invoking the remove-device
	  notifier chain (used by usbfs and possibly others).
	 Free the device number and delete the parent's children[]
	  (or root_hub) pointer.
 Avoid races with recursively_mark_NOTATTACHED() 
  usb_enumerate_device_otg - FIXME (usbcore-internal)
  @udev: newly addressed device (in ADDRESS state)
  Finish enumeration for On-The-Go devices
  Return: 0 if successful. A negative error code otherwise.
	
	  OTG-aware devices on OTG-capable root hubs may be able to use SRP,
	  to wake us after we've powered off VBUS; and HNP, switching roles
	  "host" to "peripheral".  The OTG descriptor helps figure this out.
 descriptor may appear anywhere in config 
 enable HNP before suspend, it's simpler 
				
				  OTG MESSAGE: report errors here,
				  customize to match your product.
 Set a_alt_hnp_support for legacy otg device 
  usb_enumerate_device - Read device configsintfsotg (usbcore-internal)
  @udev: newly addressed device (in ADDRESS state)
  This is only called by usb_new_device() and usb_authorize_device()
  and FIXME -- all comments that apply to them apply here wrt to
  environment.
  If the device is WUSB and not authorized, we don't attempt to read
  the string descriptors, as they will be errored out by the device
  until it has been authorized.
  Return: 0 if successful. A negative error code otherwise.
 read the standard strings and cache them if present 
		 Maybe it can talk to us, though we can't talk to it.
		  (Includes HNP test device.)
	
	  If the platform firmware has provided information about a port,
	  use that to determine whether it's removable.
	
	  Otherwise, check whether the hub knows whether a port is removable
	  or not
  usb_new_device - perform initial device setup (usbcore-internal)
  @udev: newly addressed device (in ADDRESS state)
  This is called with devices which have been detected but not fully
  enumerated.  The device descriptor is available, but not descriptors
  for any device configuration.  The caller must have locked either
  the parent hub (if udev is a normal device) or else the
  usb_bus_idr_lock (if udev is a root hub).  The parent's pointer to
  udev has already been installed, but udev is not yet visible through
  sysfs or other filesystem code.
  This call is synchronous, and may not be used in an interrupt context.
  Only the hub driver or root-hub registrar should ever call this.
  Return: Whether the device is configured properly or not. Zero if the
  interface was registered with the driver core; else a negative errno
  value.
		 Initialize non-root-hub device wakeup to disabled;
		  device (un)configuration controls wakeup capable
		  sysfs powerwakeup controls wakeup enableddisabled
 Tell the runtime-PM framework the device is active 
	 By default, forbid autosuspend for all devices.  It will be
	  allowed for hubs during binding.
 Read descriptors 
 export the usbdev device-node for libusb 
 Tell the world! 
 check whether the hub or firmware marks this port as non-removable 
	 Register the device.  The device driver is responsible
	  for configuring the device and invoking the add-device
	  notifier chain (used by usbfs and possibly others).
 Create link files between child device and usb port device. 
  usb_deauthorize_device - deauthorize a device (usbcore-internal)
  @usb_dev: USB device
  Move the USB device to a very basic state where interfaces are disabled
  and the device is in fact unconfigured and unusable.
  We share a lock (that we have) with device_del(), so we need to
  defer its call.
  Return: 0.
	 Choose and set the configuration.  This registers the interfaces
	  with the driver core and lets interface drivers bind to them.
			 This need not be fatal.  The user can try to
 complements locktree 
  get_port_ssp_rate - Match the extended port status to SSP rate
  @hdev: The hub device
  @ext_portstatus: extended port status
  Match the extended port status speed id to the SuperSpeed Plus sublink speed
  capability attributes. Base on the number of connected lanes and speed,
  return the corresponding enum usb_ssp_rate.
			
			  Note: currently asymmetric lane types are only
			  applicable for SSIC operate in SuperSpeed protocol
 Convert to Gbps 
 Returns 1 if @hub is a WUSB root hub, 0 otherwise 
 not a root hub? 
 CONFIG_USB_FEW_INIT_RETRIES 
 times are in msec 
	
	  "New scheme" enumeration causes an extra state transition to be
	  exposed to an xhci host and causes USB3 devices to receive control
	  commands in the default state.  This has been seen to cause
	  enumeration failures, so disable this enumeration scheme for USB3
	  devices.
	
	  If use_both_schemes is set, use the first scheme (whichever
	  it is) for the larger half of the retries, then use the other
	  scheme.  Otherwise, use the first scheme for all the retries.
 Second half 
 First half or all 
 Is a USB 3.0 port in the Inactive or Compliance Mode state?
  Port warm reset is required to recover
 wait to give the device a chance to reset 
 read and decode port status 
		
		  The port state is unknown until the reset completes.
		 
		  On top of that, some chips may require additional time
		  to re-establish a connection after the reset is complete,
		  so also wait for the connection to be re-established.
 switch to the long delay after two short delay failures 
 Device went away? 
	 Retry if connect change is set but status is still connected.
	  A USB 3.0 connection may bounce if multiple warm resets were issued,
	  but the device may have successfully re-connected. Ignore it.
 extended portstatus Rx and Tx lane count are zero based 
 Handle port reset and port warm(BH) reset (for USB3 protocol ports) 
		 Block EHCI CF initialization during the port reset.
		  Some companion controllers don't like it when they mix.
		
		  If the caller hasn't explicitly requested a warm reset,
		  double check and see if one is needed.
 Reset the port 
 The hub is gone 
 Check for disconnect or reset 
			
			  If a USB 3.0 device migrates from reset to an error
			  state, re-issue the warm reset.
			
			  If the port is in SS.Inactive or Compliance Mode, the
			  hot or warm reset failed.  Try another warm reset.
 TRSTRCY = 10 ms; plus some extra 
 Hub needs extra delay after resetting its port. 
			 The xHC may think the device is already reset,
			  so ignore the status.
 Check if a port is power on 
 Check if a port is suspended(USB2.0 port) or in U3 state(USB3.0 port) 
 Determine whether the device on a port is ready for a normal resume,
  is ready for a reset-resume, or should be disconnected.
 Is a warm reset needed to recover the connection? 
 pass ;
 Is the device still present? 
	 Can't do a normal resume if the port isn't enabled,
	  so try a reset-resume instead.
 Late port handoff can set status-change bits 
		
		  Whatever made this reset-resume necessary may have
		  turned on the port1 bit in hub->change_bits.  But after
		  a successful reset-resume we want the bit to be clear;
		  if it was on it would indicate that something happened
		  following the reset-resume.
 Check if the roothub and device supports LTM. 
	 Clear Feature LTM Enable can only be sent if the device is
	  configured.
 Check if the roothub and device supports LTM. 
	 Set Feature LTM Enable can only be sent if the device is
	  configured.
  usb_enable_remote_wakeup - enable remote wakeup for a device
  @udev: target device
  For USB-2 devices: Set the device's remote wakeup feature.
  For USB-3 devices: Assume there's only one function on the device and
  enable remote wake for the first interface.  FIXME if the interface
  association descriptor shows there's more than one function.
  usb_disable_remote_wakeup - disable remote wakeup for a device
  @udev: target device
  For USB-2 devices: Clear the device's remote wakeup feature.
  For USB-3 devices: Assume there's only one function on the device and
  disable remote wake for the first interface.  FIXME if the interface
  association descriptor shows there's more than one function.
 Count of wakeup-enabled devices at or below udev 
  usb_port_suspend - suspend a usb device's upstream port
  @udev: device that's no longer in active use, not a root hub
  Context: must be able to sleep; device not locked; pm locks held
  Suspends a USB device that isn't in active use, conserving power.
  Devices may wake out of a suspend, if anything important happens,
  using the remote wakeup mechanism.  They may also be taken out of
  suspend by the host, using usb_port_resume().  It's also routine
  to disconnect devices while they are suspended.
  This only affects the USB hardware for a device; its interfaces
  (and, for hubs, child devices) must already have been suspended.
  Selective port suspend reduces power; most suspended devices draw
  less than 500 uA.  It's also used in OTG, along with remote wakeup.
  All devices below the suspended port are also suspended.
  Devices leave suspend state when the host wakes them up.  Some devices
  also support "remote wakeup", where the device can activate the USB
  tree above them to deliver data, such as a keypress or packet.  In
  some cases, this wakes the USB host.
  Suspending OTG devices may trigger HNP, if that's been enabled
  between a pair of dual-role devices.  That will change roles, such
  as from A-Host to A-Peripheral or from B-Host back to B-Peripheral.
  Devices on USB hub ports have only one "suspend" state, corresponding
  to ACPI D2, "may cause the device to lose some context".
  State transitions include:
    - suspend, resume ... when the VBUS power link stays live
    - suspend, disconnect ... VBUS lost
  Once VBUS drop breaks the circuit, the port it's using has to go through
  normal re-enumeration procedures, starting with enabling VBUS power.
  Other than re-initializing the hub (plugunplug, except for root hubs),
  Linux (2.6) currently has NO mechanisms to initiate that:  no hub_wq
  timer, no SRP, no requests through sysfs.
  If Runtime PM isn't enabled or used, non-SuperSpeed devices may not get
  suspended until their bus goes into global suspend (i.e., the root
  hub is suspended).  Nevertheless, we change @udev->state to
  USB_STATE_SUSPENDED as this is the device's "logical" state.  The actual
  upstream port setting is stored in @udev->port_is_suspended.
  Returns 0 on success, else negative errno.
	 enable remote wakeup when appropriate; this lets the device
	  wake up the upstream hub (including maybe the root hub).
	 
	  NOTE:  OTG devices may issue remote wakeup (or SRP) even when
	  we don't explicitly enable it here.
 bail if autosuspend is requested 
 disable USB2 hardware LPM 
 see 7.1.7.6 
	
	  For system suspend, we do not need to enable the suspend feature
	  on individual USB-2 ports.  The devices will automatically go
	  into suspend a few ms after the root hub stops sending packets.
	  The USB 2.0 spec calls this "global suspend".
	 
	  However, many USB hubs have a bug: They don't relay wakeup requests
	  from a downstream port if the port's suspend feature isn't on.
	  Therefore we will turn on the suspend feature if udev or any of its
	  descendants is enabled for remote wakeup.
		 Check if the port has been suspended for the timeout case
		  to prevent the suspended port from incorrect handling.
 Try to enable USB3 LTM again 
 Try to enable USB2 hardware LPM again 
 System sleep transitions should never fail 
 device has up to 10 msec to fully suspend 
  If the USB "suspend" state is in use (rather than "global suspend"),
  many devices will be individually taken out of suspend state using
  special "resume" signaling.  This routine kicks in shortly after
  hardware resume signaling is finished, either because of selective
  resume (by host) or remote wakeup (by device) ... now see what changed
  in the tree that's rooted at this device.
  If @udev->reset_resume is set then the device is reset before the
  status check is done.
 caller owns the udev device lock 
	 usb ch9 identifies four variants of SUSPENDED, based on what
	  state the device resumes to.  Linux currently won't see the
	  first two on the host side; they'd be inside hub_port_init()
	  during many timeouts, but hub_wq can't suspend until later.
	 10.5.4.5 says not to reset a suspended port if the attached
	  device is enabled for remote wakeup.  Hence the reset
	  operation is carried out here, after the port has been
	  resumed.
		
		  If the device morphs or switches modes when it is reset,
		  we don't want to perform a reset-resume.  We'll fail the
		  resume, which will cause a logical disconnect, and then
		  the device will be rediscovered.
	 10.5.4.5 says be sure devices in the tree are still there.
	  For now let's assume the device didn't go crazy on resume,
	  and device drivers will know about any resume quirks.
 If a normal resume failed, try doing a reset-resume 
	
	  There are a few quirky devices which violate the standard
	  by claiming to have remote wakeup enabled after a reset,
	  which crash if the feature is cleared, hence check for
	  udev->reset_resume
  There are some SS USB devices which take longer time for link training.
  XHCI specs 4.19.4 says that when Link training is successful, port
  sets CCS bit to 1. So if SW reads port status before successful link
  training, then it will not find device to be present.
  USB Analyzer log with such buggy devices show that in some cases
  device switch on the RX termination after long delay of host enabling
  the VBUS. In few other cases it has been seen that device fails to
  negotiate link training in first attempt. It has been
  reported till now that few devices take as long as 2000 ms to train
  the link after host enabling its VBUS and termination. Following
  routine implements a 2000 ms timeout for link training. If in a case
  link trains before timeout, loop will exit earlier.
  There are also some 2.0 hard drive based devices and 3.0 thumb
  drives that, when plugged into a 2.0 only port, take a long
  time to set CCS after VBUS enable.
  FIXME: If a device was connected before suspend, but was removed
  while system was asleep, then the loop in the following routine will
  only exit at timeout.
  This routine should only be called when persist is enabled.
  usb_port_resume - re-activate a suspended usb device's upstream port
  @udev: device to re-activate, not a root hub
  Context: must be able to sleep; device not locked; pm locks held
  This will re-activate the suspended device, increasing power usage
  while letting drivers communicate again with its endpoints.
  USB resume explicitly guarantees that the power session between
  the host and the device is the same as it was when the device
  suspended.
  If @udev->reset_resume is set then this routine won't check that the
  port is still enabled.  Furthermore, finish_port_resume() above will
  reset @udev.  The end result is that a broken power session can be
  recovered and @udev will appear to persist across a loss of VBUS power.
  For example, if a host controller doesn't maintain VBUS suspend current
  during a system sleep or is reset when the system wakes up, all the USB
  power sessions below it will be broken.  This is especially troublesome
  for mass-storage devices containing mounted filesystems, since the
  device will appear to have disconnected and all the memory mappings
  to it will be lost.  Using the USB_PERSIST facility, the device can be
  made to appear as if it had not disconnected.
  This facility can be dangerous.  Although usb_reset_and_verify_device() makes
  every effort to insure that the same device is present after the
  reset as before, it cannot provide a 100% guarantee.  Furthermore it's
  quite possible for a device to remain unaltered but its media to be
  changed.  If the user replaces a flash memory card while the system is
  asleep, he will have only himself to blame when the filesystem on the
  new card is corrupted and the system crashes.
  Returns 0 on success, else negative errno.
 Skip the initial Clear-Suspend step for a remote wakeup 
 see 7.1.7.7; affects power usage, but not budgeting 
 drive resume for USB_RESUME_TIMEOUT msec 
		 Virtual root hubs can trigger on GET_PORT_STATUS to
		  stop resume signaling.  Then finish the resume
		  sequence.
 TRSMRCY = 10 msec 
 Try to enable USB2 hardware LPM 
 Try to enable USB3 LTM 
 Let the drivers do their thing, then... 
 Returns 1 if there was a remote wakeup and a connect status change. 
 TRSMRCY = 10 msec 
	
	  Warn if children aren't already suspended.
	  Also, add up the number of wakeup-enabled descendants.
 check if there are changes pending on hub ports 
 Enable hub to send remote wakeup for all ports. 
 stop hub_wq and related activity 
 Report wakeup requests from the ports of a resuming root hub 
 Not a root hub 
		
		  The get_resuming_ports() method returns a bitmap (origin 0)
		  of ports which have started wakeup signaling but have not
		  yet finished resuming.  During system resume we will
		  resume all the enabled ports, regardless of any wakeup
		  signals, which means the wakeup requests would be lost.
		  To prevent this, report them to the PM core here.
	
	  This should be called only for system resume, not runtime resume.
	  We can't tell the difference here, so some wakeup requests will be
	  reported at the wrong time or more than once.  This shouldn't
	  matter much, so long as they do get reported.
  usb_root_hub_lost_power - called by HCD if the root hub lost Vbus power
  @rhdev: struct usb_device for the root hub
  The USB host controller driver calls this function when its root hub
  is resumed and Vbus power has been interrupted or the controller
  has been reset.  The routine marks @rhdev as having lost power.
  When the hub driver is resumed it will take notice and carry out
  power-session recovery for all the "USB-PERSIST"-enabled child devices;
  the others will be disconnected.
  Send a Set SEL control transfer to the device, prior to enabling
  device-initiated U1 or U2.  This lets the device know the exit latencies from
  the time the device initiates a U1 or U2 exit, to the time it will receive a
  packet from the host.
  This function will fail if the SEL or PEL values for udev are greater than
  the maximum allowed values for the link state to be enabled.
 Convert SEL and PEL stored in ns to us 
	
	  Make sure that the calculated SEL and PEL values for the link
	  state we're enabling aren't bigger than the max SELPEL
	  value that will fit in the SET SEL control transfer.
	  Otherwise the device would get an incorrect idea of the exit
	  latency for the link state, and could start a device-initiated
	  U1U2 when the exit latencies are too high.
	
	  If we're enabling device-initiated LPM for one link state,
	  but the other link state has a too high SEL or PEL value,
	  just set those values to the max in the Set SEL request.
	
	  usb_enable_lpm() can be called as part of a failed device reset,
	  which may be initiated by an error path of a mass storage driver.
	  Therefore, use GFP_NOIO.
  Enable or disable device-initiated U1 or U2 transitions.
		
		  Now send the control transfer to enable device-initiated LPM
		  for either U1 or U2.
  Don't allow device intiated U1U2 if the system exit latency + one bus
  interval is greater than the minimum service interval of any active
  periodic endpoint. See USB 3.2 section 9.4.9
 us 
  Enable the hub-initiated U1U2 idle timeouts, and enable device-initiated
  U1U2 entry.
  We will attempt to enable U1 or U2, but there are no guarantees that the
  control transfers to set the hub timeout or enable device-initiated U1U2
  will be successful.
  If the control transfer to enable device-initiated U1U2 entry fails, then
  hub-initiated U1U2 will be disabled.
  If we cannot set the parent hub U1U2 timeout, we attempt to let the xHCI
  driver know about it.  If that call fails, it should be harmless, and just
  take up more slightly more bus bandwidth for unnecessary U1U2 exit latency.
	 If the device says it doesn't have any exit latency to come out of
	  U1 or U2, it's probably lying.  Assume it doesn't implement that link
	  state.
	
	  First, let the device know about the exit latencies
	  associated with the link state we're about to enable.
	 We allow the host controller to set the U1U2 timeout internally
	  first, so that it can change its schedule to account for the
	  additional latency to send data to a device in a lower power
	  link state.
 xHCI host controller doesn't want to enable this LPM state. 
		 If we can't set the parent hub U1U2 timeout,
		  device-initiated LPM won't be allowed either, so let the xHCI
		  host know that this link state won't be enabled.
	 Only a configured device will accept the Set Feature
	  U1U2_ENABLE
			
			  Request to enable device initiated U1U2 failed,
			  better to turn off lpm in this case.
  Disable the hub-initiated U1U2 idle timeouts, and disable device-initiated
  U1U2 entry.
  If this function returns -EBUSY, the parent hub will still allow U1U2 entry.
  If zero is returned, the parent will not allow the link to go into U1U2.
  If zero is returned, device-initiated U1U2 entry may still be enabled, but
  it won't have an effect on the bus link state because the parent hub will
  still disallow device-initiated U1U2 entry.
  If zero is returned, the xHCI host controller may still think U1U2 entry is
  possible.  The result will be slightly more bus bandwidth will be taken up
  (to account for U1U2 exit latency), but it should be harmless.
	 As soon as usb_set_lpm_timeout(0) return 0, hub initiated LPM
	  is disabled. Hub will disallows link to enter U1U2 as well,
	  even device is initiating LPM. Hence LPM is disabled if hub LPM
	  timeout set to 0, no matter device-initiated LPM is disabled or
	  not.
  Disable hub-initiated and device-initiated U1 and U2 entry.
  Caller must own the bandwidth_mutex.
  This will call usb_enable_lpm() on failure, which will decrement
  lpm_disable_count, and will re-enable LPM if lpm_disable_count reaches zero.
 If LPM is enabled, attempt to disable it. 
 Grab the bandwidth_mutex before calling usb_disable_lpm() 
  Attempt to enable device-initiated and hub-initiated U1 and U2 entry.  The
  xHCI host policy may prevent U1 or U2 from being enabled.
  Other callers may have disabled link PM, so U1 and U2 entry will be disabled
  until the lpm_disable_count drops to zero.  Caller must own the
  bandwidth_mutex.
	 Double check that we can both enable and disable LPM.
	  Device must be configured to accept set feature U1U2 timeout.
 Grab the bandwidth_mutex before calling usb_enable_lpm() 
 usb3 devices use U3 for disabled, make sure remote wakeup is disabled 
 CONFIG_PM 
 CONFIG_PM 
  USB-3 does not have a similar link state as USB-2 that will avoid negotiating
  a connection with a plugged-in cable but will signal the host when the cable
  is unplugged. Disable remote wake and set link state to U3 for USB-3 devices
  usb_port_disable - disable a usb device's upstream port
  @udev: device to disable
  Context: @udev locked, must be able to sleep.
  Disables a USB device that isn't in active use.
 USB 2.0 spec, 7.1.7.3  fig 7-29:
  Between connect detection and reset signaling there must be a delay
  of 100ms at least for debounce and power-settling.  The corresponding
  timer shall restart whenever the downstream port detects a disconnect.
  Apparently there are some bluetooth and irda-dongles and a number of
  low-speed devices for which this debounce period may last over a second.
  Not covered by the spec - but easy to deal with.
  This implementation uses a 1500ms total debounce timeout; if the
  connection isn't stable by then it returns -ETIMEDOUT.  It checks
  every 25ms for transient disconnects.  When the port status has been
  unchanged for 100ms it returns the port status.
	
	  The host controller will choose the device address,
	  instead of the core having chosen it earlier
 Device now using proper address. 
  There are reports of USB 3.0 devices that say they support USB 2.0 Link PM
  when they're plugged into a USB 2.0 port, but they don't work when LPM is
  enabled.
  Only enable USB 2.0 Link PM if the port is internal (hardwired), or the
  device says it supports the new USB 2.0 Link PM errata by setting the BESL
  support bit in the BOS descriptor.
 Reset device, (re)assign address, get device descriptor.
  Device connection must be stable, no more debouncing needed.
  Returns device in USB_STATE_ADDRESS, except on error.
  If this is called for an already-existing device (as part of
  usb_reset_and_verify_device), the caller must own the device lock and
  the port lock.  For a newly detected device that is not accessible
  through any global pointers, it's not necessary to lock the device,
  but it is still necessary to lock the port.
	 root hub ports have a slightly longer reset period
	  (from USB 2.0 spec, section 7.1.7.5)
 Some low speed devices have problems with the quick delay, so 
  be a bit pessimistic with those devices. RHbug #23670 
 Reset the device; full speed may morph to high speed 
 FIXME a USB 2.0 device may morph into SuperSpeed on reset. 
 error or disconnect 
 success, speed is known 
 Don't allow speed changes at reset, except usb 3.0 to faster 
	 USB 2.0 section 5.5.3 talks about ep0 maxpacket ...
	  it's fixed size except for full speed devices.
	  For Wireless USB devices, ep0 max packet is always 512 (tho
	  reported as 0xff in the device descriptor). WUSB1.0[4.8.1].
 fixed at 512 
 fixed at 64 
 8, 16, 32, or 64 
		 to determine the ep0 maxpacket size, try to read
		  the device descriptor to get bMaxPacketSize0 and
		  then correct our initial guess.
 fixed at 8 
	
	  The controller driver may be NULL if the controller device
	  is the middle device between platform device and roothub.
	  This middle device may not need a device driver due to
	  all hardware control can be at platform device driver, this
	  platform device is usually a dual-role USB controller device.
 Set up TT records, if needed  
	 Why interleave GET_DESCRIPTOR and SET_ADDRESS this way?
	  Because device hardware and firmware is sometimes buggy in
	  this area, and this is how Linux has done it for ages.
	  Change it cautiously.
	 
	  NOTE:  If use_new_scheme() is true we will start by issuing
	  a 64-byte GET_DESCRIPTOR request.  This is what Windows does,
	  so it may help with some non-standards-compliant devices.
	  Otherwise we start with SET_ADDRESS and then try to read the
	  first 8 bytes of the device descriptor to get the ep0 maxpacket
	  value.
			 Retry on all errors; some devices are flakey.
			  255 is for WUSB devices, we actually need to use
			  512 (WUSB1.0[4.8.1]).
				
				  Some devices time out if they are powered on
				  when already connected. They need a second
				  reset. But only on the first attempt,
				  lest we get into a time outreset loop
 error or disconnect 
		
		  If device is WUSB, we already assigned an
		  unauthorized address in the Connect Ack sequence;
		  authorization will assign the final address.
			 cope with hardware quirkiness:
			   - let SET_ADDRESS settle, some device hardware wants it
			   - read ep0 maxpacket even for high and low speed,
	
	  Some superspeed devices have finished the link training process
	  and attached to a superspeed hub port, but the device descriptor
	  got from those devices show they aren't superspeed devices. Warm
	  reset the port attached by the devices can fix them.
 notify HCD that we have a device connected and addressed 
 for disconnect processing 
 hub LEDs are probably harder to miss than syslog 
		
		  Unconfigured devices may not use more than one unit load,
		  or 8mA for OTG ports
	 Since the idVendor, idProduct, and bcdDevice values in the
	  device descriptor haven't changed, we will assume the
	  Manufacturer and Product strings haven't changed either.
	  But the SerialNumber string could be different (e.g., a
	  different flash card of the same brand).
 assume the worst 
 Disconnect any existing devices under this port 
	 We can forget about a "removed" device when there's a physical
	  disconnect or the connect status changes.
	 Return now if debouncing failed or nothing is connected or
	  the device was "removed".
		
		  maybe switch power back on (e.g. root hub was reset)
		  but only if the port isn't owned by someone else.
		 reallocate for each attempt, since references
		  to the previous one can escape in various ways
 Devices connected to SuperSpeed hubs are USB 3.0 or later 
 Don't retry 
 reset (non-USB 3.0 devices) and get descriptor 
		 consecutive bus-powered hubs aren't reliable; they can
		  violate the voltage drop budget.  if the new child has
		  a "powered" LED, users should notice we didn't enable it
		  (without reading syslog), even without per-port LEDs
		  on the parent.
 Don't retry 
 check for devices running slower than they could 
		 Store the parent's children[] pointer.  At this point
		  udev becomes globally accessible, although presumably
		  no one will look at it until hdev is unlocked.
		 We mustn't add new devices if the parent hub has
		  been disconnected; we would race with the
		  recursively_mark_NOTATTACHED() routine.
 Run it through the hoops (find a driver, etc) 
 When halfway through our retry count, power-cycle the port 
 Handle physical or logical connection change events.
  This routine is called when:
 	a port connection-change occurs;
 	a port enable-change occurs (often caused by EMI);
 	usb_reset_and_verify_device() encounters changed descriptors (as from
 		a firmware download)
  caller already locked the hub
 during HNP, don't repeat the debounce 
 Try to resuscitate an existing device 
			
			  USB-3 connections are initialized automatically by
			  the hostcontroller hardware. Therefore check for
			  changed device descriptors before resuscitating the
			  device.
 for disconnect() calls 
 Nothing to do 
			 For a suspended device, treat this as a
			  remote wakeup event.
 Don't resuscitate ;
 successfully revalidated the connection 
 Handle notifying userspace about hub over-current events 
		
		  EM interference sometimes causes badly shielded USB devices
		  to be shutdown by the hub, this hack enables them again.
		  Works at least with mouse driver.
 Cool down 
 skip port actions that require the port to be powered on 
	
	  Warm reset a USB3 protocol port if it's in
	  SS.Inactive state.
 NOTE: expects max 15 ports... 
	 Lock the device, then check to see if we were
 If the hub has died, clean up after it 
 Autoresume 
 If this is an inactive hub, do nothing 
 deal with port status changes 
			
			  The get_noresume and barrier ensure that if
			  the port was in the process of resuming, we
			  flush that work and keep the port active for
			  the duration of the port_event().  However,
			  if the port is runtime pm suspended
			  (powered-off), we leave it in that state, run
			  an abbreviated port_event(), and move on.
 deal with hub status changes 
 do nothing 
 FIXME: Is this always true? 
 Cool down 
 Balance the usb_autopm_get_interface() above 
 Balance the stuff in kick_hub_wq() and allow autosuspend 
 Terminating entry 
	
	  The workqueue needs to be freezable to avoid interfering with
	  USB-PERSIST port handover. Otherwise it might see that a full-speed
	  device was gone before the EHCI controller had handed its port
	  over to the companion full-speed controller.
 Fall through if kernel_thread failed 
	
	  Hub resources are freed for us by usb_deregister. It calls
	  usb_driver_purge on every device which in turn calls that
	  devices disconnect function if it is using this driver.
	  The hub_disconnect function takes care of releasing the
	  individual hub resources. -greg
 usb_hub_cleanup() 
  usb_reset_and_verify_device - perform a USB port reset to reinitialize a device
  @udev: device to reset (not in SUSPENDED or NOTATTACHED state)
  WARNING - don't use this routine to reset a composite device
  (one with multiple interfaces owned by separate drivers)!
  Use usb_reset_device() instead.
  Do a port reset, reassign the device's address, and establish its
  former operating configuration.  If the reset fails, or the device's
  descriptors change from their values before the reset, or the original
  configuration and altsettings cannot be restored, a flag will be set
  telling hub_wq to pretend the device has been disconnected and then
  re-connected.  All drivers will be unbound, and the device will be
  re-enumerated and probed all over again.
  Return: 0 if the reset succeeded, -ENODEV if the device has been
  flagged for logical disconnection, or some other negative error code
  if the reset wasn't even attempted.
  Note:
  The caller must own the device lock and the port lock, the latter is
  taken by usb_reset_device().  For example, it's safe to use
  usb_reset_device() from a driver probe() routine after downloading
  new firmware.  For calls that might not occur during probe(), drivers
  should lock the device using usb_lock_device_for_reset().
  Locking exception: This routine may also be called from within an
  autoresume handler.  Such usage won't conflict with other tasks
  holding the device lock because these tasks should always call
  usb_autopm_resume_device(), thereby preventing any unwanted
  autoresume.  The autoresume handler is expected to have already
  acquired the port lock before calling this routine.
	 Disable USB2 hardware LPM.
	  It will be re-enabled by the enumeration process.
	 Disable LPM while we reset the device and reinstall the alt settings.
	  Device-initiated LPM, and system exit latency settings are cleared
	  when the device is reset, so we have to set them up again.
		 ep0 maxpacket size may change; let the HCD know about it.
 Device might have changed firmware (DFU or similar) 
 for disconnect() calls 
 Restore the device's previous configuration 
	 Put interfaces back into the same altsettings as before.
	  Don't bother to send the Set-Interface request for interfaces
	  that were already in altsetting 0; besides being unnecessary,
	  many devices can't handle it.  Instead just reset the host-side
	  endpoint state.
			 Let the bandwidth allocation function know that this
			  device has been reset, and it will have to use
			  alternate setting 0 as the current alternate setting.
 Resetting also frees any allocated streams 
 Now that the alt settings are re-installed, enable LTM and LPM. 
 LPM state doesn't matter when we're about to destroy the device. 
  usb_reset_device - warn interface drivers and perform a USB port reset
  @udev: device to reset (not in NOTATTACHED state)
  Warns all drivers bound to registered interfaces (using their pre_reset
  method), performs the port reset, and then lets the drivers know that
  the reset is over (using their post_reset method).
  Return: The same as for usb_reset_and_verify_device().
  Note:
  The caller must own the device lock.  For example, it's safe to use
  this from a driver probe() routine after downloading new firmware.
  For calls that might not occur during probe(), drivers should lock
  the device using usb_lock_device_for_reset().
  If an interface is currently being probed or disconnected, we assume
  its driver knows how to handle resets.  For all other interfaces,
  if the driver doesn't have pre_reset and post_reset methods then
  we attempt to unbind it and rebind afterward.
 this requires hcd-specific logic; see ohci_restart() 
	
	  Don't allocate memory with GFP_KERNEL in current
	  context to avoid possible deadlock if usb mass
	  storage interface or usbnet interface(iSCSI case)
	  is included in current configuration. The easist
	  approach is to do it for every device reset,
	  because the device 'memalloc_noio' flag may have
	  not been set before reseting the usb device.
 Prevent autosuspend during the reset 
 If the reset failed, hub_wq will unbind drivers later 
  usb_queue_reset_device - Reset a USB device from an atomic context
  @iface: USB interface belonging to the device to reset
  This function can be used to reset a USB device from an atomic
  context, where usb_reset_device() won't work (as it blocks).
  Doing a reset via this method is functionally equivalent to calling
  usb_reset_device(), except for the fact that it is delayed to a
  workqueue. This means that any drivers bound to other interfaces
  might be unbound, as well as users from usbfs in user space.
  Corner cases:
  - Scheduling two resets at the same time from two different drivers
    attached to two different interfaces of the same device is
    possible; depending on how the driver attached to each interface
    handles ->pre_reset(), the second reset might happen or not.
  - If the reset is delayed so long that the interface is unbound from
    its driver, the reset will be skipped.
  - This function can be called during .probe().  It can also be called
    during .disconnect(), but doing so is pointless because the reset
    will not occur.  If you really want to reset the device during
    .disconnect(), call usb_reset_device() directly -- but watch out
    for nested unbinding issues!
  usb_hub_find_child - Get the pointer of child device
  attached to the port which is specified by @port1.
  @hdev: USB device belonging to the usb hub
  @port1: port num to indicate which port the child device
 	is attached to.
  USB drivers call this function to get hub's child device
  pointer.
  Return: %NULL if input param is invalid and
  child's usb_device pointer if non-NULL.
  usb_get_hub_port_acpi_handle - Get the usb port's acpi handle
  @hdev: USB device belonging to the usb hub
  @port1: port num of the port
  Return: Port's acpi handle if successful, %NULL if params are
  invalid.
 SPDX-License-Identifier: GPL-2.0
  driversusbcoreendpoint.c
  (C) Copyright 2002,2004,2006 Greg Kroah-Hartman
  (C) Copyright 2002,2004 IBM Corp.
  (C) Copyright 2006 Novell Inc.
  Released under the GPLv2 only.
  Endpoint sysfs stuff
 SPDX-License-Identifier: GPL-2.0
  Released under the GPLv2 only.
  usb_init_urb - initializes a urb so that it can be used by a USB driver
  @urb: pointer to the urb to initialize
  Initializes a urb so that the USB subsystem can use it properly.
  If a urb is created with a call to usb_alloc_urb() it is not
  necessary to call this function.  Only use this if you allocate the
  space for a struct urb on your own.  If you call this function, be
  careful when freeing the memory for your urb that it is no longer in
  use by the USB core.
  Only use this function if you _really_ understand what you are doing.
  usb_alloc_urb - creates a new urb for a USB driver to use
  @iso_packets: number of iso packets for this urb
  @mem_flags: the type of memory to allocate, see kmalloc() for a list of
 	valid options for this.
  Creates an urb for the USB driver to use, initializes a few internal
  structures, increments the usage counter, and returns a pointer to it.
  If the driver want to use this urb for interrupt, control, or bulk
  endpoints, pass '0' as the number of iso packets.
  The driver must call usb_free_urb() when it is finished with the urb.
  Return: A pointer to the new urb, or %NULL if no memory is available.
  usb_free_urb - frees the memory used by a urb when all users of it are finished
  @urb: pointer to the urb to free, may be NULL
  Must be called when a user of a urb is finished with it.  When the last user
  of the urb calls this function, the memory of the urb is freed.
  Note: The transfer buffer associated with the urb is not freed unless the
  URB_FREE_BUFFER transfer flag is set.
  usb_get_urb - increments the reference count of the urb
  @urb: pointer to the urb to modify, may be NULL
  This must be  called whenever a urb is transferred from a device driver to a
  host controller driver.  This allows proper reference counting to happen
  for urbs.
  Return: A pointer to the urb with the incremented reference counter.
  usb_anchor_urb - anchors an URB while it is processed
  @urb: pointer to the urb to anchor
  @anchor: pointer to the anchor
  This can be called to have access to URBs which are to be executed
  without bothering to track them
 Callers must hold anchor->lock 
  usb_unanchor_urb - unanchors an URB
  @urb: pointer to the urb to anchor
  Call this to stop the system keeping track of this URB
	
	  At this point, we could be competing with another thread which
	  has the same intention. To protect the urb from being unanchored
	  twice, only the winner of the race gets the job.
-------------------------------------------------------------------
  usb_pipe_type_check - sanity check of a specific pipe for a usb device
  @dev: struct usb_device to be checked
  @pipe: pipe to check
  This performs a light-weight sanity check for the endpoint in the
  given usb device.  It returns 0 if the pipe is valid for the specific usb
  device, otherwise a negative error code.
  usb_urb_ep_type_check - sanity check of endpoint in the given urb
  @urb: urb to be checked
  This performs a light-weight sanity check for the endpoint in the
  given urb.  It returns 0 if the urb contains a valid endpoint, otherwise
  a negative error code.
  usb_submit_urb - issue an asynchronous transfer request for an endpoint
  @urb: pointer to the urb describing the request
  @mem_flags: the type of memory to allocate, see kmalloc() for a list
 	of valid options for this.
  This submits a transfer request, and transfers control of the URB
  describing that request to the USB subsystem.  Request completion will
  be indicated later, asynchronously, by calling the completion handler.
  The three types of completion are success, error, and unlink
  (a software-induced fault, also called "request cancellation").
  URBs may be submitted in interrupt context.
  The caller must have correctly initialized the URB before submitting
  it.  Functions such as usb_fill_bulk_urb() and usb_fill_control_urb() are
  available to ensure that most fields are correctly initialized, for
  the particular kind of transfer, although they will not initialize
  any transfer flags.
  If the submission is successful, the complete() callback from the URB
  will be called exactly once, when the USB core and Host Controller Driver
  (HCD) are finished with the URB.  When the completion function is called,
  control of the URB is returned to the device driver which issued the
  request.  The completion handler may then immediately free or reuse that
  URB.
  With few exceptions, USB device drivers should never access URB fields
  provided by usbcore or the HCD until its complete() is called.
  The exceptions relate to periodic transfer scheduling.  For both
  interrupt and isochronous urbs, as part of successful URB submission
  urb->interval is modified to reflect the actual transfer period used
  (normally some power of two units).  And for isochronous urbs,
  urb->start_frame is modified to reflect when the URB's transfers were
  scheduled to start.
  Not all isochronous transfer scheduling policies will work, but most
  host controller drivers should easily handle ISO queues going from now
  until 10-200 msec into the future.  Drivers should try to keep at
  least one or two msec of data in the queue; many controllers require
  that new transfers start at least 1 msec in the future when they are
  added.  If the driver is unable to keep up and the queue empties out,
  the behavior for new submissions is governed by the URB_ISO_ASAP flag.
  If the flag is set, or if the queue is idle, then the URB is always
  assigned to the first available (and not yet expired) slot in the
  endpoint's schedule.  If the flag is not set and the queue is active
  then the URB is always assigned to the next slot in the schedule
  following the end of the endpoint's previous URB, even if that slot is
  in the past.  When a packet is assigned in this way to a slot that has
  already expired, the packet is not transmitted and the corresponding
  usb_iso_packet_descriptor's status field will return -EXDEV.  If this
  would happen to all the packets in the URB, submission fails with a
  -EXDEV error code.
  For control endpoints, the synchronous usb_control_msg() call is
  often used (in non-interrupt context) instead of this call.
  That is often used through convenience wrappers, for the requests
  that are standardized in the USB 2.0 specification.  For bulk
  endpoints, a synchronous usb_bulk_msg() call is available.
  Return:
  0 on successful submissions. A negative error number otherwise.
  Request Queuing:
  URBs may be submitted to endpoints before previous ones complete, to
  minimize the impact of interrupt latencies and system overhead on data
  throughput.  With that queuing policy, an endpoint's queue would never
  be empty.  This is required for continuous isochronous data streams,
  and may also be required for some kinds of interrupt transfers. Such
  queuing also maximizes bandwidth utilization by letting USB controllers
  start work on later requests before driver software has finished the
  completion processing for earlier (successful) requests.
  As of Linux 2.6, all USB endpoint transfer queues support depths greater
  than one.  This was previously a HCD-specific behavior, except for ISO
  transfers.  Non-isochronous endpoint queues are inactive during cleanup
  after faults (transfer errors or cancellation).
  Reserved Bandwidth Transfers:
  Periodic transfers (interrupt or isochronous) are performed repeatedly,
  using the interval specified in the urb.  Submitting the first urb to
  the endpoint reserves the bandwidth necessary to make those transfers.
  If the USB subsystem can't allocate sufficient bandwidth to perform
  the periodic request, submitting such a periodic request should fail.
  For devices under xHCI, the bandwidth is reserved at configuration time, or
  when the alt setting is selected.  If there is not enough bus bandwidth, the
  configurationalt setting request will fail.  Therefore, submissions to
  periodic endpoints on devices under xHCI should never fail due to bandwidth
  constraints.
  Device drivers must explicitly request that repetition, by ensuring that
  some URB is always on the endpoint's queue (except possibly for short
  periods during completion callbacks).  When there is no longer an urb
  queued, the endpoint's bandwidth reservation is canceled.  This means
  drivers can use their completion handlers to ensure they keep bandwidth
  they need, by reinitializing and resubmitting the just-completed urb
  until the driver longer needs that periodic bandwidth.
  Memory Flags:
  The general rules for how to decide which mem_flags to use
  are the same as for kmalloc.  There are four
  different possible values; GFP_KERNEL, GFP_NOFS, GFP_NOIO and
  GFP_ATOMIC.
  GFP_NOFS is not ever used, as it has not been implemented yet.
  GFP_ATOMIC is used when
    (a) you are inside a completion handler, an interrupt, bottom half,
        tasklet or timer, or
    (b) you are holding a spinlock or rwlock (does not apply to
        semaphores), or
    (c) current->state != TASK_RUNNING, this is the case only after
        you've changed it.
  GFP_NOIO is used in the block io path and error handling of storage
  devices.
  All other situations use GFP_KERNEL.
  Some more specific rules for mem_flags can be inferred, such as
   (1) start_xmit, timeout, and receive methods of network drivers must
       use GFP_ATOMIC (they are called with a spinlock held);
   (2) queuecommand methods of scsi drivers must use GFP_ATOMIC (also
       called with a spinlock held);
   (3) If you use a kernel thread with a network driver you must use
       GFP_NOIO, unless (b) or (c) apply;
   (4) after you have done a down() you can use GFP_KERNEL, unless (b) or (c)
       apply or your are in a storage driver's block io path;
   (5) USB probe and disconnect can use GFP_KERNEL unless (b) or (c) apply; and
   (6) changing firmware on a running storage or net device uses
       GFP_NOIO, unless b) or c) apply
	 For now, get the endpoint from the pipe.  Eventually drivers
	  will be required to set urb->ep directly and we will eliminate
	  urb->pipe.
	 Lots of sanity checks, so HCDs can rely on clean data
	  and don't need to duplicate tests
 Clear the internal flags and cache the direction for later use 
	 periodic transfers limit size per frameuframe,
	  but drivers only control those sizes for ISO.
	  while we're checking, initialize return status.
		 SuperSpeed isoc endpoints have up to 16 bursts of up to
		  3 packets each
 "high bandwidth" mode, 1-3 packetsuframe? 
 the IO buffer must be mappedunmapped, except when length=0 
	
	  stuff that drivers shouldn't do, but which shouldn't
	  cause problems in HCDs if they get it wrong.
 Check that the pipe's type matches the endpoint's type 
 Check against a simplestandard policy 
 all non-iso endpoints 
 warn if submitter gave bogus flags 
	
	  Force periodic transfer intervals to be legal values that are
	  a power of two (so HCDs don't need to).
	 
	  FIXME want bus->{intr,iso}_sched_horizon values here.  Each HC
	  supports different values... this uses EHCIUHCI defaults (and
	  EHCI can use smaller non-default values).
 too small? 
 too big? 
 units are 125us 
 Handle up to 2^(16-1) microframes 
 units are microframes 
 NOTE usb handles 2^15 
 units are framesmsec 
 NOTE ohci only handles up to 32 
 NOTE usb and ohci handle up to 2^15 
 Round down to a power of 2, no more than max 
-------------------------------------------------------------------
  usb_unlink_urb - abortcancel a transfer request for an endpoint
  @urb: pointer to urb describing a previously submitted request,
 	may be NULL
  This routine cancels an in-progress request.  URBs complete only once
  per submission, and may be canceled only once per submission.
  Successful cancellation means termination of @urb will be expedited
  and the completion handler will be called with a status code
  indicating that the request has been canceled (rather than any other
  code).
  Drivers should not call this routine or related routines, such as
  usb_kill_urb() or usb_unlink_anchored_urbs(), after their disconnect
  method has returned.  The disconnect function should synchronize with
  a driver's IO routines to insure that all URB-related activity has
  completed before it returns.
  This request is asynchronous, however the HCD might call the ->complete()
  callback during unlink. Therefore when drivers call usb_unlink_urb(), they
  must not hold any locks that may be taken by the completion function.
  Success is indicated by returning -EINPROGRESS, at which time the URB will
  probably not yet have been given back to the device driver. When it is
  eventually called, the completion function will see @urb->status ==
  -ECONNRESET.
  Failure is indicated by usb_unlink_urb() returning any other value.
  Unlinking will fail when @urb is not currently "linked" (i.e., it was
  never submitted, or it was unlinked before, or the hardware is already
  finished with it), even if the completion handler has not yet run.
  The URB must not be deallocated while this routine is running.  In
  particular, when a driver calls this routine, it must insure that the
  completion handler cannot deallocate the URB.
  Return: -EINPROGRESS on success. See description for other values on
  failure.
  Unlinking and Endpoint Queues:
  [The behaviors and guarantees described below do not apply to virtual
  root hubs but only to endpoint queues for physical USB devices.]
  Host Controller Drivers (HCDs) place all the URBs for a particular
  endpoint in a queue.  Normally the queue advances as the controller
  hardware processes each request.  But when an URB terminates with an
  error its queue generally stops (see below), at least until that URB's
  completion routine returns.  It is guaranteed that a stopped queue
  will not restart until all its unlinked URBs have been fully retired,
  with their completion routines run, even if that's not until some time
  after the original completion handler returns.  The same behavior and
  guarantee apply when an URB terminates because it was unlinked.
  Bulk and interrupt endpoint queues are guaranteed to stop whenever an
  URB terminates with any sort of error, including -ECONNRESET, -ENOENT,
  and -EREMOTEIO.  Control endpoint queues behave the same way except
  that they are not guaranteed to stop for -EREMOTEIO errors.  Queues
  for isochronous endpoints are treated differently, because they must
  advance at fixed rates.  Such queues do not stop when an URB
  encounters an error or is unlinked.  An unlinked isochronous URB may
  leave a gap in the stream of packets; it is undefined whether such
  gaps can be filled in.
  Note that early termination of an URB because a short packet was
  received will generate a -EREMOTEIO error if and only if the
  URB_SHORT_NOT_OK flag is set.  By setting this flag, USB device
  drivers can build deep queues for large or complex bulk transfers
  and clean them up reliably after any sort of aborted transfer by
  unlinking all pending URBs at the first fault.
  When a control URB terminates with an error other than -EREMOTEIO, it
  is quite likely that the status stage of the transfer will not take
  place.
  usb_kill_urb - cancel a transfer request and wait for it to finish
  @urb: pointer to URB describing a previously submitted request,
 	may be NULL
  This routine cancels an in-progress request.  It is guaranteed that
  upon return all completion handlers will have finished and the URB
  will be totally idle and available for reuse.  These features make
  this an ideal way to stop IO in a disconnect() callback or close()
  function.  If the request has not already finished or been unlinked
  the completion handler will see urb->status == -ENOENT.
  While the routine is running, attempts to resubmit the URB will fail
  with error -EPERM.  Thus even if the URB's completion handler always
  tries to resubmit, it will not succeed and the URB will become idle.
  The URB must not be deallocated while this routine is running.  In
  particular, when a driver calls this routine, it must insure that the
  completion handler cannot deallocate the URB.
  This routine may not be used in an interrupt context (such as a bottom
  half or a completion handler), or when holding a spinlock, or in other
  situations where the caller can't schedule().
  This routine should not be called by a driver after its disconnect
  method has returned.
  usb_poison_urb - reliably kill a transfer and prevent further use of an URB
  @urb: pointer to URB describing a previously submitted request,
 	may be NULL
  This routine cancels an in-progress request.  It is guaranteed that
  upon return all completion handlers will have finished and the URB
  will be totally idle and cannot be reused.  These features make
  this an ideal way to stop IO in a disconnect() callback.
  If the request has not already finished or been unlinked
  the completion handler will see urb->status == -ENOENT.
  After and while the routine runs, attempts to resubmit the URB will fail
  with error -EPERM.  Thus even if the URB's completion handler always
  tries to resubmit, it will not succeed and the URB will become idle.
  The URB must not be deallocated while this routine is running.  In
  particular, when a driver calls this routine, it must insure that the
  completion handler cannot deallocate the URB.
  This routine may not be used in an interrupt context (such as a bottom
  half or a completion handler), or when holding a spinlock, or in other
  situations where the caller can't schedule().
  This routine should not be called by a driver after its disconnect
  method has returned.
  usb_block_urb - reliably prevent further use of an URB
  @urb: pointer to URB to be blocked, may be NULL
  After the routine has run, attempts to resubmit the URB will fail
  with error -EPERM.  Thus even if the URB's completion handler always
  tries to resubmit, it will not succeed and the URB will become idle.
  The URB must not be deallocated while this routine is running.  In
  particular, when a driver calls this routine, it must insure that the
  completion handler cannot deallocate the URB.
  usb_kill_anchored_urbs - kill all URBs associated with an anchor
  @anchor: anchor the requests are bound to
  This kills all outstanding URBs starting from the back of the queue,
  with guarantee that no completer callbacks will take place from the
  anchor after this function returns.
  This routine should not be called by a driver after its disconnect
  method has returned.
 make sure the URB isn't freed before we kill it 
 this will unanchor the URB 
  usb_poison_anchored_urbs - cease all traffic from an anchor
  @anchor: anchor the requests are bound to
  this allows all outstanding URBs to be poisoned starting
  from the back of the queue. Newly added URBs will also be
  poisoned
  This routine should not be called by a driver after its disconnect
  method has returned.
 make sure the URB isn't freed before we kill it 
 this will unanchor the URB 
  usb_unpoison_anchored_urbs - let an anchor be used successfully again
  @anchor: anchor the requests are bound to
  Reverses the effect of usb_poison_anchored_urbs
  the anchor can be used normally after it returns
  usb_unlink_anchored_urbs - asynchronously cancel transfer requests en masse
  @anchor: anchor the requests are bound to
  this allows all outstanding URBs to be unlinked starting
  from the back of the queue. This function is asynchronous.
  The unlinking is just triggered. It may happen after this
  function has returned.
  This routine should not be called by a driver after its disconnect
  method has returned.
  usb_anchor_suspend_wakeups
  @anchor: the anchor you want to suspend wakeups on
  Call this to stop the last urb being unanchored from waking up any
  usb_wait_anchor_empty_timeout waiters. This is used in the hcd urb give-
  back path to delay waking up until after the completion handler has run.
  usb_anchor_resume_wakeups
  @anchor: the anchor you want to resume wakeups on
  Allow usb_wait_anchor_empty_timeout waiters to be woken up again, and
  wake up any current waiters if the anchor is empty.
  usb_wait_anchor_empty_timeout - wait for an anchor to be unused
  @anchor: the anchor you want to become unused
  @timeout: how long you are willing to wait in milliseconds
  Call this is you want to be sure all an anchor's
  URBs have finished
  Return: Non-zero if the anchor became unused. Zero on timeout.
  usb_get_from_anchor - get an anchor's oldest urb
  @anchor: the anchor whose urb you want
  This will take the oldest urb from an anchor,
  unanchor and return it
  Return: The oldest urb from @anchor, or %NULL if @anchor has no
  urbs associated with it.
  usb_scuttle_anchored_urbs - unanchor all an anchor's urbs
  @anchor: the anchor whose urbs you want to unanchor
  use this to get rid of all an anchor's urbs
  usb_anchor_empty - is an anchor empty
  @anchor: the anchor you want to query
  Return: 1 if the anchor has no urbs associated with it.
 SPDX-License-Identifier: GPL-2.0+
  A wrapper for multiple PHYs which passes all phy_ function calls to
  multiple (actual) PHY devices. This is comes handy when initializing
  all PHYs on a HCD and to keep them all in the same state.
  Copyright (C) 2018 Martin Blumenstingl <martin.blumenstingl@googlemail.com>
 keep the PHYs initialized so the device can wake up the system 
 if the device can't wake up the system _exit was called 
 undo _init if _power_on failed 
 SPDX-License-Identifier: GPL-2.0+
  (C) Copyright David Brownell 2000-2002
 PCI-based HCs are common, but plenty of non-PCI HCs are used too 
  Coordinate handoffs between EHCI and companion controllers
  during EHCI probing and system resume.
 Iterate over PCI devices in the same slot as pdev and call fn for each 
	
	  Iterate through other PCI functions in the same slot.
	  If the function's drvdata isn't set then it isn't bound to
	  a USB host controller driver, so skip it.
		
		  Companion device should be either UHCI,OHCI or EHCI host
		  controller, otherwise skip.
  We're about to add an EHCI controller, which will unceremoniously grab
  all the port connections away from its companions.  To prevent annoying
  error messages, lock the companion's root hub and gracefully unconfigure
  it beforehand.  Leave it locked until the EHCI controller is all set.
  Adding the EHCI controller has either succeeded or failed.  Set the
  companion pointer accordingly, and in either case, reconfigure and
  unlock the root hub.
 Succeeded 
  We just added a non-EHCI controller.  Find the EHCI controller to
  which it is a companion, and store a pointer to the bus structure.
 We are removing an EHCI controller.  Clear the companions' pointers. 
 An EHCI controller must wait for its companions before resuming. 
 CONFIG_PM 
-------------------------------------------------------------------------
 configure so an HC device and id are always provided 
 always called with process context; sleeping is OK 
  usb_hcd_pci_probe - initialize PCI-based HCDs
  @dev: USB Host Controller being probed
  @id: pci hotplug id connecting controller to HCD framework
  @driver: USB HC driver handle
  Context: task context, might sleep
  Allocates basic PCI resources for this USB host controller, and
  then invokes the start() method for the HCD associated with it
  through the hotplug entry's driver_data.
  Store this function in the HCD's struct pci_driver as probe().
  Return: 0 if successful.
	
	  The xHCI driver has its own irq management
	  make sure irq setup is not touched for xhci in generic hcd code
 EHCI, OHCI 
 UHCI 
 Note: dev_set_drvdata must be called while holding the rwsem 
 may be called without controller electrically present 
 may be called with controller, bus, and devices active 
  usb_hcd_pci_remove - shutdown processing for PCI-based HCDs
  @dev: USB Host Controller being removed
  Context: task context, might sleep
  Reverses the effect of usb_hcd_pci_probe(), first invoking
  the HCD's stop() method.  It is always called from a thread
  context, normally "rmmod", "apmd", or something similar.
  Store this function in the HCD's struct pci_driver as remove().
	 Fake an interrupt request in order to give the driver a chance
	  to test whether the controller hardware has been removed (e.g.,
	  cardbus physical eject).
 Note: dev_set_drvdata must be called while holding the rwsem 
 Not EHCI; just clear the companion pointer 
  usb_hcd_pci_shutdown - shutdown host controller
  @dev: USB Host Controller being shutdown
 Enanble or disable ASIC clocks for USB 
 CONFIG_PPC_PMAC 
	 Root hub suspend should have stopped all downstream traffic,
	  and all bus master traffic.  And done so for both the interface
	  and the stub usb_device (which we check here).  But maybe it
	  didn't; writing sysfs powerstate files ignores such rules...
		 Optimization: Don't suspend if a root-hub wakeup is
		  pending and it would cause the HCD to wake up anyway.
 Check again in case wakeup raced with pci_suspend 
	 If MSI-X is enabled, the driver will have synchronized all vectors
	  in pci_suspend(). If MSI or legacy PCI is enabled, that will be
	  synchronized here.
	 Downstream ports from this root hub should already be quiesced, so
	  there will be no DMA activity.  Now we can shut down the upstream
	  link (except maybe for PME# resume signaling).  We'll enter a
	  low power state during suspend_noirq, if the hardware allows.
		
		  Only EHCI controllers have to wait for their companions.
		  No locking is needed because PCI controller drivers do not
		  get unbound during system resume.
	 If the root hub is dead rather than suspended, disallow remote
	  wakeup.  usb_hc_died() should ensure that both hosts are marked as
	  dying, so we only need to check the primary roothub.
	 Possibly enable remote wakeup,
	  choose the appropriate low-power state, and go to that state.
 Low-power not supported 
 CONFIG_PM_SLEEP 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0+
       devio.c  --  User space communication with USB devices.
       Copyright (C) 1999-2000  Thomas Sailer (sailer@ife.ee.ethz.ch)
   This file implements the usbfsxy files, where
   x is the bus number and y the device number.
   It allows user space programs"drivers" to communicate directly
   with USB devices without intervening kernel driver.
   Revision history
     22.12.1999   0.1   Initial release (split from proc_usb.c)
     04.01.2000   0.2   Turned into its own filesystem
     30.09.2005   0.3   Fix user-triggerable oops in async URB delivery
     			 (CAN-2005-3055)
 for usbcore internals 
 split-size for large txs 
 Mutual exclusion for ps->list in resume vs. release and remove 
 state list 
 protects the async urb lists 
 wake up if a request completed 
 wake up upon runtime resume 
 Limit on the total amount of memory we can allocate for transfers 
 Hard limit, necessary to avoid arithmetic overflow 
 Total memory currently allocated 
 Check whether it's okay to allocate more memory for a transfer 
 Memory for a transfer is being deallocated 
 18 bytes - fits on the stack 
			 The descriptor may claim to be longer than it
 Simply don't write (skip over) unallocated parts 
  async list handling
 Async 
 Isochronous 
 Non-Isoc 
	 Mark all the pending URBs that match bulk_addr, up to but not
	  including the first one without AS_CONTINUATION.  If such an
	  URB is encountered then a new transfer has already started so
	  the endpoint doesn't need to be disabled; otherwise it does.
 Now carefully unlink all the marked pending URBs 
 Only once 
 Allow completions 
 drop the spinlock so the completion handler can run 
  interface claims are made only at the request of user level code,
  which can also release them (explicitly or by closing files).
  they're also undone when devices disconnect.
	 NOTE:  this relies on usbcore having canceled and completed
	  all pending IO requests; 2.6 does that.
 force async requests to complete 
 We don't care about suspendresume of claimed interfaces 
 The following routines apply to the entire device, not interfaces 
 We don't need to handle this 
 Protect against simultaneous remove or release 
 already claimed 
 suppress uevents while claiming interface 
 suppress uevents while releasing interface 
 if not yet claimed, claim it for the driver 
	
	  check for the special corner case 'get_device_id' in the printer
	  class specification, which we always want to allow as it is used
	  to query things like ink level, etc.
			
			  Some not fully compliant Win apps seem to get
			  index wrong and have the endpoint number here
			  rather than the endpoint address (with the
			  correct direction). Win does let this through,
			  so we'll not reject it here but leave it to
			  the device to not break KVM. But we warn.
 The XHCI controller allows max 2 ^ 16 streams 
 usb_allocfree_streams operate on an usb_interface 
 Verify all eps belong to the same interface 
  file operations
 usbdev device-node 
 32 bits 
 Can't race with resume; the device is already active 
 Protect against simultaneous resume 
  Much like usb_start_wait_urb, but returns status separately from
  actual_length and uses a killable wait.
 Completed before it was killed 
 To suppress 64k PAGE_SIZE warning 
 Linger a bit, prior to the next control message. 
	
	  len1 can be almost arbitrarily large.  Don't WARN if it's
	  too big, just fail the request.
	 Don't allow a device reset if the process has dropped the
	  privilege to do such things and any of the interfaces are
	  currently claimed.
	 Don't touch the device if any interfaces are claimed.
	  It could interfere with other drivers' operations, and if
	  an interface is claimed by usbfs it could easily deadlock.
	 SET_CONFIGURATION is often abused as a "cheap" driver reset,
	  so avoid usb_set_configuration()'s kick to sysfs
 USBDEVFS_URB_ISO_ASAP is a special case 
 min 8 byte setup packet 
 allow single-shot interrupt transfers 
 arbitrary limit 
			
			  arbitrary limit need for USB 3.1 Gen2
			  sizemax: 96 DPs at SSP, 96  1024 = 98304
	 do not use SG buffers when memory mapped segments
	  are in use
				
				  Isochronous input data may end up being
				  discontiguous if some of the packets are
				  short. Clear the buffer so that the gaps
				  don't leak kernel data to userspace.
	 This tedious sequence is necessary because the URB_ flags
	  are internal to the kernel and subject to change, whereas
	  the USBDEVFS_URB_ flags are a user API and must not be changed.
		 Not exactly the endpoint address; the direction bit is
		  shifted to the 0x10 position so that the value will be
		  between 0 and 31.
		 If this bulk URB is the start of a new transfer, re-enable
		  the endpoint.  Otherwise mark it as a continuation URB.
		 Don't accept continuation URBs if the endpoint is
		  disabled because of an earlier error.
 alloc buffer 
 disconnect kernel driver from interface 
 let kernel drivers try to (re)bind to the interface 
 talk directly to the interface's driver 
 cleanup and return 
	 This is a one way operation. Once privileges are
	  dropped, you cannot regain them. You may however reissue
	  this ioctl to shrink the allowed interfaces mask.
  NOTE:  All requests here that have interface numbers as parameters
  are assuming that somehow the configuration has been prevented from
  changing.  But there's no mechanism to ensure that...
 Reap operations are allowed even after disconnection 
 Handle variable-length commands 
 No kernel lock - fine 
 Protect against simultaneous resume 
 SPDX-License-Identifier: GPL-2.0
  Cadence USBSS and USBSSP DRD Driver.
  Copyright (C) 2018-2020 Cadence.
  Copyright (C) 2019 Texas Instruments
  Author: Pawel Laszczak <pawell@cadence.com>
          Roger Quadros <rogerq@ti.com>
  cdns_set_mode - change mode of OTG Core
  @cdns: pointer to context structure
  @mode: selected mode from cdns_role
  Returns 0 on success otherwise negative errno
			
			  Enable work around feature built into the
			  controller to address issue with RX Sensitivity
			  est (EL_17) for USB2 PHY. The issue only occures
			  for 0x0002450D controller version.
		
		  Hardware specification says: "ID_VALUE must be valid within
		  50ms after idpullup is set to '1" so driver must wait
		  50ms before reading this pin.
  cdns_otg_disable_irq - Disable all OTG interrupts
  @cdns: Pointer to controller context structure
  cdns_otg_enable_irq - enable id and sess_valid interrupts
  @cdns: Pointer to controller context structure
  cdns_drd_host_on - start host.
  @cdns: Pointer to controller context structure.
  Returns 0 on success otherwise negative errno.
 Enable host mode. 
  cdns_drd_host_off - stop host.
  @cdns: Pointer to controller context structure.
 Waiting till H_IDLE state.
  cdns_drd_gadget_on - start gadget.
  @cdns: Pointer to controller context structure.
  Returns 0 on success otherwise negative errno
 switch OTG core 
  cdns_drd_gadget_off - stop gadget.
  @cdns: Pointer to controller context structure.
	
	  Driver should wait at least 10us after disabling Device
	  before turning-off Device (DEV_BUS_DROP).
 Waiting till DEV_IDLE state.
  cdns_init_otg_mode - initialize drd controller
  @cdns: Pointer to controller context structure
  Returns 0 on success otherwise negative errno
 clear all interrupts 
  cdns_drd_update_mode - initialize mode of operation
  @cdns: Pointer to controller context structure
  Returns 0 on success otherwise negative errno
  cdns_drd_irq - interrupt handler for OTG events
  @irq: irq number for cdns core device
  @data: structure of cdns
  Returns IRQ_HANDLED or IRQ_NONE
	 Detection of DRD version. Controller has been released
	  in three versions. All are very similar and are software compatible,
	  but they have same changes in register maps.
	  The first register in oldest version is command register and it's
	  read only. Driver should read 0 from it. On the other hand, in v1
	  and v2 the first register contains device ID number which is not
	  set to 0. Driver uses this fact to detect the proper version of
	  controller.
 Update dr_mode according to STRAP configuration. 
 Indicate the cdns3 core was power lost before 
 SPDX-License-Identifier: GPL-2.0
  Cadence USBSS DRD Driver - gadget side.
  Copyright (C) 2018 Cadence Design Systems.
  Copyright (C) 2017-2018 NXP
  Authors: Pawel Jez <pjez@cadence.com>,
           Pawel Laszczak <pawell@cadence.com>
           Peter Chen <peter.chen@nxp.com>
  cdns3_ep0_run_transfer - Do transfer on default endpoint hardware
  @priv_dev: extended gadget object
  @dma_addr: physical address where data iswill be stored
  @length: data length
  @erdy: set it to 1 when ERDY packet should be sent -
         exit from flow control state
  @zlp: add zero length packet
 TRB should be prepared before starting transfer. 
 Resume controller before arming transfer. 
  cdns3_ep0_delegate_req - Returns status of handling setup packet
  Setup is handled by gadget driver
  @priv_dev: extended gadget object
  @ctrl_req: pointer to received setup packet
  Returns zero on success or negative value on failure
 set_stall on ep0 
  cdns3_req_ep0_set_configuration - Handling of SET_CONFIG standard USB request
  @priv_dev: extended gadget object
  @ctrl_req: pointer to received setup packet
  Returns 0 if success, USB_GADGET_DELAYED_STATUS on deferred status stage,
  error code on error
  cdns3_req_ep0_set_address - Handling of SET_ADDRESS standard USB request
  @priv_dev: extended gadget object
  @ctrl_req: pointer to received setup packet
  Returns 0 if success, error code on error
  cdns3_req_ep0_get_status - Handling of GET_STATUS standard USB request
  @priv_dev: extended gadget object
  @ctrl: pointer to received setup packet
  Returns 0 if success, error code on error
 self powered 
 check if endpoint is stalled or stall is pending 
  cdns3_req_ep0_handle_feature -
  Handling of GETSET_FEATURE standard USB request
  @priv_dev: extended gadget object
  @ctrl: pointer to received setup packet
  @set: must be set to 1 for SET_FEATURE request
  Returns 0 if success, error code on error
  cdns3_req_ep0_set_sel - Handling of SET_SEL standard USB request
  @priv_dev: extended gadget object
  @ctrl_req: pointer to received setup packet
  Returns 0 if success, error code on error
  cdns3_req_ep0_set_isoch_delay -
  Handling of GET_ISOCH_DELAY standard USB request
  @priv_dev: extended gadget object
  @ctrl_req: pointer to received setup packet
  Returns 0 if success, error code on error
  cdns3_ep0_standard_request - Handling standard USB requests
  @priv_dev: extended gadget object
  @ctrl_req: pointer to received setup packet
  Returns 0 if success, error code on error
  cdns3_ep0_setup_phase - Handling setup USB requests
  @priv_dev: extended gadget object
  cdns3_check_new_setup - Check if controller receive new SETUP packet.
  @priv_dev: extended gadget object
  The SETUP packet can be kept in on-chip memory or in system memory.
  cdns3_check_ep0_interrupt_proceed - Processes interrupt related to endpoint 0
  @priv_dev: extended gadget object
  @dir: USB_DIR_IN for IN direction, USB_DIR_OUT for OUT direction
  cdns3_gadget_ep0_enable
  @ep: pointer to endpoint zero object
  @desc: pointer to usb endpoint descriptor
  Function shouldn't be called by gadget driver,
  endpoint 0 is allways active
  cdns3_gadget_ep0_disable
  @ep: pointer to endpoint zero object
  Function shouldn't be called by gadget driver,
  endpoint 0 is allways active
  cdns3_gadget_ep0_set_halt
  @ep: pointer to endpoint zero object
  @value: 1 for set stall, 0 for clear stall
  Returns 0
 TODO 
  cdns3_gadget_ep0_queue - Transfer data on endpoint zero
  @ep: pointer to endpoint zero object
  @request: pointer to request object
  @gfp_flags: gfp flags
  Returns 0 on success, error code elsewhere
 cancel the request if controller receive new SETUP packet. 
 send STATUS stage. Should be called only for SET_CONFIGURATION 
		
		  Configure all non-control EPs which are not enabled by class driver
 wait until configuration set 
		
		  Since there is no completion interrupt for status stage,
		  it needs to call ->completion in software after
		  ep0_queue is back.
  cdns3_gadget_ep_set_wedge - Set wedge on selected endpoint
  @ep: endpoint object
  Returns 0
  cdns3_ep0_config - Configures default endpoint
  @priv_dev: extended gadget object
  Functions sets parameters: maximal packet size and enables interrupts
 init ep out 
 init ep in 
  cdns3_init_ep0 - Initializes software endpoint 0 of gadget
  @priv_dev: extended gadget object
  @priv_ep: extended endpoint object
  Returns 0 on success else error code.
 fill linux fields 
 SPDX-License-Identifier: GPL-2.0
  Cadence PCI Glue driver.
  Copyright (C) 2019 Cadence.
  Author: Pawel Laszczak <pawell@cadence.com>
	
	  Gets the second function.
	  It's little tricky, but this platform has two function.
	  The fist keeps resources for HostDevice while the second
	  keeps resources for DRDOTG.
	
	  For GADGETHOST PCI (devfn) function number is 0,
	  for OTG PCI (devfn) function number is 1.
 For GADGET device function number is 0. 
 Function 0: host(BAR_0) + device(BAR_1).
 Interrupt for XHCI, 
 Interrupt for OTGDRD. 
 SPDX-License-Identifier: GPL-2.0
  Cadence CDNSP DRD Driver.
  Copyright (C) 2020 Cadence.
  Author: Pawel Laszczak <pawell@cadence.com>
  Code based on Linux XHCI driver.
  Origin: Copyright (C) 2008 Intel Corp
  Ring initialization rules:
  1. Each segment is initialized to zero, except for link TRBs.
  2. Ring cycle state = 0. This represents Producer Cycle State (PCS) or
     Consumer Cycle State (CCS), depending on ring function.
  3. Enqueue pointer = dequeue pointer = address of first TRB in the segment.
  Ring behavior rules:
  1. A ring is empty if enqueue == dequeue. This means there will always be at
     least one free TRB in the ring. This is useful if you want to turn that
     into a link TRB and expand the ring.
  2. When incrementing an enqueue or dequeue pointer, if the next TRB is a
     link TRB, then load the pointer with the address in the link TRB. If the
     link TRB had its toggle bit set, you may need to update the ring cycle
     state (see cycle bit rules). You may have to do this multiple times
     until you reach a non-link TRB.
  3. A ring is full if enqueue++ (for the definition of increment above)
     equals the dequeue pointer.
  Cycle bit rules:
  1. When a consumer increments a dequeue pointer and encounters a toggle bit
     in a link TRB, it must toggle the ring cycle state.
  2. When a producer increments an enqueue pointer and encounters a toggle bit
     in a link TRB, it must toggle the ring cycle state.
  Producer rules:
  1. Check if ring is full before you enqueue.
  2. Write the ring cycle state to the cycle bit in the TRB you're enqueuing.
     Update enqueue pointer between each write (which may update the ring
     cycle state).
  3. Notify consumer. If SW is producer, it rings the doorbell for command
     and endpoint rings. If controller is the producer for the event ring,
     and it generates an interrupt according to interrupt modulation rules.
  Consumer rules:
  1. Check if TRB belongs to you. If the cycle bit == your ring cycle state,
     the TRB is owned by the consumer.
  2. Update dequeue pointer (which may update the ring cycle state) and
     continue processing TRBs until you reach a TRB which is not owned by you.
  3. Notify the producer. SW is the consumer for the event ring, and it
     updates event ring dequeue pointer. Controller is the consumer for the
     command and endpoint rings; it generates events on the event ring
     for these.
  Returns zero if the TRB isn't in this segment, otherwise it returns the DMA
  address of the TRB.
 Unchain chained link TRBs. 
 Preserve only the cycle bit of this TRB. 
  Updates trb to point to the next TRB in the ring, and updates seg if the next
  TRB is in a new segment. This does not skip over link TRBs, and it does not
  effect the ring dequeue or enqueue pointers.
  See Cycle bit rules. SW is the consumer for the event ring only.
  Don't make a ring full of link TRBs. That would be dumb and this would loop.
 event ring doesn't have link trbs, check for last trb. 
 All other rings have link trbs. 
  See Cycle bit rules. SW is the consumer for the event ring only.
  Don't make a ring full of link TRBs. That would be dumb and this would loop.
  If we've just enqueued a TRB that is in the middle of a TD (meaning the
  chain bit is set), then set the chain bit in all the following link TRBs.
  If we've enqueued the last TRB in a TD, make sure the following link TRBs
  have their chain bit cleared (so that each Link TRB is a separate TD).
  @more_trbs_coming:	Will you enqueue more TRBs before ringing the doorbell.
 If this is not event ring, there is one less usable TRB. 
 Update the dequeue pointer further if that was a link TRB 
		
		  If the caller doesn't plan on enqueuing more TDs before
		  ringing the doorbell, then we don't want to give the link TRB
		  to the hardware just yet. We'll give the link TRB back in
		  cdnsp_prepare_ring() just before we enqueue the TD at the
		  top of the ring.
 Give this link TRB to the hardware 
 Toggle the cycle bit after the last ring segment. 
  Check to see if there's room to enqueue num_trbs on the ring and make sure
  enqueue pointer will not advance into dequeue segment.
  Workaround for L1: controller has issue with resuming from L1 after
  setting doorbell for endpoint during L1 state. This function forces
  resume signal in such case.
 Ring the doorbell after placing a command on the ring. 
  Ring the doorbell after placing a transfer on the ring.
  Returns true if doorbell was set, otherwise false.
	
	  Don't ring the doorbell for this endpoint if endpoint is halted or
	  disabled.
 For stream capable endpoints driver can ring doorbell only twice. 
 Doorbell was set. 
  Get the right ring for the given pep and stream_id.
  If the endpoint supports streams, boundary check the USB request's stream ID.
  If the endpoint doesn't support streams, return the singular endpoint ring.
 Ring the doorbell for any rings with pending requests. 
 A ring has pending Request if its TD list is not empty. 
  Get the hw dequeue pointer controller stopped on, either directly from the
  endpoint context, or if streams are in use from the stream context.
  The returned hw_dequeue contains the lowest four bits with cycle state
  and possible stream context type.
  Move the controller endpoint ring dequeue pointer past cur_td.
  Record the new state of the controller endpoint ring dequeue segment,
  dequeue pointer, and new consumer cycle state in state.
  Update internal representation of the ring's dequeue pointer.
  We do this in three jumps:
   - First we update our new ring state to be the same as when the
     controller stopped.
   - Then we traverse the ring to find the segment that contains
     the last TRB in the TD. We toggle the controller new cycle state
     when we pass any link TRBs with the toggle cycle bit set.
   - Finally we move the dequeue state one TRB further, toggling the cycle bit
     if we've moved it past a link TRB with the toggle cycle bit set.
	
	  Dig out the cycle state saved by the controller during the
	  stop endpoint command.
	
	  We want to find the pointer, segment and cycle state of the new trb
	  (the one after current TD's last_trb). We know the cycle state at
	  hw_dequeue, so walk the ring until both hw_dequeue and last_trb are
	  found.
 Search wrapped around, bail out. 
  flip_cycle means flip the cycle bit of all but the first and last TRB.
  (The last TRB actually points to the ring enqueue pointer, which is not part
  of this TD.) This is used to remove partially enqueued isoc TDs from a ring.
 flip cycle if asked to 
  This TD is defined by the TRBs starting at start_trb in start_seg and ending
  at end_trb, which may be in another segment. If the suspect DMA address is a
  TRB in this TD, this function returns that TRB's segment. Otherwise it
  returns 0.
 We may get an event for a Link TRB in the middle of a TD 
 If the end TRB isn't in this segment, this is set to 0 
			
			  The end TRB is in this segment, so suspect should
			  be here
				
				  Case for one segment with a
				  TD wrapped around to the top
 Might still be somewhere in this segment 
 For in transfers we need to copy the data from bounce to sg 
	
	  Update the ring's dequeue segment and dequeue pointer
	  to reflect the new position.
	
	  Probably there was TIMEOUT during handling Set Dequeue Pointer
	  command. It's critical error and controller will be stopped.
 Restart any rings with pending requests 
	
	  If we stopped on the TD we need to cancel, then we have to
	  move the controller endpoint ring dequeue pointer past
	  this TD.
	
	  The event handler won't see a completion for this TD anymore,
	  so remove it from the endpoint ring's TD list.
	
	  During disconnecting all endpoint will be disabled so we don't
	  have to worry about updating dequeue pointer.
 Port status change events always have a successful completion code 
 Port Link State change detected. 
 Detach device. 
 Attach device. 
 Port reset. 
 if a bounce buffer was used to align this td then unmap it 
	
	  If the controller said we transferred more data than the buffer
	  length, Play it safe and say we didn't transfer anything.
		
		  The Endpoint Stop Command completion will take care of any
		  stopped TDs. A stopped TD may be restarted, so don't update
		  the ring dequeue pointer or take this TD off any lists yet.
 Update ring dequeue pointer 
 sum trb lengths from ring dequeue up to stop_trb, _excluding_ stop_trb 
	
	  Pass all the TRBs to the hardware at once and make sure this write
	  isn't reordered.
  Process control tds, update USB request status and actual_length.
	
	  if on data stage then update the actual_length of the USB
	  request and flag it as set, so it won't be overwritten in the event
	  for the last TRB.
 at status stage 
  Process isochronous tds, update usb request status and actual_length.
 handle completion code 
 field normally containing residue now contains transferred 
 Update ring dequeue pointer 
  Process bulk and interrupt tds, update usb request status and actual_length.
 Stopped on ep trb with invalid length, exclude it. 
  If this function returns an error condition, it means it got a Transfer
  event with a corrupted TRB DMA address or endpoint is disabled.
	
	  If device is disconnect then all requests will be dequeued
	  by upper layers as part of disconnect sequence.
	  We don't want handle such event to avoid racing.
 Some transfer events don't always point to a trb
 Look for some error cases that need special treatment. 
		
		  When the Isoch ring is empty, the controller will generate
		  a Ring Overrun Event for IN Isoch endpoint or Ring
		  Underrun Event for OUT Isoch endpoint.
		
		  When encounter missed service error, one or more isoc tds
		  may be missed by controller.
		  Set skip flag of the ep_ring; Complete the missed tds as
		  short transfer when process the ep_ring next time.
		
		  This TRB should be in the TD at the head of this ring's TD
		  list.
			
			  Don't print warnings if it's due to a stopped
			  endpoint generating an extra completion event, or
			  a event for the last TRB of a short TD we already
			  got a short event for.
			  The short TD is already removed from the TD list.
 Is this a TRB in the currently executing TD? 
		
		  Skip the Force Stopped Event. The event_trb(ep_trb_dma)
		  of FSE is not in the current TD pointed by ep_ring->dequeue
		  because that the hardware dequeue pointer still at the
		  previous TRB of the current TD. The previous TRB maybe a
		  Link TD or the last TRB of the previous TD. The command
		  completion handle will take care the rest.
 Something is busted, give up! 
		
		  Do not update event ring dequeue pointer if we're in a loop
		  processing missed tds.
	
	  If ep->skip is set, it means there are missed tds on the
	  endpoint ring need to take care of.
	  Process them as short transfer until reach the td pointed by
	  the event.
  This function handles all events on the event ring.
  Returns true for "possibly more events to process" (caller should call
  again), otherwise false if done.
 Does the controller or driver own the TRB? 
	
	  Barrier between reading the TRB_CYCLE (valid) flag above and any
	  reads of the event's flagsdata below.
		
		  Command can't be handled in interrupt context so just
		  increment command ring dequeue pointer.
 Update SW event ring dequeue pointer. 
	
	  Caller will call us again to check if there are more items
	  on the event ring.
  Generic function for queuing a TRB on a ring.
  The caller must have checked to make sure there's room on the ring.
  @more_trbs_coming:	Will you enqueue more TRBs before setting doorbell?
  Does various checks on the endpoint ring, and makes it ready to
  queue num_trbs.
 Make sure the endpoint has been added to controller schedule. 
 The cycle bit must be set as the last operation. 
 Toggle the cycle bit after the last ring segment. 
 Add this TD to the tail of the endpoint ring's TD list. 
  TD size is the number of max packet sized packets remaining in the TD
  (not including this TRB).
  Total TD packet count = total_packet_count =
      DIV_ROUND_UP(TD size in bytes  wMaxPacketSize)
  Packets transferred up to and including this TRB = packets_transferred =
      rounddown(total bytes transferred including this TRB  wMaxPacketSize)
  TD size = total_packet_count - packets_transferred
  It must fit in bits 21:17, so it can't be bigger than 31.
  This is taken care of in the TRB_TD_SIZE() macro
  The last TRB in a TD must have the TD size set to zero.
 One TRB with a zero-length data packet. 
 Queuing functions don't count the current TRB into transferred. 
 We got lucky, last normal TRB data on segment is packet aligned. 
 Is the last nornal TRB alignable by splitting it. 
	
	  We want enqd_len + trb_buff_len to sum up to a number aligned to
	  number which is divisible by the endpoint's wMaxPacketSize. IOW:
	  (size of currently enqueued TRBs + remainder) % wMaxPacketSize == 0.
 Create a max max_pkt sized bounce buffer pointed to by last trb. 
 Try without aligning.
	
	  Bounce buffer successful aligned and seg->bounce_dma will be used
	  in transfer TRB as new transfer buffer address.
 Deal with request.zero - need one more tdtrb. 
	
	  Don't give the first TRB to the hardware (by toggling the cycle bit)
	  until we've finished creating all the other TRBs. The ring's cycle
	  state may change as we enqueue the other TRBs, so save it too.
 Queue the TRBs, even if they are zero-length 
 TRB buffer should not cross 64KB boundaries 
 Don't change the cycle bit of the first TRB until later 
		
		  Chain all the TRBs together; clear the chain bit in the last
		  TRB to indicate it's the last TRB in the chain.
 Assuming TD won't span 2 segs 
 Only set interrupt on short packet for OUT endpoints. 
 Set the TRB length, TD size, and interrupter fields. 
 New sg entry 
 1 TRB for data, 1 for status 
 If there's data, queue data TRBs 
 Save the DMA address of the last TRB in the TD. 
 Queue status TRB. 
  The transfer burst count field of the isochronous TRB defines the number of
  bursts that are required to move all packets in this TD. Only SuperSpeed
  devices can burst up to bMaxBurst number of packets per service interval.
  This field is zero based, meaning a value of zero in the field means one
  burst. Basically, for everything but SuperSpeed devices, this field will be
  zero.
  Returns the number of packets in the last "burst" of packets. This field is
  valid for all speeds of devices. USB 2.0 devices can only do one "burst", so
  the last burst packet count is equal to the total number of packets in the
  TD. SuperSpeed endpoints can have up to 3 bursts. All but the last burst
  must contain (bMaxBurst + 1) number of packets, but the last burst can
  contain 1 to (bMaxBurst + 1) packets.
 bMaxBurst is zero based: 0 means 1 packet per burst. 
		
		  If residue is zero, the last burst contains (max_burst + 1)
		  number of packets, but the TLBPC field is zero-based.
 Queue function isoc transfer 
 A zero-length transfer still involves at least one packet. 
	
	  Set isoc specific data for the first TRB in a TD.
	  Prevent HW from getting the TRBs by keeping the cycle state
	  inverted in the first TDs isoc TRB.
 Fill the rest of the TRB fields, and remaining normal TRBs. 
 Calculate TRB length. 
 Set the TRB length, TD size, & interrupter fields. 
 Only first TRB is isoc, overwrite otherwise. 
 Only set interrupt on short packet for OUT EPs. 
 Set the chain bit for all except the last TRB. 
 Check TD length 
 Clean up a partially enqueued isoc transfer. 
	
	  Use the first TD as a temporary variable to turn the TDs we've
	  queued into No-ops with a software-owned cycle bit.
	  That way the hardware won't accidentally start executing bogus TDs
	  when we partially overwrite them.
	  td->first_trb and td->start_seg are already set.
 Every TRB except the first & last will have its cycle bit flipped. 
 Reset the ring enqueue back to the first TRB and its cycle bit. 
	
	  Check the ring to guarantee there is enough room for the whole
	  request. Do not insert any td of the USB Request to the ring if the
	  check failed.
		Command Ring Operations		
  Generic function for queuing a command TRB on the command ring.
  Driver queue only one command to ring in the moment.
 Queue a slot enable or disable request on the command ring 
 Queue an address device command TRB 
 Queue a reset device command TRB 
 Queue a configure endpoint command TRB 
  Suspend is set to indicate "Stop Endpoint Command" is being issued to stop
  activity on an endpoint that is about to be suspended.
 Set Transfer Ring Dequeue Pointer command. 
  Queue a halt endpoint request on the command ring.
  Queue a flush endpoint request on the command ring.
 SPDX-License-Identifier: GPL-2.0
  cdns3-ti.c - TI specific Glue layer for Cadence USB Controller
  Copyright (C) 2019 Texas Instruments Incorporated - https:www.ti.com
 USB Wrapper register offsets 
 Wrapper 1 register bits 
 Static config register bits 
 Modestrap modes 
 in KHZ 
 To KHz 
 assert RESET 
 set static config 
 set USB2_ONLY mode if requested 
 set default modestrap 
 de-assert RESET 
 SPDX-License-Identifier: GPL-2.0
  Cadence USBSS DRD Driver - gadget side.
  Copyright (C) 2018-2019 Cadence Design Systems.
  Copyright (C) 2017-2018 NXP
  Authors: Pawel Jez <pjez@cadence.com>,
           Pawel Laszczak <pawell@cadence.com>
           Peter Chen <peter.chen@nxp.com>
  Work around 1:
  At some situations, the controller may get stale data address in TRB
  at below sequences:
  1. Controller read TRB includes data address
  2. Software updates TRBs includes data address and Cycle bit
  3. Controller read TRB which includes Cycle bit
  4. DMA run with stale data address
  To fix this problem, driver needs to make the first TRB in TD as invalid.
  After preparing all TRBs driver needs to check the position of DMA and
  if the DMA point to the first just added TRB and doorbell is 1,
  then driver must defer making this TRB as valid. This TRB will be make
  as valid during adding next TRB only if DMA is stopped or at TRBERR
  interrupt.
  Issue has been fixed in DEV_VER_V3 version of controller.
  Work around 2:
  Controller for OUT endpoints has shared on-chip buffers for all incoming
  packets, including ep0out. It's FIFO buffer, so packets must be handle by DMA
  in correct order. If the first packet in the buffer will not be handled,
  then the following packets directed for other endpoints and  functions
  will be blocked.
  Additionally the packets directed to one endpoint can block entire on-chip
  buffers. In this case transfer to other endpoints also will blocked.
  To resolve this issue after raising the descriptor missing interrupt
  driver prepares internal usb_request object and use it to arm DMA transfer.
  The problematic situation was observed in case when endpoint has been enabled
  but no usb_request were queued. Driver try detects such endpoints and will
  use this workaround only for these endpoint.
  Driver use limited number of buffer. This number can be set by macro
  CDNS3_WA2_NUM_BUFFERS.
  Such blocking situation was observed on ACM gadget. For this function
  host send OUT data packet but ACM function is not prepared for this packet.
  It's cause that buffer placed in on chip memory block transfer to other
  endpoints.
  Issue has been fixed in DEV_VER_V2 version of controller.
  cdns3_clear_register_bit - clear bit in given register.
  @ptr: address of device controller register to be read and changed
  @mask: bits requested to clar
  cdns3_set_register_bit - set bit in given register.
  @ptr: address of device controller register to be read and changed
  @mask: bits requested to set
  cdns3_ep_addr_to_index - Macro converts endpoint address to
  index of endpoint object in cdns3_device.eps[] container
  @ep_addr: endpoint address for which endpoint object is required
  cdns3_next_request - returns next request from list
  @list: list containing requests
  Returns request or NULL if no requests in list
  cdns3_next_align_buf - returns next buffer from list
  @list: list containing buffers
  Returns buffer or NULL if no buffers in list
  cdns3_next_priv_request - returns next request from list
  @list: list containing requests
  Returns request or NULL if no requests in list
  cdns3_select_ep - selects endpoint
  @priv_dev:  extended gadget object
  @ep: endpoint address
  cdns3_get_tdl - gets current tdl for selected endpoint.
  @priv_dev:  extended gadget object
  Before calling this function the appropriate endpoint must
  be selected by means of cdns3_select_ep function.
  cdns3_allocate_trb_pool - Allocates TRB's pool for selected endpoint
  @priv_ep:  endpoint object
  Function will return 0 on success or -ENOMEM on allocation error
 Initialize the last TRB as Link TRB 
		
		  For stream capable endpoints driver use single correct TRB.
		  The last trb has zeroed cycle bit
  cdns3_ep_stall_flush - Stalls and flushes selected endpoint
  @priv_ep: endpoint object
  Endpoint must be selected before call to this function
 wait for DFLUSH cleared 
  cdns3_hw_reset_eps_config - reset endpoints configuration kept by controller.
  @priv_dev: extended gadget object
  cdns3_ep_inc_trb - increment a trb index.
  @index: Pointer to the TRB index to increment.
  @cs: Cycle state
  @trb_in_seg: number of TRBs in segment
  The index should never point to the link TRB. After incrementing,
  if it is point to the link TRB, wrap around to the beginning and revert
  cycle state bit The
  link TRB is always at the last TRB entry.
  cdns3_ep_inc_enq - increment endpoint's enqueue pointer
  @priv_ep: The endpoint whose enqueue pointer we're incrementing
  cdns3_ep_inc_deq - increment endpoint's dequeue pointer
  @priv_ep: The endpoint whose dequeue pointer we're incrementing
  cdns3_allow_enable_l1 - enabledisable permits to transition to L1.
  @priv_dev: Extended gadget object
  @enable: Enabledisable permit to transition to L1.
  If bit USB_CONF_L1EN is set and device receive Extended Token packet,
  then controller answer with ACK handshake.
  If bit USB_CONF_L1DS is set and device receive Extended Token packet,
  then controller answer with NYET handshake.
  cdns3_start_all_request - add to ring all request not started
  @priv_dev: Extended gadget object
  @priv_ep: The endpoint for whom request will be started.
  Returns return ENOMEM if transfer ring i not enough TRBs to start
          all requests.
	
	  If the last pending transfer is INTERNAL
	  OR streams are enabled for this endpoint
	  do NOT start new transfer till the last one is pending
  WA2: Set flag for all not ISOC OUT endpoints. If this flag is set
  driver try to detect whether endpoint need additional internal
  buffer for unblocking on-chip FIFO buffer. This flag will be cleared
  if before first DESCMISS interrupt the DMA will be armed.
 It should never occures 
  cdns3_wa2_descmiss_copy_data - copy data from internal requests to
  request queued by class driver.
  @priv_ep: extended endpoint object
  @request: request object
 driver can't touch pending request 
 unmap the gadget request before copying data 
 wait for next part of transfer 
 re-map the gadget request buffer
	
	  If transfer was queued before DESCMISS appear than we
	  can disable handling of DESCMISS interrupt. Driver assumes that it
	  can disable special treatment for this endpoint.
		
		   DESCMISS transfer has been finished, so data will be
		   directly copied from internal allocated usb_request
		   objects.
			
			  Intentionally driver returns positive value as
			  correct value. It informs that transfer has
			  been finished.
		
		  Driver will wait for completion DESCMISS transfer,
		  before starts new, not DESCMISS transfer.
  cdns3_wa2_descmissing_packet - handles descriptor missing event.
  @priv_ep: extended gadget object
  This function is used only for WA2. For more information see Work around 2
  description.
 check for pending transfer 
	 if this field is still assigned it indicate that transfer related
	  with this request has not been finished yet. Driver in this
	  case simply allocate next request and assign flag REQUEST_INTERNAL_CH
	  flag to previous one. It will indicate that current request is
	  part of the previous one.
 select EP0-out 
 reset tdl value to zero 
				
				  Memory barrier - Reset tdl before ringing the
				  doorbell.
					
					  ring doorbell to generate DESCMIS irq
  cdns3_gadget_giveback - call struct usb_request's ->complete callback
  @priv_ep: The endpoint to whom the request belongs to
  @priv_req: The request we're giving back
  @status: completion code for the request
  Must be called with controller's lock held and interrupts disabled. This
  function will unmap @req and call its ->complete() callback to notify upper
  layers that it has completed.
 Make DMA buffer CPU accessible 
 All TRBs have finished, clear the counter 
 Work around for stale data address in TRB
			
			  Re-enable interrupts to free DMA capable memory.
			  Driver can't free this memory with disabled
			  interrupts.
 check if buffer is aligned to 8. 
 Make DMA buffer CPU accessible 
 Transfer DMA buffer ownership back to device 
 must allocate buffer aligned to 8 
  For stream capable endpoints driver use only single TD. 
	
	  For DEV_VER_V2 controller version we have enabled
	  USB_CONF2_EN_TDL_TRB in DMULT configuration.
	  This enables TDL calculation based on TRB, hence setting TDL in TRB.
	
	  Memory barrier - Cycle Bit must be set before trb->length  and
	  trb->buffer fields.
 always first element 
clearing TRBERR and EP_STS_DESCMIS before seting DRDY
		
		  Controller version DEV_VER_V2 tdl calculation
		  is based on TRB
 WORKAROUND for transition to L0 
  cdns3_ep_run_transfer - start transfer on no-default endpoint hardware
  @priv_ep: endpoint object
  @request: request object
  Returns zero on success or negative value on failure
 must allocate buffer aligned to 8 
 prepare ring 
 Driver can't update LINK TRB if it is current processed. 
updating C bt in  Link TRB before starting DMA
		
		  For TRs size equal 2 enabling TRB_CHAIN for epXin causes
		  that DMA stuck at the LINK TRB.
		  On the other hand, removing TRB_CHAIN for longer TRs for
		  epXout cause that DMA stuck after handling LINK TRB.
		  To eliminate this strange behavioral driver set TRB_CHAIN
		  bit only for TR size > 2.
 set incorrect Cycle Bit for first trb
 fill TRB 
		
		  first trb should be prepared as last to avoid processing
		   transfer to early
 for last element in TD or in SG list 
 Don't set chain bit for last TRB 
	
	  Memory barrier - cycle bit must be set before other filds in trb.
 give the TD to the consumer
	
	  Memory barrier - Cycle Bit must be set before trb->length  and
	  trb->buffer fields.
	
	  For DMULT mode we can set address to transfer ring only once after
	  enabling endpoint.
		
		  Until SW is not ready to handle the OUT transfer the ISO OUT
		  Endpoint should be disabled (EP_CFG.ENABLE = 0).
		  EP_CFG_ENABLE must be set before updating ep_traddr.
clearing TRBERR and EP_STS_DESCMIS before seting DRDY
 WORKAROUND for transition to L0 
  cdns3_trb_handled - check whether trb has been handled by DMA
  @priv_ep: extended endpoint object.
  @priv_req: request object for checking
  Endpoint must be selected before invoking this function.
  Returns false if request has not been handled by DMA, else returns true.
  SR - start ring
  ER -  end ring
  DQ = priv_ep->dequeue - dequeue position
  EQ = priv_ep->enqueue -  enqueue position
  ST = priv_req->start_trb - index of first TRB in transfer ring
  ET = priv_req->end_trb - index of last TRB in transfer ring
  CI = current_index - index of processed TRB by DMA.
  As first step, we check if the TRB between the ST and ET.
  Then, we check if cycle bit for index priv_ep->dequeue
  is correct.
  some rules:
  1. priv_ep->dequeue never equals to current_index.
  2  priv_ep->enqueue never exceed priv_ep->dequeue
  3. exception: priv_ep->enqueue == priv_ep->dequeue
     and priv_ep->free_trbs is zero.
     This case indicate that TR is full.
  At below two cases, the request have been handled.
  Case 1 - priv_ep->dequeue < current_index
       SR ... EQ ... DQ ... CI ... ER
       SR ... DQ ... CI ... EQ ... ER
  Case 2 - priv_ep->dequeue > current_index
  This situation takes place when CI go through the LINK TRB at the end of
  transfer ring.
       SR ... CI ... EQ ... DQ ... ER
 current trb doesn't belong to this request 
 The corner case for TRBS_PER_SEGMENT equal 2). 
 Request was dequeued and TRB was changed to TRB_LINK. 
			 Re-select endpoint. It could be changed by other CPU
			  during handling usb_gadget_giveback_request.
			 Re-select endpoint. It could be changed by other CPU
			  during handling usb_gadget_giveback_request.
 Cycle Bit must be updated before arming DMA. 
  cdns3_check_ep_interrupt_proceed - Processes interrupt related to endpoint
  @priv_ep: endpoint object
  Returns 0
		
		  Continue the previous transfer:
		  There is some racing between ERDY and PRIME. The device send
		  ERDY and almost in the same time Host send PRIME. It cause
		  that host ignore the ERDY packet and driver has to send it
		  again.
		
		  For isochronous transfer driver completes request on
		  IOC or on TRBERR. IOC appears only when device receive
		  OUT data packet. If host disable stream or lost some packet
		  then the only way to finish all queued transfer is to do it
		  on TRBERR event.
 handle IOT with pending tdl 
	
	  MD_EXIT interrupt sets when stream capable endpoint exits
	  from MOVE DATA state of Bulk INOUT stream protocol state machine
	
	  WA2: this condition should only be meet when
	  priv_ep->flags & EP_QUIRK_EXTRA_BUF_DET or
	  priv_ep->flags & EP_QUIRK_EXTRA_BUF_EN.
	  In other cases this interrupt will be disabled.
  cdns3_check_usb_interrupt_proceed - Processes interrupt related to device
  @priv_dev: extended gadget object
  @usb_ists: bitmap representation of device's reported interrupts
  (usb_ists register value)
		
		  WORKAROUND: CDNS3 controller has issue with hardware resuming
		  from L1. To fix it, if any DMA transfer is pending driver
		  must starts driving resume signal immediately.
 Connection detected 
 Disconnection detected 
 reset
read again to check the actual speed
  cdns3_device_irq_handler - interrupt handler for device part of controller
  @irq: irq number for cdns3 core device
  @data: structure of cdns3
  Returns IRQ_HANDLED or IRQ_NONE
 check USB device interrupt 
		 After masking interrupts the new interrupts won't be
		  reported in usb_istsep_ists. In order to not lose some
		  of them driver disables only detected interrupts.
		  They will be enabled ASAP after clearing source of
		  interrupt. This an unusual behavior only applies to
		  usb_ists register.
 mask deferred interrupt. 
 check endpoint interrupt 
  cdns3_device_thread_irq_handler - interrupt handler for device part
  of controller
  @irq: irq number for cdns3 core device
  @data: structure of cdns3
  Returns IRQ_HANDLED or IRQ_NONE
 handle default endpoint OUT 
 handle default endpoint IN 
 check if interrupt from non default endpoint, if no exit 
  cdns3_ep_onchip_buffer_reserve - Try to reserve onchip buf for EP
  The real reservation will occur during write to EP_CFG register,
  this function is used to check if the 'size' reservation is allowed.
  @priv_dev: extended gadget object
  @size: the size (KB) for EP would like to allocate
  @is_in: endpoint direction
  Return 0 if the required size can met or negative value on failure
 2KB are reserved for EP0
		
		   ALL OUT EPs are shared the same chunk onchip memory, so
		  driver checks if it already has assigned enough buffers
 For dev_ver > DEV_VER_V2 DMULT is configured per endpoint 
  cdns3_ep_config - Configure hardware endpoint
  @priv_ep: extended endpoint object
  @enable: set EP_CFG_ENABLE bit in ep_cfg register.
 It's limitation that driver assumes in driver. 
 all other speed are not supported 
 onchip buffer is only allocated before configuration 
			
			  Stream capable endpoints are handled by using ep_tdl
			  register. Other endpoints use TDL from TRB feature.
  Enable Stream Bit TDL chk and SID chk 
 Find correct direction for HW endpoint according to description 
 ep name pattern likes epXin or epXout 
   Cadence IP has one limitation that all endpoints must be configured
  (Type & MaxPacketSize) before setting configuration through hardware
  register, it means we can't change endpoints configuration after
  set_configuration.
  This function set EP_CLAIMED flag which is added when the gadget driver
  uses usb_ep_autoconfig to configure specific endpoint;
  When the udc driver receives set_configurion request,
  it goes through all claimed endpoints, and configure all endpoints
  accordingly.
  At usb_ep_ops.enabledisable, we only enable and disable endpoint through
  ep_cfg register which can be changed after set_configuration, and do
  some software operation accordingly.
  cdns3_gadget_ep_alloc_request - Allocates request
  @ep: endpoint object associated with request
  @gfp_flags: gfp flags
  Returns allocated request address, NULL on allocation error
  cdns3_gadget_ep_free_request - Free memory occupied by request
  @ep: endpoint object associated with request
  @request: request to free memory
  cdns3_gadget_ep_enable - Enable endpoint
  @ep: endpoint object
  @desc: endpoint descriptor
  Returns 0 on success, error code elsewhere
	
	  For some versions of controller at some point during ISO OUT traffic
	  DMA reads Transfer Ring for the EP which has never got doorbell.
	  This issue was detected only on simulation, but to avoid this issue
	  driver add protection against it. To fix it driver enable ISO OUT
	  endpoint before setting DRBL. This special treatment of ISO OUT
	  endpoints are recommended by controller specification.
		
		  Enable stream support (SS mode) related interrupts
		  in EP_STS_EN Register
 enable interrupt for selected endpoint 
 one TRB is reserved for link TRB used in DMULT mode
  cdns3_gadget_ep_disable - Disable endpoint
  @ep: endpoint object
  Returns 0 on success, error code elsewhere
	
	  Driver needs some time before resetting endpoint.
	  It need waits for clearing DBUSY bit or for timeout expired.
	  10us is enough time for controller to stop transfer.
  __cdns3_gadget_ep_queue - Transfer data on endpoint
  @ep: endpoint object
  @request: request object
  @gfp_flags: gfp flags
  Returns 0 on success, error code elsewhere
	
	  For stream capable endpoint if prime irq flag is set then only start
	  request.
	  If hardware endpoint configuration has not been set yet then
	  just queue request in deferred list. Transfer will be started in
	  cdns3_set_hw_configuration.
  cdns3_gadget_ep_dequeue - Remove request from transfer queue
  @ep: endpoint object associated with request
  @request: request object
  Returns 0 on success, error code elsewhere
 Update ring only if removed request is on pending_req_list list 
  __cdns3_gadget_ep_set_halt - Sets stall on selected endpoint
  Should be called after acquiring spin_lock and selecting ep
  @priv_ep: endpoint object to set stall on.
  __cdns3_gadget_ep_clear_halt - Clears stall on selected endpoint
  Should be called after acquiring spin_lock and selecting ep
  @priv_ep: endpoint object to clear stall on
 wait for EPRST cleared 
  cdns3_gadget_ep_set_halt - Setsclears stall on selected endpoint
  @ep: endpoint object to setclear stall on
  @value: 1 for set stall, 0 for clear stall
  Returns 0 on success, error code elsewhere
  cdns3_gadget_get_frame - Returns number of actual ITP frame
  @gadget: gadget object
  Returns number of actual ITP frame
 Start driving resume signaling to indicate remote wakeup. 
 enable interrupts for endpoint 0 (in and out) 
	
	  Driver needs to modify LFPS minimal U1 Exit time for DEV_VER_TI_V1
	  revision of controller.
	
	  By default some platforms has set protected access to memory.
	  This cause problem with cache, so driver restore non-secure
	  access to memory.
 enable generic interrupt
  keep Fast Access bit 
  cdns3_gadget_udc_start - Gadget start
  @gadget: gadget object
  @driver: driver which operates on this gadget
  Returns 0 on success, error code elsewhere
 limit speed if necessary 
 default to superspeed 
  cdns3_gadget_udc_stop - Stops gadget
  @gadget: gadget object
  Returns 0
 disable interrupt for device 
 ep0 OUT point to ep0 IN. 
  cdns3_init_eps - Initializes software endpoints of gadget
  @priv_dev: extended gadget object
  Returns 0 on success, error code elsewhere
 Read it from USB_CAP3 to USB_CAP5 
 i div 16 
 i % 16 
 set parent of endpoint object 
 Check the maximum_speed parameter 
 default to superspeed 
 fill gadget fields 
 initialize endpoint container 
 allocate memory for setup packet buffer 
 add USB gadget device 
 Ensure 32-bit DMA Mask in case we switched back from Host mode 
	
	  Because interrupt line can be shared with other components in
	  driver it can't use IRQF_ONESHOT flag here.
 disable interrupt for device 
  cdns3_gadget_init - initialize device structure
  @cdns: cdns instance
  This function initializes the gadget.
 SPDX-License-Identifier: GPL-2.0
  Cadence CDNSP DRD Driver.
  Copyright (C) 2020 Cadence.
  Author: Pawel Laszczak <pawell@cadence.com>
Detect gadget speed based on PORTSC register
 If device is detached then speed will be USB_SPEED_UNKNOWN.
  Given a port state, this function returns a value that would result in the
  port being in the same state, if the value was written to the port status
  control register.
  Save Read Only (RO) bits and save readwrite bits where
  writing a 0 clears the bit and writing a 1 sets the bit (RWS).
  For all other types (RW1S, RW1CS, RW, and RZ), writing a '0' has no effect.
 Save read-only status and port state. 
  cdnsp_find_next_ext_cap - Find the offset of the extended capabilities
                            with capability ID id.
  @base: PCI MMIO registers base address.
  @start: Address at which to start looking, (0 or HCC_PARAMS to start at
          beginning of list)
  @id: Extended capability ID to search for.
  Returns the offset of the next matching extended capability structure.
  Some capabilities can occur several times,
  e.g., the EXT_CAPS_PROTOCOL, and this provides a way to find them all.
  Disable interrupts and begin the controller halting process.
  Force controller into halt state.
  Disable any IRQs and clear the runstop bit.
  Controller will complete any current and actively pipelined transactions, and
  should halt within 16 ms of the runstop bit being cleared.
  Read controller Halted bit in the status register to see when the
  controller is finished.
  device controller died, register read returns 0xffffffff, or command never
  ends.
  Set the run bit and wait for the device to be running.
	
	  Wait for the STS_HALT Status bit to be 0 to indicate the device is
	  running.
  Reset a halted controller.
  This resets pipelines, timers, counters, state machines, etc.
  Transactions will be terminated immediately, and operational registers
  will be set to their defaults.
	
	  CDNSP cannot write any doorbells or operational registers other
	  than status until the "Controller Not Ready" flag is cleared.
  cdnsp_get_endpoint_index - Find the index for an endpoint given its
  descriptor.Use the return value to right shift 1 for the bitmask.
  Index = (epnum  2) + direction - 1,
  where direction = 0 for OUT, 1 for IN.
  For control endpoints, the IN index is used (OUT index is unused), so
  index = (epnum  2) + direction - 1 = (epnum  2) + 1 - 1 = (epnum  2)
  Find the flag for this endpoint (for use in the control context). Use the
  endpoint index to create a bitmask. The slot context is bit 0, endpoint 0 is
  bit 1, etc.
  Remove the request's TD from the endpoint ring. This may cause the
  controller to stop USB transfers, potentially stopping in the middle of a
  TRB buffer. The controller should pick up where it left off in the TD,
  unless a Set Transfer Ring Dequeue Pointer is issued.
  The TRBs that make up the buffers for the canceled request will be "removed"
  from the ring. Since the ring is a contiguous structure, they can't be
  physically removed. Instead, there are two options:
   1) If the controller is in the middle of processing the request to be
      canceled, we simply move the ring's dequeue pointer past those TRBs
      using the Set Transfer Ring Dequeue Pointer command. This will be
      the common case, when drivers timeout on the last submitted request
      and attempt to cancel.
   2) If the controller is in the middle of a different TD, we turn the TRBs
      into a series of 1-TRB transfer no-op TDs. No-ops shouldn't be chained.
      The controller will need to invalidate the any TRBs it has cached after
      the stop endpoint command.
   3) The TD may have completed by the time the Stop Endpoint Command
      completes, so software needs to handle that case too.
	
	  When a device's add flag and drop flag are zero, any subsequent
	  configure endpoint command will leave that endpoint's state
	  untouched. Make sure we don't leave any old state in the input
	  endpoint contexts.
 Endpoint 0 is always valid 
 Issue a configure endpoint command and wait for it to finish. 
 Check the owner of the TRB. 
 Check the owner of the TRB. 
		
		  Check whether the completion event is for last queued
		  command.
		
		  In device mode driver can call reset endpoint command
		  from any endpoint state.
 Don't issue the command if there's no endpoints to update. 
 Fix up Context Entries field. Minimum value is EP0 == BIT(1). 
  This submits a Reset Device Command, which will set the device state to 0,
  set the device address to 0, and disable all the endpoints except the default
  control endpoint. The USB core should come back and call
  cdnsp_setup_device(), and then re-set up the configuration.
 If device is not setup, there is no point in resetting it. 
	
	  During Reset Device command controller shall transition the
	  endpoint ep0 to the Running State.
	
	  After Reset Device command all not default endpoints
	  are in Disabled state.
  Sets the MaxPStreams field and the Linear Stream Array field.
  Sets the dequeue pointer to the stream context array.
	 MaxPStreams is the number of stream context array entries, not the
	  number we're actually using. Must be in 2^(MaxPstreams + 1) format.
	  fls(0) = 0, fls(0x1) = 1, fls(0x10) = 2, fls(0x100) = 3, etc.
  The drivers use this function to prepare a bulk endpoints to use streams.
  Don't allow the call to succeed if endpoint only supports one stream
  (which means it doesn't support streams at all).
	
	  Add two to the number of streams requested to account for
	  stream 0 that is reserved for controller usage and one additional
	  for TASK SET FULL response.
 The stream context array size must be a power of two 
 Subtract 1 for stream 0, which drivers can't use. 
 If device is not setup, there is no point in resetting it 
  Issue an Address Device command with BSR=0 if setup is SETUP_CONTEXT_ONLY
  or with BSR = 1 if set_address is SETUP_CONTEXT_ADDRESS.
 Zero the input context control for later use. 
 Endpoint was unconfigured by Reset Device command. 
 Remove all queued USB requests. 
 Requests has been dequeued during disabling endpoint. 
 Default to superspeed. 
 limit speed if necessary 
  Update Event Ring Dequeue Pointer:
  - When all events have finished
  - To avoid "Event Ring Full Error" condition
 If necessary, update the HW's version of the event ring deq ptr. 
 Clear the event handler busy flag (RW1C). 
 Set the address in the Command Ring Control register. 
 Update ring dequeue pointer. 
 Does the controller or driver own the TRB? 
 Remove internally queued request for ep0. 
 Clear interrupt line 
  Stop controller.
  This function is called by the gadget core when the driver is removed.
  Disable slot, disable IRQs, and quiesce the controller.
 Remote wakeup feature is not enabled by host. 
 Set to XBUF_TX_TAG_MASK_0 register. 
 Set reg to XBUF_TX_TAG_MASK_N related with this endpoint. 
 Start from OUT endpoint. 
 0 for OUT, 1 for IN. 
		
		  Ep0 is bidirectional, so ep0in and ep0out are represented by
		  pdev->eps[0]
 Low speed is not supported. 
 Cache read-only capability registers 
 Make sure the Device Controller is halted. 
 Reset the internal controller memory state and registers. 
	
	  Set dma_mask and coherent_dma_mask to 64-bits,
	  if controller supports 64-bit addressing.
		
		  This is to avoid error in cases where a 32-bit USB
		  controller is used on a 64-bit capable system.
	
	  Software workaround for U1: after transition
	  to U1 the controller starts gating clock, and in some cases,
	  it causes that controller stack.
 Default to SSP 
	
	  Controller supports not aligned buffer but it should improve
	  performance.
 Limit speed if necessary. 
  cdnsp_gadget_init - initialize device structure
  @cdns: cdnsp instance
  This function initializes the gadget.
 SPDX-License-Identifier: GPL-2.0
  cdns3-imx.c - NXP i.MX specific Glue layer for Cadence USB Controller
  Copyright (C) 2019 NXP
 Register bits definition 
 USB3_CORE_CTRL1 
 USB3_INT_REG 
 DEV INT b9:8 
 HOST INT b7:0 
 USB3_CORE_STATUS 
 USB3_SSPHY_STATUS 
 OTG registers definition 
 OTGSTS 
 xHCI registers definition  
 Register bits definition 
 XECP_AUX_CTRL_REG1 
 XECP_PM_PMCSR 
 SW request low power when all usb ports allow to it ??? 
 mdctrl_clk_sel 
 wait for mdctrl_clk_status 
 wait lpm_clk_req to be 0 
 wait phy_refclk_req to be 0 
 SW request D0 
 clr CFG_RXDET_P3_EN 
 clear mdctrl_clk_sel 
 wait CLK_125_REQ to be 1 
 wait for mdctrl_clk_status is cleared 
 Wait until OTG_NRDY is 0 
 Indicate if the controller was power lost before 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
  Cadence CDNSP DRD Driver.
  Copyright (C) 2020 Cadence.
  Author: Pawel Laszczak <pawell@cadence.com>
  Code based on Linux XHCI driver.
  Origin: Copyright (C) 2008 Intel Corp.
  Allocates a generic ring segment from the ring pool, sets the dma address,
  initializes the segment to zero, and sets the private next pointer to NULL.
  "All components of all Command and Transfer TRBs shall be initialized to '0'"
 If the cycle state is 0, set the cycle bit to 1 for all the TRBs. 
  Make the prev segment point to the next segment.
  Change the last TRB in the prev segment to be a Link TRB which points to the
  DMA address of the next segment. The caller needs to set any Link TRB
  related flags, such as End TRB, Toggle Cycle, and no snoop.
		
		  Set the last TRB in the segment to have a TRB type ID
		  of Link TRB
  Link the ring to the new segments.
  Set Toggle Cycle for the new ring if needed.
  We need a radix tree for mapping physical addresses of TRBs to which stream
  ID they belong to. We need to do this because the device controller won't
  tell us which stream ring the TRB came from. We could store the stream ID
  in an event data TRB, but that doesn't help us for the cancellation case,
  since the endpoint may stop before it reaches that event data TRB.
  The radix tree maps the upper portion of the TRB DMA address to a ring
  segment that has the same upper portion of DMA addresses. For example,
  say I have segments of size 1KB, that are always 1KB aligned. A segment may
  start at 0x10c91000 and end at 0x10c913f0. If I use the upper 10 bits, the
  key to the stream ID is 0x43244. I can use the DMA address of the TRB to
  pass the radix tree a key to get the right stream ID:
 	0x10c90fff >> 10 = 0x43243
 	0x10c912c0 >> 10 = 0x43244
 	0x10c91400 >> 10 = 0x43245
  Obviously, only those TRBs with DMA addresses that are within the segment
  will make the radix tree return the stream ID for that ring.
  Caveats for the radix tree:
  The radix tree uses an unsigned long as a key pair. On 32-bit systems, an
  unsigned long will be 32-bits; on a 64-bit system an unsigned long will be
  64-bits. Since we only request 32-bit DMA addresses, we can use that as the
  key on 32-bit or 64-bit systems (it would also be fine if we asked for 64-bit
  PCI DMA addresses on a 64-bit system). There might be a problem on 32-bit
  extended systems (where the DMA address can be bigger than 32-bits),
  if we allow the PCI dma mask to be bigger than 32-bits. So don't do that.
 Skip any segments that were already added. 
	
	  The ring is initialized to 0. The producer must write 1 to the cycle
	  bit to handover ownership of the TRB, so PCS = 1. The consumer must
	  compare CCS to the cycle bit to check ownership, so CCS = 1.
	 
	  New rings are initialized with cycle state equal to 1; if we are
	  handling ring expansion, set the cycle state equal to the old ring.
	
	  Each segment has a link TRB, and leave an extra TRB for SW
	  accounting purpose
 Allocate segments and link them for a ring. 
 Allocate first segment. 
 Allocate all other segments. 
  Create a new ring with zero or more segments.
  Link each segment together into a ring.
  Set the end flag and the cycle toggle bit on the last segment.
 Only event ring does not use link TRB. 
  Expand an existing ring.
  Allocate a new ring which has same segment numbers and link the two rings.
 Allocate number of segments we needed, or double the ring size. 
 Increment ep index by offset of start of ep ctx array. 
 The stream context array must be a power of 2. 
	
	  Driver uses intentionally the device_pool to allocated stream
	  context array. Device Pool has 2048 bytes of size what gives us
	  128 entries.
  Change an endpoint's internal structure so it supports stream IDs.
  The number of requested streams includes stream 0, which cannot be used by
  driver.
  The number of stream contexts in the stream context array may be bigger than
  the number of streams the driver wants to use. This is because the number of
  stream context array entries must be a power of two.
 Initialize the array of virtual pointers to stream rings. 
 Initialize the array of DMA addresses for stream rings for the HW. 
	
	  Allocate rings for all the streams that the driver will use,
	  and add their segment DMA addresses to the radix tree.
	  Stream 0 is reserved.
 Set deq ptr, cycle bit, and stream context type. 
 Frees all stream contexts associated with the endpoint. 
 All the cdnsp_tds in the ring's TD list should be freed at this point.
 Allocate endpoint 0 ring. 
 Point to output device context in dcbaa. 
 Setup an controller private device for a Set Address command. 
 Only the control endpoint is valid - one endpoint context. 
 Speed was not set , this shouldn't happen. 
  Convert interval expressed as 2^(bInterval - 1) == interval into
  straight exponent value 2^n == interval.
	
	  Full speed isoc endpoints specify interval in frames,
	  not microframes. We are using microframes everywhere,
	  so adjust accordingly.
 1 frame = 2^3 uframes 
 Controller handles only up to 512ms (2^12). 
  Convert bInterval expressed in microframes (in 1-255 range) to exponent of
  microframes, rounded down to nearest power of 2.
  Return the polling interval.
  The polling interval is expressed in "microframes". If controllers's Interval
  field is set to N, it will service the endpoint every 2^(Interval)125us.
  The "Mult" field in the endpoint context is only set for SuperSpeed isoc eps.
  High speed endpoint descriptors can define "the number of additional
  transaction opportunities per microframe", but that goes in the Max Burst
  endpoint context field.
 Super speed and Plus have max burst in ep companion desc 
  Return the maximum endpoint service interval time (ESIT) payload.
  Basically, this is the maxpacket size, multiplied by the burst size
  and mult size.
 Only applies for interrupt or isochronous endpoints
 SuperSpeedPlus Isoc ep sending over 48k per EIST. 
 SuperSpeed or SuperSpeedPlus Isoc ep with less than 48k per esit 
 A 0 in max burst means 1 transfer per ESIT 
	
	  Get values to fill the endpoint context, mostly from ep descriptor.
	  The average TRB buffer length for bulk endpoints is unclear as we
	  have no clue on scatter gather list entry size. For Isoc and Int,
	  set it to max available.
 Allow 3 retries for everything but isoc, set CErr = 3. 
 Controller spec indicates that ctrl ep avg TRB Length should be 8. 
 Set up the endpoint ring. 
 Fill the endpoint context 
 Update controller event ring dequeue pointer 
	
	  Don't clear the EHB bit (which is RW1C) because
	  there might be more events to service.
 Port offset and count in the third dword.
  Scan the Extended Capabilities for the "Supported Protocol Capabilities" that
  specify what speeds each port is supposed to be.
 Driver expects max 2 extended protocol capability. 
  Initialize memory for CDNSP (one-time init).
  Program the PAGESIZE register, initialize the device context array, create
  device contexts, set up a command ring segment, create event
  ring (one for now).
	
	  Use 4K pages, since that's common and the minimum the
	  controller supports
	
	  Doorbell array must be physically contiguous
	  and 64-byte (cache line) aligned.
	
	  Initialize the ring segment pool.  The ring must be a contiguous
	  structure comprised of TRBs. The TRBs must be 16 byte aligned,
	  however, the command ring segment needs 64-byte aligned segments
	  and our use of dma addresses in the trb_address_map radix tree needs
	  TRB_SEGMENT_SIZE alignment, so driver pick the greater alignment
	  need.
 Set up the command ring to have one segments for now. 
 Set the address in the Command Ring Control register 
 Set ir_set to interrupt register set 0 
	
	  Event ring setup: Allocate a normal ring, but also setup
	  the event ring segment table (ERST).
 Set ERST count with the number of entries in the segment table. 
 Set the segment table base address. 
 Set the event ring dequeue address. 
 SPDX-License-Identifier: GPL-2.0
  Cadence CDNSP DRD Driver.
  Copyright (C) 2020 Cadence.
  Author: Pawel Laszczak <pawell@cadence.com>
set device address
		
		  Function Remote Wake Capable	D0
		  Function Remote Wakeup	D1
 check if endpoint is stalled 
		
		  Test mode must be set before Status Stage but controller
		  will start testing sequence after Status Stage.
		
		  Remote wakeup is enabled when any function within a device
		  is enabled for function remote wakeup.
 Resets Sequence Number 
	
	  To handle Set SEL we need to receive 6 bytes from Host. So let's
	  queue a usb_request for 6 bytes.
		
		  Add request into pending list to block sending status stage
		  by libcomposite.
 Restore the ep0 to StoppedRunning state. 
	
	  Finishing previous SETUP transfer by removing request from
	  list and informing upper layer
 SPDX-License-Identifier: GPL-2.0
  Cadence USBSS and USBSSP DRD Driver.
  Copyright (C) 2018-2019 Cadence.
  Copyright (C) 2017-2018 NXP
  Copyright (C) 2019 Texas Instruments
  Author: Peter Chen <peter.chen@nxp.com>
          Pawel Laszczak <pawell@cadence.com>
          Roger Quadros <rogerq@ti.com>
  cdns_core_init_role - initialize role of operation
  @cdns: Pointer to cdns structure
  Returns 0 on success otherwise negative errno
	
	  If driver can't read mode by means of usb_get_dr_mode function then
	  chooses mode according with Kernel configuration. This setting
	  can be restricted later depending on strap pin configuration.
	
	  At this point cdns->dr_mode contains strap configuration.
	  Driver try update this setting considering kernel configuration
 Initialize idle role to start with 
  cdns_hw_role_state_machine  - role switch state machine based on hw events.
  @cdns: Pointer to controller structure.
  Returns next role to be entered based on hw events.
	
	  Role change state machine
	  Inputs: ID, VBUS
	  Previous state: cdns->role
	  Next state: role
		
		  Driver treats USB_ROLE_NONE synonymous to IDLE state from
		  controller specification.
 from HOST, we can only change to NONE 
 from GADGET, we can only change to NONE
 Program Lane swap and bring PHY out of RESET 
  cdns_hw_role_switch - switch roles based on HW state
  @cdns: controller
 Depends on role switch class 
 Do nothing if nothing changed 
 Back to current role 
  cdns_role_get - get current role of controller.
  @sw: pointer to USB role switch structure
  Returns role
  cdns_role_set - set current role of controller.
  @sw: pointer to USB role switch structure
  @role: the previous role
  Handles below events:
  - Role switch for dual-role devices
  - USB_ROLE_GADGET <--> USB_ROLE_NONE for peripheral-only devices
  cdns_wakeup_irq - interrupt handler for wakeup events
  @irq: irq number for cdns3cdnsp core device
  @data: structure of cdns
  Returns IRQ_HANDLED or IRQ_NONE
  cdns_init - probe for cdns3cdnsp core device
  @cdns: Pointer to cdns structure.
  Returns 0 on success otherwise negative errno
  cdns_remove - unbind drd driver and clean up
  @cdns: Pointer to cdns structure.
  Returns 0 on success otherwise negative errno
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0
  Cadence USBSS PCI Glue driver
  Copyright (C) 2018-2019 Cadence.
  Author: Pawel Laszczak <pawell@cadence.com>
	
	  Gets the second function.
	  It's little tricky, but this platform has two function.
	  The fist keeps resources for HostDevice while the second
	  keeps resources for DRDOTG.
	
	  for GADGETHOST PCI (devfn) function number is 0,
	  for OTG PCI (devfn) function number is 1
 function 0: host(BAR_0) + device(BAR_1).
 Interrupt for XHCI 
 Interrupt device. It's the same as for HOST. 
 Interrupt for OTGDRD. 
 set up platform device info 
 register platform device 
 SPDX-License-Identifier: GPL-2.0
  Cadence CDNSP DRD Driver.
  Copyright (C) 2020 Cadence.
  Author: Pawel Laszczak <pawell@cadence.com>
 SPDX-License-Identifier: GPL-2.0
  USBSS device controller driver Trace Support
  Copyright (C) 2018-2019 Cadence.
  Author: Pawel Laszczak <pawell@cadence.com>
 SPDX-License-Identifier: GPL-2.0
  Cadence USBSS and USBSSP DRD Driver - host side
  Copyright (C) 2018-2019 Cadence Design Systems.
  Copyright (C) 2017-2018 NXP
  Authors: Peter Chen <peter.chen@nxp.com>
           Pawel Laszczak <pawell@cadence.com>
 Glue needs to access xHCI region register for Power management 
 set usbcmd.EU3S 
 SPDX-License-Identifier: GPL-2.0
  Cadence USBSS DRD Driver.
  Copyright (C) 2018-2020 Cadence.
  Copyright (C) 2017-2018 NXP
  Copyright (C) 2019 Texas Instruments
  Author: Peter Chen <peter.chen@nxp.com>
          Pawel Laszczak <pawell@cadence.com>
          Roger Quadros <rogerq@ti.com>
  cdns3_plat_probe - probe for cdns3 core device
  @pdev: Pointer to cdns3 core platform device
  Returns 0 on success otherwise negative errno
	
	  The controller needs less time between bus and controller suspend,
	  and we also needs a small delay to avoid frequently entering low
	  power mode.
  cdns3_plat_remove() - unbind drd driver and clean up
  @pdev: Pointer to Linux platform device
  Returns 0 on success otherwise negative errno
 CONFIG_PM_SLEEP 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
  dwc3-exynos.c - Samsung Exynos DWC3 Specific Glue layer
  Copyright (c) 2012 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Author: Anton Tikhomirov <av.tikhomirov@samsung.com>
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0
  dwc3-haps.c - Synopsys HAPS PCI Specific glue layer
  Copyright (C) 2018 Synopsys, Inc.
  Authors: Thinh Nguyen <thinhn@synopsys.com>,
           John Youn <johnyoun@synopsys.com>
  struct dwc3_haps - Driver private structure
  @dwc3: child dwc3 platform_device
  @pci: our link to PCI bus
		
		  i.MX6QP and i.MX7D platform use a PCIe controller with the
		  same VID and PID as this USB controller. The system may
		  incorrectly match this driver to that PCIe controller. To
		  workaround this, specifically use class type USB to prevent
		  incorrect driver matching.
 Terminating Entry 
 SPDX-License-Identifier: GPL-2.0
  drd.c - DesignWare USB3 DRD Controller Dual-role support
  Copyright (C) 2017 Texas Instruments Incorporated - https:www.ti.com
  Authors: Roger Quadros <rogerq@ti.com>
 ignore non OTG events, we can't disable them in OEVTEN 
	
	  Prevent hostdevice reset from resetting OTG core.
	  If we don't do this then xhci_reset (USBCMD.HCRST) will reset
	  the signal outputs sent to the PHY, the OTG FSM logic of the
	  core and also the resets to the VBUS filters inside the core.
 Disable hibernation for simplicity 
	
	  Initialize OTG registers as per
	  Figure 11-4 OTG Driver Overall Programming Flow
 OCFG.SRPCap = 0, OCFG.HNPCap = 0 
 OEVT = FFFF 
 OEVTEN = 0 
 OEVTEN.ConIDStsChngEn = 1. Instead we enable all events 
	
	  OCTL.PeriMode = 1, OCTL.DevSetHNPEn = 0, OCTL.HstSetHNPEn = 0,
	  OCTL.HNPReq = 0
	
	  As per Figure 11-4 OTG Driver Overall Programming Flow,
	  block "Initialize GCTL for OTG operation".
 GCTL.PrtCapDir=2'b11 
 GUSB2PHYCFG0.SusPHY=0 
 Initialize OTG registers 
 disable all OTG IRQs 
 clear all events 
 should be called before Host controller driver is started 
 As per Figure 11-10 A-Device Flow Diagram 
 OCFG.HNPCap = 0, OCFG.SRPCap = 0. Already 0 
	
	  OCTL.PeriMode=0, OCTL.TermSelDLPulse = 0,
	  OCTL.DevSetHNPEn = 0, OCTL.HstSetHNPEn = 0
	
	  OCFG.DisPrtPwrCutoff = 01
	
	  OCFG.SRPCap = 1, OCFG.HNPCap = GHWPARAMS6.HNP_CAP
	  We don't want SRPHNP for simple dual-role so leave
	  these disabled.
	
	  OEVTEN.OTGADevHostEvntEn = 1
	  OEVTEN.OTGADevSessEndDetEvntEn = 1
	  We don't want HNProle-swap so leave these disabled.
 GUSB2PHYCFG.ULPIAutoRes = 10, GUSB2PHYCFG.SusPHY = 1 
 Set Port Power to enable VBUS: OCTL.PrtPwrCtl = 1 
 should be called after Host controller driver is stopped 
	
	  Exit from A-device flow as per
	  Figure 11-4 OTG Driver Overall Programming Flow
	
	  OEVTEN.OTGADevBHostEndEvntEn=0, OEVTEN.OTGADevHNPChngEvntEn=0
	  OEVTEN.OTGADevSessEndDetEvntEn=0,
	  OEVTEN.OTGADevHostEvntEn = 0
	  But we don't disable any OTG events
 OCTL.HstSetHNPEn = 0, OCTL.PrtPwrCtl=0 
 should be called before the gadget controller driver is started 
 As per Figure 11-20 B-Device Flow Diagram 
	
	  OCFG.HNPCap = GHWPARAMS6.HNP_CAP, OCFG.SRPCap = 1
	  but we keep them 0 for simple dual-role operation.
 OCFG.OTGSftRstMsk = 01 
	
	  OCTL.PeriMode = 1
	  OCTL.TermSelDLPulse = 01, OCTL.HNPReq = 0
	  OCTL.DevSetHNPEn = 0, OCTL.HstSetHNPEn = 0
 OEVTEN.OTGBDevSesVldDetEvntEn = 1 
 GUSB2PHYCFG.ULPIAutoRes = 0, GUSB2PHYCFG0.SusPHY = 1 
 GCTL.GblHibernationEn = 0. Already 0. 
 should be called after the gadget controller driver is stopped 
	
	  Exit from B-device flow as per
	  Figure 11-4 OTG Driver Overall Programming Flow
	
	  OEVTEN.OTGBDevHNPChngEvntEn = 0
	  OEVTEN.OTGBDevVBusChngEvntEn = 0
	  OEVTEN.OTGBDevBHostEndEvntEn = 0
 OCTL.DevSetHNPEn = 0, OCTL.HNPReq = 0, OCTL.PeriMode=1 
 don't do anything if debug user changed role to not OTG 
	
	  Device tree platforms should get extcon via phandle.
	  On ACPI platforms, we get the name from a device property.
	  This device property is for kernel internal use only and
	  is expected to be set by the glue code.
	
	  Try to get an extcon device from the USB PHY controller's "port"
	  node. Check if it has the "port" node first, to avoid printing the
	  error message from underlying code, as it's a valid case: extcon
	  device (and "port" node) may be missing in case of "usb-role-switch"
	  or OTG mode.
 use OTG block to get ID event 
 disable all OTG IRQs 
 clear all events 
 debug user might have changed role, clean based on current role 
 SPDX-License-Identifier: GPL-2.0+
  dwc3-st.c Support for dwc3 platform devices on ST Microelectronics platforms
  This is a small driver for the dwc3 to provide the glue logic
  to configure the controller. Tested on STi platforms.
  Copyright (C) 2014 Stmicroelectronics
  Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
  Contributors: Aymen Bouattay <aymen.bouattay@st.com>
                Peter Griffin <peter.griffin@linaro.org>
  Inspired by dwc3-omap.c and dwc3-exynos.c.
 glue registers 
  1'b0 : The host controller complies with the xHCI revision 0.96
  1'b1 : The host controller complies with the xHCI revision 1.0
  For all fields in USB2_VBUS_MNGMNT_SEL1
  2âb00 : Override value from Reg 0x30 is selected
  2âb01 : utmiotg_<signal_name> from usb3_top is selected
  2âb10 : pipew_<signal_name> from PIPEW instance is selected
  2âb11 : value is 1'b0
 Static DRD configuration 
  struct st_dwc3 - dwc3-st driver private structure
  @dev:		device pointer
  @glue_base:		ioaddr for the glue registers
  @regmap:		regmap pointer for getting syscfg
  @syscfg_reg_off:	usb syscfg control offset
  @dr_mode:		drd static hostdevice config
  @rstc_pwrdn:		rest controller for powerdown signal
  @rstc_rst:		reset controller for softreset signal
  st_dwc3_drd_init: program the port
  @dwc3_data: driver private structure
  Description: this function is to program the port as either host or device
  according to the static configuration passed from devicetree.
  OTG and dual role are not yet supported!
		
		  USB3_PORT2_FORCE_VBUSVALID When '1' and when
		  USB3_PORT2_DEVICE_NOT_HOST = 1, forces VBUSVLDEXT2 input
		  of the pico PHY to 1.
		
		  USB3_DELAY_VBUSVALID is ANDed with USB_C_VBUSVALID. Thus,
		  when set to â0â, it can delay the arrival of VBUSVALID
		  information to VBUSVLDEXT2 input of the pico PHY.
		  We don't want to do that so we set the bit to '1'.
  st_dwc3_init: init the controller via glue logic
  @dwc3_data: driver private structure
 configure mux for vbus, powerpresent and bvalid signals 
 Manage PowerDown 
 Manage SoftReset 
 Allocate and initialize the core 
	
	  Configure the USB port as device or host according to the static
	  configuration passed from DT.
	  DRD is the only mode currently supported so this will be enhanced
	  as soon as OTG is available.
 ST glue logic init 
 ST glue logic init 
 CONFIG_PM_SLEEP 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0
  dwc3-imx8mp.c - NXP imx8mp Specific Glue layer
  Copyright (c) 2020 NXP.
 USB wakeup registers 
 Global wakeup interrupt enable, also used to clear interrupt 
 Wakeup from connect or disconnect, only for superspeed 
 0 select vbus_valid, 1 select sessvld 
 Enable signal for wake up from u3 state 
 Enable signal for wake up from id change 
 Enable signal for wake up from vbus change 
 Enable signal for wake up from dpdm change 
 Wakeup enable 
 Wakeup disable 
			
			  Add wait for xhci switch from suspend
			  clock to normal clock to detect connection.
 SPDX-License-Identifier: GPL-2.0
  dwc3-pci.c - PCI Specific glue layer
  Copyright (C) 2010-2011 Texas Instruments Incorporated - https:www.ti.com
  Authors: Felipe Balbi <balbi@ti.com>,
 	    Sebastian Andrzej Siewior <bigeasy@linutronix.de>
  struct dwc3_pci - Driver private structure
  @dwc3: child dwc3 platform_device
  @pci: our link to PCI bus
  @guid: _DSM GUID
  @has_dsm_for_pm: true for devices which need to run _DSM on runtime PM
  @wakeup_work: work for asynchronous resume
 ULPI refclk already enabled 
 This comes from the Intel Android x86 tree wo any explanation 
 FIXME these quirks should be removed when AMD NL tapes out 
 On BYT the FW does not always enable the refclock 
			
			  A lot of BYT devices lack ACPI resource entries for
			  the GPIOs, add a fallback mapping to the reference
			  design GPIOs which all boards seem to use.
			
			  These GPIOs will turn on the USB2 PHY. Note that we have to
			  put the gpio descriptors again here because the phy driver
			  might want to grab them, too.
 Terminating Entry 
 CONFIG_PM || CONFIG_PM_SLEEP 
 CONFIG_PM 
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0
  dwc3-omap.c - OMAP Specific Glue layer
  Copyright (C) 2010-2011 Texas Instruments Incorporated - https:www.ti.com
  Authors: Felipe Balbi <balbi@ti.com>,
 	    Sebastian Andrzej Siewior <bigeasy@linutronix.de>
  All these registers belong to OMAP's Wrapper around the
  DesignWare USB3 Core.
 SYSCONFIG REGISTER 
 IRQ_EOI REGISTER 
 IRQS0 BITS 
 IRQMISC BITS 
 UTMI_OTG_STATUS REGISTER 
 UTMI_OTG_CTRL REGISTER 
 mask irqs 
 clear irq status flags 
 unmask irqs 
 enable all IRQs 
 disable all IRQs 
	
	  Differentiate between OMAP5 and AM437x.
	 
	  For OMAP5(ES2.0) and AM437x wrapper revision is same, even
	  though there are changes in wrapper register offsets.
	 
	  Using dt compatible to differentiate AM437x.
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0
  debugfs.c - DesignWare USB3 DRD Controller DebugFS file
  Copyright (C) 2010-2011 Texas Instruments Incorporated - https:www.ti.com
  Authors: Felipe Balbi <balbi@ti.com>,
 	    Sebastian Andrzej Siewior <bigeasy@linutronix.de>
 Convert to bytes 
 Convert to bytes 
 SPDX-License-Identifier: GPL-2.0
  dwc3-xilinx.c - Xilinx DWC3 controller specific glue driver
  Authors: Manish Narani <manish.narani@xilinx.com>
           Anurag Kumar Vulisha <anurag.kumar.vulisha@xilinx.com>
 USB phy reset mask register 
 Xilinx USB 3.0 IP Register 
 Versal USB Reset ID 
	
	  Enable or disable ULPI PHY reset from USB Controller.
	  This does not actually reset the phy, but just controls
	  whether USB controller can or cannot reset ULPI PHY.
 Assert and De-assert reset 
 Set PIPE Power Present signal in FPD Power Present Register
 Set the PIPE Clock Select bit in FPD PIPE Clock register 
	
	  This routes the USB DMA traffic to go through FPD path instead
	  of reaching DDR directly. This traffic routing is needed to
	  make SMMU and CCI work with USB DMA.
 Sentinel  }
 SPDX-License-Identifier: GPL-2.0
  dwc3-of-simple.c - OF glue layer for simple integrations
  Copyright (c) 2015 Texas Instruments Incorporated - https:www.ti.com
  Author: Felipe Balbi <balbi@ti.com>
  This is a combination of the old dwc3-qcom.c by Ivan T. Ivanov
  <iivanov@mm-sol.com> and the original patch adding support for Xilinx' SoC
  by Subbaraya Sundeep Bhatta <subbaraya.sundeep.bhatta@xilinx.com>
	
	  Some controllers need to toggle the usb3-otg reset before trying to
	  initialize the PHY, otherwise the PHY times out.
 Sentinel  }
 SPDX-License-Identifier: GPL-2.0
  ulpi.c - DesignWare USB3 Controller's ULPI PHY interface
  Copyright (C) 2015 Intel Corporation
  Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
 Register the interface 
 SPDX-License-Identifier: GPL-2.0
  gadget.c - DesignWare USB3 DRD Controller Gadget Framework Link
  Copyright (C) 2010-2011 Texas Instruments Incorporated - https:www.ti.com
  Authors: Felipe Balbi <balbi@ti.com>,
 	    Sebastian Andrzej Siewior <bigeasy@linutronix.de>
  dwc3_gadget_set_test_mode - enables usb2 test modes
  @dwc: pointer to our context structure
  @mode: the mode to set (J, K SE0 NAK, Force Enable)
  Caller should take care of locking. This function will return 0 on
  success or -EINVAL if wrong Test Selector is passed.
  dwc3_gadget_get_link_state - gets current state of usb link
  @dwc: pointer to our context structure
  Caller should take care of locking. This function will
  return the link state on success (>= 0) or -ETIMEDOUT.
  dwc3_gadget_set_link_state - sets usb link to a particular state
  @dwc: pointer to our context structure
  @state: the state to put link into
  Caller should take care of locking. This function will
  return 0 on success or -ETIMEDOUT.
	
	  Wait until device controller is ready. Only applies to 1.94a and
	  later RTL.
 set no action before sending new link state change 
 set requested state 
	
	  The following code is racy when called from dwc3_gadget_wakeup,
	  and is not needed, at least on newer versions
 wait for a change in DSTS 
  dwc3_ep_inc_trb - increment a trb index.
  @index: Pointer to the TRB index to increment.
  The index should never point to the link TRB. After incrementing,
  if it is point to the link TRB, wrap around to the beginning. The
  link TRB is always at the last TRB entry.
  dwc3_ep_inc_enq - increment endpoint's enqueue pointer
  @dep: The endpoint whose enqueue pointer we're incrementing
  dwc3_ep_inc_deq - increment endpoint's dequeue pointer
  @dep: The endpoint whose enqueue pointer we're incrementing
  dwc3_gadget_giveback - call struct usb_request's ->complete callback
  @dep: The endpoint to whom the request belongs to
  @req: The request we're giving back
  @status: completion code for the request
  Must be called with controller's lock held and interrupts disabled. This
  function will unmap @req and call its ->complete() callback to notify upper
  layers that it has completed.
  dwc3_send_gadget_generic_command - issue a generic command for the controller
  @dwc: pointer to the controller context
  @cmd: the command to be issued
  @param: command parameter
  Caller should take care of locking. Issue @cmd with a given @param to @dwc
  and wait for its completion.
  dwc3_send_gadget_ep_cmd - issue an endpoint command
  @dep: the endpoint to which the command is going to be issued
  @cmd: the command to be issued
  @params: parameters to the command
  Caller should handle locking. This function will issue @cmd with given
  @params to @dep and wait for its completion.
	
	  When operating in USB 2.0 speeds (HSFS), if GUSB2PHYCFG.ENBLSLPM or
	  GUSB2PHYCFG.SUSPHY is set, it must be cleared before issuing an
	  endpoint command.
	 
	  Save and clear both GUSB2PHYCFG.ENBLSLPM and GUSB2PHYCFG.SUSPHY
	  settings. Restore them after the command is completed.
	 
	  DWC_usb3 3.30a and DWC_usb31 1.90a programming guide section 3.2.2
	
	  Synopsys Databook 2.60a states in section 6.3.2.5.6 of that if we're
	  not relying on XferNotReady, we can make use of a special "No
	  Response Update Transfer" command where we should clear both CmdAct
	  and CmdIOC bits.
	 
	  With this, we don't need to wait for command completion and can
	  straight away issue further commands to the endpoint.
	 
	  NOTICE: We're making an assumption that control endpoints will never
	  make use of Update Transfer command. This is a safe assumption
	  because we can never have more than one request at a time with
	  Control Endpoints. If anybody changes that assumption, this chunk
	  needs to be updated accordingly.
				
				  SW issues START TRANSFER command to
				  isochronous ep with future frame interval. If
				  future interval time has already passed when
				  core receives the command, it will respond
				  with an error status of 'Bus Expiry'.
				 
				  Instead of always returning -EINVAL, let's
				  give a hint to the gadget driver that this is
				  the case by returning -EAGAIN.
	
	  As of core revision 2.60a the recommended programming model
	  is to set the ClearPendIN bit when issuing a Clear Stall EP
	  command for IN endpoints. This is to prevent an issue where
	  some (non-compliant) hosts may not send ACK TPs for pending
	  IN transfers due to a mishandled error condition. Synopsys
	  STAR 9000614252.
  dwc3_gadget_start_config - configure ep resources
  @dep: endpoint that is being enabled
  Issue a %DWC3_DEPCMD_DEPSTARTCFG command to @dep. After the command's
  completion, it will set Transfer Resource for all available endpoints.
  The assignment of transfer resources cannot perfectly follow the data book
  due to the fact that the controller driver does not have all knowledge of the
  configuration in advance. It is given this information piecemeal by the
  composite gadget framework after every SET_CONFIGURATION and
  SET_INTERFACE. Trying to follow the databook programming model in this
  scenario can cause errors. For two reasons:
  1) The databook says to do %DWC3_DEPCMD_DEPSTARTCFG for every
  %USB_REQ_SET_CONFIGURATION and %USB_REQ_SET_INTERFACE (8.1.5). This is
  incorrect in the scenario of multiple interfaces.
  2) The databook does not mention doing more %DWC3_DEPCMD_DEPXFERCFG for new
  endpoint on alt setting (8.1.6).
  The following simplified method is used instead:
  All hardware endpoints can be assigned a transfer resource and this setting
  will stay persistent until either a core reset or hibernation. So whenever we
  do a %DWC3_DEPCMD_DEPSTARTCFG(0) we can go ahead and do
  %DWC3_DEPCMD_DEPXFERCFG for every hardware endpoint as well. We are
  guaranteed that there are as many transfer resources as endpoints.
  This function is called for each endpoint when it is being enabled but is
  triggered only when called for EP0-out, which always happens first, and which
  should only happen in one of the above conditions.
 Burst size is only needed in SuperSpeed mode 
	
	  We are doing 1:1 mapping for endpoints, meaning
	  Physical Endpoints 2 maps to Logical Endpoint 2 and
	  so on. We consider the direction bit as part of the physical
	  endpoint number. So USB endpoint 0x81 is 0x03.
	
	  We must use the lower 16 TX FIFOs even though
	  HW might have more
		
		  Valid range for DEPCFG.bInterval_m1 is from 0 to 13.
		 
		  NOTE: The programming guide incorrectly stated bInterval_m1
		  must be set to 0 when operating in fullspeed. Internally the
		  controller does not have this limitation. See DWC_usb3x
		  programming guide section 3.2.2.1.
  dwc3_gadget_calc_tx_fifo_size - calculates the txfifo size value
  @dwc: pointer to the DWC3 context
  @nfifos: number of fifos to calculate for
  Calculates the size value based on the equation below:
  DWC3 revision 280A and prior:
  fifo_size = mult  (max_packet  mdwidth) + 1;
  DWC3 revision 290A and onwards:
  fifo_size = mult  ((max_packet + mdwidth)mdwidth + 1) + 1
  The max packet size is set to 1024, as the txfifo requirements mainly apply
  to super speed USB use cases.  However, it is safe to overestimate the fifo
  allocations for other scenarios, i.e. high speed USB.
 MDWIDTH is represented in bits, we need it in bytes 
  dwc3_gadget_clear_tx_fifo_size - Clears txfifo allocation
  @dwc: pointer to the DWC3 context
  Iterates through all the endpoint registers and clears the previous txfifo
  allocations.
 Read ep0IN related TXFIFO size 
 Clear existing TXFIFO for all IN eps except ep0 
 Don't change TXFRAMNUM on usb31 version 
  dwc3_gadget_resize_tx_fifos - reallocate fifo spaces for current use-case
  @dwc: pointer to our context structure
  This function will a best effort FIFO allocation in order
  to improve FIFO usage and throughput, while still allowing
  us to enable as many endpoints as possible.
  Keep in mind that this operation will be highly dependent
  on the configured size for RAM1 - which contains TxFifo -,
  the amount of endpoints enabled on coreConsultant tool, and
  the width of the Master Bus.
  In general, FIFO depths are represented with the following equation:
  fifo_size = mult  ((max_packet + mdwidth)mdwidth + 1) + 1
  In conjunction with dwc3_gadget_check_config(), this resizing logic will
  ensure that all endpoints will have enough internal memory for one max
  packet per endpoint.
 resize IN endpoints except ep0 
 bail if already resized 
 FIFO size for a single buffer 
 Calculate the number of remaining EPs wo any FIFO 
 Reserve at least one FIFO for the number of IN EPs 
	
	  We've already reserved 1 FIFO per EP, so check what we can fit in
	  addition to it.  If there is not enough remaining space, allocate
	  all the remaining space to the EP.
 Last increment according to the TX FIFO size equation 
 Check if TXFIFOs start at non-zero addr 
 Check fifo size allocation doesn't exceed available RAM size. 
  __dwc3_gadget_ep_enable - initializes a hw endpoint
  @dep: endpoint to be initialized
  @action: one of INIT, MODIFY or RESTORE
  Caller should take care of locking. Execute all necessary commands to
  initialize a HW endpoint so it can be used by a gadget driver.
 Initialize the TRB ring 
 Link TRB. The HWO bit is never reset 
	
	  Issue StartTransfer here with no-op TRB so we can always rely on No
	  Response Update Transfer command.
			
			  For streams, at start, there maybe a race where the
			  host primes the endpoint before the function driver
			  queues a request to initiate a stream. In that case,
			  the controller will not see the prime to generate the
			  ERDY and start stream. To workaround this, issue a
			  no-op TRB as normal, but end it immediately. As a
			  result, when the function driver queues the request,
			  the next START_TRANSFER command will cause the
			  controller to generate an ERDY to initiate the
			  stream.
			
			  All stream eps will reinitiate stream on NoStream
			  rejection until we can determine that the host can
			  prime after the first transfer.
			 
			  However, if the controller is capable of
			  TXF_FLUSH_BYPASS, then IN direction endpoints will
			  automatically restart the stream without the driver
			  initiation.
 - giveback all requests to gadget driver 
  __dwc3_gadget_ep_disable - disables a hw endpoint
  @dep: the endpoint to disable
  This function undoes what __dwc3_gadget_ep_enable did and also removes
  requests which are currently being processed by the hardware and those which
  are not yet scheduled.
  Caller should take care of locking.
 make sure HW endpoint isn't stalled 
 Clear out the ep descriptors for non-ep0 
 -------------------------------------------------------------------------- 
 -------------------------------------------------------------------------- 
  dwc3_ep_prev_trb - returns the previous TRB in the ring
  @dep: The endpoint with the TRB ring
  @index: The index of the current TRB in the ring
  Returns the TRB prior to the one pointed to by the index. If the
  index is 0, we will wrap backwards, skip the link TRB, and return
  the one just before that.
	
	  If the enqueue & dequeue are equal then the TRB ring is either full
	  or empty. It's considered full when there are DWC3_TRB_NUM-1 of TRBs
	  pending to be processed by the driver.
		
		  If there is any request remained in the started_list at
		  this point, that means there is no TRB available.
			
			  USB Specification 2.0 Section 5.9.2 states that: "If
			  there is only a single transaction in the microframe,
			  only a DATA0 data packet PID is used.  If there are
			  two transactions per microframe, DATA1 is used for
			  the first transaction data packet and DATA0 is used
			  for the second transaction data packet.  If there are
			  three transactions per microframe, DATA2 is used for
			  the first transaction data packet, DATA1 is used for
			  the second, and DATA0 is used for the third."
			 
			  IOW, we should satisfy the following cases:
			 
			  1) length <= maxpacket
			 	- DATA0
			 
			  2) maxpacket < length <= (2  maxpacket)
			 	- DATA1, DATA0
			 
			  3) (2  maxpacket) < length <= (3  maxpacket)
			 	- DATA2, DATA1, DATA0
 always enable Interrupt on Missed ISOC 
		
		  This is only possible with faulty memory because we
		  checked it already :)
	
	  Enable Continue on Short Packet
	  when endpoint is not a stream capable
  dwc3_prepare_one_trb - setup one TRB from one request
  @dep: endpoint for which this request is prepared
  @req: dwc3_request pointer
  @trb_length: buffer size of the TRB
  @chain: should this TRB be chained to the next?
  @node: only for isochronous endpoints. First TRB needs different type.
  @use_bounce_buffer: set to use bounce buffer
  @must_interrupt: set to interrupt on TRB completion
  dwc3_prepare_last_sg - prepare TRBs for the last SG entry
  @dep: The endpoint that the request belongs to
  @req: The request to prepare
  @entry_length: The last SG entry size
  @node: Indicates whether this is not the first entry (for isoc only)
  Return the number of TRBs prepared.
 Prepare a normal TRB 
 Prepare extra TRBs for ZLP and MPS OUT transfer alignment 
	
	  If we resume preparing the request, then get the remaining length of
	  the request and resume where we left off.
		
		  IOMMU driver is coalescing the list of sgs which shares a
		  page boundary into one and giving it to USB driver. With
		  this the number of sgs mapped is not equal to the number of
		  sgs passed. So mark the chain bit to false if it isthe last
		  mapped sg.
			
			  Look ahead to check if we have enough TRBs for the
			  next SG entry. If not, set interrupt on this TRB to
			  resume preparing the next SG entry when more TRBs are
			  free.
		
		  There can be a situation where all sgs in sglist are not
		  queued because of insufficient trb number. To handle this
		  case, update start_sg to next sg to be queued, so that
		  we have free trbs we can continue queuing from where we
		  previously stopped
		
		  The number of pending SG entries may not correspond to the
		  number of mapped SG entries. If all the data are queued, then
		  don't include unused SG entries.
  dwc3_prepare_trbs - setup TRBs from requests
  @dep: endpoint for which requests are being prepared
  The function goes through the requests list and sets up TRBs for the
  transfers. The function returns once there are no more TRBs available or
  it runs out of requests.
  Returns the number of TRBs prepared or negative errno.
	
	  We can get in a situation where there's a request in the started list
	  but there weren't enough TRBs to fully kick it in the first time
	  around, so it has been waiting for more TRBs to be freed up.
	 
	  In that case, we should check if we have a request with pending_sgs
	  in the started list and prepare TRBs for that request first,
	  otherwise we will prepare TRBs completely out of order and that will
	  break things.
		
		  Don't prepare beyond a transfer. In DWC_usb32, its transfer
		  burst capability may try to read and use TRBs beyond the
		  active transfer instead of stopping.
		
		  Don't prepare beyond a transfer. In DWC_usb32, its transfer
		  burst capability may try to read and use TRBs beyond the
		  active transfer instead of stopping.
	
	  Note that it's normal to have no new TRBs prepared (i.e. ret == 0).
	  This happens when we need to stop and restart a transfer such as in
	  the case of reinitiating a stream or retrying an isoc transfer.
	
	  If there's no new TRB prepared and we don't need to restart a
	  transfer, there's no need to update the transfer.
 If ep isn't started, then there's no end transfer pending 
  dwc3_gadget_start_isoc_quirk - workaround invalid frame number
  @dep: isoc endpoint
  This function tests for the correct combination of BIT[15:14] from the 16-bit
  microframe number reported by the XferNotReady event for the future frame
  number to start the isoc transfer.
  In DWC_usb31 version 1.70a-ea06 and prior, for highspeed and fullspeed
  isochronous IN, BIT[15:14] of the 16-bit microframe number reported by the
  XferNotReady event are invalid. The driver uses this number to schedule the
  isochronous transfer and passes it to the START TRANSFER command. Because
  this number is invalid, the command may fail. If BIT[15:14] matches the
  internal 16-bit microframe, the START TRANSFER command will pass and the
  transfer will start at the scheduled time, if it is off by 1, the command
  will still pass, but the transfer will start 2 seconds in the future. For all
  other conditions, the START TRANSFER command will fail with bus-expiry.
  In order to workaround this issue, we can test for the correct combination of
  BIT[15:14] by sending START TRANSFER commands with different values of
  BIT[15:14]: 'b00, 'b01, 'b10, and 'b11. Each combination is 2^14 uframe apart
  (or 2 seconds). 4 seconds into the future will result in a bus-expiry status.
  As the result, within the 4 possible combinations for BIT[15:14], there will
  be 2 successful and 2 failure START COMMAND status. One of the 2 successful
  command status will result in a 2-second delay start. The smaller BIT[15:14]
  value is the correct combination.
  Since there are only 4 outcomes and the results are ordered, we can simply
  test 2 START TRANSFER commands with BIT[15:14] combinations 'b00 and 'b01 to
  deduce the smaller successful combination.
  Let test0 = test status for combination 'b00 and test1 = test status for 'b01
  of BIT[15:14]. The correct combination is as follow:
  if test0 fails and test1 passes, BIT[15:14] is 'b01
  if test0 fails and test1 fails, BIT[15:14] is 'b10
  if test0 passes and test1 fails, BIT[15:14] is 'b11
  if test0 passes and test1 passes, BIT[15:14] is 'b00
  Synopsys STAR 9001202023: Wrong microframe number for isochronous IN
  endpoints.
		
		  Check if we can start isoc transfer on the next interval or
		  4 uframes in the future with BIT[15:14] as dep->combo_num
 Redo if some other failure beside bus-expiry is received 
 Store the first test status 
		
		  End the transfer if the START_TRANSFER command is successful
		  to wait for the next XferNotReady to test the command again
 test0 and test1 are both completed at this point 
 Reinitialize test variables 
		
		  frame_number is set from XferNotReady and may be already
		  out of date. DSTS only provides the lower 14 bit of the
		  current frame number. So add the upper two bits of
		  frame_number and handle a possible rollover.
		  This will provide the correct frame_number unless more than
		  rollover has happened since XferNotReady.
	
	  After a number of unsuccessful start attempts due to bus-expiry
	  status, issue END_TRANSFER command and retry on the next XferNotReady
	  event.
	
	  Start the transfer only after the END_TRANSFER is completed
	  and endpoint STALL is cleared.
	
	  NOTICE: Isochronous endpoints should NEVER be prestarted. We must
	  wait for a XferNotReady event so we will know what's the current
	  (micro-)frame number.
	 
	  Without this trick, we are very, very likely gonna get Bus Expiry
	  errors which will force us issue EndTransfer command.
 If req->trb is not set, then the request has not started 
	
	  If request was already started, this means we had to
	  stop the transfer. With that we also need to ignore
	  all TRBs used by the request, however TRBs can only
	  be modified after completion of END_TRANSFER
	  command. So what we do here is that we wait for
	  END_TRANSFER completion and only after that, we jump
	  over TRBs by clearing HWO and incrementing dequeue
	  pointer.
 wait until it is processed 
			
			  Remove any started request if the transfer is
			  cancelled.
		
		  Don't issue CLEAR_STALL command to control endpoints. The
		  controller automatically clears the STALL when it receives
		  the SETUP token.
 -------------------------------------------------------------------------- 
 -------------------------------------------------------------------------- 
	
	  According to the Databook Remote wakeup request should
	  be issued only when the device is in early suspend state.
	 
	  We can check that via USB Link State bits in DSTS register.
 in HS, means Early Suspend 
 in HS, means SUSPEND 
 in HS, means Sleep (L1) 
 Recent versions do this automatically 
 write zeroes to Link Change Request 
 poll until Link State changes to ON 
 in HS, means ON 
	
	  WORKAROUND: DWC3 revision < 2.20a have an issue
	  which would cause metastability state on RunStop
	  bit if we try to force the IP to USB2-only mode.
	 
	  Because of that, we cannot configure the IP to any
	  speed other than the SuperSpeed
	 
	  Refers to:
	 
	  STAR#9000525659: Clock Domain Crossing on DCTL in
	  USB 2.0 Mode
	
	  Per databook, when we want to stop the gadget, if a control transfer
	  is still in process, complete it and get the core into setup phase.
	
	  Avoid issuing a runtime resume if the device is already in the
	  suspended state during gadget disconnect.  DWC3 gadget was already
	  haltedstopped during runtime suspend.
	
	  Check the return value for successful resume, or error.  For a
	  successful resume, the DWC3 runtime PM resume routine will handle
	  the run stop sequence, so avoid duplicate operations here.
	
	  Synchronize and disable any further event handling while controller
	  is being enableddisabled.
		
		  In the Synopsis DesignWare Cores USB3 Databook Rev. 3.30a
		  Section 4.1.8 Table 4-7, it states that for a device-initiated
		  disconnect, the SW needs to ensure that it sends "a DEPENDXFER
		  command for any active transfers" before clearing the RunStop
		  bit.
		
		  In the Synopsis DesignWare Cores USB3 Databook Rev. 3.30a
		  Section 1.3.4, it mentions that for the DEVCTRLHLT bit, the
		  "software needs to acknowledge the events that are generated
		  (by writing to GEVNTCOUNTn) while it is waiting for this bit
		  to be set to '1'."
 Enable all but Start and End of Frame IRQs 
 On 2.30a and above this bit enables U3L2-L1 Suspend Events 
 mask all interrupts 
  dwc3_gadget_setup_nump - calculate and initialize NUMP field of %DWC3_DCFG
  @dwc: pointer to our context structure
  The following looks like complex but it's actually very simple. In order to
  calculate the number of packets we can burst at once on OUT transfers, we're
  gonna use RxFIFO size.
  To calculate RxFIFO size we need two numbers:
  MDWIDTH = size, in bits, of the internal memory bus
  RAM2_DEPTH = depth, in MDWIDTH, of internal RAM2 (where RxFIFO sits)
  Given these two numbers, the formula is simple:
  RxFIFO Size = (RAM2_DEPTH  MDWIDTH  8) - 24 - 16;
  24 bytes is for 3x SETUP packets
  16 bytes is a clock domain crossing tolerance
  Given RxFIFO Size, NUMP = RxFIFOSize  1024;
 update NumP 
	
	  Use IMOD if enabled via dwc->imod_interval. Otherwise, if
	  the core supports IMOD, disable it.
	
	  We are telling dwc3 that we want to use DCFG.NUMP as ACK TP's NUMP
	  field instead of letting dwc3 itself calculate that automatically.
	 
	  This way, we maximize the chances that we'll be able to get several
	  bursts of data without going through any sort of endpoint throttling.
	
	  Currently the controller handles single stream only. So, Ignore
	  Packet Pending bit for stream selection and don't search for another
	  stream if the host sends Data Packet with PP=0 (for OUT direction) or
	  ACK with NumP=0 and PP=0 (for IN direction). This slightly improves
	  the stream performance.
 Start with SuperSpeed Default 
 begin to receive SETUP packets 
 Recommended BESL 
		
		  If the recommended BESL baseline is 0 or if the BESL deep is
		  less than 2, Microsoft's Windows 10 host usb stack will issue
		  a usb reset immediately after it receives the extended BOS
		  descriptor and the enumeration will fail. To maintain
		  compatibility with the Windows' usb stack, let's set the
		  recommended BESL baseline to 1 and clamp the BESL deep to be
		  within 2 to 15.
 U1 Device exit Latency 
 U2 Device exit Latency 
  dwc3_gadget_check_config - ensure dwc3 can support the USB configuration
  @g: pointer to the USB gadget
  Used to record the maximum number of endpoints being used in a USB composite
  device. (across all configurations)  This is to be used in the calculation
  of the TXFIFO sizes when resizing internal memory for individual endpoints.
  It will help ensured that the resizing logic reserves enough space for at
  least one max packet.
 Only interested in the IN endpoints 
 Update the max number of eps in the composition 
 Based on the equation, increment by one for every ep 
 Check if we can fit a single fifo per endpoint 
 -------------------------------------------------------------------------- 
 MDWIDTH is represented in bits, we need it in bytes 
 FIFO Depth is in MDWDITH bytes. Multiply 
	
	  To meet performance requirement, a minimum TxFIFO size of 3x
	  MaxPacketSize is recommended for endpoints that support burst and a
	  minimum TxFIFO size of 2x MaxPacketSize for endpoints that don't
	  support burst. Use those numbers and we can calculate the max packet
	  limit as below.
 MDWIDTH is represented in bits, convert to bytes 
 All OUT endpoints share a single RxFIFO space 
 FIFO depth is in MDWDITH bytes 
	
	  To meet performance requirement, a minimum recommended RxFIFO size
	  is defined as follow:
	  RxFIFO size >= (3 x MaxPacketSize) +
	  (3 x 8 bytes setup packets size) + (16 bytes clock crossing margin)
	 
	  Then calculate the max packet limit as below.
		
		  Physical endpoints 0 and 1 are special; they form the
		  bi-directional USB endpoint 0.
		 
		  For those two physical endpoints, we don't allocate a TRB
		  pool nor do we add them the endpoints list. Due to that, we
		  shouldn't do these two operations otherwise we would end up
		  with all sorts of bugs when removing dwc3.ko.
 -------------------------------------------------------------------------- 
	
	  If we're in the middle of series of chained TRBs and we
	  receive a short transfer along the way, DWC3 will skip
	  through all TRBs including the last TRB in the chain (the
	  where CHN bit is zero. DWC3 will also avoid clearing HWO
	  bit and SW has to do it manually.
	 
	  We're going to do that here to avoid problems of HW trying
	  to use bogus TRBs for transfers.
	
	  For isochronous transfers, the first TRB in a service interval must
	  have the Isoc-First type. Track and report its interval frame number.
	
	  We use bounce buffer for requests that needs extra TRB or OUT ZLP. If
	  this TRB points to the bounce buffer address, it's a MPS alignment
	  TRB. Don't add it to req->remaining calculation.
	
	  We only need to check the first entry of the started list. We can
	  assume the completed requests are removed from the started list.
	
	  WORKAROUND: This is the 2nd half of U1U2 -> U0 workaround.
	  See dwc3_gadget_linksts_change_interrupt() for 1st half.
	
	  The XferNotReady event is generated only once before the endpoint
	  starts. It will be generated again when END_TRANSFER command is
	  issued. For some controller versions, the XferNotReady event may be
	  generated while the END_TRANSFER command is still in process. Ignore
	  it and wait for the next XferNotReady event after the command is
	  completed.
 Note: NoStream rejection event param value is 0 and not 0xFFFF 
		
		  If the host can properly transition the endpoint state from
		  idle to prime after a NoStream rejection, there's no need to
		  force restarting the endpoint to reinitiate the stream. To
		  simplify the check, assume the host follows the USB spec if
		  it primed the endpoint more than once.
		
		  If the host rejects a stream due to no active stream, by the
		  USB and xHCI spec, the endpoint will be put back to idle
		  state. When the host is ready (buffer addedupdated), it will
		  prime the endpoint to inform the usb device controller. This
		  triggers the device controller to issue ERDY to restart the
		  stream. However, some hosts don't follow this and keep the
		  endpoint in the idle state. No prime will come despite host
		  streams are updated, and the device controller will not be
		  triggered to generate ERDY to move the next stream data. To
		  workaround this and maintain compatibility with various
		  hosts, force to reinitate the stream until the host is ready
		  instead of waiting for the host to prime the endpoint.
 Handle only EPCMDCMPLT when EP disabled 
	
	  NOTICE: We are violating what the Databook says about the
	  EndTransfer command. Ideally we would _always_ wait for the
	  EndTransfer Command Completion IRQ, but that's causing too
	  much trouble synchronizing between us and gadget driver.
	 
	  We have discussed this with the IP Provider and it was
	  suggested to giveback all requests here.
	 
	  Note also that a similar handling was tested by Synopsys
	  (thanks a lot Paul) and nothing bad has come out of it.
	  In short, what we're doing is issuing EndTransfer with
	  CMDIOC bit set and delay kicking transfer until the
	  EndTransfer command had completed.
	 
	  As of IP version 3.10a of the DWC_usb3 IP, the controller
	  supports a mode to work around the above limitation. The
	  software can poll the CMDACT bit in the DEPCMD register
	  after issuing a EndTransfer command. This mode is enabled
	  by writing GUCTL2[14]. This polling is already done in the
	  dwc3_send_gadget_ep_cmd() function so if the mode is
	  enabled, the EndTransfer command will have completed upon
	  returning from this function.
	 
	  This mode is NOT available on the DWC_usb31 IP.
	
	  The END_TRANSFER command will cause the controller to generate a
	  NoStream Event, and it's not due to the host DP NoStream rejection.
	  Ignore the next NoStream event.
	
	  Ideally, dwc3_reset_gadget() would trigger the function
	  drivers to stop any active transfers through ep disable.
	  However, for functions which defer ep disable, such as mass
	  storage, we will need to rely on the call to stop active
	  transfers here, and avoid allowing of request queuing.
	
	  WORKAROUND: DWC3 revisions <1.88a have an issue which
	  would cause a missing Disconnect Event if there's a
	  pending Setup Packet in the FIFO.
	 
	  There's no suggested workaround on the official Bug
	  report, which states that "unless the driverapplication
	  is doing any special handling of a disconnect event,
	  there is no functional issue".
	 
	  Unfortunately, it turns out that we _do_ some special
	  handling of a disconnect event, namely complete all
	  pending transfers, notify gadget driver of the
	  disconnection, and so on.
	 
	  Our suggested workaround is to follow the Disconnect
	  Event steps here, instead, based on a setup_packet_pending
	  flag. Such flag gets set whenever we have a SETUP_PENDING
	  status for EP0 TRBs and gets cleared on XferComplete for the
	  same endpoint.
	 
	  Refers to:
	 
	  STAR#9000466709: RTL: Device : Disconnect event not
	  generated if setup packet pending in FIFO
	
	  In the Synopsis DesignWare Cores USB3 Databook Rev. 3.30a
	  Section 4.1.2 Table 4-2, it states that during a USB reset, the SW
	  needs to ensure that it sends "a DEPENDXFER command for any active
	  transfers."
 Reset device address to zero 
	
	  RAMClkSel is reset to 0 after USB reset, so it must be reprogrammed
	  each time on Connect Done.
	 
	  Currently we always use the reset value. If any platform
	  wants to set this to a different value, we need to add a
	  setting and update GCTL.RAMCLKSEL here.
		
		  WORKAROUND: DWC3 revisions <1.90a have an issue which
		  would cause a missing USB3 Reset event.
		 
		  In such situations, we should force a USB3 Reset
		  event by calling our dwc3_gadget_reset_interrupt()
		  routine.
		 
		  Refers to:
		 
		  STAR#9000483510: RTL: SS : USB3 reset event may
		  not be generated always when the link enters poll
 Enable USB2 LPM Capability 
		
		  When dwc3 revisions >= 2.40a, LPM Erratum is enabled and
		  DCFG.LPMCap is set, core responses with an ACK and the
		  BESL value in the LPM token is less than or equal to LPM
		  NYET threshold.
	
	  Configure PHY via GUSB3PIPECTLn if required.
	 
	  Update GTXFIFOSIZn
	 
	  In both cases reset values should be sufficient.
	
	  TODO take core out of low power mode when that's
	  implemented.
	
	  WORKAROUND: DWC3 < 2.50a have an issue when configured without
	  Hibernation mode enabled which would show up when device detects
	  host-initiated U3 exit.
	 
	  In that case, device will generate a Link State Change Interrupt
	  from U3 to RESUME which is only necessary if Hibernation is
	  configured in.
	 
	  There are no functional changes due to such spurious event and we
	  just need to ignore it.
	 
	  Refers to:
	 
	  STAR#9000570034 RTL: SS Resume event generated in non-Hibernation
	  operational mode
	
	  WORKAROUND: DWC3 Revisions <1.83a have an issue which, depending
	  on the link partner, the USB session might do multiple entryexit
	  of low power states before a transfer takes place.
	 
	  Due to this problem, we might experience lower throughput. The
	  suggested workaround is to disable DCTL[12:9] bits if we're
	  transitioning from U1U2 to U0 and enable those bits again
	  after a transfer completes and there are no pending transfers
	  on any of the enabled endpoints.
	 
	  This is the first half of that workaround.
	 
	  Refers to:
	 
	  STAR#9000446952: RTL: Device SS : if U1U2 ->U0 takes >128us
	  core send LGO_Ux entering U0
 do nothing 
 do nothing 
	
	  WORKAROUND: DWC3 revison 2.20a with hibernation support
	  have a known issue which can cause USB CV TD.9.23 to fail
	  randomly.
	 
	  Because of this issue, core could generate bogus hibernation
	  events which SW needs to ignore.
	 
	  Refers to:
	 
	  STAR#9000546576: Device Mode Hibernation: Issue in USB 2.0
	  Device Fallback from SuperSpeed
 enter hibernation here 
 It changed to be suspend event for version 2.30a and above 
			
			  Ignore suspend event until the gadget enters into
			  USB_STATE_CONFIGURED state.
		
		  FIXME we wrap around correctly to the next entry as
		  almost all entries are 4 bytes in size. There is one
		  entry which has 12 bytes which is a regular entry
		  followed by 8 bytes data. ATM I don't know how
		  things are organized if we get next to the a
		  boundary so I worry about that once we try to handle
		  that.
 Unmask interrupt 
	
	  With PCIe legacy interrupt, test shows that top-half irq handler can
	  be called again after HW interrupt deassertion. Check if bottom-half
	  irq event handler completes before caching new event to prevent
	  losing events.
 Mask interrupt 
  dwc3_gadget_init - initializes gadget related registers
  @dwc: pointer to our controller context structure
  Returns 0 on success otherwise negative errno.
	
	  FIXME We might be setting max_speed to <SUPER, however versions
	  <2.20a of dwc3 have an issue with metastability (documented
	  elsewhere in this driver) which tells us we can't set max speed to
	  anything lower than SUPER.
	 
	  Because gadget.max_speed is only used by composite.c and function
	  drivers (i.e. it won't go into dwc3's registers) we are allowing this
	  to happen so we avoid sending SuperSpeed Capability descriptor
	  together with our BOS descriptor as that could confuse host into
	  thinking we can handle super speed.
	 
	  Note that, in fact, we won't even support GetBOS requests when speed
	  is less than super speed because we don't have means, yet, to tell
	  composite.c that we are USB 2.0 + LPM ECN.
	
	  REVISIT: Here we should clear all pending IRQs to be
	  sure we're starting from a well known location.
 -------------------------------------------------------------------------- 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2018, The Linux Foundation. All rights reserved.
  Inspired by dwc3-of-simple.c
 USB QSCRATCH Hardware registers 
 Interconnect path bandwidths in MBps 
 ensure that above write is through 
 ensure that above write is through 
 enable vbus override for device mode 
 disable vbus override in host mode 
 Update initial VBUS override based on extcon state 
  dwc3_qcom_interconnect_init() - Get interconnect path handles
  and set bandwidth.
  @qcom:			Pointer to the concerned usb core.
  dwc3_qcom_interconnect_exit() - Release interconnect path handles
  @qcom:			Pointer to the concerned usb core.
  This function is used to release interconnect path handle.
 Clear existing events from PHY related to L2 inout 
 If pm_suspended then let pm_resume take care of resuming hw 
 Configure dwc3 to use UTMI clock as PIPE clock not present 
 Keep wakeup interrupts disabled until suspend 
 Figure out device id 
 Find the child using name 
	
	  Disable pipe_clk requirement if specified. Used when dwc3
	  operates without SSPHY and only HSFSLS modes are supported.
 enable vbus override for device mode 
 register extcon to override sw_vbus on Vbus change later 
 SPDX-License-Identifier: GPL-2.0
  core.c - DesignWare USB3 DRD Controller Core file
  Copyright (C) 2010-2011 Texas Instruments Incorporated - https:www.ti.com
  Authors: Felipe Balbi <balbi@ti.com>,
 	    Sebastian Andrzej Siewior <bigeasy@linutronix.de>
 ms 
  dwc3_get_dr_mode - Validates and sets dr_mode
  @dwc: pointer to our context structure
		
		  DWC_usb31 and DWC_usb3 v3.30a and higher do not support OTG
		  mode. If the controller supports DRD but the dr_mode is not
		  specified or set to OTG, then set the mode to peripheral.
 For DRD host or device mode only 
		
		  Wait for internal clocks to synchronized. DWC_usb31 and
		  DWC_usb32 may need at least 50ms (less for DWC_usb3). To
		  keep it consistent across different IPs, let's wait up to
		  100ms before clearing GCTL.CORESOFTRESET.
  dwc3_core_soft_reset - Issues core soft reset and PHY reset
  @dwc: pointer to our context structure
	
	  We're resetting only the device side because, if we're in host mode,
	  XHCI driver will reset the host block. If dwc3 was configured for
	  host-only mode, then we can return early.
	
	  For DWC_usb31 controller 1.90a and later, the DCTL.CSFRST bit
	  is cleared only after all the clocks are synchronized. This can
	  take a little more than 50ms. Set the polling rate at 20ms
	  for 10 times instead.
	
	  For DWC_usb31 controller 1.80a and prior, once DCTL.CSFRST bit
	  is cleared, we must wait at least 50ms before accessing the PHY
	  domain (synchronization delay).
  dwc3_frame_length_adjustment - Adjusts frame length if required
  @dwc3: Pointer to our controller context structure
  dwc3_ref_clk_period - Reference clock period configuration
 		Default reference clock period depends on hardware
 		configuration. For systems with reference clock that differs
 		from the default, this will set clock period in DWC3_GUCTL
 		register.
  @dwc: Pointer to our controller context structure
  @ref_clk_per: reference clock period in ns
  dwc3_free_one_event_buffer - Frees one event buffer
  @dwc: Pointer to our controller context structure
  @evt: Pointer to event buffer to be freed
  dwc3_alloc_one_event_buffer - Allocates one event buffer structure
  @dwc: Pointer to our controller context structure
  @length: size of the event buffer
  Returns a pointer to the allocated event buffer structure on success
  otherwise ERR_PTR(errno).
  dwc3_free_event_buffers - frees all allocated event buffers
  @dwc: Pointer to our controller context structure
  dwc3_alloc_event_buffers - Allocates @num event buffers of size @length
  @dwc: pointer to our controller context structure
  @length: size of event buffer
  Returns 0 on success otherwise negative errno. In the error case, dwc
  may contain some buffers allocated but not all which were requested.
  dwc3_event_buffers_setup - setup our allocated event buffers
  @dwc: pointer to our controller context structure
  Returns 0 on success otherwise negative errno.
 should never fall here 
 should never fall here 
  dwc3_phy_setup - Configure USB PHY Interface of DWC3 Core
  @dwc: Pointer to our controller context structure
  Returns 0 on success. The USB PHY interfaces are configured but not
  initialized. The PHY interfaces and the PHYs get initialized together with
  the core in dwc3_core_init.
	
	  Make sure UX_EXIT_PX is cleared as that causes issues with some
	  PHYs. Also, this bit is not supposed to be used in normal operation.
	
	  Above 1.94a, it is recommended to set DWC3_GUSB3PIPECTL_SUSPHY
	  to '0' during coreConsultant configuration. So default value
	  will be '0' when the core is reset. Application needs to set it
	  to '1' after the core initialization is completed.
	
	  For DRD controllers, GUSB3PIPECTL.SUSPENDENABLE must be cleared after
	  power-on reset, and it can be set after core initialization, which is
	  after device soft-reset during initialization.
 Select the HS PHY interface 
 Relying on default value. 
	
	  Above 1.94a, it is recommended to set DWC3_GUSB2PHYCFG_SUSPHY to
	  '0' during coreConsultant configuration. So default value will
	  be '0' when the core is reset. Application needs to set it to
	  '1' after the core initialization is completed.
	
	  For DRD controllers, GUSB2PHYCFG.SUSPHY must be cleared after
	  power-on reset, and it can be set after core initialization, which is
	  after device soft-reset during initialization.
 This should read as U3 followed by revision number 
		
		  WORKAROUND: DWC3 revisions between 2.10a and 2.50a have an
		  issue which would cause xHCI compliance tests to fail.
		 
		  Because of that we cannot enable clock gating on such
		  configurations.
		 
		  Refers to:
		 
		  STAR#9000588375: Clock Gating, SOF Issues when ref_clk-Based
		  SOFITP Mode Used
 enable hibernation here 
		
		  REVISIT Enabling this bit so that host-mode hibernation
		  will work. Device-mode hibernation is not yet implemented.
 nothing 
 check if current dwc3 is on simulation board 
	
	  WORKAROUND: DWC3 revisions <1.90a have a bug
	  where the device can fail to connect at SuperSpeed
	  and falls back to high-speed mode which causes
	  the device to enter a ConnectDisconnect loop
 set global incr burst type configuration registers 
 incrx_mode : for INCR burst type. 
 incrx_size : for size of INCRX burst. 
	
	  Handle property "snps,incr-burst-type-adjustment".
	  Get the number of value from this property:
	  result <= 0, means this property is not supported.
	  result = 1, means INCRx burst mode supported.
	  result > 1, means undefined length burst mode supported.
 Get INCR burst type, and parse it 
 INCRX (undefined length) burst mode 
 INCRX burst mode 
 Enable Undefined Length INCR Burst and Enable INCRx Burst 
  dwc3_core_init - Low-level initialization of DWC3 Core
  @dwc: Pointer to our controller context structure
  Returns 0 on success otherwise negative errno.
	
	  Write Linux Version Code to our GUID register so it's easy to figure
	  out which kernel version a bug was found.
 Adjust Frame Length 
 Adjust Reference Clock Period 
	
	  ENDXFER polling is available on version 3.10a and later of
	  the DWC_usb3 controller. It is NOT available in the
	  DWC_usb31 controller.
		
		  Enable hardware control of sending remote wakeup
		  in HS when the device is in the L1 state.
		
		  Decouple USB 2.0 L1 & L2 events which will allow for
		  gadget driver to only receive U3L2 suspend & wakeup
		  events and prevent the more frequent L1 LPM transitions
		  from interrupting the driver.
		
		  Enable Auto retry Feature to make the controller operating in
		  Host mode on seeing transaction errors(CRC errors or internal
		  overrun scenerios) on IN transfers to reply to the device
		  with a non-terminating retry ACK (i.e, an ACK transcation
		  packet with Retry=1 & Nump != 0)
	
	  Must config both number of packets and max burst settings to enable
	  RX andor TX threshold.
 do nothing 
 de-assert DRVVBUS for HOST and OTG mode 
 default to highest possible threshold 
 default to -3.5dB de-emphasis 
	
	  default to assert utmi_sleep_n and use maximum allowed HIRD
	  threshold value of 0b1100
	
	  default to a TXFIFO size large enough to fit 6 max packets.  This
	  allows for systems with larger bus latencies to have some headroom
	  for endpoints that have a large bMaxBurst value.
 check whether the core supports IMOD 
 Check for proper value of imod_interval 
	
	  Workaround for STAR 9000961433 which affects only version
	  3.00a of the DWC_usb3 core. This prevents the controller
	  interrupt from being masked while handling events. IMOD
	  allows us to work around this issue. Enable it for the
	  affected version.
 Check the maximum_speed parameter 
	
	  Currently the controller does not have visibility into the HW
	  parameter to determine the maximum number of lanes the HW supports.
	  If the number of lanes is not specified in the device property, then
	  set the default to support dual-lane for DWC_usb32 and single-lane
	  for DWC_usb31 for super-speed-plus.
	
	  Request memory region but exclude xHCI regs,
	  since it will be requested by the xhci-plat driver.
		
		  Clocks are optional, but new DT platforms should support all
		  clocks as required by the DT-binding.
 Let controller to suspend HSPHY before PHY driver suspends 
 Give some time for USB2 PHY to suspend 
 do nothing during runtime_suspend 
 do nothing 
 Restore GUSB2PHYCFG bits that were modified in suspend 
 nothing to do on runtime_resume 
 do nothing 
 do nothing 
 do nothing 
 do nothing 
 CONFIG_PM 
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0
  USB Glue for Amlogic G12A SoCs
  Copyright (c) 2019 BayLibre, SAS
  Author: Neil Armstrong <narmstrong@baylibre.com>
  The USB is organized with a glue around the DWC3 Controller IP as :
  - Control registers for each USB2 Ports
  - Control registers for the USB PHY layer
  - SuperSpeed PHY can be enabled only if port is used
  - Dynamic OTG switching with ID change interrupt
 USB2 Ports Control Registers, offsets are per-port 
 USB Glue Control Registers 
  Amlogic A1 has a single physical PHY, in slot 1, but still has the
  two U2 PHY controls register blocks like G12A.
  AXG has the similar scheme, thus needs the same tweak.
  Handling the first PHY on slot 1 would need a large amount of code
  changes, and the current management is generic enough to handle it
  correctly when only the "usb2-phy1" phy is specified on-par with the
  DT bindings.
  For GXL and GXM SoCs:
  USB Phy muxing between the DWC2 Device controller and the DWC3 Host
  controller is buggy when switching from Device to Host when USB port
  is unpopulated, it causes the DWC3 to hard crash.
  When populated (including OTG switching with ID pin), the switch works
  like a charm like on the G12A platforms.
  In order to still switch from Host to Device on an USB Type-A port,
  an U2_PORT_DISABLE bit has been added to disconnect the DWC3 Host
  controller from the port, but when used the DWC3 controller must be
  reset to recover usage of the port.
 On GXL PHY must be started in device mode for DWC2 init 
 Isolate the OTG PHY port from the Host Controller 
 If we have an actual SuperSpeed port, initialize it 
 Ack irq before registering 
 Setup OTG mode corresponding to the ID pin 
 Setup role switcher 
 GXL controls the PHY mode in the PHY registers unlike G12A 
 Create a regmap for each USB2 PHY control register set 
 Get dr_mode 
 Init PHYs 
 Set PHY Power 
 Init PHYs 
 Set PHY Power 
 Sentinel  }
 SPDX-License-Identifier: GPL-2.0
  dwc3-keystone.c - Keystone Specific Glue layer
  Copyright (C) 2010-2013 Texas Instruments Incorporated - https:www.ti.com
  Author: WingMan Kwok <w-kwok2@ti.com>
 USBSS register offsets 
 IRQ register bits 
 PSC dependency on AM65 needs SERDES0 to be powered before USB0 
 IRQ processing not required currently for AM65 
 SPDX-License-Identifier: GPL-2.0
  host.c - DesignWare USB3 DRD Controller Host Glue
  Copyright (C) 2011 Texas Instruments Incorporated - https:www.ti.com
  Authors: Felipe Balbi <balbi@ti.com>,
	
	  WORKAROUND: dwc3 revisions <=3.00a have a limitation
	  where Port Disable command doesn't work.
	 
	  The suggested workaround is that we avoid Port Disable
	  completely.
	 
	  This following flag tells XHCI to do just that.
 SPDX-License-Identifier: GPL-2.0
  trace.c - DesignWare USB3 DRD Controller Trace Support
  Copyright (C) 2014 Texas Instruments Incorporated - https:www.ti.com
  Author: Felipe Balbi <balbi@ti.com>
 SPDX-License-Identifier: GPL-2.0
  ep0.c - DesignWare USB3 DRD Controller Endpoint 0 Handling
  Copyright (C) 2010-2011 Texas Instruments Incorporated - https:www.ti.com
  Authors: Felipe Balbi <balbi@ti.com>,
 	    Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	
	  Gadget driver might not be quick enough to queue a request
	  before we get a Transfer Not Ready event on this endpoint.
	 
	  In that case, we will set DWC3_EP_PENDING_REQUEST. When that
	  flag is set, it's telling us that as soon as Gadget queues the
	  required request, we should kick the transfer here because the
	  IRQ we were waiting for is long gone.
	
	  In case gadget driver asked us to delay the STATUS phase,
	  handle it here.
	
	  Unfortunately we have uncovered a limitation wrt the Data Phase.
	 
	  Section 9.4 says we can wait for the XferNotReady(DATA) event to
	  come before issueing Start Transfer command, but if we do, we will
	  miss situations where the host starts another SETUP phase instead of
	  the DATA phase.  Such cases happen at least on TD.7.6 of the Link
	  Layer Compliance Suite.
	 
	  The problem surfaces due to the fact that in case of back-to-back
	  SETUP packets there will be no XferNotReady(DATA) generated and we
	  will be stuck waiting for XferNotReady(DATA) forever.
	 
	  By looking at tables 9-13 and 9-14 of the Databook, we can see that
	  it tells us to start Data Phase right away. It also mentions that if
	  we receive a SETUP phase instead of the DATA phase, core will issue
	  XferComplete for the DATA phase, before actually initiating it in
	  the wire, with the TRB's status set to "SETUP_PENDING". Such status
	  can only be used to print some debugging logs, as the core expects
	  us to go through to the STATUS phase and start a CONTROL_STATUS TRB,
	  just so it completes right away, without transferring anything and,
	  only then, we can go back to the SETUP phase.
	 
	  Because of this scenario, SNPS decided to change the programming
	  model of control transfers and support on-demand transfers only for
	  the STATUS phase. To fix the issue we have now, we will always wait
	  for gadget driver to queue the DATA phase's struct usb_request, then
	  start it right away.
	 
	  If we're actually in a 2-stage transfer, we will wait for
	  XferNotReady(STATUS).
 we share one TRB for ep01 
 reinitialize physical ep1 
 stall is always issued on EP0 
  ch 9.4.5
 We don't support PTM_STATUS 
		
		  LTM will be set once we know how to set this in HW.
		
		  Function Remote Wake Capable	D0
		  Function Remote Wakeup	D1
	
	  9.4.1 says only only for SS, in AddressState only for
	  default control pipe
		
		  REVISIT: Ideally we would enable some low power mode here,
		  however it's unclear what we should be doing here.
		 
		  For now, we're not doing anything, just making sure we return
		  0 so USB Command Verifier tests pass without any errors.
 ClearFeature(Halt) may need delayed status 
 if the cfg matches and the cfg is non zero 
			
			  only change state if set_config has already
			  been processed. If gadget driver returns
			  USB_GADGET_DELAYED_STATUS, we will wait
			  to change the state on the next usb_ep_queue()
			
			  Enable transition to U1U2 state when
			  nothing is pending from application.
	
	  According to Synopsys Databook, if parameter is
	  greater than 125, a value of zero should be
	  programmed in the register.
 now that we have the time, issue DGCMD Set Sel 
	
	  To handle Set SEL we need to receive 6 bytes from Host. So let's
	  queue a usb_request for 6 bytes.
	 
	  Remember, though, this controller can't handle non-wMaxPacketSize
	  aligned transfers on the OUT direction, so we queue a request for
	  wMaxPacketSize instead.
 prepare normal TRB 
 Now prepare one extra TRB to align transfer size 
 prepare normal TRB 
 Now prepare one extra TRB to align transfer size 
		
		  We already have a DATA transfer in the controller's cache,
		  if we receive a XferNotReady(DATA) we will ignore it, unless
		  it's for the wrong direction.
		 
		  In that case, we must issue END_TRANSFER command to the Data
		  Phase we already have started and issue SetStall on the
		  control endpoint.
			
			  We should handle the delay STATUS phase here if the
			  request for handling delay STATUS has been queued
			  into the list.
 SPDX-License-Identifier: GPL-2.0+
   cxacru.c  -  driver for USB ADSL modems based on
                Conexant AccessRunner chipset
   Copyright (C) 2004 David Woodhouse, Duncan Sands, Roman Kagan
   Copyright (C) 2005 Duncan Sands, Roman Kagan (rkagan % mail ! ru)
   Copyright (C) 2007 Simon Arlott
   Copyright (C) 2009 Simon Arlott
   Credit is due for Josep Comas, who created the original patch to speedtch.c
   to support the different padding used by the AccessRunner (now generalized
   into usbatm), and the userspace firmware loading utility.
 Bulkinterrupt inout 
 Bulk inout 
 Should be maxpacket(ep)? 
 Addresses 
 Values 
 msecs 
 secs 
 commands for interaction with the modem through the control channel before
 commands for interaction with the modem through the control channel once
 commands for interaction with the flash memory
  read:  response is the contents of the first 60 bytes of flash memory
  write: request contains the 60 bytes of data to write to flash memory
         response is the contents of the first 60 bytes of flash memory
  layout: PP PP VV VV  MM MM MM MM  MM MM ?? ??  SS SS SS SS  SS SS SS SS
          SS SS SS SS  SS SS SS SS  00 00 00 00  00 00 00 00  00 00 00 00
          00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
    P: le16  USB Product ID
    V: le16  USB Vendor ID
    M: be48  MAC Address
    S: le16  ASCII Serial Number
 reply codes to the commands above 
 indices into CARD_INFO_GET return array 
 dunno what the missing two mean 
 control handles 
 Card info exported through sysfs 
  This could use MAC_ADDRESS_HIGH and MAC_ADDRESS_LOW, but since
  this data is already in atm_dev there's no point.
  MAC_ADDRESS_HIGH = 0x????5544
  MAC_ADDRESS_LOW  = 0x33221100
  Where 00-55 are bytes 0-5 of the MAC.
	 Line status is only updated every second
	  and the device appears to only react to
	  STARTSTOP every second too. Wait 1.5s to
 start polling 
 abort stop request 
 don't start polling 
 request stop 
 CM_REQUEST_CARD_DATA_GET times out, so no show attribute 
 skip trailing newline 
		 send config values when data buffer is full
		  or no more data
 %02x=%08x 
  All device attributes are included in CXACRU_ALL_FILES
  so that the same list can be used multiple times:
      INIT   (define the device attributes)
      CREATE (create all the device files)
      REMOVE (remove all the device files)
  With the last two being defined as needed in the functions
  they are used in before calling CXACRU_ALL_FILES()
 the following three functions are stolen from driversusbcoremessage.c 
 must read status after completion 
 submit reading urb before the writing one 
 handle wsize == 0 
 check the return status and copy the data to the output buffer, if needed 
 len > 0 && len % 4 == 0 guaranteed by cxacru_cm() 
 firmware not loaded 
 Read MAC address 
 start ADSL 
 Start status polling 
 start polling 
 abort stop request 
 don't start polling 
 stopped 
 down 
 FirmwarePllFClkValue 
 FirmwarePllBClkValue 
 Enable SDRAM 
 Firmware 
 Boot ROM patch 
 Signature 
 Delay to allow firmware to start up. 
 instance init 
	 ensure that status polling continues unless
 stop polling from being stopped or started 
 V = Conexant			P = ADSL modem (Euphrates project)	
 V = Conexant			P = ADSL modem (Hasbani project)	
 V = Conexant			P = ADSL modem				
 V = Conexant			P = ADSL modem (Well PTI-800) 
 V = Conexant			P = ADSL modem				
 V = Conexant			P = ADSL modem (ZTE ZXDSL 852)		
 V = Olitec				P = ADSL modem version 2		
 V = Olitec				P = ADSL modem version 3		
 V = TrustAmigo Technology Co.	P = AMX-CA86U				
 V = Zoom				P = 5510				
 V = Draytek			P = Vigor 318				
 V = Zyxel				P = 630-C1 aka OMNI ADSL USB (Annex A)	
 V = Zyxel				P = 630-C3 aka OMNI ADSL USB (Annex B)	
 V = Aethra				P = Starmodem UM1020			
 V = Aztech Systems			P = ? AKA Pirelli AUA-010		
 V = Netopia			P = Cayman 3341(Annex A)3351(Annex B)	
 V = Netopia			P = Cayman 3342(Annex A)3352(Annex B)	
	 Avoid ADSL routers (cx82310_eth).
	  Abort if bDeviceClass is 0xff and iProduct is "USB NET CARD".
 SPDX-License-Identifier: GPL-2.0+
   xusbatm.c -	dumb usbatm-based driver for modems initialized in userspace
   Copyright (C) 2005 Duncan Sands, Roman Kagan (rkagan % mail ! ru)
 for eth_random_addr() 
 use random MAC as we've no way to get it from the device 
 SPDX-License-Identifier: (GPL-2.0+ OR BSD-2-Clause)
  Copyright (c) 2003, 2004
 	Damien Bergamini <damien.bergamini@free.fr>. All rights reserved.
  Copyright (c) 2005-2007 Matthieu Castet <castet.matthieu@free.fr>
  Copyright (c) 2005-2007 Stanislaw Gruszka <stf_xl@wp.pl>
  HISTORY : some part of the code was base on ueagle 1.3 BSD driver,
  Damien Bergamini agree to put his code under a DUAL GPLBSD license.
  The rest of the code was was rewritten from scratch.
  Debug macros
 cmv's from firmware 
 information about currently processed cmv 
 keep in sync with eaglectl 
  Elsa IDs
  Devolo IDs : pots if (pid & 0x10)
  Reference design USB IDs
 Eagle I 
 Eagle I 
 Eagle IIC 
 Eagle IIC 
 Eagle II 
 Eagle II 
 Eagle III 
 Eagle III 
 Eagle IV 
 Eagle IV 
  USR USB IDs
 macros for both struct usb_device_id and struct uea_softc 
  Set of macros to handle unaligned data in the firmware blob.
  The FW_GET_BYTE() macro is provided only for consistency.
 block information in eagle4 dsp firmware  
 l1_code is eagle4 dsp firmware format 
 structures describing a block within a DSP page 
 overlay 
 constants describing cmv type 
 for MEMACCESS 
 for ADSLDIRECTIVE 
 structures representing a CMV (Configuration and Management Variable) 
 structures representing swap information 
 overlay 
 structures representing interrupt data 
 Firmware loading 
  uea_send_modem_cmd - Send a command for pre-firmware devices.
	
	  Start to upload firmware : send reset
	
	  Tell the modem we finish : de-assert reset
  uea_load_firmware - Load usb firmware for pre-firmware devices.
 modem management : dsp firmware, sendread CMV, monitoring statistic
  Make sure that the DSP code provided is safe to use.
 enough space for page offsets? 
 enough space for blockcount? 
 enough space for block header? 
 skip blockaddr 
 enough space for block data? 
 zero is zero regardless endianes 
  send data to the idma pipe
  The uea_load_page() function must be called within a process context
 reload firmware when reboot start and it's loaded already 
 send block info through the IDMA pipe 
 send block data through the IDMA pipe 
 send block info through the IDMA pipe 
 send block data through the IDMA pipe 
 reload firmware when reboot start and it's loaded already 
 send block info through the IDMA pipe 
 we send a request, but we expect a reply 
 we send a request, but we expect a reply 
 size is in 16-bit word quantities 
	 in bulk mode the modem have problem with high rate
	  changing internal timing could improve things, but the
	  value is mysterious.
	  ADI930 don't support it (-EPIPE error).
 Original timming (1Mbits) from ADI (used in windows driver) 
  Monitor the modem and update the stat
  return 0 if everything is ok
  return < 0 if an error occurs (-EAGAIN reboot needed)
 not yet synchronized 
 initialization 
 operational 
 fail ... 
 test state 
 fast-retain ... 
		 release the dsp firmware as it is not needed until
		  the next failure
	 always update it as atm layer could not be init when we switch to
	  operational state
 wake up processes waiting for synchronization 
	 in case of a flags ( for example delineation LOSS (& 0x10)),
	  we check the status again in order to detect the failure earlier
 only for atu-c 
 only for atu-c 
 XXX only need to be done before operationnal... 
 not yet synchronized 
 initialization 
 fail ... 
 operational 
		 release the dsp firmware as it is not needed until
		  the next failure
	 always update it as atm layer could not be init when we switch to
	  operational state
 wake up processes waiting for synchronization 
	 TODO improve this state machine :
	  we need some CMV info : what they do and their unit
	  we should find the equivalent of eagle3- CMV
 check flags 
	 in case of a flags ( for example delineation LOSS (& 0x10)),
	  we check the status again in order to detect the failure earlier
 delineation LOSS 
 Reset Flag 
 rate data may be in upper or lower half of 64 bit word, strange 
 set proper name corresponding modem version and line type 
 30 bytes stack variable 
 30 bytes stack variable 
 if caller can handle old version, try to provide it 
 we can handle v1 cmv firmware version; 
 Enter in R-IDLE (cmv) until instructed otherwise 
 Dump firmware version 
 get options 
 send options 
 This really should not happen 
 Enter in R-ACT-REQ 
 we can only handle v2 cmv firmware version; 
 Enter in R-IDLE (cmv) until instructed otherwise 
 Dump firmware version 
 XXX don't read the 3th byte as it is always 6 
 get options 
 send options 
 This really should not happen 
 Enter in R-ACT-REQ 
 Start boot post firmware modem:
  - send reset commands through usb control pipe
  - start workqueue for DSP loading
  - send CMV options to modem
 ;-) 
 mask interrupt 
	 We need to set this here because, a ack timeout could have occurred,
	  but before we start the reboot, the ack occurs and set this to 1.
	  So we will failed to wait Ready CMV.
 reset statistics 
 tell the modem that we want to boot in IDMA mode 
 enter reset mode 
 original driver use 200ms, but windows driver use 100ms 
 leave reset mode 
 clear tx and rx mailboxes 
 demask interrupt 
 start loading DSP 
 wait for modem ready CMV 
  In case of an error wait 1s before rebooting the modem
  if the modem don't request reboot (-EAGAIN).
  Monitor the modem every 1s.
 Load second usb firmware for ADI930 chip 
 finish to send the fpga 
 Tell the modem we finish : de-assert reset 
 The modem send us an ack. First with check if it right 
	 FIXME : ADI930 reply wrong preambule (func = 2, sub = 2) to
	  the first MEMACCESS cmv. Ignore it...
 in case of MEMACCESS 
 The modem send us an ack. First with check if it right 
 in case of MEMACCESS 
  interrupt handler
 device-to-host interrupt 
  Start the modem : init the data and start kernel thread
	 Create worker thread, but don't start it here.  Start it after
	  all usbatm generic initialization is done.
  Stop the modem : kill kernel thread and free data
 flush the work item, when no one can schedule it 
 syfs interface 
 not yet synchronized 
 initialization 
 operational 
 fail ... 
 unknown 
 Retrieve the device End System Identifier (MAC) 
 ATM stuff 
 interface 0 is for firmwaremonitoring 
 interface 1 is for outbound traffic 
 ADI930 has only 2 interfaces and inbound traffic is on interface 1 
 interface 2 is for inbound traffic 
 first try to use module parameter 
 try to autodetect annex 
 ADI930 don't support iso 
 Ensure carrier is initialized to off as early as possible 
 Only start the worker thread when all init is done 
	 ADI930 has 2 interfaces and eagle 3 interfaces.
	  Pre-firmware device has one interface
  List of supported VIDPID
  USB driver descriptor
 SPDX-License-Identifier: GPL-2.0+
   speedtch.c  -  Alcatel SpeedTouch USB xDSL modem driver
   Copyright (C) 2001, Alcatel
   Copyright (C) 2003, Duncan Sands
   Copyright (C) 2004, David Woodhouse
   Based on "modem_run.c", copyright (C) 2001, Benoit Papillault
 milliseconds 
 milliseconds 
 size 1 
 size 8 
 size 4 
 size 1 
 size 1 
 milliseconds 
 milliseconds 
 milliseconds 
 zero means: use the default 
 set in probe, constant afterwards 
 milliseconds 
  firmware  
 URB 147 
 URB 148 
 URB 149 
 URB 150 
 Extra initialisation in recent drivers - gives higher speeds 
 URBext1 
 URBext2 
	 This seems to be the one which actually triggers the higher sync
	   rate -- it does require the new firmware too, although it works OK
 URBext3 
 URB 7 
 some modems need a read before writing the firmware 
 URB 8 : both leds are static green 
 USB led blinking green, ADSL led off 
 URB 11 
 URBs 12 to 139 - USB led blinking green, ADSL led off 
 USB led static green, ADSL led static red 
 URB 142 
 success 
	 Delay to allow firmware to start up. We can do this here
 Enable software buffering, if requested 
 Magic spell; don't ask us what this does 
  ATM  
 It may never resync again unless we ask it to... 
 The following check is racy, but the race is harmless 
 The magic interrupt for "up state" 
 The magic interrupt for "down state" 
 Set MAC address, it is stored in the serial number 
 Start modem synchronisation 
 Set up interrupt endpoint 
 Doesn't matter; we'll poll anyway 
 Start status polling 
	
	  Since resubmit_timer and int_urb can schedule themselves and
	  each other, shutting them down correctly takes some care
 signal shutdown 
	
	  At this point, speedtch_handle_int and speedtch_resubmit_int
	  can run or be running, but instance->int_urb == NULL means that
	  they will not reschedule
  USB  
 sanity checks 
 claim all interfaces 
 module parameters may change at any moment, so take a snapshot 
 fall back to default 
 fall back to bulk 
 fall back to bulk if endpoint not found 
 check whether the modem already seems to be alive 
  init  
 SPDX-License-Identifier: GPL-2.0+
   usbatm.c - Generic USB xDSL driver core
   Copyright (C) 2001, Alcatel
   Copyright (C) 2003, Duncan Sands, SolNegro, Josep Comas
   Copyright (C) 2004, David Woodhouse, Roman Kagan
   Written by Johan Verrept, Duncan Sands (duncan.sands@free.fr) and David Woodhouse
   1.7+:	- See the check-in logs
   1.6:	- No longer opens a connection if the firmware is not loaded
   		- Added support for the speedtouch 330
   		- Removed the limit on the number of devices
   		- Module now autoloads on device plugin
   		- Merged relevant parts of sarlib
   		- Replaced the kernel thread with a tasklet
   		- New packet transmission code
   		- Changed proc file contents
   		- Fixed all known SMP races
   		- Many fixes and cleanups
   		- Various fixes by Oliver Neukum (oliver@neukum.name)
   1.5A:	- Version for inclusion in 2.5 series kernel
 		- Modifications by Richard Purdie (rpurdie@rpsys.net)
 		- made compatible with kernel 2.5.6 onwards by changing
 		usbatm_usb_send_data_context->urb to a pointer and adding code
 		to alloc and free it
 		- remove_wait_queue() added to usbatm_atm_processqueue_thread()
   1.5:	- fixed memory leak when atmsar_decode_aal5 returned NULL.
 		(reported by stephen.robinson@zen.co.uk)
   1.4:	- changed the spin_lock() under interrupt to spin_lock_irqsave()
 		- unlink all active send urbs of a vcc that is being closed.
   1.3.1:	- added the version number
   1.3:	- Added multiple send urb support
 		- fixed memory leak and vcc->tx_inuse starvation bug
 		  when not enough memory left in vcc.
   1.2:	- Fixed race condition in usbatm_usb_send_data()
   1.1:	- Turned off packet debugging
 64  ATM_CELL_SIZE 
 64  ATM_CELL_SIZE 
 delay to recover processing after urb submission fails 
 receive 
 vpivci lookup 
 raw cell reassembly 
 send 
 ATM 
  misc  
  urbs  
	 vdbg("%s: submitting urb 0x%p, size %u",
 consider all errors transient and return the buffer back to the queue 
 must add to the front when sending; doesn't matter when receiving 
 make sure the channel doesn't stall 
	 vdbg("%s: urb 0x%p, status %d, actual_length %d",
 Can be invoked from task context, protect against interrupts 
 must add to the back when receiving; doesn't matter when sending 
 throttle processing in case of an error 
  decode  
 OAM F5 end-to-end 
 discard cells already received 
 guard against overflow 
 atm_charge increments rx_drop 
	 extract cells from incoming data, taking into account that
 we have a partially received atm cell 
 add new data and process cell 
 not enough data to fill the cell 
		 length was not a multiple of stride -
  encode  
 trailer will go in this cell 
 trailer[0] = 0;		UU = 0 
 trailer[1] = 0;		CPI = 0 
 adjust PTI 
 tag this skb finished 
  receive  
  send  
 no more senders 
 racy disconnection check - fine 
 initialize the control block 
  bean counting  
  ATM  
 catch bugs 
 taken in usbatm_atm_init 
 only support AAL5 
 sanity checks 
 vs self, usbatm_atm_close, usbatm_usb_disconnect 
 vs self, usbatm_atm_open, usbatm_usb_disconnect 
	 ATM init.  The ATM initialization scheme suffers from an intrinsic race
	  condition: callbacks we register can be executed at once, before we have
	  initialized the struct atm_dev.  To protect against this, all callbacks
 temp init ATM device, set to 128kbit 
 dropped in usbatm_atm_dev_close 
 ready for ATM callbacks 
 submit all rx URBs 
 usbatm_atm_dev_close will eventually be called 
  USB  
 instance init 
 public fields 
 private fields 
 dropped in usbatm_usb_disconnect 
 tx buffer size must be a positive multiple of the stride 
 rx buffer size must be a positive multiple of the endpoint maxpacket 
 round 
 initialize urbs 
 zero the tx padding to avoid leaking information 
 put all tx URBs on the list of spares 
 pretend that heavy_init was run 
 turn usbatm_[rt]x_process into something close to a no-op 
 no need to take the spinlock 
 ATM finalize 
 taken in usbatm_usb_probe 
  init  
  debug  
 SPDX-License-Identifier: GPL-2.0
  mtu3_gadget.c - MediaTek usb3 DRD peripheral support
  Copyright (C) 2016 MediaTek Inc.
  Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
 ep0 makes use of PIO, needn't unmap it 
 exclude EP0 
others are ignored 
 slot mainly affects bulkisoc transfer, so ignore int 
 abort all pending requests 
 check ep number and direction against endpoint 
 don't queue if the ep is down 
 REVISIT: set BPS ?? 
  Set or clear the halt bit of an EP.
  A halted EP won't TXRX any data but will queue requests.
		
		  If there is not request for TX-EP, QMU will not transfer
		  data to TX-FIFO, so no need check whether TX-FIFO
		  holds bytes or not here
 Sets the halt feature with the clear requests ignored 
 remote wakeup feature is not enabled by host 
 we'd rather not pullup unless the device is active. 
 save it for mtu3_start() to process the request 
 don't disconnect if it's not connected 
 deactivate the hardware 
	
	  killing any outstanding requests will quiesce the driver;
	  then report disconnect
 initialize maxpacket as SS 
 initialize endpoint list just once 
 called when SOF packets stop for 3+ msec or enters U3 
 called when VBUS drops below session threshold, and in other cases 
 report disconnect, if we didn't flush EP state 
 SPDX-License-Identifier: GPL-2.0
  mtu3_dr.c - dual role switch and host glue layer
  Copyright (C) 2016 MediaTek Inc.
  Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
 mt8173 etc 
 cycle debounce 
 polarity for ip sleep 
 mt8183 
 cycle debounce 
 polarity 
 mt8192 
 mt2712 etc 
 specific revision 1.01 
 specific revision 1.02 
  ip-sleep wakeup mode:
  all clocks can be turn off, but power domain should be kept on
 wakeup function is optional 
 only configure ports will be used later 
 power on host ip 
 power on and enable u3 ports except skipped ones 
 power on and enable all u2 ports 
 power down and disable u3 ports except skipped ones 
 power down and disable u2 ports except skipped ones 
 power down host ip 
 power on host ip 
 power on u3 ports except skipped ones 
 power on all u2 ports except skipped ones 
 here not skip port0 due to PDN can be set repeatedly 
 power down u3 ports except skipped ones 
 power down u2 ports except skipped ones 
 power down host ip 
	
	  power on host and power onenable all ports
	  if support OTG, gadget driver will switch port0 to device mode
 if port0 supports dual-role, works as host mode by default 
  If host supports multiple ports, the VBUSes(5V) of ports except port0
  which supports OTG are better to be enabled by default in DTS.
  Because the host driver will keep link with devices attached when system
  enters suspend mode, so no need to control VBUSes after initialization.
 SPDX-License-Identifier: GPL-2.0
  mtu3_debugfs.c - debugfs interface
  Copyright (C) 2019 MediaTek Inc.
  Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
 SPDX-License-Identifier: GPL-2.0
  mtu3_dr.c - dual role switch and host glue layer
  Copyright (C) 2016 MediaTek Inc.
  Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
 only port0 supports dual-role mode 
 1. power off and disable u2 port0 
 2. power on, enable u2 port0 and select its mode 
 1. power off and disable u3 port0 
 2. power on, enable u3 port0 and select its mode 
 after all clocks are stable 
 vbus is optional 
 the default mode is host as probe does 
 extcon is optional 
 default as host, switch to device mode if needed 
  We provide an interface via debugfs to switch between host and device modes
  depending on user input.
  This is useful in special cases, such as uses TYPE-A receptacle but also
  wants to support dual-role mode.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2016 MediaTek Inc.
  Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
 u2-port0 should be powered on and enabled; 
 wait for ip enter sleep mode 
 workaround: avoid wrong wakeup signal latch for some soc 
 reset whole ip (xhci & u3d) 
	
	  device ip may be powered on in firmwareBROM stage before entering
	  kernel stage;
	  power down device ip, otherwise ip-sleep will fail when working as
	  host only mode
 if host role is supported 
 optional property, ignore the error if it does not exist 
 if dual-role mode is supported 
 can't disable port0 when use dual-role mode 
 all elements are set to ZERO as default value 
 enable power domain 
 default as host 
 SPDX-License-Identifier: GPL-2.0
  mtu3_trace.c - trace support
  Copyright (C) 2019 MediaTek Inc.
  Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
 SPDX-License-Identifier: GPL-2.0
  mtu3_qmu.c - Queue Management Unit driver for device controller
  Copyright (C) 2016 MediaTek Inc.
  Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
  Queue Management Unit (QMU) is designed to unload SW effort
  to serve DMA interrupts.
  By preparing General Purpose Descriptor (GPD) and Buffer Descriptor (BD),
  SW links data buffers and triggers QMU to send  receive data to
  host  from device at a time.
  And now only GPD is supported.
  For more detailed information, please refer to QMU Programming Guide
 software own all gpds as default 
 check if a ring is emtpy 
 one gpd is reserved to simplify gpd preparation 
 SW own it 
 get the next GPD 
 SW own it 
 get the next GPD 
 set QMU start address 
 send zero length packet according to ZLP flag in GPD 
 don't expect ZLP 
 move to next GPD when receive ZLP 
 may called in atomic context 
Stop QMU 
  QMU can't transfer zero length packet directly (a hardware limit
  on old SoCs), so when needs to send ZLP, we intentionally trigger
  a length error interrupt, and in the ISR sends a ZLP by BMU.
 by pass the current GDP 
enable DMAREQEN, switch back to QMU mode 
  NOTE: request list maybe is already empty as following case:
  queue_tx --> qmu_interrupt(clear interrupt pending, schedule tasklet)-->
  queue_tx --> process_tasklet(meanwhile, the second one is transferred,
  tasklet process both of them)-->qmu_interrupt for second one.
  To avoid upper case, put qmu_done_tx in ISR directly to process it.
transfer phy address got from QMU register to virtual address 
 U3D_QISAR1 is read update 
 W1C 
 SPDX-License-Identifier: GPL-2.0
  mtu3_gadget_ep0.c - MediaTek USB3 DRD peripheral driver ep0 handling
  Copyright (c) 2016 MediaTek Inc.
  Author:  Chunfeng.Yun <chunfeng.yun@mediatek.com>
 ep0 is always mtu3->in_eps[0] 
 for high speed test mode; see USB 2.0 spec 7.1.20 
 implicit SYNC then DATA0 to start 
 JKJKJKJK x9 
 JJKKJJKK x8 
 JJJJKKKK x8 
 JJJJJJJKKKKKKK x8 
 JJJJJJJK x8 
 JKKKKKKK x10, JK 
 implicit CRC16 then EOP to end 
	
	  because the length of test packet is less than max packet of HS ep0,
	  write it into fifo directly.
  A. send STALL for setup transfer without data stage:
 		set SENDSTALL and SETUPPKTRDY at the same time;
  B. send STALL for other cases:
 		set SENDSTALL only.
 EP0_SENTSTALL is W1C 
 queue data stage to handle 6 byte SET_SEL request 
 class, vendor, etc ... delegate 
 prepare a data stage for GET_STATUS 
 no TX completion interrupt, and need restart platform after test 
 send status before entering test mode. 
 wait for ACK status sent by host 
 superspeed only 
			
			  forward the request because function drivers
			  should handle it
 ignore request if endpoint is wedged 
 class, vendor, etc ... delegate 
  handle all control requests can be handled
  returns:
 	negative errno - error happened
 	zero - need delegate SETUP to gadget driver
 	positive - already handled
 the gadget driver handles everything except what we must handle 
 change it after the status stage 
			
			  USB2 spec sec 9.4.7, if wValue is 0 then dev
			  is moved to addressed state
 delegate SET_CONFIGURATION, etc 
 receive an data packet (OUT) 
 read packet and ack; or stall because of gadget driver bug 
 read the buffer 
 give back the request if have received all data 
 transmitting to the host (IN) 
 load the data 
 send it out, triggering a "txpktrdy cleared" irq 
 clean up any leftover transfers 
 no data stage, nothing to do 
 nothing to do 
 already asked us to continue delayed status 
 do delayed STATUS stage till receive ep0_queue 
 no data stage 
 complete zlp request directly 
 W1C 
 only handle ep0's 
 abort current SETUP, and process new one 
 we sent a stall.. need to clear it now.. 
 irq on clearing txpktrdy 
 irq on set rxpktrdy 
 can't happen 
 always enabled 
 always enabled 
 control-OUT data 
 control-IN data 
 needn't giveback the request for handling delay STATUS 
 sequence #1, IN ... start writing the data 
 we just won't support this 
	
	  stalls are usually issued after parsing SETUP packet, either
	  directly in irq context from setup() or else later.
 SPDX-License-Identifier: GPL-2.0
  mtu3_core.c - hardware access layer and gadget initexit of
                      MediaTek usb3 Dual-Role Controller Driver
  Copyright (C) 2016 MediaTek Inc.
  Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
 ensure that @mep->fifo_seg_size is power of two 
 enabledisable U3D SS function 
 If usb3_en==0, LTSSM will go to SS.Disable state 
 setclear U3D HS device soft connect 
 only port0 of U2U3 supports device mode 
 reset U3D's device module. 
 Clear EP0 and TxRx EPn interrupts status 
 Clear U2 USB common interrupts status 
 Clear U3 LTSSM interrupts status 
 Clear speed change interrupt status 
 Clear QMU interrupt status 
 disable all interrupts 
 Disable level 1 interrupts 
 Disable endpoint interrupts 
 enable system global interrupt 
Enable level 1 interrupts (BMU, QMU, MAC3, DMA, MAC2, EPCTL) 
 Enable U2 common USB interrupts 
 Enable U3 LTSSM interrupts 
 Enable QMU interrupts. 
 Enable speed change interrupt 
 disable U3 SS function 
 disable HS function 
 HSFS detected by HW 
 CSR registers will be reset to default value if port is disabled 
 disable LGO_U1U2 by default 
 enable accept LGO_U1U2 link command from host 
 device responses to u3_exit from host automatically 
 automatically build U2 link when U3 detect fail 
 auto clear SOFT_CONN when clear USB3_EN if work as HS 
 delay about 0.1us from detecting reset to send chirp-K 
 enable automatical HWRW from L1 
 reset: u2 - data toggle, u3 - SeqN, flow control status etc 
 setclear the stall and toggle bits for non-ep0 
 TX 
 RX 
 Initialize the default interrupts 
 for non-ep0 
 Enable QMU Done interrupt 
Enable QMU Done interrupt 
 for non-ep0 
  Two scenarios:
  1. when device IP supports SS, the fifo of EP0, TX EPs, RX EPs
 	are separated;
  2. when supports only HS, the fifo is shared for all EPs, and
 	the capability registers of @EPNTXFFSZ or @EPNRXFFSZ indicate
 	the total fifo size of non-ep0, and ep0's is fixed to 64B,
 	so the total fifo size is 64B + @EPNTXFFSZ;
 	Due to the first 64B should be reserved for EP0, non-ep0's fifo
 	starts from offset 64 and are divided into two equal parts for
 	TX or RX EPs for simplification.
 Enable EP0 interrupt 
 one for ep0, another is reserved 
 ep0 uses in_eps[0], out_eps[0] is reserved 
 be sure interrupts are disabled before registration of ISR 
 U2U3 detected by HW 
 vbus detected by HW 
 use new QMU format when HW version >= 0x1003 
 W1C 
BESLCK = 4 < BESLCK_U3 = 10 < BESLDCK = 15 
BESLCK = 4 < BESLCK_U3 = 10 < BESLDCK = 15 
 W1C 
 W1C 
 U3D_LV1ISR is RU 
 check the max_speed parameter 
 default as SSP 
  we set 32-bit DMA mask by default, here check whether the controller
  supports 36-bit DMA or not, if it does, set 36-bit DMA mask.
 If set 36-bit DMA mask fails, fall back to 32-bit DMA mask 
 for backward compatibility 
 power down device IP for power saving by default 
 host only, should wait for ip sleep 
 device is started and pullup D+, ip can sleep 
 ip can't sleep if not pullup D+ when support device mode 
 SPDX-License-Identifier: GPL-2.0+
  Support for the Maxtor OneTouch USB hard drive's button
  Current development and maintenance by:
 	Copyright (c) 2005 Nick Sillik <n.sillik@temple.edu>
  Initial work by:
 	Copyright (c) 2003 Erik Thyren <erth7411@student.uu.se>
  Based on usbmouse.c (Vojtech Pavlik) and xpad.c (Marko Friedemann)
 input device interface 
 usb device 
 urb for interrupt in report 
 input data 
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
 success 
 unlink 
 -EPIPE:  should clear the halt 
 error 
 CONFIG_PM 
 Use default transport and protocol 
 SPDX-License-Identifier: GPL-2.0
  USB Attached SCSI
  Note that this is not the same as the USB Mass Storage driver
  Copyright Hans de Goede <hdegoede@redhat.com> for Red Hat, Inc. 2013 - 2016
  Copyright Matthew Wilcox for Intel Corp, 2010
  Copyright Sarah Sharp for Intel Corp, 2010
 for async scanning 
 Overrides scsi_pointer 
 I hate forward declarations, but I actually have a loop 
  This driver needs its own workqueue, as we need to control memory allocation.
  In the course of error handling and power management uas_wait_for_pending_cmnds()
  needs to flush pending work items. In these contexts we cannot allocate memory
  by doing block IO as we would deadlock. For the same reason we cannot wait
  for anything allocating memory not heeding these constraints.
  So we have to control all work items that can be on the workqueue we flush.
  Hence we cannot share a queue and need our own.
 Sense urbs were killed, clear COMMAND_INFLIGHT manually 
 too late 
 data urbs may have never gotten their submit flag set 
 cancel data transfers on error 
 Error, cancel data transfers 
 Unlinking of data urbs must be done without holding the lock 
 Data urbs should not complete before the cmd urb is submitted 
 error: no data transfered 
  Why should I request the Status IU before sending the Command IU?  Spec
  says to, but also says the device may receive them in any order.  Seems
  daft to me.
 Re-check scsi_block_requests now that we've the host-lock 
 Find a free uas-tag 
 uas-tag == usb-stream-id, so 1 based 
	
	  in case of fatal errors the SCSI layer is peculiar
	  a command that has finished is a success for the purpose
	  of queueing, no matter how fatal the error
 If we did nothing, give up now 
  For now we do not support actually sending an abort to the device, so
  this eh always fails. Still we must define it to make sure that we've
  dropped all references to the cmnd in question once this function exits.
 Ensure that try_complete does not call scsi_done 
 Drop all refs to this cmnd, kill data urbs to break their ref 
	
	  The protocol has no requirements on alignment in the strict sense.
	  Controllers may or may not have alignment restrictions.
	  As this is not exported, we use an extremely conservative guess.
 A few buggy USB-ATA bridges don't understand FUA 
 UAS also needs to support FL_ALWAYS_SYNC 
 Some disks cannot handle READ_CAPACITY_16 
 Some disks cannot handle WRITE_SAME 
	
	  Some disks return the total number of blocks in response
	  to READ CAPACITY rather than the highest block number.
	  If this device makes that mistake, tell the sd driver.
	
	  in some cases we have to guess
	
	  Some devices don't like MODE SENSE with page=0x3f,
	  which is the command used for checking if a device
	  is write-protected.  Now that we tell the sd driver
	  to do a 192-byte transfer with this command the
	  majority of devices work fine, but a few still can't
	  handle it.  The sd driver will simply assume those
	  devices are write-enabled.
	
	  1 tag is reserved for untagged commands +
	  1 tag to avoid off by one errors in some bridge firmwares
 Submit the delayed_work for SCSI-device scanning 
 Not empty 
  Wait for any pending cmnds to complete, on usb-2 sense_urbs may temporarily
  get empty while there still is more work to do due to sense-urbs completing
  with a READWRITE_READY iu code, so keep waiting until the list gets empty.
 Block new requests 
 we must unblock the host in every case lest we deadlock 
	
	  Prevent SCSI scanning (if it hasn't started yet)
	  or wait for the SCSI-scanning routine to stop.
  Put the device back in usb-storage mode on shutdown, as some BIOS-es
  hang on reboot when the device is still in uas mode. Note the reset is
  necessary as some devices won't revert to usb-storage mode without it.
 SPDX-License-Identifier: GPL-2.0
 __u8 request      
 __u8 request type 
 __u16 value       
 __u16 index       
 void data        
 __u16 size 	     
 int timeout       
 __u8 request      
 __u8 request type 
 __u16 value       
 __u16 index       
 void data        
 __u16 size 	     
 int timeout 	     
 Force Modem mode 
 Force Mass Storage mode (keep CD-Rom) 
 Normal TRU-Install Logic 
		
		  If there is not Linux software on the TRU-Install device
		  then switch to modem mode
 SPDX-License-Identifier: GPL-2.0+
  Driver for SanDisk SDDR-55 SmartMedia reader
  SDDR55 driver v0.1:
  First release
  Current development and maintenance by:
    (c) 2002 Simon Munton
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
 Size of card in bytes 
 maximum number of logical blocks 
 log2 of pagesize 
 1 if pagesize == 256 
 Size of block in pages 
 log2 of blocksize 
 2^blockshift - 1 
 non zero if card is write protected 
 non zero if we find a map error
 logical to physical map 
 physical to logical map 
 set if we detect something nasty 
 number of jiffies since we last talked to device 
  check if card inserted, if there is, update read_only status
  return non zero if no card
 send command 
 hardware error 
 expect to get short transfer if no card fitted 
 had a short transfer, no card inserted, free map memory 
 not ready, medium not present 
 hardware error 
 check write protect status 
 now read status 
 hardware error 
 Since we only read in one block at a time, we have to create
 a bounce buffer and move the data a piece at a time between the
 bounce buffer and the actual transfer buffer.
 out of memory 
 have we got to end? 
 Read as many sectors as possible in this block
 no pba for this lba, fill with zeroes 
 send command 
 read data 
 now read status 
 check status for error 
 Store the data in the transfer buffer
 check if we are allowed to write 
 read only 
 Since we only write one block at a time, we have to create
 a bounce buffer and move the data a piece at a time between the
 bounce buffer and the actual transfer buffer.
 have we got to end? 
 Write as many sectors as possible in this block
 Get the data from the transfer buffer
 no pba allocated for this lba, find a free pba to use 
 set pba to first block in zone lba is in 
			
			  Scan through the map looking for an unused block
			  leave 16 unused blocks at start (or as many as
			  possible) since the sddr55 seems to reuse a used
			  block when it shouldn't if we don't leave space.
 oh dear 
 medium error 
 set writing to unallocated block flag 
 set the lba into the command, modulo 1000 
 send command 
 set_sense_info is superfluous here? 
 peripheral write error 
 send the data 
 set_sense_info is superfluous here? 
 peripheral write error 
 now read status 
 set_sense_info is superfluous here? 
 peripheral write error 
 check status for error 
 update the lba<->pba maps, note new_pba might be the same as pba 
 check that new_pba wasn't already being used 
 update the pba<->lba maps for new_pba 
 1MB
 2MB
 5d is a ROM card with pagesize 512.
 4MB
 8MB
 16MB
 32MB
 64MB
 128MB
 unknown
 set maximum lba 
	
	  Each block is 64 bytes of control data, so block i is located in
	  scatterlist block i64128k = i(2^6)(2^-17) = i(2^-11)
			
			  Every 1024 physical blocks ("zone"), the LBA numbers
			  go back to zero, but are within a higher
			  block of LBA's. Also, there is a maximum of
			  1000 LBA's per zone. In other words, in PBA
			  1024-2047 you will find LBA 0-999 which are
			  really LBA 1000-1999. Yes, this wastes 24
			  physical blocks per zone. Go figure. 
			  These devices can have blocks go bad, so there
			  are 24 spare blocks to use when blocks do go bad.
			
			  SDDR55 returns 0xffff for a bad block, and 0x400 for the 
			  CIS block. (Is this true for cards 8MB or less??)
			  Record these in the physical to logical map
  Transport for the Sandisk SDDR-55
 write-protected for now, no block descriptor support
	
	  Dummy up a response for INQUIRY since SDDR55 doesn't
	  respond to INQUIRY commands
	
	  only check card status if the map isn't allocated, ie no card seen yet
	  or if it's been over half a second since we last accessed it
 check to see if a card is fitted 
 new media, set unit attention, not ready to ready 
	
	  if we detected a problem with the map when writing,
	  don't allow any more access
 incompatible medium 
		
		  figure out the maximum logical block number, allowing for
		  the fact that only 250 out of every 256 are used
		
		  Last page in the card, adjust as we only use 250 out of
		  every 256 pages
 invalid field in command 
 convert page to block and page-within-block
 locate physical block corresponding to logical block
 invalid field in command 
 illegal command 
 FIXME: sense buffer?
 SPDX-License-Identifier: GPL-2.0+
  Driver for SanDisk SDDR-09 SmartMedia reader
    (c) 2000, 2001 Robert Baruch (autophile@starband.net)
    (c) 2002 Andries Brouwer (aeb@cwi.nl)
  Developed with the assistance of:
    (c) 2002 Alan Stern <stern@rowland.org>
  The SanDisk SDDR-09 SmartMedia reader uses the Shuttle EUSB-01 chip.
  This chip is a programmable USB controller. In the SDDR-09, it has
  been programmed to obey a certain limited set of SCSI commands.
  This driver translates the "real" SCSI commands to the SDDR-09 SCSI
  commands.
  Known vendor commands: 12 bytes, first byte is opcode
  E7: read scatter gather
  E8: read
  E9: write
  EA: erase
  EB: reset
  EC: read status
  ED: read ID
  EE: write CIS (?)
  EF: compute checksum (?)
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
  First some stuff that does not belong here:
  data on SmartMedia and other cards, completely
  unrelated to this driver.
  Similar stuff occurs in <linuxmtdnand_ids.h>.
 1<<cs bytes total capacity 
 1<<ps bytes in a page 
 1<<bs pages in an erase block 
 1<<zs blocks in a zone 
 # of logical blocks is 125128 of this 
 length of an address in bytes - 1 
  NAND Flash Manufacturer ID Codes
  It looks like it is unnecessary to attach manufacturer to the
  remaining data: SSFDC prescribes manufacturer-independent id codes.
  256 MB NAND flash has a 5-byte ID with 2nd byte 0xaa, 0xba, 0xca or 0xda.
 NAND flash 
 1 MB 
 1 MB 
 1 MB 
 2 MB 
 2 MB 
 4 MB 
 4 MB 
 4 MB 
 8 MB 
 16 MB 
 32 MB 
 64 MB 
 128 MB 
 MASK ROM 
 2 MB 
 4 MB 
 8 MB 
 16 MB 
 32 MB 
  ECC computation.
 compute 3-byte ecc on 256 bytes 
 collect 16 checksum bits 
 put 4+4+4 = 12 bits in the ecc 
  The actual driver starts here.
 Size of card in bytes 
 Size of page in bytes 
 log2 of pagesize 
 Size of block in pages 
 log2 of blocksize 
 2^blockshift - 1 
 logical to physical map 
 physical to logical map 
 number of available pages 
 write protected 
  On my 16MB card, control blocks have size 64 (16 real control bytes,
  and 48 junk bytes). In reality of course the card uses 16 control bytes,
  so the reader makes up the remaining 48. Don't know whether these numbers
  depend on the card. For now a constant.
  On my Combo CFSM reader, the SM reader has LUN 1.
  (and things fail with LUN 0).
  It seems LUN is irrelevant for others.
  LBA and PBA are unsigned ints. Special values.
 send vendor interface command (0x41) 
 called for requests 0, 1, 8 
 Get the receive or send control pipe number
  Test Unit Ready Command: 12 bytes.
  byte 0: opcode: 00
  Request Sense Command: 12 bytes.
  byte 0: opcode: 03
  byte 4: data length
  Read Command: 12 bytes.
  byte 0: opcode: E8
  byte 1: last two bits: 00: read data, 01: read blockwise control,
 			10: read both, 11: read pagewise control.
 	 It turns out we need values 20, 21, 22, 23 here (LUN 1).
  bytes 2-5: address (interpretation depends on byte 1, see below)
  bytes 10-11: count (idem)
  A page has 512 data bytes and 64 control bytes (16 control and 48 junk).
  A read data command gets data in 512-byte pages.
  A read control command gets control in 64-byte chunks.
  A read both command gets data+control in 576-byte chunks.
  Blocks are groups of 32 pages, and read blockwise control jumps to the
  next block, while read pagewise control jumps to the next page after
  reading a group of 64 control bytes.
  [Here 512 = 1<<pageshift, 32 = 1<<blockshift, 64 is constant?]
  (1 MB and 2 MB cards are a bit different, but I have only a 16 MB card.)
  Read Data
  fromaddress counts data shorts:
  increasing it by 256 shifts the bytestream by 512 bytes;
  the last 8 bits are ignored.
  nr_of_pages counts pages of size (1 << pageshift).
 The last 8 bits of fromaddress are ignored. 
  Read Blockwise Control
  fromaddress gives the starting position (as in read data;
  the last 8 bits are ignored); increasing it by 32256 shifts
  the output stream by 64 bytes.
  count counts control groups of size (1 << controlshift).
  For me, controlshift = 6. Is this constant?
  After getting one control group, jump to the next block
  (fromaddress += 8192).
  Read both Data and Control
  fromaddress counts data shorts, ignoring control:
  increasing it by 256 shifts the bytestream by 576 = 512+64 bytes;
  the last 8 bits are ignored.
  nr_of_pages counts pages of size (1 << pageshift) + (1 << controlshift).
  Read Pagewise Control
  fromaddress gives the starting position (as in read data;
  the last 8 bits are ignored); increasing it by 256 shifts
  the output stream by 64 bytes.
  count counts control groups of size (1 << controlshift).
  For me, controlshift = 6. Is this constant?
  After getting one control group, jump to the next page
  (fromaddress += 256).
  Erase Command: 12 bytes.
  byte 0: opcode: EA
  bytes 6-9: erase address (big-endian, counting shorts, sector aligned).
  Always precisely one block is erased; bytes 2-5 and 10-11 are ignored.
  The byte address being erased is 2Eaddress.
  The CIS cannot be erased.
  Write CIS Command: 12 bytes.
  byte 0: opcode: EE
  bytes 2-5: write address in shorts
  bytes 10-11: sector count
  This writes at the indicated address. Don't know how it differs
  from E9. Maybe it does not erase? However, it will also write to
  the CIS.
  When two such commands on the same page follow each other directly,
  the second one is not done.
  Write Command: 12 bytes.
  byte 0: opcode: E9
  bytes 2-5: write address (big-endian, counting shorts, sector aligned).
  bytes 6-9: erase address (big-endian, counting shorts, sector aligned).
  bytes 10-11: sector count (big-endian, in 512-byte sectors).
  If write address equals erase address, the erase is done first,
  otherwise the write is done first. When erase address equals zero
  no erase is done?
 erase address, write same address 
  Read Scatter Gather Command: 3+4n bytes.
  byte 0: opcode E7
  byte 2: n
  bytes 4i-1,4i,4i+1: page address
  byte 4i+2: page count
  (i=1..n)
  This reads several pages from the card to a single memory buffer.
  The last two bits of byte 1 have the same meaning as for E8.
  Read Status Command: 12 bytes.
  byte 0: opcode: EC
  Returns 64 bytes, all zero except for the first.
  bit 0: 1: Error
  bit 5: 1: Suspended
  bit 6: 1: Ready
  bit 7: 1: Not write-protected
 Figure out the initial LBA and page
 Since we only read in one block at a time, we have to create
 a bounce buffer and move the data a piece at a time between the
 bounce buffer and the actual transfer buffer.
 This could be made much more efficient by checking for
 contiguous LBA's. Another exercise left to the student.
 Find number of pages we can read in this block 
 Not overflowing capacity? 
 Find where this lba lives on disk 
 this lba was never written 
			
			  This is not really an error. It just means
			  that the block has never been written.
			  Instead of returning an error
			  it is better to return all zero data.
 Store the data in the transfer buffer
		
		  Maybe it is impossible to write to PBA 1.
		  Fake success, but don't do anything.
 read old contents 
 check old contents and fill lba 
 copy in new stuff and compute ECC 
 Figure out the initial LBA and page 
	
	  blockbuffer is used for reading in the old data, overwriting
	  with the new data, and performing ECC calculations
	
	  TODO: instead of doing kmallockfree for each write,
	  add a bufferpointer to the info structure
	
	  Since we don't write the user data directly to the device,
	  we have to create a bounce buffer and move the data a piece
	  at a time between the bounce buffer and the actual transfer buffer.
 Write as many sectors as possible in this block 
 Not overflowing capacity? 
 Get the data from the transfer buffer 
  Read Device ID Command: 12 bytes.
  byte 0: opcode: ED
  Returns 2 bytes: Manufacturer ID and Device ID.
  On more recent cards 3 bytes: the third byte is an option code A5
  signifying that the secret command to read an 128-bit ID is available.
  On still more recent cards 4 bytes: the fourth byte C0 means that
  a second read ID cmd is available.
 write protected 
  Reset Command: 12 bytes.
  byte 0: opcode: EB
 Byte 0 is the manufacturer 
 Byte 1 is the device type 
		
		  MB or MiB? It is neither. A 16 MB card has
		  17301504 raw bytes, of which 16384000 are
		  usable for user data.
 Byte 2 is code to signal availability of 128-bit ID 
 Byte 3 announces the availability of another read ID command 
	
	  size of a block is 1 << (blockshift + pageshift) bytes
	  divide into the total capacity to get the number of blocks
	
	  read 64 bytes for every block (actually 1 << CONTROL_SHIFT)
	  but only use a 64 KB buffer
	  buffer size used must be a multiple of (1 << CONTROL_SHIFT)
	
	  Define lba-pba translation table
 special PBAs have control field 0^16 
 unwritten PBAs have control field FF^16 
 normal PBAs start with six FFs 
 check even parity 
		
		  Every 1024 physical blocks ("zone"), the LBA numbers
		  go back to zero, but are within a higher block of LBA's.
		  Also, there is a maximum of 1000 LBA's per zone.
		  In other words, in PBA 1024-2047 you will find LBA 0-999
		  which are really LBA 1000-1999. This allows for 24 bad
		  or special physical blocks per zone.
	
	  Approximate capacity. This is not entirely correct yet,
	  since a zone with less than 1000 usable pages leads to
	  missing LBAs. Especially if it is the last zone, some
	  LBAs can be past capacity.
 set the configuration -- STALL is an acceptable response here 
 it's not a stall, but another error -- time to bail 
  This is needed at a very early stage. If this is not listed in the
  unusual devices list but called from here then LUN 0 of the combo reader
  is not recognized. But I do not know what precisely these calls do.
 get 07 02
 get 07 00
 get 70 00 00 00 00 00 00  00 00 00 00 00 00
 70: current command
 sense key 0, sense code 0, extd sense code 0
 additional transfer length  = sizeof(data) - 7
 Or: 70 00 06 00 00 00 00 0b 00 00 00 00 28 00 00 00 00 00
 sense key 06, sense code 28: unit attention,
 not ready to ready transition
 test unit ready
 not result 
  Transport for the Microtech DPCM-USB
		
		  LUN 0 corresponds to the CompactFlash card reader.
		
		  LUN 1 corresponds to the SmartMedia card reader.
		
		  Set the LUN to 0 (just in case).
  Transport for the Sandisk SDDR-09
 note: no block descriptor support 
 for a faked command, we have to follow with a faked sense 
	
	  Dummy up a response for INQUIRY since SDDR09 doesn't
	  respond to INQUIRY commands
 read WP bit 
 probably no media 
 not ready 
 medium not present 
 map initialization, must follow get_cardinfo()
 probably out of memory 
 Report capacity
 Report page size
		
		  They ask for the ReadWrite error recovery page,
		  or for all pages.
 %% We should check DBD %% 
 illegal request 
 invalid field in CDB 
	
	  catch-all for all other commands, except
	  pass TEST_UNIT_READY and REQUEST_SENSE through
 illegal request 
 invalid command 
  Initialization routine for the sddr09 subdriver
 SPDX-License-Identifier: GPL-2.0+
  Driver for USB Mass Storage compliant devices
  Current development and maintenance by:
    (c) 1999-2002 Matthew Dharm (mdharm-usb@one-eyed-alien.net)
  Developed with the assistance of:
    (c) 2000 David L. Brown, Jr. (usb-storage@davidb.org)
    (c) 2002 Alan Stern (stern@rowland.org)
  Initial work by:
    (c) 1999 Michael Gee (michael@linuxspecific.com)
  This driver is based on the 'USB Mass Storage Class' document. This
  describes in detail the protocol used to communicate with such
  devices.  Clearly, the designers had SCSI and ATAPI commands in
  mind when they created this document.  The commands are all very
  similar to commands in the SCSI-II and ATAPI specifications.
  It is important to note that in a number of cases this class
  exhibits class-specific exemptions from the USB specification.
  Notably the usage of NAK, STALL and ACK differs from the norm, in
  that they are used to communicate wait, failed and OK on commands.
  Also, for certain devices, the interrupt endpoint is used to convey
  status of a command.
  Protocol routines
	
	  Pad the SCSI command with zeros out to 12 bytes.  If the
	  command already is 12 bytes or longer, leave it alone.
	 
	  NOTE: This only works because a scsi_cmnd struct field contains
	  a unsigned char cmnd[16], so we know we have storage available
 send the command to the transport layer 
	
	  fix some commands -- this is a form of mode translation
	  UFI devices only accept 12 byte long commands
	 
	  NOTE: This only works because a scsi_cmnd struct field contains
	  a unsigned char cmnd[16], so we know we have storage available
 Pad the ATAPI command with zeros 
 set command length to 12 bytes (this affects the transport layer) 
 XXX We should be constantly re-evaluating the need for these 
 determine the correct data length for these commands 
 for INQUIRY, UFI devices only ever return 36 bytes 
 again, for MODE_SENSE_10, we get the minimum (8) 
 for REQUEST_SENSE, UFI devices only ever return 18 bytes 
 end switch on cmnd[0] 
 send the command to the transport layer 
 send the command to the transport layer 
  Scatter-gather transfer buffer access routines
  Copy a buffer of length buflen tofrom the srb's transfer buffer.
  Update the sgptr and offset variables so that the next copy will
  pick up from where this one left off.
  Store the contents of buffer into srb's transfer buffer and set the
  SCSI residue.
 SPDX-License-Identifier: GPL-2.0+
  Driver for Rio Karma
    (c) 2006 Bob Copeland <me@bobcopeland.com>
    (c) 2006 Keith Bennett <keith@mcs.st-and.ac.uk>
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
  Send commands to Rio Karma.
  For each command we send 40 bytes starting 'RIOP\0' followed by
  the command number and a sequence number, which the device will ack
  with a 512-byte packet with the high four bits set and everything
  else null.  Then we send 'RIOP\x80' followed by a zero and the
  sequence number, until byte 5 in the response repeats the sequence
  number.
  Trap START_STOP and READ_10 to leavere-enter storage mode.
  Everything else is propagated to the normal bulk layer.
 SPDX-License-Identifier: GPL-2.0+
  Special Initializers for certain USB Mass Storage devices
  Current development and maintenance by:
    (c) 1999, 2000 Matthew Dharm (mdharm-usb@one-eyed-alien.net)
  This driver is based on the 'USB Mass Storage Class' document. This
  describes in detail the protocol used to communicate with such
  devices.  Clearly, the designers had SCSI and ATAPI commands in
  mind when they created this document.  The commands are all very
  similar to commands in the SCSI-II and ATAPI specifications.
  It is important to note that in a number of cases this class
  exhibits class-specific exemptions from the USB specification.
  Notably the usage of NAK, STALL and ACK differs from the norm, in
  that they are used to communicate wait, failed and OK on commands.
  Also, for certain devices, the interrupt endpoint is used to convey
  status of a command.
  This places the ShuttleSCM USB<->SCSI bridge devices in multi-target
  mode
  This function is required to activate all four slots on the UCR-61S2B
  flash reader
 This places the HUAWEI E220 devices in multi-port mode 
 SPDX-License-Identifier: GPL-2.0+
  Driver for USB Mass Storage compliant devices
  Current development and maintenance by:
    (c) 1999-2003 Matthew Dharm (mdharm-usb@one-eyed-alien.net)
  Developed with the assistance of:
    (c) 2000 David L. Brown, Jr. (usb-storage@davidb.org)
    (c) 2003-2009 Alan Stern (stern@rowland.harvard.edu)
  Initial work by:
    (c) 1999 Michael Gee (michael@linuxspecific.com)
  usb_device_id support by Adam J. Richter (adam@yggdrasil.com):
    (c) 2000 Yggdrasil Computing, Inc.
  This driver is based on the 'USB Mass Storage Class' document. This
  describes in detail the protocol used to communicate with such
  devices.  Clearly, the designers had SCSI and ATAPI commands in
  mind when they created this document.  The commands are all very
  similar to commands in the SCSI-II and ATAPI specifications.
  It is important to note that in a number of cases this class
  exhibits class-specific exemptions from the USB specification.
  Notably the usage of NAK, STALL and ACK differs from the norm, in
  that they are used to communicate wait, failed and OK on commands.
  Also, for certain devices, the interrupt endpoint is used to convey
  status of a command.
 Some informational data 
  The entries in this table correspond, line for line,
  with the entries in usb_storage_usb_ids[], defined in usual-tables.c.
 The vendor name should be kept at eight characters or less, and
  the product name should be kept at 16 characters or less. If a device
  has the US_FL_FIX_INQUIRY flag, then the vendor and product names
  normally generated by a device through the INQUIRY response will be
  taken from this list, and this is the reason for the above size
  restriction. However, if the flag is not present, then you
  are free to use as many characters as you like.
 Terminating entry 
 Minimal support for suspend and resume 
 Wait until no command is running 
	
	  When runtime PM is working, we'll set a flag to indicate
	  whether we should autoresume when a SCSI request arrives.
 Report the reset to the SCSI core 
	
	  If any of the subdrivers implemented a reinitialization scheme,
	  this is where the callback would be invoked.
 CONFIG_PM 
  The next two routines get called just before and just after
  a USB port reset, whether from this driver or a different one.
 Make sure no command runs during the reset 
 Report the reset to the SCSI core 
	
	  If any of the subdrivers implemented a reinitialization scheme,
	  this is where the callback would be invoked.
  fill_inquiry_response takes an unsigned char array (which must
  be at least 36 characters) and populates the vendor name,
  product name, and revision fields. Then the array is copied
  into the SCSI command's response buffer (oddly enough
  called request_buffer). data_len contains the length of the
  data array, which again must be at least 36.
 You lose. 
	if (data[0]&0x20) { 
			      USB device currently not connected. Return
			      peripheral qualifier 001b ("...however, the
			      physical device is not currently connected
			      to this logical unit") and leave vendor and
			      product identification empty. ("If the target
			      does store some of the INQUIRY data on the
			      device, it may return zeros or ASCII spaces
			      (20h) in those fields until the data is
			      available from the device.").
 lock the device pointers 
 lock access to the state 
 When we are called with no command pending, we're done 
 has the command timed out already ? 
		
		  reject the command if the direction indicator
		  is UNKNOWN
		
		  reject if target != 0 or if LUN is higher than
		  the maximum known LUN
		
		  Handle those devices which need us to fake
		  their inquiry data
 we've got a command, let's do it! 
 lock access to the state 
 was the command aborted? 
 Don't call scsi_done() 
		
		  If an abort request was received we need to signal that
		  the abort has finished.  The proper test for this is
		  the TIMED_OUT flag, not srb->result == DID_ABORT, because
		  the timeout might have occurred after the command had
		  already completed with a different result code.
 Allow USB transfers to resume 
 finished working on this command 
 unlock the device pointers 
 now that the locks are released, notify the SCSI core 
 for (;;) 
 Wait until we are told to stop 
  Device probing and disconnecting
 Associate our private data with the USB device 
 Fill in the device-related fields 
 Store our private data in the interface 
 Allocate the controlsetup and DMA-mapped buffers 
 Works only for digits and letters, but small and fast 
 Adjust device flags based on the "quirks=" module parameter 
 Each entry consists of VID:PID:flags 
 Move forward to the next entry 
 No match 
 Collect the flags 
 Ignore unrecognized flag characters 
 Get the unusual_devs entries and the string descriptors 
 Store the entries 
	
	  This flag is only needed when we're in high-speed, so let's
	  disable it if we're in full-speed
	
	  Log a message if a non-generic unusual_dev entry contains an
	  unnecessary subclass or protocol override.  This may stimulate
	  reports from users that will help us remove unneeded entries
	  from the unusual_devs.h table.
 Get the transport settings 
 Get the protocol settings 
 Get the pipe settings 
	
	  Find the first endpoint of each type we need.
	  We are expecting a minimum of 2 endpoints - in and out (bulk).
	  An optional interrupt-in is OK (necessary for CBI protocol).
	  We will ignore any others.
 Calculate and store the pipe values 
 Initialize all the dynamic resources we need 
	
	  Just before we start our control thread, initialize
	  the device if it needs initialization
 Start up our control thread 
 Release all our dynamic resources 
	
	  Tell the control thread to exit.  The SCSI host must
	  already have been removed and the DISCONNECTING flag set
	  so that we won't accept any more commands.
 Call the destructor routine, if it exists 
 Free the extra data and the URB 
 Dissociate from the USB device 
 Free the buffers 
 Remove our private data from the interface 
  First stage of disconnect processing: stop SCSI scanning,
  remove the host, and stop accepting new commands
 If the device is really gone, cut short reset delays 
	
	  Prevent SCSI scanning (if it hasn't started yet)
	  or wait for the SCSI-scanning routine to stop.
 Balance autopm calls if scanning was cancelled 
	
	  Removing the host will perform an orderly shutdown: caches
	  synchronized, disks spun down, etc.
	
	  Prevent any new commands from being accepted and cut short
	  reset delays.
 Second stage of disconnect processing: deallocate all resources 
	
	  Drop our reference to the host; the SCSI core will free it
	  (and "us" along with it) when the refcount becomes 0.
 Delayed-work routine to carry out SCSI-device scanning 
 For bulk-only devices, determine the max LUN value 
		
		  Allow proper scanning of devices that present more than 8 LUNs
		  While not affecting other devices that may need the previous
		  behavior
 Should we unbind if no devices were detected? 
 First part of general USB mass-storage probing 
	
	  Ask the SCSI layer to allocate a host structure, with extra
	  space at the end for our private us_data structure.
	
	  Allow 16-byte CDBs and thus > 2TB
 Associate the us_data structure with the USB device 
 Get the unusual_devs entries and the descriptors 
 Get standard transport and protocol settings 
	
	  Give the caller a chance to fill in specialized transport
	  or protocol settings.
 Second part of general USB mass-storage probing 
 Make sure the transport and protocol have both been set 
		
		  SCM eUSCSI bridge devices can have different numbers
		  of LUNs on different targets; allow all to be probed.
 The eUSCSI itself has ID 7, so avoid scanning that 
 max_id is 8 initially, so no need to set it here 
 In the normal case there is only a single target 
		
		  Like Windows, we won't store the LUN bits in CDB[1] for
		  SCSI-2 devices using the Bulk-Only transport (even though
		  this violates the SCSI spec).
 fix for single-lun devices 
 Find the endpoints and calculate pipe values 
	
	  If the device returns invalid data for the first READ(10)
	  command, indicate the command should be retried.
 Acquire all the other resources and add the host 
 Submit the delayed_work for SCSI-device scanning 
 We come here if there are any problems 
 Handle a USB mass-storage disconnect 
 The main probe routine for standard devices 
 If uas is enabled and this device can do uas then ignore it. 
	
	  If the device isn't standard (is handled by a subdriver
	  module) then don't accept it.
	
	  Call the general probe procedures.
	 
	  The unusual_dev_list array is parallel to the usb_storage_usb_ids
	  table, so we use the index of the id entry to find the
	  corresponding unusual_devs entry.
 No special transport or protocol settings in the main module 
 SPDX-License-Identifier: GPL-2.0+
  Driver for SCM Microsystems (a.k.a. Shuttle) USB-ATAPI cable
  Current development and maintenance by:
    (c) 2000, 2001 Robert Baruch (autophile@starband.net)
    (c) 2004, 2005 Daniel Drake <dsd@gentoo.org>
  Developed with the assistance of:
    (c) 2002 Alan Stern <stern@rowland.org>
  Flash support based on earlier work by:
    (c) 2002 Thomas Kreiling <usbdev@sm04.de>
  Many originally ATAPI devices were slightly modified to meet the USB
  market by using some kind of translation from ATAPI to USB on the host,
  and the peripheral would translate from USB back to ATAPI.
  SCM Microsystems (www.scmmicro.com) makes a device, sold to OEM's only, 
  which does the USB-to-ATAPI conversion.  By obtaining the data sheet on
  their device under nondisclosure agreement, I have been able to write
  this driver for Linux.
  The chip used in the device can also be used for EPP and ISA translation
  as well. This driver is only guaranteed to work with the ATAPI
  translation.
  See the Kconfig help text for a list of devices known to be supported by
  this driver.
 Supported device types 
 Commands (need to be logically OR'd with an access type 
 Commands (these don't need an access type) 
 Methods of accessing UIO register 
 Qualifier bits 
 full compare 
 auto load subcount 
 USBAT Flash Media status types 
 USBAT Flash Media change types 
 USBAT ATA registers 
 readwrite data (RW) 
 set features (W) 
 error (R) 
 sector count (RW) 
 sector number (RW) 
 cylinder low (RW) 
 cylinder high (RW) 
 headdevice selection (RW) 
 device status (R) 
 device command (W) 
 status (no clear IRQ) (R) 
 USBAT User IO Data registers 
 Enable Peripheral Control Signals 
 Card Detect (Read Only) 
 CDT = ACKD & !UI1 & !UI0 
 IO 1 
 IO 0 
 1=EPP mode, 0=ATA mode 
 Input 1 
 Input 0 
 Interrupt (ATAISA)Acknowledge (EPP) 
 USBAT User IO Enable registers 
 Reset Peripheral 
 Enable Card Detect 
 IO 1 set=outputclr=input 
 If ACKD=1, set OE1 to 1 also. 
 IO 0 set=outputclr=input 
 Reset SCM chip 
 USBAT Features 
 External trigger enable 
 Used for Flash readers only 
 total sector count 
 sector size in bytes 
 additional sense code 
 additional sense code qualifier 
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
  Convenience function to produce an ATA readwrite sectors command
  Use cmd=0x20 for read, cmd=0x30 for write
  Convenience function to get the device type (flash or hp8200)
  Read a register from the device
  Write to a register on the device
  Convenience function to perform a bulk read
  Convenience function to perform a bulk write
  Some USBAT-specific commands can only be executed over a command transport
  This transport allows one (len=8) or two (len=16) vendor-specific commands
  to be executed.
  Read the status register
  Check the device status
 errorcheck condition (0x51 is ok) 
 device fault 
  Stores critical information in internal registers in preparation for the execution
  of a conditional usbat_read_blocks or usbat_write_blocks call.
	
	  The only bit relevant to ATA access is bit 6
	  which defines 8 bit data access (set) or 16 bit (unset)
	
	  If FCQ is set in the qualifier (defined in RW cmd), then bits U0, U1,
	  ET1 and ET2 define an external event to be checked for on event of a
	  _read_blocks or _write_blocks operation. The readwrite will not take
	  place unless the defined trigger signal is active.
	
	  The resultant byte of the mask operation (see mask_byte) is compared for
	  equivalence with this test pattern. If equal, the readwrite will take
	  place.
	
	  This value is logically ANDed with the status register field specified
	  in the readwrite command.
	
	  If ALQ is set in the qualifier, this field contains the address of the
	  registers where the byte count should be read for transferring the data.
	  If ALQ is not set, then this field contains the number of bytes to be
	  transferred.
  Block, waiting for an ATA device to become not busy or to report
  an error condition.
	
	  Synchronizing cache on a CDR could take a heck of a long time,
	  but probably not more than 10 minutes or so. On the other hand,
	  doing a full blank on a CDRW at speed 1 will take about 75
	  minutes!
 check condition 
 device fault 
 not busy 
 5 seconds 
 10 seconds 
 50 seconds 
 X minutes 
  Read block data from the data register
  Write block data via the data register
  Process read and write requests
		
		  The first time we send the full command, which consists
		  of downloading the SCSI command followed by downloading
		  the data via a write-and-test.  Any other time we only
		  send the command to download the data -- the SCSI command
		  is still 'active' in some sense in the device.
		  
		  We're only going to try sending the data 10 times. After
		  that, we just return a failure.
			
			  Write to multiple registers
			  Not really sure the 0x07, 0x17, 0xfc, 0xe7 is
			  necessary here, but that's what came out of the
			  trace every single time.
 Conditionally read or write blocks 
		
		  If we get a stall on the bulk download, we'll retry
		  the bulk download -- but not the SCSI command because
		  in some sense the SCSI command is still 'active' and
		  waiting for the data. Don't ask me why this should be;
		  I'm only following what the Windoze driver did.
		 
		  Note that a stall for the test-and-readwrite command means
		  that the test failed. In this case we're testing to make
		  sure that the device is error-free
		  (i.e. bit 0 -- CHK -- of status is 0). The most likely
		  hypothesis is that the USBAT chip somehow knows what
		  the device will accept, but doesn't give the device any
		  data until all data is received. Thus, the device would
		  still be waiting for the first byte of data if a stall
		  occurs, even if the stall implies that some data was
		  transferred.
			
			  If we're reading and we stalled, then clear
			  the bulk output pipe only the first time.
			
			  Read status: is the device angry, or just busy?
 check condition 
 device fault 
  Write to multiple registers:
  Allows us to write specific data to any registers. The data to be written
  gets packed in this sequence: reg0, data0, reg1, data1, ..., regN, dataN
  which gets sent through bulk out.
  Not designed for large transfers of data!
 Write to multiple registers, ATA access 
 No relevance 
 Number of bytes to be transferred (incl. addresses and data) 
 The setup command 
 Create the regdata, regdata sequence 
 Send the data 
  Conditionally read blocks from device:
  Allows us to read blocks from a specific data register, based upon the
  condition that a status register can be successfully masked with a status
  qualifier. If this condition is not initially met, the read will wait
  up until a maximum amount of time has elapsed, as specified by timeout.
  The read will start when the condition is met, otherwise the command aborts.
  The qualifier defined here is not the value that is masked, it defines
  conditions for the write to take place. The actual masked qualifier (and
  other related details) are defined beforehand with _set_shuttle_features().
 Timeout (ms); 
 Multiple block read setup command 
 Read the blocks we just asked for 
  Conditionally write blocks to device:
  Allows us to write blocks to a specific data register, based upon the
  condition that a status register can be successfully masked with a status
  qualifier. If this condition is not initially met, the write will wait
  up until a maximum amount of time has elapsed, as specified by timeout.
  The read will start when the condition is met, otherwise the command aborts.
  The qualifier defined here is not the value that is masked, it defines
  conditions for the write to take place. The actual masked qualifier (and
  other related details) are defined beforehand with _set_shuttle_features().
 Timeout (ms) 
 Multiple block write setup command 
 Write the data 
  Read the User IO register
  Write to the User IO register
  Reset the device
  Often needed on media change.
	
	  Reset peripheral, enable peripheral control signals
	  (bring reset signal up)
	
	  Enable peripheral control signals
	  (bring reset signal down)
  Enable card detect
 Enable peripheral control signals and card detect 
  Determine if media is present.
  Determine if media has changed since last operation
  Check for media change  no media and handle the situation appropriately
 Check for media existence 
 Check for media change 
 Reset and re-enable card detect 
  Determine whether we are controlling a flash-based readerwriter,
  or a HP8200-based CD drive.
  Sets transport functions as appropriate.
	
	  In attempt to distinguish between HP CDRW's and Flash readers, we now
	  execute the IDENTIFY PACKET DEVICE command. On ATA devices (i.e. flash
	  readers), this command should fail with error. On ATAPI devices (i.e.
	  CDROM drives), it should succeed.
 Check for error bit, or if the command 'fell through' 
 Device is HP 8200 
 Device is a CompactFlash readerwriter 
  Set the transport function based on the device type
  Read the media capacity
 ATA command : IDENTIFY DEVICE 
 Read device status 
 Read the device identification data 
  Read data from device
	
	  we're working in LBA mode.  according to the ATA spec,
	  we can support up to 28-bit addressing.  I don't know if Jumpshot
	  supports beyond 24-bit addressing.  It's kind of hard to test
	  since it requires > 8GB CF card.
	
	  Since we don't read more than 64 KB at a time, we have to create
	  a bounce buffer and move the data a piece at a time between the
	  bounce buffer and the actual transfer buffer.
		
		  loop, never allocate or transfer more than 64k at once
		  (min(128k, 255info->ssize) is the real limit)
 ATA command 0x20 (READ SECTORS) 
 Writeexecute ATA read command 
 Read the data we just requested 
 Store the data in the transfer buffer 
  Write data to device
	
	  we're working in LBA mode.  according to the ATA spec,
	  we can support up to 28-bit addressing.  I don't know if the device
	  supports beyond 24-bit addressing.  It's kind of hard to test
	  since it requires > 8GB media.
	
	  Since we don't write more than 64 KB at a time, we have to create
	  a bounce buffer and move the data a piece at a time between the
	  bounce buffer and the actual transfer buffer.
		
		  loop, never allocate or transfer more than 64k at once
		  (min(128k, 255info->ssize) is the real limit)
 Get the data from the transfer buffer 
 ATA command 0x30 (WRITE SECTORS) 
 Writeexecute ATA write command 
 Write the data 
  Squeeze a potentially huge (> 65535 byte) read10 command into
  a little ( <= 65535 byte) ATAPI pipe
	
	  Since we're requesting more data than we can handle in
	  a single read command (max is 64k-1), we will perform
	  multiple reads, but each read must be in multiples of
	  a sector.  Luckily the sector size is in srb->transfersize
	  (see linuxdriversscsisr.c).
 A guess 
	
	  Since we only read in one block at a time, we have to create
	  a bounce buffer and move the data a piece at a time between the
	  bounce buffer and the actual transfer buffer.
 bloody hell! 
 (cylL) = expected length (L) 
 (cylH) = expected length (H) 
 Fix up the SCSI command sector and num sectors 
 SCSI command sector 
 SCSI command 
 num sectors 
 Store the data in the transfer buffer 
 Update the amount transferred and the sector number 
 while transferred != scsi_bufflen(srb) 
 try device = master, then device = slave. 
  Initialize the USBAT processor and the storage device
 Enable peripheral control signals 
 Enable peripheral control signals and card detect 
 At this point, we need to detect which device we are using 
  Transport for the HP 8200e
	
	  Send A0 (ATA PACKET COMMAND).
	  Note: I guess we're never going to get any of the ATA
	  commands... just ATA Packet Commands.
 (cylL) = expected length (L) 
 (cylH) = expected length (H) 
 (device sel) = slave 
 (command) = ATA PACKET COMMAND 
	
	  Write the 12-byte command header.
	 
	  If the command is BLANK then set the timer for 75 minutes.
	  Otherwise set it for 10 minutes.
	 
	  NOTE: THE 8200 DOCUMENTATION STATES THAT BLANKING A CDRW
	  AT SPEED 4 IS UNRELIABLE!!!
 If there is response data to be read in then do it here. 
 How many bytes to read in? Check cylL register 
 need to read cylH also 
  Transport for USBAT02-based CompactFlash and similar storage devices
 hard coded 512 byte sectors as per ATA spec 
		
		  build the reply
		  note: must return the sector number of the last sector,
		  not the total number of sectors
		
		  I don't think we'll ever see a READ_12 but support it anyway
		
		  I don't think we'll ever see a WRITE_12 but support it anyway
		
		  sure.  whatever.  not like we can stop the user from popping
		  the media out of the device (no locking doors, etc)
	
	  The actual transport will be determined later by the
	  initialization routine; this is just a placeholder.
 SPDX-License-Identifier: GPL-2.0+
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
 ENE bin code len 
 EnE HW Register 
 SRB Status 
 No Sense 
 Medium not present 
 Unrecovered read error 
 Communication failure 
 Invalid command 
 Reset occurred 
 ENE Load FW Pattern 
 For MS Card 
 Status Register 1 
 media busy 
 flush busy 1 
 error on data(corrected) 
 unable to correct data 
 error on extra(corrected) 
 unable to correct extra 
 error on overwrite flag(corrected) 
 unable to correct overwrite flag 
 Overwrite Area 
 block status 
 OK 
 NG 
 page status 
 OK 
 NG 
 data error 
 update status 
 updating 
 Management Flag 
 serial copy management system 
 address transfer table flag 
 other 
 address transfer table 
 system flag 
 user block 
 system block 
 fixed 
 CISIDI 
 ms error code 
 system flag 
 user block 
 512 
 overwrite area 
 block status 
 OK 
 NG 
 Status Register 1 
 error on data(corrected) 
 error on extra(corrected) 
 error on overwrite flag(corrected) 
 MemoryStick Register 
 Status Register 0 
 write protected 
dphy->log table 
 0 
 6 
 12 
 16 
 22 
 54 
 58 
 62 
 67 
 74 
 84 
 92 
 104 
 112 
 129 
 137 
 154 
 162 
 0 
 1 
 2 
 3 
 4 
 5 
 6 
 7-8  high,low 
 9-19 
 20 
 21 
 22 
 23-26 
 27-46 
 47 
 48 
 49 
 50 
 51 
 52 
 53 
 54 
 55 
 56 
 57-58 
 59 
 60-61 
 62 
 63 
 64-255 
 must be 1 
 see below 
 n KB 
 number of physical block 
 number of logical block 
 must be 0x200 
 0x10 
 New MS 
 New MS 
 New MS 
 New MS 
 ENE MS Lib struct 
 RW, RO, Hybrid 
 phy2log table 
 log2phy table 
 SD Block Length 
 2^9 = 512 Bytes, The HW maximum readwrite data length 
 IO bounce buffer 
 for 6250 code 
 ----- SD Control Data ---------------- 
SD_REGISTER SD_Regs; 
 SDMMC New spec. 
----- MS Control Data ---------------- 
----- SM Control Data ---------------- 
------Power Managerment ---------------
 usb_stor_dbg(us, "transport --- ene_send_scsi_cmd\n"); 
 send cmd to out endpoint 
 Bulk 
 Get CSW for device status 
 get the status again 
 check bulk status 
	
	  try to compute the actual residue, based on how much data
	  was really transferred and what the device tells us
 Current error 
 Sense key 
 Additional length 
 ASC 
 ASCQ 
srb->request_bufflen = 8; 
 set up the command wrapper 
 set up the command wrapper 
  ENE MS Card
 Read Page Data 
 in init.c ENE_MSInit() is 0x01 
 Read Extra Data 
 Not yet,fireware support 
 Not yet,fireware support 
 Not yet,fireware support 
Allocate to all number of logicalblock and physicalblock 
 Mark the book block 
 CISIDI 
 End for .. 
 set to -1 
 memset((fdoExt)->MS_Lib.pagemap, 0, sizeof((fdoExt)->MS_Lib.pagemap)) 
 (pdx)->MS_Lib.pagemap memset 0 in ms.h 
 Arnold test ... 
 Arnold test ... 
 Free MS_Lib.pagemap 
 kfree MS_Lib.Phy2LogMap and MS_Lib.Log2PhyMap 
 set struct us point flag to 0 
 (BYTE)(oldphy>>16) 
 (BYTE)(newphy>>16) 
 MS_LibCtrlSet will used by ENE_MSInit ,need check, and why us to info
 Not yet, waiting for fireware support 
 Not yet, waiting for fireware support 
 Not yet, waiting for fireware support 
 need check 
 End switch 
 End for 
 pr_info("MS_SCSI_Test_Unit_Ready\n"); 
srb->request_bufflen = 8; 
496
496
494
 Read Extra Data 
 End for ... 
 set up the command wrapper 
 set up the command wrapper 
 set up the command wrapper 
 need check us <-> info 
  ENE MS Card
usb_stor_dbg(us, "transport --- ENE_ReadSDReg\n");
 For SD 
 For MS 
 Clean buffer and set struct us_data flag to 0 
 get two PageBuffer 
 write protect 
 1st Boot Block 
 1st 
 2nd Boot Block 
 write 
 the same part to test ENE 
 the same part to test ENE 
 Card is MS (to ms.c)
 SD Init Part-1 
 SD Init Part-2 
----- sd_scsi_irp() ---------
 0x00 
 0x03 
 0x12 
 0x1A 
	
	case START_STOP:
		result = SD_SCSI_Start_Stop(us, srb);
		break; 0x1B
 0x25 
 0x28 
 0x2A 
  ms_scsi_irp()
 0x00 
 0x03 
 0x12 
 0x1A 
 0x25 
 0x28 
 0x2A 
US_DEBUG(usb_stor_show_command(us, srb)); 
 FIXME: where should the code alloc extra buf ? 
 probe card type 
info->SD_Status.Ready = 0; 
 Report the reset to the SCSI core 
	
	  FIXME: Notify the subdrivers that they need to reinitialize
	  the device
info->SD_Status.Ready = 0; 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Lexar "Jumpshot" Compact Flash reader
  jumpshot driver v0.1:
  First release
  Current development and maintenance by:
    (c) 2000 Jimmie Mayfield (mayfield+usb@sackheads.org)
    Many thanks to Robert Baruch for the SanDisk SmartMedia reader driver
    which I used as a template for this driver.
    Some bugfixes and scatter-gather code by Gregory P. Smith 
    (greg-usb@electricrain.com)
    Fix for media change by Joerg Schneider (js@joergschneider.com)
  Developed with the assistance of:
    (C) 2002 Alan Stern <stern@rowland.org>
   This driver attempts to support the Lexar Jumpshot USB CompactFlash 
   reader.  Like many other USB CompactFlash readers, the Jumpshot contains
   a USB-to-ATA chip. 
   This driver supports reading and writing.  If you're truly paranoid,
   however, you can force the driver into a write-protected state by setting
   the WP enable bits in jumpshot_handle_mode_sense.  See the comments
   in that routine.
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
 total sector count 
 sector size in bytes 
 the following aren't used yet 
 additional sense code 
 additional sense code qualifier 
 send the setup
 we're working in LBA mode.  according to the ATA spec, 
 we can support up to 28-bit addressing.  I don't know if Jumpshot
 supports beyond 24-bit addressing.  It's kind of hard to test 
 since it requires > 8GB CF card.
 Since we don't read more than 64 KB at a time, we have to create
 a bounce buffer and move the data a piece at a time between the
 bounce buffer and the actual transfer buffer.
 loop, never allocate or transfer more than 64k at once
 (min(128k, 255info->ssize) is the real limit)
 send the setup + command
 read the result
 Store the data in the transfer buffer
 we're working in LBA mode.  according to the ATA spec, 
 we can support up to 28-bit addressing.  I don't know if Jumpshot
 supports beyond 24-bit addressing.  It's kind of hard to test 
 since it requires > 8GB CF card.
 Since we don't write more than 64 KB at a time, we have to create
 a bounce buffer and move the data a piece at a time between the
 bounce buffer and the actual transfer buffer.
 loop, never allocate or transfer more than 64k at once
 (min(128k, 255info->ssize) is the real limit)
 Get the data from the transfer buffer
 send the setup + command
 send the data
 read the result.  apparently the bulk write can complete
 before the jumpshot drive is finished writing.  so we loop
 here until we get a good return code
 I have not experimented to find the smallest value.
 send the setup
 read the reply
 WP enable: 0x80
 WP enable: 0x80
 vendor-specific mode
 this routine is a placeholder...
 currently, we don't allocate any extra blocks so we're okay
 Transport for the Lexar 'Jumpshot'
 hard coded 512 byte sectors as per ATA spec
 build the reply
 I don't think we'll ever see a READ_12 but support it anyway...
 I don't think we'll ever see a WRITE_12 but support it anyway...
		
		  sure.  whatever.  not like we can stop the user from popping
		  the media out of the device (no locking doors, etc)
		
		  this is used by sd.c'check_scsidisk_media_change to detect
		  media change
		
		  the first jumpshot_id_device after a media change returns
		  an error (determined experimentally)
 SPDX-License-Identifier: GPL-2.0+
  Driver for Freecom USBIDE adaptor
  Freecom v0.1:
  First release
  Current development and maintenance by:
    (C) 2000 David Brown <usb-storage@davidb.org>
  This driver was developed with information provided in FREECOM's USB
  Programmers Reference Guide.  For further information contact Freecom
  (https:www.freecom.de)
 Bits of HD_STATUS 
 All of the outgoing packets are 64 bytes long. 
 Command type. 
 Timeout in seconds. 
 An ATAPI packet. 
 Padding Data. 
 Command type. 
 Timeout in seconds. 
 Number of bytes to transfer. 
 Type + IDE register. 
 Value to write. 
 Type | IDE register. 
  Freecom stuffs the interrupt status in the INDEX_STAT bit of the ide
  register.
 INDEX_STAT 
  These are the packet types.  The low bit indicates that this command
  should wait for an interrupt.
  Receive data from the IDE interface.  The ATAPI packet has already
  waited, so the data should be immediately available.
 Send data to the IDE interface. 
  Write a value to an ide register.  Or the ide register to write after
  munging the address a bit.
 All packets (except for status) are 64 bytes long. 
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
 Short timeout for debugging. 
 Issue the transfer command. 
 Now transfer all of our blocks. 
 Short timeout for debugging. 
 Issue the transfer command. 
 Now transfer all of our blocks. 
  Transport for the Freecom USBIDE adaptor.
 We need both pipes. 
 Get handles for both transports. 
 The ATAPI Command always goes out first. 
 Send it out. 
	
	  The Freecom device will only fail if there is something wrong in
	  USB land.  It returns the status in its own registers, which
	  come back in the bulk pipe.
	
	  There are times we can optimize out this status read, but it
	  doesn't hurt us to always do it now.
	
	  The firmware will time-out commands after 20 seconds. Some commands
	  can legitimately take longer than this, so we use a different
	  command that only waits for the interrupt and then sends status,
	  without having to send a new ATAPI command to the device.
	 
	  NOTE: There is some indication that a data transfer after a timeout
	  may not work, but that is a condition that should never happen.
 Get the status again 
 Send it out. 
		
		  The Freecom device will only fail if there is something
		  wrong in USB land.  It returns the status in its own
		  registers, which come back in the bulk pipe.
 get the data 
	
	  The device might not have as much data available as we
	  requested.  If you ask for more than the device has, this reads
	  and such will hang.
 Find the length we desire to read. 
 16 or 18 bytes? spec says 18, lots of devices only have 16 
 verify that this amount is legal 
	
	  What we do now depends on what direction the data is supposed to
	  move in.
 catch bogus "read 0 length" case 
		
		  Make sure that the status indicates that the device
		  wants data as well.
 catch bogus "write 0 length" case 
		
		  Make sure the status indicates that the device wants to
		  send us data.
 !!IMPLEMENT!! 
 Easy, do nothing. 
 should never hit here -- filtered in usb.c 
 Return fail, SCSI seems to handle this better. 
	
	  The DMA-mapped IO buffer is 64 bytes long, just right for
	  all our packets.  No need to allocate any extra buffer space.
	
	  Special thanks to the people at Freecom for providing me with
	  this "magic sequence", which they use in their Windows and MacOS
	  drivers to make sure that all the attached perhiperals are
	  properly reset.
 send reset 
 wait 250ms 
 clear reset 
 wait 3 seconds 
 We don't really have this feature. 
 Add the last "chunk" of data. 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Alauda-based card readers
  Current development and maintenance by:
    (c) 2005 Daniel Drake <dsd@gentoo.org>
  The 'Alauda' is a chip manufacturered by RATOC for OEM use.
  Alauda implements a vendor-specific command set to access two media reader
  ports (XD, SmartMedia). This driver converts SCSI commands to the commands
  which are accepted by these devices.
  The driver was developed through reverse-engineering, with the help of the
  sddr09 driver which has many similarities, and with some help from the
  (very old) vendor-supplied GPL sma03 driver.
  For protocol info, see http:alauda.sourceforge.net
  Status bytes
  Control opcodes (for request field)
  Bulk command identity (byte 0)
  Bulk opcodes (byte 1)
  Port to operate on (byte 8)
  LBA and PBA are unsigned ints. Special values.
 total media size in bytes 
 page size in bytes 
 number of pages per block 
 number of usable blocks per zone 
 number of blocks per zone 
 mask to get page from address 
 logical to physical block map 
 physical to logical block map 
 endpoint to write data out of 
 additional sense code 
 additional sense code qualifier 
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
  Media handling
 id byte 
 1<<cs bytes total capacity 
 1<<ps bytes in a page 
 1<<bs pages per block 
 1<<zs blocks per zone 
 NAND flash 
 1 MB 
 1 MB 
 1 MB 
 2 MB 
 2 MB 
 4 MB 
 4 MB 
 4 MB 
 8 MB 
 16 MB 
 32 MB 
 64 MB 
 128 MB 
 256 MB 
 MASK ROM 
 2 MB 
 4 MB 
 8 MB 
 16 MB 
 32 MB 
  ECC computation.
 compute 3-byte ecc on 256 bytes 
 collect 16 checksum bits 
 put 4+4+4 = 12 bits in the ecc 
  Alauda driver
  Forget our PBA <---> LBA mappings for a particular port
  Returns 2 bytes of status data
  The first byte describes media status, and second byte describes door status
  Clears the "media was changed" bit so that we know when it changes again
  in the future.
  Retrieves a 4-byte media signature, which indicates manufacturer, capacity,
  and some other details.
  Resets the media status (but not the whole device?)
  Examines the media and deduces capacity, etc.
  Examines the media status and does the right thing when the media has gone,
  appeared, or changed.
 Check for no media or door open 
 Check for media change 
  Checks the status from the 2nd status register
  Returns 3 bytes of status data, only the first is known
  Gets the redundancy data for the first page of a PBA
  Returns 16 bytes.
  Finds the first unused PBA in a zone
  Returns the absolute PBA of an unused PBA, or 0 if none found.
  Reads the redundancy data for all PBA's in a zone
  Produces lba <--> pba mappings
 1024 PBA's per zone 
 special PBAs have control field 0^16 
 unwritten PBAs have control field FF^16 
 normal PBAs start with six FFs 
 check even parity 
		
		  Every 1024 physical blocks ("zone"), the LBA numbers
		  go back to zero, but are within a higher block of LBA's.
		  Also, there is a maximum of 1000 LBA's per zone.
		  In other words, in PBA 1024-2047 you will find LBA 0-999
		  which are really LBA 1000-1999. This allows for 24 bad
		  or special physical blocks per zone.
  Checks to see whether we have already mapped a certain zone
  If we haven't, the map is generated
  Erases an entire block
  Reads data from a certain offset page inside a PBA, including interleaved
  redundancy data. Returns (pagesize+64)pages bytes in data.
  Reads data from a certain offset page inside a PBA, excluding redundancy
  data. Returns pagesizepages bytes in data. Note that data must be big enough
  to hold (pagesize+64)pages bytes of data, but you can ignore those 'extra'
  trailing bytes outside this function.
 Cut out the redundancy data 
  Writes an entire block of data and checks status after write.
  Redundancy data must be already included in data. Data should be
  (pagesize+64)blocksize bytes in length.
  Write some data to a specific LBA.
		
		  Maybe it is impossible to write to PBA 1.
		  Fake success, but don't do anything.
 read old contents 
 check old contents and fill lba 
 copy in new stuff and compute ECC 
  Read data from a specific sector address
	
	  Since we only read in one block at a time, we have to create
	  a bounce buffer and move the data a piece at a time between the
	  bounce buffer and the actual transfer buffer.
	  We make this buffer big enough to hold temporary redundancy data,
	  which we use when reading the data blocks.
 Figure out the initial LBA and page 
 integer division 
 Not overflowing capacity? 
 Find number of pages we can read in this block 
 Find where this lba lives on disk 
 this lba was never written 
			
			  This is not really an error. It just means
			  that the block has never been written.
			  Instead of returning USB_STOR_TRANSPORT_ERROR
			  it is better to return all zero data.
 Store the data in the transfer buffer 
  Write data to a specific sector address
	
	  Since we don't write the user data directly to the device,
	  we have to create a bounce buffer and move the data a piece
	  at a time between the bounce buffer and the actual transfer buffer.
	
	  We also need a temporary block buffer, where we read in the old data,
	  overwrite parts with the new data, and manipulate the redundancy data
 Figure out the initial LBA and page 
 Write as many sectors as possible in this block 
 Not overflowing capacity? 
 Get the data from the transfer buffer 
  Our interface with the rest of the world
  Initialize alauda_info struct and find the data-write endpoint
 Report capacity and page size 
		
		  sure.  whatever.  not like we can stop the user from popping
		  the media out of the device (no locking doors, etc)
 SPDX-License-Identifier: GPL-2.0+
  Transport & Protocol Driver for In-System Design, Inc. ISD200 ASIC
  Current development and maintenance:
    (C) 2001-2002 BjÃ¶rn Stenberg (bjorn@haxx.se)
  Developed with the assistance of:
    (C) 2002 Alan Stern <stern@rowland.org>
  Initial work:
    (C) 2000 In-System Design, Inc. (support@in-system.com)
  The ISD200 ASIC does not natively support ATA devices.  The chip
  does implement an interface, the ATA Command Block (ATACB) which provides
  a means of passing ATA commands and ATA register accesses to a device.
  History:
   2002-10-19: Removed the specialized transfer routines.
 		(Alan Stern <stern@rowland.harvard.edu>)
   2001-02-24: Removed lots of duplicate code and simplified the structure.
 	      (bjorn@haxx.se)
   2002-01-16: Fixed endianness bug so it works on the ppc arch.
 	      (Luc Saillard <luc@saillard.org>)
   2002-01-17: All bitfields removed.
 	      (bjorn@haxx.se)
 Include files 
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
 Timeout defines (in Seconds) 
 device flags 
 capability bit definitions 
 command_setX bit definitions 
 ATA Vendor Specific defines 
 Action Select bits 
 Register Select bits 
 ATA registers offset definitions 
 ATA error definitions not in <linuxhdreg.h> 
 ATA command definitions not in <linuxhdreg.h> 
 ATA drive control definitions 
   General purpose return codes
  Transport return codes
 Transport good, command good     
 Transport good, command failed   
 Transport bad (i.e. device dead) 
 driver action codes 
  ata_cdb struct
  Inquiry data structure. This is the data returned from the target
  after it receives an inquiry.
  This structure may be extended by the number of bytes specified
  in the field AdditionalLength. The defined size constant only
  includes fields through ProductRevisionLevel.
  DeviceType field
 disks 
  INQUIRY data buffer size
  ISD200 CONFIG data struct
  ISD200 driver information struct
 maximum number of LUNs supported 
  Read Capacity Data - returned in Big Endian format
  Read Block Limits Data - returned in Big Endian format
  This structure returns the maximum and minimum block
  size for a TAPE device.
  Sense Data Format
  Default request sense buffer size
  Helper routines
  isd200_build_sense
 									 
   Builds an artificial sense buffer to report the results of a 
   failed command.
 								       
  RETURNS:
     void
  Transport routines
   isd200_set_srb(), isd200_srb_set_bufflen()
  Two helpers to facilitate in initialization of scsi_cmnd structure
  Will need to change when struct scsi_cmnd changes
   isd200_action
  Routine for sending commands to the isd200
  RETURNS:
     ISD status code
 static to prevent this large struct being placed on the valuable stack 
 need to reset device here 
  isd200_read_regs
 									 
  Read ATA Registers
  RETURNS:
     ISD status code
  Invoke the transport and basic error-handlingrecovery methods
  This is used by the protocol layers to actually send the message to
  the device and receive the response.
 send the command to the transport layer 
	
	  if the command gets aborted by the higher layers, we need to
	  short-circuit all other processing
 Indicate a good result 
 Need reset here 
 Need reset here 
 If things are really okay, then let's show that 
 Need reset here 
	
	  Regardless of auto-sense, if we _know_ we have an error
	  condition, show that in the result code
	
	  abort processing: the bulk-only transport requires a reset
	  following an abort
 permit the reset transfer to take place 
 Need reset here 
  isd200_write_config
 									 
  Write the ISD200 Configuration data
  RETURNS:
     ISD status code
 let's send the command via the control pipe 
  isd200_read_config
 									 
  Reads the ISD200 Configuration data
  RETURNS:
     ISD status code
 read the configuration information from ISD200.  Use this to 
 determine what the special ATA CDB bytes are.		
  isd200_atapi_soft_reset
 									 
  Perform an Atapi Soft Reset on the device
  RETURNS:
     NT status code
  isd200_srst
 									 
  Perform an SRST on the device
  RETURNS:
     ISD status code
 check to see if this request failed 
 delay 10ms to give the drive a chance to see it 
 delay 50ms to give the drive a chance to recover after SRST 
  isd200_try_enum
 									 
  Helper function for isd200_manual_enum(). Does ENUM and READ_STATUS
  and tries to analyze the status registers
  RETURNS:
     ISD status code
 loop until we detect !BSY or timeout 
 check for ATA_BUSY and 
 ATA_DF (workaround ATA Zip drive) and 
 ATA_ERR (workaround for Archos CD-ROM) 
 check for DRDY, ATA devices set DRDY after SRST 
		
		  check Cylinder HighLow to
		  determine if it is an ATAPI device
			
			  It seems that the RICOH
			  MP6200A CDRW drive will
			  report itself okay as a
			  slave when it is really a
			  master. So this check again
			  as a master device just to
			  make sure it doesn't report
			  itself okay as a master also
 check for timeout on this request 
  isd200_manual_enum
 									 
  Determines if the drive attached is an ATA or ATAPI and if it is a
  master or slave.
  RETURNS:
     ISD status code
 master or slave? 
 ata or atapi? 
  isd200_get_inquiry_data
  Get inquiry data
  RETURNS:
     ISD status code
 set default to Master 
 attempt to manually enumerate this device 
 check for an ATA device 
 this must be an ATA device 
 perform an ATA Command Identify 
 Error issuing ATA Command Identify 
 ATA Command Identify successful 
 Standard IDE interface only supports disks 
 The length must be at least 36 (5 + 31) 
 set the removable bit 
 Fill in vendor identification fields 
 determine if it supports Media Status Notification 
					
					  Indicate that it is enabled, even
					  though it is not.
					  This allows the lockunlock of the
					  media to work correctly.
			 
			  this must be an ATAPI device 
			  use an ATAPI protocol (Transparent SCSI)
 Free driver structure 
  isd200_scsi_to_ata
 									 
  Translate SCSI commands to ATA commands.
  RETURNS:
     1 if the command needs to be sent to the transport layer
     0 otherwise
 SCSI Command 
 copy InquiryData 
 Initialize the return buffer 
  isd200_free_info
  Frees the driver structure.
  isd200_init_info
 									 
  Allocates (if necessary) and initializes the driver structure.
  RETURNS:
     ISD status code
  Initialization for the ISD200 
 Initialize ISD200 info struct 
 Get device specific data 
  Protocol and Transport for the ISD200 ASIC
  This protocol and transport are for ATA devices connected to an ISD200
  ASIC.  An ATAPI device that is connected as a slave device will be
  detected in the driver initialization function and the protocol will
  be changed to an ATAPI protocol (Transparent SCSI).
 Make sure driver was initialized 
 scsi_bufflen might change in protocol translation to ata 
 send the command to the transport layer 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Realtek RTS51xx USB card reader
  Copyright(c) 2009 Realtek Semiconductor Corp. All rights reserved.
  Author:
    wwang (wei_wang@realsil.com.cn)
    No. 450, Shenhu Road, Suzhou Industry Park, Suzhou, China
 used to back up the protocol chosen in probe1 phase 
 flag definition 
 Bit Operation 
 Check card reader function 
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
 set up the command wrapper 
 copy the command payload 
 send it to out endpoint 
 DATA STAGE 
 sendreceive data payload, if there is any 
 get CSW for device status 
 check bulk status 
	
	  try to compute the actual residue, based on how much data
	  was really transferred and what the device tells us
 based on the status code, we report good or bad 
 command good -- note that data could be short 
 command failed 
		
		  phase error -- note that a transport reset will be
		  invoked by the invoke_transport() function
 we should never get here, but if we do, we're in trouble 
 set up the command wrapper 
 copy the command payload 
 send it to out endpoint 
 DATA STAGE 
 sendreceive data payload, if there is any 
 get CSW for device status 
 Determine what the maximum LUN supported is 
 issue the command 
 if we have a successful request, return the result 
 retval = rts51x_write_mem(us, 0xFE47, &value, 1); 
 retval = rts51x_write_mem(us, 0xFE47, &value, 1); 
 Autodelink controlled by firmware 
 retval = rts51x_write_mem(us, 0xFE47, &value, 1); 
 retval = rts51x_write_mem(us, 0xFE47, &value, 1); 
 SD Exist and SD WP 
 ignore mass storage interface's children 
 Check whether card is plugged in 
 back up the proto_handler in us->extra 
 Set the autosuspend_delay to 0 
 override us->proto_handler setted in get_protocol() 
 enable autosuspend function of the usb device 
 wait until no command is running 
 .suspend =      usb_stor_suspend, 
 .resume =       usb_stor_resume, 
 SPDX-License-Identifier: GPL-2.0+
  Driver for USB Mass Storage compliant devices
  Current development and maintenance by:
    (c) 1999-2002 Matthew Dharm (mdharm-usb@one-eyed-alien.net)
  Developed with the assistance of:
    (c) 2000 David L. Brown, Jr. (usb-storage@davidb.org)
    (c) 2000 Stephen J. Gowdy (SGowdy@lbl.gov)
    (c) 2002 Alan Stern <stern@rowland.org>
  Initial work by:
    (c) 1999 Michael Gee (michael@linuxspecific.com)
  This driver is based on the 'USB Mass Storage Class' document. This
  describes in detail the protocol used to communicate with such
  devices.  Clearly, the designers had SCSI and ATAPI commands in
  mind when they created this document.  The commands are all very
  similar to commands in the SCSI-II and ATAPI specifications.
  It is important to note that in a number of cases this class
  exhibits class-specific exemptions from the USB specification.
  Notably the usage of NAK, STALL and ACK differs from the norm, in
  that they are used to communicate wait, failed and OK on commands.
  Also, for certain devices, the interrupt endpoint is used to convey
  status of a command.
  Data transfer routines
  This is subtle, so pay attention:
  ---------------------------------
  We're very concerned about races with a command abort.  Hanging this code
  is a sure fire way to hang the kernel.  (Note that this discussion applies
  only to transactions resulting from a scsi queued-command, since only
  these transactions are subject to a scsi abort.  Other transactions, such
  as those occurring during device-specific initialization, must be handled
  by a separate code path.)
  The abort function (usb_storage_command_abort() in scsiglue.c) first
  sets the machine state and the ABORTING bit in us->dflags to prevent
  new URBs from being submitted.  It then calls usb_stor_stop_transport()
  below, which atomically tests-and-clears the URB_ACTIVE bit in us->dflags
  to see if the current_urb needs to be stopped.  Likewise, the SG_ACTIVE
  bit is tested to see if the current_sg scatter-gather request needs to be
  stopped.  The timeout callback routine does much the same thing.
  When a disconnect occurs, the DISCONNECTING bit in us->dflags is set to
  prevent new URBs from being submitted, and usb_stor_stop_transport() is
  called to stop any ongoing requests.
  The submit function first verifies that the submitting is allowed
  (neither ABORTING nor DISCONNECTING bits are set) and that the submit
  completes without errors, and only then sets the URB_ACTIVE bit.  This
  prevents the stop_transport() function from trying to cancel the URB
  while the submit call is underway.  Next, the submit function must test
  the flags to see if an abort or disconnect occurred during the submission
  or before the URB_ACTIVE bit was set.  If so, it's essential to cancel
  the URB if it hasn't been cancelled already (i.e., if the URB_ACTIVE bit
  is still set).  Either way, the function must then wait for the URB to
  finish.  Note that the URB can still be in progress even after a call to
  usb_unlink_urb() returns.
  The idea is that (1) once the ABORTING or DISCONNECTING bit is set,
  either the stop_transport() function or the submitting function
  is guaranteed to call usb_unlink_urb() for an active URB,
  and (2) test_and_clear_bit() prevents usb_unlink_urb() from being
  called more than once or from being called during usb_submit_urb().
  This is the completion handler which will wake us up when an URB
  completes.
  This is the common part of the URB message submission code
  All URBs from the usb-storage driver involved in handling a queued scsi
  command _must_ pass through this function (or something like it) for the
  abort mechanisms to work properly.
 don't submit URBs during abort processing 
 set up data structures for the wakeup system 
 fill the common fields in the URB 
	
	  we assume that if transfer_buffer isn't us->iobuf then it
	  hasn't been mapped for DMA.  Yes, this is clunky, but it's
	  easier than always having the caller tell us whether the
	  transfer buffer has already been mapped.
 submit the URB 
 something went wrong 
	
	  since the URB has been submitted successfully, it's now okay
	  to cancel it
 did an abort occur during the submission? 
 cancel the URB, if it hasn't been cancelled already 
 wait for the completion of the URB 
 return the URB status 
  Transfer one control message, with timeouts, and allowing early
  termination.  Return codes are usual -Exxx, not USB_STOR_XFER_xxx.
 fill in the devrequest structure 
 fill and submit the URB 
 return the actual length of the data transferred if no error 
  This is a version of usb_clear_halt() that allows early termination and
  doesn't read the status from the device -- this is because some devices
  crash their internal firmware when the status is requested after a halt.
  A definitive list of these 'bad' devices is too difficult to maintain or
  make complete enough to be useful.  This problem was first observed on the
  Hagiwara FlashGate DUAL unit.  However, bus traces reveal that neither
  MacOS nor Windows checks the status after clearing a halt.
  Since many vendors in this space limit their testing to interoperability
  with these two OSes, specification violations like this one are common.
  Interpret the results of a URB transfer
  This function prints appropriate debugging messages, clears halts on
  non-control endpoints, and translates the status to the corresponding
  USB_STOR_XFER_xxx return code.
 no error code; did we send all the data? 
 stalled 
		
		  for control endpoints, (used by CB[I]) a stall indicates
		  a failed command
 for other sorts of endpoint, clear the stall 
 babble - the device tried to send more than we wanted to read 
 the transfer was cancelled by abort, disconnect, or timeout 
 short scatter-gather read transfer 
 abort or disconnect in progress 
 the catch-all error case 
  Transfer one control message, without timeouts, but allowing early
  termination.  Return codes are USB_STOR_XFER_xxx.
 fill in the devrequest structure 
 fill and submit the URB 
  Receive one interrupt buffer, without timeouts, but allowing early
  termination.  Return codes are USB_STOR_XFER_xxx.
  This routine always uses us->recv_intr_pipe as the pipe and
  us->ep_bInterval as the interrupt interval.
 calculate the max packet size 
 fill and submit the URB 
  Transfer one buffer via bulk pipe, without timeouts, but allowing early
  termination.  Return codes are USB_STOR_XFER_xxx.  If the bulk pipe
  stalls during the transfer, the halt is automatically cleared.
 fill and submit the URB 
 store the actual length of the data transferred 
  Transfer a scatter-gather list via bulk transfer
  This function does basically the same thing as usb_stor_bulk_transfer_buf()
  above, but it uses the usbcore scatter-gather library.
 don't submit s-g requests during abort processing 
 initialize the scatter-gather request block 
	
	  since the block has been initialized successfully, it's now
	  okay to cancel it
 did an abort occur during the submission? 
 cancel the request, if it hasn't been cancelled already 
 wait for the completion of the transfer 
  Common used function. Transfer a complete command
  via usb_stor_bulk_transfer_sglist() above. Set cmnd resid
  Transfer an entire SCSI command's worth of data payload over the bulk
  pipe.
  Note that this uses usb_stor_bulk_transfer_buf() and
  usb_stor_bulk_transfer_sglist() to achieve its goals --
  this function simply determines whether we're going to use
  scatter-gather or not, and acts appropriately.
 are we scatter-gathering? 
 use the usb core scatter-gather primitives 
 no scatter-gather, just make the request 
 store the residual and return the error code 
  Transport routines
  There are so many devices that report the capacity incorrectly,
  this routine was written to counteract some of the resulting
  problems.
 To Report "Medium Error: Record Not Found 
 current error 
 = 0x03 
 additional length 
 Record Not Found 
	
	  If last-sector problems can't occur, whether because the
	  capacity was already decremented or because the device is
	  known to report the correct capacity, then we don't need
	  to do anything.
 Was this command a READ(10) or a WRITE(10)? 
 Did this command access the last sector? 
		
		  The command succeeded.  We know this device doesn't
		  have the last-sector bug, so stop checking it.
		
		  The command failed.  Allow up to 3 retries in case this
		  is some normal sort of failure.  After that, assume the
		  capacity is wrong and we're trying to access the sector
		  beyond the end.  Replace the result code and sense data
		  with values that will cause the SCSI core to fail the
		  command immediately, instead of going into an infinite
		  (or even just a very long) retry loop.
	
	  Don't reset the retry counter for TEST UNIT READY commands,
	  because they get issued after device resets which might be
	  caused by a failed last-sector access.
  Invoke the transport and basic error-handlingrecovery methods
  This is used by the protocol layers to actually send the message to
  the device and receive the response.
 send the command to the transport layer 
	
	  if the command gets aborted by the higher layers, we need to
	  short-circuit all other processing
 if there is a transport error, reset and don't auto-sense 
 if the transport provided its own sense data, don't auto-sense 
	
	  Determine if we need to auto-sense
	 
	  I normally don't use a flag like this, but it's almost impossible
	  to understand what's going on here if I don't.
	
	  If we're running the CB transport, which is incapable
	  of determining status on its own, we will auto-sense
	  unless the operation involved a data-in transfer.  Devices
	  can signal most data-in errors by stalling the bulk-in pipe.
 Some devices (Kindle) require another command after SYNC CACHE 
	
	  If we have a failure, we're going to do a REQUEST_SENSE 
	  automatically.  Note that we differentiate between a command
	  "failure" and an "error" in the transport mechanism.
	
	  Determine if this device is SAT by seeing if the
	  command executed successfully.  Otherwise we'll have
	  to wait for at least one CHECK_CONDITION to determine
	  SANE_SENSE support
	
	  A short transfer on a command where we don't expect it
	  is unusual, but it doesn't mean we need to auto-sense.
 Now, if we need to do the auto-sense, let's do it 
 device supports and needs bigger sense buffer 
 FIXME: we must do the protocol translation here 
 issue the auto-sense command 
 let's clean up right away 
 If SANE_SENSE caused this problem, disable it 
		
		  Some devices claim to support larger sense but fail when
		  trying to request it. When a transport failure happens
		  using US_FS_SANE_SENSE, we always retry with a standard
		  (small) sense request. This fixes some USB GSM modems
 Other failures 
			
			  we skip the reset if this happens to be a
			  multi-target device, since failure of an
			  auto-sense is perfectly valid
		
		  If the sense data returned is larger than 18-bytes then we
		  assume this device supports requesting more in the future.
		  The response code must be 70h through 73h inclusive.
			
			  Indicate to the user that we truncated their sense
			  because we didn't know it supported larger sense.
 set the result so the higher layers expect this data 
		
		  We often get empty sense data.  This could indicate that
		  everything worked or that there was an unspecified
		  problem.  We have to decide which.
			
			  If things are really okay, then let's show that.
			  Zero out the sense buffer so the higher layers
			  won't realize we did an unsolicited auto-sense.
			
			  ATA-passthru commands use sense data to report
			  the command completion status, and often devices
			  return Check Condition status when nothing is
			  wrong.
 leave the data alone 
			
			  If there was a problem, report an unspecified
			  hardware error to prevent the higher layers from
			  entering an infinite retry loop.
	
	  Some devices don't work or return incorrect data the first
	  time they get a READ(10) command, or for the first READ(10)
	  after a media change.  If the INITIAL_READ10 flag is set,
	  keep track of whether READ(10) commands succeed.  If the
	  previous one succeeded and this one failed, set the REDO_READ10
	  flag to force a retry.
		
		  Next, if the REDO_READ10 flag is set, return a result
		  code that will cause the SCSI core to retry the READ(10)
		  command immediately.
 Did we transfer less than the minimum amount required? 
	
	  Error and abort processing: try to resynchronize with the device
	  by issuing a port reset.  If that fails, try a class-specific
	  device reset.
	
	  Set the RESETTING bit, and clear the ABORTING bit so that
	  the reset may proceed.
	
	  We must release the device lock because the pre_reset routine
	  will want to acquire it.
 Stop the current URB transfer 
	
	  If the state machine is blocked waiting for an URB,
	  let's wake it up.  The test_and_clear_bit() call
	  guarantees that if a URB has just been submitted,
	  it won't be cancelled more than once.
 If we are waiting for a scatter-gather operation, cancel it. 
  ControlBulk and ControlBulkInterrupt transport
 COMMAND STAGE 
 let's send the command via the control pipe 
	
	  Command is sometime (f.e. after scsi_eh_prep_cmnd) on the stack.
	  Stack may be vmallocated.  So no DMA for us.  Make a copy.
 check the return code for the command 
 if we stalled the command, it means command failed 
 Uh oh... serious problem here 
 DATA STAGE 
 transfer the data payload for this command, if one exists
 if we stalled the data transfer it means command failed 
 STATUS STAGE 
	
	  NOTE: CB does not have a status stage.  Silly, I know.  So
	  we have to catch this at a higher level.
	
	  UFI gives us ASC and ASCQ, like a request sense
	 
	  REQUEST_SENSE and INQUIRY don't affect the sense data on UFI
	  devices, so we ignore the information for those commands.  Note
	  that this means we could be ignoring a real error on these
	  commands, but that can't be helped.
	
	  If not UFI, we interpret the data as a result code 
	  The first byte should always be a 0x0.
	 
	  Some bogus devices don't follow that rule.  They stuff the ASC
	  into the first byte -- so if it's non-zero, call it a failure.
 The second byte & 0x0F should be 0x0 for good, otherwise error 
	
	  the CBI spec requires that the bulk pipe must be cleared
	  following any data-inout command failure (section 2.4.3.1.3)
  Bulk only transport
 Determine what the maximum LUN supported is 
 issue the command 
	
	  If we have a successful request, return the result if valid. The
	  CBW LUN field is 4 bits wide, so the value reported by the device
	  should fit into that.
	
	  Some devices don't like GetMaxLUN.  They may STALL the control
	  pipe, they may return a zero-length result, they may do nothing at
	  all and timeout, or they may fail in even more bizarrely creative
	  ways.  In these cases the best approach is to use the default
	  value: only one LUN.
 Take care of BULK32 devices; set extra byte to 0 
 set up the command wrapper 
 copy the command payload 
 send it to out endpoint 
 DATA STAGE 
 sendreceive data payload, if there is any 
	
	  Some USB-IDE converter chips need a 100us delay between the
	  command phase and the data phase.  Some devices need a little
	  more than that, probably because of clock rate inaccuracies.
		
		  If the device tried to send back more data than the
		  amount requested, the spec requires us to transfer
		  the CSW anyway.  Since there's no point retrying the
		  the command, we'll return fake sense data indicating
		  Illegal Request, Invalid Field in CDB.
		
		  Sometimes a device will mistakenly skip the data phase
		  and go directly to the status phase without sending a
		  zero-length packet.  If we get a 13-byte response here,
		  check whether it really is a CSW.
	
	  See flow chart on pg 15 of the Bulk Only Transport spec for
	  an explanation of how this code works.
 get CSW for device status 
	
	  Some broken devices add unnecessary zero-length packets to the
	  end of their data transfers.  Such packets show up as 0-length
	  CSWs.  If we encounter such a thing, try to read the CSW again.
 did the attempt to read the CSW fail? 
 get the status again 
 if we still have a failure at this point, we're in trouble 
 check bulk status 
	
	  Some broken devices report odd signatures, so we do not check them
	  for validity against the spec. We store the first one we see,
	  and check subsequent transfers for validity against this signature.
	
	  try to compute the actual residue, based on how much data
	  was really transferred and what the device tells us
		
		  Heuristically detect devices that generate bogus residues
		  by seeing what happens with INQUIRY and READ CAPACITY
		  commands.
 based on the status code, we report good or bad 
 device babbled -- return fake sense data 
 command good -- note that data could be short 
 command failed 
			
			  phase error -- note that a transport reset will be
			  invoked by the invoke_transport() function
 we should never get here, but if we do, we're in trouble 
  Reset routines
  This is the common part of the device reset code.
  It's handy that every transport mechanism uses the control endpoint for
  resets.
  Basically, we send a reset with a 5-second timeout, so we don't get
  jammed attempting to do the reset.
	
	  Give the device some time to recover from the reset,
	  but don't delay disconnect processing.
 return a result code based on the result of the clear-halts 
 This issues a CB[I] Reset to the device in question 
  This issues a Bulk-only Reset to the device in question, including
  clearing the subsequent endpoint halts that may occur.
  Issue a USB port reset to the device.  The caller must not hold
  us->dev_mutex.
for these devices we must use the class specific method 
 Were we disconnected while waiting for the lock? 
 SPDX-License-Identifier: GPL-2.0+
  Support for emulating SAT (ata pass through) on devices based
        on the Cypress USBATA bridge supporting ATACB.
  Copyright (c) 2008 Matthieu Castet (castet.matthieu@free.fr)
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
  ATACB is a protocol used on cypress usb<->ata bridge to
  send raw ATA command over mass storage
  There is a ATACB2 protocol that support LBA48 on newer chip.
  More info that be found on cy7c68310_8.pdf and cy7c68300c_8.pdf
  datasheet from cypress.com.
 check if we support the command 
 MULTIPLE_COUNT 
 check protocol 
no DATA 
 PIO in 
 PIO out 
 first build the ATACB command 
	srb->cmnd[0] = 0x24; 
			       bVSCBSignature : vendor-specific command
			       this value can change, but most(all ?) manufacturers
			       keep the cypress default : 0x24
 bVSCBSubCommand : 0x24 for ATACB 
	srb->cmnd[3] = 0xff - 1; 
				   features, sector count, lba low, lba med
				   lba high, device, command are valid
 TransferBlockCount : 512 
 features 
 sector count 
 lba low 
 lba med 
 lba high 
 device 
 command 
 extended bit set for LBA48 
 this could be supported by atacb2 
 ATA12 
 features 
 sector count 
 lba low 
 lba med 
 lba high 
 device 
 command 
 Filter SET_FEATURES - XFER MODE command 
 set  IdentifyPacketDevice for these cmds 
 if the device doesn't support ATACB 
	
	  if ck_cond flags is set, and there wasn't critical error,
	  build the special sense
 build the command for reading the ATA registers 
		
		  we use the same command as before, but we set
		  the read taskfile bit, for not executing atacb command,
		  but reading register selected in srb->cmnd[4]
 we fail to get registers, report invalid command 
 build the sense 
 set sk, asc for a good command 
 ATA PASS THROUGH INFORMATION AVAILABLE 
		
		  XXX we should generate sk, asc, ascq from status and error
		  regs
		  (see 11.1 Error translation ATA device error to SCSI error
		  map, and ata_to_sense_error from libata.)
 Sense data is current and format is descriptor. 
 ATA_RETURN_DESCRIPTOR 
 set length of additional sense data 
 Copy registers into sense buffer. 
 features 
 sector count 
 lba low 
 lba med 
 lba high 
 device 
 command 
	
	  Among CY7C68300 chips, the A revision does not support Cypress ATACB
	  Filter out this revision from EEPROM default descriptor values
 SPDX-License-Identifier: GPL-2.0+
  Driver for USB Mass Storage devices
  Usual Tables File for usb-storage and libusual
  Copyright (C) 2009 Alan Stern (stern@rowland.harvard.edu)
  The table of devices
 Define the device is matched with Vendor ID and interface descriptors 
 Terminating entry 
  The table of devices to ignore
 Terminating entry 
 Return an error if a device is in the ignore_ids list 
 SPDX-License-Identifier: GPL-2.0+
  Driver for USB Mass Storage compliant devices
  Debugging Functions Source Code File
  Current development and maintenance by:
    (c) 1999-2002 Matthew Dharm (mdharm-usb@one-eyed-alien.net)
  Developed with the assistance of:
    (c) 2002 Alan Stern <stern@rowland.org>
  Initial work by:
    (c) 1999 Michael Gee (michael@linuxspecific.com)
  This driver is based on the 'USB Mass Storage Class' document. This
  describes in detail the protocol used to communicate with such
  devices.  Clearly, the designers had SCSI and ATAPI commands in
  mind when they created this document.  The commands are all very
  similar to commands in the SCSI-II and ATAPI specifications.
  It is important to note that in a number of cases this class
  exhibits class-specific exemptions from the USB specification.
  Notably the usage of NAK, STALL and ACK differs from the norm, in
  that they are used to communicate wait, failed and OK on commands.
  Also, for certain devices, the interrupt endpoint is used to convey
  status of a command.
 SPDX-License-Identifier: GPL-2.0+
  Driver for Option High Speed Mobile Devices.
    (c) 2008 Dan Williams <dcbw@redhat.com>
  Inspiration taken from sierra_ms.c by Kevin Lloyd <klloyd@sierrawireless.com>
	
	  Some of the devices need to be asked for a response, but we don't
	  care what that response is.
 Read the CSW 
 Read the CSW 
	
	  Additional test for vendor information via INQUIRY,
	  because some vendorproduct IDs are ambiguous
 Force Modem mode 
 Allow Mass Storage mode (keep CD-Rom) 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Datafab USB Compact Flash reader
  datafab driver v0.1:
  First release
  Current development and maintenance by:
    (c) 2000 Jimmie Mayfield (mayfield+datafab@sackheads.org)
    Many thanks to Robert Baruch for the SanDisk SmartMedia reader driver
    which I used as a template for this driver.
    Some bugfixes and scatter-gather code by Gregory P. Smith 
    (greg-usb@electricrain.com)
    Fix for media change by Joerg Schneider (js@joergschneider.com)
  Other contributors:
    (c) 2002 Alan Stern <stern@rowland.org>
  This driver attempts to support USB CompactFlash readerwriter devices
  based on Datafab USB-to-ATA chips.  It was specifically developed for the 
  Datafab MDCFE-B USB CompactFlash reader but has since been found to work 
  with a variety of Datafab-based devices from a number of manufacturers.
  I've received a report of this driver working with a Datafab-based
  SmartMedia device though please be aware that I'm personally unable to
  test SmartMedia support.
  This driver supports reading and writing.  If you're truly paranoid,
  however, you can force the driver into a write-protected state by setting
  the WP enable bits in datafab_handle_mode_sense().  See the comments
  in that routine.
 total sector count 
 sector size in bytes 
 used for dual-slot readers 
 the following aren't used yet 
 additional sense code 
 additional sense code qualifier 
  The table of devices
 Terminating entry 
  The flags table
 Terminating entry 
 we're working in LBA mode.  according to the ATA spec, 
 we can support up to 28-bit addressing.  I don't know if Datafab
 supports beyond 24-bit addressing.  It's kind of hard to test 
 since it requires > 8GB CF card.
 Since we don't read more than 64 KB at a time, we have to create
 a bounce buffer and move the data a piece at a time between the
 bounce buffer and the actual transfer buffer.
 loop, never allocate or transfer more than 64k at once
 (min(128k, 255info->ssize) is the real limit)
 send the read command
 read the result
 Store the data in the transfer buffer
 we're working in LBA mode.  according to the ATA spec, 
 we can support up to 28-bit addressing.  I don't know if Datafab
 supports beyond 24-bit addressing.  It's kind of hard to test 
 since it requires > 8GB CF card.
 Since we don't write more than 64 KB at a time, we have to create
 a bounce buffer and move the data a piece at a time between the
 bounce buffer and the actual transfer buffer.
 loop, never allocate or transfer more than 64k at once
 (min(128k, 255info->ssize) is the real limit)
 Get the data from the transfer buffer
 send the command
 send the data
 read the result
 Dual-slot readers can be thought of as dual-LUN devices.
 We need to determine which card slot is being used.
 We'll send an IDENTIFY DEVICE command and see which LUN responds...
 There might be a better way of doing this?
 we'll try 3 times before giving up...
 this is a variation of the ATA "IDENTIFY DEVICE" command...according
 to the ATA spec, 'Sector Count' isn't used but the Windows driver
 sets this bit so we do too...
 we'll go ahead and extract the media capacity while we're here...
 capacity is at word offset 57-58
 most of this stuff is just a hack to get things working.  the
 datafab reader doesn't present a SCSI interface so we
 fudge the SCSI commands...
 WP enable: 0x80
 WP enable: 0x80
 vendor-specific mode
 retrieve all pages
 this routine is a placeholder...
 currently, we don't allocate any extra memory so we're okay
 Transport for the Datafab MDCFE-B
 hard coded 512 byte sectors as per ATA spec
 build the reply
 we need the last sector, not the number of sectors
 don't bother implementing READ_6 or WRITE_6.
 we'll probably never see a READ_12 but we'll do it anyway...
 we'll probably never see a WRITE_12 but we'll do it anyway...
 this response is pretty bogus right now.  eventually if necessary
 we can set the correct sense data.  so far though it hasn't been
 necessary
		
		  sure.  whatever.  not like we can stop the user from
		  popping the media out of the device (no locking doors, etc)
		
		  this is used by sd.c'check_scsidisk_media_change to detect
		  media change
		
		  the first datafab_id_device after a media change returns
		  an error (determined experimentally)
 SPDX-License-Identifier: GPL-2.0+
  Driver for USB Mass Storage compliant devices
  SCSI layer glue code
  Current development and maintenance by:
    (c) 1999-2002 Matthew Dharm (mdharm-usb@one-eyed-alien.net)
  Developed with the assistance of:
    (c) 2000 David L. Brown, Jr. (usb-storage@davidb.org)
    (c) 2000 Stephen J. Gowdy (SGowdy@lbl.gov)
  Initial work by:
    (c) 1999 Michael Gee (michael@linuxspecific.com)
  This driver is based on the 'USB Mass Storage Class' document. This
  describes in detail the protocol used to communicate with such
  devices.  Clearly, the designers had SCSI and ATAPI commands in
  mind when they created this document.  The commands are all very
  similar to commands in the SCSI-II and ATAPI specifications.
  It is important to note that in a number of cases this class
  exhibits class-specific exemptions from the USB specification.
  Notably the usage of NAK, STALL and ACK differs from the norm, in
  that they are used to communicate wait, failed and OK on commands.
  Also, for certain devices, the interrupt endpoint is used to convey
  status of a command.
  Vendor IDs for companies that seem to include the READ CAPACITY bug
  in all their devices
  Host functions 
	
	  Set the INQUIRY transfer length to 36.  We don't use any of
	  the extra data and many devices choke if asked for more or
	  less than 36 bytes.
	
	  Some host controllers may have alignment requirements.
	  We'll play it safe by requiring 512-byte alignment always.
 Tell the SCSI layer if we know there is more than one LUN 
	
	  Many devices have trouble transferring more than 32KB at a time,
	  while others have trouble with more than 64K. At this time we
	  are limiting both to 32K (64 sectores).
		
		  Tapes need much higher max_sector limits, so just
		  raise it to the maximum possible (4 GB  512) and
		  let the queue segment size sort out the real limit.
		
		  USB3 devices will be limited to 2048 sectors. This gives us
		  better throughput on most devices.
	
	  The max_hw_sectors should be up to maximum size of a mapping for
	  the device. Otherwise, a DMA API might fail on swiotlb environment.
	
	  Some USB host controllers can't do DMA; they have to use PIO.
	  For such controllers we need to make sure the block layer sets
	  up bounce buffers in addressable memory.
	
	  We can't put these settings in slave_alloc() because that gets
	  called before the device type is known.  Consequently these
	  settings can't be overridden via the scsi devinfo mechanism.
		
		  Some vendors seem to put the READ CAPACITY bug into
		  all their devices -- primarily makers of cell phones
		  and digital cameras.  Since these devices always use
		  flash media and can be expected to have an even number
		  of sectors, we will always enable the CAPACITY_HEURISTICS
		  flag unless told otherwise.
		
		  Disk-type devices use MODE SENSE(6) if the protocol
		  (SubClass) is Transparent SCSI, otherwise they use
		  MODE SENSE(10).
		
		 Many disks only accept MODE SENSE transfer lengths of
		  192 bytes (that's what Windows uses).
		
		  Some devices don't like MODE SENSE with page=0x3f,
		  which is the command used for checking if a device
		  is write-protected.  Now that we tell the sd driver
		  to do a 192-byte transfer with this command the
		  majority of devices work fine, but a few still can't
		  handle it.  The sd driver will simply assume those
		  devices are write-enabled.
		
		  A number of devices have problems with MODE SENSE for
		  page x08, so we will skip it.
		
		  Some devices don't handle VPD pages correctly, so skip vpd
		  pages if not forced by SCSI layer.
 Do not attempt to use REPORT SUPPORTED OPERATION CODES 
 Do not attempt to use WRITE SAME 
		
		  Some disks return the total number of blocks in response
		  to READ CAPACITY rather than the highest block number.
		  If this device makes that mistake, tell the sd driver.
		
		  A few disks have two indistinguishable version, one of
		  which reports the correct capacity and the other does not.
		  The sd driver has to guess which is the case.
 Some devices cannot handle READ_CAPACITY_16 
		
		  Many devices do not respond properly to READ_CAPACITY_16.
		  Tell the SCSI layer to try READ_CAPACITY_10 first.
		  However some USB 3.0 drive enclosures return capacity
		  modulo 2TB. Those must use READ_CAPACITY_16
		
		  assume SPC3 or latter devices support sense size > 18
		  unless US_FL_BAD_SENSE quirk is specified.
		
		  USB-IDE bridges tend to report SK = 0x04 (Non-recoverable
		  Hardware Error) when any low-level error occurs,
		  recoverable or not.  Setting this flag tells the SCSI
		  midlayer to retry such commands, which frequently will
		  succeed and fix the error.  The worst this can lead to
		  is an occasional series of retries that will all fail.
		
		  USB disks should allow restart.  Some drives spin down
		  automatically, requiring a START-STOP UNIT command.
		
		  Some USB cardreaders have trouble reading an sdcard's last
		  sector in a larger then 1 sector read, since the performance
		  impact is negligible we set this flag for all USB disks
		
		  Enable last-sector hacks for single-target devices using
		  the Bulk-only transport, unless we already know the
		  capacity will be decremented or is correct.
 Check if write cache default on flag is set or not 
 A few buggy USB-ATA bridges don't understand FUA 
 Some even totally fail to indicate a cache 
 don't read caching information 
 assume sync is needed 
		
		  Non-disk-type devices don't need to ignore any pages
		  or to force 192-byte transfer lengths for MODE SENSE.
		  But they do need to use MODE SENSE(10).
 Some (fake) usb cdrom devices don't like READ_DISC_INFO 
	
	  The CB and CBI transports have no way to pass LUN values
	  other than the bits in the second byte of a CDB.  But those
	  bits don't get set to the LUN value if the device reports
	  scsi_level == 0 (UNKNOWN).  Hence such devices must necessarily
	  be single-LUN.
	
	  Some devices choke when they receive a PREVENT-ALLOW MEDIUM
	  REMOVAL command, so suppress those commands.
	
	  this is to satisfy the compiler, tho I don't think the 
	  return code is ever checked anywhere.
	
	  Some USB drives don't support REPORT LUNS, even though they
	  report a SCSI revision level above 2.  Tell the SCSI layer
	  not to issue that command; it will perform a normal sequential
	  scan instead.
	
	  The UFI spec treats the Peripheral Qualifier bits in an
	  INQUIRY result as reserved and requires devices to set them
	  to 0.  However the SCSI spec requires these bits to be set
	  to 3 to indicate when a LUN is not present.
	 
	  Let the scanning code know if this target merely sets
	  Peripheral Device Type to 0x1f to indicate no LUN.
 queue a command 
 This is always called with scsi_lock(host) held 
 check for state-transition errors 
 fail the command if we are disconnecting 
 enqueue the command and wake up the control thread 
  Error handling functions
 Command timeout and abort 
	
	  us->srb together with the TIMED_OUT, RESETTING, and ABORTING
	  bits are protected by the host lock.
 Is this command still active? 
	
	  Set the TIMED_OUT bit.  Also set the ABORTING bit, but only if
	  a device reset isn't already in progress (to avoid interfering
	  with the reset).  Note that we must retain the host lock while
	  calling usb_stor_stop_transport(); otherwise it might interfere
	  with an auto-reset that begins as soon as we release the lock.
 Wait for the aborted command to finish 
  This invokes the transport reset mechanism to reset the state of the
  device
 lock the device pointers and do the reset 
 Simulate a SCSI bus reset by resetting the device's USB port. 
  Report a driver-initiated device reset to the SCSI layer.
  Calling this for a SCSI-initiated reset is unnecessary but harmless.
  The caller must own the SCSI host lock.
  Report a driver-initiated bus reset to the SCSI layer.
  Calling this for a SCSI-initiated reset is unnecessary but harmless.
  The caller must not own the SCSI host lock.
  procscsi functions
 if someone is sending us data, just throw it away 
 print the controller name 
 print product, vendor, and serial number strings 
 show the protocol and transport 
 show the device flags 
  Sysfs interface
 Output routine for the sysfs max_sectors file 
 Input routine for the sysfs max_sectors file 
  this defines our host template, with which we'll allocate hosts
 basic userland interface stuff 
 command interface -- queued only 
 error and abort handlers 
 queue commands only, only one command per LUN 
 unknown initiator id 
 lots of sg segments can be handled 
	
	  Limit the total size of a transfer to 120 KB.
	 
	  Some devices are known to choke with anything larger. It seems like
	  the problem stems from the fact that original IDE controllers had
	  only an 8-bit register to hold the number of sectors in one transfer
	  and even those couldn't handle a full 256 sectors.
	 
	  Because we want to make sure we interoperate with as many devices as
	  possible, we will maintain a 240 sector transfer size limit for USB
	  Mass Storage devices.
	 
	  Tests show that other operating have similar limits with Microsoft
	  Windows 7 limiting transfers to 128 sectors for both USB2 and USB3
	  and Apple Mac OS X 10.11 limiting transfers to 256 sectors for USB2
	  and 2048 for USB3 devices.
 emulated HBA 
 we do our own delay after a device or bus reset 
 sysfs device attributes 
 module management 
 To Report "Illegal Request: Invalid Field in CDB 
 current error 
 Illegal Request = 0x05 
 additional length 
 Invalid Field in CDB 
 SPDX-License-Identifier: GPL-2.0
 Host Controller Driver for the Elan Digital Systems U132 adapter
 Copyright(C) 2006 Elan Digital Systems Limited
 http:www.elandigitalsystems.com
 Author and Maintainer - Tony Olech - Elan Digital Systems
 tony.olech@elandigitalsystems.com
 This driver was written by Tony Olech(tony.olech@elandigitalsystems.com)
 based on various USB host drivers in the 2.6.15 linux kernel
 with constant reference to the 3rd Edition of Linux Device Drivers
 published by O'Reilly
 The U132 adapter is a USB to CardBus adapter specifically designed
 for PC cards that contain an OHCI host controller. Typical PC cards
 are the Orange Mobile 3G Option GlobeTrotter Fusion card.
 The U132 adapter will NOT work with PC cards that do not contain
 an OHCI controller. A simple way to test whether a PC card has an
 OHCI controller as an interface is to insert the PC card directly
 into a laptop(or desktop) with a CardBus slot and if "lspci" shows
 a new USB controller and "lsusb -v" shows a new OHCI Host Controller
 then there is a good chance that the U132 adapter will support the
 PC card.(you also need the specific client driver for the PC card)
 Please inform the Author and Maintainer about any PC cards that
 contain OHCI Host Controller and work when directly connected to
 an embedded CardBus slot but do not work when they are connected
 via an ELAN U132 adapter.
	 FIXME ohci.h is ONLY for internal use by the OHCI driver.
	  If you're going to try stuff like this, you need to split
	  out shareable stuff (register declarations?) into its own
	  file, maybe name <linuxusbohci.h>
 Some boards misreport power switchingovercurrent
 u132_module_lock exists to protect access to global variables
 end of the global variables protected by u132_module_lock
 these cannot be inlines because we need the structure offset!!
 Does anyone have a better way?????
 must not LOCK sw_lock
 this work function is only executed from the work queue
 output pipe 
 hub is inactive unless the port is powered 
 Start an OHCI controller, set the BUS operational
 resets USB and controller
 enable interrupts
 ... allow extra time 
 power down each port 
 start controller operations 
 handle root hub init quirks ... 
(usb_addr > 0) 
 usb_pipeout(urb->pipe) 
(usb_addr > 0) 
(endp == NULL) 
 this timer value might be vendor-specific ... 
 wrap-aware logic morphed from <linuxjiffies.h> 
			break;	 start the next reset,
 the virtual root hub timer IRQ checks for hub status
 This function may be called by the USB core whilst the "usb_all_devices_rwsem"
 is held for writing, thus this module must not call usb_remove_hcd()
 synchronously - but instead should immediately stop activity to the
 device and asynchronously call usb_remove_hcd()
  for this device there's no useful distinction between the controller
  and its root hub.
 this driver is loaded explicitly by ftdi_u132
 the platform_driver struct is static because it is per type of module
 SPDX-License-Identifier: GPL-2.0
  OHCI HCD (Host Controller Driver) for USB.
  TI DA8xx (OMAP-L1x) Bus Glue
  Derived from: ohci-omap.c and ohci-s3c2410.c
  Copyright (C) 2008-2009 MontaVista Software, Inc. <source@mvista.com>
 Over-current indicator change bitmask 
	
	  DA8xx only have 1 port connected to the pins but the HC root hub
	  register A reports 2 ports, thus we'll have to override it...
	
	  Since we're providing a board-specific root hub port power control
	  and over-current reporting, we have to override the HC root hub A
	  register's default value, so that ohci_hub_control() could return
	  the correct hub descriptor...
  Update the status data from the hub with the over-current indicator change.
 See if we have OCIC bit set on port 1 
  Look at the control requests to the root hub and see if we need to override.
 Check the port number 
 The port power status (PPS) bit defaults to 1 
 The port over-current indicator (POCI) bit is always 0 
 The over-current indicator change (OCIC) bit is 0 too 
 Check the port number 
-------------------------------------------------------------------------
  Driver definition to register with platform structure.
	
	  The Davinci da8xx HW has some unusual quirks, which require
	  da8xx-specific workarounds. We override certain hc_driver
	  functions here to achieve that. We explicitly do not enhance
	  ohci_driver_overrides to allow this more easily, since this
	  is an unusual case, and we don't want to encourage others to
	  override these functions by making it too easy.
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2019-2020 Linaro Limited 
	
	  The hardware does alternate between two 32-bit pages.
	  (This is because each row of the firmware is 8 bytes).
	 
	  for even steps we use DATA0, for odd steps DATA1.
 step+1. Read "Set DATAX" and confirm it is cleared. 
	
	  step+2. Write FW data to "DATAX".
	  "LSB is left" => force little endian
 step+3. Set "Set DATAX". 
	
	  The Firmware's Data Format is describe in
	  "6.3 Data Format" R19UH0078EJ0500 Rev.5.00 page 124
	
	  The bootrom chips of the big brother have sizes up to 64k, let's
	  assume that's the biggest the firmware can get.
 The First 2 bytes are fixed value (55aa). "LSB on Left" 
 verify the firmware version position and print it. 
 Check if external ROM exists 
 External ROM exists 
 check FW version 
	
	  Test if ROM is present and loaded, if so we can skip everything
 ROM exists 
 Check the "Result Code" Bits (6:4) and act accordingly 
 No result yet 
 Error State 
 All other states are marked as "Reserved states" 
	
	  Test if the device is actually needing the firmware. As most
	  BIOSes will initialize the device for us. If the device is
	  initialized.
	
	  Check if "FW Download Lock" is locked. If it is and the FW is
	  ready we can simply continue. If the FW is not ready, we have
	  to give up.
	
	  Check if "FW Download Enable" is set. If someone (us?) tampered
	  with it and it can't be reset, we have to give up too... and
	  ask for a forgiveness and a reboot.
 Otherwise, Check the "Result Code" Bits (6:4) and act accordingly 
 No result yet 
 tell the caller, that this device needs the firmware. 
 Success, device should be working. 
 Error State 
 All other states are marked as "Reserved states" 
	
	  For more information and the big picture: please look at the
	  "Firmware Download Sequence" in "7.1 FW Download Interface"
	  of R19UH0078EJ0500 Rev.5.00 page 131
	
	  0. Set "FW Download Enable" bit in the
	  "FW Download Control & Status Register" at 0xF4
 1 - 10 follow one step after the other. 
	
	  This sequence continues until the last data is written to
	  "DATA0" or "DATA1". Naturally, we wait until "SET DATA01"
	  is cleared by the hardware beforehand.
	
	  11. After finishing writing the last data of FW, the
	  System Software must clear "FW Download Enable"
 12. Read "Result Code" and confirm it is good. 
 Timed out  Error - let's see if we can fix this 
		case 0: 
			  we shouldn't end up here.
			  maybe it took a little bit longer.
			  But all should be well?
 (No result yet! 
 sleep a bit while ROM is erased 
 2. Write magic word to Data0 
 3. Set External ROM access 
 4. Check the result 
 5 to 16 Write FW to DATA01 while checking SetData01 
	
	  wait till DATA01 is cleared
 17. Remove bypass 
 18. check result 
 Timed out 
 Last step set Reload 
	
	  wait till Reload is cleared
 Check if the device has external ROM 
 perform chip erase first 
 lets try loading fw on ROM first 
 Check if device has ROM and loaded, if so skip everything 
 Continue ahead, if the firmware is already running. 
 no firmware interface available 
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2005 David Brownell
  (C) Copyright 2002 Hewlett-Packard Company
  (C) Copyright 2008 Magnus Damm
  SM501 Bus Glue - based on ohci-omap.c
  This file is licenced under the GPL.
-------------------------------------------------------------------------
	
	  generic hardware linkage
	
	  basic lifecycle operations
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
-------------------------------------------------------------------------
 allocate, reserve and remap resources for registers 
	 The sm501 chip is equipped with local memory that may be used
	  by on-chip devices such as the video controller and the usb host.
	  This driver uses genalloc so that usb allocations with
	  gen_pool_dma_alloc() allocate from this local memory. The dma_handle
	  returned by gen_pool_dma_alloc() will be an offset starting from 0
	  for the first local memory byte.
	 
	  So as long as data is allocated using gen_pool_dma_alloc() all is
	  fine. This is however not always the case - buffers may be allocated
	  using kmalloc() - so the usb core needs to be told that it must copy
	  data into our local memory if the buffers happen to be placed in
	  regular memory. A non-null hcd->localmem_pool initialized by the
	  the call to usb_hcd_setup_local_mem() below does just that.
 enable power and unmask interrupts 
 mask interrupts and disable power 
-------------------------------------------------------------------------
-------------------------------------------------------------------------
  Driver definition to register with the SM501 bus
 SPDX-License-Identifier: GPL-2.0+
  Freescale QUICC Engine USB Host Controller Driver
  Copyright (c) Freescale Semicondutor, Inc. 2006.
                Shlomi Gridish <gridish@freescale.com>
                Jerry Huang <Chang-Ming.Huang@freescale.com>
  Copyright (c) Logic Product Development, Inc. 2007
                Peter Barada <peterb@logicpd.com>
  Copyright (c) MontaVista Software, Inc. 2008.
                Anton Vorontsov <avorontsov@ru.mvista.com>
 maps the hardware error code to the USB error code 
 if this TD was the ED's head, find next TD 
 If this TD was the ED's head,find next TD 
 free done FHCI URB resource such as ED and TD 
 if this TD was the ED's head,find the next TD 
 if this TD was the ED's head,find next TD 
 this routine called to complete and free done URB 
  caculate transfer lengthstats and update the urb
  Precondition: irqsafe(only for urb-?status locking)
 ISO...drivers see per-TD lengthstatus 
	 BULK,INT,CONTROL... drivers see aggregate lengthstatus,
	  except that "setup" bytes aren't counted and "short" transfers
	  might not be reported as errors.
 control endpoint only have soft stalls 
 update packet status if needed(short may be ok) 
 count all non-empty packets except control SETUP packet 
 there are some pedning request to unlink 
 HC may have partly processed this TD 
 URB is done;clean up 
 SPDX-License-Identifier: GPL-2.0+
  ehci-omap.c - driver for USBHOST on OMAP34 processors
  Bus Glue for the EHCI controllers in OMAP34
  Tested on several OMAP3 boards, and OMAP4 Pandaboard
  Copyright (C) 2007-2013 Texas Instruments, Inc.
 	Author: Vikram Pandita <vikram.pandita@ti.com>
 	Author: Anand Gadiyar <gadiyar@ti.com>
 	Author: Keshava Munegowda <keshava_mgowda@ti.com>
 	Author: Roger Quadros <rogerq@ti.com>
  Copyright (C) 2009 Nokia Corporation
 	Contact: Felipe Balbi <felipe.balbi@nokia.com>
  Based on "ehci-fsl.c" and "ehci-au1xxx.c" ehci glue layers
 EHCI Register Set 
-------------------------------------------------------------------------
 one PHY for each port 
 configure so an HC device and id are always provided 
 always called with process context; sleeping is OK 
  ehci_hcd_omap_probe - initialize TI-based HCDs
  @pdev: Pointer to this platform device's information
  Allocates basic resources for this USB host controller, and
  then invokes the start() method for the HCD associated with it
  through the hotplug entry's driver_data.
 For DT boot, get platform data from parent. i.e. usbhshost 
	
	  Right now device-tree probed devices don't get dma_mask set.
	  Since shared usb code relies on it, set it here for now.
	  Once we have dma capability bindings this can go away.
 get the PHY devices if needed 
 get the PHY device 
 no PHY 
 bring PHY out of suspend 
	
	  An undocumented "feature" in the OMAP3 EHCI controller,
	  causes suspended ports to be taken out of suspend when
	  the USBCMD.RunStop bit is cleared (for example when
	  we do ehci_bus_suspend).
	  This breaks suspend-resume if the root-hub is allowed
	  to suspend. Writing 1 to this undocumented register bit
	  disables this feature and restores normal behavior.
	
	  Bring PHYs out of reset for non PHY modes.
	  Even though HSIC mode is a PHY-less mode, the reset
	  line exists between the chips and can be modelled
	  as a PHY device for reset control.
 bring PHY out of suspend 
  ehci_hcd_omap_remove - shutdown processing for EHCI HCDs
  @pdev: USB Host Controller being removed
  Reverses the effect of usb_ehci_hcd_omap_probe(), first invoking
  the HCD's stop() method.  It is always called from a thread
  context, normally "rmmod", "apmd", or something similar.
.suspend		= ehci_hcd_omap_suspend, 
.resume		= ehci_hcd_omap_resume, 
-------------------------------------------------------------------------
 SPDX-License-Identifier: GPL-2.0
  NVIDIA Tegra xHCI host controller driver
  Copyright (c) 2014-2020, NVIDIA CORPORATION. All rights reserved.
  Copyright (C) 2014 Google, Inc.
 FPCI CFG registers 
 FPCI mailbox registers 
 XUSB_CFG_ARU_MBOX_CMD 
 XUSB_CFG_ARU_MBOX_DATA_IN and XUSB_CFG_ARU_MBOX_DATA_OUT 
 XUSB_CFG_ARU_MBOX_OWNER 
 IPFS registers 
 Falcon CSB registers 
 MP CSB registers 
 Pad to 256 bytes 
 Firmware loading related 
		
		  Reparent to PLLU_480M. Set divider first to avoid
		  overclocking.
		
		  The rate should already be correct, but set it again just
		  to be sure.
 Reparent to CLK_M 
 Command requests from the firmware 
 no ACKNAK required 
 unused 
 unused 
 unused 
 Response message to above commands 
	
	  Acquire the mailbox. The firmware still owns the mailbox for
	  ACKNAK messages.
 clear mailbox interrupts 
		
		  TODO: Request bandwidth once EMC scaling is supported.
		  Ignore for now since ACKNAK is not required for SET_BW
		  messages.
			
			  wait 500us for LFPS detector to be disabled before
			  sending ACK
 clear mailbox owner if no ACKNAK is required 
 Program BAR0 space 
 Enable bus master 
 Enable interrupt assertion 
 Set hysteresis 
 Load Falcon controller with its firmware. 
 Program the size of DFI into ILOAD_ATTR. 
	
	  Boot code of the firmware reads the ILOAD_BASE registers
	  to get to the start of the DFI in system memory.
 Set BOOTPATH to 1 in APMAP. 
 Invalidate L2IMEM. 
	
	  Initiate fetch of bootcode from system memory into L2IMEM.
	  Program bootcode location and size in system memory.
 Trigger L2IMEM load operation. 
 Setup Falcon auto-fill. 
 wait for RESULT_VLD to get set 
 Boot Falcon CPU and wait for USBSTS_CNR to get cleared. 
 Enable firmware messages from controller. 
 switch to host mode 
 set PP=0 
 reset OTG port SSPI 
			
			  usb-phy is optional, continue if its not available.
	
	  This must happen after usb_create_hcd(), because usb_create_hcd()
	  will overwrite the drvdata of the device with the hcd it creates.
	
	  The XUSB Falcon microcontroller can only address 40 bits, so set
	  the DMA mask accordingly.
 Enable wake for both USB 2.0 and USB 3.0 roothubs 
		 xusb_hub_suspend() has just directed one or more USB2 port(s)
		  to U3 state, it takes 3ms to enter U3.
 SPDX-License-Identifier: GPL-2.0
  Driver for EHCI UHP on Atmel chips
   Copyright (C) 2009 Atmel Corporation,
                      Nicolas Ferre <nicolas.ferre@atmel.com>
   Based on various ehci-.c drivers
 interface and function clocks 
-------------------------------------------------------------------------
-------------------------------------------------------------------------
	 Right now device-tree probed devices don't get dma_mask set.
	  Since shared usb code relies on it, set it here for now.
	  Once we have dma capability bindings this can go away.
 registers start at offset 0x0 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  xHCI host controller driver
  Copyright (C) 2008 Intel Corp.
  Author: Sarah Sharp
  Some code borrowed from the Linux EHCI driver.
  Allocates a generic ring segment from the ring pool, sets the dma address,
  initializes the segment to zero, and sets the private next pointer to NULL.
  Section 4.11.1.1:
  "All components of all Command and Transfer TRBs shall be initialized to '0'"
 If the cycle state is 0, set the cycle bit to 1 for all the TRBs 
  Make the prev segment point to the next segment.
  Change the last TRB in the prev segment to be a Link TRB which points to the
  DMA address of the next segment.  The caller needs to set any Link TRB
  related flags, such as End TRB, Toggle Cycle, and no snoop.
 Set the last TRB in the segment to have a TRB type ID of Link TRB 
  Link the ring to the new segments.
  Set Toggle Cycle for the new ring if needed.
 Set chain bit for 0.95 hosts, and for isoc rings on AMD 0.96 host 
  We need a radix tree for mapping physical addresses of TRBs to which stream
  ID they belong to.  We need to do this because the host controller won't tell
  us which stream ring the TRB came from.  We could store the stream ID in an
  event data TRB, but that doesn't help us for the cancellation case, since the
  endpoint may stop before it reaches that event data TRB.
  The radix tree maps the upper portion of the TRB DMA address to a ring
  segment that has the same upper portion of DMA addresses.  For example, say I
  have segments of size 1KB, that are always 1KB aligned.  A segment may
  start at 0x10c91000 and end at 0x10c913f0.  If I use the upper 10 bits, the
  key to the stream ID is 0x43244.  I can use the DMA address of the TRB to
  pass the radix tree a key to get the right stream ID:
 	0x10c90fff >> 10 = 0x43243
 	0x10c912c0 >> 10 = 0x43244
 	0x10c91400 >> 10 = 0x43245
  Obviously, only those TRBs with DMA addresses that are within the segment
  will make the radix tree return the stream ID for that ring.
  Caveats for the radix tree:
  The radix tree uses an unsigned long as a key pair.  On 32-bit systems, an
  unsigned long will be 32-bits; on a 64-bit system an unsigned long will be
  64-bits.  Since we only request 32-bit DMA addresses, we can use that as the
  key on 32-bit or 64-bit systems (it would also be fine if we asked for 64-bit
  PCI DMA addresses on a 64-bit system).  There might be a problem on 32-bit
  extended systems (where the DMA address can be bigger than 32-bits),
  if we allow the PCI dma mask to be bigger than 32-bits.  So don't do that.
 Skip any segments that were already added. 
 XXX: Do we need the hcd structure in all these functions? 
 The ring is empty, so the enqueue pointer == dequeue pointer 
	 The ring is initialized to 0. The producer must write 1 to the cycle
	  bit to handover ownership of the TRB, so PCS = 1.  The consumer must
	  compare CCS to the cycle bit to check ownership, so CCS = 1.
	 
	  New rings are initialized with cycle state equal to 1; if we are
	  handling ring expansion, set the cycle state equal to the old ring.
	
	  Each segment has a link TRB, and leave an extra TRB for SW
	  accounting purpose
 Allocate segments and link them for a ring 
 Set chain bit for 0.95 hosts, and for isoc rings on AMD 0.96 host 
  Create a new ring with zero or more segments.
  Link each segment together into a ring.
  Set the end flag and the cycle toggle bit on the last segment.
  See section 4.9.1 and figures 15 and 16.
 Only event ring does not use link TRB 
 See section 4.9.2.1 and 6.4.4.1 
  Expand an existing ring.
  Allocate a new ring which has same segment numbers and link the two rings.
 Allocate number of segments we needed, or double the ring size 
 increment ep index by offset of start of ep ctx array 
 Streams structures manipulation 
  The stream context array for each endpoint with bulk streams enabled can
  vary in size, based on:
   - how many streams the endpoint supports,
   - the maximum primary stream array size the host controller supports,
   - and how many streams the device driver asks for.
  The stream context array must be a power of 2, and can be as small as
  64 bytes or as large as 1MB.
  Change an endpoint's internal structure so it supports stream IDs.  The
  number of requested streams includes stream 0, which cannot be used by device
  drivers.
  The number of stream contexts in the stream context array may be bigger than
  the number of streams the driver wants to use.  This is because the number of
  stream context array entries must be a power of two.
 Initialize the array of virtual pointers to stream rings. 
 Initialize the array of DMA addresses for stream rings for the HW. 
 Allocate everything needed to free the stream rings later 
	 Allocate rings for all the streams that the driver will use,
	  and add their segment DMA addresses to the radix tree.
	  Stream 0 is reserved.
 Set deq ptr, cycle bit, and stream context type 
	 Leave the other unused stream ring pointers in the stream context
	  array initialized to zero.  This will cause the xHC to give us an
	  error if the device asks for a stream ID we don't have setup (if it
	  was any other way, the host controller would assume the ring is
	  "empty" and wait forever for data to be queued to that stream ID).
  Sets the MaxPStreams field and the Linear Stream Array field.
  Sets the dequeue pointer to the stream context array.
	 MaxPStreams is the number of stream context array entries, not the
	  number we're actually using.  Must be in 2^(MaxPstreams + 1) format.
	  fls(0) = 0, fls(0x1) = 1, fls(0x10) = 2, fls(0x100) = 3, etc.
  Sets the MaxPStreams field and the Linear Stream Array field to 0.
  Reinstalls the "normal" endpoint ring (at its previous dequeue mark,
  not at the beginning of the ring).
 Frees all stream contexts associated with the endpoint,
  Caller should fix the endpoint context streams fields.
 Device context manipulation 
	 If the device never made it past the Set Address stage,
	  it may not have the real_port set correctly.
 Multi-TT hubs will have more than one entry 
 All the xhci_tds in the ring's TD list should be freed at this point.
  Should be called with xhci->lock held if there is any chance the TT lists
  will be manipulated by the configure endpoint, allocate device, or update
  hub functions while this function is removing the TT entries from the list.
 Slot ID 0 is reserved 
		 Endpoints on the TTroot port lists should have been removed
		  when usb_disable_device() was called for the device.
		  We can't drop them anyway, because the udev might have gone
		  away by this point, and we can't tell what speed it was.
 If this is a hub, free the TT(s) from the TT list 
 If necessary, update the number of active TTs on this root port 
  Free a virt_device structure.
  If the virt_device added a tt_info (a hub) and has children pointing to
  that tt_info, then free the child first. Recursive.
  We can't rely on udev at this point to find child-parent relationships.
 is this a hub device that added a tt_info to the tts list 
 are any devices using this tt_info? 
 we are now at a leaf device 
 Slot ID 0 is reserved 
 Allocate the (output) device context that will be used in the HC. 
 Allocate the (input) device context for address device command 
 Initialize the cancellation list and watchdog timers for each ep 
 Allocate endpoint 0 ring 
 Point to output device context in dcbaa. 
	
	  FIXME we don't keep track of the dequeue pointer very well after a
	  Set TR dequeue pointer, so we're setting the dequeue pointer of the
	  host to our enqueue pointer.  This should only be called after a
	  configured device has reset, so all control transfers should have
	  been completed or cancelled before the reset.
  The xHCI roothub may have ports of differing speeds in any order in the port
  status registers.
  The xHCI hardware wants to know the roothub port number that the USB device
  is attached to (or the roothub port its ancestor hub is attached to).  All we
  know is the index of that port under either the USB 2.0 or the USB 3.0
  roothub, but that doesn't give us the real index into the HW port status
  registers. Call xhci_find_raw_port_number() to get real index.
 Found device below root hub ;
 Setup an xHCI virtual device for a Set Address command 
 Slot ID 0 is reserved 
 3) Only the control endpoint is valid - one endpoint context 
 USB core guesses at a 64-byte max packet first for FS devices 
 Speed was set earlier, this shouldn't happen. 
 Find the root hub port this device is under 
 Set the port number in the virtual_device to the faked port number 
 Found device below root hub ;
	 Find the right bandwidth table that this device will be a part of.
	  If this is a full speed device attached directly to a root port (or a
	  decendent of one), it counts as a primary bandwidth domain, not a
	  secondary bandwidth domain under a TT.  An xhci_tt_info structure
	  will never be created for the HS root hub.
 Find the right TT. 
 Is this a LSFS device under an external HS hub? 
 Step 4 - ring already allocated 
 Step 5 
 EP 0 can handle "burst" sizes of 1, so Max Burst Size field is 0 
 Steps 7 and 8 were done in xhci_alloc_virt_device() 
  Convert interval expressed as 2^(bInterval - 1) == interval into
  straight exponent value 2^n == interval.
		
		  Full speed isoc endpoints specify interval in frames,
		  not microframes. We are using microframes everywhere,
		  so adjust accordingly.
 1 frame = 2^3 uframes 
  Convert bInterval expressed in microframes (in 1-255 range) to exponent of
  microframes, rounded down to nearest power of 2.
 Return the polling or NAK interval.
  The polling interval is expressed in "microframes".  If xHCI's Interval field
  is set to N, it will service the endpoint every 2^(Interval)125us.
  The NAK interval is one NAK per 1 to 255 microframes, or no NAKs if interval
  is set to 0.
 Max NAK rate 
 SS and HS isocint have same decoding 
		
		  Fall through for interrupt endpoint interval decoding
		  since it uses the same rules as low speed interrupt
		  endpoints.
 The "Mult" field in the endpoint context is only set for SuperSpeed isoc eps.
  High speed endpoint descriptors can define "the number of additional
  transaction opportunities per microframe", but that goes in the Max Burst
  endpoint context field.
 Super speed and Plus have max burst in ep companion desc 
 Return the maximum endpoint service interval time (ESIT) payload.
  Basically, this is the maxpacket size, multiplied by the burst size
  and mult size.
 Only applies for interrupt or isochronous endpoints 
 SuperSpeedPlus Isoc ep sending over 48k per esit 
 SuperSpeed or SuperSpeedPlus Isoc ep with less than 48k per esit 
 A 0 in max burst means 1 transfer per ESIT 
 Set up an endpoint with one ring segment.  Do not allocate stream rings.
  Drivers will have to call usb_alloc_streams() to do that.
	
	  Get values to fill the endpoint context, mostly from ep descriptor.
	  The average TRB buffer lengt for bulk endpoints is unclear as we
	  have no clue on scatter gather list entry size. For Isoc and Int,
	  set it to max available. See xHCI 1.1 spec 4.14.1.1 for details.
 Periodic endpoint bInterval limit quirk 
 FIXME dig Mult and streams info out of ep companion desc 
 Allow 3 retries for everything but isoc, set CErr = 3 
 HS bulk max packet should be 512, FS bulk supports 8, 16, 32 or 64 
 xHCI 1.0 and 1.1 indicates that ctrl ep avg TRB Length should be 8 
 xhci 1.1 with LEC support doesn't use mult field, use RsvdZ 
 Set up the endpoint ring 
 Fill the endpoint context 
	 Don't free the endpoint ring until the set interface or configuration
	  request succeeds.
		 We can't tell what endpoint type is being dropped, but
		  unconditionally clearing the bandwidth info for non-periodic
		  endpoints should be harmless because the info will never be
		  set in the first place.
 Dropped endpoint 
 Ignore non-periodic endpoints 
 Added or changed endpoint 
			 Number of packets and mult are zero-based in the
			  input context, but we want one-based for the
			  interval table.
 Copy output xhci_ep_ctx to the input xhci_ep_ctx copy.
  Useful when you want to change one particular aspect of the endpoint and then
  issue a configure endpoint command.
 Copy output xhci_slot_ctx to the input xhci_slot_ctx.
  Useful when you want to change one particular aspect of the endpoint and then
  issue a configure endpoint command.  Only the context entries field matters,
  but we'll copy the whole thing anyway.
 Set up the scratchpad buffer array and scratchpad buffers, if needed. 
 TRB math checks for xhci_trb_in_td(), using the command and event rings. 
 A zeroed DMA field should fail 
 One TRB before the ring start should fail 
 One byte before the ring start should fail 
 Starting TRB should succeed 
 Ending TRB should succeed 
 One byte after the ring end should fail 
 One TRB after the ring end should fail 
 An address of all ones should fail 
 Test feeding a valid DMA address from a different ring 
 Test feeding a valid end TRB from a different ring 
 Test feeding a valid start and end TRB from a different ring 
 TRB in this ring, but after this TD 
 TRB in this ring, but before this TD 
 TRB in this ring, but after this wrapped TD 
 TRB in this ring, but before this wrapped TD 
 TRB not in this ring, and we have a wrapped TD 
 Update HC event ring dequeue pointer 
	 Don't clear the EHB bit (which is RW1C) because
	  there might be more events to service.
 Write event ring dequeue pointer, "
		
		  Some hosts incorrectly use sub-minor version for minor
		  version (i.e. 0x02 instead of 0x20 for bcdUSB 0x320 and 0x01
		  for bcdUSB 0x310). Since there is no USB release with sub
		  minor version 0x301 to 0x309, we can assume that they are
		  incorrect and fix it here.
 Ignoring port protocol we can't understand. FIXME 
 Port offset and count in the third dword, see section 7.2 
 Port count includes the current port offset 
 WTF? "Valid values are â1â to MaxPorts" 
			 count unique ID values, two consecutive entries can
			  have the same ID if link is assymetric
 cache usb2 port capabilities 
 Duplicate entry.  Ignore the port if the revisions differ. 
			 Only adjust the roothub port counts if we haven't
			  found a similar duplicate.
 FIXME: Should we disable ports not in the Extended Capabilities? 
  Scan the Extended Capabilities for the "Supported Protocol Capabilities" that
  specify what speeds each port is supposed to be.  We can't count on the port
  speed bits in the PORTSC register being correct until a device is connected,
  but we need to set up the two fake roothubs with the correct number of USB
  3.0 and USB 2.0 ports at host controller initialization time.
 count extended protocol capability entries for later caching 
	 Place limits on the number of roothub ports so that the hub
	  descriptors aren't longer than the USB core will allocate.
	
	  Note we could have all USB 3.0 ports, or all USB 2.0 ports.
	  Not sure how the USB core will handle a hub with no ports...
 init command timeout work 
 Use 4K pages, since that's common and the minimum the HC supports 
	
	  Program the Number of Device Slots Enabled field in the CONFIG
	  register with the max value of slots the HC can handle.
 xHC can handle at most %d device slots.", val);
 Setting Max device slots reg = 0x%x.", val);
	
	  xHCI section 5.4.6 - doorbell array must be
	  "physically contiguous and 64-byte (cache line) aligned".
 Device context base array address = 0x%llx (DMA), %p (virt)",
	
	  Initialize the ring segment pool.  The ring must be a contiguous
	  structure comprised of TRBs.  The TRBs must be 16 byte aligned,
	  however, the command ring segment needs 64-byte aligned segments
	  and our use of dma addresses in the trb_address_map radix tree needs
	  TRB_SEGMENT_SIZE alignment, so we pick the greater alignment need.
 See Table 46 and Note on Figure 55 
	 Linear stream context arrays don't have any boundary restrictions,
	  and only need to be 16-byte aligned.
	 Any stream context array bigger than MEDIUM_STREAM_ARRAY_SIZE
	  will be allocated with dma_alloc_coherent()
 Set up the command ring to have one segments for now. 
 Set the address in the Command Ring Control register 
 Setting command ring address to 0x%016llx", val_64);
	 Reserve one command ring TRB for disabling LPM.
	  Since the USB core grabs the shared usb_bus bandwidth mutex before
	  disabling LPM, we only need to reserve one TRB for all devices.
 Doorbell array is located at offset 0x%x"
 Set ir_set to interrupt register set 0 
	
	  Event ring setup: Allocate a normal ring, but also setup
	  the event ring segment table (ERST).  Section 4.9.3.
 Allocating event ring");
 set ERST count with the number of entries in the segment table 
 Write ERST size = %i to ir_set 0 (some bits preserved)",
 Set ERST entries to point to event ring.");
 set the segment table base address 
 Set ERST base address for ir_set 0 = 0x%llx",
 Set the event ring dequeue address 
	
	  XXX: Might need to set the Interrupter Moderation Register to
	  something other than the default (~1ms minimum between interrupts).
	  See section 5.5.1.2.
 Only the USB 2.0 completions will ever be used. 
	 Enable USB 3.0 device notifications for function remote wake, which
	  is necessary for allowing USB 3.0 devices to do remote wakeup from
	  U3 (device suspend).
 SPDX-License-Identifier: GPL-2.0
  Generic platform ohci driver
  Copyright 2007 Michael Buesch <m@bues.ch>
  Copyright 2011-2012 Hauke Mehrtens <hauke@hauke-m.de>
  Copyright 2014 Hans de Goede <hdegoede@redhat.com>
  Derived from the OCHI-SSB driver
  Derived from the OHCI-PCI driver
  Copyright 1999 Roman Weissgaerber
  Copyright 2000-2002 David Brownell
  Copyright 1999 Linus Torvalds
  Copyright 1999 Gregory P. Smith
	
	  Use reasonable defaults so platforms don't have to provide these
	  with DT probing on ARM.
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0
  MAX3421 Host Controller driver for USB.
  Author: David Mosberger-Tang <davidm@egauge.net>
  (C) Copyright 2014 David Mosberger-Tang <davidm@egauge.net>
  MAX3421 is a chip implementing a USB 2.0 Full-Low-Speed host
  controller on a SPI bus.
  Based on:
 	o MAX3421E datasheet
 		https:datasheets.maximintegrated.comendsMAX3421E.pdf
 	o MAX3421E Programming Guide
 		https:www.hdl.co.jpftpdatautl-001AN3785.pdf
 	o gadgetdummy_hcd.c
 		For USB HCD implementation.
 	o Arduino MAX3421 driver
 	     https:github.comfelisUSB_Host_Shield_2.0blobmasterUsb.cpp
  This file is licenced under the GPL v2.
  Important note on worst-case (full-speed) packet size constraints
  (See USB 2.0 Section 5.6.3 and following):
 	- control:	  64 bytes
 	- isochronous:	1023 bytes
 	- interrupt:	  64 bytes
 	- bulk:		  64 bytes
  Since the MAX3421 FIFO size is 64 bytes, we do not have to work about
  multi-FIFO writesreads for a single USB packet except for isochronous
  transfers.  We don't support isochronous transfers at this time, so we
  just assume that a USB packet always fits into a single FIFO buffer.
  NOTE: The June 2006 version of "MAX3421E Programming Guide"
  (AN3785) has conflicting info for the RCVDAVIRQ bit:
 	The description of RCVDAVIRQ says "The CPU must clear
 	this IRQ bit (by writing a 1 to it) before reading the
 	RCVFIFO data.
  However, the earlier section on "Programming BULK-IN
  Transfers" says  that:
 	After the CPU retrieves the data, it clears the
 	RCVDAVIRQ bit.
  The December 2006 version has been corrected and it consistently
  states the second behavior is the correct one.
  Synchronous SPI transactions sleep so we can't perform any such
  transactions while holding a spin-lock (andor while interrupts are
  masked).  To achieve this, all SPI transactions are issued from a
  single thread (max3421_spi_thread).
 11-bit counter that wraps around (USB 2.0 Section 8.3.3): 
 # of retries before error is reported 
  Max. # of times we're willing to retransmit a request immediately in
  resposne to a NAK.  Afterwards, we fall back on trying once a frame.
 in mA; use 8 for low-power port testing 
 Port-change mask: 
 waiting to send setup packet to ctrl pipe 
 waiting to xfer transfer_buffer 
 waiting to terminate control transfer 
 Bit numbers for max3421_hcd->todo: 
 lower 16 bits contain port status, upper 16 bits the change mask: 
 list of EP's with work 
	
	  The following are owned by spi_thread (may be accessed by
	  SPI-thread without acquiring the HCD lock:
 chip revision 
	
	  kmalloc'd buffers guaranteed to be in separate (DMA)
	  cache-lines:
	
	  URB we're currently processing.  Must not be reset to NULL
	  unless MAX3421E chip is idle:
 > 0 -> no errors, < 0: errno 
 frame # this ep was last active 
 packet needs retransmission 
 read register from MAX3421 
 write register to MAX3421 
 SPI commands: 
 bus-reset-resume 
 remote wakeup 
 receive FIFO data available 
 send buffer available 
 suspend operation done 
 peripheral connectdisconnect 
 frame generator 
 host transfer done 
 Return same error-codes as ohci.h:cc_to_error: 
  See https:www.beyondlogic.orgusbnutshellusb4.shtml#Control for a
  reasonable overview of how control transfers use the the INOUT
  tokens.
 bulk or interrupt 
 bulk or interrupt 
 handshake in 
 handshake out 
  Figure out the correct setting for the LOWSPEED and HUBPRE mode
  bits.  The HUBPRE bit needs to be set when MAX3421E operates at
  full speed, but it's talking to a low-speed device (i.e., through a
  hub).  Setting that bit ensures that every low-speed packet is
  preceded by a full-speed PRE PID.  Possible configurations:
  Hub speed:	Device speed:	=>	LOWSPEED bit:	HUBPRE bit:
 	FULL	FULL		=>	0		0
 	FULL	LOW		=>	1		1
 	LOW	LOW		=>	1		0
 	LOW	FULL		=>	1		0
  Caller must NOT hold HCD spinlock.
 setup new endpoint's toggle bits: 
	
	  Note: devnum for one and the same device can change during
	  address-assignment so it's best to just always load the
	  address whenever the end-point changedwas forced.
 work around rev 0x12 bug: 
		
		  We do not support isochronous transfers at this
		  time.
  Issue the next host-transfer command.
  Caller must NOT hold HCD spinlock.
 nothing to do 
		
		  IN transfers are terminated with HS_OUT token,
		  OUT transfers with HS_IN:
 issue the command and wait for host-xfer-done interrupt: 
  Find the next URB to process and start its execution.
  At this time, we do not anticipate ever connecting a USB hub to the
  MAX3421 chip, so at most USB device can be connected and we can use
  a simplistic scheduler: at the start of a frame, schedule all
  periodic transfers.  Once that is done, use the remainder of the
  frame to process non-periodic (bulk & control) transfers.
  Preconditions:
  o Caller must NOT hold HCD spinlock.
  o max3421_hcd->curr_urb MUST BE NULL.
  o MAX3421E chip must be idle.
 nothing to do 
				
				  Allow one control transaction per
				  frame per endpoint:
					
					  We already tried this EP
					  during this frame and got a
					  NAK or error; wait for next frame
					
					  We already processed this
					  end-point in the current
					  frame
 move current ep to tail: 
 restart (part of) a USB transaction: 
 start USB transaction: 
			
			  See USB 2.0 spec section 8.6.1
			  Initialization via SETUP Token:
  Check all endpoints for URBs that got unlinked.
  Caller must NOT hold HCD spinlock.
  Caller must NOT hold HCD spinlock.
  Caller must NOT hold HCD spinlock.
 ack the RCVDAV irq now that the FIFO has been read: 
	
	  If an OUT command results in any response other than OK
	  (i.e., error or NAK), we have to perform a dummy-write to
	  SNDBC so the FIFO gets switched back to us.  Otherwise, we
	  get out of sync with the SNDFIFO double buffer.
 this shouldn't happen 
 received wrong PID 
 SIE busy 
 bad val in HXFR 
 reserved 
 K-state instead of response 
 J-state instead of response 
		
		  packet experienced an error that we cannot recover
		  from; report error
 don't do anything (device will switch toggle) 
 flip the send toggle bit: 
 bad byte count 
 received PID is corrupted 
 packet error (stuff, EOP) 
 CRC error 
 device talked too long 
 retry the packet again in the next frame 
 Based on ohci.h cc_to_err[]: 
		
		  Device wasn't ready for data or has no data
		  available: retry the packet again.
  Caller must NOT hold HCD spinlock.
 read is complete, so we're done 
	
	  USB 2.0 Section 5.3.2 Pipes: packets must be full size
	  except for last one.
		
		  We do not support isochronous transfers at this
		  time...
			
			  remaining > 0 and received an
			  unexpected partial packet ->
			  error
 short read, but it's OK 
 not done 
  Caller must NOT hold HCD spinlock.
		
		  Some hardware needs a zero-size packet at the end
		  of a bulk-out transfer if the last transfer was a
		  full-sized packet (i.e., such hardware use <
		  max_packet as an indicator that the end of the
		  packet has been reached).
  Caller must NOT hold HCD spinlock.
			
			  We aren't really done - we still need to
			  terminate the control transfer:
  Caller must NOT hold HCD spinlock.
 SE0: disconnect 
		
		  Turn off SOFKAENAB bit to avoid getting interrupt
		  every milli-second:
 J=0,K=1: low-speed (in full-speed or vice versa) 
 J=1,K=0: full-speed (in full-speed or vice versa) 
 need to switch to the other speed: 
 turn on SOFKAENAB bit: 
 illegal 
 error or buffer full 
 DEBUG 
 Return zero if no work was performed, 1 otherwise.  
	
	  Read and ack pending interrupts (CPU must never
	  clear SNDBAV directly and RCVDAV must be cleared by
	  max3421_recv_data_available()!):
	
	  Now process interrupts that may affect HCD state
	  other than the end-points:
 BUSEVENT due to completion of Bus Reset 
 BUSEVENT due to completion of Bus Resume 
 error or buffer full 
 perform a chip reset and wait for OSCIRQ signal to appear: 
 clear reset: 
	
	  Turn on host mode, automatic generation of SOF packets, and
	  enable pull-down registers on DMDP:
 reset frame-number: 
 sample the state of the D+ and D- lines 
 enable frame, connection-detected, and bus-event interrupts: 
 enable interrupts: 
 save the old end-points toggles: 
 no locking: HCD (i.e., we) own toggles, don't we? 
 must be called without the HCD spinlock: 
 set full-duplex SPI mode, low-active interrupt pin: 
 full-duplex 
 low-active irq 
			
			  We'll be waiting for wakeups from the hard
			  interrupt handler, so now is a good time to
			  sync our hien with the chip:
 reset the HCD: 
 perform a USB bus reset: 
			
			  IOPINS1IOPINS2 do not auto-increment, so we can't
			  use spi_wr_buf().
 gets freed in max3421_endpoint_disable: 
 Since we added to the queue, restart scheduling: 
	
	  This will set urb->unlinked which in turn causes the entry
	  to be dropped at the next opportunity.
 remove myself from the ep_list: 
  Should return a non-zero value when any port is undergoing a resume
  transition while the root hub is suspended.
 a hub over-current condition exists 
	
	  See Table 11-13: Hub Descriptor in USB 2.0 spec.
 hub descriptor 
  Set the MAX3421E general-purpose output with number PIN_NUMBER to
  VALUE (0 or 1).  PIN_NUMBER may be in the range from 1-8.  For
  any other value, this function acts as a no-op.
 USB3 only 
 "protocol stall" on error 
 SPDX-License-Identifier: GPL-2.0
  MediaTek xHCI Host Controller Driver
  Copyright (c) 2015 MediaTek Inc.
  Author:
   Chunfeng Yun <chunfeng.yun@mediatek.com>
 ip_pw_ctrl0 register 
 ip_pw_ctrl1 register 
 ip_pw_ctrl2 register 
 ip_pw_sts1 register 
 ip_xhci_cap register 
 u3_ctrl_p register 
 u2_ctrl_p register 
 u2_phy_pll register 
 xHCI CSR 
 usb remote wakeup registers in syscon 
 mt8173 etc 
 cycle debounce 
 polarity for ip sleep 
 mt8183 
 cycle debounce 
 polarity 
 mt8192 
 mt2712 etc 
 specific revision 1.01 
 specific revision 1.2 
  MT8195 has 4 controllers, the controller1~3's default SOFITP interval
  is calculated from the frame counter clock 24M, but in fact, the clock
  is 48M, add workaround for it.
 power on host ip 
 power on and enable u3 ports except skipped ones 
 power on and enable all u2 ports except skipped ones 
	
	  wait for clocks to be stable, and clock domains reset to
	  be inactive after power on and enable ports
 power down u3 ports except skipped ones 
 power down all u2 ports except skipped ones 
 power down host ip 
 wait for host ip to sleep 
 reset whole ip 
	
	  device ip is default power-on in fact
	  power down device ip, otherwise ip-sleep will fail
 only clocks can be turn off for ip-sleep wakeup mode 
 Wakeup function is optional 
	
	  As of now platform drivers don't provide MSI support so we ensure
	  here that the generic code does not try to make a pci_dev from our
	  dev struct in order to setup MSI
	
	  MTK host controller gives a spurious successful event after a
	  short transfer. Ignore it.
	
	  MTK xHCI 0.96: PSA is 1 by default even if doesn't support stream,
	  and it's 3 when support it.
 called during probe() after chip reset completes 
 workaround only for mt8195 
 for backward compatibility 
 optional property, ignore the error if it does not exist 
	
	  USB 2.0 roothub is stored in the platform_device.
	  Swap it with mtk HCD.
 ippc register is optional 
	
	  imod_interval is the interrupt moderation value in nanoseconds.
	  The increment interval is 8 times as much as that defined in
	  the xHCI spec on MTK's controller.
 -EBUSY: let PM automatically reschedule another autosuspend 
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2002 David Brownell <dbrownell@users.sourceforge.net>
  [ Initialisation is based on Linus'  ]
  [ uhci code and gregs ohci fragments ]
  [ (C) Copyright 1999 Linus Torvalds  ]
  [ (C) Copyright 1999 Gregory P. Smith]
  PCI Bus Glue
  This file is licenced under the GPL.
-------------------------------------------------------------------------
 AMD 756, for most chips (early revs), corrupts register
  values on read ... so enable the vendor workaround.
 also erratum 10 (suspendresume issues) 
 Apple's OHCI driver has a lot of bizarre workarounds
  for this chip.  Evidently control and bulk lists
  can get confused.  (B&W G3 models, and ...)
 Check for NSC87560. We have to look at the bridge (fn1) to
  identify the USB (fn2). This quirk might apply to more or
  even all NSC stuff.
 Check for Compaq's ZFMicro chipset, which needs short
  delays before control or bulk queues get re-activated
  in finish_unlinks()
 Check for Toshiba SCC OHCI which has big endian registers
  and little endian in memory data structures
	 That chip is only present in the southbridge of some
	  cell based platforms which are supposed to select
	  CONFIG_USB_OHCI_BIG_ENDIAN_MMIO. We verify here if
	  that was the case though.
 Check for NEC chip and apply quirk for allegedly lost interrupts.
 SB800 needs pre-fetch fix 
 List of quirks for OHCI 
 Toshiba portege 4000 
	
	 After ohci setup RWC may not be set for add-in PCI cards.
	 This transfers PCI PM wakeup capabilities.
 handle any USB OHCI controller 
 The device in the ConneXT IO hub has no class reg 
 end: all zeroes  }
 pci driver glue; this is a "new style" PCI driver module 
 Entries for the PCI suspendresume callbacks are special 
 SPDX-License-Identifier: GPL-2.0
  xHCI host controller driver
  Copyright (C) 2013 Xenia Ragiadakou
  Author: Xenia Ragiadakou
  Email : burzalodowa@gmail.com
 SPDX-License-Identifier: GPL-2.0
  xHCI host controller driver
  Copyright (C) 2008 Intel Corp.
  Author: Sarah Sharp
  Some code borrowed from the Linux EHCI driver.
 SPDX-License-Identifier: GPL-2.0
  ISP116x HCD (Host Controller Driver) for USB.
  Derived from the SL811 HCD, rewritten for ISP116x.
  Copyright (C) 2005 Olav Kongas <ok@artecdesign.ee>
  Portions:
  Copyright (C) 2004 Psion Teklogix (for NetBook PRO)
  Copyright (C) 2004 David Brownell
  Periodic scheduling is based on Roman's OHCI code
  Copyright (C) 1999 Roman Weissgaerber
  The driver basically works. A number of people have used it with a range
  of devices.
  The driver passes all usbtests 1-14.
  Suspendingresuming of root hub via sysfs works. Remote wakeup works too.
  And suspendingresuming of platform device works too. Suspendresume
  via HCD operations vector is not implemented.
  Iso transfer support is not implemented. Adding this would include
  implementing recovery from the failure to service the processed ITL
  fifo ram in time, which will involve chip reset.
  TODO:
 + More testing of suspendresume.
  ISP116x chips require certain delays between accesses to its
  registers. The following timing options exist.
  1. Configure your memory controller (the best)
  2. Implement platform-specific delay function possibly
  combined with configuring the memory controller; see
  includelinuxusb-isp116x.h for more info. Some broken
  memory controllers line LH7A400 SMC need this. Also,
  uncomment for that to work the following
  USE_PLATFORM_DELAY macro.
  3. Use ndelay (easiest, poorest). For that, uncomment
  the following USE_NDELAY macro.
#define USE_NDELAY
#define DEBUG
#define VERBOSE
 Transfer descriptors. See dump_ptd() for printout format  
#define PTD_TRACE
 enqueuingfinishing log of urbs 
#define URB_TRACE
-----------------------------------------------------------------
  Write len bytes to fifo, pad till 32-bit boundary
 buffer is already in 'usb data order', which is LE. 
 When reading buffer as u16, we have to take care byte order 
 doesn't get mixed up 
 not aligned 
 aligned 
 Keep byte order ! 
  Read len bytes from fifo and then read till 32-bit boundary.
 buffer is already in 'usb data order', which is LE. 
 When reading buffer as u16, we have to take care byte order 
 doesn't get mixed up 
 not aligned 
 aligned 
 Keep byte order! 
  Write ptd's and data for scheduled transfers into
  the fifo ram. Fifo must be empty and ready.
 Skip writing data for last IN PTD 
  Read the processed ptd's and data from fifo ram back to
  URBs' buffers. Fifo must be full and done
 Skip reading data for last Setup or Out PTD 
---------------------------------------------------------------
  Set up PTD's.
  Take done or failed requests out of schedule. Give back
  processed urbs.
 take idle endpoints out of the schedule 
 async deschedule 
 periodic deschedule 
 switch irq type? 
  Analyze transfer results, handle partial transfers and errors
		 Data underrun is special. For allowed underrun
		   we clear the error and continue as normal. For
		   forbidden underrun we finish the DATA stage
		   immediately while for control transfer,
		 According to usb spec, zero-length Int transfer signals
		   finishing of the urb. Hey, does this apply only
		 Relax after previously failed, but later succeeded
		 Take into account idiosyncracies of the isp116x chip
 All data for this URB is transferred, let's finish 
  Scan transfer lists, schedule transfers, send data off
  to chip.
 FIFO not empty? 
 Schedule int transfers 
			 Bring all int transfers for this frame
 Schedule controlbulk transfers 
 Find current free length ... 
 ... then limit it to configured max size ... 
			 ... and finally cut to the multiple of MaxPacketSize,
 Avoid starving of endpoints 
  Finish the processed transfers
 Fifo not ready? 
			 IRQ's are off, we do no DMA,
			 When root hub or any of its ports is going
			   to come out of suspend, it may take more
-----------------------------------------------------------------
 usb 1.1 says max 90% of a frame is available for periodic transfers.
  this driver doesn't promise that much since it's got to handle an
  IRQ per packet; irq handling latencies also use up that time.
 out of 1000 us 
	 search for the least loaded schedule branch of that period
 NB! ALL the code above this point runs with isp116x->lock
   held, irqs off
-----------------------------------------------------------------
 avoid all allocations within spinlocks: request or endpoint 
			
			   With INT URBs submitted, the driver works with SOF
			   interrupt enabled and ATL interrupt disabled. After
			   the PTDs are written to fifo ram, the chip starts
			   fifo processing and usb transfers after the next
			   SOF and continues until the transfers are finished
			   (succeeded or failed) or the frame ends. Therefore,
			   the transfers occur only in every second frame,
			   while fifo readingwriting and data processing
 maybe put endpoint into schedule 
 urb submitted for already existing endpoint 
		 sort each schedule branch by period (slow before fast)
		   to share the faster parts of the tree without needing
 switch over to SOFint 
   Dequeue URBs.
 In front of queue? 
 active? 
 assume we'd just wait for the irq 
  Adapted from ohci-hub.c. Currently we don't support autosuspend.
	 Report no status change now, if we are scheduled to be
 Power switching, device type, overcurrent. 
 ports removable, and legacy PortPwrCtrlMask 
 Perform reset of a given port.
   It would be great to just start the reset and let the
   USB core to clear the reset in due time. However,
   root hub ports should be reset for at least 50 ms, while
   our chip stays in reset for about 10 ms. I.e., we must
   repeatedly reset it ourself here.
	 Root hub reset should be 50 ms, but some devices
 spin until any current reset finishes 
 Don't reset a disconnected port 
 Reset lasts 10ms (claims datasheet) 
 Adapted from ohci-hub.c 
 "protocol stall" on error 
-----------------------------------------------------------------
 CONFIG_DEBUG_FS 
-----------------------------------------------------------------
  Software reset - can be called from any contect.
 It usually resets within 1 ms 
 ms  ;
		 After sw_reset the clock won't report to be ready, if
	 Switch off ports' power, some devices don't come up
  Configure the chip. The chip must be successfully reset by now.
 clear interrupt status and disable all interrupt sources 
 To be removed in future 
 ----- HW conf 
 Remote wakeup won't work without working clock 
 ----- Root hub conf 
	 AN10003_1.pdf recommends RH_A_NPS (no power switching) to
	   be always set. Yet, instead, we request individual port
 Report overcurrent per port 
 Set up interrupts 
 | HCuPINT_SUSP; 
 Go operational 
 Disable ports to avoid race in device enumeration 
 Wait for usb transfers to finish 
 Wait for devices to suspend 
 HCCONTROL_USB_SUSPEND 
		 HCCONTROL_USB_RESET: this may happen, when during
 force global, not selective, resume 
 Go operational 
----------------------------------------------------------------
 allocate and initialize hcd 
 this rsrc_start is bogus 
  Suspend of platform device
  Resume platform device
 work with hotplug and coldplug 
 SPDX-License-Identifier: GPL-2.0+
  Setup platform devices needed by the Freescale multi-port host
  andor dual-role USB controller modules based on the description
  in flat device tree.
 controller mode 
 drivers to instantiate for this mode 
 operating mode 
 mode not specified, use host 
	
	  returns 1 for usb controller version 1.6
	  returns 2 for usb controller version 2.2
	  returns 3 for usb controller version 2.4
	  returns 4 for usb controller version 2.5
	  returns 0 otherwise
 for previous controller versions 
 for previous controller versions 
 setup mode selected in the device tree 
 Activate Erratum by reading property in device tree 
	
	  Determine whether phy_clk_valid needs to be checked
	  by reading property in device tree
 NOTE: big endian 
 Wakeup int clear 
 ULPI if select (usb0 only)
 Inv. Port Power Polarity 
 Inv. Power Fault Polarity 
 Wakeup on ULPI event 
 Wakeup interrupt enable 
 NOTE: big endian 
 On-chip UTMI PHY enable 
 Bit Stuff Enable High 
 Bit Stuff Enable 
 Line State Filter Enable 
 PHY oscillator enable 
 CONFIG_PPC_MPC512x 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2011 Marvell International Ltd. All rights reserved.
  Author: Chao Xie <chao.xie@marvell.com>
         Neil Zhang <zhangwm@marvell.com>
 registers 
 Which mode does this ehci running OTGHost ? 
 otg will enable clock before use as host 
 These "reserved" bits actually enable HSIC mode. 
 SPDX-License-Identifier: GPL-2.0
  xhci-debugfs.c - xHCI debugfs interface
  Copyright (C) 2017 Intel Corporation
  Author: Lu Baolu <baolu.lu@linux.intel.com>
	
	  The allocation and free of regset are executed in order.
	  We needn't a lock here.
 If CTC is clear, compliance is enabled by default 
 compliance mode can only be enabled on ports in RxDetect 
 MaxPStreams + 1 <= 16 
 Decimal number 
 Show trb ring of stream ID 1 by default 
 SPDX-License-Identifier: GPL-2.0
  xHCI host controller driver
  Copyright (C) 2008 Intel Corp.
  Author: Sarah Sharp
  Some code borrowed from the Linux EHCI driver.
 Some 0.95 hardware can't handle the chain bit on a Link TRB being cleared 
  xhci_handshake - spin reading hc until handshake completes or fails
  @ptr: address of hc register to be read
  @mask: bits to look at in result of read
  @done: value of those bits when handshake succeeds
  @usec: timeout in microseconds
  Returns negative errno, or zero on success
  Success happens when the "mask" bits have the specified value (hardware
  handshake done).  There are two failure modes:  "usec" have passed (major
  hardware flakeout), or the register reads as all-ones (hardware removed).
 card removed 
  Disable interrupts and begin the xHCI halting process.
  Force HC into halt state.
  Disable any IRQs and clear the runstop bit.
  HC will complete any current and actively pipelined transactions, and
  should halt within 16 ms of the runstop bit being cleared.
  Read HC Halted bit in the status register to see when the HC is finished.
 Halt the HC");
  Set the run bit and wait for the host to be running.
 Turn on HC, cmd = 0x%x.",
	
	  Wait for the HCHalted Status bit to be 0 to indicate the host is
	  running.
 clear state flags. Including dying, halted or removing 
  Reset a halted HC.
  This resets pipelines, timers, counters, state machines, etc.
  Transactions will be terminated immediately, and operational registers
  will be set to their defaults.
 Reset the HC");
	 Existing Intel xHCI controllers require a delay of 1 mS,
	  after setting the CMD_RESET bit, and before accessing any
	  HC registers. This allows the HC to complete the
	  reset operation and be ready for HC register access.
	  Without this delay, the subsequent HC register access,
	  may result in a system hang very rarely.
	
	  xHCI cannot write to any doorbells or operational registers other
	  than status until the "Controller Not Ready" flag is cleared.
	
	  Some Renesas controllers get into a weird state if they are
	  reset while programmed with 64bit addresses (they will preserve
	  the top half of the address in internal, non visible
	  registers). You end up with half the address coming from the
	  kernel, and the other half coming from the firmware. Also,
	  changing the programming leads to extra accesses even if the
	  controller is supposed to be halted. The controller ends up with
	  a fatal fault, and is then ripe for being properly reset.
	 
	  Special care is taken to only apply this if the device is behind
	  an iommu. Doing anything when there is no iommu is definitely
	  unsafe...
 Clear HSEIE so that faults do not get signaled 
 Clear HSE (aka FATAL) 
 Now zero the registers, and brace for impact 
 Wait for the fault to appear. It will be cleared on reset 
  Set up MSI
	
	  TODO:Check with MSI Soc for sysdev
  Set up MSI-X
	
	  calculate number of msi-x vectors supported.
	  - HCS_MAX_INTRS: the max number of interrupts the host can handle,
	    with max number of interrupters based on the xhci HCSPARAMS1.
	  - num_online_cpus: maximum msi-x vectors per CPUs core.
	    Add additional 1 vector to ensure always available interrupt.
 Free any IRQs and disable MSI-X 
 return if using legacy interrupt 
 The xhci platform device has set up IRQs through usb_add_hcd. 
	
	  Some Fresco Logic host controllers advertise MSI, but fail to
	  generate interrupts.  Don't even try to enable MSI.
 unregister the legacy interrupt 
 fall back to msi
 fall back to legacy interrupt
			
			  Compliance Mode Detected. Letting USB Core
			  handle the Warm Reset
  Quirk to work around issue generated by the SN65LVPE502CP USB3.0 re-driver
  that causes ports behind that hardware to enter compliance mode sometimes.
  The quirk creates a timer that polls every 2 seconds the link state of
  each host controller's port and recovers it by issuing a Warm reset
  if Compliance mode is detected, otherwise the port will become "dead" (no
  device connections or disconnections will be detected anymore). Becasue no
  status event is generated when entering compliance mode (per xhci spec),
  this quirk is needed on systems that have the failing hardware installed.
  This function identifies the systems that have installed the SN65LVPE502CP
  USB3.0 re-driver and that need the Compliance Mode Quirk.
  Systems:
  Vendor: Hewlett-Packard -> System Models: Z420, Z620 and Z820
  Initialize memory for HCD and xHC (one-time init).
  Program the PAGESIZE register, initialize the device context array, create
  device contexts (?), set up a command ring segment (or two?), create event
  ring (one for now).
 Initializing Compliance Mode Recovery Data If Needed 
-------------------------------------------------------------------------
  Start the HC after it was halted.
  This function is called by the USB core when the HC driver is added.
  Its opposite is xhci_stop().
  xhci_init() must be called once before this function can be called.
  Reset the HC, enable device slot contexts, program DCBAAP, and
  set command ring pointer and event ring pointer.
  Setup MSI-X vectors and enable interrupts.
	 Start the xHCI host controller running only after the USB 2.0 roothub
	  is setup.
 Set the interrupt modulation register");
 Set the HCD state before we enable the irqs 
 Enable interrupts, cmd = 0x%x.", temp);
 Enabling event ring interrupter %p by writing 0x%x to irq_pending",
  Stop xHCI driver.
  This function is called by the USB core when the HC driver is removed.
  Its opposite is xhci_run().
  Disable device contexts, disable IRQs, and quiesce the HC.
  Reset the HC, finish any completed transactions, and cleanup memory.
 Only halt host and free memory after both hcds are removed 
 Deleting Compliance Mode Recovery Timer 
 Disabling event ring interrupts");
  Shutdown HC (not bus-specific)
  This is called when the machine is rebooting or halting.  We assume that the
  machine will be powered off, and the HC's internal state will be reset.
  Don't bother to free memory.
  This will only ever be called with the main usb_hcd (the USB3 roothub).
 Workaround for spurious wakeups at shutdown with HSW 
 step 2: initialize command ring buffer 
 Setting command ring address to 0x%llx",
  The whole command ring must be cleared to zero when we suspend the host.
  The host doesn't save the command ring pointer in the suspend well, so we
  need to re-program it on resume.  Unfortunately, the pointer must be 64-byte
  aligned, because of the reserved bits in the command ring dequeue pointer
  register.  Therefore, we can't just set the dequeue pointer back in the
  middle of the ring (TRBs are 16-byte aligned).
 Reset the software enqueue and dequeue pointers 
	
	  Ring is now zeroed, so the HW should look for change of ownership
	  when the cycle bit is set to 1.
	
	  Reset the hardware dequeue pointer.
	  Yes, this will need to be re-written after resume, but we're paranoid
	  and want to make sure the hardware doesn't access bogus memory
	  because, say, the BIOS or an SMI started the host without changing
	  the command ring pointers.
  Disable port wake bits if do_wakeup is not set.
  Also clear a possible internal port wake state left hanging for ports that
  detected termination but never successfully enumerated (trained to 0U).
  Internal wake causes immediate xHCI wake after suspend. PORT_CSC write done
  at enumeration clears this wake, force one here as well for unconnected ports
 clear wake bits if do_wake is not set 
 Don't touch csc bit if connected or connect change is set 
	
	  Checking STS_EINT is not enough as there is a lag between a change
	  bit being set and the Port Status Change Event that it generated
	  being written to the Event Ring. See note in xhci 1.1 section 4.19.2.
  Stop HC (not bus-specific)
  This is called when the machine transition into S3S4 mode.
 Clear root port wake on bits if wakeup not allowed. 
 Don't poll the roothubs on bus suspend. 
 step 1: stop endpoint 
 skipped assuming that port suspend has done 
 step 2: clear RunStop bit 
 Some chips from Fresco Logic need an extraordinary delay 
 step 3: save registers 
 step 4: set CSS flag 
	
	  AMD SNPS xHC 3.0 occasionally does not clear the
	  SSS bit of USBSTS and when driver tries to poll
	  to see if the xHC clears BIT(8) which never happens
	  and driver assumes that controller is not responding
	  and times out. To workaround this, its good to check
	  if SRE and HCE bits are not set (as per xhci
	  Section 5.4.2) and bypass the timeout.
	
	  Deleting Compliance Mode Recovery Timer because the xHCI Host
	  is about to be suspended.
 step 5: remove core well power 
 synchronize irq when using MSI-X 
  start xHC (not bus-specific)
  This is called when the machine transition from S3S4 mode.
	 Wait a bit if either of the roothubs need to settle from the
	  transition into bus suspend.
		
		  Some controllers might lose power during suspend, so wait
		  for controller not ready bit to clear, just as in xHC init.
 step 1: restore register 
 step 2: initialize command ring buffer 
 step 3: restore state and start state
 step 3: set CRS flag 
		
		  Some controllers take up to 55+ ms to complete the controller
		  restore so setting the timeout to 100ms. Xhci specification
		  doesn't mention any timeout value.
 If restore operation fails, re-initialize the HC during resume 
 Let the USB core know _both_ roothubs lost power. 
 Disabling event ring interrupts\n");
		 USB core calls the PCI reinit and start functions twice:
		  first with the primary HCD, and then with the secondary HCD.
		  If we don't do the same, the host will never be started.
 step 4: set RunStop bit 
	 step 5: walk topology and initialize portsc,
	  portpmsc and portli
 this is done in bus_resume 
	 step 6: restart each of the previously
	  Running endpoints by ringing their doorbells
		
		  Resume roothubs only if there are pending events.
		  USB 3 devices resend U3 LFPS wake after a 100ms delay if
		  the first wake signalling failed, give it that chance.
	
	  If system is subject to the Quirk, Compliance Mode Timer needs to
	  be re-initialized Always after a system resume. Ports are subject
	  to suffer the Compliance Mode issue again. It doesn't matter if
	  ports have entered previously to U0 before system's suspension.
 Re-enable port polling. 
 CONFIG_PM 
-------------------------------------------------------------------------
  Bypass the DMA mapping if URB is suitable for Immediate Transfer (IDT),
  we'll copy the actual data into the TRB address register. This is limited to
  transfers up to 8 bytes on output endpoints of any kind with wMaxPacketSize
  >= 8 bytes. If suitable for IDT only one Transfer TRB per TD is allowed.
  xhci_get_endpoint_index - Used for passing endpoint bitmasks between the core and
  HCDs.  Find the index for an endpoint given its descriptor.  Use the return
  value to right shift 1 for the bitmask.
  Index  = (epnum  2) + direction - 1,
  where direction = 0 for OUT, 1 for IN.
  For control endpoints, the IN index is used (OUT index is unused), so
  index = (epnum  2) + direction - 1 = (epnum  2) + 1 - 1 = (epnum  2)
 The reverse operation to xhci_get_endpoint_index. Calculate the USB endpoint
  address from the XHCI endpoint index.
 Find the flag for this endpoint (for use in the control context).  Use the
  endpoint index to create a bitmask.  The slot context is bit 0, endpoint 0 is
  bit 1, etc.
 Compute the last valid endpoint context index.  Basically, this is the
  endpoint index plus one.  For slot contexts with more than valid endpoint,
  we find the most significant bit set in the added contexts flags.
  e.g. ep 1 IN (with epnum 0x81) => added_ctxs = 0b1000
  fls(0b1000) = 4, but the endpoint context index is 3, so subtract one.
 Returns 1 if the arguments are OK;
  returns 0 this is a root hub; returns -EINVAL for NULL pointers.
  Full speed devices may have a max packet size greater than 8 bytes, but the
  USB core doesn't know that until it reads the first 8 bytes of the
  descriptor.  If the usb_device's max packet size changes after that point,
  we need to issue an evaluate context command and wait on it.
 Set up the input context flags for the command 
		 FIXME: This won't work if a non-default control endpoint
		  changes max packet sizes.
 Set up the modified control endpoint 0 
 must clear 
		 Clean up the input context for later use by bandwidth
		  functions.
  non-error returns are a promise to giveback() the urb later
  we drop ownership so next owner (or urb unlink) can get it
		 Check to see if the max packet size for the default control
		  endpoint changed during FS device enumeration
  Remove the URB's TD from the endpoint ring.  This may cause the HC to stop
  USB transfers, potentially stopping in the middle of a TRB buffer.  The HC
  should pick up where it left off in the TD, unless a Set Transfer Ring
  Dequeue Pointer is issued.
  The TRBs that make up the buffers for the canceled URB will be "removed" from
  the ring.  Since the ring is a contiguous structure, they can't be physically
  removed.  Instead, there are two options:
   1) If the HC is in the middle of processing the URB to be canceled, we
      simply move the ring's dequeue pointer past those TRBs using the Set
      Transfer Ring Dequeue Pointer command.  This will be the common case,
      when drivers timeout on the last submitted URB and attempt to cancel.
   2) If the HC is in the middle of a different TD, we turn the TRBs into a
      series of 1-TRB transfer no-op TDs.  (No-ops shouldn't be chained.)  The
      HC will need to invalidate the any TRBs it has cached after the stop
      endpoint command, as noted in the xHCI 0.95 errata.
   3) The TD may have completed by the time the Stop Endpoint Command
      completes, so software needs to handle that case too.
  This function should protect against the TD enqueueing code ringing the
  doorbell while this code is waiting for a Stop Endpoint command to complete.
  It also needs to account for multiple cancellations on happening at the same
  time for the same endpoint.
  Note that this function can be called in any context, or so says
  usb_hcd_unlink_urb()
 Make sure the URB hasn't completed or been unlinked already 
 give back URB now if we can't queue it for cancel 
 If xHC is dead take it down and return ALL URBs in xhci_hc_died() 
	
	  check ring is not re-allocated since URB was enqueued. If it is, then
	  make sure none of the ring related pointers in this URB private data
	  are touched, such as td_list, otherwise we overwrite freed data
 TD can already be on cancelled list if ep halted on it 
	 Queue a stop endpoint command, but only if this is
	  the first cancellation to be handled.
 Drop an endpoint from a new bandwidth configuration for this device.
  Only one call to this function is allowed per endpoint before
  check_bandwidth() or reset_bandwidth() must be called.
  A call to xhci_drop_endpoint() followed by a call to xhci_add_endpoint() will
  add the endpoint to the schedule with possibly new parameters denoted by a
  different endpoint descriptor in usb_host_endpoint.
  A call to xhci_add_endpoint() followed by a call to xhci_drop_endpoint() is
  not allowed.
  The USB core will not allow URBs to be queued to an endpoint that is being
  disabled, so there's no need for mutual exclusion to protect
  the xhci->devs[slot_id] structure.
	 If the HC already knows the endpoint is disabled,
	  or the HCD has noted it is disabled, ignore this request
 Do not warn when called after a usb_device_reset 
 Add an endpoint to a new possible bandwidth configuration for this device.
  Only one call to this function is allowed per endpoint before
  check_bandwidth() or reset_bandwidth() must be called.
  A call to xhci_drop_endpoint() followed by a call to xhci_add_endpoint() will
  add the endpoint to the schedule with possibly new parameters denoted by a
  different endpoint descriptor in usb_host_endpoint.
  A call to xhci_add_endpoint() followed by a call to xhci_drop_endpoint() is
  not allowed.
  The USB core will not allow URBs to be queued to an endpoint until the
  configuration or alt setting is installed in the device, so there's no need
  for mutual exclusion to protect the xhci->devs[slot_id] structure.
 So we won't queue a reset ep command for a root hub 
		 FIXME when we have to issue an evaluate endpoint command to
		  deal with ep0 max packet size changing once we get the
		  descriptors
	 If this endpoint is already in use, and the upper layers are trying
	  to add it again without dropping it, reject the addition.
	 If the HCD has already noted the endpoint is enabled,
	  ignore this request.
	
	  Configuration and alternate setting changes must be done in
	  process context, not interrupt context (or so documenation
	  for usb_set_interface() and usb_set_configuration() claim).
	 If xhci_endpoint_disable() was called for this endpoint, but the
	  xHC hasn't been notified yet through the check_bandwidth() call,
	  this re-adds a new state for the endpoint from the new endpoint
	  descriptors.  We must drop and re-add this endpoint, so we leave the
	  drop flags alone.
 Store the usb_device pointer for later use 
	 When a device's add flag and drop flag are zero, any subsequent
	  configure endpoint command will leave that endpoint's state
	  untouched.  Make sure we don't leave any old state in the input
	  endpoint contexts.
 Endpoint 0 is always valid 
 FIXME: can we allocate more resources for the HC? 
 FIXME: can we go back to the old state? 
 the HCD set up something wrong 
 Max Exit Latency too large error 
	 Ignore the slot flag (bit 0), and the default control endpoint flag
	  (bit 1).  The default control endpoint is added during the Address
	  Device command and is never removed until the slot is disabled.
	 Use hweight32 to count the number of ones in the add flags, or
	  number of endpoints added.  Don't count endpoints that are changed
	  (both added and dropped).
  We need to reserve the new number of endpoints before the configure endpoint
  command completes.  We can't subtract the dropped endpoints from the number
  of active endpoints until the command completes because we can oversubscribe
  the host in this case:
   - the first configure endpoint command drops more endpoints than it adds
   - a second configure endpoint command that adds more endpoints is queued
   - the first configure endpoint command fails, so the config is unchanged
   - the second command may succeed, even though there isn't enough resources
  Must be called with xhci->lock held.
  The configure endpoint was failed by the xHC for some other reason, so we
  need to revert the resources that failed configuration would have used.
  Must be called with xhci->lock held.
  Now that the command has completed, clean up the active endpoint count by
  subtracting out the endpoints that were dropped (but not changed).
  Must be called with xhci->lock held.
 Should never happen 
 If we are changing a LSFS device under a HS hub,
  make sure (if we are activating a new TT) that the HS bus has enough
  bandwidth for this new TT.
 Find the bandwidth table for the root port this TT is attached to. 
	 If this TT already had active endpoints, the bandwidth for this TT
	  has already been added.  Removing all periodic endpoints (and thus
	  making the TT enactive) will only decrease the bandwidth used.
	 Not sure why we would have no new active endpoints...
	 
	  Maybe because of an Evaluate Context change for a hub update or a
	  control endpoint 0 max packet size change?
	  FIXME: skip the bandwidth calculation in that case.
  This algorithm is a very conservative estimate of the worst-case scheduling
  scenario for any one interval.  The hardware dynamically schedules the
  packets, so we can't tell which microframe could be the limiting factor in
  the bandwidth scheduling.  This only takes into account periodic endpoints.
  Obviously, we can't solve an NP complete problem to find the minimum worst
  case scenario.  Instead, we come up with an estimate that is no less than
  the worst case bandwidth used for any one microframe, but may be an
  over-estimate.
  We walk the requirements for each endpoint by interval, starting with the
  smallest interval, and place packets in the schedule where there is only one
  possible way to schedule packets for that interval.  In order to simplify
  this algorithm, we record the largest max packet size for each interval, and
  assume all packets will be that size.
  For interval 0, we obviously must schedule all packets for each interval.
  The bandwidth for interval 0 is just the amount of data to be transmitted
  (the sum of all max ESIT payload sizes, plus any overhead per packet times
  the number of packets).
  For interval 1, we have two possible microframes to schedule those packets
  in.  For this algorithm, if we can schedule the same number of packets for
  each possible scheduling opportunity (each microframe), we will do so.  The
  remaining number of packets will be saved to be transmitted in the gaps in
  the next interval's scheduling sequence.
  As we move those remaining packets to be scheduled with interval 2 packets,
  we have to double the number of remaining packets to transmit.  This is
  because the intervals are actually powers of 2, and we would be transmitting
  the previous interval's packets twice in this interval.  We also have to be
  sure that when we look at the largest max packet size for this interval, we
  also look at the largest max packet size for the remaining packets and take
  the greater of the two.
  The algorithm continues to evenly distribute packets in each scheduling
  opportunity, and push the remaining packets out, until we get to the last
  interval.  Then those packets and their associated overhead are just added
  to the bandwidth used.
 Convert percent of bus BW reserved to blocks reserved 
	 We need to translate the max packet size and max ESIT payloads into
	  the units the hardware uses.
	 If we are manipulating a LSFS device under a HS hub, double check
	  that the HS bus has enough bandwidth if we are activing a new TT.
	 Add in how much bandwidth will be used for interval zero, or the
	  rounded max ESIT payload + number of packets  largest overhead.
		
		  How many packets could we transmit in this interval?
		  If packets didn't fit in the previous interval, we will need
		  to transmit that many packets twice within this interval.
		 Find the largest max packet size of this or the previous
		  interval.
 Convert to blocks, rounding up 
 Use the larger overhead of this or the previous interval. 
		 How many packets can we evenly distribute across
		  (1 << (i + 1)) possible scheduling opportunities?
 Add in the bandwidth used for those scheduled packets 
 How many packets do we have remaining to transmit? 
 What largest max packet size should those packets have? 
		 If we've transmitted all packets, don't carry over the
		  largest packet size.
			 Otherwise if we do have remaining packets, and we've
			  scheduled some packets in this interval, take the
			  largest max packet size from endpoints with this
			  interval.
		 Otherwise carry over packet_size and overhead from the last
		  time we had a remainder.
	
	  Ok, we know we have some packets left over after even-handedly
	  scheduling interval 15.  We don't know which microframes they will
	  fit into, so we over-schedule and say they will be scheduled every
	  microframe.
		 OK, we're manipulating a HS device attached to a
		  root port bandwidth domain.  Include the number of active TTs
		  in the bandwidth used.
	 SuperSpeed endpoints never get added to intervals in the table, so
	  this check is only valid for HSFSLS devices.
	 For LSFS devices, we need to translate the interval expressed in
	  microframes to frames.
		 Should never happen because only LSFSHS endpoints will get
		  added to the endpoint list.
	 For LSFS devices, we need to translate the interval expressed in
	  microframes to frames.
		 Should never happen because only LSFSHS endpoints will get
		  added to the endpoint list.
 Insert the endpoint into the list, largest max packet size first. 
 Add the new ep before the smaller endpoint 
 Add the new endpoint at the end of the list. 
 Make a copy of the BW info in case we need to revert this 
		 Drop the endpoint from the interval table if the endpoint is
		  being dropped or changed.
 Overwrite the information stored in the endpoints' bw_info 
 Add any changed or added endpoints to the interval table 
		 Ok, this fits in the bandwidth we have.
		  Update the number of active TTs.
 We don't have enough bandwidth for this, revert the stored info. 
		 Drop the new copies of any added or changed endpoints from
		  the interval table.
 Revert the endpoint back to its old information 
 Add any changed or dropped endpoints back into the table 
 Issue a configure endpoint command or evaluate context command
  and wait for it to finish.
 Wait for the configure endpoint command to complete 
		 If the command failed, remove the reserved resources.
		  Otherwise, clean up the estimate to include dropped eps.
 Called after one or more calls to xhci_add_endpoint() or
  xhci_drop_endpoint().  If this call fails, the USB core is expected
  to call xhci_reset_bandwidth().
  Since we are in the middle of changing either configuration or
  installing a new alt setting, the USB core won't allow URBs to be
  enqueued for any endpoint on the old config or interface.  Nothing
  else should be touching the xhci->devs[slot_id] structure, so we
  don't need to take the xhci->lock for manipulating that.
 See section 4.6.6 - A0 = 1; A1 = D0 = D1 = 0 
 Don't issue the command if there's no endpoints to update. 
 Fix up Context Entries field. Minimum value is EP0 == BIT(1). 
 Callee should call reset_bandwidth() 
 Free any rings that were dropped, but not changed. 
	
	  Install any rings for completely new endpoints or changed endpoints,
	  and free any old rings from changed endpoints.
		 Only free the old ring if it exists.
		  It may not if this is the first add of an endpoint.
 Free any rings allocated for added endpoints 
 wait for hub_tt_work to finish clearing hub TT 
  Called after usb core issues a clear halt control message.
  The host side of the halt should already be cleared by a reset endpoint
  command issued when the STALL event was received.
  The reset endpoint command may only be issued to endpoints in the halted
  state. For software that wishes to reset the data toggle or sequence number
  of an endpoint that isn't in the halted state this function will issue a
  configure endpoint command with the Drop and Add bits set for the target
  endpoint. Refer to the additional note in xhci spcification section 4.6.8.
	
	  vdev may be lost due to xHC restore error and re-initialization
	  during S3S4 resume. A new vdev will be allocated later by
	  xhci_discover_or_reset_device()
 Bail out if toggle is already being cleared by a endpoint reset 
 Only interrupt and bulk ep's use data toggle, USB2 spec 5.5.4-> 
 block queuing new trbs and ringing ep doorbell 
	
	  Make sure endpoint ring is empty before resetting the toggleseq.
	  Driver is required to synchronously cancel all transfer request.
	  Stop the endpoint to force xHC to update the output context
 config ep command clears toggle if add and drop ep flags are set 
 The stream context array size must be a power of two 
	
	  Find out how many primary stream array entries the host controller
	  supports.  Later we may use secondary stream arrays (similar to 2nd
	  level page entries), but that's an optional feature for xHCI host
	  controllers. xHCs must support at least 4 stream IDs.
 Returns an error code if one of the endpoint already has streams.
  This does not change any data structures, it only checks and gathers
  information.
 Are streams already being freed for the endpoint? 
 Are there actually any streams to free? 
  The USB device drivers use this function (through the HCD interface in USB
  core) to prepare a set of bulk endpoints to use streams.  Streams are used to
  coordinate mass storage command queueing across multiple endpoints (basically
  a stream ID == a task ID).
  Setting up streams involves allocating the same size stream context array
  for each endpoint and issuing a configure endpoint command for all endpoints.
  Don't allow the call to succeed if one endpoint only supports one stream
  (which means it doesn't support streams at all).
  Drivers may get less stream IDs than they asked for, if the host controller
  hardware or endpoints claim they can't support the number of requested
  stream IDs.
	 Add one to the number of streams requested to account for
	  stream 0 that is reserved for xHCI usage.
 MaxPSASize value 0 (2 streams) means streams are not supported 
	 Check to make sure all endpoints are not already configured for
	  streams.  While we're at it, find the maximum number of streams that
	  all the endpoints will support and check for duplicate endpoints.
	 Mark each endpoint as being in transition, so
	  xhci_urb_enqueue() will reject all URBs.
	 Setup internal data structures and allocate HW data structures for
	  streams (but don't install the HW structures in the input context
	  until we're sure all memory allocation succeeded).
		 Set maxPstreams in endpoint context and update deq ptr to
		  point to stream context array. FIXME
 Set up the input context for a configure endpoint command. 
	 Tell the HW to drop its old copy of the endpoint context info
	  and add the updated copy from the input context.
 Issue and wait for the configure endpoint command 
	 xHC rejected the configure endpoint command for some reason, so we
	  leave the old ring intact and free our internal streams data
	  structure.
 Subtract 1 for stream 0, which drivers can't use 
 If it didn't work, free the streams! 
		 FIXME Unset maxPstreams in endpoint context and
		  update deq ptr to point to normal string ring.
 Transition the endpoint from using streams to being a "normal" endpoint
  without streams.
  Modify the endpoint context state, submit a configure endpoint command,
  and free all endpoint rings for streams if that completes successfully.
 Set up a configure endpoint command to remove the streams rings 
	 Use the xhci_command structure from the first endpoint.  We may have
	  allocated too many, but the driver may call xhci_free_streams() for
	  each endpoint it grouped into one call to xhci_alloc_streams().
	 Issue and wait for the configure endpoint command,
	  which must succeed.
	 xHC rejected the configure endpoint command for some reason, so we
	  leave the streams rings intact.
		 FIXME Unset maxPstreams in endpoint context and
		  update deq ptr to point to normal string ring.
  Deletes endpoint resources for endpoints that were active before a Reset
  Device command, or a Disable Slot command.  The Reset Device command leaves
  the control endpoint intact, whereas the Disable Slot command deletes it.
  Must be called with xhci->lock held.
  This submits a Reset Device Command, which will set the device state to 0,
  set the device address to 0, and disable all the endpoints except the default
  control endpoint.  The USB core should come back and call
  xhci_address_device(), and then re-set up the configuration.  If this is
  called because of a usb_reset_and_verify_device(), then the old alternate
  settings will be re-installed through the normal bandwidth allocation
  functions.
  Wait for the Reset Device command to finish.  Remove all structures
  associated with the endpoints that were disabled.  Clear the input device
  structure? Reset the control endpoint 0 max packet size?
  If the virt_dev to be reset does not exist or does not match the udev,
  it means the device is lost, possibly due to the xHC restore error and
  re-initialization during S3S4. In this case, call xhci_alloc_dev() to
  re-allocate the device.
		 If the virt_dev and the udev does not match, this virt_dev
		  may belong to another udev.
		  Re-allocate the device.
 If device is not setup, there is no point in resetting it 
	 Allocate the command structure that holds the struct completion.
	  Assume we're in process context, since the normal device reset
	  process has to wait for the device anyway.  Storage devices are
	  reset as part of error handling, so use GFP_NOIO instead of
	  GFP_KERNEL.
 Attempt to submit the Reset Device command to the command ring 
 Wait for the Reset Device command to finish 
	 The Reset Device command can't fail, according to the 0.950.96 spec,
	  unless we tried to reset a slot ID that wasn't enabled,
	  or the device wasn't in the addressed or configured state.
 0.95 completion for bad slot ID 
 0.96 completion code for same thing 
 Don't treat this as an error.  May change my mind later. 
 Free up host controller endpoint resources 
 Don't delete the default control endpoint resources 
 Everything but endpoint 0 is disabled, so free the rings. 
 If necessary, update the number of active TTs on this root port 
  At this point, the struct usb_device is about to go away, the device has
  disconnected, and all traffic has been stopped and the endpoints have been
  disabled.  Free any HC data structures associated with that device.
	
	  We called pm_runtime_get_noresume when the device was attached.
	  Decrement the counter here to allow controller to runtime suspend
	  if no devices remain.
	 If the host is halted due to driver unload, we still need to free the
	  device.
 Stop any wayward timer functions (which may grab the lock) 
 Don't disable the slot if the host controller is dead. 
  Checks if we have enough host controller resources for the default control
  endpoint.
  Must be called with xhci->lock held.
  Returns 0 if the xHC ran out of device slots, the Enable Slot command
  timed out, or allocating memory failed.  Returns 1 on success.
	 Use GFP_NOIO, since this function can be called from
	  xhci_discover_or_reset_device(), which may be called as part of
	  mass storage driver error handling.
	
	  If resetting upon resume, we can't put the controller into runtime
	  suspend if there is a device attached.
 Is this a LS or FS device under a HS hub? 
 Hub or peripherial? 
  Issue an Address Device command and optionally send a corresponding
  SetAddress request to the device.
 dying, removing or halted 
		
		  In plugunplug torture test with an NEC controller,
		  a zero-dereference was observed once due to virt_dev = 0.
		  Print useful debug rather than crash if it is observed again!
	
	  If this is the first Set Address since device plug-in or
	  virt_device realloaction after a resume with an xHCI power loss,
	  then set up the slot context.
 Otherwise, update the control endpoint ring enqueue pointer. 
 ctrl tx can take up to 5 sec; XXX: need more time for xHC? 
	 FIXME: From section 4.3.4: "Software shall be responsible for timing
	  the SetAddress() "recovery interval" required by USB and aborting the
	  command on a timeout.
	
	  USB core uses address 1 for the roothubs, so we add one to the
	  address given back to us by the HC.
 Zero the input context control for later use 
  Transfer the port index into real index in the HW port status
  registers. Caculate offset between the port's PORTSC register
  and port status base. Divide the number of per port register
  to get the real index. The raw port number bases 1.
  Issue an Evaluate Context command to change the Maximum Exit Latency in the
  slot context.  If that succeeds, store the new MEL in the xhci_virt_device.
	
	  virt_dev might not exists yet if xHC resumed from hibernate (S4) and
	  xHC was re-initialized. Exit latency will be set later after
	  hub_port_finish_reset() is done and xhci->devs[] are re-allocated
 Attempt to issue an Evaluate Context command to change the MEL. 
 Issue and wait for the evaluate context command. 
 BESL to HIRD Encoding array for USB2 LPM 
 Calculate HIRDBESL for USB2 PORTPMSC
 Use baseline BESL value as default 
 Calculate BESLD, L1 timeout and HIRDM for USB2 PORTHLPMC 
 xHCI l1 is set in steps of 256us, xHCI 1.0 section 5.4.11.2 
 device has preferred BESLD 
 Host supports BESL timeout instead of HIRD 
			 if device doesn't have a preferred BESL value use a
			  default one which works with mixed HIRD and BESL
			  systems. See XHCI_DEFAULT_BESL definition in xhci.h
			 USB 3.0 code dedicate one xhci->lpm_command->in_ctx
			  input context for link powermanagement evaluate
			  context commands. It is protected by hcd->bandwidth
			  mutex and is shared by all devices. We need to set
			  the max ext latency in USB 2 BESL LPM as well, so
			  use the same mutex and xhci_change_max_exit_latency()
 flush write 
 flush write 
 flush write 
 check if a usb2 port supports a given extened capability protocol
  only USB2 ports extended protocol capability values are cached.
  Return 1 if capability is supported
 port offsets starts at 1 
 we only support lpm for non-hub device connected to root hub yet 
---------------------- USB 3.0 Link PM functions ------------------------
 Service interval in nanoseconds = 2^(bInterval - 1)  125us  1000ns  1us 
 Convert SEL and PEL stored in nanoseconds to microseconds 
 The U1 timeout should be the maximum of the following values:
   - For control endpoints, U1 system exit latency (SEL)  3
   - For bulk endpoints, U1 SEL  5
   - For interrupt endpoints:
     - Notification EPs, U1 SEL  3
     - Periodic EPs, max(105% of bInterval, U1 SEL  2)
   - For isochronous endpoints, max(105% of bInterval, U1 SEL  2)
 Otherwise the calculation is the same as isoc eps 
 Returns the hub-encoded U1 timeout value. 
 Prevent U1 if service interval is shorter than U1 exit latency 
	 The U1 timeout is encoded in 1us intervals.
	  Don't return a timeout of zero, because that's USB3_LPM_DISABLED.
	 If the necessary timeout value is bigger than what we can set in the
	  USB 3.0 hub, we have to disable hub-initiated U1.
 The U2 timeout should be the maximum of:
   - 10 ms (to avoid the bandwidth impact on the scheduler)
   - largest bInterval of any active periodic endpoint (to avoid going
     into lower power link states between intervals).
   - the U2 Exit Latency of the device
 Returns the hub-encoded U2 timeout value. 
 Prevent U2 if service interval is shorter than U2 exit latency 
 The U2 timeout is encoded in 256us intervals 
	 If the necessary timeout value is bigger than what we can set in the
	  USB 3.0 hub, we have to disable hub-initiated U2.
	 If we found we can't enable hub-initiated LPM, and
	  the U1 or U2 exit latency was too high to allow
	  device-initiated LPM as well, then we will disable LPM
	  for this device, so stop searching any further.
 Don't enable U1 if the device is on a 2nd tier hub or lower. 
 Returns the U1 or U2 timeout that should be enabled.
  If the tier check or timeout setting functions return with a non-zero exit
  code, that means the timeout value has been finalized and we shouldn't look
  at any more endpoints.
	 Gather some information about the currently installed configuration
	  and alternate interface settings.
		 Check if any currently bound drivers want hub-initiated LPM
		  disabled.
 Not sure how this could happen... 
	 If U1 was already enabled and we're not disabling it,
	  or we're going to enable U1, account for the U1 max exit latency.
 xHCI host controller max exit latency field is only 16 bits wide. 
 Returns the USB3 hub-encoded value for the U1U2 timeout. 
	 The LPM timeout values are pretty host-controller specific, so don't
	  enable hub-initiated timeouts unless the vendor has provided
	  information about their timeout algorithm.
 Max Exit Latency is too big, disable LPM. 
 CONFIG_PM 
 CONFIG_PM 
-------------------------------------------------------------------------
 Once a hub descriptor is fetched for a device, we need to update the xHC's
  internal data structures for the device.
 Ignore root hubs 
	
	  refer to section 6.2.2: MTT should be 0 for full speed hub,
	  but it may be already set to 1 when setup an xHCI virtual
	  device, so clear it anyway.
		 Set TT think time - convert from ns to FS bit times.
		  0 = 8 FS bit times, 1 = 16 FS bit times,
		  2 = 24 FS bit times, 3 = 32 FS bit times.
		 
		  xHCI 1.0: this field shall be 0 if the device is not a
		  High-spped hub.
	 Issue and wait for the configure endpoint or
	  evaluate context command.
 EHCI mods by the periodic size.  Why? 
	
	  TODO: Check with DWC3 clients for sysdev according to
	  quirks
 Accept arbitrarily long scatter-gather lists 
 support to build packet from discontinuous buffers 
 XHCI controllers don't stop the ep queue on short packets :| 
		 Mark the first roothub as being USB 2.0.
		  The xHCI driver will register the USB 3.0 roothub.
		
		  USB 2.0 roothub under xHCI has an integrated TT,
		  (rate matching hub) as opposed to having an OHCIUHCI
		  companion controller.
		
		  Early xHCI 1.1 spec did not mention USB 3.1 capable hosts
		  should return 0x31 for sbrn, or that the minor revision
		  is a two digit BCD containig minor and sub-minor numbers.
		  This was later clarified in xHCI 1.2.
		 
		  Some USB 3.1 capable hosts therefore have sbrn 0x30, and
		  minor revision set to 0x1 instead of 0x10.
		 xHCI private pointer was set in xhci_pci_probe for the second
		  registered roothub.
 Cache read-only capability registers 
	 In xhci controllers which follow xhci 1.0 spec gives a spurious
	  success event after a short transfer. This quirk will ignore such
	  spurious event.
 Make sure the HC is halted. 
 Reset the internal HC memory state and registers. 
	
	  On some xHCI controllers (e.g. R-Car SoCs), the AC64 bit (bit 0)
	  of HCCPARAMS1 is set to 1. However, the xHCs don't support 64-bit
	  address memory pointers actually. So, this driver clears the AC64
	  bit of xhci->hcc_params to call dma_set_coherent_mask(dev,
	  DMA_BIT_MASK(32)) in this xhci_gen_setup().
	 Set dma_mask and coherent_dma_mask to 64-bits,
		
		  This is to avoid error in cases where a 32-bit USB
		  controller is used on a 64-bit capable system.
 Initialize HCD and host controller data structures. 
	
	  generic hardware linkage
	
	  basic lifecycle operations
 set in xhci_init_driver() 
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
	
	  call back when device connected and addressed
 Copy the generic table to drv then apply the overrides 
	
	  Check the compiler generated sizes of structures that must be laid
	  out in specific ways for hardware access.
	 xhci_device_control has eight fields, and also
	  embeds one xhci_slot_ctx and 31 xhci_ep_ctx
 xhci_run_regs has eight fields and embeds 128 xhci_intr_regs 
  If an init function is provided, an exit function must also be provided
  to allow module unload.
 SPDX-License-Identifier: GPL-2.0
  ST EHCI driver
  Copyright (C) 2014 STMicroelectronics â All Rights Reserved
  Author: Peter Griffin <peter.griffin@linaro.org>
  Derived from ehci-platform.c
 Set EHCI packet buffer INOUT threshold to 128 bytes 
	 some SoCs don't have a dedicated 48Mhz clock, but those that do
	 some SoCs don't have a dedicated 48Mhz clock, but those that
 CONFIG_PM_SLEEP 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
   PS3 OHCI Host Controller driver
   Copyright (C) 2006 Sony Computer Entertainment Inc.
   Copyright 2006 Sony Corp.
 Handle root hub init quirk in spider south bridge. 
 Also set PwrOn2PwrGood to 0x7f (254ms). 
 SPDX-License-Identifier: GPL-2.0
  UHCI HCD (Host Controller Driver) for GRLIB GRUSBHC
  Copyright (c) 2011 Jan Andersson <jan@gaisler.com>
  This file is based on UHCI PCI HCD:
  (C) Copyright 1999 Linus Torvalds
  (C) Copyright 1999-2002 Johannes Erdfelt, johannes@erdfelt.com
  (C) Copyright 1999 Randy Dunlap
  (C) Copyright 1999 Georg Acher, acher@in.tum.de
  (C) Copyright 1999 Deti Fliegl, deti@fliegl.de
  (C) Copyright 1999 Thomas Sailer, sailer@ife.ee.ethz.ch
  (C) Copyright 1999 Roman Weissgaerber, weissg@vienna.at
  (C) Copyright 2000 Yggdrasil Computing, Inc. (port of new PCI interface
                support from usb-ohci.c by Adam Richter, adam@yggdrasil.com).
  (C) Copyright 1999 Gregory P. Smith (from usb-ohci.c)
  (C) Copyright 2004-2007 Alan Stern, stern@rowland.harvard.edu
	
	  Probe to determine the endianness of the controller.
	  We know that bit 7 of the PORTSC1 register is always set
	  and bit 15 is always clear.  If uhci_readw() yields a value
	  with bit 7 (0x80) turned on then the current little-endian
	  setting is correct.  Otherwise we assume the value was
	  byte-swapped; hence the register interface and presumably
	  also the descriptors are big-endian.
 Set up pointers to to generic functions 
 No special actions need to be taken for the functions below 
 Reset if the controller isn't already safely quiescent. 
 Generic hardware linkage 
 Basic lifecycle operations 
 usb_create_hcd requires dma_mask != NULL 
 Make sure the controller is quiescent and that we're not using it
  any more.  This is mainly for the benefit of programs which, like kexec,
  expect the hardware to be idle: not doing DMA or generating IRQs.
  This routine may be called in a damaged or failing kernel.  Hence we
  do not acquire the spinlock before shutting down the controller.
 SPDX-License-Identifier: GPL-2.0
  Generic platform ehci driver
  Copyright 2007 Steven Brown <sbrown@cortland.com>
  Copyright 2010-2012 Hauke Mehrtens <hauke@hauke-m.de>
  Copyright 2014 Hans de Goede <hdegoede@redhat.com>
  Derived from the ohci-ssb driver
  Copyright 2007 Michael Buesch <m@bues.ch>
  Derived from the EHCI-PCI driver
  Copyright (c) 2000-2004 by David Brownell
  Derived from the ohci-pci driver
  Copyright 1999 Roman Weissgaerber
  Copyright 2000-2002 David Brownell
  Copyright 1999 Linus Torvalds
  Copyright 1999 Gregory P. Smith
  quirk_poll_check_port_status - Poll port_status if the device sticks
  @ehci: the ehci hcd pointer
  Since EHCIOHCI controllers on R-Car Gen3 SoCs are possible to be getting
  stuck very rarely after a fulllow usb device was disconnected. To
  detect such a situation, the controllers require a special way which poll
  the EHCI PORTSC register.
  Return: true if the controller's port_status indicated getting stuck
  quirk_poll_rebind_companion - rebind comanion device to recover
  @ehci: the ehci hcd pointer
  Since EHCIOHCI controllers on R-Car Gen3 SoCs are possible to be getting
  stuck very rarely after a fulllow usb device was disconnected. To
  recover from such a situation, the controllers require changing the OHCI
  functional state.
 check the status twice to reduce misdetection rate 
		
		  Now scheduling the work for testing the port more. Note that
		  updating the status is possible to be delayed when
		  reconnection. So, this uses delayed work with 5 ms delay
		  to avoid misdetection.
 sentinel }
	
	  Use reasonable defaults so platforms don't have to provide these
	  with DT probing on ARM.
 EHCI controller without debug 
 SPDX-License-Identifier: GPL-2.0+
  Freescale QUICC Engine USB Host Controller Driver
  Copyright (c) Freescale Semicondutor, Inc. 2006.
                Shlomi Gridish <gridish@freescale.com>
                Jerry Huang <Chang-Ming.Huang@freescale.com>
  Copyright (c) Logic Product Development, Inc. 2007
                Peter Barada <peterb@logicpd.com>
  Copyright (c) MontaVista Software, Inc. 2008.
                Anton Vorontsov <avorontsov@ru.mvista.com>
 SPDX-License-Identifier: GPL-2.0+
  Copyright (c) 2001 by David Brownell
 this file is part of ehci-hcd.c 
-------------------------------------------------------------------------
  There's basically three types of memory:
 	- data used only by the HCD ... kmalloc is fine
 	- async and periodic schedules, shared by HC and HCD ... these
 	  need to use dma_pool or dma_alloc_coherent
 	- driver buffers, readwritten by HC ... single shot DMA mapped
  There's also "register" data (e.g. PCI or SOC), which is memory mapped.
  No memory seen by this driver is pageable.
-------------------------------------------------------------------------
 Allocate the key transfer structures from the previously allocated pool 
 clean qtds first, and know this is not linked 
 INIT_LIST_HEAD (&qh->qh_list);
 dummy td enables safe urb queuing 
-------------------------------------------------------------------------
 The queue heads and transfer descriptors are managed from pools tied
  to each of the "per device" structures.
  This is the initialisation and cleanup code.
 DMA consistent memory and pools 
 shadow periodic table 
 remember to add cleanup code (above) if you add anything here 
 QTDs for controlbulkintr transfers 
 byte alignment (for hw parts) ,
 can't cross 4K );
 QHs for controlbulkintr transfers 
 byte alignment (for hw parts) ,
 can't cross 4K );
 ITD for high speed ISO transfers 
 byte alignment (for hw parts) ,
 can't cross 4K );
 SITD for fulllow speed split ISO transfers 
 byte alignment (for hw parts) ,
 can't cross 4K );
 Hardware periodic table 
 software shadow of hardware table 
 SPDX-License-Identifier: GPL-2.0
  xhci-dbgtty.c - tty glue for xHCI debug capability
  Copyright (C) 2017 Intel Corporation
  Author: Lu Baolu <baolu.lu@linux.intel.com>
 dbc_tty_init will be called by module init() in the future 
 dbc_tty_exit will be called by module_exit() in the future 
  undo what probe did, assume dbc is stopped already.
  we also assume tty_unregister_device() is called before this
 dbc_tty_exit will be called by  module_exit() in the future 
 SPDX-License-Identifier: GPL-2.0
  XHCI extended capability handling
  Copyright (c) 2017 Hans de Goede <hdegoede@redhat.com>
 SPDX-License-Identifier: GPL-2.0+
  Samsung Exynos USB HOST EHCI Controller
  Copyright (C) 2011 Samsung Electronics Co.Ltd
  Author: Jingoo Han <jg1.han@samsung.com>
  Author: Joonyoung Shim <jy0922.shim@samsung.com>
 Get PHYs for the controller 
 Get PHYs using legacy bindings 
	
	  Right now device-tree probed devices don't get dma_mask set.
	  Since shared usb code relies on it, set it here for now.
	  Once we move to full device tree support this will vanish off.
	
	  Workaround: reset of_node pointer to avoid conflict between legacy
	  Exynos EHCI port subnodes and generic USB device bindings
 DMA burst Enable 
 DMA burst Enable 
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2002 David Brownell <dbrownell@users.sourceforge.net>
  This file is licenced under the GPL.
-------------------------------------------------------------------------
  URB goes back to driver, and isn't reissued.
  It's completely gone from HC data structures.
  PRECONDITION:  ohci lock held, irqs blocked.
 ASSERT (urb->hcpriv != 0);
 urb->complete() can reenter this HCD 
 stop periodic dma if it's not needed 
	
	  An isochronous URB that is sumitted too late won't have any TDs
	  (marked by the fact that the td_cnt value is larger than the
	  actual number of TDs).  If the next URB on this endpoint is like
	  that, give it back now.
-------------------------------------------------------------------------
  ED handling functions
 search for the right schedule branch to use for a periodic ed.
  does some load balancing; returns the branch, or negative errno.
 iso periods can be huge; iso tds specify frame numbers 
	 search for the least loaded schedule branch of that period
	  that has enough bandwidth left unreserved.
 usb 1.1 says 90% of one frame 
-------------------------------------------------------------------------
 both iso and interrupt requests have periods; this routine puts them
  into the schedule tree in the apppropriate place.  most iso devices use
  1msec periods, but that's not required.
		 sorting each branch by period (slow before fast)
		  lets us share the faster parts of the tree.
		  (plus maybe: put interrupt eds before iso)
 link an ed into one of the HC chains 
	 we care about rm_list when setting CLEBLE in case the HC was at
	  work on some TD when CLEBLE was turned off, and isn't quiesced
	  yet.  finish_unlinks() restarts as needed, some upcoming INTR_SF.
	 
	  control and bulk EDs are doubly linked (ed_next, ed_prev), but
	  periodic ones are singly linked (ed_next). that's because the
	  periodic schedule encodes a tree like figure 3-5 in the ohci
	  spec:  each qh can have several "previous" nodes, and the tree
	  doesn't have unusedidle descriptors.
 case PIPE_INTERRUPT:
 case PIPE_ISOCHRONOUS:
 FIXME if there are TDs queued, fail them!
	 the HC may not see the schedule updates yet, but if it does
	  then they'll be properly ordered.
-------------------------------------------------------------------------
 scan the periodic table to find and unlink this ED 
 unlink an ed from one of the HC chains.
  just the link to the ed is unlinked.
  the link from the ed still points to another operational ed or 0
  so the HC can eventually finish the processing of the unlinked ed
  (assuming it already started that, which needn't be true).
  ED_UNLINK is a transient state: the HC may still see this ED, but soon
  it won't.  ED_SKIP means the HC will finish its current transaction,
  but won't start anything new.  The TD queue may still grow; device
  drivers don't know about this HCD-internal state.
  When the HC can't see the ED, something changes ED_UNLINK to one of:
   - ED_OPER: when there's any request queued, the ED gets rescheduled
     immediately.  HC should be working on them.
   - ED_IDLE: when there's no TD queue or the HC isn't running.
  When finish_unlinks() runs later, after SOF interrupt, it will often
  complete one or more URB unlinks before making that state change.
	 To deschedule something from the control or bulk list, just
	  clear CLEBLE and wait.  There's no safe way to scrub out list
	  headcurrent registers until later, and "later" isn't very
	  tightly specified.  Figure 6-5 and Section 6.4.2.2 show how
	  the HC is reading the ED queues (while we modify them).
	 
	  For now, ed_schedule() is "later".  It might be good paranoia
	  to scrub those registers in finish_unlinks(), in case of bugs
	  that make the HC try to use them.
 remove ED from the HC's list: 
 a ohci_readl() later syncs CLE with the HC
 remove ED from the HCD's list: 
 remove ED from the HC's list: 
 a ohci_readl() later syncs BLE with the HC
 remove ED from the HCD's list: 
 case PIPE_INTERRUPT:
 case PIPE_ISOCHRONOUS:
-------------------------------------------------------------------------
 get and maybe (re)init an endpoint. init _should_ be done only as part
  of enumeration, usb_set_configuration() or usb_set_interface().
 out of memory 
 dummy td; end of td list for ed 
 out of memory 
 ED_C, ED_H zeroed 
		 FIXME usbcore changes dev->devnum before SET_ADDRESS
		  succeeds ... otherwise we wouldn't need "pipe".
 only control transfers store pids in tds 
 periodic transfers... 
 iso can be bigger 
-------------------------------------------------------------------------
 request unlinking of an endpoint from an operational HC.
  put the ep on the rm_list
  real work is done at the next start frame (SF) hardware interrupt
  caller guarantees HCD is running, so hardware access is safe,
  and that ed->state is ED_OPER
 rm_list is just singly linked, for simplicity 
 enable SOF interrupt 
 flush those writes, and get latest HCCA contents
	 SF interrupt might get delayed; record the frame counter value that
	  indicates when the HC isn't looking at it, so concurrent unlinks
	  behave.  frame_no wraps every 2^16 msec, and changes right before
	  SF is triggered.
-------------------------------------------------------------------------
  TD handling functions
 enqueue next TD for this URB (OHCI spec 5.2.8.2) 
 ASSERT (index < urb_priv->length);
	 aim for only one interrupt per urb.  mostly applies to control
	  and iso; other urbs rarely need more than one TD per urb.
	  this way, only final tds (or ones with an error) cause IRQs.
	  at least immediately; use DI=6 in case any control request is
	  tempted to die part way through.  (and to force the hc to flush
	  its donelist soonish, even on unlink paths.)
	 
	  NOTE: could delay interrupts even for the last TD, and get fewer
	  interrupts ... increasing per-urb latency by sharing interrupts.
	  Drivers that queue bulk urbs may request that behavior.
 use this td as the next dummy 
 fill the old dummy TD 
 append to queue 
 hash it for later reverse mapping 
 HC might read the TD (or cachelines) right away ... 
-------------------------------------------------------------------------
 Prepare all TDs of a transfer, and queue them onto the ED.
  Caller guarantees HC is active.
  Usually the ED is already on the schedule, so TDs might be
  processed as soon as they're queued.
	 OHCI handles the bulkinterrupt data toggles itself.  We just
	  use the device toggle bits for resetting, and rely on the fact
	  that resetting toggle is meaningless if the endpoint is active.
		
		  urb->transfer_buffer_length may be smaller than the
		  size of the scatterlist (or vice versa)
	 NOTE:  TD_CC is set so we can tell which TDs the HC processed by
	  using TD_CC_GET, as well as by seeing them on the done list.
	  (CC = NotAccessed ... 0x0F, or 0x0E in PSWs for ISO.)
	 Bulk and interrupt are identical except for where in the schedule
	  their EDs live.
 ... and periodic urbs have extra accounting 
 TDs _could_ transfer up to 8K each 
 maybe avoid ED halt on final TD short read 
 maybe kickstart bulk list 
	 control manages DATA0DATA1 toggle per-request; SETUP resets it,
	  any DATA phase works normally, and the STATUS ack is special.
 NOTE:  mishandles transfers >8K, some >4K 
 maybe kickstart control list 
	 ISO has no retransmit, so no toggle; and it uses special TDs.
	  Each TD could handle multiple consecutive frames (interval 1);
	  we could often reduce the number of TDs here.
 FIXME scheduling should handle frame counter
 roll-around ... exotic case (and OHCI has
 a 2^16 iso range, vs other HCs max of 2^10)
 start periodic dma if needed 
 ASSERT (urb_priv->length == cnt);
-------------------------------------------------------------------------
  Done List handling functions
 calculate transfer lengthstatus and update the urb 
 ISO ... drivers see per-TD lengthstatus 
		 NOTE:  assumes FC in tdINFO == 0, and that
		  only the first of 0..MAXPSW psws is used.
 hc didn't touch? 
 short reads are always OK for ISO 
	 BULK, INT, CONTROL ... drivers see aggregate lengthstatus,
	  except that "setup" bytes aren't counted and "short" transfers
	  might not be reported as errors.
 update packet status if needed (short is normally ok) 
 count all non-empty packets except control SETUP packet 
-------------------------------------------------------------------------
	 clear ed halt; this is the td that caused it, but keep it inactive
	  until its urb->complete() has a chance to clean up.
	 Get rid of all later tds from this urb.  We don't have
	  to be careful: no errors and nothing was transferred.
	  Also patch the ed so it looks as if those tds completed normally.
		 NOTE: if multi-td control DATA segments get supported,
		  this urb had one of them, this td wasn't the last td
		  in that segment (TD_R clear), this ed halted because
		  of a short read, _and_ URB_SHORT_NOT_OK is clear ...
		  then we need to leave the control STATUS packet queued
		  and clear ED_SKIP.
	 help for troubleshooting:  report anything that
	  looks odd ... that doesn't include protocol stalls
	  (or maybe some other things)
 Add a TD to the done list 
 Already on the list 
 Add all the TDs going back until we reach one that's on the list 
	
	  Make td->next_dl_td point to td itself, to mark the fact
	  that td is on the done list.
 Did we just add the latest pending TD? 
 Get the entries on the hardware done queue and put them on our list 
	 get TD from hc's singly linked list, and
	  add to ours.  ed->td_list changes later.
		 Non-iso endpoints can halt on error; un-halt,
		  and dequeue any other TDs from this urb.
		  No other TD could have caused the halt.
-------------------------------------------------------------------------
 there are some urbseds to unlink; called in_irq(), with HCD locked 
		 only take off EDs that the HC isn't using, accounting for
		  frame counter wraps and EDs with partially retired TDs
 INTR_WDH may need to clean up first 
 Don't mess up anything already on the done list 
 ED's now officially unlinked, hc doesn't see 
		 reentrancy:  if we drop the schedule lock, someone might
		  have modified this list.  normally it's just prepending
		  entries (which we'd ignore), but paranoia won't hurt.
		 unlink urbs as requested, but rescan the list after
		  we call a completion since it might have unlinked
		  another (earlier) urb
		 
		  When we get here, the HC doesn't see this ed.  But it
		  must not be rescheduled until all completed URBs have
		  been given back to the driver.
 patch pointer hc uses 
			 If this was unlinked, the TD may not have been
			  retired ... so manually save the data toggle.
			  The controller ignores the value we save for
			  control and ISO endpoints.
 HC may have partly processed this TD 
 if URB is done, clean up 
		
		  If no TDs are queued, ED is now idle.
		  Otherwise, if the HC is running, reschedule.
		  If the HC isn't running, add ED back to the
		  start of the list for later processing.
 Don't loop on the same ED 
 maybe reenable control and bulk lists 
 CLEBLE to enable, CLFBLF to (maybe) kickstart 
-------------------------------------------------------------------------
 Take back a TD from the host controller 
 update URB's length and status from TD 
 If all this urb's TDs are done, call complete() 
 clean schedule:  unlink EDs that are no longer busy 
 ... reenabling halted EDs only after fault cleanup 
 ... hc may need waking-up 
  Process normal completions (error or success) and clean the schedules.
  This is the main path for handing urbs back to drivers.  The only other
  normal path is finish_unlinks(), which unlinks URBs using ed_rm_list,
  instead of scanning the (re-reversed) donelist as this does.
  TD takeback and URB giveback must be single-threaded.
  This routine takes care of it all.
 SPDX-License-Identifier: GPL-2.0
  xhci-plat.c - xHCI host controller driver platform Bus Glue.
  Copyright (C) 2012 Texas Instruments Incorporated - https:www.ti.com
  Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
  A lot of code borrowed from the Linux xHCI driver.
	
	  As of now platform drivers don't provide MSI support so we ensure
	  here that the generic code does not try to make a pci_dev from our
	  dev struct in order to setup MSI
 called during probe() after chip reset completes 
	
	  sysdev must point to a device that is known to the system firmware
	  or PCI hardware. We handle these three cases here:
	  1. xhci_plat comes from firmware
	  2. xhci_plat is child of a device from firmware (dwc3-plat)
	  3. xhci_plat is grandchild of a pci device (dwc3-pci)
 Try to set 64-bit DMA first 
 Platform did not initialize dma_mask 
 If seting 64-bit DMA mask fails, fall back to 32-bit DMA mask 
	
	  Not all platforms have clks so it is not an error if the
	  clock do not exist.
 Just copy data for now 
 imod_interval is the interrupt moderation value in nanoseconds. 
 Iterate over all parent nodes for finding quirks 
	
	  Prevent runtime pm from being on as default, users should enable
	  runtime pm using powercontrol in sysfs.
	
	  xhci_suspend() needs `do_wakeup` to know whether host is allowed
	  to do wakeup during suspend.
 XHCI-compliant USB Controller 
 SPDX-License-Identifier: GPL-2.0
  R8A66597 HCD (Host Controller Driver)
  Copyright (C) 2006-2007 Renesas Solutions Corp.
  Portions Copyright (C) 2004 Psion Teklogix (for NetBook PRO)
  Portions Copyright (C) 2004-2005 David Brownell
  Portions Copyright (C) 1999 Roman Weissgaerber
  Author : Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 disable interrupts 
 clear status 
 dma fifo not use? 
 urb->pipe is address 0 
 this function must be called with interrupt disabled 
 R8A66597's address 
 this function must be called with interrupt disabled 
	
	  Only when resetting USB, it is necessary to erase drvdata. When
	  a usb device with usb hub is disconnect, "dev->udev" is already
	  freed on usb_desconnect(). So we cannot access the data.
 this function must be called with interrupt disabled 
 stall? 
 this function must be called with interrupt disabled 
 force stall? 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 pipe dma is only for external controlles 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 calculate the nearest value for PIPEPERI 
 uSOF -> msec 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 control or bulk or interrupt 
 this function must be called with interrupt disabled 
 this function must be called with interrupt disabled 
 prepare parameters 
 update parameters 
 check transfer finish 
 read fifo 
 prepare parameters 
 write fifo 
 update parameters 
 check transfer finish 
 start usb bus sampling 
 start usb bus sampling 
 this function must be called with interrupt disabled 
 Select a different address or endpoint 
 this function must be called with interrupt disabled 
 initialize (no change) 
 suspend 
 waiting last SOF 
	
	  generic hardware linkage
	
	  managing io requests and associated device resources
	
	  periodic schedule support
	
	  root hub support
 if defined(CONFIG_PM) 
 initialize hcd 
 make sure no interrupts are pending 
 SPDX-License-Identifier: GPL-2.0
  Generic UHCI HCD (Host Controller Driver) for Platform Devices
  Copyright (c) 2011 Tony Prisk <linux@prisktech.co.nz>
  This file is based on uhci-grlib.c
  (C) Copyright 2004-2007 Alan Stern, stern@rowland.harvard.edu
 Probe number of ports if not already provided by DT 
 Set up pointers to to generic functions 
 No special actions need to be taken for the functions below 
 Reset if the controller isn't already safely quiescent. 
 Generic hardware linkage 
 Basic lifecycle operations 
	
	  Right now device-tree probed devices don't get dma_mask set.
	  Since shared usb code relies on it, set it here for now.
	  Once we have dma capability bindings this can go away.
 Grab some things from the device-tree 
 Get and enable clock if any specified 
 Make sure the controller is quiescent and that we're not using it
  any more.  This is mainly for the benefit of programs which, like kexec,
  expect the hardware to be idle: not doing DMA or generating IRQs.
  This routine may be called in a damaged or failing kernel.  Hence we
  do not acquire the spinlock before shutting down the controller.
 SPDX-License-Identifier: GPL-2.0
  Nuvoton NPCM7xx driver for EHCI HCD
  Copyright (C) 2018 Nuvoton Technologies,
  Avi Fishman <avi.fishman@nuvoton.com> <avifishman70@gmail.com>
  Tomer Maimon <tomer.maimon@nuvoton.com> <tmaimon77@gmail.com>
  Based on various ehci-spear.c driver
 phy init  
 reset usb host
 enable phy
 enable phy
 enable host
	
	  Right now device-tree probed devices don't get dma_mask set.
	  Since shared usb code relies on it, set it here for now.
	  Once we have dma capability bindings this can go away.
 registers start at offset 0x0 
 SPDX-License-Identifier: GPL-2.0
  UHCI-specific debugging code. Invaluable when something
  goes wrong, but don't get in my face.
  Kernel visible pointers are surrounded in []s and bus
  visible pointers are surrounded in ()s
  (C) Copyright 1999 Linus Torvalds
  (C) Copyright 1999-2001 Johannes Erdfelt
 Handle REALLY large printks so we don't overflow buffers 
 Just write one line at a time 
 Last QH is the Terminating QH, it's different 
 CONFIG_DEBUG_FS 
 CONFIG_DYNAMIC_DEBUG
 SPDX-License-Identifier: GPL-2.0+
  Copyright 2005-2009 MontaVista Software, Inc.
  Copyright 2008,2012,2015      Freescale Semiconductor, Inc.
  Ported to 834x by Randy Vinson <rvinson@mvista.com> using code provided
  by Hunter Wu.
  Power Management support by Dave Liu <daveliu@freescale.com>,
  Jerry Huang <Chang-Ming.Huang@freescale.com> and
  Anton Vorontsov <avorontsov@ru.mvista.com>.
 configure so an HC device and id are always provided 
 always called with process context; sleeping is OK 
  fsl_ehci_drv_probe - initialize FSL-based HCDs
  @pdev: USB Host Controller being probed
  Context: task context, might sleep
  Allocates basic resources for this USB host controller.
 Need platform data for setup 
	
	  This is a host mode driver, verify that we're supposed to be
	  in host mode.
	
	  do platform specific init: check the clock, grabconfig pins, etc.
 Enable USB controller, 83xx or 8536 
 Set USB_EN bit to select ULPI phy for USB controller version 2.5 
	
	  Enable UTMI phy and program PTS field in UTMI mode before asserting
	  controller reset for USB Controller version 2.5
 Don't need to set host mode here. It will be done by tdi_reset() 
 controller version 1.6 or above 
 turn off UTMI PHY first 
 then turn on ULPI and enable USB controller 
		 Presence of this node "has_fsl_erratum_a006918"
		  in device-tree is used to stop USB controller
		  initialization in Linux
		 PHY_CLK_VALID bit is de-featured from all controller
		  versions below 2.4 and is to be checked only for
		  internal UTMI phy
 controller version 1.6 or above 
			mdelay(FSL_UTMI_PHY_DLY);   Delay for UTMI PHY CLK to
 enable UTMI PHY 
		
		 Turn on cache snooping hardware, since some PowerPC platforms
		 wholly rely on hardware to deal with cache coherent
 Setup Snooping for all the 4GB space 
 SNOOP1 starts from 0x0, size 2G 
 SNOOP2 starts from 0x80000000, size 2G 
 Deal with USB erratum A-005275 
 Deal with USB Erratum #14 on MPC834x Rev 1.0 & 1.1 chips 
 called after powerup, by probe or system-pm "wakeup" 
 called during probe() after chip reset completes 
 EHCI registers start at offset 0x100 
	
	  Deal with MPC834X85XX that need port power to be cycled
	  after the power fault condition is removed. Otherwise the
	  state machine does not reflect PORTSC[CSC] correctly.
		
		  set SBUSCFG:AHBBRST so that control msgs don't
		  fail when doing heavy PATA writes.
 Saved USB PHY settings, need to restore after deep sleep. 
 usbcmd 
	
	  If the controller is already suspended, then this must be a
	  PM suspend.  Remember this fact, so that we will leave the
	  controller suspended at PM resume time.
 ignore non-host interrupts 
 stop the controller 
 save EHCI registers 
 clear the W1C bits 
 clear PP to cut power to the port 
	
	  If the controller was already suspended at suspend time,
	  then don't resume it now.
 set host mode 
 restore EHCI registers 
 CONFIG_PPC_MPC512x 
 Restore USB PHY settings and enable the controller. 
 CONFIG_PM 
 start port reset before HNP protocol time out 
 hub_wq will finish the reset later 
 CONFIG_USB_OTG 
  fsl_ehci_drv_remove - shutdown processing for FSL-based HCDs
  @pdev: USB Host Controller being removed
  Context: task context, might sleep
  Reverses the effect of usb_hcd_fsl_probe().
	
	  do platform specific un-initialization:
	  release iomux pins, disable clock, etc.
 SPDX-License-Identifier: GPL-2.0+
  Driver for Aeroflex Gaisler GRLIB GRUSBHC EHCI host controller
  GRUSBHC is typically found on LEONGRLIB SoCs
  (c) Jan Andersson <jan@gaisler.com>
  Based on ehci-ppc-of.c which is:
  (c) Valentine Barshak <vbarshak@ru.mvista.com>
  and in turn based on "ehci-ppc-soc.c" by Stefan Roese <sr@denx.de>
  and "ohci-ppc-of.c" by Sylvain Munaut <tnt@246tNt.com>
 Known value of cap. reg. HCIVERSION 
	
	  generic hardware linkage
	
	  basic lifecycle operations
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
 usb_create_hcd requires dma_mask != NULL 
 determine endianness of this implementation 
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2002 David Brownell <dbrownell@users.sourceforge.net>
  (C) Copyright 2002 Hewlett-Packard Company
  USB Bus Glue for Samsung S3C2410
  Written by Christopher Hoover <ch@hpl.hp.com>
  Based on fragments of previous driver by Russell King et al.
  Modified for S3C2410 from ohci-sa1111.c, ohci-omap.c and ohci-lh7a40.c
 	by Ben Dooks, <ben@simtec.co.uk>
 	Copyright (C) 2004 Simtec Electronics
  Thanks to basprog@mail.ru for updates to newer kernels
  This file is licenced under the GPL.
 clock device associated with the hcd 
 forward definitions 
 conversion functions 
 let the bus clock stabilise 
 ohci_s3c2410_hub_status_data
  update the status data from the hub with anything that
  has been detected by our system
 mark any changed port as changed 
 s3c2410_usb_set_power
  configure the power on a port, by calling the platform device
  routine registered with the platform device
 ohci_s3c2410_hub_control
  look at control requests to the hub, and see if we need
  to take any action or over-ride the results from the
  request.
	 if we are only an humble host without any special capabilities
 check the request to see if it needs handling 
 update the hub's descriptor 
		 remove the old configurations for power-switching, and
		  over-current protection, and insert our new configuration
 check port status 
 s3c2410_hcd_oc
  handle an over-current report
			 ok, once over-current is detected,
 may be called without controller electrically present 
 may be called with controller, bus, and devices active 
  ohci_hcd_s3c2410_remove - shutdown processing for HCD
  @dev: USB Host Controller being removed
  Context: task context, might sleep
  Reverses the effect of ohci_hcd_3c2410_probe(), first invoking
  the HCD's stop() method.  It is always called from a thread
  context, normally "rmmod", "apmd", or something similar.
  ohci_hcd_s3c2410_probe - initialize S3C2410-based HCDs
  @dev: USB Host Controller to be probed
  Context: task context, might sleep
  Allocates basic resources for this USB host controller, and
  then invokes the start() method for the HCD associated with it
  through the hotplug entry's driver_data.
-------------------------------------------------------------------------
 sentinel  }
	
	  The Samsung HW has some unusual quirks, which require
	  Sumsung-specific workarounds. We override certain hc_driver
	  functions here to achieve that. We explicitly do not enhance
	  ohci_driver_overrides to allow this more easily, since this
	  is an unusual case, and we don't want to encourage others to
	  override these functions by making it too easy.
 SPDX-License-Identifier: GPL-2.0
  xHCI host controller driver
  Copyright (C) 2008 Intel Corp.
  Author: Sarah Sharp
  Some code borrowed from the Linux EHCI driver.
  Ring initialization rules:
  1. Each segment is initialized to zero, except for link TRBs.
  2. Ring cycle state = 0.  This represents Producer Cycle State (PCS) or
     Consumer Cycle State (CCS), depending on ring function.
  3. Enqueue pointer = dequeue pointer = address of first TRB in the segment.
  Ring behavior rules:
  1. A ring is empty if enqueue == dequeue.  This means there will always be at
     least one free TRB in the ring.  This is useful if you want to turn that
     into a link TRB and expand the ring.
  2. When incrementing an enqueue or dequeue pointer, if the next TRB is a
     link TRB, then load the pointer with the address in the link TRB.  If the
     link TRB had its toggle bit set, you may need to update the ring cycle
     state (see cycle bit rules).  You may have to do this multiple times
     until you reach a non-link TRB.
  3. A ring is full if enqueue++ (for the definition of increment above)
     equals the dequeue pointer.
  Cycle bit rules:
  1. When a consumer increments a dequeue pointer and encounters a toggle bit
     in a link TRB, it must toggle the ring cycle state.
  2. When a producer increments an enqueue pointer and encounters a toggle bit
     in a link TRB, it must toggle the ring cycle state.
  Producer rules:
  1. Check if ring is full before you enqueue.
  2. Write the ring cycle state to the cycle bit in the TRB you're enqueuing.
     Update enqueue pointer between each write (which may update the ring
     cycle state).
  3. Notify consumer.  If SW is producer, it rings the doorbell for command
     and endpoint rings.  If HC is the producer for the event ring,
     and it generates an interrupt according to interrupt modulation rules.
  Consumer rules:
  1. Check if TRB belongs to you.  If the cycle bit == your ring cycle state,
     the TRB is owned by the consumer.
  2. Update dequeue pointer (which may update the ring cycle state) and
     continue processing TRBs until you reach a TRB which is not owned by you.
  3. Notify the producer.  SW is the consumer for the event ring, and it
    updates event ring dequeue pointer.  HC is the consumer for the command and
    endpoint rings; it generates events on the event ring for these.
  Returns zero if the TRB isn't in this segment, otherwise it returns the DMA
  address of the TRB.
 offset in TRBs 
 unchain chained link TRBs 
 Preserve only the cycle bit of this TRB 
 Updates trb to point to the next TRB in the ring, and updates seg if the next
  TRB is in a new segment.  This does not skip over link TRBs, and it does not
  effect the ring dequeue or enqueue pointers.
  See Cycle bit rules. SW is the consumer for the event ring only.
 event ring doesn't have link trbs, check for last trb 
 All other rings have link trbs 
  See Cycle bit rules. SW is the consumer for the event ring only.
  If we've just enqueued a TRB that is in the middle of a TD (meaning the
  chain bit is set), then set the chain bit in all the following link TRBs.
  If we've enqueued the last TRB in a TD, make sure the following link TRBs
  have their chain bit cleared (so that each Link TRB is a separate TD).
  Section 6.4.4.1 of the 0.95 spec says link TRBs cannot have the chain bit
  set, but other sections talk about dealing with the chain bit set.  This was
  fixed in the 0.96 specification errata, but we have to assume that all 0.95
  xHCI hardware can't handle the chain bit being cleared on a link TRB.
  @more_trbs_coming:	Will you enqueue more TRBs before calling
 			prepare_transfer()?
 If this is not event ring, there is one less usable TRB 
 Update the dequeue pointer further if that was a link TRB 
		
		  If the caller doesn't plan on enqueueing more TDs before
		  ringing the doorbell, then we don't want to give the link TRB
		  to the hardware just yet. We'll give the link TRB back in
		  prepare_ring() just before we enqueue the TD at the top of
		  the ring.
		 If we're not dealing with 0.95 hardware or isoc rings on
		  AMD 0.96 host, carry over the chain bit of the previous TRB
		  (which may mean the chain bit is cleared).
 Give this link TRB to the hardware 
 Toggle the cycle bit after the last ring segment. 
  Check to see if there's room to enqueue num_trbs on the ring and make sure
  enqueue pointer will not advance into dequeue segment. See rules above.
 Ring the host controller doorbell after placing a command on the ring 
 Ding dong!\n");
 Flush PCI posted writes 
  Turn all commands on command ring with status set to "aborted" to no-op trbs.
  If there are other commands waiting then restart the ring and kick the timer.
  This must be called with command ring stopped and xhci->lock held.
 Turn all aborted commands in list to no-ops, then restart 
		
		  caller waiting for completion is called when command
		   completion event is received for these no-op commands
 ring command ring doorbell to restart the command ring 
 Must be called with xhci->lock held, releases and aquires lock back 
	
	  The control bits like command stop, abort are located in lower
	  dword of the command ring control register. Limit the write
	  to the lower dword to avoid corrupting the command ring pointer
	  in case if the command ring is stopped by the time upper dword
	  is written.
	 Section 4.6.1.2 of xHCI 1.0 spec says software should also time the
	  completion of the Command Abort operation. If CRR is not negated in 5
	  seconds then driver handles it as if host died (-ENODEV).
	  In the future we should distinguish between -ENODEV and -ETIMEDOUT
	  and try to recover a -ETIMEDOUT with a host controller reset.
	
	  Writing the CMD_RING_ABORT bit should cause a cmd completion event,
	  however on some host hw the CMD_RING_RUNNING bit is correctly cleared
	  but the completion event in never sent. Wait 2 secs (arbitrary
	  number) to handle those cases after negation of CMD_RING_RUNNING.
	 Don't ring the doorbell for this endpoint if there are pending
	  cancellations because we don't want to interrupt processing.
	  We don't want to restart any stream rings if there's a set dequeue
	  pointer command pending because the device can choose to start any
	  stream once the endpoint is on the HW schedule.
 flush the write 
 Ring the doorbell for any rings with pending URBs 
 A ring has pending URBs if its TD list is not empty 
 common case, no streams 
 Get the right ring for the given slot_id, ep_index and stream_id.
  If the endpoint supports streams, boundary check the URB's stream ID.
  If the endpoint doesn't support streams, return the singular endpoint ring.
  Get the hw dequeue pointer xHC stopped on, either directly from the
  endpoint context, or if streams are in use from the stream context.
  The returned hw_dequeue contains the lowest four bits with cycle state
  and possbile stream context type.
	
	  A cancelled TD can complete with a stall if HW cached the trb.
	  In this case driver can't find td, but if the ring is empty we
	  can move the dequeue pointer to the current enqueue position.
	  We shouldn't hit this anymore as cached cancelled TRBs are given back
	  after clearing the cache, but be on the safe side and keep it anyway
	
	  Quirk: xHC write-back of the DCS field in the hardware dequeue
	  pointer is wrong - use the cycle state of the TRB pointed to by
	  the dequeue pointer.
	
	  We want to find the pointer, segment and cycle state of the new trb
	  (the one after current TD's last_trb). We know the cycle state at
	  hw_dequeue, so walk the ring until both hw_dequeue and last_trb are
	  found.
 Search wrapped around, bail out 
 Don't update the ring cycle state for the producer (us). 
 This function gets called from contexts where it cannot sleep 
	 Stop the TD queueing code from ringing the doorbell until
	  this command completes.  The HC won't set the dequeue pointer
	  if the ring is running, and ringing the doorbell starts the
	  ring running.
 flip_cycle means flip the cycle bit of all but the first and last TRB.
  (The last TRB actually points to the ring enqueue pointer, which is not part
  of this TD.)  This is used to remove partially enqueued isoc TDs from a ring.
 flip cycle if asked to 
 Can't del_timer_sync in interrupt 
  Must be called with xhci->lock held in interrupt context,
  releases and re-acquires xhci->lock
 for in tranfers we need to copy the data from bounce to sg 
 Clean up the endpoint's TD list 
 if a bounce buffer was used to align this td then unmap it 
	 Do one last check of the actual transfer length.
	  If the host controller said we transferred more data than the buffer
	  length, urb->actual_length will be a very big number (since it's
	  unsigned).  Play it safe and say we didn't transfer anything.
 TD might be removed from td_list if we are giving back a cancelled URB 
 Giving back a cancelled URB, or if a slated TD completed anyway 
 Giveback the urb when all the tds are completed 
 set isoc urb status to 0 just as EHCI, UHCI, and OHCI 
 Complete the cancelled URBs we unlinked from td_list. 
	
	  Avoid resetting endpoint if link is inactive. Can cause host hang.
	  Device will be reset soon to recover the link so don't do anything
 add td to cancelled list and let reset ep handler take care of it 
  Fix up the ep ring first, so HW stops executing cancelled TDs.
  We have the xHCI lock, so nothing can modify this list until we drop it.
  We're also in the event handler, so we can't get re-interrupted if another
  Stop Endpoint command completes.
  only call this when ring is not in a running state
		
		  If a ring stopped on the TD we need to cancel then we have to
		  move the xHC endpoint ring dequeue pointer past this TD.
		  Rings halted due to STALL may show hw_deq is past the stalled
		  TD, but still require a set TR Deq command to flush xHC cache.
 TD is already no-op 
 set TR deq command already queued 
 TD is cached, clear it 
 FIXME  stream case, several stopped rings 
 If there's no need to move the dequeue pointer then we're done 
 Failed to move past cached td, just set cached TDs to no-op 
  Returns the TD the endpoint ring halted on.
  Only call for non-running rings without streams.
 Not streams compatible 
  When we get a command completion for a Stop Endpoint Command, we need to
  unlink any cancelled TDs from the ring.  There are two ways to do that:
   1. If the HW was in the middle of processing the TD that needs to be
      cancelled, then we must move the ring's dequeue pointer past the last TRB
      in the TD with a Set Dequeue Pointer Command.
   2. Otherwise, we turn all the TRBs in the TD into No-op TRBs (with the chain
      bit cleared) so that the HW will skip over them.
	
	  If stop endpoint command raced with a halting endpoint we need to
	  reset the host side endpoint first.
	  If the TD we halted on isn't cancelled the TD should be given back
	  with a proper error code, and the ring dequeue moved past the TD.
	  If streams case we can't find hw_deq, or the TD we halted on so do a
	  soft reset.
	 
	  Proper error code is unknown here, it would be -EPIPE if device side
	  of enadpoit halted (aka STALL), and -EPROTO if not (transaction error)
	  We use -EPROTO, if device is stalled it should return a stall error on
	  next transfer, which then will return -EPIPE, and device side stall is
	  noted and cleared by class driver.
 reset ep, reset handler cleans up cancelled tds 
 Race, HW handled stop ep cmd before ep was running 
 will queue a set TR deq if stopped on a cancelled, uncleared TD 
 Otherwise ring the doorbell(s) to restart queued transfers 
  host controller died, register read returns 0xffffffff
  Complete pending commands, mark them ABORTED.
  URBs need to be given back as usb core might be waiting with device locks
  held for the URBs to finish during device disconnect, blocking host remove.
  Call with xhci->lock held.
  lock is relased and re-acquired while giving back urb.
 return any pending urbs, remove may be waiting for them 
 inform usb core hc died if PCI remove isn't already handling it 
 Watchdog timer function for when a stop endpoint command fails to complete.
  In this case, we assume the host controller is broken or dying or dead.  The
  host may still be completing some other events, so we have to be careful to
  let the event ring handler and the URB dequeueingenqueueing functions know
  through xhci->state.
  The timer may also fire if the host takes a very long time to respond to the
  command, and the stop endpoint command completion handler cannot delete the
  timer before the timer function is called.  Another endpoint cancellation may
  sneak in before the timer function can grab the lock, and that may queue
  another stop endpoint command and add the timer back.  So we cannot use a
  simple flag to say whether there is a pending stop endpoint command for a
  particular endpoint.
  Instead we use a combination of that flag and checking if a new timer is
  pending.
 bail out if cmd completed but raced with stop ep watchdog timer.
	
	  handle a stop endpoint cmd timeout as if host died (-ENODEV).
	  In the future we could distinguish between -ENODEV and -ETIMEDOUT
	  and try to recover a -ETIMEDOUT with a host controller reset
	 If we get two back-to-back stalls, and the first stalled transfer
	  ends just before a link TRB, the dequeue pointer will be left on
	  the link TRB by the code in the while loop.  So we have to update
	  the dequeue pointer one segment further, or we'll jump off
	  the segment into la-la-land.
 We have more usable TRBs 
  When we get a completion for a Set Transfer Ring Dequeue Pointer command,
  we need to clear the set deq pending flag in the endpoint ring state, so that
  the TD queueing code can ring the doorbell again.  We also need to ring the
  endpoint doorbell to restart the ring, but only if there aren't more
  cancellations pending.
 XXX: Harmless??? 
		 OK what do we do now?  The endpoint state is hosed, and we
		  should never get to this point if the synchronization between
		  queueing, and endpoint state are correct.  This might happen
		  if the device gets disconnected after we've finished
		  cancelling URBs, which might not be an error...
 4.6.10 deq ptr is written to the stream ctx for streams 
			 Update the ring's dequeue segment and dequeue pointer
			  to reflect the new position.
 HW cached TDs cleared from cache, give them back 
 Restart any rings with pending URBs 
	 This command will only fail if the endpoint wasn't halted,
	  but we don't care.
 Cleanup cancelled TDs as ep is stopped. May queue a Set TR Deq cmd 
 Clear our internal halted state 
 if this was a soft reset, then restart 
 Delete default control endpoint resources 
	
	  Configure endpoint commands can come from the USB core
	  configuration or alt setting changes, or because the HW
	  needed an extra configure endpoint command after a reset
	  endpoint command or streams were being configured.
	  If the command was for a halted endpoint, the xHCI driver
	  is not waiting on the configure endpoint command.
 Input ctx add_flags are the endpoint index plus one 
	 A usb_set_interface() call directly after clearing a halted
	  condition may race on this quirky hardware.  Not worth
	  worrying about, since this is prototype hardware.  Not sure
	  if this will work for streams, but streams support was
	  untested on this prototype.
 Clear internal halted state and restart ring(s) 
	
	  If timeout work is pending, or current_cmd is NULL, it means we
	  raced with command completion. Command is handled so just return.
 mark this command to be cancelled 
 Make sure command ring is running before aborting it 
 Prevent new doorbell, and start command abort 
 host removed. Bail out 
 command timeout on stopped ring, ring can't be aborted 
	
	  Check whether the completion event is for our internal kept
	  command.
 If CMD ring stopped we own the trbs between enqueue and dequeue 
	
	  Host aborted the command ring, check if the current command was
	  supposed to be aborted, otherwise continue normally.
	  The command ring is stopped now, but the xHC will issue a Command
	  Ring Stopped event which will cause us to restart it.
 Is this an aborted command turned to NO-OP? 
		 SLOT_ID field in reset device cmd completion event TRB is 0.
		  Use the SLOT_ID from the command TRB instead (xhci 4.6.11)
 Skip over unknown commands on the event ring 
 restart timer if this wasn't the last command 
  Quirk hanlder for errata seen on Cavium ThunderX2 processor XHCI
  Controller.
  As per ThunderX2errata-129 USB 2 device may come up as USB 1
  If a connection to a USB 1 device is followed by another connection
  to a USB 2 device.
  Reset the PHY after the USB device is disconnected if device speed
  is less than HCD_USB3.
  Retry the reset sequence max of 4 times checking the PLL lock status.
 Assert PHY reset 
 De-assert the PHY reset 
 Port status change events always have a successful completion code 
 We might get interrupts after shared_hcd is removed 
			 Set a flag to say the port signaled remote wakeup,
			  so we can tell the difference between the end of
			  device and host initiated resume.
			 Need to wait until the next link state change
			  indicates the device is actually in U0.
			 Do the rest in GetPortStatus after resume time delay.
			  Avoid polling roothub status before that so that a
			  usb device auto-resume latency around ~40ms.
		 We've just brought the device into U012 through either the
		  Resume state after a device remote wakeup, or through the
		  U3Exit state after a host-initiated resume.  If it's a device
		  initiated remote wake, don't pass up the link state change,
		  so the roothub behavior is consistent with external
		  USB 3.0 hub behavior.
	
	  Check to see if xhci-hub.c is waiting on RExit to U0 transition (or
	  RExit to a disconnect state).  If so, let the the driver know it's
	  out of the RExit state.
 Update event ring dequeue pointer before dropping the lock 
	 Don't make the USB core poll the roothub if we got a bad port status
	  change event.  Besides, at that point we can't tell which roothub
	  (USB 2.0 or USB 3.0) to kick.
	
	  xHCI port-status-change events occur when the "or" of all the
	  status-change bits in the portsc register changes from 0 to 1.
	  New status changes won't cause an event if any other change
	  bits are still set.  When an event occurs, switch over to
	  polling to avoid losing status changes.
 Pass this up to the core 
  This TD is defined by the TRBs starting at start_trb in start_seg and ending
  at end_trb, which may be in another segment.  If the suspect DMA address is a
  TRB in this TD, this function returns that TRB's segment.  Otherwise it
  returns 0.
 We may get an event for a Link TRB in the middle of a TD 
 If the end TRB isn't in this segment, this is set to 0 
 The end TRB is in this segment, so suspect should be here 
				 Case for one segment with
				  a TD wrapped around to the top
 Might still be somewhere in this segment 
	
	  As part of lowfull-speed endpoint-halt processing
	  we must clear the TT buffer (USB 2.0 specification 11.17.5).
 Check if an error has halted the endpoint ring.  The class driver will
  cleanup the halt for a non-default control endpoint if we indicate a stall.
  However, a babble and other errors also halt the endpoint ring, and the class
  driver won't clear the halt in that case, so we need to issue a Set Transfer
  Ring Dequeue Pointer command manually.
 TRB completion codes that may require a manual halt cleanup 
		 The 0.95 spec says a babbling control endpoint
		  is not halted. The 0.96 spec says it is.  Some HW
		  claims to be 0.95 compliant, but it halts the control
		  endpoint anyway.  Check if a babble halted the
		  endpoint.
		 Vendor defined "informational" completion code,
		  treat as not-an-error.
		
		  The "Stop Endpoint" completion will take care of any
		  stopped TDs. A stopped TD may be restarted, so don't update
		  the ring dequeue pointer or take this TD off any lists yet.
		
		  If endpoint context state is not halted we might be
		  racing with a reset endpoint command issued by a unsuccessful
		  stop endpoint completion (context error). In that case the
		  td should be on the cancelled list, and EP_HALTED flag set.
		 
		  Or then it's not halted due to the 0.95 spec stating that a
		  babbling control endpoint should not halt. The 0.96 spec
		  again says it should.  Some HW claims to be 0.95 compliant,
		  but it halts the control endpoint anyway.
			
			  If EP_HALTED is set and TD is on the cancelled list
			  the TD and dequeue pointer will be handled by reset
			  ep command completion
 endpoint not halted, don't reset it 
 Almost same procedure as for STALL_ERROR below 
		
		  xhci internal endpoint state will go to a "halt" state for
		  any stall, including default control pipe protocol stall.
		  To clear the host side halt we need to issue a reset endpoint
		  command, followed by a set dequeue command to move past the
		  TD.
		  Class drivers clear the device side halt from a functional
		  stall later. Hub TT buffer should only be cleared for FSLS
		  devices behind HS hubs for functional stalls.
 xhci_handle_halted_endpoint marked td cancelled 
 Update ring dequeue pointer 
 sum trb lengths from ring dequeue up to stop_trb, _excluding_ stop_trb 
  Process control tds, update urb status and actual_length.
 Did we transfer part of the data (middle) phase? 
 stopped at setup stage, no data transferred 
	
	  if on data stage then update the actual_length of the URB and flag it
	  as set, so it won't be overwritten in the event for the last TRB.
 at status stage 
  Process isochronous tds, update urb packet status and actual_length.
 handle completion code 
 field normally containing residue now contains tranferred 
 The transfer is partly done. 
 calc actual length 
 Update ring dequeue pointer 
  Process bulk and interrupt tds, update urb status and actual_length.
 handle success with untransferred data as short packet 
 stopped on ep trb with invalid length, exclude it 
 do nothing 
  If this function returns an error condition, it means it got a Transfer
  event with a corrupted Slot ID, Endpoint ID, or TRB DMA address.
  At this point, the host controller is probably hosed and should be reset.
 Some transfer events don't always point to a trb, see xhci 4.17.4 
 Count current td numbers if ep->skip is set 
 Look for common error cases 
	 Skip codes that require special handling depending on
	  transfer type
 Completion codes for endpoint stopped state 
 Completion codes for endpoint halted state 
 Completion codes for endpoint error state 
 completion codes not indicating endpoint state change 
		
		  When the Isoch ring is empty, the xHC will generate
		  a Ring Overrun Event for IN Isoch endpoint or Ring
		  Underrun Event for OUT Isoch endpoint.
		
		  When encounter missed service error, one or more isoc tds
		  may be missed by xHC.
		  Set skip flag of the ep_ring; Complete the missed tds as
		  short transfer when process the ep_ring next time.
 needs disable slot command to recover 
		 This TRB should be in the TD at the head of this ring's
		  TD list.
			
			  Don't print wanings if it's due to a stopped endpoint
			  generating an extra completion event if the device
			  was suspended. Or, a event for the last TRB of a
			  short TD we already got a short event for.
			  The short TD is already removed from the TD list.
 We've skipped all the TDs on the ep ring when ep->skip set 
 Is this a TRB in the currently executing TD? 
		
		  Skip the Force Stopped Event. The event_trb(event_dma) of FSE
		  is not in the current TD pointed by ep_ring->dequeue because
		  that the hardware dequeue pointer still at the previous TRB
		  of the current TD. The previous TRB maybe a Link TD or the
		  last TRB of the previous TD. The command completion handle
		  will take care the rest.
				 Some host controllers give a spurious
				  successful event after a short transfer.
				  Ignore it.
 HC is busted, give up! 
		
		  No-op TRB could trigger interrupts in a case where
		  a URB was killed and a STALL_ERROR happens right
		  after the endpoint ring stopped. Reset the halted
		  endpoint. Otherwise, the endpoint remains stalled
		  indefinitely.
 update the urb's actual_length and give back to the core 
		
		  Do not update event ring dequeue pointer if we're in a loop
		  processing missed tds.
	
	  If ep->skip is set, it means there are missed tds on the
	  endpoint ring need to take care of.
	  Process them as short transfer until reach the td pointed by
	  the event.
  This function handles all OS-owned events on the event ring.  It may drop
  xhci->lock between event processing (e.g. to pass up port status changes).
  Returns >0 for "possibly more events to process" (caller should call again),
  otherwise 0 if done.  In future, <0 returns should indicate error code.
 Event ring hasn't been allocated yet. 
 Does the HC or OS own the TRB? 
	
	  Barrier between reading the TRB_CYCLE (valid) flag above and any
	  speculative reads of the event's flagsdata below.
 FIXME: Handle more event types. 
	 Any of the above functions may drop and re-acquire the lock, so check
	  to make sure a watchdog timer didn't mark the host as non-responsive.
 Update SW event ring dequeue pointer 
	 Are there more items on the event ring?  Caller will call us again to
	  check.
  Update Event Ring Dequeue Pointer:
  - When all events have finished
  - To avoid "Event Ring Full Error" condition
 If necessary, update the HW's version of the event ring deq ptr. 
		
		  Per 4.9.4, Software writes to the ERDP register shall
		  always advance the Event Ring Dequeue Pointer value.
 Update HC event ring dequeue pointer 
 Clear the event handler busy flag (RW1C) 
  xHCI spec says we can get an interrupt, and if the HC has an error condition,
  we might get bad data out of the event ring.  Section 4.10.2.7 has a list of
  indicators of an event TRB error, but we check the status first to be safe.
 Check if the xHC generated the interrupt, or the irq is shared 
	
	  Clear the op reg interrupt status first,
	  so we can receive interrupts from other MSI-X interrupters.
	  Write 1 to clear the interrupt status.
		 Clear the event handler busy flag (RW1C);
		  the event ring should be empty.
	 FIXME this should be a delayed service routine
	  that clears the EHB.
 ring is half-full, force isoc trbs to interrupt more often 
		Endpoint Ring Operations	
  Generic function for queueing a TRB on a ring.
  The caller must have checked to make sure there's room on the ring.
  @more_trbs_coming:	Will you enqueue more TRBs before calling
 			prepare_transfer()?
 make sure TRB is fully written before giving it to the controller 
  Does various checks on the endpoint ring, and makes it ready to queue num_trbs.
  FIXME allocate segments if the ring is full.
 Make sure the endpoint has been added to xHC schedule 
		
		  USB core changed configinterfaces without notifying us,
		  or hardware is reporting the wrong state.
 FIXME event handling code for error needs to clear it 
 XXX not sure if this should be -ENOENT or not 
		
		  FIXME issue Configure Endpoint command to try to get the HC
		  back into a known state.
		 If we're not dealing with 0.95 hardware or isoc rings
		  on AMD 0.96 host, clear the chain bit.
 Toggle the cycle bit after the last ring segment. 
 prevent infinite loop if all first trbs are link trbs 
 Add this TD to the tail of the endpoint ring's TD list 
	
	  Pass all the TRBs to the hardware at once and make sure this write
	  isn't reordered.
 Convert to microframes 
	 FIXME change this to a warning and a suggestion to use the new API
	  to set the polling interval (once the API is added).
 Convert back to frames for LSFS devices 
  xHCI uses normal TRBs for both bulk and interrupt.  When the interrupt
  endpoint is to be serviced, the xHC will consume (at most) one TD.  A TD
  (comprised of sg list entries) can take several service intervals to
  transmit.
  For xHCI 1.0 host controllers, TD size is the number of max packet sized
  packets remaining in the TD (not including this TRB).
  Total TD packet count = total_packet_count =
      DIV_ROUND_UP(TD size in bytes  wMaxPacketSize)
  Packets transferred up to and including this TRB = packets_transferred =
      rounddown(total bytes transferred including this TRB  wMaxPacketSize)
  TD size = total_packet_count - packets_transferred
  For xHCI 0.96 and older, TD size field should be the remaining bytes
  including this TRB, right shifted by 10
  For all hosts it must fit in bits 21:17, so it can't be bigger than 31.
  This is taken care of in the TRB_TD_SIZE() macro
  The last TRB in a TD must have the TD size set to zero.
 MTK xHCI 0.96 contains some features from 1.0 
 One TRB with a zero-length data packet. 
 for MTK xHCI 0.96, TD size include this TRB, but not in 1.x 
 Queueing functions don't count the current TRB into transferred 
 we got lucky, last normal TRB data on segment is packet aligned 
 is the last nornal TRB alignable by splitting it 
	
	  We want enqd_len + trb_buff_len to sum up to a number aligned to
	  number which is divisible by the endpoint's wMaxPacketSize. IOW:
	  (size of currently enqueued TRBs + remainder) % wMaxPacketSize == 0.
 create a max max_pkt sized bounce buffer pointed to by last trb 
 try without aligning. Some host controllers survive 
 This is very similar to what ehci-q.c qtd_fill() does 
 If we have scattergather list, we use it. 
 Deal with URB_ZERO_PACKET - need one more tdtrb 
	
	  Don't give the first TRB to the hardware (by toggling the cycle bit)
	  until we've finished creating all the other TRBs.  The ring's cycle
	  state may change as we enqueue the other TRBs, so save it too.
 Queue the TRBs, even if they are zero-length 
 TRB buffer should not cross 64KB boundaries 
 Don't change the cycle bit of the first TRB until later 
		 Chain all the TRBs together; clear the chain bit in the last
		  TRB to indicate it's the last TRB in the chain.
 assuming TD won't span 2 segs 
 Only set interrupt on short packet for IN endpoints 
 Set the TRB length, TD size, and interrupter fields. 
 New sg entry 
 Caller must have locked xhci->lock 
	
	  Need to copy setup packet into setup TRB, so we can't use the setup
	  DMA address.
 1 TRB for setup, 1 for status 
	
	  Don't need to check if we need additional event data and normal TRBs,
	  since data in control transfers will never get bigger than 16MB
	  XXX: can we get a buffer that crosses 64KB boundaries?
	
	  Don't give the first TRB to the hardware (by toggling the cycle bit)
	  until we've finished creating all the other TRBs.  The ring's cycle
	  state may change as we enqueue the other TRBs, so save it too.
 Queue setup TRB - see section 6.4.1.2.1 
 FIXME better way to translate setup_packet into two u32 fields? 
 xHCI 1.01.1 6.4.1.2.1: Transfer Type field 
 Immediate data in pointer 
 If there's data, queue data TRBs 
 Only set interrupt on short packet for IN endpoints 
 Save the DMA address of the last TRB in the TD 
 Queue status TRB - see Table 7 and sections 4.11.2.2 and 6.4.1.2.3 
 If the device sent data, the status stage is an OUT transfer 
 Event on completion 
  The transfer burst count field of the isochronous TRB defines the number of
  bursts that are required to move all packets in this TD.  Only SuperSpeed
  devices can burst up to bMaxBurst number of packets per service interval.
  This field is zero based, meaning a value of zero in the field means one
  burst.  Basically, for everything but SuperSpeed devices, this field will be
  zero.  Only xHCI 1.0 host controllers support this field.
  Returns the number of packets in the last "burst" of packets.  This field is
  valid for all speeds of devices.  USB 2.0 devices can only do one "burst", so
  the last burst packet count is equal to the total number of packets in the
  TD.  SuperSpeed endpoints can have up to 3 bursts.  All but the last burst
  must contain (bMaxBurst + 1) number of packets, but the last burst can
  contain 1 to (bMaxBurst + 1) packets.
 bMaxBurst is zero based: 0 means 1 packet per burst 
		 If residue is zero, the last burst contains (max_burst + 1)
		  number of packets, but the TLBPC field is zero-based.
  Calculates Frame ID field of the isochronous TRB identifies the
  target frame that the Interval associated with this Isochronous
  Transfer Descriptor will start on. Refer to 4.11.2.5 in 1.1 spec.
  Returns actual frame id on success, negative value on error.
	 Isochronous Scheduling Threshold (IST, bits 0~3 in HCSPARAMS2):
	 
	  If bit [3] of IST is cleared to '0', software can add a TRB no
	  later than IST[2:0] Microframes before that TRB is scheduled to
	  be executed.
	  If bit [3] of IST is set to '1', software can add a TRB no later
	  than IST[2:0] Frames before that TRB is scheduled to be executed.
	 Software shall not schedule an Isoch TD with a Frame ID value that
	  is less than the Start Frame ID or greater than the End Frame ID,
	  where:
	 
	  End Frame ID = (Current MFINDEX register value + 895 ms.) MOD 2048
	  Start Frame ID = (Current MFINDEX register value + IST + 1) MOD 2048
	 
	  Both the End Frame ID and Start Frame ID values are calculated
	  in microframes. When software determines the valid Frame ID value;
	  The End Frame ID value should be rounded down to the nearest Frame
	  boundary, and the Start Frame ID value should be rounded up to the
	  nearest Frame boundary.
 Check if we should generate event interrupt for a TD in an isoc URB 
 always generate an event interrupt for the last TD 
	
	  If AVOID_BEI is set the host handles full event rings poorly,
	  generate an event at least every 8th TD to clear the event ring
 This is for isoc transfer 
 Queue the TRBs for each TD, even if they are zero-length 
 A zero-length transfer still involves at least one packet. 
 use SIA as default, if frame id is used overwrite it 
		
		  Set isoc specific data for the first TRB in a TD.
		  Prevent HW from getting the TRBs by keeping the cycle state
		  inverted in the first TDs isoc TRB.
 xhci 1.1 with ETE uses TD_Size field for TBC, old is Rsvdz 
 fill the rest of the TRB fields, and remaining normal TRBs 
 only first TRB is isoc, overwrite otherwise 
 Only set interrupt on short packet for IN EPs 
 Set the chain bit for all except the last TRB  
 Calculate TRB length 
 Set the TRB length, TD size, & interrupter fields. 
 xhci 1.1 with ETE uses TD Size field for TBC 
 Check TD length 
 store the next frame id 
 Clean up a partially enqueued isoc transfer. 
	 Use the first TD as a temporary variable to turn the TDs we've queued
	  into No-ops with a software-owned cycle bit. That way the hardware
	  won't accidentally start executing bogus TDs when we partially
	  overwrite them.  td->first_trb and td->start_seg are already set.
 Every TRB except the first & last will have its cycle bit flipped. 
 Reset the ring enqueue back to the first TRB and its cycle bit. 
  Check transfer ring to guarantee there is enough room for the urb.
  Update ISO URB start_frame and interval.
  Update interval as xhci_queue_intr_tx does. Use xhci frame_index to
  update urb->start_frame if URB_ISO_ASAP is set in transfer_flags or
  Contiguous Frame ID is not supported by HC.
	 Check the ring to guarantee there is enough room for the whole urb.
	  Do not insert any td of the urb to the ring if the check failed.
	
	  Check interval value. This should be done before we start to
	  calculate the start frame value.
 Calculate the start frame and put it in urb->start_frame. 
	
	  Round up to the next frame and consider the time before trb really
	  gets scheduled by hardare.
	
	  Round up to the next ESIT (Endpoint Service Interval Time) if ESIT
	  is greate than 8 microframes.
		Command Ring Operations		
 Generic function for queueing a command TRB on the command ring.
  Check to make sure there's room on the command ring for one command TRB.
  Also check that there's room reserved for commands that must not fail.
  If this is a command that must not fail, meaning command_must_succeed = TRUE,
  then only check for the number of reserved spots.
  Don't decrement xhci->cmd_ring_reserved_trbs after we've queued the TRB
  because the command event handler may want to resubmit a failed command.
 if there are no other commands queued we start the timeout timer 
 Queue a slot enable or disable request on the command ring 
 Queue an address device command TRB 
 Queue a reset device command TRB 
 Queue a configure endpoint command TRB 
 Queue an evaluate context command TRB 
  Suspend is set to indicate "Stop Endpoint Command" is being issued to stop
  activity on an endpoint that is about to be suspended.
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
   Copyright (C) 2004 SAN People (Pty) Ltd.
   Copyright (C) 2005 Thibaut VARENE <varenet@parisc-linux.org>
  AT91 Bus Glue
  Based on fragments of 2.4 driver by Rick Bronson.
  Based on ohci-omap.c
  This file is licenced under the GPL.
 interface, function and usb clocks; sometimes also an AHB clock 
 number of ports on root hub 
 Saved wake-up state for resume 
 interface and function clocks; sometimes also an AHB clock 
-------------------------------------------------------------------------
	
	  Start the USB clocks.
	
	  The USB host controller must remain in reset.
	
	  Put the USB host controller into reset.
	
	  Stop the USB clocks.
-------------------------------------------------------------------------
 configure so an HC device and id are always provided 
 always called with process context; sleeping is OK 
  usb_hcd_at91_probe - initialize AT91-based HCDs
  @driver:	Pointer to hc driver instance
  @pdev:	USB controller to probe
  Context: task context, might sleep
  Allocates basic resources for this USB host controller, and
  then invokes the start() method for the HCD associated with it
  through the hotplug entry's driver_data.
	
	  The RemoteWakeupConnected bit has to be set explicitly
	  before calling ohci_run. The reset value of this bit is 0.
 Error handling 
 may be called with controller, bus, and devices active 
  usb_hcd_at91_remove - shutdown processing for AT91-based HCDs
  @hcd:	USB controller to remove
  @pdev:	Platform device required for cleanup
  Context: task context, might sleep
  Reverses the effect of usb_hcd_at91_probe(), first invoking
  the HCD's stop() method.  It is always called from a thread
  context, "rmmod" or something similar.
-------------------------------------------------------------------------
  Update the status data from the hub with the over-current indicator change.
  Look at the control requests to the root hub and see if we need to override.
 update the hub's descriptor 
		 remove the old configurations for power-switching, and
		  over-current protection, and insert our new configuration
 check port status 
-------------------------------------------------------------------------
	 From the GPIO notifying the over-current situation, find
	 When notified of an over-current situation, disable power
	   on the corresponding port, and mark this port in
 sentinel  }
-------------------------------------------------------------------------
	 Right now device-tree probed devices don't get dma_mask set.
	  Since shared usb code relies on it, set it here for now.
	  Once we have dma capability bindings this can go away.
	
	  Disable wakeup if we are going to sleep with slow clock mode
	  enabled.
	
	  The integrated transceivers seem unable to notice disconnect,
	  reconnect, or wakeup without the 48 MHz clock active.  so for
	  correctness, always discard connection state (using reset).
	 
	  REVISIT: some boards will be able to turn VBUS off...
 flush the writes 
	
	  The Atmel HW has some unusual quirks, which require Atmel-specific
	  workarounds. We override certain hc_driver functions here to
	  achieve that. We explicitly do not enhance ohci_driver_overrides to
	  allow this more easily, since this is an unusual case, and we don't
	  want to encourage others to override these functions by making it
	  too easy.
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2002 David Brownell <dbrownell@users.sourceforge.net>
  (C) Copyright 2002 Hewlett-Packard Company
  (C) Copyright 2006 Sylvain Munaut <tnt@246tNt.com>
  Bus glue for OHCI HC on the of_platform bus
  Modified for of_platform bus from ohci-sa1111.c
  This file is licenced under the GPL.
	
	  generic hardware linkage
	
	  basic lifecycle operations
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
 by now, 440epx is known to show usb_23 erratum 
	 Work around - At this point ohci_run has executed, the
	 controller is running, everything, the root ports, etc., is
	 set up.  If the ehci driver is loaded, put the ohci core in
	 the suspended state.  The ehci driver will bring it out of
	 suspended state when  if a non-high speed USB device is
	 attached to the USB Host port.  If the ehci driver is not
	 loaded, do nothing. request_mem_region is used to test if
	 the ehci driver is loaded.
 SPDX-License-Identifier: GPL-2.0
  ST OHCI driver
  Copyright (C) 2014 STMicroelectronics â All Rights Reserved
  Author: Peter Griffin <peter.griffin@linaro.org>
  Derived from ohci-platform.c
	 some SoCs don't have a dedicated 48Mhz clock, but those that do
	 some SoCs don't have a dedicated 48Mhz clock, but those that
 CONFIG_PM_SLEEP 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  driver for NXP USB Host devices
  Currently supported OHCI host devices:
  - NXP LPC32xx
  Authors: Dmitry Chigirev <source@mvista.com>
 	    Vitaly Wool <vitalywool@gmail.com>
  register initialization is based on code examples provided by Philips
  Copyright (c) 2005 Koninklijke Philips Electronics N.V.
  NOTE: This driver does not have suspendresume functionality
  This driver is intended for engineering development purposes only
  2005-2006 (c) MontaVista Software, Inc.
 USB_OTG_STAT_CONTROL bit defines 
 On LPC32xx, those are undefined 
 LPC32XX only supports DAT_SE0 USB mode 
 This sequence is important 
 Disable transparent UART mode first 
 Enable USB host clock 
 work with hotplug and coldplug 
 SPDX-License-Identifier: GPL-1.0+
  Open Host Controller Interface (OHCI) driver for USB.
  Maintainer: Alan Stern <stern@rowland.harvard.edu>
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2004 David Brownell <dbrownell@users.sourceforge.net>
  [ Initialisation is based on Linus'  ]
  [ uhci code and gregs ohci fragments ]
  [ (C) Copyright 1999 Linus Torvalds  ]
  [ (C) Copyright 1999 Gregory P. Smith]
  OHCI is the main "non-IntelVIA" standard for USB 1.1 host controller
  interfaces (though some non-x86 Intel chips use it).  It supports
  smarter hardware than UHCI.  A download link for the spec available
  through the https:www.usb.org website.
  This file is licenced under the GPL.
-------------------------------------------------------------------------
 For initializing controller (mask in an HCFS mode too) 
 On PA-RISC, PDC can leave IR set incorrectly; ignore it there. 
 OMAP doesn't support IR (no SMM; not needed) 
-------------------------------------------------------------------------
  On architectures with edge-triggered interrupts we must never return
  IRQ_NONE.
 ... or other edge-triggered systems 
 Some boards misreport power switchingovercurrent 
 Some boards leave IR set wrongly, since they fail BIOSSMM handshakes 
-------------------------------------------------------------------------
 Scatter-gather transfer 
 Non-SG transfer 
 one TD for every 4096 Bytes (could be up to 8K) 
  queue up an urb for anything except the root hub
 every endpoint has a ed, locate and maybe (re)initialize it 
 for the private part of the URB we need the number of TDs (size) 
 td_submit_urb() doesn't yet handle these 
 1 TD for setup, 1 for ACK, plus ... 
 case PIPE_INTERRUPT:
 case PIPE_BULK:
 maybe a zero-length packet to wrap it up 
 number of packets from URB 
 allocate the private part of the URB 
 allocate the TDs (deferring hash chain updates) 
 don't submit to a dead HC 
 schedule the ed if needed 
 Start up the IO watchdog timer, if it's not running 
 delay a few frames before the first TD 
 Behind the scheduling threshold? 
 URB_ISO_ASAP: Round up to the first available slot 
			
			  Not ASAP: Use the next slot in the stream,
			  no matter what.
				
				  Some OHCI hardware doesn't handle late TDs
				  correctly.  After retiring them it proceeds
				  to the next ED instead of the next TD.
				  Therefore we have to omit the late TDs
				  entirely.
 Mark it 
	 fill the TDs and link them to the ed; and
	  enable that part of the schedule, if needed
	  and update count of queued periodic urbs
  decouple the URB from the HC queues (TDs, urb_priv).
  reporting is always done
  asynchronously, and we might be dealing with an urb that's
  partially transferred, or an ED with other urbs being unlinked.
		 Unless an IRQ completed the unlink while it was being
		  handed to us, flag it for unlink and giveback, and force
		  some upcoming INTR_SF to call finish_unlinks()
 With HC dead, we can clean up right away 
-------------------------------------------------------------------------
 frees configaltsetting state for endpoints,
  including ED memory, dummy TD, and bulkintr data toggle
 ASSERT:  any requestsurbs are being unlinked 
 ASSERT:  nobody can be submitting urbs for this any more 
 wait for hw to finish? 
 major IRQ delivery trouble loses INTR_SF too... 
 fully unlinked 
		 caller was supposed to have unlinked any requests;
		  that's not our job.  can't recover; must leak ed.
 ohci_shutdown forcibly disables IRQs and DMA, helping kexec and
  other cases where the next software may expect clean state from the
  "firmware".  this is bus-neutral, unlike shutdown() methods.
 Software reset, after which the controller goes into SUSPEND 
 flush the writes 
-------------------------------------------------------------------------
  HC functions
 init memory, and kick BIOSSMM off 
 Accept arbitrarily long scatter-gather lists 
	 REVISIT this BIOS handshake is now moved into PCI "quirks", and
	  was never needed for most non-PCI systems ... remove the code?
 SMM owns the HC?  not for long! 
		 this timeout is arbitrary.  we make it long, so systems
		  depending on usb keyboards may be usable even if the
		  BIOSSMM code seems pretty broken.
 arbitrary: five seconds 
 Disable HC interrupts 
 flush the writes, and save key bits like RWC 
 Read the number of ports unless overridden 
-------------------------------------------------------------------------
 Start an OHCI controller, set the BUS operational
  resets USB and controller
  enable interrupts
 boot firmware should have set this up (5.1.1.3.1) 
 also: powerovercurrent flags in roothub.a 
	 Reset USB nearly "by the book".  RemoteWakeupConnected has
	  to be checked in case boot firmware (BIOSSMM...) has set up
	  wakeup in a way the bus isn't aware of (e.g., legacy PCI PM).
	  If the bus glue detected wakeup capability then it should
	  already be enabled; if so we'll just enable it again.
 msec wait ;
 case OHCI_USB_RESET:
 msec wait ;
 flush the writes
 2msec timelimit here means no irqspreempt 
 HC Reset requires max 10 us delay 
 ... allow extra time 
	 now we're in the SUSPEND state ... must go OPERATIONAL
	  within 2msec else HC enters RESUME
	 
	  ... but some hardware won't init fmInterval "by the book"
	  (SiS, OPTi ...), so reset again instead.  SiS doesn't need
	  this if we write fmInterval after we're OPERATIONAL.
	  Unclear about ALi, ServerWorks, and others ... this could
	  easily be a longstanding bug in chip init on Linux.
 flush those writes
	 Tell the controller where the control and bulk lists are
 a reset clears this 
	 some OHCI implementations are finicky about how they init.
	  bogus values here mean not even enumeration could work.
 use rhsc irqs after hub_wq is allocated 
 start controller operations 
 wake on ConnectStatusChange, matching external hubs 
 Choose the interrupts we care about now, others later on demand 
 handle root hub init quirks ... 
 Configure for per-port over-current protection by default 
		 NSC 87560 and maybe others.
		  Ganged power switching, no over-current protection.
		 hub power always on; required for AMD-756 and some
		  Mac platforms.
 flush those writes
 POTPGT delay is bits 24-31, in 2 ms units.
 ohci_setup routine for generic controller initialization 
 ohci_start routine for generic controller start of all OHCI bus glue 
-------------------------------------------------------------------------
  Some OHCI controllers are known to lose track of completed TDs.  They
  don't add the TDs to the hardware done queue, which means we never see
  them as being completed.
  This watchdog routine checks for such problems.  Without some way to
  tell when those TDs have completed, we would never take their EDs off
  the unlink list.  As a result, URBs could never be dequeued and
  endpoints could never be released.
	
	  One way to lose track of completed TDs is if the controller
	  never writes back the done queue head.  If it hasn't been
	  written back since the last time this function ran and if it
	  was non-empty at that time, something is badly wrong with the
	  hardware.
 No write back because the done queue was empty 
 Check every ED which might have pending TDs 
 Starting from the latest pending TD, 
 or the last TD on the done list, 
 find the last TD processed by the controller. 
 head pointer has passed this TD 
			
			  In case a WDH cycle is in progress, we will wait
			  for the next two cycles to complete before assuming
			  this TD will never get on the done queue.
		
		  Sometimes a controller just stops working.  We can tell
		  by checking that the frame counter has advanced since
		  the last time we ran.
		 
		  But be careful: Some controllers violate the spec by
		  stopping their frame counter when no ports are active.
 Enabled and not suspended? 
 an interrupt happens 
	 Read interrupt status (and flush pending writes).  We ignore the
	  optimization of checking the LSB of hcca->done_head; it doesn't
	  work on all systems (edge triggering for OHCI can be a factor).
	 Check for an all 1's result which is a typical consequence
	  of dead, unclocked, or unplugged (CardBus...) devices
 We only care about interrupts that are enabled 
 interrupt for some other device? 
 e.g. due to PCI MasterTarget Abort
			 Workaround for a silicon bug in some NEC chips used
			  in Apple's PowerBooks. Adapted from Darwin code.
		 NOTE: Vendors didn't always make the same implementation
		  choices for RHSC.  Many followed the spec; RHSC triggers
		  on an edge, like setting and maybe clearing a port status
		  change bit.  With others it's level-triggered, active
		  until hub_wq clears all the port status change bits.  We'll
		  always disable it here and rely on polling until hub_wq
		  re-enables it.
	 For connect and disconnect events, we expect the controller
	  to turn on RHSC along with RD.  But for remote wakeup events
	  this might not happen.
 could track INTR_SO to reduce available PCI... bandwidth 
	 handle any pending URBED unlinks, leaving INTR_SF enabled
	  when there's still unlinking to be done (next frame).
 flush those writes
-------------------------------------------------------------------------
-------------------------------------------------------------------------
 must not be called from interrupt context 
 Recycle any "live" edstds (and urbs). 
 paranoia, in case that didn't work: 
 empty the interrupt branches 
 no EDs to remove 
 empty control and bulk lists 
	 Disable irq emission and mark HW unaccessible. Use
	  the spinlock to properly synchronize with possible pending
	  RH suspend or resume activity.
 Make sure resume from hibernation re-enumerates everything 
 See if the controller is already running or has been reset 
 If needed, reinitialize and suspend the root hub 
 Normally just turn on port power and enable interrupts 
-------------------------------------------------------------------------
  Generic structure: This gets copied for platform drivers so that
  individual entries can be overridden as needed.
	
	  generic hardware linkage
	
	 basic lifecycle operations
	
	  managing io requests and associated device resources
	
	 scheduling support
	
	 root hub support
 Copy the generic table to drv and then apply the overrides 
-------------------------------------------------------------------------
 Error path 
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2002 David Brownell <dbrownell@users.sourceforge.net>
  (C) Copyright 2002 Hewlett-Packard Company
  SA1111 Bus Glue
  Written by Christopher Hoover <ch@hpl.hp.com>
  Based on fragments of previous driver by Russell King et al.
  This file is licenced under the GPL.
	
	  generic hardware linkage
	
	  basic lifecycle operations
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
	
	  Configure the power sense and control lines.  Place the USB
	  host controller in reset.
	
	  Now, carefully enable the USB clock, and take
	  the USB host controller out of reset.
	
	  Put the USB host controller into reset.
	
	  Stop the USB clock.
  ohci_hcd_sa1111_probe - initialize SA-1111-based HCDs
  Allocates basic resources for this USB host controller, and
  then invokes the start() method for the HCD associated with it.
	
	  We don't call dma_set_mask_and_coherent() here because the
	  DMA mask has already been appropraitely setup by the core
	  SA-1111 bus code (which includes bug workarounds.)
  ohci_hcd_sa1111_remove - shutdown processing for SA-1111-based HCDs
  @dev: USB Host Controller being removed
  Reverses the effect of ohci_hcd_sa1111_probe(), first invoking
  the HCD's stop() method.
 SPDX-License-Identifier: GPL-2.0+
 Faraday FOTG210 EHCI-like driver
  Copyright (c) 2013 Faraday Technology Corporation
  Author: Yuan-Hsin Chen <yhchen@faraday-tech.com>
 	   Feng-Hsin Chiang <john453@faraday-tech.com>
 	   Po-Yu Chuang <ratbert.chuang@gmail.com>
  Most of code borrowed from the Linux-3.7 EHCI driver
 magic numbers that can affect system performance 
 0-3 qtd retries; 0 == don't stop 
 nak throttle; see 4.9 
 1-3 transactionsuframe; 4.10.3 
 Some drivers think it's safe to schedule isochronous transfers more than 256
  ms into the future (partly as a result of an old bug in the scheduling
  code).  In an attempt to avoid trouble, we will use a minimum scheduling
  length of 512 frames instead of 256.
 (medium) 512-frame schedule 
 Initial IRQ latency:  faster than hw default 
 0 to 6 
 initial park setting:  slower than hw default 
 for link power management(LPM) feature 
 check the values in the HCSPARAMS register (host controller _Structural_
  parameters) see EHCI spec, Table 2-4 for each value
 check the values in the HCCPARAMS register (host controller _Capability_
  parameters) see EHCI Spec, Table 2-5 for each value
 signaling state 
 low speed 
device address 
 functions have the "wrong" filename when they're output... 
 troubleshooting help: expose state in debugfs 
 fill method 
 protect filling of buffer 
 number of characters filled into buffer 
 tries to advance through hw_alt_next 
 NEC does this 
 qh_alt_next controls qh advance? 
 blocked 
 use hw_qtd_next 
 else alt_next points to some other qtd 
 hc may be modifying the list as we read it ... 
	 dumps a snapshot of the async schedule.
	  usually empty except for long-term bulk reads, or head.
	  one QH per line, and TDs we know about
 count tds, get ep direction 
 count tds, get ep direction 
	 dump a snapshot of the periodic schedule.
	  iso changes, interrupt usually doesn't.
 uframe masks 
 don't repeat what follows this qh 
 show more info the first time around 
 Capability Registers 
 FIXME interpret both types of params 
 Operational Registers 
 handshake - spin reading hc until handshake completes or fails
  @ptr: address of hc register to be read
  @mask: bits to look at in result of read
  @done: value of those bits when handshake succeeds
  @usec: timeout in microseconds
  Returns negative errno, or zero on success
  Success happens when the "mask" bits have the specified value (hardware
  handshake done).  There are two failure modes:  "usec" have passed (major
  hardware flakeout), or the register reads as all-ones (hardware removed).
  That last failure should_only happen in cases like physical cardbus eject
  before driver shutdown. But it also seems to be caused by bugs in cardbus
  bridge shutdown:  shutting down the bridge before the devices using it.
 card removed 
 Force HC to halt state from unknown (EHCI spec section 2.3).
  Must be called with interrupts enabled and the lock not held.
 disable any irqs left enabled by previous code 
	
	  This routine gets called during probe before fotg210->command
	  has been initialized, so we can't rely on its value.
 Reset a non-running (STS_HALT == 1) controller.
  Must be called with interrupts enabled and the lock not held.
	 If the EHCI debug controller is active, special care must be
	  taken before and after a host controller reset
 Idle the controller (turn off the schedules).
  Must be called with interrupts enabled and the lock not held.
 wait for any schedule enablesdisables to take effect 
 then disable anything that's still active 
 hardware can take 16 microframes to turn off ... 
 Set a bit in the USBCMD register 
 unblock posted write 
 Clear a bit in the USBCMD register 
 unblock posted write 
 EHCI timer support...  Now using hrtimers.
  Lots of different events are triggered from fotg210->hrtimer.  Whenever
  the timer routine runs, it checks each possible event; events that are
  currently enabled and whose expiration time has passed get handled.
  The set of enabled events is stored as a collection of bitflags in
  fotg210->enabled_hrtimer_events, and they are numbered in order of
  increasing delay values (ranging between 1 ms and 100 ms).
  Rather than implementing a sorted list or tree of all pending events,
  we keep track only of the lowest-numbered pending event, in
  fotg210->next_hrtimer_event.  Whenever fotg210->hrtimer gets restarted, its
  expiration time is set to the timeout value for this event.
  As a result, events might not get handled right away; the actual delay
  could be anywhere up to twice the requested delay.  This doesn't
  matter, because none of the events are especially time-critical.  The
  ones that matter most all have a delay of 1 ms, so they will be
  handled after 2 ms at most, which is okay.  In addition to this, we
  allow for an expiration range of 1 ms.
 Delay lengths for the hrtimer event types.
  Keep this list sorted by delay length, in the same order as
  the event types indexed by enum fotg210_hrtimer_event in fotg210.h.
 FOTG210_HRTIMER_POLL_ASS 
 FOTG210_HRTIMER_POLL_PSS 
 FOTG210_HRTIMER_POLL_DEAD 
 FOTG210_HRTIMER_UNLINK_INTR 
 FOTG210_HRTIMER_FREE_ITDS 
 FOTG210_HRTIMER_ASYNC_UNLINKS 
 FOTG210_HRTIMER_IAA_WATCHDOG 
 FOTG210_HRTIMER_DISABLE_PERIODIC 
 FOTG210_HRTIMER_DISABLE_ASYNC 
 FOTG210_HRTIMER_IO_WATCHDOG 
 Enable a pending hrtimer event 
 Track only the lowest-numbered pending event 
 Poll the STS_ASS status bit; see when it agrees with CMD_ASE 
 Don't enable anything if the controller isn't running (e.g., died) 
 Poll again later, but give up after about 20 ms 
 The status is up-to-date; restart or stop the schedule as needed 
 Stopped 
 Running 
 Turn off the schedule after a while 
 Turn off the async schedule after a brief delay 
 Poll the STS_PSS status bit; see when it agrees with CMD_PSE 
 Don't do anything if the controller isn't running (e.g., died) 
 Poll again later, but give up after about 20 ms 
 The status is up-to-date; restart or stop the schedule as needed 
 Stopped 
 Running 
 Turn off the schedule after a while 
 Turn off the periodic schedule after a brief delay 
 Poll the STS_HALT status bit; see when a dead controller stops 
 Give up after a few milliseconds 
 Try again later 
 Clean up the mess 
 Not in process context, so don't try to reset the controller 
 Handle unlinked interrupt QHs once they are gone from the hardware 
	
	  Process all the QHs on the intr_unlink list that were added
	  before the current unlink cycle began.  The list is in
	  temporal order, so stop when we reach the first entry in the
	  current cycle.  But if the root hub isn't running then
	  process all the QHs on the list.
 Handle remaining entries later 
 Start another free-iTDssiTDs cycle 
 Wait for controller to stop using old iTDs and siTDs 
 Handle lost (or very late) IAA interrupts 
	
	  Lost IAA irqs wedge things badly; seen first with a vt8235.
	  So we need this watchdog, but must protect it against both
	  (a) SMP races against real IAA firing and retriggering, and
	  (b) clean HC shutdown, when IAA watchdog was pending.
		 If we get here, IAA is REALLY late.  It's barely
		  conceivable that the system is so busy that CMD_IAAD
		  is still legitimately set, so let's be sure it's
		  clear before we read STS_IAA.  (The HC should clear
		  CMD_IAAD when it sets STS_IAA.)
		
		  If IAA is set here it either legitimately triggered
		  after the watchdog timer expired (_way_ late, so we'll
		  still count it as lost) ... or a silicon erratum:
		  - VIA seems to set IAA without triggering the IRQ;
		  - IAAD potentially cleared without setting IAA.
 Enable the IO watchdog, if appropriate 
 Not needed if the controller isn't running or it's already enabled 
	
	  Isochronous transfers always need the watchdog.
	  For other sorts we use it only if the flag is set.
 Handler functions for the hrtimer event types.
  Keep this array in the same order as the event types indexed by
  enum fotg210_hrtimer_event in fotg210.h.
 FOTG210_HRTIMER_POLL_ASS 
 FOTG210_HRTIMER_POLL_PSS 
 FOTG210_HRTIMER_POLL_DEAD 
 FOTG210_HRTIMER_UNLINK_INTR 
 FOTG210_HRTIMER_FREE_ITDS 
 FOTG210_HRTIMER_ASYNC_UNLINKS 
 FOTG210_HRTIMER_IAA_WATCHDOG 
 FOTG210_HRTIMER_DISABLE_PERIODIC 
 FOTG210_HRTIMER_DISABLE_ASYNC 
 FOTG210_HRTIMER_IO_WATCHDOG 
	
	  Check each pending event.  If its time has expired, handle
	  the event; otherwise re-enable it.
 if reset finished and it's still not enabled -- handoff 
 with integrated TT, there's nobody to hand it to! 
 build "status change" packet (one or two bytes) from HC registers 
 init status to no-changes 
	 Inform the core about resumes-in-progress by returning
	  a non-zero value even if there are no status changes.
 PORT_RESUME from hardware ~= PORT_STAT_C_SUSPEND 
 no hub change reports (bit 0) for now (power, ...) 
 port N changes (bit N)? 
	
	  Return status information even for ports with OWNER set.
	  Otherwise hub_wq wouldn't see the disconnect event when a
	  high-speed device is switched over to the companion
	  controller by the user.
 FIXME autosuspend idle root hubs 
 fotg210 1.0, 2.3.9 says 20ms max 
 two bitmaps:  ports removable, and usb 1.0 legacy PortPwrCtrlMask 
 per-port overcurrent reporting 
 no power switching 
	
	  FIXME:  support SetPortFeatures USB_PORT_FEAT_INDICATOR.
	  HCS_INDICATOR may say we can change LEDs to offambergreen.
	  (track current state ourselves) ... blink for diagnostics,
	  power, "this is the one", etc.  EHCI spec supports this.
 no hub-wide featurestatus flags 
		
		  Even if OWNER is set, so the port is owned by the
		  companion controller, hub_wq needs to be able to clear
		  the port-change status bits (especially
		  USB_PORT_STAT_C_CONNECTION).
 resume signaling for 20 msec 
 GetPortStatus clears reset 
 no hub-wide featurestatus flags 
cpu_to_le32s ((u32 ) buf); 
 wPortChange bits 
 whoever resumes must GetPortStatus to complete it!! 
 Remote Wakeup received? 
 resume signaling for 20 msec 
 check the port again 
 resume completed? 
 stop resume signaling 
 2ms 
 whoever resets must GetPortStatus to complete it!! 
 force reset to complete 
			 REVISIT:  some hardware needs 550+ usec to clear
			  this bit; seems too long to spin routinely...
 see what we found out 
 restart schedule 
 transfer dedicated ports to the companion hc 
		
		  Even if OWNER is set, there's no harm letting hub_wq
		  see the wPortStatus values (they should all be 0 except
		  for PORT_POWER anyway).
 maybe the port was unsuspended without our knowledge 
 only if wPortChange is interesting 
 no hub-wide featurestatus flags 
			 After above check the port must be connected.
			  Set appropriate bit thus could put phy into low power
			  mode if we have hostpc feature
			 line status bits may report this as low speed,
			  which can be fine if this root hub has a
			  transaction translator built in.
			
			  caller must wait, then call GetPortStatus
			  usb 2.0 spec says 50 ms resets on root
		 For downstream facing ports (these):  one hub port is put
		  into test mode according to USB2 11.24.2.13, then the hub
		  must be reset (which for root hub now means rmmod+modprobe,
		  or else system reboot).  See EHCI 2.3.9 and 4.14 for info
		  about the EHCI-specific stuff.
 Put all enabled ports into suspend 
 "stall" on error 
 There's basically three types of memory:
 	- data used only by the HCD ... kmalloc is fine
 	- async and periodic schedules, shared by HC and HCD ... these
 	  need to use dma_pool or dma_alloc_coherent
 	- driver buffers, readwritten by HC ... single shot DMA mapped
  There's also "register" data (e.g. PCI or SOC), which is memory mapped.
  No memory seen by this driver is pageable.
 Allocate the key transfer structures from the previously allocated pool 
 clean qtds first, and know this is not linked 
 dummy td enables safe urb queuing 
 The queue heads and transfer descriptors are managed from pools tied
  to each of the "per device" structures.
  This is the initialisation and cleanup code.
 DMA consistent memory and pools 
 shadow periodic table 
 remember to add cleanup code (above) if you add anything here 
 QTDs for controlbulkintr transfers 
 byte alignment (for hw parts) ,
 can't cross 4K );
 QHs for controlbulkintr transfers 
 byte alignment (for hw parts) ,
 can't cross 4K );
 ITD for high speed ISO transfers 
 byte alignment (for hw parts) ,
 can't cross 4K );
 Hardware periodic table 
 software shadow of hardware table 
 EHCI hardware queue manipulation ... the core.  QHQTD manipulation.
  Control, bulk, and interrupt traffic all use "qh" lists.  They list "qtd"
  entries describing USB transactions, max 16-20kBentry (with 4kB-aligned
  buffers needed for the larger number).  We use one QH per endpoint, queue
  multiple urbs (all three types) per endpoint.  URBs may need several qtds.
  ISO traffic uses "ISO TD" (itd) records, and (along with
  interrupts) needs careful scheduling.  Performance improvements can be
  an ongoing challenge.  That's in "ehci-sched.c".
  USB 1.1 devices are handled (a) by "companion" OHCI or UHCI root hubs,
  or otherwise through transaction translators (TTs) in USB 2.0 hubs using
  (b) special fields in qh entries or (c) split iso entries.  TTs will
  buffer lowfull speed data so the host collects it at high speed.
 fill a qtd, returning how much of the buffer we were able to queue up 
 one buffer entry per 4K ... first might be short or unaligned 
 rest of that page 
 ... iff needed 
 per-qtd limit: from 16K to 20K (best alignment) 
 short packets may only terminate transfers 
 writes to an active overlay are unsafe 
	 Except for control endpoints, we make hardware maintain data
	  toggle (like OHCI) ... here (re)initialize the toggle in the QH,
	  and set the pseudo-toggle in udev. Only usb_clear_halt() will
	  ever clear it.
 if it weren't for a common silicon quirk (writing the dummy into the qh
  overlay, so qh->hw_token wrongly becomes inactivehalted), only fault
  recovery (including urb dequeue) would need software changes to a QH...
		
		  first qtd may already be partially processed.
		  If we come here during unlink, the QH overlay region
		  might have reference to the just unlinked qtd. The
		  qtd is updated in qh_completions(). Update the QH
		  overlay here.
	 If an async split transaction gets an error or is unlinked,
	  the TT buffer may be left in an indeterminate state.  We
	  have to clear the TT buffer.
	 
	  Note: this routine is never called for Isochronous transfers.
 count INOUT bytes, not SETUP (even short packets) 
 don't modify error codes 
 force cleanup after short read; not always an error 
 serious "can't proceed" faults reported by the hardware 
 FIXME "must" disable babbling device's port too 
 CERR nonzero + halt --> stall 
		 In theory, more than one of the following bits can be set
		  since they are sticky and the transaction is retried.
		  Which to test first is rather arbitrary.
 fsls interrupt xfer missed the complete-split 
 IN ? 
 hc couldn't read data 
 hc couldn't write data 
 timeout, bad CRC, wrong PID, etc 
 unknown 
 S-mask in a QH means it's an interrupt urb 
 ... update hc-wide periodic stats (for usbfs) 
 report non-error and short read status as zero 
 complete() can reenter this HCD 
 Process and free completed qtds for a qh, returning URBs to drivers.
  Chases up to qh->hw_current.  Returns number of completions called,
  indicating how much "real" work we did.
	 completions (or tasks on other cpus) must never clobber HALT
	  till we've gone through and cleaned everything up, even when
	  they add urbs to this qh's queue or mark them for unlinking.
	 
	  NOTE:  unlinking expects to be done in queue order.
	 
	  It's a bug for qh->qh_state to be anything other than
	  QH_STATE_IDLE, unless our caller is scan_async() or
	  scan_intr().
	 remove de-activated QTDs from front of queue.
	  after faults (including short reads), cleanup this urb
	  then let the queue advance.
	  if queue is stopped, handles unlinks.
 clean up any state from previous QTD ...
 ignore urbs submitted during completions we reported 
 hardware copies qtd out of qh overlay 
 always clean up qtds the hc de-activated 
 Report Data Buffer Error: non-fatal but useful 
			 on STALL, error, and short reads this urb must
			  complete and all its qtds must be recycled.
				 retry transaction errors until we
				  reach the software xacterr limit
					 reset the token in the qtd and the
					  qh overlay (which still contains
					  the qtd) so that we pick up from
					  where we left off
			 magic dummy for some short reads; qh won't advance.
			  that silicon quirk can kick in with this dummy too.
			 
			  other short reads won't stop the queue, including
			  control transfers (status stage handles that) or
			  most other single-qtd reads ... the queue stops if
			  URB_SHORT_NOT_OK was set so the driver submitting
			  the urbs could clean it up.
 stop scanning when we reach qtds the hc is using 
 scan the whole queue for unlinks whenever it stops 
 cancel everything if we halt, suspend, etc 
			 this qtd is active; skip it unless a previous qtd
			  for its urb faulted, or its urb was canceled.
 qh unlinked; token in overlay may be most current 
				 An unlink may leave an incomplete
				  async transaction in the TT buffer.
				  We have to clear it.
		 unless we already know the urb's status, collect qtd status
		  and update count of bytes transferred.  in common short read
		  cases with only one data qtd (including control transfers),
		  queue processing won't halt.  but with two or more qtds (for
		  example, with a 32 KB transfer), when the first qtd gets a
		  short read the second must be removed by hand.
			 As part of lowfull-speed endpoint-halt processing
			  we must clear the TT buffer (11.17.5).
				 The TT's in some hubs malfunction when they
				  receive this request following a STALL (they
				  stop sending isochronous packets).  Since a
				  STALL can't leave the TT buffer in a busy
				  state (if you believe Figures 11-48 - 11-51
				  in the USB 2.0 spec), we won't clear the TT
				  buffer in this case.  Strictly speaking this
				  is a violation of the spec.
		 if we're removing something not at the queue head,
		  patch the hardware queue pointer.
 remove qtd; it's recycled after possible urb completion 
 reinit the xacterr counter for the next qtd 
 last urb's completion might still need calling 
 Do we need to rescan for URBs dequeued during a giveback? 
 If the QH is already unlinked, do the rescan now. 
		 Otherwise we have to wait until the QH is fully unlinked.
		  Our caller will start an unlink if qh->needs_rescan is
		  set.  But if an unlink has already started, nothing needs
		  to be done.
 restore original state; caller must unlink or relink 
	 be sure the hardware's done with the qh before refreshing
	  it after fault cleanup, or recovering from silicon wrongly
	  overlaying the dummy qtd (which reduces DMA chatter).
			 We won't refresh a QH that's linked (after the HC
			  stopped the queue).  That avoids a race:
			   - HC reads first part of QH;
			   - CPU updates that first part and the token;
			   - HC reads rest of that QH, including token
			  Result:  HC gets an inconsistent image, and then
			  DMAs tofrom the wrong memory (corrupting it).
			 
			  That should be rare for interrupt transfers,
			  except maybe high bandwidth ...
 Tell the caller to start an unlink 
 otherwise, unlink already started 
 reverse of qh_urb_transaction:  free a list of TDs.
  used for cleanup after errors, before HC sees an URB's TDs.
 create a list of filled qtds for this URB; won't link into qh.
	
	  URBs map to sequences of QTDs:  one logical transaction
 for split transactions, SplitXState initialized to zero 
 SETUP pid 
 "setup"  << 8), 8);
 ... and always at least one more pid 
 for zero length DATA stages, STATUS is always IN 
 "in"  << 8);
	
	  data transfer stage:  buffer setup
		 urb->transfer_buffer_length may be smaller than the
		  size of the scatterlist (or vice versa)
 "in"  << 8);
 else it's already initted to "out" pid (0 << 8) 
	
	  buffer gets wrapped in one or more qtds;
	  last one may be "short" (including zero len)
	  and may serve as a control status ack
		
		  short reads advance to a "magic" dummy instead of the next
		  qtd ... that forces the queue to stop, for manual cleanup.
		  (this will usually be overridden later.)
 qh makes control packets use qtd toggle; maybe switch it 
	
	  unless the caller requires manual cleanup after short reads,
	  have the alt_next mechanism keep the queue running after the
	  last data qtd (the only one, for control and most other cases).
	
	  control requests may need a terminating data "status" ack;
	  other OUT ones may need a terminating short packet
	  (zero length).
 "in" <--> "out"  
 force DATA1 
 never any data in such packets 
 by default, enable interrupt on urb completion 
 Would be best to create all qh's from config descriptors,
  when each interfacealtsetting is established.  Unlink
  any previous qh and cancel its urbs first; endpoints are
  implicitly reset then (data toggle too).
  That'd mean updating how usbcore talks to HCDs. (2.7?)
 Each QH holds a qtd list; a QH is used for everything except iso.
  For interrupt urbs, the scheduler must set the microframe scheduling
  mask(s) each time the QH gets scheduled.  For highspeed, that's
  just one microframe in the s-mask.  For split interrupt transactions
  there are additional complications: c-mask, maybe FSTNs.
	
	  init endpointdevice data for this QH
	 1024 byte maxpacket is a hardware ceiling.  High bandwidth
	  acts like up to 3KB, but is built from smaller packets.
	 Compute interrupt scheduling parameters just once, and save.
	  - allowing for high bandwidth, how many nsecuframe are used?
	  - split transactions need a second CSPLIT uframe; same question
	  - splits also need a schedule gap (for fulllow speed IO)
	  - qh has a polling interval
	 
	  For controlbulk requests, the HC or TT handles these.
				 NOTE interval 2 or 4 uframes could work.
				  But interval 1 scheduling is simpler, and
				  includes high bandwidth.
 gap is f(FSLS transfer times) 
 FIXME this just approximates SPLITCSPLIT times 
 SPLIT, gap, CSPLIT+DATA 
 SPLIT+DATA, gap, CSPLIT 
 support for tt scheduling, and access to toggles 
 using TT? 
 EPS 0 means "full" 
 for TT 
 toggle from qtd 
		 Some Freescale processors have an erratum in which the
		  port number in the queue head was 0..N-1 instead of 1..N.
		 set the address of the TT; for TDI's integrated
		  root hub tt, leave it zeroed.
 NOTE:  if (PIPE_INTERRUPT) { scheduler sets c-mask } 
 no TT involved 
 usb2 fixed maxpacket 
 toggle from qtd 
			 The USB spec says that high speed bulk endpoints
			  always use 512 byte maxpacket.  But some device
			  vendors decided to ignore that, and MSFT is happy
			  to help them do so.  So now people expect to use
			  such nonconformant devices with Linux too; sigh.
 PIPE_INTERRUPT 
 NOTE:  if (PIPE_INTERRUPT) { scheduler sets s-mask } 
 init as live, toggle clear, advance to dummy 
 Stop waiting to turn off the async schedule 
 Don't start the schedule until ASS is 0 
 The async schedule and async_unlink list are supposed to be empty 
 Don't turn off the schedule until ASS is 1 
 move qh (and its qtds) onto async queue; maybe enable queue.  
 Don't link a QH if there's a Clear-TT-Buffer pending 
 clear halt andor toggle; and maybe recover from silicon quirk 
 splice right after start 
 qtd completions reported later by interrupt 
 For controlbulkinterrupt, return QH with these TDs appended.
  Allocates and initializes the QH if necessary.
  Returns null if it can't allocate a QH it needs to.
  If the QH has TDs (urbs) already, that's great.
 can't sleep here, we have fotg210->lock... 
 control qh may need patching ... 
 usb_reset_device() briefly reverts to address 0 
		 just one way to queue requests: swap with the dummy qtd.
		  only hc or qh_refresh() ever modify the overlay.
			 to avoid racing the HC, use the dummy td instead of
			  the first td of our list (becomes new dummy).  both
			  tds stay deactivated until we're done, when the
			  HC is allowed to fetch the old dummy (4.10.2).
 hc must see the new dummy at list end 
 let the hc process these next qtds 
	 Controlbulk operations through TTs don't need scheduling,
	  the HC and TT handle it when the TT has a buffer ready.
 Add to the end of the list of QHs waiting for the next IAAD 
 Unlink it from the schedule 
	
	  Do nothing if an IAA cycle is already running or
	  if one will be started shortly.
 Do all the waiting QHs at once 
 If the controller isn't running, we don't have to wait for it 
 Avoid recursion 
 Otherwise start a new IAA cycle 
 Make sure the unlinks are all visible to the hardware 
 the async qh for the qtds being unlinked are now gone from the HC 
 Process the idle QHs 
 Start a new IAA cycle if any QHs are waiting for it 
 Unlink all the async QHs that have been empty for a timer cycle 
 Start a new IAA cycle if any QHs are waiting for it 
 QHs that haven't been empty for long enough will be handled later 
 makes sure the async qh will become idle 
 caller must own fotg210->lock 
	
	  If the QH isn't linked then there's nothing we can do
	  unless we were called during a giveback, in which case
	  qh_completions() has to deal with it.
 clean any finished work for this qh 
			
			  Unlinks could happen here; completion reporting
			  drops the lock.  That's why fotg210->qh_scan_next
			  always holds the next qh to scan; if the next qh
			  gets unlinked then fotg210->qh_scan_next is adjusted
			  in single_unlink_async().
	
	  Unlink empty entries, reducing DMA usage as well
	  as HCD schedule-scanning costs.  Delay for any qh
	  we just scanned, there's a not-unusual case that it
	  doesn't stay idle for long.
 EHCI scheduled transaction support:  interrupt, iso, split iso
  These are called "periodic" transactions in the EHCI spec.
  Note that for interrupt transfers, the QHQTD manipulation is shared
  with the "asynchronous" transaction support (controlbulk transfers).
  The only real difference is in how interrupt transfers are scheduled.
  For ISO, we make an "iso_stream" head to serve the same role as a QH.
  It keeps track of every ITD (or SITD) that's linked, and holds enough
  pre-calculated schedule data to make appending to the queue be quick.
 periodic_next_shadow - return "next" pointer on shadow list
  @periodic: host pointer to qhitd
  @tag: hardware tag for type of this record
 our fotg210_shadow.qh is actually software part 
 others are hw parts 
 caller must hold fotg210->lock 
 find predecessor of "ptr"; hw and shadow lists are in sync 
 an interrupt entry (at list end) could have been shared 
	 update shadow and hardware lists ... the old "next" pointers
	  from ptr may still be in use, the caller updates them.
 how many of the uframe's 125 usecs are allocated? 
 is it in the S-mask? 
 ... or C-mask? 
 case Q_TYPE_FSTN: 
			 for "save place" FSTNs, count the relevant INTR
			  bandwidth from the previous frame
 return true iff the device's transaction translator is available
  for a periodic transfer starting at the specified frame, using
  all the uframes in the mask.
 error 
	 note bandwidth wastage:  split never follows csplit
	  (different dev or endpoint) until the next uframe.
	  calling convention doesn't make that distinction.
 "knows" no gap is needed 
 case Q_TYPE_FSTN: 
 collision or error 
 no collision 
 Stop waiting to turn off the periodic schedule 
 Don't start the schedule until PSS is 0 
 Don't turn off the schedule until PSS is 1 
 periodic schedule slots have iso tds (normal or split) first, then a
  sparse tree for active interrupt transfers.
  this just links in a qh; caller guarantees uframe masks are set right.
  no FSTN support (yet; fotg210 0.96+)
 high bandwidth, or otherwise every microframe 
 skip the iso nodes at list head 
		 sorting each branch by period (slow-->fast)
		  enables sharing interior tree nodes
 link in this qh, unless some earlier pass did that 
 update per-qh bandwidth for usbfs 
 maybe enable periodic schedule processing 
	
	  If qh is for a lowfull-speed device, simply unlinking it
	  could interfere with an ongoing split transaction.  To unlink
	  it safely would require setting the QH_INACTIVATE bit and
	  waiting at least one frame, as described in EHCI 4.12.2.5.
	 
	  We won't bother with any of this.  Instead, we assume that the
	  only reason for unlinking an interrupt QH while the current URB
	  is still active is to dequeue all the URBs (flush the whole
	  endpoint queue).
	 
	  If rebalancing the periodic schedule is ever implemented, this
	  approach will no longer be valid.
 high bandwidth, or otherwise part of every microframe 
 update per-qh bandwidth for usbfs 
 qh->qh_next still "live" to HC 
	 If the QH isn't linked then there's nothing we can do
	  unless we were called during a giveback, in which case
	  qh_completions() has to deal with it.
 Make sure the unlinks are visible before starting the timer 
	
	  The EHCI spec doesn't say how long it takes the controller to
	  stop accessing an unlinked interrupt QH.  The timer delay is
	  9 uframes; presumably that will be long enough.
 New entries go at the end of the intr_unlink list 
 Avoid recursive calls 
 reschedule QH iff another request is queued 
		 An error here likely indicates handshake failure
		  or no space left in the schedule.  Neither fault
		  should happen often ...
		 
		  FIXME kill the now-dysfunctional queued urbs
 maybe turn off periodic schedule 
	 complete split running into next frame?
	  given FSTN support, we could sometimes check...
 convert "usecs we need" to "max already claimed" 
	 we "know" 2 and 4 uframe intervals were rejected; so
	  for period 0, check _every_ microframe in the schedule.
 just check the specified uframe, at that period 
 success! 
 FSTN territory? 
	 Make sure this tt's buffer is also available for CSPLITs.
	  We pessimize a bit; probably the typical full speed case
	  doesn't need the second CSPLIT.
	 
	  NOTE:  both SPLIT and CSPLIT could be checked in just
	  one smart pass...
 "first fit" scheduling policy used the first time through,
  or when the previous schedule slot can't be re-used.
 0..(qh->period - 1), or NO_FRAME 
 reuse the previous schedule slots, if we can 
	 else scan the schedule to find a group of slots such that all
	  uframes have enough periodic bandwidth available.
 "normal" case, uframing flexible except with splits 
 qh->period == 0 means every uframe 
 reset S-frame and (maybe) C-frame masks 
 stuff into the periodic schedule 
 get endpoint and transferschedule data 
 get qh and force any scheduling errors 
 then queue the urb's tds to the qh 
 ... update usbfs periodic stats 
 clean any finished work for this qh 
			
			  Unlinks could happen here; completion reporting
			  drops the lock.  That's why fotg210->qh_scan_next
			  always holds the next qh to scan; if the next qh
			  gets unlinked then fotg210->qh_scan_next is adjusted
			  in qh_unlink_periodic().
 fotg210_iso_stream ops work with both ITD and SITD 
	
	  this might be a "high bandwidth" highspeed endpoint,
	  as encoded in the ep descriptor's wMaxPacket field
	 usbfs wants to report the average usecs per frame tied up
	  when transfers on this endpoint are scheduled ...
 if dev->ep[epnum] is a QH, hw is set 
 fotg210_iso_sched ops can be ITD-only or SITD-only 
 how many uframes are needed for these transfers 
	 figure out per-uframe itd fields that we'll need later
	  when we fit new itds into the schedule.
 might need to cross a buffer page within a uframe 
 caller must hold fotg210->lock!
 allocateinit ITDs 
		
		  Use iTDs from the free list, but not iTDs that may
		  still be in use by the hardware.
 temporarily store schedule info in hcpriv 
 can't commit more than uframe_periodic_max usec 
 we know urb->interval is 2^N uframes 
 This scheduler plans almost as far into the future as it has actual
  periodic schedule slots.  (Affected by TUNE_FLS, which defaults to
  "as small as possible" to be cache-friendlier.)  That limits the size
  transfers you can stream reliably; avoid more than 64 msec per urb.
  Also avoid queue depths of less than fotg210's worst irq latency (affected
  by the per-urb URB_NO_INTERRUPT hint, the log2_irq_thresh module parameter,
  and other factors); or more than about 230 msec total (for portability,
  given FOTG210_TUNE_FLS and the slop).  Or, write a smarter scheduler!
 microframes 
	 Typical case: reuse current schedule, stream is still active.
	  Hopefully there are no gaps from the host falling behind
	  (irq delays etc), but if there are we'll take the next
	  slot in the schedule, implicitly assuming URB_ISO_ASAP.
		 For high speed devices, allow scheduling within the
		  isochronous scheduling threshold.  For full speed devices
		  and Intel PCI-based controllers, don't (work around for
		  Intel ICH9 bug).
		 Fell behind (by up to twice the slop amount)?
		  We decide based on the time of the last currently-scheduled
		  slot, not the time of the next available slot.
	 need to schedule; when's the next (u)frame we could start?
	  this is bigger than fotg210->i_thresh allows; scheduling itself
	  isn't free, the slop should handle reasonably slow cpus.  it
	  can also help high bandwidth if the dma and irq loads don't
	  jump until after the queue is primed.
 NOTE:  assumes URB_ISO_ASAP, to limit complexitybugs 
		 find a uframe slot with enough bandwidth.
		  Early uframes are more precious because full-speed
		  iso IN transfers can't use late uframes,
		  and therefore they should be allocated last.
 check schedule: enough space? 
 no room in the schedule 
 Tried to schedule too far into the future? 
 report high speed start in uframes; full speed, in frames 
 Make sure scan_isoc() sees these 
 it's been recently zeroed 
 All other fields are filled when scheduling 
 iso_frame_desc[].offset must be strictly increasing 
 skip any iso nodes which might belong to previous microframes 
 fit urb's itds into the selected schedule slot; activate as needed 
 fill iTDs uframe by uframe 
 ASSERT:  we have all necessary itds 
 ASSERT:  no itds for this endpoint in this uframe 
 link completed itds into the schedule 
 don't need that schedule data any more 
 Process and recycle a completed ITD.  Return true iff its urb completed,
  and hence its completion callback probably added things to the hardware
  schedule.
  Note that we carefully avoid recycling this descriptor until after any
  completion callback runs, so that it won't be reused quickly.  That is,
  assuming (a) no more than two urbs per frame on this endpoint, and also
  (b) only this endpoint's completions submit URBs.  It seems some silicon
  corrupts things if you reuse completed descriptors very quickly...
 for each uframe with a packet 
 report transfer status 
 hc couldn't read 
 hc couldn't write 
 (t & FOTG210_ISOC_XACTERR) 
 HC need not update length with this error 
 URB was too late 
 handle completion now? 
	 ASSERT: it's really the last itd for this urb
	  list_for_each_entry (itd, &stream->td_list, itd_list)
	 	BUG_ON (itd->urb == urb);
 give urb back to the driver; completion often (re)submits 
 Add to the end of the free list for later reuse 
 Recycle the iTDs when the pipeline is empty (ep no longer in use) 
 Get iso_stream head 
 allocate ITDs wo locking anything 
 schedule ... need to lock 
 scan each element in frame's queue for completions 
			 If this ITD is still active, leave it for
			  later processing ... check the next entry.
			  No need to check for activity unless the
			  frame is current.
			 Take finished ITDs out of the schedule
			  and process them:  recycle, maybe report
			  URB completion.  HC won't cache the
			  pointer for much longer, if at all.
 End of the iTDs and siTDs 
 assume completion callbacks modify the queue 
	
	  When running, scan from last scan point up to "now"
	  else clean up by scanning everything that's left.
	  Touches as few pages as possible:  cache-friendly.
 Stop when we have reached the current frame 
 Display  Set uframe_periodic_max
	
	  lock, so that our checking does not race with possible periodic
	  bandwidth allocation through submitting new urbs.
	
	  for request to decrease max periodic bandwidth, we have to check
	  every microframe in the schedule to see whether the decrease is
	  possible.
 increasing is always ok 
 On some systems, leaving remote wakeup enabled prevents system shutdown.
  The firmware seems to think that powering off is a wakeup event!
  This routine turns off remote wakeup and everything else, on all ports.
 Halt HC, turn off all ports, and let the BIOS use the companion controllers.
  Must be called with interrupts enabled and the lock not held.
 fotg210_shutdown kick in for silicon on any bus (not just pci, etc).
  This forcibly disables dma and IRQs, helping kexec and other cases
  where the next system software may expect clean state.
 fotg210_work is called from some interrupts, timers, and so on.
  it calls driver completion functions, after dropping fotg210->lock.
	 another CPU may drop fotg210->lock during a schedule scan while
	  it reports urb completions.  this flag guards against bogus
	  attempts at re-entrant schedule scanning.
	 the IO watchdog guards against hardware or driver bugs that
	  misplace IRQs, and should let us run completely without IRQs.
	  such lossage has been observed on both VT6202 and VT8235.
 Called when the fotg210_hcd module is removed.
 no more interrupts ... 
 root hub is shut down separately (first, when possible) 
 one-time init, only for memory state 
	
	  keep io watchdog by default, those good HCDs could turn off it later
	
	  by default set standard 80% (== 100 usecuframe) max periodic
	  bandwidth as required by USB 2.0
	
	  hw default: 1K periodic list heads, one per frame.
	  periodic_size can shrink by USBCMD update if hcc_params allows.
 periodic schedule size can be smaller than default 
 controllers may cache some of the periodic schedule ... 
	
	  dedicate a qh for the async ring head, since we couldn't unlink
	  a 'real' qh without stopping the async schedule [4.8].  use it
	  as the 'reclamation list head' too.
	  its dummy is used in hw_alt_next of many tds, to prevent the qh
	  from automatically advancing to the next td after short reads.
 clear interrupt enables, set irq latency 
		 HW default park == 3, on hardware that supports it (like
		  NVidia and ALI silicon), maximizes throughput on the async
		  schedule by avoiding QH fetches between transfers.
		 
		  With fast usb storage devices and NForce2, "park" seems to
		  make problems:  throughput reduction (!), data errors...
 periodic schedule size can be smaller than default 
 Accept arbitrarily long scatter-gather lists 
 start HC running; it's halted, hcd_fotg210_init() has been run (once) 
 EHCI spec section 4.1 
	
	  hcc_params controls whether fotg210->regs->segment must (!!!)
	  be used; it constrains QHITDSITD and QTD locations.
	  dma_pool consistent memory always uses segment zero.
	  streaming mappings for IO buffers, like dma_map_single(),
	  can return segments above 4GB, if the device allows.
	 
	  NOTE:  the dma mask is visible through dev->dma_mask, so
	  drivers can pass this info along ... like NETIF_F_HIGHDMA,
	  Scsi_Host.highmem_io, and so forth.  It's readonly to all
	  host side drivers though.
	
	  Philips, Intel, and maybe others need CMD_RUN before the
	  root hub will detect new devices (why?); NEC doesn't
	
	  Start, enabling full USB 2.0 functionality ... usb 1.1 devices
	  are explicitly handed to companion controller(s), so no TT is
	  involved with the root hub.  (Except where one is integrated,
	  and there's no companion controller unless maybe for USB OTG.)
	 
	  Turning on the CF flag will transfer ownership of all ports
	  from the companions to the EHCI controller.  If any of the
	  companions are in the middle of a port reset at the time, it
	  could cause trouble.  Write-locking ehci_cf_port_reset_rwsem
	  guarantees that no resets are in progress.  After we set CF,
	  a short delay lets the hardware catch up; new resets shouldn't
	  be started before the port switching actions could complete.
 unblock posted writes 
 Turn On Interrupts 
	 GRR this is run-once init(), being done every time the HC starts.
	  So long as they're part of class devices, we can't do it init()
	  since the class device isn't created that early.
 cache this readonly data; minimize chip reads 
 data structure init 
 e.g. cardbus physical eject 
	
	  We don't use STS_FLR, but some controllers don't like it to
	  remain on, so mask it out along with the other status bits.
 Shared IRQ? 
 clear (just) interrupts 
 unrequestedignored: Frame List Rollover 
 INT, ERR, and IAA interrupt rates can be throttled 
 normal [4.15.1.2] or error [4.15.1.1] completion 
 complete the unlinking of some qh [4.15.2.3] 
 Turn off the IAA watchdog 
		
		  Mild optimization: Allow another IAAD to reset the
		  hrtimer, if one occurs before the next expiration.
		  In theory we could always cancel the hrtimer, but
		  tests show that about half the time it will be reset
		  for some other event anyway.
 guard against (alleged) silicon errata 
 remote wakeup [4.3.1] 
 kick root hub later 
 resume root hub? 
			 start 20 msec resume signaling from this port,
			  and make hub_wq collect PORT_STAT_C_SUSPEND to
			  stop that signaling.  Use 5 ms extra for safety,
			  like usb_port_resume() does.
 PCI errors [4.15.2.4] 
 Don't let the controller do anything more 
 Handle completions when the controller stops 
 non-error returns are a promise to giveback() the urb later
  we drop ownership so next owner (or urb unlink) can get it
  urb + dev is in hcd.self.controller.urb_list
  we're queueing TDs onto software and hardware lists
  hcd-specific init for hcpriv hasn't been done yet
  NOTE:  control, bulk, and interrupt share the same code to append TDs
  to a (possibly active) QH, and the same QH scanning code.
		 qh_completions() code doesn't handle all the fault cases
		  in multi-TD control transfers.  Even 1KB is rare anyway.
 case PIPE_BULK: 
 remove from hardware lists
  completions normally happen asynchronously
 case PIPE_CONTROL: 
 case PIPE_BULK:
 already started 
 QH might be waiting for a Clear-TT-Buffer 
 itd... 
 wait till next completion, do it then. 
 completion irqs can wait up to 1024 msec, 
 bulk qh holds the data toggle 
 ASSERT:  any requestsurbs are being unlinked 
 ASSERT:  nobody can be submitting urbs for this any more 
	 endpoints can be iso streams.  for now, we don't
	  accelerate iso completions ... so spin a while.
 BUG_ON(!list_empty(&stream->free_list)); 
		 periodic qh self-unlinks on empty, and a COMPLETING qh
		  may already be unlinked.
 wait for hw to finish? 
 fully unlinked 
		 caller was supposed to have unlinked any requests;
		  that's not our job.  just leak this memory.
	 For Bulk and Interrupt endpoints we maintain the toggle state
	  in the hardware; the toggle bits in udev aren't used at all.
	  When an endpoint is reset by usb_clear_halt() we must reset
	  the toggle bit in the QH.
			 The toggle value in the QH can't be updated
			  while the QH is active.  Unlink it now;
			  re-linking will call qh_refresh().
 The EHCI in ChipIdea HDRC cannot be a separate module or device,
  because its registers (and irq) are shared between hostgadgetotg
  functions  and in order to facilitate role switching we cannot
  give the fotg210 driver exclusive access to those.
	
	  generic hardware linkage
	
	  basic lifecycle operations
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
  fotg210_hcd_probe - initialize faraday FOTG210 HCDs
  Allocates basic resources for this USB host controller, and
  then invokes the start() method for the HCD associated with it
  through the hotplug entry's driver_data.
 It's OK not to supply this clock 
		
		  Percolate deferrals, for anything else,
		  just live without the clocking.
  fotg210_hcd_remove - shutdown processing for EHCI HCDs
  @dev: USB Host Controller being removed
 SPDX-License-Identifier: GPL-2.0+
  Copyright (c) 2001-2002 by David Brownell
 this file is part of ehci-hcd.c 
  check the values in the HCSPARAMS register
  (host controller _Structural_ parameters)
  see EHCI spec, Table 2-4 for each value
 Port routing, per EHCI 0.95 Spec, Section 2.2.5 
 FIXME MIPS won't readb() ... 
  check the values in the HCCPARAMS register
  (host controller _Capability_ parameters)
  see EHCI Spec, Table 2-5 for each value
 signaling state 
 low speed 
device address 
-------------------------------------------------------------------------
 troubleshooting help: expose state in debugfs 
 fill method 
 protect filling of buffer 
 number of characters filled into buffer 
 tries to advance through hw_alt_next 
 NEC does this 
 qh_alt_next controls qh advance? 
 blocked 
 use hw_qtd_next 
 else alt_next points to some other qtd 
 hc may be modifying the list as we read it ... 
	
	  dumps a snapshot of the async schedule.
	  usually empty except for long-term bulk reads, or head.
	  one QH per line, and TDs we know about
 Dump the HS bandwidth table 
 Dump all the FSLS tables 
 count tds, get ep direction 
	
	  dump a snapshot of the periodic schedule.
	  iso changes, interrupt usually doesn't.
 uframe masks 
 don't repeat what follows this qh 
 show more info the first time around 
 Capability Registers 
 EHCI 0.96 and later may have "extended capabilities" 
 illegal reserved capability 
 unknown 
 FIXME interpret both types of params 
 Operational Registers 
 CONFIG_DYNAMIC_DEBUG 
 CONFIG_DYNAMIC_DEBUG 
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2002 David Brownell <dbrownell@users.sourceforge.net>
  This file is licenced under the GPL.
-------------------------------------------------------------------------
  OHCI deals with three types of memory:
 	- data used only by the HCD ... kmalloc is fine
 	- async and periodic schedules, shared by HC and HCD ... these
 	  need to use dma_pool or dma_alloc_coherent
 	- driver buffers, readwritten by HC ... the hcd glue or the
 	  device driver provides us with dma addresses
  There's also "register" data, which is memory mapped.
  No memory seen by this driver (or any HCD) may be paged out.
-------------------------------------------------------------------------
-------------------------------------------------------------------------
	
	  HCs with local memory allocate from localmem_pool so there's
	  no need to create the below dma pools.
 byte alignment ,
 no page-crossing issues );
 byte alignment ,
 no page-crossing issues );
-------------------------------------------------------------------------
 ohci "done list" processing needs this mapping 
 TDs ... 
 in case hc fetches it, make it look dead 
 hashed in td_fill 
-------------------------------------------------------------------------
 EDs ... 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (c) 2001-2004 by David Brownell
  Copyright (c) 2003 Michal Sojka, for high-speed iso transfers
 this file is part of ehci-hcd.c 
-------------------------------------------------------------------------
  EHCI scheduled transaction support:  interrupt, iso, split iso
  These are called "periodic" transactions in the EHCI spec.
  Note that for interrupt transfers, the QHQTD manipulation is shared
  with the "asynchronous" transaction support (controlbulk transfers).
  The only real difference is in how interrupt transfers are scheduled.
  For ISO, we make an "iso_stream" head to serve the same role as a QH.
  It keeps track of every ITD (or SITD) that's linked, and holds enough
  pre-calculated schedule data to make appending to the queue be quick.
  periodic_next_shadow - return "next" pointer on shadow list
  @periodic: host pointer to qhitdsitd
  @tag: hardware tag for type of this record
 case Q_TYPE_SITD: 
 our ehci_shadow.qh is actually software part 
 others are hw parts 
 caller must hold ehci->lock 
 find predecessor of "ptr"; hw and shadow lists are in sync 
 an interrupt entry (at list end) could have been shared 
	 update shadow and hardware lists ... the old "next" pointers
	  from ptr may still be in use, the caller updates them.
-------------------------------------------------------------------------
 Bandwidth and TT management 
 Find the TT data structure for this device; create it if necessary 
 Not below a TT 
	
	  Findcreate our data structure.
	  For hubs with a single TT, we get it directly.
	  For hubs with multiple TTs, there's an extra level of pointers.
 Create the index array 
 Create the ehci_tt 
 Release the TT above udev, if it's not in use 
 Not below a TT, or never allocated 
 How many entries are left in tt_index? 
 never allocated, or still in use 
 Bandwidth wasn't reserved 
 Release bandwidth 
 Entire transaction (high speed) or start-split (fulllow speed) 
 Complete-split (fulllow speed) 
 NOTE: adjustments needed for FSTN 
 FSLS bus bandwidth 
		
		  find_tt() will not return any error here as we have
		  already called find_tt() before calling this function
		  and checked for any error return. The previous call
		  would have created the data structure.
-------------------------------------------------------------------------
 Add up the contributions from all the endpoints using this TT 
 propagate the time forward 
 Each microframe lasts 125 us 
 carryover lowfullspeed bandwidth that crosses uframe boundries 
  Return true if the device's tt's downstream bus is available for a
  periodic transfer of the specified length (usecs), starting at the
  specified frameuframe.  Note that (as summarized in section 11.19
  of the usb 2.0 spec) TTs can buffer multiple transactions for each
  uframe.
  The uframe parameter is when the fullspeedlowspeed transfer
  should be executed in "B-frame" terms, which is the same as the
  highspeed ssplit's uframe (which is in "H-frame" terms).  For example
  a ssplit in "H-frame" 0 causes a transfer in "B-frame" 0.
  See the EHCI spec sec 4.5 and fig 4.7.
  This checks if the fulllowspeed bus, at the specified starting uframe,
  has the specified bandwidth available, according to rules listed
  in USB 2.0 spec section 11.18.1 fig 11-60.
  This does not check if the transfer would exceed the max ssplit
  limit of 16, specified in USB 2.0 spec section 11.18.4 requirement #4,
  since proper scheduling limits ssplits to less than 16 per uframe.
 error 
		 special case for isoc transfers larger than 125us:
		  the first and each subsequent fully used uframe
		  must be empty, so as to not illegally delay
		  already scheduled transactions
 fail if the carryover pushed bw past the last uframe's limit 
 return true iff the device's transaction translator is available
  for a periodic transfer starting at the specified frame, using
  all the uframes in the mask.
 error 
	 note bandwidth wastage:  split never follows csplit
	  (different dev or endpoint) until the next uframe.
	  calling convention doesn't make that distinction.
 "knows" no gap is needed 
 FIXME assumes no gap for IN! 
 case Q_TYPE_FSTN: 
 collision or error 
 no collision 
 CONFIG_USB_EHCI_TT_NEWSCHED 
-------------------------------------------------------------------------
 Stop waiting to turn off the periodic schedule 
 Don't start the schedule until PSS is 0 
 Don't turn off the schedule until PSS is 1 
-------------------------------------------------------------------------
 periodic schedule slots have iso tds (normal or split) first, then a
  sparse tree for active interrupt transfers.
  this just links in a qh; caller guarantees uframe masks are set right.
  no FSTN support (yet; ehci 0.96+)
 high bandwidth, or otherwise every microframe 
 skip the iso nodes at list head 
		 sorting each branch by period (slow-->fast)
		  enables sharing interior tree nodes
 link in this qh, unless some earlier pass did that 
 update per-qh bandwidth for debugfs 
 maybe enable periodic schedule processing 
	
	  If qh is for a lowfull-speed device, simply unlinking it
	  could interfere with an ongoing split transaction.  To unlink
	  it safely would require setting the QH_INACTIVATE bit and
	  waiting at least one frame, as described in EHCI 4.12.2.5.
	 
	  We won't bother with any of this.  Instead, we assume that the
	  only reason for unlinking an interrupt QH while the current URB
	  is still active is to dequeue all the URBs (flush the whole
	  endpoint queue).
	 
	  If rebalancing the periodic schedule is ever implemented, this
	  approach will no longer be valid.
 high bandwidth, or otherwise part of every microframe 
 update per-qh bandwidth for debugfs 
 qh->qh_next still "live" to HC 
	
	  TODO: disable the event of EHCI_HRTIMER_START_UNLINK_INTR for
	  avoiding unnecessary CPU wakeup
 If the QH isn't linked then there's nothing we can do. 
 if the qh is waiting for unlink, cancel it now 
 Make sure the unlinks are visible before starting the timer 
	
	  The EHCI spec doesn't say how long it takes the controller to
	  stop accessing an unlinked interrupt QH.  The timer delay is
	  9 uframes; presumably that will be long enough.
 New entries go at the end of the intr_unlink list 
 Avoid recursive calls 
  It is common only one intr URB is scheduled on one qh, and
  given complete() is run in tasklet context, introduce a bit
  delay to avoid unlink qh too early.
 New entries go at the end of the intr_unlink_wait list 
 reschedule QH iff another request is queued 
		 An error here likely indicates handshake failure
		  or no space left in the schedule.  Neither fault
		  should happen often ...
		 
		  FIXME kill the now-dysfunctional queued urbs
 maybe turn off periodic schedule 
-------------------------------------------------------------------------
	 complete split running into next frame?
	  given FSTN support, we could sometimes check...
 convert "usecs we need" to "max already claimed" 
 success! 
 FSTN territory? 
 TODO : this may need FSTN for SSPLIT in uframe 5. 
	 Make sure this tt's buffer is also available for CSPLITs.
	  We pessimize a bit; probably the typical full speed case
	  doesn't need the second CSPLIT.
	 
	  NOTE:  both SPLIT and CSPLIT could be checked in just
	  one smart pass...
 "first fit" scheduling policy used the first time through,
  or when the previous schedule slot can't be re-used.
 reuse the previous schedule slots, if we can 
	 else scan the schedule to find a group of slots such that all
	  uframes have enough periodic bandwidth available.
 "normal" case, uframing flexible except with splits 
 qh->ps.bw_period == 0 means every uframe 
 reset S-frame and (maybe) C-frame masks 
 get endpoint and transferschedule data 
 get qh and force any scheduling errors 
 then queue the urb's tds to the qh 
 stuff into the periodic schedule 
 cancel unlink wait for the qh 
 ... update usbfs periodic stats 
 clean any finished work for this qh 
			
			  Unlinks could happen here; completion reporting
			  drops the lock.  That's why ehci->qh_scan_next
			  always holds the next qh to scan; if the next qh
			  gets unlinked then ehci->qh_scan_next is adjusted
			  in qh_unlink_periodic().
-------------------------------------------------------------------------
 ehci_iso_stream ops work with both ITD and SITD 
	
	  this might be a "high bandwidth" highspeed endpoint,
	  as encoded in the ep descriptor's wMaxPacket field
 knows about ITD vs SITD 
		 usbfs wants to report the average usecs per frame tied up
		  when transfers on this endpoint are scheduled ...
 period for bandwidth allocation 
 Allow urb->interval to override 
 c-mask as specified in USB 2.0 11.18.4 3.c 
 period for bandwidth allocation 
 Allow urb->interval to override 
 stream->splits gets created from cs_mask later 
 if dev->ep [epnum] is a QH, hw is set 
-------------------------------------------------------------------------
 ehci_iso_sched ops can be ITD-only or SITD-only 
 how many uframes are needed for these transfers 
	 figure out per-uframe itd fields that we'll need later
	  when we fit new itds into the schedule.
 might need to cross a buffer page within a uframe 
 caller must hold ehci->lock! 
 allocateinit ITDs 
		
		  Use iTDs from the free list, but not iTDs that may
		  still be in use by the hardware.
 temporarily store schedule info in hcpriv 
-------------------------------------------------------------------------
 Bandwidth wasn't reserved 
 Release bandwidth 
 High speed 
 Full speed 
 NOTE: adjustment needed for frame overflow 
		
		  find_tt() will not return any error here as we have
		  already called find_tt() before calling this function
		  and checked for any error return. The previous call
		  would have created the data structure.
 convert "usecs we need" to "max already claimed" 
 for OUT, don't wrap SSPLIT into H-microframe 7 
 for IN, don't wrap CSPLIT into the next frame 
 check bandwidth 
	 The tt's fullspeed bus bandwidth must be available.
	  tt_available scheduling guarantees 10+% for controlbulk.
	 tt must be idle for start(s), any gap, and csplit.
	  assume scheduling slop leaves 10+% for controlbulk.
 check starts (OUT uses more than one) 
 for IN, check CSPLIT 
  This scheduler plans almost as far into the future as it has actual
  periodic schedule slots.  (Affected by TUNE_FLS, which defaults to
  "as small as possible" to be cache-friendlier.)  That limits the size
  transfers you can stream reliably; avoid more than 64 msec per urb.
  Also avoid queue depths of less than ehci's worst irq latency (affected
  by the per-urb URB_NO_INTERRUPT hint, the log2_irq_thresh module parameter,
  and other factors); or more than about 230 msec total (for portability,
  given EHCI_TUNE_FLS and the slop).  Or, write a smarter scheduler!
 Start a new isochronous stream? 
 Schedule the endpoint 
			 find a uframe slot with enough bandwidth.
			  Early uframes are more precious because full-speed
			  iso IN transfers can't use late uframes,
			  and therefore they should be allocated last.
 check schedule: enough space? 
 no room in the schedule 
 New stream is already scheduled; use the upcoming slot 
 Take the isochronous scheduling threshold into account 
 uframe cache 
 full frame cache 
 If needed, initialize last_iso_frame so that this URB will be seen 
	
	  Use ehci->last_iso_frame as the base.  There can't be any
	  TDs scheduled for earlier than that.
	
	  Typical case: reuse current schedule, stream may still be active.
	  Hopefully there are no gaps from the host falling behind
	  (irq delays etc).  If there are, the behavior depends on
	  whether URB_ISO_ASAP is set.
 Is the schedule about to wrap around? 
 Is the next packet scheduled after the base time? 
 URB_ISO_ASAP: make sure that start >= next 
 Otherwise use start, if it's not in the past 
 Otherwise we got an underrun while the queue was empty 
 How many uframes and packets do we need to skip? 
 Entirely in the past? 
 Try to keep the last TD intact for scanning later 
 Will it come before the current scan position? 
 Skip the entire URB 
 and give it back immediately 
 Use the first slot after "next" 
 Tried to schedule too far into the future? 
 report high speed start in uframes; full speed, in frames 
-------------------------------------------------------------------------
 it's been recently zeroed 
 All other fields are filled when scheduling 
 BUG_ON(pg == 6 && uf->cross); 
 iso_frame_desc[].offset must be strictly increasing 
 skip any iso nodes which might belong to previous microframes 
 fit urb's itds into the selected schedule slot; activate as needed 
 fill iTDs uframe by uframe 
 ASSERT:  we have all necessary itds 
 BUG_ON(list_empty(&iso_sched->td_list)); 
 ASSERT:  no itds for this endpoint in this uframe 
 link completed itds into the schedule 
 don't need that schedule data any more 
 Process and recycle a completed ITD.  Return true iff its urb completed,
  and hence its completion callback probably added things to the hardware
  schedule.
  Note that we carefully avoid recycling this descriptor until after any
  completion callback runs, so that it won't be reused quickly.  That is,
  assuming (a) no more than two urbs per frame on this endpoint, and also
  (b) only this endpoint's completions submit URBs.  It seems some silicon
  corrupts things if you reuse completed descriptors very quickly...
 for each uframe with a packet 
 report transfer status 
 hc couldn't read 
 hc couldn't write 
 (t & EHCI_ISOC_XACTERR) 
 HC need not update length with this error 
 URB was too late 
 handle completion now? 
	
	  ASSERT: it's really the last itd for this urb
	  list_for_each_entry (itd, &stream->td_list, itd_list)
	 	 BUG_ON(itd->urb == urb);
 give urb back to the driver; completion often (re)submits 
 Add to the end of the free list for later reuse 
 Recycle the iTDs when the pipeline is empty (ep no longer in use) 
-------------------------------------------------------------------------
 Get iso_stream head 
 allocate ITDs wo locking anything 
 schedule ... need to lock 
-------------------------------------------------------------------------
  "Split ISO TDs" ... used for USB 1.1 devices going through the
  TTs in USB 2.0 hubs.  These need microframe scheduling.
 how many frames are needed for these transfers 
	 figure out per-frame sitd fields that we'll need later
	  when we fit new sitds into the schedule.
 might need to cross a buffer page within a td 
 OUT uses multiple start-splits 
 BEGIN vs ALL 
 allocateinit sITDs 
		 NOTE:  for now, we don't try to handle wraparound cases
		  for IN (using sitd->hw_backpointer, like a FSTN), which
		  means we never need two sitds for full speed packets.
		
		  Use siTDs from the free list, but not siTDs that may
		  still be in use by the hardware.
 temporarily store schedule info in hcpriv 
-------------------------------------------------------------------------
 note: sitd ordering could matter (CSPLIT then SSPLIT) 
 fit urb's sitds into the selected schedule slot; activate as needed 
 usbfs ignores TT bandwidth 
 fill sITDs frame by frame 
 ASSERT:  we have all necessary sitds 
 ASSERT:  no itds for this endpoint in this frame 
 don't need that schedule data any more 
-------------------------------------------------------------------------
 Process and recycle a completed SITD.  Return true iff its urb completed,
  and hence its completion callback probably added things to the hardware
  schedule.
  Note that we carefully avoid recycling this descriptor until after any
  completion callback runs, so that it won't be reused quickly.  That is,
  assuming (a) no more than two urbs per frame on this endpoint, and also
  (b) only this endpoint's completions submit URBs.  It seems some silicon
  corrupts things if you reuse completed descriptors very quickly...
 report transfer status 
 hc couldn't read 
 hc couldn't write 
 XACT, MMF, etc 
 URB was too late 
 handle completion now? 
	
	  ASSERT: it's really the last sitd for this urb
	  list_for_each_entry (sitd, &stream->td_list, sitd_list)
	 	 BUG_ON(sitd->urb == urb);
 give urb back to the driver; completion often (re)submits 
 Add to the end of the free list for later reuse 
 Recycle the siTDs when the pipeline is empty (ep no longer in use) 
 Get iso_stream head 
 allocate SITDs 
 schedule ... need to lock 
-------------------------------------------------------------------------
	
	  When running, scan from last scan point up to "now"
	  else clean up by scanning everything that's left.
	  Touches as few pages as possible:  cache-friendly.
 Scan each element in frame's queue for completions 
			
			  If this ITD is still active, leave it for
			  later processing ... check the next entry.
			  No need to check for activity unless the
			  frame is current.
			
			  Take finished ITDs out of the schedule
			  and process them:  recycle, maybe report
			  URB completion.  HC won't cache the
			  pointer for much longer, if at all.
			
			  If this SITD is still active, leave it for
			  later processing ... check the next entry.
			  No need to check for activity unless the
			  frame is current.
			
			  Take finished SITDs out of the schedule
			  and process them:  recycle, maybe report
			  URB completion.
 BUG(); 
 End of the iTDs and siTDs 
 Assume completion callbacks modify the queue 
 Stop when we have reached the current frame 
 The last frame may still have active siTDs 
 SPDX-License-Identifier: GPL-2.0
  SL811HS HCD (Host Controller Driver) for USB.
  Copyright (C) 2004 Psion Teklogix (for NetBook PRO)
  Copyright (C) 2004-2005 David Brownell
  Periodic scheduling is based on Roman's OHCI code
  	Copyright (C) 1999 Roman Weissgaerber
  The SL811HS controller handles host side USB (like the SL11H, but with
  another register set and SOF generation) as well as peripheral side USB
  (like the SL811S).  This driver version doesn't implement the Gadget API
  for the peripheral role; or OTG (that'd need much external circuitry).
  For documentation, see the SL811HS spec and the "SL811HS Embedded Host"
  document (providing significant pieces missing from that spec); plus
  the SL811S spec if you want peripheral side info.
  Status:  Passed basic stress testing, works with hubs, mice, keyboards,
  and usb-storage.
  TODO:
  - usb suspendresume triggered by sl811
  - various issues noted in the code
  - performance work; use both register banks; ...
  - use urb->iso_frame_desc[] with ISO transfers
 for now, use only one transfer register bank 
 #define	QUIRK2
-------------------------------------------------------------------------
 hub is inactive unless the port is powered 
 switch VBUS, at 500mA unless hub power budget gets set 
 reset as thoroughly as we can 
 if !is_on, put into lowpower mode now
-------------------------------------------------------------------------
 This is a PIO-only HCD.  Queueing appends URBs to the endpoint's queue,
  and may start IO.  Endpoint queues are scanned during completion irq
  handlers (one per packet: ACK, NAK, faults, etc) and urb cancellation.
  Using an external DMA engine to copy a packet at a time could work,
  though setupteardown costs may be too big to make it worthwhile.
 SETUP starts a new control request.  Devices are not allowed to
  STALL or NAK these; they must cancel any pending control requests.
 autoincrementing 
 | ep->epnum , data_reg);
 always OUTdata0 
 STATUS finishes control requests, often after IN or OUT data packets 
 autoincrementing 
 | ep->epnum , data_reg);
 always data1; sometimes IN 
 IN packets can be used with any type of endpoint. here we just
  start the transfer, data from the peripheral may arrive later.
  urb->iso_frame_desc is currently ignored here...
 avoid losing data on overflow 
 autoincrementing 
 OUT packets can be used with any type of endpoint.
  urb->iso_frame_desc is currently ignored here...
 autoincrementing 
-------------------------------------------------------------------------
 caller updates on-chip enables later 
-------------------------------------------------------------------------
 pick the next endpoint for a transaction, and issue it.
  frames start with periodic transfers (after whatever is pending
  from the previous frame), and the rest of the time is async
  transfers, scheduled round-robin.
 use endpoint at schedule head 
			 could set up the first fullspeed periodic
			  transfer for the next frame ...
	 if this frame doesn't have enough time left to transfer this
	  packet, wait till the next frame.  too-simple algorithm...
 setup takes not much time 
 also note erratum 1: some hubs won't work 
 erratum 2: AFTERSOF only works for fullspeed 
 19 64byte packetsmsec 
 throttle bulkcontrol irq noise 
 for control status 
 leave active endpoints in the schedule 
 async deschedule? 
 periodic deschedule 
 we might turn SOFs back on again for the async schedule 
 we can safely ignore NAKs 
 PACKET("...NAK_%02x qh%p\n", bank, ep);
 ACK advances transfer, toggle, and maybe queue 
 urb->iso_frame_desc is currently ignored here... 
 PACKET("...ACKout_%02x qh%p\n", bank, ep);
				 some bulk protocols terminate OUT transfers
				  by a short packet, using ZLPs not padding.
 PACKET("...ACKin_%02x qh%p\n", bank, ep);
 PACKET("...ACKsetup_%02x qh%p\n", bank, ep);
 PACKET("...ACKstatus_%02x qh%p\n", bank, ep);
 STALL stops all transfers 
 error? retry, until "3 strikes" 
 this may no longer be necessary ... 
	 USB packets, not necessarily handled in the order they're
	  issued ... that's fine if they're different endpoints.
		 be graceful about almost-inevitable periodic schedule
		  overruns:  continue the previous frame's transfers iff
		  this one has nothing scheduled.
 dev_err(hcd->self.controller, "overrun to slot %d\n", index);
 hub_wq manages debouncing and wakeup 
 most stats are reset for each VBUS session 
 usbcore nukes other pending transactions on disconnect 
		 port status seems weird until after reset, so
		  force the reset and make hub_wq clean up later.
-------------------------------------------------------------------------
 usb 1.1 says max 90% of a frame is available for periodic transfers.
  this driver doesn't promise that much since it's got to handle an
  IRQ per packet; irq handling latencies also use up that time.
  NOTE:  the periodic schedule is a sparse tree, with the load for
  each branch minimized.  see fig 3.5 in the OHCI spec for example.
 out of 1000 usec 
	 search for the least loaded schedule branch of that period
	  which has enough bandwidth left unreserved.
-------------------------------------------------------------------------
 avoid all allocations within spinlocks 
 don't submit to a dead or disabled port 
 iso packets up to 240 bytes could work... 
 send preamble for external hub? 
 maybe put endpoint into schedule 
			 NOTE:  the phase is correct here, but the value
			  needs offsetting by the transfer queue depth.
			  All current drivers ignore start_frame, so this
			  is unlikely to ever matter...
		 sort each schedule branch by period (slow before fast)
		  to share the faster parts of the tree without needing
		  dummyplaceholder nodes
		 finish right away if this urb can't be active ...
		  note that some drivers wrongly expect delays
 not front of queue?  never active 
 for active transfers, we expect an IRQ 
 happens a lot with lowspeed?? 
 happens a lot with lowspeed?? 
 front of queue for inactive endpoint 
 assume we'd just wait for the irq 
	 wrong except while periodic transfers are scheduled;
	  never matches the on-the-wire frame;
	  subject to overruns.
-------------------------------------------------------------------------
 the virtual root hub timer IRQ checks for hub status 
	 non-SMP HACK: use root hub timer as io watchdog
	  this seems essential when SOF IRQs aren't in use...
 ~0,  hcd) != IRQ_NONE)
 tell hub_wq port 1 changed 
 per-port power switching (gang of one!), or none 
 no overcurrent errors detectionhandling 
 ports removable, and legacy PortPwrCtrlMask 
 stop special signaling 
 don't wrongly ack RD 
 usbcore nukes all pending transactions on disconnect 
 start SOFs flowing, kickstarting with A registers 
 autoincrementing 
 hub_wq provides debounce delay 
 reenable irqs 
 20 msec of resumeK signaling, other irqs blocked 
 only if wPortChange is interesting 
 50 msec of resetSE0 signaling, irqs blocked 
 "protocol stall" on error 
 SOFs off
 SOFs on
-------------------------------------------------------------------------
 DUMB: prints shared entries multiple times 
 expect just one sl811 per system 
-------------------------------------------------------------------------
 chip has been reset, VBUS power is off 
 enable power and interrupts 
-------------------------------------------------------------------------
	
	  generic hardware linkage
 Basic lifecycle operations 
	
	  managing io requests and associated device resources
	
	  periodic schedule support
	
	  root hub support
-------------------------------------------------------------------------
 some platforms may use IORESOURCE_IO 
 the chip may be wired for either kind of addressing 
	 basic sanity checks first.  board-specific init logic should
	  have initialized these three resources and probably board
	  specific platform_data.  we don't probe for IRQs, and do only
	  minimal sanity checking.
		
		  NOTE: 64-bit resource->start is getting truncated
		  to avoid compiler warning, assuming that ->start
		  is always 32-bit for this case
 allocate and initialize hcd 
 reject case 0, SL11S is less functional 
	 The chip's IRQ is level triggered, active high.  A requirement
	  for platform device setup is to cope with things like signal
	  inverters (e.g. CF is active low) or working only with edge
	  triggers (e.g. most ARM CPUs).  Initial driver stress testing
	  was on a system with single edge triggering, so most sorts of
	  triggering arrangement should work.
	 
	  Use resource IRQ flags if set by platform device setup.
 for this device there's no useful distinction between the controller
  and its root hub.
 explicitly discard hw state 
	 with no "check to see if VBUS is still powered" board hook,
	  let's assume it'd only be powered to enable remote wakeup.
 this driver is exported so sl811_cs can depend on it 
 SPDX-License-Identifier: GPL-2.0
  PCMCIA driver for SL811HS (as found in REX-CFU1U)
  Filename: sl811_cs.c
  Author:   Yukio Yamamoto
   Port to sl811-hcd and 2.6.x by
     Botond Botyanszki <boti@rocketmail.com>
     Simon Pickering
   Last update: 2005-05-12
====================================================================
 MACROS                                                             
====================================================================
====================================================================
 VARIABLES                                                          
====================================================================
====================================================================
 == 100mA 
 .reset	= ... FIXME:  invoke CF reset on the card
 .name   = "address",
 .name   = "data",
 finish setting up the platform device 
	 The driver core will probe for us.  We know sl811-hcd has been
	  initialized already because of the link order dependency created
	  by referencing "sl811h_driver".
====================================================================
 This points to the parent local_info_t struct 
 require an IRQ and two registers 
 RATOC USB HOST CF+ Card 
 SPDX-License-Identifier: GPL-2.0+
  Freescale QUICC Engine USB Host Controller Driver
  Copyright (c) Freescale Semicondutor, Inc. 2006.
                Shlomi Gridish <gridish@freescale.com>
                Jerry Huang <Chang-Ming.Huang@freescale.com>
  Copyright (c) Logic Product Development, Inc. 2007
                Peter Barada <peterb@logicpd.com>
  Copyright (c) MontaVista Software, Inc. 2008.
                Anton Vorontsov <avorontsov@ru.mvista.com>
 virtual root hub specific descriptor 
 blength 
 bDescriptorType;hub-descriptor 
 bNbrPorts 
 wHubCharacteristics 
 per-port power, no overcurrent 
 bPwrOn2pwrGood;2ms 
 bHubContrCurrent;0mA 
 DeviceRemoveable 
 PortPwrCtrlMask 
 disable the USB port by clearing the EN bit in the USBMOD register 
 Enable IDLE since we want to know if something comes along 
 check if during the disconnection process attached new device 
 enable the USB port by setting the EN bit in the USBMOD register 
 generate the RESET condition on the bus 
 disable the USB controller 
 disable idle interrupts 
 enable interrupt on this endpoint 
 enable the USB controller 
 SPDX-License-Identifier: GPL-2.0
  xHCI host controller driver PCI Bus Glue.
  Copyright (C) 2008 Intel Corp.
  Author: Sarah Sharp
  Some code borrowed from the Linux EHCI driver.
 Device for a quirk 
 called after powerup, by probe or system-pm "wakeup" 
	
	  TODO: Implement finding debug ports later.
	  TODO: see if there are any quirks that need to be added to handle
	  new extended capabilities.
 PCI Memory-Write-Invalidate cycle support is optional (uncommon) 
 Look for vendor-specific quirks 
		 Fresco Logic confirms: all revisions of this chip do not
		  support MSI, even though some of them claim to in their PCI
		  capabilities.
 AMD PLL quirk 
		
		  PPT desktop boards DH77EB and DH77DF will power back on after
		  a few seconds of being shutdown.  The fix for this is to
		  switch the ports from xHCI to EHCI on shutdown.  We can't use
		  DMI information to find those particular boards (since each
		  vendor will change the board name), so we have to key off all
		  PPT chipsets.
bugzilla.kernel.orgshow_bug.cgi?id=79511 
 CONFIG_ACPI 
 called during probe() after chip reset completes 
 imod_interval is the interrupt moderation value in nanoseconds. 
 Find any debug ports 
  We need to register our own PCI probe function (instead of the USB core's
  function) in order to create a second roothub under xHCI.
 Prevent runtime suspending between USB-2 and USB-3 initialization 
	 Register the USB 2.0 roothub.
	  FIXME: USB core must know to register the USB 2.0 roothub first.
	  This is sort of silly, because we could just set the HCD driver flags
	  to say USB 2.0, but I'm not sure what the implications would be in
	  the other parts of the HCD code.
 USB 2.0 roothub is stored in the PCI device now. 
 Roothub already marked as USB 3.0 speed 
 USB-2 and USB-3 roothubs initialized, allow runtime pm suspend 
 Workaround for spurious wakeups at shutdown with HSW 
  In some Intel xHCI controllers, in order to get D3 working,
  through a vendor specific SSIC CONFIG register at offset 0x883c,
  SSIC PORT need to be marked as "unused" before putting xHCI
  into D3. After D3 exit, the SSIC port need to be marked as "used".
  Without this change, xHCI might not enter D3 state.
 Notify SSIC that SSIC profile programming is not done. 
 Mark SSIC port as unused(suspend) or used(resume) 
 Notify SSIC that SSIC profile programming is done 
  Make sure PME works on some Intel xHCI controllers by writing 1 to clear
  the Internal PME flag bit in vendor specific PMCTRL register at offset 0x80a4
	
	  Systems with the TI redriver that loses port status change events
	  need to have the registers polled during D3, so avoid D3cold.
	 The BIOS on systems with the Intel Panther Point chipset may or may
	  not support xHCI natively.  That means that during system resume, it
	  may switch the ports back to EHCI so that users can use their
	  keyboard to select a kernel from GRUB after resume from hibernate.
	 
	  The BIOS is supposed to remember whether the OS had xHCI ports
	  enabled before resume, and switch the ports back to xHCI when the
	  BIOSOS semaphore is written, but we all know we can't trust BIOS
	  writers.
	 
	  Unconditionally switch the ports back to xHCI after a system resume.
	  It should not matter whether the EHCI or xHCI controller is
	  resumed first. It's enough to do the switchover in xHCI because
	  USB core won't notice anything as the hub driver doesn't start
	  running again until after all the devices (including both EHCI and
	  xHCI host controllers) have been resumed.
 Yet another workaround for spurious wakeups at shutdown with HSW 
 CONFIG_PM 
-------------------------------------------------------------------------
 PCI driver selection metadata; PCI hotplugging uses this 
 handle any USB 3.0 xHCI controller 
 end: all zeroes  }
  Without CONFIG_USB_XHCI_PCI_RENESAS renesas_xhci_check_request_fw() won't
  load firmware, so don't encumber the xhci-pci driver with it.
 pci driver glue; this is a "new style" PCI driver module 
 suspend and resume implemented later 
 SPDX-License-Identifier: GPL-2.0+
  Freescale QUICC Engine USB Host Controller Driver
  Copyright (c) Freescale Semicondutor, Inc. 2006.
                Shlomi Gridish <gridish@freescale.com>
                Jerry Huang <Chang-Ming.Huang@freescale.com>
  Copyright (c) Logic Product Development, Inc. 2007
                Peter Barada <peterb@logicpd.com>
  Copyright (c) MontaVista Software, Inc. 2008.
                Anton Vorontsov <avorontsov@ru.mvista.com>
 SPDX-License-Identifier: GPL-2.0+
  Enhanced Host Controller Interface (EHCI) driver for USB.
  Maintainer: Alan Stern <stern@rowland.harvard.edu>
  Copyright (c) 2000-2004 by David Brownell
-------------------------------------------------------------------------
  EHCI hc_driver implementation ... experimental, incomplete.
  Based on the final 1.0 register interface specification.
  USB 2.0 shows up in upcoming www.pcmcia.org technology.
  First was PCMCIA, like ISA; then CardBus, which is PCI.
  Next comes "CardBay", using USB 2.0 signals.
  Contains additional contributions by Brad Hards, Rory Bolt, and others.
  Special thanks to Intel and VIA for providing host controllers to
  test this driver on, and Cypress (including In-System Design) for
  providing early devices for those host controllers to talk to!
 magic numbers that can affect system performance 
 0-3 qtd retries; 0 == don't stop 
 nak throttle; see 4.9 
 1-3 transactionsuframe; 4.10.3 
  Some drivers think it's safe to schedule isochronous transfers more than
  256 ms into the future (partly as a result of an old bug in the scheduling
  code).  In an attempt to avoid trouble, we will use a minimum scheduling
  length of 512 frames instead of 256.
 (medium) 512-frame schedule 
 Initial IRQ latency:  faster than hw default 
 0 to 6
 initial park setting:  slower than hw default 
 for flakey hardware, ignore overcurrent indicators 
-------------------------------------------------------------------------
  The MosChip MCS9990 controller updates its microframe counter
  a little before the frame counter, and occasionally we will read
  the invalid intermediate value.  Avoid problems by checking the
  microframe number (the low-order 3 bits); if they are 0 then
  re-read the register to get the correct value.
-------------------------------------------------------------------------
  ehci_handshake - spin reading hc until handshake completes or fails
  @ptr: address of hc register to be read
  @mask: bits to look at in result of read
  @done: value of those bits when handshake succeeds
  @usec: timeout in microseconds
  Returns negative errno, or zero on success
  Success happens when the "mask" bits have the specified value (hardware
  handshake done).  There are two failure modes:  "usec" have passed (major
  hardware flakeout), or the register reads as all-ones (hardware removed).
  That last failure should_only happen in cases like physical cardbus eject
  before driver shutdown. But it also seems to be caused by bugs in cardbus
  bridge shutdown:  shutting down the bridge before the devices using it.
 card removed 
 check TDIARC silicon is in host mode 
  Force HC to halt state from unknown (EHCI spec section 2.3).
  Must be called with interrupts enabled and the lock not held.
 disable any irqs left enabled by previous code 
	
	  This routine gets called during probe before ehci->command
	  has been initialized, so we can't rely on its value.
 put TDIARC silicon into EHCI mode 
	 The default byte access to MMR space is LE after
	  controller reset. Set the required endian mode
	  for transfer buffers to match the host microprocessor
  Reset a non-running (STS_HALT == 1) controller.
  Must be called with interrupts enabled and the lock not held.
	 If the EHCI debug controller is active, special care must be
  Idle the controller (turn off the schedules).
  Must be called with interrupts enabled and the lock not held.
 wait for any schedule enablesdisables to take effect 
 then disable anything that's still active 
 hardware can take 16 microframes to turn off ... 
-------------------------------------------------------------------------
-------------------------------------------------------------------------
 On some systems, leaving remote wakeup enabled prevents system shutdown.
  The firmware seems to think that powering off is a wakeup event!
  This routine turns off remote wakeup and everything else, on all ports.
  Halt HC, turn off all ports, and let the BIOS use the companion controllers.
  Must be called with interrupts enabled and the lock not held.
 make BIOSetc use companion controller during reboot 
 unblock posted writes 
 ehci_shutdown kick in for silicon on any bus (not just pci, etc).
  This forcibly disables dma and IRQs, helping kexec and other cases
  where the next system software may expect clean state.
	
	  Protect the system from crashing at system shutdown in cases where
	  usb host is not added yet from OTG controller driver.
	  As ehci_setup() not done yet, so stop accessing registers or
	  variables initialized in ehci_setup()
-------------------------------------------------------------------------
  ehci_work is called from some interrupts, timers, and so on.
  it calls driver completion functions, after dropping ehci->lock.
	 another CPU may drop ehci->lock during a schedule scan while
	  it reports urb completions.  this flag guards against bogus
	  attempts at re-entrant schedule scanning.
	 the IO watchdog guards against hardware or driver bugs that
	  misplace IRQs, and should let us run completely without IRQs.
	  such lossage has been observed on both VT6202 and VT8235.
  Called when the ehci_hcd module is removed.
 no more interrupts ... 
 root hub is shut down separately (first, when possible) 
 one-time init, only for memory state 
	
	  keep io watchdog by default, those good HCDs could turn off it later
	
	  by default set standard 80% (== 100 usecuframe) max periodic
	  bandwidth as required by USB 2.0
	
	  hw default: 1K periodic list heads, one per frame.
	  periodic_size can shrink by USBCMD update if hcc_params allows.
 periodic schedule size can be smaller than default 
 controllers may cache some of the periodic schedule ... 
 full frame cache
 N microframes cached
	
	  dedicate a qh for the async ring head, since we couldn't unlink
	  a 'real' qh without stopping the async schedule [4.8].  use it
	  as the 'reclamation list head' too.
	  its dummy is used in hw_alt_next of many tds, to prevent the qh
	  from automatically advancing to the next td after short reads.
 clear interrupt enables, set irq latency 
		 HW default park == 3, on hardware that supports it (like
		  NVidia and ALI silicon), maximizes throughput on the async
		  schedule by avoiding QH fetches between transfers.
		 
		  With fast usb storage devices and NForce2, "park" seems to
		  make problems:  throughput reduction (!), data errors...
 periodic schedule size can be smaller than default 
 Accept arbitrarily long scatter-gather lists 
 Prepare for unlinking active QHs 
 start HC running; it's halted, ehci_init() has been run (once) 
 EHCI spec section 4.1 
	
	  hcc_params controls whether ehci->regs->segment must (!!!)
	  be used; it constrains QHITDSITD and QTD locations.
	  dma_pool consistent memory always uses segment zero.
	  streaming mappings for IO buffers, like dma_map_single(),
	  can return segments above 4GB, if the device allows.
	 
	  NOTE:  the dma mask is visible through dev->dma_mask, so
	  drivers can pass this info along ... like NETIF_F_HIGHDMA,
	  Scsi_Host.highmem_io, and so forth.  It's readonly to all
	  host side drivers though.
 this is deeply broken on almost all architectures
 Philips, Intel, and maybe others need CMD_RUN before the
 root hub will detect new devices (why?); NEC doesn't
	
	  Start, enabling full USB 2.0 functionality ... usb 1.1 devices
	  are explicitly handed to companion controller(s), so no TT is
	  involved with the root hub.  (Except where one is integrated,
	  and there's no companion controller unless maybe for USB OTG.)
	 
	  Turning on the CF flag will transfer ownership of all ports
	  from the companions to the EHCI controller.  If any of the
	  companions are in the middle of a port reset at the time, it
	  could cause trouble.  Write-locking ehci_cf_port_reset_rwsem
	  guarantees that no resets are in progress.  After we set CF,
	  a short delay lets the hardware catch up; new resets shouldn't
	  be started before the port switching actions could complete.
 Wait until HC become operational 
 unblock posted writes 
	 For Aspeed, STS_HALT also depends on ASSPSS status.
	  Check CMD_RUN instead.
 Turn On Interrupts 
	 GRR this is run-once init(), being done every time the HC starts.
	  So long as they're part of class devices, we can't do it init()
	  since the class device isn't created that early.
 cache this readonly data; minimize chip reads 
 data structure init 
-------------------------------------------------------------------------
 e.g. cardbus physical eject 
	
	  We don't use STS_FLR, but some controllers don't like it to
	  remain on, so mask it out along with the other status bits.
 Shared IRQ? 
 clear (just) interrupts 
 For edge interrupts, don't race with an interrupt bit being raised 
 normal [4.15.1.2] or error [4.15.1.1] completion 
 complete the unlinking of some qh [4.15.2.3] 
 Turn off the IAA watchdog 
		
		  Mild optimization: Allow another IAAD to reset the
		  hrtimer, if one occurs before the next expiration.
		  In theory we could always cancel the hrtimer, but
		  tests show that about half the time it will be reset
		  for some other event anyway.
 guard against (alleged) silicon errata 
 remote wakeup [4.3.1] 
 kick root hub later 
 resume root hub? 
 get per-port change detect bits 
 leverage per-port change bits feature 
			 start USB_RESUME_TIMEOUT msec resume signaling from
			  this port, and make hub_wq collect
			  PORT_STAT_C_SUSPEND to stop that signaling.
 PCI errors [4.15.2.4] 
 Don't let the controller do anything more 
 Handle completions when the controller stops 
-------------------------------------------------------------------------
  non-error returns are a promise to giveback() the urb later
  we drop ownership so next owner (or urb unlink) can get it
  urb + dev is in hcd.self.controller.urb_list
  we're queueing TDs onto software and hardware lists
  hcd-specific init for hcpriv hasn't been done yet
  NOTE:  control, bulk, and interrupt share the same code to append TDs
  to a (possibly active) QH, and the same QH scanning code.
		 qh_completions() code doesn't handle all the fault cases
		  in multi-TD control transfers.  Even 1KB is rare anyway.
 case PIPE_BULK: 
 remove from hardware lists
  completions normally happen asynchronously
		
		  We don't expedite dequeue for isochronous URBs.
		  Just wait until they complete normally or their
		  time slot expires.
 already started 
 QH might be waiting for a Clear-TT-Buffer 
-------------------------------------------------------------------------
 bulk qh holds the data toggle
 ASSERT:  any requestsurbs are being unlinked 
 ASSERT:  nobody can be submitting urbs for this any more 
	 endpoints can be iso streams.  for now, we don't
	  accelerate iso completions ... so spin a while.
 BUG_ON(!list_empty(&stream->free_list)); 
 already in unlinking 
 wait for hw to finish? 
 fully unlinked 
		 caller was supposed to have unlinked any requests;
		  that's not our job.  just leak this memory.
	 For Bulk and Interrupt endpoints we maintain the toggle state
	  in the hardware; the toggle bits in udev aren't used at all.
	  When an endpoint is reset by usb_clear_halt() we must reset
	  the toggle bit in the QH.
			 The toggle value in the QH can't be updated
			  while the QH is active.  Unlink it now;
			  re-linking will call qh_refresh().
-------------------------------------------------------------------------
 Device addition and removal 
-------------------------------------------------------------------------
 suspendresume, section 4.3 
 These routines handle the generic parts of controller suspendresume 
	
	  Root hub was already suspended.  Disable IRQ emission and
	  mark HW unaccessible.  The PM and USB cores make sure that
	  the root hub is either suspended or stopped.
 Check for race with a wakeup request 
 Returns 0 if power was preserved, 1 if power was lost 
 Mark hardware accessible again as we are back to full power by now 
 Controller is dead 
	
	  If CF is still set and reset isn't forced
	  then we maintained suspend power.
	  Just undo the effect of ehci_suspend().
	
	  Else reset, to cope with power loss or resume from hibernation
	  having let the firmware kick in during reboot.
 unblock posted writes 
-------------------------------------------------------------------------
  Generic structure: This gets copied for platform drivers so that
  individual entries can be overridden as needed.
	
	  generic hardware linkage
	
	  basic lifecycle operations
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
	
	  device support
 EH SINGLE_STEP_SET_FEATURE test support 
 Copy the generic table to drv and then apply the overrides 
-------------------------------------------------------------------------
 SPDX-License-Identifier: GPL-2.0
  driversusbhostehci-orion.c
  Tzachi Perelstein <tzachi@marvell.com>
 BAWR = BARD = 3 : Align readwrite bursts packets larger than 128 bytes 
 AHBBRST = 3	   : Align AHB Burst to INCR16 (64 bytes) 
  Implement Orion USB controller specification guidelines
 The below GLs are according to the Orion Errata document 
	
	  Clear interrupt cause and mask
	
	  Reset controller
	
	  GL# USB-10: Set IPG for non start of frame packets
	  Bits[14:8]=0xc
	
	  GL# USB-9: USB 2.0 Power Control
	  BG_VSEL[7:6]=0x1
	
	  GL# USB-1: USB PHY Tx Control - force calibration to '8'
	  TXDATA_BLOCK_EN[21]=0x1, EXT_RCAL_EN[13]=0x1, IMP_CAL[6:3]=0x8
	
	  GL# USB-3 GL# USB-9: USB PHY Rx Control
	  RXDATA_BLOCK_LENGHT[31:30]=0x3, EDGE_DET_SEL[27:26]=0,
	  CDR_FASTLOCK_EN[21]=0, DISCON_THRESHOLD[9:8]=0, SQ_THRESH[7:4]=0x1
	
	  GL# USB-3 GL# USB-9: USB PHY IVREF Control
	  PLLVDD12[1:0]=0x2, RXVDD[5:4]=0x3, Reserved[19]=0
	
	  GL# USB-3 GL# USB-9: USB PHY Test Group Control
	  REG_FIFO_SQ_RST[15]=0
	
	  Stop and reset controller
	
	  GL# USB-5 Streaming disable REG_USB_MODE[4]=1
	  TBD: This need to be done after each reset!
	  GL# USB-4 Setup USB Host mode
	
	  For SoC without hlock, need to program sbuscfg value to guarantee
	  AHB master's burst would not overrun or underrun FIFO.
	 
	  sbuscfg reg has to be set after usb controller reset, otherwise
	  the value would be override to 0.
	
	  Right now device-tree probed devices don't get dma_mask
	  set. Since shared usb code relies on it, set it here for
	  now. Once we have dma capability bindings this can go away.
	
	  Not all platforms can gate the clock, so it is not an error if
	  the clock does not exists.
	
	  (Re-)program MBUS remapping windows if we are asked to.
	
	  setup Orion USB controller.
 dont change USB phy settings 
 SPDX-License-Identifier: GPL-2.0
  Sonics Silicon Backplane
  Broadcom USB-core driver  (SSB bus glue)
  Copyright 2011-2012 Hauke Mehrtens <hauke@hauke-m.de>
  Based on ssb-ohci driver
  Copyright 2007 Michael Buesch <m@bues.ch>
  Derived from the OHCI-PCI driver
  Copyright 1999 Roman Weissgaerber
  Copyright 2000-2002 David Brownell
  Copyright 1999 Linus Torvalds
  Copyright 1999 Gregory P. Smith
  Derived from the USBcore related parts of Broadcom-SB
  Copyright 2005-2011 Broadcom Corporation
 Work around for 5354 failures 
 Change syn01 reg 
 Change syn03 reg 
		
		  USB 2.0 special considerations:
		 
		  In addition to the standard SSB reset sequence, the Host
		  Control Register must be programmed to bring the USB core
		  and various phy components out of reset.
 Change Flush control reg 
 Change Shim control reg 
 based on archmipsbrcm-boardsbcm947xxpcibios.c 
 Put the device into host-mode. 
 USBcores are only connected on embedded devices. 
 TODO: Probably need checks here; is the core connected? 
	 We currently always attach SSB_DEV_USB11_HOSTDEV
	  as HOST OHCI. If we want to attach it as Client device,
	  we must branch here and call into the (yet to
 ehci core offset 
 !CONFIG_PM 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020, Broadcom 
  ehci_brcm_wait_for_sof
  Wait for start of next microframe, then wait extra delay microseconds
 Wait for next microframe (every 125 usecs) 
  ehci_brcm_hub_control
  The EHCI controller has a bug where it can violate the SOF
  interval between the first two SOF's transmitted after resume
  if the resume occurs near the end of the microframe. This causees
  the controller to detect babble on the suspended port and
  will eventually cause the controller to reset the port.
  The fix is to Intercept the echi-hcd request to complete RESUME and
  align it to the start of the next microframe.
  See SWLINUX-1909 for more details
	
	  RESUME is cleared when GetPortStatus() is called 20ms after start
	  of RESUME
		
		  to make sure we are not interrupted until RESUME bit
		  is cleared, disable interrupts on current CPU
 This fixes the lockup during reboot due to prior interrupts 
	
	  SWLINUX-1705: Avoid OUT packet underflows during high memory
	    bus usage
 Hook the hub control routine to work around a bug 
 initialize hcd 
	
	  SWLINUX-1705: Avoid OUT packet underflows during high memory
	    bus usage
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2014 Marvell
  Author: Gregory CLEMENT <gregory.clement@free-electrons.com>
 Clear all existing windows 
 Program each DRAM CS in a seperate window 
	
	  We don't use devm_ioremap() because this mapping should
	  only exists for the duration of this probe function.
	
	  This memory area was only needed to configure the MBus
	  windows, and is therefore no longer useful.
 Old bindings miss the PHY handle 
 Skip initializatin of XHCI PHY when it is unsupported by firmware 
 Without reset on resume, the HC won't work at all 
 SPDX-License-Identifier: GPL-2.0
  Universal Host Controller Interface driver for USB.
  Maintainer: Alan Stern <stern@rowland.harvard.edu>
  (C) Copyright 1999 Linus Torvalds
  (C) Copyright 1999-2002 Johannes Erdfelt, johannes@erdfelt.com
  (C) Copyright 1999 Randy Dunlap
  (C) Copyright 1999 Georg Acher, acher@in.tum.de
  (C) Copyright 1999 Deti Fliegl, deti@fliegl.de
  (C) Copyright 1999 Thomas Sailer, sailer@ife.ee.ethz.ch
  (C) Copyright 1999 Roman Weissgaerber, weissg@vienna.at
  (C) Copyright 2000 Yggdrasil Computing, Inc. (port of new PCI interface
                support from usb-ohci.c by Adam Richter, adam@yggdrasil.com).
  (C) Copyright 1999 Gregory P. Smith (from usb-ohci.c)
  (C) Copyright 2004-2007 Alan Stern, stern@rowland.harvard.edu
  Intel documents this fairly well, and as far as I know there
  are no royalties or anything like that, but even so there are
  people who decided that they want to do the same thing in a
  completely different way.
  Version Information
 for flakey hardware, ignore overcurrent indicators 
  debug = 0, no debugging messages
  debug = 1, dump failed URBs except for stalls
  debug = 2, dump all failed URBs (including stalls)
             show all queues in syskerneldebuguhci[pci_addr]
  debug = 3, show all TDs in URBs when dumping
 urb_priv 
  Calculate the link pointer DMA value for the first Skeleton QH in a frame.
	
	  The interrupt queues will be interleaved as evenly as possible.
	  There's not much to be done about period-1 interrupts; they have
	  to occur in every frame.  But we can schedule period-2 interrupts
	  in odd-numbered frames, period-4 interrupts in frames congruent
	  to 2 (mod 4), and so on.  This way each frame only has two
	  interrupt QHs, which will help spread out bandwidth utilization.
	 
	  ffs (Find First bit Set) does exactly what we need:
	  1,3,5,...  => ffs = 0 => use period-2 QH = skelqh[8],
	  2,6,10,... => ffs = 1 => use period-4 QH = skelqh[7], etc.
	  ffs >= 7 => not on any high-period queue, so use
	 	period-1 QH = skelqh[9].
	  Add in UHCI_NUMFRAMES to insure at least one bit is set.
  Finish up a host controller reset and update the recorded state.
	 HCRESET doesn't affect the Suspend, Reset, and Resume Detect
	  bits in the port status and control registers.
	  We have to clear them by hand.
  Last rites for a defunctnonfunctional controller
  or one we don't want to use any more.
 The current frame may already be partway finished 
  Initialize a controller that was newly discovered or has lost power
  or otherwise been reset while it was suspended.  In none of these cases
  can we be sure of its previous state.
  The two functions below are generic reset functions that are used on systems
  that do not have keyboard and mouse legacy support. We assume that we are
  running on such a system if CONFIG_USB_UHCI_SUPPORT_NON_PCI_HC is defined.
  Make sure the controller is completely inactive, unable to
  generate interrupts or do DMA.
	 Reset the HC - this will force us to get a
	  new notification of any already connected
	  ports due to the virtual disconnect that it
	  implies.
	 Just to be safe, disable interrupt requests and
	  make sure the controller is stopped.
  Initialize a controller that was newly discovered or has just been
  resumed.  In either case we can't be sure of its previous state.
  Returns: 1 if the controller was reset, 0 otherwise.
	
	  When restarting a suspended controller, we expect all the
	  settings to be the same as we left them:
	 
	 	Controller is stopped and configured with EGSM set;
	 	No interrupts enabled except possibly Resume Detect.
	 
	  If any of these conditions are violated we do a complete reset.
 CONFIG_USB_UHCI_SUPPORT_NON_PCI_HC 
  Store the basic register settings needed by the controller.
 Set the frame length to the default: 1 ms exactly 
 Store the frame list base address 
 Set the current frame number 
 perform any archbus specific configuration 
	
	  If we have to ignore overcurrent events then almost by definition
	  we can't depend on resume-detect interrupts.
	 
	  Those interrupts also don't seem to work on ASpeed SoCs.
	 Start off by assuming Resume-Detect interrupts and EGSM work
	  and that remote wakeups should be enabled.
	
	  In auto-stop mode, we must be able to detect new connections.
	  The user can force us to poll by disabling remote wakeup;
	  otherwise we will use the EGSMRD mechanism.
	
	  In bus-suspend mode, we use the wakeup setting specified
	  for the root hub.
	
	  UHCI doesn't distinguish between wakeup requests from downstream
	  devices and local connectdisconnect events.  There's no way to
	  enable one without the other; both are controlled by EGSM.  Thus
	  if wakeups are disallowed then EGSM must be turned off -- in which
	  case remote wakeup requests from downstream during system sleep
	  will be lost.
	 
	  In addition, if EGSM is broken then we can't use it.  Likewise,
	  if Resume-Detect interrupts are broken then we can't use them.
	 
	  Finally, neither EGSM nor RD is useful by itself.  Without EGSM,
	  the RD status bit will never get set.  Without RD, the controller
	  won't generate interrupts to tell the system about wakeup events.
	 If we're auto-stopping then no devices have been attached
	  for a while, so there shouldn't be any active URBs and the
	  controller should stop after a few microseconds.  Otherwise
	  we will give the controller one frame to stop.
	
	  If remote wakeup is enabled but either EGSM or RD interrupts
	  doesn't work, then we won't get an interrupt when a wakeup event
	  occurs.  Thus the suspended root hub needs to be polled.
	
	  Clear stale status bits on Aspeed as we get a stale HCH
	  which causes problems later on
	 Mark it configured and running with a 64-byte max packet.
	  All interrupts are enabled, even though RESUME won't do anything.
	 If we are auto-stopped then no devices are attached so there's
	  no need for wakeup signals.  Otherwise we send Global Resume
	  for 20 ms.
 Keep EGSM on if it was set before 
 End Global Resume and wait for EOP to be sent 
 Restart root hub polling 
	
	  Read the interrupt status, and write it back to clear the
	  interrupt cause.  Contrary to the UHCI specification, the
	  "HC Halted" status bit is persistent: it is RO, not RWC.
 shared interrupt, not mine 
 Clear it 
 not yet configured 
 Print the schedule for debugging 
				 Force a callback in case there are
  Store the current frame number in uhci->frame_number if the controller
  is running.  Expand from 11 bits (of which we use only 10) to a
  full-sized integer.
  Like many other parts of the driver, this code relies on being polled
  more than once per second as long as the controller is running.
  De-allocate all resources
  Allocate a frame list, and then setup the skeleton
  The hardware doesn't really know any difference
  in the queues, but the order does matter for the
  protocols higher up.  The order in which the queues
  are encountered by the hardware is:
   - All isochronous events are handled before any
     of the queues. We don't do that here, because
     we'll create the actual TD entries on demand.
   - The first queue is the high-period interrupt queue.
   - The second queue is the period-1 interrupt and async
     (low-speed control, full-speed control, then bulk) queue.
   - The third queue is the terminating bandwidth reclamation queue,
     which contains no members, loops back to itself, and is present
     only when FSBR is on and there are no full-speed control or bulk QHs.
 Accept arbitrarily long scatter-gather lists 
	
	  8 Interrupt queues; link all higher int queues to int1 = async
 This dummy TD is to work around a bug in Intel PIIX controllers 
	
	  Fill the frame list: make all entries point to the proper
	  interrupt queue.
 Only place we don't use the frame list routines 
	
	  Some architectures require a full mb() to enforce completion of
	  the memory writes above before the IO transfers in configure_hc().
  error exits:
 Dead controllers tell no tales 
	 Once the controller is stopped, port resumes that are already
	  in progress won't complete.  Hence if remote wakeup is enabled
	  for the root hub and any ports are in the middle of a resume or
	  remote wakeup, we must fail the suspend.
 Wait until a particular deviceendpoint's QH is idle, and free it 
 Minimize latency by avoiding the spinlock 
 Determines number of ports on controller 
	 The UHCI spec says devices must have 2 ports, and goes on to say
	  they may have more but gives no way to determine how many there
	  are.  However according to the UHCI spec, Bit 7 of the port
	  status and control register is always set to 1.  So we try to
	  use this to our advantage.  Another common failure mode when
	  a nonexistent register is addressed is to return all ones, so
	  we test for that also.
 Anything greater than 7 is weird so we'll ignore it. 
 SPDX-License-Identifier: GPL-2.0
  xhci-dbgcap.c - xHCI debug capability support
  Copyright (C) 2017 Intel Corporation
  Author: Lu Baolu <baolu.lu@linux.intel.com>
 we use only one segment for DbC rings 
 Serial string: 
 Product string: 
 Manufacture string: 
 String0: 
 Populate info Context: 
 Populate bulk out endpoint context: 
 Populate bulk in endpoint context: 
 Set DbC context and info registers: 
 Give back the transfer request: 
	
	  Add a barrier between writes of trb fields and flipping
	  the cycle bit:
 xhci 7.6.9, all three contexts; info, ep-out and ep-in. Each 64 bytes
 Only event ring does not use link TRB 
 Allocate various rings for events and transfers: 
 Allocate and populate ERST: 
 Allocate context data structure: 
 was sysdev, and is still 
 Allocate the string table: 
 Setup ERST register: 
 Setup strings and contexts: 
 note this was self.controller 
 note this was self.controller 
 note, was self.controller 
 Port reset change bit will be cleared in other place: 
 Match the pending request: 
 If on the last TRB of the segment go back to the beginning 
 DbC state machine: 
 Handle cable unplug event: 
 Handle debug port reset event: 
 Handle endpoint stall event: 
 Clear DbC run change bit: 
 Handle the events in the event ring: 
		
		  Add a barrier between reading the cycle flag and any
		  reads of the event's flagsdata below:
 Update event ring dequeue pointer: 
 We will avoid using DbC in xhci driver if it's in use. 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0+
  EHCI HCD (Host Controller Driver) PCI Bus Glue.
  Copyright (c) 2000-2004 by David Brownell
 defined here to avoid adding to pci_ids.h for single instance use 
-------------------------------------------------------------------------
  This is the list of PCI IDs for the devices that have EHCI USB class and
  specific drivers for that. One of the example is a ChipIdea device installed
  on some Intel MID platforms.
 ChipIdea on Intel MID platform 
  0x84 is the offset of inout threshold register,
  and it is the same offset as the register of 'hostpc'.
 Maximum usable threshold value is 0x7f dwords for both IN and OUT 
 called after powerup, by probe or system-pm "wakeup" 
	 we expect static quirk code to handle the "extended capabilities"
	  (currently just BIOS handoff) allowed starting with EHCI 0.96
 PCI Memory-Write-Invalidate cycle support is optional (uncommon) 
 Reset the threshold limit 
		
		  For the Intel QUARK X1000, raise the IO threshold to the
		  maximum usable value in order to improve performance.
 called during probe() after chip reset completes 
	
	  ehci_init() causes memory for DMA transfers to be
	  allocated.  Thus, any vendor-specific workarounds based on
	  limiting the type of memory used for DMA transfers must
	  happen before ehci_setup() is called.
	 
	  Most other workarounds can be done either before or after
	  init and reset; they are located here too.
 celleb's companion chip 
		 NVidia reports that certain chips don't handle
		  QH, ITD, or SITD addresses above 2GB.  (But TD,
		  data buffer, and periodic schedule are normal.)
 MCP04 
 CK804 
 CK8 
 CK8S 
		 Some NForce2 chips have problems with selective suspend;
		  fixed in newer silicon.
 AMD PLL quirk 
 AMD8111 EHCI doesn't work, according to AMD errata 
		
		  EHCI controller on AMD SB700SB800Hudson-23 platforms may
		  readwrite memory space which does not belong to it when
		  there is NULL pointer with T-bit set to 1 in the frame list
		  table. To avoid the issue, the frame list link pointer
		  should always contain a valid pointer to a inactive qh.
			 The VT6212 defaults to a 1 usec EHCI sleep time which
			  hogs the PCI bus badly. Setting bit 5 of 0x4B makes
			  that sleep time use the conventional 10 usec.
 AMD PLL quirk 
		
		  EHCI controller on AMD SB700SB800Hudson-23 platforms may
		  readwrite memory space which does not belong to it when
		  there is NULL pointer with T-bit set to 1 in the frame list
		  table. To avoid the issue, the frame list link pointer
		  should always contain a valid pointer to a inactive qh.
		 SB600 and old version of SB700 have a bug in EHCI controller,
		  which causes usb devices lose response in some cases.
 MosChip frame-index-register bug 
 Synopsys HC bug 
 optional debug port, normally in the first BAR 
 These workarounds need to be applied after ehci_setup() 
		 MCP89 chips on the MacBookAir3,1 give EPROTO when
		  fetching device descriptors unless LPM is disabled.
		  There are also intermittent problems enumerating
		  devices with PPCD enabled.
 at least the Genesys GL880S needs fixup here 
 GENESYS 
 GL880S: should be PORTS=2 
 NF4: should be PCC=10 
 Serial Bus Release Number is at PCI 0x60 offset 
 ConneXT has no sbrn register 
 HUAWEI Kunpeng920 USB EHCI has no sbrn register 
	 Keep this around for a while just in case some EHCI
	  implementation uses legacy PCI PM support.  This test
	  can be removed on 17 Dec 2009 if the dev_warn() hasn't
	  been triggered by then.
-------------------------------------------------------------------------
 suspendresume, section 4.3 
 These routines rely on the PCI bus glue
  to handle powerdown and wakeup, and currently also on
  transceivers that don't need any software attention to set up
  the right sort of wakeup.
  Also they depend on separate root hub suspendresume.
 CONFIG_PM 
-------------------------------------------------------------------------
 PCI driver selection metadata; PCI hotplugging uses this 
 handle any USB 2.0 EHCI controller 
 end: all zeroes  }
 pci driver glue; this is a "new style" PCI driver module 
 Entries for the PCI suspendresume callbacks are special 
 SPDX-License-Identifier: GPL-2.0+
  Freescale QUICC Engine USB Host Controller Driver
  Copyright (c) Freescale Semicondutor, Inc. 2006.
                Shlomi Gridish <gridish@freescale.com>
                Jerry Huang <Chang-Ming.Huang@freescale.com>
  Copyright (c) Logic Product Development, Inc. 2007
                Peter Barada <peterb@logicpd.com>
  Copyright (c) MontaVista Software, Inc. 2008.
                Anton Vorontsov <avorontsov@ru.mvista.com>
 Transaction Descriptors bits 
 ready bit 
 wrap bit 
 interrupt on completion 
 last 
 transmit CRC 
 CNF - Must be always 1 
 Low-speed transaction 
 packet id 
 Rx error or not 
 No ack. 
 Stall received 
 time out 
 underrun 
 Rx Non Octet Aligned Packet 
 Frame Aborted 
 CRC Error 
 Overrun 
 Buffer Overrun 
 Data 0 toggle 
 Data 1 toggle 
 Data 01 toggle mask 
 get the next TD in the ring 
 destroy an USB endpoint 
  create the endpoint structure
  arguments:
  usb		A pointer to the data structure of the USB
  data_mem	The data memory partition(BUS)
  ring_len	TD ring length
 we need at least 3 TDs in the ring 
 zero all queue pointers 
 we put the endpoint parameter RAM right behind the TD ring 
 initialize tds 
 for last TD set Wrap bit 
 endpoint structure has been created 
  initialize the endpoint register according to the given parameters
  artuments:
  usb		A pointer to the data strucutre of the USB
  ep		A pointer to the endpoint structre
  data_mem	The data memory partition(BUS)
 set the endpoint registers according to the endpoint 
  Collect the submitted frames and inform the application about them
  It is also preparing the TDs for new frames. If the Tx interrupts
  are disabled, the application should call that routine to get
  confirmation about the submitted frames. Otherwise, the routine is
  called from the interrupt service routine during the Tx interrupt.
  In that case the application is informed by calling the application
  specific 'fhci_transaction_confirm' routine
	
	  collect transmitted BDs from the chip. The routine clears all BDs
	  with R bit = 0 and the pointer to data buffer is not NULL, that is
	  BDs which point to the transmitted data buffer
 check if the TD is empty 
 check if it is a dummy buffer 
 mark TD as empty 
 advance the TD pointer 
 check if it is a dummy buffer(type2) 
  Submitting a data frame to a specified endpoint of a USB device
  The frame is put in the driver's transmit queue for this endpoint
  Arguments:
  usb          A pointer to the USB structure
  pkt          A pointer to the user frame structure
  trans_type   Transaction tyep - IN,OUT or SETUP
  dest_addr    Device address - 0~127
  dest_ep      Endpoint number of the device - 0~16
  trans_mode   Pipe type - ISO,Interrupt,bulk or control
  dest_speed   USB speed - Low speed or FULL speed
  data_toggle  Data sequence toggle - 0 or 1
 start from the next BD that should be filled 
 if the TD is not free 
 get the next TD in the ring 
 sets up transaction parameters - addr,endp,dir,and type 
 sets up the buffer descriptor 
 set up buffer length 
 put the frame to the confirmation queue 
 Reset the Tx BD ring 
 if the TD is not empty - we'll confirm it as Timeout 
 if this TD is dummy - let's skip this TD 
 if this is the last TD - break 
 for last TD set Wrap bit 
  Flush all transmitted packets from TDs in the actual frame.
  This routine is called when something wrong with the controller and
  we want to get rid of the actual frame and start again next frame
 disable the USB controller 
 advance the TD pointer 
 reset the event register 
 enable the USB controller 
 handles Tx confirm and Tx error interrupt 
	
	  Schedule another transaction to this frame only if we have
	  already confirmed all transaction in the frame.
 gets the next TD in the ring 
 start transmit only if we have something in the TDs 
 SPDX-License-Identifier: GPL-2.0
  This file contains code to reset and initialize USB host controllers.
  Some of it includes work-arounds for PCI hardware and BIOS quirks.
  It may need to run early during booting -- before USB would normally
  initialize -- to ensure that Linux doesn't use any legacy modes.
   Copyright (c) 1999 Martin Mares <mj@ucw.cz>
   (and others)
 legacy support 
 command register 
 interrupt register 
 the RWC bits 
 RO and reserved bits 
 RUNSTOP bit 
 Host Controller reset 
 Global Suspend Mode 
 Config Flag 
 Resume interrupt enable 
 hc functional state 
 host controller reset 
 ownership change request 
 remote wakeup connected 
 interrupt routing 
 ownership change 
 extended capabilities 
 command register 
 RUNSTOP bit 
 status register 
 HCHalted bit 
 interrupt register 
 configured flag register 
 legacy support register 
 BIOS semaphore 
 OS semaphore 
 legacy controlstatus 
 SMI on ownership change 
 AMD quirk use 
 ASMEDIA quirk use 
  amd_chipset_gen values represent AMD different chipset generations
  amd_chipset_sb_type_init - initialize amd chipset southbridge type
  AMD FCHSB generation and revision is identified by SMBus controller
  vendor, device and revision IDs.
  Returns: 1 if it is an AMD chipset, 0 otherwise.
 probe only once 
 race - someone else was faster - drop devices 
 Mark that we where here 
 no race - commit the result 
 Make sure amd chipset type has already been initialized 
 SB600 and old version of SB700 have hang symptom bug 
 SB800 needs pre-fetch fix 
  The hardware normally enables the A-link power management feature, which
  lets the system lower the power consumption in idle states.
  This USB quirk prevents the link going into that lower power state
  during isochronous transfers.
  Without this quirk, isochronous stream on OHCIEHCIxHCI controllers of
  some AMD platforms may stutter or have breaks occasionally.
 send command and address to device 
 send data to device 
 save them to pci_dev_put outside of spinlock 
  Check if port is disabled in BIOS on AMD Promontory host.
  BIOS Disabled ports may wake on connectdisconnect and need
  driver workaround to keep them disabled.
  Returns true if port is marked disabled.
 Check disabled port setting, if bit is set port is enabled 
	
	  device is AMD_PROMONTORYA_4(0x43b9) or PROMONTORYA_3(0x43ba)
	  PT4_P1_REG bits[7..1] represents USB2.0 ports 6 to 0
	  PT4_P2_REG bits[6..0] represents ports 13 to 7
	
	  device is AMD_PROMONTORYA_2(0x43bb)
	  PT2_P1_REG bits[7..5] represents USB2.0 ports 2 to 0
	  PT2_P2_REG bits[5..0] represents ports 9 to 3
	
	  device is AMD_PROMONTORYA_1(0x43bc)
	  PT1_P1_REG[7..4] represents USB2.0 ports 3 to 0
	  PT1_P2_REG[5..0] represents ports 9 to 4
  Make sure the controller is completely inactive, unable to
  generate interrupts or do DMA.
	 Turn off PIRQ enable and SMI enable.  (This also turns off the
	  BIOS's USB Legacy Support.)  Turn off all the RWC bits too.
	 Reset the HC - this will force us to get a
	  new notification of any already connected
	  ports due to the virtual disconnect that it
	  implies.
	 Just to be safe, disable interrupt requests and
	  make sure the controller is stopped.
  Initialize a controller that was newly discovered or has just been
  resumed.  In either case we can't be sure of its previous state.
  Returns: 1 if the controller was reset, 0 otherwise.
	
	  When restarting a suspended controller, we expect all the
	  settings to be the same as we left them:
	 
	 	PIRQ and SMI disabled, no RW bits set in USBLEGSUP;
	 	Controller is stopped and configured with EGSM set;
	 	No interrupts enabled except possibly Resume Detect.
	 
	  If any of these conditions are violated we do a complete reset.
	
	  ULi M5237 OHCI controller locks the whole system when accessing
	  the OHCI_FMINTERVAL offset.
 On PA-RISC, PDC can leave IR set incorrectly; ignore it there. 
 arbitrary; 5 seconds 
 disable interrupts 
 Go into the USB_RESET state, preserving RWC (and possibly IR) 
 software reset of the controller, preserving HcFmInterval 
 reset requires max 10 us delay 
 ... allow extra time 
 Now the controller is safely in SUSPEND and nothing can wake it up 
  Pegatron Lucid (ExoPC) 
  Pegatron Lucid (Ordissimo AIRIS) 
  Pegatron Lucid (Ordissimo) 
 HASEE E200 
	
	  The Pegatron Lucid tablet sporadically waits for 98 seconds trying
	  the handoff on its unused controller.  Skip it.
	 
	  The HASEE E200 hangs when the semaphore is set (bugzilla #77021).
 aleksey_gorelov@phoenix.com reports that some systems need SMI forced on,
  but that seems dubious in general (the BIOS left it off intentionally)
  and is known to prevent some systems from booting.  so we won't do this
  unless maybe we can determine when we're on a system that needs SMI forced.
		 BIOS workaround (?): be sure the pre-Linux code
		  receives the SMI
		 some systems get upset if this semaphore is
		  set for any other reason than forcing a BIOS
		  handoff..
 if boot firmware now owns EHCI, spin till it hands it over. 
		 well, possibly buggy BIOS... try to shut it down,
		  and hope nothing goes too wrong
 just in case, always disable EHCI SMIs 
	 If the BIOS ever owned the controller then we can't expect
	  any power sessions to remain intact.
	 EHCI 0.96 and later may have "extended capabilities"
	  spec section 5.1 explains the bios handoff, e.g. for
	  booting from USB disk or using a usb keyboard
 Illegal reserved cap, set cap=0 so we exit 
	
	  halt EHCI & disable its interrupts in any case
  handshake - spin reading a register until handshake completes
  @ptr: address of hc register to be read
  @mask: bits to look at in result of read
  @done: value of those bits when handshake succeeds
  @wait_usec: timeout in microseconds
  @delay_usec: delay in microseconds to wait between polling
  Polls a register every delay_usec microseconds.
  Returns 0 when the mask bits have the value done.
  Returns -ETIMEDOUT if this condition is not true after
  wait_usec microseconds have passed.
  Intel's Panther Point chipset has two host controllers (EHCI and xHCI) that
  share some number of ports.  These ports can be switched between either
  controller.  Not all of the ports under the EHCI host controller may be
  switchable.
  The ports should be switched over to xHCI before PCI probes for any device
  start.  This avoids active devices under EHCI being disconnected during the
  port switchover, which could cause loss of data on USB storage devices, or
  failed boot when the root file system is on a USB mass storage device and is
  enumerated under EHCI first.
  We write into the xHC's PCI configuration space in some Intel-specific
  registers to switch the ports over.  The USB 3.0 terminations and the USB
  2.0 data wires are switched separately.  We want to enable the SuperSpeed
  terminations before switching the USB 2.0 wires over, so that USB 3.0
  devices connect at SuperSpeed, rather than at USB 2.0 speeds.
	 Sony VAIO t-series with subsystem device ID 90a8 is not capable of
	  switching ports from EHCI to xHCI
 make sure an intel EHCI controller exists 
	 Don't switchover the ports if the user hasn't compiled the xHCI
	  driver.  Otherwise they will see "dead" USB ports that don't power
	  the devices.
	 Read USB3PRM, the USB 3.0 Port Routing Mask Register
	  Indicate the ports that can be changed from OS.
	 Write USB3_PSSEN, the USB 3.0 Port SuperSpeed Enable
	  Register, to turn on SuperSpeed terminations for the
	  switchable ports.
	 Read XUSB2PRM, xHCI USB 2.0 Port Routing Mask Register
	  Indicate the USB 2.0 ports to be controlled by the xHCI host.
	 Write XUSB2PR, the xHC USB 2.0 Port Routing Register, to
	  switch the USB 2.0 power and data lines over to the xHCI
	  host.
  PCI Quirks for xHCI.
  Takes care of the handoff between the Pre-OS (i.e. BIOS) and the OS.
  It signals to the BIOS that the OS wants control of the host controller,
  and then waits 1 second for the BIOS to hand over control.
  If we timeout, assume the BIOS is broken and take control anyway.
	
	  Find the Legacy Support Capability register -
	  this is optional for xHCI host controllers.
 We're reading garbage from the controller 
 Auto handoff never worked for these devices. Force it and continue 
 If the BIOS owns the HC, signal that the OS wants it, and wait 
 Wait for 1 second with 10 microsecond polling interval 
 Assume a buggy BIOS and take HC ownership anyway 
 Mask off (turn off) any enabled SMIs 
 Mask all SMI events bits, RW1C 
 Disable any BIOS SMIs and clear all SMI events
	 Wait for the host controller to be ready before writing any
	  operational or runtime registers.  Wait 5 seconds and no more.
 Assume a buggy HC and start HC initialization anyway 
 Send the halt and disable interrupts command 
 Wait for the HC to halt - poll every 125 usec (one microframe). 
	 Skip Netlogic mips SoC's internal PCI USB controller.
	  This device does not needsupport EHCIOHCI handoff
 vendor Netlogic 
	
	  Bypass the Raspberry Pi 4 controller xHCI controller, things are
	  taken care of by the board's co-processor.
 SPDX-License-Identifier: GPL-2.0
  ISP1362 HCD (Host Controller Driver) for USB.
  Copyright (C) 2005 Lothar Wassmann <LW@KARO-electronics.de>
  Derived from the SL811 HCD, rewritten for ISP116x.
  Copyright (C) 2005 Olav Kongas <ok@artecdesign.ee>
  Portions:
  Copyright (C) 2004 Psion Teklogix (for NetBook PRO)
  Copyright (C) 2004 David Brownell
  The ISP1362 chip requires a large delay (300ns and 462ns) between
  accesses to the address and data register.
  The following timing options exist:
  1. Configure your memory controller to add such delays if it can (the best)
  2. Implement platform-specific delay function possibly
     combined with configuring the memory controller; see
     includelinuxusb_isp1362.h for more info.
  3. Use ndelay (easiest, poorest).
  Use the corresponding macros USE_PLATFORM_DELAY and USE_NDELAY in the
  platform specific section of isp1362.h to select the appropriate variant.
  Also note that according to the Philips "ISP1362 Errata" document
  Rev 1.00 from 27 May data corruption may occur when the #WR signal
  is reasserted (even with #CS deasserted) within 132ns after a
  write cycle to any controller register. If the hardware doesn't
  implement the recommended fix (gating the #WR with #CS) software
  must ensure that no further write cycle (not necessarily to the chip!)
  is issued by the CPU within this interval.
  For PXA25x this can be ensured by using VLIO with the maximum
  recovery time (MSCx = 0x7f8c) with a memory clock of 99.53 MHz.
  The PXA255 UDC apparently doesn't handle GET_STATUS, GET_CONFIG and
  GET_INTERFACE requests correctly when the SETUP and DATA stages of the
  requests are carried out in separate frames. This will delay any SETUP
  packets until the start of the next frame so that this situation is
  unlikely to occur (and makes usbtest happy running with a PXA255 target
  device).
 This enables a memory test on the ISP1362 chip memory to make sure the
  chip access timing is correct.
-------------------------------------------------------------------------
  When called from the interrupthandler only isp1362_hcd->irqenb is modified,
  since the interrupt handler will write isp1362_hcd->irqenb to HCuPINT upon
  completion.
  We don't need a 'disable' counterpart, since interrupts will be disabled
  only by the interrupt handler.
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
  Set up PTD's.
	 Only transfer the amount of data that has actually been overwritten
	  in the chip buffer. We don't want any data that doesn't belong to the
	  transfer to leak out of the chip to the callers transfer buffer!
  INT PTDs will stay in the chip until data is available.
  This function will remove a PTD from the chip when the URB is dequeued.
  Must be called with the spinlock held and IRQs disabled
 put ep in remove_list for cleanup 
 let SOF interrupt handle the cleanup 
 ISO queues don't have SKIP registers 
 prevent further processing of PTD (will be effective after next SOF) 
  Take done or failed requests out of schedule. Give back
  processed urbs.
 take idle endpoints out of the schedule right away 
 async deschedule 
 periodic deschedule 
  Analyze transfer results, handle partial transfers and errors
	 Data underrun is special. For allowed underrun
	   we clear the error and continue as normal. For
	   forbidden underrun we finish the DATA stage
	   immediately while for control transfer,
	   we do a STATUS stage.
			 save the data underrun error code for later and
			  proceed with the status stage
 if transfer completed or (allowed) data underrun 
 Avoid starving of endpoints 
 time frame for this URB has elapsed 
			 URB is not due in this frame or the next one.
			  Comparing with '-1' instead of '0' accounts for double
			  buffering in the ISP1362 which enables us to queue the PTD
			  one frame ahead of time
 submit PTD's that are due in the next frame 
 check, whether the second ISTL buffer may also be filled 
 only handle interrupts that are currently enabled 
 All PTDs are finished, disable INTL processing entirely 
 FIXME: do here reset or cleanup or whatever 
-------------------------------------------------------------------------
 out of 1000 usec 
	 search for the least loaded schedule branch of that interval
	  which has enough bandwidth left unreserved.
 NB! ALL the code above this point runs with isp1362_hcd->lock
   held, irqs off
-------------------------------------------------------------------------
 avoid all allocations within spinlocks: request or endpoint 
 don't submit to a dead or disabled port 
 maybe put endpoint into schedule 
 urb submitted for already existing EP 
 In front of queue? 
 disable processing and queue PTD for removal 
 Wait for interrupt to clear out active list 
-------------------------------------------------------------------------
 Adapted from ohci-hub.c 
	 Report no status change now, if we are scheduled to be
 init status 
 Power switching, device type, overcurrent. 
 ports removable, and legacy PortPwrCtrlMask 
 Adapted from ohci-hub.c 
 spin until any current reset finishes 
 Reset lasts 10ms (claims datasheet) 
 "protocol stall" on error 
 First stop any processing 
 Suspend hub 
 no resumes until devices finish suspending 
 HCFS changes sometime after INTR_RD 
 RESET, we lost power 
 force global, not selective, resume 
 Some controllers (lucent) need extra-long delays 
 usb 11.5.1.10  + 15);
 TRSMRCY 
 keep it alive for ~5x suspend + resume costs 
-------------------------------------------------------------------------
	 collect statistics to help estimate potential win for
	  DMA engines that care about alignment (PXA)
 FIXME: don't show the following in suspended state 
 expect just one isp1362_hcd per system 
-------------------------------------------------------------------------
 chip has been reset. First we need to see a clock 
 Switch off power for all ports 
 Reset the chip 
 clear interrupt status and disable all interrupt sources 
 HW conf 
 Root hub conf 
 Set up interrupts 
 Go operational 
 enable global power 
-------------------------------------------------------------------------
-------------------------------------------------------------------------
	 basic sanity checks first.  board-specific init logic should
	  have initialized this the three resources and probably board
	  specific platform_data.  we don't probe for IRQs, and do only
	  minimal sanity checking.
 allocate and initialize hcd 
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2004 David Brownell <dbrownell@users.sourceforge.net>
  This file is licenced under GPL
-------------------------------------------------------------------------
  OHCI Root Hub ... the nonsharable stuff
-------------------------------------------------------------------------
 First stop any processing 
		 sched disables take effect on the next frame,
		  then the last WDH could take 6+ msec
 All ED unlinks should be finished, no need for SOF interrupts 
	
	  Some controllers don't handle "global" suspend properly if
	  there are unsuspended ports.  For these controllers, put all
	  the enabled ports into suspend before suspending the root hub.
 maybe resume can wake root hub 
	 Suspend hub ... this is the "global (to this bus) suspend" mode,
	  which doesn't imply ports will first be individually suspended.
 no resumes until devices finish suspending 
 for bulk and control lists 
 caller has locked the root hub 
 this can happen after resuming a swsusp snapshot 
 this happens when pmcore resumes HC then root 
 HCFS changes sometime after INTR_RD 
 this can happen after resuming a swsusp snapshot 
 RESET, we lost power 
 Some controllers (lucent erratum) need extra-long delays 
 usb 11.5.1.10  + 12 
 disable old schedule state, reinit from scratch 
 Sometimes PCI D3 suspend trashes frame timings ... 
	
	  The following code is executed with ohci->lock held and
	  irqs disabled if and only if autostopped is true.  This
	  will cause sparse to warn about a "context imbalance".
 interrupts might have been disabled 
 Then re-enable operations 
 TRSMRCY 
 now ohci->lock is always held and irqs are always disabled 
 keep it alive for more than ~5x suspend + resume costs 
 maybe turn schedules back on 
 poll until we know a device is connected or we autostop 
 Carry out polling-, autostop-, and autoresume-related state changes 
	 Some broken controllers never turn off RHSC in the interrupt
	  status register.  For their sake we won't re-enable RHSC
	  interrupts if the interrupt bit is already active.
 If no status changes are pending, enable RHSC interrupts. 
		 Keep on polling until we know a device is connected
		  and RHSC is enabled, or until we autostop.
 if no devices have been attached for one second, autostop 
 if there is a port change, autostart or ask to be resumed 
 If remote wakeup is disabled, stop polling 
			 If no status changes are pending,
			  enable RHSC interrupts
 Keep polling until RHSC is enabled 
 CONFIG_PM 
 Carry out polling-related state changes.
  autostop isn't used when CONFIG_PM is turned off.
 If RHSC is enabled, don't poll 
	 If status changes are pending, continue polling.
	  Conversely, if no status changes are pending but the RHSC
	  status bit was set, then RHSC may be broken so continue polling.
 It's safe to re-enable RHSC interrupts 
 CONFIG_PM 
-------------------------------------------------------------------------
 build "status change" packet (one or two bytes) from HC registers 
 undocumented erratum seen on at least rev D 
 retry later; "should not happen" 
 init status 
 Clear the RHSC status flag before reading the port statuses 
 look at each port 
 can't autostop if ports are connected 
-------------------------------------------------------------------------
 no power switching? 
 per-port power switching? 
 no overcurrent reporting? 
 per-port overcurrent reporting? 
 ports removable, and usb 1.0 legacy PortPwrCtrlMask 
-------------------------------------------------------------------------
 start port reset before HNP protocol times out 
 hub_wq will finish the reset later 
-------------------------------------------------------------------------
 See usb 7.1.7.5:  root hubs must issue at least 50 msec reset signaling,
  not necessarily continuous ... to guard against resume signaling.
 this timer value might be vendor-specific ... 
 wrap-aware logic morphed from <linuxjiffies.h> 
 called from some task, normally hub_wq 
	 build a "continuous enough" reset signal, with up to
	  3msec gap between pulses.  scheduler HZ==100 must work;
	  this might need to be deadline-scheduled.
 spin until any current reset finishes 
 handle e.g. CardBus eject 
		 timeout (a hardware error) has been observed when
		  EHCI sets CF while this driver is resetting a port;
		  presumably other disconnect paths might do it too.
 start the next reset, sleep till it's probably done 
	 caller synchronizes using PRSC ... and handles PRS
	  still being set when this returns.
 ohci_readl (ohci, &ohci->regs->roothub.portstatus [wIndex]);
 only if wPortChange is interesting 
 FIXME:  this can be cleared, yes?
 "protocol stall" on error 
 SPDX-License-Identifier: GPL-2.0
  SuperH EHCI host controller driver
  Copyright (C) 2010  Paul Mundt
  Based on ohci-sh.c and ehci-atmel.c.
	
	  generic hardware linkage
	
	  basic lifecycle operations
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
 initialize hcd 
 These are optional, we don't care if they fail 
 SPDX-License-Identifier: GPL-2.0
  xHCI host controller driver for R-Car SoCs
  Copyright (C) 2014 Renesas Electronics Corporation
 - The V3 firmware is for almost all R-Car Gen3 (except r8a7795 ES1.x)
 - The V2 firmware is for r8a7795 ES1.x.
 - The V2 firmware is possible to use on R-Car Gen2. However, the V2 causes
   performance degradation. So, this driver continues to use the V1 if R-Car
   Gen2.
 - The V1 firmware is impossible to use on R-Car Gen3.
 Register Offset 
 AXI Host Control Status 
 Interrupt Enable 
 FW Download Control & Status 
 FW Data0 
 LCLK Select 
 USB3.0 Configuration1 
 USB3.0 Configuration2 
 USB3.0 Configuration3 
 USB3.0 RX Polarity 
 USB3.0 TX Polarity 
 Register Settings 
 AXI Host Control Status 
 Interrupt Enable 
 FW Download Control & Status 
 LCLK Select 
 USB3.0 Configuration 
 USB3.0 Polarity 
 For soc_device_attribute 
 FIRMWARE V2 
 FIRMWARE V3 
 sentinel  },
 LCLK Select 
 USB3.0 Configuration 
 USB3.0 Polarity 
 Interrupt Enable 
	
	  According to the datasheet, "Upon the completion of FW Download,
	  there is no need to write or reload FW".
 request R-Car USB3.0 firmware 
 download R-Car USB3.0 firmware 
 to avoid reading beyond the end of the buffer 
 This function needs to initialize a "phy" of usb before 
 If hcd->regs is NULL, we don't just call the following function 
 SPDX-License-Identifier: GPL-2.0
  UHCI HCD (Host Controller Driver) PCI Bus Glue.
  Extracted from uhci-hcd.c:
  Maintainer: Alan Stern <stern@rowland.harvard.edu>
  (C) Copyright 1999 Linus Torvalds
  (C) Copyright 1999-2002 Johannes Erdfelt, johannes@erdfelt.com
  (C) Copyright 1999 Randy Dunlap
  (C) Copyright 1999 Georg Acher, acher@in.tum.de
  (C) Copyright 1999 Deti Fliegl, deti@fliegl.de
  (C) Copyright 1999 Thomas Sailer, sailer@ife.ee.ethz.ch
  (C) Copyright 1999 Roman Weissgaerber, weissg@vienna.at
  (C) Copyright 2000 Yggdrasil Computing, Inc. (port of new PCI interface
                support from usb-ohci.c by Adam Richter, adam@yggdrasil.com).
  (C) Copyright 1999 Gregory P. Smith (from usb-ohci.c)
  (C) Copyright 2004-2007 Alan Stern, stern@rowland.harvard.edu
  Make sure the controller is completely inactive, unable to
  generate interrupts or do DMA.
  Initialize a controller that was newly discovered or has just been
  resumed.  In either case we can't be sure of its previous state.
  Returns: 1 if the controller was reset, 0 otherwise.
  Store the basic register settings needed by the controller.
  This function is called at the end of configure_hc in uhci-hcd.c.
 Enable PIRQ 
 Disable platform-specific non-PME# wakeup 
		 Genesys Logic's GL880S controllers don't generate
		  resume-detect interrupts.
		 Some of Intel's USB controllers have a bug that causes
		  resume-detect interrupts if any port has an over-current
		  condition.  To make matters worse, some motherboards
		  hardwire unused USB ports' over-current inputs active!
		  To prevent problems, we will not enable resume-detect
		  interrupts if any ports are OC.
	 One of Asus's motherboards has a bug which causes it to
	  wake up immediately from suspend-to-RAM if any of the ports
	  are connected.  In such cases we will not set EGSM.
	 Intel controllers report the OverCurrent bit active on.
	  VIA controllers report it active off, so we'll adjust the
	  bit value.  (It's not standardized in the UHCI spec.)
 HP's server management chip requires a longer port reset delay. 
 Intel controllers use non-PME wakeup signalling 
 Set up pointers to PCI-specific functions 
	 Kick BIOS off this hardware and reset if the controller
	  isn't already safely quiescent.
 Make sure the controller is quiescent and that we're not using it
  any more.  This is mainly for the benefit of programs which, like kexec,
  expect the hardware to be idle: not doing DMA or generating IRQs.
  This routine may be called in a damaged or failing kernel.  Hence we
  do not acquire the spinlock before shutting down the controller.
 Already suspended or dead 
	 All PCI host controllers are required to disable IRQ generation
	  at the source, so we must turn off PIRQ.
 Enable platform-specific non-PME# wakeup 
 Check for race with a wakeup request 
	 Since we aren't in D3 any more, it's safe to set this flag
	  even if the controller was dead.
 Make sure resume from hibernation re-enumerates everything 
	 The firmware may have changed the controller settings during
	  a system wakeup.  Check it and reconfigure to avoid problems.
 Tell the core if the controller had to be reset 
	 If interrupts don't work and remote wakeup is enabled then
	  the suspended root hub needs to be polled.
 Does the root hub have a port wakeup pending? 
 Generic hardware linkage 
 Basic lifecycle operations 
 handle any USB UHCI controller 
 end: all zeroes  }
 SPDX-License-Identifier: GPL-2.0+
  Freescale QUICC Engine USB Host Controller Driver
  Copyright (c) Freescale Semicondutor, Inc. 2006, 2011.
                Shlomi Gridish <gridish@freescale.com>
                Jerry Huang <Chang-Ming.Huang@freescale.com>
  Copyright (c) Logic Product Development, Inc. 2007
                Peter Barada <peterb@logicpd.com>
  Copyright (c) MontaVista Software, Inc. 2008.
                Anton Vorontsov <avorontsov@ru.mvista.com>
 confirm submitted packet 
		
		  There was an error on the transaction (but not NAK).
		  If it is fatal error (data underrun, stall, bad pid or 3
		  errors exceeded), mark this TD as done.
 it is not a fatal error -retry this transaction 
 there was a NAK response 
 there was no error on transaction 
  Flush all transmitted packets from BDs
  This routine is called when disabling the USB port to flush all
  transmissions that are already scheduled in the BDs
 reset the event register 
 enable the USB controller 
  This function forms the packet and transmit the packet. This function
  will handle all endpoint type:ISO,interrupt,control and bulk
 calcalate data address,len and toggle and then add the transaction 
 check if there's enough space in this frame to submit this TD 
 check if there's enough time in this frame to submit this TD 
 update frame object fields before transmitting 
 update TD status field before transmitting 
 update actual frame time object with the actual transmission 
 remove TD from actual frame 
  This function goes through the endpoint list and schedules the
  transactions within this list
		
		  if it isn't interrupt pipe or it is not iso pipe and the
		  interval time passed
 update time stamps in the TD 
 be fair to each ED(move list head around) 
  This function schedule the USB transaction and will process the
  endpoint in the following order: iso, interrupt, control and bulk.
		
		  schedule the next available ISO transfer
		 or next stage of the ISO transfer
		
		  schedule the next available interrupt transfer or
		  the next stage of the interrupt transfer
		
		  schedule the next available control transfer
		  or the next stage of the control transfer
	
	  schedule the next available bulk transfer or the next stage of the
	  bulk transfer
 Handles SOF interrupt 
 Disable IDLE 
 Handles device disconnected interrupt on port 
 Enable IDLE since we want to know if something comes along 
 detect a new device connected on the USB port 
 low-speed device was connected to the USB port 
 Cancel transmission on the USB endpoint 
 issue stop Tx command 
 flush Tx FIFOs 
 reset Tx BDs 
 issue restart Tx command 
 clear event bits for next time 
 Turn on IDLE since we want to disconnect 
 XXX usb->port_status = FHCI_PORT_WAITING; 
 Disable IDLE 
  Process normal completions(error or success) and clean the schedule.
  This is the main path for handing urbs back to drivers. The only other patth
  is process_del_list(),which unlinks URBs by scanning EDs,instead of scanning
  the (re-reversed) done list as this does.
 update URB's length and status from TD 
		
		  if all this urb's TDs are done, call complete()
		  Interrupt transfers are the onley special case:
		  they are reissued,until "deleted" by usb_unlink_urb
		  (real work done in a SOF intr, by process_del_list)
 transfer complted callback 
  adds urb to the endpoint descriptor list
  arguments:
  fhci		data structure for the Low level host controller
  ep		USB Host endpoint data structure
  urb		USB request block data structure
 for ISO transfer calculate start frame index 
 Ignore the possibility of underruns 
	
	  OHCI handles the DATA toggle itself,we just use the USB
	  toggle bits
 setup stage 
 data stage 
 status stage 
			
			  FIXME scheduling should handle frame counter
			  roll-around ... exotic case (and OHCI has
			  a 2^16 iso range, vs other HCs max of 2^10)
	
	  set the state of URB
	  control pipe:3 states -- setup,data,status
	  interrupt and bulk pipe:1 state -- data
 SPDX-License-Identifier: GPL-2.0+
  Copyright (c) 2008 Rodolfo Giometti <giometti@linux.it>
  Copyright (c) 2008 Eurotech S.p.A. <info@eurtech.it>
  This code is strongly based on EHCI-HCD code by David Brownell since
  the chip is a quasi-EHCI compatible.
  Proper EHCI structs & defines
 Magic numbers that can affect system performance 
 0-3 qtd retries; 0 == don't stop 
 nak throttle; see 4.9 
 1-3 transactionsuframe; 4.10.3 
 (small) 256 frame schedule 
 EHCI register interface, corresponds to EHCI Revision 0.95 specification 
 Section 2.2 Host Controller Capability Registers 
	 these fields are specified as 8 and 16 bit registers,
	  but some hosts can't perform 8 or 16 bit PCI accesses.
 bits 7:0 
 bits 31:16 
 HCSPARAMS - offset 0x4 
 bits 23:20, debug port? 
 true: has port indicators 
 bits 15:12, #companion HCs 
 bits 11:8, ports per CC 
 true: port routing 
 true: port power control 
 bits 3:0, ports on HC 
 HCCPARAMS - offset 0x8 
 for pci extended caps 
 true: can cache isoc frame 
 bits 6:4, uframes cached 
 true: can park on async qh 
 true: periodic_size changes
 true: can use 64-bit addr 
 nibbles for routing - offset 0xC 
 Section 2.3 Host Controller Operational Registers 
 USBCMD: offset 0x00 
 23:16 is rw intr rate, in microframes; default "8" == 1msec 
 enable "park" on async qh 
 how many transfers to park for 
 partial reset (no ports, etc) 
 "doorbell" interrupt async advance 
 async schedule enable 
 periodic schedule enable 
 3:2 is periodic frame list size 
 reset HC not bus 
 startstop HC 
 USBSTS: offset 0x04 
 Async Schedule Status 
 Periodic Schedule Status 
 Reclamation 
 Not running (any reason) 
 some bits reserved 
 these STS_ flags are also intr_enable bits (USBINTR) 
 Interrupted on async advance 
 such as some PCI access errors 
 frame list rolled over 
 port change detect 
 "error" completion (overflow, ...) 
 "normal" completion (short, ...) 
 USBINTR: offset 0x08 
 FRINDEX: offset 0x0C 
 current microframe number 
 CTRLDSSEGMENT: offset 0x10 
 address bits 63:32 if needed 
 PERIODICLISTBASE: offset 0x14 
 points to periodic list 
 ASYNCLISTADDR: offset 0x18 
 address of next async queue head 
 CONFIGFLAG: offset 0x40 
 true: we'll support "high speed" 
 PORTSC: offset 0x44 
 up to N_PORTS 
 31:23 reserved 
 wake on overcurrent (enable) 
 wake on disconnect (enable) 
 wake on connect (enable) 
 19:16 for port testing 
 true: companion hc owns this port 
 true: has power (see PPC) 
 USB 1.1 device 
 11:10 for detecting lowspeed devices (reset vs release ownership) 
 9 reserved 
 reset port 
 suspend port 
 resume it 
 over current change 
 over current active 
 port enable change 
 port enable 
 connect status change 
 device connected 
 Appendix C, Debug port ... intended for use with special "debug devices"
  that can help if there's no serial console.  (nonstandard enumeration.)
  EHCI Specification 0.95 Section 3.5
  QTD: describe data transfer components (buffer, direction, ...)
  See Fig 3-6 "Queue Element Transfer Descriptor Block Diagram".
  These are associated only with "QH" (Queue Head) structures,
  used with control, bulk, and interrupt transfers.
 first part defined by EHCI spec 
 see EHCI 3.5.1 
 see EHCI 3.5.2 
 see EHCI 3.5.3 
 data toggle 
 interrupt on complete 
 HC may execute this 
 halted on error 
 data buffer error (in HC) 
 device was babbling (qtd halted) 
 device gave illegal response 
 incomplete split transaction 
 split transaction state 
 issue PING? 
 see EHCI 3.5.4 
 Appendix B 
 the rest is HCD-private 
 qtd address 
 sw qtd list 
 qtd's urb 
 length of buffer 
 mask NakCnt+T in qh->hw_alt_next 
 Type tag from {qh, itd, sitd, fstn}->hw_next 
 values for that type tag 
 next async queue entry, or pointer to interruptperiodic QH 
 for periodicasync schedules and qtd lists, mark end of list 
 "null pointer" to hw 
  Entries in periodic shadow table are pointers to one of four kinds
  of data structure.  That's dictated by the hardware; a type tag is
  encoded in the low bits of the hardware's periodic schedule.  Use
  Q_NEXT_TYPE to get the tag.
  For entries in the async schedule, the type tag always says "qh".
 Q_TYPE_QH 
 (all types) 
  EHCI Specification 0.95 Section 3.6
  QH: describes controlbulkinterrupt endpoints
  See Fig 3-7 "Queue Head Structure Layout".
  These appear in both the async and (for interrupt) periodic schedules.
 first part defined by EHCI spec 
 see EHCI 3.6.1 
 see EHCI 3.6.2 
 see EHCI 3.6.2 
 qtd list - see EHCI 3.6.4 
 qtd overlay (hardware parts of a struct ehci_qtd) 
 the rest is HCD-private 
 address of qh 
 ptr to qh; or periodic 
 sw qtd list 
 next to reclaim 
 HC sees this 
 HC may still see this 
 HC doesn't see this 
 LINKED and on reclaim q 
 don't touch token.HALT 
 periodic schedule info 
 intr bandwidth 
 uframes splitcsplit gap 
 ... split completion bw 
 tt downstream bandwidth 
 polling interval 
 where polling starts 
 pick new start 
 access to TT 
  Proper OXU210HP structs
 Only how many elements & element structure are specifies here. 
 2 host controllers are enabled - total size <= 28 kbytes 
 see HCS_N_PORTS 
 one per controller 
 cached register copy 
 async schedule support 
 periodic schedule support 
 hw periodic table 
 uframes HC might cache 
 mirror hw periodic table 
 scan periodic, start here 
 periodic activity count 
 per root hub port 
 bit vectors (one bit per port) 
	unsigned long		bus_suspended;	 which ports were
						  already suspended at the
						  start of a bus suspend
	unsigned long		companion_ports; which ports are dedicated
						  to the companion controller
 SILICON QUIRKS 
	struct list_head	urb_list;	 this is the head to urb
						  queue that didn't get enough
						  resources
 murb per split big urb 
 packed release number 
 arbitrary; ~10 msec 
 io watchdog > irq_thresh 
 async idle timeout 
 async qh unlink delay 
  Main defines
  Debug stuff
 Nop 
 signaling state 
 low speed 
 DEBUG 
 functions have the "wrong" filename when they're output... 
  Module parameters
 Initial IRQ latency: faster than hw default 
 0 to 6 
 Initial park setting: slower than hw default 
 For flakey hardware, ignore overcurrent indicators 
  Local functions
 Low level readwrite registers functions 
		 all timings except IAA watchdog can be overridden.
		  async queue SHRINK often precedes IAA.  while it's ready
		  to go OFF neither can matter, and afterwards the IO
		  watchdog stops unless there's still periodic traffic.
  handshake - spin reading hc until handshake completes or fails
  @ptr: address of hc register to be read
  @mask: bits to look at in result of read
  @done: value of those bits when handshake succeeds
  @usec: timeout in microseconds
  Returns negative errno, or zero on success
  Success happens when the "mask" bits have the specified value (hardware
  handshake done).  There are two failure modes:  "usec" have passed (major
  hardware flakeout), or the register reads as all-ones (hardware removed).
  That last failure should_only happen in cases like physical cardbus eject
  before driver shutdown. But it also seems to be caused by bugs in cardbus
  bridge shutdown:  shutting down the bridge before the devices using it.
 card removed 
 Force HC to halt state from unknown (EHCI spec section 2.3) 
 disable any irqs left enabled by previous code 
 Put TDIARC silicon into EHCI mode 
 Reset a non-running (STS_HALT == 1) controller 
 Idle the controller (from running) 
 wait for any schedule enablesdisables to take effect 
 then disable anything that's still active 
 hardware can take 16 microframes to turn off ... 
 if reset finished and it's still not enabled -- handoff 
 oxu 1.0, 2.3.9 says 20ms max 
 ports removable, and usb 1.0 legacy PortPwrCtrlMask 
 per-port overcurrent reporting 
 per-port power control 
 no power switching 
 Allocate an OXU210HP on-chip memory data buffer
  An on-chip memory data buffer is required for each OXU210HP USB transfer.
  Each transfer descriptor has one or more on-chip memory data buffers.
  Data buffers are allocated from a fix sized pool of data blocks.
  To minimise fragmentation and give reasonable memory utlisation,
  data buffers are allocated with sizes the power of 2 multiples of
  the block size, starting on an address a multiple of the allocated size.
  FIXME: callers of this function require a buffer to be allocated for
  len=0. This is a waste of on-chip memory and should be fix. Then this
  function should be changed to not allocate a buffer for len=0.
 minium blocks needed to hold len 
 blocks allocated 
 Don't allocte bigger than supported 
 Number of blocks needed to hold len 
 Round the number of blocks up to the power of 2 
 Find a suitable available data buffer 
 Check all the required blocks are available 
 Allocate blocks found! 
 Failed 
 clean qtds first, and know this is not linked 
 dummy td enables safe urb queuing 
 to share a qh (cpu threads, or hc) 
 The queue heads and transfer descriptors are managed from pools tied
  to each of the "per device" structures.
  This is the initialisation and cleanup code.
 shadow periodic table 
 Remember to add cleanup code (above) if you add anything here.
 software shadow of hardware table 
 Fill a qtd, returning how much of the buffer we were able to queue up.
 one buffer entry per 4K ... first might be short or unaligned 
 rest of that page 
 ... iff needed 
 per-qtd limit: from 16K to 20K (best alignment) 
 short packets may only terminate transfers 
 writes to an active overlay are unsafe 
	 Except for control endpoints, we make hardware maintain data
	  toggle (like OHCI) ... here (re)initialize the toggle in the QH,
	  and set the pseudo-toggle in udev. Only usb_clear_halt() will
	  ever clear it.
 HC must see latest qtd and qh data before we clear ACTIVE+HALT 
 If it weren't for a common silicon quirk (writing the dummy into the qh
  overlay, so qh->hw_token wrongly becomes inactivehalted), only fault
  recovery (including urb dequeue) would need software changes to a QH...
 first qtd may already be partially processed 
 count INOUT bytes, not SETUP (even short packets) 
 don't modify error codes 
 force cleanup after short read; not always an error 
 serious "can't proceed" faults reported by the hardware 
 FIXME "must" disable babbling device's port too 
 fsls interrupt xfer missed the complete-split 
 IN ? 
 hc couldn't read data 
 hc couldn't write data 
 timeout, bad crc, wrong PID, etc; retried 
 CERR nonzero + no errors + halt --> stall 
 unknown 
 S-mask in a QH means it's an interrupt urb 
 ... update hc-wide periodic stats (for usbfs) 
 success 
 fault 
 fault or normal 
 canceled 
 complete() can reenter this HCD 
 Process and free completed qtds for a qh, returning URBs to drivers.
  Chases up to qh->hw_current.  Returns number of completions called,
  indicating how much "real" work we did.
	 completions (or tasks on other cpus) must never clobber HALT
	  till we've gone through and cleaned everything up, even when
	  they add urbs to this qh's queue or mark them for unlinking.
	 
	  NOTE:  unlinking expects to be done in queue order.
	 remove de-activated QTDs from front of queue.
	  after faults (including short reads), cleanup this urb
	  then let the queue advance.
	  if queue is stopped, handles unlinks.
 Clean up any state from previous QTD ...
 ignore urbs submitted during completions we reported 
 hardware copies qtd out of qh overlay 
 always clean up qtds the hc de-activated 
			 magic dummy for some short reads; qh won't advance.
			  that silicon quirk can kick in with this dummy too.
 stop scanning when we reach qtds the hc is using 
			 ignore active urbs unless some previous qtd
			  for the urb faulted (including short read) or
			  its urb was canceled.  we may patch qh or qtds.
 issue status after short control reads 
 OUT ) {
 token in overlay may be most current 
			 force halt for unlinked or blocked qh, so we'll
			  patch the qh later and so that completions can't
			  activate it while we "know" it's stopped.
 Remove it from the queue 
 last urb's completion might still need calling 
 restore original state; caller must unlink or relink 
	 be sure the hardware's done with the qh before refreshing
	  it after fault cleanup, or recovering from silicon wrongly
	  overlaying the dummy qtd (which reduces DMA chatter).
			 should be rare for periodic transfers,
			  except maybe high bandwidth ...
 otherwise, unlink already started 
 High bandwidth multiplier, as encoded in highspeed endpoint descriptors 
 ... and packet size, for any kind of endpoint descriptor 
 Reverse of qh_urb_transaction: free a list of TDs.
  used for cleanup after errors, before HC sees an URB's TDs.
 Create a list of filled qtds for this URB; won't link into qh.
	
	  URBs map to sequences of QTDs: one logical transaction
 for split transactions, SplitXState initialized to zero 
 SETUP pid 
 "setup"  << 8), 8);
 ... and always at least one more pid 
 for zero length DATA stages, STATUS is always IN 
 "in"  << 8);
	
	  Data transfer stage: buffer setup
 "in"  << 8);
 else it's already initted to "out" pid (0 << 8) 
	
	  buffer gets wrapped in one or more qtds;
	  last one may be "short" (including zero len)
	  and may serve as a control status ack
 qh makes control packets use qtd toggle; maybe switch it 
	 unless the bulkinterrupt caller wants a chance to clean
	  up after short reads, hc should advance qh past this urb
	
	  control requests may need a terminating data "status" ack;
	  bulk ones may need a terminating short packet (zero length).
 "in" <--> "out"  
 force DATA1 
 never any data in such packets 
 by default, enable interrupt on urb completion 
 Each QH holds a qtd list; a QH is used for everything except iso.
  For interrupt urbs, the scheduler must set the microframe scheduling
  mask(s) each time the QH gets scheduled.  For highspeed, that's
  just one microframe in the s-mask.  For split interrupt transactions
  there are additional complications: c-mask, maybe FSTNs.
	
	  init endpointdevice data for this QH
	 Compute interrupt scheduling parameters just once, and save.
	  - allowing for high bandwidth, how many nsecuframe are used?
	  - split transactions need a second CSPLIT uframe; same question
	  - splits also need a schedule gap (for fulllow speed IO)
	  - qh has a polling interval
	 
	  For controlbulk requests, the HC or TT handles these.
				 NOTE interval 2 or 4 uframes could work.
				  But interval 1 scheduling is simpler, and
				  includes high bandwidth.
 gap is f(FSLS transfer times) 
 FIXME this just approximates SPLITCSPLIT times 
 SPLIT, gap, CSPLIT+DATA 
 SPLIT+DATA, gap, CSPLIT 
 support for tt scheduling, and access to toggles 
 using TT? 
 EPS "low" 
 EPS 0 means "full" 
 for TT 
 toggle from qtd 
 NOTE:  if (PIPE_INTERRUPT) { scheduler sets c-mask } 
 no TT involved 
 EPS "high" 
 usb2 fixed maxpacket 
 toggle from qtd 
 usb2 fixed maxpacket 
 PIPE_INTERRUPT 
 NOTE:  if (PIPE_INTERRUPT) { scheduler sets s-mask } 
 init as live, toggle clear, advance to dummy 
 Move qh (and its qtds) onto async queue; maybe enable queue.
 (re)start the async schedule? 
 in case a clear of CMD_ASE didn't take yet 
 posted write need not be known to HC yet ... 
 clear halt andor toggle; and maybe recover from silicon quirk 
 splice right after start 
 qtd completions reported later by interrupt 
  For controlbulkinterrupt, return QH with these TDs appended.
  Allocates and initializes the QH if necessary.
  Returns null if it can't allocate a QH it needs to.
  If the QH has TDs (urbs) already, that's great.
 can't sleep here, we have oxu->lock... 
 control qh may need patching ... 
 usb_reset_device() briefly reverts to address 0 
		 just one way to queue requests: swap with the dummy qtd.
		  only hc or qh_refresh() ever modify the overlay.
			 to avoid racing the HC, use the dummy td instead of
			  the first td of our list (becomes new dummy).  both
			  tds stay deactivated until we're done, when the
			  HC is allowed to fetch the old dummy (4.10.2).
 hc must see the new dummy at list end 
 let the hc process these next qtds 
	 Controlbulk operations through TTs don't need scheduling,
	  the HC and TT handle it when the TT has a buffer ready.
 The async qh for the qtds being reclaimed are now unlinked from the HC 
 refcount from reclaim 
 other unlink(s) may be pending (in QH_STATE_UNLINK_WAIT) 
 refcount from async list 
		 it's not free to turn the async schedule onoff; leave it
		  active but idle for a while once it empties.
 makes sure the async qh will become idle 
 caller must own oxu->lock 
 stop async schedule right now? 
 can't get here without STS_ASS set 
 ... and CMD_IAAD clear 
 handshake later, if we need to 
		 if (unlikely(qh->reclaim != 0))
		 	this will recurse, probably not much
 clean any finished work for this qh 
				 unlinks could happen here; completion
				  reporting drops the lock.  rescan using
				  the latest schedule, but don't rescan
				  qhs we already finished (no looping).
			 unlink idle entries, reducing HC PCI usage as well
			  as HCD schedule-scanning costs.  delay for any qh
			  we just scanned, there's a not-unusual case that it
			  doesn't stay idle for long.
			  (plus, avoids some kind of re-activation race.)
  periodic_next_shadow - return "next" pointer on shadow list
  @periodic: host pointer to qhitdsitd
  @tag: hardware tag for type of this record
 caller must hold oxu->lock 
 find predecessor of "ptr"; hw and shadow lists are in sync 
 an interrupt entry (at list end) could have been shared 
	 update shadow and hardware lists ... the old "next" pointers
	  from ptr may still be in use, the caller updates them.
 how many of the uframe's 125 usecs are allocated? 
 is it in the S-mask? 
 ... or C-mask? 
	 did clearing PSE did take effect yet?
	  takes effect only at frame boundaries...
 posted write ... PSS happens later 
 make sure ehci_work scans these 
	 did setting PSE not take effect yet?
	  takes effect only at frame boundaries...
 posted write ... 
 periodic schedule slots have iso tds (normal or split) first, then a
  sparse tree for active interrupt transfers.
  this just links in a qh; caller guarantees uframe masks are set right.
  no FSTN support (yet; oxu 0.96+)
 high bandwidth, or otherwise every microframe 
 skip the iso nodes at list head 
		 sorting each branch by period (slow-->fast)
		  enables sharing interior tree nodes
 link in this qh, unless some earlier pass did that 
 update per-qh bandwidth for usbfs 
 maybe enable periodic schedule processing 
	 FIXME:
	    IF this isn't high speed
	    and this qh is active in the current uframe
	    (and overlay token SplitXstate is false?)
	  THEN
	    qh->hw_info1 |= cpu_to_le32(1 << 7 "ignore");
 high bandwidth, or otherwise part of every microframe 
 update per-qh bandwidth for usbfs 
 qh->qh_next still "live" to HC 
 maybe turn off periodic schedule 
	 simpleparanoid:  always delay, expecting the HC needs to read
	  qh->hw_next or finish a writeback after SPLITCSPLIT ... and
	  expect hub_wq to clean up after any CSPLITs we won't issue.
	  active high speed queues may need bigger delays...
 worst case: 3  1024 
	 complete split running into next frame?
	  given FSTN support, we could sometimes check...
	
	  80% periodic == 100 usecuframe available
	  convert "usecs we need" to "max already claimed"
	 we "know" 2 and 4 uframe intervals were rejected; so
	  for period 0, check _every_ microframe in the schedule.
 just check the specified uframe, at that period 
 FSTN territory? 
 "first fit" scheduling policy used the first time through,
  or when the previous schedule slot can't be re-used.
 0..(qh->period - 1), or NO_FRAME 
 reuse the previous schedule slots, if we can 
	 else scan the schedule to find a group of slots such that all
	  uframes have enough periodic bandwidth available.
 "normal" case, uframing flexible except with splits 
 qh->period == 0 means every uframe 
 reset S-frame and (maybe) C-frame masks 
 stuff into the periodic schedule 
 get endpoint and transferschedule data 
 get qh and force any scheduling errors 
 then queue the urb's tds to the qh 
 ... update usbfs periodic stats 
	
	  When running, scan from last scan point up to "now"
	  else clean up by scanning everything that's left.
	  Touches as few pages as possible:  cache-friendly.
 don't scan past the live uframe 
 safe to scan the whole frame at once 
 scan each element in frame's queue for completions 
 handle any completions 
 assume completion callbacks modify the queue 
 Stop when we catch up to the HC 
		 FIXME:  this assumes we won't get lapped when
		  latencies climb; that should be rare, but...
		  detect it, and just go all the way around.
		  FLR might help detect this case, so long as latencies
		  don't exceed periodic_size msec (default 1.024 sec).
 FIXME: likewise assumes HC doesn't halt mid-scan 
 rescan the rest of this frame, then ... 
 On some systems, leaving remote wakeup enabled prevents system shutdown.
  The firmware seems to think that powering off is a wakeup event!
  This routine turns off remote wakeup and everything else, on all ports.
 Called from some interrupts, timers, and so on.
  It calls driver completion functions, after dropping oxu->lock.
	 another CPU may drop oxu->lock during a schedule scan while
	  it reports urb completions.  this flag guards against bogus
	  attempts at re-entrant schedule scanning.
	 the IO watchdog guards against hardware or driver bugs that
	  misplace IRQs, and should let us run completely without IRQs.
	  such lossage has been observed on both VT6202 and VT8235.
 if we need to use IAA and it's busy, defer 
 bypass IAA if the hc can't care 
 something else might have unlinked the qh by now 
  USB host controller methods
 e.g. cardbus physical eject 
 Shared IRQ? 
 clear (just) interrupts 
 unblock posted write 
 unrequestedignored: Frame List Rollover 
 INT, ERR, and IAA interrupt rates can be throttled 
 normal [4.15.1.2] or error [4.15.1.1] completion 
 complete the unlinking of some qh [4.15.2.3] 
 remote wakeup [4.3.1] 
 resume root hub? 
			 start USB_RESUME_TIMEOUT resume signaling from this
			  port, and make hub_wq collect PORT_STAT_C_SUSPEND to
			  stop that signaling.
 PCI errors [4.15.2.4] 
 bogus "fatal" IRQs appear on some chips... why?  
			 generic layer killsunlinks all urbs, then
			  uses oxu_stop to clean up the rest
 Disable all interrupt 
 Enable all interrupt back 
 lost IAA irqs wedge things badly; seen with a vt8235 
 stop async processing after it's idled a bit 
 oxu could run by timer, without IRQs ... 
 One-time init, only for memory state.
	
	  hw default: 1K periodic list heads, one per frame.
	  periodic_size can shrink by USBCMD update if hcc_params allows.
 controllers may cache some of the periodic schedule ... 
 full frame cache 
 N microframes cached 
	
	  dedicate a qh for the async ring head, since we couldn't unlink
	  a 'real' qh without stopping the async schedule [4.8].  use it
	  as the 'reclamation list head' too.
	  its dummy is used in hw_alt_next of many tds, to prevent the qh
	  from automatically advancing to the next td after short reads.
 clear interrupt enables, set irq latency 
		 HW default park == 3, on hardware that supports it (like
		  NVidia and ALI silicon), maximizes throughput on the async
		  schedule by avoiding QH fetches between transfers.
		 
		  With fast usb storage devices and NForce2, "park" seems to
		  make problems:  throughput reduction (!), data errors...
 periodic schedule size can be smaller than default 
 Called during probe() after chip reset completes.
 EHCI spec section 4.1 
	 hcc_params controls whether oxu->regs->segment must (!!!)
	  be used; it constrains QHITDSITD and QTD locations.
	  dma_pool consistent memory always uses segment zero.
	  streaming mappings for IO buffers, like dma_map_single(),
	  can return segments above 4GB, if the device allows.
	 
	  NOTE:  the dma mask is visible through dev->dma_mask, so
	  drivers can pass this info along ... like NETIF_F_HIGHDMA,
	  Scsi_Host.highmem_io, and so forth.  It's readonly to all
	  host side drivers though.
	
	  Start, enabling full USB 2.0 functionality ... usb 1.1 devices
	  are explicitly handed to companion controller(s), so no TT is
	  involved with the root hub.  (Except where one is integrated,
	  and there's no companion controller unless maybe for USB OTG.)
 unblock posted writes 
 Turn On Interrupts 
 Turn off port power on all root hub ports. 
 no more interrupts ... 
 let companion controllers work when we aren't 
 root hub is shut down separately (first, when possible) 
 Kick in for silicon on any bus (not just pci, etc).
  This forcibly disables dma and IRQs, helping kexec and other cases
  where the next system software may expect clean state.
 make BIOSetc use companion controller during reboot 
 unblock posted writes 
 Non-error returns are a promise to giveback() the urb later
  we drop ownership so next owner (or urb unlink) can get it
  urb + dev is in hcd.self.controller.urb_list
  we're queueing TDs onto software and hardware lists
  hcd-specific init for hcpriv hasn't been done yet
  NOTE:  control, bulk, and interrupt share the same code to append TDs
  to a (possibly active) QH, and the same QH scanning code.
 This function is responsible for breaking URBs with big data size
  into smaller size and processing small urbs in sequence.
 If not bulk pipe just enqueue the URB 
 Otherwise we should verify the USB transfer buffer size! 
 If URB is smaller than 4096 bytes just enqueue it! 
 Ok, we have more job to do! :) 
 Get free micro URB poll till a free urb is received 
 Coping the urb 
 Null pointer for the encodes that this is a micro urb 
		 This loop is to guarantee urb to be processed when there's
		  not enough resources at a particular time by retrying.
 Last urb requires special handling  
 Get free micro URB poll till a free urb is received 
 Coping the urb 
 Null pointer for the encodes that this is a micro urb 
 Remove from hardware lists.
  Completions normally happen asynchronously
 reschedule QH iff another request is queued 
				 shouldn't happen often, but ...
				  FIXME kill those tds' urbs
 Bulk qh holds the data toggle 
 ASSERT:  any requestsurbs are being unlinked 
 ASSERT:  nobody can be submitting urbs for this any more 
	 endpoints can be iso streams.  for now, we don't
	  accelerate iso completions ... so spin a while.
 periodic qh self-unlinks on empty 
 wait for hw to finish? 
 fully unlinked 
		 caller was supposed to have unlinked any requests;
		  that's not our job.  just leak this memory.
 Build "status change" packet (one or two bytes) from HC registers 
 if !PM, root hub timers won't get shut down ... 
 init status to no-changes 
	 Some boards (mostly VIA?) report bogus overcurrent indications,
	  causing massive log spam unless we completely ignore them.  It
	  may be relevant that VIA VT8235 controllers, where PORT_POWER is
	  always set, seem to clear PORT_OCC and PORT_CSC when writing to
	  PORT_POWER; that's surprising, but maybe within-spec.
 no hub change reports (bit 0) for now (power, ...) 
 port N changes (bit N)? 
		
		  Return status information even for ports with OWNER set.
		  Otherwise hub_wq wouldn't see the disconnect event when a
		  high-speed device is switched over to the companion
		  controller by the user.
 FIXME autosuspend idle root hubs 
 Returns the speed of a device attached to a port on the root hub. 
	
	  FIXME:  support SetPortFeatures USB_PORT_FEAT_INDICATOR.
	  HCS_INDICATOR may say we can change LEDs to offambergreen.
	  (track current state ourselves) ... blink for diagnostics,
	  power, "this is the one", etc.  EHCI spec supports this.
 no hub-wide featurestatus flags 
		
		  Even if OWNER is set, so the port is owned by the
		  companion controller, hub_wq needs to be able to clear
		  the port-change status bits (especially
		  USB_PORT_STAT_C_CONNECTION).
 resume signaling for 20 msec 
 we auto-clear this feature 
 GetPortStatus clears reset 
 unblock posted write 
 no hub-wide featurestatus flags 
 wPortChange bits 
 whoever resumes must GetPortStatus to complete it!! 
 Remote Wakeup received? 
 resume signaling for 20 msec 
 check the port again 
 resume completed? 
 stop resume signaling 
 2msec );
 whoever resets must GetPortStatus to complete it!! 
 force reset to complete 
			 REVISIT:  some hardware needs 550+ usec to clear
			  this bit; seems too long to spin routinely...
 see what we found out 
 transfer dedicated ports to the companion hc 
		
		  Even if OWNER is set, there's no harm letting hub_wq
		  see the wPortStatus values (they should all be 0 except
		  for PORT_POWER anyway).
 status may be from integrated TT 
 only if wPortChange is interesting 
 no hub-wide featurestatus flags 
			 line status bits may report this as low speed,
			  which can be fine if this root hub has a
			  transaction translator built in.
			
			  caller must wait, then call GetPortStatus
			  usb 2.0 spec says 50 ms resets on root
		 For downstream facing ports (these):  one hub port is put
		  into test mode according to USB2 11.24.2.13, then the hub
		  must be reset (which for root hub now means rmmod+modprobe,
		  or else system reboot).  See EHCI 2.3.9 and 4.14 for info
		  about the EHCI-specific stuff.
 unblock posted writes 
 "stall" on error 
 stop schedules, clean any completed work 
	 Unlike other USB host controller types, EHCI doesn't have
	  any notion of "global" or bus-wide suspend.  The driver has
	  to manually suspend all the active unsuspended ports, and
	  then manually resume them in the bus_resume() routine.
 keep track of which ports we suspend 
 enable remote wakeup on all ports 
 turn off now-idle HC 
 allow remote wakeup 
 Caller has locked the root hub, and should resetreinit on error 
	 Ideally and we've got a real resume here, and no port's power
	  was lost.  (For PCI, that means Vaux was maintained.)  But we
	  could instead be restoring a swsusp snapshot -- so that BIOS was
	  the last user of the controller, not resetpm hardware keeping
	  state we gave to it.
	 at least some APM implementations will try to deliver
	  IRQs right away, so delay them until we're ready.
 re-init operational registers 
 restore CMD_RUN, framelist size, and irq threshold 
	 Some controllerfirmware combinations need a delay during which
 manually resume the ports we suspended during bus_suspend() 
 maybe re-activate the schedule(s) 
 Now we can safely re-enable irqs 
 CONFIG_PM 
	
	  Generic hardware linkage
	
	  Basic lifecycle operations
	
	  Managing io requests and associated device resources
	
	  Scheduling support
	
	  Root hub support
  Module stuff
	 Initialize top level registers.
	  First write ever
 Clear all top interrupt enable 
 Clear all top interrupt status 
 Enable all needed top interrupt except OTG SPH core 
 Read controller signature register to find a match 
 Set endian mode and host mode 
 First time configuration at start up 
 Create the OTG controller 
 Create the SPH host controller 
	
	  Get the platform resources
	 Allocate a driver data struct to hold useful info for both
	  SPH & OTG devices
 FIXME: TODO 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2001-2004 by David Brownell
 this file is part of ehci-hcd.c 
-------------------------------------------------------------------------
  EHCI Root Hub ... the nonsharable stuff
  Registers don't need cpu_to_le32, that happens transparently
-------------------------------------------------------------------------
 After a power loss, ports that were owned by the companion must be
  reset so that the companion can still own them.
	
	  USB 1.1 devices are mostly HIDs, which don't need to persist across
	  suspends. If we ensure that none of our companion's devices have
	  persist_enabled (by looking through all USB 1.1 buses in the system),
	  we can skip this and avoid slowing resume down. Devices without
	  persist will just get reenumerated shortly after resume anyway.
 Make sure the ports are powered 
 Give the connections some time to appear 
 Port already owned by companion? 
 Wait for resets to complete 
			 The companion should now own the port,
			  but if something went wrong the port must not
			  remain enabled.
 First check if the controller indicates a change event 
	
	  Not all controllers appear to update this while going from D3 to D0,
	  so check the individual port status registers as well
	 If remote wakeup is enabled for the root hub but disabled
	  for the controller, we must adjust all the port wakeup flags
	  when the controller is suspended or resumed.  In all other
	  cases they don't need to be changed.
 clear phy low-power mode before changing wakeup flags 
		 If we are suspending the controller, clear the flags.
		  If we are resuming the controller, set the wakeup flags.
 enter phy low-power mode again 
 Does the root hub have a port wakeup pending? 
 stop the schedules 
	 Once the controller is stopped, port resumes that are already
	  in progress won't complete.  Hence if remote wakeup is enabled
	  for the root hub and any ports are in the middle of a resume or
	  remote wakeup, we must fail the suspend.
	 Unlike other USB host controller types, EHCI doesn't have
	  any notion of "global" or bus-wide suspend.  The driver has
	  to manually suspend all the active unsuspended ports, and
	  then manually resume them in the bus_resume() routine.
 keep track of which ports we suspend 
 enable remote wakeup on all ports, if told to do so 
			 only enable appropriate wake bits, otherwise the
			  hardware can not go phy low power mode. If a race
			  condition happens here(connection change during bits
			  set), the port change detection will finally fix it.
			
			  On some controllers, Wake-On-Disconnect will
			  generate false wakeup signals until the bus
			  switches over to full-speed idle.  For their
			  sake, add a delay if we need one.
		
		  Wait for at least 10 millisecondes to ensure the controller
		  enter the suspend status before initiating a port resume
		  using the Force Port Resume bit (Not-EHCI compatible).
		
		  Wait for HCD to enter low-power mode or for the bus
		  to switch to full-speed idle.
 Apparently some devices need a >= 1-uframe delay here 
 turn off now-idle HC 
 Some Synopsys controllers mistakenly leave IAA turned on 
 Any IAA cycle that started before the suspend is now invalid 
 allow remote wakeup 
 caller has locked the root hub, and should resetreinit on error 
	 Ideally and we've got a real resume here, and no port's power
	  was lost.  (For PCI, that means Vaux was maintained.)  But we
	  could instead be restoring a swsusp snapshot -- so that BIOS was
	  the last user of the controller, not resetpm hardware keeping
	  state we gave to it.
	 at least some APM implementations will try to deliver
	  IRQs right away, so delay them until we're ready.
 re-init operational registers 
 restore CMD_RUN, framelist size, and irq threshold 
	
	  According to Bugzilla #8190, the port status for some controllers
	  will be wrong without a delay. At their wrong status, the port
	  is enabled, but not suspended neither resumed.
 clear phy low-power mode before resume 
 manually resume the ports we suspended during bus_suspend() 
	
	  msleep for USB_RESUME_TIMEOUT ms only if code is trying to resume
	  port
 Now we can safely re-enable irqs 
 CONFIG_PM 
-------------------------------------------------------------------------
  Sets the owner of a port
	
	  The controller won't set the OWNER bit if the port is
	  enabled, so this loop will sometimes require at least two
	  iterations: one to disable the port and one to set OWNER.
-------------------------------------------------------------------------
 if reset finished and it's still not enabled -- handoff 
 with integrated TT, there's nobody to hand it to! 
 what happens if HCS_N_CC(params) == 0 ?
 ensure 440EPX ohci controller state is operational 
 ensure 440EPx ohci controller state is suspended 
-------------------------------------------------------------------------
 build "status change" packet (one or two bytes) from HC registers 
 init status to no-changes 
	 Inform the core about resumes-in-progress by returning
	  a non-zero value even if there are no status changes.
	 Some boards (mostly VIA?) report bogus overcurrent indications,
	  causing massive log spam unless we completely ignore them.  It
	  may be relevant that VIA VT8235 controllers, where PORT_POWER is
	  always set, seem to clear PORT_OCC and PORT_CSC when writing to
	  PORT_POWER; that's surprising, but maybe within-spec.
 PORT_RESUME from hardware ~= PORT_STAT_C_SUSPEND
 no hub change reports (bit 0) for now (power, ...) 
 port N changes (bit N)? 
 get per-port change detect bits 
 leverage per-port change bits feature 
		
		  Return status information even for ports with OWNER set.
		  Otherwise hub_wq wouldn't see the disconnect event when a
		  high-speed device is switched over to the companion
		  controller by the user.
 If a resume is in progress, make sure it can finish 
-------------------------------------------------------------------------
 ehci 1.0, 2.3.9 says 20ms max 
 two bitmaps:  ports removable, and usb 1.0 legacy PortPwrCtrlMask 
 per-port overcurrent reporting 
 per-port power control 
 no power switching 
 re-enable when we support USB_PORT_FEAT_INDICATOR below.
 per-port indicators (LEDs) 
-------------------------------------------------------------------------
	
	  Avoid out-of-bounds values while calculating the port index
	  from wIndex.  The compiler doesn't like pointers to invalid
	  addresses, even if they are never used.
	
	  FIXME:  support SetPortFeatures USB_PORT_FEAT_INDICATOR.
	  HCS_INDICATOR may say we can change LEDs to offambergreen.
	  (track current state ourselves) ... blink for diagnostics,
	  power, "this is the one", etc.  EHCI spec supports this.
 no hub-wide featurestatus flags 
		
		  Even if OWNER is set, so the port is owned by the
		  companion controller, hub_wq needs to be able to clear
		  the port-change status bits (especially
		  USB_PORT_STAT_C_CONNECTION).
 clear phy low-power mode before resume 
 wait to leave low-power mode 
 resume signaling for 20 msec 
 GetPortStatus clears reset 
 unblock posted write 
 no hub-wide featurestatus flags 
cpu_to_le32s ((u32 ) buf);
 wPortChange bits
			
			  Hubs should disable port power on over-current.
			  However, not all EHCI implementations do this
			  automatically, even if they _do_ support per-port
			  power switching; they're allowed to just limit the
			  current.  hub_wq will turn the power back on.
 no reset or resume pending 
 Remote Wakeup received? 
 resume signaling for 20 msec 
 check the port again 
 reset or resume not yet complete 
 wait until it is complete 
 resume completed 
 stop resume signaling 
 2msec );
 whoever resets must GetPortStatus to complete it!! 
 force reset to complete 
			 REVISIT:  some hardware needs 550+ usec to clear
			  this bit; seems too long to spin routinely...
 see what we found out 
 transfer dedicated ports to the companion hc 
		
		  Even if OWNER is set, there's no harm letting hub_wq
		  see the wPortStatus values (they should all be 0 except
		  for PORT_POWER anyway).
 status may be from integrated TT
 maybe the port was unsuspended without our knowledge 
 only if wPortChange is interesting 
 no hub-wide featurestatus flags 
			 If the debug port is active any port
			 After above check the port must be connected.
			  Set appropriate bit thus could put phy into low power
			  mode if we have tdi_phy_lpm feature
 5ms for HCD enter low pwr mode 
 10ms for HCD enter suspend 
			 line status bits may report this as low speed,
			  which can be fine if this root hub has a
			  transaction translator built in.
				
				  caller must wait, then call GetPortStatus
				  usb 2.0 spec says 50 ms resets on root
				
				  Force full-speed connect for FSL high-speed
				  erratum; disable HS Chirp by setting PFSC bit
		 For downstream facing ports (these):  one hub port is put
		  into test mode according to USB2 11.24.2.13, then the hub
		  must be reset (which for root hub now means rmmod+modprobe,
		  or else system reboot).  See EHCI 2.3.9 and 4.14 for info
		  about the EHCI-specific stuff.
 Put all enabled ports into suspend 
 unblock posted writes 
 "stall" on error 
 SPDX-License-Identifier: GPL-2.0
   PS3 EHCI Host Controller driver
   Copyright (C) 2006 Sony Computer Entertainment Inc.
   Copyright 2006 Sony Corp.
 PS3 HC internal setup register offsets. 
	 PS3 EHCI HC errata fix 316 - The PS3 EHCI HC will reset its
	  internal INSNREGXX setup regs back to the chip default values
	  on Host Controller Reset (CMD_RESET) or Light Host Controller
	  Reset (CMD_LRESET).  The work-around for this is for the HC
	  driver to re-initialise these regs when ever the HC is reset.
 Set burst transfer counts to 256 out, 32 in. 
 Enable burst transfer counts. 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2012 by Alan Stern
 This file is part of ehci-hcd.c 
-------------------------------------------------------------------------
 Set a bit in the USBCMD register 
 unblock posted write 
 Clear a bit in the USBCMD register 
 unblock posted write 
-------------------------------------------------------------------------
  EHCI timer support...  Now using hrtimers.
  Lots of different events are triggered from ehci->hrtimer.  Whenever
  the timer routine runs, it checks each possible event; events that are
  currently enabled and whose expiration time has passed get handled.
  The set of enabled events is stored as a collection of bitflags in
  ehci->enabled_hrtimer_events, and they are numbered in order of
  increasing delay values (ranging between 1 ms and 100 ms).
  Rather than implementing a sorted list or tree of all pending events,
  we keep track only of the lowest-numbered pending event, in
  ehci->next_hrtimer_event.  Whenever ehci->hrtimer gets restarted, its
  expiration time is set to the timeout value for this event.
  As a result, events might not get handled right away; the actual delay
  could be anywhere up to twice the requested delay.  This doesn't
  matter, because none of the events are especially time-critical.  The
  ones that matter most all have a delay of 1 ms, so they will be
  handled after 2 ms at most, which is okay.  In addition to this, we
  allow for an expiration range of 1 ms.
  Delay lengths for the hrtimer event types.
  Keep this list sorted by delay length, in the same order as
  the event types indexed by enum ehci_hrtimer_event in ehci.h.
 EHCI_HRTIMER_POLL_ASS 
 EHCI_HRTIMER_POLL_PSS 
 EHCI_HRTIMER_POLL_DEAD 
 EHCI_HRTIMER_UNLINK_INTR 
 EHCI_HRTIMER_FREE_ITDS 
 EHCI_HRTIMER_ACTIVE_UNLINK 
 EHCI_HRTIMER_START_UNLINK_INTR 
 EHCI_HRTIMER_ASYNC_UNLINKS 
 EHCI_HRTIMER_IAA_WATCHDOG 
 EHCI_HRTIMER_DISABLE_PERIODIC 
 EHCI_HRTIMER_DISABLE_ASYNC 
 EHCI_HRTIMER_IO_WATCHDOG 
 Enable a pending hrtimer event 
 Track only the lowest-numbered pending event 
 Poll the STS_ASS status bit; see when it agrees with CMD_ASE 
 Don't enable anything if the controller isn't running (e.g., died) 
 Poll again later, but give up after about 2-4 ms 
 The status is up-to-date; restart or stop the schedule as needed 
 Stopped 
 Running 
 Turn off the schedule after a while 
 Turn off the async schedule after a brief delay 
 Poll the STS_PSS status bit; see when it agrees with CMD_PSE 
 Don't do anything if the controller isn't running (e.g., died) 
 Poll again later, but give up after about 2-4 ms 
 The status is up-to-date; restart or stop the schedule as needed 
 Stopped 
 Running 
 Turn off the schedule after a while 
 Turn off the periodic schedule after a brief delay 
 Poll the STS_HALT status bit; see when a dead controller stops 
 Give up after a few milliseconds 
 Try again later 
 Clean up the mess 
 Not in process context, so don't try to reset the controller 
 start to unlink interrupt QHs  
	
	  Process all the QHs on the intr_unlink list that were added
	  before the current unlink cycle began.  The list is in
	  temporal order, so stop when we reach the first entry in the
	  current cycle.  But if the root hub isn't running then
	  process all the QHs on the list.
 Handle remaining entries later 
 Handle unlinked interrupt QHs once they are gone from the hardware 
	
	  Process all the QHs on the intr_unlink list that were added
	  before the current unlink cycle began.  The list is in
	  temporal order, so stop when we reach the first entry in the
	  current cycle.  But if the root hub isn't running then
	  process all the QHs on the list.
 Handle remaining entries later 
 Start another free-iTDssiTDs cycle 
 Wait for controller to stop using old iTDs and siTDs 
 Handle lost (or very late) IAA interrupts 
	
	  Lost IAA irqs wedge things badly; seen first with a vt8235.
	  So we need this watchdog, but must protect it against both
	  (a) SMP races against real IAA firing and retriggering, and
	  (b) clean HC shutdown, when IAA watchdog was pending.
	 If we get here, IAA is REALLY late.  It's barely
	  conceivable that the system is so busy that CMD_IAAD
	  is still legitimately set, so let's be sure it's
	  clear before we read STS_IAA.  (The HC should clear
	  CMD_IAAD when it sets STS_IAA.)
	
	  If IAA is set here it either legitimately triggered
	  after the watchdog timer expired (_way_ late, so we'll
	  still count it as lost) ... or a silicon erratum:
	  - VIA seems to set IAA without triggering the IRQ;
	  - IAAD potentially cleared without setting IAA.
 Enable the IO watchdog, if appropriate 
 Not needed if the controller isn't running or it's already enabled 
	
	  Isochronous transfers always need the watchdog.
	  For other sorts we use it only if the flag is set.
  Handler functions for the hrtimer event types.
  Keep this array in the same order as the event types indexed by
  enum ehci_hrtimer_event in ehci.h.
 EHCI_HRTIMER_POLL_ASS 
 EHCI_HRTIMER_POLL_PSS 
 EHCI_HRTIMER_POLL_DEAD 
 EHCI_HRTIMER_UNLINK_INTR 
 EHCI_HRTIMER_FREE_ITDS 
 EHCI_HRTIMER_ACTIVE_UNLINK 
 EHCI_HRTIMER_START_UNLINK_INTR 
 EHCI_HRTIMER_ASYNC_UNLINKS 
 EHCI_HRTIMER_IAA_WATCHDOG 
 EHCI_HRTIMER_DISABLE_PERIODIC 
 EHCI_HRTIMER_DISABLE_ASYNC 
 EHCI_HRTIMER_IO_WATCHDOG 
	
	  Check each pending event.  If its time has expired, handle
	  the event; otherwise re-enable it.
 SPDX-License-Identifier: GPL-2.0
  OHCI HCD(Host Controller Driver) for USB.
 (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
 (C) Copyright 2000-2002 David Brownell <dbrownell@users.sourceforge.net>
 (C) Copyright 2002 Hewlett-Packard Company
  Bus glue for Toshiba Mobile IO(TMIO) Controller's OHCI core
  (C) Copyright 2005 Chris Humbert <mahadri-usb@drigon.com>
  (C) Copyright 2007, 2008 Dmitry Baryshkov <dbaryshkov@gmail.com>
  This is known to work with the following variants:
 	TC6393XB revision 3	(32kB SRAM)
  The TMIO's OHCI core DMAs through a small internal buffer that
  is directly addressable by the CPU.
  Written from sparse documentation from Toshiba and Sharp's driver
  for the 2.4 kernel,
 	usb-ohci-tc6393.c(C) Copyright 2004 Lineo Solutions, Inc.
#include <linuxfs.h>
#include <linuxmount.h>
#include <linuxpagemap.h>
#include <linuxnamei.h>
-------------------------------------------------------------------------
  USB Host Controller Configuration Register
 b Revision ID				
 l USB Control Register Base Address Low	
 b Internal Local Memory Enable		
 w Power Management			
 b INT Control				
 w Local Memory Window 1 LMADRS Low	
 w Local Memory Window 1 LMADRS High	
 w Local Memory Window 1 Base Address Low	
 w Local Memory Window 1 Base Address High	
 w Local Memory Window 2 LMADRS Low	
 w Local Memory Window 2 LMADRS High	
 w Local Memory Window 2 Base Address Low	
 w Local Memory Window 2 Base Address High	
 b MISC					
-------------------------------------------------------------------------
 protects RMW cycles 
-------------------------------------------------------------------------
 generic hardware linkage 
 basic lifecycle operations 
 managing io requests and associated device resources 
 scheduling support 
 root hub support 
-------------------------------------------------------------------------
 USSUSP 
 USSUSP 
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2005 David Brownell
  (C) Copyright 2002 Hewlett-Packard Company
  OMAP Bus Glue
  Modified for OMAP by Tony Lindgren <tony@atomide.com>
  Based on the 2.4 OMAP OHCI driver originally done by MontaVista Software Inc.
  and on ohci-sa1111.c by Christopher Hoover <ch@hpl.hp.com>
  This file is licenced under the GPL.
 guesstimate for T5 == 1x 32K clock + APLL lock time 
  Board specific gang-switched transceiver power onoff.
  NOTE:  OSK supplies power from DC, not battery.
usb1) | (1 << 3
usb1) | (1 << 3
-------------------------------------------------------------------------
 defaultminimum OTG power budget:  8 mA 
 boards can use OTG transceivers in non-OTG modes 
 XXX OMAP16xx only 
 board-specific power switching and overcurrent support 
 power switching (ganged by default) 
 TPS2045 switch for internal transceiver (port 1) 
 gpio9 for overcurrent detction 
 for paranoia's sake:  disable USB.PUEN 
		 We require a self-powered hub, which should have
 FIXME hub_wq hub requests should manage power switching 
	 board init will have already handled HMC and mux setup.
	  any external transceiver should already be initialized
	  too, so all configured ports use the right signaling now.
-------------------------------------------------------------------------
  ohci_hcd_omap_probe - initialize OMAP-based HCDs
  @pdev:	USB controller to probe
  Context: task context, might sleep
  Allocates basic resources for this USB host controller, and
  then invokes the start() method for the HCD associated with it
  through the hotplug entry's driver_data.
 Obtain two optional GPIO lines 
	
	  This "overcurrent" GPIO line isn't really used in the code,
	  but has a designated hardware function.
	  TODO: implement proper overcurrent handling.
 may be called with controller, bus, and devices active 
  ohci_hcd_omap_remove - shutdown processing for OMAP-based HCDs
  @pdev: USB Host Controller being removed
  Context: task context, might sleep
  Reverses the effect of ohci_hcd_omap_probe(), first invoking
  the HCD's stop() method.  It is always called from a thread
  context, normally "rmmod", "apmd", or something similar.
-------------------------------------------------------------------------
-------------------------------------------------------------------------
  Driver definition to register with the OMAP bus
 SPDX-License-Identifier: GPL-2.0+
  SAMSUNG EXYNOS USB HOST OHCI Controller
  Copyright (C) 2011 Samsung Electronics Co.Ltd
  Author: Jingoo Han <jg1.han@samsung.com>
 Get PHYs for the controller 
 Get PHYs using legacy bindings 
	
	  Right now device-tree probed devices don't get dma_mask set.
	  Since shared usb code relies on it, set it here for now.
	  Once we move to full device tree support this will vanish off.
	
	  Workaround: reset of_node pointer to avoid conflict between legacy
	  Exynos OHCI port subnodes and generic USB device bindings
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2015 MediaTek Inc.
  Author:
   Zhigang.Wei <zhigang.wei@mediatek.com>
   Chunfeng.Yun <chunfeng.yun@mediatek.com>
 table 5-5. High-speed Isoc Transaction Limits in usb_20 spec 
 usb2 spec section11.18.1: at most 188 FS bytes per microframe 
  max number of microframes for split transfer,
  for fs isoc in : 1 ss + 1 idle + 7 cs
 schedule error type 
 mtk scheduler bitmasks 
 get the bandwidth domain which @ep belongs to.
 the bandwidth domain array is saved to @sch_array of struct xhci_hcd_mtk,
 each HS root port is treated as a single bandwidth domain,
 but each SS root port is treated as two bandwidth domains, one for IN eps,
 one for OUT eps.
 @real_port value is defined as follow according to xHCI spec:
 1 for SSport0, ..., N+1 for SSportN, N+2 for HSport0, N+3 for HSport1, etc
 so the bandwidth domain array is organized as follow for simplification:
 SSport0-OUT, SSport0-IN, ..., SSportX-OUT, SSportX-IN, HSport0, ..., HSportY
 add one more for each SS port 
 Not below a TT 
	
	  Findcreate our data structure.
	  For hubs with a single TT, we get it directly.
	  For hubs with multiple TTs, there's an extra level of pointers.
 Create the index array 
 Create the mu3h_sch_tt 
 Release the TT above udev, if it's not in use 
 Not below a TT, or never allocated 
  How many entries are left in tt_index? 
 never allocated , or still in use
		
		  usb_20 spec section5.9
		  a single microframe is enough for HS synchromous endpoints
		  in a interval
		
		  xHCI spec section6.2.3.4
		  @max_burst is the number of additional transactions
		  opportunities per microframe
 usb3_r1 spec section4.4.7 & 4.4.8 
		
		  some device's (d)wBytesPerInterval is set as 0,
		  then max_esit_payload is 0, so evaluate esit_pkts from
		  mult and burst
 last one <= bw_cost_per_microframe 
 at most one packet for each microframe 
		
		  num_budget_microframes and cs_count will be updated when
		  check TT for INT_OUT_EP, ISOCINT_IN_EP type
 init budget table 
 only first one consumes bandwidth, others as zero 
 INT_IN_EP or ISOC_IN_EP 
 start split 
 idle 
			
			  due to cs_count will be updated according to cs
			  position, assign all remainder budget array
			  elements as @bw_cost_per_microframe, but only first
			  @num_budget_microframes elements will be used later
 Get maximum bandwidth when we schedule at offset slot. 
		
		  Compared with hs bus, no matter what ep type,
		  the hub will always delay one uframe to send data
		
		  usb_20 spec section11.18:
		  must never schedule Start-Split in Y6
		
		  usb_20 spec section11.18:
		  must never schedule Start-Split in Y6
 one uframe for ss + one uframe for idle 
  ep_type : INTR IN  INTR OUT 
 HW limit 
 one for ss, the other for idle 
		
		  if interval=1, maxp >752, num_budge_micoframe is larger
		  than sch_ep->esit, will overstep boundary
 update bus bandwidth info 
	
	  Search through all possible schedule microframes.
	  and find a microframe where its worst bandwidth is minimum.
 use first-fit for LSFS 
 only release ep bw check passed by check_sch_bw() 
 only for periodic endpoints 
	
	  for LS & FS periodic endpoints which its device is not behind
	  a TT are also ignored, root-hub will schedule them directly,
	  but need set @bpkts field of endpoint context to 1.
 skip endpoint with zero maxpkt 
 ss IN and OUT are separated 
		
		  set @bpkts to 1 if it is LS or FS periodic endpoint, and its
		  device does not connected through an external HS hub
 SPDX-License-Identifier: GPL-2.0
  Broadcom specific Advanced Microcontroller Bus
  Broadcom USB-core driver (BCMA bus glue)
  Copyright 2011-2015 Hauke Mehrtens <hauke@hauke-m.de>
  Copyright 2015 Felix Fietkau <nbd@openwrt.org>
  Based on ssb-ohci driver
  Copyright 2007 Michael Buesch <m@bues.ch>
  Derived from the OHCI-PCI driver
  Copyright 1999 Roman Weissgaerber
  Copyright 2000-2002 David Brownell
  Copyright 1999 Linus Torvalds
  Copyright 1999 Gregory P. Smith
  Derived from the USBcore related parts of Broadcom-SB
  Copyright 2005-2011 Broadcom Corporation
 See BCMA_CLKCTLST_EXTRESREQ and BCMA_CLKCTLST_EXTRESST 
 Wait for bitmask in a register to get set or cleared.
  timeout is in units of ten-microseconds.
 Work around for 4716 failures. 
 set CDR to 0x11(fast) 
 set CDR to 0x10(slow) 
		 Change Shim mdio control reg to fix host not acking at
		  high frequencies
 write sel to enable 
 CONFIG_BCMA_DRIVER_MIPS 
 based on archmipsbrcm-boardsbcm947xxpcibios.c 
	
	  USB 2.0 special considerations:
	 
	  1. Since the core supports both OHCI and EHCI functions, it must
	     only be reset once.
	 
	  2. In addition to the standard SI reset sequence, the Host Control
	     Register must be programmed to bring the USB core and various
	     phy components out of reset.
 Enable Misc PLL 
 Take out of resets 
 Make sure digital and AFE are locked in USB PHY 
 Take USB and HSIC out of non-driving modes 
  bcma_hcd_usb20_old_arm_init - Initialize old USB 2.0 controller on ARM
  Old USB 2.0 core is identified as BCMA_CORE_USB20_HOST and was introduced
  long before Northstar devices. It seems some cheaper chipsets like BCM53573
  still use it.
  Initialization of this old core differs between MIPS and ARM.
 Take USB core out of reset 
 Enable Misc PLL 
 Program USB PHY PLL parameters 
 Take controller out of reset 
 Set packet buffer OUT threshold 
 Enable break memory transfer 
	
	  Broadcom initializes PHY and then waits to ensure HC is ready to be
	  configured. In our case the order is reversed. We just initialized
	  controller and we let HCD initialize PHY, so let's wait (sleep) now.
  bcma_hcd_usb20_ns_init - Initialize Northstar USB 2.0 controller
 In AI chips EHCI is addrspace 0, OHCI is 1 
 TODO: Probably need checks here; is the core connected? 
 !CONFIG_PM 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
 Driver for EHCI HCD on SPEAr SOC
 Copyright (C) 2010 ST Micro Electronics,
 Deepak Sikri <deepak.sikri@st.com>
 Based on various ehci-.c drivers
	
	  Right now device-tree probed devices don't get dma_mask set.
	  Since shared usb code relies on it, set it here for now.
	  Once we have dma capability bindings this can go away.
 registers start at offset 0x0 
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2002 David Brownell <dbrownell@users.sourceforge.net>
  This file is licenced under the GPL.
-------------------------------------------------------------------------
 Version for use where "next" is the address of a local variable 
 dump control and status registers
 intrdisable always same as intrenable
 dumps some of the state we know about
 EC,  toggle,
 caller MUST own hcd spinlock if verbose is set! 
 else from TDs ... control 
		 use ed->td_list because HC concurrently modifies
		  hwNextTD as it accumulates ed_donelist.
-------------------------------------------------------------------------
 fill method 
 protect filling of buffer 
 number of characters filled into buffer 
 print first --> last 
 dump a snapshot of the bulk or control schedule 
 display control and bulk lists together, for simplicity 
 dump a snapshot of the periodic schedule (and load) 
 show more info the first time around 
 qlen measured here in TDs, not urbs 
 we've seen it and what's after 
 dump driver info, then registers in spec order 
 hcca 
 other registers mostly affect frame timings 
 roothub 
-------------------------------------------------------------------------
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2001-2004 by David Brownell
 this file is part of ehci-hcd.c 
-------------------------------------------------------------------------
  EHCI hardware queue manipulation ... the core.  QHQTD manipulation.
  Control, bulk, and interrupt traffic all use "qh" lists.  They list "qtd"
  entries describing USB transactions, max 16-20kBentry (with 4kB-aligned
  buffers needed for the larger number).  We use one QH per endpoint, queue
  multiple urbs (all three types) per endpoint.  URBs may need several qtds.
  ISO traffic uses "ISO TD" (itd, and sitd) records, and (along with
  interrupts) needs careful scheduling.  Performance improvements can be
  an ongoing challenge.  That's in "ehci-sched.c".
  USB 1.1 devices are handled (a) by "companion" OHCI or UHCI root hubs,
  or otherwise through transaction translators (TTs) in USB 2.0 hubs using
  (b) special fields in qh entries or (c) split iso entries.  TTs will
  buffer lowfull speed data so the host collects it at high speed.
-------------------------------------------------------------------------
 PID Codes that are used here, from EHCI specification, Table 3-16. 
 fill a qtd, returning how much of the buffer we were able to queue up 
 one buffer entry per 4K ... first might be short or unaligned 
 rest of that page 
 ... iff needed 
 per-qtd limit: from 16K to 20K (best alignment) 
 short packets may only terminate transfers 
-------------------------------------------------------------------------
 writes to an active overlay are unsafe 
	 Except for control endpoints, we make hardware maintain data
	  toggle (like OHCI) ... here (re)initialize the toggle in the QH,
	  and set the pseudo-toggle in udev. Only usb_clear_halt() will
	  ever clear it.
 if it weren't for a common silicon quirk (writing the dummy into the qh
  overlay, so qh->hw_token wrongly becomes inactivehalted), only fault
  recovery (including urb dequeue) would need software changes to a QH...
	
	  first qtd may already be partially processed.
	  If we come here during unlink, the QH overlay region
	  might have reference to the just unlinked qtd. The
	  qtd is updated in qh_completions(). Update the QH
	  overlay here.
-------------------------------------------------------------------------
	 If an async split transaction gets an error or is unlinked,
	  the TT buffer may be left in an indeterminate state.  We
	  have to clear the TT buffer.
	 
	  Note: this routine is never called for Isochronous transfers.
 CONFIG_DYNAMIC_DEBUG 
			 REVISIT ARC-derived cores don't clear the root
			  hub TT buffer in this way...
 count INOUT bytes, not SETUP (even short packets) 
 don't modify error codes 
 force cleanup after short read; not always an error 
 serious "can't proceed" faults reported by the hardware 
 FIXME "must" disable babbling device's port too 
		
		  When MMF is active and PID Code is IN, queue is halted.
		  EHCI Specification, Table 4-13.
 CERR nonzero + halt --> stall 
		 In theory, more than one of the following bits can be set
		  since they are sticky and the transaction is retried.
		  Which to test first is rather arbitrary.
 fsls interrupt xfer missed the complete-split 
 IN ? 
 hc couldn't read data 
 hc couldn't write data 
 timeout, bad CRC, wrong PID, etc 
 unknown 
 ... update hc-wide periodic stats 
 report non-error and short read status as zero 
  Process and free completed qtds for a qh, returning URBs to drivers.
  Chases up to qh->hw_current.  Returns nonzero if the caller should
  unlink qh.
	 completions (or tasks on other cpus) must never clobber HALT
	  till we've gone through and cleaned everything up, even when
	  they add urbs to this qh's queue or mark them for unlinking.
	 
	  NOTE:  unlinking expects to be done in queue order.
	 
	  It's a bug for qh->qh_state to be anything other than
	  QH_STATE_IDLE, unless our caller is scan_async() or
	  scan_intr().
	 remove de-activated QTDs from front of queue.
	  after faults (including short reads), cleanup this urb
	  then let the queue advance.
	  if queue is stopped, handles unlinks.
 clean up any state from previous QTD ...
 ignore urbs submitted during completions we reported 
 hardware copies qtd out of qh overlay 
 always clean up qtds the hc de-activated 
 Report Data Buffer Error: non-fatal but useful 
			 on STALL, error, and short reads this urb must
			  complete and all its qtds must be recycled.
				 retry transaction errors until we
				  reach the software xacterr limit
					 reset the token in the qtd and the
					  qh overlay (which still contains
					  the qtd) so that we pick up from
					  where we left off
			 magic dummy for some short reads; qh won't advance.
			  that silicon quirk can kick in with this dummy too.
			 
			  other short reads won't stop the queue, including
			  control transfers (status stage handles that) or
			  most other single-qtd reads ... the queue stops if
			  URB_SHORT_NOT_OK was set so the driver submitting
			  the urbs could clean it up.
 stop scanning when we reach qtds the hc is using 
 scan the whole queue for unlinks whenever it stops 
 cancel everything if we halt, suspend, etc 
			 this qtd is active; skip it unless a previous qtd
			  for its urb faulted, or its urb was canceled.
			
			  If this was the active qtd when the qh was unlinked
			  and the overlay's token is active, then the overlay
			  hasn't been written back to the qtd yet so use its
			  token instead of the qtd's.  After the qtd is
			  processed and removed, the overlay won't be valid
			  any more.
				 An unlink may leave an incomplete
				  async transaction in the TT buffer.
				  We have to clear it.
		 unless we already know the urb's status, collect qtd status
		  and update count of bytes transferred.  in common short read
		  cases with only one data qtd (including control transfers),
		  queue processing won't halt.  but with two or more qtds (for
		  example, with a 32 KB transfer), when the first qtd gets a
		  short read the second must be removed by hand.
			 As part of lowfull-speed endpoint-halt processing
			  we must clear the TT buffer (11.17.5).
				 The TT's in some hubs malfunction when they
				  receive this request following a STALL (they
				  stop sending isochronous packets).  Since a
				  STALL can't leave the TT buffer in a busy
				  state (if you believe Figures 11-48 - 11-51
				  in the USB 2.0 spec), we won't clear the TT
				  buffer in this case.  Strictly speaking this
				  is a violation of the spec.
		 if we're removing something not at the queue head,
		  patch the hardware queue pointer.
 remove qtd; it's recycled after possible urb completion 
 reinit the xacterr counter for the next qtd 
 last urb's completion might still need calling 
 Do we need to rescan for URBs dequeued during a giveback? 
 If the QH is already unlinked, do the rescan now. 
 Otherwise the caller must unlink the QH. 
 restore original state; caller must unlink or relink 
	 be sure the hardware's done with the qh before refreshing
	  it after fault cleanup, or recovering from silicon wrongly
	  overlaying the dummy qtd (which reduces DMA chatter).
	 
	  We won't refresh a QH that's linked (after the HC
	  stopped the queue).  That avoids a race:
	   - HC reads first part of QH;
	   - CPU updates that first part and the token;
	   - HC reads rest of that QH, including token
	  Result:  HC gets an inconsistent image, and then
	  DMAs tofrom the wrong memory (corrupting it).
	 
	  That should be rare for interrupt transfers,
	  except maybe high bandwidth ...
 Let the caller know if the QH needs to be unlinked. 
-------------------------------------------------------------------------
  reverse of qh_urb_transaction:  free a list of TDs.
  used for cleanup after errors, before HC sees an URB's TDs.
  create a list of filled qtds for this URB; won't link into qh.
	
	  URBs map to sequences of QTDs:  one logical transaction
 for split transactions, SplitXState initialized to zero 
 SETUP pid 
 "setup"  << 8), 8);
 ... and always at least one more pid 
 for zero length DATA stages, STATUS is always IN 
 "in"  << 8);
	
	  data transfer stage:  buffer setup
		 urb->transfer_buffer_length may be smaller than the
		  size of the scatterlist (or vice versa)
 "in"  << 8);
 else it's already initted to "out" pid (0 << 8) 
	
	  buffer gets wrapped in one or more qtds;
	  last one may be "short" (including zero len)
	  and may serve as a control status ack
		
		  short reads advance to a "magic" dummy instead of the next
		  qtd ... that forces the queue to stop, for manual cleanup.
		  (this will usually be overridden later.)
 qh makes control packets use qtd toggle; maybe switch it 
	
	  unless the caller requires manual cleanup after short reads,
	  have the alt_next mechanism keep the queue running after the
	  last data qtd (the only one, for control and most other cases).
	
	  control requests may need a terminating data "status" ack;
	  other OUT ones may need a terminating short packet
	  (zero length).
 "in" <--> "out"  
 force DATA1 
 never any data in such packets 
 by default, enable interrupt on urb completion 
-------------------------------------------------------------------------
 Would be best to create all qh's from config descriptors,
 when each interfacealtsetting is established.  Unlink
 any previous qh and cancel its urbs first; endpoints are
 implicitly reset then (data toggle too).
 That'd mean updating how usbcore talks to HCDs. (2.7?)
  Each QH holds a qtd list; a QH is used for everything except iso.
  For interrupt urbs, the scheduler must set the microframe scheduling
  mask(s) each time the QH gets scheduled.  For highspeed, that's
  just one microframe in the s-mask.  For split interrupt transactions
  there are additional complications: c-mask, maybe FSTNs.
	
	  init endpointdevice data for this QH
	 1024 byte maxpacket is a hardware ceiling.  High bandwidth
	  acts like up to 3KB, but is built from smaller packets.
	 Compute interrupt scheduling parameters just once, and save.
	  - allowing for high bandwidth, how many nsecuframe are used?
	  - split transactions need a second CSPLIT uframe; same question
	  - splits also need a schedule gap (for fulllow speed IO)
	  - qh has a polling interval
	 
	  For controlbulk requests, the HC or TT handles these.
				 NOTE interval 2 or 4 uframes could work.
				  But interval 1 scheduling is simpler, and
				  includes high bandwidth.
 period for bandwidth allocation 
 Allow urb->interval to override 
 gap is f(FSLS transfer times) 
 FIXME this just approximates SPLITCSPLIT times 
 SPLIT, gap, CSPLIT+DATA
 SPLIT+DATA, gap, CSPLIT
 period for bandwidth allocation 
 Allow urb->interval to override 
 support for tt scheduling, and access to toggles 
 using TT? 
 EPS 0 means "full" 
 for TT 
 toggle from qtd 
		 Some Freescale processors have an erratum in which the
		  port number in the queue head was 0..N-1 instead of 1..N.
		 set the address of the TT; for TDI's integrated
		  root hub tt, leave it zeroed.
 NOTE:  if (PIPE_INTERRUPT) { scheduler sets c-mask } 
 no TT involved 
 usb2 fixed maxpacket 
 toggle from qtd 
			 The USB spec says that high speed bulk endpoints
			  always use 512 byte maxpacket.  But some device
			  vendors decided to ignore that, and MSFT is happy
			  to help them do so.  So now people expect to use
			  such nonconformant devices with Linux too; sigh.
 PIPE_INTERRUPT 
 NOTE:  if (PIPE_INTERRUPT) { scheduler sets s-mask } 
 init as live, toggle clear 
-------------------------------------------------------------------------
 Stop waiting to turn off the async schedule 
 Don't start the schedule until ASS is 0 
 The async schedule and unlink lists are supposed to be empty 
 Don't turn off the schedule until ASS is 1 
 move qh (and its qtds) onto async queue; maybe enable queue.  
 Don't link a QH if there's a Clear-TT-Buffer pending 
 clear halt andor toggle; and maybe recover from silicon quirk 
 splice right after start 
 qtd completions reported later by interrupt 
-------------------------------------------------------------------------
  For controlbulkinterrupt, return QH with these TDs appended.
  Allocates and initializes the QH if necessary.
  Returns null if it can't allocate a QH it needs to.
  If the QH has TDs (urbs) already, that's great.
 can't sleep here, we have ehci->lock... 
 control qh may need patching ... 
 usb_reset_device() briefly reverts to address 0 
		 just one way to queue requests: swap with the dummy qtd.
		  only hc or qh_refresh() ever modify the overlay.
			 to avoid racing the HC, use the dummy td instead of
			  the first td of our list (becomes new dummy).  both
			  tds stay deactivated until we're done, when the
			  HC is allowed to fetch the old dummy (4.10.2).
 hc must see the new dummy at list end 
 let the hc process these next qtds 
-------------------------------------------------------------------------
	 Controlbulk operations through TTs don't need scheduling,
	  the HC and TT handle it when the TT has a buffer ready.
-------------------------------------------------------------------------
  This function creates the qtds and submits them for the
  SINGLE_STEP_SET_FEATURE Test.
  This is done in two parts: first SETUP req for GetDesc is sent then
  15 seconds later, the IN stage for GetDesc starts to req data from dev
  is_setup : ip arguement decides which of the two stage needs to be
  performed; TRUE - SETUP and FALSE - IN+STATUS
  Returns 0 if success
 URBs map to sequences of QTDs:  one logical transaction 
	
	  Check if the request is to perform just the SETUP stage (getDesc)
	  as in SINGLE_STEP_SET_FEATURE test, DATA stage (IN) happens
	  15 secs after the setup
 SETUP pid, and interrupt after SETUP completion 
 "setup"  << 8), 8);
Return now; we shall come back after 15 seconds
	
	  IN: data transfer stage:  buffer setup : start the IN txn phase for
	  the get_Desc SETUP which was sent 15seconds back
We need to start IN with DATA-1 Pid-sequence
 "in"  << 8);  
	
	  Our IN phase shall always be a short read; so keep the queue running
	  and let it advance to the next qtd which zero length OUT status
 STATUS stage for GetDesc control request 
 "in" <--> "out"  
 force DATA1 
 Interrupt after STATUS completion 
 CONFIG_USB_HCD_TEST_MODE 
-------------------------------------------------------------------------
 Add to the end of the list of QHs waiting for the next IAAD 
 Unlink it from the schedule 
 If the controller isn't running, we don't have to wait for it 
 Otherwise start a new IAA cycle if one isn't already running 
 Make sure the unlinks are all visible to the hardware 
 The current IAA cycle has ended 
 See if the async qh for the qtds being unlinked are now gone from the HC 
 QH whose IAA cycle just ended 
	
	  If async_unlinking is set then this routine is already running,
	  either on the stack or on another CPU.
 If the controller isn't running, process all the waiting QHs 
	
	  Intel (?) bug: The HC can write back the overlay region even
	  after the IAA interrupt occurs.  In self-defense, always go
	  through two IAA cycles for each QH.
		
		  Second IAA cycle has finished.  Process only the first
		  waiting QH (NVIDIA (?) bug).
	
	  AMDATI (?) bug: The HC can continue to use an active QH long
	  after the IAA interrupt occurs.  To prevent problems, QHs that
	  may still be active will wait until 2 ms have passed with no
	  change to the hw_current and hw_token fields (this delay occurs
	  between the two IAA cycles).
	 
	  The EHCI spec (4.8.2) says that active QHs must not be removed
	  from the async schedule and recommends waiting until the QH
	  goes inactive.  This is ridiculous because the QH will _never_
	  become inactive if the endpoint NAKs indefinitely.
 Some reasons for unlinking guarantee the QH can't be active 
 The QH can't be active if the queue was and still is empty... 
 ... or if the QH has halted 
 Otherwise we have to wait until the QH stops changing 
 Prepare for next QH 
 Start a new IAA cycle if any QHs are waiting for it 
	
	  Don't allow nesting or concurrent calls,
	  or wait for the second IAA cycle for the next QH.
 Process the idle QHs 
 Find the last async QH which has been empty for a timer cycle 
 If nothing else is being unlinked, unlink the last empty QH 
 Other QHs will be handled later 
 The root hub is suspended; unlink all the async QHs 
 makes sure the async qh will become idle 
 caller must own ehci->lock 
 If the QH isn't linked then there's nothing we can do. 
-------------------------------------------------------------------------
 clean any finished work for this qh 
			
			  Unlinks could happen here; completion reporting
			  drops the lock.  That's why ehci->qh_scan_next
			  always holds the next qh to scan; if the next qh
			  gets unlinked then ehci->qh_scan_next is adjusted
			  in single_unlink_async().
	
	  Unlink empty entries, reducing DMA usage as well
	  as HCD schedule-scanning costs.  Delay for any qh
	  we just scanned, there's a not-unusual case that it
	  doesn't stay idle for long.
 SPDX-License-Identifier: GPL-2.0
  xHCI host controller driver for HiSilicon STB SoCs
  Copyright (C) 2017-2018 HiSilicon Co., Ltd. http:www.hisilicon.com
  Authors: Jianguo Sun <sunjianguo1@huawei.com>
 USB2 PHY chose ulpi 8bit interface 
		
		  write 0x010c0012 to GUSB3PIPECTL0
		  GUSB3PIPECTL0[5:3] = 010 : Tx Margin = 900mV ,
		  decrease TX voltage
		  GUSB3PIPECTL0[2:1] = 01 : Tx Deemphasis = -3.5dB,
		  refer to xHCI spec
	
	  As of now platform drivers don't provide MSI support so we ensure
	  here that the generic code does not try to make a pci_dev from our
	  dev struct in order to setup MSI
 called during probe() after chip reset completes 
 Initialize dma_mask and coherent_dma_mask to 32-bits 
 imod_interval is the interrupt moderation value in nanoseconds. 
	
	  Prevent runtime pm from being on as default, users should enable
	  runtime pm using powercontrol in sysfs.
 SPDX-License-Identifier: GPL-2.0
 OHCI HCD (Host Controller Driver) for USB.
 Copyright (C) 2010 ST Microelectronics.
 Deepak Sikri<deepak.sikri@st.com>
 Based on various ohci-.c drivers
	
	  Right now device-tree probed devices don't get dma_mask set.
	  Since shared usb code relies on it, set it here for now.
	  Once we have dma capability bindings this can go away.
 Driver definition to register with the platform bus 
 SPDX-License-Identifier: GPL-2.0
  Universal Host Controller Interface driver for USB.
  Maintainer: Alan Stern <stern@rowland.harvard.edu>
  (C) Copyright 1999 Linus Torvalds
  (C) Copyright 1999-2002 Johannes Erdfelt, johannes@erdfelt.com
  (C) Copyright 1999 Randy Dunlap
  (C) Copyright 1999 Georg Acher, acher@in.tum.de
  (C) Copyright 1999 Deti Fliegl, deti@fliegl.de
  (C) Copyright 1999 Thomas Sailer, sailer@ife.ee.ethz.ch
  (C) Copyright 1999 Roman Weissgaerber, weissg@vienna.at
  (C) Copyright 2000 Yggdrasil Computing, Inc. (port of new PCI interface
                support from usb-ohci.c by Adam Richter, adam@yggdrasil.com).
  (C) Copyright 1999 Gregory P. Smith (from usb-ohci.c)
  (C) Copyright 2004-2007 Alan Stern, stern@rowland.harvard.edu
  Technically, updating td->status here is a race, but it's not really a
  problem. The worst that can happen is that we set the IOC bit again
  generating a spurious interrupt. We could fix this by creating another
  QH and leaving the IOC bit always set, but then we would have to play
  games with the FSBR code to make sure we get the correct order in all
  the cases. I don't think it's worth the effort
  Full-Speed Bandwidth Reclamation (FSBR).
  We turn on FSBR whenever a queue that wants it is advancing,
  and leave it on for a short time thereafter.
	 The terminating skeleton QH always points back to the first
	  FSBR QH.  Make the last async QH point to the terminating
	 Remove the link from the last async QH to the terminating
  We insert Isochronous URBs directly into the frame list at the beginning
 Is there a TD already mapped there? 
 If it's not inserted, don't remove it 
  Remove all the TDs for an Isochronous URB from the frame list
 Normal QH 
 Skeleton QH 
  When a queue is stopped and a dequeued URB is given back, adjust
  the previous TD link (if the URB isn't first on the queue) or
  save its toggle value (if it is first and is currently executing).
  Returns 0 if the URB should not yet be given back, 1 otherwise.
	 Isochronous pipes don't use toggles and their TD link pointers
	  get adjusted during uhci_urb_dequeue().  But since their queues
	  cannot truly be stopped, we have to watch out for dequeues
	 If the URB isn't first on its queue, adjust the link pointer
	  of the last TD in the previous URB.  The toggle doesn't need
	 If the QH element pointer is UHCI_PTR_TERM then then currently
 Control pipes don't have to worry about toggles 
 Save the next toggle value 
  Fix up the data toggles for URBs in a queue, when one of them
  terminates early (short transfer, error, or dequeued).
	 Fixups for a short transfer start with the second URB in the
	 When starting with the first URB, if the QH element pointer is
	 Fix up the toggle for the URBs in the queue.  Normally this
	  loop won't run more than once: When an error or short transfer
		 If the first TD has the right toggle value, we don't
 Otherwise all the toggles in the URB have to be switched 
  Link an Isochronous QH into its skeleton's list
 Isochronous QHs aren't linked by the hardware 
  Link a high-period interrupt QH into the schedule at the end of its
  skeleton's list
  Link a period-1 interrupt or async QH into the schedule at the
  correct spot in the async skeleton's list, and update the FSBR link
	 Find the predecessor QH for our new one and insert it in the list.
	  The list of QHs is expected to be short, so linear search won't
 Link it into the schedule 
	 If this is now the first FSBR QH, link the terminating skeleton
  Put a QH on the schedule in both hardware and software
	 Set the element pointer if it isn't set already.
 Treat the queue as if it has just advanced 
	 Move the QH from its old list to the correct spot in the appropriate
  Unlink a high-period interrupt QH from the schedule
  Unlink a period-1 interrupt or async QH from the schedule
	 If this was the old first FSBR QH, link the terminating skeleton
  Take a QH off the hardware schedule
 Unlink the QH from the schedule and record when we did it 
 Force an interrupt so we know when the QH is fully unlinked 
 Move the QH from its old list to the end of the unlinking list 
  When we and the controller are through with a QH, it becomes IDLE.
  This happens when a QH has been off the schedule (on the unlinking
  list) for more than one frame, or when an error occurs while adding
  the first URB onto a new QH.
 Now that the QH is idle, its post_td isn't being used 
 If anyone is waiting for a QH to become idle, wake them up 
  Find the highest existing bandwidth load for a given phase and period.
  Set qh->phase to the optimal phase for a periodic transfer and
  check whether the bandwidth requirement is acceptable.
	 Find the optimal phase (unless it is already set) and get
 Maximum allowable periodic bandwidth is 90%, or 900 us per frame 
  Reserve a periodic QH's bandwidth in the schedule
  Release a periodic QH's bandwidth reservation
  Map status to standard result codes
  <status> is (td_status(uhci, td) & 0xF60000), a.k.a.
  uhci_status_bits(td_status(uhci, td)).
  Note: <status> does not include the TD_CTRL_NAK bit.
  <dir_out> is True for output TDs and False for input TDs.
 Bitstuff error 
 CRCTimeout 
 Babble 
 Buffer error 
 Stalled 
  Control transfers
 The "pipe" thing contains the destination in bits 8--18 
 3 errors, dummy TD remains inactive 
	
	  Build the TD for the control request setup packet
	
	  If direction is "send", change the packet ID from SETUP (0x2D)
	  to OUT (0xE1).  Else change it from SETUP to IN (0x69) and
	  set Short Packet Detect (SPD) for all data packets.
	 
	  0-length transfers always get treated as "send".
	
	  Build the DATA TDs
 The last data packet 
 Alternate Data01 (start with Data1) 
	
	  Build the final TD for control status
 Change direction for the status transaction 
 End in Data1 
	
	  Build the new dummy TD and activate the old one
	 Low-speed transfers get a different queue, and won't hog the bus.
	  Also, some devices enumerate better without FSBR; the easiest way
	  to do that is to put URBs on the low-speed queue while the device
 Remove the dummy TD from the td_list so it doesn't get freed 
  Common submit for bulk and interrupt
 The "pipe" thing contains the destination in bits 8--18 
 3 errors, dummy TD remains inactive 
		 urb->transfer_buffer_length may be smaller than the
		  size of the scatterlist (or vice versa)
	
	  Build the DATA TDs
 Allow zero length packets 
 The last packet 
	
	  URB_ZERO_PACKET means adding a 0-length packet, if direction
	  is OUT and the transfer_length was an exact multiple of maxsze,
	  hence (len = transfer_length - N  maxsze) == 0
	  however, if transfer_length == 0, the zero packet was already
	  prepared above.
	 Set the interrupt-on-completion flag on the last packet.
	  A more-or-less typical 4 KB URB (= size of one memory page)
	  will require about 3 ms to transfer; that's a little on the
	  fast side but not enough to justify delaying an interrupt
	  more than 2 or 3 URBs, so we will ignore the URB_NO_INTERRUPT
	
	  Build the new dummy TD and activate the old one
 Remove the dummy TD from the td_list so it doesn't get freed 
 Can't have low-speed bulk transfers 
	 USB 1.1 interrupt transfers only involve one packet per interval.
	  Drivers can submit URBs of any length, but longer ones will need
	  multiple intervals to complete.
 Figure out which power-of-two queue to use 
 If the slot is full, try a lower period 
			 For now, interrupt phase is fixed by the layout
			  of the QH lists.
 Can't decrease the period 
  Fix up the data structures following a short transfer
		 When a control transfer is short, we have to restart
		  the queue at the status stage transaction, which is
		 When a bulkinterrupt transfer is short, we have to
		  fix up the toggles of the following URBs on the queue
 Remove all the TDs we skipped over, from tmp back to the start 
  Common result for control, bulk, and interrupt
 Some debugging code 
 Print the chain for debugging 
 Did we receive a short packet? 
			 For control transfers, go to the status TD if
 For bulk and interrupt, this may be an error 
 Fixup needed only if this isn't the URB's last TD 
		 Note that the queue has stopped and save
 Short packet received 
  Isochronous transfers
 Since urb->number_of_packets > 0 
 Values must not be too big (could overflow below) 
 Check the period and figure out the starting frame number 
 Find the best phase 
 Allow a little time to allocate the TDs 
 Round up to the first available slot 
 Can't change the period 
 Find the next unused frame 
 Fell behind? 
 USB_ISO_ASAP: Round up to the first available slot 
			
			  Not ASAP: Use the next slot in the stream,
			  no matter what.
 Make sure we won't have to go too far into the future 
 Set the interrupt-on-completion flag on the last packet. 
 Add the TDs to the frame list 
 TD was added too late? 
 Add this URB to the QH 
	 If the new URB is the first and only one on this QH then either
	  the QH is new and idle or else it's unlinked and waiting to
	  become idle, so we can activate it right away.  But only if the
 Reclaim unused QH 
 Remove Isochronous TDs from the frame list ASAP 
 If the URB has already started, update the QH unlink time 
  Finish unlinking an URB and give it back
		 Subtract off the length of the SETUP packet from
		  urb->actual_length.
	 When giving back the first URB in an Isochronous queue,
	 Take the URB off the QH's queue.  If the queue is now empty,
	 If the queue is now empty, we can unlink the QH and give up its
  Scan the URBs in a QH's queue
		 Dequeued but completed URBs can't be given back unless
	 If the QH is neither stopped nor finished unlinking (normal case),
 Otherwise give back each of the dequeued URBs 
			 Fix up the TD links and save the toggles for
			  non-Isochronous queues.  For Isochronous queues,
	 There are no more dequeued URBs.  If there are still URBs on the
		 If the first URB on the queue wants FSBR but its time
		  limit has expired, set the next TD to interrupt on
	 The queue is empty.  The QH can become idle if it is fully
  Check for queues that have made some forward progress.
  Returns 0 if the queue is not Isochronous, is ACTIVE, and
  has not advanced since last examined; 1 otherwise.
  Early Intel controllers have a bug which causes qh->element sometimes
  not to advance when a TD completes successfully.  The queue remains
  stuck on the inactive completed TD.  We detect such cases and advance
  the element pointer by hand.
	 Treat an UNLINKING queue as though it hasn't advanced.
	  This is okay because reactivation will treat it as though
	  it has advanced, and if it is going to become IDLE then
	  this doesn't matter anyway.  Furthermore it's possible
	  for an UNLINKING queue not to have any URBs at all, or
	  for its first URB not to have any TDs (if it was dequeued
	  just as it completed).  So it's not easy in any case to
 We're okay, the queue has advanced 
 The queue hasn't advanced; check for timeout 
 Detect the Intel bug and work around it 
		 If the current URB wants FSBR, unlink it temporarily
		  so that we can safely set the next TD to interrupt on
		  completion.  That way we'll know as soon as the queue
 Unmoving but not-yet-expired queues keep FSBR alive 
  Process events in the schedule, but only in one thread at a time
 Don't allow re-entrant calls 
 Go through all the QH queues and process the URBs in each one 
 SPDX-License-Identifier: GPL-1.0+
  EHCI HCD (Host Controller Driver) for USB.
  Bus Glue for PPC On-Chip EHCI driver on the of_platform bus
  Tested on AMCC PPC 440EPx
  Valentine Barshak <vbarshak@ru.mvista.com>
  Based on "ehci-ppc-soc.c" by Stefan Roese <sr@denx.de>
  and "ohci-ppc-of.c" by Sylvain Munaut <tnt@246tNt.com>
  This file is licenced under the GPL.
	
	  generic hardware linkage
	
	  basic lifecycle operations
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
  440EPx Errata USBH_3
  Fix: Enable Break Memory Transfer (BMT) in INSNREG3
 claim we really affected by usb23 erratum 
	 use request_mem_region to test if the ohci driver is loaded.  if so
	  ensure the ohci core is operational.
 SPDX-License-Identifier: GPL-2.0+
  EHCI HCD (Host Controller Driver) for USB.
  Bus Glue for Xilinx EHCI core on the of_platform bus
  Copyright (c) 2009 Xilinx, Inc.
  Based on "ehci-ppc-of.c" by Valentine Barshak <vbarshak@ru.mvista.com>
  and "ehci-ppc-soc.c" by Stefan Roese <sr@denx.de>
  and "ohci-ppc-of.c" by Sylvain Munaut <tnt@246tNt.com>
  ehci_xilinx_port_handed_over - hand the port out if failed to enable it
  @hcd:	Pointer to the usb_hcd device to which the host controller bound
  @portnum:Port number to which the device is attached.
  This function is used as a place to tell the user that the Xilinx USB host
  controller does support LS devices. And in an HS only configuration, it
  does not support FS devices either. It is hoped that this can help a
  confused user.
  There are cases when the host controller fails to enable the port due to,
  for example, insufficient power that can be supplied to the device from
  the USB bus. In those cases, the messages printed here are not helpful.
	
	  generic hardware linkage
	
	  basic lifecycle operations
	
	  managing io requests and associated device resources
	
	  scheduling support
	
	  root hub support
  ehci_hcd_xilinx_of_probe - Probe method for the USB host controller
  @op:		pointer to the platform_device bound to the host controller
  This function requests resources and sets up appropriate properties for the
  host controller. Because the Xilinx USB host controller can be configured
  as HS only or HSFS only, it checks the configuration in the device tree
  entry, and sets an appropriate value for hcd->has_tt.
	 This core always has big-endian register interface and uses
	  big-endian memory descriptors.
	 Check whether the FS support option is selected in the hardware.
	 Debug registers are at the first 0x100 region
  ehci_hcd_xilinx_of_remove - shutdown hcd and release resources
  @op:		pointer to platform_device structure that is to be removed
  Remove the hcd structure, and release resources that has been requested
  during probe.
 SPDX-License-Identifier: GPL-2.0+
  Freescale QUICC Engine USB Host Controller Driver
  Copyright (c) Freescale Semicondutor, Inc. 2006.
                Shlomi Gridish <gridish@freescale.com>
                Jerry Huang <Chang-Ming.Huang@freescale.com>
  Copyright (c) Logic Product Development, Inc. 2007
                Peter Barada <peterb@logicpd.com>
  Copyright (c) MontaVista Software, Inc. 2008.
                Anton Vorontsov <avorontsov@ru.mvista.com>
 clear frame_n 
 initialize the endpoint zero 
 inilialize endpoint registers 
 enable the USB interrupts 
 initialize the USB interrupt 
 initialize the event register and mask register 
 enable the timer interrupts 
 disable the usb interrupt 
 disable the timer interrupt 
 disable the usb interrupt 
 enable the USB controller 
 disable the USB controller 
 disable the usb controller 
 check the bus state by polling the QE bit on the IO ports 
 check USBOE,if transmitting,exit 
 check USBRP 
 check USBRN 
 initialize work queue to handle done list 
 destroy the fhci_usb structure 
 initialize the USB 
 initializing registers on chip, clear frame number 
 clear rx state 
 set mask register 
 clearing the mask register 
 initialing the event register 
 initialize the fhci_usb struct and the corresponding data staruct 
 allocate memory for SCC data structure 
 connect the virtual root hub 
 this field may be needed to fix 
	
	  From here on, hub_wq concurrently accesses the root
	  hub; drivers will be talking to enumerated devices.
	  (On restart paths, hub_wq already knows about the root
	  hub and could find work as soon as we wrote FLAG_CF.)
	 
	  Before this point the HC was idleready.  After, hub_wq
	  and device drivers may start it running.
 1 td fro setup,1 for ack 
 one td for every 4096 bytes(can be up to 8k) 
 ...add for any remaining bytes... 
 ..and maybe a zero length packet to wrap it up 
 allocate the private part of the URB 
 allocate the private part of the URB 
 fill the private part of the URB 
 dequeue FHCI URB 
		
		  flag the urb's data for deletion in some upcoming
		  SF interrupt's delete list processing
 already pending? 
 generic hardware linkage 
 basic lifecycle operation 
 managing io requests and associated device resources 
 scheduling support 
 root hub support 
 FHCI registers. 
 Parameter RAM. 
 GPIOs and pins 
 Frame limit timer and its interrupt. 
 USB Host interrupt. 
 Clocks. 
 Start with full-speed, if possible. 
 Clear and disable any pending interrupts. 
 SPDX-License-Identifier: GPL-2.0
  xHCI host controller driver
  Copyright (C) 2008 Intel Corp.
  Author: Sarah Sharp
  Some code borrowed from the Linux EHCI driver.
 Default sublink speed attribute of each lane 
 USB 3.0 SS Gen1x1 id:4 symmetric rx 5Gbps 
 USB 3.0 SS Gen1x1 id:4 symmetric tx 5Gbps 
 USB 3.1 SSP Gen2x1 id:5 symmetric rx 10Gbps 
 USB 3.1 SSP Gen2x1 id:5 symmetric tx 10Gbps 
 USB 3.2 SSP Gen1x2 id:6 symmetric rx 5Gbps 
 USB 3.2 SSP Gen1x2 id:6 symmetric tx 5Gbps 
 USB 3.2 SSP Gen2x2 id:7 symmetric rx 10Gbps 
 USB 3.2 SSP Gen2x2 id:7 symmetric tx 10Gbps 
 BOS descriptor 
 Create the descriptor for port with the highest revision 
 SuperSpeed USB Device Capability 
 set later 
 set later 
 set later 
 Shift to Gbps and set SSP Link Protocol if 10Gpbs 
 Some host controllers don't set the link protocol for SSP 
		
		  PSIM and PSIE represent the total speed of PSI. The BOS
		  descriptor SSP sublink speed attribute lane mantissa
		  describes the lane speed. E.g. PSIM and PSIE for gen2x2
		  is 20Gbps, but the BOS descriptor lane speed mantissa is
		  10Gbps. Check and modify the mantissa value to match the
		  lane speed.
			
			  The PSI dword for gen1x2 and gen2x1 share the same
			  values. But the lane speed for gen1x2 is 5Gbps while
			  gen2x1 is 10Gbps. If the previous PSI dword SSID is
			  5 and the PSIE and PSIM match with SSID 6, let's
			  assume that the controller follows the default speed
			  id with SSID 6 for gen1x2.
 Bits 1:0 - support per-port power switching, or power always on 
 Bit  2 - root hubs are not part of a compound device 
 Bits 4:3 - individual port over current protection 
 Bits 6:5 - no TTs in root ports 
 Bit  7 - no port indicators 
 Fill in the USB 2.0 roothub descriptor 
 xhci section 5.4.8 says 20ms 
	 The Device Removable bits are reported on a byte granularity.
	  If the port doesn't exist within that byte, the bit is set to 0.
		 If a device is removable, PORTSC reports a 0, same as in the
		  hub descriptor DeviceRemovable bits.
			 This math is hairy because bit 0 of DeviceRemovable
			  is reserved, and bit 1 is for port 1, etc.
	 ch11.h defines a hub descriptor that has room for USB_MAXCHILDREN
	  ports on it.  The USB 2.0 specification says that there are two
	  variable length fields at the end of the hub descriptor:
	  DeviceRemovable and PortPwrCtrlMask.  But since we can have less than
	  USB_MAXCHILDREN ports, we may need to use the DeviceRemovable array
	  to set PortPwrCtrlMask bits.  PortPwrCtrlMask must always be set to
	  0xFF, so we initialize the both arrays (DeviceRemovable and
	  PortPwrCtrlMask) to 0xFF.  Then we set the DeviceRemovable for each
	  set of ports that actually exist.
 Fill in the USB 3.0 roothub descriptor 
 usb 3.1 may fail if less than 100ms 
	 header decode latency should be zero for roothubs,
	  see section 4.23.5.2.
 bit 0 is reserved, bit 1 is for port 1, etc. 
	
	  FIXME: Yes, we should check for full speed, but the core uses that as
	  a default in portspeed() in usbcorehub.c (which is the only place
	  USB_PORT_STAT__SPEED is used).
  These bits are Read Only (RO) and should be saved and written to the
  registers: 0, 3, 10:13, 30
  connect status, over-current status, port speed, and device removable.
  connect status and port speed are also sticky - meaning they're in
  the AUX well and they aren't changed by a hot, warm, or cold reset.
  These bits are RW; writing a 0 clears the bit, writing a 1 sets the bit:
  bits 5:8, 9, 14:15, 25:27
  link state, port power, port indicator state, "wake on" enable state
  These bits are RW; writing a 1 sets the bit, writing a 0 has no effect:
  bit 4 (port reset)
  These bits are RW; writing a 1 clears the bit, writing a 0 has no effect:
  bits 1, 17, 18, 19, 20, 21, 22, 23
  port enabledisable, and
  change bits: connect, PED, warm port reset changed (reserved zero for USB 2.0 ports),
  over-current, reset, link state, and L1 change
  Bit 16 is RW, and writing a '1' to it causes the link state control to be
  latched in
  These bits are Reserved Zero (RsvdZ) and zero should be written to them:
  bits 2, 24, 28:31
  Given a port state, this function returns a value that would result in the
  port being in the same state, if the value was written to the port status
  control register.
  Save Read Only (RO) bits and save readwrite bits where
  writing a 0 clears the bit and writing a 1 sets the bit (RWS).
  For all other types (RW1S, RW1CS, RW, and RZ), writing a '0' has no effect.
 Save read-only status and port state 
  find slot id based on port number.
  @port: The one-based port number from one of the two split roothubs.
  Stop device
  It issues stop endpoint command for EP 0 to 30. And wait the last command
  to complete.
  suspend will set to 1, if suspend bit need to set in command.
 Check ep is running, required by AMD SNPS 3.1 xHC 
 Wait for last stop endpoint command to finish 
  Ring device, it rings the all doorbells unconditionally.
 Don't allow the USB core to disable SuperSpeed ports. 
 Write 1 to disable the port 
 Should never happen 
 Change bits are all write 1 to clear 
  xhci_set_port_power() must be called with xhci->lock held.
  It will release and re-aquire the lock while calling ACPI
  method.
 Power on 
 Power off 
 xhci only supports test mode for usb2 ports 
 Disable all Device Slots 
 Put all ports to the Disable state by clear PP 
 Power off USB3 ports
 Power off USB2 ports
 Stop the controller 
 Disable runtime PM for test mode 
 Set PORTPMSC.PTC field to enter selected test mode 
 Port is selected by wIndex. port_id = wIndex + 1 
 Test and clear port RWC bit 
 Updates Link Status for super Speed port 
	 When the CAS bit is set then warm reset
	  should be performed on port
		 The CAS bit can be set while the port is
		  in any link state.
		  Only roothubs have CAS bit, so we
		  pretend to be in compliance mode
		  unless we're already in compliance
		  or the inactive state.
		 Return also connection bit -
		  hub state machine resets port
		  when this bit is set.
		
		  Resume state is an xHCI internal state.  Do not report it to
		  usb core, instead, pretend to be U3, thus usb core knows
		  it's not ready for transfer.
		
		  If CAS bit isn't set but the Port is already at
		  Compliance Mode, fake a connection so the USB core
		  notices the Compliance state and resets the port.
		  This resolves an issue generated by the SN65LVPE502CP
		  in which sometimes the port enters compliance mode
		  caused by a delay on the host-device negotiation.
 update status field 
  Function for Compliance Mode Quirk.
  This Function verifies if all xhc USB3 ports have entered U0, if so,
  the compliance mode timer is deleted. A port won't enter
  compliance mode if it has previously entered U0.
 did port event handler already start resume timing? 
 If not, maybe we are in a host initated resume? 
			 Host initated resume doesn't time the resume
			  signalling using resume_done[].
			  It manually sets RESUME state, sleeps 20ms
			  and sets U0 state. This should probably be
			  changed, but not right now.
			 port resume was discovered now and here,
			  start resume timing
 Has resume been signalled for USB_RESUME_TIME yet? 
		
		  The resume has been signaling for less than
		  USB_RESUME_TIME. Report the port status as SUSPEND,
		  let the usbcore check port status again and clear
		  resume signaling later.
 only support rx and tx lane counts of 1 in usb3.1 spec 
 bits 3:0, RX speed id 
 bits 7:4, TX speed id 
 bits 11:8 Rx lane count 
 bits 15:12 Tx lane count 
	 USB3 specific wPortChange bits
	 
	  Port link change with port in resume state should not be
	  reported to usbcore, as this is an internal state to be
	  handled by xhci driver. Reporting PLC to usbcore may
	  cause usbcore clearing PLC first and port change event
	  irq won't be generated.
 USB3 specific wPortStatus bits 
 link state handling 
 remote wake resume signaling complete 
 USB2 wPortStatus bits 
 link state is only valid if port is powered 
  Converts a raw xHCI port status into the format that external USB 2.0 or USB
  3.0 hubs use.
  Possible side effects:
   - Mark a port as being done with device resume,
     and ring the endpoint doorbells.
   - Stop the Synopsys redriver Compliance Mode polling.
   - Drop and reacquire the xHCI lock, in order to wait for port resume.
 common wPortChange bits 
 common wPortStatus bits 
 USB2 and USB3 specific bits, including Port Link State 
	
	  Clear stale usb2 resume signalling variables in case port changed
	  state during resume signalling. For example on error
 No power source, over-current reported per port 
		 Check to make sure userspace is asking for the USB 3.0 hub
		  descriptor for the USB 3.0 roothub.  If not, we stall the
		  endpoint, like external hubs do.
 if USB 3.1 extended port status return additional 4 bytes 
 The MSB of wIndex is the U1U2 timeout 
 FIXME: What new port features do we need to support? 
 Resume the port to U0 first 
			 In spec software should not attempt to suspend
			  a port unless the port reports that it is in the
			  enabled (PED = â1â,PLS < â3â) state.
 unlock to execute stop endpoint commands 
 wait device to enter 
 Disable port 
				
				  Clear all change bits, so that we get a new
				  connection event.
 Put link in RxDetect (enable port) 
			
			  For xHCI 1.1 according to section 4.19.1.2.4.1 a
			  root hub port's transition to compliance mode upon
			  detecting LFPS timeout may be controlled by an
			  Compliance Transition Enabled (CTE) flag (not
			  software visible). This flag is set by writing 0xA
			  to PORTSC PLS field which will allow transition to
			  compliance mode the next time LFPS timeout is
			  encountered. A warm reset will clear it.
			 
			  The CTE flag is only supported if the HCCPARAMS2 CTC
			  flag is set, otherwise, the compliance substate is
			  automatically entered as on 1.0 and prior.
 Port must be enabled 
 Can't set port link state above '3' (U3) 
			
			  set link to U0, steps depend on current link state.
			  U3: set link to U0 and wait for u3exit completion.
			  U1U2:  no PLC complete event, only set link to U0.
			  ResumeRecovery: device initiated U0, only wait for
			  completion
 already in U0 
 U1, U2, U3 
					 unlock to execute stop endpoint
			
			  Turn on ports, even if there isn't per-port switching.
			  HC will report connect events even before this is set.
			  However, hub_wq will ignore the roothub events until
			  the roothub is registered.
 4.19.6 Port Test Modes (USB2 Test Mode) 
 unblock any posted writes 
 FIXME: What new port features do we need to support? 
 "stall" on error 
  Returns 0 if the status hasn't changed, or the number of bytes in buf.
  Ports are 0-indexed from the HCD point of view,
  and 1-indexed from the USB core pointer of view.
  Note that the status change bits will be cleared as soon as a port status
  change event is generated, so we use the saved status from that event.
 Initial status is no changes 
	
	  Inform the usbcore about resume-in-progress by returning
	  a non-zero value even if there are no status changes.
 For each port, did anything change?  If so, set that bit in buf. 
 USB2 
 USB3 
	
	  Prepare ports for suspend, but don't write anything before all ports
	  are checked and we know bus suspend can proceed
		
		  Give a USB3 port in link training time to finish, but don't
		  prevent suspend as port might be stuck
 bail out if port detected a over-current condition 
 suspend ports in U0, or bail out for new connect changes 
		 USB core sets remote wake mask for USB 3.0 hubs,
		  including the USB 3.0 roothub, but only if CONFIG_PM
		  is enabled, so also enable remote wake here.
 write port settings, stopping and suspending ports if needed 
  Workaround for missing Cold Attach Status (CAS) if device re-plugged in S3.
  warm reset a USB3 device stuck in polling or compliance mode after resume.
  See Intel 100c230 series PCH specification update Doc #332692-006 Errata #8
 if any of these are set we are not stuck 
 clear wakeupchange bits, and do a warm port reset 
 flush write 
 delay the irqs 
 bus specific resume for ports we suspended at bus_suspend 
 warm reset CAS limited ports stuck in pollingcompliance 
 resume if we suspended the link, and it is still suspended 
 resume already initiated 
 not in a resumeable state, ignore it 
 disable wake for all ports, write new link state if needed 
 USB2 specific resume signaling delay and U0 link state transition 
 Clear PLC to poll it later for U0 transition 
 poll for U0 link state complete, both USB2 and USB3 
 re-enable irqs 
 USB3 port wakeups are reported via usb_wakeup_notification() 
 USB2 ports only 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
  Universal Host Controller Interface driver for USB.
  Maintainer: Alan Stern <stern@rowland.harvard.edu>
  (C) Copyright 1999 Linus Torvalds
  (C) Copyright 1999-2002 Johannes Erdfelt, johannes@erdfelt.com
  (C) Copyright 1999 Randy Dunlap
  (C) Copyright 1999 Georg Acher, acher@in.tum.de
  (C) Copyright 1999 Deti Fliegl, deti@fliegl.de
  (C) Copyright 1999 Thomas Sailer, sailer@ife.ee.ethz.ch
  (C) Copyright 2004 Alan Stern, stern@rowland.harvard.edu
  __u8  bLength; 
  __u8  bDescriptorType; Hub-descriptor 
  __u8  bNbrPorts; 
 __u16  wHubCharacteristics; 
 (per-port OC, no power switching) 
  __u8  bPwrOn2pwrGood; 2ms 
  __u8  bHubContrCurrent; 0 mA 
  __u8  DeviceRemovable;  7 Ports max 
  __u8  PortPwrCtrlMask;  7 ports max 
 must write as zeroes 
 status change bits:  nonzero writes will clear 
 suspendresume bits: port suspended or port resuming 
 A port that either is connected or has a changed-bit set will prevent
  us from AUTO_STOPPING.
	 Some boards (both VIA and Intel apparently) report bogus
	  overcurrent indications, causing massive log spam unless
	  we completely ignore them.  This doesn't seem to be a problem
	  with the chipset so much as with the way it is connected on
	  the motherboard; if the overcurrent input is left to float
 UHCI controllers don't automatically stop resume signalling after 20 msec,
  so we have to poll and check timeouts in order to take care of it.
		 The controller won't actually turn off the RD bit until
		  it has had a chance to send a low-speed EOP sequence,
		  which is supposed to take 3 bit times (= 2 microseconds).
		  Experiments show that some controllers take longer, so
 Wait for the UHCI controller in HP's iLO2 server management chip.
  It can take up to 250 us to finish a reset and set the CSC bit.
 Log a warning? 
				 HP's server management chip requires
				 If the port was enabled before, turning
				  reset on caused a port enable change.
				  Turning reset off causes a port connect
 Port received a wakeup request 
				 Make sure we see the port again
 if port change, ask to be resumed 
 if port change, auto start 
 are any devices attached? 
 auto-stop if nothing connected for 1 second 
 size of returned buffer is part of USB spec 
 hub power 
		 Intel controllers report the OverCurrent bit active on.
		  VIA controllers report it active off, so we'll adjust the
		  bit value.  (It's not standardized in the UHCI spec.)
 UHCI doesn't support C_RESET (always false) 
 UHCI has no power switching (always on) 
 We don't implement these 
 Reset terminates Resume signalling 
 USB v2.0 7.1.7.5 
 UHCI has no power switching 
 Disable terminates Resume signalling 
 Make certain the port isn't suspended 
				 The controller won't allow RD to be set
				  if the port is disabled.  When this happens
				  just skip the Resume signalling.
 USB v2.0 7.1.7.7 
 UHCI has no power switching 
 this driver won't report these 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2007 by Alan Stern
 this file is part of ehci-hcd.c 
 Display the ports dedicated to the companion controller 
  Dedicate or undedicate a port to the companion controller.
  Syntax is "[-]portnum", where a leading '-' sign means
  return control of the port to the EHCI controller.
 Owned by companion 
 Owned by EHCI 
  Display  Set uframe_periodic_max
	
	  lock, so that our checking does not race with possible periodic
	  bandwidth allocation through submitting new urbs.
	
	  for request to decrease max periodic bandwidth, we have to check
	  to see whether the decrease is possible.
 increasing is always ok 
 with integrated TT there is no companion! 
 with integrated TT there is no companion! 
 SPDX-License-Identifier: GPL-1.0+
  OHCI HCD (Host Controller Driver) for USB.
  (C) Copyright 1999 Roman Weissgaerber <weissg@vienna.at>
  (C) Copyright 2000-2002 David Brownell <dbrownell@users.sourceforge.net>
  (C) Copyright 2002 Hewlett-Packard Company
  Bus Glue for pxa27x
  Written by Christopher Hoover <ch@hpl.hp.com>
  Based on fragments of previous driver by Russell King et al.
  Modified for LH7A404 from ohci-sa1111.c
   by Durgesh Pattamatta <pattamattad@sharpsec.com>
  Modified for pxa27x from ohci-lh7a404.c
   by Nick Bane <nick@cecomputing.co.uk> 26-8-2004
  This file is licenced under the GPL.
  UHC: USB Host Controller (OHCI-like) register definitions
 UHC HCI Spec Revision 
 UHC Host Control Register 
 UHC Command Status Register 
 UHC Interrupt Status Register 
 UHC Interrupt Enable 
 UHC Interrupt Disable 
 UHC Host Controller Comm. Area 
 UHC Period Current Endpt Descr 
 UHC Control Head Endpt Descr 
 UHC Control Current Endpt Descr 
 UHC Bulk Head Endpt Descr 
 UHC Bulk Current Endpt Descr 
 UHC Done Head 
 UHC Frame Interval 
 UHC Frame Remaining 
 UHC Frame Number 
 UHC Periodic Start 
 UHC Low Speed Threshold 
 UHC Root Hub Descriptor A 
 No over current protection 
 Over Current Protection Mode 
 Power On To Power Good Time 
 UHC Root Hub Descriptor B 
 UHC Root Hub Status 
 UHC Root Hub Port 1 Status 
 UHC Root Hub Port 2 Status 
 UHC Root Hub Port 3 Status 
 UHC Status Register 
 USB Power Sense Port3 
 System Bus Master Abort Interrupt
 System Bus Target Abort Interrupt
 USB Port Resume Interrupt 
 USB Power Sense Port 2 
 USB Power Sense Port 1 
 HCI Target Abort 
 HCI Buffer Active 
 HCI Remote Wake Up Event 
 UHC Reset Register 
 Sleep Standby Enable for Port3 
 Sleep Standby Enable for Port2 
 Sleep Standby Enable for Port1 
 Power control polarity low 
 Power sense polarity low 
 Sleep Standby Enable 
 USB Interrupt Test 
 Simulation Scale Down Clock 
 Clock Generation Reset 
 Force Host Controller Reset 
 Force System Bus Iface Reset 
 UHC Interrupt Enable Register
 Power Sense Port3 IntEn 
 Port Resume IntEn 
 Power Sense Port2 IntEn 
 Power Sense Port1 IntEn 
#define UHCHIE_TAIE	(1 << 10)	 HCI Interface Transfer Abort
 HCI Buffer Active IntEn 
 Remote Wake-up IntEn 
 UHC Interrupt Test register 
  PMM_NPS_MODE -- PMM Non-power switching mode
      Ports are powered continuously.
  PMM_GLOBAL_MODE -- PMM global switching mode
      All ports are powered at the same time.
  PMM_PERPORT_MODE -- PMM per port switching mode
      Ports are powered individually.
 Set port power control mask bits, only 3 ports. 
-------------------------------------------------------------------------
 Clear any OTG Pin Hold 
 Host Controller Reset 
	 Right now device-tree probed devices don't get dma_mask set.
	  Since shared usb code relies on it, set it here for now.
	  Once we have dma capability bindings this can go away.
-------------------------------------------------------------------------
 configure so an HC device and id are always provided 
 always called with process context; sleeping is OK 
  ohci_hcd_pxa27x_probe - initialize pxa27x-based HCDs
  @pdev:	USB Host controller to probe
  Context: task context, might sleep
  Allocates basic resources for this USB host controller, and
  then invokes the start() method for the HCD associated with it
  through the hotplug entry's driver_data.
 initialize "struct pxa27x_ohci" 
 Select Power Management Mode 
 The value of NDP in roothub_a is incorrect on this hardware 
 may be called without controller electrically present 
 may be called with controller, bus, and devices active 
  ohci_hcd_pxa27x_remove - shutdown processing for pxa27x-based HCDs
  @pdev: USB Host Controller being removed
  Context: task context, might sleep
  Reverses the effect of ohci_hcd_pxa27x_probe(), first invoking
  the HCD's stop() method.  It is always called from a thread
  context, normally "rmmod", "apmd", or something similar.
-------------------------------------------------------------------------
 Select Power Management Mode 
 SPDX-License-Identifier: GPL-2.0
 Driver for Microtek Scanmaker X6 USB scanner, and possibly others.
  (C) Copyright 2000 John Fremlin <vii@penguinpowered.com>
  (C) Copyright 2000 Oliver Neukum <Oliver.Neukum@lrz.uni-muenchen.de>
  Parts shamelessly stolen from usb-storage and copyright by their
  authors. Thanks to Matt Dharm for giving us permission!
  This driver implements a SCSI host controller driver and a USB
  device driver. To avoid confusion, all the USB related stuff is
  prefixed by mts_usb_ and all the SCSI stuff by mts_scsi_.
  Microtek (www.microtek.com) did not release the specifications for
  their USB protocol to us, so we had to reverse engineer them. We
  don't know for which models they are valid.
  The X6 USB has three bulk endpoints, one output (0x1) down which
  commands and outgoing data are sent, and two input: 0x82 from which
  normal data is read from the scanner (in packets of maximum 32
  bytes) and from which the status byte is read, and 0x83 from which
  the results of a scan (or preview) are read in up to 64  1024 byte
  chunks by the Windows driver. We don't know how much it is possible
  to read at a time from 0x83.
  It seems possible to read (with URB transfers) everything from 0x82
  in one go, without bothering to read in 32 byte chunks.
  There seems to be an optimisation of a further READ implicit if
  you simply read from 0x83.
  Guessed protocol:
 	Send raw SCSI command to EP 0x1
 	If there is data to receive:
 		If the command was READ datatype=image:
 			Read a lot of data from EP 0x83
 		Else:
 			Read data from EP 0x82
 	Else:
 		If there is data to transmit:
 			Write it to EP 0x1
 	Read status byte from EP 0x82
  References:
  The SCSI command set for the scanner is available from
 	ftp:ftp.microtek.commicrotekdevpack
  Microtek NV sent us a more up to date version of the document. If
  you want it, just send mail.
  Status:
 	Untested with multiple scanners.
 	Untested on SMP.
 	Untested on a bigendian machine.
  History:
 	20000417 starting history
 	20000417 fixed load oops
 	20000417 fixed unload oops
 	20000419 fixed READ IMAGE detection
 	20000424 started conversion to use URBs
 	20000502 handled short transfers as errors
 	20000513 rename and organisation of functions (john)
 	20000513 added IDs for all products supported by Windows driver (john)
 	20000514 Rewrote mts_scsi_queuecommand to use URBs (john)
 	20000514 Version 0.0.8j
       20000514 Fix reporting of non-existent devices to SCSI layer (john)
 	20000514 Added MTS_DEBUG_INT (john)
 	20000514 Changed "usb-microtek" to "microtek" for consistency (john)
 	20000514 Stupid bug fixes (john)
 	20000514 Version 0.0.9j
 	20000515 Put transfer context and URB in mts_desc (john)
 	20000515 Added prelim turn off debugging support (john)
 	20000515 Version 0.0.10j
       20000515 Fixed up URB allocation (clear URB on alloc) (john)
       20000515 Version 0.0.11j
 	20000516 Removed unnecessary spinlock in mts_transfer_context (john)
 	20000516 Removed unnecessary up on instance lock in mts_remove_nolock (john)
 	20000516 Implemented (badly) scsi_abort (john)
 	20000516 Version 0.0.12j
       20000517 Hopefully removed mts_remove_nolock quasideadlock (john)
       20000517 Added mts_debug_dump to print ll USB info (john)
 	20000518 Tweaks and documentation updates (john)
 	20000518 Version 0.0.13j
 	20000518 Cleaned up abort handling (john)
 	20000523 Removed scsi_command and various scsi_..._resets (john)
 	20000523 Added unlink URB on scsi_abort, now OHCI supports it (john)
 	20000523 Fixed last tiresome compile warning (john)
 	20000523 Version 0.0.14j (though version 0.1 has come out?)
 	20000602 Added primitive reset
 	20000602 Version 0.2.0
 	20000603 various cosmetic changes
 	20000603 Version 0.2.1
 	20000620 minor cosmetic changes
 	20000620 Version 0.2.2
 	20000822 Hopefully fixed deadlock in mts_remove_nolock()
 	20000822 Fixed minor race in mts_transfer_cleanup()
 	20000822 Fixed deadlock on submission error in queuecommand
 	20000822 Version 0.2.3
 	20000913 Reduced module size if debugging is off
 	20000913 Version 0.2.4
       20010210 New abort logic
       20010210 Version 0.3.0
 	20010217 Merged scattergather
 	20010218 Version 0.4.0
 	20010218 Cosmetic fixes
 	20010218 Version 0.4.1
       20010306 Abort while using scattergather
       20010306 Version 0.4.2
       20010311 Remove all timeouts and tidy up generally (john)
 	20010320 check return value of scsi_register()
 	20010320 Version 0.4.3
 	20010408 Identify version on module load.
 	20011003 Fix multiple requests
 Should we do debugging? 
#define MTS_DO_DEBUG
 USB layer driver interface 
 Internal driver stuff 
 Interrupt context! 
 Holding transfer->context->lock! 
 Interrupt context! 
 Interrupt context! 
 Interrupt context! 
 Interrupt context! 
 We are being killed 
 A genuine error has occurred 
 can't rely on srb->sc_data_direction 
 Brutally ripped from usb-storage 
 here we need ATOMIC as we are called with the iolock 
 128 K 
 The entries of microtek_table must correspond, line-by-line to
 Terminating entry 
	int ep_in_set[3];  this will break if we have more than three endpoints
 the current altsetting on the interface we're probing 
 the current altsetting on the interface we're probing 
 Check if the config is sane 
 endpoints 
 SPDX-License-Identifier: GPL-2.0+
  copyright (C) 19992000 by Henning Zabel <henning@uni-paderborn.de>
 	USB-Kernel Driver for the Mustek MDC800 Digital Camera
 	(c) 19992000 Henning Zabel <henning@uni-paderborn.de>
  The driver brings the USB functions of the MDC800 to Linux.
  To use the Camera you must support the USB Protocol of the camera
  to the Kernel Node.
  The Driver uses a misc device Node. Create it with :
  mknod devmustek c 180 32
  The driver supports only one camera.
  Fix: mdc800 used sleep_on and slept with io_lock held.
  Converted sleep_on to waitqueues with schedule_timeout and made io_lock
  a semaphore from a spinlock.
  by Oliver Neukum <oliver@neukum.name>
  (02122001)
  Identify version on module load.
  (08042001) gb
  version 0.7.5
  Fixed potential SMP races with Spinlocks.
  Thanks to Oliver Neukum <oliver@neukum.name> who 
  noticed the race conditions.
  (30102000)
  Fixed: Setting urb->dev before submitting urb.
  by Greg KH <greg@kroah.com>
  (13102000)
  version 0.7.3
  bugfix : The mdc800->state field gets set to READY after the
  the disconnect function sets it to NOT_CONNECTED. This makes the
  driver running like the camera is connected and causes some
  hang ups.
  version 0.7.1
  MOD_INC and MOD_DEC are changed in usb_probe to prevent loadunload
  problems when compiled as Module.
  (04042000)
  The mdc800 driver gets assigned the USB Minor 32-47. The Registration
  was updated to use these values.
  (26032000)
  The Init und Exit Module Function are updated.
  (01032000)
  version 0.7.0
  Rewrite of the driver : The driver now uses URB's. The old stuff
  has been removed.
  version 0.6.0
  Rewrite of this driver: The Emulation of the rs232 protocoll
  has been removed from the driver. A special executeCommand function
  for this driver is included to gphoto.
  The driver supports two kind of communication to bulk endpoints.
  Either with the dev->bus->ops->bulk... or with callback function.
  (09111999)
  version 0.5.0:
  first Version that gets a version number. Most of the needed
  functions work.
  (20101999)
  Version Information
 Vendor and Product Information 
 Timeouts (msec) 
 Minor Number of the device (create with mknod devmustek c 180 32) 
	Data and structs
 Data for the driver 
 Device Data
 is camera busy ?
 Status to synchronize with irq
 last Bytes send after busy
 Bytes left to download ?
 Device Data 
 Answer Buffer
 Index to the first not readen byte
 Bytes in the buffer
 Camera device open ?
 IO -lock
 Command Input Buffer
 Cache for the Imagesize (-1 for nothing cached )
 Specification of the Endpoints 
 The Variable used by the driver 
	The USB Part of the driver
  Checks whether the camera responds busy
  Checks whether the Camera is ready
  USB IRQ Handler for InputLine
 Store Data in camera_answer field 
  Waits a while until the irq responds that camera is ready
   mode : 0: Wait for camera gets ready
          1: Wait for receiving data
          2: Wait for camera gets busy
  msec: Time to wait
  The write_urb callback function
  The download_urb callback function
 Fill output buffer with these data 
	Probing for the Camera
  Callback to search the Mustek MDC800 on the USB Bus
 Check the Endpoints 
 Setup URB Structs 
  Disconnect USB device (maybe the MDC800)
		 must be under lock to make sure no URB
	The Misc device Part (file_operations)
  This Function calc the Answersize for a command.
  Init the device: (1) alloc mem (2) Increase MOD Count ..
  Close the Camera and release Memory
  The Device read callback Function
 single transfer size 
 Too less Data in buffer 
 Download -> Request new bytes 
 No more bytes -> that's an error
 Copy Bytes 
  The Device write callback Function
  If a 8Byte Command is received, it will be send to the camera.
  After this the driver initiates the request for the answer or
  just waits until the camera becomes ready.
 check for command start 
 save command byte 
 Command Buffer full ? -> send it to camera 
 Download Image 
 Take shot in Fine Mode (WCam Mode) 
 Download Thumbnail 
 Write dummy data, (this is ugly but part of the USB Protocol 
 if you use endpoint 1 as bulk and not as irq) 
 This is the interpreted answer 
 Cache the Imagesize, if command was getImageSize 
	Init and Cleanup this driver (Structs and types)
 File Operations of this drivers 
 Terminating entry 
  USB Driver Struct for this device
	Init and Cleanup this driver (Main Functions)
 Allocate Memory 
 Register the driver 
 Clean driver up, when something fails 
 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
  hcd.c - DesignWare HS OTG Controller host-mode routines
  Copyright (C) 2004-2013 Synopsys, Inc.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation andor other materials provided with the distribution.
  3. The names of the above-listed copyright holders may not be used
     to endorse or promote products derived from this software without
     specific prior written permission.
  ALTERNATIVELY, this software may be distributed under the terms of the
  GNU General Public License ("GPL") as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any
  later version.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  This file contains the core HCD code, and implements the Linux hc_driver
  API
  =========================================================================
   Host Core Layer Functions
  =========================================================================
  dwc2_enable_common_interrupts() - Initializes the commmon interrupts,
  used in both device and host modes
  @hsotg: Programming view of the DWC_otg controller
 Clear any pending OTG Interrupts 
 Clear any pending interrupts 
 Enable the interrupts in the GINTMSK 
  dwc2_enable_host_interrupts() - Enables the Host mode interrupts
  @hsotg: Programming view of DWC_otg controller
 Disable all interrupts 
 Enable the common interrupts 
 Enable host mode interrupts without disturbing common interrupts 
  dwc2_disable_host_interrupts() - Disables the Host Mode interrupts
  @hsotg: Programming view of DWC_otg controller
 Disable host mode interrupts without disturbing common interrupts 
  dwc2_calculate_dynamic_fifo() - Calculates the default fifo size
  For system that have a total fifo depth that is smaller than the default
  RX + TX fifo size.
  @hsotg: Programming view of DWC_otg controller
	
	  Will use Method 2 defined in the DWC2 spec: minimum FIFO depth
	  allocation with support for high bandwidth endpoints. Synopsys
	  defines MPS(Max Packet size) for a periodic EP=1024, and for
	  non-periodic as 512.
		
		  For Buffer DMA modeScatter Gather DMA mode
		  2  ((Largest Packet size  4) + 1 + 1) + n
		  with n = number of host channel.
		  2  ((10244) + 2) = 516
		
		  min non-periodic tx fifo depth
		  2  (largest non-periodic USB packet used  4)
		  2  (5124) = 256
		
		  min periodic tx fifo depth
		  (largest packet sizeMC)4
		  (1024  3)4 = 768
	
	  If the summation of RX, NPTX and PTX fifo sizes is still
	  bigger than the total_fifo_size, then we have a problem.
	 
	  We won't be able to allocate as many endpoints. Right now,
	  we're just printing an error message, but ideally this FIFO
	  allocation algorithm would be improved in the future.
	 
	  FIXME improve this FIFO allocation algorithm.
 Rx FIFO 
 Non-periodic Tx FIFO 
 Periodic Tx FIFO 
		
		  This feature was implemented in 2.91a version
		  Global DFIFOCFG calculation for Host mode -
		  include RxFIFO, NPTXFIFO and HPTXFIFO
  dwc2_calc_frame_interval() - Calculates the correct frame Interval value for
  the HFIR register according to PHY type and speed
  @hsotg: Programming view of DWC_otg controller
  NOTE: The caller can modify the value of the HFIR register only after the
  Port Enable bit of the Host Port Control and Status register (HPRT.EnaPort)
  has been set
 default value 
 High speed case 
 FSLS case 
  dwc2_read_packet() - Reads a packet from the Rx FIFO into the destination
  buffer
  @hsotg: Programming view of DWC_otg controller
  @dest:    Destination buffer for the packet
  @bytes:   Number of bytes to copy to the destination
	
	  Todo: Account for the case where dest is not dword aligned. This
	  requires reading data from the FIFO into a u32 temp buffer, then
	  moving it into the data buffer.
  dwc2_dump_channel_info() - Prints the state of a host channel
  @hsotg: Programming view of DWC_otg controller
  @chan:  Pointer to the channel to dump
  Must be called with interrupt disabled and spinlock held
  NOTE: This function will be removed once the peripheral controller code
  is integrated and the driver is stable
 VERBOSE_DEBUG 
  =========================================================================
   Low Level Host Channel Access Functions
  =========================================================================
	
	  For Descriptor DMA mode core halts the channel on AHB error.
	  Interrupt is not required.
 Enable the top level host channel interrupt 
 Make sure host channel interrupts are enabled 
  dwc2_hc_init() - Prepares a host channel for transferring packets tofrom
  a specific endpoint
  @hsotg: Programming view of DWC_otg controller
  @chan:  Information needed to initialize the host channel
  The HCCHARn register is set up with the characteristics specified in chan.
  Host channel interrupts that may need to be serviced while this transfer is
  in progress are enabled.
 Clear old interrupt conditions for this host channel 
 Enable channel interrupts required for this transfer 
	
	  Program the HCCHARn register with the endpoint characteristics for
	  the current transfer
 Program the HCSPLT register for SPLITs 
  dwc2_hc_halt() - Attempts to halt a host channel
  @hsotg:       Controller register interface
  @chan:        Host channel to halt
  @halt_status: Reason for halting the channel
  This function should only be called in Slave mode or to abort a transfer in
  either Slave mode or DMA mode. Under normal circumstances in DMA mode, the
  controller halts the channel when the transfer is complete or a condition
  occurs that requires application intervention.
  In slave mode, checks for a free request queue entry, then sets the Channel
  Enable and Channel Disable bits of the Host Channel Characteristics
  register of the specified channel to intiate the halt. If there is no free
  request queue entry, sets only the Channel Disable bit of the HCCHARn
  register to flush requests for this channel. In the latter case, sets a
  flag to indicate that the host channel needs to be halted when a request
  queue slot is open.
  In DMA mode, always sets the Channel Enable and Channel Disable bits of the
  HCCHARn register. The controller ensures there is space in the request
  queue before submitting the halt request.
  Some time may elapse before the core flushes any posted requests for this
  host channel and halts. The Channel Halted interrupt handler completes the
  deactivation of the host channel.
	
	  In buffer DMA or external DMA mode channel can't be halted
	  for non-split periodic channels. At the end of the next
	  uframeframe (in the worst case), the core generates a channel
	  halted and disables the channel automatically.
		
		  Disable all channel interrupts except Ch Halted. The QTD
		  and QH state associated with this transfer has been cleared
		  (in the case of URB_DEQUEUE), so the channel needs to be
		  shut down carefully to prevent crashes.
		
		  Make sure no other interrupts besides halt are currently
		  pending. Handling another interrupt could cause a crash due
		  to the QTD and QH state.
		
		  Make sure the halt status is set to URB_DEQUEUE or AHB_ERR
		  even if the channel was already halted for some other
		  reason
			
			  The channel is either already halted or it hasn't
			  started yet. In DMA mode, the transfer may halt if
			  it finishes normally or a condition occurs that
			  requires driver intervention. Don't want to halt
			  the channel again. In either Slave or DMA mode,
			  it's possible that the transfer has been assigned
			  to a channel, but not started yet when an URB is
			  dequeued. Don't want to halt a channel that hasn't
			  started yet.
		
		  A halt has already been issued for this channel. This might
		  happen when a transfer is aborted by a higher level in
		  the stack.
 No need to set the bit in DDMA for disabling the channel 
 TODO check it everywhere channel is disabled 
 Check for space in the request queue to issue the halt 
  dwc2_hc_cleanup() - Clears the transfer state for a host channel
  @hsotg: Programming view of DWC_otg controller
  @chan:  Identifies the host channel to clean up
  This function is normally called after a transfer is done and the host
  channel is being released
	
	  Clear channel interrupt enables and any unhandled channel interrupt
	  conditions
  dwc2_hc_set_even_odd_frame() - Sets the channel property that indicates in
  which frame a periodic transfer should occur
  @hsotg:  Programming view of DWC_otg controller
  @chan:   Identifies the host channel to set up and its properties
  @hcchar: Current value of the HCCHAR register for the specified host channel
  This function has no effect on non-periodic transfers
		
		  Try to figure out if we're an even or odd frame. If we set
		  even and the current frame number is even the the transfer
		  will happen immediately.  Similar if both are odd. If one is
		  even and the other is odd then the transfer will happen when
		  the frame number ticks.
		 
		  There's a bit of a balancing act to get this right.
		  Sometimes we may want to send data in the current frame (AK
		  right away).  We might want to do this if the frame number
		  _just_ ticked, but we might also want to do this in order
		  to continue a split transaction that happened late in a
		  microframe (so we didn't know to queue the next transfer
		  until the frame number had ticked).  The problem is that we
		  need a lot of knowledge to know if there's actually still
		  time to send things or if it would be better to wait until
		  the next frame.
		 
		  We can look at how much time is left in the current frame
		  and make a guess about whether we'll have time to transfer.
		  We'll do that.
 Get speed host is running at 
 See how many bytes are in the periodic FIFO right now 
		
		  Roughly estimate bus time for everything in the periodic
		  queue + our new transfer.  This is "rough" because we're
		  using a function that makes takes into account INOUT
		  and INTISO and we're just slamming in one value for all
		  transfers.  This should be an over-estimate and that should
		  be OK, but we can probably tighten it.
 See what frame number we'll be at by the time we finish 
 This is when we were scheduled to be on the wire 
		
		  If we'd finish _after_ the frame we're scheduled in then
		  it's hopeless.  Just schedule right away and hope for the
		  best.  Note that it _might_ be wise to call back into the
		  scheduler to pick a better frame, but this is better than
		  nothing.
			
			  We picked a different frame number; communicate this
			  back to the scheduler so it doesn't try to schedule
			  another in the same frame.
			 
			  Remember that next_active_frame is 1 before the wire
			  frame.
 Set up the initial PID for the transfer 
  dwc2_hc_write_packet() - Writes a packet into the Tx FIFO associated with
  the Host Channel
  @hsotg: Programming view of DWC_otg controller
  @chan:  Information needed to initialize the host channel
  This function should only be called in Slave mode. For a channel associated
  with a non-periodic EP, the non-periodic Tx FIFO is written. For a channel
  associated with a periodic EP, the periodic Tx FIFO is written.
  Upon return the xfer_buf and xfer_count fields in chan are incremented by
  the number of bytes written to the Tx FIFO.
 xfer_buf is DWORD aligned 
 xfer_buf is not DWORD aligned 
  dwc2_hc_do_ping() - Starts a PING transfer
  @hsotg: Programming view of DWC_otg controller
  @chan:  Information needed to initialize the host channel
  This function should only be called in Slave mode. The Do Ping bit is set in
  the HCTSIZ register, then the channel is enabled.
  dwc2_hc_start_transfer() - Does the setup for a data transfer for a host
  channel and starts the transfer
  @hsotg: Programming view of DWC_otg controller
  @chan:  Information needed to initialize the host channel. The xfer_len value
          may be reduced to accommodate the max widths of the XferSize and
          PktCnt fields in the HCTSIZn register. The multi_count value may be
          changed to reflect the final xfer_len value.
  This function may be called in either Slave mode or DMA mode. In Slave mode,
  the caller must ensure that there is sufficient space in the request queue
  and Tx Data FIFO.
  For an OUT transfer in Slave mode, it loads a data packet into the
  appropriate FIFO. If necessary, additional data packets are loaded in the
  Host ISR.
  For an IN transfer in Slave mode, a data packet is requested. The data
  packets are unloaded from the Rx FIFO in the Host ISR. If necessary,
  additional data packets are requested in the Host ISR.
  For a PING transfer in Slave mode, the Do Ping bit is set in the HCTSIZ
  register along with a packet count of 1 and the channel is enabled. This
  causes a single PING transaction to occur. Other fields in HCTSIZ are
  simply set to 0 since no data transfer occurs in this case.
  For a PING transfer in DMA mode, the HCTSIZ register is initialized with
  all the information required to perform the subsequent data transfer. In
  addition, the Do Ping bit is set in the HCTSIZ register. In this case, the
  controller performs the entire PING protocol, then starts the data
  transfer.
			
			  For CSPLIT OUT Transfer, set the size to 0 so the
			  core doesn't expect any data written to the FIFO
 For split set ec_mc for immediate retries 
		
		  Ensure that the transfer length and packet count will fit
		  in the widths allocated for them in the HCTSIZn register
			
			  Make sure the transfer size is no larger than one
			  (micro)frame's worth of data. (A check was done
			  when the periodic transfer was accepted to ensure
			  that a (micro)frame's worth of data can be
			  programmed into a channel.)
			
			  Make sure that xfer_len is a multiple of max packet
			  size
				
				  Always program an integral # of max packets
				  for IN transfers.
				  Note: This assumes that the input buffer is
				  aligned and sized accordingly.
 Need 1 packet for transfer length of 0 
			
			  Make sure that the multi_count field matches the
			  actual transfer length
 The ec_mc gets the multi_count for non-split 
 Start the split 
 Set host channel enable after all other setup is complete 
 Load OUT packet into the appropriate Tx FIFO 
  dwc2_hc_start_transfer_ddma() - Does the setup for a data transfer for a
  host channel and starts the transfer in Descriptor DMA mode
  @hsotg: Programming view of DWC_otg controller
  @chan:  Information needed to initialize the host channel
  Initializes HCTSIZ register. For a PING transfer the Do Ping bit is set.
  Sets PID and NTD values. For periodic transfers initializes SCHED_INFO field
  with micro-frame bitmap.
  Initializes HCDMA register with descriptor list address and CTD value then
  starts the transfer via enabling the channel.
 Packet Count and Xfer Size are not used in Descriptor DMA mode 
 0 - 1 descriptor, 1 - 2 descriptors, etc 
 Non-zero only for high-speed interrupt endpoints 
 Set host channel enable after all other setup is complete 
  dwc2_hc_continue_transfer() - Continues a data transfer that was started by
  a previous call to dwc2_hc_start_transfer()
  @hsotg: Programming view of DWC_otg controller
  @chan:  Information needed to initialize the host channel
  The caller must ensure there is sufficient space in the request queue and Tx
  Data FIFO. This function should only be called in Slave mode. In DMA mode,
  the controller acts autonomously to complete transfers programmed to a host
  channel.
  For an OUT transfer, a new data packet is loaded into the appropriate FIFO
  if there is any data remaining to be queued. For an IN transfer, another
  data packet is always requested. For the SETUP phase of a control transfer,
  this function does nothing.
  Return: 1 if a new request is queued, 0 if no more requests are required
  for this transfer
 SPLITs always queue just once per channel 
 SETUPs are queued only once since they can't be NAK'd 
		
		  Always queue another request for other IN transfers. If
		  back-to-back INs are issued and NAKs are received for both,
		  the driver may still be processing the first NAK when the
		  second NAK is received. When the interrupt handler clears
		  the NAK interrupt for the first NAK, the second NAK will
		  not be seen. So we can't depend on the NAK interrupt
		  handler to requeue a NAK'd request. Instead, IN requests
		  are issued each time this function is called. When the
		  transfer completes, the extra requests for the channel will
		  be flushed.
 OUT transfers 
 Load OUT packet into the appropriate Tx FIFO 
  =========================================================================
   HCD
  =========================================================================
  Processes all the URBs in a single list of QHs. Completes them with
  -ETIMEDOUT and frees the QTD.
  Must be called with interrupt disabled and spinlock held
 The list hasn't been initialized yet 
 Ensure there are no QTDs or URBs left 
 Free each QTD in the QH's QTD list 
  Responds with an error status of -ETIMEDOUT to all URBs in the non-periodic
  and periodic schedules. The QTD associated with each URB is removed from
  the schedule and freed. This function may be called when a disconnect is
  detected or when the HCD is being stopped.
  Must be called with interrupt disabled and spinlock held
  dwc2_hcd_start() - Starts the HCD when switching to Host mode
  @hsotg: Pointer to struct dwc2_hsotg
		
		  Reset the port. During a HNP mode switch the reset
		  needs to occur within 1ms and have a duration of at
		  least 50ms.
 Must be called with interrupt disabled and spinlock held 
 Flush out any channel requests in slave mode 
 Halt the channel 
		
		  Added for Descriptor DMA to prevent channel double cleanup in
		  release_channel_ddma(), which is called from ep_disable when
		  device disconnects
 All channels have been freed, mark them available 
  dwc2_hcd_connect() - Handles connect of the HCD
  @hsotg: Pointer to struct dwc2_hsotg
  Must be called with interrupt disabled and spinlock held
  dwc2_hcd_disconnect() - Handles disconnect of the HCD
  @hsotg: Pointer to struct dwc2_hsotg
  @force: If true, we won't try to reconnect even if we see device connected.
  Must be called with interrupt disabled and spinlock held
 Set status flags for the hub driver 
	
	  Shutdown any transfers in process by clearing the Tx FIFO Empty
	  interrupt mask and status bits and disabling subsequent host
	  channel interrupts.
	
	  Turn off the vbus power only if the core has transitioned to device
	  mode. If still in host mode, need to keep power on to detect a
	  reconnection.
 Respond with an error status to all URBs in the schedule 
 Clean up any host channels that were in use 
	
	  Add an extra check here to see if we're actually connected but
	  we don't have a detection interrupt pending.  This can happen if:
	    1. hardware sees connect
	    2. hardware sees disconnect
	    3. hardware sees connect
	    4. dwc2_port_intr() - clears connect interrupt
	    5. dwc2_handle_common_intr() - calls here
	 
	  Without the extra check here we will end calling disconnect
	  and won't get any future interrupts to handle the connect.
  dwc2_hcd_rem_wakeup() - Handles Remote Wakeup
  @hsotg: Pointer to struct dwc2_hsotg
  dwc2_hcd_stop() - Halts the DWC_otg host mode operations in a clean manner
  @hsotg: Pointer to struct dwc2_hsotg
  Must be called with interrupt disabled and spinlock held
	
	  The root hub should be disconnected before this function is called.
	  The disconnect will clear the QTD lists (via ..._hcd_urb_dequeue)
	  and the QH lists (via ..._hcd_endpoint_disable).
 Turn off all host-specific interrupts 
 Turn off the vbus power 
 Caller must hold driver lock 
 No longer connected 
 Some configurations cannot support LS traffic on a FS root port 
			
			  Do not schedule SG transactions until qtd has
			  URB_GIVEBACK_ASAP set
 Must be called with interrupt disabled and spinlock held 
 The QTD is in process (it has been assigned to a channel) 
			
			  If still connected (i.e. in host mode), halt the
			  channel so it can be used for other transfers. If
			  no longer connected, the host registers can't be
			  written to halt the channel since the core is in
			  device mode.
	
	  Free the QTD and clean up the associated QH. Leave the QH in the
	  schedule if it has any remaining QTDs.
 Must NOT be called with interrupt disabled or spinlock held 
 Free each QTD in the QH's QTD list 
 Must be called with interrupt disabled and spinlock held 
  dwc2_core_init() - Initializes the DWC_otg controller registers and
  prepares the core for device mode or host mode operation
  @hsotg:         Programming view of the DWC_otg controller
  @initial_setup: If true then this is the first init for this instance.
 Set ULPI External VBUS bit if needed 
 Set external TS Dline pulsing bit if needed 
	
	  Reset the Controller
	 
	  We only need to reset the controller if this is a re-init.
	  For the first init we know for sure that earlier code reset us (it
	  needed to in order to properly detect various parameters).
	
	  This needs to happen in FS mode before any other programming occurs
 Program the GAHBCFG Register 
 Program the GUSBCFG register 
 Program the GOTGCTL register 
 Clear the SRP success bit for FS-I2c 
 Enable common interrupts 
	
	  Do device or host initialization based on mode during PCD and
	  HCD initialization
  dwc2_core_host_init() - Initializes the DWC_otg controller registers for
  Host mode
  @hsotg: Programming view of DWC_otg controller
  This function flushes the Tx and Rx FIFOs and flushes any entries in the
  request queues. Host channels are reset to ensure that they are ready for
  performing transfers.
	 Set HSFS Timeout Calibration to 7 (max available value).
	  The number of PHY clocks that the application programs in
	  this field is added to the highfull speed interpacket timeout
	  duration in the core to account for any additional delays
	  introduced by the PHY. This can be required, because the delay
	  introduced by the PHY in generating the linestate condition
	  can vary from one PHY to another.
 Restart the Phy Clock 
 Initialize Host Configuration Register 
	
	  This bit allows dynamic reloading of the HFIR register during
	  runtime. This bit needs to be programmed during initial configuration
	  and its value must not be changed during runtime.
 Configure data FIFO sizes 
 TODO - check this 
 Clear Host Set HNP Enable in the OTG Control Register 
 Make sure the FIFOs are flushed 
 all TX FIFOs );
 Clear Host Set HNP Enable in the OTG Control Register 
 Flush out any leftover queued requests 
 Halt all channels to put them into a known state 
 Enable ACG feature in host mode, if supported 
 Turn on the vbus power 
  Initializes dynamic portions of the DWC_otg HCD state
  Must be called with interrupt disabled and spinlock held
	
	  Put all channels in the free channel list and clean up channel
	  states
 Initialize the DWC core for host mode operation 
			
			  Direction is opposite of data direction or IN if no
			  data
 Restore urb->transfer_buffer from the end of the allocated area 
	
	  Allocate a buffer with enough padding for original transfer_buffer
	  pointer. This allocation is guaranteed to be aligned properly for
	  DMA
	
	  Position value of original urb->transfer_buffer pointer to the end
	  of allocation for later referencing
 We assume setup_dma is always aligned; warn if not 
  dwc2_assign_and_init_hc() - Assigns transactions from a QTD to a free host
  channel and initializes the host channel to perform the transactions. The
  host channel is removed from the free list.
  @hsotg: The HCD state structure
  @qh:    Transactions from the first QTD for this QH are selected and assigned
          to a free host channel
 Remove host channel from free list 
	
	  Use usb_pipedevice to determine device address. This address is
	  0 before the SET_ADDRESS command and the correct address afterward.
	
	  The following values may be modified in the transfer type section
	  below. The xfer_len value may be reduced when the transfer is
	  started to accommodate the max widths of the XferSize and PktCnt
	  fields in the HCTSIZn register.
 Set the split attributes if required 
 Set the transfer attributes 
 For non-dword aligned buffers 
 Add channel back to free list 
		
		  We assume that DMA is always aligned in non-split
		  case or split out case. Warn if not.
		
		  This value may be modified when the transfer is started
		  to reflect the actual transfer length
  dwc2_hcd_select_transactions() - Selects transactions from the HCD transfer
  schedule and assigns them to available host channels. Called from the HCD
  interrupt handler functions.
  @hsotg: The HCD state structure
  Return: The types of new transactions that were assigned to host channels
 Process entries in the periodic ready list 
		
		  Move the QH from the periodic ready schedule to the
		  periodic assigned schedule
	
	  Process entries in the inactive portion of the non-periodic
	  schedule. Some free host channels may not be used if they are
	  reserved for periodic transfers.
		
		  Move the QH from the non-periodic inactive schedule to the
		  non-periodic active schedule
  dwc2_queue_transaction() - Attempts to queue a single transaction request for
  a host channel associated with either a periodic or non-periodic transfer
  @hsotg: The HCD state structure
  @chan:  Host channel descriptor associated with either a periodic or
          non-periodic transfer
  @fifo_dwords_avail: Number of DWORDs available in the periodic Tx FIFO
                      for periodic transfers or the non-periodic Tx FIFO
                      for non-periodic transfers
  Return: 1 if a request is queued and more requests may be needed to
  complete the transfer, 0 if no more requests are required for this
  transfer, -1 if there is insufficient space in the Tx FIFO
  This function assumes that there is space available in the appropriate
  request queue. For an OUT transfer or SETUP transaction in Slave mode,
  it checks whether space is available in the appropriate Tx FIFO.
  Must be called with interrupt disabled and spinlock held
 Put ourselves on the list to keep order straight 
 Don't queue a request if the channel has been halted 
  Processes periodic channels for the next frame and queues transactions for
  these channels to the DWC_otg controller. After queueing transactions, the
  Periodic Tx FIFO Empty interrupt is enabled if there are more transactions
  to queue as Periodic Tx FIFO or request queue space becomes available.
  Otherwise, the Periodic Tx FIFO Empty interrupt is disabled.
  Must be called with interrupt disabled and spinlock held
 If empty list then just adjust interrupt enables 
 Make sure EP's TT buffer is clean before queueing qtds 
		
		  Set a flag if we're queuing high-bandwidth in slave mode.
		  The flag prevents any halts to get into the request queue in
		  the middle of multiple high-bandwidth packets getting queued.
		
		  In Slave mode, stay on the current transfer until there is
		  nothing more to do or the high-bandwidth request count is
		  reached. In DMA mode, only need to queue one request. The
		  controller automatically handles multiple packets for
		  high-bandwidth transfers.
			
			  Move the QH from the periodic assigned schedule to
			  the periodic queued schedule
 done queuing high bandwidth 
		
		  May need to queue more transactions as the request
		  queue or Tx FIFO empties. Enable the periodic Tx
		  FIFO empty interrupt. (Always use the half-empty
		  level to ensure that new requests are loaded as
		  soon as possible.)
		
		  Disable the Tx FIFO empty interrupt since there are
		  no more transactions that need to be queued right
		  now. This function is called from interrupt
		  handlers to queue more transactions as transfer
		  states change.
  Processes active non-periodic channels and queues transactions for these
  channels to the DWC_otg controller. After queueing transactions, the NP Tx
  FIFO Empty interrupt is enabled if there are more transactions to queue as
  NP Tx FIFO or request queue space becomes available. Otherwise, the NP Tx
  FIFO Empty interrupt is disabled.
  Must be called with interrupt disabled and spinlock held
	
	  Keep track of the starting point. Skip over the start-of-list
	  entry.
	
	  Process once through the active list or until no more space is
	  available in the request queue or the Tx FIFO
 Make sure EP's TT buffer is clean before queueing qtds 
 Advance to next QH, skipping start-of-list entry 
			
			  May need to queue more transactions as the request
			  queue or Tx FIFO empties. Enable the non-periodic
			  Tx FIFO empty interrupt. (Always use the half-empty
			  level to ensure that new requests are loaded as
			  soon as possible.)
			
			  Disable the Tx FIFO empty interrupt since there are
			  no more transactions that need to be queued right
			  now. This function is called from interrupt
			  handlers to queue more transactions as transfer
			  states change.
  dwc2_hcd_queue_transactions() - Processes the currently active host channels
  and queues transactions for these channels to the DWC_otg controller. Called
  from the HCD interrupt handler functions.
  @hsotg:   The HCD state structure
  @tr_type: The type(s) of transactions to queue (non-periodic, periodic,
            or both)
  Must be called with interrupt disabled and spinlock held
 Process host channels associated with periodic transfers 
 Process host channels associated with non-periodic transfers 
			
			  Ensure NP Tx FIFO empty interrupt is disabled when
			  there are no non-periodic transfers to process
 B-Device connector (Device Mode) 
 Wait for switch to device mode 
			
			  Sometimes the initial GOTGCTRL read is wrong, so
			  check it again and jump to host mode if that was
			  the case.
		
		  Exit Partial Power Down without restoring registers.
		  No need to check the return value as registers
		  are not being restored.
 Enable ACG feature in device mode,if supported 
 A-Device connector (Host Mode) 
 Initialize the Core for Host mode 
	
	  Clear the Resume after 70ms. (Need 20 ms minimum. Use 70 ms
	  so that OPT tests pass with all PHYs.)
 Change to L0 state 
  dwc2_port_suspend() - Put controller in suspend mode for host.
  @hsotg: Programming view of the DWC_otg controller
  @windex: The control request wIndex field
  Return: non-zero if failed to enter suspend mode for host.
  This function is for entering Host mode suspend.
  Must NOT be called with interrupt disabled or spinlock held.
		
		  Perform spin unlock and lock because in
		  "dwc2_host_enter_hibernation()" function there is a spinlock
		  logic which prevents servicing of any IRQ during entering
		  hibernation.
		
		  If not hibernation nor partial power down are supported,
		  clock gating is used to save power.
 For HNP the bus must be suspended for at least 200ms 
  dwc2_port_resume() - Exit controller from suspend mode for host.
  @hsotg: Programming view of the DWC_otg controller
  Return: non-zero if failed to exit suspend mode for host.
  This function is for exiting Host mode suspend.
  Must NOT be called with interrupt disabled or spinlock held.
 Exit host hibernation. 
		
		  If not hibernation nor partial power down are supported,
		  port resume is done using the clock gating programming flow.
 Handles hub class-specific requests 
 Nothing required here 
 Port indicator not supported 
			
			  Clears driver's internal Connect Status Change flag
 Clears driver's internal Port Reset Change flag 
			
			  Clears the driver's internal Port EnableDisable
			  Change flag
			
			  Clears the driver's internal Port Suspend Change
			  flag, which is set when resume signaling on the host
			  port is complete
			
			  The port is disconnected, which means the core is
			  either in device mode or it soon will be. Just
			  return 0's for the remainder of the port status
			  since the port register can't be read if the core
			  is in device mode.
 USB_PORT_FEAT_INDICATOR unsupported always 0 
			
			  Enable descriptor DMA only if a full speed
			  device is connected.
 No HUB features supported 
			
			  The port is disconnected, which means the core is
			  either in device mode or it soon will be. Just
			  return without doing anything since the port
			  register can't be written if the core is in device
			  mode.
 ??? Original driver does this 
 Clear suspend bit if resetting from suspend state 
			
			  When B-Host the Port reset bit is set in the Start
			  HCD Callback function, so that the reset is started
			  within 1ms of the HNP success interrupt
 Clear reset bit in 10ms (FSLS) or 50ms (HS) 
 Now back to On state 
 Not supported 
 High speed has 125 us per (micro) frame; others are 1 ms per 
 Extract fields 
	
	  Number of phy clocks since the last tick of the frame number after
	  "us" has passed.
  NOTE: This function will be removed once the peripheral controller code
  is integrated and the driver is stable
 Gets the dwc2_hsotg from a usb_hcd 
  dwc2_host_get_tt_info() - Get the dwc2_tt associated with context
  This will get the dwc2_tt structure (and ttport) associated with the given
  context (which is really just a struct urb pointer).
  The first time this is called for a given TT we allocate memory for our
  structure.  When everyone is done and has called dwc2_host_put_tt_info()
  then the refcount for the structure will go to 0 and we'll free it.
  @hsotg:     The HCD state structure for the DWC OTG controller.
  @context:   The priv pointer from a struct dwc2_hcd_urb.
  @mem_flags: Flags for allocating memory.
  @ttport:    We'll return this device's port number here.  That's used to
              reference into the bitmap if we're on a multi_tt hub.
  Return: a pointer to a struct dwc2_tt.  Don't forget to call
          dwc2_host_put_tt_info()!  Returns NULL upon memory alloc failure.
			
			  For single_tt we need one schedule.  For multi_tt
			  we need one per port.
  dwc2_host_put_tt_info() - Put the dwc2_tt from dwc2_host_get_tt_info()
  Frees resources allocated by dwc2_host_get_tt_info() if all current holders
  of the structure are done.
  It's OK to call this with NULL.
  @hsotg:     The HCD state structure for the DWC OTG controller.
  @dwc_tt:    The pointer returned by dwc2_host_get_tt_info.
 Model kfree and make put of NULL a no-op 
  Sets the final status of an URB and returns it to the upper layer. Any
  required cleanup of the URB is performed.
  Must be called with interrupt disabled and spinlock held
  Work queue function for starting the HCD when A-Cable is connected
  Reset work queue function
  =========================================================================
   Linux HC Driver Functions
  =========================================================================
  Initializes the DWC_otg controller and its root hub and prepares it for host
  mode operation. Activates the root port. Returns 0 on success and a negative
  error code on failure.
 why 0 ?? 
 Has vbus power been turned on in dwc2_core_host_init ? 
 Enable external vbus supply before resuming root hub 
 Initialize and connect root hub if one is not already attached 
 Inform the HUB driver to resume 
  Halts the DWC_otg host mode operations in a clean manner. USB transfers are
  stopped.
 Turn off all host-specific interrupts 
 Wait for interrupt processing to finish 
 Ensure hcd is disconnected 
 keep balanced supply initexit by checking HPRT0_PWR 
 Enter partial_power_down 
 After entering suspend, hardware is not accessible 
 Enter hibernation 
 After entering suspend, hardware is not accessible 
		
		  If not hibernation nor partial power down are supported,
		  clock gating is used to save power.
 After entering suspend, hardware is not accessible 
 Ask phy to be suspended 
	
	  Added port connection status checking which prevents exiting from
	  Partial Power Down mode from _dwc2_hcd_resume() if not in Partial
	  Power Down mode.
		
		  Set HW accessible bit before powering on the controller
		  since an interrupt may rise.
		
		  Set HW accessible bit before powering on the controller
		  since an interrupt may rise.
		
		  If not hibernation nor partial power down are supported,
		  port resume is done using the clock gating programming flow.
		
		  Initialize the Core for Host mode, as after system resume
		  the global interrupts are disabled.
		
		  Set HW accessible bit before powering on the controller
		  since an interrupt may rise.
 Change Root port status, as port status change occurred after resume.
	
	  Enable power if not already done.
	  This must not be spinlocked since duration
	  of this call is unknown.
 Enable external vbus supply after resuming the port. 
 Wait for controller to correctly update D+D- level 
	
	  Clear Port Enable and Port Status changes.
	  Enable Port Power.
 Wait for controller to detect Port Connect 
 Returns the current frame number 
  Starts processing a USB transfer request specified by a USB Request Block
  (URB). mem_flags indicates the type of memory allocation to use while
  processing this URB.
 Create QH for the endpoint if it doesn't exist 
 Free each QTD in the QH's QTD list 
  Abortscancels a USB transfer request. Always returns 0 to indicate success.
 Higher layer software sets URB status 
  Frees resources in the DWC_otg controller related to a given endpoint. Also
  clears state in the HCD related to the endpoint. Any URBs for the endpoint
  must already be dequeued.
  Resets endpoint specific parameter values, in current version used to reset
  the data toggle (as a WA). This function can be called from usb_clear_halt
  routine.
  Handles host mode interrupts for the DWC_otg controller. Returns IRQ_NONE if
  there was no interrupt to handle. Returns IRQ_HANDLED if there was a valid
  interrupt.
  This function is called by the USB core when an interrupt occurs
  Creates Status Change bitmap for the root hub and root port. The bitmap is
  returned in buf. Bit 0 is the status change indicator for the root hub. Bit 1
  is the status change indicator for the single root port. Returns 1 if either
  change indicator is 1, otherwise returns 0.
 Handles hub class-specific requests 
 Handles hub TT buffer clear completions 
  HPRT0_SPD_HIGH_SPEED: high speed
  HPRT0_SPD_FULL_SPEED: full speed
	
	  On removal, set speed to default high-speed.
		
		  Change speed setting to full-speed if there's
		  a full-speed or low-speed device plugged in.
  Frees secondary storage associated with the dwc2_hsotg structure contained
  in the struct usb_hcd field
 Free memory for QHQTD lists 
 Free memory for the host channels 
 Disable all interrupts 
 Turn off all host-specific interrupts 
  Initializes the HCD. This function allocates memory for and initializes the
  static parts of the usb_hcd and dwc2_hsotg structures. It also registers the
  USB bus with the core and calls the hc_driver->start() function. It returns
  a negative error on failure.
 Check if the bus driver or platform code has setup a dma_mask 
 Set device flags indicating whether the HCD supports DMA 
	
	  Disable the global interrupt until all the interrupt handlers are
	  installed
 Initialize the DWC_otg core, and select the Phy type 
 Create new workqueue and init work 
 Initialize the non-periodic schedule 
 Initialize the periodic schedule 
	
	  Create a host channel descriptor for each host channel implemented
	  in the controller. Initialize the channel descriptor array.
 Initialize work 
	
	  Allocate space for storing data on status transactions. Normally no
	  data is sent, but this space acts as a bit bucket. This must be
	  done after usb_add_hcd since that function allocates the DMA buffer
	  pool.
	
	  Create kmem caches to handle descriptor buffers in descriptor
	  DMA mode.
	  Alignment must be set to 512 bytes.
			
			  Disable descriptor dma mode since it will not be
			  usable.
			
			  Disable descriptor dma mode since it will not be
			  usable.
		
		  Create kmem caches to handle non-aligned buffer
		  in Buffer DMA mode.
 Initiate lx_state to L3 disconnected state 
 Don't support SG list at this point 
	
	  Finish generic HCD initialization and start the HCD. This function
	  allocates the DMA buffer pool, registers the USB bus, requests the
	  IRQ line, and calls hcd_start method.
  Removes the HCD.
  Frees memory and resources associated with the HCD and deregisters the bus.
  dwc2_backup_host_registers() - Backup controller host registers.
  When suspending usb bus, registers needs to be backuped
  if controller power is disabled once suspended.
  @hsotg: Programming view of the DWC_otg controller
 Backup Host regs 
  dwc2_restore_host_registers() - Restore controller host registers.
  When resuming usb bus, device registers needs to be restored
  if controller power were disabled.
  @hsotg: Programming view of the DWC_otg controller
 Restore host regs 
  dwc2_host_enter_hibernation() - Put controller in Hibernation.
  @hsotg: Programming view of the DWC_otg controller
 Enter USB Suspend Mode 
 Wait for the HPRT0.PrtSusp register field to be set 
	
	  We need to disable interrupts to prevent servicing of any IRQ
	  during going to hibernation
 ULPI interface 
 Suspend the Phy Clock 
 UTMI+ Interface 
 Enable interrupts from wake up logic 
 Unmask host mode interrupts in GPWRDN 
 Enable Power Down Clamp 
 Switch off VDD 
  dwc2_host_exit_hibernation()
  @hsotg: Programming view of the DWC_otg controller
  @rem_wakeup: indicates whether resume is initiated by Device or Host.
  @param reset: indicates whether resume is initiated by Reset.
  Return: non-zero if failed to enter to hibernation.
  This function is for exiting from Host mode hibernation by
  Host Initiated ResumeReset and Device Initiated Remote-Wakeup.
	
	  This step is not described in functional spec but if not wait for
	  this delay, mismatch interrupts occurred because just after restore
	  core is in Device mode(gintsts.curmode == 0)
 Clear all pending interupts 
 De-assert Restore 
 Restore GUSBCFG, HCFG 
 De-assert Wakeup Logic 
 Wait for Resume time and then program HPRT again 
 Wait for Resume time and then program HPRT again 
 Clear all interrupt status 
 Clear all pending interupts 
 Restore global registers 
 Restore host registers 
		
		  Change "port_connect_status_change" flag to re-enumerate,
		  because after exit from hibernation port connection status
		  is not detected.
 If the controller isn't allowed to wakeup then we can power off. 
	
	  We don't want to power off the PHY if something under the
	  root hub has wakeup enabled.
 No reason to keep the PHY powered, so allow poweroff 
  dwc2_host_enter_partial_power_down() - Put controller in partial
  power down.
  @hsotg: Programming view of the DWC_otg controller
  Return: non-zero if failed to enter host partial power down.
  This function is for entering Host mode partial power down.
 Put this port in suspend mode. 
 Wait for the HPRT0.PrtSusp register field to be set 
 Backup all registers 
	
	  Clear any pending interrupts since dwc2 will not be able to
	  clear them after entering partial_power_down.
 Put the controller in low power state 
 Set in_ppd flag to 1 as here core enters suspend. 
  dwc2_host_exit_partial_power_down() - Exit controller from host partial
  power down.
  @hsotg: Programming view of the DWC_otg controller
  @rem_wakeup: indicates whether resume is initiated by Reset.
  @restore: indicates whether need to restore the registers or not.
  Return: non-zero if failed to exit host partial power down.
  This function is for exiting from Host mode partial power down.
 Drive resume signaling and exit suspend mode on the port. 
 Stop driveing resume signaling on the port. 
 Turn on the port power bit. 
 Connect hcd. 
 Set lx_state to and in_ppd to 0 as here core exits from suspend. 
  dwc2_host_enter_clock_gating() - Put controller in clock gating.
  @hsotg: Programming view of the DWC_otg controller
  This function is for entering Host mode clock gating.
 Put this port in suspend mode. 
 Set the Phy Clock bit as suspend is received. 
 Set the Gate hclk as suspend is received. 
  dwc2_host_exit_clock_gating() - Exit controller from clock gating.
  @hsotg: Programming view of the DWC_otg controller
  @rem_wakeup: indicates whether resume is initiated by remote wakeup
  This function is for exiting Host mode clock gating.
 Clear the Gate hclk. 
 Phy Clock bit. 
 Drive resume signaling and exit suspend mode on the port. 
 In case of port resume need to wait for 40 ms 
 Stop driveing resume signaling on the port. 
 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
  Copyright (C) 2004-2016 Synopsys, Inc.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation andor other materials provided with the distribution.
  3. The names of the above-listed copyright holders may not be used
     to endorse or promote products derived from this software without
     specific prior written permission.
  ALTERNATIVELY, this software may be distributed under the terms of the
  GNU General Public License ("GPL") as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any
  later version.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		
		  If using the generic PHY framework, check if the PHY bus
		  width is 8-bit and set the phyif appropriately.
  dwc2_set_default_params() - Set all core parameters to their
  auto-detected default values.
  @hsotg: Programming view of the DWC_otg controller
		
		  The values for g_rx_fifo_size (2048) and
		  g_np_tx_fifo_size (1024) come from the legacy s3c
		  gadget driver. These defaults have been hard-coded
		  for some time so many platforms depend on these
		  values. Leave them as defaults for now and only
		  auto-detect if the hardware does not support the
		  default.
  dwc2_get_device_properties() - Read in device properties.
  @hsotg: Programming view of the DWC_otg controller
  Read in the device properties and adjust core parameters if needed.
 check HNP && SRP capable 
 check SRP only capable 
 else: NO HNP && NO SRP capable: always valid 
  Gets host hardware parameters. Forces host mode if not currently in
  host mode. Should be called immediately after a core soft reset in
  order to get the reset values.
  Gets device hardware parameters. Forces device mode if not
  currently in device mode. Should be called immediately after a core
  soft reset in order to get the reset values.
  dwc2_get_hwparams() - During device initialization, read various hardware
                        configuration registers and interpret the contents.
  @hsotg: Programming view of the DWC_otg controller
 hwcfg1 
 hwcfg2 
 hwcfg3 
 hwcfg4 
 fifo sizes 
	
	  Host specific hardware parameters. Reading these parameters
	  requires the controller to be in host mode. The mode will
	  be forced, if necessary, to read these values.
 SPDX-License-Identifier: GPL-2.0
  drd.c - DesignWare USB2 DRD Controller Dual-role support
  Copyright (C) 2020 STMicroelectronics
  Author(s): Amelie Delaunay <amelie.delaunay@st.com>
 Check if A-Session is already in the right state 
 Check if B-Session is already in the right state 
 Skip session not in line with dr_mode 
 Skip session if core is in test mode 
	
	  In case of USB_DR_MODE_PERIPHERAL, clock is disabled at the end of
	  the probe and enabled on udc_start.
	  If role-switch set is called before the udc_start, we need to enable
	  the clock to readwrite GOTGCTL and GUSBCFG registers to override
	  mode and sessions. It is the case if cable is plugged at boot.
 This clear DCTL.SFTDISCON bit 
 This set DCTL.SFTDISCON bit 
 This will raise a Connector ID Status Change Interrupt 
 Enable override and initialize values 
 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
  pci.c - DesignWare HS OTG Controller PCI driver
  Copyright (C) 2004-2013 Synopsys, Inc.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation andor other materials provided with the distribution.
  3. The names of the above-listed copyright holders may not be used
     to endorse or promote products derived from this software without
     specific prior written permission.
  ALTERNATIVELY, this software may be distributed under the terms of the
  GNU General Public License ("GPL") as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any
  later version.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  Provides the initialization and cleanup entry points for the DWC_otg PCI
  driver
  dwc2_pci_remove() - Provides the cleanup entry points for the DWC_otg PCI
  driver
  @pci: The programming view of DWC_otg PCI
 end: all zeroes  }
 SPDX-License-Identifier: GPL-2.0
  debugfs.c - Designware USB2 DRD controller debugfs
  Copyright (C) 2015 Intel Corporation
  Mian Yousaf Kaukab <yousaf.kaukab@intel.com>
  testmode_write() - change usb test mode state.
  @file: The  file to write to.
  @ubuf: The buffer where user wrote.
  @count: The ubuf size.
  @ppos: Unused parameter.
  testmode_show() - debugfs: show usb test mode state
  @s: The seq file to write to.
  @unused: Unused parameter.
  This debugfs entry shows which usb test mode is currently enabled.
  state_show - debugfs: show overall driver and device state.
  @seq: The seq file to write to.
  @v: Unused parameter.
  This debugfs entry shows the overall state of the hardware and
  some general information about each of the endpoints available
  to the system.
  fifo_show - debugfs: show the fifo information
  @seq: The seq_file to write data to.
  @v: Unused parameter.
  Show the FIFO information for the overall fifo and all the
  periodic transmission FIFOs.
  ep_show - debugfs: show the state of an endpoint.
  @seq: The seq_file to write data to.
  @v: Unused parameter.
  This debugfs entry shows the state of the given endpoint (one is
  registered for each available).
 first show the register state 
  dwc2_hsotg_create_debug - create debugfs directory and files
  @hsotg: The driver state
  Create the debugfs files to allow the user to get information
  about the state of the system. The directory name is created
  with the same name as the device itself, in case we end up
  with multiple blocks in future systems.
 create general state file 
 Create one file for each out endpoint 
 Create one file for each in endpoint. EP0 is handled with out eps 
 dwc2_hsotg_delete_debug is removed as cleanup in done in dwc2_debugfs_exit 
	
	  Accessing registers like this can trigger mode mismatch interrupt.
	  However, according to dwc2 databook, the register access, in this
	  case, is completed on the processor bus but is ignored by the core
	  and does not affect its operation.
 Omit GRXSTSP 
 Add gadget debugfs nodes 
 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
  hcd_ddma.c - DesignWare HS OTG Controller descriptor DMA routines
  Copyright (C) 2004-2013 Synopsys, Inc.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation andor other materials provided with the distribution.
  3. The names of the above-listed copyright holders may not be used
     to endorse or promote products derived from this software without
     specific prior written permission.
  ALTERNATIVELY, this software may be distributed under the terms of the
  GNU General Public License ("GPL") as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any
  later version.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  This file contains the Descriptor DMA implementation for Host mode
 already enabled 
 already disabled 
  ActivatesDeactivates FrameList entries for the channel based on endpoint
  servicing period
	
	  Sync frame list since controller will access it if periodic
	  channel is currently enabled.
 TODO - check this 
	
	  The condition is added to prevent double cleanup try in case of
	  device disconnect. See channel cleanup in dwc2_hcd_disconnect().
  dwc2_hcd_qh_init_ddma() - Initializes a QH structure's Descriptor DMA
  related members
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    The QH to init
  @mem_flags: Indicates the type of memory allocation
  Return: 0 if successful, negative error code otherwise
  Allocates memory for the descriptor list. For the first periodic QH,
  allocates memory for the FrameList and enables periodic scheduling.
 Enable periodic schedule on first periodic QH 
  dwc2_hcd_qh_free_ddma() - Frees a QH structure's Descriptor DMA related
  members
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    The QH to free
  Frees descriptor list memory associated with the QH. If QH is periodic and
  the last, frees FrameList memory and disables periodic scheduling.
	
	  Channel still assigned due to some reasons.
	  Seen on Isoc URB dequeue. Channel halted but no subsequent
	  ChHalted interrupt to release the channel. Afterwards
	  when it comes here from endpoint disable routine
	  channel remains assigned.
 Descriptor set (8 descriptors) index which is 8-aligned 
  Determine starting frame for Isochronous transfer.
  Few frames skipped to prevent race condition with HC.
	
	  next_active_frame is always frame number (not uFrame) both in FS
	  and HS!
	
	  skip_frames is used to limit activated descriptors number
	  to avoid the situation when HC services the last activated
	  descriptor firstly.
	  Example for FS:
	  Current frame is 1, scheduled frame is 3. Since HC always fetches
	  the descriptor corresponding to curr_frame+1, the descriptor
	  corresponding to frame 2 will be fetched. If the number of
	  descriptors is max=64 (or greather) the list will be fully programmed
	  with Active descriptors and it is possible case (rare) that the
	  latest descriptor(considering rollback) corresponding to frame 2 will
	  be serviced first. HS case is more probable because, in fact, up to
	  11 uframes (16 in the code) may be skipped.
		
		  Consider uframe counter also, to start xfer asap. If half of
		  the frame elapsed skip 2 frames otherwise just 1 frame.
		  Starting descriptor index must be 8-aligned, so if the
		  current frame is near to complete the next one is skipped as
		  well.
		
		  Two frames are skipped for FS - the current and the next.
		  But for descriptor programming, 1 frame (descriptor) is
		  enough, see example above.
  Calculate initial descriptor index for isochronous transfer based on
  scheduled frame
	
	  With current ISOC processing algorithm the channel is being released
	  when no more QTDs in the list (qh->ntd == 0). Thus this function is
	  called only when qh->ntd == 0 and qh->channel == 0.
	 
	  So qh->channel != NULL branch is not used and just not removed from
	  the source file. It is required for another possible approach which
	  is, do not disable and release the channel when ISOC session
	  completed, just move QH to inactive schedule until new QTD arrives.
	  On new QTD, the QH moved back to 'ready' schedule, starting frame and
	  therefore starting desc_index are recalculated. In this case channel
	  is released only on ep_disable.
	
	  Calculate starting descriptor index. For INTERRUPT endpoint it is
	  always 0.
		
		  Calculate initial descriptor index based on FrameList current
		  bitmap and servicing period
 Set active bit 
 Set IOC for each descriptor corresponding to last frame of URB 
	
	  Ensure current frame number didn't overstep last scheduled
	  descriptor. If it happens, the only way to recover is to move
	  qh->td_last to current frame number + 1.
	  So that next isoc descriptor will be scheduled on frame number + 1
	  and not on a past frame.
 Set IOC for last descriptor if descriptor list is full 
	
	  Set IOC bit only for one descriptor. Always try to be ahead of HW
	  processing, i.e. on IOC generation driver activates next descriptor
	  but core continues to process descriptors following the one with IOC
	  set.
		
		  Move IOC "up". Required even if there is only one QTD
		  in the list, because QTDs might continue to be queued,
		  but during the activation it was only one queued.
		  Actually more than one QTD might be in the list if this
		  function called from XferCompletion - QTDs was queued during
		  HW processing of the previous descriptor chunk.
		
		  Set the IOC for the latest descriptor if either number of
		  descriptors is not greater than threshold or no more new
		  descriptors activated
 Need 1 packet for transfer length of 0 
 Always program an integral # of packets for IN transfers 
	
	  Last (or only) descriptor of IN transfer with actual size less
	  than MaxPacket
	
	  Start with chan->xfer_dma initialized in assign_and_init_hc(), then
	  if SG transfer consists of multiple URBs, this pointer is re-assigned
	  to the buffer of the currently processed QTD. For non-SG request
	  there is always one QTD active.
 SG request - more than 1 QTD 
  dwc2_hcd_start_xfer_ddma() - Starts a transfer in Descriptor DMA mode
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    The QH to init
  Return: 0 if successful, negative error code otherwise
  For Control and Bulk endpoints, initializes descriptor list and starts the
  transfer. For Interrupt and Isochronous endpoints, initializes descriptor
  list then updates FrameList, marking appropriate entries as active.
  For Isochronous endpoints the starting descriptor index is calculated based
  on the scheduled frame, but only on the first transfer descriptor within a
  session. Then the transfer is started via enabling the channel.
  For Isochronous endpoints the channel is not halted on XferComplete
  interrupt so remains assigned to the endpoint(QH) until session is done.
 Channel is already assigned 
			
			  Always set to max, instead of actual size. Otherwise
			  ntd will be changed with channel being enabled. Not
			  recommended.
 Enable channel only once for ISOC 
		
		  XactError, or unable to complete all the transactions
		  in the scheduled micro-frameframe, both indicated by
		  HOST_DMA_STS_PKTERR
 Success 
		
		  urb->status is not used for isoc transfers here. The
		  individual frame_desc status are used instead.
		
		  This check is necessary because urb_dequeue can be called
		  from urb complete callback (sound driver for example). All
		  pending URBs are dequeued there, so no need for further
		  processing.
 Stop if IOC requested descriptor reached 
		
		  Channel is halted in these error cases, considered as serious
		  issues.
		  Complete all URBs marking all frames as failed, irrespective
		  whether some of the descriptors (frames) succeeded or not.
		  Pass error code to completion routine as well, to update
		  urb->status, some of class drivers might use it to stop
		  queing transfer requests.
		
		  Ensure idx corresponds to descriptor where first urb of this
		  qtd was added. In fact, during isoc desc init, dwc2 may skip
		  an index if current frame number is already over this index.
 rc == DWC2_CMPL_STOP 
				
				  For Control Data stage do not set urb->status
				  to 0, to prevent URB callback. Set it when
				  Status phase is done. See below.
 No handling for SETUP stage 
 BULK and INTR 
				
				  Last descriptor for Control data stage which
				  is not completed yet
		
		  Resetting the data toggle for bulk and interrupt endpoints
		  in case of stall. See handle_hc_stall_intr().
			
			  Got a NYET on the last transaction of the transfer.
			  It means that the endpoint should be in the PING
			  state at the beginning of the next transfer.
  dwc2_hcd_complete_xfer_ddma() - Scans the descriptor list, updates URB's
  status and calls completion routine for the URB if it's done. Called from
  interrupt handlers.
  @hsotg:       The HCD state structure for the DWC OTG controller
  @chan:        Host channel the transfer is completed on
  @chnum:       Index of Host channel registers
  @halt_status: Reason the channel is being halted or just XferComplete
                for isochronous transfers
  Releases the channel to be used by other transfers.
  In case of Isochronous endpoint the channel is not halted until the end of
  the session, i.e. QTD list is empty.
  If periodic channel released the FrameList is updated accordingly.
  Calls transaction selection routines to activate pending transfers.
 Release the channel if halted or session completed 
			
			  Kill all remainings QTDs since channel has been
			  halted.
 Halt the channel if session completed 
 Keep in assigned schedule to continue transfer 
			
			  If channel has been halted during giveback of urb
			  then prevent any new scheduling.
		
		  Todo: Consider the case when period exceeds FrameList size.
		  Frame Rollover interrupt should be used.
		
		  Scan descriptor list to complete the URB(s), then release
		  the channel
			
			  Add back to inactive non-periodic schedule on normal
			  completion
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2011 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Copyright 2008 Openmoko, Inc.
  Copyright 2008 Simtec Electronics
       Ben Dooks <ben@simtec.co.uk>
       http:armlinux.simtec.co.uk
  S3C USB2.0 High-speed  OtG driver
 conversion functions 
 forward declaration of functions 
  using_dma - return the DMA status of the driver.
  @hsotg: The driver state.
  Return true if we're using DMA.
  Currently, we have the DMA support code worked into everywhere
  that needs it, but the AMBA DMA implementation in the hardware can
  only DMA from 32bit aligned addresses. This means that gadgets such
  as the CDC Ethernet cannot work as they often pass packets which are
  not 32bit aligned.
  Unfortunately the choice to use DMA or not is global to the controller
  and seems to be only settable when the controller is being put through
  a core reset. This means we either need to fix the gadgets to take
  account of DMA alignment, or add bounce buffers (yuerk).
  g_using_dma is set depending on dts flag.
  using_desc_dma - return the descriptor DMA status of the driver.
  @hsotg: The driver state.
  Return true if we're using descriptor DMA.
  dwc2_gadget_incr_frame_num - Increments the targeted frame number.
  @hs_ep: The endpoint
  This function will also check if the frame number overruns DSTS_SOFFN_LIMIT.
  If an overrun occurs it will wrap the value and set the frame_overrun flag.
  dwc2_gadget_dec_frame_num_by_one - Decrements the targeted frame number
                                     by one.
  @hs_ep: The endpoint.
  This function used in service interval based scheduling flow to calculate
  descriptor frame number filed value. For service interval mode frame
  number in descriptor should point to last (u)frame in the interval.
  dwc2_hsotg_en_gsint - enable one or more of the general interrupt
  @hsotg: The device state
  @ints: A bitmask of the interrupts to enable
  dwc2_hsotg_disable_gsint - disable one or more of the general interrupt
  @hsotg: The device state
  @ints: A bitmask of the interrupts to enable
  dwc2_hsotg_ctrl_epint - enabledisable an endpoint irq
  @hsotg: The device state
  @ep: The endpoint index
  @dir_in: True if direction is in.
  @en: The enable value, true to enable
  Set or clear the mask for an individual endpoint's interrupt
  request.
  dwc2_hsotg_tx_fifo_count - return count of TX FIFOs in device mode
  @hsotg: Programming view of the DWC_otg controller
 In dedicated FIFO mode we need count of IN EPs 
 In shared FIFO mode we need count of Periodic IN EPs 
  dwc2_hsotg_tx_fifo_total_depth - return total FIFO depth available for
  device mode TX FIFOs
  @hsotg: Programming view of the DWC_otg controller
 Get Endpoint Info Control block size in DWORDs. 
  dwc2_gadget_wkup_alert_handler - Handler for WKUP_ALERT interrupt
  @hsotg: Programming view of the DWC_otg controller
  dwc2_hsotg_tx_fifo_average_depth - returns average depth of device mode
  TX FIFOs
  @hsotg: Programming view of the DWC_otg controller
  dwc2_hsotg_init_fifo - initialise non-periodic FIFOs
  @hsotg: The device instance.
 Reset fifo map if not correctly cleared during previous session 
 set RXNPTX FIFO sizes 
	
	  arange all the rest of the TX FIFOs, as some versions of this
	  block have overlapping default addresses. This also ensures
	  that if the settings have been changed, then they are set to
	  known values.
 start at the end of the GNPTXFSIZ, rounded up 
	
	  Configure fifos sizes from provided configuration and assign
	  them to endpoints dynamically according to maxpacket size value of
	  given endpoint.
	
	  according to p428 of the design guide, we need to ensure that
	  all fifos are flushed before continuing
 wait until the fifos are both flushed 
  dwc2_hsotg_ep_alloc_request - allocate USB rerequest structure
  @ep: USB endpoint to allocate request for.
  @flags: Allocation flags
  Allocate a new USB request structure appropriate for the specified endpoint
  is_ep_periodic - return true if the endpoint is in periodic mode.
  @hs_ep: The endpoint to query.
  Returns true if the endpoint is in periodic mode, meaning it is being
  used for an Interrupt or ISO transfer.
  dwc2_hsotg_unmap_dma - unmap the DMA memory being used for the request
  @hsotg: The device state.
  @hs_ep: The endpoint for the request
  @hs_req: The request being processed.
  This is the reverse of dwc2_hsotg_map_dma(), called for the completion
  of a request to ensure the buffer is ready for access by the caller.
  dwc2_gadget_alloc_ctrl_desc_chains - allocate DMA descriptor chains
  for Control endpoint
  @hsotg: The device state.
  This function will allocate 4 descriptor chains for EP 0: 2 for
  Setup stage, per one for IN and OUT datastatus transactions.
  dwc2_hsotg_write_fifo - write packet Data to the TxFIFO
  @hsotg: The controller state.
  @hs_ep: The endpoint we're going to write for.
  @hs_req: The request to write data for.
  This is called when the TxFIFO has some space in it to hold a new
  transmission and we have something to give it. The actual setup of
  the data size is done elsewhere, so all we have to do is to actually
  write the data.
  The return value is zero if there is more space (or nothing was done)
  otherwise -ENOSPC is returned if the FIFO space was used up.
  This routine is only needed for PIO
 if there's nothing to write, get out early 
		
		  work out how much data was loaded so we can calculate
		  how much data is left in the fifo.
		
		  if shared fifo, we cannot write anything until the
		  previous data has been completely sent.
 how much of the data has moved 
 how much data is left in the fifo 
 fifo size is in 32bit quantities. 
	
	  limit to 512 bytes of data, it seems at least on the non-periodic
	  FIFO, requests of >512 cause the endpoint to get stuck with a
	  fragment of the end of the transfer in it.
	
	  limit the write to one max-packet size worth of data, but allow
	  the transfer to return that it did not run out of fifo space
	  doing it.
 it's needed only when we do not use dedicated fifos 
 see if we can write data 
		
		  Round the write down to an
		  exact number of packets.
		 
		  Note, we do not currently check to see if we can ever
		  write a full packet or not to the FIFO.
		
		  enable correct FIFO interrupt to alert us when there
		  is more room left.
 it's needed only when we do not use dedicated fifos 
  get_ep_limit - get the maximum data legnth for this endpoint
  @hs_ep: The endpoint
  Return the maximum data that can be queued in one go on a given endpoint
  so that transfers that are too long can be split.
 we made the constant loading easier above by using +1 
	
	  constrain by packet count if maxpktspktsize is greater
	  than the length register size.
  dwc2_hsotg_read_frameno - read current frame number
  @hsotg: The device instance
  Return the current frame number
  dwc2_gadget_get_chain_limit - get the maximum data payload value of the
  DMA descriptor chain prepared for specific endpoint
  @hs_ep: The endpoint
  Return the maximum data that can be queued in one go on a given endpoint
  depending on its descriptor chain capacity so that transfers that
  are too long can be split.
 Interrupt OUT EP with mps not multiple of 4 
  dwc2_gadget_get_desc_params - get DMA descriptor parameters.
  @hs_ep: The endpoint
  @mask: RXTX bytes mask to be defined
  Returns maximum data payload for one descriptor after analyzing endpoint
  characteristics.
  DMA descriptor transfer bytes limit depends on EP type:
  Control out - MPS,
  Isochronous - descriptor rxtx bytes bitfield limit,
  Control InBulkInterrupt - multiple of mps. This will allow to not
  have concatenations from various descriptors within one packet.
  Interrupt OUT - if mps not multiple of 4 then a single packet corresponds
  to a single descriptor.
  Selects corresponding mask for RXTX bytes as well.
 Round down desc_size to be mps multiple 
 Interrupt OUT EP with mps not multiple of 4 
  dwc2_gadget_config_nonisoc_xfer_ddma - prepare non ISOC DMA desc chain.
  @hs_ep: The endpoint
  @ureq: Request to transfer
  @offset: offset in bytes
  @len: Length of the transfer
  This function will iterate over descriptor chain and fill its entries
  with corresponding information based on transfer data.
 non-DMA sg buffer 
 DMA sg buffer 
  dwc2_gadget_fill_isoc_desc - fills next isochronous descriptor in chain.
  @hs_ep: The isochronous endpoint.
  @dma_buff: usb requests dma buffer.
  @len: usb request transfer length.
  Fills next free descriptor with the data of the arrived usb request,
  frame info, sets Last and IOC bits increments next_desc. If filled
  descriptor is not the first one, removes L bit from the previous descriptor
  status.
 Check if descriptor chain full 
 Clear L bit of previous desc if more than one entries in the chain 
 Increment frame number by interval for IN 
 Update index of last configured entry in the chain 
  dwc2_gadget_start_isoc_ddma - start isochronous transfer in DDMA
  @hs_ep: The isochronous endpoint.
  Prepare descriptor chain for isochronous endpoints. Afterwards
  write DMA address to HW and enable the endpoint.
 Initialize descriptor chain by Host Busy status 
 write descriptor chain address to control register 
  dwc2_hsotg_start_req - start a USB request from an endpoint's queue
  @hsotg: The controller state.
  @hs_ep: The endpoint to process a request for
  @hs_req: The request to start.
  @continuing: True if we are doing more for the current request.
  Start the given request running by setting the endpoint registers
  appropriately, and writing any data to the FIFOs.
 If endpoint is stalled, we will restart request later 
 round down to multiple of packets 
 send one packet if length is zero. 
	
	  zero length packet should be programmed on its own and should not
	  be counted in DIEPTSIZ.PktCnt with other packets.
 Test if zlp is actually required. 
 store the request as the current one we're doing 
 Adjust length: EP0 - MPS, other OUT EPs - multiple of MPS 
 Fill DDMA chain entries 
 write descriptor chain address to control register 
 write size  packets 
			
			  write DMA address to control register, buffer
			  already synced by dwc2_hsotg_ep_queue().
 ensure ep enabled 
 For Setup request do not clear NAK 
 clear NAK set by core 
	
	  set these, it seems that DMA support increments past the end
	  of the packet buffer so we need to calculate the length from
	  this information.
 set these anyway, we may need them for non-periodic in 
	
	  Note, trying to clear the NAK here causes problems with transmit
	  on the S3C6400 ending up with the TXFIFO becoming full.
 check ep is enabled 
 enable ep interrupts 
  dwc2_hsotg_map_dma - map the DMA memory being used for the request
  @hsotg: The device state.
  @hs_ep: The endpoint the request is on.
  @req: The request being processed.
  We've been asked to queue a request, so ensure that the memory buffer
  is correctly setup for DMA. If we've been passed an extant DMA address
  then ensure the buffer has been synced to memory. If our buffer has no
  DMA memory, then we map the memory and mark our request to allow us to
  cleanup on completion.
 If dma is not being used or buffer is aligned 
 Save actual buffer 
 If dma is not being used or buffer was aligned 
 Copy data from bounce buffer on successful out transfer 
 Free bounce buffer 
  dwc2_gadget_target_frame_elapsed - Checks target frame
  @hs_ep: The driver endpoint to check
  Returns 1 if targeted frame elapsed. If returned 1 then we need to drop
  corresponding transfer.
  dwc2_gadget_set_ep0_desc_chain - Set EP's desc chain pointers
  @hsotg: The driver state
  @hs_ep: the ep descriptor chain is for
  Called to update EP0 structure's pointers depend on stage of
  control transfer.
 Prevent new request submission when controller is suspended 
 initialise status of the request 
 Don't queue ISOC request if length greater than mpsmc 
	 In DDMA mode for ISOC's don't queue request if length greater
	  than descriptor limits.
 if we're using DMA, sync the buffers as necessary 
 If using descriptor DMA configure EP0 descriptor chain pointers 
	
	  Handle DDMA isochronous transfers separately - just add new entry
	  to the descriptor chain.
	  Transfer will be started once SW gets either one of NAK or
	  OutTknEpDis interrupts.
 Change EP direction if status phase request is after data out 
 Update current frame number value. 
			 Update current frame number value once more as it
			  changes here.
  dwc2_hsotg_complete_oursetup - setup completion callback
  @ep: The endpoint the request was on.
  @req: The request completed.
  Called on completion of any requests the driver itself
  submitted that need cleaning up.
  ep_from_windex - convert control wIndex value to endpoint
  @hsotg: The driver state.
  @windex: The control request wIndex field (in host order).
  Convert the given wIndex into a pointer to an driver endpoint
  structure, or return NULL if it is not a valid endpoint.
  dwc2_hsotg_set_test_mode - Enable usb Test Modes
  @hsotg: The driver state.
  @testmode: requested usb test mode
  Enable usb Test Mode requested by the Host.
  dwc2_hsotg_send_reply - send reply to control request
  @hsotg: The device state
  @ep: Endpoint 0
  @buff: Buffer for request
  @length: Length of reply.
  Create a request and queue it on the given endpoint. This is useful as
  an internal method of sending replies to certain control requests, etc.
	
	  zero flag is for sending zlp in DATA IN stage. It has no impact on
	  STATUS stage.
  dwc2_hsotg_process_req_status - process request GET_STATUS
  @hsotg: The device state
  @ctrl: USB control request
 currently, the data result should be zero 
  get_ep_head - return the first request on the endpoint
  @hs_ep: The controller endpoint to get
  Get the first request on the endpoint.
  dwc2_gadget_start_next_request - Starts next request from ep queue
  @hs_ep: Endpoint structure
  If queue is empty and EP is ISOC-OUT - unmasks OUTTKNEPDIS which is masked
  in its handler. Hence we need to unmask it here to be able to do
  resynchronization.
  dwc2_hsotg_process_req_feature - process request {SET,CLEAR}_FEATURE
  @hsotg: The device state
  @ctrl: USB control request
			
			  we have to complete all requests for ep if it was
			  halted, and the halt was cleared by CLEAR_FEATURE
				
				  If we have request in progress,
				  then complete it
 If we have pending request, then start it 
  dwc2_hsotg_stall_ep0 - stall ep0
  @hsotg: The device state
  Set stall for ep0 as response for setup request.
	
	  DxEPCTL_Stall will be cleared by EP once it has
	  taken effect, so no need to clear later.
	 
	   complete won't be called, so we enqueue
	   setup request here
  dwc2_hsotg_process_control - process a control request
  @hsotg: The device state
  @ctrl: The control request received
  The controller has received the SETUP phase of a control request, and
  needs to work out what to do next (and whether to pass it on to the
  gadget driver).
 as a fallback, try delivering it to the driver to deal with 
	
	  the request is either unhandlable, or is not formatted correctly
	  so respond with a STALL for the status stage to indicate failure.
  dwc2_hsotg_complete_setup - completion of a setup transfer
  @ep: The endpoint the request was on.
  @req: The request completed.
  Called on completion of any requests the driver itself submitted for
  EP0 setup packets
  dwc2_hsotg_enqueue_setup - start a request for EP0 packets
  @hsotg: The device state.
  Enqueue a request on EP0 if necessary to received any SETUP packets
  received from the host.
		
		  Don't think there's much we can do other than watch the
		  driver fail.
 Not specific buffer needed for ep0 ZLP 
 clear NAK set by core 
 ensure ep enabled 
  dwc2_hsotg_complete_request - complete a request given to us
  @hsotg: The device state.
  @hs_ep: The endpoint the request was on.
  @hs_req: The request to complete.
  @result: The result code (0 => Ok, otherwise errno)
  The given request has finished, so call the necessary completion
  if it has one and then look to see if we can start a new request
  on the endpoint.
  Note, expects the ep to already be locked as appropriate.
	
	  only replace the status if we've not already set an error
	  from a previous transaction
	
	  call the complete request with the locks off, just in case the
	  request tries to queue more work for this endpoint.
 In DDMA don't need to proceed to starting of next ISOC request 
	
	  Look to see if there is anything else to do. Note, the completion
	  of the previous request may have caused a new request to be started
	  so be careful when doing this.
  dwc2_gadget_complete_isoc_request_ddma - complete an isoc request in DDMA
  @hs_ep: The endpoint the request was on.
  Get first request from the ep queue, determine descriptor on which complete
  happened. SW discovers which descriptor currently in use by HW, adjusts
  dma_address and calculates index of completed descriptor based on the value
  of DEPDMA register. Update actual length of request, giveback to gadget.
 Process only descriptors with buffer status set to DMA done 
 Check completion status 
			 Adjust actual len for ISOC Out if len is
			  not align of 4
 Set actual frame number for completed transfers 
  dwc2_gadget_handle_isoc_bna - handle BNA interrupt for ISOC.
  @hs_ep: The isochronous endpoint.
  If EP ISOC OUT then need to flush RX FIFO to remove source of BNA
  interrupt. Reset target frame and next_desc to allow to start
  ISOC's on NAK interrupt for IN direction or on OUTTKNEPDIS
  interrupt for OUT direction.
  dwc2_hsotg_rx_data - receive data from the FIFO for an endpoint
  @hsotg: The device state.
  @ep_idx: The endpoint index for the data
  @size: The size of data in the fifo, in bytes
  The FIFO status shows there is data to read from the FIFO for a given
  endpoint, so sort out whether we need to read the data into a request
  that has been made for that endpoint.
 dump the data from the FIFO, we've nothing we can do 
		
		  more data appeared than we where willing
		  to deal with in this request.
 currently we don't deal this 
	
	  note, we might over-write the buffer end by 3 bytes depending on
	  alignment of the data.
  dwc2_hsotg_ep0_zlp - sendreceive zero-length packet on control endpoint
  @hsotg: The device instance
  @dir_in: If IN zlp
  Generate a zero-length IN packet request for terminating a SETUP
  transaction.
  Note, since we don't write any data to the TxFIFO, then it is
  currently believed that we do not need to wait for any space in
  the TxFIFO.
 eps_out[0] is used in both directions 
  dwc2_gadget_get_xfersize_ddma - get transferred bytes amount from desc
  @hs_ep - The endpoint on which transfer went
  Iterate over endpoints descriptor chain and get info on bytes remained
  in DMA descriptors after transfer has completed. Used for non isoc EPs.
 Interrupt OUT EP with mps not multiple of 4 
  dwc2_hsotg_handle_outdone - handle receiving OutDoneSetupDone from RXFIFO
  @hsotg: The device instance
  @epnum: The endpoint received from
  The RXFIFO has delivered an OutDone event, which means that the data
  transfer for an OUT endpoint has been completed, either by a short
  packet or by the finish of a transfer.
		
		  Calculate the size of the transfer by checking how much
		  is left in the endpoint size register and then working it
		  out from the amount we loaded for the transfer.
		 
		  We need to do this as DMA pointers are always 32bit aligned
		  so may overshootundershoot the transfer.
 if there is more request to do, schedule new transfer 
		
		  todo - what should we return here? there's no one else
		  even bothering to check the status.
 DDMA IN status phase will start from StsPhseRcvd interrupt 
 Move to STATUS IN 
 Set actual frame number for completed transfers 
  dwc2_hsotg_handle_rx - RX FIFO has data
  @hsotg: The device instance
  The IRQ handler has detected that the RX FIFO has some data in it
  that requires processing, so find out what is in there and do the
  appropriate read.
  The RXFIFO is a true FIFO, the packets coming out are still in packet
  chunks, so if you have x packets received on an endpoint you'll get x
  FIFO events delivered, each with a packet's worth of data in it.
  When using DMA, we should not be processing events from the RXFIFO
  as the actual data should be sent to the memory directly and we turn
  on the completion interrupts to get notifications of transfer completion.
		
		  Call dwc2_hsotg_handle_outdone here if it was not called from
		  GRXSTS_PKTSTS_OUTDONE. That is, if the core didn't
		  generate GRXSTS_PKTSTS_OUTDONE for setup packet.
  dwc2_hsotg_ep0_mps - turn max packet size into register setting
  @mps: The maximum packet size in bytes.
 bad max packet size, warn and return invalid result 
  dwc2_hsotg_set_ep_maxpacket - set endpoint's max-packet field
  @hsotg: The driver state.
  @ep: The index number of the endpoint
  @mps: The maximum packet size in bytes
  @mc: The multicount value
  @dir_in: True if direction is in.
  Configure the maximum packet size for the given endpoint, updating
  the hardware control registers to reflect this.
 EP0 is a special case 
  dwc2_hsotg_txfifo_flush - flush Tx FIFO
  @hsotg: The driver state
  @idx: The index for the endpoint (0..15)
 wait until the fifo is flushed 
  dwc2_hsotg_trytx - check to see if anything needs transmitting
  @hsotg: The driver state
  @hs_ep: The driver endpoint to check.
  Check to see if there is a request that has data to send, and if so
  make an attempt to write data into the FIFO.
		
		  if request is not enqueued, we disable interrupts
		  for endpoints, excepting ep0
  dwc2_hsotg_complete_in - complete IN transfer
  @hsotg: The device state.
  @hs_ep: The endpoint that has just completed.
  An IN transfer has been completed, update the transfer's state and then
  call the relevant completion routines.
 Finish ZLP handling for IN EP0 transactions 
		
		  While send zlp for DWC2_EP0_STATUS_IN EP direction was
		  changed to IN. Change back to complete OUT transfer request
	
	  Calculate the size of the transfer by checking how much is left
	  in the endpoint size register and then working it out from
	  the amount we loaded for the transfer.
	 
	  We do this even for DMA, as the transfer may have incremented
	  past the end of the buffer (DMA transfers are always 32bit
	  aligned).
 Zlp for all endpoints in non DDMA, for ep0 only in DATA IN stage 
 transfer will be completed on next complete interrupt 
 Move to STATUS OUT 
 Set actual frame number for completed transfers 
  dwc2_gadget_read_ep_interrupts - reads interrupts for given ep
  @hsotg: The device state.
  @idx: Index of ep.
  @dir_in: Endpoint direction 1-in 0-out.
  Reads for endpoint with given index and direction, by masking
  epint_reg with coresponding mask.
  dwc2_gadget_handle_ep_disabled - handle DXEPINT_EPDISBLD
  @hs_ep: The endpoint on which interrupt is asserted.
  This interrupt indicates that the endpoint has been disabled per the
  application's request.
  For IN endpoints flushes txfifo, in case of BULK clears DCTL_CGNPINNAK,
  in case of ISOC completes current request.
  For ISOC-OUT endpoints completes expired requests. If there is remaining
  request starts it.
 Update current frame number value. 
  dwc2_gadget_handle_out_token_ep_disabled - handle DXEPINT_OUTTKNEPDIS
  @ep: The endpoint on which interrupt is asserted.
  This is starting point for ISOC-OUT transfer, synchronization done with
  first out token received from host while corresponding EP is disabled.
  Device does not know initial frame in which out token will come. For this
  HW generates OUTTKNEPDIS - out token is received while EP is disabled. Upon
  getting this interrupt SW starts calculation for next transfer frame.
 Start first ISO Out 
 Update current frame number value. 
  dwc2_gadget_handle_nak - handle NAK interrupt
  @hs_ep: The endpoint on which interrupt is asserted.
  This is starting point for ISOC-IN transfer, synchronization done with
  first IN token received from host while corresponding EP is disabled.
  Device does not know when first one token will arrive from host. On first
  token arrival HW generates 2 interrupts: 'in token received while FIFO empty'
  and 'NAK'. NAK interrupt for ISOC-IN means that token has arrived and ZLP was
  sent in response to that as there was no data in FIFO. SW is basing on this
  interrupt to obtain frame in which token has come and then based on the
  interval calculates next frame for transfer.
			 In service interval mode target_frame must
			  be set to last (u)frame of the service interval.
				 Set target_frame to the first (u)frame of
				  the service interval
				 Set target_frame to the last (u)frame of
				  the service interval
 Update current frame number value. 
  dwc2_hsotg_epint - handle an inout endpoint interrupt
  @hsotg: The driver state
  @idx: The index for the endpoint (0..15)
  @dir_in: Set if this is an IN endpoint
  Process and clear any interrupt pending for an individual endpoint
 Clear endpoint interrupts 
 Don't process XferCompl interrupt if it is a setup packet 
	
	  Don't process XferCompl interrupt in DDMA if EP0 is still in SETUP
	  stage and xfercomplete was generated without SETUP phase done
	  interrupt. SW should parse received setup packet only after host's
	  exit from setup phase of control transfer.
 In DDMA handle isochronous requests separately 
			
			  We get OutDone from the FIFO, so we only
			  need to look at completing IN requests here
			  if operating slave mode
			
			  We're using DMA, we need to fire an OutDone here
			  as we ignore the RXFIFO.
 Setup or Timeout 
			
			  this is the notification we've received a
			  setup packet. In non-DMA mode we'd get this
			  from the RXFIFO, instead we need to process
			  the setup here.
 Safety check EP0 state when STSPHSERCVD asserted 
 Move to STATUS IN for DDMA 
				 In case of 3 stage Control Write with delayed
				  status, when Status IN transfer started
				  before STSPHSERCVD asserted, NAKSTS bit not
				  cleared by CNAK in dwc2_hsotg_start_req()
				  function. Clear now NAKSTS to allow complete
				  transfer.
 not sure if this is important, but we'll clear it anyway 
 this probably means something bad is happening 
 FIFO has space or is empty (see GAHBCFG) 
  dwc2_hsotg_irq_enumdone - Handle EnumDone interrupt (enumeration done)
  @hsotg: The device state.
  Handle updating the device settings after the enumeration phase has
  been completed.
	
	  This should signal the finish of the enumeration phase
	  of the USB handshaking, so we should now know what rate
	  we connected at.
	
	  note, since we're limited by the size of transfer on EP0, and
	  it seems IN transfers must be a even number of packets we do
	  not advertise a 64byte MPS on EP0.
 catch both EnumSpd_FS and EnumSpd_FS48 
		
		  note, we don't actually support LS in this driver at the
		  moment, and the documentation seems to imply that it isn't
		  supported by the PHYs on some of the devices.
	
	  we should now know the maximum packet size for an
	  endpoint, so set the endpoints to a default value.
 Initialize ep0 for both in and out directions 
 ensure after enumeration our EP0 is active 
  kill_all_requests - remove all requests from the endpoint's queue
  @hsotg: The device state.
  @ep: The endpoint the requests may be on.
  @result: The result code to use.
  Go through the requests on the given endpoint and mark them
  completed with the given result code.
  dwc2_hsotg_disconnect - disconnect service
  @hsotg: The device state.
  The device has been disconnected. Remove all current
  transactions and signal the gadget driver that this
  has happened.
 all endpoints should be shutdown 
  dwc2_hsotg_irq_fifoempty - TX FIFO empty interrupt handler
  @hsotg: The device state:
  @periodic: True if this is a periodic FIFO interrupt
 look through for any more data to transmit 
 IRQ flags which will trigger a retry around the IRQ loop 
  dwc2_hsotg_core_init_disconnected - issue softreset to the core
  @hsotg: The device state
  @is_usb_reset: Usb resetting flag
  Issue a soft reset to the core, and await the core finishing it.
 Kill any ep0 requests as controller will be reinitialized 
 all endpoints should be shutdown 
	
	  we must now enable ep0 ready for host detection and then
	  set configuration.
 keep other bits untouched (so e.g. forced modes are not lost) 
 remove the HNPSRP and set the PHY 
 Clear any pending OTG interrupts 
 Clear any pending interrupts 
 Set DDMA mode support in the core if needed 
	
	  If INTknTXFEmpMsk is enabled, it's important to disable ep interrupts
	  when we have no data to transfer. Otherwise we get being flooded by
	  interrupts.
	
	  don't need XferCompl, we get that from RXFIFO in slave mode. In
	  DMA mode we may need this and StsPhseRcvd.
 Enable BNA interrupt for DDMA 
 Enable Service Interval mode if supported 
 enable in and out endpoint interrupts 
	
	  Enable the RXFIFO when in slave mode, as this is how we collect
	  the data. In DMA mode, we get events from the FIFO but also
	  things we cannot process, so do not use it.
 Enable interrupts for EP0 in and out 
 see openiboot 
	
	  DxEPCTL_USBActEp says RO in manual, but seems to be set by
	  writing to the EPCTL register..
 set to read 1 8byte packet 
 enable, but don't activate EP0in 
 clear global NAKs 
 configure the core to support LPM 
 program GREFCLK register if needed 
 must be at-least 3ms to allow bus to see disconnect 
 set the soft-disconnect bit 
 remove the soft-disconnect and let's go 
  dwc2_gadget_handle_incomplete_isoc_in - handle incomplete ISO IN Interrupt.
  @hsotg: The device state:
  This interrupt indicates one of the following conditions occurred while
  transmitting an ISOC transaction.
  - Corrupted IN Token for ISOC EP.
  - Packet not complete in FIFO.
  The following actions will be taken:
  - Determine the EP
  - Disable EP; when 'Endpoint Disabled' interrupt is received Flush FIFO
 Proceed only unmasked ISOC EPs 
 Clear interrupt 
  dwc2_gadget_handle_incomplete_isoc_out - handle incomplete ISO OUT Interrupt
  @hsotg: The device state:
  This interrupt indicates one of the following conditions occurred while
  transmitting an ISOC transaction.
  - Corrupted OUT Token for ISOC EP.
  - Packet not complete in FIFO.
  The following actions will be taken:
  - Determine the EP
  - Set DCTL_SGOUTNAK and unmask GOUTNAKEFF if target frame elapsed.
 Proceed only unmasked ISOC EPs 
 Unmask GOUTNAKEFF interrupt 
 Clear interrupt 
  dwc2_hsotg_irq - handle device interrupt
  @irq: The IRQ number triggered
  @pw: The pw value when registered the handler.
 This event must be used only if controller is suspended 
 Report disconnection if it is not already done. 
 Reset device address to zero 
 check both FIFOs 
		
		  Disable the interrupt to stop it happening again
		  unless one of these endpoint routines decides that
		  it needs re-enabling
 See note in GINTSTS_NPTxFEmp 
		
		  note, since GINTSTS_RxFLvl doubles as FIFO-not-empty,
		  we need to retry dwc2_hsotg_handle_rx if this is still
		  set.
	
	  these next two seem to crop-up occasionally causing the core
	  to shutdown the USB transfer, so try clearing them and logging
	  the occurrence.
 Mask this interrupt 
 Proceed only unmasked ISOC EPs 
ISOC Ep's only
Non-ISOC EP's
 This interrupt bit is cleared in DXEPINT_EPDISBLD handler 
	
	  if we've had fifo events, we should try and go around the
	  loop again to see if there's any point in returning yet.
 Check WKUP_ALERT interrupt
 Wait for Nak effect 
 Wait for Nak effect 
 Mask GINTSTS_GOUTNAKEFF interrupt 
 Wait for GINTSTS_RXFLVL interrupt 
				
				  Pop GLOBAL OUT NAK status packet from RxFIFO
				  to assert GOUTNAKEFF interrupt
 Wait for global nak to take effect 
 Disable ep 
 Wait for ep to be disabled 
 Clear EPDISBLD interrupt 
 Flush TX FIFO 
 Clear Global In NP NAK in Shared FIFO for non periodic ep 
 Remove global NAKs 
  dwc2_hsotg_ep_enable - enable the given endpoint
  @ep: The USB endpint to configure
  @desc: The USB endpoint descriptor to configure with.
  This is called from the USB gadget code's usb_ep_enable().
 not to be called for EP0 
 ISOC IN in DDMA supported bInterval up to 10 
 High bandwidth ISOC OUT in DDMA not supported 
 note, we handle this here instead of dwc2_hsotg_set_ep_maxpacket 
 Allocate DMA descriptor chain for non-ctrl endpoints 
	
	  mark the endpoint as active, otherwise the core may ignore
	  transactions entirely for this endpoint
 update the endpoint state 
 default, set to non-periodic 
	
	  if the hardware has dedicated fifos, we must give each IN EP
	  a unique tx-fifo even if it is non-periodic.
 Search for smallest acceptable fifo 
 for non control endpoints, set PID to D0 
	 WA for Full speed ISOC IN in DDMA mode.
	  By Clear NAK status of EP, core will send ZLP
	  to IN token and assert NAK interrupt relying
	  on TxFIFO status only
		 The WA applies only to core versions from 2.72a
		  to 4.00a (including both). Also for FS_IOT_1.00a
		  and HS_IOT_1.00a.
 enable the endpoint interrupt 
  dwc2_hsotg_ep_disable - disable given endpoint
  @ep: The endpoint to disable.
 disable endpoint interrupts 
 terminate all requests with shutdown 
  on_list - check request is on the given endpoint
  @ep: The endpoint to check.
  @test: The request to test if it is on the endpoint.
  dwc2_hsotg_ep_dequeue - dequeue given endpoint
  @ep: The endpoint to dequeue.
  @req: The request to be removed from a queue.
 Dequeue already started request 
  dwc2_gadget_ep_set_wedge - set wedge on a given endpoint
  @ep: The endpoint to be wedged.
  dwc2_hsotg_ep_sethalt - set halt on a given endpoint
  @ep: The endpoint to set halt.
  @value: Set or unset the halt.
  @now: If true, stall the endpoint now. Otherwise return -EAGAIN if
        the endpoint is busy processing requests.
  We need to stall the endpoint immediately if request comes from set_feature
  protocol command handler.
 Unmask GOUTNAKEFF interrupt 
 STALL bit will be set in GOUTNAKEFF interrupt handler
  dwc2_hsotg_ep_sethalt_lock - set halt on a given endpoint with lock held
  @ep: The endpoint to set halt.
  @value: Set or unset the halt.
 note, don't believe we have any call for the fifo routines 
  dwc2_hsotg_init - initialize the usb core
  @hsotg: The driver state
 unmask subset of endpoint interrupts 
 Be in disconnected state until gadget is registered 
 setup fifos 
  dwc2_hsotg_udc_start - prepare the udc for work
  @gadget: The usb gadget state
  @driver: The usb gadget driver
  Perform initialization to prepare udc device and driver
  to work.
  dwc2_hsotg_udc_stop - stop the udc
  @gadget: The usb gadget state
  Stop udc hw block and stay tunned for future transmissions
 all endpoints should be shutdown 
  dwc2_hsotg_gadget_getframe - read the frame number
  @gadget: The usb gadget state
  Read the {micro} frame number
  dwc2_hsotg_set_selfpowered - set if device is selfbus powered
  @gadget: The usb gadget state
  @is_selfpowered: Whether the device is self-powered
  Set if the device is self or bus powered.
  dwc2_hsotg_pullup - connectdisconnect the USB PHY
  @gadget: The usb gadget state
  @is_on: Current state of the USB PHY
  ConnectDisconnect the USB PHY pullup
 Don't modify pullup state while in host mode 
 Enable ACG feature in device mode,if supported 
	
	  If controller is in partial power down state, it must exit from
	  that state before being initialized  de-initialized
		
		  No need to check the return value as
		  registers are not being restored.
 Enable ACG feature in device mode,if supported 
  dwc2_hsotg_vbus_draw - report bMaxPower field
  @gadget: The usb gadget state
  @mA: Amount of current
  Report how much power the device may consume to the phy.
  dwc2_hsotg_initep - initialise a single endpoint
  @hsotg: The device state.
  @hs_ep: The endpoint to be initialised.
  @epnum: The endpoint number
  @dir_in: True if direction is in.
  Initialise the given endpoint (as part of the probe and device state
  creation) to give to the gadget driver. Setup the endpoint name, any
  direction information and other state that may be required.
 add to the list of endpoints known by the gadget driver 
	
	  if we're using dma, we need to set the next-endpoint pointer
	  to be something valid.
  dwc2_hsotg_hw_cfg - read HW configuration registers
  @hsotg: Programming view of the DWC_otg controller
  Read the USB core HW configuration registers
 check hardware configuration 
 Add ep0 
 Same dwc2_hsotg_ep is used in both directions for ep0 
 Direction in or both 
 Direction out or both 
  dwc2_hsotg_dump - dump state of the udc
  @hsotg: Programming view of the DWC_otg controller
 show periodic fifo settings 
  dwc2_gadget_init - init function for gadget
  @hsotg: Programming view of the DWC_otg controller
 Dump fifo information 
 hsotg->num_of_eps holds number of EPs other than ep0 
 setup endpoint information 
 allocate EP0 request 
 initialise the endpoints now the core has been initialised 
  dwc2_hsotg_remove - remove function for hsotg driver
  @hsotg: Programming view of the DWC_otg controller
 Enable ACG feature in device mode,if supported 
  dwc2_backup_device_registers() - Backup controller device registers.
  When suspending usb bus, registers needs to be backuped
  if controller power is disabled once suspended.
  @hsotg: Programming view of the DWC_otg controller
 Backup dev regs 
 Backup IN EPs 
 Ensure DATA PID is correctly configured 
 Backup OUT EPs 
 Ensure DATA PID is correctly configured 
  dwc2_restore_device_registers() - Restore controller device registers.
  When resuming usb bus, device registers needs to be restored
  if controller power were disabled.
  @hsotg: Programming view of the DWC_otg controller
  @remote_wakeup: Indicates whether resume is initiated by Device or Host.
  Return: 0 if successful, negative error code otherwise
 Restore dev regs 
 Restore IN EPs 
		 WA for enabled EPx's IN in DDMA mode. On entering to
		  hibernation wrong value read and saved from DIEPDMAx,
		  as result BNA interrupt asserted on hibernation exit
		  by restoring from saved area.
 Restore OUT EPs 
		 WA for enabled EPx's OUT in DDMA mode. On entering to
		  hibernation wrong value read and saved from DOEPDMAx,
		  as result BNA interrupt asserted on hibernation exit
		  by restoring from saved area.
  dwc2_gadget_init_lpm - Configure the core to support LPM in device mode
  @hsotg: Programming view of DWC_otg controller
 Unmask WKUP_ALERT Interrupt 
  dwc2_gadget_program_ref_clk - Program GREFCLK register in device mode
  @hsotg: Programming view of DWC_otg controller
  dwc2_gadget_enter_hibernation() - Put controller in Hibernation.
  @hsotg: Programming view of the DWC_otg controller
  Return non-zero if failed to enter to hibernation.
 Change to L2(suspend) state 
 Set flag to indicate that we are in hibernation 
 Enable interrupts from wake up logic 
 Unmask device mode interrupts in GPWRDN 
 Enable Power Down Clamp 
 Switch off VDD 
 Save gpwrdn register for further usage if stschng interrupt 
  dwc2_gadget_exit_hibernation()
  This function is for exiting from Device mode hibernation by host initiated
  resumereset and device initiated remote-wakeup.
  @hsotg: Programming view of the DWC_otg controller
  @rem_wakeup: indicates whether resume is initiated by Device or Host.
  @reset: indicates whether resume is initiated by Reset.
  Return non-zero if failed to exit from hibernation.
 Clear all pending interupts 
 De-assert Restore 
 Restore GUSBCFG, DCFG and DCTL 
 On USB Reset, reset device address to zero 
 De-assert Wakeup Logic 
 Start Remote Wakeup Signaling 
 Set Device programming done bit 
 Wait for interrupts which must be cleared 
 Clear all pending interupts 
 Restore global registers 
 Restore device registers 
  dwc2_gadget_enter_partial_power_down() - Put controller in partial
  power down.
  @hsotg: Programming view of the DWC_otg controller
  Return: non-zero if failed to enter device partial power down.
  This function is for entering device mode partial power down.
 Backup all registers 
	
	  Clear any pending interrupts since dwc2 will not be able to
	  clear them after entering partial_power_down.
 Put the controller in low power state 
 Set in_ppd flag to 1 as here core enters suspend. 
  dwc2_gadget_exit_partial_power_down() - Exit controller from device partial
  power down.
  @hsotg: Programming view of the DWC_otg controller
  @restore: indicates whether need to restore the registers or not.
  Return: non-zero if failed to exit device partial power down.
  This function is for exiting from device mode partial power down.
 Restore DCFG 
 Set the Power-On Programming done bit 
 Set in_ppd flag to 0 as here core exits from suspend. 
  dwc2_gadget_enter_clock_gating() - Put controller in clock gating.
  @hsotg: Programming view of the DWC_otg controller
  Return: non-zero if failed to enter device partial power down.
  This function is for entering device mode clock gating.
 Set the Phy Clock bit as suspend is received. 
 Set the Gate hclk as suspend is received. 
  dwc2_gadget_exit_clock_gating() - Exit controller from device clock gating.
  @hsotg: Programming view of the DWC_otg controller
  @rem_wakeup: indicates whether remote wake up is enabled.
  This function is for exiting from device mode clock gating.
 Clear the Gate hclk. 
 Phy Clock bit. 
 Set Remote Wakeup Signaling 
 Change to L0 state 
 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
  platform.c - DesignWare HS OTG Controller platform driver
  Copyright (C) Matthijs Kooijman <matthijs@stdin.nl>
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation andor other materials provided with the distribution.
  3. The names of the above-listed copyright holders may not be used
     to endorse or promote products derived from this software without
     specific prior written permission.
  ALTERNATIVELY, this software may be distributed under the terms of the
  GNU General Public License ("GPL") as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any
  later version.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  Check the dr_mode against the module configuration and hardware
  capabilities.
  The hardware, module, and dr_mode, can each be set to host, device,
  or otg. Check that all these values are compatible and adjust the
  value of dr_mode if possible.
                       actual
     HW  MOD dr_mode   dr_mode
   ------------------------------
    HST  HST  any    :  HST
    HST  DEV  any    :  ---
    HST  OTG  any    :  HST
    DEV  HST  any    :  ---
    DEV  DEV  any    :  DEV
    DEV  OTG  any    :  DEV
    OTG  HST  any    :  HST
    OTG  DEV  any    :  DEV
    OTG  OTG  any    :  dr_mode
  dwc2_lowlevel_hw_enable - enable platform lowlevel hw resources
  @hsotg: The driver state
  A wrapper for platform code responsible for controlling
  low-level USB platform resources (phy, clock, regulators)
  dwc2_lowlevel_hw_disable - disable platform lowlevel hw resources
  @hsotg: The driver state
  A wrapper for platform code responsible for controlling
  low-level USB platform resources (phy, clock, regulators)
	
	  Attempt to find a generic PHY, then look for an old style
	  USB PHY and then fall back to pdata
 Clock 
 Regulators 
  dwc2_driver_remove() - Called when the DWC_otg core is unregistered with the
  DWC_otg driver
  @dev: Platform device
  This routine is called, for example, when the rmmod command is executed. The
  device may or may not be electrically present. If it is present, the driver
  stops device processing. Any resources used on behalf of this device are
  freed.
 Exit Hibernation when driver is removed. 
 Exit Partial Power Down when driver is removed. 
 Exit clock gating when driver is removed. 
  dwc2_driver_shutdown() - Called on device shutdown
  @dev: Platform device
  In specific conditions (involving usb hubs) dwc2 devices can create a
  lot of interrupts, even to the point of overwhelming devices running
  at low frequencies. Some devices need to do special clock handling
  at shutdown-time which may bring the system clock below the threshold
  of being able to handle the dwc2 interrupts. Disabling dwc2-irqs
  prevents rebootspoweroffs from getting stuck in such cases.
  dwc2_check_core_endianness() - Returns true if core and AHB have
  opposite endianness.
  @hsotg:	Programming view of the DWC_otg controller.
  dwc2_check_core_version() - Check core version
  @hsotg: Programming view of the DWC_otg controller
	
	  Attempt to ensure this device is really a DWC_otg Controller.
	  Read and verify the GSNPSID register contents. The value should be
	  0x45f4xxxx, 0x5531xxxx or 0x5532xxxx
  dwc2_driver_probe() - Called when the DWC_otg core is bound to the DWC_otg
  driver
  @dev: Platform device
  This routine creates the driver components required to control the device
  (core, HCD, and PCD) and initializes the device. The driver components are
  stored in a dwc2_hsotg structure. A reference to the dwc2_hsotg is saved
  in the device private data. This allows the driver to access the dwc2_hsotg
  structure on subsequent calls to driver methods for this device.
	
	  Use reasonable defaults so platforms don't have to provide these.
	
	  Before performing any core related operations
	  check core version.
	
	  Reset before dwc2_get_hwparams() then it could get power-on real
	  reset value form registers.
 Detect config values from hardware 
	
	  For OTG cores, set the force mode bits to reflect the value
	  of dr_mode. Force mode bits should not be touched at any
	  other time after this.
	
	  If we need PHY for wakeup we must be wakeup capable.
	  When we have a device that can wake without the PHY we
	  can adjust this condition.
 Gadget code manages lowlevel hw on its own 
 Postponed adding a new gadget to the udc class driver list 
 CONFIG_USB_DWC2_PERIPHERAL || CONFIG_USB_DWC2_DUAL_ROLE 
		
		  Need to force the mode to the current mode to avoid Mode
		  Mismatch Interrupt when ID detection will be disabled.
 bypass debounce filter, enable overrides 
 Force A  B session if needed 
 IDVBUS detection startup time 
 Need to restore FORCEDEVMODEFORCEHOSTMODE 
 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
  core.c - DesignWare HS OTG Controller common routines
  Copyright (C) 2004-2013 Synopsys, Inc.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation andor other materials provided with the distribution.
  3. The names of the above-listed copyright holders may not be used
     to endorse or promote products derived from this software without
     specific prior written permission.
  ALTERNATIVELY, this software may be distributed under the terms of the
  GNU General Public License ("GPL") as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any
  later version.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  The Core code provides basic services for accessing and managing the
  DWC_otg hardware. These services are used by both the Host Controller
  Driver and the Peripheral Controller Driver.
  dwc2_backup_global_registers() - Backup global controller registers.
  When suspending usb bus, registers needs to be backuped
  if controller power is disabled once suspended.
  @hsotg: Programming view of the DWC_otg controller
 Backup global regs 
  dwc2_restore_global_registers() - Restore controller global registers.
  When resuming usb bus, device registers needs to be restored
  if controller power were disabled.
  @hsotg: Programming view of the DWC_otg controller
 Restore global regs 
  dwc2_exit_partial_power_down() - Exit controller from Partial Power Down.
  @hsotg: Programming view of the DWC_otg controller
  @rem_wakeup: indicates whether resume is initiated by Reset.
  @restore: Controller registers need to be restored
	
	  Restore host or device regisers with the same mode core enterted
	  to partial power down by checking "GOTGCTL_CURMODE_HOST" backup
	  value of the "gotgctl" register.
  dwc2_enter_partial_power_down() - Put controller in Partial Power Down.
  @hsotg: Programming view of the DWC_otg controller
  dwc2_restore_essential_regs() - Restore essiential regs of core.
  @hsotg: Programming view of the DWC_otg controller
  @rmode: Restore mode, enabled in case of remote-wakeup.
  @is_host: Host or device mode.
 Load restore values for [31:14] bits 
 If High Speed 
 Umnask global Interrupt in GAHBCFG and restore it 
 Clear all pending interupts 
 Unmask restore done interrupt 
 Restore GUSBCFG and HCFGDCFG 
  dwc2_hib_restore_common() - Common part of restore routine.
  @hsotg: Programming view of the DWC_otg controller
  @rem_wakeup: Remote-wakeup, enabled in case of remote-wakeup.
  @is_host: Host or device mode.
 Switch-on voltage to the core 
 Reset core 
 Enable restore from PMU 
 Disable Power Down Clamp 
 Deassert reset core 
 Disable PMU interrupt 
 Set Restore Essential Regs bit in PCGCCTL register 
	
	  Wait For Restore_done Interrupt. This mechanism of polling the
	  interrupt is introduced to avoid any possible race conditions
		
		  To avoid restore done interrupt storm after restore is
		  generated clear GINTSTS_RESTOREDONE bit.
  dwc2_wait_for_mode() - Waits for the controller mode.
  @hsotg:	Programming view of the DWC_otg controller.
  @host_mode:	If true, waits for host mode, otherwise device mode.
  dwc2_iddig_filter_enabled() - Returns true if the IDDIG debounce
  filter is enabled.
  @hsotg: Programming view of DWC_otg controller
 Check if core configuration includes the IDDIG filter. 
	
	  Check if the IDDIG debounce filter is bypassed. Available
	  in core version >= 3.10a.
  dwc2_enter_hibernation() - Common function to enter hibernation.
  @hsotg: Programming view of the DWC_otg controller
  @is_host: True if core is in host mode.
  Return: 0 if successful, negative error code otherwise
  dwc2_exit_hibernation() - Common function to exit from hibernation.
  @hsotg: Programming view of the DWC_otg controller
  @rem_wakeup: Remote-wakeup, enabled in case of remote-wakeup.
  @reset: Enabled in case of restore with reset.
  @is_host: True if core is in host mode.
  Return: 0 if successful, negative error code otherwise
  Do core a soft reset of the core.  Be careful with this because it
  resets all the internal state machines of the core.
	
	  If the current mode is host, either due to the force mode
	  bit being set (which persists after core reset) or the
	  connector id pin, a core soft reset will temporarily reset
	  the mode to device. A delay from the IDDIG debounce filter
	  will occur before going back to host mode.
	 
	  Determine whether we will go back into host mode after a
	  reset and account for this delay after the reset.
 Core Soft Reset 
	
	  Switching from device mode to host mode by disconnecting
	  device cable core enters and exits form hibernation.
	  However, the fifo map remains not cleared. It results
	  to a WARNING (WARNING: CPU: 5 PID: 0 at driversusbdwc2
	  gadget.c:307 dwc2_hsotg_init_fifo+0x120x152 [dwc2])
	  if in host mode we disconnect the micro a to b host
	  cable. Because core reset occurs.
	  To avoid the WARNING, fifo_map should be cleared
	  in dwc2_core_reset() function by taking into account configs.
	  fifo_map must be cleared only if driver is configured in
	  "CONFIG_USB_DWC2_PERIPHERAL" or "CONFIG_USB_DWC2_DUAL_ROLE"
	  mode.
 Wait for AHB master IDLE state 
  dwc2_force_mode() - Force the mode of the controller.
  Forcing the mode is needed for two cases:
  1) If the dr_mode is set to either HOST or PERIPHERAL we force the
  controller to stay in a particular mode regardless of ID pin
  changes. We do this once during probe.
  2) During probe we want to read reset values of the hw
  configuration registers that are only available in either host or
  device mode. We may need to force the mode if the current mode does
  not allow us to access the register in the mode that we want.
  In either case it only makes sense to force the mode if the
  controller hardware is OTG capable.
  Checks are done in this function to determine whether doing a force
  would be valid or not.
  If a force is done, it requires a IDDIG debounce filter delay if
  the filter is configured and enabled. We poll the current mode of
  the controller to account for this delay.
  @hsotg: Programming view of DWC_otg controller
  @host: Host mode flag
	
	  Force mode has no effect if the hardware is not OTG.
	
	  If dr_mode is either peripheral or host only, there is no
	  need to ever force the mode to the opposite mode.
  dwc2_clear_force_mode() - Clears the force mode bits.
  After clearing the bits, wait up to 100 ms to account for any
  potential IDDIG filter delay. We can't know if we expect this delay
  or not because the value of the connector ID status is affected by
  the force mode. We only need to call this once during probe if
  dr_mode == OTG.
  @hsotg: Programming view of DWC_otg controller
  Sets or clears force mode based on the dr_mode parameter.
		
		  NOTE: This is required for some rockchip soc based
		  platforms on their host-only dwc2.
  dwc2_enable_acg - enable active clock gating feature
  dwc2_dump_host_registers() - Prints the host registers
  @hsotg: Programming view of DWC_otg controller
  NOTE: This function will be removed once the peripheral controller code
  is integrated and the driver is stable
  dwc2_dump_global_registers() - Prints the core global registers
  @hsotg: Programming view of DWC_otg controller
  NOTE: This function will be removed once the peripheral controller code
  is integrated and the driver is stable
  dwc2_flush_tx_fifo() - Flushes a Tx FIFO
  @hsotg: Programming view of DWC_otg controller
  @num:   Tx FIFO to flush
 Wait for AHB master IDLE state 
 Wait for at least 3 PHY Clocks 
  dwc2_flush_rx_fifo() - Flushes the Rx FIFO
  @hsotg: Programming view of DWC_otg controller
 Wait for AHB master IDLE state 
 Wait for RxFIFO flush done 
 Wait for at least 3 PHY Clocks 
  dwc2_enable_global_interrupts() - Enables the controller's Global
  Interrupt in the AHB Config register
  @hsotg: Programming view of DWC_otg controller
  dwc2_disable_global_interrupts() - Disables the controller's Global
  Interrupt in the AHB Config register
  @hsotg: Programming view of DWC_otg controller
 Returns the controller's GHWCFG2.OTG_MODE. 
 Returns true if the controller is capable of DRD. 
 Returns true if the controller is host-only. 
 Returns true if the controller is device-only. 
  dwc2_hsotg_wait_bit_set - Waits for bit to be set.
  @hsotg: Programming view of DWC_otg controller.
  @offset: Register's offset where bitbits must be set.
  @mask: Mask of the bitbits which must be set.
  @timeout: Timeout to wait.
  Return: 0 if bitbits are set or -ETIMEDOUT in case of timeout.
  dwc2_hsotg_wait_bit_clear - Waits for bit to be clear.
  @hsotg: Programming view of DWC_otg controller.
  @offset: Register's offset where bitbits must be set.
  @mask: Mask of the bitbits which must be set.
  @timeout: Timeout to wait.
  Return: 0 if bitbits are set or -ETIMEDOUT in case of timeout.
  Initializes the FSLSPClkSel field of the HCFG register depending on the
  PHY type
 Full speed PHY 
 High speed PHY running at full speed or high speed 
	
	  core_init() is now called on every switch so only call the
	  following for the first time through
 Reset after a PHY select 
				
				  STM32F4x9 uses the GGPIO register as general
				  core configuration register.
	
	  Program DCFG.DevSpd or HCFG.FSLSPclkSel to 48Mhz in FS. Also
	  do this on HNP DevHost mode switches (done in dev_init and
	  host_init).
 Program GUSBCFG.OtgUtmiFsSel to I2C 
 Program GI2CCTL.I2CEn 
	
	  HS PHY parameters. These parameters are preserved during soft reset
	  so only program the first time. Do a soft reset immediately after
	  setting phyif.
 ULPI interface 
 Set external VBUS indicator as needed. 
 UTMI+ interface 
 Reset after setting the PHY parameters 
 If FSLS mode with FSLS PHY 
 High speed PHY 
 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
  hcd_queue.c - DesignWare HS OTG Controller host queuing routines
  Copyright (C) 2004-2013 Synopsys, Inc.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation andor other materials provided with the distribution.
  3. The names of the above-listed copyright holders may not be used
     to endorse or promote products derived from this software without
     specific prior written permission.
  ALTERNATIVELY, this software may be distributed under the terms of the
  GNU General Public License ("GPL") as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any
  later version.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  This file contains the functions to manage Queue Heads and Queue
  Transfer Descriptors for Host mode
 Wait this long before releasing periodic reservation 
 If we get a NAK, wait this long before retrying 
  dwc2_periodic_channel_available() - Checks that a channel is available for a
  periodic transfer
  @hsotg: The HCD state structure for the DWC OTG controller
  Return: 0 if successful, negative error code otherwise
	
	  Currently assuming that there is a dedicated host channel for
	  each periodic transaction plus at least one host channel for
	  non-periodic transactions
  dwc2_check_periodic_bandwidth() - Checks that there is sufficient bandwidth
  for the specified QH in the periodic schedule
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    QH containing periodic bandwidth required
  Return: 0 if successful, negative error code otherwise
  For simplicity, this calculation assumes that all the transfers in the
  periodic schedule may occur in the same (micro)frame
		
		  High speed mode
		  Max periodic usecs is 80% x 125 usec = 100 usec
		
		  Full speed mode
		  Max periodic usecs is 90% x 1000 usec = 900 usec
  pmap_schedule() - Schedule time in a periodic bitmap (pmap).
  @map:             The bitmap representing the schedule; will be updated
                    upon success.
  @bits_per_period: The schedule represents several periods.  This is how many
                    bits are in each period.  It's assumed that the beginning
                    of the schedule will repeat after its end.
  @periods_in_map:  The number of periods in the schedule.
  @num_bits:        The number of bits we need per period we want to reserve
                    in this function call.
  @interval:        How often we need to be scheduled for the reservation this
                    time.  1 means every period.  2 means every other period.
                    ...you get the picture?
  @start:           The bit number to start at.  Normally 0.  Must be within
                    the interval or we return failure right away.
  @only_one_period: Normally we'll allow picking a start anywhere within the
                    first interval, since we can still make all repetition
                    requirements by doing that.  However, if you pass true
                    here then we'll return failure if we can't fit within
                    the period that "start" is in.
  The idea here is that we want to schedule time for repeating events that all
  want the same resource.  The resource is divided into fixed-sized periods
  and the events want to repeat every "interval" periods.  The schedule
  granularity is one bit.
  To keep things "simple", we'll represent our schedule with a bitmap that
  contains a fixed number of periods.  This gets rid of a lot of complexity
  but does mean that we need to handle things specially (and non-ideally) if
  the number of the periods in the schedule doesn't match well with the
  intervals that we're trying to schedule.
  Here's an explanation of the scheme we'll implement, assuming 8 periods.
  - If interval is 1, we need to take up space in each of the 8
    periods we're scheduling.  Easy.
  - If interval is 2, we need to take up space in half of the
    periods.  Again, easy.
  - If interval is 3, we actually need to fall back to interval 1.
    Why?  Because we might need time in any period.  AKA for the
    first 8 periods, we'll be in slot 0, 3, 6.  Then we'll be
    in slot 1, 4, 7.  Then we'll be in 2, 5.  Then we'll be back to
    0, 3, and 6.  Since we could be in any frame we need to reserve
    for all of them.  Sucks, but that's what you gotta do.  Note that
    if we were instead scheduling 8  3 = 24 we'd do much better, but
    then we need more memory and time to do scheduling.
  - If interval is 4, easy.
  - If interval is 5, we again need interval 1.  The schedule will be
    0, 5, 2, 7, 4, 1, 6, 3, 0
  - If interval is 6, we need interval 2.  0, 6, 4, 2.
  - If interval is 7, we need interval 1.
  - If interval is 8, we need interval 8.
  If you do the math, you'll see that we need to pretend that interval is
  equal to the greatest_common_divisor(interval, periods_in_map).
  Note that at the moment this function tends to front-pack the schedule.
  In some cases that's really non-ideal (it's hard to schedule things that
  need to repeat every period).  In other cases it's perfect (you can easily
  schedule bigger, less often repeating things).
  Here's the algorithm in action (8 periods, 5 bits per period):
   |   |     |   |     |   |     |   |     |   OK 2 bits, intv 2 at 0
   ||  ||  ||  ||  |   OK 3 bits, intv 3 at 2
   || ||  || ||  |   OK 1 bits, intv 4 at 5
   |   |    |   |     |   |    |   |     | Remv 3 bits, intv 3 at 2
   |  |    |  |     |  |    |  |     |   OK 1 bits, intv 6 at 2
   | |   | |    | |   | |    |   OK 1 bits, intv 1 at 3
   | | | |  | | | |  |   OK 2 bits, intv 2 at 6
   |||| |||| |   OK 1 bits, intv 1 at 4
   |||| |||| | FAIL 1 bits, intv 1
   |  ||  | |  ||  | | Remv 2 bits, intv 2 at 0
   |  | |  | |  | |  | | Remv 1 bits, intv 4 at 5
   |   | |   | |   | |   | | Remv 1 bits, intv 6 at 2
   |    |  |    |  |    |  |    |  | Remv 1 bits, intv 1 at 3
   |    |    |    |    |    |    |    |    | Remv 2 bits, intv 2 at 6
   |     |     |     |     |     |     |     |     | Remv 1 bits, intv 1 at 4
   |   |     |   |     |   |     |   |     |   OK 2 bits, intv 2 at 0
   |  |     |   |     |  |     |   |     |   OK 1 bits, intv 4 at 2
   ||     | |     ||     | |     |   OK 2 bits, intv 2 at 3
   ||    | |     ||    | |     |   OK 1 bits, intv 4 at 5
   ||  | |   ||  | |   |   OK 2 bits, intv 2 at 6
   ||| | ||| | |   OK 2 bits, intv 2 at 8
   |||| |||| |   OK 1 bits, intv 4 at 12
  This function is pretty generic and could be easily abstracted if anything
  needed similar scheduling.
  Returns either -ENOSPC or a >= 0 start bit which should be passed to the
  unschedule routine.  The map bitmap will be updated on a non-error result.
 Adjust interval as per description 
 If start has gotten us past interval then we can't schedule 
 Must fit within same period as start; end at begin of next 
 Can fit anywhere in the first interval 
	
	  We'll try to pick the first repetition, then see if that time
	  is free for each of the subsequent repetitions.  If it's not
	  we'll adjust the start time for the next search of the first
	  repetition.
 Need to stay within this period 
 Look for num_bits us in this microframe starting at start 
		
		  We should get start >= end if we fail.  We might be
		  able to check the next microframe depending on the
		  interval, so continue on (start already updated).
 At this point we have a valid point for first one 
 Use this as a dumb "check if bits are 0" 
 We got the right place, continue checking 
 Move start up for next time and exit for loop 
 Need a while new period next time 
 If didn't exit the for loop with a break, we have success 
  pmap_unschedule() - Undo work done by pmap_schedule()
  @map:             See pmap_schedule().
  @bits_per_period: See pmap_schedule().
  @periods_in_map:  See pmap_schedule().
  @num_bits:        The number of bits that was passed to schedule.
  @interval:        The interval that was passed to schedule.
  @start:           The return value from pmap_schedule().
 Adjust interval as per description in pmap_schedule() 
  dwc2_get_ls_map() - Get the map used for the given qh
  @hsotg: The HCD state structure for the DWC OTG controller.
  @qh:    QH for the periodic transfer.
  We'll always get the periodic map out of our TT.  Note that even if we're
  running the host straight in low speed  full speed mode it appears as if
  a TT is allocated for us, so we'll use it.  If that ever changes we can
  add logic here to get a map out of "hsotg" if !qh->do_split.
  Returns: the map or NULL if a map couldn't be found.
 Don't expect to be missing a TT and be doing low speed scheduling 
 Get the map and adjust if this is a multi_tt hub 
  cat_printf() - A printf() + strcat() helper
  This is useful for concatenating a bunch of strings where each string is
  constructed using printf.
  @buf:   The destination buffer; will be updated to point after the printed
          data.
  @size:  The number of bytes in the buffer (includes space for '\0').
  @fmt:   The format for printf.
  @...:   The args for printf.
  pmap_print() - Print the given periodic map
  Will attempt to print out the periodic schedule.
  @map:             See pmap_schedule().
  @bits_per_period: See pmap_schedule().
  @periods_in_map:  See pmap_schedule().
  @period_name:     The name of 1 period, like "uFrame"
  @units:           The name of the units, like "us".
  @print_fn:        The function to call for printing.
  @print_data:      Opaque data to pass to the print function.
 Handle case when ith bit is set 
 ith bit isn't set; don't care if count == 0 
  dwc2_qh_print() - Helper function for dwc2_qh_schedule_print()
  @str:  The string to print
  @data: A pointer to a struct dwc2_qh_print_data
  dwc2_qh_schedule_print() - Print the periodic schedule
  @hsotg: The HCD state structure for the DWC OTG controller.
  @qh:    QH to print.
	
	  The printing functions are quite slow and inefficient.
	  If we don't have tracing turned on, don't run unless the special
	  define is turned on.
  dwc2_ls_pmap_schedule() - Schedule a low speed QH
  @hsotg:        The HCD state structure for the DWC OTG controller.
  @qh:           QH for the periodic transfer.
  @search_slice: We'll start trying to schedule at the passed slice.
                 Remember that slices are the units of the low speed
                 schedule (think 25us or so).
  Wraps pmap_schedule() with the right parameters for low speed scheduling.
  Normally we schedule low speed devices on the map associated with the TT.
  Returns: 0 for success or an error code.
	
	  Schedule on the proper low speed map with our low speed scheduling
	  parameters.  Note that we use the "device_interval" here since
	  we want the low speed interval and the only way we'd be in this
	  function is if the device is low speed.
	 
	  If we happen to be doing low speed and high speed scheduling for the
	  same transaction (AKA we have a split) we always do low speed first.
	  That means we can always pass "false" for only_one_period (that
	  parameters is only useful when we're trying to get one schedule to
	  match what we already planned in the other schedule).
  dwc2_ls_pmap_unschedule() - Undo work done by dwc2_ls_pmap_schedule()
  @hsotg:       The HCD state structure for the DWC OTG controller.
  @qh:          QH for the periodic transfer.
 Schedule should have failed, so no worries about no error code 
  dwc2_hs_pmap_schedule - Schedule in the main high speed schedule
  This will schedule something on the main dwc2 schedule.
  We'll start looking in qh->hs_transfers[index].start_schedule_us.  We'll
  update this with the result upon success.  We also use the duration from
  the same structure.
  @hsotg:           The HCD state structure for the DWC OTG controller.
  @qh:              QH for the periodic transfer.
  @only_one_period: If true we will limit ourselves to just looking at
                    one period (aka one 100us chunk).  This is used if we have
                    already scheduled something on the low speed schedule and
                    need to find something that matches on the high speed one.
  @index:           The index into qh->hs_transfers that we're working with.
  Returns: 0 for success or an error code.  Upon success the
           dwc2_hs_transfer_time specified by "index" will be updated.
  dwc2_hs_pmap_unschedule() - Undo work done by dwc2_hs_pmap_schedule()
  @hsotg:       The HCD state structure for the DWC OTG controller.
  @qh:          QH for the periodic transfer.
  @index:       Transfer index
  dwc2_uframe_schedule_split - Schedule a QH for a periodic split xfer.
  This is the most complicated thing in USB.  We have to find matching time
  in both the global high speed schedule for the port and the low speed
  schedule for the TT associated with the given device.
  Being here means that the host must be running in high speed mode and the
  device is in low or full speed mode (and behind a hub).
  @hsotg:       The HCD state structure for the DWC OTG controller.
  @qh:          QH for the periodic transfer.
	
	  The interval (how often to repeat) in the actual host schedule.
	  See pmap_schedule() for gcd() explanation.
	
	  We always try to find space in the low speed schedule first, then
	  try to find high speed time that matches.  If we don't, we'll bump
	  up the place we start searching in the low speed schedule and try
	  again.  To start we'll look right at the beginning of the low speed
	  schedule.
	 
	  Note that this will tend to front-load the high speed schedule.
	  We may eventually want to try to avoid this by either considering
	  both schedules together or doing some sort of round robin.
			
			  If we got an error here there's no other magic we
			  can do, so bail.  All the looping above is only
			  helpful to redo things if we got a low speed slot
			  and then couldn't find a matching high speed slot.
 Must be missing the tt structure?  Why? 
		
		  This will give us a number 0 - 7 if
		  DWC2_LS_SCHEDULE_FRAMES == 1, or 0 - 15 if == 2, or ...
 Get a number that's always 0 - 7 
		
		  If we were going to start in uframe 7 then we would need to
		  issue a start split in uframe 6, which spec says is not OK.
		  Move on to the next full frame (assuming there is one).
		 
		  See 11.18.4 Host Split Transaction Scheduling Requirements
		  bullet 1.
		
		  For ISOC in:
		  - start split            (frame -1)
		  - complete split w data (frame +1)
		  - complete split w data (frame +2)
		  - ...
		  - complete split w data (frame +num_data_packets)
		  - complete split w data (frame +num_data_packets+1)
		  - complete split w data (frame +num_data_packets+2, max 8)
		    ...though if frame was "0" then max is 7...
		 
		  For ISOC out we might need to do:
		  - start split w data    (frame -1)
		  - start split w data    (frame +0)
		  - ...
		  - start split w data    (frame +num_data_packets-2)
		 
		  For INTERRUPT in we might need to do:
		  - start split            (frame -1)
		  - complete split w data (frame +1)
		  - complete split w data (frame +2)
		  - complete split w data (frame +3, max 8)
		 
		  For INTERRUPT out we might need to do:
		  - start split w data    (frame -1)
		  - complete split         (frame +1)
		  - complete split         (frame +2)
		  - complete split         (frame +3, max 8)
		 
		  Start adjusting!
 First data transfer might not be all 188 bytes. 
		
		  For now, skip OUT xfers where first xfer is partial
		 
		  Main dwc2 code assumes:
		  - INT transfers never get split in two.
		  - ISOC transfers can always transfer 188 bytes the first
		    time.
		 
		  Until that code is fixed, try again if the first transfer
		  couldn't transfer everything.
		 
		  This code can be removed ifwhen the rest of dwc2 handles
		  the above cases.  Until it's fixed we just won't be able
		  to schedule quite as tightly.
 Start by assuming transfers for the bytes 
		
		  Everything except ISOC OUT has extra transfers.  Rules are
		  complicated.  See 11.18.4 Host Split Transaction Scheduling
		  Requirements bullet 3.
				
				  First is start split, middleend is data.
				  Allocate full data bytes for all data.
				
				  First is data, middleend is complete.
				  First transfer and second can have data.
				  Rest should just have complete split.
 Account for the start split 
 Calculate "L" value from spec 
 Start with basic case 
 Adjust downwards 
 1st = start; rest can contain data 
 All contain data, last might be smaller 
 Assign durations per uFrame 
		
		  Assign start us.  The call below to dwc2_hs_pmap_schedule()
		  will start with these numbers but may adjust within the same
		  microframe.
 Try to schedule with filled in hs_transfers above 
 If we scheduled all wout breaking out then we're all good 
 Try again starting in the next microframe 
  dwc2_uframe_schedule_hs - Schedule a QH for a periodic high speed xfer.
  Basically this just wraps dwc2_hs_pmap_schedule() to provide a clean
  interface.
  @hsotg:       The HCD state structure for the DWC OTG controller.
  @qh:          QH for the periodic transfer.
 In non-split host and device time are the same 
 We'll have one transfer; init start to 0 before calling scheduler 
  dwc2_uframe_schedule_ls - Schedule a QH for a periodic lowfull speed xfer.
  Basically this just wraps dwc2_ls_pmap_schedule() to provide a clean
  interface.
  @hsotg:       The HCD state structure for the DWC OTG controller.
  @qh:          QH for the periodic transfer.
 In non-split host and device time are the same 
 Run on the main low speed schedule (no split = no hub = no TT) 
  dwc2_uframe_schedule - Schedule a QH for a periodic xfer.
  Calls one of the 3 sub-function depending on what type of transfer this QH
  is for.  Also adds some printing.
  @hsotg:       The HCD state structure for the DWC OTG controller.
  @qh:          QH for the periodic transfer.
  dwc2_uframe_unschedule - Undoes dwc2_uframe_schedule().
  @hsotg:       The HCD state structure for the DWC OTG controller.
  @qh:          QH for the periodic transfer.
  dwc2_pick_first_frame() - Choose 1st frame for qh that's already scheduled
  Takes a qh that has already been scheduled (which means we know we have the
  bandwdith reserved for us) and set the next_active_frame and the
  start_active_frame.
  This is expected to be called on qh's that weren't previously actively
  running.  It just picks the next frame that we can fit into without any
  thought about the past.
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    QH for a periodic endpoint
	
	  Use the real frame number rather than the cached value as of the
	  last SOF to give us a little extra slop.
	
	  We wouldn't want to start any earlier than the next frame just in
	  case the frame number ticks as we're doing this calculation.
	 
	  NOTE: if we could quantify how long till we actually get scheduled
	  we might be able to avoid the "+ 1" by looking at the upper part of
	  HFNUM (the FRREM field).  For now we'll just use the + 1 though.
 Get the "no microframe schduler" out of the way... 
 Splits are active at microframe 0 minus 1 
		
		  We're either at high speed or we're doing a split (which
		  means we're talking high speed to a hub).  In any case
		  the first frame should be based on when the first scheduled
		  event is.
 Adjust interval as per high speed schedule 
		
		  Low or full speed directly on dwc2.  Just about the same
		  as high speed but on a different schedule and with slightly
		  different adjustments.  Note that this works because when
		  the host and device are both low speed then frames in the
		  controller tick at low speed.
 Scheduler messed up if frame is past interval 
	
	  We know interval must divide (HFNUM_MAX_FRNUM + 1) now that we've
	  done the gcd(), so it's safe to move to the beginning of the current
	  interval like this.
	 
	  After this we might be before earliest_frame, but don't worry,
	  we'll fix it...
	
	  Actually choose to start at the frame number we've been
	  scheduled for.
	
	  We actually need 1 frame before since the next_active_frame is
	  the frame number we'll be put on the ready list and we won't be on
	  the bus until 1 frame later.
	
	  By now we might actually be before the earliest_frame.  Let's move
	  up intervals until we're not.
  dwc2_do_reserve() - Make a periodic reservation
  Try to allocate space in the periodic schedule.  Depending on parameters
  this might use the microframe scheduler or the dumb scheduler.
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    QH for the periodic transfer.
  Returns: 0 upon success; error upon failure.
 Reserve periodic channel 
 Update claimed usecs per (micro)frame 
  dwc2_do_unreserve() - Actually release the periodic reservation
  This function actually releases the periodic bandwidth that was reserved
  by the given qh.
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    QH for the periodic transfer.
 No more unreserve pending--we're doing it 
 Update claimed usecs per (micro)frame 
 Release periodic channel reservation 
  dwc2_unreserve_timer_fn() - Timer function to release periodic reservation
  According to the kernel doc for usb_submit_urb() (specifically the part about
  "Reserved Bandwidth Transfers"), we need to keep a reservation active as
  long as a device driver keeps submitting.  Since we're using HCD_BH to give
  back the URB we need to give the driver a little bit of time before we
  release the reservation.  This worker is called after the appropriate
  delay.
  @t: Address to a qh unreserve_work.
	
	  Wait for the lock, or for us to be scheduled again.  We
	  could be scheduled again if:
	  - We started executing but didn't get the lock yet.
	  - A new reservation came in, but cancel didn't take effect
	    because we already started executing.
	  - The timer has been kicked again.
	  In that case cancel and wait for the next call.
	
	  Might be no more unreserve pending if:
	  - We started executing but didn't get the lock yet.
	  - A new reservation came in, but cancel didn't take effect
	    because we already started executing.
	 
	  We can't put this in the loop above because unreserve_pending needs
	  to be accessed under lock, so we can only check it once we got the
	  lock.
  dwc2_check_max_xfer_size() - Checks that the max transfer size allowed in a
  host channel is large enough to handle the maximum data transfer in a single
  (micro)frame for a periodic transfer
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    QH for a periodic endpoint
  Return: 0 if successful, negative error code otherwise
  dwc2_schedule_periodic() - Schedules an interrupt or isochronous transfer in
  the periodic schedule
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    QH for the periodic transfer. The QH should already contain the
          scheduling information.
  Return: 0 if successful, negative error code otherwise
 Cancel pending unreserve; if canceled OK, unreserve was pending 
	
	  Only need to reserve if there's not an unreserve pending, since if an
	  unreserve is pending then by definition our old reservation is still
	  valid.  Unreserve might still be pending even if we didn't cancel if
	  dwc2_unreserve_timer_fn() already started.  Code in the timer handles
	  that case.
		
		  It might have been a while, so make sure that frame_number
		  is still good.  Note: we could also try to use the similar
		  dwc2_next_periodic_start() but that schedules much more
		  tightly and we might need to hurry and queue things up.
 Don't rely on SOF and start in ready schedule 
 Always start in inactive schedule 
  dwc2_deschedule_periodic() - Removes an interrupt or isochronous transfer
  from the periodic schedule
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:	   QH for the periodic transfer
	
	  Schedule the unreserve to happen in a little bit.  Cases here:
	  - Unreserve worker might be sitting there waiting to grab the lock.
	    In this case it will notice it's been schedule again and will
	    quit.
	  - Unreserve worker might not be scheduled.
	 
	  We should never already be scheduled since dwc2_schedule_periodic()
	  should have canceled the scheduled unreserve timer (hence the
	  warning on did_modify).
	 
	  We add + 1 to the timer to guarantee that at least 1 jiffy has
	  passed (otherwise if the jiffy counter might tick right after we
	  read it and we'll get no delay).
  dwc2_wait_timer_fn() - Timer function to re-queue after waiting
  As per the spec, a NAK indicates that "a function is temporarily unable to
  transmit or receive data, but will eventually be able to do so without need
  of host intervention".
  That means that when we encounter a NAK we're supposed to retry.
  ...but if we retry right away (from the interrupt handler that saw the NAK)
  then we can end up with an interrupt storm (if the other side keeps NAKing
  us) because on slow enough CPUs it could take us longer to get out of the
  interrupt routine than it takes for the device to send another NAK.  That
  leads to a constant stream of NAK interrupts and the CPU locks.
  ...so instead of retrying right away in the case of a NAK we'll set a timer
  to retry some time later.  This function handles that timer and moves the
  qh back to the "inactive" list, then queues transactions.
  @t: Pointer to wait_timer in a qh.
  Return: HRTIMER_NORESTART to not automatically restart this timer.
	
	  We'll set wait_timer_cancel to true if we want to cancel this
	  operation in dwc2_hcd_qh_unlink().
  dwc2_qh_init() - Initializes a QH structure
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    The QH to init
  @urb:   Holds the information about the deviceendpoint needed to initialize
          the QH
  @mem_flags: Flags for allocating memory.
 Initialize QH 
 Compute scheduling parameters once and save them 
		
		  Schedule low speed if we're running the host in low or
		  full speed OR if we've got a "TT" to deal with to access this
		  device.
 We won't know num transfers until we schedule 
 We'll schedule later when we have something to do 
  dwc2_hcd_qh_create() - Allocates and initializes a QH
  @hsotg:        The HCD state structure for the DWC OTG controller
  @urb:          Holds the information about the deviceendpoint needed
                 to initialize the QH
  @mem_flags:   Flags for allocating memory.
  Return: Pointer to the newly allocated QH, or NULL on error
 Allocate memory 
  dwc2_hcd_qh_free() - Frees the QH
  @hsotg: HCD instance
  @qh:    The QH to free
  QH should already be removed from the list. QTD list should already be empty
  if called from URB Dequeue.
  Must NOT be called with interrupt disabled or spinlock held
 Make sure any unreserve work is finished. 
	
	  We don't have the lock so we can safely wait until the wait timer
	  finishes.  Of course, at this point in time we'd better have set
	  wait_timer_active to false so if this timer was still pending it
	  won't do anything anyway, but we want it to finish before we free
	  memory.
  dwc2_hcd_qh_add() - Adds a QH to either the non periodic or periodic
  schedule if it is not already in the schedule. If the QH is already in
  the schedule, no action is taken.
  @hsotg: The HCD state structure for the DWC OTG controller
  @qh:    The QH to add
  Return: 0 if successful, negative error code otherwise
 QH already in a schedule 
 Add the new QH to the appropriate schedule 
 Schedule right away 
  dwc2_hcd_qh_unlink() - Removes a QH from either the non-periodic or periodic
  schedule. Memory is not freed.
  @hsotg: The HCD state structure
  @qh:    QH to remove from schedule
 If the wait_timer is pending, this will stop it from acting 
 QH is not in a schedule 
  dwc2_next_for_periodic_split() - Set next_active_frame midway thru a split.
  This is called for setting next_active_frame for periodic splits for all but
  the first packet of the split.  Confusing?  I thought so...
  Periodic splits are single lowfull speed transfers that we end up splitting
  up into several high speed transfers.  They always fit into one full (1 ms)
  frame but might be split over several microframes (125 us each).  We to put
  each of the parts on a very specific high speed frame.
  This function figures out where the next active uFrame needs to be.
  @hsotg:        The HCD state structure
  @qh:           QH for the periodic transfer.
  @frame_number: The current frame number.
  Return: number missed by (or 0 if we didn't miss).
	
	  See dwc2_uframe_schedule_split() for split scheduling.
	 
	  Basically: increment 1 normally, but 2 right after the start split
	  (except for ISOC out).
	
	  Note that it's OK for frame_number to be 1 frame past
	  next_active_frame.  Remember that next_active_frame is supposed to
	  be 1 frame _before_ when we want to be scheduled.  If we're 1 frame
	  past it just means schedule ASAP.
	 
	  It's _not_ OK, however, if we're more than one frame past.
		
		  OOPS, we missed.  That's actually pretty bad since
		  the hub will be unhappy; try ASAP I guess.
  dwc2_next_periodic_start() - Set next_active_frame for next transfer start
  This is called for setting next_active_frame for a periodic transfer for
  all cases other than midway through a periodic split.  This will also update
  start_active_frame.
  Since we _always_ keep start_active_frame as the start of the previous
  transfer this is normally pretty easy: we just add our interval to
  start_active_frame and we've got our answer.
  The tricks come into play if we miss.  In that case we'll look for the next
  slot we can fit into.
  @hsotg:        The HCD state structure
  @qh:           QH for the periodic transfer.
  @frame_number: The current frame number.
  Return: number missed by (or 0 if we didn't miss).
	
	  The dwc2_frame_num_gt() function used below won't work terribly well
	  with if we just incremented by a really large intervals since the
	  frame counter only goes to 0x3fff.  It's terribly unlikely that we
	  will have missed in this case anyway.  Just go to exit.  If we want
	  to try to do better we'll need to keep track of a bigger counter
	  somewhere in the driver and handle overflows.
	
	  Test for misses, which is when it's too late to schedule.
	 
	  A few things to note:
	  - We compare against prev_frame_number since start_active_frame
	    and next_active_frame are always 1 frame before we want things
	    to be active and we assume we can still get scheduled in the
	    current frame number.
	  - It's possible for start_active_frame (now incremented) to be
	    next_active_frame if we got an EO MISS (even_odd miss) which
	    basically means that we detected there wasn't enough time for
	    the last packet and dwc2_hc_set_even_odd_frame() rescheduled us
	    at the last second.  We want to make sure we don't schedule
	    another transfer for the same frame.  My test webcam doesn't seem
	    terribly upset by missing a transfer but really doesn't like when
	    we do two transfers in the same frame.
	  - Some misses are expected.  Specifically, in order to work
	    perfectly dwc2 really needs quite spectacular interrupt latency
	    requirements.  It needs to be able to handle its interrupts
	    completely within 125 us of them being asserted. That not only
	    means that the dwc2 interrupt handler needs to be fast but it
	    means that nothing else in the system has to block dwc2 for a long
	    time.  We can help with the dwc2 parts of this, but it's hard to
	    guarantee that a system will have interrupt latency < 125 us, so
	    we have to be robust to some misses.
		
		  Adjust interval as per gcd with map size.
		  See pmap_schedule() for more details here.
  Deactivates a QH. For non-periodic QHs, removes the QH from the active
  non-periodic schedule. The QH is added to the inactive non-periodic
  schedule if any QTDs are still attached to the QH.
  For periodic QHs, the QH is removed from the periodic queued schedule. If
  there are any QTDs still attached to the QH, the QH is added to either the
  periodic inactive schedule or the periodic ready schedule and its next
  scheduled frame is calculated. The QH is placed in the ready schedule if
  the scheduled frame has been reached already. Otherwise it's placed in the
  inactive schedule. If there are no QTDs attached to the QH, the QH is
  completely removed from the periodic schedule.
 Add back to inactivewaiting non-periodic schedule 
	
	  Use the real frame number rather than the cached value as of the
	  last SOF just to get us a little closer to reality.  Note that
	  means we don't actually know if we've already handled the SOF
	  interrupt for this frame.
	
	  Remove from periodic_sched_queued and move to
	  appropriate queue
	 
	  Note: we purposely use the frame_number from the "hsotg" structure
	  since we know SOF interrupt will handle future frames.
  dwc2_hcd_qtd_init() - Initializes a QTD structure
  @qtd: The QTD to initialize
  @urb: The associated URB
		
		  The only time the QTD data toggle is used is on the data
		  phase of control transfers. This phase always starts with
		  DATA1.
 Start split 
 Store the qtd ptr in the urb to reference the QTD 
  dwc2_hcd_qtd_add() - Adds a QTD to the QTD-list of a QH
 			Caller must hold driver lock.
  @hsotg:        The DWC HCD structure
  @qtd:          The QTD to add
  @qh:           Queue head to add qtd to
  Return: 0 if successful, negative error code otherwise
  If the QH to which the QTD is added is not currently scheduled, it is placed
  into the proper schedule based on its EP type.
 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
  hcd_intr.c - DesignWare HS OTG Controller host-mode interrupt handling
  Copyright (C) 2004-2013 Synopsys, Inc.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation andor other materials provided with the distribution.
  3. The names of the above-listed copyright holders may not be used
     to endorse or promote products derived from this software without
     specific prior written permission.
  ALTERNATIVELY, this software may be distributed under the terms of the
  GNU General Public License ("GPL") as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any
  later version.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  This file contains the interrupt handlers for Host mode
  If we get this many NAKs on a split transaction we'll slow down
  retransmission.  A 1 here means delay after the first NAK.
 This function is for debug only 
	
	  The root hub doesn't really have a TT, but Linux thinks it
	  does because how could you have a "high speed hub" that
	  directly talks directly to low speed devices without a TT?
	  It's all lies.  Lies, I tell you.
 Clear failed; let's hope things work anyway 
  Handles the start-of-frame interrupt in host mode. Non-periodic
  transactions may be queued to the DWC_otg controller for the current
  (micro)frame. Periodic transactions may be queued to the controller
  for the next (micro)frame.
 Clear interrupt 
 Determine whether any periodic QHs should be executed 
			
			  Move QH to the ready list to be executed next
			  (micro)frame
  Handles the Rx FIFO Level Interrupt, which indicates that there is
  at least one packet in the Rx FIFO. The packets are moved from the FIFO to
  memory if the DWC_otg controller is operating in Slave mode.
 Packet Status 
 Read the data into the host buffer 
 Update the HC fields for the next packet received 
 Handled in interrupt, just ignore data 
  This interrupt occurs when the non-periodic Tx FIFO is half-empty. More
  data packets may be written to the FIFO for OUT transfers. More requests
  may be written to the non-periodic request queue for IN transfers. This
  interrupt is enabled only in Slave mode.
  This interrupt occurs when the periodic Tx FIFO is half-empty. More data
  packets may be written to the FIFO for OUT transfers. More requests may be
  written to the periodic request queue for IN transfers. This interrupt is
  enabled only in Slave mode.
 Every time when port enables calculate HFIR.FrInterval 
 Check if we need to adjust the PHY clock speed for low power 
 Port has been enabled, set the reset change flag 
 Low power 
 Set PHY low power clock select for FSLS devices 
 6 MHZ 
 48 MHZ 
 Not low power 
 Port has been enabled, set the reset change flag 
  There are multiple conditions that can cause a port interrupt. This function
  determines which interrupt conditions have occurred and handles them
  appropriately.
	
	  Clear appropriate bits in HPRT0 to clear the interrupt bit in
	  GINTSTS
	
	  Port Connect Detected
	  Set flag and clear if detected
		
		  The Hub driver asserts a reset when it sees port connect
		  status change flag
	
	  Port Enable Changed
	  Clear if detected - Set internal flag if disabled
 Overcurrent Change Interrupt 
  Gets the actual length of a transfer after the transfer halts. halt_status
  holds the reason for the halt.
  For IN transfers where halt_status is DWC2_HC_XFER_COMPLETE, short_read
  is set to 1 upon return if less than the requested number of bytes were
  transferred. short_read may also be NULL on entry, in which case it remains
  unchanged.
		
		  Must use the hctsiz.pktcnt field to determine how much data
		  has been transferred. This field reflects the number of
		  packets that have been transferred via the USB. This is
		  always an integral number of packets if the transfer was
		  halted before its normal completion. (Can't use the
		  hctsiz.xfersize field because that reflects the number of
		  bytes transferred via the AHB, not the USB).
  dwc2_update_urb_state() - Updates the state of the URB after a Transfer
  Complete interrupt on the host channel. Updates the actual_length field
  of the URB based on the number of bytes transferred via the host channel.
  Sets the URB status if the data transfer is finished.
  @hsotg: Programming view of the DWC_otg controller
  @chan: Programming view of host channel
  @chnum: Channel number
  @urb: Processing URB
  @qtd: Queue transfer descriptor
  Return: 1 if the data transfer specified by the URB is completely finished,
  0 otherwise
  Save the starting data toggle for the next transfer. The data toggle is
  saved in the QH for non-control transfers and it's saved in the QTD for
  control transfers.
  dwc2_update_isoc_urb_state() - Updates the state of an Isochronous URB when
  the transfer is stopped for any reason. The fields of the current entry in
  the frame descriptor array are set based on the transfer state and the input
  halt_status. Completes the Isochronous URB if all the URB frames have been
  completed.
  @hsotg: Programming view of the DWC_otg controller
  @chan: Programming view of host channel
  @chnum: Channel number
  @halt_status: Reason for halting a host channel
  @qtd: Queue transfer descriptor
  Return: DWC2_HC_XFER_COMPLETE if there are more frames remaining to be
  transferred in the URB. Otherwise return DWC2_HC_XFER_URB_COMPLETE.
 Don't need to update actual_length in this case 
 Skip whole frame 
		
		  urb->status is not used for isoc transfers. The individual
		  frame_desc statuses are used instead.
  Frees the first QTD in the QH's list if free_qtd is 1. For non-periodic
  QHs, removes the QH from the active non-periodic schedule. If any QTDs are
  still linked to the QH, the QH is added to the end of the inactive
  non-periodic schedule. For periodic QHs, removes the QH from the periodic
  schedule if no more QTDs are linked to the QH.
  dwc2_release_channel() - Releases a host channel for use by other transfers
  @hsotg:       The HCD state structure
  @chan:        The host channel to release
  @qtd:         The QTD associated with the host channel. This QTD may be
                freed if the transfer is complete or an error has occurred.
  @halt_status: Reason the channel is being released. This status
                determines the actions taken by this function.
  Also attempts to select and queue more transactions since at least one host
  channel is available.
		
		  The QTD has already been removed and the QH has been
		  deactivated. Don't want to do anything except release the
		  host channel and try to queue more transfers.
	
	  Release the host channel for use by other transfers. The cleanup
	  function clears the channel interrupt enables and conditions, so
	  there's no need to clear the Channel Halted interrupt separately.
			
			  Don't release reservations for periodic channels
			  here. That's done when a periodic transfer is
			  descheduled (i.e. when the QH is removed from the
			  periodic schedule).
 Try to queue more transfers now that there's a free channel 
  Halts a host channel. If the channel cannot be halted immediately because
  the request queue is full, this function ensures that the FIFO empty
  interrupt for the appropriate queue is enabled so that the halt request can
  be queued when there is space in the request queue.
  This function may also be called in DMA mode. In that case, the channel is
  simply released since the core always halts the channel automatically in
  DMA mode.
 Slave mode processing 
			
			  Make sure the Non-periodic Tx FIFO empty interrupt
			  is enabled so that the non-periodic schedule will
			  be processed
			
			  Move the QH from the periodic queued schedule to
			  the periodic assigned schedule. This allows the
			  halt to be queued when the periodic schedule is
			  processed.
			
			  Make sure the Periodic Tx FIFO Empty interrupt is
			  enabled so that the periodic schedule will be
			  processed
  Performs common cleanup for non-periodic transfers after a Transfer
  Complete interrupt. This function should be called after any endpoint type
  specific handling is finished to release the host channel.
		
		  Got a NYET on the last transaction of the transfer. This
		  means that the endpoint should be in the PING state at the
		  beginning of the next transfer.
	
	  Always halt and release the host channel to make it available for
	  more transfers. There may still be more phases for a control
	  transfer or more data packets for a bulk transfer at this point,
	  but the host channel is still halted. A channel will be reassigned
	  to the transfer when the non-periodic schedule is processed after
	  the channel is released. This allows transactions to be queued
	  properly via dwc2_hcd_queue_transactions, which also enables the
	  Tx FIFO Empty interrupt if necessary.
		
		  IN transfers in Slave mode require an explicit disable to
		  halt the channel. (In DMA mode, this call simply releases
		  the channel.)
		
		  The channel is automatically disabled by the core for OUT
		  transfers in Slave mode
  Performs common cleanup for periodic transfers after a Transfer Complete
  interrupt. This function should be called after any endpoint type specific
  handling is finished to release the host channel.
 Core halts channel in these cases 
 Flush any outstanding requests from the Tx queue 
 Indicates that channel released 
  Handles a host channel Transfer Complete interrupt. This handler may be
  called in either DMA mode or Slave mode.
 Do not disable the interrupt, just clear it 
 Handle xfer complete on CSPLIT 
 Update the QTD and URB states 
		
		  Interrupt URB is done on the first transfer complete
		  interrupt
  Handles a host channel STALL interrupt. This handler may be called in
  either DMA mode or Slave mode.
		
		  USB protocol requires resetting the data toggle for bulk
		  and interrupt endpoints when a CLEAR_FEATURE(ENDPOINT_HALT)
		  setup command is issued to the endpoint. Anticipate the
		  CLEAR_FEATURE command since a STALL has occurred and reset
		  the data toggle now.
  Updates the state of the URB when a transfer has been stopped due to an
  abnormal condition before the transfer completes. Modifies the
  actual_length field of the URB to reflect the number of bytes that have
  actually been transferred via the host channel.
  Handles a host channel NAK interrupt. This handler may be called in either
  DMA mode or Slave mode.
	
	  Handle NAK for INOUT SSPLITCSPLIT transfers, bulk, control, and
	  interrupt. Re-start the SSPLIT transfer.
	 
	  Normally for non-periodic transfers we'll retry right away, but to
	  avoid interrupt storms we'll wait before retrying if we've got
	  several NAKs. If we didn't do this we'd retry directly from the
	  interrupt handler and could end up quickly getting another
	  interrupt (another NAK), which we'd retry. Note that we do not
	  delay retries for IN parts of control requests, as those are expected
	  to complete fairly quickly, and if we delay them we risk confusing
	  the device and cause it issue STALL.
	 
	  Note that in DMA mode software only gets involved to re-send NAKed
	  transfers for split transactions, so we only need to apply this
	  delaying logic when handling splits. In non-DMA mode presumably we
	  might want a similar delay if someone can demonstrate this problem
	  affects that code path too.
			
			  NAK interrupts are enabled on bulkcontrol IN
			  transfers in DMA mode for the sole purpose of
			  resetting the error count after a transaction error
			  occurs. The core will continue transferring data.
		
		  NAK interrupts normally occur during OUT transfers in DMA
		  or Slave mode. For IN transfers, more requests will be
		  queued as request queue space is available.
		
		  Halt the channel so the transfer can be re-started from
		  the appropriate point or the PING protocol will
		  startcontinue
 Should never get called for isochronous transfers 
  Handles a host channel ACK interrupt. This interrupt is enabled when
  performing the PING protocol in Slave mode, when errors occur during
  either Slave mode or DMA mode, and during Start Split transactions.
 Handle ACK on SSPLIT. ACK should not occur in CSPLIT. 
 ISOC OUT 
				
				  For BEGIN or MID, calculate the length for
				  the next microframe to determine the correct
				  SSPLIT token, either MID or END
			
			  Halt the channel so the transfer can be re-started
			  from the appropriate point. This only happens in
			  Slave mode. In DMA mode, the ping_state is cleared
			  when the transfer is started because the core
			  automatically executes the PING, then the transfer.
	
	  If the ACK occurred when _not_ in the PING state, let the channel
	  continue transferring data after clearing the error count
  Handles a host channel NYET interrupt. This interrupt should only occur on
  Bulk and Control OUT endpoints and for complete split transactions. If a
  NYET occurs at the same time as a Transfer Complete interrupt, it is
  handled in the xfercomp interrupt handler, not here. This handler may be
  called in either DMA mode or Slave mode.
	
	  NYET on CSPLIT
	  re-do the CSPLIT immediately on non-periodic
 Don't have num_hs_transfers; simple logic 
				
				  Figure out the end frame based on
				  schedule.
				 
				  We don't want to go on trying again
				  and again forever. Let's stop when
				  we've done all the transfers that
				  were scheduled.
				 
				  We're going to be comparing
				  start_active_frame and
				  next_active_frame, both of which
				  are 1 before the time the packet
				  goes on the wire, so that cancels
				  out. Basically if had 1 transfer
				  and we saw 1 NYET then we're done.
				  We're getting a NYET here so if
				  next >= (start + num_transfers)
				  we're done. The complexity is that
				  for all but ISOC_OUT we skip one
				  slot.
 Treat this as a transaction error. 
				
				  Todo: Fix system performance so this can
				  be treated as an error. Right now complete
				  splits cannot be scheduled precisely enough
				  due to other system activity, so this error
				  occurs regularly in Slave mode.
 Todo: add support for isoc release 
	
	  Halt the channel and re-start the transfer so the PING protocol
	  will start
  Handles a host channel babble interrupt. This handler may be called in
  either DMA mode or Slave mode.
  Handles a host channel AHB error interrupt. This handler is only called in
  DMA mode.
 Core halts the channel for Descriptor DMA mode 
	
	  Force a channel halt. Don't call dwc2_halt_channel because that won't
	  write to the HCCHARn register in DMA mode to force the halt.
  Handles a host channel transaction error interrupt. This handler may be
  called in either DMA mode or Slave mode.
		
		  Halt the channel so the transfer can be re-started from
		  the appropriate point or the PING protocol will start
  Handles a host channel frame overrun interrupt. This handler may be called
  in either DMA mode or Slave mode.
  Handles a host channel data toggle error interrupt. This handler may be
  called in either DMA mode or Slave mode.
  For debug only. It checks that a valid halt status is set and that
  HCCHARn.chdis is clear. If there's a problem, corrective action is
  taken and a warning is issued.
  Return: true if halt status is ok, false otherwise
		
		  This code is here only as a check. This condition should
		  never happen. Ignore the halt if it does occur.
	
	  This code is here only as a check. hcchar.chdis should never be set
	  when the halt interrupt occurs. Halt the channel again if it does
	  occur.
  Handles a host Channel Halted interrupt in DMA mode. This handler
  determines the reason the channel halted and proceeds accordingly.
	
	  For core with OUT NAK enhancement, the flow for high-speed
	  CONTROLBULK OUT is handled a little differently
			
			  Just release the channel. A dequeue can happen on a
			  transfer timeout. In the case of an AHB Error, the
			  channel was forced to halt because there's no way to
			  gracefully recover.
		
		  Todo: This is here because of a possible hardware bug. Spec
		  says that on SPLIT-ISOC OUT transfers in DMA mode that a HALT
		  interrupt wACK bit set should occur, but I only see the
		  XFERCOMP bit, even with it masked out. This is a workaround
		  for that behavior. Should fix this when hardware is fixed.
		
		  Must handle xacterr before nak or ack. Could get a xacterr
		  at the same time as either of these on a BULKCONTROL OUT
		  that started with a PING. The xacterr takes precedence.
			
			  Must handle nyet before nak or ack. Could get a nyet
			  at the same time as either of those on a BULKCONTROL
			  OUT that started with a PING. The nyet takes
			  precedence.
			
			  If nak is not masked, it's because a non-split IN
			  transfer is in an error state. In that case, the nak
			  is handled by the nak interrupt handler, not here.
			  Handle nak here for BULKCONTROL OUT transfers, which
			  halt on a NAK to allow rewinding the buffer pointer.
			
			  If ack is not masked, it's because a non-split IN
			  transfer is in an error state. In that case, the ack
			  is handled by the ack interrupt handler, not here.
			  Handle ack here for split transfers. Start splits
			  halt on ACK.
				
				  A periodic transfer halted with no other
				  channel interrupts set. Assume it was halted
				  by the core because it could not be completed
				  in its scheduled (micro)frame.
 Failthrough: use 3-strikes rule 
		
		  We can get here after a completed transaction
		  (urb->actual_length >= urb->length) which was not reported
		  as completed. If that is the case, and we do not abort
		  the transfer, a transfer of size 0 will be enqueued
		  subsequently. If urb->actual_length is not DMA-aligned,
		  the buffer will then point to an unaligned address, and
		  the resulting behavior is undefined. Bail out in that
		  situation.
  Handles a host channel Channel Halted interrupt
  In slave mode, this handler is called only when the driver specifically
  requests a halt. This occurs during handling other host channel interrupts
  (e.g. nak, xacterr, stall, nyet, etc.).
  In DMA mode, this is the interrupt that occurs when the core has finished
  processing a transfer on a channel. Other host channel interrupts (except
  ahberr) are disabled in DMA mode.
  Check if the given qtd is still the top of the list (and thus valid).
  If dwc2_hcd_qtd_unlink_and_free() has been called since we grabbed
  the qtd from the top of the list, this will return false (otherwise true).
 Handles interrupt for a specific Host Channel 
	
	  If we got an interrupt after someone called
	  dwc2_hcd_endpoint_disable() we don't want to crash below
	
	  If the channel was halted due to a dequeue, the qtd list might
	  be empty or at least the first entry will not be the active qtd.
	  In this case, take a shortcut and just release the channel.
		
		  If the channel was halted, this should be the only
		  interrupt unmasked
		
		  TODO: Will this ever happen with the
		  DWC2_HC_XFER_URB_DEQUEUE handling above?
		
		  If NYET occurred at same time as Xfer Complete, the NYET is
		  handled by the Xfer Complete interrupt handler. Don't want
		  to call the NYET interrupt handler in this case.
  This interrupt indicates that one or more host channels has a pending
  interrupt. There are multiple conditions that can cause each host channel
  interrupt. This function determines which conditions have occurred for each
  host channel interrupt and handles them appropriately.
	
	  According to USB 2.0 spec section 11.18.8, a host must
	  issue complete-split transactions in a microframe for a
	  set of full-low-speed endpoints in the same relative
	  order as the start-splits were issued in a microframe for.
 This function handles interrupts for the HCD 
 Check if HOST Mode 
 Only print if there are any non-suppressed interrupts left 
 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
  core_intr.c - DesignWare HS OTG Controller common interrupt handling
  Copyright (C) 2004-2013 Synopsys, Inc.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation andor other materials provided with the distribution.
  3. The names of the above-listed copyright holders may not be used
     to endorse or promote products derived from this software without
     specific prior written permission.
  ALTERNATIVELY, this software may be distributed under the terms of the
  GNU General Public License ("GPL") as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any
  later version.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  This file contains the common interrupt handlers
  dwc2_handle_usb_port_intr - handles OTG PRTINT interrupts.
  When the PRTINT interrupt fires, there are certain status bits in the Host
  Port that needs to get cleared.
  @hsotg: Programming view of DWC_otg controller
  dwc2_handle_mode_mismatch_intr() - Logs a mode mismatch warning message
  @hsotg: Programming view of DWC_otg controller
 Clear interrupt 
  dwc2_handle_otg_intr() - Handles the OTG Interrupts. It reads the OTG
  Interrupt Register (GOTGINT) to determine what interrupt has occurred.
  @hsotg: Programming view of DWC_otg controller
			
			  If not B_HOST and Device HNP still set, HNP did
			  not succeed!
			
			  If Session End Detected the B-Cable has been
			  disconnected
 Reset to a clean state 
 Clear Session Request 
		
		  Print statements during the HNP interrupt handling
		  can cause it to fail
		
		  WA for 3.00a- HW is not setting cur_mode, even sometimes
		  this does not help
				
				  Need to disable SOF interrupt immediately.
				  When switching from device to host, the PCD
				  interrupt handler won't handle the interrupt
				  if host mode is already set. The HCD
				  interrupt handler won't get called if the
				  HCD state is HALT. This means that the
				  interrupt does not get handled and Linux
				  complains loudly.
				
				  Call callback function with spin lock
				  released
 Initialize the Core for Host mode 
		
		  The disconnect interrupt is set at the same time as
		  Host Negotiation Detected. During the mode switch all
		  interrupts are cleared so the disconnect interrupt
		  handler will not get executed.
 Need to disable SOF interrupt immediately 
 Clear GOTGINT 
  dwc2_handle_conn_id_status_change_intr() - Handles the Connector ID Status
  Change Interrupt
  @hsotg: Programming view of DWC_otg controller
  Reads the OTG Interrupt Register (GOTCTL) to determine whether this is a
  Device to Host Mode transition or a Host to Device Mode transition. This only
  occurs when the cable is connectedremoved from the PHY connector.
 Clear interrupt 
 Need to disable SOF interrupt immediately 
	
	  Need to schedule a work, as there are possible DELAY function calls.
  dwc2_handle_session_req_intr() - This interrupt indicates that a device is
  initiating the Session Request Protocol to request the host to turn on bus
  power so a new session can begin
  @hsotg: Programming view of DWC_otg controller
  This handler responds by turning on bus power. If the DWC_otg controller is
  in low power mode, this handler brings the controller out of low power mode
  before turning on bus power.
 Clear interrupt 
 Exit gadget mode clock gating. 
		
		  Report disconnect if there is any previous session
		  established
 Turn on the port power bit. 
 Connect hcd after port power is set. 
  dwc2_wakeup_from_lpm_l1 - Exit the device from LPM L1 state
  @hsotg: Programming view of DWC_otg controller
 TODO 
 Change to L0 state 
 Inform gadget to exit from L1 
  This interrupt indicates that the DWC_otg controller has detected a
  resume or remote wakeup sequence. If the DWC_otg controller is in
  low power mode, the handler must brings the controller out of low
  power mode. The controller automatically begins resume signaling.
  The handler schedules a time to stop resume signaling.
 Clear interrupt 
 Clear Remote Wakeup Signaling 
 Exit gadget mode clock gating. 
 Change to L0 state 
			
			  If we've got this quirk then the PHY is stuck upon
			  wakeup.  Assert reset.  This will propagate out and
			  eventually we'll re-enumerate the device.  Not great
			  but the best we can do.  We can't call phy_reset()
			  at interrupt time but there's no hurry, so we'll
			  schedule it for later.
 Change to L0 state 
  This interrupt indicates that a device has been disconnected from the
  root port
  This interrupt indicates that SUSPEND state has been detected on the USB.
  For HNP the USB Suspend interrupt signals the change from "a_peripheral"
  to "a_host".
  When power management is enabled the core will be put in low power mode.
 Clear interrupt 
		
		  Check the Device status register to determine if the Suspend
		  state is active
 Ignore suspend request before enumeration 
 Ask phy to be suspended 
				
				  If neither hibernation nor partial power down are supported,
				  clock gating is used to save power.
			
			  Change to L2 (suspend) state before releasing
			  spinlock
 Call gadget suspend callback 
 Change to L2 (suspend) state 
 Clear the a_peripheral flag, back to a_host 
  dwc2_handle_lpm_intr - GINTSTS_LPMTRANRCVD Interrupt handler
  @hsotg: Programming view of DWC_otg controller
 Clear interrupt 
		
		  Examine prt_sleep_sts after TL1TokenTetry period max (10 us)
 Save the current state 
 Inform gadget that we are in L1 state 
  This function returns the Core Interrupt register
 If any common interrupts set 
  dwc_handle_gpwrdn_disc_det() - Handles the gpwrdn disconnect detect.
  Exits hibernation without restoring registers.
  @hsotg: Programming view of DWC_otg controller
  @gpwrdn: GPWRDN register
 Switch-on voltage to the core 
 Reset core 
 Disable Power Down Clamp 
 Deassert reset core 
 Disable PMU interrupt 
 De-assert Wakeup Logic 
 Initialize the Core for Host mode 
  GPWRDN interrupt handler.
  The GPWRDN interrupts are those that occur in both Host and
  Device mode while core is in hibernated state.
 clear all interrupt 
		
		  Call disconnect detect function to exit from
		  hibernation
		
		  As GPWRDN_STS_CHGINT exit from hibernation flow is
		  the same as in GPWRDN_DISCONN_DET flow. Call
		  disconnect detect helper function to exit from
		  hibernation.
  Common interrupt handler
  The common interrupts are those that occur in both Host and Device mode.
  This handler handles the following interrupts:
  - Mode Mismatch Interrupt
  - OTG Interrupt
  - Connector ID Status Change Interrupt
  - Disconnect Interrupt
  - Session Request Interrupt
  - Resume  Remote Wakeup Detected Interrupt
  - Suspend Interrupt
 Reading current frame number value in device or host modes. 
 In case of hibernated state gintsts must not work 
		
		  The port interrupt occurs while in device mode with HPRT0
		  Port EnableDisable
 SPDX-License-Identifier: GPL-2.0+
  Intel XHCI (Cherry Trail, Broxton and others) USB OTG role switch driver
  Copyright (c) 2016-2017 Hans de Goede <hdegoede@redhat.com>
  Loosely based on android x86 kernel code which is:
  Copyright (C) 2014 Intel Corp.
  Author: Wu, Hao
 register definition 
	
	  On many CHT devices ACPI event (_AEI) handlers read  modify 
	  write the cfg0 register, just like we do. Take the ACPI lock
	  to avoid us racing with the AML code.
	
	  Set idpin value as requested.
	  Since some devices rely on firmware setting DRD_CONFIG and
	  SW_SWITCH_EN bits to be zero for role switch,
	  do not set these bits for those devices.
 In most case it takes about 600ms to finish mode switching 
 Polling on CFG1 register to confirm mode switch.
 Interval for polling is set to about 5 - 10 ms 
 SPDX-License-Identifier: GPL-2.0
  USB Role Switch Support
  Copyright (C) 2018 Intel Corporation
  Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
          Hans de Goede <hdegoede@redhat.com>
 device lock
 From descriptor 
  usb_role_switch_set_role - Set USB role for a switch
  @sw: USB role switch
  @role: USB role to be switched to
  Set USB role @role for @sw.
  usb_role_switch_get_role - Get the USB role for a switch
  @sw: USB role switch
  Depending on the role-switch-driver this function returns either a cached
  value of the last set role, or reads back the actual value from the hardware.
  usb_role_switch_get - Find USB role switch linked with the caller
  @dev: The caller device
  Finds and returns role switch linked with @dev. The reference count for the
  found switch is incremented.
  fwnode_usb_role_switch_get - Find USB role switch linked with the caller
  @fwnode: The caller device node
  This is similar to the usb_role_switch_get() function above, but it searches
  the switch using fwnode instead of device entry.
  usb_role_switch_put - Release handle to a switch
  @sw: USB Role Switch
  Decrement reference count for @sw.
  usb_role_switch_find_by_fwnode - Find USB role switch with its fwnode
  @fwnode: fwnode of the USB Role Switch
  Finds and returns role switch with @fwnode. The reference count for the
  found switch is incremented.
 Extra check if the user wants to disable the switch 
  usb_role_switch_register - Register USB Role Switch
  @parent: Parent device for the switch
  @desc: Description of the switch
  USB Role Switch is a device capable or choosing the role for USB connector.
  On platforms where the USB controller is dual-role capable, the controller
  driver will need to register the switch. On platforms where the USB host and
  USB device controllers behind the connector are separate, there will be a
  mux, and the driver for that mux will need to register the switch.
  Returns handle to a new role switch or ERR_PTR. The content of @desc is
  copied.
 TODO: Symlinks for the host port and the device controller. 
  usb_role_switch_unregister - Unregsiter USB Role Switch
  @sw: USB Role Switch
  Unregister switch that was registered with usb_role_switch_register().
  usb_role_switch_set_drvdata - Assign private data pointer to a switch
  @sw: USB Role Switch
  @data: Private data pointer
  usb_role_switch_get_drvdata - Get the private data pointer of a switch
  @sw: USB Role Switch
 SPDX-License-Identifier: GPL-2.0
  otg.c - ChipIdea USB IP core OTG driver
  Copyright (C) 2013 Freescale Semiconductor, Inc.
  Author: Peter Chen
  This file mainly handles otgsc register, OTG fsm operations for HNP and SRP
  are also included.
  hw_read_otgsc - returns otgsc register bits value.
  @ci: the controller
  @mask: bitfield mask
	
	  If using extcon framework for VBUS andor ID signal
	  detection overwrite OTGSC register value
 host 
 device 
  hw_write_otgsc - updates target bits of OTGSC register.
  @ci: the controller
  @mask: bitfield mask
  @data: to be written
 Don't enable vbus interrupt if using external notifier 
 Don't enable id interrupt if using external notifier 
  ci_otg_role - pick role based on ID pin state
  @ci: the controller
  hw_wait_vbus_lower_bsv - When we switch to device mode, the vbus value
                           should be lower than OTGSC_BSV before connecting
                           to host.
  @ci: the controller
  This function returns an error code if timeout
			
			  vbus disconnect event is lost due to role
			  switch occurs during system suspend.
			
			  Wait vbus lower than OTGSC_BSV before connecting
			  to host. If connecting status is from an external
			  connector instead of register, we don't need to
			  care vbus on the board, since it will not affect
			  external connector status.
 vbus change may have already occurred 
  ci_otg_work - perform otg (vbusid) event handle
  @work: work struct
  ci_hdrc_otg_init - initialize otg struct
  @ci: the controller
  ci_hdrc_otg_destroy - destroy otg struct
  @ci: the controller
 Disable all OTG irq and clear status 
 SPDX-License-Identifier: GPL-2.0+
  Copyright 2012 Freescale Semiconductor, Inc.
  Copyright (C) 2012 Marek Vasut <marex@denx.de>
  on behalf of DENX Software Engineering GmbH
 sentinel  }
 SoC before i.mx6 (except imx23imx28) needs three clks 
 --------------------------------- 
 Common functions shared by usbmisc drivers 
	
	  In case the fsl,usbmisc property is not present this device doesn't
	  need usbmisc. Return NULL (which is no error here)
	
	  Check the various over current related properties. If over current
	  detection is disabled we're not interested in the polarity.
 End of common functions shared by usbmisc drivers
 If the platform only needs one clocks 
 no pad regualator is needed 
 HSIC pinctrl handling 
 usbmisc needs to know dr mode to choose wakeup setting 
 don't overwrite original ret (cf. EPROBE_DEFER) 
 The core's suspend doesn't run 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2010, Code Aurora Forum. All rights reserved. 
 Vendor base starts at 0x200 beyond CI base 
	
	  wait for minimum 10 microseconds as suggested by manual.
	  Use a slightly larger value since the exact value didn't
	  work 100% of the time.
 use AHB transactor, allow posted data writes 
 workaround for rx buffer collision issue 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2014 Marvell Technology Group Ltd.
  Antoine Tenart <antoine.tenart@free-electrons.com>
 struct copy 
 struct copy 
 SPDX-License-Identifier: GPL-2.0
  otg_fsm.c - ChipIdea USB IP core OTG FSM driver
  Copyright (C) 2014 Freescale Semiconductor, Inc.
  Author: Jun Li
  This file mainly handles OTG fsm, it includes OTG fsm operations
  for HNP and SRP.
  TODO List
  - ADP
  - OTG test device
 Add for otg: interact with user space app 
 If a_bus_drop is TRUE, a_bus_req can't be set 
  Keep this list in the same order as timers indexed
  by enum otg_fsm_timer in includelinuxusbotg-fsm.h
  Add timer to active timer list
  Remove timer from active timer list
 No enabled timers after delete it 
 Find the next timer 
 OTG FSM timer handlers 
 only vbus fall below B_sess_vld in b_idle state 
  Keep this list in the same order as timers indexed
  by enum otg_fsm_timer in includelinuxusbotg-fsm.h
 A_WAIT_VRISE 
 A_WAIT_VFALL 
 A_WAIT_BCON 
 A_AIDL_BDIS 
 B_ASE0_BRST 
 A_BIDL_ADIS 
 B_AIDL_BDIS 
 B_SE0_SRP 
 B_SRP_FAIL 
 A_WAIT_ENUM 
 B_DATA_PLS 
 B_SSEND_SRP 
  Enable the next nearest enabled timer if have
 Enable the next nearest timer 
 Initialize timers 
 -------------------------------------------------------------
 Operations that will be called from OTG Finite State Machine 
 -------------------------------------------------------------
  A-device drive vbus: turn on vbus regulator and enable port power
  Data pulse irq should be disabled while vbus is on.
 Enable power power 
 Disable data pulse irq 
  Control data line by Run Stop bit.
  Generate SOF by host.
  In host mode, controller will automatically send SOF.
  Suspend will block the data on the port.
  This is controlled through usbcore by usb autosuspend,
  so the usb device class driver need support autosuspend,
  otherwise the bus suspend will not happen.
  Start SRP pulsing by data-line pulsing,
  no v-bus pulsing followed
 Hardware Assistant Data pulse 
	
	  Don't do fsm transition for B device
	  when there is no gadget class driver
			
			  Further state change for cases:
			  a_idle to b_idle; or
			  a_idle to a_wait_vrise due to ID change(1->0), so
			  B-dev becomes A-dev can try to start new session
			  consequently; or
			  a_idle to a_wait_vrise when power up
 Enable data pulse irq 
				
				  Further transite to b_periphearl state
				  when register gadget driver with vbus on
  Update fsm variables in each state if catching expected interrupts,
  called by otg fsm isr.
			
			  Init a timer to know how long this suspend
			  will continue, if time out, indicates B no longer
			  wants to be host role
 if gadget driver is binded 
 A device to be peripheral mode 
  ci_otg_irq - otg fsm related irq handling
  and also update otg fsm variable by monitoring usb host and udc
  state change interrupts.
  @ci: ci_hdrc
 Enable A vbus valid irq 
 Enable BSV irq 
 SPDX-License-Identifier: GPL-2.0+
  Copyright 2012 Freescale Semiconductor, Inc.
 Send resume signal without 480Mhz PHY clock 
 set before portsc.suspendM = 1 
 HSIC enable 
 Force HSIC module 480M clock on, even when in Host is in suspend mode 
 For imx6dql, it is host-only controller, for later imx6, it is otg's 
 The default DMDP value is pull-down 
 It's called once when probe a usb device 
 It's called once after adding a usb device 
 It's called when we need to enabledisable usb wakeup 
 It's called before setting portsc.suspendM 
 It's called during suspendresume 
 usb charger detection 
		
		  If the polarity is not configured assume active high for
		  historical reasons.
		
		  If the polarity is not configured assume active high for
		  historical reasons.
 needed to stabilize voltage 
 Select a 24 MHz reference clock for the PHY  
 set USBH2 into ULPI-mode. 
 select ULPI clock 
 Set interrupt wake up enable 
 Disable internal 60Mhz clock 
 set USBH3 into ULPI-mode. 
 select ULPI clock 
 Set interrupt wake up enable 
 Disable internal 60Mhz clock 
		
		  If the polarity is not configured keep it as setup by the
		  bootloader.
 If the polarity is not set keep it as setup by the bootlader 
 SoC non-burst setting 
 For HSIC controller 
		
		  For SoCs like i.MX7D and later, each USB controller has
		  its own non-core register region. For SoCs before i.MX7D,
		  the first two USB controllers are non-HSIC controllers.
 Set vbus wakeup source as bvalid 
		
		  Disable dpdm wakeup in device mode when vbus is
		  not there.
 For HSIC controller 
	
	  Vybrid only has one misc register set, but in two different
	  areas. These is reflected in two instances of this driver.
		
		  If the polarity is not configured keep it as setup by the
		  bootloader.
 If the polarity is not set keep it as setup by the bootlader 
 SoC non-burst setting 
 PHY tuning for signal quality 
 Clear VDATSRCENB0 to disable VDP_SRC and IDM_SNK required by BC 1.2 spec 
 TVDMSRC_DIS 
 VDM_SRC is connected to D- and IDP_SINK is connected to D+ 
 TVDMSRC_ON 
	
	  Per BC 1.2, check voltage of D+:
	  DCP: if greater than VDAT_REF;
	  CDP: if less than VDAT_REF.
 Set OPMODE to be 2'b00 and disable its override 
 Enable Data Contact Detect (DCD) per the USB BC 1.2 
 Data pin makes contact 
 Disable DCD after finished data contact check 
 VDP_SRC is connected to D+ and IDM_SINK is connected to D- 
 TVDPSRC_ON 
 Check if D- is less than VDAT_REF to determine an SDP per BC 1.2 
  Whole charger detection process:
  1. OPMODE override to be non-driving
  2. Data contact check
  3. Primary detection
  4. Secondary detection
  5. Disable charger detection
 Check if vbus is valid 
	
	  Keep OPMODE to be non-driving mode during the whole
	  charger detection process.
		
		  If the polarity is not configured keep it as setup by the
		  bootloader.
 If the polarity is not set keep it as setup by the bootlader 
 SoC non-burst setting 
		
		  For non-HSIC controller, the autoresume is enabled
		  at MXS PHY driver (usbphy_ctrl bit18).
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 Linaro Ltd.
	
	  Set PORTSC correctly so we can readwrite ULPI registers for
	  identification purposes
 SPDX-License-Identifier: GPL-2.0
  ci_hdrc_pci.c - MIPS USB IP core family device controller
  Copyright (C) 2008 Chipidea - MIPS Technologies, Inc. All rights reserved.
  Author: David Lopo
 driver name 
  PCI block
  ci_hdrc_pci_probe: PCI probe
  @pdev: USB device controller being probed
  @id:   PCI hotplug ID connecting controller to UDC framework
  This function returns an error code
  Allocates basic PCI resources for this USB device controller, and then
  invokes the udc_probe() method to start the UDC associated with it
 register a nop PHY 
  ci_hdrc_pci_remove: PCI remove
  @pdev: USB Device Controller being removed
  Reverses the effect of ci_hdrc_pci_probe(),
  first invoking the udc_remove() and then releases
  all PCI resources allocated for this USB device controller
  PCI device table
  PCI device structure
  Check "pci.h" for details
  Note: ehci-pci driver may try to probe the device first. You have to add an
  ID to the bypass_pci_id_table in ehci-pci driver to prevent this.
 Intel Clovertrail 
 end: all zeroes 
 SPDX-License-Identifier: GPL-2.0
  core.c - ChipIdea USB IP core family device controller
  Copyright (C) 2008 Chipidea - MIPS Technologies, Inc. All rights reserved.
  Copyright (C) 2020 NXP
  Author: David Lopo
 	   Peter Chen <peter.chen@nxp.com>
  Main Features:
  - Four transfers are supported, usbtest is passed
  - USB Certification for gadget: CH9 and Mass Storage are passed
  - Low power mode
  - USB wakeup
 Controller register map 
  hw_read_intr_enable: returns interrupt enable register
  @ci: the controller
  This function returns register data
  hw_read_intr_status: returns interrupt status register
  @ci: the controller
  This function returns register data
  hw_port_test_set: writes port test mode (execute without interruption)
  @ci: the controller
  @mode: new value
  This function returns an error code
  hw_port_test_get: reads port test mode value
  @ci: the controller
  This function returns port test mode value
	
	  The phy needs some delay to output the stable status from low
	  power mode. And for OTGSC, the status inputs are debounced
	  using a 1 ms time constant, so, delay 2ms for controller to get
	  the stable status, like vbus and id when the phy leaves low power.
 The PHY entersleaves low power mode 
 bank is a module variable 
 cache hw ENDPT_MAX 
 Disable all interrupts bits 
 Clear all interrupts status bits
 setup lock mode ? 
 ENDPTSETUPSTAT is '0' by default 
 HCSPARAMS.bf.ppc SHOULD BE zero for device 
  _ci_usb_phy_init: initialize phy taking in account both phy and usb_phy
  interfaces
  @ci: the controller
  This function returns an error code if the phy failed to init
  ci_usb_phy_exit: deinitialize phy taking in account both phy and usb_phy
  interfaces
  @ci: the controller
  ci_usb_phy_init: initialize phy according to different phy type
  @ci: the controller
  This function returns an error code if usb_phy_init has failed
  ci_platform_configure: do controller configure
  @ci: the controller
 override burst size, take effect only when ahb_burst_config is 0 
  hw_controller_reset: do controller reset
  @ci: the controller
  This function returns an error code
  hw_device_reset: resets chip (execute without interruption)
  @ci: the controller
  This function returns an error code
 should flush & stop before reset 
 USBMODE should be configured step by step 
 HW >= 2.3 
	
	  Handle id change interrupt, it indicates devicehost function
	  switch.
 Clear ID change irq status 
	
	  Handle vbus change interrupt, it indicates device connection
	  and disconnection events.
 Clear BSV irq 
 Handle devicehost interrupt 
 Stop current role 
 Start target role 
 Get the vbus regulator 
 no vbus regulator is needed 
 Get TPL support 
 We can support HNP and SRP of OTG 2.0 
 Update otg capabilities by DT properties 
 Each one of them is not mandatory 
  ci_hdrc_query_available_role: get runtime available operation mode
  The glue layer can get current operation mode (hostperipheralotg)
  This function should be called after ci core device has created.
  @pdev: the platform device of ci core.
  Return runtime usb_dr_mode.
 Disable and clear all OTG irq 
 Look for a generic PHY first 
 Look for a legacy USB PHY from device-tree next 
 Look for any registered legacy USB PHY as last resort 
 No USB PHY was found in the end 
 initialize role(s) before the interrupt is requested 
 Enable ID change irq 
			
			  If the controller is not OTG capable, but support
			  role switch, the defalt role is gadget, and the
			  user can switch it through debugfs.
 only update vbus status for peripheral 
 Pull down DP for possible charger detection 
 Prepare wakeup by SRP before suspend 
 Handle SRP when wakeup by data pulse 
  Handle the wakeup interrupt triggered by extcon connector
  We need to call ci_irq again for extcon since the first
  interrupt (wakeup int) only let the controller be out of
  low power mode, but not handle any interrupts.
	
	  Controller needs to be active during suspend, otherwise the core
	  may run resume when the parent is at suspend if other driver's
	  suspend fails, it occurs before parent's suspend has not started,
	  but the core suspend has finished.
 CONFIG_PM_SLEEP 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
  ci_device_show: prints information about device capabilities and status
  ci_port_test_show: reads port test mode
  ci_port_test_write: writes port test mode
 sscanf requires a zero terminated string 
  ci_qheads_show: DMA contents of all queue heads
  ci_requests_show: DMA contents of all requests currently queued (all endpts)
 ------ State ----- 
 ------ State Machine Variables ----- 
 ------ Registers ----- 
  dbg_create_files: initializes the attribute interface
  @ci: device
  This function returns an error code
  dbg_remove_files: destroys the attribute interface
  @ci: device
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016, NVIDIA Corporation
 sentinel 
	
	  The 1st USB controller contains some UTMI pad registers that are
	  global for all the controllers on the chip. Those registers are
	  also cleared when reset is asserted to the 1st controller.
		
		  PHY driver performs UTMI-pads reset in a case of a
		  non-legacy DT.
 reset control is shared, hence initialize it first 
 disable USB interrupt 
	
	  Here we have to do Port Reset at most twice for
	  Port Enable bit to be set.
			
			  Up to this point, Port Enable bit is
			  expected to be set after 2 ms waiting.
			  USB1 usually takes extra 45 ms, for safety,
			  we take 100 ms as timeout.
	
	  Clear Connect Status Change bit if it's set.
	  We can't clear PORT_PEC. It will also cause PORT_PE to be cleared.
	
	  Write to clear any interrupt status bits that might be set
	  during port reset.
 restore original interrupt-enable bits 
 for USB1 port we need to issue Port Reset twice internally 
	
	  Touching any register which belongs to AHB clock domain will
	  hang CPU if USB controller is put into low power mode because
	  AHB USB clock is gated on Tegra in the LPM.
	 
	  Tegra PHY has a separate register for checking the clock status
	  and usb_phy_set_suspend() takes care of gatingungating the clocks
	  and restoring the PHY state on Tegra. Hence DEVLCPORTSC registers
	  shouldn't be touched directly by the CI driver.
	
	  USB controller registers shouldn't be touched before PHY is
	  initialized, otherwise CPU will hang because clocks are gated.
	  PHY driver controls gating of internal USB clocks on Tegra.
 setup and register ChipIdea HDRC device 
 Tegra PHY driver currently doesn't support LPM for ULPI 
 SPDX-License-Identifier: GPL-2.0
  udc.c - ChipIdea UDC driver
  Copyright (C) 2008 Chipidea - MIPS Technologies, Inc. All rights reserved.
  Author: David Lopo
 control endpoint description 
  hw_ep_bit: calculates the bit number
  @num: endpoint number
  @dir: endpoint direction
  This function returns bit number
  hw_device_state: enablesdisables interrupts (execute without interruption)
  @ci: the controller
  @dma: 0 => disable, !0 => enable and set dma engine
  This function returns an error code
 interrupt, error, port change, reset, sleepsuspend 
  hw_ep_flush: flush endpoint fifo (execute without interruption)
  @ci: the controller
  @num: endpoint number
  @dir: endpoint direction
  This function returns an error code
 flush any pending transfer 
  hw_ep_disable: disables endpoint (execute without interruption)
  @ci: the controller
  @num: endpoint number
  @dir: endpoint direction
  This function returns an error code
  hw_ep_enable: enables endpoint (execute without interruption)
  @ci: the controller
  @num:  endpoint number
  @dir:  endpoint direction
  @type: endpoint type
  This function returns an error code
 type    
 unstall 
 reset data toggle 
 enable  
 type    
 unstall 
 reset data toggle 
 enable  
  hw_ep_get_halt: return endpoint halt status
  @ci: the controller
  @num: endpoint number
  @dir: endpoint direction
  This function returns 1 if endpoint halted
  hw_ep_prime: primes endpoint (execute without interruption)
  @ci: the controller
  @num:     endpoint number
  @dir:     endpoint direction
  @is_ctrl: true if control endpoint
  This function returns an error code
 Synchronize before ep prime 
 status shoult be tested according with manual but it doesn't work 
  hw_ep_set_halt: configures ep halt & resets data toggle after clear (execute
                  without interruption)
  @ci: the controller
  @num:   endpoint number
  @dir:   endpoint direction
  @value: true => stall, false => unstall
  This function returns an error code
 data toggle - reserved for EP0 but it's in ESS 
  hw_port_is_high_speed: test if port is high speed
  @ci: the controller
  This function returns true if high speed port
  hw_test_and_clear_complete: test & clear complete status (execute without
                              interruption)
  @ci: the controller
  @n: endpoint number
  This function returns complete status
  hw_test_and_clear_intr_active: test & clear active interrupts (execute
                                 without interruption)
  @ci: the controller
  This function returns active interrutps
  hw_test_and_clear_setup_guard: test & clear setup guard (execute without
                                 interruption)
  @ci: the controller
  This function returns guard value
  hw_test_and_set_setup_guard: test & set setup guard (execute without
                               interruption)
  @ci: the controller
  This function returns guard value
  hw_usb_set_address: configures USB address (execute without interruption)
  @ci: the controller
  @value: new USB address
  This function explicitly sets the address, without the "USBADRA" (advance)
  feature, which is not supported by older versions of the controller.
  hw_usb_reset: restart device after a bus reset (execute without
                interruption)
  @ci: the controller
  This function returns an error code
 ESS flushes only at end?!? 
 clear setup token semaphores 
 clear complete status 
 wait until all bits cleared 
 not RTOS friendly 
 reset all endpoints ? 
	 reset internal status and wait for further instructions
  UTIL block
 get the last entry 
  _usb_addr: calculates endpoint address from direction & number
  @ep:  endpoint
	
	  The first buffer could be not page aligned.
	  In that case we have to span into one extra td.
  _hardware_enqueue: configures a request at hardware level
  @hwep:   endpoint
  @hwreq:  request
  This function returns an error code
 don't queue twice 
  QH configuration 
  free_pending_td: remove a pending request for the endpoint
  @hwep: endpoint
  _hardware_dequeue: handles a request at hardware level
  @hwep: endpoint
  @hwreq:  request
  This function returns an error code
		
		  As the hardware could still address the freed td
		  which will run the udc unusable, the cleanup of the
		  td has to be delayed by one.
  _ep_nuke: dequeues all endpoint requests
  @hwep: endpoint
  This function returns an error code
  Caller must hold lock
 pop oldest request 
  _gadget_stop_activity: stops all USB activity, flushes & disables all endpts
  @gadget: gadget
  This function returns an error code
 flush all endpoints 
 make sure to disable all endpoints 
  ISR block
  isr_reset_handler: USB reset interrupt handler
  @ci: UDC device
  This function resets USB engine after a bus reset occurred
  isr_get_status_complete: get_status request complete function
  @ep:  endpoint
  @req: request handled
  Caller must release lock
  _ep_queue: queues (submits) an IO request to an endpoint
  @ep:        endpoint
  @req:       request
  @gfp_flags: GFP flags (not used)
  Caller must hold lock
  This function returns an error code
 first nuke then test link, e.g. previous status has not sent 
 push request 
  isr_get_status_response: get_status request response
  @ci: ci struct
  @setup: setup request packet
  This function returns an error code
 else do nothing; reserved for future use 
  isr_setup_status_complete: setup_status request complete function
  @ep:  endpoint
  @req: request handled
  Caller must release lock. Put the port in test mode if test mode
  feature is selected.
  isr_setup_status_phase: queues the status phase of a setup transation
  @ci: ci struct
  This function returns an error code
	
	  Unexpected USB controller behavior, caused by bad signal integrity
	  or ground reference problems, can lead to isr_setup_status_phase
	  being called with ci->status equal to NULL.
	  If this situation occurs, you should review your USB hardware design.
  isr_tr_complete_low: transaction complete low level handler
  @hwep: endpoint
  This function returns an error code
  Caller must hold lock
  isr_setup_packet_handler: setup packet handler
  @ci: UDC descriptor
  This function handles setup packet 
	
	  Flush data and handshake transactions of previous
	  setup packet.
 read_setup_packet 
 no data phase 
  isr_tr_complete_handler: transaction complete interrupt handler
  @ci: UDC descriptor
  This function handles traffic events
 not configured 
 needs status phase 
 Only handle setup packet below 
  ENDPT block
  ep_enable: configure endpoint, making it usable
  Check usb_ep_enable() at "usb_gadget.h" for details
 only internal SW should enable ctrl endpts 
	
	  For ISO-TX, we set mult at QH as the largest value, and use
	  MultO at TD as real mult value.
 needed? 
	
	  Enable endpoints in the HW other than ep0 as ep0
	  is always enabled
  ep_disable: endpoint is no longer usable
  Check usb_ep_disable() at "usb_gadget.h" for details
 only internal SW should disable ctrl endpts 
  ep_alloc_request: allocate a request object to use with this endpoint
  Check usb_ep_alloc_request() at "usb_gadget.h" for details
  ep_free_request: frees a request object
  Check usb_ep_free_request() at "usb_gadget.h" for details
  ep_queue: queues (submits) an IO request to an endpoint
  Check usb_ep_queue() at usb_gadget.h" for details
  ep_dequeue: dequeues (cancels, unlinks) an IO request from an endpoint
  Check usb_ep_dequeue() at "usb_gadget.h" for details
 pop request 
  ep_set_halt: sets the endpoint halt feature
  Check usb_ep_set_halt() at "usb_gadget.h" for details
  ep_set_wedge: sets the halt feature and ignores clear requests
  Check usb_ep_set_wedge() at "usb_gadget.h" for details
  ep_fifo_flush: flushes contents of a fifo
  Check usb_ep_fifo_flush() at "usb_gadget.h" for details
  Endpoint-specific part of the API to the USB controller hardware
  Check "usb_gadget.h" for details
  GADGET block
  ci_hdrc_gadget_connect: caller makes sure gadget driver is binded
 Change Data+ pullup status
  this func is used by usb_gadget_connectdisconnect
	
	  Data+ pullup controlled by OTG state machine in OTG fsm mode;
	  and don't touch Data+ in host mode for dual role config.
 Match ISOC IN from the highest endpoint 
  Device operations part of the API to the USB controller hardware,
  which don't involve endpoints (or io)
  Check  "usb_gadget.h" for details
			
			  for ep0: maxP defined in desc, for other
			  eps, maxP is set by epautoconfig() called
			  by gadget layer
			
			  set up shorthands for ep0 out and in endpoints,
			  don't add to gadget's ep_list
  ci_udc_start: register a gadget driver
  @gadget: our gadget
  @driver: the driver being registered
  Interrupts are enabled here.
 Start otg fsm for B-device 
  ci_udc_stop: unregister a gadget driver
  BUS block
  udc_irq: ci interrupt handler
  This function returns IRQ_HANDLED if the IRQ has been handled
  It locks access to registers
 order defines priority - do NOT change it 
  udc_start: initialize gadget role
  @ci: chipidea controller
 alloc resources 
  ci_hdrc_gadget_destroy: parent remove must call this to remove UDC
  No interrupts active, the IRQ has been released
 Clear and enable BSV irq 
	
	  host doesn't care B_SESSION_VALID event
	  so clear and disbale BSV irq
  ci_hdrc_gadget_init - initialize device related bits
  @ci: the controller
  This function initializes the gadget, if the device is "device capable".
 SPDX-License-Identifier: GPL-2.0
  host.c - ChipIdea USB host controller driver
  Copyright (c) 2012 Intel Corporation
  Author: Alexander Shishkin
		
		  Marvell 28nm HSIC PHY requires forcing the port to HS mode.
		  As HSIC is always HS, this should be safe for others.
 The below code is based on tegra ehci driver 
		
		  If a transaction is in progress, there may be a delay in
		  suspending the port. Poll until the port is suspended.
	
	  After resume has finished, it needs do some post resume
	  operation for some SoCs.
 Make sure the resume has finished, it should be finished 
 Handle the hub control events here 
			
			  For chipidea, the resume signal will be ended
			  automatically, so for remote wakeup case, the
			  usbcmd.rs may not be set before the resume has
			  ended if other resume paths consumes too much
			  time (~24ms), in that case, the SOF will not
			  send out within 3ms after resume ends, then the
			  high speed device will enter full speed mode.
			
			  It needs a short delay between set RS bit and PHCD.
			
			  Need to clear WKCN and WKOC for imx HSIC,
			  otherwise, there will be wakeup event.
 Allocate a buffer with enough padding for alignment 
 Position our struct dma_aligned_buffer such that data is aligned 
 SPDX-License-Identifier: GPL-2.0
  Chipidea Device Mode Trace Support
  Copyright (C) 2020 NXP
  Author: Peter Chen <peter.chen@nxp.com>
 SPDX-License-Identifier: GPL-2.0
  The USB Monitor, inspired by Dave Harding's USBMon.
  mon_main.c: Main file, module initiation and exit, registrations, etc.
  Copyright (C) 2005 Pete Zaitcev (zaitcev@redhat.com)
 Pseudo bus meaning "all buses" 
 All buses we know: struct mon_bus 
  Link a reader into the bus.
  This must be called with mon_lock taken because of mbus->ref.
  Unlink reader from the bus.
  This is called with mon_lock taken, so we can decrement mbus->ref.
 int (unlink_urb) (struct urb urb, int status); 
  Stop monitoring.
			
			  We do not change nreaders here, so rely on mon_lock.
		
		  A stop can be called for a dissolved mon_bus in case of
		  a reader staying across an rmmod foo_hcd, so test ->u_bus.
  Add a USB bus (usually by a modprobe foo-hcd)
  This does not return an error code because the core cannot care less
  if monitoring is not established.
  Remove a USB bus (either from rmmod foo-hcd or from a hot-remove event).
  Ops
  Tear usb_bus and mon_bus apart.
 We want synchronize_irq() here, but that needs an argument. 
  Initialize a bus for us:
   - allocate mon_bus
   - refcount USB bus struct
   - link
	
	  We don't need to take a reference to ubus, because we receive
	  a notification if the bus is about to be removed.
  Search a USB bus by number. Notice that USB bus numbers start from one,
  which we may later use to identify "all" with zero.
  This function must be called with mon_lock held.
  This is obviously inefficient and may be revised in the future.
 MOD_INC_USE_COUNT(which_module?);
		
		  This never happens, because the openclose paths in
		  file level maintain module use counters and so rmmod fails
		  before reaching here. However, better be safe...
 Force leak 
 SPDX-License-Identifier: GPL-2.0
  The USB Monitor, inspired by Dave Harding's USBMon.
  This is a text format reader.
  No, we do not want arbitrarily long data strings.
  Use the binary interface if you want to capture bulk data!
  Defined by USB 2.0 clause 9.3, table 9.2.
  This limit exists to prevent OOMs when the user process stops reading.
  If usbmon were available to unprivileged processes, it might be open
  to a local DoS. But we have to keep to root in order to prevent
  password sniffing from HID devices.
  Potentially unlimited number; we limit it for similar allocations.
  The usbfs limits this to 128, but we're not quite as generous.
 with 5 ISOs segs 
 Unsigned here, signed in URB. Historic. 
 submit, complete, etc. 
 From pointer, most of the time 
 Depends on type: xfer length or act length 
 Full number 
 In C, parent class can be placed anywhere 
 Usually syskerneldebugusbmon 
  mon_text_submit
  mon_text_complete
  May be called from an interrupt.
  This is called with the whole mon_bus locked, so no additional lock.
 '0' would be not as pretty. 
 '0' would be not as pretty. 
 For the text interface we copy only the first sg buffer 
 2^32 = 4294967296. Limit to 4096s. 
 Collecting status makes debugging sense for submits, too 
 Wasteful, but simple to understand: ISO 'C' is sparse. 
  Fetch next event from the circular buffer.
 err_busy:
	kmem_cache_destroy(rp->e_slab);
 ppos is not advanced since the llseek operation is not permitted. 
 ppos is not advanced since the llseek operation is not permitted. 
		
		  We do not count nwaiters, because ->release is supposed
		  to be called when all openers are gone only.
 PIPE_BULK   utype = 'B';
 PIPE_BULK   utype = 'B';
 Setup packet is present and captured 
 Unable to capture setup packet 
 No setup for this kind of URB 
 Display this many 
 unsigned long flags; 
	
	  In theory, e_list is protected by mbus->lock. However,
	  after mon_reader_del has finished, the following is the case:
	   - we are not on reader list anymore, so new events won't be added;
	   - whole mbus may be dropped if it was orphaned.
	  So, we better not touch mbus.
 spin_lock_irqsave(&mbus->lock, flags); 
 spin_unlock_irqrestore(&mbus->lock, flags); 
  Slab interface: constructor.
	
	  Nothing to initialize. No, really!
	  So, we fill it with garbage to emulate a reused object.
 SPDX-License-Identifier: GPL-2.0
  The USB Monitor, inspired by Dave Harding's USBMon.
  This is the 's' or 'stat' reader which debugs usbmon itself.
  Note that this code blows through locks, so make sure that
  dbgusbmon0s is well protected from non-root users.
 .write =	mon_stat_write, 
 .poll =		mon_stat_poll, 
 .unlocked_ioctl =	mon_stat_ioctl, 
 SPDX-License-Identifier: GPL-2.0
  The USB Monitor, inspired by Dave Harding's USBMon.
  This is a binary format reader.
  Copyright (C) 2006 Paolo Abeni (paolo.abeni@email.it)
  Copyright (C) 2006,2007 Pete Zaitcev (zaitcev@redhat.com)
  Defined by USB 2.0 clause 9.3, table 9.2.
 ioctl macros 
 #2 used to be MON_IOCX_URB, removed before it got into Linus tree 
 #9 was MON_IOCT_SETAPI 
  Some architectures have enormous basic pages (16KB for ia64, 64KB for ppc).
  But it's all right. Just use a simple way to make sure the chunk is never
  smaller than a page.
  N.B. An application does not know our chunk size.
  Woops, get_zeroed_page() returns a single page. I guess we're stuck with
  page-sized chunks for the time being.
  The magic limit was calculated so that it allows the monitoring
  application to pick data once in two ticks. This way, another application,
  which presumably drives the bus, gets to hog CPU, yet we collect our data.
  If HZ is 100, a 480 mbits bus drives 614 KB every jiffy. USB has an
  enormous overhead built into the bus protocol, so we need about 1000 KB.
  This is still too much for most cases, where we just snoop a few
  descriptor fetches for enumeration. So, the default is a "reasonable"
  amount for systems with HZ=250 and incomplete bus saturation.
  XXX What about multi-megabyte URBs which take minutes to transfer?
  The per-event API header (2 per URB).
  This structure is seen in userland as defined by the documentation.
 URB ID - from submission to callback 
 Same as in text API; extensible. 
 ISO, Intr, Control, Bulk 
 Endpoint number and transfer direction 
 Device address 
 Bus number 
 ktime_get_real_ts64 
 ktime_get_real_ts64 
 Length of data (submitted or actual) 
 Delivered length 
 Only for Control S-type 
 Actual number of ISO descriptors 
  ISO vector, packed into the head of data stream.
  This has to take 16 bytes to make sure that the end of buffer
  wrap is not happening in the middle of a descriptor.
 per file statistic 
 Can be 48 bytes or 64. 
 Length of data (can be zero) 
 Vector of events fetched 
 Number of events to fetch (out: fetched) 
 Number of events to flush 
 Having these two values same prevents wrapping of the mon_bin_hdr 
 API 0 (2.6.20) size 
 API 1 size: extra fields 
 Same number as usbfs allows, 2048 bytes. 
 max number of USB bus supported 
  The buffer: map of used pages.
 XXX just use page_to_virt everywhere? 
  This gets associated with an open file struct.
 The buffer: one per open. 
 Protect b_cnt, b_in 
 Current size of the buffer - bytes 
 Bytes used 
 Offsets into buffer - bytes 
 Amount of read data in curr. pkt. 
 The map array 
 Wait for data here 
 Protect b_read, b_out 
 A list of these is needed for "bus 0". Some time later. 
 Stats 
  This is a "chunked memcpy". It does not manipulate any counters.
		
		  Determine step_len.
		
		  Copy data and advance pointers.
  This is a little worse than the above because it's "chunked copy_to_user".
  The return value is an error code, not an offset.
		
		  Determine step_len.
		
		  Copy data and advance pointers.
  Allocate an (aligned) area in the buffer.
  This is called under b_lock.
  Returns ~0 on failure.
  This is the same thing as mon_buff_area_alloc, only it does not allow
  buffers to wrap. This is needed by applications which pass references
  into mmap-ed buffers up their stacks (libpcap can do that).
  Currently, we always have the header stuck with the data, although
  it is not strictly speaking necessary.
  When a buffer would wrap, we place a filler packet to mark the space.
		
		  This would wrap. Find if we still have space after
		  skipping to the end of the buffer. If we do, place
		  a filler packet and allocate a new packet.
  Return a few (kilo-)bytes to the head of the buffer.
  This is used if a data fetch fails.
 size &= ~(PKT_ALIGN-1);  -- we're called with aligned size 
  This has to be called under both b_lock and fetch_lock, because
  it accesses both b_cnt and b_out.
 If IOMMU coalescing occurred, we cannot trust sg_page 
 Copy up to the first non-addressable segment 
  This is the look-ahead pass in case of 'C Zi', when actual_length cannot
  be used to determine the length of the whole contiguous buffer.
	
	  Find the maximum allowable length, then allocate space.
 not an issue unless there's a subtle bug in a HCD somewhere 
 Cannot rely on endpoint number in case of control ep.0 
	
	  Fill the allocated area.
 Not incrementing cnt_lost. Just because. 
  Extract an event from buffer and copy it to user space.
  Wait if there is no event ready.
  Returns zero or error.
	
	  Check if whole packet was read, and if so, jump to the next one.
  Remove at most nevents from chunked buffer.
  Returns the number of removed events.
  Fetch at most max event offsets into the buffer and put them into vec.
  The events are usually freed later with mon_bin_flush.
  Return the effective number of events fetched.
  Count events. This is almost the same as the above mon_bin_fetch,
  only we do not store offsets into user vector, and we have no limit.
 struct mon_bus mbus = rp->r.m_bus;
		
		  N.B. This only returns the size of data, without the header.
		
		  Changing the buffer size will flush it's contents; the new
		  buffer is allocated before releasing the old one to be sure
		  the device will stay functional also in case of memory
		  pressure.
 Want to cast to u32 
 CONFIG_COMPAT 
 readable 
  open and close: just keep track of how many times the device is
  mapped, to use the proper memory allocation function.
  Map ring pages to user space.
 don't do anything here: "fault" will set up page table entries 
 .write =	mon_text_write, 
 Same as EAGAIN in Linux 
 SPDX-License-Identifier: GPL-2.0
  cdc-wdm.c
  This driver supports USB CDC WCM Device Management.
  Copyright (c) 2007-2009 Oliver Neukum
  Some code taken from cdc-acm.c
  Released under the GPLv2.
  Many thanks to Carl Nordbeck
 we cannot wait forever at flush() 
 CDC-WMC r1.1 requires wMaxCommand to be "at least 256 decimal (0x100)" 
 --- method tables --- 
 buffer for response 
 buffer for command 
 buffer for status 
 buffer for copy to user space 
 return intfdata if we own the interface, else look up intf in the list 
 --- callbacks --- 
	
	  only set a new error if there is no previous error.
	  Errors are only cleared during readopen
	  Avoid propagating -EPIPE (stall) to userspace since it is
	  better handled as an empty read
 The buffer would overflow 
 we may already be in overflow 
		
		  Since there was an error, userspace may decide to not read
		  any data after poll'ing.
		  We should respond to further attempts from the device to send
		  data, so that we can get unstuck.
 unplug 
 halt is cleared in work 
 the order here is essential 
	
	   the order here is not essential
	   it is symmetrical just to be nice
 concurrent writes and disconnect 
 using common endpoint 0 
 already converted 
 for wdm_wait_for_response() 
  Submit the read urb if resp_count is non-zero.
  Called with desc->iuspin locked
 submit read urb only if the device is waiting for it 
 make sure the next notification trigger a submit 
concurrent reads 
 may have happened while we slept 
 read completed, error happened 
		
		  recheck whether we've lost the race
		  against the completion handler
 lost race 
 zero length read 
 in case we had outstanding data 
 Use long here because (int) MAX_SCHEDULE_TIMEOUT < 0. 
	
	  Needs both flags. We cannot do with one because resetting it would
	  cause a race with write() yet we need to signal a disconnect.
	
	  To report the correct error. This is best effort.
	  We are inevitably racing with the hardware.
  You need to send a signal when you react to malicious or defective hardware.
  Also, don't abort when fsync() returned -EINVAL, for older kernels which do
  not implement wdm_flush() will return -EINVAL.
  Same with wdm_fsync(), except it uses finite timeout in order to react to
  malicious or defective hardware which ceased communication after close() was
  implicitly called due to process termination.
 using write lock to protect desc->count 
 using write lock to protect desc->count 
 must avoid dev_printk here as desc->intf is invalid 
 --- WWAN framework integration --- 
	 The interface is both exposed via the WWAN framework and as a
	  legacy usbmisc chardev. If chardev is already open, just fail
	  to prevent concurrent usage. Otherwise, switch to WWAN mode.
 tx is allowed 
 Start getting events 
 Stop all transfers and disable WWAN mode 
 One transfer at a time, stop TX until URB completion 
 Only register to WWAN core if protocoltype is known 
 Forward data to WWAN port 
 inbuf has been copied, it is safe to check for outstanding data 
 CONFIG_WWAN 
 CONFIG_WWAN 
 --- error handling --- 
 --- hotplug --- 
 this will be expanded and needed in hardware endianness 
 already converted 
 using common endpoint 0 
 need autopm_getput here to ensure the usbcore sees the new value 
  usb_cdc_wdm_register - register a WDM subdriver
  @intf: usb interface the subdriver will associate with
  @ep: interrupt endpoint to monitor for notifications
  @bufsize: maximum message size to support for readwrite
  @type: Typeprotocol of the transported data (MBIM, QMI...)
  @manage_power: call-back invoked during open and release to
                 manage the device's power
  Create WDM usb class character device and associate it with intf
  without binding, allowing another driver to manage the interface.
  The subdriver will manage the given interrupt endpoint exclusively
  and will issue control requests referring to the given intf. It
  will otherwise avoid interferring, and in particular not do
  usb_set_intfdatausb_get_intfdata on intf.
  The return value is a pointer to the subdriver's struct usb_driver.
  The registering driver is responsible for calling this subdriver's
  disconnect, suspend, resume, pre_reset and post_reset methods from
  its own.
 the spinlock makes sure no new urbs are generated in the callbacks 
 the desc->intf pointer used as list key is now invalid 
 if this is an autosuspend the caller does the locking 
 callback submits work - order is essential 
	
	  we notify everybody using poll of
	  an exceptional situation
	  must be done before recovery lest a spontaneous
	  message from the device is lost
 inform readwrite 
 unblock read 
 unblock write 
 SPDX-License-Identifier: GPL-2.0+
  usblp.c
  Copyright (c) 1999 Michael Gee	<michael@linuxspecific.com>
  Copyright (c) 1999 Pavel Machek	<pavel@ucw.cz>
  Copyright (c) 2000 Randy Dunlap	<rdunlap@xenotime.net>
  Copyright (c) 2000 Vojtech Pavlik	<vojtech@suse.cz>
 # Copyright (c) 2001 Pete Zaitcev	<zaitcev@redhat.com>
 # Copyright (c) 2001 David Paschal	<paschal@rcsis.com>
  Copyright (c) 2006 Oliver Neukum	<oliver@neukum.name>
  USB Printer Device Class driver for USB printers and printer cables
  Sponsored by SuSE
  ChangeLog:
 	v0.1 - thorough cleaning, URBification, almost a rewrite
 	v0.2 - some more cleanups
 	v0.3 - cleaner again, waitqueue fixes
 	v0.4 - fixes in unidirectional mode
 	v0.5 - add DEVICE_ID string support
 	v0.6 - never time out
 	v0.7 - fixed bulk-IN read and poll (David Paschal)
 	v0.8 - add devfs support
 	v0.9 - fix unplug-while-open paths
 	v0.10- remove sleep_on, fix error on oom (oliver@neukum.org)
 	v0.11 - add proto_bias option (Pete Zaitcev)
 	v0.12 - add hpoj.sourceforge.net ioctls (David Paschal)
 	v0.13 - alloc space for statusbuf (<status> not on stack);
 		use usb_alloc_coherent() for read buf & write buf;
       none  - Maintained in Linux kernel after v0.13
  Version Information
 ioctls: 
 Get device_id string: 
 The following ioctls were added for http:hpoj.sourceforge.net:
  Get two-int array:
  [0]=current protocol
      (1=USB_CLASS_PRINTER11, 2=USB_CLASS_PRINTER12,
          3=USB_CLASS_PRINTER13),
  [1]=supported protocol mask (mask&(1<<n)!=0 means
      USB_CLASS_PRINTER1n supported):
  Set protocol
      (arg: 1=USB_CLASS_PRINTER11, 2=USB_CLASS_PRINTER12,
          3=USB_CLASS_PRINTER13):
 Set channel number (HP Vendor-specific command): 
 Get two-int array: [0]=bus number, [1]=device address: 
 Get two-int array: [0]=vendor ID, [1]=product ID: 
 Perform class specific soft reset 
  A DEVICE_ID string may include the printer's serial number.
  It should end with a semi-colon (';').
  An example from an HP 970C DeskJet printer is (this is one long string,
  with the serial number changed):
MFG:HEWLETT-PACKARD;MDL:DESKJET 970C;CMD:MLC,PCL,PML;CLASS:PRINTER;DESCRIPTION:Hewlett-Packard DeskJet 970C;SERN:US970CSEPROF;VSTATUS:$HB0$NC0,ff,DN,IDLE,CUT,K1,C0,DP,NR,KP000,CP027;VP:0800,FL,B0;VJ:                    ;
  USB Printer Requests
 HP Vendor-specific 
 5 seconds 
  some arbitrary status buffer size;
  need a status buffer that is allocated via kmalloc(), not on stack
  Locks down the locking order:
  ->wmut locks wstatus.
  ->mut locks the whole usblp, except [rw]complete, and thus, by indirection,
  [rw]status. We only touch status when we know the side idle.
  ->lock locks what interrupt accesses.
 USB device 
 locks rcomplete, wcomplete 
 read transfer_buffer 
 status transfer_buffer 
 Counter for reads 
 Interface number 
 The interface 
	
	  Alternate-setting numbers and endpoints for each protocol
	  (USB_CLASS_PRINTER1{index=1,2,3}) that the device supports:
 minor number of device 
 bytes written or error 
 bytes ready or error 
 quirks flags 
 mode flags 
 True if open 
 True if not disconnected 
 interface is bidirectional 
 Paper Out happened 
 IEEE 1284 DEVICE ID string (ptr) 
 first 2 bytes are (big-endian) length 
 Quirks: various printer quirks are handled by this table & its flags. 
 reports bidir but requires unidirectional mode (no INsreads) 
 needs vendor USB init string 
 descriptor uses vendor-specific Class or SubClass 
 HP DeskJet 895C 
 HP DeskJet 880C 
 HP DeskJet 815C 
 HP DeskJet 810C812C 
 HP DeskJet 830C 
 HP DeskJet 885C 
 HP DeskJet 840C 
 HP DeskJet 816C 
 HP Deskjet 959C 
 NEC Picty900 (HP OEM) 
 NEC Picty760 (HP OEM) 
 NEC Picty920 (HP OEM) 
 NEC Picty800 (HP OEM) 
 Kyocera Mita FS 820, by zut <kernel@zut.de> 
 Brother Industries, Ltd HL-1440 Laser Printer 
 Seiko Epson Receipt Printer M129C 
 forward reference to make our lives easier 
 locks the existence of usblp's 
  Functions for usblp control messages.
	 High byte has the interface index.
	   Low byte has the alternate setting.
  See the description for usblp_select_alts() below for the usage
  explanation.  Look into your syskerneldebugusbdevices and dmesg in
  case of any trouble.
  URB callback.
  Get and print printer errors.
  File op functions.
	
	  We do not implement LP_ABORTOPENLPABORTOPEN for two reasons:
	   - We do not want persistent state which close(2) does not clear
	   - It is not used anyway, according to CUPS people
 we begin writeable 
 finish cleanup from disconnect 
 any URBs must be dead 
 No kernel lock - fine 
 Should we check file->f_mode & FMODE_WRITE before poll_wait()? 
 new-style ioctl number 
 get the DEVICE_ID string 
 truncate 
 old-style ioctl value 
		
		  Step 1: Submit next block.
		
		  Step 2: Wait for transfer to end, collect results.
 Presume that it's going to complete well. 
 Mark for poll(2) 
 Leave URB dangling, to be cleaned on close. 
		
		  This is critical: it must be our URB, not other writer's.
		  The wmut exists mainly to cover us here.
 Out of raise sequence 
  Notice that we fail to restart in a few cases: on EFAULT, on restart
  error, etc. This is the historical behaviour. In all such cases we return
  EIO, and applications loop in order to get the new read going.
 We don't want to leak USB return codes into errno. 
  Wait for the write path to come idle.
  This is called under the ->wmut, so the idle path stays idle.
  Our write path has a peculiar property: it does not buffer like a tty,
  but waits for the write to succeed. This allows our ->release to bug out
  without waiting for writes to drain. But it obviously does not work
  when O_NONBLOCK is set. So, applications setting O_NONBLOCK must use
  select(2) or poll(2) to wait for the buffer to drain before closing.
  Alternatively, set blocking mode with fcntl and issue a zero-size write.
 Paper out 
 Prod the printer, Gentoo#251237. 
  Wait for read bytes to become available. This probably should have been
  called usblp_r_lock_and_wait(), because we lock first. But it's a traditional
  name for functions which lock and return.
  We do not use wait_event_interruptible because it makes locking iffy.
 Keep it locked 
  Please check ->bidir and other such things outside for now.
 XXX Why here? 
  Checks for printers that have quirks, such as requiring unidirectional
  communication but reporting bidirectional; currently some HP printers
  have this flaw (HP 810, 880, 895, etc.), or needing an init string
  sent at each open (like some Epsons).
  Returns 1 if found, 0 if not found.
  HP recommended that we use the bidirectional interface but
  don't attempt any bulk IN transfers from the IN endpoint.
  Here's some more detail on the problem:
  The problem is not that it isn't bidirectional though. The problem
  is that if you request a device ID, or status information, while
  the buffers are full, the return data will end up in the print data
  buffer. For example if you make sure you never request the device ID
  while you are sending print data, and you don't try to query the
  printer status every couple of milliseconds, you will probably be OK.
	 Malloc and start initializing usblp structure so we can use it
	 Malloc device ID string buffer to the largest expected length,
	  since we can re-query it on an ioctl and a dynamic string
	
	  Allocate read buffer. We somewhat wastefully
	  malloc both regardless of bidirectionality, because the
	  alternate setting can be changed later via an ioctl.
 Allocate buffer for printer status 
 Lookup quirks for this printer. 
 Analyze and pick initial alternate settings and endpoints. 
 Setup the selected alternate setting and endpoints. 
 ->probe isn't ->ioctl 
 Retrieve and store the device ID string. 
  We are a "new" style driver with usb_device_id table,
  but our requirements are too intricate for simple match to handle.
  The "proto_bias" option may be used to specify the preferred protocol
  for all USB printers (1=USB_CLASS_PRINTER11, 2=USB_CLASS_PRINTER12,
  3=USB_CLASS_PRINTER13).  If the device supports the preferred protocol,
  then we bind to it.
  The best interface for us is USB_CLASS_PRINTER12, because it
  is compatible with a stream of characters. If we find it, we bind to it.
  Note that the people from hpoj.sourceforge.net need to be able to
  bind to USB_CLASS_PRINTER13 (MLC1284.4), so we provide them ioctls
  for this purpose.
  Failing USB_CLASS_PRINTER12, we look for USB_CLASS_PRINTER13,
  even though it's probably not stream-compatible, because this matches
  the behaviour of the old code.
  If nothing else, we bind to USB_CLASS_PRINTER11
  - the unidirectional interface.
 Find out what we have. 
 Look for the expected bulk endpoints. 
 Ignore buggy hardware without the right endpoints. 
 Turn off reads for buggy bidirectional printers. 
 If our requested protocol is supported, then use it. 
 Ordering is important here. 
 If nothing is available, then don't bind to this device. 
 Don't unnecessarily set the interface if there's a single alt. 
 Retrieves and caches device ID string.
  Returns length, including length bytes but not null terminator.
	 First two bytes are length in big-endian.
	  They count themselves, and we copy them into
 XXX Do we want this? What if someone is reading, should we fail? 
 not strictly necessary, but just in case 
 Seiko Epson Receipt Printer M129C 
 Terminating entry 
 SPDX-License-Identifier: GPL-2.0+
  cdc-acm.c
  Copyright (c) 1999 Armin Fuerst	<fuerst@in.tum.de>
  Copyright (c) 1999 Pavel Machek	<pavel@ucw.cz>
  Copyright (c) 1999 Johannes Erdfelt	<johannes@erdfelt.com>
  Copyright (c) 2000 Vojtech Pavlik	<vojtech@suse.cz>
  Copyright (c) 2004 Oliver Neukum	<oliver@neukum.name>
  Copyright (c) 2005 David Kubicek	<dave@awk.cz>
  Copyright (c) 2011 Johan Hovold	<jhovold@gmail.com>
  USB Abstract Control Model driver for USB modems and ISDN adapters
  Sponsored by SuSE
  acm_minors accessors
  Look up an ACM structure by minor. If found and not disconnected, increment
  its refcount and return it with its mutex held.
  Try to find an available minor number and if found, associate it with 'acm'.
 Release the minor number associated with 'acm'.  
  Functions for ACM control messages.
 devices aren't required to support these requests.
  the cdc acm descriptor tells whether they do...
  Write buffer management.
  All of these assume proper locks taken by the caller.
  Finish write. Caller must hold acm->write_lock
  Poke write.
  the caller is responsible for locking
  attributes exported through sysfs
  Interrupt handlers for various ACM device responses
 control interface reports status changes with "interrupt" transfers 
 success 
 this urb is terminated, clean up 
 size = notification-header + (optional) data 
 notification is transmitted fragmented, reassemble 
 Final freeing is done on disconnect. 
 notification complete 
	
	  Make sure URB processing is done before marking as free to avoid
	  racing with unthrottle() on another CPU. Matches the barriers
	  implied by the test_and_clear_bit() in acm_submit_read_urb().
	
	  Make sure URB is marked as free before checking the throttled flag
	  to avoid racing with unthrottle() on another CPU. Matches the
	  smp_mb() in unthrottle().
 data interface wrote those outgoing bytes 
 against acm_suspend() 
  TTY handlers
	
	  Suppress initial echoing for some devices which might send data
	  immediately after acm driver has been installed.
 FIXME: add missing ctrlout locking throughout driver 
 This is broken in too many devices to spam the logs 
	
	  FIXME: Why do we need this? Allocating 64K of physically contiguous
	  memory is really nasty...
	
	  Unthrottle device in case the TTY was closed while throttled.
	
	  Need to grab write_lock to prevent race with resume, but no need to
	  hold it due to the tty-port initialised flag.
	
	  Do not let the line discipline to know that we have a reserve,
	  or it might get too enthusiastic.
	
	  if the device was unplugged then any remaining characters fell out
	  of the connector ;)
	
	  This is inaccurate (overcounts), but it works.
 Matches the smp_mb__after_atomic() in acm_read_bulk_callback(). 
 FIXME: Needs to clear unsupported bits in the termios 
  USB probe and disconnect routines.
 Little helpers: writeread buffers free 
 Little helper: write buffers allocate 
 normal quirks 
 handle quirks deadly to normal probing
 we would crash 
 normal probing
 some broken devices designed for windows work this way 
 a popular other OS doesn't use it 
workaround for switched interfaces 
 Accept probe requests only for the control interface 
 workaround for switched endpoints 
 descriptors are swapped 
 undone in destruct() 
 export the country data 
 works around buggy devices 
 Clear driver data so that disconnect() returns early. 
 sibling interface is already cleaning up 
	
	  there is a circular dependency. acm_softint() can resubmit
	  the URBs in error handling so we need to block any
	  submission right away
		
		  delayed error checking because we must
		  do the write path at all cost
 CONFIG_PM 
 pending control transfers are lost 
  USB driver structure.
 quirky and broken devices 
 Microchip Technology, Inc. (formerly SMSC) 
 DISABLE ECHO in termios flag 
 Denso Cradle CU-321 
 has no union descriptor 
 Lenovo USB modem 
 has no union descriptor 
 Metricom GS Modem 
 has no union descriptor 
 Renesas USB Download mode 
 Don't echo banner 
 Renesas USB Download mode 
 Don't echo banner 
 Renesas USB Download mode 
 Don't echo banner 
 FIREFLY, MediaTek Inc; andrey.arapov@gmail.com 
 has no union descriptor 
 MediaTek Inc Preloader 
 DISABLE ECHO in termios flag 
 MediaTek Inc GPS 
 has no union descriptor 
 KYOCERA AH-K3001V 
 has no union descriptor 
 BT On-Air USB MODEM 
 has no union descriptor 
 ZyDAS 56K USB MODEM 
 ZyDAS 56K USB MODEM 
 firmware bug 
 ZyDAS 56K USB MODEM - new version 
 firmware bug 
 VeriFone Mx870 Gadget Serial 
 Uniden UBC125XLT 
 has no union descriptor 
 Motorola Q Phone 
 has no union descriptor 
 Zoom Telephonics Model 3095F USB MODEM 
 has no union descriptor 
 Conexant USB MODEM CX93010 
 has no union descriptor 
 Conexant USB MODEM RD02-D400 
 has no union descriptor 
 Shiro  Aztech USB MODEM UM-3100 
 has no union descriptor 
 Hiro (Conexant) USB MODEM H50228 
 has no union descriptor 
 Simtec Electronics Entropy Key 
 GW Instek AFG-2225 
 GW Instek AFG-125 
 Motorola MOTOMAGX phones 
 Motorola H24 HSPA module: 
 modem                                
 modem           + diagnostics        
 handle only modem interface          
 modem + AT port                      
 handle only modem interface          
 modem + AT port + diagnostics        
 handle only modem interface          
 modem                         + NMEA 
 handle only modem interface          
 modem           + diagnostics + NMEA 
 handle only modem interface          
 modem + AT port               + NMEA 
 handle only modem interface          
 modem + AT port + diagnostics + NMEA 
 handle only modem interface          
 Hummingbird huc56s (Conexant) 
	.driver_info = NO_UNION_NORMAL,  union descriptor misplaced on
					   data interface instead of
					   communications interface.
					   Maybe we should define a new
 Conexant CX93010-2x UCMxx 
 PSC Scanning, Magellan 800i 
 Alcatel OT-I650 
 reports zero length descriptor 
 Maretron USB100 
 reports zero length descriptor 
 DATECS FP-2000 
 reports zero length descriptor 
 Elatec GmbH TWN3 
 has misplaced union descriptor 
 Castles VEGA3000 
 reports zero length descriptor 
 ATOL FPrint 
	 Nokia S60 phones expose two ACM channels. The first is
	  a modem and is picked up by the standard AT-command
	  information below. The second is 'vendor-specific' but
	  is treated as a serial device at the S60 end, so we want
 Nokia 3250 
 Nokia 5500 Sport 
 Nokia E50 
 Nokia E60 
 Nokia E61 
 Nokia E61i 
 Nokia E62 
 Nokia E65 
 Nokia E70 
 Nokia N71 
 Nokia N73 
 Nokia N75 
 Nokia N77 
 Nokia N80 
 Nokia N91 & N91 8GB 
 Nokia N92 
 Nokia N93 
 Nokia N93i  
 Nokia 5700 XpressMusic 
 Nokia 6110 Navigator (China) 
 Nokia 6110 Navigator 
 Nokia 6120 classic &  
 Nokia 6121 classic 
 Nokia 6124 classic 
 Nokia E51 
 Nokia E66 
 Nokia E71 
 Nokia N76 
 Nokia N81 & N81 8GB 
 Nokia N82 
 Nokia N95 & N95-3 NAM 
 Nokia N95 8GB  
 Nokia 6210 Navigator, RM-367 
 Nokia 6210 Navigator, RM-419 
 Nokia 6220 Classic 
 Nokia 6650 
 Nokia N78 
 Nokia N85 
 Nokia N96 & N96-3  
 Nokia 5320 XpressMusic 
 Nokia 5320 XpressMusic 2G 
 Nokia N97, RM-505 
 Nokia 5230, RM-588 
 Nokia E63 
 Nokia E75 
 Nokia 6760 Slide 
 Nokia E52 
 Nokia E72 
 Nokia X6 
 Nokia N97 Mini 
 Nokia 5800 XpressMusic 
 Nokia E90 
 Nokia E55 
 Nokia N8 
 Nokia E7 
 Nokia C7 
 Samsung GTi8510 (INNOV8) 
 Support for Owen devices 
 Owen SI30 
 NOTE: non-Nokia COMMACM0xff is likely MSFT RNDIS... NOT a modem! 
 Application mode 
 Bootloader mode 
Samsung phone in firmware update mode 
 Exclude Infineon Flash Loader utility 
 Exclude ETAS ES58x 
 ES581.4 
 ES582.1 
 ES584.1 
 Telit 3G ACM only composition 
 Telit 3G ACM + ECM composition 
 Exclude Goodix Fingerprint Reader 
 Exclude Heimann Sensor GmbH USB appset demo 
 control interfaces without any protocol set 
 control interfaces with various AT-command sets 
 Intel 7260 modem 
  TTY driver structures.
  Init  exit.
 SPDX-License-Identifier: GPL-2.0+
  driversusbclassusbtmc.c - USB Test & Measurement class driver
  Copyright (C) 2007 Stefan Kopp, Gechingen, Germany
  Copyright (C) 2008 Novell, Inc.
  Copyright (C) 2008 Greg Kroah-Hartman <gregkh@suse.de>
  Copyright (C) 2018 IVI Foundation, Inc.
 Increment API VERSION when changing tmc.h with new flags or ioctls
  or when changing a significant behavior of the driver.
 Minimum USB timeout (in milliseconds) 
 Default USB timeout (in milliseconds) 
 Max number of urbs used in write transfers 
 IO buffer size used in generic readwrite functions 
  Maximum number of read cycles to empty bulk in endpoint during CLEAR and
  ABORT_BULK_IN requests. Ends the loop if (for whatever reason) a short
  packet is never read.
 terminating entry 
  This structure is the capabilities for the device
  See section 4.2.1.8 of the USBTMC specification,
  and section 4.2.2 of the USBTMC usb488 subclass
  specification for details.
 This structure holds private data for each USBTMC device. One copy is
  allocated for each USBTMC device in the driver's probe function.
 needed for abort 
 needed for abort 
 packet size of IN bulk 
 data for interrupt in endpoint handling 
 coalesced usb488_caps from usbtmc_dev_capabilities 
 fd of disconnected device 
 only one io function running at a time 
 lock for file_list 
  This structure holds private data for each USBTMC file handle.
 member of DEV_DEP_MSG_IN 
 lock for errors 
 data for generic_write 
 data for generic_read 
 Forward declarations 
 Protect reference to data from file structure until release 
 Store pointer in file structure's private data field 
  usbtmc_flush - called before file handle is closed
 wait for io to stop 
 prevent IO _AND_ usbtmc_interrupt 
 No transfer in progress and the Bulk-OUT FIFO is empty. 
		 The device returns this status if either:
		  - There is a transfer in progress, but the specified bTag
		    does not match.
		  - There is no transfer in progress, but the Bulk-OUT FIFO
		    is not empty.
 Data must be present. So use low timeout 300 ms 
 The device has 1 or more queued packets the Host can read 
 The Host must send CHECK_ABORT_BULK_IN_STATUS at a later time. 
 do not stress device with subsequent requests 
 bump interrupt bTag 
 1 is for SRQ see USBTMC-USB488 subclass spec section 4.3.1 
 Set RQS bit 
 Note! disconnect or close could be called in the meantime 
 dev can be invalid now! 
  Sends a TRIGGER Bulk-OUT command message
  See the USBTMC-USB488 specification, Table 2.
  Also updates bTag_last_write.
 Store bTag (in case we need to abort) 
 Increment bTag -- and increment again if zero 
 syncasync unlink faults aren't errors 
 status == -ENOENT || 
 Short packet 
 mutex already locked 
		 The device may send extra alignment bytes (up to
		  wMaxPacketSize â 1) to avoid sending a zero-length
		  packet
 round down to bufsize to avoid truncated data left 
 return the very first error 
 urb is anchored. We can release our reference. 
 synchronous case: must not happen 
 asynchronous case: ready, do not block or wait 
 return the very first error 
 short packet or ZLP received => ready 
 resubmit, since other buffers still not enough 
 Attention: killing urbs can take long time (2 ms) 
 no spinlock needed here 
 mutex already locked 
 syncasync unlink faults aren't errors 
 Get pointer to private data structure 
 prepare next urb to send 
		 fill bulk with 32 bit alignment to meet USBTMC specification
		  (size + 3 & ~3) rounds up and simplifies user code
 urb will be finally released by usb driver 
 All urbs are on the fly 
 mutex already locked 
  Get the generic write result
  Sends a REQUEST_DEV_DEP_MSG_IN message on the Bulk-OUT endpoint.
  @transfer_size: number of bytes to request from the device.
  See the USBTMC specification, Table 4.
  Also updates bTag_last_write.
	 Setup IO buffer for REQUEST_DEV_DEP_MSG_IN message
	  Refer to class specs for details
 Reserved 
 Use term character? 
 Reserved 
 Reserved 
 Send bulk URB 
 Store bTag (in case we need to abort) 
 Increment bTag -- and increment again if zero 
 Get pointer to private data structure 
 Loop until we have fetched everything we requested 
 Send bulk URB 
 Store bTag (in case we need to abort) 
 Sanity checks for the header 
 How many characters did the instrument send? 
 Remove the USBTMC header 
 Remove padding if it exists 
 Copy buffer to user space 
 There must have been an addressing problem 
 Update file position value 
 previous calls were async 
 Setup IO buffer for DEV_DEP_MSG_OUT message 
 Reserved 
 buffer[8] is set above... 
 Reserved 
 Reserved 
 Reserved 
 call generic_write even when remaining = 0 
 truncate alignment bytes 
add size of first urb
 do not stress device with subsequent requests 
 Send control data to device 
 Read control data from device 
  Get the usb timeout value
  Set the usb timeout value
	 Note that timeout = 0 means
	  MAX_SCHEDULE_TIMEOUT in usb_control_msg
  enablesdisables sending EOM on write
  Configure termination character for read()
	 Note that EPOLLPRI is now assigned to SRQ, and
	  EPOLLIN|EPOLLRDNORM to normal read data.
	 Note that the anchor submitted includes all urbs for BULK IN
	  and OUT. So EPOLLOUT is signaled when BULK OUT is empty and
	  all BULK IN urbs are completed and moved to in_anchor.
 SUCCESS 
 check for valid STB notification 
 check for SRQ notification 
 urb terminated, clean up 
 Initialize USBTMC bTag and other fields 
  2 <= bTag <= 127   USBTMC-USB488 subclass specification 4.3.1 
 USBTMC devices have only one setting, so use that 
 Find bulk endpoints 
 Find int endpoint 
 allocate int urb 
 Protect interrupt in endpoint data until iin_urb is freed 
 allocate buffer for interrupt in 
 fill interrupt urb 
 SPDX-License-Identifier: GPL-2.0
  Renesas USB driver RZA2 initialization and power control
  Copyright (C) 2019 Chris Brandt
  Copyright (C) 2019 Renesas Electronics Corporation
 Wait for PLL to become stable 
 SPDX-License-Identifier: GPL-1.0+
  Renesas USB driver R-Car Gen. 2 initialization and power control
  Copyright (C) 2014 Ulrich Hecht
  Copyright (C) 2019 Renesas Electronics Corporation
 SPDX-License-Identifier: GPL-1.0+
  Renesas USB driver
  Copyright (C) 2011 Renesas Solutions Corp.
  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
  HARDWARE LIMITATION 
  1) renesas_usbhs has a limited number of controllable devices.
     it can control only 9 devices in generally.
 	see DEVADDn  DCPMAXP  PIPEMAXP.
  2) renesas_usbhs pipe number is limited.
     the pipe will be re-used for each devices.
     so, software should control DATA01 sequence of each devices.
 		image of mod_host
  +--------+
  | udev 0 | --> it is used when set address
  +--------+
  +--------+					pipes are reused for each uep.
  | udev 1 |-+- [uep 0 (dcp) ] --+		pipe will be switched when
  +--------+ |			  |		other device requested
 	      +- [uep 1 (bulk)]	--|---+		   +--------------+
 	      |			  +--------------> | pipe0 (dcp)  |
 	      +- [uep 2 (bulk)]	-@    |		   +--------------+
 				      |		   | pipe1 (isoc) |
  +--------+			      |		   +--------------+
  | udev 2 |-+- [uep 0 (dcp) ]	-@    +----------> | pipe2 (bulk) |
  +--------+ |					   +--------------+
 	      +- [uep 1 (int) ]	----+	  +------> | pipe3 (bulk) |
 				    |	  |	   +--------------+
  +--------+			    +-----|------> | pipe4 (int)  |
  | udev 3 |-+- [uep 0 (dcp) ]	-@	  |	   +--------------+
  +--------+ |				  |	   | ....	  |
 	      +- [uep 1 (bulk)]	-@	  |	   | ....	  |
 	      |				  |
 	      +- [uep 2 (bulk)]-----------+
  @ :	uep requested free pipe, but all have been used.
 	now it is waiting for free pipe
 		struct
 list of usbhsh_ep 
 attached pipe 
 attached udev 
 list to usbhsh_device 
 pipe attach counter 
 see DEVADDn  DCPMAXP  PIPEMAXP 
 see DEVADDn :: HUBPORT 
 USB_PORT_STAT_xxx 
 		macro
 		req allocfree
 		status
	
	  we can decide some device is attached or not
	  by checking mod.irq_attch
	  see
	 	usbhsh_irq_attch()
	 	usbhsh_irq_dtch()
 		pipe control
 DCP is out of sequence control 
	
	  renesas_usbhs pipe has a limitation in a number.
	  So, driver should re-use the limited pipe for each deviceendpoint.
	  DATA01 sequence should be saved for it.
	  see [image of mod_host]
	      [HARDWARE LIMITATION]
	
	  next sequence depends on actual_length
	 
	  ex) actual_length = 1147, maxp = 512
	  data0 : 512
	  data1 : 512
	  data0 : 123
	  data1 is the next sequence
  spin lock 
	
	  if uep has been attached to pipe,
	  reuse it
 check pipe type 
 check pipe direction if normal pipe 
 check pipe is free 
		
		  attach pipe to uep
		 
		  usbhs_pipe_config_update() should be called after
		  usbhs_set_device_config()
		  see
		   DCPMAXPPIPEMAXP
  spin unlock 
  spin lock 
 last user 
 detach pipe from uep 
  spin unlock 
 		endpoint control
  spin lock 
	
	  init endpoint
  spin unlock 
  spin lock 
 remove this endpoint from udev 
  spin unlock 
 		device control
 usbhsh_device_attach() is still not called 
 if it is device0, return it 
 return attached device 
	
	  This function should be called only while urb is pointing to device0.
	  It will attach unused usbhsh_device to urb (usbv),
	  and initialize device0.
	  You can use usbhsh_device_get() to get "current" udev,
	  and usbhsh_usbv_to_udev() is for "attached" udev.
  spin lock 
	
	  find unused device
		
		  usbhsh_usbv_to_udev()
		  usbhsh_udev_to_usbv()
		  will be enable
  spin unlock 
 uep will be attached 
	
	  set device0 config
	
	  set new device config
 if udev is not connected to rhdev, it means parent is Hub 
	
	  There is nothing to do if it is device0.
	  see
	   usbhsh_device_attach()
	   usbhsh_device_get()
  spin lock 
	
	  usbhsh_usbv_to_udev()
	  usbhsh_udev_to_usbv()
	  will be disable
  spin unlock 
 		queue pushpop
 this ureq will be freed on usbhsh_queue_done() 
		
		  if all packet are gone, usbhsh_endpoint_disable()
		  will be called.
		  then, attached deviceendpointpipe will be detached
 		DCP setup stage
	
	  wait setup packet ACK
	  see
	 	usbhsh_irq_setup_ack()
	 	usbhsh_irq_setup_err()
 copy original request 
	
	  renesas_usbhs can not use original usb address.
	  see HARDWARE LIMITATION.
	  modify usb address here to use attached device.
	  see usbhsh_device_attach()
 udev is a attached device 
 set request 
	
	  wait setup packet ACK
 		DCP data stage
 this ureq was connected to urb when usbhsh_urb_enqueue()  
 this ureq will be freed on usbhsh_data_stage_packet_done() 
 		DCP status stage
 This ureq will be freed on usbhsh_queue_done() 
	
	  setup stage
	 
	  usbhsh_send_setup_stage_packet() wait SACKSIGN
	
	  data stage
	 
	  It is pushed only when urb has buffer.
	
	  status stage
	
	  start pushed packets
 		dma map functions
 it can not use scattergather 
 		for hc_driver
	
	  attach udev if needed
	  see [image of mod_host]
	
	  attach endpoint if needed
	  see [image of mod_host]
	
	  attach pipe to endpoint
	  see [image of mod_host]
	
	  push packet
	
	  this function might be called manytimes by same hcdep
	  in-endpoint == out-endpoint if ep == dcp.
	
	  if there is no endpoint,
	  free device
 only 1 root hub 
	
	  does port stat was changed ?
	  check USB_PORT_STAT_C_xxx << 16
 only 1 root hub 
 common error 
 check wValue 
 status change is not needed 
 setclear status 
 only 1 root hub 
 Hub Feature 
 Port Feature 
 Get status 
 nothing to do 
	
	  generic hardware linkage
	
	  managing io requests and associated device resources
	
	  root hub
 		interrupt functions
	
	  attch interrupt might happen infinitely on some device
	  (on self power USB hub ?)
	  disable it here.
	 
	  usbhsh_is_running() becomes effective
	  according to this process.
	  see
	 	usbhsh_is_running()
	 	usbhsh_urb_enqueue()
	
	  enable attch interrupt again
	 
	  usbhsh_is_running() becomes invalid
	  according to this process.
	  see
	 	usbhsh_is_running()
	 	usbhsh_urb_enqueue()
	
	  usbhsh_queue_force_pop_all() should be called
	  after usbhsh_is_running() becomes invalid.
 see usbhsh_urb_enqueue() 
 see usbhsh_urb_enqueue() 
 		module startstop
 init all pipe 
		
		  data "output" will be finished as soon as possible,
		  but there is no guaranty at data "input" case.
		 
		  "input" needs "standby" pipe.
		  So, "input" direction pipe > "output" direction pipe
		  is good idea.
		 
		  1st USB_ENDPOINT_XFER_xxx will be output direction,
		  and the other will be input direction here.
		 
		  ex)
		  ...
		  USB_ENDPOINT_XFER_ISOC -> dir out
		  USB_ENDPOINT_XFER_ISOC -> dir in
		  USB_ENDPOINT_XFER_BULK -> dir out
		  USB_ENDPOINT_XFER_BULK -> dir in
		  USB_ENDPOINT_XFER_BULK -> dir in
		  ...
 add hcd 
	
	  pipe initialize and enable DCP
	
	  system config enble
	  - HI speed
	  - host
	  - usb module
	
	  enable irq callback
	
	  disable irq callback
 disable sys 
 initialize hcd 
 for lowfull speed 
	
	  CAUTION
	 
	  There is no guarantee that it is possible to access usb module here.
	  Don't accesses to it.
	  The accesse will be enable after "usbhsh_start"
	
	  register itself
 init hpriv 
 init all device 
 SPDX-License-Identifier: GPL-1.0+
  Renesas USB driver
  Copyright (C) 2011 Renesas Solutions Corp.
  Copyright (C) 2019 Renesas Electronics Corporation
  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 see usbhs_pipe_select_fifo 
 		packet initialize
 		packet control function
  spin lock 
	
	  each pkt must hold own handler.
	  because handler might be changed by its situation.
	  dma handler -> pio handler.
  spin unlock 
  spin lock 
  spin unlock 
  spin lock 
  spin unlock 
 		irq enabledisable function
	
	  And DCP pipe can NOT use "ready interrupt" for "send"
	  it should use "empty" interrupt.
	  see
	    "Operation" - "Interrupt Function" - "BRDY Interrupt"
	 
	  on the other hand, normal pipe can use "ready interrupt" for "send"
	  even though it is singledouble buffer
 		FIFO ctrl
 The FIFO port is accessible 
		
		  This driver checks the pipe condition first to avoid -EBUSY
		  from usbhsf_fifo_barrier() if the pipe is RX direction and
		  empty.
	
	  if non-DCP pipe, this driver should set BCLR when
	  usbhsf_fifo_barrier() returns 0.
 mask of ISEL | CURPIPE 
 CURPIPE 
 ISEL 
 "base" will be used below  
 check ISEL and CURPIPE value 
 		DCP status stage
 CFIFO 
 DATA1 
 CFIFO 
 DATA1 
 		DCP data stage (push)
 DATA1 
	
	  change handler to PIO push
 		DCP data stage (pop)
	
	  prepare pop for DCP should
	   - change DCP direction,
	   - clear fifo
	   - DATA1
 DATA1 
	
	  change handler to PIO pop
 		PIO push handler
 CFIFO 
 -1 sequence will be ignored 
 inaccessible pipe is not an error 
	
	  FIXME
	 
	  32-bit access only
 the rest operation 
	
	  variable update
 there are remainder data 
 short packet 
 send zero packet ? 
	
	  pipeirq handling
	
	  pipe is busy.
	  retry in interrupt
 		PIO pop handler
	
	  pipe enable to prepare packet receive
 -1 sequence will be ignored 
 CFIFO 
	
	  update actual length first here to decide disable pipe.
	  if this pipe keeps BUF status and all data were popped,
	  then, next interrupttoken will be issued again
 receive all data 
 short packet 
		
		  If function mode, since this controller is possible to enter
		  Control Write status stage at this timing, this driver
		  should not disable the pipe. If such a case happens, this
		  controller is not able to complete the status stage.
 disable pipe first 
	
	  Buffer clear if Zero-Length packet
	 
	  see
	  "Operation" - "FIFO Buffer Memory" - "FIFO Port Function"
	
	  FIXME
	 
	  32-bit access only
 the rest operation 
 		DCP ctrol statge handler
 		DMA fifo functions
 		DMA push handler
 use PIO if packet is less than pio_dma_border or pipe is DCP 
 check data length if this driver don't use USB-DMAC 
 check buffer alignment 
 return at this time if the pipe is running 
 get enable DMA fifo 
 FIXME: Workaound for usb dmac that driver can be used in atomic 
	
	  change handler to PIO
 there are remainder data 
 short packet 
 send zero packet? 
 change handler to PIO 
 		DMA pop handler
 use PIO if packet is less than pio_dma_border or pipe is DCP 
 return at this time if the pipe is running 
 DMA 
	
	  usbhs_fifo_dma_pop_handler :: prepare
	  enabled irq to come here.
	  but it is no longer needed for DMA. disable it.
	
	  change handler to PIO
 get enable DMA fifo 
 8byte alignment 
 use PIO if packet is less than pio_dma_border 
 8byte alignment 
 DMA 
	
	  usbhs_fifo_dma_pop_handler :: prepare
	  enabled irq to come here.
	  but it is no longer needed for DMA. disable it.
	
	  change handler to PIO
 receive all data 
 short packet 
 re-enable 
	
	  Since the driver disables rx_irq in DMA mode, the interrupt handler
	  cannot the BRDYSTS. So, the function clears it here because the
	  driver may use PIO mode next time.
 The driver can assume the rx transaction is always "done" 
 		DMA setting
	
	  FIXME
	 
	  usbhs doesn't recognize id = 0 as valid DMA
	
	  To avoid complex handing for DnFIFOs, the driver uses each
	  DnFIFO as TX or RX direction (not bi-direction).
	  So, the driver uses odd channels for TX, even channels for RX.
 		irq functions
	
	  search interrupted "pipe"
	  not "uep".
	
	  search interrupted "pipe"
	  not "uep".
 CFIFO 
 clear DCP FIFO of transmission 
 clear DCP FIFO of reception 
 		fifo init
 CFIFO 
 DFIFO 
 SPDX-License-Identifier: GPL-1.0+
  Renesas USB driver
  Copyright (C) 2011 Renesas Solutions Corp.
  Copyright (C) 2019 Renesas Electronics Corporation
  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 		autonomy
  these functions are used if platform doesn't have external phy.
   -> there is no "notify_hotplug" callback from platform
   -> call "notify_hotplug" by itself
   -> use own interrupt to connectdisconnect
   -> it mean module clock is always ON
              ~~~~~~~~~~~~~~~~~~~~~~~~~
 		host  gadget functions
  renesas_usbhs hostgadget can register itself by below functions.
  these functions are called when probe
 id < 0 mean no current 
	
	  install hostgadget driver
 irq settings 
 		status functions
	
	  return value
	 
	  IDLE_SETUP_STAGE
	  READ_DATA_STAGE
	  READ_STATUS_STAGE
	  WRITE_DATA_STAGE
	  WRITE_STATUS_STAGE
	  NODATA_STATUS_STAGE
	  SEQUENCE_ERROR
  spin lock 
 mask 
  spin unlock 
	
	  Check whether the irq enable registers and the irq status are set
	  when IRQF_SHARED is set.
 		interrupt
 acknowledge magical interrupt sources 
 acknowledge magical interrupt sources 
	
	  clear interrupt
	 
	  The hardware is _very_ picky to clear interrupt bit.
	  Especially INTSTS0_MAGIC, INTSTS1_MAGIC value.
	 
	  see
	 	"Operation"
	 	 - "Control Transfer (DCP)"
	 	   - Function :: VALID bit should 0
	
	  The driver should not clear the xxxSTS after the line of
	  "call irq callback functions" because each "if" statement is
	  possible to call the callback function for avoiding any side effects.
	
	  call irq callback functions
	  see also
	 	usbhs_irq_setting_update
 INTSTS0 
 INTSTS1 
	
	  BEMPENBBRDYENB are picky.
	  below method is required
	 
	   - clear  INTSTS0
	   - update BEMPENBBRDYENB
	   - update INTSTS0
	
	  see also
	 	usbhs_interrupt
		
		  INTSTS0
			
			  INTSTS1
 SPDX-License-Identifier: GPL-1.0+
  Renesas USB driver
  Copyright (C) 2011 Renesas Solutions Corp.
  Copyright (C) 2019 Renesas Electronics Corporation
  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 		struct
 protect the pipe 
 		macro
 status 
 		queue pushpop
 		dma mapunmap
 it can not use scattergather 
 		USB_TYPE_STANDARD  clear feature functions
 		USB_TYPE_STANDARD  set feature functions
 		USB_TYPE_STANDARD  get status functions
 free allocated recip-bufferusb_request 
 alloc new usb_request for recip 
 alloc recip data buffer 
 recip data is status 
 allocated usb_requestbuffer will be freed 
 push packet 
 		USB_TYPE handler
 		irq functions
  it will be called from usbhs_interrupt
	
	  see Manual
	 
	   "Operation"
	   - "Interrupt Function"
	     - "Control Transfer Stage Transition Interrupt"
	       - Fig. "Control Transfer Stage Transitions"
	
	  get usb request
	
	  setup stage  run recip
 		usb_dcp_ops
 		usb_ep_ops
	
	  if it already have pipe,
	  nothing to do
 set epnum  maxp 
		
		  usbhs_fifo_dma_pushpop_handler try to
		  use dmaengine if possible.
		  It will use pio handler if impossible.
 param check 
	
	  To dequeue a request, this driver should call the usbhsg_queue_pop()
	  even if the pipe is NULL.
  spin lock 
	
	  According to usb_ep_set_halt()'s description, this function should
	  return -EAGAIN if the IN endpoint has any queue or data. Note
	  that the usbhs_pipe_is_dir_in() returns false if the pipe is an
	  IN endpoint in the gadget mode.
  spin unlock 
 		pullup control
 		usb module startend
  spin lock 
 not ready 
  spin unlock 
 not ready is not error 
	
	  enable interrupt and systems if ready
	
	  pipe initialize and enable DCP
 dcp init instead of usbhsg_ep_enable() 
	
	  system config enble
	  - HI speed
	  - function
	  - usb module
	
	  enable irq callback
  spin lock 
 already done 
  spin unlock 
 already done is not error 
	
	  disable interrupt and systems if 1st try
 disable all irq 
 disable sys 
 disable all eps 
  VBUS provided by the PHY
 		linux usb function
 connect to bus through transceiver 
 get vbus using phy versions 
 first hook up the driver ... 
 		usb gadget ops
 cable disconnect 
	
	  CAUTION
	 
	  There is no guarantee that it is possible to access usb module here.
	  Don't accesses to it.
	  The accesse will be enable after "usbhsg_start"
	
	  register itself
 init gpriv 
	
	  init gadget
	
	  init usb_ep
 init DCP 
 init normal pipe 
 SPDX-License-Identifier: GPL-2.0
  Renesas USB driver R-Car Gen. 3 initialization and power control
  Copyright (C) 2016-2019 Renesas Electronics Corporation
 32-bit register 
 32-bit register 
 32-bit register 
 Low Power Status register (LPSTS) 
 R-Car D3 only: USB General control register (UGCTRL) 
  USB General control register 2 (UGCTRL2)
  Remarks: bit[31:11] and bit[9:6] should be 0
 bit[3:0] should be B'0001 
 R-Car D3 only: USB General status register (UGSTS) 
 The controller on R-Car Gen3 needs to wait up to 45 usec 
 R-Car D3 needs to release UGCTRL.PLLRESET 
 release PLLRESET 
 SPDX-License-Identifier: GPL-2.0
  Renesas USB driver RZA initialization and power control
  Copyright (C) 2018 Chris Brandt
  Copyright (C) 2018-2019 Renesas Electronics Corporation
 Input Clock Selection (NOTE: ch0 controls both ch0 and ch1) 
 Select 12MHz XTAL 
 Enable USB PLL (NOTE: ch0 controls both ch0 and ch1) 
 SPDX-License-Identifier: GPL-1.0+
  Renesas USB driver
  Copyright (C) 2011 Renesas Solutions Corp.
  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 		macros
  for debug
 		DCPCTRPIPEnCTR functions
 		DCPPIPE functions
 		DCPCFGPIPECFG functions
 		PIPEnTRNPIPEnTRE functions
	
	  It is impossible to calculate address,
	  since PIPEnTRN addresses were mapped randomly.
	
	  It is impossible to calculate address,
	  since PIPEnTRE addresses were mapped randomly.
 		PIPEBUF
 		DCPMAXPPIPEMAXP
 		pipe control functions
	
	  On pipe, this is necessary before
	  accesses to below registers.
	 
	  PIPESEL	: usbhsp_pipe_select
	  PIPECFG	: usbhsp_pipe_cfg_xxx
	  PIPEBUF	: usbhsp_pipe_buf_xxx
	  PIPEMAXP	: usbhsp_pipe_maxp_xxx
	  PIPEPERI
	
	  if pipe is dcp, no pipe is selected.
	  it is no problem, because dcp have its register
	
	  make sure....
	 
	  Modify these bits when CSSTS = 0, PID = NAK, and no pipe number is
	  specified by the CURPIPE bits.
	  When changing the setting of this bit after changing
	  the PID bits for the selected pipe from BUF to NAK,
	  check that CSSTS = 0 and PBUSY = 0.
	
	  CURPIPE bit = 0
	 
	  see also
	   "Operation"
	   - "Pipe Control"
	    - "Pipe Control Registers Switching Procedure"
 Do not support for DCP pipe 
 		PID ctrl
	
	  see
	  "Pipe n Control Register" - "PID"
 see "Pipe n Control Register" - "PID" 
 see "Pipe n Control Register" - "PID" 
	
	  see
	  "Pipe n Control Register" - "PID"
	
	  clear and disable transfer counter for INOUT pipe
	
	  Only IN direction bulk pipe can use transfer count.
	  Without using this function,
	  received data will break if it was large data size.
	  see PIPEnTRNPIPEnTRE for detail
 enable 
 		pipe setup
	
	  PIPECFG
	 
	  see
	   - "Register Descriptions" - "PIPECFG" register
	   - "Features"  - "Pipe configuration"
	   - "Operation" - "Pipe Control"
 TYPE 
 BFRE 
 FIXME 
 DBLB: see usbhs_pipe_config_update() 
 CNTMD 
 FIXME 
 DIR 
 SHTNAK 
 EPNUM 
 see usbhs_pipe_config_update() 
	
	  PIPEBUF
	 
	  see
	   - "Register Descriptions" - "PIPEBUF" register
	   - "Features"  - "Pipe configuration"
	   - "Operation" - "FIFO Buffer Memory"
	   - "Operation" - "Pipe Control"
 change buff_size to register value 
 		pipe control
	
	  see
	 	usbhs_pipe_config_update()
	 	usbhs_dcp_malloc()
	
	  sequence
	   0  : data0
	   1  : data1
	   -1 : no change
 Should call usbhsp_pipe_select() before 
 check if the driver needs to change the BFRE value 
	
	  find target pipe
	
	  initialize pipe flags
 pipe force init 
 make sure pipe is not busy 
	
	  epnum  maxp are still not set to this pipe.
	  call usbhs_pipe_config_update() after this function !!
 		dcp control
	
	  call usbhs_pipe_config_update() after this function !!
 funconly 
 		pipe module function
 This driver expects 1st pipe is DCP 
	
	  init pipe
 SPDX-License-Identifier: GPL-1.0+
  Renesas USB driver
  Copyright (C) 2011 Renesas Solutions Corp.
  Copyright (C) 2019 Renesas Electronics Corporation
  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 		image of renesas_usbhs
  ex) gadget case
  mod.c
  mod_gadget.c
  mod_host.c		pipe.c		fifo.c
 			+-------+	+-----------+
 			| pipe0 |------>| fifo pio  |
  +------------+	+-------+	+-----------+
  | mod_gadget |=====> | pipe1 |--+
  +------------+	+-------+  |	+-----------+
 			| pipe2 |  |  +-| fifo dma0 |
  +------------+	+-------+  |  |	+-----------+
  | mod_host   |	| pipe3 |<-|--+
  +------------+	+-------+  |	+-----------+
 			| ....  |  +--->| fifo dma1 |
 			| ....  |	+-----------+
  platform call back
  renesas usb support platform callback function.
  Below macro call it.
  if platform doesn't have callback, it return 0 (no error)
 		common functions
 		syscfg functions
	
	  if enable
	 
	  - select Host mode
	  - D+ LineD- Line Pull-down
 CNEN bit is required for function operation 
	
	  if enable
	 
	  - select Function mode
	  - D+ Line Pull-up is disabled
	       When D+ Line Pull-up is enabled,
	       calling usbhs_sys_function_pullup(,1)
 		frame functions
 		usb request functions
 		busvbus functions
 		device configuration
 		interrupt functions
 		local functions
 set bus wait if platform have 
 The first clock should exist 
	
	  To backward compatibility with old DT, this driver checks the return
	  value if it's -ENOENT or not.
 		platform default param
 commonly used on old SH-Mobile SoCs 
 commonly used on newer SH-Mobile and R-Car SoCs 
 		power control
 enable PM 
 enable clks 
 enable platform power 
 USB on 
 USB off 
 disable platform power 
 disable clks 
 disable PM 
 		hotplug
	
	  get vbus status from platform
	
	  get id from platform
 power on 
 bus init 
 module start 
 module stop 
 bus init 
 power off 
 reset phy for next connection 
 		notify hotplug
	
	  This functions will be called in interrupt.
	  To make sure safety context,
	  use workqueue for usbhs_notify_hotplug
 		platform functions
 check device node 
 check platform information 
 platform data 
 usb private data 
	
	  care platform info
 set default param if platform doesn't have 
 64byte 
 FIXME 
 runtime power control ? 
	
	  priv settings
 call pipe and module init 
 dev_set_drvdata should be called after usbhs_mod_init 
	
	  deviece reset here because
	  USB device might be used in boot loader.
 check GPIO determining if USB function should be enabled 
	
	  platform call
	 
	  USB phy setup might depend on CPUBoard.
	  If platform has its callback functions,
	  call it here.
 reset phy for connection 
 power control 
	
	  manual call notify_hotplug for cold plug
 power off 
 SPDX-License-Identifier: GPL-2.0+
  twl6030_usb - TWL6030 USB transceiver, talking to OMAP OTG driver.
  Copyright (C) 2010 Texas Instruments Incorporated - https:www.ti.com
  Author: Hema HK <hemahk@ti.com>
 usb register definitions 
 to be moved to LDO 
 In module TWL6030_MODULE_PM_MASTER 
 In module TWL6030_MODULE_PM_RECEIVER 
 in module TWL6030_MODULE_MAIN_CHARGE 
 for vbus reporting with irqs disabled 
 used to check initial cable status after probe 
 used to set vbus, in atomic path 
-------------------------------------------------------------------------
 Set to OTG_REV 1.3 and turn on the ID_WAKEUP_COMP 
 Program CFG_LDO_PD2 register and set VUSB bit 
 Program MISC2 register and set bit VUSB_IN_VBAT 
 Program the USB_VBUS_CTRL_SET and set VBUS_ACT_COMP bit 
	
	  Program the USB_ID_CTRL_SET register to enable GND drive
	  and the ID comparators
	
	  Start driving VBUS. Set OPA_MODE bit in CHARGERUSB_CTRL1
	  register. This enables boost mode.
 init spinlock for workqueue 
 SPDX-License-Identifier: GPL-2.0
	
	  If we leave PHY wakeup enabled then AM33XX wakes up
	  immediately from DS0. To avoid this we mark dev->power.can_wakeup
	  to false. The same is checked in suspend routine to decide
	  on whether to enable PHY wakeup or not.
	  PHY wakeup works fine in standby mode, there by allowing us to
	  handle remote wakeup, wakeup on disconnect and connect.
	
	  Enable phy wakeup only if dev->power.can_wakeup is true.
	  Make sure to enable wakeup to support remote wakeup	in
	  standby mode ( same is not supported in OFF(DS0) mode).
	  Enable it by doing
	  echo enabled > sysbusplatformdevices<usb-phy-id>powerwakeup
 SPDX-License-Identifier: GPL-2.0
	
	  Give the PHY ~1ms to complete the power up operation.
	  Tests have shown unstable behaviour if other USB PHY related
	  registers are written too shortly after such a transition.
 SPDX-License-Identifier: GPL-2.0
  OMAP OTG controller driver
  Based on code from tahvo-usb.c and isp1301_omap.c drivers.
  Copyright (C) 2005-2006 Nokia Corporation
  Copyright (C) 2004 Texas Instruments
  Copyright (C) 2004 David Brownell
 Set B-session valid. 
 Set A-session valid. 
 Set B-session end to indicate no VBUS. 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2011 Marvell International Ltd. All rights reserved.
  Author: Chao Xie <chao.xie@marvell.com>
 	   Neil Zhang <zhangwm@marvell.com>
 Stop the controller 
 Reset the controller to get default values 
 CONFIG_USB 
 work queue is single thread, or we need spin_lock to protect 
			
			  Now, we directly enter A_HOST. So set b_conn = 1
			  here. In fact, it need host driver to notify us.
			
			  Now, we has exited A_HOST. So set b_conn = 0
			  here. In fact, it need host driver to notify us.
	
	  if we have vbus, then the vbus detection for B-device
	  will be done by mv_otg_inputs_irq().
 The clock may disabled at this time 
 We will use this interface to change to A device 
 The clock may disabled and we need to set irq for ID detected 
 OTG common part 
 we will acces controller register, so enable the udc controller 
 SPDX-License-Identifier: GPL-2.0+
  USB of helper code
  of_usb_get_phy_mode - Get phy mode for given device_node
  @np:	Pointer to the given device_node
  The function gets phy interface string from property 'phy_type',
  and returns the corresponding enum usb_phy_interface
 SPDX-License-Identifier: GPL-2.0+
  Generic ULPI USB transceiver support
  Copyright (C) 2009 Daniel Mack <daniel@caiaq.de>
  Based on sources from
    Sascha Hauer <s.hauer@pengutronix.de>
    Freescale Semiconductors
 ULPI hardcoded IDs, used for probing 
	
	  ULPI Specification rev.1.1 default
	  for DpDmPulldown is enabled.
	
	  ULPI Specification rev.1.1 default
	  for XcvrSelect is Full Speed.
	
	  ULPI Specification rev.1.1 default
	  for OpMode is Normal Operation.
	
	  ULPI Specification rev.1.1 default
	  for SuspendM is Powered.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2010 Google, Inc.
  Copyright (C) 2013 NVIDIA Corporation
  Author:
 	Erik Gilling <konkers@google.com>
 	Benoit Goby <benoit@android.com>
 	Venu Byravarasu <vbyravarasu@nvidia.com>
 PORTSC PTSPHCD bits, Tegra20 only 
 HOSTPC1 PTSPHCD bits, Tegra30 and above 
 Bits of PORTSC1, which will get cleared by writing 1 into them 
 For Tegra30 and above only, the address is different in Tegra20 
	
	  In accordance to TRM, OTG and Bias pad circuits could be turned off
	  to save power if wake is enabled, but the VBUS-change detection
	  method is board-specific and these circuits may need to be enabled
	  to generate wakeup event, hence we will just keep them both enabled.
	
	  The USB driver may have already initiated the phy clock
	  disable so wait to see if the clock turns off and if not
	  then proceed with gating the clock.
	
	  The USB driver may have already initiated the phy clock
	  enable so wait to see if the clock turns on and if not
	  then proceed with ungating the clock.
	
	  Give hardware time to settle down after VBUS disconnection,
	  otherwise PHY will immediately wake up from suspend.
 PHY won't resume if reset is asserted 
		
		  Ask VBUS sensor to generate wake event once cable is
		  connected.
 Fix VbusInvalid due to floating VBUS 
	
	  Wakeup currently unimplemented for ULPI, thus PHY needs to be
	  force-resumed.
 Let PHY settle down 
	
	  The PHY interrupt also wakes the USB controller driver since
	  interrupt is shared. We don't do anything in the PHY driver,
	  so just clear the interrupt.
			
			  USB clock will be resumed once wake event will be
			  generated.  The ID-change event requires to have
			  interrupts enabled, otherwise it won't be generated.
	
	  PHY is sharing IRQ with the CI driver, hence here we either
	  disable interrupt for both PHY and CI or for CI only.  The
	  interrupt needs to be disabled while hardware is reprogrammed
	  because interrupt touches the programmed registers, and thus,
	  there could be a race condition.
 older device-trees don't have PMC regmap 
	
	  Tegra20 has a different layout of PMC USB register bits and AO is
	  enabled by default after system reset on Tegra20, so assume nothing
	  to do on Tegra20.
 enable VBUS wake-up detector 
 enable ID-pin ACC detector for OTG mode switching 
 disable detectors to reset them 
 enable detectors 
 detectors starts to work after 10ms 
	
	  Note that UTMI pad registers are shared by all PHYs, therefore
	  devm_platform_ioremap_resource() can't be used here.
	
	  Note that PHY and USB controller are using shared registers,
	  therefore devm_platform_ioremap_resource() can't be used here.
 On some boards, the VBUS regulator doesn't need to be controlled 
 SPDX-License-Identifier: GPL-2.0
  Ingenic SoCs USB PHY driver
  Copyright (c) Paul Cercueil <paul@crapouillou.net>
  Copyright (c) æ¼é¹æ¯ (Qi Pengzhen) <aric.pzqi@ingenic.com>
  Copyright (c) å¨ç°æ° (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
 OTGPHY register offsets 
 bits within the USBPCR register 
 bits within the USBRDTR register 
 bits within the USBPCR1 register 
 Wait for PHY to reset 
 rdt 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  phy-keystone - USB PHY, talking to dwc3 controller in Keystone.
  Copyright (C) 2013 Texas Instruments Incorporated - https:www.ti.com
  Author: WingMan Kwok <w-kwok2@ti.com>
 USB PHY control register offsets 
 SPDX-License-Identifier: GPL-2.0
  Tahvo USB transceiver driver
  Copyright (C) 2005-2006 Nokia Corporation
  Parts copied from isp1301_omap.c.
  Copyright (C) 2004 Texas Instruments
  Copyright (C) 2004 David Brownell
  Original driver written by Juha YrjÃ¶lÃ¤, Tony Lindgren and Timo TerÃ¤s.
  Modified for RetuTahvo MFD by Aaro Koskinen.
 Enable the gadget driver 
			
			  Session is now valid assuming the USB hub is driving
			  Vbus.
 Power up the transceiver in USB host mode 
 Power up transceiver and set it in USB peripheral mode 
 Disable gadget controller if any 
 Power off transceiver 
 Default mode 
	
	  Set initial state, so that we generate kevents only on state changes.
 Set the initial cable state. 
 Create OTG interface 
 SPDX-License-Identifier: GPL-2.0
  gpio-vbus.c - simple GPIO VBUS sensing driver for B peripheral devices
  Copyright (c) 2008 Philipp Zabel <philipp.zabel@gmail.com>
  A simple GPIO VBUS sensing driver for B peripheral only devices
  with internal transceivers. It can control a D+ pullup GPIO and
  a regulator to limit the current drawn from VBUS.
  Needs to be loaded before the UDC driver that will use it.
  This driver relies on "both edges" triggering.  VBUS has 100 msec to
  stabilize, so the peripheral controller driver may need to cope with
  some bouncing due to current surges (e.g. charging local capacitance)
  and contact chatter.
  REVISIT in desperate straits, toggling between rising and falling
  edges might be workable.
 interface to regulator framework 
	 Peripheral controllers which manage the pullup themselves won't have
	  a pullup GPIO configured here.  If it's configured here, we'll do
	  what isp1301_omap::b_peripheral() does and enable the pullup here...
	  although that may complicate usb_gadget_{,dis}connect() support.
 drawing a "unit load" is always OK, except for OTG 
 optionally enable D+ pullup 
 optionally disable D+ pullup 
 VBUS change IRQ handler 
 OTG transceiver interface 
 bindunbind the peripheral controller 
 optionally disable D+ pullup 
 initialize connection state 
 start with disconnected 
 effective for B devices, ignored for A-peripheral 
 for non-OTG B devices: setclear transceiver suspend mode 
	 draw max 0 mA from vbus in suspend mode; or the previously
	  recorded amount of current if not suspended
	 
	  NOTE: high powered configs (mA > 100) may draw up to 2.5 mA
	  if they're wake-enabled ... we don't handle that yet.
 platform driver interface 
 Look up the VBUS sensing GPIO 
	
	  The VBUS sensing GPIO should have a pulldown, which will normally be
	  part of a resistor ladder turning a 4.0V-5.25V level on VBUS into a
	  value the GPIO detects as active. Some systems will use comparators.
	  Get the optional D+ or D- pullup GPIO. If the data line pullup is
	  in use, initialize it to "not pulling up"
 only active when a gadget is registered 
 TODO: wakeup could be enabled here with device_init_wakeup(dev, 1) 
 SPDX-License-Identifier: GPL-2.0+
  NOP USB transceiver for all USB transceiver which are either built-in
  into USB IP or which are mostly autonomous.
  Copyright (C) 2009 Texas Instruments Inc
  Author: Ajay Kumar Gupta <ajay.gupta@ti.com>
  Current status:
 	This provides a "nop" transceiver for PHYs which are
 	autonomous such as isp1504, isp1707, etc.
 interface to regulator framework 
 drawing a "unit load" is always OK, except for OTG 
 SPDX-License-Identifier: GPL-2.0+
  Copyright 2012-2014 Freescale Semiconductor, Inc.
  Copyright (C) 2012 Marek Vasut <marex@denx.de>
  on behalf of DENX Software Engineering GmbH
 Register Macro 
 imx7ulp 
 imx7ulp 
 Anatop Registers 
 Do disconnection between PHY and controller without vbus 
  The PHY will be in messy if there is a wakeup after putting
  bus to suspend (set portsc.suspendM) but before setting PHY to low
  power mode (set portsc.phcd).
  The SOF sends too fast after resuming, it will cause disconnection
  between host and high speed device.
  IC has bug fixes logic, they include
  MXS_PHY_ABNORMAL_IN_SUSPEND and MXS_PHY_SENDING_SOF_TOO_FAST
  which are described at above flags, the RTL will handle it
  according to different versions.
 Minimum and maximum values for device tree entries 
 sentinel  }
  PHY needs some 32K cycles to switch from 32K clock to
  bus (such as AHBAXI, etc) clock.
 Update TX register if there is anything to write 
 Power up the PHY 
	
	  USB PHY Ctrl Setting
	  - Auto clockpower on
	  - Enable fulllow speed support
		
		  The external charger detector needs to be disabled,
		  or the signal at DP will be poor
 Return true if the vbus is there 
 Delay some time, and let Linestate be SE0 for controller 
 If the SoCs don't need to disconnect line without vbus, quit 
 If the SoCs don't have anatop, quit 
 bit definition is the same for all controllers 
 If the SoCs don't have anatop, quit 
		
		  FIXME: Do not power down RXPWD1PT1 bit for low speed
		  connect. The low speed connection will have problem at
		  very rare cases during usb suspend and resume process.
			
			  If value to be set as pwd value is not 0xffffffff,
			  several 32Khz cycles are needed.
 Sometimes, the speed is not high speed when the error occurs 
 Check if vbus is valid 
 Enable charger detector 
	
	  - Do not check whether a charger is connected to the USB port
	  - Check whether the USB plug has been in contact with each other
 Check if plug is connected 
 Data pin makes contact 
 Disable charger detector 
	
	  - Do check whether a charger is connected to the USB port
	  - Do not Check whether the USB plug has been in contact with
	    each other
 Check if it is a charger 
 Disable charger detector 
  It must be called after DP is pulled up, which is used to
  differentiate DCP and CDP.
 Pull up DP via test 
 Stop the test 
 Some SoCs don't have anatop registers 
 Precompute which bits of the TX register are to be updated, if any 
 Scale to a 4-bit value 
 Scale to a 4-bit value. 
		 Scale to a 4-bit value.  Round up the values and heavily
		  weight the rounding by adding 23 of the denominator.
 If the SoCs don't have anatop, quit 
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0+
  USB transceiver driver for AB8500 family chips
  Copyright (C) 2010-2013 ST-Ericsson AB
  Mian Yousaf Kaukab <mian.yousaf.kaukab@stericsson.com>
  Avinash Kumar <avinash.kumar@stericsson.com>
  Thirupathi Chippakurthy <thirupathi.chippakurthy@stericsson.com>
 Bank AB8500_SYS_CTRL2_BLOCK 
 Bank AB8500_USB 
 Bank AB8500_DEVELOPMENT 
 Bank AB8500_DEBUG 
 Bank AB8500_INTERRUPT 
 usec 
 usec 
 usec 
 Usb line status register 
 Register USB_LINK_STATUS interrupt 
 Register ID_WAKEUP_F interrupt 
 Register VBUS_DET_F interrupt 
 Driver is using the ab-iddet driver
 Enable setting regulators voltage 
 USB is not the only consumer of Vintcore, restore old settings 
 Workaround for v2.0 bug # 31952 
 mux and configure USB pins to DEFAULT state 
 Needed to disable the phy.
 configure USB pins to SLEEP state 
		
		  as USB pins are shared with iddet, release them to allow
		  iddet to request them
	
	  Spurious link_status interrupts are seen at the time of
	  disconnection of a device in RIDA state
		
		  Fallback to default B_IDLE as nothing
		  is connected
	
	  FIXME: For now we rely on the boot firmware to set up the necessary
	  PHYpin configuration for UART mode.
	 
	  AB8505 does not seem to report any status change for UART cables,
	  possibly because it cannot detect them autonomously.
	  We may need to measure the ID resistance manually to reliably
	  detect UART cables after bootup.
	
	  Spurious link_status interrupts are seen in case of a
	  disconnection of a device in IDGND and RIDA stage
 Fallback to default B_IDLE as nothing is connected 
  Connection Sequence:
    1. Link Status Interrupt
    2. Enable AB clock
    3. Enable AB regulators
    4. Enable USB phy
    5. Reset the musb controller
    6. Switch the ULPI GPIO pins to function mode
    7. Enable the musb Peripheral5 clock
    8. Restore MUSB context
  Disconnection Sequence:
    1. Disconnect Interrupt
    2. Disable regulators
    3. Disable AB clock
    4. Disable the Phy
    5. Link Status Interrupt
    6. Disable Musb Clock
 Link status will not be updated till phy is disabled. 
 TODO 
	 Some drivers call this function in atomic context.
	  Do not update ab8500 registers directly till this
	  is fixed.
	 Some drivers call this function in atomic context.
	  Do not update ab8500 registers directly till this
	  is fixed.
 Enable the PBTBank 0x12 access 
 Switch to normal modedisable Bank 0x12 access 
 Enable the PBTBank 0x12 access 
 Switch to normal modedisable Bank 0x12 access 
 Disable regulator voltage setting for AB8500 <= v2.0 
 all: Disable phy when called from set_host and set_peripheral 
 Phy tuning values for AB8500 > v2.0 
 Phy tuning values for AB8505 
 Needed to enable ID detection. 
	
	  This is required for usb-link-status to work properly when a
	  cable is connected at boot time.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  NXP ISP1301 USB transceiver driver
  Copyright (C) 2012 Roland Stigge
  Author: Roland Stigge <stigge@antcom.de>
 Disable transparent UART mode first 
 mask all interrupts 
 reference of ISP1301 I2C node via DT 
 non-DT: only one ISP1301 chip supported 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2007,2008 Freescale semiconductor, Inc.
  Author: Li Yang <LeoLi@freescale.com>
          Jerry Huang <Chang-Ming.Huang@freescale.com>
  Initialization based on code from Shlomi Gridish.
 FSM timers 
 Driver specific timers 
 CONFIG_PPC32 
 -------------------------------------------------------------
 Operations that will be called from OTG Finite State Machine 
 Charge vbus for vbus pulsing in SRP 
 stop discharging, start charging 
 stop charging 
 Discharge vbus through a resistor to ground 
 stop charging, start discharging 
 stop discharging 
 A-device driver vbus, controlled through PP bit in PORTSC 
  Pull-up D+, signalling connect by periperal. Also used in
  data-line pulsing in SRP
  Generate SOF by host.  This is controlled through suspendresume the
  port.  In host mode, controller will automatically send SOF.
  Suspend will block the data on the port.
 Start SRP pulsing by data-line pulsing, followed with v-bus pulsing. 
 Do VBUS pulse after data pulse 
 start the timer to end vbus charge 
	
	  As USB3300 using the same a_sess_vld and b_sess_vld voltage
	  we need to discharge the bus for a while to distinguish
	  residual voltage of vbus pulsing and A device pull up
  Workaround for a_host suspending too fast.  When a_bus_req=0,
  a_host will start by SRP.  It needs to set b_hnp_enable before
  actually suspending to start HNP
 The timeout callback function to set time out bit 
 Initialize timers 
 FSM used timers 
 device driver used timers 
 Uninitialize timers 
 FSM used timers 
 device driver used timers 
 REVISIT: use array of pointers to timers instead 
 Add timer to timer list 
	
	  Check if the timer is already in the active list,
	  if so update timer count
 Remove timer from the timer list; clear timeout status 
 Reset controller, not reset the bus 
 Call suspendresume routines in host driver 
	
	  Update a_vbus_vld state as a_vbus_vld int is disabled
	  in device mode
 start fsl usb host controller 
 default-b 
					
					  Workaround: b_host can't driver
					  vbus, but PP in PORTSC needs to
					  be 1 for host to work.
					  So we set drv_vbus bit in
					  transceiver to 0 thru ULPI.
 stop fsl usb host controller 
 default-b 
  Call suspend and resume function in udc driver
  to stop and start udc driver.
  Called by initialization code of host driver.  Register host controller
  to the OTG.  Suspend host for OTG role detection.
		
		  must leave time for hub_wq to finish its thing
		  before yanking the host driver out from under it,
		  so suspend the host after a short delay.
 host driver going away 
 Mini-A cable connected 
 Called by initialization code of udc.  Register udc to OTG. 
 start the gadget right away if the ID pin says Mini-B 
  Delayed pin detect interrupt processing.
  When the Mini-A cable is disconnected from the board,
  the pin-detect interrupt happens before the disconnect
  interrupts for the connected device(s).  In order to
  process the disconnect interrupt(s) prior to switching
  roles, the pin-detect interrupts are delayed, and handled
  by this routine.
 switch to gadget 
 B-device start SRP 
 A_host suspend will call this function to start hnp 
 clear a_bus_req to enter a_suspend state 
  Interrupt handler.  OTGhostperipheral share the same int line.
  OTG driver clears OTGSC interrupts and leaves USB interrupts
  intact.  It needs to have knowledge of some USB interrupts
  such as port change.
 Only clear otg interrupts 
FIXME: ID change not generate when init to 0 
 process OTG interrupts 
 clear conn information 
 switch to gadget 
 switch to host 
 Initialize the global variable fsl_otg_dev and request IRQ for OTG 
 allocate space to fsl otg device 
 Set OTG state machine operations 
 initialize the otg structure 
 Store the otg transceiver 
 OTG Initialization 
 Initialize the state machine structure with default values 
 We don't require predefined MEMIRQ resource index 
	 We don't request_mem_region here to enable resource sharing
 request irq 
 stop the controller 
 reset the controller 
 wait reset completed 
 configure the VBUSHS as IDLE(both host and device) 
 configure PHY interface 
 configure control enable IO output, big endian register 
 disable all interrupt and clear all OTGSC status 
	
	  The identification (id) input is FALSE when a Mini-A plug is inserted
	  in the devices Mini-AB receptacle. Otherwise, this input is TRUE.
	  Also: record initial state of ID pin
 enable OTG ID pin interrupt 
 configure the OTG 
 start OTG 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2011 Google, Inc.
 SPDX-License-Identifier: GPL-2.0+
  phy.c -- USB phy handling
  Copyright (C) 2004-2013 Texas Instruments
 Default current range by charger type. 
  usb_phy_notify_charger_work - notify the USB charger state
  @work: the charger work to notify the USB charger state
  This work can be issued when USB charger state has been changed or
  USB charger current has been changed, then we can notify the current
  what can be drawn to power user and the charger state to userspace.
  If we get the charger type from extcon subsystem, we can notify the
  charger state to power user automatically by usb_phy_get_charger_type()
  issuing from extcon subsystem.
  If we get the charger type from ->charger_detect() instead of extcon
  subsystem, the usb phy driver should issue usb_phy_set_charger_state()
  to set charger state when the charger state has been changed.
  usb_phy_get_charger_type - get charger type from extcon subsystem
  @nb: the notifier block to determine charger type
  @state: the cable state
  @data: private data
  Determin the charger type from extcon subsystem which also means the
  charger state has been chaned, then we should notify this event.
  usb_phy_set_charger_current - set the USB charger current
  @usb_phy: the USB phy to be used
  @mA: the current need to be set
  Usually we only change the charger default current when USB finished the
  enumeration as one SDP charger. As one SDP charger, usb_phy_set_power()
  will issue this function to change charger current when after setting USB
  configuration, or suspendresume USB. For other type charger, we should
  use the default charger current and we do not suggest to issue this function
  to change the charger current.
  When USB charger current has been changed, we need to notify the power users.
  usb_phy_get_charger_current - get the USB charger current
  @usb_phy: the USB phy to be used
  @min: the minimum current
  @max: the maximum current
  Usually we will notify the maximum current to power user, but for some
  special case, power user also need the minimum current value. Then the
  power user can issue this function to get the suitable current.
  usb_phy_set_charger_state - set the USB charger state
  @usb_phy: the USB phy to be used
  @state: the new state need to be set for charger
  The usb phy driver can issue this function when the usb phy driver
  detected the charger state has been changed, in this case the charger
  type should be get from ->charger_detect().
  devm_usb_get_phy - find the USB PHY
  @dev: device that requests this phy
  @type: the type of the phy the controller requires
  Gets the phy using usb_get_phy(), and associates a device with it using
  devres. On driver detach, release function is invoked on the devres data,
  then, devres data is freed.
  For use by USB host and peripheral drivers.
  usb_get_phy - find the USB PHY
  @type: the type of the phy the controller requires
  Returns the phy driver, after getting a refcount to it; or
  -ENODEV if there is no such phy.  The caller is responsible for
  calling usb_put_phy() to release that count.
  For use by USB host and peripheral drivers.
  devm_usb_get_phy_by_node - find the USB PHY by device_node
  @dev: device that requests this phy
  @node: the device_node for the phy device.
  @nb: a notifier_block to register with the phy.
  Returns the phy driver associated with the given device_node,
  after getting a refcount to it, -ENODEV if there is no such phy or
  -EPROBE_DEFER if the device is not yet loaded. While at that, it
  also associates the device with
  the phy using devres. On driver detach, release function is invoked
  on the devres data, then, devres data is freed.
  For use by peripheral drivers for devices related to a phy,
  such as a charger.
  devm_usb_get_phy_by_phandle - find the USB PHY by phandle
  @dev: device that requests this phy
  @phandle: name of the property holding the phy phandle value
  @index: the index of the phy
  Returns the phy driver associated with the given phandle value,
  after getting a refcount to it, -ENODEV if there is no such phy or
  -EPROBE_DEFER if there is a phandle to the phy, but the device is
  not yet loaded. While at that, it also associates the device with
  the phy using devres. On driver detach, release function is invoked
  on the devres data, then, devres data is freed.
  For use by USB host and peripheral drivers.
  devm_usb_put_phy - release the USB PHY
  @dev: device that wants to release this phy
  @phy: the phy returned by devm_usb_get_phy()
  destroys the devres associated with this phy and invokes usb_put_phy
  to release the phy.
  For use by USB host and peripheral drivers.
  usb_put_phy - release the USB PHY
  @x: the phy returned by usb_get_phy()
  Releases a refcount the caller received from usb_get_phy().
  For use by USB host and peripheral drivers.
  usb_add_phy: declare the USB PHY
  @x: the USB phy to be used; or NULL
  @type: the type of this PHY
  This call is exclusively for use by phy drivers, which
  coordinate the activities of drivers for host and peripheral
  controllers, and in some cases for VBUS current regulation.
  usb_add_phy_dev - declare the USB PHY
  @x: the USB phy to be used; or NULL
  This call is exclusively for use by phy drivers, which
  coordinate the activities of drivers for host and peripheral
  controllers, and in some cases for VBUS current regulation.
  usb_remove_phy - remove the OTG PHY
  @x: the USB OTG PHY to be removed;
  This reverts the effects of usb_add_phy
  usb_phy_set_event - set event to phy event
  @x: the phy returned by usb_get_phy();
  @event: event to set
  This sets event to phy event
 SPDX-License-Identifier: GPL-2.0+
  isp1301_omap - ISP 1301 USB transceiver, talking to OMAP OTG controller
  Copyright (C) 2004 Texas Instruments
  Copyright (C) 2004 David Brownell
 use keventd context to change the state for us 
 update ISP from OTG 
 update OTG from ISP 
 resume host 
 timer fired 
 don't resubmit 
 bits in OTG_CTRL 
 and OTG_PULLUP is sometimes written 
-------------------------------------------------------------------------
 board-specific PM hooks 
	 H4 controls this by DIP switch S2.4; no soft control.
	  ON means the charger is always enabled.  Leave it OFF
	  unless the OTG port is used only in B-peripheral mode.
	 this board won't supply more than 8mA vbus power.
	  some boards can switch a 100ma "unit load" (or more).
 products will deliver OTG messages with LEDs, GUI, etc 
-------------------------------------------------------------------------
 smbus apis are used for portability 
-------------------------------------------------------------------------
 identification 
 u16 read 
 u16 read 
 u16 read 
 operational registers 
 u8 read, set, +1 clear 
 u8 read, set, +1 clear 
 u8 read, set, +1 clear 
 u8 readonly 
 u8 read 
 u8 read, set, +1 clear 
 u8 read, set, +1 clear 
 u8 read, set, +1 clear 
 same bitfields in all interrupt registers 
-------------------------------------------------------------------------
-------------------------------------------------------------------------
 NOTE:  some of this ISP1301 setup is specific to H2 boards;
  not everything is guarded by board-specific checks, or even using
  omap_usb_config data to deduce MC1_DAT_SE0 and MC2_BI_DI.
  ALSO:  this currently doesn't use ISP1301 low-power modes
  while OTG is running.
 isp1301_set_bits(isp, ISP1301_MODE_CONTROL_2, MC2_GLOBAL_PWR_DN);
 isp1301_clear_bits(isp, ISP1301_MODE_CONTROL_2, MC2_GLOBAL_PWR_DN);
	 do this only when cpu is driving transceiver,
	  so host won't see a low speed device...
	 Currently ASSUMES only the OTG port matters;
	  other ports could be active...
-------------------------------------------------------------------------
 Almost all our I2C messaging comes from a work queue's task context.
  NOTE: guaranteeing certain response times might mean we shouldn't
  share keventd's work queue; a realtime task might be safest.
 called from irq handlers 
 called from irq handlers 
 mode control and irq enables don't change much 
-------------------------------------------------------------------------
  The OMAP OTG controller handles most of the OTG state transitions.
  We translate isp1301 outputs (mostly voltage comparator status) into
  OTG inputs; OTG outputs (mostly pulluppulldown controls) and HNP state
  flags into isp1301 inputs ... and infer state transitions.
 default-b 
 extra dual-role default-b states 
 default-a 
 outputs from ISP1301_INTERRUPT_SOURCE 
 default-A 
 default-B 
 outputs from ISP1301_OTG_STATUS 
 inputs going to ISP1301 
 if (otg_ctrl & OTG_B_HNPEN) {
 case OTG_STATE_B_WAIT_ACON:
 HNP failed for some reason (A_AIDL_BDIS timeout) 
 FIXME usbcore thinks port power is still on ... 
 HNP switch to host or peripheral; and SRP 
 update ISP1301 transceiver from OTG controller 
 SRP to become b_peripheral failed 
		 gadget drivers that care should monitor all kinds of
		  remote wakeup (SRP, normal) using their own timer
		  to give "check cable and A-device" messages.
 HNP to become b_host failed 
 subset of b_peripheral()... 
 detect SRP from B-device ... 
	 timer expired:  T(a_wait_bcon) and maybe T(a_wait_vrise)
	  we don't track them separately
 A-supplied voltage fell too low; overcurrent 
	 switch driver; the transceiver code activates it,
	  ungating the udc clock or resuming OHCI.
 role is peripheral 
 role is host 
 some of these values are board-specific... 
 for B-device: 
 9msec Bdev D+ pulse 
 discharge after VBUS pulse 
 | (3 << 24)		 2msec VBUS pulse 
 for A-device: 
 200ms nominal A_WAIT_VRISE timer 
 detect 167+ns SRP pulses 
 accept both kinds of SRP pulse 
 struct omap_usb_config config = dev->platform_data;
 OTG controller isn't clocked 
 CONFIG_USB_OTG 
-------------------------------------------------------------------------
 UDC driver just set OTG_BSESSVLD 
 start certain state transitions right away 
				 we skip over OTG_STATE_A_WAIT_BCON, since
				  the HC will transition to A_HOST (or
				  A_SUSPEND!) without our noticing except
				  when HNP is used.
		 if user unplugged mini-A end of cable,
		  don't bypass A_WAIT_VFALL.
				 hub_wq may take a while to notice and
				  handle this disconnect, so don't go
				  to B_IDLE quite yet.
 UDC driver will clear OTG_BSESSVLD 
	 update the OTG controller state to match the isp1301; may
	  trigger OPRT_CHG irqs for changes going to the isp1301.
-------------------------------------------------------------------------
 implicit lock:  we're the only task using this device 
 transfer state from otg engine to isp1301 
 transfer state from isp1301 to otg engine 
			
			  skip A_WAIT_VRISE; hc transitions invisibly
			  skip A_WAIT_BCON; same.
 mdelay(10);
-------------------------------------------------------------------------
 FIXME -- not with a "new style" driver, it doesn't!! 
 ugly -- i2c hijacks our memory hook to wait_for_completion() 
-------------------------------------------------------------------------
 NOTE:  three modes are possible here, only one of which
  will be standards-conformant on any given system:
   - OTG mode (dual-role), required if there's a Mini-AB connector
   - HOST mode, for when there's one or more A (host) connectors
   - DEVICE mode, for when there's a BMini-B (device) connector
  As a rule, you won't have an isp1301 chip unless it's there to
  support the OTG mode.  Other modes help testing USB controllers
  in isolation from (full) OTG support, or maybe so later board
  revisions can help to support those feature.
	 NOTE:  since we don't change this, this provides
	  a few more interrupts than are strictly needed.
 add or disable the host device+driver 
 FIXME update its refcount
	 If this has a Mini-AB connector, this mode is highly
	  nonstandard ... but can be handy for testing, especially with
	  the Mini-A end of an OTG cable.  (Or something nonstandard
	  like MiniB-to-StandardB, maybe built with a gender mender.)
 gadget driver may be suspended until vbus_connect () 
 FIXME update its refcount
	 If this has a Mini-AB connector, this mode is highly
	  nonstandard ... but can be handy for testing, so long
	  as you don't plug a Mini-A cable into the jack.
-------------------------------------------------------------------------
	 We want hardware to manage most HNP protocol timings.
	  So do this part as early as possible...
 caller will suspend next 
 autoconnect mode avoids irq latency bugs 
 caller must suspend then clear A_BUSREQ 
 initiated by B-Host suspend 
 srp-only 
-------------------------------------------------------------------------
 verify the chip (shouldn't be necessary) 
 initial development used chiprev 2.00 
 make like power-on reset 
 full speed signaling by default 
-------------------------------------------------------------------------
 SPDX-License-Identifier: GPL-2.0-only
  pata_triflex.c 	- Compaq PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
 			  Alan Cox <alan@lxorguk.ukuu.org.uk>
  based upon
  triflex.c
  IDE Chipset driver for the Compaq TriFlex IDE controller.
  Known to work with the Compaq Workstation 5x00 series.
  Copyright (C) 2002 Hewlett-Packard Development Group, L.P.
  Author: Torben Mathiasen <torben.mathiasen@hp.com>
  Loosely based on the piix & svwks drivers.
  Documentation:
 	Not publicly available.
 	triflex_prereset		-	probe begin
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Set up cable type and use generic probe init
 	triflex_load_timing		-	timing configuration
 	@ap: ATA interface
 	@adev: Device on the bus
 	@speed: speed to configure
 	The Triflex has one set of timings per device per channel. This
 	means we must do some switching. As the PIO and DMA timings don't
 	match we have to do some reloading unlike PIIX devices where tuning
 	tricks can avoid it.
 	triflex_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Use the timing loader to set up the PIO mode. We have to do this
 	because DMA startstop will only be called once DMA occurs. If there
 	has been no DMA then the PIO timings are still needed.
 	triflex_bmdma_start	-	DMA start callback
 	@qc: Command in progress
 	Usually drivers set the DMA timing at the point the set_dmamode call
 	is made. Triflex however requires we load new timings on the
 	transition or keep matching PIODMA pairs (ie MWDMA2PIO4 etc).
 	We load the DMA timings just before starting DMA and then restore
 	the PIO timing when the DMA is finished.
 	triflex_bmdma_stop	-	DMA stop callback
 	@qc: ATA command
 	We loaded new timings in dma_start, as a result we need to restore
 	the PIO timings in dma_stop so that the next command issue gets the
 	right clock values.
	
	  We must not disable or powerdown the device.
	  APM bios refuses to suspend if IDE is not accessible.
 SPDX-License-Identifier: GPL-2.0-or-later
   sata_uli.c - ULi Electronics SATA
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware documentation available under NDA.
 PCI configuration registers 
 sata0 phy SCR registers 
 offset from sata0->sata1 phy regs 
 sata0 phy SCR  registers 
 offset from sata0->sata1 phy regs 
 terminate list 
SCR_CONTROL=2, SCR_ERROR=1, SCR_STATUS=0
 allocate the host 
 the first two ports are standard SFF 
		 If there are four, the last two live right after
		  the standard SFF ports.
 SPDX-License-Identifier: GPL-2.0-only
  libata-acpi.c
  Provides ACPI support for PATASATA.
  Copyright (C) 2006 Intel Corp.
  Copyright (C) 2006 Randy Dunlap
 regs. 0x1f1 - 0x1f7 
  ata_dev_acpi_handle - provide the acpi_handle for an ata_device
  @dev: the acpi_handle returned will correspond to this device
  Returns the acpi_handle for the ACPI namespace object corresponding to
  the ata_device passed into the function, or NULL if no such object exists
  or ACPI is disabled for this device due to consecutive errors.
 @ap and @dev are the same as ata_acpi_handle_hotplug() 
  ata_acpi_handle_hotplug - ACPI event handler backend
  @ap: ATA port ACPI event occurred
  @dev: ATA device ACPI event occurred (can be NULL)
  @event: ACPI event which occurred
  All ACPI bay  device realted events end up in this function.  If
  the event is port-wide @dev is NULL.  If the event is specific to a
  device, @dev points to it.
  Hotplug (as opposed to unplug) notification is always handled as
  port-wide while unplug only kills the target device on device-wide
  event.
  LOCKING:
  ACPI notify handler context.  May sleep.
	
	  When dock driver calls into the routine, it will always use
	  ACPI_NOTIFY_BUS_CHECKACPI_NOTIFY_DEVICE_CHECK for add and
	  ACPI_NOTIFY_EJECT_REQUEST for remove
 bind acpi handle to pata port 
	
	  For both satapata devices, host companion device is required.
	  For pata device, port companion device is also required.
  ata_acpi_dissociate - dissociate ATA host from ACPI objects
  @host: target ATA host
  This function is called during driver detach after the whole host
  is shut down.
  LOCKING:
  EH context.
	 Restore initial _GTM values so that driver which attaches
	  afterward can use them too.
  ata_acpi_gtm - execute _GTM
  @ap: target ATA port
  @gtm: out parameter for _GTM result
  Evaluate _GTM and store the result in @gtm.
  LOCKING:
  EH context.
  RETURNS:
  0 on success, -ENOENT if _GTM doesn't exist, -errno on failure.
  ata_acpi_stm - execute _STM
  @ap: target ATA port
  @stm: timing parameter to _STM
  Evaluate _STM with timing parameter @stm.
  LOCKING:
  EH context.
  RETURNS:
  0 on success, -ENOENT if _STM doesn't exist, -errno on failure.
 Buffers for id may need byteswapping ? 
  ata_dev_get_GTF - get the drive bootup default taskfile settings
  @dev: target ATA device
  @gtf: output parameter for buffer containing _GTF taskfile arrays
  This applies to both PATA and SATA drives.
  The _GTF method has no input parameters.
  It returns a variable number of register set values (registers
  hex 1F1..1F7, taskfiles).
  The <variable number> is not known in advance, so have ACPI-CA
  allocate the buffer as needed and return it, then free it later.
  LOCKING:
  EH context.
  RETURNS:
  Number of taskfiles on success, 0 if _GTF doesn't exist.  -EINVAL
  if _GTF is invalid.
 if _GTF is cached, use the cached value 
 set up output buffer 
 ACPI-CA sets this; savefree it later 
 _GTF has no input parameters 
  ata_acpi_gtm_xfermask - determine xfermode from GTM parameter
  @dev: target device
  @gtm: GTM parameter to use
  Determine xfermask for @dev from @gtm.
  LOCKING:
  None.
  RETURNS:
  Determined xfermask.
 we always use the 0 slot for crap hardware 
 PIO 
	 See if we have MWDMA or UDMA data. We don't bother with
	  MWDMA if UDMA is available as this means the BIOS set UDMA
	  and our error changedown if it works is UDMA to PIO anyway.
  ata_acpi_cbl_80wire		-	Check for 80 wire cable
  @ap: Port to check
  @gtm: GTM data to use
  Return 1 if the @gtm indicates the BIOS selected an 80wire mode.
 0x1f1 
 0x1f2 
 0x1f3 
 0x1f4 
 0x1f5 
 0x1f6 
 0x1f7 
		 libata doesn't use ACPI to configure transfer mode.
		  It will only confuse device configuration.  Skip.
		 BIOS writers, sorry but we don't wanna lock
		  features unless the user explicitly said so.
 DEVICE CONFIGURATION FREEZE LOCK 
 SECURITY FREEZE LOCK 
 SET MAX LOCK and SET MAX FREEZE LOCK 
 inhibit enabling DIPM 
 inhibit FPDMA non-zero offset 
 inhibit FPDMA auto activation 
  ata_acpi_run_tf - send taskfile registers to host controller
  @dev: target ATA device
  @gtf: raw ATA taskfile register set (0x1f1 - 0x1f7)
  @prev_gtf: previous command
  Outputs ATA taskfile to standard ATA host controller.
  Writes the control, feature, nsect, lbal, lbam, and lbah registers.
  Optionally (ATA_TFLAG_LBA48) writes hob_feature, hob_nsect,
  hob_lbal, hob_lbam, and hob_lbah.
  This function waits for idle (!BUSY and !DRQ) after writing
  registers.  If the control register has a new value, this
  function also waits for idle after writing control and before
  writing the remaining registers.
  LOCKING:
  EH context.
  RETURNS:
  1 if command is executed successfully.  0 if ignored, rejected or
  filtered out, -errno on other errors.
  ata_acpi_exec_tfs - get then write drive taskfile settings
  @dev: target ATA device
  @nr_executed: out parameter for the number of executed commands
  Evaluate _GTF and execute returned taskfiles.
  LOCKING:
  EH context.
  RETURNS:
  Number of executed taskfiles on success, 0 if _GTF doesn't exist.
  -errno on other errors.
 get taskfiles 
 execute them 
  ata_acpi_push_id - send Identify data to drive
  @dev: target ATA device
  _SDD ACPI object: for SATA mode only
  Must be after Identify (Packet) Device -- uses its data
  ATM this function never returns a failure.  It is an optional
  method and if it fails for whatever reason, we should still
  just keep going.
  LOCKING:
  EH context.
  RETURNS:
  0 on success, -ENOENT if _SDD doesn't exist, -errno on failure.
 Give the drive Identify data to the drive via the _SDD method 
 _SDD: set up input parameters 
 Output buffer: _SDD has no output 
 It's OK for _SDD to be missing too. 
  ata_acpi_on_suspend - ATA ACPI hook called on suspend
  @ap: target ATA port
  This function is called when @ap is about to be suspended.  All
  devices are already put to sleep but the port_suspend() callback
  hasn't been executed yet.  Error return from this function aborts
  suspend.
  LOCKING:
  EH context.
  RETURNS:
  0 on success, -errno on failure.
 nada 
  ata_acpi_on_resume - ATA ACPI hook called on resume
  @ap: target ATA port
  This function is called when @ap is resumed - right after port
  itself is resumed but before any EH action is taken.
  LOCKING:
  EH context.
 _GTM valid 
 restore timing parameters 
		 _GTF should immediately follow _STM so that it can
		  use values set by _STM.  Cache _GTF result and
		  schedule _GTF.
		 SATA _GTF needs to be evaulated after _SDD and
		  there's no reason to evaluate IDE _GTF early
		  without _STM.  Clear cache and schedule _GTF.
	
	  For ATAPI, runtime D3 cold is only allowed
	  for ZPODD in zero power ready state
 ACPI spec requires _PS0 when IDE power on and _PS3 when power off 
	 channel first and then drives for power on and vica versa
  ata_acpi_set_state - set the port power state
  @ap: target ATA port
  @state: state, onoff
  This function sets a proper ACPI D state for the device on
  system and runtime PM operations.
  ata_acpi_on_devcfg - ATA ACPI hook called on device donfiguration
  @dev: target ATA device
  This function is called when @dev is about to be configured.
  IDENTIFY data might have been modified after this hook is run.
  LOCKING:
  EH context.
  RETURNS:
  Positive number if IDENTIFY data needs to be refreshed, 0 if not,
  -errno on failure.
 do we need to do _GTF? 
 do _SDD if SATA 
 do _GTF 
 refresh IDENTIFY page if any _GTF command has been executed 
 ignore evaluation failure if we can continue safely 
 fail and let EH retry once more for unknown IO errors 
	 We can safely continue if no _GTF command has been executed
	  and port is not frozen.
  ata_acpi_on_disable - ATA ACPI hook called when a device is disabled
  @dev: target ATA device
  This function is called when @dev is about to be disabled.
  LOCKING:
  EH context.
 SPDX-License-Identifier: GPL-2.0-or-later
   libata-scsi.c - helper library for ATA
   Copyright 2003-2004 Red Hat, Inc.  All rights reserved.
   Copyright 2003-2004 Jeff Garzik
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware documentation available from
   - http:www.t10.org
   - http:www.t13.org
 AWRE 
 read retry count 
 write retry count 
 contains WCE, needs to be 0 for logic 
 contains DRA, needs to be 0 for logic 
 DSENSE=0, GLTSD=1 
 [QAM+QERR may be 1, see 05-359r1] 
 extended self test time, see 05-359r1 
 "Invalid field in CDB" 
 "Invalid field in parameter list" 
 	ata_std_bios_param - generic bios headsectorcylinder calculator used by sd.
 	@sdev: SCSI device for which BIOS geometry is to be determined
 	@bdev: block device associated with @sdev
 	@capacity: capacity of SCSI device
 	@geom: location to which geometry will be output
 	Generic bios headsectorcylinder calculator
 	used by sd. Most BIOSes nowadays expect a XXX25516  (CHS)
 	mapping. Some situations may arise where the disk is not
 	bootable if this is not used.
 	LOCKING:
 	Defined by the SCSI layer.  We don't really care.
 	RETURNS:
 	Zero.
 	ata_scsi_unlock_native_capacity - unlock native capacity
 	@sdev: SCSI device to adjust device capacity for
 	This function is called if a partition on @sdev extends beyond
 	the end of the device.  It requests EH to unlock HPA.
 	LOCKING:
 	Defined by the SCSI layer.  Might sleep.
 	ata_get_identity - Handler for HDIO_GET_IDENTITY ioctl
 	@ap: target port
 	@sdev: SCSI device to get identify data for
 	@arg: User buffer area for identify data
 	LOCKING:
 	Defined by the SCSI layer.  We don't really care.
 	RETURNS:
 	Zero on success, negative errno on error.
 	ata_cmd_ioctl - Handler for HDIO_DRIVE_CMD ioctl
 	@scsidev: Device to which we are issuing command
 	@arg: User provided data for issuing command
 	LOCKING:
 	Defined by the SCSI layer.  We don't really care.
 	RETURNS:
 	Zero on success, negative errno on error.
 PIO Data-in 
		scsi_cmd[2]  = 0x0e;      no off.line or cc, read from dev,
 Non-data 
 cc but no off.line or data xfer 
 hack -- ide driver does this too 
	 Good values for timeout and retries?  Values below
 sense data available 
		 If we set cc then ATA pass-through will cause a
 Send userspace a few ATA registers (same as driverside) 
 format is "descriptor" 
 code is "ATA Descriptor" 
 status 
 error 
 sector count (0:7) 
 	ata_task_ioctl - Handler for HDIO_DRIVE_TASK ioctl
 	@scsidev: Device to which we are issuing command
 	@arg: User provided data for issuing command
 	LOCKING:
 	Defined by the SCSI layer.  We don't really care.
 	RETURNS:
 	Zero on success, negative errno on error.
 Non-data 
 cc but no off.line or data xfer 
	 Good values for timeout and retries?  Values below
 sense data available 
		 If we set cc then ATA pass-through will cause a
 Send userspace ATA registers 
 format is "descriptor" 
 code is "ATA Descriptor" 
 status 
 error 
 sector count (0:7) 
 lbal 
 lbam 
 lbah 
 select 
  This handles both native and compat commands, so anything added
  here must have a compatible argument, or check in_compat_syscall()
 	ata_scsi_qc_new - acquire new ata_queued_cmd reference
 	@dev: ATA device to which the new command is attached
 	@cmd: SCSI command that originated this ATA command
 	Obtain a reference to an unused ata_queued_cmd structure,
 	which is the basic libata structure representing a single
 	ATA command sent to the hardware.
 	If a command was available, fill in the SCSI-specific
 	portions of the structure with information on the
 	current command.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Command allocated, or %NULL if none available.
 	ata_dump_status - user friendly display of error info
 	@id: id of the port in question
 	@tf: ptr to filled out taskfile
 	Decode and dump the ATA errorstatus registers for the user so
 	that they have some idea what really happened at the non
 	make-believe layer.
 	LOCKING:
 	inherited from caller
 Data is not valid in this case 
 	ata_to_sense_error - convert ATA error to SCSI error
 	@id: ATA device number
 	@drv_stat: value contained in ATA status register
 	@drv_err: value contained in ATA error register
 	@sk: the sense key we'll fill out
 	@asc: the additional sense code we'll fill out
 	@ascq: the additional sense code qualifier we'll fill out
 	@verbose: be verbose
 	Converts an ATA error into a SCSI error.  Fill out pointers to
 	SK, ASC, and ASCQ bytes for later use in fixed or descriptor
 	format sense blocks.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 Based on the 3ware driver translation table 
 BBD|ECC|ID|MAR 
 Device busy                  Aborted command
 BBD|ECC|ID 
 Device busy                  Aborted command
 ECC|MC|MARK 
 Device fault                 Hardware error
 ICRC|ABRT 		
 Data CRC error               SCSI parity error
 MC|ID|ABRT|TRK0|MARK 
 Unit offline                 Not ready
 MCR|MARK 
 Unrecovered disk error       Not ready
  Bad address mark 
 Address mark not found for data field
 TRK0 - Track 0 not found 
 Hardware error
 Abort: 0x04 is not translated here, see below 
 Media change request 
 FIXME: faking offline
 SRVIDNF - ID not found 
 Logical address out of range
 MC - Media Changed 
 Not ready to ready change, medium may have changed
 ECC - Uncorrectable ECC error 
 Unrecovered read error
 BBD - block marked bad 
 Block marked bad	Medium error, unrecovered read error
 END mark
 Must be first because BUSY means no other bits valid 
 Busy, fake parity for now
 Device ready, unaligned write command
 Device fault, internal target failure
 Timed out in xfer, fake parity for now
 Recovered ECC error	  Medium error, recovered
 END mark
	
	 	Is this an error we can processparse
 Ignore the err bits, they're invalid 
 Look for drv_err 
 Look for best matches first 
	
	  Fall back to interpreting status bits.  Note that if the drv_err
	  has only the ABRT bit set, we decode drv_stat.  ABRT by itself
	  is not descriptive enough.
	
	  We need a sensible error return here, which is tricky, and one
	  that won't cause people to do things like return a disk wrongly.
 	ata_gen_passthru_sense - Generate check condition sense block.
 	@qc: Command that completed.
 	This function is specific to the ATA descriptor format sense
 	block specified for the ATA pass through commands.  Regardless
 	of whether the command errored or not, return a sense
 	block. Copy all controller registers into the sense
 	block. If there was no error, we get the request from an ATA
 	passthrough command, so we use the following sense data:
 	sk = RECOVERED ERROR
 	asc,ascq = ATA PASS-THROUGH INFORMATION AVAILABLE
 	LOCKING:
 	None.
	
	  Use ata_to_sense_error() to map status register bits
	  onto sense key, asc & ascq.
		
		  ATA PASS-THROUGH INFORMATION AVAILABLE
		  Always in descriptor format sense.
 descriptor format 
		
		  Copy registers into sense buffer.
 == error reg 
 == status reg 
		
		  Fill in Extend bit, and the high order bytes
		  if applicable.
 Fixed sense format 
 status 
 	ata_gen_ata_sense - generate a SCSI fixed sense block
 	@qc: Command that we are erroring out
 	Generate sense block for a failed ATA command @qc.  Descriptor
 	format is used to accommodate LBA48 block address.
 	LOCKING:
 	None.
 Device disabled after error recovery 
 LOGICAL UNIT NOT READY, HARD RESET REQUIRED 
	 Use ata_to_sense_error() to map status register bits
	  onto sense key, asc & ascq.
 Could not decode error 
	 Schedule policy is determined by ->qc_defer() callback and
	  it needs to see every deferred qc.  Set dev_blocked to 1 to
	  prevent SCSI midlayer from automatically deferring
	  requests.
 	ata_scsi_dma_need_drain - Check whether data transfer may overflow
 	@rq: request to be checked
 	ATAPI commands which transfer variable length data to host
 	might overflow due to application error or hardware bug.  This
 	function checks whether overflow should be drained and ignored
 	for @request.
 	LOCKING:
 	None.
 	RETURNS:
 	1 if ; otherwise, 0.
 configure max sectors 
 set DMA padding 
 make room for appending the drain 
	
	  ata_pio_sectors() expects buffer for each sector to not cross
	  page boundary.  Enforce it by requiring buffers to be sector
	  aligned, which works iff sector_size is not larger than
	  PAGE_SIZE.  ATAPI devices also need the alignment as
	  IDENTIFY_PACKET is executed as ATA_PROT_PIO.
 	ata_scsi_slave_config - Set SCSI device attributes
 	@sdev: SCSI device to examine
 	This is called before we actually start reading
 	and writing to the device, to configure certain
 	SCSI mid-layer behaviors.
 	LOCKING:
 	Defined by SCSI layer.  We don't really care.
 	ata_scsi_slave_destroy - SCSI device is about to be destroyed
 	@sdev: SCSI device to be destroyed
 	@sdev is about to be destroyed for hotwarm unplugging.  If
 	this unplugging was initiated by libata as indicated by NULL
 	dev->sdev, this function doesn't have to do anything.
 	Otherwise, SCSI layer initiated warm-unplug is in progress.
 	Clear dev->sdev, schedule the device for ATA detach and invoke
 	EH.
 	LOCKING:
 	Defined by SCSI layer.  We don't really care.
 SCSI device already in CANCEL state, no need to offline it 
 	ata_scsi_start_stop_xlat - Translate SCSI START STOP UNIT command
 	@qc: Storage for translated ATA taskfile
 	Sets up an ATA taskfile to issue STANDBY (to stop) or READ VERIFY
 	(to start). Perhaps these commands should be preceded by
 	CHECK POWER MODE to see what power mode the device is already in.
 	[See SAT revision 5 at www.t10.org]
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Zero on success, non-zero on error.
 ignore IMMED bit, violates sat-r05 
 LOEJ bit set not supported 
 power conditions not supported 
 1 sector, lba=0 
 CHS 
 sect 
 cyl low 
 cyl high 
 READ VERIFY 
		 Some odd clown BIOSen issue spindown on power off (ACPI S4
		  or S5) causing some drives to spin up and down again.
 Issue ATA STANDBY IMMEDIATE command 
	
	  Standby and Idle condition timers could be implemented but that
	  would require libata to implement the Power condition mode page
	  and allow the user to change it. Changing mode pages requires
	  MODE SELECT to be implemented.
 	ata_scsi_flush_xlat - Translate SCSI SYNCHRONIZE CACHE command
 	@qc: Storage for translated ATA taskfile
 	Sets up an ATA taskfile to issue FLUSH CACHE or
 	FLUSH CACHE EXT.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Zero on success, non-zero on error.
 flush is critical for IO integrity, consider it an IO command 
 	scsi_6_lba_len - Get LBA and transfer length
 	@cdb: SCSI command to translate
 	Calculate LBA and transfer length for 6-byte commands.
 	RETURNS:
 	@plba: the LBA
 	@plen: the transfer length
 	scsi_10_lba_len - Get LBA and transfer length
 	@cdb: SCSI command to translate
 	Calculate LBA and transfer length for 10-byte commands.
 	RETURNS:
 	@plba: the LBA
 	@plen: the transfer length
 	scsi_16_lba_len - Get LBA and transfer length
 	@cdb: SCSI command to translate
 	Calculate LBA and transfer length for 16-byte commands.
 	RETURNS:
 	@plba: the LBA
 	@plen: the transfer length
 	ata_scsi_verify_xlat - Translate SCSI VERIFY command into an ATA one
 	@qc: Storage for translated ATA taskfile
 	Converts SCSI VERIFY command to an ATA READ VERIFY command.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Zero on success, non-zero on error.
 use LBA28 
 use LBA48 
 request too large even for LBA48 
 CHS 
 Convert LBA to CHS 
		 Check whether the converted CHS can fit.
		   Cylinder: 0-65535
		   Head: 0-15
 Sector count 0 means 256 sectors 
 "Logical Block Address out of range" 
 	ata_scsi_rw_xlat - Translate SCSI rw command into an ATA one
 	@qc: Storage for translated ATA taskfile
 	Converts any of six SCSI readwrite commands into the
 	ATA counterpart, including starting sector (LBA),
 	sector count, and taking into account the device's LBA48
 	support.
 	Commands %READ_6, %READ_10, %READ_16, %WRITE_6, %WRITE_10, and
 	%WRITE_16 are currently supported.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Zero on success, non-zero on error.
 Calculate the SCSI LBA, transfer length and FUA. 
		 for 6-byte rw commands, transfer length 0
		  means 256 blocks of data, not 0 block.
 Check and compose ATA command 
		 For 10-byte and 16-byte SCSI RW commands, transfer
		  length 0 means transfer 0 block of data.
		  However, for ATA RW commands, sector count 0 means
		  256 or 65536 sectors, not 0 sectors as in SCSI.
		 
		  WARNING: one or two older ATA drives treat 0 as 0...
 treat all other errors as -EINVAL, fall through 
 "Logical Block Address out of range" 
	 For ATA pass thru (SAT) commands, generate a sense block if
	  user mandated it or if there's an error.  Note that if we
	  generate because the user forced us to [CK_COND =1], a check
	  condition is generated and the ATA register values are returned
	  whether the command completed successfully or not. If there
	  was no error, we use the following sense data:
	  sk = RECOVERED ERROR
	  asc,ascq = ATA PASS-THROUGH INFORMATION AVAILABLE
 	ata_scsi_translate - Translate then issue SCSI command to ATA device
 	@dev: ATA device to which the command is addressed
 	@cmd: SCSI command to execute
 	@xlat_func: Actor which translates @cmd to an ATA taskfile
 	Our ->queuecommand() function has decided that the SCSI
 	command issued can be directly translated into an ATA
 	command, rather than handled internally.
 	This function sets up an ata_queued_cmd structure for the
 	SCSI command, and sends that ata_queued_cmd to the hardware.
 	The xlat_func argument (actor) returns 0 if ready to execute
 	ATA command, else 1 to finish translation. If 1 is returned
 	then cmd->result (and possibly cmd->sense_buffer) are assumed
 	to be set reflecting an error condition or clean (early)
 	termination.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	0 on success, SCSI_ML_QUEUE_DEVICE_BUSY if the command
 	needs to be deferred.
 data is present; dma-map it 
 select device, send command to hardware 
 	ata_scsi_rbuf_fill - wrapper for SCSI command simulators
 	@args: device IDENTIFY data  SCSI command of interest.
 	@actor: Callback hook for desired SCSI command simulator
 	Takes care of the hard work of simulating a SCSI command...
 	Mapping the response buffer, calling the command's handler,
 	and handling the handler's return value.  This return value
 	indicates whether the handler wishes the SCSI command to be
 	completed successfully (0), or not (in which case cmd->result
 	and sense buffer are assumed to be set).
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_scsiop_inq_std - Simulate INQUIRY command
 	@args: device IDENTIFY data  SCSI command of interest.
 	@rbuf: Response buffer, to which simulated SCSI cmd output is sent.
 	Returns standard device identification data associated
 	with non-VPD INQUIRY command output.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 SAM-3 (no version claimed) 
 SBC-2 (no version claimed) 
 SPC-3 (no version claimed) 
 SAM-5 (no version claimed) 
 SBC-4 (no version claimed) 
 SPC-5 (no version claimed) 
 ZBC r05 
 claim SPC-3 version compatibility 
	 set scsi removable (RMB) bit per ata bit, or if the
	  AHCI port says it's external (Hotplug-capable, eSATA).
 claim SPC-5 version compatibility 
 From SAT, use last 2 words from fw rev unless they are spaces 
 	ata_scsiop_inq_00 - Simulate INQUIRY VPD page 0, list of pages
 	@args: device IDENTIFY data  SCSI command of interest.
 	@rbuf: Response buffer, to which simulated SCSI cmd output is sent.
 	Returns list of inquiry VPD pages available.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 page 0x00, this page 
 page 0x80, unit serial no page 
 page 0x83, device ident page 
 page 0x89, ata info page 
 page 0xb0, block limits page 
 page 0xb1, block device characteristics page 
 page 0xb2, thin provisioning page 
 page 0xb6, zoned block device characteristics 
 page 0xb9, concurrent positioning ranges 
 number of supported VPD pages 
 	ata_scsiop_inq_80 - Simulate INQUIRY VPD page 80, device serial number
 	@args: device IDENTIFY data  SCSI command of interest.
 	@rbuf: Response buffer, to which simulated SCSI cmd output is sent.
 	Returns ATA device serial number.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 this page code 
 page len 
 	ata_scsiop_inq_83 - Simulate INQUIRY VPD page 83, device identity
 	@args: device IDENTIFY data  SCSI command of interest.
 	@rbuf: Response buffer, to which simulated SCSI cmd output is sent.
 	Yields two logical unit device identification designators:
 	 - vendor specific ASCII containing the ATA serial number
 	 - SAT defined "t10 vendor id based" containing ASCII vendor
 	   name ("ATA     "), model and serial numbers.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 this page code 
 piv=0, assoc=lu, code_set=ACSII, designator=vendor 
 SAT defined lu model and serial numbers descriptor 
 piv=0, assoc=lu, code_set=ACSII, designator=t10 vendor id 
 SAT defined lu world wide name 
 piv=0, assoc=lu, code_set=binary, designator=NAA 
 page len (assume less than 256 bytes) 
 	ata_scsiop_inq_89 - Simulate INQUIRY VPD page 89, ATA info
 	@args: device IDENTIFY data  SCSI command of interest.
 	@rbuf: Response buffer, to which simulated SCSI cmd output is sent.
 	Yields SAT-specified ATA VPD page.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 our page code 
 page size fixed at 238h 
 force D2H Reg FIS (34h) 
 bit 7 indicates Command FIS 
 TODO: PMP? 
 we don't store the ATA device signature, so we fake it 
 really, this is Status reg 
 required VPD size with unmap support 
	
	  Optimal transfer length granularity.
	 
	  This is always one physical block, but for disks with a smaller
	  logical than physical sector size we need to figure out what the
	  latter is.
	
	  Optimal unmap granularity.
	 
	  The ATA spec doesn't even know about a granularity or alignment
	  for the TRIM command.  We can leave away most of the unmap related
	  VPD page entries, but we have specifify a granularity to signal
	  that we support some form of unmap - in thise case via WRITE SAME
	  with the unmap bit set.
 SCSI Thin Provisioning VPD page: SBC-3 rev 22 or later 
 TPWS 
	
	  zbc-r05 SCSI Zoned Block device characteristics VPD page
	
	  URSWRZ bit is only meaningful for host-managed ZAC drives
 SCSI Concurrent Positioning Ranges VPD page: SBC-5 rev 1 or later 
 	modecpy - Prepare response for MODE SENSE
 	@dest: output buffer
 	@src: data being copied
 	@n: length of mode page
 	@changeable: whether changeable parameters are requested
 	Generate a generic MODE SENSE page for either current or changeable
 	parameters.
 	LOCKING:
 	None.
 	ata_msense_caching - Simulate MODE SENSE caching info page
 	@id: device IDENTIFY data
 	@buf: output buffer
 	@changeable: whether changeable parameters are requested
 	Generate a caching info page, which conditionally indicates
 	write caching to the SCSI layer, depending on device
 	capabilities.
 	LOCKING:
 	None.
 ata_mselect_caching() 
 write cache enable 
 disable read ahead 
 	ata_msense_control - Simulate MODE SENSE control mode page
 	@dev: ATA device of interest
 	@buf: output buffer
 	@changeable: whether changeable parameters are requested
 	Generate a generic MODE SENSE control mode page.
 	LOCKING:
 	None.
 ata_mselect_control() 
 descriptor format sense data 
 	ata_msense_rw_recovery - Simulate MODE SENSE rw error recovery page
 	@buf: output buffer
 	@changeable: whether changeable parameters are requested
 	Generate a generic MODE SENSE rw error recovery page.
 	LOCKING:
 	None.
  We can turn this into a real blacklist if it's needed, for now just
  blacklist any Maxtor BANC1G10 revision firmware
 blacklisted 
 	ata_scsiop_mode_sense - Simulate MODE SENSE 6, 10 commands
 	@args: device IDENTIFY data  SCSI command of interest.
 	@rbuf: Response buffer, to which simulated SCSI cmd output is sent.
 	Simulate MODE SENSE commands. Assume this is invoked for direct
 	access devices (e.g. disks) only. There should be no block
 	descriptor for other device types.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 number of blocks: sat unspecified 
 block length: 512 bytes 
 dbd bit inverted == edb 
	
	  LLBA bit in msense(10) ignored (compliant)
 current 
 changeable 
 defaults 
 supported 
 saved 
	
	  No mode subpages supported (yet) but asking for _all_
	  subpages may be valid
 invalid page code 
 "Saving parameters not supported" 
 	ata_scsiop_read_cap - Simulate READ CAPACITY[ 16] commands
 	@args: device IDENTIFY data  SCSI command of interest.
 	@rbuf: Response buffer, to which simulated SCSI cmd output is sent.
 	Simulate READ CAPACITY commands.
 	LOCKING:
 	None.
 LBA of the last block 
 physical sector size in bytes 
 sector count, 32-bit 
 sector size 
 sector count, 64-bit 
 sector size 
 LBPME 
 LBPRZ 
 RC_BASIS 
 	ata_scsiop_report_luns - Simulate REPORT LUNS command
 	@args: device IDENTIFY data  SCSI command of interest.
 	@rbuf: Response buffer, to which simulated SCSI cmd output is sent.
 	Simulate REPORT LUNS command.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 just one lun, LUN 0, size 8 bytes 
		 FIXME: not quite right; we don't want the
		  translation of taskfile registers into
		  a sense descriptors, since that's only
		  correct for ATA, not ATAPI
 is it pointless to prefer PIO for "safety reasons"? 
 fill these in, for the case where they are -not- overwritten 
 setup sg table and init transfer direction 
  ATAPI devices typically report zero for their SCSI version, and sometimes
  deviate from the spec WRT response data format.  If SCSI version is
  reported as zero like normal, then we make the following fixups:
    1) Fake MMC-5 version, to indicate to the Linux scsi midlayer this is a
 	modern device.
    2) Ensure response data format  ATAPI information are always correct.
 handle completion from new EH 
			 FIXME: not quite right; we don't want the
			  translation of taskfile registers into a
			  sense descriptors, since that's only
			  correct for ATA, not ATAPI
		 SCSI EH automatically locks door if sdev->locked is
		  set.  Sometimes door lock request continues to
		  fail, for example, when no media is present.  This
		  creates a loop - SCSI EH issues door lock which
		  fails and gets invoked again to acquire sense data
		  for the failed command.
		 
		  If door lock fails, always clear sdev->locked to
		  avoid this infinite loop.
		 
		  This may happen before SCSI scan is complete.  Make
		  sure qc->dev->sdev isn't NULL before dereferencing.
 successful completion or old EH failure path 
		 FIXME: not quite right; we don't want the
		  translation of taskfile registers into
		  a sense descriptors, since that's only
		  correct for ATA, not ATAPI
 	atapi_xlat - Initialize PACKET taskfile
 	@qc: command structure to be initialized
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Zero on success, non-zero on failure.
 check whether ATAPI DMA is safe 
	 Some controller variants snoop this value for Packet
	  transfers to do state machine and FIFO management.  Thus we
	  want to set it properly, and for DMA where it is
	  effectively meaningless.
	 Most ATAPI devices which honor transfer chunk size don't
	  behave according to the spec when odd chunk size which
	  matches the transfer length is specified.  If the number of
	  bytes to transfer is 2n+1.  According to the spec, what
	  should happen is to indicate that 2n+1 is going to be
	  transferred and transfer 2n+2 bytes where the last byte is
	  padding.
	 
	  In practice, this doesn't happen.  ATAPI devices first
	  indicate and transfer 2n bytes and then indicate and
	  transfer 2 bytes where the last byte is padding.
	 
	  This inconsistency confuses several controllers which
	  perform PIO using DMA such as Intel AHCIs and sil312432.
	  These controllers use actual number of transferred bytes to
	  update DMA pointer and transfer of 4n+2 bytes make those
	  controller push DMA pointer by 4n+4 bytes because SATA data
	  FISes are aligned to 4 bytes.  This causes data corruption
	  and buffer overrun.
	 
	  Always setting nbytes to even number solves this problem
	  because then ATAPI devices don't have to split data at 2n
	  boundaries.
 DMA data xfer 
 some SATA bridges need us to indicate data xfer direction 
	 FIXME: We need to translate 0x05 READ_BLOCK_LIMITS to a MODE_SENSE
 skip commands not addressed to targets we simulate 
 	ata_scsi_find_dev - lookup ata_device from scsi_cmnd
 	@ap: ATA port to which the device is attached
 	@scsidev: SCSI device from which we derive the ATA device
 	Given various information provided in struct scsi_cmnd,
 	map that onto an ATA bus, and using that mapping
 	determine which ata_device is associated with the
 	SCSI command to be sent.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Associated ATA device, or %NULL if not found.
 	ata_scsi_map_proto - Map pass-thru protocol value to taskfile value.
 	@byte1: Byte 1 from pass-thru CDB.
 	RETURNS:
 	ATA_PROT_UNKNOWN if mapping failedunimplemented, protocol otherwise.
 Non-data 
 DMA 
 UDMA Data-in 
 UDMA Data-Out 
 PIO Data-in 
 PIO Data-out 
 FPDMA 
 Hard Reset 
 SRST 
 Device Diagnostic 
 Device Reset 
 DMA Queued 
 Return Response Info 
 Reserved 
 	ata_scsi_pass_thru - convert ATA pass-thru CDB to taskfile
 	@qc: command structure to be initialized
 	Handles either 12, 16, or 32-byte versions of the CDB.
 	RETURNS:
 	Zero on success, non-zero on failure.
 7Fh variable length cmd means a ata pass-thru(32) 
 enable LBA 
	
	  12 and 16 byte CDBs use different offsets to
	  provide the various register values.
		
		  16-byte CDB - may contain extended commands.
		 
		  If that is the case, copy the upper byte register values.
		
		  Always copy low byte, device and command registers.
		
		  12-byte CDB - incapable of extended commands.
		
		  32-byte CDB - may contain extended command fields.
		 
		  If that is the case, copy the upper byte register values.
 For NCQ commands copy the tag value 
 enforce correct masterslave bit 
 READWRITE LONG use a non-standard sect_size 
 commands using reported Logical Block size (e.g. 512 or 4K) 
 XXX: case ATA_CMD_CFA_WRITE_SECTORS_WITHOUT_ERASE: 
 XXX: case ATA_CMD_READ_QUEUED_EXT: 
 Everything else uses 512 byte "sectors" 
	
	  Set flags so that all registers will be written, pass on
	  write indication (used for PIODMA setup), result TF is
	  copied back and we don't whine too much about its failure.
	
	  Set transfer length.
	 
	  TODO: find out if we need to do more here to
	        cover scattergather case.
 We may not issue DMA commands if no DMA mode is set 
 We may not issue NCQ commands to devices not supporting NCQ 
 sanity check for pio multi commands 
		 compare the passed through multi_count
		  with the cached multi_count of libata
	
	  Filter SET_FEATURES - XFER MODE command -- otherwise,
	  SET_FEATURES - XFER MODE must be precededsucceeded
	  by an update to hardware-specific registers for each
	  controller (i.e. the reason for ->set_piomode(),
	  ->set_dmamode(), and ->post_set_mode() hooks).
	
	  Filter TPM commands by default. These provide an
	  essentially uncontrolled encrypted "back door" between
	  applications and the disk. Set libata.allow_tpm=1 if you
	  have a real reason for wanting to use them. This ensures
	  that installed software cannot easily mess stuff up without
	  user intent. DVR type users will probably ship with this enabled
	  for movie content management.
	 
	  Note that for ATA8 we can issue a DCS change and DCS freeze lock
	  for this and should do in future but that it is not sufficient as
	  DCS is an optional feature set. Thus we also do the software filter
	  so that we comply with the TC consortium stated goal that the user
	  can turn off TC features of their system.
  ata_format_dsm_trim_descr() - SATL Write Same to DSM Trim
  @cmd: SCSI command being translated
  @trmax: Maximum number of entries that will fit in sector_size bytes.
  @sector: Starting sector
  @count: Total Range of request in logical sectors
  Rewrite the WRITE SAME descriptor to be a DSM TRIM little-endian formatted
  descriptor.
  Upto 64 entries of the format:
    63:48 Range Length
    47:0  LBA
   Range Length of 0 is ignored.
   LBA's should be sorted order and not overlap.
  NOTE: this is the same format as ADD LBA(S) TO NV CACHE PINNED SET
  Return: Number of bytes copied into sglist.
  ata_scsi_write_same_xlat() - SATL Write Same to ATA SCT Write Same
  @qc: Command to be translated
  Translate a SCSI WRITE SAME command to be either a DSM TRIM command or
  an SCT Write Same command.
  Based on WRITE SAME has the UNMAP flag:
    - When set translate to DSM TRIM
    - When clear translate to SCT Write Same
 we may not issue DMA commands if no DMA mode is set 
	
	  We only allow sending this command through the block layer,
	  as it modifies the DATA OUT buffer, which would corrupt user
	  memory for SG_IO commands.
 If the request is too large the cmd is invalid 
	
	  WRITE SAME always has a sector sized buffer as payload, this
	  should never be a multiple entry SG list.
	
	  size must match sector size in bytes
	  For DATA SET MANAGEMENT TRIM in ACS-2 nsect (aka count)
	  is defined as number of 512 byte blocks to be transferred.
 Newer devices support queued TRIM commands 
 "Parameter list length error" 
 "Invalid command operation code" 
 	ata_scsiop_maint_in - Simulate a subset of MAINTENANCE_IN
 	@args: device MAINTENANCE_IN data  SCSI command of interest.
 	@rbuf: Response buffer, to which simulated SCSI cmd output is sent.
 	Yields a subset to satisfy scsi_report_opcode()
 	LOCKING:
 	spin_lock_irqsave(host lock)
 supported 
 	ata_scsi_report_zones_complete - convert ATA output
 	@qc: command structure returning the data
 	Convert T-13 little-endian field representation into
 	T-10 big-endian field representation.
 	What a mess.
 Swizzle header 
 Swizzle zone descriptor 
	
	  ZAC allows only for transfers in 512 byte blocks,
	  and uses a 16 bit value for the transfer count.
 "Parameter list length error" 
		
		  ZAC MANAGEMENT OUT doesn't define any length
		
		  Ignore the block address (zone ID) as defined by ZBC.
		
		  Block must be a valid zone ID (a zone start LBA).
 "Parameter list length error" 
 	ata_mselect_caching - Simulate MODE SELECT for caching info page
 	@qc: Storage for translated ATA taskfile
 	@buf: input buffer
 	@len: number of valid bytes in the input buffer
 	@fp: out parameter for the failed field on error
 	Prepare a taskfile to modify caching information for the device.
 	LOCKING:
 	None.
	
	  The first two bytes of def_cache_mpage are a header, so offsets
	  in mpage are off by 2 compared to buf.  Same for len.
	
	  Check that read-only bits are not modified.
 	ata_mselect_control - Simulate MODE SELECT for control page
 	@qc: Storage for translated ATA taskfile
 	@buf: input buffer
 	@len: number of valid bytes in the input buffer
 	@fp: out parameter for the failed field on error
 	Prepare a taskfile to modify caching information for the device.
 	LOCKING:
 	None.
	
	  The first two bytes of def_control_mpage are a header, so offsets
	  in mpage are off by 2 compared to buf.  Same for len.
	
	  Check that read-only bits are not modified.
 	ata_scsi_mode_select_xlat - Simulate MODE SELECT 6, 10 commands
 	@qc: Storage for translated ATA taskfile
 	Converts a MODE SELECT command to an ATA SET FEATURES taskfile.
 	Assume this is invoked for direct access devices (e.g. disks) only.
 	There should be no block descriptor for other device types.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 We only support PF=1, SP=0.  
 Test early for possible overrun.  
 Move past header and block descriptors.  
 Parse both possible formats for the mode page headers.  
	
	  No mode subpages supported (yet) but asking for _all_
	  subpages may be valid
 No ATA command to send 
 invalid page code 
	
	  Only one page has changeable data, so we only support setting one
	  page at a time.
 "Parameter list length error" 
	
	  We don't support the ATA "security" protocol.
 INC_512 
 convert to the sector-based ATA addressing 
 	ata_scsi_var_len_cdb_xlat - SATL variable length CDB to Handler
 	@qc: Command to be translated
 	Translate a SCSI variable length CDB to specified commands.
 	It checks a service action value in CDB to call corresponding handler.
 	RETURNS:
 	Zero on success, non-zero on failure
	
	  if service action represents a ata pass-thru(32) command,
	  then pass it to ata_scsi_pass_thru handler.
 unsupported service action 
 	ata_get_xlat_func - check if SCSI to ATA translation is possible
 	@dev: ATA device
 	@cmd: SCSI command opcode to consider
 	Look up the SCSI command given, and determine whether the
 	SCSI command is to be translated or simulated.
 	RETURNS:
 	Pointer to translation function if possible, %NULL if not.
 	ata_scsi_dump_cdb - dump SCSI command contents to dmesg
 	@ap: ATA port to which the command was being sent
 	@cmd: SCSI command to dump
 	Prints the contents of a SCSI command via printk().
 relay SCSI command to ATAPI device 
 ATA_16 passthru, treat as an ATA command 
 	ata_scsi_queuecmd - Issue SCSI cdb to libata-managed device
 	@shost: SCSI host of command to be sent
 	@cmd: SCSI command to be sent
 	In some cases, this function translates SCSI commands into
 	ATA taskfiles, and queues the taskfiles to be sent to
 	hardware.  In other cases, this function simulates a
 	SCSI device by evaluating and responding to certain
 	SCSI commands.  This creates the overall effect of
 	ATA and ATAPI devices appearing as SCSI devices.
 	LOCKING:
 	ATA host lock
 	RETURNS:
 	Return value from __ata_scsi_queuecmd() if @cmd can be queued,
 	0 otherwise.
 	ata_scsi_simulate - simulate SCSI command on ATA device
 	@dev: the target device
 	@cmd: SCSI command being sent to device.
 	Interprets and directly executes a select list of SCSI commands
 	that can be handled internally.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 is CmdDt set?  
 is EVPD clear? 
	 if we reach this, then writeback caching is disabled,
	  turning this into a no-op.
 no-op's, complete with success 
 all other commands 
 "Invalid command operation code" 
		 Schedule policy is determined by ->qc_defer()
		  callback and it needs to see every deferred qc.
		  Set host_blocked to 1 to prevent SCSI midlayer from
		  automatically deferring requests.
 scsi_host_put() is in ata_devres_release() 
	 If we scanned while EH was in progress or allocation
	  failure occurred, scan would have failed silently.  Check
	  whether all devices are attached.
 we're missing some SCSI devices 
		 If caller requested synchrnous scan && we've made
		  any progress, sleep briefly and repeat.
		 We might be failing to detect boot device, give it
		  a few more chances.
 	ata_scsi_offline_dev - offline attached SCSI device
 	@dev: ATA device to offline attached SCSI device for
 	This function is called from ata_eh_hotplug() and responsible
 	for taking the SCSI device attached to @dev offline.  This
 	function is called with host lock which protects dev->sdev
 	against clearing.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	1 if attached SCSI device exists, 0 otherwise.
 	ata_scsi_remove_dev - remove attached SCSI device
 	@dev: ATA device to remove attached SCSI device for
 	This function is called from ata_eh_scsi_hotplug() and
 	responsible for removing the SCSI device attached to @dev.
 	LOCKING:
 	Kernel thread context (may sleep).
	 Alas, we need to grab scan_mutex to ensure SCSI device
	  state doesn't change underneath us and thus
	  scsi_device_get() always succeeds.  The mutex locking can
	  be removed if there is __scsi_device_get() interface which
	  increments reference counts regardless of device state.
 clearing dev->sdev is protected by host lock 
		 If user initiated unplug races with us, sdev can go
		  away underneath us after the host lock and
		  scan_mutex are released.  Hold onto it.
			 The following ensures the attached sdev is
			  offline on return from ata_scsi_offline_dev()
			  regardless it wins or loses the race
			  against this function.
 	ata_scsi_media_change_notify - send media change event
 	@dev: Pointer to the disk device with media change event
 	Tell the block layer to send a media change notification
 	event.
  	LOCKING:
  	spin_lock_irqsave(host lock)
 	ata_scsi_hotplug - SCSI part of hotplug
 	@work: Pointer to ATA port to perform SCSI hotplug on
 	Perform SCSI part of hotplug.  It's executed from a separate
 	workqueue after EH completes.  This is necessary because SCSI
 	hot plugging requires working EH and hot unplugging is
 	synchronized with hot plugging with a mutex.
 	LOCKING:
 	Kernel thread context (may sleep).
	 Unplug detached devices.  We cannot use link iterator here
	  because PMP links have to be scanned even if PMP is
	  currently not attached.  Iterate manually.
 scan for new ones 
 	ata_scsi_user_scan - indication for user-initiated bus scan
 	@shost: SCSI host to scan
 	@channel: Channel to scan
 	@id: ID to scan
 	@lun: LUN to scan
 	This function is called when user explicitly requests bus
 	scan.  Set probe pending flag and invoke EH.
 	LOCKING:
 	SCSI layer (we don't care)
 	RETURNS:
 	Zero.
 	ata_scsi_dev_rescan - initiate scsi_rescan_device()
 	@work: Pointer to ATA port to perform scsi_rescan_device()
 	After ATA pass thru (SAT) commands are executed successfully,
 	libata need to propagate the changes to SCSI layer.
 	LOCKING:
 	Kernel thread context (may sleep).
 SPDX-License-Identifier: GPL-2.0-only
  MediaTek AHCI SATA driver
  Copyright (c) 2017 MediaTek Inc.
  Author: Ryder Lee <ryder.lee@mediatek.com>
 reset AXI bus and PHY part 
 enable SATA function if needed 
 SPDX-License-Identifier: GPL-2.0-or-later
  pata_ns87410.c 	- National Semiconductor 87410 PATA for new ATA layer
 			  (C) 2006 Red Hat Inc
 	ns87410_pre_reset		-	probe begin
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Check enabled ports
 	ns87410_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program timing data. This is kept per channel not per device,
 	and only affects the data port.
 IORDY enable 
	 We use ap->private_data as a pointer to the device currently
 	ns87410_qc_issue	-	command issue
 	@qc: command pending
 	Called when the libata layer is about to issue a command. We wrap
 	this interface so that we can load the correct ATA timings if
 	necessary.
	 If modes have been configured and the channel data is not loaded
	   then load it. We have to check if pio_mode is set as the core code
	   does not set adev->pio_mode to XFER_PIO_0 while probing as would be
 SPDX-License-Identifier: GPL-2.0-or-later
   libahci.c - Common AHCI SATA low-level routines
   Maintained by:  Tejun Heo <tj@kernel.org>
     		    Please ALWAYS copy linux-ide@vger.kernel.org
 		    on emails.
   Copyright 2004-2005 Red Hat, Inc.
  libata documentation is available via 'make {ps|pdf}docs',
  as Documentationdriver-apilibata.rst
  AHCI hardware documentation:
  http:www.intel.comtechnologyserialatapdfrev1_0.pdf
  http:www.intel.comtechnologyserialatapdfrev1_1.pdf
 add other LED protocol types when they become supported 
 device sleep idle timeout in ms 
 turn on AHCI_EN 
	 Some controllers need AHCI_EN to be written multiple times.
	  Try a few times before giving up.
 flush && sanity check 
 	ahci_rpm_get_port - Make sure the port is powered on
 	@ap: Port to power on
 	Whenever there is need to access the AHCI host registers outside of
 	normal execution paths, call this function to make sure the host is
 	actually powered on.
 	ahci_rpm_put_port - Undoes ahci_rpm_get_port()
 	@ap: Port to power down
 	Undoes ahci_rpm_get_port() and possibly powers down the AHCI host
 	if it has no more active users.
 the count should not be larger than PAGE_SIZE 
 check size validity 
 	ahci_save_initial_config - Save and fixup initial config values
 	@dev: target AHCI device
 	@hpriv: host private area to store config values
 	Some registers containing configuration info might be setup by
 	BIOS and might be cleared on reset.  This function saves the
 	initial values of those registers into @hpriv such that they
 	can be restored after controller reset.
 	If inconsistent, config values are fixed up by this function.
 	If it is not set already this function sets hpriv->start_engine to
 	ahci_start_engine.
 	LOCKING:
 	None.
 make sure AHCI mode is enabled before accessing CAP 
	 Values prefixed with saved_ are written back to host after
	  reset.  Values without are used for driver operation.
 CAP2 register is only defined for AHCI 1.2 and later 
 some chips have errata preventing 64bit use 
 cross check port_map and cap.n_ports 
		 If PI has more ports than n_ports, whine, clear
		  port_map and let it be generated from n_ports.
 fabricate port_map from cap.nr_ports for < AHCI 1.3 
 write the fixed up value to the PI register 
 record values to use during operation 
 	ahci_restore_initial_config - Restore initial config
 	@host: target ATA host
 	Restore initial config stored by ahci_save_initial_config().
 	LOCKING:
 	None.
 flush 
 start DMA 
 flush 
	
	  On some controllers, stopping a port's DMA engine while the port
	  is in ALPM state (partial or slumber) results in failures on
	  subsequent DMA engine starts.  For those controllers, put the
	  port back in active state before stopping its DMA engine.
 check if the HBA is idle 
	
	  Don't try to issue commands but return with ENODEV if the
	  AHCI controller not available anymore (e.g. due to PCIe hot
	  unplugging). Otherwise a 500ms delay for each port is added.
 setting HBA to idle 
 wait for engine to stop. This could be as long as 500 msec 
 set FIS registers 
 enable FIS reception 
 flush 
 disable FIS reception 
 wait for completion, spec says 500ms, give it 1000 
 spin up device 
 wake up link 
 wakeup flag only applies to the max power policy 
		
		  Disable interrupts on Phy Ready. This keeps us from
		  getting woken up due to spurious phy ready
		  interrupts.
 wait 10ms to be sure we've come out of LPM state 
 write out new cmd value 
 set aggressive device sleep 
 turn PHYRDY IRQ back on 
 put device into listen mode, first set PxSCTL.DET to 0 
 then set PxCMD.SUD to 0 
 enable FIS reception 
 enable DMA 
 turn on LEDs 
 EM Transmit bit maybe busy during init 
				
				  If busy, give a breather but do not
				  release EH ownership by using msleep()
				  instead of ata_msleep().  EM Transmit
				  bit is busy for the whole host and
				  releasing ownership will cause other
				  ports to fail the same way.
 disable DMA 
 disable FIS reception 
	 we must be in AHCI mode, before using anything
	  AHCI-specific, such as HOST_RESET.
 global controller reset 
 flush 
		
		  to perform host reset, OS should set HOST_RESET
		  and poll until this bit is read to be "0".
		  reset must complete within 1 second, or
		  the hardware should be considered fried.
 turn on AHCI mode 
		 Some registers might be cleared on reset.  Restore
		  initial values.
	 check to see if we've had activity.  If so,
	  toggle state of LED and reset timer.  If not,
	  turn LED to desired idle state.
 get the current LED state 
 clear old state 
 toggle state 
 switch to idle 
 init activity stats, setup timer 
 check our blink policy and set flag for link if it's enabled 
 get the slot number from the message 
	
	  if we are still busy transmitting a previous message,
	  do not allow
		
		  create message header - this is all zero except for
		  the message size, which is 4 bytes.
 ignore 0:4 of byte zero, fill in port info yourself 
 write message to EM_LOC 
		
		  tell hardware to transmit the message
 save off new led state for portslot 
 get the slot number from the message 
	 mask off the activity bits if we are in sw_activity
	  mode, user should turn off sw_activity before setting
	  activity led through em_message
 save the desired Activity LED behavior 
 clear LFLAG 
 set the LED to OFF 
 set LED to ON for idle 
 check this 
	 display the saved value of activity behavior for this
	  disk.
 make sure port is not active 
 clear SError 
 clear port IRQ 
 mark esata ports 
 stop engine 
	 need to do CLO?
	  always do CLO if PMP is attached (AHCI-1.3 9.2)
 perform CLO 
 restart engine 
 five dwords 
 prep the command 
 set port value for softreset of Port Multiplier 
 issue & wait 
 flush 
 prepare for SRST (AHCI-1.1 10.4.1) 
	
	  According to AHCI-1.2 9.3.9: if FBS is enable, software shall
	  clear PxFBS.EN to '0' prior to issuing software reset to devices
	  that is attached to port multiplier.
 issue the first H2D Register FIS 
 spec says at least 5us, but be generous and sleep for 1ms 
 issue the second H2D Register FIS 
 wait for link to become ready 
		
		  Workaround for cases where link online status can't
		  be trusted.  Treat device readiness timeout as link
		  offline.
 link occupied, -ENODEV too is an error 
 re-enable FBS if disabled before 
	
	  There is no need to check TFDATA if BAD PMP is found due to HW bug,
	  which can save timeout delay.
	
	  Soft reset fails with IPMS set when PMP is enabled but
	  SATA HDDODD is connected to SATA port, do soft reset
	  again to port 0.
 clear D2H reception area to properly wait for D2H FIS 
 Make sure port's ATAPI bit is set appropriately 
 flush 
	
	  Next, the SG list.
 five dwords 
	
	  Fill in command table information.  First, the header,
	  a SATA Register - Host to Device command FIS.
	
	  Fill in command slot information.
	 time to wait for DEC is not specified by AHCI spec,
	  add a retry loop for safety.
 determine active link with error 
 record irq stat 
 AHCI needs SError cleared; otherwise, it might lock up 
 some controllers set IRQ_IF_ERR on device errors, ignore it 
		 If qc is active, charge it; otherwise, the active
		  link.  There's no active qc on NCQ errors.  It will
		  be determined by EH by reading log page 10h.
 okay, let's hand over to EH 
 ignore BAD_PMP while resetting 
		 If SNotification is available, leave notification
		  handling to sata_async_notification().  If not,
		  emulate it by snooping SDB FIS RX area.
		 
		  Snooping FIS RX area is probably cheaper than
		  poking SNotification but some constrollers which
		  implement SNotification, ICH9 for example, don't
		  store AN SDB FIS into receive area.
			 If the 'N' bit in word 0 of the FIS is set,
			  we just received asynchronous notification.
			  Tell libata about it.
			 
			  Lack of SNotification should not appear in
			  ahci 1.2, so the workaround is unnecessary
			  when FBS is enabled.
	 pp->active_link is not reliable once FBS is enabled, both
	  PORT_SCR_ACT and PORT_CMD_ISSUE should be checked because
	  NCQ and non-NCQ commands may be in flight at the same time.
 pp->active_link is valid iff any command is in flight 
 while resetting, invalid completions are expected 
 sigh.  0xffffffff is a valid return from hw 
	 HOST_IRQ_STAT behaves as level triggered latch meaning that
	  it should be cleared after all the port events are cleared;
	  otherwise, it will raise a spurious interrupt after each
	  valid one.  Please read section 10.6.2 of ahci 1.1 for more
	  information.
	 
	  Also, use the unmasked value to clear interrupt as spurious
	  pending event on a dummy port might cause screaming IRQ.
	 Keep track of the currently active link.  It will be used
	  in completion path to determine whether NCQ phase is in
	  progress.
	
	  After a successful execution of an ATA PIO data-in command,
	  the device doesn't send D2H Reg FIS to update the TF and
	  the host should take TF and E_Status from the preceding PIO
	  Setup FIS.
 turn IRQ off 
 clear IRQ 
 turn IRQ back on 
 restart engine 
 make DMA engine forget about the failed command 
 disable device sleep 
 device sleep was already enabled and same dito 
 set DITO, MDAT, DETO and enable DevSlp, need to stop engine first 
	 Use the nominal value 10 ms if the read MDAT is zero,
	  the nominal value of DETO is 20 ms.
 Make dito, mdat, deto bits to 0s 
 enable device sleep feature for the drive 
 initialization 
 initialization 
	
	  We must not change the port interrupt mask register if the
	  port is marked frozen, the value in pp->intr_mask will be
	  restored later when the port is thawed.
	 
	  Note that during initialization, the port is marked as
	  frozen since the irq handler is not yet registered.
 see comment above in ahci_pmp_attach() 
 check FBS capability 
	
	  First item in chunk of DMA memory: 32-slot command table,
	  32 bytes each in size
	
	  Second item: Received-FIS area
	
	  Third item: data area for storing a single command
	  and its scatter-gather table
	
	  Save off initial list of interrupts to be enabled.
	  This could be changed later
	
	  Switch to per-port locking in case each port has its own MSI vector.
 engage engines, captain 
 de-initialize port 
	
	  Clear GHC.IS to prevent stuck INTx after disabling MSI and
	  re-enabling INTx.
 store em_loc 
	
	  Requests IRQs according to AHCI-1.1 when multiple MSIs were
	  allocated. That is one MSI per port, starting from @irq.
 Do not receive interrupts sent by dummy ports 
 	ahci_host_activate - start AHCI host, request IRQs and register it
 	@host: target ATA host
 	@sht: scsi_host_template to use when registering the host
 	LOCKING:
 	Inherited from calling layer (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
 SPDX-License-Identifier: GPL-2.0-only
     pata_ns87415.c - NS87415 (and PARISC SUPERIO 87560) PATA
 	(C) 2005 Red Hat <alan@lxorguk.ukuu.org.uk>
     This is a fairly generic MWDMA controller. It has some limitations
     as it requires timing reloads on PIODMA transitions but it is otherwise
     fairly well designed.
     This driver assumes the firmware has left the chip in a valid ST506
     compliant state, either legacy IRQ 1415 or native INTA shared. You
     may need to add platform code if your system fails to do this.
     The same cell appears in the 87560 controller used by some PARISC
     systems. This has its own special mountain of errata.
     TODO:
 	Get someone to test on SPARC
 	Implement lazy piodma switching for better performance
 	8bit shared timing.
 	See if we need to kill the FIFO for ATAPI
 	ns87415_set_mode - Initialize host controller mode timings
 	@ap: Port whose timings we are configuring
 	@adev: Device whose timings we are configuring
 	@mode: Mode to set
 	Program the mode registers for this controller, channel and
 	device. Because the chip is quite an old design we have to do this
 	for PIODMA switches.
 	LOCKING:
 	None (inherited from caller).
 PCI clocks 
	 Timing register format is 17 - low nybble read timing with
 Use the same timing for read and write bytes 
 Set the IORDY enable versus DMA enable on or off properly 
	 Paranoia: We shouldn't ever get here with busy write buffers
	 Flip the IORDYDMA bits now we are sure the write buffers are
	 TODO: Set byte 54 command timing to the best 8bit
 	ns87415_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set PIO mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 	ns87415_bmdma_setup		-	Set up DMA
 	@qc: Command block
 	Set up for bus mastering DMA. We have to do this ourselves
 	rather than use the helper due to a chip erratum
 load PRD table addr. 
 make sure PRD table writes are visible to controller 
 specify data direction, triple-check start bit is clear 
	 Due to an erratum we need to write these bits to the wrong
 issue rw command 
 	ns87415_bmdma_start		-	Begin DMA transfer
 	@qc: Command block
 	Switch the timings for the chip and set up for a DMA transfer
 	before the DMA burst begins.
 	FIXME: We should do lazy switching on bmdma_start versus
 	ata_pio_data_xfer for better performance.
 	ns87415_bmdma_stop		-	End DMA transfer
 	@qc: Command block
 	End DMA mode and switch the controller back into PIO mode
 	ns87415_irq_clear		-	Clear interrupt
 	@ap: Channel to clear
 	Erratum: Due to a chip bug registers 02 and 0A bit 1 and 2 (the
 	error bits) are reset by writing to register 00 or 08.
 	ns87415_check_atapi_dma		-	ATAPI DMA filter
 	@qc: Command block
 	Disable ATAPI DMA (for now). We may be able to do DMA if we
 	kill the prefetching. This isn't clear.
 SUPERIO 87560 is a PoS chip that NatSem denies exists.
  Unfortunately, it's built-in on all Astro-based PA-RISC workstations
  which use the integrated NS87514 cell for CD-ROM support.
  i.e we have to support for CD-ROM installs.
  See driverspariscsuperio.c for more gory details.
  Workarounds taken from driversidepcins87415.c
 	ns87560_read_buggy	-	workaround buggy Super IO chip
 	@port: Port to read
 	Work around chipset problems in the 87560 SuperIO chip
 	ns87560_check_status
 	@ap: channel to check
 	Return the status of the channel working around the
 	87560 flaws.
 	ns87560_tf_read - input device's ATA taskfile shadow registers
 	@ap: Port from which input is read
 	@tf: ATA taskfile register set for storing input
 	Reads ATA taskfile registers for currently-selected device
 	into @tf. Work around the 87560 bugs.
 	LOCKING:
 	Inherited from caller.
 	ns87560_bmdma_status
 	@ap: channel to check
 	Return the DMA status of the channel working around the
 	87560 flaws.
 87560 SuperIO Support 
 Select 512 byte sectors 
 Select PIO0 8bit clocking 
 	ns87415_init_one - Register 87415 ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in ns87415_pci_tbl matching with @pdev
 	Called from kernel PCI layer.  We probe for combined mode (sigh),
 	and then hand over control to libata, for it to do the rest.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 terminate list 
 SPDX-License-Identifier: GPL-2.0-only
  pata_cypress.c 	- Cypress PATA for new ATA layer
 			  (C) 2006 Red Hat Inc
 			  Alan Cox
  Based heavily on
  linuxdriversidepcicy82c693.c		Version 0.40	Sep. 10, 2002
 here are the offset definitions for the registers 
 	cy82c693_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Called to do the PIO mode setup.
 Mask bits 
 Mask bits 
 	cy82c693_set_dmamode	-	set initial DMA mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Called to do the DMA mode setup.
 Be afraid, be very afraid. Magic registers  in low IO space 
 0x50 gives the best behaviour on the Alpha's using this chip 
	 Devfn 1 is the ATA primary. The secondary is magic and on devfn2.
  SATA glue for Cavium Octeon III SOCs.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Copyright (C) 2010-2015 Cavium Networks
 SPDX-License-Identifier: GPL-2.0-or-later
    pata_pcmcia.c - PCMCIA PATA controller driver.
    Copyright 2005-2006 Red Hat Inc, all rights reserved.
    PCMCIA ident update Copyright 2006 Marcin Juszkiewicz
 						<openembedded@hrw.one.pl>
    Heavily based upon ide-cs.c
    The initial developer of the original code is David A. Hinds
    <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
    are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
 	pcmcia_set_mode	-	PCMCIA specific mode setup
 	@link: link
 	@r_failed_dev: Return pointer for failed device
 	Perform the tuning and setup of the devices and timings, which
 	for PCMCIA is the same as any other controller. We wrap it however
 	as we need to spot hardware with incorrect or missing masterslave
 	decode, which alas is embarrassingly common in the PC world
		 Suspicious match, but could be two cards from
 	pcmcia_set_mode_8bit	-	PCMCIA specific mode setup
 	@link: link
 	@r_failed_dev: Return pointer for failed device
 	For the simple emulated 8bit stuff the less we do the better.
 	ata_data_xfer_8bit	 -	Transfer data by 8bit PIO
 	@qc: queued command
 	@buf: data buffer
 	@buflen: buffer length
 	@rw: readwrite
 	Transfer data fromto the device data register by 8 bit PIO.
 	LOCKING:
 	Inherited from caller.
 	pcmcia_8bit_drain_fifo - Stock FIFO drain logic for SFF controllers
 	@qc: command
 	Drain the FIFO and device of any stuck data following a command
 	failing to complete. In some cases this is necessary before a
 	reset will recover the device.
 We only need to flush incoming data when a command was running 
 Drain up to 64K of data before we give up this recovery method 
 	pcmcia_init_one		-	attach a PCMCIA interface
 	@pdev: pcmcia device
 	Register a PCMCIA IDE interface. Such interfaces are PIO 0 and
 	shared IRQ.
 Set up attributes in order to probe card and get resources 
	 See if we have a manufacturer identifier. Use it to set is_kme for
 No suitable config found 
 iomap 
 Success. Disable the IRQ nIEN line, do quirks 
	 FIXME: Could be more ports at base + 0x10 but we only deal with
	
	 	Having done the PCMCIA plumbing the ATA side is relatively
	 	sane.
 ISA so PIO 0 cycles 
 activate 
 	pcmcia_remove_one	-	unplug an pcmcia interface
 	@pdev: pcmcia device
 	A PCMCIA ATA device has been unplugged. Perform the needed
 	cleanup. Also called on module unload for any active devices.
 Corsair 
 Hitachi 
 I-O Data CFA 
 Mitsubishi CFA 
 SanDisk CFA 
 Kingston 
 TI emulated 
 Toshiba 
 Samsung 
 SanDisk High (>8G) CFA 
 Hitachi 
 Viking CFA 
 Lexar, Viking CFA 
 SPDX-License-Identifier: GPL-2.0-only
  pata_mpiix.c 	- Intel MPIIX PATA for new ATA layer
 			  (C) 2005-2006 Red Hat Inc
 			  Alan Cox <alan@lxorguk.ukuu.org.uk>
  The MPIIX is different enough to the PIIX4 and friends that we give it
  a separate driver. The old idepci code handles this by just not tuning
  MPIIX at all.
  The MPIIX also differs in another important way from the majority of PIIX
  devices. The chip is a bridge (pardon the pun) between the old world of
  ISA IDE and PCI IDE. Although the ATA timings are PCI configured the actual
  IDE controller is not decoded in PCI space and the chip does not claim to
  be IDE class PCI. This requires slightly non-standard probe logic compared
  with PCI IDE and also that we do not disable the device when our driver is
  unloaded (as it has many other functions).
  The driver consciously keeps this logic internally to avoid pushing quirky
  PATA history into the clean libata layer.
  Thinkpad specific note: If you boot an MPIIX using a thinkpad with a PCMCIA
  hard disk present this driver will not detect it. This is not a bug. In this
  configuration the secondary port of the MPIIX is disabled and the addresses
  are decoded by the PCMCIA bridge and therefore are for a generic IDE driver
  to operate.
 IDE control register 
 	mpiix_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Called to do the PIO mode setup. The MPIIX allows us to program the
 	IORDY sample point (2-5 clocks), recovery (1-4 clocks) and whether
 	prefetching or IORDY are used.
 	This would get very ugly because we can only program timing for one
 	device at a time, the other gets PIO0. Fortunately libata calls
 	our qc_issue command before a command is issued so we can flip the
 	timings back and forth to reduce the pain.
 ISP  RTC 
 Mask the IORDYTIMEPPE for this device 
 Enable prefetchposting for disk 
 This drive is on the fast timing bank 
 Mask out timing and clear both TIME bank selects 
	 We use ap->private_data as a pointer to the device currently
 	mpiix_qc_issue		-	command issue
 	@qc: command pending
 	Called when the libata layer is about to issue a command. We wrap
 	this interface so that we can load the correct ATA timings if
 	necessary. Our logic also clears TIME0TIME1 for the other device so
 	that, even if we get this wrong, cycles to the other device will
 	be made PIO0.
	 If modes have been configured and the channel data is not loaded
	   then load it. We have to check if pio_mode is set as the core code
	   does not set adev->pio_mode to XFER_PIO_0 while probing as would be
 Single threaded by the PCI probe logic 
	 MPIIX has many functions which can be turned on or off according
	   to other devices present. Make sure IDE is enabled before we try
 See if it's primary or secondary channel... 
	 We do our own plumbing to avoid leaking special cases for whacko
	   ancient hardware into the core code. There are two issues to
	   worry about.  #1 The chip is a bridge so if in legacy mode and
	   without BARs set fools the setup.  #2 If you pci_disable_device
 Let libata fill in the port details 
 activate host 
 SPDX-License-Identifier: GPL-2.0-only
  copyright (c) 2013 Freescale Semiconductor, Inc.
  Freescale IMX AHCI SATA platform driver
  based on the AHCI SATA platform driver by Jeff Garzik and Anton Vorontsov
 Timer 1-ms Register 
 Port0 PHY Control Register 
 Port0 PHY Status Register 
 Lane0 Output Status Register 
 Clock Reset Register 
 IMX8QM HSIO AHCI definitions 
 Assert or deassert the bit 
 Wait for the cr_ack signal 
 Supply the address on cr_data_in 
 Assert the cr_cap_addr signal 
 Deassert cr_cap_addr 
 Supply the data on cr_data_in 
 Assert the cr_cap_data signal 
 Deassert cr_cap_data 
		
		  In case we're resetting the phy, it's unable to acknowledge,
		  so we return immediately here.
 Assert the cr_write signal 
 Deassert cr_write 
 Assert the cr_read signal 
 Capture the data from cr_data_out[] 
 Deassert cr_read 
 6qp adds the sata reset mechanism, use it for 6qp sata 
 Reset SATA PHY by setting RESET bit of PHY register CLOCK_RESET 
 Wait for PHY RX_PLL to be stable 
 SATA PHY Register 
 two dummy read 
 check if valid 
 Use the U32 to make 1000 precision 
 SATA AHCI temperature monitor 
 check rd-wr to reg 
 start temperature test 
 mpll_tst.meas_iv   ([12:2]) 
 rtune_ctl.mode     ([1:0]) 
 dac_ctl.dac_mode   ([14:12]) 
 rtune_ctl.sel_atbp ([4]) 
 Calculate the m1 
 mpll_tst.meas_iv 
 rtune_ctl.mode 
 dac_ctl.dac_mode 
 rtune_ctl.sel_atbp 
 Calculate the m2 
 rtune_ctl.sel_atbp 
 restore the status  
 mpll_tst.meas_iv 
 rtune_ctl.mode 
 dac_ctl.dac_mode 
 rtune_ctl.sel_atbp 
 Compute temperature 
 configure the hsio for sata 
 Configure PHYx2 PIPE_RSTN 
 The link of the PCIEA of HSIO is down 
 The link of the PCIEB of HSIO is down 
 The links of both PCIA and PCIEB of HSIO are down 
 set PWR_RST and BT_RST of csr_pciea 
 PHYX1_MODE to SATA 
	
	  BIT0 RXENA 1, BIT1 TXENA 0
	  BIT12 PHY_X1_EPCS_SEL 1.
	
	  It is possible, for PCIe and SATA are sharing
	  the same clock source, HPLL or external oscillator.
	  When PCIe is in low power modes (L1.X or L2 etc),
	  the clock source can be turned off. In this case,
	  if this clock source is required to be toggling by
	  SATA, then SATA functions will be abnormal.
	  Set the override here to avoid it.
 clear PHY RST, then set it 
 CTRL RST: SET -> delay 1 us -> CLEAR -> SET 
 APB reset 
		
		  To reduce the power consumption, gate off
		  the PHY clks
		
		  set PHY Paremeters, two steps to configure the GPR13,
		  one write for rest of parameters, mask of first write
		  is 0x07ffffff, and the other one write for setting
		  the mpll_clk_en.
	
	  Disable link to save power.  An imx ahci port can't be recovered
	  without full reset once the pddq mode is enabled making it
	  impossible to use as part of libata LPM.
 Fetch GPIO, then enable the external OSC 
 Add the temperature monitor 
	
	  Configure the HWINIT bits of the HOST_CAP and HOST_PORTS_IMPL,
	  and IP vendor specific register IMX_TIMER1MS.
	  Configure CAP_SSS (support stagered spin up).
	  Implement the port0.
	  Get the ahb clock rate, and configure the TIMER1MS register.
  pata_ali.c 	- ALI 15x3 PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
  based in part upon
  linuxdriversidepcialim15x3.c		Version 0.17	20030102
   Copyright (C) 1998-2000 Michel Aubry, Maintainer
   Copyright (C) 1998-2000 Andrzej Krzysztofowicz, Maintainer
   Copyright (C) 1999-2000 CJ, cjtsai@ali.com.tw, Maintainer
   Copyright (C) 1998-2000 Andre Hedrick (andre@linux-ide.org)
   May be copied or modified under the terms of the GNU General Public License
   Copyright (C) 2002 Alan Cox <alan@redhat.com>
   ALi (now ULi M5228) support by Clear Zhang <Clear.Zhang@ali.com.tw>
   Documentation
 	Chipset documentation available under NDA only
   TODOCHECK
 	Cannot have ATAPI on both master & slave for rev < c2 (???) but
 	otherwise should do atapi DMA (For now for old we do PIO only for
 	ATAPI)
 	Review Sunblade workaround.
 	Cable special cases
 Fujitsu P2000 
 Mitac 8317 (Winbook-A) and relatives 
 Systems by DMI 
 	ali_c2_cable_detect	-	cable detection
 	@ap: ATA port
 	Perform cable detection for C2 and later revisions
	 Certain laptops use short but suitable cables and don't
	 Host view cable detect 0x4A bit 0 primary bit 1 secondary
 	ali_20_filter		-	filter for earlier ALI DMA
 	@adev: ATA device
 	@mask: received mask to manipulate and pass back
 	Ensure that we do not do DMA on CD devices. We may be able to
 	fix that later on. Also ensure we do not do UDMA on WDC drives
 No DMA on anything but a disk for now 
 	ali_fifo_control	-	FIFO manager
 	@ap: ALi channel to control
 	@adev: device for FIFO control
 	@on: 0 for off 1 for on
 	Enable or disable the FIFO on a given device. Because of the way the
 	ALi FIFO works it provides a boost on ATA disk but can be confused by
 	ATAPI and we must therefore manage it.
	 ATA - FIFO on set nibble to 0x05, ATAPI - FIFO off, set nibble to
	   0x00. Not all the docs agree but the behaviour we now use is the
 	ali_program_modes	-	load mode registers
 	@ap: ALi channel to load
 	@adev: Device the timing is for
 	@t: timing data
 	@ultra: UDMA timing or zero for off
 	Loads the timing registers for cmddata and disable UDMA if
 	ultra is zero. If ultra is set then load and enable the UDMA
 	timing but do not touch the commanddata timing.
 Command timing 
 Command timing 
 RW timing 
 UDMA timing 
 Set up the UDMA enable 
 	ali_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program the ALi registers for PIO mode.
 PCI clock based 
 PIO FIFO is only permitted on ATA disk 
 	ali_set_dmamode	-	set initial DMA mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program the ALi registers for DMA mode.
 PCI clock based 
 	ali_warn_atapi_dma	-	Warn about ATAPI DMA disablement
 	@adev: Device
 	Whine about ATAPI DMA disablement if @adev is an ATAPI device.
 	Can be used as ->dev_config.
 	ali_lock_sectors	-	Keep older devices to 255 sector mode
 	@adev: Device
 	Called during the bus probe for each device that is found. We use
 	this call to lock the sector count of the device to 255 or less on
 	older ALi controllers. If we didn't do this then large IO's would
 	require LBA48 commands which the older ALi requires are issued by
 	slower PIO methods
 	ali_check_atapi_dma	-	DMA check for most ALi controllers
 	@qc: Command to complete
 	Called to decide whether commands should be sent by DMA or PIO
		 FIXME: pata_ali can't do ATAPI DMA reliably but the
		  IDE alim15x3 driver can.  I tried lots of things
		  but couldn't find what the actual difference was.
		  If you got an idea, please write it to
		  linux-ide@vger.kernel.org and cc htejun@gmail.com.
		 
		  Disable ATAPI DMA for now.
 If its not a media command, its not worth it 
 If our bridge is an ALI 1533 then do the extra work 
 Tristate and re-enable the bus signals 
 	Port operations for PIO only ALi
 	Port operations for DMA capable ALi without cable
 	detect
 	Port operations for DMA capable ALi with cable detect
 	Port operations for DMA capable ALi with cable detect
 	Port operations for DMA capable ALi with cable detect and LBA48
 	ali_init_chipset	-	chip setup function
 	@pdev: PCI device of ATA controller
 	Perform the setup on the device that must be done both at boot
 	and at resume time.
	
	  The chipset revision selects the driver operations and
	  mode data.
 1543-EF, 1543C-C, 1543C-D, 1543C-E 
 Clear CD-ROM DMA write bit 
 Cable and UDMA 
		
		  CD_ROM DMA on (0x53 bit 0). Enable this even if we want
		  to use PIO. 0x53 bit 1 (rev 20 only) - enable FIFO control
		  via 0x5455.
 CD_ROM enable for DMA 
		 Configure the ALi bridge logic. For non ALi rely on BIOS.
 	ali_init_one		-	discovery callback
 	@pdev: PCI device ID
 	@id: PCI table info
 	An ALi IDE interface has been discovered. Figure out what revision
 	and perform configuration work before handing it to the ATA layer
 Revision 0x20 added DMA 
 Revision 0x20 with support logic added UDMA 
 Revision 0xC2 adds UDMA66 
 Revision 0xC3 is UDMA66 for now 
 Revision 0xC4 is UDMA100 
 Revision 0xC5 is UDMA133 with LBA48 DMA 
	
	  The chipset revision selects the driver operations and
	  mode data.
 Are we paired with a UDMA capable chip 
 SPDX-License-Identifier: GPL-2.0-only
  EP93XX PATA controller driver.
  Copyright (c) 2012, Metasoft s.c.
 	Rafal Prylowski <prylowski@metasoft.pl>
  Based on pata_scc.c, pata_icside.c and on earlier version of EP93XX
  PATA driver by Lennert Buytenhek and Alessandro Zummo.
  ReadWrite timings, resource management and other improvements
  from driver by Joao Ramos and Bartlomiej Zolnierkiewicz.
  DMA engine support based on spi-ep93xx.c by Mika Westerberg.
  Original copyrights:
  Support for Cirrus Logic's EP93xx (EP9312, EP9315) CPUs
  PATA host controller driver.
  Copyright (c) 2009, Bartlomiej Zolnierkiewicz
  Heavily based on the ep93xx-ide.c driver:
  Copyright (c) 2009, Joao Ramos <joao.ramos@inov.pt>
 		      INESC Inovacao (INOV)
  EP93XX PATA controller driver.
  Copyright (C) 2007 Lennert Buytenhek <buytenh@wantstofly.org>
  An ATA driver for the Cirrus Logic EP93xx PATA controller.
  Based on an earlier version by Alessandro Zummo, which is:
    Copyright (C) 2006 Tower Technologies
 IDE Control Register 
	
	  the device IDE register to be accessed is selected through
	  IDECTRL register's specific bitfields 'DA', 'CS1N' and 'CS0N':
	    b4   b3   b2    b1     b0
	    A2   A1   A0   CS1N   CS0N
	  the values filled in this structure allows the value to be directly
	  ORed to the IDECTRL register, hence giving directly the A[2:0] and
	  CS1NCS0N values for each IDE register.
	  The values correspond to the transformation:
	    ((real IDE address) << 2) | CS1N value << 1 | CS0N value
 CS1 
 CS0 
 CS0 
 IDE Configuration Register 
 MDMA Operation Register 
 UDMA Operation Register 
 PIOMDMAUDMA Data Registers 
 UDMA Status Register 
 UDMA Debug Status Register 
  According to EP93xx User's Guide, WST field of IDECFG specifies number
  of HCLK cycles to hold the data bus after a PIO write operation.
  It should be programmed to guarantee following delays:
  PIO Mode   [ns]
  0          30
  1          20
  2          15
  3          10
  4          5
  Maximum possible value for HCLK is 100MHz.
  Based on delay loop found in mach-pxamp900.c.
  Single iteration should take 5 cpu cycles. This is 25ns assuming the
  fastest ep93xx cpu speed (200MHz) and is better optimized for PIO4 timings
  than eg. 20ns.
	
	  According to ATA specification, IORDY pin can be first sampled
	  tA = 35ns after activation of DIOR-DIOW-. Maximum IORDY pulse
	  width is tB = 1250ns.
	 
	  We are already t2 delay loop iterations after activation of
	  DIOR-DIOW-, so we set timeout to (1250 + 35)  25 - t2 additional
	  delay loop iterations.
 common part at start of ep93xx_pata_readwrite() 
 common part at end of ep93xx_pata_readwrite() 
 lengthen t2 if needed 
	
	  The IDEDATAIN register is loaded from the DD pins at the positive
	  edge of the DIORN signal. (EP93xx UG p27-14)
 IDE register read 
 PIO data read 
	
	  Value from IDEDATAOUT register is driven onto the DD pins when
	  DIOWN is low. (EP93xx UG p27-13)
 IDE register write 
 PIO data write 
	
	  Calculate timings for the delay loop, assuming ep93xx cpu speed
	  is 200MHz (maximum possible for ep93xx). If actual cpu speed is
	  slower, we will wait a bit longer in each delay.
	  Additional division of cpu speed by 5, because single iteration
	  of our delay loop takes 5 cpu cycles (25ns).
 Note: original code is ata_sff_check_status 
 Note: original code is ata_sff_tf_load 
 Note: original code is ata_sff_tf_read 
 Note: original code is ata_sff_exec_command 
 Note: original code is ata_sff_dev_select 
 needed; also flushes, for mmio 
 Note: original code is ata_sff_set_devctl 
 Note: original code is ata_sff_data_xfer 
 Transfer multiple of 2 bytes 
 Transfer trailing 1 byte, if any. 
 Note: original code is ata_devchk 
 Note: original code is ata_sff_wait_after_reset 
 always check readiness of the master device 
	
	  -ENODEV means the odd clown forgot the D7 pulldown resistor
	  and TF status is 0xff, bail out on it too.
	
	  if device 1 was found in ata_devchk, wait for register
	  access briefly, then wait for BSY to clear.
		
		  Wait for register access.  Some ATAPI devices fail
		  to set nsectlbal after reset, so don't waste too
		  much time on it.  We're gonna wait for !BSY anyway.
 give drive a breather 
 is all this really necessary? 
 Note: original code is ata_bus_softreset 
 FIXME: flush 
 FIXME: flush 
	
	  Request two channels for IDE. Another possibility would be
	  to request only one channel, and reprogram it's direction at
	  start of new transfer.
 Configure receive channel direction and source address 
 Configure transmit channel direction and destination address 
	
	  When enabling UDMA operation, IDEUDMAOP register needs to be
	  programmed in three step sequence:
	  1) set or clear the RWOP bit,
	  2) perform dummy read of the register,
	  3) set the UEN bit.
 terminate all dma transfers, if not yet finished 
	
	  To properly stop IDE-DMA, IDEUDMAOP register must to be cleared
	  and IDECTRL register must be set to default value.
	
	  UDMA Status Register bits:
	 
	  DMAIDE - DMA request signal from UDMA state machine,
	  INTIDE - INT line generated by UDMA because of errors in the
	           state machine,
	  SBUSY - UDMA state machine busy, not in idle state,
	  NDO   - error for data-out not completed,
	  NDI   - error for data-in not completed,
	  N4X   - error for data transferred not multiplies of four
	          32-bit words.
	  (EP93xx UG p27-17)
 read INTRQ (INT[3]) pin input state 
 Note: original code is ata_sff_softreset 
 determine if device 01 are present 
 select device 0 again 
 issue bus reset 
 if link is ocuppied, -ENODEV too is an error 
 determine by signature whether we have ATA or ATAPI devices 
 Note: original code is ata_sff_drain_fifo 
 We only need to flush incoming data when a command was running 
 Drain up to 64K of data before we give up this recovery method 
 Can become DEBUG later 
	
	  Set timings to safe values at startup (= number of ns from ATA
	  specification), we'll switch to properly calculated values later.
 ep93xx dma implementation limit 
 ep93xx dma can't transfer 65536 bytes at once 
 INT[3] (IRQ_EP93XX_EXT3) line connected as pull down 
 allocate host 
	
	  Maximum UDMA modes:
	  EP931x rev.E0 - UDMA2
	  EP931x rev.E1 - UDMA3
	  EP931x rev.E2 - UDMA4
	 
	  MWDMA support was removed from EP931x rev.E2,
	  so this driver supports only UDMA modes.
 defaults, pio 0 
 activate host 
 SPDX-License-Identifier: GPL-2.0
 30 seconds for power off delay 
 init during probe, RO afterwards 
 The following fields are synchronized by PM core. 
	bool			from_notify;  resumed as a result of
 ZP ready state 
 last ZP ready timestamp 
 ZP ready state sampled 
	bool			powered_off;  ODD is powered off
 LoEj 
 Per the spec, only slot type and drawer type ODD can be supported 
 only 1 feature descriptor requested 
 3, removable medium feature 
 reserved 
 Test if ODD is zero power ready by sense code 
 sense valid 
 has asc and ascq 
 no media inside 
 no media inside and door closed 
  Update the zpodd->zp_ready field. This field will only be set
  if the ODD has stayed in ZP ready state for zpodd_poweroff_delay
  time, and will be used to decide if power off is allowed. If it
  is set, it will be cleared during resume from powered off state.
  Enable runtime wake capability through ACPI and set the powered_off flag,
  this flag will be used during resume to decide what operations are needed
  to take.
  Also, media poll needs to be silenced, so that it doesn't bring the ODD
  back to full power state every few seconds.
 Disable runtime wake capability if it is enabled 
  Post power on processing after the ODD has been recovered. If the
  ODD wasn't powered off during suspend, it doesn't do anything.
  For drawer type ODD, if it is powered on due to user pressed the
  eject button, the tray needs to be ejected. This can only be done
  after the ODD has been recovered, i.e. link is initialized and
  device is able to process NON_DATA PIO command, as eject needs to
  send command for the ODD to process.
  The from_notify flag set in wake notification handler function
  zpodd_wake_dev represents if power on is due to user's action.
  For both types of ODD, several fields need to be reset.
 SPDX-License-Identifier: GPL-2.0-or-later
   libata-eh.c - libata error handling
   Copyright 2006 Tejun Heo <htejun@gmail.com>
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware documentation available from http:www.t13.org and
   http:www.sata-io.org
 speed down verdicts 
 error flags 
 error categories 
 always put at least this amount of time between resets 
	 Waiting in ->prereset can never be reliable.  It's
	  sometimes nice to wait there but it can't be depended upon;
	  otherwise, we wouldn't be resetting.  Just give it enough
	  time for most drives to spin up.
 probe speed down parameters, see ata_eh_schedule_probe() 
 1 min 
 The following table determines how we sequence resets.  Each entry
  represents timeout for that try.  The first try can be soft or
  hardreset.  All others are hardreset if available.  In most cases
  the first reset w 10sec timeout should succeed.  Following entries
  are mostly for error handling, hotplug and those outlier devices that
  take an exceptionally long time to recover from reset.
 most drives spin up by 10sec 
 > 99% working drives spin up before 20sec 
 give > 30 secs of idleness for outlier devices 
 and sweet one last chance 
 > 1 min has elapsed, give up 
 covers > 99% of successes and not too boring on failures 
 combined time till here is enough even for media access 
 for true idiots 
 Some drives are slow to read log pages when waking-up 
 combined time till here is enough even for media access 
 be generous with flush 
 ditto 
 and even more generous 
 same rationale as identify timeout 
 ditto 
 but no merciful 30sec for other commands, it just isn't worth it 
 The following table determines timeouts to use for EH internal
  commands.  Each table entry is a command class and matches the
  commands the entry applies to and the timeout table to use.
  On the retry after a command timed out, the next timeout value from
  the table is used.  If the table doesn't contain further entries,
  the last value is used.
  ehc->cmd_timeout_idx keeps track of which timeout to use per
  command class, so if SET_FEATURES times out on the first try, the
  next try will use the second timeout value only for that class.
 CONFIG_PM 
 CONFIG_PM 
 	__ata_ehi_push_desc - push error description without adding separator
 	@ehi: target EHI
 	@fmt: printf format string
 	Format string according to @fmt and append it to @ehi->desc.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_ehi_push_desc - push error description with separator
 	@ehi: target EHI
 	@fmt: printf format string
 	Format string according to @fmt and append it to @ehi->desc.
 	If @ehi->desc is not empty, ", " is added in-between.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_ehi_clear_desc - clean error description
 	@ehi: target EHI
 	Clear @ehi->desc.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_port_desc - append port description
 	@ap: target ATA port
 	@fmt: printf format string
 	Format string according to @fmt and append it to port
 	description.  If port description is not empty, " " is added
 	in-between.  This function is to be used while initializing
 	ata_host.  The description is printed on host registration.
 	LOCKING:
 	None.
 	ata_port_pbar_desc - append PCI BAR description
 	@ap: target ATA port
 	@bar: target PCI BAR
 	@offset: offset into PCI BAR
 	@name: name of the area
 	If @offset is negative, this function formats a string which
 	contains the name, address, size and type of the BAR and
 	appends it to the port description.  If @offset is zero or
 	positive, only name and offsetted address is appended.
 	LOCKING:
 	None.
 CONFIG_PCI 
 	ata_internal_cmd_timeout - determine timeout for an internal command
 	@dev: target device
 	@cmd: internal command to be issued
 	Determine timeout for internal command @cmd for @dev.
 	LOCKING:
 	EH context.
 	RETURNS:
 	Determined timeout.
 	ata_internal_cmd_timed_out - notification for internal command timeout
 	@dev: target device
 	@cmd: internal command which timed out
 	Notify EH that internal command @cmd for @dev timed out.  This
 	function should be called only for commands whose timeouts are
 	determined using ata_internal_cmd_timeout().
 	LOCKING:
 	EH context.
 doesn't make sense for port-wide EH actions 
 break ehi->action into ehi->dev_action 
 turn off the specified per-dev action 
 	ata_eh_acquire - acquire EH ownership
 	@ap: ATA port to acquire EH ownership for
 	Acquire EH ownership for @ap.  This is the basic exclusion
 	mechanism for ports sharing a host.  Only one port hanging off
 	the same host can claim the ownership of EH.
 	LOCKING:
 	EH context.
 	ata_eh_release - release EH ownership
 	@ap: ATA port to release EH ownership for
 	Release EH ownership for @ap if the caller.  The caller must
 	have acquired EH ownership using ata_eh_acquire() previously.
 	LOCKING:
 	EH context.
	 Restore SControl IPM and SPD for the next driver and
	  disable attached devices.
 freeze and set UNLOADED 
 won't be thawed 
 clear pending from freeze 
 	ata_scsi_error - SCSI layer error handler callback
 	@host: SCSI host on which error occurred
 	Handles SCSI-layer-thrown error events.
 	LOCKING:
 	Inherited from SCSI layer (none, can sleep)
 	RETURNS:
 	Zero.
	 If we timed raced normal completion and there is nothing to
 finish or retry handled scmd's and clean up 
  ata_scsi_cmd_error_handler - error callback for a list of commands
  @host:	scsi host containing the port
  @ap:		ATA port within the host
  @eh_work_q:	list of commands to process
  process the given list of commands and return those finished to the
  ap->eh_done_q.  This function is the first part of the libata error
  handler which processes a given list of failed commands.
 make sure sff pio task is not running 
 synchronize with host lock and sort out timeouts 
	 For new EH, all qcs are finished in one of three ways -
	  normal completion, error completion, and SCSI timeout.
	  Both completions can race against SCSI timeout.  When normal
	  completion wins, the qc never reaches EH.  When error
	  completion wins, the qc has ATA_QCFLAG_FAILED set.
	 
	  When SCSI timeout wins, things are a bit more complex.
	  Normal or error completion can occur after the timeout but
	  before this point.  In such cases, both types of
	  completions are honored.  A scmd is determined to have
	  timed out iff its associated qc is active and not failed.
		 This must occur under the ap->lock as we don't want
		   a polled recovery to race the real interrupt handler
		   The lost_interrupt handler checks for any completed but
		   non-notified command and completes much like an IRQ handler.
		   We then fall into the error recovery code which will treat
 the scmd has an associated qc 
 which hasn't failed yet, timeout 
				 Normal completion occurred after
				  SCSI timeout but before this point.
				  Successfully complete it.
		 If we have timed out qcs.  They belong to EH from
		  this point but the state of the controller is
		  unknown.  Freeze the port to make sure the IRQ
		  handler doesn't diddle with those qcs.  This must
		  be done atomically w.r.t. setting QCFLAG_FAILED.
 initialize eh_tries 
  ata_scsi_port_error_handler - recover the port after the commands
  @host:	SCSI host containing the port
  @ap:		the ATA port
  Handle the recovery of the port @ap after all the commands
  have been recovered.
 invoke error handler 
 acquire EH ownership 
 kill fast drain timer 
 process port resume request 
 fetch & clear EH info 
 don't maintain exclusion over EH 
 invoke EH, skip if unloading or suspended 
 if unloading, commence suicide 
 process port suspend request 
		 Exception might have happened after ->error_handler
		  recovered the port but before this point.  Repeat
		  EH in such case.
 this run is complete, make sure EH info is clear 
		 end eh (clear host_eh_scheduled) while holding
		  ap->lock such that if exception occurs after this
		  point but before EH completion, SCSI midlayer will
		  re-initiate EH.
 clean up 
 tell wait_eh that we're done 
 	ata_port_wait_eh - Wait for the currently pending EH to complete
 	@ap: Port to wait EH for
 	Wait until the currently pending EH is complete.
 	LOCKING:
 	Kernel thread context (may sleep).
 make sure SCSI EH is complete 
 count only non-internal commands 
 are we done? 
		 No progress during the last interval, tag all
		  in-flight qcs as timed out and freeze the port.
 some qcs have finished, give it another chance 
 	ata_eh_set_pending - set ATA_PFLAG_EH_PENDING and activate fast drain
 	@ap: target ATA port
 	@fastdrain: activate fast drain
 	Set ATA_PFLAG_EH_PENDING and activate fast drain if @fastdrain
 	is non-zero and EH wasn't pending before.  Fast drain ensures
 	that EH kicks in in timely manner.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 already scheduled? 
 do we have in-flight qcs? 
 activate fast drain 
 	ata_qc_schedule_eh - schedule qc for error handling
 	@qc: command to schedule error handling for
 	Schedule error handling for @qc.  EH will kick in as soon as
 	other commands are drained.
 	LOCKING:
 	spin_lock_irqsave(host lock)
	 The following will fail if timeout has already expired.
	  ata_scsi_error() takes care of such scmds on EH entry.
	  Note that ATA_QCFLAG_FAILED is unconditionally set after
	  this function completes.
  ata_std_sched_eh - non-libsas ata_ports issue eh with this common routine
  @ap: ATA port to schedule EH for
 	LOCKING: inherited from ata_port_schedule_eh
 	spin_lock_irqsave(host lock)
  ata_std_end_eh - non-libsas ata_ports complete eh with this common routine
  @ap: ATA port to end EH for
  In the libata object model there is a 1:1 mapping of ata_port to
  shost, so host fields can be directly manipulated under ap->lock, in
  the libsas case we need to hold a lock at the ha->level to coordinate
  these events.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_port_schedule_eh - schedule error handling without a qc
 	@ap: ATA port to schedule EH for
 	Schedule error handling for @ap.  EH will kick in as soon as
 	all commands are drained.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 see: ata_std_sched_eh, unless you know better 
 we're gonna abort all commands, no need for fast drain 
 include internal tag in iteration 
 	ata_link_abort - abort all qc's on the link
 	@link: ATA link to abort qc's for
 	Abort all active qc's active on @link and schedule EH.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Number of aborted qc's.
 	ata_port_abort - abort all qc's on the port
 	@ap: ATA port to abort qc's for
 	Abort all active qc's of @ap and schedule EH.
 	LOCKING:
 	spin_lock_irqsave(host_set lock)
 	RETURNS:
 	Number of aborted qc's.
 	__ata_port_freeze - freeze port
 	@ap: ATA port to freeze
 	This function is called when HSM violation or some other
 	condition disrupts normal operation of the port.  Frozen port
 	is not allowed to perform any operation until the port is
 	thawed, which usually follows a successful reset.
 	ap->ops->freeze() callback can be used for freezing the port
 	hardware-wise (e.g. mask interrupt and stop DMA engine).  If a
 	port cannot be frozen hardware-wise, the interrupt handler
 	must ack and clear interrupts unconditionally while the port
 	is frozen.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_port_freeze - abort & freeze port
 	@ap: ATA port to freeze
 	Abort and freeze @ap.  The freeze operation must be called
 	first, because some hardware requires special operations
 	before the taskfile registers are accessible.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Number of aborted commands.
 	ata_eh_freeze_port - EH helper to freeze port
 	@ap: ATA port to freeze
 	Freeze @ap.
 	LOCKING:
 	None.
 	ata_eh_thaw_port - EH helper to thaw port
 	@ap: ATA port to thaw
 	Thaw frozen port @ap.
 	LOCKING:
 	None.
 nada 
 	ata_eh_qc_complete - Complete an active ATA command from EH
 	@qc: Command to complete
 	Indicate to the mid and upper layers that an ATA command has
 	completed.  To be used from EH.
 	ata_eh_qc_retry - Tell midlayer to retry an ATA command after EH
 	@qc: Command to retry
 	Indicate to the mid and upper layers that an ATA command
 	should be retried.  To be used from EH.
 	SCSI midlayer limits the number of retries to scmd->allowed.
 	scmd->allowed is incremented for commands which get retried
 	due to unrelated failures (qc->err_mask is zero).
 	ata_dev_disable - disable ATA device
 	@dev: ATA device to disable
 	Disable @dev.
 	Locking:
 	EH context.
	 From now till the next successful probe, ering is used to
	  track probe failures.  Clear accumulated device error info.
 	ata_eh_detach_dev - detach ATA device
 	@dev: ATA device to detach
 	Detach @dev.
 	LOCKING:
 	None.
 clear per-dev EH info 
 	ata_eh_about_to_do - about to perform eh_action
 	@link: target ATA link
 	@dev: target ATA dev for per-dev action (can be NULL)
 	@action: action about to be performed
 	Called just before performing EH actions to clear related bits
 	in @link->eh_info such that eh actions are not unnecessarily
 	repeated.
 	LOCKING:
 	None.
	 About to take EH action, set RECOVERED.  Ignore actions on
	  slave links as master will do them again.
 	ata_eh_done - EH action complete
 	@link: ATA link for which EH actions are complete
 	@dev: target ATA dev for per-dev action (can be NULL)
 	@action: action just completed
 	Called right after performing EH actions to clear related bits
 	in @link->eh_context.
 	LOCKING:
 	None.
 	ata_err_string - convert err_mask to descriptive string
 	@err_mask: error mask to convert to string
 	Convert @err_mask to descriptive string.  Errors are
 	prioritized according to severity and only the most severe
 	error is reported.
 	LOCKING:
 	None.
 	RETURNS:
 	Descriptive string for @err_mask
 	atapi_eh_tur - perform ATAPI TEST_UNIT_READY
 	@dev: target ATAPI device
 	@r_sense_key: out parameter for sense_key
 	Perform ATAPI TEST_UNIT_READY.
 	LOCKING:
 	EH context (may sleep).
 	RETURNS:
 	0 on success, AC_ERR_ mask on failure.
 	ata_eh_request_sense - perform REQUEST_SENSE_DATA_EXT
 	@qc: qc to perform REQUEST_SENSE_SENSE_DATA_EXT to
 	@cmd: scsi command for which the sense code should be set
 	Perform REQUEST_SENSE_DATA_EXT after the device reported CHECK
 	SENSE.  This function is an EH helper.
 	LOCKING:
 	Kernel thread context (may sleep).
 Ignore err_mask; ATA_ERR might be set 
 	atapi_eh_request_sense - perform ATAPI REQUEST_SENSE
 	@dev: device to perform REQUEST_SENSE to
 	@sense_buf: result sense data buffer (SCSI_SENSE_BUFFERSIZE bytes long)
 	@dfl_sense_key: default sense key to use
 	Perform ATAPI REQUEST_SENSE after the device reported CHECK
 	SENSE.  This function is EH helper.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, AC_ERR_ mask on failure
	 initialize sense_buf with the error register,
	  for the case where they are -not- overwritten
 some devices time out if garbage left in tf 
 is it pointless to prefer PIO for "safety reasons"? 
 	ata_eh_analyze_serror - analyze SError for a failed port
 	@link: ATA link to analyze SError for
 	Analyze SError if available and further determine cause of
 	failure.
 	LOCKING:
 	None.
	 Determine whether a hotplug event has occurred.  Both
	  SError.NX are considered hotplug events for enabled or
	  host links.  For disabled PMP links, only N bit is
	  considered as X bit is left at 1 for link plugging.
 hotplug doesn't work w LPM 
 	ata_eh_analyze_tf - analyze taskfile of a failed qc
 	@qc: qc to analyze
 	@tf: Taskfile registers to analyze
 	Analyze taskfile of @qc and further determine cause of
 	failure.  This function also requests ATAPI sense data if
 	available.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	Determined recovery action
		
		  Sense data reporting does not work if the
		  device fault bit is set.
		
		  SUCCESS here means that the sense code could be
		  evaluated and should be passed to the upper layers
		  for correct evaluation.
		  FAILED means the sense code could not be interpreted
		  and the device would need to be reset.
		  NEEDS_RETRY and ADD_TO_MLQUEUE means that the
		  command would need to be retried.
 	ata_eh_speed_down_verdict - Determine speed down verdict
 	@dev: Device of interest
 	This function examines error ring of @dev and determines
 	whether NCQ needs to be turned off, transfer speed should be
 	stepped down, or falling back to PIO is necessary.
 	ECAT_ATA_BUS	: ATA_BUS error for any command
 	ECAT_TOUT_HSM	: TIMEOUT for any command or HSM violation for
 			  IO commands
 	ECAT_UNK_DEV	: Unknown DEV error for IO commands
 	ECAT_DUBIOUS_	: Identical to above three but occurred while
 			  data transfer hasn't been verified.
 	Verdicts are
 	NCQ_OFF		: Turn off NCQ.
 	SPEED_DOWN	: Speed down transfer speed but don't fall back
 			  to PIO.
 	FALLBACK_TO_PIO	: Fall back to PIO.
 	Even if multiple verdicts are returned, only one action is
 	taken per error.  An action triggered by non-DUBIOUS errors
 	clears ering, while one triggered by DUBIOUS_ errors doesn't.
 	This is to expedite speed down decisions right after device is
 	initially configured.
 	The following are speed down rules.  #1 and #2 deal with
 	DUBIOUS errors.
 	1. If more than one DUBIOUS_ATA_BUS or DUBIOUS_TOUT_HSM errors
 	   occurred during last 5 mins, SPEED_DOWN and FALLBACK_TO_PIO.
 	2. If more than one DUBIOUS_TOUT_HSM or DUBIOUS_UNK_DEV errors
 	   occurred during last 5 mins, NCQ_OFF.
 	3. If more than 8 ATA_BUS, TOUT_HSM or UNK_DEV errors
 	   occurred during last 5 mins, FALLBACK_TO_PIO
 	4. If more than 3 TOUT_HSM or UNK_DEV errors occurred
 	   during last 10 mins, NCQ_OFF.
 	5. If more than 3 ATA_BUS or TOUT_HSM errors, or more than 6
 	   UNK_DEV errors occurred during last 10 mins, SPEED_DOWN.
 	LOCKING:
 	Inherited from caller.
 	RETURNS:
 	OR of ATA_EH_SPDN_ flags.
 scan past 5 mins of error history 
 scan past 10 mins of error history 
 	ata_eh_speed_down - record error and speed down if necessary
 	@dev: Failed device
 	@eflags: mask of ATA_EFLAG_ flags
 	@err_mask: err_mask of the error
 	Record error and examine error history to determine whether
 	adjusting transmission speed is necessary.  It also sets
 	transmission limits appropriately if such adjustment is
 	necessary.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	Determined recovery action.
 don't bother if Cat-0 error 
 record error and determine whether speed down is necessary 
 turn off NCQ? 
 speed down? 
 speed down SATA link speed if possible 
 lower transfer mode 
	 Fall back to PIO?  Slowing down to PIO is meaningless for
	  SATA ATA devices.  Consider it only for PATA and SATAPI.
 device has been slowed down, blow error history 
 	ata_eh_worth_retry - analyze error and decide whether to retry
 	@qc: qc to possibly retry
 	Look at the cause of the error and decide if a retry
  	might be useful or not.  We don't want to retry media errors
 	because the drive itself has probably already taken 10-30 seconds
 	doing its own internal retries before reporting the failure.
 don't retry media errors 
 otherwise retry anything from fs stack 
 don't retry these 
 retry if not dev error 
       ata_eh_quiet - check if we need to be quiet about a command error
       @qc: qc to check
       Look at the qc flags anbd its scsi command request flags to determine
       if we need to be quiet about the command failure.
 	ata_eh_link_autopsy - analyze error and determine recovery action
 	@link: host link to perform autopsy on
 	Analyze why @link failed and determine which recovery actions
 	are needed.  This function also sets more detailed AC_ERR_
 	values and fills sense data for ATAPI CHECK SENSE.
 	LOCKING:
 	Kernel thread context (may sleep).
 obtain and analyze SError 
 SError read failed, force reset and probing 
 analyze NCQ failure 
 any real error trumps AC_ERR_OTHER 
 inherit upper level err_mask 
 analyze TF 
 DEV errors are probably spurious in case of ATA_BUS error 
 any real error trumps unknown error 
		
		  SENSE_VALID trumps devunknown error and revalidation. Upper
		  layers will determine whether the command is worth retrying
		  based on the sense data and device classtype. Otherwise,
		  determine directly if the command is worth retrying using its
		  error mask and flags.
 accumulate error info 
 Count quiet errors 
 If all failed commands requested silence, then be quiet 
 enforce default EH actions 
	 If we have offending qcs and the associated failed device,
	  perform per-dev EH action only on the offending device.
 propagate timeout to host link 
 record error and consider speeding down 
 	ata_eh_autopsy - analyze error and determine recovery action
 	@ap: host port to perform autopsy on
 	Analyze all links of @ap and determine why they failed and
 	which recovery actions are needed.
 	LOCKING:
 	Kernel thread context (may sleep).
	 Handle the frigging slave link.  Autopsy is done similarly
	  but actions and flags are transferred over to the master
	  link and handled from there.
 transfer control flags from master to slave 
 perform autopsy on the slave link 
 transfer actions from slave to master and clear slave 
	 Autopsy of fanout ports can affect host link autopsy.
	  Perform host link autopsy last.
 	ata_get_cmd_descript - get description for ATA command
 	@command: ATA command code to get description for
 	Return a textual description of the given command, or NULL if the
 	command is not known.
 	LOCKING:
 	None
 terminate list 
 	ata_eh_link_report - report error handling to user
 	@link: ATA link EH is going on
 	Report EH to user.
 	LOCKING:
 	None.
 	ata_eh_report - report error handling to user
 	@ap: ATA port to report EH about
 	Report EH to user.
 	LOCKING:
 	None.
	
	  Prepare to reset
 make sure each reset attempt is at least COOL_DOWN apart 
		 If we issue an SRST then an ATA drive (not ATAPI)
		  may change configuration and be in PIO0 timing. If
		  we do a hard reset (or are coming from power on)
		  this is true for ATA or ATAPI. Until we've set a
		  suitable controller mode we should not touch the
		  bus as we may be talking too fast.
		 If the controller has a pio mode setup function
		  then use it to set the chipset to rights. Don't
		  touch the DMA setup as that will be dealt with when
		  configuring devices.
 prefer hardreset 
		 If present, do prereset on slave link too.  Reset
		  is skipped iff both master and slave links report
		  -ENOENT or clear ATA_EH_RESET.
		 prereset() might have cleared ATA_EH_RESET.  If so,
		  bang classes, thaw and return.
	
	  Perform reset
 mark that this EH session started with reset 
 hardreset slave link if existent 
 perform follow-up SRST if necessary 
	
	  Post-reset processing
		 After the reset, the device state is PIO 0 and the
		  controller state is undefined.  Reset also wakes up
		  drives from sleeping mode.
 apply class override 
 record current link speed 
 thaw the port 
	 postreset() should clear hardware SError.  Although SError
	  is cleared during link resume, clearing SError here is
	  necessary as some PHYs raise hotplug events after SRST.
	  This introduces race condition where hotplug occurs between
	  reset and here.  This race is mediated by cross checking
	  link onlineness and classification result later.
	
	  Some controllers can't be frozen very well and may set spurious
	  error conditions during reset.  Clear accumulated error
	  information and re-thaw the port if frozen.  As reset is the
	  final recovery action and we cross check link onlineness against
	  device classification later, no hotplug event is lost by this.
	
	  Make sure onlineness and classification result correspond.
	  Hotplug could have happened during reset and some
	  controllers fail to wait while a drive is spinning up after
	  being hotplugged causing misdetection.  By cross checking
	  link onofflineness and classification result, those
	  conditions can be reliably detected and retried.
 reset successful, schedule revalidation 
 update to completion time 
 reset LPM state 
 clear hotplug flag 
 if SCR isn't accessible on a fan-out port, PMP needs to be reset 
		
		  Thaw host port even if reset failed, so that the port
		  can be retried on the next phy event.  This risks
		  repeated EH runs but seems to be a better tradeoff than
		  shutting down a port after a botched hotplug attempt.
	
	  While disks spinup behind PMP, some controllers fail sending SRST.
	  They need to be reset - as well as the PMP - before retrying.
	
	  This function can be thought of as an extended version of
	  ata_eh_about_to_do() specially crafted to accommodate the
	  requirements of ATA_EH_PARK handling. Since the EH thread
	  does not leave the do {} while () loop in ata_eh_recover as
	  long as the timeout for a park request to one device on
	  the port has not expired, and since we still want to pick
	  up park requests to other devices on the same port or
	  timeout updates for the same device, we have to pull
	  ATA_EH_PARK actions from eh_info into eh_context.i
	  ourselves at the beginning of each pass over the loop.
	 
	  Additionally, all write accesses to &ap->park_req_pending
	  through reinit_completion() (see below) or complete_all()
	  (see ata_scsi_park_store()) are protected by the host lock.
	  As a result we have that park_req_pending.done is zero on
	  exit from this function, i.e. when ATA_EH_PARK actions for
	  all devices on port ap have been pulled into the
	  respective eh_context structs. If, and only if,
	  park_req_pending.done is non-zero by the time we reach
	  wait_for_completion_timeout(), another ATA_EH_PARK action
	  has been scheduled for at least one of the devices on port
	  ap and we have to cycle over the do {} while () loop in
	  ata_eh_recover() again.
	 For PATA drive side cable detection to work, IDENTIFY must
	  be done backwards such that PDIAG- is released by the slave
	  device before the master device is identified.
			 Configuration may have changed, reconfigure
			  transfer mode.
 schedule the scsi_rescan_device() here 
			 Temporarily set dev->class, it will be
			  permanently set once all configurations are
			  complete.  This is necessary because new
			  device configuration is done in two
			  separate loops.
 read_id might have changed class, store and reset 
 clear error info accumulated during probe 
				 IDENTIFY was issued to non-existent
				  device.  No need to reset.  Just
				  thaw and ignore the device.
 PDIAG- should have been released, ask cable type if post-reset 
	 Configure new devices forward such that user doesn't see
	  device detection messages backwards.
 new device discovered, configure xfermode 
 	ata_set_mode - Program timings and issue SET FEATURES - XFER
 	@link: link on which timings will be programmed
 	@r_failed_dev: out parameter for failed device
 	Set ATA device disk transfer mode (PIO3, UDMA6, etc.).  If
 	ata_set_mode() fails, pointer to the failing device is
 	returned in @r_failed_dev.
 	LOCKING:
 	PCIetc. bus probe sem.
 	RETURNS:
 	0 on success, negative errno otherwise
 if data transfer is verified, clear DUBIOUS_XFER on ering top 
 has private set_mode? 
 if transfer mode has changed, set DUBIOUS_XFER on device 
 	atapi_eh_clear_ua - Clear ATAPI UNIT ATTENTION after reset
 	@dev: ATAPI device to clear UA for
 	Resets and other operations can make an ATAPI device raise
 	UNIT ATTENTION which causes the next operation to fail.  This
 	function clears UA.
 	LOCKING:
 	EH context (may sleep).
 	RETURNS:
 	0 on success, -errno on failure.
 	ata_eh_maybe_retry_flush - Retry FLUSH if necessary
 	@dev: ATA device which may need FLUSH retry
 	If @dev failed FLUSH, it needs to be reported upper layer
 	immediately as it means that @dev failed to remap and already
 	lost at least a sector and further FLUSH retrials won't make
 	any difference to the lost sector.  However, if FLUSH failed
 	for other reasons, for example transmission error, FLUSH needs
 	to be retried.
 	This function determines whether FLUSH failure retry is
 	necessary and performs it if so.
 	RETURNS:
 	0 if EH can continue, -errno if EH needs to be repeated.
 did flush fail for this device? 
 if the device failed it, it should be reported to upper layers 
 flush failed for some other reason, give it another shot 
		
		  FLUSH is complete but there's no way to
		  successfully complete a failed command from EH.
		  Making sure retry is allowed at least once and
		  retrying it should do the trick - whatever was in
		  the cache is already on the platter and this won't
		  cause infinite loop.
 if device failed it, report it to upper layers 
 	ata_eh_set_lpm - configure SATA interface power management
 	@link: link to configure power management
 	@policy: the link power management policy
 	@r_failed_dev: out parameter for failed device
 	Enable SATA Interface power management.  This will enable
 	Device Interface Power Management (DIPM) for min_power and
 	medium_power_with_dipm policies, and then call driver specific
 	callbacks for enabling Host Initiated Power management.
 	LOCKING:
 	EH context.
 	RETURNS:
 	0 on success, -errno on failure.
 if the link or host doesn't do LPM, noop 
	
	  DIPM is enabled only for MIN_POWER as some devices
	  misbehave when the host NACKs transition to SLUMBER.  Order
	  device and link configurations such that the host always
	  allows DIPM requests.
 find the first enabled and LPM enabled devices 
 disable DIPM before changing link config 
	
	  Attribute link config failure to the first (LPM) enabled
	  device on the link.
	
	  Low level driver acked the transition.  Issue DIPM command
	  with the new policy set.
 host config updated, enable DIPM if transitioning to MIN_POWER 
 restore the old policy 
 if no device or only one more chance is left, disable LPM 
 skip disabled links 
 skip if explicitly requested 
 thaw frozen port and recover failed devices 
 reset at least once if reset is requested 
 skip if class codes for all vacant slots are ATA_DEV_NONE 
 the link maybe in a deep sleep, wake it up 
	 Record and count probe trials on the ering.  The specific
	  error mask used is irrelevant.  Because a successful device
	  detection clears the ering, this count accumulates only if
	  there are consecutive failed probes.
	 
	  If the count is equal to or higher than ATA_EH_PROBE_TRIALS
	  in the last ATA_EH_PROBE_TRIAL_INTERVAL, link speed is
	  forced to 1.5Gbps.
	 
	  This is to work around cases where failed link speed
	  negotiation results in device misdetection leading to
	  infinite DEVXCHG or PHRDY CHG events.
	 -EAGAIN from EH routine indicates retry without prejudice.
	  The requester is responsible for ensuring forward progress.
 device missing or wrong IDENTIFY data, schedule probing 
 give it just one more chance 
			 This is the last chance, better to slow
			  down than lose it.
 disable device if it has used up all its chances 
 detach if offline 
 schedule probe if necessary 
 	ata_eh_recover - recover host port after error
 	@ap: host port to recover
 	@prereset: prereset method (can be NULL)
 	@softreset: softreset method (can be NULL)
 	@hardreset: hardreset method (can be NULL)
 	@postreset: postreset method (can be NULL)
 	@r_failed_link: out parameter for failed link
 	This is the alpha and omega, eum and yang, heart and soul of
 	libata exception handling.  On entry, actions required to
 	recover each link and hotplug requests are recorded in the
 	link's eh_context.  This function executes all the operations
 	with appropriate retrials and fallbacks to resurrect failed
 	devices, detach goners and greet newcomers.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno on failure.
 prep for recovery 
 re-enable link? 
 collect port action mask recorded in dev actions 
 process hotplug request 
 schedule probe if necessary 
 if UNLOADING, finish immediately 
 prep for EH 
 skip EH if possible. 
 reset 
		
		  clears ATA_EH_PARK in eh_info and resets
		  ap->park_req_pending
 the rest 
 revalidate existing devices and attach new ones 
 if PMP got attached, return, pmp EH will take care of it 
 configure transfer mode if necessary 
		 If reset has been issued, clear UA to avoid
		  disrupting the current users of the device.
 retry flush if necessary 
 configure link power saving 
 this link is okay now 
			 PMP reset requires working host port.
			  Can't retry if it's frozen.
 	ata_eh_finish - finish up EH
 	@ap: host port to finish EH for
 	Recovery is complete.  Clean up EH states and retry or finish
 	failed qcs.
 	LOCKING:
 	None.
 retry or finish qcs 
			 FIXME: Once EH migration is complete,
			  generate sense data in this function,
			  considering both err_mask and tf.
 feed zero TF to sense generation 
 make sure nr_active_links is zero after EH 
 	ata_do_eh - do standard error handling
 	@ap: host port to handle error for
 	@prereset: prereset method (can be NULL)
 	@softreset: softreset method (can be NULL)
 	@hardreset: hardreset method (can be NULL)
 	@postreset: postreset method (can be NULL)
 	Perform standard error handling sequence.
 	LOCKING:
 	Kernel thread context (may sleep).
 	ata_std_error_handler - standard error handler
 	@ap: host port to handle error for
 	Standard error handler
 	LOCKING:
 	Kernel thread context (may sleep).
 ignore built-in hardreset if SCR access is not available 
 	ata_eh_handle_port_suspend - perform port suspend operation
 	@ap: port to suspend
 	Suspend @ap.
 	LOCKING:
 	Kernel thread context (may sleep).
 are we suspending? 
	
	  If we have a ZPODD attached, check its zero
	  power ready status before the port is frozen.
	  Only needed for runtime suspend.
 tell ACPI we're suspending 
 suspend 
 update the flags 
 	ata_eh_handle_port_resume - perform port resume operation
 	@ap: port to resume
 	Resume @ap.
 	LOCKING:
 	Kernel thread context (may sleep).
 are we resuming? 
	
	  Error timestamps are in jiffies which doesn't run while
	  suspended and PHY events during resume isn't too uncommon.
	  When the two are combined, it can lead to unnecessary speed
	  downs if the machine is suspended and resumed repeatedly.
	  Clear error history.
 tell ACPI that we're resuming 
 update the flags 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-or-later
   sata_via.c - VIA Serial ATA controllers
   Maintained by:  Tejun Heo <tj@kernel.org>
  		   Please ALWAYS copy linux-ide@vger.kernel.org
 		   on emails.
   Copyright 2003-2004 Red Hat, Inc.  All rights reserved.
   Copyright 2003-2004 Jeff Garzik
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware documentation available under NDA.
  vt8251 is different from other sata controllers of VIA.  It has two
  channels, each channel has both Master and Slave slot.
 SATA channel enable 
 SATA interrupt gating 
 Native mode enable 
 Miscellaneous Control III 
 PATA timing for DMA cable detect 
 PATA timing register 
 0==use PATA, 1==ext phy 
 enable IRQ on hotplug 
 2 sata chnls (Master) 
 2 sata chnls (Master) 
 2 sata chnls, 1 pata chnl 
 2 sata chnls (MasterSlave) 
 terminate list 
 No MWDMA 
 read the DET field, bit0 and 1 of the config byte 
 read the SPD field, bit4 of the configure byte 
 read the IPM field, bit2 and 3 of the config byte 
 devices other than 5287 uses 0xA8 as base 
 read the DET field, bit0 and bit1 
 read the IPM field, bit2 and bit3 
 devices other than 5287 uses 0xA8 as base 
 set the DET field 
 set the IPM field 
 	svia_tf_load - send taskfile registers to host controller
 	@ap: Port to which output is sent
 	@tf: ATA taskfile register set
 	Outputs ATA taskfile to standard ATA host controller.
 	This is to fix the internal bug of via chipsets, which will
 	reset the device register after changing the IEN bit on ctl
 	register.
	 Some VIA controllers choke if ATA_NIEN is manipulated in
	  certain way.  Leave it alone and just clear pending IRQ.
 	vt6420_prereset - prereset for vt6420
 	@link: target ATA link
 	@deadline: deadline jiffies for the operation
 	SCR registers on vt6420 are pieces of shit and may hang the
 	whole machine completely if accessed with the wrong timing.
 	To avoid such catastrophe, vt6420 doesn't provide generic SCR
 	access operations, but uses SStatus and SControl only during
 	boot probing in controlled way.
 	As the old (pre EH update) probing code is proven to work, we
 	strictly follow the access pattern.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, -errno otherwise.
 don't do any SCR stuff if we're not loading 
 Resume phy.  This is the old SATA resume sequence 
 flush 
 wait for phy to become ready, if necessary 
 open code sata_print_link_status() 
 SStatus is read one more time 
 tell EH to bail 
 wait for !BSY 
 Prevents corruption on some ATAPI burners 
 8251 hosts four sata ports as MS of the two channels 
 if the IRQ was not handled, it might be a hotplug IRQ 
 check for hotplug on port 0 
 check for hotplug on port 1 
 see svia_configure() for description 
 make sure SATA channels are enabled 
 make sure interrupts for each channel sent to us 
 make sure native mode is enabled 
 enable IRQ on hotplug 
	
	  vt64201 has problems talking to some drives.  The following
	  is the fix from Joseph Chan <JosephChan@via.com.tw>.
	 
	  When host issues HOLD, device may send up to 20DW of data
	  before acknowledging it with HOLDA and the host should be
	  able to buffer them in FIFO.  Unfortunately, some WD drives
	  send up to 40DW before acknowledging HOLD and, in the
	  default configuration, this ends up overflowing vt6421's
	  FIFO, making the controller abort the transaction with
	  R_ERR.
	 
	  Rx52[2] is the internal 128DW FIFO Flow control watermark
	  adjusting mechanism enable bit and the default value 0
	  means host will issue HOLD to device when the left FIFO
	  size goes below 32DW.  Setting it to 1 makes the watermark
	  64DW.
	 
	  https:bugzilla.kernel.orgshow_bug.cgi?id=15173
	  http:article.gmane.orggmane.linux.ide46352
	  http:thread.gmane.orggmane.linux.kernel1062139
	 
	  As the fix slows down data transfer, apply it only if the error
	  actually appears - see vt6421_error_handler()
	  Apply the fix always on vt6420 as we don't know if SCR_ERROR can be
	  read safely.
 SPDX-License-Identifier: GPL-2.0-only
  driversataahci_tegra.c
  Copyright (c) 2014, NVIDIA CORPORATION.  All rights reserved.
  Author:
 	Mikko Perttunen <mperttunen@nvidia.com>
 AUX Registers 
 Needs special handling, cannot use ahci_platform 
 Pad calibration 
	
	  Program the following SATA IPFS registers to allow SW accesses to
	  SATA's MMIO register range.
 Program the following SATA IPFS register to enable the SATA 
 Electrical settings for better link stability 
 For SQUELCH Filter & Gen3 drive getting detected as Gen1 drive 
	
	  Change CFG2NVOOB_2_COMWAKE_IDLE_CNT_LOW from 83.3 ns to 58.8ns
	
	  Program the following SATA configuration registers to
	  initialize SATA
 Program Class Code and Programming interface for SATA 
 Enabling LPM capabilities through Backdoor Programming 
	 SATA Second Level Clock Gating configuration
	  Enabling Gating of TxRx clocks and driving Pad IDDQ and Lane
	  IDDQ Signals
 Enabling IPFS Clock Gating 
 Unmask SATA interrupts 
	
	  AUX registers is optional.
 LP0 suspend support not implemented 
 SPDX-License-Identifier: GPL-2.0-or-later
   libata-core.c - helper library for ATA
   Copyright 2003-2004 Red Hat, Inc.  All rights reserved.
   Copyright 2003-2004 Jeff Garzik
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware documentation available from http:www.t13.org and
   http:www.sata-io.org
   Standards documents from:
 	http:www.t13.org (ATA standards, PCI DMA IDE spec)
 	http:www.t10.org (SCSI MMC - for ATAPI MMC)
 	http:www.sata-io.org (SATA)
 	http:www.compactflash.org (CF)
 	http:www.qic.org (QIC157 - Tape and DSC)
 	http:www.ce-ata.org (CE-ATA: not supported)
  libata is essentially a library of internal helper functions for
  low-level ATA host controller drivers.  As such, the APIABI is
  likely to change as new drivers are added and updated.
  Do not depend on ABIAPI stability.
 param_buf is thrown away after initialization, disallow read 
 	ata_link_next - link iteration helper
 	@link: the previous link, NULL to start
 	@ap: ATA port containing links to iterate
 	@mode: iteration mode, one of ATA_LITER_
 	LOCKING:
 	Host lock or EH context.
 	RETURNS:
 	Pointer to the next link.
 NULL link indicates start of iteration 
 we just iterated over the host link, what's next? 
 slave_link excludes PMP 
 we were over a PMP link 
 	ata_dev_next - device iteration helper
 	@dev: the previous device, NULL to start
 	@link: ATA link containing devices to iterate
 	@mode: iteration mode, one of ATA_DITER_
 	LOCKING:
 	Host lock or EH context.
 	RETURNS:
 	Pointer to the next device.
 NULL dev indicates start of iteration 
 move to the next one 
 	ata_dev_phys_link - find physical link for a device
 	@dev: ATA device to look up physical link for
 	Look up physical link which @dev is attached to.  Note that
 	this is different from @dev->link only when @dev is on slave
 	link.  For all other cases, it's the same as @dev->link.
 	LOCKING:
 	Don't care.
 	RETURNS:
 	Pointer to the found physical link.
 	ata_force_cbl - force cable type according to libata.force
 	@ap: ATA port of interest
 	Force cable type according to libata.force and whine about it.
 	The last entry which has matching port number is used, so it
 	can be specified as part of device force parameters.  For
 	example, both "a:40c,1.00:udma4" and "1.00:40c,udma4" have the
 	same effect.
 	LOCKING:
 	EH context.
 	ata_force_link_limits - force link limits according to libata.force
 	@link: ATA link of interest
 	Force link flags and SATA spd limit according to libata.force
 	and whine about it.  When only the port part is specified
 	(e.g. 1:), the limit applies to all links connected to both
 	the host link and all fan-out ports connected via PMP.  If the
 	device part is specified as 0 (e.g. 1.00:), it specifies the
 	first fan-out link not the host link.  Device number 15 always
 	points to the host link whether PMP is attached or not.  If the
 	controller has slave link, device number 16 points to it.
 	LOCKING:
 	EH context.
 only honor the first spd limit 
 let lflags stack 
 	ata_force_xfermask - force xfermask according to libata.force
 	@dev: ATA device of interest
 	Force xfer_mask according to libata.force and whine about it.
 	For consistency with link selection, device number 15 selects
 	the first device connected to the host link.
 	LOCKING:
 	EH context.
 allow n.1516 for devices attached to host port 
 	ata_force_horkage - force horkage according to libata.force
 	@dev: ATA device of interest
 	Force horkage according to libata.force and whine about it.
 	For consistency with link selection, device number 15 selects
 	the first device connected to the host link.
 	LOCKING:
 	EH context.
 allow n.1516 for devices attached to host port 
 	atapi_cmd_type - Determine ATAPI command type from SCSI opcode
 	@opcode: SCSI opcode
 	Determine ATAPI command type from @opcode.
 	LOCKING:
 	None.
 	RETURNS:
 	ATAPI_{READ|WRITE|READ_CD|PASS_THRU|MISC}
 pio multi 
 pio 
 dma 
 	ata_rwcmd_protocol - set taskfile rw commands and protocol
 	@tf: command to examine and configure
 	@dev: device tf belongs to
 	Examine the device configuration and tf->flags to calculate
 	the proper readwrite commands and protocol to use.
 	LOCKING:
 	caller.
 Unable to use DMA due to host limitation 
 	ata_tf_read_block - Read block address from ATA taskfile
 	@tf: ATA taskfile of interest
 	@dev: ATA device @tf belongs to
 	LOCKING:
 	None.
 	Read block address from @tf.  This function can handle all
 	three address formats - LBA, LBA48 and CHS.  tf->protocol and
 	flags select the address format to use.
 	RETURNS:
 	Block address read from @tf.
 	ata_build_rw_tf - Build ATA taskfile for given readwrite request
 	@tf: Target ATA taskfile
 	@dev: ATA device @tf belongs to
 	@block: Block address
 	@n_block: Number of blocks
 	@tf_flags: RWFUA etc...
 	@tag: tag
 	@class: IO priority class
 	LOCKING:
 	None.
 	Build ATA taskfile @tf for readwrite request described by
 	@block, @n_block, @tf_flags and @tag on @dev.
 	RETURNS:
 	0 on success, -ERANGE if the request is too large for @dev,
 	-EINVAL if the request is invalid.
 yay, NCQ 
 use LBA28 
 use LBA48 
 request too large even for LBA48 
 CHS 
 The request -may- be too large for CHS addressing. 
 Convert LBA to CHS 
		 Check whether the converted CHS can fit.
		   Cylinder: 0-65535
		   Head: 0-15
 Sector count 0 means 256 sectors 
 	ata_pack_xfermask - Pack pio, mwdma and udma masks into xfer_mask
 	@pio_mask: pio_mask
 	@mwdma_mask: mwdma_mask
 	@udma_mask: udma_mask
 	Pack @pio_mask, @mwdma_mask and @udma_mask into a single
 	unsigned int xfer_mask.
 	LOCKING:
 	None.
 	RETURNS:
 	Packed xfer_mask.
 	ata_unpack_xfermask - Unpack xfer_mask into pio, mwdma and udma masks
 	@xfer_mask: xfer_mask to unpack
 	@pio_mask: resulting pio_mask
 	@mwdma_mask: resulting mwdma_mask
 	@udma_mask: resulting udma_mask
 	Unpack @xfer_mask into @pio_mask, @mwdma_mask and @udma_mask.
 	Any NULL destination masks will be ignored.
 	ata_xfer_mask2mode - Find matching XFER_ for the given xfer_mask
 	@xfer_mask: xfer_mask of interest
 	Return matching XFER_ value for @xfer_mask.  Only the highest
 	bit of @xfer_mask is considered.
 	LOCKING:
 	None.
 	RETURNS:
 	Matching XFER_ value, 0xff if no match found.
 	ata_xfer_mode2mask - Find matching xfer_mask for XFER_
 	@xfer_mode: XFER_ of interest
 	Return matching xfer_mask for @xfer_mode.
 	LOCKING:
 	None.
 	RETURNS:
 	Matching xfer_mask, 0 if no match found.
 	ata_xfer_mode2shift - Find matching xfer_shift for XFER_
 	@xfer_mode: XFER_ of interest
 	Return matching xfer_shift for @xfer_mode.
 	LOCKING:
 	None.
 	RETURNS:
 	Matching xfer_shift, -1 if no match found.
 	ata_mode_string - convert xfer_mask to string
 	@xfer_mask: mask of bits supported; only highest bit counts.
 	Determine string which represents the highest speed
 	(highest bit in @modemask).
 	LOCKING:
 	None.
 	RETURNS:
 	Constant C string representing highest speed listed in
 	@mode_mask, or the constant C string "<na>".
 	ata_dev_classify - determine device type based on ATA-spec signature
 	@tf: ATA taskfile register set for device to be identified
 	Determine from taskfile register contents whether a device is
 	ATA or ATAPI, as per "Signature and persistence" section
 	of ATAPI spec (volume 1, sect 5.14).
 	LOCKING:
 	None.
 	RETURNS:
 	Device type, %ATA_DEV_ATA, %ATA_DEV_ATAPI, %ATA_DEV_PMP,
 	%ATA_DEV_ZAC, or %ATA_DEV_UNKNOWN the event of failure.
	 Apple's open source Darwin code hints that some devices only
	  put a proper signature into the LBA midhigh registers,
	  So, we only check those.  It's sufficient for uniqueness.
	 
	  ATAATAPI-7 (d1532v1r1: Feb. 19, 2003) specified separate
	  signatures for ATA and ATAPI devices attached on SerialATA,
	  0x3c0xc3 and 0x690x96 respectively.  However, SerialATA
	  spec has never mentioned about using different signatures
	  for ATAATAPI devices.  Then, Serial ATA II: Port
	  Multiplier specification began to use 0x690x96 to identify
	  port multpliers and 0x3c0xc3 to identify SEMB device.
	  ATAATAPI-7 dropped descriptions about 0x3c0xc3 and
	  0x690x96 shortly and described them as reserved for
	  SerialATA.
	 
	  We follow the current spec and consider that 0x690x96
	  identifies a port multiplier and 0x3c0xc3 a SEMB device.
	  Unfortunately, WDC WD1600JS-62MHB5 (a hard drive) reports
	  SEMB signature.  This is worked around in
	  ata_dev_read_id().
 	ata_id_string - Convert IDENTIFY DEVICE page into string
 	@id: IDENTIFY DEVICE results we will examine
 	@s: string into which data is output
 	@ofs: offset into identify device page
 	@len: length of string to return. must be an even number.
 	The strings in the IDENTIFY DEVICE page are broken up into
 	16-bit chunks.  Run through the string, and output each
 	8-bit chunk linearly, regardless of platform.
 	LOCKING:
 	caller.
 	ata_id_c_string - Convert IDENTIFY DEVICE page into C string
 	@id: IDENTIFY DEVICE results we will examine
 	@s: string into which data is output
 	@ofs: offset into identify device page
 	@len: length of string to return. must be an odd number.
 	This function is identical to ata_id_string except that it
 	trims trailing spaces and terminates the resulting string with
 	null.  @len must be actual maximum length (even number) + 1.
 	LOCKING:
 	caller.
 	ata_read_native_max_address - Read native max address
 	@dev: target device
 	@max_sectors: out parameter for the result native max address
 	Perform an LBA48 or LBA28 native size query upon the device in
 	question.
 	RETURNS:
 	0 on success, -EACCES if command is aborted by the drive.
 	-EIO on other errors.
 always clear all address registers 
 	ata_set_max_sectors - Set max sectors
 	@dev: target device
 	@new_sectors: new max sectors value to set for the device
 	Set max sectors of @dev to @new_sectors.
 	RETURNS:
 	0 on success, -EACCES if command is aborted or denied (due to
 	previous non-volatile SET_MAX) by the drive.  -EIO on other
 	errors.
 	ata_hpa_resize		-	Resize a device with an HPA set
 	@dev: Device to resize
 	Read the size of an LBA28 or LBA48 disk with HPA features and resize
 	it if required to the full size of the media. The caller must check
 	the drive has the HPA feature set enabled.
 	RETURNS:
 	0 on success, -errno on failure.
 do we need to do it? 
 read native max address 
		 If device aborted the command or HPA isn't going to
		  be unlocked, skip HPA resizing.
 we can continue if device aborted the command 
 nothing to do? 
 let's unlock HPA 
 if device aborted the command, skip HPA resizing 
 re-read IDENTIFY data 
 	ata_dump_id - IDENTIFY DEVICE info debugging output
 	@id: IDENTIFY DEVICE page to dump
 	Dump selected 16-bit words from the given IDENTIFY DEVICE
 	page.
 	LOCKING:
 	caller.
 	ata_id_xfermask - Compute xfermask from the given IDENTIFY data
 	@id: IDENTIFY data to compute xfer mask from
 	Compute the xfermask for this device. This is not as trivial
 	as it seems if we must consider early devices correctly.
 	FIXME: pre IDE drive timing (do we care ?).
 	LOCKING:
 	None.
 	RETURNS:
 	Computed xfermask
 Usual case. Word 53 indicates word 64 is valid 
		 If word 64 isn't valid then Word 51 high byte holds
		  the PIO timing number for the maximum. Turn it into
		  a mask.
 Valid PIO range 
		 But wait.. there's more. Design your standards by
		  committee and you too can get a free iordy field to
		  process. However its the speeds not the modes that
		  are supported... Note drivers using the timing API
		  will get this right anyway
		
		 	Process compact flash extended modes
 	ata_exec_internal_sg - execute libata internal command
 	@dev: Device to which the command is sent
 	@tf: Taskfile registers for the command and the result
 	@cdb: CDB for packet command
 	@dma_dir: Data transfer direction of the command
 	@sgl: sg list for the data buffer of the command
 	@n_elem: Number of sg entries
 	@timeout: Timeout in msecs (0 for default)
 	Executes libata internal command with timeout.  @tf contains
 	command on entry and result on return.  Timeout and error
 	conditions are reported via return value.  No recovery action
 	is taken after a command times out.  It's caller's duty to
 	clean up after timeout.
 	LOCKING:
 	None.  Should be called with kernel context, might sleep.
 	RETURNS:
 	Zero on success, AC_ERR_ mask on failure
 no internal command while frozen 
 initialize internal qc 
 prepare & issue qc 
 some SATA bridges need us to indicate data xfer direction 
		 We're racing with irq here.  If we lose, the
		  following test prevents us from completing the qc
		  twice.  If we win, the port is frozen and will be
		  cleaned up by ->post_internal_cmd().
 do post_internal_cmd 
 perform minimal error analysis 
 finish up 
 	ata_exec_internal - execute libata internal command
 	@dev: Device to which the command is sent
 	@tf: Taskfile registers for the command and the result
 	@cdb: CDB for packet command
 	@dma_dir: Data transfer direction of the command
 	@buf: Data buffer of the command
 	@buflen: Length of data buffer
 	@timeout: Timeout in msecs (0 for default)
 	Wrapper around ata_exec_internal_sg() which takes simple
 	buffer instead of sg list.
 	LOCKING:
 	None.  Should be called with kernel context, might sleep.
 	RETURNS:
 	Zero on success, AC_ERR_ mask on failure
 	ata_pio_need_iordy	-	check if iordy needed
 	@adev: ATA device
 	Check if the current speed of the device requires IORDY. Used
 	by various controllers for chip configuration.
	 Don't set IORDY if we're preparing for reset.  IORDY may
	  lead to controller lock up on certain controllers if the
	  port is not occupied.  See bko#11703 for details.
	 Controller doesn't support IORDY.  Probably a pointless
	  check as the caller should know this.
 CF spec. r4.1 Table 22 says no iordy on PIO5 and PIO6.  
 PIO3 and higher it is mandatory 
 We turn it on when possible 
 	ata_pio_mask_no_iordy	-	Return the non IORDY mask
 	@adev: ATA device
 	Compute the highest mode possible if we are not using iordy. Return
 	-1 if no iordy mode is available.
 If we have no drive specific rule, then PIO 2 is non IORDY 
 EIDE 
 Is the speed faster than the drive allows non IORDY ? 
 This is cycle times not frequency - watch the logic! 
 PIO2 is 240nS per cycle 
 	ata_do_dev_read_id		-	default ID read method
 	@dev: device
 	@tf: proposed taskfile
 	@id: data buffer
 	Issue the identify taskfile and hand back the buffer containing
 	identify data. For some RAID controllers and for pre ATA devices
 	this function is wrapped or replaced by the driver
 	ata_dev_read_id - Read ID data from the specified device
 	@dev: target device
 	@p_class: pointer to class of the target device (may be changed)
 	@flags: ATA_READID_ flags
 	@id: buffer to read IDENTIFY data into
 	Read ID data from the specified device.  ATA_CMD_ID_ATA is
 	performed on ATA devices and ATA_CMD_ID_ATAPI on ATAPI
 	devices.  This function also issues ATA_CMD_INIT_DEV_PARAMS
 	for pre-ATA4 drives.
 	FIXME: ATA_CMD_ID_ATA is optional for early drives and right
 	now we abort if we hit that case.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, -errno otherwise.
 some hard drives report SEMB sig 
	 Some devices choke if TF registers contain garbage.  Make
	  sure those are properly initialized.
	 Device presence detection is unreliable on some
	  controllers.  Always poll IDENTIFY if available.
 SEMB is not supported yet 
			 Device or controller might have reported
			  the wrong device class.  Give a shot at the
			  other IDENTIFY if the current one is
			  aborted by the device.
			 Control reaches here iff the device aborted
			  both flavors of IDENTIFYs which happens
			  sometimes with phantom devices.
	 Falling back doesn't make sense if ID data was read
	  successfully at least once.
 sanity check 
		
		  Drive powered-up in standby mode, and requires a specific
		  SET_FEATURES spin-up subcommand before it will accept
		  anything other than the original IDENTIFY command.
		
		  If the drive initially returned incomplete IDENTIFY info,
		  we now must reissue the IDENTIFY command.
		
		  The exact sequence expected by certain pre-ATA4 drives is:
		  SRST RESET
		  IDENTIFY (optional in early ATA)
		  INITIALIZE DEVICE PARAMETERS (later IDE and ATA)
		  anything else..
		  Some drives were very specific about that exact sequence.
		 
		  Note that ATA4 says lba is mandatory so the second check
		  should never trigger.
			 current CHS translation info (id[53-58]) might be
			  changed. reread the identify device info.
 	ata_read_log_page - read a specific log page
 	@dev: target device
 	@log: log to read
 	@page: page to read
 	@buf: buffer to store read page
 	@sectors: number of sectors to read
 	Read log page using READ_LOG_EXT command.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, AC_ERR_ mask otherwise.
	
	  Return error without actually issuing the command on controllers
	  which e.g. lockup on a read log page.
		
		  IDENTIFY DEVICE data log is defined as mandatory starting
		  with ACS-3 (ATA version 10). Warn about the missing log
		  for drives which implement this ATA level or above.
	
	  Read IDENTIFY DEVICE data log, page 0, to figure out if the page is
	  supported.
 if already on stricter limit, no need to push further 
	 Request another EH round by returning -EAGAIN if link is
	  going faster than the target speed.  Forward progress is
	  guaranteed by setting sata_spd_limit to target_limit above.
	
	  Always set the 'ZAC' flag for Host-managed devices.
		
		  Check for host-aware devices.
	
	  Read IDENTIFY DEVICE data log, page 9 (Zoned-device information)
 config NCQ 
 print device info to dmesg 
 Current CHS translation is valid. 
 Default translation 
 print device info to dmesg 
	
	  Check device sleep capability. Get DevSlp timing variables
	  from SATA Settings page of Identify Device Data Log.
	
	  Read IDENTIFY DEVICE data log, page 0x47
	  (concurrent positioning ranges). We can have at most 255 32B range
	  descriptors plus a 64B header.
 	ata_dev_configure - Configure the specified ATAATAPI device
 	@dev: Target device to configure
 	Configure @dev according to @dev->id.  Generic and low-level
 	driver specific fixups are also applied.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, -errno otherwise
 XYZ-99\0 
 set horkage 
 some WD SATA-1 drives have issues with LPM, turn on NOLPM for them 
 let ACPI work its magic 
 massage HPA, do it early as it might change IDENTIFY data 
 print device capabilities 
 initialize to-be-configured parameters 
	
	  common ATA, ATAPI feature tests
 find max transfer mode; for printk only 
 SCSI only uses 4-char revisions, dump full 8 chars from ATA 
 ATA-specific feature tests 
 CPRM may make this media unusable 
 Warn the user if the device has TPM extensions 
 get current RW Multiple count setting 
 only recognizeallow powers of two here 
 print device info to dmesg 
 ATAPI-specific feature tests 
		 Enable ATAPI AN if both the host and device have
		  the support.  If PMP is attached, SNTF is required
		  to enable ATAPI AN to discern between PHY status
		  changed notifications and ATAPI ANs.
 issue SET feature command to turn this on 
 print device info to dmesg 
 determine max_sectors 
	 Limit PATA drive on SATA cable bridge transfers to udma5,
		 Let the user know. We don't want to disallow opens for
		   rescue purposes, or in case the vendor is just a blithering
		   idiot. Do this after the dev_config call as some controllers
		   with buggy firmware may want to avoid reporting false device
ata.wiki.kernel.org\n");
 	ata_cable_40wire	-	return 40 wire cable type
 	@ap: port
 	Helper method for drivers which want to hardwire 40 wire cable
 	detection.
 	ata_cable_80wire	-	return 80 wire cable type
 	@ap: port
 	Helper method for drivers which want to hardwire 80 wire cable
 	detection.
 	ata_cable_unknown	-	return unknown PATA cable.
 	@ap: port
 	Helper method for drivers which have no PATA cable detection.
 	ata_cable_ignore	-	return ignored PATA cable.
 	@ap: port
 	Helper method for drivers which don't use cable type to limit
 	transfer mode.
 	ata_cable_sata	-	return SATA cable type
 	@ap: port
 	Helper method for drivers which have SATA cables
 	ata_bus_probe - Reset and probe ATA bus
 	@ap: Bus to probe
 	Master ATA bus probing function.  Initiates a hardware-dependent
 	bus reset, then attempts to identify any devices found on
 	the bus.
 	LOCKING:
 	PCIetc. bus probe sem.
 	RETURNS:
 	Zero on success, negative errno otherwise.
		 If we issue an SRST then an ATA drive (not ATAPI)
		  may change configuration and be in PIO0 timing. If
		  we do a hard reset (or are coming from power on)
		  this is true for ATA or ATAPI. Until we've set a
		  suitable controller mode we should not touch the
		  bus as we may be talking too fast.
		 If the controller has a pio mode setup function
		  then use it to set the chipset to rights. Don't
		  touch the DMA setup as that will be dealt with when
		  configuring devices.
 reset and determine device classes 
	 read IDENTIFY page and configure devices. We have to do the identify
	   specific sequence bass-ackwards so that PDIAG- is released by
 Now ask for the cable type as PDIAG- should have been released 
	 We may have SATA bridge glue hiding here irrespective of
	  the reported cable types and sensed types.  When SATA
	  drives indicate we have a bridge, we don't know which end
	  of the link the bridge is which is a problem.
	 After the identify sequence we can now set up the devices. We do
 configure transfer mode 
 eeek, something went very wrong, give up 
 give it just one more chance 
			 This is the last chance, better to slow
			  down than lose it.
 	sata_print_link_status - Print SATA link status
 	@link: SATA link to printk link status about
 	This function prints link speed and status of a SATA link.
 	LOCKING:
 	None.
 	ata_dev_pair		-	return other device on cable
 	@adev: device
 	Obtain the other device on the same cable, or if none is
 	present NULL is returned
 	sata_down_spd_limit - adjust SATA spd limit downward
 	@link: Link to adjust SATA spd limit for
 	@spd_limit: Additional limit
 	Adjust SATA spd limit of @link downward.  Note that this
 	function only adjusts the limit.  The change must be applied
 	using sata_set_spd().
 	If @spd_limit is non-zero, the speed is limited to equal to or
 	lower than @spd_limit if such speed is supported.  If
 	@spd_limit is slower than any supported speed, only the lowest
 	supported speed is allowed.
 	LOCKING:
 	Inherited from caller.
 	RETURNS:
 	0 on success, negative errno on failure
	 If SCR can be read, use it to determine the current SPD.
	  If not, use cached value in link->sata_spd.
 unconditionally mask off the highest bit 
	
	  Mask off all speeds higher than or equal to the current one.  At
	  this point, if current SPD is not available and we previously
	  recorded the link speed from SStatus, the driver has already
	  masked off the highest bit so mask should already be 1 or 0.
	  Otherwise, we should not force 1.5Gbps on a link where we have
	  not previously recorded speed from SStatus.  Just return in this
	  case.
 were we already at the bottom? 
 	ata_timing_cycle2mode - find xfer mode for the specified cycle duration
 	@xfer_shift: ATA_SHIFT_ value for transfer type to examine.
 	@cycle: cycle duration in ns
 	Return matching xfer mode for @cycle.  The returned mode is of
 	the transfer type specified by @xfer_shift.  If @cycle is too
 	slow for @xfer_shift, 0xff is returned.  If @cycle is faster
 	than the fastest known mode, the fasted mode is returned.
 	LOCKING:
 	None.
 	RETURNS:
 	Matching xfer_mode, 0xff if no match found.
 	ata_down_xfermask_limit - adjust dev xfer masks downward
 	@dev: Device to adjust xfer masks
 	@sel: ATA_DNXFER_ selector
 	Adjust xfer masks of @dev downward.  Note that this function
 	does not apply the change.  Invoking ata_set_mode() afterwards
 	will apply the limit.
 	LOCKING:
 	Inherited from caller.
 	RETURNS:
 	0 on success, negative errno on failure
 revalidate 
 Old CFA may refuse this command, which is just fine 
		 Catch several broken garbage emulations plus some pre
		 Some very old devices and some bad newer ones fail
		   any kind of SET_XFERMODE request but support PIO0-2
	 Early MWDMA devices do DMA but don't allow DMA mode setting.
 if the device is actually configured correctly, ignore dev err 
 	ata_do_set_mode - Program timings and issue SET FEATURES - XFER
 	@link: link on which timings will be programmed
 	@r_failed_dev: out parameter for failed device
 	Standard implementation of the function used to tune and set
 	ATA device disk transfer mode (PIO3, UDMA6, etc.).  If
 	ata_dev_set_mode() fails, pointer to the failing device is
 	returned in @r_failed_dev.
 	LOCKING:
 	PCIetc. bus probe sem.
 	RETURNS:
 	0 on success, negative errno otherwise
 step 1: calculate xfer_mask 
 step 2: always set host PIO timings 
 step 3: set host DMA timings 
 step 4: update devices' xfer mode 
	 Record simplex status. If we selected DMA then the other
	  host channels are not permitted to do so.
 	ata_wait_ready - wait for link to become ready
 	@link: link to be waited on
 	@deadline: deadline jiffies for the operation
 	@check_ready: callback to check link readiness
 	Wait for @link to become ready.  @check_ready should return
 	positive number if @link is ready, 0 if it isn't, -ENODEV if
 	link doesn't seem to be occupied, other errno for other error
 	conditions.
 	Transient -ENODEV conditions are allowed for
 	ATA_TMOUT_FF_WAIT.
 	LOCKING:
 	EH context.
 	RETURNS:
 	0 if @link is ready before @deadline; otherwise, -errno.
 choose which 0xff timeout to use, read comment in libata.h 
	 Slave readiness can't be tested separately from master.  On
	  MS emulation configuration, this function should be called
	  only on the master and it will handle both master and slave.
		
		  -ENODEV could be transient.  Ignore -ENODEV if link
		  is online.  Also, some SATA devices take a long
		  time to clear 0xff after reset.  Wait for
		  ATA_TMOUT_FF_WAIT[_LONG] on -ENODEV if link isn't
		  offline.
		 
		  Note that some PATA controllers (pata_ali) explode
		  if status register is read more than once when
		  there's no device attached.
 	ata_wait_after_reset - wait for link to become ready after reset
 	@link: link to be waited on
 	@deadline: deadline jiffies for the operation
 	@check_ready: callback to check link readiness
 	Wait for @link to become ready after reset.
 	LOCKING:
 	EH context.
 	RETURNS:
 	0 if @link is ready before @deadline; otherwise, -errno.
 	ata_std_prereset - prepare for reset
 	@link: ATA link to be reset
 	@deadline: deadline jiffies for the operation
 	@link is about to be reset.  Initialize it.  Failure from
 	prereset makes libata abort whole reset sequence and give up
 	that port, so prereset should be best-effort.  It does its
 	best to prepare for reset sequence but if things go wrong, it
 	should just whine, not fail.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, -errno otherwise.
 if we're about to do hardreset, nothing more to do 
 if SATA, resume link 
 whine about phy resume failure but proceed 
 no point in trying softreset on offline link 
 	sata_std_hardreset - COMRESET wo waiting or classification
 	@link: link to reset
 	@class: resulting class of attached device
 	@deadline: deadline jiffies for the operation
 	Standard SATA COMRESET wo waiting or classification.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 if link offline, -EAGAIN if link online, -errno on errors.
 do hardreset 
 	ata_std_postreset - standard postreset callback
 	@link: the target ata_link
 	@classes: classes of attached devices
 	This function is invoked after a successful reset.  Note that
 	the device might have been reset more than once using
 	different reset methods before postreset is invoked.
 	LOCKING:
 	Kernel thread context (may sleep)
 reset complete, clear SError 
 print link status 
 	ata_dev_same_device - Determine whether new ID matches configured device
 	@dev: device to compare against
 	@new_class: class of the new device
 	@new_id: IDENTIFY page of the new device
 	Compare @new_class and @new_id against @dev and determine
 	whether @dev is the device indicated by @new_class and
 	@new_id.
 	LOCKING:
 	None.
 	RETURNS:
 	1 if @dev matches @new_class and @new_id, 0 otherwise.
 	ata_dev_reread_id - Re-read IDENTIFY data
 	@dev: target ATA device
 	@readid_flags: read ID flags
 	Re-read IDENTIFY page and make sure @dev is still attached to
 	the port.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, negative errno otherwise
 read ID data 
 is the device still there? 
 	ata_dev_revalidate - Revalidate ATA device
 	@dev: device to revalidate
 	@new_class: new class code
 	@readid_flags: read ID flags
 	Re-read IDENTIFY page, make sure @dev is still attached to the
 	port and reconfigure it according to the new IDENTIFY page.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, negative errno otherwise
 fail early if !ATA && !ATAPI to avoid issuing [P]IDENTIFY to PMP 
 re-read ID 
 configure device according to the new ID 
 verify n_sectors hasn't changed 
 n_sectors has changed 
	
	  Something could have caused HPA to be unlocked
	  involuntarily.  If n_native_sectors hasn't changed and the
	  new size matches it, keep the device.
 use the larger n_sectors 
	
	  Some BIOSes boot wo HPA but resume w HPA locked.  Try
	  unlocking HPA in those cases.
	 
	  https:bugzilla.kernel.orgshow_bug.cgi?id=15396
 try unlocking HPA 
 restore original n_[native_]sectors and fail 
 Devices with DMA related problems under Linux 
 Odd clown on sil37264726 PMPs 
 Weird ATAPI devices 
	
	  Causes silent data corruption with higher max sects.
	  http:lkml.kernel.orggx49wpy40ysk.fsf@segfault.boston.devel.redhat.com
	
	  These devices time out with higher max sects.
	  https:bugzilla.kernel.orgshow_bug.cgi?id=121671
 Devices we expect to fail diagnostics 
 Devices where NCQ should be avoided 
 NCQ is slow 
thread.gmane.orggmane.linux.ide14907 
 NCQ is broken 
 Seagate NCQ + FLUSH CACHE firmware bug 
	 drives which fail FPDMA_AA activation (some may freeze afterwards)
	 Blacklist entries taken from Silicon Image 31243132
bugzilla.kernel.orgshow_bug.cgi?id=15573 
 Sandisk SD789s lock up hard on large trims 
 devices which puke on READ_NATIVE_MAX 
 this one allows HPA unlocking but fails IOs on the area 
 Devices which report 1 sector over size HPA 
 Devices which get the IVB wrong 
 Maybe we should just blacklist TSSTcorp... 
 Devices that do not need bridging limits applied 
 Devices which aren't very happy with higher link speeds 
	
	  Devices which choke on SETXFER.  Applies only if both the
	  device and controller are SATA.
 Crucial BX100 SSD 500GB has broken LPM support 
 512GB MX100 with MU01 firmware has both queued TRIM and LPM issues 
 512GB MX100 with newer firmware has only LPM issues 
 480GB+ M500 SSDs have both queued TRIM and LPM issues 
 These specific Samsung modelsfirmware-revs do not handle LPM well 
 devices that don't properly handle queued TRIM commands 
 devices that don't properly handle TRIM commands 
	
	  As defined, the DRAT (Deterministic Read After Trim) and RZAT
	  (Return Zero After Trim) flags in the ATA Command Set are
	  unreliable in the sense that they only define what happens if
	  the device successfully executed the DSM TRIM command. TRIM
	  is only advisory, however, and the device is free to silently
	  ignore all or parts of the request.
	 
	  Whitelist drives that are known to reliably return zeroes
	  after TRIM.
	
	  The intel 510 drive has buggy DRATRZAT. Explicitly exclude
	  that model before whitelisting all other intel SSDs.
	
	  Some WD SATA-I drives spin up and down erratically when the link
	  is put into the slumber mode.  We don't have full list of the
	  affected devices.  Disable LPM if the device matches one of the
	  known prefixes and is SATA-1.  As a side effect LPM partial is
	  lost too.
	 
	  https:bugzilla.kernel.orgshow_bug.cgi?id=57211
 End Marker 
	 We don't support polling DMA.
	  DMA blacklist those ATAPI devices with CDB-intr (and use PIO)
	  if the LLDD handles only interrupts in the HSM_ST_LAST state.
 	ata_is_40wire		-	check drive side detection
 	@dev: device
 	Perform drive side detection decoding, allowing for device vendors
 	who can't follow the documentation.
 	cable_is_40wire		-	4080SATA decider
 	@ap: port to consider
 	This function encapsulates the policy for speed management
 	in one place. At the moment we don't cache the result but
 	there is a good case for setting ap->cbl to the result when
 	we are called with unknown cables (and figuring out if it
 	impacts hotplug at all).
 	Return 1 if the cable appears to be 40 wire.
 If the controller thinks we are 40 wire, we are. 
 If the controller thinks we are 80 wire, we are. 
	 If the system is known to be 40 wire short cable (eg
	  laptop), then we allow 80 wire modes even if the drive
	  isn't sure.
	 If the controller doesn't know, we scan.
	 
	  Note: We look for all 40 wire detects at this point.  Any
	        80 wire detect is taken to be 80 wire cable because
	  - in many setups only the one drive (slave if present) will
	    give a valid detect
	  - if you have a non detect capable drive you don't want it
	    to colour the choice
 	ata_dev_xfermask - Compute supported xfermask of the given device
 	@dev: Device to compute xfermask for
 	Compute supported xfermask of @dev and store it in
 	dev->_mask.  This function is responsible for applying all
 	known limits including host controller limits, device
 	blacklist, etc...
 	LOCKING:
 	None.
 controller modes available 
 drive modes available 
	
	 	CFA Advanced TrueIDE timings are not allowed on a shared
	 	cable
 No PIO5 or PIO6 
 No MWDMA3 or MWDMA 4 
	 Apply cable rule here.  Don't apply it early because when
	  we handle hot plug the cable type can itself change.
	  Check this last so that we know if the transfer rate was
	  solely limited by the cable.
	  Unknown or 80 wire cables reported host side are checked
	  drive side as well. Cases where we know a 40wire cable
	  is used safely for 80 are not checked here.
 UDMA44 or higher would be available 
 	ata_dev_set_xfermode - Issue SET FEATURES - XFER MODE command
 	@dev: Device to which command will be sent
 	Issue SET FEATURES - XFER MODE command to device @dev
 	on port @ap.
 	LOCKING:
 	PCIetc. bus probe sem.
 	RETURNS:
 	0 on success, AC_ERR_ mask otherwise.
 set up set-features taskfile 
	 Some controllers and ATAPI devices show flaky interrupt
	  behavior after setting xfer mode.  Use polling instead.
 If we are using IORDY we must send the mode setting command 
 If the device has IORDY and the controller does not - turn it off 
 In the ancient relic department - skip all of this 
 On some disks, this command causes spin-up, so we need longer timeout 
 	ata_dev_set_feature - Issue SET FEATURES - SATA FEATURES
 	@dev: Device to which command will be sent
 	@enable: Whether to enable or disable the feature
 	@feature: The sector count represents the feature to set
 	Issue SET FEATURES - SATA FEATURES command to device @dev
 	on port @ap with sector count
 	LOCKING:
 	PCIetc. bus probe sem.
 	RETURNS:
 	0 on success, AC_ERR_ mask otherwise.
 set up set-features taskfile 
 	ata_dev_init_params - Issue INIT DEV PARAMS command
 	@dev: Device to which command will be sent
 	@heads: Number of heads (taskfile parameter)
 	@sectors: Number of sectors (taskfile parameter)
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, AC_ERR_ mask otherwise.
 Number of sectors per track 1-255. Number of heads 1-16 
 set up init dev params taskfile 
 max head = num. of heads - 1 
	 A clean abort indicates an original or just out of spec drive
	   and we should continue as we issue the setup based on the
 	atapi_check_dma - Check whether ATAPI DMA can be supported
 	@qc: Metadata associated with taskfile to check
 	Allow low-level driver to filter ATA PACKET commands, returning
 	a status indicating whether or not it is OK to use DMA for the
 	supplied PACKET command.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS: 0 when ATAPI DMA can be used
                nonzero otherwise
	 Don't allow DMA if it isn't multiple of 16 bytes.  Quite a
	  few ATAPI devices choke on such DMA requests.
 	ata_std_qc_defer - Check whether a qc needs to be deferred
 	@qc: ATA command in question
 	Non-NCQ commands cannot run with any other command, NCQ or
 	not.  As upper layer only knows the queue depth, we are
 	responsible for maintaining exclusion.  This function checks
 	whether a new command @qc can be issued.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	ATA_DEFER_ if deferring is needed, 0 otherwise.
 	ata_sg_init - Associate command with scatter-gather table.
 	@qc: Command to be associated
 	@sg: Scatter-gather table.
 	@n_elem: Number of elements in sg table.
 	Initialize the data-related elements of queued_cmd @qc
 	to point to a scatter-gather table @sg, containing @n_elem
 	elements.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_sg_clean - Unmap DMA memory associated with command
 	@qc: Command containing DMA memory to be released
 	Unmap all mapped DMA memory associated with this command.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_sg_setup - DMA-map the scatter-gather table associated with a command.
 	@qc: Command with scatter-gather table to be mapped.
 	DMA-map the scatter-gather table associated with queued_cmd @qc.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Zero on success, negative on error.
 !CONFIG_HAS_DMA 
 !CONFIG_HAS_DMA 
 	swap_buf_le16 - swap halves of 16-bit words in place
 	@buf:  Buffer to swap
 	@buf_words:  Number of 16-bit words in buffer.
 	Swap halves of 16-bit words if needed to convert from
 	little-endian byte order to native cpu byte order, or
 	vice-versa.
 	LOCKING:
 	Inherited from caller.
 __BIG_ENDIAN 
 	ata_qc_new_init - Request an available ATA command, and initialize it
 	@dev: Device from whom we request an available command structure
 	@tag: tag
 	LOCKING:
 	None.
 no command while frozen 
 libsas case 
 	ata_qc_free - free unused ata_queued_cmd
 	@qc: Command to complete
 	Designed to free unused ata_queued_cmd object
 	in case something prevents using it.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 ata_qc_from_tag _might_ return NULL 
 ata_qc_from_tag _might_ return NULL 
 command should be marked inactive atomically with qc completion 
 clear exclusive status 
	 atapi: mark qc as inactive to prevent the interrupt handler
	  from completing the command twice later, before the error handler
	  is called. (when rc != 0 and atapi request sense is needed)
 call completion callback 
 	ata_qc_complete - Complete an active ATA command
 	@qc: Command to complete
 	Indicate to the mid and upper layers that an ATA command has
 	completed, with either an ok or not-ok status.
 	Refrain from calling this function multiple times when
 	successfully completing multiple NCQ commands.
 	ata_qc_complete_multiple() should be used instead, which will
 	properly update IRQ expect state.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 Trigger the LED (if available) 
	 XXX: New EH and old EH use different mechanisms to
	  synchronize EH with regular execution path.
	 
	  In new EH, a failed qc is marked with ATA_QCFLAG_FAILED.
	  Normal execution path is responsible for not accessing a
	  failed qc.  libata core enforces the rule by returning NULL
	  from ata_qc_from_tag() for failed qcs.
	 
	  Old EH depends on ata_qc_complete() nullifying completion
	  requests if ATA_QCFLAG_EH_SCHEDULED is set.  Old EH does
	  not synchronize with interrupt handler.  Only PIO task is
	  taken care of.
		
		  Finish internal commands without any further processing
		  and always with the result TF filled.
		
		  Non-internal qc has failed.  Fill the result TF and
		  summon EH.
 read result TF if requested 
		 Some commands need post-processing after successful
		  completion.
 CHS translation changed 
 multi_count changed 
 revalidate device 
 read result TF if failed or requested 
 	ata_qc_get_active - get bitmask of active qcs
 	@ap: port in question
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Bitmask of active qcs
 ATA_TAG_INTERNAL is sent to hw as tag 0 
 	ata_qc_issue - issue taskfile to device
 	@qc: command to issue to device
 	Prepare an ATA command to submission to device.
 	This includes mapping the data into a DMA-able
 	area, filling in the SG table, and finally
 	writing the taskfile to hardware, starting the command.
 	LOCKING:
 	spin_lock_irqsave(host lock)
	 Make sure only one non-NCQ command is outstanding.  The
	  check is skipped for old EH because it reuses active qc to
	  request ATAPI sense.
	
	  We guarantee to LLDs that they will have at least one
	  non-zero sg if the command is a data command.
 if device is sleeping, schedule reset and abort the link 
 	ata_phys_link_online - test whether the given link is online
 	@link: ATA link to test
 	Test whether @link is online.  Note that this function returns
 	0 if online status of @link cannot be obtained, so
 	ata_link_online(link) != !ata_link_offline(link).
 	LOCKING:
 	None.
 	RETURNS:
 	True if the port online status is available and online.
 	ata_phys_link_offline - test whether the given link is offline
 	@link: ATA link to test
 	Test whether @link is offline.  Note that this function
 	returns 0 if offline status of @link cannot be obtained, so
 	ata_link_online(link) != !ata_link_offline(link).
 	LOCKING:
 	None.
 	RETURNS:
 	True if the port offline status is available and offline.
 	ata_link_online - test whether the given link is online
 	@link: ATA link to test
 	Test whether @link is online.  This is identical to
 	ata_phys_link_online() when there's no slave link.  When
 	there's a slave link, this function should only be called on
 	the master link and will return true if any of MS links is
 	online.
 	LOCKING:
 	None.
 	RETURNS:
 	True if the port online status is available and online.
 shouldn't be called on slave link 
 	ata_link_offline - test whether the given link is offline
 	@link: ATA link to test
 	Test whether @link is offline.  This is identical to
 	ata_phys_link_offline() when there's no slave link.  When
 	there's a slave link, this function should only be called on
 	the master link and will return true if both MS links are
 	offline.
 	LOCKING:
 	None.
 	RETURNS:
 	True if the port offline status is available and offline.
 shouldn't be called on slave link 
	 Previous resume operation might still be in
	  progress.  Wait for PM_PENDING to clear.
 request PM ops to EH 
  On some hardware, device fails to respond after spun down for suspend.  As
  the device won't be used before being resumed, we don't need to touch the
  device.  Ask EH to skip the usual stuff and proceed directly to suspend.
  http:thread.gmane.orggmane.linux.ide46764
  For ODDs, the upper layer will poll for media change every few seconds,
  which will make it enter and leave suspend state every few seconds. And
  as each suspend will cause a hardsoft reset, the gain of runtime suspend
  is very little and the ODD may malfunction after constantly being reset.
  So the idle callback here will not proceed to suspend if a non-ZPODD capable
  ODD is attached to the port.
 sas ports don't participate in pm runtime management of ata_ports,
  and need to resume ata devices at the domain level, not the per-port
  level. sas suspendresume is async to allow parallel port recovery
  since sas has multiple ata_port instances per Scsi_Host.
 	ata_host_suspend - suspend host
 	@host: host to suspend
 	@mesg: PM message
 	Suspend @host.  Actual operation is performed by port suspend.
 	ata_host_resume - resume host
 	@host: host to resume
 	Resume @host.  Actual operation is performed by port resume.
 	ata_dev_init - Initialize an ata_device structure
 	@dev: Device structure to initialize
 	Initialize @dev in preparation for probing.
 	LOCKING:
 	Inherited from caller.
 SATA spd limit is bound to the attached device, reset together 
	 High bits of dev->flags are used to record warm plug
	  requests which occur asynchronously.  Synchronize using
	  host lock.
 	ata_link_init - Initialize an ata_link structure
 	@ap: ATA port link is attached to
 	@link: Link structure to initialize
 	@pmp: Port multiplier port number
 	Initialize @link.
 	LOCKING:
 	Kernel thread context (may sleep)
 clear everything except for devices 
 can't use iterator, ap isn't initialized yet 
 	sata_link_init_spd - Initialize link->sata_spd_limit
 	@link: Link to configure sata_spd_limit for
 	Initialize ``link->[hw_]sata_spd_limit`` to the currently
 	configured value.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno on failure.
 	ata_port_alloc - allocate and initialize basic ATA port resources
 	@host: ATA host this allocated port belongs to
 	Allocate and initialize basic ATA port resources.
 	RETURNS:
 	Allocate ATA port on success, NULL on failure.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 turn on all debugging levels 
 	ata_host_alloc - allocate and init basic ATA host resources
 	@dev: generic device this host is associated with
 	@max_ports: maximum number of ATA ports associated with this host
 	Allocate and initialize basic ATA host resources.  LLD calls
 	this function to allocate a host, initializes it fully and
 	attaches it using ata_host_register().
 	@max_ports ports are allocated and host->n_ports is
 	initialized to @max_ports.  The caller is allowed to decrease
 	host->n_ports before calling ata_host_register().  The unused
 	ports will be automatically freed on registration.
 	RETURNS:
 	Allocate ATA host on success, NULL on failure.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 alloc a container for our list of ATA ports (buses) 
 allocate ports bound to this host 
 	ata_host_alloc_pinfo - alloc host and init with port_info array
 	@dev: generic device this host is associated with
 	@ppi: array of ATA port_info to initialize host with
 	@n_ports: number of ATA ports attached to this host
 	Allocate ATA host and initialize with info from @ppi.  If NULL
 	terminated, @ppi may contain fewer entries than @n_ports.  The
 	last entry will be used for the remaining ports.
 	RETURNS:
 	Allocate ATA host on success, NULL on failure.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 	ata_finalize_port_ops - finalize ata_port_operations
 	@ops: ata_port_operations to finalize
 	An ata_port_operations can inherit from another ops and that
 	ops can again inherit from another.  This can go on as many
 	times as necessary as long as there is no loop in the
 	inheritance chain.
 	Ops tables are finalized when the host is started.  NULL or
 	unspecified entries are inherited from the closet ancestor
 	which has the method and the entry is populated with it.
 	After finalization, the ops table directly points to all the
 	methods and ->inherits is no longer necessary and cleared.
 	Using ATA_OP_NULL, inheriting ops can force a method to NULL.
 	LOCKING:
 	None.
 	ata_host_start - start and freeze ports of an ATA host
 	@host: ATA host to start ports for
 	Start and then freeze ports of @host.  Started status is
 	recorded in host->flags, so this function can be called
 	multiple times.  Ports are guaranteed to get started only
 	once.  If host->ops isn't initialized yet, its set to the
 	first non-dummy port ops.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 	RETURNS:
 	0 if all ports are started successfully, -errno otherwise.
 	ata_host_init - Initialize a host struct for sas (ipr, libsas)
 	@host:	host to initialize
 	@dev:	device host is attached to
 	@ops:	port_ops
 kick EH for boot probing 
	
	  If we're not allowed to scan this host in parallel,
	  we need to wait until all previous scans have completed
	  before going further.
	  Jeff Garzik says this is only within a controller, so we
	  don't need to wait for port 0, only for later ports.
 in order to keep device order, we need to synchronize at this point 
 	ata_host_register - register initialized ATA host
 	@host: ATA host to register
 	@sht: template for SCSI host
 	Register initialized ATA host.  @host is allocated using
 	ata_host_alloc() and fully initialized by LLD.  This function
 	starts ports, registers @host with ATA and SCSI layers and
 	probe registered devices.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
 host must have been started 
	 Blow away unused ports.  This happens when LLD can't
	  determine the exact number of ports to allocate at
	  allocation time.
 give ports names and add SCSI hosts 
 Create associated sysfs transport objects  
 set cable, sata_spd_limit and report 
 set SATA cable type if still unset 
 init sata_spd_limit to the current value 
 print per-port info to dmesg 
 perform each probe asynchronously 
 	ata_host_activate - start host, request IRQ and register it
 	@host: target ATA host
 	@irq: IRQ to request
 	@irq_handler: irq_handler used when requesting IRQ
 	@irq_flags: irq_flags used when requesting IRQ
 	@sht: scsi_host_template to use when registering the host
 	After allocating an ATA host and initializing it, most libata
 	LLDs perform three steps to activate the host - start host,
 	request IRQ and register it.  This helper takes necessary
 	arguments and performs the three steps in one go.
 	An invalid IRQ skips the IRQ registration and expects the host to
 	have set polling mode on the port. In this case, @irq_handler
 	should be NULL.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
 Special case for polling mode 
 if failed, just free the IRQ and leave ports alone 
 	ata_port_detach - Detach ATA port in preparation of device removal
 	@ap: ATA port to be detached
 	Detach all ATA devices and the associated SCSI devices of @ap;
 	then, remove the associated SCSI host.  @ap is guaranteed to
 	be quiescent on return from this function.
 	LOCKING:
 	Kernel thread context (may sleep).
 tell EH we're leaving & flush EH 
 wait till EH commits suicide 
 it better be dead now 
 clean up zpodd on port removal 
 remove the associated SCSI host 
 	ata_host_detach - Detach all ports of an ATA host
 	@host: Host to detach
 	Detach all ports of @host.
 	LOCKING:
 	Kernel thread context (may sleep).
 Ensure ata_port probe has completed 
 the host is dead now, dissociate ACPI 
 	ata_pci_remove_one - PCI layer callback for device removal
 	@pdev: PCI device that was removed
 	PCI layer indicates to libata via this hook that hot-unplug or
 	module unload event has occurred.  Detach all ports.  Resource
 	release is handled via devres.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 Disable port interrupts 
 Stop the port DMA engines 
 move to PCI subsystem 
 CONFIG_PM 
 CONFIG_PCI 
 	ata_platform_remove_one - Platform layer callback for device removal
 	@pdev: Platform device that was removed
 	Platform layer indicates to libata via this hook that hot-unplug or
 	module unload event has occurred.  Detach all ports.  Resource
 	release is handled via devres.
 	LOCKING:
 	Inherited from platform layer (may sleep).
 find where this param ends and update cur 
 parse 
 parse id 
 parse val, allow shortcuts so that both 1.5 and 1.5Gbps work 
 calculate maximum number of params and allocate force_tbl 
 parse and populate the table 
 	ata_msleep - ATA EH owner aware msleep
 	@ap: ATA port to attribute the sleep to
 	@msecs: duration to sleep in milliseconds
 	Sleeps @msecs.  If the current task is owner of @ap's EH, the
 	ownership is released before going to sleep and reacquired
 	after the sleep is complete.  IOW, other ports sharing the
 	@ap->host will be allowed to own the EH while this task is
 	sleeping.
 	LOCKING:
 	Might sleep.
 	ata_wait_register - wait until register value changes
 	@ap: ATA port to wait register for, can be NULL
 	@reg: IO-mapped register
 	@mask: Mask to apply to read register value
 	@val: Wait condition
 	@interval: polling interval in milliseconds
 	@timeout: timeout in milliseconds
 	Waiting for some bits of register to change is a common
 	operation for ATA controllers.  This function reads 32bit LE
 	IO-mapped register @reg and tests for the following condition.
 	(@reg & mask) != val
 	If the condition is met, it returns; otherwise, the process is
 	repeated after @interval_msec until timeout.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	The final register value.
	 Calculate timeout _after_ the first read to make sure
	  preceding writes reach the controller before starting to
	  eat away the timeout.
  Dummy port_ops
 truly dummy 
  Utility print functions
 SPDX-License-Identifier: GPL-2.0-only
  Allwinner sunxi AHCI SATA platform driver
  Copyright 2013 Olliver Schinagl <oliver@schinagl.nl>
  Copyright 2014 Hans de Goede <hdegoede@redhat.com>
  based on the AHCI SATA platform driver by Jeff Garzik and Anton Vorontsov
  Based on code from Allwinner Technology Co., Ltd. <www.allwinnertech.com>,
  Daniel Wang <danielwang@allwinnertech.com>
 Insmod parameters 
 This magic is from the original code 
 Power up takes aprox 50 us 
 Calibration takes aprox 10 us 
	 Setup DMA before DMA start
	 
	  NOTE: A similar SoC with SATAAHCI by Texas Instruments documents
	    this Vendor Specific Port (P0DMACR, aka PxDMACR) in its
	    User's Guide document (TMS320C674xOMAP-L1x Processor
	    Serial ATA (SATA) Controller, Literature Number: SPRUGJ8C,
	    March 2011, Chapter 4.33 Port DMA Control Register (P0DMACR),
	    p.68, https:www.ti.comlitugsprugj8csprugj8c.pdf)
	    as equivalent to the following struct:
	 
	    struct AHCI_P0DMACR_t
	    {
	      unsigned TXTS     : 4;
	      unsigned RXTS     : 4;
	      unsigned TXABL    : 4;
	      unsigned RXABL    : 4;
	      unsigned Reserved : 16;
	    };
	 
	    TXTS: Transmit Transaction Size (TX_TRANSACTION_SIZE).
	      This field defines the DMA transaction size in DWORDs for
	      transmit (system bus read, device write) operation. [...]
	 
	    RXTS: Receive Transaction Size (RX_TRANSACTION_SIZE).
	      This field defines the Port DMA transaction size in DWORDs
	      for receive (system bus write, device read) operation. [...]
	 
	    TXABL: Transmit Burst Limit.
	      This field allows software to limit the VBUSP master read
	      burst size. [...]
	 
	    RXABL: Receive Burst Limit.
	      Allows software to limit the VBUSP master write burst
	      size. [...]
	 
	    Reserved: Reserved.
	 
	 
	  NOTE: According to the above document, the following alternative
	    to the code below could perhaps be a better option
	    (or preparation) for possible further improvements later:
	      sunxi_clrsetbits(hpriv->mmio + AHCI_P0DMACR, 0x0000ffff,
	 		0x00000033);
 Start DMA 
	
	  The sunxi sata controller seems to be unable to successfully do a
	  soft reset if no pmp is attached, so disable pmp use unless
	  requested, otherwise directly attached disks do not work.
 SPDX-License-Identifier: GPL-2.0
  Buddha, Catweasel and X-Surf PATA controller driver
  Copyright (c) 2018 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Based on buddha.c:
 	Copyright (C) 1997, 2001 by Geert Uytterhoeven and others
 2.5" interface 
 3.5" interface 
 master interrupt enable 
 FIXME: is this needed? 
 Transfer multiple of 2 bytes 
 Transfer trailing byte, if any. 
 Point buf to the tail of buffer 
  Provide our own set_mode() as we don't want to change anything that has
  already been configured..
 We don't really care 
 Workaround for X-Surf: Save drvdata in case zorro8390 has set it 
 allocate host 
 enable the board IRQ on BuddhaCatweasel 
 X-Surf has no CS1 (ControlAltStat) 
  We cannot have a modalias for X-Surf boards, as it competes with the
  zorro8390 network driver. As a stopgap measure until we have proper
  MFD support for this board, we manually attach to it late after Zorro
  has enumerated its boards.
 Auto-bind to regular boards 
 Manually bind to all X-Surf boards 
 SPDX-License-Identifier: GPL-2.0-or-later
  AppliedMicro X-Gene SoC SATA Host Controller Driver
  Copyright (c) 2014, Applied Micro Circuits Corporation
  Author: Loc Ho <lho@apm.com>
          Tuan Phan <tphan@apm.com>
          Suman Tripathi <stripathi@apm.com>
  NOTE: PM support is not currently available.
 Max # of disk per a controller 
 MUX CSR 
 SATA core host controller CSR 
 SATA host AHCI CSR 
 SATA host controller AXI CSR 
 SATA diagnostic CSR 
 Max retry for link down 
 tracking the last command issued
 tracking the class of device 
 Core CSR address of IP 
 Diag CSR address of IP 
 AXI CSR address of IP 
 MUX CSR address of IP 
 Force a barrier 
 reset may take up to 1ms 
  xgene_ahci_poll_reg_val- Poll a register on a specific value.
  @ap : ATA port of interest.
  @reg : Register of interest.
  @val : Value to be attained.
  @interval : waiting interval for polling.
  @timeout : timeout for achieving the value.
  xgene_ahci_restart_engine - Restart the dma engine.
  @ap : ATA port of interest
  Waits for completion of multiple commands and restarts
  the DMA engine inside the controller.
	
	  In case of PMP multiple IDENTIFY DEVICE commands can be
	  issued inside PxCI. So need to poll PxCI for the
	  completion of outstanding IDENTIFY DEVICE commands before
	  we restart the DMA engine.
	
	  Enable the PxFBS.FBS_EN bit as it
	  gets cleared due to stopping the engine.
  xgene_ahci_qc_issue - Issue commands to the device
  @qc: Command to issue
  Due to Hardware errata for IDENTIFY DEVICE command, the controller cannot
  clear the BSY bit after receiving the PIO setup FIS. This results in the dma
  state machine goes into the CMFatalErrorUpdate state and locks up. By
  restarting the dma engine, it removes the controller out of lock up state.
  Due to HW errata, the controller is unable to save the PMP
  field fetched from command header before sending the H2D FIS.
  When the device returns the PMP port field in the D2H FIS, there is
  a mismatch and results in command completion failure. The
  workaround is to write the pmp value to PxFBS.DEV field before issuing
  any command to PMP.
	
	  Write the pmp value to PxFBS.DEV
	  for case of Port Mulitplier.
 Save the last command issued 
  xgene_ahci_read_id - Read ID data from the specified device
  @dev: device
  @tf: proposed taskfile
  @id: data buffer
  This custom read ID function is required due to the fact that the HW
  does not support DEVSLP.
	
	  Mask reserved area. Word78 spec of Link Power Management
	  bit15-8: reserved
	  bit7: NCQ autosence
	  bit6: Software settings preservation supported
	  bit5: reserved
	  bit4: In-order sata delivery supported
	  bit3: DIPM requests supported
	  bit2: DMA Setup FIS Auto-Activate optimization supported
	  bit1: DMA Setup FIX non-Zero buffer offsets supported
	  bit0: Reserved
	 
	  Clear reserved bit 8 (DEVSLP bit) as we don't support DEVSLP
 Force a barrier 
 Disable fix rate 
 Force a barrier 
 Force a barrier 
 Force a barrier 
 Force a barrier 
 Set window negotiation 
 Force a barrier 
 Enable context mgmt 
 Set outstanding 
 Force a barrier 
 Set the watermark threshold of the receive FIFO 
  xgene_ahci_do_hardreset - Issue the actual COMRESET
  @link: link to reset
  @deadline: deadline jiffies for the operation
  @online: Return value to indicate if device online
  Due to the limitation of the hardware PHY, a difference set of setting is
  required for each supported disk speed - Gen3 (6.0Gbps), Gen2 (3.0Gbps),
  and Gen1 (1.5Gbps). Otherwise during long IO stress test, the PHY will
  report disparity error and etc. In addition, during COMRESET, there can
  be error reported in the register PORT_SCR_ERR. For SERR_DISPARITY and
  SERR_10B_8B_ERR, the PHY receiver line must be reseted. Also during long
  reboot cycle regression, sometimes the PHY reports link down even if the
  device is present because of speed negotiation failure. so need to retry
  the COMRESET to get the link up. The following algorithm is followed to
  proper configure the hardware PHY during COMRESET:
  Alg Part 1:
  1. Start the PHY at Gen3 speed (default setting)
  2. Issue the COMRESET
  3. If no link, go to Alg Part 3
  4. If link up, determine if the negotiated speed matches the PHY
     configured speed
  5. If they matched, go to Alg Part 2
  6. If they do not matched and first time, configure the PHY for the linked
     up disk speed and repeat step 2
  7. Go to Alg Part 2
  Alg Part 2:
  1. On link up, if there are any SERR_DISPARITY and SERR_10B_8B_ERR error
     reported in the register PORT_SCR_ERR, then reset the PHY receiver line
  2. Go to Alg Part 4
  Alg Part 3:
  1. Check the PORT_SCR_STAT to see whether device presence detected but PHY
     communication establishment failed and maximum link down attempts are
     less than Max attempts 3 then goto Alg Part 1.
  2. Go to Alg Part 4.
  Alg Part 4:
  1. Clear any pending from register PORT_SCR_ERR.
  NOTE: For the initial version, we will NOT support Gen1Gen2. In addition
        and until the underlying PHY supports an method to reset the receiver
        line, on detection of SERR_DISPARITY or SERR_10B_8B_ERR errors,
        an warning message will be printed.
 clear D2H reception area to properly wait for D2H FIS 
 clear all errors if any pending 
 As hardreset resets these CSR, save it to restore later 
 As controller hardreset clears them, restore them 
  xgene_ahci_pmp_softreset - Issue the softreset to the drives connected
                             to Port Multiplier.
  @link: link to reset
  @class: Return value to indicate class of device
  @deadline: deadline jiffies for the operation
  Due to HW errata, the controller is unable to save the PMP
  field fetched from command header before sending the H2D FIS.
  When the device returns the PMP port field in the D2H FIS, there is
  a mismatch and results in command completion failure. The workaround
  is to write the pmp value to PxFBS.DEV field before issuing any command
  to PMP.
	
	  Set PxFBS.DEV field with pmp
	  value.
  xgene_ahci_softreset - Issue the softreset to the drive.
  @link: link to reset
  @class: Return value to indicate class of device
  @deadline: deadline jiffies for the operation
  Due to HW errata, the controller is unable to save the PMP
  field fetched from command header before sending the H2D FIS.
  When the device returns the PMP port field in the D2H FIS, there is
  a mismatch and results in command completion failure. The workaround
  is to write the pmp value to PxFBS.DEV field before issuing any command
  to PMP. Here is the algorithm to detect PMP :
  1. Save the PxFBS value
  2. Program PxFBS.DEV with pmp value send by framework. Framework sends
     0xF for both PMPNON-PMP initially
  3. Issue softreset
  4. If signature class is PMP goto 6
  5. restore the original PxFBS and goto 3
  6. return
	
	  Set PxFBS.DEV field with pmp
	  value.
		
		  Retry for normal drives without
		  setting PxFBS.DEV field with pmp value.
  xgene_ahci_handle_broken_edge_irq - Handle the broken irq.
  @host: Host that recieved the irq
  @irq_masked: HOST_IRQ_STAT value
  For hardware with broken edge trigger latch
  the HOST_IRQ_STAT register misses the edge interrupt
  when clearing of HOST_IRQ_STAT register and hardware
  reporting the PORT_IRQ_STAT register at the
  same clock cycle.
  As such, the algorithm below outlines the workaround.
  1. Read HOST_IRQ_STAT register and save the state.
  2. Clear the HOST_IRQ_STAT register.
  3. Read back the HOST_IRQ_STAT register.
  4. If HOST_IRQ_STAT register equals to zero, then
     traverse the rest of port's PORT_IRQ_STAT register
     to check if an interrupt is triggered at that point else
     go to step 6.
  5. If PORT_IRQ_STAT register of rest ports is not equal to zero
     then update the state of HOST_IRQ_STAT saved in step 1.
  6. Handle port interrupts.
  7. Exit
 sigh.  0xffffffff is a valid return from hw 
	
	  HOST_IRQ_STAT behaves as edge triggered latch meaning that
	  it should be cleared before all the port events are cleared.
 Remove IP RAM out of shutdown 
 AXI disable Mask 
 Force a barrier 
 Force a barrier 
 Force a barrier 
 Enable AXI Interrupt 
 Enable coherency 
 Enable write coherency 
 Enable read coherency 
 Enable read coherency 
 Enable write coherency 
 Check for optional MUX resource 
 Retrieve the IP core resource 
 Retrieve the IP diagnostic resource 
 Retrieve the IP AXI resource 
 Retrieve the optional IP mux resource 
 Select ATA 
 Due to errata, HW requires full toggle transition 
 Configure the host controller 
 SPDX-License-Identifier: GPL-2.0-only
 	Marvell PATA driver.
 	For the moment we drive the PATA port in legacy mode. That
 	isn't making full use of the device functionality but it is
 	easy to get working.
 	(c) 2006 Red Hat
 	marvell_pata_active	-	check if PATA is active
 	@pdev: PCI device
 	Returns 1 if the PATA port may be active. We know how to check this
 	for the 6145 but not the other devices
 We don't yet know how to do this for other devices 
 	marvell_pre_reset	-	probe begin
 	@link: link
 	@deadline: deadline jiffies for the operation
 	Perform the PATA port setup we need.
 PATA enable ? 
 Cable type 
 Legacy SATA port 
 Our BUG macro needs the right markup 
 No PIO or DMA methods needed for this device 
 	marvell_init_one - Register Marvell ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@id: PCI device ID
 	Called from kernel PCI layer.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 Slave possible as its magically mapped not real 
 terminate list 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  PATA driver for Samsung SoCs.
  Supports CF Interface in True IDE mode. Currently only PIO mode has been
  implemented; UDMA support has to be added.
  Based on:
 	PATA driver for AT91SAM9260 Static Memory Controller
 	PATA driver for Toshiba SCC controller
  struct s3c_ide_info - S3C PATA instance.
  @clk: The clock resource for this controller.
  @ide_addr: The area mapped for the hardware registers.
  @sfr_addr: The area mapped for the special function registers.
  @irq: The IRQ number we are using.
  @cpu_type: The exact type of this controller.
  @fifo_status_reg: The ATA_FIFO_STATUS register offset.
 Select true-ide as the internal operating mode 
 Enables IORDY if mode requires it 
  Waits until the IDE controller is able to perform next readwrite
  operation to the disk. Needed for 64XX series boards only.
 wait for maximum of 20 msec 
  Writes to one of the task file registers.
  Reads from one of the task file registers.
  pata_s3c_tf_load - send taskfile registers to host controller
  pata_s3c_tf_read - input device's ATA taskfile shadow registers
  pata_s3c_exec_command - issue ATA command to host controller
  pata_s3c_check_status - Read device status register
  pata_s3c_check_altstatus - Read alternate device status register
  pata_s3c_data_xfer - Transfer data by PIO
 Requires wait same as in ata_inbata_outb 
  pata_s3c_dev_select - Select device on ATA bus
  pata_s3c_devchk - PATA device presence detection
 we found a device 
 nothing found 
  pata_s3c_wait_after_reset - wait for devices to become ready after reset
 always check readiness of the master device 
	 -ENODEV means the odd clown forgot the D7 pulldown resistor
	  and TF status is 0xff, bail out on it too.
  pata_s3c_bus_softreset - PATA device software reset
 software reset.  causes dev0 to be selected 
  pata_s3c_softreset - reset host port via ATA SRST
 determine if device 0 is present 
 select device 0 again 
 issue bus reset 
 if link is occupied, -ENODEV too is an error 
 determine by signature whether we have ATA or ATAPI devices 
  pata_s3c_set_devctl - Write device control register
 Configure as big endian 
 Remove IRQ Status 
 Configure as little endian 
 Remove IRQ Status 
 init ata host 
 Set endianness and enable the interface 
 driver device registration 
 SPDX-License-Identifier: GPL-2.0-only
  sata_mv.c - Marvell SATA support
  Copyright 2008-2009: Marvell Corporation, all rights reserved.
  Copyright 2005: EMC Corporation, all rights reserved.
  Copyright 2005 Red Hat, Inc.  All rights reserved.
  Originally written by Brett Russ.
  Extensive overhaul and enhancement by Mark Lord <mlord@pobox.com>.
  Please ALWAYS copy linux-ide@vger.kernel.org on emails.
  sata_mv TODO list:
  --> Develop a low-power-consumption strategy, and implement it.
  --> Add sysfs attributes for per-chip  per-HC IRQ coalescing thresholds.
  --> [Experiment, Marvell value added] Is it possible to use target
        mode to cross-connect two Linux boxes with Marvell cards?  If so,
        creating LibATA target mode support would be very interesting.
        Target mode, for those without docs, is the ability to directly
        connect two SATA ports.
  80x1-B2 errata PCI#11:
  Users of the 60416081 Rev.B2 chips (current is C0)
  should be careful to insert those cards only onto PCI-X bus #0,
  and only in device slots 0..7, not higher.  The chips may not
  work correctly otherwise  (note: this is a pretty rare condition).
  module options
 BAR's are enumerated in terms of pci_resource_start() terms 
 offset 0x10: memory space 
 offset 0x18: IO space 
 offset 0x1c: FLASH, NVRAM, SRAM 
 64KB 
 8KB 
 For use with both IRQ coalescing methods ("all ports" or "per-HC" 
 for calculating COAL_TIMEs 
 internal clocks count 
 completed IO count 
	
	  Per-chip ("all ports") interrupt coalescing feature.
	  This is only for GEN_II  GEN_IIE hardware.
	 
	  Coalescing defers the interrupt until either the IO_THRESHOLD
	  (count of completed IOs) is met, or the TIME_THRESHOLD is met.
 all ports irq event 
	
	  Registers for the (unused here) transaction coalescing feature:
 arbiter 
	 CRQB needs alignment on a 1KB boundary. Size == 1KB
	  CRPB needs alignment on a 256B boundary. Size == 256B
	  ePRD (SG) entries need alignment on a 16B boundary. Size == 16B
 Determine hc from 0-7 port: hc = port >> MV_PORT_HC_SHIFT 
 4 
 Determine hc port from 0-7 port: hardport = port & MV_PORT_MASK 
 3 
 Host Flags 
 two SATA Host Controllers 
 CRQB Gen-IIIIE IO Id shift 
 CRQB Gen-IIIIE PMP shift 
 CRQB Gen-IIIIE HostQueTag shift 
 CRPB Gen-II IO Id shift 
 CRPB Gen-IIE IO Id shift 
 PCI interface registers 
 PCI Master Write Combining 
 PCI Master Read Trigger 
 bits 22-0 
 assorted bits 
 Host Controller Main Interrupt CauseMask registers (1 per-chip) 
 shift by (2  port #) 
 shift by (2  port #) 
 bits 0-8 = HC0's ports 
 bits 9-17 = HC1's ports 
 DONE_IRQ ports 0,1,2,3 
 4,5,6,7 
 transaction coalescing 
 transaction coalescing 
 HC0 IRQ coalescing 
 HC1 IRQ coalescing 
 GEN_II(E) IRQ coalescing 
 bits 31-25 
 bits 31-19 
 bits 31-9, 7-6 
 SATAHC registers 
 shift by port # 
 IRQ coalescing 
 shift by port # 
	
	  Per-HC (Host-Controller) interrupt coalescing feature.
	  This is present on all chip generations.
	 
	  Coalescing defers the interrupt until either the IO_THRESHOLD
	  (count of completed IOs) is met, or the TIME_THRESHOLD is met.
 Active LED blink 
 Multiplex dev presence 
  with dev activity LED 
 Shadow block registers 
 ofs from SHD_BLK 
 SATA registers 
 ctrl, err regs follow status 
 async notification 
 requires read-after-write 
 unknown, but necessary 
 requires read-after-write 
 phy internal config field 
 phy internal config field 
 Gen2e always write zeros 
 Gen2e always write ones 
 wait for host on DevErr 
 SYNC on DMA activation 
 only in 65n devices 
 Port registers 
 max device queue depth 
 for RW FPDMA queued 
 continue on error 
 read burst 512B 
 write buffer 512B 
 EDMA FIS-Based Switching 
 FIS-Based Switching 
 UDMA data parity err 
 UDMA PRD parity err 
 device error 
 device disconnect 
 device connected 
 SError bits [WBDST] raised 
 Gen IIIIE self-disable 
 Gen I self-disable 
 BIST FIS or Async Notify 
 Gen IIE transprt layer irq 
 CRQB parity error 
 CRPB parity error 
 internal parity error 
 IORdy timeout 
 link ctrl rx error 
 transient: CRC err 
 transient: FIFO err 
 fatal: caught SYNC 
 transient: FIS rx err 
 link data rx error 
 link ctrl tx error 
 transient: CRC err 
 transient: FIFO err 
 transient: caught SYNC 
 transient: caught DMAT 
 transient: FIS collision 
 link data tx error 
 transport protocol error 
 also contains BASE_LO 
 also contains BASE_LO 
 EDMA command register 
 enable EDMA 
 disable EDMA; self-negated 
 reset engtranslinkphy 
 EDMA engine status 
 GenIIe command cache empty 
 GenIIe EDMA enabledidle 
 GenIIe halt conditions 
 GenIIe unknownreserved 
 bmdma command register 
 bmdma status register 
 bmdma PRD addr 31:0 
 bmdma PRD addr 63:32 
 Host private flags (hp_flags) 
 Generation I: 50xx 
 Generation II: 60xx 
 Generation IIE: 60427042 
 PCIe busregs: 7042 
 can use EDMA cut-through 
 SystemOnChip, no PCI 
 is led blinking enabled? 
 fix speed in LP_PHY_CTL ? 
 Port private flags (pp_flags) 
 is EDMA engine enabled? 
 is EDMA set up for NCQ? 
 is EDMA set up for FBS? 
 delayed dev err handling 
 ignore initial ATA_DRDY 
	 DMA boundary 0xffff is required by the sg splitting
	  we need on length in mv_fill-sg().
	 mask of register bits containing lower 32 bits
	  of EDMA request queue DMA address
 ditto, for response queue 
 Command ReQuest Block: 32B 
 Command ResPonse Block: 8B 
 EDMA Physical Region Descriptor (ePRD); A.K.A. SG 
  We keep a local cache of a few frequently accessed port
  registers here, to avoid having to read them (very slow)
  when switching between EDMA and non-EDMA modes.
	
	  Needed on some devices that require their clocks to be enabled.
	  These are optional: if the platform device does not have any
	  clocks, they won't be used.  Also, if the underlying hardware
	  does not support the common clock framework (CONFIG_HAVE_CLK=n),
	  all the clock operations become no-ops (see clk.h).
	
	  Some devices have a SATA PHY which can be enableddisabled
	  in order to save power. These are optional: if the platform
	  devices does not have any phy, they won't be used.
	
	  These consistent DMA memory pools give us guaranteed
	  alignment for hardware-accessed data structures,
	  and less memory waste in accomplishing the alignment.
 .sg_tablesize is (MV_MAX_SG_CT  2) in the structures below
  because we have to allow room for worst case splitting of
  PRDs for 64K boundaries in mv_fill_sg().
 chip_504x 
 chip_508x 
 chip_5080 
 chip_604x 
 chip_608x 
 chip_6042 
 chip_7042 
 chip_soc 
 RocketRAID 1720174x have different identifiers 
 Adaptec 1430SA 
 Marvell 7042 support 
 Highpoint RocketRAID PCIe series 
 terminate list 
  Functions
 flush to avoid PCI posted write 
  Consolidate some rather tricky bit shift calculations.
  This is hot-path stuff, so not a function.
  Simple code, with two return values, so macro rather than inline.
  port is the sole input, in range 0..7.
  shift is one output, for use with main_irq_cause  main_irq_mask registers.
  hardport is the other output, in range 0..3.
  Note that port and hardport may be the same variable in some cases.
       mv_save_cached_regs - (re-)initialize cached port registers
       @ap: the port whose registers we are caching
 	Initialize the local cache of port registers,
 	so that reading them over and over again can
 	be avoided on the hotter paths of this driver.
 	This saves a few microseconds each time we switch
 	tofrom EDMA mode to perform (eg.) a drive cache flush.
       mv_write_cached_reg - write to a cached port register
       @addr: hardware address of the register
       @old: pointer to cached value of the register
       @new: new value for the register
 	Write a new value to a cached register,
 	but only if the value is different from before.
		
		  Workaround for 88SX60x1-B2 FEr SATA#13:
		  Read-after-write is needed to prevent generating 64-bit
		  write cycles on the PCI bus for SATA interface registers
		  at offsets ending in 0x4 or 0xc.
		 
		  Looks like a lot of fuss, but it avoids an unnecessary
		  +1 usec read-after-write delay for unaffected registers.
 read after write 
 unaffected by the errata 
	
	  initialize request queue
 paranoia 
	
	  initialize response queue
 paranoia 
	
	  When writing to the main_irq_mask in hardware,
	  we must ensure exclusivity between the interrupt coalescing bits
	  and the corresponding individual port DONE_IRQ bits.
	 
	  Note that this register is really an "IRQ enable" register,
	  not an "IRQ mask" register as Marvell's naming might suggest.
 clear EDMA event indicators, if any 
 clear pending irq events 
 clear FIS IRQ Cause 
 Disable IRQ coalescing if either threshold is zero 
 Respect maximum limits of the hardware 
		
		  GEN_IIGEN_IIE with dual host controllers:
		  one set of global thresholds for the entire chip.
 clear leftover coal IRQ bit 
 force clearing of regular regs below 
	
	  All chips: independent thresholds for each HC on the chip.
       mv_start_edma - Enable eDMA engine
       @pp: port private data
       Verify the local cache of the eDMA state is accurate with a
       WARN_ON.
       LOCKING:
       Inherited from caller.
	
	  Wait for the EDMA engine to finish transactions in progress.
	  No idea what a good "timeout" value might be, but measurements
	  indicate that it often requires hundreds of microseconds
	  with two drives in-use.  So we use the 15msec value above
	  as a rough guess at what even more drives might require.
 ata_port_info(ap, "%s: %u+ usecs\n", __func__, i); 
       mv_stop_edma_engine - Disable eDMA engine
       @port_mmio: io base address
       LOCKING:
       Inherited from caller.
 Disable eDMA.  The disable bit auto clears. 
 Wait for the chip to confirm eDMA is off. 
 shld be benign for 4 port devs 
 active is not with the others 
			
			  Workaround for 88SX60x1 FEr SATA#26:
			 
			  COMRESETs have to take care not to accidentally
			  put the drive to sleep when writing SCR_CONTROL.
			  Setting bits 12..15 prevents this problem.
			 
			  So if we see an outbound COMMRESET, set those bits.
			  Ditto for the followup write that clears the reset.
			 
			  The proprietary driver does this for
			  all chip versions, and so do we.
				
				  Set PHY speed according to SControl speed.
	
	  Deal with Gen-II ("mv6") hardware quirksrestrictions:
	 
	  Gen-II does not support NCQ over a port multiplier
	   (no FIS-based switching).
	
	  Don't allow new commands if we're in a delayed EH state
	  for NCQ andor FIS-based switching.
	 PIO commands need exclusive link: no other commands [DMA or PIO]
	  can run concurrently.
	  set excl_link when we want to send a PIO command in DMA mode
	  or a non-NCQ command in NCQ mode.
	  When we receive a command from that link, and there are no
	  outstanding commands, mark a flag to clear excl_link and let
	  the command go through.
	
	  If the port is completely idle, then allow the new qc.
	
	  The port is operating in host queuing mode (EDMA) with NCQ
	  enabled, allow multiple NCQ commands.  EDMA also allows
	  queueing multiple DMA commands but libata core currently
	  doesn't allow it.
 workaround for 88SX60x1 FEr SATA#25 (part 1) 
 	mv_bmdma_enable - set a magic bit on GEN_IIE to allow bmdma
 	@ap: Port being initialized
 	There are two DMA modes on these chips:  basic DMA, and EDMA.
 	Bit-0 of the "EDMA RESERVED" register enablesdisables use
 	of basic DMA on the GEN_IIE versions of the chips.
 	This bit survives EDMA resets, and must be set for basic DMA
 	to function, and should be cleared when EDMA is active.
  SOC chips have an issue whereby the HDD LEDs don't always blink
  during IO when NCQ is enabled. Enabling a special "LED blink" mode
  of the SOC takes care of it, generating a steady blink rate when
  any drive on the chip is active.
  Unfortunately, the blink mode is a global hardware setting for the SOC,
  so we must use it whenever at least one port on the SOC has NCQ enabled.
  We turn "LED blink" off when NCQ is not in use anywhere, because the normal
  LED operation works then, and provides better (more accurate) feedback.
  Note that this code assumes that an SOC never has more than one HC onboard.
 disable led-blink only if no ports are using NCQ 
 set up non-NCQ EDMA configuration 
 always 0x1f for all chips 
 enab config burst size mask 
		
		  Possible future enhancement:
		 
		  The chip can use FBS with non-NCQ, if we allow it,
		  But first we need to have the error handling in place
		  for this mode (datasheet section 7.3.15.4.2.3).
		  So disallow non-NCQ FBS for now.
 FIS-based switching 
 do not mask PM field in rx'd FIS 
 enab 4-entry host queue cache 
 enab early completion 
 enab cut-thru (dis stor&forwrd) 
	
	  For GEN_I, there's no NCQ, so we have only a single sg_tbl.
	  For later hardware, we have one unique sg_tbl per NCQ tag.
       mv_port_start - Port specific initstart routine.
       @ap: ATA channel to manipulate
       Allocate and point to DMA memory, init port private memory,
       zero indices.
       LOCKING:
       Inherited from caller.
 60416081 Rev. "C0" (and newer) are okay with async notify 
	
	  For GEN_I, there's no NCQ, so we only allocate a single sg_tbl.
	  For later hardware, we need one unique sg_tbl per NCQ tag.
       mv_port_stop - Port specific cleanupstop routine.
       @ap: ATA channel to manipulate
       Stop DMA, cleanup port memory.
       LOCKING:
       This routine uses the host lock to protect the DMA stop.
       mv_fill_sg - Fill out the Marvell ePRD (scatter gather) entries
       @qc: queued command whose SG list to source from
       Populate the SG list and mark the last entry.
       LOCKING:
       Inherited from caller.
 ensure data structure is visible to the chipset 
 	mv_sff_irq_clear - Clear hardware interrupt after DMA.
 	@ap: Port associated with this ATA transaction.
 	We need this only for ATAPI bmdma transactions,
 	as otherwise we experience spurious interrupts
 	after libata-sff handles the bmdma interrupts.
 	mv_check_atapi_dma - Filter ATAPI cmds which are unsuitable for DMA.
 	@qc: queued command to check for chipsetDMA compatibility.
 	The bmdma engines cannot handle speculative data sizes
 	(bytecount underover flow).  So only allow DMA for
 	data transfer commands with known data sizes.
 	LOCKING:
 	Inherited from caller.
 DMA is safe 
 use PIO instead 
 	mv_bmdma_setup - Set up BMDMA transaction
 	@qc: queued command to prepare DMA for.
 	LOCKING:
 	Inherited from caller.
 clear all DMA cmd bits 
 load PRD table addr. 
 issue rw command 
 	mv_bmdma_start - Start a BMDMA transaction
 	@qc: queued command to start DMA on.
 	LOCKING:
 	Inherited from caller.
 start host DMA transaction 
 	mv_bmdma_stop_ap - Stop BMDMA transfer
 	@ap: port to stop
 	Clears the ATA_DMA_START flag in the bmdma control register
 	LOCKING:
 	Inherited from caller.
 clear startstop bit 
 one-PIO-cycle guaranteed wait, per spec, for HDMA1:0 transition 
 	mv_bmdma_status - Read BMDMA status
 	@ap: port for which to retrieve DMA status.
 	Read and return equivalent of the sff BMDMA status register.
 	LOCKING:
 	Inherited from caller.
	
	  Other bits are valid only if ATA_DMA_ACTIVE==0,
	  and the ATA_DMA_INTR bit doesn't exist.
		
		  Just because DMA_ACTIVE is 0 (DMA completed),
		  this does _not_ mean the device is "done".
		  So we should not yet be signalling ATA_DMA_INTR
		  in some cases.  Eg. DSMTRIM, and perhaps others.
	
	  Workaround for 88SX60x1 FEr SATA#24.
	 
	  Chip may corrupt WRITEs if multi_count >= 4kB.
	  Note that READs are unaffected.
	 
	  It's not clear if this errata really means "4K bytes",
	  or if it always happens for multi_count > 7
	  regardless of device sector_size.
	 
	  So, for safety, any write with multi_count > 7
	  gets converted here into a regular PIO write instead:
 ugh 
       mv_qc_prep - Host specific command preparation.
       @qc: queued command to prepare
       This routine simply redirects to the general purpose routine
       if command is not DMA.  Else, it handles prep of the CRQB
       (command request block), does some sanity checking, and calls
       the SG load routine.
       LOCKING:
       Inherited from caller.
 continue below 
	 Fill in command request block
 get current queue index from software 
	 Sadly, the CRQB cannot accommodate all registers--there are
	  only 11 bytes...so we must pick and choose required
	  registers based on the command.  So, we drop feature and
	  hob_feature for [RW] DMA commands, but they are needed for
	  NCQ.  NCQ will drop hob_nsect, which is not needed there
	  (nsect is used only for the tag; feathob_feat hold true nsect).
		 The only other commands EDMA supports in non-queued and
		  non-NCQ mode are: [RW] STREAM DMA and W DMA FUA EXT, none
		  of which are definedused by Linux.  If we get here, this
		  driver needs work.
 last 
       mv_qc_prep_iie - Host specific command preparation.
       @qc: queued command to prepare
       This routine simply redirects to the general purpose routine
       if command is not DMA.  Else, it handles prep of the CRQB
       (command request block), does some sanity checking, and calls
       the SG load routine.
       LOCKING:
       Inherited from caller.
 use bmdma for this 
 Fill in Gen IIE command request block 
 get current queue index from software 
 	mv_sff_check_status - fetch device status, if valid
 	@ap: ATA port to fetch status from
 	When using command issue via mv_qc_issue_fis(),
 	the initial ATA_BUSY state does not show up in the
 	ATA status (shadow) register.  This can confuse libata!
 	So we have a hook here to fake ATA_BUSY for that situation,
 	until the first time a BUSY, DRQ, or ERR bit is seen.
 	The rest of the time, it simply returns the ATA status register.
 	mv_send_fis - Send a FIS, using the "Vendor-Unique FIS" register
 	@ap: ATA port to send a FIS
 	@fis: fis to be sent
 	@nwords: number of 32-bit words in the fis
 Initiate FIS transmission mode 
 Send all words of the FIS except for the final word 
 Flag end-of-transmission, and then send the final word 
	
	  Wait for FIS transmission to complete.
	  This typically takes just a single iteration.
 Restore original port configuration 
 See if it worked 
 	mv_qc_issue_fis - Issue a command directly as a FIS
 	@qc: queued command to start
 	Note that the ATA shadow registers are not updated
 	after command issue, so the device will appear "READY"
 	if polled, even while it is BUSY processing the command.
 	So we use a status hook to fake ATA_BUSY until the drive changes state.
 	Note: we don't get updated shadow regs on completion
 	of non-data commands. So avoid sending them via this function,
 	as they will appear to have completed immediately.
 	GEN_IIE has special registers that we could get the result tf from,
 	but earlier chipsets do not.  For now, we ignore those registers.
       mv_qc_issue - Initiate a command to the host
       @qc: queued command to start
       This routine simply redirects to the general purpose routine
       if command is not DMA.  Else, it sanity checks our local
       caches of the request producerconsumer indices then enables
       DMA and bumps the request producer index.
       LOCKING:
       Inherited from caller.
 paranoia 
 no bmdma on GEN_I 
 use bmdma for this 
 Write the request in pointer to kick the EDMA to life 
		
		  Errata SATA#16, SATA#24: warn if multiple DRQs expected.
		 
		  Someday, we might implement special polling workarounds
		  for these, but it all seems rather unnecessary since we
		  normally use only DMA for commands which transfer more
		  than a single block of data.
		 
		  Much of the time, this could just work regardless.
		  So for now, just log the incident, and allow the attempt.
 mask device interrupt when polling 
 unmask all interrupts 
	
	  We're about to send a non-EDMA capable command to the
	  port.  Turn off EDMA so there won't be problems accessing
	  shadow block, etc registers.
		
		  Workaround for 88SX60x1 FEr SATA#25 (part 2).
		 
		  After any NCQ error, the READ_LOG_EXT command
		  from libata-eh must use mv_qc_issue_fis().
		  Otherwise it might fail, due to chip errata.
		 
		  Rather than special-case it, we'll just always
		  use this method here for READ_LOG_EXT, making for
		  easier testing.
		
		  Perform NCQ error analysis on failed PMPs
		  before we freeze the port entirely.
		 
		  The failed PMPs are marked earlier by mv_pmp_eh_prep().
	
	  Initialize EH info for PMPs which saw device errors
 1 == queue_is_empty 
	
	  Device error during FBS+NCQ operation:
	 
	  Set a port flag to prevent further IO being enqueued.
	  Leave the EDMA running to drain outstanding commands from this port.
	  Perform the post-mortemEH only when all responses are complete.
	  Follow recovery sequence from 60427042 datasheet (7.3.15.4.2.2).
 handled 
 handled 
	
	  Possible future enhancement:
	 
	  FBS+non-NCQ operation is not yet implemented.
	  See related notes in mv_edma_cfg().
	 
	  Device error during FBS+non-NCQ operation:
	 
	  We need to snapshot the shadow registers for each failed command.
	  Follow recovery sequence from 60427042 datasheet (7.3.15.4.2.3).
 not handled 
 EDMA was not active: not handled 
 FBS was not active: not handled 
 non DEV error: not handled 
 other problems: not handled 
		
		  EDMA should NOT have self-disabled for this case.
		  If it did, then something is wrong elsewhere,
		  and we cannot handle it here.
 not handled 
		
		  EDMA should have self-disabled for this case.
		  If it did not, then something is wrong elsewhere,
		  and we cannot handle it here.
 not handled 
 not handled 
       mv_err_intr - Handle error interrupts on the port
       @ap: ATA channel to manipulate
       Most cases require a full reset of the chip's state machine,
       which also performs a COMRESET.
       Also, if the port disabled DMA, update our cached copy to match.
       LOCKING:
       Inherited from caller.
	
	  Read and clear the SError and err_cause bits.
	  For GenIIe, if EDMA_ERR_TRANS_IRQ_7 is set, we also must readclear
	  the FIS_IRQ_CAUSE register before clearing edma_err_cause.
		
		  Device errors during FIS-based switching operation
		  require special handling.
 Just an AN; no need for the nukes 
	
	  All generations share these EDMA error cause bits:
	
	  Gen-I has a different SELF_DIS bit,
	  different FREEZE bits, and no SERR bit:
		
		  Cannot do ata_port_freeze() here,
		  because it would kill PIO access,
		  which is needed for further diagnosis.
		
		  Note to self: ata_port_freeze() calls ata_port_abort()
	
	  edma_status from a response queue entry:
	    LSB is from EDMA_ERR_IRQ_CAUSE (non-NCQ only).
	    MSB is saved ATA status from command completion.
			
			  Error will be seenhandled by
			  mv_err_intr().  So do nothing at all here.
 else: leave it for mv_err_intr() 
 Get the hardware queue position index 
 Process new responses from since the last time we looked 
 50xx: no NCQ, only one command active at a time 
 Gen IIIIE: get command tag from CRPB entry 
 Update the software queue position index in hardware 
	
	  Grab a snapshot of the EDMA_EN flag setting,
	  so that we have a consistent view for this port,
	  even if something we call of our routines changes it.
	
	  Process completed CRPB response(s) before other events.
	
	  Handle chip-reported errors, or continue on to handle PIO.
       mv_host_intr - Handle all interrupts on the given host controller
       @host: host specific structure
       @main_irq_cause: Main interrupt cause register for the chip.
       LOCKING:
       Inherited from caller.
 If asserted, clear the "all ports" IRQ coalescing bit 
		
		  Each hc within the host has its own hc_irq_cause register,
		  where the interrupting ports bits get ack'd.
 first port on this hc ? 
			
			  Skip this entire hc if nothing pending for any ports
			
			  We don't needwant to read the hc_irq_cause register,
			  because doing so hurts performance, and
			  main_irq_cause already gives us everything we need.
			 
			  But we do have to write to the hc_irq_cause to ack
			  the ports that we are handling this time through.
			 
			  This requires that we create a bitmap for those
			  ports which interrupted us, and use that bitmap
			  to ack (only) those ports via hc_irq_cause.
		
		  Handle interrupts signalled for this port:
 handled 
       mv_interrupt - Main interrupt event handler
       @irq: unused
       @dev_instance: private data; in this case the host structure
       Read the read only register to determine if any host
       controllers have pending interrupts.  If so, call lower level
       routine to handle.  Also check for PCI errors which are only
       reported here.
       LOCKING:
       This routine holds the host lock while processing pending
       interrupts.
 for MSI:  block new interrupts while in here 
	
	  Deal with cases where we either have nothing pending, or have read
	  a bogus register value which can indicate HW removal or PCI fault.
 for MSI: unmask; interrupt cause bits will retrigger now 
 bits 12:11 
 bits 7:5 
 FIXME: handle MV_HP_ERRATA_50XXB2 errata 
 command 
 timer 
 irq err cause 
 irq err mask 
 rq bah 
 rq inp 
 rq outp 
 respq bah 
 respq outp 
 respq inp 
 test control 
       mv6_reset_hc - Perform the 6xxx global soft reset
       @mmio: base address of the HBA
       This routine only applies to 6xxx parts.
       LOCKING:
       Inherited from caller.
	 Following procedure defined in PCI "main command and status
	  register" table.
 set reset 
 clear reset and reenable the PCI master (not mentioned in spec) 
 bits 10:8 
 bits 7:5 
	
	  Gen-IIIIe PHY_MODE3 errata RM#2:
	  Achieves better receiver noise performance than the hw default:
 Guideline 88F5182 (GL# SATA-S11) 
		
		  Enforce reserved-bit restrictions on GenIIe devices only.
		  For earlier chipsets, force only the internal config field
		   (workaround for errata FEr SATA#10 part 1).
	
	  Workaround for 60x1-B2 errata SATA#13:
	  Any write to PHY_MODE4 (above) may corrupt PHY_MODE3,
	  so we must always rewrite PHY_MODE3 after PHY_MODE4.
	  Or ensure we use writelfl() when writing PHY_MODE4.
 Revert values of pre-emphasis and signal amps to the saved ones 
 according to mvSata 3.6.1, some IIE values are fixed 
 TODO: use the generic LED interface to configure the SATA Presence 
 & Acitivy LEDs on the board 
 bits 10:8 
 bits 7:5 
 command 
 timer 
 irq err cause 
 irq err mask 
 rq bah 
 rq inp 
 rq outp 
 respq bah 
 respq outp 
 respq inp 
 test control 
 SELMUPF (bits 28:27) to 1 
 SELMUPI (bits 30:29) to 1 
 SATU_OD8 (bit 0) to 0, reserved bit 16 must be set 
 TXAMP[3:0] (bits 3:0) to 8 
 TXAMP[4] (bit 14) to 0 
 TXAMP[3:0] (bits 3:0) to 8 
 TXAMP[4] (bit 14) to 0 
 	soc_is_65 - check if the soc is 65 nano device
 	Detect the type of the SoC, this is done by reading the PHYCFG_OFS
 	register, this register should contain non-zero value and it exists only
 	in the 65 nano devices, when reading it from older devices we get 0.
 from chip spec 
 enable gen2i speed 
	
	  The datasheet warns against setting EDMA_RESET when EDMA is active
	  (but doesn't say what the problem might be).  So we first try
	  to disable the EDMA engine before doing the EDMA_RESET operation.
 Enable 3.0gbs link speed: this survives EDMA_RESET 
	
	  Strobing EDMA_RESET here causes a hard reset of the SATA transport,
	  link, and physical layers.  It resets all SATA interface registers
	  (except for SATA_IFCFG), and issues a COMRESET to the dev.
 allow reset propagation 
 Workaround for errata FEr SATA#10 (part 2) 
 Force 1.5gbs link speed and try again 
 only extend it once, max 
 clear EDMA errors on this port 
 clear pending irq events 
       mv_port_init - Perform some early initialization on a single port.
       @port: libata data structure storing shadow register addresses
       @port_mmio: base address of the port
       Initialize shadow register mmio addresses, clear outstanding
       interrupts on the port, and unmask interrupts for the future
       start of the port.
       LOCKING:
       Inherited from caller.
	 PIO related setup
 special case: controlaltstatus doesn't have ATA_REG_ address 
 Clear any currently outstanding port interrupt conditions 
 unmask all non-transient EDMA error interrupts 
 not PCI-X capable 
 conventional PCI mode 
 chip is in PCI-X mode 
 not okay 
 okay 
 workaround for 60x1-B2 errata PCI#7 
			
			  Highpoint RocketRAID PCIe 23xx series cards:
			 
			  Unconfigured drives are treated as "Legacy"
			  by the BIOS, and it overwrites sector 8 with
			  a "Lgcy" metadata block prior to Linux boot.
			 
			  Configured drives (RAID or JBOD) leave sector 8
			  alone, but instead overwrite a high numbered
			  sector for the RAID metadata.  This sector can
			  be determined exactly, by truncating the physical
			  drive capacity to a nice even GB value.
			 
			  RAID metadata is at: (dev->n_sectors & ~0xfffff)
			 
			  Warn the user, lest they think we're just buggy.
 Rev.B0: the firstonly public release 
       mv_init_host - Perform some early initialization of the host.
 	@host: ATA host to initialize
       If possible, do an early global reset of the host.  Then do
       our port init and clearunmask allrelevant host interrupts.
       LOCKING:
       Inherited from caller.
 initialize shadow irq mask with register's value 
 global interrupt mask: 0 == mask everything 
 Clear any currently outstanding hc interrupt conditions 
 Clear any currently outstanding host interrupt conditions 
 and unmask interrupt generation for host regs 
	
	  enable only global host interrupts for now.
	  The per-port interrupts get done later as ports are set up.
       mv_platform_probe - handle a positive probe of an soc Marvell
       host
       @pdev: platform device found
       LOCKING:
       Inherited from caller.
	
	  Simple resource validation ..
	
	  Get the register base first
 allocate host 
 Cleanup only the initialized ports 
 All the ports have been initialized 
	
	  (Re-)program MBUS remapping windows if we are asked to.
	
	  To allow disk hotplug on Armada 370XP SoCs, the PHY speed must be
	  updated in the LP_PHY_CTL register.
 initialize adapter 
       mv_platform_remove    -       unplug a platform interface
       @pdev: platform device
       A platform bus SATA device has been unplugged. Perform the needed
       cleanup. Also called on module unload for any active devices.
		
		  (Re-)program MBUS remapping windows if we are asked to.
 initialize adapter 
       mv_print_info - Dump key info to kernel log for perusal.
       @host: ATA host to print info about
       FIXME: complete this.
       LOCKING:
       Inherited from caller.
	 Use this to determine the HW stepping of the chip so we know
	  what errata to workaround
       mv_pci_init_one - handle a positive probe of a PCI Marvell host
       @pdev: PCI device found
       @ent: PCI device ID entry for the matched host
       LOCKING:
       Inherited from caller.
 allocate host 
 acquire resources 
 initialize adapter 
 Enable message-switched interrupts, if requested 
 initialize adapter 
 SPDX-License-Identifier: GPL-2.0-or-later
   libata-sff.c - helper library for PCI IDE BMDMA
   Copyright 2003-2006 Red Hat, Inc.  All rights reserved.
   Copyright 2003-2006 Jeff Garzik
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware documentation available from http:www.t13.org and
   http:www.sata-io.org
 	ata_sff_check_status - Read device status reg & clear interrupt
 	@ap: port where the device is
 	Reads ATA taskfile status register for currently-selected device
 	and return its value. This also clears pending interrupts
       from this device
 	LOCKING:
 	Inherited from caller.
 	ata_sff_altstatus - Read device alternate status reg
 	@ap: port where the device is
 	Reads ATA taskfile alternate status register for
 	currently-selected device and return its value.
 	Note: may NOT be used as the check_altstatus() entry in
 	ata_port_operations.
 	LOCKING:
 	Inherited from caller.
 	ata_sff_irq_status - Check if the device is busy
 	@ap: port where the device is
 	Determine if the port is currently busy. Uses altstatus
 	if available in order to avoid clearing shared IRQ status
 	when finding an IRQ source. Non ctl capable devices don't
 	share interrupt lines fortunately for us.
 	LOCKING:
 	Inherited from caller.
 Not us: We are busy 
 Clear INTRQ latch 
 	ata_sff_sync - Flush writes
 	@ap: Port to wait for.
 	CAUTION:
 	If we have an mmio device with no ctl and no altstatus
 	method this will fail. No such devices are known to exist.
 	LOCKING:
 	Inherited from caller.
 	ata_sff_pause		-	Flush writes and wait 400nS
 	@ap: Port to pause for.
 	CAUTION:
 	If we have an mmio device with no ctl and no altstatus
 	method this will fail. No such devices are known to exist.
 	LOCKING:
 	Inherited from caller.
 	ata_sff_dma_pause	-	Pause before commencing DMA
 	@ap: Port to pause for.
 	Perform IO fencing and ensure sufficient cycle delays occur
 	for the HDMA1:0 transition
		 An altstatus read will cause the needed delay without
	 There are no DMA controllers without ctl. BUG here to ensure
	   we never violate the HDMA1:0 transition timing and risk
 	ata_sff_busy_sleep - sleep until BSY clears, or timeout
 	@ap: port containing status register to be polled
 	@tmout_pat: impatience timeout in msecs
 	@tmout: overall timeout in msecs
 	Sleep until ATA Status register bit BSY clears,
 	or a timeout occurs.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
 	ata_sff_wait_ready - sleep until BSY clears, or timeout
 	@link: SFF link to wait ready status for
 	@deadline: deadline jiffies for the operation
 	Sleep until ATA Status register bit BSY clears, or timeout
 	occurs.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
 	ata_sff_set_devctl - Write device control reg
 	@ap: port where the device is
 	@ctl: value to write
 	Writes ATA taskfile device control register.
 	Note: may NOT be used as the sff_set_devctl() entry in
 	ata_port_operations.
 	LOCKING:
 	Inherited from caller.
 	ata_sff_dev_select - Select device 01 on ATA bus
 	@ap: ATA channel to manipulate
 	@device: ATA device (numbered from zero) to select
 	Use the method defined in the ATA specification to
 	make either device 0, or device 1, active on the
 	ATA channel.  Works with both PIO and MMIO.
 	May be used as the dev_select() entry in ata_port_operations.
 	LOCKING:
 	caller.
 needed; also flushes, for mmio 
 	ata_dev_select - Select device 01 on ATA bus
 	@ap: ATA channel to manipulate
 	@device: ATA device (numbered from zero) to select
 	@wait: non-zero to wait for Status register BSY bit to clear
 	@can_sleep: non-zero if context allows sleeping
 	Use the method defined in the ATA specification to
 	make either device 0, or device 1, active on the
 	ATA channel.
 	This is a high-level version of ata_sff_dev_select(), which
 	additionally provides the services of inserting the proper
 	pauses and status polling, where needed.
 	LOCKING:
 	caller.
 	ata_sff_irq_on - Enable interrupts on a port.
 	@ap: Port on which interrupts are enabled.
 	Enable interrupts on a legacy IDE device using MMIO or PIO,
 	wait for idle, clear any pending interrupts.
 	Note: may NOT be used as the sff_irq_on() entry in
 	ata_port_operations.
 	LOCKING:
 	Inherited from caller.
 	ata_sff_tf_load - send taskfile registers to host controller
 	@ap: Port to which output is sent
 	@tf: ATA taskfile register set
 	Outputs ATA taskfile to standard ATA host controller.
 	LOCKING:
 	Inherited from caller.
 	ata_sff_tf_read - input device's ATA taskfile shadow registers
 	@ap: Port from which input is read
 	@tf: ATA taskfile register set for storing input
 	Reads ATA taskfile registers for currently-selected device
 	into @tf. Assumes the device has a fully SFF compliant task file
 	layout and behaviour. If you device does not (eg has a different
 	status method) then you will need to provide a replacement tf_read
 	LOCKING:
 	Inherited from caller.
 	ata_sff_exec_command - issue ATA command to host controller
 	@ap: port to which command is being issued
 	@tf: ATA taskfile register set
 	Issues ATA command, with proper synchronization with interrupt
 	handler  other threads.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_tf_to_host - issue ATA taskfile to host controller
 	@ap: port to which command is being issued
 	@tf: ATA taskfile register set
 	Issues ATA taskfile register set to ATA host controller,
 	with proper synchronization with interrupt handler and
 	other threads.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_sff_data_xfer - Transfer data by PIO
 	@qc: queued command
 	@buf: data buffer
 	@buflen: buffer length
 	@rw: readwrite
 	Transfer data fromto the device data register by PIO.
 	LOCKING:
 	Inherited from caller.
 	RETURNS:
 	Bytes consumed.
 Transfer multiple of 2 bytes 
 Transfer trailing byte, if any. 
 Point buf to the tail of buffer 
		
		  Use io16_rep() accessors here as well to avoid pointlessly
		  swapping bytes to and from on the big endian machines...
 	ata_sff_data_xfer32 - Transfer data by PIO
 	@qc: queued command
 	@buf: data buffer
 	@buflen: buffer length
 	@rw: readwrite
 	Transfer data fromto the device data register by PIO using 32bit
 	IO operations.
 	LOCKING:
 	Inherited from caller.
 	RETURNS:
 	Bytes consumed.
 Transfer multiple of 4 bytes 
 Transfer trailing bytes, if any 
 Point buf to the tail of buffer 
		
		  Use io_rep() accessors here as well to avoid pointlessly
		  swapping bytes to and from on the big endian machines...
 	ata_pio_sector - Transfer a sector of data.
 	@qc: Command on going
 	Transfer qc->sect_size bytes of data fromto the ATA device.
 	LOCKING:
 	Inherited from caller.
 get the current page and offset 
	
	  Split the transfer when it splits a page boundary.  Note that the
	  split still has to be dword aligned like all ATA data transfers.
 	ata_pio_sectors - Transfer one or many sectors.
 	@qc: Command on going
 	Transfer one or many sectors of data fromto the
 	ATA device for the DRQ request.
 	LOCKING:
 	Inherited from caller.
 READWRITE MULTIPLE 
 flush 
 	atapi_send_cdb - Write CDB bytes to hardware
 	@ap: Port to which ATAPI device is attached.
 	@qc: Taskfile currently active
 	When device has indicated its readiness to accept
 	a CDB, this function is called.  Send the CDB.
 	LOCKING:
 	caller.
 send SCSI cdb 
	 FIXME: If the CDB is for DMA do we need to do the transition delay
 initiate bmdma 
 CONFIG_ATA_BMDMA 
 	__atapi_pio_bytes - Transfer data fromto the ATAPI device.
 	@qc: Command on going
 	@bytes: number of bytes
 	Transfer Transfer data fromto the ATAPI device.
 	LOCKING:
 	Inherited from caller.
 get the current page and offset 
 don't overrun current sg 
 don't cross page boundaries 
 do the actual data transfer 
	
	  There used to be a  WARN_ON_ONCE(qc->cursg && count != consumed);
	  Unfortunately __atapi_pio_bytes doesn't know enough to do the WARN
	  check correctly as it doesn't know if it is the last request being
	  made. Somebody should implement a proper sanity check.
 	atapi_pio_bytes - Transfer data fromto the ATAPI device.
 	@qc: Command on going
 	Transfer Transfer data fromto the ATAPI device.
 	LOCKING:
 	Inherited from caller.
	 Abuse qc->result_tf for temp storage of intermediate TF
	  here to save some kernel stack usage.
	  For normal completion, qc->result_tf is not relevant. For
	  error, qc->result_tf is later overwritten by ata_qc_complete().
	  So, the correctness of qc->result_tf is not affected.
 shall be cleared to zero, indicating xfer of data 
 make sure transfer direction matches expected 
 flush 
 	ata_hsm_ok_in_wq - Check if the qc can be handled in the workqueue.
 	@ap: the target ata_port
 	@qc: qc on going
 	RETURNS:
 	1 if ok in workqueue, 0 otherwise.
 	ata_hsm_qc_complete - finish a qc running on standard HSM
 	@qc: Command to complete
 	@in_wq: 1 if called from workqueue, 0 otherwise
 	Finish @qc which is running on standard HSM.
 	LOCKING:
 	If @in_wq is zero, spin_lock_irqsave(host lock).
 	Otherwise, none on entry and grabs host lock.
			 EH might have kicked in while host lock is
			  released.
 	ata_sff_hsm_move - move the HSM to the next state.
 	@ap: the target ata_port
 	@qc: qc on going
 	@status: current device status
 	@in_wq: 1 if called from workqueue, 0 otherwise
 	RETURNS:
 	1 when poll next status needed, 0 otherwise.
	 Make sure ata_sff_qc_issue() does not throw things
	  like DMA polling into the workqueue. Notice that
	  in_wq is not equivalent to (qc->tf.flags & ATA_TFLAG_POLLING).
 Send first data block or PACKET CDB 
		 If polling, we will stay in the work queue after
		  sending the data. Otherwise, interrupt handler
		  takes over after sending the data.
 check device status 
 handle BSY=0, DRQ=0 as error 
 device stops HSM for aborterror 
 HSM violation. Let EH handle this 
		 Device should not ask for data transfer (DRQ=1)
		  when it finds something wrong.
		  We ignore DRQ here and stop the HSM by
		  changing hsm_task_state to HSM_ST_ERR and
		  let the EH abort the command or reset the device.
			 Some ATAPI tape drives forget to clear the ERR bit
			  when doing the next command (mostly request sense).
			  We ignore ERR here to workaround and proceed sending
			  the CDB.
			 PIO data out protocol.
			  send first data block.
			 ata_pio_sectors() might change the state
			  to HSM_ST_LAST. so, the state is changed here
			  before ata_pio_sectors().
 send CDB 
		 if polling, ata_sff_pio_task() handles the rest.
		  otherwise, interrupt handler takes over from here.
 complete command or readwrite the data register 
 ATAPI PIO protocol 
				 No more data to transfer or device error.
				  Device error will be tagged in HSM_ST_LAST.
			 Device should not ask for data transfer (DRQ=1)
			  when it finds something wrong.
			  We ignore DRQ here and stop the HSM by
			  changing hsm_task_state to HSM_ST_ERR and
			  let the EH abort the command or reset the device.
 bad ireason reported by device 
 ATA PIO protocol 
 handle BSY=0, DRQ=0 as error 
 device stops HSM for aborterror 
					 If diagnostic failed and this is
					  IDENTIFY, it's likely a phantom
					  device.  Mark hint.
					 HSM violation. Let EH handle this.
					  Phantom devices also trigger this
					  condition.  Mark hint.
			 For PIO reads, some devices may ask for
			  data transfer (DRQ=1) alone with ERR=1.
			  We respect DRQ here and transfer one
			  block of junk data before changing the
			  hsm_task_state to HSM_ST_ERR.
			 
			  For PIO writes, ERR=1 DRQ=1 doesn't make
			  sense since the data block has been
			  transferred to the device.
 data might be corrputed 
				 There are oddball controllers with
				  status register stuck at 0x7f and
				  lbalmh at zero which makes it
				  pass all other presence detection
				  mechanisms we have.  Set NODEV_HINT
				  for it.  Kernel bz#7241.
				 ata_pio_sectors() might change the
				  state to HSM_ST_LAST. so, the state
				  is changed after ata_pio_sectors().
 all data read 
 no more data to transfer 
 complete taskfile transaction 
 complete taskfile transaction 
 may fail if ata_sff_flush_pio_task() in progress 
	
	  We wanna reset the HSM state to IDLE.  If we do so without
	  grabbing the port lock, critical sections protected by it which
	  expect the HSM state to stay stable may get surprised.  For
	  example, we may set IDLE in between the time
	  __ata_sff_port_intr() checks for HSM_ST_IDLE and before it calls
	  ata_sff_hsm_move() causing ata_sff_hsm_move() to BUG().
 qc can be NULL if timeout occurred 
	
	  This is purely heuristic.  This is a fast path.
	  Sometimes when we enter, BSY will be cleared in
	  a chk-status or two.  If not, the drive is probably seeking
	  or something.  Snooze for a couple msecs, then
	  chk-status again.  If still busy, queue delayed work.
	
	  hsm_move() may trigger another command to be processed.
	  clean the link beforehand.
 move the HSM 
	 another command or interrupt handler
	  may be running at this point.
 	ata_sff_qc_issue - issue taskfile to a SFF controller
 	@qc: command to issue to device
 	This function issues a PIO or NODATA command to a SFF
 	controller.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Zero on success, AC_ERR_ mask on failure
	 Use polling pio if the LLD doesn't handle
	  interrupt driven pio and atapi CDB interrupt.
 select the device 
 start the command 
 PIO data out protocol 
			 always send first data block using the
			  ata_sff_pio_task() codepath.
 PIO data in protocol 
			 if polling, ata_sff_pio_task() handles the
			  rest.  otherwise, interrupt handler takes
			  over from here.
 send cdb by polling if no cdb interrupt 
 	ata_sff_qc_fill_rtf - fill result TF using ->sff_tf_read
 	@qc: qc to fill result TF for
 	@qc is finished and result TF needs to be filled.  Fill it
 	using ->sff_tf_read.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	true indicating that result TF is successfully filled.
 irq not handled 
 Check whether we are expecting interrupt in this state 
		 Some pre-ATAPI-4 devices assert INTRQ
		  at this state when ready to receive CDB.
		 Check the ATA_DFLAG_CDB_INTR flag is enough here.
		  The flag was turned on only for atapi devices.  No
		  need to check ata_is_atapi(qc->tf.protocol) again.
 check main status, clearing INTRQ if needed 
 BMDMA engine is already stopped, we're screwed 
 clear irq events 
 irq handled 
 	ata_sff_port_intr - Handle SFF port interrupt
 	@ap: Port on which interrupt arrived (possibly...)
 	@qc: Taskfile currently active in engine
 	Handle port interrupt for given queued command.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	One if interrupt was handled, zero if not (shared irq).
 TODO: make _irqsave conditional on x86 PCI IDE legacy mode 
	
	  If no port was expecting IRQ but the controller is actually
	  asserting IRQ line, nobody cared will ensue.  Check IRQ
	  pending status if available and clear spurious IRQ.
 clear INTRQ and check if BUSY cleared 
				
				  With command in flight, we can't do
				  sff_irq_clear() wo racing with completion.
 	ata_sff_interrupt - Default SFF ATA host interrupt handler
 	@irq: irq line (unused)
 	@dev_instance: pointer to our ata_host information structure
 	Default interrupt handler for PCI IDE devices.  Calls
 	ata_sff_port_intr() for each port that is not disabled.
 	LOCKING:
 	Obtains host lock during operation.
 	RETURNS:
 	IRQ_NONE or IRQ_HANDLED.
 	ata_sff_lost_interrupt	-	Check for an apparent lost interrupt
 	@ap: port that appears to have timed out
 	Called from the libata error handlers when the core code suspects
 	an interrupt has been lost. If it has complete anything we can and
 	then return. Interface must support altstatus for this faster
 	recovery to occur.
 	Locking:
 	Caller holds host lock
 Only one outstanding command per SFF channel 
 We cannot lose an interrupt on a non-existent or polled command 
	 See if the controller thinks it is still busy - if so the command
	 There was a command running, we are no longer busy and we have
	 Run the host interrupt logic as if the interrupt had not been
 	ata_sff_freeze - Freeze SFF controller port
 	@ap: port to freeze
 	Freeze SFF controller port.
 	LOCKING:
 	Inherited from caller.
	 Under certain circumstances, some controllers raise IRQ on
	  ATA_NIEN manipulation.  Also, many controllers fail to mask
	  previously pending IRQ on ATA_NIEN assertion.  Clear it.
 	ata_sff_thaw - Thaw SFF controller port
 	@ap: port to thaw
 	Thaw SFF controller port.
 	LOCKING:
 	Inherited from caller.
 clear & re-enable interrupts 
 	ata_sff_prereset - prepare SFF link for reset
 	@link: SFF link to be reset
 	@deadline: deadline jiffies for the operation
 	SFF link @link is about to be reset.  Initialize it.  It first
 	calls ata_std_prereset() and wait for !BSY if the port is
 	being softreset.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, -errno otherwise.
 if we're about to do hardreset, nothing more to do 
 wait for !BSY if we don't know that no device is attached 
 	ata_devchk - PATA device presence detection
 	@ap: ATA channel to examine
 	@device: Device to examine (starting at zero)
 	This technique was originally described in
 	Hale Landis's ATADRVR (www.ata-atapi.com), and
 	later found its way into the ATAATAPI spec.
 	Write a pattern to the ATA shadow registers,
 	and if a device is present, it will respond by
 	correctly storing and echoing back the
 	ATA shadow register contents.
 	LOCKING:
 	caller.
 we found a device 
 nothing found 
 	ata_sff_dev_classify - Parse returned ATA device signature
 	@dev: ATA device to classify (starting at zero)
 	@present: device seems present
 	@r_err: Value of error register on completion
 	After an event -- SRST, E.D.D., or SATA COMRESET -- occurs,
 	an ATAATAPI-defined set of values is placed in the ATA
 	shadow registers, indicating the results of device detection
 	and diagnostics.
 	Select the ATA device, and read the values from the ATA shadow
 	registers.  Then parse according to the Error register value,
 	and the spec-defined values examined by ata_dev_classify().
 	LOCKING:
 	caller.
 	RETURNS:
 	Device type - %ATA_DEV_ATA, %ATA_DEV_ATAPI or %ATA_DEV_NONE.
 see if device passed diags: continue and warn later 
 diagnostic fail : do nothing _YET_ 
 do nothing  ;
 do nothing  ;
 determine if device is ATA or ATAPI 
		 If the device failed diagnostic, it's likely to
		  have reported incorrect device signature too.
		  Assume ATA device if the device seems present but
		  device signature is invalid with diagnostic
		  failure.
 	ata_sff_wait_after_reset - wait for devices to become ready after reset
 	@link: SFF link which is just reset
 	@devmask: mask of present devices
 	@deadline: deadline jiffies for the operation
 	Wait devices attached to SFF @link to become ready after
 	reset.  It contains preceding 150ms wait to avoid accessing TF
 	status register too early.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -ENODEV if some or all of devices in @devmask
 	don't seem to exist.  -errno on other errors.
 always check readiness of the master device 
	 -ENODEV means the odd clown forgot the D7 pulldown resistor
	  and TF status is 0xff, bail out on it too.
	 if device 1 was found in ata_devchk, wait for register
	  access briefly, then wait for BSY to clear.
		 Wait for register access.  Some ATAPI devices fail
		  to set nsectlbal after reset, so don't waste too
		  much time on it.  We're gonna wait for !BSY anyway.
 give drive a breather 
 is all this really necessary? 
 software reset.  causes dev0 to be selected 
 FIXME: flush 
 FIXME: flush 
 wait the port to become ready 
 	ata_sff_softreset - reset host port via ATA SRST
 	@link: ATA link to reset
 	@classes: resulting classes of attached devices
 	@deadline: deadline jiffies for the operation
 	Reset host port using ATA SRST.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, -errno otherwise.
 determine if device 01 are present 
 select device 0 again 
 issue bus reset 
 if link is occupied, -ENODEV too is an error 
 determine by signature whether we have ATA or ATAPI devices 
 	sata_sff_hardreset - reset host port via SATA phy reset
 	@link: link to reset
 	@class: resulting class of attached device
 	@deadline: deadline jiffies for the operation
 	SATA phy-reset host port using DET bits of SControl register,
 	wait for !BSY and classify the attached device.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, -errno otherwise.
 	ata_sff_postreset - SFF postreset callback
 	@link: the target SFF ata_link
 	@classes: classes of attached devices
 	This function is invoked after a successful reset.  It first
 	calls ata_std_postreset() and performs SFF specific postreset
 	processing.
 	LOCKING:
 	Kernel thread context (may sleep)
 is double-select really necessary? 
 bail out if no device is present 
 set up device control 
 	ata_sff_drain_fifo - Stock FIFO drain logic for SFF controllers
 	@qc: command
 	Drain the FIFO and device of any stuck data following a command
 	failing to complete. In some cases this is necessary before a
 	reset will recover the device.
 We only need to flush incoming data when a command was running 
 Drain up to 64K of data before we give up this recovery method 
 Can become DEBUG later 
 	ata_sff_error_handler - Stock error handler for SFF controller
 	@ap: port to handle error for
 	Stock error handler for SFF controller.  It can handle both
 	PATA and SATA controllers.  Many controllers should be able to
 	use this EH as-is or with some added handling before and
 	after.
 	LOCKING:
 	Kernel thread context (may sleep)
	
	  We MUST do FIFO draining before we issue a reset as
	  several devices helpfully clear their internal state and
	  will lock solid if we touch the data port post reset. Pass
	  qc in case anyone wants to do different PIODMA recovery or
	  has per command fixups
 ignore built-in hardresets if SCR access is not available 
 	ata_sff_std_ports - initialize ioaddr with standard port offsets.
 	@ioaddr: IO address structure to be initialized
 	Utility function which initializes data_addr, error_addr,
 	feature_addr, nsect_addr, lbal_addr, lbam_addr, lbah_addr,
 	device_addr, status_addr, and command_addr to standard offsets
 	relative to cmd_addr.
 	Does not set ctl_addr, altstatus_addr, bmdma_addr, or scr_addr.
 Check the PCI resources for this channel are enabled 
 	ata_pci_sff_init_host - acquire native PCI ATA resources and init host
 	@host: target ATA host
 	Acquire native PCI ATA resources for @host and initialize the
 	first two ports of @host accordingly.  Ports marked dummy are
 	skipped and allocation failure makes the port dummy.
 	Note that native PCI resources are valid even for legacy hosts
 	as we fix up pdev resources array early in boot, so this
 	function can be used for both native and legacy SFF hosts.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 	RETURNS:
 	0 if at least one port is initialized, -ENODEV if no port is
 	available.
 request, iomap BARs and init port addresses accordingly 
		 Discard disabled ports.  Some controllers show
		  their unused channels this way.  Disabled ports are
		  made dummy.
 	ata_pci_sff_prepare_host - helper to prepare PCI PIO-only SFF ATA host
 	@pdev: target PCI device
 	@ppi: array of port_info, must be enough for two ports
 	@r_host: out argument for the initialized ATA host
 	Helper to allocate PIO-only SFF ATA host for @pdev, acquire
 	all PCI resources and initialize it accordingly in one go.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
 	ata_pci_sff_activate_host - start SFF host, request IRQ and register it
 	@host: target SFF ATA host
 	@irq_handler: irq_handler used when requesting IRQ(s)
 	@sht: scsi_host_template to use when registering the host
 	This is the counterpart of ata_host_activate() for SFF ATA
 	hosts.  This separate helper is necessary because SFF hosts
 	use two separate interrupts in legacy mode.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
		
		  ATA spec says we should use legacy mode when one
		  port is in legacy mode, but disabled ports on some
		  PCI hosts appear as fixed legacy ports, e.g SB600700
		  on which the secondary port is not wired, so
		  ignore ports that are marked as 'dummy' during
		  this check
 look up the first valid port_info 
 prepare and activate BMDMA host 
 prepare and activate SFF host 
 	ata_pci_sff_init_one - Initializeregister PIO-only PCI IDE controller
 	@pdev: Controller to be initialized
 	@ppi: array of port_info, must be enough for two ports
 	@sht: scsi_host_template to use when registering the host
 	@host_priv: host private_data
 	@hflag: host flags
 	This is a helper function which can be called from a driver's
 	xxx_init_one() probe function if the hardware uses traditional
 	IDE taskfile registers and is PIO only.
 	ASSUMPTION:
 	Nobody makes a single channel controller that appears solely as
 	the secondary legacy port on PCI.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, negative on errno-based value on error.
 CONFIG_PCI 
 	BMDMA support
 	ata_bmdma_fill_sg - Fill PCI IDE PRD table
 	@qc: Metadata associated with taskfile to be transferred
 	Fill PCI IDE PRD (scatter-gather) table with segments
 	associated with the current disk command.
 	LOCKING:
 	spin_lock_irqsave(host lock)
		 determine if physical DMA addr spans 64K boundary.
		  Note hw doesn't support 64-bit, so we unconditionally
		  truncate dma_addr_t to u32.
 	ata_bmdma_fill_sg_dumb - Fill PCI IDE PRD table
 	@qc: Metadata associated with taskfile to be transferred
 	Fill PCI IDE PRD (scatter-gather) table with segments
 	associated with the current disk command. Perform the fill
 	so that we avoid writing any length 64K records for
 	controllers that don't follow the spec.
 	LOCKING:
 	spin_lock_irqsave(host lock)
		 determine if physical DMA addr spans 64K boundary.
		  Note hw doesn't support 64-bit, so we unconditionally
		  truncate dma_addr_t to u32.
				 Some PATA chipsets like the CS5530 can't
				   cope with 0x0000 meaning 64K as the spec
 	ata_bmdma_qc_prep - Prepare taskfile for submission
 	@qc: Metadata associated with taskfile to be prepared
 	Prepare ATA taskfile for submission.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_bmdma_dumb_qc_prep - Prepare taskfile for submission
 	@qc: Metadata associated with taskfile to be prepared
 	Prepare ATA taskfile for submission.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_bmdma_qc_issue - issue taskfile to a BMDMA controller
 	@qc: command to issue to device
 	This function issues a PIO, NODATA or DMA command to a
 	SFFBMDMA controller.  PIO and NODATA are handled by
 	ata_sff_qc_issue().
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Zero on success, AC_ERR_ mask on failure
 defer PIO handling to sff_qc_issue 
 select the device 
 start the command 
 load tf registers 
 set up bmdma 
 initiate bmdma 
 load tf registers 
 set up bmdma 
 send cdb by polling if no cdb interrupt 
 	ata_bmdma_port_intr - Handle BMDMA port interrupt
 	@ap: Port on which interrupt arrived (possibly...)
 	@qc: Taskfile currently active in engine
 	Handle port interrupt for given queued command.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	One if interrupt was handled, zero if not (shared irq).
 check status of DMA engine 
 if it's not our irq... 
 before we do anything else, clear DMA-Start bit 
 error when transferring data tofrom memory 
 	ata_bmdma_interrupt - Default BMDMA ATA host interrupt handler
 	@irq: irq line (unused)
 	@dev_instance: pointer to our ata_host information structure
 	Default interrupt handler for PCI IDE devices.  Calls
 	ata_bmdma_port_intr() for each port that is not disabled.
 	LOCKING:
 	Obtains host lock during operation.
 	RETURNS:
 	IRQ_NONE or IRQ_HANDLED.
 	ata_bmdma_error_handler - Stock error handler for BMDMA controller
 	@ap: port to handle error for
 	Stock error handler for BMDMA controller.  It can handle both
 	PATA and SATA controllers.  Most BMDMA controllers should be
 	able to use this EH as-is or with some added handling before
 	and after.
 	LOCKING:
 	Kernel thread context (may sleep)
 reset PIO HSM and stop DMA engine 
		 BMDMA controllers indicate host bus error by
		  setting DMA_ERR bit and timing out.  As it wasn't
		  really a timeout event, adjust error mask and
		  cancel frozen state.
 if we're gonna thaw, make sure IRQ is clear 
 	ata_bmdma_post_internal_cmd - Stock post_internal_cmd for BMDMA
 	@qc: internal command to clean up
 	LOCKING:
 	Kernel thread context (may sleep)
 	ata_bmdma_irq_clear - Clear PCI IDE BMDMA interrupt.
 	@ap: Port associated with this ATA transaction.
 	Clear interrupt and error flags in DMA status register.
 	May be used as the irq_clear() entry in ata_port_operations.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_bmdma_setup - Set up PCI IDE BMDMA transaction
 	@qc: Info associated with this ATA transaction.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 load PRD table addr. 
 make sure PRD table writes are visible to controller 
 specify data direction, triple-check start bit is clear 
 issue rw command 
 	ata_bmdma_start - Start a PCI IDE BMDMA transaction
 	@qc: Info associated with this ATA transaction.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 start host DMA transaction 
	 Strictly, one may wish to issue an ioread8() here, to
	  flush the mmio write.  However, control also passes
	  to the hardware at this point, and it will interrupt
	  us when we are to resume control.  So, in effect,
	  we don't care when the mmio write flushes.
	  Further, a read of the DMA status register _immediately_
	  following the write may not be what certain flaky hardware
	  is expected, so I think it is best to not add a readb()
	  without first all the MMIO ATA cardsmobos.
	  Or maybe I'm just being paranoid.
	 
	  FIXME: The posting of this write means IO starts are
	  unnecessarily delayed for MMIO
 	ata_bmdma_stop - Stop PCI IDE BMDMA transfer
 	@qc: Command we are ending DMA for
 	Clears the ATA_DMA_START flag in the dma control register
 	May be used as the bmdma_stop() entry in ata_port_operations.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 clear startstop bit 
 one-PIO-cycle guaranteed wait, per spec, for HDMA1:0 transition 
 	ata_bmdma_status - Read PCI IDE BMDMA status
 	@ap: Port associated with this ATA transaction.
 	Read and return BMDMA status register.
 	May be used as the bmdma_status() entry in ata_port_operations.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	ata_bmdma_port_start - Set port up for bmdma.
 	@ap: Port to initialize
 	Called just after data structures for each port are
 	initialized.  Allocates space for PRD table.
 	May be used as the port_start() entry in ata_port_operations.
 	LOCKING:
 	Inherited from caller.
 	ata_bmdma_port_start32 - Set port up for dma.
 	@ap: Port to initialize
 	Called just after data structures for each port are
 	initialized.  Enables 32bit PIO and allocates space for PRD
 	table.
 	May be used as the port_start() entry in ata_port_operations for
 	devices that are capable of 32bit PIO.
 	LOCKING:
 	Inherited from caller.
 	ata_pci_bmdma_clear_simplex -	attempt to kick device out of simplex
 	@pdev: PCI device
 	Some PCI ATA devices report simplex mode but in fact can be told to
 	enter non simplex mode. This implements the necessary logic to
 	perform the task on such devices. Calling it on other devices will
 	have -undefined- behaviour.
 	ata_pci_bmdma_init - acquire PCI BMDMA resources and init ATA host
 	@host: target ATA host
 	Acquire PCI BMDMA resources and initialize @host accordingly.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 No BAR4 allocation: No DMA 
	
	  Some controllers require BMDMA region to be initialized
	  even if DMA is not in use to clear IRQ status via
	  ->sff_irq_clear method.  Try to initialize bmdma_addr
	  regardless of dma masks.
 request and iomap DMA region 
 	ata_pci_bmdma_prepare_host - helper to prepare PCI BMDMA ATA host
 	@pdev: target PCI device
 	@ppi: array of port_info, must be enough for two ports
 	@r_host: out argument for the initialized ATA host
 	Helper to allocate BMDMA ATA host for @pdev, acquire all PCI
 	resources and initialize it accordingly in one go.
 	LOCKING:
 	Inherited from calling layer (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
 	ata_pci_bmdma_init_one - Initializeregister BMDMA PCI IDE controller
 	@pdev: Controller to be initialized
 	@ppi: array of port_info, must be enough for two ports
 	@sht: scsi_host_template to use when registering the host
 	@host_priv: host private_data
 	@hflags: host flags
 	This function is similar to ata_pci_sff_init_one() but also
 	takes care of BMDMA initialization.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, negative on errno-based value on error.
 CONFIG_PCI 
 CONFIG_ATA_BMDMA 
 	ata_sff_port_init - Initialize SFFBMDMA ATA port
 	@ap: Port to initialize
 	Called on port allocation to initialize SFFBMDMA specific
 	fields.
 	LOCKING:
 	None.
 SPDX-License-Identifier: GPL-2.0-only
    pata-isapnp.c - ISA PnP PATA controller driver.
    Copyright 20052006 Red Hat Inc, all rights reserved.
    Based in part on ide-pnp.c by Andrey Panin <pazke@donpac.ru>
 No altstatus so we don't want to use the lost interrupt poll 
 	isapnp_init_one		-	attach an isapnp interface
 	@idev: PnP device
 	@dev_id: matching detect line
 	Register an ISA bus IDE interface. Such interfaces are PIO 0 and
 	non shared IRQ.
 allocate host 
 acquire resources and fill host 
 activate 
 	isapnp_remove_one	-	unplug an isapnp interface
 	@idev: PnP device
 	Remove a previously configured PnP ATA port. Called only on module
 	unload events as the core does not currently deal with ISAPnP docking.
 Generic ESDIIDEATA compatible hard disk controller 
 SPDX-License-Identifier: GPL-2.0-or-later
   pdc_adma.c - Pacific Digital Corporation ADMA
   Maintained by:  Tejun Heo <tj@kernel.org>
   Copyright 2005 Mark Lord
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Supports ATA disks in single-packet ADMA mode.
   Uses PIO for everything else.
   TODO:  Use ADMA transfers for ATAPI devices, when possible.
   This requires careful attention to a number of quirks of the chip.
 macro to calculate base address for ATA regs 
 macro to calculate base address for ADMA regs 
 macro to obtain addresses from ata_port 
 global register offsets 
 per-channel register offsets 
 ADMA control 
 ADMA status 
 CPB count 
 current CPB address 
 next CPB address 
 CPB lookup table 
 input FIFO threshold 
 output FIFO threshold 
 ADMA_CONTROL register bits 
 irq mask: 1==masked 
 packet trigger ("Go!") 
 ADMA logic reset 
 PIO mode 4 
 ADMA_STATUS register bits 
 CPB bits 
 PRD bits 
 ATA register flags 
 ATA register addresses 
 PCI device IDs 
 ADMA 2-port controller 
 board_1841_idx 
 terminate list 
 ATAPI DMA not yet supported 
 reset ADMA to idle state 
 maskclear ATA interrupts 
 reset the ADMA engine 
 set in-FIFO threshold to 0x100 
 set CPB pointer 
 set out-FIFO threshold to 0x100 
 set CPB count 
 readdiscard ADMA status 
 flush 
 maskclear ATA interrupts 
 reset ADMA to idle state 
 healthy paranoia 
 pPKLW 
 reserved 
 Response flags 
 reserved 
 cLEN, gets filled in below 
 cNCPB 
 cNCPB 
 cPRD, gets filled in below 
 reserved 
 reserved 
 reserved 
 reserved 
 ATA registers; must be a multiple of 4 
 cLEN 
 cPRD 
 flush PRDs and pkt to memory 
 dump out CPB + PRDs for debug 
 fire up the ADMA engine 
 check main status, clearing INTRQ 
 complete taskfile transaction 
 paranoia? 
 enablelock aGO operation 
 reset the ADMA logic 
 alloc host 
 acquire resources and fill host 
 initialize adapter 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Xilinx, Inc.
  CEVA AHCI SATA platform driver
  based on the AHCI SATA platform driver by Jeff Garzik and Anton Vorontsov
 Vendor Specific Register Offsets 
 Vendor Specific Register bit definitions 
 Register bit definitions for cache control 
 Port Control Register Bit Definitions 
 Port Phy2Cfg Register 
 Axi Cache Control Register 
	
	  Since CEVA controller does not support device sleep feature, we
	  need to clear DEVSLP (bit 8) in word78 of the IDENTIFY DEVICE data.
 Set AHCI Enable 
 TPSS TPRS scalars, CISE and Port Addr 
		
		  AXI Data bus width to 64
		  Set Mem Addr Read, Write ID for data transfers
		  Set Mem Addr Read ID, Write ID for non-data transfers
		  Transfer limit to 72 DWord
 Set AXI cache control register if CCi is enabled 
 Port Phy Cfg register enables 
 Phy Control OOB timing parameters COMINIT 
 Phy Control OOB timing parameters COMWAKE 
 Phy Control Burst timing setting 
 Rate Change Timer and Retry Interval Timer setting 
 Rx Watermark setting  
 Default to Gen 3 Speed and Gen 1 if Gen2 is broken 
 Assert the controller reset 
 De-assert the controller reset 
 Read OOB timing value for COMINIT from device-tree 
 Read OOB timing value for COMWAKE from device-tree
 Read phy BURST timing value from device-tree 
 Read phy RETRY interval timing value from device-tree 
	
	  Check if CCI is enabled for SATA. The DEV_DMA_COHERENT is returned
	  if CCI is enabled, so check for DEV_DMA_COHERENT.
 CEVA specific initialization 
 Configure CEVA specific config before resuming HBA 
 We resumed so update PM runtime state 
 SPDX-License-Identifier: GPL-2.0-or-later
   sata_promise.c - Promise SATA
   Maintained by:  Tejun Heo <tj@kernel.org>
 		    Mikael Pettersson
   		    Please ALWAYS copy linux-ide@vger.kernel.org
 		    on emails.
   Copyright 2003-2004 Red Hat, Inc.
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware information only available under NDA.
 -1 for ASIC PRD bug workaround 
 host register offsets (from host->iomap[PDC_MMIO_BAR]) 
 Mask of asserted SEQ INTs 
 Flash control register 
 PCI controlstatus reg 
 SATA Plug controlstatus reg 
 SATAII Plug controlstatus reg 
 TBG mode (not SATAII) 
 slew rate control reg (not SATAII) 
 per-port ATA register offsets (from ap->ioaddr.cmd_addr) 
 FeatureError reg (per port) 
 Sector count reg (per port) 
 Sector number reg (per port) 
 Cylinder low reg (per port) 
 Cylinder high reg (per port) 
 DeviceHead reg (per port) 
 Commandstatus reg (per port) 
 Alternate-statusdevice-control reg (per port) 
 Command packet pointer addr 
 Global controlstatus (per port) 
 IDE control and status (per port) 
 per-port SATA register offsets (from ap->ioaddr.scr_addr) 
 also used for PATA 
 also used for PATA 
 PDC_FPDMA_CTLSTAT bit definitions 
 PDC_GLOBAL_CTL bit definitions 
 PCI error while loading packet 
 PCI error while loading SG table 
 PCI error while loading data 
 host bus timeout 
 error during SATA DATA FIS transmission 
 DMA DATA FIS size differs from SG count 
 SG byte count larger than HD requires 
 SG byte count less than HD requires 
 drive error 
 PCI system error 
 PCI parity error (from SATA150 driver) 
 FastTrak S150 TX2plus 
 FastTrak S150 TX2plus PATA port 
 FastTrak S150 TX4 
 FastTrak TX4000 
 SATAII150 Tx2plus 
 SATAII150 Tx2plus PATA port 
 SATAII150 Tx4 
 PDC2037520575 has PATA 
 Sequence counter control registers bit definitions 
 Sequence Interrupt Mask 
 Feature register values 
 ATAPI data xfer by PIO 
 ATAPI data xfer by DMA 
 DeviceHead register values 
 DeviceHead value for SATA devices 
 PDC_CTLSTAT bit definitions 
 HDMA reset 
 ap->flags bits 
 supports SATA + PATA 
 4 ports 
 First-generation chips need a more restrictive ->check_atapi_dma op,
 terminate list 
 we use the same prd table as bmdma, allocate it 
 fix up PHYMODE4 align timing 
 set bits 1:0 = 0:1 
	 It's not allowed to write to the entire FPDMA_CTLSTAT register
 flush 
 flush 
 flush 
 check not at ASIC packet command phase 
 flush 
	 set control bits (byte 0), zero delay seq id (byte 3),
	  and seq id (byte 2)
 SG table addr 
 no next-packet 
 select drive 
 once more, waiting for BSY to clear 
 set feature and byte counter registers 
 send ATAPI packet command 0xA0 
 select drive and check DRQ 
 we can represent cdb lengths 246810121416 
 append the CDB as the final part 
 	pdc_fill_sg - Fill PCI IDE PRD table
 	@qc: Metadata associated with taskfile to be transferred
 	Fill PCI IDE PRD (scatter-gather) table with segments
 	associated with the current disk command.
 	Make sure hardware does not choke on it.
 	LOCKING:
 	spin_lock_irqsave(host lock)
		 determine if physical DMA addr spans 64K boundary.
		  Note hw doesn't support 64-bit, so we unconditionally
		  truncate dma_addr_t to u32.
 flush 
	 Disable hotplug events on this port.
	 
	  Locking:
	  1) hotplug register accesses must be serialised via host->lock
	  2) ap->lock == &ap->host->lock
	  3) ->freeze() and ->thaw() are called with ap->lock held
 flush 
 clear IRQ 
 turn IRQ back on 
 flush 
	 Enable hotplug events on this port.
	  Locking: see pdc_sata_freeze().
 flush 
 ata_mmio == host_mmio + 0x200 + ata_no  0x80 
 flush 
 flush 
 hotplug IRQs should have been masked by pdc_sata_freeze() 
	 sata_promise can't reliably acquire the first D2H Reg FIS
	  after hardreset.  Do non-waiting hardreset and request
	  follow-up SRST.
 make DMA engine forget about the failed command 
 read and clear hotplug flags for all ports 
 clear uninteresting bits 
 reading should also clear interrupts 
 only 16 SEQIDs possible 
 check for a plug or unplug event 
 check for a packet interrupt 
 flush 
 flush PRD, pkt writes 
 flush 
 atapi dma off by default 
 Whitelist commands that may use DMA. 
 READ_DVD_STRUCTURE 
 READ_CD 
 -45150 (FFFF4FA2) to -1 (FFFFFFFF) shall use PIO mode 
 First generation chips cannot use ATAPI DMA on SATA ports 
	
	  Except for the hotplug stuff, this is voodoo from the
	  Promise driver.  Label this entire section
	  "TODO: figure out why we do this"
 enable BMR_BURST, maybe change FIFO_SHD to 8 dwords 
 bit 13 (enable bmr burst) 
 bit 16 (fifo threshold at 8 dw) 
 clear plugunplug flags for all ports 
 unmask plugunplug ints 
 mask plugunplug ints 
 don't initialise TBG or SLEW on 2nd generation chips 
 reduce TBG clock to 133 Mhz. 
 clear bit 17, 16
 set bit 17:16 = 0:1 
 flush 
 adjust slew rate control register. 
 clear bit 11 ~ 6 
 set bit 11-9 = 100b , bit 8-6 = 100 
 enable and acquire resources 
 determine port configuration and setup host 
 initialize adapter 
 start host, request IRQ and attach 
 SPDX-License-Identifier: GPL-2.0-or-later
  Freescale QorIQ AHCI SATA platform driver
  Copyright 2015 Freescale, Inc.
    Tang Yuantian <Yuantian.Tang@freescale.com>
 port register definition 
 port register default value 
 for ls1021a 
	
	  There is a errata on ls1021a Rev1.0 and Rev2.0 which is:
	  A-009042: The device detection initialization sequence
	  mistakenly resets some registers.
	 
	  Workaround for this is:
	  The software should read and store PxCMD and PxIS values
	  before issuing the device detection initialization sequence.
	  After the sequence is complete, software should restore the
	  PxCMD and PxIS with the stored values.
 clear D2H reception area to properly wait for D2H FIS 
 restore the PxCMD and PxIS on ls1021 
 We resumed so update PM runtime state 
 SPDX-License-Identifier: GPL-2.0-only
  pata_amd.c 	- AMD PATA for new ATA layer
 			  (C) 2005-2006 Red Hat Inc
   Based on pata-sil680. Errata information is taken from data sheets
   and the amd74xx.c driver by Vojtech Pavlik. Nvidia SATA devices are
   claimed by sata-nv.c.
   TODO:
 	Variable system clock whenif it makes sense
 	Power management on ports
   Documentation publicly available.
 	timing_setup		-	shared timing computation and load
 	@ap: ATA port being set up
 	@adev: drive being configured
 	@offset: port offset
 	@speed: target speed
 	@clock: clock multiplier (number of times 33MHz for this part)
 	Perform the actual timing set up for Nvidia or AMD PATA devices.
 	The actual devices vary so they all call into this helper function
 	providing the clock multipler and offset (because AMD and Nvidia put
 	the ports at different locations).
 KHz. 
 This may be over conservative 
	
	 	Now do the setup work
 Configure the address set up timing 
 Configure the 8bit IO timing 
 Drive timing 
 UDMA timing 
 	amd_pre_reset		-	perform reset handling
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Reset sequence checking enable bits to see which ports are
 	active.
 	amd_cable_detect	-	report cable type
 	@ap: port
 	AMD controllerBIOS setups record the cable type in word 0x42
 	amd_fifo_setup		-	set the PIO FIFO for ATAATAPI
 	@ap: ATA interface
 	Set the PCI fifo for this device according to the devices present
 	on the bus at this point in time. We need to turn the post write buffer
 	off for ATAPI devices as we may need to issue a word sized write to the
 	device as the final IO
 FIFO is broken 
 On the later chips the read prefetch bits become no-op bits 
 	amd33_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program the AMD registers for PIO mode.
 	amd33_set_dmamode	-	set initial DMA mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program the MWDMAUDMA modes for the AMD and Nvidia
 	chipset.
 Both host-side and drive-side detection results are worthless on NV
  PATAs.  Ignore them and just follow what BIOS configured.  Both the
  current configuration in PCI config reg and ACPI GTM result are
  cached during driver attach and are consulted to select transfer
  mode.
 find out what BIOS configured 
 consult ACPI GTM too 
 be optimistic, EH can take care of things if something goes wrong 
	 If PIO or DMA isn't configured at all, don't limit.  Let EH
	  handle it.
	 PIO4, MWDMA2, UDMA2 should always be supported regardless of
 	nv_pre_reset	-	cable detection
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Perform cable detection. The BIOS stores this in PCI config
 	space for us.
 	nv100_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program the AMD registers for PIO mode.
 	nv100_set_dmamode	-	set initial DMA mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program the MWDMAUDMA modes for the AMD and Nvidia
 	chipset.
 restore PCI config register 0x60 
	 Disable the FIFO, the FIFO logic will re-enable it as
 0: AMD 7401 - no swdma 
 1: Early AMD7409 - no swdma 
 2: AMD 7409 
 3: AMD 7411 
 4: AMD 7441 
 5: AMD 8111 - no swdma 
 6: AMD 8111 UDMA 100 (Serenade) - no swdma 
 7: Nvidia Nforce 
 8: Nvidia Nforce2 and later - no swdma 
 9: AMD CS5536 (Geode companion) 
 Check for AMD7409 without swdma errata and if found adjust type 
 Serenade ? 
 UDMA 100 only 
	
	  Okay, type is determined now.  Apply type-specific workarounds.
	 Cable detection on Nvidia chips doesn't work too well,
	  cache BIOS programmed UDMA mode.
 And fire it up 
 SPDX-License-Identifier: GPL-2.0-only
  pata_atiixp.c 	- ATI PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
 			  (C) 2009-2010 Bartlomiej Zolnierkiewicz
  Based on
   linuxdriversidepciatiixp.c	Version 0.01-bart2	Feb. 26, 2004
   Copyright (C) 2003 ATI Inc. <hyu@ati.com>
   Copyright (C) 2004 Bartlomiej Zolnierkiewicz
 Board has onboard PATA<->SATA converters 
	 Hack from driversidepci. Really we want to know how to do the
 	atiixp_prereset	-	perform reset handling
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Reset sequence checking enable bits to see which ports are
 	active.
 	atiixp_set_pio_timing	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	@pio: Requested PIO
 	Called by both the pio and dma setup functions to set the controller
 	timings for PIO transfers. We must load both the mode number and
 	timing values into the controller.
 	atiixp_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Called to do the PIO mode setup. We use a shared helper for this
 	as the DMA setup must also adjust the PIO timing information.
 	atiixp_set_dmamode	-	set initial DMA mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Called to do the DMA mode setup. We use timing tables for most
 	modes but must tune an appropriate PIO mode to match.
	
	 	We must now look at the PIO mode situation. We may need to
	 	adjust the PIO mode to keep the timings acceptable
 	atiixp_bmdma_start	-	DMA start callback
 	@qc: Command in progress
 	When DMA begins we need to ensure that the UDMA control
 	register for the channel is correctly set.
 	Note: The host lock held by the libata layer protects
 	us from two channels both trying to set DMA bits at once
 	atiixp_bmdma_stop	-	DMA stop callback
 	@qc: Command in progress
 	DMA has completed. Clear the UDMA flag as the next operations will
 	be PIO ones not UDMA data transfer.
 	Note: The host lock held by the libata layer protects
 	us from two channels both trying to set DMA bits at once
 SB600 doesn't have secondary port wired 
 SPDX-License-Identifier: GPL-2.0
  Atari Falcon PATA controller driver
  Copyright (c) 2016 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Based on falconide.c:
      Created 12 Jul 1997 by Geert Uytterhoeven
 Transfer multiple of 2 bytes 
 Transfer trailing byte, if any. 
 Point buf to the tail of buffer 
  Provide our own set_mode() as we don't want to change anything that has
  already been configured..
 We don't really care 
 allocate host 
 N.B. this assumes data_addr will be used for word-sized IO only 
 activate 
 SPDX-License-Identifier: GPL-2.0-or-later
   sata_sx4.c - Promise SATA
   Maintained by:  Tejun Heo <tj@kernel.org>
   		    Please ALWAYS copy linux-ide@vger.kernel.org
 		    on emails.
   Copyright 2003-2004 Red Hat, Inc.
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware documentation available under NDA.
	Theory of operation
	-------------------
	The SX4 (PDC20621) chip features a single Host DMA (HDMA) copy
	engine, DIMM memory, and four ATA engines (one per SATA port).
	Data is copied tofrom DIMM memory by the HDMA engine, before
	handing off to one (or more) of the ATA engines.  The ATA
	engines operate solely on DIMM memory.
	The SX4 behaves like a PATA chip, with no SATA controls or
	knowledge whatsoever, leading to the presumption that
	PATA<->SATA bridges exist on SX4 boards, external to the
	PDC20621 chip itself.
	The chip is quite capable, supporting an XOR engine and linked
	hardware commands (permits a string to transactions to be
	submitted and waited-on as a single unit), and an optional
	microprocessor.
	The limiting factor is largely software.  This Linux driver was
	written to multiplex the single HDMA engine to copy disk
	transactions into a fixed DIMM memory space, from where an ATA
	engine takes over.  As a result, each WRITE looks like this:
		submit HDMA packet to hardware
		hardware copies data from system memory to DIMM
		hardware raises interrupt
		submit ATA packet to hardware
		hardware executes ATA WRITE command, w data in DIMM
		hardware raises interrupt
	and each READ looks like this:
		submit ATA packet to hardware
		hardware executes ATA READ command, w data in DIMM
		hardware raises interrupt
		submit HDMA packet to hardware
		hardware copies data from DIMM to system memory
		hardware raises interrupt
	This is a very slow, lock-step way of doing things that can
	certainly be improved by motivated kernel hackers.
 Direct command DMA table addr 
 Command packet pointer addr 
 Host DMA packet pointer addr 
 Mask of asserted SEQ INTs 
 Host DMA control  status 
 IDEn control  status 
 chosen, not constant, values; we design our own DIMM mem map 
 page# for 32K DIMM window 
 offset of chip #0 
 FastTrak S150 SX4 
 HDMAATA mask int 
 HDMAATA reset 
 DMA startstop 
 master -> slave 
 master <- slave 
 start I2C proto 
 mask I2C interrupt 
 I2C normal compl. 
 slave no-ack addr 
 PDC_TIME_CONTROL bits 
 bits 9:8 == 00 
 bits 9:8 == 01 
 SEQ ID for timer 
 TODO: inherit from base port_ops after converting to new EH 
 board_20621 
 terminate list 
 output ATA packet SG table 
 output Host DMA packet SG table 
	
	  Set up ATA packet
 reserved 
 seq. id 
 delay seq. id 
 dimm dma SG, and next-pkt 
 select device 
 device control register 
	
	  Set up Host DMA packet
 seq. id 
 delay seq. id 
 hard-code chip #0 
	
	  Build SG table
	
	  Build ATA, host DMA packets
 copy three SG tables and two packets to DIMM MMIO window 
 force host FIFO dump 
 MMIO PCI posting flush 
 hard-code chip #0 
 copy three SG tables and two packets to DIMM MMIO window 
 force host FIFO dump 
 MMIO PCI posting flush 
 hard-code chip #0 
 flush 
 flush 
 if nothing on queue, we're done 
 ATA_VERBOSE_DEBUG 
 hard-code chip #0 
 flush PRD, pkt writes 
 if writing, we (1) DMA to DIMM, then (2) do ATA command 
 flush 
 read 
 step two - DMA from DIMM to host 
 get drive status; clear intr; complete txn 
 step one - exec ATA command 
 submit hdma pkt 
 write 
 step one - DMA from host to DIMM 
 submit ata pkt 
 step two - execute ATA command 
 get drive status; clear intr; complete txn 
 command completion, but no data xfer 
 reading should also clear interrupts 
 only 16 tags possible 
 FIXME: if all 4 ATA engines are stopped, also stop HDMA engine 
 flush 
 FIXME: start HDMA engine, if zero ATA engines running 
 clear IRQ 
 turn IRQ back on 
 flush 
 FIXME: handle HDMA copy engine 
 flush 
 make DMA engine forget about the failed command 
 atapi dma off by default 
 Whitelist commands that may use DMA. 
 READ_DVD_STRUCTURE 
 READ_CD 
 -45150 (FFFF4FA2) to -1 (FFFFFFFF) shall use PIO mode 
 hard-code chip #0 
 32K byte uchar size 
 hard-code chip #0 
 32K byte uchar size 
 hard-code chip #0 
 Set the device and subaddress 
 Write Control to perform read operation, mask int 
 hard-code chip #0 
	
	   Calculate the size of bDIMMSize (power of 2) and
	   merge the DIMM size by program startend address.
 size = xxx(MB) 
 hard-code chip #0 
	
	  Set To Default : DIMM Module Global Control Register (0x022259F1)
	  DIMM Arbitration Disable (bit 20)
	  DIMM DataControl Output Driving Selection (bit12 - bit15)
	  Refresh Enable (bit 17)
 Turn on for ECC 
 DIMM Initialization SelectEnable (bit 1819) 
 polling ~5 secs 
 hard-code chip #0 
 Initialize PLL based upon PCI Bus Frequency 
 Initialize Time Period Register 
 Enable timer 
 Wait 3 seconds 
	
	   When timer is enabled, counter is decreased every internal
	   clock cycle.
	
	   If SX4 is on PCI-X bus, after 3 seconds, the timer counter
	   register should be >= (0xffffffff - 3x10^8).
 PLL F Param (bit 22:16) 
 OD param = 0x2 (bit 31:30), R param = 0x5 (bit 29:25) 
 Initialize PLL. 
	
	   Read SPD of DIMM by I2C interface,
	   and program the DIMM Module Controller.
 DIMM error 
 Programming DIMM0 Module Control Register (index_CID0:80h) 
 Programming DIMM Module Global Control Register (index_CID0:88h) 
 ECC initiliazation. 
 hard-code chip #0 
	
	  Select page 0x40 for our 32k DIMM window
 page 40h; arbitrarily selected 
	
	  Reset Host DMA
 flush 
 flush 
 allocate host 
 acquire resources and fill host 
 configure and activate 
 SPDX-License-Identifier: GPL-2.0-or-later
   sata_vsc.c - Vitesse VSC7174 4 port DPA SATA
   Maintained by:  Jeremy Higdon @ SGI
  		    Please ALWAYS copy linux-ide@vger.kernel.org
 		    on emails.
   Copyright 2004 SGI
   Bits from Jeff Garzik, Copyright RedHat, Inc.
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Vitesse hardware documentation presumably available under NDA.
   Intel 31244 (same hardware interface) documentation presumably
   available from http:developer.intel.com
 Interrupt register offsets (from chip base address) 
 Taskfile registers offsets 
 DMA base 
 SCRs base 
 Port stride 
 Error interrupt status bit offsets 
	
	  The only thing the ctl register is used for is SRST.
	  That is not enabled or disabled via tf_load.
	  However, if ATA_NIEN is changed, then we need to change
	  the interrupt register.
	 We received an interrupt during a polled command,
	  or some other spurious condition.  Interrupt reporting
	  with this hardware is fairly reliable so it is safe to
	  simply clear the interrupt
  vsc_sata_interrupt
  Read the interrupt register and process for the devices that have
  them pending.
	 The IRQ handling is not quite standard SFF behaviour so we
 allocate host 
 check if we have needed resource mapped 
 map IO regions and initialize host accordingly 
	
	  Use 32 bit DMA mask, because 64 bit address support is poor.
	
	  Due to a bug in the chip, the default cache line size can't be
	  used (unless the default is non-zero).
	
	  Config offset 0x98 is "Extended Control and Status Register 0"
	  Default value is (1 << 28).  All bits except bit 28 are reserved in
	  DPA mode.  If bit 28 is set, LED 0 reflects all ports' activity.
	  If bit 28 is clear, each port has its own LED.
 terminate list 
 SPDX-License-Identifier: GPL-2.0-or-later
    pata-legacy.c - Legacy port PATASATA controller driver.
    Copyright 20052006 Red Hat, all rights reserved.
    An ATA driver for the legacy ATA ports.
    Data Sources:
 	Opti 82C46582C611 support: Data sheets at opti-inc.com
 	HT6560 series:
 	Promise 2023020620:
 		http:www.ryston.czpetrvlbpdc20230b.html
 		http:www.ryston.czpetrvlbpdc20230c.html
 		http:www.ryston.czpetrvlbpdc20630.html
 	QDI65x0:
 		http:www.ryston.czpetrvlbqd6500.html
 		http:www.ryston.czpetrvlbqd6580.html
 	QDI65x0 probe code based on driversidelegacyqd65xx.c
 	Rewritten from the work of Colten Edwards <pje120@cs.usask.ca> by
 	Samuel Thibault <samuel.thibault@ens-lyon.org>
   Unsupported but docs exist:
 	AppianAdaptec AIC25VL01Cirrus Logic PD7220
   This driver handles legacy (that is "ISAVLB side") IDE ports found
   on PC class systems. There are three hybrid devices that are exceptions
   The Cyrix 55105520 where a pre SFF ATA device is on the bridge and
   the MPIIX where the tuning is PCI side but the IDE is "ISA side".
   Specific support is included for the ht6560aht6560bopti82c611a
   opti82c465mvpromise 20230c20630qdi65x0winbond83759A
   Support for the Winbond 83759A when operating in advanced mode.
   Multichip mode is not currently supported.
   Use the autospeed and pio_mask options with:
 	Appian ADI2 aka CLPD7220 or AIC25VL01.
   Use the jumpers, autospeed and set pio_mask to the mode on the jumpers with
 	Goldstar GM82C711, PIC-1288A-125, UMC 82C871F, Winbond W83759,
 	Winbond W83759A, Promise PDC20230-B
   For now use autospeed and pio_mask as above with the W83759A. This may
   change.
 Dual channel mode is different 
 	legacy_probe_add	-	Add interface to probe list
 	@port: Controller port
 	@irq: IRQ number
 	@type: Controller type
 	@private: Controller specific info
 	Add an entry into the probe list for ATA controllers. This is used
 	to add the default ISA slots and then to build up the table
 	further according to other ISAVLBWeird device scans
 	An IO port list is used to keep ordering stable and sane, as we
 	don't have any good way to talk about ordering otherwise
 Matching port, or the correct slot for ordering 
 Fill in the entry for later probing 
 	legacy_set_mode		-	mode setting
 	@link: IDE link
 	@unused: Device that failed when error is returned
 	Use a non standard set_mode function. We don't want to be tuned.
 	The BIOS configured everything. Our job is not to fiddle. Just use
 	whatever PIO the hardware is using and leave it at that. When we
 	get some kind of nice user driven API for control then we can
 	expand on this as per hdparm in the base kernel.
 	These ops are used if the user indicates the hardware
 	snoops the commands to decide on the mode and handles the
 	mode selection "magically" itself. Several legacy controllers
 	do this. The mode range can be set if it is not 0x1F by setting
 	pio_mask as well.
 	Promise 20230C and 20620 support
 	This controller supports PIO0 to PIO2. We set PIO timings
 	conservatively to allow for 50MHz Vesa Local Bus. The 20620 DMA
 	support is weird being DMA to controller and PIO'd to the host
 	and not supported.
 Safe as UP only. Force IOs to occur together 
 Unlock the control interface 
 32bit IO capable and we need to write a whole number of dwords 
 Perform the 32bit IO synchronization sequence 
 Now the data 
 	Holtek 6560A support
 	This controller supports PIO0 to PIO2 (no IORDY even though higher
 	timings can be loaded).
 Get the timing data in cycles. For now play safe at 50Mhz 
 	Holtek 6560B support
 	This controller supports PIO0 to PIO4. We honour the BIOSjumper FIFO
 	setting unless we see an ATAPI device in which case we force it off.
 	FIXME: need to implement 2nd channel support.
 Get the timing data in cycles. For now play safe at 50Mhz 
 	Opti core chipset helpers
 	opti_syscfg	-	read OPTI chipset configuration
 	@reg: Configuration register to read
 	Returns the value of an OPTI system board configuration register.
 Uniprocessor chipset and must force cycles adjancent 
 	Opti 82C611A
 	This controller supports PIO0 to PIO3.
 Enter configuration mode 
 Read VLB clock strapping 
 Get the timing data in cycles 
 Setup timing is shared 
 Select the right timing bank for write timing 
 Write the timings 
	 Select the right bank for read timings, also
 Index select 
 Load the read timings 
 Ensure the timing register mode is right 
 Exit command mode 
 	Opti 82C465MV
 	This controller supports PIO0 to PIO3. Unlike the 611A the MVB
 	version is dual channel but doesn't have a lot of unique registers.
 Get the clock 
 BIOS set 
 Enter configuration mode 
 Read VLB clock strapping 
 Get the timing data in cycles 
 Setup timing is shared 
 Select the right timing bank for write timing 
 Write the timings 
	 Select the right bank for read timings, also
 Index select 
 Load the read timings 
 Ensure the timing register mode is right 
 Exit command mode 
 We need to know this for quad device on the MVB 
 	opti82c46x_qc_issue		-	command issue
 	@qc: command pending
 	Called when the libata layer is about to issue a command. We wrap
 	this interface so that we can load the correct ATA timings. The
 	MVB has a single set of timing registers and these are shared
 	across channels. As there are two registers we really ought to
 	track the last two used values as a sort of register window. For
 	now we just reload on a channel switch. On the single channel
 	setup this condition never fires so we do nothing extra.
 	FIXME: dual channel needs ->serialize support
	 If timings are set and for the wrong channel (2nd test is
 	qdi65x0_set_piomode		-	PIO setup for QDI65x0
 	@ap: Port
 	@adev: Device
 	In single channel mode the 6580 has one clock per device and we can
 	avoid the requirement to clock switch. We also have to load the timing
 	into the right clock according to whether we are master or slave.
 	In dual channel mode the 6580 has one clock per channel and we have
 	to software clockswitch in qc_issue.
 Get the timing data in cycles 
 Clear the FIFO 
 	qdi_qc_issue		-	command issue
 	@qc: command pending
 	Called when the libata layer is about to issue a command. We wrap
 	this interface so that we can load the correct ATA timings.
 Get the timing data in cycles 
 Fast VLB bus, assume 50MHz 
 Load the setup timing 
 FIFO off 
 IORDY off 
 	probe_chip_type		-	Discover controller
 	@probe: Probe entry to check
 	Probe an ATA port and identify the type of controller. We don't
 	check if the controller appears to be driveless at this point.
 jumpered mode off 
 local control 
 programmable timing 
 Probes 
 PDC20230c or 20630 ? 
 	legacy_init_one		-	attach a legacy interface
 	@probe: probe record
 	Register an ISA bus IDE interface. Such interfaces are PIO and we
 	assume do not support IRQ sharing.
 Nothing found means we drop the port as its probably not there 
 	legacy_check_special_cases	-	ATA special cases
 	@p: PCI device to check
 	@primary: set this if we find an ATA master
 	@secondary: set this if we find an ATA secondary
 	A small number of vendors implemented early PCI ATA interfaces
 	on bridge logic without the ATA interface being PCI visible.
 	Where we have a matching PCI driver we must skip the relevant
 	device here. If we don't know about it then the legacy driver
 	is the right driver anyway.
 Cyrix CS5510 pre SFF MWDMA ATA on the bridge 
 Cyrix CS5520 pre SFF MWDMA ATA on the bridge 
 Intel MPIIX - PIO ATA on non PCI side of bridge 
 ATA port enabled 
 If an OPTI 82C46X is present find out where the channels are 
 Assume master and slave first 
	 Check enabled and this port is the 465MV port. On the
 Check card type 
 QD6500: single channel 
 Disabled ? 
 QD6580: dual channel 
 Single channel mode ? 
 Dual channel mode 
 port + 0x02, r & 0x04 
	
	 	Check each possible QD65xx base address
 Check for a card 
			 I have no hw that needs this delay but it
 Fail 
 Passes the presence test 
 Check port agrees with port set 
 	legacy_init		-	attach legacy interfaces
 	Attach legacy IDE interfaces by scanning the usual IRQport suspects.
 	Right now we do not scan the ide0 and ide1 address but should do so
 	for non PCI systems or systems with no PCI IDE legacy mode devices.
 	If you fix that note there are special cases to consider like VLB
 	drivers and CS551020.
		 Check for any overlap of the system ATA mappings. Native
		   mode controllers stuck on these addresses or some devices
 Check for special cases 
		 If PCI bus is present then don't probe for tertiary
 Default port, alt is 1B0 
 ISAVLB extra ports 
 SPDX-License-Identifier: GPL-2.0-or-later
  sata_sil24.c - Driver for Silicon Image 31243132 SATA-2 controllers
  Copyright 2005  Tejun Heo
  Based on preview driver from Silicon Image.
  Port request block (PRB) 32 bytes
  Scatter gather entry (SGE) 16 bytes
	 sil24 fetches in chunks of 64bytes.  The first block
	  contains the PRB and two SGEs.  From the second block, it's
	  consisted of four SGEs and called SGT.  Calculate the
	  number of SGTs that fit into one page.
	 This will give us one unused SGEs for ATA.  This extra SGE
	  will be used to store CDB for ATAPI devices.
	
	  Global controller registers (128 bytes @ BAR0)
 32 bit regs 
 32 bit slot stat  4 
 8 bit regs 
 32 bit 
 HOST_SLOT_STAT bits 
 HOST_CTRL bits 
 M66EN PCI bus signal 
 latched PCI TRDY 
 latched PCI STOP 
 latched PCI DEVSEL 
 latched PCI REQ64 
 global reset 
	
	  Port registers
	  (8192 bytes @ +0x0000, +0x2000, +0x4000 and +0x6000 @ BAR2)
 31 LRAM slots and PMP regs 
 32 bytes PRB + 2 SGE, ACT... 
 8 bytes PMP  16 (128 bytes) 
 port device status offset 
 port device QActive offset 
 8 bytes per PMP 
 32 bit regs 
 write: ctrl-set, read: stat 
 write: ctrl-clear 
 high: status, low: interrupt 
 write: enable-set 
 write: enable-clear 
 command execution fifo 
 command error number 
 16 bit regs 
 32 bit regs 
 64 bit cmd activate  31 (248 bytes) 
 32bit exec diag  16 (64 bytes, 0-10 used on 3124) 
 32bit psd diag  16 (64 bytes, 0-8 used on 3124) 
 PORT_CTRL_STAT bits 
 port reset 
 device reset 
 port initialize 
 interrupt write one to clear 
 0=12b cdb, 1=16b cdb 
 PMP resume 
 32-bit activation 
 port multiplier enable 
 port ready to accept commands 
 PORT_IRQ_STATENABLE_SETCLR 
 bits[11:0] are masked 
 command(s) completed 
 command execution error 
 port ready change 
 power management change 
 PHY ready change 
 COMWAKE received 
 unknown FIS received 
 device exchanged 
 8b10b decode error threshold 
 CRC error threshold 
 handshake error threshold 
 SDB notify received 
 bits[27:16] are unmasked (raw) 
 ENABLE_SETCLR specific, intr steering - 2 bit field 
 PORT_CMD_ERR constants 
 Error bit in D2H Register FIS 
 Error bit in SDB FIS 
 Error in data FIS not detected by dev 
 Initial cmd FIS transmission failure 
 Protocol mismatch 
 Data direction mismatch 
 Ran out of SGEs while writing 
 Ran out of SGEs while reading 
 DIR invalid in 1st PIO setup of ATAPI 
 PLD ecode 00 - SGT not on qword boundary 
 PLD ecode 01 - target abort 
 PLD ecode 10 - master abort 
 PLD ecode 11 - PCI parity err while fetching SGT 
 ctrl[15:13] 001 - PRB not on qword boundary 
 ctrl[15:13] 010 - target abort 
 ctrl[15:13] 100 - master abort 
 ctrl[15:13] 110 - PCI parity err while fetching PRB 
 PSD ecode 00 - undefined 
 PSD ecode 01 - target abort 
 PSD ecode 10 - master abort 
 PSD ecode 11 - PCI prity err during transfer 
 FIS received while sending service 
 bits of PRB control field 
 override def. ATA protocol 
 PACKET cmd read 
 PACKET cmd write 
 Mask completion irq 
 Soft reset request (ign BSY?) 
 PRB protocol field 
	
	  Other constants
 Last SGE in chain 
	SGE_LNK			= (1 << 30),  linked list
	SGE_DRD			= (1 << 29),  discard data read (devnull)
 board id 
 host flags 
 IRQ loss errata on PCI-X 
  ap->private_data
  The preview driver always returned 0 for status.  We emulate it
  here from the previous interrupt.
 32 cmd blocks 
 DMA base addr for them 
 terminate list 
 Disable MSI 
  Use bits 30-31 of port_flags to encode available port numbers.
  Current maxium is 4.
 sil_3124 
 sil_3132 
 sil_3131sil_3531 
 configure IRQ WoC 
 zero error counters. 
 always use 64bit activation 
 clear port multiplier enable and resume bits 
 clear PMP error status 
 temporarily plug completion and error interrupts 
	
	  The barrier is required to ensure that writes to cmd_block reach
	  the memory before the write to PORT_CMD_ACTIVATE.
 clear IRQs 
 force port into known state 
 restore IRQ enabled 
 put the port into known state 
 do SRST 
 doesn't really matter 
	 Sometimes, DEV_RST is not enough to recover the controller.
	  This happens often after PM DMA CS errata.
 restore port configuration 
 sil24 does the right thing(tm) without any protection 
	 SStatus oscillates between zero and valid status after
	  DEV_RST, debounce it.
	 Sil24 doesn't store signature FIS after hardreset, so we
	  can't wait for BSY to clear.  Some devices take a long time
	  to get ready and those devices will choke if we don't wait
	  for BSY clearance here.  Tell libata to perform follow-up
	  softreset.
	
	  There is a bug in the chip:
	  Port LRAM Causes the PRBSGT Data to be Corrupted
	  If the host issues a read request for LRAM and SActive registers
	  while active commands are available in the port, PRBSGT data in
	  the LRAM can become corrupted. This issue applies only when
	  reading from, but not writing to, the LRAM.
	 
	  Therefore, reading LRAM when there is no particular error [and
	  other commands may be outstanding] is prohibited.
	 
	  To avoid this bug there are two situations where a command must run
	  exclusive of any other commands on the port:
	 
	  - ATAPI commands which check the sense data
	  - Passthrough ATA commands which always have ATA_QCFLAG_RESULT_TF
	    set.
	 
	
	  The barrier is required to ensure that writes to cmd_block reach
	  the memory before the write to PORT_CMD_ACTIVATE.
	 Port-wide IRQ mask in HOST_CTRL doesn't really work, clear
	  PORT_IRQ_ENABLE instead.
 clear IRQ 
 turn IRQ back on 
 on error, we need to clear IRQ explicitly 
 first, analyze and record host port events 
 deal with command error 
		 DMA Context Switch Failure in Port Multiplier Mode
		  errata.  If we have active commands to 3 or more
		  devices, any error condition on active devices can
		  corrupt DMA context switching.
 find out the offending link and qc 
 analyze CMD_ERR 
 record error info 
 if PMP, resume 
 freeze or abort 
	 If PCIX_IRQ_WOC, there's an inherent race window between
	  clearing IRQ pending status and reading PORT_SLOT_STAT
	  which may cause spurious interrupts afterwards.  This is
	  unavoidable and much better than losing interrupts which
	  happens if IRQ pending is cleared after reading
	  PORT_SLOT_STAT.
 spurious interrupts are expected if PCIX_IRQ_WOC 
 make DMA engine forget about the failed command 
 GPIO off 
 clear global reset & mask interrupts during initialization 
 init ports 
 Initial PHY setting 
 Clear port RST 
 configure port 
 Turn on interrupts 
 cause link error if sil24_cmd_block is sized wrongly 
 acquire resources 
 apply workaround for completion IRQ loss on PCI-X errata 
 allocate and fill host 
 configure and activate the device 
	 Set max read request size to 4096.  This slightly increases
	  write throughput for pci-e variants.
  driversatapata_arasan_cf.c
  Arasan Compact Flash host controller source file
  Copyright (C) 2011 ST Microelectronics
  Viresh Kumar <vireshk@kernel.org>
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
  The Arasan CompactFlash Device Controller IP core has three basic modes of
  operation: PC card ATA using IO mode, PC card ATA using memory mode, PC card
  ATA using true IDE modes. This driver supports only True IDE mode currently.
  Arasan CF Controller shares global irq register with Arasan XD Controller.
  Tested on archarmmach-spear13xx
 Registers 
 CompactFlash Interface Status 
 IRQ 
 Interrupt Enable 
 Operation Mode 
 CF Interface Clock Configuration 
 CF Timing Mode Configuration 
 CF Transfer Address 
 Transfer Control 
 Write Data Port 
 Read Data Port 
 ATA Data Port 
 ATA ErrorFeatures 
 ATA Sector Count 
 ATA Sector Number 
 ATA Cylinder Low 
 ATA Cylinder High 
 ATA Select CardHead 
 ATA Status-Command 
 ATA Alternate StatusDevice Control 
 Extended Write Data Port 0x200-0x3FC 
 Extended Read Data Port 0x400-0x5FC 
 Global Interrupt Status 
 Global Interrupt Status enable 
 Global Interrupt Signal enable 
 Compact Flash Controller Dev Structure 
 pointer to ata_host structure 
 clk structure 
 physical base address of controller 
 virtual base address of controller 
 irq number
 status to be updated to framework regarding DMA transfer 
 Card is present or Not 
 dma specific 
 Completion for transfer complete interrupt from controller 
 Completion for DMA transfer complete. 
 Dma channel allocated 
 Mask for DMA transfers 
 DMA transfer work 
 DMA delayed finish work 
 qc to be transferred using DMA 
 EnableDisable global interrupts shared between CF and XD ctrlr. 
 enable should be 0 or 1 
 EnableDisable CF interrupts 
 clear & enabledisable irqs 
 Both CD1 & CD2 should be low if card inserted completely 
 configure CF interface clock 
 TODO: read from device tree 
 Check if PIO Error interrupt has occurred 
 Wait for DMA to complete 
	
	  For each sg:
	  MAX_XFER_COUNT data will be transferred before we get transfer
	  complete interrupt. Between after FIFO_SIZE data
	  buffer available interrupt will be generated. At this time we will
	  fill FIFO again: max FIFO_SIZE data.
 continue dma xfers until current sg is completed 
 wait for read to complete 
 readwrite FIFO in chunk of FIFO_SIZE 
 wait for write to complete 
  This routine uses External DMA controller to readwrite data to FIFO of CF
  controller. There are two xfer related interrupt supported by CF controller:
  - buf_avail: This interrupt is generated as soon as we have buffer of 512
 	bytes available for reading or empty buffer available for writing.
  - xfer_done: This interrupt is generated on transfer of "xfer_size" amount of
 	data tofrom FIFO. xfer_size is programmed in XFER_CTR register.
  Max buffer size = FIFO_SIZE = 512 Bytes.
  Max xfer_size = MAX_XFER_COUNT = 256 KB.
 request dma channels 
 dma_request_channel may sleep, so calling from process context 
 data xferred successfully 
 error when transferring data tofrom memory 
 clear irqs 
 clear girqs 
 handle only relevant interrupts 
 Send Complete only for write 
 stop transfer and reset controller 
	
	  DMA transfers using an external DMA controller may be scheduled.
	  Abort them before handling error. Refer data_xfer() for further
	  details.
 defer PIO handling to sff_qc_issue 
 select the device 
 start the command 
 Arasan ctrl supports Mode0 -> Mode6 
 as it is on spear1340 
	
	  If there's an error getting IRQ (or we do get IRQ0),
	  support only PIO
 allocate host 
 Handle platform specific quirks 
 SPDX-License-Identifier: GPL-2.0-only
     pata_netcell.c - Netcell PATA driver
 	(c) 2006 Red Hat
 No PIO or DMA methods needed for this device 
 Firmware forgets to mark words 85-87 valid 
 	netcell_init_one - Register Netcell ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in netcell_pci_tbl matching with @pdev
 	Called from kernel PCI layer.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
		 Actually we don't really care about these as the
 UDMA 133 
 Any chip specific setupoptimisationmessages here 
 And let the library code do the work 
 terminate list 
 SPDX-License-Identifier: GPL-2.0-or-later
  AHCI SATA platform driver
  Copyright 2004-2005  Red Hat, Inc.
    Jeff Garzik <jgarzik@pobox.com>
  Copyright 2010  MontaVista Software, LLC.
    Anton Vorontsov <avorontsov@ru.mvista.com>
 Keep the following compatibles for device tree compatibility 
 SPDX-License-Identifier: GPL-2.0-only
  pata-cs5535.c 	- CS5535 PATA for new ATA layer
 			  (C) 2005-2006 Red Hat Inc
 			  Alan Cox <alan@lxorguk.ukuu.org.uk>
  based upon cs5535.c from AMD <Jens.Altmann@amd.com> as cleaned up and
  made readable and Linux style by Wolfgang Zuleger <wolfgang.zuleger@gmx.de>
  and Alexander Kiausch <alex.kiausch@t-online.de>
  Loosely based on the piix & svwks drivers.
  Documentation:
 	Available from AMD web site.
  TODO
 	Review errata to see if serializing is necessary
 	The Geode (Aka Athlon GX now) uses an internal MSR based
 	bus system for control. Demented but there you go.
 	cs5535_cable_detect	-	detect cable type
 	@ap: Port to detect on
 	Perform cable detection for ATA66 capable cable. Return a libata
 	cable type.
 	cs5535_set_piomode		-	PIO setup
 	@ap: ATA interface
 	@adev: device on the interface
 	Set our PIO requirements. The CS5535 is pretty clean about all this
 Command timing has to be for the lowest of the pair of devices 
 Write the other drive timing register if it changed 
 Write the drive timing register 
 Set the PIO "format 1" bit in the DMA timing register 
 	cs5535_set_dmamode		-	DMA timing setup
 	@ap: ATA interface
 	@adev: Device being configured
 	cs5535_init_one		-	Initialise a CS5530
 	@dev: PCI device
 	@id: Entry in match table
 	Install a driver for the newly found CS5530 companion chip. Most of
 	this is just housekeeping. We have to set the chip up correctly and
 	turn off various bits of emulation magic.
 SPDX-License-Identifier: GPL-2.0-only
     pata_radisys.c - Intel PATASATA controllers
 	(C) 2006 Red Hat <alan@lxorguk.ukuu.org.uk>
     Some parts based on ata_piix.c by Jeff Garzik and others.
     A PIIX relative, this device has a single ATA channel and no
     slave timings, SITRE or PPE. In that sense it is a close relative
     of the original PIIX. It does however support UDMA 3366 per channel
     although no other modestimings. Also lacking is 32bit IO on the ATA
     port.
 	radisys_set_piomode - Initialize host controller PATA PIO timings
 	@ap: ATA port
 	@adev: Device whose timings we are configuring
 	Set PIO mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
	
	 	See Intel Document 298600-004 for the timing programing rules
	 	for PIIXICH. Note that the early PIIX does not have the slave
	 	timing port at 0x44. The Radisys is a relative of the PIIX
	 	but not the same so be careful.
 ISP  RTC 
 Check me 
 TIME1 enable 
 IE IORDY 
	 Enable IE and TIME as appropriate. Clear the other
 Track which port is configured 
 	radisys_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set MWDMA mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 ISP  RTC 
	
	  MWDMA is driven by the PIO timings. We must also enable
	  IORDY unconditionally.
 IORDY|TIME0 
		 If the drive MWDMA is faster than it can do PIO then
		 Mask out the relevant control and timing bits we will load. Also
 UDMA66 on: UDMA 33 and 66 are switchable via register 0x4A 
 UDMA 4 
 Track which port is configured 
 	radisys_qc_issue	-	command issue
 	@qc: command pending
 	Called when the libata layer is about to issue a command. We wrap
 	this interface so that we can load the correct ATA timings if
 	necessary. Our logic also clears TIME0TIME1 for the other device so
 	that, even if we get this wrong, cycles to the other device will
 	be made PIO0.
 UDMA timing is not shared 
 	radisys_init_one - Register PIIX ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in radisys_pci_tbl matching with @pdev
 	Called from kernel PCI layer.  We probe for combined mode (sigh),
 	and then hand over control to libata, for it to do the rest.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 terminate list 
 SPDX-License-Identifier: GPL-2.0-only
  pata_pdc202xx_old.c 	- Promise PDC202xx PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
 			  Alan Cox <alan@lxorguk.ukuu.org.uk>
 			  (C) 2007,2009,2010 Bartlomiej Zolnierkiewicz
  Based in part on linuxdriversidepcipdc202xx_old.c
  First cut with LBA48ATAPI
  TODO:
 	Channel interlockreset on both required ?
		
		  bit 7: error, bit 6: interrupting,
		  bit 5: FIFO full, bit 4: FIFO empty
		
		  bit 3: error, bit 2: interrupting,
		  bit 1: FIFO full, bit 0: FIFO empty
 	pdc202xx_configure_piomode	-	set chip PIO timing
 	@ap: ATA interface
 	@adev: ATA device
 	@pio: PIO mode
 	Called to do the PIO mode setup. Our timing registers are shared
 	so a configure_dmamode call will undo any work we do here and vice
 	versa
 Preserve ERRDY_EN, SYNC_IN 
 IORDY enable 
 FIFO enable 
 	pdc202xx_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Called to do the PIO mode setup. Our timing registers are shared
 	but we want to set the PIO timing by default.
 	pdc202xx_set_dmamode	-	set DMA mode in chip
 	@ap: ATA interface
 	@adev: ATA device
 	Load DMA cycle times into the chip ready for a DMA transfer
 	to occur.
 33 Mhz Clock 
 66 Mhz Clock 
 	pdc2026x_bmdma_start		-	DMA engine begin
 	@qc: ATA command
 	In UDMA3 or higher we have to clock switch for the duration of the
 	DMA transfer sequence.
 	Note: The host lock held by the libata layer protects
 	us from two channels both trying to set DMA bits at once
 Check we keep host level locking here 
	 The DMA clocks may have been trashed by a reset. FIXME: make conditional
 Cases the state machine will not complete correctly without help 
 Activate DMA 
 	pdc2026x_bmdma_stop		-	DMA engine stop
 	@qc: ATA command
 	After a DMA completes we need to put the clock back to 33MHz for
 	PIO timings.
 	Note: The host lock held by the libata layer protects
 	us from two channels both trying to set DMA bits at once
 The clock bits are in the same register for both channels 
 Cases the state machine will not complete correctly 
 Flip back to 33Mhz for PIO 
 	pdc2026x_dev_config	-	device setup hook
 	@adev: newly found device
 	Perform chip specific early setup. We need to lock the transfer
 	sizes to 8bit to avoid making the state engine on the 2026x cards
 	barf.
 Enable burst mode 
 	pdc2026x_check_atapi_dma - Check whether ATAPI DMA can be supported for this command
 	@qc: Metadata associated with taskfile to check
 	Just say no - not supported on older Promise.
 	LOCKING:
 	None (inherited from caller).
 	RETURNS: 0 when ATAPI DMA can be used
 		 1 otherwise
 Don't grab anything behind a Promise I2O RAID 
 SPDX-License-Identifier: GPL-2.0-or-later
  driversatasata_dwc_460ex.c
  Synopsys DesignWare Cores (DWC) SATA host driver
  Author: Mark Miesfeld <mmiesfeld@amcc.com>
  Ported from 2.6.19.2 to 2.6.2526 by Stefan Roese <sr@denx.de>
  Copyright 2008 DENX Software Engineering
  Based on versions provided by AMCC and Synopsys which are:
           Copyright 2006 Applied Micro Circuits Corporation
           COPYRIGHT (C) 2005  SYNOPSYS, INC.  ALL RIGHTS RESERVED
 These two are defined in "libata.h" 
 16 data items burst length 
 DWC SATA Registers 
 1st party DMA tag 
 1st party DMA buffer offset 
 1st party DMA Xfr count 
 DMA Control 
 DMA Burst Transac size 
 Interrupt Pending 
 Interrupt Mask 
 Error Mask 
 Link Layer Control 
 PHY Control 
 PHY Status 
 Recvd BIST pattern def register 
 Recvd BIST data dword1 
 Recvd BIST pattern data dword2 
 Trans BIST pattern def register 
 Trans BIST data dword1 
 Trans BIST data dword2 
 BIST Control Register 
 BIST FIS Count Register 
 BIST Status Register 
 BIST Dword Error count register 
 Reserved locations 
 Test Register 
 Version Register 
 ID Register 
 Unimplemented 
 FIFO Locations in DMA Mode 
 DWC SATA Register Operations 
 This is all error bits, zero's are reserved fields. 
 generic device struct 
 ptr to probe-ent 
 DW SATA specific 
 DMA info 
  Commonly used DWC SATA driver macros
  Prototypes
 Acquire DMA channel 
 Get SATA DMA interrupt number 
 Get physical SATA DMA register base address 
 Initialize AHB DMAC 
	
	  Each DMA command produces 2 interrupts.  Only
	  complete the command after both interrupts have been
	  seen. (See sata_dwc_isr())
 DMA_MEM_TO_DEV 
 in items 
 in items 
 Convert SG list to linked list of items (LLIs) for AHB DMA 
 See ahci.c 
 Clear error register and interrupt bit 
 This is the only error happening now.  TODO check for exact error 
 Pass this on to EH 
  Function : sata_dwc_isr
  arguments : irq, void dev_instance, struct pt_regs regs
  Return value : irqreturn_t - status of IRQ
  This Interrupt handler called via port ops registered function.
  .irq_handler = sata_dwc_isr
 Read the interrupt register 
 Check for error interrupt 
 Check for DMA SETUP FIS (FP DMA) interrupt 
		
		  Start FP DMA for NCQ command.  At this point the tag is the
		  active tag.  It is the tag that matches the command about to
		  be completed.
 If no sactive issued and tag_mask is zero then this is not NCQ 
 DEV interrupt w no active qc? 
			
			  Each DMA transaction produces 2 interrupts. The DMAC
			  transfer complete interrupt and the SATA controller
			  operation done interrupt. The command should be
			  completed only after both interrupts are seen.
	
	  This is a NCQ command. At this point we need to figure out for which
	  tags we have gotten a completion interrupt.  One interrupt may serve
	  as completion for more than one operation when commands are queued
	  (NCQ).  We need to process each completed command.
 process completed commands 
 read just to clear ... not bad if currently still busy 
 To be picked up by completion functions 
 Let libatascsi layers handle error 
 Process completed command 
 while tag_mask 
	
	  Check to see if any commands completed while we were processing our
	  initial set of completed commands (read status clears interrupts,
	  so we might miss a completed command interrupt if one came in while
	  we were processing --we read status as part of processing a completed
	  command).
		
		  This should not happen, it indicates the driver is out of
		  sync.  If it does happen, clear dmacr anyway.
 clear active bit 
 Enable selective interrupts by setting the interrupt maskregister
	
	  Unmask the error bits that should trigger an error interrupt by
	  setting the error mask register.
  Function : sata_dwc_port_start
  arguments : struct ata_ioports port
  Return value : returns 0 if success, error code otherwise
  This function allocates the scatter gather LLI table for AHB DMA
 Allocate Port Struct 
 set these so libata doesn't use them 
 Clear any error bits before libata starts issuing commands 
  Function : sata_dwc_exec_command_by_tag
  arguments : ata_port ap, ata_taskfile tf, u8 tag, u32 cmd_issued
  Return value : None
  This function keeps track of individual command tag ids and calls
  ata_exec_command in libata
	
	  Clear SError before executing a new command.
	  sata_dwc_scr_write and read can not be used here. Clearing the PM
	  managed SError register for the disk needs to be done before the
	  task file is loaded.
 Enable AHB DMA transfer on the specified channel 
 Reconfigure the DMA control register 
 Reconfigure the DMA Burst Transaction Size register 
 SATA DWC is master only 
  scsi mid-layer and libata interface structures
	
	  test-only: Currently this driver doesn't handle NCQ
	  correctly. We enable NCQ but set the queue depth to a
	  max of 1. This will get fixed in in a future release.
 .can_queue		= ATA_MAX_QUEUE, 
	
	  Make sure a LLI block is not created that will span 8K max FIS
	  boundary. If the block spans such a FIS boundary, there is a chance
	  that a DMA burst will cross that boundary -- this results in an
	  error in the host controller.
 ATA_DMA_BOUNDARY ,
 Allocate DWC SATA device 
 Ioremap SATA registers 
 Synopsys DWC SATA specific Registers 
 Setup port 
 Read the ID and Version Registers 
 Save dev for later use in dev_xxx() routines 
 Enable SATA Interrupts 
 Get SATA interrupt number 
	
	  Now, register with libATA core, this will also initiate the
	  device discovery process, invoking our port_start() handler &
	  error_handler() to execute a dummy Softreset EH session
 Free SATA DMA resources 
  Driver for the Octeon bootbus compact flash.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Copyright (C) 2005 - 2012 Cavium Inc.
  Copyright (C) 2008 Wind River Systems
  The Octeon bootbus compact flash interface is connected in at least
  3 different configurations on various evaluation boards:
  -- 8  bits no irq, no DMA
  -- 16 bits no irq, no DMA
  -- 16 bits True IDE mode with DMA, but no irq.
  In the last case the DMA engine can generate an interrupt when the
  transfer is complete.  For the first two cases only PIO is supported.
 Poll interval in nS. 
  Convert nanosecond based time to setting used in the
  boot bus timing register, based on timing multiple
	
	  Compute # of eclock periods to get desired duration in
	  nanoseconds.
 Don't assert DMACK on access 
 Timing mutiplier 
 Sample on falling edge of BOOT_OE 
 Don't combine write and output enable 
 No write enable extension 
 No read enable extension 
 Enable this region 
 Don't combine with previous region 
 Don't do address multiplexing 
  Called after libata determines the needed PIO mode. This
  function programs the Octeon bootbus regions to support the
  timing requirements of the PIO mode.
  @ap:     ATA port information
  @dev:    ATA device
 These names are timing parameters from the ATA spec 
	
	  A divisor value of four will overflow the timing fields at
	  clock rates greater than 800MHz
 True IDE mode, program both chip selects.  
 Disable page mode 
 Enable dynamic timing 
 Pages are disabled 
 We don't use multiplexed address mode 
 Not used 
 Time after IORDY to coninue to assert the data 
 Time to wait to complete the cycle. 
 How long to hold after a write to de-assert CE. 
 How long to wait after a read to de-assert CE. 
 How long write enable is asserted 
 How long read enable is asserted 
 Time after CE that readwrite starts 
 Time before CE that address is valid 
 Program the bootbus region timing for the data port chip select. 
 True IDE mode, program both chip selects.  
 dma_tim.s.tim_mult = 0 --> 4x 
 not spec'ed, value in eclocks, not affected by tim_mult 
 Tz 
 Tkr from cf spec, lengthened to meet T0 
 DMA channel number. 
 Invert the polarity if the default is 0
	
	  This is tI, C.F. spec. says 0, but Sony CF card requires
	  more, we use 20 nS.
 Sample right on edge 
  writes only 
  Handle an 8 bit IO request.
  @qc:         Queued command
  @buffer:     Data buffer
  @buflen:     Length of the buffer.
  @rw:         True to write.
			
			  Every 16 writes do a read so the bootbus
			  FIFO doesn't fill up.
  Handle a 16 bit IO request.
  @qc:         Queued command
  @buffer:     Data buffer
  @buflen:     Length of the buffer.
  @rw:         True to write.
			
			  Every 16 writes do a read so the bootbus
			  FIFO doesn't fill up.
 Transfer trailing 1 byte, if any. 
  Read the taskfile for 16bit non-True IDE only.
 The base of the registers is at ioaddr.data_addr. 
 determine by signature whether we have ATA or ATAPI devices 
  Load the taskfile for 16bit non-True IDE only.  The device_addr is
  not loaded, we do this as part of octeon_cf_exec_command16.
 The base of the registers is at ioaddr.data_addr. 
  There is only one device, do nothing. 
  Issue ATA command to host controller.  The device_addr is also sent
  as it must be written in a combined write with the command.
 The base of the registers is at ioaddr.data_addr. 
 issue rw command 
  Start a DMA transfer that was already setup
  @qc:     Information about the DMA
 Get the scatter list entry we need to DMA into 
	
	  Clear the DMA complete status.
 Enable the interrupt.  
 Set the direction of the DMA 
	
	  Don't stop the DMA if the device deasserts DMARQ. Many
	  compact flashes deassert DMARQ for a short time between
	  sectors. Instead of stopping and restarting the DMA, we'll
	  let the hardware do it. If the DMA is really stopped early
	  due to an error condition, a later timeout will force us to
	  stop.
 Size is specified in 16bit words and minus one notation 
 We need to swap the high and low bytes of every 16 bits 
 	LOCKING:
 	spin_lock_irqsave(host lock)
 Error, the transfer was not complete.  
 Stop and clear the dma engine.  
 Disable the interrupt.  
 Clear the DMA complete status 
  Check if any queued commands have more DMAs, if so start the next
  transfer, else do end of transfer handling.
			
			  We are busy, try to handle it later.  This
			  is the DMA finished interrupt, and it could
			  take a little while for the card to be
			  ready for more commands.
 Clear DMA irq. 
	
	  If the port is not waiting for completion, it must have
	  handled it previously.  The hsm_task_state is
	  protected by host->lock.
 Still busy, try again. 
	
	  A maximum of 2^20 - 1 16 bit transfers are possible with
	  the bootbus DMA.  So we need to throttle max_sectors to
	  (2^12 - 1 == 4095) to assure that this can never happen.
  We don't do ATAPI DMA so return 0.
 load tf registers 
 set up dma 
 initiate dma 
 allocate host 
 True IDE mode needs a timer to poll for not-busy.  
 16 bit but not True IDE 
 Stop and clear the dma engine.  
 Disable the interrupt.  
 Clear the DMA complete status 
 SPDX-License-Identifier: GPL-2.0-only
   pata_sch.c - Intel SCH PATA controllers
   Copyright (c) 2008 Alek Du <alek.du@intel.com>
   Supports:
     Intel SCH (AF82US15W, AF82US15L, AF82UL11L) chipsets -- see spec at:
     http:download.intel.comdesignchipsetsembeddeddatashts319537.pdf
 see SCH datasheet page 351 
 Device 0 Timing Register 
 Device 1 Timing Register 
 PIO Mode Bit Mask 
 Multi-word DMA Mode Bit Mask 
 Ultra DMA Mode Bit Mask 
 PrefetchPost Enable 
 Use Synchronous DMA 
 Intel SCH PATA Controller 
 terminate list 
 	sch_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: ATA device
 	Set PIO mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 see SCH datasheet page 351 
 set PIO mode 
 enable PPE for block device 
 	sch_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: ATA device
 	Set MWUDMA mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 see SCH datasheet page 351 
 enable Synchronous DMA mode 
 must be MWDMA mode, since we masked SWDMA already 
 	sch_init_one - Register SCH ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in sch_pci_tbl matching with @pdev
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 SPDX-License-Identifier: GPL-2.0-only
  libata-pmp.c - libata port multiplier support
  Copyright (c) 2007  SUSE Linux Products GmbH
  Copyright (c) 2007  Tejun Heo <teheo@suse.de>
 	sata_pmp_read - read PMP register
 	@link: link to read PMP register for
 	@reg: register to read
 	@r_val: resulting value
 	Read PMP register.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, AC_ERR_ mask on failure.
 	sata_pmp_write - write PMP register
 	@link: link to write PMP register for
 	@reg: register to write
 	@val: value to write
 	Write PMP register.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, AC_ERR_ mask on failure.
 	sata_pmp_qc_defer_cmd_switch - qc_defer for command switching PMP
 	@qc: ATA command in question
 	A host which has command switching PMP support cannot issue
 	commands to multiple links simultaneously.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	ATA_DEFER_ if deferring is needed, 0 otherwise.
 	sata_pmp_scr_read - read PSCR
 	@link: ATA link to read PSCR for
 	@reg: PSCR to read
 	@r_val: resulting value
 	Read PSCR @reg into @r_val for @link, to be called from
 	ata_scr_read().
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno on failure.
 	sata_pmp_scr_write - write PSCR
 	@link: ATA link to write PSCR for
 	@reg: PSCR to write
 	@val: value to be written
 	Write @val to PSCR @reg for @link, to be called from
 	ata_scr_write() and ata_scr_write_flush().
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno on failure.
 	sata_pmp_set_lpm - configure LPM for a PMP link
 	@link: PMP link to configure LPM for
 	@policy: target LPM policy
 	@hints: LPM hints
 	Configure LPM for @link.  This function will contain any PMP
 	specific workarounds if necessary.
 	LOCKING:
 	EH context.
 	RETURNS:
 	0 on success, -errno on failure.
 	sata_pmp_read_gscr - read GSCR block of SATA PMP
 	@dev: PMP device
 	@gscr: buffer to read GSCR block into
 	Read selected PMP GSCRs from the PMP at @dev.  This will serve
 	as configuration and identification info for the PMP.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno on failure.
 monitor SERR_PHYRDY_CHG on fan-out ports 
	 Disable sending Early R_OK.
	  With "cached read" HDD testing and multiple ports busy on a SATA
	  host controller, 3x26 PMP will very rarely drop a deferred
	  R_OK that was intended for the host. Symptom will be all
	  5 drives under test will timeout, get reset, and recover.
 sil3x26 quirks 
 link reports offline after LPM 
			
			  Class code report is unreliable and SRST times
			  out under certain configurations.
 port 5 is for SEMB device and it doesn't like SRST 
		
		  sil4723 quirks
		 
		  Link reports offline after LPM.  Class code report is
		  unreliable.  SIMG PMPs never got SRST reliable and the
		  config device at port 2 locks up on SRST.
 sil4726 quirks 
 link reports offline after LPM 
			 Class code report is unreliable and SRST
			  times out under certain configurations.
			  Config device can be at port 0 or 5 and
			  locks up on SRST.
			 Port 6 is for SEMB device which doesn't
			  like SRST either.
 sil57235744 quirks 
		 sil57235744 has either two or three downstream
		  ports depending on operation mode.  The last port
		  is empty if any actual IO device is available or
		  occupied by a pseudo configuration device
		  otherwise.  Don't try hard to recover it.
		
		  0x2352: found in Thermaltake BlackX Duet, jmicron JMB350?
		  0x0325: jmicron JMB394.
			 SRST breaks detection and disks get misclassified
			  LPM disabled to avoid potential problems
 Marvell 4140 quirks 
 port 4 is for SEMB device and it doesn't like SRST 
 	sata_pmp_attach - attach a SATA PMP device
 	@dev: SATA PMP device to attach
 	Configure and attach SATA PMP device @dev.  This function is
 	also responsible for allocating and initializing PMP links.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno on failure.
 is it hanging off the right place? 
 read GSCR block 
 config PMP 
 attach it 
 	sata_pmp_detach - detach a SATA PMP device
 	@dev: SATA PMP device to detach
 	Detach SATA PMP device @dev.  This function is also
 	responsible for deconfiguring PMP links.
 	LOCKING:
 	Kernel thread context (may sleep).
 	sata_pmp_same_pmp - does new GSCR matches the configured PMP?
 	@dev: PMP device to compare against
 	@new_gscr: GSCR block of the new device
 	Compare @new_gscr against @dev and determine whether @dev is
 	the PMP described by @new_gscr.
 	LOCKING:
 	None.
 	RETURNS:
 	1 if @dev matches @new_gscr, 0 otherwise.
 	sata_pmp_revalidate - revalidate SATA PMP
 	@dev: PMP device to revalidate
 	@new_class: new class code
 	Re-read GSCR block and make sure @dev is still attached to the
 	port and properly configured.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
 wrong class? 
 read GSCR 
 is the pmp still there? 
 	sata_pmp_revalidate_quick - revalidate SATA PMP quickly
 	@dev: PMP device to revalidate
 	Make sure the attached PMP is accessible.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
 something weird is going on, request full PMP recovery 
 	sata_pmp_eh_recover_pmp - recover PMP
 	@ap: ATA port PMP is attached to
 	@prereset: prereset method (can be NULL)
 	@softreset: softreset method
 	@hardreset: hardreset method
 	@postreset: postreset method (can be NULL)
 	Recover PMP attached to @ap.  Recovery procedure is somewhat
 	similar to that of ata_eh_recover() except that reset should
 	always be performed in hard->soft sequence and recovery
 	failure results in PMP detachment.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno on failure.
 reset 
 PMP is reset, SErrors cannot be trusted, scan all 
	 If revalidation is requested, revalidate and reconfigure;
	  otherwise, do quick revalidation.
 give it just two more chances 
 consecutive revalidation failures? speed down 
 okay, PMP resurrected 
		 Some PMPs require hardreset sequence to get
		  SError.N working.
 unconditionally clear SError.N 
 disable this link 
 	sata_pmp_eh_recover - recover PMP-enabled port
 	@ap: ATA port to recover
 	Drive EH recovery operation for PMP enabled port @ap.  This
 	function recovers host and PMP ports with proper retrials and
 	fallbacks.  Actual recovery operations are performed using
 	ata_eh_recover() and sata_pmp_eh_recover_pmp().
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno on failure.
 PMP attached? 
 new PMP online 
 fall through 
 recover pmp 
	 PHY event notification can disturb reset and other recovery
	  operations.  Turn it off.
 handle disabled links 
 recover links 
 clear SNotification 
	
	  If LPM is active on any fan-out port, hotplug wouldn't
	  work.  Return w PHY event notification disabled.
	
	  Connection status might have changed while resetting other
	  links, enable notification and check SATA_PMP_GSCR_ERROR
	  before returning.
 enable notification 
 check GSCR_ERROR 
 fall through 
	 Control always ends up here after detaching PMP.  Shut up
	  and return if we're unloading.
 	sata_pmp_error_handler - do standard error handling for PMP-enabled host
 	@ap: host port to handle error for
 	Perform standard error handling sequence for PMP-enabled host
 	@ap.
 	LOCKING:
 	Kernel thread context (may sleep).
 SPDX-License-Identifier: GPL-2.0-only
  pata_sl82c105.c 	- SL82C105 PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
 			  (C) 2011 Bartlomiej Zolnierkiewicz
  Based in part on linuxdriversidepcisl82c105.c
  		SL82C105Winbond 553 IDE driver
  and in part on the documentation and errata sheet
  Note: The controller like many controllers has shared timings for
  PIO and DMA. We thus flip to the DMA timings in dma_start and flip back
  in the dma_stop function. Thus we actually don't need a set_dmamode
  method as the PIO method is always called and will set the right PIO
  timing parameters.
	
	  SL82C105 PCI config register 0x40 bits.
 	sl82c105_pre_reset		-	probe begin
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Set up cable type and use generic probe init
 	sl82c105_configure_piomode	-	set chip PIO timing
 	@ap: ATA interface
 	@adev: ATA device
 	@pio: PIO mode
 	Called to do the PIO mode setup. Our timing registers are shared
 	so a configure_dmamode call will undo any work we do here and vice
 	versa
 Can we lose this oddity of the old driver 
 	sl82c105_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Called to do the PIO mode setup. Our timing registers are shared
 	but we want to set the PIO timing by default.
 	sl82c105_configure_dmamode	-	set DMA mode in chip
 	@ap: ATA interface
 	@adev: ATA device
 	Load DMA cycle times into the chip ready for a DMA transfer
 	to occur.
 Can we lose this oddity of the old driver 
 	sl82c105_reset_engine	-	Reset the DMA engine
 	@ap: ATA interface
 	The sl82c105 has some serious problems with the DMA engine
 	when transfers don't run as expected or ATAPI is used. The
 	recommended fix is to reset the engine each use using a chip
 	test register.
 	sl82c105_bmdma_start		-	DMA engine begin
 	@qc: ATA command
 	Reset the DMA engine each use as recommended by the errata
 	document.
 	FIXME: if we switch clock at BMDMA startend we might get better
 	PIO performance on DMA capable devices.
 Set the clocks for DMA 
 Activate DMA 
 	sl82c105_bmdma_stop		-	DMA engine stop
 	@qc: ATA command
 	Reset the DMA engine each use as recommended by the errata
 	document.
 	This function is also called to turn off DMA when a timeout occurs
 	during DMA operation. In both cases we need to reset the engine,
 	so no actual eng_timeout handler is required.
 	We assume bmdma_stop is always called if bmdma_start as called. If
 	not then we may need to wrap qc_issue.
	 This will redo the initial setup of the DMA device to matching
 	sl82c105_qc_defer	-	implement serialization
 	@qc: command
 	We must issue one command per host not per channel because
 	of the reset bug.
 	Q: is the scsi host lock sufficient ?
 First apply the usual rules 
	 Now apply serialization rules. Only allow a command if the
 	sl82c105_bridge_revision	-	find bridge version
 	@pdev: PCI device for the ATA function
 	Locates the PCI bridge associated with the ATA function and
 	providing it is a Winbond 553 reports the revision. If it cannot
 	find a revision or the right device it returns -1
	
	  The bridge should be part of the same device, but function 0.
	
	  Make sure it is a Winbond 553 and is an ISA bridge.
	
	  We need to find function 0's revision, not function 1
 for now use only the first port 
 SPDX-License-Identifier: GPL-2.0-only
 ---------------- Version 5 PCB Support Functions --------------------- 
 Prototype: pata_icside_irqenable_arcin_v5 (struct expansion_card ec, int irqnr)
  Purpose  : enable interrupts from card
 Prototype: pata_icside_irqdisable_arcin_v5 (struct expansion_card ec, int irqnr)
  Purpose  : disable interrupts from card
 ---------------- Version 6 PCB Support Functions --------------------- 
 Prototype: pata_icside_irqenable_arcin_v6 (struct expansion_card ec, int irqnr)
  Purpose  : enable interrupts from card
 Prototype: pata_icside_irqdisable_arcin_v6 (struct expansion_card ec, int irqnr)
  Purpose  : disable interrupts from card
 Prototype: pata_icside_irqprobe(struct expansion_card ec)
  Purpose  : detect an active interrupt from card
  SG-DMA support.
  Similar to the BM-DMA, but we use the RiscPCs IOMD DMA controllers.
  There is only one DMA controller per card, which means that only
  one drive can be accessed at one time.  NOTE! We do not enforce that
  here, but we rely on the main IDE driver spotting that both
  interfaces use the same IRQ, which should guarantee this.
  Configure the IOMD to give the appropriate timings for the transfer
  mode being requested.  We take the advice of the ATA standards, and
  calculate the cycle time based on the transfer mode, and the EIDE
  MW DMA specs that the drive provides in the IDENTIFY command.
  We have the following IOMD DMA modes to choose from:
 	Type	Active		Recovery	Cycle
 	A	250 (250)	312 (550)	562 (800)
 	B	187 (200)	250 (550)	437 (750)
 	C	125 (125)	125 (375)	250 (500)
 	D	62  (50)	125 (375)	187 (425)
  (figures in brackets are actual measured timings on DIORDIOW)
  However, we also need to take care of the readwrite active and
  recovery timings:
 			Read	Write
   	Mode	Active	-- Recovery --	Cycle	IOMD type
 	MW0	215	50	215	480	A
 	MW1	80	50	50	150	C
 	MW2	70	25	25	120	C
	
	  DMA is based on a 16MHz clock
	
	  Choose the IOMD cycle timing which ensure that the interface
	  satisfies the measured active, recovery and cycle times.
	
	  We are simplex; BUG if we try to fiddle with DMA
	  while it's active.
	
	  Route the DMA signals to the correct interface
 issue rw command 
 see ata_bmdma_stop 
		
		  Disable interrupts from this port, otherwise we
		  receive spurious interrupts from the floating
		  interrupt line.
 no need to build any PRD tables for DMA 
 don't need PRD table 
		
		  Enable access to the EASI region.
	
	  Be on the safe side - disable interrupts
	
	  Disable interrupts from this card.  We need to do
	  this before disabling EASI since we may be accessing
	  this register via that region.
	
	  Reset the ROM pointer so that we can read the ROM
	  after a soft reboot.  This also disables access to
	  the IDE taskfile via the EASI region.
	
	  don't NULL out the drvdata - devreslibata wants it
	  to free the ata_host structure.
 SPDX-License-Identifier: GPL-2.0-only
  ixp4xx PATACompact Flash driver
  Copyright (C) 2006-07 Tower Technologies
  Author: Alessandro Zummo <a.zummo@towertech.it>
  An ATA driver to handle a Compact Flash connected
  to the ixp4xx expansion bus in TrueIDE mode. The CF
  must have it chip selects connected to two CS lines
  on the ixp4xx. In the irq is not available, you might
  want to modify both this driver and libata to run in
  polling mode.
 The timings for the chipselect is in bits 29..16 
 Byte reads on half-word devices 
 Use 8bit data bus if set 
 This sets up the timing on the chipselect CMD accordingly 
	 set the expansion bus in 16bit mode and restore
	  8 bit mode after the transaction.
 Transfer multiple of 2 bytes 
 Transfer trailing 1 byte, if any. 
		 adjust the addresses to handle the address swizzling of the
		  ixp4xx in little endian mode.
 Inspect our address to figure out what chipselect the CMD is on 
 Just one port to set up 
 SPDX-License-Identifier: GPL-2.0-only
 	ACPI PATA driver
 	(c) 2007 Red Hat
 	pacpi_pre_reset	-	check for 4080 pin
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Perform the PATA port setup we need.
 	pacpi_cable_detect	-	cable type detection
 	@ap: port to detect
 	Perform device specific cable detection
 	pacpi_discover_modes	-	filter non ACPI modes
 	@ap: ATA port
 	@adev: ATA device
 	Try the modes available and see which ones the ACPI method will
 	set up sensibly. From this we get a mask of ACPI modes we can use
 	pacpi_mode_filter	-	mode filter for ACPI
 	@adev: device
 	@mask: mask of valid modes
 	Filter the valid mode list according to our own specific rules, in
 	this case the list of discovered valid modes obtained by ACPI probing
 	pacpi_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 Now stuff the nS values into the structure 
 See what mode we actually got 
 	pacpi_set_dmamode	-	set initial DMA mode data
 	@ap: ATA interface
 	@adev: ATA device
 Now stuff the nS values into the structure 
 See what mode we actually got 
 	pacpi_qc_issue	-	command issue
 	@qc: command pending
 	Called when the libata layer is about to issue a command. We wrap
 	this interface so that we can load the correct ATA timings if
 	necessary.
 	pacpi_port_start	-	port setup
 	@ap: ATA port being set up
 	Use the port_start hook to maintain private control structures
 	pacpi_init_one - Register ACPI ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@id: PCI device ID
 	Called from kernel PCI layer.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 terminate list 
   ata_generic.c - Generic PATASATA controller driver.
   Copyright 2005 Red Hat Inc, all rights reserved.
   Elements from idepcigeneric.c
 	    Copyright (C) 2001-2002	Andre Hedrick <andre@linux-ide.org>
 	    Portions (C) Copyright 2002  Red Hat Inc <alan@redhat.com>
   May be copied or modified under the terms of the GNU General Public License
   Driver for PCI IDE interfaces implementing the standard bus mastering
   interface functionality. This assumes the BIOS did the drive set up and
   tuning for us. By default we do not grab all IDE class devices as they
   may have other drivers or need fixups to avoid problems. Instead we keep
   a default list of stuff without documentationdriver that appears to
   work.
 	A generic parallel ATA driver using libata
 	generic_set_mode	-	mode setting
 	@link: link to set up
 	@unused: returned device on error
 	Use a non standard set_mode function. We don't want to be tuned.
 	The BIOS configured everything. Our job is not to fiddle. We
 	read the dma enabled bits from the PCI configuration of the device
 	and respect them.
 Bits 5 and 6 indicate if DMA is active on masterslave 
 We don't really care 
		 We do need the right mode information for DMA or PIO
 SWDMA perhaps? 
 Set to claim all devices 
 	is_intel_ider		-	identify intel IDE-R devices
 	@dev: PCI device
 	Distinguish Intel IDE-R controller devices from other Intel IDE
 	devices. IDE-R devices have no timing registers and are in
 	most respects virtual. They should be driven by the ata_generic
 	driver.
 	IDE-R devices have PCI offset 0xF8.L as zero, later Intel ATA has
 	it non zero. All Intel ATA has 0x40 writable (timing), but it is
 	not writable on IDE-R devices (this is guaranteed).
	 For Intel IDE the value at 0xF8 is only zero on IDE-R
 Check the manufacturing ID, it will be zero for IDE-R 
 Not IDE-R: punt so that ata_(old)piix gets it 
	 0xF8 will also be zero on some early Intel IDE devices
	 Finally check if the timing register is writable so that
	   we eliminate any early devices hot-docked in a docking
 	ata_generic_init_one		-	attach generic IDE
 	@dev: PCI device found
 	@id: match entry
 	Called each time a matching IDE interface is found. We check if the
 	interface is one we wish to claim and if so we perform any chip
 	specific hacks then let the ATA layer do the heavy lifting.
 Don't use the generic entry unless instructed to do so 
 Devices that need care 
	 Don't re-enable devices in generic mode or we will break some
 Intel, IDE class device 
 Must come last. If you add entries adjust this table appropriately 
 SPDX-License-Identifier: GPL-2.0-or-later
   sata_nv.c - NVIDIA nForce SATA
   Copyright 2004 NVIDIA Corp.  All rights reserved.
   Copyright 2004 Andrew Chew
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   No hardware documentation available outside of NVIDIA.
   This driver programs the NVIDIA SATA controller in a similar
   fashion as with other PCI IDE BMDMA controllers, with a few
   NV-specific details such as register offsets, SATA phy location,
   hotplug info, etc.
   CK804MCP04 controllers support an alternate programming interface
   similar to the ADMA specification (with some modifications).
   This allows the use of NCQ. Non-DMA-mapped ATA commands are still
   sent through the legacy interface.
 INT_STATUSENABLE 
 INT_STATUSENABLE bits 
 each port occupies 4 bits 
 INT_CONFIG 
 0 = INT, 1 = SMI
 For PCI config register 20
 BAR5 offset to ADMA general registers 
 BAR5 offset to ADMA ports 
 size of ADMA port register space  
 ADMA port registers 
 NV_ADMA_CTL register bits 
 CPB response flag bits 
 CPB control flag bits 
 APRD flags 
 NV_ADMA_STAT flags 
 port flags 
 MCP55 reg offset 
 MCP55 
 each port occupies 16 bits 
 SWNCQ ENABLE BITS
 SW NCQ status bits
 ADMA Physical Region Descriptor - one SG segment 
 end of command list 
 wait-not-BSY 
 ignore this entry 
 std. PATA signals follow... 
 ADMA Command Parameter Block
   The first 5 SG segments are stored inside the Command Parameter Block itself.
   If there are more than 5 segments the remainder are stored in a separate
 0 
 1 
 2 
 len is length of taskfile in 64 bit words 
 3  
 4 
 5 
 6-7 
 8-31 
 32-111 
 112-119 
 120-127 
 our SG list 
 and its DMA mapping 
 fifo circular queue to store deferral command 
 for NCQ interrupt analysis 
 NF2 == NF3 as far as sata_nv is concerned 
 terminate list 
  NV SATA controllers have various different problems with hardreset
  protocol depending on the specific controller and device.
  GENERIC:
   bko11195 reports that link doesn't come online after hardreset on
   generic nv's and there have been several other similar reports on
   linux-ide.
   bko12351#c23 reports that warmplug on MCP61 doesn't work with
   softreset.
  NF23:
   bko3352 reports nf23 controllers can't determine device signature
   reliably after hardreset.  The following thread reports detection
   failure on cold boot with the standard debouncing timing.
   http:thread.gmane.orggmane.linux.ide34098
   bko12176 reports that hardreset fails to bring up the link during
   boot on nf2.
  CK804:
   For initial probing after boot and hot plugging, hardreset mostly
   works fine on CK804 but curiously, reprobing on the initial port
   by rescanning or rmmodinsmod fails to acquire the initial D2H Reg
   FIS in somewhat undeterministic way.
  SWNCQ:
   bko12351 reports that when SWNCQ is enabled, for hotplug to work,
   hardreset should be used and hardreset can't report proper
   signature, which suggests that mcp5x is closer to nf2 as long as
   reset quirkiness is concerned.
   bko12703 reports that boot probing fails for intel SSD with
   hardreset.  Link fails to come online.  Softreset works fine.
  The failures are varied but the following patterns seem true for
  all flavors.
  - Softreset during boot always works.
  - Hardreset during boot sometimes fails to bring up the link on
    certain comibnations and device signature acquisition is
    unreliable.
  - Hardreset is often necessary after hotplug.
  So, preferring softreset for boot probing and error handling (as
  hardreset might bring down the link) but using hardreset for
  post-boot probing should work around the above issues in most
  cases.  Define nv_hardreset() which only kicks in for post-boot
  probing and use it for all variants.
 generic 
 nforce23 
 ck804 
 ADMA 
 MCP5x 
 SWNCQ 
 Not a proper libata device, ignore 
		
		  NVIDIA reports that ADMA mode does not support ATAPI commands.
		  Therefore ATAPI commands are sent through the legacy interface.
		  However, the legacy interface only supports 32-bit DMA.
		  Restrict DMA parameters as required by the legacy interface
		  when an ATAPI device is connected.
		 Subtract 1 since an extra entry may be needed for padding, see
		 Since the legacy DMA engine is in use, we need to disable ADMA
		
		  We have to set the DMA mask to 32-bit if either port is in
		  ATAPI mode, since they are on the same PCI device which is
		  used for DMA mapping.  If either SCSI device is not allocated
		  yet, it's OK since that port will discover its correct
		  setting when it does get allocated.
	 Other than when internal or pass-through commands are executed,
	   the only time this function will be called in ADMA mode will be
	   if a command fails. In the failure case we don't care about going
	   into register mode with ADMA commands pending, as the commands will
	   all shortly be aborted anyway. We assume that NCQ commands are not
	   issued via passthrough, which is the only way that switching into
 notifier error, but no error in CPB flags? 
 Kill all commands. EH will determine what actually failed. 
 freeze if hotplugged 
 bail out if not our interrupt 
 DEV interrupt w no active qc? 
 handle interrupt 
 if ADMA is disabled, use standard ata interrupt handler 
 if in ATA register mode, check for standard interrupts 
				 NV_INT_DEV indication seems unreliable
				    at times at least in ADMA mode. Force it
				    on always when a command is active, to
 Nothing to do 
		
		  Clear status. Ensure the controller sees the
		  clearing before we start looking at any of the CPB
		  statuses, so that any CPB completions after this
		  point in the handler will raise another interrupt.
 flush posted write 
 irq handled if we got here 
 freeze if hotplugged or controller error 
 let EH analyze SError and figure out cause 
 check all active commands 
 check CPBs for completed commands 
		 Note: Both notifier clear registers must be written
 clear any outstanding CK804 notifications 
 Disable interrupt 
 flush posted write 
 Enable interrupt 
 flush posted write 
 clear any outstanding CK804 notifications 
 clear ADMA status 
	 clear notifiers - note both ports need to be written with
	
	  Ensure DMA mask is set to 32-bit before allocating legacy PRD and
	  pad buffers.
 we might fallback to bmdma, allocate bmdma resources 
	
	  Now that the legacy PRD and padding buffer are allocated we can
	  raise the DMA mask to allocate the CPBAPRD table.
	
	  First item in chunk of DMA memory:
	  128-byte command parameter block (CPB)
	  one for each command tag
	
	  Second item: block of ADMA_SGTBL_LEN sg entries
 clear any outstanding interrupt conditions 
 initialize port variables 
 clear CPB fetch count 
 clear GO for register mode, enable interrupt 
 flush posted write 
 flush posted write 
 Go to register mode - clears GO 
 clear CPB fetch count 
 disable interrupt, shut down port 
 set CPB block location 
 clear any outstanding interrupt conditions 
 initialize port variables 
 clear CPB fetch count 
 clear GO for register mode, enable interrupt 
 flush posted write 
 flush posted write 
 enable ADMA on the ports 
 len in bytes 
	 ADMA engine can only be used for non-ATAPI DMA commands,
 turn on NCQ flags for NCQ commands 
	 Be paranoid and don't let the device see NV_CPB_CTL_CPB_VALID
	 We can't handle result taskfile with NCQ commands, since
	   retrieving the taskfile switches us out of ADMA mode and would abort
 use ATA register mode 
	 write append register, command tag in lower 8 bits
		 Seems to need some delay before switching between NCQ and
			
			  No request pending?  Clear interrupt status
			  anyway, in case there's one pending.
	 Do hardreset iff it's post-boot probing, please read the
	  comment above port ops for details.
 make sure the link is online 
 whine about phy resume failure but proceed 
 device signature acquisition is unreliable 
 Push us back into port register mode for error handling. 
		 Mark all of the CPBs as invalid to prevent them from
 clear CPB fetch count 
 Reset channel 
 flush posted write 
 flush posted write 
 queue is full 
 null queue 
 clear irq 
 disable irq 
 disable swncq 
 clear irq 
 enable irq 
 enable swncq 
 disable  ECO 398 
 enable swncq 
 enable irq intr 
  clear port irq 
 Not a proper libata device, ignore 
 if MCP51 and Maxtor, then disable ncq 
 if MCP55 and rev <= a2 and Maxtor, then disable ncq 
 we might fallback to bmdma, allocate bmdma resources 
 load tf registers 
 add qc to defer queue 
 AHCI needs SError cleared; otherwise, it might lock up 
 analyze @irq_stat 
 okay, let's hand over to EH 
 error when transferring data tofrom memory 
		 if the controller can't get a device to host register FIS,
		  The driver needs to reissue the new command.
 send deferral queue command 
 load PRD table addr. 
 specify data direction, triple-check start bit is clear 
		 If the IRQ is backout, driver must issue
		  the new command again some time later.
		 The interrupt indicates the new command
		  was transmitted correctly to the drive.
		 program the dma controller with appropriate PRD buffers
		  and start the DMA transfer for requested command.
 reserve Hotplug 
 Make sure this is a SATA controller by counting the number of bars
 (NVIDIA SATA controllers will always have six bars).  Otherwise,
 it's an IDE controller and we ignore it.
 determine type and allocate host 
 request and iomap NV_MMIO_BAR 
 configure SCR access 
 enable SATA space for CK804 
 init ADMA 
 enabledisable ADMA on the ports appropriately 
 disable SATA space for CK804 
 disable ADMA on the ports 
 SPDX-License-Identifier: GPL-2.0-or-later
 	IDE tuning and bus mastering support for the CS5510CS5520
 	chipsets
 	The CS5510CS5520 are slightly unusual devices. Unlike the
 	typical IDE controllers they do bus mastering with the drive in
 	PIO mode and smarter silicon.
 	The practical upshot of this is that we must always tune the
 	drive for the right PIO mode. We must also ignore all the blacklists
 	and the drive bus mastering DMA information. Also to confuse matters
 	further we can do DMA on PIO only drives.
 	DMA on the 5510 also requires we disable_hlt() during DMA on early
 	revisions.
 	 This driver is strictly experimental 
 	(c) Copyright Red Hat Inc 2002
  Documentation:
 	Not publicly available.
 	cs5520_set_timings	-	program PIO timings
 	@ap: ATA port
 	@adev: ATA device
 	@pio: PIO ID
 	Program the PIO mode timings for the controller according to the pio
 	clocking table.
 Channel command timing 
 FIXME: should these use address ? 
 Read command timing 
 Write command timing 
 	cs5520_set_piomode	-	program PIO timings
 	@ap: ATA port
 	@adev: ATA device
 	Program the PIO mode timings for the controller according to the pio
 	clocking table.
 IDE port enable bits 
 Check if the ATA ports are enabled 
 Perform set up for DMA 
 Map IO ports and initialize host accordingly 
 activate the host 
 	cs5520_reinit_one	-	device resume
 	@pdev: PCI device
 	Do any reconfiguration work needed by a resume from RAM. We need
 	to restore DMA mode support on BIOSen which disabled it
 	cs5520_pci_device_suspend	-	device suspend
 	@pdev: PCI device
 	@mesg: PM event message
 	We have to cut and waste bits from the standard method because
 	the 5520 is a bit odd and not just a pure ATA device. As a result
 	we must not disable it. The needed code is short and this avoids
 	chip specific mess in the core code.
 CONFIG_PM_SLEEP 
 For now keep DMA off. We can set it for all but A rev CS5510 once the
 SPDX-License-Identifier: GPL-2.0-or-later
     ata_piix.c - Intel PATASATA controllers
     Maintained by:  Tejun Heo <tj@kernel.org>
     		    Please ALWAYS copy linux-ide@vger.kernel.org
 		    on emails.
 	Copyright 2003-2005 Red Hat Inc
 	Copyright 2003-2005 Jeff Garzik
 	Copyright header from piix.c:
   Copyright (C) 1998-1999 Andrzej Krzysztofowicz, Author and Maintainer
   Copyright (C) 1998-2000 Andre Hedrick <andre@linux-ide.org>
   Copyright (C) 2003 Red Hat Inc
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware documentation available at http:developer.intel.com
  Documentation
 	Publicly available from Intel web site. Errata documentation
  is also publicly available. As an aide to anyone hacking on this
  driver the list of errata that are relevant is below, going back to
  PIIX4. Older device documentation is now a bit tricky to find.
  The chipsets all follow very much the same design. The original Triton
  series chipsets do _not_ support independent device timings, but this
  is fixed in Triton II. With the odd mobile exception the chips then
  change little except in gaining more modes until SATA arrives. This
  driver supports only the chips with independent timing (that is those
  with SITRE and the 0x44 timing register). See pata_oldpiix and pata_mpiix
  for the early chip drivers.
  Errata of note:
  Unfixable
 	PIIX4    errata #9	- Only on ultra obscure hw
 	ICH3	 errata #13     - Not observed to affect real hw
 				  by Intel
  Things we must deal with
 	PIIX4	errata #10	- BM IDE hang with non UDMA
 				  (must stopstart dma to recover)
 	440MX   errata #15	- As PIIX4 errata #10
 	PIIX4	errata #15	- Must not read control registers
  				  during a PIO transfer
 	440MX   errata #13	- As PIIX4 errata #15
 	ICH2	errata #21	- DMA mode 0 doesn't work right
 	ICH01  errata #55	- As ICH2 errata #21
 	ICH2	spec c #9	- Extra operations needed to handle
 				  drive hotswap [NOT YET SUPPORTED]
 	ICH2    spec c #20	- IDE PRD must not cross a 64K boundary
 				  and must be dword aligned
 	ICH2    spec c #24	- UDMA mode 4,5 t8586 should be 6ns not 3.3
 	ICH7	errata #16	- MWDMA1 timings are incorrect
  Should have been BIOS fixed:
 	450NX:	errata #19	- DMA hangs on old 450NX
 	450NX:  errata #20	- DMA hangs on old 450NX
 	450NX:  errata #25	- Corruption with DMA on old 450NX
 	ICH3    errata #15      - IDE deadlock under high load
 				  (BIOS must set dev 31 fn 0 bit 23)
 	ICH3	errata #18	- Don't use native mode
 IDE IO configuration register 
 address map register 
 port control and status 
 make sure PCI INTx enabled 
 SATA idxdata pair regs 
support 16bit PIO only
 constants for mapping table 
 port 0 
 port 1 
 port 2 
 port 3 
 IDE 
 not available 
 reserved 
 host->flags bits 
 controller IDs 
 PIIX3 MWDMA only 
 PIIX4 at 33Mhz 
 ICH up to UDMA 33 only 
 ICH up to 66 Mhz 
 ICH up to UDMA 100 
 ICH up to UDMA 100 but with no MWDMA1
 locks up on second port enable 
 PIIX4 for VMware, spurious DMA_ERR 
 Intel PIIX3 for the 430HX etc 
 VMware ICH4 
 Intel PIIX4 for the 430TX440BXMX chipset: UDMA 33 
 Also PIIX4E (fn3 rev 2) and PIIX4M (fn3 rev 3) 
 Intel PIIX4 
 Intel PIIX4 
 Intel PIIX 
 Intel ICH (i810, i815, i840) UDMA 66
 Intel ICH0 : UDMA 33
 Intel ICH2M 
 Intel ICH2 (i810E2, i845, 850, 860) UDMA 100 
  Intel ICH3M 
 Intel ICH3 (E75001) UDMA 100 
 Intel ICH4-L 
 Intel ICH4 (i845GV, i845E, i852, i855) UDMA 100 
 Intel ICH5 
 C-ICH (i810E2) 
 ESB (855GME875P + 6300ESB) UDMA 100  
 ICH6 (and 6) (i915) UDMA 100 
 ICH77-R (i945, i975) UDMA 100
 ICH8 Mobile PATA Controller 
 SATA ports 
 82801EB (ICH5) 
 82801EB (ICH5) 
 6300ESB (ICH5 variant with broken PCS present bits) 
 6300ESB pretending RAID 
 82801FBFW (ICH6ICH6W) 
 82801FRFRW (ICH6RICH6RW) 
	 82801FBM ICH6M (ICH6R with only port 0 and 2 implemented).
 82801GBGRGH (ICH7, identical to ICH6) 
 82801GBMGHM (ICH7M, identical to ICH6M)  
 Enterprise Southbridge 2 (631xESB632xESB) 
 SATA Controller 1 IDE (ICH8) 
 SATA Controller 2 IDE (ICH8) 
 Mobile SATA Controller IDE (ICH8M), Apple 
 Mobile SATA Controller IDE (ICH8M) 
 SATA Controller IDE (ICH9) 
 SATA Controller IDE (ICH9) 
 SATA Controller IDE (ICH9) 
 SATA Controller IDE (ICH9M) 
 SATA Controller IDE (ICH9M) 
 SATA Controller IDE (ICH9M) 
 SATA Controller IDE (Tolapai) 
 SATA Controller IDE (ICH10) 
 SATA Controller IDE (ICH10) 
 SATA Controller IDE (ICH10) 
 SATA Controller IDE (ICH10) 
 SATA Controller IDE (PCH) 
 SATA Controller IDE (PCH) 
 SATA Controller IDE (PCH) 
 SATA Controller IDE (PCH) 
 SATA Controller IDE (PCH) 
 SATA Controller IDE (PCH) 
 SATA Controller IDE (CPT) 
 SATA Controller IDE (CPT) 
 SATA Controller IDE (CPT) 
 SATA Controller IDE (CPT) 
 SATA Controller IDE (PBG) 
 SATA Controller IDE (PBG) 
 SATA Controller IDE (Panther Point) 
 SATA Controller IDE (Panther Point) 
 SATA Controller IDE (Panther Point) 
 SATA Controller IDE (Panther Point) 
 SATA Controller IDE (Lynx Point) 
 SATA Controller IDE (Lynx Point) 
 SATA Controller IDE (Lynx Point) 
 SATA Controller IDE (Lynx Point) 
 SATA Controller IDE (Lynx Point-LP) 
 SATA Controller IDE (Lynx Point-LP) 
 SATA Controller IDE (Lynx Point-LP) 
 SATA Controller IDE (Lynx Point-LP) 
 SATA Controller IDE (DH89xxCC) 
 SATA Controller IDE (Avoton) 
 SATA Controller IDE (Avoton) 
 SATA Controller IDE (Avoton) 
 SATA Controller IDE (Avoton) 
 SATA Controller IDE (Wellsburg) 
 SATA Controller IDE (Wellsburg) 
 SATA Controller IDE (Wellsburg) 
 SATA Controller IDE (Wellsburg) 
 SATA Controller IDE (BayTrail) 
 SATA Controller IDE (Coleto Creek) 
 SATA Controller IDE (9 Series) 
 SATA Controller IDE (9 Series) 
 SATA Controller IDE (9 Series) 
 SATA Controller IDE (9 Series) 
 terminate list 
 PM   PS   SM   SS       MAP  
 000b 
 001b 
 100b 
 101b 
 110b 
 111b 
 PM   PS   SM   SS       MAP 
 00b 
 01b 
 10b 
	 Map 01b isn't specified in the doc but some notebooks use
	  it anyway.  MAP 01b have been spotted on both ICH6M and
	  ICH7M.
 PM   PS   SM   SS       MAP 
 00b 
 01b 
 10b 
 PM   PS   SM   SS       MAP 
 00b (hardwired when in AHCI) 
 10b (IDE mode) 
 PM   PS   SM   SS       MAP 
 00b 
 01b 
 10b 
 PM   PS   SM   SS       MAP 
 00b 
 10b 
 PM   PS   SM   SS       MAP 
 00b 
 01b 
 10b 
 port 0 
 port 1 
 	List of laptops that use short cables rather than 80 wire
 devid, subvendor, subdev 
 ICH7 on Acer 5602WLMi 
 ICH7 on Acer 5602aWLMi 
 ICH7 on Acer 3682WLMi 
 ICH7 on unknown Dell 
 ICH7 on Asus W5F 
 ICH7 on HP Compaq nc2400 
 ICH7 on unknown HP  
 ICH7 on Hercules EC-900 
 ICH7 on unknown Intel 
 ICH4 on ACER Aspire 2023WLMi 
 ICH4 on ACER TM290 
 ICH4M on Fujitsu-Siemens Lifebook S6120 
 ICH6 on ACER Aspire 1694WLMi 
 ICH6M on Asus Eee 701 
 ICH7 on Sony TZ-90 
 end marker 
 	ich_pata_cable_detect - Probe host controller cable detect info
 	@ap: Port for which cable detect info is desired
 	Read 80c cable indicator from ATA PCI device's PCI config
 	register.  This register is normally set by firmware (BIOS).
 	LOCKING:
 	None (inherited from caller).
 Check for specials 
 check BIOS cable detect results 
 	piix_pata_prereset - prereset for PATA host controller
 	@link: Target link
 	@deadline: deadline jiffies for the operation
 	LOCKING:
 	None (inherited from caller).
	
	 	See Intel Document 298600-004 for the timing programing rules
	 	for ICH controllers.
 ISP  RTC 
 TIME1 enable 
 IE enable 
 Intel specifies that the PPE functionality is for disk only 
 PPE enable 
	
	  If the drive MWDMA is faster than it can do PIO then
	  we must force PIO into PIO0
 Enable DMA timing only 
 PIO cycles in PIO0 
	 PIO configuration clears DTE unconditionally.  It will be
	  programmed in set_dmamode which is guaranteed to be called
	  after set_piomode if any DMA mode is available.
 clear TIME1|IE1|PPE1|DTE1 
 enable PPE1, IE1 and TIME1 as needed 
 Load the timing nibble for this slave 
 clear ISP|RCT|TIME0|IE0|PPE0|DTE0 
 Enable PPE, IE and TIME as appropriate 
 load ISP and RCT 
 Enable SITRE (separate slave timing register) 
	 Ensure the UDMA bit is off - it will be turned back on if
 	piix_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Drive in question
 	Set PIO mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 	do_pata_set_dmamode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Drive in question
 	@isich: set if the chip is an ICH device
 	Set UDMA mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
		
		  UDMA is handled by a combination of clock switching and
		  selection of dividers
		 
		  Handy rule: Odd modes are UDMATIMx 01, even are 02
		 	       except UDMA0 which is 00
 100Mhz 
 66Mhz 
 33Mhz 
 Load the CTRP selection 
 Select a 3366100Mhz clock 
			 For ICH or later we should set bit 10 for better
 MWDMA is driven by the PIO timings. 
 XFER_PIO_0 is never used currently 
 	piix_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: um
 	Set MWUDMA mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 	ich_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: um
 	Set MWUDMA mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
  Serial ATA IndexData Pair Superset Registers access
  Beginning from ICH8, there's a sane way to access SCRs using index
  and data register pair located at BAR5 which means that we have
  separate SCRs for master and slave.  This is handled using libata
  slave_link facility.
 terminate list 
	 TECRA M4 sometimes forgets its identify and reports bogus
	  DMI information.  As the bogus information is a bit
	  generic, match as many entries as possible.  This manual
	  matching is necessary because dmi_system_id.matches is
	  limited to four entries.
	 Some braindamaged ACPI suspend implementations expect the
	  controller to be awake on entry; otherwise, it burns cpu
	  cycles and power trying to do something to the sleeping
	  beauty.
		 mark its power state as "unknown", since we don't
		  know if e.g. the BIOS will change its device state
		  when we suspend.
 tell resume that it's waking up from broken suspend 
		 PCI device wasn't disabled during suspend.  Use
		  pci_reenable_device() to avoid affecting the enable
		  count.
 PIIX3 MWDMA only 
 mwdma1-2 ?? CHECK 0 should be ok but slow 
 PIIX4 at 33MHz 
 mwdma1-2 ?? CHECK 0 should be ok but slow 
 ICH0 - ICH at 33Mhz
 Check: maybe MWDMA0 is ok  
 ICH controllers up to 66MHz 
 MWDMA0 is broken on chip 
 mwdma1-2 ?? CHECK 0 should be ok but slow 
	
	  some Sandybridge chipsets have broken 32 mode up to now,
	  see https:bugzilla.kernel.orgshow_bug.cgi?id=40592
	 BUG: pci_enable_device has not yet been called.  This
	  works because this device is usually set up by BIOS.
 	piix_check_450nx_errata	-	Check for problem 450NX setup
 	@ata_dev: the PCI device to check
 	Check for the present of 450NX errata #19 and errata #25. If
 	they are found return an error code so we can turn off DMA
		 Look for 450NX PXB. Check for problem configurations
 Only on the original revision: IDE DMA can hang 
 On all revisions below 5 PXB bus lock must be disabled for IDE 
	
	  Samsung DB-P70 only has three ATA ports exposed and
	  curiously the unconnected first port reports link online
	  while not responding to SRST protocol causing excessive
	  detection delay.
	 
	  Unfortunately, the system doesn't carry enough DMI
	  information to identify the machine but does have subsystem
	  vendor and device set.  As it's unclear whether the
	  subsystem vendordevice is used only for this specific
	  board, the port can't be disabled solely with the
	  information; however, turning off SIDPR access works around
	  the problem.  Turn it off.
	 
	  This problem is reported in bnc#441240.
	 
	  https:bugzilla.novell.comshow_bug.cgi?id=441420
 check for availability 
 is it blacklisted? 
	 SCR access via SIDPR doesn't work on some configurations.
	  Give it a test drive by inhibiting power save modes which
	  we'll do anyway.
	 if IPM is already 3, SCR access is probably working.  Don't
	  un-inhibit power save modes as BIOS might have inhibited
	  them for a reason.
 okay, SCRs available, set ops and ask libata for slave_link 
			 Clevo M570U sets IOCFG bit 18 if the cdrom
			  isn't used to boot the system which
			  disables the channel.
 terminate list 
	 The datasheet says that bit 18 is NOOP but certain systems
	  seem to use it to disable a channel.  Clear the bit on the
	  affected systems.
 PCI slot number of the controller 
 PCI slot number of the controller 
 terminate list 
 apply the quirk only to on-board controllers 
			 On Hyper-V hypervisors the disks are exposed on
			  both the emulated SATA controller and on the
			  paravirtualised drivers.  The CDDVD devices
			  are only exposed on the emulated controller.
			  Request we ignore ATA devices on this host.
 terminate list 
			 In MS Virtual PC guests the DMI ident is nearly
			  identical to a Hyper-V guest. One difference is the
			  product version which is used here to identify
			  a Virtual PC guest. This entry allows ata_piix to
			  drive the emulated hardware.
 terminate list 
 	piix_init_one - Register PIIX ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in piix_pci_tbl matching with @pdev
 	Called from kernel PCI layer.  We probe for combined mode (sigh),
 	and then hand over control to libata, for it to do the rest.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 no hotplugging support for later devices (FIXME) 
 enable device and prepare host 
	 Save IOCFG, this will be used for cable detection, quirk
	  detection and restoration on detach.  This is necessary
	  because some ACPI implementations mess up cable related
	  bits on _STM.  Reported on kernel bz#11879.
	 ICH6R may be driven by either ata_piix or ahci driver
	  regardless of BIOS configuration.  Make sure AHCI mode is
	  off.
 SATA map init can change port_info, do it before prepping host 
 initialize controller 
 apply IOCFG bit18 quirk 
	 On ICH5, some BIOSen disable the interrupt using the
	  PCI_COMMAND_INTX_DISABLE bit added in PCI 2.3.
	  On ICH6, this bit has the same effect, but only when
	  MSI is disabled (and it is disabled, as we don't use
	  message-signalled interrupts currently).
		 This writes into the master table but it does not
		   really matter for this errata as we will apply it to
 Allow hosts to specify device types to ignore when scanning. 
 SPDX-License-Identifier: GPL-2.0-only
  pata_cmd640.c 	- CMD640 PCI PATA for new ATA layer
 			  (C) 2007 Red Hat Inc
  Based upon
   linuxdriversidepcicmd640.c		Version 1.02  Sep 01, 1996
   Copyright (C) 1995-1996  Linus Torvalds & authors (see driver)
 	This drives only the PCI version of the controller. If you have a
 	VLB one then we have enough docs to support it but you can write
 	your own code.
 	cmd640_set_piomode	-	set initial PIO mode data
 	@ap: ATA port
 	@adev: ATA device
 	Called to do the PIO mode setup.
	 The second channel has shared timings and the setup timing is
 Make the timings fit 
	 Now convert the clocks into values we can actually stuff into
 640B only 
 0 = 16 
 Load setup timing 
 Load activerecovery 
		 Save the shared timings for channel, they will be loaded
		   by qc_issue. Reloading the setup time is expensive so we
 	cmd640_qc_issue	-	command preparation hook
 	@qc: Command to be issued
 	Channel 1 has shared timings. We must reprogram the
 	clock each drive 23 switch we do.
 	cmd640_port_start	-	port setup
 	@ap: ATA port being set up
 	The CMD640 needs to maintain private data structures so we
 	allocate space here.
 Force a load 
 In theory xfer_noirq is not needed once we kill the prefetcher 
 CMD640 detected, commiserations 
 PIO0 command cycles 
 512 byte bursts (sector) 
	
	  A reporter a long time ago
	  Had problems with the data fifo
	  So don't run the risk
	  Of putting crap on the disk
	  For its better just to go slow
 Do channel 0 
 Ditto for channel 1 
 SPDX-License-Identifier: GPL-2.0-only
  pata_ninja32.c 	- Ninja32 PATA for new ATA layer
 			  (C) 2007 Red Hat Inc
  Note: The controller like many controllers has shared timings for
  PIO and DMA. We thus flip to the DMA timings in dma_start and flip back
  in the dma_stop function. Thus we actually don't need a set_dmamode
  method as the PIO method is always called and will set the right PIO
  timing parameters.
  The Ninja32 Cardbus is not a generic SFF controller. Instead it is
  laid out as follows off BAR 0. This is based upon Mark Lord's delkin
  driver and the extensive analysis done by the BSD developers, notably
  ITOH Yasufumi.
 	Base + 0x00 IRQ Status
 	Base + 0x01 IRQ control
 	Base + 0x02 Chipset control
 	Base + 0x03 Unknown
 	Base + 0x04 VDMA and reset control + wait bits
 	Base + 0x08 BMIMBA
 	Base + 0x0C DMA Length
 	Base + 0x10 Taskfile
 	Base + 0x18 BMDMA Status ?
 	Base + 0x1C
 	Base + 0x1D Bus master control
 		bit 0 = enable
 		bit 1 = 0 write1 read
 		bit 2 = 1 sgtable
 		bit 3 = go
 		bit 4-6 wait bits
 		bit 7 = done
 	Base + 0x1E AltStatus
 	Base + 0x1F timing register
 	ninja32_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Called to do the PIO mode setup. Our timing registers are shared
 	but we want to set the PIO timing by default.
 Enable interrupt lines 
 Burst, ?? setup 
 Unknown 
 WAIT0 
 Unknown 
 Unknown 
 BMDMA control: WAIT0 
 Set up the PCI device 
	 Set up the register mappings. We use the IO mapping as only the
 FIXME: Should we disable them at remove ? 
 SPDX-License-Identifier: GPL-2.0-only
  Libata driver for the highpoint 37x and 30x UDMA66 ATA controllers.
  This driver is heavily based upon:
  linuxdriversidepcihpt366.c		Version 0.36	April 25, 2003
  Copyright (C) 1999-2003		Andre Hedrick <andre@linux-ide.org>
  Portions Copyright (C) 2001	        Sun Microsystems, Inc.
  Portions Copyright (C) 2003		Red Hat Inc
  Portions Copyright (C) 2005-2010	MontaVista Software, Inc.
  TODO
 	Look into engine reset on timeout errors. Should not be	required.
 key for bus clock timings
  bit
  0:3    data_high_time. Inactive time of DIOW_DIOR_ for PIO and MW DMA.
         cycles = value + 1
  4:8    data_low_time. Active time of DIOW_DIOR_ for PIO and MW DMA.
         cycles = value + 1
  9:12   cmd_high_time. Inactive time of DIOW_DIOR_ during task file
         register access.
  13:17  cmd_low_time. Active time of DIOW_DIOR_ during task file
         register access.
  18:20  udma_cycle_time. Clock cycles for UDMA xfer.
  21     CLK frequency for UDMA: 0=ATA clock, 1=dual ATA clock.
  22:24  pre_high_time. Time to initialize 1st cycle for PIO and MW DMA xfer.
  25:27  cmd_pre_high_time. Time to initialize 1st PIO cycle for task file
         register access.
  28     UDMA enable.
  29     DMA  enable.
  30     PIO_MST enable. If set, the chip is in bus master mode during
         PIO xfer.
  31     FIFO enable. Only for PIO.
 0x12646231 ?? 
 0x1c8a9c62 
 	hpt37x_find_mode	-	reset the hpt37x bus
 	@ap: ATA port
 	@speed: transfer mode
 	Return the 32bit register programming information for this channel
 	that matches the speed provided.
 silence compiler warning 
 	hpt370_filter	-	mode selection filter
 	@adev: ATA device
 	@mask: mode mask
 	Block UDMA on devices that cause trouble with this controller.
 	hpt370a_filter	-	mode selection filter
 	@adev: ATA device
 	@mask: mode mask
 	Block UDMA on devices that cause trouble with this controller.
 	hpt372_filter	-	mode selection filter
 	@adev: ATA device
 	@mask: mode mask
 	The Marvell bridge chips used on the HighPoint SATA cards do not seem
 	to support the UltraDMA modes 1, 2, and 3 as well as any MWDMA modes...
 	hpt37x_cable_detect	-	Detect the cable type
 	@ap: ATA port to detect on
 	Return the cable type attached to this port
 debounce 
 Cable register now active 
 Restore state 
 	hpt374_fn1_cable_detect	-	Detect the cable type
 	@ap: ATA port to detect on
 	Return the cable type attached to this port
 Do the extra channel work 
 Set bit 15 of 0x52 to enable TCBLID as input 
 Reset TCBLIDFCBLID to output 
 	hpt37x_pre_reset	-	reset the hpt37x bus
 	@link: ATA link to reset
 	@deadline: deadline jiffies for the operation
 	Perform the initial reset handling for the HPT37x.
 Reset the state machine 
 Fast interrupt prediction disable, hold off interrupt disable 
 Determine timing mask and find matching mode entry 
 	hpt370_set_piomode		-	PIO setup
 	@ap: ATA interface
 	@adev: device on the interface
 	Perform PIO mode setup.
 	hpt370_set_dmamode		-	DMA timing setup
 	@ap: ATA interface
 	@adev: Device being configured
 	Set up the channel for MWDMA or UDMA modes.
 	hpt370_bmdma_stop		-	DMA engine stop
 	@qc: ATA command
 	Work around the HPT370 DMA engine.
 Clear the engine 
 Stop DMA 
 Clear Error 
 Clear the engine 
 Fast interrupt prediction disable, hold off interrupt disable 
 Determine timing mask and find matching mode entry 
 	hpt372_set_piomode		-	PIO setup
 	@ap: ATA interface
 	@adev: device on the interface
 	Perform PIO mode setup.
 	hpt372_set_dmamode		-	DMA timing setup
 	@ap: ATA interface
 	@adev: Device being configured
 	Set up the channel for MWDMA or UDMA modes.
 	hpt37x_bmdma_stop		-	DMA engine stop
 	@qc: ATA command
 	Clean up after the HPT372 and later DMA engine
 	Configuration for HPT370
 	Configuration for HPT370A. Close to 370 but less filters
 	Configuration for HPT371 and HPT302. Slightly different PIO and DMA
 	mode setting functionality.
 	Configuration for HPT372. Mode setting works like 371 and 302
 	but we have a mode filter.
 	Configuration for HPT374. Mode setting and filtering works like 372
 	but we have a different cable detection procedure for function 1.
 	hpt37x_clock_slot	-	Turn timing to PC clock entry
 	@freq: Reported frequency timing
 	@base: Base timing
 	Turn the timing data intoa clock slot (0 for 33, 1 for 40, 2 for 50
 	and 3 for 66Mhz)
 Mhz 
 33Mhz slot 
 40Mhz slot 
 50Mhz slot 
 60Mhz slot 
 	hpt37x_calibrate_dpll		-	Calibrate the DPLL loop
 	@dev: PCI device
 	Perform a calibration cycle on the HPT37x DPLL. Returns 1 if this
 	succeeds
 See if it stays set 
 Failed ? 
 Turn off tuning, we have the DPLL set 
 Never went stable 
 Someone hot plugged the controller on us ? 
 	hpt37x_init_one		-	Initialise an HPT37X302
 	@dev: PCI device
 	@id: Entry in match table
 	Initialise an HPT37x device. There are some interesting complications
 	here. Firstly the chip may report 366 and be one of several variants.
 	Secondly all the timings depend on the clock for the chip which we must
 	detect and look up
 	This is the known chip mappings. It may be missing a couple of later
 	releases.
 	Chip version		PCI		Rev	Notes
 	HPT366			4 (HPT366)	0	Other driver
 	HPT366			4 (HPT366)	1	Other driver
 	HPT368			4 (HPT366)	2	Other driver
 	HPT370			4 (HPT366)	3	UDMA100
 	HPT370A			4 (HPT366)	4	UDMA100
 	HPT372			4 (HPT366)	5	UDMA133 (1)
 	HPT372N			4 (HPT366)	6	Other driver
 	HPT372A			5 (HPT372)	1	UDMA133 (1)
 	HPT372N			5 (HPT372)	2	Other driver
 	HPT302			6 (HPT302)	1	UDMA133
 	HPT302N			6 (HPT302)	2	Other driver
 	HPT371			7 (HPT371)		UDMA133
 	HPT374			8 (HPT374)		UDMA133 4 channel
 	HPT372N			9 (HPT372N)		Other driver
 	(1) UDMA133 support depends on the bus clock
 HPT370 - UDMA100 
 HPT370A - UDMA100 
 HPT370 - UDMA66 
 HPT370A - UDMA66 
 HPT372 - UDMA133 
 HPT371, 302 - UDMA133 
 HPT374 - UDMA100, function 1 uses different cable_detect method 
 May be a later chip in disguise. Check 
 Older chips are in the HPT366 driver. Ignore them 
 N series chips have their own driver. Ignore 
 372N if rev >= 2 
 302N if rev > 1 
 Check this 
		
		  Single channel device, master is not present but the BIOS
		  (or us for non x86) must mark it absent
 Ok so this is a chip we support 
	
	  default to pci clock. make sure MA1516 are set to output
	  to prevent drives having problems with 40-pin cables. Needed
	  for some drives such as IBM-DTLA which will not enter ready
	  state on reset when PDIAG is a input.
	
	  HighPoint does this for HPT372A.
	  NOTE: This register is only writeable via IO space.
	
	  Some devices do not let this value be accessed via PCI space
	  according to the old driver. In addition we must use the value
	  from FN 0 on the HPT374.
 This is the process the HPT371 BIOS is reported to use 
	
	 	Turn the frequency check into a band and then find a timing
	 	table to match it.
		
		 	We need to try PLL mode instead
		 
		 	For non UDMA133 capable devices we should
		 	use a 50MHz DPLL by choice
 Compute DPLL 
 Select the DPLL clock. 
			
			  See if it'll settle at a fractionally
			  different clock
		
		 	Perform a final fixup. Note that we will have used the
		 	DPLL on the HPT372 which means we don't have to worry
		 	about lack of UDMA133 support on lower clocks
 Now kick off ATA set up 
 SPDX-License-Identifier: GPL-2.0-only
  Cortina Systems Gemini SATA bridge add-on to Faraday FTIDE010
  Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>
  struct sata_gemini - a state container for a Gemini SATA bridge
  @dev: the containing device
  @base: remapped IO memory base
  @muxmode: the current muxing mode
  @ide_pins: if the device is using the plain IDE interface pins
  @sata_bridge: if the device enables the SATA bridge
  @sata0_reset: SATA0 reset handler
  @sata1_reset: SATA1 reset handler
  @sata0_pclk: SATA0 PCLK handler
  @sata1_pclk: SATA1 PCLK handler
 Miscellaneous Control Register 
  Values of IDE IOMUX bits in the misc control register
  Bits 26:24 are "IDE IO Select", which decides what SATA
  adapters are connected to which of the two IDEATA
  controllers in the Gemini. We can connect the two IDE blocks
  to one SATA adapter each, both acting as master, or one IDE
  blocks to two SATA adapters so the IDE block can act in a
  masterslave configuration.
  We also bring out different blocks on the actual IDE
  pins (not SATA pins) if (and only if) these are muxed in.
  111-100 - Reserved
  Mode 0: 000 - ata0 master <-> sata0
                ata1 master <-> sata1
                ata0 slave interface brought out on IDE pads
  Mode 1: 001 - ata0 master <-> sata0
                ata1 master <-> sata1
                ata1 slave interface brought out on IDE pads
  Mode 2: 010 - ata1 master <-> sata1
                ata1 slave  <-> sata0
                ata0 master and slave interfaces brought out
                     on IDE pads
  Mode 3: 011 - ata0 master <-> sata0
                ata1 slave  <-> sata1
                ata1 master and slave interfaces brought out
                     on IDE pads
  Registers directly controlling the PATA<->SATA adapters
  There is only ever one instance of this bridge on a system,
  so create a singleton so that the FTIDE010 instances can grab
  a reference to it.
	
	  In muxmode 2 and 3 one of the ATA controllers is
	  actually not connected to any SATA bridge.
 SATA0 slave mode is only used in muxmode 2 
 SATA1 slave mode is only used in muxmode 3 
 Vendor code waits 10 ms here 
 Wait for PHY to become ready 
 Do not keep clocking a bridge that is not online 
 Set up the SATA bridge if need be 
	
	  Route out the IDE pins if desired.
	  This is done by looking up a special pin control state called
	  "ide" that will route out the IDE pins.
 SPDX-License-Identifier: GPL-2.0-or-later
   sata_sis.c - Silicon Integrated Systems SATA
   Maintained by:  Uwe Koziolek
   		    Please ALWAYS copy linux-ide@vger.kernel.org
 		    on emails.
   Copyright 2004 Uwe Koziolek
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware documentation available under NDA.
 PCI configuration registers 
 IDE General Control register 
 sata0 phy SCR registers 
 offset from sata0->sata1 phy regs 
 offset from sata0->sata1 phy regs 
 port mapping register 
 random bits 
 host flag: SCRs via PCI cfg 
 if set, SCRs are in IO space 
 SiS 964180 
 SiS 964180 
 SiS 965965L 
 SiS 965965L 
 SiS 966680 
 SiS 966966L968680 
 terminate list 
 doesn't exist in PCI cfg space 
 check and see if the SCRs are in IO space or PCI cfg space 
	 if hardware thinks SCRs are in IO space, but there are
	  no IO resources assigned, change to PCI cfg space.
 The PATA-handling is provided by pata_sis 
  AHCI glue platform driver for Marvell EBU SOCs
  Copyright (C) 2014 Marvell
  Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
  Marcin Wojtas <mw@semihalf.com>
  This file is licensed under the terms of the GNU General Public
  License version 2.  This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
	
	  Enable the regret bit to allow the SATA unit to regret a
	  request that didn't receive an acknowlegde and avoid a
	  deadlock
  ahci_mvebu_stop_engine
  @ap:	Target ata port
  Errata Ref#226 - SATA Disk HOT swap issue when connected through
  Port Multiplier in FIS-based Switching mode.
  To avoid the issue, according to design, the bits[11:8, 0] of
  register PxFBS are cleared when Port Command and Status (0x18) bit[0]
  changes its value from 1 to 0, i.e. falling edge of Port
  Command and Status bit[0] sends PULSE that resets PxFBS
  bits[11:8; 0].
  This function is used to override function of "ahci_stop_engine"
  from libahci.c by adding the mvebu work around(WA) to save PxFBS
  value before the PxCMD ST write of 0, then restore PxFBS value.
  Return: 0 on success; Error code otherwise.
 check if the HBA is idle 
 save the port PxFBS register for later restore 
 setting HBA to idle 
	
	  bit #15 PxCMD signal doesn't clear PxFBS,
	  restore the PxFBS register right after clearing the PxCMD ST,
	  no need to wait for the PxCMD bit #15.
 wait for engine to stop. This could be as long as 500 msec 
 SPDX-License-Identifier: GPL-2.0-only
  pata_optidma.c 	- Opti DMA PATA for new ATA layer
 			  (C) 2006 Red Hat Inc
 	The Opti DMA controllers are related to the older PIO PCI controllers
 	and indeed the VLB ones. The main differences are that the timing
 	numbers are now based off PCI clocks not VLB and differ, and that
 	MWDMA is supported.
 	This driver should support Viper-N+, FireStar, FireStar Plus.
 	These devices support virtual DMA for read (aka the CS5520). Later
 	chips support UDMA33, but only if the rest of the board logic does,
 	so you have to get this right. We don't support the virtual DMA
 	but we do handle UDMA.
 	Bits that are worth knowing
 		Most control registers are shadowed into IO registers
 		0x1F5 bit 0 tells you if the PCIVLB clock is 33 or 25Mhz
 		Virtual DMA registers move between rev 0x02 and rev 0x10
 		UDMA requires a 66MHz FSB
 index of Read cycle timing register 
 index of Write cycle timing register 
 index of Control register 
 index of Strap register 
 index of Miscellaneous register 
 0 = 33 1 = 25 
 	optidma_pre_reset		-	probe begin
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Set up cable type and use generic probe init
 	optidma_unlock		-	unlock control registers
 	@ap: ATA port
 	Unlock the control register block for this adapter. Registers must not
 	be unlocked in a situation where libata might look at them.
 These 3 unlock the control register access 
 	optidma_lock		-	issue temporary relock
 	@ap: ATA port
 	Re-lock the configuration register settings.
 Relock 
 	optidma_mode_setup	-	set mode data
 	@ap: ATA interface
 	@adev: ATA device
 	@mode: Mode to set
 	Called to do the DMA or PIO mode setup. Timing numbers are all
 	pre computed to keep the code clean. There are two tables depending
 	on the hardware clock speed.
 	WARNING: While we do this the IDE registers vanish. If we take an
 	IRQ here we depend on the host set locking to avoid catastrophe.
 Address table precomputed with a DCLK of 2 
 Switch from IDE to control mode 
	
 	 	As with many controllers the address setup time is shared
 	 	and must suit both devices if present. FIXME: Check if we
 	 	need to look at slowest of PIODMA mode of either device
 Hardware constraint 
 Commence primary programming sequence 
 First we load the device number into the timing select 
 Now we load the data timings into read datawrite data 
 Finally we load the address setup into the misc register 
 Programming sequence complete, timing 0 dev 0, timing 1 dev 1 
 Switch back to IDE mode 
	 Note: at this point our programming is incomplete. We are
	   not supposed to program PCI 0x43 "things we hacked onto the chip"
 	optiplus_mode_setup	-	DMA setup for Firestar Plus
 	@ap: ATA port
 	@adev: device
 	@mode: desired mode
 	The Firestar plus has additional UDMA functionality for UDMA0-2 and
 	requires we do some additional work. Because the base work we must do
 	is mostly shared we wrap the Firestar setup functionality in this
 	one
 	optidma_set_pio_mode	-	PIO setup callback
 	@ap: ATA port
 	@adev: Device
 	The libata core provides separate functions for handling PIO and
 	DMA programming. The architecture of the Firestar makes it easier
 	for us to have a common function so we provide wrappers
 	optidma_set_dma_mode	-	DMA setup callback
 	@ap: ATA port
 	@adev: Device
 	The libata core provides separate functions for handling PIO and
 	DMA programming. The architecture of the Firestar makes it easier
 	for us to have a common function so we provide wrappers
 	optiplus_set_pio_mode	-	PIO setup callback
 	@ap: ATA port
 	@adev: Device
 	The libata core provides separate functions for handling PIO and
 	DMA programming. The architecture of the Firestar makes it easier
 	for us to have a common function so we provide wrappers
 	optiplus_set_dma_mode	-	DMA setup callback
 	@ap: ATA port
 	@adev: Device
 	The libata core provides separate functions for handling PIO and
 	DMA programming. The architecture of the Firestar makes it easier
 	for us to have a common function so we provide wrappers
 	optidma_make_bits43	-	PCI setup helper
 	@adev: ATA device
 	Turn the ATA device setup into PCI configuration bits
 	for register 0x43 and return the two bits needed.
 	optidma_set_mode	-	mode setup
 	@link: link to set up
 	@r_failed: out parameter for failed device
 	Use the standard setup to tune the chipset and then finalise the
 	configuration by writing the nibble of extra bits of data into
 	the chip.
 	optiplus_with_udma	-	Look for UDMA capable setup
 	@pdev: ATA controller
 Find function 1 
 Rev must be >= 0x10 
 Read the chipset system configuration to check our mode 
 Must be 66Mhz sync 
 Check the ATA arbitrationtiming is suitable 
 IDEDIR disabled 
 Wrong chip revision 
 Fixed location chipset magic 
 0 = 33Mhz, 1 = 25Mhz 
 Opti 82C700 
 SPDX-License-Identifier: GPL-2.0-only
  AMD Seattle AHCI SATA driver
  Copyright (c) 2015, Advanced Micro Devices
  Author: Brijesh Singh <brijesh.singh@amd.com>
  based on the AHCI SATA platform driver by Jeff Garzik and Anton Vorontsov
 SGPIO Control Register definition
  Bit		Type		Description
  31		RW		OD7.2 (activity)
  30		RW		OD7.1 (locate)
  29		RW		OD7.0 (fault)
  28...8	RW		OD6.2...OD0.0 (3bits per port, 1 bit per LED)
  7		RO		SGPIO feature flag
  6:4		RO		Reserved
  3:0		RO		Number of ports (0 means no port supported)
 get the slot number from the message 
 save off new led state for portslot 
  Generic platform device PATA driver
  Copyright (C) 2006 - 2007  Paul Mundt
  Based on pata_pcmcia:
    Copyright 2005-2006 Red Hat Inc, all rights reserved.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Provide our own set_mode() as we don't want to change anything that has
  already been configured..
 We don't really care 
 Fixup the port shift for platforms that need it 
 	__pata_platform_probe		-	attach a platform interface
 	@dev: device
 	@io_res: Resource representing IO base
 	@ctl_res: Resource representing CTL base
 	@irq_res: Resource representing IRQ and its flags
 	@ioport_shift: IO port shift
 	@__pio_mask: PIO mask
 	@sht: scsi_host_template to use when registering
 	@use16bit: Flag to indicate 16-bit IO instead of 32-bit
 	Register a platform bus IDE interface. Such interfaces are PIO and we
 	assume do not support IRQ sharing.
 	Platform devices are expected to contain at least 2 resources per port:
 		- IO Base (IORESOURCE_IO or IORESOURCE_MEM)
 		- CTL Base (IORESOURCE_IO or IORESOURCE_MEM)
 	and optionally:
 		- IRQ	   (IORESOURCE_IRQ)
 	If the base resources are both mem types, the ioremap() is handled
 	here. For IORESOURCE_IO, it's assumed that there's no remapping
 	necessary.
 	If no IRQ resource is present, PIO polling mode is used instead.
	
	  Check for MMIO
	
	  And the IRQ
	
	  Now that that's out of the way, wire up the port..
	
	  Use polling mode if there's no IRQ
	
	  Handle the MMIO case
 activate 
	
	  Simple resource validation ..
	
	  Get the IO base first
	
	  Then the CTL base
	
	  And the IRQ
 SPDX-License-Identifier: GPL-2.0-or-later
   sata_svw.c - ServerWorks  Apple K2 SATA
   Maintained by: Benjamin Herrenschmidt <benh@kernel.crashing.org> and
 		   Jeff Garzik <jgarzik@pobox.com>
   		    Please ALWAYS copy linux-ide@vger.kernel.org
 		    on emails.
   Copyright 2003 Benjamin Herrenschmidt <benh@kernel.crashing.org>
   Bits from Jeff Garzik, Copyright RedHat, Inc.
   This driver probably works with non-Apple versions of the
   Broadcom chipset...
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware documentation available under NDA.
 ap->flags bits 
 Taskfile registers offsets 
 DMA base 
 SCRs base 
 Others 
 Port stride 
 bar 3 
 bar 5 
 ATAPI DMA not supported 
 Clear the start bit 
 Clear the start bit 
 	k2_bmdma_setup_mmio - Set up PCI IDE BMDMA transaction (MMIO)
 	@qc: Info associated with this ATA transaction.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 load PRD table addr. 
 make sure PRD table writes are visible to controller 
 specify data direction, triple-check start bit is clear 
 issue rw command if this is not a ATA DMA command
 	k2_bmdma_start_mmio - Start a PCI IDE BMDMA transaction (MMIO)
 	@qc: Info associated with this ATA transaction.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 start host DMA transaction 
	 This works around possible data corruption.
	   On certain SATA controllers that can be seen when the rw
	   command is given to the controller before the host DMA is
	   started.
	   On a Read command, the controller would initiate the
	   command to the drive even before it sees the DMA
	   start. When there are very fast drives connected to the
	   controller, or when the data request hits in the drive
	   cache, there is the possibility that the drive returns a
	   part or all of the requested data to the controller before
	   the DMA start is issued.  In this case, the controller
	   would become confused as to what to do with the data.  In
	   the worst case when all the data is returned back to the
	   controller, the controller could hang. In other cases it
	   could return partial data returning in data
	   corruption. This problem has been seen in PPC systems and
	   can also appear on an system with very fast disks, where
	   the SATA controller is sitting behind a number of bridges,
	   and hence there is significant latency between the rw
 issue rw command if the access is to ATA 
 Find  the ata_port 
 Find the OF node for the PCI device proper 
 Match it to a port node 
 chip_svw4 
 chip_svw8 
 chip_svw42 
 chip_svw43 
 allocate host 
	
	  If this driver happens to only be useful on Apple's K2, then
	  we should check that here as it has a normal Serverworks ID
	
	  Check if we have resources mapped at all (second function may
	  have been disabled by firmware)
		 In IDE mode we need to pin the device to ensure that
			pcim_release does not clear the busmaster bit in config
			space, clearing causes busmaster DMA to fail on
 Request and iomap PCI regions 
 different controllers have different number of ports - currently 4 or 8 
	 All ports are on the same function. Multi-function device is no
	 Clear a magic bit in SCR1 according to Darwin, those help
	  some funky seagate drives (though so far, those were already
	  set by the firmware on the machines I had access to)
 Clear SATA error & interrupts we don't use 
 0x240 is device ID for Apple K2 device
  0x241 is device ID for Serverworks Frodo4
  0x242 is device ID for Serverworks Frodo8
  0x24a is device ID for BCM5785 (aka HT1000) HT southbridge integrated SATA
  controller
 SPDX-License-Identifier: GPL-2.0-only
  OF-platform PATA driver
  Copyright (c) 2007  MontaVista Software, Inc.
                      Anton Vorontsov <avorontsov@ru.mvista.com>
 SPDX-License-Identifier: GPL-2.0
  Palmchip BK3710 PATA controller driver
  Copyright (c) 2017 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Based on palm_bk3710.c:
  Copyright (C) 2006 Texas Instruments.
  Copyright (C) 2007 MontaVista Software, Inc., <source@mvista.com>
 in nanoseconds 
 tRP -- Ready to pause time (nsec) 
 tCYCTYP22 -- avg Cycle Time (nsec) 
 tENV is always a minimum of 20 nsec 
 UDMA Mode 0 
 UDMA Mode 1 
 UDMA Mode 2 
 UDMA Mode 3 
 UDMA Mode 4 
 UDMA Mode 5 
 DMA Data Setup 
 udmastb Ultra DMA Access Strobe Width 
 udmatrp Ultra DMA Ready to Pause Time 
 udmaenv Ultra DMA envelop Time 
 Enable UDMA for Device 
 DMA Data Setup 
 Disable UDMA for Device 
 PIO Data Setup 
 FIXME: this is broken also in the old driver 
 TASKFILE Setup 
 conservative "downgrade" for all pre-ATA2 drives 
 use standard timing 
	
	  REVISIT:  the ATA reset signal needs to be managed through a
	  GPIO, which means it should come from platform_data.  Until
	  we get and use such information, we have to trust that things
	  have been reset before we get here.
	
	  Program the IDETIMP Register Value based on the following assumptions
	 
	  (ATA_IDETIMP_IDEEN		, ENABLE ) |
	  (ATA_IDETIMP_PREPOST1	, DISABLE) |
	  (ATA_IDETIMP_PREPOST0	, DISABLE) |
	 
	  DM6446 silicon rev 2.1 and earlier have no observed net benefit
	  from enabling prefetchpostwrite.
	
	  UDMACTL Ultra-ATA DMA Control
	  (ATA_UDMACTL_UDMAP1	, 0 ) |
	  (ATA_UDMACTL_UDMAP0	, 0 )
	 
	
	  MISCCTL Miscellaneous Conrol Register
	  (ATA_MISCCTL_HWNHLD1P	, 1 cycle)
	  (ATA_MISCCTL_HWNHLD0P	, 1 cycle)
	  (ATA_MISCCTL_TIMORIDE	, 1)
	
	  IORDYTMP IORDY Timer for Primary Register
	  (ATA_IORDYTMP_IORDYTMP	, DISABLE)
	
	  Configure BMISP Register
	  (ATA_BMISP_DMAEN1	, DISABLE )	|
	  (ATA_BMISP_DMAEN0	, DISABLE )	|
	  (ATA_BMISP_IORDYINT	, CLEAR)	|
	  (ATA_BMISP_INTRSTAT	, CLEAR)	|
	  (ATA_BMISP_DMAERROR	, CLEAR)
 NOTE:  round down to meet minimum timings; we count in clocks 
 configure the Palmchip controller 
 allocate host 
 activate 
 work with hotplug and coldplug 
   pata_piccolo.c - Toshiba Piccolo PATASATA controller driver.
   This is basically an update to ata_generic.c to add Toshiba Piccolo support
   then split out to keep ata_generic "clean".
   Copyright 2005 Red Hat Inc, all rights reserved.
   Elements from idepcigeneric.c
 	    Copyright (C) 2001-2002	Andre Hedrick <andre@linux-ide.org>
 	    Portions (C) Copyright 2002  Red Hat Inc <alan@redhat.com>
   May be copied or modified under the terms of the GNU General Public License
   The timing data tablesprogramming info are courtesy of the NetBSD driver
 For reg 0x50 low word & E088 
 Keep the other bits 
 spread into three nibbles 
 	ata_tosh_init_one		-	attach generic IDE
 	@dev: PCI device found
 	@id: match entry
 	Called each time a matching IDE interface is found. We check if the
 	interface is one we wish to claim and if so we perform any chip
 	specific hacks then let the ATA layer do the heavy lifting.
 Just one port for the moment 
 SPDX-License-Identifier: GPL-2.0-or-later
   Helper library for PATA timings
   Copyright 2003-2004 Red Hat, Inc.  All rights reserved.
   Copyright 2003-2004 Jeff Garzik
  This mode timing computation functionality is ported over from
  driversideide-timing.h and was originally written by Vojtech Pavlik
  PIO 0-4, MWDMA 0-2 and UDMA 0-6 timings (in nanoseconds).
  These were taken from ATAATAPI-6 standard, rev 0a, except
  for UDMA6, which is currently supported only by Maxtor drives.
  For PIO 56 MWDMA 34 see the CFA specification 3.0.
	{ XFER_PIO_SLOW, 120, 290, 240, 960, 290, 240, 0,  960,   0 }, 
	{ XFER_UDMA_SLOW,  0,   0,   0,   0,   0,   0, 0,    0, 150 }, 
	
	  Find the mode.
	
	  If the drive is an EIDE drive, it can tell us it needs extended
	  PIOMW_DMA cycle timing.
 EIDE drive 
	
	  Convert the timing to bus clock counts.
	
	  Even in DMAUDMA modes we still use PIO access for IDENTIFY,
	  S.M.A.R.T  and some other commands. We have to ensure that the
	  DMA cycle timing is slowerequal than the fastest PIO timing.
	
	  Lengthen active & recovery time so that cycle time is correct.
	
	  In a few cases quantisation may produce enough errors to
	  leave t->cycle too low for the sum of active and recovery
	  if so we must correct this.
 SPDX-License-Identifier: GPL-2.0-only
  pata_cs5536.c	- CS5536 PATA for new ATA layer
 			  (C) 2007 Martin K. Petersen <mkp@mkp.net>
 			  (C) 2011 Bartlomiej Zolnierkiewicz
  Documentation:
 	Available from AMD web site.
  The IDE timing registers for the CS5536 live in the Geode Machine
  Specific Register file and not PCI config space.  Most BIOSes
  virtualize the PCI registers so the chip looks like a standard IDE
  controller.	Unfortunately not all implementations get this right.
  In particular some have problems with unaligned accesses to the
  virtualized PCI registers.  This driver always does full dword
  writes to work around the issue.  Also, in case of a bad BIOS this
  driver can be loaded with the "msr=1" parameter which forces using
  the Machine Specific Registers to configure the device.
 avoid accidental MSR usage on, e.g. x86-64 
 Some Bachmann OT200 devices have a non working UDMA support due a
  missing resistor.
 	cs5536_cable_detect	-	detect cable type
 	@ap: Port to detect on
 	Perform cable detection for ATA66 capable cable.
 	Returns a cable type.
 	cs5536_set_piomode		-	PIO setup
 	@ap: ATA interface
 	@adev: device on the interface
 	cs5536_set_dmamode		-	DMA timing setup
 	@ap: ATA interface
 	@adev: Device being configured
 MWDMA 
 	cs5536_init_one
 	@dev: PCI device
 	@id: Entry in match table
 SPDX-License-Identifier: GPL-2.0-only
     pata_oldpiix.c - Intel PATASATA controllers
 	(C) 2005 Red Hat
     Some parts based on ata_piix.c by Jeff Garzik and others.
     Early PIIX differs significantly from the later PIIX as it lacks
     SITRE and the slave timing registers. This means that you have to
     set timing per channel, or be clever. Libata tells us whenever it
     does drive selection and we use this to reload the timings.
     Because of these behaviour differences PIIX gets its own driver module.
 	oldpiix_pre_reset		-	probe begin
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Set up cable type and use generic probe init
 port 0 
 port 1 
 	oldpiix_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device whose timings we are configuring
 	Set PIO mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
	
	 	See Intel Document 298600-004 for the timing programing rules
	 	for PIIXICH. Note that the early PIIX does not have the slave
	 	timing port at 0x44.
 ISP  RTC 
 TIME 
 IE 
 Intel specifies that the prefetchposting is for disk only 
 PPE 
	
	  Set PPE, IE and TIME as appropriate.
	  Clear the other drive's timing bits.
 Track which port is configured 
 	oldpiix_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set MWDMA mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 ISP  RTC 
	
	  MWDMA is driven by the PIO timings. We must also enable
	  IORDY unconditionally along with TIME1. PPE has already
	  been set when the PIO timing was set.
 IORDY|TIME0 
 Intel specifies that the PPE functionality is for disk only 
 PPE enable 
	 If the drive MWDMA is faster than it can do PIO then
 Enable DMA timing only 
 PIO cycles in PIO0 
	 Mask out the relevant control and timing bits we will load. Also
 Track which port is configured 
 	oldpiix_qc_issue	-	command issue
 	@qc: command pending
 	Called when the libata layer is about to issue a command. We wrap
 	this interface so that we can load the correct ATA timings if
 	necessary. Our logic also clears TIME0TIME1 for the other device so
 	that, even if we get this wrong, cycles to the other device will
 	be made PIO0.
 	oldpiix_init_one - Register PIIX ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in oldpiix_pci_tbl matching with @pdev
 	Called from kernel PCI layer.  We probe for combined mode (sigh),
 	and then hand over control to libata, for it to do the rest.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 terminate list 
 SPDX-License-Identifier: GPL-2.0-only
  driversatapata_palmld.c
  Driver for IDE channel in Palm LifeDrive
  Based on research of:
 		Alex Osborne <ato@meshy.org>
  Rewrite for mainline:
 		Marek Vasut <marek.vasut@gmail.com>
  Rewritten version based on pata_ixp4xx_cf.c:
  ixp4xx PATACompact Flash driver
  Copyright (C) 2006-07 Tower Technologies
  Author: Alessandro Zummo <a.zummo@towertech.it>
 allocate host 
 remap drive's physical memory address 
 request and activate power and reset GPIOs 
 Assert reset to reset the drive 
 setup the ata port 
 memory mapping voodoo 
 start the port 
 activate host 
 power down on failure 
 power down the HDD 
 SPDX-License-Identifier: GPL-2.0-only
  Faraday Technology FTIDE010 driver
  Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>
  Includes portions of the SL2312SL3516Gemini PATA driver
  Copyright (C) 2003 StorLine, Inc <jason@storlink.com.tw>
  Copyright (C) 2009 Janos Laube <janos.dev@gmail.com>
  Copyright (C) 2010 Frederic Pecourt <opengemini@free.fr>
  Copyright (C) 2011 Tobias Waldvogel <tobias.waldvogel@gmail.com>
  struct ftide010 - state container for the Faraday FTIDE010
  @dev: pointer back to the device representing this controller
  @base: remapped IO space address
  @pclk: peripheral clock for the IDE block
  @host: pointer to the ATA host for this device
  @master_cbl: master cable type
  @slave_cbl: slave cable type
  @sg: Gemini SATA bridge pointer, if running on the Gemini
  @master_to_sata0: Gemini SATA bridge: the ATA master is connected
  to the SATA0 bridge
  @slave_to_sata0: Gemini SATA bridge: the ATA slave is connected
  to the SATA0 bridge
  @master_to_sata1: Gemini SATA bridge: the ATA master is connected
  to the SATA1 bridge
  @slave_to_sata1: Gemini SATA bridge: the ATA slave is connected
  to the SATA1 bridge
 Gemini-specific properties 
 Master 
 Slave 
 These registers are mapped directly to the IDE registers 
 Set this bit for UDMA mode 5 and 6 
 0 = 50 MHz, 1 = 66 MHz 
 Enable UDMA on a device 
  Bus timings
  The unit of the below required timings is two clock periods of the ATA
  reference clock which is 30 nanoseconds per unit at 66MHz and 20
  nanoseconds per unit at 50 MHz. The PIO timings assume 33MHz speed for
  PIO.
  pio_active_time: array of 5 elements for T2 timing for Mode 0,
  1, 2, 3 and 4. Range 0..15.
  pio_recovery_time: array of 5 elements for T2l timing for Mode 0,
  1, 2, 3 and 4. Range 0..15.
  mdma_50_active_time: array of 4 elements for Td timing for multi
  word DMA, Mode 0, 1, and 2 at 50 MHz. Range 0..15.
  mdma_50_recovery_time: array of 4 elements for Tk timing for
  multi word DMA, Mode 0, 1 and 2 at 50 MHz. Range 0..15.
  mdma_66_active_time: array of 4 elements for Td timing for multi
  word DMA, Mode 0, 1 and 2 at 66 MHz. Range 0..15.
  mdma_66_recovery_time: array of 4 elements for Tk timing for
  multi word DMA, Mode 0, 1 and 2 at 66 MHz. Range 0..15.
  udma_50_setup_time: array of 4 elements for Tvds timing for ultra
  DMA, Mode 0, 1, 2, 3, 4 and 5 at 50 MHz. Range 0..7.
  udma_50_hold_time: array of 4 elements for Tdvh timing for
  multi word DMA, Mode 0, 1, 2, 3, 4 and 5 at 50 MHz, Range 0..7.
  udma_66_setup_time: array of 4 elements for Tvds timing for multi
  word DMA, Mode 0, 1, 2, 3, 4, 5 and 6 at 66 MHz. Range 0..7.
  udma_66_hold_time: array of 4 elements for Tdvh timing for
  multi word DMA, Mode 0, 1, 2, 3, 4, 5 and 6 at 66 MHz. Range 0..7.
  We set 66 MHz for all MWDMA modes
  We set 66 MHz for UDMA modes 3, 4 and 6 and no others
 Target device 0 (master) or 1 (slave) 
 A special bit needs to be set for modes 5 and 6 
 This will affect all devices 
	
	  Store the current device (master or slave) in ap->private_data
	  so that .qc_issue() can detect if this changes and reprogram
	  the DMA settings.
  We implement our own qc_issue() callback since we may need to set up
  the timings differently for master and slave transfers: the CLK_MOD_REG
  and MWDMA_TIMING_REG is shared between master and slave, so reprogramming
  this may be necessary.
	
	  If the device changed, i.e. slave->master, master->slave,
	  then set up the DMA mode again so we are sure the timings
	  are correct.
 Avoid double-starting 
 Avoid double-starting 
 -ENODEV;
 Avoid double-stopping 
 Avoid double-stopping 
	
	  Return the master cable, I have no clue how to return a different
	  cable for the slave than for the master.
 Look up SATA bridge 
 Special ops 
 Flag port as SATA-capable 
 This device has broken DMA, only PIO works 
	
	  We assume that a simple 40-wire cable is used in the PATA mode.
	  if you're adding a system using the PATA interface, make sure
	  the right cable is set up here, it might be necessary to use
	  special hardware detection or encode the cable type in the device
	  tree with special properties.
 Some special Cortina Gemini init, if needed 
		
		  We need to know which instance is probing (the
		  Gemini has two instances of FTIDE010) and we do
		  this simply by looking at the physical base
		  address, which is 0x63400000 for ATA1, else we
		  are ATA0. This will also set up the cable types.
 Else assume we are connected using PATA40 
 SPDX-License-Identifier: GPL-2.0-or-later
  Generic PXA PATA driver
  Copyright (C) 2010 Marek Vasut <marek.vasut@gmail.com>
  DMA interrupt handler.
  Prepare taskfile for submission.
  Configure the DMA controller, load the DMA descriptors, but don't start the
  DMA controller yet. Only issue the ATA command.
  Execute the DMA transfer.
  Wait until the DMA transfer completes, then stop the DMA controller.
  Read DMA status. The bmdma_stop() will take care of properly finishing the
  DMA transfer so we always have DMA-complete interrupt here.
  No IRQ register present so we do nothing.
  Check for ATAPI DMA. ATAPI DMA is unsupported by this driver. It's still
  unclear why ATAPI has DMA issues.
	
	  Resource validation, three resources are needed:
	   - CMD port base address
	   - CTL port base address
	   - DMA port base address
	   - IRQ pin
	
	  CMD port base address
	
	  CTL port base address
	
	  DMA port base address
	
	  IRQ pin
	
	  Allocate the host
	
	  Adjust register offsets
	
	  Allocate and load driver's internal data structure
	
	  Request the DMA channel
	
	  Activate the ATA host
 SPDX-License-Identifier: GPL-2.0-or-later
  libata-trace.c - trace functions for libata
  Copyright 2015 Hannes Reinecke
  Copyright 2015 SUSE Linux GmbH
 SPDX-License-Identifier: GPL-2.0-or-later
   Promise PATA TX2TX4TX2000133 IDE driver for pdc20268 to pdc20277.
   Ported to libata by:
   Albert Lee <albertcc@tw.ibm.com> IBM Corporation
   Copyright (C) 1998-2002		Andre Hedrick <andre@linux-ide.org>
   Portions Copyright (C) 1999 Promise Technology, Inc.
   Author: Frank Tiernan (frankt@promise.com)
   Released under terms of General Public License
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Hardware information only available under NDA.
  ATA Timing Tables based on 133MHz controller clock.
  These tables are only used when the controller is in 133MHz clock.
  If the controller is in 100MHz clock, the ASIC hardware will
  set the timing registers automatically when "set feature" command
  is issued to the device. However, if the controller clock is 133MHz,
  the following tables must be used.
 PIO mode 0 
 PIO mode 1 
 PIO mode 2 
 PIO mode 3, IORDY on, Prefetch off 
 PIO mode 4, IORDY on, Prefetch off 
 MDMA mode 0 
 MDMA mode 1 
 MDMA mode 2 
 UDMA mode 0 
 UDMA mode 1 
 UDMA mode 2 
 UDMA mode 3 
 UDMA mode 4 
 UDMA mode 5 
 UDMA mode 6 
 terminate list 
 PDC_UDMA_100 
 PDC_UDMA_133 
 	port_mmio - Get the MMIO address of PDC2027x extended registers
 	@ap: Port
 	@offset: offset from mmio base
 	dev_mmio - Get the MMIO address of PDC2027x extended registers
 	@ap: Port
 	@adev: device
 	@offset: offset from mmio base
 	pdc2027x_cable_detect - Probe host controller cable detect info
 	@ap: Port for which cable detect info is desired
 	Read 80c cable indicator from Promise extended register.
       This register is latched when the system is reset.
 	LOCKING:
 	None (inherited from caller).
 check cable detect results 
  pdc2027x_port_enabled - Check PDC ATA control register to see whether the port is enabled.
  @ap: Port to check
 	pdc2027x_prereset - prereset for PATA host controller
 	@link: Target link
 	@deadline: deadline jiffies for the operation
 	Probeinit including cable detection.
 	LOCKING:
 	None (inherited from caller).
 Check whether port enabled 
 	pdc2027x_mode_filter	-	mode selection filter
 	@adev: ATA device
 	@mask: list of modes proposed
 	Block UDMA on devices that cause trouble with this controller.
 Check for slave of a Maxtor at UDMA6 
 If the master is a maxtor in UDMA6 then the slave should not use UDMA 6 
 	pdc2027x_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port to configure
 	@adev: um
 	Set PIO mode for device.
 	LOCKING:
 	None (inherited from caller).
 Sanity check 
 Set the PIO timing registers using value table for 133MHz 
 	pdc2027x_set_dmamode - Initialize host controller PATA UDMA timings
 	@ap: Port to configure
 	@adev: um
 	Set UDMA mode for device.
 	LOCKING:
 	None (inherited from caller).
 Set the UDMA timing registers with value table for 133MHz 
			
			  Turn off tHOLD.
			  If tHOLD is '1', the hardware will add half clock for data hold time.
			  This code segment seems to be no effect. tHOLD will be overwritten below.
 Set the MDMA timing registers with value table for 133MHz 
 	pdc2027x_set_mode - Set the timing registers back to correct values.
 	@link: link to configure
 	@r_failed: Returned device for failure
 	The pdc2027x hardware will look at "SET FEATURES" and change the timing registers
 	automatically. The values set by the hardware might be incorrect, under 133Mhz PLL.
 	This function overwrites the possibly incorrect values set by the hardware to be correct.
		
		  Enable prefetch if the device support PIO only.
 	pdc2027x_check_atapi_dma - Check whether ATAPI DMA can be supported for this command
 	@qc: Metadata associated with taskfile to check
 	LOCKING:
 	None (inherited from caller).
 	RETURNS: 0 when ATAPI DMA can be used
 		 1 otherwise
 atapi dma off by default 
	
	  This workaround is from Promise's GPL driver.
	  If ATAPI DMA is used for commands not in the
	  following white list, say MODE_SENSE and REQUEST_SENSE,
	  pdc2027x might hit the irq lost problem.
 READ_DVD_STRUCTURE 
 READ_CD 
 ATAPI DMA is ok 
  pdc_read_counter - Read the ctr counter
  @host: target ATA host
 Read the counter values again for verification 
	
	  The 30-bit decreasing counter are read by 2 pieces.
	  Incorrect value may be read when both bccrh and bccrl are changing.
	  Ex. When 7900 decrease to 78FF, wrong value 7800 might be read.
  pdc_adjust_pll - Adjust the PLL input clock in Hz.
  @host: target ATA host
  @pll_clock: The input of PLL in HZ
  @board_idx: board identifier
 Sanity check 
	 Show the current clock value of PLL control register
	  (maybe already configured by the firmware)
	
	  Calculate the ratio of F, R and OD
	  POUT = (F + 2)  (( R + 2)  NO)
 8.6x 
 Using NO = 0x01, R = 0x0D 
 12.9x 
 Using NO = 0x01, R = 0x08 
 16.1x 
 Using NO = 0x01, R = 0x06 
 64x 
 Invalid ratio 
 Invalid F 
 flush 
 Wait the PLL circuit to be stable 
	
	   Show the current clock value of PLL control register
	  (maybe configured by the firmware)
  pdc_detect_pll_input_clock - Detect the PLL input clock in Hz.
  @host: target ATA host
  Ex. 16949000 on 33MHz PCI bus for pdc20275.
      Half of the PCI clock.
 Start the test mode 
 flush 
 Read current counter value 
 Let the counter run for 100 ms. 
 Read the counter values again 
 Stop the test mode 
 flush 
 calculate the input clock in Hz 
  pdc_hardware_init - Initialize the hardware.
  @host: target ATA host
  @board_idx: board identifier
	
	  Detect PLL input clock rate.
	  On some system, where PCI bus is running at non-standard clock rate.
	  Ex. 25MHz or 40MHz, we have to adjust the cycle_time.
	  The pdc20275 controller employs PLL circuit to help correct timing registers setting.
 Adjust PLL control register 
  pdc_ata_setup_port - setup the mmio address
  @port: ata ioports to setup
  @base: base address
  pdc2027x_init_one - PCI probe function
  Called when an instance of PCI adapter is inserted.
  This function checks whether the hardware is supported,
  initialize hardware and register an instance of ata_host to
  libata.  (implements struct pci_driver.probe() )
  @pdev: instance of pci_dev found
  @ent:  matching entry in the id_tbl[]
 alloc host 
 acquire resources and fill host 
pci_enable_intx(pdev);
 initialize adapter 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 STMicroelectronics Limited
  Authors: Francesco Virlinzi <francesco.virlinzi@st.com>
 	    Alexandre Torgue <alexandre.torgue@st.com>
 SPDX-License-Identifier: GPL-2.0
  Amiga Gayle PATA controller driver
  Copyright (c) 2018 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Based on gayle.c:
      Created 12 Jul 1997 by Geert Uytterhoeven
 FIXME: is this needed? 
 Transfer multiple of 2 bytes 
 Transfer trailing byte, if any. 
 Point buf to the tail of buffer 
  Provide our own set_mode() as we don't want to change anything that has
  already been configured..
 We don't really care 
 allocate host 
 SPDX-License-Identifier: GPL-2.0-only
   RZ10001001 driver based upon
   linuxdriversidepcirz1000.c	Version 0.06	January 12, 2003
   Copyright (C) 1995-1998  Linus Torvalds & author (see below)
   Principal Author:  mlord@pobox.com (Mark Lord)
   See linuxMAINTAINERS for address of current maintainer.
   This file provides support for disabling the buggy read-ahead
   mode of the RZ1000 IDE chipset, commonly used on Intel motherboards.
 	rz1000_set_mode		-	mode setting function
 	@link: ATA link
 	@unused: returned device on set_mode failure
 	Use a non standard set_mode function. We don't want to be tuned. We
 	would prefer to be BIOS generic but for the fact our hardware is
 	whacked out.
 We don't really care 
 Be exceptionally paranoid as we must be sure to apply the fix 
 	rz1000_init_one - Register RZ1000 ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in rz1000_pci_tbl matching with @pdev
 	Configure an RZ1000 interface. This doesn't require much special
 	handling except that we MUST kill the chipset readahead or the
 	user may experience data corruption.
 Not safe to use so skip 
	 If this fails on resume (which is a "can't happen" case), we
 SPDX-License-Identifier: GPL-2.0-only
     pata_artop.c - ARTOP ATA controller driver
 	(C) 2006 Red Hat
 	(C) 2007,2011 Bartlomiej Zolnierkiewicz
     Based in part on driversidepciaec62xx.c
 	Copyright (C) 1999-2002	Andre Hedrick <andre@linux-ide.org>
 	865865R fixes for Macintosh card version from a patch to the old
 		driver by Thibaut VARENE <varenet@parisc-linux.org>
 	When setting the PCI latency we must set 0x80 or higher for burst
 		performance Alessandro Zummo <alessandro.zummo@towertech.it>
 	TODO
 	Investigate no_dsc on 850R
 	Clock detect
 	The ARTOP has 33 Mhz and "over clocked" timing tables. Until we
 	get PCI bus speed functionality we leave this as 0. Its a variable
 	for when we get the functionality and also for folks wanting to
 	test stuff.
 	artop62x0_pre_reset	-	probe begin
 	@link: link
 	@deadline: deadline jiffies for the operation
 	Nothing complicated needed here.
 port 0 
 port 1 
 Odd numbered device ids are the units with enable bits. 
 	artop6260_cable_detect	-	identify cable type
 	@ap: Port
 	Identify the cable type for the ARTOP interface in question
 	artop6210_load_piomode - Load a set of PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device
 	@pio: PIO mode
 	Set PIO mode for device, in host controller PCI config space. This
 	is used both to set PIO timings in PIO mode and also to set the
 	matching PIO clocking for UDMA, as well as the MWDMA timings.
 	LOCKING:
 	None (inherited from caller).
 Load the PIO timing activerecovery bits 
 	artop6210_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device we are configuring
 	Set PIO mode for device, in host controller PCI config space. For
 	ARTOP we must also clear the UDMA bits if we are not doing UDMA. In
 	the event UDMA is used the later call to set_dmamode will set the
 	bits as required.
 	LOCKING:
 	None (inherited from caller).
 Clear the UDMA mode bits (set_dmamode will redo this if needed) 
 	artop6260_load_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device we are configuring
 	@pio: PIO mode
 	Set PIO mode for device, in host controller PCI config space. The
 	ARTOP6260 and relatives store the timing data differently.
 	LOCKING:
 	None (inherited from caller).
 Load the PIO timing activerecovery bits 
 	artop6260_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device we are configuring
 	Set PIO mode for device, in host controller PCI config space. For
 	ARTOP we must also clear the UDMA bits if we are not doing UDMA. In
 	the event UDMA is used the later call to set_dmamode will set the
 	bits as required.
 	LOCKING:
 	None (inherited from caller).
 Clear the UDMA mode bits (set_dmamode will redo this if needed) 
 One nibble per drive 
 	artop6210_set_dmamode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device whose timings we are configuring
 	Set DMA mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 Load the PIO timing activerecovery bits 
 Add ultra DMA bits if in UDMA mode 
 	artop6260_set_dmamode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device we are configuring
 	Set DMA mode for device, in host controller PCI config space. The
 	ARTOP6260 and relatives store the timing data differently.
 	LOCKING:
 	None (inherited from caller).
 Load the PIO timing activerecovery bits 
 Add ultra DMA bits if in UDMA mode 
 One nibble per drive 
 	artop6210_qc_defer	-	implement serialization
 	@qc: command
 	Issue commands per host on this chip.
 First apply the usual rules 
	 Now apply serialization rules. Only allow a command if the
 BIOS may have left us in UDMA, clear it before libata probe 
		 Mac systems come up with some registers not set as we
 Clear reset & test bits 
		 PCI latency must be > 0x80 for burst mode, tweak it
		  if required.
 Enable IRQ output and burst mode 
 	artop_init_one - Register ARTOP ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@id: PCI device ID
 	Called from kernel PCI layer.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 6210 variant 
 6260 
 6280 or 6280 + fast 
 terminate list 
 SPDX-License-Identifier: GPL-2.0-only
     pata_it8213.c - iTE Tech. Inc.  IT8213 PATA driver
     The IT8213 is a very Intel ICH like device for timing purposes, having
     a similar register layout and the same split clock arrangement. Cable
     detection is different, and it does not have slave channels or all the
     clutter of later ICHSATA setups.
 	it8213_pre_reset	-	probe begin
 	@link: link
 	@deadline: deadline jiffies for the operation
 	Filter out ports by the enable bits before doing the normal reset
 	and probe.
 port 0 
 	it8213_cable_detect	-	check for 4080 pin
 	@ap: Port
 	Perform cable detection for the 8213 ATA interface. This is
 	different to the PIIX arrangement
 The initial docs are incorrect 
 	it8213_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device whose timings we are configuring
 	Set PIO mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
	
	 	See Intel Document 298600-004 for the timing programing rules
	 	for PIIXICH. The 8213 is a clone so very similar
 ISP  RTC 
 TIME 
 PIO 34 require IORDY 
 IE 
 Bit 2 is set for ATAPI on the IT8213 - reverse of ICHPIIX 
 PPE 
 Set PPE, IE, and TIME as appropriate 
 Slave timing in separate register 
 Ensure SITRE is set 
 	it8213_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set UDMAMWDMA mode for device, in host controller PCI config space.
 	This device is basically an ICH alike.
 	LOCKING:
 	None (inherited from caller).
 ISP  RTC 
 Clocks follow the PIIX style 
 100Mhz 
 66Mhz 
 33Mhz 
 Load the UDMA cycle time 
 Load the clock selection 
		
		  MWDMA is driven by the PIO timings. We must also enable
		  IORDY unconditionally along with TIME1. PPE has already
		  been set when the PIO timing was set.
 IORDY|TIME1 
		 If the drive MWDMA is faster than it can do PIO then
 Enable DMA timing only 
 PIO cycles in PIO0 
 Slave 
 Mask out IORDY|TIME1|DMAONLY 
 Load the matching timing 
 Master 
			master_data &= 0xCCF4;	 Mask out IORDY|TIME1|DMAONLY
 	it8213_init_one - Register 8213 ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in it8213_pci_tbl matching with @pdev
 	Called from kernel PCI layer.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 Current IT8213 stuff is single port 
 terminate list 
 SPDX-License-Identifier: GPL-2.0-or-later
  DaVinci DA850 AHCI SATA platform driver
 SATA PHY Control Register offset from AHCI base 
 Enable SATA clock receiver 
	
	  We need to determine the value of the multiplier (MPY) bits.
	  In order to include the 12.5 multiplier we need to first divide
	  the refclk rate by ten.
	 
	  __div64_32() turned out to be unreliable, sometimes returning
	  false results.
	
	  What we have now is (multiplier  10).
	 
	  Let's determine the actual register value we need to write.
		
		  We should have divided evenly - if not, return an invalid
		  value.
	
	  There's an issue with the SATA controller on da850 SoCs: if we
	  enable Port Multiplier support, but the drive is connected directly
	  to the board, it can't be detected. As a workaround: if PMP is
	  enabled, we first call ahci_do_softreset() and pass it the result of
	  sata_srst_pmp(). If this call fails, we retry with pmp = 0.
	
	  In order to correctly service the LCD controller of the da850 SoC,
	  we increased the PLL0 frequency to 456MHz from the default 300MHz.
	 
	  This made the SATA controller unstable and the hardreset operation
	  does not always succeed the first time. Before really giving up to
	  bring up the link, retry the reset a couple times.
	
	  No need to override .pmp_softreset - it's only used for actual
	  PMP-enabled ports.
	
	  Internally ahci_platform_get_resources() calls clk_get(dev, NULL)
	  when trying to obtain the functional clock. This SATA controller
	  uses two clocks for which we specify two connection ids. If we don't
	  have the functional clock at this point - call clk_get() again with
	  con_id = "fck".
	
	  The second clock used by ahci-da850 is the external REFCLK. If we
	  didn't get it from ahci_platform_get_resources(), let's try to
	  specify the con_id in clk_get().
  driversatapata_mpc52xx.c
  libata driver for the Freescale MPC52xx on-chip IDE interface
  Copyright (C) 2006 Sylvain Munaut <tnt@246tNt.com>
  Copyright (C) 2003 Mipsys - Benjamin Herrenschmidt
  UDMA support based on patches by Freescale (Bernard Kuhn, John Rigby),
  Domen Puncer and Tim Yamin.
  This file is licensed under the terms of the GNU General Public License
  version 2. This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
 Private structures used by the driver 
 DMA 
 ATAPI-4 PIO specs (in ns) 
 ======================================================================== 
 ATAPI-4 MDMA specs (in clocks) 
 ATAPI-4 UDMA specs (in clocks) 
 ======================================================================== 
 Bit definitions inside the registers 
 State machine reset 
 FIFO Reset 
 Enable interrupt in PIO 
 Drive supports IORDY protocol 
 Transaction in progress 
 UDMA Read Extended Pause 
 Read Error 
 Write Error 
 FIFO Empty 
 FIFO Error 
 Write DMA 
 Read DMA 
 UDMA enabled 
 Enable drive interrupt to CPU in DMA mode 
 FIFO Flush enable in Rx mode 
 FIFO Reset 
 Host UDMA burst terminate 
 Structure of the hardware registers 
 Host interface registers 
 ATA + 0x00 Host configuration 
 ATA + 0x04 Host controller status 
 ATA + 0x08 PIO Timing 1 
 ATA + 0x0c PIO Timing 2 
 ATA + 0x10 MDMA Timing 1 
 ATA + 0x14 MDMA Timing 2 
 ATA + 0x18 UDMA Timing 1 
 ATA + 0x1c UDMA Timing 2 
 ATA + 0x20 UDMA Timing 3 
 ATA + 0x24 UDMA Timing 4 
 ATA + 0x28 UDMA Timing 5 
 ATA + 0x2c ATA share counter 
 FIFO registers 
 ATA + 0x3c 
 ATA + 0x40 
 ATA + 0x41 
 ATA + 0x44 
 ATA + 0x4a 
 ATA + 0x4e 
 ATA + 0x52 
 ATA + 0x56 
 ATA + 0x5a 
 Drive TaskFile registers 
 ATA + 0x5c TASKFILE ControlAlt Status 
 ATA + 0x60 TASKFILE Data 
 ATA + 0x64 TASKFILE FeaturesError 
 ATA + 0x68 TASKFILE Sector Count 
 ATA + 0x6c TASKFILE Sector Number 
 ATA + 0x70 TASKFILE Cylinder Low 
 ATA + 0x74 TASKFILE Cylinder High 
 ATA + 0x78 TASKFILE DeviceHead 
 ATA + 0x7c TASKFILE CommandStatus 
 ATA + 0x7d ATA Host DMA Mode configuration 
 ======================================================================== 
 Aux fns                                                                  
 ======================================================================== 
 MPC52xx low level hw control 
 Clear share_cnt (all sample code do this ...) 
 Configure and reset host 
 Set the time slot to 1us 
 Init timings to PIO0 
 ======================================================================== 
 libata driver                                                            
 ======================================================================== 
 Check FIFO is OK... 
 Setup FIFO if direction changed 
 Configure FIFO with granularity to 7 
 Set FIFO Reset bit (FR) 
 Setup FIFO if direction changed 
 Configure FIFO with granularity to 4 
 Check FIFO is OK... 
 Check FIFO is OK... 
 Don't have a classic reg block 
 activate host 
 ======================================================================== 
 OF Platform driver                                                       
 ======================================================================== 
 Get ipb frequency 
	 Get device base address from device tree, request the region
	
	  By default, all DMA modes are disabled for the MPC5200.  Some
	  boards don't have the required signals routed to make DMA work.
	  Also, the MPC5200B has a silicon bug that causes data corruption
	  with UDMA if it is used at the same time as the LocalPlus bus.
	 
	  Instead of trying to guess what modes are usable, check the
	  ATA device tree node to find out what DMA modes work on the board.
	  UDMAMWDMA modes can also be forced by adding "libata.force=<mode>"
	  to the kernel boot parameters.
	 
	  The MPC5200 ATA controller supports MWDMA modes 0, 1 and 2 and
	  UDMA modes 0, 1 and 2.
 Prepare our private structure 
 Allocate a BestComm task for DMA 
 Init the hw 
 Register ourselves to libata 
 Deregister the ATA interface 
 Clean up DMA 
 SPDX-License-Identifier: GPL-2.0-only
  pata-cs5530.c 	- CS5530 PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
  based upon cs5530.c by Mark Lord.
  Loosely based on the piix & svwks drivers.
  Documentation:
 	Available from AMD web site.
 	cs5530_set_piomode		-	PIO setup
 	@ap: ATA interface
 	@adev: device on the interface
 	Set our PIO requirements. This is fairly simple on the CS5530
 	chips.
 Find out which table to use 
 Now load the right timing register 
 	cs5530_set_dmamode		-	DMA timing setup
 	@ap: ATA interface
 	@adev: Device being configured
 	We cannot mix MWDMA and UDMA without reloading timings each switch
 	master to slave. We track the last DMA setup in order to minimise
 	reloads.
 Find out which table to use 
 Merge in the PIO format bit 
 Master 
 UDMA for both 
 MWDMA for both 
 Set the DMA capable bit in the BMDMA area 
 Remember the last DMA setup we did 
 	cs5530_qc_issue		-	command issue
 	@qc: command pending
 	Called when the libata layer is about to issue a command. We wrap
 	this interface so that we can load the correct ATA timings if
 	necessary.  Specifically we have a problem that there is only
 	one MWDMAUDMA bit.
 See if the DMA settings could be wrong 
 Maybe, but do the channels match MWDMAUDMA ? 
 Switch the mode bits 
 	cs5530_init_chip	-	Chipset init
 	Perform the chip initialisation work that is shared between both
 	setup and resume paths
	
	  Set PCI CacheLineSize to 16-bytes:
	  --> Write 0x04 into 8-bit PCI CACHELINESIZE reg of function 0 of the cs5530
	 
	  Note: This value is constant because the 5530 is only a Geode companion
	
	  Disable trapping of UDMA register accesses (Win98 hack):
	  --> Write 0x5006 into 16-bit reg at offset 0xd0 of function 0 of the cs5530
	
	  Bit-1 at 0x40 enables MemoryWriteAndInvalidate on internal X-bus:
	  The other settings are what is necessary to get the register
	  into a sane state for IDE DMA operation.
	
	  Set max PCI burst size (16-bytes seems to work best):
	 	   16bytes: set bit-1 at 0x41 (reg value of 0x16)
	 	all others: clear bit-1 at 0x41, and do:
	 	  128bytes: OR 0x00 at 0x41
	 	  256bytes: OR 0x04 at 0x41
	 	  512bytes: OR 0x08 at 0x41
	 	 1024bytes: OR 0x0c at 0x41
	
	  These settings are necessary to get the chip
	  into a sane state for IDE DMA operation.
 	cs5530_init_one		-	Initialise a CS5530
 	@pdev: PCI device
 	@id: Entry in match table
 	Install a driver for the newly found CS5530 companion chip. Most of
 	this is just housekeeping. We have to set the chip up correctly and
 	turn off various bits of emulation magic.
 The docking connector doesn't do UDMA, and it seems not MWDMA 
 Chip initialisation 
 Now kick off ATA set up 
 If we fail on resume we are doomed 
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0-only
  sata_inic162x.c - Driver for Initio 162x SATA controllers
  Copyright 2006  SUSE Linux Products GmbH
  Copyright 2006  Tejun Heo <teheo@novell.com>
   WARNING 
  This driver never worked properly and unfortunately data corruption is
  relatively common.  There isn't anyone working on the driver and there's
  no support from the vendor.  Do not use this driver in any production
  environment.
  http:thread.gmane.orggmane.linux.debian.devel.bugs.rc378525focus=54491
  https:bugzilla.kernel.orgshow_bug.cgi?id=60565
  This controller is eccentric and easily locks up if something isn't
  right.  Documentation is available at initio's website but it only
  documents registers (not programming model).
  This driver has interesting history.  The first version was written
  from the documentation and a 2.4 IDE driver posted on a Taiwan
  company, which didn't use any IDMA features and couldn't handle
  LBA48.  The resulting driver couldn't handle LBA48 devices either
  making it pretty useless.
  After a while, initio picked the driver up, renamed it to
  sata_initio162x, updated it to use IDMA for ATA DMA commands and
  posted it on their website.  It only used ATA_PROT_DMA for IDMA and
  attaching both devices and issuing IDMA and !IDMA commands
  simultaneously broke it due to PIRQ masking interaction but it did
  show how to use the IDMA (ADMA + some initio specific twists)
  engine.
  Then, I picked up their changes again and here's the usable driver
  which uses IDMA for everything.  Everything works now including
  LBA48, CDDVD burning, suspendresume and hotplug.  There are some
  issues tho.  Result Tf is not resported properly, NCQ isn't
  supported yet and CDDVD writing works with DMA assisted PIO
  protocol (which, for native SATA devices, shouldn't cause any
  noticeable difference).
  Anyways, so, here's finally a working driver for inic162x.  Enjoy!
  initio: If you guys wanna improve the driver regarding result TF
  access and other stuff, please feel free to contact me.  I'll be
  happy to assist.
 registers for ATA TF operation 
 IDMA register 
 HOST_CTL bits 
 enable LED operation 
 global IRQ off 
 fifo threshold 0 
 fifo threshold 1
 power down PHYs 
 global reset (no phy reset) 
 register page select 
 HOST_IRQ_(STAT|MASK) bits 
 STAT only 
 PORT_IRQ_(STAT|MASK) bits 
 device unplugged 
 device plugged 
 completion interrupt 
 fatal error 
 ATA interrupt 
 reply FIFO not empty 
 port IRQ pending (STAT only) 
 PORT_PRD_CTL bits 
 DMA enable 
 PORT_IDMA_CTL bits 
 hardreset ATA bus 
 reset IDMA machinery 
 IDMA mode go 
 ATA IRQ disable 
 PORT_IDMA_STAT bits 
 PCI ERROR MODE 
 ADMA CPB error 
 ADMA legacy 
 ADMA unsolicited irq 
 ADMA stopped 
 ADMA pause 
 ADMA done 
 CPB Control Flags
 CPB valid 
 queued command 
 data, rsvd in datasheet 
 PCI interrupt enable 
 device direction control 
 CPB Response Flags 
 ATA command complete 
 ATA release 
 CPB ignored 
 ATA command error 
 ATA spurious interrupt error 
 APRD deficiency length error 
 APRD exccess length error 
 CPB error flag 
 PRD Control Flags 
 ignore data excess 
 atapi packet command pointer 
 direct interrupt 
 data transfer method 
 data dir, rsvd in datasheet 
 iomemory transfer 
 APRD chain end 
 Comman Parameter Block 
 Response Flags 
 ATA Error 
 ATA Status 
 Control Flags 
 Total Transfer Length 
 First PRD pointer 
 16 bytes 
 ATA Feature 
 ATA Ex. Feature 
 ATA DeviceHead 
 Mirror Control 
 ATA Sector Count 
 ATA Ex. Sector Count 
 ATA Sector Number 
 ATA Ex. Sector Number 
 ATA Cylinder Low 
 ATA Ex. Cylinder Low 
 ATA Cylinder High 
 ATA Ex. Cylinder High 
 ATA Command 
 ATA Control 
 Slave ATA Error 
 Slave ATA Status 
 32 bytes 
 Physical Region Descriptor 
 Physical Memory Address 
 Transfer Length 
 Control Flags 
 + 1 for cdb 
 maybe it can be larger? 
	
	  This controller is braindamaged.  dma_boundary is 0xffff like others
	  but it will lock up the whole machine HARD if 65536 byte PRD entry
	  is fed.  Reduce maximum segment size.
 stop IDMA engine 
 flush 
 mask IRQ and assert reset 
 flush 
 release reset 
 clear irq 
 this controller has stuck DIAG.N, ignore it 
 read and clear IRQ status 
		 Depending on circumstances, device error
		  isn't reported by IDMA, check it explicitly.
	 For some reason ATAPI_PROT_DMA doesn't work for some
	  commands including writes and other misc ops.  Use PIO
	  protocol instead, which BTW is driven by the DMA engine
	  anyway, so it shouldn't make much difference for native
	  SATA devices.
 prepare packet, based on initio driver 
 don't load ctl - dunno why.  it's like that in the initio driver 
 setup PRD for CDB 
 setup sg table 
 fire up the ADMA engine 
	 FIXME: Except for status and error, result TF access
	  doesn't work.  I tried reading from BAR02, CPB and BAR5.
	  None works regardless of which command interface is used.
	  For now return true iff status indicates device error.
	  This means that we're reporting bogus sector for RW
	  failures.  Eeekk....
  SRST and SControl hardreset don't give valid signature on this
  controller.  Only controller specific hardreset mechanism works.
 hammer it into sane state 
 flush 
 wait for link to become ready 
 link occupied, -ENODEV too is an error 
 make DMA engine forget about the failed command 
 clear packet and CPB table 
 setup CPB lookup table addresses 
 alloc and initialize private data 
 Alloc resources 
	 Soft reset whole controller.  Spec says reset duration is 3
	  PCI clocks, be generous and give it 10ms.
 flush 
 mask all interrupts and reset ports 
 port IRQ is masked now, unmask global IRQ 
 alloc host 
	 Acquire resources and fill host.  Note that PCI and cardbus
	  use different BARs.
 Set dma_mask.  This devices doesn't support 64bit addressing. 
 	pata_hpt3x3		-	HPT3x3 driver
 	(c) Copyright 2005-2006 Red Hat
 	Was pata_hpt34x but the naming was confusing as it supported the
 	343 and 363 so it has been renamed.
 	Based on:
 	linuxdriversidepcihpt34x.c		Version 0.40	Sept 10, 2002
 	Copyright (C) 1998-2000	Andre Hedrick <andre@linux-ide.org>
 	May be copied or modified under the terms of the GNU General Public
 	License
 	hpt3x3_set_piomode		-	PIO setup
 	@ap: ATA interface
 	@adev: device on the interface
 	Set our PIO requirements. This is fairly simple on the HPT3x3 as
 	all we have to do is clear the MWDMA and UDMA bits then load the
 	mode number.
 Load the PIO timing number 
 Clear MWDMA and UDMA bits 
 	hpt3x3_set_dmamode		-	DMA timing setup
 	@ap: ATA interface
 	@adev: Device being configured
 	Set up the channel for MWDMA or UDMA modes. Much the same as with
 	PIO, load the mode number and then set MWDMA or UDMA flag.
 	0x44 : bit 0-2 master mode, 3-5 slave mode, etc
 	0x48 : bit 40 DMAUDMA bit 51 for slave etc
 Load the timing number 
 Clear MWDMA and UDMA bits 
 Ultra mode 
 MWDMA 
 	hpt3x3_freeze		-	DMA workaround
 	@ap: port to freeze
 	When freezing an HPT3x3 we must stop any pending DMA before
 	writing to the control register or the chip will hang
 	hpt3x3_bmdma_setup	-	DMA workaround
 	@qc: Queued command
 	When issuing BMDMA we must clean up the erroractive bits in
 	software on this device
 	hpt3x3_atapi_dma	-	ATAPI DMA check
 	@qc: Queued command
 	Just say no - we don't do ATAPI DMA
 CONFIG_PATA_HPT3X3_DMA 
 	hpt3x3_init_chipset	-	chip setup
 	@dev: PCI device
 	Perform the setup required at boot and on resume.
 Initialize the board 
 Check if it is a 343 or a 363. 363 has COMMAND_MEMORY set 
 	hpt3x3_init_one		-	Initialise an HPT343363
 	@pdev: PCI device
 	@id: Entry in match table
 	Perform basic initialisation. We set the device up so we access all
 	ports via BAR4. This is necessary to work around errata.
 Further debug needed 
 Register offsets of taskfiles in BAR4 area 
 acquire resources and fill host 
 Everything is relative to BAR4 if we set up this way 
 Bus mastering base 
  pata_sil680.c 	- SIL680 PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
  based upon
  linuxdriversidepcisiimage.c		Version 1.07	Nov 30, 2003
  Copyright (C) 2001-2002	Andre Hedrick <andre@linux-ide.org>
  Copyright (C) 2003		Red Hat <alan@redhat.com>
   May be copied or modified under the terms of the GNU General Public License
   Documentation publicly available.
 	If you have strange problems with nVidia chipset systems please
 	see the SI support documentation and update your system BIOS
 	if necessary
  TODO
 	If we know all our devices are LBA28 (or LBA28 sized)  we could use
 	the command fifo mode.
 	sil680_selreg		-	return register base
 	@ap: ATA interface
 	@r: config offset
 	Turn a config register offset into the right address in PCI space
 	to access the control register in question.
 	Thankfully this is a configuration operation so isn't performance
 	criticial.
 	sil680_seldev		-	return register base
 	@ap: ATA interface
 	@adev: ATA device
 	@r: config offset
 	Turn a config register offset into the right address in PCI space
 	to access the control register in question including accounting for
 	the unit shift.
 	sil680_cable_detect	-	cable detection
 	@ap: ATA port
 	Perform cable detection. The SIL680 stores this in PCI config
 	space for us.
 	sil680_set_piomode	-	set PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program the SIL680 registers for PIO mode. Note that the task speed
 	registers are shared between the devices so we must pick the lowest
 	mode for command work.
 Clear IORDY 
 Clear IORDY and DMA bits 
 Enable IORDY 
 	sil680_set_dmamode	-	set DMA mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program the MWDMAUDMA modes for the sil680 chipset.
 	The MWDMA mode values are pulled from a lookup table
 	while the chipset uses mode number for UDMA.
 100MHz 
 133Mhz 
 Mask timing bits 
 Extract scsc 
 	sil680_sff_exec_command - issue ATA command to host controller
 	@ap: port to which command is being issued
 	@tf: ATA taskfile register set
 	Issues ATA command, with proper synchronization with interrupt
 	handler  other threads. Use our MMIO space for PCI posting to avoid
 	a hideously slow cycle all the way to the device.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	sil680_init_chip		-	chip setup
 	@pdev: PCI device
 	@try_mmio: Indicates to caller whether MMIO should be attempted
 	Perform all the chip setup which must be done both when the device
 	is powered up on boot and when we resume in case we resumed from RAM.
 	Returns the final clock settings.
 FIXME: double check 
 133 clock attempt to force it on 
 if clocking is disabled 
 133 clock attempt to force it on 
 133 already 
 BIOS set PCI x2 clocking 
 This last case is _NOT_ ok 
	 Try to acquire MMIO resources and fallback to PIO if
	  that fails
 Allocate host and set it up 
 Setup DMA masks 
 Get MMIO base and initialize port addresses 
 Register & activate 
 SPDX-License-Identifier: GPL-2.0-only
  Libata driver for the highpoint 366 and 368 UDMA66 ATA controllers.
  This driver is heavily based upon:
  linuxdriversidepcihpt366.c		Version 0.36	April 25, 2003
  Copyright (C) 1999-2003		Andre Hedrick <andre@linux-ide.org>
  Portions Copyright (C) 2001	        Sun Microsystems, Inc.
  Portions Copyright (C) 2003		Red Hat Inc
  TODO
 	Look into engine reset on timeout errors. Should not be required.
 key for bus clock timings
  bit
  0:3    data_high_time. Inactive time of DIOW_DIOR_ for PIO and MW DMA.
         cycles = value + 1
  4:7    data_low_time. Active time of DIOW_DIOR_ for PIO and MW DMA.
         cycles = value + 1
  8:11   cmd_high_time. Inactive time of DIOW_DIOR_ during task file
         register access.
  12:15  cmd_low_time. Active time of DIOW_DIOR_ during task file
         register access.
  16:18  udma_cycle_time. Clock cycles for UDMA xfer?
  19:21  pre_high_time. Time to initialize 1st cycle for PIO and MW DMA xfer.
  22:24  cmd_pre_high_time. Time to initialize 1st PIO cycle for task file
         register access.
  28     UDMA enable.
  29     DMA  enable.
  30     PIO_MST enable. If set, the chip is in bus master mode during
         PIO xfer.
  31     FIFO enable.
 0xa0c8a733 
 0xc0d0a793 
 0xc0d0a7a7 
 	hpt36x_find_mode	-	find the hpt36x timing
 	@ap: ATA port
 	@speed: transfer mode
 	Return the 32bit register programming information for this channel
 	that matches the speed provided.
 silence compiler warning 
 	hpt366_filter	-	mode selection filter
 	@adev: ATA device
 	@mask: Current mask to manipulate and pass back
 	Block UDMA on devices that cause trouble with this controller.
	
	  Each channel of pata_hpt366 occupies separate PCI function
	  as the primary channel and bit1 indicates the cable type.
 determine timing mask and find matching clock entry 
	
	  Combine new mode bits with old config bits and disable
	  on-chip PIO FIFObuffer (and PIO MST mode as well) to avoid
	  problems handling IO errors later.
 	hpt366_set_piomode		-	PIO setup
 	@ap: ATA interface
 	@adev: device on the interface
 	Perform PIO mode setup.
 	hpt366_set_dmamode		-	DMA timing setup
 	@ap: ATA interface
 	@adev: Device being configured
 	Set up the channel for MWDMA or UDMA modes. Much the same as with
 	PIO, load the mode number and then set MWDMA or UDMA flag.
 	Configuration for HPT36668
 	hpt36x_init_chipset	-	common chip setup
 	@dev: PCI device
 	Perform the chip setup work that must be done at both init and
 	resume time
 	hpt36x_init_one		-	Initialise an HPT366368
 	@dev: PCI device
 	@id: Entry in match table
 	Initialise an HPT36x device. There are some interesting complications
 	here. Firstly the chip may report 366 and be one of several variants.
 	Secondly all the timings depend on the clock for the chip which we must
 	detect and look up
 	This is the known chip mappings. It may be missing a couple of later
 	releases.
 	Chip version		PCI		Rev	Notes
 	HPT366			4 (HPT366)	0	UDMA66
 	HPT366			4 (HPT366)	1	UDMA66
 	HPT368			4 (HPT366)	2	UDMA66
 	HPT37x30x		4 (HPT366)	3+	Other driver
 May be a later chip in disguise. Check 
 Newer chips are not in the HPT36x driver. Ignore them 
 PCI clocking determines the ATA timing values to use 
 info_hpt366 is safe against re-entry so we can scribble on it 
 Now kick off ATA set up 
 SPDX-License-Identifier: GPL-2.0-or-later
   sata_sil.c - Silicon Image SATA
   Maintained by:  Tejun Heo <tj@kernel.org>
   		    Please ALWAYS copy linux-ide@vger.kernel.org
 		    on emails.
   Copyright 2003-2005 Red Hat, Inc.
   Copyright 2003 Benjamin Herrenschmidt
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
   Documentation for SiI 3112:
   http:gkernel.sourceforge.netspecssii3112A_SiI-DS-0095-B2.pdf.bz2
   Other errata and documentation available under NDA.
	
	  host flags
	
	  Controller IDs
	
	  Register offsets
	
	  Register bits
 SYSCFG 
 BMDMABMDMA2 
 DMA run switch 
 DMA Rd-Wr 
 OR of all SATA IRQs 
 DMA running 
 PCI bus error 
 cmd complete  IRQ pending 
 SATA_IRQ for the next channel 
 ACTIVE for the next channel 
 ERROR for the next channel 
 COMPLETE for the next channel 
 SIEN 
 triggered by SError.N 
	
	  Others
 terminate list 
 TODO firmware versions should be added - eric 
	 These controllers support Large Block Transfer which allows
	    transfer chunks up to 2GB and which cross 64KB boundaries,
 sil_3112 
 sil_3112_no_sata_irq 
 sil_3512 
 sil_3114 
 per-port register offsets 
 TODO: we can probably calculate rather than use a table 
 ATA taskfile register block 
 ATA controlaltstatus register block 
 DMA register block 
 DMA register block #2 
 FIFO Valid Byte Count and Control 
 SATA control register block 
 SATA Interrupt Enable register 
 data transfer mode register 
 SATA FIS reception config register 
 port 0 ... 
   tf    ctl  bmdma  bmdma2  fifo    scr   sien   mode   sfis 
 ... port 3 
 clear startstop bit - can safely always write 0 
 one-PIO-cycle guaranteed wait, per spec, for HDMA1:0 transition 
 load PRD table addr. 
 issue rw command 
	 set transfer direction, start host DMA transaction
	   Note: For Large Block Transfer to work, the DMA must be started
 The way God intended PCI IDE scattergather lists to look and behave... 
		 Note hw doesn't support 64-bit, so we unconditionally
		  truncate dma_addr_t to u32.
 	sil_set_mode		-	wrap set_mode functions
 	@link: link to set up
 	@r_failed: returned device when we fail
 	Wrap the libata method for device setup as after the setup we need
 	to inspect the results and do some configuration work
 PIO012 
 PIO34 
 UDMA 
 value 2 indicates MDMA 
 flush 
 do nothing 
		 SIEN doesn't mask SATA IRQs on some 3112s.  Those
		  controllers continue to assert IRQ as long as
		  SError bits are pending.  Clear SError immediately.
		 Sometimes spurious interrupts occur, double check
		  it's PHYRDY CHG.
 this sometimes happens, just clear IRQ 
 Check whether we are expecting interrupt in this state 
		 Some pre-ATAPI-4 devices assert INTRQ
		  at this state when ready to receive CDB.
		 Check the ATA_DFLAG_CDB_INTR flag is enough here.
		  The flag was turned on only for atapi devices.  No
		  need to check ata_is_atapi(qc->tf.protocol) again.
 clear DMA-Start bit 
 check main status, clearing INTRQ 
 ack bmdma irq events 
 kick HSM in the ass 
 turn off SATA_IRQ if not supported 
 global IRQ mask doesn't block SATA IRQ, turn off explicitly 
 plug IRQ 
 flush 
	 Ensure DMA_ENABLE is off.
	 
	  This is because the controller will not give us access to the
	  taskfile registers while a DMA is in progress
	 According to ata_bmdma_stop, an HDMA transition requires
	  on PIO cycle. But we can't read a taskfile register.
 clear IRQ 
 turn on SATA IRQ if supported 
 turn on IRQ 
 	sil_dev_config - Apply devicehost-specific errata fixups
 	@dev: Device to be examined
 	After the IDENTIFY [PACKET] DEVICE step is complete, and a
 	device is known to be present, this function is called.
 	We apply two errata fixups which are specific to Silicon Image,
 	a Seagate and a Maxtor fixup.
 	For certain Seagate devices, we must limit the maximum sectors
 	to under 8K.
 	For certain Maxtor devices, we must not program the drive
 	beyond udma5.
 	Both fixups are unfairly pessimistic.  As soon as I get more
 	information on these errata, I will create a more exhaustive
 	list, and apply the fixups to only the specific
 	deviceshostsfirmwares that need it.
 	20040111 - Seagate drives affected by the Mod15Write bug are blacklisted
 	The Maxtor quirk is in the blacklist, but I'm keeping the original
 	pessimistic fix for the following reasons...
 	- There seems to be less info on it, only one device gleaned off the
 	Windows	driver, maybe only one is affected.  More info would be greatly
 	appreciated.
 	- But then again UDMA5 is hardly anything to complain about
 This controller doesn't support trim 
 limit requests to 15 sectors 
 limit to udma5 
 Initialize FIFO PCI bus arbitration 
 cls = (line_size8)+1 
 Apply R_ERR on DMA activate FIS errata workaround 
 flip the magic "make 4 ports work" bit 
 PCI slot number of the controller 
 terminate list 
 apply the quirk only to on-board controllers 
 allocate host 
 acquire resources and fill host 
 initialize and activate 
 SPDX-License-Identifier: GPL-2.0-or-later
  Broadcom SATA3 AHCI Controller Driver
  Copyright Â© 2009-2015 Broadcom Corporation
 CPU->AHCI 
 AHCI->DDR 
 AHCI->DDR 
 On big-endian MIPS, buses are reversed to big endian, so switch them back 
 AHCI->DDR inbound accesses 
 CPU->AHCI outbound accesses 
	
	  MIPS endianness is configured by boot strap, which also reverses all
	  bus endianness (i.e., big-endian CPU + big endian bus ==> native
	  endian IO).
	 
	  Other architectures (e.g., ARM) either do not support big endian, or
	  else leave IO in little endian mode.
 See brcm_sata_readreg() comments 
 Enable support for ALPM 
	
	  Adjust timeout to allow PLL sufficient time to lock while waking
	  up from slumber mode.
 clear PHY_DEFAULT_POWER_STATE 
 reset the PHY digital logic 
 power-off the PHY digital logic 
 set PHY_DEFAULT_POWER_STATE 
 Configure endianness 
	 Try to read the device ID and, if this fails, proceed with the
	  recovery sequence below
 Disable host interrupts 
 flush 
 Perform the SATA PHY reset sequence 
 Reset the SATA clock 
 Bring the PHY back on 
 Re-initialize and calibrate the PHY 
 Re-enable host interrupts 
 flush 
 Make sure clocks are turned on before re-configuration 
	 Since we had to enable clocks earlier on, we cannot use
	  ahci_platform_resume() as-is since a second call to
	  ahci_platform_enable_resources() would bump up the resources
	  (regulators, clocks, PHYs) count artificially so we copy the part
	  after ahci_platform_enable_resources().
 We resumed so update PM runtime state 
	 Must be first so as to configure endianness including that
	  of the standard AHCI register space.
 Initializes priv->port_mask which is used below 
 Must be done before ahci_platform_enable_phys() 
	 All resources releasing happens via devres, but our device, unlike a
	  proper remove is not disappearing, therefore using
	  brcm_ahci_suspend() here which does explicit power management is
	  appropriate.
 SPDX-License-Identifier: GPL-2.0-or-later
  DaVinci DM816 AHCI SATA platform driver
  Copyright (C) 2017 BayLibre SAS
	
	  We need to determine the value of the multiplier (MPY) bits.
	  In order to include the 8.25 multiplier we need to first divide
	  the refclk rate by 100.
	
	  We should have divided evenly - if not, return an invalid
	  value.
	
	  We should have been supplied two clocks: the functional and
	  keep-alive clock and the external reference clock. We need the
	  rate of the latter to calculate the correct value of MPY bits.
 Enable the PHY and configure the first HBA port. 
 Configure the second HBA port. 
	
	  There's an issue with the SATA controller on DM816 SoC: if we
	  enable Port Multiplier support, but the drive is connected directly
	  to the board, it can't be detected. As a workaround: if PMP is
	  enabled, we first call ahci_do_softreset() and pass it the result of
	  sata_srst_pmp(). If this call fails, we retry with pmp = 0.
 SPDX-License-Identifier: GPL-2.0-only
     pata_jmicron.c - JMicron ATA driver for non AHCI mode. This drives the
 			PATA port of the controller. The SATA ports are
 			driven by AHCI in the usual configuration although
 			this driver can handle other setups if we need it.
 	(c) 2006 Red Hat
 	jmicron_pre_reset	-	check for 4080 pin
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Perform the PATA port setup we need.
 	On the Jmicron 361363 there is a single PATA port that can be mapped
 	either as primary or secondary (or neither). We don't do any policy
 	and setup here. We assume that has been done by init_one and the
 	BIOS.
 Check if our port is enabled 
	 There are two basic mappings. One has the two SATA ports merged
	   as masterslave and the secondary as PATA, the other has only the
	 The 365366 may have this bit set to map the second PATA port
 The two ports may then be logically swapped by the firmware 
	
	 	Now we know which physical port we are talking about we can
	 	actually do our cable checking etc. Thankfully we don't need
	 	to do the plumbing for other cases.
 4080 pin primary 
 Bit 21 is set if the port is enabled 
 4080 pin secondary 
 No PIO or DMA methods needed for this device 
 	jmicron_init_one - Register Jmicron ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@id: PCI device ID
 	Called from kernel PCI layer.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 terminate list 
 SPDX-License-Identifier: GPL-2.0-only
  pata_via.c 	- VIA PATA for new ATA layer
 			  (C) 2005-2006 Red Hat Inc
   Documentation
 	Most chipset documentation available under NDA only
   VIA version guide
 	VIA VT82C561	-	early design, uses ata_generic currently
 	VIA VT82C576	-	MWDMA, 33Mhz
 	VIA VT82C586	-	MWDMA, 33Mhz
 	VIA VT82C586a	-	Added UDMA to 33Mhz
 	VIA VT82C586b	-	UDMA33
 	VIA VT82C596a	-	Nonfunctional UDMA66
 	VIA VT82C596b	-	Working UDMA66
 	VIA VT82C686	-	Nonfunctional UDMA66
 	VIA VT82C686a	-	Working UDMA66
 	VIA VT82C686b	-	Updated to UDMA100
 	VIA VT8231	-	UDMA100
 	VIA VT8233	-	UDMA100
 	VIA VT8233a	-	UDMA133
 	VIA VT8233c	-	UDMA100
 	VIA VT8235	-	UDMA133
 	VIA VT8237	-	UDMA133
 	VIA VT8237A	-	UDMA133
 	VIA VT8237S	-	UDMA133
 	VIA VT8251	-	UDMA133
 	Most registers remain compatible across chips. Others start reserved
 	and acquire sensible semantics if set to 1 (eg cable detect). A few
 	exceptions exist, notably around the FIFO settings.
 	One additional quirk of the VIA design is that like ALi they use few
 	PCI IDs for a lot of chips.
 	Based heavily on:
  Version 3.38
  VIA IDE driver for Linux. Supported southbridges:
    vt82c576, vt82c586, vt82c586a, vt82c586b, vt82c596a, vt82c596b,
    vt82c686, vt82c686a, vt82c686b, vt8231, vt8233, vt8233c, vt8233a,
    vt8235, vt8237
  Copyright (c) 2000-2002 Vojtech Pavlik
  Based on the work of:
 	Michel Aubry
 	Jeff Garzik
 	Andre Hedrick
 Crashes if PREQ# till DDACK# set 
 66 MHz clock doesn't work correctly 
 Needs to have FIFO split set 
 Doesn't work with IRQ unmasking on 
 Has wrong vendor ID (0x1107) 
 Don't touch Address Setup Timing 
 Has no enablebits 
 SATAPATA combined configuration 
 single channel controller) 
  VIA SouthBridge chips.
 	Cable special cases
 Systems by DMI 
 Arima W730-K8Targa Visionary 811... 
 	via_cable_detect	-	cable detection
 	@ap: ATA port
 	Perform cable detection. Actually for the VIA case the BIOS
 	already did this for us. We read the values provided by the
 	BIOS. If you are using an 8235 in a non-PC configuration you
 	may need to update this code.
 	Hotplug also impacts on this.
 Early chips are 40 wire 
 UDMA 66 chips have only drive side logic 
 UDMA 100 or later 
	 Check both the drive cable reporting bits, we might not have
 Check with ACPI so we can spot BIOS reported SATA bridges 
 	via_do_set_mode	-	set transfer mode data
 	@ap: ATA interface
 	@adev: ATA device
 	@mode: ATA mode being programmed
 	@set_ast: Set to program address setup
 	@udma_type: UDMA modeformat of registers
 	Program the VIA registers for DMA and PIO modes. Uses the ata timing
 	support in order to compute modes.
 	FIXME: Hotplug will require we serialize multiple mode changes
 	on the two channels.
 Bus clock in kHZ 
 Calculate the timing values we require 
 We share 8bit timing so we must merge the constraints 
 Address setup is programmable but breaks on UDMA133 setups 
 2 bits per drive 
 Load the PIO mode bits 
 Load the UDMA bits according to type 
 Set UDMA unless device is not UDMA capable 
 clear transfer mode bit 
 preserve 80-wire cable detection bit 
 	via_mode_filter		-	filter buggy devicemode pairs
 	@dev: ATA device
 	@mask: Mode bitmask
 	We need to apply some minimal filtering for old controllers and at least
 	one breed of Transcend SSD. Return the updated mask.
 	via_tf_load - send taskfile registers to host controller
 	@ap: Port to which output is sent
 	@tf: ATA taskfile register set
 	Outputs ATA taskfile to standard ATA host controller.
 	Note: This is to fix the internal bug of via chipsets, which
 	will reset the device register after changing the IEN bit on
 	ctl register
 	via_config_fifo		-	set up the FIFO
 	@pdev: PCI device
 	@flags: configuration flags
 	Set the FIFO properties for this device if necessary. Used both on
 	set up and on and the resume path
 0x40 low bits indicate enabled channels 
 Clear PREQ# until DDACK# for errata 
 Turn on FIFO for enabled channels 
 Initialise the FIFO for the enabled channels. 
 The 66 MHz devices require we enable the clock 
 Disable the 66MHz clock on problem devices 
 	via_init_one		-	discovery callback
 	@pdev: PCI device
 	@id: PCI table info
 	A VIA IDE interface has been discovered. Figure out what revision
 	and perform configuration work before handing it to the ATA layer
 Early VIA without UDMA support 
 Ditto with IRQ masking required 
 VIA UDMA 33 devices (and borked 66) 
 VIA UDMA 66 devices 
 VIA UDMA 100 devices 
 UDMA133 with bad AST (All current 133) 
 FIXME: should check north bridge 
	 To find out how the IDE will behave and what features we
 0x40 low bits indicate enabled channels 
 Clock set up 
 We have established the device type, now fire it up 
 	via_reinit_one		-	reinit after resume
 	@pdev: PCI device
 	Called when the VIA PATA device is resumed. We must then
 	reconfigure the fifo and other setup we may have altered. In
 	addition the kernel needs to have the resume methods on PCI
 	quirk supported.
 SPDX-License-Identifier: GPL-2.0-only
  New ATA layer SC1200 driver		Alan Cox <alan@lxorguk.ukuu.org.uk>
  TODO: Mode selection filtering
  TODO: Needs custom DMA cleanup code
  Based very heavily on
  linuxdriversidepcisc1200.c		Version 0.91	28-Jan-2003
  Copyright (C) 2000-2002		Mark Lord <mlord@pobox.com>
  May be copied or modified under the terms of the GNU General Public License
  Development of this chipset driver was funded
  by the nice folks at National Semiconductor.
 	sc1200_clock	-	PCI clock
 	Return the PCI bus clocking for the SC1200 chipset configuration
 	in use. We return 0 for 33MHz 1 for 48MHz and 2 for 66Mhz
 Magic registers that give us the chipset data 
 33 MHz mode 
	 Clock generator configuration 0x901E its 89 are the PCI clocking
 	sc1200_set_piomode		-	PIO setup
 	@ap: ATA interface
 	@adev: device on the interface
 	Set our PIO requirements. This is fairly simple on the SC1200
 format0, 33Mhz 
 format1, 33Mhz 
 format1, 48Mhz 
 format1, 66Mhz 
 	sc1200_set_dmamode		-	DMA timing setup
 	@ap: ATA interface
 	@adev: Device being configured
 	We cannot mix MWDMA and UDMA without reloading timings each switch
 	master to slave.
 	sc1200_qc_issue		-	command issue
 	@qc: command pending
 	Called when the libata layer is about to issue a command. We wrap
 	this interface so that we can load the correct ATA timings if
 	necessary.  Specifically we have a problem that there is only
 	one MWDMAUDMA bit.
 See if the DMA settings could be wrong 
 Maybe, but do the channels match MWDMAUDMA ? 
 Switch the mode bits 
 	sc1200_qc_defer	-	implement serialization
 	@qc: command
 	Serialize command issue on this controller.
 First apply the usual rules 
	 Now apply serialization rules. Only allow a command if the
 	sc1200_init_one		-	Initialise an SC1200
 	@dev: PCI device
 	@id: Entry in match table
 	Just throw the needed data at the libata helper and it does all
 	our work.
 SPDX-License-Identifier: GPL-2.0-only
  pata_cmd64x.c 	- CMD64x PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
 			  Alan Cox <alan@lxorguk.ukuu.org.uk>
 			  (C) 2009-2010 Bartlomiej Zolnierkiewicz
 			  (C) 2012 MontaVista Software, LLC <source@mvista.com>
  Based upon
  linuxdriversidepcicmd64x.c		Version 1.30	Sept 10, 2002
  cmd64x.c: Enable interrupts at initialization time on UltraPCI machines.
            Note, this driver is not used at all on other systems because
            there the "BIOS" has done all of the following already.
            Due to massive hardware bugs, UltraDMA is only supported
            on the 646U2 and not on the 646U.
  Copyright (C) 1998		Eddie C. Dost  (ecd@skynet.be)
  Copyright (C) 1998		David S. Miller (davem@redhat.com)
  Copyright (C) 1999-2002	Andre Hedrick <andre@linux-ide.org>
  TODO
 	Testing work
  CMD64x specific registers definition.
 Check cable detect bits 
 	cmd64x_set_timing	-	set PIO and MWDMA timing
 	@ap: ATA interface
 	@adev: ATA device
 	@mode: mode
 	Called to do the PIO and MWDMA mode setup.
 Port layout is not logical so use a table 
	 ata_timing_compute is smart and will produce timings for MWDMA
 Slave has shared address setup 
	 Now convert the clocks into values we can actually stuff into
 0 = 16 
 Load setup timing 
 Load activerecovery 
 	cmd64x_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Used when configuring the devices ot set the PIO timings. All the
 	actual work is done by the PIOMWDMA setting helper
 	cmd64x_set_dmamode	-	set initial DMA mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Called to do the DMA mode setup.
 DMA bits off 
 DMA control bits 
 DMA timing bits 
 Merge the timing value 
 Merge the control bits 
 UDMA on 
 15nS timing 
 UDMA off 
 	cmd64x_sff_irq_check	-	check IDE interrupt
 	@ap: ATA interface
 	Check IDE interrupt in CFRARTTIM23 registers.
 NOTE: reading the register should clear the interrupt 
 	cmd64x_sff_irq_clear	-	clear IDE interrupt
 	@ap: ATA interface
 	Clear IDE interrupt in CFRARTTIM23 and DMA status registers.
 Reading the register should be enough to clear the interrupt 
 	cmd648_sff_irq_check	-	check IDE interrupt
 	@ap: ATA interface
 	Check IDE interrupt in MRDMODE register.
 	cmd648_sff_irq_clear	-	clear IDE interrupt
 	@ap: ATA interface
 	Clear IDE interrupt in MRDMODE and DMA status registers.
 Clear this port's interrupt bit (leaving the other port alone) 
 	cmd646r1_bmdma_stop	-	DMA stop callback
 	@qc: Command in progress
 	Stub for now while investigating the r1 quirk in the old driver.
 IRQ set up 
 Memory read line enable 
 PPC specific fixup copied from old driver 
 CMD 643 - no UDMA 
 CMD 646 with broken UDMA 
 CMD 646U with broken UDMA 
 CMD 646U2 with working UDMA 
 CMD 646 rev 1  
 CMD 648 
 CMD 649 
 mobility split bridges don't report enabled ports correctly 
 all (with exceptions below) apart from 643 have CNTRL_CH0 bit 
 643 
 UDMA works since rev 5 
 Interrupts in MRDMODE since rev 3 
 Rev 1 with other problems? 
 Early revs have no CNTRL_CH0 
 check for enabled ports 
 SPDX-License-Identifier: GPL-2.0-only
  pata_opti.c 	- ATI PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
  Based on
   linuxdriversidepciopti621.c		Version 0.7	Sept 10, 2002
   Copyright (C) 1996-1998  Linus Torvalds & authors (see below)
  Authors:
  Jaromir Koutek <miri@punknet.cz>,
  Jan Harkes <jaharkes@cwi.nl>,
  Mark Lord <mlord@pobox.com>
  Some parts of code are from ali14xx.c and from rz1000.c.
  Also consulted the FreeBSD prototype driver by Kevin Day to try
  and resolve some confusions. Further documentation can be found in
  Ralf Brown's interrupt list
  If you have other variants of the Opti range (ViperVendetta) please
  try this driver with those PCI idents and report back. For the later
  chips see the pata_optidma driver
 index of Read cycle timing register 
 index of Write cycle timing register 
 index of Control register 
 index of Strap register 
 index of Miscellaneous register 
 	opti_pre_reset		-	probe begin
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Set up cable type and use generic probe init
 	opti_write_reg		-	control register setup
 	@ap: ATA port
 	@val: value
 	@reg: control register number
 	The Opti uses magic 'trapdoor' register accesses to do configuration
 	rather than using PCI space as other controllers do. The double inw
 	on the error register activates configuration mode. We can then write
 	the control register
 These 3 unlock the control register access 
 Do the IO 
 Relock 
 	opti_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Called to do the PIO mode setup. Timing numbers are taken from
 	the FreeBSD driver then pre computed to keep the code clean. There
 	are two tables depending on the hardware clock speed.
 Address table precomputed with prefetch off and a DCLK of 2 
	
 	 	As with many controllers the address setup time is shared
 	 	and must suit both devices if present.
 Hardware constraint 
 Commence primary programming sequence 
 Programming sequence complete, override strapping 
 SPDX-License-Identifier: GPL-2.0-only
  Libata based driver for Apple "macio" family of PATA controllers
  Copyright 20082009 Benjamin Herrenschmidt, IBM Corp
                      <benh@kernel.crashing.org>
  Some bits and pieces from driversideppcpmac.c
 Models of macio ATA controller 
 OHare based 
 HeathrowPaddington 
 KeyLargo ATA-3 
 KeyLargo ATA-4 
 UniNorth2 ATA-6 
 K2 ATA-6 
 Shasta ATA-6 
 OHare based 
 HeathrowPaddington 
 KeyLargo ATA-3 (MDMA only) 
 KeyLargo ATA-4 (UDMA66) 
 UniNorth2 ATA-6 (UDMA100) 
 K2 ATA-6 (UDMA100) 
 Shasta ATA-6 (UDMA133) 
  Extra registers, both 32-bit little-endian
 Kauai (U2) ATA has different register setup 
  Timing configuration register definitions
 Number of IDE_SYSCLK_NS ticks, argument is in nanoseconds 
 33Mhz cell 
 66Mhz cell 
 133Mhz cell, found in shasta.
  See comments about 100 Mhz Uninorth 2...
  Note that PIO_MASK and MDMA_MASK seem to overlap, that's just
  weird and I don't now why .. at this stage
 100Mhz cell, found in Uninorth 2 and K2. It appears as a pci device
  (106b0033) on uninorth or K2 internal PCI bus and it's clock is
  controlled like gem or fw. It appears to be an evolution of keylargo
  ATA4 with a timing register extended to 2x32bits registers (one
  for PIO & MWDMA and one for UDMA, and a similar DBDMA channel.
  It has it's own local feature control register as well.
  After scratching my mind over the timing values, at least for PIO
  and MDMA, I think I've figured the format of the timing register,
  though I use pre-calculated tables for UDMA as usual...
 Size of field unknown 
 66Mhz cell, found in KeyLargo. Can do ultra mode 0 to 2 on
  40 connector cable and to 4 on 80 connector one.
  Clock unit is 15ns (66Mhz)
  3 Values can be programmed:
   - Write data setup, which appears to match the cycle time. They
     also call it DIOW setup.
   - Ready to pause time (from spec)
   - Address setup. That one is weird. I don't see where exactly
     it fits in UDMA cycles, I got it's name from an obscure piece
     of commented out code in Darwin. They leave it to 0, we do as
     well, despite a comment that would lead to think it has a
     min value of 45ns.
  Apple also add 60ns to the write data setup (or cycle time ?) on
  reads.
 Enable Ultra mode for DMA 
 Address setup 
 Ready 2 pause time 
 Write data setup time 
 33Mhz cell, found in OHare, Heathrow (& Paddington) and KeyLargo
  Can do pio & mdma modes, clock unit is 30ns (33Mhz)
  The access time and recovery time can be programmed. Some older
  Darwin code base limit OHare to 150ns cycle time. I decided to do
  the same here fore safety against broken old hardware ;)
  The HalfTick bit, when set, adds half a clock (15ns) to the access
  time and removes one from recovery. It's not supported on KeyLargo
  implementation afaik. The E bit appears to be set for PIO mode 0 and
  is used to reach long timings used in this mode.
  Interrupt register definitions. Only present on newer cells
  (Keylargo and later afaik) so we don't use it.
  FCR Register on Kauai. Not sure what bit 0x4 is  ...
 Allow up to 256 DBDMA commands per xfer 
 Don't let a DMA segment go all the way to 64K 
  Wait 1s for disk to answer on IDE bus after a hard reset
  of the device (via GPIOFCR).
  Some devices seem to "pollute" the bus even after dropping
  the BSY bit (typically some combo drives slave on the UDMA
  bus) after a hard reset. Since we hard reset all drives on
  KeyLargo ATA66, we have to keep that delay around. I may end
  up not hard resetting anymore on these and keep the delay only
  for older interfaces instead (we have to reset when coming
  from MacOS...) --BenH.
 Previous variants of this driver used to calculate timings
  for various variants of the chip and use tables for others.
  Not only was this confusing, but in addition, it isn't clear
  whether our calculation code was correct. It didn't entirely
  match the darwin code and whatever documentation I could find
  on these cells
  I decided to entirely rely on a table instead for this version
  of the driver. Also, because I don't really care about derated
  modes and really old HW other than making it work, I'm not going
  to calculate  snoop timing values for something else than the
  standard modes.
 Bits to set in first timing reg 
 Bits to set in second timing reg 
 Apply timings 
 First clear timings 
 Now get the PIO timings 
 PIO timings only ever use the first treg 
 Now get DMA timings 
 DMA timings can use both tregs 
 Apply to hardware 
  Blast some well known "safe" values to the timing registers at init or
  wakeup from sleep time, before we do real calculation
 Get cable type from device-tree 
			 Some drives fail to detect 80c cable in PowerBook
			  These machine use proprietary short IDE cable
			  anyway
	 G5's seem to have incorrect cable type in device-tree.
	  Let's assume they always have a 80 conductor cable, this seem to
	  be always the case unless the user mucked around
 Anything else is 40 connectors 
		 determine if physical DMA addr spans 64K boundary.
		  Note hw doesn't support 64-bit, so we unconditionally
		  truncate dma_addr_t to u32.
 table overflow should never happen 
 Should never happen according to Tejun 
 Convert the last command to an inputoutput 
 Add the stop command to the end of the list 
 Make sure DMA controller is stopped 
 Make sure DMA commands updates are visible 
	 On KeyLargo 66Mhz cell, we need to add 60ns to wrDataSetup on
	  UDMA reads
 issue rw command 
 Make sure it gets to the controller right now 
 Stop the DMA engine and wait for it to full halt 
	 We have two things to deal with here:
	 
	  - The dbdma won't stop if the command was started
	  but completed with an error without transferring all
	  datas. This happens when bad blocks are met during
	  a multi-block transfer.
	 
	  - The dbdma fifo hasn't yet finished flushing to
	  to system memory when the disk interrupt occurs.
	 
 First check for errors 
	 If ACTIVE is cleared, the STOP command has been hit and
	  the transfer is complete. If not, we have to flush the
	  channel.
	 If dbdma didn't execute the STOP command yet, the
	  active bit is still set. We consider that we aren't
	  sharing interrupts (which is hopefully the case with
	  those controllers) and so we just try to flush the
	  channel for pending data in the fifo
 port_start is when we allocate the DMA command list 
	 Allocate space for the DBDMA commands.
	 
	  The +2 is +1 for the stop command and +1 to allow for
	  aligning the start address to a multiple of 16 bytes.
 Nothing to do here 
		 The code below is having trouble on some ohare machines
		  (timing related ?). Until I can put my hand on one of these
		  units, I keep the old way
 Reset and enable controller 
 Only bother waiting if there's a reset control 
 If resuming a PCI device, restore the config space here 
	 On Kauai, initialize the FCR. We don't perform a reset, doesn't really
	  seem necessary and speeds up the boot process
 Hook the standard slave config to fixup some HW related alignment
  restrictions
 First call original 
 This is lifted from sata_nv 
 OHare has issues with non cache aligned DMA on some chipsets 
 Tell the world about it 
 We only have issues with ATAPI 
 Shasta and K2 seem to have "issues" with reads ... 
 Allright these are bad, apply restrictions 
		 We enable MWI and hack cache line size directly here, this
		  is specific to this chipset and not normal values, we happen
		  to somewhat know what we are doing here (which is basically
		  to do the same Apple does and pray they did not get it wrong :-)
 Tell the world about it 
 First, core libata suspend to do most of the work 
 Restore to default timings 
	 Mask interrupt. Not strictly necessary but old driver did
 The media bay will handle itself just fine 
 Kauai has bus control FCRs directly here 
	 For PCI, save state and disable DMA. No need to call
	  pci_set_power_state(), the HW doesn't do D states that
	  way, the platform code will take care of suspending the
	  ASIC properly
 Disable the bus on older machines and the cell on kauai 
 Reset and re-enable the HW 
 Sanitize drive timings 
 We want our IRQ back ! 
 Let the libata core take it from there 
 CONFIG_PM_SLEEP 
 We may not need that strict one 
	 Not sure what the real max is but we know it's less than 64K, let's
	  use 64K minus 256
 Identify the type of controller 
 XXX FIXME --- setup priv->mediabay here 
 Get Apple bus ID (for clock and ASIC control) 
 Fixup missing Apple bus ID in case of media-bay 
 cmd_addr is the base of regs for that port 
 taskfile registers 
 PIO 
 MWDMA 
 UDMA 
	 Fill up privates with various invariants collected from the
	  device-tree
 Make sure we have sane initial timings in the cache 
 Allocate libata host for 1 port 
 Setup the private data in host too 
 Map base registers 
 Map DMA regs 
 If chip has local feature control, map those regs too 
 Setup port data structure 
 hard-reset the controller 
 Enable bus master if necessary 
 Start it up 
 Check for broken device-trees 
 Enable managed resources 
 Allocate and init private data structure 
 Request memory resource for taskfile registers 
 Request resources for DMA registers if any 
	
	  Fixup missing IRQ for some old implementations with broken
	  device-trees.
	 
	  This is a bit bogus, it should be fixed in the device-tree itself,
	  via the existing macio fixups, based on the type of interrupt
	  controller in the machine. However, I have no test HW for this case,
	  and this trick works well enough on those old machines...
 Prevvent media bay callbacks until fully registered 
 Get register addresses and call common initialization 
 Taskfile regs 
 DBDMA regs 
 Feature control 
	 Make sure the mediabay callback doesn't try to access
	  dead stuff
 CONFIG_PM_SLEEP 
 CONFIG_PMAC_MEDIABAY 
 We cannot use a MacIO controller without its OF device node 
 Check that it can be enabled 
 Allocate and init private data structure 
 Get MMIO regions 
 Get register addresses and call common initialization 
 Taskfile regs 
 DBDMA regs 
 Feature control 
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0-or-later
   acard-ahci.c - ACard AHCI SATA support
   Maintained by:  Tejun Heo <tj@kernel.org>
 		    Please ALWAYS copy linux-ide@vger.kernel.org
 		    on emails.
   Copyright 2010 Red Hat, Inc.
  libata documentation is available via 'make {ps|pdf}docs',
  as Documentationdriver-apilibata.rst
  AHCI hardware documentation:
  http:www.intel.comtechnologyserialatapdfrev1_0.pdf
  http:www.intel.comtechnologyserialatapdfrev1_1.pdf
  Received FIS structure limited to 80h.
 bit 31 (EOT) max==0x10000 (64k) 
 ACard 
 ATP8620 
 terminate list 
		 AHCI spec rev1.1 section 8.3.3:
		  Software must disable interrupts prior to requesting a
		  transition of the HBA to D3 state.
 flush 
	
	  Next, the SG list.
		
		  ACard note:
		  We must set an end-of-table (EOT) bit,
		  and the segment cannot exceed 64k (0x10000)
 set EOT 
 five dwords 
	
	  Fill in command table information.  First, the header,
	  a SATA Register - Host to Device command FIS.
	
	  Fill in command slot information.
	 
	  ACard note: prd table length not filled in
	
	  After a successful execution of an ATA PIO data-in command,
	  the device doesn't send D2H Reg FIS to update the TF and
	  the host should take TF and E_Status from the preceding PIO
	  Setup FIS.
 check FBS capability 
	
	  First item in chunk of DMA memory: 32-slot command table,
	  32 bytes each in size
	
	  Second item: Received-FIS area
	
	  Third item: data area for storing a single command
	  and its scatter-gather table
	
	  Save off initial list of interrupts to be enabled.
	  This could be changed later
 engage engines, captain 
 acquire resources 
	 AHCI controllers often implement SFF compatible interface.
	  Grab all PCI BARs just in case.
 save initial config 
 prepare host 
	 CAP.NP sometimes indicate the index of the last enabled
	  port, at other times, that of the last possible port, so
	  determining the maximum port number requires looking at
	  both CAP.NP and port_map.
 set initial link pm policy 
		
		ap->pm_policy = NOT_AVAILABLE;
 disablednot-implemented port 
 initialize adapter 
 SPDX-License-Identifier: GPL-2.0-only
     pata_sis.c - SiS ATA driver
 	(C) 2005 Red Hat
 	(C) 2007,2009 Bartlomiej Zolnierkiewicz
     Based upon linuxdriversidepcisis5513.c
  Copyright (C) 1999-2000	Andre Hedrick <andre@linux-ide.org>
  Copyright (C) 2002		Lionel Bouton <Lionel.Bouton@inet6.fr>, Maintainer
  Copyright (C) 2003		Vojtech Pavlik <vojtech@suse.cz>
  SiS Taiwan		: for direct support and hardware.
  Daniela Engert	: for initial ATA100 advices and numerous others.
  John Fremlin, Manfred Spraul, Dave Morgan, Peter Kjellerstedt	:
 			  for checking code correctness, providing patches.
  Original tests and design on the SiS620 chipset.
  ATA100 tests and design on the SiS735 chipset.
  ATA1633 support from specs
  ATA133 support for SiS961962 by L.C. Chang <lcchang@sis.com.tw>
 	TODO
 	Check MWDMA on drives that don't support MWDMA speed pio cycles ?
 	More Testing
 PCI host ID 
 Info block 
	 Probably add family, cable detect type etc here to clean
 devid, subvendor, subdev 
 ASUS A6K 
 FSC Amilo A1630 
 EasyNote K5305 
 end marker 
 	sis_old_port_base - return PCI configuration base for dev
 	@adev: device
 	Returns the base of the PCI configuration registers for this port
 	number.
 	sis_port_base - return PCI configuration base for dev
 	@adev: device
 	Returns the base of the PCI configuration registers for this port
 	number.
 If bit 30 is set then the registers are mapped at 0x70 not 0x40 
 	sis_133_cable_detect - check for 4080 pin
 	@ap: Port
 	Perform cable detection for the later UDMA133 capable
 	SiS chipset.
 The top bit of this register is the cable detect bit 
 	sis_66_cable_detect - check for 4080 pin
 	@ap: Port
 	Perform cable detection on the UDMA66, UDMA100 and early UDMA133
 	SiS IDE controllers.
 Older chips keep cable detect in bits 45 of reg 0x48 
 	sis_pre_reset - probe begin
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Set up cable type and use generic probe init
 port 0 
 port 1 
	 Clear the FIFO settings. We can't enable the FIFO until
 	sis_set_fifo - Set RWP fifo bits for this device
 	@ap: Port
 	@adev: Device
 	SIS chipsets implement prefetchpostwrite bits for each device
 	on both channels. This functionality is not ATAPI compatible and
 	must be configured according to the class of device present
 This holds various bits including the FIFO control 
 Enable for ATA (disk) only 
 	sis_old_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device we are configuring for.
 	Set PIO mode for device, in host controller PCI config space. This
 	function handles PIO set up for all chips that are pre ATA100 and
 	also early ATA100 devices.
 	LOCKING:
 	None (inherited from caller).
 Clear activerecovery timings 
 	sis_100_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device we are configuring for.
 	Set PIO mode for device, in host controller PCI config space. This
 	function handles PIO set up for ATA100 devices and early ATA133.
 	LOCKING:
 	None (inherited from caller).
 	sis_133_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device we are configuring for.
 	Set PIO mode for device, in host controller PCI config space. This
 	function handles PIO set up for the later ATA133 devices.
 	LOCKING:
 	None (inherited from caller).
 Recovery << 24 | Act << 16 | Ini << 12 
 Recovery << 24 | Act << 16 | Ini << 12 
 Mask out timing 
 100 or 133 ? 
 	sis_old_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set UDMAMWDMA mode for device, in host controller PCI config space.
 	Handles pre UDMA and UDMA33 devices. Supports MWDMA as well unlike
 	the old idepci driver.
 	LOCKING:
 	None (inherited from caller).
		 bits 3-0 hold recovery timing bits 8-10 active timing and
 Bit 15 is UDMA onoff, bit 13-14 are cycle time 
 	sis_66_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set UDMAMWDMA mode for device, in host controller PCI config space.
 	Handles UDMA66 and early UDMA100 devices. Supports MWDMA as well unlike
 	the old idepci driver.
 	LOCKING:
 	None (inherited from caller).
 MWDMA 0-2 and UDMA 0-5 
		 bits 3-0 hold recovery timing bits 8-10 active timing and
 Bit 15 is UDMA onoff, bit 12-14 are cycle time 
 	sis_100_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set UDMAMWDMA mode for device, in host controller PCI config space.
 	Handles UDMA66 and early UDMA100 devices.
 	LOCKING:
 	None (inherited from caller).
 NOT SUPPORTED YET: NEED DATA SHEET. DITTO IN OLD DRIVER 
 Bit 7 is UDMA onoff, bit 0-3 are cycle time 
 	sis_133_early_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set UDMAMWDMA mode for device, in host controller PCI config space.
 	Handles early SiS 961 bridges.
 	LOCKING:
 	None (inherited from caller).
 Low 4 bits are timing 
 NOT SUPPORTED YET: NEED DATA SHEET. DITTO IN OLD DRIVER 
 Bit 7 is UDMA onoff, bit 0-3 are cycle time 
 	sis_133_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set UDMAMWDMA mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 Recovery << 24 | Act << 16 | Ini << 12, like PIO modes 
 disable UDMA 
 bits 4- cycle time 8 - cvs time 
 enable UDMA 
 	sis_133_mode_filter - mode selection filter
 	@adev: ATA device
 	@mask: received mask to manipulate and pass back
 	Block UDMA6 on devices that do not support it.
 if ATA133 is disabled, mask it out 
 No UDMA 
 No MWDMA 
 No MWDMA 
 No MWDMA 
 No MWDMA 
 No MWDMA 
 Privately shared with the SiS180 SATA driver, not for use elsewhere 
 Fix up latency 
 Set compatibility bit 
 Fix up latency 
 Set compatibility bit 
 Fall through to ATA16 fixup below 
		 force per drive recovery and active timings
 	sis_init_one - Register SiS ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in sis_pci_tbl matching with @pdev
 	Called from kernel PCI layer. We probe for combined mode (sigh),
 	and then hand over control to libata, for it to do the rest.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 100 with ATA 66 layout 
 100 with ATA 66 layout 
 We have to find the bridge first 
 Match found 
 SIS630 
 630 ET 
 Look for concealed bridges 
 Second check 
		 Disable ID masking and register remapping then
 SIS 962963 
 SIS 965965L 
 SIS 966966L 
 Further check 
 Try the second unmasking technique 
 Bus 0 Dev 2 Fn 0 
 No chipset info, no support 
 SiS 5513 
 SiS 5518 
 SiS 1180 
 SPDX-License-Identifier: GPL-2.0-only
  Libata driver for the HighPoint 371N, 372N, and 302N UDMA66 ATA controllers.
  This driver is heavily based upon:
  linuxdriversidepcihpt366.c		Version 0.36	April 25, 2003
  Copyright (C) 1999-2003		Andre Hedrick <andre@linux-ide.org>
  Portions Copyright (C) 2001	        Sun Microsystems, Inc.
  Portions Copyright (C) 2003		Red Hat Inc
  Portions Copyright (C) 2005-2010	MontaVista Software, Inc.
  TODO
 	Work out best PLL policy
 key for bus clock timings
  bit
  0:3    data_high_time. Inactive time of DIOW_DIOR_ for PIO and MW DMA.
         cycles = value + 1
  4:8    data_low_time. Active time of DIOW_DIOR_ for PIO and MW DMA.
         cycles = value + 1
  9:12   cmd_high_time. Inactive time of DIOW_DIOR_ during task file
         register access.
  13:17  cmd_low_time. Active time of DIOW_DIOR_ during task file
         register access.
  18:20  udma_cycle_time. Clock cycles for UDMA xfer.
  21     CLK frequency for UDMA: 0=ATA clock, 1=dual ATA clock.
  22:24  pre_high_time. Time to initialize 1st cycle for PIO and MW DMA xfer.
  25:27  cmd_pre_high_time. Time to initialize 1st PIO cycle for task file
         register access.
  28     UDMA enable.
  29     DMA  enable.
  30     PIO_MST enable. If set, the chip is in bus master mode during
         PIO xfer.
  31     FIFO enable. Only for PIO.
 66MHz DPLL clocks 
 	hpt3x2n_find_mode	-	reset the hpt3x2n bus
 	@ap: ATA port
 	@speed: transfer mode
 	Return the 32bit register programming information for this channel
 	that matches the speed provided. For the moment the clocks table
 	is hard coded but easy to change. This will be needed if we use
 	different DPLLs
 silence compiler warning 
 	hpt372n_filter	-	mode selection filter
 	@adev: ATA device
 	@mask: mode mask
 	The Marvell bridge chips used on the HighPoint SATA cards do not seem
 	to support the UltraDMA modes 1, 2, and 3 as well as any MWDMA modes...
 	hpt3x2n_cable_detect	-	Detect the cable type
 	@ap: ATA port to detect on
 	Return the cable type attached to this port
 debounce 
 Cable register now active 
 Restore state 
 	hpt3x2n_pre_reset	-	reset the hpt3x2n bus
 	@link: ATA link to reset
 	@deadline: deadline jiffies for the operation
 	Perform the initial reset handling for the 3x2n series controllers.
 	Reset the hardware and state machine,
 Reset the state machine 
 Fast interrupt prediction disable, hold off interrupt disable 
 Determine timing mask and find matching mode entry 
 	hpt3x2n_set_piomode		-	PIO setup
 	@ap: ATA interface
 	@adev: device on the interface
 	Perform PIO mode setup.
 	hpt3x2n_set_dmamode		-	DMA timing setup
 	@ap: ATA interface
 	@adev: Device being configured
 	Set up the channel for MWDMA or UDMA modes.
 	hpt3x2n_bmdma_stop		-	DMA engine stop
 	@qc: ATA command
 	Clean up after the HPT3x2n and later DMA engine
 	hpt3x2n_set_clock	-	clock control
 	@ap: ATA port
 	@source: 0x21 or 0x23 for PLL or PCI sourced clock
 	Switch the ATA bus clock between the PLL and PCI clock sources
 	while correctly isolating the bus and resetting internal logic
 	We must use the DPLL for
 	-	writing
 	-	second channel UDMA7 (SATA ports) or higher
 	-	66MHz PCI
 	or we will underclock the device and get reduced performance.
 Tristate the bus 
 Switch clock and reset channels 
 Reset state machines, avoid enabling the disabled channels 
 Complete reset 
 Reconnect channels to bus 
 See if we should use the DPLL 
 Needed for write 
 Needed at 66Mhz 
 First apply the usual rules 
 	Configuration for HPT302N371N.
 	Configuration for HPT372N. Same as 302N371N but we have a mode filter.
 	hpt3xn_calibrate_dpll		-	Calibrate the DPLL loop
 	@dev: PCI device
 	Perform a calibration cycle on the HPT3xN DPLL. Returns 1 if this
 	succeeds
 See if it stays set 
 Failed ? 
 Turn off tuning, we have the DPLL set 
 Never went stable 
 Not PCI readable for some chips 
 This is the process the HPT371 BIOS is reported to use 
 Clamp to bands 
 	hpt3x2n_init_one		-	Initialise an HPT37X302
 	@dev: PCI device
 	@id: Entry in match table
 	Initialise an HPT3x2n device. There are some interesting complications
 	here. Firstly the chip may report 366 and be one of several variants.
 	Secondly all the timings depend on the clock for the chip which we must
 	detect and look up
 	This is the known chip mappings. It may be missing a couple of later
 	releases.
 	Chip version		PCI		Rev	Notes
 	HPT372			4 (HPT366)	5	Other driver
 	HPT372N			4 (HPT366)	6	UDMA133
 	HPT372			5 (HPT372)	1	Other driver
 	HPT372N			5 (HPT372)	2	UDMA133
 	HPT302			6 (HPT302)		Other driver
 	HPT302N			6 (HPT302)	> 1	UDMA133
 	HPT371			7 (HPT371)		Other driver
 	HPT371N			7 (HPT371)	> 1	UDMA133
 	HPT374			8 (HPT374)		Other driver
 	HPT372N			9 (HPT372N)		UDMA133
 	(1) UDMA133 support depends on the bus clock
 HPT372N - UDMA133 
 HPT302N and HPT371N - UDMA133 
 372N if rev >= 6 
 371N if rev >= 2 
 372N if rev >= 2 
 302N if rev >= 2 
 Ok so this is a chip we support 
	
	  HPT371 chips physically have only one channel, the secondary one,
	  but the primary channel registers do exist!  Go figure...
	  So,  we manually disable the non-existing channel here
	  (if the BIOS hasn't done this already).
	
	  Tune the PLL. HPT recommend using 75 for SATA, 66 for UDMA133 or
	  50 for UDMA100. Right now we always use 66
 PCI Mhz for 66Mhz DPLL 
 Tolerance 
 PLL clock 
 Unlike the 37x we don't try jiggling the frequency 
	
	  Set our private data up. We only need a few flags
	  so we use it directly.
	
	  On  HPT371N, if ATA clock is 66 MHz we must set bit 2 in
	  the MISC. register to stretch the UltraDMA Tss timing.
	  NOTE: This register is only writeable via IO space.
 Now kick off ATA set up 
  Freescale iMX PATA driver
  Copyright (C) 2011 Arnaud Patard <arnaud.patard@rtp-net.org>
  Based on pata_platform - Copyright (C) 2006 - 2007  Paul Mundt
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  TODO:
  - dmaengine support
 timingsinterruptcontrol regs 
 Fixup the port shift for platforms that need it 
 deassert resets 
 enable interrupts 
 activate 
 sentinel 
 SPDX-License-Identifier: GPL-2.0+
  Renesas R-Car SATA driver
  Author: Vladimir Barinov <source@cogentembedded.com>
  Copyright (C) 2013-2015 Cogent Embedded, Inc.
  Copyright (C) 2013-2015 Renesas Solutions Corp.
 SH-Navi2GATAPI-ATA compatible task registers 
 SH-Navi2GATAPI module compatible control registers 
 ATAPI control 1 register (ATAPI_CONTROL1) bits 
 ATAPI status register (ATAPI_STATUS) bits 
 Interrupt enable register (ATAPI_INT_ENABLE) bits 
 Access control registers for physical layer control register 
 Physical layer control address command register (SATAPHYADDR) bits 
 Physical layer control enable register (SATAPHYACCEN) bits 
 Physical layer control reset register (SATAPHYRESET) bits 
 Physical layer control acknowledge register (SATAPHYACK) bits 
 Serial-ATA HOST control registers 
 SATA INT status register (SATAINTSTAT) bits 
 SATA INT mask register (SATAINTSTAT) bits 
 Physical Layer Control Registers 
 Descriptor table word 0 bit (when DTA32M = 1) 
 Gen2 Physical Layer Control Registers 
 Spread Spectrum 
 DC connection 
 Termination Resistor 
 idle state 
 reset 
 deassert reset 
 deassert reset 
 lane 1 
 write phy register value 
 set register group 
 write command 
 wait for ack 
 idle state 
 mask 
 ack 
 unmask 
 needed; also flushes, for mmio 
 found a device 
 nothing found 
 software reset.  causes dev0 to be selected 
 wait the port to become ready 
 determine if device 0 is present 
 issue bus reset 
 if link is occupied, -ENODEV too is an error 
 determine by signature whether we have ATA or ATAPI devices 
 Transfer multiple of 2 bytes 
 Transfer trailing byte, if any. 
 Point buf to the tail of buffer 
		
		  Use io16_rep() accessors here as well to avoid pointlessly
		  swapping bytes to and from on the big endian machines...
 We only need to flush incoming data when a command was running 
 Drain up to 64K of data before we give up this recovery method 
 Can become DEBUG later 
		
		  Note: hw doesn't support 64-bit, so we unconditionally
		  truncate dma_addr_t to u32.
 end-of-table flag 
 load PRD table addr. 
 make sure PRD table writes are visible to controller 
 specify data direction, triple-check start bit is clear 
 issue rw command 
 start host DMA transaction 
 force termination of DMA transfer if active 
 one-PIO-cycle guaranteed wait, per spec, for HDMA1:0 transition 
	
	  This controller allows transfer chunks up to 512MB which cross 64KB
	  boundaries, therefore the DMA limits are more relaxed than standard
	  ATA SFF.
 first, analyze and record host port events 
 Setup a soft-reset EH action 
 freeze or abort 
 be sure to clear ATA interrupt 
 ack 
 SATA-IP reset state 
 ISM mode, PRD mode, DTEND flag at bit 0 
 Release the SATA-IP from the reset state 
 ack and mask 
 enable interrupts 
 reset and setup phy 
 Deprecated by "renesas,sata-r8a7779" 
 setup port 
 initialize host controller 
 disable interrupts 
 ack and mask 
 disable interrupts 
 mask 
 ack and mask 
 enable interrupts 
 initialize host controller 
 SPDX-License-Identifier: GPL-2.0-only
     pata_efar.c - EFAR PIIX clone controller driver
 	(C) 2005 Red Hat
 	(C) 2009-2010 Bartlomiej Zolnierkiewicz
     Some parts based on ata_piix.c by Jeff Garzik and others.
     The EFAR is a PIIX4 clone with UDMA66 support. Unlike the later
     Intel ICH controllers the EFAR widened the UDMA mode register bits
     and doesn't require the funky clock selection.
 	efar_pre_reset	-	Enable bits
 	@link: ATA link
 	@deadline: deadline jiffies for the operation
 	Perform cable detection for the EFAR ATA interface. This is
 	different to the PIIX arrangement
 port 0 
 port 1 
 	efar_cable_detect	-	check for 4080 pin
 	@ap: Port
 	Perform cable detection for the EFAR ATA interface. This is
 	different to the PIIX arrangement
 	efar_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set PIO mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
	
	 	See Intel Document 298600-004 for the timing programing rules
	 	for PIIXICH. The EFAR is a clone so very similar
 ISP  RTC 
 TIME 
 PIO 34 require IORDY 
 IE 
 Intel specifies that the prefetchposting is for disk only 
 PPE 
 Set PPE, IE, and TIME as appropriate 
 Slave timing in separate register 
 Ensure SITRE is set 
 	efar_set_dmamode - Initialize host controller PATA DMA timings
 	@ap: Port whose timings we are configuring
 	@adev: Device to program
 	Set UDMAMWDMA mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 ISP  RTC 
 Load the UDMA mode number 
		
		  MWDMA is driven by the PIO timings. We must also enable
		  IORDY unconditionally along with TIME1. PPE has already
		  been set when the PIO timing was set.
 IORDY|TIME1 
		 If the drive MWDMA is faster than it can do PIO then
 Enable DMA timing only 
 PIO cycles in PIO0 
 Slave 
 Mask out IORDY|TIME1|DMAONLY 
 Load the matching timing 
 Master 
			master_data &= 0xCCF4;	 Mask out IORDY|TIME1|DMAONLY
 	efar_init_one - Register EFAR ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in efar_pci_tbl matching with @pdev
 	Called from kernel PCI layer.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 terminate list 
 SPDX-License-Identifier: GPL-2.0-or-later
   ahci.c - AHCI SATA support
   Maintained by:  Tejun Heo <tj@kernel.org>
     		    Please ALWAYS copy linux-ide@vger.kernel.org
 		    on emails.
   Copyright 2004-2005 Red Hat, Inc.
  libata documentation is available via 'make {ps|pdf}docs',
  as Documentationdriver-apilibata.rst
  AHCI hardware documentation:
  http:www.intel.comtechnologyserialatapdfrev1_0.pdf
  http:www.intel.comtechnologyserialatapdfrev1_1.pdf
 board IDs by feature in alphabetical order 
 board IDs for specific chipsets in alphabetical order 
 for SB700 and SB800 
	
	  board IDs for Intel chipsets that support more than 6 ports
	  and end up needing the PCS quirk.
 aliases 
 CONFIG_PM 
 by features 
 by chipsets 
 for SB700 and SB800 
 Intel 
 Comet Lake PCH-H RAID 
 ICH6 
 ICH6M 
 ICH7 
 ICH7M 
 ICH7R 
 ULi M5288 
 ESB2 
 ESB2 
 ESB2 
 ICH7-M DH 
 ICH8 
 ICH8Lewisburg RAID
 ICH8 
 ICH8M 
 ICH8M 
 ICH9 
 ICH9 
 ICH9 
 ICH9 
 ICH9 
 ICH9M 
 ICH9M 
 ICH9M 
 ICH9M 
 ICH9M 
 ICH9 
 ICH9M 
 Tolapai 
 Tolapai 
 ICH10 
 ICH10 
 ICH10 
 PCH AHCI 
 PCH AHCI 
 PCH RAID 
 PCH RAID 
 PCH M AHCI 
 PCH RAID 
 PCH M RAID 
 PCH AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 DNV AHCI 
 CPT AHCI 
 CPT M AHCI 
 CPT RAID 
 CPT M RAID 
 CPT RAID 
 CPT RAID 
 PBG AHCI 
 PBG RAID 
 PBG RAID 
 PBGLewisburg RAID
 DH89xxCC AHCI 
 Panther Point AHCI 
 Panther M AHCI 
 Panther Point RAID 
 Panther Point RAID 
 Panther Point RAID 
 Panther M RAID 
 Panther Point RAID 
 Lynx Point AHCI 
 Lynx M AHCI 
 Lynx Point RAID 
 Lynx M RAID 
 Lynx Point RAID 
 Lynx M RAID 
 Lynx Point RAID 
 Lynx M RAID 
 Lynx LP AHCI 
 Lynx LP AHCI 
 Lynx LP RAID 
 Lynx LP RAID 
 Lynx LP RAID 
 Lynx LP RAID 
 Lynx LP RAID 
 Lynx LP RAID 
 Cannon Lake PCH-LP AHCI 
 Avoton AHCI 
 Avoton AHCI 
 Avoton RAID 
 Avoton RAID 
 Avoton RAID 
 Avoton RAID 
 Avoton RAID 
 Avoton RAID 
 Avoton AHCI 
 Avoton AHCI 
 Avoton RAID 
 Avoton RAID 
 Avoton RAID 
 Avoton RAID 
 Avoton RAID 
 Avoton RAID 
 WellsburgLewisburg AHCI
 WellsburgLewisburg RAID
 Rocket Lake PCH-H RAID 
 Rocket Lake PCH-H RAID 
 Rocket Lake PCH-H RAID 
 Rocket Lake PCH-H RAID 
 Wellsburg AHCI 
 Wellsburg RAID 
 Wellsburg RAID 
 Wellsburg RAID 
 Wellsburg AHCI 
 Wellsburg RAID 
 Wellsburg RAID 
 Wellsburg RAID 
 Coleto Creek AHCI 
 Wildcat LP AHCI 
 Wildcat LP RAID 
 Wildcat LP RAID 
 Wildcat LP RAID 
 9 Series AHCI 
 9 Series M AHCI 
 9 Series RAID 
 9 Series M RAID 
 9 Series RAID 
 9 Series M RAID 
 9 Series RAID 
 9 Series M RAID 
 Sunrise LP AHCI 
 Sunrise LP RAID 
 Sunrise LP RAID 
 Sunrise Point-H AHCI 
 Sunrise M AHCI 
 Sunrise Point-H RAID 
 Sunrise Point-H RAID 
 Sunrise M RAID 
 Sunrise Point-H RAID 
 Lewisburg AHCI
 Lewisburg RAID
 Lewisburg RAID
 Lewisburg RAID
 Lewisburg AHCI
 Lewisburg RAID
 Lewisburg RAID
 Lewisburg RAID
 Cannon Lake PCH-H RAID 
 Comet Lake-H RAID 
 Comet Lake PCH-V RAID 
 Bay Trail AHCI 
 Bay Trail AHCI 
 Cherry Tr. AHCI 
 ApolloLake AHCI 
 Ice Lake LP AHCI 
 Comet Lake PCH-U AHCI 
 Comet Lake PCH RAID 
 JMicron 3601356, match class to avoid IDE function 
 JMicron 362B and 362C have an AHCI function with IDE class code 
 May need to update quirk_jmicron_async_suspend() for additions 
 ATI 
 ATI SB600 
 ATI SB700800 
 ATI SB700800 
 ATI SB700800 
 ATI SB700800 
 ATI SB700800 
 ATI SB700800 
 Amazon's Annapurna Labs support 
 AMD 
 AMD Hudson-2 
 AMD CZ 
 AMD Green Sardine 
 AMD is using RAID class only for ahci controllers 
 Dell S140S150 
 VIA 
 VIA VT8251 
 VIA VT8251 
 NVIDIA 
 MCP65 
 MCP65 
 MCP65 
 MCP65 
 MCP65 
 MCP65 
 MCP65 
 MCP65 
 MCP67 
 MCP67 
 MCP67 
 MCP67 
 MCP67 
 MCP67 
 MCP67 
 MCP67 
 MCP67 
 MCP67 
 MCP67 
 MCP67 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 Linux ID 
 MCP73 
 MCP73 
 MCP73 
 MCP73 
 MCP73 
 MCP73 
 MCP73 
 MCP73 
 MCP73 
 MCP73 
 MCP73 
 MCP73 
 MCP77 
 MCP77 
 MCP77 
 MCP77 
 MCP77 
 MCP77 
 MCP77 
 MCP77 
 MCP77 
 MCP77 
 MCP77 
 MCP77 
 MCP79 
 MCP79 
 MCP79 
 MCP79 
 MCP79 
 MCP79 
 MCP79 
 MCP79 
 MCP79 
 MCP79 
 MCP79 
 MCP79 
 MCP89 
 MCP89 
 MCP89 
 MCP89 
 MCP89 
 MCP89 
 MCP89 
 MCP89 
 MCP89 
 MCP89 
 MCP89 
 MCP89 
 SiS 
 SiS 966 
 SiS 968 
 SiS 968 
 ST Microelectronics 
 ST ConneXt 
 Marvell 
 6145 
 6121 
 88se9128 
 88se9125 
 88se9170 
 88se9172 
 88se9182 
 88se9172 
 88se9172 on some Gigabyte 
 88se91a2 
 highpoint rocketraid 642L 
 highpoint rocketraid 644L 
 Promise 
 PDC42819 
 FastTrak TX8660 ahci-mode 
 Asmedia 
 ASM1060 
 ASM1060 
 ASM1061 
 ASM1062 
 ASM1061R 
 ASM1062R 
 ASM1062+JMB575 
	
	  Samsung SSDs found on some macbooks.  NCQ times out if MSI is
	  enabled.  https:bugzilla.kernel.orgshow_bug.cgi?id=60731
 Enmotus 
 Loongson 
 Generic, PCI class code for AHCI 
 terminate list 
	
	  Temporary Marvell 6145 hack: PATA port presence
	  is asserted through the standard AHCI port
	  presence register, as bit 4 (counting from 0)
 clear port IRQ 
	 vt8251 doesn't clear BSY on signature FIS reception,
	  request follow-up softreset.
 clear D2H reception area to properly wait for D2H FIS 
	 The pseudo configuration device on SIMG4726 attached to
	  ASUS P5W-DH Deluxe doesn't send signature FIS after
	  hardreset if no device is attached to the first downstream
	  port && the pseudo device locks up on SRST w PMP==0.  To
	  work around this, wait for !BSY only briefly.  If BSY isn't
	  cleared, perform CLO and proceed to IDENTIFY (achieved by
	  ATA_LFLAG_NO_SRST and ATA_LFLAG_ASSUME_ATA).
	 
	  Wait for two seconds.  Devices attached to downstream port
	  which can't process the following IDENTIFY after this will
	  have to be reset again.  For most cases, this should
	  suffice while making probing snappish enough.
  ahci_avn_hardreset - attempt more aggressive recovery of Avoton ports.
  It has been observed with some SSDs that the timing of events in the
  link synchronization phase can leave the port in a state that can not
  be recovered by a SATA-hard-reset alone.  The failing signature is
  SStatus.DET stuck at 1 ("Device presence detected but Phy
  communication not established").  It was found that unloading and
  reloading the driver when this problem occurs allows the drive
  connection to be recovered (DET advanced to 0x3).  The critical
  component of reloading the driver is that the port state machines are
  reset by bouncing "port enable" in the AHCI PCS configuration
  register.  So, reproduce that effect by bouncing a port whenever we
  see DET==1 after a reset.
 clear D2H reception area to properly wait for D2H FIS 
	 AHCI spec rev1.1 section 8.3.3:
	  Software must disable interrupts prior to requesting a
	  transition of the HBA to D3 state.
 flush 
 Apple BIOS helpfully mangles the registers on resume 
 CONFIG_PM 
	
	  If the device fixup already set the dma_mask to some non-standard
	  value, don't extend it here. This happens on STA2X11, for example.
	 
	  XXX: manipulating the DMA mask from platform code is completely
	  bogus, platform code should use dev->bus_dma_limit instead..
 On ASUS P5W DH Deluxe, the second port of PCI device 00:1f.2 is
  hardwired to on-board SIMG 4726.  The chipset is ICH8 and doesn't
  support PMP and the 4726 either directly exports the device
  attached to the first downstream port or acts as a hardware storage
  controller and emulate a single ATA device (can be RAID 01 or some
  other configuration).
  When there's no device attached to the first downstream port of the
  4726, "Config Disk" appears, which is a pseudo ATA device to
  configure the 4726.  However, ATA emulation of the device is very
  lame.  It doesn't send signature D2H Reg FIS after the initial
  hardreset, pukes on SRST w PMP==0 and has bunch of other issues.
  The following function works around the problem by always using
  hardreset on the port and not depending on receiving signature FIS
  afterward.  If signature FIS isn't received soon, ATA class is
  assumed without follow-up softreset.
  Macbook7,1 firmware forcibly disables MCP89 AHCI and changes PCI ID when
  booting in BIOS compatibility mode.  We restore the registers but not ID.
 the following changes the device ID, but appears not to affect function 
 val = (val & ~0xf0000000) | 0x80000000; 
 only some SB600 ahci controllers can do 64bit DMA 
		
		  The oldest version known to be broken is 0901 and
		  working is 1501 which was released on 2007-10-26.
		  Enable 64bit DMA on 1501 and anything newer.
		 
		  Please read bko#9412 for more info.
 yyyymmdd 
		
		  All BIOS versions for the MSI K9A2 Platinum (MS-7376)
		  support 64bit DMA.
		 
		  BIOS versions earlier than 1.5 had the Manufacturer DMI
		  fields as "MICRO-STAR INTERANTIONAL CO.,LTD".
		  This spelling mistake was fixed in BIOS version 1.5, so
		  1.5 and later have the Manufacturer as
		  "MICRO-STAR INTERNATIONAL CO.,LTD".
		  So try to match on DMI_BOARD_VENDOR of "MICRO-STAR INTER".
		 
		  BIOS versions earlier than 1.9 had a Board Product Name
		  DMI field of "MS-7376". This was changed to be
		  "K9A2 Platinum (MS-7376)" in version 1.9, but we can still
		  match on DMI_BOARD_NAME of "MS-7376".
		
		  All BIOS versions for the MSI K9AGM2 (MS-7327) support
		  64bit DMA.
		 
		  This board also had the typo mentioned above in the
		  Manufacturer DMI field (fixed in BIOS version 1.5), so
		  match on DMI_BOARD_VENDOR of "MICRO-STAR INTER" again.
		
		  All BIOS versions for the Asus M3A support 64bit DMA.
		  (all release versions from 0301 to 1206 were tested)
 PCI slot number of the controller 
 PCI slot number of the controller 
 terminate list 
 apply the quirk only to on-board controllers 
		
		  On HP dv[4-6] and HDX18 with earlier BIOSen, link
		  to the harddisk doesn't become online after
		  resuming from STR.  Warn and fail suspend.
		 
		  http:bugzilla.kernel.orgshow_bug.cgi?id=12276
		 
		  Use dates instead of versions to match as HP is
		  apparently recycling both product and version
		  strings.
		 
		  http:bugzilla.kernel.orgshow_bug.cgi?id=15462
 F.30 
 F.16 
 F.21 
 F.23 
		
		  Acer eMachines G725 has the same problem.  BIOS
		  V1.03 is known to be broken.  V3.04 is known to
		  work.  Between, there are V1.06, V2.06 and V3.03
		  that we don't have much idea about.  For now,
		  blacklist anything older than V3.04.
		 
		  http:bugzilla.kernel.orgshow_bug.cgi?id=15104
 V3.04 
 terminate list 
 Various Lenovo 50 series have LPM issues with older BIOSen 
 1.31 
 1.28 
 1.33 
			
			  Note date based on release notes, 2.35 has been
			  reported to be good, but I've been unable to get
			  a hold of the reporter to get the DMI BIOS date.
			  TODO: fix this.
 2.35 
 terminate list 
		
		  There are several gigabyte boards which use
		  SIMG5723s configured as hardware RAID.  Certain
		  5723 firmware revisions shipped there keep the link
		  online but fail to answer properly to SRST or
		  IDENTIFY when no device is attached downstream
		  causing libata to retry quite a few times leading
		  to excessive detection delay.
		 
		  As these firmwares respond to the second reset try
		  with invalid device signature, considering unknown
		  sig as offline works around the problem acceptably.
 terminate list 
 device with broken DEVSLP but still showing SDS capability 
 Valleyview SoC 
		
		  Aspire 3810T issues a bunch of SATA enable commands
		  via _GTF including an invalid one and one which is
		  rejected by the device.  Among the successful ones
		  is FPDMA non-zero offset enable which when enabled
		  only on the drive side leads to NCQ command
		  failures.  Filter it out.
  On the Acer Aspire Switch Alpha 12, sometimes all SATA ports are detected
  as DUMMY, or detected but eventually get a "link down" and never get up
  again. When this happens, CAP.NP may hold a value of 0x00 or 0x01, and the
  port_map may hold a value of 0x00.
  Overriding CAP.NP to 0x02 and the port_map to 0x7 will reveal all 3 ports
  and can significantly reduce the occurrence of the problem.
  https:bugzilla.kernel.orgshow_bug.cgi?id=189471
  Due to ERRATA#22536, ThunderX needs to handle HOST_IRQ_STAT differently.
  Workaround is to make sure all pending IRQs are served before leaving
  handler.
	
	  Check if this device might have remapped nvme devices.
 We've found a remapped device 
	
	  Don't rely on the msi-x capability in the remap case,
	  share the legacy interrupt across ahci and remapped devices.
	
	  If number of MSIs is less than number of ports then Sharing Last
	  Message mode could be enforced. In this case assume that advantage
	  of multipe MSIs is negated and use single MSI mode instead.
			
			  Fallback to single MSI mode if the controller
			  enforced MRSM mode.
	
	  If the host is not capable of supporting per-port vectors, fall
	  back to single MSI before finally attempting single MSI-X.
 Ignore processing for non mobile platforms 
 user modified policy via module param 
	
	  Only apply the 6-port PCS quirk for known legacy platforms.
 Skip applying the quirk on Denverton and beyond 
	
	  port_map is determined from PORTS_IMPL PCI register which is
	  implemented as write or write-once register.  If the register
	  isn't programmed, ahci automatically generates it from number
	  of ports, which is good enough for PCS programming. It is
	  otherwise expected that platform firmware enables the ports
	  before the OS boots.
	 The AHCI driver can only drive the SATA ports, the PATA driver
	   can drive them all so if both drivers are selected make sure
 Apple BIOS on MCP89 prevents us using AHCI 
	 Promise's PDC42819 is a SASSATA controller that has an AHCI mode.
	  At the moment, we can only use the AHCI mode. Let the users know
	  that for SAS drives they're out of luck.
 Some devices use non-standard BARs 
 acquire resources 
		 ICH6s share the same PCI ID for both piix and ahci
		  modes.  Enabling ahci mode while MAP indicates
		  combined mode is a bad idea.  Yield to ata_piix.
	 AHCI controllers often implement SFF compatible interface.
	  Grab all PCI BARs just in case.
 MCP65 revision A1 and A2 can't do MSI 
 SB800 does NOT need the workaround to ignore SERR_INTERNAL 
 only some SB600s can do 64bit DMA 
 detect remapped nvme devices 
 must set flag prior to save config in order to take effect 
 save initial config 
	
	  If platform firmware failed to enable ports, try to enable
	  them here.
 prepare host 
		
		  Auto-activate optimization is supposed to be
		  supported on all AHCI controllers indicating NCQ
		  capability, but it seems to be broken on some
		  chipsets including NVIDIAs.
		
		  All AHCI controllers should be forward-compatible
		  with the new auxiliary field. This code should be
		  conditionalized if any buggy AHCI controllers are
		  encountered.
 Acer SA5-271 workaround modifies private_data 
	 CAP.NP sometimes indicate the index of the last enabled
	  port, at other times, that of the last possible port, so
	  determining the maximum port number requires looking at
	  both CAP.NP and port_map.
 legacy intx interrupts 
 set enclosure management message type 
 disablednot-implemented port 
 apply workaround for ASUS P5W DH Deluxe mainboard 
 apply gtf filter quirk 
 initialize adapter 
 SPDX-License-Identifier: GPL-2.0-only
  pata_serverworks.c 	- Serverworks PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
 			  (C) 2010 Bartlomiej Zolnierkiewicz
  based upon
  serverworks.c
  Copyright (C) 1998-2000 Michel Aubry
  Copyright (C) 1998-2000 Andrzej Krzysztofowicz
  Copyright (C) 1998-2000 Andre Hedrick <andre@linux-ide.org>
  Portions copyright (c) 2001 Sun Microsystems
  RCCServerWorks IDE driver for Linux
    OSB4: `Open South Bridge' IDE Interface (fn 1)
          supports UDMA mode 2 (33 MBs)
    CSB5: `Champion South Bridge' IDE Interface (fn 1)
          all revisions support UDMA mode 4 (66 MBs)
          revision A2.0 and up support UDMA mode 5 (100 MBs)
           The CSB5 does not provide ANY register 
           to detect 80-conductor cable presence. 
    CSB6: `Champion South Bridge' IDE Interface (optional: third channel)
  Documentation:
 	Available under NDA only. Errata info very hard to get.
 min PCI_REVISION_ID for UDMA5 (A2.0) 
 min PCI_REVISION_ID for UDMA4 (A1.0) 
 Seagate Barracuda ATA IV Family drives in UDMA mode 5
 	oem_cable	-	DellSun serverworks cable detection
 	@ap: ATA port to do cable detect
 	Dell PowerEdge and Sun Cobalt 'Alpine' hide the 4080 pin select
 	for their interfaces in the top two bits of the subsystem ID.
 	serverworks_cable_detect	-	cable detection
 	@ap: ATA port
 	Perform cable detection according to the device and subvendor
 	identifications
 kill compiler warning 
 	serverworks_is_csb	-	Check for CSB or OSB
 	@pdev: PCI device to check
 	Returns true if the device being checked is known to be a CSB
 	series device.
 	serverworks_osb4_filter	-	mode selection filter
 	@adev: ATA device
 	@mask: Mask of proposed modes
 	Filter the offered modes for the device to apply controller
 	specific rules. OSB4 requires no UDMA for disks due to a FIFO
 	bug we hit.
 	serverworks_csb_filter	-	mode selection filter
 	@adev: ATA device
 	@mask: Mask of proposed modes
 	Check the blacklist and disable UDMA5 if matched
 Disk, UDMA 
 Actually do need to check 
 	serverworks_set_piomode	-	set initial PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program the OSB4CSB5 timing registers for PIO. The PIO register
 	load is done as a simple lookup.
	 The OSB4 just requires the timing but the CSB series want the
 	serverworks_set_dmamode	-	set initial DMA mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Program the MWDMAUDMA modes for the serverworks OSB4CSB5
 	chipset. The MWDMA mode values are pulled from a lookup table
 	while the chipset uses mode number for UDMA.
 disable 600ns interrupt mask 
 enable UDMA33 support 
 Third Channel Test 
	 setup the UDMA Control register
	 
	  1. clear bit 6 to enable DMA
	  2. enable DMA modes with bits 0-1
	  	00 : legacy
	  	01 : udma2
	  	10 : udma2udma4
	  	11 : udma2udma4udma5
 Setup HT1000 SouthBridge Controller - Single Channel Only 
 Force master latency timer to 64 PCI clocks 
 OSB4 
 OSB4 no UDMA 
 No UDMA 
 CSB5 
 CSB5 - later revisions
 OSB4 : South Bridge and IDE 
 Select non UDMA capable OSB4 if we can't do fixups 
 setup CSB5CSB6 : South Bridge and IDE option RAID 
		  If the returned btr is the newer revision then
 Is this the 3rd channel CSB6 IDE ? 
  pata_it821x.c 	- IT821x PATA for new ATA layer
 			  (C) 2005 Red Hat Inc
 			  Alan Cox <alan@lxorguk.ukuu.org.uk>
 			  (C) 2007 Bartlomiej Zolnierkiewicz
  based upon
  it821x.c
  linuxdriversidepciit821x.c		Version 0.09	December 2004
  Copyright (C) 2004		Red Hat
   May be copied or modified under the terms of the GNU General Public License
   Based in part on the ITE vendor provided SCSI driver.
   Documentation available from IT8212F_V04.pdf
  	http:www.ite.com.twENproducts_more.aspx?CategoryID=3&ID=5,91
   Some other documents are NDA.
   The ITE8212 isn't exactly a standard IDE controller. It has two
   modes. In pass through mode then it is an IDE controller. In its smart
   mode its actually quite a capable hardware raid controller disguised
   as an IDE controller. Smart mode only understands DMA readwrite and
   identify, none of the fancier commands apply. The IT8211 is identical
   in other respects but lacks the raid mode.
   Errata:
   o	Rev 0x10 also requires masterslave hold the same DMA timings and
 	cannot do ATAPI MWDMA.
   o	The identify data for raid volumes lacks CHS info (technically ok)
 	but also fails to set the LBA28 and other bits. We fix these in
 	the IDE probe quirk code.
   o	If you write LBA48 sized IO's (ie > 256 sector) in smart mode
 	raid then the controller firmware dies
   o	Smart mode without RAID doesn't clear all the necessary identify
 	bits to reduce the command set to the one used
   This has a few impacts on the driver
   - In pass through mode we do all the work you would expect
   - In smart mode the clocking set up is done by the controller generally
     but we must watch the other limits and filter.
   - There are a few extra vendor commands that actually talk to the
     controller but only work PIO with no IRQ.
   Vendor areas of the identify block in smart mode are used for the
   timing and policy set up. Each HDD in raid mode also has a serial
   block on the disk. The hardware extra commands are getset chip status,
   rebuild, get rebuild status.
   In Linux the driver supports pass through mode as if the device was
   just another IDE controller. If the smart mode is running then
   volumes are managed by the controller firmware and each IDE "disk"
   is a raid volume. Even more cute - the controller can do automated
   hotplug and rebuild.
   The pass through controller itself is a little demented. It has a
   flaw that it has a single set of PIOMWDMA timings per channel so
   non UDMA devices restrict each others performance. It also has a
   single clock source per channel so mixed UDMA100133 performance
   isn't perfect and we have to pick a clock. Thankfully none of this
   matters in smart mode. ATAPI DMA is not currently supported.
   It seems the smart mode is a win for RAID1RAID10 but otherwise not.
   TODO
 	-	ATAPI and other speed filtering
 	-	RAID configuration ioctls
 Are we in smart raid mode 
 Rev 0x10 
 0, ATA_50 or ATA_66 
 ModePri log for master slave 
	 We need these for switching the clock when DMA goes onoff
 Cached PIO values 
 Cached MWDMA values 
 Cached UDMA values (per drive) 
 Master or slave loaded ? 
 	We allow users to force the card into non raid mode without
 	flashing the alternative BIOS. This is also necessary right now
 	for embedded platforms that cannot run a PC BIOS but are using this
 	device.
 	it821x_program	-	program the PIOMWDMA registers
 	@ap: ATA port
 	@adev: Device to program
 	@timing: Timing value (66Mhz in top 8bits, 50 in the low 8)
 	Program the PIOMWDMA timing for this channel according to the
 	current clock. These share the same register so are managed by
 	the DMA startstop sequence as with the old driver.
 Program PIOMWDMA timing bits 
 	it821x_program_udma	-	program the UDMA registers
 	@ap: ATA port
 	@adev: ATA device to update
 	@timing: Timing bits. Top 8 are for 66Mhz bottom for 50Mhz
 	Program the UDMA timing for this drive according to the
 	current clock. Handles the dual clocks and also knows about
 	the errata on the 0x10 revision. The UDMA errata is partly handled
 	here and partly in start_dma.
 Program UDMA timing bits 
 Early revision must be programmed for both together 
 	it821x_clock_strategy
 	@ap: ATA interface
 	@adev: ATA device being updated
 	Select between the 50 and 66Mhz base clocks to get the best
 	results for this interface.
 Look for the most wanted clocking 
 Master doesn't care does the slave ? 
 Nobody cares - keep the same clock 
 No change 
 Load this into the controller 
	
	 	Reprogram the UDMAPIO of the pair drive for the switch
	 	MWDMA will be dealt with by the dma switcher
	
	 	Reprogram the UDMAPIO of our drive for the switch.
	 	MWDMA will be dealt with by the dma switcher
 	it821x_passthru_set_piomode	-	set PIO mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Configure for PIO mode. This is complicated as the register is
 	shared by PIO and MWDMA and for both channels.
 Spec says 89 ref driver uses 88 
 We prefer 66Mhz clock for PIO 0-3, don't care for PIO4 
 PIO is lowest priority 
 	it821x_passthru_set_dmamode	-	set initial DMA mode data
 	@ap: ATA interface
 	@adev: ATA device
 	Set up the DMA modes. The actions taken depend heavily on the mode
 	to use. If UDMA is used as is hopefully the usual case then the
 	timing register is private and we need only consider the clock. If
 	we are using MWDMA then we have to manage the setting ourself as
 	we switch devices and mode.
 UDMA is high priority 
 UDMA 56 select on 
 UDMA on. Again revision 0x10 must do the pair 
 MWDMA is low priority 
 UDMA bits off - Revision 0x10 do them in pairs 
 	it821x_passthru_bmdma_start	-	DMA start callback
 	@qc: Command in progress
 	Usually drivers set the DMA timing at the point the set_dmamode call
 	is made. IT821x however requires we load new timings on the
 	transitions in some cases.
 	it821x_passthru_bmdma_stop	-	DMA stop callback
 	@qc: ATA command
 	We loaded new timings in dma_start, as a result we need to restore
 	the PIO timings in dma_stop so that the next command issue gets the
 	right clock values.
 	it821x_passthru_dev_select	-	Select masterslave
 	@ap: ATA port
 	@device: Device number (not pointer)
 	Device selection hook. If necessary perform clock switching
 	it821x_smart_qc_issue		-	wrap qc issue prot
 	@qc: command
 	Wrap the command issue sequence for the IT821x. We need to
 	perform out own device selection timing loads before the
 	usual happenings kick off
 Commands the firmware supports 
 Internal 'report rebuild state' 
 Arguably should just no-op this one 
 	it821x_passthru_qc_issue	-	wrap qc issue prot
 	@qc: command
 	Wrap the command issue sequence for the IT821x. We need to
 	perform out own device selection timing loads before the
 	usual happenings kick off
 	it821x_smart_set_mode	-	mode setting
 	@link: interface to set up
 	@unused: device that failed (error only)
 	Use a non standard set_mode function. We don't want to be tuned.
 	The BIOS configured everything. Our job is not to fiddle. We
 	read the dma enabled bits from the PCI configuration of the device
 	and respect them.
 We don't really care 
		 We do need the right mode information for DMA or PIO
 	it821x_dev_config	-	Called each device identify
 	@adev: Device that has just been identified
 	Perform the initial setup needed for each device that is chip
 	special. In our case we need to lock the sector count to avoid
 	blowing the brains out of the firmware with large LBA48 requests
 RAID mode 
	 This is a controller firmware triggered funny, don't
 No HPA in 'smart' mode 
 	it821x_read_id	-	Hack identify data up
 	@adev: device to read
 	@tf: proposed taskfile
 	@id: buffer for returned ident data
 	Query the devices on this firmware driven port and slightly
 	mash the identify data to stop us and common tools trying to
 	use features not firmware supported. The firmware itself does
 	some masking (eg SMART) but not enough.
 Cache flush is firmware handled 
 Ditto for LBA48 flushes 
 No FUA 
 No HPA 
 No NCQAN etc 
 Set feature bits the firmware neglects 
 LBA, DMA 
 Word 83 is valid and LBA48 
 LBA48 on 
		 Clear the serial number because it's different each boot
 	it821x_check_atapi_dma	-	ATAPI DMA handler
 	@qc: Command we are about to issue
 	Decide if this ATAPI command can be issued by DMA on this
 	controller. Return 0 if it can be.
 Only use dma for transfers tofrom the media. 
 No ATAPI DMA in smart mode 
 No ATAPI DMA on rev 10 
 Cool 
 	it821x_display_disk	-	display disk setup
 	@n: Device number
 	@buf: Buffer block from firmware
 	Produce a nice informative display of the device setup as provided
 	by the firmware.
 No Disk 
 	it821x_firmware_command		-	issue firmware command
 	@ap: IT821x port to interrogate
 	@cmd: command
 	@len: length
 	Issue firmware commands expecting data back from the controller. We
 	use this to issue commands that do not go via the normal paths. Other
 	commands such as 0xFC can be issued normally.
	 This isn't quite a normal ATA command as we are talking to the
	 This should be almost immediate but a little paranoia goes a long
 	it821x_probe_firmware	-	firmware reportingsetup
 	@ap: IT821x port being probed
 	Probe the firmware of the controller by issuing firmware command
 	0xFA and analysing the returned data.
	 This is a bit ugly as we can't just issue a task file to a device
 	it821x_port_start	-	port setup
 	@ap: ATA port being set up
 	The it821x needs to maintain private data structures and also to
 	use the standard PCI interface which lacks support for this
 	functionality. We instead set up the private data on the port
 	start hook, and tear it down on port stop
		 Long IO's although allowed in LBA48 space cause the
 No ATAPI DMA in this mode either 
 Pull the current clocks from 0x50 
 Need to disable ATAPI DMA for this case 
 	it821x_rdc_cable	-	Cable detect for RDC1010
 	@ap: port we are checking
 	Return the RDC1010 cable type. Unlike the IT821x we know how to do
 	this and can do host side cable detect
 Neither the RDC nor the IT8211 
 Reset local CPU, and set BIOS not ready 
 Set to bypass mode, and reset PCI bus 
 No UDMA 
 Deal with Vortex86SX 
 Force the card into bypass mode if so requested 
 Resume - turn raid back off if need be 
 SPDX-License-Identifier: GPL-2.0-only
   A low-level PATA driver to handle a Compact Flash connected on the
   Mikrotik's RouterBoard 532 board.
   Copyright (C) 2007 Gabor Juhos <juhosg at openwrt.org>
   Copyright (C) 2008 Florian Fainelli <florian@openwrt.org>
   This file was based on: driversatapata_ixp4xx_cf.c
 	Copyright (C) 2006-07 Tower Technologies
 	Author: Alessandro Zummo <a.zummo@towertech.it>
   Also was based on the driver for Linux 2.4.xx published by Mikrotik for
   their RouterBoard 1xx and 5xx series devices. The original Mikrotik code
   seems not to have a license.
 32bit buffered data register offset 
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------ 
 allocate host 
 SPDX-License-Identifier: GPL-2.0-only
  Calxeda Highbank AHCI SATA platform driver
  Copyright 2012 Calxeda, Inc.
  based on the AHCI SATA platform driver by Jeff Garzik and Anton Vorontsov
 Each of the 6 phys can have up to 4 sata ports attached to i. Map 0-based
  sata ports to their phys and then to their lanes within the phys
 number of extra clocks that the SGPIO PIC controller expects 
  Tell the LED controller that the signal has changed by raising the clock
  line for 50 uS and then lowering it for 50 uS.
 get the slot number from the message 
	
	  bit-bang out the SGPIO pattern, by consuming a bit and then
	  clocking it out.
 save off new led state for portslot 
 store em_loc 
  The Calxeda SATA phy intermittently fails to bring up a link with Gen3
  Retrying the phy hard reset can work around the issue, but the drive
  may fail again. In less than 150 out of 15000 test runs, it took more
  than 10 tries for the link to be established (but never more than 35).
  Triple the maximum observed retry count to provide plenty of margin for
  rare events and to guarantee that the link is established.
  Also, the default 2 second time-out on a failed drive is too long in
  this situation. The uboot implementation of the same driver function
  uses a much shorter time-out period and never experiences a time out
  issue. Reducing the time-out to 500ms improves the responsiveness.
  The other timing constants were kept the same as the stock AHCI driver.
  This change was also tested 15000 times on 24 drives and none of them
  experienced a time out.
 clear D2H reception area to properly wait for D2H FIS 
		 If the status is 1, we are connected, but the link did not
		  come up. So retry resetting the link again.
 prepare host 
	 CAP.NP sometimes indicate the index of the last enabled
	  port, at other times, that of the last possible port, so
	  determining the maximum port number requires looking at
	  both CAP.NP and port_map.
 set enclosure management message type 
 disablednot-implemented port 
	
	  AHCI spec rev1.1 section 8.3.3:
	  Software must disable interrupts prior to requesting a
	  transition of the HBA to D3 state.
 flush 
 SPDX-License-Identifier: GPL-2.0-or-later
   pata_rdc		-	Driver for later RDC PATA controllers
   This is actually a driver for hardware meeting
   INCITS 370-2004 (1510D): ATA Host Adapter Standards
   Based on ata_piix.
 	rdc_pata_cable_detect - Probe host controller cable detect info
 	@ap: Port for which cable detect info is desired
 	Read 80c cable indicator from ATA PCI device's PCI config
 	register.  This register is normally set by firmware (BIOS).
 	LOCKING:
 	None (inherited from caller).
 check BIOS cable detect results 
 	rdc_pata_prereset - prereset for PATA host controller
 	@link: Target link
 	@deadline: deadline jiffies for the operation
 	LOCKING:
 	None (inherited from caller).
 port 0 
 port 1 
 	rdc_set_piomode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: um
 	Set PIO mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 ISP  RTC 
 TIME1 enable 
 IE enable 
 PPE enable 
	 PIO configuration clears DTE unconditionally.  It will be
	  programmed in set_dmamode which is guaranteed to be called
	  after set_piomode if any DMA mode is available.
 clear TIME1|IE1|PPE1|DTE1 
 Enable SITRE (separate slave timing register) 
 enable PPE1, IE1 and TIME1 as needed 
 Load the timing nibble for this slave 
 clear ISP|RCT|TIME0|IE0|PPE0|DTE0 
 Enable PPE, IE and TIME as appropriate 
 load ISP and RCT 
	 Ensure the UDMA bit is off - it will be turned back on if
 	rdc_set_dmamode - Initialize host controller PATA PIO timings
 	@ap: Port whose timings we are configuring
 	@adev: Drive in question
 	Set UDMA mode for device, in host controller PCI config space.
 	LOCKING:
 	None (inherited from caller).
 ISP  RTC 
		
		  UDMA is handled by a combination of clock switching and
		  selection of dividers
		 
		  Handy rule: Odd modes are UDMATIMx 01, even are 02
		 	       except UDMA0 which is 00
 100Mhz 
 66Mhz 
 33Mhz 
 Load the CTRP selection 
 Select a 3366100Mhz clock 
		
		  MWDMA is driven by the PIO timings. We must also enable
		  IORDY unconditionally along with TIME1. PPE has already
		  been set when the PIO timing was set.
 IORDY|TIME1 
		 If the drive MWDMA is faster than it can do PIO then
 Enable DMA timing only 
 PIO cycles in PIO0 
 Slave 
 Mask out IORDY|TIME1|DMAONLY 
 Load the matching timing 
 Master 
			master_data &= 0xCCF4;	 Mask out IORDY|TIME1|DMAONLY
 	rdc_init_one - Register PIIX ATA PCI device with kernel services
 	@pdev: PCI device to register
 	@ent: Entry in rdc_pci_tbl matching with @pdev
 	Called from kernel PCI layer.  We probe for combined mode (sigh),
 	and then hand over control to libata, for it to do the rest.
 	LOCKING:
 	Inherited from PCI layer (may sleep).
 	RETURNS:
 	Zero on success, or -ERRNO value.
 enable device and prepare host 
	 Save IOCFG, this will be used for cable detection, quirk
	  detection and restoration on detach.
 terminate list 
 SPDX-License-Identifier: GPL-2.0-or-later
  AHCI SATA platform library
  Copyright 2004-2005  Red Hat, Inc.
    Jeff Garzik <jgarzik@pobox.com>
  Copyright 2010  MontaVista Software, LLC.
    Anton Vorontsov <avorontsov@ru.mvista.com>
  ahci_platform_enable_phys - Enable PHYs
  @hpriv: host private area to store config values
  This function enables all the PHYs found in hpriv->phys, if any.
  If a PHY fails to be enabled, it disables all the PHYs already
  enabled in reverse order and returns an error.
  RETURNS:
  0 on success otherwise a negative error code
  ahci_platform_disable_phys - Disable PHYs
  @hpriv: host private area to store config values
  This function disables all PHYs found in hpriv->phys.
  ahci_platform_enable_clks - Enable platform clocks
  @hpriv: host private area to store config values
  This function enables all the clks found in hpriv->clks, starting at
  index 0. If any clk fails to enable it disables all the clks already
  enabled in reverse order, and then returns an error.
  RETURNS:
  0 on success otherwise a negative error code
  ahci_platform_disable_clks - Disable platform clocks
  @hpriv: host private area to store config values
  This function disables all the clks found in hpriv->clks, in reverse
  order of ahci_platform_enable_clks (starting at the end of the array).
  ahci_platform_enable_regulators - Enable regulators
  @hpriv: host private area to store config values
  This function enables all the regulators found in controller and
  hpriv->target_pwrs, if any.  If a regulator fails to be enabled, it
  disables all the regulators already enabled in reverse order and
  returns an error.
  RETURNS:
  0 on success otherwise a negative error code
  ahci_platform_disable_regulators - Disable regulators
  @hpriv: host private area to store config values
  This function disables all regulators found in hpriv->target_pwrs and
  AHCI controller.
  ahci_platform_enable_resources - Enable platform resources
  @hpriv: host private area to store config values
  This function enables all ahci_platform managed resources in the
  following order:
  1) Regulator
  2) Clocks (through ahci_platform_enable_clks)
  3) Resets
  4) Phys
  If resource enabling fails at any point the previous enabled resources
  are disabled in reverse order.
  RETURNS:
  0 on success otherwise a negative error code
  ahci_platform_disable_resources - Disable platform resources
  @hpriv: host private area to store config values
  This function disables all ahci_platform managed resources in the
  following order:
  1) Phys
  2) Resets
  3) Clocks (through ahci_platform_disable_clks)
  4) Regulator
	
	  The regulators are tied to child node device and not to the
	  SATA device itself. So we can't use devm for automatically
	  releasing them. We have to do it manually here.
 No PHY support. Check if PHY is required. 
 continue normally 
 Do not complain yet 
  ahci_platform_get_resources - Get platform resources
  @pdev: platform device to get resources for
  @flags: bitmap representing the resource to get
  This function allocates an ahci_host_priv struct, and gets the following
  resources, storing a reference to them inside the returned struct:
  1) mmio registers (IORESOURCE_MEM 0, mandatory)
  2) regulator for controlling the targets power (optional)
     regulator for controlling the AHCI controller (optional)
  3) 0 - AHCI_MAX_CLKS clocks, as specified in the devs devicetree node,
     or for non devicetree enabled platforms a single clock
  4) resets, if flags has AHCI_PLATFORM_GET_RESETS (optional)
  5) phys (optional)
  RETURNS:
  The allocated ahci_host_priv on success, otherwise an ERR_PTR value
		
		  For now we must use clk_get(dev, NULL) for the first clock,
		  because some platforms (da850, spear13xx) are not yet
		  converted to use devicetree for clocks.  For new platforms
		  this is equivalent to of_clk_get(dev->of_node, 0).
	
	  If no sub-node was found, we still need to set nports to
	  one in order to be able to use the
	  ahci_platform_[en|dis]able_[phys|regulators] functions.
	
	  We cannot use devm_ here, since ahci_platform_put_resources() uses
	  target_pwrs after devm_ have freed memory
		
		  If no sub-node was found, keep this for device tree
		  compatibility
  ahci_platform_init_host - Bring up an ahci-platform host
  @pdev: platform device pointer for the host
  @hpriv: ahci-host private data for the host
  @pi_template: template for the ata_port_info to use
  @sht: scsi_host_template to use when registering
  This function does all the usual steps needed to bring up an
  ahci-platform host, note any necessary resources (ie clks, phys, etc.)
  must be initialized  enabled before calling this.
  RETURNS:
  0 on success otherwise a negative error code
 prepare host 
	 CAP.NP sometimes indicate the index of the last enabled
	  port, at other times, that of the last possible port, so
	  determining the maximum port number requires looking at
	  both CAP.NP and port_map.
 set enclosure management message type 
 disablednot-implemented port 
  ahci_platform_shutdown - Disable interrupts and stop DMA for host ports
  @pdev: platform device pointer for the host
  This function is called during system shutdown and performs the minimal
  deconfiguration required to ensure that an ahci_platform host cannot
  corrupt or otherwise interfere with a new kernel being started with kexec.
 Disable port interrupts 
 Stop the port DMA engines 
 Disable and clear host interrupts 
 flush 
  ahci_platform_suspend_host - Suspend an ahci-platform host
  @dev: device pointer for the host
  This function does all the usual steps needed to suspend an
  ahci-platform host, note any necessary resources (ie clks, phys, etc.)
  must be disabled after calling this.
  RETURNS:
  0 on success otherwise a negative error code
	
	  AHCI spec rev1.1 section 8.3.3:
	  Software must disable interrupts prior to requesting a
	  transition of the HBA to D3 state.
 flush 
  ahci_platform_resume_host - Resume an ahci-platform host
  @dev: device pointer for the host
  This function does all the usual steps needed to resume an ahci-platform
  host, note any necessary resources (ie clks, phys, etc.)  must be
  initialized  enabled before calling this.
  RETURNS:
  0 on success otherwise a negative error code
  ahci_platform_suspend - Suspend an ahci-platform device
  @dev: the platform device to suspend
  This function suspends the host associated with the device, followed by
  disabling all the resources of the device.
  RETURNS:
  0 on success otherwise a negative error code
  ahci_platform_resume - Resume an ahci-platform device
  @dev: the platform device to resume
  This function enables all the resources of the device followed by
  resuming the host associated with the device.
  RETURNS:
  0 on success otherwise a negative error code
 We resumed so update PM runtime state 
 SPDX-License-Identifier: GPL-2.0-or-later
   sata_qstor.c - Pacific Digital Corporation QStor SATA
   Maintained by:  Mark Lord <mlord@pobox.com>
   Copyright 2005 Pacific Digital Corporation.
   (OSLGPL code release authorized by Jalil Fadavi).
   libata documentation is available via 'make {ps|pdf}docs',
   as Documentationdriver-apilibata.rst
 global register offsets 
 host configuration offset 
 host physical interface info 
 global interrupt mask offset 
 host status fifo offset 
 PHY enable offset 
 global control bits 
 64-bit bus detected 
 global chip reset 
 PHY detection ENAble
 per-channel register offsets 
 chan CPB base address 
 chan CPB separation factor 
 host upstream fifo threshold 
 host downstream fifo threshold 
 dev upstream fifo threshold 
 dev downstream fifo threshold 
 chan control-0 offset 
 chan control-1 offset 
 chan command fifo offset 
 channel control bits 
 register mode (vs. pkt mode) 
 clear channel errors 
 sata phycomms reset 
 reset channel logic 
 RUN a new dma PKT 
 pkt sub-field headers 
 Host Control Block header 
 Device Control Block header 
 pkt HCB flag bits 
 data DIRection Out 
 DATa pkt 
 Interrupt ENable 
 VaLiD pkt 
 pkt DCB flag bits 
 Pio OR Dma 
 Extended LBA (lba48) 
 PCI device IDs 
 QStor 4-port SATARAID 
 board_2068_idx 
 terminate list 
 ATAPI DMA not supported 
 flush 
 flush 
 disable host interrupts 
 enable host interrupts 
 host control block (HCB) 
 device control block (DCB) 
 frame information structure (FIS) 
 flush PRDs and pkt to memory 
 flush 
 valid flag 
 empty flag 
 dev status 
 host status 
 successful CPB 
 device error 
			
			  The qstor hardware generates spurious
			  interrupts from time to time when switching
			  in and out of packet mode.  There's no
			  obvious way to know if we're here now due
			  to that, so just ack the irq and pretend we
			  knew it was ours.. (ugh).  This does not
			  affect packet mode.
 hob_feature = 0x409 
 hob_nsect   = 0x411 
 hob_lbal    = 0x419 
 hob_lbam    = 0x421 
 hob_lbah    = 0x429 
 disable host interrupts 
 global reset 
 disable host interrupts 
 global reset 
 reset each channel in turn 
 flush 
 enable phy 
 set FIFO depths to same settings as Windows driver 
 set CPB size in bytes, as a power of two 
 enable host interrupts 
  The QStor understands 64-bit buses, and uses 64-bit fields
  for DMA pointers regardless of bus width.  We just have to
  make sure our DMA masks are set appropriately for whatever
  bridge lies between us and the QStor, and then the DMA mapping
  code will ensure we only ever "see" appropriate buffer addresses.
  If we're 32-bit limited somewhere, then our 64-bit fields will
  just end up with zeros in the upper 32-bits, without any special
  logic required outside of this routine (below).
 alloc host 
 acquire resources and fill host 
 initialize adapter 
 SPDX-License-Identifier: GPL-2.0-or-later
   SATA specific part of ATA helper library
   Copyright 2003-2004 Red Hat, Inc.  All rights reserved.
   Copyright 2003-2004 Jeff Garzik
   Copyright 2006 Tejun Heo <htejun@gmail.com>
 debounce timing parameters in msecs { interval, duration, timeout } 
 	sata_scr_valid - test whether SCRs are accessible
 	@link: ATA link to test SCR accessibility for
 	Test whether SCRs are accessible for @link.
 	LOCKING:
 	None.
 	RETURNS:
 	1 if SCRs are accessible, 0 otherwise.
 	sata_scr_read - read SCR register of the specified port
 	@link: ATA link to read SCR for
 	@reg: SCR to read
 	@val: Place to store read value
 	Read SCR register @reg of @link into @val.  This function is
 	guaranteed to succeed if @link is ap->link, the cable type of
 	the port is SATA and the port implements ->scr_read.
 	LOCKING:
 	None if @link is ap->link.  Kernel thread context otherwise.
 	RETURNS:
 	0 on success, negative errno on failure.
 	sata_scr_write - write SCR register of the specified port
 	@link: ATA link to write SCR for
 	@reg: SCR to write
 	@val: value to write
 	Write @val to SCR register @reg of @link.  This function is
 	guaranteed to succeed if @link is ap->link, the cable type of
 	the port is SATA and the port implements ->scr_read.
 	LOCKING:
 	None if @link is ap->link.  Kernel thread context otherwise.
 	RETURNS:
 	0 on success, negative errno on failure.
 	sata_scr_write_flush - write SCR register of the specified port and flush
 	@link: ATA link to write SCR for
 	@reg: SCR to write
 	@val: value to write
 	This function is identical to sata_scr_write() except that this
 	function performs flush after writing to the register.
 	LOCKING:
 	None if @link is ap->link.  Kernel thread context otherwise.
 	RETURNS:
 	0 on success, negative errno on failure.
 	ata_tf_to_fis - Convert ATA taskfile to SATA FIS structure
 	@tf: Taskfile to convert
 	@pmp: Port multiplier port
 	@is_cmd: This FIS is for command
 	@fis: Buffer into which data will output
 	Converts a standard ATA taskfile to a Serial ATA
 	FIS structure (Register - Host to Device).
 	LOCKING:
 	Inherited from caller.
 Register - Host to Device FIS 
 Port multiplier number
 bit 7 indicates Command FIS 
 	ata_tf_from_fis - Convert SATA FIS to ATA taskfile
 	@fis: Buffer from which data will be input
 	@tf: Taskfile to output
 	Converts a serial ATA FIS structure to a standard ATA taskfile.
 	LOCKING:
 	Inherited from caller.
 status 
 error 
 	sata_link_debounce - debounce SATA phy status
 	@link: ATA link to debounce SATA phy status for
 	@params: timing parameters { interval, duration, timeout } in msec
 	@deadline: deadline jiffies for the operation
 	Make sure SStatus of @link reaches stable state, determined by
 	holding the same value where DET is not 1 for @duration polled
 	every @interval, before @timeout.  Timeout constraints the
 	beginning of the stable state.  Because DET gets stuck at 1 on
 	some controllers after hot unplugging, this functions waits
 	until timeout then returns 0 if DET is stable at 1.
 	@timeout is further limited by @deadline.  The sooner of the
 	two is used.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, -errno on failure.
 DET stable? 
 unstable, start over 
		 Check deadline.  If debouncing failed, return
		  -EPIPE to tell upper layer to lower link speed.
 	sata_link_resume - resume SATA link
 	@link: ATA link to resume SATA
 	@params: timing parameters { interval, duration, timeout } in msec
 	@deadline: deadline jiffies for the operation
 	Resume SATA phy @link and debounce it.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, -errno on failure.
	
	  Writes to SControl sometimes get ignored under certain
	  controllers (ata_piix SIDPR).  Make sure DET actually is
	  cleared.
		
		  Some PHYs react badly if SStatus is pounded
		  immediately after resuming.  Delay 200ms before
		  debouncing.
 is SControl restored correctly? 
 clear SError, some PHYs require this even for SRST to work 
 	sata_link_scr_lpm - manipulate SControl IPM and SPM fields
 	@link: ATA link to manipulate SControl for
 	@policy: LPM policy to configure
 	@spm_wakeup: initiate LPM transition to active state
 	Manipulate the IPM field of the SControl register of @link
 	according to @policy.  If @policy is ATA_LPM_MAX_POWER and
 	@spm_wakeup is %true, the SPM field is manipulated to wake up
 	the link.  This function also clears PHYRDY_CHG before
 	returning.
 	LOCKING:
 	EH context.
 	RETURNS:
 	0 on success, -errno otherwise.
 disable all LPM transitions 
 initiate transition to active state 
 allow LPM to PARTIAL 
 no restrictions on LPM transitions 
 empty port, power off 
 give the link time to transit out of LPM state 
 clear PHYRDY_CHG from SError 
	 Don't configure downstream link faster than upstream link.
	  It doesn't speed up anything and some PMPs choke on such
	  configuration.
 	sata_set_spd_needed - is SATA spd configuration needed
 	@link: Link in question
 	Test whether the spd limit in SControl matches
 	@link->sata_spd_limit.  This function is used to determine
 	whether hardreset is necessary to apply SATA spd
 	configuration.
 	LOCKING:
 	Inherited from caller.
 	RETURNS:
 	1 if SATA spd configuration is needed, 0 otherwise.
 	sata_set_spd - set SATA spd according to spd limit
 	@link: Link to set SATA spd for
 	Set SATA spd of @link according to sata_spd_limit.
 	LOCKING:
 	Inherited from caller.
 	RETURNS:
 	0 if spd doesn't need to be changed, 1 if spd has been
 	changed.  Negative errno if SCR registers are inaccessible.
 	sata_link_hardreset - reset link via SATA phy reset
 	@link: link to reset
 	@timing: timing parameters { interval, duration, timeout } in msec
 	@deadline: deadline jiffies for the operation
 	@online: optional out parameter indicating link onlineness
 	@check_ready: optional callback to check link readiness
 	SATA phy-reset @link using DET bits of SControl register.
 	After hardreset, link readiness is waited upon using
 	ata_wait_ready() if @check_ready is specified.  LLDs are
 	allowed to not specify @check_ready and wait itself after this
 	function returns.  Device classification is LLD's
 	responsibility.
 	@online is set to one iff reset succeeded and @link is online
 	after reset.
 	LOCKING:
 	Kernel thread context (may sleep)
 	RETURNS:
 	0 on success, -errno otherwise.
		 SATA spec says nothing about how to reconfigure
		  spd.  To be on the safe side, turn off phy during
		  reconfiguration.  This works for at least ICH7 AHCI
		  and Sil3124.
 issue phy wakereset 
	 Couldn't find anything in SATA III specs, but AHCI-1.1
	  10.4.2 says at least 1 ms.
 bring link back 
 if link is offline nothing more to do 
 Link is online.  From this point, -ENODEV too is an error. 
		 If PMP is supported, we have to do follow-up SRST.
		  Some PMPs don't send D2H Reg FIS after hardreset if
		  the first port is empty.  Wait only for
		  ATA_TMOUT_PMP_SRST_WAIT.
 online is set iff link is online && reset succeeded 
 	ata_qc_complete_multiple - Complete multiple qcs successfully
 	@ap: port in question
 	@qc_active: new qc_active mask
 	Complete in-flight commands.  This functions is meant to be
 	called from low-level driver's interrupt routine to complete
 	requests normally.  ap->qc_active and @qc_active is compared
 	and commands are completed accordingly.
 	Always use this function when completing multiple NCQ commands
 	from IRQ handlers instead of calling ata_qc_complete()
 	multiple times to keep IRQ expect status properly in sync.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	Number of completed commands on success, -errno otherwise.
	
	  If the internal tag is set on ap->qc_active, then we care about
	  bit0 on the passed in qc_active mask. Move that bit up to match
	  the internal tag.
 	ata_slave_link_init - initialize slave link
 	@ap: port to initialize slave link for
 	Create and initialize slave link for @ap.  This enables slave
 	link handling on the port.
 	In libata, a port contains links and a link contains devices.
 	There is single host link but if a PMP is attached to it,
 	there can be multiple fan-out links.  On SATA, there's usually
 	a single device connected to a link but PATA and SATA
 	controllers emulating TF based interface can have two - master
 	and slave.
 	However, there are a few controllers which don't fit into this
 	abstraction too well - SATA controllers which emulate TF
 	interface with both master and slave devices but also have
 	separate SCR register sets for each device.  These controllers
 	need separate links for physical link handling
 	(e.g. onlineness, link speed) but should be treated like a
 	traditional MS controller for everything else (e.g. command
 	issue, softreset).
 	slave_link is libata's way of handling this class of
 	controllers without impacting core layer too much.  For
 	anything other than physical link handling, the default host
 	link is used for both master and slave.  For physical link
 	handling, separate @ap->slave_link is used.  All dirty details
 	are implemented inside libata core layer.  From LLD's POV, the
 	only difference is that prereset, hardreset and postreset are
 	called once more for the slave link, so the reset sequence
 	looks like the following.
 	prereset(M) -> prereset(S) -> hardreset(M) -> hardreset(S) ->
 	softreset(M) -> postreset(M) -> postreset(S)
 	Note that softreset is called only for the master.  Softreset
 	resets both MS by definition, so SRST on master should handle
 	both (the standard method will work just fine).
 	LOCKING:
 	Should be called before host is registered.
 	RETURNS:
 	0 on success, -errno on failure.
 	sata_lpm_ignore_phy_events - test if PHY event should be ignored
 	@link: Link receiving the event
 	Test whether the received PHY event has to be ignored or not.
 	LOCKING:
 	None:
 	RETURNS:
 	True if the event has to be ignored.
 if LPM is enabled, PHYRDY doesn't mean anything 
	 ignore the first PHY event after the LPM policy changed
	  as it is might be spurious
 UNKNOWN is internal state, iterate from MAX_POWER 
 	__ata_change_queue_depth - helper for ata_scsi_change_queue_depth
 	@ap: ATA port to which the device change the queue depth
 	@sdev: SCSI device to configure queue depth for
 	@queue_depth: new queue depth
 	libsas and libata have different approaches for associating a sdev to
 	its ata_port.
 NCQ enabled? 
 limit and apply queue depth 
 	ata_scsi_change_queue_depth - SCSI callback for queue depth config
 	@sdev: SCSI device to configure queue depth for
 	@queue_depth: new queue depth
 	This is libata standard hostt->change_queue_depth callback.
 	SCSI will call into this callback when user tries to set queue
 	depth via sysfs.
 	LOCKING:
 	SCSI layer (we don't care)
 	RETURNS:
 	Newly configured queue depth.
 	ata_sas_port_alloc - Allocate port for a SAS attached SATA device
 	@host: ATA host container for all SAS ports
 	@port_info: Information from low-level host driver
 	@shost: SCSI host that the scsi device is attached to
 	LOCKING:
 	PCIetc. bus probe sem.
 	RETURNS:
 	ata_port pointer on success  NULL on failure.
 	ata_sas_port_start - Set port up for dma.
 	@ap: Port to initialize
 	Called just after data structures for each port are
 	initialized.
 	May be used as the port_start() entry in ata_port_operations.
 	LOCKING:
 	Inherited from caller.
	
	  the port is marked as frozen at allocation time, but if we don't
	  have new eh, we won't thaw it
 	ata_sas_port_stop - Undo ata_sas_port_start()
 	@ap: Port to shut down
 	May be used as the port_stop() entry in ata_port_operations.
 	LOCKING:
 	Inherited from caller.
  ata_sas_async_probe - simply schedule probing and return
  @ap: Port to probe
  For batch scheduling of probe for sas attached ata devices, assumes
  the port has already been through ata_sas_port_init()
 	ata_sas_port_init - Initialize a SATA device
 	@ap: SATA port to initialize
 	LOCKING:
 	PCIetc. bus probe sem.
 	RETURNS:
 	Zero on success, non-zero on error.
 	ata_sas_port_destroy - Destroy a SATA port allocated by ata_sas_port_alloc
 	@ap: SATA port to destroy
 	ata_sas_slave_configure - Default slave_config routine for libata devices
 	@sdev: SCSI device to configure
 	@ap: ATA port to which SCSI device is attached
 	RETURNS:
 	Zero.
 	ata_sas_queuecmd - Issue SCSI cdb to libata-managed device
 	@cmd: SCSI command to be sent
 	@ap:	ATA port to which the command is being sent
 	RETURNS:
 	Return value from __ata_scsi_queuecmd() if @cmd can be queued,
 	0 otherwise.
 the last tag is reserved for internal command. 
 	sata_async_notification - SATA async notification handler
 	@ap: ATA port where async notification is received
 	Handler to be called when async notification via SDB FIS is
 	received.  This function schedules EH if necessary.
 	LOCKING:
 	spin_lock_irqsave(host lock)
 	RETURNS:
 	1 if EH is scheduled, 0 otherwise.
 PMP is not attached or SNTF is not available 
			 PMP is not attached.  Check whether ATAPI
			  AN is configured.  If so, notify media
			  change.
			 PMP is attached but SNTF is not available.
			  ATAPI async media change notification is
			  not used.  The PMP must be reporting PHY
			  status change, schedule EH.
 PMP is attached and SNTF is available 
 check and notify ATAPI AN 
		 If PMP is reporting that PHY status of some
		  downstream ports has changed, schedule EH.
 	ata_eh_read_log_10h - Read log page 10h for NCQ error details
 	@dev: Device to read log page 10h from
 	@tag: Resulting tag of the failed command
 	@tf: Resulting taskfile registers of the failed command
 	Read log page 10h to obtain NCQ error details and clear error
 	condition.
 	LOCKING:
 	Kernel thread context (may sleep).
 	RETURNS:
 	0 on success, -errno otherwise.
 	ata_eh_analyze_ncq_error - analyze NCQ error
 	@link: ATA link to analyze NCQ error for
 	Read log page 10h, determine the offending qc and acquire
 	error status TF.  For NCQ device errors, all LLDDs have to do
 	is setting AC_ERR_DEV in ehi->err_mask.  This function takes
 	care of the rest.
 	LOCKING:
 	Kernel thread context (may sleep).
 if frozen, we can't do much 
 is it NCQ device error? 
 has LLDD analyzed already? 
 okay, this error is ours 
 we've got the perpetrator, condemn it 
 SPDX-License-Identifier: GPL-2.0-or-later
  driversatasata_fsl.c
  Freescale 3.0Gbps SATA device driver
  Author: Ashish Kalra <ashish.kalra@freescale.com>
  Li Yang <leoli@freescale.com>
  Copyright (c) 2006-2007, 2011-2012 Freescale Semiconductor, Inc.
 Controller information 
 Direct PRDT entries 
 4 DWORDS 
	
	  SATA-FSL host controller supports a max. of (15+1) direct PRDEs, and
	  chained indirect PRDEs up to a max count of 63.
	  We are allocating an array of 63 PRDEs contiguously, but PRDE#15 will
	  be setup as an indirect descriptor, pointing to it's next
	  (contiguous) PRDE. Though chained indirect PRDE arrays are
	  supported,it will be more efficient to use a direct PRDT and
	  a single chainlink to indirect PRDE arrayPRDT.
	
	  MPC8315 has two SATA controllers, SATA1 & SATA2
	  (one port per controller)
	  MPC837x has 24 controllers, one port per controller
 Host Controller command register set - per port
	
	  Host Status Register (HStatus) bitdefs
	
	  Host Control Register (HControl) bitdefs
  SATA Superset Registers
  Control Status Register Set
 TRANSCFG (transport-layer) configuration control 
 PHY (link-layer) configuration control 
  Command Header Table entry, i.e, command slot
  4 Dwords per command slot, command header size ==  64 Dwords.
  Description information bitdefs
  Command Descriptor
  Physical region table descriptor(PRD)
  ata_port private data
  This is our per-port instance data.
  ata_port->host_set private data
 We let libATA core do actual (queue) tag allocation 
 NOTE: both data_xfer_len & fis_len are Dword counts 
	
	  NOTE : direct & indirect prdt's are contiguously allocated
 warn if each sg element is not dword aligned 
 set indirect extension flag along with indirect ext. size 
 setup "ACMD - atapi command" in cmd. desc. if this is ATAPI cmd 
 Simply queue command to the controllerdevice 
 disable interrupts on the controllerport 
 ack. any pending IRQs for this controllerport 
 enable interrupts on the controllerport 
 enable interrupts on the controllerport 
 Now, update the CHBA register in host controller cmd register set 
	
	  Now, we can bring the controller on-line & also initiate
	  the COMINIT sequence, we simply return here and the boot-probing
	  & device discovery process is re-initiated by libATA using a
	  Softreset EH (dummy) session. Hence, boot probing and device
	  discovey will be part of sata_fsl_softreset() callback.
	
	  Force host controller to go off-line, aborting current operations
 Poll for controller to go offline - should happen immediately 
	
	  Force host controller to go off-line, aborting current operations
 Poll for controller to go offline 
		
		  Try to offline controller atleast twice
	
	  PHY reset should remain asserted for atleast 1ms
	
	  Now, bring the host controller online again, this can take time
	  as PHY reset and communication establishment, 1st D2H FIS and
	  device signature update is done, on safe side assume 500ms
	  NOTE : Host online status may be indicated immediately!!
	
	  First, wait for the PHYRDY change to occur before waiting for
	  the signature, and also verify if SStatus indicates device
	  presence
	
	  Wait for the first D2H from device,i.e,signature update notification
	
	  request libATA to perform follow-up softreset
	
	  Send a device reset (SRST) explicitly on command slot #0
	  Check : will the command queue (reg) be cleared during offlining ??
	  Also we will be online only if Phy commn. has been established
	  and device presence has been detected, therefore if we have
	  reached here, we can send a command to the target device
 device resetSRST is a control register update FIS, uses tag0 
 setup SRST bit in taskfile control reg 
	
	  Queue SRST command to the controllerdevice, ensure that no
	  other commands are active on the controllerdevice
	
	  SATA device enters reset state after receiving a Control register
	  FIS with SRST bit asserted and it awaits another H2D Control reg.
	  FIS with SRST bit cleared, then the device does internal diags &
	  initialization, followed by indicating it's initialization status
	  using ATA signature D2H register FIS to the host controller.
 2nd H2D Ctl. register FIS 
 ?? 
	
	  The above command would have signalled an interrupt on command
	  complete, which needs special handling, by clearing the Nth
	  command bit of the CCreg
 We know it will be cmd#0 always 
 Verify if SStatus indicates device presence 
		
		  if we are here, device presence has been detected,
		  1st D2H FIS would have been received, but sfis in
		  command desc. is not updated, but signature register
		  would have been updated
 make DMA engine forget about the failed command 
 first, analyze and record host port events 
	
	  Handle & Clear SError
 handle fatal errors 
 Handle SDB FIS receive & notify update 
 Handle PHYRDY change notification 
 Setup a soft-reset EH action 
 handle single device errors 
		
		  clear the command error, also clears queue to the device
		  in error, and we can (re)issue commands to this device.
		  When a device is in error all commands queued into the
		  host controller and at the device are considered aborted
		  and the queue for that device is stopped. Now, after
		  clearing the device error, we can issue commands to the
		  device to interrogate it to find the source of the error.
 find out the offending link and qc 
				
				  We should consider this as non fatal error,
                                  and TF must be updated as done below.
			
			  We should consider this as non fatal error,
                          and TF must be updated as done below.
 record error info 
 freeze or abort 
 Read command completed register 
 Workaround for data length mismatch errata 
 Set HControl[27] to clear error registers 
 Clear HControl[27] 
 Clear SError[E] bit 
 Ignore fatal error and device error 
 clear CC bit, this will also complete the interrupt 
 Spurious Interrupt!! 
 ack. any pending IRQs for this controllerport 
 Assuming one port per host controller 
  Multiple ports are represented by multiple SATA controllers with
  one port per controller
	
	  NOTE : We cannot bring the controller online before setting
	  the CHBA, hence main controller initialization is done as
	  part of the port_start() callback
 sata controller to operate in enterprise mode 
 ack. any pending IRQs for this controllerport 
 Keep interrupts disabled on the controller 
 Disable interrupt coalescing control(icc), for the moment 
 clear error registers, SError is cleared by libATA  
 	
	  reset the number of command complete bits which will cause the
	  interrupt to be signaled
	
	  host controller will be brought on-line, during xx_port_start()
	  callback, that should also initiate the OOB, COMINIT sequence
  scsi mid-layer and libata interface structures
 allocate host structure 
 host->iomap is not used currently 
 initialize host controller 
	
	  Now, register with libATA core, this will also initiate the
	  device discovery process, invoking our port_start() handler &
	  error_handler() to execute a dummy Softreset EH session
 Recovery the CHBA register in host controller cmd register set 
 SPDX-License-Identifier: GPL-2.0-only
   Copyright 2008 ioogle, Inc.  All rights reserved.
  Libata transport class.
  The ATA transport class contains common code to deal with ATA HBAs,
  an approximated representation of ATA topologies in the driver model,
  and various sysfs attributes to expose these topologies and management
  interfaces to user-space.
  There are 3 objects defined in in this class:
  - ata_port
  - ata_link
  - ata_device
  Each port has a link object. Each link can have up to two devices for PATA
  and generally one for SATA.
  If there is SATA port multiplier [PMP], 15 additional ata_link object are
  created.
  These objects are created when the ata host is initialized and when a PMP is
  found. They are removed only when the HBA is removed, cleaned before the
  error handler runs.
	
	  The array of null terminated pointers to attributes
	  needed by scsi_sysfs.c
 Device objects are always created whit link objects 
  Hack to allow attributes of the same name in different objects.
  ATA Port attributes
  ata_is_port --  check if a struct device represents a ATA port
  @dev:	device to check
  Returns:
 	%1 if the device represents a ATA Port, %0 else
  ata_tport_delete  --  remove ATA PORT
  @ap:	ATA PORT to remove
  Removes the specified ATA PORT.  Remove the associated link as well.
 ata_tport_add - initialize a transport ATA port structure
  @parent:	parent device
  @ap:		existing ata_port structure
  Initialize a ATA port structure for sysfs.  It will be added to the device
  tree below the device specified by @parent which could be a PCI device.
  Returns %0 on success
  ATA link attributes
  ata_is_link --  check if a struct device represents a ATA link
  @dev:	device to check
  Returns:
 	%1 if the device represents a ATA link, %0 else
  ata_tlink_delete  --  remove ATA LINK
  @link:	ATA LINK to remove
  Removes the specified ATA LINK.  remove associated ATA device(s) as well.
  ata_tlink_add  --  initialize a transport ATA link structure
  @link:	allocated ata_link structure.
  Initialize an ATA LINK structure for sysfs.  It will be added in the
  device tree below the ATA PORT it belongs to.
  Returns %0 on success
  ATA device attributes
  ata_is_ata_dev  --  check if a struct device represents a ATA device
  @dev:	device to check
  Returns:
 	%1 if the device represents a ATA device, %0 else
  ata_tdev_free  --  free a ATA LINK
  @dev:	ATA PHY to free
  Frees the specified ATA PHY.
  Note:
    This function must only be called on a PHY that has not
    successfully been added using ata_tdev_add().
  ata_tdev_delete  --  remove ATA device
  @ata_dev:	ATA device to remove
  Removes the specified ATA device.
  ata_tdev_add  --  initialize a transport ATA device structure.
  @ata_dev:	ata_dev structure.
  Initialize an ATA device structure for sysfs.  It will be added in the
  device tree below the ATA LINK device it belongs to.
  Returns %0 on success
  Setup  Teardown code
  ata_attach_transport  --  instantiate ATA transport template
  ata_release_transport  --  release ATA transport template instance
  @t:		transport template instance
 SPDX-License-Identifier: GPL-2.0-or-later
  pata_atp867x.c - ARTOP 867X 64bit 4-channel UDMA133 ATA controller driver
 	(C) 2009 Google Inc. John(Jung-Ik) Lee <jilee@google.com>
  Per Atp867 data sheet rev 1.2, Acard.
  Based in part on early ide code from
 	2003-2004 by Eric Uhrhane, Google, Inc.
  TODO:
    1. RAID features [comparison, XOR, striping, mirroring, etc.]
  IO Registers
  Note that all runtime hot priv ports are cached in ap private_data
	
	  IO Register Bitfields
  hot priv ports
	
	  Doc 6.6.9: decrease the udma mode value by 1 for safer UDMA speed
	  on 66MHz bus
	    rev-A: UDMA_1~4 (5, 6 no change)
	    rev-B: all UDMA modes
	    UDMA_0 stays not to disable UDMA
	
	  Doc 6.6.9: increase the clock value by 1 for safer PIO speed
	  on 66MHz bus
 12 clk 
 default 8 clk 
 by the spec 
 default 12 clk 
 Check the PCI resources for this channel are enabled 
	
	  Broken BIOS might not set latency high enough
	
	  init 8bit io ports speed(0aaarrrr) to 43h and
	  init udma modes of masterslave to 00(11h)
	
	  init PreREAD counts
 Enable INTA#: bit4=0 means enable 
 Enable PCI burst, MRM & not immediate interrupts 
	
	  Turn off the over clocked udma5 mode, only for Rev-B
	
	  do not map rombase
	
	  request, iomap BARs and init port addresses accordingly
 SPDX-License-Identifier: GPL-2.0+
  comedi_pci.c
  Comedi PCI driver specific functions.
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>
  comedi_to_pci_dev() - Return PCI device attached to COMEDI device
  @dev: COMEDI device.
  Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a
  a &struct device embedded in a &struct pci_dev.
  Return: Attached PCI device if @dev->hw_dev is non-%NULL.
  Return %NULL if @dev->hw_dev is %NULL.
  comedi_pci_enable() - Enable the PCI device and request the regions
  @dev: COMEDI device.
  Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a
  a &struct device embedded in a &struct pci_dev.  Enable the PCI device
  and request its regions.  Set @dev->ioenabled to %true if successful,
  otherwise undo what was done.
  Calls to comedi_pci_enable() and comedi_pci_disable() cannot be nested.
  Return:
 	0 on success,
 	-%ENODEV if @dev->hw_dev is %NULL,
 	-%EBUSY if regions busy,
 	or some negative error number if failed to enable PCI device.
  comedi_pci_disable() - Release the regions and disable the PCI device
  @dev: COMEDI device.
  Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a
  a &struct device embedded in a &struct pci_dev.  If the earlier call
  to comedi_pci_enable() was successful, release the PCI device's regions
  and disable it.  Reset @dev->ioenabled back to %false.
  comedi_pci_detach() - A generic "detach" handler for PCI COMEDI drivers
  @dev: COMEDI device.
  COMEDI drivers for PCI devices that need no special clean-up of private data
  and have no ioremapped regions other than that pointed to by @dev->mmio may
  use this function as its "detach" handler called by the COMEDI core when a
  COMEDI device is being detached from the low-level driver.  It may be also
  called from a more specific "detach" handler that does additional clean-up.
  Free the IRQ if @dev->irq is non-zero, iounmap @dev->mmio if it is
  non-%NULL, and call comedi_pci_disable() to release the PCI device's regions
  and disable it.
  comedi_pci_auto_config() - Configureprobe a PCI COMEDI device
  @pcidev: PCI device.
  @driver: Registered COMEDI driver.
  @context: Driver specific data, passed to comedi_auto_config().
  Typically called from the pci_driver (probe) function.  Auto-configure
  a COMEDI device, using the &struct device embedded in @pcidev as the
  hardware device.  The @context value gets passed through to @driver's
  "auto_attach" handler.  The "auto_attach" handler may call
  comedi_to_pci_dev() on the passed in COMEDI device to recover @pcidev.
  Return: The result of calling comedi_auto_config() (0 on success, or
  a negative error number on failure).
  comedi_pci_auto_unconfig() - Unconfigureremove a PCI COMEDI device
  @pcidev: PCI device.
  Typically called from the pci_driver (remove) function.  Auto-unconfigure
  a COMEDI device attached to this PCI device, using a pointer to the
  &struct device embedded in @pcidev as the hardware device.  The COMEDI
  driver's "detach" handler will be called during unconfiguration of the
  COMEDI device.
  Note that the COMEDI device may have already been unconfigured using the
  %COMEDI_DEVCONFIG ioctl, in which case this attempt to unconfigure it
  again should be ignored.
  comedi_pci_driver_register() - Register a PCI COMEDI driver
  @comedi_driver: COMEDI driver to be registered.
  @pci_driver: PCI driver to be registered.
  This function is called from the module_init() of PCI COMEDI driver modules
  to register the COMEDI driver and the PCI driver.  Do not call it directly,
  use the module_comedi_pci_driver() helper macro instead.
  Return: 0 on success, or a negative error number on failure.
  comedi_pci_driver_unregister() - Unregister a PCI COMEDI driver
  @comedi_driver: COMEDI driver to be unregistered.
  @pci_driver: PCI driver to be unregistered.
  This function is called from the module_exit() of PCI COMEDI driver modules
  to unregister the PCI driver and the COMEDI driver.  Do not call it
  directly, use the module_comedi_pci_driver() helper macro instead.
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
   moduledrivers.c
   functions for manipulating drivers
   COMEDI - Linux Control and Measurement Device Interface
   Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>
   Copyright (C) 2002 Frank Mori Hess <fmhess@users.sourceforge.net>
 protects access to comedi_drivers 
  comedi_set_hw_dev() - Set hardware device associated with COMEDI device
  @dev: COMEDI device.
  @hw_dev: Hardware device.
  For automatically configured COMEDI devices (resulting from a call to
  comedi_auto_config() or one of its wrappers from the low-level COMEDI
  driver), comedi_set_hw_dev() is called automatically by the COMEDI core
  to associate the COMEDI device with the hardware device.  It can also be
  called directly by "legacy" low-level COMEDI drivers that rely on the
  %COMEDI_DEVCONFIG ioctl to configure the hardware as long as the hardware
  has a &struct device.
  If @dev->hw_dev is NULL, it gets a reference to @hw_dev and sets
  @dev->hw_dev, otherwise, it does nothing.  Calling it multiple times
  with the same hardware device is not considered an error.  If it gets
  a reference to the hardware device, it will be automatically 'put' when
  the device is detached from COMEDI.
  Returns 0 if @dev->hw_dev was NULL or the same as @hw_dev, otherwise
  returns -EEXIST.
  comedi_alloc_devpriv() - Allocate memory for the device private data
  @dev: COMEDI device.
  @size: Size of the memory to allocate.
  The allocated memory is zero-filled.  @dev->private points to it on
  return.  The memory will be automatically freed when the COMEDI device is
  "detached".
  Returns a pointer to the allocated memory, or NULL on failure.
  comedi_alloc_subdevices() - Allocate subdevices for COMEDI device
  @dev: COMEDI device.
  @num_subdevices: Number of subdevices to allocate.
  Allocates and initializes an array of &struct comedi_subdevice for the
  COMEDI device.  If successful, sets @dev->subdevices to point to the
  first one and @dev->n_subdevices to the number.
  Returns 0 on success, -EINVAL if @num_subdevices is < 1, or -ENOMEM if
  failed to allocate the memory.
  comedi_alloc_subdev_readback() - Allocate memory for the subdevice readback
  @s: COMEDI subdevice.
  This is called by low-level COMEDI drivers to allocate an array to record
  the last values written to a subdevice's analog output channels (at least
  by the %INSN_WRITE instruction), to allow them to be read back by an
  %INSN_READ instruction.  It also provides a default handler for the
  %INSN_READ instruction unless one has already been set.
  On success, @s->readback points to the first element of the array, which
  is zero-filled.  The low-level driver is responsible for updating its
  contents.  @s->insn_read will be set to comedi_readback_insn_read()
  unless it is already non-NULL.
  Returns 0 on success, -EINVAL if the subdevice has no channels, or
  -ENOMEM on allocation failure.
  comedi_readback_insn_read() - A generic (insn_read) for subdevice readback.
  @dev: COMEDI device.
  @s: COMEDI subdevice.
  @insn: COMEDI instruction.
  @data: Pointer to return the readback data.
  Handles the %INSN_READ instruction for subdevices that use the readback
  array allocated by comedi_alloc_subdev_readback().  It may be used
  directly as the subdevice's handler (@s->insn_read) or called via a
  wrapper.
  @insn->n is normally 1, which will read a single value.  If higher, the
  same element of the readback array will be read multiple times.
  Returns @insn->n on success, or -EINVAL if @s->readback is NULL.
  comedi_timeout() - Busy-wait for a driver condition to occur
  @dev: COMEDI device.
  @s: COMEDI subdevice.
  @insn: COMEDI instruction.
  @cb: Callback to check for the condition.
  @context: Private context from the driver.
  Busy-waits for up to a second (%COMEDI_TIMEOUT_MS) for the condition or
  some error (other than -EBUSY) to occur.  The parameters @dev, @s, @insn,
  and @context are passed to the callback function, which returns -EBUSY to
  continue waiting or some other value to stop waiting (generally 0 if the
  condition occurred, or some error value).
  Returns -ETIMEDOUT if timed out, otherwise the return value from the
  callback function.
 success (0) or non EBUSY errno 
  comedi_dio_insn_config() - Boilerplate (insn_config) for DIO subdevices
  @dev: COMEDI device.
  @s: COMEDI subdevice.
  @insn: COMEDI instruction.
  @data: Instruction parameters and return data.
  @mask: io_bits mask for grouped channels, or 0 for single channel.
  If @mask is 0, it is replaced with a single-bit mask corresponding to the
  channel number specified by @insn->chanspec.  Otherwise, @mask
  corresponds to a group of channels (which should include the specified
  channel) that are always configured together as inputs or outputs.
  Partially handles the %INSN_CONFIG_DIO_INPUT, %INSN_CONFIG_DIO_OUTPUTS,
  and %INSN_CONFIG_DIO_QUERY instructions.  The first two update
  @s->io_bits to record the directions of the masked channels.  The last
  one sets @data[1] to the current direction of the group of channels
  (%COMEDI_INPUT) or %COMEDI_OUTPUT) as recorded in @s->io_bits.
  The caller is responsible for updating the DIO direction in the hardware
  registers if this function returns 0.
  Returns 0 for a %INSN_CONFIG_DIO_INPUT or %INSN_CONFIG_DIO_OUTPUT
  instruction, @insn->n (> 0) for a %INSN_CONFIG_DIO_QUERY instruction, or
  -EINVAL for some other instruction.
  comedi_dio_update_state() - Update the internal state of DIO subdevices
  @s: COMEDI subdevice.
  @data: The channel mask and bits to update.
  Updates @s->state which holds the internal state of the outputs for DIO
  or DO subdevices (up to 32 channels).  @data[0] contains a bit-mask of
  the channels to be updated.  @data[1] contains a bit-mask of those
  channels to be set to '1'.  The caller is responsible for updating the
  outputs in hardware according to @s->state.  As a minimum, the channels
  in the returned bit-mask need to be updated.
  Returns @mask with non-existent channels removed.
  comedi_bytes_per_scan_cmd() - Get length of asynchronous command "scan" in
  bytes
  @s: COMEDI subdevice.
  @cmd: COMEDI command.
  Determines the overall scan length according to the subdevice type and the
  number of channels in the scan for the specified command.
  For digital input, output or inputoutput subdevices, samples for
  multiple channels are assumed to be packed into one or more unsigned
  short or unsigned int values according to the subdevice's %SDF_LSAMPL
  flag.  For other types of subdevice, samples are assumed to occupy a
  whole unsigned short or unsigned int according to the %SDF_LSAMPL flag.
  Returns the overall scan length in bytes.
  comedi_bytes_per_scan() - Get length of asynchronous command "scan" in bytes
  @s: COMEDI subdevice.
  Determines the overall scan length according to the subdevice type and the
  number of channels in the scan for the current command.
  For digital input, output or inputoutput subdevices, samples for
  multiple channels are assumed to be packed into one or more unsigned
  short or unsigned int values according to the subdevice's %SDF_LSAMPL
  flag.  For other types of subdevice, samples are assumed to occupy a
  whole unsigned short or unsigned int according to the %SDF_LSAMPL flag.
  Returns the overall scan length in bytes.
  comedi_nscans_left() - Return the number of scans left in the command
  @s: COMEDI subdevice.
  @nscans: The expected number of scans or 0 for all available scans.
  If @nscans is 0, it is set to the number of scans available in the
  async buffer.
  If the async command has a stop_src of %TRIG_COUNT, the @nscans will be
  checked against the number of scans remaining to complete the command.
  The return value will then be either the expected number of scans or the
  number of scans remaining to complete the command, whichever is fewer.
  comedi_nsamples_left() - Return the number of samples left in the command
  @s: COMEDI subdevice.
  @nsamples: The expected number of samples.
  Returns the number of samples remaining to complete the command, or the
  specified expected number of samples (@nsamples), whichever is fewer.
  comedi_inc_scan_progress() - Update scan progress in asynchronous command
  @s: COMEDI subdevice.
  @num_bytes: Amount of data in bytes to increment scan progress.
  Increments the scan progress by the number of bytes specified by @num_bytes.
  If the scan progress reaches or exceeds the scan length in bytes, reduce
  it modulo the scan length in bytes and set the "end of scan" asynchronous
  event flag (%COMEDI_CB_EOS) to be processed later.
 track the 'cur_chan' for non-SDF_PACKED subdevices 
  comedi_handle_events() - Handle events and possibly stop acquisition
  @dev: COMEDI device.
  @s: COMEDI subdevice.
  Handles outstanding asynchronous acquisition event flags associated
  with the subdevice.  Call the subdevice's @s->cancel() handler if the
  "end of acquisition", "error" or "overflow" event flags are set in order
  to stop the acquisition at the driver level.
  Calls comedi_event() to further process the event flags, which may mark
  the asynchronous command as no longer running, possibly terminated with
  an error, and may wake up tasks.
  Return a bit-mask of the handled events.
 mask 
 bits 
 do a little post-config cleanup 
  Generic recognize function for drivers that register their supported
  board names.
  'driv->board_name' points to a 'const char ' member within the
  zeroth element of an array of some private board information
  structure, say 'struct foo_board' containing a member 'const char
  board_name' that is initialized to point to a board name string that
  is one of the candidates matched against this function's 'name'
  parameter.
  'driv->offset' is the size of the private board information
  structure, say 'sizeof(struct foo_board)', and 'driv->num_names' is
  the length of the array of private board information structures.
  If one of the board names in the array of private board information
  structures matches the name supplied to this function, the function
  returns a pointer to the pointer to the board name, otherwise it
  returns NULL.  The return value ends up in the 'board_ptr' member of
  a 'struct comedi_device' that the low-level comedi driver's
  'attach()' hook can convert to a point to a particular element of its
  array of private board information structures by subtracting the
  offset of the member that points to the board name.  (No subtraction
  is required if the board name pointer is the first member of the
  private board information structure, which is generally the case.)
  comedi_load_firmware() - Request and load firmware for a device
  @dev: COMEDI device.
  @device: Hardware device.
  @name: The name of the firmware image.
  @cb: Callback to the upload the firmware image.
  @context: Private context from the driver.
  Sends a firmware request for the hardware device and waits for it.  Calls
  the callback function to upload the firmware to the device, them releases
  the firmware.
  Returns 0 on success, -EINVAL if @cb is NULL, or a negative error number
  from the firmware request or the callback function.
  __comedi_request_region() - Request an IO region for a legacy driver
  @dev: COMEDI device.
  @start: Base address of the IO region.
  @len: Length of the IO region.
  Requests the specified IO port region which must start at a non-zero
  address.
  Returns 0 on success, -EINVAL if @start is 0, or -EIO if the request
  fails.
  comedi_request_region() - Request an IO region for a legacy driver
  @dev: COMEDI device.
  @start: Base address of the IO region.
  @len: Length of the IO region.
  Requests the specified IO port region which must start at a non-zero
  address.
  On success, @dev->iobase is set to the base address of the region and
  @dev->iolen is set to its length.
  Returns 0 on success, -EINVAL if @start is 0, or -EIO if the request
  fails.
  comedi_legacy_detach() - A generic (detach) function for legacy drivers
  @dev: COMEDI device.
  This is a simple, generic 'detach' handler for legacy COMEDI devices that
  just use a single IO port region and possibly an IRQ and that don't need
  any special clean-up for their private device or subdevice storage.  It
  can also be called by a driver-specific 'detach' handler.
  If @dev->irq is non-zero, the IRQ will be freed.  If @dev->iobase and
  @dev->iolen are both non-zero, the IO port region will be released.
  recognize has failed if we get here 
  report valid board names before returning error 
 driver does not support manual configuration 
 On success, the driver module count has been incremented. 
  comedi_auto_config() - Create a COMEDI device for a hardware device
  @hardware_device: Hardware device.
  @driver: COMEDI low-level driver for the hardware device.
  @context: Driver context for the auto_attach handler.
  Allocates a new COMEDI device for the hardware device and calls the
  low-level driver's 'auto_attach' handler to set-up the hardware and
  allocate the COMEDI subdevices.  Additional "post-configuration" setting
  up is performed on successful return from the 'auto_attach' handler.
  If the 'auto_attach' handler fails, the low-level driver's 'detach'
  handler will be called as part of the clean-up.
  This is usually called from a wrapper function in a bus-specific COMEDI
  module, which in turn is usually called from a bus device 'probe'
  function in the low-level driver.
  Returns 0 on success, -EINVAL if the parameters are invalid or the
  post-configuration determines the driver has set the COMEDI device up
  incorrectly, -ENOMEM if failed to allocate memory, -EBUSY if run out of
  COMEDI minor device numbers, or some negative error number returned by
  the driver's 'auto_attach' handler.
 Note: comedi_alloc_board_minor() locked dev->mutex. 
		
		  class_dev should be set properly here
		   after a successful auto config
  comedi_auto_unconfig() - Unconfigure auto-allocated COMEDI device
  @hardware_device: Hardware device previously passed to
                    comedi_auto_config().
  Cleans up and eventually destroys the COMEDI device allocated by
  comedi_auto_config() for the same hardware device.  As part of this
  clean-up, the low-level COMEDI driver's 'detach' handler will be called.
  (The COMEDI device itself will persist in an unattached state if it is
  still open, until it is released, and any mmapped buffers will persist
  until they are munmapped.)
  This is usually called from a wrapper module in a bus-specific COMEDI
  module, which in turn is usually set as the bus device 'remove' function
  in the low-level COMEDI driver.
  comedi_driver_register() - Register a low-level COMEDI driver
  @driver: Low-level COMEDI driver.
  The low-level COMEDI driver is added to the list of registered COMEDI
  drivers.  This is used by the handler for the "proccomedi" file and is
  also used by the handler for the %COMEDI_DEVCONFIG ioctl to configure
  "legacy" COMEDI devices (for those low-level drivers that support it).
  Returns 0.
  comedi_driver_unregister() - Unregister a low-level COMEDI driver
  @driver: Low-level COMEDI driver.
  The low-level COMEDI driver is removed from the list of registered COMEDI
  drivers.  Detaches any COMEDI devices attached to the driver, which will
  result in the low-level driver's 'detach' handler being called for those
  devices before this function returns.
 unlink the driver 
 check for devices using this driver 
 SPDX-License-Identifier: GPL-2.0+
  comedicomedi_fops.c
  comedi kernel module
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1997-2007 David A. Schleef <ds@schleef.org>
  compat ioctls:
  Author: Ian Abbott, MEV Ltd. <abbotti@mev.co.uk>
  Copyright (C) 2007 MEV Ltd. <http:www.mev.co.uk>
  comedi_subdevice "runflags"
  COMEDI_SRF_RT:		DEPRECATED: command is running real-time
  COMEDI_SRF_ERROR:		indicates an COMEDI_CB_ERROR event has occurred
 				since the last command was started
  COMEDI_SRF_RUNNING:		command is running
  COMEDI_SRF_FREE_SPRIV:	free s->private on detach
  COMEDI_SRF_BUSY_MASK:	runflags that indicate the subdevice is "busy"
  struct comedi_file - Per-file private data for COMEDI device
  @dev: COMEDI device.
  @read_subdev: Current "read" subdevice.
  @write_subdev: Current "write" subdevice.
  @last_detach_count: Last known detach count.
  @last_attached: Last known attacheddetached state.
 Note: indexed by minor - COMEDI_NUM_BOARD_MINORS. 
  comedi_dev_put() - Release a use of a COMEDI device
  @dev: COMEDI device.
  Must be called when a user of a COMEDI device is finished with it.
  When the last user of the COMEDI device calls this function, the
  COMEDI device is destroyed.
  Return: 1 if the COMEDI device is destroyed by this call or @dev is
  NULL, otherwise return 0.  Callers must not assume the COMEDI
  device is still valid if this function returns 0.
  comedi_dev_get_from_minor() - Get COMEDI device by minor device number
  @minor: Minor device number.
  Finds the COMEDI device associated with the minor device number, if any,
  and increments its reference count.  The COMEDI device is prevented from
  being freed until a matching call is made to comedi_dev_put().
  Return: A pointer to the COMEDI device if it exists, with its usage
  reference incremented.  Return NULL if no COMEDI device exists with the
  specified minor device number.
 make sure buffer is an integral number of pages (we round up) 
 sysfs attribute files 
  comedi_is_subdevice_running() - Check if async command running on subdevice
  @s: COMEDI subdevice.
  Return: %true if an asynchronous COMEDI command is active on the
  subdevice, else %false.
  comedi_set_spriv_auto_free() - Mark subdevice private data as freeable
  @s: COMEDI subdevice.
  Mark the subdevice as having a pointer to private data that can be
  automatically freed when the COMEDI device is detached from the low-level
  driver.
  comedi_alloc_spriv - Allocate memory for the subdevice private data
  @s: COMEDI subdevice.
  @size: Size of the memory to allocate.
  Allocate memory for the subdevice private data and point @s->private
  to it.  The memory will be freed automatically when the COMEDI device
  is detached from the low-level driver.
  Return: A pointer to the allocated memory @s->private on success.
  Return NULL on failure.
  This function restores a subdevice to an idle state.
  COMEDI_DEVCONFIG ioctl
  attaches (and configures) or detaches a legacy device
  arg:
 	pointer to comedi_devconfig structure (NULL if detaching)
  reads:
 	comedi_devconfig structure (if attaching)
  writes:
 	nothing
 don't re-use dynamically allocated comedi devices 
 This increments the driver module count on success. 
  COMEDI_BUFCONFIG ioctl
  buffer configuration
  arg:
 	pointer to comedi_bufconfig structure
  reads:
 	comedi_bufconfig structure
  writes:
 	modified comedi_bufconfig structure
  COMEDI_DEVINFO ioctl
  device info
  arg:
 	pointer to comedi_devinfo structure
  reads:
 	nothing
  writes:
 	comedi_devinfo structure
 fill devinfo structure 
  COMEDI_SUBDINFO ioctl
  subdevices info
  arg:
 	pointer to array of comedi_subdinfo structures
  reads:
 	nothing
  writes:
 	array of comedi_subdinfo structures
 fill subdinfo structs 
 backwards compatibility 
 XXX 
  COMEDI_CHANINFO ioctl
  subdevice channel info
  arg:
 	pointer to comedi_chaninfo structure
  reads:
 	comedi_chaninfo structure
  writes:
 	array of maxdata values to chaninfo->maxdata_list if requested
 	array of range table lengths to chaninfo->range_table_list if requested
 flaglist not supported 
  COMEDI_BUFINFO ioctl
  buffer information
  arg:
 	pointer to comedi_bufinfo structure
  reads:
 	comedi_bufinfo structure
  writes:
 	modified comedi_bufinfo structure
 command was set up in "read" direction 
		
		  If nothing left to read, and command has stopped, and
		  {"read" position not updated or command stopped normally},
		  then become non-busy.
 command was set up in "write" direction 
		
		  by default we allow the insn since we don't have checks for
		  all possible cases yet
		
		  Big enough for config_id and the length of the userland
		  memory buffer.  Additional length should be in factors of 2
		  to communicate any returned route pairs (source,destination).
  get_valid_routes() - Calls low-level driver get_valid_routes function to
 			either return a count of valid routes to user, or copy
 			of list of all valid device routes to buffer in
 			userspace.
  @dev: comedi device pointer
  @data: data from user insn call.  The length of the data must be >= 2.
 	  data[0] must contain the INSN_DEVICE_CONFIG config_id.
 	  data[1](input) contains the number of _pairs_ for which memory is
 		  allotted from the user.  If the user specifies '0', then only
 		  the number of pairs available is returned.
 	  data[1](output) returns either the number of pairs available (if none
 		  where requested) or the number of _pairs_ that are copied back
 		  to the user.
 	  data[2::2] returns each (source, destination) pair.
  Return: -EINVAL if low-level driver does not allocate and return routes as
 	   expected.  Returns 0 otherwise.
 a non-subdevice instruction 
 unsigned data safe until 2106 
				
				  data[1] should be the number of _pairs_ that
				  the memory can hold.
 other global device config instructions. 
 a subdevice instruction 
 are we locked? (ioctl lock) 
 This looks arbitrary.  It is. 
				
				  Most drivers ignore the base channel in
				  insn->chanspec.  Fix this here if
				  the subdevice has <= 32 channels.
  COMEDI_INSNLIST ioctl
  synchronous instruction list
  arg:
 	pointer to comedi_insnlist structure
  reads:
 	comedi_insnlist structure
 	array of comedi_insn structures from insnlist->insns pointer
 	data (for writes) from insns[].data pointers
  writes:
 	data (for reads) to insns[].data pointers
 arbitrary limits 
 Determine maximum memory needed for all instructions. 
 Allocate scratch space for all instruction data. 
  COMEDI_INSN ioctl
  synchronous instruction
  arg:
 	pointer to comedi_insn structure
  reads:
 	comedi_insn structure
 	data (for writes) from insn->data pointer
  writes:
 	data (for reads) to insn->data pointer
 This is where the behavior of insn and insnlist deviate. 
 make sure channelgain list isn't too long 
	
	  Set the CMDF_WRITE flag to the correct state if the subdevice
	  supports only "read" commands or only "write" commands.
 make sure each element in channelgain list is valid 
  COMEDI_CMD ioctl
  asynchronous acquisition command set-up
  arg:
 	pointer to comedi_cmd structure
  reads:
 	comedi_cmd structure
 	channelrange list from cmd->chanlist pointer
  writes:
 	possibly modified comedi_cmd structure (when -EAGAIN returned)
 do some simple cmd validation 
 save user's chanlist pointer so it can be restored later 
 are we locked? (ioctl lock) 
 are we busy? 
 make sure channelgain list isn't too short 
 load channelgain list 
 restore chanlist pointer before copying back 
	
	  Set s->busy _after_ setting COMEDI_SRF_RUNNING flag to avoid
	  race with comedi_read() or comedi_write().
  COMEDI_CMDTEST ioctl
  asynchronous acquisition command testing
  arg:
 	pointer to comedi_cmd structure
  reads:
 	comedi_cmd structure
 	channelrange list from cmd->chanlist pointer
  writes:
 	possibly modified comedi_cmd structure
 do some simple cmd validation 
 save user's chanlist pointer so it can be restored later 
 user_chanlist can be NULL for COMEDI_CMDTEST ioctl 
 load channelgain list 
 free kernel copy of user chanlist 
 restore chanlist pointer before copying back 
  COMEDI_LOCK ioctl
  lock subdevice
  arg:
 	subdevice number
  reads:
 	nothing
  writes:
 	nothing
  COMEDI_UNLOCK ioctl
  unlock subdevice
  arg:
 	subdevice number
  reads:
 	nothing
  writes:
 	nothing
  COMEDI_CANCEL ioctl
  cancel asynchronous acquisition
  arg:
 	subdevice number
  reads:
 	nothing
  writes:
 	nothing
  COMEDI_POLL ioctl
  instructs driver to synchronize buffers
  arg:
 	subdevice number
  reads:
 	nothing
  writes:
 	nothing
  COMEDI_SETRSUBD ioctl
  sets the current "read" subdevice on a per-file basis
  arg:
 	subdevice number
  reads:
 	nothing
  writes:
 	nothing
 no change 
	
	  Check the file isn't still busy handling a "read" command on the
	  old subdevice (if any).
  COMEDI_SETWSUBD ioctl
  sets the current "write" subdevice on a per-file basis
  arg:
 	subdevice number
  reads:
 	nothing
  writes:
 	nothing
 no change 
	
	  Check the file isn't still busy handling a "write" command on the
	  old subdevice (if any).
	
	  Device config is special, because it must work on
	  an unconfigured device.
 Device config not appropriate on non-board minors. 
				
				  Successfully unconfigured a dynamically
				  allocated device.  Try and remove it.
	
	  'trylock' avoids circular dependency with current->mm->mmap_lock
	  and down-reading &dev->attach_lock should normally succeed without
	  contention unless the device is in the process of being attached
	  or detached.
 get reference to current buf map (if any) 
		
		  DMA buffer was allocated as a single block.
		  Address is in page_list[0].
 put reference to buf map - okay if NULL 
 Protect against device detachment during operation. 
 Allocate all free buffer space. 
		
		  To avoid deadlock, cannot acquire dev->mutex
		  while dev->attach_lock is held.
		
		  Check device hasn't become detached behind our back.
		  Checking dev->detach_count is unchanged ought to be
		  sufficient (unless there have been 232 detaches in the
		  meantime!), but check the subdevice pointer as well just in
		  case.
		 
		  Also check the subdevice is still in a suitable state to
		  become non-busy in case it changed behind our back.
 Protect against device detachment during operation. 
		
		  To avoid deadlock, cannot acquire dev->mutex
		  while dev->attach_lock is held.
		
		  Check device hasn't become detached behind our back.
		  Checking dev->detach_count is unchanged ought to be
		  sufficient (unless there have been 232 detaches in the
		  meantime!), but check the subdevice pointer as well just in
		  case.
		 
		  Also check the subdevice is still in a suitable state to
		  become non-busy in case it changed behind our back.
  N.B. COMEDI32_CMD and COMEDI_CMD ought to use _IOWR, not _IOR.
  It's too late to change it now, but it only affects the command number.
  N.B. COMEDI32_CMDTEST and COMEDI_CMDTEST ought to use _IOWR, not _IOR.
  It's too late to change it now, but it only affects the command number.
 32-bit 'unsigned int ' 
 32-bit 'unsigned int ' 
 32-bit 'unsigned int ' 
 32-bit 'void ' 
 32-bit 'unsigned int ' 
 32-bit 'short ' 
 32-bit 'unsigned int ' 
 32-bit 'struct comedi_insn ' 
 Handle 32-bit COMEDI_CHANINFO ioctl. 
 Handle 32-bit COMEDI_RANGEINFO ioctl. 
 Copy 32-bit cmd structure to native cmd structure. 
 Copy native cmd structure to 32-bit cmd structure. 
 Assume chanlist pointer is unchanged. 
 Handle 32-bit COMEDI_CMD ioctl. 
 Special case: copy cmd back to user. 
 Handle 32-bit COMEDI_CMDTEST ioctl. 
 Copy 32-bit insn structure to native insn structure. 
 Copy insn structure.  Ignore the unused members. 
 Handle 32-bit COMEDI_INSNLIST ioctl. 
 Copy insn structures. 
 Handle 32-bit COMEDI_INSN ioctl. 
  compat_ioctl file operation.
  Returns -ENOIOCTLCMD for unrecognised ioctl codes.
 Just need to translate the pointer argument. 
 No translation needed. 
  comedi_event() - Handle events for asynchronous COMEDI command
  @dev: COMEDI device.
  @s: COMEDI subdevice.
  Context: in_interrupt() (usually), @s->spin_lock spin-lock not held.
  If an asynchronous COMEDI command is active on the subdevice, process
  any %COMEDI_CB_... event flags that have been set, usually by an
  interrupt handler.  These may change the run state of the asynchronous
  command, wake a task, andor send a %SIGIO signal.
	
	  Remember if an error event has occurred, so an error can be
	  returned the next time the user does a read() or write().
 Note: the ->mutex is pre-locked on successful return 
 Note: dev->mutex needs to be unlocked by the caller. 
www.comedi.org\n");
 create devices files for legacymanual use 
 comedi_alloc_board_minor() locked the mutex 
 XXX requires proc interface 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  comedirange.c
  comedi routines for voltage ranges
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>
  COMEDI_RANGEINFO ioctl
  range information
  arg:
 	pointer to comedi_rangeinfo structure
  reads:
 	comedi_rangeinfo structure
  writes:
 	array of comedi_krange structures to rangeinfo->range_ptr pointer
  comedi_check_chanlist() - Validate each element in a chanlist.
  @s: comedi_subdevice struct
  @n: number of elements in the chanlist
  @chanlist: the chanlist to validate
  Each element consists of a channel number, a range index, an analog
  reference type and some flags, all packed into an unsigned int.
  This checks that the channel number and range index are supported by
  the comedi subdevice.  It does not check whether the analog reference
  type and the flags are supported.  Drivers that care should check those
  themselves.
  Return: %0 if all @chanlist elements are valid (success),
          %-EINVAL if one or more elements are invalid.
 SPDX-License-Identifier: GPL-2.0+
  comedi_usb.c
  Comedi USB driver specific functions.
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>
  comedi_to_usb_interface() - Return USB interface attached to COMEDI device
  @dev: COMEDI device.
  Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a
  a &struct device embedded in a &struct usb_interface.
  Return: Attached USB interface if @dev->hw_dev is non-%NULL.
  Return %NULL if @dev->hw_dev is %NULL.
  comedi_to_usb_dev() - Return USB device attached to COMEDI device
  @dev: COMEDI device.
  Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a
  a &struct device embedded in a &struct usb_interface.
  Return: USB device to which the USB interface belongs if @dev->hw_dev is
  non-%NULL.  Return %NULL if @dev->hw_dev is %NULL.
  comedi_usb_auto_config() - Configureprobe a USB COMEDI driver
  @intf: USB interface.
  @driver: Registered COMEDI driver.
  @context: Driver specific data, passed to comedi_auto_config().
  Typically called from the usb_driver (probe) function.  Auto-configure a
  COMEDI device, using a pointer to the &struct device embedded in @intf as
  the hardware device.  The @context value gets passed through to @driver's
  "auto_attach" handler.  The "auto_attach" handler may call
  comedi_to_usb_interface() on the passed in COMEDI device to recover @intf.
  Return: The result of calling comedi_auto_config() (%0 on success, or
  a negative error number on failure).
  comedi_usb_auto_unconfig() - Unconfiguredisconnect a USB COMEDI device
  @intf: USB interface.
  Typically called from the usb_driver (disconnect) function.
  Auto-unconfigure a COMEDI device attached to this USB interface, using a
  pointer to the &struct device embedded in @intf as the hardware device.
  The COMEDI driver's "detach" handler will be called during unconfiguration
  of the COMEDI device.
  Note that the COMEDI device may have already been unconfigured using the
  %COMEDI_DEVCONFIG ioctl, in which case this attempt to unconfigure it
  again should be ignored.
  comedi_usb_driver_register() - Register a USB COMEDI driver
  @comedi_driver: COMEDI driver to be registered.
  @usb_driver: USB driver to be registered.
  This function is called from the module_init() of USB COMEDI driver modules
  to register the COMEDI driver and the USB driver.  Do not call it directly,
  use the module_comedi_usb_driver() helper macro instead.
  Return: %0 on success, or a negative error number on failure.
  comedi_usb_driver_unregister() - Unregister a USB COMEDI driver
  @comedi_driver: COMEDI driver to be registered.
  @usb_driver: USB driver to be registered.
  This function is called from the module_exit() of USB COMEDI driver modules
  to unregister the USB driver and the COMEDI driver.  Do not call it
  directly, use the module_comedi_usb_driver() helper macro instead.
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  proc interface for comedi
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1998 David A. Schleef <ds@schleef.org>
  This is some serious bloatware.
  Taken from Dave A.'s PCL-711 driver, 'cuz I thought it
  was cool.
 SPDX-License-Identifier: GPL-2.0+
  comedi_pcmcia.c
  Comedi PCMCIA driver specific functions.
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>
  comedi_to_pcmcia_dev() - Return PCMCIA device attached to COMEDI device
  @dev: COMEDI device.
  Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a
  a &struct device embedded in a &struct pcmcia_device.
  Return: Attached PCMCIA device if @dev->hw_dev is non-%NULL.
  Return %NULL if @dev->hw_dev is %NULL.
  comedi_pcmcia_enable() - Request the regions and enable the PCMCIA device
  @dev: COMEDI device.
  @conf_check: Optional callback to check each configuration option of the
 	PCMCIA device and request IO regions.
  Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a a
  &struct device embedded in a &struct pcmcia_device.  The comedi PCMCIA
  driver needs to set the 'config_flags' member in the &struct pcmcia_device,
  as appropriate for that driver, before calling this function in order to
  allow pcmcia_loop_config() to do its internal autoconfiguration.
  If @conf_check is %NULL it is set to a default function.  If is
  passed to pcmcia_loop_config() and should return %0 if the configuration
  is valid and IO regions requested successfully, otherwise it should return
  a negative error value.  The default function returns -%EINVAL if the
  'config_index' member is %0, otherwise it calls pcmcia_request_io() and
  returns the result.
  If the above configuration check passes, pcmcia_enable_device() is called
  to set up and activate the PCMCIA device.
  If this function returns an error, comedi_pcmcia_disable() should be called
  to release requested resources.
  Return:
 	0 on success,
 	-%ENODEV id @dev->hw_dev is %NULL,
 	a negative error number from pcmcia_loop_config() if it fails,
 	or a negative error number from pcmcia_enable_device() if it fails.
  comedi_pcmcia_disable() - Disable the PCMCIA device and release the regions
  @dev: COMEDI device.
  Assuming @dev->hw_dev is non-%NULL, it is assumed to be pointing to a
  a &struct device embedded in a &struct pcmcia_device.  Call
  pcmcia_disable_device() to disable and clean up the PCMCIA device.
  comedi_pcmcia_auto_config() - Configureprobe a PCMCIA COMEDI device
  @link: PCMCIA device.
  @driver: Registered COMEDI driver.
  Typically called from the pcmcia_driver (probe) function.  Auto-configure
  a COMEDI device, using a pointer to the &struct device embedded in @link
  as the hardware device.  The @driver's "auto_attach" handler may call
  comedi_to_pcmcia_dev() on the passed in COMEDI device to recover @link.
  Return: The result of calling comedi_auto_config() (0 on success, or a
  negative error number on failure).
  comedi_pcmcia_auto_unconfig() - Unconfigureremove a PCMCIA COMEDI device
  @link: PCMCIA device.
  Typically called from the pcmcia_driver (remove) function.
  Auto-unconfigure a COMEDI device attached to this PCMCIA device, using a
  pointer to the &struct device embedded in @link as the hardware device.
  The COMEDI driver's "detach" handler will be called during unconfiguration
  of the COMEDI device.
  Note that the COMEDI device may have already been unconfigured using the
  %COMEDI_DEVCONFIG ioctl, in which case this attempt to unconfigure it
  again should be ignored.
  comedi_pcmcia_driver_register() - Register a PCMCIA COMEDI driver
  @comedi_driver: COMEDI driver to be registered.
  @pcmcia_driver: PCMCIA driver to be registered.
  This function is used for the module_init() of PCMCIA COMEDI driver modules
  to register the COMEDI driver and the PCMCIA driver.  Do not call it
  directly, use the module_comedi_pcmcia_driver() helper macro instead.
  Return: 0 on success, or a negative error number on failure.
  comedi_pcmcia_driver_unregister() - Unregister a PCMCIA COMEDI driver
  @comedi_driver: COMEDI driver to be registered.
  @pcmcia_driver: PCMCIA driver to be registered.
  This function is called from the module_exit() of PCMCIA COMEDI driver
  modules to unregister the PCMCIA driver and the COMEDI driver.  Do not call
  it directly, use the module_comedi_pcmcia_driver() helper macro instead.
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  comedi_buf.c
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1997-2000 David A. Schleef <ds@schleef.org>
  Copyright (C) 2002 Frank Mori Hess <fmhess@users.sourceforge.net>
			
			  DMA buffer was allocated as a single block.
			  Address is in page_list[0].
 Need ref to hardware device to free buffer later. 
		
		  Currently, the DMA buffer needs to be allocated as a
		  single block so that it can be mmap()'ed.
		
		  DMA buffer was allocated as a single block.
		  Address is in page_list[0].
 vmap the pages to prealloc_buf 
 helper for "access" vm operation 
 returns s->async->buf_map and increments its kref refcount 
 only want it if buffer pages allocated 
 Round up new_size to multiple of PAGE_SIZE 
 if no change is required, do nothing 
 deallocate old buffer 
 allocate new buffer 
 allocation failed 
  comedi_buf_write_alloc() - Reserve buffer space for writing
  @s: COMEDI subdevice.
  @nbytes: Maximum space to reserve in bytes.
  Reserve up to @nbytes bytes of space to be written in the COMEDI acquisition
  data buffer associated with the subdevice.  The amount reserved is limited
  by the space available.
  Return: The amount of space reserved in bytes.
	
	  ensure the async buffer 'counts' are read and updated
	  before we write data to the write-alloc'ed buffer space
  munging is applied to data by core as it passes between user
  and kernel space
 don't munge partial samples 
		
		  ensure data is munged in buffer before the
		  async buffer munge_count is incremented
  comedi_buf_write_free() - Free buffer space after it is written
  @s: COMEDI subdevice.
  @nbytes: Maximum space to free in bytes.
  Free up to @nbytes bytes of space previously reserved for writing in the
  COMEDI acquisition data buffer associated with the subdevice.  The amount of
  space freed is limited to the amount that was reserved.  The freed space is
  assumed to have been filled with sample data by the writer.
  If the samples in the freed space need to be "munged", do so here.  The
  freed space becomes available for allocation by the reader.
  Return: The amount of space freed in bytes.
  comedi_buf_read_n_available() - Determine amount of readable buffer space
  @s: COMEDI subdevice.
  Determine the amount of readable buffer space in the COMEDI acquisition data
  buffer associated with the subdevice.  The readable buffer space is that
  which has been freed by the writer and "munged" to the sample data format
  expected by COMEDI if necessary.
  Return: The amount of readable buffer space.
	
	  ensure the async buffer 'counts' are read before we
	  attempt to read data from the buffer
  comedi_buf_read_alloc() - Reserve buffer space for reading
  @s: COMEDI subdevice.
  @nbytes: Maximum space to reserve in bytes.
  Reserve up to @nbytes bytes of previously written and "munged" buffer space
  for reading in the COMEDI acquisition data buffer associated with the
  subdevice.  The amount reserved is limited to the space available.  The
  reader can read from the reserved space and then free it.  A reader is also
  allowed to read from the space before reserving it as long as it determines
  the amount of readable data available, but the space needs to be marked as
  reserved before it can be freed.
  Return: The amount of space reserved in bytes.
	
	  ensure the async buffer 'counts' are read before we
	  attempt to read data from the read-alloc'ed buffer space
  comedi_buf_read_free() - Free buffer space after it has been read
  @s: COMEDI subdevice.
  @nbytes: Maximum space to free in bytes.
  Free up to @nbytes bytes of buffer space previously reserved for reading in
  the COMEDI acquisition data buffer associated with the subdevice.  The
  amount of space freed is limited to the amount that was reserved.
  The freed space becomes available for allocation by the writer.
  Return: The amount of space freed in bytes.
	
	  ensure data has been read out of buffer before
	  the async read count is incremented
  comedi_buf_write_samples() - Write sample data to COMEDI buffer
  @s: COMEDI subdevice.
  @data: Pointer to source samples.
  @nsamples: Number of samples to write.
  Write up to @nsamples samples to the COMEDI acquisition data buffer
  associated with the subdevice, mark it as written and update the
  acquisition scan progress.  If there is not enough room for the specified
  number of samples, the number of samples written is limited to the number
  that will fit and the %COMEDI_CB_OVERFLOW event flag is set to cause the
  acquisition to terminate with an overrun error.  Set the %COMEDI_CB_BLOCK
  event flag if any samples are written to cause waiting tasks to be woken
  when the event flags are processed.
  Return: The amount of data written in bytes.
	
	  Make sure there is enough room in the buffer for all the samples.
	  If not, clamp the nsamples to the number that will fit, flag the
	  buffer overrun and add the samples that fit.
  comedi_buf_read_samples() - Read sample data from COMEDI buffer
  @s: COMEDI subdevice.
  @data: Pointer to destination.
  @nsamples: Maximum number of samples to read.
  Read up to @nsamples samples from the COMEDI acquisition data buffer
  associated with the subdevice, mark it as read and update the acquisition
  scan progress.  Limit the number of samples read to the number available.
  Set the %COMEDI_CB_BLOCK event flag if any samples are read to cause waiting
  tasks to be woken when the event flags are processed.
  Return: The amount of data read in bytes.
 clamp nsamples to the number of full samples available 
 SPDX-License-Identifier: GPL-2.0+
  comedidriverscb_pcidas64.c
  This is a driver for the ComputerBoardsMeasurementComputing PCI-DAS
  64xx, 60xx, and 4020 cards.
  Author:  Frank Mori Hess <fmhess@users.sourceforge.net>
  Copyright (C) 2001, 2002 Frank Mori Hess
  Thanks also go to the following people:
  Steve Rosenbluth, for providing the source code for
  his pci-das6402 driver, and source code for working QNX pci-6402
  drivers by Greg Laird and Mariusz Bogacz.  None of the code was
  used directly here, but it was useful as an additional source of
  documentation on how to program the boards.
  John Sims, for much testing and feedback on pcidas-4020 support.
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>
  Driver: cb_pcidas64
  Description: MeasurementComputing PCI-DAS64xx, 60XX, and 4020 series
    with the PLX 9080 PCI controller
  Author: Frank Mori Hess <fmhess@users.sourceforge.net>
  Status: works
  Updated: Fri, 02 Nov 2012 18:58:55 +0000
  Devices: [Measurement Computing] PCI-DAS640216 (cb_pcidas64),
    PCI-DAS640212, PCI-DAS64M116, PCI-DAS64M216,
    PCI-DAS64M316, PCI-DAS640216JR, PCI-DAS64M116JR,
    PCI-DAS64M216JR, PCI-DAS64M316JR, PCI-DAS64M114,
    PCI-DAS64M214, PCI-DAS64M314, PCI-DAS6013, PCI-DAS6014,
    PCI-DAS6023, PCI-DAS6025, PCI-DAS6030,
    PCI-DAS6031, PCI-DAS6032, PCI-DAS6033, PCI-DAS6034,
    PCI-DAS6035, PCI-DAS6036, PCI-DAS6040, PCI-DAS6052,
    PCI-DAS6070, PCI-DAS6071, PCI-DAS402012
  Configuration options:
    None.
  Manual attachment of PCI cards with the comedi_config utility is not
  supported by this driver; they are attached automatically.
  These boards may be autocalibrated with the comedi_calibrate utility.
  To select the bnc trigger input on the 4020 (instead of the dio input),
  specify a nonzero channel in the chanspec.  If you wish to use an external
  master clock on the 4020, you may do so by setting the scan_begin_src
  to TRIG_OTHER, and using an INSN_CONFIG_TIMER_1 configuration insn
  to configure the divisor to use for the external clock.
  Some devices are not identified because the PCI device IDs are not yet
  known. If you have such a board, please let the maintainers know.
  TODO:
  make it return error if user attempts an ai command that uses the
  external queue, and an ao command simultaneously user counter subdevice
  there are a number of boards this driver will support when they are
  fully released, but does not yet since the pci device id numbers
  are not yet available.
  support prescaled 100khz clock for slow pacing (not available on 6000
  series?)
  make ao fifo size adjustable like ai fifo
  40MHz master clock 
  100kHz 'prescaled' clock for slow acquisition,
  maybe I'll support this someday
 maximum value that can be loaded into board's 24-bit counters 
 PCI-DAS64xxx base addresses 
 devpriv->main_iobase registers 
 interrupt enable register 
 hardware config register 
 adc control register 0 
 adc control register 1 
 lower 16 bits of adc sample interval counter 
 upper 8 bits of adc sample interval counter 
 lower 16 bits of delay interval counter 
 upper 8 bits of delay interval counter 
 lower 16 bits of hardware conversionscan counter 
 upper 8 bits of hardware conversionscan counter 
 software trigger to start acquisition 
 initiates single conversion 
 clears adc queue 
 loads adc queue 
 high channel for internal queue, use adc_chan_bits() inline above 
 dac control register 0 
 dac control register 0 
 lower 16 bits of dac sample interval counter 
 upper 8 bits of dac sample interval counter 
 clear dac buffer 
	
	  hardware status register,
	  reading this apparently clears pending interrupts as well
 8255 offset, for 4020 only 
 external channelgain queue, uses same bits as ADC_QUEUE_LOAD_REG 
 adc data fifo 
 dac data fifo, has weird interactions with external channel queue 
 dev->mmio registers 
 bit definitions for write-only registers 
 adc interrupt source mask 
 interrupt fifo quarter full 
 interrupt end of conversion 
 interrupt end of scan 
 interrupt end of sequence mask 
 enable adc interrupt source 
 enable adc acquisition done intr 
 enable dac interrupt source 
 enable adc active interrupt 
 enable adc stop trigger interrupt 
 enable dac active interrupt 
 enable dac underrun status bit 
 enable adc overrun status bit 
 master clock source mask for 4020 
 use 40 MHz internal master clock 
 use BNC input for master clock 
 use dio input for master clock 
 use external channelgain queue 
 use 225 nanosec strobe when loading dac instead of 50 nanosec 
	
	  bit with unknown function yet given as default value in pci-das64
	  manual
 bit selects channels 10 for analog inputoutput, otherwise 01 
 allows adjustment of fifo sizes 
 bits that set dac fifo size 
 8k sample ao fifo 
 use trigext clk bnc input for analog gate signal 
 use trigext clk bnc input for external stop trigger signal 
 use trigext clk bnc input for external start trigger signal 
 bits that select gate 
 software gate 
 external digital gate 
 analog level gate 
 level-sensitive gate (for digital) 
 gate active low 
 trig 1 uses falling edge 
 external pacing uses falling edge 
 enable hardware scan counter 
 disables dma 
 master adc enable 
 should be set for boards with > 16 channels 
 software gate of adc 
 turn on extra noise for dithering 
 two channel mode for 4020 
 four channel mode for 4020 
 calibration enable for 64xx series 
 calibration enable for 60xx series 
  calibration sources for 6025 are:
   0 : ground
   1 : 10V
   2 : 5V
   3 : 0.5V
   4 : 0.05V
   5 : ground
   6 : dac channel 0
   7 : dac channel 1
 unipolarbipolar bit 
 single-ended differential bit 
 non-referenced single-ended (common-mode input) 
 queue end of sequence 
 queue end of scan 
 dac controller enable bit 
 board-dependent setting 
 dac output enable bit 
 board-dependent setting 
 bit definitions for read-only registers 
 I2C addresses for 4020 
 bits that set what source the adc converter measures 
 make bnc trigext clock threshold 0V instead of 2.5V 
 attenuate channel (+-5V input range) 
 analog input ranges for 64xx boards 
 bipolar 10, 5, 2,5, 1.25 
 unipolar 10, 5, 2.5, 1.25 
 analog input ranges for 64-Mx boards 
 bipolar 5, 2.5, 1.25, 0.625 
 unipolar 5, 2.5, 1.25 
 analog input ranges for 60xx boards 
 bipolar 10, 5, 0.5, 0.05 
 analog input ranges for 6030, etc boards 
 bip 10, 5, 2, 1, 0.5, 0.2, 0.1 
 uni 10, 5, 2, 1, 0.5, 0.2, 0.1 
 analog input ranges for 6052, etc boards 
 bipolar 10 ... 0.05 
 unipolar 10 ... 0.1 
 analog input ranges for 4020 board 
 analog output ranges 
 number of ai inputs in single-ended mode 
 analog input resolution 
 fastest conversion period in ns 
 number of analog out channels 
 analog output resolution 
 analog output scan speed 
 different board families have slightly different registers 
  maximum number of dma transfers we will chain together into a ring
  (and the maximum number of dma buffers we maintain)
 XXX check 
 no hardware pacing on ao 
 The device id for these boards is unknown 
 master clock divisor to use for scans with external master clock 
 chanspec for master clock input when used as scan begin src 
 this structure is for data unique to this hardware driver. 
 base addresses (physical) 
 base addresses (ioremapped) 
 local address (used by dma controller) 
 dma buffers for analog input 
 physical addresses of ai dma buffers 
	
	  array of ai dma descriptors read by plx9080,
	  allocated to get proper alignment
 physical address of ai dma descriptor array 
	
	  index of the ai dma descriptorbuffer
	  that is currently being used
 dma buffers for analog output 
 physical addresses of ao dma buffers 
 keeps track of buffer where the next ao sample should go 
 stc chip hardware revision number 
 last bits sent to INTR_ENABLE_REG register 
 last bits sent to ADC_CONTROL1_REG register 
 last bits sent to FIFO_SIZE_REG register 
 last bits sent to HW_CONFIG_REG register 
 last bits written to plx9080 control register 
 last bits written to plx interrupt control and status register 
 index of calibration source readable through ai ch0 
 bits written to i2c calibrationrange register 
 configure digital triggers to trigger on falling edge 
 spinlock for plx dma controlstatus reg 
	
	  Use pio transfer and interrupt on end of conversion
	  if CMDF_WAKE_EOS flag is set.
 4020 doesn't support pio transfers except for fifo dregs 
 initialize plx9080 chip 
 configure dma0 mode 
 enable ready input, not sure if this is necessary 
 enable bterm, not sure if this is necessary 
 enable dma chaining 
	
	  enable interrupt on dma done
	  (probably don't need this, since chain never finishes)
	
	  don't increment local address during transfers
	  (we are transferring from a fixed fifo register)
 route dma interrupt to pci bus 
 enable demand mode 
 enable local burst mode 
 4020 uses 32 bit dma 
 localspace0 bus is 16 bits wide 
 enable interrupts on plx 9080 
 disable pacing, triggering, etc 
 1 == 256 entries, 2 == 512 entries, etc 
  adjusts the size of hardware fifo (which determines block size for dma xfers)
 query length of fifo 
	
	  bit should be set for 6025,
	  although docs say boards with <= 16 chans should be cleared XXX
 640216 manual says this register must be initialized to 0xff? 
 set fifos to maximum size 
 EN_DAC_INTR_SRC_BIT | DAC_INTR_QEMPTY_BITS | 
 allocate pci dma buffers 
 allocate dma descriptors 
 initialize dma descriptors 
 free pci dma buffers 
 free dma descriptors 
  their i2c requires a huge delay on setting clock or data high for some reason
 set i2c data line high or low 
 set data line high 
 set data line low 
 set i2c clock line high or low 
 set clock line high 
 set clock line low 
 we can't really read the lines, so fake it 
 return fake acknowledge bit 
 send start bit 
 send stop bit 
	
	  XXX need mutex to prevent simultaneous attempts to access
	  eeprom and i2c bus
 make sure we don't send anything to eeprom 
 send address and write bit 
 get acknowledge 
 write data bytes 
 disable card's analog input interrupt sources and pacing 
 4020 generates dac done interrupts even though they are disabled 
 use internal queue 
 ALT_SOURCE is internal calibration reference 
			
			  select internal reference source to connect
			  to channel 0
			
			  make sure internal calibration source
			  is turned off
 load internal queue 
 set gain 
 set single-ended  differential 
 set stop channel 
 set start channel, and rest of settings 
 select BNC inputs 
 select range 
		
		  update calibrationrange i2c register only if necessary,
		  as it is very slow
		
		  4020 manual asks that sample interval register to be set
		  before writing to convert register.
		  Using somewhat arbitrary setting of 4 master clock ticks
		  = 0.1 usec
 clear adc buffer (inside loop for 4020 sake) 
 trigger conversion, bits sent only matter for 4020 
 wait for data 
 XXX could add support for 60xx series 
  Gets nearest achievable timing given master clock speed, does not
  take into account possible minimummaximum divisor values.  Used
  by other timing checking functions.
  utility function that rounds desired timing to an achievable time, and
  sets cmd members appropriately.
  adc paces conversions from master clock by dividing by (x + 3) where x is
  24 bit number
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
		
		  start_arg is the CR_CHAN | CR_INVERT of the
		  external trigger.
			
			  if scans are timed faster than conversion rate
			  allows
 step 4: fix up any arguments 
 Step 5: check channel list if it exists 
 disable for now until I work out a race 
 load hardware conversion counter 
 supposed to load counter with desired divisor minus 3 
 figure out how long we need to delay at end of scan 
 should never happen 
 supposed to load counter with desired divisor minus 2 for 4020 
 select internalexternal master clock 
 spinlock for plx dma controlstatus reg 
 load lower 16 bits of convert interval 
 load upper 8 bits of convert interval 
 load lower 16 bits of scan delay 
 load upper 8 bits of scan delay 
 set channel 
 set gain 
 set single-ended  differential 
 set stop channel 
 set start channel, and rest of settings 
 use external queue 
 clear DAC buffer to prevent weird interactions 
 clear queue pointer 
 load external queue 
 set channel 
 set gain 
 set single-ended  differential 
 mark end of queue 
			
			  doing a queue clear is not specified in board docs,
			  but required for reliable operation
 prime queue holding register 
 select BNC inputs 
 select ranges 
		
		  update calibrationrange i2c register only if necessary,
		  as it is very slow
	
	  The transfer size, pci address, and local address registers
	  are supposedly unused during chained dma,
	  but I have found that left over values from last operation
	  occasionally cause problems with transfer of first dma
	  block.  Initializing them to zero seems to fix the problem.
 make sure internal calibration source is turned off 
 set mode, allow conversions through software gate 
 good old mode 13 
 mode 8.  What else could you need? 
 clear adc buffer 
 set dma transfer size 
 give location of first dma descriptor 
 set source for external triggers 
 enable pacing, triggering, etc 
 set start trigger 
 start acquisition 
 read num_samples from 16 bit wide ai fifo 
 get least significant 15 bits 
		
		  Get most significant bits (grey code).
		  Different boards use different code so use a scheme
		  that doesn't depend on encoding.  This read must
		  occur after reading least significant 15 bits to avoid race
		  with fifo switching to next segment.
		
		  if read and write pointers are not on the same fifo segment,
		  read to the end of the read segment
  Read from 32 bit wide ai fifo of 4020 - deal with insane grey coding of
  pointers.  The pci-4020 hardware only supports dma transfers (it only
  supports the use of pio for draining the last remaining points from the
  fifo when a data acquisition operation has completed).
 empty fifo 
 loop until we have read all the full buffers 
 transfer data from dma buffer to comedi buffer 
	
	  XXX check for dma ring buffer overrun
	  (use end-of-chain bit to mark last unused buffer)
 check for fifo overrun 
 spin lock makes sure no one else changes plx dma control reg 
 dma chan 1 interrupt 
 drain fifo with pio 
 if we are have all the data, then quit 
 set end of chain bit so we catch underruns 
	
	  clear end of chain bit on previous buffer now that we have set it
	  for the last buffer
 don't overwrite data that hasn't been transferred yet 
 board might not support ao, in which case write_subdev is NULL 
 spin lock makes sure no one else changes plx dma control reg 
  dma chan 0 interrupt 
 try to recover from dma end-of-chain event 
	
	  an interrupt before all the postconfig stuff gets done could
	  cause a NULL dereference if we continue through the
	  interrupt handler
 clear possible plx9080 interrupt sources 
 clear local doorbell interrupt 
 do some initializing 
 set range 
 write to channel 
 remember last output value 
	
	  clear queue pointer too, since external queue has
	  weird interactions with ao fifo
 disable analog output system during setup 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 step 4: fix up any arguments 
 Step 5: check channel list if it exists 
  pci-6025 8800 caldac:
  address 0 == dac channel 0 offset
  address 1 == dac channel 0 gain
  address 2 == dac channel 1 offset
  address 3 == dac channel 1 gain
  address 4 == fine adc offset
  address 5 == coarse adc offset
  address 6 == coarse adc gain
  address 7 == fine adc gain
  pci-640216 uses all 8 channels for dac:
  address 0 == dac channel 0 fine gain
  address 1 == dac channel 0 coarse gain
  address 2 == dac channel 0 coarse offset
  address 3 == dac channel 1 coarse offset
  address 4 == dac channel 1 fine gain
  address 5 == dac channel 1 coarse gain
  address 6 == dac channel 0 fine offset
  address 7 == dac channel 1 fine offset
 4020 caldacs 
 manual has gain and offset bits switched 
 chan 0 offset 
 chan 1 offset 
 chan 2 offset 
 chan 3 offset 
 chan 0 gain 
 chan 1 gain 
 chan 2 gain 
 chan 3 gain 
	
	  Programming the calib device is slow. Only write the
	  last data value if the value has changed.
 for pci-das640216, channel 0 is analog input gain and channel 1 is offset 
	
	  Programming the calib device is slow. Only write the
	  last data value if the value has changed.
 make sure we don't send anything to the i2c bus on 4020 
 activate serial eeprom 
 write read command and desired memory address 
 set bit to be written 
 clock in bit 
 read back value from eeprom memory location 
 clock out bit 
 deactivate eeprom serial input 
 No point reading the same EEPROM location more than once. 
 Allocate and initialize the subdevice structures. 
 analog input subdevice 
 XXX Number of inputs in differential mode is ignored 
		
		  set adc to read from inputs
		  (not internal calibration sources)
 set channels to +-5 volt input ranges 
 analog output subdevice 
 digital input 
 digital output 
 8255 
 8 channel dio for 60xx 
 caldac 
 2 channel ad8402 potentiometer 
 serial EEPROM, if present 
 user counter subd XXX 
 Initialize dev->board_name 
 figure out what local addresses are 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  Comedi driver for NI PCI-MIO E series cards
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1997-8 David A. Schleef <ds@schleef.org>
  Driver: ni_pcimio
  Description: National Instruments PCI-MIO-E series and M series (all boards)
  Author: ds, John Hallen, Frank Mori Hess, Rolf Mueller, Herbert Peremans,
    Herman Bruyninckx, Terry Barnaby
  Status: works
  Devices: [National Instruments] PCI-MIO-16XE-50 (ni_pcimio),
    PCI-MIO-16XE-10, PXI-6030E, PCI-MIO-16E-1, PCI-MIO-16E-4, PCI-6014,
    PCI-6040E, PXI-6040E, PCI-6030E, PCI-6031E, PCI-6032E, PCI-6033E,
    PCI-6071E, PCI-6023E, PCI-6024E, PCI-6025E, PXI-6025E, PCI-6034E,
    PCI-6035E, PCI-6052E, PCI-6110, PCI-6111, PCI-6220, PXI-6220,
    PCI-6221, PXI-6221, PCI-6224, PXI-6224, PCI-6225, PXI-6225,
    PCI-6229, PXI-6229, PCI-6250, PXI-6250, PCI-6251, PXI-6251,
    PCIe-6251, PXIe-6251, PCI-6254, PXI-6254, PCI-6259, PXI-6259,
    PCIe-6259, PXIe-6259, PCI-6280, PXI-6280, PCI-6281, PXI-6281,
    PCI-6284, PXI-6284, PCI-6289, PXI-6289, PCI-6711, PXI-6711,
    PCI-6713, PXI-6713, PXI-6071E, PCI-6070E, PXI-6070E,
    PXI-6052E, PCI-6036E, PCI-6731, PCI-6733, PXI-6733,
    PCI-6143, PXI-6143
  Updated: Mon, 16 Jan 2017 12:56:04 +0000
  These boards are almost identical to the AT-MIO E series, except that
  they use the PCI bus instead of ISA (i.e., AT). See the notes for the
  ni_atmio.o driver for additional information about these boards.
  Autocalibration is supported on many of the devices, using the
  comedi_calibrate (or comedi_soft_calibrate for m-series) utility.
  M-Series boards do analog input and analog output calibration entirely
  in software. The software calibration corrects the analog input for
  offset, gain and nonlinearity. The analog outputs are corrected for
  offset and gain. See the comedilib documentation on
  comedi_get_softcal_converter() for more information.
  By default, the driver uses DMA to transfer analog input data to
  memory.  When DMA is enabled, not all triggering features are
  supported.
  Digital IO may not work on 673x.
  Note that the PCI-6143 is a simultaineous sampling device with 8
  convertors. With this board all of the convertors perform one
  simultaineous sample during a scan interval. The period for a scan
  is used for the convert time in a Comedi cmd. The convert trigger
  source is normally set to TRIG_NOW by default.
  The RTSI trigger bus is supported on these cards on subdevice 10.
  See the comedilib documentation for details.
  Information (number of channels, bits, etc.) for some devices may be
  incorrect. Please check this and submit a bug if there are problems
  for your device.
  SCXI is probably broken for m-series boards.
  Bugs:
  - When DMA is enabled, COMEDI_EV_CONVERT does not work correctly.
  The PCI-MIO E series driver was originally written by
  Tomasz Motylewski <...>, and ported to comedi by ds.
  References:
 	341079b.pdf  PCI E Series Register-Level Programmer Manual
 	340934b.pdf  DAQ-STC reference manual
 	322080b.pdf  671167136715 User Manual
 	320945c.pdf  PCI E Series User Manual
 	322138a.pdf  PCI-6052E and DAQPad-6052E User Manual
  ISSUES:
  - need to deal with external reference for DAC, and other DAC
    properties in board properties
  - deal with at-mio-16de-10 revision D to N changes, etc.
  - need to add other CALDAC type
  - need to slow down DAC loading. I don't trust NI's claim that
    two writes to the PCI bus slows IO enough. I would prefer to
    use udelay().
    Timing specs: (clock)
 	AD8522		30ns
 	DAC8043		120ns
 	DAC8800		60ns
 	MB88341		?
  These are not all the possible ao ranges for 628x boards.
  They can do OFFSET +- REFERENCE where OFFSET can be
  0V, 5V, APFI<0,1>, or AO<0...3> and RANGE can
  be 10V, 5V, 2V, 1V, APFI<0,1>, AO<0...3>.  That's
  63 different possibilities.  An AO channel
  can not act as it's own OFFSET or REFERENCE.
 BOARD_PCI6115, 
 BOARD_PXI6115, 
 BOARD_PXI6731, 
  aka pci-6030E 
 aka pci-6070e 
 aka pci-6040e 
		
		  there have been reported problems with
		  full speed on this board
 doc says mb88341 
 manual is wrong 
 manual is wrong 
 manual is wrong 
 manual is wrong 
 manual is wrong 
 The 6115 boards probably need their own driver 
 .device_id = 0x2ed0, 
 XXX 
 .device_id = ????, 
 XXX 
 data sheet says 8192, but fifo really holds 16384 samples 
 .device_id = ????, 
 FIXME: guess 
 FIXME: guess 
 IO Window 1 needs to be temporarily mapped to read the eeprom 
  Disable interrupts 
  Initialise 6143 AI specific bits 
 Set G0,G1 DMA mode to E series version 
 Set EOCMode, ADCMode and pipelinedelay 
 Set EOC Delay 
 Set the FIFO half full level 
  Strobe Relay disable bit 
 use win0 
 0x1620? 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  comedidriversamplc_dio200_common.c
  Common support code for "amplc_dio200" and "amplc_dio200_pci".
  Copyright (C) 2005-2013 MEV Ltd. <https:www.mev.co.uk>
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1998,2000 David A. Schleef <ds@schleef.org>
 only for register defines 
 200 series registers 
 Group XYZ clock sel reg 
 Group XYZ gate sel reg 
 Interrupt enablestatus register 
 Extra registers for new PCIe boards 
 1 to enable enhanced features 
 Hardware version register 
 Timestamp timer config register 
 Timestamp timer count register 
  Functions for constructing value for DIO_200_?CLK_SCE and
  DIO_200_?GAT_SCE registers:
  'which' is: 0 for CTR-X1, CTR-Y1, CTR-Z1; 1 for CTR-X2, CTR-Y2 or CTR-Z2.
  'chan' is the channel: 0, 1 or 2.
  'source' is the signal source: 0 to 7, or 0 to 31 for "enhanced" boards.
  Periods of the internal clock sources in nanoseconds.
 10 MHz 
 1 MHz 
 100 kHz 
 10 kHz 
 1 kHz 
 20 MHz (enhanced boards) 
 clock sources 12 and later reserved for enhanced boards 
  Timestamp timer configuration register (for new PCIe boards).
 Reset counter to zero. 
 Clock source. 
 Maximum clock source value. 
  Periods of the timestamp timer clock sources in nanoseconds.
 1 nanosecond (but with 20 ns granularity). 
 1 microsecond. 
 1 millisecond. 
 DIO base offset 
 protects the 'active' flag 
 get the offset that was passed to comedi_8254__init() 
 remove the shift that was added for PCIe boards 
 this offset now works for the dio200_{read,write} helpers 
 Just read the interrupt status register.  
 No interrupt status register. 
 Determine interrupt sources to enable. 
 Enable interrupt sources. 
		
		  Collect interrupt sources that have triggered and disable
		  them temporarily.  Loop around until no extra interrupt
		  sources have triggered, at which point, the valid part of
		  the interrupt status register will read zero, clearing the
		  cause of the interrupt.
		 
		  Mask off interrupt sources already seen to avoid infinite
		  loop in case of misconfiguration.
		
		  No interrupt status register.  Assume the single interrupt
		  source has triggered.
		
		  Some interrupt sources have triggered and have been
		  temporarily disabled to clear the cause of the interrupt.
		 
		  Reenable them NOW to minimize the time they are disabled.
			
			  The command is still active.
			 
			  Ignore interrupt sources that the command isn't
			  interested in (just in case there's a race
			  condition).
 Collect scan data. 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 TRIG_NONE 
 step 4: fix up any arguments 
 if (err) return 4; 
 TRIG_NOW 
 Disable interrupt sources. 
 No interrupt source register.  Support single channel. 
	
	  PCIe boards need the offset shifted in order to get the
	  correct base address of the timer.
	
	  There could be multiple timers so this driver does not
	  use dev->pacer to save the i8254 pointer. Instead,
	  comedi_8254_subdevice_init() saved the i8254 pointer in
	  s->private.  Mark the subdevice as having private data
	  to be automatically freed when the device is detached.
 Initialize channels. 
 Gate source 0 is VCC (logic 1). 
 Clock source 0 is the dedicated clock input. 
 1 in io_bits indicates output, 1 in config indicates input 
 counter subdevice (8254) 
 digital io subdevice (8255) 
 'INTERRUPT' subdevice 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  Comedi driver for National Instruments AT-MIO16D board
  Copyright (C) 2000 Chris R. Baugher <baugher@enteract.com>
  Driver: ni_atmio16d
  Description: National Instruments AT-MIO-16D
  Author: Chris R. Baugher <baugher@enteract.com>
  Status: unknown
  Devices: [National Instruments] AT-MIO-16 (atmio16), AT-MIO-16D (atmio16d)
  Configuration options:
    [0] - IO port
    [1] - MIO irq (0 == no irq; or 3,4,5,6,7,9,10,11,12,14,15)
    [2] - DIO irq (0 == no irq; or 3,4,5,6,7,9)
    [3] - DMA1 channel (0 == no DMA; or 5,6,7)
    [4] - DMA2 channel (0 == no DMA; or 5,6,7)
    [5] - ad mux (0=differential; 1=single)
    [6] - ad range (0=bipolar10; 1=bipolar5; 2=unipolar10)
    [7] - dac0 range (0=bipolar; 1=unipolar)
    [8] - dac0 reference (0=internal; 1=external)
    [9] - dac0 coding (0=2's comp; 1=straight binary)
    [10] - dac1 range (same as dac0 options)
    [11] - dac1 reference (same as dac0 options)
    [12] - dac1 coding (same as dac0 options)
  I must give credit here to Michal Dobes <dobes@tesnet.cz> who
  wrote the driver for Advantec's pcl812 boards. I used the interrupt
  handling code from his driver as an example for this one.
  Chris Baugher
  512000
 Configuration and Status Registers 
 wo 16 
 ro 16 
 wo 16 
 Event Strobe Registers 
 wo 16 
 wo 16 
 wo 16 
 wo 16 
 Analog Output Registers 
 wo 16 
 wo 16 
 wo 16 
 Analog Input Registers 
 wo 16 
 wo 16 
 ro 16 
 wo 16 
 AM9513A CounterTimer Registers 
 rw 16 
 wo 16 
 ro 16 
 MIO-16 Digital IO Registers 
 ro 16 
 wo 16 
 RTSI Switch Registers 
 wo 8 
 wo 8 
 DIO-24 Registers 
 rw 8 
 rw 8 
 rw 8 
 wo 8 
 Command Register bits 
 Status Register bits 
 AM9513A CounterTimer defines 
 range structs 
 private data struct 
 current state of command register 1 
 current state of command register 2 
 Counter 2 
 Counter 3 
 Counter 4 
 Counter 5 
 now we need to initialize the board 
 init AM9513A timer 
 timer init done 
 select straight binary mode for Analog Input 
 zero the analog outputs 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 internal trigger 
 TRIG_NONE 
	
	  This is slowly becoming a working command interface.
	  It is still uber-experimental
 check if scanning multiple channels 
 Setup the Mux-Gain Counter 
 set LASTONE bit 
	
	  Now program the sample interval timer.
	  Figure out which clock to use then get an appropriate timer value.
 cmd->convert_arg < 6553600000  {
 Now figure out how many samples to get 
 and program the sample counter 
 use only Counter 4 
 Counter 4 and 5 are needed 
	
	  Program the scan interval timer ONLY IF SCANNING IS ENABLED.
	  Figure out which clock to use then get an appropriate timer value.
 cmd->scan_begin_arg < 6553600000  {
 Clear the AD FIFO and reset the MUX counter 
 enable this acquisition operation 
 enable interrupts for conversion completion 
 apply a trigger. this starts the counters! 
 This will cancel a running acquisition operation 
 reset the Analog input circuitry 
 outw( 0, dev->iobase+AD_CLEAR_REG ); 
 reset the Analog Input MUX Counter to 0 
 outw( 0, dev->iobase+MUX_CNTR_REG ); 
 set the Input MUX gain 
 start the conversion 
 wait for it to finish 
 read the data now 
 change to two's complement if need be 
 reset the atmio16d hardware 
 set device options 
 setup sub-devices 
 ai subdevice 
 4095 decimal 
 ao subdevice 
 4095 decimal 
 Digital IO 
 8255 subdevice 
 don't yet know how to deal with countertimers 
 do 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
   comedidriversmf6x4.c
   Driver for Humusoft MF634 and MF624 Data acquisition cards
   COMEDI - Linux Control and Measurement Device Interface
   Copyright (C) 2000 David A. Schleef <ds@schleef.org>
  Driver: mf6x4
  Description: Humusoft MF634 and MF624 Data acquisition card driver
  Devices: [Humusoft] MF634 (mf634), MF624 (mf624)
  Author: Rostislav Lisovy <lisovy@gmail.com>
  Status: works
  Updated:
  Configuration Options: none
 Registers present in BAR0 memory region 
 End Of Last Conversion 
 Load DACs 
 BAR1 registers 
 BAR2 registers 
 We need to keep track of the order of BARs used by the cards 
	
	  Documentation for both MF634 and MF624 describes registers
	  present in BAR0, 1 and 2 regions.
	  The real (i.e. in HW) BAR numbers are different for MF624
	  and MF634 yet we will call them 0, 1, 2
	
	  This configuration register has the same function and fields
	  for both cards however it lies in different BARs on different
	  offsets -- this variable makes the access easier
 EOLC goes low at end of conversion. 
 Set the ADC channel number in the scan list 
 Trigger ADC conversion by reading ADSTART 
 Read the actual value 
 munge the 2's complement data to offset binary 
 Enable instantaneous update of converters outputs + Enable DACs 
 Analog Input subdevice 
 Analog Output subdevice 
 Digital Input subdevice 
 Digital Output subdevice 
 SPDX-License-Identifier: GPL-2.0+
  multiq3.c
  Hardware driver for Quanser Consulting MultiQ-3 board
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1999 Anders Blomdell <anders.blomdell@control.lth.se>
  Driver: multiq3
  Description: Quanser Consulting MultiQ-3
  Devices: [Quanser Consulting] MultiQ-3 (multiq3)
  Author: Anders Blomdell <anders.blomdell@control.lth.se>
  Status: works
  Configuration Options:
   [0] - IO port base address
   [1] - IRQ (not used)
   [2] - Number of optional encoder chips installed on board
 	  0 = none
 	  1 = 2 inputs (Model -2E)
 	  2 = 4 inputs (Model -4E)
 	  3 = 6 inputs (Model -6E)
 	  4 = 8 inputs (Model -8E)
  Register map
  Encoder chip commands (from the programming manual)
 FCK frequency divider 
 xfer PR0 to PSC 
 enable inputs A and B 
 quadrature 
 reset byte pointer 
 reset counter 
 xfre preset reg to counter 
 xfer CNTR to OL (x and y) 
 reset E bit of flag reg 
	
	  According to the programming manual, the SH and CLK bits should
	  be kept high at all times.
 get a 16-bit sample; mask it to the subdevice resolution 
 munge the 2's complement value to offset binary 
 select encoder channel 
 reset the byte pointer 
 latch the data 
 read the 24-bit encoder data (lsbmidmsb) 
		
		  Munge the data so that the reset value is in the middle
		  of the maxdata range, i.e.:
		 
		  real value	comedi value
		  0xffffff	0x7fffff	1 negative count
		  0x000000	0x800000	reset value
		  0x000001	0x800001	1 positive count
		 
		  It's possible for the 24-bit counter to overflow but it
		  would normally take _quite_ a few turns. A 2000 line
		  encoder in quadrature results in 8000 countsrev. So about
		  1048 turns in either direction can be measured without
		  an overflow.
 Analog Input subdevice 
 Analog Output subdevice 
 Digital Input subdevice 
 Digital Output subdevice 
 Encoder (Counter) subdevice 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  comedidriversni_labpc_isadma.c
  ISA DMA support for National Instruments Lab-PC series boards and
  compatibles.
  Extracted from ni_labpc.c:
  Copyright (C) 2001-2003 Frank Mori Hess <fmhess@users.sourceforge.net>
 size in bytes of dma buffer 
 utility function that suggests a dma transfer size in bytes 
 return some default value 
 make buffer fill in no more than 13 second 
 set a minimum and maximum size allowed 
 set appropriate size of transfer 
 set CMD3 bits for caller to enable DMA and interrupt 
	
	  residue is the number of bytes left to be done on the dma
	  transfer.  It should always be zero at this point unless
	  the stop_src is set to external triggering.
	
	  Figure out how many samples to read for this transfer and
	  how many will be stored for next time.
 clear dma tc interrupt 
	
	  if a dma terminal count of external stop trigger
	  has occurred
 only DMA channels 3 and 1 are valid 
 DMA uses 1 buffer 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0
  pcl816.c
  Comedi driver for Advantech PCL-816 cards
  Author:  Juan Grigera <juan@grigera.com.ar>
  based on pcl818 by Michal Dobes <dobes@tesnet.cz> and bits of pcl812
  Driver: pcl816
  Description: Advantech PCL-816 cards, PCL-814
  Devices: [Advantech] PCL-816 (pcl816), PCL-814B (pcl814b)
  Author: Juan Grigera <juan@grigera.com.ar>
  Status: works
  Updated: Tue,  2 Apr 2002 23:15:21 -0800
  PCL 816 and 814B have 16 SEDIFF ADCs, 16 DACs, 16 DI and 16 DO.
  Differences are at resolution (16 vs 12 bits).
  The driver support AI command mode, other subdevices not written.
  Analog output and digital input and output are not supported.
  Configuration Options:
    [0] - IO Base
    [1] - IRQ	(0=disable, 2, 3, 4, 5, 6, 7)
    [2] - DMA	(0=disable, 1, 3)
    [3] - 0, 10=10MHz clock for 8254
 	       1= 1MHz clock for 8254
  Register IO map
  how many sampes transfer poll 
	
	  Determine dma size based on the buffer maxsize plus the number of
	  unread samples and the number of samples remaining in the command.
 store range list to card 
 writing any value clears the interrupt request 
 writing any value triggers a software conversion 
 restart dma with the next buffer 
  correct channel and range number check itself comedirange.c 
  first channel is every time ok 
  we detect loop, this must by finish 
  channel list isn't continuous :-( 
  well, this is next correct channel in list 
  check whole chanlist 
  changain list is strange 
  we can serve this with MUX logic 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 TRIG_EXT 
 TRIG_NONE 
 step 4: fix up any arguments 
 step 5: complain about special chanlist considerations 
  incorrect channels list 
 setup and enable dma for the first buffer 
 TRIG_EXT 
 new buffer position 
 no new samples 
 set all digital outputs low 
 only IRQs 2-7 and DMA channels 3 and 1 are valid 
 DMA uses two 16K buffers 
 an IRQ and DMA are required to support async commands 
 Piggyback Slot1 subdevice 
 Digital Input subdevice 
 Digital Output subdevice 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  Comedi driver for DAS008 PCMCIA boards
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 2000 David A. Schleef <ds@schleef.org>
  Copyright (C) 2001,2002,2003 Frank Mori Hess <fmhess@users.sourceforge.net>
  PCMCIA support code for this driver is adapted from the dummy_cs.c
  driver of the Linux PCMCIA Card Services package.
  The initial developer of the original code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
  Driver: das08_cs
  Description: DAS-08 PCMCIA boards
  Author: Warren Jasper, ds, Frank Hess
  Devices: [ComputerBoards] PCM-DAS08 (pcm-das08)
  Status: works
  This is the PCMCIA-specific support split off from the
  das08 driver.
  Configuration Options: none, uses PCMCIA auto config
  Command support does not exist, but could be added for this board.
 The das08 driver needs the board_ptr 
 SPDX-License-Identifier: GPL-2.0+
  pcmuio.c
  Comedi driver for Winsystems PC-104 based 4896-channel DIO boards.
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 2006 Calin A. Culianu <calin@ajvar.org>
  Driver: pcmuio
  Description: Winsystems PC-104 based 4896-channel DIO boards.
  Devices: [Winsystems] PCM-UIO48A (pcmuio48), PCM-UIO96A (pcmuio96)
  Author: Calin Culianu <calin@ajvar.org>
  Updated: Fri, 13 Jan 2006 12:01:01 -0500
  Status: works
  A driver for the relatively straightforward-to-program PCM-UIO48A and
  PCM-UIO96A boards from Winsystems. These boards use either one or two
  (in the 96-DIO version) WS16C48 ASIC HighDensity IO Chips (HDIO). This
  chip is interesting in that each IO line is individually programmable
  for INPUT or OUTPUT (thus comedi_dio_config can be done on a per-channel
  basis). Also, each chip supports edge-triggered interrupts for the first
  24 IO lines. Of course, since the 96-channel version of the board has
  two ASICs, it can detect polarity changes on up to 48 IO lines. Since
  this is essentially an (non-PnP) ISA board, IO Address and IRQ selection
  are done through jumpers on the board. You need to pass that information
  to this driver as the first and second comedi_config option, respectively.
  Note that the 48-channel version uses 16 bytes of IO memory and the 96-
  channel version uses 32-bytes (in case you are worried about conflicts).
  The 48-channel board is split into two 24-channel comedi subdevices. The
  96-channel board is split into 4 24-channel DIO subdevices.
  Note that IRQ support has been added, but it is untested.
  To use edge-detection IRQ support, pass the IRQs of both ASICS (for the
  96 channel version) or just 1 ASIC (for 48-channel version). Then, use
  comedi_commands with TRIG_NOW. Your callback will be called each time an
  edge is triggered, and the data values will be two sample_t's, which
  should be concatenated to form one 32-bit unsigned int.  This value is
  the mask of channels that had edges detected from your channel list. Note
  that the bits positions in the mask correspond to positions in your
  chanlist when you specified the command and not channel id's!
  To set the polarity of the edge-detection interrupts pass a nonzero value
  for either CR_RANGE or CR_AREF for edge-up polarity, or a zero value for
  both CR_RANGE and CR_AREF if you want edge-down polarity.
  In the 48-channel version:
  On subdev 0, the first 24 channels are edge-detect channels.
  In the 96-channel board you have the following channels that can do edge
  detection:
  subdev 0, channels 0-24  (first 24 channels of 1st ASIC)
  subdev 2, channels 0-24  (first 24 channels of 2nd ASIC)
  Configuration Options:
   [0] - IO port base address
   [1] - IRQ (for first ASIC, or first 24 channels)
   [2] - IRQ (for second ASIC, pcmuio96 only - IRQ for chans 48-72
              can be the same as first irq!)
  Register IO map
  Offset    Page 0       Page 1       Page 2       Page 3
  ------  -----------  -----------  -----------  -----------
   0x00   Port 0 IO   Port 0 IO   Port 0 IO   Port 0 IO
   0x01   Port 1 IO   Port 1 IO   Port 1 IO   Port 1 IO
   0x02   Port 2 IO   Port 2 IO   Port 2 IO   Port 2 IO
   0x03   Port 3 IO   Port 3 IO   Port 3 IO   Port 3 IO
   0x04   Port 4 IO   Port 4 IO   Port 4 IO   Port 4 IO
   0x05   Port 5 IO   Port 5 IO   Port 5 IO   Port 5 IO
   0x06   INT_PENDING  INT_PENDING  INT_PENDING  INT_PENDING
   0x07    PageLock    PageLock    PageLock    PageLock
   0x08       NA         POL_0       ENAB_0       INT_ID0
   0x09       NA         POL_1       ENAB_1       INT_ID1
   0x0a       NA         POL_2       ENAB_2       INT_ID2
 protects the page registers 
 protects member variables 
	
	  subdevice 0 and 1 are handled by the first asic
	  subdevice 2 and 3 are handled by the second asic
	
	  subdevice 0 and 2 use port registers 0-2
	  subdevice 1 and 3 use port registers 3-5
 Port registers are valid for any page 
 Port registers are valid for any page 
  Each channel can be individually programmed for input or output.
  Writing a '0' to a channel causes the corresponding output pin
  to go to a high-z state (pulled high by an external 10K resistor).
  This allows it to be used as an input. When used in the input mode,
  a read reflects the inverted state of the IO pin, such that a
  high on the pin will read as a '0' in the register. Writing a '1'
  to a bit position causes the pin to sink current (up to 12mA),
  effectively pulling it low.
		
		  Outputs are inverted, invert the state and
		  update the channels.
		 
		  The s->io_bits mask makes sure the input channels
		  are '0' so that the outputs pins stay in a high
		  z-state.
 get inverted state of the channels from the port 
 return the true state of the channels 
 first, clear all the DIO port bits 
 Next, clear all the paged registers for each page 
 chip->spinlock is already locked 
 disable all intrs for this subdev.. 
 there are could be two asics so we can't use dev->read_subdev 
 are there any interrupts pending 
 get, and clear, the pending interrupts 
 handle the pending interrupts 
 chip->spinlock is already locked 
 set pol and enab intrs for this subdev.. 
  'do_cmd' function for an 'INTERRUPT' subdevice.
 Set up start of acquisition. 
 TRIG_NOW 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 TRIG_NONE 
 step 4: fix up any arguments 
 if (err) return 4; 
 request the irq for the 1st asic 
 the same irq (or none) is used by both asics 
 request the irq for the 2nd asic 
 subdevices 0 and 2 can support interrupts 
 setup the interrupt subdevice 
 free the 2nd irq if used, the core will free the 1st one 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
   das08_pci.c
   comedi driver for DAS08 PCI boards
   COMEDI - Linux Control and Measurement Device Interface
   Copyright (C) 2000 David A. Schleef <ds@schleef.org>
   Copyright (C) 2001,2002,2003 Frank Mori Hess <fmhess@users.sourceforge.net>
   Copyright (C) 2004 Salvador E. Tropea <set@users.sf.net> <set@ieee.org>
  Driver: das08_pci
  Description: DAS-08 PCI compatible boards
  Devices: [ComputerBoards] PCI-DAS08 (pci-das08)
  Author: Warren Jasper, ds, Frank Hess
  Updated: Fri, 31 Aug 2012 19:19:06 +0100
  Status: works
  This is the PCI-specific support split off from the das08 driver.
  Configuration Options: not applicable, uses PCI auto config
 The das08 driver needs the board_ptr 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  comedidriversamplc_pc236_common.c
  Common support code for "amplc_pc236" and "amplc_pci236".
  Copyright (C) 2002-2014 MEV Ltd. <https:www.mev.co.uk>
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 2000 David A. Schleef <ds@schleef.org>
  This function is called when an interrupt occurs to check whether
  the interrupt has been marked as enabled and was generated by the
  board.  If so, the function prepares the hardware for the next
  interrupt.
  Returns false if the interrupt should be ignored.
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check it arguments are trivially valid 
 Step 4: fix up any arguments 
 Step 5: check channel list if it exists 
 digital io subdevice (8255) 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  comedidriversdt2814.c
  Hardware driver for Data Translation DT2814
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1998 David A. Schleef <ds@schleef.org>
  Driver: dt2814
  Description: Data Translation DT2814
  Author: ds
  Status: complete
  Devices: [Data Translation] DT2814 (dt2814)
  Configuration options:
  [0] - IO port base address
  [1] - IRQ
  This card has 16 analog inputs multiplexed onto a 12 bit ADC.  There
  is a minimally useful onboard clock.  The base frequency for the
  clock is selected by jumpers, and the clock divider can be selected
  via programmed IO.  Unfortunately, the clock divider can only be
  a power of 10, from 1 to 10^7, of which only 3 or 4 are useful.  In
  addition, the clock does not seem to be very accurate.
  flags
 Arbitrary 10 khz limit 
 Wait until not busy and get status register value. 
		
		  There unread data, or the error flag is set.
		  Read the data register twice to clear the condition.
 clear stale data or error 
 XXX ignores flags 
 ns 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 TRIG_NONE 
 step 4: fix up any arguments 
 clear stale data or error 
		
		  Clear the timed trigger enable bit.
		 
		  Note: turning off timed mode triggers another
		  sample.  This will be mopped up by the calls to
		  dt2814_ai_clear().
 Timed acquisition not enabled.  Nothing to do. 
 Spurious interrupt? 
 Read data or clear error. 
		
		  Disable timed mode.
		 
		  Note: turning off timed mode triggers another
		  sample.  This will be mopped up by the calls to
		  dt2814_ai_clear().
 XXX 
 XXX 
		
		  An extra conversion triggered on termination of an
		  asynchronous command may still be in progress.  Wait for
		  it to finish and clear the data or error status.
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  usbduxsigma.c
  Copyright (C) 2011-2015 Bernd Porr, mail@berndporr.me.uk
  Driver: usbduxsigma
  Description: University of Stirling USB DAQ & INCITE Technology Limited
  Devices: [ITL] USB-DUX-SIGMA (usbduxsigma)
  Author: Bernd Porr <mail@berndporr.me.uk>
  Updated: 20 July 2015
  Status: stable
  I must give credit here to Chris Baugher who
  wrote the driver for AT-MIO-16d. I used some parts of this
  driver. I also must give credits to David Brownell
  who supported me with the USB development.
  Note: the raw data from the AD converter is 24 bit big endian
  anything else is little endian tofrom the dux board
  Revision history:
    0.1: initial version
    0.2: all basic functions implemented, digital IO only for one port
    0.3: proper vendor ID and driver name
    0.4: fixed DA voltage range
    0.5: various bug fixes, health check at startup
    0.6: corrected wrong input range
    0.7: rewrite code that urb->interval is always 1
 timeout for the USB-transfer in ms
 constants for "firmware" upload and download 
 internal addresses of the 8051 processor 
 300Hz max frequ under PWM 
 Default PWM frequency 
 Number of channels (16 AD and offset)
 Size of one AD value 
  Size of the async input-buffer IN BYTES, the DIO state is transmitted
  as the first byte.
 16 bytes. 
 Number of DA channels 
 size of one value for the DA converter: channel and value 
  Size of the output-buffer in bytes
  Actually only the first 4 triplets are used but for the
  high speed mode we need to pad it to 8 (microframes).
  Size of the buffer for the dux commands: just now max size is determined
  by the analogue out + command byte + panic bytes...
 Number of in-URBs which receive the data: min=2 
 Number of out-URBs which send the data: min=2 
 Number of in-URBs which receive the data: min=5 
 must have more buffers due to buggy USB ctr 
 Number of out-URBs which send the data: min=5 
 must have more buffers due to buggy USB ctr 
 number of retries to get the right dux command 
 bulk transfer commands to usbduxsigma 
 actual number of in-buffers 
 actual number of out-buffers 
 ISO-transfer handling: buffers 
 pwm-transfer handling 
 PWM period 
 PWM internal delay for the GPIF in the FX2 
 size of the PWM buffer which holds the bit pattern 
 input buffer for the ISO-transfer 
 input buffer for single insn 
 time between samples in units of the timer 
 counter between acquisitions 
 interval in framesuframes 
 commands 
 unlink only if it is really running 
			
			  Get the data from the USB bus and hand it over
			  to comedi. Note, first byte is the DIO state.
 strip status byte 
 if command is still running, resubmit urb 
 exit if not running a command, do not resubmit urb 
 copy the result in the transfer buffer 
		
		  error in the ISOchronous data
		  we don't copy the data into the transfer buffer
		  and recycle the last data byte
 happens after an unlink command 
 a real error 
	
	  comedi_handle_events() cannot be used in this driver. The (cancel)
	  operation would unlink the urb.
 unlink only if it is really running 
 transmit data to the USB bus 
 if command is still running, resubmit urb 
 (u)frames 
 exit if not running a command, do not resubmit urb 
 happens after an unlink command 
 a real error 
	
	  comedi_handle_events() cannot be used in this driver. The (cancel)
	  operation would unlink the urb.
 Submit all URBs and start the transfer on the bus 
 in case of a resubmission after an unlink... 
 4kHz 
 2kHz 
 1kHz 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
		
		  In high speed mode microframes are possible.
		  However, during one microframe we can roughly
		  sample two channels. Thus, the more channels
		  are in the channel list the more time we need.
 full speed 
 1kHz scans every USB frame 
 TRIG_NONE 
 Step 4: fix up any arguments 
  creates the ADC command for the MAX1271
  range is the range value from comedi
	
	  This is only reached if the data has been requested a
	  couple of times and the command was not received.
		
		  every 2 channels get a time window of 125us. Thus, if we
		  sample all 16 channels we need 1ms. If we sample only one
		  channel we need only 125us
 interval always 1ms 
 num channels per time step 
 CONFIG0 
 CONFIG1: 23kHz sample, delay 0us 
 CONFIG3: diff. channels off 
 enable this acquisition operation 
 TRIG_INT 
 Mode 0 is used to get a single conversion on demand 
 CONFIG0: chopper on 
 CONFIG1: 2kHz sampling rate 
 CONFIG3: diff. channels off 
 adc commands 
 32 bits big endian from the AD converter 
 strip status byte 
 num channels 
 value 
 channel number 
 Step 1 : check if triggers are trivially valid 
	
	  For now, always use "scan" timing with all channels updated at once
	  (cmd->scan_begin_src == TRIG_TIMER, cmd->convert_src == TRIG_NOW).
	 
	  In a future version, "convert" timing with channels updated
	  indivually may be supported in high speed mode
	  (cmd->scan_begin_src == TRIG_FOLLOW, cmd->convert_src == TRIG_TIMER).
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 TRIG_NONE 
 Step 4: fix up any arguments 
	
	  For now, only "scan" timing is supported.  A future version may
	  support "convert" timing in high speed mode.
	 
	  Timing of the scan: every 1ms all channels updated at once.
 enable this acquisition operation 
 TRIG_INT 
	
	  We don't tell the firmware here as it would take 8 frames
	  to submit the information. We do it in the (insn_bits).
 Always update the hardware. See the (insn_config). 
 unlink only if it is really running 
 success 
 happens after an unlink command 
 wo unlink 
 a real error 
 wo unlink 
 wo unlink 
 in case of a resubmission after an unlink... 
 DIO bit for the PWM data 
 DIO bit for the sign 
	
	  It doesn't make sense to support more than one value here
	  because it would just overwrite the PWM buffer.
	
	  The sign is set via a special INSN only, this gives us 8 bits
	  for normal operation, sign is 0 by default.
		
		  if not zero the PWM is limited to a certain time which is
		  not supported here
		
		  data[1] = value
		  data[2] = sign (for a relay)
 values are not kept in this driver, nothing to return 
 ADC zero 
 ADC offset 
 VCC 
 temperature 
 gain 
 ref 
 CONFIG0 
 CONFIG1: 2kHz sampling rate 
 CONFIG3: diff. channels off 
 32 bits big endian from the AD converter 
 strip status byte 
 we generate a local buffer for the firmware 
 we need a malloc'ed buffer for usb_control_msg() 
 stop the current firmware on the device 
 7f92 to one 
 upload the new firmware to the device 
 start the new firmware on the device 
 7f92 to zero 
 one frame: 1ms 
 will be filled later with a pointer to the comedi-device 
 and ONLY then the urb should be submitted 
 one frame: 1ms 
 will be filled later with a pointer to the comedi-device 
 and ONLY then the urb should be submitted 
 (u)frames 
 setting to alternate setting 3: enabling iso ep and bulk ep. 
 Analog Input subdevice 
 Analog Output subdevice 
 Digital IO subdevice 
 Timer  pwm subdevice 
 force unlink all urbs 
 SPDX-License-Identifier: GPL-2.0+
  pcl726.c
  Comedi driver for 612-Channel DA Output and DIO cards
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1998 David A. Schleef <ds@schleef.org>
  Driver: pcl726
  Description: Advantech PCL-726 & compatibles
  Author: David A. Schleef <ds@schleef.org>
  Status: untested
  Devices: [Advantech] PCL-726 (pcl726), PCL-727 (pcl727), PCL-728 (pcl728),
    [ADLink] ACL-6126 (acl6126), ACL-6128 (acl6128)
  Configuration Options:
    [0]  - IO Base
    [1]  - IRQ (ACL-6126 only)
    [2]  - DA output range for channel 0
    [3]  - DA output range for channel 1
  Boards with > 2 analog output channels:
    [4]  - DA output range for channel 2
    [5]  - DA output range for channel 3
    [6]  - DA output range for channel 4
    [7]  - DA output range for channel 5
  Boards with > 6 analog output channels:
    [8]  - DA output range for channel 6
    [9]  - DA output range for channel 7
    [10] - DA output range for channel 8
    [11] - DA output range for channel 9
    [12] - DA output range for channel 10
    [13] - DA output range for channel 11
  For PCL-726 the DA output ranges are:
    0: 0-5V, 1: 0-10V, 2: +-5V, 3: +-10V, 4: 4-20mA, 5: unknown
  For PCL-727:
    0: 0-5V, 1: 0-10V, 2: +-5V, 3: 4-20mA
  For PCL-728 and ACL-6128:
    0: 0-5V, 1: 0-10V, 2: +-5V, 3: +-10V, 4: 4-20mA, 5: 0-20mA
  For ACL-6126:
    0: 0-5V, 1: 0-10V, 2: +-5V, 3: +-10V, 4: 4-20mA
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 Step 4: fix up any arguments 
 Step 5: check channel list if it exists 
 bipolar data to the DAC is two's complement 
 order is important, MSB then LSB 
	
	  Hook up the external trigger source interrupt only if the
	  user config option is valid and the board supports interrupts.
 External trigger source is from Pin-17 of CN3 
 setup the per-channel analog output range_table_list 
 Analog Output subdevice 
 Digital Input subdevice 
 Digital Output subdevice 
 Digital Input subdevice - Interrupt support 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  Hardware driver for NI 660x devices
  Driver: ni_660x
  Description: National Instruments 660x countertimer boards
  Devices: [National Instruments] PCI-6601 (ni_660x), PCI-6602, PXI-6602,
    PCI-6608, PXI-6608, PCI-6624, PXI-6624
  Author: J.P. Mellor <jpmellor@rose-hulman.edu>,
    Herman.Bruyninckx@mech.kuleuven.ac.be,
    Wim.Meeussen@mech.kuleuven.ac.be,
    Klaas.Gadeyne@mech.kuleuven.ac.be,
    Frank Mori Hess <fmhess@users.sourceforge.net>
  Updated: Mon, 16 Jan 2017 14:00:43 +0000
  Status: experimental
  Encoders work.  PulseGeneration (both single pulse and pulse train)
  works.  Buffered commands work for input but not output.
  References:
  DAQ 660x Register-Level Programmer Manual  (NI 370505A-01)
  DAQ 66016602 User Manual (NI 322137B-01)
 See Register-Level Programmer Manual page 3.1 
 see enum ni_gpct_register 
  Offset from base address from GPCT chip 
 2 or 4 bytes 
 write 
 read 
 write 
 read 
 read 
 write 
 read 
 write 
 read 
 read 
 write 
 write 
 read 
 read 
 write 
 read 
 write 
 read 
 write 
 read 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 read 
 write 
 read 
 write 
 read 
 write 
 read 
 read 
 write 
 write 
 read 
 read 
 read 
 read 
 write 
 read 
 write 
 write 
 read 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 write 
 read 
 write 
 read 
 read 
 write 
 write 
 read 
 write 
 write 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 readwrite 
 total number of TIO chips 
 there are only up to 3 dma channels, but the register layout allows for 4 
 protects mite channel requestrelease 
 prevents races between interrupt and comedi_poll 
	
	  See P. 3.5 of the Register-Level Programming manual.
	  The CounterSwap bit has to be set on the second chip,
	  otherwise it will try to use the same pins as the
	  first chip.
 make sure dev->attached is checked before doing anything else 
 lock to avoid race with comedi_poll 
 lock to avoid race with comedi_poll 
	
	  There are 40 channels in this subdevice but only 32 are usable
	  as DIO. The shift adjusts the maskbits to account for the base
	  channel in insn->chanspec. The state update can then be handled
	  normally for the 32 usable channels.
	
	  Return the input channels, shifted back to account for the base
	  channel.
 allow new and old names of pfi channels to work. 
 counters 4-7 pfi channels 
 counters 0-3 pfi channels 
 set the pfi channel to high-z on the inactive chip 
 high-z 
 set the pfi channel output on the active chip 
 allow new and old names of pfi channels to work. 
 reset the output to currently assigned output value 
 set pin to high-z; do not change currently assigned route 
 allow new and old names of pfi channels to work. 
 allow new and old names of pfi channels to work. 
 allow new and old names of pfi channels to work. 
 allow new and old names of pfi channels to work. 
  Retrieves the current source of the output selector for the given
  destination.  If the terminal for the destination is not already configured
  as an output, this function returns -EINVAL as error.
  Return: The register value of the destination output selector;
 	   -EINVAL if terminal is not configured for output.
		
		  The following can be enabled when RTSI routing info is
		  determined (not currently documented):
		  if (ni_get_rtsi_direction(dev, dest) == COMEDI_OUTPUT) {
		 	reg = ni_get_rtsi_routing(dev, dest);
		 	if (reg == NI_RTSI_OUTPUT_RGOUT0) {
		 		dest = NI_RGOUT0;  prepare for lookup below 
		 		reg = get_rgout0_reg(dev);
		 	} else if (reg >= NI_RTSI_OUTPUT_RTSI_BRD(0) &&
		 		   reg <= NI_RTSI_OUTPUT_RTSI_BRD(3)) {
		 		const int i = reg - NI_RTSI_OUTPUT_RTSI_BRD(0);
		 		dest = NI_RTSI_BRD(i);  prepare for lookup 
		 		reg = get_ith_rtsi_brd_reg(i, dev);
		 	}
		  }
  Test a route:
  Return: -1 if not connectible;
 	    0 if connectible and not connected;
 	    1 if connectible and connected.
 Connect the actual route.  
 route is not valid 
 destination mux is already busy. complain, don't overwrite 
 The route is valid and available. Now connect... 
		
		  set routing and then direction so that the output does not
		  first get generated with the wrong pin
		
		  The following can be enabled when RTSI routing info is
		  determined (not currently documented):
		  if (reg == NI_RTSI_OUTPUT_RGOUT0) {
		 	int ret = incr_rgout0_src_use(src, dev);
		 	if (ret < 0)
		 		return ret;
		  } else if (ni_rtsi_route_requires_mux(reg)) {
		 	 Attempt to allocate and  route (src->brd) 
		 	int brd = incr_rtsi_brd_src_use(src, dev);
		 	if (brd < 0)
		 		return brd;
		 	 Now lookup the register value for (brd->dest) 
		 	reg = ni_lookup_route_register(brd, CR_CHAN(dest),
		 				       &devpriv->routing_tables);
		  }
		  ni_set_rtsi_direction(dev, dest, COMEDI_OUTPUT);
		  ni_set_rtsi_routing(dev, dest, reg);
		
		  we are adding back the channel modifier info to set
		  invertedge info passed by the user
 route is not valid 
 cannot disconnect something not connected 
 The route is valid and is connected.  Now disconnect... 
 set the pfi to high impedance, and disconnect 
		
		  The following can be enabled when RTSI routing info is
		  determined (not currently documented):
		  if (reg == NI_RTSI_OUTPUT_RGOUT0) {
		 	int ret = decr_rgout0_src_use(src, dev);
		 	if (ret < 0)
		 		return ret;
		  } else if (ni_rtsi_route_requires_mux(reg)) {
		 	 find which RTSI_BRD line is source for rtsi pin 
		 	int brd = ni_find_route_source(
		 		ni_get_rtsi_routing(dev, dest), CR_CHAN(dest),
		 		&devpriv->routing_tables);
		 	if (brd < 0)
		 		return brd;
		 	 decrementdisconnect RTSI_BRD line from source 
		 	decr_rtsi_brd_src_use(src, brd, dev);
		  }
		   set rtsi output selector to default state 
		  reg = default_rtsi_routing[CR_CHAN(dest) - TRIGGER_LINE(0)];
		  ni_set_rtsi_direction(dev, dest, COMEDI_INPUT);
		  ni_set_rtsi_routing(dev, dest, reg);
	
	  This case is already handled one level up.
	  case INSN_DEVICE_CONFIG_GET_ROUTES:
	
	  We use the ioconfig registers to control dio direction, so zero
	  output enables in stc dio control reg.
 init dma configuration register 
 init ioconfig registers 
 use win1 
 prepare the device for globally-named routes. 
		
		  only(?) assign insn_device_config if we have global names for
		  this device.
 Old GENERAL-PURPOSE COUNTERTIME (GPCT) subdevice, no longer used 
	
	  Digital IO subdevice
	 
	  There are 40 channels but only the first 32 can be digital IOs.
	  The last 8 are dedicated to counters 0 and 1.
	 
	  Counter 0-3 signals are from the first TIO chip.
	  Counter 4-7 signals are from the second TIO chip.
	 
	  Comedi	External
	  PFI Chan	DIO Chan        Counter Signal
	  -------	--------	--------------
	      0	    0
	      1	    1
	      2	    2
	      3	    3
	      4	    4
	      5	    5
	      6	    6
	      7	    7
	      8	    8		CTR 7 OUT
	      9	    9		CTR 7 AUX
	     10	   10		CTR 7 GATE
	     11	   11		CTR 7 SOURCE
	     12	   12		CTR 6 OUT
	     13	   13		CTR 6 AUX
	     14	   14		CTR 6 GATE
	     15	   15		CTR 6 SOURCE
	     16	   16		CTR 5 OUT
	     17	   17		CTR 5 AUX
	     18	   18		CTR 5 GATE
	     19	   19		CTR 5 SOURCE
	     20	   20		CTR 4 OUT
	     21	   21		CTR 4 AUX
	     22	   22		CTR 4 GATE
	     23	   23		CTR 4 SOURCE
	     24	   24		CTR 3 OUT
	     25	   25		CTR 3 AUX
	     26	   26		CTR 3 GATE
	     27	   27		CTR 3 SOURCE
	     28	   28		CTR 2 OUT
	     29	   29		CTR 2 AUX
	     30	   30		CTR 2 GATE
	     31	   31		CTR 2 SOURCE
	     32			CTR 1 OUT
	     33			CTR 1 AUX
	     34			CTR 1 GATE
	     35			CTR 1 SOURCE
	     36			CTR 0 OUT
	     37			CTR 0 AUX
	     38			CTR 0 GATE
	     39			CTR 0 SOURCE
	 
	   Default the DIO channels as:
	     chan 0-7:  DIO inputs
	     chan 8-39: counter signal inputs
 high-z 
 Counter subdevices (4 NI TIO General Purpose Counters per chip) 
	
	  To be safe, set counterswap bits on tio chips after all the counter
	  outputs have been set to high impedance mode.
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  ni_6527.c
  Comedi driver for National Instruments PCI-6527
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 1999,2002,2003 David A. Schleef <ds@schleef.org>
  Driver: ni_6527
  Description: National Instruments 6527
  Devices: [National Instruments] PCI-6527 (pci-6527), PXI-6527 (pxi-6527)
  Author: David A. Schleef <ds@schleef.org>
  Updated: Sat, 25 Jan 2003 13:24:40 -0800
  Status: works
  Configuration Options: not applicable, uses PCI auto config
  PCI BAR1 - Register memory map
  Manuals (available from ftp:ftp.natinst.comsupportmanuals)
 	370106b.pdf	6527 Register Level Programmer Manual
		
		  The deglitch filter interval is specified in nanoseconds.
		  The hardware supports intervals in 200ns increments. Round
		  the user values up and return the actual interval.
 Outputs are inverted 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 Step 4: fix up any arguments 
 Step 5: check channel list if it exists 
 preserve rising-edge detection channels 
 preserve falling-edge detection channels 
 update rising-edge detection channels 
 update falling-edge detection channels 
 check_insn_config_length() does not check this instruction 
 check trigger number 
 check digital trigger operation 
 check shift amount 
 disable deglitch filters on all channels 
 disable edge detection 
 make sure this is actually a 6527 device 
 Digital Input subdevice 
 Digital Output subdevice 
 Edge detection interrupt subdevice 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  usbdux.c
  Copyright (C) 2003-2014 Bernd Porr, mail@berndporr.me.uk
  Driver: usbdux
  Description: University of Stirling USB DAQ & INCITE Technology Limited
  Devices: [ITL] USB-DUX (usbdux)
  Author: Bernd Porr <mail@berndporr.me.uk>
  Updated: 10 Oct 2014
  Status: Stable
  Connection scheme for the counter at the digital port:
  0=CLK0, 1=UPDOWN0, 2=RESET0, 4=CLK1, 5=UPDOWN1, 6=RESET1.
  The sampling rate of the counter is approximately 500Hz.
  Note that under USB2.0 the length of the channel list determines
  the max sampling rate. If you sample only one channel you get 8kHz
  sampling rate. If you sample two channels you get 4kHz and so on.
  I must give credit here to Chris Baugher who
  wrote the driver for AT-MIO-16d. I used some parts of this
  driver. I also must give credits to David Brownell
  who supported me with the USB development.
  Bernd Porr
  Revision history:
  0.94: DA output should work now with any channel list combinations
  0.95: .owner commented out for kernel vers below 2.4.19
        sanity checks in aiao_cmd
  0.96: trying to get it working with 2.6, moved all memory alloc to comedi's
        attach final USB IDs
        moved memory allocation completely to the corresponding comedi
        functions firmware upload is by fxload and no longer by comedi (due to
        enumeration)
  0.97: USB IDs received, adjusted table
  0.98: SMP, locking, memory alloc: moved all usb memory alloc
        to the usb subsystem and moved all comedi related memory
        alloc to comedi.
        | kernel | registration | usbdux-usb | usbdux-comedi | comedi |
  0.99: USB 2.0: changed protocol to isochronous transfer
                 IRQ transfer is too buggy and too risky in 2.0
                 for the high speed ISO transfer is now a working version
                 available
  0.99b: Increased the iso transfer buffer for high sp.to 10 buffers. Some VIA
         chipsets miss out IRQs. Deeper buffering is needed.
  1.00: full USB 2.0 support for the AD converter. Now: max 8kHz sampling
        rate.
        Firmware vers 1.00 is needed for this.
        Two 16 bit updownreset counter with a sampling rate of 1kHz
        And loads of cleaning up, in particular streamlining the
        bulk transfers.
  1.1:  moved EP4 transfers to EP1 to make space for a PWM output on EP4
  1.2:  added PWM support via EP4
  2.0:  PWM seems to be stable and is not interfering with the other functions
  2.1:  changed PWM API
  2.2:  added firmware kernel request to fix an udev problem
  2.3:  corrected a bug in bulk timeouts which were far too short
  2.4:  fixed a bug which causes the driver to hang when it ran out of data.
        Thanks to Jan-Matthias Braun and Ian to spot the bug and fix it.
 constants for firmware upload and download 
 usbdux bulk transfer commands 
 timeout for the USB-transfer in ms 
 300Hz max frequ under PWM 
 Default PWM frequency 
 Size of one AD value 
  Size of the input-buffer IN BYTES
  Always multiple of 8 for 8 microframes which is needed in the highspeed mode
 16 bytes. 
 size of one value for the DA converter: channel and value 
  Size of the output-buffer in bytes
  Actually only the first 4 triplets are used but for the
  high speed mode we need to pad it to 8 (microframes).
  Size of the buffer for the dux commands: just now max size is determined
  by the analogue out + command byte + panic bytes...
 Number of in-URBs which receive the data: min=2 
 Number of out-URBs which send the data: min=2 
 Number of in-URBs which receive the data: min=5 
 must have more buffers due to buggy USB ctr 
 Number of out-URBs which send the data: min=5 
 must have more buffers due to buggy USB ctr 
 number of retries to get the right dux command 
 actual number of in-buffers 
 actual number of out-buffers 
 ISO-transfer handling: buffers 
 pwm-transfer handling 
 PWM period 
 PWM internal delay for the GPIF in the FX2 
 size of the PWM buffer which holds the bit pattern 
 input buffer for the ISO-transfer 
 input buffer for single insn 
 time between samples in units of the timer 
 counter between aquisitions 
 interval in framesuframes 
 commands 
 prevent other CPUs from submitting new commands just now 
 unlink only if the urb really has been submitted 
 get the data from the USB bus and hand it over to comedi 
 bipolar data is two's-complement 
 transfer data 
 if command is still running, resubmit urb 
 exit if not running a command, do not resubmit urb 
 copy the result in the transfer buffer 
		
		  error in the ISOchronous data
		  we don't copy the data into the transfer buffer
		  and recycle the last data byte
 after an unlink command, unplug, ... etc 
 a real error 
	
	  comedi_handle_events() cannot be used in this driver. The (cancel)
	  operation would unlink the urb.
 prevent other CPUs from submitting a command just now 
 unlink only if it is really running 
 transmit data to the USB bus 
 pointer to the DA 
 if command is still running, resubmit urb for BULK transfer 
 uframes 
 frames 
 exit if not running a command, do not resubmit urb 
 after an unlink command, unplug, ... etc 
 a real error 
	
	  comedi_handle_events() cannot be used in this driver. The (cancel)
	  operation would unlink the urb.
 Submit all URBs and start the transfer on the bus 
 in case of a resubmission after an unlink... 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 internal trigger 
 full speed does 1kHz scans every USB frame 
			
			  In high speed mode microframes are possible.
			  However, during one microframe we can roughly
			  sample one channel. Thus, the more channels
			  are in the channel list the more time we need.
 find a power of 2 for the number of channels 
 calc the real sampling rate with the rounding errors 
 TRIG_NONE 
  creates the ADC command for the MAX1271
  range is the range value from comedi
 command not received 
 block other CPUs from starting an ai_cmd 
		
		  every channel gets a time window of 125us. Thus, if we
		  sample all 8 channels we need 1ms. If we sample only one
		  channel we need only 125us
 find a power of 2 for the interval 
 interval always 1ms 
 enable this acquisition operation 
 fixme: unlink here?? 
 TRIG_INT 
 don't enable the acquision operation 
 wait for an internal signal 
 Mode 0 is used to get a single conversion on demand 
 set command for the first channel 
 adc commands 
 bipolar data is two's-complement 
 number of channels: 1 
 channel number 
 one 16 bit value 
 Step 1 : check if triggers are trivially valid 
 (devpriv->high_speed) 
 the sampling rate is set by the coversion rate 
 start a new scan (output at once) with a timer 
 (devpriv->high_speed) 
		
		  in usb-2.0 only one conversion it transmitted
		  but with 8kHzn
		
		  all conversion events happen simultaneously with
		  a rate of 1kHzn
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 internal trigger 
 not used now, is for later use 
 TRIG_NONE 
 we count in steps of 1ms (125us) 
 125us mode not used yet 
 (devpriv->high_speed) 
 125us 
 timing of the conversion itself: every 125 us 
 1ms 
 timing of the scan: we get all channels at once 
 enable this acquisition operation 
 fixme: unlink here?? 
 TRIG_INT 
 submit the urbs later 
 wait for an internal signal 
	
	  We don't tell the firmware here as it would take 8 frames
	  to submit the information. We do it in the insn_bits.
 Always update the hardware. See the (insn_config). 
	
	  This command also tells the firmware to return
	  the digital input lines.
 nothing to do so far 
 unlink only if it is really running 
 success 
		
		  after an unlink command, unplug, ... etc
		  no unlink needed here. Already shutting down.
 a real error 
 are we actually running? 
 don't do an unlink here 
 in case of a resubmission after an unlink... 
 initialise the buffer 
 DIO bit for the PWM data 
 DIO bit for the sign 
	
	  It doesn't make sense to support more than one value here
	  because it would just overwrite the PWM buffer.
	
	  The sign is set via a special INSN only, this gives us 8 bits
	  for normal operation, sign is 0 by default.
		
		  if not zero the PWM is limited to a certain time which is
		  not supported here
		
		  data[1] = value
		  data[2] = sign (for a relay)
 values are not kept in this driver, nothing to return here 
 we generate a local buffer for the firmware 
 we need a malloc'ed buffer for usb_control_msg() 
 stop the current firmware on the device 
 7f92 to one 
 upload the new firmware to the device 
 start the new firmware on the device 
 7f92 to zero 
 one frame: 1ms 
 one frame: 1ms 
 uframes 
 frames 
 pwm 
 max bulk ep size in high speed 
 setting to alternate setting 3: enabling iso ep and bulk ep. 
 Analog Input subdevice 
 Analog Output subdevice 
 Digital IO subdevice 
 Counter subdevice 
 PWM subdevice 
 force unlink all urbs 
 SPDX-License-Identifier: GPL-2.0+
  Driver for National Instruments daqcard-1200 boards
  Copyright (C) 2001, 2002, 2003 Frank Mori Hess <fmhess@users.sourceforge.net>
  PCMCIA crap is adapted from dummy_cs.c 1.31 20010824 12:13:13
  from the pcmcia package.
  The initial developer of the pcmcia dummy_cs.c code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.
  Driver: ni_labpc_cs
  Description: National Instruments Lab-PC (& compatibles)
  Author: Frank Mori Hess <fmhess@users.sourceforge.net>
  Devices: [National Instruments] DAQCard-1200 (daqcard-1200)
  Status: works
  Thanks go to Fredrik Lingvall for much testing and perseverance in
  helping to debug daqcard-1200 support.
  The 1200 series boards have onboard calibration dacs for correcting
  analog inputoutput offsets and gains. The proper settings for these
  caldacs are stored on the board's eeprom. To read the caldac values
  from the eeprom and store them into a file that can be then be used by
  comedilib, use the comedi_calibrate program.
  Configuration options: none
  The daqcard-1200 has quirky chanlist requirements when scanning multiple
  channels. Multiple channel scan sequence must start at highest channel,
  then decrement down to channel 0.  Chanlists consisting of all one channel
  are also legal, and allow you to pace conversions in bursts.
  NI manuals:
    340988a (daqcard-1200)
 The ni_labpc driver needs the board_ptr 
 daqcard-1200 
 SPDX-License-Identifier: GPL-2.0+
  mpc624.c
  Hardware driver for a Microsys inc. MPC-624 PC104 board
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 2000 David A. Schleef <ds@schleef.org>
  Driver: mpc624
  Description: Microsys MPC-624 PC104 board
  Devices: [Microsys] MPC-624 (mpc624)
  Author: Stanislaw Raczynski <sraczynski@op.pl>
  Updated: Thu, 15 Sep 2005 12:01:18 +0200
  Status: working
  The Microsys MPC-624 board is based on the LTC2440 24-bit sigma-delta
  ADC chip.
  Subdevices supported by the driver:
  - Analog In:   supported
  - Digital IO: not supported
  - LEDs:        not supported
  - EEPROM:      not supported
  Configuration Options:
    [0] - IO base address
    [1] - conversion rate
 	   Conversion rate   RMS noise	Effective Number Of Bits
 	   0	3.52kHz		23uV		17
 	   1	1.76kHz		3.5uV		20
 	   2	880Hz		2uV		21.3
 	   3	440Hz		1.4uV		21.8
 	   4	220Hz		1uV		22.4
 	   5	110Hz		750uV		22.9
 	   6	55Hz		510nV		23.4
 	   7	27.5Hz		375nV		24
 	   8	13.75Hz		250nV		24.4
 	   9	6.875Hz		200nV		24.6
    [2] - voltage range
 	   0	-1.01V .. +1.01V
 	   1	-10.1V .. +10.1V
 Offsets of different ports 
 not used 
 Gain, Mux, Channel of ADC 
 readwrite tofrom ADC 
 readwrite tofrom serial EEPROM via I2C 
 write to LEDs 
 readwrite tofrom digital IO ports 
 IRQ masking enabledisable 
 Register bits' names 
 32-bit output value bits' names 
 SDI SpeedResolution Programming bits 
 -------------------------------------------------------------------------- 
 BIP_RANGE(1.01)  this is correct, 
  but my MPC-624 actually seems to have a range of 2.02 
 BIP_RANGE(10.1)   this is correct, 
  but my MPC-624 actually seems to have a range of 20.2 
 Start reading data 
 Set the clock low 
 Set the ADSDI line for the next bit (send to MPC624) 
 Set the clock high 
 Read ADSDO on high clock (receive from MPC624) 
	
	  Received 32-bit long value consist of:
	 	31: EOC - (End Of Transmission) bit - should be 0
	 	30: DMY - (Dummy) bit - should be 0
	 	29: SIG - (Sign) bit - 1 if positive, 0 if negative
	 	28: MSB - (Most Significant Bit) - the first bit of the
	 					   conversion result
	 	....
	 	05: LSB - (Least Significant Bit)- the last bit of the
	 					   conversion result
	 	04-00: sub-LSB - sub-LSBs are basically noise, but when
	 			 averaged properly, they can increase
	 			 conversion precision up to 29 bits;
	 			 they can be discarded without loss of
	 			 resolution.
		
		  Voltage is positive
		 
		  comedi operates on unsigned numbers, so mask off EOC
		  and DMY and don't clear the SGN bit
		
		  The voltage is negative
		 
		  data_in contains a number in 30-bit two's complement
		  code and we must deal with it
 clear EOC and DMY bits 
	
	   WARNING:
	   We always write 0 to GNSWA bit, so the channel range is +-10.1Vdc
  Trigger the conversion 
  Wait for the conversion to end 
 Analog Input subdevice 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  comedidriversni_usb6501.c
  Comedi driver for National Instruments USB-6501
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 2014 Luca Ellero <luca.ellero@brickedbrain.com>
  Driver: ni_usb6501
  Description: National Instruments USB-6501 module
  Devices: [National Instruments] USB-6501 (ni_usb6501)
  Author: Luca Ellero <luca.ellero@brickedbrain.com>
  Updated: 8 Sep 2014
  Status: works
  Configuration Options:
  none
  NI-6501 - USB PROTOCOL DESCRIPTION
  Every command is composed by two USB packets:
 	- request (out)
 	- response (in)
  Every packet is at least 12 bytes long, here is the meaning of
  every field (all values are hex):
 	byte 0 is always 00
 	byte 1 is always 01
 	byte 2 is always 00
 	byte 3 is the total packet length
 	byte 4 is always 00
 	byte 5 is the total packet length - 4
 	byte 6 is always 01
 	byte 7 is the command
 	byte 8 is 02 (request) or 00 (response)
 	byte 9 is 00 (response) or 10 (port request) or 20 (counter request)
 	byte 10 is always 00
 	byte 11 is 00 (request) or 02 (response)
  PORT PACKETS
 	CMD: 0xE READ_PORT
 	REQ: 00 01 00 10 00 0C 01 0E 02 10 00 00 00 03 <PORT> 00
 	RES: 00 01 00 10 00 0C 01 00 00 00 00 02 00 03 <BMAP> 00
 	CMD: 0xF WRITE_PORT
 	REQ: 00 01 00 14 00 10 01 0F 02 10 00 00 00 03 <PORT> 00 03 <BMAP> 00 00
 	RES: 00 01 00 0C 00 08 01 00 00 00 00 02
 	CMD: 0x12 SET_PORT_DIR (0 = input, 1 = output)
 	REQ: 00 01 00 18 00 14 01 12 02 10 00 00
 	     00 05 <PORT 0> <PORT 1> <PORT 2> 00 05 00 00 00 00 00
 	RES: 00 01 00 0C 00 08 01 00 00 00 00 02
  COUNTER PACKETS
 	CMD 0x9: START_COUNTER
 	REQ: 00 01 00 0C 00 08 01 09 02 20 00 00
 	RES: 00 01 00 0C 00 08 01 00 00 00 00 02
 	CMD 0xC: STOP_COUNTER
 	REQ: 00 01 00 0C 00 08 01 0C 02 20 00 00
 	RES: 00 01 00 0C 00 08 01 00 00 00 00 02
 	CMD 0xE: READ_COUNTER
 	REQ: 00 01 00 0C 00 08 01 0E 02 20 00 00
 	RES: 00 01 00 10 00 0C 01 00 00 00 00 02 <u32 counter value, Big Endian>
 	CMD 0xF: WRITE_COUNTER
 	REQ: 00 01 00 10 00 0C 01 0F 02 20 00 00 <u32 counter value, Big Endian>
 	RES: 00 01 00 0C 00 08 01 00 00 00 00 02
 	Please  visit https:www.brickedbrain.com if you need
 	additional information or have any questions.
 Port request packets 
 Counter request packets 
 Response packets 
 Largest supported packets 
 Check if results are valid 
 mask bitmap for comparing 
 Setup tx packet: bytes 12,13,14,15 hold the 
 u32 counter value (Big Endian)	       
 Check if results are valid 
 Read counter value: bytes 12,13,14,15 of rx packet 
 hold the u32 counter value (Big Endian)	      
 mask counter value for comparing 
 Digital InputOutput subdevice 
 Counter subdevice 
 SPDX-License-Identifier: GPL-2.0+
  vmk80xx.c
  Velleman USB Board Low-Level Driver
  Copyright (C) 2009 Manuel Gebele <forensixs@gmx.de>, Germany
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 2000 David A. Schleef <ds@schleef.org>
  Driver: vmk80xx
  Description: Velleman USB Board Low-Level Driver
  Devices: [Velleman] K8055 (K8055VM110), K8061 (K8061VM140),
    VM110 (K8055VM110), VM140 (K8061VM140)
  Author: Manuel Gebele <forensixs@gmx.de>
  Updated: Sun, 10 May 2009 11:14:59 +0200
  Status: works
  Supports:
   - analog input
   - analog output
   - digital input
   - digital output
   - counter
   - pwm
 !non-active! 
 !non-active! 
 !non-active! 
 TODO: completely pointless? 
 TODO: completely pointless? 
 internal usage 
 TODO: not implemented yet 
 internal usage 
 ms 
 unknown, device is not writeable 
 set outputs to known state as we cannot read them 
 VMK8061_MODEL 
 NOTE: avoid compiler warnings 
 VMK8055_MODEL 
 VMK8061_MODEL 
 TODO: Prevent overflows 
	
	  The followin piece of code was translated from the inline
	  assembler code in the DLL source code.
	 
	  asm
	    mov eax, k  ; k is the value (data[n])
	    and al, 03h ; al are the lower 8 bits of eax
	    mov lo, al  ; lo is the low part (tx_buf[reg[0]])
	    mov eax, k
	    shr eax, 2  ; right shift eax register by 2
	    mov hi, al  ; hi is the high part (tx_buf[reg[1]])
	  end;
 Analog input subdevice 
 Analog output subdevice 
 Digital input subdevice 
 Digital output subdevice 
 Counter subdevice 
 PWM subdevice 
 SPDX-License-Identifier: GPL-2.0+
  Comedi driver for National Instruments AT-A2150 boards
  Copyright (C) 2001, 2002 Frank Mori Hess <fmhess@users.sourceforge.net>
  COMEDI - Linux Control and Measurement Device Interface
  Copyright (C) 2000 David A. Schleef <ds@schleef.org>
  Driver: ni_at_a2150
  Description: National Instruments AT-A2150
  Author: Frank Mori Hess
  Status: works
  Devices: [National Instruments] AT-A2150C (at_a2150c), AT-2150S (at_a2150s)
  Configuration options:
    [0] - IO port base address
    [1] - IRQ (optional, required for timed conversions)
    [2] - DMA (optional, required for timed conversions)
  Yet another driver for obsolete hardware brought to you by Frank Hess.
  Testing and debugging help provided by Dave Andruczyk.
  If you want to ac couple the board's inputs, use AREF_OTHER.
  The only difference in the boards is their master clock frequencies.
  References (from ftp:ftp.natinst.comsupportmanuals):
    320360.pdf  AT-A2150 User Manual
  TODO:
  - analog level triggering
  - TRIG_WAKE_EOS
  size in bytes of dma buffer 
 Registers and bits 
 enable (don't internally ground) channels 0 and 1 
 enable (don't internally ground) channels 2 and 3 
 ac couple channels 0,1 
 ac couple channels 2,3 
 analog power down 
 digital power down 
 trigger config register 
 enable hardware trigger 
 software start aquistion trigger 
 clears fifo + fifo flags 
 read data 
 clear dma terminal count interrupt 
 read only 
 fifo not empty 
 fifo overflow 
 end of acquisition interrupt 
 offset calibration in progress 
 interrupt has occurred 
 dma terminal count interrupt has occurred 
 write only 
 sets dma channel 
 enables dma 
 sets irq level 
 enable fifo interrupts 
 interrupt fifo half full 
 enable interrupt on dma terminal count 
 enables demand mode dma 
 master clock periods, in nanoseconds 
 number of available master clock speeds 
 maximum conversion rate in nanoseconds 
 analog input range 
 enum must match board indices 
 number of data points left to be taken 
 irqdma register bits 
 config register bits 
 interrupt service routine 
	
	  residue is the number of bytes left to be done on the dma
	  transfer.  It should always be zero at this point unless
	  the stop_src is set to external triggering.
 figure out how many points to read 
 figure out how many points will be stored next time 
	
	  There should only be a residue if collection was stopped by having
	  the stop_src set to an external trigger, in which case there
	  will be no more data
 write data point to comedi buffer 
 convert from 2's complement to unsigned coding 
 end of acquisition 
 re-enable dma 
 clear interrupt 
 disable dma on card 
 disable computer's dma 
 clear fifo and reset triggering circuitry 
  sets bits in devpriv->clock_bits to nearest approximation of requested
  period, adjusts requested period to actual timing.
 initialize greatest lower and least upper bounds 
 make sure period is in available range 
 we can multiply period by 1, 2, 4, or 8, using (1 << i) 
 there are a maximum of 4 master clocks 
 temp is the period in nanosec we are evaluating 
 if it is the best match yet 
 if least upper bound is better approximation 
 set clock bits for config register appropriately 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 TRIG_NONE 
 step 4: fix up any arguments 
 Step 5: check channel list if it exists 
 clear fifo and reset triggering circuitry 
 setup chanlist 
 setup acdc coupling 
 setup timing 
 send timing, channel, config bits 
 initialize number of samples remaining 
 set size of transfer to fill in 13 second 
	
	  Clear dma interrupt before enabling it, to try and get rid of
	  that one spurious interrupt that has been happening.
 enable dma on card 
 may need to wait 72 sampling periods if timing was changed 
 setup start triggering 
 decide if we need to wait 72 periods for valid data 
 set trigger source to delay trigger 
 otherwise no delay 
 enable external hardware trigger 
		
		  XXX add support for levelslope start trigger
		  using TRIG_OTHER
 send trigger config bits 
 start acquisition for soft trigger 
 clear fifo and reset triggering circuitry 
 setup chanlist 
 set dc coupling 
 send timing, channel, config bits 
 disable dma on card 
 setup start triggering 
 start acquisition for soft trigger 
	
	  there is a 35.6 sample delay for data to get through the
	  antialias filter
 read data 
 clear fifo and reset triggering circuitry 
	
	  Only IRQs 15, 14, 12-9, and 7-3 are valid.
	  Only DMA channels 7-5 and 3-0 are valid.
 DMA uses 1 buffer 
 an IRQ and DMA are required to support async commands 
 analog input subdevice 
 set card's irq and dma levels 
 reset and sync adc clock circuitry 
 initialize configuration register 
 wait until offset calibration is done, then enable analog inputs 
www.comedi.org");
 SPDX-License-Identifier: GPL-2.0+
  addi_apci_3120.c
  Copyright (C) 2004,2005  ADDI-DATA GmbH for the source code of this module.
 	ADDI-DATA GmbH
 	Dieselstrasse 3
 	D-77833 Ottersweier
 	Tel: +19(0)72239493-0
 	Fax: +49(0)72239493-92
 	http:www.addi-data.com
 	info@addi-data.com
  PCI BAR 0 register map (devpriv->amcc)
  see amcc_s5933.h for register and bit defines
  PCI BAR 1 register map (dev->iobase)
 I8254_MODE0 
 I8254_MODE2 
 I8254_MODE4 
 I8254_MODE5 
  PCI BAR 2 register map (devpriv->addon)
  Board revisions
 70ns = 14.29MHz 
 50ns = 20MHz 
 16-bit interface for AMCC add-on registers 
 AMCC - enable transfer count and reset A2P FIFO 
 Add-On - enable transfer count and reset A2P FIFO 
 AMCC - enable transfers and reset A2P flags 
 Add-On - DMA start address 
 Add-On - Number of acquisitions 
 AMCC - enable write complete (DMA) and set FIFO advance 
 Add-On - enable DMA 
		
		  Must we fill full first buffer? And must we fill
		  full second buffer when first is once filled?
 don't we want wake up every scan? 
 isn't output buff smaller that our DMA buff? 
  There are three timers on the board. They all use the same base
  clock with a fixed prescaler for each timer. The base clock used
  depends on the board version and type.
  APCI-3120 Rev A boards OSC = 14.29MHz base clock (~70ns)
  APCI-3120 Rev B boards OSC = 20MHz base clock (50ns)
  APCI-3001 boards OSC = 20MHz base clock (50ns)
  The prescalers for each timer are:
  Timer 0 CLK = OSC10
  Timer 1 CLK = OSC1000
  Timer 2 CLK = OSC1000
 timer 2 is 24-bits 
 timers 0 and 1 are 16-bits 
 the timers require a minimum divisor of 2 
 a dummy read of APCI3120_CTR0_REG clears the timer 2 interrupt 
 write 16-bit value to timer (lower 16-bits of timer 2) 
 write upper 16-bits to timer 2 
 read 16-bit value from timer (lower 16-bits of timer 2) 
 read upper 16-bits from timer 2 
 set chanlist for scan 
 a dummy read of APCI3120_TIMER_MODE_REG resets the ai FIFO 
 set scan length (PR) and scan start (PA) 
 enable chanlist scanning if necessary 
 switch DMA buffers for next interrupt 
 restart DMA if not using double buffering 
		
		  for safety...
		  timer2 interrupts are not enabled in the driver
 AMCC- Clear write complete interrupt (DMA) 
 do some data transfer 
 set default mode bits 
 AMCC- Clear write complete interrupt (DMA) 
 load chanlist for command scan 
		
		  Timer 1 is used in MODE2 (rate generator) to set the
		  start time for each scan.
	
	  Timer 0 is used in MODE2 (rate generator) to set the conversion
	  time for each acquisition.
 set mode to enable acquisition 
 Step 1 : check if triggers are trivially valid 
 Step 2a : make sure trigger sources are unique 
 Step 2b : and mutually compatible 
 Step 3: check if arguments are trivially valid 
 Test Delay timing 
 minimum conversion time per sample is 10us 
  TRIG_NONE 
 Step 4: fix up any arguments 
 scan begin must be larger than the scan time 
 Step 5: check channel list if it exists 
 Add-On - disable DMA 
 Add-On - disable bus master 
 AMCC - disable bus master 
 disable all counters, ext trigger, and reset scan 
 DISABLE_ALL_INTERRUPT 
 set mode for AD conversions by software trigger with timer 0 
 load chanlist for single channel scan 
	
	  Timer 0 is used in MODE4 (software triggered strobe) to set the
	  conversion time for each acquisition. Each conversion is triggered
	  when the divisor is written to the timer, The conversion is done
	  when the EOC bit in the status register is '0'.
 fixed conversion time of 10 us 
 trigger conversion 
 disable all interrupt sources 
 disable all counters, ext trigger, and reset scan 
 clear interrupt status 
 Analog Input subdevice 
 Analog Output subdevice 
 Digital Input subdevice 
 Digital Output subdevice 
 Timer subdevice 
www.comedi.org");
