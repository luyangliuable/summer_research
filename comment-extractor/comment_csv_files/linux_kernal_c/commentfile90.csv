/*

 * Copyright (c) 2012 Broadcom Corporation

 * Copyright (c) 2012 Canonical Ltd.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Copyright (c) 2010 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

 * File contents: support functions for PCI/PCIe

 slow_clk_ctl */

 slow clock source mask */

 source of slow clock is LPO */

 source of slow clock is crystal */

 source of slow clock is PCI */

 LPOFreqSel, 1: 160Khz, 0: 32KHz */

 LPOPowerDown, 1: LPO is disabled, 0: LPO is enabled */

 ForceSlowClk, 1: sb/cores running on slow clock, 0: power logic control */

 /* IgnorePllOffReq, 1/0:

  *  power logic ignores/honors PLL clock disable requests from core

 /* XtalControlEn, 1/0:

  *  power logic does/doesn't disable crystal when appropriate

 XtalPU (RO), 1/0: crystal running/disabled */

 ClockDivider (SlowClk = 1/(4+divisor)) */

 system_clk_ctl */

 ILPen: Enable Idle Low Power */

 ALPen: Enable Active Low Power */

 ForcePLLOn */

 Force ALP (or HT if ALPen is not set */

 Force HT */

 ClkDiv  (ILP = 1/(4 * (divisor + 1)) */

 OTP is powered up, use def. CIS, no SPROM */

 OTP is powered up, SPROM is present */

 OTP is powered up, no SPROM */

 OTP is powered down, SPROM is present */

 43224 chip-specific ChipControl register bits */

 12 mA drive strength */

 12 mA drive strength for later 43224s */

 43236 Chip specific ChipStatus register bits */

 USB/HSIC */

 120/96Mbps */

 boot from SRAM, ARM in reset */

 boot from ROM */

 boot from FLASH */

 4331 chip-specific ChipControl register bits */

 0 disable */

 0 SECI is disabled (JTAG functional) */

 0 disable */

 sprom/gpio13-15 mux */

 0 ext pa disable, 1 ext pa enabled */

 set drive out GPIO_CLK on sprom_cs pin */

 use sprom_cs pin as PCIE mdio interface */

 aband extpa will be at gpio2/5 and sprom_dout */

 override core control on pipe_AuxClkEnable */

 override core control on pipe_AuxPowerDown */

 pcie_auxclkenable */

 pcie_pipe_pllpowerdown */

 enable bt_shd0 at gpio4 */

 enable bt_shd1 at gpio5 */

 4331 Chip specific ChipStatus register bits */

 crystal frequency 20/40Mhz */

 4319 chip-specific ChipStatus register bits */

 gpio [7:6], SDIO CIS selection */

 use default CIS, OTP is powered up */

 use SPROM, OTP is powered up */

 use OTP, OTP is powered up */

 use SPROM, OTP is powered down */

 gpio [8], sdio/usb mode */

 PALDO is configured with external PNP */

 4336 chip-specific ChipStatus register bits */

 4313 chip-specific ChipStatus register bits */

 4313 Chip specific ChipControl register bits */

 12 mA drive strengh for later 4313 */

 Manufacturer Ids */

 Enumeration ROM registers */

 Erom entries */

 EROM CompIdentA */

 EROM CompIdentB */

 EROM AddrDesc */

 4KB */

 EROM SizeDesc */

 PCI config space bit 4 for 4306c0 slow clock source */

 PCI config space GPIO 14 for Xtal power-up */

 PCI config space GPIO 15 for PLL power-down */

 power control defines */

 us pll on delay */

 us fref change delay */

 us crystal power-on delay */

 resetctrl */

 Invalid rev */

 GPIO Based LED powersave defines */

 Default: 10% on */

 Default: 10% on */

 When Srom support present, fields in sromcontrol */

 External PA enable mask */

 0x000 */

 0x004 */

 0x020 */

 0x024 */

 0x040 */

 0x044 */

 0x060 */

 0x064 */

 0x100 */

 0x104 */

 0x120 */

 0x124 */

 0x140 */

 0x144 */

 0x160 */

 0x164 */

 0x200 */

 0x204 */

 0x220 */

 0x224 */

 0x240 */

 0x244 */

 0x260 */

 0x264 */

 0x300 */

 0x304 */

 0x308 */

 0x320 */

 0x324 */

 0x328 */

 0x340 */

 0x344 */

 0x348 */

 0x360 */

 0x364 */

 0x368 */

 0x400 */

 0x404 */

 0x408 */

 0x500 */

 0x700 */

 0x704 */

 0x800 */

 0x804 */

 0x808 */

 0x80c */

 0x900 */

 0x904 */

 0x908 */

 0x90c */

 0x910 */

 0x914 */

 0x918 */

 0x91c */

 0xa00 */

 0xe00 */

 0xf00 */

 0xf10 */

 0xf14 */

 0xf18 */

 0xf1c */

 0xf30 */

 0xf34 */

 0xf38 */

 0xf3c */

 0xf50 */

 0xf54 */

 0xf58 */

 0xf5c */

 0xf70 */

 0xf74 */

 0xf78 */

 0xf7c */

 0xf90 */

 0xfd0 */

 0xfd4 */

 0xfd8 */

 0xfdc */

 0xfe0 */

 0xfe4 */

 0xfe8 */

 0xfec */

 0xff0 */

 0xff4 */

 0xff8 */

 0xffc */

 no cores found, bail out */

 get chipcommon rev */

 get chipcommon chipstatus */

 get chipcommon capabilites */

 get pmu rev and caps */

 switch to Chipcommon core */

 === NVRAM, clock is ready === */

 PMU specific initializations */

/*

 * Allocate a si handle and do the attach.

 alloc struct si_info */

 may be called with core in reset */

/*

 * read/modify chipcommon core register.

 mask and set */

 readback */

 return the slow clock source - LPO, XTAL, or PCI */

/*

* return the ILP (slowclock) min or max frequency

* precondition: we've established the chip has dynamic clk control

 Chipc rev 10 is InstaClock */

	/*

	 * If the slow clock is not sourced by the xtal then

	 * add the xtal_on_delay since the xtal will also be

	 * powered down by dynamic clk control logic.

 Starting with 4318 it is ILP that is used for the delays */

 initialize power control delay registers */

 set all Instaclk chip ILP to 1 MHz */

/*

 * return the value suitable for writing to the

 * dot11 core FAST_PWRUP_DELAY register

/*

 *  clock control policy function throught chipcommon

 *

 *    set dynamic clk control mode (forceslow, forcefast, dynamic)

 *    returns true if we are forcing fast clock

 *    this is a wrapper over the next internal function

 *      to allow flexible policy settings for outside caller

 Enable BT-COEX & Ex-PA for 4313 */

 EPA Fix */

 check if the device is removed */

/*

 * Copyright (c) 2010 Broadcom Corporation

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 QDB() macro takes a dB value and converts to a quarter dB value */

 max of BAND_5G_PWR_LVLS and 14 for 2.4 GHz */

/* maxpwr mapping to 5GHz band channels:

 * maxpwr[0] - channels [34-48]

 * maxpwr[1] - channels [52-60]

 * maxpwr[2] - channels [62-64]

 * maxpwr[3] - channels [100-140]

 * maxpwr[4] - channels [149-165]

 5 power levels for 5G */

 macro to get 5 GHz channel group index for tx power */

 /* locale per-channel tx power limits for MIMO frames

  * maxpwr arrays are index by channel for 2.4 GHz limits, and

  * by sub-band for 5 GHz limits using CHANNEL_POWER_IDX_5G(channel)

 tx 20 MHz power limits, qdBm units */

 tx 40 MHz power limits, qdBm units */

 Country names and abbreviations with locale defined from ISO 3166 */

 2.4G mimo info */

 5G mimo info */

/*

 * MIMO Locale Definitions - 2.4 GHz

/*

 * MIMO Locale Definitions - 5 GHz

 12.5 dBm */ 50, 50, 50, QDB(15), QDB(15)},

 Worldwide RoW 2, must always be at index 0 */

/*

 * Indicates whether the country provided is valid to pass

 * to cfg80211 or not.

 *

 * returns true if valid; false if not.

	/*

	 * only allow ascii alpha uppercase for the first 2

	 * chars.

	/*

	 * do not match ISO 3166-1 user assigned country codes

	 * that may be in the driver table

 AA */

 ZZ */

 XA - XZ */

 QM - QZ */

 JP, J1 - J10 are Japan ccodes */

 CCK Rates */

 20 MHz Legacy OFDM SISO */

 20 MHz Legacy OFDM CDD */

 40 MHz Legacy OFDM SISO */

 40 MHz Legacy OFDM CDD */

 20MHz MCS 0-7 SISO */

 20MHz MCS 0-7 CDD */

 20MHz MCS 0-7 STBC */

 20MHz MCS 8-15 MIMO */

 40MHz MCS 0-7 SISO */

 40MHz MCS 0-7 CDD */

 40MHz MCS 0-7 STBC */

 40MHz MCS 8-15 MIMO */

 40MHz MCS 32 */

/*

 * set the driver's current country and regulatory information

 * using a country code as the source. Look up built in country

 * information found with the country code.

 store the country code for passing up as a regulatory hint */

	/*

	 * If no custom world domain is found in the SROM, use the

	 * default "X2" domain.

 save default country for exiting 11d regulatory mode */

 initialize autocountry_default to driver default */

 set or restore gmode as required by regulatory */

 CCK txpwr limits for 2.4G band */

		/*

		 * OFDM 40 MHz SISO has the same power as the corresponding

		 * MCS0-7 rate unless overriden by the locale specific code.

		 * We set this value to 0 as a flag (presumably 0 dBm isn't

		 * a possibility) and then copy the MCS0-7 value to the 40 MHz

		 * value if it wasn't explicitly set.

 Excess over 6 dB */

 Fill in the MCS 0-7 (SISO) rates */

		/*

		 * 20 MHz has the same power as the corresponding OFDM rate

		 * unless overriden by the locale specific code.

 Fill in the MCS 0-7 CDD rates */

	/*

	 * These locales have SISO expressed in the

	 * table and override CDD later

 Fill in the MCS 0-7 STBC rates */

 Fill in the MCS 8-15 SDM rates */

 Fill in MCS32 */

	/*

	 * Copy the 40 MHZ MCS 0-7 CDD value to the 40 MHZ MCS 0-7 SISO

	 * value if it wasn't provided explicitly.

	/*

	 * Copy the 20 and 40 MHz MCS0-7 CDD values to the corresponding

	 * STBC values if they weren't provided explicitly.

/*

 * Verify the chanspec is using a legal set of parameters, i.e. that the

 * chanspec specified a band, bw, ctl_sb and channel and that the

 * combination could be legal given any set of circumstances.

 * RETURNS: true is the chanspec is malformed, false if it looks good.

 must be 2G or 5G band */

 must be 20 or 40 bandwidth */

 20MHZ b/w must have no ctl sb, 40 must have a ctl sb */

/*

 * Validate the chanspec for this locale, for 40MHZ we need to also

 * check that the sidebands are valid 20MZH channels in this locale

 * and they are also a legal HT combination

 check the chanspec */

		/*

		 * All channels in this range should be passive and have

		 * DFS enabled.

 Disable radio if all channels disallowed by regulatory */

 Disable any channels not supported by the phy */

/*

 * Copyright (c) 2010 Broadcom Corporation

 * Copyright (c) 2013 Hauke Mehrtens <hauke@hauke-m.de>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 watchdog timer, in unit of ms */

 radio monitor timer, in unit of ms */

 beacon interval, in unit of 1024TU */

 n-mode support capability */

/* 2x2 includes both 1x1 & 2x2 devices

 * reserved #define 2 for future when we want to separate 1x1 & 2x2 and

 * control it independently

 length of the BCN template area */

 brcms_bss_info flag bit values */

 BSS is HT (MIMO) capable */

 chip rx buffer offset */

 rfdisable delay timer 500 ms, runs of ALP clock */

 10 second timeout */

 synthpu_dly times in us */

 vanilla M_MAX_ANTCNT val */

 Per-AC retry limit register definitions; uses defs.h bitfield macros */

 Default Short retry Limit */

 Maximum Short retry Limit */

 Default Long retry count */

 Short count for fb rate */

 Long count for fb rate */

 invalid core flags, use the saved coreflags */

 values for PLCPHdr_override */

 values for g_protection_override and n_protection_override */

 values for g_protection_control and n_protection_control */

 values for n_protection */

 values for band specific 40MHz capabilities */

 bitflags for SGI support (sgi_rx iovar) */

 defines used by the nrate iovar */

 MSC in use,indicates b0-6 holds an mcs */

 rate/mcs value */

 stf mode mask: siso, cdd, stbc, sdm */

 stf mode shift */

 bit indicate to override mcs only */

 sgi mode */

 sgi mode */

 adv coding in use */

 ldpc shift */

 stf mode SISO */

 stf mode CDD */

 stf mode STBC */

 stf mode SDM */

 # of entries in Tx FIFO */

 Max # of entries in Rx FIFO based on 4kb page size */

 Amount of headroom to leave in Tx FIFO */

 try to keep this # rbufs posted to the chip */

 max # frames to process in brcms_c_recv() */

 max # tx status to process in wlc_txstatus() */

 brcmu_format_flags() bit description structure */

/*

 * The following table lists the buffer memory allocated to xmt fifos in HW.

 * the size is in units of 256bytes(one block), total size is HW dependent

 * ucode has default fifo partition, sw can overwrite if necessary

 *

 * This is documented in twiki under the topic UcodeTxFifo. Please ensure

 * the twiki is updated before making changes.

 Starting corerev for the fifo size table */

 debug/trace */

 TX FIFO number to WME/802.1E Access Category */

 ieee80211 Access Category to TX FIFO number */

 corerev 17: 5120, 49152, 49152, 5376, 4352, 1280 */

 corerev 18: */

 corerev 19: */

 corerev 20: 5120, 49152, 49152, 5376, 4352, 1280 */

 corerev 21: 2304, 14848, 5632, 3584, 3584, 1280 */

 corerev 22: 5120, 49152, 49152, 5376, 4352, 1280 */

 corerev 23: 5120, 49152, 49152, 5376, 4352, 1280 */

 corerev 24: 2304, 14848, 5632, 3584, 3584, 1280 */

 corerev 25: */

 corerev 26: */

 corerev 27: */

 corerev 28: 2304, 14848, 5632, 3584, 3584, 1280 */

 pointer to most recently allocated wl/wlc */

 Mapping of ieee80211 AC numbers to tx fifos */

 Mapping of tx fifos to ieee80211 AC numbers */

 Find basic rate for a given rate */

 currently the best mechanism for determining SIFS is the band in use */

/*

 * Detect Card removed.

 * Even checking an sbconfig register read will not false trigger when the core

 * is in reset it breaks CF address mechanism. Accessing gphy phyversion will

 * cause SB error if aphy is in reset on 4306B0-DB. Need a simple accessible

 * reg with fixed 0/1 pattern (some platforms return all 0).

 * If clocks are present, call the sb routine which will figure out if the

 * device is removed.

 sum the individual fifo tx pending packet counts */

 allocate struct brcms_c_pub state structure */

 allocate struct brcms_hardware state structure */

/*

 * Update the slot timing for standard 11b/g (20us slots)

 * or shortslot 11g (9us slots)

 * The PSM needs to be suspended for this call.

 11g short slot: 11a timing */

 11g long slot: 11b timing */

/*

 * calculate frame duration of a given rate and length, return

 * time in usec unit

 1000Ndbps = kbps * 4 */

 STBC needs to have even number of symbols */

 Ndbps = Mbps * 4 = rate(500Kbps) * 2 */

 NSyms = CEILING((SERVICE + 8*NBytes + TAIL) / Ndbps) */

		/*

		 * calc # bits * 2 so factor of 2 in rate (1/2 mbps)

		 * will divide out

 calc ceiling of bits/rate = microseconds of air time */

 init microcode host flags */

 do band-specific ucode IHR, SHM, and SCR inits */

 clear gmode bit, put phy into reset */

 take phy out of reset */

 low-level band switch utility routine */

	/*

	 * BMAC_NOTE:

	 *   until we eliminate need for wlc->band refs in low level code

 set gmode core flag */

 switch to new band but leave it inactive */

 disable interrupts */

 radio off */

 process an individual struct tx_status */

	/* discard intermediate indications for ucode with one legitimate case:

	 *   e.g. if "useRTS" is set. ucode did a successful rts/cts exchange,

	 *   but the subsequent tx of DATA failed. so it will start rts/cts

	 *   from the beginning (resetting the rts transmission count)

	/*

	 * brcms_c_ampdu_dotxstatus() will trace tx descriptors for AMPDU

	 * frames; this traces them for the rest.

		/*

		 * Set information to be consumed by Minstrel ht.

		 *

		 * The "fallback limit" is the number of tx attempts a given

		 * MPDU is sent at the "primary" rate. Tx attempts beyond that

		 * limit are sent at the "secondary" rate.

		 * A 'short frame' does not exceed RTS treshold.

 Short Frame Rate Fallback Limit */

 Long Frame Rate Fallback Limit */

			/*

			 * rate selection requested a fallback rate

			 * and we used it

			/*

			 * rate selection did not request fallback rate, or

			 * we didn't need it

			/*

			 * rc80211_minstrel.c:minstrel_tx_status() expects

			 * unused rates to be marked with idx = -1

 clear the rest of the rates */

 remove PLCP & Broadcom tx descriptor header */

/* process tx completion events in BMAC

 * Return true if more tx status need to be processed. false otherwise.

	/*

	 * Param 'max_tx_num' indicates max. # tx status to process before

	 * break out.

 only process when valid */

		/*

		 * DirFrmQ is now valid...defer setting until end

		 * of ATIM window

 set initial host flags value */

 prohibit use of slowclock on multifunction boards */

	/*

	 * ucode host flag 2 needed for pio mode, independent of band and fifo

 name and offsets for dma_attach */

 Init FIFOs */

		/*

		 * FIFO 0

		 * TX: TX_AC_BK_FIFO (TX AC Background data packets)

		 * RX: RX_FIFO (RX data packets)

		/*

		 * FIFO 1

		 * TX: TX_AC_BE_FIFO (TX AC Best-Effort data packets)

		 *   (legacy) TX_DATA_FIFO (TX data packets)

		 * RX: UNUSED

		/*

		 * FIFO 2

		 * TX: TX_AC_VI_FIFO (TX AC Video data packets)

		 * RX: UNUSED

		/*

		 * FIFO 3

		 * TX: TX_AC_VO_FIFO (TX AC Voice data packets)

		 *   (legacy) TX_CTL_FIFO (TX control & mgmt packets)

 Cleaner to leave this as if with AP defined */

 get pointer to dma engine tx flow control variable */

 initial ucode host flags */

/*

 * Initialize brcms_c_info default values ...

 * may get overrides later in this function

 *  BMAC_NOTES, move low out and resolve the dangling ones

 set default sw macintmask value */

 various 802.11g modes */

 default mac retry limits */

 delay before first read of ucode state */

 wait until ucode is no longer asleep */

 control chip clock to save power, enable dynamic clock or force fast clock */

		/* new chips with PMU, CCS_FORCEHT will distribute the HT clock

		 * on backplane, but mac core will still run on ALP(not HT) when

		 * it enters powersave mode, which means the FCA bit may not be

		 * set. Should wakeup mac if driver wants it to run on HT.

		/* old chips w/o PMU, force HT through cc,

		 * then use FCA to verify mac is running fast clock

 check fast clock is available (if core is not in reset) */

		/*

		 * keep the ucode wake bit on if forcefastclk is on since we

		 * do not want ucode to put us back to slow clock when it dozes

		 * for PM mode. Code below matches the wake override bit with

		 * current forcefastclk state. Only setting bit in wake_override

		 * instead of waking ucode immediately since old code had this

		 * behavior. Older code set wlc->forcefastclk but only had the

		 * wake happen if the wakup_ucode work (protected by an up

		 * check) was executed just below.

/* set or clear ucode host flag bits

 * it has an optimization for no-change write

 * it only writes through shared memory when the core has clock;

 * pre-CLK changes should use wlc_write_mhf to get around the optimization

 *

 *

 * bands values are: BRCM_BAND_AUTO <--- Current band only

 *                   BRCM_BAND_5G   <--- 5G band only

 *                   BRCM_BAND_2G   <--- 2G band only

 *                   BRCM_BAND_ALL  <--- All bands

 error condition */

		/* Current band only or all bands,

		 * then set the band to current band

 error condition */

		/* optimization: only write through if changed, and

		 * changed band is the current band

/* set the maccontrol register to desired reset state and

 * initialize the sw cache of the register

 IHR accesses are always enabled, PSM disabled, HPS off and WAKE on */

/*

 * write the software state of maccontrol and

 * overrides to the maccontrol register

 OR in the wake bit if overridden */

 set AP and INFRA bits for mute if needed */

 set or clear maccontrol bits */

 error condition */

 if the new maccontrol value is the same as the old, nothing to do */

 something changed, cache the new value */

 write the new values with overrides applied */

/* When driver needs ucode to stop beaconing, it has to make sure that

 * MCTL_AP is clear and MCTL_INFRA is set

 * Mode           MCTL_AP        MCTL_INFRA

 * AP                1              1

 * STA               0              1 <--- This will ensure no beacons

 * IBSS              0              0

	/* if maccontrol already has AP == 0 and INFRA == 1 without this

	 * override, then there is no change to write

 Clear the override on AP and INFRA bits */

	/* if maccontrol already has AP == 0 and INFRA == 1 without this

	 * override, then there is no change to write

/*

 * Write a MAC address to the given match reg offset in the RXE match engine.

 enter the MAC addr into the RXE match registers */

	/* if MCTL_BIGEND bit set in mac control register,

	 * the chip swaps data in fifo, as well as data in

	 * template ram

 request FAST clock if not on */

 restore the clk */

 update SYNTHPU_DLY */

 set the Probe Response frame phy control word */

 set the Response (ACK/CTS) frame phy control word */

 OFDM RATE sub-field of PLCP SIGNAL field, per 802.11 sec 17.3.4.1 */

	/* Find the SHM pointer to the rate table entry by looking in the

	 * Direct-map Table

 walk the phy rate table and update the entries */

 read the SHM Rate Table entry OFDM PCTL1 values */

 modify the value */

 Update the SHM Rate Table entry OFDM PCTL1 values */

 band-specific init */

	/*

	 * cwmin is band-specific, update hardware

	 * with value for current band

 write phytype and phyvers */

	/*

	 * initialize the txphyctl1 rate table since

	 * shmem is shared between bands

 Perform a soft reset of the PHY PLL */

/* light way to turn on phy clock without reset for NPHY only

 *  refer to brcms_b_core_phy_clk for full version

 support(necessary for NPHY and HYPHY) only */

 Specific reset sequence required for NPHY rev 3 and 4 */

 Set the PHY bandwidth */

 Perform a soft reset of the PHY PLL */

 reset the PHY */

 switch to and initialize new band */

 Enable the d11 core before accessing it */

 band-specific initializations */

	/*

	 * If there are any pending software interrupt bits,

	 * then replace these with a harmless nonzero value

	 * so brcms_c_dpc() will re-enable interrupts when done.

 restore macintmask */

 ucode should still be suspended.. */

 reject unsupported corerev */

 Validate some board info parameters */

 4 bits each for board type, major, minor, and tiny version */

 voards from other vendors are always considered valid */

 do some boardrev sanity checks when boardvendor is Broadcom */

 If macaddr exists, use it (Sromrev4, CIS, ...). */

 power both the pll and external oscillator on/off */

	/*

	 * dont power down if plldown is false or

	 * we must poll hw radio disable

/*

 * Return true if radio is disabled, otherwise false.

 * hw radio disable signal is an external pin, users activate it asynchronously

 * this function could be called when driver is down and w/o clock

 * it operates on different registers depending on corerev and boardflag.

 may need to take core out of reset first */

		/*

		 * mac no longer enables phyclk automatically when driver

		 * accesses phyreg throughput mac. This can be skipped since

		 * only mac reg is accessed below

		/*

		 * TODO: test suspend/resume

		 *

		 * AI chip doesn't restore bar0win2 on

		 * hibernation/resume, need sw fixup

 put core back into reset */

/* d11 core reset

 *   ensure fask clock during reset

 *   reset dma

 *   reset d11(out of reset)

 *   reset phy(out of reset)

 *   clear software macintstatus for fresh new start

 * one testing hack wlc_hw->noreset will bypass the d11/phy reset

 request FAST clock if not on  */

 reset the dma engines except first time thru */

 if noreset, just stop the psm and return */

 skip wl_dpc after down */

	/*

	 * mac no longer enables phyclk automatically when driver accesses

	 * phyreg throughput mac, AND phy_reset is skipped at early stage when

	 * band->pi is invalid. need to enable PHY CLK

	/*

	 * reset the core

	 * In chips with PMU, the fastclk request goes through d11 core

	 * reg 0x1e0, which is cleared by the core_reset. have to re-request it.

	 *

	 * This adds some delay and we can optimize it by also requesting

	 * fastclk through chipcommon during this period if necessary. But

	 * that has to work coordinate with other driver like mips/arm since

	 * they may touch chipcommon as well.

 turn on PHY_PLL */

 clear sw intstatus */

 restore the clk setting */

/* txfifo sizes needs to be modified(increased) since the newer cores

 * have more memory.

 tx fifos start at TXFIFO_START_BLK from the Base address */

 sequence of operations:  reset fifo, set fifo size, reset fifo */

	/*

	 * need to propagate to shm location to be in sync since ucode/hw won't

	 * do this

/* This function is used for changing the tsf frac register

 * If spur avoidance mode is off, the mac freq will be 80/120/160Mhz

 * If spur avoidance mode is on1, the mac freq will be 82/123/164Mhz

 * If spur avoidance mode is on2, the mac freq will be 84/126/168Mhz

 * HTPHY Formula is 2^26/freq(MHz) e.g.

 * For spuron2 - 126MHz -> 2^26/126 = 532610.0

 *  - 532610 = 0x82082 => tsf_clk_frac_h = 0x8, tsf_clk_frac_l = 0x2082

 * For spuron: 123MHz -> 2^26/123    = 545600.5

 *  - 545601 = 0x85341 => tsf_clk_frac_h = 0x8, tsf_clk_frac_l = 0x5341

 * For spur off: 120MHz -> 2^26/120    = 559240.5

 *  - 559241 = 0x88889 => tsf_clk_frac_h = 0x8, tsf_clk_frac_l = 0x8889

 126Mhz */

 123Mhz */

 120Mhz */

 82Mhz */

 80Mhz */

 Initialize GPIOs that are controlled by D11 core */

 use GPIO select 0 to get all gpio signals from the gpio out reg */

	/*

	 * Common GPIO setup:

	 *      G0 = LED 0 = WLAN Activity

	 *      G1 = LED 1 = WLAN 2.4 GHz Radio State

	 *      G2 = LED 2 = WLAN 5 GHz Radio State

	 *      G4 = radio disable input (HI enabled, LO disabled)

 Allocate GPIOs for mimo antenna diversity feature */

 Enable antenna diversity, use 2x3 mode */

 init superswitch control */

		/*

		 * The board itself is powered by these GPIOs

		 * (when not sending pattern) so set them high

 Enable antenna diversity, use 2x4 mode */

 Configure the desired clock to be 4Mhz */

	/*

	 * gpio 9 controls the PA. ucode is responsible

	 * for wiggling out and oe

 apply to gpiocontrol register */

 update sw state */

 push to ucode if up */

 Update the antsel type for phy module to use */

 read intstatus register and ignore any non-error bits */

 big hammer */

 isr can still happen */

 ensure int line is no longer driven */

 return previous macintmask; resolve race between us and our isr */

 assumes that the d11 MAC is enabled */

 Two clients of this code, 11h Quiet period and scanning. */

 only suspend if not already suspended */

 force the core awake only if not already */

		/*

		 * Suspending AMPDU transmissions in the middle can cause

		 * underflow which may result in mismatch between ucode and

		 * driver so suspend the mac before suspending the FIFO

	/* BMAC_NOTE: BRCMS_TX_FIFO_ENAB is done in brcms_c_dpc() for DMA case

	 * but need to be done here for PIO otherwise the watchdog will catch

	 * the inconsistency and fire

 Two clients of this code, 11h Quiet period and scanning. */

 allow core to sleep again */

 precondition: requires the mac core to be enabled */

 suspend tx fifos */

 zero the address match register so we do not send ACKs */

 resume tx fifos */

 Restore address */

/*

 * Read and clear macintmask and macintstatus and intstatus registers.

 * This routine should be called with interrupts off

 * Return:

 *   -1 if brcms_deviceremoved(wlc) evaluates to true;

 *   0 if the interrupt is not for us, or we are in some special cases;

 *   device interrupt status bits otherwise.

 macintstatus includes a DMA interrupt summary bit */

 detect cardbus removed, in power down(suspend) and in reset */

	/* brcms_deviceremoved() succeeds even when the core is still resetting,

	 * handle that case here.

 defer unsolicited interrupts */

 if not for us */

 turn off the interrupts */

 clear device interrupts */

 MI_DMAINT is indication of non-zero intstatus */

		/*

		 * only fifo interrupt enabled is I_RI in

		 * RX_FIFO. If MI_DMAINT is set, assume it

		 * is set and clear the interrupt.

 Update wlc->macintstatus and wlc->intstatus[]. */

 Return true if they are updated successfully. false otherwise */

 read and clear macintstatus and intstatus registers */

 device is removed */

 update interrupt status in software */

/*

 * First-level interrupt processing.

 * Return true if this was our interrupt

 * and if further brcms_c_dpc() processing is required,

 * false otherwise.

 read and clear macintstatus and intstatus registers */

 it is not for us */

 save interrupt status bits */

	/*

	 * Track overlapping suspend requests

 force the core awake */

	/*

	 * Track overlapping suspend requests

 Validate dchip register access */

 Can we write and read back a 32bit register? */

 clear CFPStart */

		/*

		 * Since the PLL may be shared, other cores can still

		 * be requesting it; so we'll deassert the request but

		 * not wait for status to comply.

 radio off */

 turn off analog core */

 turn off PHYPLL to save power */

 free any posted tx packets */

 free any posted rx packets */

/*

 * Read a single u16 from shared memory.

 * SHM 'offset' needs to be an even address

/*

 * Write a single u16 to shared memory.

 * SHM 'offset' needs to be an even address

/*

 * Copy a buffer to shared memory of specified type .

 * SHM 'offset' needs to be an even address and

 * Buffer length 'len' must be an even number of bytes

 * 'sel' selects the type of memory

/*

 * Copy a piece of shared memory of specified type to a buffer .

 * SHM 'offset' needs to be an even address and

 * Buffer length 'len' must be an even number of bytes

 * 'sel' selects the type of memory

/* Copy a buffer to shared memory.

 * SHM 'offset' needs to be an even address and

 * Buffer length 'len' must be an even number of bytes

 write retry limit to SCR, shouldn't need to suspend */

/*

 * conditions under which the PM bit should be set in outgoing frames

 * and STAY_AWAKE is meaningful

 not supporting PS so always return false for now */

 DEBUG */

 if driver down, make no sense to update stats */

 save last rx fifo 0 overflow count */

 save last tx fifo  underflow count */

 DEBUG */

 Read mac stats from contiguous shared memory */

 check for rx fifo 0 overflow */

 check for tx fifo underflows */

 DEBUG */

 merge counters from dma module */

 reset the core */

 purge the dma rings */

 slurp up hw mac counters before core reset */

 reset our snapshot of macstat counters */

/* d11 core init

 *   reset PSM

 *   download ucode/PCM

 *   let ucode run to suspended

 *   download ucode inits

 *   config other core registers

 *   init dma

 reset PSM */

	/*

	 * FIFOSZ fixup. driver wants to controls the fifo allocation.

 let the PSM run to the suspended state, set mode to BSS STA */

 wait for ucode to self-suspend after auto-init */

 For old ucode, txfifo sizes needs to be modified(increased) */

 check txfifo allocations match between ucode and driver */

 make sure we can still talk to the mac */

 band-specific inits done by wlc_bsinit() */

 Set up frame burst size and antenna swap threshold init values */

 enable one rx interrupt per received frame */

 set the station mode (BSS STA) */

 set up Beacon interval */

 write interrupt mask */

 allow the MAC to control the PHY clock (dynamic on/off) */

 program dynamic clock control fast powerup delay register */

 tell the ucode the corerev */

 tell the ucode MAC capabilities */

 write retry limits to SCR, this done after PSM init */

 write rate fallback retry limits */

 init the tx dma engines */

 init the rx dma engine(s) and post receive buffers */

 request FAST clock if not on */

 disable interrupts */

 set up the specified band and chanspec */

 do one-time phy inits and calibration */

 core-specific initialization */

 band-specific inits */

 restore macintmask */

	/* seed wake_override with BRCMS_WAKE_OVERRIDE_MACSUSPEND since the mac

	 * is suspended and brcms_c_enable_mac() will clear this override bit.

	/*

	 * initialize mac_suspend_depth to 1 to match ucode

	 * initial suspended state

 restore the clk */

 Save our copy of the chanspec */

 Set the chanspec and power limits for this locale */

 derive wlc->band->basic_rate[] table from 'rateset' */

 incoming rates are in 500kbps units as in 802.11 Supported Rates */

	/* For each basic rate in the rates list, make an entry in the

	 * best basic lookup.

 only make an entry for a basic rate */

 mask off basic bit */

	/* The rate lookup table now has non-zero entries for each

	 * basic rate, equal to the basic rate: br[basicN] = basicN

	 *

	 * To look up the best basic rate corresponding to any

	 * particular rate, code can use the basic_rate table

	 * like this

	 *

	 * basic_rate = wlc->band->basic_rate[tx_rate]

	 *

	 * Make sure there is a best basic rate entry for

	 * every rate by walking up the table from low rates

	 * to high, filling in holes in the lookup table

			/* This rate is a basic rate.

			 * Keep track of the best basic rate so far by

			 * modulation type.

		/* This rate is not a basic rate so figure out the

		 * best basic rate less than this rate and fill in

		 * the hole in the table

			/*

			 * In 11g and 11a, the OFDM mandatory rates

			 * are 6, 12, and 24 Mbps

 In 11b, all CCK rates are mandatory 1 - 11 Mbps */

	/*

	 * We might have been bandlocked during down and the chip

	 * power-cycled (hibernate). Figure out the right band to park on

 updated in brcms_c_bandlock() */

 park on the band of the specified chanspec */

 order so that parkband initialize last */

 make each band operational, software state init */

 fill in hw_rate */

 init basic rate lookup */

 sync up phy/radio chanspec */

/*

 * Set or clear filtering related maccontrol bits based on

 * specified filter flags

/*

 * ucode, hwmac update

 *    Channel dependent updates for ucode and hw

	/* enable or disable any active IBSSs depending on whether or not

	 * we are on the home channel

			/*

			 * BMAC_NOTE: This is something that should be fixed

			 * in ucode inits. I think that the ucode inits set

			 * up the bcn templates and shm values with a bogus

			 * beacon. This should not be done in the inits. If

			 * ucode needs to set up a beacon for testing, the

			 * test routines should write it down, not expect the

			 * inits to populate a bogus beacon.

 disable an active IBSS if we are not on the home channel */

 Shared memory address for the table we are reading */

 Shared memory address for the table we are writing */

	/*

	 * for a given rate, the LS-nibble of the PLCP SIGNAL field is

	 * the index into the rate table.

	/* Find the SHM pointer to the ACK rate entry by looking in the

	 * Direct-map Table

	/* Update the SHM BSS-basic-rate-set mapping table with the pointer

	 * to the correct basic rate for the given incoming rate

 walk the phy rate table and update SHM basic rate lookup table */

		/* for a given rate brcms_basic_rate returns the rate at

		 * which a response ACK/CTS should be sent.

			/* This should only happen if we are using a

			 * restricted rateset.

 band-specific init */

 write ucode ACK/CTS rate table */

 update some band specific mac configuration */

 init antenna selection */

 formula:  IDLE_BUSY_RATIO_X_16 = (100-duty_cycle)/duty_cycle*16 */

 Only write to shared memory  when wl is up */

 push sw hps and wake state through hardware */

/*

 * Write this BSS config's MAC address to core.

 * Updates RXE match engine.

 enter the MAC addr into the RXE match registers */

/* Write the BSS config's BSSID address to core (set_bssid in d11procs.tcl).

 * Updates RXE match engine.

 we need to update BSSID in RXE match registers */

/*

 * Suspend the the MAC and update the slot timing

 * for standard 11b/g (20us slots) or shortslot 11g (9us slots).

 use the override if it is set */

 Switch bands if necessary */

			/* brcms_b_setband disables other bandunit,

			 *  use light band switch if not up yet

 Update muting of the channel */

 switch to and initialize new band */

 wait for at least one beacon before entering sleeping state */

 band-specific initializations */

 Switch bands if necessary */

			/*

			 * should the setband call come after the

			 * brcms_b_chanspec() ? if the setband updates

			 * (brcms_c_bsinit) use low level calls to inspect and

			 * set state, the state inspected may be from the wrong

			 * band, or the following brcms_b_set_chanspec() may

			 * undo the work.

 sync up phy/radio chanspec */

 init antenna selection */

		/* Fix the hardware rateset based on bw.

		 * Mainly add MCS32 for 40Mhz, remove MCS 32 for 20Mhz

 update some mac configuration since chanspec changed */

/*

 * This function changes the phytxctl for beacon based on current

 * beacon ratespec AND txant setting as per this table:

 *  ratespec     CCK		ant = wlc->stf->txant

 *		OFDM		ant = 3

 for non-siso rates or default setting, use the available chains */

/*

 * centralized protection config change function to simplify debugging, no

 * consistency checking this should be called only on changes to avoid overhead

 * in periodic function

	/*

	 * Cannot use brcms_dbg_* here because this function is called

	 * before wlc is sufficiently initialized.

 Only apply params if the core is out of reset and has clocks */

 fill in shm ac params struct */

 convert from units of 32us to us for ucode */

 Indicate the new params to the ucode */

 Fill in shm acparam table */

 ucode needs these parameters during its initialization */

 find out which ac this set of params applies to */

 fill in shm ac params struct */

 CWmin = 2^(ECWmin) - 1 */

 CWmax = 2^(ECWmax) - 1 */

 Don't start the timer if HWRADIO feature is disabled */

 read hwdisable state and propagate to wlc flag */

 update hwradio status and return it */

 periodical query hw radio button while driver is "down" */

 common low-level watchdog code */

 increment second count */

 Check for FIFO error interrupts */

 make sure RX dma has buffers */

 common watchdog code */

 increment second count */

 if radio is disable, driver may be down, quit here */

	/*

	 * occasionally sample mac stat counters to

	 * detect 16-bit counter wrap

/*

 * Initialize brcms_c_info default values ...

 * may get overrides later in this function

 Save our copy of the chanspec */

 various 802.11g modes */

 802.11g draft 4.0 NonERP elt advertisement */

 default rate fallback retry limits */

 default mac retry limits */

 WME QoS mode is Auto by default */

/* low level attach

 *    run backplane attach, init nvram

 *    run phy attach

 *    initialize software state for each core and band

 *    put the whole chip in reset(driver down state), no clock

 populate struct brcms_hardware with default values  */

	/*

	 * Do the hardware portion of the attach. Also initialize software

	 * state that depends on the particular hardware we are running.

 verify again the device is supported */

 validate chip, chiprev and corerev */

 initialize power control registers */

	/* request fastclock and force fastclock for the rest of attach

	 * bring the d11 core out of reset.

	 *   For PMU chips, the first wlc_clkctl_clk is no-op since core-clk

	 *   is still false; But it will be called again inside wlc_corereset,

	 *   after d11 is out of reset.

 get the board rev, used just below */

 promote srom boardrev of 0xFF to 1 */

 check device id(srom, nvram etc.) to set bands */

 Dualband boards */

	/* BMAC_NOTE: remove init of pub values when brcms_c_attach()

	 * unconditionally does the init of these values

 pass all the parameters to wlc_phy_shared_attach in one struct */

 alloc and save pointer to shared phy state area */

 initialize software state for each core and band */

		/*

		 * band0 is always 2.4Ghz

		 * band1, if present, is 5Ghz

 init tx fifo size */

 Get a phy for this band */

 verify good phy_type & supported phy revision */

		/*

		 * BMAC_NOTE: wlc->band->pi should not be set below and should

		 * be done in the high level attach. However we can not make

		 * that change until all low level access is changed to

		 * wlc_hw->band->pi. Instead do the wlc->band->pi init below,

		 * keeping wlc_hw->band->pi as well for incremental update of

		 * low level fns, and cut over low only init when all fns

		 * updated.

 default contention windows size limits */

 disable core to match driver "down" state */

 Match driver "down" state */

 turn off pll and xtal to match driver "down" state */

	/* *******************************************************************

	 * The hardware is in the DOWN state at this point. D11 core

	 * or cores are in reset with clocks off, and the board PLLs

	 * are off if possible.

	 *

	 * Beyond this point, wlc->sbclk == false and chip registers

	 * should not be touched.

	 *********************************************************************

 init etheraddr state variables */

 get antennas available */

 reset the defaults if we have a single antenna */

 Compute Antenna Gain */

 init default and target BSS with some sane initial values */

	/* fill the default channel as the first valid channel

	 * starting from the 2G channels

 find the band of our default channel */

 init bss rates to the band specific default rate set */

 free timer state */

/*

 * low level detach

 Detach this band's phy */

 Free shared phy state */

/*

 * Return a count of the number of driver callbacks still pending.

 *

 * General policy is that brcms_c_detach can only dealloc/free software states.

 * It can NOT touch hardware registers since the d11core may be in reset and

 * clock may not be available.

 * One exception is sb register access, which is possible if crystal is turned

 * on after "down" state, driver should avoid software timer with the exception

 * of radio_monitor.

 delete software timers */

 update state that depends on the current value of "ap" */

 STA-BSS; short capable */

 Initialize just the hardware when coming out of POR or S3/S5 system states */

	/*

	 * Enable pll and xtal, initialize the power control registers,

	 * and force fastclock for the remainder of brcms_c_up().

	/*

	 * TODO: test suspend/resume

	 *

	 * AI chip doesn't restore bar0win2 on

	 * hibernation/resume, need sw fixup

	/*

	 * Inform phy that a POR reset has occurred so

	 * it does a complete phy init

	/*

	 * Enable pll and xtal, initialize the power control registers,

	 * and force fastclock for the remainder of brcms_c_up().

	/*

	 * Configure pci/pcmcia here instead of in brcms_c_attach()

	 * to allow mfg hotswap:  down, hotswap (chip power cycle), up.

	/*

	 * Need to read the hwradio status here to cover the case where the

	 * system is loaded with the hw radio disabled. We do not want to

	 * bring the driver up in this case.

 put SB PCI in down state again */

 reset the d11 core */

 FULLY enable dynamic power control and d11 core interrupt */

/*

 * Write WME tunable parameters for retransmit/max rate

 * from wlc struct to ucode

 Need clock to do this */

 make interface operational */

 HW is turned off so don't try to access it */

	/*

	 * Need to read the hwradio status here to cover the case where the

	 * system is loaded with the hw radio disabled. We do not want to bring

	 * the driver up in this case. If radio is disabled, abort up, lower

	 * power, start radio timer and return 0(for NDIS) don't call

	 * radio_update to avoid looping brcms_c_up.

	 *

	 * brcms_b_up_prep() returns either 0 or -BCME_RADIOOFF only

 brcms_b_up_prep has done brcms_c_corereset(). so clk is on, set it */

 Set EDCF hostflags */

 Program the TX wme params with the current settings */

 start one second watchdog timer */

 ensure antenna config is up to date */

 ensure LDPC config is in sync */

 disable interrupts */

 now disable interrupts */

 ensure we're running on the pll clock again */

 down phy at the last of this stage */

 reclaim any posted packets */

 Reset and disable the core */

 turn off primary xtal and pll */

/*

 * Mark the interface nonoperational, stop the software mechanisms,

 * disable the hardware, free any transient buffer state.

 * Return a count of the number of driver callbacks still pending.

 check if we are already in the going down path */

 Call any registered down handlers */

 cancel the watchdog timer */

 brcms_b_down_finish has done brcms_c_coredisable(). so clk is off */

 Set the current gmode configuration */

 Default to 54g Auto */

 Advertise and use shortslot (-1/0/1 Auto/Off/On) */

 Make 6, 12, and 24 basic rates */

	/* if N-support is enabled, allow Gmode set as long as requested

	 * Gmode is not GMODE_LEGACY_B

 verify that we are dealing with 2G band and grab the band pointer */

 update configuration value */

 Clear rateset override */

 Accept defaults */

 Error */

 Use the default 11g rateset */

 Set default bss rateset */

 force GMODE_AUTO if NMODE is ON */

 add the mcs rates to the default and hw ratesets */

 check for bad count value */

 try the current band */

 try the other band */

 apply new rateset */

	/* brcms_c_BSSinit() will sanitize the rateset before

 Copy only legacy rateset section */

 Copy only legacy rateset section */

 merge rateset coming in with the current mcsset */

 Commit the write */

 Commit the write */

	/*

	 * shortslot is an 11g feature, so no more work if we are

	 * currently on the 5G band

 let watchdog or beacon processing update shortslot */

 unassociated shortslot is off */

		/* driver is down, so just update the brcms_c_info

/*

 * register watchdog and down handlers.

 find an empty entry and just add, no duplication check! */

 unregister module callbacks */

 table not found! */

 get the phy specific rate encoding for the PLCP SIGNAL field */

	/* for a given rate, the LS-nibble of the PLCP SIGNAL field is

	 * the index into the rate table.

	/* Find the SHM pointer to the rate table entry by looking in the

	 * Direct-map Table

/*

 * bcmc_fid_generate:

 * Generate frame ID for a BCMC packet.  The frag field is not used

 * for MC frames so is used as part of the sequence number.

	/*

	 * Spec 9.6: ack rate is the highest rate in BSSBasicRateSet that

	 * is less than or equal to the rate of the immediately previous

	 * frame in the FES

 ACK frame len == 14 == 2(fc) + 2(dur) + 6(ra) + 4(fcs) */

	/*

	 * Spec 9.6: ack rate is the highest rate in BSSBasicRateSet that

	 * is less than or equal to the rate of the immediately previous

	 * frame in the FES

 BA len == 32 == 16(ctl hdr) + 4(ba len) + 8(bitmap) + 4(fcs) */

/* brcms_c_compute_frame_dur()

 *

 * Calculate the 802.11 MAC header DUR field for MPDU

 * DUR for a single frame = 1 SIFS + 1 ACK

 * DUR for a frame with following frags = 3 SIFS + 2 ACK + next frag time

 *

 * rate			MPDU rate in unit of 500kbps

 * next_frag_len	next MPDU length in bytes

 * preamble_type	use short/GF or long/MM PLCP header

 Double the current DUR to get 2 SIFS + 2 ACKs */

 add another SIFS and the frag time */

 The opposite of brcms_c_calc_frame_time */

 payload calculation matches that of regular ofdm */

 kNdbps = kbps * 4 */

 Ndbps = Mbps * 4 = rate(500Kbps) * 2 */

 divide out factor of 2 in rate (1/2 mbps) */

/*

 * Return true if the specified rate is supported by the specified band.

 * BRCM_BAND_AUTO indicates the current band.

 other band specified and we are a single band device */

 check if this is a mimo rate */

 validate the combination of rate/mcs/stf is allowed */

 mcs only allowed when nmode */

 mcs 32 is a special case, DUP mode 40 only */

 mcs > 7 must use stf SDM */

 mcs > 7 must use stf SDM */

			/*

			 * MCS 0-7 may use SISO, CDD, and for

			 * phy_rev >= 3 STBC

 make sure multiple antennae are available for non-siso rates */

 For STBC populate the STC field of the ratespec */

 Nss for single stream is always 1 */

/*

 * Compute PLCP, but only requires actual rate and length of pkt.

 * Rate is given in the driver standard multiple of 500 kbps.

 * le is set for 11 Mbps rate if necessary.

 * Broken out for PRQ.

 PLCP signal byte */

 r (500kbps) * 5 == r (100kbps) */

 PLCP service byte */

 PLCP length u16, little endian */

 PLCP CRC16 */

 Rate: 802.11 rate code, length: PSDU length in octets */

 rspec already holds this byte */

 set smoothing, not sounding ppdu & reserved */

 number of extension spatial streams bit 0 & 1 */

 Rate: 802.11 rate code, length: PSDU length in octets */

	/*

	 * encode rate per 802.11a-1999 sec 17.3.4.1, with lsb

	 * transmitted first

 Rate: 802.11 rate code, length: PSDU length in octets */

/* brcms_c_compute_rtscts_dur()

 *

 * Calculate the 802.11 MAC header DUR field for an RTS or CTS frame

 * DUR for normal RTS/CTS w/ frame = 3 SIFS + 1 CTS + next frame time + 1 ACK

 * DUR for CTS-TO-SELF w/ frame    = 2 SIFS         + next frame time + 1 ACK

 *

 * cts			cts-to-self or rts/cts

 * rts_rate		rts or cts rate in unit of 500kbps

 * rate			next MPDU rate in unit of 500kbps

 * frame_len		next MPDU frame length in bytes

 RTS/CTS */

 CTS-TO-SELF */

 10Mhz is not supported yet */

 bw, stf, coding-type is part of rspec_phytxbyte2 returns */

 set the upper byte of phyctl1 */

		/*

		 * In CCK mode LPPHY overloads OFDM Modulation bits with CCK

		 * Data Rate. Eventually MIMOPHY would also be converted to

		 * this format

 0 = 1Mbps; 1 = 2Mbps; 2 = 5.5Mbps; 3 = 11Mbps */

 legacy OFDM/CCK */

 get the phyctl byte from rate phycfg table */

 set the upper byte of phyctl1 */

/*

 * Add struct d11txh, struct cck_phy_hdr.

 *

 * 'p' data must start with 802.11 MAC header

 * 'p' must allow enough bytes of local headers to be "pushed" onto the packet

 *

 * headroom == D11_PHY_HDR_LEN + D11_TXH_LEN (D11_TXH_LEN is now 104 bytes)

 *

 locate 802.11 MAC header */

 compute length of frame in bytes for use in PLCP computations */

 Get tx_info */

 add PLCP */

 add Broadcom tx descriptor header */

 setup frameid */

 non-AP STA should never use BCMC queue */

 Increment the counter for first fragment */

 extract fragment number from frame first */

 set the ignpmq bit for all pkts tx'd in PS mode and for beacons */

	/*

	 * if rate control algorithm didn't give us a fallback

	 * rate, use the primary rate

		/*

		 * Currently only support same setting for primay and

		 * fallback rates. Unify flags for each rate into a

		 * single value for the frame

		/*

		 * (1) RATE:

		 *   determine and validate primary rate

		 *   and fallback rates

 set tx antenna config */

			/*

			 * apply siso/cdd to single stream mcs's or ofdm

			 * if rspec is auto selected

 For SISO MCS use STBC if possible */

 Nss for single stream is always 1 */

			/*

			 * Is the phy configured to use 40MHZ frames? If

			 * so then pick the desired txbw

 default txbw is 20in40 SB */

 mcs 32 must be 40b/w DUP */

 use override */

 else check if dst is using 40 Mhz */

				/*

				 * mcs32 is 40 b/w only.

				 * This is possible for probe packets on

				 * a STA during SCAN

 mcs 0 */

 Set channel width */

 Disable short GI, not supported yet */

				/*

				 * if SGI is selected, then forced mm

				 * for single stream

 should be better conditionalized */

 Set ctrlchbw as 20Mhz */

 for nphy, stf of ofdm frames must follow policies */

 Reset these for use with AMPDU's */

 (2) PROTECTION, may change rspec */

	/* (3) PLCP: determine PLCP header and MAC duration,

 Length field now put in CCK FBR CRC field */

 MIMO-RATE: need validation ?? */

 DUR field for main rate */

 NAV protect to end of next max packet size */

 DUR field for fallback rate */

 (4) MAC-HDR: MacTxControlLow */

 set AMIC bit if using hardware TKIP MIC */

 MacTxControlHigh */

 Set fallback rate preamble type */

 MacFrameControl */

 TxFrameRA */

 TxFrameID */

	/*

	 * TxStatus, Note the case of recreating the first frag of a suppressed

	 * frame then we may need to reset the retry cnt's via the status reg

	/*

	 * extra fields for ucode AMPDU aggregation, the new fields are added to

	 * the END of previous structure so that it's compatible in driver.

	/* (5) RTS/CTS: determine RTS/CTS PLCP header and MAC duration,

 RTS PLCP header and RTS frame */

 RTS/CTS additions to MacTxControlLow */

 RTS PLCP header */

 fallback rate version of RTS PLCP header */

 RTS frame fields... */

 fallback rate version of RTS DUR field */

		/* mainrate

		 *    low 8 bits: main frag rate/mcs,

		 *    high 8 bits: rts/cts rate/mcs

 add null delimiter count */

	/*

	 * Now that RTS/RTS FB preamble types are updated, write

	 * the final value

	/*

	 * MainRates (both the rts and frag plcp rates have

	 * been calculated now)

 XtraFrameTypes */

 PhyTxControlWord */

 phytxant is properly bit shifted */

 PhyTxControlWord_1 */

		/*

		 * For mcs frames, if mixedmode(overloaded with long preamble)

		 * is going to be set, fill in non-zero MModeLen and/or

		 * MModeFbrLen it will be unnecessary if they are separated

 WME: Update TXOP threshold */

 1 RTS or CTS-to-self frame */

 (SIFS + CTS) + SIFS + frame + SIFS + ACK */

 frame + SIFS + ACK */

 NEED to set TxFesTimeNormal (hard) */

			/*

			 * NEED to set fallback rate version of

			 * TxFesTimeNormal (hard)

			/*

			 * update txop byte threshold (txop minus intraframe

			 * overhead)

 range bound the fragthreshold */

 update the fragthresh and do txc update */

		/*

		 * We sometimes get a frame from mac80211 after stopping

		 * the queues. This only ever seems to be a single frame

		 * and is seems likely to be a race. TX_HEADROOM should

		 * ensure that we have enough space to handle these stray

		 * packets, so warn if there isn't. If we're out of space

		 * in the tx ring and the tx queue isn't stopped then

		 * we've really got a bug; warn loudly if that happens.

	/* When a BC/MC frame is being committed to the BCMC fifo

	 * via DMA (NOT PIO), update ucode or BSS info as appropriate.

 Commit BCMC sequence number in the SHM frame ID location */

		/*

		 * To inform the ucode of the last mcast frame posted

		 * so that it can clear moredata bit

	/*

	 * The only reason for brcms_c_txfifo to fail is because

	 * there weren't any DMA descriptors, but we've already

	 * checked for that. So if it does fail yell loudly.

 packet discarded */

	/*

	 * Stop queue if DMA ring is full. Reserve some free descriptors,

	 * as we sometimes receive a frame from mac80211 after the queues

	 * are stopped.

 use frame rate as rts rate */

		/* Use 11Mbps as the g protection RTS target rate and fallback.

		 * Use the brcms_basic_rate() lookup to find the best basic rate

		 * under the target in case 11 Mbps is not Basic.

		 * 6 and 9 Mbps are not usually selected by rate selection, but

		 * even if the OFDM rate we are protecting is 6 or 9 Mbps, 11

		 * is more robust.

		/* calculate RTS rate and fallback rate based on the frame rate

		 * RTS must be sent at a basic rate since it is a

		 * control frame, sec 9.6 of 802.11 spec

 set rts txbw to correct side band */

		/*

		 * if rspec/rspec_fallback is 40MHz, then send RTS on both

		 * 20MHz channel (DUP), otherwise send RTS on control channel

 pick siso/cdd as default for ofdm */

 Update beacon listen interval in shared memory */

 wake up every DTIM is the default */

 read the tsf timer low, then high to get an atomic read */

/*

 * recover 64bit TSF value from the 16bit TSF value in the rx header

 * given the assumption that the TSF passed in header is within 65ms

 * of the current tsf.

 *

 * 6       5       4       4       3       2       1

 * 3.......6.......8.......0.......2.......4.......6.......8......0

 * |<---------- tsf_h ----------->||<--- tsf_l -->||<-RxTSFTime ->|

 *

 * The RxTSFTime are the lowest 16 bits and provided by the ucode. The

 * tsf_l is filled in by brcms_b_recv, which is done earlier in the

 * receive call sequence after rx interrupt. Only the higher 16 bits

 * are used. Finally, the tsf_h is read from the tsf register.

	/*

	 * a greater tsf time indicates the low 16 bits of

	 * tsf_l wrapped, so decrement the high 16 bits.

 fill in TSF and flag its presence */

 noise */

 qual */

		/*

		 * For 5GHz, we should decrease the index as it is

		 * a subset of the 2.4G rates. See bitrates field

		 * of brcms_band_5GHz_nphy (in mac80211_if.c).

 Determine short preamble and rate_idx */

 mac header+body length, exclude CRC and plcp header */

 unmute transmit */

/* calculate frame duration for Mixed-mode L-SIG spoofing, return

 * number of bytes goes in the length field

 *

 * Formula given by HT PHY Spec v 1.13

 *   len = 3(nsyms + nstream + 3) - 3

		/*

		 * the payload duration calculation matches that

		 * of regular ofdm

 1000Ndbps = kbps * 4 */

 STBC needs to have even number of symbols */

 (+3) account for HT-SIG(2) and HT-STF(1) */

		/*

		 * 3 bytes/symbol @ legacy 6Mbps rate

		 * (-3) excluding service bits and tail bits

	/*

	 * walk the phy rate table and update MAC core SHM

	 * basic rate table entries

 Calculate the Probe Response PLCP for the given rate */

		/*

		 * Calculate the duration of the Probe Response

		 * frame plus SIFS for the MAC

 Update the SHM Rate Table entry Probe Response values */

 Get tx_info */

 "Regular" and 16 MBSS but not for 4 MBSS */

 Update the phytxctl for the beacon based on the rspec */

 write the probe response into the template region */

 write beacon length to SCR */

 write the probe response into the template region */

 write beacon length to SCR */

 Hardware beaconing for this config */

	/* Check if both templates are in use, if so sched. an interrupt

	 *      that will call back into this routine

 clear any previous status */

 mark beacon0 valid */

	/* Check that after scheduling the interrupt both of the

	 *      templates are still busy. if not clear the int. & remask

 mark beacon0 valid */

 mark beacon0 valid */

/*

 * Update all beacons for the system.

 Clear the soft intmask */

 add PLCP */

 add PLCP */

	/*

	 * prevent ucode from sending probe responses by setting the timeout

	 * to 1, it can not send it in that time frame.

 TODO: if (enable) => also deactivate receiving of probe request */

 Write ssid into shared memory */

 padding the ssid with zero and copy it into shm */

 write the probe response into the template region */

 write the length of the probe response frame (+PLCP/-FCS) */

 write the SSID and SSID length */

	/*

	 * Write PLCP headers and durations for probe response frames

	 * at all rates. Use the actual frame length covered by the

	 * PLCP header for the call to brcms_c_mod_prb_rsp_rate_table()

	 * by subtracting the PLCP len and adding the FCS.

 update AP or IBSS probe responses */

/*

 * Flag 'scan in progress' to withhold dynamic phy calibration

/*

 * When a remote STA/AP is removed by Mac80211, or when it can no longer accept

 * AMPDU traffic, packets pending in hardware have to be invalidated so that

 * when later on hardware releases them, they can be handled appropriately.

 Kick DMA to send any pending AMPDU */

 read the tsf timer low, then high to get an atomic read */

 Remove override bit and clip to max qdbm value */

 Return qdbm units */

 Process received frames */

/*

 * Return true if more frames need to be processed. false otherwise.

 * Param 'bound' indicates max. # frames to process before break out.

 frame starts with rxhdr */

 strip off rxhdr */

 MAC inserts 2 pad bytes for a4 headers or QoS or A-MSDU subframes */

 check received pkt has at least frame control field */

 not supporting A-MSDU */

 Process received frames */

/*

 * Return true if more frames need to be processed. false otherwise.

 * Param 'bound' indicates max. # frames to process before break out.

 gather received frames */

 !give others some time to run! */

 post more rbufs */

 process each frame */

 fixup rx header endianness */

/* second-level interrupt processing

 *   Return true if another dpc needs to be re-scheduled. false otherwise.

 *   Param 'bounded' indicates if applicable loops should be bounded.

 grab and clear the saved software intstatus bits */

 PRQ Interrupt in non-MBSS */

 tx status */

 ATIM window end */

	/*

	 * received data or control frame, MI_DMAINT is

	 * indication of RX_FIFO interrupt

 noise sample collected */

 gptimer timeout */

 BCN template is available */

 it isn't done and needs to be resched if macintstatus is non-zero */

 update beacon listen interval */

 write ethernet address to core */

 Update tsf_cfprep if associated and up */

 get beacon period and convert to uS */

		/*

		 * update since init path would reset

		 * to default value

 Update maccontrol PM related bits */

 init probe response timeout */

 init max burst txop (framebursting) */

 initialize maximum allowed duty cycle */

	/*

	 * Update some shared memory locations related to

	 * max AMPDU size allowed to received

 band-specific inits */

 Enable EDCF mode (while the MAC is suspended) */

 read the ucode version if we have not yet done so */

 ..now really unleash hell (allow the MAC out of suspend) */

 suspend the tx fifos and mute the phy for preism cac time */

 enable the RF Disable Delay timer */

	/*

	 * Initialize WME parameters; if they haven't been set by some other

	 * mechanism (IOVar, etc) then read them from the hardware.

 Uninitialized; read from HW */

/*

 * The common driver entry routine. Error codes should be unique

 allocate struct brcms_c_info state and its substructures */

 populate struct brcms_c_info with default values  */

 update sta/ap related parameters */

	/*

	 * low level attach steps(all hw accesses go

	 * inside, no more in rest of the attach)

 disable allowed duty cycle */

 txchain 1: txant 0, txchain 2: txant 1 */

 push to BMAC driver */

 pull up some info resulting from the low attach */

 default contention windows size limits */

 init gmode value */

 init _n_enab supported mode */

 init per-band default rateset, depend on band->gmode */

 fill in hw_rateset */

	/*

	 * update antenna config due to

	 * wlc->stf->txant/txchain/ant_rx_ovr change

 attach each modules */

 depend on rateset, gmode */

 init default when all parameters are ready, i.e. ->rateset */

	/*

	 * Complete the wlc default state initializations..

 Set default values of SGI */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

/*

 * Description: This function make 16 bit unsigned multiplication.

 * To fit the output into 16 bits the 32 bit multiplication result is right

 * shifted by 16 bits.

/*

 * Description: This function make 16 bit multiplication and return the result

 * in 16 bits. To fit the multiplication result into 16 bits the multiplication

 * result is right shifted by 15 bits. Right shifting 15 bits instead of 16 bits

 * is done to remove the extra sign bit formed due to the multiplication.

 * When both the 16bit inputs are 0x8000 then the output is saturated to

 * 0x7fffffff.

/*

 * Description: This function add two 32 bit numbers and return the 32bit

 * result. If the result overflow 32 bits, the output will be saturated to

 * 32bits.

/*

 * Description: This function add two 16 bit numbers and return the 16bit

 * result. If the result overflow 16 bits, the output will be saturated to

 * 16bits.

/*

 * Description: This function make 16 bit subtraction and return the 16bit

 * result. If the result overflow 16 bits, the output will be saturated to

 * 16bits.

/*

 * Description: This function make a 32 bit saturated left shift when the

 * specified shift is +ve. This function will make a 32 bit right shift when

 * the specified shift is -ve. This function return the result after shifting

 * operation.

/*

 * Description: This function make a 16 bit saturated left shift when the

 * specified shift is +ve. This function will make a 16 bit right shift when

 * the specified shift is -ve. This function return the result after shifting

 * operation.

/*

 * Description: This function make a 16 bit right shift when shift is +ve.

 * This function make a 16 bit saturated left shift when shift is -ve. This

 * function return the result of the shift operation.

/*

 * Description: This function return the number of redundant sign bits in a

 * 32 bit number. Example: qm_norm32(0x00000080) = 23

 This table is log2(1+(i/32)) where i=[0:1:32], in q.15 format */

 log_table size */

 log2(log_table size) */

 qformat of log_table */

 log10(2) in q.16 */

/*

 * Description:

 * This routine takes the input number N and its q format qN and compute

 * the log10(N). This routine first normalizes the input no N.	Then N is in

 * mag*(2^x) format. mag is any number in the range 2^30-(2^31 - 1).

 * Then log2(mag * 2^x) = log2(mag) + x is computed. From that

 * log10(mag * 2^x) = log2(mag * 2^x) * log10(2) is computed.

 * This routine looks the log2 value in the table considering

 * LOG2_LOG_TABLE_SIZE+1 MSBs. As the MSB is always 1, only next

 * LOG2_OF_LOG_TABLE_SIZE MSBs are used for table lookup. Next 16 MSBs are used

 * for interpolation.

 * Inputs:

 * N - number to which log10 has to be found.

 * qN - q format of N

 * log10N - address where log10(N) will be written.

 * qLog10N - address where log10N qformat will be written.

 * Note/Problem:

 * For accurate results input should be in normalized or near normalized form.

 normalize the N. */

	/* The qformat of N after normalization.

	 * -30 is added to treat the no as between 1.0 to 2.0

	 * i.e. after adding the -30 to the qformat the decimal point will be

	 * just rigtht of the MSB. (i.e. after sign bit and 1st MSB). i.e.

	 * at the right side of 30th bit.

	/* take the table index as the LOG2_OF_LOG_TABLE_SIZE bits right of the

 remove the MSB. the MSB is always 1 after normalization. */

 remove the (1+LOG2_OF_LOG_TABLE_SIZE) MSBs in the N. */

	/* take the offset as the 16 MSBS after table index.

 look the log value in the table. */

 q.15 format */

 interpolate using the offset. q.15 format. */

 q.15 format */

	/* adjust for the qformat of the N as

	 * log2(mag * 2^x) = log2(mag) + x

 q.15 format */

 normalize the result. */

 bring all the important bits into lower 16 bits */

 q.15+s16norm-16 format */

	/* compute the log10(N) by multiplying log2(N) with log10(2).

	 * as log10(mag * 2^x) = log2(mag * 2^x) * log10(2)

	 * log10N in q.15+s16norm-16+1 (LOG10_2 is in q.16)

 write the q format of the result. */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 RFOverride0_old */

 idleTssi */

 idleTssi */

 fixed gm_gain value for iPA */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 basic mux operation - can be optimized on several architectures */

 modulo inc/dec - assumes x E [0, bound - 1] */

 modulo inc/dec, bound = 2^k */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 5357 Chip specific ChipControl register bits */

 extPA in ChipControl 1, bit 14 */

 2o3 in ChipControl 1, bit 15 */

 use the provided transmit power */

 RfctrlMiscReg6_save */

 RADIO_2055_WBRSSI_G2_SEL */

 RADIO_2055_WBRSSI_G1_SEL */

 lpf_bw_ctl_miscreg3 */

 lpf_bw_ctl_miscreg4 */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 ****************** SDIO CARD Interface Functions **************************/

 Maximum milliseconds to wait for F2 to come up */

 max rx frames in glom chain */

	/* out-of-band interrupt is level-triggered which won't

	 * be cleared until dpc

 dummy handler for SDIO function 2 interrupt */

 assign GPIO to SDIO core */

 must configure SDIO_CCCR_IENx to enable irq */

 redirect, configure and enable io for interrupt signal */

 any other state means bus interface is down */

 transition from DOWN to DATA means bus interface is up */

 Single skb use the standard mmc interface */

 bail out as things are really fishy here */

 Single skb use the standard mmc interface */

 address */

 block count */

 incrementing addr for function 1 */

/**

 * brcmf_sdiod_sglist_rw - SDIO interface function for block data access

 * @sdiodev: brcmfmac sdio device

 * @func: SDIO function

 * @write: direction flag

 * @addr: dongle memory address as source/destination

 * @pktlist: skb buffer head pointer

 *

 * This function takes the respbonsibility as the interface function to MMC

 * stack for block data access. It assumes that the skb passed down by the

 * caller has already been padded and aligned.

 for host with broken sg support, prepare a page aligned list */

 write flag  */

 SDIO func num */

 block mode */

 for function 1 the addr will be incremented */

			/* This is safe because we must have enough SKB data

			 * in the local list to cover everything in pktlist.

 Determine initial transfer parameters */

 Do the transfer(s) */

 Set the backplane window to include the start address */

 Adjust for next transfer (if any) */

 Issue abort cmd52 command through F0 */

 CONFIG_PM_SLEEP */

 Disable Function 2 */

 Disable Function 1 */

 runtime-pm powers off the device */

 avoid removal detection upon resume */

 increase F2 timeout */

 Enable Function 1 */

 try to attach to the target device */

 devices we support, null terminated */

 end: all zeroes */ }

 Set MMC_QUIRK_LENIENT_FN0 for this card */

 prohibit ACPI power management for this device */

 Consume func num 1 but dont do anything with it. */

 Ignore anything but func 2 */

	/* store refs to functions used. mmc_card does

	 * not hold the F0 function pointer.

 start by unregistering irqs */

 only proceed with rest of cleanup if func 1 */

 preserve card power during suspend */

 power will be cut so remove device, probe again in resume */

 bus was powered off and device removed, probe again */

 CONFIG_PM_SLEEP */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: ISC

/*

 * Copyright 2018 Hans de Goede <hdegoede@redhat.com>

 The DMI data never changes so we can use a static buf for this */

 NOTE: Please keep all entries sorted alphabetically */

/* Note the Voyo winpad A15 tablet uses the same Ampak AP6330 module, with the

 * exact same nvram file as the Prowise-PT301 tablet. Since the nvram for the

 * Prowise-PT301 is already in linux-firmware we just point to that here.

 ACEPC T8 Cherry Trail Z8350 mini PC */

 also match on somewhat unique bios-version */

 ACEPC T11 Cherry Trail Z8350 mini PC, same wifi as the T8 */

 also match on somewhat unique bios-version */

 Cyberbook T116 rugged tablet */

 The factory image nvram file is identical to the ACEPC T8 one */

		/* Match for the GPDwin which unfortunately uses somewhat

		 * generic dmi strings, which is why we test for 4 strings.

		 * Comparing against 23 other byt/cht boards, board_vendor

		 * and board_name are unique to the GPDwin, where as only one

		 * other board has the same board_serial and 3 others have

		 * the same default product_name. Also the GPDwin is the

		 * only device to have both board_ and product_name not set.

 Jumper EZpad mini3 */

 jumperx.T87.KFBNEEA02 with the version-nr dropped */

 Meegopad T08 */

 Point of View TAB-P1006W-232 */

 Note 105b is Foxcon's USB/PCI vendor id */

 Predia Basic tablet (+ with keyboard dock) */

 Mx.WT107.KUBNGEA02 with the version-nr dropped */

 Voyo winpad A15 tablet */

 Above strings are too generic, also match on BIOS date */

	/* Some models have DMI strings which are too generic, e.g.

	 * "Default string", we use a quirk table for these.

 Not found in the quirk-table, use sys_vendor-product_name */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 Toplevel file. Relies on dhd_linux.c to send commands to the dongle. */

 WPA OUI */

 RSN OUI */

 None */

 WEP (40-bit) */

 TKIP: default for WPA */

 AES (CCM) */

 WEP (104-bit) */

 None (IBSS) */

 Over 802.1x */

 Pre-shared Key */

 SHA256, 802.1X */

 SHA256, Pre-shared Key */

 SAE */

 Length of RSN capabilities */

#define VNDR_IE_CMD_LEN			4	/* length of the set command

						 * string :"add", "del" (+ NUL)

 d11 management header len */

 beacon/probe fixed length */

/* Band templates duplicated per wiphy. The channel info

 * above is added to the band during setup.

/* This is to override regulatory domains defined in cfg80211 module (reg.c)

 * By default world regulatory domain defined in reg.c puts the flags

 * NL80211_RRF_NO_IR for 5GHz channels (for * 36..48 and 149..165).

 * With respect to these flags, wpa_supplicant doesn't * start p2p

 * operations on 5GHz channels. All the changes in world regulatory

 * domain are to be done here.

 IEEE 802.11b/g, channels 1..11 */

 If any */

		/* IEEE 802.11 channel 14 - Only JP enables

		 * this and for 802.11b only

 IEEE 802.11a, channel 36..64 */

 IEEE 802.11a, channel 100..165 */

/* Note: brcmf_cipher_suites is an array of int defining which cipher suites

 * are supported. A pointer to this array and the number of entries is passed

 * on to upper layers. AES_CMAC defines whether or not the driver supports MFP.

 * So the cipher suite AES_CMAC has to be the last one in the array, and when

 * device does not support MFP then the number of suites will be decreased by 1

 Keep as last entry: */

 Vendor specific ie. id = 221, oui and type defines exact ie */

 total length including id & length field */

/* Traverse a string of 1-byte tag/1-byte length/variable-length value

 * triples, returning a pointer to the substring whose first element

 * matches tag

 find tagged parameter */

 validate remaining totlen */

/* Is any of the tlvs the expected entry? If

 * not update the tlvs buffer pointer/length.

 If the contents match the OUI and the type */

 point to the next ie */

 calculate the length of the rest of the buffer */

 update the pointer to the start of the buffer */

 concurrent interfaces so need check combinations */

 bsscfgidx 1 is reserved for legacy P2P */

/**

 * brcmf_ap_add_vif() - create a new AP virtual interface for multiple BSS

 *

 * @wiphy: wiphy device of new interface.

 * @name: name of the new interface.

 * @params: contains mac address for AP device.

 wait for firmware event */

 interface created in firmware */

/**

 * brcmf_mon_add_vif() - create monitor mode virtual interface

 *

 * @wiphy: wiphy device of new interface.

 * @name: name of the new interface.

 clear scan request, because the FW abort can cause a second call */

 to this functon and might cause a double cfg80211_scan_done      */

 Do a scan abort to stop the driver's scan engine */

 Scan is aborted by setting channel_list[0] to -1 */

 E-Scan (or anyother type) can be aborted by SCAN */

	/*

	 * e-scan can be initiated internally

	 * which takes precedence.

 wait for firmware event */

 vif event pending in firmware */

	/* WAR: There are a number of p2p interface related problems which

	 * need to be handled initially (before doing the validate).

	 * wpa_supplicant tends to do iface changes on p2p device/client/go

	 * which are not always possible/allowed. However we need to return

	 * OK otherwise the wpa_supplicant wont start. The situation differs

	 * on configuration and setup (p2pon=1 module param). The first check

	 * is to see if the request is a change to station for p2p iface.

		/* Now depending on whether module param p2pon=1 was used the

		 * response needs to be either 0 or EOPNOTSUPP. The reason is

		 * that if p2pon=1 is used, but a newer supplicant is used then

		 * we should return an error, as this combination wont work.

		 * In other situations 0 is returned and supplicant will start

		 * normally. It will give a trace in cfg80211, but it is the

		 * only way to get it working. Unfortunately this will result

		 * in situation where we wont support new supplicant in

		 * combination with module param p2pon=1, but that is the way

		 * it is. If the user tries this then unloading of driver might

		 * fail/lock.

 Copy channel array if applicable */

 Copy ssid array if applicable */

 Adding mask to channel numbers */

 Allocate space for populating ssids in struct */

 Allocate space for populating ssids in struct */

 If scan req comes for p2p0, send it over primary I/F */

 Arm scan timeout timer */

 convert to firmware key format */

 store psk in firmware */

 Configure Privacy for starter */

 Configure Beacon Interval for starter */

 Configure required join parameter */

 SSID */

 BSSID */

 Channel */

 adding chanspec */

 set channel for starter */

		/* When driver is being unloaded, it can end up here. If an

		 * error is returned then later on a debug trace in the wireless

		 * core module will be printed. To avoid this 0 is returned.

 In case of privacy, but no security and WPS then simulate */

 setting AES. WPS-2.0 allows no security                   */

	/* The MFP mode (1 or 2) needs to be determined, parse IEs. The

	 * IE will not be verified, just a quick search for MFP config

 Skip unicast suite */

 Skip multicast suite */

 Skip auth key management suite(s) */

 Ready to read capabilities */

 Set the new key/index */

 shared key */

 A normal (non P2P) connection request setup. */

 find the WPA_IE */

 find the RSN_IE */

 enable firmware supplicant for this interface */

 clean up user-space RSNE */

	/* Join with specific BSSID and cached SSID

	 * If SSID is zero join based on BSSID only

 Set up join scan parameters */

		/* Increase dwell time to receive probe response or detect

		 * beacon from target AP at a noisy air only during connect

		 * command.

		/* To sync with presence period of VSDB GO send probe request

		 * more frequently. Probe request will be stopped when it gets

		 * probe response from target AP/GO.

 This is it. join command worked, we are done */

 join command failed, fallback to set ssid */

 Make sure radio is off or on as far as software is concerned */

 Just select a new current key */

 we ignore this key index in this case */

 Clear the key/index */

 we ignore this key index in this case */

 rx iv */

 Ignore this error, may happen during DISASSOC */

 Get the current tx rate */

 GET_ASSOCLIST unsupported by firmware of older chips */

	/*

	 * Powersave enable/disable request is coming from the

	 * cfg80211 even before the interface is up. In that

	 * scenario, driver will be storing the power save

	 * preference in cfg struct to apply this to

	 * FW later while initializing the dongle

 Do not enable the power save after assoc if it is a p2p interface */

 must be initialized */

		/*

		* active scan was done so we could not get dtim

		* information out of probe response.

		* so we speficially query dtim information to dongle.

			/* preserve max RSSI if the measurements are

			* both on-channel or both off-channel

			/* preserve the on-channel rssi measurement

			* if the new measurement is off channel

 Init scan_timeout timer */

 Abort any on-going scan */

/* PFN result doesn't have all the info which are required by the supplicant

 * (For e.g IEs) Do a target Escan so that sched scan results are reported

 * via wl_inform_single_bss in the required format. Escan does require the

 * scan request in the form of cfg80211_scan_request. For timebeing, create

 * cfg80211_scan_request one out of the received PNO event.

	/* PFN event is limited to fit 512 bytes so we may get

	 * multiple NET_FOUND events. For now place a warning here.

 Inform (the resume task) that the net detect information was recvd */

			/* For now always map to pattern 0, no API to get

			 * correct information available at the moment.

 CONFIG_PM */

 Now reroute the event for PFN to the wowl function. */

	/* if the primary net_device is not READY there is nothing

	 * we can do but pray resume goes smoothly.

 Stop scheduled scan */

 end any scanning */

			/* While going to suspend if associated with AP

			 * disassociate from AP to save power while system is

			 * in suspended state

			/* Make sure WPA_Supplicant receives all the event

			 * generated due to DISASSOC call to the fw to keep

			 * the state fw and WPA_Supplicant state consistent

 Configure MPC */

 Configure WOWL paramaters */

 clear any scanning activity */

 set auth */

 set wsec */

 set upper-layer auth */

 d11 open authentication */

 check for multicast cipher suite */

 pick up multicast cipher */

 walk thru unicast cipher list and pick up what we recognize */

 Check for unicast suite(s) */

 walk thru auth management suite list and pick up what we recognize */

 Check for auth key management suite(s) */

				/* Firmware only supports mfp required in

				 * combination with WPA2_AUTH_PSK_SHA256,

				 * WPA2_AUTH_1X_SHA256, or WPA3_AUTH_SAE_PSK.

				/* Firmware has requirement that WPA2_AUTH_PSK/

				 * WPA2_AUTH_UNSPECIFIED be set, if SHA256 OUI

				 * is to be included in the rsn ie.

 set wme_bss_disable to sync RSN Capabilities */

 Skip PMKID cnt as it is know to be 0 for AP. */

 See if there is BIP wpa suite left for MFP */

 FOR WPS , set SES_OW_ENABLED */

 set auth */

 set wsec */

	/* Configure MFP, this needs to go after wsec otherwise the wsec command

	 * will overwrite the values set by MFP

 set upper-layer auth */

 len should be bigger than OUI length + one */

 if wpa or wme ie, do not add ie */

 save vndr ie information */

 parse and save new vndr_ie in curr_ie_buff before comparing it */

 parse old vndr_ie */

 make a command to delete old ie */

 Add if there is any extra IE */

 make a command to add new ie */

 verify remained buf size before copy data */

 save the parsed IE in wl struct */

 Set Beacon IEs to FW */

 Set Probe Response IEs to FW */

 Set Assoc Response IEs to FW */

 find the RSN_IE */

 find the WPA_IE */

 WPA IE */

 RSN IE */

 store current 11d setting */

 Parameters shared by all radio interfaces */

 Multiple-BSS should use same 11d configuration */

 Interface specific setup */

			/* Firmware 10.x requires setting channel after enabling

			 * AP and before bringing interface up.

		/* On DOWN the firmware removes the WEP keys, reconfigure

		 * them if they were set.

 join parameters starts with ssid */

 create softap */

 Due to most likely deauths outstanding we sleep */

 first to make sure they get processed by fw. */

 First BSS doesn't get a full reset */

 Bring device back up so it can be used again */

 Ignore all 00 MAC */

 Right now the only reason to get a probe response */

 is for p2p listen response or for p2p GO from     */

 wpa_supplicant. Unfortunately the probe is send   */

 on primary ndev, while dongle wants it on the p2p */

 vif. Since this is only reason for a probe        */

 response to be sent, the vif is taken from cfg.   */

 If ever desired to send proberesp for non p2p     */

 response then data should be checked for          */

 "DIRECT-". Note in future supplicant will take    */

 dedicated p2p wdev to do this and then this 'hack'*/

 is not needed anymore.                            */

 Add the packet Id */

 Add BSSID */

 Add the length exepted for 802.11 header  */

		/* Add the channel. Use the one specified as parameter if any or

		 * the current one (got from the firmware) otherwise

		/* The firmware will send an event when the RSSI is less than or

		 * equal to a configured level and the previous RSSI event was

		 * less than or equal to a different level. Set a third level

		 * so that we also detect the transition from rssi <= rssi_high

		 * to rssi > rssi_high.

 only DHCP support for now */

 suppress and abort scanning */

 expect using firmware supplicant for 1X */

	/* For those AC(s) with ACM flag set to 1, convert its 4-level priority

	 * to an 8-level precedence which is the same as BE's

 Conversion of 4-level priority to 8-level precedence */

	/* Prio here refers to the 802.1d priority in range of 0 to 7.

	 * ACI here refers to the WLAN AC Index in range of 0 to 3.

	 * This function will return ACI corresponding to input prio.

	/* Initialize AC priority array to default

	 * 802.1d priority as per following table:

	 * 802.1d prio 0,3 maps to BE

	 * 802.1d prio 1,2 maps to BK

	 * 802.1d prio 4,5 maps to VI

	 * 802.1d prio 6,7 maps to VO

 AC_BE, AC_BK, AC_VI, AC_VO */

 Default AC_VO will be the lowest ranking value */

 Initialise priority starting at 0 (AC_BE) */

		/* If ACM is set, STA can't use this AC as per 802.11.

		 * Change the ranking to BE

	/* Ranking method which works for AC priority

	 * swapping when values for cwmin, cwmax and aifsn are varied

	 * Compare each aci_prio against each other aci_prio

				/* Smaller ranking value has higher priority,

				 * so increment priority for each ACI which has

				 * a higher ranking value

	/* By now, aci_prio[] will be in range of 0 to 3.

	 * Use ACI prio to get the new priority value for

	 * each 802.1d traffic type, in this range.

 802.1d 0,3 maps to BE */

 802.1d 1,2 maps to BK */

 802.1d 4,5 maps to VO */

 802.1d 6,7 maps to VO */

 Initialize to default priority */

 data sent to dongle has to be little endian */

 waiting process may have timed out */

 event may not be upon user request */

 dongle is not up yet */

 dongle down */

 Configure beacon timeout value based upon roaming setting */

	/* Enable/Disable built-in roaming to allow supplicant to take care of

	 * roaming.

		/* It should be one of

		 * IEEE80211_CHAN_NO_HT40 or

		 * IEEE80211_CHAN_NO_HT40PLUS

			/* It seems firmware supports some channel we never

			 * considered. Something new in IEEE standard?

		/* assuming the chanspecs order is HT20,

		 * HT40 upper, HT40 lower, and VHT80.

			/* enable the channel and disable other bandwidths

			 * for now as mentioned order assure they are enabled

			 * for subsequent chanspecs.

 verify support for bw_cap command */

 only set 2G bandwidth using bw_cap command */

 update channel info in 2G band */

 pass encoded chanspec in query */

 assume 20MHz if firmware does not give a clue */

 not allowed in 2.4G band */

 80MHz is mandatory */

 all support 256-QAM */

 Beamforming support information */

 rxchain unsupported by firmware of older chips */

/**

 * brcmf_setup_ifmodes() - determine interface modes and combinations.

 *

 * @wiphy: wiphy object.

 * @ifp: interface object needed for feat module api.

 *

 * The interface modes and combinations are determined dynamically here

 * based on firmware functionality.

 *

 * no p2p and no mbss:

 *

 *	#STA <= 1, #AP <= 1, channels = 1, 2 total

 *

 * no p2p and mbss:

 *

 *	#STA <= 1, #AP <= 1, channels = 1, 2 total

 *	#AP <= 4, matching BI, channels = 1, 4 total

 *

 * no p2p and rsdb:

 *	#STA <= 1, #AP <= 2, channels = 2, 4 total

 *

 * p2p, no mchan, and mbss:

 *

 *	#STA <= 1, #P2P-DEV <= 1, #{P2P-CL, P2P-GO} <= 1, channels = 1, 3 total

 *	#STA <= 1, #P2P-DEV <= 1, #AP <= 1, #P2P-CL <= 1, channels = 1, 4 total

 *	#AP <= 4, matching BI, channels = 1, 4 total

 *

 * p2p, mchan, and mbss:

 *

 *	#STA <= 1, #P2P-DEV <= 1, #{P2P-CL, P2P-GO} <= 1, channels = 2, 3 total

 *	#STA <= 1, #P2P-DEV <= 1, #AP <= 1, #P2P-CL <= 1, channels = 1, 4 total

 *	#AP <= 4, matching BI, channels = 1, 4 total

 *

 * p2p, rsdb, and no mbss:

 *	#STA <= 1, #P2P-DEV <= 1, #{P2P-CL, P2P-GO} <= 2, AP <= 2,

 *	 channels = 2, 4 total

 vendor commands/events support */

 first entry in bandlist is number of bands */

 make sure RF is ready for work */

	/*

	 * While going down, if associated with AP disassociate

	 * from AP to save power

		/* Make sure WPA_Supplicant receives all the event

		   generated due to DISASSOC call to the fw to keep

		   the state fw and WPA_Supplicant state consistent

 The country code gets set to "00" by default at boot, ignore */

 ignore non-ISO3166 country codes */

 determine d11 io type before wiphy setup */

	/* regulatory notifer below needs access to cfg so

	 * assign it now.

	/* firmware defaults to 40MHz disabled in 2G band. We signal

	 * cfg80211 here that we do and have it decide we can enable

	 * it. But first check if device does support 2G operation.

	/* If cfg80211 didn't disable 40MHz HT CAP in wiphy_register(),

	 * setup 40MHz in 2GHz band and enable OBSS scanning.

 (re-) activate FWEH event handling */

 Fill in some of the advertised nl80211 supported features */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014 Broadcom Corporation

/*******************************************************************************

 * Communicates with the dongle by using dcmd codes.

 * For certain dcmd codes, the dongle interprets string data from the host.

 Data struct for the MSGBUF_TYPE_GEN_STATUS */

 Data struct for the MSGBUF_TYPE_RING_STATUS */

 no need to submit if firmware can not be reached */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2016 Broadcom

 Nothing to do if we have no requests */

 find request */

 request not found */

 if last we are done */

 fill the gap with remaining requests */

 set extra pno params */

 set up pno scan fr */

 set bestn in firmware */

 get max mscan which the firmware supports */

 no random mac requested */

 Clear multi bit */

 Set locally administered */

 Disable pfn */

 clear pfn */

 return number of channels */

	/*

	 * actual scan period is determined using gcd() for each

	 * scheduled scan period.

 assure period is non-zero */

 clean up everything */

 configure pno */

 configure random mac */

 Enable the PNO */

 No PNO request */

 scheduled scan settings */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014 Broadcom Corporation

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2011 Broadcom Corporation

 in unit of ms */

#define BRCMF_POSTBOOT_ID		0xA123  /* ID to detect if dongle

 "HDR0" */

 Max number of file offsets */

 Trx holds uncompressed img */

 size of each dl transfer */

 Control messages: bRequest values */

 returns the rdl_state_t struct */

 currently unused */

 execute downloaded image */

 initialize dl state */

 reboot the device in 2 seconds */

 returns the bootrom_id_t struct */

#define DL_GO_PROTECTED	6	/* execute the downloaded code and set reset

				 * event to occur in 2 seconds.  It is the

				 * responsibility of the downloaded code to

				 * clear this event

 jump to a supplied address */

#define DL_RESETCFG	8	/* To support single enum on dongle

				 * - Not used by bootloader

#define DL_DEFER_RESP_OK 9	/* Potentially defer the response to setup

				 * if resp unavailable

 states */

 waiting to rx first pkt */

#define DL_READY	1	/* hdr was good, waiting for more of the

				 * compressed image

 hdr was corrupted */

 compressed image was corrupted */

 download was successful,waiting for go cmd */

 failed to initialize correctly */

#define DL_NVRAM_TOOBIG	6	/* host specified nvram data exceeds DL_NVRAM

				 * value

 firmware image too big */

 "HDR0" */

 Length of file including header */

 CRC from flag_version to end of file */

 0:15 flags, 16:31 version */

	__le32 offsets[TRX_MAX_OFFSET];	/* Offsets of partitions from start of

					 * header

 Chip id */

 Chip rev */

 Size of  RAM */

 Current remap base address */

 Type of board */

 Board revision */

 MUST BE FIRST */

 buffer for combine fw and nvram */

 URB for control endpoint */

 used for FW download */

 zero length packets indicate usb "failure". Do not refill */

 update state of upper layer */

 Success, indicate devinfo is fully up */

 CTL Write */

 CTL Read */

 Check if firmware downloaded already by querying runtime ID */

 Get the ID */

 Prepare the URB */

 1) Prepare USB boot loader for runtime image */

 2) Check we are in the Waiting state */

 Get chip id and rev */

		/* Wait until the usb device reports it received all

			/* simply avoid having to send a ZLP by ensuring we

			 * never have an even

			 * multiple of 64

 send data */

 restart if an error is reported */

 Check we are runnable */

 Start the image */

 The Dongle may go for re-enumeration. */

 free the URBS */

 Extract trx header */

 flow control when too many tx urbs posted */

 Initialize other structure content */

 Initialize the spinlocks */

 Attach to the common driver interface */

 we are done */

 request firmware here */

 Release resources in reverse order */

	/* Init completion, to protect for disconnect while still loading.

	 * Necessary because of the asynchronous firmware load construction

 Check that the device supports only one configuration */

 Success */

		/* Make sure that devinfo still exists. Firmware probe routines

		 * may have released the device and cleared the intfdata.

/*

 * only need to signal the bus being down and update the state.

/*

 * (re-) start the bus.

 special entry for device with firmware loaded and running */

 end: all zeroes */ }

	/* device past is the usb interface so we

	 * need to use parent here.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2019 Broadcom

 u8 id and u8 len */

 u8 id, u16 len */

 u16 id, u8 len */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014 Broadcom Corporation

 SOC Interconnect types (aka chip types) */

 PL-368 DMP definitions */

 EROM CompIdentB */

 ARM CR4 core specific control flag bits */

 D11 core specific control flag bits */

 chip core base & ramsize */

 bcm4329 */

 SDIO device core, ID 0x829 */

 internal memory core, ID 0x80e */

 ARM Cortex M3 core, ID 0x82a */

 Max possibly supported memory size (limited by IO mapped memory) */

 initiator port ocp slave flag */

 target port ocp slave flag */

 (sonics >= 2.3) */

 (sonics >= 2.3) */

 address match3 */

 address match2 */

 address match1 */

 initiator agent state */

 interrupt mask */

 target state */

 target state */

 bandwidth allocation table0 */

 initiator configuration */

 initiator configuration */

 address match0 */

 target configuration */

 target configuration */

 broadcast configuration */

 broadcast state */

 activate configuration */

 current sbflags */

 identification */

 identification */

 bankidx and bankinfo reg defines corerev >= 8 */

 socram bankinfo memtype */

 rev 6 */

 rev 6 */

 used for patching rev 3 & 5 */

 corev 8 */

 corerev >= 2 */

 corerev >= 15 */

 corerev >= 15 */

 corerev >= 15 */

 corerev >= 15 */

 assured first core is chipcommon, second core is buscore */

		/*

		 * set target reject and spin until busy is clear

		 * (preserve core-specific bits)

 set reset and reject while enabling the clocks */

 clear the initiator reject bit */

 leave reset and reject asserted */

 if core is already in reset, skip reset */

 configure reset */

 put in reset */

 wait till reset is 1 */

 in-reset configure */

	/*

	 * Must do the disable sequence first to work for

	 * arbitrary current core state.

	/*

	 * Now do the initialization sequence.

	 * set reset while enabling the clock and

	 * forcing them on throughout the core

 clear any serror */

 clear reset and allow it to propagate throughout the core */

 leave clock enabled */

 special handle two D11 cores reset */

 must disable first to work for arbitrary current core state */

 safety check for chipinfo */

 check RAM core presence for ARM CM3 core */

 Get info for determining size */

 length of SRAM Banks increased for corerev greater than 23 */

 hardcoded save&restore memory sizes */

		/* assume sr for now as we can not check

		 * firmware sr capability at this point.

* Return the SYS MEM size */

* Return the TCM-RAM size of the ARMCR4 core. */

 read next descriptor */

 determine descriptor type */

 revert erom address */

 locate address descriptor */

 unexpected table end */

 stop if we crossed current component border */

 skip upper 32-bit address descriptor */

 next size descriptor can be skipped */

 skip upper size descriptor if present */

 look for 4K or 8K register regions */

 only regular slave and wrapper */

 need a component descriptor */

 next descriptor must be component as well */

 only look at cores with master port(s) */

 need core with ports */

 try to obtain register address info */

 finally a core to be added */

	/* Get CC core rev

	 * Chipid is assume to be at offset 0 from SI_ENUM_BASE

	 * For different chiptypes or old sdio hosts w/o chipcommon,

	 * other ways of recognition should be added here.

 assure chip is passive for core access */

	/* Call bus specific reset function now. Cores have been determined

	 * but further access may require a chip specific reset at this point.

 clear all IOCTL bits except HALT bit */

 get chipcommon capabilites */

 get pmu caps & rev */

 after reading cc_caps_ext */

 execute bus core specific setup */

 See if there is separated PMU core available */

 Fallback to ChipCommon core for older hardware */

 disable bank #3 remap for this device */

 restore ARM */

 restore ARM */

 old chips with PMU version less than 17 don't support save restore */

 explicitly check SR engine enable bit */

 read PMU chipcontrol register 3 */

 explicitly check SR engine enable bit */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014 Broadcom Corporation

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2013 Broadcom Corporation

 T1 start SCO/eSCO priority suppression */

 BT registers values during DHCP */

 number of samples for SCO detection */

/**

* enum brcmf_btcoex_state - BT coex DHCP state machine states

* @BRCMF_BT_DHCP_IDLE: DCHP is idle

* @BRCMF_BT_DHCP_START: DHCP started, wait before

*	boosting wifi priority

* @BRCMF_BT_DHCP_OPPR_WIN: graceful DHCP opportunity ended,

*	boost wifi priority

* @BRCMF_BT_DHCP_FLAG_FORCE_TIMEOUT: wifi priority boost end,

*	restore defaults

/**

 * struct brcmf_btcoex_info - BT coex related information

 * @vif: interface for which request was done.

 * @timer: timer for DHCP state machine

 * @timeout: configured timeout.

 * @timer_on:  DHCP timer active

 * @dhcp_done: DHCP finished before T1/T2 timer expiration

 * @bt_state: DHCP state machine state

 * @work: DHCP state machine work

 * @cfg: driver private data for cfg80211 interface

 * @reg66: saved value of btc_params 66

 * @reg41: saved value of btc_params 41

 * @reg68: saved value of btc_params 68

 * @saved_regs_part1: flag indicating regs 66,41,68

 *	have been saved

 * @reg50: saved value of btc_params 50

 * @reg51: saved value of btc_params 51

 * @reg64: saved value of btc_params 64

 * @reg65: saved value of btc_params 65

 * @reg71: saved value of btc_params 71

 * @saved_regs_part2: flag indicating regs 50,51,64,65,71

 *	have been saved

/**

 * brcmf_btcoex_params_write() - write btc_params firmware variable

 * @ifp: interface

 * @addr: btc_params register number

 * @data: data to write

/**

 * brcmf_btcoex_params_read() - read btc_params firmware variable

 * @ifp: interface

 * @addr: btc_params register number

 * @data: read data

/**

 * brcmf_btcoex_boost_wifi() - control BT SCO/eSCO parameters

 * @btci: BT coex info

 * @trump_sco:

 *	true - set SCO/eSCO parameters for compatibility

 *		during DHCP window

 *	false - restore saved parameter values

 *

 * Enhanced BT COEX settings for eSCO compatibility during DHCP window

		/* this should reduce eSCO agressive

		 * retransmit w/o breaking it

 save current */

 pacify the eSco   */

 restore previously saved bt params */

/**

 * brcmf_btcoex_is_sco_active() - check if SCO/eSCO is active

 * @ifp: interface

 *

 * return: true if SCO/eSCO session is active

 count both sco & esco  */

/*

 * btcmf_btcoex_save_part1() - save first step parameters.

 Retrieve and save original reg value */

/*

 * brcmf_btcoex_restore_part1() - restore first step parameters.

/*

 * brcmf_btcoex_timerfunc() - BT coex timer callback

/**

 * brcmf_btcoex_handler() - BT coex state machine work handler

 * @work: work

		/* DHCP started provide OPPORTUNITY window

		   to get DHCP address

 DHCP is not over yet, start lowering BT priority */

/**

 * brcmf_btcoex_attach() - initialize BT coex data

 * @cfg: driver private cfg80211 data

 *

 * return: 0 on success

 Set up timer for BT  */

/**

 * brcmf_btcoex_detach - clean BT coex data

 * @cfg: driver private cfg80211 data

 set new regs values */

 Stop any bt timer because DHCP session is done */

 schedule worker if transition to IDLE is needed */

 Restore original values */

/*

 * brcmf_btcoex_set_mode - set BT coex mode

 * @mode: Wifi-Bluetooth coexistence mode

 *

 * return: 0 on success

 Start BT timer only for SCO connection */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2013 Broadcom Corporation

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014 Broadcom Corporation

		/* The property is optional, so return success if it doesn't

		 * exist. Otherwise propagate the error code.

 String format e.g. US-Q2-86 */

 Set board-type to the first string of the machine compatible prop */

 get rid of '/' in the compatible string to be able to find the FW */

 make sure there are interrupts defined in the node */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012 Broadcom Corporation

 parameters used for p2p escan */

 P2P version: 9=WiFi P2P v1.0 */

 P2P OUI */

 P2P OUI length */

 Action Frame Constants */

 action frame category + action */

 category offset */

 action offset */

 WiFi P2P Public Action Frame OUI Subtypes */

 Group Owner Negotiation Req */

 Group Owner Negotiation Rsp */

 Group Owner Negotiation Confirm */

 P2P Invitation Request */

 P2P Invitation Response */

 Device Discoverability Request */

 Device Discoverability Response */

 Provision Discovery Request */

 Provision Discovery Response */

 Invalid Subtype */

 WiFi P2P Action Frame OUI Subtypes */

 Notice of Absence */

 P2P Presence Request */

 P2P Presence Response */

 GO Discoverability Request */

 P2P Service Discovery related */

 Public action frame */

 GAS Initial Request AF */

 GAS Initial Response AF */

 GAS Comback Request AF */

 GAS Comback Response AF */

 Mask for retry counter of custom dwell time */

/**

 * struct brcmf_p2p_disc_st_le - set discovery state in firmware.

 *

 * @state: requested discovery state (see enum brcmf_p2p_disc_state).

 * @chspec: channel parameter for %WL_P2P_DISC_ST_LISTEN state.

 * @dwell: dwell time in ms for %WL_P2P_DISC_ST_LISTEN state.

/**

 * enum brcmf_p2p_disc_state - P2P discovery state values

 *

 * @WL_P2P_DISC_ST_SCAN: P2P discovery with wildcard SSID and P2P IE.

 * @WL_P2P_DISC_ST_LISTEN: P2P discovery off-channel for specified time.

 * @WL_P2P_DISC_ST_SEARCH: P2P discovery with P2P wildcard SSID and P2P IE.

/**

 * struct brcmf_p2p_scan_le - P2P specific scan request.

 *

 * @type: type of scan method requested (values: 'E' or 'S').

 * @reserved: reserved (ignored).

 * @eparams: parameters used for type 'E'.

 * @sparams: parameters used for type 'S'.

/**

 * struct brcmf_p2p_pub_act_frame - WiFi P2P Public Action Frame

 *

 * @category: P2P_PUB_AF_CATEGORY

 * @action: P2P_PUB_AF_ACTION

 * @oui: P2P_OUI

 * @oui_type: OUI type - P2P_VER

 * @subtype: OUI subtype - P2P_TYPE_*

 * @dialog_token: nonzero, identifies req/rsp transaction

 * @elts: Variable length information elements.

/**

 * struct brcmf_p2p_action_frame - WiFi P2P Action Frame

 *

 * @category: P2P_AF_CATEGORY

 * @oui: OUI - P2P_OUI

 * @type: OUI Type - P2P_VER

 * @subtype: OUI Subtype - P2P_AF_*

 * @dialog_token: nonzero, identifies req/resp tranaction

 * @elts: Variable length information elements.

/**

 * struct brcmf_p2psd_gas_pub_act_frame - Wi-Fi GAS Public Action Frame

 *

 * @category: 0x04 Public Action Frame

 * @action: 0x6c Advertisement Protocol

 * @dialog_token: nonzero, identifies req/rsp transaction

 * @query_data: Query Data. SD gas ireq SD gas iresp

/**

 * struct brcmf_config_af_params - Action Frame Parameters for tx.

 *

 * @mpc_onoff: To make sure to send successfully action frame, we have to

 *             turn off mpc  0: off, 1: on,  (-1): do nothing

 * @search_channel: 1: search peer's channel to send af

 * @extra_listen: keep the dwell time to get af response frame.

/**

 * brcmf_p2p_is_pub_action() - true if p2p public type frame.

 *

 * @frame: action frame data.

 * @frame_len: length of action frame data.

 *

 * Determine if action frame is p2p public action type

/**

 * brcmf_p2p_is_p2p_action() - true if p2p action type frame.

 *

 * @frame: action frame data.

 * @frame_len: length of action frame data.

 *

 * Determine if action frame is p2p action type

/**

 * brcmf_p2p_is_gas_action() - true if p2p gas action type frame.

 *

 * @frame: action frame data.

 * @frame_len: length of action frame data.

 *

 * Determine if action frame is p2p gas action type

/**

 * brcmf_p2p_print_actframe() - debug print routine.

 *

 * @tx: Received or to be transmitted

 * @frame: action frame data.

 * @frame_len: length of action frame data.

 *

 * Print information about the p2p action frame

/**

 * brcmf_p2p_set_firmware() - prepare firmware for peer-to-peer operation.

 *

 * @ifp: ifp to use for iovars (primary).

 * @p2p_mac: mac address to configure for p2p_da_override

	/* In case of COB type, firmware has default mac address

	 * After Initializing firmware, we have to set current mac address to

	 * firmware for P2P device address. This must be done with discovery

	 * disabled.

/**

 * brcmf_p2p_generate_bss_mac() - derive mac addresses for P2P.

 *

 * @p2p: P2P specific data.

 * @dev_addr: optional device address.

 *

 * P2P needs mac addresses for P2P device and interface. If no device

 * address it specified, these are derived from a random ethernet

 * address.

		/* If the primary interface address is already locally

		 * administered, create a new random address.

	/* Generate the P2P Device Address obtaining a random ethernet

	 * address with the locally administered bit set.

	/* Generate the P2P Interface Address.  If the discovery and connection

	 * BSSCFGs need to simultaneously co-exist, then this address must be

	 * different from the P2P Device Address, but also locally administered.

/**

 * brcmf_p2p_scan_is_p2p_request() - is cfg80211 scan request a P2P scan.

 *

 * @request: the scan request as received from cfg80211.

 *

 * returns true if one of the ssids in the request matches the

 * P2P wildcard ssid; otherwise returns false.

/**

 * brcmf_p2p_set_discover_state - set discover state in firmware.

 *

 * @ifp: low-level interface object.

 * @state: discover state to set.

 * @chanspec: channel parameters (for state @WL_P2P_DISC_ST_LISTEN only).

 * @listen_ms: duration to listen (for state @WL_P2P_DISC_ST_LISTEN only).

/**

 * brcmf_p2p_deinit_discovery() - disable P2P device discovery.

 *

 * @p2p: P2P specific data.

 *

 * Resets the discovery state and disables it in firmware.

 Set the discovery state to SCAN */

 Disable P2P discovery in the firmware */

/**

 * brcmf_p2p_enable_discovery() - initialize and configure discovery.

 *

 * @p2p: P2P specific data.

 *

 * Initializes the discovery device and configure the virtual interface.

 Re-initialize P2P Discovery in the firmware */

	/*

	 * Set wsec to any non-zero value in the discovery bsscfg

	 * to ensure our P2P probe responses have the privacy bit

	 * set in the 802.11 WPA IE. Some peer devices may not

	 * initiate WPS with us if this bit is not set.

/**

 * brcmf_p2p_escan() - initiate a P2P scan.

 *

 * @p2p: P2P specific data.

 * @num_chans: number of channels to scan.

 * @chanspecs: channel parameters for @num_chans channels.

 * @search_state: P2P discover state to use.

 * @bss_type: type of P2P bss.

		/*

		 * If we in SEARCH STATE, we don't need to set SSID explictly

		 * because dongle use P2P WILDCARD internally by default, use

		 * null ssid, which it is already due to kzalloc.

		/*

		 * wpa_supplicant has p2p_find command with type social or

		 * progressive. For progressive, we need to set the ssid to

		 * P2P WILDCARD because we just do broadcast scan unless

		 * setting SSID.

	/*

	 * set p2p scan parameters.

 determine the scan engine parameters */

	/*

	 * SOCIAL_CHAN_CNT + 1 takes care of the Progressive scan

	 * supported by the supplicant.

 Override scan params to find a peer for a connection */

		/* WAR to sync with presence period of VSDB GO.

		 * send probe request more frequently

 set the escan specific parameters */

 perform p2p scan on primary device */

/**

 * brcmf_p2p_run_escan() - escan callback for peer-to-peer.

 *

 * @cfg: driver private data for cfg80211 interface.

 * @ifp: interface control.

 * @request: scan request from cfg80211.

 *

 * Determines the P2P discovery state based to scan request parameters and

 * validates the channels in the request.

 SOCIAL CHANNELS 1, 6, 11 */

 If you are already a GO, then do SEARCH only */

		/*

		 * no P2P scanning on passive or DFS channels.

/**

 * brcmf_p2p_find_listen_channel() - find listen channel in ie string.

 *

 * @ie: string of information elements.

 * @ie_len: length of string.

 *

 * Scan ie for p2p ie and look for attribute 6 channel. If available determine

 * channel and return it.

 listen channel subel length format:     */

 3(country) + 1(op. class) + 1(chan num) */

/**

 * brcmf_p2p_scan_prep() - prepare scan based on request.

 *

 * @wiphy: wiphy device.

 * @request: scan request from cfg80211.

 * @vif: vif on which scan request is to be executed.

 *

 * Prepare the scan appropriately for type of scan requested. Overrides the

 * escan .run() callback for peer-to-peer scanning.

 find my listen channel */

 override .run_escan() callback. */

/**

 * brcmf_p2p_discover_listen() - set firmware to discover listen state.

 *

 * @p2p: p2p device.

 * @channel: channel nr for discover listen.

 * @duration: time in ms to stay on channel.

 *

 WAR: prevent cookie mismatch in wpa_supplicant return OK */

/**

 * brcmf_p2p_remain_on_channel() - put device on channel and stay there.

 *

 * @wiphy: wiphy device.

 * @wdev: wireless device.

 * @channel: channel to stay on.

 * @duration: time in ms to remain on channel.

 * @cookie: cookie.

/**

 * brcmf_p2p_notify_listen_complete() - p2p listen has completed.

 *

 * @ifp: interfac control.

 * @e: event message. Not used, to make it usable for fweh event dispatcher.

 * @data: payload of message. Not used.

 *

/**

 * brcmf_p2p_cancel_remain_on_channel() - cancel p2p listen state.

 *

 * @ifp: interfac control.

 *

/**

 * brcmf_p2p_act_frm_search() - search function for action frame.

 *

 * @p2p: p2p device.

 * @channel: channel on which action frame is to be trasmitted.

 *

 * search function to reach at common channel to send action frame. When

 * channel is 0 then all social channels will be used to send af

 insert same channel to the chan_list */

/**

 * brcmf_p2p_afx_handler() - afx worker thread.

 *

 * @work:

 *

 100ms ~ 300ms */

/**

 * brcmf_p2p_af_searching_channel() - search channel.

 *

 * @p2p: p2p device info struct.

 *

	/* Loop to wait until we find a peer's channel or the

	 * pending action frame tx is cancelled.

 search peer on peer's listen channel */

 listen on my listen channel */

		/* if sta is connected or connecting, sleep for a while before

		 * retry af tx or finding a peer

/**

 * brcmf_p2p_scan_finding_common_channel() - was escan used for finding channel

 *

 * @cfg: common configuration struct.

 * @bi: bss info struct, result from scan.

 *

/**

 * brcmf_p2p_abort_action_frame() - abort action frame.

 *

 * @cfg: common configuration struct.

 *

/**

 * brcmf_p2p_stop_wait_next_action_frame() - finish scan if af tx complete.

 *

 * @cfg: common configuration struct.

 *

		/* if channel is not zero, "actfame" uses off channel scan.

		 * So abort scan for off channel completion.

 abort actframe using actframe_abort or abort scan */

 So abort scan to cancel listen */

/**

 * brcmf_p2p_gon_req_collision() - Check if go negotiaton collission

 *

 * @p2p: p2p device info struct.

 * @mac: MAC address.

 *

 * return true if recevied action frame is to be dropped.

	/* if sa(peer) addr is less than da(my) addr, then this device

	 * process peer's gon request and block to send gon req.

	 * if not (sa addr > da addr),

	 * this device will process gon request and drop gon req of peer.

		/* if we are finding a common channel for sending af,

		 * do not scan more to block to send current gon req

 drop gon request of peer to process gon request by this device. */

/**

 * brcmf_p2p_notify_action_frame_rx() - received action frame.

 *

 * @ifp: interfac control.

 * @e: event message. Not used, to make it usable for fweh event dispatcher.

 * @data: payload of message, containing action frame data.

 *

 Check if wpa_supplicant has registered for this frame */

 After complete GO Negotiation, roll back to mpc mode */

 Stop waiting for next AF. */

/**

 * brcmf_p2p_notify_action_tx_complete() - transmit action frame complete

 *

 * @ifp: interfac control.

 * @e: event message. Not used, to make it usable for fweh event dispatcher.

 * @data: not used.

 *

			/* If there is no ack, we don't need to wait for

			 * WLC_E_ACTION_FRAME_OFFCHAN_COMPLETE event

/**

 * brcmf_p2p_tx_action_frame() - send action frame over fil.

 *

 * @p2p: p2p info struct for vif.

 * @af_params: action frame data/info.

 *

 * Send an action frame immediately without doing channel synchronization.

 *

 * This function waits for a completion event before returning.

 * The WLC_E_ACTION_FRAME_COMPLETE event will be received when the action

 * frame is transmitted.

 check if it is a p2p_presence response */

 clear status bit for action tx */

/**

 * brcmf_p2p_pub_af_tx() - public action frame tx routine.

 *

 * @cfg: driver private data for cfg80211 interface.

 * @af_params: action frame data/info.

 * @config_af_params: configuration data for action frame.

 *

 * routine which transmits ation frame public type.

 increase dwell time to wait for RESP frame */

 increase dwell time to wait for CONF frame */

 If we reached till GO Neg confirmation reset the filter */

 turn on mpc again if go nego is done */

 minimize dwell time */

 increase dwell time */

 minimize dwell time */

 maximize dwell time to wait for RESP frame */

 minimize dwell time */

 increase dwell time to wait for RESP frame */

 wpa_supplicant send go nego req right after prov disc */

 increase dwell time to MED level */

/**

 * brcmf_p2p_send_action_frame() - send action frame .

 *

 * @cfg: driver private data for cfg80211 interface.

 * @ndev: net device to transmit on.

 * @af_params: configuration data for action frame.

 Add the default dwell time. Dwell time to stay off-channel */

 to wait for a response action frame after transmitting an  */

 GO Negotiation action frame                                */

 initialize variables */

 config parameters */

 p2p public action frame process */

 Just send unknown subtype frame with */

 default parameters.                  */

 service discovery process */

 configure service discovery query frame */

 save next af suptype to cancel */

 remaining dwell time           */

 configure service discovery response frame */

 do not configure anything. it will be */

 sent with a default configuration     */

	/* if connecting on primary iface, sleep for a while before sending

	 * af tx for VSDB

 if scan is ongoing, abort current scan. */

 To make sure to send successfully action frame, turn off mpc */

 set status and destination address before sending af */

 set status to cancel the remained dwell time in rx process */

 validate channel and p2p ies */

		/* Abort scan even for VSDB scenarios. Scan gets aborted in

		 * firmware but after the check of piggyback algorithm. To take

		 * care of current piggback algo, lets abort the scan here

		 * itself.

 update channel */

	/* WAR: sometimes dongle does not keep the dwell time of 'actframe'.

	 * if we coundn't get the next action response frame and dongle does

	 * not keep the dwell time, go to listen state again to get next action

	 * response frame.

		/* if ack is true, supplicant will wait more time(100ms).

		 * so we will return it as a success to get more time .

 if all done, turn mpc on again */

/**

 * brcmf_p2p_notify_rx_mgmt_p2p_probereq() - Event handler for p2p probe req.

 *

 * @ifp: interface pointer for which event was received.

 * @e: even message.

 * @data: payload of event message (probe request).

 Firmware sends us two proberesponses for each idx one. At the */

 moment anything but bsscfgidx 0 is passed up to supplicant    */

 Filter any P2P probe reqs arriving during the GO-NEG Phase */

 Check if wpa_supplicant has registered for this frame */

/**

 * brcmf_p2p_get_current_chanspec() - Get current operation channel.

 *

 * @p2p: P2P specific data.

 * @chanspec: chanspec to be returned.

 Use default channel for P2P */

/**

 * brcmf_p2p_ifchange - Change a P2P Role.

 * @cfg: driver private data for cfg80211 interface.

 * @if_type: interface type.

 * Returns 0 if success.

 In concurrency case, STA may be already associated in a particular */

 channel. so retrieve the current channel of primary interface and  */

 then start the virtual interface on that.                          */

 we need a default channel */

 fill the firmware request */

/**

 * brcmf_p2p_create_p2pdev() - create a P2P_DEVICE virtual interface.

 *

 * @p2p: P2P specific data.

 * @wiphy: wiphy device of new interface.

 * @addr: mac address for this new interface.

 firmware requires unique mac address for p2pdev interface */

 Initialize P2P Discovery in the firmware */

 wait for firmware event */

 discovery interface created */

 verify bsscfg index for P2P discovery */

/**

 * brcmf_p2p_add_vif() - create a new P2P virtual interface.

 *

 * @wiphy: wiphy device of new interface.

 * @name: name of the new interface.

 * @name_assign_type: origin of the interface name

 * @type: nl80211 interface type.

 * @params: contains mac address for P2P device.

 wait for firmware event */

 interface created in firmware */

 Disable firmware roaming for P2P interface  */

 set station timeout for p2p */

/**

 * brcmf_p2p_del_vif() - delete a P2P virtual interface.

 *

 * @wiphy: wiphy device of interface.

 * @wdev: wireless device of interface.

 wait for firmware event */

	/* This call can be result of the unregister_wdev call. In that case

	 * we dont want to do anything anymore. Just return. The config vif

	 * will have been cleared at this point.

 Set the discovery state to SCAN */

/**

 * brcmf_p2p_attach() - attach for P2P.

 *

 * @cfg: driver private data for cfg80211 interface.

 * @p2pdev_forced: create p2p device interface at attach.

/**

 * brcmf_p2p_detach() - detach P2P.

 *

 * @p2p: P2P specific data.

 just set it all to zero */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012 Broadcom Corporation

/* FWIL is the Firmware Interface Layer. In this module the support functions

 * are located to set and get variables to and from the firmware.

 DEBUG */

 append data onto the end of the name string */

 length of iovar  name + null */

 copy prefix, no null */

 copy iovar name including null */

 bss config index as first data */

 parameter buffer follows */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012 Broadcom Corporation

/**

 * struct brcmf_fweh_queue_item - event item on event queue.

 *

 * @q: list element for queuing.

 * @code: event code.

 * @ifidx: interface index related to this event.

 * @ifaddr: ethernet address for interface.

 * @emsg: common parameters of the firmware event message.

 * @datalen: length of the data array

 * @data: event specific data part of the firmware event.

/*

 * struct brcmf_fweh_event_name - code, name mapping entry.

 array for mapping code to event name */

/**

 * brcmf_fweh_event_name() - returns name for given event code.

 *

 * @code: code to lookup.

/**

 * brcmf_fweh_queue_event() - create and queue event.

 *

 * @fweh: firmware event handling info.

 * @event: event queue entry.

 handle the event if valid interface and handler */

/**

 * brcmf_fweh_handle_if_event() - handle IF event.

 *

 * @drvr: driver information object.

 * @emsg: event message object.

 * @data: event object.

	/* The P2P Device interface event must not be ignored contrary to what

	 * firmware tells us. Older firmware uses p2p noif, with sta role.

	 * This should be accepted when p2pdev_setup is ongoing. TDLS setup will

	 * use the same ifevent and should be ignored.

 Default handling in case no-one waits for this event */

/**

 * brcmf_fweh_dequeue_event() - get event from the queue.

 *

 * @fweh: firmware event handling info.

/**

 * brcmf_fweh_event_worker() - firmware event worker.

 *

 * @work: worker object.

 convert event message */

 special handling of interface event */

/**

 * brcmf_fweh_p2pdev_setup() - P2P device setup ongoing (or not).

 *

 * @ifp: ifp on which setup is taking place or finished.

 * @ongoing: p2p device setup in progress (or not).

/**

 * brcmf_fweh_attach() - initialize firmware event handling.

 *

 * @drvr: driver information object.

/**

 * brcmf_fweh_detach() - cleanup firmware event handling.

 *

 * @drvr: driver information object.

 cancel the worker if initialized */

/**

 * brcmf_fweh_register() - register handler for given event code.

 *

 * @drvr: driver information object.

 * @code: event code.

 * @handler: handler for the given event code.

/**

 * brcmf_fweh_unregister() - remove handler for given code.

 *

 * @drvr: driver information object.

 * @code: event code.

/**

 * brcmf_fweh_activate_events() - enables firmware events registered.

 *

 * @ifp: primary interface object.

 want to handle IF event as well */

/**

 * brcmf_fweh_process_event() - process skb as firmware event.

 *

 * @drvr: driver information object.

 * @event_packet: event packet to process.

 * @packet_len: length of the packet

 * @gfp: memory allocation flags.

 *

 * If the packet buffer contains a firmware event message it will

 * dispatch the event to a registered handler (using worker).

 get event info */

 use memcpy to get aligned event message */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014 Broadcom Corporation

/*

 * expand feature list to array of feature strings.

/*

 * expand quirk list to array of quirk strings.

/**

 * brcmf_feat_debugfs_read() - expose feature info to debugfs.

 *

 * @seq: sequence for debugfs entry.

 * @data: raw data pointer.

 DEBUG */

 brcmfmac43602-pcie.ap.bin from linux-firmware.git commit ea1178515b88 */

 brcmfmac4366b-pcie.bin from linux-firmware.git commit 52442afee990 */

 brcmfmac4366b-pcie.bin from linux-firmware.git commit 211de1679a68 */

 brcmfmac4366c-pcie.bin from linux-firmware.git commit 211de1679a68 */

/**

 * brcmf_feat_iovar_int_get() - determine feature through iovar query.

 *

 * @ifp: interface to query.

 * @id: feature id.

 * @name: iovar name.

 we need to know firmware error */

 we need to know firmware error */

/**

 * brcmf_feat_fwcap_debugfs_read() - expose firmware capabilities to debugfs.

 *

 * @seq: sequence for debugfs entry.

 * @data: raw data pointer.

 Put every capability in a new line */

 Usually there is a space at the end of capabilities string */

 So make sure we don't print two line breaks */

 MBSS does not work for all chips */

 set chip related quirks */

 no quirks */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

/**

 * DOC: Firmware Signalling

 *

 * Firmware can send signals to host and vice versa, which are passed in the

 * data packets using TLV based header. This signalling layer is on top of the

 * BDC bus protocol layer.

/*

 * single definition for firmware-driver flow control tlv's.

 *

 * each tlv is specified by BRCMF_FWS_TLV_DEF(name, ID, length).

 * A length value 0 indicates variable length tlv.

/*

 * enum brcmf_fws_tlv_type - definition of tlv identifiers.

/*

 * enum brcmf_fws_tlv_len - definition of tlv lengths.

 AMPDU rx reordering definitions */

/*

 * brcmf_fws_tlv_names - array of tlv names.

 DEBUG */

/*

 * The PKTTAG tlv has additional bytes when firmware-signalling

 * mode has REUSESEQ flag set.

/*

 * flags used to enable tlv signalling from firmware.

 seq reuse */

/**

 * enum brcmf_fws_skb_state - indicates processing state of skb.

 *

 * @BRCMF_FWS_SKBSTATE_NEW: sk_buff is newly arrived in the driver.

 * @BRCMF_FWS_SKBSTATE_DELAYED: sk_buff had to wait on queue.

 * @BRCMF_FWS_SKBSTATE_SUPPRESSED: sk_buff has been suppressed by firmware.

 * @BRCMF_FWS_SKBSTATE_TIM: allocated for TIM update info.

/**

 * struct brcmf_skbuff_cb - control buffer associated with skbuff.

 *

 * @bus_flags: 2 bytes reserved for bus specific parameters

 * @if_flags: holds interface index and packet related flags.

 * @htod: host to device packet identifier (used in PKTTAG tlv).

 * @htod_seq: this 16-bit is original seq number for every suppress packet.

 * @state: transmit state of the packet.

 * @mac: descriptor related to destination for this packet.

 *

 * This information is stored in control buffer struct sk_buff::cb, which

 * provides 48 bytes of storage so this structure should not exceed that.

/*

 * macro casting skbuff control buffer to struct brcmf_skbuff_cb.

/*

 * sk_buff control if flags

 *

 *	b[11]  - packet sent upon firmware request.

 *	b[10]  - packet only contains signalling data.

 *	b[9]   - packet is a tx packet.

 *	b[8]   - packet used requested credit

 *	b[7]   - interface in AP mode.

 *	b[3:0] - interface index.

/*

 * sk_buff control packet identifier

 *

 * 32-bit packet identifier used in PKTTAG tlv from host to dongle.

 *

 * - Generated at the host (e.g. dhd)

 * - Seen as a generic sequence number by firmware except for the flags field.

 *

 * Generation	: b[31]	=> generation number for this packet [host->fw]

 *			   OR, current generation number [fw->host]

 * Flags	: b[30:27] => command, status flags

 * FIFO-AC	: b[26:24] => AC-FIFO id

 * h-slot	: b[23:8] => hanger-slot

 * freerun	: b[7:0] => A free running counter

 How long to defer borrowing in jiffies */

/**

 * enum brcmf_fws_txstatus - txstatus flag values.

 *

 * @BRCMF_FWS_TXSTATUS_DISCARD:

 *	host is free to discard the packet.

 * @BRCMF_FWS_TXSTATUS_CORE_SUPPRESS:

 *	802.11 core suppressed the packet.

 * @BRCMF_FWS_TXSTATUS_FW_PS_SUPPRESS:

 *	firmware suppress the packet as device is already in PS mode.

 * @BRCMF_FWS_TXSTATUS_FW_TOSSED:

 *	firmware tossed the packet.

 * @BRCMF_FWS_TXSTATUS_FW_DISCARD_NOACK:

 *	firmware tossed the packet after retries.

 * @BRCMF_FWS_TXSTATUS_FW_SUPPRESS_ACKED:

 *	firmware wrongly reported suppressed previously, now fixing to acked.

 * @BRCMF_FWS_TXSTATUS_HOST_TOSSED:

 *	host tossed the packet.

/**

 * struct brcmf_fws_mac_descriptor - firmware signalling data per node/interface

 *

 * @name: name of the descriptor.

 * @occupied: slot is in use.

 * @mac_handle: handle for mac entry determined by firmware.

 * @interface_id: interface index.

 * @state: current state.

 * @suppressed: mac entry is suppressed.

 * @generation: generation bit.

 * @ac_bitmap: ac queue bitmap.

 * @requested_credit: credits requested by firmware.

 * @requested_packet: packet requested by firmware.

 * @ea: ethernet address.

 * @seq: per-node free-running sequence.

 * @psq: power-save queue.

 * @transit_count: packet in transit to firmware.

 * @suppr_transit_count: suppressed packet in transit to firmware.

 * @send_tim_signal: if set tim signal will be sent.

 * @traffic_pending_bmp: traffic pending bitmap.

 * @traffic_lastreported_bmp: traffic last reported bitmap.

/**

 * enum brcmf_fws_hanger_item_state - state of hanger item.

 *

 * @BRCMF_FWS_HANGER_ITEM_STATE_FREE: item is free for use.

 * @BRCMF_FWS_HANGER_ITEM_STATE_INUSE: item is in use.

 * @BRCMF_FWS_HANGER_ITEM_STATE_INUSE_SUPPRESSED: item was suppressed.

/**

 * struct brcmf_fws_hanger_item - single entry for tx pending packet.

 *

 * @state: entry is either free or occupied.

 * @pkt: packet itself.

/**

 * struct brcmf_fws_hanger - holds packets awaiting firmware txstatus.

 *

 * @pushed: packets pushed to await txstatus.

 * @popped: packets popped upon handling txstatus.

 * @failed_to_push: packets that could not be pushed.

 * @failed_to_pop: packets that could not be popped.

 * @failed_slotfind: packets for which failed to find an entry.

 * @slot_pos: last returned item index for a free entry.

 * @items: array of hanger items.

/**

 * brcmf_fws_get_tlv_len() - returns defined length for given tlv id.

 *

 * @fws: firmware-signalling information.

 * @id: identifier of the TLV.

 *

 * Return: the specified length for the given TLV; Otherwise -EINVAL.

 suppress packets freed from psq */

 depending on use may need ifp->bsscfgidx instead */

 update this when handling APSD */

	/* Multicast destination, STA and P2P clients get the interface entry.

	 * STA/GC gets the Mac Entry for TDLS destinations, TDLS destinations

	 * have their own entry.

	/* for unique destination entries the related interface

	 * may be closed.

	/* an entry is closed when the state is closed and

	 * the firmware did not request anything.

 Or firmware does not allow traffic for given fifo */

 cleanup individual nodes */

 +2 is for Type[1] and Len[1] in TLV, plus TIM signal */

 check delayedQ and suppressQ in one call using bitmap */

 create a dummy packet and sent that. The traffic          */

 bitmap info will automatically be attached to that packet */

 TODO: what should we do here: continue, reinit, .. */

 a state update should wipe old credits */

 only schedule dequeue when there are credits for delayed traffic */

 Fix out of order delivery of frames. Dont assume frame    */

 can be inserted at the end, but look for correct position */

 be sure to handle wrap of 256 */

 Position found. Determine what to do */

 empty list */

 After tail */

 Before tail */

 Complete the counters and statistics */

 increment total enqueued packet count */

 update the sk_buff state */

	/*

	 * A packet has been pushed so update traffic

	 * availability bitmap, if applicable

 move dequeue position to ensure fair round-robin */

		/*

		 * A packet has been picked up, update traffic

		 * availability bitmap, if applicable

		/*

		 * decrement total enqueued fifo packets and

		 * clear delay bitmap if done.

 this packet was suppressed */

 suppress q is full drop this packet */

 Mark suppressed to avoid a double free during wlfc cleanup */

 pick up the implicit credit from this packet */

 initialize return list */

 validate flags and flow id */

 add the last packet */

 from here on we need a flow reorder instance */

 allocate space for flow reorder info */

 still in the current hole */

 enqueue the current on the buffer chain */

			/* can return now as there is no reorder

			 * list to process.

			/* got the expected one. flush from current to expected

			 * and update expected

 flush pkts first */

 explicity window move updating the expected index */

 set the new expected idx */

 if flow control disabled, skip to packet data and leave */

 extract tlv info */

		/* FILLER type is actually not a TLV, but

		 * a single byte that can be skipped.

 abort parsing when length invalid */

	/* signalling processing result does

	 * not affect the actual ethernet packet.

	/* this may be a signal-only packet

		/*

		 * Indicate that this packet is being sent in response to an

		 * explicit request from the firmware side.

 set control buffer information */

 mapping from 802.1d priority to firmware fifo index */

 Use proto layer to send data frame */

 store drvr reference */

 enable firmware signalling if fcmode active */

	/* Setting the iovar may fail if feature is unsupported

	 * so leave the rc as is so driver initialization can

	 * continue. Set mode back to none indicating not enabled.

 Enable seq number reuse, if supported */

 cleanup */

 free top structure */

 create debugfs file for statistics */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2013 Broadcom Corporation

 devpath0=pcie/1/4/ */

 pcie/1/4/ + \0 */

/**

 * struct nvram_parser - internal info for parser.

 *

 * @state: current parser state.

 * @data: input buffer being parsed.

 * @nvram: output buffer with parse result.

 * @nvram_len: length of parse result.

 * @line: current line.

 * @column: current column in line.

 * @pos: byte offset in input buffer.

 * @entry: start position of key,value entry.

 * @multi_dev_v1: detect pcie multi device v1 (compressed).

 * @multi_dev_v2: detect pcie multi device v2.

 * @boardrev_found: nvram contains boardrev information.

/*

 * is_nvram_char() - check if char is a valid one for NVRAM entry

 *

 * It accepts all printable ASCII chars except for '#' which opens a comment.

 * Please note that ' ' (space) while accepted is not a valid key name char.

 comment marker excluded */

 key and value may have any other readable character */

 ignore RAW1 by treating as comment */

 key,value pair complete */

 copy to output buffer */

 eat all moving to next line */

 final state */

 Limit size to MAX_NVRAM_SIZE, some files contain lot of comment */

 Alloc for extra 0 byte + roundup by 4 + length field */

/* brcmf_fw_strip_multi_v1 :Some nvram files contain settings for multiple

 * devices. Strip it down for one device, use domain_nr/bus_nr to determine

 * which data is to be returned. v1 is the version where nvram is stored

 * compressed and "devpath" maps to index for valid entries.

 Device path with a leading '=' key-value separator */

 min length: devpath0=pcie/1/4/ + 0:x=y */

	/* First search for the devpathX and see if it is the configuration

	 * for domain_nr/bus_nr. Search complete nvp

		/* Format: devpathX=pcie/Y/Z/

		 * Y = domain_nr, Z = bus_nr, X = virtual ID

 Now copy all valid entries, release old nvram and assign new one */

/* brcmf_fw_strip_multi_v2 :Some nvram files contain settings for multiple

 * devices. Strip it down for one device, use domain_nr/bus_nr to determine

 * which data is to be returned. v2 is the version where nvram is stored

 * uncompressed, all relevant valid entries are identified by

 * pcie/domain_nr/bus_nr:

	/* Copy all valid entries, release old nvram and assign new one.

	 * Valid entries are of type pcie/X/Y/ where X = domain_nr and

	 * Y = bus_nr.

/* brcmf_nvram_strip :Takes a buffer of "<var>=<value>\n" lines read from a fil

 * and ending in a NUL. Removes carriage returns, empty lines, comment lines,

 * and converts newlines to NULs. Shortens buffer as needed and pads with NULs.

 * End of buffer is completed with token identifying length of buffer.

/* In some cases the EFI-var stored nvram contains "ccode=ALL" or "ccode=XV"

 * to specify "worldwide" compatible settings, but these 2 ccode-s do not work

 * properly. "ccode=ALL" causes channels 12 and 13 to not be available,

 * "ccode=XV" causes all 5GHz channels to not be available. So we replace both

 * with "ccode=X2" which allows channels 12+13 and 5Ghz channels in

 * no-Initiate-Radiation mode. This means that we will never send on these

 * channels without first having received valid wifi traffic on the channel.

 something fishy here so bail out early */

 At least one character + suffix */

 strip .txt or .bin at the end */

 Files can be board-specific, first try a board-specific path */

 Fall back to canonical path if board firmware not found */

 First try alternative board-specific path if any */

 check if firmware path is provided by module parameter */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 Try to set and enable ARP offload feature, this may fail, then it  */

 is simply not supported and err 0 will be returned                 */

 Determine initial value of allmulti flag */

 Send down the multicast list first. */

	/*

	 * Now send the allmulti setting.  This is based on the setting in the

	 * net_device flags, but might be modified above to be turned on if we

	 * were trying to set some addresses and dongle rejected it...

Finally, pick up the PROMISC flag */

 PROMISC unsupported by firmware of older chips */

 clear the table in firmware */

/**

 * brcmf_skb_is_iapp - checks if skb is an IAPP packet

 *

 * @skb: skb to check

 Can the device send data? */

	/* Some recent Broadcom's firmwares disassociate STA when they receive

	 * an 802.11f ADD frame. This behavior can lead to a local DoS security

	 * issue. Attacker may trigger disassociation of any STA by sending a

	 * proper Ethernet frame to the wireless interface.

	 *

	 * Moreover this feature may break AP interfaces in some specific

	 * setups. This applies e.g. to the bridge with hairpin mode enabled and

	 * IFLA_BRPORT_MCAST_TO_UCAST set. IAPP packet generated by a firmware

	 * will get passed back to the wireless interface and cause immediate

	 * disassociation of a just-connected STA.

 Make sure there's enough writeable headroom */

 validate length for ether packet */

 determine the priority */

 set pacing shift for packet aggregation */

 Return ok: we always eat the packet */

	/* Most of Broadcom's firmwares send 802.11f ADD frame every time a new

	 * STA connects to the AP interface. This is an obsoleted standard most

	 * users don't use, so don't pass these frames up unless requested.

		/* If the receive is not processed inside an ISR,

		 * the softirqd must be woken explicitly to service

		 * the NET_RX_SOFTIRQ.  This is handled by netif_rx_ni().

 Do nothing */

		/* MAC inserts 2 pad bytes for a4 headers or QoS or A-MSDU

		 * subframes

 TODO: use RX header to fill some radiotap data */

 TODO: 4 bytes with receive status? */

 TODO: use RX status to fill some radiotap data */

 TODO: 4 bytes with receive status? */

 process and remove protocol-specific header */

 Process special event packets */

 If bus is not ready, can't continue */

 Get current TOE mode from dongle */

 Clear, carrier, set when connected or AP mode. */

 set appropriate operations */

 set the mac address & netns */

 set the mac address */

	/*

	 * Delete the existing interface before overwriting it

	 * in case we missed the BRCMF_E_IF_DEL event.

 this is P2P_DEVICE interface */

 Allocate netdev, including space for private structure */

 store mapping ifidx to bsscfgidx */

		/* Only p2p device interfaces which get dynamically created

		 * end up here. In this case the p2p module should be informed

		 * about the removal of the interface within the firmware. If

		 * not then p2p commands towards the firmware will cause some

		 * serious troublesome side effects. The p2p module will clean

		 * up the ifp if needed.

 Find out if the notification is meant for us */

 check if arp offload is supported */

 old version only support primary index */

 retrieve the table from firmware */

 set it directly */

 clear the table in firmware */

 Only handle primary interface */

 add primary networking interface */

 signal bus ready */

 do bus specific preinit here */

 Bus is ready, do any initialization */

 CONFIG_INET */

 populate debugfs */

 Link to bus module */

 Attach and link in the protocol */

 Attach to events important for core code */

 attach firmware event handler */

 make sure primary interface removed last */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012 Broadcom Corporation

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 watermark expressed in number of words */

 Device console log buffer state */

 Can't be pointer on (64-bit) hosts */

 Redundant pointer for backward compat. */

	/* Virtual UART

	 * When there is no UART (e.g. Quickturn),

	 * the host should write a complete

	 * input line directly into cbuf and then write

	 * the length into vcons_in.

	 * This may also be used when there is a real UART

	 * (at risk of conflicting with

	 * the real UART).  vcons_out is currently unused.

	/* Output (logging) buffer

	 * Console output is written to a ring buffer log_buf at index log_idx.

	 * The host may read the output when it sees log_idx advance.

	 * Output will be lost if the output wraps around faster than the host

	 * polls.

	/* Console input line buffer

	 * Characters are read one at a time into cbuf

	 * until <CR> is received, then

	 * the buffer is processed as a command line.

	 * Also used for virtual UART.

 DEBUG */

 bulk tx queue length */

 turn on flow control above TXHI */

 turn off flow control below TXLOW */

 # of retries for tx frames */

#define BRCMF_RXBOUND	50	/* Default for max rx frames in

#define BRCMF_TXBOUND	20	/* Default for max tx frames in

 Max tx frames if rx still pending */

#define MEMBLOCK	2048	/* Block size used for downloading

#define MAX_DATA_BUF	(32 * 1024)	/* Must be large enough to hold

 watchdog interval to poll console */

 SBSDIO_DEVICE_CTL */

 1: device will assert busy signal when receiving CMD53 */

 1: assertion of sdio interrupt is synchronous to the sdio clock */

 1: mask all interrupts to host except the chipActive (rev 8) */

/* 1: isolate internal sdio signals, put external pads in tri-state; requires

 1: enable F2 Watermark */

 Force SD->SB reset mapping (rev 11) */

   Determined by CoreControl bit */

   Force backplane reset */

   Force no backplane reset */

 direct(mapped) cis space */

 MAPPED common CIS address */

 maximum bytes in one CIS */

 cis offset addr is < 17 bits */

 manfid tuple length, include tuple, link bytes */

 SDIO function 1 register CHIPCLKCSR */

 Force ALP request to backplane */

 Force HT request to backplane */

 Force ILP request to backplane */

 Make ALP ready (power up xtal) */

 Make HT ready (power up PLL) */

 Squelch clock requests from HW */

 Status: ALP is ready */

 Status: HT is ready */

 intstatus */

 To SB Mail S/W interrupt 0 */

 To SB Mail S/W interrupt 1 */

 To SB Mail S/W interrupt 2 */

 To SB Mail S/W interrupt 3 */

 To SB Mail S/W interrupts mask */

 To SB Mail S/W interrupts shift */

 To Host Mail S/W interrupt 0 */

 To Host Mail S/W interrupt 1 */

 To Host Mail S/W interrupt 2 */

 To Host Mail S/W interrupt 3 */

 To Host Mail S/W interrupts mask */

 To Host Mail S/W interrupts shift */

 Write Frame Out Of Sync */

 Read Frame Out Of Sync */

 descriptor error */

 data error */

 Descriptor protocol Error */

 Receive descriptor Underflow */

 Receive fifo Overflow */

 Transmit fifo Underflow */

 Receive Interrupt */

 SDIO Bus Power Change (rev 9) */

 bits in fifo */

 Transmit Interrupt */

 Read Frame Terminate */

 Write Frame Terminate */

 PCMCIA Transmit FIFO Underflow */

 sbintstatus Interrupt */

 chip from doze to active state */

 CCCR RES interrupt */

 CCCR IOE2 Bit Changed */

 corecontrol */

 CIS Ready */

 CCCR RES signal */

 set CCCR IOR2 bit */

 clear SDIO pads isolation */

 SDA_FRAMECTRL */

 Read Frame Terminate */

 Write Frame Terminate */

 CRC error for write out of sync */

 Abort all in-progress frames */

/*

 * Software allocation of To SB Mailbox resources

 tosbmailbox bits corresponding to intstatus bits */

 Frame NAK */

 Host Interrupt ACK */

 Use OOB Wakeup */

 Miscellaneous Interrupt */

 tosbmailboxdata */

 host protocol version */

/*

 * Software allocation of To Host Mailbox resources

 intstatus bits */

 Flow Control State */

 Flow Control State Changed */

 Frame Indication */

 Miscellaneous Interrupt */

 tohostmailboxdata */

 retransmit NAK'd frame */

 talk to host after enable */

 per prio flowcontrol update flag */

 fw ready for protocol activity */

 firmware halted */

/*

 * Software-defined protocol header

 Current protocol version */

/*

 * Shared structure between dongle and the host.

 * The structure contains pointers to trap or assert information.

 Space for header read, limit for data packets */

/* Bump up limit on waiting for HT to account for first startup;

 * if the image is doing a CRC calculation before programming the PMU

 * for HT availability, it could take a couple hundred ms more, so

 * max out at a 1 second (1000000us).

 Value for ChipClockCSR during initial setup */

 Flags for SDH calls */

#define BRCMF_IDLE_ACTIVE	0	/* Do not request any SD clock change

					 * when idle

 Device console log buffer state */

 Poll interval msec counter */

 Log struct address (fixed) */

 Log struct (host copy) */

 Size of log buffer */

 Log buffer (host copy) */

 Last buffer read index */

 a1 */

 a2 */

 a3 */

 a4 */

 v1 */

 v2 */

 v3 */

 v4 */

 v5 */

 sb/v6 */

 sl/v7 */

 fp/v8 */

 ip */

 sp */

 lr */

 r15 */

 DEBUG */

 Address of struct rte_console */

 Address of struct rte_console */

 dongle SDIO bus specific header info */

/*

 * hold counter variables

 Count of device interrupt callbacks */

 Count as of last watchdog timer */

 Count of active polls */

 Count of R_REG failures */

 Count of tx attempts with sd errors */

 Tx packets that got queued */

 Count of rtx requests (NAK to dongle) */

 Receive frames too long to receive */

 SDIO errors when reading control frames */

 SDIO errors on header reads */

 Bad received headers (roosync?) */

 Mismatched rx sequence number */

 Number of flow-control events received */

 Number which turned on flow-control */

 Number which turned off flow-control */

 Failed deglom attempts */

 Number of glom frames (superframes) */

 Number of packets from glom frames */

 Number of header reads */

 Number of frame data reads */

 Number of f2 frame writes */

 Number of f1 register accesses */

 Number of watchdog been schedule */

 Err of sending ctrl frames */

 Ctrl frames sent to dongle */

 Err of processing rx ctrl frames */

 Ctrl frames processed from dongle */

 packets where header read-ahead was used */

 misc chip info needed by some of the routines */

 Private data for SDIO bus interaction */

 sdio device handler */

 Chip info struct */

 sdio core info struct */

 Copy of Host Interrupt Mask */

 Intstatus bits (events) pending */

 State of dongle flow-control */

 Block size of SDIO transfers */

 Max roundup limit */

 Queue length used for flow-control */

 per prio flow control bitmask */

 Transmit sequence number (next) */

 Maximum transmit sequence allowed */

 buffer for handling rx frame */

 Header of current rx frame (in hdrbuf) */

 Receive sequence number (expected) */

 info of current read frame */

 Skip receive (awaiting NAK ACK) */

 Data frame pending in dongle */

 Rx frames to read before resched */

 Tx frames to send before resched */

 Packet containing glomming descriptor */

 Packet list for glommed superframe */

 Buffer for receiving control packets */

 Allocated length of rxbuf */

 Aligned pointer into rxbuf */

 pointer for freeing rxctl */

 Length of valid data in buffer */

 protection lock for ctrl frame resources */

 Bus protocol reported by dongle */

 Use interrupts */

 Use polling */

 Device interrupt is pending */

 Count of spurious interrupts */

 Ticks between device polls */

 Tick counter */

 Console output polling support */

 Console address from shared struct */

 DEBUG */

 State of sd and backplane clock(s) */

 Control for activity timeout */

 Activity timeout counter */

 How to set bus driver when idle */

 Rx flow control mode */

 Is rx flow control on */

 Don't use HT clock (ALP only) */

 protect bus->txq */

 Transmit flow-controlled */

 SaveRestore enabled */

 sdio bus header length for tx packet */

 host tx glomming enable flag */

 buffer pointer alignment */

 scatter-gather buffer alignment */

 clkstate */

 DEBUG */

 in milliamps */

 Limit on rounding up frames */

 SDIO Pad drive strength to select value mappings */

 Pad Drive Strength in mA */

 Chip-specific select value */

 SDIO Drive Strength to sel value table for PMU Rev 11 (1.8V) */

 SDIO Drive Strength to sel value table for PMU Rev 13 (1.8v) */

 SDIO Drive Strength to sel value table for PMU Rev 17 (1.8v) */

 SDIO Drive Strength to sel value table for 43143 PMU Rev 17 (3.3V) */

 Note the names are not postfixed with a1 for backward compatibility */

 firmware config files */

 per-board firmware binaries */

 To check if there's window offered */

 Reserve TXCTL_CREDITS credits for txctl when it is ready to send */

 To check if there's window offered */

 Cannot re-tune if device is asleep; defer till we're awake */

 1st KSO write goes to AOS wake up core if device is asleep  */

	/* In case of 43012 chip, the chip could go down immediately after

	 * KSO bit is cleared. So the further reads of KSO register could

	 * fail. Thereby just bailing out immediately after clearing KSO

	 * bit, to avoid polling of KSO bit.

		/* device WAKEUP through KSO:

		 * write bit 0 & read back until

		 * both bits 0 (kso bit) & 1 (dev on status) are set

 Put device to sleep, turn off KSO */

		/* only check for bit0, bit1(dev on status) may not

		 * get cleared right away

		/* reliable KSO bit set/clr:

		 * the sdiod sleep write access is synced to PMU 32khz clk

		 * just one write attempt may fail,

		 * read it back until it matches written value

 bail out upon subsequent access errors */

 Turn backplane clock on or off */

 Request HT Avail */

 Check current status */

 Go to pending and await interrupt if appropriate */

 Allow only clock-available interrupt */

 Cancel CA-only interrupt filter */

 Otherwise, wait here (polling) for HT Avail */

 Mark clock available */

 defined (DEBUG) */

 Cancel CA-only interrupt filter */

 Change idle/active SD state */

 Transition SD and backplane clock readiness */

 DEBUG */

 Early exit if we're already there */

 Make sure SD clock is available */

 Now request HT Avail on the backplane */

 Remove HT request, or bring up SD clock */

 Make sure to remove HT request */

 Now remove the SD clock */

 DEBUG */

 If SR is enabled control bus state with KSO */

 Done if we're already in the requested state */

 Going to sleep */

 control clocks */

	/*

	 * Read last word in socram to determine

	 * address of sdpcm_shared structure

	/*

	 * Check if addr is valid.

	 * NVRAM length at the end of memory should have been overwritten.

 Read hndrte_shared structure */

 Endianness */

 DEBUG */

 Read mailbox data and ack that we did so */

 dongle indicates the firmware has halted/crashed */

 Dongle recomposed rx frames, accept them again */

	/*

	 * DEVREADY does not occur with gSPI.

		/*

		 * Retrieve console state address now that firmware should have

		 * updated it.

	/*

	 * Flow Control has been moved into the RX headers and this out of band

	 * method isn't used any more.

	 * remaining backward compatible with older dongles.

 Shouldn't be any others */

 Wait until the packet has been flushed (device/FIFO stable) */

 Clear partial in any case */

 On failure, abort the command and terminate the frame */

 return total length of buffer chain */

/*

 * brcmfmac sdio bus specific header

 * This is the lowest layer header wrapped on the packets transmitted between

 * host and WiFi dongle which contains information needed for SDIO core and

 * firmware

 *

 * It consists of 3 parts: hardware header, hardware extension header and

 * software header

 * hardware header (frame tag) - 4 bytes

 * Byte 0~1: Frame length

 * Byte 2~3: Checksum, bit-wise inverse of frame length

 * hardware extension header - 8 bytes

 * Tx glom mode only, N/A for Rx or normal Tx

 * Byte 0~1: Packet length excluding hw frame tag

 * Byte 2: Reserved

 * Byte 3: Frame flags, bit 0: last frame indication

 * Byte 4~5: Reserved

 * Byte 6~7: Tail padding length

 * software header - 8 bytes

 * Byte 0: Rx/Tx sequence number

 * Byte 1: 4 MSB Channel number, 4 LSB arbitrary flag

 * Byte 2: Length of next data frame, reserved for Tx

 * Byte 3: Data offset

 * Byte 4: Flow control bits, reserved for Tx

 * Byte 5: Maximum Sequence number allowed by firmware for Tx, N/A for Tx packet

 * Byte 6~7: Reserved

 software header */

 Control */

 Asyc Event Indication */

 Data Xmit/Recv */

 Coalesced packets */

 Test/debug packets */

 hw header */

 All zero means no more to read */

 software header */

 no need to check the reset for subframe */

 only warm for NON glom packet */

 If packets, issue read(s) and send up packet chain */

 Return sequence numbers consumed? */

 If there's a descriptor, generate the packet chain */

 Get (and move past) next length */

			/* For last frame, adjust read len so total

 Allocate/chain packet for next subframe */

 Adhere to start alignment requirements */

		/* If all allocations succeeded, save packet chain

 Done with descriptor packet */

	/* Ok -- either we just generated a packet chain,

		/* Do an SDIO read for the superframe.  Configurable iovar to

		 * read directly into the chained packet, or allocate a large

		 * packet and and copy into the chain.

 On failure, kill the superframe */

 Remove superframe header, remember offset */

 Validate all the subframe headers */

 leave when invalid subframe is found */

 Terminate frame on error */

 Basic SD framing looks ok - process each packet (header) */

 Wait until control frame is available */

 Copy the already-read portion over */

 Raise rdlen to next SDIO block to avoid tail command */

 Drop if the read is too big or it exceeds our maximum */

 Read remain of frame body */

 Control frame failures need retransmission */

 Point to valid data and indicate its length */

 Awake any waiters */

 Pad read to blocksize for efficiency */

 Packet for event or data frames */

 Number of pad bytes to read */

 Remaining number of frames allowed */

 Return code from calls */

 Total frames read */

 Not finished unless we encounter no more frames indication */

 Handle glomming separately */

 read header first for unknow frame length */

 prepare the descriptor for the next read */

 treat all packet as event if we don't know */

 Give up on data, request rtx of events */

 Force retry w/normal header read */

 Save superframe descriptor and allocate packet frame */

 prepare the descriptor for the next read */

 treat all packet as event if we don't know */

 Fill in packet len and prio, deliver upward */

 prepare the descriptor for the next read */

 treat all packet as event if we don't know */

 Message if we hit the limit */

 Back off rxseq if awaiting rtx, update rx_seq */

 Check head padding */

/*

 * struct brcmf_skbuff_cb reserves first two bytes in sk_buff::cb for

 * bus layer usage.

 flag marking a dummy skb added for DMA alignment requirement */

 bit mask of data length chopped from the previous packet */

 sg entry alignment should be a divisor of block size */

 Check tail padding */

/**

 * brcmf_sdio_txpkt_prep - packet preparation for transmit

 * @bus: brcmf_sdio structure pointer

 * @pktq: packet list pointer

 * @chan: virtual channel to transmit the packet

 *

 * Processes to be applied to the packet

 *	- Align data buffer pointer

 *	- Align data buffer length

 *	- Prepare header

 * Return: negative value if there is error

		/* alignment packet inserted in previous

		 * loop cycle can be skipped as it is

		 * already properly aligned and does not

		 * need an sdpcm header.

 align packet data pointer */

 Now fill the header */

	/* Hardware length tag of the first packet should be total

	 * length of the chain (including padding)

/**

 * brcmf_sdio_txpkt_postp - packet post processing for transmit

 * @bus: brcmf_sdio structure pointer

 * @pktq: packet list pointer

 *

 * Processes to be applied to the packet

 *	- Remove head padding

 *	- Remove tail padding

 Writes a HW/SW header into the packet and sends it. */

 Assumes: (a) header space already there, (b) caller holds lock */

 Send frames until the limit or some other event */

 In poll mode, need to check for other events */

 Check device status, signal pending interrupt */

 Deflow-control stack if needed */

 Back the pointer to make room for bus header */

 Add alignment padding (optional for ctl frames) */

 Round send length to next SDIO block */

 Enable clock for device interrupts */

 Disable and clear interrupts at the chip level also */

 Force backplane clocks to assure F2 interrupt propagates */

 Turn off the bus (F2), free any pending packets */

 Clear any pending interrupts now that F2 is disabled */

 Clear the data packet queues */

 Clear any held glomming stuff */

 Clear rx control and wake any waiters */

 Reset some F2 state stuff */

 Clear interrupts */

 Tx frames to send before resched */

 Temporary counter of tx/rx frames */

 If waiting for HTAVAIL, check status */

 Check for inconsistent device control */

 DEBUG */

 Read CSR, if clock on switch to AVAIL, else ignore */

 Make sure backplane clock is on */

 Pending interrupt indicates new device status */

 Start with leftover status bits */

	/* Handle flow-control change: read new state in case our ack

	 * crossed another change interrupt.  If change still set, assume

	 * FC ON for safety, let next loop through do the debounce.

 Handle host mailbox indication */

 Generally don't ask for these, can get CRC errors... */

 Would be active due to wake-wlan in gSPI */

 Ignore frame indications if rxskip is set */

 On frame indication, read available frames */

 Keep still-pending events for next scheduling */

 Send queued frames (limit 1 if rx may still be pending) */

 precedence to evict from */

	/* Fast case, precedence queue is not full and we are also not

	 * exceeding total queue length

 Determine precedence from which to evict packet, if any */

 Evict if needed */

 Detect queueing to unconfigured precedence */

 refuse newer (incoming) packet */

 Evict packet according to discard policy */

 Enqueue */

 Add space for the header */

 precondition: IS_ALIGNED((unsigned long)(pkt->data), 2) */

	/* In WLAN, priority is always set by the AP using WMM parameters

	 * and this need not always follow the standard 802.1d priority.

	 * Based on AP WMM config, map from 802.1d priority to corresponding

	 * precedence level.

	/* Check for existing queue, current flow-control,

 Priority based enq */

 reset bus_flags in packet cb */

 Don't do anything until FWREADY updates console address */

 Read console log struct */

 Allocate console buffer (one time only) */

 Protect against corrupt value */

	/* Skip reading the console buffer if the index pointer

 Read the console buffer */

				/* This would output a partial line.

				 * Instead, back up

				 * the buffer pointer and output this

				 * line next time around.

 DEBUG */

 Send from dpc */

 obtain console information from device memory */

 allocate buffer for console data */

 obtain the console data from device */

 DEBUG */

 Wait until control frame is available */

 read back and verify */

 do not proceed while no memory but  */

 DEBUG */

 DEBUG */

 Take arm out of reset */

 Add CMD14 Support */

 set flag */

 enable KSO bit */

 KSO bit added in SDIO core rev 12 */

 maxctl provided by common layer */

 Allocate control receive buffer */

	/* the commands below use the terms tx and rx from

	 * a device perspective, ie. bus:txglom affects the

	 * bus transfers from device to host.

 for sdio core rev < 12, disable txgloming */

 otherwise, set txglomalign */

 SDIO ADMA requires at least 32 bit alignment */

 bus:rxglom is allowed to fail */

 Count the interrupt call */

 Disable additional interrupts (is this needed now)? */

 Poll period: check device if appropriate. */

 Reset poll tick */

 Check device if no interrupts */

			/* If there is something, make like the ISR and

 Update interrupt tracking */

 Poll for console output periodically */

 Make sure backplane clock is on */

 stop on error */

 DEBUG */

 On idle timeout clear activity flag and/or turn off clock */

 note: 43143 does not support tristate */

 Try forcing SDIO core to do ALPAvail request only */

 If register supported, wait for ALPAvail and then force ALP */

 This may take up to 15 milliseconds */

 Also, disable the extra SDIO pull-ups */

 clear all interrupts */

 Write reset vector to address 0 */

	/*

	 * this is a bit of special handling if reading the chipcommon chipid

	 * register. The 4339 is a next-gen of the 4335. It uses the same

	 * SDIO device id as 4335 and the chipid register returns 4335 as well.

	 * It can be identified as 4339 by looking at the chip revision. It

	 * is corrected here so the chip.c module has the right info.

	/*

	 * Force PLL off until brcmf_chip_attach()

	 * programs PLL control regs

 Pick up the SDIO core info struct from chip.c */

 Pick up the CHIPCOMMON core info struct, for bulk IO in bcmsdh.c */

	/* platform specific configuration:

	 *   alignments must be at least 4 bytes for ADMA

	/* allocate scatter-gather table. sg support

	 * will be disabled upon allocation failure.

	/* wowl can be supported when KEEP_POWER is true and (WAKE_SDIO_IRQ

	 * is true or when platform data OOB irq is true).

 Set card control so an SDIO card reset does a WLAN backplane reset */

 set PMUControl so a backplane reset does PMU state reload */

 allocate header buffer */

 Locate an appropriately-aligned portion of hdrbuf */

 Set the poll and/or interrupt flags */

 Run until signal received */

 Count the tick for reference */

 Reschedule the watchdog */

 start by unregistering irqs */

 reset the adapter */

 try to download image and nvram to the dongle */

 Start the watchdog timer */

 Make sure backplane clock is on, needed to generate F2 interrupt */

 Force clocks on backplane to be sure F2 interrupt propagates */

 Enable function 2 (frame transfers) */

 If F2 successfully enabled, set core and enable interrupts */

 Set up the interrupt mask and enable interrupts */

 Disable F2 again */

 Restore previous clock setting */

 Assign bus interface call back */

 Allow full data communication using DPC from now on. */

 If we didn't come up, turn off backplane clock */

 Attach to the common layer, reserve hdr space */

 ready */

 Allocate private bus interface state */

 single-threaded workqueue */

 attempt to attach to the dongle */

 Set up the watchdog timer */

 Initialize watchdog thread */

 Initialize DPC thread */

 default sdio bus header length for tx packet */

 Query the F2 block size, set roundup accordingly */

 Disable F2 to clear any intermediate frame state on the dongle */

 Done with backplane-dependent accesses, can drop clock... */

 ...and initialize clock/power states */

 SR state */

 Detach and free everything */

 Stop watchdog task */

 De-register interrupt handler */

				/* Leave the device in state where it is

				 * 'passive'. This is done by resetting all

				 * necessary cores.

 Totally stop the timer */

 don't start the wd until fw is loaded */

			/* Create timer again when watchdog period is

			   dynamically changed or in the first instance

 Re arm the timer, at last watchdog period */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014 Broadcom Corporation

		/* To prevent (work around) possible race condition, check

		 * queue len again. It is also possible to use locking to

		 * protect, but that is undesirable for every enqueue and

		 * dequeue. This simple check will solve a possible race

		 * condition if it occurs.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 default boost value for RSSI_DELTA in preferred join selection */

 max tx frames in glom chain */

 Debug level configuration. See debug.h for bits, sysfs modifiable */

 always succeed brcmf_bus_started() */

 Setup join_pref to select target by RSSI (boost on 5GHz) */

 Retrieve clmload_status and print */

 retreive mac address */

 use revinfo if not known yet */

 Do any CLM downloading */

 query for 'ver' to get version info from firmware */

 Print fw version info */

 locate firmware version number for ethtool */

 Query for 'clmver' to get CLM version info from firmware */

 store CLM version for adding it to revinfo debugfs file */

		/* Replace all newline/linefeed characters with space

		 * character

 set mpc */

 Setup event_msgs, enable E_IF */

 Setup default scan channel time */

 Setup default scan unassoc time */

 Enable tx beamforming, errors can be ignored (not supported) */

	/* If module param firmware path is set then this will always be used,

	 * if not set then if available use the platform data version. To make

	 * sure it gets initialized at all, always copy the module param version

 start by using the module paramaters */

 See if there is any device specific platform data configured */

 No platform data for this device, try OF and DMI data */

 Get the platform data (if available) for our devices */

 Initialize global module paramaters */

 Continue the initialization by registering the different busses */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

/*******************************************************************************

 * Communicates with the dongle by using dcmd codes.

 * For certain dcmd codes, the dongle interprets string data from the host.

 dongle command value */

	__le32 len;	/* lower 16: output buflen;

 flag defns given below */

 status code returned from the device */

 BCDC flag definitions */

 1=cmd failed */

 0=get, 1=set cmd */

 I/F index */

 id an cmd pairing */

 ID Mask shift bits */

/*

 * BCDC header - Broadcom specific extension of CDC.

 * Used on data packets to convey priority across USB.

 Protocol version */

 Protocol version mask */

 Protocol version shift */

 Good RX checksums */

 Dongle needs to do TX checksums */

 packet rx interface in APSTA */

/**

 * struct brcmf_proto_bcdc_header - BCDC header format

 *

 * @flags: flags contain protocol and checksum info.

 * @priority: 802.1d priority and USB flow control info (bit 4:7).

 * @flags2: additional flags containing dongle interface index.

 * @data_offset: start of packet data. header is following by firmware signals.

/*

 * maximum length of firmware signal data between

 * the BCDC header and packet data in the tx path.

 # of retries to retrieve matching dcmd response */

#define BUS_HEADER_LEN	(16+64)		/* Must be atleast SDPCM_RESERVE

					 * (amount of header tha might be added)

					 * plus any space that might be needed

					 * for bus alignment padding.

 Send request */

 wait for interrupt and get first fragment */

 Check info buffer */

 Copy info buffer */

 Check the ERROR flag */

 Check the ERROR flag */

 Push BDC header used to convey priority for buses that don't */

 Pop BCDC header used to convey priority for buses that don't */

 await txstatus signal for firmware if active */

 ensure that the msg buf directly follows the cdc msg struct */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012 Broadcom Corporation

 bug in tracepoint.h, it should include this */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014 Broadcom Corporation

 Custom brcmf_err() that takes bus arg and passes it further */

 msec */

 backplane addres space accessed by BAR0 */

 Magic number at a magic location to find RAM size */

 SMAR */

/**

 * struct brcmf_pcie_dhi_ringinfo - dongle/host interface shared ring info

 *

 * @ringmem: dongle memory pointer to ring memory location

 * @h2d_w_idx_ptr: h2d ring write indices dongle memory pointers

 * @h2d_r_idx_ptr: h2d ring read indices dongle memory pointers

 * @d2h_w_idx_ptr: d2h ring write indices dongle memory pointers

 * @d2h_r_idx_ptr: d2h ring read indices dongle memory pointers

 * @h2d_w_idx_hostaddr: h2d ring write indices host memory pointers

 * @h2d_r_idx_hostaddr: h2d ring read indices host memory pointers

 * @d2h_w_idx_hostaddr: d2h ring write indices host memory pointers

 * @d2h_r_idx_hostaddr: d2h ring reaD indices host memory pointers

 * @max_flowrings: maximum number of tx flow rings supported.

 * @max_submissionrings: maximum number of submission rings(h2d) supported.

 * @max_completionrings: maximum number of completion rings(d2h) supported.

 Disable ASPM */

 Watchdog reset */

 Restore ASPM */

 BAR1 window may not be sized properly */

 Send mailbox interrupt twice as a hardware workaround */

/**

 * brcmf_pcie_bus_console_read - reads firmware messages

 *

 * @devinfo: pointer to the device data structure

 * @error: specifies if error has occurred (prints messages unconditionally)

 Any arbitrary value will do, lets use 1 */

 check firmware support dma indicies */

	/* reset last 4 bytes of RAM address. to be used for shared

	 * area. This identifies when FW is running

 Bar-0 mapped address */

 Bar-1 mapped address */

 read Bar-1 mapped memory range */

 check firmware loading result */

	/* Some of the firmwares have the size of the memory of the device

	 * defined inside the firmware. This is because part of the memory in

	 * the device is shared and the devision is determined by FW. Parse

	 * the firmware and adjust the chip memory size now.

 hook the commonrings in the bus structure. */

 NVRAM reserves PCI domain 0 for Broadcom's SDK faked bus */

 hook it all together. */

 Check if device is still up and running, if so we are ready */

 CONFIG_PM */

 end: all zeroes */ }

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2010 Broadcom Corporation

 Free the driver packet. Free the tag if present */

/*

 * osl multiple-precedence packet queue

 * hi_prec is always >= the number of the highest non-empty precedence

/*

 * precedence based dequeue with match function. Passing a NULL pointer

 * for the match function parameter is considered to be a wildcard so

 * any packet on the queue is returned. In that case it is no different

 * from brcmu_pktq_pdeq() above.

 pq is variable size; only zero out what's requested */

 Return sum of lengths of a specific set of precedences */

 Priority dequeue from a specific set of precedences */

 Produce a human-readable string for boardrev */

 pretty hex print a pkt buffer chain */

 defined(DEBUG) */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2013 Broadcom Corporation

********************channel spec common functions*********************/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux device driver for ADMtek ADM8211 (IEEE 802.11b MAC/BBP)

 *

 * Copyright (c) 2003, Jouni Malinen <j@w1.fi>

 * Copyright (c) 2004-2007, Michael Wu <flamingice@sourmilk.net>

 * Some parts copyright (c) 2003 by David Young <dyoung@pobox.com>

 * and used with permission.

 *

 * Much thanks to Infineon-ADMtek for their support of this driver.

 ADMtek ADM8211 */

 3Com 3CRSHPW796 */

 ? */

 ADM8211A */

 ADM8211B/C */

 XX ?? */

 eeprom_delay */

 256 * 16-bit = 512 bytes */

 64 * 16-bit = 128 bytes */

 TODO: check TDES0_STATUS_TUF and TDES0_STATUS_TRO */

 old buffer will be reused */

 TODO: update RX error stats */

 TODO: check RDES0_STATUS_CRC*E */

 TODO: update rx dropped stats */

 TODO: update rx dropped stats */

 TODO: check LPC and update stats? */

 three wire interface */

 Program synthesizer to new channel */

 write BBP regs */

 SMC 2635W specific? adm8211b doesn't use the 2948 though.. */

 TODO: remove if SMC 2635W doesn't need this */

 set PCNT2 */

 set PCNT1 P_DESIRED/MID_BIAS */

 set TXRX TX_GAIN */

 RF3000 BBP */

 Nothing to do for ADMtek BBP */

 update current channel for adhoc (and maybe AP mode) */

 don't trust the error bits on rev 0x20 and up in adhoc */

 comments taken from ADMtek vendor driver */

 Reset RF2958 after power on */

 Initialize RF VCO Core Bias to maximum */

 Initialize IF PLL */

 Initialize IF PLL Coarse Tuning */

 Initialize RF PLL */

 Initialize RF PLL Coarse Tuning */

 Initialize TX gain and filter BW (R9) */

 Initialize CAL register */

 write addresses */

 check specific BBP type */

 For RFMD */

 Set RF Power control IF pin to PE1+PHYRST# */

 write BBP regs */

 RF3000 BBP */

		/* another set:

		 * 11: c8

		 * 14: 14

		 * 15: 50 (chan 1..13; chan 14: d0)

		 * 1c: 00

		 * 1d: 84

 antenna selection: diversity */

 reset baseband */

 antenna selection: diversity */

 TODO: find documentation for this */

 Set RF CAL control source to MAC control */

 configures hw beacons/probe responses */

 write supported rates */

 workaround for rev BA specific bug */

 keep bits 0-23 */

 short preamble */

	/* MTMLT   = 512 TU (max TX MSDU lifetime)

	 * BCNTSIG = plcp_signal (beacon, probe resp, and atim TX rate)

 lose link after 4 lost beacons */

	/* Disable APM, enable receive FIFO threshold, and set drain receive

	/* 4-bit values:

	 * PWR1UP   = 8 * 2 ms

	 * PWR0PAPE = 8 us or 5 us

	 * PWR1PAPE = 1 us or 3 us

	 * PWR0TRSW = 5 us

	 * PWR1TRSW = 12 us

	 * PWR0PE2  = 13 us

	 * PWR1PE2  = 1 us

 Enable store and forward for transmit */

 Reset RF */

 Set CFP Max Duration to 0x10 TU */

	/* USCNT = 0x16 (number of system clocks, 22 MHz, in 1us

	/* SLOT=20 us, SIFS=110 cycles of 22 MHz (5 us),

	/* PCNT = 1 (MAC idle time awake/sleep, unit S)

 MART=65535 us, MIRT=256 us, TSFTOFST=0 us */

 Initialize BBP (and SYN) */

 make sure interrupts are off */

 ACK interrupts */

 Setup WEP (turns it off for now) */

 Clear the missed-packet counter. */

 Power-on issue */

 TODO: check if this is necessary */

 Reset the chip */

 EEPROM Recall */

	/* BP (beacon interval) = data->beacon_interval

	/* Mark the end of RX ring; hw returns to base address after this

 Setup TX ring. TX buffers descriptors will be filled in as needed */

 Power up MAC and RF chips */

 Init hardware */

 Alternative calculation from NetBSD: */

 IEEE 802.11b durations for DSSS PHY in microseconds */

 1-2Mbps WLAN: send ACK/CTS at 1Mbps */

 5-11Mbps WLAN: send ACK/CTS at 2Mbps */

 lengthen duration if long preamble */

 Transmit skb w/adm8211_tx_hdr (802.11 header created by hardware) */

 Set TX rate (SIGNAL field in PLCP PPDU format) */

 ? */;

 Trigger transmit poll */

 Put adm8211_tx_hdr on skb and transmit */

 Drop packet */

 Allocate TX/RX descriptors */

 check signature */

 CR32 */, &reg);

 someone else grabbed it? don't disable it */

 dev->flags = RX_INCLUDES_FCS in promisc mode */

 FIXME: find better value */

 ADM8211C supports more, maybe ADM8211B too */

 Power-on issue. EEPROM won't read correctly without */

 TODO: implement enable_wake */

/*

 * Copyright (c) 2009 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/**

 * ath_hw_setbssidmask - filter out bssids we listen

 *

 * @common: the ath_common struct for the device.

 *

 * BSSID masking is a method used by AR5212 and newer hardware to inform PCU

 * which bits of the interface's MAC address should be looked at when trying

 * to decide which packets to ACK. In station mode and AP mode with a single

 * BSS every bit matters since we lock to only one BSS. In AP mode with

 * multiple BSSes (virtual interfaces) not every bit matters because hw must

 * accept frames for all BSSes and so we tweak some bits of our mac address

 * in order to have multiple BSSes.

 *

 * NOTE: This is a simple filter and does *not* filter out all

 * relevant frames. Some frames that are not for us might get ACKed from us

 * by PCU because they just match the mask.

 *

 * When handling multiple BSSes you can get the BSSID mask by computing the

 * set of  ~ ( MAC XOR BSSID ) for all bssids we handle.

 *

 * When you do this you are essentially computing the common bits of all your

 * BSSes. Later it is assumed the hardware will "and" (&) the BSSID mask with

 * the MAC address to obtain the relevant bits and compare the result with

 * (frame's BSSID & mask) to see if they match.

 *

 * Simple example: on your card you have have two BSSes you have created with

 * BSSID-01 and BSSID-02. Lets assume BSSID-01 will not use the MAC address.

 * There is another BSSID-03 but you are not part of it. For simplicity's sake,

 * assuming only 4 bits for a mac address and for BSSIDs you can then have:

 *

 *                  \

 * MAC:        0001 |

 * BSSID-01:   0100 | --> Belongs to us

 * BSSID-02:   1001 |

 *                  /

 * -------------------

 * BSSID-03:   0110  | --> External

 * -------------------

 *

 * Our bssid_mask would then be:

 *

 *             On loop iteration for BSSID-01:

 *             ~(0001 ^ 0100)  -> ~(0101)

 *                             ->   1010

 *             bssid_mask      =    1010

 *

 *             On loop iteration for BSSID-02:

 *             bssid_mask &= ~(0001   ^   1001)

 *             bssid_mask =   (1010)  & ~(0001 ^ 1001)

 *             bssid_mask =   (1010)  & ~(1000)

 *             bssid_mask =   (1010)  &  (0111)

 *             bssid_mask =   0010

 *

 * A bssid_mask of 0010 means "only pay attention to the second least

 * significant bit". This is because its the only bit common

 * amongst the MAC and all BSSIDs we support. To findout what the real

 * common bit is we can simply "&" the bssid_mask now with any BSSID we have

 * or our MAC address (we assume the hardware uses the MAC address).

 *

 * Now, suppose there's an incoming frame for BSSID-03:

 *

 * IFRAME-01:  0110

 *

 * An easy eye-inspeciton of this already should tell you that this frame

 * will not pass our check. This is because the bssid_mask tells the

 * hardware to only look at the second least significant bit and the

 * common bit amongst the MAC and BSSIDs is 0, this frame has the 2nd LSB

 * as 1, which does not match 0.

 *

 * So with IFRAME-01 we *assume* the hardware will do:

 *

 *     allow = (IFRAME-01 & bssid_mask) == (bssid_mask & MAC) ? 1 : 0;

 *  --> allow = (0110 & 0010) == (0010 & 0001) ? 1 : 0;

 *  --> allow = (0010) == 0000 ? 1 : 0;

 *  --> allow = 0

 *

 *  Lets now test a frame that should work:

 *

 * IFRAME-02:  0001 (we should allow)

 *

 *     allow = (IFRAME-02 & bssid_mask) == (bssid_mask & MAC) ? 1 : 0;

 *  --> allow = (0001 & 0010) ==  (0010 & 0001) ? 1 :0;

 *  --> allow = (0000) == (0000)

 *  --> allow = 1

 *

 * Other examples:

 *

 * IFRAME-03:  0100 --> allowed

 * IFRAME-04:  1001 --> allowed

 * IFRAME-05:  1101 --> allowed but its not for us!!!

 *

/**

 * ath_hw_cycle_counters_update - common function to update cycle counters

 *

 * @common: the ath_common struct for the device.

 *

 * This function is used to update all cycle counters in one place.

 * It has to be called while holding common->cc_lock!

 freeze */

 read */

 clear */

 unfreeze */

 update all cycle counters here */

/*

 * Copyright (c) 2012 Neratec Solutions AG

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * struct pulse_elem - elements in pulse queue

/*

 * pde_get_multiple() - get number of multiples considering a given tolerance

 * Return value: factor if abs(val - factor*fraction) <= tolerance, 0 otherwise

 val and fraction are within tolerance */

 no exact match */

 remainder is within tolerance */

/*

 * DOC: Singleton Pulse and Sequence Pools

 *

 * Instances of pri_sequence and pulse_elem are kept in singleton pools to

 * reduce the number of dynamic allocations. They are shared between all

 * instances and grow up to the peak number of simultaneously used objects.

 *

 * Memory is freed after all references to the pools are released.

 free singleton pools with no references left */

 give it back to pool */

 remove pulses older than window */

 there is no delta time with less than 2 pulses */

 ignore too small pri */

 stop on too large pri (sorted list) */

 build a new sequence with new potential pri */

 check which past pulses are candidates for new sequence */

 stop on crossing window border */

 check if pulse match (multi)PRI */

				/*

				 * on match, add the intermediate falses

				 * and reset counter

 this is a potential false one */

 did not reach minimum count, drop sequence */

 this is a valid one, add it */

 check new ts and add to all matching existing sequences */

 first ensure that sequence is within window */

		/*

		 * we assume to have enough matching confidence if we

		 * 1) have enough pulses

		 * 2) have more matching than false pulses

 free pulse queue and sequences list and give objects back to pools */

 ignore pulses not within width range */

 if delta to last pulse is too short, don't use this pulse */

 radar detector spec needs chirp, but not detected */

/*

 * Copyright (c) 2009 Atheros Communications Inc.

 * Copyright (c) 2010 Bruno Randolf <br1@einfach.org>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 number of key ids */

***********************/

 Key Cache Management */

***********************/

		/*

		 * AR_KEYTABLE_VALID indicates that the address is a unicast

		 * address, which must match the transmitter address for

		 * decrypting frames.

		 * Not setting this bit allows the hardware to use the key

		 * for multicast frame decryption.

	/*

	 * Note: Key cache registers access special memory area that requires

	 * two 32-bit writes to actually update the values in the internal

	 * memory. Consequently, the exact order and pairs used here must be

	 * maintained.

		/*

		 * Write inverted key[47:0] first to avoid Michael MIC errors

		 * on frames that could be sent or received at the same time.

		 * The correct key will be written in the end once everything

		 * else is ready.

 Write key[95:48] */

 Write key[127:96] and key type */

 Write MAC address for the entry */

			/*

			 * TKIP uses two key cache entries:

			 * Michael MIC TX/RX keys in the same key cache entry

			 * (idx = main index + 64):

			 * key0 [31:0] = RX key [31:0]

			 * key1 [15:0] = TX key [31:16]

			 * key1 [31:16] = reserved

			 * key2 [31:0] = RX key [63:32]

			 * key3 [15:0] = TX key [15:0]

			 * key3 [31:16] = reserved

			 * key4 [31:0] = TX key [63:32]

 Write RX[31:0] and TX[31:16] */

 Write RX[63:32] and TX[15:0] */

 Write TX[63:32] and keyType(reserved) */

			/*

			 * TKIP uses four key cache entries (two for group

			 * keys):

			 * Michael MIC TX/RX keys are in different key cache

			 * entries (idx = main index + 64 for TX and

			 * main index + 32 + 96 for RX):

			 * key0 [31:0] = TX/RX MIC key [31:0]

			 * key1 [31:0] = reserved

			 * key2 [31:0] = TX/RX MIC key [63:32]

			 * key3 [31:0] = reserved

			 * key4 [31:0] = reserved

			 *

			 * Upper layer code will call this function separately

			 * for TX and RX keys when these registers offsets are

			 * used.

 Write MIC key[31:0] */

 Write MIC key[63:32] */

 Write TX[63:32] and keyType(reserved) */

 MAC address registers are reserved for the MIC entry */

		/*

		 * Write the correct (un-inverted) key[47:0] last to enable

		 * TKIP now that all other registers are set with correct

		 * values.

 Write key[47:0] */

 Write key[95:48] */

 Write key[127:96] and key type */

 Write MAC address for the entry */

		/*

		 * Group key installation - only two key cache entries are used

		 * regardless of splitmic capability since group key is only

		 * used either for TX or RX.

 TX and RX keys share the same key cache entry. */

 Separate key cache entries for TX and RX */

 TX key goes at first index, RX key at +32. */

 TX MIC entry failed. No need to proceed further */

 XXX delete tx key on failure? */

 At least one part of TKIP key allocated */

 At least one part of TKIP key allocated */

 Found a free slot for a TKIP key */

 First, try to find slots that would not be available for TKIP. */

 No partially used TKIP slots, pick any available slot */

		/* Do not allow slots that could be needed for TKIP group keys

		 * to be used. This limitation could be removed if we know that

 Found a free slot for a key */

 No free slot found */

/*

 * Configure encryption in the HW.

			/* Only keyidx 0 should be used with unicast key, but

 no free key cache entries */

/*

 * Delete Key.

	/* Leave CCMP and TKIP (main key) configured to avoid disabling

	 * encryption for potentially pending frames already in a TXQ with the

	 * keyix pointing to this key entry. Instead, only clear the MAC address

	 * to prevent RX processing from using this key cache entry.

/*

 * Copyright (c) 2009 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Copyright (c) 2008-2009 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * This is a set of common rules used by our world regulatory domains.

 * We have 12 world regulatory domains. To save space we consolidate

 * the regulatory domains in 5 structures by frequency and change

 * the flags on our reg_notifier() on a case by case basis.

 Only these channels all allow active scan on all world regulatory domains */

 We enable active scan on these a case by case basis by regulatory domain */

 We allow IBSS on these on a case by case basis by regulatory domain */

 This one skips what we call "mid band" */

/* Can be used for:

 Can be used by 0x63 and 0x65 */

 Can be used by 0x64 only */

 Can be used by 0x66 and 0x69 */

 Can be used by 0x67, 0x68, 0x6A and 0x6C */

 this is the most restrictive */

 possibly more */

 Frequency is one where radar detection is required */

/*

 * These exception rules do not apply radar frequencies.

 *

 * - We enable initiating radiation if the country IE says its fine:

 * - If no country IE has been processed and a we determine we have

 *   received a beacon on a channel we can enable initiating radiation.

/**

 * ath_reg_apply_ir_flags()

 * @wiphy: the wiphy to use

 * @reg: regulatory structure - used for country selection

 * @initiator: the regulatory hint initiator

 *

 * If no country IE has been received always enable passive scan

 * and no-ibss on these channels. This is only done for specific

 * regulatory SKUs.

 *

 * If a country IE has been received check its rule for this

 * channel first before enabling active scan. The passive scan

 * would have been enforced by the initial processing of our

 * custom regulatory domain.

 Always apply Radar/DFS rules on freq range 5500 MHz - 5700 MHz */

		/* We always enable radar detection/DFS on this

		 * frequency range. Additionally we also apply on

		 * this frequency range:

		 * - If STA mode does not yet have DFS supports disable

		 *   active scanning

		 * - If adhoc mode does not support DFS yet then

		 *   disable adhoc in the frequency.

		 * - If AP mode does not yet support radar detection/DFS

		 *   do not allow AP mode

 We always apply this */

	/*

	 * This would happen when we have sent a custom regulatory request

	 * a world regulatory domain and the scheduler hasn't yet processed

	 * any pending requests in the queue.

		/*

		 * If common->reg_world_copy is world roaming it means we *were*

		 * world roaming... so we now have to restore that data.

 EEPROM value is a country code */

 EEPROM value is a regpair value */

 EEPROM country code to regpair mapping */

 EEPROM rd code to regpair mapping */

 Returns the map of the EEPROM set RD to a country code */

		/*

		 * Anything applied here (prior to wiphy registration) gets

		 * saved on the wiphy orig_* parameters

		/*

		 * This gets applied in the case of the absence of CRDA,

		 * it's our own custom world regulatory domain, similar to

		 * cfg80211's but we enable passive scanning.

/*

 * Some users have reported their EEPROM programmed with

 * 0x8000 or 0x0 set, this is not a supported regulatory

 * domain but since we have more than one user with it we

 * need a solution for them. We default to 0x64, which is

 * the default Atheros world regulatory domain.

/*

 * Copyright (c) 2012 Neratec Solutions AG

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/**

 * struct radar_types - contains array of patterns defined for one DFS domain

 * @region: regulatory DFS region

 * @num_radar_types: number of radar types to follow

 * @radar_types: radar types array

 percentage on ppb threshold to trigger detection */

 percentage of pulse width tolerance */

 radar types as defined by ETSI EN-301-893 v1.5.1 */

/* radar types released on August 14, 2014

 * type 1 PRI values randomly selected within the range of 518 and 3066.

 * divide it to 3 groups is good enough for both of radar detection and

 * avoiding false detection based on practical test results

 * collected for more than a year.

/**

 * get_dfs_domain_radar_types() - get radar types for a given DFS domain

 * @region: regulatory DFS region

 *

 * Return value: radar_types ptr on success, NULL if DFS domain is not supported

/**

 * struct channel_detector - detector elements for a DFS channel

 * @head: list_head

 * @freq: frequency for this channel detector in MHz

 * @detectors: array of dynamically created detector elements for this freq

 *

 * Channel detectors are required to provide multi-channel DFS detection, e.g.

 * to support off-channel scanning. A pattern detector has a list of channels

 * radar pulses have been reported for in the past.

 channel_detector_reset() - reset detector lines for a given channel */

 channel_detector_exit() - destructor */

/**

 * channel_detector_get() - get channel detector for given frequency

 * @dpd: DPD instance pointer

 * @freq: freq frequency in MHz

 *

 * Return value: pointer to channel detector on success, NULL otherwise

 *

 * Return existing channel detector for the given frequency or return a

 * newly create one.

/*

 * DFS Pattern Detector

 dpd_reset(): reset all channel detectors */

	/*

	 * pulses received for a non-supported or un-initialized

	 * domain are treated as detected radars for fail-safety

 reset detector on time stamp wraparound, caused by TSF reset */

 do type individual pattern matching */

 delete all channel detectors for previous DFS domain */

/*

 * Copyright (c) 2014 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Copyright (c) 2009 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * Cache-line-align.  This is important (for the

	 * 5210 at least) as not doing so causes bogus data

	 * in rx'd frames.

	/* Note: the kernel can allocate a value greater than

	 * what we ask it to give us. We really only need 4 KB as that

	 * is this hardware supports and in fact we need at least 3849

	 * as that is the MAX AMSDU size this hardware supports.

	 * Unfortunately this means we may get 8 KB here from the

	 * kernel... and that is actually what is observed on some

/*

 * Copyright (c) 2013 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

************/

 node_aggr */

************/

************/

 node_recv */

************/

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 * Copyright (c) 2011 Neratec Solutions AG

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 internal struct to pass radar data */

*** begin: CHIRP ************************************************************/

/* min and max gradients for defined FCC chirping pulses, given by

 * - 20MHz chirp width over a pulse width of  50us

 * -  5MHz chirp width over a pulse width of 100us

 we need at least 3 deltas / 4 samples for a reliable chirp detection */

 Threshold for difference of delta peaks */

 width range to be checked for chirping */

 if detected radar on both channels, select the significant one */

 first check wether channels have 'strong' bins */

 if still unclear, take higher magnitude */

 HW sometimes adds 2 garbage bytes in front of FFT samples */

 in ht20, this is a 6-bit signed number => shift it to 0 */

	/* Check for chirp attributes within specs

	 * a) delta of adjacent max_bins is within range

	 * b) delta of adjacent deltas are within tolerance

 ensure gradient is within valid range */

*** end: CHIRP **************************************************************/

 convert pulse duration to usecs, considering clock mode */

	/*

	 * Only the last 2 bits of the BW info are relevant, they indicate

	 * which channel the radar was detected in.

 radar in ctrl channel */

		/*

		 * cannot use ctrl channel RSSI

		 * if extension channel is stronger

 radar in extension channel */

		/*

		 * cannot use extension channel RSSI

		 * if control channel is stronger

		/*

		 * Conducted testing, when pulse is on DC, both pri and ext

		 * durations are reported to be same

		 *

		 * Radiated testing, when pulse is on DC, different pri and

		 * ext durations are reported, so take the larger of the two

 when both are present use stronger one */

		/*

		 * Bogus bandwidth info was received in descriptor,

		 * so ignore this PHY error

 convert duration to usecs */

/*

 * DFS: check PHY-error for radar pulse and feed the detector

	/*

	 * hardware stores this as 8 bit signed value.

	 * we will cap it at 0 if it is a negative number

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 AR9287 v1.3+ uses async FIFO and runs the MAC at 117 MHz */

 should really check for CCK instead */

 25 MHz spacing is supported by hw but not on upper layers */

*****************/

 Chip Revisions */

*****************/

***********************************/

 HW Attach, Detach, Init Routines */

***********************************/

 This should work for all families including legacy */

	/*

	 * We need this for PCI devices only (Cardbus, PCI, miniPCI)

	 * _and_ if on non-uniprocessor systems (Multiprocessor/HT).

	 * This means we use it for all AR5416 devices, and the few

	 * minor PCI AR9280 devices out there.

	 *

	 * Serialization is required because these devices do not handle

	 * well the case of two concurrent reads/writes due to the latency

	 * involved. During one read/write another read/write can be issued

	 * on another CPU while the previous read/write may still be working

	 * on our hardware, if we hit this case the hardware poops in a loop.

	 * We prevent this by serializing reads and writes.

	 *

	 * This issue is not present on PCI-Express devices or pre-AR5416

	 * devices (legacy, 802.11abg).

 MAC address may already be loaded via ath9k_platform_data */

	/*

	 * EEPROM needs to be initialized before we do this.

	 * This is required for regulatory compliance.

 Called for all hardware families */

	/*

	 * Read back AR_WA into a permanent copy and set bits 14 and 17.

	 * We need to do this to avoid RMW of this register. We cannot

	 * read the reg when chip is asleep.

 These are all the AR5008/AR9001/AR9002/AR9003 hardware family of chipsets */

 program BB PLL ki and kd value, ki=0x4, kd=0x40 */

 program BB PLL phase_shift to 0x6 */

 program DDR PLL ki and kd value */

 program DDR PLL phase_shift */

 program refdiv, nint, frac to RTC register */

 program BB PLL kd and ki value */

 program BB PLL phase_shift */

 Switch the core clock for ar9271 to 117Mhz */

 As defined by IEEE 802.11-2007 17.3.8.6 */

	/*

	 * Workaround for early ACK timeouts, add an offset to match the

	 * initval's 64us ack timeout value. Use 48us for the CTS timeout.

	 * This was initially only meant to work around an issue with delayed

	 * BA frames in some implementations, but it has been found to fix ACK

	 * timeout issues in other cases as well.

******/

 INI */

******/

***************************************/

 Reset and Channel Switching Routines */

***************************************/

	/*

	 * set AHB_MODE not to do cacheline prefetches

	/*

	 * let mac dma reads be in 128 byte chunks

	/*

	 * Restore TX Trigger Level to its pre-reset value.

	 * The initial value depends on whether aggregation is enabled, and is

	 * adjusted whenever underruns are detected.

	/*

	 * let mac dma writes be in 128 byte chunks

	/*

	 * Setup receive FIFO threshold to hold off TX activities

	/*

	 * reduce the number of usable entries in PCU TXBUF to avoid

	 * wrap around issues.

		/* For AR9285 the number of Fifos are reduced to half.

		 * So set the usable tx buf size also to half to

		 * avoid data/delimiter underruns

 Uses fewer entries for AR934x v1.3+ to prevent rx overruns */

/* AR9330 WAR:

 * call external reset function to reset WMAC if:

 * - doing a cold reset

 * - we have pending frames in the TX queues.

	/* DMA HALT added to resolve ar9300 and ar9580 bus error during

	 * RTC_RC reg read

 Check if chip failed to wake up */

 Setup MFP options for CCMP */

		/* Mask Retry(b11), PwrMgt(b12), MoreData(b13) to 0 in mgmt

 Disable hardware crypto for management frames */

/*

 * For big endian systems turn on swapping for descriptors

 Configure AR9271 target WLAN */

/*

 * Fast channel change:

 * (Change synthesizer based on channel freq without resetting chip)

	/*

	 * If cross-band fcc is not supoprted, bail out if channelFlags differ.

	/*

	 * For AR9462, make sure that calibration data for

	 * re-using are present.

 Operating channel changed, reset channel calibration data */

 Save TSF before chip reset, a cold reset clears it */

 Only required on the first reset */

 Only required on the first reset */

 Restore TSF */

	/*

	 * Some AR91xx SoC devices frequently fail to accept TSF writes

	 * right after the chip reset. When that happens, write a new

	 * value after the initvals have been applied.

 set HW specific DFS configuration */

*****************************/

 Power Management (Chipset) */

*****************************/

/*

 * Notify Power Mgt is disabled in self-generated frames.

 * If requested, force chip to sleep.

 xxx Required for WLAN only case ? */

	/*

	 * Clear the RTC force wake bit to allow the

	 * mac to go to sleep.

 Shutdown chip. Active low */

 Clear Bit 14 of AR_WA after putting chip into Full Sleep mode. */

/*

 * Notify Power Management is enabled in self-generating

 * frames. If request, set power mode of chip to

 * auto/normal.  Duration in units of 128us (1/8 TU).

 Set WakeOnInterrupt bit; clear ForceWake bit */

		/* When chip goes into network sleep, it could be waken

		 * up by MCI_INT interrupt caused by BT's HW messages

		 * (LNA_xxx, CONT_xxx) which chould be in a very fast

		 * rate (~100us). This will cause chip to leave and

		 * re-enter network sleep mode frequently, which in

		 * consequence will have WLAN MCI HW to generate lots of

		 * SYS_WAKING and SYS_SLEEPING messages which will make

		 * BT CPU to busy to process.

		/*

		 * Clear the RTC force wake bit to allow the

		 * mac to go to sleep.

 Clear Bit 14 of AR_WA after putting chip into Net Sleep mode. */

 Set Bits 14 and 17 of AR_WA before powering on the chip. */

	/*

	 * XXX: If this warning never comes up after a while then

	 * simply keep the ATH_DBG_WARN_ON_ONCE() but make

	 * ath9k_hw_setpower() return type void.

******************/

 Beacon Handling */

******************/

 TSF Out of Range Threshold */

******************/

 HW Capabilities */

******************/

/**

 * ath9k_hw_dfs_tested - checks if DFS has been tested with used chipset

 * @ah: the atheros hardware data structure

 *

 * We enable DFS support upstream on chipsets which have passed a series

 * of tests. The testing requirements are going to be documented. Desired

 * test requirements are documented at:

 *

 * https://wireless.wiki.kernel.org/en/users/Drivers/ath9k/dfs

 *

 * Once a new chipset gets properly tested an individual commit can be used

 * to document the testing for DFS for that chipset.

 for temporary testing DFS with 9280 */

 AR9580 will likely be our first target to get testing on */

	/*

	 * For AR9271 we will temporarilly uses the rx chainmax as read from

	 * the EEPROM.

 CB71: GPIO 0 is pulled down to indicate 3 rx chains */

 Use rx_chainmask from EEPROM. */

 enable key search for every frame in an aggregate */

***************************/

 GPIO / RFKILL / Antennae */

***************************/

/* BSP should set the corresponding MUX register correctly.

********************/

 General Operation */

********************/

 HW Generic timers configuration */

 HW generic timer primitives */

 allocate a hardware generic timer slot */

	/*

	 * Program generic timer registers

		/*

		 * Starting from AR9462, each generic timer can select which tsf

		 * to use. But we still follow the old rule, 0 - 7 use tsf and

		 * 8 - 15  use tsf2.

 Clear generic timer enable bits. */

		/*

		 * Need to switch back to TSF if it was using TSF2.

 Disable both trigger and thresh interrupt masks */

 free the hardware generic timer slot */

/*

 * Generic Timer Interrupts handling

 get hardware generic timer interrupt status */

*******/

 HTC  */

*******/

 Devices with external radios */

 Single-chip solutions */

 For devices with external radios */

/*

 * Return the MAC/BB name. "????" is returned if the MAC/BB is unknown.

/*

 * Return the RF name. "????" is returned if the RF is unknown.

 * Used for devices with external radios.

 chipsets >= AR9280 are single-chip */

/*

 * Copyright (c) 2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * AR9285

 * ======

 *

 * EEPROM has 2 4-bit fields containing the card configuration.

 *

 * antdiv_ctl1:

 * ------------

 * bb_enable_ant_div_lnadiv : 1

 * bb_ant_div_alt_gaintb    : 1

 * bb_ant_div_main_gaintb   : 1

 * bb_enable_ant_fast_div   : 1

 *

 * antdiv_ctl2:

 * -----------

 * bb_ant_div_alt_lnaconf  : 2

 * bb_ant_div_main_lnaconf : 2

 *

 * The EEPROM bits are used as follows:

 * ------------------------------------

 *

 * bb_enable_ant_div_lnadiv      - Enable LNA path rx antenna diversity/combining.

 *                                 Set in AR_PHY_MULTICHAIN_GAIN_CTL.

 *

 * bb_ant_div_[alt/main]_gaintb  - 0 -> Antenna config Alt/Main uses gaintable 0

 *                                 1 -> Antenna config Alt/Main uses gaintable 1

 *                                 Set in AR_PHY_MULTICHAIN_GAIN_CTL.

 *

 * bb_enable_ant_fast_div        - Enable fast antenna diversity.

 *                                 Set in AR_PHY_CCK_DETECT.

 *

 * bb_ant_div_[alt/main]_lnaconf - Alt/Main LNA diversity/combining input config.

 *                                 Set in AR_PHY_MULTICHAIN_GAIN_CTL.

 *                                 10=LNA1

 *                                 01=LNA2

 *                                 11=LNA1+LNA2

 *                                 00=LNA1-LNA2

 *

 * AR9485 / AR9565 / AR9331

 * ========================

 *

 * The same bits are present in the EEPROM, but the location in the

 * EEPROM is different (ant_div_control in ar9300_BaseExtension_1).

 *

 * ant_div_alt_lnaconf      ==> bit 0~1

 * ant_div_main_lnaconf     ==> bit 2~3

 * ant_div_alt_gaintb       ==> bit 4

 * ant_div_main_gaintb      ==> bit 5

 * enable_ant_div_lnadiv    ==> bit 6

 * enable_ant_fast_div      ==> bit 7

 LNA2 A-B */

 LNA1 A-B */

 LNA1 LNA2 */

 LNA2 LNA1 */

 LNA2 A+B */

 LNA1 A+B */

 set alt to the conf with maximun ratio */

 first alt*/

 Set alt LNA1 or LNA2*/

 Set alt to A+B or A-B */

 Set alt LNA1 or LNA2 */

 Set alt to A+B or A-B */

 first alt */

 Set alt LNA1 or LNA2 */

 Set alt to A+B or A-B */

 second alt */

 Set alt LNA1 or LNA2 */

 Set alt to A+B or A-B */

 main is largest */

 Set alt LNA1 or LNA2 */

 Set alt to A+B or A-B */

 alt_good */

 set alt to main, and alt to first conf */

 set alt to main, and alt to first conf */

 main is LNA1 */

 Adjust the fast_div_bias based on main and alt lna conf */

 A-B LNA2 */

 A-B LNA1 */

 A-B A+B */

 LNA2 A-B */

 LNA2 LNA1 */

 LNA2 A+B */

 LNA1 A-B */

 LNA1 LNA2 */

 LNA1 A+B */

 A+B A-B */

 A+B LNA2 */

 A+B LNA1 */

 Adjust the fast_div_bias based on main and alt_lna_conf */

 A-B LNA2 */

 A-B LNA1 */

 A-B A+B */

 LNA2 A-B */

 LNA2 LNA1 */

 LNA2 A+B */

 LNA1 A-B */

 LNA1 LNA2 */

 LNA1 A+B */

 A+B A-B */

 A+B LNA2 */

 A+B LNA1 */

 Adjust the fast_div_bias based on main and alt_lna_conf */

 A-B LNA2 */

 A-B LNA1 */

 A-B A+B */

 LNA2 A-B */

 LNA2 LNA1 */

 LNA2 A+B */

 LNA1 A-B */

 LNA1 LNA2 */

 LNA1 A+B */

 A+B A-B */

 A+B LNA2 */

 A+B LNA1 */

 A-B LNA2 */

 A-B LNA1 */

 A-B A+B */

 LNA2 A-B */

 LNA2 LNA1 */

 LNA2 A+B */

 LNA1 A-B */

 LNA1 LNA2 */

 LNA1 A+B */

 A+B A-B */

 A+B LNA2 */

 A+B LNA1 */

 set to A+B */

 set to A+B */

 set to A-B */

 use LNA2 as main LNA */

 set to A+B */

 set to A-B */

 set to LNA1 */

 use LNA1 as main LNA */

 set to A+B */

 set to A-B */

 set to LNA2 */

			/*

			 * Switch main and alt LNA.

		/*

		  Set alt to another LNA.

 Record packet only when both main_rssi and  alt_rssi is positive */

 Short scan check */

 Set alt to another LNA */

/*

 * Copyright (c) 2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * If MCI is being used, set PWR_SAV only when MCI's

	 * PS state is disabled.

 set rx disable bit */

 set the transmit buffer */

 tx_tries 0 */

 CCK_1M */

 OFDM_6M */

		/*

		 * AR9462 2.0 and AR9565 have an extra descriptor word

		 * (time based discard) compared to other chips.

	/*

	 * Read the WoW status register to know

	 * the wakeup reason.

	/*

	 * Mask only the WoW events that we have enabled. Sometimes

	 * we have spurious WoW events from the AR_WOW_PATTERN

	 * register. This mask will clean it up.

	/*

	 * set and clear WOW_PME_CLEAR registers for the chip to

	 * generate next wow signal.

	 * disable D3 before accessing other registers ?

 do we need to check the bit value 0x01000000 (7-10) ?? */

	/*

	 * Clear all events.

	/*

	 * restore the beacon threshold to init value

	/*

	 * Restore the way the PCI-E reset, Power-On-Reset, external

	 * PCIE_POR_SHORT pins are tied to its original value.

	 * Previously just before WoW sleep, we untie the PCI-E

	 * reset to our Chip's Power On Reset so that any PCI-E

	 * reset from the bus will not reset our chip

	/*

	 * We need to untie the internal POR (power-on-reset)

	 * to the external PCI-E reset. We also need to tie

	 * the PCI-E Phy reset to the PCI-E reset.

	/*

	 * AR_PMCTRL_HOST_PME_EN - Override PME enable in configuration

	 *                         space and allow MAC to generate WoW anyway.

	 *

	 * AR_PMCTRL_PWR_PM_CTRL_ENA - ???

	 *

	 * AR_PMCTRL_AUX_PWR_DET - PCI core SYS_AUX_PWR_DET signal,

	 *                         needs to be set for WoW in PCI mode.

	 *

	 * AR_PMCTRL_WOW_PME_CLR - WoW Clear Signal going to the MAC.

	 *

	 * Set the power states appropriately and enable PME.

	 *

	 * Set and clear WOW_PME_CLEAR for the chip

	 * to generate next wow signal.

	/*

	 * Random Backoff.

	 *

	 * 31:28 in AR_WOW_PATTERN : Indicates the number of bits used in the

	 *                           contention window. For value N,

	 *                           the random backoff will be selected between

	 *                           0 and (2 ^ N) - 1.

	/*

	 * AIFS time, Slot time, Keep Alive count.

	/*

	 * Beacon timeout.

	/*

	 * Keep alive timeout in ms.

	/*

	 * Keep alive delay in us.

	/*

	 * Create keep alive pattern to respond to beacons.

	/*

	 * Configure keep alive register.

 Send keep alive timeouts anyway */

	/*

	 * We are relying on a bmiss failure, ensure we have

	 * enough threshold to prevent false positives.

	/*

	 * Enable the magic packet registers.

	/*

	 * Enable pattern matching for packets which are less

	 * than 256 bytes.

	/*

	 * Set the power states appropriately and enable PME.

		/*

		 * This is needed to prevent the chip waking up

		 * the host within 3-4 seconds with certain

		 * platform/BIOS.

	/*

	 * Enable sequence number generation when asleep.

 To bring down WOW power low margin */

 HW WoW */

/*

 * Copyright (c) 2013 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/* Sanity check so that we don't read outside the read

	 * buffer

	/* Don't try to read something outside the read buffer

	 * in case of a missing byte (so bins[0] will be outside

	 * the read buffer)

	/* Sanity check so that we don't read outside the read

	 * buffer

	/* Don't try to read something outside the read buffer

	 * in case of a missing byte (so bins[0] will be outside

	 * the read buffer)

	/* DC value (value in the middle) is the blind spot of the spectral

	 * sample and invalid, interpolate it.

	/* Check if the maximum magnitude is indeed maximum,

	 * also if the maximum value was at dc_pos, calculate

	 * a new one (since value at dc_pos is invalid).

	/* Check if we got the expected magnitude values at

	 * the expected bins

	/* DC value (value in the middle) is the blind spot of the spectral

	 * sample and invalid, interpolate it.

	/* Check if the maximum magnitudes are indeed maximum,

	 * also if the maximum value was at dc_pos, calculate

	 * a new one (since value at dc_pos is invalid).

 First byte missing */

 Length correct, nothing to do. */

		/* MAC added 2 extra bytes AND first byte

		 * is missing.

		/* MAC added 2 extra bytes at bin 30 and 32,

		 * remove them.

 returns 1 if this was a spectral frame, even if not handled. */

	/* AR9280 and before report via ATH9K_PHYERR_RADAR, AR93xx and newer

	 * via ATH9K_PHYERR_SPECTRAL. Haven't seen ATH9K_PHYERR_FALSE_RADAR_EXT

	 * yet, but this is supposed to be possible as well.

	/* check if spectral scan bit is set. This does not have to be checked

	 * if received through a SPECTRAL phy error, but shouldn't hurt.

	/* Output buffers are full, no need to process anything

	 * since there is no space to put the result anyway

		/* Only a single sample received, no need to look

		 * for the sample's end, do the correction based

		 * on the packet's length instead. Note that hw

		 * will always put the radar_info structure on

		 * the end.

		/* Search for the end of the FFT frame between

		 * sample_len - 1 and sample_len + 2. exp_max is 3

		 * bits long and it's the only value on the last

		 * byte of the frame so since it'll be smaller than

		 * the next byte (the first bin of the next sample)

		 * 90% of the time, we can use it as a separator.

			/* Got a frame length within boundaries, there are

			 * four scenarios here:

			 *

			 * a) sample_len -> We got the correct length

			 * b) sample_len + 2 -> 2 bytes added around bin[31]

			 * c) sample_len - 1 -> The first byte is missing

			 * d) sample_len + 1 -> b + c at the same time

			 *

			 * When MAC adds 2 extra bytes, bin[31] and bin[32]

			 * have the same value, so we can use that for further

			 * verification in cases b and d.

			/* Did we go too far ? If so we couldn't determine

			 * this sample's boundaries, discard any further

			 * data

			/* See if we got a valid frame by checking the

			 * consistency of mag_info fields. This is to

			 * prevent from "fixing" a correct frame.

			 * Failure is non-fatal, later frames may

			 * be valid.

 We expect 1 - 2 more bytes */

 Try to distinguish cases a and c */

			/* Only try to fix a frame if it's the only one

			 * on the report, else just skip it.

				/* Mix the received bins to the /dev/random

				 * pool

 Process a normal frame */

				/* Mix the received bins to the /dev/random

				 * pool

			/* Short report processed, break out of the

			 * loop.

			/* -1 to grab sample_len -1, -2 since

			 * they 'll get increased by one. In case

			 * of failure try to recover by going byte

			 * by byte instead.

********************/

 spectral_scan_ctl */

********************/

	/* TODO: usually this should not be neccesary, but for some reason

	 * (or in some mode?) the trigger must be called after the

	 * configuration, otherwise the register will have its values reset

	 * (on my ar9220 to value 0x01002310)

		/* send endless samples.

		 * TODO: is this really useful for "background"?

************************/

 spectral_short_repeat */

************************/

*****************/

 spectral_count */

*****************/

******************/

 spectral_period */

******************/

**********************/

 spectral_fft_period */

**********************/

******************/

 Relay interface */

******************/

********************/

 Debug Init/Deinit */

********************/

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

		/*

		 * For WIFI Beacon Distribution

		 * Long slot time  : 2x cwmin

		 * Short slot time : 4x cwmin

/*

 * Both nexttbtt and intval have to be in usecs.

 Get a new beacon */

	/*

	 * Update the TSF adjust value here, the HW will

	 * add this value for every beacon.

/*

 * Calculate the TSF adjustment value for all slots

 * other than zero.

	/*

	 * The beacon interval cannot be different for multi-AP mode,

	 * and we reach here only for VIF slots greater than zero,

	 * so beacon_interval is guaranteed to be set in cur_conf.

	/*

	 * Changing the beacon interval when multiple AP interfaces

	 * are configured will affect beacon transmission of all

	 * of them.

	/*

	 * If the HW is operating in AP mode, any new station interfaces that

	 * are added cannot change the beacon parameters.

	/*

	 * The beacon parameters are configured only for the first

	 * station interface.

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 AGC & I/Q calibrations time limit, ms */

 Run even/odd ADCs calibrations for HT40 channels only */

 Try later */

		/*

		 * Zero value indicates that no frames have been transmitted

		 * yet, can't do temperature compensation until frames are

		 * transmitted.

 to avoid divide by zero case */

 7834, b1=0 */

 9808, b27=1 */

 786c,b23,1, pwddac=1 */

 7854, b5,1, pdrxtxbb=1 */

 7854, b7,1, pdv2i=1 */

 7854, b8,1, pddacinterface=1 */

 7824,b12,0, offcal=0 */

 7838, b1,0, pwddb=0 */

 7820,b11,0, enpacal=0 */

 7820,b25,1, pdpadrv1=0 */

 7820,b24,0, pdpadrv2=0 */

 7820,b23,0, pdpaout=0 */

 783c,b14-16,7, padrvgn2tab_0=7 */

	/*

	 * 7838,b29-31,0, padrvgn1tab_0=0

	 * does not matter since we turn it off

 7828, b0-11, ccom=fff */

	/* Set:

	 * localmode=1,bmode=1,bmoderxtx=1,synthon=1,

	 * txon=1,paon=1,oscon=1,synthon_force=1

 find off_6_1; */

 regVal = REG_READ(ah, 0x7834); */

 Update PA cal info */

 7834, b1=1 */

 9808, b27=0 */

 PA CAL is not needed for high power solution */

 Remember to not miss */

 Respin a previous one */

 Looking for next waiting calibration if any */

 Do not start a next calibration if the longcal is in action */

 Do NF cal only at longer intervals */

		/*

		 * Get the value from the previous NF cal and update

		 * history buffer.

			/*

			 * Load the NF from history buffer of the current

			 * channel.

			 * NF is slow time-variant, so it is OK to use a

			 * historical value.

 Do periodic PAOffset Cal */

 Carrier leakage Calibration fix */

 Calibrate the AGC */

 Poll for offset calibration complete */

 Do PA Calibration */

 Enable IQ, ADC Gain and ADC DC offset CALs */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*******************************/

	 LED functions		*/

*******************************/

 Set default led pin if invalid */

 Configure gpio for output */

 LED off, active low */

******************/

	Rfkill	   */

******************/

*****************/

     BTCOEX     */

*****************/

/*

 * Detects if there is any priority bt traffic

 Detect if colocated bt started scanning */

/*

 * This is the master bt coex timer which runs for every

 * 45ms, bt traffic will be given priority during 55% of this

 * period while wlan gets remaining 45%

/*

 * Generic tsf based hw timer which configures weight

 * registers to time slice between wlan and bt traffic

/*

 * (Re)start btcoex timers

 make sure duty cycle timer is also stopped when resuming */

/*

 * Pause btcoex timer and bt duty cycle timer

 CONFIG_ATH9K_BTCOEX_SUPPORT */

/*

 * Copyright (c) 2015 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 quality: 10/32 */

 wait for data ready */

 sleep until entropy bits under write_wakeup_threshold */

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 XXX: Keycache */

		/*

		 * AR_CRCErr will bet set to true if we're on the last

		 * subframe and the AR_PostDelimCRCErr is caught.

		 * In a way this also gives us a guarantee that when

		 * (!(AR_CRCErr) && (AR_PostDelimCRCErr)) we cannot

		 * possibly be reviewing the last subframe. AR_CRCErr

		 * is the CRC of the actual data.

			/*

			 * If we reach a point here where AR_PostDelimCRCErr is

			 * true it implies we're *not* on the last subframe. In

			 * in that case that we know already that the CRC of

			 * the frame was OK, and MAC would send an ACK for that

			 * subframe, even if we did get a phy error of type

			 * ATH9K_PHYERR_OFDM_RESTART. This is only applicable

			 * to frame that are prior to the last subframe.

			 * The AR_PostDelimCRCErr is the CRC for the MPDU

			 * delimiter, which contains the 4 reserved bits,

			 * the MPDU length (12 bits), and follows the MPDU

			 * delimiter for an A-MPDU subframe (0x4E = 'N' ASCII).

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 All code below is for AR5008, AR9001, AR9002 */

/*

 * register values to turn OFDM weak signal detection OFF

 Addr      allmodes  */

 Addr      allmodes  */

 Addr      allmodes  */

 Addr      5G          2G        */

 Addr      allmodes  */

/*

 * ar5008_hw_phy_modify_rx_buffer() - perform analog swizzling of parameters

 *

 * Performs analog "swizzling" of parameters into their location.

 * Used on external AR2133/AR5133 radios.

/*

 * Fix on 2.4 GHz band for orientation sensitivity issue by increasing

 * rf_pwd_icsyndiv.

 *

 * Theoretical Rules:

 *   if 2 GHz band

 *      if forceBiasAuto

 *         if synth_freq < 2412

 *            bias = 0

 *         else if 2412 <= synth_freq <= 2422

 *            bias = 1

 *         else // synth_freq > 2422

 *            bias = 2

 *      else if forceBias > 0

 *         bias = forceBias & 7

 *      else

 *         no change, use value from ini file

 *   else

 *      no change, invalid band

 *

 *  1st Mod:

 *    2422 also uses value of 2

 *    <approved>

 *

 *  2nd Mod:

 *    Less than 2412 uses value of 0, 2412 and above uses value of 2

 pre-reverse this field */

 swizzle rf_pwd_icsyndiv */

 write Bank 6 with new params */

/*

 * ar5008_hw_set_channel - tune to a channel on the external AR2133/AR5133 radios

 *

 * For the external AR2133/AR5133 radios, takes the MHz channel value and set

 * the channel value. Assumes writes enabled to analog bus and bank6 register

 * cache in ah->analogBank6Data.

 workaround for gcc bug #37014 */

/*

 * ar5008_hw_spur_mitigate - convert baseband spur frequency for external radios

 *

 * For non single-chip solutions. Converts to baseband spur frequency given the

 * input channel frequency and compute register settings below.

/**

 * ar5008_hw_rf_alloc_ext_banks - allocates banks for external radio programming

 * @ah: atheros hardware structure

 *

 * Only required for older devices with external AR2133/AR5133 radios.

/* *

 * ar5008_hw_set_rf_regs - programs rf registers based on EEPROM

 * @ah: atheros hardware structure

 * @chan:

 * @modesIndex:

 *

 * Used for the external AR2133/AR5133 radios.

 *

 * Reads the EEPROM header info from the device structure and programs

 * all rf registers. This routine requires access to the analog

 * rf device. This is not required for single-chip devices.

	/*

	 * Software does not need to program bank data

	 * for single chip devices, that is AR9280 or anything

	 * after that.

 Setup rf parameters */

 Only the 5 or 2 GHz OB/DB need to be set for a mode */

 Write Analog registers */

	/*

	 * Set the RX_ABORT and RX_DIS and clear if off only after

	 * RXE is set for MAC. This prevents frames with corrupted

	 * descriptor status.

		/*

		 * For AR9280 and above, there is a new feature that allows

		 * Multicast search based on both MAC Address and Key ID.

		 * By default, this feature is enabled. But since the driver

		 * is not using this feature, we switch it off; otherwise

		 * multicast search based on MAC addr only will fail.

	/*

	 * Disable BB clock gating

	 * Necessary to avoid issues on AR5416 2.0

	/*

	 * Disable RIFS search on some chips to avoid baseband

	 * hang issues.

	/* This function do only REG_WRITE, so

	/*

	 * Set correct baseband to analog shift setting to

	 * access analog chips.

 Write ADDAC shifts */

 Write common array parameters */

 Write analog registers */

		/*

		 * on == 1 means ofdm weak signal detection is ON

		 * on == 1 is the default, for less noise immunity

		 *

		 * on == 0 means ofdm weak signal detection is OFF

		 * on == 0 means more noise imm

		/*

		 * make register setting for default

		 * (weak sig detect ON) come from INI file

		/*

		 * You should not see this as AR5008, AR9001, AR9002

		 * does not have hardware support for MRC CCK.

/*

 * Initialize the ANI register values with default (ini) values.

 * This routine is called during a (full) hardware reset after

 * all the registers are initialised from the INI.

 these levels just got reset to defaults by the INI */

 not available on pre AR9003 */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 * Copyright (c) 2009 Gabor Juhos <juhosg@openwrt.org>

 * Copyright (c) 2009 Imre Kaloz <kaloz@openwrt.org>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 return bus cachesize in 4B word units */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/**

 * ath9k_hw_updatetxtriglevel - adjusts the frame trigger level

 *

 * @ah: atheros hardware struct

 * @bIncTrigLevel: whether or not the frame trigger level should be updated

 *

 * The frame trigger level specifies the minimum number of bytes,

 * in units of 64 bytes, that must be DMA'ed into the PCU TX FIFO

 * before the PCU will initiate sending the frame on the air. This can

 * mean we initiate transmit before a full frame is on the PCU TX FIFO.

 * Resets to 0x1 (meaning 64 bytes or a full frame, whichever occurs

 * first)

 *

 * Caution must be taken to ensure to set the frame trigger level based

 * on the DMA request size. For example if the DMA request size is set to

 * 128 bytes the trigger level cannot exceed 6 * 64 = 384. This is because

 * there need to be enough space in the tx FIFO for the requested transfer

 * size. Hence the tx FIFO will stop with 512 - 128 = 384 bytes. If we set

 * the threshold to a value beyond 6, then the transmit will hang.

 *

 * Current dual   stream devices have a PCU TX FIFO size of 8 KB.

 * Current single stream devices have a PCU TX FIFO size of 4 KB, however,

 * there is a hardware issue which forces us to use 2 KB instead so the

 * frame trigger level must not exceed 2 KB for these chipsets.

 usec */

 usec */

		/*

		 * cwmin and cwmax should be 0 for beacon queue

		 * but not for IBSS as we would create an imbalance

		 * on beaconing fairness for participating nodes.

 directly mapped flags for ieee80211_rx_status */

 we can only Nss=1 STBC */

		/*

		 * Treat these errors as mutually exclusive to avoid spurious

		 * extra error reports from the hardware. If a CRC error is

		 * reported, then decryption and MIC errors are irrelevant,

		 * the frame is going to be dropped either way

 Only up to MCS16 supported, everything above is invalid */

/*

 * This can stop or re-enables RX.

 *

 * If bool is set this will kill any frame which is currently being

 * transferred between the MAC and baseband and also prevent any new

 * frames from getting started.

 usec */

 Enable access to the DMA observation bus */

 Wait for rx enable bit to go low */

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*****/

 TX */

*****/

/*

 * Removes the driver header and returns the TX slot number

 XXX */

	/*

	 * Set the TSF adjust value for probe response

	 * frame also.

	/*

	 * This is a bit redundant but it helps to get

	 * the per-packet index quickly when draining the

	 * TX queue in the HIF layer. Otherwise we would

	 * have to parse the packet contents ...

	/* Transmit all frames that should not be reordered relative

	 * to each other using the same priority. For other QoS data

	 * frames extract the priority from the header.

 Check for RTS protection */

 CTS-to-self */

	/*

	 * Find out on which interface this packet has to be

	 * sent out.

	/*

	 * Find out which station this packet is destined for.

	/*

	 * URB submission failed for this frame, it never reached

	 * the target.

 No CCK rates */

 Remove padding before handing frame back to mac80211 */

 Send status to mac80211 */

	/*

	 * Ensure that all pending TX frames are flushed,

	 * and that the TX completion/failed tasklets is killed.

	/*

	 * The TX cleanup timer has already been killed.

			/*

			 * Store this event, so that the TX cleanup

			 * routine can check later for the needed packet.

 Wake TX queues if needed */

	/*

	 * Check if status-pending packets have to be cleaned up.

 Wake TX queues if needed */

*****/

 RX */

*****/

/*

 * Calculate the RX filter to be set in the HW.

/*

 * Recv initialization for opmode change.

 configure rx filter */

 calculate and install multicast filter */

	/*

	 * Discard zero-length packets and packets smaller than an ACK

	 * which are not PHY_ERROR (short radar pulses have a length of 3)

 Get the RX status information */

	/* Copy everything from ath_htc_rx_status (HTC_RX_FRAME_HEADER).

	/*

	 * everything but the rate is checked here, the rate check is done

	 * separately to avoid doing two lookups for a rate for each frame.

	/*

	 * Process PHY errors and return so that the packet

	 * can be dropped.

 TODO: Not using DFS processing now. */

 TODO: Code to collect spectral scan statistics */

/*

 * FIXME: Handle FLUSH later on.

 FIXME: Locking for cleanup/init */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/**

 * DOC: Programming Atheros 802.11n analog front end radios

 *

 * AR5416 MAC based PCI devices and AR518 MAC based PCI-Express

 * devices have either an external AR2133 analog front end radio for single

 * band 2.4 GHz communication or an AR5133 analog front end radio for dual

 * band 2.4 GHz / 5 GHz communication.

 *

 * All devices after the AR5416 and AR5418 family starting with the AR9280

 * have their analog front radios, MAC/BB and host PCIe/USB interface embedded

 * into a single-chip and require less programming.

 *

 * The following single-chips exist with a respective embedded radio:

 *

 * AR9280 - 11n dual-band 2x2 MIMO for PCIe

 * AR9281 - 11n single-band 1x2 MIMO for PCIe

 * AR9285 - 11n single-band 1x1 for PCIe

 * AR9287 - 11n single-band 2x2 MIMO for PCIe

 *

 * AR9220 - 11n dual-band 2x2 MIMO for PCI

 * AR9223 - 11n single-band 2x2 MIMO for PCI

 *

 * AR9287 - 11n single-band 1x1 MIMO for USB

/**

 * ar9002_hw_set_channel - set channel on single-chip device

 * @ah: atheros hardware structure

 * @chan:

 *

 * This is the function to change channel on single-chip devices, that is

 * all devices after ar9280.

 *

 * This function takes the channel value in MHz and sets

 * hardware channel value. Assumes writes have been enabled to analog bus.

 *

 * Actual Expression,

 *

 * For 2GHz channel,

 * Channel Frequency = (3/4) * freq_ref * (chansel[8:0] + chanfrac[16:0]/2^17)

 * (freq_ref = 40MHz)

 *

 * For 5GHz channel,

 * Channel Frequency = (3/2) * freq_ref * (chansel[8:0] + chanfrac[16:0]/2^10)

 * (freq_ref = 40MHz/(24>>amodeRefSel))

 2 GHz, fractional mode */

 Enable channel spreading for channel 14 */

 Enable channel spreading for channel 14 */

			/*

			 * Enable 2G (fractional) mode for channels

			 * which are 5MHz spaced.

 RefDivA setting */

/**

 * ar9002_hw_spur_mitigate - convert baseband spur frequency

 * @ah: atheros hardware structure

 * @chan:

 *

 * For single-chip solutions. Converts to baseband spur frequency given the

 * input channel frequency and compute register settings below.

		/*

		 * Don't disable BT ant to allow BB to control SWCOM.

		/*

		 * Disable antenna diversity, use LNA1 only.

		/*

		 * Disable BT Ant. to allow concurrent BT and WLAN receive.

		/*

		 * Program SWCOM table to make sure RF switch always parks

		 * at BT side.

        /*

	 * Clear ant_fast_div_bias [14:9] since for WB195,

	 * the main LNA is always LNA1.

	/* on AR92xx, the highest bit of count will make the the chip send

	 * spectral samples endlessly. Check if this really was intended,

	 * and fix otherwise.

 Activate spectral scan */

 Poll for spectral scan complete */

/*

 * Copyright (c) 2009-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 legacy rx_clear mode */

 untimed/unslotted mode */

 slotted mode */

 coexistence disabled */

 coexistence mode */

 invert rx_clear as WLAN_ACTIVE*/

 STOMP_ALL */

 STOMP_LOW */

 STOMP_NONE */

 STOMP_ALL */

 STOMP_LOW */

 STOMP_NONE */

 STOMP_LOW_FTP */

 STOMP_AUDIO */

 bt priority GPIO will be ignored by 2 wire scheme */

	/*

	 * Check if BTCOEX is globally disabled.

 connect bt_active to baseband */

 Set input mux for bt_active to gpio pin */

 Configure the desired gpio port for input */

 btcoex 3-wire */

	/* Set input mux for bt_prority_async and

 Configure the desired GPIO ports for input */

 Configure the desired GPIO port for TX_FRAME output */

/*

 * For AR9002, bt_weight/wlan_weight are used.

 * For AR9003 and above, stomp_type is used.

 tx priority weight */

 Last WLAN weight has to be adjusted wrt tx priority */

	/*

	 * Program coex mode and weight registers to

	 * enable coex 3-wire

/*

 * Configures appropriate weight based on stomp type.

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Local defines to distinguish between extension and control CTL's */

 excluding HT40, EXT-OFDM */

 excluding HT40, EXT-OFDM, EXT-CCK */

 4 bits tx and 4 bits rx */

 takes lower byte in eeprom location */

		 /*

		  * bit0 - enable tx temp comp - disabled

		  * bit1 - enable tx volt comp - disabled

		  * bit2 - enable fastClock - enabled

		  * bit3 - enable doubling - enabled

		  * bit4 - enable internal regulator - disabled

		  * bit5 - enable pa predistortion - disabled

 bit0 - turn down drivestrength */

 ar9300_modal_eep_header  2g */

 4 idle,t1,t2,b(4 bits per setting) */

 4 ra1l1, ra2l1, ra1l2, ra2l2, ra12 */

		/*

		 * antCtrlChain[AR9300_MAX_CHAINS]; 6 idle, t, r,

		 * rx1, rx12, b (2 bits each)

		/*

		 * xatten1DB[AR9300_MAX_CHAINS];  3 xatten1_db

		 * for ar9280 (0xa20c/b20c 5:0)

		/*

		 * xatten1Margin[AR9300_MAX_CHAINS]; 3 xatten1_margin

		 * for ar9280 (0xa20c/b20c 16:12

		/*

		 * spurChans[OSPREY_EEPROM_MODAL_SPURS]; spur

		 * channels in usual fbin coding format

		/*

		 * noiseFloorThreshCh[AR9300_MAX_CHAINS]; 3 Check

		 * if the register is per chain

 4 bits tx_clip, 4 bits dac_scale_cck */

 ar9300_cal_data_per_freq_op_loop 2g */

 1L-5L,5S,11L,11S */

 6-24,36,48,54 */

 Data[4].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[4].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[4].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[4].ctlEdges[3].bChannel */ FREQ2FBIN(2484, 1),

 Data[5].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[5].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[5].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[6].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[6].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[7].ctlEdges[0].bChannel */ FREQ2FBIN(2422, 1),

 Data[7].ctlEdges[1].bChannel */ FREQ2FBIN(2427, 1),

 Data[7].ctlEdges[2].bChannel */ FREQ2FBIN(2447, 1),

 Data[7].ctlEdges[3].bChannel */ FREQ2FBIN(2462, 1),

 Data[8].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[8].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[8].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[9].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[9].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[9].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[10].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[10].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[10].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[11].ctlEdges[0].bChannel */ FREQ2FBIN(2422, 1),

 Data[11].ctlEdges[1].bChannel */ FREQ2FBIN(2427, 1),

 Data[11].ctlEdges[2].bChannel */ FREQ2FBIN(2447, 1),

 Data[11].ctlEdges[3].bChannel */ FREQ2FBIN(2462, 1),

 4 idle,t1,t2,b (4 bits per setting) */

 4 ra1l1, ra2l1, ra1l2,ra2l2,ra12 */

 antCtrlChain 6 idle, t,r,rx1,rx12,b (2 bits each) */

 xatten1DB 3 xatten1_db for AR9280 (0xa20c/b20c 5:0) */

		/*

		 * xatten1Margin[AR9300_MAX_CHAINS]; 3 xatten1_margin

		 * for merlin (0xa20c/b20c 16:12

 spurChans spur channels in usual fbin coding format */

 noiseFloorThreshCh Check if the register is per chain */

 4 bits tx_clip, 4 bits dac_scale_cck */

 6-24,36,48,54 */

		/*

		 * 0_8_16,1-3_9-11_17-19,

		 * 4,5,6,7,12,13,14,15,20,21,22,23

		/*

		 * 0_8_16,1-3_9-11_17-19,

		 * 4,5,6,7,12,13,14,15,20,21,22,23

 Data[0].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[0].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[0].ctlEdges[2].bChannel */ FREQ2FBIN(5280, 0),

 Data[0].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[0].ctlEdges[4].bChannel */ FREQ2FBIN(5600, 0),

 Data[0].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[0].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[0].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[1].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[1].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[1].ctlEdges[2].bChannel */ FREQ2FBIN(5280, 0),

 Data[1].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[1].ctlEdges[4].bChannel */ FREQ2FBIN(5520, 0),

 Data[1].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[1].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[1].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[2].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[2].ctlEdges[1].bChannel */ FREQ2FBIN(5230, 0),

 Data[2].ctlEdges[2].bChannel */ FREQ2FBIN(5270, 0),

 Data[2].ctlEdges[3].bChannel */ FREQ2FBIN(5310, 0),

 Data[2].ctlEdges[4].bChannel */ FREQ2FBIN(5510, 0),

 Data[2].ctlEdges[5].bChannel */ FREQ2FBIN(5550, 0),

 Data[2].ctlEdges[6].bChannel */ FREQ2FBIN(5670, 0),

 Data[2].ctlEdges[7].bChannel */ FREQ2FBIN(5755, 0)

 Data[3].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[3].ctlEdges[1].bChannel */ FREQ2FBIN(5200, 0),

 Data[3].ctlEdges[2].bChannel */ FREQ2FBIN(5260, 0),

 Data[3].ctlEdges[3].bChannel */ FREQ2FBIN(5320, 0),

 Data[3].ctlEdges[4].bChannel */ FREQ2FBIN(5500, 0),

 Data[3].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[3].ctlEdges[6].bChannel */ 0xFF,

 Data[3].ctlEdges[7].bChannel */ 0xFF,

 Data[4].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[4].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[4].ctlEdges[2].bChannel */ FREQ2FBIN(5500, 0),

 Data[4].ctlEdges[3].bChannel */ FREQ2FBIN(5700, 0),

 Data[4].ctlEdges[4].bChannel */ 0xFF,

 Data[4].ctlEdges[5].bChannel */ 0xFF,

 Data[4].ctlEdges[6].bChannel */ 0xFF,

 Data[4].ctlEdges[7].bChannel */ 0xFF,

 Data[5].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[5].ctlEdges[1].bChannel */ FREQ2FBIN(5270, 0),

 Data[5].ctlEdges[2].bChannel */ FREQ2FBIN(5310, 0),

 Data[5].ctlEdges[3].bChannel */ FREQ2FBIN(5510, 0),

 Data[5].ctlEdges[4].bChannel */ FREQ2FBIN(5590, 0),

 Data[5].ctlEdges[5].bChannel */ FREQ2FBIN(5670, 0),

 Data[5].ctlEdges[6].bChannel */ 0xFF,

 Data[5].ctlEdges[7].bChannel */ 0xFF

 Data[6].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[6].ctlEdges[1].bChannel */ FREQ2FBIN(5200, 0),

 Data[6].ctlEdges[2].bChannel */ FREQ2FBIN(5220, 0),

 Data[6].ctlEdges[3].bChannel */ FREQ2FBIN(5260, 0),

 Data[6].ctlEdges[4].bChannel */ FREQ2FBIN(5500, 0),

 Data[6].ctlEdges[5].bChannel */ FREQ2FBIN(5600, 0),

 Data[6].ctlEdges[6].bChannel */ FREQ2FBIN(5700, 0),

 Data[6].ctlEdges[7].bChannel */ FREQ2FBIN(5745, 0)

 Data[7].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[7].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[7].ctlEdges[2].bChannel */ FREQ2FBIN(5320, 0),

 Data[7].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[7].ctlEdges[4].bChannel */ FREQ2FBIN(5560, 0),

 Data[7].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[7].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[7].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[8].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[8].ctlEdges[1].bChannel */ FREQ2FBIN(5230, 0),

 Data[8].ctlEdges[2].bChannel */ FREQ2FBIN(5270, 0),

 Data[8].ctlEdges[3].bChannel */ FREQ2FBIN(5510, 0),

 Data[8].ctlEdges[4].bChannel */ FREQ2FBIN(5550, 0),

 Data[8].ctlEdges[5].bChannel */ FREQ2FBIN(5670, 0),

 Data[8].ctlEdges[6].bChannel */ FREQ2FBIN(5755, 0),

 Data[8].ctlEdges[7].bChannel */ FREQ2FBIN(5795, 0)

 4 bits tx and 4 bits rx */

 takes lower byte in eeprom location */

		 /*

		  * bit0 - enable tx temp comp - disabled

		  * bit1 - enable tx volt comp - disabled

		  * bit2 - enable fastClock - enabled

		  * bit3 - enable doubling - enabled

		  * bit4 - enable internal regulator - disabled

		  * bit5 - enable pa predistortion - disabled

 bit0 - turn down drivestrength */

 ar9300_modal_eep_header  2g */

 4 idle,t1,t2,b(4 bits per setting) */

 4 ra1l1, ra2l1, ra1l2, ra2l2, ra12 */

		/*

		 * antCtrlChain[AR9300_MAX_CHAINS]; 6 idle, t, r,

		 * rx1, rx12, b (2 bits each)

		/*

		 * xatten1DB[AR9300_MAX_CHAINS];  3 xatten1_db

		 * for ar9280 (0xa20c/b20c 5:0)

		/*

		 * xatten1Margin[AR9300_MAX_CHAINS]; 3 xatten1_margin

		 * for ar9280 (0xa20c/b20c 16:12

		/*

		 * spurChans[OSPREY_EEPROM_MODAL_SPURS]; spur

		 * channels in usual fbin coding format

		/*

		 * noiseFloorThreshCh[AR9300_MAX_CHAINS]; 3 Check

		 * if the register is per chain

 4 bits tx_clip, 4 bits dac_scale_cck */

 ar9300_cal_data_per_freq_op_loop 2g */

 1L-5L,5S,11L,11S */

 6-24,36,48,54 */

 Data[4].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[4].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[4].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[4].ctlEdges[3].bChannel */ FREQ2FBIN(2484, 1),

 Data[5].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[5].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[5].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[6].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[6].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[7].ctlEdges[0].bChannel */ FREQ2FBIN(2422, 1),

 Data[7].ctlEdges[1].bChannel */ FREQ2FBIN(2427, 1),

 Data[7].ctlEdges[2].bChannel */ FREQ2FBIN(2447, 1),

 Data[7].ctlEdges[3].bChannel */ FREQ2FBIN(2462, 1),

 Data[8].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[8].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[8].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[9].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[9].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[9].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[10].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[10].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[10].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[11].ctlEdges[0].bChannel */ FREQ2FBIN(2422, 1),

 Data[11].ctlEdges[1].bChannel */ FREQ2FBIN(2427, 1),

 Data[11].ctlEdges[2].bChannel */ FREQ2FBIN(2447, 1),

 Data[11].ctlEdges[3].bChannel */ FREQ2FBIN(2462, 1),

 4 idle,t1,t2,b (4 bits per setting) */

 4 ra1l1, ra2l1, ra1l2,ra2l2,ra12 */

 antCtrlChain 6 idle, t,r,rx1,rx12,b (2 bits each) */

 xatten1DB 3 xatten1_db for AR9280 (0xa20c/b20c 5:0) */

		/*

		 * xatten1Margin[AR9300_MAX_CHAINS]; 3 xatten1_margin

		 * for merlin (0xa20c/b20c 16:12

 spurChans spur channels in usual fbin coding format */

 noiseFloorThreshCh Check if the register is per chain */

 4 bits tx_clip, 4 bits dac_scale_cck */

 6-24,36,48,54 */

		/*

		 * 0_8_16,1-3_9-11_17-19,

		 * 4,5,6,7,12,13,14,15,20,21,22,23

		/*

		 * 0_8_16,1-3_9-11_17-19,

		 * 4,5,6,7,12,13,14,15,20,21,22,23

 Data[0].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[0].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[0].ctlEdges[2].bChannel */ FREQ2FBIN(5280, 0),

 Data[0].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[0].ctlEdges[4].bChannel */ FREQ2FBIN(5600, 0),

 Data[0].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[0].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[0].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[1].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[1].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[1].ctlEdges[2].bChannel */ FREQ2FBIN(5280, 0),

 Data[1].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[1].ctlEdges[4].bChannel */ FREQ2FBIN(5520, 0),

 Data[1].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[1].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[1].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[2].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[2].ctlEdges[1].bChannel */ FREQ2FBIN(5230, 0),

 Data[2].ctlEdges[2].bChannel */ FREQ2FBIN(5270, 0),

 Data[2].ctlEdges[3].bChannel */ FREQ2FBIN(5310, 0),

 Data[2].ctlEdges[4].bChannel */ FREQ2FBIN(5510, 0),

 Data[2].ctlEdges[5].bChannel */ FREQ2FBIN(5550, 0),

 Data[2].ctlEdges[6].bChannel */ FREQ2FBIN(5670, 0),

 Data[2].ctlEdges[7].bChannel */ FREQ2FBIN(5755, 0)

 Data[3].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[3].ctlEdges[1].bChannel */ FREQ2FBIN(5200, 0),

 Data[3].ctlEdges[2].bChannel */ FREQ2FBIN(5260, 0),

 Data[3].ctlEdges[3].bChannel */ FREQ2FBIN(5320, 0),

 Data[3].ctlEdges[4].bChannel */ FREQ2FBIN(5500, 0),

 Data[3].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[3].ctlEdges[6].bChannel */ 0xFF,

 Data[3].ctlEdges[7].bChannel */ 0xFF,

 Data[4].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[4].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[4].ctlEdges[2].bChannel */ FREQ2FBIN(5500, 0),

 Data[4].ctlEdges[3].bChannel */ FREQ2FBIN(5700, 0),

 Data[4].ctlEdges[4].bChannel */ 0xFF,

 Data[4].ctlEdges[5].bChannel */ 0xFF,

 Data[4].ctlEdges[6].bChannel */ 0xFF,

 Data[4].ctlEdges[7].bChannel */ 0xFF,

 Data[5].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[5].ctlEdges[1].bChannel */ FREQ2FBIN(5270, 0),

 Data[5].ctlEdges[2].bChannel */ FREQ2FBIN(5310, 0),

 Data[5].ctlEdges[3].bChannel */ FREQ2FBIN(5510, 0),

 Data[5].ctlEdges[4].bChannel */ FREQ2FBIN(5590, 0),

 Data[5].ctlEdges[5].bChannel */ FREQ2FBIN(5670, 0),

 Data[5].ctlEdges[6].bChannel */ 0xFF,

 Data[5].ctlEdges[7].bChannel */ 0xFF

 Data[6].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[6].ctlEdges[1].bChannel */ FREQ2FBIN(5200, 0),

 Data[6].ctlEdges[2].bChannel */ FREQ2FBIN(5220, 0),

 Data[6].ctlEdges[3].bChannel */ FREQ2FBIN(5260, 0),

 Data[6].ctlEdges[4].bChannel */ FREQ2FBIN(5500, 0),

 Data[6].ctlEdges[5].bChannel */ FREQ2FBIN(5600, 0),

 Data[6].ctlEdges[6].bChannel */ FREQ2FBIN(5700, 0),

 Data[6].ctlEdges[7].bChannel */ FREQ2FBIN(5745, 0)

 Data[7].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[7].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[7].ctlEdges[2].bChannel */ FREQ2FBIN(5320, 0),

 Data[7].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[7].ctlEdges[4].bChannel */ FREQ2FBIN(5560, 0),

 Data[7].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[7].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[7].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[8].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[8].ctlEdges[1].bChannel */ FREQ2FBIN(5230, 0),

 Data[8].ctlEdges[2].bChannel */ FREQ2FBIN(5270, 0),

 Data[8].ctlEdges[3].bChannel */ FREQ2FBIN(5510, 0),

 Data[8].ctlEdges[4].bChannel */ FREQ2FBIN(5550, 0),

 Data[8].ctlEdges[5].bChannel */ FREQ2FBIN(5670, 0),

 Data[8].ctlEdges[6].bChannel */ FREQ2FBIN(5755, 0),

 Data[8].ctlEdges[7].bChannel */ FREQ2FBIN(5795, 0)

 4 bits tx and 4 bits rx */

 takes lower byte in eeprom location */

		/*

		 * bit0 - enable tx temp comp - disabled

		 * bit1 - enable tx volt comp - disabled

		 * bit2 - enable fastClock - enabled

		 * bit3 - enable doubling - enabled

		 * bit4 - enable internal regulator - disabled

		 * bit5 - enable pa predistortion - disabled

 bit0 - turn down drivestrength */

 ar9300_modal_eep_header  2g */

 4 idle,t1,t2,b(4 bits per setting) */

 4 ra1l1, ra2l1, ra1l2, ra2l2, ra12 */

		/*

		 * antCtrlChain[AR9300_MAX_CHAINS]; 6 idle, t, r,

		 * rx1, rx12, b (2 bits each)

		/*

		 * xatten1DB[AR9300_MAX_CHAINS];  3 xatten1_db

		 * for ar9280 (0xa20c/b20c 5:0)

		/*

		 * xatten1Margin[AR9300_MAX_CHAINS]; 3 xatten1_margin

		 * for ar9280 (0xa20c/b20c 16:12

		/*

		 * spurChans[OSPREY_EEPROM_MODAL_SPURS]; spur

		 * channels in usual fbin coding format

		/*

		 * noiseFloorThreshCh[AR9300_MAX_CHAINS]; 3 Check

		 * if the register is per chain

 4 bits tx_clip, 4 bits dac_scale_cck */

 ar9300_cal_data_per_freq_op_loop 2g */

 1L-5L,5S,11L,11S */

 6-24,36,48,54 */

 Data[4].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[4].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[4].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[4].ctlEdges[3].bChannel */ FREQ2FBIN(2484, 1),

 Data[5].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[5].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[5].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[6].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[6].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[7].ctlEdges[0].bChannel */ FREQ2FBIN(2422, 1),

 Data[7].ctlEdges[1].bChannel */ FREQ2FBIN(2427, 1),

 Data[7].ctlEdges[2].bChannel */ FREQ2FBIN(2447, 1),

 Data[7].ctlEdges[3].bChannel */ FREQ2FBIN(2462, 1),

 Data[8].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[8].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[8].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[9].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[9].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[9].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[10].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[10].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[10].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[11].ctlEdges[0].bChannel */ FREQ2FBIN(2422, 1),

 Data[11].ctlEdges[1].bChannel */ FREQ2FBIN(2427, 1),

 Data[11].ctlEdges[2].bChannel */ FREQ2FBIN(2447, 1),

 Data[11].ctlEdges[3].bChannel */ FREQ2FBIN(2462, 1),

 4 idle,t1,t2,b (4 bits per setting) */

 4 ra1l1, ra2l1, ra1l2,ra2l2,ra12 */

 antCtrlChain 6 idle, t,r,rx1,rx12,b (2 bits each) */

 xatten1DB 3 xatten1_db for AR9280 (0xa20c/b20c 5:0) */

		/*

		 * xatten1Margin[AR9300_MAX_CHAINS]; 3 xatten1_margin

		 * for merlin (0xa20c/b20c 16:12

 spurChans spur channels in usual fbin coding format */

 noiseFloorThreshCh Check if the register is per chain */

 4 bits tx_clip, 4 bits dac_scale_cck */

 6-24,36,48,54 */

		/*

		 * 0_8_16,1-3_9-11_17-19,

		 * 4,5,6,7,12,13,14,15,20,21,22,23

		/*

		 * 0_8_16,1-3_9-11_17-19,

		 * 4,5,6,7,12,13,14,15,20,21,22,23

 Data[0].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[0].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[0].ctlEdges[2].bChannel */ FREQ2FBIN(5280, 0),

 Data[0].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[0].ctlEdges[4].bChannel */ FREQ2FBIN(5600, 0),

 Data[0].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[0].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[0].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[1].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[1].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[1].ctlEdges[2].bChannel */ FREQ2FBIN(5280, 0),

 Data[1].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[1].ctlEdges[4].bChannel */ FREQ2FBIN(5520, 0),

 Data[1].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[1].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[1].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[2].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[2].ctlEdges[1].bChannel */ FREQ2FBIN(5230, 0),

 Data[2].ctlEdges[2].bChannel */ FREQ2FBIN(5270, 0),

 Data[2].ctlEdges[3].bChannel */ FREQ2FBIN(5310, 0),

 Data[2].ctlEdges[4].bChannel */ FREQ2FBIN(5510, 0),

 Data[2].ctlEdges[5].bChannel */ FREQ2FBIN(5550, 0),

 Data[2].ctlEdges[6].bChannel */ FREQ2FBIN(5670, 0),

 Data[2].ctlEdges[7].bChannel */ FREQ2FBIN(5755, 0)

 Data[3].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[3].ctlEdges[1].bChannel */ FREQ2FBIN(5200, 0),

 Data[3].ctlEdges[2].bChannel */ FREQ2FBIN(5260, 0),

 Data[3].ctlEdges[3].bChannel */ FREQ2FBIN(5320, 0),

 Data[3].ctlEdges[4].bChannel */ FREQ2FBIN(5500, 0),

 Data[3].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[3].ctlEdges[6].bChannel */ 0xFF,

 Data[3].ctlEdges[7].bChannel */ 0xFF,

 Data[4].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[4].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[4].ctlEdges[2].bChannel */ FREQ2FBIN(5500, 0),

 Data[4].ctlEdges[3].bChannel */ FREQ2FBIN(5700, 0),

 Data[4].ctlEdges[4].bChannel */ 0xFF,

 Data[4].ctlEdges[5].bChannel */ 0xFF,

 Data[4].ctlEdges[6].bChannel */ 0xFF,

 Data[4].ctlEdges[7].bChannel */ 0xFF,

 Data[5].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[5].ctlEdges[1].bChannel */ FREQ2FBIN(5270, 0),

 Data[5].ctlEdges[2].bChannel */ FREQ2FBIN(5310, 0),

 Data[5].ctlEdges[3].bChannel */ FREQ2FBIN(5510, 0),

 Data[5].ctlEdges[4].bChannel */ FREQ2FBIN(5590, 0),

 Data[5].ctlEdges[5].bChannel */ FREQ2FBIN(5670, 0),

 Data[5].ctlEdges[6].bChannel */ 0xFF,

 Data[5].ctlEdges[7].bChannel */ 0xFF

 Data[6].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[6].ctlEdges[1].bChannel */ FREQ2FBIN(5200, 0),

 Data[6].ctlEdges[2].bChannel */ FREQ2FBIN(5220, 0),

 Data[6].ctlEdges[3].bChannel */ FREQ2FBIN(5260, 0),

 Data[6].ctlEdges[4].bChannel */ FREQ2FBIN(5500, 0),

 Data[6].ctlEdges[5].bChannel */ FREQ2FBIN(5600, 0),

 Data[6].ctlEdges[6].bChannel */ FREQ2FBIN(5700, 0),

 Data[6].ctlEdges[7].bChannel */ FREQ2FBIN(5745, 0)

 Data[7].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[7].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[7].ctlEdges[2].bChannel */ FREQ2FBIN(5320, 0),

 Data[7].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[7].ctlEdges[4].bChannel */ FREQ2FBIN(5560, 0),

 Data[7].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[7].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[7].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[8].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[8].ctlEdges[1].bChannel */ FREQ2FBIN(5230, 0),

 Data[8].ctlEdges[2].bChannel */ FREQ2FBIN(5270, 0),

 Data[8].ctlEdges[3].bChannel */ FREQ2FBIN(5510, 0),

 Data[8].ctlEdges[4].bChannel */ FREQ2FBIN(5550, 0),

 Data[8].ctlEdges[5].bChannel */ FREQ2FBIN(5670, 0),

 Data[8].ctlEdges[6].bChannel */ FREQ2FBIN(5755, 0),

 Data[8].ctlEdges[7].bChannel */ FREQ2FBIN(5795, 0)

 4 bits tx and 4 bits rx */

 takes lower byte in eeprom location */

		/*

		 * bit0 - enable tx temp comp - disabled

		 * bit1 - enable tx volt comp - disabled

		 * bit2 - enable fastclock - enabled

		 * bit3 - enable doubling - enabled

		 * bit4 - enable internal regulator - disabled

		 * bit5 - enable pa predistortion - disabled

 bit0 - turn down drivestrength */

 ar9300_modal_eep_header  2g */

 4 idle,t1,t2,b(4 bits per setting) */

 4 ra1l1, ra2l1, ra1l2, ra2l2, ra12 */

		/*

		 * antCtrlChain[ar9300_max_chains]; 6 idle, t, r,

		 * rx1, rx12, b (2 bits each)

		/*

		 * xatten1DB[AR9300_max_chains];  3 xatten1_db

		 * for ar9280 (0xa20c/b20c 5:0)

		/*

		 * xatten1Margin[ar9300_max_chains]; 3 xatten1_margin

		 * for ar9280 (0xa20c/b20c 16:12

		/*

		 * spurChans[OSPrey_eeprom_modal_sPURS]; spur

		 * channels in usual fbin coding format

		/*

		 * noiseFloorThreshch[ar9300_max_cHAINS]; 3 Check

		 * if the register is per chain

 4 bits tx_clip, 4 bits dac_scale_cck */

 ar9300_cal_data_per_freq_op_loop 2g */

 1L-5L,5S,11L,11s */

 6-24,36,48,54 */

 Data[4].ctledges[0].bchannel */ FREQ2FBIN(2412, 1),

 Data[4].ctledges[1].bchannel */ FREQ2FBIN(2417, 1),

 Data[4].ctledges[2].bchannel */ FREQ2FBIN(2472, 1),

 Data[4].ctledges[3].bchannel */ FREQ2FBIN(2484, 1),

 Data[5].ctledges[0].bchannel */ FREQ2FBIN(2412, 1),

 Data[5].ctledges[1].bchannel */ FREQ2FBIN(2417, 1),

 Data[5].ctledges[2].bchannel */ FREQ2FBIN(2472, 1),

 Data[6].ctledges[0].bchannel */ FREQ2FBIN(2412, 1),

 Data[6].ctledges[1].bchannel */ FREQ2FBIN(2417, 1),

 Data[7].ctledges[0].bchannel */ FREQ2FBIN(2422, 1),

 Data[7].ctledges[1].bchannel */ FREQ2FBIN(2427, 1),

 Data[7].ctledges[2].bchannel */ FREQ2FBIN(2447, 1),

 Data[7].ctledges[3].bchannel */ FREQ2FBIN(2462, 1),

 Data[8].ctledges[0].bchannel */ FREQ2FBIN(2412, 1),

 Data[8].ctledges[1].bchannel */ FREQ2FBIN(2417, 1),

 Data[8].ctledges[2].bchannel */ FREQ2FBIN(2472, 1),

 Data[9].ctledges[0].bchannel */ FREQ2FBIN(2412, 1),

 Data[9].ctledges[1].bchannel */ FREQ2FBIN(2417, 1),

 Data[9].ctledges[2].bchannel */ FREQ2FBIN(2472, 1),

 Data[10].ctledges[0].bchannel */ FREQ2FBIN(2412, 1),

 Data[10].ctledges[1].bchannel */ FREQ2FBIN(2417, 1),

 Data[10].ctledges[2].bchannel */ FREQ2FBIN(2472, 1),

 Data[11].ctledges[0].bchannel */ FREQ2FBIN(2422, 1),

 Data[11].ctledges[1].bchannel */ FREQ2FBIN(2427, 1),

 Data[11].ctledges[2].bchannel */ FREQ2FBIN(2447, 1),

 Data[11].ctledges[3].bchannel */ FREQ2FBIN(2462, 1),

 4 idle,t1,t2,b (4 bits per setting) */

 4 ra1l1, ra2l1, ra1l2,ra2l2,ra12 */

 antCtrlChain 6 idle, t,r,rx1,rx12,b (2 bits each) */

 xatten1DB 3 xatten1_db for ar9280 (0xa20c/b20c 5:0) */

		/*

		 * xatten1Margin[ar9300_max_chains]; 3 xatten1_margin

		 * for merlin (0xa20c/b20c 16:12

 spurChans spur channels in usual fbin coding format */

 noiseFloorThreshch check if the register is per chain */

 4 bits tx_clip, 4 bits dac_scale_cck */

 6-24,36,48,54 */

		/*

		 * 0_8_16,1-3_9-11_17-19,

		 * 4,5,6,7,12,13,14,15,20,21,22,23

		/*

		 * 0_8_16,1-3_9-11_17-19,

		 * 4,5,6,7,12,13,14,15,20,21,22,23

 Data[0].ctledges[0].bchannel */ FREQ2FBIN(5180, 0),

 Data[0].ctledges[1].bchannel */ FREQ2FBIN(5260, 0),

 Data[0].ctledges[2].bchannel */ FREQ2FBIN(5280, 0),

 Data[0].ctledges[3].bchannel */ FREQ2FBIN(5500, 0),

 Data[0].ctledges[4].bchannel */ FREQ2FBIN(5600, 0),

 Data[0].ctledges[5].bchannel */ FREQ2FBIN(5700, 0),

 Data[0].ctledges[6].bchannel */ FREQ2FBIN(5745, 0),

 Data[0].ctledges[7].bchannel */ FREQ2FBIN(5825, 0)

 Data[1].ctledges[0].bchannel */ FREQ2FBIN(5180, 0),

 Data[1].ctledges[1].bchannel */ FREQ2FBIN(5260, 0),

 Data[1].ctledges[2].bchannel */ FREQ2FBIN(5280, 0),

 Data[1].ctledges[3].bchannel */ FREQ2FBIN(5500, 0),

 Data[1].ctledges[4].bchannel */ FREQ2FBIN(5520, 0),

 Data[1].ctledges[5].bchannel */ FREQ2FBIN(5700, 0),

 Data[1].ctledges[6].bchannel */ FREQ2FBIN(5745, 0),

 Data[1].ctledges[7].bchannel */ FREQ2FBIN(5825, 0)

 Data[2].ctledges[0].bchannel */ FREQ2FBIN(5190, 0),

 Data[2].ctledges[1].bchannel */ FREQ2FBIN(5230, 0),

 Data[2].ctledges[2].bchannel */ FREQ2FBIN(5270, 0),

 Data[2].ctledges[3].bchannel */ FREQ2FBIN(5310, 0),

 Data[2].ctledges[4].bchannel */ FREQ2FBIN(5510, 0),

 Data[2].ctledges[5].bchannel */ FREQ2FBIN(5550, 0),

 Data[2].ctledges[6].bchannel */ FREQ2FBIN(5670, 0),

 Data[2].ctledges[7].bchannel */ FREQ2FBIN(5755, 0)

 Data[3].ctledges[0].bchannel */ FREQ2FBIN(5180, 0),

 Data[3].ctledges[1].bchannel */ FREQ2FBIN(5200, 0),

 Data[3].ctledges[2].bchannel */ FREQ2FBIN(5260, 0),

 Data[3].ctledges[3].bchannel */ FREQ2FBIN(5320, 0),

 Data[3].ctledges[4].bchannel */ FREQ2FBIN(5500, 0),

 Data[3].ctledges[5].bchannel */ FREQ2FBIN(5700, 0),

 Data[3].ctledges[6].bchannel */ 0xFF,

 Data[3].ctledges[7].bchannel */ 0xFF,

 Data[4].ctledges[0].bchannel */ FREQ2FBIN(5180, 0),

 Data[4].ctledges[1].bchannel */ FREQ2FBIN(5260, 0),

 Data[4].ctledges[2].bchannel */ FREQ2FBIN(5500, 0),

 Data[4].ctledges[3].bchannel */ FREQ2FBIN(5700, 0),

 Data[4].ctledges[4].bchannel */ 0xFF,

 Data[4].ctledges[5].bchannel */ 0xFF,

 Data[4].ctledges[6].bchannel */ 0xFF,

 Data[4].ctledges[7].bchannel */ 0xFF,

 Data[5].ctledges[0].bchannel */ FREQ2FBIN(5190, 0),

 Data[5].ctledges[1].bchannel */ FREQ2FBIN(5270, 0),

 Data[5].ctledges[2].bchannel */ FREQ2FBIN(5310, 0),

 Data[5].ctledges[3].bchannel */ FREQ2FBIN(5510, 0),

 Data[5].ctledges[4].bchannel */ FREQ2FBIN(5590, 0),

 Data[5].ctledges[5].bchannel */ FREQ2FBIN(5670, 0),

 Data[5].ctledges[6].bchannel */ 0xFF,

 Data[5].ctledges[7].bchannel */ 0xFF

 Data[6].ctledges[0].bchannel */ FREQ2FBIN(5180, 0),

 Data[6].ctledges[1].bchannel */ FREQ2FBIN(5200, 0),

 Data[6].ctledges[2].bchannel */ FREQ2FBIN(5220, 0),

 Data[6].ctledges[3].bchannel */ FREQ2FBIN(5260, 0),

 Data[6].ctledges[4].bchannel */ FREQ2FBIN(5500, 0),

 Data[6].ctledges[5].bchannel */ FREQ2FBIN(5600, 0),

 Data[6].ctledges[6].bchannel */ FREQ2FBIN(5700, 0),

 Data[6].ctledges[7].bchannel */ FREQ2FBIN(5745, 0)

 Data[7].ctledges[0].bchannel */ FREQ2FBIN(5180, 0),

 Data[7].ctledges[1].bchannel */ FREQ2FBIN(5260, 0),

 Data[7].ctledges[2].bchannel */ FREQ2FBIN(5320, 0),

 Data[7].ctledges[3].bchannel */ FREQ2FBIN(5500, 0),

 Data[7].ctledges[4].bchannel */ FREQ2FBIN(5560, 0),

 Data[7].ctledges[5].bchannel */ FREQ2FBIN(5700, 0),

 Data[7].ctledges[6].bchannel */ FREQ2FBIN(5745, 0),

 Data[7].ctledges[7].bchannel */ FREQ2FBIN(5825, 0)

 Data[8].ctledges[0].bchannel */ FREQ2FBIN(5190, 0),

 Data[8].ctledges[1].bchannel */ FREQ2FBIN(5230, 0),

 Data[8].ctledges[2].bchannel */ FREQ2FBIN(5270, 0),

 Data[8].ctledges[3].bchannel */ FREQ2FBIN(5510, 0),

 Data[8].ctledges[4].bchannel */ FREQ2FBIN(5550, 0),

 Data[8].ctledges[5].bchannel */ FREQ2FBIN(5670, 0),

 Data[8].ctledges[6].bchannel */ FREQ2FBIN(5755, 0),

 Data[8].ctledges[7].bchannel */ FREQ2FBIN(5795, 0)

 4 bits tx and 4 bits rx */

 takes lower byte in eeprom location */

		 /*

		  * bit0 - enable tx temp comp - disabled

		  * bit1 - enable tx volt comp - disabled

		  * bit2 - enable fastClock - enabled

		  * bit3 - enable doubling - enabled

		  * bit4 - enable internal regulator - disabled

		  * bit5 - enable pa predistortion - disabled

 bit0 - turn down drivestrength */

 ar9300_modal_eep_header  2g */

 4 idle,t1,t2,b(4 bits per setting) */

 4 ra1l1, ra2l1, ra1l2, ra2l2, ra12 */

		/*

		 * antCtrlChain[AR9300_MAX_CHAINS]; 6 idle, t, r,

		 * rx1, rx12, b (2 bits each)

		/*

		 * xatten1DB[AR9300_MAX_CHAINS];  3 xatten1_db

		 * for ar9280 (0xa20c/b20c 5:0)

		/*

		 * xatten1Margin[AR9300_MAX_CHAINS]; 3 xatten1_margin

		 * for ar9280 (0xa20c/b20c 16:12

		/*

		 * spurChans[OSPREY_EEPROM_MODAL_SPURS]; spur

		 * channels in usual fbin coding format

		/*

		 * noiseFloorThreshCh[AR9300_MAX_CHAINS]; 3 Check

		 * if the register is per chain

 4 bits tx_clip, 4 bits dac_scale_cck */

 ar9300_cal_data_per_freq_op_loop 2g */

 1L-5L,5S,11L,11S */

 6-24,36,48,54 */

 Data[4].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[4].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[4].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[4].ctlEdges[3].bChannel */ FREQ2FBIN(2484, 1),

 Data[5].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[5].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[5].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[6].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[6].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[7].ctlEdges[0].bChannel */ FREQ2FBIN(2422, 1),

 Data[7].ctlEdges[1].bChannel */ FREQ2FBIN(2427, 1),

 Data[7].ctlEdges[2].bChannel */ FREQ2FBIN(2447, 1),

 Data[7].ctlEdges[3].bChannel */ FREQ2FBIN(2462, 1),

 Data[8].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[8].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[8].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[9].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[9].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[9].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[10].ctlEdges[0].bChannel */ FREQ2FBIN(2412, 1),

 Data[10].ctlEdges[1].bChannel */ FREQ2FBIN(2417, 1),

 Data[10].ctlEdges[2].bChannel */ FREQ2FBIN(2472, 1),

 Data[11].ctlEdges[0].bChannel */ FREQ2FBIN(2422, 1),

 Data[11].ctlEdges[1].bChannel */ FREQ2FBIN(2427, 1),

 Data[11].ctlEdges[2].bChannel */ FREQ2FBIN(2447, 1),

 Data[11].ctlEdges[3].bChannel */ FREQ2FBIN(2462, 1),

 4 idle,t1,t2,b (4 bits per setting) */

 4 ra1l1, ra2l1, ra1l2,ra2l2,ra12 */

 antCtrlChain 6 idle, t,r,rx1,rx12,b (2 bits each) */

 xatten1DB 3 xatten1_db for AR9280 (0xa20c/b20c 5:0) */

		/*

		 * xatten1Margin[AR9300_MAX_CHAINS]; 3 xatten1_margin

		 * for merlin (0xa20c/b20c 16:12

 spurChans spur channels in usual fbin coding format */

 noiseFloorThreshCh Check if the register is per chain */

 4 bits tx_clip, 4 bits dac_scale_cck */

 6-24,36,48,54 */

		/*

		 * 0_8_16,1-3_9-11_17-19,

		 * 4,5,6,7,12,13,14,15,20,21,22,23

		/*

		 * 0_8_16,1-3_9-11_17-19,

		 * 4,5,6,7,12,13,14,15,20,21,22,23

 Data[0].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[0].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[0].ctlEdges[2].bChannel */ FREQ2FBIN(5280, 0),

 Data[0].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[0].ctlEdges[4].bChannel */ FREQ2FBIN(5600, 0),

 Data[0].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[0].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[0].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[1].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[1].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[1].ctlEdges[2].bChannel */ FREQ2FBIN(5280, 0),

 Data[1].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[1].ctlEdges[4].bChannel */ FREQ2FBIN(5520, 0),

 Data[1].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[1].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[1].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[2].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[2].ctlEdges[1].bChannel */ FREQ2FBIN(5230, 0),

 Data[2].ctlEdges[2].bChannel */ FREQ2FBIN(5270, 0),

 Data[2].ctlEdges[3].bChannel */ FREQ2FBIN(5310, 0),

 Data[2].ctlEdges[4].bChannel */ FREQ2FBIN(5510, 0),

 Data[2].ctlEdges[5].bChannel */ FREQ2FBIN(5550, 0),

 Data[2].ctlEdges[6].bChannel */ FREQ2FBIN(5670, 0),

 Data[2].ctlEdges[7].bChannel */ FREQ2FBIN(5755, 0)

 Data[3].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[3].ctlEdges[1].bChannel */ FREQ2FBIN(5200, 0),

 Data[3].ctlEdges[2].bChannel */ FREQ2FBIN(5260, 0),

 Data[3].ctlEdges[3].bChannel */ FREQ2FBIN(5320, 0),

 Data[3].ctlEdges[4].bChannel */ FREQ2FBIN(5500, 0),

 Data[3].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[3].ctlEdges[6].bChannel */ 0xFF,

 Data[3].ctlEdges[7].bChannel */ 0xFF,

 Data[4].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[4].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[4].ctlEdges[2].bChannel */ FREQ2FBIN(5500, 0),

 Data[4].ctlEdges[3].bChannel */ FREQ2FBIN(5700, 0),

 Data[4].ctlEdges[4].bChannel */ 0xFF,

 Data[4].ctlEdges[5].bChannel */ 0xFF,

 Data[4].ctlEdges[6].bChannel */ 0xFF,

 Data[4].ctlEdges[7].bChannel */ 0xFF,

 Data[5].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[5].ctlEdges[1].bChannel */ FREQ2FBIN(5270, 0),

 Data[5].ctlEdges[2].bChannel */ FREQ2FBIN(5310, 0),

 Data[5].ctlEdges[3].bChannel */ FREQ2FBIN(5510, 0),

 Data[5].ctlEdges[4].bChannel */ FREQ2FBIN(5590, 0),

 Data[5].ctlEdges[5].bChannel */ FREQ2FBIN(5670, 0),

 Data[5].ctlEdges[6].bChannel */ 0xFF,

 Data[5].ctlEdges[7].bChannel */ 0xFF

 Data[6].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[6].ctlEdges[1].bChannel */ FREQ2FBIN(5200, 0),

 Data[6].ctlEdges[2].bChannel */ FREQ2FBIN(5220, 0),

 Data[6].ctlEdges[3].bChannel */ FREQ2FBIN(5260, 0),

 Data[6].ctlEdges[4].bChannel */ FREQ2FBIN(5500, 0),

 Data[6].ctlEdges[5].bChannel */ FREQ2FBIN(5600, 0),

 Data[6].ctlEdges[6].bChannel */ FREQ2FBIN(5700, 0),

 Data[6].ctlEdges[7].bChannel */ FREQ2FBIN(5745, 0)

 Data[7].ctlEdges[0].bChannel */ FREQ2FBIN(5180, 0),

 Data[7].ctlEdges[1].bChannel */ FREQ2FBIN(5260, 0),

 Data[7].ctlEdges[2].bChannel */ FREQ2FBIN(5320, 0),

 Data[7].ctlEdges[3].bChannel */ FREQ2FBIN(5500, 0),

 Data[7].ctlEdges[4].bChannel */ FREQ2FBIN(5560, 0),

 Data[7].ctlEdges[5].bChannel */ FREQ2FBIN(5700, 0),

 Data[7].ctlEdges[6].bChannel */ FREQ2FBIN(5745, 0),

 Data[7].ctlEdges[7].bChannel */ FREQ2FBIN(5825, 0)

 Data[8].ctlEdges[0].bChannel */ FREQ2FBIN(5190, 0),

 Data[8].ctlEdges[1].bChannel */ FREQ2FBIN(5230, 0),

 Data[8].ctlEdges[2].bChannel */ FREQ2FBIN(5270, 0),

 Data[8].ctlEdges[3].bChannel */ FREQ2FBIN(5510, 0),

 Data[8].ctlEdges[4].bChannel */ FREQ2FBIN(5550, 0),

 Data[8].ctlEdges[5].bChannel */ FREQ2FBIN(5670, 0),

 Data[8].ctlEdges[6].bChannel */ FREQ2FBIN(5755, 0),

 Data[8].ctlEdges[7].bChannel */ FREQ2FBIN(5795, 0)

	/*

	 * Since we're reading the bytes in reverse order from a little-endian

	 * word stream, an even address means we only use the lower half of

	 * the 16-bit word at that address

/*

 * Read the configuration data from the eeprom.

 * The data can be put in any specified memory buffer.

 *

 * Returns -1 on error.

 * Returns address of next memory location on success.

 check if eeprom contains valid data */

/*

 * Restore the configuration structure by reading the eeprom.

 * This function destroys any existing in-memory structure

 * content.

 XXX: review hardware docs */

 XXX: could be read from the eepromVersion, not sure yet */

	/*

	 *   AR9462 defines new switch table for BT/WLAN,

	 *       here's new field name in XXX.ref for both 2G and 5G.

	 *   Register: [GLB_CONTROL] GLB_CONTROL (@0x20044)

	 *   15:12   R/W     SWITCH_TABLE_COM_SPDT_WLAN_RX

	 * SWITCH_TABLE_COM_SPDT_WLAN_RX

	 *

	 *   11:8     R/W     SWITCH_TABLE_COM_SPDT_WLAN_TX

	 * SWITCH_TABLE_COM_SPDT_WLAN_TX

	 *

	 *   7:4 R/W  SWITCH_TABLE_COM_SPDT_WLAN_IDLE

	 * SWITCH_TABLE_COM_SPDT_WLAN_IDLE

		/*

		 * main_lnaconf, alt_lnaconf, main_tb, alt_tb

		 * are the fields present

 enable_lnadiv */

 Force WLAN LNA diversity ON */

 Force WLAN LNA diversity OFF */

 enable fast_div */

			/*

			 * clear bits 25-30 main_lnaconf, alt_lnaconf,

			 * main_tb, alt_tb

 by default use LNA1 for the main antenna */

 Test value. if 0 then attenuation is unused. Don't load anything. */

 Internal regulator is ON. Write swreg register. */

 Set REG_CONTROL1.SWREG_PROGRAM */

/*

 * Returns the interpolated y value corresponding to the specified x value

 * from the np ordered pairs of data (px,py).

 * The pairs do not have to be in any order.

 * If the specified x value is less than any of the px,

 * the returned y value is equal to the py for the lowest px.

 * If the specified x value is greater than any of the px,

 * the returned y value is equal to the py for the highest px.

 identify best lower and higher x calibration measurement */

 this measurement is higher than our desired x */

 new best higher x measurement */

 this measurement is lower than our desired x */

 new best lower x measurement */

 the low x is good */

 so is the high x */

 they're the same, so just pick one */

 interpolate  */

 only low is good, use it */

 only high is good, use it */

 nothing is good,this should never happen unless np=0, ???? */

	/*

	 * create array of channels and targetpower from

	 * targetpower piers stored on eeprom

 interpolate to get target power for given frequency */

	/*

	 * create array of channels and targetpower

	 * from targetpower piers stored on eeprom

 interpolate to get target power for given frequency */

	/*

	 * create array of channels and targetpower from

	 * targetpower piers stored on eeprom

 interpolate to get target power for given frequency */

	/*

	 * create array of channels and targetpower from

	 * targetpower piers stored on eeprom

 interpolate to get target power for given frequency */

 target power values for self generated frames (ACK,RTS/CTS) */

 Set tx power registers to array of values passed in */

 make sure forced gain is not set */

 Write the OFDM power per rate set */

 6 (LSB), 9, 12, 18 (MSB) */

 24 (LSB), 36, 48, 54 (MSB) */

 Write the CCK power per rate set */

 1L (LSB), reserved, 2L, 2S (MSB) */

 POW_SM(txPowerTimes2,  8) | this is reserved for AR9003 */

 5.5L (LSB), 5.5S, 11L, 11S (MSB) */

 Write the power for duplicated frames - HT40 */

 dup40_cck (LSB), dup40_ofdm, ext20_cck, ext20_ofdm (MSB) */

 Write the HT20 power per rate set */

 0/8/16 (LSB), 1-3/9-11/17-19, 4, 5 (MSB) */

 6 (LSB), 7, 12, 13 (MSB) */

 14 (LSB), 15, 20, 21 */

 Mixed HT20 and HT40 rates */

 HT20 22 (LSB), HT20 23, HT40 22, HT40 23 (MSB) */

	/*

	 * Write the HT40 power per rate set

	 * correct PAR difference between HT40 and HT20/LEGACY

	 * 0/8/16 (LSB), 1-3/9-11/17-19, 4, 5 (MSB)

 6 (LSB), 7, 12, 13 (MSB) */

 14 (LSB), 15, 20, 21 */

 XXX: hard code for now, need to get from eeprom struct */

 5GHz */

 enable open loop power control on chip */

	/*

	 * enable temperature compensation

	 * Need to use register names

		/*

		 * AR955x has tempSlope register for each chain.

		 * Check whether temp_compensation feature is enabled or not.

			/*

			 * If temp compensation is not enabled,

			 * set all registers to 0.

 Apply the recorded correction values. */

 identify best lower and higher frequency calibration measurement */

				/*

				 * this measurement is higher than

				 * our desired frequency

						/*

						 * new best higher

						 * frequency measurement

						/*

						 * new best lower

						 * frequency measurement

 interpolate  */

 they're the same, so just pick one */

 the low frequency is good */

 so is the high frequency, interpolate */

 only low is good, use it */

 only high is good, use it */

 nothing is good, presume 0???? */

 Store calibrated noise floor values */

/*

 * Find the maximum conformance test limit for the given channel and CTL info

 Get the edge power */

		/*

		 * If there's an exact channel match or an inband flag set

		 * on the lower channel use the given rdEdgePower

			/*

			 * Leave loop - no more affecting edges possible in

			 * this monotonic increasing list

 Setup for CTL modes */

 CTL_11B, CTL_11G, CTL_2GHT20 */

 All 2G CTL's */

 Setup for CTL modes */

 CTL_11A, CTL_5GHT20 */

 All 5G CTL's */

	/*

	 * For MIMO, need to apply regulatory caps individually across

	 * dynamically running modes: CCK, OFDM, HT20, HT40

	 *

	 * The outer loop walks through each possible applicable runtime mode.

	 * The inner loop walks through each ctlIndex entry in EEPROM.

	 * The ctl value is encoded as [7:4] == test group, [3:0] == test mode.

 walk through each CTL index stored in EEPROM */

			/*

			 * compare test group from regulatory

			 * channel list with test mode from pCtlMode

			 * list

					/*

					 * Find the minimum of all CTL

					 * edge powers that apply to

					 * this channel

 specific */

 Apply ctl mode to correct target power set */

 end ctl mode checking */

	/*

	 * Get target powers from EEPROM - our baseline for TX Power

 Write target power array to registers */

 TPC initializations */

 Enable TPC */

 Disable per chain power reduction */

 Disable TPC */

 bits 7:4 */

 bits 3:0 */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Enable OLPC for chain 0 */

 Enable OLPC for chain 1 */

 Write the OLPC ref power for chain 0 */

 Write the OLPC ref power for chain 1 */

 Calculate the value of xpdgains from the xpdGain Mask */

	/*

	 * Get TX power from EEPROM.

 CTL_11B, CTL_11G, CTL_2GHT20 */

 All 2G CTLs */

 Walk through the CTL indices stored in EEPROM */

			/*

			 * Compare test group from regulatory channel list

			 * with test mode from pCtlMode list

 Apply ctl mode to correct target power set */

 Now set the rates array */

 OFDM power per rate */

 CCK power per rate */

 HT20 power per rate */

 HT40 power per rate */

 Dup/Ext power per rate */

 TPC initializations */

 Enable TPC */

 Disable TPC */

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 HTC APIs */

 Find an available endpoint */

/*

 * HTC Messages are handled directly here and the obtained SKB

 * is freed.

 *

 * Service messages (Data, WMI) passed to the corresponding

 * endpoint RX handlers, which have to free the SKB.

 Handle trailer */

 Move past the Watchdog pattern */

 Get the message ID */

 Now process HTC messages */

 Assign control endpoint pipe IDs */

 SPDX-License-Identifier: ISC

/* Initialize Owl Emulation Devices

 *

 * Copyright (C) 2016 Christian Lamparter <chunkeey@gmail.com>

 * Copyright (C) 2016 Martin Blumenstingl <martin.blumenstingl@googlemail.com>

 *

 * Some devices (like the Cisco Meraki Z1 Cloud Managed Teleworker Gateway)

 * need to be able to initialize the PCIe wifi device. Normally, this is done

 * during the early stages as a pci quirk.

 * However, this isn't possible for devices which have the init code for the

 * Atheros chip stored on UBI Volume on NAND. Hence, this module can be used to

 * initialize the chip when the user-space is ready to extract the init code.

 also note that we are doing *u16 operations on the file */

 set pointer to first reg address */

	/* the device should come back with the proper

	 * ProductId. But we have to initiate a rescan.

 this should match the pattern used in ath9k/init.c */

 not present, try firmware_request */

 PCIe */

 PCI */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 *  This function will modify certain transmit queue properties depending on

 *  the operating mode of the station (AP or AdHoc).  Parameters are AIFS

 *  settings and channel width min/max

 Always burst out beacon and CAB traffic. */

 Adhoc mode; important thing is to use 2x cwmin. */

/*

 *  Associates the beacon frame buffer with a transmit descriptor.  Will set

 *  up rate codes, and channel flags. Beacons are always sent out at the

 *  lowest rate, and are not retried.

 Always assign NOA attr when MCC enabled */

	/*

	 * if the CABQ traffic from previous DTIM is pending and the current

	 *  beacon is also a DTIM.

	 *  1) if there is only one vif let the cab traffic continue.

	 *  2) if there are more than one vif and we are using staggered

	 *     beacons, then drain the cabq by dropping all the frames in

	 *     the cabq so that the current vifs cab traffic can be scheduled.

 Find first taken slot. */

 Re-enumarate all slots, moving them forward. */

 Get the tsf_adjust value for the new first slot. */

 Modify TSF as required and update the HW. */

 The slots tsf_adjust will be updated by ath9k_beacon_config later. */

		/* tsf_adjust is added to the TSF value. We send out the

		 * beacon late, so need to adjust the TSF starting point to be

		 * later in time (i.e. the theoretical first beacon has a TSF

		 * of 0 after correction).

	/*

	 * Check if the previous beacon has gone out.  If

	 * not don't try to post another, skip this period

	 * and wait for the next.  Missed beacons indicate

	 * a problem and should not occur.  If we miss too

	 * many consecutive beacons reset the device.

		/*

		 * If the previous beacon has not been transmitted

		 * and a MAC/BB hang has been identified, return

		 * here because a chip reset would have been

		 * initiated.

 EDMA devices check that in the tx completion function. */

	/*

	 * Handle slot time change when a non-ERP station joins/leaves

	 * an 11g network.  The 802.11 layer notifies us via callback,

	 * we mark updateslot, then wait one beacon before effecting

	 * the change.  This gives associated stations at least one

	 * beacon interval to note the state change.

	 *

	 * NB: The slot time change state machine is clocked according

	 *     to whether we are bursting or staggering beacons.  We

	 *     recognize the request to update and record the current

	 *     slot then don't transition until that slot is reached

	 *     again.  If we miss a beacon for that slot then we'll be

	 *     slow to transition but we'll be sure at least one beacon

	 *     interval has passed.  When bursting slot is always left

	 *     set to ATH_BCBUF so this check is a noop.

 NB: cabq traffic should already be queued and primed */

/*

 * Both nexttbtt and intval have to be in usecs.

/*

 * For multi-bss ap support beacons are either staggered evenly over N slots or

 * burst together.  For the former arrange for the SWBA to be delivered for each

 * slot. Slots that are not occupied will generate nothing.

	/*

	 * Set the global 'beacon has been configured' flag for the

	 * joiner case in IBSS mode.

	/*

	 * It looks like mac80211 may end up using beacon interval of zero in

	 * some cases (at least for mesh point). Avoid getting into an

	 * infinite loop by using a bit safer value instead. To be safe,

	 * do sanity check on beacon interval for all operating modes.

	/*

	 * We don't parse dtim period from mac80211 during the driver

	 * initialization as it breaks association with hidden-ssid

	 * AP and it causes latency in roaming

 Update the beacon configuration. */

	/*

	 * Configure the HW beacon registers only when we have a valid

	 * beacon interval.

		/* Special case to sync the TSF when joining an existing IBSS.

		 * This is only done if no AP interface is active.

		 * Note that mac80211 always resets the TSF when creating a new

		 * IBSS interface.

		/*

		 * Do not set the ATH_OP_BEACONS flag for IBSS joiner mode

		 * here, it is done in ath9k_beacon_config_adhoc().

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 PCI   */

 PCI-E */

 PCI   */

 Mini PCI AR9220 MB92 cards: Compex WLM200NX, Wistron DNMA-92 */

 PCI   */

 LITEON */

 LITEON */

 WNC */

 Fujitsu */

 Fujitsu */

 Fujitsu */

 PCI-E */

 AR9285 card for Asus */

 PCI-E */

 PCI-E 802.11n bonded out */

 PCI   */

 PCI-E */

 Killer Wireless (3x3) */

 PCI-E  AR9300 */

 PCI-E CUS198 */

 PCI-E CUS230 */

 WB225 */

 WNC */

 WNC */

 AR9485 cards with PLL power-save disabled by default. */

 ASKEY */

 LITEON */

 LITEON */

 ASKEY */

 XAVI */

 XAVI */

 XAVI */

 XAVI */

 PCI-E  AR9485 */

 PCI-E  AR9580 */

 PCI-E CUS217 */

 LITEON */

 AR9462 with WoW support */

 LITEON */

 LITEON */

 USI */

 USI */

 Fujitsu */

 Killer Wireless (2x2) */

 PCI-E  AR9462 */

 PCI-E  AR1111/AR9485 */

 CUS252 */

 WB335 1-ANT */

 WNC */

 LITEON */

 LITEON */

 LITEON */

 LITEON */

 LITEON */

 XAVI */

 XAVI */

 XAVI */

 XAVI */

 WB335 1-ANT / Antenna Diversity */

 WNC */

 LITEON */

 LITEON */

 LITEON */

 LITEON */

 LITEON */

 WB335 2-ANT / Antenna-Diversity */

 LITEON */

 LITEON */

 LITEON */

 LITEON */

 LITEON */

 LITEON */

 LITEON */

 LITEON */

 ASKEY */

 XAVI */

 XAVI */

 XAVI */

 XAVI */

 WNC */

 WNC */

 PCI-E AR9565 (WB335) */

 return bus cachesize in 4B word units */

	/*

	 * This check was put in to avoid "unpleasant" consequences if

	 * the bootrom has not fully initialized all PCI devices.

	 * Sometimes the cache line size register is not set

 Use the default size */

 Need to be called after we discover btcoex capabilities */

 Bluetooth coexistence requires disabling ASPM. */

		/*

		 * Both upstream and downstream PCIe components should

		 * have the same ASPM settings.

	/*

	 * 0x70c - Ack Frequency Register.

	 *

	 * Bits 27:29 - DEFAULT_L1_ENTRANCE_LATENCY.

	 *

	 * 000 : 1 us

	 * 001 : 2 us

	 * 010 : 4 us

	 * 011 : 8 us

	 * 100 : 16 us

	 * 101 : 32 us

	 * 110/111 : 64 us

 Initialize PCIe PM and SERDES registers. */

	/*

	 * Cache line size is used to size and align various

	 * structures used to communicate with the hardware.

		/*

		 * Linux 2.4.18 (at least) writes the cache line size

		 * register as a 16-bit wide register which is wrong.

		 * We must have this setup properly for rx buffer

		 * DMA to work so force a reasonable value here if it

		 * comes up zero.

	/*

	 * The default setting of latency timer yields poor results,

	 * set it to the value used by other systems. It may be worth

	 * tweaking this setting more.

	/*

	 * Disable the RETRY_TIMEOUT register (0x41) to keep

	 * PCI Tx retries from interfering with C3 CPU state.

	/* The device has to be moved to FULLSLEEP forcibly.

	 * Otherwise the chip never moved to full sleep,

	 * when no interface is up.

	/*

	 * Suspend/Resume resets the PCI configuration space, so we have to

	 * re-disable the RETRY_TIMEOUT register (0x41) to keep

	 * PCI Tx retries from interfering with C3 CPU state

 !CONFIG_PM_SLEEP */

 !CONFIG_PM_SLEEP */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * If bt_status_query message is  not sent successfully,

	 * then need_flush_btinfo should be set again.

 Send next unhalt no matter halt sent or not */

	/*

	 * we don't need to send more remote_reset at this moment.

	 * If BT receive first remote_reset, then BT HW will

	 * be cleaned up and will be able to receive req_wake

	 * and BT HW will respond sys_waking.

	 * In this case, WLAN will receive BT's HW sys_waking.

	 * Otherwise, if BT SW missed initial remote_reset,

	 * that remote_reset will still clean up BT MCI RX,

	 * and the req_wake will wake BT up,

	 * and BT SW will respond this req_wake with a remote_reset and

	 * sys_waking. In this case, WLAN will receive BT's SW

	 * sys_waking. In either case, BT's RX is cleaned up. So we

	 * don't need to reply BT's remote_reset now, if any.

	 * Similarly, if in any case, WLAN can receive BT's sys_waking,

	 * that means WLAN's RX is also fine.

	/*

	 * Set BT priority interrupt value to be 0xff to

	 * avoid having too many BT PRIORITY interrupts.

	/*

	 * A contention reset will be received after send out

	 * sys_waking. Also BT priority interrupt bits will be set.

	 * Clear those bits before the next step.

 Clear the extra redundant SYS_WAKING from BT */

 Clean int bits after the values are read. */

	/*

	 * check BT state again to make

	 * sure it's not changed.

		/*

		 * check if it's cal_grant

		 *

		 * When we're waiting for cal_grant in reset routine,

		 * it's possible that BT sends out cal_request at the

		 * same time. Since BT's calibration doesn't happen

		 * that often, we'll let BT completes calibration then

		 * we continue to wait for cal_grant from BT.

		 * Orginal: Wait BT_CAL_GRANT.

		 * New: Receive BT_CAL_REQ -> send WLAN_CAL_GRANT->wait

		 * BT_CAL_DONE -> Wait BT_CAL_GRANT.

	/*

	 * MCI FIX: disable mci interrupt here. This is to avoid

	 * SW_MSG_DONE or RX_MSG bits to trigger MCI_INT and

	 * lead to mci_intr reentry.

 Wait BT calibration to be completed for 25ms */

 MCI FIX: enable mci interrupt here */

	/*

	 * BT is sleeping. Check if BT wakes up during

	 * WLAN calibration. If BT wakes up during

	 * WLAN calibration, need to go through all

	 * message exchanges again and recal.

 disable all MCI messages */

 wait pending HW messages to flush out */

	/*

	 * Send LNA_TAKE and SYS_SLEEPING when

	 * 1. reset not after resuming from full sleep

	 * 2. before reset MCI RX, to quiet BT and avoid MCI RX misalignment

 Program MCI DMA related registers */

	/*

	* To avoid MCI state machine be affected by incoming remote MCI msgs,

	* MCI mode will be enabled later, right before reset the MCI TX and RX.

 Set the time out to 3.125ms (5 BT slots) */

 concurrent tx priority */

 Resetting the Rx and Tx paths of MCI */

 Check pending GPM msg before MCI Reset Rx */

 Init GPM offset after MCI Reset Rx */

 check if the message is to be queued */

 Need to clear SW_MSG_DONE raw bit before wait */

 Turn off MCI and Jupiter mode. */

 Make it in bytes */

 Check if we still have control of the GPIOs */

 Force another 2g5g update at next scanning */

	/*

	 * This should only be called before "MAC Warm Reset" or "MCI Reset Rx".

	/*

	 * This could be useful to avoid new GPM message interrupt which

	 * may lead to spurious interrupt after power sleep, or multiple

	 * entry of ath_mci_intr().

	 * Adding empty GPM check by returning HAL_MCI_GPM_INVALID can

	 * alleviate this effect, but clearing GPM RX interrupt bit is

	 * safe, because whether this is called from hw or driver code

	 * there must be an interrupt bit set/triggered initially

 skip reserved GPM if any */

/*

 * Copyright (c) 2013 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 We leave the hardware awake as it will be chugging on */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 CONFIG_ATH9K_CHANNEL_CONTEXT */

/*

 * Read and write, they both share the same lock. We do this to serialize

 * reads and writes on Atheros 802.11n PCI devices only. This is required

 * as the FIFO on these devices can only accept sanely 2 requests.

*************************/

     Initialization     */

*************************/

 synchronize DFS detector if regulatory domain changed */

 Set tx power */

/*

 *  This function will allocate both the DMA descriptor structure, and the

 *  buffers it contains.  These are used to contain the descriptors used

 *  by the system.

 ath_desc must be a multiple of DWORDs */

	/*

	 * Need additional DMA memory because we can't use

	 * descriptors that cross the 4K page boundary. Assume

	 * one skipped descriptor per 4K page.

 allocate descriptors */

XXX*/(u32) dd->dd_desc_len);

 allocate buffers */

				/*

				 * Skip descriptor addresses which can cause 4KB

				 * boundary crossing (addr + length) with a 32 dword

				 * descriptor fetch.

				/*

				 * Skip descriptor addresses which can cause 4KB

				 * boundary crossing (addr + length) with a 32 dword

				 * descriptor fetch.

	/*

	 * Some WB335 cards do not support antenna diversity. Since

	 * we use a hardcoded value for AR9565 instead of using the

	 * EEPROM/OTP data, remove the combining feature from

	 * the HW capabilities bitmap.

	/*

	 * The default value of pll_pwrsave is 1.

	 * For certain AR9485 cards, it is set to 0.

	 * For AR9462, AR9565 it's set to 7.

 try to load the EEPROM content asynchronously */

		/* nvmem cell might not be defined, or the nvmem

		 * subsystem isn't included. In this case, follow

		 * the established "just return 0;" convention of

		 * ath9k_init_platform to say:

		 * "All good. Nothing to see here. Please go on."

	/* run basic sanity checks on the returned nvram cell length.

	 * That length has to be a multiple of a "u16" (i.e.: & 1).

	 * Furthermore, it has to be more than "let's say" 512 bytes

	 * but less than the maximum of AR9300_EEPROM_SIZE (16kb).

 devres manages the calibration values release on shutdown */

 ath9k-eeprom-<bus>-<id>.bin */

 Will be cleared in ath9k_start() */

	/*

	 * Platform quirks.

	/*

	 * Enable WLAN/BT RX Antenna diversity only when:

	 *

	 * - BTCOEX is disabled.

	 * - the user manually requests the feature.

	 * - the HW cap is set using the platform data.

	/*

	 * Cache line size is used to size and align various

	 * structures used to communicate with the hardware.

 convert to bytes */

 Initializes the hardware for all supported chipsets */

 CONFIG_ATH9K_CHANNEL_CONTEXT */

 CONFIG_ATH9K_CHANNEL_CONTEXT */

 single chain devices with rx diversity */

 Bring up device */

 Initialize regulatory */

 Setup TX DMA */

 Setup RX DMA */

 must be initialized before ieee80211_register_hw */

 Register with mac80211 */

 Handle world regulatory */

****************************/

     De-Initialization     */

****************************/

***********************/

     Module Hooks     */

***********************/

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 level:  0   1   2   3   4   5   6   7   8  */

 lvl 0-8, default 2 */

 level:  0   1   2   3   4   5   6   7   8  */

 lvl 0-7, default 3 */

/*

 * register values to turn OFDM weak signal detection OFF

/**

 * ar9003_hw_set_channel - set channel on single-chip device

 * @ah: atheros hardware structure

 * @chan:

 *

 * This is the function to change channel on single-chip devices, that is

 * for AR9300 family of chipsets.

 *

 * This function takes the channel value in MHz and sets

 * hardware channel value. Assumes writes have been enabled to analog bus.

 *

 * Actual Expression,

 *

 * For 2GHz channel,

 * Channel Frequency = (3/4) * freq_ref * (chansel[8:0] + chanfrac[16:0]/2^17)

 * (freq_ref = 40MHz)

 *

 * For 5GHz channel,

 * Channel Frequency = (3/2) * freq_ref * (chansel[8:0] + chanfrac[16:0]/2^10)

 * (freq_ref = 40MHz/(24>>amodeRefSel))

 *

 * For 5GHz channels which are 5MHz spaced,

 * Channel Frequency = (3/2) * freq_ref * (chansel[8:0] + chanfrac[16:0]/2^17)

 * (freq_ref = 40MHz)

 2 GHz, fractional mode */

 Set to 2G mode */

 Doubler is ON, so, divide channelSel by 2. */

 Set to 5G mode */

 Enable fractional mode for all channels */

 Enable Long shift Select for Synthesizer */

 Program Synth. setting */

 Toggle Load Synth channel bit */

/**

 * ar9003_hw_spur_mitigate_mrc_cck - convert baseband spur frequency

 * @ah: atheros hardware structure

 * @chan:

 *

 * For single-chip solutions. Converts to baseband spur frequency given the

 * input channel frequency and compute register settings below.

 *

 * Spur mitigation for MRC CCK

	/*

	 * Need to verify range +/- 10 MHz in control channel, otherwise spur

	 * is out-of-band and can be ignored.

 No spur */

 Clean all spur register fields */

 OFDM Spur mitigation */

 A == B */

 A == B */

 Spur mitigation for OFDM */

 No spur in the mode */

 Enable 11n HT, 20 MHz */

 Configure baseband for dynamic 20/40 operation */

 Configure control (primary) channel at +-10MHz */

 make sure we preserve INI settings */

 turn off Green Field detection for STA for now */

 Configure MAC for 20/40 operation */

 global transmit timeout (25 TUs default)*/

 carrier sense timeout */

	/*

	 * Wait for the frequency synth to settle (synth goes on

	 * via AR_PHY_ACTIVE_EN).  Read the phy active delay register.

	 * Value is in 100ns increments.

 Activate the PHY (includes baseband activate + synthesizer on) */

/*

 * Override INI values with chip specific configuration.

	/*

	 * Set the RX_ABORT and RX_DIS and clear it only after

	 * RXE is set for MAC. This prevents frames with

	 * corrupted descriptor status.

	/*

	 * For AR9280 and above, there is a new feature that allows

	 * Multicast search based on both MAC Address and Key ID. By default,

	 * this feature is enabled. But since the driver is not using this

	 * feature, we switch it off; otherwise multicast search based on

	 * MAC addr only will fail.

 New INI format: Array may be undefined (pre, core, post arrays) */

	/*

	 * New INI format: Pre, core, and post arrays for a given subsystem

	 * may be modal (> 2 columns) or non-modal (2 columns). Determine if

	 * the array is non-modal and force the column to 1.

	/*

	 * SOC, MAC, BB, RADIO initvals.

	/*

	 * RXGAIN initvals.

		/*

		 * CUS217 mix LNA mode.

		/*

		 * 5G-XLNA

	/*

	 * TXGAIN initvals.

	/*

	 * For 5GHz channels requiring Fast Clock, apply

	 * different modal values.

	/*

	 * Clock frequency initvals.

	/*

	 * JAPAN regulatory.

	/*

	 * half and quarter rate can divide the scaled clock by 2 or 4

	 * scale for selected channel bandwidth

	/*

	 * ALGO -> coef = 1e8/fcarrier*fclock/40;

	 * scaled coef to provide precision for this floating calculation

	/*

	 * For Short GI,

	 * scaled coeff is 9/10 that of normal coeff

 for short gi */

/*

 * Wait for the frequency synth to settle (synth goes on via PHY_ACTIVE_EN).

 * Read the phy active delay register. Value is in 100ns increments.

		/*

		 * on == 1 means ofdm weak signal detection is ON

		 * on == 1 is the default, for less noise immunity

		 *

		 * on == 0 means ofdm weak signal detection is OFF

		 * on == 0 means more noise imm

		/*

		 * make register setting relative to default

		 * from INI file & cap value

		/*

		 * we need to set first step low register too

		 * make register setting relative to default

		 * from INI file & cap value

		/*

		 * make register setting relative to default

		 * from INI file & cap value

		/*

		 * set AR_PHY_EXT_CCA for extension channel

		 * make register setting relative to default

		 * from INI file & cap value

		/*

		 * is_on == 1 means MRC CCK ON (default, less noise imm)

		 * is_on == 0 means MRC CCK is OFF (more noise imm)

/*

 * Initialize the ANI register values with default (ini) values.

 * This routine is called during a (full) hardware reset after

 * all the registers are initialised from the INI.

 these levels just got reset to defaults by the INI */

	/*

	 * Set MAIN/ALT LNA conf.

	 * Set MAIN/ALT gain_tb.

		/*

		 * Enable LNA diversity.

		/*

		 * Enable fast antenna diversity.

			/*

			 * Set MAIN to LNA1 and ALT to LNA2 at the

			 * beginning.

		/*

		 * CUS217 mix LNA mode.

	/*

	 * For 5GHz channels requiring Fast Clock, apply

	 * different modal values.

	/*

	 * JAPAN regulatory.

	/* on AR93xx and newer, count = 0 will make the the chip send

	 * spectral samples endlessly. Check if this really was intended,

	 * and fix otherwise.

 Activate spectral scan */

 Poll for spectral scan complete */

 50 OK */

 OFDM rate to power table idx */

/*

 * Baseband Watchdog signatures:

 *

 * 0x04000539: BB hang when operating in HT40 DFS Channel.

 *             Full chip reset is not required, but a recovery

 *             mechanism is needed.

 *

 * 0x1300000a: Related to CAC deafness.

 *             Chip reset is not required.

 *

 * 0x0400000a: Related to CAC deafness.

 *             Full chip reset is required.

 *

 * 0x04000b09: RX state machine gets into an illegal state

 *             when a packet with unsupported rate is received.

 *             Full chip reset is required and PHY_RESTART has

 *             to be disabled.

 *

 * 0x04000409: Packet stuck on receive.

 *             Full chip reset is required for all chips except

 *	       AR9340, AR9531 and AR9561.

/*

 * ar9003_hw_bb_watchdog_check(): Returns true if a chip reset is required.

		/*

		 * For any other unknown signatures, do a

		 * full chip reset.

 disable IRQ, disable chip-reset for BB panic */

 disable watchdog in non-IDLE mode, disable in IDLE mode */

 enable IRQ, disable chip-reset for BB watchdog */

 bound limit to 10 secs */

	/*

	 * The time unit for watchdog event is 2^15 44/88MHz cycles.

	 *

	 * For HT20 we have a time unit of 2^15/44 MHz = .74 ms per tick

	 * For HT40 we have a time unit of 2^15/88 MHz = .37 ms per tick

	 *

	 * Given we use fast clock now in 5 GHz, these time units should

	 * be common for both 2 GHz and 5 GHz.

	/*

	 * enable watchdog in non-IDLE mode, disable in IDLE mode,

	 * set idle time-out.

	/*

	 * we want to avoid printing in ISR context so we save the

	 * watchdog status to be printed later in bottom half context.

	/*

	 * the watchdog timer should reset on status read but to be sure

	 * sure we write 0 to the watchdog status bit.

	/* While receiving unsupported rate frame rx state machine

	 * gets into a state 0xb and if phy_restart happens in that

	 * state, BB would go hang. If RXSM is in 0xb state after

	 * first bb panic, ensure to disable the phy_restart.

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 OFDM power per rate */

 CCK power per rate */

 HT20 power per rate */

 HT40 power per rate */

 TPC initializations */

 Enable TPC */

 Disable TPC */

 Set the block 1 value to block 0 value */

/*

 * Read EEPROM header info and program the device for correct operation

 * given the channel value.

 Single chain for 4K EEPROM*/

 Initialize Ant Diversity settings from EEPROM */

			/*

			 * If diversity combining is enabled,

			 * set MAIN to LNA1 and ALT to LNA2 initially.

/*

 * Copyright (c) 2015 Qualcomm Atheros Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * Disable AIC for now, until we have all the

	 * HW code and the driver-layer support ready.

/*

 * type 0: aic_lin_table, 1: com_att_db_table

 Config LNA gain difference */

 Program gain table */

 -01 dB: 4'd1, 5'd31,  00 dB: 4'd0, 5'd31 */

 -03 dB: 4'd3, 5'd31, -02 dB: 4'd2, 5'd31 */

 -05 dB: 4'd5, 5'd31, -04 dB: 4'd4, 5'd31 */

 -07 dB: 4'd1, 5'd30, -06 dB: 4'd0, 5'd30 */

 -09 dB: 4'd3, 5'd30, -08 dB: 4'd2, 5'd30 */

 -11 dB: 4'd5, 5'd30, -10 dB: 4'd4, 5'd30 */

 -13 dB: 4'd1, 5'd15, -12 dB: 4'd0, 5'd15 */

 -15 dB: 4'd3, 5'd15, -14 dB: 4'd2, 5'd15 */

 -17 dB: 4'd5, 5'd15, -16 dB: 4'd4, 5'd15 */

 -19 dB: 4'd1, 5'd07, -18 dB: 4'd0, 5'd07 */

 -21 dB: 4'd3, 5'd07, -20 dB: 4'd2, 5'd07 */

 -23 dB: 4'd5, 5'd07, -22 dB: 4'd4, 5'd07 */

 -25 dB: 4'd7, 5'd07, -24 dB: 4'd6, 5'd07 */

 -27 dB: 4'd3, 5'd03, -26 dB: 4'd2, 5'd03 */

 -29 dB: 4'd5, 5'd03, -28 dB: 4'd4, 5'd03 */

 -31 dB: 4'd1, 5'd01, -30 dB: 4'd0, 5'd01 */

 -33 dB: 4'd3, 5'd01, -32 dB: 4'd2, 5'd01 */

 -35 dB: 4'd5, 5'd01, -34 dB: 4'd4, 5'd01 */

 -37 dB: 4'd7, 5'd01, -36 dB: 4'd6, 5'd01 */

 Write to Gain table with auto increment enabled. */

 Write to Gain table with auto increment enabled. */

 Need to enable AIC reference signal in BT modem. */

 Start calibration */

 extrapolation */

 extrapolation */

 interpolation */

 From dir/quad_path_gain_lin to sram. */

 Disable AIC reference signal in BT modem. */

	/*

	 * Use AR_PHY_AIC_CAL_ENABLE bit instead of AR_PHY_AIC_CAL_DONE.

	 * Sometimes CAL_DONE bit is not asserted.

 Start calibration */

 FIXME: Replace these with proper register names */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 We use the hw_value as an index into our private channel structure */

/* Some 2 GHz radios are actually tunable on 2312-2732

 * on 5 MHz steps, we support the channels which we know

 * we have calibration data for all cards though to make

 Channel 1 */

 Channel 2 */

 Channel 3 */

 Channel 4 */

 Channel 5 */

 Channel 6 */

 Channel 7 */

 Channel 8 */

 Channel 9 */

 Channel 10 */

 Channel 11 */

 Channel 12 */

 Channel 13 */

 Channel 14 */

/* Some 5 GHz radios are actually tunable on XXXX-YYYY

 * on 5 MHz steps, we support the channels which we know

 * we have calibration data for all cards though to make

 _We_ call this UNII 1 */

 Channel 36 */

 Channel 40 */

 Channel 44 */

 Channel 48 */

 _We_ call this UNII 2 */

 Channel 52 */

 Channel 56 */

 Channel 60 */

 Channel 64 */

 _We_ call this "Middle band" */

 Channel 100 */

 Channel 104 */

 Channel 108 */

 Channel 112 */

 Channel 116 */

 Channel 120 */

 Channel 124 */

 Channel 128 */

 Channel 132 */

 Channel 136 */

 Channel 140 */

 _We_ call this UNII 3 */

 Channel 149 */

 Channel 153 */

 Channel 157 */

 Channel 161 */

 Channel 165 */

 Atheros hardware rate code addition for short preamble */

 set up supported mcs set */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 values here are relative to the INI */

/*

 * Legend:

 *

 * SI: Spur immunity

 * FS: FIR Step

 * WS: OFDM / CCK Weak Signal detection

 * MRC-CCK: Maximal Ratio Combining for CCK

 SI  FS  WS */

 lvl 0 */

 lvl 1 */

 lvl 2 */

 lvl 3  (default) */

 lvl 4 */

 lvl 5 */

 lvl 6 */

 lvl 7 */

 lvl 8 */

 lvl 9 */

 default level - matches the INI settings */

/*

 * MRC (Maximal Ratio Combining) has always been used with multi-antenna ofdm.

 * With OFDM for single stream you just add up all antenna inputs, you're

 * only interested in what you get after FFT. Signal alignment is also not

 * required for OFDM because any phase difference adds up in the frequency

 * domain.

 *

 * MRC requires extra work for use with CCK. You need to align the antenna

 * signals from the different antenna before you can add the signals together.

 * You need alignment of signals as CCK is in time domain, so addition can cancel

 * your signal completely if phase is 180 degrees (think of adding sine waves).

 * You also need to remove noise before the addition and this is where ANI

 * MRC CCK comes into play. One of the antenna inputs may be stronger but

 * lower SNR, so just adding after alignment can be dangerous.

 *

 * Regardless of alignment in time, the antenna signals add constructively after

 * FFT and improve your reception. For more information:

 *

 * https://en.wikipedia.org/wiki/Maximal-ratio_combining

 FS  MRC-CCK  */

 lvl 0 */

 lvl 1 */

 lvl 2  (default) */

 lvl 3 */

 lvl 4 */

 lvl 5 */

 lvl 6 */

 lvl 7 (only for high rssi) */

 lvl 8 (only for high rssi) */

 default level - matches the INI settings */

 AR_RTS_OK */

 AR_RTS_FAIL */

 AR_ACK_FAIL */

 AR_FCS_FAIL */

 AR_BEACON_CNT */

 Adjust the OFDM Noise Immunity Level */

	/*

	 * Newer chipsets are better at dealing with high PHY error counts -

	 * keep weak signal detection enabled when no RSSI threshold is

	 * available to determine if it is needed (mode != STA)

 Older chipsets are more sensitive to high PHY error counts */

/*

 * Set the ANI settings to match an CCK level.

 Skip MRC CCK for pre AR9003 families */

/*

 * only lower either OFDM or CCK errors per turn

 * we lower the other one next time

 lower OFDM noise immunity */

 lower CCK noise immunity */

/*

 * Restore the ANI parameters in the HAL and reset the statistics.

 * This routine should be called for every hardware reset and for

 * every channel change.

		/*

		 * If we're scanning or in AP mode, the defaults (ini)

		 * should be in place. For an AP we assume the historical

		 * levels for this channel are probably outdated so start

		 * from defaults instead.

		/*

		 * restore historical levels for this channel

 Freeze the MIB counters, get the stats and then clear them */

	/*

	 * since we expect some ongoing maintenance on the tables, let's sanity

	 * check here default level should not modify INI setting.

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 ns * 4 us */

 ns * 3.6 us */

 20MHz 40MHz */

  0: BPSK */

  1: QPSK 1/2 */

  2: QPSK 3/4 */

  3: 16-QAM 1/2 */

  4: 16-QAM 3/4 */

  5: 64-QAM 2/3 */

  6: 64-QAM 3/4 */

  7: 64-QAM 5/6 */

********************/

 Aggregation logic */

********************/

	/*

	 * The hardware occasionally sends a tx status for the wrong TID.

	 * In this case, the BA status cannot be considered valid and all

	 * subframes need to be retransmitted

	 *

	 * Only BlockAcks have a TID and therefore normal Acks cannot be

	 * checked

			/*

			 * AR5416 can become deaf/mute when BA

			 * issue happens. Chip needs to be reset.

			 * But AP code may have sychronization issues

			 * when perform internal reset in this routine.

			 * Only enable reset in STA mode for now.

			/*

			 * Outside of the current BlockAck window,

			 * maybe part of a previous session

			/* transmit completion, subframe is

 transmit completion */

		/*

		 * Make sure the last desc is reclaimed if it

		 * not a holding desc.

			/*

			 * complete the acked-ones/xretried ones; update

			 * block-ack window

 retry the un-acked ones */

				/*

				 * Update tx baw and complete the

				 * frame with failed status if we

				 * run out of tx buf.

			/*

			 * Put this buffer to the temporary pending

			 * queue to retain ordering

 prepend un-acked frames to the beginning of the pending frame queue */

	/*

	 * Find the lowest frame length among the rate series that will have a

	 * 4ms (or TXOP limited) transmit duration.

	/*

	 * limit aggregate size by the minimum rate if rate selected is

	 * not a probe rate, if rate selected is a probe rate then

	 * avoid aggregation of this packet.

	/*

	 * Override the default aggregation limit for BTCOEX.

/*

 * Returns the number of delimiters to be added to

 * meet the minimum required mpdudensity.

 Select standard number of delimiters based on frame length alone */

	/*

	 * If encryption enabled, hardware requires some more padding between

	 * subframes.

	 * TODO - this could be improved to be dependent on the rate.

	 *      The hardware can keep up at lower rates, but not higher rates

	/*

	 * Add delimiter when using RTS/CTS with aggregation

	 * and non enterprise AR9003 card

	/*

	 * Convert desired mpdu density from microeconds to bytes based

	 * on highest rate in rate series (i.e. first rate) to determine

	 * required minimum length for subframe. Take into account

	 * whether high rate is 20 or 40Mhz and half or full GI.

	 *

	 * If there is no mpdu density restriction, no further calculation

	 * is needed.

		/*

		 * No aggregation session is running, but there may be frames

		 * from a previous session or a failed attempt in the queue.

		 * Send them out as normal data frames

 do not step over block-ack window */

			/* If there are other skbs in the retry q, they are

			 * probably within the BAW, so loop immediately to get

 infinite loop prevention */

 do not exceed aggregation limit */

 add padding for previous frame to aggregation length */

		/*

		 * Get the delimiters needed to meet the MPDU

		 * density for this node.

 link buffers of this frame to the aggregate */

/*

 * rix - rate index

 * pktlen - total bytes (delims + data + fcs + pads + pad delims)

 * width  - 0 for 20 MHz, 1 for 40 MHz

 * half_gi - to use 4us v/s 3.6 us for symbol time

 find number of symbols: PLCP + data */

 addup duration for legacy/ht training and signal fields */

 4ms is the default (and maximum) duration */

		/* XXX: clamp minimum TX power at 1 for AR9160 since if

		 * max_power is set to 0, frames are transmitted at max

		 * TX power

 set dur_update_en for l-sig computation except for PS-Poll frames */

		/*

		 * Handle RTS threshold for unaggregated HT frames.

 MCS rates */

 legacy rates */

 For AR5416 - RTS cannot be followed by a frame larger than 8K */

 ATH9K_TXDESC_RTSENA and ATH9K_TXDESC_CTSENA are mutually exclusive. */

			/*

			 * mac80211 doesn't handle RTS threshold for HT because

			 * the decision has to be taken based on AMPDU length

			 * and aggregation is done entirely inside ath9k.

			 * Set the RTS/CTS flag for the first subframe based

			 * on the threshold.

				/*

				 * "len" is the size of the entire AMPDU.

	/* update ampdu factor/density, they may have changed. This may happen

	 * in HT IBSS when a beacon with HT-info is received after the station

	 * has already been added.

*******************/

 Queue Management */

*******************/

	/*

	 * Enable interrupts only for EOL and DESC conditions.

	 * We mark tx descriptors to receive a DESC interrupt

	 * when a tx queue gets deep; otherwise waiting for the

	 * EOL to reap descriptors.  Note that this is done to

	 * reduce interrupt load and this only defers reaping

	 * descriptors, never transmitting frames.  Aside from

	 * reducing interrupts this also permits more concurrency.

	 * The only potential downside is if the tx queue backs

	 * up in which case the top half of the kernel may backup

	 * due to a lack of tx descriptors.

	 *

	 * The UAPSD queue is an exception, since we take a desc-

	 * based intr on the EOSP frames.

		/*

		 * NB: don't print a message, this happens

		 * normally on parts with too few tx queues

/*

 * Drain a given TX queue (could be Beacon or Data)

 *

 * This assumes output has been stopped and

 * we do not need to block ath_tx_tasklet.

 Check if any queue remains active */

/* For each acq entry, for each tid, try to schedule packets

 * for transmit until ampdu_depth has reached min Q depth.

**********/

 TX, DMA */

**********/

/*

 * Insert a chain of ath_buf (descriptors) on a txq and

 * assume the descriptors are already chained together by caller.

	/*

	 * Insert the frame on the outbound list and

	 * pass it on to the hardware.

	/*

	 * We check if Short Preamble is needed for the CTS rate by

	 * checking the BSS's global flag.

	 * But for the rate series, IEEE80211_TX_RC_USE_SHORT_PREAMBLE is used.

/*

 * Assign a descriptor (and sequence number if necessary,

 * and map buffer for DMA. Frees skb on error

 NOTE:  sta can be NULL according to net/mac80211.h */

 Add the padding after the header if this is not already done */

 Upon failure caller should free skb */

	/*

	 * At this point, the vif, hw_key and sta pointers in the tx control

	 * info are no longer valid (overwritten by the ath_frame_info data.

****************/

 TX Completion */

****************/

			/*

			 * Remove MAC header padding before giving the frame back to

			 * mac80211.

	/* At this point, skb (bf->bf_mpdu) is consumed...make sure we don't

	 * accidentally reference it later.

	/*

	 * Return the list of ath_buf of this mpdu to free queue

		/*

		 * If an underrun error is seen assume it as an excessive

		 * retry only if max frame trigger level has been reached

		 * (2 KB for single stream, and 4 KB for dual stream).

		 * Adjust the long retry as if the frame was tried

		 * hw->max_rate_tries times to affect how rate control updates

		 * PER for the failed rate.

		 * In case of congestion on the bus penalizing this type of

		 * underruns should help hardware actually transmit new frames

		 * successfully by eventually preferring slower rates.

		 * This itself should also alleviate congestion on the bus.

 we report airtime in ath_tx_count_airtime(), don't report twice */

		/*

		 * There is a race condition that a BH gets scheduled

		 * after sw writes TxE and before hw re-load the last

		 * descriptor to get the newly chained one.

		 * Software must keep the last DONE descriptor as a

		 * holding descriptor - software does so by marking

		 * it with the STALE flag.

		/*

		 * Remove ath_buf's of the same transmit unit from txq,

		 * however leave the last descriptor back as the holding

		 * descriptor for hw.

 Process beacon completions separately */

****************/

 Init, Cleanup */

****************/

 just one multicast ath_atx_tid */

 just one multicast ath_atx_tid */

 CONFIG_ATH9K_TX99 */

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * RTT (Radio Retention Table) hardware implementation information

 *

 * There is an internal table (i.e. the rtt) for each chain (or bank).

 * Each table contains 6 entries and each entry is corresponding to

 * a specific calibration parameter as depicted below.

 *  0~2 - DC offset DAC calibration: loop, low, high (offsetI/Q_...)

 *  3   - Filter cal (filterfc)

 *  4   - RX gain settings

 *  5   - Peak detector offset calibration (agc_caldac)

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * Scale: wlan_airtime is in ms, aggr_limit is in 0.25 ms.

	 * When wlan_airtime is less than 4ms, aggregation limit has to be

	 * adjusted half of wlan_airtime to ensure that the aggregation can fit

	 * without collision with BT traffic.

			/*

			 * For single PAN/FTP profile, allocate 35% for BT

			 * to improve WLAN throughput.

 RFCOMM, A2DP, HID, PAN */

		/*

		 * Two MCI interrupts are generated while connecting to

		 * headset and A2DP profile, but only one MCI interrupt

		 * is generated with last added profile type while disconnecting

		 * both profiles.

		 * So while adding second profile type decrement

		 * the first one.

 Link status type are not handled */

		/*

		 * The following REMOTE_RESET and SYS_WAKING used to sent

		 * only when BT wake up. Now they are always sent, as a

		 * recovery method to reset BT MCI's RX alignment.

		/*

		 * always do this for recovery and 2G/5G toggling and LNA_TRANS

			/*

			 * The first dword is timer.

			 * The real data starts from 2nd dword.

 adjust side band */

 update and send wlan channels info to BT */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Select calibration to run */

		/*

		 * Start calibration with

		 * 2^(INIT_IQCAL_LOG_COUNT_MAX+1) samples

 Kick-off cal */

/*

 * Generic calibration routine.

 * Recalibrate the lower PHY chips to account for temperature/environment

 * changes.

 Calibration in progress. */

 Check to see if it has finished. */

		/*

		* Accumulate cal measures for active chains

			/*

			* Process accumulated data

 Calibration has finished. */

			/*

			 * Set-up collection of another sub-sample until we

			 * get desired number

 If current cal is marked invalid in channel, kick it off */

	/*

	 * For given calibration:

	 * 1. Call generic cal routine

	 * 2. When this cal is done (isCalDone) if we have more cals waiting

	 *    (eg after reset), mask this to upper layers by not propagating

	 *    isCalDone if it is set to TRUE.

	 *    Instead, change isCalDone to FALSE and setup the waiting cal(s)

	 *    to be run.

	/*

	 * Do NF cal only at longer intervals. Get the value from

	 * the previous NF cal and update history buffer.

		/*

		 * Load the NF from history buffer of the current channel.

		 * NF is slow time-variant, so it is OK to use a historical

		 * value.

 start NF calibration, without updating BB NF register */

 Accumulate IQ cal measures for active chains */

 Force bounds on iCoff */

 Negate iCoff if iqCorrNeg == 0 */

 Force bounds on qCoff */

	/*

	 * Clear offset and IQ calibration, run AGC cal.

	/*

	 * Allow only offset calibration and disable the others

	 * (Carrier Leak calibration, TX Filter calibration and

	 *  Peak Detector offset calibration).

		/*

		 * High gain.

		/*

		 * Low gain.

		/*

		 * Loopback.

	/*

	 * We don't need to check txiqcal_done here since it is always

	 * set for AR9550.

/*

 * solve 4x4 linear equation used in loopback iq cal.

 mag mismatch, tx */

 phs mismatch, tx */

 mag mismatch, rx */

 phs mismatch, rx */

 w/o analog phase shift */

 w/o analog phase shift */

 w/  analog phase shift */

 w/  analog phase shift */

	/*

	 * force sin^2 + cos^2 = 1;

	 * find magnitude by approximation

 normalization sin and cos by mag */

 calculate IQ mismatch */

 calculate and quantize Tx IQ correction factor */

 calculate and quantize Rx IQ correction factors */

 find min/max mismatch across all calibrated gains */

 find average (exclude max abs value) */

	/*

	 * finding mean magnitude/phase if possible, otherwise

	 * just use the last value as the mean

 detect outlier */

 Load the average of 2 passes */

		/*

		 * Skip normal outlier detection for AR9550.

 detect outlier only if nmeasurement > 1 */

 Detect magnitude outlier */

 Detect phase outlier */

 32 bits */

 16 bits */

	/*

	 * Turn off LNA/SW.

	/*

	 * Turn off RXON.

	/*

	 * Turn on AGC for cal.

	/*

	 * Turn on LNA.

	/*

	 * Turn off RXON.

	/*

	 * Turn off peak detect calibration.

 Initialize list pointers */

 Initialize current pointer to first element in list */

 Use chip chainmask only for calibration */

 Do Tx IQ Calibration */

	/*

	 * For AR9485 or later chips, TxIQ cal runs as part of

	 * AGC calibration

 Disable BB_active */

 Calibrate the AGC */

 Poll for offset calibration complete */

 Revert chainmask to runtime parameters */

 Use chip chainmask only for calibration */

 Do Tx IQ Calibration */

	/*

	 * For AR9485 or later chips, TxIQ cal runs as part of

	 * AGC calibration. Specifically, AR9550 in SoC chips.

	/*

	 * In the SoC family, this will run for AR9300, AR9331 and AR9340.

		/*

		 * For non-AR9550 chips, we just trigger AGC calibration

		 * in the HW, poll for completion and then process

		 * the results.

		 *

		 * For AR955x, we run it multiple times and use

		 * median IQ correction.

 Revert chainmask to runtime parameters */

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * 3 bits for modalHeader5G.papdRateMaskHt20

	 * is used for sub-band disabling of PAPRD.

	 * 5G band is divided into 3 sub-bands -- upper,

	 * middle, lower.

	 * if bit 30 of modalHeader5G.papdRateMaskHt20 is set

	 * -- disable PAPRD for upper band 5GHz

	 * if bit 29 of modalHeader5G.papdRateMaskHt20 is set

	 * -- disable PAPRD for middle band 5GHz

	 * if bit 28 of modalHeader5G.papdRateMaskHt20 is set

	 * -- disable PAPRD for lower band 5GHz

 disregard any bin that contains <= 16 samples */

 number of samples */

 sum(tx amplitude) */

 sum(rx amplitude distance to lower bin edge) */

 sum(angles) */

	/*

	 * Find average theta of first 5 bin and all of those to same value.

	 * Curve is linear at that range.

 Set values at origin */

 low signal gain */

 prevent division by zero */

 prevent division by zero */

 pa_table[4] is calculated from PA_angle for i=5 */

 val AR_PHY_PAPRD_CTRL1_PAPRD_POWER_AT_AM2AM_CAL correct? */

	/*

	 * agc2_pwr range should not be less than 'IDEAL_AGC2_PWR_CHANGE'

	 * when the training is completely done, otherwise retraining is

	 * done to make sure the value is in ideal range

/*

 * Copyright (c) 2014, Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/**

 * ath_dynack_get_max_to - set max timeout according to channel width

 * @ah: ath hw

 *

/*

 * ath_dynack_ewma - EWMA (Exponentially Weighted Moving Average) calculation

/**

 * ath_dynack_get_sifs - get sifs time based on phy used

 * @ah: ath hw

 * @phy: phy used

 *

/**

 * ath_dynack_bssidmask - filter out ACK frames based on BSSID mask

 * @ah: ath hw

 * @mac: receiver address

/**

 * ath_dynack_set_timeout - configure timeouts/slottime registers

 * @ah: ath hw

 * @to: timeout value

 *

/**

 * ath_dynack_compute_ackto - compute ACK timeout as the maximum STA timeout

 * @ah: ath hw

 *

 * should be called while holding qlock

/**

 * ath_dynack_compute_to - compute STA ACK timeout

 * @ah: ath hw

 *

 * should be called while holding qlock

/**

 * ath_dynack_sample_tx_ts - status timestamp sampling method

 * @ah: ath hw

 * @skb: socket buffer

 * @ts: tx status info

 * @sta: station pointer

 *

 late ACK */

	/* ether_addr_copy() gives a false warning on gcc-10 so use memcpy()

	 * https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97490

/**

 * ath_dynack_sample_ack_ts - ACK timestamp sampling method

 * @ah: ath hw

 * @skb: socket buffer

 * @ts: rx timestamp

 *

/**

 * ath_dynack_node_init - init ath_node related info

 * @ah: ath hw

 * @an: ath node

 *

/**

 * ath_dynack_node_deinit - deinit ath_node related info

 * @ah: ath hw

 * @an: ath node

 *

/**

 * ath_dynack_reset - reset dynack processing

 * @ah: ath hw

 *

 init acktimeout */

/**

 * ath_dynack_init - init dynack data structure

 * @ah: ath hw

 *

 ackto = slottime + sifs + air delay */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 avoid rearming hw_reset_work on shutdown */

 read accesses f_pos */

 Ethtool support for get-stats */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 General hardware code for the A5008/AR9001/AR9002 hadware families */

 Common for AR5416, AR913x, AR9160 */

 Common for AR913x, AR9160 */

 iniAddac needs to be modified for these chips */

 override CLKDRV value */

 txgain table */

/*

 * Helper for ASPM support.

 *

 * Disable PLL when in L0s as well as receiver clock when in L1.

 * This power saving option must be enabled through the SerDes.

 *

 * Programming the SerDes must go through the same 288 bit serial shift

 * register as the other analog registers.  Hence the 9 writes.

 Nothing to do on restore for 11N */

 !restore */) {

			/*

			 * AR9280 2.0 or later chips use SerDes values from the

			 * initvals.h initialized depending on chipset during

			 * __ath9k_hw_init()

 RX shut off when elecidle is asserted */

			/*

			 * Ignore ah->ah_config.pcie_clock_req setting for

			 * pre-AR9280 11n

 Load the new settings */

 clear bit 19 to disable L1 */

		/*

		 * Set PCIe workaround bits

		 * In AR9280 and AR9285, bit 14 in WA register (disable L1)

		 * should only  be set when device enters D3 and be

		 * cleared when device comes back to D0.

			/*

			 * Disable bit 6 and 7 before entering D3 to

			 * prevent system hang.

				/*

				 * For AR9280 chips, bit 22 of 0x4004

				 * needs to be set.

 WAR for ASPM system hang */

 set bit 19 to allow forcing of pcie core into L1 state */

 Sets up the AR5008/AR9001/AR9002 hardware familiy callbacks */

/*

 * Copyright (c) 2009-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Module for common driver code between ath9k and ath9k_htc

 Assumes you've already done the endian to CPU conversion */

	/*

	 * Key miss events are only relevant for pairwise keys where the

	 * descriptor does contain a valid key index. This has been observed

	 * mostly with CCMP encryption.

	/*

	 * The rx_stats->rs_status will not be set until the end of the

	 * chained descriptors so it can be ignored if rs_more is set. The

	 * rs_more will be false at the last element of the chained

	 * descriptors.

		/*

		 * Reject error frames with the exception of

		 * decryption and MIC failures. For monitor mode,

		 * we also ignore the CRC error.

	/*

	 * For unicast frames the MIC error bit can have false positives,

	 * so all MIC error reports need to be validated in software.

	 * False negatives are not common, so skip software verification

	 * if the hardware considers the MIC valid.

 see if any padding is done by the hw and remove it */

	/* The MAC header is padded to have 32-bit boundary if the

	 * packet payload is non-zero. The general calculation for

	 * padsize would take into account odd header lengths:

	 * padsize = (4 - padpos % 4) % 4; However, since only

	 * even-length headers are used, padding can only be 0 or 2

	 * bytes and we can optimize this a bit. In addition, we must

	 * not try to remove padding from short control frames that do

 Use software decrypt for management frames. */

 HT rate */

	/*

	 * RSSI is not available for subframes in an A-MPDU.

	/*

	 * Check if the RSSI for the last subframe in an A-MPDU

	 * or an unaggregated frame is valid.

	/*

	 * Update Beacon RSSI, this is used by ANI.

/*

 * Update internal channel flags.

/*

 * Get the internal channel reference.

 read back in case value is clamped */

 Get the hardware key cache size. */

	/*

	 * Check whether the separate key cache entries

	 * are required to handle both tx+rx MIC keys.

	 * With split mic keys the number of stations is limited

	 * to 27 otherwise 59.

	/*

	 * Reset the key cache since some parts do not

	 * reset the contents on initial power up.

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 * Copyright (c) 2011 Neratec Solutions AG

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 magic number to prevent accidental reset of DFS statistics */

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Check if there has been a timeout. */

 WMI command response */

 check if wmi stopped flag is set */

 record the rsp buffer and length */

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*****************/

     BTCOEX     */

*****************/

/*

 * Detects if there is any priority bt traffic

 Detect if colocated bt started scanning */

/*

 * This is the master bt coex work which runs for every

 * 45ms, bt traffic will be given priority during 55% of this

 * period while wlan gets remaining 45%

/*

 * Work to time slice between wlan and bt traffic and

 * configure weight registers

/*

 * (Re)start btcoex work

/*

 * Cancel btcoex and bt duty cycle work.

	/*

	 * Check if BTCOEX is globally disabled.

 CONFIG_ATH9K_BTCOEX_SUPPORT */

******/

 LED */

******/

 Not locked, but it's just a tiny green light..*/

 Configure gpio 1 for output */

 LED off, active low */

******************/

	Rfkill	   */

******************/

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Enable fixup for AR_AN_TOP2 if necessary */

	/* Prior to writing the boundaries or the pdadc vs. power table

	 * into the chip registers the default starting point on the pdadc

	 * vs. power table needs to be checked and the curve boundaries

	 * adjusted accordingly

 get the difference in dB */

 get the number of half dB steps */

			/* change the original gain boundary settings

			 * by the number of half dB steps

		/* Because of a hardware limitation, ensure the gain boundary

		 * is not larger than (63 - overlap)

	/* If this is a board that has a pwrTableOffset that differs from

	 * the default AR5416_PWR_TABLE_OFFSET_DB then the start of the

	 * pdadc vs pwr table needs to be adjusted prior to writing to the

	 * chip.

 shift the table to start at the new offset */

 fill the back of the table */

 TPC initializations */

 Enable TPC */

 Disable TPC */

/*

 * Copyright (c) 2014 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/* Set/change channels.  If the channel is really being changed, it's done

 * by reseting the chip.  To accomplish this we must first cleanup any pending

 * DMA, then restart stuff.

 update survey stats for the old channel before switching */

	/* If the operating channel changes, change the survey in-use flags

	 * along with it.

	 * Reset the survey data for the new channel, unless we're switching

	 * back to the operating channel from an off-channel operation.

	/* The most recent snapshot of channel->noisefloor for the old

	 * channel is only available after the hardware reset. Copy it to

	 * the survey stats now.

	/* Enable radar pulse detection if on a DFS channel. Spectral

	 * scanning and radar detection can not be used concurrently.

 perform spectral scan if requested. */

 200ms */

************/

 Utilities */

************/

*********************************************************/

 Functions to handle the channel context state machine. */

*********************************************************/

		/*

		 * There is no need to iterate over the

		 * active/assigned channel contexts if

		 * the current context is offchannel.

	/* Adjust the TSF time of the AP chanctx to keep its beacons

	 * at half beacon interval offset relative to the STA chanctx.

 Ignore stale data or spurious timestamps */

/* Configure the TSF based hardware timer for a channel switch.

 * Also set up backup software timer, in case the gen timer fails.

 * This could be caused by a hardware reset.

	/*

	 * Clear the extend_absence flag if it had been

	 * set during the previous beacon transmission,

	 * since we need to revert to the normal NoA

	 * schedule.

	/* If at least two consecutive beacons were missed on the STA

	 * chanctx, stay on the STA channel for one extra beacon period,

	 * to resync the timer properly.

	/*

	 * When multiple contexts are active, the NoA

	 * has to be recalculated and advertised after

	 * an offchannel operation.

 if the timer missed its window, use the next interval */

		/*

		 * When a context becomes inactive, for example,

		 * disassociation of a station context, the NoA

		 * attribute needs to be removed from subsequent

		 * beacons.

 defer channel switch by a quarter beacon interval */

		/*

		 * If an offchannel switch is scheduled to happen after

		 * a beacon transmission, update the NoA with one-shot

		 * values and increment the index.

		/*

		 * If a mgd_prepare_tx() has been called by mac80211,

		 * a one-shot NoA needs to be sent. This can happen

		 * with one or more active channel contexts - in both

		 * cases, a new NoA schedule has to be advertised.

 Prevent wrap-around issues */

		/*

		 * If multiple contexts are active, start periodic

		 * NoA and increment the index for the first

		 * announcement.

		/* TSF time might have been updated by the incoming beacon,

		 * need update the channel switch timer to reflect the change.

		/* If this is a station chanctx, stay active for a half

		 * beacon period (minus channel switch time)

 ~110 ms */

 ~60 ms */

 get first active channel context */

		/*

		 * A reset will ensure that all queues are woken up,

		 * so there is no need to awaken them again.

*******************/

 Queue management */

*******************/

****************/

 P2P Powersave */

****************/

	/*

	 * Channel switch in multi-channel mode is deferred

	 * by a quarter beacon interval when handling

	 * ATH_CHANCTX_EVENT_BEACON_PREPARE, so the P2P-GO

	 * interface is guaranteed to be discoverable

	 * for that duration after a TBTT.

 type */

 length */

 WFA OUI */

 P2P subtype */

 Notice of Absence */

 LSB of little-endian len */

 MSB of little-endian len */

 CONFIG_ATH9K_CHANNEL_CONTEXT */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * This sets up the beacon timers according to the timestamp of the last

 * received beacon and the current TSF, configures PCF and DTIM

 * handling, programs the sleep registers so the hardware will wakeup in

 * time to receive beacons, and configures the beacon miss handling so

 * we'll receive a BMISS interrupt when we stop seeing beacons from the AP

 * we've associated with.

 No need to configure beacon if we are not associated */

	/*

	 * Setup dtim parameters according to

	 * last beacon we received (which may be none).

	/*

	 * Pull nexttbtt forward to reflect the current

	 * TSF and calculate dtim state for the result.

	/*

	 * Calculate the number of consecutive beacons to miss* before taking

	 * a BMISS interrupt. The configuration is specified in TU so we only

	 * need calculate based	on the beacon interval.  Note that we clamp the

	 * result to at most 15 beacons.

	/*

	 * Calculate sleep duration. The configuration is given in ms.

	 * We ensure a multiple of the beacon period is used. Also, if the sleep

	 * duration is greater than the DTIM period then it makes senses

	 * to make it a multiple of that.

	 *

	 * XXX fixed at 100ms

 TSF out of range threshold fixed at 1 second */

/*

 * For multi-bss ap support beacons are either staggered evenly over N slots or

 * burst together.  For the former arrange for the SWBA to be delivered for each

 * slot. Slots that are not occupied will generate nothing.

 NB: the beacon interval is kept internally in TU's */

/*

 * Copyright (c) 2013 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * Create Dissassociate / Deauthenticate packet filter

	 *

	 *     2 bytes        2 byte    6 bytes   6 bytes  6 bytes

	 *  +--------------+----------+---------+--------+--------+----

	 *  + Frame Control+ Duration +   DA    +  SA    +  BSSID +

	 *  +--------------+----------+---------+--------+--------+----

	 *

	 * The above is the management frame format for disassociate/

	 * deauthenticate pattern, from this we need to match the first byte

	 * of 'Frame Control' and DA, SA, and BSSID fields

	 * (skipping 2nd byte of FC and Duration feild.

	 *

	 * Disassociate pattern

	 * --------------------

	 * Frame control = 00 00 1010

	 * DA, SA, BSSID = x:x:x:x:x:x

	 * Pattern will be A0000000 | x:x:x:x:x:x | x:x:x:x:x:x

	 *			    | x:x:x:x:x:x  -- 22 bytes

	 *

	 * Deauthenticate pattern

	 * ----------------------

	 * Frame control = 00 00 1100

	 * DA, SA, BSSID = x:x:x:x:x:x

	 * Pattern will be C0000000 | x:x:x:x:x:x | x:x:x:x:x:x

	 *			    | x:x:x:x:x:x  -- 22 bytes

 Fill out the mask with all FF's */

 copy the first byte of frame control field */

 skip 2nd byte of frame control and Duration field */

	/*

	 * need not match the destination mac address, it can be a broadcast

	 * mac address or an unicast to this station

 copy the source mac address */

 copy the bssid, its same as the source mac address */

 Create Disassociate pattern mask */

	/*

	 * for de-authenticate pattern, only the first byte of the frame

	 * control field gets changed from 0xA0 to 0xC0

	/*

	 * Enable wake up on recieving disassoc/deauth

	 * frame by default.

	/*

	 * To avoid false wake, we enable beacon miss interrupt only

	 * when we go to sleep. We save the current interrupt mask

	 * so we can restore it after the system wakes up

	/*

	 * we can now sync irq and kill any running tasklets, since we already

	 * disabled interrupts and not holding a spin lock

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 General hardware code for the AR9003 hadware family */

/*

 * The AR9003 family uses a new INI format (pre, core, post

 * arrays per subsystem). This provides support for the

 * AR9003 2.2 chipsets.

 mac */

 bb */

 radio */

 soc */

 rx/tx gain */

 Japan 2484 Mhz CCK */

 additional clock settings */

 mac */

 bb */

 radio */

 soc */

 rx/tx gain */

 Japan 2484 Mhz CCK */

 additional clock settings */

 mac */

 bb */

 radio */

 soc */

 rx/tx gain */

 mac */

 bb */

 radio */

 soc */

 rx/tx gain */

 Japan 2484 Mhz CCK */

 Awake -> Sleep Setting */

 Sleep -> Awake Setting */

 Awake -> Sleep Setting */

 Sleep -> Awake Setting */

 Fast clock modal settings */

 mac */

 bb */

 radio */

 soc */

 rx/tx gain */

 Fast clock modal settings */

 mac */

 bb */

 radio */

 soc */

 rx/tx gain */

 Awake -> Sleep Setting */

 Sleep -> Awake Setting */

 Awake -> Sleep Setting */

 Sleep -> Awake Setting */

 mac */

 bb */

 radio */

 soc */

 rx/tx gain */

 Load PCIE SERDES settings from INI */

 Awake Setting */

 Sleep Setting */

 Fast clock modal settings */

 set gain table pointers according to values read from the eeprom */

/*

 * Helper for ASPM support.

 *

 * Disable PLL when in L0s as well as receiver clock when in L1.

 * This power saving option must be enabled through the SerDes.

 *

 * Programming the SerDes must go through the same 288 bit serial shift

 * register as the other analog registers.  Hence the 9 writes.

	/*

	 * Increase L1 Entry Latency. Some WB222 boards don't have

	 * this change in eeprom/OTP.

	 *

 Nothing to do on restore for 11N */

 !restore */) {

 set bit 19 to allow forcing of pcie core into L1 state */

	/*

	 * Configure PCIE after Ini init. SERDES values now come from ini file

	 * This enables PCIe low power mode.

	/*

	 * All chips support detection of BB/MAC hangs.

	/*

	 * This is not required for AR9580 1.0

/*

 * MAC HW hang check

 * =================

 *

 * Signature: dcu_chain_state is 0x6 and dcu_complete_state is 0x1.

 *

 * The state of each DCU chain (mapped to TX queues) is available from these

 * DMA debug registers:

 *

 * Chain 0 state : Bits 4:0   of AR_DMADBG_4

 * Chain 1 state : Bits 9:5   of AR_DMADBG_4

 * Chain 2 state : Bits 14:10 of AR_DMADBG_4

 * Chain 3 state : Bits 19:15 of AR_DMADBG_4

 * Chain 4 state : Bits 24:20 of AR_DMADBG_4

 * Chain 5 state : Bits 29:25 of AR_DMADBG_4

 * Chain 6 state : Bits 4:0   of AR_DMADBG_5

 * Chain 7 state : Bits 9:5   of AR_DMADBG_5

 * Chain 8 state : Bits 14:10 of AR_DMADBG_5

 * Chain 9 state : Bits 19:15 of AR_DMADBG_5

 *

 * The DCU chain state "0x6" means "WAIT_FRDONE" - wait for TX frame to be done.

 Sets up the AR9003 hardware familiy callbacks */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * Reduce scaled Power by number of chains active

	 * to get the per chain tx power level.

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

************/

 Utilities */

************/

 HACK Alert: Use 11NG for 2.4, use 11NA for 5 */

	/* The chip wakes up after receiving the first beacon

	   while network sleep is enabled. For the driver to

	   be in sync with the hw, set the chip to awake and

	   only then set it to sleep.

	/*

	 * Pick the MAC address of the first interface as the new hardware

	 * MAC address. The hardware will use it together with the BSSID mask

	 * when matching addresses.

 Get list of all active MAC addresses */

 perform spectral scan if requested. */

/*

 * Monitor mode handling is a tad complicated because the firmware requires

 * an interface to be created exclusively, while mac80211 doesn't associate

 * an interface with the mode.

 *

 * So, for now, only one monitor interface can be configured.

	/*

	 * Add an interface.

	/*

	 * Assign the monitor interface index as a special case here.

	 * This is needed when the interface is brought down.

	/*

	 * Set the hardware mode to monitor only if there are no

	 * other interfaces.

	/*

	 * Associate a station with the interface for packet injection.

	/*

	 * Remove the interface from the target.

******/

 ANI */

******/

 Only calibrate if awake */

 Long calibration runs independently of short calibration. */

	/*

	 * Short calibration applies only while caldone

	 * is false or -ETIMEDOUT

 Verify whether we must check ANI */

 Skip all processing if there's nothing to do. */

 Call ANI routine if necessary */

 Perform calibration if necessary */

	/*

	* Set timer interval based on previous results.

	* The interval must be the shortest necessary to satisfy ANI,

	* short calibration and long calibration.

	/*

	 * Short calibration applies only while caldone

	 * is false or -ETIMEDOUT

*********************/

 mac80211 Callbacks */

*********************/

 Add the padding after the header if this is not already done */

 Ensure that HW is awake before flushing RX */

 setup initial channel */

 Cancel all the running timers/work .. */

 Remove a monitor interface if it's present. */

 close enough */

 Index starts from zero on the target */

	/*

	 * We need a node in target to tx mgmt frames

	 * before association.

	/*

	 * Stop ANI only if there are no associated station interfaces.

	/*

	 * Monitor interface should be added before

	 * IEEE80211_CONF_CHANGE_CHANNEL is handled.

		/*

		 * For now, disable hw crypto for the RSN IBSS group keys. This

		 * could be optimized in the future to use a modified key cache

		 * design to support per-STA RX GTK, but until that gets

		 * implemented, use of software crypto for group addressed

		 * frames is a acceptable to allow RSN IBSS to be used.

 push IV and Michael MIC generation to stack */

		/*

		 * Disable SWBA interrupt only if there are no

		 * concurrent AP/mesh or IBSS interfaces.

		/*

		 * Reset the HW TSF for the first AP or mesh interface.

			/*

			 * Defer update, so that connected stations can adjust

			 * their settings at the same time.

			 * See beacon.c for more details

/*

 * Currently, this is used only for selecting the minimum rate

 * for management frames, rate selection for data frames remain

 * unaffected.

	/*

	 * This can be done since all the 3 EEPROM families have the

	 * same base header upto a certain point, and we are interested in

	 * the data only upto that point.

 mac80211 does not support CSA in multi-if cases (yet) */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Common calibration code */

			/*

			 * Normally we limit the average noise floor by the

			 * hardware specific maximum here. However if we have

			 * encountered stuck beacons because of interference,

			 * we bypass this limit here in order to better deal

			 * with our environment.

	/*

	 * If the noise floor seems normal for all chains, assume that

	 * there is no significant interference in the environment anymore.

	 * Re-enable the enforcement of the NF maximum again.

 This is done for the currently configured channel */

 Try to get calibrated noise floor value */

	/*

	 * stop NF cal if ongoing to ensure NF load completes immediately

	 * (or after end rx/tx frame if ongoing)

	/*

	 * Load software filtered NF value into baseband internal minCCApwr

	 * variable.

	/*

	 * Wait for load to complete, should be fast, a few 10s of us.

	 * The max delay was changed from an original 250us to 22.2 msec.

	 * This would increase timeout to the longest possible frame

	 * (11n max length 22.1 msec)

	/*

	 * Restart NF so it can continue.

	/*

	 * We timed out waiting for the noisefloor to load, probably due to an

	 * in-progress rx. Simply return here and allow the load plenty of time

	 * to complete before the next calibration interval.  We need to avoid

	 * trying to load -50 (which happens below) while the previous load is

	 * still in progress as this can cause rx deafness. Instead by returning

	 * here, the baseband nf cal will just be capped by our present

	 * noisefloor until the next calibration timer.

	/*

	 * Restore maxCCAPower register parameter again so that we're not capped

	 * by the median we just loaded.  This will be initial (and max) value

	 * of next noise floor calibration the baseband does.

	/*

	 * If beacons are stuck, the most likely cause is interference.

	 * Triggering a noise floor calibration at this point helps the

	 * hardware adapt to a noisy environment much faster.

	 * To ensure that we recover from stuck beacons quickly, let

	 * the baseband update the internal NF value itself, similar to

	 * what is being done after a full reset.

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Setup and link descriptors.

 *

 * 11N: we can no longer afford to self link the last descriptor.

 * MAC acknowledges BA status as long as it copies frames to host

 * buffer (or rx fifo). This can incorrectly acknowledge packets

 * to a sender if last desc is self-linked.

 link to null */

 virtual addr of the beginning of the buffer. */

	/*

	 * setup rx descriptors. The rx_bufsize here tells the hardware

	 * how much data it can DMA to us and that we are prepared

	 * to process

 XXX block beacon interrupts */

 configure rx filter */

 configure bssid mask */

 configure operational mode */

 calculate and install multicast filter */

 Initialize rx descriptors */

/*

 * Calculate the receive filter according to the

 * operating mode and state:

 *

 * o always accept unicast, broadcast, and multicast traffic

 * o maintain current state of phy error reception (the hal

 *   may enable phy error frames for noise immunity work)

 * o probe request frames are accepted only when operating in

 *   hostap, adhoc, or monitor modes

 * o enable promiscuous mode according to the interface state

 * o accept beacons:

 *   - when operating in adhoc mode so the 802.11 layer creates

 *     node table entries for peers,

 *   - when operating in station mode for collecting rssi data when

 *     the station is otherwise quiet, or

 *   - when operating as a repeater so we see repeater-sta beacons

 *   - when scanning

 if operating on a DFS channel, enable radar pulse detection */

 This is needed for older chips */

 We could have deleted elements so the list may be empty now */

 Check whether the Beacon frame has DTIM indicating buffered bc/mc */

		/*

		 * Remain awake waiting for buffered broadcast/multicast

		 * frames. If the last broadcast/multicast frame is not

		 * received properly, the next beacon frame will work as

		 * a backup trigger for returning into NETWORK SLEEP state,

		 * so we are waiting for it as well.

		/*

		 * This can happen if a broadcast frame is dropped or the AP

		 * fails to send a frame indicating that all CAB frames have

		 * been delivered.

 Process Beacon and CAB receive in PS state */

		/*

		 * No more broadcast/multicast frames to be received at this

		 * point.

let device gain the buffer again*/

 corrupt descriptor, skip this one and the following one */

	/*

	 * Must provide the virtual address of the current

	 * descriptor, the physical address, and the virtual

	 * address of the next descriptor in the h/w chain.

	 * This allows the HAL to look ahead to see if the

	 * hardware is done with a descriptor by checking the

	 * done bit in the following descriptor and the address

	 * of the current descriptor the DMA engine is working

	 * on.  All this is necessary because of our use of

	 * a self-linked list to avoid rx overruns.

		/*

		 * On some hardware the descriptor status words could

		 * get corrupted, including the done bit. Because of

		 * this, check if the next descriptor's done bit is

		 * set or not.

		 *

		 * If the next descriptor's done bit is set, the current

		 * descriptor has been corrupted. Force s/w to discard

		 * this descriptor and continue...

		/*

		 * Re-check previous descriptor, in case it has been filled

		 * in the mean time.

			/*

			 * mark descriptor as zero-length and set the 'more'

			 * flag to ensure that both buffers get discarded

	/*

	 * Synchronize the DMA transfer with CPU before

	 * 1. accessing the frame

	 * 2. requeueing the same buffer to h/w

/*

 * For Decrypt or Demic errors, we only mark packet status here and always push

 * up the frame up to let mac80211 handle the actual error case, be it no

 * decryption key or real decryption error. This let us keep statistics there.

	/*

	 * Discard corrupt descriptors which are marked in

	 * ath_get_next_rx_buf().

	/*

	 * Discard zero-length packets and packets smaller than an ACK

	 * which are not PHY_ERROR (short radar pulses have a length of 3)

	/*

	 * rs_status follows rs_datalen so if rs_datalen is too large

	 * we can take a hint that hardware corrupted it, so ignore

	 * those frames.

 Only use status info from the last fragment */

	/*

	 * Return immediately if the RX descriptor has been marked

	 * as corrupt based on the various error bits.

	 *

	 * This is different from the other corrupt descriptor

	 * condition handled above.

	/*

	 * Process PHY errors and return so that the packet

	 * can be dropped.

		/*

		 * DFS and spectral are mutually exclusive

		 *

		 * Since some chips use PHYERR_RADAR as indication for both, we

		 * need to double check which feature is enabled to prevent

		 * feeding spectral or dfs-detector with wrong frames.

	/*

	 * everything but the rate is checked here, the rate check is done

	 * separately to avoid doing two lookups for a rate for each frame.

	/*

	 * This shouldn't happen, but have a safety check anyway.

		/*

		 * No valid hardware bitrate found -- we should not get here

		 * because hardware has already validated this frame as OK.

/*

 * Run the LNA combining algorithm only in these cases:

 *

 * Standalone WLAN cards with both LNA/Antenna diversity

 * enabled in the EEPROM.

 *

 * WLAN+BT cards which are in the supported card list

 * in ath_pci_id_table and the user has loaded the

 * driver with "bt_ant_diversity" set to true.

	/*

	 * Change the default rx antenna if rx diversity

	 * chooses the other antenna 3 times in a row.

 MCS rates */

		/*

		 * Take frame header from the first fragment and RX status from

		 * the last one.

		/* Ensure we always have an skb to requeue once we are done

		/* If there is no memory we ignore the current RX'd frame,

		 * tell hardware it can give us a new frame using the old

		 * skb and put it at the tail of the sc->rx.rxbuf list for

 We will now give hardware our shiny new allocated skb */

 Unmap the frame */

			/*

			 * rs_more indicates chained descriptors which can be

			 * used to link buffers together for a sort of

			 * scatter-gather operation.

 too many fragments - cannot handle frame */

/*

 * Copyright (c) 2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * TX polling - checks if the TX engine is stuck somewhere

 * and issues a chip reset if so.

/*

 * Checks if the BB/MAC is hung.

/*

 * PLL-WAR for AR9485/AR9340

	/*

	 * ensure that the PLL WAR is executed only

	 * after the STA is associated (or) if the

	 * beaconing had started in interfaces that

	 * uses beacons.

/*

 * PA Pre-distortion.

/*

 *  ANI performs periodic noise floor calibration

 *  that is used to adjust and optimize the chip performance.  This

 *  takes environmental changes (location, temperature) into account.

 *  When the task is complete, it reschedules itself depending on the

 *  appropriate interval that was calculated.

 Only calibrate if awake */

 Long calibration runs independently of short calibration. */

 Short calibration applies only while caldone is false */

 Verify whether we must check ANI */

 Call ANI routine if necessary */

 Perform calibration if necessary */

	/*

	* Set timer interval based on previous results.

	* The interval must be the shortest necessary to satisfy ANI,

	* short calibration and long calibration.

	/*

	 * Check for the various conditions in which ANI has to

	 * be stopped.

			/*

			 * Disable ANI only when there are no

			 * associated stations.

/*

 * Updates the survey statistics and returns the busy time since last

 * update in %, if the measurement duration was long enough for the

 * result to be useful, -1 otherwise.

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Atheros */

 Atheros */

 Netgear N150 */

 Altai WA1011N-GU */

 Dlink Wireless 150 */

 Azurewave */

 Azurewave */

 IMC Networks */

 Azurewave */

 Azurewave */

 Azurewave */

 Liteon */

 VIA */

 Ubiquiti WifiStation Ext */

 Ubiquiti WifiStation */

 AVM FRITZ!WLAN 11N v2 USB */

 Philips (or NXP) PTA01 */

 AirTies */

 Atheros */

 Verizon */

 Atheros */

 Netgear WNDA3200 */

 SMC Networks */

 Sony UWA-BR100 */

 Buffalo WLI-UV-AG300P */

 Toshiba WLM-20U2 and GN-1080 */

		/*

		 * If the URBs are being flushed, no need to complete

		 * this packet.

		/*

		 * If the URBs are being flushed, no need to add this

		 * URB to the free list.

 Re-initialize the SKB queue */

 Add this TX buffer to the free list */

 Check for pending SKBs */

 TX lock has to be taken */

 Check if a free TX buffer is available */

 Should never be NULL */

 Check if the max queue count has been reached */

 Mgmt/Beacon frames don't use the TX buffer pool */

 Check if AMPDUs have to be sent immediately */

 The pending URBs have to be canceled. */

 Record the buffer pointer */

 Process the command first */

 Allocate URB */

 Allocate buffer */

 Anchor URB */

 Submit URB */

		/*

		 * Drop reference count.

		 * This ensures that the URB is freed when killing them.

 Allocate URB */

 Allocate buffer */

 Anchor URB */

 Submit URB */

		/*

		 * Drop reference count.

		 * This ensures that the URB is freed when killing them.

 Register Write */

 TX */

 RX */

 Register Read */

	/*

	 * Issue FW download complete command to firmware.

 Alloc URBs */

/*

 * If initialization fails or the FW cannot be retrieved,

 * detach the device.

 taken from iwlwifi */

 test for FW 1.3 */

		/* expected fw locations:

		 * - htc_9271.fw   (stable version 1.3, depricated)

		/* expected fw locations:

		 * - ath9k_htc/htc_9271-1.dev.0.fw (development version)

		 * - ath9k_htc/htc_9271-1.4.0.fw   (stable version)

 Proceed with initialization */

/*

 * An exact copy of the function from zd1211rw.

 Find bulk out endpoint */

 USB bulk command block */

 bulk command signature */

 bulk command signature */

 bulk command signature */

 bulk command signature */

 command length */

 SCSI command: START STOP UNIT */

 eject disc */

	/* At this point, the device disconnects and reconnects with the real

	/* If firmware was loaded we should drop it

	/*

	 * The device has to be set to FULLSLEEP mode in case no

	 * interface is up.

 request cached firmware during suspend/resume cycle */

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Ethtool support for get-stats */

/*

 * Copyright (c) 2008-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * 802.11n D2.0 defined values for "Minimum MPDU Start Spacing":

	 *   0 for no restriction

	 *   1 for 1/4 us

	 *   2 for 1/2 us

	 *   3 for 1 us

	 *   4 for 2 us

	 *   5 for 4 us

	 *   6 for 8 us

	 *   7 for 16 us

		/* Our lower layer calculations limit our precision to

	/*

	 * While the hardware is asleep, the cycle counters contain no

	 * useful data. Better clear them now so that they don't mess up

	 * survey data results.

 restore per chanctx TSF timer */

		/*

		 * TSF sync does not look correct; remain awake to sync with

		 * the next Beacon.

 Check for high priority Rx first */

			/*

			 * For EDMA chips, TX completion is enabled for the

			 * beacon queue, so if a beacon has been transmitted

			 * successfully after a GTT interrupt, the GTT counter

			 * gets reset to zero here.

 re-enable hardware interrupt */

	/*

	 * The hardware is not ready/present, don't

	 * touch anything. Note this can happen early

	 * on if the IRQ is shared.

 shared irq, not for us */

	/*

	 * Figure out the reason(s) for the interrupt.  Note

	 * that the hal returns a pseudo-ISR that may include

	 * bits we haven't explicitly enabled so we mask the

	 * value to insure we only process bits we requested.

 NB: clears ISR too */

 discard unasked-for bits */

	/*

	 * If there are no status bits set, then this interrupt was not

	 * for me (should have been caught above).

 Cache the status */

	/*

	 * If a FATAL interrupt is received, we have to reset the chip

	 * immediately.

			/* Clear RxAbort bit so that we can

 turn off every interrupt */

/*

 * This function is called when a HW reset cannot be deferred

 * and has to be immediate.

/*

 * When a HW reset can be deferred, it is added to the

 * hw_reset_work workqueue, but we set ATH_OP_HW_RESET before

 * queueing.

*********************/

 mac80211 callbacks */

*********************/

 Reset SERDES registers */

	/*

	 * The basic interface to setting the hardware in a good

	 * state is ``reset''.  On return the hardware is known to

	 * be powered up and with interrupts disabled.  This must

	 * be followed by initialization of the appropriate bits

	 * and then setup of the interrupt mask.

 Setup our intr mask. */

	/*

	 * Enable GTT interrupts only for AR9003/AR9004 chips

	 * for now.

	/*

	 * Reset key cache to sane defaults (all entries cleared) instead of

	 * semi-random values after suspend/resume.

		/*

		 * mac80211 does not set PM field for normal data frames, so we

		 * need to update that based on the current PS mode.

		/*

		 * We are using PS-Poll and mac80211 can request TX while in

		 * power save mode. Need to wake up hardware for the TX to be

		 * completed and if needed, also for RX of buffered frames.

		/*

		 * The actual restore operation will happen only after

		 * the ps_flags bit is cleared. We are just dropping

		 * the ps_usecount here.

	/*

	 * Cannot tx while the hardware is in full sleep, it first needs a full

	 * chip reset to recover from that

 No more TXQ frames point to this key cache entry, so delete it. */

 Ensure HW is awake when we try to shut it down. */

 prevent tasklets to enable interrupts once we disable them */

	/* make sure h/w will not generate any interrupt

	/* we can now sync irq and kill any running tasklets, since we already

	/* Clear key cache entries explicitly to get rid of any potentially

	 * remaining keys.

 Use the first (configured) interface, but prefering AP interfaces. */

 perm_addr will be used as the p2p device address. */

 Called with sc->mutex held. */

	/*

	 * The hardware will use primary station addr together with the

	 * BSSID mask when matching addresses.

 Called with sc->mutex held. */

 Called with sc->mutex held. */

			/*

			 * The chip needs a reset to properly wake up from

			 * full sleep

	/*

	 * We just prepare to enable PS. We have to wait until our AP has

	 * ACK'd our null data frame to disable RX otherwise we'll ignore

	 * those ACKs and end up retransmitting the same null data frames.

	 * IEEE80211_CONF_CHANGE_PS is only passed by mac80211 for STA mode.

 FIXME: sc->sc_full_reset ? */

		/*

		 * For now, disable hw crypto for the RSN IBSS group keys. This

		 * could be optimized in the future to use a modified key cache

		 * design to support per-STA RX GTK, but until that gets

		 * implemented, use of software crypto for group addressed

		 * frames is a acceptable to allow RSN IBSS to be used.

	/* There may be MPDUs queued for the outgoing PTK key. Flush queues to

	 * make sure these are not send unencrypted or with a wrong (new) key

	/* Delete pending key cache entries if no more frames are pointing to

	 * them in TXQs.

 push IV and Michael MIC generation to stack */

			/* Delay key cache entry deletion until there are no

			 * remaining TXQ frames pointing to this entry.

			/*

			 * Defer update, so that connected stations can adjust

			 * their settings at the same time.

			 * See beacon.c for more details

 Get current TSF either from HW or kernel time. */

		/*

		 * If MCC is active, extend the flush timeout

		 * and wait for the HW/SW queues to become

		 * empty. This needs to be done outside the

		 * sc->mutex lock to allow the channel scheduler

		 * to switch channel contexts.

		 *

		 * The vif queues have been stopped in mac80211,

		 * so there won't be any incoming frames.

 AR9100 runs into calibration issues if not all rx chains are enabled */

		/*

		 * Wait till the GO interface gets a chance

		 * to send out an NoA.

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Firmware can take up to 50ms to get ready, to be safe use 1 second */

 WMI CMD*/

 Beacon */

 CAB */

 UAPSD */

 MGMT */

 DATA BE */

 DATA BK */

 DATA VI */

 DATA VO */

	/*

	 * Setup required credits before initializing HTC.

	 * This is a bit hacky, but, since queuing is done in

	 * the HIF layer, shouldn't matter much.

 Store the register/value */

 If the buffer is full, send it out. */

 Store the register/value */

 If the buffer is full, send it out. */

	/*

	 * Cache line size is used to size and align various

	 * structures used to communicate with the hardware.

 convert to bytes */

 tx_frame_hdr is larger than tx_mgmt_hdr anyway */

	/*

	 * Check if the available FW matches the driver's

	 * required version.

 Bring up device */

 Initialize regulatory */

 Setup TX */

 Setup RX */

 must be initialized before ieee80211_register_hw */

 Register with mac80211 */

 Handle world regulatory */

 Nothing */

 Nothing */

 Check if the device has been yanked out. */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

 connect to control service */

	/*

	 * Prefetch enough data to satisfy target

	 * classification engine.

	 * This is for LL chips. HL chips will probably

	 * transfer all frame in the tx fragment.

 802.11 + qos + ht */

 802.1q */

 llc snap */

 ip4 dscp or ip6 priority */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

**************/

 TLV helpers */

*************/

*************/

 TLV events */

*************/

		/* FIXME: It's probably worth telling mac80211 to stop the

		 * interface as it is crippled.

 notify cfg80211 radio state change */

**********/

 TLV ops */

**********/

	/* Ready event must be handled normally also in UTF mode so that we

	 * know the UTF firmware has booted, others we are just bypass WMI

	 * events to testmode.

 mgmt_rx() owns the skb now! */

 shift the sk_buff to point to `frame` */

	/* This is an internal ABI compatibility check for WMI TLV so check it

	 * here instead of the generic WMI code.

	/* FIXME: There are some scan flag inconsistencies across firmwares,

	 * e.g. WMI-TLV inverts the logic behind the following flag.

	/* Note: This is a nested TLV containing:

	 * [wmi_tlv][wmi_p2p_noa_descriptor][wmi_tlv]..

 nothing to set here */

 nothing to do here */

	/* FIXME: prb_ies_len should be probably aligned to 4byte boundary but

	 * then it is then impossible to pass original ie len.

	 * This chunk is not used yet so if setting probe resp template yields

	 * problems with beaconing or crashes firmware look here.

 FIXME: Adjust TSF? */

	/* Set to options from wmi_tlv_tdls_options,

	 * for now none of them are enabled.

	/* WMI_TDLS_ENABLE_ACTIVE_EXTERNAL_CONTROL means firm will handle TDLS

	 * link inactivity detecting logic.

 vdev_id is not in use, set to 0 */

 array struct */

 bitmap */

 empty ipv4 sync */

 empty ipv6 sync */

 empty magic */

 empty info timeout */

 ratelimit interval */

 cmd */

 bitmap */

 ipv4 sync */

 ipv6 sync */

 magic */

 pattern info timeout */

 ratelimit interval */

 Request FW to start PNO operation */

	      /* TLV place holder for array of structures

	       * nlo_configured_parameters(nlo_list)

 TLV place holder for array of uint32 channel_list */

 wmi_tlv_wow_nlo_config_cmd parameters*/

 current FW does not support min-max range for dwell time */

 copy scan interval */

 nlo_configured_parameters(nlo_list) */

 copy ssid and it's length */

 copy rssi threshold */

 copy channel info */

 Request FW to stop ongoing PNO operation */

	      /* TLV place holder for array of structures

	       * nlo_configured_parameters(nlo_list)

 TLV place holder for array of uint32 channel_list */

 nlo_configured_parameters(nlo_list) */

 channel list */

***************/

 TLV mappings */

***************/

 .gen_mgmt_tx = not implemented; HTT is used */

 .gen_addba_clear_resp not implemented */

 .gen_addba_send not implemented */

 .gen_addba_set_resp not implemented */

 .gen_delba_send not implemented */

***********/

 TLV init */

***********/

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014-2017 Qualcomm Atheros, Inc.

	/* Note: qca99x0 supports upto 12 Copy Engines. Other than address of

	 * CE0 and CE1 no other copy engine is directly referred in the code.

	 * It is not really necessary to assign address for newly supported

	 * CEs in this address table.

	 *	Copy Engine		Address

	 *	CE8			0x0004c000

	 *	CE9			0x0004c400

	 *	CE10			0x0004c800

	 *	CE11			0x0004cc00

	/* qca4019 supports upto 12 copy engines. Since base address

	 * of ce8 to ce11 are not directly referred in the code,

	 * no need have them in separate members in this table.

	 *      Copy Engine             Address

	 *      CE8                     0x0004c000

	 *      CE9                     0x0004c400

	 *      CE10                    0x0004c800

	 *      CE11                    0x0004cc00

/* The firmware does not support setting the coverage class. Instead this

 * function monitors and modifies the corresponding MAC registers.

 Only modify registers if the core is started. */

 Store config value for when radio boots up */

	/* Retrieve the current values of the two registers that need to be

	 * adjusted.

	/* Break out if the coverage class and registers have the expected

	 * value.

 Store new initial register values from the firmware. */

 Calculate new value based on the (original) firmware calculation. */

 Do some sanity checks on the slottime register. */

	/* Recalculate the register values by adding the additional propagation

	 * delay (3us per coverage class).

 Update ack timeout (lower halfword). */

 Update cts timeout (upper halfword). */

	/* Ensure we have a debug level of WARN set for the case that the

	 * coverage class is larger than 0. This is important as we need to

	 * set the registers again if the firmware does an internal reset and

	 * this way we will be notified of the event.

 After an error we will not retry setting the coverage class. */

/**

 * ath10k_hw_qca6174_enable_pll_clock() - enable the qca6174 hw pll clock

 * @ar: the ath10k blob

 *

 * This function is very hardware specific, the clock initialization

 * steps is very sensitive and could lead to unknown crash, so they

 * should be done in sequence.

 *

 * *** Be aware if you planned to refactor them. ***

 *

 * Return: 0 if successfully enable the pll, otherwise EINVAL

 Read efuse register to find out the right hw clock configuration */

 sanitize if the hw refclk index is out of the boundary */

 Set the rnfrac and outdiv params to bb_pll register */

 Set the correct settle time value to pll_settle register */

 Set the clock_ctrl div to core_clk_ctrl register */

 Set the clock_div register */

 Configure the pll_control register */

 busy wait (max 1s) the rtc_sync status register indicate ready */

 Unset the pll_bypass in pll_control register */

 busy wait (max 1s) the rtc_sync status register indicate ready */

 Enable the hardware cpu clock register */

 unset the nopwd from pll_control register */

 enable the pll_init register */

 set the target clock frequency to speed register */

/* Program CPU_ADDR_MSB to allow different memory

 * region access.

/* 1. Write to memory region of target, such as IRAM adn DRAM.

 * 2. Target address( 0 ~ 00100000 & 0x00400000~0x00500000)

 *    can be written directly. See ath10k_pci_targ_cpu_to_ce_addr() too.

 * 3. In order to access the region other than the above,

 *    we need to set the value of register CPU_ADDR_MSB.

 * 4. Target memory access space is limited to 1M size. If the size is larger

 *    than 1M, need to split it and program CPU_ADDR_MSB accordingly.

 Change msb to the next memory region*/

 Change msb to DRAM */

 Needs to change MSB for memory write */

	/* check firmware header. If it has no correct magic number

	 * or it's compressed, returns error.

 base_addr is the start address to run */

 no more segment */

 sanity check */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

	/* EFUSE0,1,2 is disabled here

	 * because its state may be reset

	 *

	 * {0x24800, 0x24804},

	 * {0x25000, 0x25004},

	 * {0x25800, 0x25804},

	/* DBI windows is skipped here, it can be only accessed when pcie

	 * is active (not in reset) and CORE_CTRL_PCIE_LTSSM_EN = 0 &&

	 * PCIE_CTRL_APP_LTSSM_ENALBE=0.

	 * {0x3C000 , 0x3C004},

	/* SI register is skiped here.

	 * Because it will cause bus hang

	 *

	 * {0x50000, 0x50018},

 RTC_SOC_BASE_ADDRESS */

 WLAN_MBOX_BASE_ADDRESS - RTC_SOC_BASE_ADDRESS */

 STEREO_BASE_ADDRESS */

 USB_BASE_ADDRESS - STEREO_BASE_ADDRESS */

 IRAM dump must be put last */

 MSA region start is not fixed, hence it is assigned at runtime */

 reserve space for the headers */

 make sure it is aligned 16 bytes for debug message print out */

 coredump disabled */

	/* This is going to get big when we start dumping FW RAM and such,

	 * so go ahead and use vmalloc.

 Gather ram dump */

 coredump disabled */

 coredump disabled */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2018 The Linux Foundation. All rights reserved.

 CE0: host->target HTC control streams */

 CE1: target->host HTT + HTC control */

 CE2: target->host WMI */

 CE3: host->target WMI */

 CE4: host->target HTT */

 CE5: target->host HTT (ipa_uc->target ) */

 CE6: target autonomous hif_memcpy */

 CE7: ce_diag, the Diagnostic Window */

 CE8: Target to uMC */

 CE9 target->host HTT */

 CE10: target->host HTT */

 CE11: target -> host PKTLOG */

 CE0: host->target HTC control and raw streams */

 CE1: target->host HTT + HTC control */

 CE2: target->host WMI */

 CE3: host->target WMI */

 CE4: host->target HTT */

 CE5: target->host HTT (HIF->HTT) */

 CE6: Reserved for target autonomous hif_memcpy */

 CE7 used only by Host */

 CE8 Target to uMC */

 CE9 target->host HTT */

 CE10 target->host HTT */

 CE11 target autonomous qcache memcpy */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 not used */

 out = UL = host -> target */

 not used */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 not used */

 in = DL = target -> host */

 in = DL = target -> host */

 in = DL = target -> host */

 in = DL = target -> host */

 in = DL = target -> host pktlog */

 in = DL = target -> host */

 (Additions here) */

 must be last */

	/* CE4 polling needs to be done whenever CE pipe which transports

	 * HTT Rx (target->host) is processed.

/* Called by lower (CE) layer when data is received from the Target.

 * WCN3990 firmware uses separate CE(CE11) to transfer pktlog data.

	/* If both ATH10K_FLAG_CRASH_FLUSH and ATH10K_SNOC_FLAG_RECOVERY

	 * flags are not set, it means that the driver has restarted

	 * due to a crash inject via debugfs. In this case, the driver

	 * needs to restart the firmware and hence send qmi wlan disable,

	 * during the driver restart sequence.

 Reserve space for the header. */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2016-2017 Qualcomm Atheros, Inc. All rights reserved.

 * Copyright (c) 2015 The Linux Foundation. All rights reserved.

 256 kb */

 Issue halt axi bus request */

 Wait for axi bus halted ack */

	/* Clear halt req and core clock disable req before

	 * deasserting wifi core reset.

	/* Clock for the target is supplied from outside of target (ie,

	 * external clock module controlled by the host). Target needs

	 * to know what frequency target cpu is configured which is needed

	 * for target internal use. Read target cpu frequency info from

	 * gcc register and write into target's scratch register where

	 * target expects this information.

		/* SRAM contents for QCA4019 can be directly accessed and

		 * no conversions are required

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

********/

 Rates */

********/

*********/

 Crypto */

*********/

	/* In some cases (notably with static WEP IBSS with multiple keys)

	 * multicast Tx becomes broken. Both pairwise and groupwise keys are

	 * installed already. Using WMI_KEY_TX_USAGE in different combinations

	 * didn't seem help. Using def_keyid vdev parameter seems to be

	 * effective so use that.

	 *

	 * FIXME: Revisit. Perhaps this can be done in a less hacky way.

 key flags are not required to delete the key */

	/* We don't know which vdev this peer belongs to,

	 * since WMI doesn't give us that information.

	 *

	 * FIXME: multi-bss needs to be handled.

		/* since ath10k_install_key we can't hold data_lock all the

		 * time, so we try to remove the keys incrementally

 key flags are not required to delete the key */

********************/

 General utilities */

********************/

/*

 * 802.11n D2.0 defined values for "Minimum MPDU Start Spacing":

 *   0 for no restriction

 *   1 for 1/4 us

 *   2 for 1/2 us

 *   3 for 1 us

 *   4 for 2 us

 *   5 for 4 us

 *   6 for 8 us

 *   7 for 16 us

	/* Our lower layer calculations limit our precision to

	 * 1 microsecond

 Each vdev consumes a peer entry as well */

		/* Double check that peer is properly un-referenced from

		 * the peer_map

***********************/

 Interface management */

***********************/

	/* TODO setup this dynamically, what in case we

	 * don't have any vifs?

	/* At least one chanctx is required to derive a channel to start

	 * monitor vdev on.

	/* If there's already an existing special monitor interface then don't

	 * bother creating another monitor vdev.

	/* FIXME: Current interface combinations and cfg80211/mac80211 code

	 * shouldn't allow this but make sure to prevent handling the following

	 * case anyway since multi-channel DFS hasn't been tested at all.

 not serious */

 CAC is not running - do nothing */

		/*

		 * Not possible to start CAC on current channel so starting

		 * radiation is not allowed, make this channel DFS_UNAVAILABLE

		 * by indicating that radar was detected.

 For now allow DFS for AP mode */

	/* P2P IE is inserted by firmware automatically (as configured above)

	 * so remove it from the base beacon template to avoid duplicate P2P

	 * IEs in beacon frames.

 For mesh, probe response and beacon share the same template */

	/* When originally vdev is started during assign_vif_chanctx() some

	 * information is missing, notably SSID. Firmware revisions with beacon

	 * offloading require the SSID to be provided during vdev (re)start to

	 * handle hidden SSID properly.

	 *

	 * Vdev restart must be done after vdev has been both started and

	 * upped. Otherwise some firmware revisions (at least 10.2) fail to

	 * deliver vdev restart response event causing timeouts during vdev

	 * syncing in ath10k.

	 *

	 * Note: The vdev down/up and template reinstallation could be skipped

	 * since only wmi-tlv firmware are known to have beacon offload and

	 * wmi-tlv doesn't seem to misbehave like 10.2 wrt vdev restart

	 * response delivery. It's probably more robust to keep it as is.

	/* Vdev down reset beacon & presp templates. Reinstall them. Otherwise

	 * firmware will crash upon vdev up.

		/* mac80211 can update vif powersave state while disconnected.

		 * Firmware doesn't behave nicely and consumes more power than

		 * necessary if PS is disabled on a non-started vdev. Hence

		 * force-enable PS for non-running vdevs.

 Firmware doesn't like 0 */

	/* Some firmware revisions have a bug and ignore the `enabled` field.

	 * Instead use the interval to disable the keepalive.

	/* Firmware doesn't report beacon loss events repeatedly. If AP probe

	 * (done by mac80211) succeeds but beacons do not resume then it

	 * doesn't make sense to continue operation. Queue connection loss work

	 * which can be cancelled when beacon is received.

*********************/

 Station management */

*********************/

	/* Some firmware revisions have unstable STA powersave when listen

	 * interval is set too high (e.g. 5). The symptoms are firmware doesn't

	 * generate NullFunc frames properly even if buffered frames have been

	 * indicated in Beacon TIM. Firmware would seldom wake up to pull

	 * buffered frames. Often pinging the device from AP would simply fail.

	 *

	 * As a workaround set it to 1.

 FIXME: base on RSN IE/WPA IE is a correct idea? */

	/*

	 * This is a workaround for HT-enabled STAs which break the spec

	 * and have no HT capabilities RX mask (no HT RX MCS map).

	 *

	 * As per spec, in section 20.3.5 Modulation and coding scheme (MCS),

	 * MCS 0 through 7 are mandatory in 20MHz with 800 ns GI at all STAs.

	 *

	 * Firmware asserts if such situation occurs.

		/* TODO setup this based on STA listen interval and

		 * beacon interval. Currently we don't know

		 * sta->listen_interval - mac80211 patch required.

		 * Currently use 10 seconds

 see ath10k_mac_can_set_bitrate_mask() */

 not support MCS9 from spec*/

	/* Workaround: Some Netgear/Linksys 11ac APs set Rx A-MPDU factor to

	 * zero in VHT IE. Using it would result in degraded throughput.

	 * arg->peer_max_mpdu at this point contains HT max_mpdu so keep

	 * it if VHT max_mpdu is smaller.

	/* Calculate peer NSS capability from VHT capabilities if STA

	 * supports VHT.

	/* Configure bandwidth-NSS mapping to FW

	 * for the chip's tx chains setting on 160Mhz bw

 not sure if this is a valid case? */

		/*

		 * Check VHT first.

	/* The following logic is correct. If a remote STA advertises support

	 * for being a beamformer then we should enable us being a beamformee.

 ath10k internally uses unit of 0.5 dBm so multiply by 2 */

 txpower not initialized yet? */

 if connected, then arvif->txpower must be valid */

	/* 0dbm is not a practical value for ath10k, so use 0

	 * as no SAR limitation on it.

	/* note the power is in 0.25dbm unit, while ath10k uses

	 * 0.5dbm unit.

 can be called only in mac80211 callbacks due to `key_count` usage */

	/* ap_sta must be accessed only within rcu section which must be left

	 * before calling ath10k_setup_peer_smps() which might sleep.

	/* Workaround: Some firmware revisions (tested with qca6174

	 * WLAN.RM.2.0-00073) have buggy powersave state machine and must be

	 * poked with peer param command.

		/* Assign default value(-1) to newly connected station.

		 * This is to identify station specific tid configuration not

		 * configured for the station.

	/* Re-assoc is run only to update supported rates for given station. It

	 * doesn't make much sense to reconfigure the peer completely.

 Plumb cached keys only for static WEP */

*************/

 Regulatory */

*************/

 FIXME: when should we really allow VHT? */

			/* the firmware is ignoring the "radar" flag of the

			 * channel and is scanning actively using Probe Requests

			 * on "Radar detection"/DFS channels which are not

			 * marked as "available"

 FIXME */

			/* FIXME: why use only legacy modes, why not any

			 * HT/VHT modes? Would that even make any

			 * difference?

	/* Target allows setting up per-band regdomain but ath_common provides

	 * a combined one only

 2ghz */

 5ghz */

**************/

 TX handlers */

**************/

	/* Workaround:

	 *

	 * NullFunc frames are mostly used to ping if a client or AP are still

	 * reachable and responsive. This implies tx status reports must be

	 * accurate - otherwise either mac80211 or userspace (e.g. hostapd) can

	 * come to a conclusion that the other end disappeared and tear down

	 * BSS connection or it can never disconnect from BSS/client (which is

	 * the case).

	 *

	 * Firmware with HTT older than 3.0 delivers incorrect tx status for

	 * NullFunc frames to driver. However there's a HTT Mgmt Tx command

	 * which seems to deliver correct tx reports for NullFunc frames. The

	 * downside of using it is it ignores client powersave state so it can

	 * end up disconnecting sleeping clients in AP mode. It should fix STA

	 * mode though because AP don't sleep.

	/* Workaround:

	 *

	 * Some wmi-tlv firmwares for qca6174 have broken Tx key selection for

	 * NativeWifi txmode - it selects AP key instead of peer key. It seems

	 * to work with Ethernet txmode so use it.

	 *

	 * FIXME: Check if raw mode works with TDLS.

/* HTT Tx uses Native Wifi tx mode which expects 802.11 frames without QoS

 * Control in the header.

	/* Some firmware revisions don't handle sending QoS NullFunc well.

	 * These frames are mainly used for CQM purposes so it doesn't really

	 * matter whether QoS NullFunc or NullFunc are sent.

 This is case only for P2P_GO */

	/* Data frames encrypted in software will be posted to firmware

	 * with tx encap mode set to RAW. Ex: Multicast traffic generated

	 * for a specific VLAN group will always be encrypted in software.

	/* FIXME: Not really sure since when the behaviour changed. At some

	 * point new firmware stopped requiring creation of peer entries for

	 * offchannel tx (and actually creating them causes issues with wmi-htc

	 * tx credit replenishment and reliability). Assuming it's at least 3.4

	 * because that's when the `freq` was introduced to TX_FRM HTT command.

/* This function consumes the sk_buff regardless of return value as far as

 * caller is concerned so no freeing is necessary afterwards.

 We should disable CCK RATE due to P2P */

	/* FW requirement: We must create a peer before FW will send out

	 * an offchannel frame. Otherwise the frame will be stuck and

	 * never transmitted. We delete the peer upon tx completion.

	 * It is unlikely that a peer for offchannel tx will already be

	 * present. However it may be in some rare cases so account for that.

	 * Otherwise we might remove a legitimate peer and break stuff.

		/* It's safe to access vif and sta - conf_mutex guarantees that

		 * sta_state() and remove_interface() are locked exclusively

		 * out wrt to this offchannel worker.

 not serious */

 remove this msdu from idr tracking */

 No need to get locks */

/* Return estimated airtime in microsecond, which is calculated using last

 * reported TX rate. This is just a rough estimation because host driver has no

 * knowledge of the actual transmit rate, retries or aggregation. If actual

 * airtime can be reported by firmware, then delta between estimated and actual

 * airtime can be adjusted from deficit.

 IFS + some slot time */

 IFS only */

 Assume MAC header 30, SNAP 8 for most case */

 airtime in us, last_tx_bitrate in 100kbps */

 overhead for media access time and IFS */

		/* This is mostly for throttle excessive BC/MC frames, and the

		 * airtime/rate doesn't need be exact. Airtime of BC/MC frames

		 * in 2G get some discount, which helps prevent very low rate

		 * frames from being blocked for too long.

 6M */

***********/

 Scanning */

***********/

 FIXME */

	/* Scan state should be updated upon scan completion but in case

	 * firmware fails to deliver the event (for whatever reason) it is

	 * desired to clean up scan state anyway. Firmware may have just

	 * dropped the scan completion event delivery due to transport pipe

	 * being overflown with data and/or it can recover on its own before

	 * next scan request is submitted.

		/* This can happen if timeout worker kicked in and called

		 * abortion while scan completion was being processed.

	/* If we failed to start the scan, return error code at

	 * this point.  This is probably due to some issue in the

	 * firmware, but no need to wedge the driver due to that...

*********************/

 mac80211 callbacks */

*********************/

 Must not be called with conf_mutex held as workers can use that also. */

 make sure rcu-protected mac80211 tx path itself is drained */

	/* It is not clear that allowing gaps in chainmask

	 * is helpful.  Probably it will not do what user

	 * is hoping for, so warn in that case.

	/* If firmware does not deliver to host number of space-time

	 * streams supported, assume it support up to 4 BF STS and return

	 * the value for VHT CAP: nsts-1)

	/* If the sounding dimension is not advertised by the firmware,

	 * let's use a default value of 1

	/* If we are supporting 160Mhz or 80+80, then the NIC may be able to do

	 * a restricted NSS for 160 or 80+80 vs what it can do for 80Mhz.  Give

	 * user-space a clue if that is the case.

 max AMSDU is implicitly taken from vht_cap_info */

 Reload HT/VHT capability */

	/*

	 * If external Front End module used in hardware, then default base band timing

	 * parameter cannot be used since they were fine tuned for reference hardware,

	 * so choosing different value suitable for that external FEM.

	/*

	 * This makes sense only when restarting hw. It is harmless to call

	 * unconditionally. This is necessary to make sure no HTT/WMI tx

	 * commands will be submitted while restarting.

	/*

	 * By default FW set ARP frames ac to voice (6). In that case ARP

	 * exchange is not working properly for UAPSD enabled AP. ARP requests

	 * which arrives with access category 0 are processed by network stack

	 * and send back with access category 0, but FW changes access category

	 * to 6. Set ARP frames access category to best effort (0) solves

	 * this problem.

/*

 * TODO:

 * Figure out how to handle WMI_VDEV_SUBTYPE_P2P_DEVICE,

 * because we will send mgmt frames without CCK. This requirement

 * for P2P_FIND/GO_NEG should be handled by checking CCK flag

 * in the TX packet.

	/* Using vdev_id as queue number will make it very easy to do per-vif

	 * tx queue locking. This shouldn't wrap due to interface combinations

	 * but do a modulo for correctness sake and prevent using offchannel tx

	 * queues for regular vif tx.

	/* Some firmware revisions don't wait for beacon tx completion before

	 * sending another SWBA event. This could lead to hardware using old

	 * (freed) beacon data in some cases, e.g. tx credit starvation

	 * combined with missed TBTT. This is very rare.

	 *

	 * On non-IOMMU-enabled hosts this could be a possible security issue

	 * because hw could beacon some random data on the air.  On

	 * IOMMU-enabled hosts DMAR faults would occur in most cases and target

	 * device would crash.

	 *

	 * Since there are no beacon tx completions (implicit nor explicit)

	 * propagated to host the only workaround for this is to allocate a

	 * DMA-coherent buffer for a lifetime of a vif and use it for all

	 * beacon tx commands. Worst case for this approach is some beacons may

	 * become corrupted, e.g. have garbled IEs or out-of-date TIM bitmap.

			/* Using a kernel pointer in place of a dma_addr_t

			 * token can lead to undefined behavior if that

			 * makes it into cache management functions. Use a

			 * known-invalid address token instead, which

			 * avoids the warning and makes it easier to catch

			 * bugs if it does end up getting used.

	/* It makes no sense to have firmware do keepalives. mac80211 already

	 * takes care of this with idle connection polling.

 10.X firmware does not support this VDEV parameter. Do not warn */

	/* Configuring number of spatial stream for monitor interface is causing

	 * target assert in qca9888 and qca6174.

 It is harmless to not set FTM role. Do not warn */

	/* Some firmware revisions don't notify host about self-peer removal

	 * until after associated vdev is deleted.

	/* Clean this up late, less opportunity for firmware to access

	 * DMA memory we have deleted.

/*

 * FIXME: Has to be verified.

 mesh doesn't use SSID but firmware needs it */

 9us */

 20us */

			/* Workaround: Make sure monitor vdev is not running

			 * when associating to prevent some firmware revisions

			 * (e.g. 10.1 and 10.2) from crashing.

	/* This function should never be called if setting the coverage class

	 * is not supported on this hardware.

 if duration is set, default dwell times will be overwritten */

 Add a 200ms margin to account for event/command processing */

	/* 10.1 firmware branch requires default key index to be set to group

	 * key index after installing it. Otherwise FW/HW Txes corrupted

	 * frames with multi-vif APs. This is not required for main firmware

	 * branch (e.g. 636).

	 *

	 * This is also needed for 636 fw for IBSS-RSN to work more reliably.

	 *

	 * FIXME: It remains unknown if this is required for multi-vif STA

	 * interfaces on 10.1.

 this one needs to be done in software */

	/* the peer should not disappear in mid-way (unless FW goes awry) since

	 * we already hold conf_mutex. we just make sure its there now.

 if the peer doesn't exist there is no key to disable anymore */

		/* When WEP keys are uploaded it's possible that there are

		 * stations associated already (e.g. when merging) without any

		 * keys. Static WEP needs an explicit per-peer key upload.

		/* 802.1x never sets the def_wep_key_idx so each set_key()

		 * call changes default tx key.

		 *

		 * Static WEP sets def_wep_key_idx via .set_default_unicast_key

		 * after first set_key().

	/* mac80211 sets static WEP keys as groupwise while firmware requires

	 * them to be installed twice as both pairwise and groupwise.

 impossible unless FW goes crazy */

 Store the configured parameters in success case */

 cancel must be done outside the mutex to avoid deadlock */

		/*

		 * New station addition.

		/*

		 * Existing station deletion.

				/* Clean up the peer object as well since we

				 * must have failed to do this above.

 This was the last tdls peer in current vif */

		/*

		 * New association.

		/*

		 * Tdls station authorized.

		/*

		 * Disassociation.

		/* Only userspace can make an educated decision when to send

		 * trigger frame. The following effectively disables u-UAPSD

		 * autotrigger in firmware (which is enabled by default

		 * provided the autotrigger service is available).

	/*

	 * The channel time duration programmed in the HW is in absolute

	 * microseconds, while mac80211 gives the txop in units of

	 * 32 microseconds.

		/* This won't work well with multi-interface cases but it's

		 * better than nothing.

/*

 * Both RTS and Fragmentation threshold are interface-specific

 * in ath10k, but device-specific in mac80211.

	/* Even though there's a WMI enum for fragmentation threshold no known

	 * firmware actually implements it. Moreover it is not possible to rely

	 * frame fragmentation to mac80211 because firmware clears the "more

	 * fragments" bit in frame control making it impossible for remote

	 * devices to reassemble frames.

	 *

	 * Hence implement a dummy callback just to say fragmentation isn't

	 * supported. This effectively prevents mac80211 from doing frame

	 * fragmentation in software.

	/* mac80211 doesn't care if we really xmit queued frames or not

	 * we'll collect those frames either way if we stop/delete vdevs

/* TODO: Implement this function properly

 * For now it is needed to reply to Probe Requests in IBSS mode.

 * Propably we need this information from FW.

	/* If device failed to restart it will be in a different state, e.g.

	 * ATH10K_STATE_WEDGED

	/* Due to firmware limitation in WMI_PEER_ASSOC_CMDID it is impossible

	 * to express all VHT MCS rate masks. Effectively only the following

	 * ranges can be used: none, 0-7, 0-8 and 0-9.

 skip non vht and multiple rate peers */

 clear vht peers only */

			/* Reach here, firmware supports peer fixed rate and has

			 * single vht rate, and don't update vif birate_mask, as

			 * the rate only for specific peer.

		/* HTT AddBa/DelBa events trigger mac80211 Rx BA session

		 * creation/removal. Do we need to verify this?

		/* Firmware offloads Tx aggregation entirely so deny mac80211

		 * Tx aggregation requests.

	/* Both locks are required because ar->rx_channel is modified. This

	 * allows readers to hold either lock.

	/* FIXME: Sort of an optimization and a workaround. Peers and vifs are

	 * on a linked list now. Doing a lookup peer -> vif -> chanctx for each

	 * ppdu on Rx may reduce performance on low-end systems. It should be

	 * possible to make tables/hashmaps to speed the lookup up (be vary of

	 * cpu data cache lines though regarding sizes) but to keep the initial

	 * implementation simple and less intrusive fallback to the slow lookup

	 * only for multi-channel cases. Single-channel cases will remain to

	 * use the old channel derival and thus performance should not be

	 * affected much.

		/* During driver restart due to firmware assert, since mac80211

		 * already has valid channel context for given radio, channel

		 * context iteration return num_chanctx > 0. So fix rx_channel

		 * when restart is in progress.

	/* First stop monitor interface. Some FW versions crash if there's a

	 * lone monitor interface.

	/* All relevant vdevs are downed and associated channel resources

	 * should be available for the channel switch now.

	/* This shouldn't really happen because channel switching should use

	 * switch_vif_chanctx().

 FIXME: How to configure Rx chains properly? */

	/* No other actions are actually necessary. Firmware maintains channel

	 * definitions per vdev internally and there's no host-side channel

	 * context abstraction to configure, e.g. channel width.

 HT MCS parameters with Nss = 1 */

 MCS  L20   L40   S20  S40 */

 HT MCS parameters with Nss = 2 */

 MCS  L20    L40   S20   S40 */

 MCS parameters with Nss = 1 */

 MCS  L80    S80     L40   S40    L20   S20 */

MCS parameters with Nss = 2 */

 MCS  L80    S80     L40   S40    L20   S20 */

 If you add more, you may need to change ATH10K_MAX_5G_CHAN */

 And you will definitely need to change ATH10K_NUM_CHANS in core.h */

/* FIXME: This is not thouroughly tested. These combinations may over- or

 * underestimate hw/fw capabilities.

		/* Do not add hardware supported ciphers before this line.

		 * Allow software encryption for all chips. Don't forget to

		 * update n_cipher_suites below.

		/* Only QCA99x0 and QCA4019 varients support GCMP-128, GCMP-256

		 * and CCMP-256 in hardware.

		/* Firmware delivers WPS/P2P Probe Requests frames to driver so

		 * that userspace (e.g. wpa_supplicant/hostapd) can generate

		 * correct Probe Responses. This is more of a hack advert..

	/*

	 * on LL hardware queues are managed entirely by the FW

	 * so we only advertise to mac we can do the queues thing

	/* vdev_ids are used as hw queue numbers. Make sure offchan tx queue is

	 * something that vdev_ids can't reach so that we don't stop the queue

	 * accidentally.

 Init ath dfs pattern detector */

 Disable set_coverage_class for chipsets that do not support it. */

	/* QCA988x and QCA6174 family chips do not support CCMP-256, GCMP-128

	 * and GCMP-256 ciphers in hardware. Fetch number of ciphers supported

	 * from chip specific hw_param table.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2007-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012,2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2016-2017 Erik Stromdahl <erik.stromdahl@gmail.com>

 inlined helper functions */

 pipe/urb operations */

 bail if this pipe is not initialized */

 bail if this pipe is not initialized */

 nothing allocated for this pipe */

 hif usb rx/tx completion functions */

			/* no need to spew these errors when device

			 * removed or urb killed due to driver shutdown

 we are going to pass it up */

 note: queue implements a lock */

 our free urbs are piling up, post more transfers */

 note: queue implements a lock */

 pipe operations */

 The TX complete handler now owns the skb... */

		/* strip off the trailer from the skb since it should not

		 * be passed on to upper layers

 The RX complete handler now owns the skb... */

 set the TX resource avail threshold for each TX pipe */

 hit a max packet boundary on this pipe */

 note: if successful returns number of bytes transferred */

 note: if successful returns number of bytes transferred */

 send command */

 get response */

 due to large control packets, shift to data pipe */

		/* Disable rxdata2 directly, it will be enabled

		 * if FW enable rxdata2

 note: there may be endpoints not currently used */

		/* we are only allocate the urb contexts here, the actual URB

		 * is allocated from the kernel as needed to do a transaction

 walk descriptors and setup pipes */

 TODO for ISO */

 Ignore broken descriptors. */

 hmmm..pipe was already setup */

 TODO for ISO */

 ath10k usb driver registered functions */

	/* Assumption: All USB based chipsets (so far) are QCA9377 based.

	 * If there will be newer chipsets that does not use the hw reg

	 * setup as defined in qca6174_regs and qca6174_values, this

	 * assumption is no longer valid and hw_rev must be setup differently

	 * depending on chipset.

 TODO: don't know yet how to get chip_id with USB */

 TODO: remove this once USB support is fully implemented */

 table of devices that work with this driver */

 Linksys WUSB6100M */

 Terminating entry */ },

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2015-2016 Qualcomm Atheros, Inc.

/* This file has implementation for code swap logic. With code swap feature,

 * target can run the fw binary with even smaller IRAM size by using host

 * memory to store some of the code segments.

	/* Parse swap bin and copy the content to host allocated memory.

	 * The format is Address, length and value. The last 4-bytes is

	 * target write address. Currently address field is not used.

	/* FIXME: these two assignments look to bein wrong place! Shouldn't

	 * they be in ath10k_core_free_firmware_files() like the rest?

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018 The Linux Foundation. All rights reserved.

/*

 * Support for Copy Engine hardware, which is mainly used for

 * communication between Host and Target over a PCIe interconnect.

/*

 * A single CopyEngine (CE) comprises two "rings":

 *   a source ring

 *   a destination ring

 *

 * Each ring consists of a number of descriptors which specify

 * an address, length, and meta-data.

 *

 * Typically, one side of the PCIe/AHB/SNOC interconnect (Host or Target)

 * controls one ring and the other side controls the other ring.

 * The source side chooses when to initiate a transfer and it

 * chooses what to send (buffer address, length). The destination

 * side keeps a supply of "anonymous receive buffers" available and

 * it handles incoming data as it arrives (when the destination

 * receives an interrupt).

 *

 * The sender may send a simple buffer (address/length) or it may

 * send a small list of buffers.  When a small list is sent, hardware

 * "gathers" these and they end up in a single destination buffer

 * with a single interrupt.

 *

 * There are several "contexts" managed by this layer -- more, it

 * may seem -- than should be needed. These are provided mainly for

 * maximum flexibility and especially to facilitate a simpler HIF

 * implementation. There are per-CopyEngine recv, send, and watermark

 * contexts. These are supplied by the caller when a recv, send,

 * or watermark handler is established and they are echoed back to

 * the caller when the respective callbacks are invoked. There is

 * also a per-transfer context supplied by the caller when a buffer

 * (or sendlist) is sent and when a buffer is enqueued for recv.

 * These per-transfer contexts are echoed back to the caller when

 * the buffer is sent/received.

/*

 * Guts of ath10k_ce_send.

 * The caller takes responsibility for any needed locking.

 Update Source Ring Write Index */

 WORKAROUND */

 Update Source Ring Write Index */

	/*

	 * This function must be called only if there is an incomplete

	 * scatter-gather transfer (before index register is updated)

	 * that needs to be cleaned up.

	/* Prevent CE ring stuck issue that will occur when ring is full.

	 * Make sure that write index is 1 less than read index.

/*

 * Guts of ath10k_ce_completed_recv_next.

 * The caller takes responsibility for any necessary locking.

 Copy in one go for performance reasons */

		/*

		 * This closes a relatively unusual race where the Host

		 * sees the updated DRRI before the update to the

		 * corresponding descriptor has completed. We treat this

		 * as a descriptor that is not yet done.

 Return data from completed destination descriptor */

	/* Copy engine 5 (HTT Rx) will reuse the same transfer context.

	 * So update transfer context all CEs except CE5.

 Update sw_index */

 Copy in one go for performance reasons */

		/* This closes a relatively unusual race where the Host

		 * sees the updated DRRI before the update to the

		 * corresponding descriptor has completed. We treat this

		 * as a descriptor that is not yet done.

 Return data from completed destination descriptor */

	/* Copy engine 5 (HTT Rx) will reuse the same transfer context.

	 * So update transfer context all CEs except CE5.

 Update sw_index */

 Return data from completed destination descriptor */

 sanity */

 Update sw_index */

 Return data from completed destination descriptor */

 sanity */

 Update sw_index */

/*

 * Guts of ath10k_ce_completed_send_next.

 * The caller takes responsibility for any necessary locking.

		/*

		 * The SW completion index has caught up with the cached

		 * version of the HW completion index.

		 * Update the cached HW completion index to see whether

		 * the SW has really caught up to the HW, or if the cached

		 * value of the HW index has become stale.

 sanity */

 Update sw_index */

		/*

		 * The SW completion index has caught up with the cached

		 * version of the HW completion index.

		 * Update the cached HW completion index to see whether

		 * the SW has really caught up to the HW, or if the cached

		 * value of the HW index has become stale.

 sanity */

 Update sw_index */

 Return data from completed source descriptor */

 Return data from completed source descriptor */

 NB: Modeled after ath10k_ce_completed_send_next */

 sanity */

 Update sw_index */

/*

 * Guts of interrupt handler for per-engine interrupts on a particular CE.

 *

 * Invokes registered callbacks for recv_complete,

 * send_complete, and watermarks.

	/*

	 * Clear before handling

	 *

	 * Misc CE interrupts are not being handled, but still need

	 * to be cleared.

	 *

	 * NOTE: When the last copy engine interrupt is cleared the

	 * hardware will go to sleep.  Once this happens any access to

	 * the CE registers can cause a hardware fault.

/*

 * Handler for per-engine interrupts on ALL active CEs.

 * This is used in cases where the system is sharing a

 * single interrput for all CEs

 no intr pending on this CE */

/*

 * Adjust interrupts for the copy complete handler.

 * If it's needed for either send or recv, then unmask

 * this interrupt; otherwise, mask it.

 *

 * Called with ce_lock held.

	/* Enable interrupts for copy engine that

	 * are not using polling mode.

	/*

	 * Legacy platforms that do not support cache

	 * coherent DMA are unsupported

	/* Legacy platforms that do not support cache

	 * coherent DMA are unsupported

	/*

	 * Legacy platforms that do not support cache

	 * coherent DMA are unsupported

	/* Legacy platforms that do not support cache

	 * coherent DMA are unsupported

	/* Correctly initialize memory to 0 to prevent garbage

	 * data crashing system when download firmware

/*

 * Initialize a Copy Engine based on caller-supplied attributes.

 * This may be called once to initialize both source and destination

 * rings or it may be called twice for separate source and destination

 * initialization. It may be that only one side or the other is

 * initialized by software/firmware.

	/* Make sure there's enough CE ringbuffer entries for HTT TX to avoid

	 * additional TX locking checks.

	 *

	 * For the lack of a better place do the check here.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2013-2017 Qualcomm Atheros, Inc.

 peak index outside of bins */

 max_exp not found */

	/* some chipsets reports bin size as 2^n bytes + 'm' bytes in

	 * report mode 2. First 2^n bytes carries inband tones and last

	 * 'm' bytes carries band edge detection data mainly used in

	 * radar detection purpose. Strip last 'm' bytes to make bin size

	 * as a valid one. 'm' can take possible values of 4, 12.

	/* TODO: there might be a reason why the hardware reports 20/40/80 MHz,

	 * but the results/plots suggest that its actually 22/44/88 MHz.

		/* TODO: As experiments with an analogue sender and various

		 * configurations (fft-sizes of 64/128/256 and 20/40/80 Mhz)

		 * show, the particular configuration of 80 MHz/64 bins does

		 * not match with the other samples at all. Until the reason

		 * for that is found, don't report these samples.

	/* max_exp has been directly reported by previous hardware (ath9k),

	 * maybe its possible to get it by other means?

	/* DC value (value in the middle) is the blind spot of the spectral

	 * sample and invalid, interpolate it.

 if there already is a vif doing spectral, return that. */

 otherwise, return the first vif. */

			/* reset the configuration to adopt possibly changed

			 * debugfs parameters

	/* The buffer size covers whole channels in dual bands up to 128 bins.

	 * Scan with bigger than 128 bins needs to be run on single band each.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2015 Qualcomm Atheros, Inc.

 P2P IE */

 NOA ATTR */

 2 bytes */

 index + oppps_ctwindow */

 EID + len + OUI */

 noa attr + attr len */

 index + oppps_ctwindow */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

	/* currently we support only max 24 bit masks so no need to worry

	 * about endian support

	/*

	 * the HW expects the buffer to be an integral number of 4-byte

	 * "words"

 FIXME: do we need all of this? */

	/* HW expects the buffer to be an integral number of 4-byte

	 * "words"

	/*

	 * the HW expects the buffer to be an integral number of 4-byte

	 * "words"

 Firmware defaults are: amsdu = 3 and ampdu = 64 */

 Firmware defaults are: amsdu = 3 and ampdu = 64 */

	/* Response IDs are echo-ed back only for host driver convienence

	 * purposes. They aren't used for anything in the driver yet so use 0.

	/* Prepend the HTT header and TX desc struct to the data message

	 * and realloc the skb if it does not have enough headroom.

	/* As msdu is freed by mac80211 (in ieee80211_tx_status()) and by

	 * ath10k (in ath10k_htt_htc_tx_complete()) we have to increase

	 * reference by one to avoid a use-after-free case and a double

	 * free.

 always zero */

	/* Initialize peer_id to INVALID_PEER because this is NOT

	 * Reinjection path

	/* Normally all commands go through HTC which manages tx credits for

	 * each endpoint and notifies when tx is completed.

	 *

	 * HTT endpoint is creditless so there's no need to care about HTC

	 * flags. In that case it is trivial to fill the HTC header here.

	 *

	 * MSDU transmission is considered completed upon HTT event. This

	 * implies no relevant resources can be freed until after the event is

	 * received. That's why HTC tx completion handler itself is ignored by

	 * setting NULL to transfer_context for all sg items.

	 *

	 * There is simply no point in pushing HTT TX_FRM through HTC tx path

	 * as it's a waste of resources. By bypassing HTC it is possible to

	 * avoid extra memory allocations, compress data structures and thus

	 * improve performance.

	/* Prevent firmware from sending up tx inspection requests. There's

	 * nothing ath10k can do with frames requested for inspection so force

	 * it to simply rely a regular tx completion with discard status.

	/* Normally all commands go through HTC which manages tx credits for

	 * each endpoint and notifies when tx is completed.

	 *

	 * HTT endpoint is creditless so there's no need to care about HTC

	 * flags. In that case it is trivial to fill the HTC header here.

	 *

	 * MSDU transmission is considered completed upon HTT event. This

	 * implies no relevant resources can be freed until after the event is

	 * received. That's why HTC tx completion handler itself is ignored by

	 * setting NULL to transfer_context for all sg items.

	 *

	 * There is simply no point in pushing HTT TX_FRM through HTC tx path

	 * as it's a waste of resources. By bypassing HTC it is possible to

	 * avoid extra memory allocations, compress data structures and thus

	 * improve performance.

	/* Prevent firmware from sending up tx inspection requests. There's

	 * nothing ath10k can do with frames requested for inspection so force

	 * it to simply rely a regular tx completion with discard status.

 fill fragment descriptor */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

 how long wait to wait for target to initialise, in ms */

/* Maximum number of bytes that can be handled atomically by

 * diag read and write.

 PCI-E QCA988X V2 (Ubiquiti branded) */

 PCI-E QCA988X V2 */

 PCI-E QCA6164 V2.1 */

 PCI-E QCA6174 V2.1 */

 PCI-E QCA99X0 V2 */

 PCI-E QCA9888 V2 */

 PCI-E QCA9984 V1 */

 PCI-E QCA9377 V1 */

 PCI-E QCA9887 */

	/* QCA988X pre 2.0 chips are not supported because they need some nasty

	 * hacks. ath10k doesn't have them and these devices crash horribly

	 * because of that.

 CE0: host->target HTC control and raw streams */

 CE1: target->host HTT + HTC control */

 CE2: target->host WMI */

 CE3: host->target WMI */

 CE4: host->target HTT */

 CE5: target->host HTT (HIF->HTT) */

 CE6: target autonomous hif_memcpy */

 CE7: ce_diag, the Diagnostic Window */

 CE8: target->host pktlog */

 CE9 target autonomous qcache memcpy */

 CE10: target autonomous hif memcpy */

 CE11: target autonomous hif memcpy */

 Target firmware's Copy Engine configuration. */

 CE0: host->target HTC control and raw streams */

 CE1: target->host HTT + HTC control */

 CE2: target->host WMI */

 CE3: host->target WMI */

 CE4: host->target HTT */

 NB: 50% of src nentries, since tx has 2 frags */

 CE5: target->host HTT (HIF->HTT) */

 CE6: Reserved for target autonomous hif_memcpy */

 CE7 used only by Host */

 CE8 target->host packtlog */

 CE9 target autonomous qcache memcpy */

	/* It not necessary to send target wlan configuration for CE10 & CE11

	 * as these CEs are not actively used in target.

/*

 * Map from service/endpoint to Copy Engine.

 * This table is derived from the CE_PCI TABLE, above.

 * It is passed to the Target at startup for use by firmware.

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 not used */

 out = UL = host -> target */

 not used */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 (Additions here) */

 must be last */

	/* This function can be called very frequently. To avoid excessive

	 * CPU stalls for MMIO reads use a cache var to hold the device state.

 Check if the shared legacy irq is for us */

	/* IMPORTANT: INTR_CLR register has to be set after

	 * INTR_ENABLE is set to 0, otherwise interrupt can not be

	 * really cleared.

	/* IMPORTANT: this extra read transaction is required to

	 * flush the posted write buffer.

	/* IMPORTANT: this extra read transaction is required to

	 * flush the posted write buffer.

/* Refactor from ath10k_pci_qca988x_targ_cpu_to_ce_addr.

 * Support to access target space below 1M for qca6174 and qca9377.

 * If target space is below 1M, the bit[20] of converted CE addr is 0.

 * Otherwise bit[20] of converted CE addr is 1.

/*

 * Diagnostic read/write access is provided for startup/config/debug usage.

 * Caller must guarantee proper alignment, when applicable, and single user

 * at any moment.

 Host buffer address in CE space */

	/*

	 * Allocate a temporary bounce buffer to hold caller's data

	 * to be DMA'ed from Target. This guarantees

	 *   1) 4-byte alignment

	 *   2) Buffer in DMA-able space

	/* The address supplied by the caller is in the

	 * Target CPU virtual address space.

	 *

	 * In order to use this address with the diagnostic CE,

	 * convert it from Target CPU virtual address space

	 * to CE address space

 Request CE to send from Target(!) address to Host buffer */

	/*

	 * Allocate a temporary bounce buffer to hold caller's data

	 * to be DMA'ed to Target. This guarantees

	 *   1) 4-byte alignment

	 *   2) Buffer in DMA-able space

	/*

	 * The address supplied by the caller is in the

	 * Target CPU virtual address space.

	 *

	 * In order to use this address with the diagnostic CE,

	 * convert it from

	 *    Target CPU virtual address space

	 * to

	 *    CE address space

 FIXME: check cast */

 Copy caller's data to allocated DMA buf */

 Set up to receive directly into Target(!) address */

		/*

		 * Request CE to send caller-supplied data that

		 * was copied to bounce buffer to Target(!) address.

 Called by lower (CE) layer when a send to Target completes. */

 no need to call tx completion for NULL pointers */

	/* No need to aquire ce_lock for CE5, since this is the only place CE5

	 * is processed other than init and deinit. Before releasing CE5

	 * buffers, interrupts are disabled. Thus CE5 access is serialized.

let device gain the buffer again*/

 Called by lower (CE) layer when data is received from the Target. */

	/* CE4 polling needs to be done whenever CE pipe which transports

	 * HTT Rx (target->host) is processed.

/* Called by lower (CE) layer when data is received from the Target.

 * Only 10.4 firmware uses separate CE to transfer pktlog data.

 Called by lower (CE) layer when a send to HTT Target completes. */

 no need to call tx completion for NULL pointers */

 Called by lower (CE) layer when HTT data is received from the Target. */

	/* CE4 polling needs to be done whenever CE pipe which transports

	 * HTT Rx (target->host) is processed.

 `i` is equal to `n_items -1` after for() */

	/* fill the gap between the first register section and register

	 * start address

 last section */

 read section to dest memory */

 fill in the gap between this section and the next */

 this was the last section */

 Always returns the length */

 if an error happened returns < 0, otherwise the length */

 if an error happened returns < 0, otherwise the length */

 Copy each section individually. */

	/* No individiual memory sections defined so we can

	 * copy the entire memory region.

		/* To get IRAM dump, the host driver needs to switch target

		 * ram config from DRAM to IRAM.

 Reserve space for the header. */

 Note: the header remains, just with zero length. */

		/*

		 * Decide whether to actually poll for completions, or just

		 * wait for a later chance.

		 * If there seem to be plenty of resources left, then just wait

		 * since checking involves reading a CE register, which is a

		 * relatively expensive operation.

		/*

		 * If at least 50% of the total resources are still available,

		 * don't bother checking again yet.

		/* TODO: Find appropriate register configuration for QCA99X0

		 *  to mask irq/MSI.

		/* TODO: Find appropriate register configuration for QCA99X0

		 *  to unmask irq/MSI.

/*

 * Cleanup residual buffers for device shutdown:

 *    buffers that were enqueued for receive

 *    buffers that were to be sent

 * Note: Buffers that had completed but which were

 * not yet processed are on a completion queue. They

 * are handled when the completion thread shuts down.

	/* Most likely the device has HTT Rx ring configured. The only way to

	 * prevent the device from accessing (and possible corrupting) host

	 * memory is to reset the chip now.

	 *

	 * There's also no known way of masking MSI interrupts on the device.

	 * For ranged MSI the CE-related interrupts can be masked. However

	 * regardless how many MSI interrupts are assigned the first one

	 * is always used for firmware indications (crashes) and cannot be

	 * masked. To prevent the device from asserting the interrupt reset it

	 * before proceeding with cleanup.

 non-zero means we did not time out */

/*

 * Send an interrupt to the device to wake up the Target CPU

 * so it has an opportunity to notice any changed state.

 Download to Target the CE Config and the service-to-CE map */

 Supply Target-side CE configuration */

 configure early allocation */

 first bank is switched to IRAM */

 Tell Target to proceed with initialization */

	/* For QCA6174 we're overriding the Copy Engine 5 configuration,

	 * since it is currently used for other feature.

 Override Host's Copy Engine 5 configuration */

 Override Target firmware's Copy Engine configuration */

 Map from service/endpoint to Copy Engine */

 Last CE is Diagnostic Window */

 this function effectively clears target memory controller assert line */

	/* Make sure the target CPU is not doing anything dangerous, e.g. if it

	 * were to access copy engine while host performs copy engine reset

	 * then it is possible for the device to confuse pci-e controller to

	 * the point of bringing host system to a complete stop (i.e. hang).

	/* Some hardware revisions (e.g. CUS223v2) has issues with cold reset.

	 * It is thus preferred to use warm reset which is safer but may not be

	 * able to recover the device from all possible fail scenarios.

	 *

	 * Warm reset doesn't always work on first try so attempt it a few

	 * times before giving up.

		/* FIXME: Sometimes copy engine doesn't recover after warm

		 * reset. In most cases this needs cold reset. In some of these

		 * cases the device is in such a state that a cold reset may

		 * lock up the host.

		 *

		 * Reading any host interest register via copy engine is

		 * sufficient to verify if device is capable of booting

		 * firmware blob.

 FIXME: QCA6174 requires cold + warm reset to work. */

	/*

	 * Bring the target up cleanly.

	 *

	 * The target may be in an undefined state with an AUX-powered Target

	 * and a Host in WoW mode. If the Host crashes, loses power, or is

	 * restarted (without unloading the driver) then the Target is left

	 * (aux) powered and running. On a subsequent driver load, the Target

	 * is in an unexpected state. We try to catch that here in order to

	 * reset the Target and retry the probe.

	/* Currently hif_power_up performs effectively a reset and hif_stop

	 * resets the chip as well so there's no point in resetting here.

 Nothing to do; the important stuff is in the driver suspend. */

	/* The grace timer can still be counting down and ar->ps_awake be true.

	 * It is known that the device may be asleep after resuming regardless

	 * of the SoC powersave state before suspending. Hence make sure the

	 * device is asleep before proceeding.

 Nothing to do; the important stuff is in the driver resume. */

	/* Suspend/Resume resets the PCI configuration space, so we have to

	 * re-disable the RETRY_TIMEOUT register (0x41) to keep PCI Tx retries

	 * from interfering with C3 CPU state. pci_restore_state won't help

	 * here since it only restores the first 64 bytes pci config header.

 Enable SI clock */

 Configure GPIOs for I2C operation */

 In Swift ASIC - EEPROM clock will be (110MHz/512) = 214KHz */

 set device select byte and for the read operation */

 write transmit data, transfer length, and START bit */

 wait max 1 sec */

 wait for SI_CS_DONE_INT */

 clear SI_CS_DONE_INT */

 extract receive data */

/*

 * Top-level interrupt handler for all PCI interrupts from a Target.

 * When a block of MSI interrupts is allocated, this top-level handler

 * is not used; instead, we directly call the correct sub-handler.

		/* In case of MSI, it is possible that interrupts are received

		 * while NAPI poll is inprogress. So pending interrupts that are

		 * received after processing all copy engine pipes by NAPI poll

		 * will not be handled again. This is causing failure to

		 * complete boot sequence in x86 platform. So before enabling

		 * interrupts safer to check for pending interrupts for

		 * immediate servicing.

 Try MSI */

 MHI failed, try legacy irq next */

	/* Try legacy irq

	 *

	 * A potential race occurs here: The CORE_BASE write

	 * depends on target correctly decoding AXI address but

	 * host won't know when target writes BAR to CORE_CTRL.

	 * This write might get lost if target has NOT written BAR.

	 * For now, fix the race by repeating the write in below

	 * synchronization checking.

 target should never return this */

 the device has crashed so don't bother trying anymore */

 Fix potential race by repeating CORE_BASE writes */

 Put Target, including PCIe, into RESET. */

	/* After writing into SOC_GLOBAL_RESET to put device into

	 * reset and pulling out of reset pcie may not be stable

	 * for any immediate pcie register access and cause bus error,

	 * add delay before any pcie access request to fix this issue.

 Pull Target, including PCIe, out of RESET. */

 Target expects 32 bit DMA. Enforce it. */

 Arrange for access to Target SoC registers. */

	/* Read CHIP_ID before reset to catch QCA9880-AR1A v1 devices that

	 * fall off the bus during chip_reset. These chips have the same pci

	 * device id as the QCA9880 BR4A or 2R4E. So that's why the check.

 QCA988x 2.0 firmware files */

 QCA9887 1.0 firmware files */

 QCA6174 2.1 firmware files */

 QCA6174 3.1 firmware files */

 QCA9377 1.0 firmware files */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2014,2016-2017 Qualcomm Atheros, Inc.

	/* Step 1: Read 4 bytes of the target info and check if it is

	 * the special sentinal version word or the first word in the

	 * version response.

	/* Some SDIO boards have a special sentinal byte before the real

	 * version response.

 Step 1b: Read the version length */

 Step 2: Check the target info length */

 Step 3: Read the rest of the version response */

 copy before roundup to avoid reading beyond buffer*/

 fixup roundup() so `length` zeroes out for last chunk */

 copy the last word into a zero padded buffer */

	/*

	 * Close compressed stream and open a new (fake) one.

	 * This serves mainly to flush Target caches.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2016 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

	/* If the original wait_for_completion() timed out before

	 * {data,mgmt}_tx_completed() was called then we could complete

	 * offchan_tx_completed for a different skb. Prevent this by using

	 * offchan_tx_skb.

 just for sanity */

 we do not own the msdu anymore */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

*******/

 Send */

*******/

 FIXME: why 20 bytes? */

 the skb now belongs to the completion handler */

**********/

 Receive */

**********/

	/* Invalid lookahead flags are actually transmitted by

	 * the target in the HTC control message.

	 * Since this will happen at every boot we silently ignore

	 * the lookahead in this case

 look ahead bytes are valid, copy them over */

 no room left in buffer for record */

 multiple records may be present in a trailer */

 get flags to check for trailer */

 zero length packet with trailer data, just drop these */

 skb is now owned by the rx completion handler */

 handle HTC control message */

			/* this is a fatal error, target should not be

			 * sending unsolicited messages on the ep 0

**************/

 Init/Deinit */

**************/

	/* The WMI control service is the only service with flow control.

	 * Let it have all transmit credits.

		/* Workaround: In some cases the PCI HIF doesn't

		 * receive interrupt for the control response message

		 * even if the buffer was completed. It is suspected

		 * iomap writes unmasking PCI CE irqs aren't propagated

		 * properly in KVM PCI-passthrough sometimes.

	/* The only way to determine if the ready message is an extended

	 * message is from the size.

 special case for HTC pseudo control service */

 Only enable credit flow control for WMI ctrl service */

 wait for response */

 we controlled the buffer creation, it's aligned */

 check response status */

 return assigned endpoint to caller */

 setup the endpoint */

 copy all the callbacks */

 FW/HTC requires 4-byte aligned streams */

 connect to control service */

 Extra setup params used by SDIO */

 registered target arrival callback from the HIF layer */

 setup our pseudo HTC control endpoint connection */

 connect fake service */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 when under memory pressure rx ring refill may fail and needs a retry */

	/* The Full Rx Reorder firmware has no way of telling the host

	 * implicitly when it copied HTT Rx Ring buffers to MAC Rx Ring.

	 * To keep things simple make sure ring is always half empty. This

	 * guarantees there'll be no replenishment overruns possible.

 Clear rx_desc attention word before posting to Rx ring */

	/*

	 * Make sure the rx buffer is updated before available buffer

	 * index to avoid any potential rx ring corruption.

	/* Refilling the whole RX ring buffer proves to be a bad idea. The

	 * reason is RX may take up significant amount of CPU cycles and starve

	 * other tasks, e.g. TX on an ethernet device while acting as a bridge

	 * with ath10k wlan interface. This ended up with very poor performance

	 * once CPU the host system was overwhelmed with RX on ath10k.

	 *

	 * By limiting the number of refills the replenishing occurs

	 * progressively. This in turns makes use of the fact tasklets are

	 * processed in FIFO order. This means actual RX processing can starve

	 * out refilling. If there's not enough buffers on RX ring FW will not

	 * report RX until it is refilled with enough buffers. This

	 * automatically balances load wrt to CPU power.

	 *

	 * This probably comes at a cost of lower maximum throughput but

	 * improves the average and stability.

		/*

		 * Failed to fill it to the desired level -

		 * we'll start a timer and try again next time.

		 * As long as enough buffers are left in the ring for

		 * another A-MPDU rx, no special recovery is needed.

 return: < 0 fatal error, 0 - non chained msdu, 1 chained msdu */

		/* FIXME: we must report msdu payload since this is what caller

		 * expects now

		/*

		 * Sanity check - confirm the HW is finished filling in the

		 * rx data.

		 * If the HW and SW are working correctly, then it's guaranteed

		 * that the HW's MAC DMA is done before this point in the SW.

		 * To prevent the case that we handle a stale Rx descriptor,

		 * just assert for now until we have a way to recover.

 Note: Chained buffers do not contain rx descriptor */

	/*

	 * Don't refill the ring yet.

	 *

	 * First, the elements popped here are still in use - it is not

	 * safe to overwrite them until the matching call to

	 * mpdu_desc_list_next. Second, for efficiency it is preferable to

	 * refill the rx ring with 1 PPDU's worth of rx buffers (something

	 * like 32 x 3 buffers), rather than one MPDU's worth of rx buffers

	 * (something like 3 buffers). Consequently, we'll rely on the txrx

	 * SW to tell us when it is done pulling all the PPDU's rx buffers

	 * out of the rx ring, and then refill it just once.

	/* XXX: The fill level could be changed during runtime in response to

	 * the host processing latency. Is this really worth it?

 Initialize the Rx refill retry timer */

		/* To get legacy rate index band is required. Since band can't

		 * be undefined check if freq is non-zero.

 HT-SIG - Table 20-11 in info2 and info3 */

		/* VHT-SIG-A1 in info2, VHT-SIG-A2 in info3

		 * TODO check this

			/* Hardware doesn't decode VHT-SIG-B into Rx descriptor

			 * so it's impossible to decode MCS. Also since

			 * firmware consumes Group Id Management frames host

			 * has no knowledge regarding group/user position

			 * mapping so it's impossible to pick the correct Nsts

			 * from VHT-SIG-A1.

			 *

			 * Bandwidth and SGI are valid so report the rateinfo

			 * on best-effort basis.

 FIXME: Get real NF */

	/* FIXME: TSF is known only at the end of PPDU, in the last MPDU. This

	 * means all prior MSDUs in a PPDU are reported to mac80211 without the

	 * TSF. Is it worth holding frames until end of PPDU is known?

	 *

	 * FIXME: Can we get/compute 64bit TSF?

 New PPDU starts so clear out the old per-PPDU status. */

 set ampdu last segment flag */

	/* Delivered decapped frame:

	 * [802.11 header]

	 * [crypto param] <-- can be trimmed if !fcs_err &&

	 *                    !decrypt_err && !peer_idx_invalid

	 * [amsdu header] <-- only if A-MSDU

	 * [rfc1042/llc]

	 * [payload]

	 * [FCS] <-- at end, needs to be trimmed

	/* Some hardwares(QCA99x0 variants) limit number of msdus in a-msdu when

	 * deaggregate, so that unwanted MSDU-deaggregation is avoided for

	 * error packets. If limit exceeds, hw sends all remaining MSDUs as

	 * a single last MSDU with this msdu limit error set.

	/* If MSDU limit error happens, then don't warn on, the partial raw MSDU

	 * without first MSDU is expected in that case, and handled later here.

 This probably shouldn't happen but warn just in case */

 This probably shouldn't happen but warn just in case */

 Push original 80211 header */

	/* In most cases this will be true for sniffed frames. It makes sense

	 * to deliver them as-is without stripping the crypto param. This is

	 * necessary for software based decryption.

	 *

	 * If there's no error then the frame is decrypted. At least that is

	 * the case for frames that come in via fragmented rx indication.

	/* The payload is decrypted so strip crypto params. Start from tail

	 * since hdr is used to compute some stuff.

 Tail */

 MIC */

 ICV */

 MMIC */

 Head */

	/* Delivered decapped frame:

	 * [nwifi 802.11 header] <-- replaced with 802.11 hdr

	 * [rfc1042/llc]

	 *

	 * Note: The nwifi header doesn't have QoS Control and is

	 * (always?) a 3addr frame.

	 *

	 * Note2: There's no A-MSDU subframe header. Even if it's part

	 * of an A-MSDU.

 pull decapped header and copy SA & DA */

 push original 802.11 header */

	/* original 802.11 header has a different DA and in

	 * case of 4addr it may also have different SA

	/* Delivered decapped frame:

	 * [eth header] <-- replaced with 802.11 hdr & rfc1042/llc

	 * [payload]

 pull decapped header and copy SA & DA */

 push rfc1042/llc/snap */

 push original 802.11 header */

	/* original 802.11 header has a different DA and in

	 * case of 4addr it may also have different SA

	/* Delivered decapped frame:

	 * [amsdu header] <-- replaced with 802.11 hdr

	 * [rfc1042/llc]

	 * [payload]

	/* First msdu's decapped header:

	 * [802.11 header] <-- padded to 4 bytes long

	 * [crypto param] <-- padded to 4 bytes long

	 * [amsdu header] <-- only if A-MSDU

	 * [rfc1042/llc]

	 *

	 * Other (2nd, 3rd, ..) msdu's decapped header:

	 * [amsdu header] <-- only if A-MSDU

	 * [rfc1042/llc]

	/* First MSDU's Rx descriptor in an A-MSDU contains full 802.11

	 * decapped header. It'll be used for undecapping of each MSDU.

	/* Each A-MSDU subframe will use the original header as the base and be

	 * reported as a separate MSDU so strip the A-MSDU bit from QoS Ctl.

 Some attention flags are valid only in the last MSDU. */

	/* Note: If hardware captures an encrypted frame that it can't decrypt,

	 * e.g. due to fcs error, missing peer or invalid key data it will

	 * report the frame as raw.

 Clear per-MPDU flags while leaving per-PPDU flags intact. */

	/* Firmware reports all necessary management frames via WMI already.

	 * They are not reported to monitor interfaces at all so pass the ones

	 * coming via HTT to monitor interfaces instead. This simplifies

	 * matters a lot.

			/* Discard the fragment with invalid PN or multicast DA

		/* Undecapping involves copying the original 802.11 header back

		 * to sk_buff. If frame is protected and hardware has decrypted

		 * it then remove the protected bit.

 Setup per-MSDU flags */

	/* TODO:  Might could optimize this by using

	 * skb_try_coalesce or similar method to

	 * decrease copying, or maybe get mac80211 to

	 * provide a way to just receive a list of

	 * skb?

 Allocate total length all at once. */

 TODO:  bump some rx-oom error stat */

		/* put it back together so we can free the

		 * whole list at once.

	/* Walk list again, copying contents into

	 * msdu_head

	/* FIXME: Current unchaining logic can only handle simple case of raw

	 * msdu chaining. If decapping is other than raw the chaining may be

	 * more complex and this isn't handled by the current code. Don't even

	 * try re-constructing such frames - it'll be pretty much garbage.

 Return in case of non-aggregated msdu */

 First msdu flag is not set for the first msdu of the list */

	/* Validate if the amsdu has a proper first subframe.

	 * There are chances a single msdu can be received as amsdu when

	 * the unauthenticated amsdu flag of a QoS header

	 * gets flipped in non-SPP AMSDU's, in such cases the first

	 * subframe has llc/snap header in place of a valid da.

	 * return false if the da matches rfc1042 pattern

		/* FIXME: It's probably a good idea to reboot the

		 * device instead of leaving it inoperable.

 only for ret = 1 indicates chained msdus */

	/* I have not yet seen any case where num_mpdu_ranges > 1.

	 * qcacld does not seem handle that case either, so we introduce the

	 * same limitiation here as well.

	/* Strip off all headers before the MAC header before delivery to

	 * mac80211

 SDIO firmware does not provide signal */

	/* Not entirely sure about this, but all frames from the chipset has

	 * the protected flag set even though they have already been decrypted.

	 * Unmasking this flag is necessary in order for mac80211 not to drop

	 * the frame.

	 * TODO: Verify this is always the case or find out a way to check

	 * if there has been hw decryption.

 Ext IV */

 Key ID */

 pn 0, pn 1 */

 pn 1, pn 3 , pn 34 , pn 5 */

 TSC 0 */

 TSC 1 */

 TSC 2 , TSC 3 , TSC 4 , TSC 5*/

	/* We have delivered the skb to the upper layers (mac80211) so we

	 * must not free it.

	/* Tell the caller that it must free the skb since we have not

	 * consumed it

 the ExtIV bit is always set to 1 for TKIP */

 the ExtIV bit is always set to 1 for TKIP */

 the ExtIV bit is always set to 1 for CCMP */

 Discard the fragment with multicast DA */

	/* Tell the caller that it must free the skb since we have not

	 * consumed it

			/* Total no of MSDUs should be even,

			 * if odd MSDUs are sent firmware fills

			 * last msdu id with 0xffff

		/* kfifo_put: In practice firmware shouldn't fire off per-CE

		 * interrupt and main interrupt (MSI/-X range case) for the same

		 * HTC service so it should be safe to use kfifo_put w/o lock.

		 *

		 * From kfifo_put() documentation:

		 *  Note that with only one concurrent reader and one concurrent

		 *  writer, you don't need extra locking to use these macro.

	/* Offloaded frames are already decrypted but firmware insists they are

	 * protected in the 802.11 header. Strip the flag.  Otherwise mac80211

	 * will drop the frame.

		/* Offloaded frames don't have Rx descriptor. Instead they have

		 * a short meta information header.

		/* Offloaded rx header length isn't multiple of 2 nor 4 so the

		 * actual payload is unaligned. Align the frame.  Otherwise

		 * mac80211 complains.  This shouldn't reduce performance much

		 * because these offloaded frames are rare.

		/* FIXME: The frame is NWifi. Re-construct QoS Control

		 * if possible later.

	/* The event can deliver more than 1 A-MSDU. Each A-MSDU is later

	 * extracted and processed.

	/* Offloaded frames are very different and need to be handled

	 * separately.

			/* Note: The in-order indication may report interleaved

			 * frames from different PPDUs meaning reported rx rate

			 * to mac80211 isn't accurate/reliable. It's still

			 * better to report something than nothing though. This

			 * should still give an idea about rx rate to the user.

 Should not happen. */

 TODO: free resp_id */

		/* It is okay to release the lock and use txq because RCU read

		 * lock is held.

 FIXME: request fw restart */

		/* It is okay to release the lock and use txq because RCU read

		 * lock is held.

 Free the indication buffer */

	/* Firmware's rate control skips broadcast/management frames,

	 * if host has configure fixed rates and in some other special cases.

 This is hacky, FW sends CCK rate 5.5Mbps as 6 */

 confirm alignment */

		/* Firmware can return tx frames if it's unable to fully

		 * process them and suspects host may be able to fix it. ath10k

		 * sends all tx frames as already inspected so this shouldn't

		 * happen unless fw has a bug.

		/* Ignore this event because mac80211 takes care of Rx

		 * aggregation reordering.

	/* Process pending frames before dequeuing more data

	 * from hardware.

 Deliver received data after processing data from hardware */

	/* From NAPI documentation:

	 *  The napi poll() function may also process TX completions, in which

	 *  case if it processes the entire TX ring then it should count that

	 *  work as the rest of the budget.

	/* kfifo_get: called only within txrx_tasklet so it's neatly serialized.

	 * From kfifo_get() documentation:

	 *  Note that with only one concurrent reader and one concurrent writer,

	 *  you don't need extra locking to use these macro.

	/* In case of rx failure or more data to read, report budget

	 * to reschedule NAPI poll

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2018 The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2018 The Linux Foundation. All rights reserved.

		/* end = 1 triggers a CRC check on the BDF.  If this fails, we

		 * get a QMI_ERR_MALFORMED_MSG_V01 error, but the FW is still

		 * willing to use the BDF.  For some platforms, all the valid

		 * released BDFs fail this CRC check, so attempt to detect this

		 * scenario and treat it as non-fatal.

 older FW didn't support this request, which is not fatal */

	/*

	 * HACK: sleep for a while inbetween receiving the msa info response

	 * and the XPU update to prevent SDM845 from crashing due to a security

	 * violation, when running MPSS.AT.4.0.c2-01184-SDM845_GEN_PACK-1.

	/*

	 * The del_server event is to be processed only if coming from

	 * the qmi server. The qmi infrastructure sends del_server, when

	 * any client releases the qmi handle. In this case do not process

	 * this del_server event.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014-2015 Qualcomm Atheros, Inc.

 Can't get temperature when the card is off */

 display in millidegree celcius */

	/* Do not register hwmon device when temperature reading is not

	 * supported by firmware

	/* Avoid linking error on devm_hwmon_device_register_with_groups, I

	 * guess linux/hwmon.h is missing proper stubs.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 FIXME: most of these should be readonly */

 uses same binaries as hw3.0 */

		/* Can do only 2x2 VHT160 or 80+80. 1560Mbps is 4x4 80Mhz

		 * or 2x2 160Mhz, long-guard-interval.

		/* Can do only 1x1 VHT160 or 80+80. 780Mbps is 2x2 80Mhz or

		 * 1x1 160Mhz, long-guard-interval.

 make sure that ath10k_core_fw_feature_str[] gets updated */

 tell target which HTC version it is used*/

 set the firmware mode to STA/IBSS/AP */

 TODO following parameters need to be re-visited. */

 num_device */

 Firmware mode */

 FIXME: Why FW_MODE_AP ??.*/

 mac_addr_method */

 firmware_bridge */

 fwsubmode */

 We do all byte-swapping on the host */

 FW descriptor/Data swap flags */

	/* Some devices have a special sanity check that verifies the PCI

	 * Device ID is written to this host interest var. It is known to be

	 * required to boot QCA6164.

 Only one string exists (per spec) */

 Copy extension name without magic suffix */

	/* Check if device supports to download firmware via

	 * diag copy engine. Downloading firmware via diag CE

	 * greatly reduces the time to download firmware.

 firmware upload via diag ce was successful */

 pre-cal-<bus>-<id>.bin */

 cal-<bus>-<id>.bin */

 calibration file is optional, don't print any warnings */

 go through ATH10K_BD_IE_BOARD_ elements */

 no match found */

 jump over the padding */

 no match found */

 no match found, continue */

 either found or error, so stop searching */

 no match found, continue */

 either found or error, so stop searching */

 jump over the padding */

 return result of parse_bd_ie_board() or -ENOENT */

 Skip if already fetched during board data download */

 magic has extra null byte padded */

 magic is padded to 4 bytes */

 attempt to find boardname in the IE list */

 if we didn't find it and have a fallback name, try that */

 strlen(',variant=') + strlen(ar->id.bdf_ext) */

 Fallback if returned board id is zero */

 With variant and chip id */

 Without variant and only chip-id */

 Without variant and without chip-id */

 Extended board data download */

 Not fetching ext_board_data if ext board id is 0 */

 OTP is optional */

 As of now pre-cal is valid for 10_4 variants */

		/* Device Tree is optional, don't print any warnings if

		 * there's no node for ath10k.

 The calibration data node is optional */

 first fetch the firmware file (firmware-*.bin) */

 magic also includes the null byte, check that as well */

 jump over the padding */

 loop elements */

 jump over the padding */

 calibration file is optional, don't check for any errors */

 we end up here if we couldn't fetch any firmware */

	/*

	 * Explicitly setting UART prints to zero as target turns it on

	 * based on scratch registers.

 Set the UART baud rate to 19200. */

	/* Place a barrier to make sure the compiler doesn't reorder

	 * CRASH_FLUSH and calling other functions.

	/* TODO: We can have one instance of cancelling coverage_class_work by

	 * moving it to ath10k_halt(), so that both stop() and restart() would

	 * call that but it takes conf_mutex() and if we call cancel_work_sync()

	 * with conf_mutex it will deadlock.

		/* this can happen if driver is being unloaded

		 * or if the crash happens during FW probing

 hw restart might be requested from multiple places */

		/* Workaround:

		 *

		 * Firmware A-MSDU aggregation breaks with RAW Tx encap mode

		 * and causes enormous performance issues (malformed frames,

		 * etc).

		 *

		 * Disabling A-MSDU makes RAW mode stable with heavy traffic

		 * albeit a bit slower compared to regular operation.

	/* Backwards compatibility for firmwares without

	 * ATH10K_FW_IE_WMI_OP_VERSION.

	/* Backwards compatibility for firmwares without

	 * ATH10K_FW_IE_HTT_OP_VERSION.

	/* WMI and HTT may use separate HIF pipes and are not guaranteed to be

	 * serialized properly implicitly.

	 *

	 * Moreover (most) WMI commands have no explicit acknowledges. It is

	 * possible to infer it implicitly by poking firmware with echo

	 * command - getting a reply means all preceding comments have been

	 * (mostly) processed.

	 *

	 * In case of vdev create/delete this is sufficient.

	 *

	 * Without this it's possible to end up with a race when HTT Rx ring is

	 * started before vdev create/delete hack is complete allowing a short

	 * window of opportunity to receive (and Tx ACK) a bunch of frames.

	/* all 10.x firmware versions support thermal throttling but don't

	 * advertise the support via service flags so we have to hardcode

	 * it here

	/* copy target iram feature must work also when

	 * ATH10K_FW_CRASH_DUMP_RAM_DATA is disabled, so

	 * _ath10k_coredump_get_mem_layout() to accomplist that

		/* if CONFIG_DEV_COREDUMP is disabled we get NULL, then

		 * just silently disable the feature by doing nothing

 Enable hardware clock to speed up firmware download */

		/* Some of qca988x solutions are having global reset issue

		 * during target initialization. Bypassing PLL setting before

		 * downloading firmware and letting the SoC run on REF_CLK is

		 * fixing the problem. Corresponding firmware change is also

		 * needed to set the clock source once the target is

		 * initialized.

	/* If firmware indicates Full Rx Reorder support it must be used in a

	 * slightly different manner. Let HTT code know.

 Enable vdev stats by default */

		/* 10.4 firmware supports BT-Coex without reloading firmware

		 * via pdev param. To support Bluetooth coexistence pdev param,

		 * WMI_COEX_GPIO_SUPPORT of extended resource config should be

		 * enabled always.

		 *

		 * We can still enable BTCOEX if firmware has the support

		 * eventhough btceox_support value is

		 * ATH10K_DT_BTCOEX_NOT_FOUND

	/* Some firmware revisions do not properly set up hardware rx filter

	 * registers.

	 *

	 * A known example from QCA9880 and 10.2.4 is that MAC_PCU_ADDR1_MASK

	 * is filled with 0s instead of 1s allowing HW to respond with ACKs to

	 * any frames that matches MAC_PCU_RX_FILTER which is also

	 * misconfigured to accept anything.

	 *

	 * The ADDR1 is programmed using internal firmware structure field and

	 * can't be (easily/sanely) reached from the driver explicitly. It is

	 * possible to implicitly make it correct by creating a dummy vdev and

	 * then deleting it.

 we don't care about HTT in UTF mode */

 try to suspend target */

/* mac80211 manages fw/hw initialization through start/stop hooks. However in

 * order to know what hw capabilities should be advertised to mac80211 it is

 * necessary to load the firmware (and tear it down immediately since start

 * hook will try to init it again) before registering

			/* pre calibration data download is not necessary

			 * for all the chipsets. Ignore failures and continue.

 peer stats are enabled by default */

	/* TODO: It's probably a good idea to release device from the driver

	 * but calling device_release_driver() here will cause a deadlock.

	/* Stop spectral before unregistering from mac80211 to remove the

	 * relayfs debugfs file cleanly. Otherwise the parent debugfs tree

	 * would be already be free'd recursively, leading to a double free.

	/* We must unregister from mac80211 before we stop HTC and HIF.

	 * Otherwise we will fail to submit commands to FW and mac80211 will be

	 * unhappy about callback failures.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 ms */

	/* Stat data may exceed htc-wmi buffer limit. In such case firmware

	 * splits the stats data and delivers it in a ping-pong fashion of

	 * request cmd-update event.

	 *

	 * However there is no explicit end-of-data. Instead start-of-data is

	 * used as an implicit one. This works as follows:

	 *  a) discard stat update events until one with pdev stats is

	 *     delivered - this skips session started at end of (b)

	 *  b) consume stat update events until another one with pdev stats is

	 *     delivered which is treated as end-of-data and is itself discarded

			/* Although this is unlikely impose a sane limit to

			 * prevent firmware from DoS-ing the host.

	/* In some cases lists have been spliced and cleared. Free up

	 * resources if that is not the case.

 This is a clean assert crash in firmware. */

 big enough number so that firmware asserts */

/* Simulate firmware crash:

 * 'soft': Call wmi command causing firmware hang. This firmware hang is

 * recoverable by warm firmware reset.

 * 'hard': Force firmware crash by setting any vdev parameter for not allowed

 * vdev id. This is hard firmware crash because it is recoverable only by cold

 * firmware reset.

 filter partial writes and invalid commands */

 drop the possible '\n' from the end */

		/* 0x7fff is vdev id, and it is always out of range for all

		 * firmware variants in order to force a firmware crash.

 htt stats are disabled */

 max 17 bit masks (for now) */

 default if user did not specify */

/* TODO:  Would be nice to always support ethtool stats, would need to

 * move the stats storage out of ath10k_debug, or always have ath10k_debug

 * struct available..

 This generally cooresponds to the debugfs fw_stats file */

 in .5 dbM I think */

 fcs_bad */

 frame with FCS error, dropped late in kernel */

 FCS, MIC, ENC */

 just print a warning and try to use older results */

 no results available so just return zeroes */

 ppdu reaped */

 tx bytes */

 rx bytes */

 there's no way to switch back to the firmware default */

 firmware is not running, nothing else to do */

 continue normally anyway, this isn't serious */

 not serious */

 not serious */

 not serious */

 not serious */

	/* Must not use _sync to avoid deadlock, we do that in

	 * ath10k_debug_destroy(). The check for htt_stats_mask is to avoid

	 * warning from del_timer().

	/* Just check for the first vif alone, as all the vifs will be

	 * sharing the same channel and if the channel is disabled, all the

	 * vifs will share the same 'is_started' state.

 CONFIG_ATH10K_DEBUGFS */

 tracing code doesn't like null strings :/ */

 CONFIG_ATH10K_DEBUG */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2004-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012,2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2016-2017 Erik Stromdahl <erik.stromdahl@gmail.com>

 inlined helper functions */

 sdio/mmc functions */

 give us some time to enable, in ms */

	/* For some reason toio() doesn't have const for the buffer, need

	 * an ugly hack to workaround that.

 HIF mbox functions */

			/* Only read lookahead's from RX trailers

			 * for the last packet in a bundle.

 The RX complete handler now owns the skb...*/

	/* Free all packets that was not passed on to the RX completion

	 * handler...

	/* Allocate bndl_cnt extra skb's for the bundle.

	 * The package containing the

	 * ATH10K_HTC_FLAG_BUNDLE_MASK flag is not included

	 * in bndl_cnt. The skb for that packet will be

	 * allocated separately.

			/* HTC header indicates that every packet to follow

			 * has the same padded length so that it can be

			 * optimally fetched as a full bundle.

 next buffer will be the last in the bundle */

		/* Allocate skb for packet. If the packet had the

		 * ATH10K_HTC_FLAG_BUNDLE_MASK flag set, all bundled

		 * packet skb's have been allocated in the previous step.

 Free all packets that was not successfully fetched. */

/* This is the timeout for mailbox processing done in the sdio irq

 * handler. The timeout is deliberately set quite high since SDIO dump logs

 * over serial port can/will add a substantial overhead to the processing

 * (if enabled).

	/* Copy the lookahead obtained from the HTC register table into our

	 * temp array as a start value.

		/* Try to allocate as many HTC RX packets indicated by

		 * n_lookaheads.

			/* A recv bundle was detected, force IRQ status

			 * re-check again.

		/* Process fetched packets. This will potentially update

		 * n_lookaheads depending on if the packets contain lookahead

		 * reports.

		/* For SYNCH processing, if we get here, we are running

		 * through the loop again due to updated lookaheads. Set

		 * flag that we should re-check IRQ status registers again

		 * before leaving IRQ processing, this can net better

		 * performance in high throughput situations.

 TODO: Add firmware crash handling */

	/* read counter to clear the interrupt, the debug error interrupt is

	 * counter 0.

	/* NOTE: other modules like GMBOX may use the counter interrupt for

	 * credit flow control on other counters, we only need to check for

	 * the debug assertion counter interrupt.

 Clear the interrupt */

 set W1C value to clear the interrupt, this hits the register first */

 Clear the interrupt */

	/* Set up the register transfer buffer to hit the register 4 times,

	 * this is done to make the access 4-byte aligned to mitigate issues

	 * with host bus interconnects that restrict bus transfer lengths to

	 * be a multiple of 4-bytes.

	 *

	 * Set W1C value to clear the interrupt, this hits the register first.

	/* int_status_en is supposed to be non zero, otherwise interrupts

	 * shouldn't be enabled. There is however a short time frame during

	 * initialization between the irq register and int_status_en init

	 * where this can happen.

	 * We silently ignore this condition.

	/* Read the first sizeof(struct ath10k_irq_proc_registers)

	 * bytes of the HTC register table. This

	 * will yield us the value of different int status

	 * registers and the lookahead registers.

 Update only those registers that are enabled */

 Look at mbox status */

	/* Mask out pending mbox value, we use look ahead as

	 * the real flag for mbox processing.

	/* NOTE: HIF implementation guarantees that the context of this

	 * call allows us to perform SYNCHRONOUS I/O, that is we can block,

	 * sleep or call any API that can block or switch thread/task

	 * contexts. This is a fully schedulable context.

 now, handle the rest of the interrupts */

 CPU Interrupt */

 Error Interrupt */

 Counter Interrupt */

	/* An optimization to bypass reading the IRQ status registers

	 * unecessarily which can re-wake the target, if upper layers

	 * determine that we are in a low-throughput mode, we can rely on

	 * taking another interrupt rather than re-checking the status

	 * registers which can re-wake the target.

	 *

	 * NOTE : for host interfaces that makes use of detecting pending

	 * mbox messages at hif can not use this optimization due to

	 * possible side effects, SPI requires the host to drain all

	 * messages from the mailbox before exiting the ISR routine.

			/* from QCA6174 2.0(0x504), the width has been extended

			 * to 56K

 BMI functions */

 Read the counter register to get the command credits */

		/* Hit the credit counter with a 4-byte access, the first byte

		 * read will hit the counter and cause a decrement, while the

		 * remaining 3 bytes has no effect. The rationale behind this

		 * is to make all HIF accesses 4-byte aligned.

		/* The counter is only 8 bits.

		 * Ignore anything in the upper 3 bytes

 all we really want is one bit */

 No response expected */

	/* During normal bootup, small reads may be required.

	 * Rather than issue an HIF Read and then wait as the Target

	 * adds successive bytes to the FIFO, we wait here until

	 * we know that response data is available.

	 *

	 * This allows us to cleanly timeout on an unexpected

	 * Target failure rather than risk problems at the HIF level.

	 * In particular, this avoids SDIO timeouts and possibly garbage

	 * data on some host controllers.  And on an interconnect

	 * such as Compact Flash (as well as some SDIO masters) which

	 * does not provide any indication on data timeout, it avoids

	 * a potential hang or garbage response.

	 *

	 * Synchronization is more difficult for reads larger than the

	 * size of the MBOX FIFO (128B), because the Target is unable

	 * to push the 129th byte of data until AFTER the Host posts an

	 * HIF Read and removes some FIFO data.  So for large reads the

	 * Host proceeds to post an HIF Read BEFORE all the data is

	 * actually available to read.  Fortunately, large BMI reads do

	 * not occur in practice -- they're supported for debug/development.

	 *

	 * So Host/Target BMI synchronization is divided into these cases:

	 *  CASE 1: length < 4

	 *        Should not happen

	 *

	 *  CASE 2: 4 <= length <= 128

	 *        Wait for first 4 bytes to be in FIFO

	 *        If CONSERVATIVE_BMI_READ is enabled, also wait for

	 *        a BMI command credit, which indicates that the ENTIRE

	 *        response is available in the FIFO

	 *

	 *  CASE 3: length > 128

	 *        Wait for the first 4 bytes to be in FIFO

	 *

	 * For most uses, a small timeout should be sufficient and we will

	 * usually see a response quickly; but there may be some unusual

	 * (debug) cases of BMI_EXECUTE where we want an larger timeout.

	 * For now, we use an unbounded busy loop while waiting for

	 * BMI_EXECUTE.

	 *

	 * If BMI_EXECUTE ever needs to support longer-latency execution,

	 * especially in production, this code needs to be enhanced to sleep

	 * and yield.  Also note that BMI_COMMUNICATION_TIMEOUT is currently

	 * a function of Host processor speed.

 We always read from the start of the mbox address */

 sdio async handling functions */

/* To improve throughput use workqueue to deliver packets to HTC layer,

 * this way SDIO bus is utilised much better.

	/* Allocate a bus request for the message and queue it on the

	 * SDIO workqueue.

 IRQ handler */

	/* Release the host during interrupts so we can pick it back up when

	 * we process commands.

 sdio HIF functions */

	/* Wait for hardware to initialise. It should take a lot less than

	 * 20 ms but let's be conservative here.

 Disable the card */

 Write TX data to the end of the mbox address space */

 Enable all but CPU interrupts */

	/* NOTE: There are some cases where HIF can do detection of

	 * pending mbox messages which is disabled now.

	/* Set up the CPU Interrupt Status Register, enable CPU sourced interrupt #0

	 * #0 is used for report assertion from target

 Set up the Error Interrupt status Register */

	/* Enable Counter interrupt status register to get fatal errors for

	 * debugging.

 HIF diagnostics */

 set window register to start read cycle */

 read the data */

 set write data */

 set window register, which starts the write cycle */

 HIF start/stop */

	/* Sleep 20 ms before HIF interrupts are disabled.

	 * This will give target plenty of time to process the BMI done

	 * request before interrupts are disabled.

	/* eid 0 always uses the lower part of the extended mailbox address

	 * space (ext_info[0].htc_ext_addr).

 Register the isr */

 Enable sleep and then disable it again */

 Wait for 20ms for the written value to take effect */

 disable all interrupts */

	/* Wait for the completion of the IRQ disable request.

	 * If there is a timeout we will try to disable irq's anyway.

 Free all bus requests that have not been handled */

 need to set sdio settings after power is cut from sdio */

	/* For sdio, we are interested in the mapping between eid

	 * and pipeid rather than service_id to pipe_id.

	 * First we find out which eid has been allocated to the

	 * service...

	/* Then we create the simplest mapping possible between pipeid

	 * and eid

	/* Normally, HTT will use the upper part of the extended

	 * mailbox address space (ext_info[1].htc_ext_addr) and WMI ctrl

	 * the lower part (ext_info[0].htc_ext_addr).

	 * If fw wants swapping of mailbox addresses, the opposite is true.

		/* HTC ctrl ep mbox address has already been setup in

		 * ath10k_sdio_hif_start

	/* HTC ctrl ep (SVC id 1) always has eid (and pipe_id in our

	 * case) == 0

/* Empty handlers so that mmc subsystem doesn't remove us entirely during

 * suspend. We instead follow cfg80211 suspend/resume handlers.

 CONFIG_PM_SLEEP */

	/* fill the gap between the first register section and register

	 * start address

 last section */

 read section to dest memory */

 fill in the gap between this section and the next */

 if an error happened returns < 0, otherwise the length */

 Copy each section individually. */

	/* No individiual memory sections defined so we can

	 * copy the entire memory region.

 Reserve space for the header. */

 Note: the header remains, just with zero length. */

	/* Assumption: All SDIO based chipsets (so far) are QCA6174 based.

	 * If there will be newer chipsets that does not use the hw reg

	 * setup as defined in qca6174_regs and qca6174_values, this

	 * assumption is no longer valid and hw_rev must be setup differently

	 * depending on chipset.

 TODO: don't know yet how to get chip_id with SDIO */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2005-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 MAIN WMI cmd track */

 10.X WMI cmd track */

 10.2.4 WMI cmd track */

 10.4 WMI cmd track */

 MAIN WMI VDEV param map */

 10.X WMI VDEV param map */

 firmware 10.2 specific mappings */

 Minus 10 to get a defined 5G channel frequency*/

 The center frequency of the entire VHT160 */

 mode & flags share storage */

 try to send pending beacons first. they take priority */

 try to send pending beacons first. they take priority */

		/* One suspected reason scan can be completed while starting is

		 * if firmware fails to deliver all scan events to the host,

		 * e.g. when transport pipe is full. This has been observed

		 * with spectral scan phyerr events starving wmi transport

		 * pipe. In such case the "scan completed" event should be (and

		 * is) ignored by the host as it may be just firmware's scan

		 * state machine recovering.

/* If keys are configured, HW decrypts all frames

 * with protected bit set. Mark such frames as decrypted.

	/* the WMI buffer might've ended up being padded to 4 bytes due to HTC

	 * trailer with credit update. Trim the excess garbage.

 Make sure bytes added for padding are removed. */

	/* FW delivers WEP Shared Auth frame with Protected Bit set and

	 * encrypted payload. However in case of PMF it delivers decrypted

	 * frames with Protected Bit set.

	/* qca99x0 based FW delivers broadcast or multicast management frames

	 * (ex: group privacy action frames in mesh) as encrypted payload.

	/* Hardware can Rx CCK rates on 5GHz. In that case phy_mode is set to

	 * MODE_11B. This means phy_mode is not a reliable source for the band

	 * of mgmt rx.

		/* Shouldn't happen unless list of advertised channels to

		 * mac80211 has been changed.

	/* Firmware is guaranteed to report all essential management frames via

	 * WMI while it can deliver some extra via HTT. Since there can be

	 * duplicates split the reporting wrt monitor/sniffing.

/*

 * Handle the channel info event for firmware which only sends one

 * chan_info event per scanned channel.

/*

 * Handle the channel info event for firmware which sends chan_info

 * event in pairs(start and stop events) for every scanned channel.

 fw doesn't implement vdev stats */

 fw doesn't implement vdev stats */

 FIXME: expose 10.2 specific values */

		/* FIXME: expose values to userspace

		 *

		 * Note: Even though this loop seems to do nothing it is

		 * required to parse following sub-structures properly.

 fw doesn't implement vdev stats */

 FIXME: expose 10.2 specific values */

 FIXME: expose 10.2 specific values */

		/* FIXME: expose values to userspace

		 *

		 * Note: Even though this loop seems to do nothing it is

		 * required to parse following sub-structures properly.

 fw doesn't implement vdev stats */

 FIXME: expose 10.2 specific values */

		/* FIXME: expose values to userspace

		 *

		 * Note: Even though this loop seems to do nothing it is

		 * required to parse following sub-structures properly.

		/* Ignore vdev stats here as it has only vdev id. Actual vdev

		 * stats will be retrieved from vdev extended stats.

		/* FIXME: expose values to userspace

		 *

		 * Note: Even though this loop seems to do nothing it is

		 * required to parse following sub-structures properly.

		/* Setup is done one way or another though, so we should still

		 * do the completion, so don't return here.

/*

 * FIXME

 *

 * We don't report to mac80211 sleep state of connected

 * stations. Due to this mac80211 can't fill in TIM IE

 * correctly.

 *

 * I know of no way of getting nullfunc frames that contain

 * sleep transition from connected stations - these do not

 * seem to be sent from the target to the host. There also

 * doesn't seem to be a dedicated event for that. So the

 * only way left to do this would be to read tim_bitmap

 * during SWBA.

 *

 * We could probably try using tim_bitmap from SWBA to tell

 * mac80211 which stations are asleep and which are not. The

 * problem here is calling mac80211 functions so many times

 * could take too long and make us miss the time to submit

 * the beacon to the target.

 *

 * So as a workaround we try to extend the TIM IE if there

 * is unicast buffered for stations with aid > 7 and fill it

 * in ourselves.

	/* When FW reports 0 in tim_len, ensure atleast first byte

	 * in tim_bitmap is considered for pvm calculation.

	/* if next SWBA has no tim_changed the tim_bitmap is garbage.

	 * we must copy the bitmap upon change and reuse it later

		/* FW reports either length 0 or length based on max supported

		 * station. so we calculate this on our own

 fixed parameters */

 exclude dtim count, dtim period, bmap ctl */

		/* If this happens there were some changes in firmware and

		 * ath10k should update the max size of tim_info array.

		/* If this happens there were some changes in firmware and

		 * ath10k should update the max size of tim_info array.

		/* If this happens there were some changes in firmware and

		 * ath10k should update the max size of tim_info array.

 Exclude 4 byte guard length */

		/* 10.4 firmware doesn't have p2p support. notice of absence

		 * info can be ignored for now.

		/* TODO: Only first 4 word from tim_bitmap is dumped.

		 * Extend debug code to dump full tim_bitmap.

		/* mac80211 would have already asked us to stop beaconing and

		 * bring the vdev down, so continue in that case

		/* There are no completions for beacons so wait for next SWBA

		 * before telling mac80211 to decrement CSA counter

		 *

		 * Once CSA counter is completed stop sending beacons until

		 * actual channel switch is done

	/* Control radar events reporting in debugfs file

	 * dfs_block_radar_events

		/* DFS Confirmation status event received and

		 * necessary action completed.

		/* DFS Confirmation event not received from FW.Considering this

		 * as real radar.

	/* Reset state to allow sending confirmation on consecutive radar

	 * detections, unless radar confirmation is disabled/stopped.

 fetch target operating channel during channel change */

 report event to DFS pattern detector */

	/* hardware store this as 8 bit signed value,

	 * set to zero if negative number

		/* Consecutive radar indications need not be

		 * sent to the firmware until we get confirmation

		 * for the previous detected radar.

TODO Find sidx_min and sidx_max */

 false event detection */

 Skip event if DFS disabled */

 10.4 firmware always reports only one phyerr */

 Check number of included events */

	/* Even in case of radar detection failure we follow the same

	 * behaviour as if radar is detected i.e to switch to a different

	 * channel.

 for some reason the debug prints end with \n, remove that */

 the last byte is always reserved for the null character */

 Create the rate code table based on the chains supported */

 Fill CCK rate code */

 Fill OFDM rate code */

 Fill HT20 rate code */

 Fill HT40 rate code */

 Fill VHT20 rate code */

 Fill VHT40 rate code */

 Fill VHT80 rate code */

	/* Deliberately skipping ev->sys_cap_info as WMI and WMI-TLV have

	 * different values. We would need a translation to handle that,

	 * but as we don't currently need anything from sys_cap_info from

	 * WMI interface (only from WMI-TLV) safest it to skip it.

	/* TODO: Adjust max peer count for cases like WMI_SERVICE_RATECTRL_CACHE

	 * and WMI_SERVICE_IRAM_TIDS, etc.

	/* Either this event is received during boot time or there is a change

	 * in memory requirement from firmware when compared to last request.

	 * Free any old memory and do a fresh allocation based on the current

	 * memory requirement.

			/* number of units to allocate is number of

			 * peers, 1 extra for self peer on target

			 * this needs to be tied, host and target

			 * can get out of sync

	/*

	 * Initialization of "arg.service_map_ext_valid" to ZERO is necessary

	 * for the below logic to work.

		/* This call only ensures that the modified coverage class

		 * persists in case the firmware sets the registers back to

		 * their default value. So calling it is only necessary if the

		 * coverage class has a non-zero value.

 mgmt_rx() owns the skb now! */

	/* Ready event must be handled normally also in UTF mode so that we

	 * know the UTF firmware has booted, others we are just bypass WMI

	 * events to testmode.

 mgmt_rx() owns the skb now! */

 ignore utf events */

	/* Ready event must be handled normally also in UTF mode so that we

	 * know the UTF firmware has booted, others we are just bypass WMI

	 * events to testmode.

 mgmt_rx() owns the skb now! */

	/* Ready event must be handled normally also in UTF mode so that we

	 * know the UTF firmware has booted, others we are just bypass WMI

	 * events to testmode.

 mgmt_rx() owns the skb now! */

 these fields are the same for all service endpoints */

 connect to control service */

 setup commonly used values */

 TODO: Is using max values okay with firmware? */

 This function assumes the beacon is already DMA mapped */

 set back defaults, all modules with WARN level */

 set back defaults, all modules with WARN level */

 tdls peer update cmd has place holder for one channel*/

 .gen_vdev_wmm_conf not implemented */

 .gen_pdev_get_temperature not implemented */

 .gen_bcn_tmpl not implemented */

 .gen_prb_tmpl not implemented */

 .gen_p2p_go_bcn_ie not implemented */

 .gen_adaptive_qcs not implemented */

 .gen_pdev_enable_adaptive_cca not implemented */

 .gen_pdev_get_temperature not implemented */

 shared with main branch */

 .gen_vdev_wmm_conf not implemented */

 .gen_bcn_tmpl not implemented */

 .gen_prb_tmpl not implemented */

 .gen_p2p_go_bcn_ie not implemented */

 .gen_adaptive_qcs not implemented */

 .gen_pdev_enable_adaptive_cca not implemented */

 .gen_pdev_get_temperature not implemented */

 shared with 10.1 */

 .gen_vdev_wmm_conf not implemented */

 .gen_pdev_enable_adaptive_cca not implemented */

 shared with 10.1 */

 .gen_bcn_tmpl not implemented */

 .gen_prb_tmpl not implemented */

 .gen_p2p_go_bcn_ie not implemented */

 .gen_adaptive_qcs not implemented */

 shared with 10.2 */

 free the host memory chunks requested by firmware */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2015-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

/*

 * Convert a 802.3 format to a 802.11 format.

 *         +------------+-----------+--------+----------------+

 * 802.3:  |dest mac(6B)|src mac(6B)|type(2B)|     body...    |

 *         +------------+-----------+--------+----------------+

 *                |__         |_______    |____________  |________

 *                   |                |                |          |

 *         +--+------------+----+-----------+---------------+-----------+

 * 802.11: |4B|dest mac(6B)| 6B |src mac(6B)|  8B  |type(2B)|  body...  |

 *         +--+------------+----+-----------+---------------+-----------+

 Copy destination address */

 Copy source address */

 Copy logic link type */

 Calculate new pkt_offset */

 Calculate new hdr end offset */

 Copy frame body */

 Filling per profile  params */

Copying list of valid channel into request */

 set scan to passive if no SSIDs are specified in the request */

 enable mac randomization */

 Current FW does not support min-max range for dwell time */

 Setup requested WOW features */

 convert bytemask to bitmask */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012 Qualcomm Atheros, Inc.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014-2017 Qualcomm Atheros, Inc.

/* Returns true if callee consumes the skb and the skb should be discarded.

 * Returns false if skb is not used. Does not sleep.

	/* Only testmode.c should be handling events from utf firmware,

	 * otherwise all sort of problems will arise as mac80211 operations

	 * are not initialised.

 load utf firmware image */

	/* We didn't find FW UTF API 1 ("utf.bin") does not advertise

	 * firmware features. Do an ugly hack where we force the firmware

	 * features to match with 10.1 branch so that wmi.c will use the

	 * correct WMI interface.

	/* Use the same board data file as the normal firmware uses (but

	 * it's still "owned" by normal_mode_fw so we shouldn't free it.

 start utf only when the driver is not in use  */

 utf image is already downloaded, it shouldn't be */

 utf firmware is not running, nothing to do */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 Valid TID values are 0 through 15 */

 Valid TID values are 0 through 15 */

 Valid TID values are 0 through 15 */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2020 The Linux Foundation. All rights reserved.

 Map from pdev index to hw mac index */

 Each hash entry uses three bits to map to a particular ring. */

 Control should not reach here */

 Each hash entry uses four bits to map to a particular ring. */

 Target firmware's Copy Engine configuration. */

 CE0: host->target HTC control and raw streams */

 CE1: target->host HTT + HTC control */

 CE2: target->host WMI */

 CE3: host->target WMI */

 CE4: host->target HTT */

 CE5: target->host Pktlog */

 CE6: Reserved for target autonomous hif_memcpy */

 CE7 used only by Host */

 CE8 target->host used only by IPA */

 CE9 host->target HTT */

 CE10 target->host HTT */

 CE11 Not used */

/* Map from service/endpoint to Copy Engine.

 * This table is derived from the CE_PCI TABLE, above.

 * It is passed to the Target at startup for use by firmware.

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 not used */

 out = UL = host -> target */

 not used */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 in = DL = target -> host */

 (Additions here) */

 terminator entry */ }

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 not used */

 out = UL = host -> target */

 not used */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 in = DL = target -> host */

 (Additions here) */

 terminator entry */ }

 Target firmware's Copy Engine configuration. */

 CE0: host->target HTC control and raw streams */

 CE1: target->host HTT + HTC control */

 CE2: target->host WMI */

 CE3: host->target WMI */

 CE4: host->target HTT */

 CE5: target->host Pktlog */

 CE6: Reserved for target autonomous hif_memcpy */

 CE7 used only by Host */

 CE8 target->host used only by IPA */

 CE 9, 10, 11 are used by MHI driver */

/* Map from service/endpoint to Copy Engine.

 * This table is derived from the CE_PCI TABLE, above.

 * It is passed to the Target at startup for use by firmware.

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 (Additions here) */

 must be last */

 Target firmware's Copy Engine configuration. */

 CE0: host->target HTC control and raw streams */

 CE1: target->host HTT + HTC control */

 CE2: target->host WMI */

 CE3: host->target WMI */

 CE4: host->target HTT */

 CE5: target->host Pktlog */

 CE6: Reserved for target autonomous hif_memcpy */

 CE7 used only by Host */

 CE8 target->host used only by IPA */

 CE 9, 10, 11 are used by MHI driver */

/* Map from service/endpoint to Copy Engine.

 * This table is derived from the CE_PCI TABLE, above.

 * It is passed to the Target at startup for use by firmware.

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 out = UL = host -> target */

 in = DL = target -> host */

 in = DL = target -> host */

 (Additions here) */

 must be last */

 SW2TCL(x) R0 ring configuration address */

 TCL STATUS ring address */

 REO2SW(x) R0 ring configuration address */

 REO2SW(x) R2 ring pointers (head/tail) address */

 REO2TCL R0 ring configuration address */

 REO status address */

 WCSS relative address */

 WBM Idle address */

 SW2WBM release address */

 WBM2SW release address */

 PCIe base address */

 SW2TCL(x) R0 ring configuration address */

 TCL STATUS ring address */

 REO2SW(x) R0 ring configuration address */

 REO2SW(x) R2 ring pointers (head/tail) address */

 REO2TCL R0 ring configuration address */

 REO status address */

 WCSS relative address */

 WBM Idle address */

 SW2WBM release address */

 WBM2SW release address */

 PCIe base address */

 SW2TCL(x) R0 ring configuration address */

 TCL STATUS ring address */

 REO2SW(x) R0 ring configuration address */

 REO2SW(x) R2 ring pointers (head/tail) address */

 REO2TCL R0 ring configuration address */

 REO status address */

 WCSS relative address */

 WBM Idle address */

 SW2WBM release address */

 WBM2SW release address */

 PCIe base address */

 SW2TCL(x) R0 ring configuration address */

 TCL STATUS ring address */

 REO2SW(x) R0 ring configuration address */

 REO2SW(x) R2 ring pointers (head/tail) address */

 REO2TCL R0 ring configuration address */

 REO status address */

 WCSS relative address */

 WBM Idle address */

 SW2WBM release address */

 WBM2SW release address */

 PCIe base address */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 TODO: max_rings can populated by querying HW capabilities */

 REO_DST */

 REO_EXCEPTION */

		/* Designating REO2TCL ring as exception ring. This ring is

		 * similar to other REO2SW rings though it is named as REO2TCL.

		 * Any of theREO2SW rings can be used as exception ring.

 REO_REINJECT */

 REO_CMD */

 REO_STATUS */

 TCL_DATA */

 TCL_CMD */

 TCL_STATUS */

 CE_SRC */

 CE_DST */

 CE_DST_STATUS */

 WBM_IDLE_LINK */

 SW2WBM_RELEASE */

 WBM2SW_RELEASE */

 RXDMA_BUF */

 RXDMA_DST */

 RXDMA_MONITOR_BUF */

 RXDMA_MONITOR_STATUS */

 RXDMA_MONITOR_DST */

 RXDMA_MONITOR_DESC */

 RXDMA DIR BUF */

 TODO: Define the struct */

 interrupt setup */

 Initialize head and tail pointers to indicate ring is empty */

 interrupt setup */

	/* NOTE: IPQ8074 v2 requires the interrupt timer threshold in the

	 * unit of 8 usecs instead of 1 usec (as required by v1).

 Initialize head and tail pointers to indicate ring is empty */

 Loop count is not used for SRC rings */

 Returns number of available entries in src ring */

	/* TODO: Using % is expensive, but we have to do this since size of some

	 * SRNG rings is not power of 2 (due to descriptor sizes). Need to see

	 * if separate function is defined for rings having power of 2 ring size

	 * (TCL2SW, REO2SW, SW2RXDMA and CE rings) so that we can avoid the

	 * overhead of % by using mask (with &).

	/* TODO: Reap functionality is not used by all rings. If particular

	 * ring does not use reap functionality, we need not update reap_hp

	 * with next_hp pointer. Need to make sure a separate function is used

	 * before doing any optimization by removing below code updating

	 * reap_hp.

/* Update cached ring head/tail pointers to HW. ath11k_hal_srng_access_begin()

 * should have been called before this.

 TODO: See if we need a write memory barrier here */

		/* For LMAC rings, ring pointer updates are done through FW and

		 * hence written to a shared memory location that is read by FW

 Setup head and tail pointers for the idle list */

 Enable the SRNG */

 TODO: Add comments on these swap configurations */

		/* During initialization loop count in all the descriptors

		 * will be set to zero, and HW will set it to 1 on completing

		 * descriptor update in first loop, and increments it by 1 on

		 * subsequent loops (loop count wraps around after reaching

		 * 0xffff). The 'loop_cnt' in SW ring state is the expected

		 * loop count in descriptors updated by HW (to be processed

		 * by SW).

			/* For LMAC rings, tail pointer updates will be done

			 * through FW by writing to a shared memory location

 For destination ring, shadow the TP */

 update hp/tp addr to hal structure*/

 update all the non-CE srngs. */

	/* check whether the ring is emptry. Update the shadow

	 * HP only when then ring isn't' empty.

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

/* dscp_tid_map - Default DSCP-TID mapping

 *

 * DSCP        TID

 * 000000      0

 * 001000      1

 * 010000      2

 * 011000      3

 * 100000      4

 * 101000      5

 * 110000      6

 * 111000      7

 Enable read/write access */

	/* Configure each DSCP-TID mapping in three bits there by configure

	 * three bytes in an iteration.

 Disable read/write access */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

	/* TODO: Should we change the compatible string to something similar

	 * to one that ath10k uses?

/* enum ext_irq_num - irq numbers that can be used by external modules

 * like datapath

 reset the firmware */

 last interrupt received for this CE */

 last interrupt received for this group */

 Configure CE irqs */

 Configure external interrupts */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 new addition in IEEE Std 802.11ax-2021 */

 in msecs */

 As default, it is OFDM rates */

/* 802.11n D2.0 defined values for "Minimum MPDU Start Spacing":

 *   0 for no restriction

 *   1 for 1/4 us

 *   2 for 1/2 us

 *   3 for 1 us

 *   4 for 2 us

 *   5 for 4 us

 *   6 for 8 us

 *   7 for 16 us

	/* Our lower layer calculations limit our precision to

	 * 1 microsecond

	/* FIXME Set min_tx_power to ab->target_caps.hw_min_tx_power.

	 * But since the received value in svcrdy is same as hw_max_tx_power,

	 * we can set ar->min_tx_power to 0 currently until

	 * this is fixed in firmware

 txpwr is set as 2 units per dBm in FW*/

	/* Enable RTS/CTS protection for sw retries (when legacy stations

	 * are in BSS) or by default only for second rate series.

	 * TODO: Check if we need to enable CTS 2 Self in any case

 Need not send duplicate param value to firmware */

 Install the beacon template to the FW */

	/* Firmware doesn't report beacon loss events repeatedly. If AP probe

	 * (done by mac80211) succeeds but beacons do not resume then it

	 * doesn't make sense to continue operation. Queue connection loss work

	 * which can be cancelled when beacon is received.

 TODO: STA WAR in ath10k for listen interval required? */

 FIXME: base on RSN IE/WPA IE is a correct idea? */

 TODO: Need to check if FW supports PMF? */

 TODO: safe_mode_enabled (bypass 4-way handshake) flag req? */

	/* As firmware handles this two flags (IEEE80211_HT_CAP_SGI_20

	 * and IEEE80211_HT_CAP_SGI_40) for enabling SGI, we reset

	 * both flags if guard interval is Default GI

	/* This is a workaround for HT-enabled STAs which break the spec

	 * and have no HT capabilities RX mask (no HT RX MCS map).

	 *

	 * As per spec, in section 20.3.5 Modulation and coding scheme (MCS),

	 * MCS 0 through 7 are mandatory in 20MHz with 800 ns GI at all STAs.

	 *

	 * Firmware asserts if such situation occurs.

 TODO: similar flags required? */

	/* Workaround: Some Netgear/Linksys 11ac APs set Rx A-MPDU factor to

	 * zero in VHT IE. Using it would result in degraded throughput.

	 * arg->peer_max_mpdu at this point contains HT max_mpdu so keep

	 * it if VHT max_mpdu is smaller.

	/* Calculate peer NSS capability from VHT capabilities if STA

	 * supports VHT.

	/* In IPQ8074 platform, VHT mcs rate 10 and 11 is enabled by default.

	 * VHT mcs rate 10 and 11 is not suppoerted in 11ac standard.

	 * so explicitly disable the VHT MCS rate 10 and 11 in 11ac mode.

 TODO:  Check */

 the top most byte is used to indicate BSS color info */

	/* As per section 26.6.1 11ax Draft5.0, if the Max AMPDU Exponent Extension

	 * in HE cap is zero, use the arg->peer_max_mpdu as calculated while parsing

	 * VHT caps(if VHT caps is present) or HT caps (if VHT caps is not present).

	 *

	 * For non-zero value of Max AMPDU Extponent Extension in HE MAC caps,

	 * if a HE STA sends VHT cap and HE cap IE in assoc request then, use

	 * MAX_AMPDU_LEN_FACTOR as 20 to calculate max_ampdu length.

	 * If a HE STA that does not send VHT cap, but HE and HT cap in assoc

	 * request, then use MAX_AMPDU_LEN_FACTOR as 16 to calculate max_ampdu

	 * length.

	/* Calculate peer NSS capability from HE capabilities if STA

	 * supports HE.

		/* In case of fixed rates, MCS Range in he_tx_mcs might have

		 * unsupported range, with he_mcs_mask set, so check either of them

		 * to find nss.

	/* From IEEE Std 802.11ax-2021 - Section 10.12.2: An HE STA shall be capable of

	 * receiving A-MPDU where the A-MPDU pre-EOF padding length is up to the value

	 * indicated by the Maximum A-MPDU Length Exponent Extension field in the HE

	 * Capabilities element and the Maximum A-MPDU Length Exponent field in HE 6 GHz

	 * Band Capabilities element in the 6 GHz band.

	 *

	 * Here, we are extracting the Max A-MPDU Exponent Extension from HE caps and

	 * factor is the Maximum A-MPDU Length Exponent from HE 6 GHZ Band capability.

 TODO: Check WME vs QoS */

 TODO: Check WME vs QoS */

 TODO revisit during testing */

 not sure if this is a valid case? */

 not sure if this is a valid case? */

 Check HE first */

 TODO: amsdu_disable req? */

 Authorize BSS Peer */

 Disable */

 Set and enable SRG/non-SRG OBSS PD Threshold */

 SRG not supported and threshold in dB */

 Enable OBSS PD for all access category */

 Set SR Prohibit */

 Set SRG BSS Color Bitmap */

 Set SRG Partial BSSID Bitmap */

 Enable all BSS Colors for SRG */

 Enable all patial BSSID mask for SRG */

 Enable all BSS Colors for non-SRG */

 Enable all patial BSSID mask for non-SRG */

 9us */

 20us */

 TODO: Fill other STOP Params */

	/* Scan state should be updated upon scan completion but in case

	 * firmware fails to deliver the event (for whatever reason) it is

	 * desired to clean up scan state anyway. Firmware may have just

	 * dropped the scan completion event delivery due to transport pipe

	 * being overflown with data and/or it can recover on its own before

	 * next scan request is submitted.

		/* This can happen if timeout worker kicked in and called

		 * abortion while scan completion was being processed.

	/* If we failed to start the scan, return error code at

	 * this point.  This is probably due to some issue in the

	 * firmware, but no need to wedge the driver due to that...

 Add a 200ms margin to account for event/command processing */

 TODO: Check if FW expects  value other than NONE for del */

 arg.key_cipher = WMI_CIPHER_NONE; */

 TODO: Re-check if flag is valid */

 key flags are not required to delete the key */

 BIP needs to be done in software */

	/* the peer should not disappear in mid-way (unless FW goes awry) since

	 * we already hold conf_mutex. we just make sure its there now.

	/* flush the fragments cache during key (re)install to

	 * ensure all frags in the new frag list belong to the same key.

			/* if the peer doesn't exist there is no key to disable

			 * anymore

 impossible unless FW goes crazy */

 Avoid updating invalid nss as fixed rate*/

 Avoid updating invalid nss as fixed rate */

	/* If single VHT/HE rate is configured (by set_bitrate_mask()),

	 * peer_assoc will disable VHT/HE. This is now enabled by a peer specific

	 * fixed param.

	 * Note that all other rates and NSS will be disabled for this peer.

	/* Re-assoc is run only to update supported rates for given station. It

	 * doesn't make much sense to reconfigure the peer completely.

		/* Peer_assoc_prepare will reject vht rates in

		 * bitrate_mask if its not available in range format and

		 * sets vht tx_rateset as unsupported. So multiple VHT MCS

		 * setting(eg. MCS 4,5,6) per peer is not supported here.

		 * But, Single rate in VHT mask can be set as per-peer

		 * fixed rate. But even if any HT rates are configured in

		 * the bitrate mask, device will not switch to those rates

		 * when per-peer Fixed rate is set.

		 * TODO: Check RATEMASK_CMDID to support auto rates selection

		 * across HT/VHT and for multiple VHT MCS support.

			/* If the peer is non-VHT/HE or no fixed VHT/HE rate

			 * is provided in the new bitrate mask we set the

			 * other rates using peer_assoc command. Also clear

			 * the peer fixed rate settings as it has higher proprity

			 * than peer assoc

 cancel must be done outside the mutex to avoid deadlock */

 TODO: SUBFEE not validated in HK, disable here until validated? */

 If SU Beaformer is not set, then disable MU Beamformer Capability */

 If SU Beaformee is not set, then disable MU Beamformee Capability */

 TODO: Need to check invalid STS and Sound_dim values set by FW? */

 Enable Sounding Dimension Field only if SU BF is enabled */

 Use the STS advertised by FW unless SU Beamformee is not supported*/

	/* TODO: Check the request chainmask against the supported

	 * chainmask table which is advertised in extented_service_ready event

 Reload HT/VHT/HE capability */

	/* Drop probe response packets when the pending management tx

	 * count has reached a certain threshold, so as to prioritize

	 * other mgmt packets like auth and assoc to be sent on time

	 * for establishing successful connections.

 make sure rcu-protected mac80211 tx path itself is drained */

 TODO: Do we need to enable ANI? */

	/* Configure monitor status ring with default rx_filter to get rx status

	 * such as rssi, rx_duration.

 Configure the hash seed for hash based reo dest ring selection */

 allow device to enter IMPS */

 TODO WDS and other modes */

 continue even if there's an error */

 Recalc txpower for remaining vdev */

 TODO: recal traffic pause state based on the available vdevs */

 FIXME: Has to be verified. */

		/* Tx A-MPDU aggregation offloaded to hw/fw so deny mac80211

		 * Tx aggregation requests.

	/* TODO: In case of multiple channel context, populate rx_channel from

	 * Rx PPDU desc information.

	/* TODO: In case of there is one more channel context left, populate

	 * rx_channel with the channel of that remaining channel context.

 For now allow DFS for AP mode */

	/* Enable CAC Flag in the driver by checking the channel DFS cac time,

	 * i.e dfs_cac_ms value which will be valid only for radar channels

	 * and state as NL80211_DFS_USABLE which indicates CAC needs to be

	 * done before channel usage. This flags is used to drop rx packets.

	 * during CAC.

 TODO Set the flag for other interface types as required */

	/* All relevant vdevs are downed and associated channel resources

	 * should be available for the channel switch now.

 TODO: Update ar->rx_channel */

 Restart the internal monitor vdev on new channel */

	/* This shouldn't really happen because channel switching should use

	 * switch_vif_chanctx().

 TODO: Recalc radar detection */

 TODO: Setup ps and cts/rts protection */

 for QCA6390 bss peer must be created before vdev_start */

 TODO: Setup ps and cts/rts protection */

 continue even if there's an error */

/* mac80211 stores device specific RTS/Fragmentation threshold value,

 * this is set interface specific to firmware from ath11k driver

	/* Even though there's a WMI vdev param for fragmentation threshold no

	 * known firmware actually implements it. Moreover it is not possible to

	 * rely frame fragmentation to mac80211 because firmware clears the

	 * "more fragments" bit in frame control making it impossible for remote

	 * devices to reassemble frames.

	 *

	 * Hence implement a dummy callback just to say fragmentation isn't

	 * supported. This effectively prevents mac80211 from doing frame

	 * fragmentation in software.

	/* No need to consider legacy here. Basic rates are always present

	 * in bitrate mask

 0.8 = 0, 1.6 = 2 and 3.2 = 3. */

 start from 1 */

	/* mac80211 doesn't support sending a fixed HT/VHT MCS alone, rather it

	 * requires passing atleast one of used basic rates along with them.

	 * Fixed rate setting across different preambles(legacy, HT, VHT) is

	 * not supported by the FW. Hence use of FIXED_RATE vdev param is not

	 * suitable for setting single HT/VHT rates.

	 * But, there could be a single basic rate passed from userspace which

	 * can be done through the FIXED_RATE param.

		/* If multiple rates across different preambles are given

		 * we can reconfigure this info with all peers using PEER_ASSOC

		 * command with the below exception cases.

		 * - Single VHT Rate : peer_assoc command accommodates only MCS

		 * range values i.e 0-7, 0-8, 0-9 for VHT. Though mac80211

		 * mandates passing basic rates along with HT/VHT rates, FW

		 * doesn't allow switching from VHT to Legacy. Hence instead of

		 * setting legacy and VHT rates using RATEMASK_CMD vdev cmd,

		 * we could set this VHT rate as peer fixed rate param, which

		 * will override FIXED rate and FW rate control algorithm.

		 * If single VHT rate is passed along with HT rates, we select

		 * the VHT rate as fixed rate for vht peers.

		 * - Multiple VHT Rates : When Multiple VHT rates are given,this

		 * can be set using RATEMASK CMD which uses FW rate-ctl alg.

		 * TODO: Setting multiple VHT MCS and replacing peer_assoc with

		 * RATEMASK_CMDID can cover all use cases of setting rates

		 * across multiple preambles and rates within same type.

		 * But requires more validation of the command at this point.

			/* TODO: Handle multiple VHT MCS values setting using

			 * RATEMASK CMD

 TODO: Use real NF instead of default one. */

	/* TODO: Check if HT capability advertised from firmware is different

	 * for each band for a dual band capable radio. It will be tricky to

	 * handle it when the ht capability different for each band.

		/* There's a race between calling ieee80211_register_hw()

		 * and here where the monitor mode is enabled for a little

		 * while. But that time is so short and in practise it make

		 * a difference in real life.

 Apply the regd received during initialization */

 Initialize channel counters frequency value in hertz */

		/* FIXME wmi[0] is already initialized during attach,

		 * Should we do this again?

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 CE0: host->target HTC control and raw streams */

 CE1: target->host HTT + HTC control */

 CE2: target->host WMI */

 CE3: host->target WMI (mac0) */

 CE4: host->target HTT */

 CE5: target->host pktlog */

 CE6: target autonomous hif_memcpy */

 CE7: host->target WMI (mac1) */

 CE8: target autonomous hif_memcpy */

 CE9: host->target WMI (mac2) */

 CE10: target->host HTT */

 CE11: Not used */

 CE0: host->target HTC control and raw streams */

 CE1: target->host HTT + HTC control */

 CE2: target->host WMI */

 CE3: host->target WMI (mac0) */

 CE4: host->target HTT */

 CE5: target->host pktlog */

 CE6: target autonomous hif_memcpy */

 CE7: host->target WMI (mac1) */

 CE8: target autonomous hif_memcpy */

 CE0: host->target HTC control and raw streams */

 CE1: target->host HTT + HTC control */

 CE2: target->host WMI */

 CE3: host->target WMI (mac0) */

 CE4: host->target HTT */

 CE5: target->host pktlog */

 only ce4 needs shadow workaroud*/

 TODO: Init other params needed by HAL to init the ring */

	/* Legacy platforms that do not support cache

	 * coherent DMA are unsupported

	/* Check if some entries could be regained by handling tx completion if

	 * the CE has interrupts disabled and the used entries is more than the

	 * defined usage threshold.

 shadow is already configured */

	/* shadow isn't configured yet, configure now.

	 * non-CE srngs are configured firstly, then

	 * all CE srngs.

 get the shadow configuration */

 Cleanup any src CE's which have interrupts disabled */

 NOTE: Should we also clean up tx buffer in all pipes? */

 Should we clear any partial init */

 Should we clear any partial init */

 Should we clear any partial init */

 Free any parial successful allocation */

/* For Big Endian Host, Copy Engine byte_swap is enabled

 * When Copy Engine does byte_swap, need to byte swap again for the

 * Host to get/put buffer content in the correct byte order

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2019-2020 The Linux Foundation. All rights reserved.

 Max channel computed by sum of 2g and 5g band channels */

 if there already is a vif doing spectral, return that. */

 otherwise, return the first vif. */

			/* reset the configuration to adopt possibly changed

			 * debugfs parameters

 peak index outside of bins */

 max_exp not found */

 convert Dword into bytes */

 Only In-band bins are useful to user for visualize */

 convert Dword into bytes */

			/* HW bug in tlv length of summary report,

			 * HW report 3 DWORD size but the data payload

			 * is 4 DWORD size (16 bytes).

			 * Need to remove this workaround once HW bug fixed

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2019-2020 The Linux Foundation. All rights reserved.

/* BAR0 + 4k is always accessible, and no

 * need to force wakeup.

 * 4K - 32 = 0xFE0

 If offset lies within DP register range, use 3rd window */

 If offset lies within CE register range, use 2nd window */

	/* for offset beyond BAR + 4K - 32, may

	 * need to wakeup MHI to access.

	/* for offset beyond BAR + 4K - 32, may

	 * need to wakeup MHI to access.

 TODO: exact time to sleep is uncertain */

 Need to toggle V bit back otherwise stuck in reset status */

 read cookie */

 TODO: exact time to sleep is uncertain */

	/* write 0 to WLAON_WARM_SW_ENTRY to prevent Q6 from

	 * continuing warm path and entering dead loop.

	/* A read clear register. clear the register to prevent

	 * Q6 from entering wrong code path.

 PCIE link seems very unstable after the Hot Reset*/

	/* This is a WAR for PCIE Hotreset.

	 * When target receive Hotreset, but will set the interrupt.

	 * So when download SBL again, SBL will open Interrupt and

	 * receive it, and crash immediately.

 last interrupt received for this CE */

 last interrupt received for this group */

 Configure CE irqs */

 disable L0s and L1 */

	/* Disable ASPM during firmware download due to problems switching

	 * to AMSS state.

 restore aspm in case firmware bootup fails */

 QCA639x 2.0 firmware files */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2020 The Linux Foundation. All rights reserved.

		/* FW sends all the active VDEV stats irrespective of PDEV,

		 * hence limit until the count of all VDEVs started

		/* Mark end until we reached the count of all started VDEVs

		 * within the PDEV

	/* FW stats can get split when exceeding the stats data buffer limit.

	 * In that case, since there is no end marking for the back-to-back

	 * received 'update stats' event, we keep a 3 seconds timeout in case,

	 * fw_stats_done is not marked yet

 VDEV stats is always sent for all active VDEVs from FW */

 loop all active VDEVs for bcn stats */

	/* since beacon stats request is looped for all active VDEVs, saved fw

	 * stats is not freed for each request until done for all active VDEVs

/* Simulate firmware crash:

 * 'soft': Call wmi command causing firmware hang. This firmware hang is

 * recoverable by warm firmware reset.

 * 'hard': Force firmware crash by setting any vdev parameter for not allowed

 * vdev id. This is hard firmware crash because it is recoverable only by cold

 * firmware reset.

 filter partial writes and invalid commands */

 drop the possible '\n' from the end */

	/* all stats debugfs files created are under "fw_stats" directory

	 * created per PDEV

 Clear rx filter set for monitor mode and rx status */

 Create a symlink under ieee80211/phy* */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 TODO: Any other peer specific DP cleanup */

 NOTE: reo_dest ring id starts from 1 unlike mac_id which starts from 0 */

 TODO: Setup other peer specific resource used in data path */

 follow through when ring_num >= 3 */

	/* When hash based routing of rx packet is enabled, 32 entries to map

	 * the hash values to the ring will be configured.

 Setup link desc idle list for HW internal usage */

 Setup scatter desc list when the total memory requirement is more */

 TODO: Implement handler for other interrupts */

 TODO:Per-pdev rx ring unlike tx ring which is mapped to different AC's */

 connect to control service */

	 /* When v2_map_support is true:for STA mode, enable address

	  * search index, tcl uses ast_hash value in the descriptor.

	  * When v2_map_support is false: for STA mode, dont' enable

	  * address search index.

 set HTT extension valid bit to 0 by default */

 Deinit any SOC level resource */

 Init any SOC level resource for DP */

	/* when the timer is fired, the handler checks whether there

	 * are new TX happened. The handler updates HP only when there

	 * are no TX operations during the timeout interval, and stop

	 * the timer. Timer will be started again when TX happens again.

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 FW/HTC requires 4-byte aligned streams */

 no room left in buffer for record */

 multiple records may be present in a trailer */

 get flags to check for trailer */

 zero length packet with trailer data, just drop these */

 handle HTC control message */

				/* this is a fatal error, target should not be

				 * sending unsolicited messages on the ep 0

 poll tx completion for interrupt disabled CE's */

 skb is now owned by the rx completion handler */

	/* This is unexpected. FW is not supposed to send regular rx on this

	 * endpoint.

 Divide credits among number of endpoints for WMI */

	/* For QCA6390, wmi endpoint uses 1 credit to avoid

	 * back-to-back write.

 special case for HTC pseudo control service */

 Only enable credit flow control for WMI ctrl service */

 wait for response */

 we controlled the buffer creation, it's aligned */

 check response status */

 return assigned endpoint to caller */

 setup the endpoint */

 copy all the callbacks */

 setup our pseudo HTC control endpoint connection */

 connect fake service */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 New lines are added for better display */

 TODO: HKDBG */

 each entry is u32, i.e. 4 bytes */

 each entry is u32, i.e. 4 bytes */

 SU GI Stats */

 AC MU-MIMO GI Stats */

 AX MU-MIMO GI Stats */

 DL OFDMA GI Stats */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 set HTT extension valid bit to 0 by default */

 SPDX-License-Identifier: BSD-3-Clause-Clear

 Copyright (c) 2020 The Linux Foundation. All rights reserved. */

	/* Observed on QCA6390 that after SOC_GLOBAL_RESET, MHISTATUS

	 * has SYSERR bit set and thus need to set MHICTRL_RESET

	 * to clear SYSERR.

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2019-2020 The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 Notify firmware that this is non-qualcomm platform. */

		/* Notify firmware about the sleep clock selection,

		 * nm_modem_bit[1] is used for this purpose. Host driver on

		 * non-qualcomm platforms should select internal sleep

		 * clock.

	/* For QCA6390 by default FW requests a block of ~4M contiguous

	 * DMA memory, it's hard to allocate from OS. So host returns

	 * failure to FW and FW will then request mulitple blocks of small

	 * chunk size memory.

		/* the error response is expected when

		 * target_mem_delayed is true.

 QCA6390 does not support cal data, skip it */

 cal-<bus>-<id>.bin */

 This is number of CE configs */

 This is number of Service/CE configs */

 set shadow v2 configuration */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2020 The Linux Foundation. All rights reserved.

 Can't get temperature when the card is off */

 display in millidegree celcius */

 disable all data tx queues */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 frame mode values are mapped as per enum ath11k_hw_txrx_mode */

			/* HW bug, expected BIN size is 2 bytes but HW report as 4 bytes.

			 * so added pad size as 2 bytes to compensate the BIN size

	/* TODO: there can frames in queues so for now add delay as a hack.

	 * Need to implement to handle and remove this delay.

 strlen(',variant=') + strlen(ab->qmi.target.bdf_ext) */

 go through ATH11K_BD_IE_BOARD_ elements */

 no match found */

 jump over the padding */

 no match found */

 magic has extra null byte padded */

 magic is padded to 4 bytes */

 no match found, continue */

 there was an error, bail out */

 either found or error, so stop searching */

 jump over the padding */

 De-Init of components as needed */

 put hardware to DBS mode */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 TODO: Trace the log */

 TODO: Trace the log */

 TODO: Trace the log */

 TODO: trace log */

 CONFIG_ATH11K_DEBUG */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 World regdom to be used in case default regd from fw is unavailable */

	/* This can happen during wiphy registration where the previous

	 * user request is received before we update the regd received

	 * from firmware.

	/* Currently supporting only General User Hints. Cell base user

	 * hints to be handled later.

	 * Hints from other sources like Core, Beacons are not expected for

	 * self managed wiphy's

	/* Set the country code to the firmware and wait for

	 * the WMI_REG_CHAN_LIST_CC EVENT for updating the

	 * reg info

 TODO: Set to true/false based on some condition? */

 TODO: Use appropriate phymodes */

			/* TODO: use quarrter/half rate, cfreq12, dfs_cfreq2

			 * set_agile, reg_class_idx

 The caller should have checked error conditions */

 Prefer the latest regd update over default if it's available */

		/* Apply the regd received during init through

		 * WMI_REG_CHAN_LIST_CC event. In case of failure to

		 * receive the regd, initialize with a default world

		 * regulatory.

	/* TODO: Should we restrict intersection feasibility

	 *  based on min bandwidth of the intersected region also,

	 *  say the intersected rule should have a  min bandwidth

	 * of 20MHz?

 Use the flags of both the rules */

 To be safe, lts use the max cac timeout of both rules */

 Find the number of intersecting rules to allocate new regd memory */

	/* We set the new country and dfs region directly and only trim

	 * the freq, power, antenna gain by intersecting with the

	 * default regdomain. Also MAX of the dfs cac timeout is selected.

 Add max additional rules to accommodate weather radar band */

	/* Update reg_rules[] below. Firmware is expected to

	 * send these rules in order(2G rules first and then 5G)

			/* FW doesn't pass NL80211_RRF_AUTO_BW flag for

			 * BW Auto correction, we can enable this by default

			 * for all 5G rules here. The regulatory core performs

			 * BW correction if required and applies flags as

			 * per other BW rule flags we pass from here

		/* Update dfs cac timeout if the dfs domain is ETSI and the

		 * new rule covers weather radar band.

		 * Default value of '0' corresponds to 60s timeout, so no

		 * need to update that for other rules.

		/* Get a new regd by intersecting the received regd with

		 * our default regd.

		/* Firmware has already moved to the new regd. We need

		 * to maintain channel consistency across FW, Host driver

		 * and userspace. Hence as a fallback mechanism we can set

		 * the prev or default country code to the firmware.

 TODO: Implement Fallback Mechanism */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 nothing more to reap */

 Returns number of Rx buffers replenished */

		/* TODO: Understand where internal driver does this dma_unmap

		 * of rxdma_buffer.

	/* if rxdma1_enable is false, mon_status_refill_ring

	 * isn't setup, so don't clean.

		/* XXX: Understand where internal driver does this dma_unmap

		 * of rxdma_buffer.

	/* if rxdma1_enable is false, then it doesn't need

	 * to setup rxdam_mon_buf_ring, rxdma_mon_dst_ring

	 * and rxdma_mon_desc_ring.

	 * init reap timer for QCA6390.

init mon status buffer reap timer

 Shouldn't happen! Cleanup in case of other failure? */

 Flush and invalidate aged REO desc from HW cache */

 Update the tid queue if it is already setup */

	/* TODO: Optimize the memory allocation for qos tid based on

	 * the actual BA window size in REO tid update path.

	/* NOTE: Enable PN/TSC replay check offload only for unicast frames.

	 * We use mac80211 PN/TSC replay check functionality for bcast/mcast

	 * for now.

	/* Note: If host configured fixed rates and in some other special

	 * cases, the broadcast/management frames are sent in different rates.

	 * Firmware rate's control to be skipped for this?

	/* PPDU stats reported for mgmt packet doesn't have valid tx bytes.

	 * So skip peer stats update for mgmt packets.

	/* As the msdu is spread across multiple rx buffers,

	 * find the offset to the start of msdu for computing

	 * the length of the msdu in the first buffer.

	/* MSDU spans over multiple buffers because the length of the MSDU

	 * exceeds DP_RX_BUFFER_SIZE - HAL_RX_DESC_SIZE. So assume the data

	 * in the first buf is of length DP_RX_BUFFER_SIZE - HAL_RX_DESC_SIZE.

	/* When an MSDU spread over multiple buffers attention, MSDU_END and

	 * MPDU_END tlvs are valid only in the last buffer. Copy those tlvs.

 Free up all buffers of the MSDU */

 copy SA & DA and pull decapped header */

		/* original 802.11 header is valid for the first msdu

		 * hence we can reuse the same header

		/* Each A-MSDU subframe will be reported as a separate MSDU,

		 * so strip the A-MSDU bit from QoS Ctl.

  Rebuild qos header if this is a middle/last msdu */

 Reset the order bit as the HT_Control header is stripped */

 TODO Add other QoS ctl fields when required */

 copy decap header before overwriting for reuse below */

	/* original 802.11 header has a different DA and in

	 * case of 4addr it may also have different SA

 Tail */

 MIC */

 ICV */

 MMIC */

 Head */

 pull decapped header and copy SA & DA */

 push rfc1042/llc/snap */

 push original 802.11 header */

	/* original 802.11 header has a different DA and in

	 * case of 4addr it may also have different SA

 mac80211 allows fast path only for authorized STA */

		/* PN for mcast packets will be validated in mac80211;

		 * remove eth header and add 802.11 header.

 TODO: Handle undecap for these formats */

 PN for multicast packets will be checked in mac80211 */

 Clear per-MPDU flags while leaving per-PPDU flags intact */

 TODO: trace rx packet */

	/* PN for multicast packets are not validate in HW,

	 * so skip 802.3 rx path

	 * Also, fast_rx expectes the STA to be authorized, hence

	 * eapol packets are sent in slow path.

	/* Hw might have updated the head pointer after we cached it.

	 * In this case, even though there are entries in the ring we'll

	 * get rx_desc NULL. Give the read another try with updated cached

	 * head pointer so that we can reap complete MPDU in the current

	 * rx processing.

 TKIP MIC header */

 RX fragments are always raw packets */

 change msdu len in hal rx desc */

 Fill mpdu details into reo entrace ring */

 Multicast/Broadcast fragments are not expected */

	/* received unfragmented packet in reo

	 * exception ring, this shouldn't happen

	 * as these packets typically come from

	 * reo2sw srngs.

 Flush stored fragments and start a new sequence */

 Fragment already present */

		/* Process only rx fragments with one msdu per link desc below, and drop

		 * msdu's indicated due to error reasons.

 Return the link desc back to wbm idle list */

 First buffer will be freed by the caller, so deduct it's length */

	/* Handle NULL queue descriptor violations arising out a missing

	 * REO queue for a given peer or a given TID. This typically

	 * may happen if a packet is received on a QOS enabled TID before the

	 * ADDBA negotiation for that TID, when the TID queue is setup. Or

	 * it may also happen for MC/BC frames if they are not routed to the

	 * non-QOS TID queue, in the absence of any other default TID queue.

	 * This error can show up both in a REO destination or WBM release ring.

	/* Please note that caller will having the access to msdu and completing

	 * rx with mac80211. Need not worry about cleaning up amsdu_list.

		/* TODO: Do not drop PN failed packets in the driver;

		 * instead, it is good to drop such packets in mac80211

		 * after incrementing the replay counters.

		/* TODO: Review other errors and process them to mac80211

		 * as appropriate.

		/* TODO: Review other rxdma error code to check if anything is

		 * worth reporting to mac80211

 msdu will get freed */

		/* mon_dst is behind than mon_status

		 * skip dst_ring and free it

 Base size */

	/* if rxdma1_enable is false, no need to setup

	 * rxdma_mon_desc_ring.

 start reap timer */

 reap all the monitor related rings */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

	/* Let the default ring selection be based on current processor

	 * number, where one of the 3 tcl rings are selected based on

	 * the smp_processor_id(). In case that ring

	 * is full/busy, we resort to other available rings.

	 * If all rings are full, we drop the packet.

	 * //TODO Add throttling logic when all rings are full

 Check if the next ring is available */

 no need to encap */

 TODO: Take care of other encap modes as well */

		/* NOTE: It is highly unlikely we'll be running out of tcl_ring

		 * desc because the desc is directly enqueued onto hw queue.

		/* Checking for available tcl descritors in another ring in

		 * case of failure due to full tcl ring now, is better than

		 * checking this ring earlier for each pkt tx.

		 * Restart ring selection if some rings are not checked yet.

		/* This event is to be handled only when the driver decides to

		 * use WDS offload functionality.

 Must not happen */

 skip tx rate update from ieee80211_status*/

	/* NOTE: Tx rate status reporting. Tx completion status does not have

	 * necessary information (for example nss) to build the tx rate.

	 * Might end up reporting it out-of-band from HTT stats.

 TODO: Process pending tx_status messages when kfifo_is_full() */

 cmd_num should start from 1, during failure return the error code */

 reo cmd ring descriptors has cmd_num starting from 1 */

	/* Can this be optimized so that we keep the pending command list only

	 * for tid delete command to free up the resoruce on the command status

	 * indication?

		/* for QCA6390, host fills rx buffer to fw and fw fills to

		 * rxbuf ring for each rxdma

 set in monitor mode only */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 keep last */

 Move this to host based bitmap */

	/* Take non-zero tx/rx chainmask. If tx/rx chainmask differs from

	 * band to band for a single radio, need to see how this should be

	 * handled.

	/* tx/rx chainmask reported from fw depends on the actual hw chains used,

	 * For example, for 4x4 capable macphys, first 4 chains can be used for first

	 * mac and the remaing 4 chains can be used for the second mac or vice-versa.

	 * In this case, tx/rx chainmask 0xf will be advertised for first mac and 0xf0

	 * will be advertised for second mac or vice-versa. Compute the shift value

	 * for tx/rx chainmask which will be used to advertise supported ht/vht rates to

	 * mac80211.

 check if param->wireless_mode is needed */

/* Save the wmi_service_bitmap into a linear bitmap. The wmi_services in

 * wmi_service ready event are advertised in b0-b3 (LSB 4-bits) of each

 * 4-byte word.

	/* It can be optimized my sending tx/rx chain configuration

	 * only for supported bands instead of always sending it for

	 * both the bands.

	/* Note: This is a nested TLV containing:

	 * [wmi_tlv][wmi_p2p_noa_descriptor][wmi_tlv]..

/* TODO FW Support for the cmd is not available yet.

 * Can be tested once the command and corresponding

 * event is implemented in FW

		/* Typically if STBC is enabled for VHT it should be enabled

		 * for HT as well

		/* Typically if LDPC is enabled for VHT it should be enabled

		 * for HT as well

	/* Suppress authorization for all AUTH modes that need 4-way handshake

	 * (during re-association).

	 * Authorization will be done for these modes on key installation.

 safe mode bypass the 4-way handshake */

 Disable AMSDU for station transmit, if user configures it */

	/* Disable AMSDU for AP transmit to 11n Stations, if user configures

	 * it

	 * if (param->amsdu_disable) Add after FW support

	/* Target asserts if node is marked HT and all MCS is set to 0.

	 * Mark the node as non-HT if all the mcs rates are disabled through

	 * iwpriv

 Update 11ax capabilities */

 Update peer legacy rate information */

 Update peer HT rate information */

 VHT Rates */

 Update bandwidth-NSS mapping */

 HE Rates */

 Loop through the HE rate set */

 setup commonly used values */

	/* fill bssid_list[0] with 0xff, otherwise bssid and RA will be

	 * ZEROs in probe request

 Scan events subscription */

* Set scan control flags */

 for adaptive scan mode using 3 bits (21 - 23 bits) */

 stop the scan with the corresponding scan_id */

 Cancelling all scans */

 Cancelling VAP scans */

 Cancelling specific scan */

 TODO add MBSSID support */

 num_mem_chunks is zero */

 For QCA6390, save mac_phy capability in the same pdev */

 TODO: mac_phy_cap prints */

	/* For QCA6390, set num_radios to 1 because host manages

	 * both 2G and 5G radio in one pdev.

	 * Set pdev_id = 0 and 0 means soc level.

 shift the sk_buff to point to `frame` */

 WARN when we received this event without doing any mgmt tx */

		/* One suspected reason scan can be completed while starting is

		 * if firmware fails to deliver all scan events to the host,

		 * e.g. when transport pipe is full. This has been observed

		 * with spectral scan phyerr events starving wmi transport

		 * pipe. In such case the "scan completed" event should be (and

		 * is) ignored by the host as it may be just firmware's scan

		 * state machine recovering.

	/* VDEV stats has all the active VDEVs of other PDEVs as well,

	 * ignoring those not part of requested PDEV

 try to send pending beacons first. they take priority */

		/* In case of failure to set the requested ctry,

		 * fw retains the current regd. We print a failure info

		 * and return from here.

	/* Avoid default reg rule updates sent during FW recovery if

	 * it is already available

		/* Process the event for phy0 only if single_pdev_only

		 * is true. If pdev_idx is valid but not 0, discard the

		 * event. Otherwise, it goes to fallback.

	/* Avoid multiple overwrites to default regd, during core

	 * stop-start after mac registration.

	/* Intersect new rules with default regd if a new country setting was

	 * requested, i.e a default regd was already set during initialization

	 * and the regd coming from this event has a valid country info.

		/* The initial rules from FW after WMI Init is to build

		 * the default regd. From then on, any rules updated for

		 * the pdev could be due to user reg changes.

		 * Free previously built regd before assigning the newly

		 * generated regd to ar. NULL pointer handling will be

		 * taken care by kfree itself.

		/* This regd would be applied during mac registration and is

		 * held constant throughout for regd intersection purpose

	/* Fallback to older reg (by sending previous country setting

	 * again if fw has succeded and we failed to process here.

	 * The Regdomain should be uniform across driver and fw. Since the

	 * FW has processed the command and sent a success status, we expect

	 * this function to succeed as well. If it doesn't, CTRY needs to be

	 * reverted at the fw and the old SCAN_CHAN_LIST cmd needs to be sent.

 TODO: This is rare, but still should also be handled */

		/* Shouldn't happen unless list of advertised channels to

		 * mac80211 has been changed.

	/* Firmware is guaranteed to report all essential management frames via

	 * WMI while it can deliver some extra via HTT. Since there can be

	 * duplicates split the reporting wrt monitor/sniffing.

	/* In case of PMF, FW delivers decrypted frames with Protected Bit set.

	 * Don't clear that. Also, FW delivers broadcast management frames

	 * (ex: group privacy action frames in mesh) as encrypted payload.

	/* In case the scan was cancelled, ex. during interface teardown,

	 * the interface will not be found in active interfaces.

	 * Rather, in such scenarios, iterate over the active pdev's to

	 * search 'ar' if the corresponding 'ar' scan is ABORTING and the

	 * aborting scan's vdev id matches this event info.

 HW channel counters frequency value in hertz */

	/* If FW provides MAC clock frequency in Mhz, overriding the initialized

	 * HW channel counters frequency value

	/* TODO: Use wmi_service_segment_offset information to get the service

	 * especially when more services are advertised in multiple sevice

	 * available events.

/* PDEV_CTL_FAILSAFE_CHECK_EVENT is received from FW when the frequency scanned

 * is not part of BDF CTL(Conformance test limits) table entries.

	/* If ctl_failsafe_status is set to 1 FW will max out the Transmit power

	 * to 10 dBm else the CTL power entry in the BDF would be picked up.

 Finish CSA once the switch count becomes NULL */

 the first 4 bytes are length */

 Process all the WMI events here */

 mgmt_rx_event() owns the skb now! */

 add Unsupported events here */

 TODO: Add remaining events */

 these fields are the same for all service endpoints */

 connect to control service */

	/* Currently we could pass segment_id(b0 - b1), chirp(b2)

	 * freq offset (b3 - b10) to unit test. For simulation

	 * purpose this can be set to 0 which is valid.

 TODO: Deinit any pdev specific wmi resource */

 TODO: Init remaining resource specific to pdev */

 It's overwritten when service_ext_ready is handled */

 TODO: Init remaining wmi soc resources required */

 TODO: Deinit wmi resource specific to SOC as required */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2020 The Linux Foundation. All rights reserved.

 success, suspend complete received */

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 Magic pattern in reserved bits for debugging */

 We expect only WBM_REL buffer type */

	/* TODO: Set Ignore ampdu flags based on BA window size and/or

	 * AMPDU capabilities

	/* TODO: HW queue descriptors are currently allocated for max BA

	 * window size for all QOS TIDs so that same descriptor can be used

	 * later when ADDBA request is recevied. This should be changed to

	 * allocate HW queue descriptors based on BA window size being

	 * negotiated (0 for non BA cases), and reallocate when BA window

	 * size changes and also send WMI message to FW to change the REO

	 * queue descriptor in Rx peer entry as part of dp_rx_tid_update.

		/* TODO: Please note that the combined rssi will not be accurate

		 * in MU case. Rssi in MU needs to be retrieved from

		 * PHYRX_OTHER_RECEIVE_INFO TLV.

		/* The actual length of PPDU_END is the combined length of many PHY

		 * TLVs that follow. Skip the TLV header and

		 * rx_rxpcu_classification_overview that follows the header to get to

		 * next TLV.

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2019 The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

/* Returns true if callee consumes the skb and the skb should be discarded.

 * Returns false if skb is not used. Does not sleep.

 SPDX-License-Identifier: BSD-3-Clause-Clear

/*

 * Copyright (c) 2018-2019 The Linux Foundation. All rights reserved.

 TODO */

 Send peer based pktlog enable/disable */

 Valid TID values are 0 through 15 */

 Valid TID values are 0 through 15 */

 Valid TID values are 0 through 15 */

/*

 * Atheros CARL9170 driver

 *

 * LED handling

 *

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 * Copyright 2009, 2010, Christian Lamparer <chunkeey@googlemail.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; see the file COPYING.  If not, see

 * http://www.gnu.org/licenses/.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *    Copyright (c) 2007-2008 Atheros Communications, Inc.

 *

 *    Permission to use, copy, modify, and/or distribute this software for any

 *    purpose with or without fee is hereby granted, provided that the above

 *    copyright notice and this permission notice appear in all copies.

 *

 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 disable LEDs */

 GPIO [0/1 mode: output, 2/3: input] */

 GPIO 0/1 value: off */

 CONFIG_CARL9170_LEDS */

/*

 * Atheros CARL9170 driver

 *

 * 802.11 & command trap routines

 *

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 * Copyright 2009, 2010, Christian Lamparter <chunkeey@googlemail.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; see the file COPYING.  If not, see

 * http://www.gnu.org/licenses/.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *    Copyright (c) 2007-2008 Atheros Communications, Inc.

 *

 *    Permission to use, copy, modify, and/or distribute this software for any

 *    purpose with or without fee is hereby granted, provided that the above

 *    copyright notice and this permission notice appear in all copies.

 *

 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * Initialize Counter

	/*

	 * The sequence is strictly monotonic increasing and it never skips!

	 *

	 * Therefore we can safely assume that whenever we received an

	 * unexpected sequence we have lost some valuable data.

	/*

	 * Some commands may have a variable response length

	 * and we cannot predict the correct length in advance.

	 * So we only check if we provided enough space for the data.

		/*

		 * Do not complete. The command times out,

		 * and we get a stack trace from there.

 hardware event handlers */

 pre-TBTT event */

 TX status notification */

		/*

		 * (IBSS) beacon send notification

		 * bytes: 04 c2 XX YY B4 B3 B2 B1

		 *

		 * XX always 80

		 * YY always 00

		 * B1-B4 "should" be the number of send out beacons.

 End of Atim Window */

 Watchdog Interrupt */

 firmware debug */

 CONFIG_CARL9170_WPC */

 drop any other error frames */

 TODO: update netdevice's RX dropped/errors statistics */

 post-process RSSI */

 TODO: we could do something with phy_errors */

/*

 * NOTE:

 *

 * The firmware is in charge of waking up the device just before

 * the AP is expected to transmit the next beacon.

 *

 * This leaves the driver with the important task of deciding when

 * to set the PHY back to bed again.

 min. beacon length + FCS_LEN */

 check if this really is a beacon */

 and only beacons from the associated BSSID, please */

 Check whenever the PHY can be turned off again. */

 1. What about buffered unicast traffic for our AID? */

 2. Maybe the AP wants to send multicast/broadcast data? */

 back to low-power land. */

 force CAM */

		/*

		 * This frame is not part of an aMPDU.

		 * Therefore it is not subjected to any

		 * of the following content restrictions.

	/*

	 * "802.11n - 7.4a.3 A-MPDU contents" describes in which contexts

	 * certain frame types can be part of an aMPDU.

	 *

	 * In order to keep the processing cost down, I opted for a

	 * stateless filter solely based on the frame control field.

	/* (driver) frame trap handler

	 *

	 * Because power-saving mode handing has to be implemented by

	 * the driver/firmware. We have to check each incoming beacon

	 * from the associated AP, if there's new data for us (either

	 * broadcast/multicast or unicast) we have to react quickly.

	 *

	 * So, if you have you want to add additional frame trap

	 * handlers, this would be the perfect place!

/*

 * If the frame alignment is right (or the kernel has

 * CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS), and there

 * is only a single MPDU in the USB frame, then we could

 * submit to mac80211 the SKB directly. However, since

 * there may be multiple packets in one SKB in stream

 * mode, and we need to observe the proper ordering,

 * this is non-trivial.

 Aggregated MPDUs start with an PLCP header */

			/*

			 * The PLCP header needs to be cached for the

			 * following MIDDLE + LAST A-MPDU packets.

			 *

			 * So, if you are wondering why all frames seem

			 * to share a common RX status information,

			 * then you have the answer right here...

		/*

		 * The last frame of an A-MPDU has an extra tail

		 * which does contain the phy status of the whole

		 * aggregate.

  These are just data + mac status */

 single mpdu has both: plcp (head) and phy status (tail) */

 FC + DU + RA + FCS */

 weird thing, but this is the same in the original driver */

 found the 6 * 0xffff marker? */

 check if this is stream has a valid tag.*/

			/*

			 * TODO: handle the highly unlikely event that the

			 * corrupted stream has the TAG at the right position.

 check if the frame can be repaired. */

 this is not "short read". */

				/*

				 * nested carl9170_rx_stream call!

				 *

				 * termination is guaranteed, even when the

				 * combined frame also have an element with

				 * a bad tag.

 check if stream is clipped */

 TODO: handle double stream corruption. */

			/*

			 * save incomplete data set.

			 * the firmware will resend the missing bits when

			 * the rx - descriptor comes round again.

/*

 * Atheros CARL9170 driver

 *

 * MAC programming

 *

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; see the file COPYING.  If not, see

 * http://www.gnu.org/licenses/.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *    Copyright (c) 2007-2008 Atheros Communications, Inc.

 *

 *    Permission to use, copy, modify, and/or distribute this software for any

 *    purpose with or without fee is hereby granted, provided that the above

 *    copyright notice and this permission notice appear in all copies.

 *

 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 12 mbit OFDM */

 11 mbit CCK */

 6 mbit OFDM */

 OFDM 6/9/12/18/24/36/48/54 */

 OFDM (6/9../54) + CCK (1/2/5.5/11) */

 switch MAC to OTUS interface */

 enable MMIC */

 CF-END & CF-ACK rate => 24M OFDM */

 NAV protects ACK only (in TXOP) */

 Set Beacon PHY CTRL's TPC to 0x7, TA1=1 */

 OTUS set AM to 0x1 */

 Aggregation MAX number and timeout */

 rate sets */

 MIMO response control */

 set PHY register read timeout (??) */

 Disable Rx TimeOut, workaround for BB. */

 Set WLAN DMA interrupt mode: generate int per packet */

 Disables the CF_END frame, undocumented register */

 reset group hash table */

 disable PRETBTT interrupt */

 iwlagn 802.11n STA Workaround */

		/*

		 * Enable monitor mode

		 *

		 * rx_ctrl |= AR9170_MAC_RX_CTRL_ACK_IN_SNIFFER;

		 * sniffer |= AR9170_MAC_SNIFFER_ENABLE_PROMISC;

		 *

		 * When the hardware is in SNIFFER_PROMISC mode,

		 * it generates spurious ACKs for every incoming

		 * frame. This confuses every peer in the

		 * vicinity and the network throughput will suffer

		 * badly.

		 *

		 * Hence, the hardware will be put into station

		 * mode and just the rx filters are disabled.

/*

 * Atheros CARL9170 driver

 *

 * USB - frontend

 *

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 * Copyright 2009, 2010, Christian Lamparter <chunkeey@googlemail.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; see the file COPYING.  If not, see

 * http://www.gnu.org/licenses/.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *    Copyright (c) 2007-2008 Atheros Communications, Inc.

 *

 *    Permission to use, copy, modify, and/or distribute this software for any

 *    purpose with or without fee is hereby granted, provided that the above

 *    copyright notice and this permission notice appear in all copies.

 *

 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Note:

 *

 * Always update our wiki's device list (located at:

 * https://wireless.wiki.kernel.org/en/users/Drivers/ar9170/devices ),

 * whenever you add a new device.

 Atheros 9170 */

 Atheros TG121N */

 TP-Link TL-WN821N v2 */

 3Com Dual Band 802.11n USB Adapter */

 H3C Dual Band 802.11n USB Adapter */

 Cace Airpcap NX */

 D-Link DWA 160 A1 */

 D-Link DWA 160 A2 */

 D-Link DWA 130 D */

 Netgear WNA1000 */

 Netgear WNDA3100 (v1) */

 Netgear WN111 v2 */

 Zydas ZD1221 */

 Proxim ORiNOCO 802.11n USB */

 WNC Generic 11n USB Dongle */

 ZyXEL NWD271N */

 Z-Com UB81 BG */

 Z-Com UB82 ABG */

 Sphairon Homelink 1202 */

 Arcadyan WN7512 */

 Planex GWUS300 */

 IO-Data WNGDNUS2 */

 NEC WL300NU-G */

 NEC WL300NU-AG */

 AVM FRITZ!WLAN USB Stick N */

 AVM FRITZ!WLAN USB Stick N 2.4 */

 Qwest/Actiontec 802AIN Wireless N USB Network Adapter */

 Airlive X.USB a/b/g/n */

 terminate */

 everything is fine */

 disconnect */

		/*

		 * Defer the frame clean-up to the tasklet worker.

		 * This is necessary, because carl9170_tx_drop

		 * does not work in an irqsave context.

 a random transmission error has occurred? */

 everything is fine */

 disconnect */

 everything is fine */

 disconnect */

	/*

	 * While the carl9170 firmware does not use this EP, the

	 * firmware loader in the EEPROM unfortunately does.

	 * Therefore we need to be ready to handle out-of-band

	 * responses and traps in case the firmware crashed and

	 * the loader took over again.

	/*

	 * Strictly speaking: The tx scheduler is not part of the USB system.

	 * But the rx worker returns frames back to the mac80211-stack and

	 * this is the _perfect_ place to generate the next transmissions.

 rx path */

 handle disconnect events*/

 handle all other errors */

		/*

		 * usb_submit_rx_urb reported a problem.

		 * In case this is due to a rx buffer shortage,

		 * elevate the tasklet worker priority to

		 * the highest available level.

			/*

			 * The system is too slow to cope with

			 * the enormous workload. We have simply

			 * run out of active rx urbs and this

			 * unfortunately leads to an unpredictable

			 * device.

		/*

		 * Using anything less than _high_ priority absolutely

		 * kills the rx performance my UP-System...

	/*

	 * The driver actively maintains a second shadow

	 * pool for inactive, but fully-prepared rx urbs.

	 *

	 * The pool should help the driver to master huge

	 * workload spikes without running the risk of

	 * undersupplying the hardware or wasting time by

	 * processing rx data (streams) inside the urb

	 * completion (hardirq context).

 the device now waiting for the firmware. */

 lets wait a while until the tx - queues are dried out */

 writing multiple regs fills this buffer already */

 Maybe the device was removed in the moment we were waiting? */

 provide some maybe useful debug information */

 invalidate to avoid completing the next command prematurely */

 kill any pending command */

	/*

	 * Note:

	 * So far we freed all tx urbs, but we won't dare to touch any rx urbs.

	 * Else we would end up with a unresponsive device...

 this removes the miniboot image */

 FW DL */, 0x40 | USB_DIR_OUT,

 FW DL COMPLETE */,

 now, start the command response counter */

	/*

	 * Disable the command response sequence counter check.

	 * We already know that the device/firmware is in a bad state.

	 * So, no extra points are awarded to anyone who reminds the

	 * driver about that.

 The reboot procedure can take quite a while to complete. */

	/*

	 * This is the last resort to get the device going again

	 * without any *user replugging action*.

	 *

	 * But there is a catch: usb_reset really is like a physical

	 * *reconnect*. The mac80211 state will be lost in the process.

	 * Therefore a userspace application, which is monitoring

	 * the link must step in.

	/*

	 * The carl9170 firmware let's the driver know when it's

	 * ready for action. But we have to be prepared to gracefully

	 * handle all spurious [flushed] messages after each (re-)boot.

	 * Thus the command response counter remains disabled until it

	 * can be safely synchronized.

	/* Store a copies of the usb_interface and usb_device pointer locally.

	 * This is because release_driver initiates carl9170_usb_disconnect,

	 * which in turn frees our driver context (ar).

 at this point 'ar' could be already freed. Don't use it anymore */

 unbind anything failed */

	/* We need to remember the type of endpoint 4 because it differs

	 * between high- and full-speed configuration. The high-speed

	 * configuration specifies it as interrupt and the full-speed

	 * configuration as bulk endpoint. This information is required

	 * later when sending urbs to that endpoint.

	/*

	 * The USB documentation demands that [for suspend] all traffic

	 * to and from the device has to stop. This would be fine, but

	 * there's a catch: the device[usb phy] does not come back.

	 *

	 * Upon resume the firmware will "kill" itself and the

	 * boot-code sorts out the magic voodoo.

	 * Not very nice, but there's not much what could go wrong.

 CONFIG_PM */

 CONFIG_PM */

/*

 * Atheros CARL9170 driver

 *

 * Basic HW register/memory/command access functions

 *

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; see the file COPYING.  If not, see

 * http://www.gnu.org/licenses/.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *    Copyright (c) 2007-2008 Atheros Communications, Inc.

 *

 *    Permission to use, copy, modify, and/or distribute this software for any

 *    purpose with or without fee is hereby granted, provided that the above

 *    copyright notice and this permission notice appear in all copies.

 *

 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 abuse "out" for the register offsets, must be same length */

 also use the same buffer for the input */

 convert result to cpu endian */

 Sleep until next TBTT */

 wake up immediately */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Atheros CARL9170 driver

 *

 * firmware parser

 *

 * Copyright 2009, 2010, Christian Lamparter <chunkeey@googlemail.com>

 needed to find the LAST desc */

 CONFIG_MAC80211_MESH */

 As IBSS Encryption is software-based, IBSS RSN is supported. */

/*

 * Atheros CARL9170 driver

 *

 * debug(fs) probing

 *

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 * Copyright 2009, 2010, Christian Lamparter <chunkeey@googlemail.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; see the file COPYING.  If not, see

 * http://www.gnu.org/licenses/.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *    Copyright (c) 2008-2009 Atheros Communications, Inc.

 *

 *    Permission to use, copy, modify, and/or distribute this software for any

 *    purpose with or without fee is hereby granted, provided that the above

 *    copyright notice and this permission notice appear in all copies.

 *

 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Atheros CARL9170 driver

 *

 * PHY and RF code

 *

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; see the file COPYING.  If not, see

 * http://www.gnu.org/licenses/.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *    Copyright (c) 2007-2008 Atheros Communications, Inc.

 *

 *    Permission to use, copy, modify, and/or distribute this software for any

 *    purpose with or without fee is hereby granted, provided that the above

 *    copyright notice and this permission notice appear in all copies.

 *

 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	{ 0x1c8864, 0x0001ce00, 0x0001ce00, 0x0001ce00, 0x0001ce00, }, */

/*

 * look up a certain register in ar5416_phy_init[] and return the init. value

 * for the band and bandwidth given. Return 0 if register address not found.

/*

 * initialize some phy regs from eeprom values in modal_header[]

 * acc. to band and bandwidth

 pointer to the modal_header acc. to band */

 ant common control (index 0) */

 ant control chain 0 (index 1) */

 ant control chain 2 (index 2) */

 SwSettle (index 3) */

 adcDesired, pdaDesired (index 4) */

 TxEndToXpaOff, TxFrameToXpaOn (index 5) */

 TxEndToRxOn (index 6) */

 thresh62 (index 7) */

 tx/rx attenuation chain 0 (index 8) */

 tx/rx attenuation chain 2 (index 9) */

 tx/rx margin chain 0 (index 10) */

 bsw margin chain 0 for 5GHz only */

 tx/rx margin chain 2 (index 11) */

 iqCall, iqCallq chain 0 (index 12) */

 iqCall, iqCallq chain 2 (index 13) */

 xpd gain mask (index 14) */

 bank 0 */

 bank 1 */

 bank 2 */

 bank 3 */

 bank 4 */

 bank 5 */

 bank 6 */

 bank 7 */

 NB: must be in sync with channel tables in main! */

/*

 *	freq,

 *		20MHz,

 *		40MHz (below),

 *		40Mhz (above),

 nothing to interpolate, it's horizontal */

 check if we hit one of the edges */

 x1 == x2 is bad, hopefully == x */

	/*

	 * XXX: unwrap this expression

	 *	Isn't it just DIV_ROUND_UP(y, 1<<SHIFT)?

	 *	Can we rely on the compiler to optimise away the div?

 exact freq match */

 lower channel has the inband flag set */

 lower channel has the inband flag set */

/*

 * calculate the conformance test limits and the heavy clip parameter

 * and apply them to ar->power* (derived from otus hal/hpmain.c, line 3706)

 CTL group */

 CTL index */

	/*

	 * order is relevant in the mode_list_*: we fall back to the

	 * lower indices if any mode is missed in the EEPROM.

	/*

	 * TODO: investigate the differences between OTUS'

	 * hpreg.c::zfHpGetRegulatoryDomain() and

	 * ath/regd.c::ath_regd_get_band_ctl() -

	 * e.g. for FCC3_WORLD the OTUS procedure

	 * always returns CTL_FCC, while the one in ath/ delivers

	 * CTL_ETSI for 2GHz and CTL_FCC for 5GHz.

 ctl group not found - either invalid band (NO_CTL) or ww roaming */

 skip CTL and heavy clip for CTL_MKK and CTL_ETSI */

			/*

			 * determine heavy clip parameter

			 * from the 11G edges array

 adjust freq for 40MHz */

			/*

			 * TODO: check if the regulatory max. power is

			 * controlled by cfg80211 for DFS.

			 * (hpmain applies it to max_power itself for DFS freq)

			/*

			 * Workaround in otus driver, hpmain.c, line 3906:

			 * if no data for 5GHT20 are found, take the

			 * legacy 5G value. We extend this here to fallback

			 * from any other HT* or 11G, too.

 apply max power to pwr_cal_data (ar->power_*) */

	/*

	 * cycle through the various modes

	 *

	 * legacy modes first: 5G, 2G CCK, 2G OFDM

 5 GHz legacy */

 2.4 GHz CCK */

 2.4 GHz OFDM */

 HT modes now: 5G HT20, 5G HT40, 2G CCK, 2G OFDM, 2G HT20, 2G HT40 */

 5 GHz HT 20 */

 5 GHz HT 40 */

 2.4 GHz HT 20 */

 2.4 GHz HT 40 */

 calc. conformance test limits and apply to ar->power*[] */

 may be NULL at first setup */

 cold reset BB/ADDA */

			/* We have tried very hard to change to _another_

			 * channel and we've failed to do so!

			 * Chances are that the PHY/RF is no longer

			 * operable (due to corruptions/fatal events/bugs?)

			 * and we need to reset at a higher level.

/*

 * Atheros CARL9170 driver

 *

 * 802.11 xmit & status routines

 *

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 * Copyright 2009, 2010, Christian Lamparter <chunkeey@googlemail.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; see the file COPYING.  If not, see

 * http://www.gnu.org/licenses/.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *    Copyright (c) 2007-2008 Atheros Communications, Inc.

 *

 *    Permission to use, copy, modify, and/or distribute this software for any

 *    purpose with or without fee is hereby granted, provided that the above

 *    copyright notice and this permission notice appear in all copies.

 *

 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

		/*

		 * This is just another workaround, until

		 * someone figures out how to get QoS and

		 * AMPDU to play nicely together.

 AC_BE */

	/*

	 * The driver has to accept the frame, regardless if the queue is

	 * full to the brim, or not. We have to do the queuing internally,

	 * since mac80211 assumes that a driver which can operate with

	 * aggregated frames does not reject frames for this reason.

 needs rcu_read_lock */

	/*

	 * Normally we should use wrappers like ieee80211_get_DA to get

	 * the correct peer ieee80211_sta.

	 *

	 * But there is a problem with indirect traffic (broadcasts, or

	 * data which is designated for other stations) in station mode.

	 * The frame will be directed to the AP for distribution and not

	 * to the actual destination.

	/*

	 * Cookie #0 serves two special purposes:

	 *  1. The firmware might use it generate BlockACK frames

	 *     in responds of an incoming BlockAckReqs.

	 *

	 *  2. Prevent double-free bugs.

 make a local copy of the cookie */

 invalidate cookie */

	/*

	 * Do a out-of-bounds check on the cookie:

	 *

	 *  * cookie "0" is reserved and won't be assigned to any

	 *    out-going frame. Internally however, it is used to

	 *    mark no longer/un-accounted frames and serves as a

	 *    cheap way of preventing frames from being freed

	 *    twice by _accident_. NB: There is a tiny race...

	 *

	 *  * obviously, cookie number is limited by the amount

	 *    of available memory blocks, so the number can

	 *    never execeed the mem_blocks count.

 Called from any context */

			/*

			 * drop redundant tx_status reports:

			 *

			 * 1. ampdu_ack_len of the final tx_status does

			 *    include the feedback of this particular frame.

			 *

			 * 2. tx_status_irqsafe only queues up to 128

			 *    tx feedback reports and discards the rest.

			 *

			 * 3. minstrel_ht is picky, it only accepts

			 *    reports of frames with the TX_STATUS_AMPDU flag.

			 *

			 * 4. mac80211 is not particularly interested in

			 *    feedback either [CTL_REQ_TX_STATUS not set]

			/*

			 * Either the frame transmission has failed or

			 * mac80211 requested tx status.

 Caller must hold the tid_info->lock & rcu_read_lock */

	/*

	 * Sanity check. For each MPDU we set the bit in bitmap and

	 * clear it once we received the tx_status.

	 * But if the bit is already cleared then we've been bitten

	 * by a bug.

	/*

	 * Unlike all other frames, the status report for BARs does

	 * not directly come from the hardware as it is incapable of

	 * matching a BA to a previously send BAR.

	 * Instead the RX-path will scan for incoming BAs and set the

	 * IEEE80211_TX_STAT_ACK if it sees one that was likely

	 * caused by a BAR from us.

 This function may be called form any context */

		/*

		 * At least one queue has been stuck for long enough.

		 * Give the device a kick and hope it gets back to

		 * work.

		 *

		 * possible reasons may include:

		 *  - frames got lost/corrupted (bad connection to the device)

		 *  - stalled rx processing/usb controller hiccups

		 *  - firmware errors/bugs

		 *  - every bug you can think of.

		 *  - all bugs you can't...

		 *  - ...

		/*

		 * We have lost the race to another thread.

 +1 dBm for HT40 */

 this works because 40 MHz is 2 and dup is 3 */

 heavy clip control */

		/*

		 * green field preamble does not work.

		 *

		 * if (txrate->flags & IEEE80211_TX_RC_GREEN_FIELD)

		 * tmp |= cpu_to_le32(AR9170_TX_PHY_GREENFIELD);

		/*

		 * short preamble seems to be broken too.

		 *

		 * if (txrate->flags & IEEE80211_TX_RC_USE_SHORT_PREAMBLE)

		 *	tmp |= cpu_to_le32(AR9170_TX_PHY_SHORT_PREAMBLE);

	/* Set the rate control probe flag for all (sub-) frames.

	 * This is because the TX_STATS_AMPDU flag is only set on

	 * the last frame, so it has to be inherited.

	/* NOTE: For the first rate, the ERP & AMPDU flags are directly

	 * taken from mac_control. For all fallback rate, the firmware

	 * updates the mac_control flags from the rate info field.

 first rate - part of the hw's frame header */

			/* fallback rates are stored in the firmware's

			 * retry rate set array.

	/*

	 * Note: If the frame was sent through a monitor interface,

	 * the ieee80211_vif pointer can be NULL.

			/*

			 * Watch out!

			 *

			 * Otus uses slightly different density values than

			 * those from the 802.11n spec.

	/*

	 * If you haven't noticed carl9170_tx_prepare has already filled

	 * in all ampdu spacing & factor parameters.

	 * Now it's the time to check whenever the settings have to be

	 * updated by the firmware, or if everything is still the same.

	 *

	 * There's no sane way to handle different density values with

	 * this hardware, so we may as well just do the compare in the

	 * driver.

 strict 0, 1, ..., n - 1, n frame sequence order */

 don't upload more than AMPDU FACTOR allows. */

			/* stop TID, if A-MPDU frames are still missing,

			 * or whenever the queue is empty.

 apply ampdu spacing & factor settings */

 set aggregation push bit */

			/*

			 * NB: tx_status[i] vs. tx_status[q],

			 * TODO: Move into pick_skb or alloc_dev_space.

			/*

			 * increase ref count to "2".

			 * Ref counting is the easiest way to solve the

			 * race between the urb's completion routine:

			 *	carl9170_tx_callback

			 * and wlan tx status functions:

			 *	carl9170_tx_status/janitor.

 check if sequence is within the BA window */

	/*

	 * from now on, one has to use carl9170_tx_status to free

	 * all ressouces which are associated with the frame.

		/* to static code analyzers and reviewers:

		 * mac80211 guarantees that a valid "sta"

		 * reference is present, if a frame is to

		 * be part of an ampdu. Hence any extra

		 * sta == NULL checks are redundant in this

		 * special case.

 caller has to take rcu_read_lock */

	/* The AR9170 hardware has no fancy beacon queue or some

	 * other scheduling mechanism. So, the driver has to make

	 * due by setting the two beacon timers (pretbtt and tbtt)

	 * once and then swapping the beacon address in the HW's

	 * register file each time the pretbtt fires.

		/*

		 * XXX: This accesses beyond skb data for up

		 *	to the last 3 bytes!!

/*

 * Atheros CARL9170 driver

 *

 * mac80211 interaction code

 *

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 * Copyright 2009, 2010, Christian Lamparter <chunkeey@googlemail.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; see the file COPYING.  If not, see

 * http://www.gnu.org/licenses/.

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *    Copyright (c) 2007-2008 Atheros Communications, Inc.

 *

 *    Permission to use, copy, modify, and/or distribute this software for any

 *    purpose with or without fee is hereby granted, provided that the above

 *    copyright notice and this permission notice appear in all copies.

 *

 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * NB: The hw_value is used as an index into the carl9170_phy_freq_params

 *     array in phy.c so that we don't have to do frequency lookups!

 XXX */	\

		/*

		 * We can only drop frames which have not been uploaded

		 * to the device yet.

 Wait for all other outstanding frames to timeout. */

 reinitialize queues statistics */

 reset QoS defaults */

 "The first key is unique." */

	/* Set "disable hw crypto offload" whenever the module parameter

	 * nohwcrypt is true or if the firmware does not support it.

 Clear key-cache */

 CONFIG_CARL9170_LEDS */

 stop DMA */

		/*

		 * The reset was unsuccessful and the device seems to

		 * be dead. But there's still one option: a low-level

		 * usb subsystem reset...

	/*

	 * Sometimes, an error can trigger several different reset events.

	 * By ignoring these *surplus* reset events, the device won't be

	 * killed again, right after it has recovered.

	/*

	 * At this point, the device instance might have vanished/disabled.

	 * So, don't put any code which access the ar9170 struct

	 * without proper protection.

	/* We have to fall back to software crypto, whenever

	 * the user choose to participates in an IBSS. HW

	 * offload for IBSS RSN is not supported by this driver.

	 *

	 * NOTE: If the previous main interface has already

	 * disabled hw crypto offload, we have to keep this

	 * previous disable_offload setting as it was.

	 * Altough ideally, we should notify mac80211 and tell

	 * it to forget about any HW crypto offload for now.

	/* The driver used to have P2P GO+CLIENT support,

	 * but since this was dropped and we don't know if

	 * there are any gremlins lurking in the shadows,

	 * so best we keep HW offload disabled for P2P.

		/*

		 * Skip the interface structure initialization,

		 * if the vif survived the _restart call.

	/* Because the AR9170 HW's MAC doesn't provide full support for

	 * multiple, independent interfaces [of different operation modes].

	 * We have to select ONE main interface [main mode of HW], but we

	 * can have multiple slaves [AKA: entry in the ACK-table].

	 *

	 * The first (from HEAD/TOP) interface in the ar->vif_list is

	 * always the main intf. All following intfs in this list

	 * are considered to be slave intfs.

		/* We end up in here, if the main interface is being replaced.

		 * Put the new main interface at the HEAD of the list and the

		 * previous inteface will automatically become second in line.

		/* Add new inteface. If the list is empty, it will become the

		 * main inteface, otherwise it will be slave.

			/* downgrade old main intf to slave intf.

			 * NOTE: We are no longer under rcu_read_lock.

			 * But we are still holding ar->mutex, so the

			 * vif data [id, addr] is safe.

 caller must hold ar->mutex */

 TODO */

 TODO */

 adjust slot time for 5 GHz */

 always get broadcast frames */

 mask supported flags */

	/*

	 * We can support more by setting the sniffer bit and

	 * then checking the error flags, later.

		/*

		 * Therefore a hard limit for the broadcast traffic should

		 * prevent false alarms.

 TODO */

	/*

	 * The following settings can only be changed by the

	 * master interface.

	/* Fall back to software encryption whenever the driver is connected

	 * to more than one network.

	 *

	 * This is very unfortunate, because some machines cannot handle

	 * the high througput speed in 802.11n networks.

	/*

	 * While the hardware supports *catch-all* key, for offloading

	 * group-key en-/de-cryption. The way of how the hardware

	 * decides which keyId maps to which key, remains a mystery...

			/*

			 * hardware is not capable generating MMIC

			 * of fragmented frames!

 The device is gone... together with the key ;-) */

			/*

			 * HW does support 16us AMPDU density.

			 * No HT-Xmit for station.

 Handled by hardware */

 CONFIG_CARL9170_WPC */

 CONFIG_CARL9170_HWRNG */

	/*

	 * this buffer is used for rx stream reconstruction.

	 * Under heavy load this device (or the transport layer?)

	 * tends to split the streams into separate rx descriptors.

	/*

	 * Here's a hidden pitfall!

	 *

	 * All 4 AC queues work perfectly well under _legacy_ operation.

	 * However as soon as aggregation is enabled, the traffic flow

	 * gets very bumpy. Therefore we have to _switch_ to a

	 * software AC with a single HW queue.

 firmware decides which modes we support */

		/*

		 * see the comment above, why we allow the user

		 * to disable HT by a module parameter.

 ATH_DEFAULT_NOISE_FLOOR */

 number of words to read at once */

 don't want to handle trailing remains */

 second part of wiphy init */

 try to read EEPROM, init MAC addr */

 mac80211 interface is now registered */

 CONFIG_CARL9170_DEBUGFS */

 CONFIG_CARL9170_LEDS */

 CONFIG_CARL9170_WPC */

 CONFIG_CARL9170_HWRNG */

 CONFIG_CARL9170_LEDS */

 CONFIG_CARL9170_DEBUGFS */

 CONFIG_CARL9170_WPC */

 CONFIG_CARL9170_HWRNG */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014,2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 for STA-like interface, don't runtime suspend */

 AP-like interface - can't suspend */

 can always sleep when down */

 interface is running */

	/* wil_status_resuming will be cleared when getting

	 * WMI_TRAFFIC_RESUME_EVENTID

 Send WMI resume request to the device */

 Wake all queues */

 Prevent handling of new tx and wmi commands */

 Send WMI suspend request to the device */

 Wait for completion of the pending RX packets */

	/* In case of pending WMI events, reject the suspend

	 * and resume the device.

	 * This can happen if the device sent the WMI events before

	 * approving the suspend.

 Disable device reset on PERST */

 Save the current bus request to return to the same in resume */

 if resume succeeded, reject the suspend */

 if netif up, hardware is alive, shut it down */

 Disable PCIe IRQ to prevent sporadic IRQs when PCIe is suspending */

	/* if any netif up, bring hardware up

	 * During open(), IFF_UP set after actual device method

	 * invocation. This prevent recursive call to wil_up()

	 * wil_status_suspended will be cleared in wil_reset

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 release the frame from the reorder ring buffer */

	/* note: this function is never called with

	 * hseq preceding r->head_seq_num, i.e it is always true

	 * !seq_less(hseq, r->head_seq_num)

	 * and thus on loop exit it should be

	 * r->head_seq_num == hseq

 called in NAPI context */

	/** Due to the race between WMI events, where BACK establishment

	 * reported, and data Rx, few packets may be pass up before reorder

	 * buffer get allocated. Catch up by pretending SSN is what we

	 * see in the 1-st Rx packet

	 *

	 * Another scenario, Rx get delayed and we got packet from before

	 * BACK. Pass it to the stack and wait.

 frame with out of date sequence number */

	/*

	 * If frame the sequence number exceeds our buffering window

	 * size release some previous frames to make room for this one.

 release stored frames up to new head to stack */

 Now the new frame is always in the range of the reordering buffer */

 check if we already stored this frame */

	/*

	 * If the current MPDU is in the right order and nothing else

	 * is stored we can process it directly, no need to buffer it.

	 * If it is first but there's something stored, we may be able

	 * to release frames after this one.

 put the frame in the reordering buffer */

 process BAR frame, called in NAPI context */

	/* Do not pass remaining frames to the network stack - it may be

	 * not expecting to get any more Rx. Rx from here may lead to

	 * kernel OOPS since some per-socket accounting info was already

	 * released.

 ADDBA processing */

 Block Ack - Rx side (recipient) */

	/* bit 0: A-MSDU supported

	 * bit 1: policy (should be 0 for us)

	 * bits 2..5: TID

	 * bits 6..15: buffer size

 sanity checks */

 apply policies */

 apply */

 BACK - Tx side (originator) */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2015,2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 calculate the total size of the unpacked crash dump */

 copy to crash dump area */

	/* fw_dump_data will be free in device coredump release function

	 * after 5 min

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

/* WIL_EDMG_BW_CONFIGURATION define the allowed channel bandwidth

 * configurations as defined by IEEE 802.11 section 9.4.2.251, Table 13.

 * The value 5 allowing CB1 and CB2 of adjacent channels.

/* WIL_EDMG_CHANNELS is a bitmap that indicates the 2.16 GHz channel(s) that

 * are allowed to be used for EDMG transmissions in the BSS as defined by

 * IEEE 802.11 section 9.4.2.251.

 Rx channel bonding mode */

/* Vendor id to be used in vendor specific command and events

 * to user space.

 * NOTE: The authoritative place for definition of QCA_NL80211_VENDOR_ID,

 * vendor subcmd definitions prefixed with QCA_NL80211_VENDOR_SUBCMD, and

 * qca_wlan_vendor_attr is open source file src/common/qca-vendor.h in

 * git://w1.fi/srv/git/hostap.git; the values here are just a copy of that

 keep last */

 vendor specific commands */

 TODO */

 TODO */

 TODO */

 MCS 1..12 - SC PHY */

 1..12 */

 TODO */

 FIXME */

	/* check extended MCS (12.1) and convert it into

	 * base MCS (7) + EXTENDED_SC_DMG flag

/*

 * Find @idx-th active STA for specific MID for station dump.

	/* P2P device is not a real virtual interface, it is a management-only

	 * interface that shares the main interface.

	 * Skip concurrency checks here.

 use our primary ethernet address */

 locally administered */

 continue */

	/* do not reset FW when there are active VIFs,

	 * because it can cause significant disruption

 scan is supported on client interfaces and on AP interface */

 FW don't support scan after connection attempt */

 social scan on P2P_DEVICE is handled as p2p search */

 0-based channel indexes */

 convert from edmg channel bitmap into edmg channel number */

 For secure assoc, remove old keys */

 WMI_CONNECT_CMD */

 regular secure connection */

 WSC */

 insecure connection */

 Connect can take lots of time */

 these parameters are explicitly not supported */

	/* Note, currently we support the "wait" parameter only on AP mode.

	 * In other modes, user-space must call remain_on_channel before

	 * mgmt_tx or listen on a channel other than active one.

 use the wmi_mgmt_tx_ext only on AP mode and off-channel */

	/* when the sent packet was not acked by receiver(ACK=0), rc will

	 * be -EAGAIN. In this case this function needs to return success,

	 * the ACK=0 will be reflected in tx_status.

 TODO: Rx GTK or Tx GTK? */

 not needed */

 supplicant provides Rx group key in STA mode with NULL MAC address */

		/* in FT, sta info may not be available as add_key may be

		 * sent by host before FW sends WMI_CONNECT_EVENT

 update local storage used for AP recovery */

		/* in FT set crypto will take place upon receiving

		 * WMI_RING_EN_EVENTID event

 Need to be present or wiphy_new() will WARN */

/*

 * find a specific IE in a list of IEs

 * return a pointer to the beginning of IE in the list

 * or NULL if not found

 IE tag at offset 0, length at offset 1 */

 make sure there is room for 3 bytes OUI + 1 byte OUI type */

/*

 * merge the IEs in two lists into a single list.

 * do not include IEs from the second list which exist in the first list.

 * add only vendor specific IEs from second list to keep

 * the merged list sorted (since vendor-specific IE has the

 * highest tag number)

 * caller must free the allocated memory for merged IEs

 IE tag at offset 0, length at offset 1 */

 internal functions for device reset and starting AP */

 update local storage used for AP recovery */

 to use beacon IE's, remove this #if 0 */

 check that the probe response IEs has a MDE */

 success */

 in case privacy has changed, need to restart the AP */

 probe_client handling */

	/* assume STA is alive if it is still connected,

	 * else FW will disconnect it

 Setting the wakeup trigger based on wow is TBD */

	/* device would return error if it thinks PNO is already stopped.

	 * ignore the return code so user space and driver gets back in-sync

 vif is not roaming */

	/* wil_vif_ft_roam is set. wil_cfg80211_update_ft_ies is used as

	 * a trigger for reassoc

 reset stored value upon failure */

 AP mode */

 P2P device */

 TODO: */;

 may change after reading FW capabilities */

 including main interface */

	/* Note: the wireless_dev structure is no longer allocated here.

	 * Instead, it is allocated as part of the net_device structure

	 * for main interface and each VIF.

 default monitor channel */

 do not access wil6210_priv after returning from here */

 otherwise, using cid=0 for unassociated station */

 unlock all cids */

				/* the FW will silently ignore and return

				 * success for unused cid, so abort the loop

				 * on any other error

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

/*

 * Theory of operation:

 *

 * There is ISR pseudo-cause register,

 * dma_rgf->DMA_RGF.PSEUDO_CAUSE.PSEUDO_CAUSE

 * Its bits represents OR'ed bits from 3 real ISR registers:

 * TX, RX, and MISC.

 *

 * Registers may be configured to either "write 1 to clear" or

 * "clear on read" mode

 *

 * When handling interrupt, one have to mask/unmask interrupts for the

 * real ISR registers, or hardware may malfunction.

 *

 configure to Clear-On-Read mode */

 defined(CONFIG_WIL6210_ISR_COR) */

 configure to Write-1-to-Clear mode */

 defined(CONFIG_WIL6210_ISR_COR) */

 Update RX and TX moderation */

	/* Treat special events as regular

	 * (set bit 0 to 0x1 and clear bits 1-8)

	/* disable interrupt moderation for monitor

	 * to get better timestamp precision

 Disable and clear tx counter before (re)configuration */

 Configure TX max burst duration timer to use usec units */

 Disable and clear tx idle counter before (re)configuration */

 Configure TX max burst duration timer to use usec units */

 Disable and clear rx counter before (re)configuration */

 Configure TX max burst duration timer to use usec units */

 Disable and clear rx idle counter before (re)configuration */

 Configure TX max burst duration timer to use usec units */

	/* RX_DONE and RX_HTRSH interrupts are the same if interrupt

	 * moderation is not used. Interrupt moderation may cause RX

	 * buffer overflow while RX_DONE is delayed. The required

	 * action is always the same - should empty the accumulated

	 * packets from the RX ring.

 Rx IRQ will be enabled when NAPI processing finished */

 Rx IRQ will be enabled when NAPI processing finished */

 Tx IRQ will be enabled when NAPI processing finished */

 clear also all VRING interrupts */

 Tx IRQ will be enabled when NAPI processing finished */

 make shadow copy of registers that should not change on run time */

		/*

		 * do not clear @isr here - we do 2-nd part in thread

		 * there, user space get notified, and it should be done

		 * in non-atomic context

		/**

		 * Actual FW ready indicated by the

		 * WMI_FW_READY_EVENTID

 no need to handle HALP ICRs until next vote */

	/* in non-triple MSI case, this is done inside wil6210_thread_irq

	 * because it has to be done after unmasking the pseudo.

 thread IRQ handler */

 Discover real IRQ cause */

/* DEBUG

 * There is subtle bug in hardware that causes IRQ to raise when it should be

 * masked. It is quite rare and hard to debug.

 *

 * Catch irq issue if it happens and print all I can.

		/* HALP interrupt can be unmasked when misc interrupts are

		 * masked

	/**

	 * pseudo_cause is Clear-On-Read, no need to ACK

 IRQ mask debug */

	/* Discover real IRQ cause

	 * There are 2 possible phases for every IRQ:

	 * - hard IRQ handler called right here

	 * - threaded handler called later

	 *

	 * Hard IRQ handler reads and clears ISR.

	 *

	 * If threaded handler requested, hard IRQ handler

	 * returns IRQ_WAKE_THREAD and saves ISR register value

	 * for the threaded handler use.

	 *

	 * voting for wake thread - need at least 1 vote

 if thread is requested, it will unmask IRQ */

	/* IRQ's are in the following order:

	 * - Tx

	 * - Rx

	 * - Misc

 can't use wil_ioread32_and_clear because ICC value is not set yet */

 make sure write completed */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012-2019 The Linux Foundation. All rights reserved.

/* Max number of entries (packets to complete) to update the hwtail of tx

 * status ring. Should be power of 2

 RX buffer size must be aligned to 4 bytes */

	/* Status messages are allocated and initialized to 0. This is necessary

	 * since DR bit should be initialized to 0.

	/* Allocate Tx status ring. Tx descriptor rings will be

	 * allocated on WMI connect event

 Allocate one skb for Rx descriptor RING */

	/**

	 * Make sure that the network stack calculates checksum for packets

	 * which failed the HW checksum calculation

 Get the buffer ID - the index of the rx buffer in the buff_arr */

 Move a buffer from the free list to the active list */

 Save the physical address in skb->cb for later use in dma_unmap */

 make sure dr_bit is read before the rest of status msg */

	/* make sure all writes to descriptors (shared memory) are done before

	 * committing them to HW

 Move the buffer from the active to the free list */

	/* Move all the buffers to the free list in case active list is

	 * not empty in order to release all SKBs before deleting the array

 Set list heads */

	/* Linkify the list.

	 * buffer id 0 should not be used (marks invalid id).

 TX ring */

 In HW reorder, HW is responsible for crypto check */

 Check if there are unhandled RX status messages */

 RX buffer size must be aligned to 4 bytes */

 In SW reorder one must use extended status messages */

 make sure sring is larger than desc ring */

 make sure we will not run out of buff_ids */

 Use debugfs dbg_num_rx_srings if set, reserve one sring for TX */

 Allocate status ring */

 Allocate descriptor ring */

 Allocate Rx buffer array */

 Fill descriptor ring with credits */

 This function is used only for RX SW reorder */

		/* print again all info. One can enable only this

		 * without overhead for printing every Rx frame

 Due to HW issue, KEY error will trigger a MIC error */

 Completed handling all the ready status messages */

 Extract the buffer ID from the status message */

 Read the status message again */

 Extract the SKB from the rx_buff management array */

 Move the buffer from the active list to the free list */

 Move the buffer from the active list to the free list */

	/* skipping indicates if a certain SKB should be dropped.

	 * It is set in case there is an error on the current SKB or in case

	 * of RX chaining: as long as we manage to merge the SKBs it will

	 * be false. once we have a bad SKB or we don't manage to merge SKBs

	 * it will be set to the !EOP value of the current SKB.

	 * This guarantees that all the following SKBs until EOP will also

	 * get dropped.

 reaching here rxdata->skb always contains a full packet */

	/* Compensate for the HW data alignment according to the status

	 * message

	/* Has to be done after dma_unmap_single as skb->cb is also

	 * used for holding the pa

 0..6: mac_length; 7:ip_version 0-IP6 1-IP4*/

	/* translation type:  0 - bypass; 1 - 802.3; 2 - native wifi;

	 * 3 - eth mode

 make sure dr_bit is read before the rest of status msg */

/* Clean up transmitted skb's from the Tx descriptor RING.

 * Return number of descriptors cleared.

 Total number of completed descriptors in all descriptor rings */

 Descriptor Ready bit */

 Process completion messages while DR bit has the expected polarity */

 Find the corresponding descriptor ring */

			/* Make sure the ctx is zeroed before updating the tail

			 * to prevent a case where wil_tx_ring will see

			 * this descriptor as used and handle it before ctx zero

			 * is completed.

 performance monitoring */

 update HW tail to allow HW to push new statuses */

 shall we wake net queues? */

 Update the HW tail ptr (RD ptr) */

/* Sets the descriptor @d up for csum and/or TSO offloading. The corresponding

 * @skb is used to obtain the protocol and headers length.

 * @tso_desc_type is a descriptor type for TSO: 0 - a header, 1 - first data,

 * 2 - middle, 3 - last descriptor.

 Number of descriptors */

 Maximum Segment Size */

 L4 header len: TCP header length */

	/* EOP, TSO desc type, Segmentation enable,

	 * Insert IPv4 and TCP / UDP Checksum

 Calculate pseudo-header */

 IP Header Length */

 MAC header length and IP address family*/

	/* hold reference to skb

	 * to prevent skb release before accounting

	 * in case of immediate "tx done"

 Headers, Head, Fragments */

 total number of used descriptors */

	/* tcp header length and skb network header length are fixed for all

	 * packet's descriptors - read them once here

	/* First descriptor must contain the header only

	 * Header Length = MAC header len + IP header len + TCP header len

 Second descriptor contains the head */

 Rest of the descriptors are from the SKB fragments */

 performance monitoring */

 advance swhead */

	/* make sure all writes to descriptors (shared memory) are done before

	 * committing them to HW

 CID */

 TID */

 TX ops */

 RX ops */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

/* Algorithmic part of the firmware download.

 * To be included in the container file providing framework

/**

 * wil_fw_verify - verify firmware file validity

 *

 * perform various checks for the firmware file header.

 * records are not validated.

 *

 * Return file size or negative error

 have enough data for the file header? */

 start with the file header? */

 data_len */

 signature */

 version */

 checksum. ~crc32(~0, data, size) when fh.crc set to 0*/

 let the FW load anyway */

 continue, let the FW load anyway */

 finish before processing next record */

 finish before processing next record */

 finish before processing next record */

 finish before activate gw */

 activate gw */

 typical time is few usec */

 gw done? */

 wil_fw_type_action */

 wil_fw_type_verify */

/**

 * wil_fw_process - process section from FW file

 * if load is true: Load the FW and uCode code and data to the

 * corresponding device memory regions,

 * otherwise only parse and look for capabilities

 *

 * Return error code

/**

 * wil_request_firmware - Request firmware

 *

 * Request firmware image from the file

 * If load is true, load firmware to device, otherwise

 * only parse and extract capabilities

 *

 * Return error code

 re-initialize board info params */

/**

 * wil_brd_process - process section from BRD file

 *

 * Return error code

	/* Assuming the board file includes only one file header

	 * and one or several data records.

	 * Each record starts with wil_fw_record_head.

 Skip the header record and handle the data records */

/**

 * wil_request_board - Request board file

 *

 * Request board image from the file

 * board file address and max size are read from FW file

 * during initialization.

 * brd file shall include one header and one data section.

 *

 * Return error code

 Verify the header */

 Process the data records */

/**

 * wil_fw_verify_file_exists - checks if firmware file exist

 *

 * @wil: driver context

 * @name: firmware file name

 *

 * return value - boolean, true for success, false for failure

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014,2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

	/* only @rx_coalesce_usecs and @tx_coalesce_usecs supported,

	 * ignore other parameters

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 Set application IE to probe request and probe response */

	/* supplicant doesn't provide Probe Response IEs. As a workaround -

	 * re-use Probe Request IEs

 discovery not really started, only pending */

 another scan started, wait again... */

 Regular scan on the p2p device */

 Search or listen on p2p device */

 search */

 listen */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 Get platform capabilities */

 extract FW capabilities from file without loading the FW */

 Bus ops */

	/* on platforms with buggy ACPI, pdev->msi_enabled may be set to

	 * allow pci_enable_device to work. This indicates INTx was not routed

	 * and only MSI should be used

 how many MSI interrupts to request? */

 need reset here to obtain MAC */

 safe to call if no allocation */

 disable and release IRQ */

 safe to call if no MSI */

 TODO: disable HW */

 keep descending order */

 check HW */

 rollback to if_free */

 rollback to err_plat */

		/* Work around for platforms that can't allocate IRQ:

		 * retry with MSI only

 rollback to err_disable_pdev */

 rollback to err_release_reg */

 rollback to err_iounmap */

	/* device supports >32bit addresses.

	 * for legacy DMA start from 48 bit.

 FW should raise IRQ when ready */

 rollback to bus_disable */

 in case of WMI-only FW, perform full reset and FW loading */

 ignore the error to allow debugging */

		/* Do not fail the driver initialization, as suspend can

		 * be prevented in a later phase if needed

 same as above, firmware broken */

 Talyn */

 end: all zeroes */	},

		/* In case radio stays on, platform device will control

		 * PCIe master

 disable bus mastering */

	/* In case radio stays on, platform device will control

	 * PCIe master

 allow master */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 Nasty hack. Better have per device instances */

 24+ for Rx, 0..23 for Tx */

 0..wil->num_rx_status_rings-1 for Rx, wil->tx_sring_idx for Tx */

 offset to "wil" */

 num_of_descs == 0, it's a frag in a list of descs */

		/* SUBQ_CONS is a table of 32 entries, one for each Q pair.

		 * lower 16bits are for even ring_id and upper 16bits are for

		 * odd ring_id

 performance monitoring */

		/* COMPQ_PROD is a table of 32 entries, one for each Q pair.

		 * lower 16bits are for even ring_id and upper 16bits are for

		 * odd ring_id

	/*

	 * we just read memory block from NIC. This memory may be

	 * garbage. Check validity before using it.

				/*

				 * No need to check @src for validity -

				 * we already validated @d.addr while

				 * reading header

 make sure write propagated to HW */

/**

 * wil6210_debugfs_init_offset - create set of debugfs files

 * @wil: driver's context, used for printing

 * @dbg: directory on the debugfs, where files will be created

 * @base: base address used in address calculation

 * @tbl: table with file descriptions. Should be terminated with empty element.

 *

 * Creates files accordingly to the @tbl.

 set pos to 4 bytes aligned */

---write channel 1..4 to rxon for it, 0 to rxoff---*/

	/* input value: negative to disable, 0 to use system default,

	 * 1..ring size to set descriptor threshold

/* block ack control, write:

 * - "add <ringid> <agg_size> <timeout>" to trigger ADDBA

 * - "del_tx <ringid> <reason>" to trigger DELBA for Tx side

 * - "del_rx <CID> <TID> <reason>" to trigger DELBA for Rx side

/* pmc control, write:

 * - "alloc <num descriptors> <descriptor_size>" to allocate PMC

 * - "free" to release memory allocated for PMC

---tx_mgmt---*/

 Write mgmt frame to this file to send it */

/* Write WMI command (w/o mbox header) to this file to send it

 * WMI starts from wil6210_mbox_hdr_wmi header

---------Tx/Rx descriptor------------*/

 RX ring index == 0 */

 desc ring 0 is reserved for RX */

 RX ring index == WIL6210_MAX_TX_RINGS */

	/* use struct vring_tx_desc for Rx as well,

	 * only field used, .dma.length, is the same

---------Tx/Rx status message------------*/

 Print active list */

---------beamforming------------*/

 if reply is all-0, ignore this CID */

 if reply is all-0, ignore this CID */

---------temp------------*/

---------freq------------*/

---------link------------*/

---------info------------*/

 >0 : AC; 0 : battery; <0 : error */

---------recovery------------*/

/* mode = [manual|auto]

 * state = [idle|pending|running]

 to detect "runx" */

---------Station matrix------------*/

 print roam counter only for connected stations */

 default resolution */

	/* iterate over all MIDs and show per-cid statistics. Then show the

	 * global statistics

 specify cid (use -1 for all cids) and snapshot interval in ms */

 specify snapshot interval in ms */

/* led_blink_time, write:

 * "<blink_on_slow> <blink_off_slow> <blink_on_med> <blink_off_med> <blink_on_fast> <blink_off_fast>

---------FW capabilities------------*/

---------FW version------------*/

---------suspend_stats---------*/

---------compressed_rx_status---------*/

----------------*/

 misc files */

 interrupt control blocks */

 fields in struct wil6210_priv */

 static parameters */

	/* free pmc memory without sending command to fw, as it will

	 * be reset on the way down anyway

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 Drop Tx packets in case Tx ring is full */

 wil_ring_wmark_low - low watermark for available descriptor space */

 wil_ring_wmark_high - high watermark for available descriptor space */

 returns true if num avail descriptors is lower than wmark_low */

 returns true if num avail descriptors is higher than wmark_high */

 returns true when all tx vrings are empty */

	/* vring->va should be aligned on its size rounded up to power of 2

	 * This is granted by the dma_alloc_coherent.

	 *

	 * HW has limitation that all vrings addresses must share the same

	 * upper 16 msb bits part of 48 bits address. To workaround that,

	 * if we are using more than 32 bit addresses switch to 32 bit

	 * allocation before allocating vring memory.

	 *

	 * There's no check for the return value of dma_set_mask_and_coherent,

	 * since we assume if we were able to set the mask during

	 * initialization in this system it will not fail if we set it again

	/* initially, all descriptors are SW owned

	 * For Tx and Rx, ownership bit is at the same location, thus

	 * we can use any

 rx */

/* Allocate one skb for Rx VRING

 *

 * Safe to call from IRQ

	/**

	 * Make sure that the network stack calculates checksum for packets

	 * which failed the HW checksum calculation

 ip_length don't care */

 b11 don't care */

 error don't care */

 BIT(0) should be 0 for HW_OWNED */

/* Adds radiotap header

 *

 * Any error indicated as "Bad FCS"

 *

 * Vendor data for 04:ce:14-1 (Wilocity-1) consists of:

 *  - Rx descriptor: 32 bytes

 *  - Phy info

 fields should be in the order of bits in rthdr.it_present */

 flags */

 channel */

 MCS */

	/* cid from DMA descriptor is limited to 3 bits.

	 * In case of cid>=8, the value would be cid modulo 8 and we need to

	 * find real cid by locating the transmitter (ta) inside sta array

 in monitor mode there are no connections */

	/* assuming no concurrency between AP interfaces and STA interfaces.

	 * multista is used only in P2P_GO or AP mode. In other modes return

	 * cid from the rx descriptor

	/* For Rx packets cid from rx descriptor is limited to 3 bits (0..7),

	 * to find the real cid, compare transmitter address with the stored

	 * stations mac address in the driver sta array

/* reap 1 frame from @swhead

 *

 * Rx descriptor copied to skb->cb

 *

 * Safe to call from IRQ

 it is not error, we just reached end of Rx done area */

 use radiotap header only if required */

 no extra checks if in sniffer mode */

	/* Non-data frames may be delivered through Rx DMA channel (ex: BAR)

	 * Driver should recognize it by frame type, that is found

	 * in Rx descriptor. If type is not data, it is 802.11 frame as is

			/* print again all info. One can enable only this

			 * without overhead for printing every Rx frame

	/* L4 IDENT is on when HW calculated checksum, check status

	 * and in case of error drop the packet

	 * higher stack layers will handle retransmission (if required)

 L4 protocol identified, csum calculated */

		/* If HW reports bad checksum, let IP stack re-check it

		 * For example, HW don't understand Microsoft IP stack that

		 * mis-calculates TCP checksum - if it should be 0x0,

		 * it writes 0xffff in violation of RFC 1624

		/* Packet layout

		 * +-------+-------+---------+------------+------+

		 * | SA(6) | DA(6) | SNAP(6) | ETHTYPE(2) | DATA |

		 * +-------+-------+---------+------------+------+

		 * Need to remove SNAP, shifting SA and DA forward

/* allocate and fill up to @count buffers in rx ring

 * buffers posted at @swtail

 * Note: we have a single RX queue for servicing all VIFs, but we

 * allocate skbs with headroom according to main interface only. This

 * means it will not work with monitor interface together with other VIFs.

 * Currently we only support monitor interface on its own without other VIFs,

 * and we will need to fix this code once we add support.

	/* make sure all writes to descriptors (shared memory) are done before

	 * committing them to HW

/**

 * reverse_memcmp - Compare two areas of memory, in reverse order

 * @cs: One area of memory

 * @ct: Another area of memory

 * @count: The size of the area.

 *

 * Cut'n'paste from original memcmp (see lib/string.c)

 * with minimal modifications

/*

 * Check if skb is ptk eapol key message

 *

 * returns a pointer to the start of the eapol key structure, NULL

 * if frame is not PTK eapol key

 check if pairwise */

 3/4 of 4-Way Handshake */

 1/4 of 4-Way Handshake */

 message 2/4 */

 check if skb is an EAP message 4/4 */

 ignore idle state, can happen due to M4 retransmission */

 check if skb is a EAP message 3/4 */

/*

 * Pass Rx packet to the netif. Update statistics.

 * Called in softirq context (NAPI poll).

	/* here looking for DA, not A1, thus Rxdesc's 'mcast' indication

	 * is not suitable, need to look at data

 mcast packet looped back to us */

			/* send multicast frames both to higher layers in

			 * local net stack and back to the wireless medium

				/* The destination station is associated to

				 * this AP (in this VLAN), so send the frame

				 * directly to it and do not pass it to local

				 * net stack.

		/* Send to wireless media and increase priority by 256 to

		 * keep the received priority instead of reclassifying

		 * the frame (see cfg80211_classify8021d).

 deliver to local stack */

 check errors reported by HW and update statistics */

/* Proceed all completed skb's from Rx VRING

 *

 * Safe to call from NAPI poll, i.e. softirq with interrupts enabled

 monitor is currently supported on main interface only */

		/* do not allow RX buffers to be smaller than mtu_max, for

		 * backward compatibility (mtu_max parameter was also used

		 * to support receiving large packets)

 0..6: mac_length; 7:ip_version 0-IP6 1-IP4*/

14 | BIT(7)*/;

 BIT(0) should be 0 for HW_OWNED */

 translation type:  0 - bypass; 1 - 802.3; 2 - native wifi */

	/* set BA aggregation window size to 0 to force a new BA with the

	 * new AP

 CID */

 TID */

 TODO: fix for multiple TID */

	/* In the STA mode, it is expected to have only 1 VRING

	 * for the AP we connected to.

	 * find 1-st vring eligible for this skb and use it.

 skip BCAST */

/* Use one of 2 strategies:

 *

 * 1. New (real broadcast):

 *    use dedicated broadcast vring

 * 2. Old (pseudo-DMS):

 *    Find 1-st vring and return it;

 *    duplicate skb and send it to other active vrings;

 *    in all cases override dest address to unicast peer's address

 * Use old strategy when new is not supported yet:

 *  - for PBSS

/* apply multicast to unicast only for ARP and IP packets

 * (see NL80211_CMD_SET_MULTICAST_TO_UNICAST for more info)

 multicast to unicast conversion only for some payload */

 find 1-st vring eligible for data */

 skip BCAST */

 don't Tx back to source when re-routing Rx->Tx at the AP */

 find other active vrings and duplicate skb for each */

 skip BCAST */

 successful call to wil_tx_ring takes skb2 ref */

/* Sets the descriptor @d up for csum and/or TSO offloading. The corresponding

 * @skb is used to obtain the protocol and headers length.

 * @tso_desc_type is a descriptor type for TSO: 0 - a header, 1 - first data,

 * 2 - middle, 3 - last descriptor.

 MAC header length */

 L4 header len: TCP header length */

 Setup TSO: bit and desc type */

 Enable TCP/UDP checksum */

 Calculate pseudo-header */

/* Sets the descriptor @d up for csum. The corresponding

 * @skb is used to obtain the protocol and headers length.

 * Returns the protocol: 0 - not TCP, 1 - TCPv4, 2 - TCPv6.

 * Note, if d==NULL, the function only returns the protocol result.

 *

 * It is very similar to previous wil_tx_desc_offload_setup_tso. This

 * is "if unrolling" to optimize the critical path.

 MAC header length */

 L4 header len: TCP header length */

 L4 header len: UDP header length */

 Enable TCP/UDP checksum */

 Calculate pseudo-header */

 point to descriptors in shared memory */

 pointers to shadow descriptors */

 pointer to shadow descriptors' context */

 total number of used descriptors */

 number of descriptors for current mss*/

 payload size w/o headers */

	/* A typical page 4K is 3-4 payloads, we assume each fragment

	 * is a full payload, that's how min_desc_required has been

	 * calculated. In real we might need more or less descriptors,

	 * this is the initial check only.

 Header Length = MAC header len + IP header len + TCP header len*/

		/* TCP v4, zero out the IP length and IPv4 checksum fields

		 * as required by the offloading doc

 TCP v6, zero out the payload length */

		/* other than TCPv4 or TCPv6 types are not supported for TSO.

		 * It is also illegal for both to be set simultaneously

	/* tcp header length and skb network header length are fixed for all

	 * packet's descriptors - read then once here

 use tso_type_first only once */

 desc used so far */

 desc used for this segment */

 Close the segment if reached mss size or last frag*/

					/* first segment include hdr desc for

					 * release

				/* first descriptor may also be the last

				 * for this mss - make sure not to copy

				 * it twice

				/*last descriptor will be copied at the end

				 * of this TS processing

 update mid descriptor */

	/* first descriptor may also be the last.

	 * in this case d pointer is invalid

 Last data descriptor */

 Fill the total number of descriptors in first desc (hdr)*/

	/* hold reference to skb

	 * to prevent skb release before accounting

	 * in case of immediate "tx done"

 performance monitoring */

	/* Make sure to advance the head only after descriptor update is done.

	 * This will prevent a race condition where the completion thread

	 * will see the DU bit set from previous run and will handle the

	 * skb before it was completed.

 advance swhead */

	/* make sure all writes to descriptors (shared memory) are done before

	 * committing them to HW

 1-st segment */

 MCS 0 */

 set MCS 1 */

 Process TCP/UDP checksum offloading */

 middle segments */

		/* no need to check return code -

		 * if it succeeded for 1-st descriptor,

		 * it will succeed here too

 for the last seg only */

	/* hold reference to skb

	 * to prevent skb release before accounting

	 * in case of immediate "tx done"

 performance monitoring */

	/* Make sure to advance the head only after descriptor update is done.

	 * This will prevent a race condition where the completion thread

	 * will see the DU bit set from previous run and will handle the

	 * skb before it was completed.

 advance swhead */

	/* make sure all writes to descriptors (shared memory) are done before

	 * committing them to HW

 unmap what we have mapped */

 frags mapped + one for skb head */

/* Check status of tx vrings and stop/wake net queues if needed

 * It will start/stop net queues of a specific VIF net_device.

 *

 * This function does one of two checks:

 * In case check_stop is true, will check if net queues need to be stopped. If

 * the conditions for stopping are met, netif_tx_stop_all_queues() is called.

 * In case check_stop is false, will check if net queues need to be waked. If

 * the conditions for waking are met, netif_tx_wake_all_queues() is called.

 * vring is the vring which is currently being modified by either adding

 * descriptors (tx) into it or removing descriptors (tx complete) from it. Can

 * be null when irrelevant (e.g. connect/disconnect events).

 *

 * The implementation is to stop net queues if modified vring has low

 * descriptor availability. Wake if all vrings are not in low descriptor

 * availability and modified vring has high descriptor availability.

 no need to stop/wake net queues */

 net queues already in desired state */

 not enough room in the vring */

 Do not wake the queues in suspend flow */

 check wake */

 enough room in the ring */

 find vring */

 in STA mode (ESS), all to same VRING (to AP) */

			/* in pbss, no bcast VRING - duplicate skb in

			 * all stations VRINGs

 AP has a dedicated bcast VRING */

			/* unexpected combination, fallback to duplicating

			 * the skb in all stations VRINGs

 unicast, find specific VRING by dest. address */

 set up vring entry */

 shall we stop net queues? */

 statistics will be updated on the tx_complete */

 goto drop; */

/* Clean up transmitted skb's from the Tx VRING

 *

 * Return number of descriptors cleared

 *

 * Safe to call from IRQ

		/* For the fragmented skb, HW will set DU bit only for the

		 * last fragment. look for it.

		 * In TSO the first DU will include hdr desc

 TODO: check we are not past head */

			/* Make sure the ctx is zeroed before updating the tail

			 * to prevent a case where wil_tx_ring will see

			 * this descriptor as used and handle it before ctx zero

			 * is completed.

			/* There is no need to touch HW descriptor:

			 * - ststus bit TX_DMA_STATUS_DU is set by design,

			 *   so hardware will not try to process this desc.,

			 * - rest of descriptor will be initialized on Tx.

 performance monitoring */

 shall we wake net queues? */

 TX ops */

 RX ops */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012-2015,2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

/* Allocate the physical ring (p-ring) and the required

 * number of descriptors of required size.

 * Initialize the descriptors as required by pmc dma.

 * The descriptors' buffers dwords are initialized to hold

 * dword's serial number in the lsw and reserved value

 * PCM_DATA_INVALID_DW_VAL in the msw.

 sanity check */

 allocate descriptors info list in pmc context*/

	/* Allocate pring buffer and descriptors.

	 * vring->va should be aligned on its size rounded up to power of 2

	 * This is granted by the dma_alloc_coherent.

	 *

	 * HW has limitation that all vrings addresses must share the same

	 * upper 16 msb bits part of 48 bits address. To workaround that,

	 * if we are using more than 32 bit addresses switch to 32 bit

	 * allocation before allocating vring memory.

	 *

	 * There's no check for the return value of dma_set_mask_and_coherent,

	 * since we assume if we were able to set the mask during

	 * initialization in this system it will not fail if we set it again

	/* initially, all descriptors are SW owned

	 * For Tx, Rx, and PMC, ownership bit is at the same location, thus

	 * we can use any

 configure dma descriptor */

 0 = HW_OWNED */

/* Traverse the p-ring and release all buffers.

 * At the end release the p-ring memory

			/* There's nothing we can do with this error.

			 * Normally, it should never occur.

			 * Continue to freeing all memory allocated for pmc.

/* Status of the last operation requested via debugfs: alloc/free/read.

 * 0 - success or negative errno

/* Read from required position up to the end of current descriptor,

 * depends on descriptor size configured during alloc request.

 if no errors, return the copied byte count */

 SEEK_SET */

 SEEK_CUR */

 SEEK_END */

 can't happen */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014-2016 Qualcomm Atheros, Inc.

/* wil_platform_init() - wil6210 platform module init

 *

 * The function must be called before all other functions in this module.

 * It returns a handle which is used with the rest of the API

 *

 to return some non-NULL for 'void' impl. */

 platform specific init functions should be called here */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2014-2015,2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2013,2016 Qualcomm Atheros, Inc.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 use NULL ndev argument to check all interfaces */

 always process ALL Tx complete, regardless budget - it is fast */

 There is only one status TX ring */

	/* reschedule to thread context - disconnect won't

	 * run from atomic context.

	 * queue on wmi_wq to prevent race with connect event.

	/* during unregister_netdevice cfg80211_leave may perform operations

	 * such as stop AP, disconnect, so we only clear the VIF afterwards

 make sure no one is accessing the VIF before removing */

 ensure NAPI code will see the NULL VIF */

	/* for VIFs, ndev will be freed by destructor after RTNL is unlocked.

	 * the main interface will be freed in wil_if_free, we need to keep it

	 * a bit longer so logging macros will work.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 set the default max assoc sta to max supported by driver */

 = 0; */

/**

 * DOC: WMI event receiving - theory of operations

 *

 * When firmware about to report WMI event, it fills memory area

 * in the mailbox and raises misc. IRQ. Thread interrupt handler invoked for

 * the misc IRQ, function @wmi_recv_cmd called by thread IRQ handler.

 *

 * @wmi_recv_cmd reads event, allocates memory chunk  and attaches it to the

 * event list @wil->pending_wmi_ev. Then, work queue @wil->wmi_wq wakes up

 * and handles events within the @wmi_event_worker. Every event get detached

 * from list, processed and deleted.

 *

 * Purpose for this mechanism is to release IRQ thread; otherwise,

 * if WMI event handling involves another WMI command flow, this 2-nd flow

 * won't be completed because of blocked IRQ thread.

/**

 * DOC: Addressing - theory of operations

 *

 * There are several buses present on the WIL6210 card.

 * Same memory areas are visible at different address on

 * the different busses. There are 3 main bus masters:

 *  - MAC CPU (ucode)

 *  - User CPU (firmware)

 *  - AHB (host)

 *

 * On the PCI bus, there is one BAR (BAR0) of 2Mb size, exposing

 * AHB addresses starting from 0x880000

 *

 * Internally, firmware uses addresses that allow faster access but

 * are invisible from the host. To read from these addresses, alternative

 * AHB address must be used.

/* sparrow_fw_mapping provides memory remapping table for sparrow

 *

 * array size should be in sync with the declaration in the wil6210.h

 *

 * Sparrow memory mapping:

 * Linker address         PCI/Host address

 *                        0x880000 .. 0xa80000  2Mb BAR0

 * 0x800000 .. 0x808000   0x900000 .. 0x908000  32k DCCM

 * 0x840000 .. 0x860000   0x908000 .. 0x928000  128k PERIPH

 FW code RAM 256k */

 FW data RAM 32k */

 periph data 128k */

 various RGF 40k */

 AGC table   4k */

 Pcie_ext_rgf 4k */

 mac_ext_rgf 512b */

 upper area 548k */

	/* UCODE areas - accessible by debugfs blobs but not by

	 * wmi_addr_remap. UCODE areas MUST be added AFTER FW areas!

 ucode code RAM 128k */

 ucode data RAM 16k */

/* sparrow_d0_mac_rgf_ext - mac_rgf_ext section for Sparrow D0

 * it is a bit larger to support extra features

/* talyn_fw_mapping provides memory remapping table for Talyn

 *

 * array size should be in sync with the declaration in the wil6210.h

 *

 * Talyn memory mapping:

 * Linker address         PCI/Host address

 *                        0x880000 .. 0xc80000  4Mb BAR0

 * 0x800000 .. 0x820000   0xa00000 .. 0xa20000  128k DCCM

 * 0x840000 .. 0x858000   0xa20000 .. 0xa38000  96k PERIPH

 FW code RAM 1M */

 FW data RAM 128k */

 periph. data RAM 96k */

 various RGF 40k */

 AGC table 4k */

 Pcie_ext_rgf 4k */

 mac_ext_rgf 1344b */

 ext USER RGF 4k */

 OTP 4k */

 DMA EXT RGF 64k */

 upper area 1536k */

	/* UCODE areas - accessible by debugfs blobs but not by

	 * wmi_addr_remap. UCODE areas MUST be added AFTER FW areas!

 ucode code RAM 256k */

 ucode data RAM 32k */

/* talyn_mb_fw_mapping provides memory remapping table for Talyn-MB

 *

 * array size should be in sync with the declaration in the wil6210.h

 *

 * Talyn MB memory mapping:

 * Linker address         PCI/Host address

 *                        0x880000 .. 0xc80000  4Mb BAR0

 * 0x800000 .. 0x820000   0xa00000 .. 0xa20000  128k DCCM

 * 0x840000 .. 0x858000   0xa20000 .. 0xa38000  96k PERIPH

 FW code RAM 768k */

 FW data RAM 128k */

 periph. data RAM 96k */

 various RGF 40k */

 AGC table 4k */

 Pcie_ext_rgf 4k */

 mac_ext_rgf 2256b */

 ext USER RGF 4k */

 SEC PKA 16k */

 SEC KDF RGF 3096b */

 SEC MAIN 2124b */

 OTP 4k */

 DMA EXT RGF 64k */

 DUM USER RGF 528b */

 DMA OFU 296b */

 ucode debug 256b */

 upper area 1536k */

	/* UCODE areas - accessible by debugfs blobs but not by

	 * wmi_addr_remap. UCODE areas MUST be added AFTER FW areas!

 ucode code RAM 256k */

 ucode data RAM 32k */

 possibly followed by Challenge text */

/**

 * wmi_addr_remap - return AHB address for given firmware internal (linker) address

 * @x: internal address

 * If address have no valid AHB mapping, return 0

/**

 * wil_find_fw_mapping - find fw_mapping entry by section name

 * @section: section name

 *

 * Return pointer to section or NULL if not found

/**

 * wmi_buffer_block - Check address validity for WMI buffer; remap if needed

 * @wil: driver data

 * @ptr_: internal (linker) fw/ucode address

 * @size: if non zero, validate the block does not

 *  exceed the device memory (bar)

 *

 * Valid buffer should be DWORD aligned

 *

 * return address for accessing buffer from the host;

 * if buffer is not valid, return NULL.

 Check address validity */

 Allow sending only suspend / resume commands during susepnd flow */

 read Tx head till it is not busy */

 next head */

 wait till FW finish with previous command */

 set command */

 mark entry as full */

 advance next ptr */

 interrupt to FW */

=== Event handlers ===*/

 FW load will fail after timeout */

 ignore MAC address, we already have it from the boot loader */

 let the reset sequence continue */

 channel number */

 capinfo(u16) + listen_interval(u16) + IEs */

 capinfo(u16) + status_code(u16) + associd(u16) + IEs */

 figure out IE's */

 no need for cleanup, wil_reset will do that */

 notify new_sta has failed */

 no need for cleanup, wil_reset will do that */

 disconnect event in disable_ap_sme mode means link loss */

 AP-like interface */

 notify hostapd about link loss */

/*

 * Firmware reports EAPOL frame using WME event.

 * Reconstruct Ethernet frame and deliver it via normal Rx

 TODO: revisit size limit */

		/* in AP mode with disable_ap_sme that is not FT,

		 * this is done by wil_cfg80211_change_station()

 no BA for bcast */

	/* In FT mode we get key but not store it as it is received

	 * before WMI_CONNECT_EVENT received from FW.

	 * wil_set_crypto_rx is called here to reset the security PN

 find Tx vring it belongs to */

 max. 1 matching ring */

 clean old statistics */

 clean old statistics */

 skip to next record */

/* find cid and ringid for the station vif

 *

 * return error, if other interfaces are used or ring was not found

	/* In the STA mode, it is expected to have only one ring

	 * for the AP we are connected to.

	 * find it and return the cid associated with it.

 skip BCAST */

 auth_alg(u16) + auth_transaction(u16) + status_code(u16) */

 check the status */

 find cid and ringid */

 For secure assoc, remove old keys */

 channel number (primary) */

 capinfo(u16) + listen_interval(u16) + current_ap mac addr + IEs */

 capinfo(u16) + status_code(u16) + associd(u16) + IEs */

 check the status */

 find cid and ringid */

 figure out IE's */

 no need for cleanup, wil_reset will do that */

 ring modify to set the ring for the roamed AP settings */

 Update the driver STA members with the new bss */

 ignore */

/* Some events are ignored for purpose; and need not be interpreted as

 * "unhandled events"

/*

 * Run in IRQ context

 * Extract WMI command from mailbox. Queue it to the @wil->pending_wmi_ev

 * that will be eventually handled by the @wmi_event_worker in the thread

 * context of thread "wil6210_wmi"

 read cmd descriptor from tail */

 read cmd header from descriptor */

 read cmd buffer from descriptor */

 mark entry as empty */

 indicate */

 advance tail */

 add to the pending list */

 normally, 1 event per IRQ should be processed */

	/*

	 * Processing time may be huge, in case of secure AP it takes about

	 * 3500ms for FW to start AP

 Don't fail due to error in the led configuration */

 reply.cmd.ssid_len in CPU order */

 key len = 0 is allowed only for usage of WMI_KEY_USE_APPLY */

 BUG: FW API define ieLen as u8. Will fix FW */

/**

 * wmi_rxon - turn radio on/off

 * @wil:	driver data

 * @on:		turn on if true, off otherwise

 *

 * Only switch radio. Channel should be set separately.

 * No timeout for rxon - radio turned on forever unless some other call

 * turns it off

 TODO - what is it? */

		/* Initialize offload (in non-sniffer mode).

		 * Linux IP stack always calculates IP checksum

		 * HW always calculate TCP/UDP checksum

 typical time for secure PCP is 840ms */

 failure to disconnect in reasonable time treated as FW error */

		/* bit 0: A-MSDU supported

		 * bit 1: policy (controlled by FW)

		 * bits 2..5: TID

		 * bits 6..15: buffer size

		/* bit 0: A-MSDU supported

		 * bit 1: policy (controlled by FW)

		 * bits 2..5: TID

		 * bits 6..15: buffer size

 route all the connections to status ring 0 */

 wmi_call TO */

 Device responded but we TO due to another reason */

 what about monitor??? */

 check if someone waits for this event */

				/* event received while wmi_call is waiting

				 * with a buffer. Such event should be handled

				 * in wmi_recv_cmd function. Handling the event

				 * here means a previous wmi_call was timeout.

				 * Drop the event and do not handle it.

 unsolicited event */

 search for handler */

/*

 * Retrieve next WMI event from the pending list

/*

 * Handler for the WMI events

 Check if there are pending WMI events in the events queue */

 Check if there is a pending WMI call */

 Check if there are pending RX events in mbox */

 there is only one TX sring */

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2013 Qualcomm Atheros, Inc.

 SPDX-License-Identifier: ISC

/*

 * Copyright (c) 2012-2017 Qualcomm Atheros, Inc.

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 = false; */

/* if not set via modparam, will be set to default value of 1/8 of

 * rx ring size during init flow

/* We allow allocation of more than 1 page buffers to support large packets.

 * It is suboptimal behavior performance wise in case MTU above page size.

	/* sets mtu_max directly. no need to restore it in case of

	 * illegal value since we assume this will fail insmod

 msec, for loop in @wil_wait_device_ready */

 round up to be above 1 sec total */

 ms, for sleep in @wil_wait_device_ready */

 usec, loop in @wil_wait_device_ready_talyn_mb */

 round up to be above 2 ms total */

/*

 * Due to a hardware issue,

 * one has to read/write to/from NIC in 32-bit chunks;

 * regular memcpy_fromio and siblings will

 * not work on 64-bit platform - it uses 64-bit transactions

 *

 * Force 32-bit transactions to enable NIC on 64-bit platforms

 *

 * To avoid byte swap on big endian host, __raw_{read|write}l

 * should be used - {read|write}l would swap bytes to provide

 * little endian on PCI value in host endianness.

 count can be 1..3 */

 count can be 1..3 */

/* Device memory access is prohibited while reset or suspend.

 * wil_mem_access_lock protects accessing device memory in these cases

 no Tx can be in progress or start anew */

	/* napi_synchronize waits for completion of the current NAPI but will

	 * not prevent the next NAPI run.

	 * Add a memory barrier to guarantee that txdata->enabled is zeroed

	 * before napi_synchronize so that the next scheduled NAPI will not

	 * handle this vring

 make sure NAPI won't touch this vring */

 inform upper layers */

 AP-like interface */

 reorder buffers */

 crypto context */

 release vrings */

 statistics */

	/* Cases are:

	 * - disconnect single STA, still connected

	 * - disconnect single STA, already disconnected

	 * - disconnect all

	 *

	 * For "disconnect all", there are 3 options:

	 * - bssid == NULL

	 * - bssid is broadcast address (ff:ff:ff:ff:ff:ff)

	 * - bssid is our MAC address

 disconnect 1 peer */

 all */

 link state */

 inform lower layers */

	/* disconnect by sending command disconnect/del_sta and wait

	 * synchronously for WMI_DISCONNECT_EVENTID event.

	/* Cases are:

	 * - disconnect single STA, still connected

	 * - disconnect single STA, already disconnected

	 * - disconnect all

	 *

	 * For "disconnect all", there are 3 options:

	 * - bssid == NULL

	 * - bssid is broadcast address (ff:ff:ff:ff:ff:ff)

	 * - bssid is our MAC address

 disconnect 1 peer */

 all */

	/* call event handler manually after processing wmi_call,

	 * to avoid deadlock - disconnect event handler acquires

	 * wil->mutex while it is already held here

 connect succeeded after all */

 already disconnected */

	/* increment @recovery_count if less then WIL6210_FW_RECOVERY_TO

	 * passed since last recovery attempt

 fw was alive for a long time */

	/* Needs adaptation for multiple VIFs

	 * need to go over all VIFs and consider the appropriate

	 * recovery because each one can have different iftype.

 silent recovery, upper layers will see disconnect */

 upper layers do recovery */

 silent recovery, upper layers will see disconnect */

 edma configuration can be updated via debugfs before allocation */

	/* Rx status ring size should be bigger than the number of RX buffers

	 * in order to prevent backpressure on the status ring, which may

	 * cause HW freeze.

	/* Number of RX buffer IDs should be bigger than the RX descriptor

	 * ring size as in HW reorder flow, the HW can consume additional

	 * buffers before releasing the previous ones.

/**

 * wil6210_disconnect - disconnect one connection

 * @vif: virtual interface context

 * @bssid: peer to disconnect, NULL to disconnect all

 * @reason_code: Reason code for the Disassociation frame

 *

 * Disconnect and release associated resources. Issue WMI

 * command(s) to trigger MAC disconnect. When command was issued

 * successfully, call the wil6210_disconnect_complete function

 * to handle the event synchronously

/**

 * wil6210_disconnect_complete - handle disconnect event

 * @vif: virtual interface context

 * @bssid: peer to disconnect, NULL to disconnect all

 * @reason_code: Reason code for the Disassociation frame

 *

 * Release associated resources and indicate upper layers the

 * connection is terminated.

 this format is used by ARC embedded CPU for instruction memory */

 defines access to interrupt vectors for wil_freeze_bl */

 ARC long jump instruction */

	/* prevent the target from entering deep sleep

	 * and disabling memory access

 let the BL process the bit */

 redirect to endless loop in the INT_L1 context and let it trap */

 let the BL get into the trap */

 verify the BL is frozen */

	/* before halting device CPU driver must make sure BL is not accessing

	 * host memory. This is done differently depending on BL version:

	 * 1. For very old BL versions the procedure is skipped

	 * (not supported).

	 * 2. For old BL version we use a special trick to freeze the BL

	 * 3. For new BL versions we shutdown the BL using handshake procedure.

 Start CPU */

 wait until device ready. */

 Wait for OTP signature test to complete */

	/* Poll until OTP signature status is valid.

	 * In vanilla and development modes, when signature test is complete

	 * HW sets BIT_OTP_SIGNATURE_ERR_TALYN_MB.

	 * In production mode BIT_OTP_SIGNATURE_ERR_TALYN_MB remains 0, poll

	 * for signature status change to 2 or 3.

			/* Unrecognized OTP signature found. Possibly a

			 * corrupted production signature, access control

			 * is applied as in production mode, therefore

			 * do not fail

 Assuming not SPI boot (currently not supported) */

 Clear MAC link up */

 clear all boot loader "ready" bits */

 this should be safe to write even with old BLs */

 Clear Fw Download notification */

 XTAL stabilization should take about 3ms */

 switch 10k to XTAL*/

 40 MHz */

 reset A2 PCIE AHB */

 enable fix for HW bug related to the SA/DA swap in AP Rx */

 Reset OTP HW vectors to fit 40MHz */

 construct actual board file name to use */

		/* If specific FW file is used for Talyn,

		 * use specific board file

 actually, unknown */

 bad RF cable? */

 OEM MAC has precedence */

 Mark FW as loaded from host */

	/* clear any interrupts which on-card-firmware

	 * may have set

 CAF_ICR - clear and mask */

 it is W1C, clear by writing back same value */

	/* clear PAL_UNIT_ICR (potential D0->D3 leftover)

	 * In Talyn-MB host cannot access this register due to

	 * access control, hence PAL_UNIT_ICR is cleared by the FW

/*

 * Clear FW and ucode log start addr to indicate FW log is not ready. The host

 * driver clears the addresses before FW starts and FW initializes the address

 * when it is ready to send logs.

 FW log addr */

 ucode log addr */

/*

 * We reset all the structures, and we reset the UMAC.

 * After calling this routine, you're expected to reload

 * the firmware.

 Disable device led before reset*/

 prevent NAPI from being scheduled and prevent wmi commands */

 ignore RF error if not going up */

 Loading f/w from the file */

 init after reset */

 we just started MAC, wait for FW ready */

 check FW is responsive */

		/* Enable OFU rdy valid bug fix, to prevent hang in oful34_rx

		 * while there is back-pressure from Host during RX

 Rx RING. After MAC and beacon */

 ARPHRD_IEEE80211 or ARPHRD_IEEE80211_RADIOTAP ? */

 MAC address - pre-requisite for other commands */

 mark to IRQ context to handle HALP ICR */

 Mask HALP as done in case the interrupt is raised */

/*

 * Copyright (c) 2007-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 in ms */

 the reg dump pointer is copied to the host interest area */

 read RAM location through diagnostic window */

 fetch register dump data */

	/*

	 * read counter to clear the interrupt, the debug error interrupt is

	 * counter 0.

 mailbox recv message polling */

 this is the standard HIF way, load the reg table */

 check for MBOX data and valid lookahead */

				/*

				 * Mailbox has a message and the look ahead

				 * is valid.

 delay a little  */

 check if the target asserted */

			/*

			 * Target failure handler will be called in case of

			 * an assert.

/*

 * Disable packet reception (used in case the host runs out of buffers)

 * using the interrupt enable registers through the host I/F

 take the lock to protect interrupt enable shadows */

 in sync mode, we can touch the scatter request */

	/*

	 * NOTE: other modules like GMBOX may use the counter interrupt for

	 * credit flow control on other counters, we only need to check for

	 * the debug assertion counter interrupt.

 Clear the interrupt */

 set W1C value to clear the interrupt, this hits the register first */

 Clear the interrupt */

	/*

	 * Set up the register transfer buffer to hit the register 4 times ,

	 * this is done to make the access 4-byte aligned to mitigate issues

	 * with host bus interconnects that restrict bus transfer lengths to

	 * be a multiple of 4-bytes.

 set W1C value to clear the interrupt, this hits the register first */

 the remaining are set to zero which have no-effect  */

 process pending interrupts synchronously */

	/*

	 * NOTE: HIF implementation guarantees that the context of this

	 * call allows us to perform SYNCHRONOUS I/O, that is we can block,

	 * sleep or call any API that can block or switch thread/task

	 * contexts. This is a fully schedulable context.

	/*

	 * Process pending intr only when int_status_en is clear, it may

	 * result in unnecessary bus transaction otherwise. Target may be

	 * unresponsive at the time.

		/*

		 * Read the first 28 bytes of the HTC register table. This

		 * will yield us the value of different int status

		 * registers and the lookahead registers.

		 *

		 *    length = sizeof(int_status) + sizeof(cpu_int_status)

		 *             + sizeof(error_int_status) +

		 *             sizeof(counter_int_status) +

		 *             sizeof(mbox_frame) + sizeof(rx_lkahd_valid)

		 *             + sizeof(hole) + sizeof(rx_lkahd) +

		 *             sizeof(int_status_en) +

		 *             sizeof(cpu_int_status_en) +

		 *             sizeof(err_int_status_en) +

		 *             sizeof(cntr_int_status_en);

 Update only those registers that are enabled */

 Look at mbox status */

			/*

			 * Mask out pending mbox value, we use "lookAhead as

			 * the real flag for mbox processing.

		/*

		 * Mailbox Interrupt, the HTC layer may issue async

		 * requests to empty the mailbox. When emptying the recv

		 * mailbox we use the async handler above called from the

		 * completion routine of the callers read request. This can

		 * improve performance by reducing context switching when

		 * we rapidly pull packets.

			/*

			 * HTC could not pull any messages out due to lack

			 * of resources.

 now handle the rest of them */

 CPU Interrupt */

 Error Interrupt */

 Counter Interrupt */

	/*

	 * An optimization to bypass reading the IRQ status registers

	 * unecessarily which can re-wake the target, if upper layers

	 * determine that we are in a low-throughput mode, we can rely on

	 * taking another interrupt rather than re-checking the status

	 * registers which can re-wake the target.

	 *

	 * NOTE : for host interfaces that makes use of detecting pending

	 * mbox messages at hif can not use this optimization due to

	 * possible side effects, SPI requires the host to drain all

	 * messages from the mailbox before exiting the ISR routine.

 interrupt handler, kicks off all interrupt processing */

	/*

	 * Reset counter used to flag a re-scan of IRQ status registers on

	 * the target.

	/*

	 * IRQ processing is synchronous, interrupt status registers can be

	 * re-read.

 Enable all but ATH6KL CPU interrupts */

	/*

	 * NOTE: There are some cases where HIF can do detection of

	 * pending mbox messages which is disabled now.

 Set up the CPU Interrupt status Register */

 Set up the Error Interrupt status Register */

	/*

	 * Enable Counter interrupt status register to get fatal errors for

	 * debugging.

 Disable all interrupts */

 enable device interrupts */

	/*

	 * Make sure interrupt are disabled before unmasking at the HIF

	 * layer. The rationale here is that between device insertion

	 * (where we clear the interrupts the first time) and when HTC

	 * is finally ready to handle interrupts, other software can perform

	 * target "soft" resets. The ATH6KL interrupt enables reset back to an

	 * "enabled" state when this happens.

 unmask the host controller interrupts */

 disable all device interrupts */

	/*

	 * Mask the interrupt at the HIF layer to avoid any stray interrupt

	 * taken while we zero out our shadow registers in

	 * ath6kl_hif_disable_intrs().

	/*

	 * NOTE: we actually get the block size of a mailbox other than 0,

	 * for SDIO the block size on mailbox 0 is artificially set to 1.

	 * So we use the block size that is set for the other 3 mailboxes.

 must be a power of 2 */

 assemble mask, used for padding to a block */

/*

 * Copyright (c) 2004-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 use for KRK */

 returns true if scheduled scan was stopped */

 our own hack to use value 0 as no crypto used */

	/*

	 * Clear previously set flag

	/*

	 * Filter out RSN/WPA IE(s)

		/*

		 * sleep until the command queue drains

 enable enhanced bmiss detection if applicable */

 disable background scan if period is 0 */

 configure default value if not specified */

		/*

		 * Since cfg80211 may not yet know about the BSS,

		 * generate a partial entry until the first BSS info

		 * event becomes available.

		 *

		 * Prepend SSID element since it is not included in the Beacon

		 * IEs from the target.

 capinfo + listen interval */

 capinfo + status code +  associd */

	/*

	 * Store Beacon interval here; DTIM period will be available only once

	 * a Beacon frame from the AP is seen.

 inform connect result to cfg80211 */

 inform roam event to cfg80211 */

	/*

	 * Send a disconnect command to target when a disconnect event is

	 * received with reason code other than 3 (DISCONNECT_CMD - disconnect

	 * request from host) to make the firmware stop trying to connect even

	 * after giving disconnect event. There will be one more disconnect

	 * event for this disconnect command with reason code DISCONNECT_CMD

	 * which won't be notified to cfg80211.

 Make sure no old entries are left behind */

 this also clears IE in fw if it's not set */

	/*

	 * Scan only the requested channels if the request specifies a set of

	 * channels. If the list is longer than the target supports, do not

	 * configure the list and instead, scan all available channels.

 Only first half of the WPI PN is configured */

			/*

			 * The key will be set in ath6kl_connect_ap_mode() once

			 * the connected event is received from the target.

		/*

		 * Store the key locally so that it can be re-configured after

		 * the AP mode has properly started

		 * (ath6kl_install_statioc_wep_keys).

 Delay until AP mode has been started */

	/*

	 * Don't bring up p2p on an interface which is not initialized

	 * for p2p operation where fw does not have capability to switch

	 * dynamically between non-p2p and p2p type interface.

 need to clean up enhanced bmiss detection fw state */

		/*

		 * TODO: channel_fixed: The channel should be fixed, do not

		 * search for IBSSs to join on other channels. Target

		 * firmware does not support this feature, needs to be

		 * updated.

 last rate uses sgi */

 last rate uses sgi */

 Configure the patterns that we received from the user. */

		/*

		 * Convert given nl80211 specific mask value to equivalent

		 * driver specific mask value and send it to the chip along

		 * with patterns. For example, If the mask value defined in

		 * struct cfg80211_wowlan is 0xA (equivalent binary is 1010),

		 * then equivalent driver specific mask value is

		 * "0xFF 0x00 0xFF 0x00".

		/*

		 * Note: Pattern's offset is not passed as part of wowlan

		 * parameter from CFG layer. So it's always passed as ZERO

		 * to the firmware. It means, given WOW patterns are always

		 * matched from the first byte of received pkt in the firmware.

 pattern offset */,

 port 67 */ };

 port 67 */ };

 Setup unicast IP, EAPOL-like and ARP pkt pattern */

 Setup all ARP pkt pattern */

	/*

	 * Setup multicast pattern for mDNS 224.0.0.251,

	 * SSDP 239.255.255.250 and LLMNR  224.0.0.252

 Setup all DHCP broadcast pkt pattern */

 Setup unicast pkt pattern */

	/*

	 * Setup multicast pattern for mDNS 224.0.0.251,

	 * SSDP 239.255.255.250 and LLMNR 224.0.0.252

 Clear existing WOW patterns */

	/*

	 * Skip the default WOW pattern configuration

	 * if the driver receives any WOW patterns from

	 * the user.

 Set listen interval x 15 times as bmiss time */

 Setup own IP addr for ARP agent. */

 Configure IP addr only if IP address count < MAX_IP_ADDRS */

 enter / leave wow suspend on first vif always */

 install filters for each connected vif */

 Save the current power mode before enabling power save */

 Disable WOW mode */

 Flush all non control pkts in TX path */

 Reset scan parameter to default values */

 Flush all non control pkts in TX path */

 hif layer decides what suspend mode to use */

/*

 * FIXME: WOW suspend mode is selected if the host sdio controller supports

 * both sdio irq wake up and keep power. The target pulls sdio data line to

 * wake up the host when WOW pattern matches. This causes sdio irq handler

 * is being called in the host side which internally hits ath6kl's RX path.

 *

 * Since sdio interrupt is not disabled, RX path executes even before

 * the host executes the actual resume operation from PM module.

 *

 * In the current scenario, WOW resume should happen before start processing

 * any data from the target. So It's required to perform WOW resume in RX path.

 * Ideally we should perform WOW resume only in the actual platform

 * resume path. This area needs bit rework to avoid WOW resume in RX path.

 *

 * ath6kl_check_wow_status() is called from ath6kl_rx().

 Set default ht capabilities */

 Disable ht */

	/*

	 * Filter out P2P IE(s) since they will be included depending on

	 * the Probe Request frame in ath6kl_send_go_probe_resp().

 this also clears IE in fw if it's not set */

 this also clears IE in fw if it's not set */

 this also clears IE in fw if it's not set */

 skip element id and length */

 skip version */

 skip group cipher suite */

 skip pairwise cipher suite */

 skip akm suite */

 ignore error, just print a warning and continue normally */

 Enable uAPSD support by default */

		/*

		 * Due to firmware limitation, it is not possible to

		 * do P2P mgmt operations in AP mode

	/*

	 * Get the PTKSA replay counter in the RSN IE. Supplicant

	 * will use the RSN IE in M3 message and firmware has to

	 * advertise the same in beacon/probe response. Send

	 * the complete RSN IE capability field to firmware

 Restore ht setting in firmware */

	/* TODO: if already pending or ongoing remain-on-channel,

 Do not use 0 as the cookie value */

 Include P2P IE(s) from the frame generated in user space. */

 Queue the frames if the STA is sleeping */

			/*

			 * If this is the first pkt getting queued

			 * for this STA, update the PVB for this

			 * STA.

		/*

		 * This tx is because of a PsPoll.

		 * Determine if MoreData bit has to be set.

 Check if SSID length is greater than DIRECT- */

 variable[1] contains the SSID tag length */

	/* default to the current channel, but use the one specified as argument

	 * if any

 never send freq zero to the firmware */

		/*

		 * Send Probe Response frame in GO mode using a separate WMI

		 * command to allow the target to fill in the generic IEs.

 TX status not supported */

		/*

		 * 0 is a reserved value in the WMI command and shall not be

		 * used for the command.

 AP mode Power saving processing */

	/*

	 * FIXME: send WMI_PROBE_REQ_REPORT_CMD here instead of hardcoding

	 *	  the reporting in the target all the time, this callback

	 *	  *is* allowed to sleep after all.

	/*

	 * If there's a matchset w/o an SSID, then assume it's just for

	 * the RSSI (nothing else is currently supported) and ignore it.

	 * The device only supports a global RSSI filter that we set below.

 fw uses seconds, also make sure that it's >0 */

 this also clears IE in fw if it's not set */

 save this since the firmware won't report the interval */

 Stop netdev queues, needed during recovery */

 disable scanning */

 save the current power mode before enabling power save */

	/*

	 * FIXME: we should take ar->list_lock to protect changes in the

	 * vif_list, but that's not trivial to do as ath6kl_cfg80211_stop()

	 * sleeps.

	/*

	 * Firmware will apply the regdomain change only after a scan is

	 * issued and it will send a WMI_REGDOMAIN_EVENTID when it has been

	 * changed.

 need to clean up enhanced bmiss detection fw state */

 Common stats names used by many drivers. */

 TX stats. */

 RX Stats. */

 Misc stats. */

 These stats are per NIC, not really per vdev, so we just ignore dev. */

 set device pointer for wiphy */

 max num of ssids that can be probed during scanning */

 max num of ssids that can be matched after scan */

 FIX: what is correct limit? */

	/*

	 * Even if the fw has HT support, advertise HT cap only when

	 * the firmware has support to override RSN capability, otherwise

	 * 4-way handshake would fail.

 mask, 2 antenna */

 create a new wiphy for use with cfg80211 */

 Note: ar variable must not be accessed after calling this! */

/*

 * Copyright (c) 2007-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 constants */

 tx/rx pipes for usb */

 usb device object */

 protects pipe->urb_list_head and  pipe->urb_cnt */

 usb urb object */

 USB endpoint definitions */

 diagnostic command defnitions */

 function declarations */

 pipe/urb operations */

 bail if this pipe is not initialized */

 bail if this pipe is not initialized */

 pipe resource allocation/cleanup */

		/*

		 * we are only allocate the urb contexts here, the actual URB

		 * is allocated from the kernel as needed to do a transaction

 nothing allocated for this pipe */

 note: there may be endpoints not currently used */

 walk descriptors and setup pipes */

 TODO for ISO */

 Ignore broken descriptors. */

 hmmm..pipe was already setup */

 TODO for ISO */

 pipe operations */

	/*

	 * Flushing any pending I/O may schedule work this call will block

	 * until all scheduled work runs to completion.

	/*

	 * note: control pipe is no longer used

	 * ar_usb->pipes[ATH6KL_USB_PIPE_RX_CTRL].urb_cnt_thresh =

	 *      ar_usb->pipes[ATH6KL_USB_PIPE_RX_CTRL].urb_alloc/2;

	 * ath6kl_usb_post_recv_transfers(&ar_usb->

	 *		pipes[ATH6KL_USB_PIPE_RX_CTRL],

	 *		ATH6KL_USB_RX_BUFFER_SIZE);

 hif usb rx/tx completion functions */

			/*

			 * no need to spew these errors when device

			 * removed or urb killed due to driver shutdown

 we are going to pass it up */

 note: queue implements a lock */

 our free urbs are piling up, post more transfers */

 note: queue implements a lock */

 Delay to wait for the target to reboot */

 exported hif usb APIs for htc pipe */

 set the TX resource avail threshold for each TX pipe */

		/*

		 * TODO: it is possible to run out of urbs if

		 * 2 endpoints map to the same pipe ID

 hit a max packet boundary on this pipe */

 due to large control packets, shift to data pipe */

		/*

		* Disable rxdata2 directly, it will be enabled

		* if FW enable rxdata2

		/*

		* Disable rxdata2 directly, it will be enabled

		* if FW enable rxdata2

		/*

		* Disable rxdata2 directly, it will be enabled

		* if FW enable rxdata2

 note: if successful returns number of bytes transfered */

 note: if successful returns number of bytes transfered */

 send command */

 no expected response */

 get response */

 get response */

 send command */

	/*

	 * USB doesn't support it. Just return.

	/*

	 * cfg80211 suspend/WOW currently not supported for USB.

	/*

	 * cfg80211 resume currently not supported for USB.

 ath6kl usb driver registered functions */

 table of devices that work with this driver */

 Terminating entry */ },

/*

 * Copyright (c) 2004-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Determine how many bytes are in the Target's targ_info */

		/*

		 * The target's targ_info doesn't match the host's targ_info.

		 * We need to do some backwards compatibility to make this work.

 Read the remainder of the targ_info */

 align it with 4 bytes */

 copy the last word into a zero padded buffer */

		/* Close compressed stream and open a new (fake) one.

 cmd + addr + len + data_size */

/*

 * Copyright (c) 2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 hw2.0 needs override address hardcoded */

/*

 * Include definitions here that can be used to tune the WLAN module

 * behavior. Different customers can tune the behavior as per their needs,

 * here.

/*

 * This configuration item enable/disable keepalive support.

 * Keepalive support: In the absence of any data traffic to AP, null

 * frames will be sent to the AP at periodic interval, to keep the association

 * active. This configuration item defines the periodic interval.

 * Use value of zero to disable keepalive support

 * Default: 60 seconds

/*

 * This configuration item sets the value of disconnect timeout

 * Firmware delays sending the disconnec event to the host for this

 * timeout after is gets disconnected from the current AP.

 * If the firmware successly roams within the disconnect timeout

 * it sends a new connect event

 Add chacheline space at front and back of buffer */

	/* Fetch the address of the host_app_area_s

 connect to a service */

 these fields are the same for all service endpoints */

	/*

	 * Set the max queue depth so that our ath6kl_tx_queue_full handler

	 * gets called.

 connect to control service */

	/*

	 * Limit the HTC message size on the send path, although e can

	 * receive A-MSDU frames of 4K, we will only send ethernet-sized

	 * (802.3) frames on the send path.

	/*

	 * To reduce the amount of committed memory for larger A_MSDU

	 * frames, use the recv-alloc threshold mechanism for larger

	 * packets.

	/*

	 * For the remaining data services set the connection flag to

	 * reduce dribbling, if configured to do so.

 connect to back-ground map this to WMI LOW_PRI */

 connect to Video service, map this to HI PRI */

	/*

	 * Connect to VO service, this is currently not mapped to a WMI

	 * priority stream due to historical reasons. WMI originally

	 * defined 3 priorities over 3 mailboxes We can change this when

	 * WMI is reworked so that priorities are not dependent on

	 * mailboxes.

/*

 * Set HTC/Mbox operational parameters, this can only be called when the

 * target is in the BMI phase.

 set the host interest area for the block size */

 set the host interest area for the mbox ISR yield limit */

	/*

	 * Configure the device for rx dot11 header rules. "0,0" are the

	 * default values. Required if checksum offload is needed. Set

	 * RxMetaVersion to 2.

 Enable Probe Request reporting for P2P */

	/*

	 * Note: Even though the firmware interface type is

	 * chosen as BSS_STA for all three interfaces, can

	 * be configured to IBSS/AP as long as the fw submode

	 * remains normal mode (0 - AP, STA and IBSS). But

	 * due to an target assert in firmware only one interface is

	 * configured for now.

	/*

	 * Submodes when fw does not support dynamic interface

	 * switching:

	 *		vif[0] - AP/STA/IBSS

	 *		vif[1] - "P2P dev"/"P2P GO"/"P2P Client"

	 *		vif[2] - "P2P dev"/"P2P GO"/"P2P Client"

	 * Otherwise, All the interface are initialized to p2p dev.

 set the firmware mode to STA/IBSS/AP */

	/*

	 * Hardcode the address use for the extended board data

	 * Ideally this should be pre-allocate by the OS at boot time

	 * But since it is a new feature and board data is loaded

	 * at init time, we have to workaround this from host.

	 * It is difficult to patch the firmware boot code,

	 * but possible in theory.

 set the block size for the target */

 use default number of control buffers */

 Configure GPIO AR600x UART */

 Only set the baud rate if we're actually doing debug */

 Configure target refclk_hz */

 firmware upload */

/*

 * Check the device tree for a board-id and use it to construct

 * the pathname to the firmware file.  Used (for now) to find a

 * fallback to the "bdata.bin" file--typically a symlink to the

 * appropriate board-specific file.

 CONFIG_OF */

 managed to get proper board file */

 got board file from device tree */

 there was no proper board file, try to use default instead */

 FIXME: remove WARN_ON() as we won't support FW API 1 for long */

 magic also includes the null byte, check that as well */

 loop elements */

 hdr is unaligned! */

 in testmode we already might have a fw file */

	/*

	 * Determine where in Target RAM to write Board Data.

	 * For AR6004, host determine Target RAM address for

	 * writing board data.

 determine where in target ram to write extended board data */

 write extended board data */

 record that extended board data is initialized */

 record the fact that Board Data IS initialized */

 read firmware start address */

 execute the OTP code */

	/*

	 * Set starting address for firmware

	 * Don't need to setup app_start override addr on AR6004

 temporarily disable system sleep */

 program analog PLL register */

 no need to control 40/44MHz clock on AR6004 */

 Run at 80/88MHz by default */

 WAR to avoid SDIO CRC err */

 write EEPROM data to Target RAM */

 transfer One time Programmable data */

 Download Target firmware */

 Download the test script */

 Restore system sleep */

 add "..." to the end of string */

 overwrite the last comma */

 Do we need to finish the BMI phase */

	/*

	 * The reason we have to wait for the target here is that the

	 * driver layer has to init BMI in order to set the host block

	 * size.

		/*

		 * Most likely USB target is in odd state after reboot and

		 * needs a reset. A cold reset makes the whole device

		 * disappear from USB bus and initialisation starts from

		 * beginning.

 setup credit distribution */

 start HTC */

 FIXME: call this */

 Wait for Wmi event to be ready */

 communicate the wmi protocol verision to the target */

 FIXME: return error */

	/*

	 * After wmi_shudown all WMI events will be dropped. We

	 * need to cleanup the buffers allocated in AP mode and

	 * give disconnect notification to stack, which usually

	 * happens in the disconnect_event. Simulate the disconnect

	 * event by calling the function directly. Sometimes

	 * disconnect_event will be received when the debug logs

	 * are collected.

	/*

	 * Try to reset the device if we can. The driver may have been

	 * configure NOT to reset the target during a debug session.

/*

 * Copyright (c) 2004-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * tid - tid_mux0..tid_mux3

 * aid - tid_mux4..tid_mux7

		/*

		 * No free endpoint is available, start redistribution on

		 * the inuse endpoints.

		/*

		 * This tx is because of a uAPSD trigger, determine

		 * more and EOSP bit. Set EOSP if queue is empty

		 * or sufficient frames are delivered for this trigger.

 packet is in DIX format  */

 packet is in 802.3 format */

 Queue the frames if the STA is sleeping */

	/*

	 * If this is the first pkt getting queued

	 * for this STA, update the PVB for this STA

 Queue the frames if the STA is sleeping */

	/*

	 * If this is the first pkt getting queued

	 * for this STA, update the PVB for this

	 * STA.

			/*

			 * If this transmit is not because of a Dtim Expiry

			 * q it.

				/*

				 * If this is the first Mcast pkt getting

				 * queued indicate to the target to set the

				 * BitmapControl LSB of the TIM IE.

				/*

				 * This transmit is because of Dtim expiry.

				 * Determine if MoreData bit has to be set.

 Inform the caller that the skb is consumed */

 Tx functions */

		/*

		 * Control endpoint is full, don't allocate resources, we

		 * are just going to drop this packet.

	/*

	 * This interface is asynchronous, if there is an error, cleanup

	 * will happen in the TX completion callback.

 initialize to unmapped ac */

 If target is not associated */

 AP mode Power saving processing */

 instruct target to calculate checksum */

 get the stream mapping */

 allocate resource for this packet */

 update counts while the lock is held */

		/*

		 * We will touch (move the buffer data to align it. Since the

		 * skb buffer is cloned and not only the header is changed, we

		 * have to copy it to allow the changes. Since we are copying

		 * the data here, we may as well align it by reserving suitable

		 * headroom to avoid the memmove in ath6kl_htc_tx_buf_align().

	/*

	 * HTC interface is asynchronous, if this fails, cleanup will

	 * happen in the ath6kl_tx_complete callback.

 indicate tx activity or inactivity on a WMI stream */

		/*

		 * Keep track of the active stream with the highest

		 * priority.

 set the new highest active priority */

		/*

		 * We may have to search for the next active stream

		 * that is the highest priority.

			/*

			 * The highest priority stream just went inactive

			 * reset and search for the "next" highest "active"

			 * priority stream.

					/*

					 * Set the new highest active

					 * priority.

 notify HTC, this may cause credit distribution changes */

		/*

		 * Under normal WMI if this is getting full, then something

		 * is running rampant the host should not be exhausting the

		 * WMI queue with too many commands the only exception to

		 * this is during testing using endpointping.

	/*

	 * The last MAX_HI_COOKIE_NUM "batch" of cookies are reserved for

	 * the highest active stream.

		/*

		 * Give preference to the highest priority stream by

		 * dropping the packets which overflowed.

 FIXME: Locking */

 TODO this needs to be looked at */

 lock the driver as we update internal state */

 reap completed packets */

 a packet was flushed  */

 FIXME: Locking */

 flush all the data (non-control) streams */

 Rx functions */

/*

 * Callback to allocate a receive buffer for a pending packet. We use a

 * pre-allocated list of buffers of maximum AMSDU size (4K).

 set actual endpoint ID */

 Is this the last subframe within this aggregate ? */

		/* Add the length of A-MSDU subframe padding bytes -

		 * Round to nearest word.

	/*

	 * idx_end is typically the last possible frame in the window,

	 * but changes to 'the' seq_no, when BAR comes. If seq_no

	 * is non-zero, we will go up to that and stop.

	 * Note: last seq no in current window will occupy the same

	 * index position as index that is just previous to start.

	 * An imp point : if win_sz is 7, for seq_no space of 4095,

	 * then, there would be holes when sequence wrap around occurs.

	 * Target should judiciously choose the win_sz, based on

	 * this condition. For 4095, (TID_WINDOW_SZ = 2 x win_sz

	 * 2, 4, 8, 16 win_sz works fine).

	 * We must deque from "idx" to "idx_end", including both.

 Check the incoming sequence no, if it's in the window */

			/*

			 * Dequeue only those frames that are outside the

			 * new shifted window.

	/*

	 * Is the cur frame duplicate or something beyond our window(hold_q

	 * -> which is 2x, already)?

	 *

	 * 1. Duplicate is easy - drop incoming frame.

	 * 2. Not falling in current sliding window.

	 *  2a. is the frame_seq_no preceding current tid_seq_no?

	 *      -> drop the frame. perhaps sender did not get our ACK.

	 *         this is taken care of above.

	 *  2b. is the frame_seq_no beyond window(st, TID_WINDOW_SZ);

	 *      -> Taken care of it above, by moving window forward.

			/*

			 * There is a frame in the queue and no

			 * timer so start a timer to ensure that

			 * the frame doesn't remain stuck

			 * forever.

	/*

	 * If the APSD q for this STA is not empty, dequeue and

	 * send a pkt from the head of the q. Also update the

	 * More data bit in the WMI_DATA_HDR if there are

	 * more pkts for this STA in the APSD q.

	 * If there are no more pkts for this STA,

	 * update the APSD bitmap for this STA.

	/*

	 * Number of frames to send in a service period is

	 * indicated by the station

	 * in the QOS_INFO of the association request

	 * If it is zero, send all frames

		/*

		 * Set the STA flag to Trigger delivery,

		 * so that the frame will go out

 Last frame in the service period, set EOSP or queue empty */

	/*

	 * Take lock to protect buffer counts and adaptive power throughput

	 * state.

	/*

	 * In the case of AP mode we may receive NULL data frames

	 * that do not have LLC hdr. They are 16 bytes in size.

	 * Allow these frames in the AP mode.

 Get the Power save state of the STA */

		/*

		 * If there is a change in PS state of the STA,

		 * take appropriate steps:

		 *

		 * 1. If Sleep-->Awake, flush the psq for the STA

		 *    Clear the PVB for the STA.

		 * 2. If Awake-->Sleep, Starting queueing frames

		 *    the STA.

 Accept trigger only when the station is in sleep */

 Clear the PVB for this STA */

 drop NULL data frames here */

		/*

		 * Drop frames that could not be processed (lack of

		 * memory, etc.)

			/*

			 * Bcast/Mcast frames should be sent to the

			 * OS stack as well as on the air.

			/*

			 * Search for a connected STA with dstMac

			 * as the Mac address. If found send the

			 * frame to it on the air else send the

			 * frame up the stack.

 nothing to deliver up the stack */

 aggregation code will handle the skb */

 clean up our amsdu buffer list */

/*

 * Copyright (c) 2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Process pending fw error detection */

/*

 * Copyright (c) 2004-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

	/*

	 * Turn on power to get hardware (target) version and leave power

	 * on delibrately as we will boot the hardware anyway within few

	 * seconds.

 FIXME: we should free all firmwares in the error cases below */

	/*

	 * Backwards compatibility support for older ar6004 firmware images

	 * which do not set these feature flags.

 Indicate that WMI is enabled (although not ready yet) */

 setup access class priority mappings */

 lowest  */

 highest */

 allocate some buffers that handle larger AMSDU frames */

 give our connected endpoints some buffers */

 Add an initial station interface */

 Init the PS queues */

/*

 * Copyright (c) 2004-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 max ATH6KL_FWLOG_PAYLOAD_SIZE bytes */

 tracing code doesn't like null strings :/ */

			/*

			 * If the target supports GMBOX hardware, dump some

			 * additional state.

 FIXME: move to htc.c */

 Need to pad each record to fixed length ATH6KL_FWLOG_PAYLOAD_SIZE */

 drop oldest entries */

 read undelivered logs from firmware */

 not enough space, put skb back and leave */

 FIXME: what to do if len == 0? */

 we must init under queue lock */

 not enough space, put skb back and leave */

 FIXME: what to do if len == 0? */

 Dump all the registers if no register is specified */

	/*

	 * Actually we are lying here but don't know how to read the mask

	 * value from the firmware.

/*

 * Initialisation needs to happen in two stages as fwlog events can come

 * before cfg80211 is initialised, and debugfs depends on cfg80211

 * initialisation.

/*

 * Copyright (c) 2004-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 protects access to bus_req_freeq */

 free list */

 available bus requests */

 protects access to dma_buffer */

 scatter request list head */

 protects access to scat_req */

 protects access to wr_asyncq */

/*

 * Macro to check if DMA buffer is WORD-aligned and DMA-able.

 * Most host controllers assume the buffer is DMA'able and will

 * bug-check otherwise (i.e. buffers on the stack). virt_addr_valid

 * check fails on stack memory.

 EP1 has an extended range */

 FIXME: looks like ugly workaround for something */

 FIXME: this also looks like ugly workaround */

 fill SG entries */

 assemble SG list */

 set scatter-gather table for request */

 Fixup the address so that the last byte will fall on MBOX EOM */

 Uses extended address range */

 set command argument */

 synchronous call to process request */

 allocate the scatter request */

 allocate sglist */

 allocate a bus request for this scatter request */

 assign the scatter request to this bus request */

 add it to the scatter pool */

	/*

	 * Release the host during interrups so we can pick it back up when

	 * we process commands.

	/*

	 * Wait for hardware to initialise. It should take a lot less than

	 * 10 ms but let's be conservative here.

 Disable the card */

 Register the isr */

 scatter gather read write request */

 clean up scatter support */

 empty the free list */

		/*

		 * FIXME: should we also call completion handler with

		 * ath6kl_hif_rw_comp_handler() with status -ECANCELED so

		 * that the packet is properly freed?

 setup of HIF scatter resources */

 check if host supports scatter and it meets our requirements */

 enable 4-bit ASYNC interrupt on AR6003 or later */

 give us some time to enable, in ms */

 sdio irq wakes up host */

		/*

		 * Workaround to support Deep Sleep with MSM, set the host pm

		 * flag as MMC_PM_WAKE_SDIO_IRQ to allow SDCC deiver to disable

		 * the sdc2_clock and internally allows MSM to enter

		 * TCXO shutdown properly.

 need to set sdio settings after power is cut from sdio */

 set the window address register (using 4-byte register access ). */

	/*

	 * Write bytes 1,2,3 of the register to set the upper address bytes,

	 * the LSB is written last to initiate the access cycle

		/*

		 * Fill the buffer with the address byte value we want to

		 * hit 4 times.

		/*

		 * Hit each byte of the register address with a 4-byte

		 * write operation to the same address, this is a harmless

		 * operation.

	/*

	 * Write the address register again, this time write the whole

	 * 4-byte value. The effect here is that the LSB write causes the

	 * cycle to start, the extra 3 byte write to bytes 1,2,3 has no

	 * effect since we are writing the same values again

 set window register to start read cycle */

 read the data */

 set write data */

 set window register, which starts the write cycle */

 Read the counter register to get the command credits */

		/*

		 * Hit the credit counter with a 4-byte access, the first byte

		 * read will hit the counter and cause a decrement, while the

		 * remaining 3 bytes has no effect. The rationale behind this

		 * is to make all HIF accesses 4-byte aligned.

		/* The counter is only 8 bits.

		 * Ignore anything in the upper 3 bytes

 all we really want is one bit */

	/*

	 * During normal bootup, small reads may be required.

	 * Rather than issue an HIF Read and then wait as the Target

	 * adds successive bytes to the FIFO, we wait here until

	 * we know that response data is available.

	 *

	 * This allows us to cleanly timeout on an unexpected

	 * Target failure rather than risk problems at the HIF level.

	 * In particular, this avoids SDIO timeouts and possibly garbage

	 * data on some host controllers.  And on an interconnect

	 * such as Compact Flash (as well as some SDIO masters) which

	 * does not provide any indication on data timeout, it avoids

	 * a potential hang or garbage response.

	 *

	 * Synchronization is more difficult for reads larger than the

	 * size of the MBOX FIFO (128B), because the Target is unable

	 * to push the 129th byte of data until AFTER the Host posts an

	 * HIF Read and removes some FIFO data.  So for large reads the

	 * Host proceeds to post an HIF Read BEFORE all the data is

	 * actually available to read.  Fortunately, large BMI reads do

	 * not occur in practice -- they're supported for debug/development.

	 *

	 * So Host/Target BMI synchronization is divided into these cases:

	 *  CASE 1: length < 4

	 *        Should not happen

	 *

	 *  CASE 2: 4 <= length <= 128

	 *        Wait for first 4 bytes to be in FIFO

	 *        If CONSERVATIVE_BMI_READ is enabled, also wait for

	 *        a BMI command credit, which indicates that the ENTIRE

	 *        response is available in the the FIFO

	 *

	 *  CASE 3: length > 128

	 *        Wait for the first 4 bytes to be in FIFO

	 *

	 * For most uses, a small timeout should be sufficient and we will

	 * usually see a response quickly; but there may be some unusual

	 * (debug) cases of BMI_EXECUTE where we want an larger timeout.

	 * For now, we use an unbounded busy loop while waiting for

	 * BMI_EXECUTE.

	 *

	 * If BMI_EXECUTE ever needs to support longer-latency execution,

	 * especially in production, this code needs to be enhanced to sleep

	 * and yield.  Also note that BMI_COMMUNICATION_TIMEOUT is currently

	 * a function of Host processor speed.

 NB: Currently, always true */

 FIXME: make sure that wq is not queued again */

 this is a scatter gather request */

/*

 * Empty handlers so that mmc subsystem doesn't remove us entirely during

 * suspend. We instead follow cfg80211 suspend/resume handlers.

 CONFIG_PM_SLEEP */

/*

 * Copyright (c) 2007-2011 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 htc pipe tx path */

 nothing to indicate */

		/*

		 * a multiple send complete handler is being used,

		 * pass the queue to the handler

		/*

		 * all packets are now owned by the callback,

		 * reset queue to be safe

 using legacy EpTxComplete */

 do completion */

 NOTE : the TX lock is held when this function is called */

 loop until we can grab as many packets out of the queue as we can */

 get packet at head, but don't remove it */

 figure out how many credits this message requires */

			/*

			 * endpoint 0 is special, it always has a credit and

			 * does not require credit based flow control

 check if we need credits back from the target */

 tell the target we need credits ASAP! */

 now we can fully dequeue */

 save the number of credits this packet consumed */

 save send flags */

 queue this packet into the caller's queue */

 NOTE : the TX lock is held when this function is called */

 loop until we can grab as many packets out of the queue as we can */

 queue this packet into the caller's queue */

 setup HTC frame header */

 Endianess? */

 store in look up queue to match completions */

				/* TODO: if more than 1 endpoint maps to the

				 * same PipeID, it is possible to run out of

				 * resources in the HIF layer.

				 * Don't emit the error

 reclaim credits */

 put it back into the callers queue */

 temp queue to hold packets */

 init the local send queue */

	/*

	 * txq equals to NULL means

	 * caller didn't provide a queue, just wants us to

	 * check queues and send

 empty queue */

 we've already overflowed */

 get how much we will overflow by */

 get how much we will overflow the TX queue by */

 if overflow is negative or zero, we are okay */

			/*

			 * all packets will fit or caller did not provide send

			 * full indication handler -- just move all of them

			 * to the local send_queue object

 we have overflowed, and a callback is provided */

 dequeue all non-overflow packets to the sendqueue */

 pop off caller's queue */

 move to local queue */

			/*

			 * the caller's queue has all the packets that won't fit

			 * walk through the caller's queue and indicate each to

			 * the send full handler

 callback wants the packet dropped */

					/* leave this one in the caller's queue

					/* callback wants to keep this packet,

					 * move from caller's queue to the send

 no packets made it in, caller will cleanup */

 transfer packets to tail */

 increment tx processing count on entry */

		/*

		 * Another thread or task is draining the TX queues on this

		 * endpoint that thread will reset the tx processing count

		 * when the queue is drained.

**** beyond this point only 1 thread may enter ******/

	/*

	 * Now drain the endpoint TX queue for transmission as long as we have

	 * enough transmit resources.

			/*

			 * Credit based mechanism provides flow control

			 * based on target transmit resource availability,

			 * we assume that the HIF layer will always have

			 * bus resources greater than target transmit

			 * resources.

			/*

			 * Get all packets for this endpoint that we can

			 * for this pass.

			/*

			 * Didn't get packets due to out of resources or TX

			 * queue was drained.

 send what we can */

 done with this endpoint, we can clear the count */

 htc control packet manipulation */

 TODO, this should be configured by the caller! */

 FIXME: hif_usbaudioclass is always zero */

 Setup VO Service To have Max Credits */

 leftovers go to best effort */

 leftovers go to best effort */

 process credit reports and call distribution function */

 lock out TX while we update credits */

 flush endpoint TX queue */

/*

 * In the adapted HIF layer, struct sk_buff * are passed between HIF and HTC,

 * since upper layers expects struct htc_packet containers we use the completed

 * skb and lookup it's corresponding HTC packet buffer from a lookup list.

 * This is extra overhead that can be fixed by re-aligning HIF interfaces with

 * HTC.

	/*

	 * interate from the front of tx lookup queue

	 * this lookup should be fast since lower layers completes in-order and

	 * so the completed packet should be at the head of the list generally

 check for removal */

 found it */

 may have already been flushed and freed */

 will be giving this buffer back to upper layers */

		/*

		 * note: when using TX credit flow, the re-checking of queues

		 * happens when credits flow back from the target. in the

		 * non-TX credit case, we recheck after the packet completes

 get first packet to find out which ep the packets will go into */

 do completion on any packets that couldn't get in */

 htc pipe rx path */

 these are byte aligned structs */

 no room left in buffer for record */

 start of record follows the header */

 advance buffer past this record for next time around */

 nothing to indicate */

 using legacy EpRecv */

 do completion */

	/*

	 * ar->htc_target can be NULL due to a race condition that can occur

	 * during driver initialization(we do 'ath6kl_hif_power_on' before

	 * initializing 'ar->htc_target' via 'ath6kl_htc_create').

	 * 'ath6kl_hif_power_on' assigns 'ath6kl_recv_complete' as

	 * usb_complete_t/callback function for 'usb_fill_bulk_urb'.

	 * Thus the possibility of ar->htc_target being NULL

	 * via ath6kl_recv_complete -> ath6kl_usb_io_comp_work.

 get flags to check for trailer */

 extract the trailer length */

 process trailer after hdr/apps payload */

 zero length packet with trailer, just drop these */

 handle HTC control message */

			/*

			 * fatal: target should not send unsolicited

			 * messageson the endpoint 0

 remove HTC header */

	/*

	 * TODO: the message based HIF architecture allocates net bufs

	 * for recv packets since it bridges that HIF to upper layers,

	 * which expects HTC packets, we form the packets here

 TODO: for backwards compatibility */

	/*

	 * TODO: this is a hack because the driver layer will set the

	 * actual len of the skb again which will just double the len

 recover the packet container */

 give the packet back */

 polling routine to wait for a control packet to be received */

 htc pipe initialization */

 start HTC, this is called after all services are connected */

 htc service functions */

 special case for pseudo control service */

 allocate a packet to send to the target */

 assemble connect service message */

 tell target desired recv alloc for this ep */

 we don't own it anymore */

 wait for response */

		/* we controlled the buffer creation so it has to be

		 * properly aligned

 this message is not valid */

 check response status */

 the rest are parameter checks so set the error status */

 endpoint already in use! */

 return assigned endpoint to caller */

 setup the endpoint */

 this marks ep in use */

 copy all the callbacks */

 initialize tx_drop_packet_threshold */

 htc export functions */

 Get HIF default pipe for HTC message exchange */

 cleanup the HTC instance */

 kfree our instance */

 allocate a buffer to send */

 assemble setup complete message */

 cleanup endpoints */

 setup our pseudo HTC control endpoint connection */

 connect fake service */

 not in use.. */

 store receive packets */

 walk through queue and mark each one canceled */

 TODO */

/*

 * Copyright (c) 2004-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 {W/O SGI, with SGI} */

 {W/O SGI, with SGI} */

 HT 20, MCS 0 */

 HT 20, MCS 8 */

 HT 20, MCS 15 */

HT 40, MCS 0 */

HT 40, MCS 8 */

HT 40, MCS 15 */

 802.1d to AC mapping. Refer pg 57 of WMM-test-plan-v1.2 */

 FIXME: Locking */

/*  Performs DIX to 802.3 encapsulation for transmit packets.

 *  Assumes the entire DIX header is contiguous and that there is

 *  enough room in the buffer for a 802.3 mac header and LLC+SNAP headers.

	/*

	 * Determine IPTOS priority

	 *

	 * IP-TOS - 8bits

	 *          : DSCP(6-bits) ECN(2-bits)

	 *          : DSCP - P2 P1 P0 X X X

	 * where (P2 P1 P0) form 802.1D

 If WMM is disabled all traffic goes as BE traffic */

			/*

			 * Extract the endpoint info from the TOS field

			 * in the IP header.

		/*

		 * Queue the EAPOL frames in the same WMM_AC_VO queue

		 * as that of management frames.

	/*

	 * workaround for WMM S5

	 *

	 * FIXME: wmi->traffic_class is always 100 so this test doesn't

	 * make sense

 Convert user priority to traffic class */

 Implicit streams are created with TSID 0xFF */

 Strip off the 802.11 header */

/*

 * Performs 802.3 to DIX encapsulation for received packets.

 * Assumes the entire 802.3 header is contiguous.

 event for cancel command */

 timeout on uncanceled r-o-c */

 Send a "simple" wmi command -- one with no arguments */

/*

 * Mechanism to modify the roaming behavior in the firmware. The lower rssi

 * at which the station has to roam can be passed with

 * WMI_SET_LRSSI_SCAN_PARAMS. Subtract 96 from RSSI to get the signal level

 * in dBm.

 AP mode start/STA connected event */

 STA/IBSS mode connection event */

 Start of assoc rsp IEs */

 capinfo, status, aid */

 End of assoc rsp IEs */

 WMM OUT (00:50:F2) */

 Only update BSS table for now */

	/*

	 * Firmware doesn't return any event when scheduled scan has

	 * finished, so we need to use a timer to find out when there are

	 * no more results.

	 *

	 * The timer is started from the first bss info received, otherwise

	 * the timer would not ever fire if the scan interval is short

	 * enough.

 Inactivity timeout of a fatpipe(pstream) at the target */

	/*

	 * When the pstream (fat pipe == AC) timesout, it means there were

	 * no thinStreams within this pstream & it got implicitly created

	 * due to data flow on this AC. We start the inactivity timer only

	 * for implicitly created pstream. Just reset the host state.

 Indicate inactivity to driver layer for this fatpipe (pstream) */

/*

 * Target is reporting a programming error.  This is for

 * developer aid only.  Target only checks a few common violations

 * and it is responsibility of host to do all error checking.

 * Behavior of target after wmi error event is undefined.

 * A reset is recommended.

 The list is already in sorted order. Get the next lower value */

 The list is already in sorted order. Get the next lower value */

	/*

	 * Identify the threshold breached and communicate that to the app.

	 * After that install a new set of thresholds based on the signal

	 * quality reported by the target

 Upper threshold breached */

 Lower threshold breached */

 Calculate and install the next set of thresholds */

 Issue a wmi command to install the thresholds */

		/*

		 * Following assumes that there is only one outstanding

		 * ADDTS request when this event is received

	/*

	 * Clear active tsids and Add missing handling

	 * for delete qos stream from AP

		/* Indicate stream inactivity to driver layer only if all tsids

		 * within this AC are deleted.

	/*

	 * Identify the threshold breached and communicate that to the app.

	 * After that install a new set of thresholds based on the signal

	 * quality reported by the target.

 Upper threshold breached */

 Lower threshold breached */

 Calculate and install the next set of thresholds */

 Issue a wmi command to install the thresholds */

 AP list version 1 contents */

		/*

		 * Make sure all data currently queued is transmitted before

		 * the cmd execution.  Establish a new sync point.

 Only for OPT_TX_CMD, use BE endpoint. */

		/*

		 * Make sure all new data queued waits for the command to

		 * execute. Establish a new sync point.

 Disconnect command does not need to do a SYNC before. */

/* ath6kl_wmi_start_scan_cmd is to be deprecated. Use

 * ath6kl_wmi_begin_scan_cmd instead. The new function supports P2P

 * mgmt operations using station interface.

/*

 * beginscan supports (compared to old startscan) P2P mgmt operations using

 * station interface, send additional information like supported rates to

 * advertise and xmit rates for probe requests

 skip rate */

	/*

	 * In the SYNC cmd sent on the control Ep, send a bitmap

	 * of the data eps on which the Data Sync will be sent

	/*

	 * If buffer allocation for any of the dataSync fails,

	 * then do not send the Synchronize cmd on the control ep

	/*

	 * Send sync cmd followed by sync data messages on all

	 * endpoints being used

 free up any resources left over (possibly due to an error) */

	/*

	 * Check nominal PHY rate is >= minimalPHY,

	 * so that DUT can allow TSRS IE

 Get the physical rate (units of bps) */

 Check minimal phy < nominal phy rate */

 unit of 500 kbps */

 This is an implicitly created Fat pipe */

 explicitly created thin stream within a fat pipe */

		/*

		 * If a thinstream becomes active, the fat pipe automatically

		 * becomes active

	/*

	 * Indicate activty change to driver layer only if this is the

	 * first TSID to get created in this AC explicitly or an implicit

	 * fat pipe is getting created.

	/*

	 * Indicate stream inactivity to driver layer only if all tsids

	 * within this AC are deleted.

 Multicast address are not valid */

	/*

	 * Relinquish credits from all implicitly created pstreams

	 * since when we go to sleep. If user created explicit

	 * thinstreams exists with in a fatpipe leave them intact

	 * for the user to delete.

			/*

			 * FIXME: Is this lock & unlock inside

			 * for loop correct? may need rework.

			/*

			 * If there are no user created thin streams

			 * delete the fatpipe

				/*

				 * Indicate inactivity to driver layer for

				 * this fatpipe (pstream)

 FIXME: Can we do this assignment without locking ? */

 only check 2.4 and 5 GHz bands, skip the rest */

 copy legacy rate mask */

 copy mcs rate mask */

 A mode operate in 5GHZ band */

 only check 2.4 and 5 GHz bands, skip the rest */

 copy legacy rate mask */

 copy mcs rate mask */

 A mode operate in 5GHZ band */

 This command has zero length payload */

	/*

	 * Allocate additional memory in the buffer to hold

	 * filter and mask value, which is twice of filter_size.

	/*

	 * NOTE: Band in firmware matches enum nl80211_band, it is unlikely

	 * this will be changed in firmware. If at all there is any change in

	 * band value, the host needs to be fixed.

 SGI is stored as the MSB of the rate_index */

  AP mode functions */

 This command will be used to enable/disable AP uAPSD feature */

 Delete the local aggr state, on host */

/* ath6kl_wmi_send_action_cmd is to be deprecated. Use

 * ath6kl_wmi_send_mgmt_cmd instead. The new function supports P2P

 * mgmt operations using station interface.

 Offload for wait not supported */

 Offload for wait not supported */

		/*

		 * If capable of doing P2P mgmt operations using

		 * station interface, send additional information like

		 * supported rates to advertise and xmit rates for

		 * probe requests

 work around target minimum length requirement */

 Process interface specific wmi events, caller would free the datap */

 this event has been deprecated */

 may be the event is interface specific */

 Control Path */

/*

 * Copyright (c) 2007-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 threshold to re-enable Tx bundling for an AC*/

 Functions for Tx credit handling */

			/*

			 * Control service is always marked active, it

			 * never goes inactive EVER.

		/*

		 * Streams have to be created (explicit | implicit) for all

		 * kinds of traffic. BE endpoints are also inactive in the

		 * beginning. When BE traffic starts it creates implicit

		 * streams that redistributes credits.

		 *

		 * Note: all other endpoints have minimums set but are

		 * initially given NO credits. credits will be distributed

		 * as traffic activity demands

	/*

	 * For ath6kl_credit_seek function,

	 * it use list_for_each_entry_reverse to walk around the whole ep list.

	 * Therefore assign this lowestpri_ep_dist after walk around the ep_list

			/*

			 * For the remaining data endpoints, we assume that

			 * each cred_per_msg are the same. We use a simple

			 * calculation here, we take the remaining credits

			 * and determine how many max messages this can

			 * cover and then set each endpoint's normal value

			 * equal to 3/4 this amount.

 initialize and setup credit distribution */

 highest */

 lowest */

 set priority list */

 reduce an ep's credits back to a set limit */

/*

 * HTC has an endpoint that needs credits, ep_dist is the endpoint in

 * question.

	/*

	 * For all other services, we follow a simple algorithm of:

	 *

	 * 1. checking the free pool for credits

	 * 2. checking lower priority endpoints for credits to take

	/*

	 * We don't have enough in the free pool, try taking away from

	 * lower priority services The rule for taking away credits:

	 *

	 *   1. Only take from lower priority endpoints

	 *   2. Only take what is allocated above the minimum (never

	 *      starve an endpoint completely)

	 *   3. Only take what you need.

			/*

			 * The current one has been allocated more than

			 * it's minimum and it has enough credits assigned

			 * above it's minimum to fulfill our need try to

			 * take away just enough to fulfill our need.

 did we find some credits? */

 redistribute credits based on activity change */

/*

 *

 * This function is invoked whenever endpoints require credit

 * distributions. A lock is held while this function is invoked, this

 * function shall NOT block. The ep_dist_list is a list of distribution

 * structures in prioritized order as defined by the call to the

 * htc_set_credit_dist() api.

 Endianess? */

 on failure to submit, reclaim credits for this packet */

 do completion */

 walk through the scatter list and process */

 free scatter request */

 complete all packets */

 Seek more credits */

 When we are getting low on credits, ask for more */

 see if we were successful in getting more */

 tell the target we need credits ASAP! */

 now we can fully move onto caller's queue */

 save the number of credits this packet consumed */

 all TX packets are handled asynchronously */

 save send flags */

 See if the padded tx length falls on a credit boundary */

 No padding needed */

	/*

	 * The transfer consumes a "partial" credit, this

	 * packet cannot be bundled unless we add

	 * additional "dummy" padding (max 255 bytes) to

	 * consume the entire credit.

 The amount of padding is too large, send as non-bundled */

 now remove it from the queue */

 prepare packet and flag message as part of a send bundle */

 Make sure the buffer is 4-byte aligned */

 Roll back scatter setup in case of any failure */

/*

 * Drain a queue and send as bundles this function may return without fully

 * draining the queue when

 *

 *    1. scatter resources are exhausted

 *    2. a message that will consume a partial credit will stop the

 *    bundling process early

 *    3. we drop below the minimum number of messages for a bundle

 not enough to bundle */

 no scatter resources  */

				/*

				 * BE, BK have priorities and bit

				 * positions reversed

				/*

				 * any AC with priority lower than

				 * itself

			/*

			 * when the scatter request resources drop below a

			 * certain threshold, disable Tx bundling for all

			 * AC's with priority lower than the current requesting

			 * AC. Otherwise re-enable Tx bundling for them

 send path is always asynchronous */

	/*

	 * drain the endpoint TX queue for transmission as long

	 * as we have enough credits.

 try to send a bundle on each pass */

 check if bundling is enabled for an AC */

		/*

		 * if an AC has bundling disabled and no tx bundling

		 * has occured continously for a certain number of TX,

		 * enable tx bundling for this AC

 tx bundling will reset the counter */

	/*

	 * Run through the credit distribution list to see if there are

	 * packets queued. NOTE: no locks need to be taken since the

	 * distribution list is not dynamic (cannot be re-ordered) and we

	 * are not modifying any state.

			/*

			 * Try to start the stalled queue, this list is

			 * ordered by priority. If there are credits

			 * available the highest priority queue will get a

			 * chance to reclaim credits from lower priority

			 * ones.

 Indicate HTC bundling to the target */

 we want synchronous operation */

 flush endpoint TX queue */

 initialize the discard queue */

 not in use.. */

 HTC Rx */

/*

 * optimization for recv packets, we can indicate a

 * "hint" that there are more  single-packets to fetch

 * on this endpoint.

 This function is called with rx_lock held */

 FIXME: type of lk_ahds can't be right */

		/*

		 * Reset flag, any packets allocated using the

		 * rx_alloc() API cannot be recycled on

		 * cleanup,they must be explicitly returned.

 refill handler is being used */

 clear flags */

			/*

			 * flag that these packets cannot be

			 * recycled, they have to be returned to

			 * the user

 Caller needs to free this upon any failure */

 set expected look ahead */

			/*

			 * HTC header indicates that every packet to follow

			 * has the same padded length so that it can be

			 * optimally fetched as a full bundle.

 the count doesn't include the starter frame */

 HTC header only indicates 1 message to fetch */

 Setup packet buffers for each message */

		/*

		 * This is due to unavailabilty of buffers to rx entire data.

		 * Return no error so that free buffers from queue can be used

		 * to receive partial data.

			/*

			 * This credit report arrived on the same endpoint

			 * indicating it arrived in an RX packet.

 credit arrived on endpoint 0 as a NULL message */

 always give endpoint 0 credits back */

		/*

		 * Refresh tx depth for distribution function that will

		 * recover these credits NOTE: this is only valid when

		 * there are credits to recover!

		/*

		 * This was a credit return based on a completed send

		 * operations note, this is done with the lock held

 look ahead bytes are valid, copy them over */

 these are byte aligned structs */

 advance buffer past this record for next time around */

	/*

	 * NOTE: we cannot assume the alignment of buf, so we use the safe

	 * macros to retrieve 16 bit fields.

		/*

		 * Refresh the expected header and the actual length as it

		 * was unknown when this packet was grabbed as part of the

		 * bundle.

 validate the actual header that was refreshed  */

			/*

			 * Limit this to max buffer just to print out some

			 * of the buffer.

		/*

		 * We were forced to split this bundle receive operation

		 * all packets in this partial bundle must have their

		 * lookaheads ignored.

		/*

		 * This would only happen if the target ignored our max

		 * bundle limit.

			/*

			 * Packet 0..n-1 cannot be checked for look-aheads

			 * since we are fetching a bundle the last packet

			 * however can have it's lookahead used

 NOTE: 1 HTC packet per scatter entry */

 free scatter request */

 process header for each of the recv packet */

			/*

			 * Last packet's more packet flag is set

			 * based on the lookahead.

			/*

			 * Packets in a bundle automatically have

			 * this flag set.

 now go fetch the list of HTC packets */

			/*

			 * There are enough packets to attempt a

			 * bundle transfer and recv bundling is

			 * allowed.

 fully synchronous */

				/*

				 * look_aheads in all packet

				 * except the last one in the

				 * bundle must be ignored

 go fetch the packet */

	/*

	 * Cleanup any packets we allocated but didn't use to

	 * actually fetch any packets.

	/*

	 * On first entry copy the look_aheads into our temp array for

	 * processing

		/*

		 * First lookahead sets the expected endpoint IDs for all

		 * packets in a bundle.

		/*

		 * Try to allocate as many HTC RX packets indicated by the

		 * look_aheads.

			/*

			 * A recv bundle was detected, force IRQ status

			 * re-check again

 Process fetched packets */

		/*

		 * For SYNCH processing, if we get here, we are running

		 * through the loop again due to a detected lookahead. Set

		 * flag that we should re-check IRQ status registers again

		 * before leaving IRQ processing, this can net better

		 * performance in high throughput situations.

 cleanup any packets in sync completion queue */

	/*

	 * Before leaving, check to see if host ran out of buffers and

	 * needs to stop the receiver.

/*

 * Synchronously wait for a control message from the target,

 * This function is used at initialization time ONLY.  At init messages

 * on ENDPOINT 0 are expected.

 we want synchronous operation */

 get the message from the device, this will block */

 process receive header */

 walk through queue and mark each one canceled */

 check if we are blocked waiting for a new buffer */

 TODO : implement a buffer threshold count? */

 not in use.. */

			/*

			 * packets in rx_bufq of endpoint 0 have originally

			 * been queued from target->free_ctrl_rxbuf where

			 * packet and packet->buf_start are allocated

			 * separately using kmalloc(). For other endpoint

			 * rx_bufq, it is allocated as skb where packet is

			 * skb->head. Take care of this difference while freeing

			 * the memory.

 special case for pseudo control service */

 allocate a packet to send to the target */

 we want synchronous operation */

 wait for response */

 check response status */

 return assigned endpoint to caller */

 setup the endpoint */

 this marks the endpoint in use */

		/*

		 * Override cred_per_msg calculation, this optimizes

		 * the credit-low indications since the host will actually

		 * issue smaller messages in the Send path.

 save local connection flags */

 reset distribution list */

 FIXME: free existing entries */

 limit what HTC can handle */

 limit bundle what the device layer can handle */

 Max rx bundle size is limited by the max tx bundle size */

 Max tx bundle size if limited by the extended mbox address range */

 tx_bndl_mask is enabled per AC, each has 1 bit */

		/*

		 * Disallow send bundling since the credit size is

		 * not aligned to a block size the I/O block

		 * padding will spill into the next credit buffer

		 * which is fatal.

 we should be getting 1 control message that the target is ready */

 we controlled the buffer creation so it's properly aligned */

 check if this is an extended ready message */

 this is an extended message */

 legacy */

 setup our pseudo HTC control endpoint connection */

 connect fake service */

		/*

		 * FIXME: this call doesn't make sense, the caller should

		 * call ath6kl_htc_mbox_cleanup() when it wants remove htc

/*

 * Start HTC, enable interrupts and let the target know

 * host has finished setup.

 Disable interrupts at the chip level */

 Push control receive buffers into htc control endpoint */

 NOTE: the first entry in the distribution list is ENDPOINT_0 */

 Indicate to the target of the setup completion */

 unmask interrupts */

 htc_stop: stop interrupt reception, and flush all queued buffers */

	/*

	 * Masking interrupts is a synchronous operation, when this

	 * function returns all pending HIF I/O has completed, we can

	 * safely flush the queues.

 cleanup the HTC instance */

/*

 * Copyright (c) 2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Copyright (c) 2010-2011 Atheros Communications Inc.

 * Copyright (c) 2011 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 keep last */

 not used anymore */

/*

 * Copyright (c) 2004-2011 Atheros Communications Inc.

 * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 empty the queued pkts in the PS queue if any */

 Insert first */

/*

 * Read from the hardware through its diagnostic window. No cooperation

 * from the firmware is required for this.

/*

 * Write to the ATH6KL through its diagnostic window. No cooperation from

 * the Target is required for this.

 Get the contents of the ring buffer */

 for WAPI, we need to set the delayed group key, continue: */

 we actually don't know the phymode, default to HT20 */

 RSN IE */

 WPA IE */

 WPS IE */

 overrides WPA/RSN IE */

			/*

			 * Note: WAPI Parameter Set IE re-uses Element ID that

			 * was officially allocated for BSS AC Access Delay. As

			 * such, we need to be a bit more careful on when

			 * parsing the frame. However, BSS AC Access Delay

			 * element is not supposed to be included in

			 * (Re)Association Request frames, so this should not

			 * cause problems.

 WAPI IE */

 send event to application */

 TODO: sinfo.generation */

		/*

		 * Disconnect command is issued, clear the connect pending

		 * flag. The connected flag will be cleared in

		 * disconnect event notification.

 WMI Event handlers */

 indicate to the waiting thread that the ready event was received */

		/*

		 * reconfigure any saved RSN IE capabilites in the beacon /

		 * probe response to stay in sync with the supplicant.

 if channel switch failed, oh well we tried */

 Update connect & link status atomically */

	/*

	 * For AP case, keyid will have aid of STA which sent pkt with

	 * MIC error. Use this aid to get MAC & send it to hostapd.

 FIX: get correct TSC */

	/*

	 * Send out a packet queued on ps queue. When the ps queue

	 * becomes empty update the PVB for this station.

 TODO: Send out a NULL data frame */

	/*

	 * If there are no associated STAs, ignore the DTIM expiry event.

	 * There can be potential race conditions where the last associated

	 * STA may disconnect & before the host could clear the 'Indicate

	 * DTIM' request to the firmware, the firmware would have just

	 * indicated a DTIM expiry event. The race is between 'clear DTIM

	 * expiry cmd' going from the host to the firmware & the DTIM

	 * expiry event happening from the firmware to the host.

 set the STA flag to dtim_expired for the frame to go out */

 clear the LSB of the BitMapCtl field of the TIM IE */

 disconnect due to other STA vif switching channels */

 bail back to this channel if STA vif fails connect */

 send max client reached notification to user space */

 send blocked client notification to user space */

 if no more associated STAs, empty the mcast PS q */

 clear the LSB of the TIM IE's BitMapCtl field */

 send event to application */

	/*

	 * If the event is due to disconnect cmd from the host, only they

	 * the target would stop trying to connect. Under any other

	 * condition, target would keep trying to connect.

 restart disconnected concurrent vifs waiting for new channel */

 update connect & link status atomically */

 Enable multicast-all filter. */

 Enable/disable "multicast-all" filter*/

 Keep the driver and firmware mcast list in sync. */

			/*

			 * Delete the filter which was previously set

			 * but not in the new request.

 Set the multicast filter */

/*

 * Copyright (c) 2013 Eugene Krasnikov <k.eugene.e@gmail.com>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/* Buffer descriptor rx_ch field is limited to 5-bit (4+1), a mapping is used

 * for 11A Channels.

 11b rates */

 11b SP (short preamble) */

 11ag */

 11n */

 11n SGI */

 11n GF (greenfield) */

 11n CB (channel bonding) */

 11n CB + SGI */

 11n GF + CB */

 11ac reserved indices */

 11ac 20 MHz 800ns GI MCS 0-8 */

 11ac reserved indices */

 11ac 20 MHz 400ns SGI MCS 6-8 */

 11ac reserved indices */

 11ac 40 MHz 800ns GI MCS 0-9 */

 11ac reserved indices */

 11ac 40 MHz 400ns SGI MCS 5-7 */

 11ac reserved index */

 11ac 40 MHz 400ns SGI MCS 5-7 */

 11ac reserved index */

 11ac 80 MHz 800ns GI MCS 0-7 */

 11 ac reserved index */

 11ac 80 MHz 800 ns GI MCS 8-9 */

 11 ac reserved indices */

 11ac 80 MHz 400 ns SGI MCS 6-7 */

 11ac reserved index */

 11ac 80 MHz 400ns SGI MCS 8-9 */

 Walk list again, copying contents into msdu_head */

	/*

	 * All fields must be 0, otherwise it can lead to

	 * unexpected consequences.

 chained A-MSDU chunks */

 Sanity check */

 Only set status for first chained BD (with mac header) */

 no dsss rates in 5Ghz rates table */

		/* If packet originates from hardware scanning, extract the

		 * band/channel from bd descriptor.

  Chained AMSDU ? slow path */

 Not the last AMSDU, wait for more */

 drop everything */

	/*

	 * For not unicast frames mac80211 will not set sta pointer so use

	 * self_sta_index instead.

 TID->QID is one-to-one mapping */

 Don't use a regular queue for null packet (no ampdu) */

 default rate for unicast */

	/*

	 * In joining state trick hardware that probe is sent as

	 * unicast even if address is broadcast.

 broadcast */

 No ack needed not unicast */

		/* Only one at a time is supported by fw. Stop the TX queues

		 * until the ack status gets back.

 Request ack indication from the firmware */

 Data frames served first*/

 MGMT and CTRL frames are handeld here*/

 If the skb has not been transmitted, resume TX queue */

/*

 * Copyright (c) 2013 Eugene Krasnikov <k.eugene.e@gmail.com>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 TODO: Make sure the TX chain clean */

		/*

		 * One of the reasons why HW will not enter BMPS is because

		 * driver is trying to enter bmps before first beacon was

		 * received just after auth complete

 Unbalanced call or last BMPS enter failed */

/*

 * Copyright (c) 2013 Eugene Krasnikov <k.eugene.e@gmail.com>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/* DXE - DMA transfer engine

 * we have 2 channels(High prio and Low prio) for TX and 2 channels for RX.

 * through low channels data packets are transfered

 * through high channels managment packets are transfered

 DXE control block allocation */

 Initialize SMSM state  Clear TX Enable RING EMPTY STATE */

		/* Only every second dxe needs a bd pointer,

 TX Timeout */

	/*

	 * Make at least one loop of do-while because in case ring is

	 * completely full head and tail are pointing to the same element

	 * and while-do will not make any cycles.

 Wait for the TX ack indication or timeout... */

 Tracking ref */

 do not free, ownership transferred to mac80211 status cb */

 do not read until we own DMA descriptor */

 read/modify DMA descriptor */

			/* new skb allocation ok. Use the new one and queue

			 * the old one to network system.

		/* else keep old skb not submitted and reuse it for rx DMA

		 * (dropping the packet that it contained)

 flush descriptor changes before re-marking as valid */

 RX_LOW_PRI */

 RX_HIGH_PRI */

 Allocate BD headers for MGMT frames */

 Where this come from ask QC */

 Allocate BD headers for DATA frames */

 Where this come from ask QC */

	/*

	 * If skb is not null that means that we reached the tail of the ring

	 * hence ring is full. Stop queues to let mac80211 back off until ring

	 * has an empty slot again.

 write buffer descriptor */

 Set source address of the BD we send */

 Move the head of the ring to the next empty descriptor */

 Commit all previous writes and set descriptors to VALID */

	/*

	 * When connected and trying to send data frame chip can be in sleep

	 * mode and writing to the register will not wake up the chip. Instead

	 * notify chip about new frame through SMSM bus.

		/* indicate End Of Packet and generate interrupt on descriptor

		 * done.

 Select channels for rx avail and xfer done interrupts... */

**************************************/

 Init descriptors for TX LOW channel */

**************************************/

 Write channel head to a NEXT register */

 Program DMA destination addr for TX LOW */

**************************************/

 Init descriptors for TX HIGH channel */

**************************************/

 Write channel head to a NEXT register */

 Program DMA destination addr for TX HIGH */

 Enable channel interrupts */

**************************************/

 Init descriptors for RX LOW channel */

**************************************/

 For RX we need to preallocated buffers */

 Write channel head to a NEXT register */

 Write DMA source address */

 Program preallocated destination address */

 Enable default control registers */

 Enable channel interrupts */

**************************************/

 Init descriptors for RX HIGH channel */

**************************************/

 For RX we need to prealocat buffers */

 Write chanel head to a NEXT register */

 Write DMA source address */

 Program preallocated destination address */

 Enable default control registers */

 Enable channel interrupts */

/*

 * Copyright (c) 2013 Eugene Krasnikov <k.eugene.e@gmail.com>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 CONFIG_WCN36XX_DEBUGFS */

/*

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * Copyright (c) 2013 Eugene Krasnikov <k.eugene.e@gmail.com>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 MCS 5 */

 IEEE80211_HT_STBC_PARAM_DUAL_CTS_PROT */

 IEEE80211_HT_OP_MODE_PROTECTION_20MHZ */

 max_amsdu_size: 1 : 3839 bytes, 0 : 7935 bytes (max) */

	/*

	 * In STA mode ieee80211_sta contains bssid and ieee80211_vif

	 * contains our mac address. In  AP mode we are bssid so vif

	 * contains bssid and ieee80211_sta contains mac.

 hal_buf must be protected with  mutex */

 Do not forget update general message len */

 Add load NV request message header */

 Add NV body itself */

 null terminate the strings, just in case */

 Notify BSSID with null DATA packet */

 Notify BSSID with null data packet */

 Remove the PNO version bit */

 convert orig to v1 format */

 STA */

 AP */

 STA */

 wcn->ssid is only valid in AP and IBSS mode */

 FIXME: set acbe, acbk, acvi and acvo */

 FIXME: set ext_set_sta_key_param */

 convert orig to v1 */

 Padding is irrelevant to mesh mode since tim_off is always 0. */

 TODO need to find out why + 6 is needed */

		/*

		 * The wcn36xx FW has a fixed size for the PVM in the TIM. If

		 * given the beacon template from mac80211 with a PVM shorter

		 * than the FW expectes it will overwrite the data after the

		 * TIM.

 TODO need to find out why this is needed? */

 mesh beacon don't need this, so push further down */

 Use bss key for wep (static) */

	/*

	 * When host is down ignore every second dtim

/* Notice: This function should be called after associated, or else it

 * will be invalid

 TODO: it also support ARP response type */

 Immediate BA because Delayed BA is not supported */

 Old FW does not have bss index */

			/* We could call ieee80211_find_sta too, but checking

			 * bss_conf is clearer.

 An empty list means all mc traffic will be received */

/*

 * Copyright (c) 2013 Eugene Krasnikov <k.eugene.e@gmail.com>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY

 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN

 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/* The wcn firmware expects channel values to matching

 Channel 1 */

 Channel 2 */

 Channel 3 */

 Channel 4 */

 Channel 5 */

 Channel 6 */

 Channel 7 */

 Channel 8 */

 Channel 9 */

 Channel 10 */

 Channel 11 */

 Channel 12 */

 Channel 13 */

 Channel 14 */

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 10 */

 11 */

 12 */

 13 */

 14 */

 15 */

 16 */

 17 */

 18 */

 19 */

 20 */

 21 */

 22 */

 23 */

 24 */

 25 */

 26 */

 27 */

 28 */

 29 */

 30 */

 31 */

 32 */

 33 */

 34 */

 35 */

 36 */

 37 */

 38 */

 39 */

 40 */

 41 */

 42 */

 43 */

 44 */

 45 */

 46 */

 47 */

 48 */

 49 */

 51 */

 52 */

 53 */

 54 */

 55 */

 56 */

 57 */

 58 */

 60 */

 61 */

 62 */

 SMD initialization */

 Allocate memory pools for Mgmt BD headers and Data BD headers */

 DMA channel initialization */

 ps allowed ? */

			/* If channel is the initial operating channel, we may

			 * want to receive/transmit regular data packets, then

			 * simply stop the scan session and exit PS mode.

			/* A scan is ongoing, do not change the operating

			 * channel, but start a scan session on the channel.

 FW handles MC filtering only when connected as STA */

 update multicast filtering parameters */

			/*

			 * Supplicant is sending key in the wrong order:

			 * Temporal Key (16 b) - TX MIC (8 b) - RX MIC (8 b)

			 * but HW expects it to be in the order as described in

			 * IEEE 802.11 spec (see chapter 11.7) like this:

			 * Temporal Key (16 b) - RX MIC (8 b) - TX MIC (8 b)

 Reconfigure bss with encrypt_type */

 do not remove key if disassociated */

 fallback to mac80211 software scan */

	/* Firmware scan offload is limited to 48 channels, fallback to

	 * software driven scanning otherwise.

		/* ieee80211_scan_completed will be called on FW scan

 ensure that any scan session is finished */

			/*

			 * Holding conf_mutex ensures mutal exclusion with

			 * wcn36xx_sta_remove() and as such ensures that sta

			 * won't be freed while we're operating on it. As such

			 * we do not need to hold the rcu_read_lock().

			/*

			 * config_sta must be called from  because this is the

			 * place where AID is available.

 this is required when using IEEE80211_HW_HAS_RATE_CONTROL */

	/*

	 * For STA mode HW will be configured on BSS_CHANGED_ASSOC because

	 * at this stage AID is not available yet.

	/* Disable IRQ, we don't want to handle any packet before mac80211 is

	 * resumed and ready to receive packets.

 Set TX IRQ */

 Set RX IRQ */

 Acquire SMSM tx enable handle */

 Acquire SMSM tx rings empty handle */

 Map the CCU memory */

 Map the DXE memory */

 External RF module */

/*

 * Copyright (c) 2006 Damien Bergamini <damien.bergamini@free.fr>

 * Copyright (c) 2006 Sam Leffler, Errno Consulting

 * Copyright (c) 2007 Christoph Hellwig <hch@lst.de>

 * Copyright (c) 2008-2009 Weongyo Jeong <weongyo@freebsd.org>

 * Copyright (c) 2012 Pontus Fuchs <pontus.fuchs@gmail.com>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/*

 * This driver is based on the uath driver written by Damien Bergamini for

 * OpenBSD, who did black-box analysis of the Windows binary driver to find

 * out how the hardware works.  It contains a lot magic numbers because of

 * that and only has minimal functionality.

/*

 * Various supported device vendors/products.

 * UB51: AR5005UG 802.11b/g, UB52: AR5005UX 802.11a/b/g

 convention is 0 =>'s one word */

 reply to a read command */

		/* This command returns a bogus id so it needs special

/*

 * Command submitted cb

 always bulk-out a multiple of 4 bytes */

 0 = single write */

 properly handle the case where len is zero (reset) */

 collect device capabilities */

 XXX */

 XXX */

 XXX? */

 reset Tx rings */

 set Tx rings WME properties */

 sync/async unlink faults aren't errors */

 Rx descriptor is located at the end, 32-bit aligned */

	/* Occasionally the TX queues stop responding. The only way to

	 * recover seems to be to reset the dongle.

 Don't waste time trying to flush if USB is disconnected */

/*

 * This function is called periodically (every second) when associated to

 * query device statistics.

	/*

	 * Send request for statistics asynchronously once a second. This

	 * seems to be important. Throughput is a lot better if this is done.

/*

 * Interface routines to the mac80211 stack.

 set MAC address */

 XXX honor net80211 state */

 XXX? check */

 enable Rx */

 XXX */

 XXX packed or not?  */

 XXX */

 XXX */

 turn link LED on */

	/* The filters seems strange. UATH_FILTER_RX_BCAST and

	 * UATH_FILTER_RX_MCAST does not result in those frames being RXed.

	 * The only way I have found to get [mb]cast frames seems to be

 inform target the host is available */

 retrieve MAC address */

 Get max rx size */

/*

 * This is copied from rtl818x, but we should probably move this

 * to common code as in OpenBSD.

/*

 * Load the MIPS R4000 microcode into the device.  Once the image is loaded,

 * the device will detach itself from the bus and reattach later with a new

 * product Id (a la ezusb).

 XXX(hch): handle short transfers */

 send firmware block meta-data */

 send firmware block data */

 wait for ack from firmware */

	/*

	 * Set the error to -ENXIO to make sure we continue probing for

	 * a driver.

	/*

	 * Load firmware if the device requires it.  This will return

	 * -ENXIO on success and we'll get called back afer the usb

	 * id changes to indicate that the firmware is present.

	/*

	 * We're now ready to send/receive firmware commands.

 Atheros / AR5523 */

 Atheros2 / AR5523_1 */

 Atheros2 / AR5523_2 */

 Atheros2 / AR5523_3 */

 Conceptronic / AR5523_1 */

 Conceptronic / AR5523_2 */

 Dlink / DWLAG132 */

 Dlink / DWLG132 */

 Dlink / DWLAG122 */

 D-Link / WUA-2340 rev A1 */

 Gigaset / AR5523 */

 Gigaset / SMCWUSBTG */

	AR5523_DEVICE_UG(0x129b, 0x160b),	/* Gigaset / USB stick 108

 Globalsun / AR5523_1 */

 Globalsun / AR5523_2 */

 Globalsun / AR5523_3 */

 Netgear / WG111U */

 Netgear / WG111T */

 Netgear / WPN111 */

	AR5523_DEVICE_UG(0x083a, 0x4506),	/* SMC / EZ Connect

 Umedia / AR5523_1, TEW444UBEU*/

 Umedia / AR5523_2 */

 Wistronneweb / AR5523_1 */

 Wistronneweb / AR5523_2 */

 Zcom / AR5523 */

 Netgear3 / WG111T (2) */

 Netgear / WPN111 */

 Netgear / WPN111 */

/*

 * Copyright (c) 2002-2005 Sam Leffler, Errno Consulting

 * Copyright (c) 2004-2005 Atheros Communications, Inc.

 * Copyright (c) 2007 Jiri Slaby <jirislaby@gmail.com>

 * Copyright (c) 2009 Bob Copeland <me@bobcopeland.com>

 *

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer,

 *    without modification.

 * 2. Redistributions in binary form must reproduce at minimum a disclaimer

 *    similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any

 *    redistribution must be conditioned upon including a substantially

 *    similar Disclaimer requirement for further binary redistribution.

 * 3. Neither the names of the above-listed copyright holders nor the names

 *    of any contributors may be used to endorse or promote products derived

 *    from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL") version 2 as published by the Free

 * Software Foundation.

 *

 * NO WARRANTY

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY

 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,

 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER

 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 * THE POSSIBILITY OF SUCH DAMAGES.

 *

 Devices we match on for LED config info (typically laptops) */

 AR5211 */

 HP Compaq nc6xx, nc4000, nx6000 */

 Acer Aspire One A150 (maximlevitsky@gmail.com) */

 Acer Aspire One AO531h AO751h (keng-yu.lin@canonical.com) */

 Acer Ferrari 5000 (russ.dill@gmail.com) */

 E-machines E510 (tuliom@gmail.com) */

 BenQ Joybook R55v (nowymarluk@wp.pl) */

 Acer Extensa 5620z (nekoreeve@gmail.com) */

 Fukato Datacask Jupiter 1014a (mrb74@gmx.at) */

 IBM ThinkPad AR5BXB6 (legovini@spiro.fisica.unipd.it) */

 HP Compaq CQ60-206US (ddreggors@jumptv.com) */

 HP Compaq C700 (nitrousnrg@gmail.com) */

 LiteOn AR5BXB63 (magooz@salug.it) */

 IBM-specific AR5212 (all others) */

 Dell Vostro A860 (shahar@shahar-or.co.il) */

/*

 * Initial register settings functions

 *

 * Copyright (c) 2004-2007 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2009 Nick Kossifidis <mickflemm@gmail.com>

 * Copyright (c) 2007-2008 Jiri Slaby <jirislaby@gmail.com>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/**

 * struct ath5k_ini - Mode-independent initial register writes

 * @ini_register: Register address

 * @ini_value: Default value

 * @ini_mode: 0 to write 1 to read (and clear)

 Default */

/**

 * struct ath5k_ini_mode - Mode specific initial register values

 * @mode_register: Register address

 * @mode_value: Set of values for each enum ath5k_driver_mode

 Initial register settings for AR5210 */

 PCU and MAC registers */

 PHY registers */

 0x987c */

 0x9900 */

 BB gain table (64bytes) */

 5110 RF gain table (64btes) */

 PHY activation */

 Initial register settings for AR5211 */

 PHY registers */

 0x9868 */

 0x9934 */

 0x9938 */

 0x993c */

	/* Initial Power table (32bytes)

	 * common on all cards/modes.

	 * Note: Table is rewritten during

	 * txpower setup later using calibration

/* Initial mode-specific settings for AR5211

 * 5211 supports OFDM-only g (draft g) but we

	A          B           G       */

 Initial register settings for AR5212 and newer chips */

 Tx filter table 0 (32 entries) */

 DCU 0 */

 DCU 1 */

 DCU 2 */

 DCU 3 */

 DCU 4 */

 DCU 5 */

 DCU 6 */

 DCU 7 */

 Tx filter table 1 (16 entries) */

 Initial rate duration table (32 entries )*/

	/* Rate -> db table

 Db -> Rate table */

	/* PHY registers (Common settings

{ AR5K_PHY(71), 0x0000092a },*/ 
{ AR5K_PHY(86), 0x000000ff },*/

{ AR5K_PHY(644), 0x0080a333 },*/ 
{ AR5K_PHY(645), 0x00206c10 },*/ 
 { AR5K_PHY(647), 0x1483800a }, */

 { AR5K_PHY(648), 0x01831061 }, */ 
{ AR5K_PHY(650), 0x000001b5 },*/

{ AR5K_PHY(655), 0x13c889af },*/

 Initial mode-specific settings for AR5212 (Written before ar5212_ini) */

	A/XR          B           G       */

/* Initial mode-specific settings for AR5212 + RF5111

	A/XR          B           G       */

 Common for all modes */

/* Initial mode-specific settings for AR5212 + RF5112

	A/XR          B           G       */

/* Initial mode-specific settings for RF5413/5414

	A/XR          B           G       */

/* Initial mode-specific settings for RF2413/2414

 XXX: a mode ? */

	A/XR          B           G       */

/* Initial mode-specific settings for RF2425

 XXX: a mode ? */

	A/XR          B           G       */

/*

 * Initial BaseBand Gain settings for RF5111/5112 (AR5210 comes with

 * RF5110 only so initial BB Gain settings are included in AR5K_AR5210_INI)

 RF5111 Initial BaseBand Gain settings */

 RF5112 Initial BaseBand Gain settings (Same for RF5413/5414+) */

/**

 * ath5k_hw_ini_registers() - Write initial register dump common for all modes

 * @ah: The &struct ath5k_hw

 * @size: Dump size

 * @ini_regs: The array of &struct ath5k_ini

 * @skip_pcu: Skip PCU registers

 Write initial registers */

		/* Skip PCU registers if

 Cleared on read */

/**

 * ath5k_hw_ini_mode_registers() - Write initial mode-specific register dump

 * @ah: The &struct ath5k_hw

 * @size: Dump size

 * @ini_mode: The array of &struct ath5k_ini_mode

 * @mode: One of enum ath5k_driver_mode

/**

 * ath5k_hw_write_initvals() - Write initial chip-specific register dump

 * @ah: The &struct ath5k_hw

 * @mode: One of enum ath5k_driver_mode

 * @skip_pcu: Skip PCU registers

 *

 * Write initial chip-specific register dump, to get the chipset on a

 * clean and ready-to-work state after warm reset.

	/*

	 * Write initial register settings

 For AR5212 and compatible */

 First set of mode-specific settings */

		/*

		 * Write initial settings common for all modes

 Second set of mode-specific settings */

 Baseband gain table */

 Override settings from rf2413_ini_common_end */

 Override settings from rf2413_ini_mode_end */

 Override settings from rf2413_ini_common_end */

 For AR5211 */

 AR5K_MODE_11B */

 Mode-specific settings */

		/*

		 * Write initial settings common for all modes

 AR5211 only comes with 5111 */

 Baseband gain table */

 For AR5210 (for mode settings check out ath5k_hw_reset_tx_queue) */

/*

 * Copyright (c) 2004-2008 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2008 Nick Kossifidis <mickflemm@gmail.com>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/****************\

  GPIO Functions

/**

 * DOC: GPIO/LED functions

 *

 * Here we control the 6 bidirectional GPIO pins provided by the hw.

 * We can set a GPIO pin to be an input or an output pin on GPIO control

 * register and then read or set its status from GPIO data input/output

 * registers.

 *

 * We also control the two LED pins provided by the hw, LED_0 is our

 * "power" LED and LED_1 is our "network activity" LED but many scenarios

 * are available from hw. Vendors might also provide LEDs connected to the

 * GPIO pins, we handle them through the LED subsystem on led.c

/**

 * ath5k_hw_set_ledstate() - Set led state

 * @ah: The &struct ath5k_hw

 * @state: One of AR5K_LED_*

 *

 * Used to set the LED blinking state. This only

 * works for the LED connected to the LED_0, LED_1 pins,

 * not the GPIO based.

5210 has different led mode handling*/

Reset led status*/

	/*

	 * Some blinking values, define at your wish

Write new status to the register*/

/**

 * ath5k_hw_set_gpio_input() - Set GPIO inputs

 * @ah: The &struct ath5k_hw

 * @gpio: GPIO pin to set as input

/**

 * ath5k_hw_set_gpio_output() - Set GPIO outputs

 * @ah: The &struct ath5k_hw

 * @gpio: The GPIO pin to set as output

/**

 * ath5k_hw_get_gpio() - Get GPIO state

 * @ah: The &struct ath5k_hw

 * @gpio: The GPIO pin to read

 GPIO input magic */

/**

 * ath5k_hw_set_gpio() - Set GPIO state

 * @ah: The &struct ath5k_hw

 * @gpio: The GPIO pin to set

 * @val: Value to set (boolean)

 GPIO output magic */

/**

 * ath5k_hw_set_gpio_intr() - Initialize the GPIO interrupt (RFKill switch)

 * @ah: The &struct ath5k_hw

 * @gpio: The GPIO pin to use

 * @interrupt_level: True to generate interrupt on active pin (high)

 *

 * This function is used to set up the GPIO interrupt for the hw RFKill switch.

 * That switch is connected to a GPIO pin and it's number is stored on EEPROM.

 * It can either open or close the circuit to indicate that we should disable

 * RF/Wireless to save power (we also get that from EEPROM).

	/*

	 * Set the GPIO interrupt

 Enable GPIO interrupts */

/*

 * Copyright (c) 2004-2008 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2008 Nick Kossifidis <mickflemm@gmail.com>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/*************************************\

* DMA and interrupt masking functions *

/**

 * DOC: DMA and interrupt masking functions

 *

 * Here we setup descriptor pointers (rxdp/txdp) start/stop dma engine and

 * handle queue setup for 5210 chipset (rest are handled on qcu.c).

 * Also we setup interrupt mask register (IMR) and read the various interrupt

 * status registers (ISR).

/*********\

* Receive *

/**

 * ath5k_hw_start_rx_dma() - Start DMA receive

 * @ah:	The &struct ath5k_hw

/**

 * ath5k_hw_stop_rx_dma() - Stop DMA receive

 * @ah:	The &struct ath5k_hw

	/*

	 * It may take some time to disable the DMA receive unit

/**

 * ath5k_hw_get_rxdp() - Get RX Descriptor's address

 * @ah: The &struct ath5k_hw

/**

 * ath5k_hw_set_rxdp() - Set RX Descriptor's address

 * @ah: The &struct ath5k_hw

 * @phys_addr: RX descriptor address

 *

 * Returns -EIO if rx is active

/**********\

* Transmit *

/**

 * ath5k_hw_start_tx_dma() - Start DMA transmit for a specific queue

 * @ah: The &struct ath5k_hw

 * @queue: The hw queue number

 *

 * Start DMA transmit for a specific queue and since 5210 doesn't have

 * QCU/DCU, set up queue parameters for 5210 here based on queue type (one

 * queue for normal data and one queue for beacons). For queue setup

 * on newer chips check out qcu.c. Returns -EINVAL if queue number is out

 * of range or if queue is already disabled.

 *

 * NOTE: Must be called after setting up tx control descriptor for that

 * queue (see below).

 Return if queue is declared inactive */

		/*

		 * Set the queue by type on 5210

 Start queue */

 Return if queue is disabled */

 Start queue */

/**

 * ath5k_hw_stop_tx_dma() - Stop DMA transmit on a specific queue

 * @ah: The &struct ath5k_hw

 * @queue: The hw queue number

 *

 * Stop DMA transmit on a specific hw queue and drain queue so we don't

 * have any pending frames. Returns -EBUSY if we still have pending frames,

 * -EINVAL if queue number is out of range or inactive.

 Return if queue is declared inactive */

		/*

		 * Set by queue type

 XXX Fix me... */

 Stop queue */

		/*

		 * Enable DCU early termination to quickly

		 * flush any pending frames from QCU

		/*

		 * Schedule TX disable and wait until queue is empty

 Wait for queue to stop */

 Check for pending frames */

		/* For 2413+ order PCU to drop packets using

 Set periodicity and duration */

 Enable quiet period for current TSF */

 Force channel idle high */

 Wait a while and disable mechanism */

 Re-check for pending frames */

		/*

		 * Disable DCU early termination

 Clear register */

 TODO: Check for success on 5210 else return error */

/**

 * ath5k_hw_stop_beacon_queue() - Stop beacon queue

 * @ah: The &struct ath5k_hw

 * @queue: The queue number

 *

 * Returns -EIO if queue didn't stop

/**

 * ath5k_hw_get_txdp() - Get TX Descriptor's address for a specific queue

 * @ah: The &struct ath5k_hw

 * @queue: The hw queue number

 *

 * Get TX descriptor's address for a specific queue. For 5210 we ignore

 * the queue number and use tx queue type since we only have 2 queues.

 * We use TXDP0 for normal data queue and TXDP1 for beacon queue.

 * For newer chips with QCU/DCU we just read the corresponding TXDP register.

 *

 * XXX: Is TXDP read and clear ?

	/*

	 * Get the transmit queue descriptor pointer from the selected queue

5210 doesn't have QCU*/

/**

 * ath5k_hw_set_txdp() - Set TX Descriptor's address for a specific queue

 * @ah: The &struct ath5k_hw

 * @queue: The hw queue number

 * @phys_addr: The physical address

 *

 * Set TX descriptor's address for a specific queue. For 5210 we ignore

 * the queue number and we use tx queue type since we only have 2 queues

 * so as above we use TXDP0 for normal data queue and TXDP1 for beacon queue.

 * For newer chips with QCU/DCU we just set the corresponding TXDP register.

 * Returns -EINVAL if queue type is invalid for 5210 and -EIO if queue is still

 * active.

	/*

	 * Set the transmit queue descriptor pointer register by type

	 * on 5210

		/*

		 * Set the transmit queue descriptor pointer for

		 * the selected queue on QCU for 5211+

		 * (this won't work if the queue is still active)

 Set descriptor pointer */

/**

 * ath5k_hw_update_tx_triglevel() - Update tx trigger level

 * @ah: The &struct ath5k_hw

 * @increase: Flag to force increase of trigger level

 *

 * This function increases/decreases the tx trigger level for the tx fifo

 * buffer (aka FIFO threshold) that is used to indicate when PCU flushes

 * the buffer and transmits its data. Lowering this results sending small

 * frames more quickly but can lead to tx underruns, raising it a lot can

 * result other problems. Right now we start with the lowest possible

 * (64Bytes) and if we get tx underrun we increase it using the increase

 * flag. Returns -EIO if we have reached maximum/minimum.

 *

 * XXX: Link this with tx DMA size ?

 * XXX2: Use it to save interrupts ?

	/*

	 * Disable interrupts by setting the mask

	/*

	 * Update trigger level on success

	/*

	 * Restore interrupt mask

/*******************\

* Interrupt masking *

/**

 * ath5k_hw_is_intr_pending() - Check if we have pending interrupts

 * @ah: The &struct ath5k_hw

 *

 * Check if we have pending interrupts to process. Returns 1 if we

 * have pending interrupts and 0 if we haven't.

/**

 * ath5k_hw_get_isr() - Get interrupt status

 * @ah: The @struct ath5k_hw

 * @interrupt_mask: Driver's interrupt mask used to filter out

 * interrupts in sw.

 *

 * This function is used inside our interrupt handler to determine the reason

 * for the interrupt by reading Primary Interrupt Status Register. Returns an

 * abstract interrupt status mask which is mostly ISR with some uncommon bits

 * being mapped on some standard non hw-specific positions

 * (check out &ath5k_int).

 *

 * NOTE: We do write-to-clear, so the active PISR/SISR bits at the time this

 * function gets called are cleared on return.

	/*

	 * Read interrupt status from Primary Interrupt

	 * Register.

	 *

	 * Note: PISR/SISR Not available on 5210

		/*

		 * Filter out the non-common bits from the interrupt

		 * status.

 Hanlde INT_FATAL */

		/*

		 * XXX: BMISS interrupts may occur after association.

		 * I found this on 5210 code but it needs testing. If this is

		 * true we should disable them before assoc and re-enable them

		 * after a successful assoc + some jiffies.

			interrupt_mask &= ~AR5K_INT_BMISS;

 Read PISR and SISRs... */

		/*

		 * PISR holds the logical OR of interrupt bits

		 * from SISR registers:

		 *

		 * TXOK and TXDESC  -> Logical OR of TXOK and TXDESC

		 *			per-queue bits on SISR0

		 *

		 * TXERR and TXEOL -> Logical OR of TXERR and TXEOL

		 *			per-queue bits on SISR1

		 *

		 * TXURN -> Logical OR of TXURN per-queue bits on SISR2

		 *

		 * HIUERR -> Logical OR of MCABT, SSERR and DPER bits on SISR2

		 *

		 * BCNMISC -> Logical OR of TIM, CAB_END, DTIM_SYNC

		 *		BCN_TIMEOUT, CAB_TIMEOUT and DTIM

		 *		(and TSFOOR ?) bits on SISR2

		 *

		 * QCBRORN and QCBRURN -> Logical OR of QCBRORN and

		 *			QCBRURN per-queue bits on SISR3

		 * QTRIG -> Logical OR of QTRIG per-queue bits on SISR4

		 *

		 * If we clean these bits on PISR we 'll also clear all

		 * related bits from SISRs, e.g. if we write the TXOK bit on

		 * PISR we 'll clean all TXOK bits from SISR0 so if a new TXOK

		 * interrupt got fired for another queue while we were reading

		 * the interrupt registers and we write back the TXOK bit on

		 * PISR we 'll lose it. So make sure that we don't write back

		 * on PISR any bits that come from SISRs. Clearing them from

		 * SISRs will also clear PISR so no need to worry here.

		/* XXX: There seems to be  an issue on some cards

		 *	with tx interrupt flags not being updated

		 *	on PISR despite that all Tx interrupt bits

		 * 	are cleared on SISRs. Since we handle all

		 *	Tx queues all together it shouldn't be an

		 *	issue if we clear Tx interrupt flags also

		 * 	on PISR to avoid that.

		/*

		 * Write to clear them...

		 * Note: This means that each bit we write back

		 * to the registers will get cleared, leaving the

		 * rest unaffected. So this won't affect new interrupts

		 * we didn't catch while reading/processing, we 'll get

		 * them next time get_isr gets called.

 Flush previous write */

		/*

		 * Filter out the non-common bits from the interrupt

		 * status.

		/* We treat TXOK,TXDESC, TXERR and TXEOL

		 * the same way (schedule the tx tasklet)

		/* Currently this is not much useful since we treat

		 * all queues the same way if we get a TXURN (update

 Misc Beacon related interrupts */

 For AR5211 */

 For AR5212+ */

 Below interrupts are unlikely to happen */

		/* HIU = Host Interface Unit (PCI etc)

Beacon Not Ready*/

 A queue got CBR overrun */

 A queue got CBR underrun */

 A queue got triggered */

	/*

	 * In case we didn't handle anything,

	 * print the register value.

/**

 * ath5k_hw_set_imr() - Set interrupt mask

 * @ah: The &struct ath5k_hw

 * @new_mask: The new interrupt mask to be set

 *

 * Set the interrupt mask in hw to save interrupts. We do that by mapping

 * ath5k_int bits to hw-specific bits to remove abstraction and writing

 * Interrupt Mask Register.

	/*

	 * Disable card interrupts to prevent any race conditions

	 * (they will be re-enabled afterwards if AR5K_INT GLOBAL

	 * is set again on the new mask).

	/*

	 * Add additional, chipset-dependent interrupt mask flags

	 * and write them to the IMR (interrupt mask register).

 Preserve per queue TXURN interrupt mask */

 Fatal interrupt abstraction for 5211+ */

 Misc beacon related interrupts */

Beacon Not Ready*/

		/* Note: Per queue interrupt masks

 Fatal interrupt abstraction for 5210 */

 Only common interrupts left for 5210 (no SIMRs) */

	/* If RXNOFRM interrupt is masked disable it

 Store new interrupt mask */

 ..re-enable interrupts if AR5K_INT_GLOBAL is set */

/********************\

 Init/Stop functions

/**

 * ath5k_hw_dma_init() - Initialize DMA unit

 * @ah: The &struct ath5k_hw

 *

 * Set DMA size and pre-enable interrupts

 * (driver handles tx/rx buffer setup and

 * dma start/stop)

 *

 * XXX: Save/restore RXDP/TXDP registers ?

	/*

	 * Set Rx/Tx DMA Configuration

	 *

	 * Set standard DMA size (128). Note that

	 * a DMA size of 512 causes rx overruns and tx errors

	 * on pci-e cards (tested on 5424 but since rx overruns

	 * also occur on 5416/5418 with madwifi we set 128

	 * for all PCI-E cards to be safe).

	 *

	 * XXX: need to check 5210 for this

	 * TODO: Check out tx trigger level, it's always 64 on dumps but I

	 * guess we can tweak it and see how it goes ;-)

 Pre-enable interrupts on 5211/5212*/

/**

 * ath5k_hw_dma_stop() - stop DMA unit

 * @ah: The &struct ath5k_hw

 *

 * Stop tx/rx DMA and interrupts. Returns

 * -EBUSY if tx or rx dma failed to stop.

 *

 * XXX: Sometimes DMA unit hangs and we have

 * stuck frames on tx queues, only a reset

 * can fix that.

 Disable interrupts */

 Stop rx dma */

	/* Clear any pending interrupts

 PISR/SISR Not available on 5210 */

 -EINVAL -> queue inactive */

/*

 * Copyright (c) 2008-2009 Atheros Communications Inc.

 * Copyright (c) 2009 Gabor Juhos <juhosg@openwrt.org>

 * Copyright (c) 2009 Imre Kaloz <kaloz@openwrt.org>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 return bus cachesize in 4B word units */

Initialization*/

 Enable WMAC AHB arbitration */

 Enable global WMAC swapping */

 Enable WMAC DMA access (assuming 5312 or 231x*/

 TODO: check other platforms */

		/*

		 * On a dual-band AR5312, the multiband radio is only

		 * used as pass-through. Disable 2 GHz support in the

		 * driver for it

 Disable WMAC AHB arbitration */

Stop DMA access */

/*-

 * Copyright (c) 2002-2005 Sam Leffler, Errno Consulting

 * Copyright (c) 2004-2005 Atheros Communications, Inc.

 * Copyright (c) 2006 Devicescape Software, Inc.

 * Copyright (c) 2007 Jiri Slaby <jirislaby@gmail.com>

 * Copyright (c) 2007 Luis R. Rodriguez <mcgrof@winlab.rutgers.edu>

 *

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer,

 *    without modification.

 * 2. Redistributions in binary form must reproduce at minimum a disclaimer

 *    similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any

 *    redistribution must be conditioned upon including a substantially

 *    similar Disclaimer requirement for further binary redistribution.

 * 3. Neither the names of the above-listed copyright holders nor the names

 *    of any contributors may be used to endorse or promote products derived

 *    from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL") version 2 as published by the Free

 * Software Foundation.

 *

 * NO WARRANTY

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY

 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,

 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER

 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 * THE POSSIBILITY OF SUCH DAMAGES.

 *

 Module info */

 Known SREVs */

/***********************\

* Driver Initialization *

/********************\

* Channel/mode setup *

/*

 * Returns true for the channel numbers used.

 UNII 1,2 */

 midband */

 UNII-3 */

 802.11j 5.030-5.080 GHz (20MHz) */

 802.11j 4.9GHz (20MHz) */

 1..220, but 2GHz frequencies are filtered by check_channel */

 mapping failed - not a standard channel */

 Write channel info, needed for ath5k_channel_ok() */

 Check if channel is supported by the chipset */

 2GHz band */

 G mode */

 B mode */

		/* 5211 only supports B rates and uses 4bit rate codes

		 * (e.g normally we have 0x1B for 1M, but on 5211 we have 0x0B)

		 * fix them up here:

 5GHz band, A mode */

/*

 * Set/change channels. We always reset the chip.

 * To accomplish this we must first cleanup any pending DMA,

 * then restart stuff after a la  ath5k_init.

 *

 * Called with ah->lock.

	/*

	 * To switch channels clear any pending DMA operations;

	 * wait long enough for the RX fifo to drain, reset the

	 * hardware at the new frequency, and then re-enable

	 * the relevant bits of the h/w.

	/* Calculate combined mode - when APs are active, operate in AP mode.

	 * Otherwise use the mode of the new interface. This can currently

	 * only deal with combinations of APs and STAs. Only one ad-hoc

	 * interfaces is allowed.

	/*

	 * Use the hardware MAC address as reference, the hardware uses it

	 * together with the BSSID mask when matching addresses.

 Get list of all active MAC addresses */

 Nothing active, default to station mode */

 Set up RX Filter */

		/* If you have multiple STA interfaces connected to

		 * different APs, ARPs are not received (most of the time?)

		 * Enabling PROMISC appears to fix that problem.

 return base rate on errors */

/***************\

* Buffers setup *

	/*

	 * Allocate buffer with headroom_needed space for the

	 * fake physical layer header at the start.

	/*

	 * Setup descriptors.  For receive we always terminate

	 * the descriptor list with a self-linked entry so we'll

	 * not get overrun under high load (as can happen with a

	 * 5212 when ANI processing enables PHY error frames).

	 *

	 * To ensure the last descriptor is self-linked we create

	 * each descriptor as self-linked and add it to the end.  As

	 * each additional descriptor is added the previous self-linked

	 * entry is "fixed" naturally.  This should be safe even

	 * if DMA is happening.  When processing RX interrupts we

	 * never remove/process the last, self-linked, entry on the

	 * descriptor list.  This ensures the hardware always has

	 * someplace to write a new frame.

 link to self */

	/*

	* convert a ieee80211_tx_rate RC-table entry to

	* the respective ieee80211_rate struct

 XXX endianness */

	/* FIXME: If we are in g mode and rate is a CCK rate

	 * subtract ah->ah_txpower.txp_cck_ofdm_pwr_delta

 Set up MRR descriptor */

 is this first packet? */

 no, so only link it */

/*******************\

* Descriptors setup *

 allocate descriptors */

 beacon buffers */

 Free memory associated with all descriptors */

/**************\

* Queues setup *

		/* XXX: default values not correct for B and XR channels,

	/*

	 * Enable interrupts only for EOL and DESC conditions.

	 * We mark tx descriptors to receive a DESC interrupt

	 * when a tx queue gets deep; otherwise we wait for the

	 * EOL to reap descriptors.  Note that this is done to

	 * reduce interrupt load and this only defers reaping

	 * descriptors, never transmitting frames.  Aside from

	 * reducing interrupts this also permits more concurrency.

	 * The only potential downside is if the tx queue backs

	 * up in which case the top half of the kernel may backup

	 * due to a lack of tx descriptors.

		/*

		 * NB: don't print a message, this happens

		 * normally on parts with too few tx queues

		/* XXX: default values not correct for B and XR channels,

 NB: for dynamic turbo, don't enable any other interrupts */

		/*

		 * Always burst out beacon and CAB traffic

		 * (aifs = cwmin = cwmax = 0)

		/*

		 * Adhoc mode; backoff between 0 and (2 * cw_min).

 push to h/w */

 reconfigure cabq with ready time to 80% of beacon_interval */

/**

 * ath5k_drain_tx_buffs - Empty tx buffers

 *

 * @ah: The &struct ath5k_hw

 *

 * Empty tx buffers from all queues in preparation

 * of a reset or during shutdown.

 *

 * NB:	this assumes output has been stopped and

 *	we do not need to block ath5k_tx_tasklet

/*************\

* RX Handling *

/*

 * Enable the receive h/w following a reset.

 enable recv descriptors */

 set filters, etc. */

 re-enable PCU/DMA engine */

/*

 * Disable the receive logic on PCU (DRU)

 * In preparation for a shutdown.

 *

 * Note: Doesn't stop rx DMA, ath5k_hw_dma_stop

 * does.

 clear recv filter */

 disable PCU */

	/* Apparently when a default key is used to decrypt the packet

	   the hw does not set the index used to decrypt.  In such cases

		/*

		 * Received an IBSS beacon with the same BSSID. Hardware *must*

		 * have updated the local TSF. We have to work around various

		 * hardware bugs, though...

		/*

		 * Sometimes the HW will give us a wrong tstamp in the rx

		 * status, causing the timestamp extension to go wrong.

		 * (This seems to happen especially with beacon frames bigger

		 * than 78 byte (incl. FCS))

		 * But we know that the receive timestamp must be later than the

		 * timestamp of the beacon since HW must have synced to that.

		 *

		 * NOTE: here we assume mactime to be after the frame was

		 * received, not like mac80211 which defines it at the start.

		/*

		 * Local TSF might have moved higher than our beacon timers,

		 * in that case we have to update them to continue sending

		 * beacons. This also takes care of synchronizing beacon sending

		 * times with other stations.

		/* Check if the beacon timers are still correct, because a TSF

		 * update might have created a window between them - for a

/*

 * Compute padding position. skb must contain an IEEE 802.11 frame

/*

 * This function expects an 802.11 frame and returns the number of

 * bytes added, or -1 if we don't have enough header room.

/*

 * The MAC header is padded to have 32-bit boundary if the

 * packet payload is non-zero. The general calculation for

 * padsize would take into account odd header lengths:

 * padsize = 4 - (hdrlen & 3); however, since only

 * even-length headers are used, padding can only be 0 or 2

 * bytes and we can optimize this a bit.  We must not try to

 * remove padding from short control frames that do not have a

 * payload.

 *

 * This function expects an 802.11 frame and returns the number of

 * bytes removed.

	/*

	 * always extend the mac timestamp, since this information is

	 * also needed for proper IBSS merging.

	 *

	 * XXX: it might be too late to do it here, since rs_tstamp is

	 * 15bit only. that means TSF extension has to be done within

	 * 32768usec (about 32ms). it might be necessary to move this to

	 * the interrupt handler, like it is done in madwifi.

 invalid */

 check beacons in IBSS mode */

/** ath5k_frame_receive_ok() - Do we want to receive this frame or not?

 *

 * Check if we want to further process this frame or not. Also update

 * statistics. Return true if we want this frame, false if not.

			/*

			 * Treat packets that underwent a CCK or OFDM reset as having a bad CRC.

			 * These restarts happen when the radio resynchronizes to a stronger frame

			 * while receiving a weaker frame. Here we receive the prefix of the weak

			 * frame. Since these are incomplete packets, mark their CRC as invalid.

			/*

			 * Decrypt error.  If the error occurred

			 * because there was no hardware key, then

			 * let the frame through so the upper layers

			 * can process it.  This is necessary for 5210

			 * parts which have no way to setup a ``clear''

			 * key cache entry.

			 *

			 * XXX do key cache faulting

		/*

		 * Reject any frames with non-crypto errors, and take into account the

		 * current FIF_* filters.

 bail if HW is still using self-linked descriptor */

			/*

			 * If we can't replace bf->skb with a new skb under

			 * memory pressure, just skip this packet

/*************\

* TX Handling *

	/*

	 * The hardware expects the header padded to 4 byte boundaries.

	 * If this is not the case, we add the padding after the header.

 count the successful attempt as well */

	/*

	* Remove MAC header padding before giving the frame

	* back to mac80211.

 invalid */

 skb might already have been processed last time. */

		/*

		 * It's possible that the hardware can say the buffer is

		 * completed when it hasn't yet loaded the ds_link from

		 * host memory and moved on.

		 * Always keep the last descriptor to avoid HW races...

/*****************\

* Beacon handling *

/*

 * Setup the beacon frame for transmit.

 self-linked */

	/*

	 * If we use multiple antennas on AP and use

	 * the Sectored AP scenario, switch antenna every

	 * 4 beacons to make sure everybody hears our AP.

	 * When a client tries to associate, hw will keep

	 * track of the tx antenna to be used for this client

	 * automatically, based on ACKed packets.

	 *

	 * Note: AP still listens and transmits RTS on the

	 * default antenna which is supposed to be an omni.

	 *

	 * Note2: On sectored scenarios it's possible to have

	 * multiple antennas (1 omni -- the default -- and 14

	 * sectors), so if we choose to actually support this

	 * mode, we need to allow the user to set how many antennas

	 * we have and tweak the code below to send beacons

	 * on all of them.

	/* FIXME: If we are in g mode and rate is a CCK rate

	 * subtract ah->ah_txpower.txp_cck_ofdm_pwr_delta

/*

 * Updates the beacon that is sent by ath5k_beacon_send.  For adhoc,

 * this is called only once at config_bss time, for AP we do it every

 * SWBA interrupt so that the TIM will reflect buffered frames.

 *

 * Called with the beacon lock.

/*

 * Transmit a beacon frame at SWBA.  Dynamic updates to the

 * frame contents are done as needed and the slot time is

 * also adjusted based on current state.

 *

 * This is called from software irq context (beacontq tasklets)

 * or user context from ath5k_beacon_config.

	/*

	 * Check if the previous beacon has gone out.  If

	 * not, don't don't try to post another: skip this

	 * period and wait for the next.  Missed beacons

	 * indicate a problem and should not occur.  If we

	 * miss too many consecutive beacons reset the device.

 NB: 10 is a guess */

 only one interface */

	/*

	 * Stop any current dma and put the new frame on the queue.

	 * This should never fail since we check above that no frames

	 * are still pending on the queue.

 NB: hw still stops DMA, so proceed */

 refresh the beacon for AP or MESH mode */

/**

 * ath5k_beacon_update_timers - update beacon timers

 *

 * @ah: struct ath5k_hw pointer we are operating on

 * @bc_tsf: the timestamp of the beacon. 0 to reset the TSF. -1 to perform a

 *          beacon timer update based on the current HW TSF.

 *

 * Calculate the next target beacon transmit time (TBTT) based on the timestamp

 * of a received beacon or the current local hardware TSF and write it to the

 * beacon timer registers.

 *

 * This is called in a variety of situations, e.g. when a beacon is received,

 * when a TSF update has been detected, but also when an new IBSS is created or

 * when we otherwise know we have to update the timers, but we keep it in this

 * function to have it all together in one place.

 staggered multi-bss beacons */

 beacon TSF converted to TU */

 current TSF converted to TU */

	/* We use FUDGE to make sure the next TBTT is ahead of the current TU.

	 * Since we later subtract AR5K_TUNE_SW_BEACON_RESP (10) in the timer

		/*

		 * no beacons received, called internally.

		 * just need to refresh timers based on HW TSF.

		/*

		 * no beacon received, probably called by ath5k_reset_tsf().

		 * reset TSF to start with 0.

		/*

		 * beacon received, SW merge happened but HW TSF not yet updated.

		 * not possible to reconfigure timers yet, but next time we

		 * receive a beacon with the same BSSID, the hardware will

		 * automatically update the TSF and then we need to reconfigure

		 * the timers.

		/*

		 * most important case for beacon synchronization between STA.

		 *

		 * beacon received and HW TSF has been already updated by HW.

		 * update next TBTT based on the TSF of the beacon, but make

		 * sure it is ahead of our local TSF timer.

	/*

	 * debugging output last in order to preserve the time critical aspect

	 * of this function

/**

 * ath5k_beacon_config - Configure the beacon queues and interrupts

 *

 * @ah: struct ath5k_hw pointer we are operating on

 *

 * In IBSS mode we use a self-linked tx descriptor if possible. We enable SWBA

 * interrupts to detect TSF updates only.

		/*

		 * In IBSS mode we use a self-linked tx descriptor and let the

		 * hardware send the beacons automatically. We have to load it

		 * only once here.

		 * We use the SWBA interrupt only to keep track of the beacon

		 * timers in order to detect automatic TSF updates.

	/*

	 * Software beacon alert--time to send a beacon.

	 *

	 * In IBSS mode we use this interrupt just to

	 * keep track of the next TBTT (target beacon

	 * transmission time) in order to detect whether

	 * automatic TSF updates happened.

 XXX: only if VEOL supported */

/********************\

* Interrupt handling *

 Run ANI only when calibration is not active */

		/* Run calibration only when another calibration

		 * is not running.

		 *

		 * Note: This is for both full/short calibration,

		 * if it's time for a full one, ath5k_calibrate_work will deal

	/* we could use SWI to generate enough interrupts to meet our

	 * calibration interval requirements, if necessary:

	/*

	 * If hw is not ready (or detached) and we get an

	 * interrupt, or if we have no interrupts pending

	 * (that means it's not for us) skip it.

	 *

	 * NOTE: Group 0/1 PCI interface registers are not

	 * supported on WiSOCs, so we can't check for pending

	 * interrupts (ISR belongs to another register group

	 * so we are ok).

* Main loop **/

 NB: clears IRQ too */

		/*

		 * Fatal hw error -> Log and reset

		 *

		 * Fatal errors are unrecoverable so we have to

		 * reset the card. These errors include bus and

		 * dma errors.

		/*

		 * RX Overrun -> Count and reset if needed

		 *

		 * Receive buffers are full. Either the bus is busy or

		 * the CPU is not fast enough to process all received

		 * frames.

			/*

			 * Older chipsets need a reset to come out of this

			 * condition, but we treat it as RX for newer chips.

			 * We don't know exactly which versions need a reset

			 * this guess is copied from the HAL.

 Software Beacon Alert -> Schedule beacon tasklet */

			/*

			 * No more RX descriptors -> Just count

			 *

			 * NB: the hardware should re-read the link when

			 *     RXE bit is written, but it doesn't work at

			 *     least on older hardware revs.

 TX Underrun -> Bump tx trigger level */

 RX -> Schedule rx tasklet */

 TX -> Schedule tx tasklet */

			/* Missed beacon -> TODO

			if (status & AR5K_INT_BMISS)

 MIB event -> Update counters and notify ANI */

 GPIO -> Notify RFKill layer */

	/*

	 * Until we handle rx/tx interrupts mask them on IMR

	 *

	 * NOTE: ah->(rx/tx)_pending are set when scheduling the tasklets

	 * and unset after we 've handled the interrupts.

 Fire up calibration poll */

/*

 * Periodically recalibrate the PHY to account

 * for temperature/environment changes.

 Should we run a full calibration ? */

			/*

			 * Rfgain is out of bounds, reset the chip

			 * to load new gain values.

 Clear calibration flags */

/*************************\

* Initialization routines *

 Initialize driver private data */

 SW support for IBSS_RSN is provided by mac80211 */

 both antennas can be configured as RX or TX */

	/*

	 * Mark the device as detached to avoid processing

	 * interrupts until setup is complete.

 Setup interrupt handler */

	/*

	 * Cache line size is used to size and align various

	 * structures used to communicate with the hardware.

 convert to bytes */

 Initialize device */

 Set up multi-rate retry capabilities */

 Finish private driver data initialization */

 Single chip radio (!RF5111) */

 No 5GHz support -> report 2GHz radio */

			/* No 2GHz support (5110 and some

 Multiband radio */

		/* Multi chip radio (RF5111 - RF2111) ->

 ready to process interrupts */

	/*

	 * Shutdown the hardware and driver:

	 *    stop output from above

	 *    disable interrupts

	 *    turn off timers

	 *    turn off the radio

	 *    clear transmit machinery

	 *    clear receive machinery

	 *    drain and release tx queues

	 *    reclaim beacon resources

	 *    power down hardware

	 *

	 * Note that some of this work is not possible if the

	 * hardware is gone (invalid).

	/*

	 * Stop anything previously setup.  This is safe

	 * no matter this is the first time through or not.

	/*

	 * The basic interface to setting the hardware in a good

	 * state is ``reset''.  On return the hardware is known to

	 * be powered up and with interrupts disabled.  This must

	 * be followed by initialization of the appropriate bits

	 * and then setup of the interrupt mask.

	/*

	 * Reset the key cache since some parts do not reset the

	 * contents on initial power up or resume from suspend.

	/* Use higher rates for acks instead of base

/*

 * Stop the device, grabbing the top-level lock to protect

 * against concurrent entry through ath5k_init (which can happen

 * if another thread does a system call and the thread doing the

 * stop is preempted).

		/*

		 * Don't set the card in full sleep mode!

		 *

		 * a) When the device is in this state it must be carefully

		 * woken up or references to registers in the PCI clock

		 * domain may freeze the bus (and system).  This varies

		 * by chip and is mostly an issue with newer parts

		 * (madwifi sources mentioned srev >= 0x78) that go to

		 * sleep more quickly.

		 *

		 * b) On older chips full sleep results a weird behaviour

		 * during wakeup. I tested various cards with srev < 0x78

		 * and they don't wake up after module reload, a second

		 * module reload is needed to bring the card up again.

		 *

		 * Until we figure out what's going on don't enable

		 * full chip reset on any chip (this is what Legacy HAL

		 * and Sam's HAL do anyway). Instead Perform a full reset

		 * on the device (same as initial state after attach) and

/*

 * Reset the hardware.  If chan is not NULL, then also pause rx/tx

 * and change to the given channel.

 *

 * This should be called with ah->lock.

	/* Save ani mode and disable ANI during

	 * reset. If we don't we might get false

	/* We are going to empty hw queues

	 * so we should also free any remaining

 Stop PCU */

	/* Stop DMA

	 *

	 * Note: If DMA didn't stop continue

	 * since only a reset will fix it.

	/* RF Bus grant won't work if we have pending

	 * frames

	/*

	 * Set calibration intervals

	 *

	 * Note: We don't need to run calibration imediately

	 * since some initial calibration is done on reset

	 * even for fast channel switching. Also on scanning

	 * this will get set again and again and it won't get

	 * executed unless we connect somewhere and spend some

	 * time on the channel (that's what calibration needs

	 * anyway to be accurate).

 clear survey data and cycle counters */

	/*

	 * Change channels and update the h/w rate map if we're switching;

	 * e.g. 11a to 11b/g.

	 *

	 * We may be doing a reset in response to an ioctl that changes the

	 * channel so update any state that might change as a result.

	 *

	 * XXX needed?

	ath5k_chan_change(ah, c); */

 intrs are enabled by ath5k_beacon_config */

	/*

	 * Collect the channel list.  The 802.11 layer

	 * is responsible for filtering this list based

	 * on settings like the phy mode and regulatory

	 * domain restrictions.

	/*

	 * Allocate tx+rx descriptors and populate the lists.

	/*

	 * Allocate hardware transmit queues: one queue for

	 * beacon frames and one data queue for each QoS

	 * priority.  Note that hw functions handle resetting

	 * these queues at the needed time.

	/* 5211 and 5212 usually support 10 queues but we better rely on the

		/* This order matches mac80211's queue priority, so we can

 older hardware (5210) can only support one data queue */

 All MAC address bits matter for ACKs */

	/*

	 * NB: the order of these is important:

	 * o call the 802.11 layer before detaching ath5k_hw to

	 *   ensure callbacks into the driver to delete global

	 *   key cache entries can be handled

	 * o reclaim the tx queue data structures after calling

	 *   the 802.11 layer as we'll get called back to reclaim

	 *   node state and potentially want to use them

	 * o to cleanup the tx queues the hal is called, so detach

	 *   it last

	 * XXX: ??? detach ath5k_hw ???

	 * Other than that, it's straightforward...

	/*

	 * NB: can't reclaim these until after ieee80211_ifdetach

	 * returns because we'll get called back to reclaim node

	 * state and potentially want to use them.

/*

 * RFKILL support for ath5k

 *

 * Copyright (c) 2009 Tobias Doerffel <tobias.doerffel@gmail.com>

 *

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer,

 *    without modification.

 * 2. Redistributions in binary form must reproduce at minimum a disclaimer

 *    similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any

 *    redistribution must be conditioned upon including a substantially

 *    similar Disclaimer requirement for further binary redistribution.

 * 3. Neither the names of the above-listed copyright holders nor the names

 *    of any contributors may be used to endorse or promote products derived

 *    from this software without specific prior written permission.

 *

 * NO WARRANTY

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY

 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,

 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER

 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 * THE POSSIBILITY OF SUCH DAMAGES.

 configuring GPIO for input for some reason disables rfkill */

ath5k_hw_set_gpio_input(ah, ah->rf_kill.gpio);*/

 read rfkill GPIO configuration from EEPROM header */

 enable interrupt for rfkill switch */

 disable interrupt for rfkill switch */

 enable RFKILL when stopping HW so Wifi LED is turned off */

/*

 * Copyright (c) 2008-2009 Atheros Communications Inc.

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 Known PCI ids */

 5210 early */

 5210 */

 5311 - this is on AHB bus !*/

 5211 */

 5212 */

 3com 5212 */

 3com 3CRDAG675 5212 */

 IBM minipci 5212 */

 5212 compatible */

 5212 compatible */

 5212 compatible */

 5212 compatible */

 5212 compatible */

 5212 compatible */

 2413 Griffin-lite */

 5413 Eagle */

 PCI-E cards */

 2417 Nala */

 AR5BXB63 */

 return bus cachesize in 4B word units */

	/*

	 * This check was put in to avoid "unpleasant" consequences if

	 * the bootrom has not fully initialized all PCI devices.

	 * Sometimes the cache line size register is not set

 Use the default size */

/*

 * Read from eeprom

	/*

	 * Initialize EEPROM access

/*

 * Read the MAC address from eeprom or platform_data

 Common ath_bus_opts structure */

/********************\

* PCI Initialization *

	/*

	 * L0s needs to be disabled on all ath5k cards.

	 *

	 * For distributions shipping with CONFIG_PCIEASPM (this will be enabled

	 * by default in the future in 2.6.36) this will also mean both L1 and

	 * L0s will be disabled when a pre 1.1 PCIe device is detected. We do

	 * know L1 works correctly even for all ath5k pre 1.1 PCIe devices

	 * though but cannot currently undue the effect of a blacklist, for

	 * details you can read pcie_aspm_sanity_check() and see how it adjusts

	 * the device link capability.

	 *

	 * It may be possible in the future to implement some PCI API to allow

	 * drivers to override blacklists for pre 1.1 PCIe but for now it is

	 * best to accept that both L0s and L1 will be disabled completely for

	 * distributions shipping with CONFIG_PCIEASPM rather than having this

	 * issue present. Motivation for adding this new API will be to help

	 * with power consumption for some of these devices.

 XXX 32-bit addressing only */

	/*

	 * Cache line size is used to size and align various

	 * structures used to communicate with the hardware.

		/*

		 * Linux 2.4.18 (at least) writes the cache line size

		 * register as a 16-bit wide register which is wrong.

		 * We must have this setup properly for rx buffer

		 * DMA to work so force a reasonable value here if it

		 * comes up zero.

	/*

	 * The default setting of latency timer yields poor results,

	 * set it to the value used by other systems.  It may be worth

	 * tweaking this setting more.

 Enable bus mastering */

	/*

	 * Disable the RETRY_TIMEOUT register (0x41) to keep

	 * PCI Tx retries from interfering with C3 CPU state.

	/*

	 * Allocate hw (mac80211 main struct)

	 * and hw->priv (driver private data)

 So we can unmap it on detach */

 Initialize */

 Set private data */

	/*

	 * Suspend/Resume resets the PCI configuration space, so we have to

	 * re-disable the RETRY_TIMEOUT register (0x41) to keep

	 * PCI Tx retries from interfering with C3 CPU state

 CONFIG_PM_SLEEP */

/*

 * Copyright (c) 2004-2008 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2008 Nick Kossifidis <mickflemm@gmail.com>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/********************************************\

Queue Control Unit, DCF Control Unit Functions

/**

 * DOC: Queue Control Unit (QCU)/DCF Control Unit (DCU) functions

 *

 * Here we setup parameters for the 12 available TX queues. Note that

 * on the various registers we can usually only map the first 10 of them so

 * basically we have 10 queues to play with. Each queue has a matching

 * QCU that controls when the queue will get triggered and multiple QCUs

 * can be mapped to a single DCU that controls the various DFS parameters

 * for the various queues. In our setup we have a 1:1 mapping between QCUs

 * and DCUs allowing us to have different DFS settings for each queue.

 *

 * When a frame goes into a TX queue, QCU decides when it'll trigger a

 * transmission based on various criteria (such as how many data we have inside

 * it's buffer or -if it's a beacon queue- if it's time to fire up the queue

 * based on TSF etc), DCU adds backoff, IFSes etc and then a scheduler

 * (arbitrator) decides the priority of each QCU based on it's configuration

 * (e.g. beacons are always transmitted when they leave DCU bypassing all other

 * frames from other queues waiting to be transmitted). After a frame leaves

 * the DCU it goes to PCU for further processing and then to PHY for

 * the actual transmission.

/******************\

* Helper functions *

/**

 * ath5k_hw_num_tx_pending() - Get number of pending frames for a  given queue

 * @ah: The &struct ath5k_hw

 * @queue: One of enum ath5k_tx_queue_id

 Return if queue is declared inactive */

 XXX: How about AR5K_CFG_TXCNT ? */

	/* It's possible to have no frames pending even if TXE

	 * is set. To indicate that q has not stopped return

/**

 * ath5k_hw_release_tx_queue() - Set a transmit queue inactive

 * @ah: The &struct ath5k_hw

 * @queue: One of enum ath5k_tx_queue_id

 This queue will be skipped in further operations */

For SIMR setup*/

/**

 * ath5k_cw_validate() - Make sure the given cw is valid

 * @cw_req: The contention window value to check

 *

 * Make sure cw is a power of 2 minus 1 and smaller than 1024

 Check if cw_req + 1 a power of 2 */

 Check if cw_req is a power of 2 */

	/* If none of the above is correct

/**

 * ath5k_hw_get_tx_queueprops() - Get properties for a transmit queue

 * @ah: The &struct ath5k_hw

 * @queue: One of enum ath5k_tx_queue_id

 * @queue_info: The &struct ath5k_txq_info to fill

/**

 * ath5k_hw_set_tx_queueprops() - Set properties for a transmit queue

 * @ah: The &struct ath5k_hw

 * @queue: One of enum ath5k_tx_queue_id

 * @qinfo: The &struct ath5k_txq_info to use

 *

 * Returns 0 on success or -EIO if queue is inactive

 copy and validate values */

	/*

	 * According to the docs: Although the AIFS field is 8 bit wide,

	 * the maximum supported value is 0xFC. Setting it higher than that

	 * will cause the DCU to hang.

XXX: Is this supported on 5210 ?*/

XXX: Is this correct for AR5K_WME_AC_VI,VO ???*/

/**

 * ath5k_hw_setup_tx_queue() - Initialize a transmit queue

 * @ah: The &struct ath5k_hw

 * @queue_type: One of enum ath5k_tx_queue

 * @queue_info: The &struct ath5k_txq_info to use

 *

 * Returns 0 on success, -EINVAL on invalid arguments

	/*

	 * Get queue by type

 5210 only has 2 queues */

	/*

	 * Setup internal queue structure

	/*

	 * We use ah_txq_status to hold a temp value for

	 * the Secondary interrupt mask registers on 5211+

	 * check out ath5k_hw_reset_tx_queue

/*******************************\

* Single QCU/DCU initialization *

/**

 * ath5k_hw_set_tx_retry_limits() - Set tx retry limits on DCU

 * @ah: The &struct ath5k_hw

 * @queue: One of enum ath5k_tx_queue_id

 *

 * This function is used when initializing a queue, to set

 * retry limits based on ah->ah_retry_* and the chipset used.

 Single data queue on AR5210 */

 DCU on AR5211+ */

/**

 * ath5k_hw_reset_tx_queue() - Initialize a single hw queue

 * @ah: The &struct ath5k_hw

 * @queue: One of enum ath5k_tx_queue_id

 *

 * Set DCF properties for the given transmit queue on DCU

 * and configures all queue-specific parameters.

	/* Skip if queue inactive or if we are on AR5210

	/*

	 * Set contention window (cw_min/cw_max)

	 * and arbitrated interframe space (aifs)...

	/*

	 * Set tx retry limits for this queue

	/*

	 * Set misc registers

 Enable DCU to wait for next fragment from QCU */

 On Maui and Spirit use the global seqnum on DCU */

 Constant bit rate period */

 Ready time interval */

 Enable/disable Post frame backoff */

 Enable/disable fragmentation burst backoff */

	/*

	 * Set registers by queue type

 XXX: use BCN_SENT_GT, if we can figure out how */

 TODO: Handle frame compression */

	/*

	 * Enable interrupts for this tx queue

	 * in the secondary interrupt mask registers

 Update secondary interrupt mask registers */

 Filter out inactive queues */

 Update SIMR2 but don't overwrite rest simr2 settings */

 Set TXNOFRM_QCU for the queues with TXNOFRM enabled */

	/* No queue has TXNOFRM enabled, disable the interrupt

 Set QCU mask for this DCU to save power */

/**************************\

* Global QCU/DCU functions *

/**

 * ath5k_hw_set_ifs_intervals()  - Set global inter-frame spaces on DCU

 * @ah: The &struct ath5k_hw

 * @slot_time: Slot time in us

 *

 * Sets the global IFS intervals on DCU (also works on AR5210) for

 * the given slot time and the current bwmode.

	/* EIFS

	 * Txtime of ack at lowest rate + SIFS + DIFS

	 * (DIFS = SIFS + 2 * Slot time)

	 *

	 * Note: HAL has some predefined values for EIFS

	 * Turbo:   (37 + 2 * 6)

	 * Default: (74 + 2 * 9)

	 * Half:    (149 + 2 * 13)

	 * Quarter: (298 + 2 * 21)

	 *

	 * (74 + 2 * 6) for AR5210 default and turbo !

	 *

	 * According to the formula we have

	 * ack_tx_time = 25 for turbo and

	 * ack_tx_time = 42.5 * clock multiplier

	 * for default/half/quarter.

	 *

	 * This can't be right, 42 is what we would get

	 * from ath5k_hw_get_frame_dur_for_bwmode or

	 * ieee80211_generic_frame_duration for zero frame

	 * length and without SIFS !

	 *

	 * Also we have different lowest rate for 802.11a

 ack_tx_time includes an SIFS already */

 Set IFS settings on AR5210 */

 Set slot time */

 Set EIFS */

 PIFS = Slot time + SIFS */

 DIFS = SIFS + 2 * Slot time */

 Set SIFS/DIFS */

 Set PIFS/EIFS and preserve AR5K_INIT_CARR_SENSE_EN */

 Set IFS slot time */

 Set EIFS interval */

 Set SIFS interval in usecs */

 Set SIFS interval in clock cycles */

/**

 * ath5k_hw_init_queues() - Initialize tx queues

 * @ah: The &struct ath5k_hw

 *

 * Initializes all tx queues based on information on

 * ah->ah_txq* set by the driver

 TODO: HW Compression support for data queues */

 TODO: Burst prefetch for data queues */

	/*

	 * Reset queues and start beacon timers at the end of the reset routine

	 * This also sets QCU mask on each DCU for 1:1 qcu to dcu mapping

	 * Note: If we want we can assign multiple qcus on one dcu.

		/* No QCU/DCU on AR5210, just set tx

		 * retry limits. We set IFS parameters

 Set the turbo flag when operating on 40MHz */

	/* If we didn't set IFS timings through

	 * ath5k_hw_set_coverage_class make sure

/*

 * Copyright (c) 2004-2008 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2008 Nick Kossifidis <mickflemm@gmail.com>

 * Copyright (c) 2007-2008 Pavel Roskin <proski@gnu.org>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/******************************\

 Hardware Descriptor Functions

/**

 * DOC: Hardware descriptor functions

 *

 * Here we handle the processing of the low-level hw descriptors

 * that hw reads and writes via DMA for each TX and RX attempt (that means

 * we can also have descriptors for failed TX/RX tries). We have two kind of

 * descriptors for RX and TX, control descriptors tell the hw how to send or

 * receive a packet where to read/write it from/to etc and status descriptors

 * that contain information about how the packet was sent or received (errors

 * included).

 *

 * Descriptor format is not exactly the same for each MAC chip version so we

 * have function pointers on &struct ath5k_hw we initialize at runtime based on

 * the chip used.

/************************\

* TX Control descriptors *

/**

 * ath5k_hw_setup_2word_tx_desc() - Initialize a 2-word tx control descriptor

 * @ah: The &struct ath5k_hw

 * @desc: The &struct ath5k_desc

 * @pkt_len: Frame length in bytes

 * @hdr_len: Header length in bytes (only used on AR5210)

 * @padsize: Any padding we've added to the frame length

 * @type: One of enum ath5k_pkt_type

 * @tx_power: Tx power in 0.5dB steps

 * @tx_rate0: HW idx for transmission rate

 * @tx_tries0: Max number of retransmissions

 * @key_index: Index on key table to use for encryption

 * @antenna_mode: Which antenna to use (0 for auto)

 * @flags: One of AR5K_TXDESC_* flags (desc.h)

 * @rtscts_rate: HW idx for RTS/CTS transmission rate

 * @rtscts_duration: What to put on duration field on the header of RTS/CTS

 *

 * Internal function to initialize a 2-Word TX control descriptor

 * found on AR5210 and AR5211 MACs chips.

 *

 * Returns 0 on success or -EINVAL on false input

	/*

	 * Validate input

	 * - Zero retries don't make sense.

	 * - A zero rate will put the HW into a mode where it continuously sends

	 *   noise on the channel, so it is important to avoid this.

 Clear descriptor */

 Setup control descriptor */

 Verify and set frame length */

 remove padding we might have added before */

 Verify and set buffer length */

 NB: beacon's BufLen must be a multiple of 4 bytes */

	/*

	 * Verify and set header length (only 5210)

Differences between 5210-5211*/

	/*

	 * WEP crap

	/*

	 * RTS/CTS Duration [5210 ?]

/**

 * ath5k_hw_setup_4word_tx_desc() - Initialize a 4-word tx control descriptor

 * @ah: The &struct ath5k_hw

 * @desc: The &struct ath5k_desc

 * @pkt_len: Frame length in bytes

 * @hdr_len: Header length in bytes (only used on AR5210)

 * @padsize: Any padding we've added to the frame length

 * @type: One of enum ath5k_pkt_type

 * @tx_power: Tx power in 0.5dB steps

 * @tx_rate0: HW idx for transmission rate

 * @tx_tries0: Max number of retransmissions

 * @key_index: Index on key table to use for encryption

 * @antenna_mode: Which antenna to use (0 for auto)

 * @flags: One of AR5K_TXDESC_* flags (desc.h)

 * @rtscts_rate: HW idx for RTS/CTS transmission rate

 * @rtscts_duration: What to put on duration field on the header of RTS/CTS

 *

 * Internal function to initialize a 4-Word TX control descriptor

 * found on AR5212 and later MACs chips.

 *

 * Returns 0 on success or -EINVAL on false input

	/*

	 * Use local variables for these to reduce load/store access on

	 * uncached memory

	/*

	 * Validate input

	 * - Zero retries don't make sense.

	 * - A zero rate will put the HW into a mode where it continuously sends

	 *   noise on the channel, so it is important to avoid this.

 Clear descriptor status area */

 Setup control descriptor */

 Verify and set frame length */

 remove padding we might have added before */

 Verify and set buffer length */

 NB: beacon's BufLen must be a multiple of 4 bytes */

	/*

	 * WEP crap

	/*

	 * RTS/CTS

/**

 * ath5k_hw_setup_mrr_tx_desc() - Initialize an MRR tx control descriptor

 * @ah: The &struct ath5k_hw

 * @desc: The &struct ath5k_desc

 * @tx_rate1: HW idx for rate used on transmission series 1

 * @tx_tries1: Max number of retransmissions for transmission series 1

 * @tx_rate2: HW idx for rate used on transmission series 2

 * @tx_tries2: Max number of retransmissions for transmission series 2

 * @tx_rate3: HW idx for rate used on transmission series 3

 * @tx_tries3: Max number of retransmissions for transmission series 3

 *

 * Multi rate retry (MRR) tx control descriptors are available only on AR5212

 * MACs, they are part of the normal 4-word tx control descriptor (see above)

 * but we handle them through a separate function for better abstraction.

 *

 * Returns 0 on success or -EINVAL on invalid input

 no mrr support for cards older than 5212 */

	/*

	 * Rates can be 0 as long as the retry count is 0 too.

	 * A zero rate and nonzero retry count will put the HW into a mode where

	 * it continuously sends noise on the channel, so it is important to

	 * avoid this.

/***********************\

* TX Status descriptors *

/**

 * ath5k_hw_proc_2word_tx_status() - Process a tx status descriptor on 5210/1

 * @ah: The &struct ath5k_hw

 * @desc: The &struct ath5k_desc

 * @ts: The &struct ath5k_tx_status

 No frame has been send or error */

	/*

	 * Get descriptor status

TODO: ts->ts_virtcol + test*/

/**

 * ath5k_hw_proc_4word_tx_status() - Process a tx status descriptor on 5212

 * @ah: The &struct ath5k_hw

 * @desc: The &struct ath5k_desc

 * @ts: The &struct ath5k_tx_status

 No frame has been send or error */

	/*

	 * Get descriptor status

 TX error */

/****************\

* RX Descriptors *

/**

 * ath5k_hw_setup_rx_desc() - Initialize an rx control descriptor

 * @ah: The &struct ath5k_hw

 * @desc: The &struct ath5k_desc

 * @size: RX buffer length in bytes

 * @flags: One of AR5K_RXDESC_* flags

	/*

	 * Clear the descriptor

	 * If we don't clean the status descriptor,

	 * while scanning we get too many results,

	 * most of them virtual, after some secs

	 * of scanning system hangs. M.F.

 Setup descriptor */

/**

 * ath5k_hw_proc_5210_rx_status() - Process the rx status descriptor on 5210/1

 * @ah: The &struct ath5k_hw

 * @desc: The &struct ath5k_desc

 * @rs: The &struct ath5k_rx_status

 *

 * Internal function used to process an RX status descriptor

 * on AR5210/5211 MAC.

 *

 * Returns 0 on success or -EINPROGRESS in case we haven't received the who;e

 * frame yet.

 No frame received / not ready */

	/*

	 * Frame receive status

	/* TODO: this timestamp is 13 bit, later on we assume 15 bit!

	 * also the HAL code for 5210 says the timestamp is bits [10..22] of the

	 * TSF, and extends the timestamp here to 15 bit.

	 * we need to check on 5210...

	/*

	 * Key table status

	/*

	 * Receive/descriptor errors

 only on 5210 */

/**

 * ath5k_hw_proc_5212_rx_status() - Process the rx status descriptor on 5212

 * @ah: The &struct ath5k_hw

 * @desc: The &struct ath5k_desc

 * @rs: The &struct ath5k_rx_status

 *

 * Internal function used to process an RX status descriptor

 * on AR5212 and later MAC.

 *

 * Returns 0 on success or -EINPROGRESS in case we haven't received the who;e

 * frame yet.

 No frame received / not ready */

	/*

	 * Frame receive status

	/*

	 * Key table status

	/*

	 * Receive/descriptor errors

/********\

* Attach *

/**

 * ath5k_hw_init_desc_functions() - Init function pointers inside ah

 * @ah: The &struct ath5k_hw

 *

 * Maps the internal descriptor functions to the function pointers on ah, used

 * from above. This is used as an abstraction layer to handle the various chips

 * the same way.

/*

 * Copyright (c) 2004-2008 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2008 Nick Kossifidis <mickflemm@gmail.com>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/*************************************\

* Attach/Detach Functions and helpers *

/**

 * ath5k_hw_post() - Power On Self Test helper function

 * @ah: The &struct ath5k_hw

 Save previous value */

 Found on ndiswrapper dumps */

 Found on ndiswrapper dumps */

 Restore previous value */

/**

 * ath5k_hw_init() - Check if hw is supported and init the needed structs

 * @ah: The &struct ath5k_hw associated with the device

 *

 * Check if the device is supported, perform a POST and initialize the needed

 * structs. Returns -ENOMEM if we don't have memory for the needed structs,

 * -ENODEV if the device is not supported or prints an error msg if something

 * else went wrong.

	/*

	 * HW information

 until first NF calibration is run */

	/*

	 * Find the mac version

 Get the MAC version */

 Fill the ath5k_hw struct with the needed functions */

 Bring device out of sleep and reset its units */

 Get PHY and RADIO revisions */

 Try to identify radio chip based on its srev */

 Identify radio based on mac/phy srev */

 Return on unsupported chips (unsupported eeprom etc) */

	/*

	 * POST

 Enable pci core retry fix on Hainan (5213A) and later chips */

	/*

	 * Get card capabilities, calibration values etc

	 * TODO: EEPROM work

	/*

	 * Write PCI-E power save settings

 Shut off RX when elecidle is asserted */

		/* If serdes programming is enabled, increase PCI-E

		 * tx power for systems with long trace from host

 Shut off PLL and CLKREQ active in L1 */

 Preserve other settings */

 Reset SERDES to load new settings */

 Get misc capabilities */

 Crypto settings */

 MAC address is cleared until add_interface */

 Set BSSID to bcast address: ff:ff:ff:ff:ff:ff for now */

 turn on HW LEDs */

/**

 * ath5k_hw_deinit() - Free the &struct ath5k_hw

 * @ah: The &struct ath5k_hw

 assume interrupts are down */

/*

 * Copyright (C) 2010 Bruno Randolf <br1@einfach.org>

 *

 * Permission to use, copy, modify, and/or distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/**

 * DOC: Basic ANI Operation

 *

 * Adaptive Noise Immunity (ANI) controls five noise immunity parameters

 * depending on the amount of interference in the environment, increasing

 * or reducing sensitivity as necessary.

 *

 * The parameters are:

 *

 *   - "noise immunity"

 *

 *   - "spur immunity"

 *

 *   - "firstep level"

 *

 *   - "OFDM weak signal detection"

 *

 *   - "CCK weak signal detection"

 *

 * Basically we look at the amount of ODFM and CCK timing errors we get and then

 * raise or lower immunity accordingly by setting one or more of these

 * parameters.

 *

 * Newer chipsets have PHY error counters in hardware which will generate a MIB

 * interrupt when they overflow. Older hardware has too enable PHY error frames

 * by setting a RX flag and then count every single PHY error. When a specified

 * threshold of errors has been reached we will raise immunity.

 * Also we regularly check the amount of errors and lower or raise immunity as

 * necessary.

/***********************\

* ANI parameter control *

/**

 * ath5k_ani_set_noise_immunity_level() - Set noise immunity level

 * @ah: The &struct ath5k_hw

 * @level: level between 0 and @ATH5K_ANI_MAX_NOISE_IMM_LVL

	/* TODO:

	 * ANI documents suggest the following five levels to use, but the HAL

	 * and ath9k use only the last two levels, making this

	 * essentially an on/off option. There *may* be a reason for this (???),

	 * so i stick with the HAL version for now...

/**

 * ath5k_ani_set_spur_immunity_level() - Set spur immunity level

 * @ah: The &struct ath5k_hw

 * @level: level between 0 and @max_spur_level (the maximum level is dependent

 * on the chip revision).

/**

 * ath5k_ani_set_firstep_level() - Set "firstep" level

 * @ah: The &struct ath5k_hw

 * @level: level between 0 and @ATH5K_ANI_MAX_FIRSTEP_LVL

/**

 * ath5k_ani_set_ofdm_weak_signal_detection() - Set OFDM weak signal detection

 * @ah: The &struct ath5k_hw

 * @on: turn on or off

/**

 * ath5k_ani_set_cck_weak_signal_detection() - Set CCK weak signal detection

 * @ah: The &struct ath5k_hw

 * @on: turn on or off

/***************\

* ANI algorithm *

/**

 * ath5k_ani_raise_immunity() - Increase noise immunity

 * @ah: The &struct ath5k_hw

 * @as: The &struct ath5k_ani_state

 * @ofdm_trigger: If this is true we are called because of too many OFDM errors,

 * the algorithm will tune more parameters then.

 *

 * Try to raise noise immunity (=decrease sensitivity) in several steps

 * depending on the average RSSI of the beacons we received.

 first: raise noise immunity */

 only OFDM: raise spur immunity level */

 AP mode */

 STA and IBSS mode */

	/* TODO: for IBSS mode it would be better to keep a beacon RSSI average

	 * per each neighbour node and use the minimum of these, to make sure we

		/* only OFDM: beacon RSSI is high, we can disable ODFM weak

 as a last resort or CCK: raise firstep level */

		/* beacon RSSI in mid range, we need OFDM weak signal detect,

		/* beacon RSSI is low. in B/G mode turn of OFDM weak signal

	/* TODO: why not?:

	if (as->cck_weak_sig == true) {

		ath5k_ani_set_cck_weak_signal_detection(ah, false);

	}

/**

 * ath5k_ani_lower_immunity() - Decrease noise immunity

 * @ah: The &struct ath5k_hw

 * @as: The &struct ath5k_ani_state

 *

 * Try to lower noise immunity (=increase sensitivity) in several steps

 * depending on the average RSSI of the beacons we received.

 AP mode */

 STA and IBSS mode (see TODO above) */

			/* beacon signal is high, leave OFDM weak signal

			 * detection off or it may oscillate

			/* beacon RSSI is mid-range: turn on ODFM weak signal

 beacon signal is low: only reduce firstep level */

 all modes */

 finally, reduce noise immunity */

/**

 * ath5k_hw_ani_get_listen_time() - Update counters and return listening time

 * @ah: The &struct ath5k_hw

 * @as: The &struct ath5k_ani_state

 *

 * Return an approximation of the time spent "listening" in milliseconds (ms)

 * since the last call of this function.

 * Save a snapshot of the counter values for debugging/statistics.

 clears common->cc_ani */

/**

 * ath5k_ani_save_and_clear_phy_errors() - Clear and save PHY error counters

 * @ah: The &struct ath5k_hw

 * @as: The &struct ath5k_ani_state

 *

 * Clear the PHY error counters as soon as possible, since this might be called

 * from a MIB interrupt and we want to make sure we don't get interrupted again.

 * Add the count of CCK and OFDM errors to our internal state, so it can be used

 * by the algorithm later.

 *

 * Will be called from interrupt and tasklet context.

 * Returns 0 if both counters are zero.

 reset counters first, we might be in a hurry (interrupt) */

	/* sometimes both can be zero, especially when there is a superfluous

 avoid negative values should one of the registers overflow */

/**

 * ath5k_ani_period_restart() - Restart ANI period

 * @as: The &struct ath5k_ani_state

 *

 * Just reset counters, so they are clear for the next "ani period".

 keep last values for debugging */

/**

 * ath5k_ani_calibration() - The main ANI calibration function

 * @ah: The &struct ath5k_hw

 *

 * We count OFDM and CCK errors relative to the time where we did not send or

 * receive ("listen" time) and raise or lower immunity accordingly.

 * This is called regularly (every second) from the calibration timer, but also

 * when an error threshold has been reached.

 *

 * In order to synchronize access from different contexts, this should be

 * called only indirectly by scheduling the ANI tasklet!

	/* get listen time since last call and add it to the counter because we

	 * might not have restarted the "ani period" last time.

 too many PHY errors - we have to raise immunity */

		/* If more than 5 (TODO: why 5?) periods have passed and we got

/*******************\

* Interrupt handler *

/**

 * ath5k_ani_mib_intr() - Interrupt handler for ANI MIB counters

 * @ah: The &struct ath5k_hw

 *

 * Just read & reset the registers quickly, so they don't generate more

 * interrupts, save the counters and schedule the tasklet to decide whether

 * to raise immunity or not.

 *

 * We just need to handle PHY error counters, ath5k_hw_update_mib_counters()

 * should take care of all "normal" MIB interrupts.

	/* nothing to do here if HW does not have PHY error counters - they

 not in use but clear anyways */

	/* If one of the errors triggered, we can get a superfluous second

	 * interrupt, even though we have already reset the register. The

/**

 * ath5k_ani_phy_error_report - Used by older HW to report PHY errors

 *

 * @ah: The &struct ath5k_hw

 * @phyerr: One of enum ath5k_phy_error_code

 *

 * This is used by hardware without PHY error counters to report PHY errors

 * on a frame-by-frame basis, instead of the interrupt.

/****************\

* Initialization *

/**

 * ath5k_enable_phy_err_counters() - Enable PHY error counters

 * @ah: The &struct ath5k_hw

 *

 * Enable PHY error counters for OFDM and CCK timing errors.

 not in use */

/**

 * ath5k_disable_phy_err_counters() - Disable PHY error counters

 * @ah: The &struct ath5k_hw

 *

 * Disable PHY error counters for OFDM and CCK timing errors.

 not in use */

/**

 * ath5k_ani_init() - Initialize ANI

 * @ah: The &struct ath5k_hw

 * @mode: One of enum ath5k_ani_mode

 *

 * Initialize ANI according to mode.

 ANI is only possible on 5212 and newer */

 clear old state information */

 older hardware has more spur levels than newer */

 initial values for our ani parameters */

	/* newer hardware has PHY error counter registers which we can use to

	 * get OFDM and CCK error counts. older hardware has to set rxfilter and

	 * report every single PHY error by calling ath5k_ani_phy_error_report()

/**************\

* Debug output *

/**

 * ath5k_ani_print_counters() - Print ANI counters

 * @ah: The &struct ath5k_hw

 *

 * Used for debugging ANI

 clears too */

 no clear */

 SPDX-License-Identifier: GPL-2.0

** ANI ***/

** register / unregister ***/

/*

 * Copyright (c) 2007-2008 Bruno Randolf <bruno@thinktube.com>

 *

 *  This file is free software: you may copy, redistribute and/or modify it

 *  under the terms of the GNU General Public License as published by the

 *  Free Software Foundation, either version 2 of the License, or (at your

 *  option) any later version.

 *

 *  This file is distributed in the hope that it will be useful, but

 *  WITHOUT ANY WARRANTY; without even the implied warranty of

 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 *  General Public License for more details.

 *

 *  You should have received a copy of the GNU General Public License

 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *

 *

 * This file incorporates work covered by the following copyright and

 * permission notice:

 *

 * Copyright (c) 2002-2005 Sam Leffler, Errno Consulting

 * Copyright (c) 2004-2005 Atheros Communications, Inc.

 * Copyright (c) 2006 Devicescape Software, Inc.

 * Copyright (c) 2007 Jiri Slaby <jirislaby@gmail.com>

 * Copyright (c) 2007 Luis R. Rodriguez <mcgrof@winlab.rutgers.edu>

 *

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer,

 *    without modification.

 * 2. Redistributions in binary form must reproduce at minimum a disclaimer

 *    similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any

 *    redistribution must be conditioned upon including a substantially

 *    similar Disclaimer requirement for further binary redistribution.

 * 3. Neither the names of the above-listed copyright holders nor the names

 *    of any contributors may be used to endorse or promote products derived

 *    from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL") version 2 as published by the Free

 * Software Foundation.

 *

 * NO WARRANTY

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY

 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,

 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER

 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 * THE POSSIBILITY OF SUCH DAMAGES.

 debugfs: registers */

 just a few random registers, might want to add more */

 nothing to do */

 debugfs: beacons */

 debugfs: reset */

 debugfs: debug level */

 toggle bit */

 debugfs: antenna */

 debugfs: misc */

 debugfs: frameerrors */

 debugfs: ani */

 debugfs: queues etc */

 debugfs: eeprom */

 NB: in 16-bit words */

 Get eeprom size */

 Create buffer and read in eeprom */

 Create private struct and assign to file */

 functions used in other places */

/*

 * Copyright (c) 2004-2008 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2008 Nick Kossifidis <mickflemm@gmail.com>

 * Copyright (c) 2007-2008 Jiri Slaby <jirislaby@gmail.com>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/**************\

* Capabilities *

/*

 * Fill the capabilities struct

 * TODO: Merge this with EEPROM code when we are done with it

 Capabilities stored in the EEPROM */

		/*

		 * Set radio capabilities

		 * (The AR5110 only supports the middle 5GHz band)

 Set supported modes */

		/*

		 * XXX The transceiver supports frequencies from 4920 to 6100MHz

		 * XXX and from 2312 to 2732MHz. There are problems with the

		 * XXX current ieee80211 implementation because the IEEE

		 * XXX channel mapping does not support negative channel

		 * XXX numbers (2312MHz is channel -19). Of course, this

		 * XXX doesn't matter because these channels are out of the

		 * XXX legal range.

		/*

		 * Set radio capabilities

 Set supported modes */

		/* Enable  802.11b if a 2GHz capable radio (2111/5112) is

 2312 */

			/* Override 2GHz modes on SoCs that need it

			 * NOTE: cap_needs_2GHz_ovr gets set from

 Set number of supported TX queues */

 Newer hardware has PHY error counters */

 MACs since AR5212 have MRR support */

/*

 * TODO: Following functions should be part of a new function

 * set_capability

/*

 * Copyright (c) 2004-2008 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2009 Nick Kossifidis <mickflemm@gmail.com>

 * Copyright (c) 2008-2009 Felix Fietkau <nbd@openwrt.org>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/*************************************\

* EEPROM access functions and helpers *

/******************\

* Helper functions *

/*

 * Translate binary channel representation in EEPROM to frequency

/*********\

* Parsers *

/*

 * Initialize eeprom & capabilities structs

	/*

	 * Read values from EEPROM and store them in the capability structure

 Return if we have an old EEPROM */

	/*

	 * Validate the checksum of the EEPROM date. There are some

	 * devices with invalid EEPROMs.

		/*

		 * Fail safe check to prevent stupid loops due

		 * to busted EEPROMs. XXX: This value is likely too

		 * big still, waiting on a better value.

 XXX: Don't know which versions include these two */

	/* Check if PCIE_OFFSET points to PCIE_SERDES_SECTION

	 * and enable serdes programming if needed.

	 *

	 * XXX: Serdes values seem to be fixed so

	 * no need to read them here, we write them

/*

 * Read antenna infos from eeprom

 Get antenna switch tables */

 return new offset */

/*

 * Read supported modes and some mode-specific calibration data

 * from eeprom

 b_DB_11[bg] and b_OB_11[bg] */

	/* Note: >= v5 have bg freq piers on another location

	 * so these freq piers are ignored for >= v5 (should be 0xff

	/*

	 * Read turbo mode information on newer EEPROM versions

 return new offset */

 Read mode-specific data (except power calibration data) */

	/*

	 * Get values for all modes

 override for older eeprom versions for better performance */

/* Read the frequency piers for each mode (mostly used on newer eeproms with 0xff

 return new offset */

 Read frequency piers for 802.11a */

 Fixed number of piers */

 Read frequency piers for 802.11bg on eeprom versions >= 5 and eemap >= 2 */

/*

 * Read power calibration for RF5111 chips

 *

 * For RF5111 we have an XPD -eXternal Power Detector- curve

 * for each calibrated channel. Each curve has 0,5dB Power steps

 * on x axis and PCDAC steps (offsets) on y axis and looks like an

 * exponential function. To recreate the curve we read 11 points

 * here and interpolate later.

/* Used to match PCDAC steps with power values on RF5111 chips

 * (eeprom versions < 4). For RF5111 we have 11 pre-defined PCDAC

 * steps that match with the power values we read from eeprom. On

 * older eeprom versions (< 3.2) these steps are equally spaced at

 * 10% of the pcdac curve -until the curve reaches its maximum-

 * (11 steps from 0 to 100%) but on newer eeprom versions (>= 3.2)

 * these 11 steps are spaced in a different way. This function returns

 * the pcdac steps based on eeprom version and curve min/max so that we

 * can have pcdac/pwr points.

/* Convert RF5111 specific data to generic raw data

 Fill raw data for each calibration pier */

 Allocate pd_curves for this cal pier */

		/* Only one curve for RF5111

		 * find out which one and place

		 * in pd_curves.

 Allocate pd points for this curve */

		/* Fill raw dataset

		 * (convert power to 0.25dB units

 Absolute values */

 Already sorted */

 Set min/max pwr */

 Parse EEPROM data */

 fixed piers */

 fixed piers */

/*

 * Read power calibration for RF5112 chips

 *

 * For RF5112 we have 4 XPD -eXternal Power Detector- curves

 * for each calibrated channel on 0, -6, -12 and -18dBm but we only

 * use the higher (3) and the lower (0) curves. Each curve has 0.5dB

 * power steps on x axis and PCDAC steps on y axis and looks like a

 * linear function. To recreate the curve and pass the power values

 * on hw, we read 4 points for xpd 0 (lower gain -> max power)

 * and 3 points for xpd 3 (higher gain -> lower power) here and

 * interpolate later.

 *

 * Note: Many vendors just use xpd 0 so xpd 3 is zeroed.

/* Convert RF5112 specific data to generic raw data

 Fill raw data for each calibration pier */

 Allocate pd_curves for this cal pier */

 Fill pd_curves */

 Lowest gain curve (max power) */

 One more point for better accuracy */

 Allocate pd points for this curve */

				/* Fill raw dataset

 Absolute values */

 Deltas */

 Set min power for this frequency */

 Highest gain curve (min power) */

 Allocate pd points for this curve */

				/* Fill raw dataset

 Absolute values */

 Fixed points */

				/* Since we have a higher gain curve

 Parse EEPROM data */

	/* Count how many curves we have and

	 * identify them (which one of the 4

	 * available curves we have on each count).

	 * Curves are stored from lower (x0) to

 ee_x_gain[mode] is x gain mask */

		/*

		 * Read 5GHz EEPROM channels

 NB: frequency piers parsed during mode init */

 NB: frequency piers parsed during mode init */

		/* Power values in quarter dB

		 * for the lower xpd gain curve

		/* PCDAC steps

		 * corresponding to the above power

		/* Power values in quarter dB

		 * for the higher xpd gain curve

		/* PCDAC steps

		 * corresponding to the above power

 Last xpd0 power level is also channel maximum */

/*

 * Read power calibration for RF2413 chips

 *

 * For RF2413 we have a Power to PDDAC table (Power Detector)

 * instead of a PCDAC and 4 pd gain curves for each calibrated channel.

 * Each curve has power on x axis in 0.5 db steps and PDDADC steps on y

 * axis and looks like an exponential function like the RF5111 curve.

 *

 * To recreate the curves we read here the points and interpolate

 * later. Note that in most cases only 2 (higher and lower) curves are

 * used (like RF5112) but vendors have the opportunity to include all

 * 4 curves on eeprom. The final curve (higher power) has an extra

 * point for better accuracy like RF5112.

/* For RF2413 power calibration data doesn't start on a fixed location and

 * if a mode is not supported, its section is missing -not zeroed-.

 * So we need to calculate the starting offset for each section by using

/* Return the size of each section based on the mode and the number of pd

/* Return the starting offset for a section based on the modes supported

/* Convert RF2413 specific data to generic raw data

 Fill raw data for each calibration pier */

 Allocate pd_curves for this cal pier */

 Fill pd_curves */

			/* One more point for the highest power

 Allocate pd points for this curve */

			/* Fill raw dataset

			 * convert all pwr levels to

 Highest gain curve -> min power */

 Lowest gain curve -> max power */

 Parse EEPROM data */

	/* Count how many curves we have and

	 * identify them (which one of the 4

	 * available curves we have on each count).

	 * Curves are stored from higher to

 ee_x_gain[mode] is x gain mask */

		/*

		 * Read pwr_i, pddac_i and the first

		 * 2 pd points (pwr, pddac)

			/*

			 * Pd gain 0 is not the last pd gain

			 * so it only has 2 pd points.

			 * Continue with pd gain 1.

			/*

			 * Pd gain 0 is the last one so

			 * read the extra point.

		/*

		 * Proceed with the other pd_gains

		 * as above.

/*

 * Read per rate target power (this is the maximum tx power

 * supported by the card). This info is used when setting

 * tx power, no matter the channel.

 *

 * This also works for v5 EEPROMs.

 3rd is g mode's 1st */

 Different freq mask for older eeproms (<= v3.2) */

/*

 * Read per channel calibration info from EEPROM

 *

 * This info is used to calibrate the baseband power table. Imagine

 * that for each channel there is a power curve that's hw specific

 * (depends on amplifier etc) and we try to "correct" this curve using

 * offsets we pass on to phy chip (baseband -> before amplifier) so that

 * it can use accurate power values when setting tx power (takes amplifier's

 * performance on each channel into account).

 *

 * EEPROM provides us with the offsets for some pre-calibrated channels

 * and we have to interpolate to create the full table for these channels and

 * also the table for any channel.

 Read conformance test limits used for regulatory control */

 No spur info for 5GHz */

 2 channels for 2GHz (2464/2420) */

/***********************\

* Init/Detach functions *

/*

 * Initialize eeprom data structure

/*

 * Copyright (c) 2004-2007 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2009 Nick Kossifidis <mickflemm@gmail.com>

 * Copyright (c) 2007-2008 Jiri Slaby <jirislaby@gmail.com>

 * Copyright (c) 2008-2009 Felix Fietkau <nbd@openwrt.org>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/***********************\

* PHY related functions *

/**

 * DOC: PHY related functions

 *

 * Here we handle the low-level functions related to baseband

 * and analog frontend (RF) parts. This is by far the most complex

 * part of the hw code so make sure you know what you are doing.

 *

 * Here is a list of what this is all about:

 *

 * - Channel setting/switching

 *

 * - Automatic Gain Control (AGC) calibration

 *

 * - Noise Floor calibration

 *

 * - I/Q imbalance calibration (QAM correction)

 *

 * - Calibration due to thermal changes (gain_F)

 *

 * - Spur noise mitigation

 *

 * - RF/PHY initialization for the various operating modes and bwmodes

 *

 * - Antenna control

 *

 * - TX power control per channel/rate/packet type

 *

 * Also have in mind we never got documentation for most of these

 * functions, what we have comes mostly from Atheros's code, reverse

 * engineering and patent docs/presentations etc.

/******************\

* Helper functions *

/**

 * ath5k_hw_radio_revision() - Get the PHY Chip revision

 * @ah: The &struct ath5k_hw

 * @band: One of enum nl80211_band

 *

 * Returns the revision number of a 2GHz, 5GHz or single chip

 * radio.

	/*

	 * Set the radio chip access register

 ...wait until PHY is ready and read the selected radio revision */

 Reset to the 5GHz mode */

/**

 * ath5k_channel_ok() - Check if a channel is supported by the hw

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * Note: We don't do any regulatory domain checks here, it's just

 * a sanity check.

 Check if the channel is in our supported range */

/**

 * ath5k_hw_chan_has_spur_noise() - Check if channel is sensitive to spur noise

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

/**

 * ath5k_hw_rfb_op() - Perform an operation on the given RF Buffer

 * @ah: The &struct ath5k_hw

 * @rf_regs: The struct ath5k_rf_reg

 * @val: New value

 * @reg_id: RF register ID

 * @set: Indicate we need to swap data

 *

 * This is an internal function used to modify RF Banks before

 * writing them to AR5K_RF_BUFFER. Check out rfbuffer.h for more

 * infos.

 should not happen */

	/* first_bit is an offset from bank's

	 * start. Since we have all banks on

	 * the same array, we use this offset

 Boundary check */

/**

 * ath5k_hw_write_ofdm_timings() - set OFDM timings on AR5212

 * @ah: the &struct ath5k_hw

 * @channel: the currently set channel upon reset

 *

 * Write the delta slope coefficient (used on pilot tracking ?) for OFDM

 * operation on the AR5212 upon reset. This is a helper for ath5k_hw_phy_init.

 *

 * Since delta slope is floating point we split it on its exponent and

 * mantissa and provide these values on hw.

 *

 * For more infos i think this patent is related

 * "http://www.freepatentsonline.com/7184495.html"

 Get exponent and mantissa and set it */

	/* Get coefficient

	 * ALGO: coef = (5 * clock / carrier_freq) / 2

	 * we scale coef by shifting clock value by 24 for

	/* Get exponent

 Doesn't make sense if it's zero*/

 Note: we've shifted coef_scaled by 24 */

	/* Get mantissa (significant digits)

	/* Calculate delta slope coefficient exponent

/**

 * ath5k_hw_phy_disable() - Disable PHY

 * @ah: The &struct ath5k_hw

Just a try M.F.*/

/**

 * ath5k_hw_wait_for_synth() - Wait for synth to settle

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

	/*

	 * On 5211+ read activation -> rx delay

	 * and use it (100ns steps).

		/* XXX: /2 on turbo ? Let's be safe

/**********************\

* RF Gain optimization *

/**

 * DOC: RF Gain optimization

 *

 * This code is used to optimize RF gain on different environments

 * (temperature mostly) based on feedback from a power detector.

 *

 * It's only used on RF5111 and RF5112, later RF chips seem to have

 * auto adjustment on hw -notice they have a much smaller BANK 7 and

 * no gain optimization ladder-.

 *

 * For more infos check out this patent doc

 * "http://www.freepatentsonline.com/7400691.html"

 *

 * This paper describes power drops as seen on the receiver due to

 * probe packets

 * "http://www.cnri.dit.ie/publications/ICT08%20-%20Practical%20Issues

 * %20of%20Power%20Control.pdf"

 *

 * And this is the MadWiFi bug entry related to the above

 * "http://madwifi-project.org/ticket/1659"

 * with various measurements and diagrams

/**

 * ath5k_hw_rfgain_opt_init() - Initialize ah_gain during attach

 * @ah: The &struct ath5k_hw

 Initialize the gain optimization values */

/**

 * ath5k_hw_request_rfgain_probe() - Request a PAPD probe packet

 * @ah: The &struct ath5k_hw

 *

 * Schedules a gain probe check on the next transmitted packet.

 * That means our next packet is going to be sent with lower

 * tx power and a Peak to Average Power Detector (PAPD) will try

 * to measure the gain.

 *

 * TODO: Force a tx packet (bypassing PCU arbitrator etc)

 * just after we enable the probe so that we don't mess with

 * standard traffic.

	/* Skip if gain calibration is inactive or

	/* Send the packet with 2dB below max power as

/**

 * ath5k_hw_rf_gainf_corr() - Calculate Gain_F measurement correction

 * @ah: The &struct ath5k_hw

 *

 * Calculate Gain_F measurement correction

 * based on the current step for RF5112 rev. 2

 Only RF5112 Rev. 2 supports it */

 No VGA (Variable Gain Amplifier) override, skip */

 Mix gain stepping */

 Mix gain override */

/**

 * ath5k_hw_rf_check_gainf_readback() - Validate Gain_F feedback from detector

 * @ah: The &struct ath5k_hw

 *

 * Check if current gain_F measurement is in the range of our

 * power detector windows. If we get a measurement outside range

 * we know it's not accurate (detectors can't measure anything outside

 * their detection window) so we must ignore it.

 *

 * Returns true if readback was O.K. or false on failure

/**

 * ath5k_hw_rf_gainf_adjust() - Perform Gain_F adjustment

 * @ah: The &struct ath5k_hw

 *

 * Choose the right target gain based on current gain

 * and RF gain optimization ladder

 Reached maximum */

 Reached minimum */

/**

 * ath5k_hw_gainf_calibrate() - Do a gain_F calibration

 * @ah: The &struct ath5k_hw

 *

 * Main callback for thermal RF gain calibration engine

 * Check for a new gain reading and schedule an adjustment

 * if needed.

 *

 * Returns one of enum ath5k_rfgain codes

	/* No check requested, either engine is inactive

	/* Read the PAPD (Peak to Average Power Detector)

 No probe is scheduled, read gain_F measurement */

		/* If tx packet is CCK correct the gain_F measurement

		/* Further correct gain_F measurement for

		/* Check if measurement is ok and if we need

		 * to adjust gain, schedule a gain adjustment,

/**

 * ath5k_hw_rfgain_init() - Write initial RF gain settings to hw

 * @ah: The &struct ath5k_hw

 * @band: One of enum nl80211_band

 *

 * Write initial RF gain table to set the RF sensitivity.

 *

 * NOTE: This one works on all RF chips and has nothing to do

 * with Gain_F calibration

/********************\

* RF Registers setup *

/**

 * ath5k_hw_rfregs_init() - Initialize RF register settings

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 * @mode: One of enum ath5k_driver_mode

 *

 * Setup RF registers by writing RF buffer on hw. For

 * more infos on this, check out rfbuffer.h

	/* If it's the first time we set RF buffer, allocate

	 * ah->ah_rf_banks based on ah->ah_rf_banks_size

 Copy values to modify them */

 Bank changed, write down the offset */

 Set Output and Driver bias current (OB/DB) */

		/* For RF511X/RF211X combination we

		 * use b_OB and b_DB parameters stored

		 * in eeprom on ee->ee_ob[ee_mode][0]

		 *

		 * For all other chips we use OB/DB for 2GHz

		 * stored in the b/g modal section just like

 RF5111 always needs OB/DB for 5GHz, even if we use 2GHz */

		/* For 11a, Turbo and XR we need to choose

 Set turbo mode (N/A on RF5413) */

 Bank Modifications (chip-specific) */

 Set gain_F settings according to current step */

			/* We programmed gain_F parameters, switch back

 Bank 6/7 setup */

 Tweak power detectors for half/quarter rate support */

 Set gain_F settings according to current step */

			/* We programmed gain_F parameters, switch back

 Bank 6/7 setup */

 Rev. 1 supports only one xpd */

 Lower synth voltage on Rev 2 */

 Decrease power consumption on 5213+ BaseBand */

 Tweak power detector for half/quarter rates */

 Set optimum value for early revisions (on pci-e chips) */

 Write RF banks on hw */

/**************************\

  PHY/RF channel functions

/**

 * ath5k_hw_rf5110_chan2athchan() - Convert channel freq on RF5110

 * @channel: The &struct ieee80211_channel

 *

 * Map channel frequency to IEEE channel number and convert it

 * to an internal channel value used by the RF5110 chipset.

/**

 * ath5k_hw_rf5110_channel() - Set channel frequency on RF5110

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

	/*

	 * Set the channel and wait

/**

 * ath5k_hw_rf5111_chan2athchan() - Handle 2GHz channels on RF5111/2111

 * @ieee: IEEE channel number

 * @athchan: The &struct ath5k_athchan_2ghz

 *

 * In order to enable the RF2111 frequency converter on RF5111/2111 setups

 * we need to add some offsets and extra flags to the data values we pass

 * on to the PHY. So for every 2GHz channel this function gets called

 * to do the conversion.

 Cast this value to catch negative channel numbers (>= -19) */

	/*

	 * Map 2GHz IEEE channel to 5GHz Atheros channel

/**

 * ath5k_hw_rf5111_channel() - Set channel frequency on RF5111/2111

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

	/*

	 * Set the channel on the RF5111 radio

 Map 2GHz channel to 5GHz Atheros channel ID */

/**

 * ath5k_hw_rf5112_channel() - Set channel frequency on 5112 and newer

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * On RF5112/2112 and newer we don't need to do any conversion.

 * We pass the frequency value after a few modifications to the

 * chip directly.

 *

 * NOTE: Make sure channel frequency given is within our range or else

 * we might damage the chip ! Use ath5k_channel_ok before calling this one.

	/* My guess based on code:

	 * 2GHz RF has 2 synth modes, one with a Local Oscillator

	 * at 2224Hz and one with a LO at 2192Hz. IF is 1520Hz

	 * (3040/2). data0 is used to set the PLL divider and data1

		/* Channel 14 and all frequencies with 2Hz spacing

 Same as (c - 2224) / 5 */

		/* Channel 1 and all frequencies with 5Hz spacing

 Same as (c - 2192) / 5 */

	/* This is more complex, we have a single synthesizer with

	 * 4 reference clock settings (?) based on frequency spacing

	 * and set using data2. LO is at 4800Hz and data0 is again used

	 * to set some divider.

	 *

	 * NOTE: There is an old atheros presentation at Stanford

	 * that mentions a method called dual direct conversion

	 * with 1GHz sliding IF for RF5110. Maybe that's what we

/**

 * ath5k_hw_rf2425_channel() - Set channel frequency on RF2425

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * AR2425/2417 have a different 2GHz RF so code changes

 * a little bit from RF5112.

 ? 5GHz ? */

/**

 * ath5k_hw_channel() - Set a channel on the radio chip

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * This is the main function called to set a channel on the

 * radio chip based on the radio chip version.

	/*

	 * Check bounds supported by the PHY (we don't care about regulatory

	 * restrictions at this point).

	/*

	 * Set the channel and wait

 Set JAPAN setting for channel 14 */

/*****************\

  PHY calibration

/**

 * DOC: PHY Calibration routines

 *

 * Noise floor calibration: When we tell the hardware to

 * perform a noise floor calibration by setting the

 * AR5K_PHY_AGCCTL_NF bit on AR5K_PHY_AGCCTL, it will periodically

 * sample-and-hold the minimum noise level seen at the antennas.

 * This value is then stored in a ring buffer of recently measured

 * noise floor values so we have a moving window of the last few

 * samples. The median of the values in the history is then loaded

 * into the hardware for its own use for RSSI and CCA measurements.

 * This type of calibration doesn't interfere with traffic.

 *

 * AGC calibration: When we tell the hardware to perform

 * an AGC (Automatic Gain Control) calibration by setting the

 * AR5K_PHY_AGCCTL_CAL, hw disconnects the antennas and does

 * a calibration on the DC offsets of ADCs. During this period

 * rx/tx gets disabled so we have to deal with it on the driver

 * part.

 *

 * I/Q calibration: When we tell the hardware to perform

 * an I/Q calibration, it tries to correct I/Q imbalance and

 * fix QAM constellation by sampling data from rxed frames.

 * It doesn't interfere with traffic.

 *

 * For more infos on AGC and I/Q calibration check out patent doc

 * #03/094463.

/**

 * ath5k_hw_read_measured_noise_floor() - Read measured NF from hw

 * @ah: The &struct ath5k_hw

/**

 * ath5k_hw_init_nfcal_hist() - Initialize NF calibration history buffer

 * @ah: The &struct ath5k_hw

/**

 * ath5k_hw_update_nfcal_hist() - Update NF calibration history buffer

 * @ah: The &struct ath5k_hw

 * @noise_floor: The NF we got from hw

/**

 * ath5k_hw_get_median_noise_floor() - Get median NF from history buffer

 * @ah: The &struct ath5k_hw

/**

 * ath5k_hw_update_noise_floor() - Update NF on hardware

 * @ah: The &struct ath5k_hw

 *

 * This is the main function we call to perform a NF calibration,

 * it reads NF from hardware, calculates the median and updates

 * NF on hw.

 keep last value if calibration hasn't completed */

 completed NF calibration, test threshold */

 load noise floor (in .5 dBm) so the hardware will use it */

	/*

	 * Load a high max CCA Power value (-50 dBm in .5 dBm units)

	 * so that we're not capped by the median we just loaded.

	 * This will be used as the initial value for the next noise

	 * floor calibration.

/**

 * ath5k_hw_rf5110_calibrate() - Perform a PHY calibration on RF5110

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * Do a complete PHY calibration (AGC + NF + I/Q) on RF5110

	/*

	 * Disable beacons and RX/TX queues, wait

	/*

	 * Set the channel (with AGC turned off)

	/*

	 * Activate PHY and wait

	/*

	 * Calibrate the radio chip

 Remember normal state */

 Update radio registers */

	/*

	 * Enable calibration and wait until completion

 Reset to normal state */

	/*

	 * Re-enable RX/TX and beacons

/**

 * ath5k_hw_rf511x_iq_calibrate() - Perform I/Q calibration on RF5111 and newer

 * @ah: The &struct ath5k_hw

 Skip if I/Q calibration is not needed or if it's still running */

 Calibration has finished, get the results and re-run */

	/* Work around for empty results which can apparently happen on 5212:

	/* In case i_coffd became zero, cancel calibration

	 * not only it's too small, it'll also result a divide

 Protect against loss of sign bits */

 signed 6 bit */

 signed 5 bit */

 Commit new I/Q values (set enable bit last to match HAL sources) */

	/* Re-enable calibration -if we don't we'll commit

/**

 * ath5k_hw_phy_calibrate() - Perform a PHY calibration

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * The main function we call from above to perform

 * a short or full PHY calibration based on RF chip

 * and current channel

		/* Happens all the time if there is not much

	/* On full calibration request a PAPD probe for

 Update noise floor */

/***************************\

* Spur mitigation functions *

/**

 * ath5k_hw_set_spur_mitigation_filter() - Configure SPUR filter

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * This function gets called during PHY initialization to

 * configure the spur filter for the given channel. Spur is noise

 * generated due to "reflection" effects, for more information on this

 * method check out patent US7643810

 Note: fbin values are scaled up by 2 */

	/* Convert current frequency to fbin value (the same way channels

	 * are stored on EEPROM, check out ath5k_eeprom_bin2freq) and scale

	/* Check if any spur_chan_fbin from EEPROM is

 XXX: Half/Quarter channels ?*/

		/* Note: mask cleans AR5K_EEPROM_NO_SPUR flag

 We need to enable spur filter for this channel */

		/*

		 * Calculate deltas:

		 * spur_freq_sigma_delta -> spur_offset / sample_freq << 21

		 * spur_delta_phase -> spur_offset / chip_freq << 11

		 * Note: Both values have 100Hz resolution

 Both sample_freq and chip_freq are 80MHz */

 Both sample_freq and chip_freq are 20MHz (?) */

 Both sample_freq and chip_freq are 10MHz (?) */

 Both sample_freq and chip_freq are 40MHz */

				/* sample_freq -> 40MHz chip_freq -> 44MHz

 Calculate pilot and magnitude masks */

		/* Scale up spur_offset by 1000 to switch to 100HZ resolution

		 * and divide by symbol_width to find how many symbols we have

 Spur is on a symbol if num_symbols_x16 % 16 is zero */

 _X_ */

 _xx_ */

 Calculate pilot mask */

			/* Pilot magnitude mask seems to be a way to

			 * declare the boundaries for our detection

			 * window or something, it's 2 for the middle

			 * value(s) where the symbol is expected to be

 Calculate magnitude mask (for viterbi decoder) */

 Write settings on hw to enable spur filter */

 XXX: Self correlator also ? */

 Set delta phase and freq sigma delta */

 Write pilot masks */

 Write magnitude masks */

 Clean up spur mitigation settings and disable filter */

 Clear pilot masks */

 Clear magnitude masks */

/*****************\

* Antenna control *

/**

 * DOC: Antenna control

 *

 * Hw supports up to 14 antennas ! I haven't found any card that implements

 * that. The maximum number of antennas I've seen is up to 4 (2 for 2GHz and 2

 * for 5GHz). Antenna 1 (MAIN) should be omnidirectional, 2 (AUX)

 * omnidirectional or sectorial and antennas 3-14 sectorial (or directional).

 *

 * We can have a single antenna for RX and multiple antennas for TX.

 * RX antenna is our "default" antenna (usually antenna 1) set on

 * DEFAULT_ANTENNA register and TX antenna is set on each TX control descriptor

 * (0 for automatic selection, 1 - 14 antenna number).

 *

 * We can let hw do all the work doing fast antenna diversity for both

 * tx and rx or we can do things manually. Here are the options we have

 * (all are bits of STA_ID1 register):

 *

 * AR5K_STA_ID1_DEFAULT_ANTENNA -> When 0 is set as the TX antenna on TX

 * control descriptor, use the default antenna to transmit or else use the last

 * antenna on which we received an ACK.

 *

 * AR5K_STA_ID1_DESC_ANTENNA -> Update default antenna after each TX frame to

 * the antenna on which we got the ACK for that frame.

 *

 * AR5K_STA_ID1_RTS_DEF_ANTENNA -> Use default antenna for RTS or else use the

 * one on the TX descriptor.

 *

 * AR5K_STA_ID1_SELFGEN_DEF_ANT -> Use default antenna for self generated frames

 * (ACKs etc), or else use current antenna (the one we just used for TX).

 *

 * Using the above we support the following scenarios:

 *

 * AR5K_ANTMODE_DEFAULT -> Hw handles antenna diversity etc automatically

 *

 * AR5K_ANTMODE_FIXED_A	-> Only antenna A (MAIN) is present

 *

 * AR5K_ANTMODE_FIXED_B	-> Only antenna B (AUX) is present

 *

 * AR5K_ANTMODE_SINGLE_AP -> Sta locked on a single ap

 *

 * AR5K_ANTMODE_SECTOR_AP -> AP with tx antenna set on tx desc

 *

 * AR5K_ANTMODE_SECTOR_STA -> STA with tx antenna set on tx desc

 *

 * AR5K_ANTMODE_DEBUG Debug mode -A -> Rx, B-> Tx-

 *

 * Also note that when setting antenna to F on tx descriptor card inverts

 * current tx antenna.

/**

 * ath5k_hw_set_def_antenna() - Set default rx antenna on AR5211/5212 and newer

 * @ah: The &struct ath5k_hw

 * @ant: Antenna number

/**

 * ath5k_hw_set_fast_div() -  Enable/disable fast rx antenna diversity

 * @ah: The &struct ath5k_hw

 * @ee_mode: One of enum ath5k_driver_mode

 * @enable: True to enable, false to disable

		/* XXX: This is set to

/**

 * ath5k_hw_set_antenna_switch() - Set up antenna switch table

 * @ah: The &struct ath5k_hw

 * @ee_mode: One of enum ath5k_driver_mode

 *

 * Switch table comes from EEPROM and includes information on controlling

 * the 2 antenna RX attenuators

	/*

	 * In case a fixed antenna was set as default

	 * use the same switch table twice.

 Set antenna idle switch table */

 Set antenna switch tables */

/**

 * ath5k_hw_set_antenna_mode() -  Set antenna operating mode

 * @ah: The &struct ath5k_hw

 * @ant_mode: One of enum ath5k_ant_mode

	/* if channel is not initialized yet we can't set the antennas

 updated on tx */

 variable */

 variable */

	/* Note: set diversity before default antenna

/****************\

* TX power setup *

/*

 * Helper functions

/**

 * ath5k_get_interpolated_value() - Get interpolated Y val between two points

 * @target: X value of the middle point

 * @x_left: X value of the left point

 * @x_right: X value of the right point

 * @y_left: Y value of the left point

 * @y_right: Y value of the right point

	/* Avoid divide by zero and skip interpolation

	/*

	 * Since we use ints and not fps, we need to scale up in

	 * order to get a sane ratio value (or else we 'll eg. get

	 * always 1 instead of 1.25, 1.75 etc). We scale up by 100

	 * to have some accuracy both for 0.5 and 0.25 steps.

 Now scale down to be in range */

/**

 * ath5k_get_linear_pcdac_min() - Find vertical boundary (min pwr) for the

 * linear PCDAC curve

 * @stepL: Left array with y values (pcdac steps)

 * @stepR: Right array with y values (pcdac steps)

 * @pwrL: Left array with x values (power steps)

 * @pwrR: Right array with x values (power steps)

 *

 * Since we have the top of the curve and we draw the line below

 * until we reach 1 (1 pcdac step) we need to know which point

 * (x value) that is so that we don't go below x axis and have negative

 * pcdac values when creating the curve, or fill the table with zeros.

 Some vendors write the same pcdac value twice !!! */

 Keep the right boundary so that it works for both curves */

/**

 * ath5k_create_power_curve() - Create a Power to PDADC or PCDAC curve

 * @pmin: Minimum power value (xmin)

 * @pmax: Maximum power value (xmax)

 * @pwr: Array of power steps (x values)

 * @vpd: Array of matching PCDAC/PDADC steps (y values)

 * @num_points: Number of provided points

 * @vpd_table: Array to fill with the full PCDAC/PDADC values (y values)

 * @type: One of enum ath5k_powertable_type (eeprom.h)

 *

 * Interpolate (pwr,vpd) points to create a Power to PDADC or a

 * Power to PCDAC curve.

 *

 * Each curve has power on x axis (in 0.5dB units) and PCDAC/PDADC

 * steps (offsets) on y axis. Power can go up to 31.5dB and max

 * PCDAC/PDADC step for each curve is 64 but we can write more than

 * one curves on hw so we can go up to 128 (which is the max step we

 * can write on the final table).

 *

 * We write y values (PCDAC/PDADC steps) on hw.

	/* We want the whole line, so adjust boundaries

	 * to cover the entire power range. Note that

	 * power values are already 0.25dB so no need

	/* Find surrounding turning points (TPs)

		/* We passed the right TP, move to the next set of TPs

		 * if we pass the last TP, extrapolate above using the last

		/* Increase by 0.5dB

/**

 * ath5k_get_chan_pcal_surrounding_piers() - Get surrounding calibration piers

 * for a given channel.

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 * @pcinfo_l: The &struct ath5k_chan_pcal_info to put the left cal. pier

 * @pcinfo_r: The &struct ath5k_chan_pcal_info to put the right cal. pier

 *

 * Get the surrounding per-channel power calibration piers

 * for a given frequency so that we can interpolate between

 * them and come up with an appropriate dataset for our current

 * channel.

	/* Frequency is below our calibrated

	 * range. Use the lowest power curve

	/* Frequency is above our calibrated

	 * range. Use the highest power curve

	/* Frequency is inside our calibrated

	 * channel range. Pick the surrounding

	 * calibration piers so that we can

		/* Frequency matches one of our calibration

		 * piers, no need to interpolate, just use

		/* We found a calibration pier that's above

		 * frequency, use this pier and the previous

/**

 * ath5k_get_rate_pcal_data() - Get the interpolated per-rate power

 * calibration data

 * @ah: The &struct ath5k_hw *ah,

 * @channel: The &struct ieee80211_channel

 * @rates: The &struct ath5k_rate_pcal_info to fill

 *

 * Get the surrounding per-rate power calibration data

 * for a given frequency and interpolate between power

 * values to set max target power supported by hw for

 * each rate on this frequency.

	/* Get the surrounding calibration

 Now interpolate power value, based on the frequency */

/**

 * ath5k_get_max_ctl_power() - Get max edge power for a given frequency

 * @ah: the &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * Get the max edge power for this channel if

 * we have such data from EEPROM's Conformance Test

 * Limits (CTL), and limit max power if needed.

	/* If we have a CTL dataset available grab it and find the

	/* Edge powers are sorted by frequency from lower

	 * to higher. Each CTL corresponds to 8 edge power

	/* Don't do boundaries check because we

	 * might have more that one bands defined

	/* Get the edge power that's closer to our

/*

 * Power to PCDAC table functions

/**

 * DOC: Power to PCDAC table functions

 *

 * For RF5111 we have an XPD -eXternal Power Detector- curve

 * for each calibrated channel. Each curve has 0,5dB Power steps

 * on x axis and PCDAC steps (offsets) on y axis and looks like an

 * exponential function. To recreate the curve we read 11 points

 * from eeprom (eeprom.c) and interpolate here.

 *

 * For RF5112 we have 4 XPD -eXternal Power Detector- curves

 * for each calibrated channel on 0, -6, -12 and -18dBm but we only

 * use the higher (3) and the lower (0) curves. Each curve again has 0.5dB

 * power steps on x axis and PCDAC steps on y axis and looks like a

 * linear function. To recreate the curve and pass the power values

 * on hw, we get 4 points for xpd 0 (lower gain -> max power)

 * and 3 points for xpd 3 (higher gain -> lower power) from eeprom (eeprom.c)

 * and interpolate here.

 *

 * For a given channel we get the calibrated points (piers) for it or

 * -if we don't have calibration data for this specific channel- from the

 * available surrounding channels we have calibration data for, after we do a

 * linear interpolation between them. Then since we have our calibrated points

 * for this channel, we do again a linear interpolation between them to get the

 * whole curve.

 *

 * We finally write the Y values of the curve(s) (the PCDAC values) on hw

/**

 * ath5k_fill_pwr_to_pcdac_table() - Fill Power to PCDAC table on RF5111

 * @ah: The &struct ath5k_hw

 * @table_min: Minimum power (x min)

 * @table_max: Maximum power (x max)

 *

 * No further processing is needed for RF5111, the only thing we have to

 * do is fill the values below and above calibration range since eeprom data

 * may not cover the entire PCDAC table.

 Get table boundaries */

 Extrapolate below minimum using pcdac_0 */

 Copy values from pcdac_tmp */

 Extrapolate above maximum */

/**

 * ath5k_combine_linear_pcdac_curves() - Combine available PCDAC Curves

 * @ah: The &struct ath5k_hw

 * @table_min: Minimum power (x min)

 * @table_max: Maximum power (x max)

 * @pdcurves: Number of pd curves

 *

 * Combine available XPD Curves and fill Linear Power to PCDAC table on RF5112

 * RFX112 can have up to 2 curves (one for low txpower range and one for

 * higher txpower range). We need to put them both on pcdac_out and place

 * them in the correct location. In case we only have one curve available

 * just fit it on pcdac_out (it's supposed to cover the entire range of

 * available pwr levels since it's always the higher power curve). Extrapolate

 * below and above final table if needed.

	/* Edge flag turns on the 7nth bit on the PCDAC

	 * to declare the higher power curve (force values

	 * to be greater than 64). If we only have one curve

	 * we don't need to set this, if we have 2 curves and

	 * fill the table backwards this can also be used to

	/* When we have only one curve available

	 * that's the higher power curve. If we have

	 * two curves the first is the high power curve

		/* If table size goes beyond 31.5dB, keep the

		 * upper 31.5dB range when setting tx power.

		/* Since we fill table backwards

 Zeroed */

 This is used when setting tx power*/

 Fill Power to PCDAC table backwards */

		/* Entering lower power range, reset

		 * edge flag and set pcdac_tmp to lower

		/* Don't go below 1, extrapolate below if we have

		 * already switched to the lower power curve -or

		 * we only have one curve and edge_flag is zero

		/* Extrapolate above if pcdac is greater than

		 * 126 -this can happen because we OR pcdac_out

 Decrease by a 0.5dB step */

/**

 * ath5k_write_pcdac_table() - Write the PCDAC values on hw

 * @ah: The &struct ath5k_hw

	/*

	 * Write TX power values

/*

 * Power to PDADC table functions

/**

 * DOC: Power to PDADC table functions

 *

 * For RF2413 and later we have a Power to PDADC table (Power Detector)

 * instead of a PCDAC (Power Control) and 4 pd gain curves for each

 * calibrated channel. Each curve has power on x axis in 0.5 db steps and

 * PDADC steps on y axis and looks like an exponential function like the

 * RF5111 curve.

 *

 * To recreate the curves we read the points from eeprom (eeprom.c)

 * and interpolate here. Note that in most cases only 2 (higher and lower)

 * curves are used (like RF5112) but vendors have the opportunity to include

 * all 4 curves on eeprom. The final curve (higher power) has an extra

 * point for better accuracy like RF5112.

 *

 * The process is similar to what we do above for RF5111/5112

/**

 * ath5k_combine_pwr_to_pdadc_curves() - Combine the various PDADC curves

 * @ah: The &struct ath5k_hw

 * @pwr_min: Minimum power (x min)

 * @pwr_max: Maximum power (x max)

 * @pdcurves: Number of available curves

 *

 * Combine the various pd curves and create the final Power to PDADC table

 * We can have up to 4 pd curves, we need to do a similar process

 * as we do for RF5112. This time we don't have an edge_flag but we

 * set the gain boundaries on a separate register.

	/* Note: Register value is initialized on initvals

	 * there is no feedback from hw.

 Create final PDADC table */

			/* 2 dB boundary stretch for last

			/* Set gain boundary in the middle

		/* Sanity check in case our 2 db stretch got out of

		/* For the first curve (lower power)

 For the other curves use the gain overlap */

 Force each power step to be at least 0.5 dB */

		/* If pdadc_0 is negative, we need to extrapolate

 Set last pwr level, using gain boundaries */

 Limit it to be inside pwr range */

 Fill pdadc_out table */

 Need to extrapolate above this pdgain? */

 Force each power step to be at least 0.5 dB */

 Extrapolate above */

 Set gain boundaries */

 Used for setting rate power table */

/**

 * ath5k_write_pwr_to_pdadc_table() - Write the PDADC values on hw

 * @ah: The &struct ath5k_hw

 * @ee_mode: One of enum ath5k_driver_mode

 Select the right pdgain curves */

 Clear current settings */

	/*

	 * Use pd_gains curve from eeprom

	 *

	 * This overrides the default setting from initvals

	 * in case some vendors (e.g. Zcomax) don't use the default

	 * curves. If we don't honor their settings we 'll get a

	 * 5dB (1 * gain overlap ?) drop.

	/*

	 * Write TX power values

/*

 * Common code for PCDAC/PDADC tables

/**

 * ath5k_setup_channel_powertable() - Set up power table for this channel

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 * @ee_mode: One of enum ath5k_driver_mode

 * @type: One of enum ath5k_powertable_type (eeprom.h)

 *

 * This is the main function that uses all of the above

 * to set PCDAC/PDADC table on hw for the current channel.

 * This table is used for tx power calibration on the baseband,

 * without it we get weird tx power levels and in some cases

 * distorted spectral mask

 Get surrounding freq piers for this channel */

	/* Loop over pd gain curves on

		/* Fill curves in reverse order

		 * from lower power (max gain)

		 * to higher power. Use curve -> idx

 Grab the needed curves by index */

 Initialize the temp tables */

		/* Set curve's x boundaries and create

		 * curves so that they cover the same

		 * range (if we don't do that one table

		 * will have values on some range and the

		 * other one won't have any so interpolation

		/* Now create the curves on surrounding channels

		 * and interpolate if needed to get the final

			/* Override min/max so that we don't loose

			/* Override minimum so that we don't get

			 * out of bounds while extrapolating

			 * below. Don't do this when we have 2

			 * curves and we are on the high power curve

				/* Don't go too low because we will

				 * miss the upper part of the curve.

				 * Note: 126 = 31.5dB (max power supported)

			/* We are in a calibration

			 * pier, no need to interpolate

		/* Interpolate between curves

		 * of surrounding freq piers to

		 * get the final curve for this

		 * pd gain. Re-use tmpL for interpolation

	/* Now we have a set of curves for this

	 * channel on tmpL (x range is table_max - table_min

	 * and y values are tmpL[pdg][]) sorted in the same

	 * order as EEPROM (because we've used the backmapping).

	 * So for RF5112 it's from higher power to lower power

	 * and for RF2413 it's from lower power to higher power.

	/* Fill min and max power levels for this

	 * channel by interpolating the values on

 Fill PCDAC/PDADC table */

		/* For RF5112 we can have one or two curves

		 * and each curve covers a certain power lvl

		/* Set txp.offset so that we can

		 * match max power value with max

		/* We are done for RF5111 since it has only

 No rate powertable adjustment for RF5111 */

		/* Set PDADC boundaries and fill

		/* Set txp.offset, note that table_min

/**

 * ath5k_write_channel_powertable() - Set power table for current channel on hw

 * @ah: The &struct ath5k_hw

 * @ee_mode: One of enum ath5k_driver_mode

 * @type: One of enum ath5k_powertable_type (eeprom.h)

/**

 * DOC: Per-rate tx power setting

 *

 * This is the code that sets the desired tx power limit (below

 * maximum) on hw for each rate (we also have TPC that sets

 * power per packet type). We do that by providing an index on the

 * PCDAC/PDADC table we set up above, for each rate.

 *

 * For now we only limit txpower based on maximum tx power

 * supported by hw (what's inside rate_info) + conformance test

 * limits. We need to limit this even more, based on regulatory domain

 * etc to be safe. Normally this is done from above so we don't care

 * here, all we care is that the tx power we set will be O.K.

 * for the hw (e.g. won't create noise on PA etc).

 *

 * Rate power table contains indices to PCDAC/PDADC table (0.5dB steps -

 * x values) and is indexed as follows:

 * rates[0] - rates[7] -> OFDM rates

 * rates[8] - rates[14] -> CCK rates

 * rates[15] -> XR rates (they all have the same power)

/**

 * ath5k_setup_rate_powertable() - Set up rate power table for a given tx power

 * @ah: The &struct ath5k_hw

 * @max_pwr: The maximum tx power requested in 0.5dB steps

 * @rate_info: The &struct ath5k_rate_pcal_info to fill

 * @ee_mode: One of enum ath5k_driver_mode

	/* max_pwr is power level we got from driver/user in 0.5dB

 apply rate limits */

 OFDM rates 6 to 24Mb/s */

 Rest OFDM rates */

 CCK rates */

 1L */

 2L */

 2S */

 5L */

 5S */

 11L */

 11S */

 XR rates */

	/* CCK rates have different peak to average ratio

	 * so we have to tweak their power so that gainf

	 * correction works ok. For this we use OFDM to

	/* Save min/max and current tx power for this channel

	 * in 0.25dB units.

	 *

	 * Note: We use rates[0] for current tx power because

	 * it covers most of the rates, in most cases. It's our

	/* Set max txpower for correct OFDM operation on all rates

	 * -that is the txpower for 54Mbit-, it's used for the PAPD

	/* Now that we have all rates setup use table offset to

	 * match the power range set by user with the power indices

 Don't get out of bounds */

/**

 * ath5k_hw_txpower() - Set transmission power limit for a given channel

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 * @txpower: Requested tx power in 0.5dB steps

 *

 * Combines all of the above to set the requested tx power limit

 * on hw.

 Initialize TX power table */

 TODO */

	/*

	 * If we don't change channel/mode skip tx powertable calculation

	 * and use the cached one.

		/* Reset TX power values but preserve requested

 Restore TPC setting and requested tx power */

 Calculate the powertable */

 Write table on hw */

 Limit max power if we have a CTL available */

 FIXME: Antenna reduction stuff */

 FIXME: Limit power on turbo modes */

 FIXME: TPC scale reduction */

	/* Get surrounding channels for per-rate power table

 Setup rate power table */

 Write rate power table on hw */

 FIXME: TPC support */

/**

 * ath5k_hw_set_txpower_limit() - Set txpower limit for the current channel

 * @ah: The &struct ath5k_hw

 * @txpower: The requested tx power limit in 0.5dB steps

 *

 * This function provides access to ath5k_hw_txpower to the driver in

 * case user or an application changes it while PHY is running.

/*************\

 Init function

/**

 * ath5k_hw_phy_init() - Initialize PHY

 * @ah: The &struct ath5k_hw

 * @channel: The @struct ieee80211_channel

 * @mode: One of enum ath5k_driver_mode

 * @fast: Try a fast channel switch instead

 *

 * This is the main function used during reset to initialize PHY

 * or do a fast channel change if possible.

 *

 * NOTE: Do not call this one from the driver, it assumes PHY is in a

 * warm reset state !

	/*

	 * Sanity check for fast flag

	 * Don't try fast channel change when changing modulation

	 * mode/band. We check for chip compatibility on

	 * ath5k_hw_reset.

	/*

	 * On fast channel change we only set the synth parameters

	 * while PHY is running, enable calibration and skip the rest.

 Failed */

 Set channel and wait for synth */

	/*

	 * Set TX power

	 *

	 * Note: We need to do that before we set

	 * RF buffer settings on 5211/5212+ so that we

	 * properly set curve indices.

 Write OFDM timings on 5212*/

		/* Spur info is available only from EEPROM versions

		 * greater than 5.3, but the EEPROM routines will use

	/* If we used fast channel switching

	 * we are done, release RF bus and

	 * fire up NF calibration.

	 *

	 * Note: Only NF calibration due to

	 * channel change, not AGC calibration

	 * since AGC is still running !

		/*

		 * Release RF Bus grant

		/*

		 * Start NF calibration

	/*

	 * For 5210 we do all initialization using

	 * initvals, so we don't have to modify

	 * any settings (5210 also only supports

	 * a/aturbo modes)

		/*

		 * Write initial RF gain settings

		 * This should work for both 5111/5112

		/*

		 * Write RF buffer

		/*Enable/disable 802.11b mode on 5111

 Disable phy and wait */

 Set channel on PHY */

	/*

	 * Enable the PHY and wait until completion

	 * This includes BaseBand and Synthesizer

	 * activation.

	/*

	 * Perform ADC test to see if baseband is ready

	 * Set tx hold and check adc test register

	/*

	 * Start automatic gain control calibration

	 *

	 * During AGC calibration RX path is re-routed to

	 * a power detector so we don't receive anything.

	 *

	 * This method is used to calibrate some static offsets

	 * used together with on-the fly I/Q calibration (the

	 * one performed via ath5k_hw_phy_calibrate), which doesn't

	 * interrupt rx path.

	 *

	 * While rx path is re-routed to the power detector we also

	 * start a noise floor calibration to measure the

	 * card's noise floor (the noise we measure when we are not

	 * transmitting or receiving anything).

	 *

	 * If we are in a noisy environment, AGC calibration may time

	 * out and/or noise floor calibration might timeout.

	/* At the same time start I/Q calibration for QAM constellation

	/* Wait for gain calibration to finish (we check for I/Q calibration

 Restore antenna mode */

/*

 * Copyright (c) 2004-2008 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2008 Nick Kossifidis <mickflemm@gmail.com>

 * Copyright (c) 2007-2008 Luis Rodriguez <mcgrof@winlab.rutgers.edu>

 * Copyright (c) 2007-2008 Pavel Roskin <proski@gnu.org>

 * Copyright (c) 2007-2008 Jiri Slaby <jirislaby@gmail.com>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/****************************\

  Reset function and helpers

 To determine if a card is pci-e */

/**

 * DOC: Reset function and helpers

 *

 * Here we implement the main reset routine, used to bring the card

 * to a working state and ready to receive. We also handle routines

 * that don't fit on other places such as clock, sleep and power control

/******************\

* Helper functions *

/**

 * ath5k_hw_register_timeout() - Poll a register for a flag/field change

 * @ah: The &struct ath5k_hw

 * @reg: The register to read

 * @flag: The flag/field to check on the register

 * @val: The field value we expect (if we check a field)

 * @is_set: Instead of checking if the flag got cleared, check if it got set

 *

 * Some registers contain flags that indicate that an operation is

 * running. We use this function to poll these registers and check

 * if these flags get cleared. We also use it to poll a register

 * field (containing multiple flags) until it gets a specific value.

 *

 * Returns -EAGAIN if we exceeded AR5K_TUNE_REGISTER_TIMEOUT * 15us or 0

/*************************\

* Clock related functions *

/**

 * ath5k_hw_htoclock() - Translate usec to hw clock units

 * @ah: The &struct ath5k_hw

 * @usec: value in microseconds

 *

 * Translate usecs to hw clock units based on the current

 * hw clock rate.

 *

 * Returns number of clock units

/**

 * ath5k_hw_clocktoh() - Translate hw clock units to usec

 * @ah: The &struct ath5k_hw

 * @clock: value in hw clock units

 *

 * Translate hw clock units to usecs based on the current

 * hw clock rate.

 *

 * Returns number of usecs

/**

 * ath5k_hw_init_core_clock() - Initialize core clock

 * @ah: The &struct ath5k_hw

 *

 * Initialize core clock parameters (usec, usec32, latencies etc),

 * based on current bwmode and chipset properties.

	/*

	 * Set core clock frequency

	/* Use clock multiplier for non-default

	/*

	 * Set USEC parameters

 Set USEC counter on PCU*/

 Set usec duration on DCU */

 Set 32MHz USEC counter */

 Remain on 40MHz clock ? */

	/*

	 * Set tx/rx latencies

	/*

	 * Set default Tx frame to Tx data start delay

	/*

	 * 5210 initvals don't include usec settings

	 * so we need to use magic values here for

	 * tx/rx latencies

 same for turbo */

		/* 5311 has different tx/rx latency masks

		 * from 5211, since we deal 5311 the same

		 * as 5211 when setting initvals, shift

		 * values here to their proper locations

		 *

		 * Note: Initvals indicate tx/rx/ latencies

 On 5112 set tx frame to tx data start delay */

/**

 * ath5k_hw_set_sleep_clock() - Setup sleep clock operation

 * @ah: The &struct ath5k_hw

 * @enable: Enable sleep clock operation (false to disable)

 *

 * If there is an external 32KHz crystal available, use it

 * as ref. clock instead of 32/40MHz clock and baseband clocks

 * to save power during sleep or restore normal 32/40MHz

 * operation.

 *

 * NOTE: When operating on 32KHz certain PHY registers (27 - 31,

 * 123 - 127) require delay on access.

	/* Only set 32KHz settings if we have an external

 1 usec/cycle */

 Set up tsf increment on each cycle */

		/* Set baseband sleep control registers

 Enable sleep clock operation */

		/* Disable sleep clock operation and

 Set DAC/ADC delays */

 Set up tsf increment on each cycle */

/*********************\

* Reset/Sleep control *

/**

 * ath5k_hw_nic_reset() - Reset the various chipset units

 * @ah: The &struct ath5k_hw

 * @val: Mask to indicate what units to reset

 *

 * To reset the various chipset units we need to write

 * the mask to AR5K_RESET_CTL and poll the register until

 * all flags are cleared.

 *

 * Returns 0 if we are O.K. or -EAGAIN (from athk5_hw_register_timeout)

 Read-and-clear RX Descriptor Pointer*/

	/*

	 * Reset the device and wait until success

 Wait at least 128 PCI clocks */

	/*

	 * Reset configuration register (for hw byte-swap). Note that this

	 * is only set for big endian. We do the necessary magic in

	 * AR5K_INIT_CFG.

/**

 * ath5k_hw_wisoc_reset() -  Reset AHB chipset

 * @ah: The &struct ath5k_hw

 * @flags: Mask to indicate what units to reset

 *

 * Same as ath5k_hw_nic_reset but for AHB based devices

 *

 * Returns 0 if we are O.K. or -EAGAIN (from athk5_hw_register_timeout)

 ah->ah_mac_srev is not available at this point yet */

 Put BB/MAC into reset */

 NB: should be atomic */

 Bring BB/MAC out of reset */

	/*

	 * Reset configuration register (for hw byte-swap). Note that this

	 * is only set for big endian. We do the necessary magic in

	 * AR5K_INIT_CFG.

/**

 * ath5k_hw_set_power_mode() - Set power mode

 * @ah: The &struct ath5k_hw

 * @mode: One of enum ath5k_power_mode

 * @set_chip: Set to true to write sleep control register

 * @sleep_duration: How much time the device is allowed to sleep

 * when sleep logic is enabled (in 128 microsecond increments).

 *

 * This function is used to configure sleep policy and allowed

 * sleep modes. For more information check out the sleep control

 * register on reg.h and STA_ID1.

 *

 * Returns 0 on success, -EIO if chip didn't wake up or -EINVAL if an invalid

 * mode is requested.

		/* If card is down we 'll get 0xffff... so we

		 * need to clean this up before we write the register

 Preserve sleep duration etc */

 Check if the chip did wake up */

 Wait a bit and retry */

 Fail if the chip didn't wake up */

/**

 * ath5k_hw_on_hold() - Put device on hold

 * @ah: The &struct ath5k_hw

 *

 * Put MAC and Baseband on warm reset and keep that state

 * (don't clean sleep control register). After this MAC

 * and Baseband are disabled and a full reset is needed

 * to come back. This way we save as much power as possible

 * without putting the card on full sleep.

 *

 * Returns 0 on success or -EIO on error

 Make sure device is awake */

	/*

	 * Put chipset on warm reset...

	 *

	 * Note: putting PCI core on warm reset on PCI-E cards

	 * results card to hang and always return 0xffff... so

	 * we ignore that flag for PCI-E cards. On PCI cards

	 * this flag gets cleared after 64 PCI clocks.

 ...wakeup again!*/

/**

 * ath5k_hw_nic_wakeup() - Force card out of sleep

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * Bring up MAC + PHY Chips and program PLL

 * NOTE: Channel is NULL for the initial wakeup.

 *

 * Returns 0 on success, -EIO on hw failure or -EINVAL for false channel infos

 Wakeup the device */

	/*

	 * Put chipset on warm reset...

	 *

	 * Note: putting PCI core on warm reset on PCI-E cards

	 * results card to hang and always return 0xffff... so

	 * we ignore that flag for PCI-E cards. On PCI cards

	 * this flag gets cleared after 64 PCI clocks.

 ...wakeup again!...*/

	/* ...reset configuration register on Wisoc ...

	 * ...clear reset control register and pull device out of

	/* On initialization skip PLL programming since we don't have

		/*

		 * Get channel mode flags

Zero*/

Zero*/

				/* XXX Dynamic OFDM/CCK is not supported by the

				 * AR5211 so we set MOD_OFDM for plain g (no

				 * CCK headers) operation. We need to test

				 * this, 5211 might support ofdm-only g after

				 * all, there are also initial register values

				 * in the code for g mode (see initvals.c).

 Different PLL setting for 5413 */

		/*XXX: Can bwmode be used with dynamic mode ?

 On 2425 initvals TURBO_SHORT is not present */

 Reset the device */

 ...enable Atheros turbo mode if requested */

 ...update PLL if needed */

 ...set the PHY operating mode */

/**************************************\

* Post-initvals register modifications *

/**

 * ath5k_hw_tweak_initval_settings() - Tweak initial settings

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * Some settings are not handled on initvals, e.g. bwmode

 * settings, some phy settings, workarounds etc that in general

 * don't fit anywhere else or are too small to introduce a separate

 * function for each one. So we have this function to handle

 * them all during reset and complete card's initialization.

 Setup ADC control */

 Disable barker RSSI threshold */

 Set the mute mask */

 Clear PHY_BLUETOOTH to allow RX_CLEAR line debug */

 Enable DCU double buffering */

 Set fast ADC */

 Only update if needed */

 Fix for first revision of the RF5112 RF chipset */

 Clear QCU/DCU clock gating register */

 Set DAC/ADC delays */

 Enable PCU FIFO corruption ECO */

		/* Increase PHY switch and AGC settling time

		 * on turbo mode (ath5k_hw_commit_eeprom_settings

			/* XXX: Initvals indicate we only increase

			 * switch time on AR5212, 5211 and 5210

 Set Frame Control Register */

 On 5413 PHY force window length for half/quarter rate*/

 Set Frame Control Register for normal operation */

/**

 * ath5k_hw_commit_eeprom_settings() - Commit settings from EEPROM

 * @ah: The &struct ath5k_hw

 * @channel: The &struct ieee80211_channel

 *

 * Use settings stored on EEPROM to properly initialize the card

 * based on various infos and per-mode calibration data.

 TODO: Add support for AR5210 EEPROM */

 Adjust power delta for channel 14 */

	/* Set CCK to OFDM power delta on tx power

		/* For older revs we scale power on sw during tx power

	/* XXX: necessary here? is called from ath5k_hw_set_antenna_mode()

 Noise floor threshold */

 Switch settling time (Turbo) */

 Tx/Rx attenuation (Turbo) */

 ADC/PGA desired size (Turbo) */

 Tx/Rx margin (Turbo) */

 Switch settling time */

 Tx/Rx attenuation */

 ADC/PGA desired size */

 Tx/Rx margin */

 XPA delays */

 XLNA delay */

 Thresh64 (ANI) */

	/* False detect backoff for channels

	 * that have spur noise. Write the new

 I/Q correction (set enable bit last to match HAL sources) */

 TODO: Per channel i/q infos ? */

 Heavy clipping -disable for now */

/*********************\

* Main reset function *

/**

 * ath5k_hw_reset() - The main reset function

 * @ah: The &struct ath5k_hw

 * @op_mode: One of enum nl80211_iftype

 * @channel: The &struct ieee80211_channel

 * @fast: Enable fast channel switching

 * @skip_pcu: Skip pcu initialization

 *

 * This is the function we call each time we want to (re)initialize the

 * card and pass new settings to hw. We also call it when hw runs into

 * trouble to make it come back to a working state.

 *

 * Returns 0 on success, -EINVAL on false op_mode or channel infos, or -EIO

 * on failure.

	/*

	 * Sanity check for fast flag

	 * Fast channel change only available

	 * on AR2413/AR5413.

	/* Disable sleep clock operation

	 * to avoid register access delay on certain

	/*

	 * If driver requested fast channel change and DMA has stopped

	 * go on. If it fails continue with a normal reset.

			/* Non fatal, can happen eg.

	/*

	 * Save some registers before a reset

		/*

		 * Save frame sequence count

		 * For revs. after Oahu, only save

		 * seq num for DCU 0 (Global seq num)

		/* TSF accelerates on AR5211 during reset

		 * As a workaround save it here and restore

		 * it later so that it's back in time after

		 * reset. This way it'll get re-synced on the

		 * next beacon without breaking ad-hoc.

		 *

		 * On AR5212 TSF is almost preserved across a

		 * reset so it stays back in time anyway and

		 * we don't have to save/restore it.

		 *

		 * XXX: Since this breaks power saving we have

		 * to disable power saving until we receive the

GPIOs*/

	/*

	 * Since we are going to write rf buffer

	 * check if we have any pending gain_F

	 * optimization settings

 Wakeup the device */

 PHY access enable */

 Write initial settings */

 Initialize core clock settings */

	/*

	 * Tweak initval settings for revised

	 * chipsets and add some more config

	 * bits

 Commit values from EEPROM */

	/*

	 * Restore saved values

 Seqnum, TSF */

 Ledstate */

 Gpio settings */

	/*

	 * Initialize PCU

	/*

	 * Initialize PHY

	/*

	 * Configure QCUs/DCUs

	/*

	 * Initialize DMA/Interrupts

	/*

	 * Enable 32KHz clock function for AR5212+ chips

	 * Set clocks to 32KHz operation and use an

	 * external 32KHz crystal when sleeping if one

	 * exists.

	 * Disabled by default because it is also disabled in

	 * other drivers and it is known to cause stability

	 * issues on some devices

	/*

	 * Disable beacons and reset the TSF

/*

 * Copyright (c) 2004-2008 Reyk Floeter <reyk@openbsd.org>

 * Copyright (c) 2006-2008 Nick Kossifidis <mickflemm@gmail.com>

 * Copyright (c) 2007-2008 Matthew W. S. Bell  <mentor@madwifi.org>

 * Copyright (c) 2007-2008 Luis Rodriguez <mcgrof@winlab.rutgers.edu>

 * Copyright (c) 2007-2008 Pavel Roskin <proski@gnu.org>

 * Copyright (c) 2007-2008 Jiri Slaby <jirislaby@gmail.com>

 *

 * Permission to use, copy, modify, and distribute this software for any

 * purpose with or without fee is hereby granted, provided that the above

 * copyright notice and this permission notice appear in all copies.

 *

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES

 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR

 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES

 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

 *

/*********************************\

* Protocol Control Unit Functions *

/**

 * DOC: Protocol Control Unit (PCU) functions

 *

 * Protocol control unit is responsible to maintain various protocol

 * properties before a frame is send and after a frame is received to/from

 * baseband. To be more specific, PCU handles:

 *

 * - Buffering of RX and TX frames (after QCU/DCUs)

 *

 * - Encrypting and decrypting (using the built-in engine)

 *

 * - Generating ACKs, RTS/CTS frames

 *

 * - Maintaining TSF

 *

 * - FCS

 *

 * - Updating beacon data (with TSF etc)

 *

 * - Generating virtual CCA

 *

 * - RX/Multicast filtering

 *

 * - BSSID filtering

 *

 * - Various statistics

 *

 * -Different operating modes: AP, STA, IBSS

 *

 * Note: Most of these functions can be tweaked/bypassed so you can do

 * them on sw above for debugging or research. For more infos check out PCU

 * registers on reg.h.

/**

 * DOC: ACK rates

 *

 * AR5212+ can use higher rates for ack transmission

 * based on current tx rate instead of the base rate.

 * It does this to better utilize channel usage.

 * There is a mapping between G rates (that cover both

 * CCK and OFDM) and ack rates that we use when setting

 * rate -> duration table. This mapping is hw-based so

 * don't change anything.

 *

 * To enable this functionality we must set

 * ah->ah_ack_bitrate_high to true else base rate is

 * used (1Mb for CCK, 6Mb for OFDM).

 Tx	-> ACK	*/

 1Mb	-> 1Mb	*/	{ 0,

 2MB	-> 2Mb	*/	1,

 5.5Mb -> 2Mb	*/	1,

 11Mb	-> 2Mb	*/	1,

 6Mb	-> 6Mb	*/	4,

 9Mb	-> 6Mb	*/	4,

 12Mb	-> 12Mb	*/	6,

 18Mb	-> 12Mb	*/	6,

 24Mb	-> 24Mb	*/	8,

 36Mb	-> 24Mb	*/	8,

 48Mb	-> 24Mb	*/	8,

 54Mb	-> 24Mb	*/	8 };

/*******************\

* Helper functions *

/**

 * ath5k_hw_get_frame_duration() - Get tx time of a frame

 * @ah: The &struct ath5k_hw

 * @band: One of enum nl80211_band

 * @len: Frame's length in bytes

 * @rate: The @struct ieee80211_rate

 * @shortpre: Indicate short preample

 *

 * Calculate tx duration of a frame given it's rate and length

 * It extends ieee80211_generic_frame_duration for non standard

 * bwmodes.

 Fallback */

 subtract difference between long and short preamble */

 Bit rate is in 100Kbits */

/**

 * ath5k_hw_get_default_slottime() - Get the default slot time for current mode

 * @ah: The &struct ath5k_hw

/**

 * ath5k_hw_get_default_sifs() - Get the default SIFS for current mode

 * @ah: The &struct ath5k_hw

/**

 * ath5k_hw_update_mib_counters() - Update MIB counters (mac layer statistics)

 * @ah: The &struct ath5k_hw

 *

 * Reads MIB counters from PCU and updates sw statistics. Is called after a

 * MIB interrupt, because one of these counters might have reached their maximum

 * and triggered the MIB interrupt, to let us read and clear the counter.

 *

 * NOTE: Is called in interrupt context!

 Read-And-Clear */

/******************\

* ACK/CTS Timeouts *

/**

 * ath5k_hw_write_rate_duration() - Fill rate code to duration table

 * @ah: The &struct ath5k_hw

 *

 * Write the rate code to duration table upon hw reset. This is a helper for

 * ath5k_hw_pcu_init(). It seems all this is doing is setting an ACK timeout on

 * the hardware, based on current mode, for each rate. The rates which are

 * capable of short preamble (802.11b rates 2Mbps, 5.5Mbps, and 11Mbps) have

 * different rate code so we write their value twice (one for long preamble

 * and one for short).

 *

 * Note: Band doesn't matter here, if we set the values for OFDM it works

 * on both a and g modes. So all we have to do is set values for all g rates

 * that include all OFDM and CCK rates.

 *

 802.11g covers both OFDM and CCK */

 Write rate duration table */

 CCK -> 1Mb */

 OFDM -> 6Mb */

 Set ACK timeout */

		/* An ACK frame consists of 10 bytes. If you add the FCS,

		 * which ieee80211_generic_frame_duration() adds,

		 * its 14 bytes. Note we use the control rate and not the

		 * actual rate for this rate. See mac80211 tx.c

		 * ieee80211_duration() for a brief description of

/**

 * ath5k_hw_set_ack_timeout() - Set ACK timeout on PCU

 * @ah: The &struct ath5k_hw

 * @timeout: Timeout in usec

/**

 * ath5k_hw_set_cts_timeout() - Set CTS timeout on PCU

 * @ah: The &struct ath5k_hw

 * @timeout: Timeout in usec

/*******************\

* RX filter Control *

/**

 * ath5k_hw_set_lladdr() - Set station id

 * @ah: The &struct ath5k_hw

 * @mac: The card's mac address (array of octets)

 *

 * Set station id on hw using the provided mac address

 Set new station ID */

/**

 * ath5k_hw_set_bssid() - Set current BSSID on hw

 * @ah: The &struct ath5k_hw

 *

 * Sets the current BSSID and BSSID mask we have from the

 * common struct into the hardware

	/*

	 * Set BSSID mask on 5212

	/*

	 * Set BSSID

/**

 * ath5k_hw_set_bssid_mask() - Filter out bssids we listen

 * @ah: The &struct ath5k_hw

 * @mask: The BSSID mask to set (array of octets)

 *

 * BSSID masking is a method used by AR5212 and newer hardware to inform PCU

 * which bits of the interface's MAC address should be looked at when trying

 * to decide which packets to ACK. In station mode and AP mode with a single

 * BSS every bit matters since we lock to only one BSS. In AP mode with

 * multiple BSSes (virtual interfaces) not every bit matters because hw must

 * accept frames for all BSSes and so we tweak some bits of our mac address

 * in order to have multiple BSSes.

 *

 * For more information check out ../hw.c of the common ath module.

	/* Cache bssid mask so that we can restore it

/**

 * ath5k_hw_set_mcast_filter() - Set multicast filter

 * @ah: The &struct ath5k_hw

 * @filter0: Lower 32bits of muticast filter

 * @filter1: Higher 16bits of multicast filter

/**

 * ath5k_hw_get_rx_filter() - Get current rx filter

 * @ah: The &struct ath5k_hw

 *

 * Returns the RX filter by reading rx filter and

 * phy error filter registers. RX filter is used

 * to set the allowed frame types that PCU will accept

 * and pass to the driver. For a list of frame types

 * check out reg.h.

Radar detection for 5212*/

/**

 * ath5k_hw_set_rx_filter() - Set rx filter

 * @ah: The &struct ath5k_hw

 * @filter: RX filter mask (see reg.h)

 *

 * Sets RX filter register and also handles PHY error filter

 * register on 5212 and newer chips so that we have proper PHY

 * error reporting.

 Set PHY error filter register on 5212*/

	/*

	 * The AR5210 uses promiscuous mode to detect radar activity

Zero length DMA (phy error reporting) */

Write RX Filter register*/

Write PHY error filter register on 5212*/

/****************\

* Beacon control *

/**

 * ath5k_hw_get_tsf64() - Get the full 64bit TSF

 * @ah: The &struct ath5k_hw

 *

 * Returns the current TSF

 This code is time critical - we don't want to be interrupted here */

	/*

	 * While reading TSF upper and then lower part, the clock is still

	 * counting (or jumping in case of IBSS merge) so we might get

	 * inconsistent values. To avoid this, we read the upper part again

	 * and check it has not been changed. We make the hypothesis that a

	 * maximum of 3 changes can happens in a row (we use 10 as a safe

	 * value).

	 *

	 * Impact on performance is pretty small, since in most cases, only

	 * 3 register reads are needed.

/**

 * ath5k_hw_set_tsf64() - Set a new 64bit TSF

 * @ah: The &struct ath5k_hw

 * @tsf64: The new 64bit TSF

 *

 * Sets the new TSF

/**

 * ath5k_hw_reset_tsf() - Force a TSF reset

 * @ah: The &struct ath5k_hw

 *

 * Forces a TSF reset on PCU

	/*

	 * Each write to the RESET_TSF bit toggles a hardware internal

	 * signal to reset TSF, but if left high it will cause a TSF reset

	 * on the next chip reset as well.  Thus we always write the value

	 * twice to clear the signal.

/**

 * ath5k_hw_init_beacon_timers() - Initialize beacon timers

 * @ah: The &struct ath5k_hw

 * @next_beacon: Next TBTT

 * @interval: Current beacon interval

 *

 * This function is used to initialize beacon timers based on current

 * operation mode and settings.

	/*

	 * Set the additional timers by mode

		/* In STA mode timer1 is used as next wakeup

		 * timer and timer2 as next CFP duration start

 TODO: PCF handling */

 Mark associated AP as PCF incapable for now */

		/* On non-STA modes timer1 is used as next DMA

		 * beacon alert (DBA) timer and timer2 as next

	/* Timer3 marks the end of our ATIM window

	 * a zero length window is not allowed because

	/*

	 * Set the beacon register and enable all timers.

 When in AP or Mesh Point mode zero timer0 to start TSF */

 Force a TSF reset if requested and enable beacons */

	/* Flush any pending BMISS interrupts on ISR by

	 * performing a clear-on-write operation on PISR

	 * register for the BMISS bit (writing a bit on

	 * ISR toggles a reset for that bit and leaves

	/* TODO: Set enhanced sleep registers on AR5212

	 * based on vif->bss_conf params, until then

/**

 * ath5k_check_timer_win() - Check if timer B is timer A + window

 * @a: timer a (before b)

 * @b: timer b (after a)

 * @window: difference between a and b

 * @intval: timers are increased by this interval

 *

 * This helper function checks if timer B is timer A + window and covers

 * cases where timer A or B might have already been updated or wrapped

 * around (Timers are 16 bit).

 *

 * Returns true if O.K.

	/*

	 * 1.) usually B should be A + window

	 * 2.) A already updated, B not updated yet

	 * 3.) A already updated and has wrapped around

	 * 4.) B has wrapped around

 1.) */

 2.) */

 3.) */

 4.) */

 O.K. */

/**

 * ath5k_hw_check_beacon_timers() - Check if the beacon timers are correct

 * @ah: The &struct ath5k_hw

 * @intval: beacon interval

 *

 * This is a workaround for IBSS mode

 *

 * The need for this function arises from the fact that we have 4 separate

 * HW timer registers (TIMER0 - TIMER3), which are closely related to the

 * next beacon target time (NBTT), and that the HW updates these timers

 * separately based on the current TSF value. The hardware increments each

 * timer by the beacon interval, when the local TSF converted to TU is equal

 * to the value stored in the timer.

 *

 * The reception of a beacon with the same BSSID can update the local HW TSF

 * at any time - this is something we can't avoid. If the TSF jumps to a

 * time which is later than the time stored in a timer, this timer will not

 * be updated until the TSF in TU wraps around at 16 bit (the size of the

 * timers) and reaches the time which is stored in the timer.

 *

 * The problem is that these timers are closely related to TIMER0 (NBTT) and

 * that they define a time "window". When the TSF jumps between two timers

 * (e.g. ATIM and NBTT), the one in the past will be left behind (not

 * updated), while the one in the future will be updated every beacon

 * interval. This causes the window to get larger, until the TSF wraps

 * around as described above and the timer which was left behind gets

 * updated again. But - because the beacon interval is usually not an exact

 * divisor of the size of the timers (16 bit), an unwanted "window" between

 * these timers has developed!

 *

 * This is especially important with the ATIM window, because during

 * the ATIM window only ATIM frames and no data frames are allowed to be

 * sent, which creates transmission pauses after each beacon. This symptom

 * has been described as "ramping ping" because ping times increase linearly

 * for some time and then drop down again. A wrong window on the DMA beacon

 * timer has the same effect, so we check for these two conditions.

 *

 * Returns true if O.K.

	/* NOTE: SWBA is different. Having a wrong window there does not

	 * stop us from sending data and this condition is caught by

 O.K. */

/**

 * ath5k_hw_set_coverage_class() - Set IEEE 802.11 coverage class

 * @ah: The &struct ath5k_hw

 * @coverage_class: IEEE 802.11 coverage class number

 *

 * Sets IFS intervals and ACK/CTS timeouts for given coverage class.

 As defined by IEEE 802.11-2007 17.3.8.6 */

/***************************\

* Init/Start/Stop functions *

/**

 * ath5k_hw_start_rx_pcu() - Start RX engine

 * @ah: The &struct ath5k_hw

 *

 * Starts RX engine on PCU so that hw can process RXed frames

 * (ACK etc).

 *

 * NOTE: RX DMA should be already enabled using ath5k_hw_start_rx_dma

/**

 * ath5k_hw_stop_rx_pcu() - Stop RX engine

 * @ah: The &struct ath5k_hw

 *

 * Stops RX engine on PCU

/**

 * ath5k_hw_set_opmode() - Set PCU operating mode

 * @ah: The &struct ath5k_hw

 * @op_mode: One of enum nl80211_iftype

 *

 * Configure PCU for the various operating modes (AP/STA etc)

 Preserve rest settings */

	/*

	 * Set PCU registers

	/*

	 * Set Beacon Control Register on 5210

/**

 * ath5k_hw_pcu_init() - Initialize PCU

 * @ah: The &struct ath5k_hw

 * @op_mode: One of enum nl80211_iftype

 *

 * This function is used to initialize PCU by setting current

 * operation mode and various other settings.

 Set bssid and bssid mask */

 Set PCU config */

	/* Write rate duration table only on AR5212 and if

	 * virtual interface has already been brought up

	 * XXX: rethink this after new mode changes to

	/* Set RSSI/BRSSI thresholds

	 *

	 * Note: If we decide to set this value

	 * dynamically, have in mind that when AR5K_RSSI_THR

	 * register is read it might return 0x40 if we haven't

	 * wrote anything to it plus BMISS RSSI threshold is zeroed.

	 * So doing a save/restore procedure here isn't the right

 MIC QoS support */

 QoS NOACK Policy */

 Restore slot time and ACK timeouts */

 Set ACK bitrate mode (see ack_rates_high) */

/*-

 * Copyright (c) 2002-2005 Sam Leffler, Errno Consulting

 * Copyright (c) 2004-2005 Atheros Communications, Inc.

 * Copyright (c) 2006 Devicescape Software, Inc.

 * Copyright (c) 2007 Jiri Slaby <jirislaby@gmail.com>

 * Copyright (c) 2007 Luis R. Rodriguez <mcgrof@winlab.rutgers.edu>

 * Copyright (c) 2010 Bruno Randolf <br1@einfach.org>

 *

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer,

 *    without modification.

 * 2. Redistributions in binary form must reproduce at minimum a disclaimer

 *    similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any

 *    redistribution must be conditioned upon including a substantially

 *    similar Disclaimer requirement for further binary redistribution.

 * 3. Neither the names of the above-listed copyright holders nor the names

 *    of any contributors may be used to endorse or promote products derived

 *    from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL") version 2 as published by the Free

 * Software Foundation.

 *

 * NO WARRANTY

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY

 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,

 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER

 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF

 * THE POSSIBILITY OF SUCH DAMAGES.

 *

/********************\

* Mac80211 functions *

	/* Don't allow other interfaces if one ad-hoc is configured.

	 * TODO: Fix the problems with ad-hoc and multiple other interfaces.

	 * We would need to operate the HW in ad-hoc mode to allow TSF updates

	 * for the IBSS, but this breaks with additional AP or STA interfaces

 Assign the vap/adhoc to a beacon xmit slot. */

	/* Any MAC address is fine, all others are included through the

	 * filter.

/*

 * TODO: Phy disable/diversity etc

 Half dB steps */

	/* TODO:

	 * 1) Move this on config_interface and handle each case

	 * separately eg. when we have only one STA vif, use

	 * AR5K_ANTMODE_SINGLE_AP

	 *

	 * 2) Allow the user to change antenna mode eg. when only

	 * one antenna is present

	 *

	 * 3) Allow the user to set default/tx antenna when possible

	 *

	 * 4) Default mode should handle 90% of the cases, together

	 * with fixed a/b and single AP modes we should be able to

	 * handle 99%. Sectored modes are extreme cases and i still

	 * haven't found a usage for them. If we decide to support them,

	 * then we must allow the user to set how many tx antennas we

	 * have available

 Cache for later use during resets */

 Once ANI is available you would start it here */

 calculate XOR of eight 6-bit values */

		/* XXX: we might be able to just do this instead,

		* but not sure, needs testing, if we do use this we'd

		/* ath5k_hw_set_mcast_filterindex(ah,

/*

 * o always accept unicast, broadcast, and multicast traffic

 * o multicast traffic for all BSSIDs will be enabled if mac80211

 *   says it should be

 * o maintain current state of phy ofdm or phy cck error reception.

 *   If the hardware detects any of these type of errors then

 *   ath5k_hw_get_rx_filter() will pass to us the respective

 *   hardware filters to be able to receive these type of frames.

 * o probe request frames are accepted only when operating in

 *   hostap, adhoc, or monitor modes

 * o enable promiscuous mode according to the interface state

 * o accept beacons:

 *   - when operating in adhoc mode so the 802.11 layer creates

 *     node table entries for peers,

 *   - when operating in station mode for collecting rssi data when

 *     the station is otherwise quiet, or

 *   - when scanning

 to count STA interfaces */

 Only deal with supported flags */

	/* If HW detects any phy or radar errors, leave those filters on.

	 * Also, always enable Unicast, Broadcasts and Multicast

 Note, AR5K_RX_FILTER_MCAST is already enabled */

 This is the best we can do */

	/* FIF_BCN_PRBRESP_PROMISC really means to enable beacons

	/* FIF_CONTROL doc says we should only pass on control frames for this

	 * station. This needs testing. I believe right now this

	 * enables *all* control frames, which is OK.. but

 Additional settings per mode -- this is per ath5k */

 XXX move these to mac80211, and add a beacon IFF flag to mac80211 */

 Set up RX Filter */

		/* If you have multiple STA interfaces connected to

		 * different APs, ARPs are not received (most of the time?)

		 * Enabling PROMISC appears to fix that problem.

 Set filters */

 Set multicast bits */

	/* Set the cached hw filter flags, this will later actually

 Store current FIF filter flags */

 don't program group keys when using IBSS_RSN */

 push IV and Michael MIC generation to stack */

 Force update */

	/*

	 * in IBSS mode we need to update the beacon timers too.

	 * this will also reset the TSF if we call it with 0

/**

 * ath5k_set_coverage_class - Set IEEE 802.11 coverage class

 *

 * @hw: struct ieee80211_hw pointer

 * @coverage_class: IEEE 802.11 coverage class number

 *

 * Mac80211 callback. Sets slot time, ACK timeout and CTS timeout for given

 * coverage class. The values are persistent, they are restored after device

 * reset.

 only support setting tx ring size for now */

 restrict tx ring size min/max */

 .change_interface	= not implemented */

 .set_tim		= not implemented */

 .update_tkip_key	= not implemented */

 .hw_scan		= not implemented */

 .set_frag_threshold	= not implemented */

 .set_rts_threshold	= not implemented */

 .sta_add		= not implemented */

 .sta_remove		= not implemented */

 .sta_notify		= not implemented */

 .tx_last_beacon	= not implemented */

 .ampdu_action	= not needed */

 .rfkill_poll		= not implemented */

 .flush		= not implemented */

 .channel_switch	= not implemented */

 .napi_poll		= not implemented */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *	Driver for ZyDAS zd1201 based wireless USB devices.

 *

 *	Copyright (c) 2004, 2005 Jeroen Vreeken (pe1rxq@amsat.org)

 *

 *	Parts of this driver have been derived from a wlan-ng version

 *	modified by ZyDAS. They also made documentation available, thanks!

 *	Copyright (C) 1999 AbsoluteValue Systems, Inc.  All Rights Reserved.

 Peabird Wireless USB Adapter */

 ZyDAS ZD1201 Wireless USB Adapter */

 Belkin F5D6051 usb  adapter */

 MSI UB11B usb  adapter */

 Gigabyte GN-WLBZ101 */

 GIGABYTE GN-WLBZ201 usb adapter */

 Are we an AP or a normal station? */

linux-lc100020.sourceforge.net for more info.\n");

/* cmdreq message: 

	u32 type

	u16 cmd

	u16 parm0

	u16 parm1

	u16 parm2

	u8  pad[4]



	total: 4 + 2 + 2 + 2 + 2 + 4 = 16

 Callback after sending out a packet */

 Incoming data */

 Info frame */

 Send event to user space */

			/* There isn't a event that trully fits this request.

			   We assume that userspace will be smart enough to

			   see a new station being expired and sends back a

 Other infotypes are handled outside this handler */

 Sanity check, sometimes we get junk */

 Actual data */

 If access bit is not on, then error */

 Not enough buffer for allocating data */

 Issue SetRxRid commnd */			

 Receive RID record from resource packets */

 Set the data pointer and received data length */

 Trim the last packet type byte */

 Skip the 4 bytes header (RID length and RID) */

/*

 *	resreq:

 *		byte	type

 *		byte	sequence

 *		u16	reserved

 *		byte	data[12]

 *	total: 16

 first 4 are for header */

 add header */

/*	Magic alert: The firmware doesn't seem to like the MAC state being

 *	toggled in promisc (aka monitor) mode.

 *	(It works a number of times, but will halt eventually)

 *	So we turn it of before disabling and on after enabling if needed.

 Normal station */

 AP */

 Start MAC with wildcard if no essid set */

/*

	RFC 1042 encapsulates Ethernet frames in 802.11 frames

	by prefixing them with 0xaa, 0xaa, 0x03) followed by a SNAP OID of 0

	(0x00, 0x00, 0x00). Zd requires an additional padding, copy

	of ethernet addresses, length of the standard RFC 1042 packet

	and a command byte (which is nul for tx).

	

	tx frame (from Wlan NG):

	RFC 1042:

		llc		0xAA 0xAA 0x03 (802.2 LLC)

		snap		0x00 0x00 0x00 (Ethernet encapsulated)

		type		2 bytes, Ethernet type field

		payload		(minus eth header)

	Zydas specific:

		padding		1B if (skb->len+8+1)%64==0

		Eth MAC addr	12 bytes, Ethernet MAC addresses

		length		2 bytes, RFC 1042 packet length 

				(llc+snap+type+payload)

		zd		1 null byte, zd1201 packet type

 rfc1042 */

 Restart the timeout to quiet the watchdog: */

 prevent tx timeout */

			/* Make sure we are no longer associated with by

			   setting an 'impossible' essid.

			   (otherwise we mess up firmware)

 Put port in pIBSS */

 No pseudo-IBSS in wireless extensions (yet) */

	/* If monitor mode is set we don't actually turn it on here since it

	 * is done during mac reset anyway (see zd1201_mac_enable).

 No Pseudo-IBSS... */

/*	Little bit of magic here: we only get the quality if we poll

 *	for it, and we never get an actual request to trigger such

 *	a poll. Therefore we 'assume' that the user will soon ask for

 *	the stats after asking the bssid.

		/* Unfortunately the quality and noise reported is useless.

		   they seem to be accumulators that increase until you

		   read them, unless we poll on a fixed interval we can't

		   use them

zd->iwstats.qual.qual = le16_to_cpu(((__le16 *)buffer)[0]);*/

zd->iwstats.qual.noise = le16_to_cpu(((__le16 *)buffer)[2]);*/

 We do everything in get_scan */

 No scanning in AP mode */

 Scan doesn't seem to work if disabled */

 Also enable all lower bitrates */

 SIOCSIWCOMMIT */

 SIOCGIWNAME */

 SIOCSIWNWID */

 SIOCGIWNWID */

 SIOCSIWFREQ */

 SIOCGIWFREQ */

 SIOCSIWMODE */

 SIOCGIWMODE */

 SIOCSIWSENS */

 SIOCGIWSENS */

 SIOCSIWRANGE */

 SIOCGIWRANGE */

 SIOCSIWPRIV */

 SIOCGIWPRIV */

 SIOCSIWSTATS */

 SIOCGIWSTATS */

 SIOCSIWSPY */

 SIOCGIWSPY */

 -- hole -- */

 -- hole -- */

zd1201_set_wap*/,		
 SIOCGIWAP */

 -- hole -- */

 SIOCGIWAPLIST */

 SIOCSIWSCAN */

 SIOCGIWSCAN */

 SIOCSIWESSID */

 SIOCGIWESSID */

 SIOCSIWNICKN */

 SIOCGIWNICKN */

 -- hole -- */

 -- hole -- */

 SIOCSIWRATE */

 SIOCGIWRATE */

 SIOCSIWRTS */

 SIOCGIWRTS */

 SIOCSIWFRAG */

 SIOCGIWFRAG */

 SIOCSIWTXPOW */

 SIOCGIWTXPOW */

 SIOCSIWRETRY */

 SIOCGIWRETRY */

 SIOCSIWENCODE */

 SIOCGIWENCODE */

 SIOCSIWPOWER */

 SIOCGIWPOWER */

 0==success, 1==failure */

 ZD1201SIWHOSTAUTH */

 ZD1201GIWHOSTAUTH */

 ZD1201SIWAUTHSTA */

 nothing to get */

 ZD1201SIMAXASSOC */

 ZD1201GIMAXASSOC */

 Set wildcard essid to match zd->essid */

 zd1201 likes to startup enabled, */

 interfering with all the wifis in range */

 Leave the device in reset state */

 SPDX-License-Identifier: GPL-2.0-or-later

/* ZD1211 USB-WLAN driver for Linux

 *

 * Copyright (C) 2005-2007 Ulrich Kunitz <kune@deine-taler.de>

 * Copyright (C) 2006-2007 Daniel Drake <dsd@gentoo.org>

 MARK_002 */

 MARK_002 */

 MARK_002 */

 MARK_002 */

 MARK_001 from 0xe->0x10 */

 MARK_001 from 0xd->0x0e */

 MARK_001 from 0xb->0x0d */

 related to antenna selection? */

 for newest (3rd cut) AL2300 */

 for newest (3rd cut) AL2300 */

 for newest (3rd cut) AL2300 */

 for newest (3rd cut) AL2300 */

 shdnb(PLL_ON)=0 */

 shdnb(PLL_ON)=1 */

 Channel 1 */

 fix freq shift, 0x04edc5 */

 external control TX power (ZD_CR31) */

 improve band edge for AL2230S */

 for newest(3rd cut) AL2230 */

 5621 */

 for newest(3rd cut) AL2230 */

 for newest(3rd cut) AL2230 */

 ZD1211B 05.06.10 */

 5621 */

 4804,  for 1212 new algorithm */

 5621 */

 for newest(3rd cut) AL2230 */

 4804, for 1212 new algorithm */

 4804, for 1212 new algorithm */

		{ ZD_CR115, 0x26 }, /* 24->26 at 4902 for newest(3rd cut)

				     * AL2230

 for 1211b */

 for 1211b */

 for 1211b */

 E0->FC at 4902 */

 5623 */

 4804, for 1212 new algorithm */

 5614 */

 4804, for 1212 new algorithm */

 5614 */

 5621 */

 To improve AL2230 yield, improve phase noise, 4713 */

 Reg6 update for MP versio */

 Modified by jxiao for Bor-Chin on 2004/08/02 */

 External control TX power (ZD_CR31) */

 RegA update for MP version */

 RegB update for MP version */

 RegC update for MP version */

 RegD update for MP version */

 improve phase noise and remove phase calibration,4713 */

 shdnb(PLL_ON)=0 */

 shdnb(PLL_ON)=1 */

 To improve AL2230 yield, 4713 */

 related to 6M band edge patching, happens unconditionally */

 SPDX-License-Identifier: GPL-2.0-or-later

/* ZD1211 USB-WLAN driver for Linux

 *

 * Copyright (C) 2005-2007 Ulrich Kunitz <kune@deine-taler.de>

 * Copyright (C) 2006-2007 Daniel Drake <dsd@gentoo.org>

/* This file implements all the hardware specific functions for the ZD1211

 * and ZD1211B chips. Support for the ZD1211B was possible after Timothy

 * Legge sent me a ZD1211B device. Thank you Tim. -- Uli

 Prints an identifier line, which will support debugging. */

	/* Control registers use byte addressing, but everything else uses word

/* Read a variable number of 32-bit values. Parameter count is not allowed to

 * exceed USB_MAX_IOREAD32_COUNT.

 Use stack for values and addresses. */

 We read the high word always first. */

 Use stack for values and addresses. */

 We write the high word always first. */

 DEBUG */

 ms */);

 ms */);

/* Writes a variable number of 32 bit registers. The functions will split

 * that in several USB requests. A split can be forced by inserting an IO

 * request with an zero address field.

 ms */);

 FIXME: AL2230 handling (Bit 7 in POD) */

 LED scenario */

/* MAC address: if custom mac addresses are to be used CR_MAC_ADDR_P1 and

 *              CR_MAC_ADDR_P2 must be overwritten

 phy means physical registers */

 ZD_CR157 can be optionally patched by the EEPROM for original ZD1211 */

/*

 * 6M band edge can be optionally overwritten for certain RF's

 * Vendor driver says: for FCC regulation, enabled per HWFeature 6M band edge

 * bit (for AL2230, AL2230S)

/* Generic implementation of 6M band edge patching, used by most RFs via

 FIXME: Channel 11 is not the edge for all regulatory domains. */

 Note: ZD_CR204 must lead the ZD_CR203 */

 power control { { ZD_CR11,  1 << 6 }, */

 Org:0x0E, ComTrend:RalLink AP */

 ASIC/FWT, no jointly decoder */

 ZD1211B */

 Org:0x50 ComTrend:RalLink AP */

 Org:0x0E ComTrend:RalLink AP */

 Note: ZD_CR204 must lead the ZD_CR203 */

 DEBUG */

	/* This sets the mandatory rates, which only depend from the standard

	 * that the device is supporting. Until further notice we should try

	 * to support 802.11g also for full speed USB.

 We always send 11M RTS/self-CTS messages, like the vendor driver. */

 Read mac address using pre-firmware interface */

	/* GPI is always disabled, also in the other driver.

	/* Currently we support IEEE 802.11g for full and high speed USB.

	 * It might be discussed, whether we should support pure b mode for

	 * full speed USB.

	/* Disabling interrupts is certainly a smart thing here.

 DEBUG */

 The CCK baseband gain can be optionally patched by the EEPROM */

/**

 * zd_rx_rate - report zd-rate

 * @rx_frame: received frame

 * @status: rx_status as given by the device

 *

 * This function converts the rate as encoded in the received packet to the

 * zd-rate, we are using on other places in the driver.

 cancel pending interrupt work */

/*

 * We can optionally program the RF directly through CR regs, if supported by

 * the hardware. This is much faster than the older method.

 SPDX-License-Identifier: GPL-2.0-or-later

/* ZD1211 USB-WLAN driver for Linux

 *

 * Copyright (C) 2005-2007 Ulrich Kunitz <kune@deine-taler.de>

 * Copyright (C) 2006-2007 Daniel Drake <dsd@gentoo.org>

/* This RF programming code is based upon the code found in v2.16.0.0 of the

 * ZyDAS vendor driver. Unlike other RF's, Ubec publish full technical specs

 * for this RF on their website, so we're able to understand more than

/* The 3-wire serial interface provides access to 8 write-only registers.

/* For channel tuning, we have to configure registers 1 (synthesizer), 2 (synth

 * fractional divide ratio) and 3 (VCO config).

 *

 * We configure the RF to produce an interrupt when the PLL is locked onto

 * the configured frequency. During initialization, we run through a variety

 * of different VCO configurations on channel 1 until we detect a PLL lock.

 * When this happens, we remember which VCO configuration produced the lock

 * and use it later. Actually, we use the configuration *after* the one that

 * produced the lock, which seems odd, but it works.

 *

 * If we do not see a PLL lock on any standard VCO config, we fall back on an

 * autocal configuration, which has a fixed (as opposed to per-channel) VCO

 * config and different synth values from the standard set (divide ratio

/* The per-channel synth values for all standard VCO configurations. These get

/* This table stores the synthesizer fractional divide ratio for *all* VCO

 * configurations (both standard and autocal). These get written to register 2.

/* Here is the data for all the standard VCO configurations. We shrink our

 * table a little by observing that both channels in a consecutive pair share

 * the same value. We also observe that the high 4 bits ([0:3] in the specs)

 * are all 'Reserved' and are always set to 0x4 - we chop them off in the data

 table 1 */

 table 2 */

 table 3 */

 table 4 */

 table 5 */

 table 6 */

 table 7 */

 table 8 */

 table 9 */

 table 10 */

 table 11 */

 The per-channel synth values for autocal. These get written to register 1. */

 The VCO configuration for autocal (all channels) */

/* TX gain settings. The array index corresponds to the TX power integration

 RF-specific structure */

	/* index into synth/VCO config tables where PLL lock was found

	/* vendor driver always sets these upper bits even though the specs say

 enter IDLE mode */

 enter CAL_VCO mode */

 enter RX/TX mode */

 power down RSSI circuit */

 6112 no change */

 6112 3e->43 */

 6112 96->92 */

 5602 Roger */

 6112 13->1f 6220 1f->13 6407 13->9 */

		{ ZD_CR106, 0x1c }, /* 5d07 5112 1f->1c 6220 1c->1f

				     * 6221 1f->1c

 6220 1c->1a 5221 1a->1c */

 6112 13->1f 6221 1f->13 6407 13->0x09 */

 6221 27->23 */

 6112 24->1c 6220 1c->24 */

 6220 1c->24 */

 6112 fa->f8 6220 f8->f4 6220 f4->fa */

 5d07 6112 f0->f2 6220 f2->f0 */

 6112 1a->10 6220 10->14 6220 14->1a */

 6220 4f->1f */

 6302 12->11 */

 6301 10->0f */

 configure receiver gain */

 configure transmitter gain */

 enable RX/TX filter tuning */

 disable TX gain in test mode */

		/* enter CAL_FIL mode, TX gain set by registers, RX gain set by pins,

 5d01 cal_fil */

 synthesizer configuration for channel 1 */

 disable manual VCO band selection */

 enable manual VCO band selection, configure current level */

 Try all standard VCO configuration settings on channel 1 */

 Configure synthesizer for channel 1 */

 Write VCO config */

 ack interrupt event */

 check interrupt status */

 autocal */

	/* To match the vendor driver behaviour, we use the configuration after

 enter RXTX mode */

 enter IDLE mode */

 FIXME: shouldn't we go to SLEEP? sent email to zydas */

 we have our own TX integration code */

 SPDX-License-Identifier: GPL-2.0-or-later

/* ZD1211 USB-WLAN driver for Linux

 *

 * Copyright (C) 2005-2007 Ulrich Kunitz <kune@deine-taler.de>

 * Copyright (C) 2006-2007 Daniel Drake <dsd@gentoo.org>

	/* default to update channel integration, as almost all RF's do want

 TODO: move phy regs handling to zd_chip */

 SPDX-License-Identifier: GPL-2.0-or-later

/* ZD1211 USB-WLAN driver for Linux

 *

 * Copyright (C) 2005-2007 Ulrich Kunitz <kune@deine-taler.de>

 * Copyright (C) 2006-2007 Daniel Drake <dsd@gentoo.org>

 0 */

 normal size for cca threshold */

 { ZD_CR24,  0x20 }, */

 { ZD_CR91,  0x18 }, */

 should solve continuous CTS frame problems */

 normal size */

 { ZD_CR106, 0x22 }, */

 no TX continuation */

 { ZD_CR122, 0xff }, */

 REG0(CFG1) */

 REG1(IFPLL1) */

 REG2(IFPLL2) */

 REG4 */

 REG5 */

 REG6 */

		/* The Zydas driver somehow forgets to set this value. It's

		 * only set for Japan. We are using internal power control

		 * for now.

 internal power */

 0x28252c, */ 
 ZD_CR31_CCK, ZD_CR51_6-36M, ZD_CR52_48M, ZD_CR53_54M */

 REG13(0xD) */

 REG14(0xE) */

		/* Bogus, RF2959's data sheet doesn't know register 27, which is

		 * actually referenced here. The commented 0x11 is 17.

 REG27(0x11) */

 SPDX-License-Identifier: GPL-2.0-or-later

/* ZD1211 USB-WLAN driver for Linux

 *

 * Copyright (C) 2005-2007 Ulrich Kunitz <kune@deine-taler.de>

 * Copyright (C) 2006-2007 Daniel Drake <dsd@gentoo.org>

 * Copyright (C) 2006-2007 Michael Wu <flamingice@sourmilk.net>

 * Copyright (C) 2007-2008 Luis R. Rodriguez <mcgrof@winlab.rutgers.edu>

 Generic ETSI, use most restrictive */

 This table contains the hardware specific values for the modulation rates. */

/*

 * Zydas retry rates table. Each line is listed in the same order as

 * in zd_rates[] and contains all the rate used when a packet is sent

 * starting with a given rates. Let's consider an example :

 *

 * "11 Mbits : 4, 3, 2, 1, 0" means :

 * - packet is sent using 4 different rates

 * - 1st rate is index 3 (ie 11 Mbits)

 * - 2nd rate is index 2 (ie 5.5 Mbits)

 * - 3rd rate is index 1 (ie 2 Mbits)

 * - 4th rate is index 0 (ie 1 Mbits)

  1 Mbits */	1, { 0 }},

  2 Mbits */	2, { 1,  0 }},

  5.5 Mbits */	3, { 2,  1, 0 }},

 11 Mbits */	4, { 3,  2, 1, 0 }},

  6 Mbits */	5, { 4,  3, 2, 1, 0 }},

  9 Mbits */	6, { 5,  4, 3, 2, 1, 0}},

 12 Mbits */	5, { 6,  3, 2, 1, 0 }},

 18 Mbits */	6, { 7,  6, 3, 2, 1, 0 }},

 24 Mbits */	6, { 8,  6, 3, 2, 1, 0 }},

 36 Mbits */	7, { 9,  8, 6, 3, 2, 1, 0 }},

 48 Mbits */	8, {10,  9, 8, 6, 3, 2, 1, 0 }},

 54 Mbits */	9, {11, 10, 9, 8, 6, 3, 2, 1, 0 }}

	/* We must inform the device that we are doing encryption/decryption in

	/* Vendor driver after setting MAC either sets BSSID for AP or

	 * filter for other modes.

	/* Wait after setting the multicast hash table and powering on

	 * the radio otherwise interface bring up will fail. This matches

	 * what the vendor driver did.

	/* The order here deliberately is a little different from the open()

	 * method, since we need to make sure there is no opportunity for RX

	 * frames to be processed by mac80211 after we have stopped it.

/**

 * zd_mac_tx_status - reports tx status of a packet if required

 * @hw: a &struct ieee80211_hw pointer

 * @skb: a sk-buffer

 * @ackssi: ACK signal strength

 * @tx_status: success and/or retry

 *

 * This information calls ieee80211_tx_status_irqsafe() if required by the

 * control information. It copies the control information into the status

 * information.

 *

 * If no status information has been requested, the skb is freed.

 success */

 failure */

 (retry > 1 ? 2 : 1);

 ((i==retry-1) && success ? 1:2);

 (success ? 1:2);

 terminate */

/**

 * zd_mac_tx_failed - callback for failed frames

 * @urb: pointer to the urb structure

 *

 * This function is called if a frame couldn't be successfully

 * transferred. The first frame from the tx queue, will be selected and

 * reported as error to the upper layers.

		/* if the hardware reports a failure and we had a 802.11 ACK

		 * pending, then we skip the first skb when searching for a

 we skip all frames not matching the reported destination */

 we skip all frames not matching the reported final rate */

/**

 * zd_mac_tx_to_dev - callback for USB layer

 * @skb: a &sk_buff pointer

 * @error: error value, 0 if transmission successful

 *

 * Informs the MAC layer that the frame has successfully transferred to the

 * device. If an ACK is required and the transfer to the device has been

 * successful, the packets are put on the @ack_wait_queue with

 * the control set removed.

		/*

		 * FIXME : do we need to fill in anything ?

	/* ZD_PURE_RATE() must be used to remove the modulation type flag of

	 * the zd-rate values.

 Bits must be doubled. */

 round up to the next integer */

 round up to the next integer */

	/*

	 * CONTROL TODO:

	 * - if backoff needed, enable bit 0

	 * - if burst (backoff not needed) disable bit 0

 First fragment */

 No ACK expected (multicast, etc.) */

 PS-POLL */

 FIXME: Management frame? */

 4 more bytes for tail CRC */

 Check if hw already has this beacon. */

 Alloc memory for full beacon write at once. */

~500ms*/

~100ms*/

	/*

	 * Try very hard to release device beacon semaphore, as otherwise

	 * device/driver can be left in unusable state.

~500ms*/

		/* We don't know if beacon was written successfully or not,

 Beacon has now been written successfully, update current. */

	/* 802.11b/g 2.4G CCK 1Mb

	 * 802.11a, not yet implemented, uses different values (see GPL vendor

	 * driver)

 semaphore stuck, reset device to avoid fw freeze later */

	/*

	 * Firmware computes the duration itself (for all frames except PSPoll)

	 * and needs the field set to 0 at input, otherwise firmware messes up

	 * duration_id and sets bits 14 and 15 on.

	/* ZD1211B: Computing the length difference this way, gives us

	 * flexibility to compute the packet length.

	/*

	 * CURRENT LENGTH:

	 * - transmit frame length in microseconds

	 * - seems to be derived from frame length

	 * - see Cal_Us_Service() in zdinlinef.h

	 * - if macp->bTxBurstEnable is enabled, then multiply by 4

	 *  - bTxBurstEnable is never set in the vendor driver

	 *

	 * SERVICE:

	 * - "for PLCP configuration"

	 * - always 0 except in some situations at 802.11b 11M

	 * - see line 53 of zdinlinef.h

/**

 * zd_op_tx - transmits a network frame to the device

 *

 * @hw: a &struct ieee80211_hw pointer

 * @control: the control structure

 * @skb: socket buffer

 *

 * This function transmit an IEEE 802.11 network frame to the device. The

 * control block of the skbuff will be initialized. If necessary the incoming

 * mac80211 queues will be stopped.

/**

 * filter_ack - filters incoming packets for acknowledgements

 * @hw: a &struct ieee80211_hw pointer

 * @rx_hdr: received header

 * @stats: the status for the received packet

 *

 * This functions looks for ACK packets and tries to match them with the

 * frames in the tx queue. If a match is found the frame will be dequeued and

 * the upper layers is informed about the successful transmission. If

 * mac80211 queues have been stopped and the number of frames still to be

 * transmitted is low the queues will be opened again.

 *

 * Returns 1 if the frame was an ACK, 0 if it was ignored.

 Prevent pending tx-packet on AP-mode */

 IEEE80211_1ADDR_LEN */ +

	/* Note about pass_failed_fcs and pass_ctrl access below:

	 * mac locking intentionally omitted here, as this is the only unlocked

	 * reader and the only writer is configure_filter. Plus, if there were

	 * any races accessing these variables, it wouldn't really matter.

	 * If mac80211 ever provides a way for us to access filter flags

	 * from outside configure_filter, we could improve on this. Also, this

	 * situation may change once we implement some kind of DMA-into-skb

 Caller has to ensure that length >= sizeof(struct rx_status). */

 todo: return index in the big switches in zd_rx_rate instead */

	/* Except for bad frames, filter each frame to see if it is an ACK, in

	 * which case our internal TX tracking is updated. Normally we then

	 * bail here as there's no need to pass ACKs on up to the stack, but

	 * there is also the case where the stack has requested us to pass

 Make sure the payload data is 4 byte aligned. */

 FIXME : could we avoid this big memcpy ? */

 using NL80211_IFTYPE_UNSPECIFIED to indicate no mode selected */

	/*

	 * Send out buffered broad- and multicast frames.

	/*

	 * Fetch next beacon so that tim_count is updated.

dev_dbg_f_limit(zd_mac_dev(mac), "INT_CFG_NEXT_BCN\n");*/

 Only deal with supported flags */

	/*

	 * If multicast parameter (as returned by zd_op_prepare_multicast)

	 * has changed, no bit in changed_flags is set. To handle this

	 * situation, we do not return if changed_flags is 0. If we do so,

	 * we will have some issue with IPv6 which uses multicast for link

	 * layer address resolution.

	/* no handling required for FIF_OTHER_BSS as we don't currently

	/* FIXME: in future it would be nice to enable the probe response

	 * filter (so that the driver doesn't see them) until

	 * FIF_BCN_PRBRESP_PROMISC is set. however due to atomicity here, we'd

	 * have to schedule work to enable prbresp reception, which might

	 * happen too late. For now we'll just listen and forward them all the

 TODO: do hardware bssid filtering */

	/*

	 * Tell mac80211 that we support multi rate retries

 9 rates * 2 retries/rate */

 SPDX-License-Identifier: GPL-2.0-or-later

/* ZD1211 USB-WLAN driver for Linux

 *

 * Copyright (C) 2005-2007 Ulrich Kunitz <kune@deine-taler.de>

 * Copyright (C) 2006-2007 Daniel Drake <dsd@gentoo.org>

 * Copyright (C) 2006-2007 Michael Wu <flamingice@sourmilk.net>

 ZD1211 */

 ZD1211B */

 "Driverless" devices that need ejecting */

 USB device initialization */

 Ensures that MAX_TRANSFER_SIZE is even. */

	/* USB request blocks need "kmalloced" buffers.

 ms */);

 Use "DMA-aware" buffer. */

 ms */);

	/* At this point, the vendor driver downloads the whole firmware

	 * image, hacks around with version IDs, and uploads it again,

	 * completely overwriting the boot code. We do not do this here as

	 * it is not required on any tested devices, and it is suspected to

 FALL-THROUGH */

/* Read data from device address space using "firmware interface" which does

 Use "DMA-aware" buffer. */

		/* Sometimes USB_INT_ID_REGS is not overridden, but comes after

		 * USB_INT_ID_RETRY_FAILED. Read-reg retry then gets this

		 * delayed USB_INT_ID_REGS, but leaves USB_INT_ID_REGS of

		 * retry unhandled. Next read-reg command then might catch

		 * this wrong USB_INT_ID_REGS. Fix by ignoring wrong reads.

 CR_INTERRUPT might override read_reg too. */

	/* USB_INT_ID_RETRY_FAILED triggered by tx-urb submit can override

	 * pending USB_INT_ID_REGS causing read command timeout.

 TODO: add worker to reset intr->urb */

 It's not a complete packet anyhow. */

	/* It might be that three frames are merged into a single URB

	 * transaction. We have to check for the length info tag.

	 *

	 * While testing we discovered that length_info might be unaligned,

	 * because if USB transactions are merged, the last packet will not

	 * be padded. Unaligned access might also happen if the length_info

	 * structure is not present.

 If there is an old first fragment, we don't care. */

 We are on a second fragment, we believe */

/**

 * zd_usb_disable_tx - disable transmission

 * @usb: the zd1211rw-private USB structure

 *

 * Frees all URBs in the free list and marks the transmission as disabled.

 kill all submitted tx-urbs */

	/* The stopped state is ignored, relying on ieee80211_wake_queues()

	 * in a potentionally following zd_usb_enable_tx().

/**

 * zd_usb_enable_tx - enables transmission

 * @usb: a &struct zd_usb pointer

 *

 * This function enables transmission and prepares the &zd_usb_tx data

 * structure.

/**

 * tx_urb_complete - completes the execution of an URB

 * @urb: a URB

 *

 * This function is called if the URB has been transferred to a device or an

 * error has happened.

	/*

	 * grab 'usb' pointer before handing off the skb (since

	 * it might be freed by zd_mac_tx_to_dev or mac80211)

/**

 * zd_usb_tx: initiates transfer of a frame of the device

 *

 * @usb: the zd1211rw-private USB structure

 * @skb: a &struct sk_buff pointer

 *

 * This function tranmits a frame to the device. It doesn't wait for

 * completion. The frame must contain the control set and have all the

 * control set information available.

 *

 * The function returns 0 if the transfer has been successfully initiated.

 TX halted, try reset */

 reset will stop this worker, don't rearm */

 30 seconds since last rx, reset rx */

 FIXME: usb_interrupt, usb_tx, usb_rx? */

 Find bulk out endpoint */

 USB bulk command block */

 bulk command signature */

 bulk command signature */

 bulk command signature */

 bulk command signature */

 command length */

 SCSI command: START STOP UNIT */

 eject disc */

	/* At this point, the device disconnects and reconnects with the real

	/* Either something really bad happened, or we're just dealing with

 Just in case something has gone wrong! */

	/* If the disconnect has been caused by a removal of the

	 * driver module, the reset allows reloading of the driver. If the

	 * reset will not be executed here, the upload of the firmware in the

	 * probe function caused by the reloading of the driver will fail.

	/* In USB 2.0 mode EP_REGS_OUT endpoint is interrupt type. However in

	 * USB 1.1 mode endpoint is bulk. Select correct type URB by endpoint

	 * descriptor.

	/* The created block size seems to be larger than expected.

	 * However results appear to be correct.

 Read failed because firmware bug? */

ms*/);

 fall-through with r == 0 */

 Submit last iowrite16v URB */

	/* In USB 2.0 mode endpoint is interrupt type. However in USB 1.1 mode

	 * endpoint is bulk. Select correct type URB by endpoint descriptor.

 Submit previous URB */

	/* Delay submit so that URB_NO_INTERRUPT flag can be set for all URBs

	 * of currect batch except for very last.

 ms */);

 DEBUG */

 1: 3683a, but not used in ZYDAS driver */

ms*/);

 FALL-THROUGH with r == 0 */

 SPDX-License-Identifier: GPL-2.0-or-later

/* ZD1211 USB-WLAN driver for Linux

 *

 * Copyright (C) 2005-2007 Ulrich Kunitz <kune@deine-taler.de>

 * Copyright (C) 2006-2007 Daniel Drake <dsd@gentoo.org>

 freq shift 0xaad401 */

 antenna selection? */

	/* All of these writes are identical to AL2230 unless otherwise

 This one is 7230-specific, and happens before the rest */

 This value is different for 7230 (was: 0x2a) */

		/* This happened further down in AL2230,

 for newest (3rd cut) AL2300 */

 for newest (3rd cut) AL2300 */

 for newest (3rd cut) AL2300 */

 This value is different for 7230 (was: 0x00) */

 This value is different for 7230 (was: 0x24) */

 This value is different for 7230 (was: 0x2a) */

 This value is different for 7230 (was: 0x13) */

 for newest (3rd cut) AL2300 */

 This value is different for 7230 (was: 0x24) */

 This value is different for 7230 (was: 0xf4) */

 This one is 7230-specific */

 This value is different for 7230 (was: 0xff) */

 This value is different for 7230 (was: 0xff) */

 PLL_OFF */

 PLL_ON */

 for newest (3rd cut) AL2230 */

 4N25->Stone Request */

 5613 */

 for newest (3rd cut) AL2230 */

 for newest (3rd cut) AL2230 */

 ZD1215 5610 */

 5112 */

 5613 */

 4804, for 1212 new algorithm */

 change to 0x24 for AL7230B */

 4804, for 1212 new algorithm */

 5127, 0x13->0x1f */

 0x13 to 0x1f for AL7230B */

 5613 */

 5127, 0x13->0x1f */

 0x13 to 0x1f for AL7230B */

 5613 */

 E0->FCh at 4901 */

 5613 */

 4804, for 1212 new algorithm */

 5613 */

 4804, for 1212 new algorithm */

 5112 */

 5613 */

 5112 */

 5613 */

 5112 */

 4O07, 50->40 */

 5112, 0C->1A */

 PLL_OFF */

 PLL_ON */

 PLL_ON */

 PLL_OFF */

 PLL_OFF */

/* ZD1211B+AL7230B 6m band edge patching differs slightly from other

 FIXME: Channel 11 is not the edge for all regulatory domains. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2012 - 2018 Microchip Technology Inc., and its subsidiaries.

 * All rights reserved.

 'msg' should be free by the caller for syc */

/* The idx starts from 0 to (NUM_CONCURRENT_IFC - 1), but 0 index used as

 * special purpose in wilc device, so we add 1 to the index to starts from 1.

 * As a result, the returned index will be 1 to NUM_CONCURRENT_IFC.

/* We need to minus 1 from idx which is from wilc device to get real index

 * of wilc->vif[], because we add 1 when pass to wilc device in the function

 * wilc_get_vif_idx.

 * As a result, the index should be between 0 and (NUM_CONCURRENT_IFC - 1).

 extract RSN capabilities */

 fill bssid value only in station mode */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2012 - 2018 Microchip Technology Inc., and its subsidiaries.

 * All rights reserved.

 Operation at 2.4 GHz with channels 1-13 */

 already disconnected done */

 If firmware is not started, return. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2012 - 2018 Microchip Technology Inc., and its subsidiaries.

 * All rights reserved.

 Get WILC header */

	/*

	 * The packet offset field contain info about what type of management

	 * the frame we are dealing with and ack status

 hostapd callback mgmt frame */

 PKTHDR_RADIOTAP_VERSION; */

 success */

 PKTHDR_RADIOTAP_VERSION; */

	/*

	 * in case of fully hosting mode, the freeing will be done

	 * in response to the cfg packet

 PKTHDR_RADIOTAP_VERSION; */

	/*

	 * Identify if data or mgmt packet, if source address and bssid

	 * fields are equal send it to mgmt frames handler

 If monitor interface is already initialized, return it */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2012 - 2018 Microchip Technology Inc., and its subsidiaries.

 * All rights reserved.

 Clear bit 1 */

 indicate host wakeup */

 Set wake-up bit */

	/* Sometimes spi fail to read clock regs after reading

	 * writing clockless registers

		/*

		 * No VMM space available in firmware so retry to transmit

		 * the packet from tx queue.

 0x1002A0 */

 0x1002B0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2012 - 2018 Microchip Technology Inc., and its subsidiaries.

 * All rights reserved.

 protect SPI commands with CRC7 */

 protect SPI data with CRC16 */

/*

 * For CMD_SINGLE_READ and CMD_INTERNAL_READ, WILC may insert one or

 * more zero bytes between the command response and the DATA Start tag

 * (0xf3).  This behavior appears to be undocumented in "ATWILC1000

 * USER GUIDE" (https://tinyurl.com/4hhshdts) but we have observed 1-4

 * zero bytes when the SPI bus operates at 48MHz and none when it

 * operates at 1MHz.

 true if SPI protocol has been configured */

 true if we're probing chip's CRC config */

 true if crc7 is currently enabled */

 true if crc16 is currently enabled */

/********************************************

 *

 *      Spi protocol Function

 *

 SPI response fields (section 11.1.2 in ATWILC1000 User Guide): */

 SPI response values for the response fields: */

/*

 * The SPI data packet size may be any integer power of two in the

 * range from 256 to 8192 bytes.

 256 B */

 8 KiB */

/*

 * Select the data packet size (log2 of number of bytes): Use the

 * maximum data packet size.  We only retransmit complete packets, so

 * there is no benefit from using smaller data packets.

 sentinel */ }

	/*

	 * Data

		/*

		 * Write command

		/*

		 * Write data

		/*

		 * Write CRC

		/*

		 * No need to wait for response

/********************************************

 *

 *      Spi Internal Read/Write Function

 *

	/*

	 * Clockless registers operations might return unexptected responses,

	 * even if successful.

		/*

		 * Data Response header

		/*

		 * Read bytes

		/*

		 * Read CRC

 Clockless register */

/********************************************

 *

 *      Spi interfaces

 *

 Clockless register */

	/*

	 * The response to data packets is two bytes long.  For

	 * efficiency's sake, wilc_spi_write() wisely ignores the

	 * responses for all packets but the final one.  The downside

	 * of that optimization is that when the final data packet is

	 * short, we may receive (part of) the response to the

	 * second-to-last packet before the one for the final packet.

	 * To handle this, we always read 4 bytes and then search for

	 * the last byte that contains the "Response Start" code (0xc

	 * in the top 4 bits).  We then know that this byte is the

	 * first response byte of the final data packet.

 rsp[i] is the last response start byte */

	/*

	 * has to be greated than 4

	/*

	 * Data

	/*

	 * Data response

/********************************************

 *

 *      Bus interfaces

 *

	/*

	 * TODO:

 Confirm we can read chipid register without error: */

	/*

	 * configure protocol

	/*

	 * Infer the CRC settings that are currently in effect.  This

	 * is necessary because we can't be sure that the chip has

	 * been RESET (e.g, after module unload and reload).

 don't check CRC16 during probing */

 set up the desired CRC configuration: */

 set up the data packet size: */

 establish the new setup: */

 update our state to match new protocol settings: */

 re-read to make sure new settings are in effect: */

	/*

	 * make sure can read chip id without protocol error

	/*

	 * interrupt pin mux select

	/*

	 * interrupt enable

 Global spi HIF function table */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2012 - 2018 Microchip Technology Inc., and its subsidiaries.

 * All rights reserved.

 write */

 read */

 write */

 read */

/********************************************

 *

 *      Function 0

 *

	/**

	 *      Review: BIG ENDIAN

/********************************************

 *

 *      Sdio interfaces

 *

 only vendor specific registers */

		/**

		 *      set the AHB address

		/**

		 *      func 0 access

		/**

		 *      func 1 access

 only vendor specific registers */

		/**

		 *      func 0 access

		/**

		 *      func 1 access

 if (nblk > 0) */

/********************************************

 *

 *      Bus interfaces

 *

	/**

	 *      function 0 csa enable

	/**

	 *      function 0 block size

	/**

	 *      enable func1 IO

	/**

	 *      make sure func 1 is up

	/**

	 *      func 1 is ready, set func 1 block size

	/**

	 *      func 1 interrupt enable

	/**

	 *      make sure can read back chip id correctly

	/**

	 *      Read DMA count in words

	/**

	 *      Read IRQ flags

 select VMM table 0 */

 select VMM table 1 */

 enable VMM */

 has_thrpt_enh2 uses register 0xf8 to clear interrupts. */

		/*

		 * Cannot clear multiple interrupts.

		 * Must clear each interrupt individually.

 select VMM table 0 */

 select VMM table 1 */

 enable VMM */

	/**

	 *      Disable power sequencer

		/**

		 *      interrupt pin mux select

		/**

		 *      interrupt enable

 Global sdio HIF function table */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2012 - 2018 Microchip Technology Inc., and its subsidiaries.

 * All rights reserved.

 latest API version supported */

 Deinitialize IRQ */

 so we detect a change */

 Verify MAC Address is not already in use: */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2012 - 2018 Microchip Technology Inc., and its subsidiaries.

 * All rights reserved.

/********************************************

 *

 *      Configuration Functions

 *

/********************************************

 *

 *      Configuration Response Functions

 *

/********************************************

 *

 *      Configuration Exported Functions

 *

 seq no */

 call host interface info parse as well */

 store the string cfg parameters */

/* Orinoco MIC helpers

 *

 * See copyright notice in main.c

*******************************************************************/

 Michael MIC crypto setup                                         */

*******************************************************************/

 size of header + padding */

 Copy header into buffer. We need the padding on the end zeroed */

/* Encapsulate basic setting changes and retrieval on Hermes hardware

 *

 * See copyright notice in main.c

 Symbol firmware has a bug allocating buffers larger than this */

*******************************************************************/

 Data tables                                                      */

*******************************************************************/

/* This tables gives the actual meanings of the bitrate IDs returned

 in 100s of kilobits */

 Entry 0 is the default */

 Firmware version encoding */

/* Set priv->firmware type, determine firmware properties

 * This function can be called before we have registerred with netdev,

 * so all errors go out with dev_* rather than printk

 *

 * If non-NULL stores a firmware description in fw_name.

 * If non-NULL stores a HW version in hw_ver

 *

 * These are output via generic cfg80211 ethtool support.

 Get the hardware version */

 Get the firmware version */

 Intersil, Agere, Symbol Spectrum24 */

 Symbol Spectrum24 Trilogy */

 Default capabilities */

 Determine capabilities from the firmware version */

		/* Lucent Wavelan IEEE, Lucent Orinoco, Cabletron RoamAbout,

		priv->has_big_wep = 1; /* FIXME: this is wrong - how do we tell

 Don't work in 7.52 ? */

 All 9.x ? */

 All 9.x ? */

		/* Tested with Agere firmware :

		 *	1.16 ; 4.08 ; 4.52 ; 6.04 ; 6.16 ; 7.28 => Jean II

 Symbol , 3Com AirConnect, Intel, Ericsson WLAN */

 Intel MAC : 00:02:B3:* */

 3Com MAC : 00:50:DA:* */

 Get the Symbol firmware version */

			/* The firmware revision is a string, the format is

			 * something like : "V2.20-01".

			 * Quick and dirty parsing... - Jean II

		/* Symbol firmware is found on various cards, but

		 * there has been no attempt to check firmware

		 * download on non-spectrum_cs based cards.

		 *

		 * Given that the Agere firmware download works

		 * differently, we should avoid doing a firmware

		 * download with the Symbol algorithm on non-spectrum

		 * cards.

		 *

		 * For now we can identify a spectrum_cs based card

		 * because it has a firmware reset function.

 Tested with Intel firmware : 0x20015 => Jean II */

 Tested with 3Com firmware : 0x15012 & 0x22001 => Jean II */

		/* D-Link, Linksys, Adtron, ZoomAir, and many others...

		 * Samsung, Compaq 100/200 and Proxim are slightly

 D-Link MAC : 00:40:05:* */

 Addtron MAC : 00:90:D1:* */

 FIXME */

/* Read settings from EEPROM into our private structure.

 * MAC address gets dropped into callers buffer

 * Can be called before netdev registration.

 Get the MAC address */

 Get the station name */

 Get allowed channels */

 Get initial AP density */

 Get initial RTS threshold */

 Get initial fragmentation settings */

 Power management setup */

 Preamble setup */

 Retry settings */

 Can be called before netdev registration */

 Try workaround for old Symbol firmware bug */

 Set the MAC address */

 Set up the link mode */

 Set the channel/frequency */

			/* With wvlan_cs, in this case, we would crash.

			 * hopefully, this driver will behave better...

 Set the desired BSSID */

 Set the desired ESSID */

 WinXP wants partner to configure OWNSSID even in IBSS mode. (jimc) */

 Set the station name */

 Set AP density */

 Set RTS threshold */

 Set fragmentation threshold or MWO robustness */

 Set bitrate */

 Set power management */

 Set preamble - only for Symbol so far... */

 Set up encryption */

 Enable monitor mode */

 Disable monitor mode */

 Reset promiscuity / multicast*/

 Record mode change */

 Get tsc from the firmware */

 Lucent style rate */

		/* Note : in Lucent firmware, the return value of

		 * HERMES_RID_CURRENTTXRATE is the bitrate in Mb/s,

		 * and therefore is totally different from the

		 * encoding of HERMES_RID_CNFTXRATECONTROL.

 Intersil style rate */

 Symbol style rate */

 Set fixed AP address */

 not supported */

/* Change the WEP keys and/or the current keys.  Can be called

 * either from __orinoco_hw_setup_enc() or directly from

 * orinoco_ioctl_setiwencode().  In the later case the association

 * with the AP is not broken (if the firmware can handle it),

			/* Force uniform key length to work around

 Write all 4 keys */

 Write the index of the key used in transmission */

 Setup WEP keys */

 Agere style WEP */

 Enable the shared-key authentication. */

 Set WPA key management */

 Intersil style WEP */

 Symbol style WEP */

 Master WEP setting : on/off */

/* key must be 32 bytes, including the tx and rx MIC keys.

 * rsc must be NULL or up to 8 bytes

 * tsc must be NULL or up to 8 bytes

 Wait up to 100ms for tx queue to empty */

	/* If we're not in promiscuous mode, then we need to set the

	 * group address if either we want to multicast, or if we were

 Return : < 0 -> error code ; >= 0 -> length */

		/* We read the desired SSID from the hardware rather

		   than from priv->desired_essid, just in case the

		   firmware is allowed to change it on us. I'm not

		/* My guess is that the OWNSSID should always be whatever

		 * we set to the card, whereas CURRENT_SSID is the one that

 Intersil firmware 1.3.5 returns 0 when the interface is down */

 convert to bps */

 Scanning with port 0 disabled would fail */

	/* In monitor mode, the scan results are always empty.

	 * Probe responses are passed to the driver as received

 All channels */

 rate 1 Mbps */

 Any ESSID */

 Any ESSID */

 Disassociate from node with BSSID addr */

 Currently only supported by WPA enabled Agere fw */

/*

 * Hermes download helper.

 *

 * This helper:

 *  - is capable of writing to the volatile area of the hermes device

 *  - is currently not capable of writing to non-volatile areas

 *  - provide helpers to identify and update plugin data

 *  - is not capable of interpreting a fw image directly. That is up to

 *    the main card driver.

 *  - deals with Hermes I devices. It can probably be modified to deal

 *    with Hermes II devices

 *

 * Copyright (C) 2007, David Kilroy

 *

 * Plug data code slightly modified from spectrum_cs driver

 *    Copyright (C) 2002-2005 Pavel Roskin <proski@gnu.org>

 * Portions based on information in wl_lkm_718 Agere driver

 *    COPYRIGHT (C) 2001-2004 by Agere Systems Inc. All Rights Reserved

 *

 * The contents of this file are subject to the Mozilla Public License

 * Version 1.1 (the "License"); you may not use this file except in

 * compliance with the License. You may obtain a copy of the License

 * at http://www.mozilla.org/MPL/

 *

 * Software distributed under the License is distributed on an "AS IS"

 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See

 * the License for the specific language governing rights and

 * limitations under the License.

 *

 * Alternatively, the contents of this file may be used under the

 * terms of the GNU General Public License version 2 (the "GPL"), in

 * which case the provisions of the GPL are applicable instead of the

 * above.  If you wish to allow the use of your version of this file

 * only under the terms of the GPL and not to allow others to use your

 * version of this file under the MPL, indicate your decision by

 * deleting the provisions above and replace them with the notice and

 * other provisions required by the GPL.  If you do not delete the

 * provisions above, a recipient may use your version of this file

 * under either the MPL or the GPL.

 End markers used in dblocks */

 End of PDA */

 Last image block */

 End of text header */

/*

 * The following structures have little-endian fields denoted by

 * the leading underscore.  Don't access them directly - use inline

 * functions defined below.

/*

 * The binary image to be downloaded consists of series of data blocks.

 * Each block has the following structure.

 adapter address where to write the block */

 length of the data only, in bytes */

 data to be written */

/*

 * Plug Data References are located in the image after the last data

 * block.  They refer to areas in the adapter memory where the plug data

 * items with matching ID should be written.

 record ID */

 adapter address where to write the data */

 expected length of the data, in bytes */

 next PDR starts here */

/*

 * Plug Data Items are located in the EEPROM read from the adapter by

 * primary firmware.  They refer to the device-specific data that should

 * be plugged into the secondary firmware.

 length of ID and data, in words */

 record ID */

 plug data */

** FW data block access functions ***/

** PDR Access functions ***/

** PDI Access functions ***/

 Return length of the data only, in bytes */

** Plug Data Functions ***/

/*

 * Scan PDR for the record with the specified RECORD_ID.

 * If it's not found, return NULL.

		/*

		 * PDR area is currently not terminated by PDI_END.

		 * It's followed by CRC records, which have the type

		 * field where PDR has length.  The type can be 0 or 1.

 If the record ID matches, we are done */

 Scan production data items for a particular entry */

 If the record ID matches, we are done */

 Process one Plug Data Item - find corresponding PDR and plug it */

 Find the PDR corresponding to this PDI */

 No match is found, safe to ignore */

 Lengths of the data in PDI and PDR must match */

 do the actual plugging */

/* Parse PDA and write the records into the adapter

 *

 * Attempt to write every records that is in the specified pda

 * which also has a valid production data record for the firmware.

 Go through every PDI and plug them into the adapter */

 Increment to the next PDI */

/* Identify the total number of bytes in all blocks

 * including the header data.

	/* Skip all blocks to locate Plug Data References

** Hermes programming ***/

 Program the data blocks */

** Default plugging data for Hermes I ***/

 Values from wl_lkm_718/hcf/dhf.c */

  HWIF Compatibility */

 PPPPSign */

 PPPPProf */

 Antenna diversity */

 Modem VCO band Set-up */

 Modem Rx Gain Table Values */

/* Write PDA according to certain rules.

 *

 * For every production data record, look for a previous setting in

 * the pda, and use that.

 *

 * For certain records, use defaults if they are not found in pda.

		/*

		 * For spectrum_cs firmwares,

		 * PDR area is currently not terminated by PDI_END.

		 * It's followed by CRC records, which have the type

		 * field where PDR has length.  The type can be 0 or 1.

 Modem REFDAC values */

 Modem VGDAC values */

  HWIF Compatibility */

 PPPPSign */

 PPPPProf */

 Antenna diversity */

 Modem VCO band Set-up */

 Modem Rx Gain Table Values */

 Use default */

 Lengths of the data in PDI and PDR must match */

 do the actual plugging */

/* orinoco_plx.c

 *

 * Driver for Prism II devices which would usually be driven by orinoco_cs,

 * but are connected to the PCI bus by a PLX9052.

 *

 * Current maintainers are:

 *	Pavel Roskin <proski AT gnu.org>

 * and	David Gibson <hermes AT gibson.dropbear.id.au>

 *

 * (C) Copyright David Gibson, IBM Corp. 2001-2003.

 * Copyright (C) 2001 Daniel Barlow

 *

 * The contents of this file are subject to the Mozilla Public License

 * Version 1.1 (the "License"); you may not use this file except in

 * compliance with the License. You may obtain a copy of the License

 * at http://www.mozilla.org/MPL/

 *

 * Software distributed under the License is distributed on an "AS IS"

 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See

 * the License for the specific language governing rights and

 * limitations under the License.

 *

 * Alternatively, the contents of this file may be used under the

 * terms of the GNU General Public License version 2 (the "GPL"), in

 * which case the provisions of the GPL are applicable instead of the

 * above.  If you wish to allow the use of your version of this file

 * only under the terms of the GPL and not to allow others to use your

 * version of this file under the MPL, indicate your decision by

 * deleting the provisions above and replace them with the notice and

 * other provisions required by the GPL.  If you do not delete the

 * provisions above, a recipient may use your version of this file

 * under either the MPL or the GPL.

 *

 * Here's the general details on how the PLX9052 adapter works:

 *

 * - Two PCI I/O address spaces, one 0x80 long which contains the

 * PLX9052 registers, and one that's 0x40 long mapped to the PCMCIA

 * slot I/O address space.

 *

 * - One PCI memory address space, mapped to the PCMCIA attribute space

 * (containing the CIS).

 *

 * Using the later, you can read through the CIS data to make sure the

 * card is compatible with the driver. Keep in mind that the PCMCIA

 * spec specifies the CIS as the lower 8 bits of each word read from

 * the CIS, so to read the bytes of the CIS, read every other byte

 * (0,2,4,...). Passing that test, you need to enable the I/O address

 * space on the PCMCIA card via the PCMCIA COR register. This is the

 * first byte following the CIS. In my case (which may not have any

 * relation to what's on the PRISM2 cards), COR was at offset 0x800

 * within the PCI memory space. Write 0x41 to the COR register to

 * enable I/O mode and to select level triggered interrupts. To

 * confirm you actually succeeded, read the COR register back and make

 * sure it actually got set to 0x41, in case you have an unexpected

 * card inserted.

 *

 * Following that, you can treat the second PCI I/O address space (the

 * one that's not 0x80 in length) as the PCMCIA I/O space.

 *

 * Note that in the Eumitcom's source for their drivers, they register

 * the interrupt as edge triggered when registering it with the

 * Windows kernel. I don't recall how to register edge triggered on

 * Linux (if it can be done at all). But in some experimentation, I

 * don't see much operational difference between using either

 * interrupt mode. Don't mess with the interrupt mode in the COR

 * register though, as the PLX9052 wants level triggers with the way

 * the serial EEPROM configures it on the WL11000.

 *

 * There's some other little quirks related to timing that I bumped

 * into, but I don't recall right now. Also, there's two variants of

 * the WL11000 I've seen, revision A1 and T2. These seem to differ

 * slightly in the timings configured in the wait-state generator in

 * the PLX9052. There have also been some comments from Eumitcom that

 * cards shouldn't be hot swapped, apparently due to risk of cooking

 * the PLX9052. I'm unsure why they believe this, as I can't see

 * anything in the design that would really cause a problem, except

 * for crashing drivers not written to expect it. And having developed

 * drivers for the WL11000, I'd say it's quite tricky to write code

 * that will successfully deal with a hot unplug. Very odd things

 * happen on the I/O side of things. But anyway, be warned. Despite

 * that, I've hot-swapped a number of times during debugging and

 * driver development for various reasons (stuck WAIT# line after the

 * radio card's firmware locks up).

 COR attribute offset of Prism2 PC card */

 Enable PC card with interrupt in level trigger */

 reset bit in the COR register */

 milliseconds */

 Interrupt Control & Status Register */

 Interrupt Enable bit */

/*

 * Do a soft reset of the card using the Configuration Option Register

 Just in case, wait more until the card is no longer busy */

 Still busy? */

 Verify whether a supported PC card is present */

 FIXME: we probably need to be smarted about this */

	/* bjoern: We need to tell the card to enable interrupts, in

	   case the serial eprom didn't do this already.  See the

 Allocate network device */

 Siemens SpeedStream SS1023 */

 Netgear MA301 */

 Correga  - does this work? */

	{0x1638, 0x1100, PCI_ANY_ID, PCI_ANY_ID,},	/* SMC EZConnect SMC2602W,

							   Eumitcom PCI WL11000,

 Global Sun Tech GL24110P */

 Reported working, but unknown */

 Linksys WDT11 */

 USR 2415 */

	{0xec80, 0xec00, PCI_ANY_ID, PCI_ANY_ID,},	/* Belkin F5D6000 tested by

	{0x10b7, 0x7770, PCI_ANY_ID, PCI_ANY_ID,},	/* 3Com AirConnect PCI tested by

/* Helpers for managing scan queues

 *

 * See copyright notice in main.c

 NULL terminated */

 NULL terminated */

	/* We might still have another 2 rates, which need to go in

 NULL terminated */

 Reconstruct SSID and bitrate IEs to pass up */

 Then ignore it for now */

 In the scan data */

		/* Lack of documentation necessitates this hack.

		 * Different firmwares have 68 or 76 byte long atoms.

		 * We try modulo first.  If the length divides by both,

		 * we check what would be the channel in the second

		 * frame for a 68-byte atom.  76-byte atoms have 0 there.

 Sanity check for atom_len */

 Check that we got an whole number of atoms */

 Process the entries one by one */

/*

 * Driver for 802.11b cards using RAM-loadable Symbol firmware, such as

 * Symbol Wireless Networker LA4137, CompactFlash cards by Socket

 * Communications and Intel PRO/Wireless 2011B.

 *

 * The driver implements Symbol firmware download.  The rest is handled

 * in hermes.c and main.c.

 *

 * Utilities for downloading the Symbol firmware are available at

 * http://sourceforge.net/projects/orinoco/

 *

 * Copyright (C) 2002-2005 Pavel Roskin <proski@gnu.org>

 * Portions based on orinoco_cs.c:

 *	Copyright (C) David Gibson, Linuxcare Australia

 * Portions based on Spectrum24tDnld.c from original spectrum24 driver:

 *	Copyright (C) Symbol Technologies.

 *

 * See copyright notice in file main.c.

*******************************************************************/

 Module stuff							    */

*******************************************************************/

 Module parameters */

/* Some D-Link cards have buggy CIS. They do work at 5v properly, but

 = 0 */

*******************************************************************/

 Data structures						    */

*******************************************************************/

/* PCMCIA specific device information (goes in the card field of

*******************************************************************/

 Function prototypes						    */

*******************************************************************/

 Constants for the CISREG_CCSR register */

 run firmware after reset */

 don't run firmware after reset */

 memory width bit, should be preserved */

/*

 * Reset the card using configuration registers COR and CCSR.

 * If IDLE is 1, stop the firmware, so that it can be safely rewritten.

 Doing it if hardware is gone is guaranteed crash */

 Save original COR value */

 Soft-Reset card */

 Read CCSR */

	/*

	 * Start or stop the firmware.  Memory width bit should be

	 * preserved from the value we've just read.

 Restore original COR configuration index */

*******************************************************************/

 Device methods						    */

*******************************************************************/

 Soft reset using COR and HCR */

*******************************************************************/

 PCMCIA stuff							    */

*******************************************************************/

 Link both structures together */

 spectrum_cs_attach */

 spectrum_cs_detach */

	/* We initialize the hermes structure before completing PCMCIA

	 * configuration just in case the interrupt handler gets

 Reset card */

 Initialise the main driver */

 Register an interface with the stack */

 spectrum_cs_config */

	/* We're committed to taking the device away now, so mark the

 spectrum_cs_release */

 Mark the device as stopped, to block IO until later */

*******************************************************************/

 Module initialization					    */

*******************************************************************/

 Symbol Spectrum24 LA4137 */

 Socket Communications CF */

 2011B, not 2011 */

/* Wireless extensions support.

 *

 * See copyright notice in main.c

/* Helper routine to record keys

 FIXME: Can we do better than this? */

	/* If busy, return the old stats.  Returning NULL may cause

	/* We can't really wait for the tallies inquiry command to

	 * complete, so we just use the previous results and trigger

	/* FIXME: Really we should wait for the inquiry to come back -

	 * as it is the stats we give don't make a whole lot of sense.

	 * Unfortunately, it's not clear how to do that within the

	 * wireless extensions framework: I think we're in user

	 * context, but a lock seems to be held by the time we get in

		/* If a spy address is defined, we report stats of the

*******************************************************************/

 Wireless extensions                                              */

*******************************************************************/

 Call commit handler */

 Enable automatic roaming - no sanity checks are needed */

 "off" means keep existing connection */

 Intersil firmware hangs without Desired ESSID */

 Finally, enable manual roaming */

 Call commit handler */

 We actually have a key to set - check its length */

 Clear any TKIP key we have */

 Switch on WEP if off */

		/* Important note : if the user do "iwconfig eth0 enc off",

		 * we will arrive there with an index of -1. This is valid

 Set the index : Check that the key is valid */

 Try fast key change if connected and only keys are changed */

 No need to commit if successful */

	/* Note : ESSID is ignored in Ad-Hoc demo mode, but we can set it

	/* Hum... Should not use Wireless Extension constant (may change),

 NULL the string (for NULL termination & ESSID = ANY) - Jean II */

 If not ANY, get the new ESSID */

 Call commit handler */

 Call commit handler */

 In infrastructure mode the AP sets the channel */

 Setting by channel number */

 Setting by frequency */

 Calculate denominator to rescale to MHz */

 Fast channel change - no commit if successful */

 Locking done in there */

 auto */

 Call commit handler */

 100s of kilobits */

	/* As the user space doesn't know our highest rate, it uses -1

	 * to ask us to set the highest rate.  Test it using "iwconfig

	/* If the interface is running we try to find more about the

 Ignore errors if we can't get the actual bitrate */

 Call commit handler */

 No flags : but we may have a value - Jean II */

		/* It's valid to not have a value if we are just toggling

 Note : by default, display the period */

 Determine and validate the key index */

 Clear any TKIP TX key we had */

 Set the requested key first */

		/*

		 * orinoco does not use these parameters

		/* Management Frame Protection not supported.

		 * Only fail if set to required.

		/* wl_lkm implies value 2 == PSK for Hermes I

		 * which ties in with WEXT

		 * no other hints tho :(

		/* When countermeasures are enabled, shut down the

		 * card; when disabled, re-enable the card. This must

		 * take effect immediately.

		 *

		 * TODO: Make sure that the EAPOL message is getting

		 *       out before card disabled

 else silently accept disable of WPA */

 cut off at IEEE80211_MAX_DATA_LEN */

		/* Looks like wl_lkm wants to check the auth alg, and

		 * somehow pass it to the firmware.

		 * Instead it just calls the key mgmt rid

		 *   - we do this in set auth.

 silently ignore */

 Firmware reset */

 Actually update the mode we are using */

 Call commit handler */

 Try to do IEEE ad-hoc mode */

 Try to do Lucent proprietary ad-hoc mode */

 Actually update the mode we are using */

	/* 802.11b has recently defined some short preamble.

	 * Basically, the Phy header has been reduced in size.

	 * This increase performance, especially at high rates

	 * (the preamble is transmitted at 1Mb/s), unfortunately

 Call commit handler */

/* ioctl interface to hermes_read_ltv()

 * To use with iwpriv, pass the RID as the token argument, e.g.

 * iwpriv get_rid [0xfc00]

 * At least Wireless Tools 25 is required to use iwpriv.

	/* It's a "get" function, but we don't want users to access the

 Commit handler, called after set operations */

/*

 * Structures to export the Wireless Handlers

/*

  Added typecasting since we no longer use iwreq_data -- Moustafa

/*

 * USB Orinoco driver

 *

 * Copyright (c) 2003 Manuel Estrada Sainz

 *

 * The contents of this file are subject to the Mozilla Public License

 * Version 1.1 (the "License"); you may not use this file except in

 * compliance with the License. You may obtain a copy of the License

 * at http://www.mozilla.org/MPL/

 *

 * Software distributed under the License is distributed on an "AS IS"

 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See

 * the License for the specific language governing rights and

 * limitations under the License.

 *

 * Alternatively, the contents of this file may be used under the

 * terms of the GNU General Public License version 2 (the "GPL"), in

 * which case the provisions of the GPL are applicable instead of the

 * above.  If you wish to allow the use of your version of this file

 * only under the terms of the GPL and not to allow others to use your

 * version of this file under the MPL, indicate your decision by

 * deleting the provisions above and replace them with the notice and

 * other provisions required by the GPL.  If you do not delete the

 * provisions above, a recipient may use your version of this file

 * under either the MPL or the GPL.

 *

 * Queueing code based on linux-wlan-ng 0.2.1-pre5

 *

 * Copyright (C) 1999 AbsoluteValue Systems, Inc.  All Rights Reserved.

 *

 *	The license is the same as above.

 *

 * Initialy based on USB Skeleton driver - 0.7

 *

 * Copyright (c) 2001 Greg Kroah-Hartman (greg@kroah.com)

 *

 *	This program is free software; you can redistribute it and/or

 *	modify it under the terms of the GNU General Public License as

 *	published by the Free Software Foundation; either version 2 of

 *	the License, or (at your option) any later version.

 *

 * NOTE: The original USB Skeleton driver is GPL, but all that code is

 * gone so MPL/GPL applies.

 802.3 */

 802.2 */

 SNAP */

 Debugging macros */

/*

 * Under some conditions, the card gets stuck and stops paying attention

 * to the world (i.e. data communication stalls) until we do something to

 * it.  Sending an INQ_TALLIES command seems to be enough and should be

 * harmless otherwise.  This behaviour has been observed when using the

 * driver on a systemimager client during installation.  In the past a

 * timer was used to send INQ_TALLIES commands when there was no other

 * activity, but it was troublesome and was removed.

 Compaq Computer Corp. */

 Compaq WL215 USB Adapter */

 Compaq W200 USB Adapter */

 Compaq WL215 USB Adapter */

 BUFFALO WLI-USB-L11 */

 BUFFALO WLI-USB-L11G-WR */

 BUFFALO WLI-USB-L11G */

 Lucent Technologies */

 Lucent/Agere Orinoco USB Client */

 Avaya Wireless USB Card */

 Agere Systems */

 Wireless USB Card Model 0801 */

 Wireless USB Card Model 0802 */

 WLAN USB Card */

 ELSA AirLancer USB-11 */

 Joynet WLAN USB Card */

 Samsung SEW-2001u Card */

 Samsung SEW-2001u Card */

 Samsung SEW-2003U Card */

 I-GATE 11M USB Card */

 connect2AIR WLAN E-1100 USB */

 2Wire Wireless USB adapter */

 Recognize info frames */

 0x0210 */

 0x01 for data frames, 0x02 otherwise */

 transport size */

 CRC up to here */

 Table of devices that work or may work with this driver */

 Terminating entry */

 Structure to hold all of our device specific stuff */

 Signals that CTX is dead */

 OUT for req pkt */

 Timeout handling */

 Current state */

 the RID that we will wait for */

 Forward declarations */

			/* This is normal, as all request contexts get flushed

		/* Things are really bad if this happens. Just leak

		 * the CTX because it may still be linked to the

		 * queue or the OUT urb may still be active.

		 * Just leaking at least prevents an Oops or Panic.

/*

 * ezusb_req_queue_run:

 * Description:

 *	Note: Only one active CTX at any one time, because there's no

 *	other (reliable) way to match the response URB to the correct

 *	CTX.

 We need to split this off to avoid a race condition */

 reply URB still pending */

 IN already received before this OUT-ACK */

		/* If someone cancels the OUT URB then its status

		 * should be either -ECONNRESET or -ENOENT.

 Find the CTX on the active queue that requested this URB */

 The data we want is in the in buffer, exchange */

		/* We have received our response URB before

		 * our request has been acknowledged. Do NOT

		 * destroy our CTX yet, because our OUT URB

		 * is still alive ...

 Let the machine continue running. */

		/* This is the usual path: our request

		 * has already been acknowledged, and

		 * we have now received the reply.

 Stop the intimer */

 Call the completion handler */

 Throw this CTX away and try submitting another */

 switch */

 Done or failed - nothing to wait for */

		/* If we get called from a timer or with our lock acquired, then

		 * we can't wait for the completion and have to poll. This won't

		 * happen if the USB controller completes the URB requests in

		 * BH.

 Done or failed - nothing to wait for */

/*

 * ezusb_fill_req:

 *

 * if data == NULL and length > 0 the data is assumed to be already in

 * the target buffer and only the header is filled.

 *

 avoid argument promotion */

	/*

	 * This byte is 1 and should be replaced with 0.  The offset is

	 * 0x10AD in version 0.0.6.  The byte in question should follow

	 * the end of the code pointed to by the jump in the beginning

	 * of the firmware.  Also, it is read by code located at 0x358.

		/* 0x100-0x300 should be left alone, it contains card

 protect upriv->reply_count, guarantee sequential numbers */

	/* On memory mapped devices HERMES_RID_CNFGROUPADDRESSES can be

 Include 4 bytes for length/type */

	/* wl_lkm does not include PDA size in the PDA area.

	 * We will pad the information into pda, so other routines

 Includes CFG_PROD_DATA but not itself */

 CFG_PROD_DATA */

	/* We can only send 2048 bytes out of the bulk xmit at a time,

	 * so we have to split any programming into chunks of <2048

		/* Oops, the firmware hasn't established a connection,

		   silently drop the packet (this seems to be the

 Check packet length */

		/* Mic has been offset so it can be copied to an even

		 * address. We're copying eveything anyway, so we

 Finally, we actually initiate the send */

 The card may behave better if we send evenly sized usb transfers */

	/* Write the MAGIC number on the simulated registers to keep

		/* When a device gets unplugged we get this every time

		 * we resubmit, flooding the logs.  Since we don't use

 No timer will be rearmed from here */

		/* FIXME: there is an slight chance for the irq handler to

 set up the endpoint information */

 check out the endpoints */

 we found a bulk in endpoint */

 we found a bulk out endpoint */

	/* If the firmware is already downloaded orinoco.c will call

	 * ezusb_init but if the firmware is not already there, that will make

	 * the kernel very unstable, so we try initializing here and quit in

 Initialise the main driver */

 upriv->dev was 0, so ezusb_delete() didn't free it */

 usb specific object needed to register this driver with the usb subsystem */

/* orinoco_nortel.c

 *

 * Driver for Prism II devices which would usually be driven by orinoco_cs,

 * but are connected to the PCI bus by a PCI-to-PCMCIA adapter used in

 * Nortel emobility, Symbol LA-4113 and Symbol LA-4123.

 *

 * Copyright (C) 2002 Tobias Hoffmann

 *           (C) 2003 Christoph Jungegger <disdos@traum404.de>

 *

 * Some of this code is borrowed from orinoco_plx.c

 *	Copyright (C) 2001 Daniel Barlow

 * Some of this code is borrowed from orinoco_pci.c

 *  Copyright (C) 2001 Jean Tourrilhes

 * Some of this code is "inspired" by linux-wlan-ng-0.1.10, but nothing

 * has been copied from it. linux-wlan-ng-0.1.10 is originally :

 *	Copyright (C) 1999 AbsoluteValue Systems, Inc.  All Rights Reserved.

 *

 * The contents of this file are subject to the Mozilla Public License

 * Version 1.1 (the "License"); you may not use this file except in

 * compliance with the License. You may obtain a copy of the License

 * at http://www.mozilla.org/MPL/

 *

 * Software distributed under the License is distributed on an "AS IS"

 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See

 * the License for the specific language governing rights and

 * limitations under the License.

 *

 * Alternatively, the contents of this file may be used under the

 * terms of the GNU General Public License version 2 (the "GPL"), in

 * which case the provisions of the GPL are applicable instead of the

 * above.  If you wish to allow the use of your version of this file

 * only under the terms of the GPL and not to allow others to use your

 * version of this file under the MPL, indicate your decision by

 * deleting the provisions above and replace them with the notice and

 * other provisions required by the GPL.  If you do not delete the

 * provisions above, a recipient may use your version of this file

 * under either the MPL or the GPL.

 COR attribute offset of Prism2 PC card */

 Enable PC card with interrupt in level trigger */

/*

 * Do a soft reset of the card using the Configuration Option Register

 * We need this to get going...

 * This is the part of the code that is strongly inspired from wlan-ng

 *

 * Note bis : Don't try to access HERMES_CMD during the reset phase.

 * It just won't work !

 Assert the reset until the card notices */

 Give time for the card to recover from this hard effort */

 Set COR as usual */

 Setup bridge */

 Set the PCMCIA COR register */

 Set LEDs */

 Allocate network device */

 Clear LEDs */

 Nortel emobility PCI */

 Symbol LA-4123 PCI */

/* cfg80211 support

 *

 * See copyright notice in main.c

 Supported bitrates. Must agree with hw.c */

 Called after orinoco_private is allocated. */

 Called after firmware is initialised */

	/* TODO: should we set if we only have demo ad-hoc?

	 *       (priv->has_port3)

 Only support channels allowed by the card EEPROM */

 On error the we aren't processing the request */

 Fast channel change - no commit if successful */

 Setting short retry not supported */

 Setting long retry not supported */

 Set fragmentation */

				/* cfg80211 value is 257-2347 (odd only)

		/* Set RTS.

		 *

		 * Prism documentation suggests default of 2432,

		 * and a range of 0-3000.

		 *

		 * Current implementation uses 2347 as the default and

		 * the upper limit.

/* orinoco_pci.c

 *

 * Driver for Prism 2.5/3 devices that have a direct PCI interface

 * (i.e. these are not PCMCIA cards in a PCMCIA-to-PCI bridge).

 * The card contains only one PCI region, which contains all the usual

 * hermes registers, as well as the COR register.

 *

 * Current maintainers are:

 *	Pavel Roskin <proski AT gnu.org>

 * and	David Gibson <hermes AT gibson.dropbear.id.au>

 *

 * Some of this code is borrowed from orinoco_plx.c

 *	Copyright (C) 2001 Daniel Barlow <dan AT telent.net>

 * Some of this code is "inspired" by linux-wlan-ng-0.1.10, but nothing

 * has been copied from it. linux-wlan-ng-0.1.10 is originally :

 *	Copyright (C) 1999 AbsoluteValue Systems, Inc.  All Rights Reserved.

 * This file originally written by:

 *	Copyright (C) 2001 Jean Tourrilhes <jt AT hpl.hp.com>

 * And is now maintained by:

 *	(C) Copyright David Gibson, IBM Corp. 2002-2003.

 *

 * The contents of this file are subject to the Mozilla Public License

 * Version 1.1 (the "License"); you may not use this file except in

 * compliance with the License. You may obtain a copy of the License

 * at http://www.mozilla.org/MPL/

 *

 * Software distributed under the License is distributed on an "AS IS"

 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See

 * the License for the specific language governing rights and

 * limitations under the License.

 *

 * Alternatively, the contents of this file may be used under the

 * terms of the GNU General Public License version 2 (the "GPL"), in

 * which case the provisions of the GPL are applicable instead of the

 * above.  If you wish to allow the use of your version of this file

 * only under the terms of the GPL and not to allow others to use your

 * version of this file under the MPL, indicate your decision by

 * deleting the provisions above and replace them with the notice and

 * other provisions required by the GPL.  If you do not delete the

 * provisions above, a recipient may use your version of this file

 * under either the MPL or the GPL.

 Offset of the COR register of the PCI card */

 Bitmask to reset the card */

/* Magic timeouts for doing the reset.

 * Those times are straight from wlan-ng, and it is claimed that they

 ms */

 ms */

 ms */

/*

 * Do a soft reset of the card using the Configuration Option Register

 * We need this to get going...

 * This is the part of the code that is strongly inspired from wlan-ng

 *

 * Note : This code is done with irq enabled. This mean that many

 * interrupts will occur while we are there. This is why we use the

 * jiffies to regulate time instead of a straight mdelay(). Usually we

 * need only around 245 iteration of the loop to do 250 ms delay.

 *

 * Note bis : Don't try to access HERMES_CMD during the reset phase.

 * It just won't work !

 Assert the reset until the card notices */

 Give time for the card to recover from this hard effort */

 The card is ready when it's no longer busy */

 Still busy? */

 Allocate network device */

 Intersil Prism 3 */

 Intersil Prism 2.5 */

 Samsung MagicLAN SWL-2210P */

/* orinoco_tmd.c

 *

 * Driver for Prism II devices which would usually be driven by orinoco_cs,

 * but are connected to the PCI bus by a TMD7160.

 *

 * Copyright (C) 2003 Joerg Dorchain <joerg AT dorchain.net>

 * based heavily upon orinoco_plx.c Copyright (C) 2001 Daniel Barlow

 *

 * The contents of this file are subject to the Mozilla Public License

 * Version 1.1 (the "License"); you may not use this file except in

 * compliance with the License. You may obtain a copy of the License

 * at http://www.mozilla.org/MPL/

 *

 * Software distributed under the License is distributed on an "AS IS"

 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See

 * the License for the specific language governing rights and

 * limitations under the License.

 *

 * Alternatively, the contents of this file may be used under the

 * terms of the GNU General Public License version 2 (the "GPL"), in

 * which case the provisions of the GPL are applicable instead of the

 * above.  If you wish to allow the use of your version of this file

 * only under the terms of the GPL and not to allow others to use your

 * version of this file under the MPL, indicate your decision by

 * deleting the provisions above and replace them with the notice and

 * other provisions required by the GPL.  If you do not delete the

 * provisions above, a recipient may use your version of this file

 * under either the MPL or the GPL.

 *

 * The actual driving is done by main.c, this is just resource

 * allocation stuff.

 *

 * This driver is modeled after the orinoco_plx driver. The main

 * difference is that the TMD chip has only IO port ranges and doesn't

 * provide access to the PCMCIA attribute space.

 *

 * Pheecom sells cards with the TMD chip as "ASIC version"

 Enable PC card with interrupt in level trigger */

 reset bit in the COR register */

 milliseconds */

/*

 * Do a soft reset of the card using the Configuration Option Register

 Just in case, wait more until the card is no longer busy */

 Still busy? */

 Allocate network device */

 NDC and OEMs, e.g. pheecom */

/* Firmware file reading and download helpers

 *

 * See copyright notice in main.c

 End markers (for Symbol firmware only) */

 End of text header */

/* Structure used to access fields in FW

 * Make sure LE decoding macros are used

 ASCII string for header version */

 Total length of header */

 NIC entry point */

 Number of blocks to program */

 Offset of block data from eof header */

 Offset to PDR data from eof header */

 Offset to primary plug data */

 Offset to compatibility data*/

 FW signature length headersize-20 */

/* Check the range of various header entries. Return a pointer to a

 TODO: consider adding a checksum or CRC to the firmware format */

 Download either STA or AP firmware into the card. */

 Plug Data Area (PDA) */

 Read current plug data */

 Enable aux port to allow programming */

 Program data */

 Update production data */

 Tell card we've finished */

 Check if we're running */

 If we requested the firmware, release it. */

/*

 * Process a firmware image - stop the card, load the firmware, reset

 * the card and make sure it responds.  For the secondary firmware take

 * care of the PDA - read it and then write it on top of the firmware.

 Plug Data Area (PDA) */

 Binary block begins after the 0x1A marker */

 Read the PDA from EEPROM */

 Stop the firmware, so that it can be safely rewritten */

 Program the adapter with new firmware */

 Write the PDA to the adapter */

 Run the firmware */

 Reset hermes chip and make sure it responds */

 hermes_reset() should return 0 with the secondary firmware */

 And this should work with any firmware */

/*

 * Download the firmware into the card, this also does a PCMCIA soft

 * reset on the card, to make sure it's in a sane state.

 Load primary firmware */

 Load secondary firmware */

 Reload firmware */

 case FIRMWARE_TYPE_INTERSIL: */

	/* TODO: if we fail we probably need to reinitialise

/* orinoco_cs.c (formerly known as dldwd_cs.c)

 *

 * A driver for "Hermes" chipset based PCMCIA wireless adaptors, such

 * as the Lucent WavelanIEEE/Orinoco cards and their OEM (Cabletron/

 * EnteraSys RoamAbout 802.11, ELSA Airlancer, Melco Buffalo and others).

 * It should also be usable on various Prism II based cards such as the

 * Linksys, D-Link and Farallon Skyline. It should also work on Symbol

 * cards such as the 3Com AirConnect and Ericsson WLAN.

 *

 * Copyright notice & release notes in file main.c

*******************************************************************/

 Module stuff							    */

*******************************************************************/

 Module parameters */

/* Some D-Link cards have buggy CIS. They do work at 5v properly, but

 = 0 */

*******************************************************************/

 Data structures						    */

*******************************************************************/

/* PCMCIA specific device information (goes in the card field of

 Used to handle hard reset */

	/* yuck, we need this hack to work around the insanity of the

*******************************************************************/

 Function prototypes						    */

*******************************************************************/

*******************************************************************/

 Device methods						    */

*******************************************************************/

 We need atomic ops here, because we're not holding the lock */

*******************************************************************/

 PCMCIA stuff							    */

*******************************************************************/

 Link both structures together */

 orinoco_cs_attach */

 orinoco_cs_detach */

	/* We initialize the hermes structure before completing PCMCIA

	 * configuration just in case the interrupt handler gets

 Initialise the main driver */

 Register an interface with the stack */

 orinoco_cs_config */

	/* We're committed to taking the device away now, so mark the

 orinoco_cs_release */

	/* This is probably racy, but I can't think of

	   a better way, short of rewriting the PCMCIA

*******************************************************************/

 Module initialization					    */

*******************************************************************/

 3Com AirConnect PCI 777A */

 Ericsson WLAN Card C11 */

 Nortel Networks eMobility 802.11 Wireless Adapter */

 AirWay 802.11 Adapter (PCMCIA) */

 ARtem Onair */

 ARtem Onair Comcard 11 */

 Buffalo WLI-PCM-S11 */

 ASUS SpaceLink WL-100 */

 SpeedStream SS1021 Wireless Adapter */

 SpeedStream Wireless Adapter */

 PLANEX RoadLannerWave GW-NS11H */

 Lucent Orinoco */

 Only entries that certainly identify Prism chipset */

 SonicWALL Long Range Wireless Card */

 Sohoware NCP110, Philips 802.11b */

 AnyPoint(TM) Wireless II PC Card */

 PROXIM RangeLAN-DS/LAN PC CARD */

 Compaq WL100 11 Mbps Wireless Adapter */

 Intermec MobileLAN 11Mbps 802.11b WLAN Card */

 Samsung SWL2000-N 11Mb/s WLAN Card */

 Linksys WPC11 Version 2.5 */

 Linksys WPC11 Version 3 */

 Compaq HNW-100 11 Mbps Wireless Adapter */

 Linksys WCF12 Wireless CompactFlash Card */

 Airvast WN-100 */

 Adaptec Ultra Wireless ANW-8030 */

 CONTEC FLEXSCAN/FX-DDS110-PCC */

 Conceptronic CON11Cpro, EMTAC A2424i */

 Safeway 802.11b, ZCOMAX AirRunner/XI-300 */

 D-Link DCF660, Sandisk Connect SDWCFB-000 */

 This may be Agere or Intersil Firmware */

/* hermes.c

 *

 * Driver core for the "Hermes" wireless MAC controller, as used in

 * the Lucent Orinoco and Cabletron RoamAbout cards. It should also

 * work on the hfa3841 and hfa3842 MAC controller chips used in the

 * Prism II chipsets.

 *

 * This is not a complete driver, just low-level access routines for

 * the MAC controller itself.

 *

 * Based on the prism2 driver from Absolute Value Systems' linux-wlan

 * project, the Linux wvlan_cs driver, Lucent's HCF-Light

 * (wvlan_hcf.c) library, and the NetBSD wireless driver (in no

 * particular order).

 *

 * Copyright (C) 2000, David Gibson, Linuxcare Australia.

 * (C) Copyright David Gibson, IBM Corp. 2001-2003.

 *

 * The contents of this file are subject to the Mozilla Public License

 * Version 1.1 (the "License"); you may not use this file except in

 * compliance with the License. You may obtain a copy of the License

 * at http://www.mozilla.org/MPL/

 *

 * Software distributed under the License is distributed on an "AS IS"

 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See

 * the License for the specific language governing rights and

 * limitations under the License.

 *

 * Alternatively, the contents of this file may be used under the

 * terms of the GNU General Public License version 2 (the "GPL"), in

 * which case the provisions of the GPL are applicable instead of the

 * above.  If you wish to allow the use of your version of this file

 * only under the terms of the GPL and not to allow others to use your

 * version of this file under the MPL, indicate your decision by

 * deleting the provisions above and replace them with the notice and

 * other provisions required by the GPL.  If you do not delete the

 * provisions above, a recipient may use your version of this file

 * under either the MPL or the GPL.

 These are maximum timeouts. Most often, card wil react much faster */

 In iterations of ~1us */

 in iterations of ~10us */

 in iterations of ~10us */

 in iterations of ~10us */

/*

 * AUX port access.  To unlock the AUX port write the access keys to the

 * PARAM0-2 registers, then write HERMES_AUX_ENABLE to the HERMES_CONTROL

 * register.  Then read it and make sure it's HERMES_AUX_ENABLED.

 Enable auxiliary port access */

 Disable to auxiliary port access */

 Auxiliary port is open */

 Auxiliary port is closed */

 HERMES_CMD_DOWNLD */

/*

 * Debugging helpers

 ! HERMES_DEBUG */

 ! HERMES_DEBUG */

/*

 * Internal functions

/* Issue a command to the chip. Waiting for it to complete is the caller's

   problem.



   Returns -EBUSY if the command register is busy, 0 on success.



   Callable from any context.

 First wait for the command register to unbusy */

/*

 * Function definitions

 For doing cmds that wipe the magic constant in SWSUPPORT0 */

 We don't want to be interrupted while resetting the chipset */

	/* Normally it's a "can't happen" for the command register to

	   be busy when we go to issue a command because we are

	   serializing all commands.  However we want to have some

	   chance of resetting the card even if it gets into a stupid

	   state, so we actually wait to see if the command register

		if (reg == 0xffff) /* Special case - the card has probably been

	/* No need to explicitly handle the timeout - if we've timed

	/* According to the documentation, EVSTAT may contain

	   obsolete event occurrence information.  We have to acknowledge

	/* We don't use hermes_docmd_wait here, because the reset wipes

/* Issue a command to the chip, and (busy!) wait for it to

 * complete.

 *

 * Returns:

 *     < 0 on internal error

 *       0 on success

 *     > 0 on error returned by the firmware

 *

/* Set up a BAP to read a particular chunk of data from card's internal buffer.

 *

 * Returns:

 *     < 0 on internal failure (errno)

 *       0 on success

 *     > 0 on error

 * from firmware

 *

 Paranoia.. */

 Now we actually set up the transfer */

 Wait for the BAP to be ready */

 error or wrong offset */

/* Read a block of data from the chip's buffer, via the

 * BAP. Synchronization/serialization is the caller's problem.  len

 * must be even.

 *

 * Returns:

 *     < 0 on internal failure (errno)

 *       0 on success

 *     > 0 on error from firmware

 Actually do the transfer */

/* Write a block of data to the chip's buffer, via the

 * BAP. Synchronization/serialization is the caller's problem.

 *

 * Returns:

 *     < 0 on internal failure (errno)

 *       0 on success

 *     > 0 on error from firmware

 Actually do the transfer */

/* Read a Length-Type-Value record from the card.

 *

 * If length is NULL, we ignore the length read from the card, and

 * read the entire buffer regardless. This is useful because some of

 * the configuration records appear to have incorrect lengths in

 * practice.

 *

** Hermes AUX control ***/

 Already open? */

** Hermes programming ***/

/* About to start programming data (Hermes I)

 * offset is the entry point

 *

 * Spectrum_cs' Symbol fw does not require this

 * wl_lkm Agere fw does

 * Don't know about intersil

 Disable interrupts?*/

hw->inten = 0x0;*/

hermes_write_regn(hw, INTEN, 0);*/

hermes_set_irqmask(hw, 0);*/

 Acknowledge any outstanding command */

 Using init_cmd_wait rather than cmd_wait */

/* Done programming data (Hermes I)

 *

 * Spectrum_cs' Symbol fw does not require this

 * wl_lkm Agere fw does

 * Don't know about intersil

 Acknowledge any outstanding command */

 Reinitialise, ignoring return */

	/* wl lkm splits the programming into chunks of 2000 bytes.

	 * This restriction appears to come from USB. The PCMCIA

 Read PDA from the adapter */

 PDA of spectrum symbol is in eeprom */

 Issue command to read EEPROM */

		/* wl_lkm does not include PDA size in the PDA area.

		 * We will pad the information into pda, so other routines

 Includes CFG_PROD_DATA but not itself */

 CFG_PROD_DATA */

 Open auxiliary port */

 Read PDA */

 Close aux port */

 Check PDA length */

 Hermes operations for local buses */

/* airport.c

 *

 * A driver for "Hermes" chipset based Apple Airport wireless

 * card.

 *

 * Copyright notice & release notes in file main.c

 *

 * Note specific to airport stub:

 *

 *  0.05 : first version of the new split driver

 *  0.06 : fix possible hang on powerup, add sleep support

 one page */

	/* It would be nice to power cycle the Airport for a real hard

	 * reset, but for some reason although it appears to

	 * re-initialize properly, it falls in a screaming heap

	/* Vitally important.  If we don't do this it seems we get an

	 * interrupt somewhere during the power cycle, since

	 * hw_unavailable is already set it doesn't get ACKed, we get

	 * into an interrupt loop and the PMU decides to turn us

 Allocate space for private device-specific data */

 Setup interrupts & base address */

 Physical address */

 Power up card */

 Reset it before we get the interrupt */

 Initialise the main driver */

 Register an interface with the stack */

 airport_attach */

/* main.c - (formerly known as dldwd_cs.c, orinoco_cs.c and orinoco.c)

 *

 * A driver for Hermes or Prism 2 chipset based PCMCIA wireless

 * adaptors, with Lucent/Agere, Intersil or Symbol firmware.

 *

 * Current maintainers (as of 29 September 2003) are:

 *	Pavel Roskin <proski AT gnu.org>

 * and	David Gibson <hermes AT gibson.dropbear.id.au>

 *

 * (C) Copyright David Gibson, IBM Corporation 2001-2003.

 * Copyright (C) 2000 David Gibson, Linuxcare Australia.

 *	With some help from :

 * Copyright (C) 2001 Jean Tourrilhes, HP Labs

 * Copyright (C) 2001 Benjamin Herrenschmidt

 *

 * Based on dummy_cs.c 1.27 2000/06/12 21:27:25

 *

 * Portions based on wvlan_cs.c 1.0.6, Copyright Andreas Neuhaus <andy

 * AT fasta.fh-dortmund.de>

 *      http://www.stud.fh-dortmund.de/~andy/wvlan/

 *

 * The contents of this file are subject to the Mozilla Public License

 * Version 1.1 (the "License"); you may not use this file except in

 * compliance with the License. You may obtain a copy of the License

 * at http://www.mozilla.org/MPL/

 *

 * Software distributed under the License is distributed on an "AS IS"

 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See

 * the License for the specific language governing rights and

 * limitations under the License.

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds AT users.sourceforge.net>.  Portions created by David

 * A. Hinds are Copyright (C) 1999 David A. Hinds.  All Rights

 * Reserved.

 *

 * Alternatively, the contents of this file may be used under the

 * terms of the GNU General Public License version 2 (the "GPL"), in

 * which case the provisions of the GPL are applicable instead of the

 * above.  If you wish to allow the use of your version of this file

 * only under the terms of the GPL and not to allow others to use your

 * version of this file under the MPL, indicate your decision by

 * deleting the provisions above and replace them with the notice and

 * other provisions required by the GPL.  If you do not delete the

 * provisions above, a recipient may use your version of this file

/*

 * TODO

 *	o Handle de-encapsulation within network layer, provide 802.11

 *	  headers (patch from Thomas 'Dent' Mirlacher)

 *	o Fix possible races in SPY handling.

 *	o Disconnect wireless extensions from fundamental configuration.

 *	o (maybe) Software WEP support (patch from Stano Meduna).

 *	o (maybe) Use multiple Tx buffers - driver handling queue

 *	  rather than firmware.

/* Locking and synchronization:

 *

 * The basic principle is that everything is serialized through a

 * single spinlock, priv->lock.  The lock is used in user, bh and irq

 * context, so when taken outside hardirq context it should always be

 * taken with interrupts disabled.  The lock protects both the

 * hardware and the struct orinoco_private.

 *

 * Another flag, priv->hw_unavailable indicates that the hardware is

 * unavailable for an extended period of time (e.g. suspended, or in

 * the middle of a hard reset).  This flag is protected by the

 * spinlock.  All code which touches the hardware should check the

 * flag after taking the lock, and if it is set, give up on whatever

 * they are doing and drop the lock again.  The orinoco_lock()

 * function handles this (it unlocks and returns -EBUSY if

 * hw_unavailable is non-zero).

*******************************************************************/

 Module information                                               */

*******************************************************************/

 Level of debugging. Used in the macros in orinoco.h */

 = 0 */

 = 0 */

 = 0 */

*******************************************************************/

 Internal constants                                               */

*******************************************************************/

 802.2 LLC/SNAP header used for Ethernet encapsulation over 802.11 */

#define MAX_IRQLOOPS_PER_JIFFY	(20000 / HZ)	/* Based on a guestimate of

						 * how many events the

						 * device could

/*#define MAX_MULTICAST(priv)	(priv->firmware_type == FIRMWARE_TYPE_AGERE ? \

*******************************************************************/

 Data types                                                       */

*******************************************************************/

 Beginning of the Tx descriptor, used in TxExc handling */

 Rx frame header except compatibility 802.3 header */

 Control */

 802.11 header */

 Data length */

*******************************************************************/

 Function prototypes                                              */

*******************************************************************/

*******************************************************************/

 Internal helper functions                                        */

*******************************************************************/

*******************************************************************/

 Device methods                                                   */

*******************************************************************/

	/* We mustn't use orinoco_lock() here, because we need to be

	   able to close the interface even if hw_unavailable is set

 MTU + encapsulation + header length */

*******************************************************************/

 Tx path                                                          */

*******************************************************************/

/* Add encapsulation and MIC to the existing SKB.

 * The main xmit routine will then send the whole lot to the card.

 * Need 8 bytes headroom

 * Need 8 bytes tailroom

 *

 *                          With encapsulated ethernet II frame

 *                          --------

 *                          803.3 header (14 bytes)

 *                           dst[6]

 * --------                  src[6]

 * 803.3 header (14 bytes)   len[2]

 *  dst[6]                  803.2 header (8 bytes)

 *  src[6]                   encaps[6]

 *  len[2] <- leave alone -> len[2]

 * --------                 -------- <-- 0

 * Payload                  Payload

 * ...                      ...

 *

 * --------                 --------

 *                          MIC (8 bytes)

 *                          --------

 *

 * returns 0 on success, -ENOMEM on error.

 Encapsulate Ethernet-II frames */

 Ethernet-II frame */

 802.3 header */

 802.2 header */

 Fill in new header */

 Make room for the new header, and copy it in */

 Calculate Michael MIC */

		/* Have to write to an even address, so copy the spare

 priority */,

		/* Oops, the firmware hasn't established a connection,

		   silently drop the packet (this seems to be the

 Check packet length */

		/* WPA enabled firmwares have tx_cntl at the end of

		 * the 802.11 header.  So write zeroed descriptor and

		 * 802.11 header at the same time

		/* Clear the 802.11 header and data length fields - some

		 * firmwares (e.g. Lucent/Agere 8.xx) appear to get confused

 Finally, we actually initiate the send */

 Nothing's really happened */

 Read part of the frame header - we need status and addr1 */

	/* We produce a TXDROP event only for retry or lifetime

	 * exceeded, because that's the only status that really mean

	 * that this particular node went away.

		/* Copy 802.11 dest address.

		 * We use the 802.11 header because the frame may

		 * not be 802.3 or may be mangled...

		 * In Ad-Hoc mode, it will be the node address.

		 * In managed mode, it will be most likely the AP addr

		 * User space will figure out how to convert it to

		 * whatever it needs (IP address or else).

 Send event to user space */

*******************************************************************/

 Rx path (data frames)                                            */

*******************************************************************/

/* Does the frame have a SNAP header indicating it should be

	/* We de-encapsulate all packets which, a) have SNAP headers

	 * (i.e. SSAP=DSAP=0xaa and CTRL=0x3 in the 802.2 LLC header

	 * and where b) the OUI of the SNAP header is 00:00:00 or

	 * 00:00:f8 - we need both because different APs appear to use

 Update spy records */

	/* Using spy support with lots of Rx packets, like in an

	 * infrastructure (AP), will really slow down everything, because

	 * the MAC address must be compared to each entry of the spy list.

	 * If the user really asks for it (set some address in the

	 * spy list), we do it, but he will pay the price.

	 * Note that to get here, you need both WIRELESS_SPY

	 * compiled in AND some addresses in the list !!!

	/* Note : gcc will optimise the whole section away if

/*

 * orinoco_rx_monitor - handle received monitor frames.

 *

 * Arguments:

 *	dev		network device

 *	rxfid		received FID

 *	desc		rx descriptor of the frame

 *

 * Call context: interrupt

 return full header by default */

 Determine the size of the header and the data */

 Unknown frame type */

 sanity check the length */

 Copy the 802.11 header to the skb */

 If any, copy the data from the card to the skb */

 Handle frames in monitor mode */

 Sanity checks */

 No for even an 802.2 LLC header */

		/* At least on Symbol firmware with PCF we get quite a

		   lot of these legitimately - Poll frames with no

	/* Payload size does not include Michael MIC. Increase payload

	/* We need space for the packet data itself, plus an ethernet

	   header, plus 2 bytes so we can align the IP header on a

	   32bit boundary, plus 1 byte so we can read in odd length

	   packets from the card, which has an IO granularity of 16

	/* We'll prepend the header, so reserve space for it.  The worst

	   case is no decapsulation, when 802.3 header is prepended and

 Add desc and skb to rx queue */

 Calculate and check MIC */

 Extract Michael MIC from payload */

 priority or QoS? */

 TODO: update stats */

 Notify userspace */

	/* Handle decapsulation

	 * In most cases, the firmware tell us about SNAP frames.

	 * For some reason, the SNAP frames sent by LinkSys APs

	 * are not properly recognised by most firmwares.

		/* These indicate a SNAP within 802.2 LLC within

		   802.11 frame which we'll need to de-encapsulate to

 802.3 frame - prepend 802.3 header as is */

 Process the wireless stats if needed */

 Pass the packet to the networking stack */

	/* orinoco_rx requires the driver lock, and we also need to

	 * protect priv->rx_list, so just hold the lock over the

	 * lot.

	 *

	 * If orinoco_lock fails, we've unplugged the card. In this

 extract desc and skb from queue */

*******************************************************************/

 Rx path (info frames)                                            */

*******************************************************************/

 Search scan results for requested BSSID, join it if found */

 Allocate buffer for scan results */

 Sanity checks in case user changed something in the meantime */

 Read scan results from the firmware */

	/* Go through the scan results looking for the channel of the AP

 both are little-endian */

 Send new BSSID to userspace */

 Send event to user space */

 Send event to user space */

 TODO: verify max size or IW_GENERIC_IE_MAX */

 Send event to user space */

 Abort */

 Either abort or complete the scan */

	/* This is an answer to an INQUIRE command that we did earlier,

	 * or an information "event" generated by the card

	 * The controller return to us a pseudo frame containing

 Read the info frame header - don't try too hard */

 Increment our various counters */

 wstats->discard.nwid - no wrong BSSID stuff */

 wstats->miss.beacon - no match */

		/* Symbol firmware uses "out of range" to signal that

			/* The info frame contains only one word which is the

			 * status (see hermes.h). The status is pretty boring

			 * in itself, that's why we export the new BSSID...

		/* Result of a scanning. Contains information about

 Sanity check */

 Allocate buffer for results */

 No memory, so can't printk()... */

 Read scan data */

 ORINOCO_DEBUG */

 An empty result indicates that the scan is complete */

 Sanity check */

			/* Drop this result now so we don't have to

 Read scan data */

 Security status (Agere specific) */

 Ignore this frame for now */

 We don't actually do anything about it */

*******************************************************************/

 Internal hardware control routines                               */

*******************************************************************/

 just to make sure */

 Fire things up again */

				/* Some firmwares (e.g. Intersil 1.3.x) seem

				 * to have problems disabling the port, oh

 firmware will have to reassociate */

	/* The Hermes doesn't seem to have an allmulti mode, so we go

/* This must be called from user context, without locks held - use

		/* When the hardware becomes available again, whatever

		 * detects that is responsible for re-initializing

	/* Shut off interrupts.  Depending on what state the hardware

 firmware will have to reassociate */

 Scanning support: Notify scan cancellation */

 This has to be called from user context */

	/* priv->open or priv->hw_unavailable might have changed while

	/* If we've called commit, we are reconfiguring or bringing the

	 * interface up. Maintaining countermeasures across this would

	 * be confusing, so note that we've disabled them. The port will

 FIXME: what about netif_tx_lock */

/* Ensures configuration changes are applied. May result in a reset.

 * The caller should hold priv->lock

*******************************************************************/

 Interrupt handler                                                */

*******************************************************************/

	/* This seems to happen a fair bit under load, but ignoring it

	/* These are used to detect a runaway interrupt situation.

	 *

	 * If we get more than MAX_IRQLOOPS_PER_JIFFY iterations in a jiffy,

	 * we panic and shut down the hardware

 jiffies value the last time we were called */

 = 0 */

 = 0 */

		/* If hw is unavailable - we don't know if the irq was

 Disable interrupts for now */

 Check the card hasn't been removed */

*******************************************************************/

 Power management                                                 */

*******************************************************************/

	/* All we need to do is cache the firmware before suspend, and

	 * release it when we come out.

	 *

		/* Restore from hibernation failed. We need to clean

 !PM_SLEEP || HERMES_CACHE_FW_ON_INIT */

*******************************************************************/

 Initialization                                                   */

*******************************************************************/

	/* No need to lock, the hw_unavailable flag is already set in

 Initialize the firmware */

 Check firmware version again */

 Set up the default configuration */

 By default use IEEE/IBSS ad-hoc mode if we have it */

 use firmware default */

	/* Make the hardware available, as long as it hasn't been

/* Allocate private data.

 *

 * This driver has a number of structures associated with it

 *  netdev - Net device structure for each network interface

 *  wiphy - structure associated with wireless phy

 *  wireless_dev (wdev) - structure for each wireless interface

 *  hw - structure for hermes chip info

 *  card - card specific structure for use by the card driver

 *         (airport, orinoco_cs)

 *  priv - orinoco private data

 *  device - generic linux device structure

 *

 *  +---------+    +---------+

 *  |  wiphy  |    | netdev  |

 *  | +-------+    | +-------+

 *  | | priv  |    | | wdev  |

 *  | | +-----+    +-+-------+

 *  | | | hw  |

 *  | +-+-----+

 *  | | card  |

 *  +-+-------+

 *

 * priv has a link to netdev and device

 * wdev has a link to wiphy

	/* allocate wiphy

	 * NOTE: We only support a single virtual interface

	 *       but this may change when monitor mode is added

 Set up default callbacks */

	priv->hw_unavailable = 1; /* orinoco_init() must clear this

				   * before anything else touches the

 Register PM notifiers */

/* We can only support a single interface. We provide a separate

 * function to set it up to distinguish between hardware

 * initialisation and interface setup.

 *

 * The base_addr and irq parameters are passed on to netdev for use

 * with SIOCGIFMAP.

 Initialise wireless_dev */

 Setup / override net_device fields */

 1 second timeout */

 Default to standard ops if not set */

 we use the default eth_mac_addr for setting the MAC addr */

 Reserve space in skb for the SNAP header */

 Report what we've done */

	/* If the tasklet is scheduled when we call tasklet_kill it

	 * will run one final time. However the tasklet will only

 Explicitly drain priv->rx_list */

 Explicitly drain priv->scan_list */

*******************************************************************/

 Module initialization                                            */

*******************************************************************/

/* Can't be declared "const" or the whole __initdata section will

 SPDX-License-Identifier: GPL-2.0-only

/* Host AP driver's support for Intersil Prism2.5 PCI cards is based on

 * driver patches from Reyk Floeter <reyk@vantronix.net> and

 struct local_info::hw_priv */

 FIX: do we need mb/wmb/rmb with memory operations? */

 Intersil Prism3 ISL3872 11Mb/s WLAN Controller */

 Intersil Prism2.5 ISL3874 11Mb/s WLAN Controller */

 Samsung MagicLAN SWL-2210P */

 PRISM2_IO_DEBUG */

 PRISM2_IO_DEBUG */

 FIX: This might change at some point.. */

	/* linux-wlan-ng uses extremely long hold and settle times for

	 * COR sreset. A comment in the driver code mentions that the long

	 * delays appear to be necessary. However, at least IBM 22P6901 seems

	 * to work fine with shorter delays.

	 *

 #define PRISM2_PCI_USE_LONG_DELAYS */

 Wait for f/w to complete initialization (CMD:BUSY == 0) */

 PRISM2_PCI_USE_LONG_DELAYS */

 PRISM2_PCI_USE_LONG_DELAYS */

 = 0 */;

 Reset the hardware, and ensure interrupts are disabled. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intersil Prism2 driver with Host AP (software access point) support

 * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen

 * <j@w1.fi>

 * Copyright (c) 2002-2005, Jouni Malinen <j@w1.fi>

 *

 * This file is to be included into hostap.c when S/W AP functionality is

 * compiled.

 *

 * AP:  FIX:

 * - if unicast Class 2 (assoc,reassoc,disassoc) frame received from

 *   unauthenticated STA, send deauth. frame (8802.11: 5.5)

 * - if unicast Class 3 (data with to/from DS,deauth,pspoll) frame received

 *   from authenticated, but unassoc STA, send disassoc frame (8802.11: 5.5)

 * - if unicast Class 3 received from unauthenticated STA, send deauth. frame

 *   (8802.11: 5.5)

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 station activity detected; reset timeout state */

 STA ACKed data nullfunc frame poll */

		/* send data frame to poll STA and check whether this frame

		/* FIX: IEEE80211_STYPE_NULLFUNC would be more appropriate, but

		 * it is apparently not retried so TX Exc events are not

	/* deauth message sent; try to resend it few times; the message is

	 * broadcast, so it may be delayed until next DTIM; there is not much

	 * else we can do at this point since the driver is going to be shut

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 Called only as a tasklet (software IRQ) */

	/* Pass the TX callback frame to the hostapd; use 802.11 header version

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

/* Called only as a tasklet (software IRQ); TX callback for poll frames used

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 Initialize task queue structure for AP management */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 PRISM2_NO_PROCFS_DEBUG */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 PRISM2_NO_PROCFS_DEBUG */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 caller should have mutex for AP STA list handling */

 Called from timer handler and from scheduled AP queue handlers */

 always use master radio device */

	/* FIX: ctrl::ack sending used special HFA384X_TX_CTRL_802_11

 DA / RA */

 BSSID */

 SA */

 control:ACK does not have addr2 or addr3 */

 SA */

 BSSID */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

	/* FIX: possible race condition.. the STA data could have just expired,

	 * but proc entry was still here so that the read could have started;

 supported_rates: 500 kbit/s units with msb ignored */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 initialize STA info data */

		/* schedule a non-interrupt context process to add a procfs

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

/* Generate challenge data for shared key authentication. IEEE 802.11 specifies

 * that WEP algorithm is used for generating challenge. This should be unique,

 * but otherwise there is not really need for randomness etc. Initialize WEP

 * with pseudo random key and then use increasing IV to get unique challenge

 * streams.

 *

 * Called only as a scheduled task for pending AP frames.

 Called only as a scheduled task for pending AP frames. */

 FIX: might try to remove some old STAs first? */

		/* IEEE 802.11 standard is not completely clear about

		 * whether STA is considered authenticated after

		 * authentication OK frame has been send or after it

		 * has been ACKed. In order to reduce interoperability

			/* IEEE 802.11 standard is not completely clear about

			 * whether STA is considered authenticated after

			 * authentication OK frame has been send or after it

			 * has been ACKed. In order to reduce interoperability

 status_code */

 Called only as a scheduled task for pending AP frames. */

 do not decrement sta->users */

 get a unique AID */

		/* FIX: CF-Pollable and CF-PollReq should be set to match the

 FIX: how about privacy and WEP? */

 capability */

 status_code */

 AID */

 Supported rates (Information element) */

 len */

			/* STA will be marked associated from TX callback, if

 Called only as a scheduled task for pending AP frames. */

 Called only as a scheduled task for pending AP frames. */

 Called only as a scheduled task for pending AP frames. */

	/* some STA f/w's seem to require control::ACK frame for

	 * data::nullfunc, but at least Prism2 station f/w version 0.8.0 does

	 * not send this..

 Called only as a scheduled task for pending AP frames. */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 Called only as a scheduled task for pending AP frames. */

		/* Station has moved to non-PS mode, so send all buffered

	/* add a flag for hostap_handle_sta_tx() to know that this skb should

 indicate to STA that more frames follow */

 Called only as a scheduled task for pending AP frames. */

	/* FIX: todo:

	 * - add timeout for buffering (clear aid in TIM vector if buffer timed

	 *   out (expiry time must be longer than ListenInterval for

	 *   the corresponding STA; "8802-11: 11.2.1.9 AP aging function"

	 * - what to do, if buffered, pspolled, and sent frame is not ACKed by

	 *   sta; store buffer for later use and leave TIM aid bit set? use

	 *   TX event to check whether frame was ACKed?

 send buffered frame .. */

 send only one buffered packet per PS Poll */

			/* FIX: should ignore further PS Polls until the

			 * buffered packet that was just sent is acknowledged

 try to clear aid from TIM */

 Called only as a scheduled task for pending AP frames. */

 Timestamp (8 octets) */

 Beacon interval (2 octets) */

 Capability information (2 octets) */

 not our SSID */

 add new AP */

		/* mark APs authentication and associated for pseudo ad-hoc

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 Called only as a tasklet. */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

	/* FIX: should give skb->len to handler functions and check that the

				/* no ToDS nullfunc seems to be used to check

				 * AP association; so send reject message to

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

 Generate a fake pspoll frame to start packet delivery */

/* Translate our list of Access Points & Stations to a card independent

 First entry *MUST* be the AP MAC address */

		/* Use the mode to indicate if it's a station or

 Some quality */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 To be continued, we should make good use of IWEVCUSTOM */

/* Update station info for host-based TX rate control and return current

 use next higher rate */

/* Called only from software IRQ. Called for each TX frame prior possible

 broadcast/multicast frame - no AP related processing */

 unicast packet - check whether destination STA is associated */

		/* This can happen, e.g., when wlan0 is added to a bridge and

		 * bridging code does not know which port is the correct target

		 * for a unicast frame. In this case, the packet is send to all

		 * ports of the bridge. Since this is a valid scenario, do not

 Set tx_rate if using host-based TX rate control */

 indicate to STA that more frames follow */

		/* packet was already buffered and now send due to

		/* Make sure that TIM is set for the station (it might not be

		/* FIX: should fix hw reset to restore bits based on STA

 STA in PS mode, buffer frame for later delivery */

	/* FIX: could save RX time to skb and expire buffered frames after

			tx->sta_ptr = sta; /* hostap_handle_sta_release() will

					    * be called to release sta info

 Called only as a tasklet (software IRQ) */

 use next lower rate */

/* Called only as a tasklet (software IRQ). Called for each RX frame to update

/* Called only as a tasklet (software IRQ). Called for each RX frame after

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

			/* FromDS frame - not for us; probably

			/* At least Lucent f/w seems to send data::nullfunc

			 * frames with no ToDS flag when the current AP returns

			 * after being unavailable for some time. Speed up

			 * re-association by informing the station about it not

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

		/* At least Lucent cards seem to send periodic nullfunc

		 * frames with ToDS. Let these through to update SQ

		 * stats and PS state. Nullfunc frames do not contain

		/* If BSSID (Addr3) is foreign, this frame is a normal

		 * broadcast frame from an IBSS network. Drop it silently.

			/* some STA f/w's seem to require control::ACK frame

			 * for data::nullfunc, but Prism2 f/w 0.8.0 (at least

			 * from Compaq) does not send this.. Try to generate

			 * ACK for these frames from the host driver to make

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 Called only as a tasklet (software IRQ) */

		/* hostap_handle_sta_release() will be called to release STA

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

		/* No way of knowing which rates are supported since we did not

		 * get supported rates element from beacon/assoc req. Assume

 Called only as a tasklet (software IRQ) */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 SPDX-License-Identifier: GPL-2.0

 /proc routines for Host AP driver */

 FIX: this may grow too long for one page(?) */

 PRISM2_IO_DEBUG */

 We have a header (pos 0) + N results to show (pos 1...N) */

 0 would be EOF */

 0 would be EOF */

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_PROCFS_DEBUG */

 PRISM2_IO_DEBUG */

 PRISM2_NO_STATION_MODES */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Host AP (software wireless LAN access point) driver for

 * Intersil Prism2/2.5/3.

 *

 * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen

 * <j@w1.fi>

 * Copyright (c) 2002-2005, Jouni Malinen <j@w1.fi>

 *

 * FIX:

 * - there is currently no way of associating TX packets to correct wds device

 *   when TX Exc/OK event occurs, so all tx_packets and some

 *   tx_errors/tx_dropped are added to the main netdevice; using sw_support

 *   field in txdesc might be used to fix this (using Alloc event to increment

 *   tx_packets would need some further info in txfid table)

 *

 * Buffer Access Path (BAP) usage:

 *   Prism2 cards have two separate BAPs for accessing the card memory. These

 *   should allow concurrent access to two different frames and the driver

 *   previously used BAP0 for sending data and BAP1 for receiving data.

 *   However, there seems to be number of issues with concurrent access and at

 *   least one know hardware bug in using BAP0 and BAP1 concurrently with PCI

 *   Prism2.5. Therefore, the driver now only uses BAP0 for moving data between

 *   host and card memories. BAP0 accesses are protected with local->baplock

 *   (spin_lock_bh) to prevent concurrent use.

 #define final_version */

 check WTERR events (Wait Time-out) in development versions */

 Events that will be using BAP0 */

 event mask, i.e., events that will result in an interrupt */

/* Default TX control flags: use 802.11 headers and request interrupt for

 * failed transmits. Frames that request ACK callback, will add

 * _TX_OK flag and _ALT_RTRY flag may be used to select different retry policy.

 ca. 1 usec */

 ca. 10 usec */

/* Wait times for initialization; yield to other processes to avoid busy

 500 ms */

 50 ms */

 hostap_download.c */

 PRISM2_DOWNLOAD_SUPPORT */

/* magic value written to SWSUPPORT0 reg. for detecting whether card is still

/**

 * __hostap_cmd_queue_free - Free Prism2 command queue entry (private)

 * @local: pointer to private Host AP driver data

 * @entry: Prism2 command queue entry to be freed

 * @del_req: request the entry to be removed

 *

 * Internal helper function for freeing Prism2 command queue entries.

 * Caller must have acquired local->cmdlock before calling this function.

/**

 * hostap_cmd_queue_free - Free Prism2 command queue entry

 * @local: pointer to private Host AP driver data

 * @entry: Prism2 command queue entry to be freed

 * @del_req: request the entry to be removed

 *

 * Free a Prism2 command queue entry.

/**

 * prism2_clear_cmd_queue - Free all pending Prism2 command queue entries

 * @local: pointer to private Host AP driver data

		/* This should not happen; print debug message and clear

/**

 * hfa384x_cmd_issue - Issue a Prism2 command to the hardware

 * @dev: pointer to net_device

 * @entry: Prism2 command queue entry to be issued

	/* wait until busy bit is clear; this should always be clear since the

 write command */

/**

 * hfa384x_cmd - Issue a Prism2 command and wait (sleep) for completion

 * @dev: pointer to net_device

 * @cmd: Prism2 command code (HFA384X_CMD_CODE_*)

 * @param0: value for Param0 register

 * @param1: value for Param1 register (pointer; %NULL if not used)

 * @resp0: pointer for Resp0 data or %NULL if Resp0 is not needed

 *

 * Issue given command (possibly after waiting in command queue) and sleep

 * until the command is completed (or timed out or interrupted). This can be

 * called only from user process context.

	/* prepare to wait for command completion event, but do not sleep yet

 sleep until command is completed or timed out */

		/* the command was issued, so a CmdCompl event should occur

		 * soon; however, there's a pending signal and

		 * schedule_timeout() would be interrupted; wait a short period

		 * of time to avoid removing entry from the list before

	/* If entry->list is still in the list, it must be removed

	 * first and in this case prism2_cmd_ev() does not yet have

	 * local reference to it, and the data can be kfree()'d

	 * here. If the command completion event is still generated,

	 * it will be assigned to next (possibly) pending command, but

	 * the driver will reset the card anyway due to timeout

	 *

	 * If the entry is not in the list prism2_cmd_ev() has a local

	 * reference to it, but keeps cmdlock as long as the data is

	/* FIX: if the entry->list is in the list, it has not been completed

	 * yet, so removing it here is somewhat wrong.. this could cause

	 * references to freed memory and next list_del() causing NULL pointer

	 * dereference.. it would probably be better to leave the entry in the

			/* Command completion event is pending, but the

			 * interrupt was not delivered - probably an issue

 final_version */

/**

 * hfa384x_cmd_callback - Issue a Prism2 command; callback when completed

 * @dev: pointer to net_device

 * @cmd: Prism2 command code (HFA384X_CMD_CODE_*)

 * @param0: value for Param0 register

 * @callback: command completion callback function (%NULL = no callback)

 * @context: context data to be given to the callback function

 *

 * Issue given command (possibly after waiting in command queue) and use

 * callback function to indicate command completion. This can be called both

 * from user and interrupt context. The callback function will be called in

 * hardware IRQ context. It can be %NULL, when no function is called when

 * command is completed.

/**

 * __hfa384x_cmd_no_wait - Issue a Prism2 command (private)

 * @dev: pointer to net_device

 * @cmd: Prism2 command code (HFA384X_CMD_CODE_*)

 * @param0: value for Param0 register

 * @io_debug_num: I/O debug error number

 *

 * Shared helper function for hfa384x_cmd_wait() and hfa384x_cmd_no_wait().

	/* wait until busy bit is clear; this should always be clear since the

 write command */

/**

 * hfa384x_cmd_wait - Issue a Prism2 command and busy wait for completion

 * @dev: pointer to net_device

 * @cmd: Prism2 command code (HFA384X_CMD_CODE_*)

 * @param0: value for Param0 register

 wait for command completion */

/**

 * hfa384x_cmd_no_wait - Issue a Prism2 command; do not wait for completion

 * @dev: pointer to net_device

 * @cmd: Prism2 command code (HFA384X_CMD_CODE_*)

 * @param0: value for Param0 register

/**

 * prism2_cmd_ev - Prism2 command completion event handler

 * @dev: pointer to net_device

 *

 * Interrupt handler for command completion events. Called by the main

 * interrupt handler in hardware IRQ context. Read Resp0 and status registers

 * from the hardware and ACK the event. Depending on the issued command type

 * either wake up the sleeping process that is waiting for command completion

 * or call the callback function. Issue the next command, if one is pending.

 TODO: rest of the CmdEv handling could be moved to tasklet */

 issue next command, if pending */

			/* hfa384x_cmd() has already started issuing this

		/* issue next command; if command issuing fails, remove the

 Offset must be even */

		return -ENOTTY; /* Well.. not really correct, but return

 RID not available */

		return -ENOTTY; /* Well.. not really correct, but return

 RID len in words and +1 for rec.rid */

 disable interrupts and clear event status */

 ack pending events and enable interrupts from selected events */

	/* FIX: this could be replace with hfa384x_cmd() if the Alloc event

	 * below would be handled like CmdCompl event (sleep here, wake up from

	/* It looks like at least some STA firmware versions reset

	 * fragmentation threshold back to 2346 after enable command. Restore

 Some firmwares lose antenna selection settings on reset */

 PRI f/w not yet available - cannot read RIDs */

	/* Setting SSID to empty string seems to kill the card in Host AP mode

 this may fail with Symbol/Lucent firmware */

 this may fail with Symbol/Lucent firmware */

	/* Setup TXRateControl, defaults to allow use of 1, 2, 5.5, and

	 * 11 Mbps in automatic TX rate fallback and 1 and 2 Mbps as basic

	/* 32-bit tallies were added in STA f/w 0.8.0, but they were apparently

	 * not working correctly (last seven counters report bogus values).

	 * This has been fixed in 0.8.2, so enable 32-bit tallies only

	 * beginning with that firmware version. Another bug fix for 32-bit

	 * tallies in 1.4.0; should 16-bit tallies be used for some other

 initialize HFA 384x */

		/* EvStat has Cmd bit set in some cases, so retry once if no

 PRISM2_DOWNLOAD_SUPPORT */

 PRISM2_DOWNLOAD_SUPPORT */

 get card version information */

	/* FIX: could convert allocate_fid to use sleeping CmdCompl wait and

	 * enable interrupts before this. This would also require some sort of

 allocate TX FIDs */

 MAC is now configured, but port 0 is not yet enabled */

	/* at least D-Link DWL-650 seems to require additional port reset

	 * before it starts acting as an AP, so reset port automatically

		/* If hw_reset() was called during pending transmit, netif

		 * queue was stopped. Wake it up now since the wlan card has

	/* Enable firmware if secondary image is loaded and at least one of the

 Allow only command completion events during disable */

	/* do not reset card more than once per second to avoid ending up in a

		/* Host system seems to hang in some cases with high traffic

		 * load or shared interrupts during COR sreset. Disable shared

		 * interrupts during reset to avoid these crashes. COS sreset

		 * takes quite a long time, so it is unfortunate that this

		 * seems to be needed. Anyway, I do not know of any better way

 PRISM2_DOWNLOAD_SUPPORT */

 TODO: restore beacon TIM bits for STAs that have buffered frames */

/* Called only as scheduled task after noticing card timeout in interrupt

 Called only from hardware IRQ */

		/* ready for next TX, so wake up queue that was stopped in

	/* With reclaim, Resp0 contains new txfid for transmit; the old txfid

 check if all TX buffers are occupied */

 no empty TX buffers, stop queue */

/* Called only from software IRQ if PCI bus master is not used (with bus master

	/* The driver tries to stop netif queue so that there would not be

	 * more than one attempt to transmit frames going on; check that this

 stop the queue for the time that transmit is pending */

 transmit packet */

	/* Since we did not wait for command completion, the card continues

	 * to process on the background and we will finish handling when

/* Send IEEE 802.11 frame (convert the header into Prism2 TX descriptor and

 Called only from software IRQ */

 skb->data starts with txdesc->frame_control */

 Addr4 */

/* Some SMP systems have reported number of odd errors with hostap_pci. fid

 * register has changed values between consecutive reads for an unknown reason.

 * This should really not happen, so more debugging is needed. This test

 * version is a bit slower, but it will detect most of such register changes

 EXTRA_FID_READ_TESTS */

 EXTRA_FID_READ_TESTS */

 Called only as a tasklet (software IRQ) */

 try to continue with the new rxfid value */

	/* Drop frames with too large reported payload length. Monitor mode

	 * seems to sometimes pass frames (e.g., ctrl::ack) with signed and

	 * negative value, so allow also values 65522 .. 65534 (-14 .. -2) for

 WEP */) {

 Called only as a tasklet (software IRQ) */

 Allow monitor mode to receive shorter frames */

 Convert Prism2 RX structure into IEEE 802.11 header */

 Called only as a tasklet (software IRQ) */

 Called only from hardware IRQ */

	/* FIX: should probably schedule reset; reference to one txfid was lost

	 * completely.. Bad things will happen if we run out of txfids

	 * Actually, this will cause netdev watchdog to notice TX timeout and

 Called only as a tasklet (software IRQ) */

 Make sure that frame was from us. */

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

			/* Convert Prism2 RX structure into IEEE 802.11 header

 Called only as a tasklet (software IRQ) */

	/* We produce a TXDROP event only for retry or lifetime

	 * exceeded, because that's the only status that really mean

	 * that this particular node went away.

 Copy 802.11 dest address. */

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

		/* data register seems to give 0x8000 in some error cases even

		 * though busy bit is not set in offset register;

 Called only as a tasklet (software IRQ) */

	/* Process all pending BAP events without generating new interrupts

 Enable interrupts for new BAP events */

 Called only from hardware IRQ */

	/* some firmware versions seem to get stuck with

	 * full CommTallies in high traffic load cases; every

	 * packet will then cause INFDROP event and CommTallies

	 * info frame will not be sent automatically. Try to

 Called only from hardware IRQ */

 Called only from hardware IRQ */

	/* at least PCI Prism2.5 with bus mastering seems to sometimes

	 * return 0x0000 in SWSUPPORT0 for unknown reason, but re-reading the

	 * register once or twice seems to get the correct value.. PCI cards

	 * cannot anyway be removed during normal operation, so there is not

 final_version */

 !PRISM2_PCI */

 Called only from hardware IRQ */

 Detect early interrupt before driver is fully configured */

		/* Above events are needed even before hw is ready, but other

		 * events should be skipped during initialization. This may

		 * change for AllocEv if allocate_fid is implemented without

		/* Reading data from the card is quite time consuming, so do it

		 * in tasklets. TX, TXEXC, RX, and INFO events will be ACKed

 final_version */

	/* Station firmware versions before 1.4.x seem to have a bug in

	 * firmware-based WEP encryption when using Host AP mode, so use

	 * host_encrypt as a default for them. Firmware version 1.4.9 is the

	 * first one that has been seen to produce correct encryption, but the

	 * bug might be fixed before that (although, at least 1.4.2 is broken).

	/* IEEE 802.11 standard compliant WDS frames (4 addresses) were broken

	 * in station firmware versions before 1.5.x. With these versions, the

	 * driver uses a workaround with bogus frame format (4th address after

	 * the payload). This is not compatible with other AP devices. Since

	 * the firmware bug is fixed in the latest station firmware versions,

	 * automatically enable standard compliant mode for cards using station

		/* Even though host system does not really know when the WLAN

		 * MAC is sending frames, try to avoid changing channels for

		 * passive scanning when a host-generated frame is being

/* Called only as a scheduled task when communications quality values should

/* Software watchdog - called as a timer. Hardware interrupt (Tick event) is

 * used to monitor that local->last_tick_timer is being updated. If not,

 * interrupt busy-loop is assumed and driver tries to recover by masking out

	/* Inquire CommTallies every 10 seconds to keep the statistics updated

	/* Do not read data registers, because they change the state of the

 SHOW_REG(DATA0); */

 SHOW_REG(DATA1); */

 SHOW_REG(AUXDATA); */

 PRISM2_PCI */

/*

 * HostAP uses two layers of net devices, where the inner

 * layer gets called all the time from the outer layer.

 * This is a natural nesting, which needs a split lock type.

 PRISM2_IO_DEBUG */

 PRISM2_DOWNLOAD_SUPPORT */

	local->func->need_tx_headroom = 0; /* no need to add txdesc in

					    * skb->data (FIX: maybe for DMA bus

	local->rssi_to_dBm = 100; /* default; to be overriden by

 Initialize task queue structures */

	/* Initialize tasklets for handling hardware IRQ related operations

 PRISM2_NO_PROCFS_DEBUG */

 Unregister all netdevs before freeing local data. */

 special handling for this interface below */

 PRISM2_NO_PROCFS_DEBUG */

 PRISM2_DOWNLOAD_SUPPORT */

	/* Send disconnect event, e.g., to trigger reassociation after resume

 Disable hardware and firmware */

 PRISM2_PCI || PRISM2_PCCARD */

/* These might at some point be compiled separately and used as separate

 PRISM2_DOWNLOAD_SUPPORT */

/* External hostap_callback.c file can be used to, e.g., blink activity led.

 * This can use platform specific code and must define prism2_callback()

 * function (if PRISM2_CALLBACK is not defined, these function calls are not

 PRISM2_CALLBACK */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Host AP (software wireless LAN access point) driver for

 * Intersil Prism2/2.5/3 - hostap.o module, common routines

 *

 * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen

 * <j@w1.fi>

 * Copyright (c) 2002-2005, Jouni Malinen <j@w1.fi>

 FIX: */

 LLC */ + 8 
	/* 'dev->needs_free_netdev = true' implies device data, including

 take pre-allocated entry into use */

 verify that there is room for wds# postfix in the interface name */

 val is in host byte order */

 little endian 16 bit word */

	/* 104-bit support seems to require that all the keys are set to the

 first 5 octets */

 first 13 octets */

	/* At least STA f/w v0.6.2 seems to have issues with cnfAuthentication

	 * set to include both Open and Shared Key flags. It tries to use

	 * Shared Key authentication in that case even if WEP keys are not

	 * configured.. STA f/w v0.7.6 is able to handle such configuration,

 addr2 */

 Addr4 */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

		/* Close master radio interface automatically if it was also

		 * opened automatically and we are now closing the last

		/* Master radio interface is needed for all operation, so open

/* TODO: to be further implemented as soon as Prism2 fully supports

	/* FIX: promiscuous mode seems to be causing a lot of problems with

	 * some station firmware versions (FCSErr frames, invalid MACPort, etc.

	 * corrupted incoming frames). This code is now commented out while the

 kernel callbacks */

		/* Currently, we point to the proper spy_data only on

 use main radio device queue */

 use main radio device queue */

 SPDX-License-Identifier: GPL-2.0-only

/* Host AP driver's support for PC Cards on PCI adapters using PLX9052 is

 * based on:

 * - Host AP driver patch from james@madingley.org

 * - linux-wlan-ng driver, Copyright (C) AbsoluteValue Systems, Inc.

 struct local_info::hw_priv */

 at least 2 x 256 is needed for CIS */

 PCI Configuration Registers */

 PCI Interrupt Pin */

 Local Configuration Registers */

 Interrupt Control/Status Register */

 PCI Interrupt Enable */

/* Array of known Prism2/2.5 PC Card manufactured ids. If your card's manfid

 * is not listed here, you will need to add it here to get the driver

 D-Link DWL-650 Rev. P1 */,

 Philips 802.11b WLAN PCMCIA */,

 3Com AirConnect PCI 777A */,

 Proxim RangeLAN */,

 Compaq WL100 */,

 Intersil Prism II Ref. Design (and others) */,

 Buffalo WLI-CF-S11G */,

 Linksys WPC11 Ver 2.5 */,

 Linksys WPC11 Ver 3 */,

 D-Link DRC-650 */,

 Samsung SWL2000-N */,

 EMTAC A2424i */,

 Z-Com XI300 */,

 Zcomax XI-325H 200mW */,

 PRISM2_IO_DEBUG */

 PRISM2_IO_DEBUG */

 FIX: This might change at some point.. */

 Set sreset bit of COR and clear it after hold time */

 TMD7160 - COR at card's first I/O addr */

 PLX9052 */

 TMD7160 - COR at card's first I/O addr */

 PLX9052 */

 read CIS; it is in even offsets in the beginning of attr_mem */

	/* set reasonable defaults for Prism2 cards just in case CIS parsing

 = 0 */;

 National Datacomm NCP130 based on TMD7160, not PLX9052. */

 TMD7160 */

 no access to PC Card attribute memory */

 PLX9052 */

 Write COR to enable PC Card */

 Enable PCI interrupts if they are not already enabled */

		/* should set PLX_PCIIPR to 0x01 (INTA#) if Serial EEPROM is

 Reset the hardware, and ensure interrupts are disabled. */

 SPDX-License-Identifier: GPL-2.0

 wait until busy bit is clear */

 PRISM2_PCI */

 PRISM2_PCI */

 PRISM2_PCI */

 PRISM2_PCI */

 PDA end found */

 others than HFA3841 */,

 HFA3841 */,

 apparently used in older cards */,

 Intel PRO/Wireless 2011B (PCI) */,

	/* Note: wlan card should be in initial state (just after init cmd)

	/* ProgMode disable causes the hardware to restart itself from the

	 * given starting address. Give hw some time and ACK command just in

 continue anyway.. restart should have taken care of this */

 Readback test */

 Try to enable genesis mode; 0x1F for x8 SRAM or 0x0F for x16 SRAM */

 Disable genesis mode */

 0x1F for x8 SRAM or 0x0F for x16 SRAM */

	/*

	 * Make sure the INIT command does not generate a command completion

	 * event by disabling interrupts.

/* Note! Non-volatile downloading functionality has not yet been tested

 * thoroughly and it may corrupt flash image and effectively kill the card that

 continue anyway.. restart should have taken care of this */

 PRISM2_NON_VOLATILE_DOWNLOAD */

 PRISM2_NON_VOLATILE_DOWNLOAD */

 PRISM2_NON_VOLATILE_DOWNLOAD */

 SPDX-License-Identifier: GPL-2.0

 Host AP driver Info Frame processing (part of hostap.o module) */

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

 PRISM2_NO_DEBUG */

 Called only as a tasklet (software IRQ) */

	/* Alloc new JoinRequests to occur since LinkStatus for the previous

 Get current BSSID later in scheduled task */

	/* ScanResults are sorted: first ESS results in decreasing signal

	 * quality then IBSS results in similar order.

	 * Trivial roaming policy: just select the first entry.

	 * This could probably be improved by adding hysteresis to limit

	 * number of handoffs, etc.

	 *

	 * Could do periodic RID_SCANREQUEST or Inquire F101 to get new

 Try to find preferred AP */

	/* Inform user space about new scan results (just empty event,

	/* Allow SIOCGIWSCAN handling to occur since we have received

 Called only as a tasklet (software IRQ) */

 Convert to hostscan result format. */

 Perform rest of ScanResults handling later in scheduled task */

 Called only as a tasklet (software IRQ) */

 PRISM2_NO_STATION_MODES */

 Called only as a tasklet (software IRQ) */

 PRISM2_NO_DEBUG */

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_DEBUG */

 Get BSSID if we have a valid AP address */

	/*

	 * Filter out sequential disconnect events in order not to cause a

	 * flood of SIOCGIWAP events that have a race condition with EAPOL

	 * frames and can confuse wpa_supplicant about the current association

	 * status.

		/*

		 * Firmware seems to be getting into odd state in host_roaming

		 * mode 2 when hostscan is used without join command, so try

		 * to fix this by re-joining the current AP. This does not

		 * actually trigger a new association if the current AP is

		 * still in the scan results.

/* Called only as scheduled task after receiving info frames (used to avoid

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_STATION_MODES */

 SPDX-License-Identifier: GPL-2.0-only

 struct local_info::hw_priv */

 PRISM2_IO_DEBUG */

 PRISM2_IO_DEBUG */

 FIX: This might change at some point.. */

/*

 * SanDisk CompactFlash WLAN Flashcard - Product Manual v1.0

 * Document No. 20-10-00058, January 2004

 * http://www.sandisk.com/pdf/industrial/ProdManualCFWLANv1.0.pdf

 Not enough ports to be SanDisk multi-function card */

 No SanDisk manfid found */

 No multi-function links found */

	/*

	 * Do not enable interrupts here to avoid some bogus events. Interrupts

	 * will be enabled during the first cor_sreset call.

 Setup Genesis mode */

/* allocate local data and register with CardServices

 release net devices */

 Look for an appropriate configuration table entry in the CIS */

 Need to allocate net_device before requesting IRQ handler */

	/*

	 * We enable IRQ here, but IRQ handler will not proceed

	 * until dev->base_addr is set below. This protect us from

	 * receive interrupts when driver is not initialized.

	PCMCIA_DEVICE_MANF_CARD(0xc00f, 0x0000),    conflict with pcnet_cs */

 SPDX-License-Identifier: GPL-2.0

 See IEEE 802.1H for LLC/SNAP encapsulation/decapsulation */

 Ethernet-II snap header (RFC1042 for most EtherTypes) */

 Bridge-Tunnel header (for EtherTypes ETH_P_AARP and ETH_P_IPX) */

 No encapsulation header if EtherType < 0x600 (=length) */

/* Send RX frame to netif with 802.11 (and possible prism) header.

 local->monitor_type == PRISM2_MONITOR_CAPHDR */

	/* check if there is enough room for extra data; if not, expand skb

 PRISM2_ADD_BOGUS_CRC */

	/* We now have an skb with enough head and tail room, so just insert

 Prism2 strips CRC */

 PRISM2_ADD_BOGUS_CRC */

 no value */, 4, 0);

 no value */, 4, 0);

 no value */, 4, 0);

 dss_dot11_b */

 unknown */

 unknown */

 raw */

 unknown */

 cck */

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

 Reserve enough space to fit maximum frame length */

 LLC */ +

 alignment */ +

 WEP */ + ETH_ALEN 
		/* received a fragment of a frame for which the head fragment

 Called only as a tasklet (software IRQ) */

/* Both IEEE 802.11 Beacon and Probe Response frames have similar structure, so

 parse failed */

			/* Process beacon frames also in kernel driver to

		/* send management frames to the user space daemon for

		/* Ignore (Re)AssocResp silently since these are not currently

		 * needed but are still received when WPA/RSN mode is enabled.

 Called only as a tasklet (software IRQ) */

	/* FIX: is this really supposed to accept WDS frames only in Master

 not a WDS frame */

	/* Possible WDS frame: either IEEE 802.11 compliant (if FromDS)

 RA (or BSSID) is not ours - drop */

 check if the frame came from a registered WDS connection */

		/* require that WDS link has been registered with TA or the

		/* STA is actually associated with us even though it has a

		 * registered WDS link. Assume it is in 'AP client' mode.

		 * Since this is a 3-addr frame, assume it is not (bogus) WDS

		 * frame and process it like any normal ToDS frame from

 check that the frame is unicast frame to us */

 ToDS frame with own addr BSSID and DA */

 FromDS frame with own addr as DA */

 check for port access entity Ethernet type */

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

/* All received frames are sent to this function. @skb contains the frame in

 * IEEE 802.11 format, i.e., in the format it was sent over air.

	/* dev is the master radio device; change this to be the default

	/* Put this code here so that we avoid duplicating it in all

 defined in iw_handler.h */

 If spy monitoring on */

 Update spy records */

 IW_WIRELESS_SPY */

		/* Use station specific key to override default keys if the

		 * receiver address is a unicast address ("individual RA"). If

		 * bcrx_sta_key parameter is set, station specific key is used

		 * even with broad/multicast targets (this is against IEEE

		 * 802.11, but makes it easier to use different keys with

		/* allow NULL decrypt to indicate an station specific override

			/* This seems to be triggered by some (multicast?)

			 * frames from other than current BSS, so just drop the

			 * frames silently instead of filling system log with

			/* TODO: could inform hostapd about this so that it

 Data frame - extract src/dst addresses */

 Frame from BSSID of the AP for which we are a client */

	/* Nullfunc frames may have PS-bit set, so they must be passed to

 skb: hdr + (possibly fragmented, possibly encrypted) payload */

 skb: hdr + (possibly fragmented) plaintext payload */

			/* copy first fragment (including full headers) into

			/* append frame payload to the end of the fragment

			/* more fragments expected - leave the skb in fragment

			 * cache for now; it will be delivered to upper layers

		/* this was the last fragment and the frame will be

	/* skb: hdr + (possible reassembled) full MSDU payload; possibly still

			/* pass unencrypted EAPOL frames even if encryption is

 skb: hdr + (possible reassembled) full plaintext payload */

	/* If IEEE 802.1X is used, check whether the port is authorized to send

				/* Send IEEE 802.1X frames to the user

 convert hdr + possible LLC headers into Ethernet header */

		/* remove RFC1042 or Bridge-Tunnel encapsulation and

 Leave Ethernet header part of hdr and full payload */

		/* Non-standard frame: get addr4 from its bogus location after

			/* copy multicast frame both to the higher layers and

			/* send frame directly to the associated STA using

 send to wireless media */

 skb2->network_header += ETH_HLEN; */

 SPDX-License-Identifier: GPL-2.0

 See IEEE 802.1H for LLC/SNAP encapsulation/decapsulation */

 Ethernet-II snap header (RFC1042 for most EtherTypes) */

 Bridge-Tunnel header (for EtherTypes ETH_P_AARP and ETH_P_IPX) */

 No encapsulation header if EtherType < 0x600 (=length) */

/* hard_start_xmit function for data interfaces (wlan#, wlan#wds#, wlan#sta)

 * Convert Ethernet header into a suitable IEEE 802.11 header depending on

			/* AP client mode: send frames with foreign src addr

	/* Incoming skb->data: dst_addr[6], src_addr[6], proto[2], payload

	 * ==>

	 * Prism2 TX frame with 802.11 header:

	 * txdesc (address order depending on used mode; includes dst_addr and

	 * src_addr), possible encapsulation (RFC1042/Bridge-Tunnel;

 Length of data after IEEE 802.11 header */

		/* Note! Prism2 station firmware has problems with sending real

		 * 802.11 frames with four addresses; until these problems can

		 * be fixed or worked around, 4-addr frames needed for WDS are

		 * using incompatible format: FromDS flag is not set and the

		 * fourth address is added after the frame payload; it is

		 * assumed, that the receiving station knows how to handle this

			/* From&To DS: Addr1 = RA, Addr2 = TA, Addr3 = DA,

			/* bogus 4-addr format to workaround Prism2 station

			/* From DS: Addr1 = DA (used as RA),

			 * Addr2 = BSSID (used as TA), Addr3 = SA (used as DA),

			/* SA from skb->data + ETH_ALEN will be added after

			 * frame payload; use hdr.addr4 as a temporary buffer

		/* send broadcast and multicast frames to broadcast RA, if

 From DS: Addr1 = DA, Addr2 = BSSID, Addr3 = SA */

 To DS: Addr1 = BSSID, Addr2 = SA, Addr3 = DA */

 not From/To DS: Addr1 = DA, Addr2 = SA, Addr3 = BSSID */

 Send IEEE 802.11 encapsulated frame using the master radio device */

 hard_start_xmit function for hostapd wlan#ap interfaces */

 Send IEEE 802.11 encapsulated frame using the master radio device */

 Called only from software IRQ */

	/* Host-based IEEE 802.11 fragmentation for TX is not yet supported, so

/* hard_start_xmit function for master radio interface wifi#.

 * AP processing (TX rate control, power save buffering, etc.).

		/* Set crypt to default algorithm and key; will be replaced in

	/* FIX (?):

	 * Wi-Fi 802.11b test plan suggests that AP should ignore power save

	 * bit in authentication and (re)association frames and assume tha

 drop packet */

 drop packet */

		/* do not free skb here, it will be freed when the

	/* Request TX callback if protocol version is 2 in 802.11 header;

	 * this version 2 is a special case used between hostapd and kernel

 remove special version from the frame header */

 no encryption for IEEE 802.1X frames */

		/* Add ISWEP flag both for firmware and host based encryption

 SPDX-License-Identifier: GPL-2.0

 ioctl() (mostly Linux Wireless Extensions) routines for Host AP driver */

 Why are we doing that ? Jean II */

 string length */

 changing to use WEP; deinit previously used algorithm */

 take WEP into use */

 No key data - just set the default TX key index */

	/* Do not reset port0 if card is in Managed mode since resetting will

	 * generate new IEEE 802.11 authentication which may end up in looping

	 * with IEEE 802.1X. Prism2 documentation seem to require port reset

	 * after WEP configuration. However, keys are apparently changed at

		/* only WEP is supported with wireless extensions, so just

	/* Reads from HFA384X_RID_CNFDEFAULTKEY* return bogus values, so show

	/* Update TX rate configuration for all STAs based on new operational

		/* HFA384X_RID_CURRENTTXRATE seems to always be 2 Mbps in

		 * Host AP mode, so use the recorded TX rate of the last sent

 should not happen */

 Set the desired AP density */

 Get the current AP density */

 Deprecated in new wireless extension API */

 has quality information */

 even numbers only */

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_STATION_MODES */

		/* local->bssid is also updated in LinkStatus handler when in

 freq => chan. */

 channel is used in prism2_setup_rids() */

 ANY */

		/* Setting SSID to empty string seems to kill the card in

 active */

	/* TODO: could fill num_txpower and txpower array with

		range->max_qual.qual = 70; /* what is correct max? This was not

					    * documented exactly. At least

 dB */

 dB */

 What would be suitable values for "average/typical" qual? */

 0 .. 92 */

 27 .. 154 */

 27 .. 154 */

 estimated maximum TCP throughput values (bps) */

 Event capability (kernel + driver) */

	/* Host decrypt is needed to get the IV and ICV fields;

	 * however, monitor mode seems to remove WEP flag from frame

 PRISM2_NO_STATION_MODES */

		/* There seems to be a firmware bug in at least STA f/w v1.5.6

		 * that leaves beacon frames to use IBSS type when moving from

		 * IBSS to Host AP mode. Doing double Port0 reset seems to be

		/* netif_carrier is used only in client modes for now, so make

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_STATION_MODES */

	/* setting retry limits is not supported with the current station

			/* disable manual retry count setting and use firmware

 what could be done, if firmware would support this.. */

 0 */

/* Note! This TX power controlling is experimental and should not be used in

 * production use. It just sets raw power register and does not use any kind of

 * feedback information from the measured TX power (CR58). This is now

 * commented out to make sure that it is not used by accident. TX power

 * configuration will be enabled again after proper algorithm using feedback

/* Map HFA386x's CR31 to and from dBm with some sort of ad hoc mapping..

 * This version assumes following mapping:

 * CR31 is 7-bit value with -64 to +63 range.

 * -64 is mapped into +20dBm and +63 into -43dBm.

 * This is certainly not an exact mapping for every card, but at least

 * increasing dBm value should correspond to increasing TX power.

 RAW_TXPOWER_SETTING */

 use all standby and sleep modes */

 disable all standby and sleep modes */

 RAW_TXPOWER_SETTING */

 RAW_TXPOWER_SETTING */

 Could not get real txpower; guess 15 dBm */

 RAW_TXPOWER_SETTING */

 RAW_TXPOWER_SETTING */

/* HostScan request works with and without host_roaming mode. In addition, it

 * does not break current association. However, it requires newer station

	/* FIX:

	 * It seems to be enough to set roaming mode for a short moment to

	 * host-based and then setup scanrequest data and return the mode to

	 * firmware-based.

	 *

	 * Master mode would need to drop to Managed mode for a short while

	 * to make scanning work.. Or sweep through the different channels and

 !PRISM2_NO_STATION_MODES */

 !PRISM2_NO_STATION_MODES */

		/* In master mode, we just return the results of our local

		 * tables, so we don't need to start anything...

 Could inquire F101, F103 or wait for SIOCGIWSCAN and read RID */

 First entry *MUST* be the AP MAC address */

 Other entries will be displayed in the order we give them */

 TODO: add SuppRates into BSS table */

 Bit rate given in 500 kb/s units (+ 0x80) */

 Check if we added any event */

 TODO: add BeaconInt,resp_rate,atim into BSS table */

/* Translate scan data returned from the card to a card independent

		/* Report every SSID if the AP is using multiple SSIDs. If no

		 * BSS record is found (e.g., when WPA mode is disabled),

 Check if there is space for one more entry */

 Ask user space to try again with a bigger buffer */

	/* Prism2 firmware has limits (32 at least in some versions) for number

	 * of BSSes in scan results. Extend this limit by using local BSS list.

 Check if there is space for one more entry */

 Ask user space to try again with a bigger buffer */

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_STATION_MODES */

	/* Wait until the scan is finished. We can probably do better

		/* Important note : we don't want to block the caller

		 * until results are ready for various reasons.

		 * First, managing wait queues is complex and racy

		 * (there may be multiple simultaneous callers).

		 * Second, we grab some rtnetlink lock before coming

		 * here (in dev_ioctl()).

		 * Third, the caller can wait on the Wireless Event

 PRISM2_NO_STATION_MODES */

		/* In MASTER mode, it doesn't make sense to go around

		 * scanning the frequencies and make the stations we serve

		 * wait when what the user is really interested about is the

		 * list of stations and access points we are talking to.

		 * So, just extract results from our cache...

 Translate to WE format */

 Station mode */

 --- raw access to sub-ioctls --- */

 --- sub-ioctls handlers --- */

 --- sub-ioctls definitions --- */

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_STATION_MODES */

 PRISM2_IO_DEBUG */

 PRISM2_NO_STATION_MODES */

 add WDS link to all APs in STA table */

 PRISM2_NO_STATION_MODES */

 leave SSID empty to accept all SSIDs */

 PRISM2_IO_DEBUG */

 FIX */

 PRISM2_IO_DEBUG */

 Backward compatibility code - this can be removed at some point */

		/* Disable monitor mode - old mode was not saved, so go to

		/* netlink socket mode is not supported anymore since it did

		 * not separate different devices from each other and was not

		 * best method for delivering large amount of packets to

 Disable and enable card */

 COR sreset */

 Disable and enable port 0 */

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

 PRISM2_DOWNLOAD_SUPPORT */

	/*

	 * Add 16-bit length in the beginning of the buffer because Prism2 RID

	 * includes it.

		/*

		 * Host AP driver does not use these parameters and allows

		 * wpa_supplicant to control them internally.

		/*

		 * Host AP driver does not use these parameters and allows

		 * wpa_supplicant to control them internally.

				/*

				 * TODO: add STA entry for the current AP so

				 * that unicast key can be used. For now, this

				 * is emulated by using default key idx 0.

		/*

		 * Per station encryption and other than WEP algorithms

		 * require host-based encryption, so force them on

		 * automatically.

	/*

	 * TODO: if ext_flags does not have IW_ENCODE_EXT_RX_SEQ_VALID, the

	 * existing seq# should not be changed.

	 * TODO: if ext_flags has IW_ENCODE_EXT_TX_SEQ_VALID, next TX seq#

	 * should be changed to something else than zero.

	/*

	 * Do not reset port0 if card is in Managed mode since resetting will

	 * generate new IEEE 802.11 authentication which may end up in looping

	 * with IEEE 802.1X. Prism2 documentation seem to require port reset

	 * after WEP configuration. However, keys are apparently changed at

	 * least in Managed mode.

	/* station based encryption and other than WEP algorithms require

	/* Do not reset port0 if card is in Managed mode since resetting will

	 * generate new IEEE 802.11 authentication which may end up in looping

	 * with IEEE 802.1X. Prism2 documentation seem to require port reset

	 * after WEP configuration. However, keys are apparently changed at

 PRISM2_NO_STATION_MODES */

 PRISM2_NO_STATION_MODES */

 Structures to export the Wireless Handlers */

 SIOCSIWCOMMIT */

 SIOCGIWNAME */

 SIOCSIWNWID */

 SIOCGIWNWID */

 SIOCSIWFREQ */

 SIOCGIWFREQ */

 SIOCSIWMODE */

 SIOCGIWMODE */

 SIOCSIWSENS */

 SIOCGIWSENS */

 not used */,		
 SIOCGIWRANGE */

 not used */,		
 kernel code */,		
 not used */,		
 kernel code */,		
 SIOCSIWSPY */

 SIOCGIWSPY */

 SIOCSIWTHRSPY */

 SIOCGIWTHRSPY */

 SIOCSIWAP */

 SIOCGIWAP */

 SIOCSIWMLME */

 SIOCGIWAPLIST */

 SIOCSIWSCAN */

 SIOCGIWSCAN */

 SIOCSIWESSID */

 SIOCGIWESSID */

 SIOCSIWNICKN */

 SIOCGIWNICKN */

 -- hole -- */

 -- hole -- */

 SIOCSIWRATE */

 SIOCGIWRATE */

 SIOCSIWRTS */

 SIOCGIWRTS */

 SIOCSIWFRAG */

 SIOCGIWFRAG */

 SIOCSIWTXPOW */

 SIOCGIWTXPOW */

 SIOCSIWRETRY */

 SIOCGIWRETRY */

 SIOCSIWENCODE */

 SIOCGIWENCODE */

 SIOCSIWPOWER */

 SIOCGIWPOWER */

 -- hole -- */

 -- hole -- */

 SIOCSIWGENIE */

 SIOCGIWGENIE */

 SIOCSIWAUTH */

 SIOCGIWAUTH */

 SIOCSIWENCODEEXT */

 SIOCGIWENCODEEXT */

 SIOCSIWPMKSA */

 -- hole -- */

 SIOCIWFIRSTPRIV + */

 0 */

 1 */

 2 */

 3 */

/* Private ioctls (iwpriv) that have not yet been converted

 PRISM2_NO_KERNEL_IEEE80211_MGMT */

/* Private ioctls that are not used with iwpriv;

 not implemented yet */

 PRISM2_DOWNLOAD_SUPPORT */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Common code for mac80211 Prism54 drivers

 *

 * Copyright (c) 2006, Michael Wu <flamingice@sourmilk.net>

 * Copyright (c) 2007-2009, Christian Lamparter <chunkeey@web.de>

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 *

 * Based on:

 * - the islsm (softmac prism54) driver, which is:

 *   Copyright 2004-2006 Jean-Baptiste Note <jbnote@gmail.com>, et al.

 * - stlc45xx driver

 *   Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).

 CONFIG_P54_LEDS */

 Don't toggle the LED, when the device is down. */

	/*

	 * TODO:

	 * Figure out if the EEPROM contains some hints about the number

	 * of available/programmable LEDs of the device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux device driver for USB based Prism54

 *

 * Copyright (c) 2006, Michael Wu <flamingice@sourmilk.net>

 *

 * Based on the islsm (softmac prism54) driver, which is:

 * Copyright 2004-2006 Jean-Baptiste Note <jbnote@gmail.com>, et al.

/*

 * Note:

 *

 * Always update our wiki's device list (located at:

 * http://wireless.wiki.kernel.org/en/users/Drivers/p54/devices ),

 * whenever you add a new device.

 Version 1 devices (pci chip + net2280) */

 Buffalo WLI2-USB2-G54 */

 Microsoft MN-710 */

 3COM 3CRWE254G72 */

 DrayTek Vigor 530 */

 Thomson SpeedTouch 120g */

 SMC 2862W-G */

 Corega CG-WLUSB2GT */

 Accton 802.11g WN4501 USB */

 Siemens Gigaset USB Adapter */

 Phillips CPWUA054 */

 Netgear WG121 */

 Netgear WG121 the second ? */

 Netgear WG111 */

 Spinnaker Proto board */

 Fujitsu E-5400 USB */

 Medion 40900, Roper Europe */

 MSI UB54G (MS-6826) */

 Gateway WGU-210 (Gemtek) */

 Shuttle PN15, Airvast WM168g, IOGear GWU513 */

 AirVasT USB wireless device */

 Inventel UR054G */

 Gemtek WUBI-100GW 802.11g */

 2Wire 802.11g USB (v1) / Z-Com */

 Sitecom WL-107 */

 Linksys WUSB54G OEM */

 Linksys WUSB54G Portable OEM */

 DLink DWL-G120 Spinnaker */

 DLink DWL-G122 */

 Conceptronic C54U */

 Linksys WUSB54G */

 Linksys WUSB54G Portable */

 Version 2 devices (3887) */

 Philips CPWUA054/00 */

 Belkin F5D7050 ver 1000 */

 Cohiba Proto board */

 Cohiba Proto board */

 Westell 802.11g USB (A90-211WG-01) */

 Thomson SpeedTouch 121g */

 SMC 2862W-G version 2 */

 Corega WLUSB2GTST USB */

 Zoom 4410a */

 Siemens Gigaset USB Adapter 54 version 2 */

 T-Com Sinus 154 data II */

 Zoom Wireless-G 4410 */

 Accton FD7050E ver 1010ec  */

 Netgear WG111 (v2) */

 Cohiba Proto board */

 Cohiba Proto board */

 U.S. Robotics U5 802.11g Adapter*/

 FUJITSU E-5400 USB D1700*/

	/* {USB_DEVICE(0x0cde, 0x0006)}, * Medion MD40900 already listed above,

 Sagem XG703A */

 Zcomax XG-705A */

 DLink DWL-G120 Cohiba */

 IOGear GWU513 (GW3887IK chip) */

 SMC 2862W-G version 2 */

 Linksys WUSB54G ver 2 */

 Linksys WUSB54AG */

 Telsey 802.11g USB2.0 Adapter */

 Inventel UR054G */

 {USB_DEVICE(0x15a9, 0x0002)}, * Also SparkLAN WL-682 with 3887 */

 Actiontec 802UIG-1 */

 Senao NUB-350 */

 DLink DWL-G122 rev A2 */

 D-Link DWL-G120 rev C1 */

 Dell WLA3310 USB Wireless Adapter */

 Spinnaker DUT */

 Cohiba Proto board */

 TODO check rx queue length and refill *somewhere* */

	/*

	 * TODO: figure out how to reliably stop the 3887 and net2280 so

	 * the hardware is still usable next time we want to start it.

	 * until then, we just stop listening to the hardware..

	/*

	 * TODO: Because we don't know how to reliably stop the 3887 and

	 * the isl3886+net2280, other than brutally cut off all

	 * communications. We have to reinitialize the urbs on every start.

	/*

	 * URB_FREE_BUFFER triggers a code path in the USB subsystem that will

	 * free what is inside the transfer_buffer after the last reference to

	 * the int_urb is dropped.

 power down net2280 bridge */

 power up bridge */

 TODO: we really need this?

 finally done setting up the bridge */

 TRDY timeout */, 0);

 do romboot */

 finally, we can upload firmware now! */

 do ramboot */

 start up the firmware */

	/*

	 * p54u_disconnect will do the rest of the

	 * cleanup

	/*

	 * At this point p54u_disconnect may have already freed

	 * the "priv" context. Do not use it anymore!

 really lazy and simple way of figuring out if we're a 3887 */

 TODO: should just stick the identification in the device table */

 ISL3887 needs a full reset on resume */

 CONFIG_PM */

 reinitialize old device state */

 CONFIG_PM */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Common code for mac80211 Prism54 drivers

 *

 * Copyright (c) 2006, Michael Wu <flamingice@sourmilk.net>

 * Copyright (c) 2007-2009, Christian Lamparter <chunkeey@web.de>

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 *

 * Based on:

 * - the islsm (softmac prism54) driver, which is:

 *   Copyright 2004-2006 Jean-Baptiste Note <jbnote@gmail.com>, et al.

 * - stlc45xx driver

 *   Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).

 P54_MM_DEBUG */

/*

 * So, the firmware is somewhat stupid and doesn't know what places in its

 * memory incoming data should go to. By poking around in the firmware, we

 * can find some unused memory to upload our packets to. However, data that we

 * want the card to TX needs to stay intact until the card has told us that

 * it is done with it. This function finds empty places we can upload to and

 * marks allocated areas as reserved if necessary. p54_find_and_unlink_skb or

 * p54_free_skb frees allocated areas.

		/*

		 * The tx_queue is now really full.

		 *

		 * TODO: check if the device has crashed and reset it.

 this is the  active beacon set anymore */

		/*

		 * TODO: find the correct formula

/*

 * Even if the firmware is capable of dealing with incoming traffic,

 * while dozing, we have to prepared in case mac80211 uses PS-POLL

 * to retrieve outstanding frames from our AP.

 * (see comment in net/mac80211/mlme.c @ line 1993)

 only beacons have a TIM IE */

 only consider beacons from the associated BSSID */

	/*

	 * If the device is in a unspecified state we have to

	 * ignore all data frames. Else we could end up with a

	 * nasty crash.

	/* LMAC API Page 10/29 - s_lm_data_in - clock

	 * "usec accurate timestamp of hardware clock

	 * at end of frame (before OFDM SIFS EOF padding"

	/*

	 * Frames in P54_QUEUE_FWSCAN and P54_QUEUE_BEACON are

	 * generated by the driver. Therefore tx_status is bogus

	 * and we don't want to confuse the mac80211 stack.

	/*

	 * Clear manually, ieee80211_tx_info_clear_status would

	 * clear the counts too and we need them.

 walk through the rates array and adjust the counts */

 Undo all changes to the frame. */

 Restore the original TKIP IV. */

 WEPSeed - 8.3.2.2 */

 remove TKIP_MMIC + TKIP_ICV */

 remove CCMP_MIC */

 remove WEP_ICV */

	/*

	 * STSW450X LMAC API page 26 - 3.8 Statistics

	 * "The exact measurement period can be derived from the

	 * timestamp member".

	/*

	 * STSW450X LMAC API page 26 - 3.8.1 Noise histogram

	 * The LMAC samples RSSI, CCA and transmit state at regular

	 * periods (typically 8 times per 1k [as in 1024] usec).

	/*

	 * update statistics when more than a second is over since the

	 * last call, or when a update is badly needed.

 1024 usec / 8 times = 128 usec / time */

 returns zero if skb can be reused */

		/*

		 * We have to set P54_HDR_FLAG_DATA_OUT_PROMISC for

		 * every frame in promiscuous/monitor mode.

		 * see STSW45x0C LMAC API - page 12.

					/*

					 * Injecting beacons on top of a AP is

					 * not a good idea... nevertheless,

					 * it should be doable.

			/*

			 * The firmware excepts that the IV has to have

			 * this special format

	/*

	 * we register the rates in perfect order, and

	 * RTS/CTS won't happen on 5 GHz

 see how many rates got used */

 limit tries to 8/nrates per rate */

		/*

		 * The magic expression here is equivalent to 8/nrates for

		 * all values that matter, but avoids division and jumps.

		 * Note that nrates can only take the values 1 through 4.

 if there are tries left, distribute from back to front */

 RC requested more tries at this rate */

 we register the rates in perfect order */

 store the count we actually calculated for TX status */

 TODO: enable bursting */

 reserve space for the MIC key */

 reserve some space for ICV */

 modifies skb->cb and with it info, so must be last! */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Firmware I/O code for mac80211 Prism54 drivers

 *

 * Copyright (c) 2006, Michael Wu <flamingice@sourmilk.net>

 * Copyright (c) 2007-2009, Christian Lamparter <chunkeey@web.de>

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 *

 * Based on:

 * - the islsm (softmac prism54) driver, which is:

 *   Copyright 2004-2006 Jean-Baptiste Note <jbnote@gmail.com>, et al.

 * - stlc45xx driver

 *   Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).

 24 bytes should be enough for all firmwares */

 FIXME add sanity checking */

 USB devices */

 rx alignment */

wireless.wiki.kernel.org/en/users/Drivers/p54 "

 Firmware supports QoS, use it! */

		/*

		 * NOTE:

		 *

		 * The firmware provides at most 255 (0 - 254) slots

		 * for keys which are then used to offload decryption.

		 * As a result the 255 entry (aka 0xff) can be used

		 * safely by the driver to mark keys that didn't fit

		 * into the full cache. This trick saves us from

		 * keeping a extra list for uploaded keys.

		/*

		 * "TRANSPARENT and PROMISCUOUS are mutually exclusive"

		 * STSW45X0C LMAC API - page 12

 automatic */

 Longbow frontend needs ever more */

	/*

	 * calculate the extra round trip delay according to the

	 * formula from 802.11-2007 17.3.8.6.

 (see prism54/isl_oid.h for further details) */

	/*

	 * The statistic feedback causes some extra headaches here, if it

	 * is not to crash/corrupt the firmware data structures.

	 *

	 * Unlike all other Control Get OIDs we can not use helpers like

	 * skb_put to reserve the space for the data we're requesting.

	 * Instead the extra frame length -which will hold the results later-

	 * will only be told to the p54_assign_address, so that following

	 * frames won't be placed into the  allegedly empty area.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux device driver for PCI based Prism54

 *

 * Copyright (c) 2006, Michael Wu <flamingice@sourmilk.net>

 * Copyright (c) 2008, Christian Lamparter <chunkeey@web.de>

 *

 * Based on the islsm (softmac prism54) driver, which is:

 * Copyright 2004-2006 Jean-Baptiste Note <jean-baptiste.note@m4x.org>, et al.

 Intersil PRISM Duette/Prism GT Wireless LAN adapter */

 3COM 3CRWE154G72 Wireless LAN adapter */

 Intersil PRISM Indigo Wireless LAN adapter */

 Intersil PRISM Javelin/Xbow Wireless LAN adapter */

 Intersil PRISM Xbow Wireless LAN adapter (Symbol AP-300) */

 wait for the firmware to reset properly */

 wait for the firmware to boot properly */

 FIXME: necessary?

		/*

		 * This will indirectly result in a call to p54p_remove.

		 * Hence, we don't need to bother with freeing any

		 * allocated ressources at all.

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008 Christian Lamparter <chunkeey@web.de>

 * Copyright 2008       Johannes Berg <johannes@sipsolutions.net>

 *

 * This driver is a port from stlc45xx:

 *	Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).

 CONFIG_P54_SPI_DEFAULT_EEPROM */

/* gpios should be handled in board files and provided via platform data,

 * but because it's currently impossible for p54spi to have a header file

 * in include/linux, let's use module paramaters for now

 We first push the address */

 We first push the address */

 FIXME: should driver use it's own struct device? */

	/* allow users to customize their eeprom.

 CONFIG_P54_SPI_DEFAULT_EEPROM */

 stop the device */

 enable host interrupts */

 boot the device */

	/* need to wait a while before device can be accessed, the length

	 * is just a guess

 wake the chip */

 And wait for the READY interrupt */

 TODO: reinitialize state */

	/* Read data size and first data word in one SPI transaction

	 * This is workaround for firmware/DMA bug,

	 * when first data word gets lost under high load.

	/* Firmware may insert up to 4 padding bytes after the lmac header,

	 * but it does not amend the size of SPI data transfer.

	 * Such packets has correct data size in header, thus referencing

	 * past the end of allocated skb. Reserve extra 4 bytes for this case

	/* Put additional bytes to compensate for the possible

	 * alignment-caused truncation

 SPDX-License-Identifier: GPL-2.0-only

/*

 * EEPROM parser code for mac80211 Prism54 drivers

 *

 * Copyright (c) 2006, Michael Wu <flamingice@sourmilk.net>

 * Copyright (c) 2007-2009, Christian Lamparter <chunkeey@web.de>

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 *

 * Based on:

 * - the islsm (softmac prism54) driver, which is:

 *   Copyright 2004-2006 Jean-Baptiste Note <jbnote@gmail.com>, et al.

 * - stlc45xx driver

 *   Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).

	/*

	 * The defaults are taken from usb-logs of the

	 * vendor driver. So, they should be safe to

	 * use in case we can't get a match from the

	 * rssi <-> dBm conversion database.

 FIXME: sync these values with the 802.11 spec */

 TODO: generate rate array dynamically */

	/*

	 * usually all lists in the eeprom are mostly sorted.

	 * so it's very likely that the entry we are looking for

	 * is right at the end of the list

 entry does not exist yet. Initialize a new one. */

		/*

		 * filter out frequencies which don't belong into

		 * any supported band.

 longbow seems to use 1/16 dBm units */

 raw values are in 1/4 dBm units */

 sort the channel list by frequency */

 no useable band available. */

 "invent" the points for the other modulations */

		/*

		 * Some devices (Dell 1450 USB, Xbow 5GHz card, etc...)

		 * have an empty two byte header.

 sort the list by channel frequency */

 nearest match */

		/* TODO:

		 * write a shared/common function that converts

		 * "Regulatory domain codes" (802.11-2007 14.8.2.2)

		 * into ISO/IEC 3166-1 alpha2 for regulatory_hint.

 verify that at least the entry length/code fits */

 abort if entry exceeds whole structure */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * mac80211 glue code for mac80211 Prism54 drivers

 *

 * Copyright (c) 2006, Michael Wu <flamingice@sourmilk.net>

 * Copyright (c) 2007-2009, Christian Lamparter <chunkeey@web.de>

 * Copyright 2008, Johannes Berg <johannes@sipsolutions.net>

 *

 * Based on:

 * - the islsm (softmac prism54) driver, which is:

 *   Copyright 2004-2006 Jean-Baptiste Note <jbnote@gmail.com>, et al.

 * - stlc45xx driver

 *   Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).

	/*

	 * Notify the firmware that we don't want or we don't

	 * need to buffer frames for this station anymore.

 update the firmware's filter table */

	/*

	 * the good excuse for this mess is ... the firmware.

	 * The dummy TIM MUST be at the end of the beacon frame,

	 * because it'll be overwritten!

 add the dummy at the end */

	/*

	 * During operation, the firmware takes care of beaconing.

	 * The driver only needs to upload a new beacon template, once

	 * the template was changed by the stack or userspace.

	 *

	 * LMAC API 3.2.2 also specifies that the driver does not need

	 * to cancel the old beacon template by hand, instead the firmware

	 * will release the previous one through the feedback mechanism.

	/*

	 * LMAC API 3.2.2 states that any active beacon template must be

	 * canceled by the driver before attempting a mode transition.

 only reset channel statistics, don't touch .filled, etc. */

		/*

		 * TODO: Use the LM_SCAN_TRAP to determine the current

		 * operating channel.

	/*

	 * The first entry is reserved for the global broadcast MAC.

	 * Otherwise the firmware will drop it and ARP will no longer work.

 update */

	/*

	 * TODO: walk through tx_queue and do the following tasks

	 * 	1. initiate bursts.

	 *      2. cancel stuck frames / reset the device if necessary.

		/*

		 * Unfortunately most/all firmwares are trying to decrypt

		 * incoming management frames if a suitable key can be found.

		 * However, in doing so the data in these frames gets

		 * corrupted. So, we can't have firmware supported crypto

		 * offload in this case.

			/*

			 * The device supports the chosen algorithm, but the

			 * firmware does not provide enough key slots to store

			 * all of them.

			 * But encryption offload for outgoing frames is always

			 * possible, so we just pretend that the upload was

			 * successful and do the decryption in software.

 mark the key as invalid. */

 This key was not uploaded into the rx key cache. */

 test if the reported statistics are valid. */

				/*

				 * hw/fw has not accumulated enough sample sets.

				 * Wait for 100ms, this ought to be enough to

				 * to get at least one non-null set of channel

				 * usage statistics.

	/*

	 * Because the firmware has the sole control over any frames

	 * in the P54_QUEUE_BEACON or P54_QUEUE_SCAN queues, they

	 * don't really count as pending or active.

	/*

	 * Currently, it wouldn't really matter if we wait for one second

	 * or 15 minutes. But once someone gets around and completes the

	 * TODOs [ancel stuck frames / reset device] in p54_work, it will

	 * suddenly make sense to wait that long.

	/*

	 * In this case no locking is required because as we speak the

	 * queues have already been stopped and no new frames can sneak

	 * up from behind.

 waste time */

 support all coverage class values as in 802.11-2007 Table 7-27 */

	/*

	 * We support at most 8 tries no matter which rate they're at,

	 * we cannot support max_rates * max_rate_tries as we set it

	 * here, but setting it correctly to 4/2 or so would limit us

	 * artificially if the RC algorithm wants just two rates, so

	 * let's say 4/7, we'll redistribute it at TX time, see the

	 * comments there.

	/*

	 * For now, disable PS by default because it affects

	 * link stability significantly.

 CONFIG_P54_LEDS */

 CONFIG_P54_LEDS */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2005-2014, 2020 Intel Corporation

 * Copyright (C) 2016 Intel Deutschland GmbH

 num of channels in calib_ch size */

/**

 * struct iwl_phy_db - stores phy configuration and calibration data.

 *

 * @cfg: phy configuration.

 * @calib_nch: non channel specific calibration data.

 * @n_group_papd: number of entries in papd channel group.

 * @calib_ch_group_papd: calibration data related to papd channel group.

 * @n_group_txp: number of entries in tx power channel group.

 * @calib_ch_group_txp: calibration data related to tx power chanel group.

 * @trans: transport layer

 for parsing of tx power channel group data that comes from the firmware*/

 TODO: add default values of the phy db. */

/*

 * get phy db section: returns a pointer to a phy db section specified by

 * type and channel group id.

			/*

			 * Firmware sends the largest index first, so we can use

			 * it to know how much we should allocate.

			/*

			 * Firmware sends the largest index first, so we can use

			 * it to know how much we should allocate.

		/*

		 * Looking for the first channel group that its max channel is

		 * higher then wanted channel.

 find wanted channel group */

 Set phy db cmd variables */

 Set hcmd variables */

 Send all the  channel specific groups to operational fw */

 Send the requested PHY DB section */

 Send PHY DB CFG section */

 Send all the TXP channel specific data */

 Send all the TXP channel specific data */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2005-2011, 2021 Intel Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2005-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

/******************************************************************************

 *

 * module boiler plate

 *

/**

 * struct iwl_drv - drv common data

 * @list: list of drv structures using this opmode

 * @fw: the iwl_fw structure

 * @op_mode: the running op_mode

 * @trans: transport layer

 * @dev: for debug prints only

 * @fw_index: firmware revision to try loading

 * @firmware_name: composite filename of ucode file to load

 * @request_firmware_complete: the firmware has been obtained from user space

 * @dbgfs_drv: debugfs root directory entry

 * @dbgfs_trans: debugfs transport directory entry

 * @dbgfs_op_mode: debugfs op_mode directory entry

 firmware we're trying to load */

 name of firmware file to load */

 Protects the table contents, i.e. the ops pointer & drv list */

 name: iwldvm, iwlmvm, etc */

 pointer to op_mode ops */

 list of devices using this op_mode */

 ops set when driver is initialized */

/*

 * struct fw_sec: Just for the image parsing process.

 * For the fw storage we are using struct fw_desc.

 the sec data */

 section size */

 offset of writing in the device */

git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git\n");

/*

 * struct fw_sec_parsing: to extract fw section and it's offset from tlv

/**

 * struct iwl_tlv_calib_data - parse the default calib data from TLV

 *

 * @ucode_type: the uCode to which the following default calib relates.

 * @calib: default calibrations.

 FW debug data parsed for driver usage */

/*

 * These functions are just to extract uCode section data from the pieces

 * structure.

 we skip schemes with zero cipher suite selector */

/*

 * Gets uCode section from tlv.

 Verify size of file vs. image size info in file's header */

 second time we find this, it's for WoWLAN */

 IWL_UCODE_TLV_D3_KEK_KCK_ADDR is regular image */

 IWL_UCODE_TLV_D3_KEK_KCK_ADDR is WoWLAN image */

 must be at least one u32 */

 and a proper number of u32s */

			/*

			 * This driver only reads the first u32 as

			 * right now no more features are defined,

			 * if that changes then either the driver

			 * will not work with the new firmware, or

			 * it'll not take advantage of new features.

 ignored */

 Verify that uCode images will fit in card's SRAM. */

 op_mode can be NULL if its start failed */

/*

 * iwl_req_fw_callback - callback when firmware was loaded

 *

 * If loaded successfully, copies the firmware into buffers

 * for the card to fetch (via DMA).

 dump all fw memory areas by default */

 Make sure that we got at least the API version number */

 Data from ucode file:  header followed by uCode images */

	/*

	 * api_ver should match the api version forming part of the

	 * firmware filename ... but we don't check for that and only rely

	 * on the API version read from firmware header from here on forward

	/*

	 * In mvm uCode there is no difference between data and instructions

	 * sections.

 Allocate ucode buffers for card's bus-master loading ... */

	/* Runtime instructions and 2 copies of data:

	 * 1) unmodified from disk

	 * 2) backup cache for save/restore during power-downs

			/* In version 1 of the destination tlv, which is

			 * relevant for internal buffer exclusively,

			 * the base address is part of given with the length

			 * of the buffer, and the size shift is give instead of

			 * end shift. We now store these values in base_reg,

			 * and end shift, and when dumping the data we'll

			 * manipulate it for extracting both the length and

			/*

			 * If the trigger isn't long enough, WARN and exit.

			 * Someone is trying to debug something and he won't

			 * be able to catch the bug he is trying to chase.

			 * We'd better be noisy to be sure he knows what's

			 * going on.

 Now that we can no longer fail, copy information */

	/*

	 * The (size - 16) / 12 formula is based on the information recorded

	 * for each event, which is of mode 1 (including timestamp) for all

	 * new microcodes that include this information.

	/*

	 * figure out the offset of chain noise reset and gain commands

	 * base on the size of standard phy calibration commands table size

 We have our copies now, allow OS release its copies */

 add this device to the list of devices using this op_mode */

	/*

	 * Complete the firmware request last so that

	 * a driver unbind (stop) doesn't run while we

	 * are doing the start() above.

	/*

	 * Load the module last so we don't block anything

	 * else from proceeding if the module fails to load

	 * or hangs loading.

 try next, if any */

 Create the device debugfs entries. */

 Create transport layer debugfs dir */

	/*

	 * List is empty (this item wasn't added)

	 * when firmware loading failed -- in that

	 * case we can't remove it from any list.

 shared module parameters */

 the rest are 0 by default */

 TODO: need to handle exceptional case */

 call the stop routine for all devices */

 Create the root of iwlwifi debugfs subsystem. */

/*

 * set bt_coex_active to true, uCode will do kill/defer

 * every time the priority line is asserted (BT is sending signals on the

 * priority line in the PCIx).

 * set bt_coex_active to false, uCode will ignore the BT activity and

 * perform the normal operation

 *

 * User might experience transmit issue on some platform due to WiFi/BT

 * co-exist problem. The possible behaviors are:

 *   Able to scan and finding all the available AP

 *   Not able to associate with any AP

 * On those platforms, WiFi communication can be restored by set

 * "bt_coex_active" module parameter to "false"

 *

 * default: bt_coex_active = true (BT_COEX_ENABLE)

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2005-2014, 2018-2019, 2021 Intel Corporation

/*

 * EEPROM access time values:

 *

 * Driver initiates EEPROM read by writing byte address << 1 to CSR_EEPROM_REG.

 * Driver then polls CSR_EEPROM_REG for CSR_EEPROM_REG_READ_VALID_MSK (0x1).

 * When polling, wait 10 uSec between polling loops, up to a maximum 5000 uSec.

 * Driver reads 16-bit value from bits 31-16 of CSR_EEPROM_REG.

 uSec */

 microseconds */

 number of attempts (not time) */

/*

 * The device's EEPROM semaphore prevents conflicts between driver and uCode

 * when accessing the EEPROM; each access is a series of pulses to/from the

 * EEPROM chip, not a single event, so even reads could conflict if they

 * weren't arbitrated by the semaphore.

 milliseconds */

 number of attempts (not time) */

 Request semaphore */

 See if we got it */

/******************************************************************************

 *

 * OTP related functions

 *

 OTP only valid for CP/PP and after */

	/*

	 * CSR auto clock gate disable bit -

	 * this is only applicable for HW with OTP shadow RAM

 check for ECC errors: */

 stop in this case */

 set the uncorrectable OTP ECC bit for acknowledgment */

 continue in this case */

 set the correctable OTP ECC bit for acknowledgment */

/*

 * iwl_is_otp_empty: check for empty OTP

 locate the beginning of OTP link list */

/*

 * iwl_find_otp_image: find EEPROM image in OTP

 *   finding the OTP block that contains the EEPROM image.

 *   the last valid block on the link list (the block _before_ the last block)

 *   is the block we should read and used to configure the device.

 *   If all the available OTP blocks are full, the last block will be the block

 *   we should read and used to configure the device.

 *   only perform this operation if shadow RAM is disabled

 set addressing mode to absolute to traverse the link list */

 checking for empty OTP or error */

	/*

	 * start traverse link list

	 * until reach the max number of OTP blocks

	 * different devices have different number of OTP blocks

		/* save current valid block address

		 * check for more block on the link list

			/*

			 * reach the end of link list, return success and

			 * set address point to the starting address

			 * of the image

 skip first 2 bytes (link list pointer) */

 more in the link list, continue */

 OTP has no valid blocks */

/*

 * iwl_read_eeprom - read EEPROM contents

 *

 * Load the EEPROM contents from adapter and return it

 * and its size.

 *

 * NOTE:  This routine uses the non-debug IO access functions.

 Make sure driver (instead of uCode) is allowed to read EEPROM */

 traversing the linked list if no shadow ram supported */

 eeprom is an array of 16bit values */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 * Copyright (C) 2019-2021 Intel Corporation

 biggest possible 802.11 header */

 Ensure device TX cmd cannot reach/cross a page boundary in gen2 */

	/*

	 * For gen2 devices, we use a single allocation for each byte-count

	 * table, but they're pretty small (1k) so use a DMA pool that we

	 * allocate here.

 Some things must not change even if the config does */

 Initialize the wait queue for commands */

	/*

	 * We can't test IWL_MVM_STATUS_IN_D3 in mvm->status because this

	 * bit is set early in the D3 flow, before we send all the commands

	 * that configure the firmware for D3 operation (power, patterns, ...)

	 * and we don't want to flag all those with CMD_SEND_IN_D3.

	 * So use the system_pm_mode instead. The only command sent after

	 * we set system_pm_mode is D3_CONFIG_CMD, which we now flag with

	 * CMD_SEND_IN_D3.

/* Comparator for struct iwl_hcmd_names.

 * Used in the binary search over a list of host commands.

 *

 * @key: command_id that we're looking for.

 * @elt: struct iwl_hcmd_names candidate for match.

 *

 * @return 0 iff equal.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2005-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 NVM offsets (in words) definitions */

 NVM HW-Section offset (in words) definitions */

 NVM SW-Section offset (in words) definitions */

 NVM calibration section offset (in words) definitions */

 NVM REGULATORY -Section offset (in words) definitions */

 NVM HW-Section offset (in words) definitions */

 NVM SW-Section offset (in words) definitions */

 NVM PHY_SKU-Section offset (in words) definitions */

 NVM REGULATORY -Section offset (in words) definitions */

 SKU Capabilities (actual values from NVM definition) */

/*

 * These are the channel numbers in the order that they are stored in the NVM

 2.4 GHz */

 5 GHz */

 2.4 GHz */

 5 GHz */

 2.4 GHz */

 5 GHz */

 6-7 GHz */

 rate data (static) */

/**

 * enum iwl_nvm_channel_flags - channel flags in NVM

 * @NVM_CHANNEL_VALID: channel is usable for this SKU/geo

 * @NVM_CHANNEL_IBSS: usable as an IBSS channel

 * @NVM_CHANNEL_ACTIVE: active scanning allowed

 * @NVM_CHANNEL_RADAR: radar detection required

 * @NVM_CHANNEL_INDOOR_ONLY: only indoor use is allowed

 * @NVM_CHANNEL_GO_CONCURRENT: GO operation is allowed when connected to BSS

 *	on same channel on 2.4 or same UNII band on 5.2

 * @NVM_CHANNEL_UNIFORM: uniform spreading required

 * @NVM_CHANNEL_20MHZ: 20 MHz channel okay

 * @NVM_CHANNEL_40MHZ: 40 MHz channel okay

 * @NVM_CHANNEL_80MHZ: 80 MHz channel okay

 * @NVM_CHANNEL_160MHZ: 160 MHz channel okay

 * @NVM_CHANNEL_DC_HIGH: DC HIGH required/allowed (?)

/**

 * enum iwl_reg_capa_flags - global flags applied for the whole regulatory

 * domain.

 * @REG_CAPA_BF_CCD_LOW_BAND: Beam-forming or Cyclic Delay Diversity in the

 *	2.4Ghz band is allowed.

 * @REG_CAPA_BF_CCD_HIGH_BAND: Beam-forming or Cyclic Delay Diversity in the

 *	5Ghz band is allowed.

 * @REG_CAPA_160MHZ_ALLOWED: 11ac channel with a width of 160Mhz is allowed

 *	for this regulatory domain (valid only in 5Ghz).

 * @REG_CAPA_80MHZ_ALLOWED: 11ac channel with a width of 80Mhz is allowed

 *	for this regulatory domain (valid only in 5Ghz).

 * @REG_CAPA_MCS_8_ALLOWED: 11ac with MCS 8 is allowed.

 * @REG_CAPA_MCS_9_ALLOWED: 11ac with MCS 9 is allowed.

 * @REG_CAPA_40MHZ_FORBIDDEN: 11n channel with a width of 40Mhz is forbidden

 *	for this regulatory domain (valid only in 5Ghz).

 * @REG_CAPA_DC_HIGH_ENABLED: DC HIGH allowed.

 * @REG_CAPA_11AX_DISABLED: 11ax is forbidden for this regulatory domain.

/**

 * enum iwl_reg_capa_flags_v2 - global flags applied for the whole regulatory

 * domain (version 2).

 * @REG_CAPA_V2_STRADDLE_DISABLED: Straddle channels (144, 142, 138) are

 *	disabled.

 * @REG_CAPA_V2_BF_CCD_LOW_BAND: Beam-forming or Cyclic Delay Diversity in the

 *	2.4Ghz band is allowed.

 * @REG_CAPA_V2_BF_CCD_HIGH_BAND: Beam-forming or Cyclic Delay Diversity in the

 *	5Ghz band is allowed.

 * @REG_CAPA_V2_160MHZ_ALLOWED: 11ac channel with a width of 160Mhz is allowed

 *	for this regulatory domain (valid only in 5Ghz).

 * @REG_CAPA_V2_80MHZ_ALLOWED: 11ac channel with a width of 80Mhz is allowed

 *	for this regulatory domain (valid only in 5Ghz).

 * @REG_CAPA_V2_MCS_8_ALLOWED: 11ac with MCS 8 is allowed.

 * @REG_CAPA_V2_MCS_9_ALLOWED: 11ac with MCS 9 is allowed.

 * @REG_CAPA_V2_WEATHER_DISABLED: Weather radar channels (120, 124, 128, 118,

 *	126, 122) are disabled.

 * @REG_CAPA_V2_40MHZ_ALLOWED: 11n channel with a width of 40Mhz is allowed

 *	for this regulatory domain (uvalid only in 5Ghz).

 * @REG_CAPA_V2_11AX_DISABLED: 11ax is forbidden for this regulatory domain.

/*

* API v2 for reg_capa_flags is relevant from version 6 and onwards of the

* MCC update command response.

/**

 * struct iwl_reg_capa - struct for global regulatory capabilities, Used for

 * handling the different APIs of reg_capa_flags.

 *

 * @allow_40mhz: 11n channel with a width of 40Mhz is allowed

 *	for this regulatory domain (valid only in 5Ghz).

 * @allow_80mhz: 11ac channel with a width of 80Mhz is allowed

 *	for this regulatory domain (valid only in 5Ghz).

 * @allow_160mhz: 11ac channel with a width of 160Mhz is allowed

 *	for this regulatory domain (valid only in 5Ghz).

 * @disable_11ax: 11ax is forbidden for this regulatory domain.

 Note: already can print up to 101 characters, 110 is the limit! */

	/* Set the GO concurrent flag only in case that NO_IR is set.

	 * Otherwise it is meaningless

 workaround to disable wide channels in 5GHz */

			/*

			 * Channels might become valid later if lar is

			 * supported, hence we still want to add them to

			 * the list of supported channels to cfg80211.

 Initialize regulatory-based run-time data */

		/*

		 * Default value - highest tx power value.  max_power

		 * is not used in mvm, and is used for backwards compatibility

 don't put limitations in case we're using LAR */

		/* TODO: Don't put limitations on UHB devices as we still don't

		 * have NVM for them

 this works because NOT_SUPPORTED == 3 */

 vendor element */

 length */

 Intel OUI */

 type (Intel Capabilities) */

 followed by 16 bits of capabilities */

			/*

			 * Set default Tx/Rx HE MCS NSS Support field.

			 * Indicate support for up to 2 spatial streams and all

			 * MCS, without any special cases

			/*

			 * Set default PPE thresholds, with PPET16 set to 0,

			 * PPET8 set to 7

			/*

			 * Set default Tx/Rx HE MCS NSS Support field.

			 * Indicate support for up to 2 spatial streams and all

			 * MCS, without any special cases

			/*

			 * Set default PPE thresholds, with PPET16 set to 0,

			 * PPET8 set to 7

 grab HT/VHT capabilities and calculate HE 6 GHz capabilities */

 we don't support extended_ht_cap_info anywhere, so no RD_RESPONDER */

 we know it's writable - we set it before ourselves */

	/* Advertise an A-MPDU exponent extension based on

	 * operating band

		/* If not 2x2, we need to indicate 1x1 in the

		 * Midamble RX Max NSTS - but not for AP mode

 should only initialize once */

 6GHz band. */

 use the same rates as 5GHz band */

 set the radio configuration for family 8000 */

	/*

	 * If the OEM fused a valid address, use it instead of the one in the

	 * OTP

		/*

		 * Store the MAC address from MAO section.

		 * No byte swapping is required in MAO section

		/*

		 * Force the use of the OTP MAC address in case of reserved MAC

		 * address in the NVM, or if address is given but invalid.

 read the mac address from WFMP registers */

 The byte order is little endian 16 bit, meaning 214365 */

	/*

	 * Workaround a bug in Indonesia SKUs where the regulatory in

	 * some 7000-family OTPs erroneously allow wide channels in

	 * 5GHz.  To check for Indonesia, we take the SKU value from

	 * bits 1-4 in the subsystem ID and check if it is either 5 or

	 * 9.  In those cases, we need to force-disable wide channels

	 * in 5GHz otherwise the FW will throw a sysassert when we try

	 * to use them.

		/*

		 * Unlike the other sections in the NVM, the hw

		 * section uses big-endian.

 Checking for required sections */

 in family 8000 Xtal calibration values moved to OTP */

 If no valid mac address was found - bail out */

	/* Set the GO concurrent flag only in case that NO_IR is set.

	 * Otherwise it is meaningless

	/*

	 * reg_capa is per regulatory domain so apply it for every channel

 build a regdomain rule for every valid channel */

 set alpha2 from FW. */

 parse regulatory capability flags */

 we can't continue the same rule */

 this doesn't matter - not used by FW */

 rely on auto-calculation to merge BW of contiguous chans */

	/*

	 * Certain firmware versions might report no valid channels

	 * if booted in RF-kill, i.e. not all calibrations etc. are

	 * running. We'll get out of this situation later when the

	 * rfkill is removed and we update the regdomain again, but

	 * since cfg80211 doesn't accept an empty regdomain, add a

	 * dummy (unusable) rule here in this case so we can init.

	/*

	 * Narrow down regdom for unused regulatory rules to prevent hole

	 * between reg rules to wmm rules.

 OTP 0x52 bug work around: it's a 1x1 device */

/*

 * Reads external NVM from a file into mvm->nvm_sections

 *

 * HOW TO CREATE THE NVM FILE FORMAT:

 * ------------------------------

 * 1. create hex file, format:

 *      3800 -> header

 *      0000 -> header

 *      5a40 -> data

 *

 *   rev - 6 bit (word1)

 *   len - 10 bit (word1)

 *   id - 4 bit (word2)

 *   rsv - 12 bit (word2)

 *

 * 2. flip 8bits with 8 bits per line to get the right NVM file format

 *

 * 3. create binary file from the hex file

 *

 * 4. save as "iNVM_xxx.bin" under /lib/firmware

 Maximal size depends on NVM version */

	/*

	 * Obtain NVM image via request_firmware. Since we already used

	 * request_firmware_nowait() for the firmware binary load and only

	 * get here after that we assume the NVM request can be satisfied

	 * synchronously.

	/* some NVM file will contain a header.

	 * The header is identified by 2 dwords header as follow:

	 * dword[0] = 0x2A504C54

	 * dword[1] = 0x4E564D2A

	 *

	 * This header must be skipped when providing the NVM data to the FW.

 nvm file validation, dword_buff[2] holds the file version */

 check for EOF marker */

 advance to the next section */

	/*

	 * All the values in iwl_nvm_get_info_rsp v4 are the same as

	 * in v3, except for the channel profile part of the

	 * regulatory.  So we can just access the new struct, with the

	 * exception of the latter.

 TODO: if platform NVM has MAC address - override it here */

 Initialize general data */

 Initialize MAC sku data */

 Initialize PHY sku data */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2009 - 2014 Intel Corporation. All rights reserved.

 * Copyright (C) 2018 Intel Corporation

 sparse doesn't like tracepoint macros */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2005-2014, 2018-2020 Intel Corporation

 * Copyright (C) 2015 Intel Mobile Communications GmbH

 EEPROM offset definitions */

 indirect access definitions */

 corresponding link offsets in EEPROM */

 General */

 2 bytes */

 2 bytes */

 6  bytes */

 2  bytes */

 9  bytes */

 2  bytes */

 2  bytes */

 2  bytes */

 2  bytes */

 2  bytes */

 calibration */

 temperature */

 SKU Capabilities (actual values from EEPROM definition) */

 radio config bits (actual values from EEPROM definition) */

 bits 0-1   */

 bits 2-3   */

 bits 4-5   */

 bits 6-7   */

 bits 8-11  */

 bits 12-15 */

/*

 * EEPROM bands

 * These are the channel numbers from each band in the order

 * that they are stored in the EEPROM band information. Note

 * that EEPROM bands aren't the same as mac80211 bands, and

 * there are even special "ht40 bands" in the EEPROM.

 2.4 GHz */

 4915-5080MHz */

 5170-5320MHz */

 5500-5700MHz */

 5725-5825MHz */

 2.4 ht40 channel */

 5.2 ht40 channel */

 rate data (static) */

 EEPROM reading functions */

 translate the offset from words to byte */

/**

 * enum iwl_eeprom_channel_flags - channel flags in EEPROM

 * @EEPROM_CHANNEL_VALID: channel is usable for this SKU/geo

 * @EEPROM_CHANNEL_IBSS: usable as an IBSS channel

 * @EEPROM_CHANNEL_ACTIVE: active scanning allowed

 * @EEPROM_CHANNEL_RADAR: radar detection required

 * @EEPROM_CHANNEL_WIDE: 20 MHz channel okay (?)

 * @EEPROM_CHANNEL_DFS: dynamic freq selection candidate

/**

 * struct iwl_eeprom_channel - EEPROM channel data

 * @flags: %EEPROM_CHANNEL_* flags

 * @max_power_avg: max power (in dBm) on this channel, at most 31 dBm

/**

 * struct iwl_eeprom_enhanced_txpwr

 * @flags: entry flags

 * @channel: channel number

 * @chain_a_max: chain a max power in 1/2 dBm

 * @chain_b_max: chain b max power in 1/2 dBm

 * @chain_c_max: chain c max power in 1/2 dBm

 * @delta_20_in_40: 20-in-40 deltas (hi/lo)

 * @mimo2_max: mimo2 max power in 1/2 dBm

 * @mimo3_max: mimo3 max power in 1/2 dBm

 *

 * This structure presents the enhanced regulatory tx power limit layout

 * in an EEPROM image.

 (.5 dBm) */

 Take the highest tx power from any valid chains */

 update matching channel or from common data only */

 update matching band only */

 the length is in 16-bit words, but we want entries */

 skip invalid entries */

 2.4GHz band */

 4.9GHz band */

 5.2GHz band */

 5.5GHz band */

 5.7GHz band */

 2.4GHz ht40 channels */

 5 GHz ht40 channels */

	/*

	 * Loop through the 5 EEPROM bands and add them to the parse list

 Loop through each band adding each of the channels */

 set no-HT40, will enable as appropriate later */

 Initialize regulatory-based run-time data */

		/*

		 * for newer device (6000 series and up)

		 * EEPROM contain enhanced tx power information

		 * driver need to process addition information

		 * to determine the max channel tx power limits

 All others use data from channel map */

 Check if we do have HT40 channels */

 Two additional EEPROM bands for 2.4 and 5 GHz HT40 channels */

 EEPROM band 6 is 2.4, band 7 is 5 GHz */

 Loop through each band adding each of the channels */

 Set up driver's info for lower half */

 Set up driver's info for upper half */

 Mbps */

 Mbps */

 Highest supported Rx data rate */

 Tx MCS capabilities */

 EEPROM data functions */

 get MAC address(es) */

 check overrides (some devices have wrong EEPROM) */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2018-2021 Intel Corporation

/**

 * enum iwl_dbg_tlv_type - debug TLV types

 * @IWL_DBG_TLV_TYPE_DEBUG_INFO: debug info TLV

 * @IWL_DBG_TLV_TYPE_BUF_ALLOC: buffer allocation TLV

 * @IWL_DBG_TLV_TYPE_HCMD: host command TLV

 * @IWL_DBG_TLV_TYPE_REGION: region TLV

 * @IWL_DBG_TLV_TYPE_TRIGGER: trigger TLV

 * @IWL_DBG_TLV_TYPE_CONF_SET: conf set TLV

 * @IWL_DBG_TLV_TYPE_NUM: number of debug TLVs

/**

 * struct iwl_dbg_tlv_ver_data -  debug TLV version struct

 * @min_ver: min version supported

 * @max_ver: max version supported

/**

 * struct iwl_dbg_tlv_timer_node - timer node struct

 * @list: list of &struct iwl_dbg_tlv_timer_node

 * @timer: timer

 * @fwrt: &struct iwl_fw_runtime

 * @tlv: TLV attach to the timer node

	/* Host commands can not be sent in early time point since the FW

	 * is not ready

	/*

	 * The higher part of the ID in version 2 is irrelevant for

	 * us, so mask it out.

 for safe use of a string from FW, limit it to IWL_FW_INI_MAX_NAME */

	/*

	 * We try to allocate as many pages as we can, starting with

	 * the requested amount and going down until we can allocate

	 * something.  Because of DIV_ROUND_UP(), pages will never go

	 * down to 0 and stop the loop, so stop when pages reaches 1,

	 * which is too small anyway.

	/* the first fragment of DBGC1 is given to the FW via register

	 * or context info

	/* the first fragment of DBGC1 is given to the FW via register

	 * or context info

		/* make sure there is at least one dword of data for the

		 * interval value

 the first 11 dwords are configuration related */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2003-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2015-2016 Intel Deutschland GmbH

 microseconds */

		/*

		 * Register (up to 34 for name + 8 blank/q for MQ): 40 chars

		 * Colon + space: 2 characters

		 * 0X%08x: 10 characters

		 * New line: 1 character

		 * Total of 53 characters

 not supported yet */

 ensure the TOP FSM isn't still in previous reset */

	/*

	 * Set "initialization complete" bit to move adapter from

	 * D0U* --> D0A* (powered-up active) state.

	/*

	 * Wait for clock stabilization; once stabilized, access to

	 * device-internal resources is supported, e.g. iwl_write_prph()

	 * and accesses to uCode SRAM.

 ensure BISR shift has finished */

	/* if the interrupts were already disabled, there is no point in

	 * calling iwl_disable_interrupts

 Error detected by uCode */

 Clear causes register */

	/* enable interrupts only if there were already enabled before this

	 * function to avoid a case were the driver enable interrupts before

	 * proper configurations were made

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2007-2015, 2018-2020 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 extended range in FW SRAM */

 Should be a multiple of 4 */

 Alloc a max size buffer */

 Print wifi device registers */

 Print parent device registers next */

 Print root port AER registers */

 Reset entire device - do controller reset (results in SHRD_HW_RST) */

 default max_power is maximum */

 PCI registers */

	/*

	 * L0S states have been found to be unstable with our devices

	 * and in newer hardware they are not officially supported at

	 * all, so we must always set the L0S_DISABLED bit.

/*

 * Start up NIC's basic functionality after it has been reset

 * (e.g. after platform boot, or shutdown via iwl_pcie_apm_stop())

 * NOTE:  This does not load uCode nor start the embedded processor

	/*

	 * Use "set_bit" below rather than "write", to preserve any hardware

	 * bits already set by default after reset.

 Disable L0S exit timer (platform NMI Work/Around) */

	/*

	 * Disable L0s without affecting L1;

	 *  don't wait for ICH L0s (ICH bug W/A)

 Set FH wait threshold to maximum (HW error during stress W/A) */

	/*

	 * Enable HAP INTA (interrupt from management bus) to

	 * wake device's PCI Express link L1a -> L0s

 Configure analog phase-lock-loop before activating to D0A */

		/*

		 * This is a bit of an abuse - This is needed for 7260 / 3160

		 * only check host_interrupt_operation_mode even if this is

		 * not related to host_interrupt_operation_mode.

		 *

		 * Enable the oscillator to count wake up time for L1 exit. This

		 * consumes slightly more power (100uA) - but allows to be sure

		 * that we wake up from L1 on time.

		 *

		 * This looks weird: read twice the same register, discard the

		 * value, set a bit, and yet again, read that same register

		 * just to discard the value. But that's the way the hardware

		 * seems to like it.

	/*

	 * Enable DMA clock and wait for it to stabilize.

	 *

	 * Write to "CLK_EN_REG"; "1" bits enable clocks, while "0"

	 * bits do not disable clocks.  This preserves any hardware

	 * bits already set by default in "CLK_CTRL_REG" after reset.

 Disable L1-Active */

 Clear the interrupt in APMG if the NIC is in RFKILL */

/*

 * Enable LP XTAL to avoid HW bug where device may consume much power if

 * FW is not loaded after device reset. LP XTAL is disabled by default

 * after device HW reset. Do it only if XTAL is fed by internal source.

 * Configure device's "persistence" mode to avoid resetting XTAL again when

 * SHRD_HW_RST occurs in S3.

 Force XTAL ON */

 Release XTAL ON request */

	/*

	 * Clear "disable persistence" to avoid LP XTAL resetting when

	 * SHRD_HW_RST is applied in S3.

	/*

	 * Force APMG XTAL to be active to prevent its disabling by HW

	 * caused by APMG idle state.

 Enable LP XTAL by indirect access through CSR */

 Clear delay line clock power up */

	/*

	 * Enable persistence mode to avoid LP XTAL resetting when

	 * SHRD_HW_RST is applied in S3.

	/*

	 * Clear "initialization complete" bit to move adapter from

	 * D0A* (powered-up Active) --> D0U* (Uninitialized) state.

 Activates XTAL resources monitor */

 Release XTAL ON request */

 Release APMG XTAL */

 stop device's busmaster DMA activity */

 inform ME that we are leaving */

 Stop device's DMA activity */

	/*

	 * Clear "initialization complete" bit to move adapter from

	 * D0A* (powered-up Active) --> D0U* (Uninitialized) state.

 nic_init */

 Allocate the RX queue, or reset if it is already allocated */

 Allocate or reset and init all Tx and Command queues */

 enable shadow regs in HW */

 Note: returns poll_bit return value, which is >= 0 if success */

 See if we got it */

 Note: returns standard 0/-ERROR code */

 If the card is ready, exit 0 */

 If HW is not ready, prepare the conditions to check again */

/*

 * ucode

		/*

		 * CPU1_CPU2_SEPARATOR_SECTION delimiter - separate between

		 * CPU1 to CPU2.

		 * PAGING_SEPARATOR_SECTION delimiter - separate between

		 * CPU2 non paged to CPU2 paging sec.

 Notify ucode of loaded section number and status */

		/*

		 * CPU1_CPU2_SEPARATOR_SECTION delimiter - separate between

		 * CPU1 to CPU2.

		 * PAGING_SEPARATOR_SECTION delimiter - separate between

		 * CPU2 non paged to CPU2 paging sec.

 set sram monitor by enabling bit 7 */

 load to FW the binary non secured sections of CPU1 */

 set CPU2 header address */

 load to FW the binary sections of CPU2 */

 release CPU reset */

	/*

	 * Set default value. On resume reading the values that were

	 * zeored can provide debug data on the resume flow.

	 * This is for debugging only and has no functional impact.

 configure the ucode to be ready to get the secured image */

 release CPU reset */

 load to FW the binary Secured sections of CPU1 */

 load to FW the binary sections of CPU2 */

	/*

	 * Access all non RX causes and map them to the default irq.

	 * In case we are missing at least one interrupt vector,

	 * the first interrupt vector will serve non-RX and FBQ causes.

	/*

	 * The first RX queue - fallback queue, which is designated for

	 * management frame, command responses etc, is always mapped to the

	 * first interrupt vector. The other RX queues are mapped to

	 * the other (N - 2) interrupt vectors.

	/*

	 * The IVAR table needs to be configured again after reset,

	 * but if the device is disabled, we can't write to

	 * prph.

	/*

	 * Each cause from the causes list above and the RX causes is

	 * represented as a byte in the IVAR table. The first nibble

	 * represents the bound interrupt vector of the cause, the second

	 * represents no auto clear for this cause. This will be set if its

	 * interrupt vector is bound to serve other causes.

 tell the device to stop sending interrupts */

 device going down, Stop using ICT table */

	/*

	 * If a HW restart happens during firmware loading,

	 * then the firmware loading might call this function

	 * and later it might be called again due to the

	 * restart. So don't process again if the device is

	 * already dead.

 Power-down device's busmaster DMA clocks */

 Make sure (redundant) we've released our request to stay awake */

 Stop the device, and put it in low power state */

	/*

	 * Upon stop, the IVAR table gets erased, so msi-x won't

	 * work. This causes a bug in RF-KILL flows, since the interrupt

	 * that enables radio won't fire on the correct irq, and the

	 * driver won't be able to handle the interrupt.

	 * Configure the IVAR table again after reset.

	/*

	 * Upon stop, the APM issues an interrupt if HW RF kill is set.

	 * This is a bug in certain verions of the hardware.

	 * Certain devices also keep sending HW RF kill interrupt all

	 * the time, unless the interrupt is ACKed even if the interrupt

	 * should be masked. Re-ACK all the interrupts here.

 clear all status bits */

	/*

	 * Even if we stop the HW, we still want the RF kill

	 * interrupt

 re-take ownership to prevent other users from stealing the device */

 This may fail if AMT took ownership of the device */

	/*

	 * We enabled the RF-Kill interrupt and the handler may very

	 * well be running. Disable the interrupts to make sure no other

	 * interrupt can be fired.

 Make sure it finished running */

 If platform's RF_KILL switch is NOT set to KILL */

 Someone called stop_device, don't try to start_fw */

 make sure rfkill handshake bits are cleared */

 clear (again), then enable host interrupts */

	/*

	 * Now, we load the firmware and don't want to be interrupted, even

	 * by the RF-Kill interrupt (hence mask all the interrupt besides the

	 * FH_TX interrupt which is needed to load the firmware). If the

	 * RF-Kill switch is toggled, we will find out after having loaded

	 * the firmware and return the proper value to the caller.

 really make sure rfkill handshake bits are cleared */

 Load the given image to the HW */

 re-check RF-Kill state since we may have missed the interrupt */

	/*

	 * Check again since the RF kill state may have changed while

	 * all the interrupts were disabled, in this case we couldn't

	 * receive the RF kill interrupt and update the state in the

	 * op_mode.

	 * Don't call the op_mode if the rkfill state hasn't changed.

	 * This allows the op_mode to call stop_device from the rfkill

	 * notification without endless recursion. Under very rare

	 * circumstances, we might have a small recursion if the rfkill

	 * state changed exactly now while we were called from stop_device.

	 * This is very unlikely but can happen and is supported.

	/*

	 * in testing mode, the host stays awake and the

	 * hardware won't be reset (not even partially)

		/*

		 * reset TX queues -- some of their registers reset during S3

		 * so if we don't reset everything here the D3 image would try

		 * to execute some invalid memory upon resume

 Enable persistence mode to avoid reset */

		/*

		 * Invalidate it toward resume.

	/*

	 * Reconfigure IVAR table in case of MSIX or reset ict table in

	 * MSI mode since HW reset erased it.

	 * Also enables interrupts - none will happen as

	 * the device doesn't know we're waking it up, only when

	 * the opmode actually tells it after this call.

		/*

		 * Invalidate it toward next suspend.

	/*

	 * In case the OS provides fewer interrupts than requested, different

	 * causes will share the same interrupt vector as follows:

	 * One interrupt less: non rx causes shared with FBQ.

	 * Two interrupts less: non rx causes shared with FBQ and RSS.

	 * More than two interrupts: we will use fewer RSS queues.

 enable rfkill interrupt: hw bug w/a */

		/*

		 * Get the cpu prior to the place to search

		 * (i.e. return will be > i - 1).

 From now on, the op_mode will be kept updated about RF kill state */

 Set is_down to false here so that...*/

 ...rfkill can call stop_device and set it false if needed */

 disable interrupts - don't enable HW RF kill interrupt */

 free all first - we might be reconfigured for a different size */

	/* Initialize NAPI here - it should be before registering to mac80211

	 * in the opmode but after the HW struct is allocated.

	 * As this function may be called again in some corner cases don't

	 * do anything if NAPI was already initialized.

/*

 * This version doesn't disable BHs but rather assumes they're

 * already disabled.

 this bit wakes up the NIC */

	/*

	 * These bits say the device is running, and should keep running for

	 * at least a short while (at least as long as MAC_ACCESS_REQ stays 1),

	 * but they do not indicate that embedded SRAM is restored yet;

	 * HW with volatile SRAM must save/restore contents to/from

	 * host DRAM when sleeping/waking for power-saving.

	 * Each direction takes approximately 1/4 millisecond; with this

	 * overhead, it's a good idea to grab and hold MAC_ACCESS_REQUEST if a

	 * series of register accesses are expected (e.g. reading Event Log),

	 * to keep device from sleeping.

	 *

	 * CSR_UCODE_DRV_GP1 register bit MAC_SLEEP == 0 indicates that

	 * SRAM is okay/restored.  We don't check that here because this call

	 * is just for hardware register access; but GP1 MAC_SLEEP

	 * check is a good idea before accessing the SRAM of HW with

	 * volatile SRAM (e.g. reading Event Log).

	 *

	 * 5000 series and later (including 1000 series) have non-volatile SRAM,

	 * and do not save/restore SRAM when power cycling.

			/*

			 * get a module reference to avoid doing this

			 * while unloading anyway and to avoid

			 * scheduling a work with code that's being

			 * removed.

			/*

			 * we don't need to clear this flag, because

			 * the trans will be freed and reallocated.

	/*

	 * Fool sparse by faking we release the lock - sparse will

	 * track nic_access anyway.

 keep BHs disabled until iwl_trans_pcie_release_nic_access */

	/*

	 * Fool sparse by faking we acquiring the lock - sparse will

	 * track nic_access anyway.

	/*

	 * Above we read the CSR_GP_CNTRL register, which will flush

	 * any previous writes, but we need the write that clears the

	 * MAC_ACCESS_REQ bit to be performed before any other writes

	 * scheduled on different CPUs (after we drop reg_lock).

 limit the time we spin here under lock to 1/2s */

 Make sure the NIC is still alive in the bus */

		/*

		 * If write pointer moved during the wait, warn only

		 * if the TX came from op mode. In case TX came from

		 * trans layer (overflow TX) don't warn.

 waiting for all the tx frames complete might take a while */

 create and remove of files */

 file operation */

 24 items * 64 char per item */

 write_ptr position in bytes rather then DW */

 Create the debugfs files and directories */

CONFIG_IWLWIFI_DEBUGFS */

 Dump RBs is supported only for pre-9000 devices (1 queue) */

 convert wrtPtr to DWs, to align with all HWs */

			/*

			 * Update pointers to reflect actual values after

			 * shifting

 Didn't match anything - output no monitor data */

 Make "end" point to the actual end */

 transport dump header */

 host commands */

 FW monitor */

 CSR registers */

 FH registers */

 Dump RBs is supported only for pre-9000 devices (1 queue) */

 RBs */

 Paged memory for gen2 HW */

 Paged memory for gen2 HW */

		/*

		 * W/A - seems to solve weird behavior. We need to remove this

		 * if we don't want to stay in L1 all the time. This wastes a

		 * lot of power.

 both attempts failed: */

	/* We disable the RETRY_TIMEOUT register (0x41) to keep

	/*

	 * In the 8000 HW family the format of the 4 bytes of CSR_HW_REV have

	 * changed, and now the revision step also includes bit 0-1 (no more

	 * "dash" value). To keep hw_rev backwards compatible - we'll store it

	 * in the old format.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2018-2021 Intel Corporation

 if firmware supports the ext size, tell it */

 if firmware supports the ext size, tell it */

 Allocate prph scratch */

 initialize RX default queue */

 allocate ucode sections in dram and set addresses */

	/* Allocate prph information

	 * currently we don't assign to the prph info anything, but it would get

	 * assigned later

	 *

	 * We also use the second half of this page to give the device some

	 * dummy TR/CR tail pointers - which shouldn't be necessary as we don't

	 * use this, but the hardware still reads/writes there and we can't let

	 * it go do that with a NULL pointer.

 Allocate context info */

 Allocate IML */

 kick FW self load */

 ctxt_info_gen3 and prph_scratch are still needed for PNVM load */

 this is needed for the entire lifetime */

 only allocate the DRAM if not allocated yet */

 only allocate the DRAM if not allocated yet */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2003-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

/******************************************************************************

 *

 * RX path functions

 *

/*

 * Rx theory of operation

 *

 * Driver allocates a circular buffer of Receive Buffer Descriptors (RBDs),

 * each of which point to Receive Buffers to be filled by the NIC.  These get

 * used not only for Rx frames, but for any command response or notification

 * from the NIC.  The driver and NIC manage the Rx buffers by means

 * of indexes into the circular buffer.

 *

 * Rx Queue Indexes

 * The host/firmware share two index registers for managing the Rx buffers.

 *

 * The READ index maps to the first position that the firmware may be writing

 * to -- the driver can read up to (but not including) this position and get

 * good data.

 * The READ index is managed by the firmware once the card is enabled.

 *

 * The WRITE index maps to the last position the driver has read from -- the

 * position preceding WRITE is the last slot the firmware can place a packet.

 *

 * The queue is empty (no good data) if WRITE = READ - 1, and is full if

 * WRITE = READ.

 *

 * During initialization, the host sets up the READ queue position to the first

 * INDEX position, and WRITE to the last (READ - 1 wrapped)

 *

 * When the firmware places a packet in a buffer, it will advance the READ index

 * and fire the RX interrupt.  The driver can then query the READ index and

 * process as many packets as possible, moving the WRITE index forward as it

 * resets the Rx queue buffers with new memory.

 *

 * The management in the driver is as follows:

 * + A list of pre-allocated RBDs is stored in iwl->rxq->rx_free.

 *   When the interrupt handler is called, the request is processed.

 *   The page is either stolen - transferred to the upper layer

 *   or reused - added immediately to the iwl->rxq->rx_free list.

 * + When the page is stolen - the driver updates the matching queue's used

 *   count, detaches the RBD and transfers it to the queue used list.

 *   When there are two used RBDs - they are transferred to the allocator empty

 *   list. Work is then scheduled for the allocator to start allocating

 *   eight buffers.

 *   When there are another 6 used RBDs - they are transferred to the allocator

 *   empty list and the driver tries to claim the pre-allocated buffers and

 *   add them to iwl->rxq->rx_free. If it fails - it continues to claim them

 *   until ready.

 *   When there are 8+ buffers in the free list - either from allocation or from

 *   8 reused unstolen pages - restock is called to update the FW and indexes.

 * + In order to make sure the allocator always has RBDs to use for allocation

 *   the allocator has initial pool in the size of num_queues*(8-2) - the

 *   maximum missing RBDs per allocation request (request posted with 2

 *    empty RBDs, there is no guarantee when the other 6 RBDs are supplied).

 *   The queues supplies the recycle of the rest of the RBDs.

 * + A received packet is processed and handed to the kernel network stack,

 *   detached from the iwl->rxq.  The driver 'processed' index is updated.

 * + If there are no allocated buffers in iwl->rxq->rx_free,

 *   the READ INDEX is not incremented and iwl->status(RX_STALLED) is set.

 *   If there were enough free buffers and RX_STALLED is set it is cleared.

 *

 *

 * Driver sequence:

 *

 * iwl_rxq_alloc()            Allocates rx_free

 * iwl_pcie_rx_replenish()    Replenishes rx_free list from rx_used, and calls

 *                            iwl_pcie_rxq_restock.

 *                            Used only during initialization.

 * iwl_pcie_rxq_restock()     Moves available buffers from rx_free into Rx

 *                            queue, updates firmware pointers, and updates

 *                            the WRITE index.

 * iwl_pcie_rx_allocator()     Background work for allocating pages.

 *

 * -- enable interrupts --

 * ISR - iwl_rx()             Detach iwl_rx_mem_buffers from pool up to the

 *                            READ INDEX, detaching the SKB from the pool.

 *                            Moves the packet buffer from queue to rx_used.

 *                            Posts and claims requests to the allocator.

 *                            Calls iwl_pcie_rxq_restock to refill any empty

 *                            slots.

 *

 * RBD life-cycle:

 *

 * Init:

 * rxq.pool -> rxq.rx_used -> rxq.rx_free -> rxq.queue

 *

 * Regular Receive interrupt:

 * Page Stolen:

 * rxq.queue -> rxq.rx_used -> allocator.rbd_empty ->

 * allocator.rbd_allocated -> rxq.rx_free -> rxq.queue

 * Page not Stolen:

 * rxq.queue -> rxq.rx_free -> rxq.queue

 * ...

 *

/*

 * iwl_rxq_space - Return number of free slots available in queue.

 Make sure rx queue size is a power of 2 */

	/*

	 * There can be up to (RX_QUEUE_SIZE - 1) free slots, to avoid ambiguity

	 * between empty and completely full queues.

	 * The following is equivalent to modulo by RX_QUEUE_SIZE and is well

	 * defined for negative dividends.

/*

 * iwl_dma_addr2rbd_ptr - convert a DMA address to a uCode read buffer ptr

/*

 * iwl_pcie_rx_stop - stops the Rx DMA

 TODO: remove this once fw does it */

/*

 * iwl_pcie_rxq_inc_wr_ptr - Update the write pointer for the RX queue

	/*

	 * explicitly wake up the NIC if:

	 * 1. shadow registers aren't enabled

	 * 2. there is a chance that the NIC is asleep

/*

 * iwl_pcie_rxmq_restock - restock implementation for multi-queue rx

	/*

	 * If the device isn't enabled - no need to try to add buffers...

	 * This can happen when we stop the device and still have an interrupt

	 * pending. We stop the APM before we sync the interrupts because we

	 * have to (see comment there). On the other hand, since the APM is

	 * stopped, we cannot access the HW (in particular not prph).

	 * So don't try to restock if the APM has been already stopped.

 Get next free Rx buffer, remove from free list */

 some low bits are expected to be unset (depending on hw) */

 Point to Rx buffer via next RBD in circular buffer */

	/*

	 * If we've added more space for the firmware to place data, tell it.

	 * Increment device's write pointer in multiples of 8.

/*

 * iwl_pcie_rxsq_restock - restock implementation for single queue rx

	/*

	 * If the device isn't enabled - not need to try to add buffers...

	 * This can happen when we stop the device and still have an interrupt

	 * pending. We stop the APM before we sync the interrupts because we

	 * have to (see comment there). On the other hand, since the APM is

	 * stopped, we cannot access the HW (in particular not prph).

	 * So don't try to restock if the APM has been already stopped.

 The overwritten rxb must be a used one */

 Get next free Rx buffer, remove from free list */

 Point to Rx buffer via next RBD in circular buffer */

	/* If we've added more space for the firmware to place data, tell it.

/*

 * iwl_pcie_rxq_restock - refill RX queue from pre-allocated pool

 *

 * If there are slots in the RX queue that need to be restocked,

 * and we have free pre-allocated buffers, fill the ranks as much

 * as we can, pulling from rx_free.

 *

 * This moves the 'write' index forward to catch up with 'processed', and

 * also updates the memory address in the firmware to reference the new

 * target buffer.

/*

 * iwl_pcie_rx_alloc_page - allocates and returns a page.

 *

 recheck */

 Alloc a new receive buffer */

		/*

		 * Issue an error if we don't have enough pre-allocated

		  * buffers.

/*

 * iwl_pcie_rxq_alloc_rbs - allocate a page for each used RBD

 *

 * A used RBD is an Rx buffer that has been given to the stack. To use it again

 * a page must be allocated and the RBD must point to the page. This function

 * doesn't change the HW pointer but handles the list of pages that is used by

 * iwl_pcie_rxq_restock. The latter function will update the HW to use the newly

 * allocated buffers.

 Get physical address of the RB */

/*

 * iwl_pcie_rx_allocator - Allocates pages in the background for RX queues

 *

 * Allocates for each received request 8 pages

 * Called as a scheduled work item.

 If we were scheduled - there is at least one request */

 swap out the rba->rbd_empty to a local list */

 Do not post a warning if there are only a few requests */

			/* List should never be empty - each reused RBD is

			 * returned to the list, and initial pool covers any

			 * possible gap between the time the page is allocated

			 * to the time the RBD is added.

 Get the first rxb from the rbd list */

 Alloc a new receive buffer */

 Get physical address of the RB */

 move the allocated entry to the out list */

 add the allocated rbds to the allocator allocated list */

 get more empty RBDs for current pending requests */

 return unused rbds to the allocator empty list */

/*

 * iwl_pcie_rx_allocator_get - returns the pre-allocated pages

.*

.* Called by queue when the queue posted allocation request and

 * has freed 8 RBDs in order to restock itself.

 * This function directly moves the allocated RBs to the queue's ownership

 * and updates the relevant counters.

	/*

	 * atomic_dec_if_positive returns req_ready - 1 for any scenario.

	 * If req_ready is 0 atomic_dec_if_positive will return -1 and this

	 * function will return early, as there are no ready requests.

	 * atomic_dec_if_positive will perofrm the *actual* decrement only if

	 * req_ready > 0, i.e. - there are ready requests and the function

	 * hands one request to the caller.

 Get next free Rx buffer, remove it from free list */

	/*

	 * Allocate the circular buffer of Read Buffer Descriptors

	 * (RBDs)

	/*

	 * Allocate the driver's pointer to receive buffer status.

	 * Allocate for all queues continuously (HW requirement).

 256 RBDs */

 Stop Rx DMA */

 reset and flush pointers */

 Reset driver's Rx queue write index */

 Tell device where to find RBD circular buffer in DRAM */

 Tell device where in DRAM to update its Rx status */

	/* Enable Rx DMA

	 * FH_RCSR_CHNL0_RX_IGNORE_RXF_EMPTY is set because of HW bug in

	 *      the credit mechanism in 5000 HW RX FIFO

	 * Direct rx interrupts to hosts

	 * Rx buffer size 4 or 8k or 12k

	 * RB timeout 0x10

	 * 256 RBDs

 Set interrupt coalescing timer to default (2048 usecs) */

 W/A for interrupt coalescing bug in 7260 and 3160 */

 Stop Rx DMA */

 disable free amd used rx queue operation */

 Tell device where to find RBD free table in DRAM */

 Tell device where to find RBD used table in DRAM */

 Tell device where in DRAM to update its Rx status */

 Reset device indice tables */

	/*

	 * Enable Rx DMA

	 * Rx buffer size 4 or 8k or 12k

	 * Min RB size 4 or 8

	 * Drop frames that exceed RB size

	 * 512 RBDs

	/*

	 * Activate DMA snooping.

	 * Set RX DMA chunk size to 64B for IOSF and 128B for PCIe

	 * Default queue is 0

 Enable the relevant rx queues */

 Set interrupt coalescing timer to default (2048 usecs) */

 FIRST_RSS is shared with line 0 */

 free all first - we overwrite everything here */

		/*

		 * Set read write pointer to reflect that we have processed

		 * and used all buffers, but have not restocked the Rx queue

		 * with fresh buffers

 move the pool to the default queue and allocator ownerships */

 Set interrupt coalescing timer to default (2048 usecs) */

	/*

	 * We don't configure the RFH.

	 * Restock will be done at alive, after firmware configured the RFH.

	/*

	 * if rxq is NULL, it means that nothing has been allocated,

	 * exit now

/*

 * iwl_pcie_rx_reuse_rbd - Recycle used RBDs

 *

 * Called when a RBD can be reused. The RBD is transferred to the allocator.

 * When there are 2 empty RBDs - a request for allocation is posted

	/* Move the RBD to the used list, will be moved to allocator in batches

 Count the allocator owned RBDs */

	/* If we have RX_POST_REQ_ALLOC new released rx buffers -

	 * issue a request for allocator. Modulo RX_CLAIM_REQ_ALLOC is

	 * used for the case we failed to claim RX_CLAIM_REQ_ALLOC,

	 * after but we still need to post another request.

		/* Move the 2 RBDs to the allocator ownership.

 account for status word */

 check that what the device tells us made sense */

		/* Reclaim a command buffer only if this packet is a response

		 *   to a (driver-originated) command.

		 * If the packet (e.g. Rx frame) originated from uCode,

		 *   there is no command buffer to reclaim.

		 * Ucode should set SEQ_RX_FRAME bit if ucode-originated,

		/*

		 * After here, we should always check rxcb._page_stolen,

		 * if it is true then one of the handlers took the page.

			/* Invoke any callbacks, transfer the buffer to caller,

			 * and fire off the (possibly) blocking

			 * iwl_trans_send_cmd()

 page was stolen from us -- free our reference */

	/* Reuse the page if possible. For notification packets and

	 * SKBs that fail to Rx correctly, add them back into the

			/*

			 * free the page(s) as well to not break

			 * the invariant that the items on the used

			 * list have no page(s)

 12-bit VID */

/*

 * iwl_pcie_rx_handle - Main entry function for receiving responses from fw

	/* uCode's read index (stored in shared DRAM) indicates the last Rx

 W/A 9000 device step A0 wrap-around bug */

 Rx interrupt, but nothing sent from uCode */

 number of RBDs still waiting for page allocation */

			/*

			 * We can only get a multi-RB in the following cases:

			 *  - firmware issue, sending a too big notification

			 *  - sniffer mode with a large A-MSDU

			 *  - large MTU frames (>2k)

			 * since the multi-RB functionality is limited to newer

			 * hardware that cannot put multiple entries into a

			 * single RB.

			 *

			 * Right now, the higher layers aren't set up to deal

			 * with that, so discard all of these.

		/*

		 * If we have RX_CLAIM_REQ_ALLOC released rx buffers -

		 * try to claim the pre-allocated buffers from the allocator.

		 * If not ready - will try to reclaim next time.

		 * There is no need to reschedule work - allocator exits only

		 * on success

 Add the remaining empty RBDs for allocator use */

 Backtrack one entry */

	/*

	 * handle a case where in emergency there are some unallocated RBDs.

	 * those RBDs are in the used list, but are not tracked by the queue's

	 * used_count which counts allocator owned RBDs.

	 * unallocated emergency RBDs must be allocated on exit, otherwise

	 * when called again the function may not be in emergency mode and

	 * they will be handed to the allocator with no tracking in the RBD

	 * allocator counters, which will lead to them never being claimed back

	 * by the queue.

	 * by allocating them here, they are now in the queue free list, and

	 * will be restocked by the next call of iwl_pcie_rxq_restock.

/*

 * iwl_pcie_rx_msix_handle - Main entry function for receiving responses from fw

 * This interrupt handler should be used with RSS queue only.

/*

 * iwl_pcie_irq_handle_error - called for HW or SW error interrupt from card

 W/A for WiFi/WiMAX coex and WiMAX own the RF */

	/* The STATUS_FW_ERROR bit is set in this function. This must happen

 Discover which interrupts are active/pending */

 the thread will service interrupts and re-enable them */

 a device (PCI-E) page is 4096 bytes long */

/* interrupt handler using ict table, with this interrupt driver will

 * stop using INTA register to get device's interrupt, reading this register

 * is expensive, device will write interrupts in ICT dram table, increment

 * index then will fire interrupt to driver, driver will OR all ICT table

 * entries from current index up to table entry with 0 value. the result is

 * the interrupt we need to service, driver will set the entries back to 0 and

 * set index.

	/* Ignore interrupt if there's nothing in NIC to service.

	 * This may be due to IRQ shared with another device,

	/*

	 * Collect all entries up to the first 0, starting from ict_index;

	 * note we already read at ict_index.

 We should not get this value, just ignore it. */

	/*

	 * this is a w/a for a h/w bug. the h/w bug may cause the Rx bit

	 * (bit 15 before shifting it to 31) to clear when using interrupt

	 * coalescing. fortunately, bits 18 and 19 stay set when this happens

	 * so we use them to decide on the real state of the Rx bit.

	 * In order words, bit 15 is set if bit 18 or bit 19 are set.

	/* dram interrupt table not set yet,

	 * use legacy interrupt.

	/*

	 * Ignore interrupt if there's nothing in NIC to service.

	 * This may be due to IRQ shared with another device,

	 * or due to sporadic interrupts thrown from our NIC.

		/*

		 * Re-enable interrupts here since we don't

		 * have anything to service

		/*

		 * Hardware disappeared. It might have

		 * already raised an interrupt.

	/* Ack/clear/reset pending uCode interrupts.

	 * Note:  Some bits in CSR_INT are "OR" of bits in CSR_FH_INT_STATUS,

	/* There is a hardware bug in the interrupt mask function that some

	 * interrupts (i.e. CSR_INT_BIT_SCD) can still be generated even if

	 * they are disabled in the CSR_INT_MASK register. Furthermore the

	 * ICT interrupt handling mechanism has another bug that might cause

	 * these unmasked interrupts fail to be detected. We workaround the

	 * hardware bugs here by ACKing all the possible interrupts so that

	 * interrupt coalescing can still be achieved.

 Now service all interrupt bits discovered above. */

 Tell the device to stop sending interrupts */

 NIC fires this, but we don't use it, redundant with WAKEUP */

 Alive notification via Rx interrupt will do the real work */

			/*

			 * We can restock, since firmware configured

			 * the RFH

 Safely ignore these bits for debug checks below */

 HW RF KILL switch toggled */

 Chip got too hot and stopped itself */

 Error detected by uCode */

 uCode wakes up after power-down sleep */

	/* All uCode command responses, including Tx command responses,

	 * Rx "responses" (frame-received notification), and other

		/* Sending RX interrupt require many steps to be done in the

		 * the device:

		 * 1- write interrupt to current index in ICT table.

		 * 2- dma RX frame.

		 * 3- update RX shared data to indicate last write index.

		 * 4- send interrupt.

		 * This could lead to RX race, driver could receive RX interrupt

		 * but the shared data changes does not reflect this;

		 * periodic interrupt will detect any dangling Rx activity.

 Disable periodic interrupt; we use it as just a one-shot. */

		/*

		 * Enable periodic interrupt in 8 msec only if we received

		 * real RX interrupt (instead of just periodic int), to catch

		 * any dangling Rx interrupt.  If it was just the periodic

		 * interrupt, there was no dangling Rx activity, and no need

		 * to extend the periodic interrupt; one-shot is enough.

 This "Tx" DMA channel is used only for loading uCode */

 Wake up uCode load routine, now that load is complete */

 only Re-enable all interrupt if disabled by irq */

 we are loading the firmware, enable FH_TX interrupt only */

 Re-enable RF_KILL if it occurred */

 Re-enable the ALIVE / Rx interrupt if it occurred */

/******************************************************************************

 *

 * ICT functions

 *

 Free dram table */

/*

 * allocate dram shared table, it is an aligned memory

 * block of ICT_SIZE.

 * also reset all data related to ICT table interrupt.

 just an API sanity check ... it is guaranteed to be aligned */

/* Device is going up inform it about using ICT interrupt table,

 * also we need to tell the driver to start using ICT interrupt.

 Device is going down disable ict interrupt usage */

	/* Disable (but don't clear!) interrupts here to avoid

	 * back-to-back ISRs and sporadic interrupts from our NIC.

	 * If we have something to service, the tasklet will re-enable ints.

	 * If we *don't* have something, we'll re-enable before leaving here.

	/*

	 * Clear causes registers to avoid being handling the same cause.

 This "Tx" DMA channel is used only for loading uCode */

		/*

		 * Wake up uCode load routine,

		 * now that load is complete

 Error detected by uCode */

 during FW reset flow report errors from there */

 After checking FH register check HW register */

 Alive notification via Rx interrupt will do the real work */

 We can restock, since firmware configured the RFH */

 uCode wakes up after power-down sleep */

 Chip got too hot and stopped itself */

 HW RF KILL switch toggled */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2017 Intel Deutschland GmbH

 * Copyright (C) 2018-2021 Intel Corporation

/*

 * Start up NIC's basic functionality after it has been reset

 * (e.g. after platform boot, or shutdown via iwl_pcie_apm_stop())

 * NOTE:  This does not load uCode nor start the embedded processor

	/*

	 * Use "set_bit" below rather than "write", to preserve any hardware

	 * bits already set by default after reset.

	/*

	 * Disable L0s without affecting L1;

	 * don't wait for ICH L0s (ICH bug W/A)

 Set FH wait threshold to maximum (HW error during stress W/A) */

	/*

	 * Enable HAP INTA (interrupt from management bus) to

	 * wake device's PCI Express link L1a -> L0s

 inform ME that we are leaving */

 Stop device's DMA activity */

	/*

	 * Clear "initialization complete" bit to move adapter from

	 * D0A* (powered-up Active) --> D0U* (Uninitialized) state.

 wait 200ms */

 tell the device to stop sending interrupts */

 device going down, Stop using ICT table */

	/*

	 * If a HW restart happens during firmware loading,

	 * then the firmware loading might call this function

	 * and later it might be called again due to the

	 * restart. So don't process again if the device is

	 * already dead.

 Stop the device, and put it in low power state */

	/*

	 * Upon stop, the IVAR table gets erased, so msi-x won't

	 * work. This causes a bug in RF-KILL flows, since the interrupt

	 * that enables radio won't fire on the correct irq, and the

	 * driver won't be able to handle the interrupt.

	 * Configure the IVAR table again after reset.

	/*

	 * Upon stop, the APM issues an interrupt if HW RF kill is set.

	 * This is a bug in certain verions of the hardware.

	 * Certain devices also keep sending HW RF kill interrupt all

	 * the time, unless the interrupt is ACKed even if the interrupt

	 * should be masked. Re-ACK all the interrupts here.

 clear all status bits */

	/*

	 * Even if we stop the HW, we still want the RF kill

	 * interrupt

 re-take ownership to prevent other users from stealing the device */

 TODO: most of the logic can be removed in A0 - but not in Z0 */

 Allocate the RX queue, or reset if it is already allocated */

 Allocate or reset and init all Tx and Command queues */

 enable shadow regs in HW */

	/*

	 * also add a \n for debugfs - need to do it after printing

	 * since our IWL_INFO machinery wants to see a static \n at

	 * the end of the string

 make sure all queue are not stopped/used */

	/* now that we got alive we can free the fw image & the context info.

	 * paging memory cannot be freed included since FW will still use it

	/*

	 * Re-enable all the interrupts, including the RF-Kill one, now that

	 * the firmware is alive.

	/*

	 * To workaround hardware latency issues during the boot process,

	 * initialize the LTR to ~250 usec (see ltr_val above).

	 * The firmware initializes this again later (to a smaller value).

 This may fail if AMT took ownership of the device */

	/*

	 * We enabled the RF-Kill interrupt and the handler may very

	 * well be running. Disable the interrupts to make sure no other

	 * interrupt can be fired.

 Make sure it finished running */

 If platform's RF_KILL switch is NOT set to KILL */

 Someone called stop_device, don't try to start_fw */

 make sure rfkill handshake bits are cleared */

 clear (again), then enable host interrupts */

 re-check RF-Kill state since we may have missed the interrupt */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2005-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 Hardware specific file defines the PCI IDs table for that hardware module */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 5300 Series WiFi */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 5350 Series WiFi/WiMax */

 Mini Card */

 Mini Card */

 Mini Card */

 5150 Series Wifi/WiMax */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 Mini Card */

 Half Mini Card */

 6x00 Series */

 6x05 Series */

 low 5GHz active */

 high 5GHz active */

 6x30 Series */

 6x50 WiFi/WiMax Series */

 6150 WiFi/WiMax Series */

 1000 Series WiFi */

 100 Series WiFi */

 130 Series WiFi */

 2x00 Series */

 2x30 Series */

 6x35 Series */

 105 Series */

 135 Series */

 CONFIG_IWLDVM */

 7260 Series */

 3160 Series */

 3165 Series */

 3168 Series */

 7265 Series */

 8000 Series */

 9000 Series */

 Qu devices */

 So devices */

 Ma devices */

 Bz devices */

 CONFIG_IWLMVM */

 9000 */

 AX200 */

 Qu with Hr */

 So with HR */

 So with JF */

 SnJ with HR */

 Qu with Jf */

 Qu B step */

 Qu C step */

 QuZ */

 QnJ */

 Qu with Hr */

 Qu B step */

 Qu C step */

 QuZ */

 QnJ with Hr */

 SnJ with Jf */

 SnJ with Hr */

 Ma */

 So with Hr */

 So-F with Hr */

 So-F with Gf */

 Bz */

 SoF with JF2 */

 SoF with JF */

 SoF with JF2 */

 SoF with JF */

 So with GF */

 So with JF2 */

 So with JF */

 CONFIG_IWLMVM */

/*

 * In case that there is no OTP on the NIC, get the rf id and cdb info

 * from the prph registers.

 Qu/Pu families have other addresses */

 Enable access to peripheral registers */

 Read crf info */

 Read cdb info (also contains the jacket info if needed in the future */

 Map between crf id to rf id */

 Set CDB capabilities */

 PCI registers */

	/*

	 * This is needed for backwards compatibility with the old

	 * tables, so we don't need to change all the config structs

	 * at the same time.  The cfg is used to compare with the old

	 * full cfg structs.

 make sure trans is the first element in iwl_cfg */

	/*

	 * Let's try to grab NIC access early here. Sometimes, NICs may

	 * fail to initialize, and if that happens it's better if we see

	 * issues early on (and can reprobe, per the logic inside), than

	 * first trying to load the firmware etc. and potentially only

	 * detecting any problems when the first interface is brought up.

 all good */

	/*

	 * The RF_ID is set to zero in blank OTP so read version to

	 * extract the RF_ID.

	 * This is relevant only for family 9000 and up.

	/*

	 * Workaround for problematic SnJ device: sometimes when

	 * certain RF modules are connected to SnJ, the device ID

	 * changes to QnJ's ID.  So we are using QnJ's trans_cfg until

	 * here.  But if we detect that the MAC type is actually SnJ,

	 * we should switch to it here to avoid problems later.

	/*

	 * special-case 7265D, it has the same PCI IDs.

	 *

	 * Note that because we already pass the cfg to the transport above,

	 * all the parameters that the transport uses must, until that is

	 * changed, be identical to the ones in the 7265D configuration.

	/*

	 * This is a hack to switch from Qu B0 to Qu C0.  We need to

	 * do this for all cfgs that use Qu B0, except for those using

	 * Jf, which have already been moved to the new table.  The

	 * rest must be removed once we convert Qu with Hr as well.

 same thing for QuZ... */

	/*

	 * If we didn't set the cfg yet, the PCI ID table entry should have

	 * been a full config - if yes, use it, otherwise fail.

 if we don't have a name yet, copy name from the old cfg */

 register transport layer debugfs here */

	/* Before you put code here, think about WoWLAN. You cannot check here

	 * whether WoWLAN is enabled or not, and your code will run even if

	 * WoWLAN is enabled - don't kill the NIC, someone may need it in Sx.

	/* Before you put code here, think about WoWLAN. You cannot check here

	 * whether WoWLAN is enabled or not, and your code will run even if

	 * WoWLAN is enabled - the NIC may be alive.

	/*

	 * We disable the RETRY_TIMEOUT register (0x41) to keep

	 * PCI Tx retries from interfering with C3 CPU state.

 In WOWLAN, let iwl_trans_pcie_d3_resume do the rest of the work */

 reconfigure the MSI-X mapping to get the correct IRQ for rfkill */

	/*

	 * Enable rfkill interrupt (in order to keep track of the rfkill

	 * status). Must be locked to avoid processing a possible rfkill

	 * interrupt while in iwl_pcie_check_hw_rf_kill().

 CONFIG_PM_SLEEP */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2017 Intel Deutschland GmbH

 * Copyright (C) 2018-2020 Intel Corporation

************** HOST COMMAND QUEUE FUNCTIONS   *****/

/*

 * iwl_pcie_gen2_enqueue_hcmd - enqueue a uCode command

 * @priv: device private data point

 * @cmd: a pointer to the ucode command structure

 *

 * The function returns < 0 values to indicate the operation

 * failed. On success, it returns the index (>= 0) of command in the

 * command queue.

 need at least IWL_FIRST_TB_SIZE copied */

			/*

			 * This is also a chunk that isn't copied

			 * to the static buffer so set had_nocopy.

 only allowed once */

 NOCOPY must not be followed by normal! */

	/*

	 * If any of the command structures end up being larger than the

	 * TFD_MAX_PAYLOAD_SIZE and they aren't dynamically allocated into

	 * separate TFDs, then we will need to increase the size of the buffers

 re-initialize to NULL */

 set up the header */

 and copy the data that needs to be copied */

 copy everything if not nocopy/dup */

		/*

		 * Otherwise we need at least IWL_FIRST_TB_SIZE copied

		 * in total (for bi-directional DMA), but copy up to what

		 * we can fit into the payload for debug dump purposes.

 However, treat copy_size the proper way, we need it below */

 start the TFD with the minimum copy bytes */

 map first command fragment, if any remains */

 map the remaining (adjusted) nocopy/dup fragments */

 start timer if queue currently empty */

 Increment and update queue's write index */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2003-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

/*************** DMA-QUEUE-GENERAL-FUNCTIONS  *****

 * DMA services

 *

 * Theory of operation

 *

 * A Tx or Rx queue resides in host DRAM, and is comprised of a circular buffer

 * of buffer descriptors, each of which points to one or more data buffers for

 * the device to read from or fill.  Driver and device exchange status of each

 * queue via "read" and "write" pointers.  Driver keeps minimum of 2 empty

 * entries in each circular buffer, to protect against confusing empty and full

 * queue states.

 *

 * The device reads or writes the data in the queues via the device's several

 * DMA/FIFO channels.  Each queue is mapped to a single DMA channel.

 *

 * For Tx queue, there are low mark and high mark limits. If, after queuing

 * the packet for Tx, free space become < low mark, Tx queue stopped. When

 * reclaiming packets (on 'tx done IRQ), if free space become > high mark,

 * Tx queue resumed.

 *

/*

 * iwl_pcie_txq_inc_wr_ptr - Send new write index to hardware

	/*

	 * explicitly wake up the NIC if:

	 * 1. shadow registers aren't enabled

	 * 2. NIC is woken up for CMD regardless of shadow outside this function

	 * 3. there is a chance that the NIC is asleep

		/*

		 * wake up nic if it's powered down ...

		 * uCode will wake up, and interrupt us again, so next

		 * time we'll skip this part.

	/*

	 * if not in power-save mode, uCode will never sleep when we're

	 * trying to tx (during RFKILL, we're not trying to tx).

 Each TFD can point to a maximum max_tbs Tx buffers */

/*

 * iwl_pcie_txq_unmap -  Unmap any remaining DMA mappings and free skb's

 just in case - this queue may have been stopped */

/*

 * iwl_pcie_txq_free - Deallocate DMA queue.

 * @txq: Transmit queue to deallocate.

 *

 * Empty queue by removing and destroying all BD's.

 * Free all buffers.

 * 0-fill, but do not free "txq" descriptor structure.

 De-alloc array of command/tx buffers */

 De-alloc circular buffer of TFDs */

 0-fill queue descriptor structure */

 make sure all queue are not stopped/used */

 reset context data, TX status and translation data */

	/* The chain extension of the SCD doesn't work well. This feature is

	 * enabled by default by the HW, so we need to disable it manually.

 Activate all Tx DMA/FIFO channels */

 Enable DMA channel */

 Update FH chicken bits */

 Enable L1-Active */

	/*

	 * we should never get here in gen2 trans mode return early to avoid

	 * having invalid accesses

 Tell NIC where to find the "keep warm" buffer */

	/*

	 * Send 0 as the scd_base_addr since the device may have be reset

	 * while we were in WoWLAN in which case SCD_SRAM_BASE_ADDR will

	 * contain garbage.

 Stop each Tx DMA channel */

 Wait for DMA channels to be idle */

/*

 * iwl_pcie_tx_stop - Stop all Tx DMA channels

 Turn off all Tx DMA fifos */

 Turn off all Tx DMA channels */

	/*

	 * This function can be called before the op_mode disabled the

	 * queues. This happens when we have an rfkill interrupt.

	 * Since we stop Tx altogether - mark the queues as stopped.

 This can happen: start_hw, stop_device */

 Unmap DMA from host system and free skb's */

/*

 * iwl_trans_tx_free - Free TXQ Context

 *

 * Destroy all TX DMA queues and structures

 Tx queues */

/*

 * iwl_pcie_tx_alloc - allocate TX context

 * Allocate all Tx DMA structures and initialize them

	/*It is not allowed to alloc twice, so warn when this happens.

 Alloc keep-warm buffer */

 Alloc and init all Tx queues, including the command queue (#4/#9) */

 Turn off all Tx DMA fifos */

 Tell NIC where to find the "keep warm" buffer */

 Alloc and init all Tx queues, including the command queue (#4/#9) */

		/*

		 * Tell nic where to find circular buffer of TFDs for a

		 * given Tx queue, and enable the DMA channel used for that

		 * queue.

		 * Circular buffer (TFD queue in DRAM) physical base address

Upon error, free only if we allocated something */

 Make sure the NIC is still alive in the bus */

	/*

	 * wake up the NIC to make sure that the firmware will see the host

	 * command - we will let the NIC sleep once all the host commands

	 * returned. This needs to be done only on NICs that have

	 * apmg_wake_up_wa set (see above.)

	/*

	 * In iwl_trans_grab_nic_access(), we've acquired the reg_lock.

	 * There, we also returned immediately if cmd_hold_nic_awake is

	 * already true, so it's OK to unconditionally set it to true.

/*

 * iwl_pcie_cmdq_reclaim - Reclaim TX command queue entries already Tx'd

 *

 * When FW advances 'R' index, all entries between old and new 'R' index

 * need to be reclaimed. As result, some free space forms.  If there is

 * enough free space (> low mark), wake the stack that feeds us.

/* Receiver address (actually, Rx station's index into station table),

 Disable the scheduler prior configuring the cmd queue */

 Stop this Tx queue before configuring it */

 Set this queue as a chain-building queue unless it is CMD */

 Map receiver-address / traffic-ID to this queue */

 enable aggregations for the queue */

			/*

			 * disable aggregations for the queue, this will also

			 * make the ra_tid mapping configuration irrelevant

			 * since it is now a non-AGG queue.

		/*

		 * If we need to move the SCD write pointer by steps of

		 * 0x40, 0x80 or 0xc0, it gets stuck. Avoids this and let

		 * the op_mode know by returning true later.

		 * Do this only in case cfg is NULL since this trick can

		 * be done only if we have DQA enabled which is true for mvm

		 * only. And mvm never sets a cfg pointer.

		 * This is really ugly, but this is the easiest way out for

		 * this sad hardware issue.

		 * This bug has been fixed on devices 9000 and up.

	/* Place first TFD at index corresponding to start sequence number.

 Set up Tx window size and frame limit for this queue */

 Set up status area in SRAM, map to Tx DMA/FIFO, activate */

 enable the scheduler for this queue (only) */

	/*

	 * Upon HW Rfkill - we stop the device, and then stop the queues

	 * in the op_mode. Just for the sake of the simplicity of the op_mode,

	 * allow the op_mode to call txq_disable after it already called

	 * stop_device.

************** HOST COMMAND QUEUE FUNCTIONS   *****/

/*

 * iwl_pcie_enqueue_hcmd - enqueue a uCode command

 * @priv: device private data point

 * @cmd: a pointer to the ucode command structure

 *

 * The function returns < 0 values to indicate the operation

 * failed. On success, it returns the index (>= 0) of command in the

 * command queue.

 need one for the header if the first is NOCOPY */

 need at least IWL_FIRST_TB_SIZE copied */

			/*

			 * This is also a chunk that isn't copied

			 * to the static buffer so set had_nocopy.

 only allowed once */

 NOCOPY must not be followed by normal! */

	/*

	 * If any of the command structures end up being larger than

	 * the TFD_MAX_PAYLOAD_SIZE and they aren't dynamically

	 * allocated into separate TFDs, then we will need to

	 * increase the size of the buffers.

 re-initialize to NULL */

 set up the header */

 and copy the data that needs to be copied */

 copy everything if not nocopy/dup */

		/*

		 * Otherwise we need at least IWL_FIRST_TB_SIZE copied

		 * in total (for bi-directional DMA), but copy up to what

		 * we can fit into the payload for debug dump purposes.

 However, treat copy_size the proper way, we need it below */

 start the TFD with the minimum copy bytes */

 map first command fragment, if any remains */

 map the remaining (adjusted) nocopy/dup fragments */

 start timer if queue currently empty */

 Increment and update queue's write index */

/*

 * iwl_pcie_hcmd_complete - Pull unused buffers off the queue and reclaim them

 * @rxb: Rx buffer to reclaim

	/* If a Tx command is being handled and it isn't in the actual

	 * command queue then there a command routing bug has been introduced

 Input error checking is done when commands are added to queue. */

	/*

	 * Set up TFD's third entry to point directly to remainder

	 * of skb's head, if any

 set up the remaining entries to point to the data */

 if the packet is protected, then it must be CCMP or GCMP */

 total amount of header we may need for this A-MSDU */

 Our device supports 9 segments at most, it will fit in 1 page */

	/*

	 * Pull the ieee80211 header + IV to be able to use TSO core,

	 * we will restore it for the tx_status flow.

	/*

	 * Remove the length of all the headers that we don't actually

	 * have in the MPDU by themselves, but that we duplicate into

	 * all the different MSDUs inside the A-MSDU.

 this is the data left for this subframe */

		/*

		 * This will copy the SNAP as well which will be considered

		 * as MAC header.

 add this subframe's headers' length to the tx_cmd */

 prepare the start_hdr for the next subframe */

 put the payload */

 re -add the WiFi header and IV */

 CONFIG_INET */

 No A-MSDU without CONFIG_INET */

 CONFIG_INET */

	/* mac80211 always puts the full header into the SKB's head,

	 * so there's no need to check if it's readable there

 don't put the packet on the ring, if there is no room */

	/* In AGG mode, the index in the ring must correspond to the WiFi

	 * sequence number. This is a HW requirements to help the SCD to parse

	 * the BA.

	 * Check here that the packets are in the right place on the ring.

 Set up driver data for this TFD */

 Set up first empty entry in queue's array of Tx/cmd buffers */

	/*

	 * The second TB (tb1) points to the remainder of the TX command

	 * and the 802.11 header - dword aligned size

	 * (This calculation modifies the TX command, so do it before the

	 * setup of the first TB)

 do not align A-MSDU to dword as the subframe header aligns it */

 Tell NIC about any 2-byte padding after MAC header */

	/*

	 * The first TB points to bi-directional DMA data, we'll

	 * memcpy the data into it later.

 there must be data left over for TB1 or this code must be changed */

 map the data for TB1 */

	/*

	 * If gso_size wasn't set, don't give the frame "amsdu treatment"

	 * (adding subframes, etc.).

	 * This can happen in some testing flows when the amsdu was already

	 * pre-built, and we just need to send the resulting skb.

 building the A-MSDU might have changed this data, so memcpy it now */

 Set up entry for this TFD in Tx byte-count array */

 start timer if queue currently empty */

		/*

		 * If the TXQ is active, then set the timer, if not,

		 * set the timer in remainder so that the timer will

		 * be armed with the right value when the station will

		 * wake up.

 Tell device the write index *just past* this latest filled TFD */

	/*

	 * At this point the frame is "transmitted" successfully

	 * and we will get a TX status notification eventually.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2017 Intel Deutschland GmbH

 * Copyright (C) 2018-2021 Intel Corporation

 free paging*/

 add 1 due to separator */

 add 2 due to separators */

 initialize lmac sections */

 initialize umac sections */

 access FW with +1 to make up for lmac separator */

	/*

	 * Initialize paging.

	 * Paging memory isn't stored in dram->fw as the umac and lmac - it is

	 * stored separately.

	 * This is since the timing of its release is different -

	 * while fw memory can be released on alive, the paging memory can be

	 * freed only when the device goes down.

	 * Given that, the logic here in accessing the fw image is a bit

	 * different - fw_cnt isn't changing so loop counter is added to it.

 access FW with +2 to make up for lmac & umac separators */

 size is in DWs */

 initialize RX default queue */

 initialize TX command queue */

 allocate ucode sections in dram and set addresses */

 Configure debug, if exists */

 kick FW self load */

 Context info will be released upon alive or failure to get one */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2020-2021 Intel Corporation

/*

 * iwl_txq_update_byte_tbl - Set up entry in Tx byte-count array

	/*

	 * filled_tfd_size contains the number of filled bytes in the TFD.

	 * Dividing it by 64 will give the number of chunks to fetch

	 * to SRAM- 0 for one chunk, 1 for 2 and so on.

	 * If, for example, TFD contains only 3 TBs then 32 bytes

	 * of the TFD are used, and only one chunk of 64 bytes should

	 * be fetched

 Starting from AX210, the HW expects bytes */

 Before AX210, the HW expects DW */

/*

 * iwl_txq_inc_wr_ptr - Send new write index to hardware

	/*

	 * if not in power-save mode, uCode will never sleep when we're

	 * trying to tx (during RFKILL, we're not trying to tx).

 Sanity check on number of chunks */

 first TB is never freed - it's the bidirectional DMA data */

	/* rd_ptr is bounded by TFD_QUEUE_SIZE_MAX and

	 * idx is bounded by n_window

	/* Can be called from irqs-disabled context

	 * If skb is not NULL, it means that the whole queue is being

	 * freed and that the queue is not empty - free the skb

	/*

	 * Only WARN here so we know about the issue, but we mess up our

	 * unmap path because not every place currently checks for errors

	 * returned from this function - it can only return an error if

	 * there's no more space, and so when we know there is enough we

	 * don't always check ...

 Each TFD can point to a maximum max_tbs Tx buffers */

 set the chaining pointer to the previous page if there */

/*

 * Add a TB and if needed apply the FH HW bug workaround;

 * meta != NULL indicates that it's a page mapping and we

 * need to dma_unmap_page() and set the meta->tbs bit in

 * this case.

	/*

	 * Work around a hardware bug. If (as expressed in the

	 * condition above) the TB ends on a 32-bit boundary,

	 * then the next TB may be accessed with the wrong

	 * address.

	 * To work around it, copy the data elsewhere and make

	 * a new mapping for it so the device will not fail.

 unmap the new allocation as single */

	/*

	 * Check if there's enough room on this page

	 *

	 * Note that we put a page chaining pointer *last* in the

	 * page - we need it somewhere, and if it's there then we

	 * avoid DMA mapping the last bits of the page which may

	 * trigger the 32-bit boundary hardware bug.

	 *

	 * (see also get_workaround_page() in tx-gen2.c)

 We don't have enough room on this page, get a new one. */

 set the chaining pointer to NULL */

 total amount of header we may need for this A-MSDU */

 Our device supports 9 segments at most, it will fit in 1 page */

	/*

	 * Pull the ieee80211 header to be able to use TSO core,

	 * we will restore it for the tx_status flow.

	/*

	 * Remove the length of all the headers that we don't actually

	 * have in the MPDU by themselves, but that we duplicate into

	 * all the different MSDUs inside the A-MSDU.

 this is the data left for this subframe */

		/*

		 * This will copy the SNAP as well which will be considered

		 * as MAC header.

		/*

		 * No need for _with_wa, this is from the TSO page and

		 * we leave some space at the end of it so can't hit

		 * the buggy scenario.

 add this subframe's headers' length to the tx_cmd */

 prepare the start_hdr for the next subframe */

 put the payload */

 re -add the WiFi header */

	/*

	 * No need for _with_wa, the first TB allocation is aligned up

	 * to a 64-byte boundary and thus can't be at the end or cross

	 * a page boundary (much less a 2^32 boundary).

	/*

	 * The second TB (tb1) points to the remainder of the TX command

	 * and the 802.11 header - dword aligned size

	 * (This calculation modifies the TX command, so do it before the

	 * setup of the first TB)

 do not align A-MSDU to dword as the subframe header aligns it */

 map the data for TB1 */

	/*

	 * No need for _with_wa(), we ensure (via alignment) that the data

	 * here can never cross or end at a page boundary.

 building the A-MSDU might have changed this data, memcpy it now */

 The first TB points to bi-directional DMA data */

	/*

	 * No need for _with_wa, the first TB allocation is aligned up

	 * to a 64-byte boundary and thus can't be at the end or cross

	 * a page boundary (much less a 2^32 boundary).

	/*

	 * The second TB (tb1) points to the remainder of the TX command

	 * and the 802.11 header - dword aligned size

	 * (This calculation modifies the TX command, so do it before the

	 * setup of the first TB)

 map the data for TB1 */

	/*

	 * No need for _with_wa(), we ensure (via alignment) that the data

	 * here can never cross or end at a page boundary.

 set up TFD's third entry to point to remainder of skb's head */

 There must be data left over for TB1 or this code must be changed */

	/*

	 * Only build A-MSDUs here if doing so by GSO, otherwise it may be

	 * an A-MSDU for other reasons, e.g. NAN or an A-MSDU having been

	 * built in the higher layers already.

	/*

	 * To avoid ambiguity between empty and completely full queues, there

	 * should always be less than max_tfd_queue_size elements in the queue.

	 * If q->n_window is smaller than max_tfd_queue_size, there is no need

	 * to reserve any queue entries for this purpose.

	/*

	 * max_tfd_queue_size is a power of 2, so the following is equivalent to

	 * modulo by max_tfd_queue_size and is well defined.

 don't put the packet on the ring, if there is no room */

 Set up driver data for this TFD */

 Set up first empty entry in queue's array of Tx/cmd buffers */

 Set up entry for this TFD in Tx byte-count array */

 start timer if queue currently empty */

 Tell device the write index *just past* this latest filled TFD */

	/*

	 * At this point the frame is "transmitted" successfully

	 * and we will get a TX status notification eventually.

************** HOST COMMAND QUEUE FUNCTIONS   *****/

/*

 * iwl_txq_gen2_unmap -  Unmap any remaining DMA mappings and free skb's

 just in case - this queue may have been stopped */

 De-alloc circular buffer of TFDs */

/*

 * iwl_pcie_txq_free - Deallocate DMA queue.

 * @txq: Transmit queue to deallocate.

 *

 * Empty queue by removing and destroying all BD's.

 * Free all buffers.

 * 0-fill, but do not free "txq" descriptor structure.

 De-alloc array of command/tx buffers */

/*

 * iwl_queue_init - Initialize queue's high/low-water and read/write indexes

	/* slots_num must be power-of-two size, otherwise

	/* max_tfd_queue_size must be power-of-two size, otherwise

 Initialize queue's high/low-water marks, and head/tail indexes */

 TODO: access new SCD registers and dump them */

 check if triggered erroneously */

	/* Circular buffer of transmit frame descriptors (TFDs),

 Place first TFD at index corresponding to start sequence number */

	/*

	 * Upon HW Rfkill - we stop the device, and then stop the queues

	 * in the op_mode. Just for the sake of the simplicity of the op_mode,

	 * allow the op_mode to call txq_disable after it already called

	 * stop_device.

 Free all TX queues */

 alloc and init the tx queue */

	/*

	 * shift by 16 twice to avoid warnings on 32-bit

	 * (where this code never runs anyway due to the

	 * if statement above)

 Sanity check on number of chunks */

 @todo issue fatal error, it is quite serious situation */

 first TB is never freed - it's the bidirectional DMA data */

/*

 * iwl_txq_gen1_update_byte_cnt_tbl - Set up entry in Tx byte-count array

/*

 * iwl_txq_free_tfd - Free all chunks referenced by TFD [txq->q.read_ptr]

 * @trans - transport private data

 * @txq - tx queue

 * @dma_dir - the direction of the DMA mapping

 *

 * Does NOT advance any TFD circular buffer read/write indexes

 * Does NOT free the TFD itself (which is within circular buffer)

	/* rd_ptr is bounded by TFD_QUEUE_SIZE_MAX and

	 * idx is bounded by n_window

	/* We have only q->n_window txq->entries, but we use

	 * TFD_QUEUE_SIZE_MAX tfds

 free SKB */

	/* Can be called from irqs-disabled context

	 * If skb is not NULL, it means that the whole queue is being

	 * freed and that the queue is not empty - free the skb

	/*

	 * station is asleep and we send data - that must

	 * be uAPSD or PS-Poll. Don't rearm the timer.

	/*

	 * if empty delete timer, otherwise move timer forward

	 * since we're making progress on this queue

 Frees buffers until index _not_ inclusive */

 This function is not meant to release cmd queue*/

	/*Since we free until index _not_ inclusive, the one before index is

		/*

		 * We are going to transmit from the overflow queue.

		 * Remember this state so that wait_for_txq_empty will know we

		 * are adding more packets to the TFD queue. It cannot rely on

		 * the state of &txq->overflow_q, as we just emptied it, but

		 * haven't TXed the content yet.

		/*

		 * This is tricky: we are in reclaim path which is non

		 * re-entrant, so noone will try to take the access the

		 * txq data from that path. We stopped tx, so we can't

		 * have tx as well. Bottom line, we can unlock and re-lock

		 * later.

			/*

			 * Note that we can very well be overflowing again.

			 * In that case, iwl_txq_space will be small again

			 * and we won't wake mac80211's queue.

 Set wr_ptr of specific device and txq  */

				/*

				 * The timer should have fired, maybe it is

				 * spinning right now on the lock.

 remember how long until the timer fires */

		/*

		 * Wake a non-empty queue -> arm timer with the

		 * remainder before it froze

		/*

		 * Cancel the CMD_WANT_SKB flag for the cmd in the

		 * TX cmd queue. Otherwise in case the cmd comes

		 * in later, it will possibly set an invalid

		 * address (cmd->meta.source).

 Make sure the NIC is still alive in the bus */

 An asynchronous command can not expect an SKB to be set. */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2007 - 2014 Intel Corporation. All rights reserved.

 * Copyright (C) 2018, 2020 Intel Corporation

 *

 * Portions of this file are derived from the ipw3945 project, as well

 * as portions of the ieee80211 subsystem header files.

/* default Thermal Throttling transaction table

 * Current state   |         Throttling Down               |  Throttling Up

 *=============================================================================

 *                 Condition Nxt State  Condition Nxt State Condition Nxt State

 *-----------------------------------------------------------------------------

 *     IWL_TI_0     T >= 114   CT_KILL  114>T>=105   TI_1      N/A      N/A

 *     IWL_TI_1     T >= 114   CT_KILL  114>T>=110   TI_2     T<=95     TI_0

 *     IWL_TI_2     T >= 114   CT_KILL                        T<=100    TI_1

 *    IWL_CT_KILL      N/A       N/A       N/A        N/A     T<=95     TI_0

 *=============================================================================

 Advance Thermal Throttling default restriction table */

 degrees CELSIUS except specified */

 5 seconds duration */

 300ms duration */

/*

 * toggle the bit to wake up uCode and check the temperature

 * if the temperature is below CT, uCode will stay awake and send card

 * state notification with CT_KILL bit clear to inform Thermal Throttling

 * Management to change state. Otherwise, uCode will go back to sleep

 * without doing anything, driver should continue the 5 seconds timer

 * to wake up uCode for temperature check until temperature drop below CT

		/* Reschedule the ct_kill timer to occur in

		 * CT_KILL_EXIT_DURATION seconds to ensure we get a

 temperature timer expired, ready to go into CT_KILL state */

 make request to retrieve statistics information */

 Reschedule the ct_kill wait timer */

/*

 * Legacy thermal throttling

 * 1) Avoid NIC destruction due to high temperatures

 *	Chip will identify dangerously high temperatures that can

 *	harm the device and will power down

 * 2) Avoid the NIC power down due to high temperature

 *	Throttle early enough to lower the power consumption before

 *	drastic steps are needed

 in Celsius */

 stop ct_kill_waiting_tm timer */

			/*

			 * When the system is ready to go back to IWL_TI_0

			 * we only have to call iwl_power_update_mode() to

			 * do so.

			/* TT state not updated

			 * try again during next temperature read

/*

 * Advance thermal throttling

 * 1) Avoid NIC destruction due to high temperatures

 *	Chip will identify dangerously high temperatures that can

 *	harm the device and will power down

 * 2) Avoid the NIC power down due to high temperature

 *	Throttle early enough to lower the power consumption before

 *	drastic steps are needed

 *	Actions include relaxing the power down sleep thresholds and

 *	decreasing the number of TX streams

 * 3) Avoid throughput performance impact as much as possible

 *

 *=============================================================================

 *                 Condition Nxt State  Condition Nxt State Condition Nxt State

 *-----------------------------------------------------------------------------

 *     IWL_TI_0     T >= 114   CT_KILL  114>T>=105   TI_1      N/A      N/A

 *     IWL_TI_1     T >= 114   CT_KILL  114>T>=110   TI_2     T<=95     TI_0

 *     IWL_TI_2     T >= 114   CT_KILL                        T<=100    TI_1

 *    IWL_CT_KILL      N/A       N/A       N/A        N/A     T<=95     TI_0

 *=============================================================================

		/* based on the current TT state,

		 * find the curresponding transaction table

		 * each table has (IWL_TI_STATE_MAX - 1) entries

		 * tt->transaction + ((old_state * (IWL_TI_STATE_MAX - 1))

		 * will advance to the correct table.

		 * then based on the current temperature

		 * find the next state need to transaction to

		 * go through all the possible (IWL_TI_STATE_MAX - 1) entries

		 * in the current table to see if transaction is needed

 stop ct_kill_waiting_tm timer */

 force PI = IWL_POWER_INDEX_5 in the case of TI > 0 */

 disable HT */

				/* check HT capability and set

				 * according to the system HT capability

			/*

			 * restore system power setting -- it will be

			 * recalculated automatically.

			/* check HT capability and set

			 * according to the system HT capability

			/* TT state not updated

			 * try again during next temperature read

/* Card State Notification indicated reach critical temperature

 * if PSP not enable, no Thermal Throttling function will be performed

 * just set the GP1 bit to acknowledge the event

 * otherwise, go into IWL_TI_CT_KILL state

 * since Card State Notification will not provide any temperature reading

 * for Legacy mode

 * so just pass the CT_KILL temperature to iwl_legacy_tt_handler()

 * for advance mode

 * pass CT_KILL_THRESHOLD+1 to make sure move into IWL_TI_CT_KILL state

/* Card State Notification indicated out of critical temperature

 * since Card State Notification will not provide any temperature reading

 * so pass the IWL_REDUCED_PERFORMANCE_THRESHOLD_2 temperature

 * to iwl_legacy_tt_handler() to get out of IWL_CT_KILL state

 stop ct_kill_exit_tm timer */

		/*

		 * exit from CT_KILL state

		 * reset the current temperature reading

 degrees CELSIUS except specified */

/* Thermal throttling initialization

 * For advance thermal throttling:

 *     Initialize Thermal Index and temperature threshold table

 *     Initialize thermal throttling restriction table

 setup deferred ct kill work */

 cleanup thermal throttling management related memory and timer */

 stop ct_kill_exit_tm timer if activated */

 stop ct_kill_waiting_tm timer if activated */

 free advance thermal throttling memory */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2005 - 2014 Intel Corporation. All rights reserved.

 * Copyright (C) 2019 - 2020 Intel Corporation

 # tx in history window */

 min failures to calc tpt */

 min successes to calc tpt */

 max allowed rate miss before sync LQ cmd */

 max time to accum history 2 seconds */

ANT_NONE -> */ ANT_NONE,

ANT_A    -> */ ANT_B,

ANT_B    -> */ ANT_C,

ANT_AB   -> */ ANT_BC,

ANT_C    -> */ ANT_A,

ANT_AC   -> */ ANT_AB,

ANT_BC   -> */ ANT_AC,

ANT_ABC  -> */ ANT_ABC,

/*

 * Parameter order:

 *   rate, ht rate, prev rate, next rate, prev tgg rate, next tgg rate

 *

 * If there isn't a valid next or previous rate then INV is used which

 * maps to IWL_RATE_INVALID

 *

  1mbps */

  2mbps */

5.5mbps */

 11mbps */

  6mbps */

  9mbps */

 12mbps */

 18mbps */

 24mbps */

 36mbps */

 48mbps */

 54mbps */

 60mbps */

 FIXME:RS:          ^^    should be INV (legacy) */

 HT rate format */

 skip 9M not supported in ht*/

 legacy rate format, search for match in table */

/*

 * The following tables contain the expected throughput metrics for all rates

 *

 *	1, 2, 5.5, 11, 6, 9, 12, 18, 24, 36, 48, 54, 60 MBits

 *

 * where invalid entries are zeros.

 *

 * CCK rates are only valid in legacy table and will only be used in G

 * (2.4 GHz) band.

 Norm */

 SGI */

 AGG */

 AGG+SGI */

 Norm */

 SGI */

 AGG */

 AGG+SGI */

 Norm */

 SGI */

 AGG */

 AGG+SGI*/

 Norm */

 SGI */

 AGG */

 AGG+SGI */

 Norm */

 SGI */

 AGG */

 AGG+SGI */

 Norm */

 SGI */

 AGG */

 AGG+SGI */

 mbps, mcs */

/*

 *	removes the old data from the statistics. All data that is older than

 *	TID_MAX_TIME_DIFF, will be deleted.

 The oldest age we want to keep */

/*

 *	increment traffic load value for tid and also remove

 *	any old values if passed the certain time period

 Happens only for the first packet. Initialize the data */

 The history is too long: remove data that is older than */

 TID_MAX_TIME_DIFF */

/*

 * Program the device to use fixed rate for frame transmit

 * This is for debugging/testing only

 * once the device start use fixed rate, we need to reload the module

 * to being back the normal operation.

 1 - 54 MBits, includes CCK */

 6 - 60 MBits, no 9, no CCK */

 6 - 60 MBits, no 9, no CCK */

 6 - 60 MBits, no 9, no CCK */

/*

	get the traffic load value for tid

 The history is too long: remove data that is older than */

 TID_MAX_TIME_DIFF */

	/*

	 * Don't create TX aggregation sessions when in high

	 * BT traffic, as they would just be disrupted by BT.

		/*

		 * driver and mac80211 is out of sync

		 * this might be cause by reloading firmware

		 * stop the tx ba session here

/*

 * Static function to get the expected throughput from an iwl_scale_tbl_info

 * that wraps a NULL pointer check

/*

 * rs_collect_tx_data - Update the success/failure sliding window

 *

 * We keep a sliding window of the last 62 packets transmitted

 * at this rate.  window->data contains the bitmask of successful

 * packets.

 Select window for current tx bit rate */

 Get expected throughput */

	/*

	 * Keep track of only the latest 62 tx frame attempts in this rate's

	 * history window; anything older isn't really relevant any more.

	 * If we have filled up the sliding window, drop the oldest attempt;

	 * if the oldest attempt (highest bit in bitmap) shows "success",

	 * subtract "1" from the success counter (this is the main reason

	 * we keep these bitmaps!).

 remove earliest */

 Increment frames-attempted counter */

 Shift bitmap by one frame to throw away oldest history */

 Mark the most recent #successes attempts as successful */

 Calculate current success ratio, avoid divide-by-0! */

 Calculate average throughput, if we have enough history. */

 Tag this window as having been updated */

/*

 * Fill uCode API rate_n_flags field, based on "search" or "active" table.

 FIXME:RS:remove this function and put the flags statically in the table */

/*

 * Interpret uCode API's rate_n_flags format,

 * fill "search" or "active" tx mode table.

 default legacy setup */

 legacy rate format */

 HT rate format */

 SISO */

else NONE*/

 MIMO2 */

 MIMO3 */

 switch to another antenna/antennas and return 1 */

 if no other valid antenna found, return 0 */

/*

 * Green-field mode is valid if the station supports it and

 * there are no non-GF stations present in the BSS.

	/*

	 * There's a bug somewhere in this code that causes the

	 * scaling to get stuck because GF+SGI can't be combined

	 * in SISO rates. Until we find that bug, disable GF, it

	 * has only limited benefit and we still interoperate with

	 * GF APs since we can always receive GF transmissions.

/*

 * rs_get_supported_rates - get the available rates

 *

 * if management frame or broadcast frame only return

 * basic available rates.

 *

	/* 802.11A or ht walks to the next literal adjacent rate in

 Find the previous rate that is in the rate mask */

 Find the next rate that is in the rate mask */

	/* check if we need to switch from HT to legacy rates.

	 * assumption is that mandatory rates (1Mbps or 6Mbps)

 Mask with station rate restriction */

 supp_rates has no CCK bits in A mode */

 If we switched from HT to legacy, check current rate */

/*

 * Simple function to compare two rate scale table types

 Update uCode's rate table. */

/*

 * mac80211 sends us Tx status

 Treat uninitialized rate scaling data same as non-existing. */

 This packet was aggregated but doesn't carry status info */

	/*

	 * Ignore this Tx frame response if its initial rate doesn't match

	 * that of latest Link Quality command.  There may be stragglers

	 * from a previous Link Quality command, but we're no longer interested

	 * in those; they're either from the "active" mode while we're trying

	 * to check "search" mode, or a prior "search" mode after we've moved

	 * to a new "search" mode (which might become the new "active" mode).

 For HT packets, map MCS to PLCP */

 Remove # of streams */

		/*

		 * mac80211 HT index is always zero-indexed; we need to move

		 * HT OFDM rates after CCK rates in 2.4 GHz band

 Here we actually compare this rate to the latest LQ command */

		/*

		 * Since rates mis-match, the last LQ command may have failed.

		 * After IWL_MISSED_RATE_MAX mis-matches, resync the uCode with

		 * ... driver.

 Regardless, ignore this status info for outdated rate */

 Rate did match, so reset the missed_rate_counter */

 Figure out if rate scale algorithm is in active or search table */

		/*

		 * no matching table found, let's by-pass the data collection

		 * and continue to perform rate scale to find the rate table

	/*

	 * Updating the frame history depends on whether packets were

	 * aggregated.

	 *

	 * For aggregation, all packets were transmitted at the same rate, the

	 * first index into rate scale table.

 Update success/fail counts if not searching for new mode */

	/*

	 * For legacy, update frame history with for each Tx retry.

 HW doesn't send more than 15 retries */

 The last transmission may have been successful */

 Collect data for each rate used during failed TX attempts */

			/*

			 * Only collect stats if retried rate is in the same RS

			 * table as active/search.

 Update success/fail counts if not searching for new mode */

 The last TX rate is cached in lq_sta; it's set in if/else above */

 See if there's a better rate or modulation mode to try. */

/*

 * Begin a period of staying with a selected modulation mode.

 * Set "stay_in_tbl" flag to prevent any mode switches.

 * Set frame tx success limits according to legacy vs. high-throughput,

 * and reset overall (spanning all rates) tx success history statistics.

 * These control how long we stay using same modulation mode before

 * searching for a new mode.

 only place this gets set */

/*

 * Find correct throughput table for given mode of modulation

 Used to choose among HT tables */

 Check for invalid LQ type */

 Legacy rates have only one table */

	/* Choose among many HT tables depending on number of streams

	 * (SISO/MIMO2/MIMO3), channel width (20/40), SGI, and aggregation

 if (is_mimo3(tbl->lq_type)) <-- must be true */

 Normal */

 SGI */

 AGG */

 AGG+SGI */

/*

 * Find starting rate for new "search" high-throughput mode of modulation.

 * Goal is to find lowest expected rate (under perfect conditions) that is

 * above the current measured throughput of "active" mode, to give new mode

 * a fair chance to prove itself without too many challenges.

 *

 * This gets called when transitioning to more aggressive modulation

 * (i.e. legacy to SISO or MIMO, or SISO to MIMO), as well as less aggressive

 * (i.e. MIMO to SISO).  When moving to MIMO, bit rate will typically need

 * to decrease to match "active" throughput.  When moving from MIMO to SISO,

 * bit rate will typically need to increase, but not if performance was bad.

 "search" */

 "active" values */

 expected "search" throughput */

		/*

		 * Lower the "search" bit rate, to give new "search" mode

		 * approximately the same throughput as "active" if:

		 *

		 * 1) "Active" mode has been working modestly well (but not

		 *    great), and expected "search" throughput (under perfect

		 *    conditions) at candidate rate is above the actual

		 *    measured "active" throughput (but less than expected

		 *    "active" throughput under perfect conditions).

		 * OR

		 * 2) "Active" mode has been working perfectly or very well

		 *    and expected "search" throughput (under perfect

		 *    conditions) at candidate rate is above expected

		 *    "active" throughput (under perfect conditions).

			/* (2nd or later pass)

			 * If we've already tried to raise the rate, and are

 Loop again with lower rate */

 Lower rate not available, use the original */

 Else try to raise the "search" rate to match "active" */

			/* (2nd or later pass)

			 * If we've already tried to lower the rate, and are

 Loop again with higher rate */

 Higher rate not available, use the original */

/*

 * Set up search table for MIMO2

 Need both Tx chains/antennas to support MIMO */

/*

 * Set up search table for MIMO3

 Need both Tx chains/antennas to support MIMO */

/*

 * Set up search table for SISO

11n spec: no SGI in SISO+Greenfield*/

/*

 * Try to switch to new modulation mode from legacy

 nothing */

 avoid antenna B unless MIMO */

 avoid antenna B and MIMO */

 stay in Legacy */

 configure as 1x1 if bt full concurrency */

 Don't change antenna if success has been great */

 Set up search table to try other antenna */

 Set up search table to try SISO */

 Set up search table to try MIMO */

 Set up search table to try MIMO3 */

/*

 * Try to switch to new modulation mode from SISO

 nothing */

 avoid antenna B unless MIMO */

 avoid antenna B and MIMO */

 stay in SISO */

 configure as 1x1 if bt full concurrency */

/*

 * Try to switch to new modulation mode from MIMO2

 nothing */

 avoid antenna B and MIMO */

 avoid antenna B unless MIMO */

 switch in SISO */

 configure as 1x1 if bt full concurrency */

 Set up new search table for SISO */

 Set up new search table for MIMO2 */

			/*

			 * If active table already uses the fastest possible

			 * modulation (dual stream with short guard interval),

			 * and it's working well, there's no need to look

			 * for a better type of modulation!

/*

 * Try to switch to new modulation mode from MIMO3

 nothing */

 avoid antenna B and MIMO */

 avoid antenna B unless MIMO */

 switch in SISO */

 configure as 1x1 if bt full concurrency */

 Set up new search table for SISO */

 Set up new search table for MIMO */

			/*

			 * If active table already uses the fastest possible

			 * modulation (dual stream with short guard interval),

			 * and it's working well, there's no need to look

			 * for a better type of modulation!

/*

 * Check whether we should continue using same modulation mode, or

 * begin search for a new mode, based on:

 * 1) # tx successes or failures while using this mode

 * 2) # times calling this function

 * 3) elapsed time in this mode (not used, for now)

 If we've been disallowing search, see if we should now allow it */

 Elapsed time using current modulation mode */

		/*

		 * Check if we should allow search for new modulation mode.

		 * If many frames have failed or succeeded, or we've used

		 * this same modulation for a long time, allow search, and

		 * reset history stats that keep track of whether we should

		 * allow a new search.  Also (below) reset all bitmaps and

		 * stats in active history.

 Allow search for new mode */

 only place reset */

		/*

		 * Else if we've used this modulation mode enough repetitions

		 * (regardless of elapsed time or success/failure), reset

		 * history bitmaps and rate-specific stats for all rates in

		 * active table.

		/* If transitioning to allow "search", reset all history

		 * bitmaps and stats in active table (this will become the new

/*

 * setup rate table in uCode

 Update uCode's rate table. */

/*

 * Do rate scaling and search for new modulation mode.

 Send management frames and NO_ACK data using lowest rate. */

 TODO: this could probably be improved.. */

	/*

	 * Select rate-scale / modulation-mode table to work with in

	 * the rest of this function:  "search" if searching for better

	 * modulation mode, or "active" if doing rate scaling within a mode.

 current tx rate */

 rates available for this association, and for modulation mode */

 mask with station rate restriction */

 supp_rates has no CCK bits in A mode */

 revert to active table if search table is not valid*/

 get "active" rate info */

 Get expected throughput table and history window for current rate */

 force user max rate if set by user */

	/*

	 * If there is not enough history to calculate actual average

	 * throughput, keep analyzing results of more tx frames, without

	 * changing rate or mode (bypass most of the rest of this function).

	 * Set up new rate table in uCode only if old rate is not supported

	 * in current association (use new rate found above).

 Can't calculate this yet; not enough history */

		/* Should we stay with this modulation mode,

	/* Else we have enough samples; calculate estimate of

 If we are searching for better modulation mode, check success. */

		/* If good success, continue using the "search" mode;

		 * no need to send new link quality command, since we're

 Swap tables; "search" becomes "active" */

 Else poor success; go back to mode in "active" table */

 Nullify "search" table */

 Revert to "active" table */

 Revert to "active" rate and throughput info */

 Need to set up a new rate table in uCode */

		/* Either way, we've made a decision; modulation mode

 Don't switch modes below! */

	/* (Else) not in search of better modulation mode, try for better

 If user set max rate, dont allow higher than user constrain */

 Collect measured throughputs for current and adjacent rates */

 Too many failures, decrease rate */

 No throughput measured yet for adjacent rates; try increase. */

	/* Both adjacent throughputs are measured, but neither one has better

	/* At least one adjacent rate's throughput is measured,

 Higher adjacent rate's throughput is measured */

 Higher rate has better throughput */

 Lower adjacent rate's throughput is measured */

 Lower rate has better throughput */

	/* Sanity check; asked for decrease, but success rate or throughput

			/*

			 * don't set scale_action, don't want to scale up if

			 * the rate scale doesn't otherwise think that is a

			 * good idea.

 search for a new modulation */

 Decrease starting rate, update uCode's rate table */

 Increase starting rate, update uCode's rate table */

 No change */

 Replace uCode's rate table for the destination station. */

		/* Should we stay with this modulation mode,

	/*

	 * Search for new modulation mode if we're:

	 * 1)  Not changing rates right now

	 * 2)  Not just finishing up a search

	 * 3)  Allowing a new search

 Save current throughput to compare with "search" throughput*/

		/* Select a new "search" modulation mode to try.

 If new "search" mode was selected, set up in uCode table */

 Access the "search" table, clear its history. */

 Use new "search" start rate */

		/* If the "active" (non-search) mode was legacy,

		 * and we've tried switching antennas,

		 * but we haven't been able to try HT modes (not available),

		 * stay with best antenna legacy modulation for a while

		/* If we're in an HT mode, and all 3 mode switch actions

		 * have been tried and compared, stay in this best modulation

/*

 * rs_initialize_lq - Initialize a station's hardware rate table

 *

 * The uCode's station table contains a table of fallback rates

 * for automatic fallback during transmission.

 *

 * NOTE: This sets up a default set of values.  These will be replaced later

 *       if the driver's iwl-agn-rs rate scaling algorithm is used, instead of

 *       rc80211_simple.

 *

 * NOTE: Run REPLY_ADD_STA command to set up station table entry, before

 *       calling this function (which runs REPLY_TX_LINK_QUALITY_CMD,

 *       which requires station table entry to exist).

 Get max rate if user set max rate */

 Treat uninitialized rate scaling data same as non-existing. */

 6M and 9M shared same MCS index */

 Check for invalid rates */

 On valid 5 GHz rate, adjust index */

/*

 * Called after adding a new station to initialize rate scaling

 must be unsigned long for for_each_set_bit */

	/* TODO: what is a good starting rate for STA? About middle? Maybe not

	 * the lowest or the highest rate.. Could consider using RSSI from

	 * previous packets? Need to have IEEE 802.1X auth succeed immediately

	/*

	 * active legacy rates as per supported rates bitmap

	/*

	 * active_siso_rate mask includes 9 MBits (bit 5), and CCK (bits 0-3),

	 * supp_rates[] does not; shift to convert format, force 9 MBits off.

 Same here */

 These values will be overridden later */

 as default allow aggregation for all tids */

 Set last_txrate_idx to lowest rate */

 Override starting rate (index 0) if needed for debug purposes */

 Interpret new_rate (rate_n_flags) */

 1x1 only */

 How many times should we repeat the initial rate? */

 Fill 1st table entry (index 0) */

 otherwise we don't modify the existing value */

 Fill rest of rate table */

		/* Repeat initial/next rate.

		 * For legacy IWL_NUMBER_TRY == 1, this loop will not execute.

 Override next rate if needed for debug purposes */

 Fill next table entry */

 1x1 only */

		/* Indicate to uCode which entries might be MIMO.

		 * If initial rate was MIMO, this will finally end up

 Get next rate */

 How many times should we repeat the next rate? */

		/* Don't allow HT rates after next pass.

 Override next rate if needed for debug purposes */

 Fill next table entry */

	/*

	 * overwrite if needed, pass aggregation time limit

	 * to uCode in uSec

 rate scale requires free function to be implemented */

/*

 * Initialization of rate scaling information is done by driver after

 * the station is added. Since mac80211 calls this function before a

 * station is added we ignore it.

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2014 Intel Corporation. All rights reserved.

 half dBm need to multiply */

		/*

		 * For the newer devices which using enhanced/extend tx power

		 * table in EEPROM, the format is in half dBm. driver need to

		 * convert to dBm format before report to mac80211.

		 * By doing so, there is a possibility of 1/2 dBm resolution

		 * lost. driver will perform "round-up" operation before

		 * reporting, but it will cause 1/2 dBm tx power over the

		 * regulatory limit. Perform the checking here, if the

		 * "tx_power_user_lmt" is higher than EEPROM value (in

		 * half-dBm format), lower the tx power based on EEPROM

 store temperature from correct statistics (in Celsius) */

 HT rate format: mac80211 wants an MCS number, which is just LSB */

 Legacy rate format, search for match in table */

/*

 * iwlagn_txfifo_flush: send REPLY_TXFIFO_FLUSH command to uCode

 *

 * pre-requirements:

 *  1. acquire mutex before calling

 *  2. make sure rf is on and not in exit state

/*

 * BT coex

 Notmal TDM */

 Full concurrency */

		/*

		 * newer generation of devices (2000 series and newer)

		 * use the version 2 of the bt command

		 * we need to make sure sending the host command

		 * with correct data structure to avoid uCode assert

 older version only has 8 bits */

	/*

	 * Possible situations when BT needs to take over for receive,

	 * at the same time where STA needs to response to AP's frame(s),

	 * reduce the tx power of the required response frames, by that,

	 * allow the concurrent BT receive & WiFi transmit

	 * (BT - ANT A, WiFi -ANT B), without interference to one another

	 *

	 * Reduced tx power apply to control frames only (ACK/Back/CTS)

	 * when indicated by the BT config command

	/*

	 * Configure BT coex mode to "no coexistence" when the

	 * user disabled BT coexistence, we have no interface

	 * (might be in monitor mode), or the interface is in

	 * IBSS mode (no proper uCode support for coex then).

 Check whether AP or GO mode is active. */

	/*

	 * If disable was received or If GO/AP mode, disable RSSI

	 * measurements.

	/*

	 * If rssi measurements need to be enabled, consider all cases now.

	 * Figure out how many contexts are active.

	/*

	 * rssi monitor already enabled for the correct interface...nothing

	 * to do.

	/*

	 * Figure out if rssi monitor is currently enabled, and needs

	 * to be changed. If rssi monitor is already enabled, disable

	 * it first else just enable rssi measurements on the

	 * interface found above.

 bt coex disabled */

	/*

	 * Note: bt_traffic_load can be overridden by scan complete and

	 * coex profile notifications. Ignore that since only bad consequence

	 * can be not matching debug print with actual state.

	/*

	 * We can not send command to firmware while scanning. When the scan

	 * complete we will schedule this work again. We do check with mutex

	 * locked to prevent new scan request to arrive. We do not check

	 * STATUS_SCANNING to avoid race when queue_work two times from

	 * different notifications, but quit and not perform any work at all.

	/*

	 * Dynamic PS poll related functionality. Adjust RSSI measurements if

	 * necessary.

/*

 * If BT sco traffic, and RSSI monitor is enabled, move measurements to the

 * correct interface or disable it if this is the last interface to be

 * removed.

/*

 * Upon RSSI changes, sends a bt config command with following changes

 *  1. enable/disable "reduced control frames tx power

 *  2. update the "kill)ack_mask" and "kill_cts_mask"

 *

 * If "reduced tx power" is enabled, uCode shall

 *  1. ACK/Back/CTS rate shall reduced to 6Mbps

 *  2. not use duplciate 20/40MHz mode

 no rssi data, no changes to reduce tx power */

 enabling reduced tx power */

 disable reduced tx power */

 bt coex disabled */

 BT on */

 BT off */

 schedule to send runtime bt_config */

 check reduce power before change ack/cts kill mask */

 FIXME: based on notification, adjust the prio_boost */

/*

 * Determine how many receiver/antenna chains to use.

 *

 * More provides better reception via diversity.  Fewer saves power

 * at the expense of throughput, but only when not in powersave to

 * start with.

 *

 * MIMO (dual stream) requires at least 2, but works better with 3.

 * This does not determine *which* chains to use, just how many.

		/*

		 * only use chain 'A' in bt high traffic load or

		 * full concurrency mode

 # of Rx chains to use when expecting MIMO. */

/*

 * When we are in power saving mode, unless device support spatial

 * multiplexing power save, use the active count for rx chain count.

 # Rx chains when idling, depending on SMPS mode */

 up to 4 chains */

/*

 * iwlagn_set_rxon_chain - Set up Rx chain usage in "staging" RXON image

 *

 * Selects how many and which Rx receivers/antennas/chains to use.

 * This should not be used for scan command ... it puts data in wrong place.

	/* Tell uCode which antennas are actually connected.

	 * Before first association, we assume all antennas are connected.

	 * Just after first association, iwl_chain_noise_calibration()

		/*

		 * only use chain 'A' in bt high traffic load or

		 * full concurrency mode

 How many receivers should we use? */

	/* correct rx chain count according hw settings

	 * and chain noise calibration

		/*

		 * For non-QoS this relies on the fact that both the uCode and

		 * mac80211 use TID 0 (as they need to to avoid replay attacks)

		 * for checking the IV in the frames.

 wrapping isn't allowed, AP must rekey */

		/*

		 * For non-QoS this relies on the fact that both the uCode and

		 * mac80211 use TID 0 for checking the IV in the frames.

		/*

		 * Program the minimum sleep time to 10 seconds, as many

		 * platforms have issues processing a wakeup signal while

		 * still being in the process of suspending.

	/*

	 * We know the last used seqno, and the uCode expects to know that

	 * one, it will increment before TX.

	/*

	 * For QoS counters, we store the one to use next, so subtract 0x10

	 * since the uCode will add 0x10 before using the value.

 now configure WoWLAN ucode */

 mark all keys clear */

		/*

		 * This needs to be unlocked due to lock ordering

		 * constraints. Since we're in the suspend path

		 * that isn't really a problem though.

	/*

	 * This can happen upon FW ASSERT: we clear the STATUS_FW_ERROR flag

	 * in iwl_down but cancel the workers only later.

	/*

	 * Synchronous commands from this op-mode must hold

	 * the mutex, this ensures we don't try to send two

	 * (or more) synchronous commands at a time.

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2003 - 2014 Intel Corporation. All rights reserved.

 * Copyright (C) 2019 Intel Corporation

/* Throughput		OFF time(ms)	ON time (ms)

 *	>300			25		25

 *	>200 to 300		40		40

 *	>100 to 200		55		55

 *	>70 to 100		65		65

 *	>50 to 70		75		75

 *	>20 to 50		85		85

 *	>10 to 20		95		95

 *	>5 to 10		110		110

 *	>1 to 5			130		130

 *	>0 to 1			167		167

 *	<=0					SOLID ON

 Set led register off */

/*

 * Adjust led blink rate to compensate on a MAC Clock difference on every HW

 * Led blink rate analysis showed an average deviation of 20% on 5000 series

 * and up.

 * Need to compensate on the led on/off time per HW according to the deviation

 * to achieve the desired led frequency

 * The calculation is: (100-averageDeviation)/100 * blinkTime

 * For code efficiency the calculation will be:

 *     compensation = (100 - averageDeviation) * 64 / 100

 *     NewBlinkTime = (compensation * BlinkTime) / 64

 Set led pattern command */

 led is SOLID_ON */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2014 Intel Corporation. All rights reserved.

 * Copyright (C) 2019 Intel Corporation

/*

 * DVM device-specific data & functions

/*

 * 1000 series

 * ===========

/*

 * For 1000, use advance thermal throttling critical temperature threshold,

 * but legacy thermal management implementation for now.

 * This is for the reason of 1000 uCode using advance thermal throttling API

 * but not implement ct_kill_exit based on ct_kill exit temperature

 * so the thermal throttling will still based on legacy thermal throttling

 * management.

 * The code here need to be modified once 1000 uCode has the advanced thermal

 * throttling algorithm in place

 want Celsius */

 NIC configuration for 1000 series */

 Setting digital SVR for 1000 card to 1.32V */

 locking is acquired in iwl_set_bits_mask_prph() function */

/**

 * iwl_beacon_time_mask_low - mask of lower 32 bit of beacon time

 * @priv: pointer to iwl_priv data structure

 * @tsf_bits: number of bits need to shift for masking)

/**

 * iwl_beacon_time_mask_high - mask of higher 32 bit of beacon time

 * @priv: pointer to iwl_priv data structure

 * @tsf_bits: number of bits need to shift for masking)

/*

 * extended beacon time format

 * time in usec will be changed into a 32-bit value in extended:internal format

 * the extended part is the beacon counts

 * the internal part is the time in usec within one beacon interval

/* base is usually what we get from ucode with each received frame,

 * the same as HW timer counter counting down

 Set initial sensitivity parameters */

/*

 * 2000 series

 * ===========

 want Celsius */

 NIC configuration for 2000 series */

 Set initial sensitivity parameters */

 Due to bluetooth, we transmit 2.4 GHz probes only on antenna A */

/*

 * 5000 series

 * ===========

 NIC configuration for 5000 series */

 max = min for performance bug in 5150 DSP */

 offset = temp - volt / coeff */

 want Celsius */

 Set initial sensitivity parameters */

 Set initial sensitivity parameters */

 now vt hold the temperature in Kelvin */

	/*

	 * MULTI-FIXME

	 * See iwlagn_mac_channel_switch.

	/*

	 * calculate the ucode channel switch time

	 * adding TSF as one of the factor for when to switch

/*

 * 6000 series

 * ===========

 want Celsius */

 NIC configuration for 6000 series */

 2x2 IPA phy type */

 Indicate calibration version to uCode. */

 Indicate calibration version to uCode. */

 Set initial sensitivity parameters */

	/*

	 * MULTI-FIXME

	 * See iwlagn_mac_channel_switch.

	/*

	 * calculate the ucode channel switch time

	 * adding TSF as one of the factor for when to switch

 Due to bluetooth, we transmit 2.4 GHz probes only on antenna A */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2003 - 2014 Intel Corporation. All rights reserved.

 * Copyright(c) 2015 Intel Deutschland GmbH

/*

 * initialize rxon structure with default values from eeprom

	/* TODO:  Figure out when short_preamble would be set and cache from

 clear both MIX and PURE40 mode flag */

	/*

	 * If mac80211 hasn't given us a beacon interval, program

	 * the default into the device (not checking this here

	 * would cause the adjustment below to return the maximum

	 * value, which may break PAN.)

	/*

	 * If the beacon interval we obtained from the peer

	 * is too large, we'll have to wake up more often

	 * (and in IBSS case, we'll beacon too much)

	 *

	 * For example, if max_beacon_val is 4096, and the

	 * requested beacon interval is 7000, we'll have to

	 * use 3500 to be able to wake up on the beacons.

	 *

	 * This could badly influence beacon detection stats.

	/*

	 * TODO: For IBSS we need to get atim_window from mac80211,

	 *	 for now just always use 0

 tsf is modifed by do_div: copy it */

	/*

	 * Un-assoc RXON clears the station table and WEP

	 * keys, so we have to restore those afterwards.

 update -- might need P2P now */

	/* scan complete and commit_rxon use tx_power_next value,

 do not set tx power when scanning or channel changing */

 if fail to set tx_power, restore the orig. tx power */

 RXON timing must be before associated RXON */

 QoS info may be cleared by previous un-assoc RXON */

	/*

	 * We'll run into this code path when beaconing is

	 * enabled, but then we also need to send the beacon

	 * to the device.

	/*

	 * Apply the new configuration.

	 *

	 * Associated RXON doesn't clear the station table in uCode,

	 * so we don't need to restore stations etc. after this.

 IBSS beacon needs to be sent after setting assoc */

	/*

	 * If we issue a new RXON command which required a tune then

	 * we must send a new TXPOWER command or we won't be able to

	 * Tx any frames.

	 *

	 * It's expected we set power here if channel is changing.

	/*

	 * If the PAN context is inactive, then we don't need

	 * to update the PAN parameters, the last thing we'll

	 * have done before it goes inactive is making the PAN

	 * parameters be WLAN-only.

 only 2 slots are currently allowed */

 BSS */

 PAN */

 should be set, but seems unused?? */

	/* FIXME: if the definition of ht.protection changed, the "translation"

	 * will be needed for rxon->flags

	/* Set up channel bandwidth:

 clear the HT channel mode before set the mode */

 pure ht40 */

			/*

			 * Note: control channel is opposite of extension

			 * channel

			/*

			 * Note: control channel is opposite of extension

			 * channel

				/*

				 * channel location only valid if in Mixed

				 * mode

/*

 * iwl_set_rxon_channel - Set the band and channel values in staging RXON

 * @ch: requested channel as a pointer to struct ieee80211_channel



 * NOTE:  Does not commit to the hardware; it sets appropriate bit fields

 * in the staging RXON flag structure based on the ch->band

 Copied from iwl_post_associate() */

 validate RXON structure is valid */

 make sure basic rates 6Mbps and 1Mbps are supported */

/*

 * iwl_full_rxon_required - check if full RXON (vs RXON_ASSOC) cmd is needed

 * @priv: staging_rxon is compared to active_rxon

 *

 * If the RXON structure is changing enough to require a new tune,

 * or is clearing the RXON_FILTER_ASSOC_MSK, then return 1 to indicate that

 * a new tune (full RXON command, rather than RXON_ASSOC cmd) is required.

 These items are only settable from the full RXON command */

	/* flags, filter_flags, ofdm_basic_rates, and cck_basic_rates can

	 * be updated with the RXON_ASSOC command -- however only some

 Check if we are not switching bands */

 Check if we are switching association toggle */

	/*

	 * Now we've got the basic rates as bitmaps in the ofdm and cck

	 * variables. This isn't sufficient though, as there might not

	 * be all the right rates in the bitmap. E.g. if the only basic

	 * rates are 5.5 Mbps and 11 Mbps, we still need to add 1 Mbps

	 * and 6 Mbps because the 802.11-2007 standard says in 9.6:

	 *

	 *    [...] a STA responding to a received frame shall transmit

	 *    its Control Response frame [...] at the highest rate in the

	 *    BSSBasicRateSet parameter that is less than or equal to the

	 *    rate of the immediately previous frame in the frame exchange

	 *    sequence ([...]) and that is of the same modulation class

	 *    ([...]) as the received frame. If no rate contained in the

	 *    BSSBasicRateSet parameter meets these conditions, then the

	 *    control frame sent in response to a received frame shall be

	 *    transmitted at the highest mandatory rate of the PHY that is

	 *    less than or equal to the rate of the received frame, and

	 *    that is of the same modulation class as the received frame.

	 *

	 * As a consequence, we need to add all mandatory rates that are

	 * lower than all of the basic rates to these bitmaps.

 6M already there or needed so always add */

	/*

	 * CCK is a bit more complex with DSSS vs. HR/DSSS vs. ERP.

	 * Note, however:

	 *  - if no CCK rates are basic, it must be ERP since there must

	 *    be some basic rates at all, so they're OFDM => ERP PHY

	 *    (or we're in 5 GHz, and the cck bitmap will never be used)

	 *  - if 11M is a basic rate, it must be ERP as well, so add 5.5M

	 *  - if 5.5M is basic, 1M and 2M are mandatory

	 *  - if 2M is basic, 1M is mandatory

	 *  - if 1M is basic, that's the only valid ACK rate.

	 * As a consequence, it's not as complicated as it sounds, just add

	 * any lower rates to the ACK rate bitmap.

 1M already there or needed so always add */

 "basic_rates" is a misnomer here -- should be called ACK rates */

/*

 * iwlagn_commit_rxon - commit staging_rxon to hardware

 *

 * The RXON command in staging_rxon is committed to the hardware and

 * the active_rxon structure is updated with the new data.  This

 * function correctly transitions out of the RXON_ASSOC_MSK state if

 * a HW tune is required based on the RXON structure changes.

 *

 * The connect/disconnect flow should be as the following:

 *

 * 1. make sure send RXON command with association bit unset if not connect

 *	this should include the channel and the band for the candidate

 *	to be connected to

 * 2. Add Station before RXON association with the AP

 * 3. RXON_timing has to send before RXON for connection

 * 4. full RXON command - associated bit set

 * 5. use RXON_ASSOC command to update any flags changes

 cast away the const for active_rxon in this function */

 This function hardcodes a bunch of dual-mode assumptions */

 always get timestamp with Rx frame */

 recalculate basic rates */

	/*

	 * force CTS-to-self frames protection if RTS-CTS is not preferred

	 * one aggregation protection method

	/*

	 * receive commit_rxon request

	 * abort any previous channel switch if still in process

	/*

	 * If we don't need to send a full RXON, we can use

	 * iwl_rxon_assoc_cmd which is used to reconfigure filter

	 * and other flags for the current radio configuration.

		/*

		 * We do not commit tx power settings while channel changing,

		 * do it now if after settings changed.

 make sure we are in the right PS state */

	/*

	 * Always clear associated first, but with the correct config.

	 * This is required as for example station addition for the

	 * AP station must be done after the BSSID is set to correctly

	 * set up filters in the device.

 mac80211 uses static for non-HT which is what we want */

		/*

		 * Recalculate chain counts.

		 *

		 * If monitor mode is enabled then mac80211 will

		 * set up the SM PS mode to OFF if an HT channel is

		 * configured.

 Configure HT40 channels */

				/* if HT40 is used, it should not change

			/*

			 * Default to no protection. Protection mode will

			 * later be set from BSS config in iwl_ht_conf

			/* if we are switching from ht to 2.4 clear flags

			 * from any ht related info since 2.4 does not

			/*

			 * If at all, this can only happen through a race

			 * when the AP disconnects us while we're still

			 * setting up the connection, in that case mac80211

			 * will soon tell us about that.

		/*

		 * If the peer advertises no support for receiving 2 and 3

		 * stream MCS rates, it can't be transmitting them either.

 If it can't TX MCS at all ... */

			/*

			 * But if it can receive them, it might still not

			 * be able to transmit them, which is what we need

			 * to check here -- so check the number of streams

			 * it advertises for TX (if different from RX).

 currently */

 only AP really */

 check all contexts */

 clear data for chain noise calibration algorithm */

		/*

		 * If we go idle, then clearly no "passive-no-rx"

		 * workaround is needed any more, this is a reset.

	/*

	 * If the ucode decides to do beacon filtering before

	 * association, it will lose beacons that are needed

	 * before sending frames out on passive channels. This

	 * causes association failures on those channels. Enable

	 * receiving beacons in such cases.

		/*

		 * The chain noise calibration will enable PM upon

		 * completion. If calibration has already been run

		 * then we need to enable power management here.

 Enable RX differential gain and sensitivity calibrations */

	/*

	 * We do not commit power settings while scan is pending,

	 * do it now if the settings changed.

	/*

	 * Since setting the RXON may have been deferred while

	 * performing the scan, fire one off if needed

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2014 Intel Corporation. All rights reserved.

 * Copyright(c) 2018        Intel Corporation

/* For active scan, listen ACTIVE_DWELL_TIME (msec) on each channel after

 * sending probe req.  This should be set long enough to hear probe responses

 all times in msec */

/* For passive scan, listen PASSIVE_DWELL_TIME (msec) on each channel.

 * Must be set longer than active dwell time.

 all times in msec */

 For reset radio, need minimal dwell time only */

	/* Exit instantly with error when device is not ready

	 * to receive scan abort command or it does not perform

		/* The scan abort will return 1 for success or

		 * 2 for "failure".  A failure condition can be

		 * due to simply not being in an active scan which

		 * can occur if we send the scan abort before we

		 * the microcode has notified us that a scan is

 check if scan was requested from mac80211 */

 Check if mac80211 requested scan during our internal scan */

 If so request a new scan */

 Can we still talk to firmware ? */

/*

 * iwl_scan_cancel - Cancel any currently executing HW scan

/*

 * iwl_scan_cancel_timeout - Cancel any currently executing HW scan

 * @ms: amount of time to wait (in milliseconds) for scan to abort

	/*

	 * Now STATUS_SCAN_HW is clear. This means that the

	 * device finished, but the background work is going

	 * to execute at best as soon as we release the mutex.

	 * Since we need to be able to issue a new scan right

	 * after this function returns, run the complete here.

	 * The STATUS_SCAN_COMPLETE bit will then be cleared

	 * and prevent the background work from "completing"

	 * a possible new scan.

 Service response to REPLY_SCAN_CMD (0x80) */

 Service SCAN_START_NOTIFICATION (0x82) */

 Service SCAN_RESULTS_NOTIFICATION (0x83) */

 Service SCAN_COMPLETE_NOTIFICATION (0x84) */

	/*

	 * When aborting, we run the scan completed background work inline

	 * and the background work must then do nothing. The SCAN_COMPLETE

	 * bit helps implement that logic and thus needs to be set before

	 * queueing the work. Also, since the scan abort waits for SCAN_HW

	 * to clear, we need to set SCAN_COMPLETE before clearing SCAN_HW

	 * to avoid a race there.

 BT on */

			/*

			 * otherwise, no traffic load information provided

			 * no changes made

 BT off */

 scan handlers */

	/*

	 * If we're associated, we clamp the dwell time 98%

	 * of the beacon interval (minus 2 * channel tune time)

	 * If both contexts are active, we have to restrict to

	 * 1/2 of the minimum of them, because they might be in

	 * lock-step with the time inbetween only half of what

	 * time we'd have in each of them.

 no timing constraints */

 timing constraints if associated */

			/*

			 * These seem to always have timers for TBTT

			 * active in uCode even when not associated yet.

 Return valid, unused, channel for a passive scan to reset the RF */

 Set txpower levels to defaults */

 Set txpower levels to defaults */

		/* NOTE: if we were doing 6Mb OFDM for scans we'd use

		 * power level:

		 * scan_ch->tx_gain = ((1 << 5) | (2 << 3)) | 3;

/*

 * iwl_fill_probe_req - fill in all required fields and IE for probe request

	/* Make sure there is enough space for the probe request,

 ...next IE... */

 fill in our SSID IE */

		/*

		 * Override quiet time as firmware checks that active

		 * dwell is >= quiet; since we use passive scan it'll

		 * not actually be used.

			/*

			 * The highest priority SSID is inserted to the

			 * probe request template.

			/*

			 * Invert the order of ssids, the firmware will invert

			 * it back.

		/*

		 * Internal scans are passive, so we can indiscriminately set

		 * the BT ignore flag on 2.4 GHz since it applies to TX only.

	/*

	 * If active scanning is requested but a certain channel is

	 * marked passive, we can do active scanning if we detect

	 * transmissions.

	 *

	 * There is an issue with some firmware versions that triggers

	 * a sysassert on a "good CRC threshold" of zero (== disabled),

	 * on a radar channel even though this means that we should NOT

	 * send probes.

	 *

	 * The "good CRC threshold" is the number of frames that we

	 * need to receive during our dwell time on a channel before

	 * sending out probes -- setting this to a huge value will

	 * mean we never reach it, but at the same time work around

	 * the aforementioned issue. Thus use IWL_GOOD_CRC_TH_NEVER

	 * here instead of IWL_GOOD_CRC_TH_DISABLED.

	 *

	 * This was fixed in later versions along with some other

	 * scan changes, and the threshold behaves as a flag in those

	 * versions.

 transmit 2.4 GHz probes only on first antenna */

	/*

	 * In power save mode while associated use one chain,

	 * otherwise use all chains

 rx_ant has been set to all valid chains previously */

 operated as 1x1 in full concurrency mode */

 MIMO is not used here, but value is required */

 use bcast addr, will not be transmitted but must be valid */

 set scan bit here for PAN params */

/*

 * internal short scan, this function should only been called while associated.

 * It will reset and tune the radio to prevent possible RF related problem

	/* Since we are here firmware does not finish scan and

	 * most likely is in bad shape, so we don't bother to

	/* We keep scan_check work queued in case when firmware will not

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2003 - 2014 Intel Corporation. All rights reserved.

 * Copyright(c) 2015 Intel Deutschland GmbH

 * Copyright(c) 2018, 2020 Intel Corporation

 *

 * Portions of this file are derived from the ipw3945 project, as well

 * as portionhelp of the ieee80211 subsystem header files.

/******************************************************************************

 *

 * Generic RX handler implementations

 *

	/*

	 * MULTI-FIXME

	 * See iwlagn_mac_channel_switch.

/*

 * iwl_good_plcp_health - checks for plcp error.

 *

 * When the plcp error is exceeding the thresholds, reset the radio

 * to improve the throughput.

 Can be negative if firmware reset statistics */

	/*

	 * There is no easy and better way to force reset the radio,

	 * the only known method is switching channel which will force to

	 * reset and tune the radio.

	 * Use internal short scan (single channel) operation to should

	 * achieve this objective.

	 * Driver should reset the radio when number of consecutive missed

	 * beacon, or any other uCode error condition detected.

 Only gather statistics and update time stamp when not associated */

 Do not check/recover when do not have enough statistics data */

/* Calculate noise level, based on measurements during network silence just

 *   before arriving beacon.  This measurement can be done only if we know

 Average among active antennas */

/*

 *  based on the assumption of all statistics counter are in DWORD

 *  FIXME: This function is for debugging, do not deal with

 *  the case of counters roll-over.

 handle this exception directly */

	/* Reschedule the statistics timer to occur in

	 * reg_recalib_period seconds to ensure we get a

	 * thermal update even if the uCode doesn't give

/* Handle notification from uCode that card's power state is changing

/* Cache phy data (Rx signal strength, etc) for HT frame (REPLY_RX_PHY_CMD).

/*

 * returns non-zero if packet should be dropped

	/*

	 * All contexts have the same setting here due to it being

	 * a module parameter, so OK to check any context.

		/* The uCode has got a bad phase 1 Key, pushes the packet.

			/* bad ICV, the packet is destroyed since the

 We only process data packets if the interface is open */

 In case of HW accelerated crypto and bad decryption, drop */

	/* Dont use dev_alloc_skb(), we'll have enough headroom once

	 * ieee80211_hdr pulled.

	/* If frame is small enough to fit in skb->head, pull it completely.

	 * If not, only pull ieee80211_hdr so that splice() or TCP coalesce

	 * are more efficient.

	/*

	* Wake any queues that were stopped due to a passive channel tx

	* failure. This can happen because the regulatory enforcement in

	* the device waits for a beacon before allowing transmission,

	* sometimes even after already having transmitted frames for the

	* association because the new RXON may reset the information.

 packet was not encrypted */

 packet was encrypted with unknown alg */

 decryption was not done in HW */

 alg is CCM: check MIC only */

 Bad MIC */

 Bad TTAK */

 Calc max signal level (dBm) among 3 possible receivers */

	/* data from PHY/DSP regarding signal strength, etc.,

	 *   contents are always there, not configurable by host

	/* Find max rssi among 3 possible receivers.

	 * These values are measured by the digital signal processor (DSP).

	 * They should stay fairly constant even as the signal strength varies,

	 *   if the radio's automatic gain control (AGC) is working right.

	 * AGC value (see below) will provide the "interesting" info.

	/* dBm = max_rssi dB - agc dB - constant.

 Called for REPLY_RX_MPDU_CMD */

 This will be used in several places later */

 rx_status carries information about the packet to mac80211 */

	/* TSF isn't reliable. In order to allow smooth user experience,

rx_status.flag |= RX_FLAG_MACTIME_START;*/

 Find max signal strength (dBm) among 3 antenna/receiver chains */

	/*

	 * "antenna number"

	 *

	 * It seems that the antenna field in the phy flags value

	 * is actually a bit field. This is undefined by radiotap,

	 * it wants an actual antenna number but I always get "7"

	 * for most legacy frames I receive indicating that the

	 * same frame was received on all three RX chains.

	 *

	 * I think this field should be removed in favor of a

	 * new 802.11n radiotap field "RX chains" that is defined

	 * as a bitmask.

 set the preamble flag if appropriate */

		/*

		 * We know which subframes of an A-MPDU belong

		 * together since we get a single PHY response

		 * from the firmware for all of them

 Set up the HT phy flags */

 no condition -- we're in softirq */

 EID, len, OUI, subtype */

 P2P id, P2P length */

 not counting EID, len */

/*

 * iwl_setup_rx_handlers - Initialize Rx handler callbacks

 *

 * Setup the RX handlers for each of the reply types sent from the uCode

 * to the host.

	/*

	 * The same handler is used for both the REPLY to a discrete

	 * statistics request from the host as well as for the periodic

	 * statistics notifications (after received beacons) from the uCode.

 Rx handlers */

 block ack */

 set up notification wait support */

 Set up BT Rx handlers */

	/*

	 * Do the notification wait before RX handlers so

	 * even if the RX handler consumes the RXB we have

	 * access to it in the notification wait entry.

	/* Based on type of command response or notification,

	 *   handle those that need handling via function in

 No handling needed */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2003 - 2014 Intel Corporation. All rights reserved.

 *

 * Portions of this file are derived from the ipw3945 project, as well

 * as portions of the ieee80211 subsystem header files.

 debug messages are printed in the handler */

 special case for RXON */

/*

 * iwl_prep_station - Prepare station information for addition

 *

 * should be called with sta_lock held

	/*

	 * These two conditions have the same outcome, but keep them

	 * separate

	/*

	 * uCode is not able to deal with multiple requests to add a

	 * station. Keep track if one is in progress so that we do not send

	 * another.

 Set up the REPLY_ADD_STA command to send to device */

	/*

	 * OK to call unconditionally, since local stations (IBSS BSSID

	 * STA and broadcast STA) pass in a NULL sta, and mac80211

	 * doesn't allow HT IBSS.

/*

 * iwl_add_station_common -

	/*

	 * uCode is not able to deal with multiple requests to add a

	 * station. Keep track if one is in progress so that we do not send

	 * another.

 Add station to device's station table */

/*

 * iwl_sta_ucode_deactivate - deactivate ucode status for a station

 Ucode must be active and driver must be non active */

/*

 * iwl_remove_station - Remove driver's knowledge of station.

		/*

		 * It is typical for stations to be removed when we are

		 * going down. Return success since device will be down

		 * soon anyway

	/* Set up the rate scaling to start at selected rate, fall back

/*

 * iwl_clear_ucode_stations - clear ucode station table bits

 *

 * This function clears all the bits in the driver indicating

 * which stations are active in the ucode. Call when something

 * other than explicit station management would cause this in

 * the ucode, e.g. unassociated RXON.

/*

 * iwl_restore_stations() - Restore driver known stations to device

 *

 * All stations considered active by driver, but not present in ucode, is

 * restored.

 *

 * Function sleeps.

			/*

			 * Rate scaling has already been initialized, send

			 * current LQ command

/*

 * is_lq_table_valid() - Test one aspect of LQ cmd for validity

 *

 * It sometimes happens when a HT rate has been in use and we

 * loose connectivity with AP then mac80211 will first tell us that the

 * current channel is not HT anymore before removing the station. In such a

 * scenario the RXON flags will be updated to indicate we are not

 * communicating HT anymore, but the LQ command may still contain HT rates.

 * Test for this to prevent driver from sending LQ command between the time

 * RXON flags are updated and when LQ command is updated.

/*

 * iwl_send_lq_cmd() - Send link quality command

 * @init: This command is sent as part of station initialization right

 *        after station has been added.

 *

 * The link quality command is sent as the last step of station creation.

 * This is the special case in which init is set and we call a callback in

 * this case to clear the state indicating that station creation is in

 * progress.

/*

 * iwlagn_add_bssid_station - Add the special IBSS BSSID station

 *

 * Function sleeps.

 Set up default rate scaling table in device's station table */

/*

 * static WEP keys

 *

 * For each context, the device has a table of 4 static WEP keys

 * (one for each key index) that is updated with the following

 * commands.

 but keys in device are clear anyway so return success */

/*

 * dynamic (per-station) keys

 *

 * The dynamic keys are a little more complicated. The device has

 * a key cache of up to STA_KEY_MAX_NUM/STA_KEY_MAX_NUM_PAN keys.

 * These are linked to stations by a table that contains an index

 * into the key table for each station/key index/{mcast,unicast},

 * i.e. it's basically an array of pointers like this:

 *	key_offset_t key_mapping[NUM_STATIONS][4][2];

 * (it really works differently, but you can think of it as such)

 *

 * The key uploading and linking happens in the same command, the

 * add station command with STA_MODIFY_KEY_MASK.

	/*

	 * The device expects GTKs for station interfaces to be

	 * installed as GTKs for the AP station. If we have no

	 * station ID, then use the ap_sta_id in that case.

 key pointer (offset) */

		/* cancel scan failed, just live w/ bad key and rely

 if station isn't there, neither is the key */

 station mode case only */

 pre-fill phase 1 key into device cache */

/*

 * iwlagn_alloc_bcast_station - add broadcast station into driver's station table.

 *

 * This adds the broadcast station into the driver's station table

 * and marks it driver active, so that it will be restored to the

 * device at the next best time.

/*

 * iwl_update_bcast_station - update broadcast station's LQ command

 *

 * Only used by iwlagn. Placed here to have all bcast station management

 * code together.

/*

 * iwl_sta_tx_modify_enable_tid - Enable Tx for this TID in station table

 Remove "disable" flag, to enable Tx for this TID */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2007 - 2014 Intel Corporation. All rights reserved.

 * Copyright (C) 2019 Intel Corporation

 *

 * Portions of this file are derived from the ipw3945 project, as well

 * as portions of the ieee80211 subsystem header files.

/*

 * Setting power level allows the card to go to sleep when not busy.

 *

 * We calculate a sleep command based on the required latency, which

 * we get from mac80211. In order to handle thermal throttling, we can

 * also use pre-defined power levels.

/*

 * This defines the old power levels. They are still used by default

 * (level 1) and for thermal throttle (levels 3 through 5)

 number of skip dtim */

 default power management (not Tx power) table values */

 for DTIM period 0 through IWL_DTIM_RANGE_0_MAX */

 DTIM 0 - 2 */

 for DTIM period IWL_DTIM_RANGE_0_MAX + 1 through IWL_DTIM_RANGE_1_MAX */

 DTIM 3 - 10 */

 for DTIM period > IWL_DTIM_RANGE_1_MAX */

 DTIM 11 - */

 advance power management */

 DTIM 0 - 2 */

 for DTIM period IWL_DTIM_RANGE_0_MAX + 1 through IWL_DTIM_RANGE_1_MAX */

 DTIM 3 - 10 */

 for DTIM period > IWL_DTIM_RANGE_1_MAX */

 DTIM 11 - */

 figure out the listen interval based on dtim period and skip */

 enforce max sleep interval */

	/* The power level here is 0-4 (used as array index), but user expects

 in thermal throttling low power state */

		/* Note that the user parameter is 1-5 (according to spec),

 Don't update the RX chain when chain noise calibration is running */

 scan complete use sleep_power_next, need to be updated */

 initialize to default */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2014 Intel Corporation. All rights reserved.

 * Copyright (C) 2018 Intel Corporation

 create and remove of files */

 file operation */

 default is to dump the entire data segment */

 adjust sram address since reads are only on even u32 boundaries */

 read the first u32 from sram */

 put the address at the start of every line */

 if all bytes processed, read the next u32 from sram */

 put in extra spaces and split lines for human readability */

 Add 30 for initial string */

 4 characters for byte 0xYY */

 24 items * 64 char per item */

	/*

	 * Our users expect 0 to be "CAM", but 0 isn't actually

	 * valid here. However, let's not confuse them and present

	 * IWL_POWER_INDEX_1 as "1", not "0".

 see the write function */

	/*

	 * the statistic information display here is based on

	 * the last statistics notification from uCode

	 * might not reflect the current uCode activity

	/* the statistic information display here is based on

	 * the last statistics notification from uCode

	 * might not reflect the current uCode activity

	/* the statistic information display here is based on

	 * the last statistics notification from uCode

	 * might not reflect the current uCode activity

 make request to uCode to retrieve statistics information */

	/*

	 * the statistic information display here is based on

	 * the last statistics notification from uCode

	 * might not reflect the current uCode activity

 make request to uCode to retrieve statistics information */

 start collecting data now */

 check that the interface is up */

 take the return value to make compiler happy - it will fail anyway */

/*

 * Create the debugfs files and directories

 *

 Calibrations disabled/enabled status*/

	/*

	 * Create a symlink with mac80211. This is not very robust, as it does

	 * not remove the symlink created. The implicit assumption is that

	 * when the opmode exits, mac80211 will also exit, and will remove

	 * this symlink as part of its cleanup.

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2003 - 2014 Intel Corporation. All rights reserved.

 * Copyright (C) 2018 - 2019 Intel Corporation

 *

 * Portions of this file are derived from the ipw3945 project, as well

 * as portions of the ieee80211 subsystem header files.

/*****************************************************************************

 *

 * mac80211 entry point functions

 *

/*

 * Not a mac80211 entry point function, but it fits in with all the

 * other mac80211 functions grouped here.

 Tell mac80211 our characteristics */

	/*

	 * Including the following line will crash some AP's.  This

	 * workaround removes the stimulus which causes the crash until

	 * the AP software can be fixed.

	hw->max_tx_aggregation_subframes = LINK_QUAL_AGG_FRAME_LIMIT_DEF;

	/*

	 * Enable 11w if advertised by firmware and software crypto

	 * is not enabled (as the firmware will interpret some mgmt

	 * packets, so enabling it with software crypto isn't safe)

 we create the 802.11 header and a max-length SSID element */

	/*

	 * We don't use all queues: 4 and 9 are unused and any

	 * aggregation queue gets mapped down to the AC queue.

 we should be verifying the device is ready to be opened */

 Now we should be done, and the READY bit should be set. */

 Don't attempt WoWLAN when not associated, tear down instead. */

 let the ucode operate on its own */

 cf. struct iwl_error_event_table */

 we'll clear ctx->vif during iwlagn_prepare_restart() */

 uCode is no longer operating by itself */

	/*

	 * This is very strange. The GET_STATUS command is sent but the device

	 * doesn't reply properly, it seems it doesn't close the RBD so one is

	 * always left open ... As a result, we need to send another command

	 * and have to reset the driver afterwards. As we need to switch to

	 * runtime firmware again that'll happen.

 an RBD is left open in the firmware now! */

	/*

	 * We could program these keys into the hardware as well, but we

	 * don't expect much multicast traffic in IBSS and having keys

	 * for more stations is probably more useful.

	 *

	 * Mark key TX-only and return 0.

 If they key was TX-only, accept deletion */

	/*

	 * If we are getting WEP group key and we didn't receive any key mapping

	 * so far, we are in legacy wep mode (group key only), otherwise we are

	 * in 1X mode.

	 * In legacy wep mode, we use another host command to the uCode.

			/*

			 * can't add key for RX, but we don't need it

			 * in the device for TX so still return 0

			/*

			 * switch off RTS/CTS if it was previously enabled

 Should we return success if return code is EEXIST ? */

		/*

		 * Station will be removed from device when the RXON

		 * is set to unassociated -- just deactivate it here

		 * to avoid re-programming it.

		/*

		 * Clear the in-progress flag, the AP station entry was added

		 * but we'll initialize LQ only when we've associated (which

		 * would also clear the in-progress flag). This is necessary

		 * in case we never initialize LQ because association fails.

 Initialize rate scaling */

 Initialize rate scaling */

	/*

	 * mac80211 might WARN if we fail, but due the way we

	 * (badly) handle hard rfkill, we might fail here

	/*

	 * MULTI-FIXME

	 * When we add support for multiple interfaces, we need to

	 * revisit this. The channel switch command in the device

	 * only affects the BSS context, but what does that really

	 * mean? And what if we get a CSA on the second interface?

	 * This needs a lot of work.

 Configure HT40 channels */

	/*

	 * at this point, staging_rxon has the

	 * configuration for channel switch

	/*

	 * MULTI-FIXME

	 * See iwlagn_mac_channel_switch.

 Setting _just_ RXON_FILTER_CTL2HOST_MSK causes FH errors */

		/*

		 * Not committing directly because hardware can perform a scan,

		 * but we'll eventually commit the filter flags change anyway.

	/*

	 * Receiving all multicast frames is always enabled by the

	 * default flags setup in iwl_connection_init_rx_config()

	 * since we currently do not support programming multicast

	 * filters into the device.

	/*

	 * This variable will be correct only when there's just

	 * a single context, but all code using it is for hardware

	 * that supports only one context.

		/*

		 * pretend to have high BT traffic as long as we

		 * are operating in IBSS mode, as this will cause

		 * the rate scaling etc. to behave as intended.

 set up queue mappings */

 On reset we need to add the same interface again */

 check if this busy context is exclusive */

 have maybe usable context w/o interface */

	/*

	 * In SNIFFER device type, the firmware reports the FCS to

	 * the host, rather than snipping it off. Unfortunately,

	 * mac80211 doesn't (yet) provide a per-packet flag for

	 * this, so that we have to set the hardware flag based

	 * on the interfaces added. As the monitor interface can

	 * only be present by itself, and will be removed before

	 * other interfaces are added, this is safe.

	/*

	 * When removing the IBSS interface, overwrite the

	 * BT traffic load with the stored one from the last

	 * notification, if any. If this is a device that

	 * doesn't implement this, this has no effect since

	 * both values are the same and zero.

	/*

	 * To simplify this code, only support changes on the

	 * BSS context. The PAN context is usually reassigned

	 * by creating/removing P2P interfaces anyway.

		/*

		 * Huh? But wait ... this can maybe happen when

		 * we're in the middle of a firmware restart!

 Check if the switch is supported in the same context */

			/*

			 * The current mode switch would be exclusive, but

			 * another context is active ... refuse the switch.

 success */

	/*

	 * We've switched internally, but submitting to the

	 * device may have failed for some reason. Mask this

	 * error, because otherwise mac80211 will not switch

	 * (and set the interface type back) and we'll be

	 * out of sync with it.

	/*

	 * If an internal scan is in progress, just set

	 * up the scan_request as per above.

		/*

		 * mac80211 will only ask for one band at a time

		 * so using channels[0] here is ok

 This function both allocates and initializes hw and priv. */

	/* mac80211 allocates memory for this device instance, including

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2014 Intel Corporation. All rights reserved.

 * Copyright(c) 2015 Intel Deutschland GmbH

/******************************************************************************

 *

 * uCode download functions

 *

/*

 *  Calibration

		/*

		 * Tell uCode we are ready to perform calibration

		 * need to perform this before any calibration

		 * no need to close the envlope since we are going

		 * to load the runtime uCode later.

	/**

	 * temperature offset calibration is only needed for runtime ucode,

	 * so prepare the value now.

 coexistence is disabled */

	/*

	 * Some things may run in the background now, but we

	 * just wait for the ALIVE notification here.

 delay a bit to give rfkill time to run */

 No init ucode required? Curious, but maybe ok */

 Will also start the device */

	/*

	 * Some things may run in the background now, but we

	 * just wait for the calibration complete notification.

 Whatever happened, stop the device */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2005-2014 Intel Corporation

/*****************************************************************************

 * INIT calibrations framework

 Opaque calibration results */

 data follows */

 wasn't in list already */

/*****************************************************************************

 * RUNTIME calibrations framework

/* "false alarms" are signals that our DSP tries to lock onto,

 *   but then determines that they are either noise, or transmissions

 *   from a distant wireless network (also "noise", really) that get

 *   "stepped on" by stronger transmissions within our own network.

 * This algorithm attempts to set a sensitivity level that is high

 *   enough to receive all of our own network traffic, but not so

 *   high that our DSP gets too busy trying to lock onto non-network

	/* "false_alarms" values below are cross-multiplications to assess the

	 *   numbers of false alarms within the measured period of actual Rx

	 *   (Rx is off when we're txing), vs the min/max expected false alarms

	 *   (some should be expected if rx is sensitive enough) in a

	 *   hypothetical listening period of 200 time units (TU), 204.8 msec:

	 *

	 * MIN_FA/fixed-time < false_alarms/actual-rx-time < MAX_FA/beacon-time

	 *

	/* Find max silence rssi among all 3 receivers.

	 * This is background noise, which may include transmissions from other

 Store silence rssi in 20-beacon history table */

 Find max silence rssi across 20 beacon history */

	/* Find max rx energy (min value!) among all 3 receivers,

	 *   measured during beacon frame.

	/* Find min rx energy (max value) across 10 beacon history.

	 * This is the minimum signal level that we want to receive well.

	 * Add backoff (margin so we don't miss slightly lower energy frames).

	/* Count number of consecutive beacons with fewer-than-desired

 If we got too many false alarms this time, reduce sensitivity */

 Store for "fewer than desired" on later beacon */

		/* increase energy threshold (reduce nrg value)

 Else if we got fewer than desired, increase sensitivity */

		/* Compare silence level with silence level for most recent

		/* Increase value to increase sensitivity, but only if:

		 * 1a) previous beacon did *not* have *too many* false alarms

		 * 1b) AND there's a significant difference in Rx levels

		 *      from a previous beacon with too many, or healthy # FAs

		 * OR 2) We've seen a lot of beacons (100) with too few

 Increase nrg value to increase sensitivity */

 Else we got a healthy number of false alarms, keep status quo */

 Store for use in "fewer than desired" with later beacon */

		/* If previous beacon had too many false alarms,

		 *   give it some extra margin by reducing sensitivity again

	/* Make sure the energy threshold does not go above the measured

	 * energy of the desired Rx signals (reduced by backoff margin),

	 * or else we might start missing Rx frames.

	 * Lower value is higher energy, so we use max()!

 Auto-correlation CCK algorithm */

		/* increase auto_corr values to decrease sensitivity

		 * so the DSP won't be disturbed by the noise

 Decrease auto_corr values to increase sensitivity */

 If we got too many false alarms this time, reduce sensitivity */

 Else if we got fewer than desired, increase sensitivity */

 Prepare a SENSITIVITY_CMD, send to uCode if values have changed */

 Update uCode's "work" table, and copy it to DSP */

 Don't send command to uCode if nothing has changed */

 Copy table for comparison next time */

 Prepare a SENSITIVITY_CMD, send to uCode if values have changed */

 Update uCode's "work" table, and copy it to DSP */

 Don't send command to uCode if nothing has changed */

 Copy table for comparison next time */

 Clear driver's sensitivity algo data */

 Extract Statistics: */

	/* These statistics increase monotonically, and do not reset

	 *   at each beacon.  Calculate difference from last value, or just

 Total aborted signal locks */

/*

 * Run disconnected antenna algorithm to find out which antennas are

 * disconnected.

 Compare signal strengths for all 3 receivers. */

			/* If signal is very weak, compared with

	/*

	 * The above algorithm sometimes fails when the ucode

	 * reports 0 for all chains. It's not clear why that

	 * happens to start with, but it is then causing trouble

	 * because this can make us enable more chains than the

	 * hardware really has.

	 *

	 * To be safe, simply mask out any chains that we know

	 * are not on the device.

		/* loops on all the bits of

 there is a Tx antenna connected */

			/*

			 * If all chains are disconnected

			 * connect the first valid tx chain

 Save for use within RXON, TX, SCAN commands, etc. */

	/*

	 * Find Gain Code for the chains based on "default chain"

 bound gain by 2 bits value max, 3rd bit is sign */

			/*

			 * set negative sign ...

			 * note to Intel developers:  This is uCode API format,

			 *   not the format of any internal device registers.

			 *   Do not change this format for e.g. 6050 or similar

			 *   devices.  Change format only if more resolution

			 *   (i.e. more than 2 bits magnitude) is needed.

/*

 * Accumulate 16 beacons of signal and noise statistics for each of

 *   3 receivers/antennas/rx-chains, then figure out:

 * 1)  Which antennas are connected.

 * 2)  Differential rx gain settings to balance the 3 receivers.

	/*

	 * MULTI-FIXME:

	 * When we support multiple interfaces on different channels,

	 * this must be modified/fixed.

	/*

	 * Accumulate just the first "chain_noise_num_beacons" after

	 * the first association, then we're done forever.

	/* Make sure we accumulate data for just the associated channel

	/*

	 *  Accumulate beacon statistics values across

	 * "chain_noise_num_beacons"

	/* If this is the "chain_noise_num_beacons", determine:

	 * 1)  Disconnected antennas (using signal strengths)

 Analyze signal for disconnected antenna */

		/* Disable disconnected antenna algorithm for advanced

 Analyze noise for rx balance */

			/* This means that chain i is active and has

	/* Some power changes may have been made during the calibration.

	 * Update and commit the RXON

	/* Ask for statistics now, the uCode will send notification

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2014 Intel Corporation. All rights reserved.

 * Copyright (C) 2019 Intel Corporation

/*

 * handle build REPLY_TX command notification.

 Set retry limit on RTS packets */

 Set retry limit on DATA packets and Probe Responses*/

	/* DATA packets will use the uCode station table for rate/antenna

	/**

	 * If the current TX rate stored in mac80211 has the MCS bit set, it's

	 * not really a TX rate.  Thus, we use the lowest supported rate for

	 * this band.  Also use the lowest supported rate if the stored rate

	 * index is invalid.

 For 5 GHZ band, remap mac80211 rate indices into driver indices */

 Get PLCP rate for tx_cmd->rate_n_flags */

 Zero out flags for this packet */

 Set CCK flag as needed */

 Set up antennas */

 operated as 1x1 in full concurrency mode */

 Set the rate in the TX cmd */

/**

 * iwl_sta_id_or_broadcast - return sta_id or broadcast sta

 * @context: the current context

 * @sta: mac80211 station

 *

 * In certain circumstances mac80211 passes a station pointer

 * that may be %NULL, for example during TX or key setup. In

 * that case, we need to use the broadcast station, so this

 * inline wraps that pattern.

	/*

	 * mac80211 should not be passing a partially

	 * initialised station!

/*

 * start REPLY_TX command process

 For management frames use broadcast id to do not break aggregation */

 Find index into station table for destination station */

		/*

		 * This sends an asynchronous command to the device,

		 * but we can rely on it being processed before the

		 * next frame is processed -- and the next frame to

		 * this station is the one that will consume this

		 * counter.

		 * For now set the counter to just 1 since we do not

		 * support uAPSD yet.

		 *

		 * FIXME: If we get two non-bufferable frames one

		 * after the other, we might only send out one of

		 * them because this is racy.

 Total # bytes to be transmitted */

 TODO need this for burst mode later on */

 From now on, we cannot access info->control */

 aggregation is on for this <sta,tid> */

		/* We can receive packets from the stack in IWL_AGG_{ON,OFF}

		 * only. Check this here.

 Copy MAC header from skb into command buffer */

		/*

		 * The microcode will clear the more data

		 * bit in the last frame it transmits.

	/*

	 * Avoid atomic ops if it isn't an associated client.

	 * Also, if this is a packet for aggregation, don't

	 * increase the counter because the ucode will stop

	 * aggregation queues when their respective station

	 * goes to sleep.

		/*

		* This can happen if the peer stops aggregation

		* again before we've had a chance to drain the

		* queue we selected previously, i.e. before the

		* session was really started completely.

		/*

		 * This can happen when the session is stopped before

		 * we receive ADDBA response

 There are still packets for this RA / TID in the HW */

		/*

		 * If the transport didn't know that we wanted to start

		 * agreggation, don't tell it that we want to stop them.

		 * This can happen when we don't get the addBA response on

		 * time, or we hadn't time to drain the AC queues.

	/*

	 * First set the agg state to OFF to avoid calling

	 * ieee80211_stop_tx_ba_cb in iwlagn_check_ratid_empty.

		/*

		 * If the transport didn't know that we wanted to start

		 * agreggation, don't tell it that we want to stop them.

		 * This can happen when we don't get the addBA response on

		 * time, or we hadn't time to drain the AC queues.

	/*

	 * If the limit is 0, then it wasn't initialised yet,

	 * use the default. We can do that since we take the

	 * minimum below, and we don't want to go above our

	 * default due to hardware restrictions.

	/*

	 * Even though in theory the peer could have different

	 * aggregation reorder buffer sizes for different sessions,

	 * our ucode doesn't allow for that and has a global limit

	 * for each station. Therefore, use the minimum of all the

	 * aggregation sessions and our default value.

		/*

		 * switch to RTS/CTS if it is the prefer protection

		 * method for HT traffic

 There are no packets for this RA / TID in the HW any more */

 There are no packets for this RA / TID in the HW any more */

 avoid atomic ops if this isn't a client */

/*

 * translate ucode response to mac80211 tx status control values

 CONFIG_IWLWIFI_DEBUG */

	/*

	 * If the BT kill count is non-zero, we'll get this

	 * notification again.

 Construct bit-map of pending frames within Tx window */

 CONFIG_IWLWIFI_DEBUG */

			/* If this is an aggregation queue, we can rely on the

			 * ssn since the wifi sequence number corresponds to

			 * the index in the TFD ring (%256).

			 * The seq_ctl is the sequence control of the packet

			 * to which this Tx response relates. But if there is a

			 * hole in the bitmap of the BA we received, this Tx

			 * response may allow to reclaim the hole and all the

			 * subsequent packets that were already acked.

			 * In that case, seq_ctl != ssn, and the next packet

			 * to be reclaimed will be ssn and not seq_ctl.

 process frames */

 block and stop all queues */

 check if BAR is needed */

/*

 * iwlagn_rx_reply_compressed_ba - Handler for REPLY_COMPRESSED_BA

 *

 * Handles block-acknowledge notification from device, which reports success

 * of frames sent via aggregation.

 "flow" corresponds to Tx queue */

	/* "ssn" is start of block-ack Tx window, corresponds to index

		/*

		 * FIXME: this is a uCode bug which need to be addressed,

		 * log the information and return for now.

		 * Since it is can possibly happen very often and in order

		 * not to fill the syslog, don't use IWL_ERR or IWL_WARN

	/* Release all TFDs before the SSN, i.e. all TFDs in front of

	 * block-ack window (we assume that they've been successfully

 Mark that the expected block-ack response arrived */

 Sanity check values reported by uCode */

		/*

		 * set txed_2_done = txed,

		 * so it won't impact rate scale

		/* Packet was transmitted successfully, failures come as single

		 * frames because before failing a frame the firmware transmits

		 * it without aggregation at least once.

 this is the first skb we deliver in this batch */

 put the rate scaling data there */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2003 - 2014, 2018 - 2021  Intel Corporation. All rights reserved.

 * Copyright(c) 2015 Intel Deutschland GmbH

 *

 * Portions of this file are derived from the ipw3945 project, as well

 * as portions of the ieee80211 subsystem header files.

/******************************************************************************

 *

 * module boiler plate

 *

/* Please keep this array *SORTED* by hex value.

 * Access is done through binary search.

 * A warning will be triggered on violation.

 Parse the beacon frame to find the TIM element and set tim_idx & tim_size */

	/*

	 * The index is relative to frame start but we start looking at the

	 * variable-length part of the beacon.

 Parse variable-length elements of beacon to find WLAN_EID_TIM */

 If TIM field was found, set variables */

	/*

	 * We have to set up the TX command, the TX Beacon command, and the

	 * beacon contents.

 Allocate beacon command */

 Set up TX command fields */

 Set up TX beacon command fields */

 Set up packet rate and flags */

	/*

	 * Let's set up the rate at least somewhat correctly;

	 * it will currently not actually be used by the uCode,

	 * it uses the broadcast station's rate instead.

 In mac80211, rates for 5 GHz start at 0 */

 Submit command */

		/*

		 * The ucode will send beacon notifications even in

		 * IBSS mode, but we don't want to process them. But

		 * we need to defer the type check to here due to

		 * requiring locking around the beacon_ctx access.

 Pull updated AP beacon from mac80211. will fail if not in AP mode */

 new beacon skb is allocated every time; dispose previous.*/

 dont send host command if rf-kill is on */

 dont send host command if rf-kill is on */

	/*

	 * LQ & RXON updated cmds must be sent before BT Config cmd

	 * to avoid 3-wire collisions

/*

 * iwl_bg_statistics_periodic - Timer callback to queue statistics

 *

 * This callback is provided in order to send a statistics request.

 *

 * This timer function is continually reset to execute within

 * REG_RECALIB_PERIOD seconds since the last STATISTICS_NOTIFICATION

 * was received.  We need to ensure we receive the statistics in order

 * to update the temperature used for calibrating the TXPOWER.

 dont send host command if rf-kill is on */

 SRAM byte address of log data */

 event log data */

 Make sure device is powered up for SRAM reads */

 Set starting address; reads will auto-increment */

	/*

	 * Refuse to read more than would have fit into the log from

	 * the current start_idx. This used to happen due to the race

	 * described below, but now WARN because the code below should

	 * prevent it from happening here.

	/*

	 * "time" is actually "data" for mode 0 (no timestamp).

	 * place event id # at far right for easier visual parsing.

 Allow device to power down */

 event log capacity in # entries */

 SRAM byte address of event log header */

 0 - no timestamp, 1 - timestamp recorded */

 # times uCode wrapped to top of log */

 index of next entry to be written by uCode */

	/*

	 * Unfortunately, the uCode doesn't use temporary variables.

	 * Therefore, it can happen that we read next_entry == capacity,

	 * which really means next_entry == 0.

	/*

	 * Additionally, the uCode increases the write pointer before

	 * the wraps counter, so if the write pointer is smaller than

	 * the old write pointer (wrap occurred) but we read that no

	 * wrap occurred, we actually read between the next_entry and

	 * num_wraps update (this does happen in practice!!) -- take

	 * that into account by increasing num_wraps.

/*

 * iwl_bg_ucode_trace - Timer callback to log ucode event

 *

 * The timer is continually set to execute every

 * UCODE_TRACE_PERIOD milliseconds after the last timer expired

 * this function is to perform continuous uCode event logging operation

 * if enabled

 Reschedule the timer to occur in UCODE_TRACE_PERIOD */

 do nothing if rf-kill is on */

/*

 * queue/FIFO/AC mapping definitions

	/*

	 * The default context is always valid,

	 * the PAN context depends on uCode.

/*

 * iwl_alive_start - called after REPLY_ALIVE notification received

 *                   from protocol/runtime uCode (initialization uCode's

 *                   Alive gets handled by iwl_init_alive_start()).

 After the ALIVE response, we can send host commands to the uCode */

 start collecting data now */

 download priority table before any calibration request */

 Configure Bluetooth device coexistence support */

 FIXME: w/a to force change uCode BT state machine */

		/*

		 * default is 2-wire BT coexexistence support

	/*

	 * Perform runtime calibrations, including DC calibration.

 Configure Tx antenna selection based on H/W config */

 apply any changes in staging */

 Initialize our rx_config data */

 WoWLAN ucode will not reply in the same way, skip it */

 Configure the adapter for unassociated operation */

 At this point, the NIC is initialized and operational */

/**

 * iwl_clear_driver_stations - clear knowledge of all stations from driver

 * @priv: iwl priv struct

 *

 * This is called during iwl_down() to make sure that in the case

 * we're coming there from a hardware restart mac80211 will be

 * able to reconfigure stations -- if we're getting there in the

 * normal down flow then the stations will already be cleared.

		/*

		 * Remove all key information that is not stored as part

		 * of station information since mac80211 may not have had

		 * a chance to remove all the keys. When device is

		 * reconfigured by mac80211 after an error all keys will

		 * be reconfigured.

 reset BT coex data */

	/* Wipe out the EXIT_PENDING status bit if we are not actually

 Set num_aux_in_flight must be done after the transport is stopped */

 Clear out all status bits but a few that are stable across reset */

/*****************************************************************************

 *

 * Workqueue callbacks

 *

	/*

	 * __iwl_down() will clear the BT status variables,

	 * which is correct, but when we restart we really

	 * want to keep them so restore them afterwards.

	 *

	 * The restart process will later pick them up and

	 * re-configure the hw when we reconfigure the BT

	 * command.

 reset aggregation queues */

 and stop counts */

/*****************************************************************************

 *

 * driver setup and teardown

 *

 Choose which receivers/antennas to use */

 init bt coex */

 Device-specific setup */

 show what optional capabilities we have */

	/************************

	 * 1. Allocating HW data

	/*

	 * Populate the state variables that the transport layer needs

	 * to know about.

 Configure transport layer */

 At this point both hw and priv are allocated. */

 bt channel inhibition enabled*/

	/* these spin locks will be used in apm_ops.init and EEPROM access

	 * we should init now

	/***********************

	 * 2. Read REV register

 Read the EEPROM */

 Reset chip to save power until we load uCode during "up". */

 extract MAC Address */

	/************************

	 * 4. Setup HW constants

		/*

		 * if not PAN, then don't support P2P -- might be a uCode

		 * packaging bug or due to the eeprom check above

 Configure transport layer again*/

	/*******************

	 * 5. Setup priv

 At this point both hw and priv are initialized. */

	/********************

	 * 6. Setup services

 initialize all valid contexts */

	/**************************************************

	 * This is still part of probe() in a sense...

	 *

	 * 7. Setup and register with mac80211 and debugfs

netif_stop_queue(dev); */

	/* ieee80211_unregister_hw calls iwlagn_mac_stop, which flushes

	 * priv->workqueue... so we can't take down the workqueue

TODO: Update dbgfs with ISR error stats obtained below */

/*

 * iwl_print_event_log - Dump error event log to syslog

 SRAM byte address of event log header */

 2 u32s, or 3 u32s if timestamp recorded */

 SRAM byte address of log data */

 event log data */

 Make sure device is powered up for SRAM reads */

 Set starting address; reads will auto-increment */

	/* "time" is actually "data" for mode 0 (no timestamp).

 data, ev */

 Allow device to power down */

/*

 * iwl_print_last_event_logs - Dump the newest # of event log to syslog

	/*

	 * display the newest DEFAULT_LOG_ENTRIES entries

	 * i.e the entries just before the next ont that uCode would fill.

 SRAM byte address of event log header */

 event log capacity in # entries */

 0 - no timestamp, 1 - timestamp recorded */

 # times uCode wrapped to top of log */

 index of next entry to be written by uCode */

 # entries that we'll print */

 event log header */

 bail out if nothing in log */

		/*

		 * if uCode has wrapped back to top of log,

		 * start at the oldest entry,

		 * i.e the next one that uCode would fill.

 (then/else) start at top of log */

 uCode is no longer loaded. */

 Set the FW error flag -- cleared on iwl_down */

	/* Keep the restart process from trying to send host

		/*

		 * If firmware keep reloading, then it indicate something

		 * serious wrong and firmware having problem to recover

		 * from it. Instead of keep trying which will fill the syslog

		 * and hang the system, let's just stop it

 SKU Control */

 write radio config values to register */

 set CSR_HW_CONFIG_REG for uCode use */

	/* W/A : NIC is stuck in a reset state after Early PCIe power off

	 * (PCIe power is lost before PERST# is asserted),

	 * causing ME FW to lose ownership and not being able to obtain it back.

/*****************************************************************************

 *

 * driver and module entry point

 *

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2021 Intel Corporation

/*

 * Translate from fw_rate_index (IWL_RATE_XXM_INDEX) to PLCP

 mbps, mcs */

 convert rate */

				/* the new rate have an additional bit to

				 * represent the value 4 rather then using SGI

				 * bit for this purpose - as it was done in the old

 if legacy format */

 convert flags */

 shouldn't happen */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2019, 2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 ensure BLOCK_2_EXP_SIZE is power of 2 of PAGING_BLOCK_SIZE */

	/*

	 * Allocate CSS and paging blocks in dram.

 For CSS allocate 4KB, for others PAGING_BLOCK_SIZE (32K) */

 free all the previous pages since we failed */

			/*

			 * free the previous pages and the current one

			 * since we failed to map_page.

	/*

	 * find where is the paging image start point:

	 * if CPU2 exist and it's in paging format, then the image looks like:

	 * CPU1 sections (2 or more)

	 * CPU1_CPU2_SEPARATOR_SECTION delimiter - separate between CPU1 to CPU2

	 * CPU2 sections (not paged)

	 * PAGING_SEPARATOR_SECTION delimiter - separate between CPU2

	 * non paged to CPU2 paging sec

	 * CPU2 paging CSS

	 * CPU2 paging image (including instruction and data)

	/*

	 * If paging is enabled there should be at least 2 more sections left

	 * (one for CSS and one for Paging data)

 copy the CSS block to the dram */

	/*

	 * Copy the paging blocks to the dram.  The loop index starts

	 * from 1 since the CSS block (index 0) was already copied to

	 * dram.  We use num_of_paging_blk + 1 to account for that.

		/*

		 * For the last block, we copy all that is remaining,

		 * for all other blocks, we copy fw_paging_size at a

 send paging cmd to FW in case CPU2 has paging image */

 loop for for all paging blocks + CSS block */

	/*

	 * Configure and operate fw paging mechanism.

	 * The driver configures the paging flow only once.

	 * The CPU2 paging image is included in the IWL_UCODE_INIT image.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2014 Intel Mobile Communications GmbH

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

/*

 * Note: This structure is read from the device with IO accesses,

 * and the reading already does the endian conversion. As it is

 * read with u32-sized accesses, any members with a different size

 * need to be ordered correctly though!

 (nonzero) valid, (0) log is empty */

 type of error */

 program counter */

 branch link */

 branch link */

 interrupt link */

 interrupt link */

 error-specific data */

 error-specific data */

 error-specific data */

 beacon timer */

 network timestamp function timer */

 network timestamp function timer */

 GP1 timer register */

 GP2 timer register */

 GP3 timer register */

 uCode version */

 HW Silicon version */

 HW board version */

 log program counter */

 frame pointer */

 stack pointer */

 last host command header */

	u32 isr0;		/* isr status register LMPM_NIC_ISR0:

	u32 isr1;		/* isr status register LMPM_NIC_ISR1:

	u32 isr2;		/* isr status register LMPM_NIC_ISR2:

	u32 isr3;		/* isr status register LMPM_NIC_ISR3:

	u32 isr4;		/* isr status register LMPM_NIC_ISR4:

 isr status register LMPM_NIC_PREF_STAT */

 wait event() caller address */

 L2pControlField */

 L2pDurationField */

 L2pMhValidBits */

 L2pAddrMatchStat */

	u32 lmpm_pmg_sel;	/* indicate which clocks are turned on

	u32 u_timestamp;	/* indicate when the date and time of the

 FH read/write pointers, RX credit */

 LOG_ERROR_TABLE_API_S_VER_1 */;

 (nonzero) valid, (0) log is empty */

 type of error */

 TRM HW status */

 TRM HW status */

 branch link */

 interrupt link */

 interrupt link */

 error-specific data */

 error-specific data */

 error-specific data */

 beacon timer */

 network timestamp function timer */

 network timestamp function timer */

 GP1 timer register */

 GP2 timer register */

 firmware revision type */

 uCode version major */

 uCode version minor */

 HW Silicon version */

 HW board version */

 log program counter */

 frame pointer */

 stack pointer */

 last host command header */

	u32 isr0;		/* isr status register LMPM_NIC_ISR0:

	u32 isr1;		/* isr status register LMPM_NIC_ISR1:

	u32 isr2;		/* isr status register LMPM_NIC_ISR2:

	u32 isr3;		/* isr status register LMPM_NIC_ISR3:

	u32 isr4;		/* isr status register LMPM_NIC_ISR4:

 last HCMD id handled by the firmware */

 wait event() caller address */

 L2pControlField */

 L2pDurationField */

 L2pMhValidBits */

 L2pAddrMatchStat */

	u32 lmpm_pmg_sel;	/* indicate which clocks are turned on

	u32 u_timestamp;	/* indicate when the date and time of the

 FH read/write pointers, RX credit */

 LOG_ERROR_TABLE_API_S_VER_3 */;

/*

 * UMAC error struct - relevant starting from family 8000 chip.

 * Note: This structure is read from the device with IO accesses,

 * and the reading already does the endian conversion. As it is

 * read with u32-sized accesses, any members with a different size

 * need to be ordered correctly though!

 (nonzero) valid, (0) log is empty */

 type of error */

 branch link */

 branch link */

 interrupt link */

 interrupt link */

 error-specific data */

 error-specific data */

 error-specific data */

 core register 27*/

 core register 28 */

 latest host cmd sent to UMAC */

 ISR status register */

 check if there is a HW error */

 reset the device */

 Do not change this output - scripts rely on it */

/*

 * TCM error struct.

 * Note: This structure is read from the device with IO accesses,

 * and the reading already does the endian conversion. As it is

 * read with u32-sized accesses, any members with a different size

 * need to be ordered correctly though!

 TCM_LOG_ERROR_TABLE_API_S_VER_1 */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2020 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

		/* the real timestamp is taken from the ftrace clock

		 * this is for finding the match between fw and kernel logs

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright(c) 2019 - 2020 Intel Corporation

 No entry matches 'num', so it is the last: ADVANCED_SYSASSERT */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2017 Intel Deutschland GmbH

 * Copyright (C) 2019-2021 Intel Corporation

 set device type and latency */

	/*

	 * In VER_1 of this command, the discrete value is considered

	 * an integer; In VER_2, it's a bitmask.  Since we have only 2

	 * values in VER_1, this is backwards-compatible with VER_2,

	 * as long as we don't set any other bits.

	/*

	 * The default queue is configured via context info, so if we

	 * have a single queue, there's nothing to do here.

 skip the default queue */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright(c) 2021 Intel Corporation

	/*

	 * TODO: we hardcode a maximum length here, because reading

	 * from the UEFI is not working.  To implement this properly,

	 * we have to call efivar_entry_size().

	/*

	 * TODO: we hardcode a maximum length here, because reading

	 * from the UEFI is not working.  To implement this properly,

	 * we have to call efivar_entry_size().

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright(c) 2020-2021 Intel Corporation

 TODO: remove, this is a deprecated separator */

 if the SKU_ID is empty, there's nothing to do */

	/*

	 * If we already loaded (or tried to load) it before, we just

	 * need to set it again.

 First attempt to get the PNVM from BIOS */

 we need only the data */

 free package regardless of whether kmemdup succeeded */

 If it's not available, try from the filesystem */

		/*

		 * Pretend we've loaded it - at least we've tried and

		 * couldn't load it at all, so there's no point in

		 * trying again over and over.

 now try to get the reduce power table, if not loaded yet */

			/*

			 * Pretend we've loaded it - at least we've tried and

			 * couldn't load it at all, so there's no point in

			 * trying again over and over.

 kick the doorbell */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2005-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

/**

 * struct iwl_fw_dump_ptrs - set of pointers needed for the fw-error-dump

 *

 * @fwrt_ptr: pointer to the buffer coming from fwrt

 * @trans_ptr: pointer to struct %iwl_trans_dump_data which contains the

 *	transport's data.

 * @trans_len: length of the valid data in trans_ptr

 * @fwrt_len: length of the valid data in fwrt_ptr

 No need to try to read the data if the length is 0 */

 Add a TLV for the RXF */

 Lock fence */

 Set fence pointer to the same place like WR pointer */

 Set fence offset */

 Read FIFO */

 Size in DWORDS */

 No need to try to read the data if the length is 0 */

 Add a TLV for the FIFO */

 Set the TXF_READ_MODIFY_ADDR to TXF_WR_PTR */

 Dummy-read to advance the read pointer to the head */

 Read FIFO */

 Pull RXF1 */

 Pull RXF2 */

 Pull LMAC2 RXF1 */

 Pull TXF data from LMAC1 */

 Mark the number of TXF we're pulling now */

 Pull TXF data from LMAC2 */

 Mark the number of TXF we're pulling now */

 Pull UMAC internal TXF data from all TXFs */

 No need to try to read the data if the length is 0 */

 Add a TLV for the internal FIFOs */

 Mark the number of TXF we're pulling now */

 Set TXF_CPU2_READ_MODIFY_ADDR to TXF_CPU2_WR_PTR */

 Dummy-read to advance the read pointer to head */

 Read FIFO */

 Size in DWORDS */

 Only for B-step */

 Only for B-step */

 The range includes both boundaries */

 our range is inclusive, hence + 4 */

/*

 * alloc_sgtable - allocates scallerlist table in the given size,

 * fills it with pages and returns it

 * @size: the size (in bytes) of the table

 release all previous allocated pages in the table */

 The range includes both boundaries */

 Count RXF2 size */

 Count RXF1 sizes */

 Count TXF sizes */

 SRAM - include stack CCM if driver knows the values for it */

 reading RXF/TXF sizes */

 Make room for PRPH registers */

 Dump SRAM only if no mem_tlvs */

 Make room for all mem types that exist */

 Make room for fw's virtual image pages, if it exists */

 If we only want a monitor dump, reset the file length */

 Dump shared memory configuration */

 We only dump the FIFOs if the FW is in error state */

 In case we only want monitor dump, skip to dump trasport data */

 Dump fw's virtual image */

/**

 * struct iwl_dump_ini_region_data - region data

 * @reg_tlv: region TLV

 * @dump_data: dump data

 we shouldn't get here if the trans doesn't have read_config32 */

 all paged index start from 1 to skip CSS section */

	/*

	 * read txf registers. for each register, write to the dump the

	 * register address and its value

 Set the TXF_READ_MODIFY_ADDR to TXF_WR_PTR */

 Dummy-read to advance the read pointer to the head */

 Read FIFO */

 make sure only one bit is set in only one fid */

		/* use bit 31 to distinguish between umac and lmac rxf while

		 * parsing the dump

	/*

	 * read rxf registers. for each register, write to the dump the

	 * register address and its value

 Lock fence */

 Set fence pointer to the same place like WR pointer */

 Set fence offset */

 Read FIFO */

/**

 * mask_apply_and_normalize - applies mask on val and normalize the result

 *

 * The normalization is based on the first set bit in the mask

 *

 * @val: value

 * @mask: mask to apply and to normalize with

	/* The header addresses of DBGCi is calculate as follows:

	 * DBGC1 address + (0x100 * i)

 start from 1 to skip CSS section */

/**

 * struct iwl_dump_ini_mem_ops - ini memory dump operations

 * @get_num_of_ranges: returns the number of memory ranges in the region.

 * @get_size: returns the total size of the region.

 * @fill_mem_hdr: fills region type specific headers and returns pointer to

 *	the first range or NULL if failed to fill headers.

 * @fill_range: copies a given memory range into the dump.

 *	Returns the size of the range or negative error value otherwise.

/**

 * iwl_dump_ini_mem

 *

 * Creates a dump tlv and copy a memory region into it.

 * Returns the size of the current dump tlv or 0 if failed

 *

 * @fwrt: fw runtime struct

 * @list: list to add the dump tlv to

 * @reg_data: memory region

 * @ops: memory dump operations

	/*

	 * The higher part of the ID in version 2 is irrelevant for

	 * us, so mask it out.

	/*

	 * Several HWs all have type == 0x42, so we'll override this value

	 * according to the detected HW

		/*

		 * The HW type depends on certain bits in this case, so add

		 * these bits to the HW type. We won't have collisions since we

		 * add these bits after the highest possible bit in the mask.

	/* add dump info TLV to the beginning of the list since it needs to be

	 * the first TLV in the dump

	/*

	 * Check there is an available worker.

	 * ffz return value is undefined if no zero exists,

	 * so check against ~0UL first.

 convert msec to usec */

 check for truncation */

 EARLY START - firmware's configuration is hard coded */

 Send all HCMDs for configuring the FW debug */

/* this function assumes dump_start was called beforehand and dump_end will be

 * called afterwards

 there's no point in fw dump if the bus is dead */

	/* Check there is an available worker.

	 * ffz return value is undefined if no zero exists,

	 * so check against ~0UL first.

	/* assumes the op mode mutex is locked in dump_start since

	 * iwl_fw_dbg_collect_sync can't run in parallel

 if the buffer holds previous debug data it is overwritten */

	/* wait for the DBGC to finish writing the internal buffer to DRAM to

	 * avoid halting the HW while writing

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2020 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 new API has more data, from rxfifo_addr field and on */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2017 Intel Deutschland GmbH

 * Copyright (C) 2019-2021 Intel Corporation

 Call the method with no arguments */

/*

 * Generic function for evaluating a method defined in the device specific

 * method (DSM) interface. The returned acpi object must be freed by calling

 * function.

/*

 * Generic function to evaluate a DSM with no arguments

 * and an integer return value,

 * (as an integer object or inside a buffer object),

 * verify and assign the value in the "value" parameter.

 * return 0 in success and the appropriate errno otherwise.

 if the buffer size doesn't match the expected size */

 assuming LE from Intel BIOS spec */

/*

 * Evaluate a DSM with no arguments and a u8 return value,

 cast val (u64) to be u8 */

/*

 * Evaluate a DSM with no arguments and a u32 return value,

 cast val (u64) to be u32 */

	/*

	 * We need at least one entry in the wifi package that

	 * describes the domain, and one more entry, otherwise there's

	 * no point in reading it.

	/*

	 * We need at least two packages, one for the revision and one

	 * for the data itself.  Also check that the revision is valid

	 * (i.e. it is an integer (each caller has to check by itself

	 * if the returned revision is supported)).

 loop through all the packages to find the one for WiFi */

 skip entries that are not a package with the right size */

	/*

	 * The table from ACPI is flat, but we store it in a

	 * structured array.

 if we don't have the values, use the default */

 Only if all values were valid can the profile be enabled */

 don't allow SAR to be disabled (profile 0 means disable) */

 we are off by one, so allow up to ACPI_SAR_PROFILE_NUM */

 profiles go from 1 to 4, so decrement to access the array */

 if the profile is disabled, do nothing */

			/*

			 * if one of the profiles is disabled, we

			 * ignore all of them and return 1 to

			 * differentiate disabled from other failures.

 start by trying to read revision 2 */

 then try revision 1 */

 then finally revision 0 */

 position of the actual table */

	/* The profile from WRDS is officially profile 1, but goes

	 * into sar_profiles[0] (because we don't have a profile 0).

 start by trying to read revision 2 */

 then try revision 1 */

 then finally revision 0 */

	/*

	 * Check the validity of n_profiles.  The EWRD profiles start

	 * from index 1, so the maximum value allowed here is

	 * ACPI_SAR_PROFILES_NUM - 1.

 the tables start at element 3 */

		/* The EWRD profiles officially go from 2 to 4, but we

		 * save them in sar_profiles[1-3] (because we don't

		 * have profile 0).  So in the array we start from 1.

 go to the next table */

 start from one to skip the domain */

 read the highest revision we understand first */

 min_profiles != 0 requires num_profiles header */

 read header that says # of profiles */

				/*

				 * this also validates >= min_profiles since we

				 * otherwise wouldn't have gotten the data when

				 * looking up in ACPI

			/*

			 * num_bands is either 2 or 3, if it's only 2 then

			 * fill the third band (6 GHz) with the values from

			 * 5 GHz (second band)

 same here as above */

	/*

	 * The PER_CHAIN_LIMIT_OFFSET_CMD command is not supported on

	 * earlier firmware versions.  Unfortunately, we don't have a

	 * TLV API flag to rely on, so rely on the major version which

	 * is in the first byte of ucode_ver.  This was implemented

	 * initially on version 38 and then backported to 17.  It was

	 * also backported to 29, but only for 7265D devices.  The

	 * intention was to have it in 36 as well, but not all 8000

	 * family got this feature enabled.  The 8000 family is the

	 * only one using version 36, so skip this version entirely.

	/*

	 ** Evaluate func 'DSM_FUNC_ENABLE_INDONESIA_5G2'

	/*

	 ** Evaluate func 'DSM_FUNC_DISABLE_SRD'

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2005-2014, 2021 Intel Corporation

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

			/*

			 * If it already finished (triggered) or has been

			 * aborted then don't evaluate it again to avoid races,

			 * Otherwise the function could be called again even

			 * though it returned true before

 return value is always >= 0 */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

 * Copyright (C) 2018-2021 Intel Corporation

 Highest firmware API version supported */

 Lowest firmware API version supported */

 NVM versions */

 Memory offsets and lengths */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2014 Intel Corporation. All rights reserved.

 * Copyright(c) 2018 - 2020 Intel Corporation

 Highest firmware API version supported */

 Lowest firmware API version supported */

 EEPROM version */

 use rts/cts protection */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2007 - 2014 Intel Corporation. All rights reserved.

 * Copyright(c) 2018 - 2020 Intel Corporation

 Highest firmware API version supported */

 Lowest firmware API version supported */

 EEPROM versions */

 at least EEPROM 0x11A has wrong info */

 .cfg overwrite */

 .cfg overwrite */

 .cfg overwrite */

 .cfg overwrite */

 .cfg overwrite */

 .cfg overwrite */

 .cfg overwrite */

 .cfg overwrite */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2014, 2018-2020 Intel Corporation

 * Copyright (C) 2014-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016 Intel Deutschland GmbH

 Highest firmware API version supported */

 Lowest firmware API version supported */

 NVM versions */

 Memory offsets and lengths */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

 * Copyright (C) 2018-2021 Intel Corporation

 Highest firmware API version supported */

 Lowest firmware API version supported */

 NVM versions */

 Memory offsets and lengths */

 LMAC1 */

 LMAC1 */

 TODO: the following values need to be checked */

/*

 * If the device doesn't support HE, no need to have that many buffers.

 * 22000 devices can split multiple frames into a single RB, so fewer are

 * needed; AX210 cannot (but use smaller RBs by default) - these sizes

 * were picked according to 8 MSDUs inside 256 A-MSDUs in an A-MPDU, with

 * additional overhead to account for processing time.

/*

 * All JF radio modules are part of the 9000 series, but the MAC part

 * looks more like 22000.  That's why this device is here, but called

 * 9560 nevertheless.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

         * This device doesn't support receiving BlockAck with a large bitmap

         * so we need to restrict the size of transmitted aggregation to the

         * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

         * This device doesn't support receiving BlockAck with a large bitmap

         * so we need to restrict the size of transmitted aggregation to the

         * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

         * This device doesn't support receiving BlockAck with a large bitmap

         * so we need to restrict the size of transmitted aggregation to the

         * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

	/*

	 * This device doesn't support receiving BlockAck with a large bitmap

	 * so we need to restrict the size of transmitted aggregation to the

	 * HT size; mac80211 would otherwise pick the HE max (256) by default.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2020 Intel Corporation

 * Copyright (C) 2013-2014 Intel Mobile Communications GmbH

 * Copyright (C) 2015 Intel Deutschland GmbH

 Highest firmware API version supported */

 Lowest firmware API version supported */

 NVM versions */

 DCCM offsets and lengths */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2014 Intel Corporation. All rights reserved.

 * Copyright(c) 2018 - 2020 Intel Corporation

 needed for BT for now */

 Highest firmware API version supported */

 Lowest firmware API version supported */

 EEPROM version */

 TODO: fix bugs using this feature */

 TODO: fix bugs using this feature */

 use rts/cts protection */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2014 Intel Corporation. All rights reserved.

 * Copyright(c) 2018 - 2020 Intel Corporation

 needed for BT for now */

 Highest firmware API version supported */

 Lowest firmware API version supported */

 EEPROM versions */

 TODO: fix bugs using this feature */

 TODO: fix bugs using this feature */

 TODO: fix bugs using this feature */

 use rts/cts protection */

/*

 * "i": Internal configuration, use internal Power Amplifier

 .cfg overwrite */	\

 .cfg overwrite */	\

 .cfg overwrite */	\

 .cfg overwrite */	\

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2019-2020 Intel Corporation

 * Copyright (C) 2013-2014 Intel Mobile Communications GmbH

 * Copyright (C) 2015-2016 Intel Deutschland GmbH

	/* Don't schedule an exit work if we're in test mode, since

	 * the temperature will not change unless we manually set it

	 * again (or disable testing).

 ignore the notification if we are in test mode */

	/* we can use notif_v1 only, because v2 only adds an additional

	 * parameter, which is not used in this function.

 shouldn't be negative, but since it's s32, make sure it isn't */

 the notification is handled synchronously in ctkill, so skip here */

	/* 0xFF in ths_crossed means the notification is not related

	 * to a trip, so we can ignore it here.

 CONFIG_THERMAL */

/*

 * send the DTS_MEASUREMENT_TRIGGER command with or without waiting for a

 * response. If we get a response then the measurement is stored in 'temp'

 Check which command format is used (regular/extended) */

 The command version where we get a response is zero length */

	/*

	 * If command version is 1 we send the command and immediately get

	 * a response. For older versions we send the command and wait for a

	 * notification (no command TLV for previous versions).

 budget in mWatt */

 cooling state 0 */

 cooling state 1 */

 cooling state 2 */

 cooling state 3 */

 cooling state 4 */

 cooling state 5 */

 cooling state 6 */

 cooling state 7 */

 cooling state 8 */

 cooling state 9 */

 cooling state 10 */

 cooling state 11 */

 cooling state 12 */

 cooling state 13 */

 cooling state 14 */

 cooling state 15 */

 cooling state 16 */

 cooling state 17 */

 cooling state 18 */

 cooling state 19 */

 cooling state 20 */

 CONFIG_THERMAL */

		/* when the function is called with CTDP_CMD_OPERATION_REPORT

		 * option the function should return the average budget value

		 * that is received from the FW.

		 * The budget can't be less or equal to 0, so it's possible

		 * to distinguish between error values and budgets.

	/* The driver holds array of temperature trips that are unsorted

	 * and uncompressed, the FW should get it compressed and sorted

 compress temp_trips to cmd array, remove uninitialized values*/

sort cmd array*/

	/* we should save the indexes of trips because we sort

	 * and compress the orginal array

 no updates*/

 already existing temperature */

 make all trips writable */

	/* 0 is a valid temperature,

	 * so initialize the array with S16_MIN which invalid temperature

 CONFIG_THERMAL */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2005 - 2014, 2018 - 2021 Intel Corporation. All rights reserved.

 * Copyright(c) 2013 - 2015 Intel Mobile Communications GmbH

 * Copyright(c) 2016 - 2017 Intel Deutschland GmbH

 # tx in history window */

/* Calculations of success ratio are done in fixed point where 12800 is 100%.

 * Use this macro when dealing with thresholds consts set as a percentage

/*

 * Parameter order:

 *   rate, ht rate, prev rate, next rate

 *

 * If there isn't a valid next or previous rate then INV is used which

 * maps to IWL_RATE_INVALID

 *

  1mbps */

  2mbps */

5.5mbps */

 11mbps */

  6mbps ; MCS 0 */

  9mbps */

 12mbps ; MCS 1 */

 18mbps ; MCS 2 */

 24mbps ; MCS 3 */

 36mbps ; MCS 4 */

 48mbps ; MCS 5 */

 54mbps ; MCS 6 */

 MCS 7 */

 MCS 8 */

 MCS 9 */

 also works for HT because bits 7:6 are zero there */

 skip 9M not supported in HT*/

 skip 9M not supported in VHT*/

 legacy rate format, search for match in table */

/*

 * The following tables contain the expected throughput metrics for all rates

 *

 *	1, 2, 5.5, 11, 6, 9, 12, 18, 24, 36, 48, 54, 60 MBits

 *

 * where invalid entries are zeros.

 *

 * CCK rates are only valid in legacy table and will only be used in G

 * (2.4 GHz) band.

/* Expected TpT tables. 4 indexes:

 * 0 - NGI, 1 - SGI, 2 - AGG+NGI, 3 - AGG+SGI

 start BA session until the peer sends del BA */

		/*

		 * driver and mac80211 is out of sync

		 * this might be cause by reloading firmware

		 * stop the tx ba session here

	/*

	 * In AP mode, tid can be equal to IWL_MAX_TID_COUNT

	 * when the frame is not QoS

/*

 * Static function to get the expected throughput from an iwl_scale_tbl_info

 * that wraps a NULL pointer check

/*

 * rs_collect_tx_data - Update the success/failure sliding window

 *

 * We keep a sliding window of the last 62 packets transmitted

 * at this rate.  window->data contains the bitmask of successful

 * packets.

 Get expected throughput */

	/*

	 * Keep track of only the latest 62 tx frame attempts in this rate's

	 * history window; anything older isn't really relevant any more.

	 * If we have filled up the sliding window, drop the oldest attempt;

	 * if the oldest attempt (highest bit in bitmap) shows "success",

	 * subtract "1" from the success counter (this is the main reason

	 * we keep these bitmaps!).

 remove earliest */

 Increment frames-attempted counter */

 Shift bitmap by one frame to throw away oldest history */

 Mark the most recent #successes attempts as successful */

 Calculate current success ratio, avoid divide-by-0! */

 Calculate average throughput, if we have enough history. */

	/*

	 * Measure if there're enough successful transmits per second.

	 * These statistics are used only to decide if we can start a

	 * BA session, so it should be updated only when A-MPDU is

	 * off.

 Select window for current tx bit rate */

 Convert rs_rate object into ucode rate bitmask */

	/* set RTS protection for all non legacy rates

	 * This helps with congested environments reducing the conflict cost to

	 * RTS retries only, instead of the entire BA packet.

 To enable STBC we need to set both a flag and ANT_AB */

 Convert a ucode rate into an rs_rate object */

 Legacy */

 HT, VHT or HE */

 switch to another antenna/antennas and return 1 */

 if no other valid antenna found, return 0 */

	/* 802.11A or ht walks to the next literal adjacent rate in

 Find the previous rate that is in the rate mask */

 Find the next rate that is in the rate mask */

/* Get the next supported lower rate in the current column.

 * Return true if bottom rate in the current column was reached

 Bottom rate of column reached */

 Get the next rate to use following a column downgrade */

 No column to downgrade from Legacy */

 Downgrade to Legacy if we were in SISO */

 Downgrade to SISO with same MCS if in MIMO  */

 Relevant in both switching to SISO or Legacy */

 Check if both rates share the same column */

/*

 * mac80211 sends us Tx status

/*

 * Begin a period of staying with a selected modulation mode.

 * Set "stay_in_tbl" flag to prevent any mode switches.

 * Set frame tx success limits according to legacy vs. high-throughput,

 * and reset overall (spanning all rates) tx success history statistics.

 * These control how long we stay using same modulation mode before

 * searching for a new mode.

 Used to choose among HT tables */

 Legacy rates have only one table */

	/* Choose among many HT tables depending on number of streams

	 * (SISO/MIMO2), channel width (20/40/80), SGI, and aggregation

 Normal */

 SGI */

 AGG */

 AGG+SGI */

/* rs uses two tables, one is active and the second is for searching better

 * configuration. This function, according to the index of the currently

 * active table returns the search table, which is located at the

 * index complementary to 1 according to the active table (active = 1,

 * search = 0 or active = 0, search = 1).

 * Since lq_info is an arary of size 2, make sure index cannot be out of bounds.

 "search" */

		/*

		 * Don't use 160 MHz if VHT extended NSS support

		 * says we cannot use 2 streams, we don't want to

		 * deal with this.

		 * We only check MCS 0 - they will support that if

		 * we got here at all and we don't care which MCS,

		 * we want to determine a more global state.

/*

 * Check whether we should continue using same modulation mode, or

 * begin search for a new mode, based on:

 * 1) # tx successes or failures while using this mode

 * 2) # times calling this function

 * 3) elapsed time in this mode (not used, for now)

 If we've been disallowing search, see if we should now allow it */

 Elapsed time using current modulation mode */

		/*

		 * Check if we should allow search for new modulation mode.

		 * If many frames have failed or succeeded, or we've used

		 * this same modulation for a long time, allow search, and

		 * reset history stats that keep track of whether we should

		 * allow a new search.  Also (below) reset all bitmaps and

		 * stats in active history.

 Allow search for new mode */

 mark the current column as visited */

		/*

		 * Else if we've used this modulation mode enough repetitions

		 * (regardless of elapsed time or success/failure), reset

		 * history bitmaps and rate-specific stats for all rates in

		 * active table.

		/* If transitioning to allow "search", reset all history

		 * bitmaps and stats in active table (this will become the new

	/*

	 * In case TLC offload is not active amsdu_enabled is either 0xFFFF

	 * or 0, since there is no per-TID alg.

			/*

			 * Not so elegant, but this will effectively

			 * prevent AMSDU on this TID

/*

 * setup rate table in uCode

	/* Go back to 80Mhz MCS1 only if we've established that 20Mhz MCS5 is

	 * sustainable, i.e. we're past the test window. We can't go back

	 * if MCS5 is just tested as this will happen always after switching

	 * to 20Mhz MCS4 because the rate stats are cleared.

	/* Get the best matching rate if we're changing modes. e.g.

	 * SISO->MIMO, LEGACY->SISO, MIMO->SISO

	/* Our chip supports Tx STBC and the peer is an HT/VHT STA which

	 * supports STBC of at least 1*SS

	/*

	 * allow tpc only if power management is enabled, or bt coex

	 * activity grade allows it and we are on 2.4Ghz.

 stay until we have valid tpt */

 Too many failures, increase txp */

 try decreasing first if applicable */

 next, increase if needed */

 Collect measured throughputs for current and adjacent rates */

 override actions if we are on the edge */

 do nothing */

/*

 * Do rate scaling and search for new modulation mode.

	/*

	 * Select rate-scale / modulation-mode table to work with in

	 * the rest of this function:  "search" if searching for better

	 * modulation mode, or "active" if doing rate scaling within a mode.

 current tx rate */

 rates available for this association, and for modulation mode */

 revert to active table if search table is not valid*/

 Get expected throughput table and history window for current rate */

 TODO: handle rate_idx_mask and rate_idx_mcs_mask */

	/*

	 * If there is not enough history to calculate actual average

	 * throughput, keep analyzing results of more tx frames, without

	 * changing rate or mode (bypass most of the rest of this function).

	 * Set up new rate table in uCode only if old rate is not supported

	 * in current association (use new rate found above).

 Can't calculate this yet; not enough history */

		/* Should we stay with this modulation mode,

 If we are searching for better modulation mode, check success. */

		/* If good success, continue using the "search" mode;

		 * no need to send new link quality command, since we're

 Swap tables; "search" becomes "active" */

 Else poor success; go back to mode in "active" table */

 Nullify "search" table */

 Revert to "active" table */

 Revert to "active" rate and throughput info */

 Need to set up a new rate table in uCode */

		/* Either way, we've made a decision; modulation mode

 Don't switch modes below! */

	/* (Else) not in search of better modulation mode, try for better

 TODO: handle rate_idx_mask and rate_idx_mcs_mask */

 Collect measured throughputs for current and adjacent rates */

 Force a search in case BT doesn't like us being in MIMO */

 Decrease starting rate, update uCode's rate table */

 Increase starting rate, update uCode's rate table */

 No change */

 Replace uCode's rate table for the destination station. */

	/*

	 * Search for new modulation mode if we're:

	 * 1)  Not changing rates right now

	 * 2)  Not just finishing up a search

	 * 3)  Allowing a new search

 Save current throughput to compare with "search" throughput*/

 If new "search" mode was selected, set up in uCode table */

 Access the "search" table, clear its history. */

 Use new "search" start rate */

/* MCS index 9 is not valid for 20MHz VHT channel width,

 * but is ok for 40, 80 and 160MHz channels.

 dBm */

/* Init the optimal rate based on STA caps

 * This combined with rssi is used to report the last tx rate

 * to userspace when we haven't transmitted enough frames.

 ANT/LDPC/STBC aren't relevant for the rate reported to userspace */

 Compute the optimal rate index based on RSSI */

/* Choose an initial legacy rate and antenna to use based on the RSSI

 * of last Rx

	/* Start from a higher rate if the corresponding debug capability

	 * is enabled. The rate is chosen according to AP capabilities.

	 * In case of VHT/HT when the rssi is low fallback to the case of

	 * legacy rates.

		/*

		 * In AP mode, when a new station associates, rs is initialized

		 * immediately upon association completion, before the phy

		 * context is updated with the association parameters, so the

		 * sta bandwidth might be wider than the phy context allows.

		 * To avoid this issue, always initialize rs with 20mhz

		 * bandwidth rate, and after authorization, when the phy context

		 * is already up-to-date, re-init rs with the correct bw.

 Save info about RSSI of last Rx */

/*

 * rs_initialize_lq - Initialize a station's hardware rate table

 *

 * The uCode's station table contains a table of fallback rates

 * for automatic fallback during transmission.

 *

 * NOTE: This sets up a default set of values.  These will be replaced later

 *       if the driver's iwl-agn-rs rate scaling algorithm is used, instead of

 *       rc80211_simple.

 *

 * NOTE: Run REPLY_ADD_STA command to set up station table entry, before

 *       calling this function (which runs REPLY_TX_LINK_QUALITY_CMD,

 *       which requires station table entry to exist).

 TODO restore station should remember the lq cmd */

		/* if vif isn't initialized mvm doesn't know about

		 * this station, so don't do anything with the it

	/* Report the optimal rate based on rssi and STA caps if we haven't

	 * converged yet (too little traffic) or exploring other modulations

 VHT MCS9 isn't valid for 20Mhz for NSS=1,2 */

 VHT MCS9 isn't valid for 20Mhz for NSS=1,2 */

	/* active_siso_rate mask includes 9 MBits (bit 5),

	 * and CCK (bits 0-3), supp_rates[] does not;

	 * shift to convert format, force 9 MBits off.

/*

 * Called after adding a new station to initialize rate scaling

 must be unsigned long for for_each_set_bit */

 clear all non-persistent lq data */

	/* TODO: what is a good starting rate for STA? About middle? Maybe not

	 * the lowest or the highest rate.. Could consider using RSSI from

	 * previous packets? Need to have IEEE 802.1X auth succeed immediately

	/*

	 * active legacy rates as per supported rates bitmap

 TODO: should probably account for rx_highest for both HT/VHT */

 These values will be overridden later */

 as default allow aggregation for all tids */

 Stop any ongoing aggregations as rs starts off assuming no agg */

 This packet was aggregated but doesn't carry status info */

	/* Disable last tx check if we are debugging with fixed rate but

	 * update tx stats

		/* reach here only in case of driver RS, call directly

		 * the unlocked version

	/* Ignore this Tx frame response if its initial rate doesn't match

	 * that of latest Link Quality command.  There may be stragglers

	 * from a previous Link Quality command, but we're no longer interested

	 * in those; they're either from the "active" mode while we're trying

	 * to check "search" mode, or a prior "search" mode after we've moved

	 * to a new "search" mode (which might become the new "active" mode).

 Here we actually compare this rate to the latest LQ command */

		/* Since rates mis-match, the last LQ command may have failed.

		 * After IWL_MISSED_RATE_MAX mis-matches, resync the uCode with

		 * ... driver.

 Regardless, ignore this status info for outdated rate */

 Rate did match, so reset the missed_rate_counter */

		/* no matching table found, let's by-pass the data collection

		 * and continue to perform rate scale to find the rate table

	/* Updating the frame history depends on whether packets were

	 * aggregated.

	 *

	 * For aggregation, all packets were transmitted at the same rate, the

	 * first index into rate scale table.

		/* ampdu_ack_len = 0 marks no BA was received. For TLC, treat

		 * it as a single frame loss as we don't want the success ratio

		 * to dip too quickly because a BA wasn't received.

		 * For TPC, there's no need for this optimisation since we want

		 * to recover very quickly from a bad power reduction and,

		 * therefore we'd like the success ratio to get an immediate hit

		 * when failing to get a BA, so we'd switch back to a lower or

		 * zero power reduction. When FW transmits agg with a rate

		 * different from the initial rate, it will not use reduced txp

		 * and will send BA notification twice (one empty with reduced

		 * txp equal to the value from LQ and one with reduced txp 0).

		 * We need to update counters for each txp level accordingly.

 Update success/fail counts if not searching for new mode */

 For legacy, update frame history with for each Tx retry. */

 HW doesn't send more than 15 retries */

 The last transmission may have been successful */

 Collect data for each rate used during failed TX attempts */

			/* Only collect stats if retried rate is in the same RS

			 * table as active/search.

 Update success/fail counts if not searching for new mode */

 The last TX rate is cached in lq_sta; it's set in if/else above */

 See if there's a better rate or modulation mode to try. */

	/* If it's locked we are in middle of init flow

	 * just wait for next tx status to update the lq_sta data

 CONFIG_MAC80211_DEBUGFS */

/* Building the rate table is non trivial. When we're in MIMO2/VHT/80Mhz/SGI

 * column the rate table should look like this:

 *

 * rate[0] 0x400F019 VHT | ANT: AB BW: 80Mhz MCS: 9 NSS: 2 SGI

 * rate[1] 0x400F019 VHT | ANT: AB BW: 80Mhz MCS: 9 NSS: 2 SGI

 * rate[2] 0x400F018 VHT | ANT: AB BW: 80Mhz MCS: 8 NSS: 2 SGI

 * rate[3] 0x400F018 VHT | ANT: AB BW: 80Mhz MCS: 8 NSS: 2 SGI

 * rate[4] 0x400F017 VHT | ANT: AB BW: 80Mhz MCS: 7 NSS: 2 SGI

 * rate[5] 0x400F017 VHT | ANT: AB BW: 80Mhz MCS: 7 NSS: 2 SGI

 * rate[6] 0x4005007 VHT | ANT: A BW: 80Mhz MCS: 7 NSS: 1 NGI

 * rate[7] 0x4009006 VHT | ANT: B BW: 80Mhz MCS: 6 NSS: 1 NGI

 * rate[8] 0x4005005 VHT | ANT: A BW: 80Mhz MCS: 5 NSS: 1 NGI

 * rate[9] 0x800B Legacy | ANT: B Rate: 36 Mbps

 * rate[10] 0x4009 Legacy | ANT: A Rate: 24 Mbps

 * rate[11] 0x8007 Legacy | ANT: B Rate: 18 Mbps

 * rate[12] 0x4005 Legacy | ANT: A Rate: 12 Mbps

 * rate[13] 0x800F Legacy | ANT: B Rate: 9 Mbps

 * rate[14] 0x400D Legacy | ANT: A Rate: 6 Mbps

 * rate[15] 0x800D Legacy | ANT: B Rate: 6 Mbps

 TODO: remove old API when min FW API hits 14 */

 update the color of the LQ command (as a counter at bits 1-3) */

 The current sta has BFER allowed */

 Returns >0 if sta1 has a higher BFER priority compared to sta2 */

	/* Check if forcing the decision is configured.

	 * Note that SISO is forced by not allowing STBC or BFER

	/* This code is safe as it doesn't run concurrently for different

	 * stations. This is guaranteed by the fact that calls to

	 * ieee80211_tx_status wouldn't run concurrently for a single HW.

 Disallow BFER on another STA if active and we're a higher priority */

	/*

	 * In case of low latency, tell the firmware to leave a frame in the

	 * Tx Fifo so that it can start a transaction in the same TxOP. This

	 * basically allows the firmware to send bursts.

 rate scale requires free function to be implemented */

 shouldn't happen */

/*

 * Program the device to use fixed rate for frame transmit

 * This is for debugging/testing only

 * once the device start use fixed rate, we need to reload the module

 * to being back the normal operation.

 1 - 54 MBits, includes CCK */

 6 - 60 MBits, no 9, no CCK */

 6 - 60 MBits, no 9, no CCK */

/*

 * Initialization of rate scaling information is done by driver after

 * the station is added. Since mac80211 calls this function before a

 * station is added we ignore it.

 ops for rate scaling implemented in the driver */

/**

 * iwl_mvm_tx_protection - ask FW to enable RTS/CTS protection

 * @mvm: The mvm component

 * @mvmsta: The station

 * @enable: Enable Tx protection?

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2019, 2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 Default NVM size to read */

 load nvm chunk response */

/*

 * prepare the NVM host command w/ the pointers to the nvm buffer

 * and send it to fw

 data may come from vmalloc, so use _DUP */

 Extract & check NVM write response */

 Extract NVM response */

			/*

			 * meaning of NOT_VALID_ADDRESS:

			 * driver try to read chunk from address that is

			 * multiple of 2K and got an error since addr is empty.

			 * meaning of (offset != 0): driver already

			 * read valid data from another chunk so this case

			 * is not an error.

 Write data to NVM */

 copy data in chunks of 2k (and remainder if any) */

/*

 * Reads an NVM section completely.

 * NICs prior to 7000 family doesn't have a real NVM, but just read

 * section 0 which is the EEPROM. Because the EEPROM reading is unlimited

 * by uCode, we need to manually check in this case that we don't

 * overflow and try to read more than the EEPROM size.

 * For 7000 family NICs, we supply the maximal size we can read, and

 * the uCode fills the response with as much data as we can,

 * without overflowing, so no check is needed.

 Set nvm section read length */

 Read the NVM until exhausted (reading less than requested) */

 Check no memory assumptions fail and cause an overflow */

 Checking for required sections */

 SW and REGULATORY sections are mandatory */

 MAC_OVERRIDE or at least HW section must exist */

 PHY_SKU section is mandatory in B0 */

 Loads the NVM data stored in mvm->nvm_sections into the NIC */

 load NVM values from nic */

 Read From FW NVM */

 we override the constness for initial read */

 Only if PNVM selected in the mod param - load external NVM  */

 read External NVM file from the mod param */

 in case nvm file was failed try again */

 parse the relevant nvm sections */

 Extract MCC response */

 W/A for a FW/NVM issue - returns 0x00 for the world domain */

 "00" - world */

	/*

	 * try to replay the last set MCC to FW. If it doesn't exist,

	 * queue an update to cfg80211 to retrieve the default alpha2 from FW.

	/*

	 * Driver regulatory hint for initial update, this also informs the

	 * firmware we support wifi location updates.

	 * Disallow scans that might crash the FW while the LAR regdomain

	 * is not set.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2021 Intel Corporation

 * Copyright (C) 2013-2014 Intel Mobile Communications GmbH

 * Copyright (C) 2015 Intel Deutschland GmbH

	/*

	 * For QoS counters, we store the one to use next, so subtract 0x10

	 * since the uCode will add 0x10 *before* using the value while we

	 * increment after using the value (i.e. store the next value to use).

	/*

	 * Skip tentative address when ns offload is enabled to avoid

	 * violating RFC4862.

	 * Keep tentative address when ns offload is disabled so the NS packets

	 * will not be filtered out and will wake up the host.

		/*

		 * For each address we have (and that will fit) fill a target

		 * address struct and combine for NS offload structs with the

		 * solicited node addresses.

			/*

			 * This basically uses iwl_proto_offload_cmd_v3_large

			 * which doesn't have the sta_id parameter before the

			 * common part.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2019 Intel Corporation

 * Copyright (C) 2017 Intel Deutschland GmbH

	/*

	 * if we control through the register, we're doing it

	 * even when the firmware isn't up, so no need to sync

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2013-2014, 2018-2019 Intel Corporation

 * Copyright (C) 2013-2014 Intel Mobile Communications GmbH

 For counting bound interfaces */

/*

 * Count bound interfaces which are not p2p, besides data->ignore_vif.

 * data->station_vif will point to one bound vif of type station, if exists.

/*

 * Aging and idle timeouts for the different possible scenarios

 * in default configuration

/*

 * Aging and idle timeouts for the different possible scenarios

 * in single BSS MAC configuration.

	/*

	 * If we are in association flow - check antenna configuration

	 * capabilities of the AP station, and choose the watermark accordingly.

 default watermark value for unassociated mode. */

	/*

	 * If an associated AP sta changed its antenna configuration, the state

	 * will remain FULL_ON but SF parameters need to be reconsidered.

/*

 * Update Smart fifo:

 * Count bound interfaces that are not to be removed, ignoring p2p devices,

 * and set new state accordingly.

	/*

	 * Ignore the call if we are in HW Restart flow, or if the handled

	 * vif is a p2p device.

 If changed_vif exists and is not to be removed, add to the count */

 If there are no active macs - change state to SF_INIT_OFF */

			/* The one active mac left is of type station

			 * and we filled the relevant data during iteration

 If there are multiple active macs - change to SF_UNINIT */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2017 Intel Deutschland GmbH

/*

 * For the high priority TE use a time event type that has similar priority to

 * the FW's action scan priority.

	/*

	 * the list is only used for AUX ROC events so make sure it is always

	 * initialized

	/*

	 * Clear the ROC_RUNNING /ROC_AUX_RUNNING status bit.

	 * This will cause the TX path to drop offchannel transmissions.

	 * That would also be done by mac80211, but it is racy, in particular

	 * in the case that the time event actually completed in the firmware

	 * (which is handled in iwl_mvm_te_handle_notif).

	/*

	 * Flush the offchannel queue -- this is called when the time

	 * event finishes or is canceled, so that frames queued for it

	 * won't get stuck on the queue and be transmitted in the next

	 * time event.

		/*

		 * NB: access to this pointer would be racy, but the flush bit

		 * can only be set when we had a P2P-Device VIF, and we have a

		 * flush of this work in iwl_mvm_prepare_mac_removal() so it's

		 * not really racy.

 do the same in case of hot spot 2.0 */

		/* In newer version of this command an aux station is added only

		 * in cases of dedicated tx queue and need to be removed in end

	/*

	 * Of course, our status bit is just as racy as mac80211, so in

	 * addition, fire off the work struct which will drop all frames

	 * from the hardware queues that made it through the race. First

	 * it will of course synchronize the TX path to make sure that

	 * any *new* TX will be rejected.

	/*

	 * CSA NoA is started but we still have beacons to

	 * transmit on the current channel.

	 * So we just do nothing here and the switch

	 * will be performed on the last TBTT.

		/*

		 * When not associated, this will be called from

		 * iwl_mvm_event_mlme_callback_ini()

 should never happen */

 we don't need it anymore */

	/*

	 * If the IWL_MVM_STATUS_NEED_FLUSH_P2P is already set, then the

	 * roc_done_wk is already scheduled or running, so don't schedule it

	 * again to avoid a race where the roc_done_wk clears this bit after

	 * it is set here, affecting the next run of the roc_done_wk.

/*

 * Handles a FW notification for an event that is known to the driver.

 *

 * @mvm: the mvm component

 * @te_data: the time event data

 * @notif: the notification data corresponding the time event data.

	/*

	 * The FW sends the start/end time event notifications even for events

	 * that it fails to schedule. This is indicated in the status field of

	 * the notification. This happens in cases that the scheduler cannot

	 * find a schedule that can handle the event (for example requesting a

	 * P2P Device discoveribility, while there are other higher priority

	 * events in the system).

			/*

			 * If we are switching channel, don't disconnect

			 * if the time event is already done. Beacons can

			 * be delayed a bit after the switch.

			/*

			 * By now, we should have finished association

			 * and know the dtim period.

/*

 * Handle A Aux ROC time event

 Not a Aux ROC time event */

 End TE, notify mac80211 */

 flush aux queue */

 remove from list */

 Start TE */

/*

 * The Rx handler for time event notifications

 This time event is triggered for Aux ROC request */

 te_data->uid is already set in the TIME_EVENT_CMD response */

 we should never get a response to another TIME_EVENT_CMD here */

	/*

	 * Use a notification wait, which really just processes the

	 * command response and doesn't wait for anything, in order

	 * to be able to process the response and get the UID inside

	 * the RX path. Using CMD_WANT_SKB doesn't work because it

	 * stores the buffer and then wakes up this thread, by which

	 * time another notification (that the time event started)

	 * might already be processed unsuccessfully.

 No need to wait for anything, so just pass 1 (0 isn't valid) */

 should never fail */

		/*

		 * we don't have enough time

		 * cancel the current TE and issue a new one

		 * Of course it would be better to remove the old one only

		 * when the new one is added, but we don't care if we are off

		 * channel for a bit. All we need to do, is not to return

		 * before we actually begin to be on the channel.

 TODO: why do we need to interval = bi if it is not periodic? */

	/*

	 * Create notification_wait for the TIME_EVENT_NOTIFICATION to use

	 * right after we send the time event

 If TE was sent OK - wait for the notification that started */

	/*

	 * It is possible that by the time we got to this point the time

	 * event was already removed.

 Save time event uid before clearing its data */

	/*

	 * The clear_data function handles time events that were already removed

	/* When session protection is supported, the te_data->id field

	 * is reused to save session protection's configuration.

 Session protection is still ongoing. Cancel it */

		/* It is possible that by the time we try to remove it, the

		 * time event has already ended and removed. In such a case

		 * there is no need to send a removal command.

/*

 * Explicit request to remove a aux roc time event. The removal of a time

 * event needs to be synchronized with the flow of a time event's end

 * notification, which also removes the time event from the op mode

 * data structures.

/*

 * Explicit request to remove a time event. The removal of a time event needs to

 * be synchronized with the flow of a time event's end notification, which also

 * removes the time event from the op mode data structures.

 When we remove a TE, the UID is to be set in the id field */

 The vif is not a P2P_DEVICE, maintain its time_event_data */

			/*

			 * By now, we should have finished association

			 * and know the dtim period.

 End TE, notify mac80211 */

 Start TE */

	/* The time_event_data.id field is reused to save session

	 * protection's configuration.

	/*

	 * The P2P Device TEs can have lower priority than other events

	 * that are being scheduled by the driver/fw, and thus it might not be

	 * scheduled. To improve the chances of it being scheduled, allow them

	 * to be fragmented, and in addition allow them to be delayed.

	/*

	 * Iterate over the list of time events and find the time event that is

	 * associated with a P2P_DEVICE interface.

	 * This assumes that a P2P_DEVICE interface can have only a single time

	 * event at any given time and this time event coresponds to a ROC

	 * request

	/* There can only be at most one AUX ROC time event, we just use the

	 * list to simplify/unify code. Remove it if it exists.

		/*

		 * Remove the session protection time event to allow the

		 * channel switch. If we got here, we just heard a beacon so

		 * the session protection is not needed anymore anyway.

	/* The time_event_data.id field is reused to save session

	 * protection's configuration.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2020 Intel Corporation

 * Copyright (C) 2016 Intel Deutschland GmbH

	/*

	 * If there are no other interfaces yet we

	 * need to create a new binding.

	/*

	 * Update SF - Disable if needed. if this fails, SF might still be on

	 * while many macs are bound, which is forbidden - so fail the binding.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2014 Intel Mobile Communications GmbH

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

 Skip the interface for which we are trying to assign a tsf_id  */

	/*

	 * The TSF is a hardware/firmware resource, there are 4 and

	 * the driver should assign and free them as needed. However,

	 * there are cases where 2 MACs should share the same TSF ID

	 * for the purpose of clock sync, an optimization to avoid

	 * clock drift causing overlapping TBTTs/DTIMs for a GO and

	 * client in the system.

	 *

	 * The firmware will decide according to the MAC type which

	 * will be the leader and follower. Clients that need to sync

	 * with a remote station will be the leader, and an AP or GO

	 * will be the follower.

	 *

	 * Depending on the new interface type it can be following

	 * or become the leader of an existing interface.

		/*

		 * The new interface is a client, so if the one we're iterating

		 * is an AP, and the beacon interval of the AP is a multiple or

		 * divisor of the beacon interval of the client, the same TSF

		 * should be used to avoid drift between the new client and

		 * existing AP. The existing AP will get drift updates from the

		 * new client context in this case.

		/*

		 * The new interface is AP/GO, so if its beacon interval is a

		 * multiple or a divisor of the beacon interval of an existing

		 * interface, it should get drift updates from an existing

		 * client or use the same TSF as an existing GO. There's no

		 * drift between TSFs internally but if they used different

		 * TSFs then a new client MAC could update one of them and

		 * cause drift that way.

		/*

		 * For all other interface types there's no need to

		 * take drift into account. Either they're exclusive

		 * like IBSS and monitor, or we don't care much about

		 * their TSF (like P2P Device), but we won't be able

		 * to share the TSF resource.

	/*

	 * Unless we exited above, we can't share the TSF resource

	 * that the virtual interface we're iterating over is using

	 * with the new one, so clear the available bit and if this

	 * was the preferred one, reset that as well.

 Iterator may already find the interface being added -- skip it */

	/* Mark MAC IDs as used by clearing the available bit, and

	 * (below) mark TSFs as used if their existing use is not

	 * compatible with the new interface type.

	 * No locking or atomic bit operations are needed since the

	 * data is on the stack of the caller function.

 find a suitable tsf_id */

 no preference yet */

 no preference yet */

	/*

	 * Allocate a MAC ID and a TSF for this MAC, along with the queues

	 * and other resources.

	/*

	 * Before the iterator, we start with all MAC IDs and TSFs available.

	 *

	 * During iteration, all MAC IDs are cleared that are in use by other

	 * virtual interfaces, and all TSF IDs are cleared that can't be used

	 * by this new virtual interface because they're used by an interface

	 * that can't share it with the new one.

	 * At the same time, we check if there's a preferred TSF in the case

	 * that we should share it with another interface.

 Currently, MAC ID 0 should be used only for the managed/IBSS vif */

	/*

	 * In the case we're getting here during resume, it's similar to

	 * firmware restart, and with RESUME_ALL the iterator will find

	 * the vif being added already.

	 * We don't want to reassign any IDs in either case since doing

	 * so would probably assign different IDs (as interfaces aren't

	 * necessarily added in the same order), but the old IDs were

	 * preserved anyway, so skip ID assignment for both resume and

	 * recovery.

 Therefore, in recovery, we can't get here */

 No need to allocate data queues to P2P Device MAC and NAN.*/

 Allocate the CAB queue for softAP and GO interfaces */

		/*

		 * For TVQM this will be overwritten later with the FW assigned

		 * queue value (when queue is enabled).

	/*

	 * Now we've got the basic rates as bitmaps in the ofdm and cck

	 * variables. This isn't sufficient though, as there might not

	 * be all the right rates in the bitmap. E.g. if the only basic

	 * rates are 5.5 Mbps and 11 Mbps, we still need to add 1 Mbps

	 * and 6 Mbps because the 802.11-2007 standard says in 9.6:

	 *

	 *    [...] a STA responding to a received frame shall transmit

	 *    its Control Response frame [...] at the highest rate in the

	 *    BSSBasicRateSet parameter that is less than or equal to the

	 *    rate of the immediately previous frame in the frame exchange

	 *    sequence ([...]) and that is of the same modulation class

	 *    ([...]) as the received frame. If no rate contained in the

	 *    BSSBasicRateSet parameter meets these conditions, then the

	 *    control frame sent in response to a received frame shall be

	 *    transmitted at the highest mandatory rate of the PHY that is

	 *    less than or equal to the rate of the received frame, and

	 *    that is of the same modulation class as the received frame.

	 *

	 * As a consequence, we need to add all mandatory rates that are

	 * lower than all of the basic rates to these bitmaps.

 6M already there or needed so always add */

	/*

	 * CCK is a bit more complex with DSSS vs. HR/DSSS vs. ERP.

	 * Note, however:

	 *  - if no CCK rates are basic, it must be ERP since there must

	 *    be some basic rates at all, so they're OFDM => ERP PHY

	 *    (or we're in 5 GHz, and the cck bitmap will never be used)

	 *  - if 11M is a basic rate, it must be ERP as well, so add 5.5M

	 *  - if 5.5M is basic, 1M and 2M are mandatory

	 *  - if 2M is basic, 1M is mandatory

	 *  - if 1M is basic, that's the only valid ACK rate.

	 * As a consequence, it's not as complicated as it sounds, just add

	 * any lower rates to the ACK rate bitmap.

 1M already there or needed so always add */

 for both sta and ap, ht_operation_mode hold the protection_mode */

 The fw does not distinguish between ht and fat */

	/*

	 * See section 9.23.3.1 of IEEE 80211-2012.

	 * Nongreenfield HT STAs Present is not supported.

 Protect when channel wider than 20MHz */

 Fill the common data for all mac context types */

 We need the dtim_period to set the MAC as associated */

		/*

		 * The DTIM count counts down, so when it is N that means N

		 * more beacon intervals happen until the DTIM TBTT. Therefore

		 * add this to the current time. If that ends up being in the

		 * future, the firmware will handle it.

		 *

		 * Also note that the system_timestamp (which we get here as

		 * "sync_device_ts") and TSF timestamp aren't at exactly the

		 * same offset in the frame -- the TSF is at the first symbol

		 * of the TSF, the system timestamp is at signal acquisition

		 * time. This means there's an offset between them of at most

		 * a few hundred microseconds (24 * 8 bits + PLCP time gives

		 * 384us in the longest case), this is currently not relevant

		 * as the firmware wakes up around 2ms before the TBTT.

 convert TU to usecs */

		/*

		 * allow multicast data frames only as long as the station is

		 * authorized, i.e., GTK keys are already installed (if needed)

		/* Allow beacons to pass through as long as we are not

		 * associated, or we do not have dtim period information.

 Allocate sniffer station */

 cmd.ibss.beacon_time/cmd.ibss.beacon_tsf are curently ignored */

 TODO: Assumes that the beacon id == mac context id */

 Override the filter flags to accept only probe requests */

	/*

	 * This flag should be set to true when the P2P Device is

	 * discoverable and there is at least another active P2P GO. Settings

	 * this flag will allow the P2P Device to be discoverable on other

	 * channels in addition to its listen channel.

	 * Note that this flag should not be set in other cases as it opens the

	 * Rx filters on all MAC and increases the number of interrupts.

	/* The index is relative to frame start but we start looking at the

 Parse variable-length elements of beacon to find WLAN_EID_TIM */

 If TIM field was found, set variables */

 Set up TX command fields */

 Enable FILS on PSC channels only */

 The beacon template for the AP/GO/IBSS has changed and needs update */

 Find the beacon_device_ts and beacon_int for a managed interface */

 Station client has higher priority over P2P client*/

/*

 * Fill the specific data for mac context of type AP of P2P GO

 in AP mode, the MCAST FIFO takes the EDCA params from VO */

	/*

	 * in AP mode, pass probe requests and beacons from other APs

	 * (needed for ht protection); when there're no any associated

	 * station don't ask FW to pass beacons to prevent unnecessary

	 * wake-ups.

	/*

	 * Only set the beacon time when the MAC is being added, when we

	 * just modify the MAC then we should keep the time -- the firmware

	 * can otherwise have a "jumping" TBTT.

		/*

		 * If there is a station/P2P client interface which is

		 * associated, set the AP's TBTT far enough from the station's

		 * TBTT. Otherwise, set it to the current system time

 unused */

 TODO: Assume that the beacon id == mac context id */

 Fill the common data for all mac context types */

 Fill the data specific for ap mode */

 Fill the common data for all mac context types */

 Fill the data specific for GO mode */

 will only do anything at resume from D3 time */

 Don't start to countdown from a failed beacon */

 we don't have CSA NoA scheduled yet, switch now */

		/*

		 * The channel switch is started and we have blocked the

		 * stations. If this is the first beacon (the timeout wasn't

		 * set), set the unblock timeout, otherwise countdown

 Check if the timeout is expired, and unblock tx */

	/*

	 * TODO: the threshold should be adjusted based on latency conditions,

	 * and/or in case of a CS flow on one of the other AP vifs.

 TODO: implement start trigger */

 handle per-version differences */

 update rx_status according to the notification's metadata */

 TSF as indicated by the firmware  is at INA time */

 copy the data */

 pass it as regular rx to mac80211 */

 noa_attr contains 1 reserved byte, need to substruct it */

	/*

	 * If it's a one time NoA, only one descriptor is needed,

	 * adjust the length according to len_low.

 should never happen */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

 * Copyright (C) 2018-2021 Intel Corporation

	/*

	 * If associated to this AP and already have security context,

	 * the TK is already configured for this station, so it

	 * shouldn't be set again here.

 use maximum for "no timeout" or bigger than what we can do */

	/*

	 * We treat it always as random, since if not we'll

	 * have filled our local address there instead.

	/*

	 * Use a large value for "no timeout". Don't use the maximum value

	 * because of fw limitations.

 AP's TSF is only relevant if associated */

 Don't report AP's TSF */

 non EDCA based measurement must use HE preamble */

 regular two-sided FTM */

	/*

	 * Versions 3 and 4 has some common fields, so

	 * iwl_mvm_ftm_put_target_common() can be used for version 7 too.

	/*

	 * TODO: Beacon interval is currently unknown, so use the common value

	 * of 100 TUs.

	/*

	 * Versions 7 and 8 has the same structure except from the responders

	 * list, so iwl_mvm_ftm_cmd() can be used for version 7 too.

 Only 2 STS are supported on Tx */

	/*

	 * If secure LTF is turned off, replace the flag with PMF only

 we found the entry we needed */

 Smooth the results based on the tracked RTT average */

	/*

	 * update the responder's average RTT results regardless of

	 * the under/over shoot logic below

 smooth the results */

 Starting from version 8, the FW advertises the version */

 The first version of the new range request API */

 the first part is the same for old and new APIs */

			/*

			 * FIXME: the firmware needs to report this, we don't

			 * even know the number of bursts the responder picked

			 * (if we asked it to)

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2013-2014, 2018-2020 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 20MHz / 40MHz below / 40Mhz above*/

 dummy entry for channel 0 */

	/*

	 * Checking that we hold mvm->mutex is a good idea, but the rate

	 * control can't acquire the mutex since it runs in Tx path.

	 * So this is racy in that case, but in the worst case, the AMPDU

	 * size limit will be wrong for a short time which is not a big

	 * issue.

 else - default = TX TX disallowed */

 nothing to do */

 We assume here that we don't have more than 2 vifs on 2.4GHz */

 if the primary is low latency, it will stay primary */

 must be called under rcu_read_lock */

 default smps_mode is AUTOMATIC - only used for client modes */

 If channel context is invalid or not on 2.4GHz .. */

 ... relax constraints and disable rssi events */

 relax SMPS constraints for next association */

 low latency is always primary */

			/*

			 * downgrade the current primary no matter what its

			 * type is.

 there is low latency vif - we will be secondary */

	/*

	 * STA / P2P Client, try to be primary if first vif. If we are in low

	 * latency mode, we are already in primary and just don't do much

 if secondary is not NULL, it might be a GO */

	/*

	 * don't reduce the Tx power if one of these is true:

	 *  we are in LOOSE

	 *  single share antenna product

	 *  BT is inactive

	 *  we are not associated

 try to get the avg rssi from fw */

 if the RSSI isn't valid, fake it is very low */

 Begin to monitor the RSSI: it may influence the reduced Tx power */

 Ignore updates if we are in force mode */

 Don't spam the fw with the same command over and over */

 remember this notification for future use: rssi fluctuations */

 Ignore updates if we are in force mode */

	/*

	 * Rssi update while not associated - can happen since the statistics

	 * are handled asynchronously

 No BT - reports should be disabled */

	/*

	 * Check if rssi is good enough for reduced Tx power, but not in loose

	 * scheme.

 tight coex, high bt traffic, reduce AGG time limit */

	/*

	 * In Tight / TxTxDis, BT can't Rx while we Tx, so use both antennas

	 * since BT is already killed.

	 * In Loose, BT can Rx while we Tx, so forbid MIMO to let BT Rx while

	 * we Tx.

	 * When we are in 5GHz, we'll get BT_COEX_INVALID_LUT allowing MIMO.

 there is no other antenna, shared antenna is always available */

 there is no other antenna, shared antenna is always available */

 ignore cfend and cfendack frames as we never send those */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 adaptive dwell max budget time [TU] for full scan */

 adaptive dwell max budget time [TU] for directed scan */

 adaptive dwell default high band APs number */

 adaptive dwell default low band APs number */

 adaptive dwell default APs number in social channels (1, 6, 11) */

 number of scan channels */

 adaptive dwell number of APs override mask for p2p friendly GO */

 adaptive dwell number of APs override mask for social channels */

 adaptive dwell number of APs override for p2p friendly GO channels */

 adaptive dwell number of APs override for social channels */

 minimal number of 2GHz and 5GHz channels in the regular scan request */

 For CDB this is low band scan type, for non-CDB - type. */

 exclude the given vif */

		/* in case of DCM with GO where BSS DTIM interval < 220msec

		 * set all scan requests as fast-balance scan

 require rrm scan whenever the fw supports it */

 we create the 802.11 header and SSID element */

 DS parameter set element is added on 2.4GHZ band if required */

	/* TODO: [BUG] This function should return the maximum allowed size of

	 * scan IEs, however the LMAC scan api contains both 2GHZ and 5GHZ IEs

	 * in the same command. So the correct implementation of this function

	 * is just iwl_mvm_max_scan_ie_fw_cmd_room() / 2. Currently the scan

	 * command has only 512 bytes and it would leave us with about 240

	 * bytes for scan IEs, which is clearly not enough. So meanwhile

	 * we will report an incorrect value. This may result in a failure to

	 * issue a scan in unified_scan_lmac and unified_sched_scan_lmac

	 * functions with -ENOBUFS, if a large enough probe will be provided.

	/* If this happens, the firmware has mistakenly sent an LMAC

	 * notification during UMAC scans -- warn and ignore it.

 scan status must be locked for proper checking */

	/* We first check if we were stopping a scan, in which case we

	 * just clear the stopping flag.  Then we check if it was a

	 * firmware initiated stop, in which case we need to inform

	 * mac80211.

	 * Note that we can have a stopping and a running scan

	 * simultaneously, but we can't have two different types of

	 * scans stopping or running at the same time (since LMAC

	 * doesn't support it).

/* We insert the SSIDs in an inverted order, because the FW will

 * invert it back.

	/*

	 * copy SSIDs from match list.

	 * iwl_config_sched_scan_profiles() uses the order of these ssids to

	 * config match list.

 skip empty SSID matchsets */

 add SSIDs from scan SSID list */

 if max_profile is MAX_PROFILES_V2, we have the new API */

 No blocklist configuration */

 Support any cipher and auth algorithm */

		/*

		 * The scan abort will return 1 for success or

		 * 2 for "failure".  A failure condition can be

		 * due to simply not being in an active scan which

		 * can occur if we send the scan abort before the

		 * microcode has notified us that a scan is completed.

	/*

	 * Fw doesn't use this sta anymore, pending deprecation via HOST API

	 * change

 Add a placeholder for DS Parameter Set element */

 pos[7] - tx power will be inserted by the FW */

	/*

	 * Unfortunately, right now the offload scan doesn't support randomising

	 * within the firmware, so until the firmware API is ready we implement

	 * it in the driver. This means that the scan iterations won't really be

	 * random, only when it's restarted, but at least that helps a bit.

 Insert ds parameter set element on 2.4 GHz band */

	/* We can only use EBS if:

	 *	1. the feature is supported;

	 *	2. the last EBS was successful;

	 *	3. if only single scan, the single scan EBS API is supported;

	 *	4. it's not a p2p find operation.

	 *	5. we are not in low latency mode,

	 *	   or if fragmented ebs is supported by the FW

 this API uses bits 1-20 instead of 0-19 */

	/*

	 * If the number of iterations of the last scan plan is set to

	 * zero, it should run infinitely. However, this is not always the case.

	 * For example, when regular scan is requested the driver sets one scan

	 * plan with one iteration.

 Set both basic rates and supported rates */

 This function should not be called when using ADD_STA ver >=12 */

 This function should not be called when using ADD_STA ver >=12 */

	/*

	 * Check for fragmented scan on LMAC2 - high band.

	 * LMAC1 - low band is checked above.

		/*

		 * Fw doesn't use this sta anymore. Deprecated on SCAN_CFG_CMD

		 * version 5.

 if custom max budget was configured with debugfs */

 if custom max budget was configured with debugfs */

	/*

	 * Populate the arrays of the short SSIDs and the BSSIDs using the 6GHz

	 * collocated parameters. This might not be optimal, as this processing

	 * does not (yet) correspond to the actual channels, so it is possible

	 * that some entries would be left out.

	 *

	 * TODO: improve this logic.

 First, try to place the short SSID */

 try to place BSSID for the same entry */

 TODO: this function can be merged with iwl_mvm_scan_umac_fill_ch_p_v6 */

		/*

		 * The optimize the scan time, i.e., reduce the scan dwell time

		 * on each channel, the below logic tries to set 3 direct BSSID

		 * probe requests for each broadcast probe request with a short

		 * SSID.

		 * TODO: improve this logic

 Relevant short SSID bit set */

					/*

					 * Use short SSID only to create a new

					 * iteration during channel dwell or in

					 * case that the short SSID has a

					 * matching SSID, i.e., scan for hidden

					 * APs.

		/*

		 * In the following cases apply passive scan:

		 * 1. Non fragmented scan:

		 *	- PSC channel with NO_LISTEN_FLAG on should be treated

		 *	  like non PSC channel

		 *	- Non PSC channel with more than 3 short SSIDs or more

		 *	  than 9 BSSIDs.

		 *	- Non PSC Channel with unsolicited probe response and

		 *	  more than 2 short SSIDs or more than 6 BSSIDs.

		 *	- PSC channel with more than 2 short SSIDs or more than

		 *	  6 BSSIDs.

		 * 3. Fragmented scan:

		 *	- PSC channel with more than 1 SSID or 3 BSSIDs.

		 *	- Non PSC channel with more than 2 SSIDs or 6 BSSIDs.

		 *	- Non PSC channel with unsolicited probe response and

		 *	  more than 1 SSID or more than 3 BSSIDs.

 set fragmented ebs for fragmented scan on HB channels */

 6GHz passive scan allowed only on station interface  */

	/*

	 * 6GHz passive scan is allowed while associated in a defined time

	 * interval following HW reset or resume flow

 No need for 6GHz passive scan if not enough time elapsed */

 not enough channels in the regular scan request */

 not a wildcard scan, so cannot enable passive 6GHz scan */

	/*

	 * Not all the 6GHz channels are disabled, so no need for 6GHz passive

	 * scan

 all conditions to enable 6ghz passive scan are satisfied */

	/*

	 * If no direct SSIDs are provided perform a passive scan. Otherwise,

	 * if there is a single SSID which is not the broadcast SSID, assume

	 * that the scan is intended for roaming purposes and thus enable Rx on

	 * all chains to improve chances of hearing the beacons/probe responses.

	/*

	 * Extended dwell is relevant only for low band to start with, as it is

	 * being used for social channles only (1, 6, 11), so we can check

	 * only scan type on low band also for CDB.

		/* Since IWL_UMAC_SCAN_GEN_FLAGS_EXTENDED_DWELL and

		 * NL80211_SCAN_FLAG_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION shares

		 * the same bit, we need to make sure that we use this bit here

		 * only when IWL_UMAC_SCAN_GEN_FLAGS_EXTENDED_DWELL cannot be

	/*

	 * If the number of iterations of the last scan plan is set to

	 * zero, it should run infinitely. However, this is not always the case.

	 * For example, when regular scan is requested the driver sets one scan

	 * plan with one iteration.

 set fragmented ebs for fragmented scan on HB channels */

	/* This looks a bit arbitrary, but the idea is that if we run

	 * out of possible simultaneous scans and the userspace is

	 * trying to run a scan type that is already running, we

	 * return -EBUSY.  But if the userspace wants to start a

	 * different type of scan, we stop the opposite type to make

	 * space for the new request.  The reason is backwards

	 * compatibility with old wpa_supplicant that wouldn't stop a

	 * scheduled scan before starting a normal scan.

 FW supports only a single periodic scan */

	/* Use a switch, even though this is a bitmask, so that more

	 * than one bits set will fall in default and we will warn.

		/* For non-unified images, there's no need to stop

		 * anything for net-detect since the firmware is

		 * restarted anyway.  This way, any sched scans that

		 * were running will be restarted when we resume.

		/* If this is a unified image and we ran out of scans,

		 * we need to stop something.  Prefer stopping regular

		 * scans, because the results are useless at this

		 * point, and we should be able to keep running

		 * another scheduled scan while suspended.

		/* Something is wrong if no scan was running but we

		 * ran out of scans.

 set the newest version first to shorten the list traverse time */

 we should have failed registration if scan_cmd was NULL */

		/* If the scan failed, it usually means that the FW was unable

		 * to allocate the time events. Warn on it, but maybe we

		 * should try to send the command again with different params.

 we should have failed registration if scan_cmd was NULL */

	/* In theory, LMAC scans can handle a 32-bit delay, but since

	 * waiting for over 18 hours to start the scan is a bit silly

	 * and to keep it aligned with UMAC scans (which only support

	 * 16-bit delays), trim it down to 16-bits.

 for 6 GHZ band only PSC channels need to be added */

		/* If the scan failed, it usually means that the FW was unable

		 * to allocate the time events. Warn on it, but maybe we

		 * should try to send the command again with different params.

 if the scan is already stopping, we don't need to notify mac80211 */

	/* We should always get a valid index here, because we already

	 * checked that this type of scan was running in the generic

	 * code.

/*

 * This function is used in nic restart flow, to inform mac80211 about scans

 * that was aborted by restart flow or by an assert.

			/* Sched scan will be restarted by mac80211 in

			 * restart_hw, so do not report if FW is about to be

			 * restarted.

		/* We shouldn't have any UIDs still set.  Loop over all the

		 * UIDs to make sure there's nothing left there and warn if

		 * any is found.

		/* Sched scan will be restarted by mac80211 in

		 * restart_hw, so do not report if FW is about to be

		 * restarted.

	/* Clear the scan status so the next scan requests will

	 * succeed and mark the scan as stopping, so that the Rx

	 * handler doesn't do anything, as the scan was stopped from

	 * above.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

/*

 * iwl_mvm_rx_rx_phy_cmd - REPLY_RX_PHY_CMD handler

 *

 * Copies the phy information in mvm->last_phy_info, it will be used when the

 * actual data will come from the fw in the next packet.

/*

 * iwl_mvm_pass_packet_to_mac80211 - builds the packet for mac80211

 *

 * Adds the rxb to a new skb and give it to mac80211

	/*

	 * The 'hdrlen' (plus the 8 bytes for the SNAP and the crypt_len,

	 * but those are all multiples of 4 long) all goes away, but we

	 * want the *end* of it, which is going to be the start of the IP

	 * header, to be aligned when it gets pulled in.

	 * The beginning of the skb->data is aligned on at least a 4-byte

	 * boundary after allocation. Everything here is aligned at least

	 * on a 2-byte boundary so we can just take hdrlen & 3 and pad by

	 * the result.

	/* If frame is small enough to fit in skb->head, pull it completely.

	 * If not, only pull ieee80211_hdr (including crypto if present, and

	 * an additional 8 bytes for SNAP/ethertype, see below) so that

	 * splice() or TCP coalesce are more efficient.

	 *

	 * Since, in addition, ieee80211_data_to_8023() always pull in at

	 * least 8 bytes (possibly more for mesh) we can do the same here

	 * to save the cost of doing it later. That still doesn't pull in

	 * the actual IP header since the typical case has a SNAP header.

	 * If the latter changes (there are efforts in the standards group

	 * to do so) we should revisit this and ieee80211_data_to_8023().

/*

 * iwl_mvm_get_signal_strength - use new rx PHY INFO API

 * values are reported by the fw as positive values - need to negate

 * to obtain their dBM.  Account for missing antennas by replacing 0

 * values by -256dBm: practically 0 power and a non-feasible 8 bit value.

/*

 * iwl_mvm_set_mac80211_rx_flag - translate fw status to mac80211 format

 * @mvm: the mvm object

 * @hdr: 80211 header

 * @stats: status in mac80211's format

 * @rx_pkt_status: status coming from fw

 *

 * returns non 0 value if the packet should be dropped

 packet was encrypted with unknown alg */

 alg is CCM: check MIC only */

 Don't drop the frame and decrypt it in SW */

 Expected in monitor (not having the keys) */

 treat non-QoS as BE */

 expected throughput in 100Kbps, single stream, 20 MHz */

 count the airtime only once for each ampdu */

/*

 * iwl_mvm_rx_rx_mpdu - REPLY_RX_MPDU_CMD handler

 *

 * Handles the actual data of the Rx packet from the fw

	/* Dont use dev_alloc_skb(), we'll have enough headroom once

	 * ieee80211_hdr pulled.

	/*

	 * drop the packet if it has failed being decrypted by HW

	/*

	 * Keep packets with CRC errors (and with overrun) for monitor mode

	 * (otherwise the firmware discards them) but mark them as bad.

 This will be used in several places later */

 rx_status carries information about the packet to mac80211 */

 TSF as indicated by the firmware  is at INA time */

		/* This is fine since we prevent two stations with the same

		 * address from being added.

		/* We have tx blocked stations (with CS bit). If we heard

		 * frames from a blocked station on a new channel we can

		 * TX to it again.

 set the preamble flag if appropriate */

		/*

		 * We know which subframes of an A-MPDU belong

		 * together since we get a single PHY response

		 * from the firmware for all of them

 Set up the HT phy flags */

	/* This doesn't need the MAC ID check since it's not taking the

	 * data copied into the "data" struct, but rather the data from

	 * the notification directly.

	/* make sure that beacon statistics don't go backwards with TCM

	 * request to clear statistics

 BT Coex */

 CQM Notification */

 re-init every time to store rate from FW */

	/*

	 * Don't update in case the statistics are not cleared, since

	 * we will end up counting twice the same airtime, once in TCM

	 * request and once in statistics notification.

 From ver 14 and up we use TLV statistics format */

	/*

	 * Don't update in case the statistics are not cleared, since

	 * we will end up counting twice the same airtime, once in TCM

	 * request and once in statistics notification.

 check that this TID is valid */

 get the station */

 update mac80211 with the bitmap for the reordering buffer */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2015, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

/*

 * New version of ADD_STA_sta command added new fields at the end of the

 * structure, so sending the size of the relevant API's structure is enough to

 * support both API versions.

 d0i3/d3 assumes the AP's sta_id (of sta vif) is 0. reserve it. */

 Don't take rcu_read_lock() since we are protected by mvm->mutex */

 send station add/update command to firmware */

 override NSS */

 nothing */

	/* D6.0 10.12.2 A-MPDU length limit rules

	 * A STA indicates the maximum length of the A-MPDU preEOF padding

	 * that it can receive in an HE PPDU in the Maximum A-MPDU Length

	 * Exponent field in its HT Capabilities, VHT Capabilities,

	 * and HE 6 GHz Band Capabilities elements (if present) and the

	 * Maximum AMPDU Length Exponent Extension field in its HE

	 * Capabilities element

 Limit to max A-MPDU supported by FW */

 Timer expired */

	/*

	 * sta should be valid unless the following happens:

	 * The firmware asserts which triggers a reconfig flow, but

	 * the reconfig fails before we set the pointer to sta into

	 * the fw_id_to_mac_id pointer table. Mac80211 can't stop

	 * A-MDPU and hence the timer continues to run. Then, the

	 * timer expires and sta is NULL.

 Disable aggregations for a bitmap of TIDs for a given station */

 Notify FW of queue removal from the STA queues */

 If the queue is still enabled - nothing left to do in this func */

 Make sure queue info is correct even though we overwrite it */

 If we are here - the queue is freed and we can zero out these vals */

 Regardless if this is a reserved TXQ for a STA - mark it as false */

/*

 * Remove a queue from a station's resources.

 * Note that this only marks as free. It DOESN'T delete a BA agreement, and

 * doesn't disable the queue

 Unmap MAC queues and TIDs from this queue */

 Don't use this queue anymore */

	/*

	 * The TX path may have been using this TXQ_ID from the tid_data,

	 * so make sure it's no longer running so that we can safely reuse

	 * this TXQ later. We've set all the TIDs to IWL_MVM_INVALID_QUEUE

	 * above, but nothing guarantees we've stopped using them. Thus,

	 * without this, we could get to iwl_mvm_disable_txq() and remove

	 * the queue while still sending frames to it.

 Disable the queue */

 If TXQ is allocated to another STA, update removal in FW */

	/*

	 * This protects us against grabbing a queue that's being reconfigured

	 * by the inactivity checker.

 See what ACs the existing queues for this STA have */

 Only DATA queues can be shared */

	/*

	 * The queue to share is chosen only from DATA queues as follows (in

	 * descending priority):

	 * 1. An AC_BE queue

	 * 2. Same AC queue

	 * 3. Highest AC queue that is lower than new AC

	 * 4. Any existing AC (there always is at least 1 DATA queue)

 Priority 1: An AC_BE queue */

 Priority 2: Same AC queue */

 Priority 3a: If new AC is VO and VI exists - use VI */

 Priority 3b: No BE so only AC less than the new one is BK */

 Priority 4a: No BE nor BK - use VI if exists */

 Priority 4b: No BE, BK nor VI - use VO if exists */

 Make sure queue found (or not) is legal */

/*

 * If a given queue has a higher AC than the TID stream that is being compared

 * to, the queue needs to be redirected to the lower AC. This function does that

 * in such a case, otherwise - if no redirection required - it does nothing,

 * unless the %force param is true.

	/*

	 * If the AC is lower than current one - FIFO needs to be redirected to

	 * the lowest one of the streams in the queue. Check if this is needed

	 * here.

	 * Notice that the enum ieee80211_ac_numbers is "flipped", so BK is with

	 * value 3 and VO with value 0, so to check if ac X is lower than ac Y

	 * we need to check if the numerical value of X is LARGER than of Y.

 Stop the queue and wait for it to empty */

 Before redirecting the queue we need to de-activate it */

 Make sure the SCD wrptr is correctly set before reconfiguring */

 Update the TID "owner" of the queue */

 TODO: Work-around SCD bug when moving back by multiples of 0x40 */

 Redirect to lower AC */

 Update AC marking of the queue */

	/*

	 * Mark queue as shared in transport if shared

	 * Note this has to be done after queue enablement because enablement

	 * can also set this value, and there is no indication there to shared

	 * queues

 Continue using the queue */

 This should not be hit with new TX path */

 Start by looking for a free queue */

 Make sure this TID isn't already enabled */

 Update mappings and refcounts */

 Send the enabling command if we need to */

 Find any TID for queue */

 queue sharing is disabled on new TX path */

 Find TID for queue, and make sure it is the only one on the queue */

 If aggs should be turned back on - do it */

 Mark queue intenally as aggregating again */

/*

 * Remove inactive TIDs of a given queue.

 * If all queue TIDs are inactive - mark the queue as inactive

 * If only some the queue TIDs are inactive - unmap them from the queue

 *

 * Returns %true if all TIDs were removed and the queue could be reused.

 Go over all non-active TIDs, incl. IWL_MAX_TID_COUNT (for mgmt) */

 If some TFDs are still queued - don't mark TID as inactive */

 Don't mark as inactive any TID that has an active BA */

 If all TIDs in the queue are inactive - return it can be reused */

	/*

	 * If we are here, this is a shared queue and not all TIDs timed-out.

	 * Remove the ones that did.

		/*

		 * We need to take into account a situation in which a TXQ was

		 * allocated to TID x, and then turned shared by adding TIDs y

		 * and z. If TID x becomes inactive and is removed from the TXQ,

		 * ownership must be given to one of the remaining TIDs.

		 * This is mainly because if TID x continues - a new queue can't

		 * be allocated for it as long as it is an owner of another TXQ.

		 *

		 * Mark this queue in the right bitmap, we'll send the command

		 * to the firmware later.

	/*

	 * There may be different TIDs with the same mac queues, so make

	 * sure all TIDs have existing corresponding mac queues enabled

 If the queue is marked as shared - "unshare" it */

/*

 * Check for inactivity - this includes checking if any queue

 * can be unshared and finding one (and only one) that can be

 * reused.

 * This function is also invoked as a sort of clean-up task,

 * in which case @alloc_for_sta is IWL_MVM_INVALID_STA.

 *

 * Returns the queue number, or -ENOSPC.

 we skip the CMD queue below by starting at 1 */

 If TXQ isn't in active use anyway - nothing to do here... */

 Check to see if there are inactive TIDs on this queue */

 If all TIDs are active - finish check on this queue */

		/*

		 * If we are here - the queue hadn't been served recently and is

		 * in use

		/*

		 * If the STA doesn't exist anymore, it isn't an error. It could

		 * be that it was removed since getting the queues, and in this

		 * case it should've inactivated its queues anyway.

 only unlock sta lock - we still need the queue info lock */

 Reconfigure queues requiring reconfiguation */

 If no such queue is found, we'll use a DATA queue instead */

 try harder - perhaps kill an inactive queue */

 No free queue - we'll have to share */

	/*

	 * Mark TXQ as ready, even though it hasn't been fully configured yet,

	 * to make sure no one else takes it.

	 * This will allow avoiding re-acquiring the lock at the end of the

	 * configuration. On error we'll mark it back as free.

 This shouldn't happen - out of queues */

	/*

	 * Actual en/disablement of aggregations is through the ADD_STA HCMD,

	 * but for configuring the SCD to send A-MPDUs we need to mark the queue

	 * as aggregatable.

	 * Mark all DATA queues as allowing to be aggregated at some point

 Disable any open aggs on this queue */

	/*

	 * Mark queue as shared in transport if shared

	 * Note this has to be done after queue enablement because enablement

	 * can also set this value, and there is no indication there to shared

	 * queues

	/*

	 * This looks racy, but it is not. We have only one packet for

	 * this ra/tid in our Tx path since we stop the Qdisc when we

	 * need to allocate a new TFD queue.

 If we need to re-enable aggregations... */

 Redirect queue, if needed */

		/*

		 * We can't really do much here, but if this fails we can't

		 * transmit anyway - so just don't transmit the frame etc.

		 * and let them back up ... we've tried our best to allocate

		 * a queue in the function itself.

 queue reserving is disabled on new TX path */

 run the general cleanup/unsharing of queues */

 Make sure we have free resources for this STA */

 try again - this time kick out a queue if needed */

/*

 * In DQA mode, after a HW restart the queues should be allocated as before, in

 * order to avoid race conditions when there are shared queues. This function

 * does the re-mapping and queue allocation.

 *

 * Note that re-enabling aggregations isn't done in this function.

 Make sure reserved queue is still marked as such (if allocated) */

			/*

			 * on failures, just set it to IWL_MVM_INVALID_QUEUE

			 * to try again later, we have no other good way of

			 * failing here

			/*

			 * Since we don't set the seq number after reset, and HW

			 * sets it now, FW reset will cause the seq num to start

			 * at 0 again, so driver will need to update it

			 * internally as well, so it keeps in sync with real val

 if this is a HW restart re-alloc existing queues */

		/*

		 * First add an empty station since allocating

		 * a queue requires a valid station

 HW restart, don't assume the memory has been zeroed */

 No aggs at first */

 for HW restart - reset everything but the sequence number */

		/*

		 * Mark all queues for this STA as unallocated and defer TX

		 * frames until the queue is allocated

		/*

		 * Initialize all the last_seq values to 0xffff which can never

		 * compare equal to the frame's seq_ctrl in the check in

		 * iwl_mvm_is_dup() since the lower 4 bits are the fragment

		 * number and fragmented packets don't reach that function.

		 *

		 * This thus allows receiving a packet with seqno 0 and the

		 * retry bit set as the very first packet on a new TID.

	/*

	 * if rs is registered with mac80211, then "add station" will be handled

	 * via the corresponding ops, otherwise need to notify rate scaling here

/*

 * Remove a station from the FW table. Before sending the command to remove

 * the station validate that the station is indeed known to the driver (sanity

 * only).

 Note: internal stations are marked as error values */

 flush its queues here since we are freeing mvm_sta */

 If there is a TXQ still marked as reserved - free it */

		/*

		 * If no traffic has gone through the reserved TXQ - it

		 * is still marked as IWL_MVM_QUEUE_RESERVED, and

		 * should be manually marked as free again

 if associated - we can't remove the AP STA now */

 unassoc - go ahead - remove the AP STA now */

	/*

	 * This shouldn't happen - the TDLS channel switch should be canceled

	 * before the STA is removed.

	/*

	 * Make sure that the tx response code sees the station as -EBUSY and

	 * calls the drain worker.

 put a non-NULL value so iterating over the stations won't stop */

 Map queue to fifo - needs to happen before adding station */

	/*

	 * For 22000 firmware and on we cannot add queue to a station unknown

	 * to firmware so enable queue here - after the station was added

 Allocate aux station and assign to it the aux queue */

	/*

	 * In CDB NICs we need to specify which lmac to use for aux activity

	 * using the mac_id argument place to send lmac_id to the function

/*

 * Send the add station command for the vif's broadcast station.

 * Assumes that the station was already allocated.

 *

 * @mvm: the mvm component

 * @vif: the interface to which the broadcast station is added

 * @bsta: the broadcast station to add.

	/*

	 * For 22000 firmware and on we cannot add queue to a station unknown

	 * to firmware so enable queue here - after the station was added

/* Send the FW a request to remove the station from it's internal data

/* Allocate a new station entry for the broadcast station to the given vif,

 * and send it to the FW.

 * Note that each P2P mac should have its own broadcast station.

 *

 * @mvm: the mvm component

 * @vif: the interface to which the broadcast station is added

/*

 * Send the FW a request to remove the station from it's internal data

 * structures, and in addition remove it from the local data structure.

/*

 * Allocate a new station entry for the multicast station to the given vif,

 * and send it to the FW.

 * Note that each AP/GO mac should have its own multicast station.

 *

 * @mvm: the mvm component

 * @vif: the interface to which the multicast station is added

	/*

	 * In IBSS, ieee80211_check_queues() sets the cab_queue to be

	 * invalid, so make sure we use the queue we want.

	 * Note that this is done here as we want to avoid making DQA

	 * changes in mac80211 layer.

	/*

	 * While in previous FWs we had to exclude cab queue from TFD queue

	 * mask, now it is needed as any other queue.

	/*

	 * Enable cab queue after the ADD_STA command is sent.

	 * This is needed for 22000 firmware which won't accept SCD_QUEUE_CFG

	 * command with unknown station id, and for FW that doesn't support

	 * station API since the cab queue is not included in the

	 * tfd_queue_mask.

 This is a valid situation for GTK removal */

	/*

	 * The fields assigned here are in the same location at the start

	 * of the command, so we can do this union trick.

/*

 * Send the FW a request to remove the station from it's internal data

 * structures, and in addition remove it from the local data structure.

		/*

		 * This shouldn't happen in regular DELBA since the internal

		 * delBA notification should trigger a release of all frames in

		 * the reorder buffer.

		/*

		 * Prevent timer re-arm. This prevents a very far fetched case

		 * where we timed out on the notification. There may be prior

		 * RX frames pending in the RX queue before the notification

		 * that might get processed between now and the actual deletion

		 * and we would re-arm the timer although we are deleting the

		 * reorder buffer.

 rx reorder timer */

 sparse doesn't like the __align() so don't check */

		/*

		 * The division below will be OK if either the cache line size

		 * can be divided by the entry size (ALIGN will round up) or if

		 * if the entry size can be divided by the cache line size, in

		 * which case the ALIGN() will do nothing.

		/*

		 * Upward align the reorder buffer size to fill an entire cache

		 * line for each queue, to avoid sharing cache lines between

		 * different queues.

		/*

		 * Allocate here so if allocation fails we can bail out early

		 * before starting the BA session in the firmware

		/*

		 * This division is why we need the above BUILD_BUG_ON(),

		 * if that doesn't hold then this will not be right.

		/*

		 * protect the BA data with RCU to cover a case where our

		 * internal RX sync mechanism will timeout (not that it's

		 * supposed to happen) and we will free the session data while

		 * RX is being processed in parallel

 check that restart flow didn't zero the counter */

 synchronize all rx queues so we can safely delete */

 In DQA-mode the queue isn't removed on agg termination */

 We treat MGMT as TID 8, which is set as AC_VO */

	/*

	 * Note the possible cases:

	 *  1. An enabled TXQ - TXQ needs to become agg'ed

	 *  2. The TXQ hasn't yet been enabled, so find a free one and mark

	 *	it as reserved

 TXQ hasn't yet been enabled, so mark it only as reserved */

	/*

	 * In 22000 HW, the next_reclaimed index is only 8 bit, so we'll need

	 * to align the wrap around of ssn so we compare relevant values.

	/*

	 * When FW supports TLC_OFFLOAD, it also implements Tx aggregation

	 * manager, so this function should never be called in this case.

		/*

		 * If there is no queue for this tid, iwl_mvm_sta_tx_agg_start()

		 * would have failed, so if we are here there is no need to

		 * allocate a queue.

		 * However, if aggregation size is different than the default

		 * size, the scheduler should be reconfigured.

		 * We cannot do this with the new TX API, so return unsupported

		 * for now, until it will be offloaded to firmware..

		 * Note that if SCD default value changes - this condition

		 * should be updated as well.

 Maybe there is no need to even alloc a queue... */

	/*

	 * Only reconfig the SCD for the queue if the window size has

	 * changed from current (become smaller)

		/*

		 * If reconfiguring an existing queue, it first must be

		 * drained

 Send ADD_STA command to enable aggs only if the queue isn't shared */

 No need to mark as reserved */

	/*

	 * Even though in theory the peer could have different

	 * aggregation reorder buffer sizes for different sessions,

	 * our ucode doesn't allow for that and has a global limit

	 * for each station. Therefore, use the minimum of all the

	 * aggregation sessions and our default value.

	/*

	 * The TXQ is marked as reserved only if no traffic came through yet

	 * This means no traffic has been sent on this TID (agg'd or not), so

	 * we no longer have use for the queue. Since it hasn't even been

	 * allocated through iwl_mvm_enable_txq, so we can just mark it back as

	 * free.

	/*

	 * If mac80211 is cleaning its state, then say that we finished since

	 * our state has been cleared anyway.

		/*

		 * The agg session has been stopped before it was set up. This

		 * can happen when the AddBA timer times out for example.

 No barriers since we are under mutex */

	/*

	 * First set the agg state to OFF to avoid calling

	 * ieee80211_stop_tx_ba_cb in iwl_mvm_check_ratid_empty.

	/* Pick the unused key offset with the highest 'deleted'

	 * counter. Every time a key is deleted, all the counters

	 * are incremented and the one that was just deleted is

	 * reset to zero. Thus, the highest counter is the one

	 * that was deleted longest ago. Pick that one.

	/*

	 * The device expects GTKs for station interfaces to be

	 * installed as GTKs for the AP station. If we have no

	 * station ID, then use AP's station ID.

		/*

		 * It is possible that the 'sta' parameter is NULL,

		 * for example when a GTK is removed - the sta_id will then

		 * be the AP ID, and no station was passed by mac80211.

 there's a hole at 2/3 in FW format depending on version */

 verify the key details match the required command's expectations */

 This is a valid situation for IGTK */

 get phase 1 key from mac80211 */

 Get the station id from the mvm local station table */

		/*

		 * It is possible that the 'sta' parameter is NULL, and thus

		 * there is a need to retrieve the sta from the local station

		 * table.

	/* If the key_offset is not pre-assigned, we need to find a

	 * new offset to use.  In normal cases, the offset is not

	 * pre-assigned, but during HW_RESTART we want to reuse the

	 * same indices, so we pass them when this function is called.

	 *

	 * In D3 entry, we need to hardcoded the indices (because the

	 * firmware hardcodes the PTK offset to 0).  In this case, we

	 * need to make sure we don't overwrite the hw_key_idx in the

	 * keyconf structure, because otherwise we cannot configure

	 * the original ones back when resuming.

	/*

	 * For WEP, the same key is used for multicast and unicast. Upload it

	 * again, using the same key offset, and now pointing the other one

	 * to the same key slot (offset).

	 * If this fails, remove the original as well.

 Get the station from the mvm local station table */

 track which key was deleted last */

 delete WEP key twice to get rid of (now useless) offset */

	/* convert TIDs to ACs - we don't support TSPEC so that's OK

	 * Note that this field is reserved and unused by firmware not

	 * supporting GO uAPSD, so it's safe to always do this.

	/* If we're releasing frames from aggregation or dqa queues then check

	 * if all the queues that we're releasing frames from, combined, have:

	 *  - more frames than the service period, in which case more_data

	 *    needs to be set

	 *  - fewer than 'cnt' frames, in which case we need to adjust the

	 *    firmware command (but do that unconditionally)

 Note: this is ignored by firmware not supporting GO uAPSD */

 block the Tx queues until the FW updated the sleep Tx count */

	/*

	 * If sta PS state is handled by mac80211, tell it to start/stop

	 * queuing tx for this station.

 Block/unblock all the stations of the given mvmvif */

 Need to block/unblock also multicast station */

	/*

	 * Only unblock the broadcast station (FW blocks it for immediate

	 * quiet, not the driver)

	/*

	 * In 22000 HW, the next_reclaimed index is only 8 bit, so we'll need

	 * to align the wrap around of ssn so we compare relevant values.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2014 Intel Mobile Communications GmbH

 * Copyright (C) 2017 Intel Deutschland GmbH

 * Copyright (C) 2018-2020 Intel Corporation

 not used for now */

 for now the Tx cmd is empty and unused */

 populate TDLS peer data */

 we don't really care about the response at this point */

 when the first peer joins, send a power update first */

	/* Configure the FW with TDLS peer info only if TDLS channel switch

	 * capability is set.

	 * TDLS config data is used currently only in TDLS channel switch code.

	 * Supposed to serve also TDLS buffer station which is not implemneted

 when the last peer leaves, send a power update last */

 Protect the session to hear the TDLS setup response on the channel */

 we only send requests to our switching peer - update sent time */

 can fail sometimes */

 the station may not be here, but if it is, it must be a TDLS peer */

	/*

	 * Update state and possibly switch again after this is over (DTIM).

	 * Also convert TU to msec.

 get the existing peer if it's there */

		/*

		 * might be spurious packet from the peer after the switch is

		 * already done

 only allow requests from the same peer */

			/*

			 * We received a ch-switch request while an outgoing

			 * one is pending. Allow it if the peer is the link

			 * initiator.

 wait for idle before sending another request */

 we got a stale response - ignore it */

		/*

		 * we are waiting for the FW to give an "active" notification,

		 * so ignore requests in the meantime

 as above, allow the link initiator to proceed */

 they are the initiator */

		/*

		 * the only valid request when active is a request to return

		 * to the base channel by the current off-channel peer

 actually moving to the channel */

 we need to return to base channel */

 keep quota calculation simple for now - 50% of DTIM for TDLS */

 Switch time is the first element in the switch-timing IE. */

 channel switch has started, update state */

 channel switch failed - we are idle */

 called after an active channel switch has finished or timed-out */

 station might be gone, in that case do nothing */

 the station may not be here, but if it is, it must be a TDLS peer */

 retry after a DTIM if we failed sending now */

 we only support a single peer for channel switching */

	/*

	 * Mark the peer as "in tdls switch" for this vif. We only allow a

	 * single such peer per vif.

	/*

	 * Wait for 2 DTIM periods before attempting the next switch. The next

	 * switch will be made sooner if the current one completes before that.

 we only support a single peer for channel switching */

 make sure it's the same peer */

	/*

	 * If we're currently in a switch because of the now canceled peer,

	 * wait a DTIM here to make sure the phy is back on the base channel.

	 * We can't otherwise force it.

 make sure the phy is on the base channel */

 flush the channel switch state */

	/*

	 * we got a non-zero status from a peer we were switching to - move to

	 * the idle state and retry again later

 make sure it's the same peer */

 register a timeout in case we don't succeed in switching */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2019, 2021 Intel Corporation

 * Copyright (C) 2013-2014 Intel Mobile Communications GmbH

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

 fw uses an absolute value for this */

 set advanced pm flag with no uapsd ACs to enable ps-poll */

 QNDP TID - the highest TID with no admission control */

	/*

	 * Avoid using uAPSD if P2P client is associated to GO that uses

	 * opportunistic power save. This is due to current FW limitation.

	/*

	 * Avoid using uAPSD if client is in DCM -

	 * low latency issue in Miracast

 Allow U-APSD only if p2p is stand alone */

 disable, in case we're supposed to override */

 configure skip over dtim up to 306TU - 314 msec */

 the firmware really expects "look at every X DTIMs", so add 1 */

	/*

	 * Regardless of power management state the driver must set

	 * keep alive period. FW will use it for sending keep alive NDPs

	 * immediately after association. Check that keep alive period

	 * is at least 3 * DTIM

 CONFIG_IWLWIFI_DEBUGFS */

	/* The ap_sta_id is not expected to change during current association

	 * so no explicit protection is needed

 only a single MAC of the same type */

 only a single MAC of the same type */

 only a single MAC of the same type */

 set pm_enable to false */

 don't allow PM if any TDLS stations exist */

 enable PM on bss if bss stand alone */

 enable PM on p2p if p2p stand alone */

 clients are not stand alone: enable PM if DCM */

	/*

	 * There is only one channel in the system and there are only

	 * bss and p2p clients that share it

 share same channel*/

 disable PS if CAM */

 ...or if any of the vifs require PS to be off */

 update device power state if it has changed */

 get vifs info */

 get vifs info */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2014 Intel Mobile Communications GmbH

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

/*

 * Will return 0 even if the cmd failed when RFKILL is asserted unless

 * CMD_WANT_SKB is set in cmd->flags.

	/*

	 * Synchronous commands from this op-mode must hold

	 * the mutex, this ensures we don't try to send two

	 * (or more) synchronous commands at a time.

	/*

	 * If the caller wants the SKB, then don't hide any problems, the

	 * caller might access the response buffer which will be NULL if

	 * the command failed.

	/*

	 * Silently ignore failures if RFKILL is asserted or

	 * we are in suspend\resume process

/*

 * We assume that the caller set the status to the success value

	/*

	 * Only synchronous commands can wait for status,

	 * we use WANT_SKB so the caller can't.

		/*

		 * The command failed because of RFKILL, don't update

		 * the status, leave it as success and return 0.

/*

 * We assume that the caller set the status to the sucess value

 CCK is not allowed in HB */

 Legacy rate format, search for match in table */

		/* In the new rate legacy rates are indexed:

		 * 0 - 3 for CCK and 0 - 7 for OFDM.

/*

 * Returns the first antenna as ANT_[ABC], as defined in iwl-config.h.

 * The parameter should also be a combination of ANT_[ABC].

 using ffs is wrong if not */

 ffs will return 0 if mask is zeroed */

/*

 * Toggles between TX antennas to send the probe request on.

 * Receives the bitmask of valid TX antennas and the *index* used

 * for the last TX, and returns the next valid *index* to use.

 * In order to set it in the tx_cmd, must do BIT(idx).

/**

 * iwl_mvm_send_lq_cmd() - Send link quality command

 * @mvm: Driver data.

 * @lq: Link quality command to send.

 *

 * The link quality command is sent as the last step of station creation.

 * This is the special case in which init is set and we call a callback in

 * this case to clear the state indicating that station creation is in

 * progress.

/**

 * iwl_mvm_update_smps - Get a request to change the SMPS mode

 * @mvm: Driver data.

 * @vif: Pointer to the ieee80211_vif structure

 * @req_type: The part of the driver who call for a change.

 * @smps_request: The request to change the SMPS mode.

 *

 * Get a requst to change the SMPS mode,

 * and change it according to all other requests in the driver.

 SMPS is irrelevant for NICs that don't have at least 2 RX antenna */

 currently we don't care about the direction */

		/*

		 * We can't know when the station is asleep or awake, so we

		 * must disable the queue hang detection.

 this sends traffic load and updates quota as well */

 remember that this AP is broken */

 kbps */

 kbps */

		/*

		 * the rate here is actually the threshold, in 100Kbps units,

		 * so do the needed conversion from bytes to 100Kbps:

		 * 100kb = bits / (100 * 1000),

		 * 100kbps = 100kb / (msecs / 1000) ==

		 *           (bits / (100 * 1000)) / (msecs / 1000) ==

		 *           bits / (100 * msecs)

 enable immediately with enough packets but defer disabling */

 clear old data */

 clear old data */

	/*

	 * If the current load isn't low we need to force re-evaluation

	 * in the TCM period, so that we can return to low load if there

	 * was no traffic at all (and thus iwl_mvm_recalc_tcm didn't get

	 * triggered by traffic).

	/*

	 * If low-latency is active we need to force re-evaluation after

	 * (the longer) MVM_LL_PERIOD, so that we can disable low-latency

	 * when there's no traffic at all.

	/*

	 * Otherwise, we don't need to run the work struct because we're

	 * in the default "idle" state - traffic indication is low (which

	 * also covers the "no traffic" case) and low-latency is disabled

	 * so there's no state that may need to be disabled when there's

	 * no traffic at all.

	 *

	 * Note that this has no impact on the regular scheduling of the

	 * updates triggered by traffic - those happen whenever one of the

	 * two timeouts expire (if there's traffic at all.)

 re-check if somebody else won the recheck race */

 calculate statistics */

 the memset needs to be visible before the timestamp */

 The TCM data needs to be reset before "paused" flag changes */

	/*

	 * if the current load is not low or low latency is active, force

	 * re-evaluation to cover the case of no traffic.

 Disable power save when reading GP2 */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 default is to dump the entire data segment */

/*

 * Set NIC Temperature

 * Cause the driver to ignore the actual NIC temperature reported by the FW

 * Enable: any value between IWL_MVM_DEBUG_SET_TEMPERATURE_MIN -

 * IWL_MVM_DEBUG_SET_TEMPERATURE_MAX

 * Disable: IWL_MVM_DEBUG_SET_TEMPERATURE_DISABLE

 not a legal temperature */

		/* Since we can't read the temp while awake, just set

		 * it to zero until we get the next RX stats from the

		 * firmware.

 handle the temperature change */

 only change from debug set <-> debug unset */

 43 = size of each data line; 33 = size of each header */

 allow one more restart that we're provoking here */

 take the return value to make compiler happy - it will fail anyway */

 print which antennas were set for the scan command by the user */

	/*

	 * The input is the redirection table, partial or full.

	 * Repeat the pattern if needed.

	 * For example, input of 01020F will be repeated 42 times,

	 * indirecting RSS hash results to queues 1, 2, 15 (skipping

	 * queues 3 - 14).

 handle cut in the middle pattern for the last places */

 not used */

 supporting only MQ RX */

 avoid invalid memory access and malformed packet */

 Element len should be represented by u8 */

 send updated bcast filtering configuration */

 send updated bcast filtering configuration */

 if we only want to set the reg address - nothing more to do */

 otherwise, make sure we have both address and value */

	/*

	 * Use the notification waiter to get our function triggered

	 * in sequence with other RX. This ensures that frames we get

	 * on the RX queue _before_ the new configuration is applied

	 * still have mvm->cur_aid pointing to the old AID, and that

	 * frames on the RX queue _after_ the firmware processed the

	 * new configuration (and sent the response, synchronously)

	 * get mvm->cur_aid correctly set to the new AID.

 no need to really wait, we already did anyway */

 value zero triggers re-sending the default table to the device */

 in the future a new table will be added */

/* The size computation is as follows:

 * each number needs at most 3 characters, number of rows is the size of

 * the table; So, need 5 chars for the "freq: " part and each tuple afterwards

 * needs 6 characters for numbers and 5 for the punctuation around.

 Device wide debugfs entries */

 Take care of alignment of both the position and the length */

	/*

	 * Create a symlink with mac80211. It will be removed when mac80211

	 * exists (before the opmode exists which removes the target.)

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2020 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

/*

 * Use the reserved field to indicate magic values.

 * these values will only be used internally by the driver,

 * and won't make it to the fw (reserved will be 0).

 * BC_FILTER_MAGIC_IP - configure the val of this attribute to

 *	be the vif's ip address. in case there is not a single

 *	ip address (0, or more than 1), this attribute will

 *	be skipped.

 * BC_FILTER_MAGIC_MAC - set the val of this attribute to

 *	the LSB bytes of the vif's mac address

 arp */

 frame type - arp, hw type - ethernet */

 arp dest ip */

 mark it as special field */

 dhcp offer bcast */

 udp dest port - 68 (bootp client)*/

 dhcp - lsb bytes of client hw address */

 mark it as special field */

 last filter must be empty */

 all supported */

 no limits */

 Store the return source id */

 only update the regulatory core if changed */

 save the last source in case we overwrite it below */

 Notify the firmware we support wifi location updates */

 Now set our last stored MCC and source */

 update cfg80211 if the regdomain was changed */

 Tell mac80211 our characteristics */

	/*

	 * On older devices, enabling TX A-MSDU occasionally leads to

	 * something getting messed up, the command read from the FIFO

	 * gets out of sync and isn't a TX command, so that we have an

	 * assert EDC.

	 *

	 * It's not clear where the bug is, but since we didn't used to

	 * support A-MSDU until moving the mac80211 iTXQs, just leave it

	 * for older devices. We also don't see this issue on any newer

	 * devices.

		/*

		 * we absolutely need this for the new TX API since that comes

		 * with many more queues than the current code can deal with

		 * for station powersave

 this is the case for CCK frames, it's better (only 8) for OFDM */

 currently FW API supports only one optional cipher scheme */

	/* The new Tx API does not allow to pass the key or keyid of a MPDU to

	 * the hw, preventing us to control which key(id) to use per MPDU.

	 * Till that's fixed we can't use Extended Key ID for the newer cards.

 Extract MAC address */

 Extract additional MAC addresses if available */

 we create the 802.11 header and zero length SSID IE. */

	/*

	 * the firmware uses u8 for num of iterations, but 0xff is saved for

	 * infinite loop, so the maximum number of iterations is actually 254.

 assign default bcast filtering configuration */

	/*

	 * bufferable MMPDUs or MMPDUs on STA interfaces come via TXQs

	 * so we treat the others as broadcast

 If there is no sta, and it's not offchannel - send through AP */

 mac80211 holds rcu read lock */

	/*

	 * No need for threads to be pending here, they can leave the first

	 * taker all the work.

	 *

	 * mvmtxq->tx_request logic:

	 *

	 * If 0, no one is currently TXing, set to 1 to indicate current thread

	 * will now start TX and other threads should quit.

	 *

	 * If 1, another thread is currently TXing, set to 2 to indicate to

	 * that thread that there was another request. Since that request may

	 * have raced with the check whether the queue is empty, the TXing

	 * thread should check the queue's status one more time before leaving.

	 * This check is done in order to not leave any TX hanging in the queue

	 * until the next TX invocation (which may not even happen).

	 *

	 * If 2, another thread is currently TXing, and it will already double

	 * check the queue, so do nothing.

	/*

	 * Please note that racing is handled very carefully here:

	 * mvmtxq->txq_id is updated during allocation, and mvmtxq->list is

	 * deleted afterwards.

	 * This means that if:

	 * mvmtxq->txq_id != INVALID_QUEUE && list_empty(&mvmtxq->list):

	 *	queue is allocated and we can TX.

	 * mvmtxq->txq_id != INVALID_QUEUE && !list_empty(&mvmtxq->list):

	 *	a race, should defer the frame.

	 * mvmtxq->txq_id == INVALID_QUEUE && list_empty(&mvmtxq->list):

	 *	need to allocate the queue and defer the frame.

	 * mvmtxq->txq_id == INVALID_QUEUE && !list_empty(&mvmtxq->list):

	 *	queue is already scheduled for allocation, no need to allocate,

	 *	should defer the frame.

 If the queue is allocated TX and return. */

		/*

		 * Check that list is empty to avoid a race where txq_id is

		 * already updated, but the queue allocation work wasn't

		 * finished

 The list is being deleted only after the queue is fully allocated. */

 just in case one was running */

	/*

	 * cleanup all interfaces, even inactive ones, as some might have

	 * gone down during the HW restart

 keep statistics ticking */

		/*

		 * Now convert the HW_RESTART_REQUESTED flag to IN_HW_RESTART

		 * so later code will - from now on - see that we're doing it.

 Clean up some internal and mac80211 state on restart */

		/* Something went wrong - we need to finish some cleanup

		 * that normally iwl_mvm_mac_restart_complete() below

		 * would do.

	/*

	 * If we have TDLS peers, remove them. We don't know the last seqno/PN

	 * of packets the FW sent out, so we must reconnect.

	/* firmware counters are obviously reset now, but we shouldn't

	 * partially track so also clear the fw_reset_accu counters.

 async_handlers_wk is now blocked */

 async_handlers_list is empty and will stay empty: HW is stopped */

	/*

	 * Clear IN_HW_RESTART and HW_RESTART_REQUESTED flag when stopping the

	 * hw (as restart_complete() won't be called in this case) and mac80211

	 * won't execute the restart.

	 * But make sure to cleanup interfaces that have gone down before/during

	 * HW restart was requested.

	/* We shouldn't have any UIDs still set.  Loop over all the UIDs to

	 * make sure there's nothing left there and warn if any is found.

	/*

	 * Lock and clear the firmware running bit here already, so that

	 * new commands coming in elsewhere, e.g. from debugfs, will not

	 * be able to proceed. This is important here because one of those

	 * debugfs files causes the firmware dump to be triggered, and if we

	 * don't stop debugfs accesses before canceling that it could be

	 * retriggered after we flush it but before we've cleared the bit.

	/*

	 * The work item could be running or queued if the

	 * ROC time event stops just as we get here.

	/*

	 * The worker might have been waiting for the mutex, let it run and

	 * discover that its list is now empty.

 all structs have the same common part, add it */

 Trigger disconnect (should clear the CSA state) */

	/*

	 * Not much to do here. The stack will not allow interface

	 * types or combinations that we didn't advertise, so we

	 * don't really have to check the types.

 make sure that beacon statistics don't go backwards with FW reset */

 Allocate resources for the MAC context, and add it to the fw  */

 Counting number of interfaces is needed for legacy PM */

	/*

	 * The AP binding flow can be done only after the beacon

	 * template is configured (which happens only in the mac80211

	 * start_ap() flow), and adding the broadcast station can happen

	 * only after the binding.

	 * In addition, since modifying the MAC before adding a bcast

	 * station is not allowed by the FW, delay the adding of MAC context to

	 * the point where we can also add the bcast station.

	 * In short: there's not much we can do at this point, other than

	 * allocating resources :)

		/*

		 * Only queue for this station is the mcast queue,

		 * which shouldn't be in TFD mask anyway

 beacon filtering */

	/*

	 * P2P_DEVICE interface does not have a channel context assigned to it,

	 * so a dedicated PHY context is allocated to it and the corresponding

	 * MAC context is bound to it at this stage.

		/* Save a pointer to p2p device vif, so it can later be used to

		/*

		 * Flush the ROC worker which will flush the OFFCHANNEL queue.

		 * We assume here that all the packets sent to the OFFCHANNEL

		 * queue are sent in ROC session.

	/*

	 * For AP/GO interface, the tear down of the resources allocated to the

	 * interface is be handled as part of the stop_ap flow.

 if we don't have free ports, mcast frames will be dropped */

 replace previous configuration */

 We support only filter for probe requests */

 Supported only for p2p client interfaces */

	/*

	 * enable filtering only for associated stations, but not for P2P

	 * Clients

 copy all configured filters */

		/*

		 * Make sure we don't exceed our filters limit.

		 * if there is still a valid filter to be configured,

		 * be on the safe side and just allow bcast for this mac.

 skip current filter if it contains no attributes */

 attach the filter to current mac */

 use debugfs filters/macs if override is configured */

 if no filters are configured, do nothing */

 configure and attach these filters for each associated sta vif */

		/*

		 * MU-MIMO Group Id action frame is little endian. We treat

		 * the data received from firmware as if it came from the

		 * action frame, so no conversion is needed.

	/*

	 * If bit_num > 5, we have to combine bits with next byte.

	 * Calculate how many bits we need to take from current byte (called

	 * here "residue_bits"), and add them to bits from next byte.

 Block 26-tone RU OFDMA transmissions */

 HTC flags */

	/*

	 * Initialize the PPE thresholds to "None" (7), as described in Table

	 * 9-262ac of 80211.ax/D3.0.

 If PPE Thresholds exist, parse them into a FW-familiar format. */

 Starting after PPE header */

		/*

		 * FW currently supports only nss == MAX_HE_SUPP_NSS

		 *

		 * If nss > MAX: we can ignore values we don't support

		 * If nss < MAX: we can set zeros in other streams

 Take the PPE thresholds from the nominal padding info */

 Set the PPE thresholds accordingly */

 Mark MU EDCA as enabled, unless none detected on some AC */

	/* Try really hard to protect the session and hear a beacon

	 * The new session protection command allows us to protect the

	 * session for a much longer time since the firmware will internally

	 * create two events: a 300TU one with a very high priority that

	 * won't be fragmented which should be enough for 99% of the cases,

	 * and another one (which we configure here to be 900TU long) which

	 * will have a slightly lower priority, but more importantly, can be

	 * fragmented so that it'll allow other activities to run.

	/*

	 * Re-calculate the tsf id, as the leader-follower relations depend

	 * on the beacon interval, which was not known when the station

	 * interface was added.

 Update MU EDCA params */

	/*

	 * If we're not associated yet, take the (new) BSSID before associating

	 * so the firmware knows. If we're already associated, then use the old

	 * BSSID here, and we'll send a cleared one later in the CHANGED_ASSOC

	 * branch for disassociation below.

 after sending it once, adopt mac80211 data */

 clear statistics to get clean beacon counter */

 add quota for this interface */

				/*

				 * If we're restarting then the firmware will

				 * obviously have lost synchronisation with

				 * the AP. It will attempt to synchronise by

				 * itself, but we can make it more reliable by

				 * scheduling a session protection time event.

				 *

				 * The firmware needs to receive a beacon to

				 * catch up with synchronisation, use 110% of

				 * the beacon interval.

				 *

				 * Set a large maximum delay to allow for more

				 * than a single interface.

				 *

				 * For new firmware versions, rely on the

				 * firmware. This is relevant for DCM scenarios

				 * only anyway.

				/*

				 * If we're not restarting and still haven't

				 * heard a beacon (dtim period unknown) then

				 * make sure we still have enough minimum time

				 * remaining in the time event, since the auth

				 * might actually have taken quite a while

				 * (especially for SAE) and so the remaining

				 * time could be small without us having heard

				 * a beacon yet.

			/*

			 * If update fails - SF might be running in associated

			 * mode while disassociated - which is forbidden.

			/*

			 * If we get an assert during the connection (after the

			 * station has been added, but before the vif is set

			 * to associated), mac80211 will re-add the station and

			 * then configure the vif. Since the vif is not

			 * associated, we would remove the station here and

			 * this would fail the recovery.

				/*

				 * Remove AP station now that

				 * the MAC is unassoc

 remove quota for this interface */

 this will take the cleared BSSID from bss_conf */

		/*

		 * The firmware tracks the MU-MIMO group on its own.

		 * However, on HW restart we should restore this data.

 reset rssi values */

		/*

		 * We received a beacon from the associated AP so

		 * remove the session protection.

		 * A firmware with the new API will remove it automatically.

		       /*

			* Send power command on every beacon change,

			* because we may have not enabled beacon abort yet.

 reset cqm events tracking */

 Send the beacon template */

	/*

	 * Re-calculate the tsf id, as the leader-follower relations depend on

	 * the beacon interval, which was not known when the AP interface

	 * was added.

 Add the mac context */

 Perform the binding */

	/*

	 * This is not very nice, but the simplest:

	 * For older FWs adding the mcast sta before the bcast station may

	 * cause assert 0x2b00.

	 * This is fixed in later FW so make the order of removal depend on

	 * the TLV

		/*

		 * Send the bcast station. At this stage the TBTT and DTIM time

		 * events are added and applied to the scheduler

		/*

		 * Send the bcast station. At this stage the TBTT and DTIM time

		 * events are added and applied to the scheduler

 must be set before quota calculations */

 send all the early keys to the device now */

 power updated needs to be done before quotas */

 Need to update the P2P Device MAC (only GO, IBSS is single vif) */

 we don't support TDLS during DCM */

 Handle AP stop while in CSA */

 Need to update the P2P Device MAC (only GO, IBSS is single vif) */

	/*

	 * This is not very nice, but the simplest:

	 * For older FWs removing the mcast sta before the bcast station may

	 * cause assert 0x2b00.

	 * This is fixed in later FW (which will stop beaconing when removing

	 * bcast station).

	 * So make the order of removal depend on the TLV

 Changes will be applied when the AP/IBSS is started */

 Need to send a new beacon template to the FW */

 shouldn't happen */

	/* Due to a race condition, it's possible that mac80211 asks

	 * us to stop a hw_scan when it's already stopped.  This can

	 * happen, for instance, if we stopped the scan ourselves,

	 * called ieee80211_scan_completed() and the userspace called

	 * cancel scan scan before ieee80211_scan_work() could run.

	 * To handle that, simply return if the scan is not running.

 Called when we need to transmit (a) frame(s) from mac80211 */

 Called when we need to transmit (a) frame(s) from agg or dqa queue */

	/*

	 * If we have TVQM then we get too high queue numbers - luckily

	 * we really shouldn't get here with that because such hardware

	 * should have firmware supporting buffer station offload.

		/*

		 * The fw updates the STA to be asleep. Tx packets on the Tx

		 * queues to this station will not be transmitted. The fw will

		 * send a Tx response with TX_STATUS_FAIL_DEST_PS.

	/*

	 * This is called before mac80211 does RCU synchronisation,

	 * so here we already invalidate our internal RCU-protected

	 * station pointer. The rest of the code will thus no longer

	 * be able to find the station this way, and we don't rely

	 * on further RCU synchronisation after the sta_state()

	 * callback deleted the station.

	/*

	 * If there is at least one AP on radar channel that cannot

	 * tolerate 26-tone RU UL OFDMA transmissions using HE TB PPDU.

 decrement and check that we reached zero */

 we know that ours is writable */

 this would be a mac80211 bug ... but don't crash */

	/*

	 * If we are in a STA removal flow and in DQA mode:

	 *

	 * This is after the sync_rcu part, so the queues have already been

	 * flushed. No more TXs on their way in mac80211's path, and no more in

	 * the queues.

	 * Also, we won't be getting any new TX frames for this station.

	 * What we might have are deferred TX frames that need to be taken care

	 * of.

	 *

	 * Drop any still-queued deferred-frame before removing the STA, and

	 * make sure the worker is no longer handling frames for this STA.

		/*

		 * No need to make sure deferred TX indication is off since the

		 * worker will already remove it if it was on

		/*

		 * Additionally, reset the 40 MHz capability if we disconnected

		 * from the AP now.

 track whether or not the station is associated */

		/*

		 * Firmware bug - it'll crash if the beacon interval is less

		 * than 16. We can't avoid connecting at all, so refuse the

		 * station state change, this will cause mac80211 to abandon

		 * attempts to connect to this AP, and eventually wpa_s will

		 * blocklist the AP...

		/*

		 * EBS may be disabled due to previous failures reported by FW.

		 * Reset EBS status here assuming environment has been changed.

 we don't support TDLS during DCM */

 enable beacon filtering */

			/*

			 * Now that the station is authorized, i.e., keys were already

			 * installed, need to indicate to the FW that

			 * multicast data frames can be forwarded to the driver

 Multicast data frames are no longer allowed */

			/*

			 * Set this after the above iwl_mvm_mac_ctxt_changed()

			 * to avoid sending high prio again for a little time.

 disable beacon filtering */

 remove session protection if still running */

	/*

	 * No need to update right away, we'll get BSS_CHANGED_QOS

	 * The exception is P2P_DEVICE interface which needs immediate update.

 for successful cases (auth/assoc), don't cancel session protection */

	/* Due to a race condition, it's possible that mac80211 asks

	 * us to stop a sched_scan when it's already stopped.  This

	 * can happen, for instance, if we stopped the scan ourselves,

	 * called ieee80211_sched_scan_stopped() and the userspace called

	 * stop sched scan scan before ieee80211_sched_scan_stopped_work()

	 * could run.  To handle this, simply return if the scan is

	 * not running.

 support HW crypto on TX */

 currently FW supports only one optional cipher scheme */

			/*

			 * GTK on AP interface is a TX-only key, return 0;

			 * on IBSS they're per-station and because we're lazy

			 * we don't support them for RX, so do the same.

			 * CMAC/GMAC in AP/IBSS modes must be done in software.

		/* During FW restart, in order to restore the state as it was,

		 * don't try to reprogram keys we previously failed for.

 in HW restart reuse the index, otherwise request a new one */

			/*

			 * can't add key for RX, but we don't need it

			 * in the device for TX so still return 0,

			 * unless we have new TX API where we cannot

			 * put key material into the TX_CMD

 found in pending list - don't do anything else */

 Set the channel info data */

 Set the time and duration */

	/*

	 * If we are associated we want the delay time to be at least one

	 * dtim interval so that the FW can wait until after the DTIM and

	 * then start the time event, this will potentially allow us to

	 * remain off-channel for the max duration.

	 * Since we want to use almost a whole dtim interval we would also

	 * like the delay to be for 2-3 dtim intervals, in case there are

	 * other time events with higher priority.

 We cannot remain off-channel longer than the DTIM interval */

 Set the node address */

	/*

	 * Use a notification wait, which really just processes the

	 * command response and doesn't wait for anything, in order

	 * to be able to process the response and get the UID inside

	 * the RX path. Using CMD_WANT_SKB doesn't work because it

	 * stores the buffer and then wakes up this thread, by which

	 * time another notification (that the time event started)

	 * might already be processed unsuccessfully.

 No need to wait for anything, so just pass 1 (0 isn't valid) */

 should never fail */

	/*

	 * Flush the done work, just in case it's still pending, so that

	 * the work it does can complete and we can accept new frames.

 Use aux roc framework (HS20) */

 handle below */

			/*

			 * Unbind the P2P_DEVICE from the current PHY context,

			 * and if the PHY context is not used remove it.

 Bind the P2P_DEVICE to the current PHY Context */

 Need to update the PHY context only if the ROC channel changed */

	/*

	 * Check if the remain-on-channel is on a different band and that

	 * requires context removal, see iwl_mvm_phy_ctxt_changed(). If

	 * so, we'll need to release and then re-configure here, since we

	 * must not remove a PHY context that's part of a binding.

		/*

		 * Change the PHY context configuration as it is currently

		 * referenced only by the P2P Device MAC (and we can modify it)

		/*

		 * The PHY context is shared with other MACs (or we're trying to

		 * switch bands), so remove the P2P Device from the binding,

		 * allocate an new PHY context and create a new binding.

 Unbind the P2P_DEVICE from the current PHY context */

 Bind the P2P_DEVICE to the new allocated PHY context */

 Schedule the time events */

 we are only changing the min_width, may be a noop */

 we are just toggling between 20_NOHT and 20 */

 only needed if we're switching chanctx (i.e. during CSA) */

		/*

		 * The AP binding flow is handled as part of the start_ap flow

		 * (in bss_info_changed), similarly for IBSS.

 always disable PS when a monitor interface is active */

	/*

	 * Power state must be updated before quotas,

	 * otherwise fw will complain.

	/* Setting the quota at this stage is only required for monitor

	 * interfaces. For the other types, the bss_info changed flow

	 * will handle quota settings.

 Handle binding during CSA */

			/* Protect the session to make sure we hear the first

			 * beacon on the new channel.

 This part is triggered only during CSA */

 Set CS bit on all the stations */

 Save blocked iface, the timeout is set on the next beacon */

 we don't support TDLS during DCM - can be caused by channel switch */

 things keep failing, better restart the hw */

 things keep failing, better restart the hw */

 we only support a single-vif right now */

 must be associated client vif - ignore authorized */

	/* By implementing this operation, we prevent mac80211 from

	 * starting its own channel switch timer, so that we can call

	 * ieee80211_chswitch_done() ourselves at the right time

	 * (which is when the absence time event starts).

	/* Schedule the time event to a bit before beacon 1,

	 * to make sure we're in the new channel when the

	 * GO/AP arrives. In case count <= 1 immediately schedule the

	 * TE (this might result with some packet loss or connection

	 * loss).

 we still didn't unblock tx. prevent new CS meanwhile */

		/*

		 * We haven't configured the firmware to be associated yet since

		 * we don't know the dtim period. In this case, the firmware can't

		 * track the beacons.

			/*

			 * In case of undetermined / long time with immediate

			 * quiet monitor status to gracefully disconnect

 we won't be on this channel any longer */

 Second time, give up on this AP*/

 Make sure we're done with the deferred traffic before flushing */

 flush the AP-station and all TDLS peers */

 make sure only TDLS peers or the AP are flushed */

	/* this can take a while, and we may need/want other operations

	 * to succeed while doing this, so do it without the mutex held

 only support global statistics right now */

 add the offset needed to get to the legacy ofdm indices */

 if beacon filtering isn't on mac80211 does it anyway */

 firmware only reports a value after RXing a few beacons */

 size must be a multiple of DWORD */

 For now don't aggregate IPv6 in AMSDU */

 look at d3.c */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

	/*

	 * all values in format are boolean so the size of format is enough

	 * for holding the result string

 make sure the channel context is assigned */

	/*

	 * Check if debugfs directory already exist before creating it.

	 * This may happen when, for example, resetting hw or suspend-resume

	/*

	 * Create symlink for convenience pointing to interface specific

	 * debugfs entries for the driver. For example, under

	 * /sys/kernel/debug/iwlwifi/0000\:02\:00.0/iwlmvm/

	 * find

	 * netdev:wlan0 -> ../../../ieee80211/phy0/netdev:wlan0/iwlmvm/

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2014 Intel Mobile Communications GmbH

 * Copyright (C) 2017 Intel Deutschland GmbH

 Maps the driver specific channel width definition to the fw values */

/*

 * Maps the driver specific control channel position (relative to the center

 * freq) definitions to the the fw values

		/*

		 * The FW is expected to check the control channel position only

		 * when in HT/VHT and the channel width is not 20MHz. Return

		 * this value as the default one.

/*

 * Construct the generic fields of the PHY context command

 Set rx the chains */

	/* In scenarios where we only ever use a single-stream rates,

	 * i.e. legacy 11b/g/a associations, single-stream APs or even

	 * static SMPS, enable both chains to get diversity, improving

	 * the case where we're far enough from the AP that attenuation

	 * between the two antennas is sufficiently different to impact

	 * performance.

	/*

	 * If the firmware requested it, then we know that it supports

	 * getting zero for the values to indicate "use one, but pick

	 * which one yourself", which means it can dynamically pick one

	 * that e.g. has better RSSI.

/*

 * Add the phy configuration to the PHY context command

 Set the channel info data */

/*

 * Add the phy configuration to the PHY context command

 Set the channel info data */

/*

 * Send a command to apply the current phy configuration. The command is send

 * only if something in the configuration changed: in case that this is the

 * first time that the phy configuration is applied or in case that the phy

 * configuration changed from the previous apply.

 Set the command header fields */

 Set the command data */

 Set the command header fields */

 Set the command data */

/*

 * Send a command to add a PHY context based on the current HW configuration.

/*

 * Update the number of references to the given PHY context. This is valid only

 * in case the PHY context was already created, i.e., its reference count > 0.

/*

 * Send a command to modify the PHY context based on the current HW

 * configuration. Note that the function does not check that the configuration

 * changed.

 ... remove it here ...*/

 ... and proceed to add it again */

	/*

	 * Move unused phy's to a default channel. When the phy is moved the,

	 * fw will cleanup immediate quiet bit if it was previously set,

	 * otherwise we might not be able to reuse this phy.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2017 Intel Deutschland GmbH

 * Copyright (C) 2018-2021 Intel Corporation

 get STBC flags */

 consider LDPC support in case of HE */

 the station support only a single receive chain */

		/*

		 * Check if VHT extended NSS indicates that the bandwidth/NSS

		 * configuration is supported - only for MCS 0 since we already

		 * decoded the MCS bits anyway ourselves.

 the station support only a single receive chain */

 If one side doesn't support - mark both as not supporting */

 If one side doesn't support - mark both as not supporting */

 must be unsigned long for for_each_set_bit */

 non HT rates */

 HT/VHT rates */

 the station support only a single receive chain */

			/*

			 * In debug sta->max_amsdu_len < size

			 * so also check with orig_amsdu_len which holds the

			 * original data before debugfs changed the value

				/*

				 * Not so elegant, but this will effectively

				 * prevent AMSDU on this TID

			/*

			 * agg is offloaded so we need to assume that agg

			 * are enabled and max mpdu in ampdu is 4095

			 * (spec 802.11-2016 9.3.2.1)

 in legacy mode no amsdu is enabled so return zero */

 In old versions of the API the struct is 4 bytes smaller */

	/*

	 * since TLC offload works with one mode we can assume

	 * that only vht/ht is used and also set it as station max amsdu

 TODO: need to introduce a new FW cmd since LQ cmd is not relevant */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018 Intel Corporation

 * Copyright (C) 2013-2014 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 skip disabled interfaces here immediately */

 currently, PHY ID == binding ID */

 need at least one binding per PHY */

 update all upon completion */

 iterator data above must match */

	/*

	 * The FW's scheduling session consists of

	 * IWL_MVM_MAX_QUOTA fragments. Divide these fragments

	 * equally between all the bindings that require quota

		/*

		 * Reserve quota for the low latency binding in case that

		 * there are several data bindings but only a single

		 * low latency one. Split the rest of the quota equally

		 * between the other data interfaces.

		/*

		 * There are 0 or more than 1 low latency bindings, or all the

		 * data interfaces belong to the single low latency binding.

		 * Split the quota equally between the data interfaces.

 values don't really matter - won't be used */

			/*

			 * There is more than one binding, but only one of the

			 * bindings is in low latency. For this case, allocate

			 * the minimal required quota for the low latency

			 * binding.

 Give the remainder of the session to the first data binding */

 check that we have non-zero quota for all valid bindings */

		/* don't send a practically unchanged command, the firmware has

		 * to re-initialize a lot of state and that can have an adverse

		 * impact on it

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2020 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 rest of fields are 0 by default */

/*

 * module init and exit functions

 SKU control */

 radio configuration */

	/*

	 * TODO: Bits 7-8 of CSR in 8000 HW family and higher set the ADC

	 * sampling, and shouldn't be set to any non-zero value.

	 * The same is supposed to be true of the other HW, but unsetting

	 * them (such as the 7260) causes automatic tests to fail on seemingly

	 * unrelated errors. Need to further investigate this, but for now

	 * we'll separate cases.

	/*

	 * W/A : NIC is stuck in a reset state after Early PCIe power off

	 * (PCIe power is lost before PERST# is asserted), causing ME FW

	 * to lose ownership and not being able to obtain it back.

 this shouldn't happen *again*, ignore it */

	/*

	 * We'll decrement this on disconnect - so set to 2 since we'll

	 * still have to disconnect from the current AP first.

	/*

	 * This capability manipulation isn't really ideal, but it's the

	 * easiest choice - otherwise we'd have to do some major changes

	 * in mac80211 to support this, which isn't worth it. This does

	 * mean that userspace may have outdated information, but that's

	 * actually not an issue at all.

 we know that ours is writable */

	/*

	 * We could pass it to the iterator data, but also need to remember

	 * it for new interfaces that are added while in this state.

/**

 * enum iwl_rx_handler_context context for Rx handler

 * @RX_HANDLER_SYNC : this means that it will be called in the Rx path

 *	which can't acquire mvm->mutex.

 * @RX_HANDLER_ASYNC_LOCKED : If the handler needs to hold mvm->mutex

 *	(and only in this case!), it should be set as ASYNC. In that case,

 *	it will be called from a worker with mvm->mutex held.

 * @RX_HANDLER_ASYNC_UNLOCKED : in case the handler needs to lock the

 *	mutex itself, it will be called from a worker without mvm->mutex held.

/**

 * struct iwl_rx_handlers handler for FW notification

 * @cmd_id: command id

 * @context: see &iwl_rx_handler_context

 * @fn: the function is called when notification is received

/*

 * Handlers for fw notifications

 * Convention: RX_HANDLER(CMD_NAME, iwl_mvm_rx_CMD_NAME

 * This list should be in order of frequency for performance purposes.

 *

 * The handler can be one from three contexts, see &iwl_rx_handler_context

/* Please keep this array *SORTED* by hex value.

 * Access is done through binary search

/* Please keep this array *SORTED* by hex value.

 * Access is done through binary search

/* Please keep this array *SORTED* by hex value.

 * Access is done through binary search

/* Please keep this array *SORTED* by hex value.

 * Access is done through binary search

/* Please keep this array *SORTED* by hex value.

 * Access is done through binary search

/* Please keep this array *SORTED* by hex value.

 * Access is done through binary search

/* Please keep this array *SORTED* by hex value.

 * Access is done through binary search

/* Please keep this array *SORTED* by hex value.

 * Access is done through binary search

 this forward declaration can avoid to export the function */

		/*

		 * WEP has short keys which might show up in the payload,

		 * and then you can deduce the key, so in this case just

		 * remove all FIFO data.

		 * For TKIP, we don't know the phase 2 keys here, so same.

 scan for key material and clear it out */

 we're dealing with a FIFO, so check wrapped around data */

 embedded key material exists only on old API */

 we only use wide headers for commands */

 all the commands we care about are in LONG_GROUP */

		/*

		 * blank out everything here, easier than dealing

		 * with the various versions of the command

 not relevant */

	/*

	 * We use IWL_MVM_STATION_COUNT_MAX to check the validity of the station

	 * index all over the driver - check that its value corresponds to the

	 * array size.

	/********************************

	 * 1. Allocating and configuring HW data

		/*

		 * If we have the new TX/queue allocation API initialize them

		 * all to invalid numbers. We'll rewrite the ones that we need

		 * later, but that doesn't happen for all of them all of the

		 * time (e.g. P2P Device is optional), and if a dynamic queue

		 * ends up getting number 2 (IWL_MVM_DQA_P2P_DEVICE_QUEUE) then

		 * iwl_mvm_is_static_queue() erroneously returns true, and we

		 * might have things getting stuck.

 we only support version 1 */

 we only support up to version 9 */

	/*

	 * Populate the state variables that the transport layer needs

	 * to know about.

 Set a short watchdog for the command queue */

 Configure transport layer */

 set up notification wait support */

 Init phy db */

 invalidate ids to prevent accidental removal of sta_id 0 */

 Set EBS as successful as long as not stated otherwise by the FW. */

 Ensure that we are not in stop flow (check iwl_mvm_mac_stop) */

	/*

	 * Sync with Rx path with a lock. Remove all the entries from this list,

	 * add them to a local one (lock free), and then handle them.

 don't collect on CMD 0 */

	/*

	 * Do the notification wait before RX handlers so

	 * even if the RX handler consumes the RXB we have

	 * access to it in the notification wait entry.

 we can't do much... */

	/*

	 * For now, we only set the CMD_WANT_ASYNC_CALLBACK for ADD_STA

	 * commands that need to block the Tx queues.

 iwl_run_init_mvm_ucode is waiting for results, abort it. */

	/*

	 * Don't ask the transport to stop the firmware. We'll do it

	 * after cfg80211 takes us down.

	/*

	 * Stop the device if we run OPERATIONAL firmware or if we are in the

	 * middle of the calibrations.

	/*

	 * This is a bit racy, but worst case we tell mac80211 about

	 * a stopped/aborted scan when that was already done which

	 * is not a problem. It is necessary to abort any os scan

	 * here because mac80211 requires having the scan cleared

	 * before restarting.

	 * We'll reset the scan_status to NONE in restart cleanup in

	 * the next start() call from mac80211. If restart isn't called

	 * (no fw restart) scan status will stay busy.

	/*

	 * If we're restarting already, don't cycle restarts.

	 * If INIT fw asserted, it will likely fail again.

	 * If WoWLAN fw asserted, don't restart either, mac80211

	 * can't recover this since we're already half suspended.

		/*

		 * get a module reference to avoid doing this while unloading

		 * anyway and to avoid scheduling a work with code that's

		 * being removed.

		/* This should be first thing before trying to collect any

		 * data to avoid endless loops if any HW error happens while

		 * collecting debug data.

		/*

		 * Currently, the only case for sync=true is during

		 * shutdown, so just stop in this case. If/when that

		 * changes, we need to be a bit smarter here.

	/*

	 * If the firmware crashes while we're already considering it

	 * to be dead then don't ask for a restart, that cannot do

	 * anything useful anyway.

 these could be differentiated */			\

 as we only register one, these MUST be common! */	\

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 for iwl_mvm_rx_card_state_notif */

 for iwl_mvm_rx_card_state_notif */

 Do not direct RSS traffic to Q 0 which is our fallback queue */

	/*

	 * For v5 and above, we can check the version, for older

	 * versions we need to check the size.

 get timeout later */

	/*

	 * We want to load the INIT firmware even in RFKILL

	 * For the unified firmware case, the ucode_type is not

	 * INIT, but we still need to run it.

	/*

	 * Some things may run in the background now, but we

	 * just wait for the ALIVE notification here.

 SecBoot info */

 LMAC/UMAC PC info */

	/*

	 * Note: all the queues are enabled as part of the interface

	 * initialization, but in firmware restart scenarios they

	 * could be stopped, so wake them up. In firmware restart,

	 * mac80211 will have the queues stopped as well until the

	 * reconfiguration completes. During normal startup, they

	 * will be empty.

	/*

	 * Set a 'fake' TID for the command queue, since we use the

	 * hweight() of the tid_bitmap as a refcount now. Not that

	 * we ever even consider the command queue as one we might

	 * want to reuse, but be safe nevertheless.

	/*

	 * All the BSSes in the BSS table include the GP2 in the system

	 * at the beacon Rx time, this is of course no longer relevant

	 * since we are resetting the firmware.

	 * Purge all the BSS table.

 Will also start the device */

	/* Send init config command to mark that we are sending NVM access

	 * commands

 Load NVM to NIC if needed */

 We wait for the INIT complete notification */

 Read the NVM only at driver load time, no need to do this twice */

	/*

	 * TODO: read specific phy config from BIOS

	 * ACPI table for this feature has not been defined yet,

	 * so for now we use hardcoded values.

 CONFIG_ACPI */

 CONFIG_ACPI */

		/*

		 * TODO: currently we don't set the antenna but letting the NIC

		 * to decide which antenna to use. This should come from BIOS.

 Set parameters */

 set flags extra PHY configuration flags from the device's cfg */

 Will also start the device */

 Read the NVM only at driver load time, no need to do this twice */

 In case we read the NVM from external file, load it to the NIC */

	/*

	 * abort after reading the nvm in case RF Kill is on, we will complete

	 * the init seq later when RF kill will switch to off

 Send TX valid antennas before triggering calibrations */

	/*

	 * Some things may run in the background now, but we

	 * just wait for the calibration complete notification.

 we want to debug INIT and we have no NVM - fake */

 all structs have the same common part, add it */

 return on error or if the profile is disabled (positive number) */

 the ops field is at the same spot for all versions, so set in v1 */

 the ops field is at the same spot for all versions, so set in v1 */

 the table is at the same position for all versions, so set use v1 */

	/*

	 * It is a valid scenario to not support SAR, or miss wgds table,

	 * but in that case there is no need to send the command.

	/*

	 * Set the revision on versions that contain it.

	 * This must be done after calling iwl_sar_geo_init().

	/*

	 * The 'flags' field is the same in v1 and in v2 so we can just

	 * use v1 to access it.

 try to read ppag table rev 2 or 1 (both have the same data size) */

 try to read ppag table revision 0 */

	/*

	 * read, verify gain values and save them into the PPAG table.

	 * first sub-band (j=0) corresponds to Low-Band (2.4GHz), and the

	 * following sub-bands to High-Band (5GHz).

 no need to read the table, done in INIT stage */

 list size if TAS enabled can only be non-negative */

 default behaviour is disabled */

 read PPAG table */

 read SAR tables */

		/*

		 * If not available, don't fail and don't bother with EWRD and

			/*

			 * If basic SAR is not available, we check for WGDS,

			 * which should *not* be available either.  If it is

			 * available, issue an error, because we can't use SAR

			 * Geo without basic SAR.

		/* if EWRD is not available, we can still use

 read geo SAR table */

 we don't fail if the table is not available */

 CONFIG_ACPI */

 CONFIG_ACPI */

 no error log was defined in TLV */

 no buf was allocated while HW reset */

 skb respond is only relevant in ERROR_RECOVERY_UPDATE_DB */

 if we have a destination, assume EARLY START */

 Send phy db control command and then phy db calibration */

 Init RSS configuration */

 init the fw <-> mac80211 STA mapping */

 reset quota debouncing buffer - 0xff will yield invalid data */

	/*

	 * Add auxiliary station for scanning.

	 * Newer versions of this command implies that the fw uses

	 * internal aux station for all aux activities that don't

	 * requires a dedicated data queue.

		 /*

		  * In old version the aux station uses mac id like other

		  * station and not lmac id

 Add all the PHY contexts */

		/*

		 * The channel used here isn't relevant as it's

		 * going to be overwritten in the other flows.

		 * For now use the first channel we have.

		/* in order to give the responsibility of ct-kill and

		 * TX backoff to FW we need to send empty temperature reporting

		 * cmd during init time

 Initialize tx backoffs to the minimal possible */

 TODO: read the budget from BIOS / Platform NVM */

	/*

	 * In case there is no budget from BIOS / Platform NVM the default

	 * budget should be 2000mW (cooling state 0).

	/*

	 * RTNL is not taken during Ct-kill, but we don't need to scan/Tx

	 * anyway, so don't init MCC.

 Send phy db control command and then phy db calibration*/

 init the fw <-> mac80211 STA mapping */

		/*

		 * Add auxiliary station for scanning.

		 * Newer versions of this command implies that the fw uses

		 * internal aux station for all aux activities that don't

		 * requires a dedicated data queue.

		 * In old version the aux station uses mac id like other

		 * station and not lmac id

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2020 - 2021 Intel Corporation

/**

 * DDR needs frequency in units of 16.666MHz, so provide FW with the

 * frequency values in the adjusted format.

 LPDDR4 */

 frequency 3733MHz */

 frequency 4267MHz */

 DDR5ePOR */

 frequency 4000MHz */

 frequency 4400MHz */

 LPDDR5iPOR */

 frequency 5200MHz */

 frequency 6000MHz */

 frequency 6400MHz */

 in case no table is passed, use the default one */

 notify FW the table is not the default one */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

 * Copyright (C) 2018-2021 Intel Corporation

 Up to 2 R2I STS are allowed on the responder */

	/*

	 * The command structure is the same for versions 6, 7 and 8 (only the

	 * field interpretation is different), so the same struct can be use

	 * for all cases.

 Use a default of bss_color=1 for now */

 All versions up to version 8 have the same size */

 .len[1] set later */

 may not be able to DMA from stack */

 may not be able to DMA from stack */

	/* Copy the ctx to unlock the rcu and send the phy ctxt. We don't care

	 * about changes in the ctx after releasing the lock because the driver

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 get the PN from mac80211, used on the default queue */

 and use the internal data for the other queues */

 hack it for now */

 firmware sets STA_KEY_FLG_WEP_13BYTES */

		/*

		 * This will fail -- the key functions don't set support

		 * pairwise WEP keys. However, that's better than silently

		 * failing WoWLAN. Or maybe not?

 TX key must be at offset 0 */

 others start at 1 */

 don't upload key again */

		/*

		 * Ignore CMAC keys -- the WoWLAN firmware doesn't support them

		 * but we also shouldn't abort suspend due to that. It does have

		 * support for the IGTK key renewal, but doesn't really use the

		 * IGTK for anything. This means we could spuriously wake up or

		 * be deauthenticated, but that was considered acceptable.

	/*

	 * The D3 firmware hardcodes the key offset 0 as the key it

	 * uses to transmit packets to the AP, i.e. the PTK.

		/*

		 * firmware only supports TSC/RSC for a single key,

		 * so if there are multiple keep overwriting them

		 * with new ones -- this relies on mac80211 doing

		 * list_add_tail().

		/*

		 * For non-QoS this relies on the fact that both the uCode and

		 * mac80211 use TID 0 (as they need to to avoid replay attacks)

		 * for checking the IV in the frames.

		/*

		 * For non-QoS this relies on the fact that both the uCode and

		 * mac80211/our RX code use TID 0 for checking the PN.

 only for ciphers that can be PTK/GTK */

		/*

		 * For non-QoS this relies on the fact that both the uCode and

		 * mac80211 use TID 0 (as they need to to avoid replay attacks)

		 * for checking the IV in the frames.

		/*

		 * For non-QoS this relies on the fact that both the uCode and

		 * mac80211/our RX code use TID 0 for checking the PN.

 ver == 2 || ver == IWL_FW_CMD_VER_UNKNOWN */

 wrapping isn't allowed, AP must rekey */

 add back the PHY */

 add back the MAC */

 add back binding - XXX refactor? */

 and some quota */

 firmware returns next, not last-used seqno */

 return if called during restart, not resume from D3 */

	/*

	 * Set the HW restart bit -- this is mostly true as we're

	 * going to load new firmware and reprogram that, though

	 * the reprogramming is going to be manual to avoid adding

	 * all the MACs that aren't support.

	 * We don't have to clear up everything though because the

	 * reprogramming is manual. When we resume, we'll actually

	 * go through a proper restart sequence again to switch

	 * back to the runtime firmware image.

 the fw is reset, so all the keys are cleared */

 TODO: wowlan_config_cmd->wowlan_ba_teardown_tids */

 Query the last used seqno and set it */

		/*

		 * Set the "link change" (really "link lost") flag as well

		 * since that implies losing the TCP connection.

		/*

		 * if we have to configure keys, call ieee80211_iter_keys(),

		 * as we need non-atomic context in order to take the

		 * required locks.

		/*

		 * Note that currently we don't use CMD_ASYNC in the iterator.

		 * In case of key_data.configure_keys, all the configured

		 * commands are SYNC, and iwl_mvm_wowlan_program_keys() will

		 * take care of locking/unlocking mvm->mutex.

 send relevant data according to CMD version */

 configure rekey data only if offloaded rekey is supported (d3) */

 skip the sta_id at the beginning */

	/*

	 * This needs to be unlocked due to lock ordering

	 * constraints. Since we're in the suspend path

	 * that isn't really a problem though.

		/* In theory, we wouldn't have to stop a running sched

		 * scan in order to start another one (for

		 * net-detect).  But in practice this doesn't seem to

		 * work properly, so stop any running sched_scan now.

 save the sched scan matchsets... */

 ...and the sched scan channels for later reporting */

		/*

		 * Program the minimum sleep time to 10 seconds, as many

		 * platforms have issues processing a wakeup signal while

		 * still being in the process of suspending.

		/*

		 * mac80211 shouldn't get here, but for D3 test

		 * it doesn't warrant a warning

 if we're not associated, this must be netdetect */

	/*

	 * Prior to 9000 device family the driver needs to stop the dbg

	 * recording before entering D3. In later devices the FW stops the

	 * recording automatically.

 must be last -- this switches firmware state */

 converted data from the different status responses */

		/*

		 * We store both the TKIP and AES representations

		 * coming from the firmware because we decode the

		 * data from there before we iterate the keys and

		 * know which one we need.

 including RX MIC key for TKIP */

 Same as above */

 this would be a firmware bug */

 also FCS */

				/*

				 * This is unlocked and using gtk_i(c)vlen,

				 * but since everything is under RTNL still

				 * that's not really a problem - changing

				 * it would be difficult.

 if truncated, FCS/ICV is (partially) gone */

 GTK RX counters */

 PTK TX counter */

 PTK RX counters */

 ignore WEP completely, nothing to do */

 we support these */

 everything else (even CMAC for MFP) - disconnect from AP */

	/*

	 * pairwise key - update sequence counters only;

	 * note that this assumes no TDLS sessions are active

 that's it for this key */

 find last GTK that we used initially, if any */

 not trying to keep connections with MFP/unhandled ciphers */

	/*

	 * invalidate all other GTKs that might still exist and update

	 * the one that we used

 +0x10 because the set API expects next-to-use, not last-used */

 Occasionally, templates would be nice. This is one of those times ... */

 copy all the common fields */				\

 if it's as long as the TKIP encryption key, copy MIC key */

 default to 7 (when we have IWL_UCODE_TLV_API_WOWLAN_KEY_MATERIAL) */

 copy GTK info to the right place */

 hardcode the key length to 16 since v6 only supports 16 */

		/*

		 * The key index only uses 2 bits (values 0 to 3) and

		 * we always set bit 7 which means this is the

		 * currently used key.

		/* these three command versions have same layout and size, the

		 * difference is only in a few not used (reserved) fields.

 only for tracing for now */

 releases the MVM mutex */

 still at hard-coded place 0 for D3 image */

 firmware stores last-used value, we store next value */

 now we have all the data we need, unlock to avoid mac80211 issues */

		/* We inverted the order of the SSIDs in the scan

		 * request, so invert the index here.

 skip the one we keep connection on */

 cf. struct iwl_error_event_table */

 check for lmac1 error */

 check if we have lmac2 set and check for error */

 check for umac error */

 get the BSS vif pointer again */

 after the successful handshake, we're out of D3 */

	/*

	 * Query the current location and source from the D3 firmware so we

	 * can play it back when we re-intiailize the D0 firmware

 Re-configure PPAG settings */

  Re-configure default SAR profile */

		/* If this is a non-unified image, we restart the FW,

		 * so no need to stop the netdetect scan.  If that

		 * fails, continue and try to get the wake-up reasons,

		 * but trigger a HW restart by keeping a failure code

		 * in ret.

 has unlocked the mutex, so skip that */

 has unlocked the mutex, so skip that */

 no need to reset the device in unified images, if successful */

 nothing else to do if we already sent D0I3_END_CMD */

	/*

	 * Reconfigure the device in one of the following cases:

	 * 1. We are not using a unified image

	 * 2. We are using a unified image but had an error while exiting D3

 regardless of what happened, we're now out of D3 */

 start pseudo D3 */

 read pme_ptr if available */

 skip the one we keep connection on */

 wait for restart and disconnect all interfaces */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2021 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2015-2017 Intel Deutschland GmbH

 Alignment concerns */

 do PN checking */

 multicast and non-data only arrives on default queue */

 do not check PN for open AP */

	/*

	 * avoid checking for default queue - we don't want to replicate

	 * all the logic that's necessary for checking the PN on fragmented

	 * frames, leave that to mac80211

 if we are here - this for sure is either CCMP or GCMP */

 we don't use HCCA/802.11 QoS TSPECs, so drop such frames */

 load pn */

 iwl_mvm_create_skb Adds the rxb to a new skb */

	/* If frame is small enough to fit in skb->head, pull it completely.

	 * If not, only pull ieee80211_hdr (including crypto if present, and

	 * an additional 8 bytes for SNAP/ethertype, see below) so that

	 * splice() or TCP coalesce are more efficient.

	 *

	 * Since, in addition, ieee80211_data_to_8023() always pull in at

	 * least 8 bytes (possibly more for mesh) we can do the same here

	 * to save the cost of doing it later. That still doesn't pull in

	 * the actual IP header since the typical case has a SNAP header.

	 * If the latter changes (there are efforts in the standards group

	 * to do so) we should revisit this and ieee80211_data_to_8023().

	/* The firmware may align the packet to DWORD.

	 * The padding is inserted after the IV.

	 * After copying the header + IV skip the padding if

	 * present before copying packet data.

		/*

		 * We warn and trace because we want to be able to see

		 * it in trace-cmd as well.

	/*

	 * If we did CHECKSUM_COMPLETE, the hardware only does it right for

	 * certain cases and starts the checksum after the SNAP. Check if

	 * this is the case - it's easier to just bail out to CHECKSUM_NONE

	 * in the cases the hardware didn't handle, since it's rare to see

	 * such packets, even though the hardware did calculate the checksum

	 * in this case, just starting after the MAC header instead.

 ensure alignment */

 Intel OUI */

 radiotap sniffer config sub-namespace */

 fill the data now */

 and clear the padding */

 iwl_mvm_pass_packet_to_mac80211 - passes the packet for mac80211 */

	/*

	 * For non-beacon, we don't really care. But beacons may

	 * be filtered out, and we thus need the firmware's replay

	 * detection, otherwise beacons the firmware previously

	 * filtered could be replayed, or something like that, and

	 * it can filter a lot - though usually only if nothing has

	 * changed.

 key mismatch - will also report !MIC_OK but we shouldn't count it */

 good cases */

	/*

	 * both keys will have the same cipher and MIC length, use

	 * whichever one is available

 get the real key ID */

 and if that's the other key, look it up */

		/*

		 * shouldn't happen since firmware checked, but be safe

		 * in case the MIC length is wrong too, for example

 Report status to mac80211 */

	/*

	 * Drop UNKNOWN frames in aggregation, unless in monitor mode

	 * (where we don't have the keys).

	 * We limit this to aggregation because in TKIP this is a valid

	 * scenario, since we may not have the (correct) TTAK (phase 1

	 * key) in the firmware.

 TODO: handle packets encrypted with unknown alg */

 alg is CCM: check MIC only */

 Don't drop the frame and decrypt it in SW */

		/*

		 * Sometimes we can get frames that were not decrypted

		 * because the firmware didn't have the keys yet. This can

		 * happen after connection where we can get multicast frames

		 * before the GTK is installed.

		 * Silently drop those frames.

		 * Also drop un-decrypted frames in monitor mode.

/*

 * returns true if a packet is a duplicate and should be dropped.

 * Updates AMSDU PN tracking info

	/*

	 * Drop duplicate 802.11 retransmissions

	 * (IEEE 802.11-2012: 9.3.2.10 "Duplicate detection and recovery")

 frame has qos control */

 If this wasn't a part of an A-MSDU the sub-frame index will be 0 */

 Allow same PN as the first subframe for following sub frames */

/*

 * Returns true if sn2 - buffer_size < sn1 < sn2.

 * To be used only in order to compare reorder buffer head with NSSN.

 * We fully trust NSSN unless it is behind us due to reorder timeout.

 * Reorder timeout can only bring us up to buffer_size SNs ahead of NSSN.

	/*

	 * We keep the NSSN not too far behind, if we are sync'ing it and it

	 * is more than 2048 ahead of us, it must be behind us. Discard it.

	 * This can happen if the queue that hit the 0 / 2048 seqno was lagging

	 * behind and this queue already processed packets. The next if

	 * would have caught cases where this queue would have processed less

	 * than 64 packets, but it may have processed more than 64 packets.

 ignore nssn smaller than head sn - this can happen due to timeout */

		/*

		 * Empty the list. Will have more than one frame for A-MSDU.

		 * Empty list is valid as well since nssn indicates frames were

		 * received.

 modify timer to match next frame's expiration time */

			/*

			 * If there is a hole and the next frame didn't expire

			 * we want to break and not advance SN

 continue until next hole after this expired frames */

 SN is set to the last expired frame + 1 */

		/*

		 * If no frame expired and there are stored frames, index is now

		 * pointing to the first unexpired frame - modify timer

		 * accordingly to this frame.

 release all frames that are in the reorder buffer to the stack */

 we have a new (A-)MPDU ... */

		/*

		 * reset counter to 0 if we didn't have any oldsn in

		 * the last A-MPDU (as detected by GP2 being identical)

 either way, update our tracking state */

		/*

		 * tracking state didn't change, and we had an old SN

		 * indication before - do nothing in this case, we

		 * already noted this one down and are waiting for the

		 * next A-MPDU (by GP2)

 return unless this MPDU has old SN */

 update state */

 if limit is reached, send del BA and reset state */

/*

 * Returns true if the MPDU was buffered\dropped, false if it should be passed

 * to upper layer.

	/*

	 * This also covers the case of receiving a Block Ack Request

	 * outside a BA session; we'll pass it to mac80211 and that

	 * then sends a delBA action frame.

	 * This also covers pure monitor mode, in which case we won't

	 * have any BA sessions.

 no sta yet */

 not a data packet or a bar */

	/*

	 * If there was a significant jump in the nssn - adjust.

	 * If the SN is smaller than the NSSN it might need to first go into

	 * the reorder buffer, in which case we just release up to it and the

	 * rest of the function will take care of storing it and releasing up to

	 * the nssn.

	 * This should not happen. This queue has been lagging and it should

	 * have been updated by a IWL_MVM_RXQ_NSSN_SYNC notification. Be nice

	 * and update the other queues.

 drop any oudated packets */

 release immediately if allowed by nssn and no stored frames */

			/*

			 * If we crossed the 2048 or 0 SN, notify all the

			 * queues. This is done in order to avoid having a

			 * head_sn that lags behind for too long. When that

			 * happens, we can get to a situation where the head_sn

			 * is within the interval [nssn - buf_size : nssn]

			 * which will make us think that the nssn is a packet

			 * that we already freed because of the reordering

			 * buffer and we will ignore it. So maintain the

			 * head_sn somewhat updated across all the queues:

			 * when it crosses 0 and 2048.

 No need to update AMSDU last SN - we are moving the head */

	/*

	 * release immediately if there are no stored frames, and the sn is

	 * equal to the head.

	 * This can happen due to reorder timer, where NSSN is behind head_sn.

	 * When we released everything, and we got the next frame in the

	 * sequence, according to the NSSN we can't release immediately,

	 * while technically there is no hole and we can move forward.

 No need to update AMSDU last SN - we are moving the head */

	/*

	 * Check if we already stored this frame

	 * As AMSDU is either received or not as whole, logic is simple:

	 * If we have frames in that position in the buffer and the last frame

	 * originated from AMSDU had a different SN then it is a retransmission.

	 * If it is the same SN then if the subframe index is incrementing it

	 * is the same AMSDU - otherwise it is a retransmission.

 put in reorder buffer */

	/*

	 * We cannot trust NSSN for AMSDU sub-frames that are not the last.

	 * The reason is that NSSN advances on the first sub-frame, and may

	 * cause the reorder buffer to advance before all the sub-frames arrive.

	 * Example: reorder buffer contains SN 0 & 2, and we receive AMSDU with

	 * SN 1. NSSN for first sub frame will be 3 with the result of driver

	 * releasing SN 0,1, 2. When sub-frame 1 arrives - reorder buffer is

	 * already ahead and it will be dropped.

	 * If the last sub-frame is not on this queue - we will get frame

	 * release notification with up to date NSSN.

	/*

	 * Do not update last rx all the time to avoid cache bouncing

	 * between the rx queues.

	 * Update it every timeout. Worst case is the session will

	 * expire after ~ 2 * timeout, which doesn't matter that much.

 Update is atomic */

	/*

	 * Unfortunately, we have to leave the mac80211 data

	 * incorrect for the case that we receive an HE-MU

	 * transmission and *don't* have the HE phy data (due

	 * to the bits being used for TSF). This shouldn't

	 * happen though as management frames where we need

	 * the TSF/timers are not be transmitted in HE-MU.

 HE common */

 nothing here */

 nothing */

 report the AMPDU-EOF bit on single frames */

 update aggregation data for monitor sake on default queue */

 toggle is switched whenever new aggregation starts */

 actually data is filled in mac80211 */

	/* Dont use dev_alloc_skb(), we'll have enough headroom once

	 * ieee80211_hdr pulled.

		/*

		 * If the device inserted padding it means that (it thought)

		 * the 802.11 header wasn't a multiple of 4 bytes long. In

		 * this case, reserve two bytes at the start of the SKB to

		 * align the payload properly in case we end up copying it.

 This may be overridden by iwl_mvm_rx_he() to HE_RU */

	/*

	 * Keep packets with CRC errors (and with overrun) for monitor mode

	 * (otherwise the firmware discards them) but mark them as bad.

 set the preamble flag if appropriate */

 TSF as indicated by the firmware is at INA time */

 update aggregation data for monitor sake on default queue */

		/*

		 * Toggle is switched whenever new aggregation starts. Make

		 * sure ampdu_reference is never 0 so we can later use it to

		 * see if the frame was really part of an A-MPDU or not.

		/*

		 * This is fine since we prevent two stations with the same

		 * address from being added.

		/*

		 * We have tx blocked stations (with CS bit). If we heard

		 * frames from a blocked station on a new channel we can

		 * TX to it again.

 Unblock BCAST / MCAST station */

		/*

		 * Our hardware de-aggregates AMSDUs but copies the mac header

		 * as it to the de-aggregated MPDUs. We need to turn off the

		 * AMSDU bit in the QoS control ourselves.

		 * In addition, HW reverses addr3 and addr4 - reverse it back.

 management stuff on default queue */

	/* Dont use dev_alloc_skb(), we'll have enough headroom once

	 * ieee80211_hdr pulled.

 0-length PSDU */

 This may be overridden by iwl_mvm_rx_he() to HE_RU */

		/*

		 * take the nss from the rx_vec since the rate_n_flags has

		 * only 2 bits for the nss which gives a max of 4 ss but

		 * there may be up to 8 spatial streams

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (C) 2012-2014, 2018-2020 Intel Corporation

 * Copyright (C) 2013-2015 Intel Mobile Communications GmbH

 * Copyright (C) 2016-2017 Intel Deutschland GmbH

 Do not compute checksum if already computed */

 We do not expect to be requested to csum stuff we do not support */

 only supported extension headers */

 if we get here - protocol now should be TCP/UDP */

 enable L4 csum */

	/*

	 * Set offset to IP header (snap).

	 * We don't support tunneling so no need to take care of inner header.

	 * Size is in words.

 Do IPv4 csum for AMSDU only (no IP csum for Ipv6) */

 reset UDP/TCP header csum */

	/*

	 * mac header len should include IV, size is in words unless

	 * the IV is added by the firmware like in WEP.

	 * In new Tx API, the IV is always added by the firmware.

/*

 * Sets most of the Tx cmd's fields

 Default to 0 (BE) when tid_spec is set to IWL_MAX_TID_COUNT */

		/* The spec allows Action frames in A-MPDU, we don't support

		 * it

 Total # bytes to be transmitted - PCIe code will adjust for A-MSDU */

 padding is inserted later in transport */

 info->control is only relevant for non HW rate control */

 HT rate doesn't make sense for a non data frame */

 if the rate isn't a well known legacy rate, take the lowest one */

	/*

	 * For non 2 GHZ band, remap mac80211 rate

	 * indices into driver indices

 For 2.4 GHZ band, check that there is no need to remap */

 Get PLCP rate for tx_cmd->rate_n_flags */

 Set CCK or OFDM flag */

/*

 * Sets the fields in the Tx cmd that are rate related

 Set retry limit on RTS packets */

 Set retry limit on DATA packets and Probe Responses*/

	/*

	 * for data packets, rate info comes from the table inside the fw. This

	 * table is controlled by LINK_QUALITY commands

 Set the rate in the TX cmd */

/*

 * Sets the fields in the Tx cmd that are crypto related

		/* TODO: Taking the key from the table might introduce a race

		 * when PTK rekeying is done, having an old packets with a PN

		 * based on the old key but the message encrypted with a new

		 * one.

		 * Need to handle this.

/*

 * Allocates and sets the Tx cmd the driver data pointers in the skb

 padding is inserted later in transport */

		/*

		 * For data packets rate info comes from the fw. Only

		 * set rate/antenna during connection establishment or in case

		 * no station is given.

 Total # bytes to be transmitted */

 Copy MAC header from skb into command buffer */

 Total # bytes to be transmitted */

 Copy MAC header from skb into command buffer */

 Copy MAC header from skb into command buffer */

		/*

		 * Non-bufferable frames use the broadcast station, thus they

		 * use the probe queue.

		 * Also take care of the case where we send a deauth to a

		 * station that we don't have, or similarly an association

		 * response (with non-success status) for a station we can't

		 * accept.

		 * Also, disassociate frames might happen, particular with

		 * reason 7 ("Class 3 frame received from nonassociated STA").

 Set length of IE body (not including ID and length itself) */

			/*

			 * IWL_MVM_OFFCHANNEL_QUEUE is used for ROC packets

			 * that can be used in 2 different types of vifs, P2P &

			 * STATION.

			 * P2P uses the offchannel queue.

			 * STATION (HS2.0) uses the auxiliary context of the FW,

			 * and hence needs to be sent on the aux queue.

 From now on, we cannot access info->control */

 For HE redirect to trigger based fifos */

	/*

	 * Don't send an AMSDU that will be longer than the TXF.

	 * Add a security margin of 256 for the TX command + headers.

	 * We also want to have the start of the next packet inside the

	 * fifo to be able to send bursts.

		/*

		 * Compute the length of all the data added for the A-MSDU.

		 * This will be used to compute the length to write in the TX

		 * command. We have: SNAP + IP + TCP for n -1 subframes and

		 * ETH header for n subframes.

	/*

	 * Do not build AMSDU for IPv6 with extension headers.

	 * ask stack to segment and checkum the generated MPDUs for us.

	/*

	 * No need to lock amsdu_in_ampdu_allowed since it can't be modified

	 * during an BA session.

	/*

	 * Take the min of ieee80211 station and mvm station

	/*

	 * Limit A-MSDU in A-MPDU to 4095 bytes when VHT is not

	 * supported. This is a spec requirement (IEEE 802.11-2015

	 * section 8.7.3 NOTE 3).

 Sub frame header + SNAP + IP header + TCP header + MSS */

	/*

	 * If we have N subframes in the A-MSDU, then the A-MSDU's size is

	 * N * subf_len + (N - 1) * pad.

	/*

	 * Make sure we have enough TBs for the A-MSDU:

	 *	2 for each subframe

	 *	1 more for each fragment

	 *	1 more for the potential data in the header

 This skb fits in one single A-MSDU */

	/*

	 * Trick the segmentation function to make it

	 * create SKBs that can fit into one A-MSDU.

 CONFIG_INET */

 Impossible to get TSO with CONFIG_INET */

 Check if there are any timed-out TIDs on a given shared TXQ */

/*

 * Sets the fields in the Tx cmd that are crypto related.

 *

 * This function must be called with BHs disabled.

	/*

	 * we handle that entirely ourselves -- for uAPSD the firmware

	 * will always send a notification, and for PS-Poll responses

	 * we'll notify mac80211 when getting frame status

	/* nullfunc frames should go to the MGMT queue regardless of QOS,

	 * the condition of !ieee80211_is_qos_nullfunc(fc) keeps the default

	 * assignment of MGMT TID

 update the tx_cmd hdr as it was already copied */

 Keep track of the time of the last frame for this RA/TID */

		/*

		 * If we have timed-out TIDs - schedule the worker that will

		 * reconfig the queues and update them

		 *

		 * Note that the no lock is taken here in order to not serialize

		 * the TX flow. This isn't dangerous because scheduling

		 * mvm->add_stream_wk can't ruin the state, and if we DON'T

		 * schedule it due to some race condition then next TX we get

		 * here we will.

 From now on, we cannot access info->control */

		/*

		 * Now that this aggregation or DQA queue is empty tell

		 * mac80211 so it knows we no longer have frames buffered for

		 * the station on this TID (for the TIM bitmap calculation.)

	/*

	 * In 22000 HW, the next_reclaimed index is only 8 bit, so we'll need

	 * to align the wrap around of ssn so we compare relevant values.

 CONFIG_IWLWIFI_DEBUG */

		/* mac80211 cannot do this without ieee80211_tx_status_ext()

/*

 * translate ucode response to mac80211 tx status control values

 don't collect on status 0 */

/*

 * iwl_mvm_get_scd_ssn - returns the SSN of the SCD

 * @tx_resp: the Tx response from the fw (agg or non-agg)

 *

 * When the fw sends an AMPDU, it fetches the MPDUs one after the other. Since

 * it can't know that everything will go well until the end of the AMPDU, it

 * can't know in advance the number of MPDUs that will be sent in the current

 * batch. This is why it writes the agg Tx response while it fetches the MPDUs.

 * Hence, it can't know in advance what the SSN of the SCD will be at the end

 * of the batch. This is why the SSN of the SCD is written at the end of the

 * whole struct at a variable offset. This function knows how to cope with the

 * variable offset and returns the SSN of the SCD.

 struct iwl_mvm_tx_resp_v3 is almost the same */

 we can free until ssn % q.n_bd not inclusive */

 inform mac80211 about what happened with the frame */

			/* the FW should have stopped the queue and not

			 * return this status

		/*

		 * If we are freeing multiple frames, mark all the frames

		 * but the first one as acked, since they were acknowledged

		 * before

		/* Don't assign the converted initial_rate, because driver

		 * TLC uses this and doesn't support the new FW rate

 Single frame failure in an AMPDU queue => send BAR */

 W/A FW bug: seq_ctl is wrong upon failure / BAR frame */

			/*

			 * If it is an NDP, we can't update next_reclaim since

			 * its sequence control is 0. Note that for that same

			 * reason, NDPs are never sent to A-MPDU'able queues

			 * so that we can never have more than one freed frame

			 * for a single Tx resonse (see WARN_ON below).

		/*

		 * TODO: this is not accurate if we are freeing more than one

		 * packet.

	/* This is an aggregation queue or might become one, so we use

	 * the ssn since: ssn = wifi seq_num % 256.

	 * The seq_ctl is the sequence control of the packet to which

	 * this Tx response relates. But if there is a hole in the

	 * bitmap of the BA we received, this Tx response may allow to

	 * reclaim the hole and all the subsequent packets that were

	 * already acked. In that case, seq_ctl != ssn, and the next

	 * packet to be reclaimed will be ssn and not seq_ctl. In that

	 * case, several packets will be reclaimed even if

	 * frame_count = 1.

	 *

	 * The ssn is the index (% 256) of the latest packet that has

	 * treated (acked / dropped) + 1.

	/*

	 * sta can't be NULL otherwise it'd mean that the sta has been freed in

	 * the firmware while we still have packets for it in the Tx queues.

					/*

					 * The number of frames in the queue

					 * dropped to 0 even if we sent less

					 * frames than we thought we had on the

					 * Tx queue.

					 * This means we had holes in the BA

					 * window that we just filled, ask

					 * mac80211 to send EOSP since the

					 * firmware won't know how to do that.

					 * Send NDP and the firmware will send

					 * EOSP notification that will trigger

					 * a call to ieee80211_sta_eosp().

 In case one frame wasn't transmitted trigger time point */

 CONFIG_IWLWIFI_DEBUG */

 Reclaiming frames for a station that has been deleted ? */

	/*

	 * Release all TFDs before the SSN, i.e. all TFDs in front of

	 * block-ack window (we assume that they've been successfully

	 * transmitted ... if not, it's too late anyway).

		/* Packet was transmitted successfully, failures come as single

		 * frames because before failing a frame the firmware transmits

		 * it without aggregation at least once.

	/*

	 * It's possible to get a BA response after invalidating the rcu (rcu is

	 * invalidated in order to prevent new Tx from being sent, but there may

	 * be some frames already in-flight).

	 * In this case we just want to reclaim, and could skip all the

	 * sta-dependent stuff since it's in the middle of being removed

	 * anyways.

 pack lq color from tid_data along the reduced txp */

 this is the first skb we deliver in this batch */

 put the rate scaling data there */

	/* We got a BA notif with 0 acked or scd_ssn didn't progress which is

	 * possible (i.e. first MPDU in the aggregation wasn't acked)

	 * Still it's important to update RS about sent vs. acked.

		/*

		 * It's possible to get a BA response after invalidating the rcu

		 * (rcu is invalidated in order to prevent new Tx from being

		 * sent, but there may be some frames already in-flight).

		 * In this case we just want to reclaim, and could skip all the

		 * sta-dependent stuff since it's in the middle of being removed

		 * anyways.

 Free per TID */

 "flow" corresponds to Tx queue */

	/* "ssn" is start of block-ack Tx window, corresponds to index

/*

 * Note that there are transports that buffer frames before they reach

 * the firmware. This means that after flush_tx_path is called, the

 * queue might not be empty. The race-free way to handle this is to:

 * 1) set the station as draining

 * 2) flush the Tx path

 * 3) wait for the transport queues to be empty

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



  Copyright(c) 2003 - 2006 Intel Corporation. All rights reserved.





  Contact Information:

  Intel Linux Wireless <ilw@linux.intel.com>

  Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497



  Portions of this file are based on the sample_* files provided by Wireless

  Extensions 0.26 package and copyright (c) 1997-2003 Jean Tourrilhes

  <jt@hpl.hp.com>



  Portions of this file are based on the Host AP project,

  Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen

    <j@w1.fi>

  Copyright (c) 2002-2003, Jouni Malinen <j@w1.fi>



  Portions of ipw2100_mod_firmware_load, ipw2100_do_mod_firmware_load, and

  ipw2100_fw_load are loosely based on drivers/sound/sound_firmware.c

  available in the 2.4.25 kernel sources, and are copyright (c) Alan Cox



/*



 Initial driver on which this is based was developed by Janusz Gorycki,

 Maciej Urbaniak, and Maciej Sosnowski.



 Promiscuous mode support added by Jacek Wysoczynski and Maciej Urbaniak.



Theory of Operation



Tx - Commands and Data



Firmware and host share a circular queue of Transmit Buffer Descriptors (TBDs)

Each TBD contains a pointer to the physical (dma_addr_t) address of data being

sent to the firmware as well as the length of the data.



The host writes to the TBD queue at the WRITE index.  The WRITE index points

to the _next_ packet to be written and is advanced when after the TBD has been

filled.



The firmware pulls from the TBD queue at the READ index.  The READ index points

to the currently being read entry, and is advanced once the firmware is

done with a packet.



When data is sent to the firmware, the first TBD is used to indicate to the

firmware if a Command or Data is being sent.  If it is Command, all of the

command information is contained within the physical address referred to by the

TBD.  If it is Data, the first TBD indicates the type of data packet, number

of fragments, etc.  The next TBD then refers to the actual packet location.



The Tx flow cycle is as follows:



1) ipw2100_tx() is called by kernel with SKB to transmit

2) Packet is move from the tx_free_list and appended to the transmit pending

   list (tx_pend_list)

3) work is scheduled to move pending packets into the shared circular queue.

4) when placing packet in the circular queue, the incoming SKB is DMA mapped

   to a physical address.  That address is entered into a TBD.  Two TBDs are

   filled out.  The first indicating a data packet, the second referring to the

   actual payload data.

5) the packet is removed from tx_pend_list and placed on the end of the

   firmware pending list (fw_pend_list)

6) firmware is notified that the WRITE index has

7) Once the firmware has processed the TBD, INTA is triggered.

8) For each Tx interrupt received from the firmware, the READ index is checked

   to see which TBDs are done being processed.

9) For each TBD that has been processed, the ISR pulls the oldest packet

   from the fw_pend_list.

10)The packet structure contained in the fw_pend_list is then used

   to unmap the DMA address and to free the SKB originally passed to the driver

   from the kernel.

11)The packet structure is placed onto the tx_free_list



The above steps are the same for commands, only the msg_free_list/msg_pend_list

are used instead of tx_free_list/tx_pend_list



...



Critical Sections / Locking :



There are two locks utilized.  The first is the low level lock (priv->low_lock)

that protects the following:



- Access to the Tx/Rx queue lists via priv->low_lock. The lists are as follows:



  tx_free_list : Holds pre-allocated Tx buffers.

    TAIL modified in __ipw2100_tx_process()

    HEAD modified in ipw2100_tx()



  tx_pend_list : Holds used Tx buffers waiting to go into the TBD ring

    TAIL modified ipw2100_tx()

    HEAD modified by ipw2100_tx_send_data()



  msg_free_list : Holds pre-allocated Msg (Command) buffers

    TAIL modified in __ipw2100_tx_process()

    HEAD modified in ipw2100_hw_send_command()



  msg_pend_list : Holds used Msg buffers waiting to go into the TBD ring

    TAIL modified in ipw2100_hw_send_command()

    HEAD modified in ipw2100_tx_send_commands()



  The flow of data on the TX side is as follows:



  MSG_FREE_LIST + COMMAND => MSG_PEND_LIST => TBD => MSG_FREE_LIST

  TX_FREE_LIST + DATA => TX_PEND_LIST => TBD => TX_FREE_LIST



  The methods that work on the TBD ring are protected via priv->low_lock.



- The internal data state of the device itself

- Access to the firmware read/write indexes for the BD queues

  and associated logic



All external entry functions are locked with the priv->action_lock to ensure

that only one external action is invoked at a time.





 Debugging stuff */

 Reception debugging */

 CONFIG_IPW2100_DEBUG */

 HOST_ATTENTION */

 SLEEP */

 HOST_POWER_DOWN */

 SET_IMR */

 SAVE_CALIBRATION */

 RESTORE_CALIBRATION */

 HOST_INTERRUPT_COALESCING */

 Pre-decl until we get the code solid and then we can clean it up */

 read first nibble byte by byte */

 Start reading at aligned_addr + dif_len */

 read DWs through autoincrement registers */

 copy the last nibble */

 read first nibble byte by byte */

 Start reading at aligned_addr + dif_len */

 read DWs through autoincrement registers */

 copy the last nibble */

 get the address of statistic */

		/* get the second DW of statistics ;

 get each entry length */

 get number of entries */

 abort if no enough memory */

 read the ordinal data from the SRAM */

	/* If we haven't received a reset request within the backoff period,

	 * then we can reset the backoff interval so this reset occurs

 initialize the firmware command packet */

	/*

	 * We must wait for this command to complete before another

	 * command can be sent...  but if we wait more than 3 seconds

	 * then there is a problem.

	/* !!!!! HACK TEST !!!!!

	 * When lots of debug trace statements are enabled, the driver

	 * doesn't seem to have as many firmware restart cycles...

	 *

/*

 * Verify the values and data access of the hardware

 * No locks needed or used.  No functions called.

 Domain 0 check - all values should be DOA_DEBUG */

 Domain 1 check - use arbitrary read/write compare  */

 The memory area is not used now */

/*

 *

 * Loop until the CARD_DISABLED bit is the same value as the

 * supplied parameter

 *

 * TODO: See if it would be more efficient to do a wait/wake

 *       cycle and have the completion event trigger the wakeup

 *

 100 milli

		/* We'll break out if either the HW state says it is

		 * in the state we want, or if HOST_COMPLETE command

/*********************************************************************

    Procedure   :   sw_reset_and_clock

    Purpose     :   Asserts s/w reset, asserts clock initialization

                    and waits for clock stabilization

 assert s/w reset

 wait for clock stabilization

 check clock ready bit

 TODO: better error value

	/* set "initialization complete" bit to move adapter to

 wait for clock stabilization */

 check clock ready bit */

 TODO: better error value */

 set D0 standby bit */

/*********************************************************************

    Procedure   :   ipw2100_download_firmware

    Purpose     :   Initiaze adapter after power on.

                    The sequence is:

                    1. assert s/w reset first!

                    2. awake clocks & wait for clock stabilization

                    3. hold ARC (don't ask me why...)

                    4. load Dino ucode and reset/clock init again

                    5. zero-out shared mem

                    6. download f/w

 Fetch the firmware and microcode */

 s/w reset and clock stabilization */

 Hold ARC */

 allow ARC to run */

 load microcode */

 release ARC */

 s/w reset and clock stabilization (again!!!) */

 load f/w */

	/*

	 * When the .resume method of the driver is called, the other

	 * part of the system, i.e. the ide driver could still stay in

	 * the suspend stage. This prevents us from loading the firmware

	 * from the disk.  --YZ

 free any storage allocated for firmware image */

 zero out Domain 1 area indirectly (Si requirement) */

	/*

	 * Set GPIO 3 writable by FW; GPIO 1 writable

	 * by driver and enable clock

	/*

	 * EEPROM_SRAM_DB_START_ADDRESS using ordinal in ordinal table 1

	/*

	 * EEPROM version is the byte at offset 0xfd in firmware

	/*

	 *  HW RF Kill enable is bit 0 in byte at offset 0x21 in firmware

	 *

	 *  notice that the EEPROM bit is reverse polarity, i.e.

	 *     bit = 0  signifies HW RF kill switch is supported

	 *     bit = 1  signifies HW RF kill switch is NOT supported

/*

 * Start firmware execution after power on and initialization

 * The sequence is:

 *  1. Release ARC

 *  2. Wait for f/w initialization completes;

	/*

	 * Initialize the hw - drive adapter to DO state by setting

	 * init_done bit. Wait for clk_ready bit and Download

	 * fw & dino ucode

	/* Clear the Tx, Rx and Msg queues and the r/w indexes

	/* TODO -- Look at disabling interrupts here to make sure none

 Release ARC - clear reset bit */

 wait for f/w initialization complete */

 Todo... wait for sync command ... */

 check "init done" bit */

 reset "init done" bit */

		/* check error conditions : we check these after the firmware

		 * check so that if there is an error, the interrupt handler

 clear error conditions */

	/* Clear out any pending INTAs since we aren't supposed to have

 Clear out any pending interrupts */

 allow firmware to write to GPIO1 & GPIO3 */

 Ready to receive commands */

 The adapter has been reset; we are not associated */

 NOTE: Our interrupt is disabled when this method is called */

 Step 1. Stop Master Assert */

	/* Step 2. Wait for stop Master Assert

 Reset any fatal_error conditions */

 At this point, the adapter is now stopped and disabled */

/*

 * Send the CARD_DISABLE_PHY_OFF command to the card to disable it

 *

 * After disabling, if the card was associated, a STATUS_ASSN_LOST will be sent.

 *

 * STATUS_CARD_DISABLE_NOTIFICATION will be sent regardless of

 * if STATUS_ASSN_LOST is sent.

 Turn off the radio */

	/* We can only shut down the card if the firmware is operational.  So,

	 * if we haven't reset since a fatal_error, then we can not send the

		/* First, make sure the adapter is enabled so that the PHY_OFF

		/*

		 * If in D0-standby mode going directly to D3 may cause a

		 * PCI bus violation.  Therefore we must change out of the D0

		 * state.

		 *

		 * Sending the PREPARE_FOR_POWER_DOWN will restrict the

		 * hardware from going into standby mode and will transition

		 * out of D0-standby if it is already in that state.

		 *

		 * STATUS_PREPARE_POWER_DOWN_COMPLETE will be sent by the

		 * driver upon completion.  Once received, the driver can

		 * proceed to the D3 state.

		 *

		 * Prepare for power down command to fw.  This command would

		 * take HW out of D0-standby and prepare it for D3 state.

		 *

		 * Currently FW does not support event notification for this

		 * event. Therefore, skip waiting for it.  Just wait a fixed

		 * 100ms

	/*

	 * Set GPIO 3 writable by FW; GPIO 1 writable

	 * by driver and enable clock

	/*

	 * Power down adapter.  Sequence:

	 * 1. Stop master assert (RESET_REG[9]=1)

	 * 2. Wait for stop master (RESET_REG[8]==1)

	 * 3. S/w reset assert (RESET_REG[7] = 1)

 Stop master assert */

	/* wait stop master not more than 50 usec.

 Check master stop bit */

 assert s/w reset */

 Make sure we clear the associated state */

 No scanning if in monitor mode */

	/* Not clearing here; doing so makes iwlist always return nothing...

	 *

	 * We should modify the table logic to use aging tables vs. clearing

	 * the table on each scan start.

 Restricted */

 Age scan list entries found before suspend */

 Quiet if manually disabled. */

	/* the ipw2100 hardware really doesn't want power management delays

	 * longer than 175usec

 If the interrupt is enabled, turn it off... */

 Reset any fatal_error conditions */

 Power cycle the card ... */

 Load the firmware, start the clocks, etc. */

 Determine capabilities of this particular HW configuration */

 Initialize the geo */

 Turn on the interrupt so that commands can be processed */

	/* Send all of the commands that must be sent prior to

 Enable the adapter - sends HOST_COMPLETE */

 Start a scan . . . */

 Kill the RF switch timer */

 Kill the firmware hang check timer */

 Kill any pending resets */

	/* Make sure the interrupt is on so that FW commands will be

	/* Do not disable the interrupt until _after_ we disable

	 * the adaptor.  Otherwise the CARD_DISABLE command will never

 We have to signal any supplicant if we are disassociating */

 fill-out priv->ieee->bg_band */

 translate geo->bg to bg_band.channels */

			/* No equivalent for LIBIPW_CH_80211H_RULES,

			   LIBIPW_CH_UNIFORM_SPREADING, or

 point at bitrate info */

	/* Force a power cycle even if interface hasn't been opened

 stop timed checks so that they don't interfere with reset */

 We have to signal any supplicant if we are disassociating */

	/*

	 * TBD: BSSID is usually 00:00:00:00:00:00 here and not

	 *      an actual MAC of the AP. Seems like FW sets this

	 *      address too late. Read it later and expose through

	 *      /proc or schedule a later task to query and update

 now we copy read ssid into dev */

	/* Bug in FW currently doesn't honor bit 0 in SET_SCAN_OPTIONS to

	/* NOTE:  We always send the SSID command even if the provided ESSID is

 RF_KILL is now enabled (else we wouldn't be here) */

 Make sure the RF Kill check timer is running */

 Age the scan results... */

 Only userspace-requested scan completion events go out immediately */

 CONFIG_IPW2100_DEBUG */

 Wake up any sleeping jobs */

/*

 *

 * 0) Disconnect the SKB from the firmware (just unmap)

 * 1) Pack the ETH header into the SKB

 * 2) Pass the SKB to the network stack

 *

 * When packet is provided by the firmware, it contains the following:

 *

 * .  libipw_hdr

 * .  libipw_snap_hdr

 *

 * The size of the constructed ethernet

 *

 Halt the firmware so we can get a good image */

	/* Make a copy of the frame so we can dump it to the logs if

 libipw_rx failed, so it didn't free the SKB */

 We need to allocate a new SKB and attach it to the RDB. */

 TODO: schedule adapter shutdown */

 Update the RDB entry */

	/* Magic struct that slots into the radiotap header -- no reason

	 * to build this manually element by element, we can write it much

 signal in dbM, kluged to signed */

 always good to zero */

 total hdr+data */

 libipw_rx failed, so it didn't free the SKB */

 We need to allocate a new SKB and attach it to the RDB. */

 TODO: schedule adapter shutdown */

 Update the RDB entry */

/*

 * ipw2100 interrupts are disabled at this point, and the ISR

 * is the only code that calls this method.  So, we do not need

 * to play with any locks.

 *

 * RX Queue works as follows:

 *

 * Read index - firmware places packet in entry identified by the

 *              Read index and advances Read index.  In this manner,

 *              Read index will always point to the next packet to

 *              be filled--but not yet valid.

 *

 * Write index - driver fills this entry with an unused RBD entry.

 *               This entry has not filled by the firmware yet.

 *

 * In between the W and R indexes are the RBDs that have been received

 * but not yet processed.

 *

 * The process of handling packets will start at WRITE + 1 and advance

 * until it reaches the READ index.

 *

 * The WRITE index is cached in the variable 'priv->rx_queue.next'.

 *

		/* IPW_DEBUG_RX("r = %d : w = %d : processing = %d\n",

		/* Sync the DMA for the RX buffer so CPU is sure to get

 Reset Rx watchdog */

 clear status field associated with this RBD */

 backtrack one entry, wrapping to end if at 0 */

/*

 * __ipw2100_tx_process

 *

 * This routine will determine whether the next packet on

 * the fw_pend_list has been processed by the firmware yet.

 *

 * If not, then it does nothing and returns.

 *

 * If so, then it removes the item from the fw_pend_list, frees

 * any associated storage, and places the item back on the

 * free list of its source (either msg_free_list or tx_free_list)

 *

 * TX Queue works as follows:

 *

 * Read index - points to the next TBD that the firmware will

 *              process.  The firmware will read the data, and once

 *              done processing, it will advance the Read index.

 *

 * Write index - driver fills this entry with an constructed TBD

 *               entry.  The Write index is not advanced until the

 *               packet has been configured.

 *

 * In between the W and R indexes are the TBDs that have NOT been

 * processed.  Lagging behind the R index are packets that have

 * been processed but have not been freed by the driver.

 *

 * In order to free old storage, an internal index will be maintained

 * that points to the next packet to be freed.  When all used

 * packets have been freed, the oldest index will be the same as the

 * firmware's read index.

 *

 * The OLDEST index is cached in the variable 'priv->tx_queue.oldest'

 *

 * Because the TBD structure can not contain arbitrary data, the

 * driver must keep an internal queue of cached allocations such that

 * it can put that data back into the tx_free_list and msg_free_list

 * for use by future command and data packets.

 *

 Determine how many TBD entries must be finished... */

 COMMAND uses only one slot; don't advance */

 DATA uses two slots; advance and loop position. */

	/* if the last TBD is not done by NIC yet, then packet is

	 * not ready to be released.

	 *

	/*

	 * txq->next is the index of the last packet written txq->oldest is

	 * the index of the r is the index of the next packet to be read by

	 * firmware

	/*

	 * Quick graphic to help you visualize the following

	 * if / else statement

	 *

	 * ===>|                     s---->|===============

	 *                               e>|

	 * | a | b | c | d | e | f | g | h | i | j | k | l

	 *       r---->|

	 *               w

	 *

	 * w - updated by driver

	 * r - updated by firmware

	 * s - start of oldest BD entry (txq->oldest)

	 * e - end of oldest BD entry

	 *

 DATA packet; we have to unmap and free the SKB */

		/* We have a free slot in the Tx queue, so wake up the

		/* A packet was processed by the hardware, so update the

 advance oldest used TBD pointer to start of next entry */

 increase available TBDs number */

		/* if there isn't enough space in TBD queue, then

		 * don't stuff a new one in.

		 * NOTE: 3 are needed as a command will take one,

		 *       and there is a minimum of 2 that must be

		 *       maintained between the r and w indexes

 initialize TBD */

		/* not marking number of fragments causes problems

 update TBD queue counters */

		/* kick off the DMA by notifying firmware the

/*

 * ipw2100_tx_send_data

 *

		/* if there isn't enough space in TBD queue, then

		 * don't stuff a new one in.

		 * NOTE: 4 are needed as a data will take two,

		 *       and there is a minimum of 2 that must be

		 *       maintained between the r and w indexes

			/* TODO: Support merging buffers if more than

			/* To DS: Addr1 = BSSID, Addr2 = SA,

			/* not From/To DS: Addr1 = DA, Addr2 = SA,

 For now we only support host based encryption */

		/* kick off the DMA by notifying firmware the

	/* We do not loop and keep polling for more interrupts as this

	 * is frowned upon and doesn't play nicely with other potentially

 Wake up any sleeping jobs */

 ipw2100_handle_event(dev); */

	/* We check to see if we should be ignoring interrupts before

	 * we touch the hardware.  During ucode load if we try and handle

	 * an interrupt we can cause keyboard problems as well as cause

 Shared IRQ */

 Hardware disappeared */

 Shared interrupt */

	/* We disable the hardware interrupt here just to prevent unneeded

	 * calls to be made.  We disable this again within the actual

	 * work tasklet, so if another part of the code re-enables the

 sysfs provides us PAGE_SIZE buffer */

 kill unused-var warning for debug-only code */

 sysfs provides us PAGE_SIZE buffer */

 CONFIG_IPW2100_MONITOR */

	/* Indicate ipw2100_download_firmware download firmware

 CONFIG_IPW2100_DEBUG */

 kill unused-var warning for debug-only code */

	/* 0 - RF kill not enabled

	   1 - SW based RF kill active (sysfs)

	   2 - HW based RF kill active

 Make sure the RF_KILL check timer is running */

	/*

	 * reinitialize packet info lists

	/*

	 * reinitialize lists

		/* We simply drop any SKBs that have been queued for

	/*

	 * allocate packets

 The BD holds the cache aligned address */

 set up the status queue */

/********************************************************************

 *

 * Firmware Commands

 *

 send cmd to firmware */

 If BSS then we don't support channel selection */

 Set system configuration */

 11b only */

cmd.host_command_parameters[0] |= DIVERSITY_ANTENNA_A; */

/* If IPv6 is configured in the kernel then we don't want to filter out all

 Set BASIC TX Rate first */

 Set TX Rate */

 Set MSDU TX Rate */

 Set beacon interval */

 if BSSID is empty then we disable mandatory bssid mode */

	/* The Firmware currently ignores the BSSID and just disassociates from

	 * the currently associated AP -- but in the off chance that a future

	 * firmware does use the BSSID provided here, we go ahead and try and

	/* If shared key AP authentication is turned on, then we need to

	 * configure the firmware to try and use it.

	 *

 send cmd to firmware */

 Macros to ease up priting WEP keys */

/**

 * ipw2100_set_key() - Set a the wep key

 *

 * @priv: struct to work on

 * @idx: index of the key we want to set

 * @key: ptr to the key data to set

 * @len: length of the buffer at @key

 * @batch_mode: FIXME perform the operation in batch mode, not

 *              disabling the device.

 *

 * @returns 0 if OK, < 0 errno code on error.

 *

 * Fill out a command structure with the new wep key, length an

 * index and send it down the wire.

	/* NOTE: We don't check cached values in case the firmware was reset

	 * or some other problem is occurring.  If the user is setting the key,

 Will be optimized out on debug not being configured in */

 FIXME: IPG: shouldn't this prink be in _disable_adapter()? */

 send cmd to firmware */

 send cmd to firmware */

	/* Always enable privacy so the Host can filter WEP packets if

	/* If we happen to have reconnected before we get a chance to

	 * process this, then update the security settings--which causes

/* As a temporary work around to enable WPA until we figure out why

 * wpa_supplicant toggles the security capability of the driver, which

 * forces a disassociation with force_update...

 *

 CONFIG_IPW2100_MONITOR */

 Default to power mode OFF */

	/*

	   err = ipw2100_set_fragmentation_threshold(

	   priv, priv->frag_threshold, batch_mode);

	   if (err)

	   return err;

/*************************************************************************

 *

 * EXTERNALLY CALLED METHODS

 *

/* This method is called by the network layer -- not to be confused with

 * ipw2100_set_mac_address() declared above called by this driver (and this

 Flush the TX queue ... */

/*

 * TODO:  Fix this function... its just wrong

	/* This is called when wpa_supplicant loads and closes the driver

 copy WPA IE */

 make sure WPA is enabled */

 If fatal_error is set then we need to restart */

 Check if firmware is hung */

 Kill timer */

 Restart the NIC */

 RF Kill is now disabled, so bring the device back up */

 Look into using netdev destructor to shutdown libipw? */

	/* NOTE: We don't use the wireless_handlers hook

	 * in dev as the system will start throwing WX requests

	 * to us before we're actually initialized and it just

	 * ends up causing problems.  So, we just handle

	/* memset() puts everything to 0, so we only have explicitly set

 If power management is turned on, default to AUTO mode */

 Set module parameters */

 NOTE:  We do not start the deferred work for status checks yet */

 allocate and initialize our net_device */

 set up PCI mappings for device */

	/* We disable the RETRY_TIMEOUT register (0x41) to keep

 Force interrupts to be shut off on the device */

 Allocate and initialize the Tx/Rx queues and lists */

	/* Bring up the interface.  Pre 0.46, after we registered the

	 * network device we would call ipw2100_up.  This introduced a race

	 * condition with newer hotplug configurations (network was coming

	 * up and making calls before the device was initialized).

 perform this after register_netdev so that dev->name is set */

	/* If the RF Kill switch is disabled, go ahead and complete the

 Enable the adapter - sends HOST_COMPLETE */

 Start a scan . . . */

 These are safe to call even if they weren't allocated */

 Take down the hardware */

	/* Release the mutex so that the network subsystem can

	/* Unregister the device first - this results in close()

	 * being called if the device is open.  If we free storage

	 * first, then close() will crash.

 Free potential debugging firmware snapshot */

 wiphy_unregister needs to be here, before free_libipw */

 Take down the device; powers it off, etc. */

 Remove the PRESENT state of the device */

	/*

	 * Suspend/Resume resets the PCI configuration space, so we have to

	 * re-disable the RETRY_TIMEOUT register (0x41) to keep PCI Tx retries

	 * from interfering with C3 CPU state. pci_restore_state won't help

	 * here since it only restores the first 64 bytes pci config header.

	/* Set the device back into the PRESENT state; this will also wake

 Bring the device back up */

 Take down the device; powers it off, etc. */

 IN 2100A mPCI 3A */

 IN 2100A mPCI 3B */

 IN 2100A mPCI 3B */

 IN 2100A mPCI 3B */

 IN 2100A mPCI Gen A3 */

 IN 2100 mPCI 3B */

 IN 2100 mPCI 3A */

 IN 2100 mPCI 3B */

 IN 2100 mPCI 3B */

 IN 2100 mPCI 3B */

 IN 2100 mPCI 3A */

 IN 2100 mPCI 3A */

 IN 2100 mPCI 3A */

 IB 2100A mPCI 3B */

 IB 2100 mPCI 3B */

 IB 2100 mPCI 3B */

 IB 2100 mPCI 3B */

 IB 2100 mPCI 3B */

 DE 2100A mPCI 3A */

 DE 2100A mPCI 3A */

 DE 2100A mPCI 3A */

 DE 2100 mPCI 3A */

 DE 2100 mPCI 3A */

 DE 2100 mPCI 3A */

 DE 2100 mPCI 3A */

 GA 2100 mPCI 3B */

 TO 2100A mPCI 3B */

 TO 2100A mPCI 3B */

 TO 2100A mPCI 3B */

 TO 2100 mPCI 3B */

 TO 2100 mPCI 3B */

 TO 2100 mPCI 3B */

 TO 2100 mPCI 3B */

 SO 2100A mPCI 3B */

 SO 2100A mPCI 3B */

 SO 2100 mPCI 3B */

 SO 2100 mPCI 3B */

 SO 2100 mPCI 3B */

 SO 2100 mPCI 3B */

 HP 2100 mPCI 3B */

/**

 * Initialize the ipw2100 driver/module

 *

 * @returns 0 if ok, < 0 errno node con error.

 *

 * Note: we cannot init the /proc stuff until the PCI driver is there,

 * or we risk an unlikely race condition on someone accessing

 * uninitialized data in the PCI dev struct through /proc.

/**

 * Cleanup ipw2100 driver registration

 FIXME: IPG: check that we have no instances of the devices open */

	/*

	 * This can be called at any time.  No action lock required

 if setting by freq convert to channel */

 hack to fall through */

 Set the channel */

	/*

	 * This can be called at any time.  No action lock required

	/* If we are associated, trying to associate, or have a statically

 CONFIG_IPW2100_MONITOR */

	/*

	 * This can be called at any time.  No action lock required

 Values are in microsecond */

	/*

	 * This can be called at any time.  No action lock required

	/* Let's try to keep this struct in the same order as in

	 * linux/include/wireless.h

	/* TODO: See what values we can set, and remove the ones we can't

	 * set, or fill them with some default data.

 ~5 Mb/s real (802.11b) */

      range->sensitivity;     /* signal level threshold range */

 TODO: Find real max RSSI and stick here */

 Updated all three */

 > 8% missed beacons is 'bad' */

 TODO: Find real 'good' to 'bad' threshold value for RSSI */

 Updated all three */

 Minimal PM period */

 Maximal PM period */

 Minimal PM timeout */

 Maximal PM timeout */

 How to decode max/min PM period */

 How to decode max/min PM period */

 What PM options are supported */

 Different token sizes */

 Number of entry in the list */

 Max number of tokens */

      range->encoding_login_index;            /* token index for login token */

 Set the Wireless Extension versions */

      range->retry_capa;      /* What retry options are supported */

      range->retry_flags;     /* How to decode max/min retry limit */

      range->r_time_flags;    /* How to decode max/min retry life */

      range->min_retry;       /* Minimal number of retries */

      range->max_retry;       /* Maximal number of retries */

      range->min_r_time;      /* Minimal retry lifetime */

      range->max_r_time;      /* Maximal retry lifetime */

 TODO: Include only legal frequencies for some countries

              if (local->channel_mask & (1 << i)) {

              }

 Event capability (kernel + driver) */

 sanity checks

 we disable mandatory BSSID association */

	/*

	 * This can be called at any time.  No action lock required

	/* If we are associated, trying to associate, or have a statically

 ANY */

	/*

	 * This can be called at any time.  No action lock required

	/* If we are associated, trying to associate, or have a statically

 active */

 active */

	/*

	 * This can be called at any time.  No action lock required

	/*

	 * This can be called at any time.  No action lock required

 active */

 Auto RTS not yet supported */

	/*

	 * This can be called at any time.  No action lock required

 no auto select */

 If RTS is set to the default value, then it is disabled */

	/*

	 * This can be called at any time.  No action lock required

	/*

	 * This can be called at any time.  No action lock required

	/*

	 * This can be called at any time.  No action lock required

 no auto select */

	/*

	 * This can be called at any time.  No action lock required

 can't be disabled */

		/* TODO: Mark a scan as pending so when hardware initialized

	/*

	 * This can be called at any time.  No action lock required

/*

 * Implementation based on code in hostap-driver v0.1.3 hostap_ioctl.c

	/*

	 * No check of STATUS_INITIALIZED required

	/*

	 * This can be called at any time.  No action lock required

 If not specified */

 If set all mask */

 If explicitly state all */

 Otherwise we don't support it */

	/* If the user hasn't specified a power management mode yet, default

	/*

	 * This can be called at any time.  No action lock required

/*

 * WE-18 WPA support

 SIOCSIWGENIE */

 SIOCGIWGENIE */

 SIOCSIWAUTH */

		/*

		 * ipw2200 does not use these parameters

			/* HACK:

			 *

			 * wpa_supplicant calls set_wpa_enabled when the driver

			 * is loaded and unloaded, regardless of if WPA is being

			 * used.  No other calls are made which can be used to

			 * determine if encryption will be used or not prior to

			 * association being expected.  If encryption is not being

			 * used, drop_unencrypted is set to false, else true -- we

			 * can use this to determine if the CAP_PRIVACY_ON bit should

			 * be set.

			/* We only change SEC_LEVEL for open mode. Others

			 * are set by ipw_wpa_set_encryption.

case IW_AUTH_ROAMING_CONTROL:

 SIOCGIWAUTH */

		/*

		 * wpa_supplicant will control these internally

 SIOCSIWENCODEEXT */

 SIOCGIWENCODEEXT */

 SIOCSIWMLME */

 silently ignore

/*

 *

 * IWPRIV handlers

 *

	/*

	 * This can be called at any time.  No action lock required

	/*

	 * This can be called at any time.  No action lock required

	/*

	 * This can be called at any time.  No action lock required

 CONFIG_IPW2100_MONITOR */

 CONFIG_IPW2100_MONITOR */

 CONFIG_IPW2100_MONITOR */

 CONFIG_IPW2100_MONITOR */

 CONFIG_IPW2100_MONITOR */

 CONFIG_IPW2100_MONITOR */

 CONFIG_IPW2100_MONITOR */

/*

 * Get wireless statistics.

 * Called by /proc/net/wireless

 * Also called by SIOCGIWSTATS

	/* if hw is disabled, then ipw2100_get_ordinal() can't be called.

	 * ipw2100_wx_wireless_stats seems to be called before fw is

	 * initialized.  STATUS_ASSOCIATED will only be set if the hw is up

	 * and associated; if not associcated, the values are all meaningless

 If we don't have a connection the quality and level is 0 */

 FIXME: this is percent and not a # */

 Fetch BSSID from the hardware */

		/* We now have the BSSID, so can finish setting to the full

		/* This is a disassociation event, so kick the firmware to

/*



BINARY FIRMWARE HEADER FORMAT



offset      length   desc

0           2        version

2           2        mode == 0:BSS,1:IBSS,2:MONITOR

4           4        fw_len

8           4        uc_len

C           fw_len   firmware data

12 + fw_len uc_len   microcode data



 firmware version is an ascii string (max len of 14) */

 microcode version is a 32 bit integer */

/*

 * On exit, the firmware will have been freed from the fw list

	/* firmware is constructed of N contiguous entries, each entry is

	 * structured as:

	 *

	 * offset    sie         desc

	 * 0         4           address to write to

	 * 4         2           length of data run

	 * 6         length      data

 1us LSB

 1us LSB

 1us LSB

 month, day, year

 hours, minutes

 Symbol control */

 HW config */

 fifo width =16 */

 fifo width =16 */

 EN_CS_ACCESS bit to reset control store pointer */

 copy microcode from buffer into Symbol */

 EN_CS_ACCESS bit to reset the control store pointer */

	/* Enable System (Reg 0)

 Reset External Baseband Reg */

 HW Config (Reg 5) */

 fifo width =16

 fifo width =16

	/* Enable System (Reg 0)

 clear enable system

 set enable system

	/* check Symbol is enabled - upped this from 5 as it wasn't always

 check Dino is enabled bit */

 Get Symbol alive response */

 Read alive response structure */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



  Copyright(c) 2003 - 2005 Intel Corporation. All rights reserved.





  Contact Information:

  Intel Linux Wireless <ilw@linux.intel.com>

  Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497



/*



802.11 Data Frame



      ,-------------------------------------------------------------------.

Bytes |  2   |  2   |    6    |    6    |    6    |  2   | 0..2312 |   4  |

      |------|------|---------|---------|---------|------|---------|------|

Desc. | ctrl | dura |  DA/RA  |   TA    |    SA   | Sequ |  Frame  |  fcs |

      |      | tion | (BSSID) |         |         | ence |  data   |      |

      `--------------------------------------------------|         |------'

Total: 28 non-data bytes                                 `----.----'

							      |

       .- 'Frame data' expands, if WEP enabled, to <----------'

       |

       V

      ,-----------------------.

Bytes |  4  |   0-2296  |  4  |

      |-----|-----------|-----|

Desc. | IV  | Encrypted | ICV |

      |     | Packet    |     |

      `-----|           |-----'

	    `-----.-----'

		  |

       .- 'Encrypted Packet' expands to

       |

       V

      ,---------------------------------------------------.

Bytes |  1   |  1   |    1    |    3     |  2   |  0-2304 |

      |------|------|---------|----------|------|---------|

Desc. | SNAP | SNAP | Control |Eth Tunnel| Type | IP      |

      | DSAP | SSAP |         |          |      | Packet  |

      | 0xAA | 0xAA |0x03 (UI)|0x00-00-F8|      |         |

      `----------------------------------------------------

Total: 8 non-data bytes



802.3 Ethernet Data Frame



      ,-----------------------------------------.

Bytes |   6   |   6   |  2   |  Variable |   4  |

      |-------|-------|------|-----------|------|

Desc. | Dest. | Source| Type | IP Packet |  fcs |

      |  MAC  |  MAC  |      |           |      |

      `-----------------------------------------'

Total: 18 non-data bytes



In the event that fragmentation is required, the incoming payload is split into

N parts of size ieee->fts.  The first fragment contains the SNAP header and the

remaining packets are just data.



If encryption is enabled, each fragment payload size is reduced by enough space

to add the prefix and postfix (IV and ICV totalling 8 bytes in the case of WEP)

So if you have 1500 bytes of payload with ieee->fts set to 500 without

encryption it will take 3 frames.  With WEP it will take 4 frames as the

payload of each frame is reduced to 492 bytes.



* SKB visualization

*

*  ,- skb->data

* |

* |    ETHERNET HEADER        ,-<-- PAYLOAD

* |                           |     14 bytes from skb->data

* |  2 bytes for Type --> ,T. |     (sizeof ethhdr)

* |                       | | |

* |,-Dest.--. ,--Src.---. | | |

* |  6 bytes| | 6 bytes | | | |

* v         | |         | | | |

* 0         | v       1 | v | v           2

* 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5

*     ^     | ^         | ^ |

*     |     | |         | | |

*     |     | |         | `T' <---- 2 bytes for Type

*     |     | |         |

*     |     | '---SNAP--' <-------- 6 bytes for SNAP

*     |     |

*     `-IV--' <-------------------- 4 bytes for IV (WEP)

*

*      SNAP HEADER

*

	/* To encrypt, frame format is:

/* Incoming skb is converted to a txb which consists of

 Ensure zero initialized */

	/* If there is no driver handler to take the TXB, dont' bother

 Save source and destination addresses */

 To DS: Addr1 = BSSID, Addr2 = SA, Addr3 = DA */

 not From/To DS: Addr1 = DA, Addr2 = SA, Addr3 = BSSID */

 Advance the SKB to the start of the payload */

 Determine total amount of storage required for TXB packets */

 Encrypt msdu first on the whole data packet. */

		/* Determine fragmentation size based on destination (multicast

		/* Determine amount of payload per fragment.  Regardless of if

		 * this stack is providing the full 802.11 header, one will

		 * eventually be affixed to this fragment -- so we must account

		/* Each fragment may need to have room for encryption

		/* Number of fragments is the total

	/* When we allocate the TXB we allocate enough space for the reserve

	 * and full fragment bytes (bytes_per_frag doesn't include prefix,

		/*

		 * Set header frame_ctl to the RTS.

		/*

		 * Restore header frame_ctl to the original data setting.

		/* If this is not the last fragment, then add the MOREFRAGS

 The last fragment takes the remaining length */

 Advance the SKB... */

		/* Encryption routine will move the header forward in order

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



  Copyright(c) 2003 - 2006 Intel Corporation. All rights reserved.



  802.11 status code portion of this file from ethereal-0.10.6:

    Copyright 2000, Axis Communications AB

    Ethereal - Network traffic analyzer

    By Gerald Combs <gerald@ethereal.com>

    Copyright 1998 Gerald Combs





  Contact Information:

  Intel Linux Wireless <ilw@linux.intel.com>

  Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497



 def: 0 -- do not create rtap interface */

/* Ugly macro to convert literal channel numbers into their mhz equivalents

 * There are certianly some conditions that will break this (like feeding it '30')

 CONFIG_IPW2200_QOS */

 alias for 32-bit indirect read (for SRAM/reg above 4K), with debug wrapper */

 alias for 8-bit indirect read (for SRAM/reg above 4K), with debug wrapper */

 8-bit indirect write (for SRAM/reg above 4K), with debug wrapper */

 16-bit indirect write (for SRAM/reg above 4K), with debug wrapper */

 32-bit indirect write (for SRAM/reg above 4K), with debug wrapper */

 8-bit direct write (low 4K) */

 8-bit direct write (for low 4K of SRAM/regs), with debug wrapper */

 16-bit direct write (low 4K) */

 16-bit direct write (for low 4K of SRAM/regs), with debug wrapper */

 32-bit direct write (low 4K) */

 32-bit direct write (for low 4K of SRAM/regs), with debug wrapper */

 8-bit direct read (low 4K) */

 alias to 8-bit direct read (low 4K of SRAM/regs), with debug wrapper */

 16-bit direct read (low 4K) */

 alias to 16-bit direct read (low 4K of SRAM/regs), with debug wrapper */

 32-bit direct read (low 4K) */

 alias to 32-bit direct read (low 4K of SRAM/regs), with debug wrapper */

 alias to multi-byte read (SRAM/regs above 4K), with debug wrapper */

 alias to multi-byte read (SRAM/regs above 4K), with debug wrapper */

 32-bit indirect write (above 4K) */

 8-bit indirect write (above 4K) */

 dword align */

 16-bit indirect write (above 4K) */

 dword align */

 8-bit indirect read (above 4K) */

 32-bit indirect read (above 4K) */

 General purpose, no alignment requirement, iterative (multi-byte) read, */

    for area above 1st 4K of SRAM/reg space */

 dword align */

 Read the first dword (or portion) byte by byte */

 Start reading at aligned_addr + dif_len */

 Read all of the middle dwords as dwords, with auto-increment */

 Read the last dword (or portion) byte by byte */

 General purpose, no alignment requirement, iterative (multi-byte) write, */

    for area above 1st 4K of SRAM/reg space */

 dword align */

 Write the first dword (or portion) byte by byte */

 Start writing at aligned_addr + dif_len */

 Write all of the middle dwords as dwords, with auto-increment */

 Write the last dword (or portion) byte by byte */

 General purpose, no alignment requirement, iterative (multi-byte) write, */

    for 1st 4K of SRAM/regs space */

 Set bit(s) in low 4K of SRAM/regs */

 Clear bit(s) in low 4K of SRAM/regs */

 verify device ordinal tables have been initialized */

		/*

		 * TABLE 0: Direct access to a table of 32 bit values

		 *

		 * This is a very simple table with the data directly

		 * read from the table

 remove the table id from the ordinal */

 boundary check */

 verify we have enough room to store the value */

		/*

		 * TABLE 1: Indirect access to a table of 32 bit values

		 *

		 * This is a fairly large table of u32 values each

		 * representing starting addr for the data (which is

		 * also a u32)

 remove the table id from the ordinal */

 boundary check */

 verify we have enough room to store the value */

		/*

		 * TABLE 2: Indirect access to a table of variable sized values

		 *

		 * This table consist of six values, each containing

		 *     - dword containing the starting offset of the data

		 *     - dword containing the lengh in the first 16bits

		 *       and the count in the second 16bits

 remove the table id from the ordinal */

 boundary check */

 get the address of statistic */

		/* get the second DW of statistics ;

 get each entry length */

 get number of entries */

 abort if not enough memory */

 use first two bytes */

/*

 * LED behavior:

 * - On radio ON, turn on any LEDs that require to be on during start

 * - On initialization, start unassociated blink

 * - On association, disable unassociated blink

 * - On disassociation, start unassociated blink

 * - On radio OFF, turn off any LEDs started during radio on

 *

	/* If configured to not use LEDs, or nic_type is 1,

 If we aren't associated, schedule turning the LED off */

	/* If configured not to use LEDs, or nic type is 1,

		/* If we aren't associated and the radio is on, schedule

 Reschedule LED off for full time period */

  0  */

 Only nic type 1 supports mode LEDs */

 Only nic type 1 supports mode LEDs */

 Set the Link Led on for all nic types */

 Set the default PINs for the link and activity leds */

 Set the default PINs for the OFDM leds */

 In this NIC type, the LEDs are reversed.... */

		/* And we don't blink link LEDs for this nic, so

/*

 * The following adds a new attribute to the sysfs representation

 * of this device driver (i.e. a new file in /sys/bus/pci/drivers/ipw/)

 * used for controlling the debug level.

 *

 * See the level definitions in ipw for details.

 length = 1st dword in log */

 not using min() because of its strict type checking */

/*

 * Add a device attribute to view/control the delay between eeprom

 * operations.

	/* 0 - RF kill not enabled

	   1 - SW based RF kill active (sysfs)

	   2 - HW based RF kill active

 Make sure the RF_KILL check timer is running */

 list of space separated channels to scan, optionally ending with 0 */

 Hardware disappeared */

 Only handle the cached INTA values */

 Add any cached INTA values that need to be handled */

 handle all the justifications for the interrupt */

		/* XXX: If hardware encryption is for WPA/WPA2,

		/* Keep the restart process from trying to send host

 Cancel currently queued command. */

 enable all interrupts */

 configure device for 'G' band */

 configure device to also handle 'B' band */

 configure device to also handle 'A' band */

	/* If on battery, set to 3, if AC set to CAM, else user

/*

 * The IPW device contains a Microwire compatible EEPROM that stores

 * various data like the MAC address.  Usually the firmware has exclusive

 * access to the eeprom, but during device initialization (before the

 * device driver has sent the HostComplete command to the firmware) the

 * device driver has read access to the EEPROM by way of indirect addressing

 * through a couple of memory mapped registers.

 *

 * The following is a simplified implementation for pulling data out of the

 * the eeprom, along with some helper functions to find information in

 * the per device private data's copy of the eeprom.

 *

 * NOTE: To better understand how these functions work (i.e what is a chip

 *       select and why do have to keep driving the eeprom clock?), read

 *       just about any data sheet for a Microwire compatible EEPROM.

 write a 32 bit value into the indirect accessor register */

 the eeprom requires some time to complete the operation */

 perform a chip select operation */

 perform a chip select operation */

 push a single bit down to the eeprom */

 push an opcode followed by an address down to the eeprom */

 pull 16 bits off the eeprom, one bit at a time */

 Send READ Opcode */

 Send dummy bit */

 Read the byte off the eeprom one bit at a time */

 Send another dummy bit */

 helper function for pulling the mac address out of the private */

 data's copy of the eeprom data                                 */

 read entire contents of eeprom into private buffer */

/*

 * Either the device driver (i.e. the host) or the firmware can

 * load eeprom data into the designated region in SRAM.  If neither

 * happens then the FW will shutdown with a fatal error.

 *

 * In order to signal the FW to load the EEPROM, the EEPROM_LOAD_DISABLE

 * bit needs region of shared SRAM needs to be non-zero.

	/*

	   If the data looks correct, then copy it to our private

	   copy.  Otherwise let the firmware know to perform the operation

	   on its own.

 write the eeprom data to sram */

 Do not load eeprom data on fatal error or suspend */

 Load eeprom data on fatal error or suspend */

 start dma engine but no transfers yet */

 Start the dma */

 Write CB base address */

 set the Stop and Abort bit */

 Enable the DMA in the CSR register */

 Set the Start bit. */

 Read the DMA Controlor register */

 Print the CB values */

 Calculate the new CB control word */

 Calculate the CB Element's checksum value */

 Copy the Source and Destination addresses */

 Copy the Control Word last */

Disable the DMA in the CSR register */

/*

 * Check that card is still alive.

 * Reads debug register from domain0.

 * If card is present, pre-defined value should

 * be found there.

 *

 * @param priv

 * @return 1 if card is present, 0 otherwise

 timeout in msec, attempted in 10-msec quanta */

/* These functions load the firmware and micro code for the operation of

 * the ipw hardware.  It assumes the buffer has all the bits for the

 * image and the caller is handling the memory allocation and clean up.

 stop master. typical delay - 0 */

 timeout is in msec, polled in 10-msec quanta */

 no one knows timing, for safety add some delay */

 no ucode (yet) */

 destroy DMA queues */

 reset sequence */

 reset PHY */

 enable ucode store */

 write ucode */

	/*

	 * @bug

	 * Do NOT set indirect address register once and then

	 * store data to indirect data register in the loop.

	 * It seems very reasonable, but in this case DINO do not

	 * accept ucode. It is essential to set address each time.

 load new ipw uCode */

 enable DINO */

 this is where the igx / win driver deveates from the VAP driver. */

 wait for alive response */

 poll for incoming data */

 alive_command_responce size is NOT multiple of 4 */

	/* disable DINO, otherwise for some reason

 Start the Dma */

 the DMA is already ready this would be a bug. */

 We don't support fw chunk larger than 64*8K */

 build DMA packet and queue up for sending */

		/* dma to chunk->address, the chunk->length bytes from data +

 Dma loading */

 Run the DMA and wait for the answer */

 stop nic */

 stop */

 prvHwStartNic  release ARC */

 enable power management */

 reset */

prvHwInitNic */

 set "initialization complete" bit to move adapter to D0 state */

 low-level PLL activation */

 wait for clock stabilization */

 assert SW reset */

 set "initialization complete" bit to move adapter to D0 state */

/* Call this function from process context, it will sleep in request_firmware.

 * Probe is an ok place to call this from.

 Clear the 'host command active' bit... */

 ask firmware_class module to get the boot firmware off disk */

 Fill the rx_used queue with _all_ of the Rx buffers */

		/* In the reset function, these buffers may have been allocated

	/* Set us so that we have processed and used all buffers, but have

 Ensure interrupts are disabled */

 ack pending interrupts */

 DMA the initial boot firmware into the device */

 kick start the device */

 wait for the device to finish its initial startup sequence */

 ack fw init done interrupt */

 DMA the ucode into the device */

 stop nic */

 DMA bss firmware into the device */

 Ensure interrupts are disabled */

 ack pending interrupts */

 kick start the device */

 wait for the device */

 ack fw init done interrupt */

 read eeprom data */

 initialize the eeprom region of sram */

 enable interrupts */

 Ensure our queue has valid packets */

 ack pending interrupts */

/*

 * DMA services

 *

 * Theory of operation

 *

 * A queue is a circular buffers with 'Read' and 'Write' pointers.

 * 2 empty entries always kept in the buffer to protect from overflow.

 *

 * For Tx queue, there are low mark and high mark limits. If, after queuing

 * the packet for Tx, free space become < low mark, Tx queue stopped. When

 * reclaiming packets (on 'tx done IRQ), if free space become > high mark,

 * Tx queue resumed.

 *

 * The IPW operates with six queues, one receive queue in the device's

 * sram, one transmit queue for sending commands to the device firmware,

 * and four transmit queues for data.

 *

 * The four transmit queues allow for performing quality of service (qos)

 * transmissions as per the 802.11 protocol.  Currently Linux does not

 * provide a mechanism to the user for utilizing prioritized queues, so

 * we only utilize the first data transmit queue (queue1).

/*

 * Driver allocates buffers of this size for Rx

/*

 * ipw_rx_queue_space - Return number of free slots available in queue.

 keep some buffer to not confuse full and empty queue */

 keep some reserve to not confuse empty and full situations */

/*

 * Initialize common DMA queue structure

 *

 * @param q                queue to init

 * @param count            Number of BD's to allocate. Should be power of 2

 * @param read_register    Address for 'read' register

 *                         (not offset within BAR, full address)

 * @param write_register   Address for 'write' register

 *                         (not offset within BAR, full address)

 * @param base_register    Address for 'base' register

 *                         (not offset within BAR, full address)

 * @param size             Address for 'size' register

 *                         (not offset within BAR, full address)

/*

 * Free one TFD, those at index [txq->q.last_used].

 * Do NOT advance any indexes

 *

 * @param dev

 * @param txq

 classify bd */

 nothing to cleanup after for host commands */

 sanity check */

 @todo issue fatal error, it is quite serious situation */

 unmap chunks if any */

/*

 * Deallocate DMA queue.

 *

 * Empty queue by removing and destroying all BD's.

 * Free all buffers.

 *

 * @param dev

 * @param q

 first, empty all BD's */

 free buffers belonging to queue itself */

 0 fill whole structure */

/*

 * Destroy all DMA queues and structures

 *

 * @param priv

 Tx CMD queue */

 Tx queues */

 First 3 bytes are manufacturer */

 Last bytes are random */

 clear multicast bit */

 set local assignment bit (IEEE802) */

 Another node is active in network */

 when other nodes drop out, we drop out */

	/* Firmware managed, reset only when NIC is restarted, so we have to

 Driver managed, reset with each association */

	/* If currently associated in B mode, restrict the maximum

	/* TODO: Verify that the rate is supported by the current rates

 Update the statistics */

	/* Calculate quality based on the following:

	 *

	 * Missed beacon: 100% = 0, 0% = 70% missed

	 * Rate: 60% = 1Mbs, 100% = Max

	 * Rx and Tx errors represent a straight % of total Rx/Tx

	 * RSSI: 100% = > -50,  0% = < -80

	 * Rx errors: 100% = 0, 0% = 50% missed

	 *

	 * The lowest computed quality is used.

	 *

/* Missed beacon behavior:

 * 1st missed -> roaming_threshold, just wait, don't do any scan/roam.

 * roaming_threshold -> disassociate_threshold, scan and roam for better signal.

 * Above disassociate threshold, give up and stop scanning.

		/* If associated and we've hit the missed

		 * beacon threshold, disassociate, turn

		/* If we are currently roaming, then just

		/* If we are not already roaming, set the ROAM

		 * bit in the status and kick off a scan.

		 * This can happen several times before we reach

		/* Stop scan to keep fw from getting

		 * stuck (only if we aren't roaming --

		 * otherwise we'll never scan more than 2 or 3

 Only userspace-requested scan completion events go out immediately */

/*

 * Handle host notification packet.

 * Called from interrupt routine

 clear out the station table */

 CONFIG_IPW2200_MONITOR */

 Do queued direct scans first */

					/* If a scan completed and we are in roam mode, then

					 * the scan that completed was the one requested as a

					 * result of entering roam... so, schedule the

 Don't schedule if we aborted the scan */

			/* Send an empty event to user space.

			 * We don't send the received data on the event because

			 * it would require us to do complex transcoding, and

			 * we want to minimise the work done in the irq handler

			 * Use a request to extract the data.

			 * Also, we generate this even for any scan, regardless

			 * on how the scan was initiated. User space can just

			 * sync on periodic scan to get fresh data...

/*

 * Destroys all DMA structures and initialise them again

 *

 * @param priv

 * @return error code

 @todo customize queue sizes */

 Tx CMD queue */

 Tx queue(s) */

 statistics */

/*

 * Reclaim Tx queue entries no more used by NIC.

 *

 * When FW advances 'R' index, all entries between old and

 * new 'R' index need to be reclaimed. As result, some free space

 * forms. If there is enough free space (> low mark), wake Tx queue.

 *

 * @note Need to protect against garbage in 'R' index

 * @param priv

 * @param txq

 * @param qindex

 * @return Number of used entries remains in the queue

/*

 * Rx theory of operation

 *

 * The host allocates 32 DMA target addresses and passes the host address

 * to the firmware at register IPW_RFDS_TABLE_LOWER + N * RFD_SIZE where N is

 * 0 to 31

 *

 * Rx Queue Indexes

 * The host/firmware share two index registers for managing the Rx buffers.

 *

 * The READ index maps to the first position that the firmware may be writing

 * to -- the driver can read up to (but not including) this position and get

 * good data.

 * The READ index is managed by the firmware once the card is enabled.

 *

 * The WRITE index maps to the last position the driver has read from -- the

 * position preceding WRITE is the last slot the firmware can place a packet.

 *

 * The queue is empty (no good data) if WRITE = READ - 1, and is full if

 * WRITE = READ.

 *

 * During initialization the host sets up the READ queue position to the first

 * INDEX position, and WRITE to the last (READ - 1 wrapped)

 *

 * When the firmware places a packet in a buffer it will advance the READ index

 * and fire the RX interrupt.  The driver can then query the READ index and

 * process as many packets as possible, moving the WRITE index forward as it

 * resets the Rx queue buffers with new memory.

 *

 * The management in the driver is as follows:

 * + A list of pre-allocated SKBs is stored in ipw->rxq->rx_free.  When

 *   ipw->rxq->free_count drops to or below RX_LOW_WATERMARK, work is scheduled

 *   to replensish the ipw->rxq->rx_free.

 * + In ipw_rx_queue_replenish (scheduled) if 'processed' != 'read' then the

 *   ipw->rxq is replenished and the READ INDEX is updated (updating the

 *   'processed' and 'read' driver indexes as well)

 * + A received packet is processed and handed to the kernel network stack,

 *   detached from the ipw->rxq.  The driver 'processed' index is updated.

 * + The Host/Firmware ipw->rxq is replenished at tasklet time from the rx_free

 *   list. If there are no allocated buffers in ipw->rxq->rx_free, the READ

 *   INDEX is not incremented and ipw->status(RX_STALLED) is set.  If there

 *   were enough free buffers and RX_STALLED is set it is cleared.

 *

 *

 * Driver sequence:

 *

 * ipw_rx_queue_alloc()       Allocates rx_free

 * ipw_rx_queue_replenish()   Replenishes rx_free list from rx_used, and calls

 *                            ipw_rx_queue_restock

 * ipw_rx_queue_restock()     Moves available buffers from rx_free into Rx

 *                            queue, updates firmware pointers, and updates

 *                            the WRITE index.  If insufficient rx_free buffers

 *                            are available, schedules ipw_rx_queue_replenish

 *

 * -- enable interrupts --

 * ISR - ipw_rx()             Detach ipw_rx_mem_buffers from pool up to the

 *                            READ INDEX, detaching the SKB from the pool.

 *                            Moves the packet buffer from queue to rx_used.

 *                            Calls ipw_rx_queue_restock to refill any empty

 *                            slots.

 * ...

 *

/*

 * If there are slots in the RX queue that  need to be restocked,

 * and we have free pre-allocated buffers, fill the ranks as much

 * as we can pulling from rx_free.

 *

 * This moves the 'write' index forward to catch up with 'processed', and

 * also updates the memory address in the firmware to reference the new

 * target buffer.

	/* If the pre-allocated buffer pool is dropping low, schedule to

 If we've added more space for the firmware to place data, tell it */

/*

 * Move all used packet from rx_used to rx_free, allocating a new SKB for each.

 * Also restock the Rx queue via ipw_rx_queue_restock.

 *

 * This is called as a scheduled work item (except for during initialization)

			/* We don't reschedule replenish work here -- we will

			 * call the restock method and if it still needs

/* Assumes that the skb field of the buffers in 'pool' is kept accurate.

 * If an SKB has been detached, the POOL needs to have its SKB set to NULL

 * This free routine walks the list of POOL entries and if SKB is set to

 * non NULL it is unmapped and freed

 Fill the rx_used queue with _all_ of the Rx buffers */

	/* Set us so that we have processed and used all buffers, but have

 B and G mixed */

 If we are limited to B modulations, bail at this point */

 G */

/* TODO: Look at sniffed packets in the air to determine if the basic rate

 * mask should ever be used -- right now all callers to add the scan rates are

	/* Verify that this network's capability is compatible with the

		/* If we are roaming, then ensure check if this is a valid

		/* If an ESSID has been configured then compare the broadcast

	/* If the old network rate is better than this one, don't bother

 Now go through and see if the requested network is valid... */

 Verify privacy compatibility */

 Filter out any incompatible freq / mode combinations */

	/* Ensure that the rates supported by the driver are compatible with

	/* TODO: Perform any further minimal comparititive tests.  We do not

	 * want to put too much policy logic here; intelligent scan selection

 Set up 'new' AP to this network */

		/* First pass through ROAM process -- look for a better

	/* Verify that this network's capability is compatible with the

		/* If we are roaming, then ensure check if this is a valid

		/* If an ESSID has been configured then compare the broadcast

	/* If the old network rate is better than this one, don't bother

	/* If this network has already had an association attempt within the

 Now go through and see if the requested network is valid... */

 Verify privacy compatibility */

 Filter out any incompatible freq / mode combinations */

 Filter out invalid channel in current GEO */

	/* Ensure that the rates supported by the driver are compatible with

	/* TODO: Perform any further minimal comparititive tests.  We do not

	 * want to put too much policy logic here; intelligent scan selection

 Set up 'new' AP to this network */

	/*

	 * For the purposes of scanning, we can set our wireless mode

	 * to trigger scans across combinations of bands, but when it

	 * comes to creating a new ad-hoc network, we have tell the FW

	 * exactly which band to use.

	 *

	 * We also have the possibility of an invalid channel for the

	 * chossen band.  Attempting to create a new ad-hoc network

	 * with an invalid channel for wireless mode will trigger a

	 * FW fatal error.

	 *

 Default */

 Default */

 Default */

 always 0 for BSS */

 0 for new key; previous value of counter (after fatal error) */

	/* Note: AES keys cannot be set for multiple times.

 TODO: Verify that this works... */

	/* Identify 'current FW band' and match it with the fixed

 A only */

 IEEE_A */

 Invalid fixed rate mask */

 2.4Ghz or Mixed */

 IEEE_B */

 Invalid fixed rate mask */

 IEEE_G */

 Invalid fixed rate mask */

 nop out the list */

				/* If this channel has already been

				 * added in scan, break from loop

				 * and this will be the first channel

				 * in the next scan.

	/* staying on passive channels longer than the DTIM interval during a

	 * scan, while associated, causes the firmware to cancel the scan

	 * without notification. Hence, don't stay on passive channels longer

	 * than the beacon interval.

 Use active scan by default. */

		/* NOTE:  The card will sit on this channel for this time

		 * period.  Scan aborts are timing sensitive and frequently

		 * result in firmware restarts.  As such, it is best to

		 * set a small dwell_time here and just keep re-issuing

		 * scans.  Otherwise fast channel hopping will not actually

		 * hop channels.

		 *

 CONFIG_IPW2200_MONITOR */

		/* Honor direct scans first, otherwise if we are roaming make

		 * this a direct scan for the current network.  Finally,

	/* This is called when wpa_supplicant loads and closes the driver

 make sure WPA is enabled */

/*

 * WE-18 support

 SIOCSIWGENIE */

 SIOCGIWGENIE */

 SIOCSIWAUTH */

		/*

		 * ipw2200 does not use these parameters

			/* HACK:

			 *

			 * wpa_supplicant calls set_wpa_enabled when the driver

			 * is loaded and unloaded, regardless of if WPA is being

			 * used.  No other calls are made which can be used to

			 * determine if encryption will be used or not prior to

			 * association being expected.  If encryption is not being

			 * used, drop_unencrypted is set to false, else true -- we

			 * can use this to determine if the CAP_PRIVACY_ON bit should

			 * be set.

			/* We only change SEC_LEVEL for open mode. Others

			 * are set by ipw_wpa_set_encryption.

 SIOCGIWAUTH */

		/*

		 * wpa_supplicant will control these internally

 SIOCSIWENCODEEXT */

			/* IPW HW can't build TKIP MIC,

 SIOCGIWENCODEEXT */

 SIOCSIWMLME */

 silently ignore */

 QoS */

/*

* get the modulation type of the current network or

* the card current mode

/*

* Handle management frame beacon and probe response

/*

* This function set up the firmware to support QoS. It sends

* IPW_CMD_QOS_PARAMETERS and IPW_CMD_WME_INFO

/*

* send IPW_CMD_WME_INFO to the firmware

/*

* Set the QoS parameter with the association request structure

/*

* handling the beaconing responses. if we get different QoS setting

* off the network from the associated setting, adjust the QoS

* setting

/*

* Initialize the setting of QoS global

/*

* map the packet priority to the right TX Queue

/*

* add QoS parameter to the TX command

/*

* background support to run QoS activate functionality

 CONFIG_IPW2200_QOS */

 RSN active */

	/*

	 * It is valid for our ieee device to support multiple modes, but

	 * when it comes to associating to a given network we have to choose

	 * just one mode.

 Clear the short preamble if we won't be supporting it */

 Clear capability bits that aren't used in Ad Hoc */

	/*

	 * If preemption is enabled, it is possible for the association

	 * to complete before we return from ipw_send_associate.  Therefore

	 * we have to be sure and update our priviate data first.

	/* The roaming process is as follows:

	 *

	 * 1.  Missed beacon threshold triggers the roaming process by

	 *     setting the status ROAM bit and requesting a scan.

	 * 2.  When the scan completes, it schedules the ROAM work

	 * 3.  The ROAM work looks at all of the known networks for one that

	 *     is a better network than the currently associated.  If none

	 *     found, the ROAM process is over (ROAM bit cleared)

	 * 4.  If a better network is found, a disassociation request is

	 *     sent.

	 * 5.  When the disassociation completes, the roam work is again

	 *     scheduled.  The second time through, the driver is no longer

	 *     associated, and the newly selected network is sent an

	 *     association request.

	 * 6.  At this point ,the roaming process is complete and the ROAM

	 *     status bit is cleared.

	/* If we are no longer associated, and the roaming bit is no longer

		/* First pass through ROAM process -- look for a better

 Second pass through ROAM process -- request association */

 Protect our use of the network_list */

 Use oldest network if the free list is empty */

 If there are no more slots, expire the oldest */

	/* If we reached the end of the list, then we don't have any valid

 Remove CCMP HDR */

 CCMP_HDR_LEN + CCMP_MIC_LEN */

 Remove IV */

 IV + ICV */

 We received data from the HW, so stop the watchdog */

	/* We only process data packets if the

 Advance skb->data to the start of the actual payload */

 Set the size of the skb to the size of the frame */

 HW decrypt will not clear the WEP bit, MIC, PN, etc. */

 libipw_rx succeeded, so it now owns the SKB */

 initial pull of some data */

 call it signed anyhow */

	/* Magic struct that slots into the radiotap header -- no reason

	 * to build this manually element by element, we can write it much

 We received data from the HW, so stop the watchdog */

	/* We only process data packets if the

	/* Libpcap 0.9.3+ can handle variable length radiotap, so we'll use

 FIXME: Should alloc bigger skb instead */

 copy the frame itself */

 always good to zero */

 total header+data */

 Big bitfield of all the fields we provide in radiotap */

 Zero the flags, we'll add to them as we go */

 Convert signal to DBM */

 Convert the channel data and set the flags */

 802.11a */

 802.11b */

 802.11g */

 set the rate in multiples of 500k/s */

 antenna number */

 Is this right? */

 set the preamble flag if we have it */

 Set the size of the skb to the size of the frame */

 libipw_rx succeeded, so it now owns the SKB */

 no LED during capture */

	/* First cache any information we need before we overwrite

 If the filter is set to not include Rx frames then return */

 We received data from the HW, so stop the watchdog */

 We only process data packets if the interface is open */

	/* Libpcap 0.9.3+ can handle variable length radiotap, so we'll use

 FIXME: Should alloc bigger skb instead */

 Copy the SKB since this is for the promiscuous side */

 copy the frame data to write after where the radiotap header goes */

 always good to zero */

 total header+data */

 Set the size of the skb to the size of the frame */

 Big bitfield of all the fields we provide in radiotap */

 Zero the flags, we'll add to them as we go */

 Convert to DBM */

 Convert the channel data and set the flags */

 802.11a */

 802.11b */

 802.11g */

 set the rate in multiples of 500k/s */

 antenna number */

 set the preamble flag if we have it */

	/* Filter incoming packets to determine if they are targeted toward

 Header: Dest. | Source    | BSSID */

 packets from our adapter are dropped (echo) */

 {broad,multi}cast packets to our BSSID go through */

 packets to our adapter go through */

 Header: Dest. | BSSID | Source */

 packets from our adapter are dropped (echo) */

 {broad,multi}cast packets to our BSS go through */

 packets to our adapter go through */

 out-of-order fragment */

	/* Comment this line now since we observed the card receives

	 * duplicate packets but the FCTL_RETRY bit is not set in the

	 * IBSS mode with fragmentation enabled.

		/* Set the size of the skb to the size of the full

 Advance past the ipw packet header to the 802.11 frame */

 Push the libipw_rx_stats before the 802.11 frame */

 Point raw at the libipw_stats */

/*

 * Main entry function for receiving a packet with 80211 headers.  This

 * should be called when ever the FW has notified us that there is a new

 * skb in the receive queue.

 802.11 frame */  {

				/* TODO: Check Ad-Hoc dest/source and make sure

				 * that we are actually parsing these packets

				 * correctly -- we should probably use the

				 * frame control of the packet and disregard

		/* For now we just don't re-use anything.  We can tweak this

		 * later to try and re-use notification packets and SKBs that

		/* If there are a lot of unsued frames, restock the Rx queue

 Backtrack one entry */

/*

 * ipw_sw_reset

 * @option: options to control different reset behaviour

 * 	    0 = reset everything except the 'disable' module_param

 * 	    1 = reset everything and print out driver info (for probe only)

 * 	    2 = reset everything

 Initialize module parameter values here */

	/* We default to disabling the LED code as right now it causes

 TODO: Validate that provided channel is in range */

 CONFIG_IPW2200_QOS */

 IPW2200/2915 is abled to do hardware fragmentation. */

 If power management is turned on, default to AC mode */

/*

 * This file defines the Wireless Extension handlers.  It does not

 * define any methods of hardware manipulation and relies on the

 * functions defined in ipw_main to provide the HW interaction.

 *

 * The exception to this is the use of the ipw_get_ordinal()

 * function used to poll the hardware vs. making unnecessary calls.

 *

 CONFIG_IPW2200_MONITOR */

 Network configuration changed -- force [re]association */

 if setting by freq convert to channel */

	/* If we are associated, trying to associate, or have a statically

 CONFIG_IPW2200_MONITOR */

	/* Free the existing firmware and reset the fw_loaded

 Values are in microsecond */

 54Mbs == ~27 Mb/s real (802.11g) */

 TODO: Find real max RSSI and stick here */

 Updated all three */

 TODO: Find real 'good' to 'bad' threshold value for RSSI */

 FIXME to real average level */

 Updated all three */

 Set the Wireless Extension versions */

 Event capability (kernel + driver) */

 we disable mandatory BSSID association */

 Network configuration changed -- force [re]association */

	/* If we are associated, trying to associate, or have a statically

 Network configuration changed -- force [re]association */

	/* If we are associated, trying to associate, or have a statically

 active */

 active */

 active */

 TODO: We should use semaphores or locks for access to priv */

 value = -1, fixed = 0 means auto only, so we should use all rates offered by AP */

 value = X, fixed = 1 means only rate X */

 value = X, fixed = 0 means all rates lower equal X */

 Now we should reassociate */

 Network configuration changed -- force [re]association */

 no auto select */

 no auto select */

 Normal active broadcast scan */

	/* In IBSS mode, we need to notify the firmware to update

 If not specified */

 If set all mask */

 If explicitly state all */

 Otherwise we don't support it */

	/* If the user hasn't specified a power management mode yet, default

 Network configuration changed -- force [re]association */

 Update the band LEDs */

 Switching from SHORT -> LONG requires a disassociation */

 Network configuration changed -- force [re]association */

 CONFIG_IPW2200_MONITOR */

	/* The SW reset bit might have been toggled on by the 'disable'

 Configuration likely changed -- force [re]association */

 Rebase the WE IOCTLs to zero for the handler array */

 CONFIG_IPW2200_MONITOR */

/*

 * Get wireless statistics.

 * Called by /proc/net/wireless

 * Also called by SIOCGIWSTATS

	/* if hw is disabled, then ipw_get_ordinal() can't be called.

	 * netdev->get_wireless_stats seems to be called before fw is

	 * initialized.  STATUS_ASSOCIATED will only be set if the hw is up

	 * and associated; if not associcated, the values are all meaningless

/*	if (ipw_get_ordinal(priv, IPW_ORD_STAT_TX_RETRY, &tx_retry, &len))

	goto fail_get_ordinal;

 net device stuff */

 TODO: See if 1 gives us FCS */

 1 -- fix for 256 */

/*

todo:



modify to send one tfd per fragment instead of using chunking.  otherwise

we need to heavily modify the libipw_skb_to_txb.

			/* XXX: ACK flag must be set for CCMP even if it

			 * is a multicast/broadcast packet, because CCMP

			 * group communication encrypted by GTK is

 No hardware encryption */

 CONFIG_IPW2200_QOS */

 payload */

 kick DMA */

 CONFIG_IPW2200_QOS */

 Filtering of fragment chains is done against the first fragment */

 after all, it's just an idea */

 802.11a */

 802.11b */

 802.11g */

 IRQ is disabled */

 Hardware disappeared */

 Shared interrupt */

 tell the device to stop sending interrupts */

 ack current interrupts */

 Cache INTA value for our tasklet */

 RF Kill is now disabled, so bring the device back up */

 we can not do an adapter restart while inside an irq lock */

 Ensure the rate is updated immediately */

 Cancel any queued work ... */

 Queue up another scan... */

 CONFIG_IPW2200_QOS */

	/* To match current functionality of ipw2100 (which works well w/

	 * various supplicants, we don't force a disassociate if the

 TODO: Mask out rates based on priv->rates_mask */

 configure supported rates */

 Mixed or 2.4Ghz */

	/* This is only called from ipw_up, which resets/reloads the firmware

	   so, we don't need to first disable the card before we configure

 initialize adapter address */

 set basic system config settings */

	/* Support Bluetooth if we have BT h/w on board, and user wants to.

 Set request-to-send threshold */

 CONFIG_IPW2200_QOS */

 final state transition to the RUN state */

 Set hardware WEP key if it is configured. */

/*

 * NOTE:

 *

 * These tables have been tested in conjunction with the

 * Intel PRO/Wireless 2200BG and 2915ABG Network Connection Adapters.

 *

 * Altering this values, using it on other hardware, or in geographies

 * not intended for resale of the above mentioned Intel adapters has

 * not been tested.

 *

 * Remember to update the table in README.ipw2200 when changing this

 * table.

 *

 Restricted */

 Custom US/Canada */

 Rest of World */

 Custom USA & Europe & High */

 Custom NA & Europe */

 Custom Japan */

 Custom */

 Europe */

 Custom Japan */

 Rest of World */

 High Band */

 Custom Europe */

 Europe */

 Europe */

 Age scan list entries found before suspend */

		/* Load the microcode, firmware, and eeprom.

			/* If configure to try and auto-associate, kick

		/* We had an error bringing up the hardware, so take it

	/* tried to restart and config the device for as long as our

	/* Wait up to 1s for status to change to not scanning and not

	 * associated (disassociation can take a while for a ful 802.11

 Attempt to disable the card */

	/* Wipe out the EXIT_PENDING status bit if we are not actually

 tell the device to stop sending interrupts */

 Clear all bits but the RF Kill */

 fill-out priv->ieee->bg_band */

 translate geo->bg to bg_band.channels */

			/* No equivalent for LIBIPW_CH_80211H_RULES,

			   LIBIPW_CH_UNIFORM_SPREADING, or

 point at bitrate info */

 fill-out priv->ieee->a_band */

 translate geo->a to a_band.channels */

			/* No equivalent for LIBIPW_CH_80211H_RULES,

			   LIBIPW_CH_UNIFORM_SPREADING, or

 point at bitrate info */

 With that information in place, we can now register the wiphy... */

 PCI driver stuff */

 BG */

 BG */

 ABG */

 ABG */

 required last entry */

 put in device directory */

	/* We disable the RETRY_TIMEOUT register (0x41) to keep

 CONFIG_IPW2200_QOS */

 make sure all works are inactive */

 Free MAC hash list for ADHOC */

 wiphy_unregister needs to be here, before free_libipw */

 Take down the device; powers it off, etc. */

 Remove the PRESENT state of the device */

	/*

	 * Suspend/Resume resets the PCI configuration space, so we have to

	 * re-disable the RETRY_TIMEOUT register (0x41) to keep PCI Tx retries

	 * from interfering with C3 CPU state. pci_restore_state won't help

	 * here since it only restores the first 64 bytes pci config header.

	/* Set the device back into the PRESENT state; this will also wake

 Bring the device back up */

 Take down the device; powers it off, etc. */

 driver initialization stuff */

 CONFIG_IPW2200_QOS */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



  Copyright(c) 2005 Intel Corporation. All rights reserved.





  Contact Information:

  Intel Linux Wireless <ilw@linux.intel.com>

  Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497



	/* Driver needs to initialize the geography map before using

			/* NOTE: If G mode is currently supported but

			 * this is a B only channel, we don't see it

	/* Driver needs to initialize the geography map before using

	/* Driver needs to initialize the geography map before using

	/* Driver needs to initialize the geography map before using

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************



  Copyright(c) 2004-2005 Intel Corporation. All rights reserved.



  Portions of this file are based on the WEP enablement code provided by the

  Host AP project hostap-drivers v0.1.3

  Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen

  <j@w1.fi>

  Copyright (c) 2002-2003, Jouni Malinen <j@w1.fi>





  Contact Information:

  Intel Linux Wireless <ilw@linux.intel.com>

  Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497



 For rates */

 First entry *MUST* be the AP MAC address */

 Remaining entries will be displayed in the order we provide them */

 Add the ESSID */

 Add the protocol name */

 Add mode */

 Add channel and frequency */

 Note : userspace automatically computes channel using iwrange */

 Add encryption capability */

 Add basic and extended rates */

	/* Rate : stuffing multiple values in a single event require a bit

 Those two flags are ignored... */

 Bit rate given in 500 kb/s units (+ 0x80) */

 Add new value to event */

 Bit rate given in 500 kb/s units (+ 0x80) */

 Add new value to event */

 Check if we added any rate */

 Add quality statistics */

	/* Add EXTRA: Age to display seconds since last beacon/probe response

 Add spectrum management information */

		/* Check all the keys to see if any are still configured,

		/* changing to use WEP; deinit previously used algorithm

 take WEP into use */

 If a new key was provided, set it up */

		/* This ensures a key will be activated if no key is

 Set a default key of all 0 */

 No key data - just set the default TX key index */

	/* For now we just support WEP, so only set that security level...

 40 and 104 bit WEP */

 some Cisco APs use idx>0 for unicast in dynamic WEP */

 Don't set sec level for group keys. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Original code based Host AP (software wireless LAN access point) driver

 * for Intersil Prism2/2.5/3 - hostap.o module, common routines

 *

 * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen

 * <j@w1.fi>

 * Copyright (c) 2002-2003, Jouni Malinen <j@w1.fi>

 * Copyright (c) 2004-2005, Intel Corporation

 Called only as a tasklet (software IRQ) */

 Called only as a tasklet (software IRQ) */

 Reserve enough space to fit maximum frame length */

 LLC */  +

 alignment */  +

 WEP */  + ETH_ALEN 
		/* received a fragment of a frame for which the head fragment

 Called only as a tasklet (software IRQ) */

/* libipw_rx_frame_mgtmt

 *

 * Responsible for handling management control frames

 *

/*

  hostap_update_sta_ps(ieee, (struct hostap_libipw_hdr_4addr *)

			/* Process beacon frames also in kernel driver to

		/* send management frames to the user space daemon for

 See IEEE 802.1H for LLC/SNAP encapsulation/decapsulation */

 Ethernet-II snap header (RFC1042 for most EtherTypes) */

 Bridge-Tunnel header (for EtherTypes ETH_P_AARP and ETH_P_IPX) */

 No encapsulation header if EtherType < 0x600 (=length) */

 Called by libipw_rx_frame_decrypt */

 check that the frame is unicast frame to us */

 ToDS frame with own addr BSSID and DA */

 FromDS frame with own addr as DA */

 check for port access entity Ethernet type */

 Called only as a tasklet (software IRQ), by libipw_rx */

 Called only as a tasklet (software IRQ), by libipw_rx */

/* All received frames are sent to this function. @skb contains the frame in

 * IEEE 802.11 format, i.e., in the format it was sent over air.

	/* Put this code here so that we avoid duplicating it in all

 defined in iw_handler.h */

 If spy monitoring on */

 Update spy records */

 IW_WIRELESS_SPY */

 CONFIG_WIRELESS_EXT */

 Top two-bits of byte 3 are the key index */

		/* ieee->crypt[] is WEP_KEY (4) in length.  Given that keyidx

		 * is only allowed 2-bits of storage, no value of keyidx can

		 * be provided via above code that would result in keyidx

		/* Use station specific key to override default keys if the

		 * receiver address is a unicast address ("individual RA"). If

		 * bcrx_sta_key parameter is set, station specific key is used

		 * even with broad/multicast targets (this is against IEEE

		 * 802.11, but makes it easier to use different keys with

		/* allow NULL decrypt to indicate an station specific override

			/* This seems to be triggered by some (multicast?)

			 * frames from other than current BSS, so just drop the

			 * frames silently instead of filling system log with

			/* TODO: could inform hostapd about this so that it

 drop duplicate 802.11 retransmissions (IEEE 802.11 Chap. 9.29) */

 Data frame - extract src/dst addresses */

 Frame from BSSID of the AP for which we are a client */

	/* Nullfunc frames may have PS-bit set, so they must be passed to

 skb: hdr + (possibly fragmented, possibly encrypted) payload */

 skb: hdr + (possibly fragmented) plaintext payload */

 PR: FIXME: hostap has additional conditions in the "if" below:

 ieee->host_decrypt && (fc & IEEE80211_FCTL_PROTECTED) &&

			/* copy first fragment (including full headers) into

			/* append frame payload to the end of the fragment

			/* more fragments expected - leave the skb in fragment

			 * cache for now; it will be delivered to upper layers

		/* this was the last fragment and the frame will be

	/* skb: hdr + (possible reassembled) full MSDU payload; possibly still

ieee->ieee802_1x && */

			/* pass unencrypted EAPOL frames even if encryption is

	/* If the frame was decrypted in hardware, we may need to strip off

 Top two-bits of byte 3 are the key index */

		/* To strip off any security data which appears before the

		 * payload, we simply increase hdrlen (as the header gets

		 * chopped off immediately below). For the security data which

 4 byte IV */

 4 byte ICV */

 4 byte IV, 4 byte ExtIV */

 8 byte MIC, 4 byte ICV */

 8 byte CCMP header */

 8 byte MIC */

 skb: hdr + (possible reassembled) full plaintext payload */

	/* If IEEE 802.1X is used, check whether the port is authorized to send

				/* Send IEEE 802.1X frames to the user

 convert hdr + possible LLC headers into Ethernet header */

		/* remove RFC1042 or Bridge-Tunnel encapsulation and

 Leave Ethernet header part of hdr and full payload */

		/* Non-standard frame: get addr4 from its bogus location after

			/* copy multicast frame both to the higher layers and

			/* send frame directly to the associated STA using

 send to wireless media */

 skb2->network_header += ETH_HLEN; */

 802.11 crc not sufficient */

			/* netif_rx always succeeds, but it might drop

			 * the packet.  If it drops the packet, we log that

	/* Returning 0 indicates to caller that we have not handled the SKB--

	 * so it is still allocated and can be used again by underlying

/* Filter out unrelated packets, call libipw_rx[_mgt]

 * This function takes over the skb, it should not be used again after calling

 our BSS and not from/to DS */

 promisc: get all */

 to us */

 mcast */

 our BSS (== from our AP) and from DS */

 promisc: get all */

 to us */

 mcast */

 not our own packet bcasted from AP */

 ? */

/*

* Make the structure we read from the beacon packet to have

* the right values

/*

 * Parse a QoS parameter element

/*

 * Parse a QoS information element

/*

 * Write QoS parameters from the ac parameters.

/*

 * we have a generic data element which it may contain QoS information or

 * parameters element. check the information element length to decide

 * which type to read

			/* We stop processing but don't return an error here

			 * because some misbehaviour APs break this rule. ie.

 802.11h */

network->atim_window = le16_to_cpu(frame->aid) & (0x3FFF);

 for A band (No DS info) */

**************************************************/

 Pull out fixed field data */

 Where to pull this? beacon->listen_interval; */

 for A band (No DS info) */

	/* A network is only a duplicate if the channel, BSSID, and ESSID

	 * all match.  We treat all <hidden> with the same BSSID and channel

	/* We only update the statistics if they were created by receiving

	 * the network information on the actual channel the network is on.

	 *

	 * This keeps beacons received on neighbor channels from bringing

 dst->last_associate is not overwritten */

	/* The network parsed correctly -- so now we scan our known networks

	 * to see if we can find it in our list.

	 *

	 * NOTE:  This search is definitely not optimized.  Once its doing

	 *        the "right thing" we'll optimize it for efficiency if

	/* Search for this entry in the list and update it if it is

	/* If we didn't find a match, then get a new network slot to initialize

 If there are no more slots, expire the oldest */

 Otherwise just pull from the free list */

 SPDX-License-Identifier: GPL-2.0-only

/*******************************************************************************



  Copyright(c) 2004-2005 Intel Corporation. All rights reserved.



  Portions of this file are based on the WEP enablement code provided by the

  Host AP project hostap-drivers v0.1.3

  Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen

  <j@w1.fi>

  Copyright (c) 2002-2003, Jouni Malinen <j@w1.fi>





  Contact Information:

  Intel Linux Wireless <ilw@linux.intel.com>

  Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497



		/* Fill-out wiphy structure bits we know...  Not enough info

		   here to call set_wiphy_dev or set MAC address or channel info

 Default fragmentation threshold is maximum payload size */

 Default to enabling full open WEP with host based encrypt/decrypt */

	/* Host fragmentation in Open mode. Default is enabled.

	 * Note: host fragmentation is always enabled if host encryption

	 * is enabled. For cards can do hardware encryption, they must do

	 * hardware fragmentation as well. So we don't need a variable

 Default to supporting 802.1x */

 free cfg80211 resources */

 CONFIG_LIBIPW_DEBUG */

 CONFIG_LIBIPW_DEBUG */

 CONFIG_LIBIPW_DEBUG */

 CONFIG_LIBIPW_DEBUG */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2005 - 2011 Intel Corporation. All rights reserved.

 *

 * Contact Information:

 *  Intel Linux Wireless <ilw@linux.intel.com>

 * Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

 *

/*

 * il3945_rate_scale_flush_wins - flush out the rate scale wins

 *

 * Returns the number of wins that have gathered data but were

 * not flushed.  If there were any that were not flushed, then

 * reschedule the rate flushing routine.

	/*

	 * For each rate, if we have collected data on that rate

	 * and it has been more than RATE_WIN_FLUSH

	 * since we flushed, clear out the gathered stats

 msec */

 msec */

 Number of packets Rx'd since last time this timer ran */

 Determine packets per second */

	/* If there weren't any unflushed entries, we don't schedule the timer

/*

 * il3945_collect_tx_data - Update the success/failure sliding win

 *

 * We keep a sliding win of the last 64 packets transmitted

 * at this rate.  win->data contains the bitmask of successful

 * packets.

	/*

	 * Keep track of only the latest 62 tx frame attempts in this rate's

	 * history win; anything older isn't really relevant any more.

	 * If we have filled up the sliding win, drop the oldest attempt;

	 * if the oldest attempt (highest bit in bitmap) shows "success",

	 * subtract "1" from the success counter (this is the main reason

	 * we keep these bitmaps!).

 remove earliest */

 Increment frames-attempted counter */

		/* Shift bitmap by one frame (throw away oldest history),

		 * OR in "1", and increment "success" if this

 Calculate current success ratio, avoid divide-by-0! */

 Calculate average throughput, if we have enough history. */

 Tag this win as having been updated */

/*

 * Called after adding a new station to initialize rate scaling

 default to just 802.11b */

	/* TODO: what is a good starting rate for STA? About middle? Maybe not

	 * the lowest or the highest rate.. Could consider using RSSI from

	 * previous packets? Need to have IEEE 802.1X auth succeed immediately

 For 5 GHz band it start at IL_FIRST_OFDM_RATE */

 rate scale requires free function to be implemented */

	/*

	 * Be careful not to use any members of il3945_rs_sta (like trying

	 * to use il_priv to print out debugging) since it may not be fully

	 * initialized at this point.

/*

 * il3945_rs_tx_status - Update rate control values based on Tx results

 *

 * NOTE: Uses il_priv->retry_rate for the # of retries attempted by

 * the hardware for each rate.

 Sanity Check for retries */

 Treat uninitialized rate scaling data same as non-existing. */

	/*

	 * Update the win for each rate.  We determine which rates

	 * were Tx'd based on the total number of retries vs. the number

	 * of retries configured for each rate -- currently set to the

	 * il value 'retry_rate' vs. rate specific

	 *

	 * On exit from this while loop last_idx indicates the rate

	 * at which the frame was finally transmitted (or failed if no

	 * ACK)

		/* Update this rate accounting for as many retries

 Update the last idx win with success/failure based on ACK */

	/* We updated the rate scale win -- if its been more than

	 * flush_time since the last run, schedule the flush

	/* 802.11A walks to the next literal adjacent rate in

 Find the previous rate that is in the rate mask */

 Find the next rate that is in the rate mask */

/*

 * il3945_rs_get_rate - find the rate for the requested packet

 *

 * Returns the ieee80211_rate structure allocated by the driver.

 *

 * The rate control algorithm has no internal mapping between hw_mode's

 * rate ordering and the rate ordering used by the rate control algorithm.

 *

 * The rate control algorithm uses a single table of rates that goes across

 * the entire A/B/G spectrum vs. being limited to just one particular

 * hw_mode.

 *

 * As such, we can't convert the idx obtained below into the hw_mode's

 * rate table and must reference the driver allocated rate table

 *

 Treat uninitialized rate scaling data same as non-existing. */

 get user max rate if set */

	/* for recent assoc, choose best rate regarding

	 * to rssi value

 force user max rate if set by user */

 Can't calculate this yet; not enough history */

 If user set max rate, dont allow higher than user constrain */

 Collect Measured throughputs of adjacent rates */

 Low success ratio , need to drop the rate */

		/* No throughput measured yet for adjacent rates,

		/* Both adjacent throughputs are measured, but neither one has

		 * better throughput; we're using the best rate, don't change

 At least one of the rates has better throughput */

			/* High rate has better throughput, Increase

				/* Lower rate has better

	/* Sanity check; asked for decrease, but success rate or throughput

 Decrease rate */

 Increase rate */

 No change */

/*

 * Initialization of rate scaling information is done by driver after

 * the station is added. Since mac80211 calls this function before a

 * station is added we ignore it.

 TODO: this always does G, not a regression */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2003 - 2011 Intel Corporation. All rights reserved.

 *

 * Contact Information:

 *  Intel Linux Wireless <ilw@linux.intel.com>

 * Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

 *

/*

 * il_verify_inst_sparse - verify runtime uCode image in card vs. host,

 *   using sample data 100 bytes apart.  If these sample points are good,

 *   it's a pretty good bet that everything between them is good, too.

 read data comes through single port, auto-incr addr */

		/* NOTE: Use the debugless read so we don't flood kernel log

/*

 * il4965_verify_inst_full - verify runtime uCode image in card vs. host,

 *     looking at all data.

 read data comes through single port, auto-incr addr */

		/* NOTE: Use the debugless read so we don't flood kernel log

/*

 * il4965_verify_ucode - determine which instruction image is in SRAM,

 *    and verify its contents

 Try bootstrap */

 Try initialize */

 Try runtime/protocol */

	/* Since nothing seems to match, show first several data entries in

	 * instruction SRAM, so maybe visual inspection will give a clue.

/******************************************************************************

 *

 * EEPROM related functions

 *

/*

 * The device's EEPROM semaphore prevents conflicts between driver and uCode

 * when accessing the EEPROM; each access is a series of pulses to/from the

 * EEPROM chip, not a single event, so even reads could conflict if they

 * weren't arbitrated by the semaphore.

 Request semaphore */

 See if we got it */

 Send led command */

 Set led register off */

 Highest firmware API version supported */

 Lowest firmware API version supported */

 check contents of special bootstrap uCode SRAM */

 verify BSM SRAM contents */

/*

 * il4965_load_bsm - Load bootstrap instructions

 *

 * BSM operation:

 *

 * The Bootstrap State Machine (BSM) stores a short bootstrap uCode program

 * in special SRAM that does not power down during RFKILL.  When powering back

 * up after power-saving sleeps (or during initial uCode load), the BSM loads

 * the bootstrap program into the on-board processor, and starts it.

 *

 * The bootstrap program loads (via DMA) instructions and data for a new

 * program from host DRAM locations indicated by the host driver in the

 * BSM_DRAM_* registers.  Once the new program is loaded, it starts

 * automatically.

 *

 * When initializing the NIC, the host driver points the BSM to the

 * "initialize" uCode image.  This uCode sets up some internal data, then

 * notifies host via "initialize alive" that it is complete.

 *

 * The host then replaces the BSM_DRAM_* pointer values to point to the

 * normal runtime uCode instructions and a backup uCode data cache buffer

 * (filled initially with starting data values for the on-board processor),

 * then triggers the "initialize" uCode to load and launch the runtime uCode,

 * which begins normal operation.

 *

 * When doing a power-save shutdown, runtime uCode saves data SRAM into

 * the backup data cache in DRAM before SRAM is powered down.

 *

 * When powering back up, the BSM loads the bootstrap program.  This reloads

 * the runtime uCode instructions and the backup data cache into SRAM,

 * and re-launches the runtime uCode from where it left off.

 make sure bootstrap program is no larger than BSM's SRAM size */

	/* Tell bootstrap uCode where to find the "Initialize" uCode

	 *   in host DRAM ... host DRAM physical address bits 35:4 for 4965.

	 * NOTE:  il_init_alive_start() will replace these values,

	 *        after the "initialize" uCode has run, to point to

	 *        runtime/protocol instructions and backup data cache.

 Fill BSM memory with bootstrap instructions */

 Tell BSM to copy from BSM SRAM into instruction SRAM, when asked */

	/* Load bootstrap code into instruction SRAM now,

 Wait for load of bootstrap uCode to finish */

	/* Enable future boot loads whenever power management unit triggers it

/*

 * il4965_set_ucode_ptrs - Set uCode address location

 *

 * Tell initialization uCode where to find runtime uCode.

 *

 * BSM registers initially contain pointers to initialization uCode.

 * We need to replace them to load runtime uCode inst and data,

 * and to save runtime data when powering down.

 bits 35:4 for 4965 */

 Tell bootstrap uCode where to find image to load */

	/* Inst byte count must be last to set up, bit 31 signals uCode

/*

 * il4965_init_alive_start - Called after N_ALIVE notification received

 *

 * Called after N_ALIVE notification received from "initialize" uCode.

 *

 * The 4965 "initialize" ALIVE reply contains calibration data for:

 *   Voltage, temperature, and MIMO tx gain correction, now stored in il

 *   (3945 does not contain this data).

 *

 * Tell "initialize" uCode to go ahead and load the runtime uCode.

	/* Bootstrap uCode has loaded initialize uCode ... verify inst image.

	 * This is a paranoid check, because we would not have gotten the

		/* Runtime instruction load was bad;

 Calculate temperature */

	/* Send pointers to protocol/runtime uCode image ... init code will

	 * load and launch runtime uCode, which will send us another "Alive"

		/* Runtime instruction load won't happen;

 write radio config values to register */

 set CSR_HW_CONFIG_REG for uCode use */

/* Reset differential Rx gains in NIC to prepare for chain noise calibration.

 * Called after every association, but this runs only once!

 clear data for chain noise calibration algorithm */

/*

 * il4965_get_voltage_compensation - Power supply voltage comp for txpower

 *

 * Determines power supply voltage compensation for txpower calculations.

 * Returns number of 1/2-dB steps to subtract from gain table idx,

 * to compensate for difference between power supply voltage during

 * factory measurements, vs. current power supply voltage.

 *

 * Voltage indication is higher for lower voltage.

 * Lower voltage requires more gain (lower gain table idx).

/*

 * il4965_interpolate_chan - Interpolate factory measurements for one channel

 *

 * Interpolates factory measurements from the two sample channels within a

 * sub-band, to apply to channel of interest.  Interpolation is proportional to

 * differences in channel frequencies, which is proportional to differences

 * in channel number.

/* bit-rate-dependent table to prevent Tx distortion, in half-dB units,

 OFDM SISO 20 MHz */

 OFDM MIMO 20 MHz */

 OFDM SISO 40 MHz */

 OFDM MIMO 40 MHz */

 CCK */

/* Thermal compensation values for txpower for various frequency ranges ...

 group 0 5.2, ch  34-43 */

 group 1 5.2, ch  44-70 */

 group 2 5.2, ch  71-124 */

 group 3 5.2, ch 125-200 */

 group 4 2.4, ch   all */

 5.2GHz power gain idx table */

 highest txpower */

 2.4GHz power gain idx table */

 highest txpower */

	/* tx_power_user_lmt is in dBm, convert to half-dBm (half-dB units

 Get current (RXON) channel, band, width */

	/* get txatten group, used to select 1) thermal txpower adjustment

	/* hardware txpower limits ...

	/* regulatory txpower limits ... reg_limit values are in half-dBm,

	/* Interpolate txpower calibration values for this channel,

 calculate tx gain adjustment based on power supply voltage */

 get current temperature (Celsius) */

	/* select thermal txpower adjustment params, based on channel group

 get per-chain txpower values from factory measurements */

		/* txgain adjustment (in half-dB steps) based on difference

 for each of 33 bit-rates (including 1 for CCK) */

		/* for mimo, reduce each chain's txpower by half

		 * (3dB, 6 steps), so total output power is regulatory

 find txpower limit, either hardware or regulatory */

		/* reduce user's txpower request if necessary

 for each of 2 Tx chains (radio transmitters) */

 calculate idx; higher idx means lower txpower */

/*			D_TXPOWER("calculated txpower idx %d\n",

 adjust 5 GHz idx to support negative idxes */

 CCK, rate 32, reduce txpower for CCK */

 stay within the table! */

 fill txpower command for this rate/chain */

 for each chain */

 for each rate */

/*

 * il4965_send_tx_power - Configure the TXPOWER level user limit

 *

 * Uses the active RXON for channel, band, and characteristics (ht40, high)

 * The power limit is taken from il->tx_power_user_lmt.

 cast away the const for active_rxon in this function */

 always get timestamp with Rx frame */

	/*

	 * receive commit_rxon request

	 * abort any previous channel switch if still in process

	/* If we don't need to send a full RXON, we can use

	 * il_rxon_assoc_cmd which is used to reconfigure filter

		/*

		 * We do not commit tx power settings while channel changing,

		 * do it now if tx power changed.

	/* If we are currently associated and the new config requires

	 * an RXON_ASSOC and the new config wants the associated mask enabled,

	 * we must clear the associated from the active configuration

		/* If the mask clearing failed then we set

	/* Apply the new configuration

	 * RXON unassoc clears the station table in uCode so restoration of

	 * stations is needed after it (the RXON command) completes

		/* Apply the new configuration

		 * RXON assoc doesn't clear the station table in uCode,

	/* If we issue a new RXON command which required a tune then we must

	/*

	 * calculate the ucode channel switch time

	 * adding TSF as one of the factor for when to switch

/*

 * il4965_txq_update_byte_cnt_tbl - Set up entry in Tx byte-count array

 Set up byte count within first 256 entries */

 If within first 64 entries, duplicate at end */

/*

 * il4965_hw_get_temperature - return the calibrated temperature (in Kelvin)

 *

 * A return of <0 indicates bogus data in the stats

	/*

	 * Temperature is only 23 bits, so sign extend out to 32.

	 *

	 * NOTE If we haven't received a stats notification yet

	 * with an updated temperature, use R4 provided to us in the

	 * "initialize" ALIVE response.

	/* Calculate temperature in degrees Kelvin, adjust by 97%.

 Adjust Txpower only if temperature variance is greater than threshold. */

/*

 * il4965_is_temp_calib_needed - determines if new calibration is needed

 *

 * If the temperature changed has changed sufficiently, then a recalibration

 * is needed.

 *

 * Assumes caller will replace il->last_temperature once calibration

 * executed.

 get absolute value */

	/*

	 * Since setting the RXON may have been deferred while

	 * performing the scan, fire one off if needed

	/* the chain noise calibration will enabled PM upon completion

	 * If chain noise has already been run, then we need to enable

 Enable Rx differential gain and sensitivity calibrations */

 The following should be done only at AP bring up */

 RXON - unassoc (to set timing command) */

 RXON Timing */

 AP has all antennas */

 need to send beacon cmd before committing assoc RXON! */

 restore RXON assoc */

	/*

	 * Force use of chains B and C for scan RX on 5 GHz band

	 * because the device has off-channel reception on chain A.

 Module firmware */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2003 - 2011 Intel Corporation. All rights reserved.

 *

 * Contact Information:

 *  Intel Linux Wireless <ilw@linux.intel.com>

 * Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

 *

 Send led command */

/*

 * Parameter order:

 *   rate, prev rate, next rate, prev tgg rate, next tgg rate

 *

 * If there isn't a valid next or previous rate then INV is used which

 * maps to RATE_INVALID

 *

  1mbps */

  2mbps */

5.5mbps */

 11mbps */

  6mbps */

  9mbps */

 12mbps */

 18mbps */

 24mbps */

 36mbps */

 48mbps */

 54mbps */

 1 = enable the il3945_disable_events() function */

/*

 * il3945_disable_events - Disable selected events in uCode event log

 *

 * Disable an event by writing "1"s into "disable"

 *   bitmap in SRAM.  Bit position corresponds to Event # (id/type).

 *   Default values of 0 enable uCode events to be logged.

 * Use for only special debugging.  This function is just a placeholder as-is,

 *   you'll need to provide the special bits! ...

 SRAM address of event log header */

 SRAM address of event-disable bitmap array */

 # of u32 entries in array */

   31 -    0  Event id numbers */

   63 -   32 */

   95 -   64 */

  127 -   96 */

  159 -  128 */

  191 -  160 */

  223 -  192 */

  255 -  224 */

  287 -  256 */

  319 -  288 */

  351 -  320 */

  383 -  352 */

  415 -  384 */

  447 -  416 */

  479 -  448 */

  511 -  480 */

  543 -  512 */

  575 -  544 */

  607 -  576 */

  639 -  608 */

  671 -  640 */

  703 -  672 */

  735 -  704 */

  767 -  736 */

  799 -  768 */

  831 -  800 */

  863 -  832 */

  895 -  864 */

  927 -  896 */

  959 -  928 */

  991 -  960 */

 1023 -  992 */

 1055 - 1024 */

 1087 - 1056 */

 1119 - 1088 */

 1151 - 1120 */

 1183 - 1152 */

 1215 - 1184 */

 1247 - 1216 */

 1279 - 1248 */

 1311 - 1280 */

 1343 - 1312 */

 1375 - 1344 */

 1407 - 1376 */

 1439 - 1408 */

 1471 - 1440 */

 1503 - 1472 */

/*

 * get ieee prev rate from rate scale table.

 * for A and B mode we need to overright prev

 * value

/*

 * il3945_tx_queue_reclaim - Reclaim Tx queue entries already Tx'd

 *

 * When FW advances 'R' idx, all entries between old and new 'R' idx

 * need to be reclaimed. As result, some free space forms. If there is

 * enough free space (> low mark), wake the stack that feeds us.

/*

 * il3945_hdl_tx - Handle Tx response

	/*

	 * Firmware will not transmit frame on passive channel, if it not yet

	 * received some valid frame on that channel. When this error happen

	 * we have to wait until firmware will unblock itself i.e. when we

	 * note received beacon or other frame. We unblock queues in

	 * il3945_pass_packet_to_mac80211 or in il_mac_bss_info_changed.

 Fill the MRR chain with some info about on-chip retransmissions */

 add final attempt */

 tx_status->rts_retry_count = tx_resp->failure_rts; */

/*****************************************************************************

 *

 * Intel PRO/Wireless 3945ABG/BG Network Connection

 *

 *  RX handler implementations

 *

 reset accumulative stats for "no-counter" type stats */

/******************************************************************************

 *

 * Misc. internal state and helper functions

 *

 This is necessary only for a number of stats, see the caller. */

	/* Filter incoming packets to determine if they are targeted toward

 Header: Dest. | Source    | BSSID */

 packets to our IBSS update information */

 Header: Dest. | AP{BSSID} | Source */

 packets to our IBSS update information */

 We received data from the HW, so stop the watchdog */

 We only process data packets if the interface is open */

	/* If frame is small enough to fit into skb->head, copy it

	 * and do not consume a full page

 set the preamble flag if appropriate */

 Convert 3945's rssi indicator to dBm */

/*

 * il3945_hw_txq_free_tfd - Free one TFD, those at idx [txq->q.read_ptr]

 *

 * Does NOT advance any idxes

 sanity check */

 @todo issue fatal error, it is quite serious situation */

 Unmap tx_cmd */

 unmap chunks if any */

 free SKB */

 can be called from irqs-disabled context */

/*

 * il3945_hw_build_tx_cmd_rate - Add rate portion to TX_CMD:

 *

	/* We need to figure out how to get the sta->supp_rates while

 Set retry limit on DATA packets and Probe Responses */

 Set retry limit on RTS packets */

 OFDM */

 CCK */

/*

 * (for documentation purposes)

 * to set power to V_AUX, do



		if (pci_pme_capable(il->pci_dev, PCI_D3cold)) {

			il_set_bits_mask_prph(il, APMG_PS_CTRL_REG,

					APMG_PS_CTRL_VAL_PWR_SRC_VAUX,

					~APMG_PS_CTRL_MSK_PWR_SRC);



			_il_poll_bit(il, CSR_GPIO_IN,

				     CSR_GPIO_IN_VAL_VAUX_PWR_SRC,

				     CSR_GPIO_IN_BIT_AUX_POWER, 5000);

		}

 fake read to flush all prev I/O */

 bypass mode */

 RA 0 is active */

 all 6 fifo are active */

/*

 * il3945_txq_ctx_reset - Reset TX queue context

 *

 * Destroys all DMA structures and initialize them again

 allocate tx queue structure */

 Tx CMD queue */

 Tx queue(s) */

/*

 * Start up 3945's basic functionality after it has been reset

 * (e.g. after platform boot, or shutdown via il_apm_stop())

 * NOTE:  This does not load uCode nor start the embedded processor

 Clear APMG (NIC's internal power management) interrupts */

 Reset radio chip */

 Determine HW type */

 Allocate the RX queue, or reset if it is already allocated */

	/* Look at using this instead:

	   rxq->need_update = 1;

	   il_rx_queue_update_write_ptr(il, rxq);

/*

 * il3945_hw_txq_ctx_free - Free TXQ Context

 *

 * Destroy all TX DMA queues and structures

 Tx queues */

 free tx queue structure */

 stop SCD */

 reset TFD queues */

/*

 * il3945_hw_reg_adjust_power_by_temp

 * return idx delta into power gain settings table

/*

 * il3945_hw_reg_temp_out_of_range - Keep temperature in sane range

/*

 * il3945_hw_reg_txpower_get_temperature

 * get the current temperature by reading from NIC

	/* driver's okay range is -260 to +25.

 handle insane temp reading */

		/* if really really hot(?),

 else use most recent "sane" value from driver */

 raw, not "human readable" */

/* Adjust Txpower only if temperature variance is greater than threshold.

 *

/*

 * il3945_is_temp_calib_needed - determines if new calibration is needed

 *

 * records new temperature in tx_mgr->temperature.

 * replaces tx_mgr->last_temperature *only* if calib needed

 get absolute value */

 if we don't need calibration, *don't* update last_temperature */

	/* assume that caller will actually do calib ...

/* radio and DSP power table, each step is 1/2 dB.

 2.4 GHz, highest power */

 2.4 GHz, lowest power */

 5.x GHz, highest power */

 5.x GHz, lowest power */

 Kick off thermal recalibration check every 60 seconds */

/*

 * il3945_hw_reg_set_scan_power - Set Tx power for scan probe requests

 *

 * Set (in our channel info database) the direct scan Tx power for 1 Mbit (CCK)

 * or 6 Mbit (OFDM) rates.

	/* use this channel group's 6Mbit clipping/saturation pwr,

	 *   but cap at regulatory scan power restriction (set during init

	/* find difference between new scan *power* and current "normal"

	 *   Tx *power* for 6Mb.  Use this difference (x2) to adjust the

	 *   current "normal" temperature-compensated Tx power *idx* for

	 *   this rate (1Mb or 6Mb) to yield new temp-compensated scan power

	/* store reference idx that we use when adjusting *all* scan

	 *   powers.  So we can accommodate user (all channel) or spectrum

	 *   management (single channel) power changes "between" temperature

	 *   feedback compensation procedures.

	 * don't force fit this reference idx into gain table; it may be a

	 *   negative number.  This will help avoid errors when we're at

	 *   the lower bounds (highest gains, for warmest temperatures)

 don't exceed table bounds for "real" setting */

/*

 * il3945_send_tx_power - fill in Tx Power command with gain settings

 *

 * Configures power settings for all rates for the current channel,

 * using values from channel info struct, and send to NIC

 fill cmd with power settings for all rates for current channel */

 Fill OFDM rate */

 Fill CCK rates */

/*

 * il3945_hw_reg_set_new_power - Configures power tables at new levels

 * @ch_info: Channel to update.  Uses power_info.requested_power.

 *

 * Replace requested_power and base_power_idx ch_info fields for

 * one channel.

 *

 * Called if user or spectrum management changes power preferences.

 * Takes into account h/w and modulation limitations (clip power).

 *

 * This does *not* send anything to NIC, just sets up ch_info for one channel.

 *

 * NOTE: reg_compensate_for_temperature_dif() *must* be run after this to

 *	 properly fill out the scan powers, and actual h/w gain settings,

 *	 and send changes to NIC

 Get this chnlgrp's rate-to-max/clip-powers table */

 Get this channel's rate-to-current-power settings table */

 update OFDM Txpower settings */

 limit new power to be no more than h/w capability */

		/* find difference between old and new requested powers,

 save new requested power value */

	/* update CCK Txpower settings, based on OFDM 12M setting ...

 do all CCK rates' il3945_channel_power_info structures */

/*

 * il3945_hw_reg_get_ch_txpower_limit - returns new power limit for channel

 *

 * NOTE: Returned power limit may be less (but not more) than requested,

 *	 based strictly on regulatory (eeprom and spectrum mgt) limitations

 *	 (no consideration for h/w clipping limitations).

 if we're using TGd limits, use lower of TGd or EEPROM */

 else just use EEPROM limits */

/*

 * il3945_hw_reg_comp_txpower_temp - Compensate for temperature

 *

 * Compensate txpower settings of *all* channels for temperature.

 * This only accounts for the difference between current temperature

 *   and the factory calibration temperatures, and bases the new settings

 *   on the channel's base_power_idx.

 *

 * If RxOn is "associated", this sends the new Txpower to NIC!

 array of h/w max power levels for each rate */

 do not perform tx power calibration */

 set up new Tx power info for each and every channel, 2.4 and 5.x */

 Get this chnlgrp's factory calibration temperature */

		/* get power idx adjustment based on current and factory

 set tx power value for all rates, OFDM and CCK */

 temperature compensate */

 stay within table range */

 Get this chnlgrp's rate-to-max/clip-powers table */

 set scan tx power, 1Mbit for CCK, 6Mbit for OFDM */

 send Txpower command for current channel to ucode */

 set up new Tx powers for each and every channel, 2.4 and 5.x */

		/* find minimum power of all user and regulatory constraints

 this considers the h/w clipping limitations */

	/* update txpower settings for all channels,

/*

 * il3945_commit_rxon - commit staging_rxon to hardware

 *

 * The RXON command in staging_rxon is committed to the hardware and

 * the active_rxon structure is updated with the new data.  This

 * function correctly transitions out of the RXON_ASSOC_MSK state if

 * a HW tune is required based on the RXON structure changes.

 cast away the const for active_rxon in this function */

 always get timestamp with Rx frame */

 select antenna */

	/* If we don't need to send a full RXON, we can use

	 * il3945_rxon_assoc_cmd which is used to reconfigure filter

		/*

		 * We do not commit tx power settings while channel changing,

		 * do it now if tx power changed.

	/* If we are currently associated and the new config requires

	 * an RXON_ASSOC and the new config wants the associated mask enabled,

	 * we must clear the associated from the active configuration

		/*

		 * reserved4 and 5 could have been filled by the iwlcore code.

		 * Let's clear them before pushing to the 3945.

		/* If the mask clearing failed then we set

	/*

	 * reserved4 and 5 could have been filled by the iwlcore code.

	 * Let's clear them before pushing to the 3945.

 Apply the new configuration */

	/* If we issue a new RXON command which required a tune then we must

 Init the hardware's rate fallback order based on the band */

/*

 * il3945_reg_txpower_periodic -  called when time to check our temperature.

 *

 * -- reset periodic timer

 * -- see if temp has changed enough to warrant re-calibration ... if so:

 *     -- correct coeffs for temp (can reset temp timer)

 *     -- save this temp as "last",

 *     -- send new set of gain settings to NIC

 * NOTE:  This should continue working, even when we're not associated,

	/* This will kick in the "brute force"

	/* Set up a new set of temp-adjusted TxPowers, send to NIC.

	 * This is based *only* on current temperature,

/*

 * il3945_hw_reg_get_ch_grp_idx - find the channel-group idx (0-4) for channel.

 *

 * This function is used when initializing channel-info structs.

 *

 * NOTE: These channel groups do *NOT* match the bands above!

 *	 These channel groups are based on factory-tested channels;

 *	 on A-band, EEPROM's "group frequency" entries represent the top

 *	 channel in each group 1-4.  Group 5 All B/G channels are in group 0.

 based on factory calib frequencies */

 Find the group idx for the channel ... don't use idx 1(?) */

 group 4 has a few channels *above* its factory cal freq */

 2.4 GHz, group 0 */

/*

 * il3945_hw_reg_get_matched_power_idx - Interpolate to get nominal idx

 *

 * Interpolate to get nominal (i.e. at factory calibration temperature) idx

 *   into radio/DSP gain settings table for requested power.

 table of power levels for each rate */

 saturation power for each chnl group */

 sanity check on factory saturation power value */

		/*

		 * Derive requested power levels for each rate, based on

		 *   hardware capabilities (saturation power for band).

		 * Basic value is 3dB down from saturation, with further

		 *   power reductions for highest 3 data rates.  These

		 *   backoffs provide headroom for high rate modulation

		 *   power peaks, without too much distortion (clipping).

 we'll fill in this array with h/w max power levels */

 divide factory saturation power by 2 to find -3dB level */

 fill in channel group's nominal powers for each rate */

 B/G */

 A */

/*

 * il3945_txpower_set_from_eeprom - Set channel power info based on EEPROM

 *

 * Second pass (during init) to set up il->channel_info

 *

 * Set up Tx-power settings in our channel info database for each VALID

 * (for this geo/SKU) channel, at all Tx data rates, based on eeprom values

 * and current temperature.

 *

 * Since this is based on current temperature (at init time), these values may

 * not be valid for very long, but it gives us a starting/default point,

 * and allows us to active (i.e. using Tx) scan.

 *

 * This does *not* write values to NIC, just sets up our internal table.

 array of power levels for each rate */

	/* save temperature reference,

 initialize Tx power info for each and every channel, 2.4 and 5.x */

 find this channel's channel group (*not* "band") idx */

 Get this chnlgrp's rate->max/clip-powers table */

		/* calculate power idx *adjustment* value according to

 set tx power value for all OFDM rates */

			/* use channel group's clip-power table,

			/* get base (i.e. at factory-measured temperature)

 temperature compensate */

 stay within range of gain table */

 fill 1 OFDM rate's il3945_channel_power_info struct */

 set tx power for CCK rates, based on OFDM 12 Mbit settings */

 stay within table range */

		/* fill each CCK rate's il3945_channel_power_info structure

		 * NOTE:  All CCK-rate Txpwrs are the same for a given chnl!

 set scan tx power, 1Mbit for CCK, 6Mbit for OFDM */

 fake read to flush all prev. writes */

/*

 * HCMD utils

/*

 * il3945_init_hw_rate_table - Initialize the hardware rate fallback table

		/* If one of the following CCK rates is used,

 Don't fall back to CCK rates */

 Don't drop out of OFDM rates */

		/* If an OFDM rate is used, have it fall back to the

 CCK shouldn't fall back to OFDM... */

 Update the rate scaling for control frame Tx */

 Update the rate scaling for data frame Tx */

 Called when initializing driver */

 Assign number of Usable TX queues */

 supp_rates[0] == OFDM start at IL_FIRST_OFDM_RATE */

 check contents of special bootstrap uCode SRAM */

 verify BSM SRAM contents */

/******************************************************************************

 *

 * EEPROM related functions

 *

/*

 * Clear the OWNER_MSK, to establish driver (instead of uCode running on

 * embedded controller) as EEPROM reader; each read is a series of pulses

 * to/from the EEPROM chip, not a single event, so even reads could conflict

 * if they weren't arbitrated by some ownership mechanism.  Here, the driver

 * simply claims ownership, which should be safe when this function is called

 * (i.e. before loading uCode!).

 /*

  * il3945_load_bsm - Load bootstrap instructions

  *

  * BSM operation:

  *

  * The Bootstrap State Machine (BSM) stores a short bootstrap uCode program

  * in special SRAM that does not power down during RFKILL.  When powering back

  * up after power-saving sleeps (or during initial uCode load), the BSM loads

  * the bootstrap program into the on-board processor, and starts it.

  *

  * The bootstrap program loads (via DMA) instructions and data for a new

  * program from host DRAM locations indicated by the host driver in the

  * BSM_DRAM_* registers.  Once the new program is loaded, it starts

  * automatically.

  *

  * When initializing the NIC, the host driver points the BSM to the

  * "initialize" uCode image.  This uCode sets up some internal data, then

  * notifies host via "initialize alive" that it is complete.

  *

  * The host then replaces the BSM_DRAM_* pointer values to point to the

  * normal runtime uCode instructions and a backup uCode data cache buffer

  * (filled initially with starting data values for the on-board processor),

  * then triggers the "initialize" uCode to load and launch the runtime uCode,

  * which begins normal operation.

  *

  * When doing a power-save shutdown, runtime uCode saves data SRAM into

  * the backup data cache in DRAM before SRAM is powered down.

  *

  * When powering back up, the BSM loads the bootstrap program.  This reloads

  * the runtime uCode instructions and the backup data cache into SRAM,

  * and re-launches the runtime uCode from where it left off.

 make sure bootstrap program is no larger than BSM's SRAM size */

	/* Tell bootstrap uCode where to find the "Initialize" uCode

	 *   in host DRAM ... host DRAM physical address bits 31:0 for 3945.

	 * NOTE:  il3945_initialize_alive_start() will replace these values,

	 *        after the "initialize" uCode has run, to point to

 Fill BSM memory with bootstrap instructions */

 Tell BSM to copy from BSM SRAM into instruction SRAM, when asked */

	/* Load bootstrap code into instruction SRAM now,

 Wait for load of bootstrap uCode to finish */

	/* Enable future boot loads whenever power management unit triggers it

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2003 - 2011 Intel Corporation. All rights reserved.

 *

 * Portions of this file are derived from the ipw3945 project, as well

 * as portions of the ieee80211 subsystem header files.

 *

 * Contact Information:

 *  Intel Linux Wireless <ilw@linux.intel.com>

 * Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

 *

/******************************************************************************

 *

 * module boiler plate

 *

/*

 * module name, copyright, version, etc.

/*

 * EEPROM

 the rest are 0 by default */

 Fill the rx_used queue with _all_ of the Rx buffers */

		/* In the reset function, these buffers may have been allocated

	/* Set us so that we have processed and used all buffers, but have

 256 RBDs */

 Stop Rx DMA */

 Reset driver's Rx queue write idx */

 Tell device where to find RBD circular buffer in DRAM */

 Tell device where in DRAM to update its Rx status */

	/* Enable Rx DMA

	 * Direct rx interrupts to hosts

	 * Rx buffer size 4 or 8k

	 * RB timeout 0x10

	 * 256 RBDs

 Set interrupt coalescing timer to default (2048 usecs) */

/*

 * (for documentation purposes)

 * to set power to V_AUX, do:



		if (pci_pme_capable(il->pci_dev, PCI_D3cold))

			il_set_bits_mask_prph(il, APMG_PS_CTRL_REG,

					       APMG_PS_CTRL_VAL_PWR_SRC_VAUX,

					       ~APMG_PS_CTRL_MSK_PWR_SRC);

 Set interrupt coalescing calibration timer to default (512 usecs) */

 Allocate the RX queue, or reset if it is already allocated */

 Allocate or reset and init all Tx and Command queues */

/*

 * il4965_dma_addr2rbd_ptr - convert a DMA address to a uCode read buffer ptr

/*

 * il4965_rx_queue_restock - refill RX queue from pre-allocated pool

 *

 * If there are slots in the RX queue that need to be restocked,

 * and we have free pre-allocated buffers, fill the ranks as much

 * as we can, pulling from rx_free.

 *

 * This moves the 'write' idx forward to catch up with 'processed', and

 * also updates the memory address in the firmware to reference the new

 * target buffer.

 The overwritten rxb must be a used one */

 Get next free Rx buffer, remove from free list */

 Point to Rx buffer via next RBD in circular buffer */

	/* If the pre-allocated buffer pool is dropping low, schedule to

	/* If we've added more space for the firmware to place data, tell it.

/*

 * il4965_rx_replenish - Move all used packet from rx_used to rx_free

 *

 * When moving to rx_free an SKB is allocated for the slot.

 *

 * Also restock the Rx queue via il_rx_queue_restock.

 * This is called as a scheduled work item (except for during initialization)

 Alloc a new receive buffer */

			/* We don't reschedule replenish work here -- we will

			 * call the restock method and if it still needs

 Get physical address of the RB */

/* Assumes that the skb field of the buffers in 'pool' is kept accurate.

 * If an SKB has been detached, the POOL needs to have its SKB set to NULL

 * This free routine walks the list of POOL entries and if SKB is set to

 * non NULL it is unmapped and freed

 HT rate format: mac80211 wants an MCS number, which is just LSB */

 Legacy rate format, search for match in table */

	/* data from PHY/DSP regarding signal strength, etc.,

	/* Find max rssi among 3 possible receivers.

	 * These values are measured by the digital signal processor (DSP).

	 * They should stay fairly constant even as the signal strength varies,

	 *   if the radio's automatic gain control (AGC) is working right.

	/* dBm = max_rssi dB - agc dB - constant.

 packet was not encrypted */

 packet was encrypted with unknown alg */

 decryption was not done in HW */

 alg is CCM: check MIC only */

 Bad MIC */

 Bad TTAK */

 if TTAK OK */

 We only process data packets if the interface is open */

 In case of HW accelerated crypto and bad decryption, drop */

/* Called for N_RX (legacy ABG frames), or

	/**

	 * N_RX and N_RX_MPDU are handled differently.

	 *	N_RX: physical layer info is in this buffer

	 *	N_RX_MPDU: physical layer info was sent in separate

	 *		command and cached in il->last_phy_res

	 *

	 * Here we set up local variables depending on which command is

	 * received.

 This will be used in several places later */

 rx_status carries information about the packet to mac80211 */

	/* TSF isn't reliable. In order to allow smooth user experience,

rx_status.flag |= RX_FLAG_MACTIME_START; */

 Find max signal strength (dBm) among 3 antenna/receiver chains */

	/*

	 * "antenna number"

	 *

	 * It seems that the antenna field in the phy flags value

	 * is actually a bit field. This is undefined by radiotap,

	 * it wants an actual antenna number but I always get "7"

	 * for most legacy frames I receive indicating that the

	 * same frame was received on all three RX chains.

	 *

	 * I think this field should be removed in favor of a

	 * new 802.11n radiotap field "RX chains" that is defined

	 * as a bitmask.

 set the preamble flag if appropriate */

 Set up the HT phy flags */

		/* We know which subframes of an A-MPDU belong

		 * together since we get a single PHY response

		 * from the firmware for all of them.

/* Cache phy data (Rx signal strength, etc) for HT frame (N_RX_PHY).

 Set txpower levels to defaults */

		/* NOTE: if we were doing 6Mb OFDM for scans we'd use

		 * power level:

		 * scan_ch->tx_gain = ((1 << 5) | (2 << 3)) | 3;

 always does wildcard anyway */

	/*

	 * If active scanning is requested but a certain channel is

	 * marked passive, we can do active scanning if we detect

	 * transmissions.

	 *

	 * There is an issue with some firmware versions that triggers

	 * a sysassert on a "good CRC threshold" of zero (== disabled),

	 * on a radar channel even though this means that we should NOT

	 * send probes.

	 *

	 * The "good CRC threshold" is the number of frames that we

	 * need to receive during our dwell time on a channel before

	 * sending out probes -- setting this to a huge value will

	 * mean we never reach it, but at the same time work around

	 * the aforementioned issue. Thus use IL_GOOD_CRC_TH_NEVER

	 * here instead of IL_GOOD_CRC_TH_DISABLED.

 In power save mode use one chain, otherwise use all chains */

 rx_ant has been set to all valid chains previously */

 MIMO is not used here, but value is required */

/*

 * Determine how many receiver/antenna chains to use.

 *

 * More provides better reception via diversity.  Fewer saves power

 * at the expense of throughput, but only when not in powersave to

 * start with.

 *

 * MIMO (dual stream) requires at least 2, but works better with 3.

 * This does not determine *which* chains to use, just how many.

 # of Rx chains to use when expecting MIMO. */

/*

 * When we are in power saving mode, unless device support spatial

 * multiplexing power save, use the active count for rx chain count.

 # Rx chains when idling, depending on SMPS mode */

 up to 4 chains */

/*

 * il4965_set_rxon_chain - Set up Rx chain usage in "staging" RXON image

 *

 * Selects how many and which Rx receivers/antennas/chains to use.

 * This should not be used for scan command ... it puts data in wrong place.

	/* Tell uCode which antennas are actually connected.

	 * Before first association, we assume all antennas are connected.

	 * Just after first association, il4965_chain_noise_calibration()

 How many receivers should we use? */

	/* correct rx chain count according hw settings

	 * and chain noise calibration

/* Calculate noise level, based on measurements during network silence just

 *   before arriving beacon.  This measurement can be done only if we know

 Average among active antennas */

/*

 *  based on the assumption of all stats counter are in DWORD

 *  FIXME: This function is for debugging, do not deal with

 *  the case of counters roll-over.

 reset accumulative stats for "no-counter" type stats */

 TODO: reading some of stats is unneeded */

	/*

	 * Reschedule the stats timer to occur in recalib_seconds to ensure

	 * we get a thermal update even if the uCode doesn't give us one

/*

 * mac80211 queues, ACs, hardware queues, FIFOs.

 *

 * Cf. https://wireless.wiki.kernel.org/en/developers/Documentation/mac80211/queues

 *

 * Mac80211 uses the following numbers, which we get as from it

 * by way of skb_get_queue_mapping(skb):

 *

 *     VO      0

 *     VI      1

 *     BE      2

 *     BK      3

 *

 *

 * Regular (not A-MPDU) frames are put into hardware queues corresponding

 * to the FIFOs, see comments in iwl-prph.h. Aggregated frames get their

 * own queue per aggregation session (RA/TID combination), such queues are

 * set up to map into FIFOs too, for which we need an AC->FIFO mapping. In

 * order to map frames to the right queue, we also need an AC->hw queue

 * mapping. This is implemented here.

 *

 * Due to the way hw queues are set up (by the hw specific modules like

 * 4965.c), the AC->hw queue mapping is the identity

 * mapping.

 no support for TIDs 8-15 yet */

 no support for TIDs 8-15 yet */

/*

 * handle build C_TX command notification.

 Set retry limit on DATA packets and Probe Responses */

 Set retry limit on RTS packets */

	/* DATA packets will use the uCode station table for rate/antenna

	/**

	 * If the current TX rate stored in mac80211 has the MCS bit set, it's

	 * not really a TX rate.  Thus, we use the lowest supported rate for

	 * this band.  Also use the lowest supported rate if the stored rate

	 * idx is invalid.

 For 5 GHZ band, remap mac80211 rate indices into driver indices */

 Get PLCP rate for tx_cmd->rate_n_flags */

 Zero out flags for this packet */

 Set CCK flag as needed */

 Set up antennas */

 Set the rate in the TX cmd */

/*

 * start C_TX command process

 For management frames use broadcast id to do not break aggregation */

 Find idx into station table for destination station */

		/*

		 * This sends an asynchronous command to the device,

		 * but we can rely on it being processed before the

		 * next frame is processed -- and the next frame to

		 * this station is the one that will consume this

		 * counter.

		 * For now set the counter to just 1 since we do not

		 * support uAPSD yet.

 FIXME: remove me ? */

 Access category (AC) is also the queue number */

 irqs already disabled/saved above when locking il->lock */

 aggregation is on for this <sta,tid> */

 Set up first empty entry in queue's array of Tx/cmd buffers */

	/*

	 * Set up the Tx-command (not MAC!) header.

	 * Store the chosen Tx queue and TFD idx within the sequence field;

	 * after Tx, uCode's Tx response will return this value so driver can

	 * locate the frame within the tx queue and do post-tx processing.

 Copy MAC header from skb into command buffer */

 Total # bytes to be transmitted */

 TODO need this for burst mode later on */

	/*

	 * Use the first empty entry in this queue's command buffer array

	 * to contain the Tx command and MAC header concatenated together

	 * (payload data will be in another buffer).

	 * Size of this varies, due to varying MAC header length.

	 * If end is not dword aligned, we'll have 2 extra bytes at the end

	 * of the MAC header (device reads on dword boundaries).

	 * We'll tell device about this padding later.

 Tell NIC about any 2-byte padding after MAC header */

	/* Physical address of this Tx command's header (not MAC header!),

	/* Set up TFD's 2nd entry to point directly to remainder of skb,

	/* Add buffer containing Tx command and MAC(!) header to TFD's

 take back ownership of DMA buffer to enable update */

 Set up entry for this TFD in Tx byte-count array */

 Tell device the write idx *just past* this latest filled TFD */

	/*

	 * At this point the frame is "transmitted" successfully

	 * and we will get a TX status notification eventually,

	 * regardless of the value of ret. "ret" only indicates

	 * whether or not we should update the write pointer.

	/*

	 * Avoid atomic ops if it isn't an associated client.

	 * Also, if this is a packet for aggregation, don't

	 * increase the counter because the ucode will stop

	 * aggregation queues when their respective station

	 * goes to sleep.

/*

 * il4965_hw_txq_ctx_free - Free TXQ Context

 *

 * Destroy all TX DMA queues and structures

 Tx queues */

 free tx queue structure */

/*

 * il4965_txq_ctx_alloc - allocate TX queue context

 * Allocate all Tx DMA structures and initialize them

 Free all tx/cmd queues and keep-warm buffer */

 Alloc keep-warm buffer */

 allocate tx queue structure */

 Turn off all Tx DMA fifos */

 Tell NIC where to find the "keep warm" buffer */

 Alloc and init all Tx queues, including the command queue (#4/#9) */

 Turn off all Tx DMA fifos */

 Tell NIC where to find the "keep warm" buffer */

 Alloc and init all Tx queues, including the command queue (#4) */

 Unmap DMA from host system and free skb's */

/*

 * il4965_txq_ctx_stop - Stop all Tx DMA channels

 Stop each Tx DMA channel, and wait for it to be idle */

/*

 * Find first available (lowest unused) Tx Queue, mark it "active".

 * Called only when finding queue for aggregation.

 * Should never return anything < 7, because they should already

 * be in use as EDCA AC (0-3), Command (4), reserved (5, 6)

/*

 * il4965_tx_queue_stop_scheduler - Stop queue, but keep configuration

	/* Simply stop the queue, but don't change any configuration;

/*

 * il4965_tx_queue_set_q2ratid - Map unique receiver/tid combination to a queue

/*

 * il4965_tx_queue_agg_enable - Set up & enable aggregation for selected queue

 *

 * NOTE:  txq_id must be greater than IL49_FIRST_AMPDU_QUEUE,

 *        i.e. it must be one of the higher queues used for aggregation

 Modify device's station table to Tx this TID */

 Stop this Tx queue before configuring it */

 Map receiver-address / traffic-ID to this queue */

 Set this queue as a chain-building queue */

	/* Place first TFD at idx corresponding to start sequence number.

 Set up Tx win size and frame limit for this queue */

 Set up Status area in SRAM, map to Tx DMA/FIFO, activate the queue */

 FIXME: warning if tx fifo not found ? */

/*

 * txq_id must be greater than IL49_FIRST_AMPDU_QUEUE

 * il->lock must be held by the caller

 supposes that ssn_idx is valid (!= 0xFFF) */

 FIXME: warning if tx_fifo_id not found ? */

		/*

		 * This can happen if the peer stops aggregation

		 * again before we've had a chance to drain the

		 * queue we selected previously, i.e. before the

		 * session was really started completely.

 The queue is not empty */

 do not restore/save irqs */

	/*

	 * the only reason this call can fail is queue number out of range,

	 * which can happen if uCode is reloaded and all the station

	 * information are lost. if it is outside the range, there is no need

	 * to deactivate the uCode queue, just return "success" to allow

	 *  mac80211 to clean up it own data.

 We are reclaiming the last packet of the */

 aggregated HW queue */

 We are reclaiming the last packet of the queue */

 avoid atomic ops if this isn't a client */

/*

 * il4965_tx_status_reply_compressed_ba - Update tx status from block-ack

 *

 * Go through block-ack's bitmap of ACK'd frames, update driver's record of

 * ACK vs. not.  This gets sent to mac80211, then to rate scaling algo.

 Mark that the expected block-ack response arrived */

 Calculate shift to align block-ack bits with our Tx win bits */

 tbw something is wrong with indices */

 don't use 64-bit values for now */

	/* check for success or failure according to the

	/* For each frame attempted in aggregation,

	/*

	 * It may be possible that more commands interacting with stations

	 * arrive before we completed processing the adding of

	 * station

/*

 * il4965_tx_status_reply_tx - Handle Tx response for frames in aggregation queue

 num frames attempted by Tx command */

 Only one frame was attempted; no block-ack will arrive */

 Two or more frames were attempted; expect block-ack */

 Construct bit-map of pending frames within Tx win */

/*

 * il4965_hdl_tx - Handle standard (non-aggregation) Tx response

	/*

	 * Firmware will not transmit frame on passive channel, if it not yet

	 * received some valid frame on that channel. When this error happen

	 * we have to wait until firmware will unblock itself i.e. when we

	 * note received beacon or other frame. We unblock queues in

	 * il4965_pass_packet_to_mac80211 or in il_mac_bss_info_changed.

 check if BAR is needed */

/*

 * translate ucode response to mac80211 tx status control values

/*

 * il4965_hdl_compressed_ba - Handler for N_COMPRESSED_BA

 *

 * Handles block-acknowledge notification from device, which reports success

 * of frames sent via aggregation.

 "flow" corresponds to Tx queue */

	/* "ssn" is start of block-ack Tx win, corresponds to idx

		/*

		 * FIXME: this is a uCode bug which need to be addressed,

		 * log the information and return for now!

		 * since it is possible happen very often and in order

		 * not to fill the syslog, don't enable the logging by default

 Find idx just before block-ack win */

 Update driver's record of ACK vs. not for each frame in win */

	/* Release all TFDs before the SSN, i.e. all TFDs in front of

	 * block-ack win (we assume that they've been successfully

 calculate mac80211 ampdu sw queue to wake */

 CONFIG_IWLEGACY_DEBUG */

	/* Set up the rate scaling to start at selected rate, fall back

/*

 * il4965_add_bssid_station - Add the special IBSS BSSID station

 *

 * Function sleeps.

 Set up default rate scaling table in device's station table */

 but keys in device are clear anyway so return success */

	/* else, we are overriding an existing key => no need to allocated room

	/* else, we are overriding an existing key => no need to allocated room

	/* else, we are overriding an existing key => no need to allocated room

 This copy is acutally not needed: we get the key with each TX */

		/* cancel scan failed, just live w/ bad key and rely

		/* We need to remove a key with idx different that the one

		 * in the uCode. This means that the key we need to remove has

		 * been replaced by another one with different idx.

		 * Don't do anything and return ok

/*

 * il4965_alloc_bcast_station - add broadcast station into driver's station table.

 *

 * This adds the broadcast station into the driver's station table

 * and marks it driver active, so that it will be restored to the

 * device at the next best time.

/*

 * il4965_update_bcast_station - update broadcast station's LQ command

 *

 * Only used by iwl4965. Placed here to have all bcast station management

 * code together.

/*

 * il4965_sta_tx_modify_enable_tid - Enable Tx for this TID in station table

 Remove "disable" flag, to enable Tx for this TID */

 Parse the beacon frame to find the TIM element and set tim_idx & tim_size */

	/*

	 * The idx is relative to frame start but we start looking at the

	 * variable-length part of the beacon.

 Parse variable-length elements of beacon to find WLAN_EID_TIM */

 If TIM field was found, set variables */

	/*

	 * We have to set up the TX command, the TX Beacon command, and the

	 * beacon contents.

 Initialize memory */

 Set up TX beacon contents */

 Set up TX command fields */

 Set up TX beacon command fields */

 Set up packet rate and flags */

/*

 * il4965_hw_txq_free_tfd - Free all chunks referenced by TFD [txq->q.read_ptr]

 *

 * Does NOT advance any TFD circular buffer read/write idxes

 * Does NOT free the TFD itself (which is within circular buffer)

 Sanity check on number of chunks */

 @todo issue fatal error, it is quite serious situation */

 Unmap tx_cmd */

 Unmap chunks, if any. */

 free SKB */

 can be called from irqs-disabled context */

 Each TFD can point to a maximum 20 Tx buffers */

/*

 * Tell nic where to find circular buffer of Tx Frame Descriptors for

 * given Tx queue, and enable the DMA channel used for that queue.

 *

 * 4965 supports up to 16 Tx queues in DRAM, mapped to up to 8 Tx DMA

 * channels supported in hardware.

 Circular buffer (TFD queue in DRAM) physical base address */

/******************************************************************************

 *

 * Generic RX handler implementations

 *

	/* We delay the ALIVE response by 5ms to

/*

 * il4965_bg_stats_periodic - Timer callback to queue stats

 *

 * This callback is provided in order to send a stats request.

 *

 * This timer function is continually reset to execute within

 * 60 seconds since the last N_STATS was received.  We need to

 * ensure we receive the stats in order to update the temperature

 * used for calibrating the TXPOWER.

 dont send host command if rf-kill is on */

/* Handle notification from uCode that card's power state is changing

/*

 * il4965_setup_handlers - Initialize Rx handler callbacks

 *

 * Setup the RX handlers for each of the reply types sent from the uCode

 * to the host.

 *

 * This function chains into the hardware specific files for them to setup

 * any hardware specific handlers as well.

	/*

	 * The same handler is used for both the REPLY to a discrete

	 * stats request from the host as well as for the periodic

	 * stats notifications (after received beacons) from the uCode.

 status change handler */

 Rx handlers */

 block ack */

 Tx response */

/*

 * il4965_rx_handle - Main entry function for receiving responses from uCode

 *

 * Uses the il->handlers callback function array to invoke

 * the appropriate handlers, including command responses,

 * frame-received notifications, and other notifications.

	/* uCode's read idx (stored in shared DRAM) indicates the last Rx

 Rx interrupt, but nothing sent from uCode */

 calculate total frames need to be restock after handling RX */

		/* If an RXB doesn't have a Rx queue slot associated with it,

		 * then a bug has been introduced in the queue refilling

 account for status word */

		/* Based on type of command response or notification,

		 *   handle those that need handling via function in

 No handling needed */

		/*

		 * XXX: After here, we should always check rxb->page

		 * against NULL before touching it or its virtual

		 * memory (pkt). Because some handler might have

		 * already taken or freed the pages.

			/* Invoke any callbacks, transfer the buffer to caller,

			 * and fire off the (possibly) blocking il_send_cmd()

		/* Reuse the page if possible. For notification packets and

		 * SKBs that fail to Rx correctly, add them back into the

		/* If there are a lot of unused frames,

 Backtrack one entry */

 call this function to flush any scheduled tasklet */

 wait to make sure we flush pending tasklet */

	/* Ack/clear/reset pending uCode interrupts.

	 * Note:  Some bits in CSR_INT are "OR" of bits in CSR_FH_INT_STATUS,

	/* Ack/clear/reset pending flow-handler (DMA) interrupts.

	 * Any new interrupts that happen after this, either while we're

 just for debug */

	/* Since CSR_INT and CSR_FH_INT_STATUS reads and clears are not

	 * atomic, make sure that inta covers all the interrupts that

	 * we've discovered, even if FH interrupt came in just after

 Now service all interrupt bits discovered above. */

 Tell the device to stop sending interrupts */

 NIC fires this, but we don't use it, redundant with WAKEUP */

 Alive notification via Rx interrupt will do the real work */

 Safely ignore these bits for debug checks below */

 HW RF KILL switch toggled */

		/* driver only loads ucode once setting the interface up.

		 * the driver allows loading the ucode even if the radio

		 * is killed. Hence update the killswitch state here. The

		 * rfkill handler will care about restarting if needed.

 Chip got too hot and stopped itself */

 Error detected by uCode */

	/*

	 * uCode wakes up after power-down sleep.

	 * Tell device about any new tx or host commands enqueued,

	 * and about any Rx buffers made available while asleep.

	/* All uCode command responses, including Tx command responses,

	 * Rx "responses" (frame-received notification), and other

 This "Tx" DMA channel is used only for loading uCode */

 Wake up uCode load routine, now that load is complete */

 Re-enable all interrupts */

 only Re-enable if disabled by irq */

 Re-enable RF_KILL if it occurred */

/*****************************************************************************

 *

 * sysfs attributes

 *

/*

 * The following adds a new attribute to the sysfs representation

 * of this device driver (i.e. a new file in /sys/class/net/wlan0/device/)

 * used for controlling the debug level.

 *

 * See the level definitions in iwl for details.

 *

 * The debug_level being managed using sysfs below is a per device debug

 * level that is used instead of the global debug level if it (the per

 * device debug level) is set.

 CONFIG_IWLEGACY_DEBUG */

 put in device directory */

/******************************************************************************

 *

 * uCode download functions

 *

 Remove all resets to allow NIC to operate */

 Verify size of file vs. image size info in file's header */

/*

 * il4965_ucode_callback - callback when firmware was loaded

 *

 * If loaded successfully, copies the firmware into buffers

 * for the card to fetch (via DMA).

 Make sure that we got at least the API version number */

 Data from ucode file:  header followed by uCode images */

	/*

	 * api_ver should match the api version forming part of the

	 * firmware filename ... but we don't check for that and only rely

	 * on the API version read from firmware header from here on forward

www.intellinuxwireless.org.\n", api_max,

	/*

	 * For any of the failures below (before allocating pci memory)

	 * we will try to load a version with a smaller API -- maybe the

	 * user just got a corrupted version of the latest API.

 Verify that uCode images will fit in card's SRAM */

 Allocate ucode buffers for card's bus-master loading ... */

	/* Runtime instructions and 2 copies of data:

	 * 1) unmodified from disk

 Initialization instructions and data */

 Bootstrap (instructions only, no data) */

 Now that we can no longer fail, copy information */

 Copy images into buffers for card's bus-master reads ... */

 Runtime instructions (first block of data in file) */

	/*

	 * Runtime data

	 * NOTE:  Copy into backup buffer will be done in il_up()

 Initialization instructions */

 Initialization data */

 Bootstrap instructions */

	/*

	 * figure out the offset of chain noise reset and gain commands

	 * base on the size of standard phy calibration commands table size

	/**************************************************

	 * This is still part of probe() in a sense...

	 *

	 * 9. Setup and register with mac80211 and debugfs

 We have our copies now, allow OS release its copies */

 try next, if any */

 Clear 4965's internal Tx Scheduler data base */

 Tel 4965 where to find Tx byte count tables */

 Enable DMA channel */

 Update FH chicken bits */

 Disable chain mode for all queues */

 Initialize each Tx queue (including the command queue) */

 TFD circular buffer read/write idxes */

 Max Tx Window size for Scheduler-ACK mode */

 Frame limit */

 Activate all Tx DMA/FIFO channels */

 make sure all queue are not stopped */

 reset to 0 to enable all the queue first */

 Map each Tx/cmd queue to its corresponding fifo */

/*

 * il4965_alive_start - called after N_ALIVE notification received

 *                   from protocol/runtime uCode (initialization uCode's

 *                   Alive gets handled by il_init_alive_start()).

		/* We had an error bringing up the hardware, so take it

	/* Initialize uCode has loaded Runtime uCode ... verify inst image.

	 * This is a paranoid check, because we would not have gotten the

		/* Runtime instruction load was bad;

 After the ALIVE response, we can send host commands to the uCode */

 Enable watchdog to monitor the driver tx queues */

 apply any changes in staging */

 Initialize our rx_config data */

 Configure bluetooth coexistence if enabled */

 Configure the adapter for unassociated operation */

 At this point, the NIC is initialized and operational */

	/* Stop TX queues watchdog. We need to have S_EXIT_PENDING bit set

 FIXME: race conditions ? */

	/*

	 * Remove all key information that is not stored as part

	 * of station information since mac80211 may not have had

	 * a chance to remove all the keys. When device is

	 * reconfigured by mac80211 after an error all keys will

	 * be reconfigured.

 Unblock any waiting calls */

	/* Wipe out the EXIT_PENDING status bit if we are not actually

 stop and reset the on-board processor */

 tell the device to stop sending interrupts */

	/* If we have not previously called il_init() then

	/* ...otherwise clear out all the status bits but the RF Kill

	/*

	 * We disabled and synchronized interrupt, and priv->mutex is taken, so

	 * here is the only thread which will program device registers, but

	 * still have lockdep assertions, so we are taking reg_lock.

 FIXME: il_grab_nic_access if rfkill is off ? */

 Power-down device's busmaster DMA clocks */

 Make sure (redundant) we've released our request to stay awake */

 Stop the device, and put it in low power state */

 clear out any free frames */

 See if we got it */

 If HW is not ready, prepare the conditions to check again */

 HW should be ready by now, check again. */

 If platform's RF_KILL switch is NOT set to KILL */

 must be initialised before il_hw_nic_init */

 make sure rfkill handshake bits are cleared */

 clear (again), then enable host interrupts */

 really make sure rfkill handshake bits are cleared */

	/* Copy original ucode data image from disk into backup cache.

	 * This will be used to initialize the on-board processor's

		/* load bootstrap state machine,

		 * load bootstrap program into processor's memory,

 start card; "initialize" will load runtime ucode */

	/* tried to restart and config the device for as long as our

/*****************************************************************************

 *

 * Workqueue callbacks

 *

/*****************************************************************************

 *

 * mac80211 entry point functions

 *

/*

 * Not a mac80211 entry point function, but it fits in with all the

 * other mac80211 functions grouped here.

 Tell mac80211 our characteristics */

	/*

	 * For now, disable PS by default because it affects

	 * RX performance significantly.

 we create the 802.11 header and a zero-length SSID element */

 Default value; 4 EDCA QOS priorities */

 we should be verifying the device is ready to be opened */

	/* Wait for START_ALIVE from Run Time ucode. Otherwise callbacks from

	/* User space software may expect getting rfkill changes

	/*

	 * To support IBSS RSN, don't program group keys in IBSS, the

	 * hardware will then not attempt to decrypt the frames.

	/*

	 * If we are getting WEP group key and we didn't receive any key mapping

	 * so far, we are in legacy wep mode (group key only), otherwise we are

	 * in 1X mode.

	 * In legacy wep mode, we use another host command to the uCode.

 Should we return success if return code is EEXIST ? */

 Initialize rate scaling */

 Configure HT40 channels */

	/*

	 * at this point, staging_rxon has the

	 * configuration for channel switch

 Setting _just_ RXON_FILTER_CTL2HOST_MSK causes FH errors */

	/*

	 * Not committing directly because hardware can perform a scan,

	 * but we'll eventually commit the filter flags change anyway.

	/*

	 * Receiving all multicast frames is always enabled by the

	 * default flags setup in il_connection_init_rx_config()

	 * since we currently do not support programming multicast

	 * filters into the device.

/*****************************************************************************

 *

 * driver setup and teardown

 *

	/* If a scan happened to start before we got here

	 * then just return; the stats notification will

	 * kick off another scheduled work to compensate for

	/* Regardless of if we are associated, we must reconfigure the

	 * TX power since frames can be sent on non-radar channels while

	/* Update last_temperature to keep is_calib_needed from running

 Rate scaling will work on idxes */

			/*

			 * If CCK != 1M then set short preamble rate flag.

/*

 * Acquire il->lock before calling this function !

 Find out whether to activate Tx queue */

 Set up and activate */

 initialize force reset */

 Choose which receivers/antennas to use */

 not used, set to 0 */

	/************************

	 * 1. Allocating HW data

	/**************************

	 * 2. Initializing PCI bus

 both attempts failed: */

	/***********************

	 * 3. Read REV register

	/* these spin locks will be used in apm_ops.init and EEPROM access

	 * we should init now

	/*

	 * stop and reset the on-board processor just in case it is in a

	 * strange state ... like being left stranded by a primary kernel

	 * and this is now the kdump kernel trying to start up

	/* We disable the RETRY_TIMEOUT register (0x41) to keep

	/*****************

	 * 4. Read EEPROM

 Read the EEPROM */

 extract MAC Address */

	/************************

	 * 5. Setup HW constants

	/*******************

	 * 6. Setup il

 At this point both hw and il are initialized. */

	/********************

	 * 7. Setup services

	/*********************************************

	 * 8. Enable interrupts and read RFKILL state

 enable rfkill interrupt: hw bug w/a */

 If platform's RF_KILL switch is NOT set to KILL */

	/* ieee80211_unregister_hw call wil cause il_mac_stop to

	 * to be called and il4965_down since we are removing the device

	 * we need to set S_EXIT_PENDING bit.

	/*

	 * Make sure device is reset to low power before unloading driver.

	 * This may be redundant with il4965_down(), but there are paths to

	 * run il4965_down() without calling apm_ops.stop(), and there are

	 * paths to avoid running il4965_down() at all before leaving driver.

	 * This (inexpensive) call *makes sure* device is reset.

	/* make sure we flush any pending irq or

	 * tasklet for the driver

netif_stop_queue(dev); */

	/* ieee80211_unregister_hw calls il_mac_stop, which flushes

	 * il->workqueue... so we can't take down the workqueue

/*

 * Activate/Deactivate Tx DMA/FIFO channels according tx fifos mask

 * must be called under il->lock and mac access

/*****************************************************************************

 *

 * driver and module entry point

 *

 Hardware specific file defines the PCI IDs table for that hardware module */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2003 - 2011 Intel Corporation. All rights reserved.

 *

 * Portions of this file are derived from the ipw3945 project, as well

 * as portions of the ieee80211 subsystem header files.

 *

 * Contact Information:

 *  Intel Linux Wireless <ilw@linux.intel.com>

 * Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

 *

/*

 * module name, copyright, version, etc.

/*

 * add "s" to indicate spectrum measurement included.

 * we add it here to be consistent with previous releases in which

 * this was configurable.

 module parameters */

 the rest are 0 by default */

/**

 * il3945_get_antenna_flags - Get antenna flags for RXON command

 * @il: eeprom and antenna fields are used to determine antenna flags

 *

 * il->eeprom39  is used to determine if antenna AUX/MAIN are reversed

 * il3945_mod_params.antenna specifies the antenna diversity mode:

 *

 * IL_ANTENNA_DIVERSITY - NIC selects best antenna by itself

 * IL_ANTENNA_MAIN      - Force MAIN antenna

 * IL_ANTENNA_AUX       - Force AUX antenna

 bad antenna selector value */

 "diversity" is default if error */

	/* else, we are overriding an existing key => no need to allocated room

/*

 * handle build C_TX command notification.

/*

 * start C_TX command process

 Find idx into station table for destination station */

 Descriptor for chosen Tx queue */

 Init first empty entry in queue's array of Tx/cmd buffers */

	/*

	 * Set up the Tx-command (not MAC!) header.

	 * Store the chosen Tx queue and TFD idx within the sequence field;

	 * after Tx, uCode's Tx response will return this value so driver can

	 * locate the frame within the tx queue and do post-tx processing.

 Copy MAC header from skb into command buffer */

 TODO need this for burst mode later on */

 Total # bytes to be transmitted */

	/*

	 * Use the first empty entry in this queue's command buffer array

	 * to contain the Tx command and MAC header concatenated together

	 * (payload data will be in another buffer).

	 * Size of this varies, due to varying MAC header length.

	 * If end is not dword aligned, we'll have 2 extra bytes at the end

	 * of the MAC header (device reads on dword boundaries).

	 * We'll tell device about this padding later.

	/* Physical address of this Tx command's header (not MAC header!),

	/* Set up TFD's 2nd entry to point directly to remainder of skb,

	/* Add buffer containing Tx command and MAC(!) header to TFD's

 Tell device the write idx *just past* this latest filled TFD */

 Command will be handled */

 Command will not be handled */

	/* We delay the ALIVE response by 5ms to

/* Handle notification from uCode that card's power state is changing

/*

 * il3945_setup_handlers - Initialize Rx handler callbacks

 *

 * Setup the RX handlers for each of the reply types sent from the uCode

 * to the host.

 *

 * This function chains into the hardware specific files for them to setup

 * any hardware specific handlers as well.

	/*

	 * The same handler is used for both the REPLY to a discrete

	 * stats request from the host as well as for the periodic

	 * stats notifications (after received beacons) from the uCode.

 Set up hardware specific Rx handlers */

************************* RX-FUNCTIONS ****************************/

/*

 * Rx theory of operation

 *

 * The host allocates 32 DMA target addresses and passes the host address

 * to the firmware at register IL_RFDS_TBL_LOWER + N * RFD_SIZE where N is

 * 0 to 31

 *

 * Rx Queue Indexes

 * The host/firmware share two idx registers for managing the Rx buffers.

 *

 * The READ idx maps to the first position that the firmware may be writing

 * to -- the driver can read up to (but not including) this position and get

 * good data.

 * The READ idx is managed by the firmware once the card is enabled.

 *

 * The WRITE idx maps to the last position the driver has read from -- the

 * position preceding WRITE is the last slot the firmware can place a packet.

 *

 * The queue is empty (no good data) if WRITE = READ - 1, and is full if

 * WRITE = READ.

 *

 * During initialization, the host sets up the READ queue position to the first

 * IDX position, and WRITE to the last (READ - 1 wrapped)

 *

 * When the firmware places a packet in a buffer, it will advance the READ idx

 * and fire the RX interrupt.  The driver can then query the READ idx and

 * process as many packets as possible, moving the WRITE idx forward as it

 * resets the Rx queue buffers with new memory.

 *

 * The management in the driver is as follows:

 * + A list of pre-allocated SKBs is stored in iwl->rxq->rx_free.  When

 *   iwl->rxq->free_count drops to or below RX_LOW_WATERMARK, work is scheduled

 *   to replenish the iwl->rxq->rx_free.

 * + In il3945_rx_replenish (scheduled) if 'processed' != 'read' then the

 *   iwl->rxq is replenished and the READ IDX is updated (updating the

 *   'processed' and 'read' driver idxes as well)

 * + A received packet is processed and handed to the kernel network stack,

 *   detached from the iwl->rxq.  The driver 'processed' idx is updated.

 * + The Host/Firmware iwl->rxq is replenished at tasklet time from the rx_free

 *   list. If there are no allocated buffers in iwl->rxq->rx_free, the READ

 *   IDX is not incremented and iwl->status(RX_STALLED) is set.  If there

 *   were enough free buffers and RX_STALLED is set it is cleared.

 *

 *

 * Driver sequence:

 *

 * il3945_rx_replenish()     Replenishes rx_free list from rx_used, and calls

 *                            il3945_rx_queue_restock

 * il3945_rx_queue_restock() Moves available buffers from rx_free into Rx

 *                            queue, updates firmware pointers, and updates

 *                            the WRITE idx.  If insufficient rx_free buffers

 *                            are available, schedules il3945_rx_replenish

 *

 * -- enable interrupts --

 * ISR - il3945_rx()         Detach il_rx_bufs from pool up to the

 *                            READ IDX, detaching the SKB from the pool.

 *                            Moves the packet buffer from queue to rx_used.

 *                            Calls il3945_rx_queue_restock to refill any empty

 *                            slots.

 * ...

 *

/*

 * il3945_dma_addr2rbd_ptr - convert a DMA address to a uCode read buffer ptr

/*

 * il3945_rx_queue_restock - refill RX queue from pre-allocated pool

 *

 * If there are slots in the RX queue that need to be restocked,

 * and we have free pre-allocated buffers, fill the ranks as much

 * as we can, pulling from rx_free.

 *

 * This moves the 'write' idx forward to catch up with 'processed', and

 * also updates the memory address in the firmware to reference the new

 * target buffer.

 Get next free Rx buffer, remove from free list */

 Point to Rx buffer via next RBD in circular buffer */

	/* If the pre-allocated buffer pool is dropping low, schedule to

	/* If we've added more space for the firmware to place data, tell it.

/*

 * il3945_rx_replenish - Move all used packet from rx_used to rx_free

 *

 * When moving to rx_free an SKB is allocated for the slot.

 *

 * Also restock the Rx queue via il3945_rx_queue_restock.

 * This is called as a scheduled work item (except for during initialization)

 Alloc a new receive buffer */

			/* We don't reschedule replenish work here -- we will

			 * call the restock method and if it still needs

 Get physical address of RB/SKB */

 Fill the rx_used queue with _all_ of the Rx buffers */

		/* In the reset function, these buffers may have been allocated

	/* Set us so that we have processed and used all buffers, but have

/* Assumes that the skb field of the buffers in 'pool' is kept accurate.

 * If an SKB has been detached, the POOL needs to have its SKB set to NULL

 * This free routine walks the list of POOL entries and if SKB is set to

 * non NULL it is unmapped and freed

 Convert linear signal-to-noise ratio into dB */

	 0   1   2   3   4   5   6   7   8   9 */

 00 - 09 */

 10 - 19 */

 20 - 29 */

 30 - 39 */

 40 - 49 */

 50 - 59 */

 60 - 69 */

 70 - 79 */

 80 - 89 */

 90 - 99 */

/* Calculates a relative dB value from a ratio of linear

 *   (i.e. not dB) signal levels.

 1000:1 or higher just report as 60 dB */

	/* 100:1 or higher, divide by 10 and use table,

 We shouldn't see this */

 Use table for ratios 1:1 - 99:1 */

/*

 * il3945_rx_handle - Main entry function for receiving responses from uCode

 *

 * Uses the il->handlers callback function array to invoke

 * the appropriate handlers, including command responses,

 * frame-received notifications, and other notifications.

	/* uCode's read idx (stored in shared DRAM) indicates the last Rx

 calculate total frames need to be restock after handling RX */

 Rx interrupt, but nothing sent from uCode */

		/* If an RXB doesn't have a Rx queue slot associated with it,

		 * then a bug has been introduced in the queue refilling

 account for status word */

		/* Based on type of command response or notification,

		 *   handle those that need handling via function in

 No handling needed */

		/*

		 * XXX: After here, we should always check rxb->page

		 * against NULL before touching it or its virtual

		 * memory (pkt). Because some handler might have

		 * already taken or freed the pages.

			/* Invoke any callbacks, transfer the buffer to caller,

			 * and fire off the (possibly) blocking il_send_cmd()

		/* Reuse the page if possible. For notification packets and

		 * SKBs that fail to Rx correctly, add them back into the

		/* If there are a lot of unused frames,

 Backtrack one entry */

 call this function to flush any scheduled tasklet */

 wait to make sure we flush pending tasklet */

	/* Ack/clear/reset pending uCode interrupts.

	 * Note:  Some bits in CSR_INT are "OR" of bits in CSR_FH_INT_STATUS,

	/* Ack/clear/reset pending flow-handler (DMA) interrupts.

	 * Any new interrupts that happen after this, either while we're

 just for debug */

	/* Since CSR_INT and CSR_FH_INT_STATUS reads and clears are not

	 * atomic, make sure that inta covers all the interrupts that

	 * we've discovered, even if FH interrupt came in just after

 Now service all interrupt bits discovered above. */

 Tell the device to stop sending interrupts */

 NIC fires this, but we don't use it, redundant with WAKEUP */

 Alive notification via Rx interrupt will do the real work */

 Safely ignore these bits for debug checks below */

 Error detected by uCode */

 uCode wakes up after power-down sleep */

	/* All uCode command responses, including Tx command responses,

	 * Rx "responses" (frame-received notification), and other

 Re-enable all interrupts */

 only Re-enable if disabled by irq */

		/* If passive , set up for auto-switch

		 *  and use long active_dwell time.

 passive */

 active */

		/* Set direct probe bits. These may be used both for active

		 * scan channels (probes gets sent right away),

		 * or for passive channels (probes get se sent only after

			/* uCode v1 does not allow setting direct probe bits on

 Set txpower levels to defaults */

 scan_pwr_info->tpc.dsp_atten; */

scan_pwr_info->tpc.tx_gain; */

			/* NOTE: if we were doing 6Mb OFDM for scans we'd use

			 * power level:

			 * scan_ch->tpc.tx_gain = ((1 << 5) | (2 << 3)) | 3;

 Rate scaling will work on idxes */

			/*

			 * If CCK != 1M then set short preamble rate flag.

/******************************************************************************

 *

 * uCode download functions

 *

/*

 * il3945_verify_inst_full - verify runtime uCode image in card vs. host,

 *     looking at all data.

 read data comes through single port, auto-incr addr */

		/* NOTE: Use the debugless read so we don't flood kernel log

/*

 * il3945_verify_inst_sparse - verify runtime uCode image in card vs. host,

 *   using sample data 100 bytes apart.  If these sample points are good,

 *   it's a pretty good bet that everything between them is good, too.

 read data comes through single port, auto-incr addr */

		/* NOTE: Use the debugless read so we don't flood kernel log

 Enable this if you want to see details */

/*

 * il3945_verify_ucode - determine which instruction image is in SRAM,

 *    and verify its contents

 Try bootstrap */

 Try initialize */

 Try runtime/protocol */

	/* Since nothing seems to match, show first several data entries in

	 * instruction SRAM, so maybe visual inspection will give a clue.

 Remove all resets to allow NIC to operate */

/*

 * il3945_read_ucode - Read uCode images from disk file.

 *

 * Copy into buffers for card to fetch via bus-mastering

 firmware file name contains uCode/driver compatibility version */

	/* Ask kernel firmware_class module to get the boot firmware off disk.

 Make sure that we got at least our header! */

 Data from ucode file:  header followed by uCode images */

	/* api_ver should match the api version forming part of the

	 * firmware filename ... but we don't check for that and only rely

www.intellinuxwireless.org.\n", api_max,

 Verify size of file vs. image size info in file's header */

 Verify that uCode images will fit in card's SRAM */

 Allocate ucode buffers for card's bus-master loading ... */

	/* Runtime instructions and 2 copies of data:

	 * 1) unmodified from disk

 Initialization instructions and data */

 Bootstrap (instructions only, no data) */

 Copy images into buffers for card's bus-master reads ... */

 Runtime instructions (first block of data in file) */

	/* Runtime data (2nd block)

 Initialization instructions (3rd block) */

 Initialization data (4th block) */

 Bootstrap instructions (5th block) */

 We have our copies now, allow OS release its copies */

/*

 * il3945_set_ucode_ptrs - Set uCode address location

 *

 * Tell initialization uCode where to find runtime uCode.

 *

 * BSM registers initially contain pointers to initialization uCode.

 * We need to replace them to load runtime uCode inst and data,

 * and to save runtime data when powering down.

 bits 31:0 for 3945 */

 Tell bootstrap uCode where to find image to load */

	/* Inst byte count must be last to set up, bit 31 signals uCode

/*

 * il3945_init_alive_start - Called after N_ALIVE notification received

 *

 * Called after N_ALIVE notification received from "initialize" uCode.

 *

 * Tell "initialize" uCode to go ahead and load the runtime uCode.

 Check alive response for "valid" sign from uCode */

		/* We had an error bringing up the hardware, so take it

	/* Bootstrap uCode has loaded initialize uCode ... verify inst image.

	 * This is a paranoid check, because we would not have gotten the

		/* Runtime instruction load was bad;

	/* Send pointers to protocol/runtime uCode image ... init code will

	 * load and launch runtime uCode, which will send us another "Alive"

		/* Runtime instruction load won't happen;

/*

 * il3945_alive_start - called after N_ALIVE notification received

 *                   from protocol/runtime uCode (initialization uCode's

 *                   Alive gets handled by il3945_init_alive_start()).

		/* We had an error bringing up the hardware, so take it

	/* Initialize uCode has loaded Runtime uCode ... verify inst image.

	 * This is a paranoid check, because we would not have gotten the

		/* Runtime instruction load was bad;

		/* if RFKILL is not on, then wait for thermal

 After the ALIVE response, we can send commands to 3945 uCode */

 Enable watchdog to monitor the driver tx queues */

 Initialize our rx_config data */

 Configure Bluetooth device coexistence support */

 Configure the adapter for unassociated operation */

	/* Stop TX queues watchdog. We need to have S_EXIT_PENDING bit set

 Station information will now be cleared in device */

 Unblock any waiting calls */

	/* Wipe out the EXIT_PENDING status bit if we are not actually

 stop and reset the on-board processor */

 tell the device to stop sending interrupts */

	/* If we have not previously called il3945_init() then

	/* ...otherwise clear out all the status bits but the RF Kill

	/*

	 * We disabled and synchronized interrupt, and priv->mutex is taken, so

	 * here is the only thread which will program device registers, but

	 * still have lockdep assertions, so we are taking reg_lock.

 FIXME: il_grab_nic_access if rfkill is off ? */

 Power-down device's busmaster DMA clocks */

 Stop the device, and put it in low power state */

 clear out any free frames */

 If platform's RF_KILL switch is NOT set to KILL */

 make sure rfkill handshake bits are cleared */

 clear (again), then enable host interrupts */

 really make sure rfkill handshake bits are cleared */

	/* Copy original ucode data image from disk into backup cache.

	 * This will be used to initialize the on-board processor's

 We return success when we resume from suspend and rf_kill is on. */

		/* load bootstrap state machine,

		 * load bootstrap program into processor's memory,

 start card; "initialize" will load runtime ucode */

	/* tried to restart and config the device for as long as our

/*****************************************************************************

 *

 * Workqueue callbacks

 *

/*

 * 3945 cannot interrupt driver when hardware rf kill switch toggles;

 * driver must poll CSR_GP_CNTRL_REG register for change.  This register

 * *is* readable even when device has been SW_RESET into low power mode

 * (e.g. during RF KILL).

	/* Keep this running, even if radio now enabled.  This will be

		/*

		 * suspend time format:

		 *  0-19: beacon interval in usec (time before exec.)

		 * 20-23: 0

		 * 24-31: number of beacons (suspend between channels)

 always does wildcard anyway */

	/* We don't build a direct scan probe request; the uCode will do

 flags + rate selection */

	/*

	 * If active scaning is requested but a certain channel is marked

	 * passive, we can do active scanning if we detect transmissions. For

	 * passive only scanning disable switching to active on any channel.

 select Rx antennas */

	/*

	 * Since setting the RXON may have been deferred while

	 * performing the scan, fire one off if needed

/*****************************************************************************

 *

 * mac80211 entry point functions

 *

 we should be verifying the device is ready to be opened */

	/* fetch ucode file from disk, alloc and copy to bus-master buffers ...

	/* Wait for START_ALIVE from ucode. Otherwise callbacks from

	/* ucode is running and will send rfkill notifications,

 start polling the killswitch state again */

 The following should be done only at AP bring up */

 RXON - unassoc (to set timing command) */

 RXON Timing */

 restore RXON assoc */

	/*

	 * To support IBSS RSN, don't program group keys in IBSS, the

	 * hardware will then not attempt to decrypt the frames.

 Should we return success if return code is EEXIST ? */

 Initialize rate scaling */

	/*

	 * Not committing directly because hardware can perform a scan,

	 * but even if hw is ready, committing here breaks for some reason,

	 * we'll eventually commit the filter flags change anyway.

	/*

	 * Receiving all multicast frames is always enabled by the

	 * default flags setup in il_connection_init_rx_config()

	 * since we currently do not support programming multicast

	 * filters into the device.

/*****************************************************************************

 *

 * sysfs attributes

 *

/*

 * The following adds a new attribute to the sysfs representation

 * of this device driver (i.e. a new file in /sys/bus/pci/drivers/iwl/)

 * used for controlling the debug level.

 *

 * See the level definitions in iwl for details.

 *

 * The debug_level being managed using sysfs below is a per device debug

 * level that is used instead of the global debug level if it (the per

 * device debug level) is set.

 CONFIG_IWLEGACY_DEBUG */

 Cancel any currently running scans... */

 Cancel any currently running scans... */

 all this shit doesn't belong into sysfs anyway */

/*****************************************************************************

 *

 * driver setup and tear down

 *

 put in device directory */

 initialize force reset */

 Set up txpower settings in driver for all channels */

 Tell mac80211 our characteristics */

 we create the 802.11 header and a zero-length SSID element */

 Default value; 4 EDCA QOS priorities */

	/***********************

	 * 1. Allocating HW data

	/***************************

	 * 2. Initializing PCI bus

	/***********************

	 * 3. Read REV Register

	/* We disable the RETRY_TIMEOUT register (0x41) to keep

	/* these spin locks will be used in apm_init and EEPROM access

	 * we should init now

	/*

	 * stop and reset the on-board processor just in case it is in a

	 * strange state ... like being left stranded by a primary kernel

	 * and this is now the kdump kernel trying to start up

	/***********************

	 * 4. Read EEPROM

 Read the EEPROM */

 MAC Address location in EEPROM same for 3945/4965 */

	/***********************

	 * 5. Setup HW Constants

 Device-specific setup */

	/***********************

	 * 6. Setup il

	/***********************

	 * 7. Setup Services

	/*********************************

	 * 8. Setup and Register mac80211

 Start monitoring the killswitch */

	/*

	 * Make sure device is reset to low power before unloading driver.

	 * This may be redundant with il_down(), but there are paths to

	 * run il_down() without calling apm_ops.stop(), and there are

	 * paths to avoid running il_down() at all before leaving driver.

	 * This (inexpensive) call *makes sure* device is reset.

	/* make sure we flush any pending irq or

	 * tasklet for the driver

netif_stop_queue(dev); */

	/* ieee80211_unregister_hw calls il3945_mac_stop, which flushes

	 * il->workqueue... so we can't take down the workqueue

/*****************************************************************************

 *

 * driver and module entry point

 *

	/*

	 * Disabling hardware scan means that mac80211 will perform scans

	 * "the hard way", rather than using device's scan.

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*

* Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.

*

* Contact Information:

*  Intel Linux Wireless <ilw@linux.intel.com>

* Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

	/*

	 * the statistic information display here is based on

	 * the last stats notification from uCode

	 * might not reflect the current uCode activity

	/* the statistic information display here is based on

	 * the last stats notification from uCode

	 * might not reflect the current uCode activity

	/* the statistic information display here is based on

	 * the last stats notification from uCode

	 * might not reflect the current uCode activity

/******************************************************************************

 *

 * This file is provided under a dual BSD/GPLv2 license.  When using or

 * redistributing this file, you may do so under either license.

 *

 * GPL LICENSE SUMMARY

 *

 * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of version 2 of the GNU General Public License as

 * published by the Free Software Foundation.

 *

 * This program is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110,

 * USA

 *

 * The full GNU General Public License is included in this distribution

 * in the file called LICENSE.GPL.

 *

 * Contact Information:

 *  Intel Linux Wireless <ilw@linux.intel.com>

 * Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

 *

 * BSD LICENSE

 *

 * Copyright(c) 2005 - 2011 Intel Corporation. All rights reserved.

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 *

 *  * Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer.

 *  * Redistributions in binary form must reproduce the above copyright

 *    notice, this list of conditions and the following disclaimer in

 *    the documentation and/or other materials provided with the

 *    distribution.

 *  * Neither the name Intel Corporation nor the names of its

 *    contributors may be used to endorse or promote products derived

 *    from this software without specific prior written permission.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR

 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT

 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,

 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT

 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,

 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY

 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE

 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/*****************************************************************************

 * INIT calibrations framework

/*****************************************************************************

 * RUNTIME calibrations framework

/* "false alarms" are signals that our DSP tries to lock onto,

 *   but then determines that they are either noise, or transmissions

 *   from a distant wireless network (also "noise", really) that get

 *   "stepped on" by stronger transmissions within our own network.

 * This algorithm attempts to set a sensitivity level that is high

 *   enough to receive all of our own network traffic, but not so

 *   high that our DSP gets too busy trying to lock onto non-network

	/* "false_alarms" values below are cross-multiplications to assess the

	 *   numbers of false alarms within the measured period of actual Rx

	 *   (Rx is off when we're txing), vs the min/max expected false alarms

	 *   (some should be expected if rx is sensitive enough) in a

	 *   hypothetical listening period of 200 time units (TU), 204.8 msec:

	 *

	 * MIN_FA/fixed-time < false_alarms/actual-rx-time < MAX_FA/beacon-time

	 *

	/* Find max silence rssi among all 3 receivers.

	 * This is background noise, which may include transmissions from other

 Store silence rssi in 20-beacon history table */

 Find max silence rssi across 20 beacon history */

	/* Find max rx energy (min value!) among all 3 receivers,

	 *   measured during beacon frame.

	/* Find min rx energy (max value) across 10 beacon history.

	 * This is the minimum signal level that we want to receive well.

	 * Add backoff (margin so we don't miss slightly lower energy frames).

	/* Count number of consecutive beacons with fewer-than-desired

 If we got too many false alarms this time, reduce sensitivity */

 Store for "fewer than desired" on later beacon */

		/* increase energy threshold (reduce nrg value)

 Else if we got fewer than desired, increase sensitivity */

		/* Compare silence level with silence level for most recent

		/* Increase value to increase sensitivity, but only if:

		 * 1a) previous beacon did *not* have *too many* false alarms

		 * 1b) AND there's a significant difference in Rx levels

		 *      from a previous beacon with too many, or healthy # FAs

		 * OR 2) We've seen a lot of beacons (100) with too few

 Increase nrg value to increase sensitivity */

 Else we got a healthy number of false alarms, keep status quo */

 Store for use in "fewer than desired" with later beacon */

		/* If previous beacon had too many false alarms,

		 *   give it some extra margin by reducing sensitivity again

	/* Make sure the energy threshold does not go above the measured

	 * energy of the desired Rx signals (reduced by backoff margin),

	 * or else we might start missing Rx frames.

	 * Lower value is higher energy, so we use max()!

 Auto-correlation CCK algorithm */

		/* increase auto_corr values to decrease sensitivity

		 * so the DSP won't be disturbed by the noise

 Decrease auto_corr values to increase sensitivity */

 If we got too many false alarms this time, reduce sensitivity */

 Else if we got fewer than desired, increase sensitivity */

 Prepare a C_SENSITIVITY, send to uCode if values have changed */

 Update uCode's "work" table, and copy it to DSP */

 Don't send command to uCode if nothing has changed */

 Copy table for comparison next time */

 Clear driver's sensitivity algo data */

 Extract Statistics: */

	/* These stats increase monotonically, and do not reset

	 *   at each beacon.  Calculate difference from last value, or just

 Total aborted signal locks */

/*

 * Run disconnected antenna algorithm to find out which antennas are

 * disconnected.

 Compare signal strengths for all 3 receivers. */

			/* If signal is very weak, compared with

	/*

	 * The above algorithm sometimes fails when the ucode

	 * reports 0 for all chains. It's not clear why that

	 * happens to start with, but it is then causing trouble

	 * because this can make us enable more chains than the

	 * hardware really has.

	 *

	 * To be safe, simply mask out any chains that we know

	 * are not on the device.

		/* loops on all the bits of

 there is a Tx antenna connected */

			/*

			 * If all chains are disconnected

			 * connect the first valid tx chain

 Save for use within RXON, TX, SCAN commands, etc. */

 Differential gain gets sent to uCode only once */

		/* TODO we might want recalculate

 Mark so we run this algo only once! */

/*

 * Accumulate 16 beacons of signal and noise stats for each of

 *   3 receivers/antennas/rx-chains, then figure out:

 * 1)  Which antennas are connected.

 * 2)  Differential rx gain settings to balance the 3 receivers.

	/*

	 * Accumulate just the first "chain_noise_num_beacons" after

	 * the first association, then we're done forever.

	/* Make sure we accumulate data for just the associated channel

	/*

	 *  Accumulate beacon stats values across

	 * "chain_noise_num_beacons"

	/* If this is the "chain_noise_num_beacons", determine:

	 * 1)  Disconnected antennas (using signal strengths)

 Analyze signal for disconnected antenna */

 Analyze noise for rx balance */

			/* This means that chain i is active and has

	/* Some power changes may have been made during the calibration.

	 * Update and commit the RXON

	/* Ask for stats now, the uCode will send notification

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2005 - 2011 Intel Corporation. All rights reserved.

 *

 * Contact Information:

 *  Intel Linux Wireless <ilw@linux.intel.com>

 * Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

 *

 # tx in history win */

 min failures to calc tpt */

 min successes to calc tpt */

 max allowed rate miss before sync LQ cmd */

 max time to accum history 2 seconds */

ANT_NONE -> */ ANT_NONE,

ANT_A    -> */ ANT_B,

ANT_B    -> */ ANT_C,

ANT_AB   -> */ ANT_BC,

ANT_C    -> */ ANT_A,

ANT_AC   -> */ ANT_AB,

ANT_BC   -> */ ANT_AC,

ANT_ABC  -> */ ANT_ABC,

/*

 * Parameter order:

 *   rate, ht rate, prev rate, next rate, prev tgg rate, next tgg rate

 *

 * If there isn't a valid next or previous rate then INV is used which

 * maps to RATE_INVALID

 *

  1mbps */

  2mbps */

5.5mbps */

 11mbps */

  6mbps */

  9mbps */

 12mbps */

 18mbps */

 24mbps */

 36mbps */

 48mbps */

 54mbps */

 60mbps */

 HT rate format */

 skip 9M not supported in ht */

 legacy rate format, search for match in table */

/*

 * The following tables contain the expected throughput metrics for all rates

 *

 *	1, 2, 5.5, 11, 6, 9, 12, 18, 24, 36, 48, 54, 60 MBits

 *

 * where invalid entries are zeros.

 *

 * CCK rates are only valid in legacy table and will only be used in G

 * (2.4 GHz) band.

 Norm */

 SGI */

 AGG */

 AGG+SGI */

 Norm */

 SGI */

 AGG */

 AGG+SGI */

 Norm */

 SGI */

 AGG */

 AGG+SGI */

 Norm */

 SGI */

 AGG */

 AGG+SGI */

 mbps, mcs */

/*

 *	removes the old data from the stats. All data that is older than

 *	TID_MAX_TIME_DIFF, will be deleted.

 The oldest age we want to keep */

/*

 *	increment traffic load value for tid and also remove

 *	any old values if passed the certain time period

 Happens only for the first packet. Initialize the data */

 The history is too long: remove data that is older than */

 TID_MAX_TIME_DIFF */

/*

	get the traffic load value for tid

 The history is too long: remove data that is older than */

 TID_MAX_TIME_DIFF */

			/*

			 * driver and mac80211 is out of sync

			 * this might be cause by reloading firmware

			 * stop the tx ba session here

/*

 * Static function to get the expected throughput from an il_scale_tbl_info

 * that wraps a NULL pointer check

/*

 * il4965_rs_collect_tx_data - Update the success/failure sliding win

 *

 * We keep a sliding win of the last 62 packets transmitted

 * at this rate.  win->data contains the bitmask of successful

 * packets.

 Select win for current tx bit rate */

 Get expected throughput */

	/*

	 * Keep track of only the latest 62 tx frame attempts in this rate's

	 * history win; anything older isn't really relevant any more.

	 * If we have filled up the sliding win, drop the oldest attempt;

	 * if the oldest attempt (highest bit in bitmap) shows "success",

	 * subtract "1" from the success counter (this is the main reason

	 * we keep these bitmaps!).

 remove earliest */

 Increment frames-attempted counter */

 Shift bitmap by one frame to throw away oldest history */

 Mark the most recent #successes attempts as successful */

 Calculate current success ratio, avoid divide-by-0! */

 Calculate average throughput, if we have enough history. */

 Tag this win as having been updated */

/*

 * Fill uCode API rate_n_flags field, based on "search" or "active" table.

/*

 * Interpret uCode API's rate_n_flags format,

 * fill "search" or "active" tx mode table.

 default legacy setup */

 legacy rate format */

 HT rate format */

 SISO */

else NONE */

 MIMO2 */

 switch to another antenna/antennas and return 1 */

 if no other valid antenna found, return 0 */

/*

 * Green-field mode is valid if the station supports it and

 * there are no non-GF stations present in the BSS.

/*

 * il4965_rs_get_supported_rates - get the available rates

 *

 * if management frame or broadcast frame only return

 * basic available rates.

 *

	/* 802.11A or ht walks to the next literal adjacent rate in

 Find the previous rate that is in the rate mask */

 Find the next rate that is in the rate mask */

	/* check if we need to switch from HT to legacy rates.

	 * assumption is that mandatory rates (1Mbps or 6Mbps)

 Mask with station rate restriction */

 supp_rates has no CCK bits in A mode */

 If we switched from HT to legacy, check current rate */

/*

 * Simple function to compare two rate scale table types

/*

 * mac80211 sends us Tx status

 Treat uninitialized rate scaling data same as non-existing. */

 This packet was aggregated but doesn't carry status info */

	/*

	 * Ignore this Tx frame response if its initial rate doesn't match

	 * that of latest Link Quality command.  There may be stragglers

	 * from a previous Link Quality command, but we're no longer interested

	 * in those; they're either from the "active" mode while we're trying

	 * to check "search" mode, or a prior "search" mode after we've moved

	 * to a new "search" mode (which might become the new "active" mode).

 For HT packets, map MCS to PLCP */

 Remove # of streams */

		/*

		 * mac80211 HT idx is always zero-idxed; we need to move

		 * HT OFDM rates after CCK rates in 2.4 GHz band

 Here we actually compare this rate to the latest LQ command */

		/*

		 * Since rates mis-match, the last LQ command may have failed.

		 * After IL_MISSED_RATE_MAX mis-matches, resync the uCode with

		 * ... driver.

 Regardless, ignore this status info for outdated rate */

 Rate did match, so reset the missed_rate_counter */

 Figure out if rate scale algorithm is in active or search table */

		/*

		 * no matching table found, let's by-pass the data collection

		 * and continue to perform rate scale to find the rate table

	/*

	 * Updating the frame history depends on whether packets were

	 * aggregated.

	 *

	 * For aggregation, all packets were transmitted at the same rate, the

	 * first idx into rate scale table.

 Update success/fail counts if not searching for new mode */

		/*

		 * For legacy, update frame history with for each Tx retry.

 HW doesn't send more than 15 retries */

 The last transmission may have been successful */

 Collect data for each rate used during failed TX attempts */

			/*

			 * Only collect stats if retried rate is in the same RS

			 * table as active/search.

 Update success/fail counts if not searching for new mode */

 The last TX rate is cached in lq_sta; it's set in if/else above */

 See if there's a better rate or modulation mode to try. */

/*

 * Begin a period of staying with a selected modulation mode.

 * Set "stay_in_tbl" flag to prevent any mode switches.

 * Set frame tx success limits according to legacy vs. high-throughput,

 * and reset overall (spanning all rates) tx success history stats.

 * These control how long we stay using same modulation mode before

 * searching for a new mode.

 only place this gets set */

/*

 * Find correct throughput table for given mode of modulation

 Used to choose among HT tables */

 Check for invalid LQ type */

 Legacy rates have only one table */

	/* Choose among many HT tables depending on number of streams

	 * (SISO/MIMO2), channel width (20/40), SGI, and aggregation

 if (is_mimo2(tbl->lq_type)) <-- must be true */

 Normal */

 SGI */

 AGG */

 AGG+SGI */

/*

 * Find starting rate for new "search" high-throughput mode of modulation.

 * Goal is to find lowest expected rate (under perfect conditions) that is

 * above the current measured throughput of "active" mode, to give new mode

 * a fair chance to prove itself without too many challenges.

 *

 * This gets called when transitioning to more aggressive modulation

 * (i.e. legacy to SISO or MIMO, or SISO to MIMO), as well as less aggressive

 * (i.e. MIMO to SISO).  When moving to MIMO, bit rate will typically need

 * to decrease to match "active" throughput.  When moving from MIMO to SISO,

 * bit rate will typically need to increase, but not if performance was bad.

 "search" */

 "active" values */

 expected "search" throughput */

		/*

		 * Lower the "search" bit rate, to give new "search" mode

		 * approximately the same throughput as "active" if:

		 *

		 * 1) "Active" mode has been working modestly well (but not

		 *    great), and expected "search" throughput (under perfect

		 *    conditions) at candidate rate is above the actual

		 *    measured "active" throughput (but less than expected

		 *    "active" throughput under perfect conditions).

		 * OR

		 * 2) "Active" mode has been working perfectly or very well

		 *    and expected "search" throughput (under perfect

		 *    conditions) at candidate rate is above expected

		 *    "active" throughput (under perfect conditions).

			/* (2nd or later pass)

			 * If we've already tried to raise the rate, and are

 Loop again with lower rate */

 Lower rate not available, use the original */

 Else try to raise the "search" rate to match "active" */

			/* (2nd or later pass)

			 * If we've already tried to lower the rate, and are

 Loop again with higher rate */

 Higher rate not available, use the original */

/*

 * Set up search table for MIMO2

 Need both Tx chains/antennas to support MIMO */

/*

 * Set up search table for SISO

11n spec: no SGI in SISO+Greenfield */

/*

 * Try to switch to new modulation mode from legacy

 Don't change antenna if success has been great */

 Set up search table to try other antenna */

 Set up search table to try SISO */

 Set up search table to try MIMO */

/*

 * Try to switch to new modulation mode from SISO

/*

 * Try to switch to new modulation mode from MIMO2

 Set up new search table for SISO */

 Set up new search table for MIMO2 */

			/*

			 * If active table already uses the fastest possible

			 * modulation (dual stream with short guard interval),

			 * and it's working well, there's no need to look

			 * for a better type of modulation!

/*

 * Check whether we should continue using same modulation mode, or

 * begin search for a new mode, based on:

 * 1) # tx successes or failures while using this mode

 * 2) # times calling this function

 * 3) elapsed time in this mode (not used, for now)

 If we've been disallowing search, see if we should now allow it */

 Elapsed time using current modulation mode */

		/*

		 * Check if we should allow search for new modulation mode.

		 * If many frames have failed or succeeded, or we've used

		 * this same modulation for a long time, allow search, and

		 * reset history stats that keep track of whether we should

		 * allow a new search.  Also (below) reset all bitmaps and

		 * stats in active history.

 Allow search for new mode */

 only place reset */

			/*

			 * Else if we've used this modulation mode enough repetitions

			 * (regardless of elapsed time or success/failure), reset

			 * history bitmaps and rate-specific stats for all rates in

			 * active table.

		/* If transitioning to allow "search", reset all history

		 * bitmaps and stats in active table (this will become the new

/*

 * setup rate table in uCode

 Update uCode's rate table. */

/*

 * Do rate scaling and search for new modulation mode.

 Send management frames and NO_ACK data using lowest rate. */

 TODO: this could probably be improved.. */

	/*

	 * Select rate-scale / modulation-mode table to work with in

	 * the rest of this function:  "search" if searching for better

	 * modulation mode, or "active" if doing rate scaling within a mode.

 current tx rate */

 rates available for this association, and for modulation mode */

 mask with station rate restriction */

 supp_rates has no CCK bits in A mode */

 revert to active table if search table is not valid */

 get "active" rate info */

 Get expected throughput table and history win for current rate */

 force user max rate if set by user */

	/*

	 * If there is not enough history to calculate actual average

	 * throughput, keep analyzing results of more tx frames, without

	 * changing rate or mode (bypass most of the rest of this function).

	 * Set up new rate table in uCode only if old rate is not supported

	 * in current association (use new rate found above).

 Can't calculate this yet; not enough history */

		/* Should we stay with this modulation mode,

	/* Else we have enough samples; calculate estimate of

 If we are searching for better modulation mode, check success. */

		/* If good success, continue using the "search" mode;

		 * no need to send new link quality command, since we're

 Swap tables; "search" becomes "active" */

 Else poor success; go back to mode in "active" table */

 Nullify "search" table */

 Revert to "active" table */

 Revert to "active" rate and throughput info */

 Need to set up a new rate table in uCode */

		/* Either way, we've made a decision; modulation mode

 Don't switch modes below! */

	/* (Else) not in search of better modulation mode, try for better

 If user set max rate, dont allow higher than user constrain */

 Collect measured throughputs for current and adjacent rates */

 Too many failures, decrease rate */

 No throughput measured yet for adjacent rates; try increase. */

	/* Both adjacent throughputs are measured, but neither one has better

	/* At least one adjacent rate's throughput is measured,

 Higher adjacent rate's throughput is measured */

 Higher rate has better throughput */

 Lower adjacent rate's throughput is measured */

 Lower rate has better throughput */

	/* Sanity check; asked for decrease, but success rate or throughput

 Decrease starting rate, update uCode's rate table */

 Increase starting rate, update uCode's rate table */

 No change */

 Replace uCode's rate table for the destination station. */

	/* Should we stay with this modulation mode,

	/*

	 * Search for new modulation mode if we're:

	 * 1)  Not changing rates right now

	 * 2)  Not just finishing up a search

	 * 3)  Allowing a new search

 Save current throughput to compare with "search" throughput */

		/* Select a new "search" modulation mode to try.

 (is_mimo2(tbl->lq_type)) */

 If new "search" mode was selected, set up in uCode table */

 Access the "search" table, clear its history. */

 Use new "search" start rate */

		/* If the "active" (non-search) mode was legacy,

		 * and we've tried switching antennas,

		 * but we haven't been able to try HT modes (not available),

		 * stay with best antenna legacy modulation for a while

		/* If we're in an HT mode, and all 3 mode switch actions

		 * have been tried and compared, stay in this best modulation

/*

 * il4965_rs_initialize_lq - Initialize a station's hardware rate table

 *

 * The uCode's station table contains a table of fallback rates

 * for automatic fallback during transmission.

 *

 * NOTE: This sets up a default set of values.  These will be replaced later

 *       if the driver's iwl-4965-rs rate scaling algorithm is used, instead of

 *       rc80211_simple.

 *

 * NOTE: Run C_ADD_STA command to set up station table entry, before

 *       calling this function (which runs C_TX_LINK_QUALITY_CMD,

 *       which requires station table entry to exist).

 Get max rate if user set max rate */

 Treat uninitialized rate scaling data same as non-existing. */

 6M and 9M shared same MCS idx */

 Check for invalid rates */

 On valid 5 GHz rate, adjust idx */

/*

 * Called after adding a new station to initialize rate scaling

	/* TODO: what is a good starting rate for STA? About middle? Maybe not

	 * the lowest or the highest rate.. Could consider using RSSI from

	 * previous packets? Need to have IEEE 802.1X auth succeed immediately

	/*

	 * active_siso_rate mask includes 9 MBits (bit 5), and CCK (bits 0-3),

	 * supp_rates[] does not; shift to convert format, force 9 MBits off.

 Same here */

 These values will be overridden later */

 as default allow aggregation for all tids */

 Set last_txrate_idx to lowest rate */

 Override starting rate (idx 0) if needed for debug purposes */

 Interpret new_rate (rate_n_flags) */

 How many times should we repeat the initial rate? */

 Fill 1st table entry (idx 0) */

 otherwise we don't modify the existing value */

 Fill rest of rate table */

		/* Repeat initial/next rate.

		 * For legacy IL_NUMBER_TRY == 1, this loop will not execute.

 Override next rate if needed for debug purposes */

 Fill next table entry */

		/* Indicate to uCode which entries might be MIMO.

		 * If initial rate was MIMO, this will finally end up

 Get next rate */

 How many times should we repeat the next rate? */

		/* Don't allow HT rates after next pass.

 Override next rate if needed for debug purposes */

 Fill next table entry */

 rate scale requires free function to be implemented */

 1 - 54 MBits, includes CCK */

 6 - 60 MBits, no 9, no CCK */

 6 - 60 MBits, no 9, no CCK */

/*

 * Initialization of rate scaling information is done by driver after

 * the station is added. Since mac80211 calls this function before a

 * station is added we ignore it.

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.

 *

 * Contact Information:

 *  Intel Linux Wireless <ilw@linux.intel.com>

 * Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

/*

 * il_update_stats function record all the MGMT, CTRL and DATA pkt for

 * both TX and Rx . Use debugfs to display the rx/rx_stats

 data */

 create and remove of files */

 file operation */

 default is to dump the entire data segment */

 Add 30 for initial string */

 4 characters for byte 0xYY */

 24 items * 64 char per item */

 for the ACs, display the stop count too */

 make request to uCode to retrieve stats information */

/*

 * Create the debugfs files and directories

 *

/*

 * Remove the debugfs files and directories

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.

 *

 * Contact Information:

 *  Intel Linux Wireless <ilw@linux.intel.com>

 * Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

 microseconds */

 this bit wakes up the NIC */

	/*

	 * These bits say the device is running, and should keep running for

	 * at least a short while (at least as long as MAC_ACCESS_REQ stays 1),

	 * but they do not indicate that embedded SRAM is restored yet;

	 * 3945 and 4965 have volatile SRAM, and must save/restore contents

	 * to/from host DRAM when sleeping/waking for power-saving.

	 * Each direction takes approximately 1/4 millisecond; with this

	 * overhead, it's a good idea to grab and hold MAC_ACCESS_REQUEST if a

	 * series of register accesses are expected (e.g. reading Event Log),

	 * to keep device from sleeping.

	 *

	 * CSR_UCODE_DRV_GP1 register bit MAC_SLEEP == 0 indicates that

	 * SRAM is okay/restored.  We don't check that here because this call

	 * is just for hardware register access; but GP1 MAC_SLEEP check is a

	 * good idea before accessing 3945/4965 SRAM (e.g. reading Event Log).

	 *

 microseconds */

 An asynchronous command can not expect an SKB to be set. */

 Assign a generic callback if one is not provided */

 A synchronous command can not have a callback set. */

		/*

		 * Cancel the CMD_WANT_SKB flag for the cmd in the

		 * TX cmd queue. Otherwise in case the cmd comes

		 * in later, it will possibly set an invalid

		 * address (cmd->meta.source).

 default: IL_LED_BLINK(0) using blinking idx table */

/* Throughput		OFF time(ms)	ON time (ms)

 *	>300			25		25

 *	>200 to 300		40		40

 *	>100 to 200		55		55

 *	>70 to 100		65		65

 *	>50 to 70		75		75

 *	>20 to 50		85		85

 *	>10 to 20		95		95

 *	>5 to 10		110		110

 *	>1 to 5			130		130

 *	>0 to 1			167		167

 *	<=0					SOLID ON

/*

 * Adjust led blink rate to compensate on a MAC Clock difference on every HW

 * Led blink rate analysis showed an average deviation of 0% on 3945,

 * 5% on 4965 HW.

 * Need to compensate on the led on/off time per HW according to the deviation

 * to achieve the desired led frequency

 * The calculation is: (100-averageDeviation)/100 * blinkTime

 * For code efficiency the calculation will be:

 *     compensation = (100 - averageDeviation) * 64 / 100

 *     NewBlinkTime = (compensation * BlinkTime) / 64

 Set led pattern command */

 led is SOLID_ON */

/************************** EEPROM BANDS ****************************

 *

 * The il_eeprom_band definitions below provide the mapping from the

 * EEPROM contents to the specific channel number supported for each

 * band.

 *

 * For example, il_priv->eeprom.band_3_channels[4] from the band_3

 * definition below maps to physical channel 42 in the 5.2GHz spectrum.

 * The specific geography and calibration information for that channel

 * is contained in the eeprom map itself.

 *

 * During init, we copy the eeprom information and channel map

 * information into il->channel_info_24/52 and il->channel_map_24/52

 *

 * channel_map_24/52 provides the idx in the channel_info array for a

 * given channel.  We have to have two separate maps as there is channel

 * overlap with the 2.4GHz and 5.2GHz spectrum as seen in band_1 and

 * band_2

 *

 * A value of 0xff stored in the channel_map indicates that the channel

 * is not supported by the hardware at all.

 *

 * A value of 0xfe in the channel_map indicates that the channel is not

 * valid for Tx with the current hardware.  This means that

 * while the system can tune and receive on a given channel, it may not

 * be able to associate or transmit any frames on that

 * channel.  There is no corresponding channel information for that

 * entry.

 *

 2.4 GHz */

 5.2 GHz bands */

 4915-5080MHz */

 5170-5320MHz */

 5500-5700MHz */

 5725-5825MHz */

 2.4 ht40 channel */

 5.2 ht40 channel */

/******************************************************************************

 *

 * EEPROM related functions

 *

/*

 * il_eeprom_init - read EEPROM contents

 *

 * Load the EEPROM contents from adapter into il->eeprom

 *

 * NOTE:  This routine uses the non-debug IO access functions.

 allocate eeprom */

 Make sure driver (instead of uCode) is allowed to read EEPROM */

 eeprom is an array of 16bit values */

 Reset chip to save power until we load uCode during "up". */

 2.4GHz band */

 4.9GHz band */

 5.2GHz band */

 5.5GHz band */

 5.7GHz band */

 2.4GHz ht40 channels */

 5 GHz ht40 channels */

/*

 * il_mod_ht40_chan_info - Copy ht40 channel info into driver's il.

 *

 * Does not set up a command, or touch hardware.

/*

 * il_init_channel_map - Set up driver's info for all possible channels

	/* Loop through the 5 EEPROM bands adding them in order to the

	 * channel map we maintain (that contains additional information than

 Loop through each band adding each of the channels */

			/* permanently store EEPROM's channel regulatory flags

			/* Copy the run-time flags so they are there even on

			/* First write that ht40 is not enabled, and then enable

 Initialize regulatory-based run-time data */

 Check if we do have HT40 channels */

 Two additional EEPROM bands for 2.4 and 5 GHz HT40 channels */

 EEPROM band 6 is 2.4, band 7 is 5 GHz */

 Loop through each band adding each of the channels */

 Set up driver's info for lower half */

 Set up driver's info for upper half */

/*

 * il_free_channel_map - undo allocations in il_init_channel_map

/*

 * il_get_channel_info - Find driver's ilate channel info

 *

 * Based on band and channel number.

/*

 * Setting power level allows the card to go to sleep when not busy.

 *

 * We calculate a sleep command based on the required latency, which

 * we get from mac80211.

 if no Power Save, we are done */

 Don't update the RX chain when chain noise calibration is running */

 scan complete use sleep_power_next, need to be updated */

 initialize to default */

/* For active scan, listen ACTIVE_DWELL_TIME (msec) on each channel after

 * sending probe req.  This should be set long enough to hear probe responses

 all times in msec */

/* For passive scan, listen PASSIVE_DWELL_TIME (msec) on each channel.

 * Must be set longer than active dwell time.

 all times in msec */

	/* Exit instantly with error when device is not ready

	 * to receive scan abort command or it does not perform

		/* The scan abort will return 1 for success or

		 * 2 for "failure".  A failure condition can be

		 * due to simply not being in an active scan which

		 * can occur if we send the scan abort before we

		 * the microcode has notified us that a scan is

 check if scan was requested from mac80211 */

/*

 * il_scan_cancel - Cancel any currently executing HW scan

/*

 * il_scan_cancel_timeout - Cancel any currently executing HW scan

 * @ms: amount of time to wait (in milliseconds) for scan to abort

 *

 Service response to C_SCAN (0x80) */

 Service N_SCAN_START (0x82) */

 Service N_SCAN_RESULTS (0x83) */

 Service N_SCAN_COMPLETE (0x84) */

 The HW is no longer scanning */

 scan handlers */

		/*

		 * If we're associated, we clamp the maximum passive

		 * dwell time to be 98% of the smallest beacon interval

		 * (minus 2 * channel tune time)

 mac80211 will only ask for one band at a time */

	/* Since we are here firmware does not finish scan and

	 * most likely is in bad shape, so we don't bother to

/*

 * il_fill_probe_req - fill in all required fields and IE for probe request

	/* Make sure there is enough space for the probe request,

 ...next IE... */

 fill in our indirect SSID IE */

	/* We keep scan_check work queued in case when firmware will not

 Can we still talk to firmware ? */

	/*

	 * We do not commit power settings while scan is pending,

	 * do it now if the settings changed.

 il->sta_lock must be held */

	/*

	 * XXX: The MAC address in the command buffer is often changed from

	 * the original sent to the device. That is, the MAC address

	 * written to the command buffer often is not the same MAC address

	 * read from the command buffer when the command returns. This

	 * issue has not yet been resolved and this debugging is left to

	 * observe the problem.

/*

 * il_prep_station - Prepare station information for addition

 *

 * should be called with sta_lock held

	/*

	 * These two conditions have the same outcome, but keep them

	 * separate

	/*

	 * uCode is not able to deal with multiple requests to add a

	 * station. Keep track if one is in progress so that we do not send

	 * another.

 Set up the C_ADD_STA command to send to device */

	/*

	 * OK to call unconditionally, since local stations (IBSS BSSID

	 * STA and broadcast STA) pass in a NULL sta, and mac80211

	 * doesn't allow HT IBSS.

 3945 only */

 Turn on both antennas for the station... */

/*

 * il_add_station_common -

	/*

	 * uCode is not able to deal with multiple requests to add a

	 * station. Keep track if one is in progress so that we do not send

	 * another.

 Add station to device's station table */

/*

 * il_sta_ucode_deactivate - deactivate ucode status for a station

 *

 * il->sta_lock must be held

 Ucode must be active and driver must be non active */

/*

 * il_remove_station - Remove driver's knowledge of station.

		/*

		 * It is typical for stations to be removed when we are

		 * going down. Return success since device will be down

		 * soon anyway

/*

 * il_clear_ucode_stations - clear ucode station table bits

 *

 * This function clears all the bits in the driver indicating

 * which stations are active in the ucode. Call when something

 * other than explicit station management would cause this in

 * the ucode, e.g. unassociated RXON.

/*

 * il_restore_stations() - Restore driver known stations to device

 *

 * All stations considered active by driver, but not present in ucode, is

 * restored.

 *

 * Function sleeps.

			/*

			 * Rate scaling has already been initialized, send

			 * current LQ command

/*

 * il_is_lq_table_valid() - Test one aspect of LQ cmd for validity

 *

 * It sometimes happens when a HT rate has been in use and we

 * loose connectivity with AP then mac80211 will first tell us that the

 * current channel is not HT anymore before removing the station. In such a

 * scenario the RXON flags will be updated to indicate we are not

 * communicating HT anymore, but the LQ command may still contain HT rates.

 * Test for this to prevent driver from sending LQ command between the time

 * RXON flags are updated and when LQ command is updated.

/*

 * il_send_lq_cmd() - Send link quality command

 * @init: This command is sent as part of station initialization right

 *        after station has been added.

 *

 * The link quality command is sent as the last step of station creation.

 * This is the special case in which init is set and we call a callback in

 * this case to clear the state indicating that station creation is in

 * progress.

************************* RX-FUNCTIONS ****************************/

/*

 * Rx theory of operation

 *

 * Driver allocates a circular buffer of Receive Buffer Descriptors (RBDs),

 * each of which point to Receive Buffers to be filled by the NIC.  These get

 * used not only for Rx frames, but for any command response or notification

 * from the NIC.  The driver and NIC manage the Rx buffers by means

 * of idxes into the circular buffer.

 *

 * Rx Queue Indexes

 * The host/firmware share two idx registers for managing the Rx buffers.

 *

 * The READ idx maps to the first position that the firmware may be writing

 * to -- the driver can read up to (but not including) this position and get

 * good data.

 * The READ idx is managed by the firmware once the card is enabled.

 *

 * The WRITE idx maps to the last position the driver has read from -- the

 * position preceding WRITE is the last slot the firmware can place a packet.

 *

 * The queue is empty (no good data) if WRITE = READ - 1, and is full if

 * WRITE = READ.

 *

 * During initialization, the host sets up the READ queue position to the first

 * IDX position, and WRITE to the last (READ - 1 wrapped)

 *

 * When the firmware places a packet in a buffer, it will advance the READ idx

 * and fire the RX interrupt.  The driver can then query the READ idx and

 * process as many packets as possible, moving the WRITE idx forward as it

 * resets the Rx queue buffers with new memory.

 *

 * The management in the driver is as follows:

 * + A list of pre-allocated SKBs is stored in iwl->rxq->rx_free.  When

 *   iwl->rxq->free_count drops to or below RX_LOW_WATERMARK, work is scheduled

 *   to replenish the iwl->rxq->rx_free.

 * + In il_rx_replenish (scheduled) if 'processed' != 'read' then the

 *   iwl->rxq is replenished and the READ IDX is updated (updating the

 *   'processed' and 'read' driver idxes as well)

 * + A received packet is processed and handed to the kernel network stack,

 *   detached from the iwl->rxq.  The driver 'processed' idx is updated.

 * + The Host/Firmware iwl->rxq is replenished at tasklet time from the rx_free

 *   list. If there are no allocated buffers in iwl->rxq->rx_free, the READ

 *   IDX is not incremented and iwl->status(RX_STALLED) is set.  If there

 *   were enough free buffers and RX_STALLED is set it is cleared.

 *

 *

 * Driver sequence:

 *

 * il_rx_queue_alloc()   Allocates rx_free

 * il_rx_replenish()     Replenishes rx_free list from rx_used, and calls

 *                            il_rx_queue_restock

 * il_rx_queue_restock() Moves available buffers from rx_free into Rx

 *                            queue, updates firmware pointers, and updates

 *                            the WRITE idx.  If insufficient rx_free buffers

 *                            are available, schedules il_rx_replenish

 *

 * -- enable interrupts --

 * ISR - il_rx()         Detach il_rx_bufs from pool up to the

 *                            READ IDX, detaching the SKB from the pool.

 *                            Moves the packet buffer from queue to rx_used.

 *                            Calls il_rx_queue_restock to refill any empty

 *                            slots.

 * ...

 *

/*

 * il_rx_queue_space - Return number of free slots available in queue.

 keep some buffer to not confuse full and empty queue */

/*

 * il_rx_queue_update_write_ptr - Update the write pointer for the RX queue

 If power-saving is in use, make sure device is awake */

 Else device is assumed to be awake */

 Device expects a multiple of 8 */

 Alloc the circular buffer of Read Buffer Descriptors (RBDs) */

 Fill the rx_used queue with _all_ of the Rx buffers */

	/* Set us so that we have processed and used all buffers, but have

/*

 * returns non-zero if packet should be dropped

	/*

	 * All contexts have the same setting here due to it being

	 * a module parameter, so OK to check any context.

		/* The uCode has got a bad phase 1 Key, pushes the packet.

			/* bad ICV, the packet is destroyed since the

/*

 * il_txq_update_write_ptr - Send new write idx to hardware

 if we're trying to save power */

		/* wake up nic if it's powered down ...

		 * uCode will wake up, and interrupt us again, so next

		/*

		 * else not in power-save mode,

		 * uCode will never sleep when we're

		 * trying to tx (during RFKILL, we're not trying to tx).

/*

 * il_tx_queue_unmap -  Unmap any remaining DMA mappings and free skb's

/*

 * il_tx_queue_free - Deallocate DMA queue.

 * @txq: Transmit queue to deallocate.

 *

 * Empty queue by removing and destroying all BD's.

 * Free all buffers.

 * 0-fill, but do not free "txq" descriptor structure.

 De-alloc array of command/tx buffers */

 De-alloc circular buffer of TFDs */

 De-alloc array of per-TFD driver data */

 deallocate arrays */

 0-fill queue descriptor structure */

/*

 * il_cmd_queue_unmap - Unmap any remaining DMA mappings from command queue

/*

 * il_cmd_queue_free - Deallocate DMA queue.

 *

 * Empty queue by removing and destroying all BD's.

 * Free all buffers.

 * 0-fill, but do not free "txq" descriptor structure.

 De-alloc array of command/tx buffers */

 De-alloc circular buffer of TFDs */

 deallocate arrays */

 0-fill queue descriptor structure */

/*************** DMA-QUEUE-GENERAL-FUNCTIONS  *****

 * DMA services

 *

 * Theory of operation

 *

 * A Tx or Rx queue resides in host DRAM, and is comprised of a circular buffer

 * of buffer descriptors, each of which points to one or more data buffers for

 * the device to read from or fill.  Driver and device exchange status of each

 * queue via "read" and "write" pointers.  Driver keeps minimum of 2 empty

 * entries in each circular buffer, to protect against confusing empty and full

 * queue states.

 *

 * The device reads or writes the data in the queues via the device's several

 * DMA/FIFO channels.  Each queue is mapped to a single DMA channel.

 *

 * For Tx queue, there are low mark and high mark limits. If, after queuing

 * the packet for Tx, free space become < low mark, Tx queue stopped. When

 * reclaiming packets (on 'tx done IRQ), if free space become > high mark,

 * Tx queue resumed.

 *

 * See more detailed info in 4965.h.

 keep some reserve to not confuse empty and full situations */

/*

 * il_queue_init - Initialize queue's high/low-water and read/write idxes

	/*

	 * TFD_QUEUE_SIZE_MAX must be power-of-two size, otherwise

	 * il_queue_inc_wrap and il_queue_dec_wrap are broken.

 FIXME: remove q->n_bd */

	/* slots_must be power-of-two size, otherwise

/*

 * il_tx_queue_alloc - Alloc driver data and TFD CB for one Tx/cmd queue

	/* Driver ilate data, only for Tx (not command) queues,

	/* Circular buffer of transmit frame descriptors (TFDs),

/*

 * il_tx_queue_init - Allocate and initialize one tx/cmd queue

	/*

	 * Alloc buffer array for commands (Tx or other types of commands).

	 * For the command queue (#4/#9), allocate command space + one big

	 * command for scan, since scan command is very huge; the system will

	 * not have two scans at the same time, so only one is needed.

	 * For normal Tx queues (all other queues), no super-size command

	 * space is needed.

 only happens for cmd queue */

 Alloc driver data array and TFD circular buffer */

	/*

	 * For the default queues 0-3, set up the swq_id

	 * already -- all others need to get one later

	 * (if they need one at all).

 Initialize queue's high/low-water marks, and head/tail idxes */

 Tell device where to find queue */

 Initialize queue's high/low-water marks, and head/tail idxes */

 Tell device where to find queue */

************** HOST COMMAND QUEUE FUNCTIONS   *****/

/*

 * il_enqueue_hcmd - enqueue a uCode command

 * @il: device ilate data point

 * @cmd: a point to the ucode command structure

 *

 * The function returns < 0 values to indicate the operation is

 * failed. On success, it turns the idx (> 0) of command in the

 * command queue.

	/* If any of the command structures end up being larger than

	 * the TFD_MAX_PAYLOAD_SIZE, and it sent as a 'small' command then

	 * we will need to increase the size of the TFD entries

	 * Also, check to see if command buffer should not exceed the size

 re-initialize to NULL */

	/* At this point, the out_cmd now has all of the incoming cmd

 Set up entry in queue's byte count circular buffer */

 Increment and update queue's write idx */

/*

 * il_hcmd_queue_reclaim - Reclaim TX command queue entries already Tx'd

 *

 * When FW advances 'R' idx, all entries between old and new 'R' idx

 * need to be reclaimed. As result, some free space forms.  If there is

 * enough free space (> low mark), wake the stack that feeds us.

/*

 * il_tx_cmd_complete - Pull unused buffers off the queue and reclaim them

 * @rxb: Rx buffer to reclaim

 *

 * If an Rx buffer has an async callback associated with it the callback

 * will be executed.  The attached skb (if present) will only be freed

 * if the callback returns 1

	/* If a Tx command is being handled and it isn't in the actual

	 * command queue then there a command routing bug has been introduced

 Input error checking is done when commands are added to queue. */

 Mark as unmapped */

/*

 * set bt_coex_active to true, uCode will do kill/defer

 * every time the priority line is asserted (BT is sending signals on the

 * priority line in the PCIx).

 * set bt_coex_active to false, uCode will ignore the BT activity and

 * perform the normal operation

 *

 * User might experience transmit issue on some platform due to WiFi/BT

 * co-exist problem. The possible behaviors are:

 *   Able to scan and finding all the available AP

 *   Not able to associate with any AP

 * On those platforms, WiFi communication can be restored by set

 * "bt_coex_active" module parameter to "false"

 *

 * default: bt_coex_active = true (BT_COEX_ENABLE)

 Mbps */

 Mbps */

 Highest supported Rx data rate */

 Tx MCS capabilities */

/*

 * il_init_geos - Initialize mac80211's geo/channel info based from eeprom

 5.2GHz channels start after the 2.4GHz channels */

 just OFDM */

 OFDM & CCK */

/*

 * il_free_geos - undo allocations in il_init_geos

	/*

	 * We do not check for IEEE80211_HT_CAP_SUP_WIDTH_20_40

	 * the bit will not set if it is pure 40MHz case

	/*

	 * If mac80211 hasn't given us a beacon interval, program

	 * the default into the device.

	/*

	 * If the beacon interval we obtained from the peer

	 * is too large, we'll have to wake up more often

	 * (and in IBSS case, we'll beacon too much)

	 *

	 * For example, if max_beacon_val is 4096, and the

	 * requested beacon interval is 7000, we'll have to

	 * use 3500 to be able to wake up on the beacons.

	 *

	 * This could badly influence beacon detection stats.

	/*

	 * TODO: For IBSS we need to get atim_win from mac80211,

	 *       for now just always use 0

 tsf is modifed by do_div: copy it */

 validate RXON structure is valid */

 make sure basic rates 6Mbps and 1Mbps are supported */

/*

 * il_full_rxon_required - check if full RXON (vs RXON_ASSOC) cmd is needed

 * @il: staging_rxon is compared to active_rxon

 *

 * If the RXON structure is changing enough to require a new tune,

 * or is clearing the RXON_FILTER_ASSOC_MSK, then return 1 to indicate that

 * a new tune (full RXON command, rather than RXON_ASSOC cmd) is required.

 These items are only settable from the full RXON command */

	/* flags, filter_flags, ofdm_basic_rates, and cck_basic_rates can

	 * be updated with the RXON_ASSOC command -- however only some

 Check if we are not switching bands */

 Check if we are switching association toggle */

	/*

	 * Assign the lowest rate -- should really get this from

	 * the beacon skb from mac80211.

	/* Set up channel bandwidth:

 clear the HT channel mode before set the mode */

 pure ht40 */

 Note: control channel is opposite of extension channel */

 Note: control channel is opposite of extension channel */

 channel location only valid if in Mixed mode */

 Return valid, unused, channel for a passive scan to reset the RF */

/*

 * il_set_rxon_channel - Set the band and channel values in staging RXON

 * @ch: requested channel as a pointer to struct ieee80211_channel



 * NOTE:  Does not commit to the hardware; it sets appropriate bit fields

 * in the staging RXON flag structure based on the ch->band

 Copied from il_post_associate() */

/*

 * initialize rxon structure with default values from eeprom

	/* TODO:  Figure out when short_preamble would be set and cache from

 clear both MIX and PURE40 mode flag */

/*

 * il_irq_handle_error - called for HW or SW error interrupt from card

 Set the FW error flag -- cleared on il_down */

 Cancel currently queued command. */

	/* Keep the restart process from trying to send host

 stop device's busmaster DMA activity */

 Stop device's DMA activity */

 Reset the entire device */

	/*

	 * Clear "initialization complete" bit to move adapter from

	 * D0A* (powered-up Active) --> D0U* (Uninitialized) state.

/*

 * Start up NIC's basic functionality after it has been reset

 * (e.g. after platform boot, or shutdown via il_apm_stop())

 * NOTE:  This does not load uCode nor start the embedded processor

	/*

	 * Use "set_bit" below rather than "write", to preserve any hardware

	 * bits already set by default after reset.

 Disable L0S exit timer (platform NMI Work/Around) */

	/*

	 * Disable L0s without affecting L1;

	 *  don't wait for ICH L0s (ICH bug W/A)

 Set FH wait threshold to maximum (HW error during stress W/A) */

	/*

	 * Enable HAP INTA (interrupt from management bus) to

	 * wake device's PCI Express link L1a -> L0s

	 * NOTE:  This is no-op for 3945 (non-existent bit)

	/*

	 * HW bug W/A for instability in PCIe bus L0->L0S->L1 transition.

	 * Check if BIOS (or OS) enabled L1-ASPM on this device.

	 * If so (likely), disable L0S, so device moves directly L0->L1;

	 *    costs negligible amount of power savings.

	 * If not (unlikely), enable L0S, so there is at least some

	 *    power savings, even without L1.

 L1-ASPM enabled; disable(!) L0S  */

 L1-ASPM disabled; enable(!) L0S */

 Configure analog phase-lock-loop before activating to D0A */

	/*

	 * Set "initialization complete" bit to move adapter from

	 * D0U* --> D0A* (powered-up active) state.

	/*

	 * Wait for clock stabilization; once stabilized, access to

	 * device-internal resources is supported, e.g. il_wr_prph()

	 * and accesses to uCode SRAM.

	/*

	 * Enable DMA and BSM (if used) clocks, wait for them to stabilize.

	 * BSM (Boostrap State Machine) is only in 3945 and 4965.

	 *

	 * Write to "CLK_EN_REG"; "1" bits enable clocks, while "0" bits

	 * do not disable clocks.  This preserves any hardware bits already

	 * set by default in "CLK_CTRL_REG" after reset.

 Disable L1-Active */

 0 dBm mean 1 milliwatt */

	/* scan complete and commit_rxon use tx_power_next value,

 do not set tx power when scanning or channel changing */

 if fail to set tx_power, restore the orig. tx power */

	/*

	 * We do not support multiple virtual interfaces, but on hardware reset

	 * we have to add the same interface again.

	/*

	 * if the request is from external(ex: debugfs),

	 * then always perform the request in regardless the module

	 * parameter setting

	 * if the request is from internal (uCode error or driver

	 * detect failure), then fw_restart module parameter

	 * need to be check before performing firmware reload

 Set the FW error flag -- cleared on il_down */

	/*

	 * Keep the restart process from trying to send host

	 * commands by clearing the INIT status bit

		/*

		 * Huh? But wait ... this can maybe happen when

		 * we're in the middle of a firmware restart!

 success */

/*

 * On every watchdog tick we check (latest) time stamp. If it does not

 * change during timeout period and queue is not empty we reset firmware.

/*

 * Making watchdog tick be a quarter of timeout assure we will

 * discover the queue hung between timeout and 1.25*timeout

/*

 * Watchdog timer callback, we check each tx queue for stuck, if if hung

 * we reset the firmware. If everything is fine just rearm the timer.

 monitor and check for stuck cmd queue */

 monitor and check for other stuck queues */

 skip as we already checked the command queue */

/*

 * extended beacon time format

 * time in usec will be changed into a 32-bit value in extended:internal format

 * the extended part is the beacon counts

 * the internal part is the time in usec within one beacon interval

/* base is usually what we get from ucode with each received frame,

 * the same as HW timer counter counting down

	/*

	 * This function is called when system goes into suspend state

	 * mac80211 will call il_mac_stop() from the mac80211 suspend function

	 * first but since il_mac_stop() has no knowledge of who the caller is,

	 * it will not call apm_ops.stop() to stop the DMA operation.

	 * Calling apm_ops.stop here to make sure we stop the DMA.

	/*

	 * We disable the RETRY_TIMEOUT register (0x41) to keep

	 * PCI Tx retries from interfering with C3 CPU state.

 CONFIG_PM_SLEEP */

/*

 * il_mac_config - mac80211 config callback

 mac80211 uses static for non-HT which is what we want */

		/*

		 * Recalculate chain counts.

		 *

		 * If monitor mode is enabled then mac80211 will

		 * set up the SM PS mode to OFF if an HT channel is

		 * configured.

	/* during scanning mac80211 will delay channel setting until

	 * scan finish with changed = 0

 Configure HT40 channels */

		/*

		 * Default to no protection. Protection mode will

		 * later be set from BSS config in il_ht_conf

		/* if we are switching from ht to 2.4 clear flags

		 * from any ht related info since 2.4 does not

		/* The list of supported rates and rate mask can be different

		 * for each band; since the band may have changed, reset

 new association get rid of ibss beacon skb */

 we are restarting association process */

			/*

			 * If at all, this can only happen through a race

			 * when the AP disconnects us while we're still

			 * setting up the connection, in that case mac80211

			 * will soon tell us about that.

	/*

	 * inform the ucode that there is no longer an

	 * association and that no more packets should be

	 * sent

 FIXME: can we remove beacon_enabled ? */

		/*

		 * On passive channel we wait with blocked queues to see if

		 * there is traffic on that channel. If no frame will be

		 * received (what is very unlikely since scan detects AP on

		 * that channel, but theoretically possible), mac80211 associate

		 * procedure will time out and mac80211 will call us with NULL

		 * bssid. We have to unblock queues on such condition.

		/*

		 * If there is currently a HW scan going on in the background,

		 * then we need to cancel it, otherwise sometimes we are not

		 * able to authenticate (FIXME: why ?)

 mac80211 only sets assoc when in STATION mode */

 FIXME: currently needed in a few places */

	/*

	 * This needs to be after setting the BSSID in case

	 * mac80211 decides to do both changes at once because

	 * it will invoke post_associate.

		/* XXX use this information

		 *

		 * To do that, remove code from il_set_rate() and put something

		 * like this here:

		 *

		 if (A-band)

		 il->staging.ofdm_basic_rates =

		 bss_conf->basic_rates;

		 else

		 il->staging.ofdm_basic_rates =

		 bss_conf->basic_rates >> 4;

		 il->staging.cck_basic_rates =

		 bss_conf->basic_rates & 0xF;

 Sync active_rxon with latest change. */

	/* Disable (but don't clear!) interrupts here to avoid

	 *    back-to-back ISRs and sporadic interrupts from our NIC.

	 * If we have something to service, the tasklet will re-enable ints.

 just for debug */

 Discover which interrupts are active/pending */

	/* Ignore interrupt if there's nothing in NIC to service.

	 * This may be due to IRQ shared with another device,

		/* Hardware disappeared. It might have already raised

 il_irq_tasklet() will service interrupts and re-enable them */

 re-enable interrupts here since we don't have anything to service. */

 only Re-enable if disabled by irq */

/*

 *  il_tx_cmd_protection: Set rts/cts. 3945 and 4965 only share this

 *  function.

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

 *

 * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.

 *

 * Contact Information:

 *  Intel Linux Wireless <ilw@linux.intel.com>

 * Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

	/*

	 * The statistic information display here is based on

	 * the last stats notification from uCode

	 * might not reflect the current uCode activity

	/*

	 * The statistic information display here is based on

	 * the last stats notification from uCode

	 * might not reflect the current uCode activity

	/*

	 * The statistic information display here is based on

	 * the last stats notification from uCode

	 * might not reflect the current uCode activity

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2010 Willow Garage <http://www.willowgarage.com>

	Copyright (C) 2004 - 2010 Ivo van Doorn <IvDoorn@gmail.com>

	Copyright (C) 2004 - 2009 Gertjan van Wingerde <gwingerde@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00lib

	Abstract: rt2x00 queue specific routines.

	/*

	 * The frame size includes descriptor size, because the

	 * hardware directly receive the frame into the skbuffer.

	/*

	 * The payload should be aligned to a 4-byte boundary,

	 * this means we need at least 3 bytes for moving the frame

	 * into the correct offset.

	/*

	 * For IV/EIV/ICV assembly we must make sure there is

	 * at least 8 bytes bytes available in headroom for IV/EIV

	 * and 8 bytes for ICV data as tailroon.

	/*

	 * Allocate skbuffer.

	/*

	 * Make sure we not have a frame with the requested bytes

	 * available in the head and tail.

	/*

	 * Populate skbdesc.

/*

 * H/W needs L2 padding between the header and the paylod if header size

 * is not 4 bytes aligned.

		/*

		 * rt2800 has a H/W (or F/W) bug, device incorrectly increase

		 * seqno on retransmitted data (non-QOS) and management frames.

		 * To workaround the problem let's generate seqno in software.

		 * Except for beacons which are transmitted periodically by H/W

		 * hence hardware has to assign seqno for them.

 H/W will generate sequence number */

	/*

	 * The hardware is not able to insert a sequence number. Assign a

	 * software generated one here.

	 *

	 * This is wrong because beacons are not getting sequence

	 * numbers assigned properly.

	 *

	 * A secondary problem exists for drivers that cannot toggle

	 * sequence counting per-frame, since those will override the

	 * sequence counter given by mac80211.

	/*

	 * Determine with what IFS priority this frame should be send.

	 * Set ifs to IFS_SIFS when the this is not the first fragment,

	 * or this fragment came after RTS/CTS.

 Data length + CRC + Crypto overhead (IV/EIV/ICV/MIC) */

	/*

	 * PLCP setup

	 * Length calculation depends on OFDM/CCK rate.

		/*

		 * Convert length to microseconds.

			/*

			 * Check if we need to set the Length Extension

		/*

		 * When preamble is enabled we should set the

		 * preamble bit for the signal.

	/*

	 * If IEEE80211_TX_RC_MCS is set txrate->idx just contains the

	 * mcs rate to be used

		/*

		 * MIMO PS should be set to 1 for STA's using dynamic SM PS

		 * when using more then one tx stream (>MCS7).

 Left zero on all other settings. */

	/*

	 * Only one STBC stream is supported for now.

	/*

	 * This frame is eligible for an AMPDU, however, don't aggregate

	 * frames that are intended to probe a specific tx rate.

 FIXME: What value is needed? */

	/*

	 * Set 40Mhz mode if necessary (for legacy rates this will

	 * duplicate the frame to both channels).

	/*

	 * Determine IFS values

	 * - Use TXOP_BACKOFF for management frames except beacons

	 * - Use TXOP_SIFS for fragment bursts

	 * - Use TXOP_HTTXOP for everything else

	 *

	 * Note: rt2800 devices won't use CTS protection (if used)

	 * for frames not transmitted with TXOP_HTTXOP

	/*

	 * Header and frame information.

	/*

	 * Check whether this frame is to be acked.

	/*

	 * Check if this is a RTS/CTS frame

	/*

	 * Determine retry information.

	/*

	 * Check if more fragments are pending

	/*

	 * Check if more frames (!= fragments) are pending

	/*

	 * Beacons and probe responses require the tsf timestamp

	 * to be inserted into the frame.

	/*

	 * Determine rate modulation.

	/*

	 * Apply TX descriptor handling by components

	/*

	 * This should not happen, we already checked the entry

	 * was ours. When the hardware disagrees there has been

	 * a queue corruption!

	/*

	 * Add the requested extra tx headroom in front of the skb.

	/*

	 * Call the driver's write_tx_data function, if it exists.

	/*

	 * Map the skb to DMA.

	/*

	 * All processing on the frame has been completed, this means

	 * it is now ready to be dumped to userspace through debugfs.

	/*

	 * Check if we need to kick the queue, there are however a few rules

	 *	1) Don't kick unless this is the last in frame in a burst.

	 *	   When the burst flag is set, this frame is always followed

	 *	   by another frame which in some way are related to eachother.

	 *	   This is true for fragments, RTS or CTS-to-self frames.

	 *	2) Rule 1 can be broken when the available entries

	 *	   in the queue are less then a certain threshold.

	/*

	 * If the alloc fails we still send the BAR out but just don't track

	 * it in our bar list. And as a result we will report it to mac80211

	 * back as failed.

	/*

	 * Copy the relevant parts of the 802.11 BAR into out check list

	 * such that we can use RCU for less-overhead in the RX path since

	 * sending BARs and processing the according BlockAck should be

	 * the exception.

	/*

	 * Insert BAR into our BAR check list.

	/*

	 * Copy all TX descriptor information into txdesc,

	 * after that we are free to use the skb->cb array

	 * for our information.

	/*

	 * All information is retrieved from the skb->cb array,

	 * now we should claim ownership of the driver part of that

	 * array, preserving the bitrate index and flags.

	/*

	 * When hardware encryption is supported, and this frame

	 * is to be encrypted, we should strip the IV/EIV data from

	 * the frame so we can provide it to the driver separately.

	/*

	 * When DMA allocation is required we should guarantee to the

	 * driver that the DMA is aligned to a 4-byte boundary.

	 * However some drivers require L2 padding to pad the payload

	 * rather then the header. This could be a requirement for

	 * PCI and USB devices, while header alignment only is valid

	 * for PCI devices.

	/*

	 * That function must be called with bh disabled.

	/*

	 * It could be possible that the queue was corrupted and this

	 * call failed. Since we always return NETDEV_TX_OK to mac80211,

	 * this frame will simply be dropped.

	/*

	 * Put BlockAckReqs into our check list for driver BA processing.

	/*

	 * Pausing queue has to be serialized with rt2x00lib_txdone(), so we

	 * do this under queue->tx_lock. Bottom halve was already disabled

	 * before ieee80211_xmit() call.

	/*

	 * Clean up the beacon skb.

	/*

	 * Clear beacon (single bssid devices don't need to clear the beacon

	 * since the beacon queue will get stopped anyway).

	/*

	 * Clean up the beacon skb.

	/*

	 * Copy all TX descriptor information into txdesc,

	 * after that we are free to use the skb->cb array

	 * for our information.

	/*

	 * Fill in skb descriptor

	/*

	 * Send beacon to hardware.

	/*

	 * Only protect the range we are going to loop over,

	 * if during our loop a extra entry is set to pending

	 * it should not be kicked during this run, since it

	 * is part of another TX operation.

	/*

	 * Start from the TX done pointer, this guarantees that we will

	 * send out all frames in the correct order.

		/*

		 * For TX queues, we have to disable the queue

		 * inside mac80211.

		/*

		 * For TX queues, we have to enable the queue

		 * inside mac80211.

		/*

		 * For RX we need to kick the queue now in order to

		 * receive frames.

	/*

	 * If we are not supposed to drop any pending

	 * frames, this means we must force a start (=kick)

	 * to the queue to make sure the hardware will

	 * start transmitting.

	/*

	 * Check if driver supports flushing, if that is the case we can

	 * defer the flushing to the driver. Otherwise we must use the

	 * alternative which just waits for the queue to become empty.

	/*

	 * The queue flush has failed...

	/*

	 * rt2x00queue_start_queue will call ieee80211_wake_queue

	 * for each queue after is has been properly initialized.

	/*

	 * rt2x00queue_stop_queue will call ieee80211_stop_queue

	 * as well, but we are completely shutting doing everything

	 * now, so it is much safer to stop all TX queues at once,

	 * and use rt2x00queue_stop_queue for cleaning up.

	/*

	 * Allocate all queue entries.

	/*

	 * We need the following queues:

	 * RX: 1

	 * TX: ops->tx_queues

	 * Beacon: 1

	 * Atim: 1 (if required)

	/*

	 * Initialize pointers

	/*

	 * Initialize queue parameters.

	 * RX: qid = QID_RX

	 * TX: qid = QID_AC_VO + index

	 * TX: cw_min: 2^5 = 32.

	 * TX: cw_max: 2^10 = 1024.

	 * BCN: qid = QID_BEACON

	 * ATIM: qid = QID_ATIM

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2400pci

	Abstract: rt2400pci device specific routines.

	Supported chipsets: RT2460.

/*

 * Register access.

 * All access to the CSR registers will go through the methods

 * rt2x00mmio_register_read and rt2x00mmio_register_write.

 * BBP and RF register require indirect register access,

 * and use the CSR registers BBPCSR and RFCSR to achieve this.

 * These indirect registers work with busy bits,

 * and we will try maximal REGISTER_BUSY_COUNT times to access

 * the register while taking a REGISTER_BUSY_DELAY us delay

 * between each attempt. When the busy bit is still set at that time,

 * the access attempt is considered to have failed,

 * and we will print an error.

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the new data into the register.

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the read request into the register.

	 * After the data has been written, we wait until hardware

	 * returns the correct value, if at any time the register

	 * doesn't become available in time, reg will be 0xffffffff

	 * which means we return 0xff to the caller.

	/*

	 * Wait until the RF becomes available, afterwards we

	 * can safely write the new data into the register.

 CONFIG_RT2X00_LIB_DEBUGFS */

 CONFIG_RT2X00_LIB_LEDS */

/*

 * Configuration handlers.

	/*

	 * Start configuration steps.

	 * Note that the version error will always be dropped

	 * since there is no filter for it at this time.

		/*

		 * Enable beacon config

		/*

		 * Enable synchronisation.

	/*

	 * When short preamble is enabled, we should set bit 0x08

	/*

	 * We should never come here because rt2x00lib is supposed

	 * to catch this and send us the correct antenna explicitely.

	/*

	 * Configure the TX antenna.

	/*

	 * Configure the RX antenna.

	/*

	 * Switch on tuning bits.

	/*

	 * RF2420 chipset don't need any additional actions.

	/*

	 * For the RT2421 chipsets we need to write an invalid

	 * reference clock rate to activate auto_tune.

	 * After that we set the value back to the correct channel.

	/*

	 * Switch off tuning bits.

	/*

	 * Clear false CRC during channel switch.

 We must first disable autowake before it can be enabled */

/*

 * Link tuning

	/*

	 * Update FCS error count from register.

	/*

	 * Update False CCA count from register.

	/*

	 * The link tuner should not run longer then 60 seconds,

	 * and should run once every 2 seconds.

	/*

	 * Base r13 link tuning on the false cca count.

/*

 * Queue handlers.

		/*

		 * Wait for possibly running tbtt tasklets.

/*

 * Initialization functions.

	/*

	 * Initialize registers.

 Tx power.*/

 Signal */

 Rssi */

	/*

	 * We must clear the FCS and FIFO error count.

	 * These registers are cleared on read,

	 * so we may pass a useless variable to store the value.

/*

 * Device state switch handlers.

	/*

	 * When interrupts are being enabled, the interrupt registers

	 * should clear the register to assure a clean state.

	/*

	 * Only toggle the interrupts bits we are going to use.

	 * Non-checked interrupt bits are disabled by default.

		/*

		 * Ensure that all tasklets are finished before

		 * disabling the interrupts.

	/*

	 * Initialize all registers.

	/*

	 * Disable power

	/*

	 * Device is not guaranteed to be in the requested state yet.

	 * We must wait until the register indicates that the

	 * device has entered the correct state.

/*

 * TX descriptor initialization

	/*

	 * Start writing the descriptor words.

	/*

	 * Writing TXD word 0 must the last to prevent a race condition with

	 * the device, whereby the device may take hold of the TXD before we

	 * finished updating it.

	/*

	 * Register descriptor details in skb frame descriptor.

/*

 * TX data initialization

	/*

	 * Disable beaconing while we are reloading the beacon data,

	 * otherwise we might be sending out invalid data.

	/*

	 * Enable beaconing again.

	/*

	 * Write the TX descriptor for the beacon.

	/*

	 * Dump beacon to userspace through debugfs.

	/*

	 * Enable beaconing again.

/*

 * RX control handlers

	/*

	 * We only get the lower 32bits from the timestamp,

	 * to get the full 64bits we must complement it with

	 * the timestamp from get_tsf().

	 * Note that when a wraparound of the lower 32bits

	 * has occurred between the frame arrival and the get_tsf()

	 * call, we must decrease the higher 32bits with 1 to get

	 * to correct value.

	/*

	 * Obtain the status about this packet.

	 * The signal is the PLCP value, and needs to be stripped

	 * of the preamble bit (0x08).

/*

 * Interrupt functions.

		/*

		 * Obtain the status about this packet.

 Success */

 Success with retry */

 Failure, excessive retries */

 this is a failed frame! */

 Failure */

	/*

	 * Enable a single interrupt. The interrupt mask register

	 * access needs locking.

	/*

	 * Handle all tx queues.

	/*

	 * Enable all TXDONE interrupts again.

	/*

	 * Get the interrupt sources & saved to local variable.

	 * Write register value back to clear pending interrupts.

	/*

	 * Schedule tasklets for interrupt handling.

		/*

		 * Mask out all txdone interrupts.

	/*

	 * Disable all interrupts for which a tasklet was scheduled right now,

	 * the tasklet will reenable the appropriate interrupts.

/*

 * Device probe functions.

	/*

	 * Start validation of the data that has been read.

	/*

	 * Read EEPROM word for configuration.

	/*

	 * Identify RF chipset.

	/*

	 * Identify default antenna configuration.

	/*

	 * When the eeprom indicates SW_DIVERSITY use HW_DIVERSITY instead.

	 * I am not 100% sure about this, but the legacy drivers do not

	 * indicate antenna swapping in software is required when

	 * diversity is enabled.

	/*

	 * Store led mode, for correct led behaviour.

 CONFIG_RT2X00_LIB_LEDS */

	/*

	 * Detect if this device has an hardware controlled radio.

	/*

	 * Check if the BBP tuning should be enabled.

/*

 * RF value list for RF2420 & RF2421

 * Supports: 2.4 GHz

	/*

	 * Initialize all hw fields.

	/*

	 * Initialize hw_mode information.

	/*

	 * Create channel information array

	/*

	 * Allocate eeprom data.

	/*

	 * Enable rfkill polling by setting GPIO direction of the

	 * rfkill switch GPIO pin correctly.

	/*

	 * Initialize hw specifications.

	/*

	 * This device requires the atim queue and DMA-mapped skbs.

	/*

	 * Set the rssi offset.

/*

 * IEEE80211 stack callback functions.

	/*

	 * We don't support variating cw_min and cw_max variables

	 * per queue. So by default we only configure the TX queue,

	 * and ignore all other configurations.

	/*

	 * Write configuration to register.

 CONFIG_RT2X00_LIB_DEBUGFS */

/*

 * RT2400pci module information.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	Copyright (C) 2004 - 2009 Felix Fietkau <nbd@openwrt.org>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00soc

	Abstract: rt2x00 generic soc device routines.

	/*

	 * Free all allocated data.

 CONFIG_PM */

/*

 * rt2x00soc module information.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt61pci

	Abstract: rt61pci device specific routines.

	Supported chipsets: RT2561, RT2561s, RT2661.

/*

 * Allow hardware encryption to be disabled.

/*

 * Register access.

 * BBP and RF register require indirect register access,

 * and use the CSR registers PHY_CSR3 and PHY_CSR4 to achieve this.

 * These indirect registers work with busy bits,

 * and we will try maximal REGISTER_BUSY_COUNT times to access

 * the register while taking a REGISTER_BUSY_DELAY us delay

 * between each attempt. When the busy bit is still set at that time,

 * the access attempt is considered to have failed,

 * and we will print an error.

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the new data into the register.

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the read request into the register.

	 * After the data has been written, we wait until hardware

	 * returns the correct value, if at any time the register

	 * doesn't become available in time, reg will be 0xffffffff

	 * which means we return 0xff to the caller.

	/*

	 * Wait until the RF becomes available, afterwards we

	 * can safely write the new data into the register.

	/*

	 * Wait until the MCU becomes available, afterwards we

	 * can safely write the new data into the register.

 CONFIG_RT2X00_LIB_DEBUGFS */

		/*

		 * The brightness is divided into 6 levels (0 - 5),

		 * this means we need to convert the brightness

		 * argument into the matching level within that range.

 CONFIG_RT2X00_LIB_LEDS */

/*

 * Configuration handlers.

	/*

	 * Let the software handle the shared keys,

	 * since the hardware decryption does not work reliably,

	 * because the firmware does not know the key's keyidx.

		/*

		 * rt2x00lib can't determine the correct free

		 * key_idx for pairwise keys. We have 2 registers

		 * with key valid bits. The goal is simple: read

		 * the first register. If that is full, move to

		 * the next register.

		 * When both registers are full, we drop the key.

		 * Otherwise, we use the first invalid entry.

		/*

		 * Upload key to hardware

		/*

		 * Enable pairwise lookup table for given BSS idx.

		 * Without this, received frames will not be decrypted

		 * by the hardware.

		/*

		 * The driver does not support the IV/EIV generation

		 * in hardware. However it doesn't support the IV/EIV

		 * inside the ieee80211 frame either, but requires it

		 * to be provided separately for the descriptor.

		 * rt2x00lib will cut the IV/EIV data out of all frames

		 * given to us by mac80211, but we must tell mac80211

		 * to generate the IV/EIV data.

	/*

	 * SEC_CSR2 and SEC_CSR3 contain only single-bit fields to indicate

	 * a particular key is valid. Because using the FIELD32()

	 * defines directly will cause a lot of overhead, we use

	 * a calculation to determine the correct bit directly.

	/*

	 * Start configuration steps.

	 * Note that the version error will always be dropped

	 * and broadcast frames will always be accepted since

	 * there is no filter for it at this time.

		/*

		 * Enable synchronisation.

	/*

	 * Configure the RX antenna.

	/*

	 * Configure the RX antenna.

	/*

	 * Configure the RX antenna.

		/*

		 * FIXME: Antenna selection for the rf 2529 is very confusing

		 * in the legacy driver. Just default to antenna B until the

		 * legacy code can be properly translated into rt2x00 code.

	/*

	 * value[0] -> non-LNA

	 * value[1] -> LNA

	/*

	 * We should never come here because rt2x00lib is supposed

	 * to catch this and send us the correct antenna explicitely.

 We must first disable autowake before it can be enabled */

 Always recalculate LNA gain before changing configuration */

/*

 * Link tuning

	/*

	 * Update FCS error count from register.

	/*

	 * Update False CCA count from register.

	/*

	 * Determine r17 bounds.

	/*

	 * If we are not associated, we should go straight to the

	 * dynamic CCA tuning.

	/*

	 * Special big-R17 for very short distance

	/*

	 * Special big-R17 for short distance

	/*

	 * Special big-R17 for middle-short distance

	/*

	 * Special mid-R17 for middle distance

	/*

	 * Special case: Change up_bound based on the rssi.

	 * Lower up_bound when rssi is weaker then -74 dBm.

	/*

	 * r17 does not yet exceed upper limit, continue and base

	 * the r17 tuning on the false CCA count.

/*

 * Queue handlers.

		/*

		 * Wait for possibly running tbtt tasklets.

/*

 * Firmware functions

	/*

	 * Only support 8kb firmware files.

	/*

	 * The last 2 bytes in the firmware array are the crc checksum itself.

	 * This means that we should never pass those 2 bytes to the crc

	 * algorithm.

	/*

	 * Use the crc itu-t algorithm.

	/*

	 * Wait for stable hardware.

	/*

	 * Prepare MCU and mailbox for firmware loading.

	/*

	 * Write firmware to device.

	/*

	 * Hardware needs another millisecond before it is ready.

	/*

	 * Reset MAC and BBP registers.

/*

 * Initialization functions.

	/*

	 * Initialize registers.

 CCK Signal */

 Rssi */

 OFDM Rate */

 Rssi */

	/*

	 * CCK TXD BBP registers

	/*

	 * OFDM TXD BBP registers

	/*

	 * Invalidate all Shared Keys (SEC_CSR0),

	 * and clear the Shared key Cipher algorithms (SEC_CSR1 & SEC_CSR5)

	/*

	 * Clear all beacons

	 * For the Beacon base registers we only need to clear

	 * the first byte since that byte contains the VALID and OWNER

	 * bits which (when set to 0) will invalidate the entire beacon.

	/*

	 * We must clear the error counters.

	 * These registers are cleared on read,

	 * so we may pass a useless variable to store the value.

	/*

	 * Reset MAC and BBP registers.

/*

 * Device state switch handlers.

	/*

	 * When interrupts are being enabled, the interrupt registers

	 * should clear the register to assure a clean state.

	/*

	 * Only toggle the interrupts bits we are going to use.

	 * Non-checked interrupt bits are disabled by default.

		/*

		 * Ensure that all tasklets are finished.

	/*

	 * Initialize all registers.

	/*

	 * Enable RX.

	/*

	 * Disable power

	/*

	 * Device is not guaranteed to be in the requested state yet.

	 * We must wait until the register indicates that the

	 * device has entered the correct state.

/*

 * TX descriptor initialization

	/*

	 * Start writing the descriptor words.

	/*

	 * Writing TXD word 0 must the last to prevent a race condition with

	 * the device, whereby the device may take hold of the TXD before we

	 * finished updating it.

	/*

	 * Register descriptor details in skb frame descriptor.

/*

 * TX data initialization

	/*

	 * Disable beaconing while we are reloading the beacon data,

	 * otherwise we might be sending out invalid data.

	/*

	 * Write the TX descriptor for the beacon.

	/*

	 * Dump beacon to userspace through debugfs.

	/*

	 * Write entire beacon with descriptor and padding to register.

 skb freed by skb_pad() on failure */

	/*

	 * Enable beaconing again.

	 *

	 * For Wi-Fi faily generated beacons between participating

	 * stations. Set TBTT phase adaptive adjustment step to 8us.

	/*

	 * Clean up beacon skb.

	/*

	 * Disable beaconing while we are reloading the beacon data,

	 * otherwise we might be sending out invalid data.

	/*

	 * Clear beacon.

	/*

	 * Restore global beaconing state.

/*

 * RX control handlers

		/*

		 * Hardware has stripped IV/EIV data from 802.11 frame during

		 * decryption. It has provided the data separately but rt2x00lib

		 * should decide if it should be reinserted.

		/*

		 * The hardware has already checked the Michael Mic and has

		 * stripped it from the frame. Signal this to mac80211.

	/*

	 * Obtain the status about this packet.

	 * When frame was received with an OFDM bitrate,

	 * the signal is the PLCP value. If it was received with

	 * a CCK bitrate the signal is the rate in 100kbit/s.

/*

 * Interrupt functions.

	/*

	 * TX_STA_FIFO is a stack of X entries, hence read TX_STA_FIFO

	 * at most X times and also stop processing once the TX_STA_FIFO_VALID

	 * flag is not set anymore.

	 *

	 * The legacy drivers use X=TX_RING_SIZE but state in a comment

	 * that the TX_STA_FIFO stack has a size of 16. We stick to our

	 * tx ring size for now.

		/*

		 * Skip this entry when it contains an invalid

		 * queue identication number.

		/*

		 * Skip this entry when it contains an invalid

		 * index number.

			/* Catch up.

			 * Just report any entries we missed as failed.

		/*

		 * Obtain the status about this packet.

 Success, maybe with retry */

 Failure, excessive retries */

 this is a failed frame! */

 Failure */

		/*

		 * the frame was retried at least once

		 * -> hw used fallback rates

	/*

	 * Enable a single interrupt. The interrupt mask register

	 * access needs locking.

	/*

	 * Enable a single MCU interrupt. The interrupt mask register

	 * access needs locking.

	/*

	 * Get the interrupt sources & saved to local variable.

	 * Write register value back to clear pending interrupts.

	/*

	 * Schedule tasklets for interrupt handling.

	/*

	 * Since INT_MASK_CSR and INT_SOURCE_CSR use the same bits

	 * for interrupts and interrupt masks we can just use the value of

	 * INT_SOURCE_CSR to create the interrupt mask.

	/*

	 * Disable all interrupts for which a tasklet was scheduled right now,

	 * the tasklet will reenable the appropriate interrupts.

/*

 * Device probe functions.

	/*

	 * Start validation of the data that has been read.

	/*

	 * Read EEPROM word for configuration.

	/*

	 * Identify RF chipset.

	/*

	 * Determine number of antennas.

	/*

	 * Identify default antenna configuration.

	/*

	 * Read the Frame type.

	/*

	 * Detect if this device has a hardware controlled radio.

	/*

	 * Read frequency offset and RF programming sequence.

	/*

	 * Read external LNA informations.

	/*

	 * When working with a RF2529 chip without double antenna,

	 * the antenna settings should be gathered from the NIC

	 * eeprom word.

	/*

	 * Store led settings, for correct led behaviour.

	 * If the eeprom value is invalid,

	 * switch to default led mode.

 CONFIG_RT2X00_LIB_LEDS */

/*

 * RF value list for RF5225 & RF5325

 * Supports: 2.4 GHz & 5.2 GHz, rf_sequence disabled

 802.11 UNI / HyperLan 2 */

 802.11 HyperLan 2 */

 802.11 UNII */

 MMAC(Japan)J52 ch 34,38,42,46 */

/*

 * RF value list for RF5225 & RF5325

 * Supports: 2.4 GHz & 5.2 GHz, rf_sequence enabled

 802.11 UNI / HyperLan 2 */

 802.11 HyperLan 2 */

 802.11 UNII */

 MMAC(Japan)J52 ch 34,38,42,46 */

	/*

	 * Disable powersaving as default.

	/*

	 * Initialize all hw fields.

	/*

	 * As rt61 has a global fallback table we cannot specify

	 * more then one tx rate per frame but since the hw will

	 * try several rates (based on the fallback table) we should

	 * initialize max_report_rates to the maximum number of rates

	 * we are going to try. Otherwise mac80211 will truncate our

	 * reported tx rates and the rc algortihm will end up with

	 * incorrect data.

	/*

	 * Initialize hw_mode information.

	/*

	 * Create channel information array

	/*

	 * Disable power saving.

	/*

	 * Allocate eeprom data.

	/*

	 * Enable rfkill polling by setting GPIO direction of the

	 * rfkill switch GPIO pin correctly.

	/*

	 * Initialize hw specifications.

	/*

	 * This device has multiple filters for control frames,

	 * but has no a separate filter for PS Poll frames.

	/*

	 * This device requires firmware and DMA mapped skbs.

	/*

	 * Set the rssi offset.

/*

 * IEEE80211 stack callback functions.

	/*

	 * First pass the configuration through rt2x00lib, that will

	 * update the queue settings and validate the input. After that

	 * we are free to update the registers based on the value

	 * in the queue parameter.

	/*

	 * We only need to perform additional register initialization

	 * for WMM queues.

 Update WMM TXOP register */

 Update WMM registers */

 No DMA required for beacons */

 CONFIG_RT2X00_LIB_DEBUGFS */

/*

 * RT61pci module information.

 RT2561s */

 RT2561 v2 */

 RT2661 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*	Copyright (C) 2009 - 2010 Ivo van Doorn <IvDoorn@gmail.com>

 *	Copyright (C) 2009 Alban Browaeys <prahal@yahoo.com>

 *	Copyright (C) 2009 Felix Fietkau <nbd@openwrt.org>

 *	Copyright (C) 2009 Luis Correia <luis.f.correia@gmail.com>

 *	Copyright (C) 2009 Mattias Nissler <mattias.nissler@gmx.de>

 *	Copyright (C) 2009 Mark Asselstine <asselsm@gmail.com>

 *	Copyright (C) 2009 Xose Vazquez Perez <xose.vazquez@gmail.com>

 *	Copyright (C) 2009 Bart Zolnierkiewicz <bzolnier@gmail.com>

 *	<http://rt2x00.serialmonkey.com>

/*	Module: rt2800soc

 *	Abstract: rt2800 WiSoC specific routines.

 Allow hardware encryption to be disabled. */

 These states are not supported, but don't report an error */

 Firmware functions */

 same for SoCs */

 same for SoCs */

 CONFIG_RT2X00_LIB_DEBUGFS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00pci

	Abstract: rt2x00 generic pci device routines.

/*

 * PCI driver handlers.

	/*

	 * Because rt3290 chip use different efuse offset to read efuse data.

	 * So before read efuse it need to indicate it is the

	 * rt3290 or not.

	/*

	 * Free all allocated data.

	/*

	 * Free the PCI device data.

/*

 * rt2x00pci module information.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2009 - 2010 Ivo van Doorn <IvDoorn@gmail.com>

	Copyright (C) 2009 Alban Browaeys <prahal@yahoo.com>

	Copyright (C) 2009 Felix Fietkau <nbd@openwrt.org>

	Copyright (C) 2009 Luis Correia <luis.f.correia@gmail.com>

	Copyright (C) 2009 Mattias Nissler <mattias.nissler@gmx.de>

	Copyright (C) 2009 Mark Asselstine <asselsm@gmail.com>

	Copyright (C) 2009 Xose Vazquez Perez <xose.vazquez@gmail.com>

	Copyright (C) 2009 Bart Zolnierkiewicz <bzolnier@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2800pci

	Abstract: rt2800pci device specific routines.

	Supported chipsets: RT2800E & RT2800ED.

/*

 * Allow hardware encryption to be disabled.

	/*

	 * SOC devices don't support MCU requests.

/*

 * Firmware functions

	/*

	 * Chip rt3290 use specific 4KB firmware named rt3290.bin.

	/*

	 * enable Host program ram write selection

	/*

	 * Write firmware to device.

/*

 * Device state switch handlers.

 After resume MCU_BOOT_SIGNAL will trash these. */

		/*

		 * After the radio has been disabled, the device should

		 * be put to sleep for powersaving.

/*

 * Device probe functions.

 same for PCI */

 same for PCI */

 CONFIG_RT2X00_LIB_DEBUGFS */

/*

 * RT2800pci module information.

 SPDX-License-Identifier: GPL-2.0-or-later

/*	Copyright (C) 2009 - 2010 Ivo van Doorn <IvDoorn@gmail.com>

 *	Copyright (C) 2009 Alban Browaeys <prahal@yahoo.com>

 *	Copyright (C) 2009 Felix Fietkau <nbd@openwrt.org>

 *	Copyright (C) 2009 Luis Correia <luis.f.correia@gmail.com>

 *	Copyright (C) 2009 Mattias Nissler <mattias.nissler@gmx.de>

 *	Copyright (C) 2009 Mark Asselstine <asselsm@gmail.com>

 *	Copyright (C) 2009 Xose Vazquez Perez <xose.vazquez@gmail.com>

 *	Copyright (C) 2009 Bart Zolnierkiewicz <bzolnier@gmail.com>

 *	<http://rt2x00.serialmonkey.com>

/*	Module: rt2800mmio

 *	Abstract: rt2800 MMIO device routines.

/*

 * TX descriptor initialization

	/*

	 * The buffers pointed by SD_PTR0/SD_LEN0 and SD_PTR1/SD_LEN1

	 * must contains a TXWI structure + 802.11 header + padding + 802.11

	 * data. We choose to have SD_PTR0/SD_LEN0 only contains TXWI and

	 * SD_PTR1/SD_LEN1 contains 802.11 header + padding + 802.11

	 * data. It means that LAST_SEC0 is always 0.

	/*

	 * Initialize TX descriptor

	/*

	 * Register descriptor details in skb frame descriptor.

/*

 * RX control handlers

	/*

	 * Unfortunately we don't know the cipher type used during

	 * decryption. This prevents us from correct providing

	 * correct statistics through debugfs.

		/*

		 * Hardware has stripped IV/EIV data from 802.11 frame during

		 * decryption. Unfortunately the descriptor doesn't contain

		 * any fields with the EIV/IV data either, so they can't

		 * be restored by rt2x00lib.

		/*

		 * The hardware has already checked the Michael Mic and has

		 * stripped it from the frame. Signal this to mac80211.

			/*

			 * In order to check the Michael Mic, the packet must have

			 * been decrypted.  Mac80211 doesnt check the MMIC failure 

			 * flag to initiate MMIC countermeasures if the decoded flag

			 * has not been set.

	/*

	 * Process the RXWI structure that is at the start of the buffer.

/*

 * Interrupt functions.

	/*

	 * Enable a single interrupt. The interrupt mask register

	 * access needs locking.

		/*

		 * The rt2800pci hardware tbtt timer is off by 1us per tbtt

		 * causing beacon skew and as a result causing problems with

		 * some powersaving clients over time. Shorten the beacon

		 * interval every 64 beacons by 64us to mitigate this effect.

	/*

	 * The TX_FIFO_STATUS interrupt needs special care. We should

	 * read TX_STA_FIFO but we should do it immediately as otherwise

	 * the register can overflow and we would lose status reports.

	 *

	 * Hence, read the TX_STA_FIFO register and copy all tx status

	 * reports into a kernel FIFO which is handled in the txstatus

	 * tasklet. We use a tasklet to process the tx status reports

	 * because we can schedule the tasklet multiple times (when the

	 * interrupt fires again during tx status processing).

	 *

	 * We also read statuses from tx status timeout timer, use

	 * lock to prevent concurent writes to fifo.

 Read status and ACK all interrupts */

	/*

	 * Since INT_MASK_CSR and INT_SOURCE_CSR use the same bits

	 * for interrupts and interrupt masks we can just use the value of

	 * INT_SOURCE_CSR to create the interrupt mask.

	/*

	 * Disable all interrupts for which a tasklet was scheduled right now,

	 * the tasklet will reenable the appropriate interrupts.

	/*

	 * When interrupts are being enabled, the interrupt registers

	 * should clear the register to assure a clean state.

		/*

		 * Wait for possibly running tasklets to finish.

/*

 * Queue handlers.

 200 ms */

		/*

		 * Check if the driver is already done, otherwise we

		 * have to sleep a little while to give the driver/hw

		 * the oppurtunity to complete interrupt process itself.

		/*

		 * For TX queues schedule completion tasklet to catch

		 * tx status timeouts, othewise just wait.

		/*

		 * Wait for a little while to give the driver

		 * the oppurtunity to recover itself.

		/*

		 * Wait for current invocation to finish. The tasklet

		 * won't be scheduled anymore afterwards since we disabled

		 * the TBTT and PRE TBTT timer.

 No DMA required for beacons */

/*

 * Initialization functions.

		/*

		 * Set RX IDX in register to inform hardware that we have

		 * handled this entry and it is available for reuse again.

 If last entry stop txstatus timer */

	/*

	 * Initialize registers.

	/*

	 * Reset DMA indexes

/*

 * Device state switch handlers.

 Wait for DMA, ignore error until we initialize queues. */

	/*

	 * Set txstatus timer function.

	/*

	 * Overwrite TX done handler

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2010 Willow Garage <http://www.willowgarage.com>

	Copyright (C) 2004 - 2010 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00lib

	Abstract: rt2x00 generic device routines.

/*

 * Utility functions.

	/*

	 * When in STA mode, bssidx is always 0 otherwise local_address[5]

	 * contains the bss number, see BSS_ID_MASK comments for details.

/*

 * Radio control handlers.

	/*

	 * Don't enable the radio twice.

	 * And check if the hardware button has been disabled.

	/*

	 * Initialize all data queues.

	/*

	 * Enable radio.

	/*

	 * Enable queues.

	/*

	 * Start watchdog monitoring.

	/*

	 * Stop watchdog monitoring.

	/*

	 * Stop all queues

	/*

	 * Disable radio.

	/*

	 * It is possible the radio was disabled while the work had been

	 * scheduled. If that happens we should return here immediately,

	 * note that in the spinlock protected area above the delayed_flags

	 * have been cleared correctly.

	/*

	 * Iterate over each interface and perform the

	 * requested configurations.

/*

 * Interrupt context handlers.

	/*

	 * Only AP mode interfaces do broad- and multicast buffering

	/*

	 * Send out buffered broad- and multicast frames

	/*

	 * Update the beacon without locking. This is safe on PCI devices

	 * as they only update the beacon periodically here. This should

	 * never be called for USB devices.

 send buffered bc/mc frames out for every bssid */

	/*

	 * Devices with pre tbtt interrupt don't need to update the beacon

	 * here as they will fetch the next beacon directly prior to

	 * transmission.

 fetch next beacon */

 fetch next beacon */

	/*

	 * Unlike all other frames, the status report for BARs does

	 * not directly come from the hardware as it is incapable of

	 * matching a BA to a previously send BAR. The hardware will

	 * report all BARs as if they weren't acked at all.

	 *

	 * Instead the RX-path will scan for incoming BAs and set the

	 * block_acked flag if it sees one that was likely caused by

	 * a BAR from us.

	 *

	 * Remove remaining BARs here and return their status for

	 * TX done processing.

 Return whether this BAR was blockacked or not */

 Remove the BAR from our checklist */

	/*

	 * Initialize TX status

	/*

	 * Frame was send with retries, hardware tried

	 * different rates to send out the frame, at each

	 * retry it lowered the rate 1 step except when the

	 * lowest rate was used.

			/*

			 * The lowest rate (index 0) was used until the

			 * number of max retries was reached.

 terminate */

	/*

	 * Every single frame has it's own tx status, hence report

	 * every frame as ampdu of size 1.

	 *

	 * TODO: if we can find out how many frames were aggregated

	 * by the hw we could provide the real ampdu_len to mac80211

	 * which would allow the rc algorithm to better decide on

	 * which rates are suitable.

	/*

	 * Make this entry available for reuse.

	/*

	 * If the data queue was below the threshold before the txdone

	 * handler we must make sure the packet queue in the mac80211 stack

	 * is reenabled when the txdone handler has finished. This has to be

	 * serialized with rt2x00mac_tx(), otherwise we can wake up queue

	 * before it was stopped.

	/*

	 * Unmap the skb.

	/*

	 * Signal that the TX descriptor is no longer in the skb.

	/*

	 * Send frame to debugfs immediately, after this call is completed

	 * we are going to overwrite the skb->cb array.

	/*

	 * Determine if the frame has been successfully transmitted and

	 * remove BARs from our check list while checking for their

	 * TX status.

		/*

		 * Update TX statistics.

	/*

	 * Unmap the skb.

	/*

	 * Remove the extra tx headroom from the skb.

	/*

	 * Signal that the TX descriptor is no longer in the skb.

	/*

	 * Determine the length of 802.11 header.

	/*

	 * Remove L2 padding which was added during

	/*

	 * If the IV/EIV data was stripped from the frame before it was

	 * passed to the hardware, we should now reinsert it again because

	 * mac80211 will expect the same data to be present it the

	 * frame as it was passed to us.

	/*

	 * Send frame to debugfs immediately, after this call is completed

	 * we are going to overwrite the skb->cb array.

	/*

	 * Determine if the frame has been successfully transmitted and

	 * remove BARs from our check list while checking for their

	 * TX status.

	/*

	 * Update TX statistics.

	/*

	 * Only send the status report to mac80211 when it's a frame

	 * that originated in mac80211. If this was a extra frame coming

	 * through a mac80211 library call (RTS/CTS) then we should not

	 * send the status report back.

	/*

	 * Check again is powersaving is enabled, to prevent races from delayed

	 * work execution.

 Mark BAR since we received the according BA */

	/* If this is not a beacon, or if mac80211 has no powersaving

	 * configured, or if the device is already in powersaving mode

 min. beacon length + FCS_LEN */

 and only beacons from the associated BSSID, please */

 Check whenever the PHY can be turned off again. */

 1. What about buffered unicast traffic for our AID? */

 2. Maybe the AP wants to send multicast/broadcast data? */

		/*

		 * For non-HT rates the MCS value needs to contain the

		 * actually used rate modulation (CCK or OFDM).

	/*

	 * Allocate a new sk_buffer. If no new buffer available, drop the

	 * received frame and reuse the existing buffer.

	/*

	 * Unmap the skb.

	/*

	 * Extract the RXD details.

	/*

	 * Check for valid size in case we get corrupted descriptor from

	 * hardware.

	/*

	 * The data behind the ieee80211 header must be

	 * aligned on a 4 byte boundary.

	/*

	 * Hardware might have stripped the IV/EIV/ICV data,

	 * in that case it is possible that the data was

	 * provided separately (through hardware descriptor)

	 * in which case we should reinsert the data into the frame.

 Trim buffer to correct size */

	/*

	 * Translate the signal to the correct bitrate index.

	/*

	 * Check if this is a beacon, and more frames have been

	 * buffered while we were in powersaving mode.

	/*

	 * Check for incoming BlockAcks to match to the BlockAckReqs

	 * we've send out.

	/*

	 * Update extra components

	/*

	 * Initialize RX status information, and send frame

	 * to mac80211.

	/* Ensure that all fields of rx_status are initialized

	 * properly. The skb->cb array was used for driver

	 * specific informations, so rx_status might contain

	 * garbage.

	/*

	 * Replace the skb with the freshly allocated one.

/*

 * Driver initialization handlers.

 XXX: this assumption about the band is wrong for 802.11j */

	/*

	 * Initialize Rate list.

	/*

	 * Initialize Channel list.

	/*

	 * Intitialize 802.11b, 802.11g

	 * Rates: CCK, OFDM.

	 * Channels: 2.4 GHz

	/*

	 * Intitialize 802.11a

	 * Rates: OFDM.

	 * Channels: OFDM, UNII, HiperLAN2.

	/*

	 * Initialize HW modes.

	/*

	 * Initialize HW fields.

	/*

	 * Initialize extra TX headroom required.

	/*

	 * Take TX headroom required for alignment into account.

	/*

	 * Tell mac80211 about the size of our private STA structure.

	/*

	 * Allocate tx status FIFO for driver use.

		/*

		 * Allocate the txstatus fifo. In the worst case the tx

		 * status fifo has to hold the tx status of all entries

		 * in all tx queues. Hence, calculate the kfifo size as

		 * tx_queues * entry_num and round up to the nearest

		 * power of 2.

	/*

	 * Initialize tasklets if used by the driver. Tasklets are

	 * disabled until the interrupts are turned on. The driver

	 * has to handle that.

	/*

	 * Register HW.

/*

 * Initialization/uninitialization handlers.

	/*

	 * Stop rfkill polling.

	/*

	 * Allow the HW to uninitialize.

	/*

	 * Free allocated queue entries.

	/*

	 * Allocate all queue entries.

	/*

	 * Initialize the device.

	/*

	 * Start rfkill polling.

	/*

	 * If this is the first interface which is added,

	 * we should load the firmware now.

	/*

	 * Initialize the device.

 Enable the radio */

	/*

	 * Perhaps we can add something smarter here,

	 * but for now just disabling the radio should do.

	/*

	 * Build up AP interface limits structure.

	/*

	 * Build up AP interface combinations structure.

	/*

	 * Finally, specify the possible combinations to mac80211.

/*

 * driver allocation handlers.

	/*

	 * Set possible interface combinations.

	/*

	 * Allocate the driver data memory, if necessary.

	/*

	 * Make room for rt2x00_intf inside the per-interface

	 * structure ieee80211_vif.

	/*

	 * rt2x00 devices can only use the last n bits of the MAC address

	 * for virtual interfaces.

	/*

	 * Initialize work.

	/*

	 * Let the driver probe the device to detect the capabilities.

	/*

	 * Allocate queue array.

 Cache TX headroom value */

	/*

	 * Determine which operating modes are supported, all modes

	 * which require beaconing, depend on the availability of

	 * beacon entries.

	/*

	 * Initialize ieee80211 structure.

	/*

	 * Register extra components.

	/*

	 * Start rfkill polling.

	/*

	 * Stop rfkill polling.

	/*

	 * Disable radio.

	/*

	 * Stop all work.

	/*

	 * Kill the tx status tasklet.

	/*

	 * Uninitialize device.

	/*

	 * Free the tx status fifo.

	/*

	 * Free extra components

	/*

	 * Free ieee80211_hw memory.

	/*

	 * Free firmware image.

	/*

	 * Free queue structures.

	/*

	 * Free the driver data.

/*

 * Device state handlers

	/*

	 * Prevent mac80211 from accessing driver while suspended.

	/*

	 * Cleanup as much as possible.

	/*

	 * Suspend/disable extra components.

	/*

	 * Set device mode to sleep for power management,

	 * on some hardware this call seems to consistently fail.

	 * From the specifications it is hard to tell why it fails,

	 * and if this is a "bad thing".

	 * Overall it is safe to just ignore the failure and

	 * continue suspending. The only downside is that the

	 * device will not be in optimal power save mode, but with

	 * the radio and the other components already disabled the

	 * device is as good as disabled.

	/*

	 * Restore/enable extra components.

	/*

	 * We are ready again to receive requests from mac80211.

/*

 * rt2x00lib module information.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00lib

	Abstract: rt2x00 led specific routines.

	/*

	 * Led handling requires a positive value for the rssi,

	 * to do that correctly we need to add the correction.

	/*

	 * Get the rssi level, this is used to convert the rssi

	 * to a LED value inside the range LED_OFF - LED_FULL.

	/*

	 * Note that we must _not_ send LED_OFF since the driver

	 * is going to calculate the value and might use it in a

	 * division.

	/*

	 * Initialize blink time to default value:

	 * On period: 70ms

	 * Off period: 30ms

	/*

	 * This might look weird, but when we are unregistering while

	 * suspended the led is already off, and since we haven't

	 * fully resumed yet, access to the device might not be

	 * possible yet.

 This shouldn't be needed, but just to be safe */

 Device might have enabled the LEDS during resume */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2010 Willow Garage <http://www.willowgarage.com>

	Copyright (C) 2010 Ivo van Doorn <IvDoorn@gmail.com>

	Copyright (C) 2009 Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>

	Copyright (C) 2009 Gertjan van Wingerde <gwingerde@gmail.com>



	Based on the original rt2800pci.c and rt2800usb.c.

	  Copyright (C) 2009 Alban Browaeys <prahal@yahoo.com>

	  Copyright (C) 2009 Felix Fietkau <nbd@openwrt.org>

	  Copyright (C) 2009 Luis Correia <luis.f.correia@gmail.com>

	  Copyright (C) 2009 Mattias Nissler <mattias.nissler@gmx.de>

	  Copyright (C) 2009 Mark Asselstine <asselsm@gmail.com>

	  Copyright (C) 2009 Xose Vazquez Perez <xose.vazquez@gmail.com>

	  <http://rt2x00.serialmonkey.com>



/*

	Module: rt2800lib

	Abstract: rt2800 generic device routines.

/*

 * Register access.

 * All access to the CSR registers will go through the methods

 * rt2800_register_read and rt2800_register_write.

 * BBP and RF register require indirect register access,

 * and use the CSR registers BBPCSR and RFCSR to achieve this.

 * These indirect registers work with busy bits,

 * and we will try maximal REGISTER_BUSY_COUNT times to access

 * the register while taking a REGISTER_BUSY_DELAY us delay

 * between each attampt. When the busy bit is still set at that time,

 * the access attempt is considered to have failed,

 * and we will print an error.

 * The _lock versions must be used if you already hold the csr_mutex

 check for rt2872 on SoC */

 we know for sure that these rf chipsets are used on rt305x boards */

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the new data into the register.

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the read request into the register.

	 * After the data has been written, we wait until hardware

	 * returns the correct value, if at any time the register

	 * doesn't become available in time, reg will be 0xffffffff

	 * which means we return 0xff to the caller.

	/*

	 * Wait until the RFCSR becomes available, afterwards we

	 * can safely write the new data into the register.

	/*

	 * Wait until the RFCSR becomes available, afterwards we

	 * can safely write the read request into the register.

	 * After the data has been written, we wait until hardware

	 * returns the correct value, if at any time the register

	 * doesn't become available in time, reg will be 0xffffffff

	 * which means we return 0xff to the caller.

	/*

	 * Wait until the RF becomes available, afterwards we

	 * can safely write the new data into the register.

 overlaps with RSSI_BG2 */

 overlaps with RSSI_A2 */

	/* Index 0 is valid only for EEPROM_CHIP_ID.

	 * Otherwise it means that the offset of the

	 * given word is not initialized in the map,

	 * or that the field is not usable on the

	 * actual chipset.

		/*

		 * Check PLL_LD & XTAL_RDY.

	/*

	 * SOC devices don't support MCU requests.

	/*

	 * Wait until the MCU becomes available, afterwards we

	 * can safely write the new data into the register.

	/*

	 * Some devices are really slow to respond here. Wait a whole second

	 * before timing out.

	/*

	 * The last 2 bytes in the firmware array are the crc checksum itself,

	 * this means that we should never pass those 2 bytes to the crc

	 * algorithm.

	/*

	 * Use the crc ccitt algorithm.

	 * This will return the same value as the legacy driver which

	 * used bit ordering reversion on the both the firmware bytes

	 * before input input as well as on the final output.

	 * Obviously using crc ccitt directly is much more efficient.

	/*

	 * There is a small difference between the crc-itu-t + bitrev and

	 * the crc-ccitt crc calculation. In the latter method the 2 bytes

	 * will be swapped, use swab16 to convert the crc to the correct

	 * value.

	/*

	 * PCI(e) & SOC devices require firmware with a length

	 * of 8kb. USB devices require firmware files with a length

	 * of 4kb. Certain USB chipsets however require different firmware,

	 * which Ralink only provides attached to the original firmware

	 * file. Thus for USB devices, firmware files have a length

	 * which is a multiple of 4kb. The firmware for rt3290 chip also

	 * have a length which is a multiple of 4kb.

	/*

	 * Validate the firmware length

	/*

	 * Check if the chipset requires one of the upper parts

	 * of the firmware.

	/*

	 * 8kb firmware files must be checked as if it were

	 * 2 separate firmware files.

	/*

	 * If driver doesn't wake up firmware here,

	 * rt2800_load_firmware will hang forever when interface is up again.

	/*

	 * Wait for stable hardware.

	/*

	 * Write firmware to the device.

	/*

	 * Wait for device to stabilize.

	/*

	 * Disable DMA, will be reenabled later when enabling

	 * the radio.

	/*

	 * Initialize firmware.

	/*

	 * Initialize TX Info descriptor

	/*

	 * Always write 0 to IV/EIV fields (word 2 and 3), hardware will insert

	 * the IV from the IVEIV register when TXD_W3_WIV is set to 0.

	 * When TXD_W3_WIV is set to 1 it will use the IV data

	 * from the descriptor. The TXWI_W1_WIRELESS_CLI_ID indicates which

	 * crypto entry in the registers should be used to encrypt the frame.

	 *

	 * Nulify all remaining words as well, we don't know how to program them.

	/*

	 * Convert the value from the descriptor into the RSSI value

	 * If the value in the descriptor is 0, it is considered invalid

	 * and the default (extremely low) rssi value is assumed

	/*

	 * mac80211 only accepts a single RSSI value. Calculating the

	 * average doesn't deliver a fair answer either since -60:-60 would

	 * be considered equally good as -50:-70 while the second is the one

	 * which gives less energy...

	/*

	 * Detect RX rate, always use MCS as signal type.

	/*

	 * Mask of 0x8 bit to remove the short preamble flag.

	/*

	 * Convert descriptor AGC value to RSSI value.

	/*

	 * Remove RXWI descriptor from start of the buffer.

	/*

	 * This frames has returned with an IO error,

	 * so the status report is not intended for this

	 * frame.

	/*

	 * Validate if this TX status report is intended for

	 * this entry by comparing the WCID/ACK/PID fields.

	/*

	 * Obtain the status about this packet.

	/*

	 * If a frame was meant to be sent as a single non-aggregated MPDU

	 * but ended up in an aggregate the used tx rate doesn't correlate

	 * with the one specified in the TXWI as the whole aggregate is sent

	 * with the same rate.

	 *

	 * For example: two frames are sent to rt2x00, the first one sets

	 * AMPDU=1 and requests MCS7 whereas the second frame sets AMDPU=0

	 * and requests MCS15. If the hw aggregates both frames into one

	 * AMDPU the tx status for both frames will contain MCS7 although

	 * the frame was sent successfully.

	 *

	 * Hence, replace the requested rate with the real tx rate to not

	 * confuse the rate control algortihm by providing clearly wrong

	 * data.

	 *

	 * FIXME: if we do not find matching entry, we tell that frame was

	 * posted without any retries. We need to find a way to fix that

	 * and provide retry count.

	/*

	 * Ralink has a retry mechanism using a global fallback

	 * table. We setup this fallback table to try the immediate

	 * lower rate for all rates. In the TX_STA_FIFO, the MCS field

	 * always contains the MCS used for the last transmission, be

	 * it successful or not.

		/*

		 * Transmission succeeded. The number of retries is

		 * mcs - real_mcs

		/*

		 * Transmission failed. The number of retries is

		 * always 7 in this case (for a total number of 8

		 * frames sent).

	/*

	 * the frame was retried at least once

	 * -> hw used fallback rates

 RCU assures non-null sta will not be freed by mac80211. */

		/*

		 * TX_STA_FIFO_PID_QUEUE is a 2-bit field, thus qid is

		 * guaranteed to be one of the TX QIDs .

/*

 * test if there is an entry in any TX queue for which DMA is done

 * but the TX status has not been returned yet

	/*

	 * Process any trailing TX status reports for IO failures,

	 * we loop until we find the first non-IO error entry. This

	 * can either be a frame which is free, is being uploaded,

	 * or has completed the upload but didn't have an entry

	 * in the TX_STAT_FIFO register yet.

			/* For station mode we should reactive at least

			 * beacons. TODO: need to find good way detect

			 * RX hung for AP mode.

	/*

	 * Setup offsets of all active beacons in BCN_OFFSET{0,1} registers.

	/*

	 * H/W sends up to MAC_BSSID_DW1_BSS_BCN_NUM + 1 consecutive beacons.

	/*

	 * Disable beaconing while we are reloading the beacon data,

	 * otherwise we might be sending out invalid data.

	/*

	 * Add space for the TXWI in front of the skb.

	/*

	 * Register descriptor details in skb frame descriptor.

	/*

	 * Add the TXWI for the beacon to the skb.

	/*

	 * Dump beacon to userspace through debugfs.

	/*

	 * Write entire beacon with TXWI and padding to register.

 skb freed by skb_pad() on failure */

	/*

	 * Change global beacons settings.

	/*

	 * Restore beaconing state.

	/*

	 * Clean up beacon skb.

	/*

	 * For the Beacon base registers we only need to clear

	 * the whole TXWI which (when set to 0) will invalidate

	 * the entire beacon.

	/*

	 * Disable beaconing while we are reloading the beacon data,

	 * otherwise we might be sending out invalid data.

	/*

	 * Clear beacon.

	/*

	 * Change global beacons settings.

	/*

	 * Restore beaconing state.

		/* NOTE: The local EEPROM access functions can't

		 * be used here, use the generic versions instead.

 CONFIG_RT2X00_LIB_DEBUGFS */

 Check for SoC (SOC devices don't support MCU requests) */

 Set LED Polarity */

 Set LED Mode */

			/*

			 * The brightness is divided into 6 levels (0 - 5),

			 * The specs tell us the following levels:

			 *	0, 1 ,3, 7, 15, 31

			 * to determine the level in a simple way we can simply

			 * work with bitshifting:

			 *	(1 << level) - 1

 CONFIG_RT2X00_LIB_LEDS */

/*

 * Configuration handlers.

	/*

	 * The BSS Idx numbers is split in a main value of 3 bits,

	 * and a extended field for adding one additional bit to the value.

		/*

		 * Both the cipher as the BSS Idx numbers are split in a main

		 * value of 3 bits, and a extended field for adding one additional

		 * bit to the value.

 Delete the cipher without touching the bssidx */

	/*

	 * The cipher types are stored over multiple registers

	 * starting with SHARED_KEY_MODE_BASE each word will have

	 * 32 bits and contains the cipher types for 2 bssidx each.

	 * Using the correct defines correctly will cause overhead,

	 * so just calculate the correct offset.

	/*

	 * Update WCID information

		/*

		 * Allow key configuration only for STAs that are

		 * known by the hw.

	/*

	 * Update WCID information

	/*

	 * Limit global maximum TX AMPDU length to smallest value of all

	 * connected stations. In AP mode this can be suboptimal, but we

	 * do not have a choice if some connected STA is not capable to

	 * receive the same amount of data like the others.

	/*

	 * Search for the first free WCID entry and return the corresponding

	 * index.

	/*

	 * Store selected wcid even if it is invalid so that we can

	 * later decide if the STA is uploaded into the hw.

	/*

	 * No space left in the device, however, we can still communicate

	 * with the STA -> No error.

	/*

	 * Clean up WCID attributes and write STA address to the device.

	/*

	 * Remove WCID entry, no need to clean the attributes as they will

	 * get renewed when the WCID is reused.

	/*

	 * Start configuration steps.

	 * Note that the version error will always be dropped

	 * and broadcast frames will always be accepted since

	 * there is no filter for it at this time.

		/*

		 * Enable synchronisation.

			/*

			 * Tune beacon queue transmit parameters for AP mode

			/*

			 * The BSSID register has to be set to our own mac

			 * address in AP mode.

 default protection rate for HT20: OFDM 24M */

 default protection rate for HT40: duplicate OFDM 24M */

		/*

		 * All STAs in this BSS are HT20/40 but there might be

		 * STAs not supporting greenfield mode.

		 * => Disable protection for HT transmissions.

		/*

		 * All STAs in this BSS are HT20 or HT20/40 but there

		 * might be STAs not supporting greenfield mode.

		 * => Protect all HT40 transmissions.

		/*

		 * Nonmember protection:

		 * According to 802.11n we _should_ protect all

		 * HT transmissions (but we don't have to).

		 *

		 * But if cts_protection is enabled we _shall_ protect

		 * all HT transmissions using a CCK rate.

		 *

		 * And if any station is non GF we _shall_ protect

		 * GF transmissions.

		 *

		 * We decide to protect everything

		 * -> fall through to mixed mode.

		/*

		 * Legacy STAs are present

		 * => Protect all HT transmissions.

		/*

		 * If erp protection is needed we have to protect HT

		 * transmissions with CCK 11M long preamble.

 don't duplicate RTS/CTS in CCK mode */

 check for STAs not supporting greenfield mode */

 Update HT protection config */

	/*

	 * Configure the TX antenna.

	/*

	 * Configure the RX antenna.

		/*

		 * When TX power is below 0, we should increase it by 7 to

		 * make it a positive value (Minimum value is -7).

		 * However this means that values between 0 and 7 have

		 * double meaning, and we should set a 7DBm boost flag.

 TODO */

 TODO: use TX{0,1,2}FinePowerControl values from EEPROM */

 Restore BBP 25 & 26 for 2.4 GHz */

 Hard code BBP 25 & 26 for 5GHz */

 Enable IQ Phase correction */

 Setup IQ Phase correction value */

	/* NOTE: the reference driver does not writes the new value

	 * back to RFCSR 32

 Band selection */

 Initiate VCO calibration */

 TODO */

 TODO: add band selection */

 loopback RF_BS */

 Enable RF tuning */

 clear update flag */

 TODO: add calibration for TxBF */

 r55/r59 value array of channel 1~14 */

 TODO */

 Order of values on rf_channel entry: N, K, mod, R */

 FIXME: RF11 owerwrite ? */

 TODO RF27 <- tssi */

 CCK */

 OFDM */

 FIMXE: RF11 overwrite */

 TODO RF27 <- tssi */

 TODO proper frequency adjustment */

 TODO merge with others */

 BBP settings */

 GLRT band configuration */

 Frequeny plan setting */

	/* Rdiv setting (set 0x03 if Xtal==20)

	 * R13[1:0]

	/* N setting

	 * R20[7:0] in rf->rf1

	 * R21[0] always 0

	/* K setting (always 0)

	 * R16[3:0] (RF PLL freq selection)

	/* D setting (always 0)

	 * R22[2:0] (D=15, R22[2:0]=<111>)

	/* Ksd setting

	 * Ksd: R17<7:0> in rf->rf2

	 *      R18<7:0> in rf->rf3

	 *      R19<1:0> in rf->rf4

 Default: XO=20MHz , SDM mode */

 RF for DC Cal BW */

 hardware unit is 0.5dBm, limited to 23.5dBm */

 init base power by eeprom target power */

 Save MAC SYS CTRL registers */

 Disable Tx/Rx */

 Check MAC Tx/Rx idle */

 TX0 IQ Gain */

 TX0 IQ Phase */

 TX1 IQ Gain */

 TX1 IQ Phase */

 FIXME: possible RX0, RX1 callibration ? */

 RF IQ compensation control */

 RF IQ imbalance compensation control */

 Disable CCK packet detection */

	/*

	 * Change BBP settings

 Disable CCK Packet detection on 5GHz */

 Turn on tertiary PAs */

 Turn on secondary PAs */

 Turn on primary PAs */

 Turn on tertiary LNAs */

 Turn on secondary LNAs */

 Turn on primary LNAs */

 AGC init */

 Band selection */

 GPIO #8 controls all paths */

 LNA PE control. */

			/* GPIO #4 controls PE0 and PE1,

			 * GPIO #7 controls PE2

 GPIO #4 controls PE0, PE1 and PE2 */

 AGC init */

 AGC init */

		/* AGC init.

		 * Despite the vendor driver using different values here for

		 * RT6352 chip, we use 0x1c for now. This may have to be changed

		 * once TSSI got implemented.

	/*

	 * Clear channel statistic counters

	/*

	 * Clear update flag

	/*

	 * First check if temperature compensation is supported.

	/*

	 * Read TSSI boundaries for temperature compensation from

	 * the EEPROM.

	 *

	 * Array idx               0    1    2    3    4    5    6    7    8

	 * Matching Delta value   -4   -3   -2   -1    0   +1   +2   +3   +4

	 * Example TSSI bounds  0xF0 0xD0 0xB5 0xA0 0x88 0x45 0x25 0x15 0x00

	/*

	 * Check if temperature compensation is supported.

	/*

	 * Read current TSSI (BBP 49).

	/*

	 * Compare TSSI value (BBP49) with the compensation boundaries

	 * from the EEPROM and increase or decrease tx power.

	/*

	 * HT40 compensation not required.

	/*

	 * XXX: We don't know the maximum transmit power of our hardware since

	 * the EEPROM doesn't expose it. We only know that we are calibrated

	 * to 100% tx power.

	 *

	 * Hence, we assume the regulatory limit that cfg80211 calulated for

	 * the current channel is our maximum and if we are requested to lower

	 * the value we just reduce our tx power accordingly.

		/*

		 * Check if eirp txpower exceed txpower_limit.

		 * We use OFDM 6M as criterion and its eirp txpower

		 * is stored at EEPROM_EIRP_MAX_TX_POWER.

		 * .11b data rate need add additional 4dbm

		 * when calculating eirp txpower.

 TODO: adapt TX power reduction from the rt28xx code */

 calculate temperature compensation delta */

 read the next four txpower values */

 CCK 1MBS,2MBS */

 CCK 5.5MBS,11MBS */

 OFDM 6MBS,9MBS */

 OFDM 12MBS,18MBS */

 read the next four txpower values */

 OFDM 24MBS,36MBS */

 OFDM 48MBS */

 OFDM 54MBS */

 read the next four txpower values */

 MCS 0,1 */

 MCS 2,3 */

 MCS 4,5 */

 MCS 6 */

 read the next four txpower values */

 MCS 7 */

 MCS 8,9 */

 MCS 10,11 */

 MCS 12,13 */

 read the next four txpower values */

 MCS 14 */

 MCS 15 */

 MCS 16,17 */

 MCS 18,19 */

 read the next four txpower values */

 MCS 20,21 */

 MCS 22 */

 MCS 23 */

 read the next four txpower values */

 STBC, MCS 0,1 */

 STBC, MCS 2,3 */

 STBC, MCS 4,5 */

 STBC, MCS 6 */

 read the next four txpower values */

 STBC, MCS 7 */

 Warn user if bw_comp is set in EEPROM */

	/* populate TX_PWR_CFG_0 up to TX_PWR_CFG_4 from EEPROM for HT20, limit

	 * value to 0x3f and replace 0x20 by 0x21 as this is what the vendor

	 * driver does as well, though it looks kinda wrong.

	 * Maybe some misunderstanding of what a signed 8-bit value is? Maybe

	 * the hardware has a problem handling 0x20, and as the code initially

	 * used a fixed offset between HT20 and HT40 rates they had to work-

	 * around that issue and most likely just forgot about it later on.

	 * Maybe we should use rt2800_get_txpower_bw_comp() here as well,

	 * however, the corresponding EEPROM value is not respected by the

	 * vendor driver, so maybe this is rather being taken care of the

	 * TXALC and the driver doesn't need to handle it...?

	 * Though this is all very awkward, just do as they did, as that's what

	 * board vendors expected when they populated the EEPROM...

 HT20 */

 HT40 */

	/* Aparently Ralink ran out of space in the BYRATE calibration section

	 * of the EERPOM which is copied to the corresponding TX_PWR_CFG_x

	 * registers. As recent 2T chips use 8-bit instead of 4-bit values for

	 * power-offsets more space would be needed. Ralink decided to keep the

	 * EEPROM layout untouched and rather have some shared values covering

	 * multiple bitrates.

	 * Populate the registers not covered by the EEPROM in the same way the

	 * vendor driver does.

 For OFDM 54MBS use value from OFDM 48MBS */

 For MCS 7 use value from MCS 6 */

 For MCS 15 use value from MCS 14 */

 For STBC MCS 7 use value from STBC MCS 6 */

 TODO: temperature compensation code! */

/*

 * We configure transmit power using MAC TX_PWR_CFG_{0,...,N} registers and

 * BBP R1 register. TX_PWR_CFG_X allow to configure per rate TX power values,

 * 4 bits for each rate (tune from 0 to 15 dBm). BBP_R1 controls transmit power

 * for all rates, but allow to set only 4 discrete values: -12, -6, 0 and 6 dBm.

 * Reference per rate transmit power values are located in the EEPROM at

 * EEPROM_TXPOWER_BYRATE offset. We adjust them and BBP R1 settings according to

 * current conditions (i.e. band, bandwidth, temperature, user settings).

	/*

	 * Calculate HT40 compensation. For 40MHz we need to add or subtract

	 * value read from EEPROM (different for 2GHz and for 5GHz).

	/*

	 * Calculate temperature compensation. Depends on measurement of current

	 * TSSI (Transmitter Signal Strength Indication) we know TX power (due

	 * to temperature or maybe other factors) is smaller or bigger than

	 * expected. We adjust it, based on TSSI reference and boundaries values

	 * provided in EEPROM.

 TODO: temperature compensation code for other chips. */

	/*

	 * Decrease power according to user settings, on devices with unknown

	 * maximum tx power. For other devices we take user power_level into

	 * consideration on rt2800_compensate_txpower().

	/*

	 * BBP_R1 controls TX power for all rates, it allow to set the following

	 * gains -12, -6, 0, +6 dBm by setting values 2, 1, 0, 3 respectively.

	 *

	 * TODO: we do not use +6 dBm option to do not increase power beyond

	 * regulatory limit, however this could be utilized for devices with

	 * CAPABILITY_POWER_LIMIT.

 just to be safe */

 read the next four txpower values */

		/*

		 * TX_PWR_CFG_0: 1MBS, TX_PWR_CFG_1: 24MBS,

		 * TX_PWR_CFG_2: MCS4, TX_PWR_CFG_3: MCS12,

		 * TX_PWR_CFG_4: unknown

		/*

		 * TX_PWR_CFG_0: 2MBS, TX_PWR_CFG_1: 36MBS,

		 * TX_PWR_CFG_2: MCS5, TX_PWR_CFG_3: MCS13,

		 * TX_PWR_CFG_4: unknown

		/*

		 * TX_PWR_CFG_0: 5.5MBS, TX_PWR_CFG_1: 48MBS,

		 * TX_PWR_CFG_2: MCS6,  TX_PWR_CFG_3: MCS14,

		 * TX_PWR_CFG_4: unknown

		/*

		 * TX_PWR_CFG_0: 11MBS, TX_PWR_CFG_1: 54MBS,

		 * TX_PWR_CFG_2: MCS7,  TX_PWR_CFG_3: MCS15,

		 * TX_PWR_CFG_4: unknown

 read the next four txpower values */

		/*

		 * TX_PWR_CFG_0: 6MBS, TX_PWR_CFG_1: MCS0,

		 * TX_PWR_CFG_2: MCS8, TX_PWR_CFG_3: unknown,

		 * TX_PWR_CFG_4: unknown

		/*

		 * TX_PWR_CFG_0: 9MBS, TX_PWR_CFG_1: MCS1,

		 * TX_PWR_CFG_2: MCS9, TX_PWR_CFG_3: unknown,

		 * TX_PWR_CFG_4: unknown

		/*

		 * TX_PWR_CFG_0: 12MBS, TX_PWR_CFG_1: MCS2,

		 * TX_PWR_CFG_2: MCS10, TX_PWR_CFG_3: unknown,

		 * TX_PWR_CFG_4: unknown

		/*

		 * TX_PWR_CFG_0: 18MBS, TX_PWR_CFG_1: MCS3,

		 * TX_PWR_CFG_2: MCS11, TX_PWR_CFG_3: unknown,

		 * TX_PWR_CFG_4: unknown

 next TX_PWR_CFG register */

	/*

	 * A voltage-controlled oscillator(VCO) is an electronic oscillator

	 * designed to be controlled in oscillation frequency by a voltage

	 * input. Maybe the temperature will affect the frequency of

	 * oscillation to be shifted. The VCO calibration will be called

	 * periodically to adjust the frequency to be precision.

		/* On 11A, We should delay and wait RF/BBP to be stable

		 * and the appropriate time should be 1000 micro seconds

		 * 2005/06/05 - On 11G, we also need this delay time.

		 * Otherwise it's difficult to pass the WHQL.

 Always recalculate LNA gain before changing configuration */

		/*

		 * To provide correct survey data for survey-based ACS algorithm

		 * we have to save survey data for current channel before switching.

/*

 * Link tuning

	/*

	 * Update FCS error count from register.

 5GHZ band */

	/* When RSSI is better than a certain threshold, increase VGC

	 * with a chip specific value in order to improve the balance

	 * between sensibility and noise isolation.

/*

 * Initialization functions.

	/*

	 * The legacy driver also sets TXOP_CTRL_CFG_RESERVED_TRUN_EN to 1

	 * although it is reserved.

	/*

	 * Usually the CCK SIFS time should be set to 10 and the OFDM SIFS

	 * time should be set to 16. However, the original Ralink driver uses

	 * 16 for both and indeed using a value of 10 for CCK SIFS results in

	 * connection problems with 11g + CTS protection. Hence, use the same

	 * defaults as the Ralink driver: 16 for both, CCK and OFDM SIFS.

	/*

	 * ASIC will keep garbage value after boot, clear encryption keys.

	/*

	 * Clear encryption initialization vectors on start, but keep them

	 * for watchdog reset. Otherwise we will have wrong IVs and not be

	 * able to keep connections after reset.

	/*

	 * Clear all beacons

	/*

	 * Do not force the BA window size, we use the TXWI to set it

	/*

	 * We must clear the error counters.

	 * These registers are cleared on read,

	 * so we may pass a useless variable to store the value.

	/*

	 * Setup leadtime for pre tbtt interrupt to 6ms

	/*

	 * Set up channel statistics timer

	/*

	 * BBP was enabled after firmware was loaded,

	 * but we need to reactivate it now.

 128 ~ 137 */

 138 ~ 147 */

 148 ~ 157 */

 158 ~ 167 */

 168 ~ 177 */

 178 ~ 187 */

 188 ~ 197 */

 198 ~ 207 */

 208 ~ 211 */

 Use 5-bit ADC for Acquisition and 8-bit ADC for data */

 Set ITxBF timeout to 0x9c40=1000msec */

 Reprogram the inband interface to put right values in RXWI */

 Antenna Software OFDM */

 Antenna Software CCK */

 Clear previously selected antenna */

 Enable DC filter */

 Set ITxBF timeout to 0x9C40=1000msec */

 Reprogram the inband interface to put right values in RXWI */

 check if this is a Bluetooth combo card */

 These chips have hardware RX antenna diversity */

 Disable Antenna Software OFDM */

 Disable Antenna Software CCK */

 Clear previously selected antenna */

 FIXME BBP105 owerwrite */

 Initialize GLRT (Generalized Likehood Radio Test) */

 Main antenna */

 Auxiliary antenna */

 Apply Maximum Likelihood Detection (MLD) for 2 stream case */

 Avoid data loss and CRC errors */

 Fix I/Q swap issue */

 BBP for G band */

 rt2800_bbp4_mac_if_ctrl? */

 FIXME BBP105 owerwrite */

 BBP for G band GLRT function (BBP_128 ~ BBP_221) */

 BBP for G band DCOC function */

	/*

	 * Set power & frequency of passband test tone

	/*

	 * Set power & frequency of stopband test tone

	/*

	 * TODO: sync filter_tgt values with vendor driver

	/*

	 * Save BBP 25 & 26 values for later use in channel switching (for 3052)

	/*

	 * Set back to initial state

	/*

	 * Set BBP back to BW20

  Turn off unused DAC1 and ADC1 to reduce power consumption */

 TODO: enable stream mode */

  Turn off unused DAC1 and ADC1 to reduce power consumption */

 XXX vendor driver do this only for 3070 */

 FIXME */

 SNR mapping */

 ADC/DAC control */

 RX AGC energy lower bound in log2 */

 FIXME: BBP 105 owerwrite? */

 Disable GPIO #4 and #7 function for LAN PE control */

 Initialize default register values */

 Initiate calibration */

 TODO: use rt2800_rf_init_calibration ? */

 Set initial values for RX filter calibration */

 Save BBP 25 & 26 values for later use in channel switching */

 TODO: enable stream mode support */

 TODO: get the actual ECO value from the SoC */

	/* RFCSR 17 will be initialized later based on the

	 * frequency offset stored in the EEPROM

 TODO: rx filter calibration? */

 Enable DC filter */

 Save MAC registers */

 save BBP registers */

 Save RF registers */

 I-3 */

 I-4,5,6,7,8,9 */

 Initialize RF central register to default value */

 Initialize RF channel register to default value */

 Initialize RF channel register for DRQFN */

 Initialize RF DC calibration register to default value */

	/*

	 * Initialize MAC registers.

	/*

	 * Wait BBP/RF to wake up.

	/*

	 * Send signal during boot time to initialize firmware.

	/*

	 * Make sure BBP is up and running.

	/*

	 * Initialize BBP/RF registers.

	/*

	 * Enable RX.

	/*

	 * Initialize LED control

 Wait for DMA, ignore error */

 Wait until the EEPROM has been loaded */

 Apparently the data is read from end to start */

 The returned value is in CPU order, but eeprom is le */

	/*

	 * Read the EEPROM.

	/*

	 * Start validation of the data that has been read.

		/*

		 * There is a max of 2 RX streams for RT28x0 series

	/*

	 * During the LNA validation we are going to use

	 * lna0 as correct value. Note that EEPROM_LNA

	 * is never validated.

	/*

	 * Read EEPROM word for configuration.

	/*

	 * Identify RF chipset by EEPROM value

	 * RT28xx/RT30xx: defined in "EEPROM_NIC_CONF0_RF_TYPE" field

	 * RT53xx: defined in "EEPROM_CHIP_ID" field

	/*

	 * Identify default antenna configuration.

 These chips have hardware RX antenna diversity */

 Unused */

 Unused */

	/*

	 * Determine external LNA informations.

	/*

	 * Detect if this device has an hardware controlled radio.

	/*

	 * Detect if this device has Bluetooth co-existence.

	/*

	 * Read frequency offset and RF programming sequence.

	/*

	 * Store led settings, for correct led behaviour.

 CONFIG_RT2X00_LIB_LEDS */

	/*

	 * Check if support EIRP tx power limit feature.

	/*

	 * Detect if device uses internal or external PA

/*

 * RF value list for rt28xx

 * Supports: 2.4 GHz (all) & 5.2 GHz (RF2850 & RF2750)

 802.11 UNI / HyperLan 2 */

 802.11 HyperLan 2 */

 802.11 UNII */

 802.11 Japan */

/*

 * RF value list for rt3xxx

 * Supports: 2.4 GHz (all) & 5.2 GHz (RF3052 & RF3053)

 802.11 UNI / HyperLan 2 */

 802.11 HyperLan 2 */

 802.11 UNII */

/*

 * RF value list for rt3xxx with Xtal20MHz

 * Supports: 2.4 GHz (all) (RF3322)

 Channel, N, K, mod, R */

 Channel, N, K, mod, R */

	/*

	 * Disable powersaving as default.

	/*

	 * Change default retry settings to values corresponding more closely

	 * to rate[0].count setting of minstrel rate control algorithm.

	/*

	 * Initialize all hw fields.

	/*

	 * Don't set IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING for USB devices

	 * unless we are capable of sending the buffered frames out after the

	 * DTIM transmission using rt2x00lib_beacondone. This will send out

	 * multicast and broadcast traffic immediately instead of buffering it

	 * infinitly and thus dropping it after some time.

	/*

	 * As rt2800 has a global fallback table we cannot specify

	 * more then one tx rate per frame but since the hw will

	 * try several rates (based on the fallback table) we should

	 * initialize max_report_rates to the maximum number of rates

	 * we are going to try. Otherwise mac80211 will truncate our

	 * reported tx rates and the rc algortihm will end up with

	 * incorrect data.

	/*

	 * Initialize hw_mode information.

	/*

	 * Initialize HT information.

 MCS32 */

	/*

	 * Create channel information and survey arrays

	/*

	 * Allocate eeprom data.

	/*

	 * Enable rfkill polling by setting GPIO direction of the

	 * rfkill switch GPIO pin correctly.

	/*

	 * Initialize hw specifications.

	/*

	 * Set device capabilities.

	/*

	 * Set device requirements.

	/*

	 * Set the rssi offset.

/*

 * IEEE80211 stack callback functions.

	/*

	 * First pass the configuration through rt2x00lib, that will

	 * update the queue settings and validate the input. After that

	 * we are free to update the registers based on the value

	 * in the queue parameter.

	/*

	 * We only need to perform additional register initialization

	 * for WMM queues/

 Update WMM TXOP register */

 Update WMM registers */

 Update EDCA registers */

	/*

	 * Don't allow aggregation for stations the hardware isn't aware

	 * of because tx status reports for frames to an unknown station

	 * always contain wcid=WCID_END+1 and thus we can't distinguish

	 * between multiple stations which leads to unwanted situations

	 * when the hw reorders frames due to aggregation.

		/*

		 * The hw itself takes care of setting up BlockAck mechanisms.

		 * So, we only have to allow mac80211 to nagotiate a BlockAck

		 * agreement. Once that is done, the hw will BlockAck incoming

		 * AMPDUs without further setup.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2010 Willow Garage <http://www.willowgarage.com>

	Copyright (C) 2004 - 2010 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00usb

	Abstract: rt2x00 generic usb device routines.

/*

 * Interfacing with the HW.

 Device has disappeared. */

	/*

	 * Check for Cache availability.

/*

 * TX data handlers.

	/*

	 * If the transfer to hardware succeeded, it does not mean the

	 * frame was send out correctly. It only means the frame

	 * was successfully pushed to the hardware, we have no

	 * way to determine the transmission status right now.

	 * (Only indirectly by looking at the failed TX counters

	 * in the register).

	/*

	 * Check if the frame was correctly uploaded

	/*

	 * Report the frame as DMA done

	/*

	 * Schedule the delayed work for reading the TX status

	 * from the device.

	/*

	 * USB devices require certain padding at the end of each frame

	 * and urb. Those paddings are not included in skbs. Pass entry

	 * to the driver to determine what the overall length should be.

 TODO: report something more appropriate than IO_FAILED. */

/*

 * RX data handlers.

		/*

		 * Fill in desc fields of the skb descriptor

		/*

		 * Send the frame to rt2x00lib for further processing.

	/*

	 * Check if the received data is simply too small

	 * to be actually valid, or if the urb is signaling

	 * a problem.

	/*

	 * Report the frame as DMA done

	/*

	 * Schedule the delayed work for processing RX data

	/*

	 * Kill guardian urb (if required by driver).

	/*

	 * Obtain the queue completion handler

		/*

		 * Check if the driver is already done, otherwise we

		 * have to sleep a little while to give the driver/hw

		 * the oppurtunity to complete interrupt process itself.

		/*

		 * Schedule the completion handler manually, when this

		 * worker function runs, it should cleanup the queue.

		/*

		 * Wait for a little while to give the driver

		 * the oppurtunity to recover itself.

/*

 * Radio handlers

/*

 * Device initialization handlers.

	/*

	 * Walk through all available endpoints to search for "bulk in"

	 * and "bulk out" endpoints. When we find such endpoints collect

	 * the information we need from the descriptor and assign it

	 * to the queue.

	/*

	 * At least 1 endpoint for RX and 1 endpoint for TX must be available.

	/*

	 * It might be possible not all queues have a dedicated endpoint.

	 * Loop through all TX queues and copy the endpoint information

	 * which we have gathered from already assigned endpoints.

	/*

	 * If this is not the beacon queue or

	 * no guardian byte was required for the beacon,

	 * then we are done.

	/*

	 * If this is not the beacon queue or

	 * no guardian byte was required for the beacon,

	 * then we are done.

	/*

	 * Find endpoints for each queue

	/*

	 * Allocate DMA

/*

 * USB driver handlers.

	/*

	 * Free all allocated data.

	/*

	 * Free the USB device data.

 CONFIG_PM */

/*

 * rt2x00usb module information.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2500pci

	Abstract: rt2500pci device specific routines.

	Supported chipsets: RT2560.

/*

 * Register access.

 * All access to the CSR registers will go through the methods

 * rt2x00mmio_register_read and rt2x00mmio_register_write.

 * BBP and RF register require indirect register access,

 * and use the CSR registers BBPCSR and RFCSR to achieve this.

 * These indirect registers work with busy bits,

 * and we will try maximal REGISTER_BUSY_COUNT times to access

 * the register while taking a REGISTER_BUSY_DELAY us delay

 * between each attampt. When the busy bit is still set at that time,

 * the access attempt is considered to have failed,

 * and we will print an error.

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the new data into the register.

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the read request into the register.

	 * After the data has been written, we wait until hardware

	 * returns the correct value, if at any time the register

	 * doesn't become available in time, reg will be 0xffffffff

	 * which means we return 0xff to the caller.

	/*

	 * Wait until the RF becomes available, afterwards we

	 * can safely write the new data into the register.

 CONFIG_RT2X00_LIB_DEBUGFS */

 CONFIG_RT2X00_LIB_LEDS */

/*

 * Configuration handlers.

	/*

	 * Start configuration steps.

	 * Note that the version error will always be dropped

	 * and broadcast frames will always be accepted since

	 * there is no filter for it at this time.

		/*

		 * Enable beacon config

		/*

		 * Enable synchronisation.

	/*

	 * When short preamble is enabled, we should set bit 0x08

	/*

	 * We should never come here because rt2x00lib is supposed

	 * to catch this and send us the correct antenna explicitely.

	/*

	 * Configure the TX antenna.

	/*

	 * Configure the RX antenna.

	/*

	 * RT2525E and RT5222 need to flip TX I/Q

		/*

		 * RT2525E does not need RX I/Q Flip.

	/*

	 * Set TXpower.

	/*

	 * Switch on tuning bits.

	 * For RT2523 devices we do not need to update the R1 register.

	/*

	 * For RT2525 we should first set the channel to half band higher.

	/*

	 * Channel 14 requires the Japan filter bit to be set.

	/*

	 * Switch off tuning bits.

	 * For RT2523 devices we do not need to update the R1 register.

	/*

	 * Clear false CRC during channel switch.

 We must first disable autowake before it can be enabled */

/*

 * Link tuning

	/*

	 * Update FCS error count from register.

	/*

	 * Update False CCA count from register.

	/*

	 * To prevent collisions with MAC ASIC on chipsets

	 * up to version C the link tuning should halt after 20

	 * seconds while being associated.

	/*

	 * Chipset versions C and lower should directly continue

	 * to the dynamic CCA tuning. Chipset version D and higher

	 * should go straight to dynamic CCA tuning when they

	 * are not associated.

	/*

	 * A too low RSSI will cause too much false CCA which will

	 * then corrupt the R17 tuning. To remidy this the tuning should

	 * be stopped (While making sure the R17 value will not exceed limits)

	/*

	 * Special big-R17 for short distance

	/*

	 * Special mid-R17 for middle distance

	/*

	 * Leave short or middle distance condition, restore r17

	 * to the dynamic tuning range.

	/*

	 * R17 is inside the dynamic tuning range,

	 * start tuning the link based on the false cca counter.

/*

 * Queue handlers.

		/*

		 * Wait for possibly running tbtt tasklets.

/*

 * Initialization functions.

	/*

	 * Initialize registers.

	/*

	 * Always use CWmin and CWmax set in descriptor.

 CCK Signal */

 Rssi */

 OFDM Rate */

 RSSI */

	/*

	 * We must clear the FCS and FIFO error count.

	 * These registers are cleared on read,

	 * so we may pass a useless variable to store the value.

/*

 * Device state switch handlers.

	/*

	 * When interrupts are being enabled, the interrupt registers

	 * should clear the register to assure a clean state.

	/*

	 * Only toggle the interrupts bits we are going to use.

	 * Non-checked interrupt bits are disabled by default.

		/*

		 * Ensure that all tasklets are finished.

	/*

	 * Initialize all registers.

	/*

	 * Disable power

	/*

	 * Device is not guaranteed to be in the requested state yet.

	 * We must wait until the register indicates that the

	 * device has entered the correct state.

/*

 * TX descriptor initialization

	/*

	 * Start writing the descriptor words.

	/*

	 * Writing TXD word 0 must the last to prevent a race condition with

	 * the device, whereby the device may take hold of the TXD before we

	 * finished updating it.

	/*

	 * Register descriptor details in skb frame descriptor.

/*

 * TX data initialization

	/*

	 * Disable beaconing while we are reloading the beacon data,

	 * otherwise we might be sending out invalid data.

	/*

	 * Write the TX descriptor for the beacon.

	/*

	 * Dump beacon to userspace through debugfs.

	/*

	 * Enable beaconing again.

/*

 * RX control handlers

	/*

	 * Obtain the status about this packet.

	 * When frame was received with an OFDM bitrate,

	 * the signal is the PLCP value. If it was received with

	 * a CCK bitrate the signal is the rate in 100kbit/s.

/*

 * Interrupt functions.

		/*

		 * Obtain the status about this packet.

 Success */

 Success with retry */

 Failure, excessive retries */

 this is a failed frame! */

 Failure */

	/*

	 * Enable a single interrupt. The interrupt mask register

	 * access needs locking.

	/*

	 * Handle all tx queues.

	/*

	 * Enable all TXDONE interrupts again.

	/*

	 * Get the interrupt sources & saved to local variable.

	 * Write register value back to clear pending interrupts.

	/*

	 * Schedule tasklets for interrupt handling.

		/*

		 * Mask out all txdone interrupts.

	/*

	 * Disable all interrupts for which a tasklet was scheduled right now,

	 * the tasklet will reenable the appropriate interrupts.

/*

 * Device probe functions.

	/*

	 * Start validation of the data that has been read.

	/*

	 * Read EEPROM word for configuration.

	/*

	 * Identify RF chipset.

	/*

	 * Identify default antenna configuration.

	/*

	 * Store led mode, for correct led behaviour.

 CONFIG_RT2X00_LIB_LEDS */

	/*

	 * Detect if this device has an hardware controlled radio.

		/*

		 * On this device RFKILL initialized during probe does not work.

	/*

	 * Check if the BBP tuning should be enabled.

	/*

	 * Read the RSSI <-> dBm offset information.

/*

 * RF value list for RF2522

 * Supports: 2.4 GHz

/*

 * RF value list for RF2523

 * Supports: 2.4 GHz

/*

 * RF value list for RF2524

 * Supports: 2.4 GHz

/*

 * RF value list for RF2525

 * Supports: 2.4 GHz

/*

 * RF value list for RF2525e

 * Supports: 2.4 GHz

/*

 * RF value list for RF5222

 * Supports: 2.4 GHz & 5.2 GHz

 802.11 UNI / HyperLan 2 */

 802.11 HyperLan 2 */

 802.11 UNII */

	/*

	 * Initialize all hw fields.

	/*

	 * Disable powersaving as default.

	/*

	 * Initialize hw_mode information.

	/*

	 * Create channel information array

	/*

	 * Allocate eeprom data.

	/*

	 * Enable rfkill polling by setting GPIO direction of the

	 * rfkill switch GPIO pin correctly.

	/*

	 * Initialize hw specifications.

	/*

	 * This device requires the atim queue and DMA-mapped skbs.

	/*

	 * Set the rssi offset.

/*

 * IEEE80211 stack callback functions.

 CONFIG_RT2X00_LIB_DEBUGFS */

/*

 * RT2500pci module information.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00lib

	Abstract: rt2x00 generic link tuning routines.

/*

 * When we lack RSSI information return something less then -80 to

 * tell the driver to tune the device to maximum sensitivity.

	/*

	 * We are done sampling. Now we should evaluate the results.

	/*

	 * During the last period we have sampled the RSSI

	 * from both antennas. It now is time to determine

	 * which antenna demonstrated the best performance.

	 * When we are already on the antenna with the best

	 * performance, just create a good starting point

	 * for the history and we are done.

	/*

	 * Get current RSSI value along with the historical value,

	 * after that update the history with the current value.

	/*

	 * Legacy driver indicates that we should swap antenna's

	 * when the difference in RSSI is greater that 5. This

	 * also should be done when the RSSI was actually better

	 * then the previous sample.

	 * When the difference exceeds the threshold we should

	 * sample the rssi from the other antenna to make a valid

	 * comparison between the 2 antennas.

	/*

	 * Determine if software diversity is enabled for

	 * either the TX or RX antenna (or both).

	/*

	 * If we have only sampled the data over the last period

	 * we should now harvest the data. Otherwise just evaluate

	 * the data. The latter should only be performed once

	 * every 2 seconds.

	/*

	 * No need to update the stats for !=STA interfaces

	/*

	 * Frame was received successfully since non-succesfull

	 * frames would have been dropped by the hardware.

	/*

	 * We are only interested in quality statistics from

	 * beacons which came from the BSS which we are

	 * associated with.

	/*

	 * Update global RSSI

	/*

	 * Update antenna RSSI

	/*

	 * Single monitor mode interfaces should never have

	 * work with link tuners.

	/*

	 * While scanning, link tuning is disabled. By default

	 * the most sensitive settings will be used to make sure

	 * that all beacons and probe responses will be received

	 * during the scan.

	/*

	 * Reset link information.

	 * Both the currently active vgc level as well as

	 * the link tuner counter should be reset. Resetting

	 * the counter is important for devices where the

	 * device should only perform link tuning during the

	 * first minute after being enabled.

	/*

	 * Restore the VGC level as stored in the registers,

	 * the driver can use this to determine if the register

	 * must be updated during reset or not.

	/*

	 * Reset the link tuner.

	/*

	 * Update statistics.

	/*

	 * Update quality RSSI for link tuning,

	 * when we have received some frames and we managed to

	 * collect the RSSI data we could use this. Otherwise we

	 * must fallback to the default RSSI value.

	/*

	 * Check if link tuning is supported by the hardware, some hardware

	 * do not support link tuning at all, while other devices can disable

	 * the feature from the EEPROM.

	/*

	 * Send a signal to the led to update the led signal strength.

	/*

	 * Evaluate antenna setup, make this the last step when

	 * rt2x00lib_antenna_diversity made changes the quality

	 * statistics will be reset.

	/*

	 * When the radio is shutting down we should

	 * immediately cease all link tuning.

 Do not race with rt2x00mac_config(). */

	/*

	 * Increase tuner counter, and reschedule the next link tuner run.

	/*

	 * When the radio is shutting down we should

	 * immediately cease the watchdog monitoring.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2500usb

	Abstract: rt2500usb device specific routines.

	Supported chipsets: RT2570.

/*

 * Allow hardware encryption to be disabled.

/*

 * Register access.

 * All access to the CSR registers will go through the methods

 * rt2500usb_register_read and rt2500usb_register_write.

 * BBP and RF register require indirect register access,

 * and use the CSR registers BBPCSR and RFCSR to achieve this.

 * These indirect registers work with busy bits,

 * and we will try maximal REGISTER_USB_BUSY_COUNT times to access

 * the register while taking a REGISTER_BUSY_DELAY us delay

 * between each attampt. When the busy bit is still set at that time,

 * the access attempt is considered to have failed,

 * and we will print an error.

 * If the csr_mutex is already held then the _lock variants must

 * be used instead.

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the new data into the register.

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the read request into the register.

	 * After the data has been written, we wait until hardware

	 * returns the correct value, if at any time the register

	 * doesn't become available in time, reg will be 0xffffffff

	 * which means we return 0xff to the caller.

	/*

	 * Wait until the RF becomes available, afterwards we

	 * can safely write the new data into the register.

 CONFIG_RT2X00_LIB_DEBUGFS */

 CONFIG_RT2X00_LIB_LEDS */

/*

 * Configuration handlers.

/*

 * rt2500usb does not differentiate between shared and pairwise

 * keys, so we should use the same function for both key types.

		/*

		 * Disallow to set WEP key other than with index 0,

		 * it is known that not work at least on some hardware.

		 * SW crypto will be used in that case.

		/*

		 * Pairwise key will always be entry 0, but this

		 * could collide with a shared key on the same

		 * position...

		/*

		 * Hardware requires that all keys use the same cipher

		 * (e.g. TKIP-only, AES-only, but not TKIP+AES).

		 * If this is not the first key, compare the cipher with the

		 * first one and fall back to SW crypto if not the same.

		/*

		 * The driver does not support the IV/EIV generation

		 * in hardware. However it demands the data to be provided

		 * both separately as well as inside the frame.

		 * We already provided the CONFIG_CRYPTO_COPY_IV to rt2x00lib

		 * to ensure rt2x00lib will not strip the data from the

		 * frame after the copy, now we must tell mac80211

		 * to generate the IV/EIV data.

	/*

	 * TXRX_CSR0_KEY_ID contains only single-bit fields to indicate

	 * a particular key is valid.

	/*

	 * Start configuration steps.

	 * Note that the version error will always be dropped

	 * and broadcast frames will always be accepted since

	 * there is no filter for it at this time.

		/*

		 * Enable beacon config

		/*

		 * Enable synchronisation.

	/*

	 * We should never come here because rt2x00lib is supposed

	 * to catch this and send us the correct antenna explicitely.

	/*

	 * Configure the TX antenna.

	/*

	 * Configure the RX antenna.

	/*

	 * RT2525E and RT5222 need to flip TX I/Q

		/*

		 * RT2525E does not need RX I/Q Flip.

	/*

	 * Set TXpower.

	/*

	 * For RT2525E we should first set the channel to half band higher.

 We must first disable autowake before it can be enabled */

/*

 * Link tuning

	/*

	 * Update FCS error count from register.

	/*

	 * Update False CCA count from register.

/*

 * Queue handlers.

/*

 * Initialization functions.

/*

 * Device state switch handlers.

	/*

	 * Initialize all registers.

	/*

	 * Disable synchronisation.

	/*

	 * Device is not guaranteed to be in the requested state yet.

	 * We must wait until the register indicates that the

	 * device has entered the correct state.

 No support, but no error either */

/*

 * TX descriptor initialization

	/*

	 * Start writing the descriptor words.

	/*

	 * Register descriptor details in skb frame descriptor.

/*

 * TX data initialization

	/*

	 * Disable beaconing while we are reloading the beacon data,

	 * otherwise we might be sending out invalid data.

	/*

	 * Add space for the descriptor in front of the skb.

	/*

	 * Write the TX descriptor for the beacon.

	/*

	 * Dump beacon to userspace through debugfs.

	/*

	 * USB devices cannot blindly pass the skb->len as the

	 * length of the data to usb_fill_bulk_urb. Pass the skb

	 * to the driver to determine what the length should be.

	/*

	 * Second we need to create the guardian byte.

	 * We only need a single byte, so lets recycle

	 * the 'flags' field we are not using for beacons.

	/*

	 * Send out the guardian byte.

	/*

	 * Enable beaconing again.

	/*

	 * Beacon generation will fail initially.

	 * To prevent this we need to change the TXRX_CSR19

	 * register several times (reg0 is the same as reg

	 * except for TXRX_CSR19_BEACON_GEN, which is 0 in reg0

	 * and 1 in reg).

	/*

	 * The length _must_ be a multiple of 2,

	 * but it must _not_ be a multiple of the USB packet size.

/*

 * RX control handlers

	/*

	 * Copy descriptor to the skbdesc->desc buffer, making it safe from moving of

	 * frame data in rt2x00usb.

	/*

	 * It is now safe to read the descriptor on all architectures.

 ICV is located at the end of frame */

	/*

	 * Obtain the status about this packet.

	 * When frame was received with an OFDM bitrate,

	 * the signal is the PLCP value. If it was received with

	 * a CCK bitrate the signal is the rate in 100kbit/s.

	/*

	 * Adjust the skb memory window to the frame boundaries.

/*

 * Interrupt functions.

	/*

	 * Check if this was the guardian beacon,

	 * if that was the case we need to send the real beacon now.

	 * Otherwise we should free the sk_buffer, the device

	 * should be doing the rest of the work now.

/*

 * Device probe functions.

	/*

	 * Start validation of the data that has been read.

	/*

	 * Switch lower vgc bound to current BBP R17 value,

	 * lower the value a bit for better quality.

	/*

	 * Read EEPROM word for configuration.

	/*

	 * Identify RF chipset.

	/*

	 * Identify default antenna configuration.

	/*

	 * When the eeprom indicates SW_DIVERSITY use HW_DIVERSITY instead.

	 * I am not 100% sure about this, but the legacy drivers do not

	 * indicate antenna swapping in software is required when

	 * diversity is enabled.

	/*

	 * Store led mode, for correct led behaviour.

 CONFIG_RT2X00_LIB_LEDS */

	/*

	 * Detect if this device has an hardware controlled radio.

	/*

	 * Read the RSSI <-> dBm offset information.

/*

 * RF value list for RF2522

 * Supports: 2.4 GHz

/*

 * RF value list for RF2523

 * Supports: 2.4 GHz

/*

 * RF value list for RF2524

 * Supports: 2.4 GHz

/*

 * RF value list for RF2525

 * Supports: 2.4 GHz

/*

 * RF value list for RF2525e

 * Supports: 2.4 GHz

/*

 * RF value list for RF5222

 * Supports: 2.4 GHz & 5.2 GHz

 802.11 UNI / HyperLan 2 */

 802.11 HyperLan 2 */

 802.11 UNII */

	/*

	 * Initialize all hw fields.

	 *

	 * Don't set IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING unless we are

	 * capable of sending the buffered frames out after the DTIM

	 * transmission using rt2x00lib_beacondone. This will send out

	 * multicast and broadcast traffic immediately instead of buffering it

	 * infinitly and thus dropping it after some time.

	/*

	 * Disable powersaving as default.

	/*

	 * Initialize hw_mode information.

	/*

	 * Create channel information array

	/*

	 * Allocate eeprom data.

	/*

	 * Enable rfkill polling by setting GPIO direction of the

	 * rfkill switch GPIO pin correctly.

	/*

	 * Initialize hw specifications.

	/*

	 * This device requires the atim queue

	/*

	 * Set the rssi offset.

 CONFIG_RT2X00_LIB_DEBUGFS */

/*

 * rt2500usb module information.

 ASUS */

 Belkin */

 FCC ID: K7SF5D7050A ver. 2.x */

 Cisco Systems */

 Conceptronic */

 D-LINK */

 Gigabyte */

 Hercules */

 Melco */

 MSI */

 Ralink */

 Sagem */

 Siemens */

 SMC */

 Spairon */

 SURECOM */

 Trust */

 VTech */

 Zinwell */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00lib

	Abstract: rt2x00 crypto specific routines.

	/*

	 * Extend frame length to include IV/EIV/ICV/MMIC,

	 * note that these lengths should only be added when

	 * mac80211 does not generate it.

 Copy IV/EIV data */

 Copy IV/EIV data */

 Move ieee80211 header */

 Pull buffer to correct size */

 IV/EIV data has officially been stripped */

 Move ieee80211 header */

 Copy IV/EIV data */

 IV/EIV data has returned into the frame */

	/*

	 * WEP64/WEP128: Provides IV & ICV

	 * TKIP: Provides IV/EIV & ICV

	 * AES: Provies IV/EIV & ICV

 Unsupport type */

	/*

	 * Make room for new data. There are 2 possibilities

	 * either the alignment is already present between

	 * the 802.11 header and payload. In that case we

	 * have to move the header less than the iv_len

	 * since we can use the already available l2pad bytes

	 * for the iv data.

	 * When the alignment must be added manually we must

	 * move the header more then iv_len since we must

	 * make room for the payload move as well.

 Move ieee80211 header */

 Move ieee80211 header */

 Copy IV/EIV data */

	/*

	 * Move payload for alignment purposes. Note that

	 * this is only needed when no l2 padding is present.

	/*

	 * NOTE: Always count the payload as transferred,

	 * even when alignment was set to zero. This is required

	 * for determining the correct offset for the ICV data.

	/*

	 * Copy ICV data

	 * AES appends 8 bytes, we can't fill the upper

	 * 4 bytes, but mac80211 doesn't care about what

	 * we provide here anyway and strips it immediately.

 IV/EIV/ICV has been inserted into frame */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00mmio

	Abstract: rt2x00 generic mmio device routines.

/*

 * Register access.

		/*

		 * Fill in desc fields of the skb descriptor

		/*

		 * DMA is already done, notify rt2x00lib that

		 * it finished successfully.

		/*

		 * Send the frame to rt2x00lib for further processing.

/*

 * Device initialization handlers.

	/*

	 * Allocate DMA memory for descriptor and buffer.

	/*

	 * Initialize all queue entries to contain valid addresses.

	/*

	 * Allocate DMA

	/*

	 * Register interrupt handler.

	/*

	 * Free irq line.

	/*

	 * Free DMA

/*

 * rt2x00mmio module information.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00mac

	Abstract: rt2x00 generic mac80211 routines.

	/*

	 * Copy TX information over from original frame to

	 * RTS/CTS frame. Note that we set the no encryption flag

	 * since we don't want this frame to be encrypted.

	 * RTS frames should be acked, while CTS-to-self frames

	 * should not. The ready for TX flag is cleared to prevent

	 * it being automatically send when the descriptor is

	 * written to the hardware.

 Disable hardware encryption */

	/*

	 * RTS/CTS frame should use the length of the frame plus any

	 * encryption overhead that will be added by the hardware.

	/*

	 * Mac80211 might be calling this function while we are trying

	 * to remove the device or perhaps suspending it.

	 * Note that we can only stop the TX queues inside the TX path

	 * due to possible race conditions in mac80211.

	/*

	 * Use the ATIM queue if appropriate and present.

	/*

	 * If CTS/RTS is required. create and queue that frame first.

	 * Make sure we have at least enough entries available to send

	 * this CTS/RTS frame as well as the data frame.

	 * Note that when the driver has set the set_rts_threshold()

	 * callback function it doesn't need software generation of

	 * either RTS or CTS-to-self frame and handles everything

	 * inside the hardware.

			/*

			 * Recheck for full queue under lock to avoid race

			 * conditions with rt2x00lib_txdone().

		/*

		 * This is special case for ieee80211_restart_hw(), otherwise

		 * mac80211 never call start() two times in row without stop();

	/*

	 * Don't allow interfaces to be added

	 * the device has disappeared.

	/*

	 * Loop through all beacon queues to find a free

	 * entry. Since there are as much beacon entries

	 * as the maximum interfaces, this search shouldn't

	 * fail.

	/*

	 * We are now absolutely sure the interface can be created,

	 * increase interface count and start initialization.

	/*

	 * The MAC address must be configured after the device

	 * has been initialized. Otherwise the device can reset

	 * the MAC registers.

	 * The BSSID address must only be configured in AP mode,

	 * however we should not send an empty BSSID address for

	 * STA interfaces at this time, since this can cause

	 * invalid behavior in the device.

	/*

	 * Some filters depend on the current working mode. We can force

	 * an update during the next configure_filter() run by mac80211 by

	 * resetting the current packet_filter state.

	/*

	 * Don't allow interfaces to be remove while

	 * either the device has disappeared or when

	 * no interface is present.

	/*

	 * Release beacon entry so it is available for

	 * new interfaces again.

	/*

	 * Make sure the bssid and mac address registers

	 * are cleared to prevent false ACKing of frames.

	/*

	 * mac80211 might be calling this function while we are trying

	 * to remove the device or perhaps suspending it.

	/*

	 * Some configuration parameters (e.g. channel and antenna values) can

	 * only be set when the radio is enabled, but do require the RX to

	 * be off. During this period we should keep link tuning enabled,

	 * if for any reason the link tuner must be reset, this will be

	 * handled by rt2x00lib_config().

 Do not race with with link tuner. */

	/*

	 * When we've just turned on the radio, we want to reprogram

	 * everything to ensure a consistent state

	/*

	 * After the radio has been enabled we need to configure

	 * the antenna to the default settings. rt2x00lib_config_antenna()

	 * should determine if any action should be taken based on

	 * checking if diversity has been enabled or no antenna changes

	 * have been made since the last configuration change.

 Turn RX back on */

	/*

	 * Mask off any flags we are going to ignore

	 * from the total_flags field.

	/*

	 * Apply some rules to the filters:

	 * - Some filters imply different filters to be set.

	 * - Some things we can't filter out at all.

	 * - Multicast filter seems to kill broadcast traffic so never use it.

	/*

	 * If the device has a single filter for all control frames,

	 * FIF_CONTROL and FIF_PSPOLL flags imply each other.

	 * And if the device has more than one filter for control frames

	 * of different types, but has no a separate filter for PS Poll frames,

	 * FIF_CONTROL flag implies FIF_PSPOLL.

 queue work to upodate the beacon template */

 The hardware can't do MFP */

	/*

	 * To support IBSS RSN, don't program group keys in IBSS, the

	 * hardware will then not attempt to decrypt the frames.

	/*

	 * Each BSS has a maximum of 4 shared keys.

	 * Shared key index values:

	 *	0) BSS0 key0

	 *	1) BSS0 key1

	 *	...

	 *	4) BSS1 key0

	 *	...

	 *	8) BSS2 key0

	 *	...

	 * Both pairwise as shared key indeces are determined by

	 * driver. This is required because the hardware requires

	 * keys to be assigned in correct order (When key 1 is

	 * provided but key 0 is not, then the key is not found

	 * by the hardware during RX).

 CONFIG_RT2X00_LIB_CRYPTO */

	/*

	 * The dot11ACKFailureCount, dot11RTSFailureCount and

	 * dot11RTSSuccessCount are updated in interrupt time.

	 * dot11FCSErrorCount is updated in the link tuner.

	/*

	 * mac80211 might be calling this function while we are trying

	 * to remove the device or perhaps suspending it.

	/*

	 * Update the BSSID.

	/*

	 * Start/stop beaconing.

				/*

				 * Last beaconing interface disabled

				 * -> stop beacon queue.

			/*

			 * Clear beacon in the H/W for this vif. This is needed

			 * to disable beaconing on this particular interface

			 * and keep it running on other interfaces.

			/*

			 * Upload beacon to the H/W. This is only required on

			 * USB devices. PCI devices fetch beacons periodically.

				/*

				 * First beaconing interface enabled

				 * -> start beacon queue.

	/*

	 * When the association status has changed we must reset the link

	 * tuner counter. This is because some drivers determine if they

	 * should perform link tuning based on the number of seconds

	 * while associated or not associated.

	/*

	 * When the erp information has changed, we should perform

	 * additional configuration steps. For all other changes we are done.

	/*

	 * The passed variables are stored as real value ((2^n)-1).

	 * Ralink registers require to know the bit number 'n'.

 cw_min: 2^5 = 32. */

 cw_min: 2^10 = 1024. */

 The antenna value is not supposed to be 0,

 or exceed the maximum number of antenna's.

 When the client tried to configure the antenna to or from

 diversity mode, we must reset the default antenna as well

 as that controls the diversity switch.

 If diversity is being enabled, check if we need hardware

 or software diversity. In the latter case, reset the value,

 and make sure we update the antenna flags to have the

 link tuner pick up the diversity tuning.

 When software diversity is active, we must report this to the

 client and not the current active antenna state.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00lib

	Abstract: rt2x00 generic configuration routines.

	/*

	 * Note that when NULL is passed as address we will send

	 * 00:00:00:00:00 to the device to clear the address.

	 * This will prevent the device being confused when it wants

	 * to ACK frames or considers itself associated.

 Update the AID, this is needed for dynamic PS support */

 Update global beacon interval time, this is needed for PS support */

	/*

	 * When the caller tries to send the SW diversity,

	 * we must update the ANTENNA_RX_DIVERSITY flag to

	 * enable the antenna diversity in the link tuner.

	 *

	 * Secondly, we must guarentee we never send the

	 * software antenna diversity command to the driver.

	/*

	 * Antenna setup changes require the RX to be disabled,

	 * else the changes will be ignored by the device.

	/*

	 * Write new antenna setup to device and reset the link tuner.

	 * The latter is required since we need to recalibrate the

	 * noise-sensitivity ratio for the new setup.

	/*

	 * Initialize center channel to current channel.

	/*

	 * Adjust center channel to HT40+ and HT40- operation.

 Used for VCO periodic calibration */

	/*

	 * Start configuration.

	/*

	 * Some configuration changes affect the link quality

	 * which means we need to reset the link tuner.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt73usb

	Abstract: rt73usb device specific routines.

	Supported chipsets: rt2571W & rt2671.

/*

 * Allow hardware encryption to be disabled.

/*

 * Register access.

 * All access to the CSR registers will go through the methods

 * rt2x00usb_register_read and rt2x00usb_register_write.

 * BBP and RF register require indirect register access,

 * and use the CSR registers BBPCSR and RFCSR to achieve this.

 * These indirect registers work with busy bits,

 * and we will try maximal REGISTER_BUSY_COUNT times to access

 * the register while taking a REGISTER_BUSY_DELAY us delay

 * between each attampt. When the busy bit is still set at that time,

 * the access attempt is considered to have failed,

 * and we will print an error.

 * The _lock versions must be used if you already hold the csr_mutex

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the new data into the register.

	/*

	 * Wait until the BBP becomes available, afterwards we

	 * can safely write the read request into the register.

	 * After the data has been written, we wait until hardware

	 * returns the correct value, if at any time the register

	 * doesn't become available in time, reg will be 0xffffffff

	 * which means we return 0xff to the caller.

	/*

	 * Wait until the RF becomes available, afterwards we

	 * can safely write the new data into the register.

		/*

		 * RF5225 and RF2527 contain 21 bits per RF register value,

		 * all others contain 20 bits.

 CONFIG_RT2X00_LIB_DEBUGFS */

		/*

		 * The brightness is divided into 6 levels (0 - 5),

		 * this means we need to convert the brightness

		 * argument into the matching level within that range.

 CONFIG_RT2X00_LIB_LEDS */

/*

 * Configuration handlers.

		/*

		 * rt2x00lib can't determine the correct free

		 * key_idx for shared keys. We have 1 register

		 * with key valid bits. The goal is simple, read

		 * the register, if that is full we have no slots

		 * left.

		 * Note that each BSS is allowed to have up to 4

		 * shared keys, so put a mask over the allowed

		 * entries.

		/*

		 * Upload key to hardware

		/*

		 * The cipher types are stored over 2 registers.

		 * bssidx 0 and 1 keys are stored in SEC_CSR1 and

		 * bssidx 1 and 2 keys are stored in SEC_CSR5.

		 * Using the correct defines correctly will cause overhead,

		 * so just calculate the correct offset.

		/*

		 * The driver does not support the IV/EIV generation

		 * in hardware. However it doesn't support the IV/EIV

		 * inside the ieee80211 frame either, but requires it

		 * to be provided separately for the descriptor.

		 * rt2x00lib will cut the IV/EIV data out of all frames

		 * given to us by mac80211, but we must tell mac80211

		 * to generate the IV/EIV data.

	/*

	 * SEC_CSR0 contains only single-bit fields to indicate

	 * a particular key is valid. Because using the FIELD32()

	 * defines directly will cause a lot of overhead we use

	 * a calculation to determine the correct bit directly.

		/*

		 * rt2x00lib can't determine the correct free

		 * key_idx for pairwise keys. We have 2 registers

		 * with key valid bits. The goal is simple, read

		 * the first register, if that is full move to

		 * the next register.

		 * When both registers are full, we drop the key,

		 * otherwise we use the first invalid entry.

		/*

		 * Upload key to hardware

		/*

		 * Send the address and cipher type to the hardware register.

		/*

		 * Enable pairwise lookup table for given BSS idx,

		 * without this received frames will not be decrypted

		 * by the hardware.

		/*

		 * The driver does not support the IV/EIV generation

		 * in hardware. However it doesn't support the IV/EIV

		 * inside the ieee80211 frame either, but requires it

		 * to be provided separately for the descriptor.

		 * rt2x00lib will cut the IV/EIV data out of all frames

		 * given to us by mac80211, but we must tell mac80211

		 * to generate the IV/EIV data.

	/*

	 * SEC_CSR2 and SEC_CSR3 contain only single-bit fields to indicate

	 * a particular key is valid. Because using the FIELD32()

	 * defines directly will cause a lot of overhead we use

	 * a calculation to determine the correct bit directly.

	/*

	 * Start configuration steps.

	 * Note that the version error will always be dropped

	 * and broadcast frames will always be accepted since

	 * there is no filter for it at this time.

		/*

		 * Enable synchronisation.

	/*

	 * Configure the RX antenna.

	/*

	 * Configure the RX antenna.

	/*

	 * value[0] -> non-LNA

	 * value[1] -> LNA

	/*

	 * We should never come here because rt2x00lib is supposed

	 * to catch this and send us the correct antenna explicitely.

 We must first disable autowake before it can be enabled */

 Always recalculate LNA gain before changing configuration */

/*

 * Link tuning

	/*

	 * Update FCS error count from register.

	/*

	 * Update False CCA count from register.

	/*

	 * Determine r17 bounds.

	/*

	 * If we are not associated, we should go straight to the

	 * dynamic CCA tuning.

	/*

	 * Special big-R17 for very short distance

	/*

	 * Special big-R17 for short distance

	/*

	 * Special big-R17 for middle-short distance

	/*

	 * Special mid-R17 for middle distance

	/*

	 * Special case: Change up_bound based on the rssi.

	 * Lower up_bound when rssi is weaker then -74 dBm.

	/*

	 * r17 does not yet exceed upper limit, continue and base

	 * the r17 tuning on the false CCA count.

/*

 * Queue handlers.

/*

 * Firmware functions

	/*

	 * Only support 2kb firmware files.

	/*

	 * The last 2 bytes in the firmware array are the crc checksum itself,

	 * this means that we should never pass those 2 bytes to the crc

	 * algorithm.

	/*

	 * Use the crc itu-t algorithm.

	/*

	 * Wait for stable hardware.

	/*

	 * Write firmware to device.

	/*

	 * Send firmware request to device to load firmware,

	 * we need to specify a long timeout time.

/*

 * Initialization functions.

 CCK Signal */

 Rssi */

 OFDM Rate */

 Rssi */

	/*

	 * CCK TXD BBP registers

	/*

	 * OFDM TXD BBP registers

	/*

	 * Invalidate all Shared Keys (SEC_CSR0),

	 * and clear the Shared key Cipher algorithms (SEC_CSR1 & SEC_CSR5)

	/*

	 * Clear all beacons

	 * For the Beacon base registers we only need to clear

	 * the first byte since that byte contains the VALID and OWNER

	 * bits which (when set to 0) will invalidate the entire beacon.

	/*

	 * We must clear the error counters.

	 * These registers are cleared on read,

	 * so we may pass a useless variable to store the value.

	/*

	 * Reset MAC and BBP registers.

/*

 * Device state switch handlers.

	/*

	 * Initialize all registers.

	/*

	 * Disable synchronisation.

	/*

	 * Device is not guaranteed to be in the requested state yet.

	 * We must wait until the register indicates that the

	 * device has entered the correct state.

 No support, but no error either */

/*

 * TX descriptor initialization

	/*

	 * Start writing the descriptor words.

	/*

	 * Register descriptor details in skb frame descriptor.

/*

 * TX data initialization

	/*

	 * Disable beaconing while we are reloading the beacon data,

	 * otherwise we might be sending out invalid data.

	/*

	 * Add space for the descriptor in front of the skb.

	/*

	 * Write the TX descriptor for the beacon.

	/*

	 * Dump beacon to userspace through debugfs.

	/*

	 * Write entire beacon with descriptor and padding to register.

 skb freed by skb_pad() on failure */

	/*

	 * Enable beaconing again.

	 *

	 * For Wi-Fi faily generated beacons between participating stations.

	 * Set TBTT phase adaptive adjustment step to 8us (default 16us)

	/*

	 * Clean up the beacon skb.

	/*

	 * Disable beaconing while we are reloading the beacon data,

	 * otherwise we might be sending out invalid data.

	/*

	 * Clear beacon.

	/*

	 * Restore beaconing state.

	/*

	 * The length _must_ be a multiple of 4,

	 * but it must _not_ be a multiple of the USB packet size.

/*

 * RX control handlers

	/*

	 * Copy descriptor to the skbdesc->desc buffer, making it safe from moving of

	 * frame data in rt2x00usb.

	/*

	 * It is now safe to read the descriptor on all architectures.

		/*

		 * Hardware has stripped IV/EIV data from 802.11 frame during

		 * decryption. It has provided the data separately but rt2x00lib

		 * should decide if it should be reinserted.

		/*

		 * The hardware has already checked the Michael Mic and has

		 * stripped it from the frame. Signal this to mac80211.

	/*

	 * Obtain the status about this packet.

	 * When frame was received with an OFDM bitrate,

	 * the signal is the PLCP value. If it was received with

	 * a CCK bitrate the signal is the rate in 100kbit/s.

	/*

	 * Set skb pointers, and update frame information.

/*

 * Device probe functions.

	/*

	 * Start validation of the data that has been read.

	/*

	 * Read EEPROM word for configuration.

	/*

	 * Identify RF chipset.

	/*

	 * Identify default antenna configuration.

	/*

	 * Read the Frame type.

	/*

	 * Detect if this device has an hardware controlled radio.

	/*

	 * Read frequency offset.

	/*

	 * Read external LNA informations.

	/*

	 * Store led settings, for correct led behaviour.

 CONFIG_RT2X00_LIB_LEDS */

/*

 * RF value list for RF2528

 * Supports: 2.4 GHz

/*

 * RF value list for RF5226

 * Supports: 2.4 GHz & 5.2 GHz

 802.11 UNI / HyperLan 2 */

 802.11 HyperLan 2 */

 802.11 UNII */

 MMAC(Japan)J52 ch 34,38,42,46 */

/*

 * RF value list for RF5225 & RF2527

 * Supports: 2.4 GHz & 5.2 GHz

 802.11 UNI / HyperLan 2 */

 802.11 HyperLan 2 */

 802.11 UNII */

 MMAC(Japan)J52 ch 34,38,42,46 */

	/*

	 * Initialize all hw fields.

	 *

	 * Don't set IEEE80211_HOST_BROADCAST_PS_BUFFERING unless we are

	 * capable of sending the buffered frames out after the DTIM

	 * transmission using rt2x00lib_beacondone. This will send out

	 * multicast and broadcast traffic immediately instead of buffering it

	 * infinitly and thus dropping it after some time.

	/*

	 * Initialize hw_mode information.

	/*

	 * Create channel information array

	/*

	 * Allocate eeprom data.

	/*

	 * Enable rfkill polling by setting GPIO direction of the

	 * rfkill switch GPIO pin correctly.

	/*

	 * Initialize hw specifications.

	/*

	 * This device has multiple filters for control frames,

	 * but has no a separate filter for PS Poll frames.

	/*

	 * This device requires firmware.

	/*

	 * Set the rssi offset.

/*

 * IEEE80211 stack callback functions.

	/*

	 * First pass the configuration through rt2x00lib, that will

	 * update the queue settings and validate the input. After that

	 * we are free to update the registers based on the value

	 * in the queue parameter.

	/*

	 * We only need to perform additional register initialization

	 * for WMM queues/

 Update WMM TXOP register */

 Update WMM registers */

 CONFIG_RT2X00_LIB_DEBUGFS */

/*

 * rt73usb module information.

 AboCom */

 AL */

 Amigo */

 AMIT  */

 Askey */

 ASUS */

 Belkin */

 FCC ID: K7SF5D7050B ver. 3.x */

 Billionton */

 Buffalo */

 CEIVA */

 CNet */

 Conceptronic */

 Corega */

 D-Link */

 Edimax */

 EnGenius */

 Gemtek */

 Gigabyte */

 Huawei-3Com */

 Hercules */

 Linksys */

 MSI */

 Ovislink */

 Ralink */

 Qcom */

 Samsung */

 Senao */

 Sitecom */

 Surecom */

 Tilgin */

 Philips */

 Planex */

 WideTell */

 Zcom */

 ZyXEL */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2010 Willow Garage <http://www.willowgarage.com>

	Copyright (C) 2009 - 2010 Ivo van Doorn <IvDoorn@gmail.com>

	Copyright (C) 2009 Mattias Nissler <mattias.nissler@gmx.de>

	Copyright (C) 2009 Felix Fietkau <nbd@openwrt.org>

	Copyright (C) 2009 Xose Vazquez Perez <xose.vazquez@gmail.com>

	Copyright (C) 2009 Axel Kollhofer <rain_maker@root-forum.org>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2800usb

	Abstract: rt2800usb device specific routines.

	Supported chipsets: RT2800U.

/*

 * Allow hardware encryption to be disabled.

/*

 * Queue handlers.

 Reschedule urb to read TX status again instantly */

 Check if there is any entry that timedout waiting on TX status */

 Read register after 1 ms */

	/*

	 * There is small race window above, between txstatus pending check and

	 * clear_bit someone could do rt2x00usb_interrupt_txdone, so recheck

	 * here again if status reading is needed.

 Read TX_STA_FIFO register after 2 ms */

/*

 * Firmware functions

	/* cannot use rt2x00usb_register_read here as it uses different

	 * mode (MULTI_READ vs. DEVICE_MODE) and does not pass the

	 * magic value USB_MODE_AUTORUN (0x11) to the device, thus the

	 * returned value would be invalid.

	/*

	 * Check which section of the firmware we need.

	/*

	 * Write firmware to device.

	/*

	 * Send firmware request to device to load firmware,

	 * we need to specify a long timeout time.

/*

 * Device state switch handlers.

	/*

	 * Wait until BBP and RF are ready.

	/*

	 * Total room for RX frames in kilobytes, PBF might still exceed

	 * this limit so reduce the number to prevent errors.

		/*

		 * Before the radio can be enabled, the device first has

		 * to be woken up. After that it needs a bit of time

		 * to be fully awake and then the radio can be enabled.

		/*

		 * After the radio has been disabled, the device should

		 * be put to sleep for powersaving.

 No support, but no error either */

/*

 * TX descriptor initialization

	/*

	 * Initialize TXINFO descriptor

	/*

	 * The size of TXINFO_W0_USB_DMA_TX_PKT_LEN is

	 * TXWI + 802.11 header + L2 pad + payload + pad,

	 * so need to decrease size of TXINFO.

	/*

	 * Register descriptor details in skb frame descriptor.

/*

 * TX data initialization

	/*

	 * pad(1~3 bytes) is needed after each 802.11 payload.

	 * USB end pad(4 bytes) is needed at each USB bulk out packet end.

	 * TX frame format is :

	 * | TXINFO | TXWI | 802.11 header | L2 pad | payload | pad | USB end pad |

	 *                 |<------------- tx_pkt_len ------------->|

/*

 * TX control handlers

		/*

		 * The hw may delay sending the packet after DMA complete

		 * if the medium is busy, thus the TX_STA_FIFO entry is

		 * also delayed -> use a timer to retrieve it.

/*

 * RX control handlers

	/*

	 * Copy descriptor to the skbdesc->desc buffer, making it safe from

	 * moving of frame data in rt2x00usb.

	/*

	 * RX frame format is :

	 * | RXINFO | RXWI | header | L2 pad | payload | pad | RXD | USB pad |

	 *          |<------------ rx_pkt_len -------------->|

	/*

	 * Remove the RXINFO structure from the sbk.

	/*

	 * Check for rx_pkt_len validity. Return if invalid, leaving

	 * rxdesc->size zeroed out by the upper level.

	/*

	 * It is now safe to read the descriptor on all architectures.

		/*

		 * Hardware has stripped IV/EIV data from 802.11 frame during

		 * decryption. Unfortunately the descriptor doesn't contain

		 * any fields with the EIV/IV data either, so they can't

		 * be restored by rt2x00lib.

		/*

		 * The hardware has already checked the Michael Mic and has

		 * stripped it from the frame. Signal this to mac80211.

			/*

			 * In order to check the Michael Mic, the packet must have

			 * been decrypted.  Mac80211 doesnt check the MMIC failure

			 * flag to initiate MMIC countermeasures if the decoded flag

			 * has not been set.

	/*

	 * Remove RXD descriptor from end of buffer.

	/*

	 * Process the RXWI structure.

/*

 * Device probe functions.

	/*

	 * Set txstatus timer function.

	/*

	 * Overwrite TX done handler

 CONFIG_RT2X00_LIB_DEBUGFS */

/*

 * rt2800usb module information.

 Abocom */

 AirTies */

 Allwin */

 Alpha Networks */

 Amit */

 Askey */

 ASUS */

 AzureWave */

 Belkin */

 Buffalo */

 Corega */

 D-Link */

 Draytek */

 DVICO */

 Edimax */

 Encore */

 EnGenius */

 Gemtek */

 Gigabyte */

 Hawking */

 I-O DATA */

 Linksys */

 Logitec */

 Motorola */

 MSI */

 Ovislink */

 Para */

 Pegatron */

 Philips */

 Planex */

 Quanta */

 Ralink */

 Samsung */

 Siemens */

 Sitecom */

 SMC */

 Sparklan */

 Sweex */

 U-Media */

 ZCOM */

 Zinwell */

 Zyxel */

 Belkin */

 D-Link */

 Panasonic */

 Accton/Arcadyan/Epson */

 Philips */

 Ralink */

 Sitecom */

 Sweex */

 Allwin */

 Askey */

 ASUS */

 Cisco */

 EnGenius */

 I-O DATA */

 Linksys */

 Logitec */

 Ralink */

 Sitecom */

 Toshiba */

 Zinwell */

 AirLive */

 ASUS */

 Belkin */

 Cameo */

 D-Link */

 Edimax */

 Hawking */

 I-O DATA */

 Linksys */

 Logitec */

 NETGEAR */

 Planex */

 Ralink */

 Sitecom */

 ZyXEL */

 Arcadyan */

 ASUS */

 Azurewave */

 D-Link */

 LG innotek */

 Panasonic */

 Philips */

 Ralink */

 Arcadyan */

 AVM GmbH */

 Buffalo */

 D-Link */

 Proware */

 Ralink */

 TRENDnet */

	/*

	 * Unclear what kind of devices these are (they aren't supported by the

	 * vendor linux driver).

 Abocom */

 Alpha Networks */

 Amigo */

 ASUS */

 AzureWave */

 Belkin */

 Buffalo */

 Corega */

 D-Link */

 Encore */

 EnGenius */

 Gemtek */

 Gigabyte */

 Hercules */

 Huawei */

 I-O DATA */

 LevelOne */

 Logitec */

 Motorola */

 Pegatron */

 Planex */

 Qcom */

 RadioShack */

 Sitecom */

 SMC */

 Sweex */

 TP-LINK */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	Copyright (C) 2004 - 2009 Gertjan van Wingerde <gwingerde@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00lib

	Abstract: rt2x00 firmware loading routines.

	/*

	 * Read correct firmware from harddisk.

	/*

	 * Send firmware to the device.

	/*

	 * When the firmware is uploaded to the hardware the LED

	 * association status might have been triggered, for correct

	 * LED handling it should now be reset.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Copyright (C) 2004 - 2009 Ivo van Doorn <IvDoorn@gmail.com>

	<http://rt2x00.serialmonkey.com>



/*

	Module: rt2x00lib

	Abstract: rt2x00 debugfs specific routines.

	/*

	 * Pointer to driver structure where

	 * this debugfs entry belongs to.

	/*

	 * Reference to the rt2x00debug structure

	 * which can be used to communicate with

	 * the registers.

	/*

	 * Debugfs entries for:

	 * - driver folder

	 *   - driver file

	 *   - chipset file

	 *   - device state flags file

	 *   - device capability flags file

	 *   - hardware restart file

	 *   - register folder

	 *     - csr offset/value files

	 *     - eeprom offset/value files

	 *     - bbp offset/value files

	 *     - rf offset/value files

	 *     - rfcsr offset/value files

	 *   - queue folder

	 *     - frame dump file

	 *     - queue stats file

	 *     - crypto stats file

	/*

	 * The frame dump file only allows a single reader,

	 * so we need to store the current state here.

	/*

	 * We queue each frame before dumping it to the user,

	 * per read command we will pass a single skb structure

	 * so we should be prepared to queue multiple sk buffers

	 * before sending it to userspace.

	/*

	 * HW crypto statistics.

	 * All statistics are stored separately per cipher type.

	/*

	 * Driver and chipset files will use a data buffer

	 * that has been created in advance. This will simplify

	 * the code since we can use the debugfs functions.

	/*

	 * Requested offset for each register type.

 Remove CIPHER_NONE index */

	/*

	 * Verify that the file has not been closed while we were working.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * at76c503/at76c505 USB driver

 *

 * Copyright (c) 2002 - 2003 Oliver Kurth

 * Copyright (c) 2004 Joerg Albert <joerg.albert@gmx.de>

 * Copyright (c) 2004 Nick Jones

 * Copyright (c) 2004 Balint Seeber <n0_5p4m_p13453@hotmail.com>

 * Copyright (c) 2007 Guido Guenther <agx@sigxcpu.org>

 * Copyright (c) 2007 Kalle Valo <kalle.valo@iki.fi>

 * Copyright (c) 2010 Sebastian Smolorz <sesmo@gmx.net>

 *

 * This file is part of the Berlios driver for WLAN USB devices based on the

 * Atmel AT76C503A/505/505A.

 *

 * Some iw_handler code was taken from airo.c, (C) 1999 Benjamin Reed

 *

 * TODO list is at the wiki:

 *

 * https://wireless.wiki.kernel.org/en/users/Drivers/at76c50x-usb#TODO

 Version information */

 at76_debug bits */

 authentication/accociation */

 show BSS table after scans */

 ioctl calls / settings */

 MAC state transitions */

 tx header */

 tx content */

 tx management */

 rx data header */

 rx data content */

 rx mgmt frame headers */

 rx beacon */

 rx control */

 rx mgmt content */

 rx data fragment handling */

 fw download, device start */

 rx urb status, ... */

 Atmel-specific Rx headers */

 procedure entries/exits */

 power management settings */

 BSS match failures */

 show configured parameters */

 command completion */

 skb header of Rx fragments */

 purging bss table entries */

 monitor mode */

 dump all MIBs on startup */

 dump mgmt_timer ops */

 dump wireless events */

 firmware download */

 device firmware upgrade */

 Use our own dbg macro */

 Protect against concurrent firmware loading and parsing */

	/*

	 * at76c503-i3861

 Generic AT76C503/3861 device */

 Linksys WUSB11 v2.1/v2.6 */

 Netgear MA101 rev. A */

 Tekram U300C / Allnet ALL0193 */

 HP HN210W J7801A */

 Sitecom/Z-Com/Zyxel M4Y-750 */

 Dynalink/Askey WLL013 (intersil) */

 EZ connect 11Mpbs Wireless USB Adapter SMC2662W v1 */

 BenQ AWL300 */

 Addtron AWU-120, Compex WLU11 */

 Intel AP310 AnyPoint II USB */

 Dynalink L11U */

 Arescom WL-210, FCC id 07J-GL2411USB */

 I-O DATA WN-B11/USB */

 BT Voyager 1010 */

	/*

	 * at76c503-i3863

 Generic AT76C503/3863 device */

 Samsung SWL-2100U */

	/*

	 * at76c503-rfmd

 Generic AT76C503/RFMD device */

 Dynalink/Askey WLL013 (rfmd) */

 Linksys WUSB11 v2.6 */

 Network Everywhere NWU11B */

 Netgear MA101 rev. B */

 D-Link DWL-120 rev. E */

 Actiontec 802UAT1, HWU01150-01UK */

 AirVast W-Buddie WN210 */

 Dick Smith Electronics XH1153 802.11b USB adapter */

 CNet CNUSB611 */

 FiberLine FL-WL200U */

 BenQ AWL400 USB stick */

 3Com 3CRSHEW696 */

 Siemens Santis ADSL WLAN USB adapter WLL 013 */

 Belkin F5D6050, version 2 */

 iBlitzz, BWU613 (not *B or *SB) */

 Gigabyte GN-WLBM101 */

 Planex GW-US11S */

 Internal WLAN adapter in h5[4,5]xx series iPAQs */

 Corega Wireless LAN USB-11 mini */

 Corega Wireless LAN USB-11 mini2 */

 Uniden PCW100 */

	/*

	 * at76c503-rfmd-acc

 SMC2664W */

 Belkin F5D6050, SMC2662W v2, SMC2662W-AR */

	/*

	 * at76c505-rfmd

 Generic AT76C505/RFMD */

	/*

	 * at76c505-rfmd2958

 Generic AT76C505/RFMD, OvisLink WL-1130USB */

 Fiberline FL-WL240U */

 CNet CNUSB-611G */

 Linksys WUSB11 v2.8 */

 Xterasys XN-2122B, IBlitzz BWU613B/BWU613SB */

 Corega WLAN USB Stick 11 */

 Microstar MSI Box MS6978 */

	/*

	 * at76c505a-rfmd2958

 Generic AT76C505A device */

 Generic AT76C505AS device */

 Siemens Gigaset USB WLAN Adapter 11 */

 OQO Model 01+ Internal Wi-Fi */

	/*

	 * at76c505amx-rfmd

 Generic AT76C505AMX device */

 Supported rates of this hardware, bit 7 marks basic rates */

 Firmware download */

 DFU states */

 DFU commands */

 Load a block of the first (internal) part of the firmware */

 Convert timeout from the DFU status to jiffies */

/* Load internal firmware from the buffer.  If manifest_sync_timeout > 0, use

			/* override the timeout from the status response,

 LED trigger */

 Load a block of the second ("external") part of the firmware */

 Intersil boards use a different "value" for GetHWConfig requests */

/* Get the hardware configuration for the adapter and put it to the appropriate

 * fields of 'priv' (the GetHWConfig request and interpretation of the result

 ch 1-11 */

 ch 1-11 */

 ch 1-13 */

 ch 10-11 */

 ch 10-13 */

 ch 14 */

 ch 1-14 */

 ch 3-9 */

 ch 1-32 */

 Last entry is fallback for unknown domain code */

 Return positive number for status, negative for an error */

 Wait until the command is completed */

 100 ms */

 Return < 0 on error, == 0 if no command sent, == 1 if cmd sent */

 Set current power save mode (AT76_PM_OFF/AT76_PM_ON/AT76_PM_SMART) */

 Enable monitor mode */

/* Calculate padding from txbuf->wlength (which excludes the USB TX header),

 add the USB TX header */

 Download external firmware */

 for fw >= 0.100, the device needs an extra empty block */

 Download internal firmware */

 no REMAP for 505A (see SF driver) */

 jal: always exclude unencrypted if WEP is active */

 jal: really needed, we do a set_mib for autorate later ??? */

 remove BSSID from previous run */

 Enable or disable promiscuous mode */

 Submit Rx urb back to the device */

/* This is a workaround to make scan working:

 * currently mac80211 does not process frames with no frequency

 * information.

 * However during scan the HW performs a sweep by itself, and we

 * are unable to know where the radio is actually tuned.

 * This function tries to do its best to guess this information..

 * During scan, If the current frame is a beacon or a probe response,

 * the channel information is extracted from it.

 * When not scanning, for other frames, or if it happens that for

 * whatever reason we fail to parse beacons and probe responses, this

 * function returns the priv->channel information, that should be correct

 * at least when we are not scanning.

 Use a new skb for the next receive */

 Load firmware into kernel memory and parse it */

developer.berlios.de/projects/at76c503a/\n");

 CRC currently not checked */

 success */

 fail, urb has been unlinked */

 FIXME: add error message */

	/* The following code lines are important when the device is going to

	 * authenticate with a new bssid. The driver must send CMD_JOIN before

	 * an authentication frame is transmitted. For this to succeed, the

	 * correct bssid of the AP must be known. As mac80211 does not inform

	 * drivers about the bssid prior to the authentication process the

	 * following workaround is necessary. If the TX frame is an

 tell ledtrigger we send a packet */

 setup 'Atmel' header */

 send stuff */

		/* We are called by "ifconfig ethX down", not because the

		/* We unlink rx_urb because at76_open() re-submits it.

 FIXME: add maximum time for scan to complete */

 mac80211 is joining a bss */

 must be atomic */

 Bail out after updating flags to prevent a WARN_ON in mac80211. */

	/* FIXME: access to priv->promisc should be protected with

	 * priv->mtx, but it's impossible because this function needs to be

 mac80211 wants us to enable promiscuous mode */

 we need to disable promiscuous mode */

 always exclude unencrypted if WEP is active */

 FIXME: find out how to do this properly */

 Allocate network device and initialize private data */

 unit us */

 Register network device and initialize the hardware */

 set up the endpoint information */

 check out the endpoints */

 MAC address */

 mac80211 initialisation */

 The device is gone, don't bother turning it off */

 Load firmware into kernel memory */

	/* we get OPMODE_NONE with 2.4.23, SMC2662W-AR ???

 download internal firmware part */

	/* Internal firmware already inside the device.  Get firmware

	 * version to test if external firmware is loaded.

	 * This works only for newer firmware, e.g. the Intersil 0.90.x

	 * says "control timeout on ep0in" and subsequent

	/* if version >= 0.100.x.y or device with built-in flash we can

 No way to check firmware version, reload to be sure */

 Re-check firmware version */

 Disconnect after loading internal firmware */

 Structure for registering this driver with the USB subsystem */

 register this driver with the USB subsystem */

 SPDX-License-Identifier: GPL-2.0-or-later

/*** -*- linux-c -*- **********************************************************



     Driver for Atmel at76c502 at76c504 and at76c506 wireless cards.



         Copyright 2004 Simon Kelley.





/*** -*- linux-c -*- **********************************************************



     Driver for Atmel at76c502 at76c504 and at76c506 wireless cards.



	Copyright 2000-2001 ATMEL Corporation.

	Copyright 2003-2004 Simon Kelley.



    This code was developed from version 2.1.1 of the Atmel drivers,

    released by Atmel corp. under the GPL in December 2002. It also

    includes code from the Linux aironet drivers (C) Benjamin Reed,

    and the Linux PCMCIA package, (C) David Hinds and the Linux wireless

    extensions, (C) Jean Tourrilhes.



    The firmware module for reading the MAC address of the card comes from

    net.russotto.AtmelMACFW, written by Matthew T. Russotto and copyright

    by him. net.russotto.AtmelMACFW is used under the GPL license version 2.

    This file contains the module in binary form and, under the terms

    of the GPL, in source form. The source is located at the end of the file.



    This program is free software; you can redistribute it and/or modify

    it under the terms of the GNU General Public License as published by

    the Free Software Foundation; either version 2 of the License, or

    (at your option) any later version.



    This software is distributed in the hope that it will be useful,

    but WITHOUT ANY WARRANTY; without even the implied warranty of

    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

    GNU General Public License for more details.



    You should have received a copy of the GNU General Public License

    along with Atmel wireless lan drivers; if not, see

    <http://www.gnu.org/licenses/>.



    For all queries about this code, please contact the current author,

    Simon Kelley <simon@thekelleys.org.uk> and not Atmel Corporation.



    Credit is due to HP UK and Cambridge Online Systems Ltd for supplying

    hardware used during development of this driver.



/* The name of the firmware file to be loaded

 table of firmware file names */

 registers */

 (SIR0)  General Configuration Register */

 (SIR1)  Bank Switching Select Register */

 Mirror Register 1 */

 Mirror Register 2 */

 Mirror Register 3 */

 Mirror Register 4 */

/*

 * Constants for the GCR register.

 Remap internal SRAM to 0 */

 BIU reset (ARM and PAI are NOT reset) */

 Core Reset (ARM and PAI are reset) */

 Enable Interrupts */

 Acknowledge Interrupts */

 AMBA module selection --> SRAM */

 AMBA module selection --> IRAM */

/*

 *Constants for the MR registers.

 MAC init has been completed */

 MAC boot has been completed */

 MAC boot has been completed */

 first four fields */

/*

 * Host-MAC interface

 no bits set in ISR */

 packet transmitted */

 packet received */

 Rx Frame lost */

 Fatal error */

 command completed */

 command completed */

 (4.1.2.30): IBSS merge */

 mtu is 2312, CRC is 4 */

/*

 * 802.11 related definitions

/*

 * Regulatory Domains

 Channels	1-11	USA				*/

 Channel	1-11	Canada				*/

 Channel	1-13	Europe (ex Spain/France)	*/

 Channel	10-11	Spain				*/

 Channel	10-13	France				*/

 Channel	14	Japan				*/

 Channel	1-14	Japan(MKK1)			*/

 Channel	3-9	ISRAEL				*/

 promiscuous mode control */

/*

 * IFACE MACROS & definitions

/*

 * FuncCtrl field:

/* A stub firmware image which reads the MAC address from NVRAM on the card.

 Bus dependent structure varies for PCcard */

 And callback which uses it */

 spinlocks */

 If we need to CRC incoming packets */

 set if we don't yet know */

 counters for probing */

 firmware dependent stuff. */

 NB this is matched to the hardware, don't change. */

 first ensure the timer func cannot run */

 then stop the hardware ISR */

 nb doing the above in the opposite order will deadlock */

	/* The Wireless Header is 30 bytes. In the Ethernet packet we "cut" the

	   12 first bytes (containing DA/SA) and put them in the appropriate

	   fields of the Wireless Header. Thus the packet length is then the

 Copy the wireless header into the card */

 Copy the packet sans its 802.3 header addresses which have been replaced */

 low bit of first byte of destination tells us if broadcast */

 fast path: unfragmented packet copy directly into skbuf */

 get the final, mac 4 header field, this tells us encapsulation */

 destination address */

 source address */

/* Test to see if the packet in card memory at packet_loc has a valid CRC

   It doesn't matter that this is slow: it is only used to proble the first few

 skip header */

 first fragment */

 don't send broken assembly */

 last one */

 determined by experiment */

 Get header as far as end of seq_ctrl */

		/* probe for CRC use here if needed  once five packets have

		   arrived with the same crc status, we assume we know what's

 don't CRC header when WEP in use */

 header */

 copy rest of packet into buffer */

 we use the same buffer for frag reassembly and control packets */

 last 4 octets is crc */

 release descriptor */

	/* In this state upper-level code assumes it can mess with

	   the card unhampered by interrupts which may change register state.

	   Note that even though the card shouldn't generate interrupts

	   the inturrupt line may be shared. This allows card setup

 disable interrupts */

 failed to contact card */

 enable interrupts */

 acknowledge interrupt */

 failed to contact card */

 The WPA stuff cares about the current AP address */

	/* update the link quality here in case we are seeing no beacons

		/* Quality levels cannot be determined in ad-hoc mode,

 any scheduled timer is no longer needed and might screw things up.. */

 Interrupts will not touch the card once in this state... */

 this moves station_state on.... */

 enable interrupts */

 Send event to userspace that we are disassociating */

	/* check that channel is OK, if so return zero,

 Create the network device object. */

 module parameter */

	/* For PCMCIA cards, some chips need CRC, some don't

 Initialize to something invalid.... */

 MTU range: 68 - 2312 */

 put a brick on it... */

 Check if we asked for `any' */

 Check the size of the string */

 Get the current SSID */

 active */

	/* Basic checking: do we have a key to set ?

	 * Note : with the new API, it's impossible to get a NULL pointer.

	 * Therefore, we need to check a key size == 0 instead.

	 * New version of iwconfig properly set the IW_ENCODE_NOKEY flag

	 * when no key is present (only change flags), but older versions

 Check the size of the key */

 Check the index (none -> use current) */

 Set the length */

 Disable the key */

 Check if the key is not marked as invalid */

 Cleanup */

 Copy the key in the driver */

		/* WE specify that if a valid key is set, encryption

		 * should be enabled (user may turn it off later)

 Do we want to just set the transmit key index ? */

 Don't complain if only change the mode */

 Read the flags */

 Call commit handler */

 Which key do we want ? -1 -> tx index */

 Copy the key to the user buffer */

 Determine and validate the key index */

 Set the requested key first */

		/*

		 * atmel does not use these parameters

 Silently accept disable of WPA */

 Which type of value ? */

 Setting by rate index */

 Setting by frequency value */

 No modifier : set both */

 Can't be disabled */

 Note : by default, display the short retry number */

 Call commit handler */

 Get an even value - is it really needed ??? */

 Call commit handler */

 Call commit handler */

 If setting by frequency, convert to a channel */

 Hack to fall through... */

 Setting by channel number */

	/* Note : you may have realised that, as this is a SET operation,

	 * this is privileged and therefore a normal user can't

	 * perform scanning.

	 * This is not an error, while the device perform scanning,

	 * traffic doesn't flow, so it's a perfect DoS...

 Timeout old surveys. */

 Initiate a scan command */

 Add quality statistics */

 iwe.u.qual.noise  = SOMETHING */

 Length of data */

 List index */

 Values in MHz -> * 10^5 * 10 */

 NULL */

 NULL */

 NULL */

 SIOCSIWCOMMIT */

 SIOCGIWNAME */

 SIOCSIWNWID */

 SIOCGIWNWID */

 SIOCSIWFREQ */

 SIOCGIWFREQ */

 SIOCSIWMODE */

 SIOCGIWMODE */

 SIOCSIWSENS */

 SIOCGIWSENS */

 SIOCSIWRANGE */

 SIOCGIWRANGE */

 SIOCSIWPRIV */

 SIOCGIWPRIV */

 SIOCSIWSTATS */

 SIOCGIWSTATS */

 SIOCSIWSPY */

 SIOCGIWSPY */

 -- hole -- */

 -- hole -- */

 SIOCSIWAP */

 SIOCGIWAP */

 -- hole -- */

 SIOCGIWAPLIST */

 SIOCSIWSCAN */

 SIOCGIWSCAN */

 SIOCSIWESSID */

 SIOCGIWESSID */

 SIOCSIWNICKN */

 SIOCGIWNICKN */

 -- hole -- */

 -- hole -- */

 SIOCSIWRATE */

 SIOCGIWRATE */

 SIOCSIWRTS */

 SIOCGIWRTS */

 SIOCSIWFRAG */

 SIOCGIWFRAG */

 SIOCSIWTXPOW */

 SIOCGIWTXPOW */

 SIOCSIWRETRY */

 SIOCGIWRETRY */

 SIOCSIWENCODE */

 SIOCGIWENCODE */

 SIOCSIWPOWER */

 SIOCGIWPOWER */

 -- hole -- */

 -- hole -- */

 SIOCSIWGENIE */

 SIOCGIWGENIE */

 SIOCSIWAUTH */

 SIOCGIWAUTH */

 SIOCSIWENCODEEXT */

 SIOCGIWENCODEEXT */

 SIOCSIWPMKSA */

 SIOCIWFIRSTPRIV */

	/* This must come after all hardware access to avoid being messed up

 this is a short in a scan command - weird */

 no WEP for authentication frames with TrSeqNo 1 */

 challenge_text */

 nothing after here directly accessible */

 current AP address - only in reassoc frame */

 len of supported rates */

		/* Select a BSS with the max-RSSI but of the same type and of

		   the same WEP mode and that it is not marked as 'bad' (i.e.

		   we had previously failed to connect to this BSS with the

	/* If we process a probe and an entry from this BSS exists

	   we will update the BSS entry with the info from this BSS.

 no WEP */

 WEP */

		/* Flip back and forth between WEP auth modes until the max

		 * authentication tries has been exceeded.

 Send association event to userspace */

 The WPA stuff cares about the current AP address */

 When switching to AdHoc turn OFF Power Save if needed */

 502-rmfd-revd max by experiment, default for now */

 502-rmfd-reve max by experiment */

 deals with incoming management frames. */

		/* beacon frame has multiple variable-length fields -

 ssid here */

 rates here */

 ds here */

 this blows chunks. */

 Note truncate this to 32 bits - kernel can't divide a long long */

 run when timer expires */

 Check if the card has been yanked. */

 wake up on-board processor */

 and wait for it */

	/* now check for completion of MAC initialization through

	   the FunCtrl field of the IFACE, poll MR1 to detect completion of

	   MAC initialization, check completion status, set interrupt mask,

 Check for MAC_INIT_OK only on the register that the MAC_INIT_OK was set */

 determine type of memory and MAC address */

 reset pccard */

		/* No stored firmware so load a small stub which just

			/* got address, now squash it again until the network

 Mac address easy in this case. */

		/* Standard firmware in flash, boot it up and ask

			/* got address, now squash it again until the network

/* Move the encyption information on the MIB structure.

   This routine is for the pre-WPA firmware: later firmware has

 NB this is matched to the hardware, don't change. */

 0..3 */

 0, 1, 2 */

 This is for the later (WPA enabled) firmware. */

 NB this is matched to the hardware, don't change. */

 0..3 */

 zero all the keys before adding in valid ones. */

		/* There's a comment in the Atmel code to the effect that this

		   is only valid when still using WEP, it may need to be set to

	/* do everything necessary to wake up the hardware, including

	   waiting for the lightning strike and throwing the knife switch....



	   set all the Mib values which matter in the card to match

	   their settings in the atmel_private structure. Some of these

	   can be altered on the fly, but many (WEP, infrastructure or ad-hoc)

	   can only be changed by tearing down the world and coming back through

	   here.



	   This routine is also responsible for initialising some

	   hardware-specific fields in the atmel_private structure,

	   including a copy of the firmware's hostinfo structure

	/* data to add to the firmware names, in priority order

 reset pccard */

 stop card , disable interrupts */

 copy in firmware if needed */

 get firmware filename entry based on firmware type ID */

 construct the actual firmware file name */

 Remap */

	/* Check the version and set the correct flag for wpa stuff,

	   old and new firmware is incompatible.

	   The pre-wpa 3com firmware reports major version 5,

	   the wpa 3com firmware is major version 4 and doesn't need

 unmask all irq sources */

 int Tx system and enable Tx */

 init Rx system and enable */

 set up enough MIB values to run. */

 Address register appears to need some convincing..... */

 timed out */

 timed out */

 card is little-endian */

**************************************************************************/

 There follows the source form of the MAC address reading firmware       */

**************************************************************************/

 Copyright 2003 Matthew T. Russotto                                      */

 But derived from the Atmel 76C502 firmware written by Atmel and         */

 included in "atmel wireless lan drivers" package                        */

/*

    This file is part of net.russotto.AtmelMACFW, hereto referred to

    as AtmelMACFW



    AtmelMACFW is free software; you can redistribute it and/or modify

    it under the terms of the GNU General Public License version 2

    as published by the Free Software Foundation.



    AtmelMACFW is distributed in the hope that it will be useful,

    but WITHOUT ANY WARRANTY; without even the implied warranty of

    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

    GNU General Public License for more details.



    You should have received a copy of the GNU General Public License

    along with AtmelMACFW; if not, see <http://www.gnu.org/licenses/>.



 This firmware should work on the 76C502 RFMD, RFMD_D, and RFMD_E        */

 It will probably work on the 76C504 and 76C502 RFMD_3COM                */

 It only works on SPI EEPROM versions of the card.                       */

 This firmware initializes the SPI controller and clock, reads the MAC   */

 address from the EEPROM into SRAM, and puts the SRAM offset of the MAC  */

 address in MR2, and sets MR3 to 0x10 to indicate it is done             */

 It also puts a complete copy of the EEPROM in SRAM with the offset in   */

 MR4, for investigational purposes (maybe we can determine chip type     */

 from that?)                                                             */

 IRQ/FIQ disabled, ARM mode, Supervisor state */

 IRQ/FIQ disabled, ARM mode, USER state */

 Some internal device, but which one? */

 Some internal device, but which one? */

 Some internal device, but which one? */

 status register bit -- TDR empty */

 status register bit -- RDR full */

 control register */

 mode register */

 Read Data Register */

 Transmit Data Register */

 chip select registers */

 read status register */

 read data */

 RDY bit.  This bit is inverted */

	.set SPI_8CLOCKS, 0xFF /* Writing this to the TDR doesn't do anything to the

				  serial output, since SO is normally high.  But it

				  does cause 8 clock cycles and thus 8 bits to be

				  clocked in to the chip.  See Atmel's SPI

				  controller (e.g. AT91M55800) timing and 4K

 arbitrary area for scratchpad memory */

 This is probably unnecessary */

 I'm guessing this is initializing clock generator electronics for SPI */

 0th bytes of NVRAM */

 not used in routine */

 address of MAC Address within NVRAM */

 not used in routine */

 r0 = r0 * 9 */

 reset the SPI */

 release SPI from reset state */

 set the SPI to MASTER mode*/

 enable the SPI */

  My guess would be this turns on the SPI clock */

 r0 = dest address */

 r1 = not used */

 r2 = src address within NVRAM */

 r3 = length */

 save r0 (dest address) */

 save r3 (length) */

  SPI memories put A8 in the command field */

 save command in NVRAM_SCRATCH[0] */

 save low byte of source address in NVRAM_SCRATCH[1] */

 length */

 dest address */

 bytes to transfer in command */

 r0 is # of bytes to send out (command+addr) */

 what's this byte?  It's the byte read while writing the TDR -- nonsense, because the NVRAM doesn't read and write at the same time */

 r2 is # of bytes to copy in */

 r3 has SPI_8CLOCKS */

 but didn't we read this byte above? */

 postindexed */

 since we don't send another address, the NVRAM must be capable of sequential reads */

/*** -*- linux-c -*- **********************************************************



     Driver for Atmel at76c502 at76c504 and at76c506 wireless cards.



        Copyright 2000-2001 ATMEL Corporation.

        Copyright 2003 Simon Kelley.



    This code was developed from version 2.1.1 of the Atmel drivers,

    released by Atmel corp. under the GPL in December 2002. It also

    includes code from the Linux aironet drivers (C) Benjamin Reed,

    and the Linux PCMCIA package, (C) David Hinds.



    For all queries about this code, please contact the current author,

    Simon Kelley <simon@thekelleys.org.uk> and not Atmel Corporation.



    This program is free software; you can redistribute it and/or modify

    it under the terms of the GNU General Public License as published by

    the Free Software Foundation; either version 2 of the License, or

    (at your option) any later version.



    This software is distributed in the hope that it will be useful,

    but WITHOUT ANY WARRANTY; without even the implied warranty of

    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

    GNU General Public License for more details.



    You should have received a copy of the GNU General Public License

    along with Atmel wireless lan drivers; if not, see

    <http://www.gnu.org/licenses/>.



====================================================================*/

====================================================================*/

 Allocate space for private device-specific data */

 atmel_attach */

/* Call-back function to interrogate PCMCIA-specific information

====================================================================*/

 We use the driver_info field to store the correct firmware type for a card. */

/*

    This program is free software; you can redistribute it and/or

    modify it under the terms of the GNU General Public License

    as published by the Free Software Foundation; either version 2

    of the License, or (at your option) any later version.



    This program is distributed in the hope that it will be useful,

    but WITHOUT ANY WARRANTY; without even the implied warranty of

    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

    GNU General Public License for more details.



    In addition:



    Redistribution and use in source and binary forms, with or without

    modification, are permitted provided that the following conditions

    are met:



    1. Redistributions of source code must retain the above copyright

       notice, this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright

       notice, this list of conditions and the following disclaimer in the

       documentation and/or other materials provided with the distribution.

    3. The name of the author may not be used to endorse or promote

       products derived from this software without specific prior written

       permission.



    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR

    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED

    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

    ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,

    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR

    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,

    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING

    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE

    POSSIBILITY OF SUCH DAMAGE.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 toggle to request power mode, others remain 0 */

 Each request require an ack from firmware */

 Check firmware get the power requset and ack via cpwm register */

		/* Hit here means that driver failed to get an ack from firmware.

		 * The reason could be that hardware is locked at Deep sleep,

		 * so most of the hardware circuits are not working, even

		 * register read/write; or firmware is locked in some state and

		 * cannot get the request. It should be treated as fatal error

		 * and requires an entire analysis about the firmware/hardware.

	/* Driver needs to wait for firmware to leave LPS state

	 * successfully. Firmware will send null packet to inform AP,

	 * and see if AP sends an ACK back, then firmware will restore

	 * the REG_TCR register.

	 *

	 * If driver does not wait for firmware, null packet with

	 * PS bit could be sent due to incorrect REG_TCR setting.

	 *

	 * In our test, 100ms should be enough for firmware to finish

	 * the flow. If REG_TCR Register is still incorrect after 100ms,

	 * just modify it directly, and throw a warn message.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 unsupported now */

 Grouping bitmap parameters */

 power on BB/RF domain */

 toggle BB reset */

 pre init before header files config */

 post init after header files config */

 protocol configuration */

 EDCA configuration */

 Set beacon cotnrol - enable TSF and other related functions */

 Set send beacon related registers */

 WMAC configuration */

 RX DFIR for BW40 */

 RX DFIR for BW80 */

 RX DFIR for BW20, BW10 and BW5 */

 drv_info_sz is in unit of 8-bytes */

 c2h cmd pkt's rx/phy status is not interested */

 for coex */

 enable TBTT nterrupt */

 BT report packet sample rate */

 enable BT counter statistics */

 enable PTA (3-wire function form BT side) */

 enable PTA (tx/rx signal form WiFi side) */

 wl tx signal to PTA not case EDCCA */

 GNT_BT=1 while select both */

 beacon queue always hi-pri  */

 BB SW, DPDT use RFE_ctrl8 and RFE_ctrl9 as ctrl pin */

 PTA,  DPDT use RFE_ctrl8 and RFE_ctrl9 as ctrl pin */

 1-Ant, Main, WLG */

 2-Ant, DPDT, WLG */

 1-Ant, Main, BTG */

 2-Ant, DPDT, BTG */

 1-Ant, Aux, WLG */

 1-Ant, Aux, BTG */

 2-Ant, no switch, WLG */

 2-Ant, no antenna switch, WLG */

 not sure what [0] stands for */

 not sure what [0] stands for */

 rssi in percentage % (dbm = % - 100) */

 Shared-Antenna Coex Table */

 case-0 */

 case-5 */

 case-10 */

 case-15 */

 case-20 */

 case-25 */

 case-30 */

 Non-Shared-Antenna Coex Table */

 case-100 */

 case-105 */

 case-110 */

 case-115 */

 case-120 */

 Shared-Antenna TDMA */

 case-0 */

 case-1 */

 case-5 */

 case-10 */

 case-15 */

 case-20 */

 case-25 */

 Non-Shared-Antenna TDMA */

 case-100 */

 case-105 */

 case-110 */

 case-115 */

 case-120 */

 wl_tx_dec_power, bt_tx_dec_power, wl_rx_gain, bt_rx_lna_constrain */

 for normal */

 for WL-CPT */

 for normal */

 for WL-CPT */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 force max tx retry limit = 8 */

		/* set BT polluted packet on for tx rate adaptive,

		 * not including tx retry broken by PTA

		/* set queue life time to avoid can't reach tx retry limit

		 * if tx is always broken by GNT_BT

 auto rate fallback step within 8 retries */

 ant_distance = 5 ~ 40  */

 CCK lock identification */

 wifi noisy environment identification */

 4-slot */

 no 5ms_wl_slot_extend for 4-slot mode  */

	/* for 8822b, scbd[10] is CQDDR on

	 * for 8822c, scbd[10] is no fix 2M

 BT RFK */

 WL RFK */

 update wl/bt rssi by btinfo */

 set link exist status */

 connection exists */

 notify BT rx gain table changed */

 no definition */

 tell WL FW WL slot toggle table-A*/

 If last tdma is wl slot toggle, force write table*/

 recover to original 32k low power setting */

 4-slot (50ms) mode */

 update pre state */

 avoid switch coex_ctrl_owner during BT IQK */

 set path control owner to BT at power-on */

 set GNT_BT to SW low */

 set GNT_WL to SW high */

 set GNT_BT to SW high */

 set GNT_WL to SW low */

 set path control owner to wl at initial step */

 set GNT_BT to SW Low */

 set GNT_WL to SW high */

 set path control owner to wl at initial step */

 set path control owner to BT */

 set GNT_BT to PTA */

 set GNT_WL to PTA */

 set path control owner to wl at runtime step */

 set GNT_BT to HW PTA */

 set GNT_WL to SW high */

 set path control owner to wl at runtime step */

 set GNT_BT to HW PTA */

 Set GNT_WL to SW high */

 set path control owner to wl at runtime step */

 set GNT_BT to HW PTA */

 Set GNT_WL to HW PTA */

 set path control owner to wl at runtime step */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non_Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 RCU */

 Legacy HID  */

 Non-Shared-Ant */

 BLE */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 for RCU */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 Shared-Ant */

 Non-Shared-Ant */

 update wifi_link_info_ext variable */

 Pure-5G Coex Process */

 set Tx response = Hi-Pri (ex: Transmitting ACK,BA,CTS) */

 set Tx beacon = Hi-Pri */

 set Tx beacon queue = Hi-Pri */

 antenna config */

 PTA parameter */

 enable BB, we can write 0x948 */

 set antenna path to BT */

 red x issue */

 for lps off */

 run init hw config (exclude wifi only) */

 for ps-tdma */

 for native ps */

 for lps off */

 Force antenna setup for no scan result issue */

 To do */

 Force antenna setup for no scan result issue */

		/* To keep TDMA case during connect process,

		 * to avoid changed by Btinfo and runcoexmechanism

 Force antenna setup for no scan result issue */

 Set CCK Rx high Pri */

 get the same info from bt, skip it */

 0xff means BT is under WHCK test */

BLE HID*/

RCU*/

 unit: % (value-100 to translate to unit: dBm in coex info) */

 for multi_link = 0 but bt pkt remain exist */

 Use PS-TDMA to protect WL RX */

 resend wifi info to bt, it is reset and lost the info */

 if ignore_wlan_act && not set_up_link */

 only RF go through here */

 CONFIG_RTW88_DEBUGFS */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 config PIN Mux */

 disable BB/RF */

 if PCIE, toggle BIT_PFM_WOWL and try again */

 Check FW still exist or not */

 disable boot-from-flash for driver's DL FW */

 cpu io interface enable */

 cpu enable */

 cpu io interface disable */

 cpu disable */

 set HIQ to hi priority */

 DLFW only use HIQ, map HIQ to hi priority */

 Config hi priority queue and public priority queue page number */

 Disable beacon related functions */

 Check IMEM & DMEM checksum is OK or not */

 reset desc and index */

 Disable FWDL_EN */

 reset desc and index */

 check if all of the reserved pages are available for 100 msecs */

	/* priority queue is still not empty, throw a warning,

	 *

	 * Note that if we want to flush the tx queue when having a lot of

	 * traffic (ex, 100Mbps up), some of the packets could be dropped.

	 * And it requires like ~2secs to flush the full priority queue.

	/* If all of the hardware queues are requested to flush,

	 * or the priority queues are not mapped yet,

	 * flush all of the priority queues

 config rsvd page num */

 For rxdesc len = 0 issue */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 free every skb remained in tx list */

 free the ring itself */

 reset read/write point */

 reset H2C Queue index in a single write */

 reset dma and rx tag */

 Deep PS state is not allowed to TX-DMA */

		/* BCN queue is rsvd page, does not have DMA interrupt

		 * H2C queue is managed by firmware

 check if there is any skb DMAing */

 rx tag mismatch, throw a warning */

	/* Because the time taked by the I/O in __pci_get_hw_tx_ring_rp is a

	 * bit dynamic, it's hard to define a reasonable fixed total timeout to

	 * use read_poll_timeout* helper. Instead, we can ensure a reasonable

	 * polling times, so we just use for loop with udelay here.

 It may be not necessary to flush BCN and H2C tx queues. */

	/* If all of the hardware queues are requested to flush,

	 * flush all of the pci queues.

 after this we got dma mapped, there is no way back */

 update write-index, and kick it off later */

 reserved pages go through beacon queue */

 just free command packets from host to card */

 enqueue to wait for tx report */

 always ACK for others, then they won't be marked as drop */

 offset from rx_desc to payload */

		/* allocate a new skb for this frame,

		 * discard the frame if none available

 put the DMA data including rx_desc from phy to new skb */

 remove rx_desc */

 new skb delivered to mac80211, re-enable original skb DMA */

 host read next element in ring */

	/* 'rp', the last position we have read, is seen as previous posistion

	 * of 'wp' that is used to calculate 'count' next time.

	/* disable RTW PCI interrupt to avoid more interrupts before the end of

	 * thread function

	 *

	 * disable HIMR here to also avoid new HISR flag being raised before

	 * the HISRs have been Write-1-cleared for MSI. If not all of the HISRs

	 * are cleared, the edge-triggered interrupt will not be generated when

	 * a new HISR flag is set.

 all of the jobs for this interrupt have been done */

	/* Like CLKREQ, ASPM is also implemented by two HW modules, and can

	 * only be enabled when host supports it.

	 *

	 * And ASPM mechanism should be enabled when driver/firmware enters

	 * power save mode, without having heavy traffic. Because we've

	 * experienced some inter-operability issues that the link tends

	 * to enter L1 state on the fly even when driver is having high

	 * throughput. This is probably because the ASPM behavior slightly

	 * varies from different SOC.

	/* RTL8822CE has enabled REFCLK auto calibration, it does not need

	 * to add clock delay to cover the REFCLK timing gap.

	/* Though there is standard PCIE configuration space to set the

	 * link control register, but by Realtek's design, driver should

	 * check if host supports CLKREQ/ASPM to enable the HW module.

	 *

	 * These functions are implemented by two HW modules associated,

	 * one is responsible to access PCIE configuration space to

	 * follow the host settings, and another is in charge of doing

	 * CLKREQ/ASPM mechanisms, it is default disabled. Because sometimes

	 * the host does not support it, and due to some reasons or wrong

	 * settings (ex. CLKREQ# not Bi-Direction), it could lead to device

	 * loss if HW misbehaves on the link.

	 *

	 * Hence it's designed that driver should first check the PCIE

	 * configuration space is sync'ed and enabled, then driver can turn

	 * on the other module that is actually working on the mechanism.

 after this driver can access to hw registers */

		/* When ISR happens during polling and before napi_complete

		 * while no further data is received. Data on the dma_ring will

		 * not be processed immediately. Check whether dma ring is

		 * empty and perform napi_schedule accordingly.

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 unsupported now */

 chip top mux */

 from s0 or s1 */

 input or output */

 Grouping bitmap parameters */

 power on BB/RF domain */

 pre init before header files config */

 post init after header files config */

 unit : 32us */

 unit : 32us */

 unit : 32us */

 unit : 32us */

 protocol configuration */

 EDCA configuration */

 Set beacon cotnrol - enable TSF and other related functions */

 Set send beacon related registers */

 WMAC configuration */

 2TX or 2RX */

 TXA+RXA or TXB+RXB */

 TXB+RXA or TXA+RXB */

 signal source */

 signal source */

 2TX or 2RX */

 TXA+RXA or TXB+RXB */

 TXB+RXA or TXA+RXB */

Reg82C*/

Reg830*/

Reg838*/

Reg82C*/

Reg830*/

Reg838*/

Reg82C*/

Reg830*/

Reg838*/

 need to set 0xdf[18]=1 before writing RF18 when channel 144 */

 RX DFIR for BW40 */

 RX DFIR for BW80 */

 RX DFIR for BW20, BW10 and BW5*/

 8822B uses only 1 antenna to RX CCK rates */

 drv_info_sz is in unit of 8-bytes */

 c2h cmd pkt's rx/phy status is not interested */

 enable TBTT nterrupt */

 BT report packet sample rate */

 0x790[5:0]=0x5 */

 enable BT counter statistics */

 enable PTA (3-wire function form BT side) */

 enable PTA (tx/rx signal form WiFi side) */

 wl tx signal to PTA not case EDCCA */

 GNT_BT=1 while select both */

 0x4c[23] = 0 */

 0x4c[24] = 1 */

 BB SW, DPDT use RFE_ctrl8 and RFE_ctrl9 as ctrl pin */

 0x4c[23] = 0 */

 0x4c[24] = 1 */

 PTA,  DPDT use RFE_ctrl8 and RFE_ctrl9 as ctrl pin */

 0x4c[23] = 0 */

 0x4c[24] = 1 */

 0x4c[23] = 1 */

 0x4c[23] = 0 */

 0x4c[24] = 1 */

 0x4c[23] = 0 */

 0x4c[24] = 0 */

 Ext switch buffer mux */

 Disable LTE Coex Function in WiFi side */

 BTC_CTT_WL_VS_LTE */

 BTC_CTT_BT_VS_LTE */

 WL Rx Low gain on */

 WL Rx Low gain off */

 set Rx filter corner RCK offset */

 set Rx filter corner RCK offset */

 8822B only has one thermal meter at PATH A */

 if delta of power indexes are the same, just skip */

 mac edcca state setting */

 edcca decision opt */

 Shared-Antenna Coex Table */

 case-0 */

 case-5 */

 case-10 */

 case-15 */

 case-20 */

 case-25 */

 case-30 */

 Non-Shared-Antenna Coex Table */

 case-100 */

 case-105 */

 case-110 */

 case-115 */

 case-120 */

 Shared-Antenna TDMA */

 case-0 */

 case-5 */

 case-10 */

 case-15 */

 case-20 */

 case-25 */

 Non-Shared-Antenna TDMA */

 case-100 */

 case-101 */

 case-105 */

 case-110 */

 case-115 */

 case-120 */

 rssi in percentage % (dbm = % - 100) */

 wl_tx_dec_power, bt_tx_dec_power, wl_rx_gain, bt_rx_lna_constrain */

 for normal */

 for WL-CPT */

 for normal */

 for WL-CPT */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 Only have one group of EDCA parameters now */

 2^ecw - 1 = cw; ecw = log2(cw + 1) */

 suppress error messages */

 multiple interfaces? */

 need sw generated IV */

 download new cam settings for PG to backup */

 we don't want to enable TX AMSDU on 2.4G */

 free previous mask setting */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 power on BB/RF domain */

 post init after header files config */

 unsupported now */

 64->0: second path of 1SS rate is 64 */

 drv_info_sz is in unit of 8-bytes */

 c2h cmd pkt's rx/phy status is not interested */

 hold counter */

 reset counter */

 enter IQK mode */

 One shot, LOK & IQK */

 leave IQK mode */

 IQK setting */

 LOK setting */

 PA, PAD setting */

 LOK setting for 8723D */

 IQK setting */

 path IQK setting */

 LOK setting */

 RXIQK mode */

 PA/PAD=0 */

 second round */

 LOK setting */

 RXIQK mode */

 2 bits are a pair for IQ[X, Y] */

 for coex */

 enable TBTT nterrupt */

 BT report packet sample rate	 */

 0x790[5:0]=0x5 */

 enable BT counter statistics */

 enable PTA (3-wire function form BT side) */

 enable PTA (tx/rx signal form WiFi side) */

 decide antenna at main or aux */

 disable LTE coex in wifi side */

 WL Rx Low gain on */

 WL Rx Low gain off */

 new element D */

 new element A */

 new element C */

 write new elements A, C, D, and element B is always 0 */

 write new elements A, C, D, and element B is always 0 */

 image S1:c80 to S0:Cd0 and Cd4 */

 Shared-Antenna Coex Table */

 case-0 */

 case-5 */

 case-10 */

 case-15 */

 case-20 */

 case-25 */

 case-30 */

 Non-Shared-Antenna Coex Table */

 case-100 */

 case-105 */

 case-110 */

 case-115 */

 case-120 */

 Shared-Antenna TDMA */

 case-0 */

 case-1 */

 case-5 */

 case-10 */

 case-15 */

 case-20 */

 case-25 */

 Non-Shared-Antenna TDMA */

 case-100 */

 case-101 */

 case-105 */

 case-110 */

 case-115 */

 case-120 */

 rssi in percentage % (dbm = % - 100) */

 wl_tx_dec_power, bt_tx_dec_power, wl_rx_gain, bt_rx_lna_constrain */

 for normal */

 for WL-CPT */

 for normal */

 for WL-CPT */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation.

 Sounding protocol control */

 MAC address/Partial AID of Beamformer */

 ndp rx standby timer */

/* nc index: 1 2T2R 0 1T1R

 * nr index: 1 use Nsts 0 use reg setting

 * codebookinfo: 1 802.11ac 3 802.11n

 accept action_no_ack */

 accept NDPA and BF report poll */

 Enable P1 aggr new packet according to P0 transfer time */

 MU Retry Limit */

 Disable Tx MU-MIMO until sounding done */

 Clear validity of MU STAs */

 MU-MIMO Option as default value */

 MU-MIMO Control as default value */

 Set MU NDPA rate & BW source */

 Set NDPA Rate */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

/* efuse header format

 *

 * | 7        5   4    0 | 7        4   3          0 | 15  8  7   0 |

 *   block[2:0]   0 1111   block[6:3]   word_en[3:0]   byte0  byte1

 * | header 1 (optional) |          header 2         |    word N    |

 *

 * word_en: 4 bits each word. 0 -> write; 1 -> not write

 * N: 1~4, depends on word_en

 2-byte header format */

 1-byte header format */

 disable 2.5V LDO */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 lower than ofdm, do not aggregate */

 lower than 20M 2ss mcs8, make it small */

 lower than 40M 2ss mcs9, make it medium */

 not yet 80M 2ss mcs8/9, make it twice regular packet size */

 unlimited */

 pass offset for further operation */

 pattern check for firmware */

 remove all of the rsvd pages for vif */

		/* Don't free except for the dummy rsvd page,

		 * others will be freed when removing vif

 gather rsvd page from vifs */

 the first rsvd should be beacon, otherwise add a dummy one */

		/* Fill the tx_desc for the rsvd pkt that requires one.

		 * And iter->len will be added with size of tx_desc_sz.

		/* Reserved page is downloaded via TX path, and TX path will

		 * generate a tx_desc at the header to describe length of

		 * the buffer. If we are not counting page numbers with the

		 * size of tx_desc added at the first rsvd_pkt (usually a

		 * beacon, firmware default refer to the first page as the

		 * content of beacon), we could generate a buffer which size

		 * is smaller than the actual size of the whole rsvd_page

	/* Copy the content of each rsvd_pkt to the buf, and they should

	 * be aligned to the pages.

	 *

	 * Note that the first rsvd_pkt is a beacon no matter what vif->type.

	 * And that rsvd_pkt does not require tx_desc because when it goes

	 * through TX path, the TX path will generate one for it.

	/* The last thing is to download the *ONLY* beacon again, because

	 * the previous tx_desc is to describe the total rsvd page. Download

	 * the beacon again to replace the TX desc header, and we will get

	 * a correct tx_desc for the beacon in the rsvd page.

 disable rx clock gate */

 restore rx clock gate */

 include txdesc size */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 write BB/MAC register */

 n spatial stream */

 MCS n */

 there is no CCK rates used in 5G */

 now, not support vht 3ss and vht 4ss*/

 now, not support ht 3ss and ht 4ss*/

 CONFIG_RTW88_DEBUGFS */

 CONFIG_RTW88_DEBUG */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

/* If country code is not correctly defined in efuse,

 * use worldwide country code and txpwr regd.

 call this before ieee80211_register_hw() */

		/* Set REGULATORY_STRICT_REG before ieee80211_register_hw(),

		 * stack will wait for regulatory_hint() and consider it

		 * as the superset for our regulatory rule.

 call this after ieee80211_register_hw() */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 unsupported now */

 ADCK step1 */

 compensation value */

 check ADC DC offset */

 ADCK step2 */

 release pull low switch on IQ path */

 compensation value */

 check DAC DC offset */

 backup I vector */

 backup Q vector */

 set clock */

 backup path-A I/Q */

 backup path-B I/Q */

 sample the first element for both path's IQ vector */

 not able to restore, do it */

 path-A */

 path-B */

 backup results to restore, saving a lot of time */

		/* Efuse value of BIT(0) shall be move to BIT(3), and the value

		 * of BIT(1) to BIT(3) should be right shifted 1 bit.

 power on BB/RF domain */

 disable low rate DPD */

 pre init before header files config */

 post init after header files config */

 unit : 32us */

 unit : 32us */

 80M */

 txq control */

 sifs control */

 rate fallback control */

 protocol configuration */

 close BA parser */

 EDCA configuration */

 MAC clock configuration */

 Set beacon cotnrol - enable TSF and other related functions */

 Set send beacon related registers */

 WMAC configuration */

 init low power */

 rx ignore configuration */

 Interrupt migration configuration */

 RF bandwidth */

 drv_info_sz is in unit of 8-bytes */

 c2h cmd pkt's rx/phy status is not interested */

 path B only is not available for RX */

 disable rx clk gating to reset counters */

 for coex */

 enable TBTT nterrupt */

 BT report packet sample rate */

 0x790[5:0]=0x5 */

 enable BT counter statistics */

 enable PTA (3-wire function form BT side) */

 enable PTA (tx/rx signal form WiFi side) */

 wl tx signal to PTA not case EDCCA */

 GNT_BT=1 while select both */

 BT_CCA = ~GNT_WL_BB, not or GNT_BT_BB, LTE_Rx */

 to avoid RF parameter error */

 BT at S1 for Shared-Ant */

	/* WL-S0 2G RF TRX cannot be masked by GNT_BT

	 * enable "WLS0 BB chage RF mode if GNT_BT = 1" for shared-antenna type

	 * disable:0x1860[3] = 1, enable:0x1860[3] = 0

	 *

	 * enable "DAC off if GNT_WL = 0" for non-shared-antenna

	 * disable 0x1c30[22] = 0,

	 * enable: 0x1c30[22] = 1, 0x1c38[12] = 0, 0x1c38[28] = 1

	 *

	 * disable WL-S1 BB chage RF mode if GNT_BT

	 * since RF TRx mask can do it

	/* disable WL-S0 BB chage RF mode if wifi is at 5G,

	 * or antenna path is separated

 shared-antenna */

 disable LTE coex in wifi side */

 set Rx filter corner RCK offset */

 set Rx filter corner RCK offset */

 update cck pd info */

 mac edcca state setting */

 edcca decistion opt */

 Shared-Antenna Coex Table */

 case-0 */

 case-5 */

 case-10 */

 case-15 */

 case-20 */

 case-25 */

case-30*/

 Non-Shared-Antenna Coex Table */

 case-100 */

 case-105 */

 case-110 */

 case-115 */

 case-120 */

 Shared-Antenna TDMA */

 case-0 */

 case-1 */

 case-5 */

 case-10 */

 case-15 */

 case-20 */

 case-25 */

 Non-Shared-Antenna TDMA */

 case-100 */

 case-105 */

 case-110 */

 case-115 */

 case-120 */

 rssi in percentage % (dbm = % - 100) */

 wl_tx_dec_power, bt_tx_dec_power, wl_rx_gain, bt_rx_lna_constrain */

 for normal */

 for WL-CPT */

 for normal */

 for WL-CPT */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

		/* Current firmware and driver don't report pattern index

		 * Use pattern_idx to 0 defaultly.

		/* Current firmware and driver don't report ssid index.

		 * Use 0 for n_matches based on its comment.

 RTK internal CRC16 for Pattern Cam */

 get 1' complement */

	/* translate mask from os to mask for hw

	 * pattern from OS uses 'ethenet frame', like this:

	 * |    6   |    6   |   2  |     20    |  Variable  |  4  |

	 * |--------+--------+------+-----------+------------+-----|

	 * |    802.3 Mac Header    | IP Header | TCP Packet | FCS |

	 * |   DA   |   SA   | Type |

	 *

	 * BUT, packet catched by our HW is in '802.11 frame', begin from LLC

	 * |     24 or 30      |    6   |   2  |     20    |  Variable  |  4  |

	 * |-------------------+--------+------+-----------+------------+-----|

	 * | 802.11 MAC Header |       LLC     | IP Header | TCP Packet | FCS |

	 *		       | Others | Tpye |

	 *

	 * Therefore, we need translate mask_from_OS to mask_to_hw.

	 * We should left-shift mask by 6 bits, then set the new bit[0~5] = 0,

	 * because new mask[0~5] means 'SA', but our HW packet begins from LLC,

	 * bit[0~5] corresponds to first 6 Bytes in LLC, they just don't match.

 Shift 6 bits */

 Set bit 0-5 to zero */

	/* To get the wake up pattern from the mask.

	 * We do not count first 12 bits which means

	 * DA[6] and SA[6] in the pattern to match HW design.

 wait 100ms for firmware to finish TX */

 wait 100ms for HW to finish rx dma */

	/* When resuming from wowlan mode, some hosts issue signal

	 * (PCIE: PREST, USB: SE0RST) to device, and lead to reset

	 * mac core. If it happens, the connection to AP will be lost.

	 * Setting REG_RSV_CTRL Register can avoid this process.

 firmware enters deep ps by itself if supported */

	/* some HCI related registers will be reset after resume,

	 * need to set them again.

	/* Current wowlan function support setting of only one STATION vif.

	 * So when one suitable vif is found, stop the iteration.

 If wowlan mode is not enabled, do nothing */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

 turn off in debugfs for debug usage */

 down -> up -> down -> up */

 up -> down -> down -> up */

 DIG MAX should be bounded by minimum RSSI with offset +15 */

	/* test the false alarm count from the highest threshold level first,

	 * and increase it by corresponding step size

	 *

	 * note that the step size is offset by -2, compensate it afterall

	/* calculate the upper/lower bound by the minimum rssi we have among

	 * the peers connected with us, meanwhile make sure the igi value does

	 * not beyond the hardware limitation

	/* record current igi value and false alarm statistics for further

	 * damping checks, and record the trend of igi values

 for further calculation */

 1dB ~ 96dB */

 maximum 96 dB */

 toggle read edge of path A */

 Band 1 */

 Band 2 */

 Band 3 */

 Band 3 */

 Band 3 */

 Band 4 */

 Band 4 */

 cross-reference 5G power limits if values are not assigned */

 cross-reference power limits for ht and vht */

 cross-reference power limits for 5G channels */

 cross-reference power limits for 20/40M bandwidth */

 cross-reference power limits */

 bw40 is the base power */

 bw40 is the base power */

 the base idx of bw80 is the average of bw40+/bw40- */

 only 20M BW with cck and ofdm */

 only 20/40M BW with ht */

 select min power limit among [20M BW ~ current BW] */

 base power index for 2.4G/5G */

/* set tx power level by path for each rates, note that the order of the rates

 * are *very* important, bacause 8822B/8821C combines every four bytes of tx

 * power index into a four-byte power index register, and calls set_tx_agc to

 * write these values into hardware

 do not need cck rates if we are not in 2.4G */

 default at channel 1 */

 2.4G channels */

 5G channels */

 init tx power by rate offset */

 init tx power limit */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

	/* if default key search is enabled, the first 4 cam entries

	 * are used to direct map to group key with its key->key_idx, so

	 * driver should use cam entries after 4 to install pairwise key

 default use default key search for now */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

	/* the least ampdu factor is 8K, and the value in the tx desc is the

	 * max aggregation num, which represents val * 2 packets can be

	 * aggregated in an AMPDU, so here we should use 8/2=4 as the base

	/* [11:8], reserved, fills with zero

	 * [7:2],  tx report sequence number

	 * [1:0],  firmware use, fills with zero

 pass sn to tx report handler through driver data */

 TODO: need to change hw port and hw ssn sel for multiple vifs */

 for broadcast/multicast, use default values */

 maybe merge with tx status ? */

	/* A beacon or dummy reserved page packet indicates that it is the first

	 * reserved page, and the qsel of it will be set in each hci.

 TODO: need to change hw port and hw ssn sel for multiple vifs */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2018-2019  Realtek Corporation

/* EDCCA is enabled during normal behavior. For debugging purpose in

 * a noisy environment, it can be disabled via edcca debugfs. Because

 * all rtw88 devices will probably be affected if environment is noisy,

 * rtw_edcca_enabled is just declared by driver instead of by device.

 * So, turning it off will take effect for all rtw88 devices before

 * there is a tough reason to maintain rtw_edcca_enabled by device.

 5G has no CCK rates */

/* process TX/RX statistics periodically for hardware,

 * the information helps hardware to enhance performance

 reset tx/rx statictics */

 make sure BB/RF is working for dynamic mech */

 use atomic version to avoid taking local->iflist_mtx mutex */

	/* fw supports only one station associated to enter lps, if there are

	 * more than two stations associated to the AP, then we can not enter

	 * lps, because fw does not handle the overlapped beacon interval

	 *

	 * mac80211 should iterate vifs and determine if driver can enter

	 * ps by passing IEEE80211_CONF_PS to us, all we need to do is to

	 * get that vif and check if device is having traffic more than the

	 * threshold.

	/* Data will be freed after lifetime of device coredump. After calling

	 * dev_coredump, data is supposed to be handled by the device coredump

	 * framework. Note that a new dump will be discarded if a previous one

	 * hasn't been released yet.

 assign the center channel used while 20M bw is selected */

			/* assign the center channel used

			 * while 40M bw is selected

			/* assign the center channel used

			 * while 40M bw is selected

 assign the center channel used while current bw is selected */

	/* if the channel isn't set for scanning, we will do RF calibration

	 * in ieee80211_ops::mgd_prepare_tx(). Performing the calibration

	 * during scanning on each channel takes too long.

 4SS, every two bits for MCS7/8/9 */

 MCS9 */

 MCS8 */

 MCS7 */

 power on MAC before firmware downloaded */

 config mac after firmware downloaded */

 send H2C after HCI has started */

 rcr reset after powered on */

 default use ack */

 power on mac to read efuse */

 default rx filter setting */

 TODO: USB & SDIO may need extra room? */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 ACH 0 */

 ACH 1 */

 ACH 2 */

 ACH 3 */

 ACH 4 */

 ACH 5 */

 ACH 6 */

 ACH 7 */

 B0MGQ */

 B0HIQ */

 B1MGQ */

 B1HIQ */

 FWCMDQ */

 Group 0 */

 Group 1 */

 Public Max */

 WP threshold */

 addrs are in decreasing order */

 Path A */

 Path B */

 SCO compensate FC setting */

 Path B */

 SCO compensate FC setting */

 Band edge */

 CCK parameters */

 Switch bandwidth */

 PTA init  */

 set WL Tx response = Hi-Pri */

 set rf gnt debug off */

 set WL Tx thru in TRX mask table if GNT_WL = 0 && BT_S1 = ss group */

 set WL Tx stb if GNT_WL = 0 && BT_S1 = ss group for 3-ant */

 set PTA break table */

 enable BT counter 0xda40[16,2] = 2b'11 */

 0 -> original */

 1 -> for BT-connected ACI issue && BTG co-rx */

 2 ->reserved for shared-antenna */

 3- >reserved for shared-antenna */

 4 ->reserved for shared-antenna */

 the below id is for non-shared-antenna free-run */

 0 -> original */

 1 -> reserved for shared-antenna */

 2 ->reserved for shared-antenna */

 3- >reserved for shared-antenna */

 4 ->reserved for shared-antenna */

 the below id is for non-shared-antenna free-run */

 fix LNA2 = level-5 for BT ACI issue at BTG */

 clock-gate off before reset counter*/

 set WL standby = Rx for GNT_BT_Tx = 1->0 settle issue */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 MUST <= FCXMAX_STEP and match with wl fw*/

 no wl tx pause*/

 slot id */

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 10 */

 11 */

 12 */

 13 */

 14 */

 15 */

 16 */

 17 */

 18 */

 19 */

 TDMA off + pri: BT > WL */

 TDMA off + pri: WL > BT */

 TDMA off + pri: BT = WL */

 TDMA off + pri: BT = WL > BT_Lo */

 TDMA off + pri: WL = BT, BT_Rx > WL_Lo_Tx */

 TDMA off + pri: WL_Rx = BT, BT_HI > WL_Tx > BT_Lo */

 TDMA off + pri: BT_Hi > WL > BT_Lo */

 TDMA off + pri: WL_Hi-Tx > BT_Hi_Rx, BT_Hi > WL > BT_Lo */

 TDMA off+Bcn-Protect + pri: WL_Hi-Tx > BT_Hi_Rx, BT_Hi > WL > BT_Lo*/

 TDMA off + Ext-Ctrl + pri: default */

 TDMA off + Ext-Ctrl + pri: E2G-slot block all BT */

 TDMA Fix slot-0: W1:B1 = 30:30 */

 TDMA Fix slot-1: W1:B1 = 50:50 */

 TDMA Fix slot-2: W1:B1 = 20:30 */

 TDMA Fix slot-3: W1:B1 = 40:10 */

 TDMA Fix slot-4: W1:B1 = 70:10 */

 TDMA Fix slot-5: W1:B1 = 20:60 */

 TDMA Fix slot-6: W1:B1 = 30:60 */

 TDMA Fix slot-7: W1:B1 = 20:80 */

 TDMA Fix slot-8: W1:B1 = user-define */

 TDMA Fix slot-9: W1:B1 = 40:20 */

 PS-TDMA Fix slot-0: W1:B1 = 30:30 */

 PS-TDMA Fix slot-1: W1:B1 = 50:50 */

 PS-TDMA Fix slot-2: W1:B1 = 20:30 */

 PS-TDMA Fix slot-3: W1:B1 = 20:60 */

 PS-TDMA Fix slot-4: W1:B1 = 30:70 */

 PS-TDMA Fix slot-5: W1:B1 = 20:80 */

 PS-TDMA Fix slot-6: W1:B1 = user-define */

 TDMA Auto slot-0: W1:B1 = 50:200 */

 TDMA Auto slot-1: W1:B1 = 60:200 */

 TDMA Auto slot-2: W1:B1 = 20:200 */

 TDMA Auto slot-3: W1:B1 = user-define */

 PS-TDMA Auto slot-0: W1:B1 = 50:200 */

 PS-TDMA Auto slot-1: W1:B1 = 60:200 */

 PS-TDMA Auto slot-2: W1:B1 = 20:200 */

 PS-TDMA Auto slot-3: W1:B1 = user-define */

 TDMA Auto slot2-0: W1:B4 = 30:50 */

 TDMA Auto slot2-1: W1:B4 = 30:70 */

 TDMA Auto slot2-2: W1:B4 = 50:50 */

 TDMA Auto slot2-3: W1:B4 = 60:60 */

 TDMA Auto slot2-4: W1:B4 = 20:80 */

 TDMA Auto slot2-5: W1:B4 = user-define */

 PS-TDMA Auto slot2-0: W1:B4 = 30:50 */

 PS-TDMA Auto slot2-1: W1:B4 = 30:70 */

 PS-TDMA Auto slot2-2: W1:B4 = 50:50 */

 PS-TDMA Auto slot2-3: W1:B4 = 60:60 */

 PS-TDMA Auto slot2-4: W1:B4 = 20:80 */

 PS-TDMA Auto slot2-5: W1:B4 = user-define */

 not used, use mailbox to inform BT */

 only for BT enable */

 Init Coex variables that are not zero */

 set the slot_now table to original */

 if tdma not sync between drv/fw  */

 if slot not sync between drv/fw  */

 Check Leak-AP */

 Check diff time between WL slot and W1/E2G slot */

 At least 3 bytes: type(1) & len(2) */

 use ring-structure to store dm step */

 only apply "force tx power" */

 wl scan */

 only busy */

 wl idle */

 TODO if include module->ant.type == BTC_ANT_SHARED */

 get p2p channel */

 get 2g channel  */

 turn off AFH info if BW > 40 */

 The below is dedicated antenna case */

 TODO get isolation by BT psd */

 wl idle -> freerun */

 WL rssi < 50% (-60dBm) */

 TDMA off */

 TDMA off + beacon protect */

 TDMA off + beacon protect + Ext_control */

 TDMA Fix-Slot */

 W1:B1 = user-define */

 PS-TDMA Fix-Slot */

 TDMA Auto-Slot */

 W1:B1 = user-define */

 PS-TDMA Auto-Slot */

 TDMA Auto-Slot2 */

 W1:B1 = user-define */

 PS-TDMA Auto-Slot2 */

 W1:B1 = user-define */

 BT should control by GNT_BT if WL_2G at S0 */

 shared-antenna */

wl-busy + bt idle*/

wl-busy + bt-inq */

 wl-scan + bt-idle */

 wl-scan + bt-inq */

 wl-connecting + bt-inq or bt-idle */

 wl-idle + bt-idle */

 dedicated-antenna */

 shared-antenna */

 dedicated-antenna */

 wl-busy + bt-A2DP */

 wl-busy + bt-inq + bt-A2DP */

 wl-scan + bt-inq + bt-A2DP */

 wl-scan + bt-A2DP */

 wl-connecting + bt-A2DP */

 wl-idle + bt-A2DP */

 wl-busy + bt-A2dp_Sink */

 wl-busy + bt-inq + bt-A2dp_Sink */

 wl-scan + bt-A2dp_Sink */

 wl-scan + bt-inq + bt-A2dp_Sink */

 wl-connecting + bt-A2dp_Sink */

 wl-idle + bt-A2dp_Sink */

 wl-busy + bt-PAN */

 wl-busy + bt-inq + bt-PAN */

 wl-scan + bt-PAN */

 wl-scan + bt-inq + bt-PAN */

 wl-connecting + bt-PAN */

 wl-idle + bt-pan */

 wl-busy + bt-A2DP+HID */

 wl-idle + bt-A2DP */

 wl-busy + bt-inq + bt-A2DP+HID */

 wl-scan + bt-inq + bt-A2DP+HID */

 wl-scan + bt-A2DP+HID */

 wl-connecting + bt-A2DP+HID */

 wl-busy + bt-A2DP+PAN */

 wl-busy + bt-inq + bt-A2DP+PAN */

 wl-scan + bt-A2DP+PAN */

 wl-scan + bt-inq + bt-A2DP+PAN */

 wl-connecting + bt-A2DP+PAN */

 wl-idle + bt-A2DP+PAN */

 wl-busy + bt-PAN+HID */

 wl-busy + bt-inq + bt-PAN+HID */

 wl-scan + bt-PAN+HID */

 wl-scan + bt-inq + bt-PAN+HID */

 wl-connecting + bt-PAN+HID */

 wl-idle + bt-PAN+HID */

 wl-busy + bt-A2DP+PAN+HID */

 wl-busy + bt-inq + bt-A2DP+PAN+HID */

 wl-scan + bt-inq + bt-A2DP+PAN+HID */

 wl-scan + bt-A2DP+PAN+HID */

 wl-connecting + bt-A2DP+PAN+HID */

 wl-idle + bt-A2DP+PAN+HID */

 notify halbb ignore GNT_BT or not for WL BB Rx-AGC control */

 always 0 if 5G */

 backup the original tx time before tx-limit on */

 restore the original tx time if no tx-limit */

 TODO add these functions */

 dedicated-antenna */

 shared-antenna */

 dedicated-antenna */

 shared-antenna */

 dedicated-antenna */

 dedicated-antenna */

 shared-antenna */

 dedicated-antenna */

 shared-antenna */

 dedicated-antenna */

 shared-antenna */

 dedicated-antenna */

 check if role active? */

 check dbcc role */

 only care 2 roles + BT coex */

 Be careful to change the following sequence!! */

 if no client_joined, don't care P2P-GO/AP role */

 reset bt info if bt re-enable */

 if rfk run 1->0 */

 Be careful to change the following function sequence!! */

 reset to mo-connect before update */

 parse raw info low-Byte2 */

 parse raw info low-Byte3 */

 parse raw info high-Byte0 */

 raw val is dBm unit, translate from -100~ 0dBm to 0~100%*/

 parse raw info high-Byte1 */

 parse raw info high-Byte2 */

 parse raw info high-Byte3 */

 set RSSI level 4 ~ 0 if rssi bit map match */

 Don't need rtw89_leave_ps_mode() */

 cycle statistics exceptions */

 1 cycle record 1 wl-slot and 1 bt-slot */

 store step info by using ring instead of FIFO*/

 To avoid I/O if WL LPS or power-off  */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 PCIE 64 */

 DLFW */

 PCIE */

 DLFW */

 PCIE 64 */

 DLFW */

 PCIE SCC */

 PCIE SCC */

 DLFW */

 init clock */

 init TX encryption */

 init MIC ICV append */

 option init */

 avoid BT FW loss information */

 AP mode set tx gid to 63 */

 STA mode set tx gid to 0(default) */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 ext keys need two cam entries for 256-bit key */

	/* RTW89_ADDR_CAM_SEC_NONE	: not enabled

	 * RTW89_ADDR_CAM_SEC_ALL_UNI	: 0 - 6 unicast

	 * RTW89_ADDR_CAM_SEC_NORMAL	: 0 - 1 unicast, 2 - 4 group, 5 - 6 BIP

	 * RTW89_ADDR_CAM_SEC_4GROUP	: 0 - 1 unicast, 2 - 5 group, 6 BIP

 Group keys */

 Group keys */

 maximum key length 256-bit */

 associate with addr cam */

 detach sec cam from addr cam */

	/* clear valid bit in addr cam will disable sec cam,

	 * so we don't need to send H2C command again

 associate addr cam with bssid cam */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2020  Realtek Corporation

 length of a single segment skb is desc_info->pkt_size */

 first segment has RX desc */

 skip the rest RXBD bufs */

 In case of flushing pending SKBs, the countdown may exceed. */

 currently, support for only one frame */

 first segment has RX desc */

 skip the rest RXBD bufs */

 always release all RPQ */

 write 1 clear */

	/* If interrupt event is on the road, it is still trigger interrupt

	 * even we have done pci_stop() to turn off IMR.

 reserved 1 desc check ring is full or not */

	/* Because the time taked by the I/O is a bit dynamic, it's hard to

	 * define a reasonable fixed total timeout to use read_poll_timeout*

	 * helper. Instead, we can ensure a reasonable polling times, so we

	 * just use for loop with udelay here.

 It may be unnecessary to flush FWCMD queue. */

	/* FWCMD queue doesn't have wd pages. Instead, it submits the CMD

	 * buffer with WD BODY only. So here we don't need to check the free

	 * pages of the wd ring.

 check the tx type and dma channel for fw cmd queue */

 Enable counter */

 Disable L1BD */

 Set div */

 Obtain div and margin */

 Enable function */

 CLK delay = 0 */

 Set L1BD to ori */

 clear DMA indexes */

 ltr sw trigger */

 stop DMA activities */

 check PCI at idle state */

 configure TX/RX op modes */

 multi-tag mode */

 fill TRX BD indexes */

 enable FW CMD queue to download firmware */

 start DMA activities */

 ltr sw trigger */

 ADDR info 8-byte mode */

 enable DMA for all queues */

 Release PCI IO */

 FWCMD queue doesn't use txwd as pages */

	/* Though there is standard PCIE configuration space to set the

	 * link control register, but by Realtek's design, driver should

	 * check if host supports CLKREQ/ASPM to enable the HW module.

	 *

	 * These functions are implemented by two HW modules associated,

	 * one is responsible to access PCIE configuration space to

	 * follow the host settings, and another is in charge of doing

	 * CLKREQ/ASPM mechanisms, it is default disabled. Because sometimes

	 * the host does not support it, and due to some reasons or wrong

	 * settings (ex. CLKREQ# not Bi-Direction), it could lead to device

	 * loss if HW misbehaves on the link.

	 *

	 * Hence it's designed that driver should first check the PCIE

	 * configuration space is sync'ed and enabled, then driver can turn

	 * on the other module that is actually working on the mechanism.

 Hardware need write the reg twice to ensure the setting work */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 2^ecw - 1 = cw; ecw = log2(cw + 1) */

 defer to bss_info_changed to have vif info */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 its members are protected by rtw89_sar_set_src() */

 its members are protected by rtw89_sar_set_src() */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 M1 */

 M3 */

 M5 */

 driver function */

 hal function */

 state handler */

 wait m3 */

 set alarm to prevent FW response timeout */

 wait m5 */

 prevent FW response timeout */

 M1 */

 M3 */

 M5 */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 jump to section header */

 legacy firmware support normal type only */

 It still works if wowlan firmware isn't existing. */

 If init req is set, hw will set the ssn */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 5G has no CCK rates, 1M/2M/5.5M/11M */

 assign the center channel used while 20M bw is selected */

			/* assign the center channel used

			 * while 40M bw is selected

			/* assign the center channel used

			 * while 40M bw is selected

 assign the center channel used while current bw is selected */

 fixed data rate for mgmt frames */

 AP IOT issue with EAPoL, ARP and DHCP */

 enable wd_info for AMPDU */

 8-byte alignment */

 sign conversion for S(12,2) */

 No 4 CCK rates for 5G */

 2-byte unit */

 8-byte unit */

 currently using single PHY */

 No 4 CCK rates for 5G */

 he_gi is used to match ppdu, so we always fill it. */

 reinvoke to process the last frame */

 update cam aid mac_id net_type */

 for station mode, assign the mac_id from itself */

 update cam aid mac_id net_type */

 efuse process */

 pre-config BB/RF, BB reset/RFC reset */

 Prvent to stop twice; enter_ips and ops_stop */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 1NSS */

 2NSS */

 1TX */

 2TX */

 1TX */

 2TX */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 Ignore country ie if there is a country domain programmed in chip */

	/* This notification might be set from the system of distros,

	 * and it does not expect the regulatory will be modified by

	 * connecting to an AP (i.e. country ie).

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 msbk_d: 15/14/13/12 */

 msbk_d: 11/10/9/8 */

 msbk_d: 7/6/5/4 */

 msbk_d: 3/2/1/0 */

 dadak_d/biask_d */

 S0 */

 S1 */

 only check path 0 */

 RCK trigger */

 RCK_ADC_OFFSET */

 TSSI pause */

 TSSI resume */

subpage_id*/

POW IQKPLL*/

1= fail*/

 disable */

 enable */

 disable */

 enable */

 SCAN_START */

 SCAN_END */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 don't care */

 don't care */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/* Copyright(c) 2019-2020  Realtek Corporation

 lower than ofdm, do not aggregate */

 prevent hardware rate fallback to G mode rate */

 lower than 20M vht 2ss mcs8, make it small */

 lower than 40M vht 2ss mcs9, make it medium */

 not yet 80M vht 2ss mcs8/9, make it twice regular packet size */

 MCS11, MCS9, MCS7 */

 Set the ra mask from sta's capability */

 MCS9, MCS8, MCS7 */

	/* lagacy cannot be empty for nl80211_parse_tx_bitrate_mask, and

	 * require at least one basic rate for ieee80211_set_bitrate_mask,

	 * so the decision just depends on if all bitrates are set or not.

 delay to ensure writing properly */

 case 1: RFE match, CV match */

 case 2: RFE match, CV don't care */

 case 3: RFE match, CV max in table */

 case 4: RFE don't care, CV max in table */

 IQK/DPK clock & reset */

 check 0x8080 */

 warning case */

 need tp for each entry */

 need tp for each entry */

	/* Set sampling threshold for 4 different regions, unit in idx_cnt.

	 * low[i] = high[i-1] + 1

	 * high[i] = high[i-1] * ifs_th_times

 only ifs_clm for now */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

<1> reset trx ring */

<2> Enable Adapter */

<3> Enable Interrupt */

<enable timer> */

<1> Stop all timer */

<2> Disable Interrupt */

<3> Disable Adapter */

	/*Only one thread can change

	 *the RF state at one time, and others

	 *should wait to be executed.

 Set RF after the previous action is done.  */

				/*Wait too long, return false to avoid

				 *to be stuck here.

		/*

		 *Do not enter IPS in the following conditions:

		 *(1) RF is already OFF or Sleep

		 *(2) swrf_processing (indicates the IPS is still under going)

		 *(3) Connectted (only disconnected can trigger IPS)

		 *(4) IBSS (send Beacon)

		 *(5) AP mode (send Beacon)

		 *(6) monitor mode (rcv packet)

 call before RF off */

rtl_pci_reset_trx_ring(hw); */

	/* because when link with ap, mac80211 will ask us

	 * to disable nic quickly after scan before linking,

	 * this will cause link failed, so we delay 100ms here

/* NOTICE: any opmode should exc nic_on, or disable without

 * nic_on may something wrong, like adhoc TP

 call after RF on */

for FW LPS*/

/*

 *Determine if we can set Fw into PS mode

 *in current condition.Return TRUE if it

 *can enter PS mode.

 Change current and default preamble mode.*/

 Update power save mode configured. */

	/*

	 *<FW control LPS>

	 *1. Enter PS mode

	 *   Set RPWM to Fw to turn RF off and send H2C fw_pwrmode

	 *   cmd to set Fw into PS mode.

	 *2. Leave PS mode

	 *   Send H2C fw_pwrmode cmd to Fw to set Fw into Active

	 *   mode and set RPWM to turn RF on.

 Reset the power save related parameters. */

 Interrupt safe routine to enter the leisure power save mode.*/

sleep after linked 10s, to let DHCP and 4-way handshake ok enough!! */

	/* Don't need to check (ppsc->dot11_psmode == EACTIVE), because

	 * bt_ccoexist may ask to enter lps.

	 * In normal case, this constraint move to rtl_lps_set_psmode().

 Interrupt safe routine to leave the leisure power save mode.*/

FIX ME */

rtlpriv->cfg->ops->enable_interrupt(hw); */

 For sw LPS*/

 check if this really is a beacon */

 min. beacon length + FCS_LEN */

 and only beacons from the associated BSSID, please */

 Check whenever the PHY can be turned off again. */

 1. What about buffered unicast traffic for our AID? */

 2. Maybe the AP wants to send multicast/broadcast data? */

	/* unicast will process by mac80211 through

	 * set ~IEEE80211_CONF_PS, So we just check

		/* back to low-power land. and delay is

sleep after linked 10s, to let DHCP and 4-way handshake ok enough!! */

	/* here is power save alg, when this beacon is DTIM

	 * we will set sleep time to dtim_period * n;

	 * when this beacon is not DTIM, we will set sleep

	 * time to sleep_intv = rtlpriv->psc.dtim_counter or

	/* this print should always be dtim_conter = 0 &

	 * sleep  = dtim_period, that meaons, we should

 we tested that 40ms is enough for sw & hw sw delay */

 we can sleep after ps null send ok */

to find noa ie*/

					/* Driver should wait LPS entering

					 * CTWindow

to find noa ie*/

					/* Driver should wait LPS entering

					 * CTWindow

 min. beacon length + FCS_LEN */

 and only beacons from the associated BSSID, please */

 check if this really is a beacon */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

/*

 *Finds the highest rate index we can use

 *if skb is special data like DHCP/EAPOL, we set should

 *it to lowest rate CCK_1M, otherwise we set rate to

 *highest rate based on wireless mode used for iwconfig

 *show Tx rate.

	/*

	 *this rate is no use for true rate, firmware

	 *will control rate at all it just used for

	 *1.show in iwconfig in B/G mode

	 *2.in rtl_get_tcb_desc when we check rate is

	 *      1M we will not use FW rate but user rate.

mac80211 Rate Control callbacks*/

 Check if aggregation has to be enabled for this tid */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 free dr */

 free databuf */

 write_out */

 data are already in little-endian order */

 read_in */

 firmware download is checksumed, don't retry */

 n/a */

 n/a */

 write_out */

	Default aggregation handler. Do nothing and just return the oldest skb.  */

 usb endpoint mapping */

 IBSS */

 AMPDU */

 set sane AMPDU defaults */

 QOS */

 IRQ */

 HIMR - turn all on */

 HIMR_EX - turn all on */

TODO*/;

TODO*/

 static bcn for roaming */

TODO*/;

TODO*/

 static bcn for roaming */

 TO DO */

 make function no-op when possible */

 alignment calculation as in lbtf_rx() / carl9170_rx_copy_data() */

 TODO: deduplicate common code, define helper function instead? */

		/* Input might be invalid, avoid accessing memory outside

		 * the buffer.

 Make sure the payload data is 4 byte aligned. */

 reserve some space for mac80211's radiotap */

 disconnect */

	/* On some architectures, usb_free_coherent must not be called from

	 * hardirq context. Queue urb to cleanup list.

 1600 == 1514 + max WLAN header + rtk info */

 Enable software */

 should after adapter start and interrupt enable. */

 Start bulk IN */

=======================  tx =========================================*/

 clean up rx stuff. */

 clean up tx stuff */

 We may add some struct into struct rtl_usb later. Do deinit here.  */

 should after adapter start and interrupt enable. */

 Enable software */

 free pre-allocated URBs from rtl_usb_start() */

  TODO:	statistics */

 Ignore error and keep issuiing other urbs */

 this spin lock must be initialized early */

 init cfg & intf_ops */

 Init IO handler */

like read eeprom and so on */

 Init mac80211 sw */

 just in case driver is removed before firmware callback */

ieee80211_unregister_hw will call ops_stop */

deinit rfkill */

 rtl_deinit_rfkill(hw); */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

/*

 *NOTICE!!!: This file will be very big, we should

 *keep it clear under following roles:

 *

 *This file include following parts, so, if you add new

 *functions into this file, please check which part it

 *should includes. or check if you should add new part

 *for this file:

 *

 *1) mac80211 init functions

 *2) tx information functions

 *3) functions called by core.c

 *4) wq & timer callback functions

 *5) frame process functions

 *6) IOT functions

 *7) sysfs functions

 *8) vif functions

 *9) ...

/*********************************************************

 *

 * mac80211 init functions

 *

 IEEE80211_AC_BE */

 IEEE80211_AC_BK */

 IEEE80211_AC_BK */

 IEEE80211_AC_BE */

 IEEE80211_AC_VI */

 IEEE80211_AC_VI */

 IEEE80211_AC_VO */

 IEEE80211_AC_VO */

	/*

	 *Maximum length of AMPDU that the STA can receive.

	 *Length = 2 ^ (13 + max_ampdu_length_exp) - 1 (octets)

Minimum MPDU start spacing , */

	/*hw->wiphy->bands[NL80211_BAND_2GHZ]

	 *base on ant_num

	 *rx_mask: RX mask

	 *if rx_ant = 1 rx_mask[0]= 0xff;==>MCS0-MCS7

	 *if rx_ant = 2 rx_mask[1]= 0xff;==>MCS8-MCS15

	 *if rx_ant >= 3 rx_mask[2]= 0xff;

	 *if BW_40 rx_mask[4]= 0x01;

	 *highest supported RX rate

 1: 2.4 G bands */

 <1> use  mac->bands as mem for hw->wiphy->bands */

		/* <2> set hw->wiphy->bands[NL80211_BAND_2GHZ]

 <3> init ht cap base on ant_num */

 <4> set mac->sband to wiphy->sband */

 2: 5 G bands */

 <1> use  mac->bands as mem for hw->wiphy->bands */

		/* <2> set hw->wiphy->bands[NL80211_BAND_5GHZ]

 <3> init ht cap base on ant_num */

 <4> set mac->sband to wiphy->sband */

 <1> use  mac->bands as mem for hw->wiphy->bands */

			/* <2> set hw->wiphy->bands[NL80211_BAND_2GHZ]

 <3> init ht cap base on ant_num */

 <4> set mac->sband to wiphy->sband */

 <1> use  mac->bands as mem for hw->wiphy->bands */

			/* <2> set hw->wiphy->bands[NL80211_BAND_5GHZ]

 <3> init ht cap base on ant_num */

 <4> set mac->sband to wiphy->sband */

 <5> set hw caps */

 swlps or hwlps has been set in diff chip in init_sw_vars */

 TODO: Correct this value for our hw */

 hw->max_rates = 1; */

 wowlan is not supported by kernel if CONFIG_PM is not defined */

 <6> mac address */

 <1> timer */

 <2> work queue */

set init state to on */

 <1> init mac80211 */

 <2> rate control register */

	/*

	 * <3> init CRDA must come after init

	 * mac80211 hw  in _rtl_init_mac80211.

 <4> locks */

 <5> init list */

 <6> init deferred work */

/*********************************************************

 *

 * tx information functions

 *

 1M can only use Long Preamble. 11B spec */

 Common Settings */

 Use CTS-to-SELF in protection mode. */

 Use RTS-CTS in protection mode. */

 TODO we will differentiate adhoc and station future  */

 use sta_entry->ratr_index */

use legency rate, shall use 20MHz */

/* mac80211's rate_idx is like this:

 *

 * 2.4G band:rx_status->band == NL80211_BAND_2GHZ

 *

 * B/G rate:

 * (rx_status->flag & RX_FLAG_HT) = 0,

 * DESC_RATE1M-->DESC_RATE54M ==> idx is 0-->11,

 *

 * N rate:

 * (rx_status->flag & RX_FLAG_HT) = 1,

 * DESC_RATEMCS0-->DESC_RATEMCS15 ==> idx is 0-->15

 *

 * 5G band:rx_status->band == NL80211_BAND_5GHZ

 * A rate:

 * (rx_status->flag & RX_FLAG_HT) = 0,

 * DESC_RATE6M-->DESC_RATE54M ==> idx is 0-->7,

 *

 * N rate:

 * (rx_status->flag & RX_FLAG_HT) = 1,

 * DESC_RATEMCS0-->DESC_RATEMCS15 ==> idx is 0-->15

 *

 * VHT rates:

 * DESC_RATEVHT1SS_MCS0-->DESC_RATEVHT1SS_MCS9 ==> idx is 0-->9

 * DESC_RATEVHT2SS_MCS0-->DESC_RATEVHT2SS_MCS9 ==> idx is 0-->9

 HT MCS0-15 */

 VHT MCS0-9, NSS */

 legacy */

 check 5G band */

		/*

		 *we set data rate INX 0

		 *in rtl_rc.c   if skb is special data or

		 *mgt which need low data rate.

		/*

		 *So tcb_desc->hw_rate is just used for

		 *special data and mgt frames

			/*

			 *because hw will nerver use hw_rate

			 *when tcb_desc->use_driver_rate = false

			 *so we never set highest N rate here,

			 *and N rate will all be controlled by FW

			 *when tcb_desc->use_driver_rate = false

 Dul mac */

WEP_IV_LEN*/

TKIP_IV_LEN*/

CCMP_HDR_LEN;*/

should call before software enc*/

				/* 68 : UDP BOOTP client

				 * 67 : UDP BOOTP server

 EAPOL is seens as in-4way */

		/* TODO: Handle any IPv6 cases that need special handling.

		 * For now, always return false

	/* SW_DEFINE[11:8] are reserved (driver fills zeros)

	 * SW_DEFINE[7:2] are used by driver

	 * SW_DEFINE[1:0] are reserved for firmware (driver fills zeros)

 3 sec. (timeout) seen as acked */

 AIFS = AIFSN * slot time + SIFS */

/*********************************************************

 *

 * functions called by core.c

 *

/*********************************************************

 *

 * wq & timer callback functions

 *

 this function is used for roaming */

 check if this really is a beacon */

 min. beacon length + FCS_LEN */

 and only beacons from the associated BSSID, please */

 180 seconds */

 check if it is scanning */

 check if this really is a beacon */

 <1> Determine if action frame is allowed */

	/* <2> to check if traffic busy, if

	 * busytraffic we don't change channel

 (1) get aver_rx_cnt_inperiod & aver_tx_cnt_inperiod */

 (2) check traffic busy */

 Higher Tx/Rx data. */

 Extremely high Rx data. */

 check every tid's tx traffic */

 PS is controlled by coex. */

 <3> DM */

 <4> roaming */

			/* if we can't recv beacon for 10s,

			 * we should reconnect this AP

 <6> scan list */

 <7> check ack queue */

 enqueue */

 wake up wq */

 dequeue a task */

 do it */

 free */

/*********************************************************

 *

 * frame process functions

 *

 when we use 2 rx ants we send IEEE80211_SMPS_OFF */

 when we use 1 rx ant we send IEEE80211_SMPS_STATIC */

 27 = header + category + action + smps mode */

 0 */

 4 */

 1 */ 
 0 */

 2 */ 
 1 */

 3 */ 
 3 */

 this is a type = mgmt * stype = action frame */

 rtlpriv->cfg->ops->update_rate_tbl(hw, sta, 0, true); */

/* because mac80211 have issues when can receive del ba

 * so here we just make a fake del_ba if we receive a ba_req

 * but rx_agg was opened to let mac80211 release some ba

 * related resources, so please this del_ba for tx

 27 = header + category + action + smps mode */

 bit 11 initiator */

 bit 15:12 TID number */

/*********************************************************

 *

 * IOT functions

 *

 check if this really is a beacon */

 min. beacon length + FCS_LEN */

 and only beacons from the associated BSSID, please */

 add debugfs */

 init some global vars */

RC*/

 remove debugfs */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 0-1 config + mac, 2-5 fill 128key,6-7 are reserved */

 Does STA already exist? */

 Get a free CAM entry. */

 Does STA already exist? */

 Remove from HW Security CAM */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 Update PCI dependent default settings*/

Update PCI ASPM setting */

No ASPM */

ASPM dynamically enabled/disable. */

ASPM with Clock Req dynamically enabled/disable. */

		/* Always enable ASPM and Clock Req

		 * from initialization to halt.

		/* Always enable ASPM without Clock Req

		 * from initialization to halt.

Update Radio OFF setting */

Set HW definition to determine if it supports ASPM. */

Not support ASPM. */

Support ASPM. */

ASPM value set by chipset. */

	/* toshiba aspm issue, toshiba will set aspm selfly

	 * so we should not set aspm in driver

When we set 0x01 to enable clk request. Set 0x0 to disable clk req.*/

Disable RTL8192SE ASPM & Disable Pci Bridge ASPM*/

Retrieve original configuration settings. */

for promising device will in L0 state after an I/O. */

Set corresponding value. */

4 Disable Pci Bridge ASPM */

/*Enable RTL8192SE ASPM & Enable Pci Bridge ASPM for

 *power saving We should follow the sequence to enable

 *RTL8192SE first then enable Pci Bridge ASPM

 *or the system will show bluescreen.

4 Enable Pci Bridge ASPM */

Get ASPM level (with/without Clock Req) */

_rtl_pci_platform_switch_device_pci_aspm(dev,*/

(priv->ndis_adapter.linkctrl_reg | ASPMLevel)); */

Read  Link Control Register */

Link Control Register */

Always enable ASPM & Clock Req. */

 here open is 4, wep/tkip is 8, aes is 12*/

 The most skb num is 6 */

 just for early mode now */

 we just use em for BE/BK/VI/VO */

			/* Some macaddr can't do early mode. like

			 * multicast/broadcast/no_qos data

 remove early mode header */

		/* for sw LPS, just after NULL skb send out, we can

		 * sure AP knows we are sleeping, we should not let

		 * rf sleep

 update tid tx pkt num */

info->status.rates[0].count = 1; */

 just set skb->cb to mapping addr for pci_unmap_single use */

 skb->cb may be 64 bit address */

/* inorder to receive 8K AMSDU we have set skb to

 * 9100bytes in init rx ring, but if this packet is

 * not a AMSDU, this large packet will be sent to

 * TCP/IP directly, this cause big packet ping fail

 * like: "ping -s 65507", so here we will realloc skb

 * based on the true size of packet, Mac80211

 * Probably will do it better, but does not yet.

 *

 * Some platform will fail when alloc skb sometimes.

 * in this condition, we will send the old skb to

 * mac80211 directly, this will not cause any other

 * issues, but only this packet will be lost by TCP/IP

hsisr interrupt handler*/

RX NORMAL PKT */

rx buffer descriptor */

if use new trx flow, it means wifi info */

rx pkt */

 rx descriptor */

 wait data to be filled by hardware */

		/* Reaching this point means: data is filled already

		 * AAAAAAttention !!!

		 * We can NOT access 'skb' before 'pci_unmap_single'

 get a new skb - if fail, old one will be reused */

 handle command packet here */

		/* NOTICE This can not be use for mac80211,

		 * this is done in mac80211 code,

		 * if done here sec DHCP will fail

		 * skb_trim(skb, skb->len - 4);

TODO*/

TODO*/

 static bcn for roaming */

 for sw lps */

 drop packets with errors or those too short */

read ISR: 4/8bytes */

Shared IRQ or HW disappeared */

<1> beacon related */

<2> Tx related */

<3> Rx related */

<4> fw related*/

<5> hsisr related*/

	/* Only 8188EE & 8723BE Supported.

	 * If Other ICs Come in, System will corrupt,

	 * because maps[RTL_IMR_HSISR_IND] & maps[MAC_HSISR]

	 * are not initialized

This is for new trx flow*/

NB: the beacon data buffer must be 32-bit aligned. */

	/*we just alloc 2 desc for beacon queue,

	 *because we just need first desc in hw beacon.

	/*BE queue need more descriptor for performance

	 *consideration or, No more tx desc will happen,

	 *and may cause mac80211 mem leakage.

2048/1024; */

64; */

Tx/Rx related var */

IBSS*/

AMPDU*/

set sane AMPDU defaults */

Retry Limit*/

QOS*/

task */

 alloc tx buffer desc for new trx flow*/

 alloc dma for this ring */

 init every desc in this ring */

 alloc dma for this ring */

 init every desc in this ring */

 alloc dma for this ring */

 init every desc in this ring */

 free every desc in this ring */

 free dma of this ring */

 free every desc in this ring */

 free dma of this ring */

	/* rxring_idx 0:RX_MPDU_QUEUE

	 * rxring_idx 1:RX_CMD_QUEUE

free rx rings */

free tx rings */

 rxring_idx 0:RX_MPDU_QUEUE */

 rxring_idx 1:RX_CMD_QUEUE */

		/* force the rx_ring[RX_MPDU_QUEUE/

		 * RX_CMD_QUEUE].idx to the first one

		 *new trx flow, do nothing

clear one entry*/

	/*after reset, release previous pending packet,

	 *and force the  tx idx to the first one

 maybe every tid should be checked */

 we just wait 1s for all queues */

should be after adapter start and interrupt enable. */

	/*should be before disable interrupt&adapter

	 *and will do it immediately.

 some things are not needed if firmware not available */

	/* PCI ID 0x10ec:0x8192 occurs for both RTL8192E, which uses

	 * r8192e_pci, and RTL8192SE, which uses this driver. If the

	 * revision ID is RTL_PCI_REVISION_ID_8192PCIE (0x01), then

	 * the correct driver is r8192e_pci, thus this routine should

	 * return false.

 use new trx flow */

find bus info */

find bridge info */

	/* some ARM have no bridge_pdev and will crash here

	 * so we should check if bridge_pdev is NULL

find bridge info if available */

 0x719 Bit5 is DMA64 bit fetch. */

proximity init here*/

 init cfg & intf_ops */

 MEM map */

shared mem start */

 Disable Clk Request */

 leave D3 mode */

 find adapter */

 Init IO handler */

like read eeprom and so on */

aspm */

 Init mac80211 sw */

 Init PCI sw */

 add for debug */

init rfkill */

 Init PCI sw */

 just in case driver is removed before firmware callback */

 remove form debug */

ieee80211_unregister_hw will call ops_stop */

deinit rfkill */

/***************************************

 * kernel pci power state define:

 * PCI_D0         ((pci_power_t __force) 0)

 * PCI_D1         ((pci_power_t __force) 1)

 * PCI_D2         ((pci_power_t __force) 2)

 * PCI_D3hot      ((pci_power_t __force) 3)

 * PCI_D3cold     ((pci_power_t __force) 4)

 * PCI_UNKNOWN    ((pci_power_t __force) 5)



 * This function is called when system

 * goes into suspend state mac80211 will

 * call rtl_mac_stop() from the mac80211

 * suspend function first, So there is

 * no need to call hw_disable here.

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 allocate memory for efuse_tbl and efuse_word */

  Check PG header for section num.  */

 extended header */

 set channel plan to world wide 13 */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 adhoc or ap mode */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 Band 1 */

 Band 2 */

 Band 3 */

 Band 3 */

 Band 3 */

 Band 4 */

 Band 4 */

mutex for start & stop is must here. */

	/* here is must, because adhoc do stop and start,

	 * but stop with RFOFF may cause something wrong,

	 * like adhoc TP

 if wowlan supported, DON'T clear connected info */

 reset sec info */

disable cck rate for p2p*/

 Free beacon resources */

	/*

	 *Note: We assume NL80211_IFTYPE_UNSPECIFIED as

	 *NO LINK for our hardware.

 1. unicast? multicast? or broadcast? */

 2. translate mask_from_os to mask_for_hw */

/******************************************************************************

 * pattern from OS uses 'ethenet frame', like this:



		   |    6   |    6   |   2  |     20    |  Variable  |	4  |

		   |--------+--------+------+-----------+------------+-----|

		   |    802.3 Mac Header    | IP Header | TCP Packet | FCS |

		   |   DA   |   SA   | Type |



 * BUT, packet catched by our HW is in '802.11 frame', begin from LLC,



	|     24 or 30      |    6   |   2  |     20    |  Variable  |  4  |

	|-------------------+--------+------+-----------+------------+-----|

	| 802.11 MAC Header |       LLC     | IP Header | TCP Packet | FCS |

			    | Others | Tpye |



 * Therefore, we need translate mask_from_OS to mask_to_hw.

 * We should left-shift mask by 6 bits, then set the new bit[0~5] = 0,

 * because new mask[0~5] means 'SA', but our HW packet begins from LLC,

 * bit[0~5] corresponds to first 6 Bytes in LLC, they just don't match.

 Shift 6 bits */

 Set bit 0-5 to zero */

		/* To get the wake up pattern from the mask.

		 * We do not count first 12 bits which means

		 * DA[6] and SA[6] in the pattern to match HW design.

 3. calculate crc */

 4. write crc & mask_for_hw to hw */

 to resolve s4 can not wake up*/

 to resolve s4 can not wake up*/

 BIT(2)*/

For IPS */

		/*

		 *although rfoff may not cause by ips, but we will

		 *check the reason in set_rf_power_state function

For LPS */

			/* sleep here is must, or we may recv the beacon and

			 * cause mac80211 into wrong ps state, this will cause

			 * power save nullfunc send fail, and further cause

			 * pkt loss, So sleep must quickly but not immediatly

			 * because that will cause nullfunc send by mac80211

			 * fail, and cause pkt loss, we have tested that 5mA

		/* brought up everything changes (changed == ~0) indicates first

		 * open, so use our default value instead of that of wiphy.

 channel_type is for 20&40M */

		/*

		 *because we should back channel to

		 *current_network.chan in in scanning,

		 *So if set_chan == current_network.chan

		 *we should set it.

		 *because mac80211 tell us wrong bw40

		 *info for cisco1253 bw20, so we modify

		 *it here based on UPPER & LOWER

 SC */

 SC */

wide channel */

 SC */

wide channel */

		/* In scanning, when before we offchannel we may send a ps=1

		 * null to AP, and then we may send a ps = 0 null to AP quickly,

		 * but first null may have caused AP to put lots of packet to

		 * hw tx buffer. These packets must be tx'd before we go off

		 * channel so we must delay more time to let AP flush these

		 * packets before going offchannel, or dis-association or

		 * delete BA will be caused by AP

TODO: we disable broadcast now, so enable here */

	/* if ssid not set to hw don't check bssid

	 * here just used for linked scanning, & linked

	 * and nolink check bssid is set in set network_type

disable cck rate for p2p*/

/*

 *for mac80211 VO = 0, VI = 1, BE = 2, BK = 3

 *for rtl819x  BE = 0, BK = 1, VI = 2, VO = 3

start hw beacon interrupt. */

rtlpriv->cfg->ops->set_bcn_reg(hw); */

TODO: reference to enum ieee80211_bss_change */

			/* we should reset all sec info & cam

			 * before set cam after linked, we should not

			 * reset in disassoc, that will cause tkip->wep

 reset sec info */

			/* reset cam to fix wep fail issue

 to avoid AP Disassociation caused by inactivity */

		/* For FW LPS:

		 * To tell firmware we have connected or disconnected

		/* just station need it, because ibss & ap mode will

			/*

			 * for cisco 1252 bw20 it's wrong

			 * if (ht_cap & IEEE80211_HT_CAP_SUP_WIDTH_20_40) {

			 *	mac->bw_40 = true;

			 * }

			/* for 5G must << RATE_6M_INDEX = 4,

 Dul mac */

 p2p will use 1/6/11 to scan */

 Dul mac */

 fix fwlps issue */

User disabled HW-crypto */

 To support IBSS, use sw-crypto for GTK */

 <1> get encryption alg */

		/* HW don't support CMAC encryption,

		 * use software CMAC encryption

 <2> get key_idx */

 <3> if pairwise key enable_hw_sec */

	/* wep always be group key, but there are two conditions:

	 * 1) wep only: is just for wep enc, in this condition

	 * rtlpriv->sec.pairwise_enc_algorithm == NO_ENCRYPTION

	 * will be true & enable_hw_sec will be set when wep

	 * ke setting.

	 * 2) wep(group) + AES(pairwise): some AP like cisco

	 * may use it, in this condition enable_hw_sec will not

	/* we must reset sec_info after lingked before set key,

 <4> set key based on cmd */

 Pairwise key with an assigned MAC address. */

set local buf about wep key. */

 group key */

 group key */

set local buf about group key. */

 pairwise key */

 Pairwise key with an assigned MAC address. */

set local buf about pairwise key. */

 <5> tell mac80211 do something: */

must use sw generate IV, or can not work !!!!. */

use software CCMP encryption for management frames (MFP) */

set local buf about wep key. */

		/*

		 *mac80211 will delete entrys one by one,

		 *so don't use rtl_cam_reset_all_entry

		 *or clear all entry here.

 wait 500ms for TX ack */

if Radio On return true here */

/* this function is called by mac80211 to flush tx buffer

 * before switch channle or power save, or tx buffer packet

 * maybe send after offchannel or rf sleep, this may cause

/*	Description:

 *		This routine deals with the Power Configuration CMD

 *		 parsing for RTL8723/RTL8188E Series IC.

 *	Assumption:

 *		We should follow specific format that was released from HW SD.

Read the value from system register*/

Write the value back to system register*/

this is wrong, fill_tx_cmddesc needs update*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

 This dump the current register page */

 polling bit, and No Write enable, and address  */

 Check polling bit is clear */

 write BB/MAC register */

printk("error write length=%d", len);*/

 idx 0: cmd */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2012  Realtek Corporation.*/

/*

 *Only these channels all allow active

 *scan on all world regulatory domains

/*

 *We enable active scan on these a case

 *by case basis by regulatory domain

 5G chan 36 - chan 64*/

 5G chan 100 - chan 165*/

 5G chan 149 - chan 165*/

				/*

				 *If 11d had a rule for this channel ensure

				 *we enable adhoc/beaconing if it allows us to

				 *use it. Note that we would have disabled it

				 *by applying our static world regdomain by

				 *default during init, prior to calling our

				 *regulatory_hint().

 Allows active scan scan on Ch 12 and 13 */

	/*

	 *If no country IE has been received always enable active scan

	 *on these channels. This is only done for specific regulatory SKUs

 CH 12 */

 CH 13 */

	/*

	 *If a country IE has been recieved check its rule for this

	 *channel first before enabling active scan. The passive scan

	 *would have been enforced by the initial processing of our

	 *custom regulatory domain.

 CH 12 */

 CH 13 */

/*

 *Always apply Radar/DFS rules on

 *freq range 5260 MHz - 5700 MHz

		/*

		 *We always enable radar detection/DFS on this

		 *frequency range. Additionally we also apply on

		 *this frequency range:

		 *- If STA mode does not yet have DFS supports disable

		 * active scanning

		 *- If adhoc mode does not support DFS yet then disable

		 * adhoc in the frequency.

		 *- If AP mode does not yet support radar detection/DFS

		 *do not allow AP mode

 We always apply this */

Error*/

 init country_code from efuse channel plan */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2010  Realtek Corporation.*/

 RF on */

 RF on */

 RF off */

 RF off */

 check rsvd page download OK. */

Auto Power Down to CHIP-off State*/

 HW Power on sequence*/

 HW Power on sequence */

 Enable FW Beamformer Interrupt */

low address*/

 ARFB table 9 for 11ac 5G 2SS */

 ARFB table 10 for 11ac 5G 1SS */

 ARFB table 11 for 11ac 24G 1SS */

 ARFB table 12 for 11ac 24G 1SS */

 0x420[7] = 0 , enable retry AMPDU in new AMPD not singal MPDU. */

Set retry limit*/

 Set Data / Response auto rate fallack retry count*/

 TBTT prohibit hold time. Suggested by designer TimChen. */

 AGGR_BK_TIME Reg51A 0x16 */

For Rx TP. Suggested by SD1 Richard. Added by tynli. 2010.04.12.*/

 Static MacID Mapping (cf. Used in MacIdDoStaticMapping) ---------- */

 ----------------------------------------------------------- */

 write reg 0x350 Bit[26]=1. Enable debug port. */

 read reg 0x350 Bit[25] if 1 : RX hang */

 read reg 0x350 Bit[24] if 1 : TX hang */

 1. Disable register write lock. 0x1c[1] = 0 */

 write 0xCC bit[2] = 1'b1 */

 2. Check and pause TRX DMA */

 write 0x284 bit[18] = 1'b1 */

 write 0x301 = 0xFF */

 Already pause before the function for another purpose. */

 3. reset TRX function */

 write 0x100 = 0x00 */

 4. Reset PCIe DMA. 0x3[0] = 0 */

 5. Enable PCIe DMA. 0x3[0] = 1 */

 6. enable TRX function */

 write 0x100 = 0xFF */

		/* We should init LLT & RQPN and

		 * prepare Tx/Rx descrptor address later

 7. Restore PCIe autoload down bit */

 8812AE does not has the defination. */

 write 0xF8 bit[17] = 1'b1 */

	/* In MAC power on state, BB and RF maybe in ON state,

	 * if we release TRx DMA here.

	 * it will cause packets to be started to Tx/Rx,

 || in_watchdog*/) {

 8. release TRX DMA */

 write 0x284 bit[18] = 1'b0 */

 write 0x301 = 0x00 */

 9. lock system register */

 write 0xCC bit[2] = 1'b0 */

low address*/

	/* stop PCIe DMA

	/* wait TXFF empty

	/* TX pause

	/* Wait TX State Machine OK

	/* stop RX DMA path

	 * 5.	0x284[18] = 1

	 * 6.	wait till 0x284[17] == 1

	/* reset BB

	/* Reset TRX MAC

	 * 8.	 0x100 = 0x00

	/* Disable MAC Security Engine

	/* To avoid DD-Tim Circuit hang

	/* Enable MAC Security Engine

	/* Enable TRX MAC

	 * 12.	 0x100 = 0xFF

	/* Enable BB

	/* beacon setting

	/* 16.	WMAC_LBK_BF_HD 0x45D[7:0]

	/* init LLT

	/* reallocate RQPN

	/* release Tx pause

	/* enable PCIE DMA

	 * 20. 0x301[7:0] = 0x00

 Re-download normal Fw. */

 Re-Initialize LLT table. */

 Check 0x98[10] */

 LTR idle latency, 0x90 for 144us */

 LTR active latency, 0x3c for 60us */

 Get Fw wake up reason. */

	/* Patch Pcie Rx DMA hang after S3/S4 several times.

 Prepare Tx/Rx Desc Hw address. */

 Release Pcie Interface Rx DMA to allow wake packet DMA. */

	/* Check wake up event.

	 * We should check wake packet bit before disable wowlan by H2C or

 Set the WoWLAN related function control disable. */

 Clear GPIO9 ISR */

 Release Pcie Interface Tx DMA. */

 Release Pcie RX DMA */

 BB OFDM RX Path_A */

 BB OFDM TX Path_A */

 BB CCK R/Rx Path_A */

 MCS support */

 RF Path_B HSSI OFF */

 RF Path_B Power Down */

 ADDA Path_B OFF */

 Combo (PCIe + USB) Card and PCIe-MF Card */

 1. Run LPS WL RFOFF flow */

		/* rtl_dbg(rtlpriv, COMP_INIT, DBG_LOUD,

		"=====>CardDisableRTL8812E,RTL8821A_NIC_LPS_ENTER_FLOW\n");

 2. 0x1F[7:0] = 0 */

 turn off RF */

 rtl_write_byte(rtlpriv, REG_RF_CTRL, 0x00); */

 Reset MCU. Suggested by Filen. */

 g.	MCUFWDL 0x80[1:0]=0	 */

 reset MCU ready status */

 HW card disable configuration. */

 HW card disable configuration. */

 Reset MCU IO Wrapper */

 7. RSV_CTRL 0x1C[7:0] = 0x0E */

 lock ISO/CLK/Power control register */

YP wowlan not considered*/

	/* Reset MAC/BB/RF status if it is not powered off

	 * before calling initialize Hw flow to prevent

	 * from interface and MAC status mismatch.

	/*SIC_Init(Adapter);

	if(rtlhal->AMPDUBurstMode)

	/* because last function modify RCR, so we update

	 * rcr var here, or TP will unstable for receive_config

	 * is wrong, RX RCR_ACRC32 will cause TP unstabel & Rx

	 * RCR_APP_ICV will cause mac80211 unassoc for cisco 1252

	rtlpci->receive_config = rtl_read_dword(rtlpriv, REG_RCR);

	rtlpci->receive_config &= ~(RCR_ACRC32 | RCR_AICV);

set wireless mode*/

 rtl8821ae_dm_check_txpower_tracking(hw); */

 rtl8821ae_phy_lc_calibrate(hw); */

 Release Rx DMA*/

 Release Rx DMA if needed*/

 Release Tx/Rx PCIE DMA if*/

WL_HWROF_EN.*/

 don't set REG_EDCA_BE_PARAM here because mac80211 will send pkt when scan */

 rtl_write_dword(rtlpriv, REG_EDCA_BE_PARAM, u4b_ac_param); */

clear it here first*/

	/* there are some C2H CMDs have been sent before

	system interrupt is enabled, e.g., C2H, CPWM.

	*So we need to clear all C2H events that FW has

	notified, otherwise FW won't schedule any commands anymore.

 rtl_write_byte(rtlpriv, REG_C2HEVT_CLEAR, 0); */

enable system interrupt*/

synchronize_irq(rtlpci->pdev->irq);*/

	/* Get the Capability pointer first,

	 * the Capability Pointer is located at

 point to next Capability */

 0: end of pci capability, 0xff: invalid value */

		/* Get the PM CSR (Control/Status Register),

		 * The PME_Status is located at PM Capatibility offset 5, bit 7

 PME event occured, clear the PM_Status by write 1 */

 Read it back to check */

 3 <1> Prepare for configuring wowlan related infomations */

 Clear Fw WoWLAN event. */

		/* Dynamically adjust Tx packet boundary

		 * for download reserved page packet.

 3 <2> Set Fw releted H2C cmd. */

 Set WoWLAN related security information. */

 Just enable AOAC related functions when we connect to AP. */

 Enable Fw Keep alive mechanism. */

 Enable disconnect decision control. */

 3 <3> Hw Configutations */

		/* Wait untill Rx DMA Finished before host sleep.

		 * FW Pause Rx DMA may happens when received packet doing dma.

 reset trx ring */

 prevent 8051 to be reset by PERST */

 For wowlan+LPS+32k. */

		/* Set the WoWLAN related function control enable.

 Stop Pcie Interface Tx DMA. */

 Wait for TxDMA idle. */

 after power off we should do iqk again */

FIX MERGE */

if (12 <= chnl && chnl <= 14)*/

YJ,add,120316*/

2.4G default value*/

5G default value*/

2.4G default value*/

bit sign number to 8 bit sign number*/

bit sign number to 8 bit sign number*/

5G default value*/

 4bit sign number to 8 bit sign number */

 4bit sign number to 8 bit sign number */

bit0~2*/

bit0~2*/

 0XBD[2] */

 0XBD[6] */

 0XBF[2] */

 0XBF[6] */

 0XBD[1:0] */

 0XBD[5:4] */

 0XBF[1:0] */

 0XBF[5:4] */

 [2.4G] Path A and B are both extPA */

 [5G] Path A and B are both extPA */

 [2.4G] Path A and B are both extLNA */

 [5G] Path A and B are both extLNA */

move BT_InitHalVars() to init_sw_vars*/

move BT_InitHalVars() to init_sw_vars*/

 need add */

board type*/

 set channel plan from efuse */

parse xtal*/

/*static void _rtl8821ae_hal_customized_behavior(struct ieee80211_hw *hw)

{

	struct rtl_priv *rtlpriv = rtl_priv(hw);

	struct rtl_pci_priv *pcipriv = rtl_pcipriv(hw);

	struct rtl_hal *rtlhal = rtl_hal(rtl_priv(hw));



	rtlpriv->ledctl.led_opendrain = true;

	switch (rtlhal->oem_id) {

	case RT_CID_819X_HP:

		rtlpriv->ledctl.led_opendrain = true;

		break;

	case RT_CID_819X_LENOVO:

	case RT_CID_DEFAULT:

	case RT_CID_TOSHIBA:

	case RT_CID_CCX:

	case RT_CID_819X_ACER:

	case RT_CID_WHQL:

	default:

		break;

	}

	rtl_dbg(rtlpriv, COMP_INIT, DBG_DMESG,

		"RT Customized ID: 0x%02X\n", rtlhal->oem_id);

hal_ReadRFType_8812A()*/

 _rtl8821ae_hal_customized_behavior(hw); */

 Mix , 2SS */

 Mix, 1SS */

 VHT */

not support ldpc, do not open*/

mac id owner*/

add by Gary for ac-series*/

	/* *(u32 *)& rate_mask = EF4BYTE((ratr_bitmap & 0x0fffffff) |

		/*rtl_dbg(rtlpriv, COMP_RATR,DBG_LOUD,

 0:Low, 1:High, 2:From Efuse. */

 0:Idle, 1:None-SCO, 2:SCO, 3:From Counter. */

 0:Disable BT control A-MPDU, 1:Enable BT control A-MPDU. */

 Turn on AAP (RCR:bit 0) for promicuous mode. */

 Set BIT0 */

 Clear BIT0 */

 WKFMCAMAddAllEntry8812 */

 Count the WFCAM entry start offset. */

 RX page size = 128 byte */

 We should start from the boundry */

 Enable Rx packet buffer access. */

		/* Set Rx packet buffer offset.

		 * RXBufer pointer increases 1,

		 * we can access 8 bytes in Rx packet buffer.

		 * CAM start offset (unit: 1 byte) =  index*WKFMCAM_SIZE

		 * RXBufer addr = (CAM start offset +

		 *                 per entry offset of a WKFM CAM)/8

		 *	* index: The index of the wake up frame mask

		 *	* WKFMCAM_SIZE: the total size of one WKFM CAM

		 *	* per entry offset of a WKFM CAM: Addr*4 bytes

 Set R/W start offset */

 Write to Rx packet buffer. */

 WKFM[127:0] */

 WKFM[127:0] */

 Disable Rx packet buffer access. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2010  Realtek Corporation.*/

Set 0x4c[21]*/

Clear 0x4c[23:22] and 0x4c[19:16]*/

SW control led0 on.*/

 Set to software control. */

 Set to software control. */

Open-drain arrangement for controlling the LED*/

 Set to software control.*/

Open-drain arrangement*/

Set GPIO[8] to input mode*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2010  Realtek Corporation.*/

/******************************************************************************

*                           TXPWR_LMT.TXT

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2010  Realtek Corporation.*/

 drivers should parse below arrays and do the corresponding actions */

 3 Power on  Array */

 3Radio off GPIO Array */

 3Card Disable Array */

 3 Card Enable Array */

 3Suspend Array */

 3 Resume Array */

 3HWPDN Array */

 3 Enter LPS */

 FW behavior */

 3 Leave LPS */

 FW behavior */

 drivers should parse below arrays and do the corresponding actions */

3 Power on  Array*/

3Radio off GPIO Array */

3Card Disable Array*/

3 Card Enable Array*/

RTL8821A_TRANS_CARDEMU_TO_PDN_STEPS*/

3Suspend Array*/

3 Resume Array*/

3HWPDN Array*/

3 Enter LPS */

FW behavior*/

3 Leave LPS */

FW behavior*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2010  Realtek Corporation.*/

 set bit12 as 1 for negative cfo */

 -33dB~0dB to 33dB ~ 0dB*/

 Record it for next packet processing */

		/* (1)Hardware does not provide RSSI for CCK

		 * (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

VGA_idx = 27~2*/

VGA_idx = 2~0*/

VGA_idx = 7~5*/

VGA_idx = 7~4*/

VGA_idx = 7~0*/

VGA_idx = 5~0*/

 8821 */

 (3) Get Signal Quality (EVM) */

 (1)Get RSSI for HT rate */

 we will judge RF RX path now. */

 Translate DBM to percentage. */

 Get Rx snr value in DB */

 Record Signal Strength for next packet */

		/* (2)PWDB, Average PWDB cacluated by

		 * hardware (for rate adaptive)

 (3)EVM of HT rate */

				/* Fill value in RFD, Get the first

				 * spatial stream only

	/* UI BSS List signal strength(in percentage),

	 * make it good looking, from 0~100.

HW antenna diversity*/

_rtl8821ae_smart_antenna(hw, pstatus); */

	/* hw will set status->decrypted true, if it finds the

	 * frame is open data frame or mgmt frame.

	 * So hw will not decryption robust managment frame

	 * for IEEE80211w but still set status->decrypted

	 * true, so here we should set it back to undecrypted

	 * for IEEE80211w frame, and mac80211 sw will help

	 * to decrypt it

	/* rate_idx: index of data rate into band's

	 * supported rates or MCS index if HT rates

	 * are use (RX_FLAG_HT)

 reserve 8 byte for AMPDU early mode */

 ptcb_desc->use_driver_rate = true; */

 tx report */

 if (rtlpriv->dm.useramask) { */

	/**

	 *beacon packet will only use the first

	 *descriptor defautly,and the own may not

	 *be cleared by the hardware

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2010  Realtek Corporation.*/

put arrays in dm.c*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2010  Realtek Corporation.*/

close ASPM for AMD defaultly */

	/**

	 * ASPM PS mode.

	 * 0 - Disable ASPM,

	 * 1 - Enable ASPM without Clock Req,

	 * 2 - Enable ASPM with Clock Req,

	 * 3 - Alwyas Enable ASPM with Clock Req,

	 * 4 - Always Enable ASPM without Clock Req.

	 * set defult to RTL8192CE:3 RTL8192E:2

Setting for PCI-E device */

Setting for PCI-E bridge */

	/**

	 * In Hw/Sw Radio Off situation.

	 * 0 - Default,

	 * 1 - From ASPM setting without low Mac Pwr,

	 * 2 - From ASPM setting with low Mac Pwr,

	 * 3 - Bus D3

	 * set default to RTL8192CE:0 RTL8192SE:2

	/**

	 * This setting works for those device with

	 * backdoor ASPM setting such as EPHY setting.

	 * 0 - Not support ASPM,

	 * 1 - Support ASPM,

	 * 2 - According to chipset.

InitializeVariables8812E*/

following 2 is for register 5G band, refer to _rtl_init_mac80211()*/

This bit controls the PS-Poll packet filter.*/

 for WOWLAN */

 for LPS & IPS */

	/* for ASPM, you can close aspm through

	 * set const_support_pciaspm = 0

 for firmware buf */

load normal firmware*/

load wowlan firmware*/

 get bt coexist status */

	.maps[RTL_IMR_BCNDOK8] = IMR_BCNDOK8,     */   
	.maps[RTL_IMR_TIMEOUT2] = IMR_TIMEOUT2,*/

	.maps[RTL_IMR_TIMEOUT1] = IMR_TIMEOUT1,*/

VHT hightest rate*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2010  Realtek Corporation.*/

 1. Before WoWLAN or After WOWLAN we need to re-download Fw. */

 2. Re-Init the variables about Fw related setting. */

u8 wait_writeh2c_limmit = 100;*/

wait until Fw read*/

boxcontent[0] &= ~(BIT(7));*/

boxcontent[0] |= (BIT(7));*/

 DTIM = (awake_intvl - 1) */

		/* hw->conf.ps_dtim_period or mac->vif->bss_conf.dtim_period

		 * is only used in swlps.

				/* Keep awake interval to 1 to prevent from

				 * decreasing coex performance

	/* parm[0]: bit0=0-->Disconnect, bit0=1-->Connect

	 *          bit1=0-->update Media Status to MACID

	 *          bit1=1-->update Media Status from MACID to MACID_End

	 * parm[1]: MACID, if this is INFRA_STA, MacID = 0

	 * parm[2]: MACID_End

 1: the period is controled by driver, 0: by Fw default */

 10 sec */

 page 0: beacon */

 page 1: ps-poll */

 page 2: null data */

 page 3: qos null data */

 page 4: BT qos null data */

 page 5~7 is for wowlan */

 page 5: ARP resp */

 page 6: H2C_REMOTE_WAKE_CTRL_INFO */

 page 7: Rsvd GTK extend memory (zero memory) */

 page 0: beacon */

 page 1: ps-poll */

 page 2: null data */

 page 3: Qos null data */

 page 4: BT Qos null data */

 page 5~7 is for wowlan */

 page 5: ARP resp */

 page 6: H2C_REMOTE_WAKE_CTRL_INFO */

 page 7: Rsvd GTK extend memory (zero memory) */

	/*---------------------------------------------------------

	 *			(1) beacon

	 *---------------------------------------------------------

	/*-------------------------------------------------------

	 *			(2) ps-poll

	 *--------------------------------------------------------

	/*--------------------------------------------------------

	 *			(3) null data

	 *---------------------------------------------------------

	/*---------------------------------------------------------

	 *			(4) Qos null data

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(5) BT Qos null data

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(6) ARP Resp

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(7) Remote Wake Ctrl

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(8) GTK Ext Memory

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(1) beacon

	 *---------------------------------------------------------

	/*-------------------------------------------------------

	 *			(2) ps-poll

	 *--------------------------------------------------------

	/*--------------------------------------------------------

	 *			(3) null data

	 *---------------------------------------------------------i

	/*---------------------------------------------------------

	 *			(4) Qos null data

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(5) Qos null data

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(6) ARP Resp

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(7) Remote Wake Ctrl

	 *----------------------------------------------------------

	/*---------------------------------------------------------

	 *			(8) GTK Ext Memory

	 *----------------------------------------------------------

Should check FW support p2p or not.*/

 update CTWindow value. */

 hw only support 2 set of NoA */

 To control the register setting for which NOA*/

 config P2P NoA Descriptor Register */

Get Current TSF value */

 rst p2p circuit */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2010  Realtek Corporation.*/

 0, -12.0dB */

 1, -11.5dB */

 2, -11.0dB */

 3, -10.5dB */

 4, -10.0dB */

 5, -9.5dB */

 6, -9.0dB */

 7, -8.5dB */

 8, -8.0dB */

 9, -7.5dB */

 10, -7.0dB */

 11, -6.5dB */

 12, -6.0dB */

 13, -5.5dB */

 14, -5.0dB */

 15, -4.5dB */

 16, -4.0dB */

 17, -3.5dB */

 18, -3.0dB */

 19, -2.5dB */

 20, -2.0dB */

 21, -1.5dB */

 22, -1.0dB */

 23, -0.5dB */

 24, +0  dB */

 25, +0.5dB */

 26, +1.0dB */

 27, +1.5dB */

 28, +2.0dB */

 29, +2.5dB */

 30, +3.0dB */

 31, +3.5dB */

 32, +4.0dB */

 33, +4.5dB */

 34, +5.0dB */

 35, +5.5dB */

 36, +6.0dB */

 0, -12.0dB */

 1, -11.5dB */

 2, -11.0dB */

 3, -10.5dB */

 4, -10.0dB */

 5, -9.5dB */

 6, -9.0dB */

 7, -8.5dB */

 8, -8.0dB */

 9, -7.5dB */

 10, -7.0dB */

 11, -6.5dB */

 12, -6.0dB */

 13, -5.5dB */

 14, -5.0dB */

 15, -4.5dB */

 16, -4.0dB */

 17, -3.5dB */

 18, -3.0dB */

 19, -2.5dB */

 20, -2.0dB */

 21, -1.5dB */

 22, -1.0dB */

 23, -0.5dB */

 24, +0  dB */

 25, +0.5dB */

 26, +1.0dB */

 27, +1.5dB */

 28, +2.0dB */

 29, +2.5dB */

 30, +3.0dB */

 31, +3.5dB */

 32, +4.0dB */

 33, +4.5dB */

 34, +5.0dB */

 35, +5.5dB */

 36, +6.0dB */

 0 UNKNOWN */

 1 REALTEK_90 */

 2 REALTEK_92SE */

 3 BROAD	*/

 4 RAL */

 5 ATH */

 6 CISCO */

 7 MARVELL */

 0 UNKNOWN */

 1 REALTEK_90 */

 2 REALTEK_92SE */

 3 BROAD */

 4 RAL */

 5 ATH */

 6 CISCO */

 7 MARV */

Initial Mix mode power tracking*/

Initial at Modify Tx Scaling Mode*/

Initial at Modify Tx Scaling Mode*/

 Determine the minimum RSSI  */

 Rx EVM*/

Rx SNR*/

Rx Cfo_Short*/

Rx Cfo_Tail*/

 AP & ADHOC & MESH */

 If associated entry is found */

 If associated entry is found */

 Indicate Rx signal strength to FW. */

add by Neil Chen to avoid PSD is processing*/

1 Boundary Decision*/

Recovery mechanism for IGI lower bound*/

Adjust initial gain by false alarm*/

			/* 2012.03.30 LukeLee: enable DIG before

			 * link but with very high thresholds

 Check initial gain by upper/lower bound*/

read OFDM FA counter*/

if(pDM_Odm->pBandType == ODM_BAND_2_4G)*/

reset OFDM FA coutner*/

 reset CCK FA counter*/

/*-----------------------------------------------------------------------------

 * Function:	odm_TxPwrTrackSetPwr88E()

 *

 * Overview:	88E change all channel tx power accordign to flag.

 *				OFDM & CCK are all different.

 *

 * Input:		NONE

 *

 * Output:		NONE

 *

 * Return:		NONE

 *

 * Revised History:

 *	When		Who		Remark

 *	04/23/2012	MHC		Create Version 0.

 *

 *---------------------------------------------------------------------------

+1.0dB*/

20130429 Mimic Modify High Rate BBSwing Limit.*/

CCK*/

+4dB*/

OFDM*/

+3dB*/

+2dB*/

HT*/

QPSK/BPSK*/

+5dB*/

16QAM*/

+3dB*/

64QAM*/

+2dB*/

QPSK/BPSK*/

+5dB*/

16QAM*/

+3dB*/

64QAM*/

+2dB*/

2 VHT*/

QPSK/BPSK*/

+5dB*/

16QAM*/

+3dB*/

64QAM*/

+2dB*/

64QAM*/

+1dB*/

256QAM*/

+0dB*/

256QAM*/

-1dB*/

QPSK/BPSK*/

+5dB*/

16QAM*/

+3dB*/

64QAM*/

+2dB*/

64QAM*/

+1dB*/

256QAM*/

+0dB*/

256QAM*/

-1dB*/

BBSwing higher then Limit*/

				/* CCK Follow the same compensation value

				 * as Path A

Set TxAGC Page C{};*/

 CCK Follow the same compensate value as Path A*/

Set TxAGC Page C{};*/

If TxAGC has changed, reset TxAGC again*/

Set TxAGC Page C{};*/

BBSwing higher then Limit*/

Set TxAGC Page E{};*/

Set TxAGC Page E{};*/

If TxAGC has changed, reset TxAGC again*/

Set TxAGC Page E{};*/

 OFDM BB Swing should be less than +3.0dB, */

 GetRightChnlPlaceforIQK(pHalData->CurrentChannel)*/

	/* 1. The following TWO tables decide

	 * the final index of OFDM/CCK swing table.

2. Initilization ( 7 steps in total )*/

0x42: RF Reg[15:10] 88E*/

 3. Initialize ThermalValues of RFCalibrateInfo*/

4. Calculate average thermal meter*/

Average times =  c.AverageThermalNum*/

Calculate Average ThermalValue after average enough times*/

	/*5. Calculate delta, delta_LCK, delta_IQK.

	 *"delta" here is used to determine whether

	 *thermal value changes or not.

	/* 6. If necessary, do LCK.

	 * Delta temperature is equal to or larger than 20 centigrade.

7. If necessary, move the index of swing table to adjust Tx power.*/

		/* "delta" here is used to record the

		 * absolute value of differrence.

7.1 The Final Power Index = BaseIndex + PowerIndexOffset*/

Record delta swing for mix mode power tracking*/

Record delta swing for mix mode power tracking*/

 Record delta swing for mix mode power tracking*/

Record delta swing for mix mode power tracking*/

				/*If Thermal value changes but lookup

				/* Power Index Diff between 2

				 * times Power Tracking

***Print BB Swing Base and Index Offset */

7.1 Handle boundary conditions of index.*/

Print Swing base & current*/

		/*7.2 Configure the Swing Table to adjust Tx Power.

		 *Always TRUE after Tx Power is adjusted by power tracking.

		 *

		 *2012/04/23 MH According to Luke's suggestion,

		 *we can not write BB digital

		 *to increase TX power. Otherwise, EVM will be bad.

		 *

		 *2012/04/25 MH Add for tx power tracking to set

		 *tx power in tx agc for 88E.

Low temperature*/

Record last time Power Tracking result as base.*/

Record last Power Tracking Thermal Value*/

	/*Delta temperature is equal to or larger than

/*-----------------------------------------------------------------------------

 * Function:	odm_TxPwrTrackSetPwr88E()

 *

 * Overview:	88E change all channel tx power accordign to flag.

 *				OFDM & CCK are all different.

 *

 * Input:		NONE

 *

 * Output:		NONE

 *

 * Return:		NONE

 *

 * Revised History:

 *	When		Who		Remark

 *	04/23/2012	MHC		Create Version 0.

 *

 *---------------------------------------------------------------------------

+1.0dB*/

 Mimic Modify High Rate BBSwing Limit.*/

CCK*/

+4dB*/

OFDM*/

+3dB*/

+2dB*/

HT*/

QPSK/BPSK*/

+5dB*/

16QAM*/

+3dB*/

64QAM*/

+2dB*/

2 VHT*/

QPSK/BPSK*/

+5dB*/

16QAM*/

+3dB*/

64QAM*/

+2dB*/

64QAM*/

+1dB*/

256QAM*/

+0dB*/

256QAM*/

-1dB*/

BBSwing higher then Limit*/

 CCK Follow the same compensate value as Path A*/

Set TxAGC Page C{};*/

 CCK Follow the same compensate value as Path A*/

Set TxAGC Page C{};*/

If TxAGC has changed, reset TxAGC again*/

Set TxAGC Page C{};*/

OFDM BB Swing should be less than +3.0dB */

 GetRightChnlPlaceforIQK(pHalData->CurrentChannel)*/

	/* 1. The following TWO tables decide the final

	 * index of OFDM/CCK swing table.

2. Initilization ( 7 steps in total )*/

0x42: RF Reg[15:10] 88E*/

 3. Initialize ThermalValues of RFCalibrateInfo*/

4. Calculate average thermal meter*/

Average times =  c.AverageThermalNum*/

Calculate Average ThermalValue after average enough times*/

	/*5. Calculate delta, delta_LCK, delta_IQK.

	 *"delta" here is used to determine whether

	 * thermal value changes or not.

 6. If necessary, do LCK.	*/

Delta temperature is equal to or larger than 20 centigrade.*/

7. If necessary, move the index of swing table to adjust Tx power.*/

		/*"delta" here is used to record the

		 * absolute value of differrence.

7.1 The Final Power Index = BaseIndex + PowerIndexOffset*/

Record delta swing for mix mode power tracking*/

 Record delta swing for mix mode power tracking*/

			/*If Thermal value changes but lookup table value

			 * still the same

Power Index Diff between 2 times Power Tracking*/

********Print BB Swing Base and Index Offset********/

7.1 Handle boundary conditions of index.*/

Print Swing base & current*/

7.2 Configure the Swing Table to adjust Tx Power.*/

Always TRUE after Tx Power is adjusted by power tracking.*/

		/*

		 *  2012/04/23 MH According to Luke's suggestion,

		 *  we can not write BB digital

		 *  to increase TX power. Otherwise, EVM will be bad.

		 *

		 *  2012/04/25 MH Add for tx power tracking to

		 *  set tx power in tx agc for 88E.

Low temperature*/

Record last time Power Tracking result as base.*/

Record last Power Tracking Thermal Value*/

	/* Delta temperature is equal to or larger than

	 * 20 centigrade (When threshold is 8).

Keep past Tx/Rx packet count for RT-to-RT EDCA turbo.*/

	/*===============================

	 * list paramter for different platform

	 *===============================

1.Enable ATC*/

1. Calculate CFO for path-A & path-B*/

2.No new packet*/

3.Average CFO*/

4.Avoid abnormal large CFO*/

CFO tracking by adjusting Xtal cap.*/

1.Dynamic Xtal threshold*/

 2.Calculate Xtal offset*/

3.Adjudt Crystal Cap.*/

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2009-2010  Realtek Corporation.*/

static bool _rtl8812ae_phy_config_mac_with_headerfile(struct ieee80211_hw *hw);*/

C cut Item12 ADC FIFO CLOCK*/

 0x8AC[11:10] = 2'b11*/

 0x8AC[11:10] = 2'b10*/

		/* <20120914, Kordan> A workaround to resolve

		 * 2480Mhz spur by setting ADC clock as 160M. (Asked by Binson)

0x8AC[9:8] = 2'b11*/

 0x8C4[30] = 1*/

0x8C4[30] = 1*/

0x8AC[9:8] = 2'b10*/

0x8C4[30] = 0*/

		/* <20120914, Kordan> A workaround to resolve

		 * 2480Mhz spur by setting ADC clock as 160M.

0x8AC[9:8] = 11*/

2.4G only*/

0x8AC[9:8] = 10*/

	/* 2009/06/17 MH We can not execute IO for power

	/* <20120809, Kordan> CCA OFF(when entering),

		asked by James to avoid reading the wrong value.

	/*<20120809, Kordan> CCA ON(when exiting),

	 * asked by James to avoid reading the wrong value.

	 *   <20120828, Kordan> Toggling CCA would affect RF 0x0, skip it!

 0xff; */

 0xff; */

 0 dB */

 -3 dB */

 -6 dB */

 -9 dB */

 0 dB */

 -3 dB */

 -6 dB */

 -9 dB */

 -3 dB */

 0 dB */

 -3 dB */

 -6 dB */

 -9 dB */

 0 dB */

 -3 dB */

 -6 dB */

 -9 dB */

 0xC6/C7[1:0] */

 0xC6/C7[3:2] */

 3 Path-A */

 0 dB */

 -3 dB */

 -6 dB */

 -9 dB */

 3 Path-B */

 0 dB */

 -3 dB */

 -6 dB */

 -9 dB */

 reconfig BB/RF according to wireless mode */

 BB & RF Config */

 0xCB0[15:12] = 0x7 (LNA_On)*/

 0xCB0[7:4] = 0x7 (PAPE_A)*/

0x834[1:0] = 0x1*/

 0xC1C[11:8] = 0 */

 0x82C[1:0] = 2b'00 */

 5G band */

0xCB0[15:12] = 0x5 (LNA_On)*/

0xCB0[7:4] = 0x4 (PAPE_A)*/

CCK_CHECK_en*/

		/* 2012/02/01, Sinda add registry to switch workaround

0x834[1:0] = 0x2*/

 AGC table select */

 0xC1C[11:8] = 1*/

 0x82C[1:0] = 2'b00 */

 0xC1C[31:21] */

 0xE1C[31:21] */

		/* <20121005, Kordan> When TxPowerTrack is ON,

		 *	we should take care of the change of BB swing.

		 *   That is, reset all info to trigger Tx power tracking.

 _GLNA */

 _GPA  */

 _ALNA */

 _APA  */

 _BT   */

 CUT ver */

 interface 2/2 */

 platform */

 interface 1/2 */

============== Value Defined Check ===============*/

QFN Type [15:12] and Cut Version [27:24] need to do value check*/

=============== Bit Defined Check ================*/

 We don't care [31:28] */

 BoardType is DONTCARE*/

GLNA*/

GPA*/

ALNA*/

APA*/

 BoardType of each RF path is matched*/

need efuse define*/

 ODM_ITRF_PCIE */

 ODM_WIN */

		/* In order not to disturb BT music when

		 * wifi init.(1ant NIC only)

RF Content: radio_a_txt*/

RF Content: radio_b_txt*/

 Get the exact value */

 Change the value to a relative value */

5G 20M 40M VHT and HT can cross reference*/

					/* obtain the base dBm values in 2.4G band

CCK*/

OFDM*/

HT IT*/

HT 2T*/

					/* obtain the base dBm values in 5G band

					 OFDM => 54M, HT 1T => MCS7, HT 2T => MCS15,

OFDM*/

HT 1T*/

HT 2T*/

VHT 1T*/

VHT 2T*/

 string is in decimal */

 RegEnableTxPowerLimit == 1 for 8812a & 8821a */

 RegEnableTxPowerLimit == 1 for 8812a & 8821a */

positive & negative condition*/

 positive condition*/

end*/

else*/

if , else if*/

negative condition*/

do nothing*/

don't need the hw_body*/

 skip the pair of expression*/

	/*workaround for wrong index combination to obtain tx power limit,

	/*workaround for wrong index combination to obtain tx power limit,

	 *HT on 80M will reference to HT on 40M

 BAND_ON_BOTH don't care temporarily */

 RegEnableTxPowerLimit == 1 for 8812a & 8821a */

 struct rtl_efuse *rtlefuse = rtl_efuse(rtl_priv(hw)); */

just in case, write txpower in DW, to reduce time*/

 0x848[25:22] = 0x6 */

 0x8ac[21,20,9:6,1,0]=8'b11100010 */

 0x8c4[30] = 1 */

[31] = 0 --> Page C*/

save MACBB default value*/

[31] = 0 --> Page C*/

Save AFE Parameters */

[31] = 0 --> Page C*/

Save RF Parameters*/

 ========MAC register setting========*/

[31] = 0 --> Page C*/

RX ante off*/

CCA off*/

 [31] = 1 --> Page C1 */

 [31] = 0 --> Page C */

 Path-A LOK */

[31] = 0 --> Page C*/

========Path-A AFE all on========*/

Port 0 DAC/ADC on*/

hardware 3-wire off*/

 LOK Setting */

 ====== LOK ====== */

DAC/ADC sampling rate (160 MHz)*/

 2. LoK RF Setting (at BW = 20M) */

 BW 20M */

 TX (X,Y) */

 RX (X,Y) */

 [0]:AGC_en, [15]:idac_K_Mask */

 [31] = 1 --> Page C1 */

 TX_TONE_idx[9:0], TxK_Mask[29] TX_Tone = 16 */

 RX_TONE_idx[9:0], RxK_Mask[29] */

 cb8[20] \B1N SI/PI \A8ϥ\CE\C5v\A4\C1\B5\B9 iqk_dpk module */

 Delay 10ms */

 [31] = 0 --> Page C */

 Load LOK */

 [31] = 1 --> Page C1 */

 3. TX RF Setting */

 [31] = 0 --> Page C */

 ODM_SetBBReg(pDM_Odm, 0xcb8, 0xf, 0xd); */

 TX (X,Y) */

 RX (X,Y) */

 [0]:AGC_en, [15]:idac_K_Mask */

 [31] = 1 --> Page C1 */

 TX_TONE_idx[9:0], TxK_Mask[29] TX_Tone = 16 */

 RX_TONE_idx[9:0], RxK_Mask[29] */

 TX_TONE_idx[9:0], TxK_Mask[29] TX_Tone = 16 */

 RX_TONE_idx[9:0], RxK_Mask[29] */

 cb8[20] \B1N SI/PI \A8ϥ\CE\C5v\A4\C1\B5\B9 iqk_dpk module */

 one shot */

 Delay 10ms */

 If 20ms No Result, then cal_retry++ */

 ============TXIQK Check============== */

 TX_TONE_idx[9:0], TxK_Mask[29] TX_Tone = 16 */

 RX_TONE_idx[9:0], RxK_Mask[29] */

 cb8[20] \B1N SI/PI \A8ϥ\CE\C5v\A4\C1\B5\B9 iqk_dpk module */

 one shot */

 Delay 10ms */

 If 20ms No Result, then cal_retry++ */

 ============TXIQK Check============== */

 TXK fail, Don't do RXK */

 TX VDF Disable */

 ====== RX mode TXK (RXK Step 1) ====== */

 [31] = 0 --> Page C */

 1. TX RF Setting */

 TX (X,Y) */

 RX (X,Y) */

 [0]:AGC_en, [15]:idac_K_Mask */

 [31] = 1 --> Page C1 */

 TX_TONE_idx[9:0], TxK_Mask[29] TX_Tone = 16 */

 RX_TONE_idx[9:0], RxK_Mask[29] */

 TX_TONE_idx[9:0], TxK_Mask[29] TX_Tone = 16 */

 RX_TONE_idx[9:0], RxK_Mask[29] */

 TX_TONE_idx[9:0], TxK_Mask[29] TX_Tone = 16 */

 RX_TONE_idx[9:0], RxK_Mask[29] */

 cb8[20] \B1N SI/PI \A8ϥ\CE\C5v\A4\C1\B5\B9 iqk_dpk module */

 one shot */

 Delay 10ms */

 If 20ms No Result, then cal_retry++ */

 ============TXIQK Check============== */

 If RX mode TXK fail, then take TXK Result */

 ====== RX IQK ====== */

 [31] = 0 --> Page C */

 1. RX RF Setting */

 [31] = 1 --> Page C1 */

 pDM_Odm->SupportInterface == 1 */

 RX VDF Enable */

 cb8[20] \B1N SI/PI \A8ϥ\CE\C5v\A4\C1\B5\B9 iqk_dpk module */

 one shot */

 Delay 10ms */

 If 20ms No Result, then cal_retry++ */

 ============RXIQK Check============== */

 TX VDF Enable */

 ====== RX mode TXK (RXK Step 1) ====== */

 [31] = 0 --> Page C */

 1. TX RF Setting */

 [0]:AGC_en, [15]:idac_K_Mask */

 [31] = 1 --> Page C1 */

 TX_TONE_idx[9:0], TxK_Mask[29] TX_Tone = 16 */

 RX_TONE_idx[9:0], RxK_Mask[29] */

 ODM_Write4Byte(pDM_Odm, 0xc8c, 0x68163e96); */

 cb8[20] \B1N SI/PI \A8ϥ\CE\C5v\A4\C1\B5\B9 iqk_dpk module */

 one shot */

 Delay 10ms */

 If 20ms No Result, then cal_retry++ */

 ============TXIQK Check============== */

 If RX mode TXK fail, then take TXK Result */

 ====== RX IQK ====== */

 [31] = 0 --> Page C */

 1. RX RF Setting */

 ODM_SetBBReg(pDM_Odm, 0xcb8, 0xF, 0xe); */

 [31] = 1 --> Page C1 */

 TX_TONE_idx[9:0], TxK_Mask[29] TX_Tone = 16 */

 RX_TONE_idx[9:0], RxK_Mask[29] */

pDM_Odm->SupportInterface == 1*/

 cb8[20] \B1N SI/PI \A8ϥ\CE\C5v\A4\C1\B5\B9 iqk_dpk module */

 one shot */

 Delay 10ms */

 If 20ms No Result, then cal_retry++ */

 ============RXIQK Check============== */

 [31] = 0 --> Page C */

 FillIQK Result */

 ? */

 [31] = 0 --> Page C */

 [31] = 0 --> Page C */

 Reload AFE Parameters */

 [31] = 1 --> Page C1 */

 [31] = 0 --> Page C */

 Reload MacBB Parameters */

 struct rtl_hal *rtlhal = rtl_hal(rtl_priv(hw)); */

 struct rtl_efuse *rtlefuse = rtl_efuse(rtl_priv(hw)); */

