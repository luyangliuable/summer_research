 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/drivers/video/mmp/hw/mmp_spi.c

 * using the spi in LCD controler for commands send

 *

 * Copyright (C) 2012 Marvell Technology Group Ltd.

 * Authors:  Guoqing Li <ligq@marvell.com>

 *          Lisa Du <cldu@marvell.com>

 *          Zhou Zhu <zzhu3@marvell.com>

/**

 * spi_write - write command to the SPI port

 * @spi:  the SPI device.

 * @data: can be 8/16/32-bit, MSB justified data to write.

 *

 * Wait bus transfer complete IRQ.

 * The caller is expected to perform the necessary locking.

 *

 * Returns:

 *   %-ETIMEDOUT	timeout occurred

 *   0			success

 clear ISR */

 SPI start to send command */

	/*

	 * After set mode it need a time to pull up the spi singals,

	 * or it would cause the wrong waveform when send spi command,

	 * especially on pxa910h

 set bus num to 5 to avoid conflict with other spi hosts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/drivers/video/mmp/hw/mmp_ctrl.c

 * Marvell MMP series Display Controller support

 *

 * Copyright (C) 2012 Marvell Technology Group Ltd.

 * Authors:  Guoqing Li <ligq@marvell.com>

 *          Lisa Du <cldu@marvell.com>

 *          Zhou Zhu <zzhu3@marvell.com>

 clear clock only */

 assert win supported */

 FIXME: assert addr supported */

 FIXME: assert videomode supported */

 polarity of timing signals */

 interface rb_swap setting */

 vsync ctrl */

 set pixclock div */

	/*

	 * LCD Global control(LCD_TOP_CTRL) should be configed before

	 * any other LCD registers read/write, or there maybe issues.

 disable all interrupts */

 Configure IOPAD: should be parallel only */

 Select path clock source */

	/*

	 * Configure default bits: vsync triggers DMA,

	 * power save enable, configure alpha registers to

	 * display 100% graphics, and set pixel command.

 Configure default register values */

	/*

	 * 1.enable multiple burst request in DMA AXI

	 * bus arbiter for faster read if not tv path;

	 * 2.enable horizontal smooth filter;

 init driver data */

 create/register platform device */

 get resources from platform data */

 get configs from platform data */

 allocate */

 map registers.*/

 request irq */

 get clock */

 init global regs */

 init pathes from machine info and register them */

 get from config and machine info */

 path init */

 SPDX-License-Identifier: GPL-2.0

 Raise SCL and SDA */

 Fix detection using BIOS tables */

&& conn == ddc_dvi*/ &&

 SPDX-License-Identifier: GPL-2.0-only

/* $Id: aty128fb.c,v 1.1.1.1.36.1 1999/12/11 09:03:05 Exp $

 *  linux/drivers/video/aty128fb.c -- Frame buffer device for ATI Rage128

 *

 *  Copyright (C) 1999-2003, Brad Douglas <brad@neruo.com>

 *  Copyright (C) 1999, Anthony Tong <atong@uiuc.edu>

 *

 *                Ani Joshi / Jeff Garzik

 *                      - Code cleanup

 *

 *                Michel Danzer <michdaen@iiic.ethz.ch>

 *                      - 15/16 bit cleanup

 *                      - fix panning

 *

 *                Benjamin Herrenschmidt

 *                      - pmac-specific PM stuff

 *			- various fixes & cleanups

 *

 *                Andreas Hundt <andi@convergence.de>

 *                      - FB_ACTIVATE fixes

 *

 *		  Paul Mackerras <paulus@samba.org>

 *			- Convert to new framebuffer API,

 *			  fix colormap setting at 16 bits/pixel (565)

 *

 *		  Paul Mundt 

 *		  	- PCI hotplug

 *

 *		  Jon Smirl <jonsmirl@yahoo.com>

 * 			- PCI ID update

 * 			- replace ROM BIOS search

 *

 *  Based off of Geert's atyfb.c and vfb.c.

 *

 *  TODO:

 *		- monitor sensing (DDC)

 *              - virtual display

 *		- other platform support (only ppc/x86 supported)

 *		- hardware cursor support

 *

 *    Please cc: your patches to brad@neruo.com.

/*

 * A special note of gratitude to ATI's devrel for providing documentation,

 * example code and hardware. Thanks Nitya.	-atong and brad

 CONFIG_BOOTX_TEXT */

 Debug flag */

 default mode */

 640x480, 60 Hz, Non-Interlaced (25.175 MHz dotclock) */

 CONFIG_PPC_PMAC */

/* default to 1024x768 at 75Hz on PPC - this will work

 1024x768, 75 Hz, Non-Interlaced (78.75 MHz dotclock) */

 CONFIG_PPC_PMAC */

 default modedb mode */

 640x480, 60 Hz, Non-Interlaced (25.172 MHz dotclock) */

 Chip generations */

 Must match above enum */

/*

 * PCI driver prototypes

 supported Rage128 chipsets */

 packed BIOS settings */

 !CONFIG_PPC */

 onboard memory information */

 various memory configurations */

 PLL constants */

 register values for a specific mode */

 PLL and others      */

 remapped mmio       */

 onboard video ram   */

 onboard mem info    */

 free slots in FIFO (64 max) */

 see aty128fb_setcolreg */

 used for TRUECOLOR */

    /*

     *  Internal routines

    /*

     * Functions to read from/write to the mmio registers

     *	- endian conversions may possibly be avoided by

     *    using the other register aperture. TODO.

    /*

     * Functions to read from/write to the pll registers

 return true when the PLL has completed an atomic update */

 should be more than enough

 reset engine?? */

 tell PLL to update */

 write to the scratch register to test r/w functionality */

 restore value

/*

 * Accelerator engine functions

 use old pio mode */

 3D scaler not spoken here */

 setup engine offset registers */

 setup engine pitch registers */

 set the default scissor register to max dimensions */

 set the drawing controls registers */

 clear the line drawing registers */

 set brush color registers */

 white */

 black */

 set source color registers */

 white */

 black */

 default write mask */

 Wait for all the writes to be completed before returning */

 convert depth values to their register representation */

/*

 * PLL informations retreival

 Fix from ATI for problem with Rage128 hardware not leaving ROM enabled */

 Very simple test to make sure it appeared */

 Look for the PCI data to check the ROM type */

	/* Check the PCI data signature. If it's wrong, we still assume a normal

	 * x86 ROM for now, until I've verified this works everywhere.

	 * The goal here is more to phase out Open Firmware images.

	 *

	 * Currently, we only look at the first PCI data, we could iteratre and

	 * deal with them all, and we should use fb_bios_start relative to start

	 * of image and not relative start of ROM, but so far, I never found a

	 * dual-image ATI card.

	 *

	 * typedef struct {

	 * 	u32	signature;	+ 0x00

	 * 	u16	vendor;		+ 0x04

	 * 	u16	device;		+ 0x06

	 * 	u16	reserved_1;	+ 0x08

	 * 	u16	dlen;		+ 0x0a

	 * 	u8	drevision;	+ 0x0c

	 * 	u8	class_hi;	+ 0x0d

	 * 	u16	class_lo;	+ 0x0e

	 * 	u16	ilen;		+ 0x10

	 * 	u16	irevision;	+ 0x12

	 * 	u8	type;		+ 0x14

	 * 	u8	indicator;	+ 0x15

	 * 	u16	reserved_2;	+ 0x16

	 * } pci_data_t;

	/* I simplified this code as we used to miss the signatures in

	 * a lot of case. It's now closer to XFree, we just don't check

	 * for signatures at all... Something better will have to be done

	 * if we end up having conflicts

 ndef(__sparc__) */

 fill in known card constants if pll_block is not available */

	/* instead of a table lookup, assume OF has properly

	 * setup the PLL registers and use their values

 from documentation */

 23000 on some cards? */

 same as mclk */

/*

 * CRTC programming

 Program the CRTC registers */

 Disable ATOMIC updating.  Is this the right place? */

 input */

	/* check for mode eligibility

 convert (and round up) and validate */

 convert depth into ATI register depth */

 convert register depth to bytes per pixel */

 make sure there is enough video ram for the mode */

 check to make sure h_total and v_total are in range */

 0x3f = max hwidth */

 0x1f = max vwidth */

 fill in pixel info */

 fun with masking */

 do conversions */

| LVDS_EN*/);

 register values for post dividers */

 select PPLL_DIV_3 */

 reset PLL */

 write the reference divider */

 write feedback and post dividers */

 no horiz crtc adjustment */

 clear the reset, just in case */

 in .01 MHz */

 convert units to 10 kHz */

 adjust pixel clock if necessary */

 now, find an acceptable divider */

 calculate feedback divider */

 round up to multiple of 8 */

/*

 * This actually sets the video mode.

 clear all registers that may interfere with mode setting */

 turn off i2c */

 turn off interrupts */

 turn video off */

 make aperture do 32 bit swapping */

 make aperture do 16 bit swapping */

 turn the video back on */

 CONFIG_BOOTX_TEXT */

/*

 *  encode/decode the User Defined Part of the Display

/*

 *  Pan or Wrap the Display

 Must be multiple of 8 and 3 */

/*

 *  Helper function to store a single palette register

 vmode and cmode deprecated */

 CONFIG_PPC_PMAC */

  MODULE  */

 Backlight */

 Get and convert the value */

 No locking of bl_curve since we read a single value */

/* We turn off the LCD completely instead of just dimming the backlight.

 * This provides greater power saving and the display is useless without

 * backlight anyway

 That one prevents proper CRT output with LCD off */

 Could be extended to Rage128Pro LVDS output too */

 CONFIG_FB_ATY128_BACKLIGHT */

/*

 *  Initialisation

 CONFIG_PPC_PMAC */

 Get the chip revision */

 range check to make sure */

 fill in info */

 Indicate sleep capability */

#if 0 /* Disable the early video resume hack for now as it's causing problems,

       * among others we now rely on the PCI core restoring the config space

       * for us, which isn't the case with that hack, and that code path causes

       * various things to be called with interrupts off while they shouldn't.

       * I'm leaving the code in as it can be useful for debugging purposes

 Find default mode */

			/* iMacs need that resolution

			 * PowerMac2,1 first r128 iMacs

			 * PowerMac2,2 summer 2000 iMacs

			 * PowerMac4,1 january 2001 iMacs "flower power"

 iBook SE */

 PowerBook Firewire (Pismo), iBook Dual USB */

 PowerBook Titanium */

 CONFIG_PPC_PMAC */

	var.accel_flags |= FB_ACCELF_TEXT;/* FIXME Will add accel later */

 setup the DAC the way we like it */

 turn off bus mastering, just in case */

 success! */

 register a card    ++ajoshi */

 Enable device in PCI config */

 We have the resources. Now virtualize them */

 Virtualize mmio region */

 Grab memory size from the card */

 How does this relate to the resource length from the PCI hardware?

 Virtualize the framebuffer */

 Set up info->fix */

 If we can't test scratch registers, something is seriously wrong */

 __sparc__ */

 CONFIG_PCI */

    /*

     *  Blank the display.

/*

 *  Set a single color register. The values supplied are already

 *  rounded down to the hardware's capabilities (according to the

 *  entries in the var structure). Return != 0 for invalid regno.

		/*

		 * With the 5-6-5 split of bits for RGB at 16 bits/pixel, we

		 * have 32 slots for R and B values but 64 slots for G values.

		 * Thus the R and B values go in one slot but the G value

		 * goes in a different slot, and we have to avoid disturbing

		 * the other fields in the slots we touch.

 out param: u32*	backlight value: 0 to 15 */

 in param: u32*	backlight value: 0 to 15 */

	/* Set the chip into the appropriate suspend mode (we use D2,

	 * D3 would require a complete re-initialisation of the chip,

	 * including PCI config registers, clocks, AGP configuration, ...)

	 *

	 * For resume, the core will have already brought us back to D0

		/* Make sure CRTC2 is reset. Remove that the day we decide to

		 * actually use CRTC2 and replace it with real code for disabling

		 * the CRTC2 output during sleep

 Set the power management mode to be PCI based */

 Use this magic value for now */

	/* We don't do anything but D2, for now we return 0, but

	 * we may want to change that. How do we know if the BIOS

	 * can properly take care of D3 ? Also, with swsusp, we

	 * know we'll be rebooted, ...

	/* HACK ALERT ! Once I find a proper way to say to each driver

	 * individually what will happen with it's PCI slot, I'll change

	 * that. On laptops, the AGP slot is just unclocked, so D2 is

	 * expected, while on desktops, the card is powered off

 CONFIG_PPC_PMAC */

 Make sure engine is reset */

 Blank display and LCD */

 Sleep */

	/* On powermac, we have hooks to properly suspend/resume AGP now,

	 * use them here. We'll ultimately need some generic support here,

	 * but the generic code isn't quite ready for that yet

 CONFIG_PPC_PMAC */

	/* We need a way to make sure the fbdev layer will _not_ touch the

	 * framebuffer before we put the chip to suspend state. On 2.4, I

	 * used dummy fb ops, 2.5 need proper support for this at the

	 * fbdev level

	/* PCI state will have been restored by the core, so

	 * we should be in D0 now with our config space fully

	 * restored

 Wakeup chip */

 Restore display & engine */

 Refresh */

 Unblank */

	/* On powermac, we have hooks to properly suspend/resume AGP now,

	 * use them here. We'll ultimately need some generic support here,

	 * but the generic code isn't quite ready for that yet

 CONFIG_PPC_PMAC */

 SPDX-License-Identifier: GPL-2.0

/*

 * Try to find monitor informations & EDID data out of the Open Firmware

 * device-tree. This also contains some "hacks" to work around a few machine

 * models with broken OF probing by hard-coding known EDIDs for some Mac

 * laptops internal LVDS panel. (XXX: not done yet)

	/* OF says "LCD" for DFP as well, we discriminate from the caller of this

	 * function

	/* We didn't find the EDID in the leaf node, some cards will actually

	 * put EDID1/EDID2 in the parent, look for these (typically M6 tipb).

	 * single-head cards have hdno == -1 and skip this step

				/* Maybe check for LVDS_GEN_CNTL here ? I need to check out

				 * what OF does when booting with lid closed

 CONFIG_PPC || CONFIG_SPARC */

	/*

	 * Some panels only work properly with some divider combinations

			/* Assume high active syncs for now until ATI tells me more... maybe we

			 * can probe register values here ?

 Mark panel infos valid */

/* Try to extract the connector informations from the BIOS. This

 * doesn't quite work yet, but it's output is still useful for

 * debugging

	/* Don't do much more at this point but displaying the data if

	 * DEBUG is enabled

/*

 * Probe physical connection of a CRT. This code comes from XFree

 * as well and currently is only implemented for the CRT DAC, the

 * code for the TVDAC is commented out in XFree as "non working"

    /* the monitor either wasn't connected or it is a non-DDC CRT.

     * try to probe it

/*

 * Parse the "monitor_layout" string if any. This code is mostly

 * copied from XFree's radeon driver

/*

 * Probe display on both primary and secondary card's connector (if any)

 * by various available techniques (i2c, OF device tree, BIOS, ...) and

 * try to retrieve EDID. The algorithm here comes from XFree's radeon

 * driver

		/*

		 * If user specified a monitor_layout option, use it instead

		 * of auto-detecting. Maybe we should only use this argument

		 * on the first radeon card probed or provide a way to specify

		 * a layout for each card ?

 CONFIG_FB_RADEON_I2C */

		/*

		 * Auto-detecting display type (well... trying to ...)

 DEBUG */

		/*

		 * Old single head cards

 CONFIG_PPC || CONFIG_SPARC */

 CONFIG_FB_RADEON_I2C */

		/*

		 * Check for cards with reversed DACs or TMDS controllers using BIOS

		/*

		 * Probe primary head (DVI or laptop internal panel)

 CONFIG_PPC || CONFIG_SPARC */

 CONFIG_FB_RADEON_I2C */

		/*

		 * Probe secondary head (mostly VGA, can be DVI)

 CONFIG_PPC || defined(CONFIG_SPARC) */

 CONFIG_FB_RADEON_I2C */

		/*

		 * If we only detected port 2, we swap them, if none detected,

		 * assume CRT (maybe fallback to old BIOS_SCRATCH stuff ? or look

		 * at FP registers ?)

		/*

		 * Deal with reversed TMDS

 Always keep internal TMDS as primary head */

/*

 * This function applies any arch/model/machine specific fixups

 * to the panel info. It may eventually alter EDID block as

 * well or whatever is specific to a given model and not probed

 * properly by the default code

	/*

	 * LCD Flat panels should use fixed dividers, we enfore that on

	 * PPC only for now...

 CONFIG_PPC */

/*

 * Fill up panel infos from a mode definition, either returned by the EDID

 * or from the default mode when we can't do any better

	/* We use a default of 200ms for the panel power delay, 

	 * I need to have a real schedule() instead of mdelay's in the panel code.

	 * we might be possible to figure out a better power delay either from

	 * MacOS OF tree or from the EDID block (proprietary extensions ?)

/*

 * Build the modedb for head 1 (head 2 will come later), check panel infos

 * from either BIOS or EDID, and pick up the default mode

	/*

	 * Fill default var first

	/*

	 * First check out what BIOS has to say

	/*

	 * Parse EDID detailed timings and deduce panel infos if any. Right now

	 * we only deal with first entry returned by parse_EDID, we may do better

	 * some day...

	/*

	 * Do any additional platform/arch fixups to the panel infos

	/*

	 * If we have some valid panel infos, we setup the default mode based on

	 * those

	/*

	 * Now build modedb from EDID

	/*

	 * Finally, if we don't have panel infos we need to figure some (or

	 * we try to read it from card), we try to pick a default mode

	 * and create some panel infos. Whatever...

	/*

	 * Apply passed-in mode option if any

 JS20 */

 JS21 */

 JS12/JS21/JS22 */

 QS21 */

 QS22 */

	/*

	 * Still no mode, let's pick up a default from the db

 get preferred timing */

 otherwise, get first mode in database */

		/* Make sure that whatever mode got selected is actually in the

		 * modelist or the kernel may die

/*

 * The code below is used to pick up a mode in check_var and

 * set_var. It should be made generic

/*

 * This is used when looking for modes. We assign a "distance" value

 * to a mode in the modedb depending how "close" it is from what we

 * are looking for.

 * Currently, we don't compare that much, we could do better but

 * the current fbcon doesn't quite mind ;)

/*

 * This function is called by check_var, it gets the passed in mode parameter, and

 * outputs a valid mode matching the passed-in one as closely as possible.

 * We need something better ultimately. Things like fbcon basically pass us out

 * current mode with xres/yres hacked, while things like XFree will actually

 * produce a full timing that we should respect as much as possible.

 *

 * This is why I added the FB_ACTIVATE_FIND that is used by fbcon. Without this,

 * we do a simple spec match, that's all. With it, we actually look for a mode in

 * either our monitor modedb or the vesa one if none

 *

 Start with a copy of the requested mode */

 Check if we have a modedb built from EDID */

 Check if we have a scaler allowing any fancy mode */

	/* If we have a scaler and are passed FB_ACTIVATE_TEST or

	 * FB_ACTIVATE_NOW, just do basic checking and return if the

	 * mode match

		/* We don't have an RMX, validate timings. If we don't have

	 	 * monspecs, we should be paranoid and not let use go above

		 * 640x480-60, but I assume userland knows what it's doing here

		 * (though I may be proven wrong...)

 Now look for a mode in the database */

			/* If the new mode is at least as good as the previous one,

			 * then it's our new candidate

 If we have a scaler, we allow any mode from the database */

 If we have found a match, return it */

 If we haven't and don't have a scaler, fail */

 SPDX-License-Identifier: GPL-2.0

/*

 *  ATI Mach64 Hardware Acceleration

    /*

     *  Generic Mach64 routines

 this is for DMA GUI engine! work in progress */

 reset engine */

 enable engine */

 ensure engine is not locked up by clearing any FIFO or */

 HOST errors */

 determine modal information from global mode structure */

 In 24 bpp, the engine is in 8 bpp - this requires that all */

 horizontal coordinates and widths must be adjusted */

 On GTC (RagePro), we need to reset the 3D engine before */

 Reset engine, enable, and clear any engine errors */

 Ensure that vga page pointers are set to zero - the upper */

 page pointers are set to 1 to handle overflows in the */

 lower page */

 ---- Setup standard engine context ---- */

 All GUI registers here are FIFOed - therefore, wait for */

 the appropriate number of empty FIFO entries */

 enable all registers to be loaded for context loads */

 set destination pitch to modal pitch, set offset to zero */

 zero these registers (set them to a known state) */

 set destination drawing attributes */

 set source pitch to modal pitch, set offset to zero */

 set these registers to a known state */

 set source pixel retrieving attributes */

 set host attributes */

 set pattern attributes */

 set scissors to modal size */

 set background color to minimum value (usually BLACK) */

 set foreground color to maximum value (usually WHITE) */

 set write mask to effect all pixel bits */

 set foreground mix to overpaint and background mix to */

 no-effect */

 set primary source pixel channel to foreground color */

 register */

 set compare functionality to false (no-effect on */

 destination) */

 set pixel depth */

 insure engine is idle before leaving */

    /*

     *  Accelerated functions

 perform rectangle fill */

 In 24 bpp, the engine is in 8 bpp - this requires that all */

 horizontal coordinates and widths must be adjusted */

 In 24 bpp, the engine is in 8 bpp - this requires that all */

 horizontal coordinates and widths must be adjusted */

 In 24 bpp, the engine is in 8 bpp - this requires that all */

 horizontal coordinates and widths must be adjusted */

		/*

		 * since Rage 3D IIc we have DP_HOST_TRIPLE_EN bit

		 * this hwaccelerated triple has an issue with not aligned data

 manual triple each pixel */

 next bit */

 next byte */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Backlight code for ATI Radeon based graphic cards

 *

 * Copyright (c) 2000 Ani Joshi <ajoshi@kernel.crashing.org>

 * Copyright (c) 2003 Benjamin Herrenschmidt <benh@kernel.crashing.org>

 * Copyright (c) 2006 Michael Hanselmann <linux-kernel@hansmi.ch>

 Get and convert the value */

 No locking of bl_curve since we read a single value */

	/* We turn off the LCD completely instead of just dimming the

	 * backlight. This provides some greater power saving and the display

	 * is useless without backlight anyway.

		/* Asic bug, when turning off LVDS_ON, we have to make sure

		   RADEON_PIXCLK_LVDS_ALWAYS_ON bit is off

	/* Pardon me for that hack... maybe some day we can figure out in what

	 * direction backlight should work on a given panel?

 SPDX-License-Identifier: GPL-2.0

/*

 *	drivers/video/aty/radeon_pm.c

 *

 *	Copyright 2003,2004 Ben. Herrenschmidt <benh@kernel.crashing.org>

 *	Copyright 2004 Paul Mackerras <paulus@samba.org>

 *

 *	This is the power management code for ATI radeon chipsets. It contains

 *	some dynamic clock PM enable/disable code similar to what X.org does,

 *	some D2-state (APM-style) sleep/wakeup code for use on some PowerMacs,

 *	and the necessary bits to re-initialize from scratch a few chips found

 *	on PowerMacs as well. The later could be extended to more platforms

 *	provided the memory controller configuration code be made more generic,

 *	and you can get the proper mode register commands for your RAMs.

 *	Those things may be found in the BIOS image...

/*

 * Workarounds for bugs in PC laptops:

 * - enable D2 sleep in some IBM Thinkpads

 * - special case for Samsung P35

 *

 * Whitelist by subsystem vendor/device because

 * its the subsystem vendor's fault!

 (arbitrary) Name */

 Subsystem Vendor ID */

 Subsystem Device ID */

 modify pm_mode */

 changed reinit_func */

 we found a device that requires workaround */

 not found */

 defined(CONFIG_PM) && defined(CONFIG_X86) */

 defined(CONFIG_PM) && defined(CONFIG_X86) */

 RV100 */

 R100 */

 RV350 (M10/M11) */

 for RV350/M10/M11, no delays are required. */

 Default */

 Force Core Clocks */

	/* XFree doesn't do that case, but we had this code from Apple and it

	 * seem necessary for proper suspend/resume operations

		/* Weird  ... X is _un_ forcing clocks here, I think it's

		 * doing backward. Imitate it for now...

 Hrm... same shit, X doesn't do that but I have to */

 R100 */

 M10/M11 */

		/* Some releases of vbios have set DISABLE_MC_MCLKA

		 * and DISABLE_MC_MCLKB bits in the vbios table.  Setting these

		 * bits will cause H/W hang when reading video memory with dynamic

		 * clocking enabled.

 If both bits are set, then check the active channels */

 R300 */

 Others */

	/* When DRI is enabled, setting DYN_STOP_LAT to zero can cause some R200

	 * to lockup randomly, leave them as set by BIOS.

RAGE_6::A11 A12 A12N1 A13, RV250::A11 A12, R300*/

 RV200::A11 A12 RV250::A11 A12 */

 RV200::A11 A12, RV250::A11 A12 */

 X doesn't do that ... hrm, we do on mobility && Macs */

 CONFIG_PPC */

 First */

 Set v2clk to 65MHz */

 Force Core Clocks */

 Force Display clocks	*/

 Switch off LVDS interface */

 Enable System power management */

 because both INPLL and OUTPLL take the same lock, that's why. */

	/* BUS_CNTL1__MOBILE_PLATORM_SEL setting is northbridge chipset

	 * and radeon chip dependent. Thus we only enable it on Mac for

	 * now (until we get more info on how to compute the correct

	 * value for various X86 bridges).

 AGP PLL control */

 440BX

 Solano2M */

 ACPI mode */

 because both INPLL and OUTPLL take the same lock, that's why. */

					DISP_PWR_MAN__AUTO_PWRUP_EN|

 D2 */

 disable display request & disable display */

 Setting up the DLL range for write */

 Check which channels are enabled */

 Power Up */

 This is the code for the Aluminium PowerBooks M10 / iBooks M11 */

 Disable refresh */

 Configure and enable M & SPLLs */

 CONFIG_PPC */

 Program the SDRAM */

 Restore memory refresh */

 Here come the desktop RV200 "QW" card */

 Disable refresh */

 Reset memory */

 The M6 */

 Disable refresh */

 Reset memory */

 DLL */

 MLCK / YCLK sync */

 Program Mode Register */

 Complete & re-enable refresh */

 And finally, the M7..M9 models, including M9+ (RV280) */

 Disable refresh */

 Reset memory */

 DLL */

 MLCK / YCLK sync */

 M6, M7 and M9 so far ... */

 M9+ (iBook G4) */

 Complete & re-enable refresh */

 Reset the PAD_CTLR_STRENGTH & wait for it to be stable */

 Switch SPLL to PCI source */

 Reconfigure SPLL charge pump, VCO gain, duty cycle */

 Set SPLL feedback divider */

 Power up SPLL */

 Release SPLL reset */

 Select SCLK source  */

 Reconfigure MPLL charge pump, VCO gain, duty cycle */

 Set MPLL feedback divider */

 Power up MPLL */

 Un-reset MPLL */

 Select source for MCLK */

	/* GACK ! I though we didn't have a DDA on Radeon's anymore

	 * here we rewrite with the same value, ... I suppose we clear

	 * some bits that are already clear ? Or maybe this 0x2ec

	 * register is something new ?

 Spread spectrum PLLL off */

 Spread spectrum disabled */

	/* The trace shows read & rewrite of LVDS_PLL_CNTL here with same

	 * value, not sure what for...

	/* GACK (bis) ! I though we didn't have a DDA on Radeon's anymore

	 * here we rewrite with the same value, ... I suppose we clear/set

	 * some bits that are already clear/set ?

 Enable spread spectrum */

 Enable LVDS interface */

 Enable LVDS_PLL */

 The trace reads that one here, waiting for something to settle down ? */

	/* Ugh ? SS_TST_DEC is supposed to be a read register in the

	 * R300 register spec at least...

	/* Reconfigure SPLL charge pump, VCO gain, duty cycle,

	 * probably useless since we already did it ...

	/* Restore our "reference" PPLL divider set by firmware

	 * according to proper spread spectrum calculations

 Switch pixel clock to firmware default div 0 */

 Restore a bunch of registers first */

 Hrm... */

 Reset the PAD CTLR */

	/* Some PLLs are Read & written identically in the trace here...

	 * I suppose it's actually to switch them all off & reset,

	 * let's assume off is what we want. I'm just doing that for all major PLLs now.

 Clear tiling, reset swappers */

	/* Some black magic with TV_DAC_CNTL, we should restore those from backups

	 * rather than hard coding...

 More registers restored */

 Hrmmm ... What is that ? */

 Restore Memory Controller configuration */

 Make sure CRTC's dont touch memory */

 Disable SDRAM refresh */

 Restore XTALIN routing (CLK_PIN_CNTL) */

 Switch MCLK, YCLK and SCLK PLLs to PCI source & force them ON */

 Force all clocks on in SCLK */

 Restore the M_SPLL_REF_FB_DIV, MPLL_AUX_CNTL and SPLL_AUX_CNTL values */

 Now restore the major PLLs settings, keeping them off & reset though */

 Restore MC DLL state and switch it off/reset too  */

 Switch MDLL off & reset */

	/* Setup some black magic bits in PLL_PWRMGT_CNTL. Hrm... we saved

	 * 0xa1100007... and MacOS writes 0xa1000007 ..

 Restore more stuffs */

 More PLL initial configuration */

 What for ? */

 a guess */

 Now we actually start MCLK and SCLK */

 Full reset sdrams, this also re-inits the MDLL */

 Fill palettes */

 Restore TMDS */

 Set LVDS registers but keep interface & pll down */

 Restore GPIOPAD state */

 write some stuff to the framebuffer... */

 Restore a few more things */

 Take care of spread spectrum & PPLLs now */

	/* GRRRR... I can't figure out the proper LVDS power sequence, and the

	 * code I have for blank/unblank doesn't quite work on some laptop models

	 * it seems ... Hrm. What I have here works most of the time ...

0x00f460d6*/);

0xfecfa666*/);

0x141555ff*/);

0xfecfa666*/);

0x141555ff*/);

0x00009249*/);

 Restore a bunch of registers first */

 Reset the PAD CTLR */

	/* Some PLLs are Read & written identically in the trace here...

	 * I suppose it's actually to switch them all off & reset,

	 * let's assume off is what we want. I'm just doing that for all major PLLs now.

 Clear tiling, reset swappers */

	/* Some black magic with TV_DAC_CNTL, we should restore those from backups

	 * rather than hard coding...

 MacOS sets that to 0 !!! */

 Disable SDRAM refresh */

 Restore XTALIN routing (CLK_PIN_CNTL) */

 Force MCLK to be PCI sourced and forced ON */

 Force SCLK to be PCI sourced with a bunch forced */

 Clear VCLK_ECP_CNTL & PIXCLKS_CNTL  */

 Setup MCLK_MISC, non dynamic mode */

 Set back the default clock dividers */

 PPLL and P2PLL default values & off */

 S and M PLLs are reset & off, configure them */

 Default values for MDLL ... fixme */

 XXXX

 Clear HTOTAL_CNTL & HTOTAL2_CNTL */

 All outputs off */

 Restore Memory Controller configuration */

 Now we actually start MCLK and SCLK */

 Full reset sdrams, this also re-inits the MDLL */

 Fill palettes */

 Restore TV stuff, make sure TV DAC is down */

	/* Restore GPIOS. MacOS does some magic here with one of the GPIO bits,

	 * possibly related to the weird PLL related workarounds and to the

	 * fact that CLK_PIN_CNTL is tweaked in ways I don't fully understand,

	 * but we keep things the simple way here

	/* Now do things with SCLK_MORE_CNTL. Force bits are already set, copy

	 * high bits from backup

 write some stuff to the framebuffer... */

0x3f */);

0x000081bb */);

0x0020300c*/

 Restore a few more things */

 Restore PPLL, spread spectrum & LVDS */

 Not ready yet */

 XXX use save_regs[35]? */

 XXX or save_regs[42]? */

 XXX ? */

 palette stuff and BIOS_1_SCRATCH... */

 0 */

 CONFIG_PPC */

	/* Set the chip into appropriate suspend mode (we use D2,

	 * D3 would require a compete re-initialization of the chip,

	 * including PCI config registers, clocks, AGP conf, ...)

		/* Disable dynamic power management of clocks for the

		 * duration of the suspend/resume process

 Save some registers */

		/* Prepare mobility chips for suspend.

 Program V2CLK */

 Disable IO PADs */

 Set low current */

 Prepare chip for power management */

 Reset the MDLL */

				/* because both INPLL and OUTPLL take the same

 Switch PCI power management to D2. */

		/* The chip seems to need us to whack the PM register

		 * repeatedly until it sticks. We do that -prior- to

		 * calling pci_set_power_state()

 Reset the SDRAM controller  */

 Restore some registers */

 Restore registers first */

 init sdram controller */

	/* For suspend-to-disk, we cheat here. We don't suspend anything and

	 * let fbcon continue drawing until we are all set. That shouldn't

	 * really cause any problem at this point, provided that the wakeup

	 * code knows that any state in memory may not match the HW

 about to take snapshot */

 before restoring snapshot */

 Make sure engine is reset */

 Blank display and LCD */

 Sleep */

	/* On powermac, we have hooks to properly suspend/resume AGP now,

	 * use them here. We'll ultimately need some generic support here,

	 * but the generic code isn't quite ready for that yet

 CONFIG_PPC_PMAC */

	/* If we support wakeup from poweroff, we save all regs we can including cfg

	 * space

		/* Always disable dynamic clocks or weird things are happening when

		 * the chip goes off (basically the panel doesn't shut down properly

		 * and we crash on wakeup),

		 * also, we want the saved regs context to have no dynamic clocks in

		 * it, we'll restore the dynamic clocks state on wakeup

 Switch off LVDS interface */

	/* If we support D2, we go to it (should be fixed later with a flag forcing

	 * D3 only for some laptops)

	/* PCI state will have been restored by the core, so

	 * we should be in D0 now with our config space fully

	 * restored

 Wakeup chip */

		/* If we support D2, try to resume... we should check what was our

		 * state though... (were we really in D2 state ?). Right now, this code

		 * is only enable on Macs so it's fine.

 Restore display & engine */

 Refresh */

 Unblank */

	/* On powermac, we have hooks to properly suspend/resume AGP now,

	 * use them here. We'll ultimately need some generic support here,

	 * but the generic code isn't quite ready for that yet

 CONFIG_PPC_PMAC */

 Check status of dynclk */

 CONFIG_PPC */

 CONFIG_PM */

 Enable/Disable dynamic clocks: TODO add sysfs access */

	/* Check if we can power manage on suspend/resume. We can do

	 * D2 on M6, M7 and M9, and we can resume from D3 cold a few other

	 * "Mac" cards, but that's all. We need more infos about what the

	 * BIOS does tho. Right now, all this PM stuff is pmac-only for that

	 * reason. --BenH

		/* We can restart Jasper (M10 chip in albooks), BlueStone (7500 chip

		 * in some desktop G4s), Via (M9+ chip on iBook G4) and

		 * Snowy (M11 chip on iBook G4 manufactured after July 2005)

 Not ready yet */

		/* If any of the above is set, we assume the machine can sleep/resume.

		 * It's a bit of a "shortcut" but will work fine. Ideally, we need infos

		 * from the platform about what happens to the chip...

		 * Now we tell the platform about our capability

#if 0 /* Disable the early video resume hack for now as it's causing problems, among

       * others we now rely on the PCI core restoring the config space for us, which

       * isn't the case with that hack, and that code path causes various things to

       * be called with interrupts off while they shouldn't. I'm leaving the code in

       * as it can be useful for debugging purposes

		/* Power down TV DAC, that saves a significant amount of power,

		 * we'll have something better once we actually have some TVOut

		 * support

 defined(CONFIG_PPC_PMAC) */

 defined(CONFIG_PM) */

 SPDX-License-Identifier: GPL-2.0

/* the accelerated functions here are patterned after the 

 * "ACCEL_MMIO" ifdef branches in XFree86

 * --dte

 *** Ugly workaround *** */

	/*

	 * On some platforms, the video memory is mapped at 0 in radeon chip space

	 * (like PPCs) by the firmware. X will always move it up so that it's seen

	 * by the chip to be at the same address as the PCI BAR.

	 * That means that when switching back from X, there is a mismatch between

	 * the offsets programmed into the engine. This means that potentially,

	 * accel operations done before radeonfb has a chance to re-init the engine

	 * will have incorrect offsets, and potentially trash system memory !

	 *

	 * The correct fix is for fbcon to never call any accel op before the engine

	 * has properly been re-initialized (by a call to set_var), but this is a

	 * complex fix. This workaround in the meantime, called before every accel

	 * operation, makes sure the offsets are in sync.

 contains, like GMC_DST_32BPP */

 i.e. GMC_DST_32BPP */

 FIXME */

 disable 3D engine */

		/* This needs to be double checked with ATI. Latest X driver

		 * completely "forgets" to set this register on < r3xx, and

		 * we used to just write 0 there... I'll keep the 0 and update

		 * that when we have sorted things out on X side.

	/* We re-read MC_FB_LOCATION from card as it can have been

	 * modified by XFree drivers (ouch !)

 clear line drawing regs */

 set brush color regs */

 set source color regs */

 default write mask */

/*

 *  ATI Frame Buffer Device Driver Core

 *

 *	Copyright (C) 2004  Alex Kern <alex.kern@gmx.de>

 *	Copyright (C) 1997-2001  Geert Uytterhoeven

 *	Copyright (C) 1998  Bernd Harries

 *	Copyright (C) 1998  Eddie C. Dost  (ecd@skynet.be)

 *

 *  This driver supports the following ATI graphics chips:

 *    - ATI Mach64

 *

 *  To do: add support for

 *    - ATI Rage128 (from aty128fb.c)

 *    - ATI Radeon (from radeonfb.c)

 *

 *  This driver is partly based on the PowerMac console driver:

 *

 *	Copyright (C) 1996 Paul Mackerras

 *

 *  and on the PowerMac ATI/mach64 display driver:

 *

 *	Copyright (C) 1997 Michael AK Tesch

 *

 *	      with work by Jon Howell

 *			   Harry AC Eaton

 *			   Anthony Tong <atong@uiuc.edu>

 *

 *  Generic LCD support written by Daniel Mantione, ported from 2.4.20 by Alex Kern

 *  Many Thanks to Ville Syrjälä for patches and fixing nasting 16 bit color bug.

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License. See the file COPYING in the main directory of this archive for

 *  more details.

 *

 *  Many thanks to Nitya from ATI devrel for support and patience !

/******************************************************************************



  TODO:



    - cursor support on all cards and all ramdacs.

    - cursor parameters controlable via ioctl()s.

    - guess PLL and MCLK based on the original PLL register values initialized

      by Open Firmware (if they are initialized). BIOS is done



    (Anyone with Mac to help with this?)



/*

 * Debug flags.

#define DEBUG*/

 Make sure n * PAGE_SIZE is protected at end of Aperture for GUI-regs */

  - must be large enough to catch all GUI-Regs   */

  - must be aligned to a PAGE boundary           */

 FIXME: remove the FAIL definition */

 EXT_VERT_STRETCH */

 write addr byte */

 write the register value */

 write addr byte */

 read the register value */

#else /* defined(CONFIG_PMAC_BACKLIGHT) || defined(CONFIG_FB_ATY_BACKLIGHT) ||

#endif /* defined(CONFIG_PMAC_BACKLIGHT) || defined(CONFIG_FB_ATY_BACKLIGHT) ||

/*

 * ATIReduceRatio --

 *

 * Reduce a fraction by factoring out the largest common divider of the

 * fraction's numerator and denominator.

/*

 * The Hardware parameters for each card

/*

 * Frame buffer device API

/*

 * Internal routines

/*

 * Interface used by the world

 640x480, 60 Hz, Non-Interlaced (25.175 MHz dotclock) */

 640x480 @ 60 Hz, 31.5 kHz hsync */

 top -> down is an evolution of mach64 chipset, any corrections? */

 FIXME what is this chip? */

 make sets shorter */

#define ATI_CHIP_264GTDVD  ?*/

 Mach64 GX */

 CONFIG_FB_ATY_GX */

 FIXME what is this chip? */

 CONFIG_FB_ATY_CT */

/*

 * Last page of 8 MB (4 MB on ISA) aperture is MMIO,

 * unless the auxiliary register aperture is used.

 CONFIG_FB_ATY_GX */

 CONFIG_FB_ATY_CT */

 CONFIG_FB_ATY_GX */

 CONFIG_FB_ATY_CT */

/*

 * Apple monitor sense

 drive outputs high */

 turn off outputs */

 get primary sense value */

 drive each sense line low in turn and collect the other 2 */

 drive A low */

 drive A high again */

 drive B low */

 drive B high again */

 drive C low */

 turn off outputs */

 defined(CONFIG_PPC) */

 ------------------------------------------------------------------------- */

/*

 * CRTC programming

 switch to non shadow registers */

 save stretching */

 switch to shadow registers */

 CONFIG_FB_ATY_GENERIC_LCD */

 stop CRTC */

 update non-shadow registers first */

 temporarily disable stretching */

 turn off CRT */

 after setting the CRTC registers we should set the LCD registers. */

 switch to shadow registers */

 restore CRTC selection & shadow state and enable stretching */

 CONFIG_FB_ATY_GENERIC_LCD */

 input */

 convert (and round up) and validate */

VCLK_DAC_PM_EN | USE_SHADOWED_VEND |*/

			/*

			 * We cannot display the mode on the LCD. If the CRT is

			 * enabled we can turn off the LCD.

			 * If the CRT is off, it isn't a good idea to switch it

			 * on; we don't know if one is connected. So it's better

			 * to fail then.

aty_st_lcd(LCD_GEN_CNTL, crtc->lcd_gen_cntl, par);*/

		/* bpp -> bytespp, 1,4 -> 0; 8 -> 2; 15,16 -> 1; 24 -> 6; 32 -> 5

		const u8 DFP_h_sync_dly_LT[] = { 0, 2, 1, 6, 5 };

		/*

		 * This is horror! When we simulate, say 640x480 on an 800x600

		 * LCD monitor, the CRTC should be programmed 800x600 values for

		 * the non visible part, but 640x480 for the visible part.

		 * This code has been tested on a laptop with it's 1400x1050 LCD

		 * monitor and a conventional monitor both switched on.

		 * Tested modes: 1280x1024, 1152x864, 1024x768, 800x600,

		 * works with little glitches also with DOUBLESCAN modes

DFP_h_sync_dly[ ( bpp + 1 ) / 3 ]; */par->lcd_hsync_dly;

 CONFIG_FB_ATY_GENERIC_LCD */

FAIL_MAX("h_sync_wid too large", h_sync_wid, 0x1f);*/

FAIL_MAX("v_sync_wid too large", v_sync_wid, 0x1f);*/

 output */

 crtc->gen_cntl = aty_ld_le32(CRTC_GEN_CNTL, par) & CRTC_PRESERVED_MASK; */

 Enable doublescan mode if requested */

 Enable interlaced mode if requested */

TVCLK_PM_EN | VCLK_DAC_PM_EN |*/

 | LOCK_8DOT*/;

 MOBILITY M1 tested, FIXME: LT */

				/*

				 * The horizontal blender misbehaves when

				 * HDisplay is less than a certain threshold

				 * (440 for a 1024-wide panel).  It doesn't

				 * stretch such modes enough.  Use pixel

				 * replication instead of blending to stretch

				 * modes that can be made to exactly fit the

				 * panel width.  The undocumented "NoLCDBlend"

				 * option allows the pixel-replicated mode to

				 * be slightly wider or narrower than the

				 * panel width.  It also causes a mode that is

				 * exactly half as wide as the panel to be

				 * pixel-replicated, rather than blended.

 Out of the do { ... } while (0) */

			/*

			 * Don't use vertical blending if the mode is too wide

			 * or not vertically stretched.

 copy to shadow crtc */

 CONFIG_FB_ATY_GENERIC_LCD */

 FIXME: display FIFO low watermark values */

 input */

 convert */

 RGB 555 */

 RGB 565 */

 RGB 888 */

 ARGB 8888 */

 output */

	/*

	 * In double scan mode, the vertical parameters are doubled,

	 * so we need to halve them to get the right values.

	 * In interlaced mode the values are already correct,

	 * so no correction is necessary.

 ------------------------------------------------------------------------- */

 hack */

 DEBUG */

 Don't forget MEM_CNTL */

 GT */

 Initialize the graphics engine */

 CONFIG_BOOTX_TEXT */

 dump non shadow CRTC, pll, LCD registers */

 CRTC registers */

 PLL registers */

 CONFIG_FB_ATY_CT */

 LCD registers */

 CONFIG_FB_ATY_GENERIC_LCD */

 DEBUG */

/*

 * Open/Release the frame buffer device

 clear interrupt */

 clear interrupt */

 enable interrupt */

 re-enable interrupt */

 disable interrupt */

		/*

		 * Now reset the default display config, we have

		 * no idea what the program(s) which mmap'd the

		 * chip did to the configuration, nor whether it

		 * restored it correctly.

/*

 * Pan or Wrap the Display

 *

 * This call looks only at xoffset, yoffset and the FB_VMODE_YWRAP flag

 ATY\00 */

 ATY\01 */

 1,2,3,4,8 */

 2 or 4 */

 1,2,3,4,8 */

 1,2,3,4,6,8,12 */

 0-16383 */

 0-15 */

 0-7 */

 0-2047 */

 0-2047 */

 ATY\02 */

 ATY\03 */

 __sparc__ */

aty_calc_pll_ct(info, &pll->ct);*/

 DEBUG && CONFIG_FB_ATY_CT */

 VM_IO | VM_DONTEXPAND | VM_DONTDUMP are set by remap_pfn_range() */

 propagate off changes */

 Each page, see which map applies */

 __sparc__ */

/* Power management routines. Those are used for PowerBook sleep.

 Sleep */

 Wakeup */

 CONFIG_PPC_PMAC */

 Idle & reset engine */

 Blank display and LCD */

	/*

	 * Because we may change PCI D state ourselves, we need to

	 * first save the config space content so the core can

	 * restore it properly on resume.

 Set chip to "suspend" mode */

	/*

	 * PCI state will have been restored by the core, so

	 * we should be in D0 now with our config space fully

	 * restored

 Restore display */

 Refresh */

 Unblank */

 CONFIG_PM_SLEEP */

  defined(CONFIG_PCI) */

 Backlight */

 Get and convert the value */

 No locking of bl_curve since we read a single value */

 CONFIG_PCI */

 CONFIG_FB_ATY_BACKLIGHT */

/*

 * Initialisation

 defined(__i386__) && defined(CONFIG_FB_ATY_GENERIC_LCD) */

 FIXME: clockchip/RAMDAC probing? */

 CONFIG_FB_ATY_GX */

 for many chips, the mclk is 67 MHz for SDRAM, 63 MHz otherwise */

 Mobility + 32bit memory interface need halved XCLK. */

	/*

	 * The Apple iBook1 uses non-standard memory frequencies.

	 * We detect it and set the frequency manually.

 Allow command line to override clocks. */

 CONFIG_FB_ATY_CT */

 save previous video mode */

 0xF used instead of MEM_SIZE_ALIAS */

	/*

	 * Reg Block 0 (CT-compatible block) is at mmio_start

	 * Reg Block 1 (multimedia extensions) is at mmio_start - 0x400

 GT */

	/*

	 * Disable register access through the linear aperture

	 * if the auxiliary aperture is used so we can access

	 * the full 8 MB of video RAM on 8 MB boards.

		/*

		 * Only the ioremap_wc()'d area will get WC here

		 * since ioremap_uc() was used on the entire PCI BAR.

		/*

		 * these bits let the 101 powerbook

		 * wake up from sleep -- paulus

		/*

		 * FIXME: The NVRAM stuff should be put in a Mac-specific file,

		 *        as it applies to all Mac video cards

 G3 PowerBook with 1024x768 LCD */

 iBook with 800x600 LCD */

 !CONFIG_PPC */

 CONFIG_FB_ATY_CT */

 restore video mode */

 CONFIG_ATARI && !MODULE */

/*

 * Blank the display.

/*

 * Set a single color register. The values supplied are already

 * rounded down to the hardware's capabilities (according to the

 * entries in the var structure). Return != 0 for invalid regno.

 * !! 4 & 8 =  PSEUDO, > 8 = DIRECTCOLOR

 DAC_CNTL | 0x2 turns off the extra brightness for gt */

	/*

	 * Map memory-mapped registers.

	/*

	 * Map in big-endian aperture.

	/*

	 * Figure mmap addresses from PCI config space.

	 * Split Framebuffer in big- and little-endian halfs.

 nothing */ ;

		/*

		 * Map the framebuffer a second time, this time without

		 * the braindead _PAGE_IE setting. This is used by the

		 * fixed Xserver, but we need to maintain the old mapping

		 * to stay compatible with older ones...

		/*

		 * Here comes the old framebuffer mapping with _PAGE_IE

		 * set for the big endian half of the framebuffer...

		/*

		 * Fix PROMs idea of MEM_CNTL settings...

 Turn off all undocumented bits. */

		/*

		 * Read the PLL to figure actual Refresh Rate.

 DPRINTK("CLOCK_CNTL %02x\n", clock_cntl); */

		/*

		 * PLL Reference Divider M:

		/*

		 * PLL Feedback Divider N (Dependent on CLOCK_CNTL):

		/*

		 * PLL Post Divider P (Dependent on CLOCK_CNTL):

		/*

		 * PLL Divider Q:

		/*

		 * Target Frequency:

		 *

		 *      T * M

		 * Q = -------

		 *      2 * R

		 *

		 * where R is XTALIN (= 14318 or 29498 kHz).

 __sparc__ */

	/*

	 * To support an LCD panel, we should know it's dimensions and

	 *  it's desired pixel clock.

	 * There are two ways to do it:

	 *  - Check the startup video mode and calculate the panel

	 *    size from it. This is unreliable.

	 *  - Read it from the driver information table in the video BIOS.

 Address of driver information table is at offset 0x78. */

 Check for the driver information table signature. */

 Rage LT pro */

 Rage mobility */

 Rage XC */

 Rage XL */

		/*

		 * The most important information is the panel size at

		 * offset 25 and 27, but there's some other nice information

		 * which we print to the screen.

		/*

		 * We now need to determine the crtc parameters for the

		 * LCD monitor. This is tricky, because they are not stored

		 * individually in the BIOS. Instead, the BIOS contains a

		 * table of display modes that work for this monitor.

		 *

		 * The idea is that we search for a mode of the same dimensions

		 * as the dimensions of the LCD monitor. Say our LCD monitor

		 * is 800x600 pixels, we search for a 800x600 monitor.

		 * The CRTC parameters we find here are the ones that we need

		 * to use to simulate other resolutions on the LCD screen.

 To do: Switch to CRT if possible. */

 CONFIG_FB_ATY_GENERIC_LCD */

 The BIOS starts with 0xaa55. */

 check for frequncy table */

 __i386__ */

	/*

	 * By using strong UC we force the MTRR to never have an

	 * effect on the MMIO region on both non-PAT and PAT systems.

	/*

	 * Enable memory-space accesses using config-space

	 * command register.

 Use the big-endian aperture */

 Map in frame buffer */

	/*

	 * The framebuffer is not always 8 MiB, that's just the size of the

	 * PCI BAR. We temporarily abuse smem_len here to store the size

	 * of the BAR. aty_init() will later correct it to match the actual

	 * framebuffer size.

	 *

	 * On devices that don't have the auxiliary register aperture, the

	 * registers are housed at the top end of the framebuffer PCI BAR.

	 * aty_fudge_framebuffer_len() is used to reduce smem_len to not

	 * overlap with the registers.

 according to ATI, we should use clock 3 for acelerated mode */

 !__sparc__ */

 Enable device in PCI config */

 Find which resource to use */

 Reserve space */

 Allocate framebuffer */

 Setup "info" structure */

 Init chip & register framebuffer */

	/*

	 * Add /dev/fb mmap values.

 __sparc__ */

 CONFIG_PCI */

 something invalid */

		/*

		 * Map the video memory (physical address given)

		 * to somewhere in the kernel address space.

 Fake! */

 Fake! */

  */

 Medusa ST-IO ISA Adapter etc. */

  */

 Panther 1 ISA Adapter (Gerald) */

 Fake pci_id for correct_chipset() */

 CONFIG_ATARI */

 restore video mode */

 CONFIG_FB_ATY_GX */

 CONFIG_FB_ATY_CT */

 CONFIG_PCI */

		/*

		 * Why do we need this silly Mach64 argument?

		 * We are already here because of mach64= so its redundant.

  MODULE  */

	/*

	 * HP OmniBook 500's BIOS doesn't like the state of the

	 * hardware after atyfb has been used. Restore the hardware

	 * to the original state to allow successful reboots.

 SPDX-License-Identifier: GPL-2.0

/*

 *  ATI Mach64 CT/VT/GT/LT Support

 write addr byte */

 read the register value */

 write addr byte */

 write the register value */

/*

 * by Daniel Mantione

 *                                  <daniel.mantione@freepascal.org>

 *

 *

 * ATI Mach64 CT clock synthesis description.

 *

 * All clocks on the Mach64 can be calculated using the same principle:

 *

 *       XTALIN * x * FB_DIV

 * CLK = ----------------------

 *       PLL_REF_DIV * POST_DIV

 *

 * XTALIN is a fixed speed clock. Common speeds are 14.31 MHz and 29.50 MHz.

 * PLL_REF_DIV can be set by the user, but is the same for all clocks.

 * FB_DIV can be set by the user for each clock individually, it should be set

 * between 128 and 255, the chip will generate a bad clock signal for too low

 * values.

 * x depends on the type of clock; usually it is 2, but for the MCLK it can also

 * be set to 4.

 * POST_DIV can be set by the user for each clock individually, Possible values

 * are 1,2,4,8 and for some clocks other values are available too.

 * CLK is of course the clock speed that is generated.

 *

 * The Mach64 has these clocks:

 *

 * MCLK			The clock rate of the chip

 * XCLK			The clock rate of the on-chip memory

 * VCLK0		First pixel clock of first CRT controller

 * VCLK1    Second pixel clock of first CRT controller

 * VCLK2		Third pixel clock of first CRT controller

 * VCLK3    Fourth pixel clock of first CRT controller

 * VCLK			Selected pixel clock, one of VCLK0, VCLK1, VCLK2, VCLK3

 * V2CLK		Pixel clock of the second CRT controller.

 * SCLK			Multi-purpose clock

 *

 * - MCLK and XCLK use the same FB_DIV

 * - VCLK0 .. VCLK3 use the same FB_DIV

 * - V2CLK is needed when the second CRTC is used (can be used for dualhead);

 *   i.e. CRT monitor connected to laptop has different resolution than built

 *   in LCD monitor.

 * - SCLK is not available on all cards; it is know to exist on the Rage LT-PRO,

 *   Rage XL and Rage Mobility. It is know not to exist on the Mach64 VT.

 * - V2CLK is not available on all cards, most likely only the Rage LT-PRO,

 *   the Rage XL and the Rage Mobility

 *

 * SCLK can be used to:

 * - Clock the chip instead of MCLK

 * - Replace XTALIN with a user defined frequency

 * - Generate the pixel clock for the LCD monitor (instead of VCLK)

 /*

  * It can be quite hard to calculate XCLK and MCLK if they don't run at the

  * same frequency. Luckily, until now all cards that need asynchrone clock

  * speeds seem to have SCLK.

  * So this driver uses SCLK to clock the chip and XCLK to clock the memory.

 ------------------------------------------------------------------------- */

/*

 *  PLL programming (Mach64 CT family)

 *

 *

 * This procedure sets the display fifo. The display fifo is a buffer that

 * contains data read from the video memory that waits to be processed by

 * the CRT controller.

 *

 * On the more modern Mach64 variants, the chip doesn't calculate the

 * interval after which the display fifo has to be reloaded from memory

 * automatically, the driver has to do it instead.

 FIFO is 64 bits wide in accelerator mode ... */

 ... but only 32 bits in VGA mode. */

	/* If we don't do this, 32 bits for multiplier & divider won't be

 Determine DSP precision first */

 Move on to dsp_off */

/*    if (bpp == 0)

        dsp_on = ((multiplier * 20 << vshift) + divider) / divider;

 Calculate rounding factor and apply it to dsp_on */

 Last but not least:  dsp_xclks */

 Get register values. */

 FIXME: use the VTB/GTB /{3,6,12} post dividers if they're better suited */

    pll->vclk_post_div <<= 6;

 VCLK = PLL_VCLK/VCLKx_POST */

 Set ECP (scaler/overlay clock) divider */

aty_calc_pll_ct(info, &pll->ct);*/

 turn off LCD */

 Temporarily switch to accelerator mode */

 Reset VCLK generator */

 Set post-divider */

 Set extended post-divider */

 Set feedback divider */

 End VCLK generator reset */

 Restore mode register */

 restore LCD */

 Allow BIOS to override */

	/* Exit if the user does not want us to tamper with the clock

 FIXME: use the VTB/GTB /3 post divider if it's better suited */

 Override PLL_EXT_CNTL & 0x07. */

 | FORCE_DCLK_TRI_STATE */;

 mclk == xclk */

		/*

		* The chip clock is not equal to the memory clock.

		* Therefore we will use sclk to clock the chip.

 mclk == sclk */

 Disable the extra precision pixel clock controls since we do not use them. */

		/*

		* This disables the sclk, crashes the computer as reported:

		* aty_st_pll_ct(SPLL_CNTL2, 3, info);

		*

		* So it seems the sclk must be enabled before it is used;

		* so PLL_GEN_CNTL must be programmed *after* the sclk.

		/*

		 * SCLK has been started. Wait for the PLL to lock. 5 ms

		 * should be enough according to mach64 programmer's guide.

/*

 *	drivers/video/aty/radeon_base.c

 *

 *	framebuffer driver for ATI Radeon chipset video boards

 *

 *	Copyright 2003	Ben. Herrenschmidt <benh@kernel.crashing.org>

 *	Copyright 2000	Ani Joshi <ajoshi@kernel.crashing.org>

 *

 *	i2c bits from Luca Tettamanti <kronos@kronoz.cjb.net>

 *	

 *	Special thanks to ATI DevRel team for their hardware donations.

 *

 *	...Insert GPL boilerplate here...

 *

 *	Significant portions of this driver apdated from XFree86 Radeon

 *	driver which has the following copyright notice:

 *

 *	Copyright 2000 ATI Technologies Inc., Markham, Ontario, and

 *                     VA Linux Systems Inc., Fremont, California.

 *

 *	All Rights Reserved.

 *

 *	Permission is hereby granted, free of charge, to any person obtaining

 *	a copy of this software and associated documentation files (the

 *	"Software"), to deal in the Software without restriction, including

 *	without limitation on the rights to use, copy, modify, merge,

 *	publish, distribute, sublicense, and/or sell copies of the Software,

 *	and to permit persons to whom the Software is furnished to do so,

 *	subject to the following conditions:

 *

 *	The above copyright notice and this permission notice (including the

 *	next paragraph) shall be included in all copies or substantial

 *	portions of the Software.

 *

 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 *	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 *	NON-INFRINGEMENT.  IN NO EVENT SHALL ATI, VA LINUX SYSTEMS AND/OR

 *	THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,

 *	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

 *	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER

 *	DEALINGS IN THE SOFTWARE.

 *

 *	XFree86 driver authors:

 *

 *	   Kevin E. Martin <martin@xfree86.org>

 *	   Rickard E. Faith <faith@valinux.com>

 *	   Alan Hourihane <alanh@fairlite.demon.co.uk>

 *

 CONFIG_PPC */

 MOVE THAT TO include/video

 Radeon Xpress 200m */

 Mobility M6 */

 Radeon VE/7000 */

 Radeon IGP320M (U1) */

 Radeon IGP320 (A3) */

 IGP330M/340M/350M (U2) */

 IGP330/340/350 (A4) */

 Mobility 7000 IGP */

 7000 IGP (A4+) */

 8500 AIW */

 8700/8800 */

 8500 */

 9100 */

 Mobility M7 */

 7500 */

 Mobility M9 */

 9000/Pro */

 Mobility 9100 IGP (U3) */

 9100 IGP (A5) */

 Mobility 9200 (M9+) */

 9200 */

 9500 */

 9600TX / FireGL Z1 */

 9700/9500/Pro/FireGL X1 */

 Mobility M10/M11 */

 9600/FireGL T2 */

 9800/Pro/FileGL X2 */

 Newer stuff */

 Original Radeon/7200 */

/* these common regs are cleared before mode setting so they do not

 * interfere with anything

/*

 * globals

/* Note about this function: we have some rare cases where we must not schedule,

 * this typically happen with our special "wake up early" hook which allows us to

 * wake up the graphic chip (and thus get the console back) before everything else

 * on some machines that support that mechanism. At this point, interrupts are off

 * and scheduling is not permitted

 Called if (rinfo->errata & CHIP_ERRATA_PLL_DUMMYREADS) is set */

 we can't deal with posted writes here ... */

 Initiate flush */

	/* Ensure FIFO is empty, ie, make sure the flush commands

	 * has reached the cache

 Wait for the flush to complete */

 ensure FIFO is empty before waiting for idle */

	/* If this is a primary card, there is a shadow copy of the

	 * ROM somewhere in the first meg. We will just ignore the copy

	 * and use the ROM directly.

 Fix from ATI for problem with Radeon hardware not leaving ROM enabled */

 Very simple test to make sure it appeared */

 Look for the PCI data to check the ROM type */

	/* Check the PCI data signature. If it's wrong, we still assume a normal x86 ROM

	 * for now, until I've verified this works everywhere. The goal here is more

	 * to phase out Open Firmware images.

	 *

	 * Currently, we only look at the first PCI data, we could iteratre and deal with

	 * them all, and we should use fb_bios_start relative to start of image and not

	 * relative start of ROM, but so far, I never found a dual-image ATI card

	 *

	 * typedef struct {

	 * 	u32	signature;	+ 0x00

	 * 	u16	vendor;		+ 0x04

	 * 	u16	device;		+ 0x06

	 * 	u16	reserved_1;	+ 0x08

	 * 	u16	dlen;		+ 0x0a

	 * 	u8	drevision;	+ 0x0c

	 * 	u8	class_hi;	+ 0x0d

	 * 	u16	class_lo;	+ 0x0e

	 * 	u16	ilen;		+ 0x10

	 * 	u16	irevision;	+ 0x12

	 * 	u8	type;		+ 0x14

	 * 	u8	indicator;	+ 0x15

	 * 	u16	reserved_2;	+ 0x16

	 * } pci_data_t;

 Locate the flat panel infos, do some sanity checking !!! */

	/* I simplified this code as we used to miss the signatures in

	 * a lot of case. It's now closer to XFree, we just don't check

	 * for signatures at all... Something better will have to be done

	 * if we end up having conflicts

 Locate the flat panel infos, do some sanity checking !!! */

/*

 * Read XTAL (ref clock), SCLK and MCLK from Open Firmware device

 * tree. Hopefully, ATI OF driver is kind enough to fill these

 CONFIG_PPC || CONFIG_SPARC */

/*

 * Read PLL infos from chip registers

	/* Ugh, we cut interrupts, bad bad bad, but we want some precision

	 * here, so... --BenH

 Flush PCI buffers ? */

 we're done, hopefully these are sane values */

/*

 * Retrieve PLL infos by different means (BIOS, Open Firmware, register probing...)

	/*

	 * In the case nothing works, these are defaults; they are mostly

	 * incomplete, however.  It does provide ppll_max and _min values

	 * even for most other methods, however.

	/*

	 * Retrieve PLL infos from Open Firmware first

 CONFIG_PPC || CONFIG_SPARC */

	/*

	 * Check out if we have an X86 which gave us some PLL informations

	 * and if yes, retrieve them

	/*

	 * We didn't get PLL parameters from either OF or BIOS, we try to

	 * probe them

	/*

	 * Fall back to already-set defaults...

	/*

	 * Some methods fail to retrieve SCLK and MCLK values, we apply default

	 * settings in this case (200Mhz). If that really happens often, we

	 * could fetch from registers instead...

	/* XXX I'm adjusting xres_virtual to the pitch, that may help XFree

	 * with some panels, though I don't quite like this solution

		/*

		 * TODO:  set mirror accordingly for non-Mobility chipsets with 2 CRTC's

		 *        and do something better using 2nd CRTC instead of just hackish

		 *        routing to second output

 We don't do a full switch-off on a simple mode switch */

			/* Asic bug, when turning off LVDS_ON, we have to make sure

			 * RADEON_PIXCLK_LVDS_ALWAYS_ON bit is off

 todo: powerdown DAC

 default */

			/* For 565, the green component is mixed one order

			 * below

 Make sure we are on first palette */

 Make sure we are on first palette */

 CRTC regs */

 FP regs */

 PLL regs */

 Workaround from XFree */

	        /* A temporal workaround for the occasional blanking on certain laptop

		 * panels. This appears to related to the PLL divider registers

		 * (fail to lock?). It occurs even when all dividers are the same

		 * with their old settings. In this case we really don't need to

		 * fiddle with PLL registers. By doing this we can avoid the blanking

		 * problem with some panels.

			/* We still have to force a switch to selected PPLL div thanks to

			 * an XFree86 driver bug which will switch it away in some cases

 Swich VCKL clock input to CPUCLK so it stays fed while PPLL updates*/

 Reset PPLL & enable atomic update */

 Switch to selected PPLL divider */

 Set PPLL ref. div */

			/* When restoring console mode, use saved PPLL_REF_DIV

			 * setting.

 R300 uses ref_div_acc field as real ref divider */

 Set PPLL divider 3 & post divider*/

 Write update */

 Wait read update complete */

	/* FIXME: Certain revisions of R300 can't recover here.  Not sure of

	   the cause yet, but this workaround will mask the problem for now.

	   Other chips usually will pass at the very first test, so the

 Clear reset & atomic update */

 We may want some locking ... oh well */

 Switch back VCLK source to PPLL */

/*

 * Timer function for delayed LVDS panel power up/down

/*

 * Apply a video mode. This will apply the whole register set, including

 * the PLL registers, to the card

 Apply surface registers */

/*

 * Calculate the PLL values for a given mode

	/* Check if the DVO port is enabled and sourced from the primary CRTC. I'm

	 * not sure which model starts having FP2_GEN_CNTL, I assume anything more

	 * recent than an r(v)100...

	/* XXX I had reports of flicker happening with the cinema display

	 * on TMDS1 that seem to be fixed if I also forbit odd dividers in

	 * this case. This could just be a bandwidth calculation issue, I

	 * haven't implemented the bandwidth code yet, but in the meantime,

	 * forcing uses_dvo to 1 fixes it and shouln't have bad side effects,

	 * I haven't seen a case were were absolutely needed an odd PLL

	 * divider. I'll find a better fix once I have more infos on the

	 * real cause of the problem.

 FP2 path not enabled */

		/* Not all chip revs have the same format for this register,

		 * extract the source selection

			/* sourced from transform unit, check for transform unit

			 * own source

 sourced from CRTC2 -> exit */

 so we end up on CRTC1, let's set uses_dvo to 1 now */

		/* If we output to the DVO port (external TMDS), we don't allow an

		 * odd PLL divider as those aren't supported on this path

	/* If we fall through the bottom, try the "default value"

	/* If we fall through the bottom, try the "default value"

	/* We always want engine to be idle on a mode switch, even

	 * if we won't actually change the mode

 x100 */

 max */

 max */

 Clear auto-center etc... */

 INREG(DAC_CNTL) | */ DAC_MASK_ALL | DAC_VGA_ADR_EN |

 We first calculate the engine pitch */

 Then, re-multiply it to get the CRTC pitch */

	/*

	 * It looks like recent chips have a problem with SURFACE_CNTL,

	 * setting SURF_TRANSLATION_DIS completely disables the

	 * swapper as well, so we leave it unset now.

	/* Setup swapping on both apertures, though we currently

	 * only use aperture 0, enabling swapper on aperture 1

	 * won't harm

 Clear surface registers */

 We use PPLL_DIV_3 */

 Calculate PPLL value if necessary */

 DFP */

 TMDS_PLL_EN bit is reversed on RV (and mobility) chips */

 do it! */

 (re)initialize the engine */

 Update fix */

 Update debug text engine */

 Fill fix common fields */

/*

 * This reconfigure the card's internal memory map. In theory, we'd like

 * to setup the card's memory at the same address as it's PCI bus address,

 * and the AGP aperture right after that so that system RAM on 32 bits

 * machines at least, is directly accessible. However, doing so would

 * conflict with the current XFree drivers...

 * Ultimately, I hope XFree, GATOS and ATI binary drivers will all agree

 * on the proper way to set this up and duplicate this here. In the meantime,

 * I put the card's memory at 0 in card space and AGP at some random high

 * local (0xe0000000 for now) that will be changed by XFree/DRI anyway

 First, we disable display to avoid interfering */

 Set framebuffer to be at the same address as set in PCI BAR */

	/* Set AGP to be just after the framebuffer on a 256Mb boundary. This

	 * assumes the FB isn't mapped to 0xf0000000 or above, but this is

	 * always the case on PPCs afaik.

	/* Fixup the display base addresses & engine offsets while we

	 * are at it as well

 Restore display settings */

 CONFIG_PPC */

 framebuffer size */

 This is supposed to fix the crtc2 noise problem. */

             /* This is to workaround the asic bug for RMX, some versions

                of BIOS doesn't have this register initialized correctly.

 mem size is bits [28:0], mask off the rest */

	/*

	 * Hack to get around some busted production M6's

	 * reporting no ram

	/*

	 * Now try to identify VRAM type

	/* This may not be correct, as some cards can have half of channel disabled

	 * ToDo: identify these cases

/*

 * Sysfs

 Enable device in PCI config */

 Set base addrs */

 request the mem regions */

 map the regions */

	/*

	 * Check for errata

	/* On PPC, we obtain the OF device-node pointer to the firmware

	 * data for this chip

 CONFIG_PPC || CONFIG_SPARC */

	/* On PPC, the firmware sets up a memory mapping that tends

	 * to cause lockups when enabling the engine. We reconfigure

	 * the card internal memory mappings properly

 CONFIG_PPC */

 Get VRAM size and type */

	/*

	 * Map the BIOS ROM if any and retrieve PLL parameters from

	 * the BIOS. We skip that on mobility chips as the real panel

	 * values we need aren't in the ROM but in the BIOS image in

	 * memory. This is definitely not the best meacnism though,

	 * we really need the arch code to tell us which is the "primary"

	 * video adapter to use the memory image (or better, the arch

	 * should provide us a copy of the BIOS image to shield us from

	 * archs who would store that elsewhere and/or could initialize

	 * more than one adapter during boot).

	/*

	 * On x86, the primary display on laptop may have it's BIOS

	 * ROM elsewhere, try to locate it at the legacy memory hole.

	 * We probably need to make sure this is the primary display,

	 * but that is difficult without some arch support.

	/* If both above failed, try the BIOS ROM again for mobility

	 * chips

 Get informations about the board's PLL */

 Register I2C bus */

 set all the vital stuff */

 Probe screen types */

 Build mode list, check out panel native model */

 Register some sysfs stuff (should be done better) */

	/* save current mode regs before we switch into the new one

	 * so we can restore this upon __exit

 Setup Power Management capabilities */

		/* -2 is special: means  ON on mobility chips and do not

		 * change on others

 Register with fbdev layer */

  MODULE  */

 SPDX-License-Identifier: GPL-2.0

/*

 *  ATI Mach64 GX Support

 Definitions for the ICS 2595 == ATI 18818_1 Clockchip */

  14.33 MHz  (exact   14.31818) */

 really 43 on ICS 2595 !!!  */

 ohne Prescaler */

 159.38 MHz  (really 170.486) */

  80.00 MHz  (        85.565) */

 mit Prescaler 2, 4, 8 */

  10.00 MHz  (really  10.697) */

    /*

     *  Support Functions

    /*

     *  IBM RGB514 DAC and Clock Chip

 right addr byte */

 left addr byte */

 8 bpp */

 555 */

 XRGB */

 VRAM Mask Low */

 Horizontal Sync Control */

 Power Management */

 Misc Clock Control */

 Misc Control 2 */

 Pixel Format */

 Misc Control 2 / 16 BPP Control / 32 BPP Control */

	/*

	 *  FIXME: use real calculations instead of using fixed values from the old

	 *         driver

 pixlock rounding limit (arbitrary) */

 (df<<6) | vco_div_count */

 ref_div_count */

  7395 ps / 135.2273 MHz */

  9977 ps / 100.2273 MHz */

 12509 ps /  79.9432 MHz */

 13394 ps /  74.6591 MHz */

 15378 ps /  65.0284 MHz */

 17460 ps /  57.2727 MHz */

 33145 ps /  30.1705 MHz */

 DAC Operation */

 PLL Control 1 */

 Misc Control 1 */

 PLL Ref. Divider Input */

 Sync Control */

 Power Management */

 F0 / M0 */

 F1 / N0 */

    /*

     *  ATI 68860-B DAC

(info->mach64DAC8Bit ? 0x00 : 0x01) */ ;

	/* The following assumes that the BIOS has correctly set R7 of the

	 * Device Setup Register A at boot time.

    /*

     *  AT&T 21C498 DAC

 info->mach64DAC8Bit */ )

    /*

     *  ATI 18818 / ICS 2595 Clock Chip

 in 0.01 MHz */

 Calculate the programming word */

 MHz100 = 257 */

 + 0.5 round */

 default for now */

 delay for 50 (15) ms */

 Program the clock chip */

 Strobe = 0 */

 Strobe = 0 */

 Send start bits */

 Start bit */

 Read / ~Write */

 Location 0..4 */

 delay for 1 ms */

 Clear DAC Counter */

 delay for 50 (15) ms */

    /*

     *  STG 1703 Clock Chip

 in 0.01 MHz */

 u32 post_divider; */

 Calculate the programming word */

 14.32 MHz */

 Calculate program word */

 fuer nix */

 default for now */

 Program clock */

 Clear DAC Counter */

    /*

     *  Chrontel 8398 Clock Chip

 in 0.01 MHz */

 u32 post_divider; */

 Calculate the programming word */

 Calculate program word */

 8 bit scale this */

 14.31818 * 65536 */

 43..256 */

 4..32 */

 8 bit scale */

 default for now */

 Program clock */

 Clear DAC Counter */

    /*

     *  AT&T 20C408 Clock Chip

 in 0.01 MHz */

 u32 post_divider; */

 Calculate the programming word */

 14.32 MHz */

 Calculate program word */

 fuer nix */

 default for now */

 Program clock */

 delay for 400 us */

 delay for 400 us */

 Clear DAC Counter */

    /*

     *  Unsupported DAC and Clock Chip

 new in 2.2.3p1 from Geert. ???????? */

 SPDX-License-Identifier: GPL-2.0

/*

 *  ATI Mach64 CT/VT/GT/LT Cursor Support

/*

 * The hardware cursor definition requires 2 bits per pixel. The

 * Cursor size reguardless of the visible cursor size is 64 pixels

 * by 64 lines. The total memory required to define the cursor is

 * 16 bytes / line for 64 lines or 1024 bytes of data. The data

 * must be in a contigiuos format. The 2 bit cursor code values are

 * as follows:

 *

 *	00 - pixel colour = CURSOR_CLR_0

 *	01 - pixel colour = CURSOR_CLR_1

 *	10 - pixel colour = transparent (current display pixel)

 *	11 - pixel colour = 1's complement of current display pixel

 *

 *	Cursor Offset        64 pixels		 Actual Displayed Area

 *            \_________________________/

 *	      |			|	|	|

 *	      |<--------------->|	|	|

 *	      | CURS_HORZ_OFFSET|	|	|

 *	      |			|_______|	|  64 Lines

 *	      |			   ^	|	|

 *	      |			   |	|	|

 *	      |		CURS_VERT_OFFSET|	|

 *	      |			   |	|	|

 *	      |____________________|____|	|

 *

 *

 * The Screen position of the top left corner of the displayed

 * cursor is specificed by CURS_HORZ_VERT_POSN. Care must be taken

 * when the cursor hot spot is not the top left corner and the

 * physical cursor position becomes negative. It will be displayed

 * if either the horizontal or vertical cursor position is negative

 *

 * If x becomes negative the cursor manager must adjust the CURS_HORZ_OFFSET

 * to a larger number and saturate CUR_HORZ_POSN to zero.

 *

 * if Y becomes negative, CUR_VERT_OFFSET must be adjusted to a larger number,

 * CUR_OFFSET must be adjusted to a point to the appropriate line in the cursor

 * definitation and CUR_VERT_POSN must be saturated to zero.

    /*

     *  Hardware Cursor support.

 set position */

		/*

		 * In doublescan mode, the cursor location

		 * and heigh also needs to be doubled.

 Set color map */

 Clear cursor image with 1010101010...

 Upper 4 bits of mask data

 Lower 4 bits of mask

 Upper 4 bits of mask data

 Lower 4 bits of mask

			/*

			 * If cursor size is not a multiple of 8 characters

			 * we must pad it with transparent pattern (0xaaaa).

 Scratch pad 64 bytes wide */

 and 64 lines tall. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/mb862xx/mb862xxfb_accel.c

 *

 * Fujitsu Carmine/Coral-P(A)/Lime framebuffer driver acceleration support

 *

 * (C) 2007 Alexander Shishkin <virtuoso@slind.org>

 * (C) 2009 Valentin Sitdikov <v.sitdikov@gmail.com>

 * (C) 2009 Siemens AG

 Set raster operation */

/*

 * Fill in the cmd array /GDC FIFO commands/ to draw a 1bit image.

 * Make sure cmd has enough room!

 set colors and raster operation regs */

 Set raster operation */

 and the image */

/*

 * Fill in the cmd array /GDC FIFO commands/ to draw a 8bit image.

 * Make sure cmd has enough room!

/*

 * Fill in the cmd array /GDC FIFO commands/ to draw a 16bit image.

 * Make sure cmd has enough room!

	/* We could use hardware clipping but on many cards you get around

 Set raster operation */

 Set raster operation */

 cmd[1] set earlier */

FIXME: add right define */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Coral-P(A)/Lime I2C adapter driver

 *

 * (C) 2011 DENX Software Engineering, Anatolij Gustschin <agust@denx.de>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/mb862xx/mb862xxfb.c

 *

 * Fujitsu Carmine/Coral-P(A)/Lime framebuffer driver

 *

 * (C) 2008 Anatolij Gustschin <agust@denx.de>

 * DENX Software Engineering

 Mode for Prime View PM070WL4 TFT LCD Panel */

 16 bits/pixel, 16MB, 133MHz, SDRAM memory mode value */

 Helpers */

 unsupported type */

 check if these values fit into the registers */

	/*

	 * can cope with 8,16 or 24/32bpp if resulting

	 * pitch is divisible by 64 without remainder

 line length is going to be 128 bit aligned */

 set r/g/b positions and validate bpp */

/*

 * set display parameters

 disp off */

 set display reference clock div. */

 disp dimension, format */

 both HW-cursors off */

 timings */

 display on */

 downscaling */

 upscaling */

 framebuffer ops */

 initialize fb_info data */

 get the disp mode from active display cfg */

 check and possibly fix bpp */

	/*

	 * reserve space for capture buffers and two cursors

	 * at the end of vram: 720x576 * 2 * 2.2 + 64x64 * 16.

/*

 * show some display controller and cursor registers

 Get Interrupt Status */

 Clear interrupt status */

 Get status */

 Clear status */

/*

 * GDC (Lime, Coral(B/Q), Mint, ...) on host bus

 interrupt status */

 display off */

 disable interrupts */

/*

 * common types

 end */ }

 relocate gdc registers space */

 wait at least 20 bus cycles */

 Clear interrupt status */

	/*

	 * Set io mode first! Spec. says IC may be destroyed

	 * if not set to SSTL2/LVCMOS before init.

 DRAM init */

 DLL reset done? */

 warm up */

 check for engine module revision */

 set up vram */

 MB86295/MB86296 */

 MB86297 */

 should never occur */

 display off */

/*

 *  linux/drivers/video/console/bitblit.c -- BitBlitting Operation

 *

 *  Originally from the 'accel_*' routines in drivers/video/console/fbcon.c

 *

 *      Copyright (C) 2004 Antonino Daplas <adaplas @pol.net>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

/*

 * Accelerated handlers.

	/* buf is always NULL except when in monochrome mode, so in this case

	   it's a gain to check buf against NULL even though kfree() handles

/*

 *  Generic function for frame buffer with packed pixels of any depth.

 *

 *      Copyright (C)  1999-2005 James Simmons <jsimmons@www.infradead.org>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

 *

 * NOTES:

 *

 *  This is for cfb packed pixels. Iplan and such are incorporated in the

 *  drivers that need them.

 *

 *  FIXME

 *

 *  Also need to add code to deal with cards endians that are different than

 *  the native cpu endians. I also need to deal with MSB position in the word.

 *

 *  The two functions or copying forward and backward could be split up like

 *  the ones for filling, i.e. in aligned and unaligned versions. This would

 *  help moving some redundant computations and branches out of the loop, too.

    /*

     *  Generic bitwise copy algorithm

	/*

	 * If you suspect bug in this function, compare it with this simple

	 * memmove implementation.

 Same alignment for source and dest

 Single word

 Multiple destination words

 Leading bits

 Main chunk

 Trailing bits

 Different alignment for source and dest */

 Single destination word

 Single source word

 Single source word

 2 source words

 Multiple destination words

			/** We must always remember the last value read, because in case

			SRC and DST overlap bitwise (e.g. when moving just one pixel in

			1bpp), we always collect one full long for DST and that might

			overlap with the current long from SRC. We store this value in

 Leading bits

 Single source word

 2 source words

 Main chunk

 Trailing bits

 Single source word

 2 source words

    /*

     *  Generic bitwise copy algorithm, operating backward

	/*

	 * If you suspect bug in this function, compare it with this simple

	 * memmove implementation.

 Same alignment for source and dest

 Single word

 Multiple destination words

 Leading bits

 Main chunk

 Trailing bits

 Different alignment for source and dest

 Single destination word

 Single source word

 Single source word

 2 source words

 Multiple destination words

			/** We must always remember the last value read, because in case

			SRC and DST overlap bitwise (e.g. when moving just one pixel in

			1bpp), we always collect one full long for DST and that might

			overlap with the current long from SRC. We store this value in

 Leading bits

 Single source word

 2 source words

 Main chunk

 Trailing bits

 Single source word

 2 source words

	/* if the beginning of the target area might overlap with the end of

 split the base of the framebuffer into a long-aligned address and the

 index of the first bit

 add offset of source and target area

/*

 *  linux/drivers/video/console/fbcon_ud.c -- Software Rotation - 180 degrees

 *

 *      Copyright (C) 2005 Antonino Daplas <adaplas @pol.net>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

/*

 * Rotation 180 degrees

	/* buf is always NULL except when in monochrome mode, so in this case

	   it's a gain to check buf against NULL even though kfree() handles

/*

 *  Generic Bit Block Transfer for frame buffers located in system RAM with

 *  packed pixels of any depth.

 *

 *  Based almost entirely from cfbcopyarea.c (which is based almost entirely

 *  on Geert Uytterhoeven's copyarea routine)

 *

 *      Copyright (C)  2007 Antonino Daplas <adaplas@pol.net>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

 *

    /*

     *  Generic bitwise copy algorithm

 Same alignment for source and dest */

 Single word */

 Multiple destination words */

 Leading bits */

 Main chunk */

 Trailing bits */

 Different alignment for source and dest */

 Single destination word */

 Single source word */

 Single source word */

 2 source words */

 Multiple destination words */

			/** We must always remember the last value read,

			    because in case SRC and DST overlap bitwise (e.g.

			    when moving just one pixel in 1bpp), we always

			    collect one full long for DST and that might

			    overlap with the current long from SRC. We store

 Leading bits */

 Single source word */

 2 source words */

 Main chunk */

 Trailing bits */

 Single source word */

 2 source words */

    /*

     *  Generic bitwise copy algorithm, operating backward

 Same alignment for source and dest */

 Single word */

 Multiple destination words */

 Leading bits */

 Main chunk */

 Trailing bits */

 Different alignment for source and dest */

 Single destination word */

 Single source word */

 Single source word */

 2 source words */

 Multiple destination words */

			/** We must always remember the last value read,

			    because in case SRC and DST overlap bitwise (e.g.

			    when moving just one pixel in 1bpp), we always

			    collect one full long for DST and that might

			    overlap with the current long from SRC. We store

 Leading bits */

 Single source word */

 2 source words */

 Main chunk */

 Trailing bits */

 Single source word */

 2 source words */

	/* if the beginning of the target area might overlap with the end of

	/* split the base of the framebuffer into a long-aligned address and

 add offset of source and target area */

/*

 *  linux/drivers/video/fbcmap.c -- Colormap handling for frame buffer devices

 *

 *	Created 15 Jun 1997 by Geert Uytterhoeven

 *

 *	2001 - Documented with DocBook

 *	- Brad Douglas <brad@neruo.com>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

/**

 *	fb_alloc_cmap_gfp - allocate a colormap

 *	@cmap: frame buffer colormap structure

 *	@len: length of @cmap

 *	@transp: boolean, 1 if there is transparency, 0 otherwise

 *	@flags: flags for kmalloc memory allocation

 *

 *	Allocates memory for a colormap @cmap.  @len is the

 *	number of entries in the palette.

 *

 *	Returns negative errno on error, or zero on success.

 *

/**

 *      fb_dealloc_cmap - deallocate a colormap

 *      @cmap: frame buffer colormap structure

 *

 *      Deallocates a colormap that was previously allocated with

 *      fb_alloc_cmap().

 *

/**

 *	fb_copy_cmap - copy a colormap

 *	@from: frame buffer colormap structure

 *	@to: frame buffer colormap structure

 *

 *	Copy contents of colormap from @from to @to.

/**

 *	fb_set_cmap - set the colormap

 *	@cmap: frame buffer colormap structure

 *	@info: frame buffer info structure

 *

 *	Sets the colormap @cmap for a screen of device @info.

 *

 *	Returns negative errno on error, or zero on success.

 *

/**

 *	fb_default_cmap - get default colormap

 *	@len: size of palette for a depth

 *

 *	Gets the default colormap for a specific screen depth.  @len

 *	is the size of the palette for a particular screen depth.

 *

 *	Returns pointer to a frame buffer colormap structure.

 *

/**

 *	fb_invert_cmaps - invert all defaults colormaps

 *

 *	Invert all default colormaps.

 *

    /*

     *  Visible symbols for modules

/*

 *  Generic fillrect for frame buffers in system RAM with packed pixels of

 *  any depth.

 *

 *  Based almost entirely from cfbfillrect.c (which is based almost entirely

 *  on Geert Uytterhoeven's fillrect routine)

 *

 *      Copyright (C)  2007 Antonino Daplas <adaplas@pol.net>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

    /*

     *  Aligned pattern fill using 32/64-bit memory accesses

 Single word */

 Multiple destination words */

 Leading bits */

 Main chunk */

 Trailing bits */

    /*

     *  Unaligned generic pattern fill using 32/64-bit memory accesses

     *  The pattern must have been expanded to a full 32/64-bit value

     *  Left/right are the appropriate shifts to convert to the pattern to be

     *  used for the next 32/64-bit word

 Single word */

 Multiple destination words */

 Leading bits */

 Main chunk */

 Trailing bits */

    /*

     *  Aligned pattern invert using 32/64-bit memory accesses

 Single word */

 Multiple destination words */

 Leading bits */

 Main chunk */

 Trailing bits */

    /*

     *  Unaligned generic pattern invert using 32/64-bit memory accesses

     *  The pattern must have been expanded to a full 32/64-bit value

     *  Left/right are the appropriate shifts to convert to the pattern to be

     *  used for the next 32/64-bit word

 Single word */

 Multiple destination words */

 Leading bits */

 Main chunk */

 Trailing bits */

 FIXME For now we support 1-32 bpp only */

 rotate pattern to the correct start position */

/*

 * linux/drivers/video/fbmon.c

 *

 * Copyright (C) 2002 James Simmons <jsimmons@users.sf.net>

 *

 * Credits:

 *

 * The EDID Parser is a conglomeration from the following sources:

 *

 *   1. SciTech SNAP Graphics Architecture

 *      Copyright (C) 1991-2002 SciTech Software, Inc. All rights reserved.

 *

 *   2. XFree86 4.3.0, interpret_edid.c

 *      Copyright 1998 by Egbert Eich <Egbert.Eich@Physik.TU-Darmstadt.DE>

 *

 *   3. John Fremlin <vii@users.sourceforge.net> and

 *      Ani Joshi <ajoshi@unixbox.com>

 *

 * Generalized Timing Formula is derived from:

 *

 *      GTF Spreadsheet by Andy Morrish (1/5/97)

 *      available at https://www.vesa.org

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

/*

 * EDID parser

 define this for verbose EDID parsing output */

 DEC FR-PCXAV-YZ */

 ViewSonic PF775a */

 Sharp UXGA? */

		/* Only if display is GTF capable will

 vfmin */

 vfmax */

 hfmin */

 hfmax */

 pixclock - 170 MHz*/

 GTF */

 checksum passed, everything's good */

 Chromaticity data */

 DMT mode found */

 in EDID 1.3 the meaning of 0 changed to 16:10 (prior 1:1) */

 Check the mode we got is within valid spec of the monitor */

/**

 * fb_create_modedb - create video mode database

 * @edid: EDID data

 * @dbsize: database size

 * @specs: monitor specifications, may be NULL

 *

 * RETURNS: struct fb_videomode, @dbsize contains length of database

 *

 * DESCRIPTION:

 * This function builds a mode database using the contents of the EDID

 * data

 Yikes, EDID data is totally useless */

/**

 * fb_destroy_modedb - destroys mode database

 * @modedb: mode database to destroy

 *

 * DESCRIPTION:

 * Destroy mode database created by fb_create_modedb

 estimate monitor limits based on modes supported */

	/*

	 * Workaround for buggy EDIDs that sets that the first

	 * detailed timing is preferred but has not detailed

	 * timing specified

/*

 * VESA Generalized Timing Formula (GTF)

/**

 * fb_get_vblank - get vertical blank time

 * @hfreq: horizontal freq

 *

 * DESCRIPTION:

 * vblank = right_margin + vsync_len + left_margin

 *

 *    given: right_margin = 1 (V_FRONTPORCH)

 *           vsync_len    = 3

 *           flyback      = 550

 *

 *                          flyback * hfreq

 *           left_margin  = --------------- - vsync_len

 *                           1000000

/**

 * fb_get_hblank_by_freq - get horizontal blank time given hfreq

 * @hfreq: horizontal freq

 * @xres: horizontal resolution in pixels

 *

 * DESCRIPTION:

 *

 *           xres * duty_cycle

 * hblank = ------------------

 *           100 - duty_cycle

 *

 * duty cycle = percent of htotal assigned to inactive display

 * duty cycle = C - (M/Hfreq)

 *

 * where: C = ((offset - scale factor) * blank_scale)

 *            -------------------------------------- + scale factor

 *                        256

 *        M = blank_scale * gradient

 *

/**

 * fb_get_hblank_by_dclk - get horizontal blank time given pixelclock

 * @dclk: pixelclock in Hz

 * @xres: horizontal resolution in pixels

 *

 * DESCRIPTION:

 *

 *           xres * duty_cycle

 * hblank = ------------------

 *           100 - duty_cycle

 *

 * duty cycle = percent of htotal assigned to inactive display

 * duty cycle = C - (M * h_period)

 *

 * where: h_period = SQRT(100 - C + (0.4 * xres * M)/dclk) + C - 100

 *                   -----------------------------------------------

 *                                    2 * M

 *        M = 300;

 *        C = 30;

/**

 * fb_get_hfreq - estimate hsync

 * @vfreq: vertical refresh rate

 * @yres: vertical resolution

 *

 * DESCRIPTION:

 *

 *          (yres + front_port) * vfreq * 1000000

 * hfreq = -------------------------------------

 *          (1000000 - (vfreq * FLYBACK)

 *

/*

 * fb_get_mode - calculates video mode using VESA GTF

 * @flags: if: 0 - maximize vertical refresh rate

 *             1 - vrefresh-driven calculation;

 *             2 - hscan-driven calculation;

 *             3 - pixelclock-driven calculation;

 * @val: depending on @flags, ignored, vrefresh, hsync or pixelclock

 * @var: pointer to fb_var_screeninfo

 * @info: pointer to fb_info

 *

 * DESCRIPTION:

 * Calculates video mode based on monitor specs using VESA GTF.

 * The GTF is best for VESA GTF compliant monitors but is

 * specifically formulated to work for older monitors as well.

 *

 * If @flag==0, the function will attempt to maximize the

 * refresh rate.  Otherwise, it will calculate timings based on

 * the flag and accompanying value.

 *

 * If FB_IGNOREMON bit is set in @flags, monitor specs will be

 * ignored and @var will be filled with the calculated timings.

 *

 * All calculations are based on the VESA GTF Spreadsheet

 * available at VESA's public ftp (https://www.vesa.org).

 *

 * NOTES:

 * The timings generated by the GTF will be different from VESA

 * DMT.  It might be a good idea to keep a table of standard

 * VESA modes as well.  The GTF may also not work for some displays,

 * such as, and especially, analog TV.

 *

 * REQUIRES:

 * A valid info->monspecs, otherwise 'safe numbers' will be used.

	/*

	 * If monspecs are invalid, use values that are enough

	 * for 640x480@60

 maximize refresh rate */

 vrefresh driven */

 hsync driven */

 pixelclock driven */

 prevent division by zero in KHZ2PICOS macro */

 prevent division by zero */

 a mode must have htotal and vtotal != 0 or it is invalid */

/**

 * of_get_fb_videomode - get a fb_videomode from devicetree

 * @np: device_node with the timing specification

 * @fb: will be set to the return value

 * @index: index into the list of display timings in devicetree

 *

 * DESCRIPTION:

 * This function is expensive and should only be used, if only one mode is to be

 * read from DT. To get multiple modes start with of_get_display_timings ond

 * work with that instead.

 CONFIG_OF */

 CONFIG_VIDEOMODE_HELPERS */

 CONFIG_FB_MODE_HELPERS */

/*

 * fb_validate_mode - validates var against monitor capabilities

 * @var: pointer to fb_var_screeninfo

 * @info: pointer to fb_info

 *

 * DESCRIPTION:

 * Validates video mode against monitor capabilities specified in

 * info->monspecs.

 *

 * REQUIRES:

 * A valid info->monspecs.

	/*

	 * If monspecs are invalid, use values that are enough

	 * for 640x480@60

/*

 * We need to ensure that the EDID block is only returned for

 * the primary graphics adapter.

/*

 *  linux/drivers/video/console/fbcon_ccw.c -- Software Rotation - 270 degrees

 *

 *      Copyright (C) 2005 Antonino Daplas <adaplas @pol.net>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

/*

 * Rotation 270 degrees

	/* buf is always NULL except when in monochrome mode, so in this case

	   it's a gain to check buf against NULL even though kfree() handles

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * fbsysfs.c - framebuffer device class and attributes

 *

 * Copyright (c) 2004 James Simmons <jsimmons@infradead.org>

/*

 * Note:  currently there's only stubs for framebuffer_alloc and

 * framebuffer_release here.  The reson for that is that until all drivers

 * are converted to use it a sysfsification will open OOPSable races.

/**

 * framebuffer_alloc - creates a new frame buffer info structure

 *

 * @size: size of driver private data, can be zero

 * @dev: pointer to the device for this fb, this can be NULL

 *

 * Creates a new frame buffer info structure. Also reserves @size bytes

 * for driver private data (info->par). info->par (if any) will be

 * aligned to sizeof(long).

 *

 * Returns the new structure, or NULL if an error occurred.

 *

/**

 * framebuffer_release - marks the structure available for freeing

 *

 * @info: frame buffer info structure

 *

 * Drop the reference count of the device embedded in the

 * framebuffer info structure.

 *

 might again call into fb_blank */

	struct fb_info *fb_info = dev_get_drvdata(device);

	struct fb_info *fb_info = dev_get_drvdata(device);

	struct fb_info *fb_info = dev_get_drvdata(device);

	struct fb_info *fb_info = dev_get_drvdata(device);

	struct fb_info *fb_info = dev_get_drvdata(device);

	/* Some drivers don't use framebuffer_alloc(), but those also

	 * don't have backlights.

	/* If there has been an error in the input data, we won't

	 * reach this loop.

	/* Some drivers don't use framebuffer_alloc(), but those also

	 * don't have backlights.

/* When cmap is added back in it should be a binary attribute

 * not a text one. Consideration should also be given to converting

/* This function generates a linear backlight curve

 *

 *     0: off

 *   1-7: min

 * 8-127: linear from min to max

/*

 *  linux/drivers/video/fbcon.c -- Low level frame buffer based console driver

 *

 *	Copyright (C) 1995 Geert Uytterhoeven

 *

 *

 *  This file is based on the original Amiga console driver (amicon.c):

 *

 *	Copyright (C) 1993 Hamish Macdonald

 *			   Greg Harp

 *	Copyright (C) 1994 David Carter [carter@compsci.bristol.ac.uk]

 *

 *	      with work by William Rucklidge (wjr@cs.cornell.edu)

 *			   Geert Uytterhoeven

 *			   Jes Sorensen (jds@kom.auc.dk)

 *			   Martin Apel

 *

 *  and on the original Atari console driver (atacon.c):

 *

 *	Copyright (C) 1993 Bjoern Brauel

 *			   Roman Hodek

 *

 *	      with work by Guenther Kelleter

 *			   Martin Schaller

 *			   Andreas Schwab

 *

 *  Hardware cursor support added by Emmanuel Marty (core@ggi-project.org)

 *  Smart redraw scrolling, arbitrary font width support, 512char font support

 *  and software scrollback added by 

 *                         Jakub Jelinek (jj@ultra.linux.cz)

 *

 *  Random hacking by Martin Mares <mj@ucw.cz>

 *

 *	2001 - Documented with DocBook

 *	- Brad Douglas <brad@neruo.com>

 *

 *  The low level operations for the various display memory organizations are

 *  now in separate source files.

 *

 *  Currently the following organizations are supported:

 *

 *    o afb			Amiga bitplanes

 *    o cfb{2,4,8,16,24,32}	Packed pixels

 *    o ilbm			Amiga interleaved bitplanes

 *    o iplan2p[248]		Atari interleaved bitplanes

 *    o mfb			Monochrome

 *    o vga			VGA characters/attributes

 *

 *  To do:

 *

 *    - Implement 16 plane mode (iplan2p16)

 *

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

 MSch: for IRQ probe */

 For counting font checksums */

/*

 * FIXME: Locking

 *

 * - fbcon state itself is protected by the console_lock, and the code does a

 *   pretty good job at making sure that lock is held everywhere it's needed.

 *

 * - access to the registered_fb array is entirely unprotected. This should use

 *   proper object lifetime handling, i.e. get/put_fb_info. This also means

 *   switching from indices to proper pointers for fb_info everywhere.

 *

 * - fbcon doesn't bother with fb_lock/unlock at all. This is buggy, since it

 *   means concurrent access to the same fbdev from both fbcon and userspace

 *   will blow up. To fix this all fbcon calls from fbmem.c need to be moved out

 *   of fb_lock/unlock protected sections, since otherwise we'll recurse and

 *   deadlock eventually. Aside: Due to these deadlock issues the fbdev code in

 *   fbmem.c cannot use locking asserts, and there's lots of callers which get

 *   the rules wrong, e.g. fbsysfs.c entirely missed fb_lock/unlock calls too.

 the logo can be shown */

 draw the logo to a console */

 do not show the logo */

/* logo_shown is an index to vc_cons when >= 0; otherwise follows FBCON_LOGO

 console mappings */

 CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY */

 font data */

 current fb_info */

 console rotation */

/*

 *  Interface used by the world

/*

 *  Internal routines

 CONFIG_FRAMEBUFFER_CONSOLE_ROTATION */

 0 or 1 */

		/*

		 * Scale down 16-colors to 4 colors. Default 4-color palette

		 * is grayscale. However, simply dividing the values by 4

		 * will not work, as colors 1, 2 and 3 will be scaled-down

		 * to zero rendering them invisible.  So empirically convert

		 * colors to a sane 4-level grayscale.

 black */

 white */

 gray */

 intense white */

		/*

		 * Last 8 entries of default 16-color palette is a more intense

		 * version of the first 8 (i.e., same chrominance, different

		 * luminance).

 FIXME: we should sort out the unbind locking instead */

	/* instead we just fail to flash the cursor if we can't get

 Need to make room for the logo */

	/*

	 * remove underline attribute from erase character

	 * if black and white framebuffer.

 We can scroll screen down */

 MODULE */

 CONFIG_MISC_TILEBLITTING */

		/*

		  If oldinfo and newinfo are driving the same hardware,

		  the fb_release() method of oldinfo may attempt to

		  restore the hardware state.  This will leave the

		  newinfo in an undefined state. Thus, a call to

		  fb_set_par() may be needed for the newinfo.

/**

 *	set_con2fb_map - map console to frame buffer device

 *	@unit: virtual console number to map

 *	@newidx: frame buffer index to map virtual console to

 *      @user: user request

 *

 *	Maps a virtual console @unit to a frame buffer device

 *	@newidx.

 *

 *	This should be called with the console lock held.

	/*

	 * If old fb is not mapped to any of the consoles,

	 * fbcon should release it.

/*

 *  Low Level Operations

 NOTE: fbcon cannot be __init: it may be called from do_take_over_console later */

 This should not happen */

	/*

	 *  If num_registered_fb is zero, this is a call for the dummy part.

	 *  The frame buffer devices weren't initialized yet.

	/*

	 * Instead of blindly using registered_fb[0], we use info_idx, set by

	 * fb_console_init();

 Setup default font */

	/* If we are not the first console on this

	/*

	 * We must always set the mode. The mode of the previous console

	 * driver could be in the same resolution but we are using different

	 * hardware so we have to initialize the hardware.

	 *

	 * We need to do it in fbcon_init() to prevent screen corruption.

	/*

	 *  ++guenther: console.c:vc_allocate() relies on initializing

	 *  vc_{cols,rows}, but we must not set those if we are only

	 *  resizing the console.

 ====================================================================== */

/*  fbcon_XXX routines - interface used by the world

 *

 *  This system is now divided into two levels because of complications

 *  caused by hardware scrolling. Top level functions:

 *

 *	fbcon_clear(), fbcon_putc(), fbcon_clear_margins()

 *

 *  handles y values in range [0, scr_height-1] that correspond to real

 *  screen positions. y_wrap shift means that first line of bitmap may be

 *  anywhere on this display. These functions convert lineoffsets to

 *  bitmap offsets and deal with the wrap-around case by splitting blits.

 *

 *	fbcon_clear_physical_8()    -- of original fbcon_XXX fns.

 *	fbcon_putc_physical_8()	    -- (font width != 8) may be added later

 *

 *  WARNING:

 *

 *  At the moment fbcon_putc() cannot blit across vertical wrap boundary

 *  Implies should only really hardware scroll in rows. Only reason for

 *  restriction is simplicity & efficiency at the moment.

		/*

		 * If the font dimensions are not an integral of the display

		 * dimensions then the ops->clear below won't end up clearing

		 * the margins.  Call clear_margins here in case the logo

		 * bitmap stretched into the margin area.

 Split blits that cross physical y_wrap boundary */

 NOTE: We subtract two lines from these pointers */

	/*

	 * ++Geert: Only use ywrap/ypan if the console is in text mode

	 * ++Andrew: Only use ypan on hardware text mode when scrolling the

	 *           whole screen (prevents flicker).

 Maximum realistic size */

 Maximum realistic size */

 size = height * pitch * charcount */

		/*

		 * If user font, ensure that a possible change to user font

		 * height or width will not allow a font data out-of-bounds access.

		 * NOTE: must use original charcount in calculation as font

		 * charcount can change and cannot be used to determine the

		 * font data allocated size.

	/*

	 * FIXME: If we have multiple fbdev's loaded, we need to

	 * update all info->currcon.  Perhaps, we can place this

	 * in a centralized structure, but this might break some

	 * drivers.

	 *

	 * info->currcon = vc->vc_num;

	/*

	 * make sure we don't unnecessarily trip the memcmp()

	 * in fb_set_var()

 This is protected above by initmem_freed */

 set/clear vc_hi_font_mask and update vc attrs accordingly */

 ++Edmund: reorder the attribute bits */

 ++Edmund: reorder the attribute bits */

/*

 *  User asked to set font; we are guaranteed that

 *	a) width and height are in range 1..32

 *	b) charcount does not exceed 512

 *  but lets not assume that, since someone might someday want to use larger

 *  fonts. And charcount of 512 is small for unicode support.

 *

 *  However, user space gives the font in 32 rows , regardless of

 *  actual font height. So a new API is needed if support for larger fonts

 *  is ever implemented.

	/* Is there a reason why fbconsole couldn't handle any charcount >256?

 Make sure drawing engine can handle the font */

 Make sure driver can handle the font length */

 usage counter */

	/* Since linux has a nice crc32 function use it for counting font

 Check if the same font is on some other console already */

	/*

	 * If framebuffer is capable of less than 16 colors,

	 * use default palette of fbcon.

 Should not happen */

/* As we might be inside of softback, we may work with non-contiguous buffer,

 Clear cursor, restore saved data */

 before deletion, ensure that mode is not in use */

 CONFIG_VT_HW_CONSOLE_BINDING */

 called with console_lock held */

		/* This is sort of like set_con2fb_map, except it maps

		 * the consoles to no device and then releases the

		 * oldinfo to free memory and cancel the cursor blink

		 * timer. I can imagine this just becoming part of

		 * set_con2fb_map where new_idx is -1

 called with console_lock held */

 CONFIG_FRAMEBUFFER_DETECT_PRIMARY */

 called with console_lock held */

/*

 *  The console `switch' structure for the frame buffer based console

 We may get called in atomic context */

/*

 *  Generic 1-bit or 8-bit source to 1-32 bit destination expansion

 *  for frame buffer located in system RAM with packed pixels of any depth.

 *

 *  Based almost entirely on cfbimgblt.c

 *

 *      Copyright (C)  April 2007 Antonino Daplas <adaplas@pol.net>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

 Draw the penguin */

 write leading bits */

 Did the bitshift spill bits to the next long? */

 write trailing bits */

/*

 * fast_imageblit - optimized monochrome color expansion

 *

 * Only if:  bits_per_pixel == 8, 16, or 32

 *           image->width is divisible by pixel/dword (ppw);

 *           fix->line_legth is divisible by 4;

 *           beginning and end of a scanline is dword aligned

/*

 * linux/drivers/video/console/softcursor.c

 *

 * Generic software cursor for frame buffer devices

 *

 *  Created 14 Nov 2002 by James Simmons

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License.  See the file COPYING in the main directory of this

 * archive for more details.

/*

 *  Generic BitBLT function for frame buffer with packed pixels of any depth.

 *

 *      Copyright (C)  June 1999 James Simmons

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

 *

 * NOTES:

 *

 *    This function copys a image from system memory to video memory. The

 *  image can be a bitmap where each 0 represents the background color and

 *  each 1 represents the foreground color. Great for font handling. It can

 *  also be a color image. This is determined by image_depth. The color image

 *  must be laid out exactly in the same format as the framebuffer. Yes I know

 *  their are cards with hardware that coverts images of various depths to the

 *  framebuffer depth. But not every card has this. All images must be rounded

 *  up to the nearest byte. For example a bitmap 12 bits wide must be two 

 *  bytes width. 

 *

 *  Tony: 

 *  Incorporate mask tables similar to fbcon-cfb*.c in 2.4 API.  This speeds 

 *  up the code significantly.

 *  

 *  Code for depths not multiples of BITS_PER_LONG is still kludgy, which is

 *  still processed a bit at a time.   

 *

 *  Also need to add code to deal with cards endians that are different than

 *  the native cpu endians. I also need to deal with MSB position in the word.

 Draw the penguin */

 write leading bits */

 Did the bitshift spill bits to the next long? */

 write trailing bits */

/*

 * fast_imageblit - optimized monochrome color expansion

 *

 * Only if:  bits_per_pixel == 8, 16, or 32

 *           image->width is divisible by pixel/dword (ppw);

 *           fix->line_legth is divisible by 4;

 *           beginning and end of a scanline is dword aligned

/*

 *  linux/drivers/video/modedb.c -- Standard video mode database management

 *

 *	Copyright (C) 1999 Geert Uytterhoeven

 *

 *	2001 - Documented with DocBook

 *	- Brad Douglas <brad@neruo.com>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License. See the file COPYING in the main directory of this archive for

 *  more details.

/*

 *  Standard video mode definitions (taken from XFree86)

 640x400 @ 70 Hz, 31.5 kHz hsync */

 640x480 @ 60 Hz, 31.5 kHz hsync */

 800x600 @ 56 Hz, 35.15 kHz hsync */

 1024x768 @ 87 Hz interlaced, 35.5 kHz hsync */

 640x400 @ 85 Hz, 37.86 kHz hsync */

 640x480 @ 72 Hz, 36.5 kHz hsync */

 640x480 @ 75 Hz, 37.50 kHz hsync */

 800x600 @ 60 Hz, 37.8 kHz hsync */

 640x480 @ 85 Hz, 43.27 kHz hsync */

 1152x864 @ 89 Hz interlaced, 44 kHz hsync */

 800x600 @ 72 Hz, 48.0 kHz hsync */

 1024x768 @ 60 Hz, 48.4 kHz hsync */

 640x480 @ 100 Hz, 53.01 kHz hsync */

 1152x864 @ 60 Hz, 53.5 kHz hsync */

 800x600 @ 85 Hz, 55.84 kHz hsync */

 1024x768 @ 70 Hz, 56.5 kHz hsync */

 1280x1024 @ 87 Hz interlaced, 51 kHz hsync */

 800x600 @ 100 Hz, 64.02 kHz hsync */

 1024x768 @ 76 Hz, 62.5 kHz hsync */

 1152x864 @ 70 Hz, 62.4 kHz hsync */

 1280x1024 @ 61 Hz, 64.2 kHz hsync */

 1400x1050 @ 60Hz, 63.9 kHz hsync */

 1400x1050 @ 75,107 Hz, 82,392 kHz +hsync +vsync*/

 1400x1050 @ 60 Hz, ? kHz +hsync +vsync*/

 1024x768 @ 85 Hz, 70.24 kHz hsync */

 1152x864 @ 78 Hz, 70.8 kHz hsync */

 1280x1024 @ 70 Hz, 74.59 kHz hsync */

 1600x1200 @ 60Hz, 75.00 kHz hsync */

 1152x864 @ 84 Hz, 76.0 kHz hsync */

 1280x1024 @ 74 Hz, 78.85 kHz hsync */

 1024x768 @ 100Hz, 80.21 kHz hsync */

 1280x1024 @ 76 Hz, 81.13 kHz hsync */

 1600x1200 @ 70 Hz, 87.50 kHz hsync */

 1152x864 @ 100 Hz, 89.62 kHz hsync */

 1280x1024 @ 85 Hz, 91.15 kHz hsync */

 1600x1200 @ 75 Hz, 93.75 kHz hsync */

 1680x1050 @ 60 Hz, 65.191 kHz hsync */

 1600x1200 @ 85 Hz, 105.77 kHz hsync */

 1280x1024 @ 100 Hz, 107.16 kHz hsync */

 1800x1440 @ 64Hz, 96.15 kHz hsync  */

 1800x1440 @ 70Hz, 104.52 kHz hsync  */

 512x384 @ 78 Hz, 31.50 kHz hsync */

 512x384 @ 85 Hz, 34.38 kHz hsync */

 320x200 @ 70 Hz, 31.5 kHz hsync, 8:5 aspect ratio */

 320x240 @ 60 Hz, 31.5 kHz hsync, 4:3 aspect ratio */

 320x240 @ 72 Hz, 36.5 kHz hsync */

 400x300 @ 56 Hz, 35.2 kHz hsync, 4:3 aspect ratio */

 400x300 @ 60 Hz, 37.8 kHz hsync */

 400x300 @ 72 Hz, 48.0 kHz hsync */

 480x300 @ 56 Hz, 35.2 kHz hsync, 8:5 aspect ratio */

 480x300 @ 60 Hz, 37.8 kHz hsync */

 480x300 @ 63 Hz, 39.6 kHz hsync */

 480x300 @ 72 Hz, 48.0 kHz hsync */

 1920x1200 @ 60 Hz, 74.5 Khz hsync */

 1152x768, 60 Hz, PowerBook G4 Titanium I and II */

 1366x768, 60 Hz, 47.403 kHz hsync, WXGA 16:9 aspect ratio */

 1280x800, 60 Hz, 47.403 kHz hsync, WXGA 16:10 aspect ratio */

 720x576i @ 50 Hz, 15.625 kHz hsync (PAL RGB) */

 800x520i @ 50 Hz, 15.625 kHz hsync (PAL RGB) */

 864x480 @ 60 Hz, 35.15 kHz hsync */

 0 640x350-85 VESA */

 1 640x400-85 VESA */

 2 720x400-85 VESA */

 3 640x480-60 VESA */

 4 640x480-72 VESA */

 5 640x480-75 VESA */

 6 640x480-85 VESA */

 7 800x600-56 VESA */

 8 800x600-60 VESA */

 9 800x600-72 VESA */

 10 800x600-75 VESA */

 11 800x600-85 VESA */

 12 1024x768i-43 VESA */

 13 1024x768-60 VESA */

 14 1024x768-70 VESA */

 15 1024x768-75 VESA */

 16 1024x768-85 VESA */

 17 1152x864-75 VESA */

 18 1280x960-60 VESA */

 19 1280x960-85 VESA */

 20 1280x1024-60 VESA */

 21 1280x1024-75 VESA */

 22 1280x1024-85 VESA */

 23 1600x1200-60 VESA */

 24 1600x1200-65 VESA */

 25 1600x1200-70 VESA */

 26 1600x1200-75 VESA */

 27 1600x1200-85 VESA */

 28 1792x1344-60 VESA */

 29 1792x1344-75 VESA */

 30 1856x1392-60 VESA */

 31 1856x1392-75 VESA */

 32 1920x1440-60 VESA */

 33 1920x1440-75 VESA */

 34 1920x1200-60 RB VESA */

 35 1920x1200-60 VESA */

 36 1920x1200-75 VESA */

 37 1920x1200-85 VESA */

 38 2560x1600-60 RB VESA */

 39 2560x1600-60 VESA */

 40 2560x1600-75 VESA */

 41 2560x1600-85 VESA */

 42 2560x1600-120 RB VESA */

 CONFIG_FB_MODE_HELPERS */

/**

 *	fb_try_mode - test a video mode

 *	@var: frame buffer user defined part of display

 *	@info: frame buffer info structure

 *	@mode: frame buffer video mode structure

 *	@bpp: color depth in bits per pixel

 *

 *	Tries a video mode to test it's validity for device @info.

 *

 *	Returns 1 on success.

 *

/**

 * fb_find_mode - finds a valid video mode

 * @var: frame buffer user defined part of display

 * @info: frame buffer info structure

 * @mode_option: string video mode to find

 * @db: video mode database

 * @dbsize: size of @db

 * @default_mode: default video mode to fall back to

 * @default_bpp: default color depth in bits per pixel

 *

 * Finds a suitable video mode, starting with the specified mode

 * in @mode_option with fallback to @default_mode.  If

 * @default_mode fails, all modes in the video mode database will

 * be tried.

 *

 * Valid mode specifiers for @mode_option::

 *

 *     <xres>x<yres>[M][R][-<bpp>][@<refresh>][i][p][m]

 *

 * or ::

 *

 *     <name>[-<bpp>][@<refresh>]

 *

 * with <xres>, <yres>, <bpp> and <refresh> decimal numbers and

 * <name> a string.

 *

 * If 'M' is present after yres (and before refresh/bpp if present),

 * the function will compute the timings using VESA(tm) Coordinated

 * Video Timings (CVT).  If 'R' is present after 'M', will compute with

 * reduced blanking (for flatpanels).  If 'i' or 'p' are present, compute

 * interlaced or progressive mode.  If 'm' is present, add margins equal

 * to 1.8% of xres rounded down to 8 pixels, and 1.8% of yres. The char

 * 'i', 'p' and 'm' must be after 'M' and 'R'. Example::

 *

 *     1024x768MR-8@60m - Reduced blank with margins at 60Hz.

 *

 * NOTE: The passed struct @var is _not_ cleared!  This allows you

 * to supply values for e.g. the grayscale and accel_flags fields.

 *

 * Returns zero for failure, 1 if using specified @mode_option,

 * 2 if using specified @mode_option with an ignored refresh rate,

 * 3 if default mode is used, 4 if fall back to any valid mode.

 Set up defaults */

 Did the user specify a video mode? */

			/*

			 * If the caller has provided a custom mode database and

			 * a valid monspecs structure, we look for the mode with

			 * the highest refresh rate.  Otherwise we play it safe

			 * it and try to find a mode with a refresh rate closest

			 * to the standard 60 Hz.

				/*

				 * Penalize modes with resolutions smaller

				 * than requested.

/**

 * fb_var_to_videomode - convert fb_var_screeninfo to fb_videomode

 * @mode: pointer to struct fb_videomode

 * @var: pointer to struct fb_var_screeninfo

/**

 * fb_videomode_to_var - convert fb_videomode to fb_var_screeninfo

 * @var: pointer to struct fb_var_screeninfo

 * @mode: pointer to struct fb_videomode

/**

 * fb_mode_is_equal - compare 2 videomodes

 * @mode1: first videomode

 * @mode2: second videomode

 *

 * RETURNS:

 * 1 if equal, 0 if not

/**

 * fb_find_best_mode - find best matching videomode

 * @var: pointer to struct fb_var_screeninfo

 * @head: pointer to struct list_head of modelist

 *

 * RETURNS:

 * struct fb_videomode, NULL if none found

 *

 * IMPORTANT:

 * This function assumes that all modelist entries in

 * info->modelist are valid.

 *

 * NOTES:

 * Finds best matching videomode which has an equal or greater dimension than

 * var->xres and var->yres.  If more than 1 videomode is found, will return

 * the videomode with the highest refresh rate

/**

 * fb_find_nearest_mode - find closest videomode

 *

 * @mode: pointer to struct fb_videomode

 * @head: pointer to modelist

 *

 * Finds best matching videomode, smaller or greater in dimension.

 * If more than 1 videomode is found, will return the videomode with

 * the closest refresh rate.

/**

 * fb_match_mode - find a videomode which exactly matches the timings in var

 * @var: pointer to struct fb_var_screeninfo

 * @head: pointer to struct list_head of modelist

 *

 * RETURNS:

 * struct fb_videomode, NULL if none found

/**

 * fb_add_videomode - adds videomode entry to modelist

 * @mode: videomode to add

 * @head: struct list_head of modelist

 *

 * NOTES:

 * Will only add unmatched mode entries

/**

 * fb_delete_videomode - removed videomode entry from modelist

 * @mode: videomode to remove

 * @head: struct list_head of modelist

 *

 * NOTES:

 * Will remove all matching mode entries

/**

 * fb_destroy_modelist - destroy modelist

 * @head: struct list_head of modelist

/**

 * fb_videomode_to_modelist - convert mode array to mode list

 * @modedb: array of struct fb_videomode

 * @num: number of entries in array

 * @head: struct list_head of modelist

 get the first detailed mode and the very first mode */

 first detailed timing is preferred */

 find best mode based on display width and height */

 use first detailed mode */

 last resort, use the very first mode */

/*

 *  linux/drivers/video/console/fbcon_rotate.c -- Software Rotation

 *

 *      Copyright (C) 2005 Antonino Daplas <adaplas @pol.net>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

/*

 * linux/drivers/video/fbcvt.c - VESA(TM) Coordinated Video Timings

 *

 * Copyright (C) 2005 Antonino Daplas <adaplas@pol.net>

 *

 *      Based from the VESA(TM) Coordinated Video Timing Generator by

 *      Graham Loveridge April 9, 2003 available at

 *      http://www.elo.utfsm.cl/~elo212/docs/CVTd6r1.xls

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

 4:3      */

 16:9     */

 16:10    */

 5:4      */

 15:9     */

 reserved */

 reserved */

 custom   */

 returns hperiod * 1000 */

 returns ideal duty cycle * 1000 */

/*

 * fb_find_mode_cvt - calculate mode using VESA(TM) CVT

 * @mode: pointer to fb_videomode; xres, yres, refresh and vmode must be

 *        pre-filled with the desired values

 * @margins: add margin to calculation (1.8% of xres and yres)

 * @rb: compute with reduced blanking (for flatpanels)

 *

 * RETURNS:

 * 0 for success

 * @mode is filled with computed values.  If interlaced, the refresh field

 * will be filled with the field rate (2x the frame rate)

 *

 * DESCRIPTION:

 * Computes video timings using VESA(TM) Coordinated Video Timings

/*

 *  linux/drivers/video/fb_notify.c

 *

 *  Copyright (C) 2006 Antonino Daplas <adaplas@pol.net>

 *

 *	2001 - Documented with DocBook

 *	- Brad Douglas <brad@neruo.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/**

 *	fb_register_client - register a client notifier

 *	@nb: notifier block to callback on events

 *

 *	Return: 0 on success, negative error code on failure.

/**

 *	fb_unregister_client - unregister a client notifier

 *	@nb: notifier block to callback on events

 *

 *	Return: 0 on success, negative error code on failure.

/**

 * fb_notifier_call_chain - notify clients of fb_events

 * @val: value passed to callback

 * @v: pointer passed to callback

 *

 * Return: The return value of the last notifier function

/*

 *  linux/drivers/video/fb_defio.c

 *

 *  Copyright (C) 2006 Jaya Kumar

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file COPYING in the main directory of this archive

 * for more details.

 to support deferred IO */

 this is to find and return the vmalloc-ed fb pages */

 Skip if deferred io is compiled-in but disabled on this fbdev */

 Kill off the delayed work */

 Run it immediately */

 vm_ops->page_mkwrite handler */

	/* this is a callback we get when userspace first tries to

	write to the page. we schedule a workqueue. that workqueue

	will eventually mkclean the touched pages and execute the

	deferred framebuffer IO. then if userspace touches a page

 protect against the workqueue changing the page list */

 first write in this cycle, notify the driver */

	/*

	 * We want the page to remain locked from ->page_mkwrite until

	 * the PTE is marked dirty to avoid page_mkclean() being called

	 * before the PTE is updated, which would leave the page ignored

	 * by defio.

	 * Do this by locking the page here and informing the caller

	 * about it with VM_FAULT_LOCKED.

	/* we loop through the pagelist before adding in order

		/* this check is to catch the case where a new

		process could start writing to the same page

		through a new pte. this new access can cause the

		mkwrite even when the original ps's pte is marked

 come back after delay to process the deferred IO */

 workqueue callback */

 here we mkclean the pages, then do all deferred IO */

 driver's callback with pagelist */

 clear the list */

 set a default of 1 s */

 clear out the mapping that we setup */

/*

 * linux/drivers/video/fb_sys_read.c - Generic file operations where

 * framebuffer is in system RAM

 *

 * Copyright (C) 2007 Antonino Daplas <adaplas@pol.net>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

/*

 *  linux/drivers/video/console/tileblit.c -- Tile Blitting Operation

 *

 *      Copyright (C) 2004 Antonino Daplas <adaplas @pol.net>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

/*

 *  linux/drivers/video/fb_cmdline.c

 *

 *  Copyright (C) 2014 Intel Corp

 *  Copyright (C) 1994 Martin Schaller

 *

 *	2001 - Documented with DocBook

 *	- Brad Douglas <brad@neruo.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

 * Authors:

 *    Vetter <danie.vetter@ffwll.ch>

/**

 * fb_get_options - get kernel boot parameters

 * @name:   framebuffer name as it would appear in

 *          the boot parameter line

 *          (video=<name>:<options>)

 * @option: the option will be stored here

 *

 * NOTE: Needed to maintain backwards compatibility

 No match, pass global option */

/**

 *	video_setup - process command line options

 *	@options: string of options

 *

 *	Process command line options for frame buffer subsystem.

 *

 *	NOTE: This function is a __setup and __init function.

 *            It only stores the options.  Drivers have to call

 *            fb_get_options() as necessary.

 named */

 global */

/*

 * Common utility functions for VGA-based graphics cards.

 *

 * Copyright (c) 2006-2007 Ondrej Zajicek <santiago@crfreenet.org>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive for

 * more details.

 *

 * Some parts are based on David Boucher's viafb (http://davesdomain.org.uk/viafb/)

 Write a CRT register value spread across multiple registers */

 Write a sequencer register value spread across multiple registers */

 ------------------------------------------------------------------------- */

 Set graphics controller registers to sane values */

 All standard GFX registers (GR00 - GR08) */

	vga_wgfx(regbase, VGA_GFX_MODE, 0x20); */

	vga_wgfx(regbase, VGA_GFX_MODE, 0x40); */

	vga_wgfx(regbase, VGA_GFX_MISC, 0x01); */

 Set attribute controller registers to sane values */

 All standard ATC registers (AR00 - AR14) */

	svga_wattr(regbase, VGA_ATC_MODE, 0x41); */

 Set sequencer registers to sane values */

 Standard sequencer registers (SR01 - SR04), SR00 is not set */

	vga_wseq(regbase, VGA_SEQ_MEMORY_MODE, VGA_SR04_EXT_MEM | VGA_SR04_SEQ_MODE | VGA_SR04_CHN_4M); */

 Set CRTC registers to sane values */

 Standard CRT registers CR03 CR08 CR09 CR14 CR17 */

 Enable vertical retrace EVRA */

 svga_wseq_mask(regbase, 0x1, 0x00, 0x01); */   
 0x4f */

 Odd/even memory mode */

 Misc graphics register - text mode enable */

 Attribute Mode Control Register - text mode, blinking and line graphics */

 Horizontal Pixel Panning Register  */

  0  */

 ------------------------------------------------------------------------- */

			fb[i * 4] = font[i];

 Copy area in text (tileblit) mode */

  colstride is halved in this function because u16 are used */

			*dst2 = *src2;

 Fill area in text (tileblit) mode */

 Write text in text (tileblit) mode */

 Set cursor in text (tileblit) mode */

 disable cursor */

 set cursor position */

 set cursor end */

 set cursor start and enable it */

 Get capabilities of accelerator based on the mode */

 can only support 256 8x16 bitmap */

 ------------------------------------------------------------------------- */

/*

 *  Compute PLL settings (M, N, R)

 *  F_VCO = (F_BASE * M) / N

 *  F_OUT = F_VCO / (2^R)

 overflow check */

	/* It is usually better to have greater VCO clock

	   because of better frequency stability.

 VCO bounds check */

 ------------------------------------------------------------------------- */

 Check CRT timing values */

 Check horizontal total */

 Check horizontal display and blank start */

 Check horizontal sync start */

 Check horizontal blank end (or length) */

 Check horizontal sync end (or length) */

 Check vertical total */

 Check vertical display and blank start */

 Check vertical sync start */

 Check vertical blank end (or length) */

 Check vertical sync end  (or length) */

 Set CRT timing registers */

 Set horizontal and vertical sync pulse polarity in misc register */

 ------------------------------------------------------------------------- */

/*

 *  Generic fillrect for frame buffers with packed pixels of any depth.

 *

 *      Copyright (C)  2000 James Simmons (jsimmons@linux-fbdev.org)

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

 *

 * NOTES:

 *

 *  Also need to add code to deal with cards endians that are different than

 *  the native cpu endians. I also need to deal with MSB position in the word.

 *

    /*

     *  Aligned pattern fill using 32/64-bit memory accesses

 Single word

 Multiple destination words

 Leading bits

 Main chunk

 Trailing bits

    /*

     *  Unaligned generic pattern fill using 32/64-bit memory accesses

     *  The pattern must have been expanded to a full 32/64-bit value

     *  Left/right are the appropriate shifts to convert to the pattern to be

     *  used for the next 32/64-bit word

 Single word

 Multiple destination words

 Leading bits

 Main chunk

 Trailing bits

    /*

     *  Aligned pattern invert using 32/64-bit memory accesses

 Single word

 Multiple destination words

 Leading bits

 Main chunk

 Trailing bits

    /*

     *  Unaligned generic pattern invert using 32/64-bit memory accesses

     *  The pattern must have been expanded to a full 32/64-bit value

     *  Left/right are the appropriate shifts to convert to the pattern to be

     *  used for the next 32/64-bit word

 Single word

 Multiple destination words

 Leading bits

 Main chunk

 Trailing bits

 FIXME For now we support 1-32 bpp only */

 rotate pattern to the correct start position */

/*

 * drivers/video/fb_ddc.c - DDC/EDID read support.

 *

 *  Copyright (C) 2006 Dennis Munsie <dmunsie@cecropia.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

		/* For some old monitors we need the

		 * following process to initialize/stop DDC

 Do the real work */

	/* Release the DDC lines when done or the Apple Cinema HD display

	 * will switch off

/*

 *  linux/drivers/video/fbmem.c

 *

 *  Copyright (C) 1994 Martin Schaller

 *

 *	2001 - Documented with DocBook

 *	- Brad Douglas <brad@neruo.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

    /*

     *  Frame buffer device initialization and setup routines

/*

 * Helpers

/*

 * Data padding functions.

/*

 * we need to lock this section since fb_cursor

 * may use fb_imageblit()

	/* If IO mapped, we need to sync before access, no sharing of

	 * the pixmap is done

 See if we fit in the remaining pixmap space */

		/* We do not fit. In order to be able to re-use the buffer,

		 * we must ensure no asynchronous DMA'ing or whatever operation

		 * is in progress, we sync for that.

 palette_cmap provides space for only 16 colors at once */

	/*

	 * We have to create a temporary palette since console palette is only

	 * 16 colors long.

 Bug: Doesn't obey msb_right ... (who needs that?) */

/*

 * Three (3) kinds of logo maps exist.  linux_logo_clut224 (>16 colors),

 * linux_logo_vga16 (16 colors) and linux_logo_mono (2 colors).  Depending on

 * the visual format and color depth of the framebuffer, the DAC, the

 * pseudo_palette, and the logo data will be adjusted accordingly.

 *

 * Case 1 - linux_logo_clut224:

 * Color exceeds the number of console colors (16), thus we set the hardware DAC

 * using fb_set_cmap() appropriately.  The "needs_cmapreset"  flag will be set.

 *

 * For visuals that require color info from the pseudo_palette, we also construct

 * one for temporary use. The "needs_directpalette" or "needs_truepalette" flags

 * will be set.

 *

 * Case 2 - linux_logo_vga16:

 * The number of colors just matches the console colors, thus there is no need

 * to set the DAC or the pseudo_palette.  However, the bitmap is packed, ie,

 * each byte contains color information for two pixels (upper and lower nibble).

 * To be consistent with fb_imageblit() usage, we therefore separate the two

 * nibbles into separate bytes. The "depth" flag will be set to 4.

 *

 * Case 3 - linux_logo_mono:

 * This is similar with Case 2.  Each byte contains information for 8 pixels.

 * We isolate each bit and expand each into a byte. The "depth" flag will

 * be set to 1.

 Return if the frame buffer is not mapped or suspended */

 FIXME: logo_ex supports only truecolor fb. */

 !CONFIG_FB_LOGO_EXTRA */

 CONFIG_FB_LOGO_EXTRA */

 assume console colormap */

 Return if no suitable logo was found */

 What depth we asked for might be different from what we get */

 CONFIG_LOGO */

/*

 * We hold a reference to the fb_info in file->private_data,

 * but if the current registered fb has changed, we don't

 * actually want to use it.

 *

 * So look up the fb_info using the inode minor number,

 * and just verify it against the reference we have.

 make sure we don't delete the videomode of current var */

	/* When using FOURCC mode, make sure the red, green, blue and

	 * transp fields are set to 0.

 bitfill_aligned() assumes that it's at least 8x8 */

 Too huge resolution causes multiplication overflow. */

 might again call into fb_blank */

		/*

		 * The framebuffer needs to be accessed decrypted, be sure

		 * SME protection is removed ahead of the call

	/*

	 * Ugh. This can be either the frame buffer mapping, or

	 * if pgoff points past it, the mmio mapping.

 __BIG_ENDIAN */

 is the generic aperture base the same as the HW one */

 is the generic aperture base inside the hw base->hw base+size */

 check all firmware fbs and kick off if the base addr overlaps */

 Not fatal */

 this may free fb info */

/**

 * remove_conflicting_framebuffers - remove firmware-configured framebuffers

 * @a: memory range, users of which are to be removed

 * @name: requesting driver name

 * @primary: also kick vga16fb if present

 *

 * This function removes framebuffer devices (initialized by firmware/bootloader)

 * which use memory range described by @a. If @a is NULL all such devices are

 * removed.

/**

 * remove_conflicting_pci_framebuffers - remove firmware-configured framebuffers for PCI devices

 * @pdev: PCI device

 * @name: requesting driver name

 *

 * This function removes framebuffer devices (eg. initialized by firmware)

 * using memory range configured for any of @pdev's memory bars.

 *

 * The function assumes that PCI device with shadowed ROM drives a primary

 * display and so kicks out vga16fb.

/**

 *	register_framebuffer - registers a frame buffer device

 *	@fb_info: frame buffer info structure

 *

 *	Registers a frame buffer device @fb_info.

 *

 *	Returns negative errno on error, or zero for success.

 *

/**

 *	unregister_framebuffer - releases a frame buffer device

 *	@fb_info: frame buffer info structure

 *

 *	Unregisters a frame buffer device @fb_info.

 *

 *	Returns negative errno on error, or zero for success.

 *

 *      This function will also notify the framebuffer console

 *      to release the driver.

 *

 *      This is meant to be called within a driver's module_exit()

 *      function. If this is called outside module_exit(), ensure

 *      that the driver implements fb_open() and fb_release() to

 *      check that no processes are using the device.

/**

 *	fb_set_suspend - low level driver signals suspend

 *	@info: framebuffer affected

 *	@state: 0 = resuming, !=0 = suspending

 *

 *	This is meant to be used by low level drivers to

 * 	signal suspend/resume to the core & clients.

 *	It must be called with the console semaphore held

/**

 *	fbmem_init - init frame buffer subsystem

 *

 *	Initialize the frame buffer subsystem.

 *

 *	NOTE: This function is _only_ to be called by drivers/char/mem.c.

 *

/*

 *  linux/drivers/video/console/fbcon_ud.c -- Software Rotation - 90 degrees

 *

 *      Copyright (C) 2005 Antonino Daplas <adaplas @pol.net>

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive for

 *  more details.

/*

 * Rotation 90 degrees

	/* buf is always NULL except when in monochrome mode, so in this case

	   it's a gain to check buf against NULL even though kfree() handles

/*

 * linux/drivers/video/riva/fbdev.c - nVidia RIVA 128/TNT/TNT2 fb driver

 *

 * Maintained by Ani Joshi <ajoshi@shell.unixbox.com>

 *

 * Copyright 1999-2000 Jeff Garzik

 *

 * Contributors:

 *

 *	Ani Joshi:  Lots of debugging and cleanup work, really helped

 *	get the driver going

 *

 *	Ferenc Bakonyi:  Bug fixes, cleanup, modularization

 *

 *	Jindrich Makovicka:  Accel code help, hw cursor, mtrr

 *

 *	Paul Richards:  Bug fixes, updates

 *

 * Initial template from skeletonfb.c, created 28 Dec 1997 by Geert Uytterhoeven

 * Includes riva_hw.c from nVidia, see copyright below.

 * KGI code provided the basis for state storage, init, and mode switching.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

 * Known bugs and issues:

 *	restoring text mode fails

 *	doublescan modes are broken

 version number of this driver */

/* ------------------------------------------------------------------------- *

 *

 * various helpful macros and constants

 *

 macro that allows you to set overflow bits */

 HW cursor parameters */

/* ------------------------------------------------------------------------- *

 *

 * prototypes

 *

/* ------------------------------------------------------------------------- *

 *

 * card identification

 *

 NF2/IGP version, GeForce 4 MX, NV18

 terminate list */

/* ------------------------------------------------------------------------- *

 *

 * global variables

 *

 command line data, set in rivafb_setup() */

 Autodetect later */

 from GGI */

 ATTR */

 CRT  */

 0x10 */

 0x20 */

 0x30 */

 0x40 */

 GRA  */

 SEQ  */

 MISC */

/*

 * Backlight control

/* We do not have any information about which values are allowed, thus

 * we used safe values.

 Get and convert the value */

 No locking on bl_curve since accessing a single value */

 backlight bit */

 level */

 CONFIG_FB_RIVA_BACKLIGHT */

/* ------------------------------------------------------------------------- *

 *

 * MMIO access macros

 *

/* ------------------------------------------------------------------------- *

 *

 * cursor stuff

 *

/**

 * rivafb_load_cursor_image - load cursor image to hardware

 * @data8: address to monochrome bitmap (1 = foreground color, 0 = background)

 * @par:  pointer to private data

 * @w:    width of cursor image in pixels

 * @h:    height of cursor image in scanlines

 * @bg:   background color (ARGB1555) - alpha bit determines opacity

 * @fg:   foreground color (ARGB1555)

 *

 * DESCRIPTiON:

 * Loads cursor image based on a monochrome source and mask bitmap.  The

 * image bits determines the color of the pixel, 0 for background, 1 for

 * foreground.  Only the affected region (as determined by @w and @h 

 * parameters) will be updated.

 *

 * CALLED FROM:

 * rivafb_cursor()

/* ------------------------------------------------------------------------- *

 *

 * general utility functions

 *

/**

 * riva_wclut - set CLUT entry

 * @chip: pointer to RIVA_HW_INST object

 * @regnum: register number

 * @red: red component

 * @green: green component

 * @blue: blue component

 *

 * DESCRIPTION:

 * Sets color register @regnum.

 *

 * CALLED FROM:

 * rivafb_setcolreg()

/**

 * riva_rclut - read fromCLUT register

 * @chip: pointer to RIVA_HW_INST object

 * @regnum: register number

 * @red: red component

 * @green: green component

 * @blue: blue component

 *

 * DESCRIPTION:

 * Reads red, green, and blue from color register @regnum.

 *

 * CALLED FROM:

 * rivafb_setcolreg()

/**

 * riva_save_state - saves current chip state

 * @par: pointer to riva_par object containing info for current riva board

 * @regs: pointer to riva_regs object

 *

 * DESCRIPTION:

 * Saves current chip state to @regs.

 *

 * CALLED FROM:

 * rivafb_probe()

 from GGI */

/**

 * riva_load_state - loads current chip state

 * @par: pointer to riva_par object containing info for current riva board

 * @regs: pointer to riva_regs object

 *

 * DESCRIPTION:

 * Loads chip state from @regs.

 *

 * CALLED FROM:

 * riva_load_video_mode()

 * rivafb_probe()

 * rivafb_remove()

 from GGI */

/**

 * riva_load_video_mode - calculate timings

 * @info: pointer to fb_info object containing info for current riva board

 *

 * DESCRIPTION:

 * Calculate some timings and then send em off to riva_load_state().

 *

 * CALLED FROM:

 * rivafb_set_par()

 time to calculate */

 interlace off */

 important for HW cursor */

/**

 * rivafb_do_maximize - 

 * @info: pointer to fb_info object containing info for current riva board

 * @var: standard kernel fb changeable data

 * @nom: nom

 * @den: den

 *

 * DESCRIPTION:

 * .

 *

 * RETURNS:

 * -EINVAL on failure, 0 on success

 * 

 *

 * CALLED FROM:

 * rivafb_check_var()

 use highest possible virtual resolution */

 acceleration routines */

/*

 * Set ROP.  Translate X rop into ROP3.  Internal routine.

/**

 * riva_get_cmap_len - query current color map length

 * @var: standard kernel fb changeable data

 *

 * DESCRIPTION:

 * Get current color map length.

 *

 * RETURNS:

 * Length of color map

 *

 * CALLED FROM:

 * rivafb_setcolreg()

 reasonable default */

 256 entries (2^8), 8 bpp and RGB8888 */

 32 entries (2^5), 16 bpp, RGB555 */

 64 entries (2^6), 16 bpp, RGB565 */

 should not occur */

/* ------------------------------------------------------------------------- *

 *

 * framebuffer operations

 *

 save the DAC for Riva128 */

 vgaHWunlock() + riva unlock (0x7F) */

 translating from pixels->bytes */

 The Riva128 supports RGB555 only */

 0rrrrrgg gggbbbbb */

 rrrrrggg gggbbbbb */

 calculate modeline if supported by monitor */

 truncate xoffset and yoffset to maximum if too high */

 vgaHWunlock() + riva unlock (0x7F) */

/**

 * rivafb_pan_display

 * @var: standard kernel fb changeable data

 * @info: pointer to fb_info object containing info for current riva board

 *

 * DESCRIPTION:

 * Pan (or wrap, depending on the `vmode' field) the display using the

 * `xoffset' and `yoffset' fields of the `var' structure.

 * If the values don't fit, return -EINVAL.

 *

 * This call looks only at xoffset, yoffset and the FB_VMODE_YWRAP flag

 screen on/off */

 sync on/off */

/**

 * rivafb_setcolreg

 * @regno: register index

 * @red: red component

 * @green: green component

 * @blue: blue component

 * @transp: transparency

 * @info: pointer to fb_info object containing info for current riva board

 *

 * DESCRIPTION:

 * Set a single color register. The values supplied have a 16 bit

 * magnitude.

 *

 * RETURNS:

 * Return != 0 for invalid regno.

 *

 * CALLED FROM:

 * fbcmap.c:fb_set_cmap()

 gray = 0.30*R + 0.59*G + 0.11*B */

		/*

		 * The Riva128 2D engine requires color information in

		 * TrueColor format even if framebuffer is in DirectColor

 "transparent" stuff is completely ignored. */

 do nothing */

/**

 * rivafb_fillrect - hardware accelerated color fill function

 * @info: pointer to fb_info structure

 * @rect: pointer to fb_fillrect structure

 *

 * DESCRIPTION:

 * This function fills up a region of framebuffer memory with a solid

 * color with a choice of two different ROP's, copy or invert.

 *

 * CALLED FROM:

 * framebuffer hook

/**

 * rivafb_copyarea - hardware accelerated blit function

 * @info: pointer to fb_info structure

 * @region: pointer to fb_copyarea structure

 *

 * DESCRIPTION:

 * This copies an area of pixels from one location to another

 *

 * CALLED FROM:

 * framebuffer hook

/**

 * rivafb_imageblit: hardware accelerated color expand function

 * @info: pointer to fb_info structure

 * @image: pointer to fb_image structure

 *

 * DESCRIPTION:

 * If the source is a monochrome bitmap, the function fills up a a region

 * of framebuffer memory with pixels whose color is determined by the bit

 * setting of the bitmap, 1 - foreground, 0 - background.

 *

 * If the source is not a monochrome bitmap, color expansion is not done.

 * In this case, it is channeled to a software function.

 *

 * CALLED FROM:

 * framebuffer hook

/**

 * rivafb_cursor - hardware cursor function

 * @info: pointer to info structure

 * @cursor: pointer to fbcursor structure

 *

 * DESCRIPTION:

 * A cursor function that supports displaying a cursor image via hardware.

 * Within the kernel, copy and invert rops are supported.  If exported

 * to user space, only the copy rop will be supported.

 *

 * CALLED FROM

 * framebuffer hook

/* ------------------------------------------------------------------------- *

 *

 * initialization helper functions

 *

 kernel interface */

 Accel seems to not work properly on NV30 yet...*/

 CONFIG_FB_RIVA_I2C */

 respect mode options */

 get first mode in database as fallback */

 get preferred timing */

 if user specified flatpanel, we respect that */

/* ------------------------------------------------------------------------- *

 *

 * PCI bus

 *

 GeForce 256 */

 GeForce2 MX */

 GeForce2 */

 GeForce4 MX */

 GeForce4 MX (8x AGP) */

 nForce */

 nForce2 */

 GeForce3 */

 GeForce4 Ti */

 GeForce4 Ti (8x AGP) */

 GeForceFX 5800 */

 GeForceFX 5600 */

 GeForceFX 5200 */

 GeForceFX 5900 */

 GeForceFX 5700 */

 TNT, TNT2 */

 Riva128 */

 unknown architecture */

 enable IO and mem if not already done */

		/* Riva128's PRAMIN is in the "framebuffer" space

		 * Since these cards were never made with more than 8 megabytes

		 * we can safely allocate this separately.

/* ------------------------------------------------------------------------- *

 *

 * initialization

 *

 !MODULE */

/* ------------------------------------------------------------------------- *

 *

 * modularization

 *

/*

 * linux/drivers/video/riva/fbdev-i2c.c - nVidia i2c

 *

 * Maintained by Ani Joshi <ajoshi@shell.unixbox.com>

 *

 * Copyright 2004 Antonino A. Daplas <adaplas @pol.net>

 *

 * Based on radeonfb-i2c.c

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 Raise SCL and SDA */

 $XConsortium: nv_driver.c /main/3 1996/10/28 05:13:37 kaleb $ */

/*

 * Copyright 1996-1997  David J. McKay

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * DAVID J. MCKAY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,

 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF

 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * GPL licensing note -- nVidia is allowing a liberal interpretation of

 * the documentation restriction above, to merely say that this nVidia's

 * copyright and disclaimer should be included with all code derived

 * from this source.  -- Jeff Garzik <jgarzik@pobox.com>, 01/Nov/99 

/* Hacked together from mga driver and 3.3.4 NVIDIA driver by Jarno Paananen

/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/nv_setup.c,v 1.18 2002/08/0

 this might not be a good default for the chips below */

 default */

				/*

				 * SDRAM 128 ZX.

			/*

			 * SGRAM 128.

				/*

				 * SDRAM 128 ZX.

			/*

			 * SGRAM 128.

 known laptop chips */

 Fix me, need x86 DDC code */

 /***************************************************************************\

|*                                                                           *|

|*       Copyright 1993-1999 NVIDIA, Corporation.  All rights reserved.      *|

|*                                                                           *|

|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|

|*     international laws.  Users and possessors of this source code are     *|

|*     hereby granted a nonexclusive,  royalty-free copyright license to     *|

|*     use this code in individual and commercial software.                  *|

|*                                                                           *|

|*     Any use of this source code must include,  in the user documenta-     *|

|*     tion and  internal comments to the code,  notices to the end user     *|

|*     as follows:                                                           *|

|*                                                                           *|

|*       Copyright 1993-1999 NVIDIA, Corporation.  All rights reserved.      *|

|*                                                                           *|

|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|

|*     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     *|

|*     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     *|

|*     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     *|

|*     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     *|

|*     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     *|

|*     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     *|

|*     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     *|

|*     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     *|

|*     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     *|

|*     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     *|

|*                                                                           *|

|*     U.S. Government  End  Users.   This source code  is a "commercial     *|

|*     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     *|

|*     consisting  of "commercial  computer  software"  and  "commercial     *|

|*     computer  software  documentation,"  as such  terms  are  used in     *|

|*     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     *|

|*     ment only as  a commercial end item.   Consistent with  48 C.F.R.     *|

|*     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     *|

|*     all U.S. Government End Users  acquire the source code  with only     *|

|*     those rights set forth herein.                                        *|

|*                                                                           *|

/*

 * GPL licensing note -- nVidia is allowing a liberal interpretation of

 * the documentation restriction above, to merely say that this nVidia's

 * copyright and disclaimer should be included with all code derived

 * from this source.  -- Jeff Garzik <jgarzik@pobox.com>, 01/Nov/99 

 $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/riva_hw.c,v 1.33 2002/08/05 20:47:06 mvojkovi Exp $ */

/*

 * This file is an OS-agnostic file used to make RIVA 128 and RIVA TNT

 * operate identically (except TNT has more memory and better 3D quality.

/****************************************************************************\

*                                                                            *

* The video arbitration routines calculate some "magic" numbers.  Fixes      *

* the snow seen when accessing the framebuffer without it.                   *

* It just works (I hope).                                                    *

*                                                                            *

 freq in KHz */

 lwm detect. */

 lwm -> sync. */

 fbi bus cycles (1 req + 1 busy) */

 2 edge sync.  may be very close to edge so just put one. */

 arb_hp_req */

 ap_hp_req   tiling pipeline */

 tc_req     latency fifo */

 fb_cas_n_  memory request to fbio block */

 sm_d_rdv   data returned from fbio block */

 fb.rd.d.Put_gc   need to accumulate 256 bits for read */

 64 bit bus */

 64 bit bus */

 Margin of error */

 Margin of error */

 mclk_extra = 4; */ 
 2 edge sync.  may be very close to edge so just put one. */

 fbi_d_rdv_n */

 Fbi_d_rdata */

 crtfifo load */

 Mp can get in with a burst of 8. */

 Extra clocks determined by heuristics */

 Mclk latency in us */

 Minimum Mclk latency in us */

 nvclk latency in us */

 nvclk latency in us */

 Mclk latency in us */

 MB/s */

 self generating page miss */

 One higher priority before */

 self generating page miss */

 if MA0 conflict */

 Video has separate read return path */

 Wait for video */

 CRT Page miss */

 other latency */

 fixed point <= float_point - 1.  Fixes that */

 bpp * pclk/8 */

 self generating page miss */

 MA0 page miss */

 if MA0 conflict */

 fixed point <= float_point - 1.  Fixes that */

  /*

          //

          // Another concern, only for high pclks so don't do this

          // with video:

          // What happens if the latency to fetch the cbs is so large that

          // fifo empties.  In that case we need to have an alternate clwm value

          // based off the total burst fetch

          //

          us_crt = (cbs * 1000 * 1000)/ (8*width)/mclk_freq ;

          us_crt = us_crt + us_m + us_n + us_p + (4 * 1000 * 1000)/mclk_freq;

          clwm_mt = us_crt * crtc_drain_rate/(1000*1000);

          clwm_mt ++;

          if(clwm_mt > clwm)

              clwm = clwm_mt;

 Finally, a heuristic check when width == 64 bits */

Large number to fail */

      /*

        Overfill check:



 Amount of overfill */

 pclk cycles to drain */

 bytes drained. */

 Can't adjust anymore! */

 reduce the burst size */

 Have some margin */

 Can't adjust anymore! */

  printf("CRT LWM: %f bytes, prog: 0x%x, bs: 256\n", clwm, data ); */

  printf("VID LWM: %f bytes, prog: 0x%x, bs: %d\n, ", vlwm, data, vbs ); */

/****************************************************************************\

*                                                                            *

*                          RIVA Mode State Routines                          *

*                                                                            *

/*

 * Calculate the Video Clock parameters for the PLL.

 non-zero: M/N/P/clock values assigned.  zero: error (not set) */

/*

 * Calculate extended mode parameters (SVGA) and save in a 

 * mode state structure.

    /*

     * Save mode parameters.

 this is not bitsPerPixel, it's 8,15,16,32 */

    /*

     * Extended RIVA registers.

 Paul Richards: below if block borks things in kernel for some reason */

 Tony: Below is needed to set hardware in DirectColor */

/*

 * Load fixed function state and pre-calculated/stored state.

            /*

             * Initialize state for the RivaTriangle3D05 routines.

    /*

     * Load HW fixed function state.

            /*

             * Make sure frame buffer config gets set before loading PRAMIN.

            /*

             * Make sure frame buffer config gets set before loading PRAMIN.

    /*

     * Load HW mode state.

    /*

     * Turn off VBlank enable and reset.

    /*

     * Set interrupt enable.

    /*

     * Set current state pointer.

    /*

     * Reset FIFO free and empty counts.

 Free count from first subchannel */

    /*

     * Save current HW state.

    /*

     * Unlock extended registers.

    /*

     * Set start address.

    /*

     * 4 pixel pan register.

/****************************************************************************\

*                                                                            *

*                      Probe RIVA Chip Configuration                         *

*                                                                            *

    /*

     * Fill in chip configuration.

            /*

             * SDRAM 128 ZX.

        /*

         * SGRAM 128.

    /*

     * Set chip functions.

    /*

     * Fill in chip configuration.

    /*

     * Set chip functions.

 turn on big endian register access */

    /*

     * Fill in chip configuration.

 can't set this here */

    /*

     * Set chip functions.

    /*

     * Save this so future SW know whats it's dealing with.

    /*

     * Chip specific configuration.

    /*

     * Fill in FIFO pointers.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) Intel Corp. 2007.

 * All Rights Reserved.

 *

 * Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to

 * develop this driver.

 *

 * This file is part of the Vermilion Range fb driver.

 *

 * Authors:

 *   Thomas Hellström <thomas-at-tungstengraphics-dot-com>

 *   Michel Dänzer <michel-at-tungstengraphics-dot-com>

 *   Alan Hourihane <alanh-at-tungstengraphics-dot-com>

 #define VERMILION_DEBUG */

/*

 * Allocate a contiguous vram area and make its linear kernel map

 * uncached.

		/*

		 * Really try hard to get the needed memory.

		 * We need memory below the first 32MB, so we

		 * add the __GFP_DMA flag that guarantees that we are

		 * below the first 16MB.

	/*

	 * It seems like __get_free_pages only ups the usage count

	 * of the first page. This doesn't work with fault mapping, so

	 * up the usage count once more (XXX: should use split_page or

	 * compound page).

	/*

	 * Change caching policy of the linear kernel map to avoid

	 * mapping type conflicts with user-space mappings.

/*

 * Free a contiguous vram area and reset its linear kernel map

 * mapping type.

		/*

		 * Reset the linear kernel map caching policy.

		/*

		 * Decrease the usage count on the pages we've used

		 * to compensate for upping when allocating.

/*

 * Free allocated vram.

/*

 * Allocate vram. Currently we try to allocate contiguous areas from the

 * __GFP_DMA zone and puzzle them together. A better approach would be to

 * allocate one contiguous area for scanout and use one-page allocations for

 * offscreen areas. This requires user-space and GPU virtual mappings.

/*

 * Find the GPU to use with our display controller.

/*

 * Find a contiguous vram area that contains a given offset from vram start.

/*

 * Remap the MMIO register spaces of the VDC and the GPU.

/*

 * Unmap the VDC and GPU register spaces.

/*

 * Release and uninit the VDC and GPU.

/*

 * Free up allocated resources for a device.

/*

 * Device initialization.

 * We initialize one vml_par struct per device and one vml_info

 * struct per pipe. Currently we have only one pipe.

	/*

	 * Save registers here?

	/*

	 * Restore registers here.

	/*

	 * Accept a 20% diff.

 Wait for vblank. For now, just wait for a 50Hz cycle (20ms)) */

 Disable the MDVO pad */

 Disable display planes */

 Wait for vblank for the disable to take effect */

 Next, disable display pipes */

 just to force soft_cursor() call */

	/*

	 * We need to restart list traversal for each item, since we

	 * release the list mutex in the loop.

		/*

		 * First, try the current mode which might not be

		 * completely validated with respect to the pixel clock.

			/*

			 * Didn't work. Try to find another mode,

			 * that matches this subsys.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) Intel Corp. 2007.

 * All Rights Reserved.

 *

 * Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to

 * develop this driver.

 *

 * This file is part of the Carillo Ranch video subsystem driver.

 *

 * Authors:

 *   Thomas Hellstrom <thomas-at-tungstengraphics-dot-com>

 *   Alan Hourihane <alanh-at-tungstengraphics-dot-com>

 The PLL Clock register sits on Host bridge */

	    /*

	     * There are more clocks, but they are disabled on the CR board.

/*

 * linux/drivers/video/savage/savagefb-i2c.c - S3 Savage DDC2

 *

 * Copyright 2004 Antonino A. Daplas <adaplas @pol.net>

 *

 * Based partly on rivafb-i2c.c

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 I2C serial communications interface */

 DDC2 monitor communications interface */

 based on vt8365 documentation */

 flush posted write */

 flush posted write */

 Raise SCL and SDA */

 try to get from firmware */

/*-*- linux-c -*-

 *  linux/drivers/video/savage/savage_accel.c -- Hardware Acceleration

 *

 *      Copyright (C) 2004 Antonino Daplas<adaplas@pol.net>

 *      All Rights Reserved

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License. See the file COPYING in the main directory of this archive for

 *  more details.

 ROP_COPY */

 ROP_XOR  */

/*

 * linux/drivers/video/savagefb.c -- S3 Savage Framebuffer Driver

 *

 * Copyright (c) 2001-2002  Denis Oliver Kropp <dok@directfb.org>

 *                          Sven Neumann <neo@directfb.org>

 *

 *

 * Card specific code is based on XFree86's savage driver.

 * Framebuffer framework code is based on code of cyber2000fb and tdfxfb.

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License.  See the file COPYING in the main directory of this

 * archive for more details.

 *

 * 0.4.0 (neo)

 *  - hardware accelerated clear and move

 *

 * 0.3.2 (dok)

 *  - wait for vertical retrace before writing to cr67

 *    at the beginning of savagefb_set_par

 *  - use synchronization registers cr23 and cr26

 *

 * 0.3.1 (dok)

 *  - reset 3D engine

 *  - don't return alpha bits for 32bit format

 *

 * 0.3.0 (dok)

 *  - added WaitIdle functions for all Savage types

 *  - do WaitIdle before mode switching

 *  - code cleanup

 *

 * 0.2.0 (dok)

 *  - first working version

 *

 *

 * TODO

 * - clock validations in decode_var

 *

 * BUGS

 * - white margin on bootup

 *

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 Synchronous Reset */

 End Reset */

		/*

		 * Turn off screen and disable sequencer.

 start synchronous reset */

 disable the display */

		/*

		 * Reenable sequencer, then turn on screen.

 reenable display */

 clear synchronous reset */

	/* Ensure CRTC registers 0-7 are unlocked by clearing bit 7 or

	/*

	 * Time Sequencer

 Font select */

 Misc */

	/*

	 * CRTC Controller

	/*

	 * are these unnecessary?

	 * vgaHWHBlankKGA(mode, regp, 0, KGA_FIX_OVERSCAN|KGA_ENABLE_ON_ZERO);

	 * vgaHWVBlankKGA(mode, regp, 0, KGA_FIX_OVERSCAN|KGA_ENABLE_ON_ZERO);

	/*

	 * Graphics Display Controller

 only map 64k VGA memory !!!! */

 standard colormap translation */

 -------------------- Hardware specific routines ------------------------- */

/*

 * Hardware Acceleration for SavageFB

 Wait for fifo space */

 Wait for idle accelerator */

 Disable BCI */

 Setup BCI command overflow buffer */

 Program shadow status update. */

 Enable BCI and command overflow buffer */

 Disable BCI */

 Program shadow status update */

 Enable BCI without the COB */

 Disable BCI */

 Setup BCI command overflow buffer */

 Disable shadow status update */

 Enable BCI and command overflow buffer */

 Turn on 16-bit register access. */

 Set stride to use GBD. */

 Enable 2D engine. */

 Setup plane masks */

 enable all write planes */

 enable all read planes */

 Now set the GBD */

	/*

	 * I don't know why, sending this twice fixes the initial black screen,

	 * prevents X from crashing at least in Toshiba laptops with SavageIX.

	 * --Tony

 work out suitable timings */

 This function is used to debug, it prints out the contents of s3 regs */

 --------------------------------------------------------------------- */

 unlock extended seq regs */

 now save all the extended regs we need */

 extended mode timing regs */

 save seq extended regs for DCLK PLL programming */

 Save flat panel expansion registers. */

 now save MIU regs */

 unlock extended seq regs */

 now restore all the extended regs we need */

 extended mode timing regs */

 save seq extended regs for DCLK PLL programming */

 Save flat panel expansion registers. */

 now save MIU regs */

 calculate modeline if supported by monitor */

 Is the mode larger than the LCD panel? */

	/* we must round yres/xres down, we already rounded y/xres_virtual up

, refresh; */

 10ns = 100MHz */

	/*

	 * This will allocate the datastructure and initialize all of the

	 * generic VGA registers.

 We need to set CR67 whether or not we use the BIOS. */

 8bpp, 2 pixels/clock */

 8bpp, 1 pixel/clock */

 15bpp, 2 pixel/clock */

 15bpp, 1 pixels/clock */

 16bpp, 2 pixel/clock */

 16bpp, 1 pixels/clock */

	/*

	 * Either BIOS use is disabled, or we failed to find a suitable

	 * match.  Fall back to traditional register-crunching.

FIXME:psav->pci_burst*/)

 m = 107; n = 4; r = 2; */

 MCLK == 286000 */

      reg->SR11 = 125; */

 display fifo */

 Set frame buffer description. */

 Use GBD */

 --------------------------------------------------------------------- */

/*

 *    Set a single color register. Return != 0 for invalid regno.

	/*

	 * Some Savage/MX and /IX systems go nuts when trying to exit the

	 * server after WindowMaker has displayed a gradient background.  I

	 * haven't been able to find what causes it, but a non-destructive

	 * switch to mode 3 here seems to eliminate the issue.

par->CR67*/ & ~0x0c, par); 
 restore extended regs */

 Restore DCLK registers. */

 Restore flat panel expansion registers. */

 extended mode timing registers */

 restore the desired video mode with cr67 */

 following part not present in X11 driver */

 end of part */

 other mode timing and extended regs */

 memory timings */

 unlock extended seq regs */

	/* Restore extended sequencer regs for MCLK. SR10 == 255 indicates

	 * that we should leave the default SR10 and SR11 values there.

 restore extended seq regs for dclk */

 load new m, n pll values for dclk & mclk */

 now write out cr67 in full, possibly starting STREAMS */

 program the start address registers */

 Set ramdac limits */

/*

 *    Pan or Wrap the Display

 SR31 bit 4 - FP enable */

 SR31 bit 4 - FP enable */

 --------------------------------------------------------------------- */

 Clear framebuffer, it's all white in memory after boot */

 unprotect CRTC[0-7] */

 unlock extended regs */

 unlock sys regs */

 Unlock system registers. */

 Next go on to detect amount of installed ram */

 for register CR36 (CONFG_REG1), */

 get amount of vram installed */

 Compute the amount of video memory and offscreen memory. */

		/*

		 * The Savage4 has one ugly special case to consider.  On

		 * systems with 4 banks of 2Mx32 SDRAM, the BIOS says 4MB

		 * when it really means 8MB.  Why do it the same when you

		 * can do it different...

 memory control 1 */

 How did we get here? */

 reset graphics engine to avoid memory corruption */

 clear reset flag */

	/*

	 * reset memory interface, 3D engine, AGP master, PCI master,

	 * master engine unit, motion compensation/LPB

 clear reset flags */

 Savage ramdac speeds */

 detect current mclk */

 check for DVI/flat panel */

 clear bit 1 */

0x04 */) {

 Check LCD panel parrmation */

		/* OK, I admit it.  I don't know how to limit the max dot clock

		 * for LCD panels of various sizes.  I thought I copied the

		 * formula from the BIOS, but many users have parrmed me of

		 * my folly.

		 *

		 * Instead, I'll abandon any attempt to automatically limit the

		 * clock, and add an LCDClock option to XF86Config.  Some day,

		 * I should come back to this.

 These are the bits in CR6B */

			/*

			 * If the LCD is active and panel expansion is enabled,

			 * we probably want to kill the HW cursor.

		/*

		 * The Savage4 and ProSavage have COB coherency bugs which

		 * render the buffer useless.  We disable it.

 We use 128kB for the COB on all chips. */

 FIFO size + padding for commands */

 --------------------------------------------------------------------- */

 FIXME: can't be negative */

 if a panel was detected, default to a CVT mode instead */

		/* FIXME: if we know there is only the panel

 maximize virtual vertical length */

	/*

	 * The clipping coordinates are masked with 0xFFF, so limit our

	 * virtual resolutions to these sizes.

	/*

	 * Calculate the hsync and vsync frequencies.  Note that

	 * we split the 1e12 constant up so that we can preserve

	 * the precision and fit the results into 32-bit registers.

	 *  (1953125000 * 512 = 1e12)

	/*

	 * Our driver data

	/*

	 * For PM_EVENT_FREEZE, do not power down so the console

	 * can remain active.

	/*

	 * The adapter was not powered down coming back from a

	 * PM_EVENT_FREEZE.

 **************************** exit-time only **************************** */

 ************************* init in-kernel code ************************** */

 !MODULE */

 /***************************************************************************\

|*                                                                           *|

|*       Copyright 2003 NVIDIA, Corporation.  All rights reserved.           *|

|*                                                                           *|

|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|

|*     international laws.  Users and possessors of this source code are     *|

|*     hereby granted a nonexclusive,  royalty-free copyright license to     *|

|*     use this code in individual and commercial software.                  *|

|*                                                                           *|

|*     Any use of this source code must include,  in the user documenta-     *|

|*     tion and  internal comments to the code,  notices to the end user     *|

|*     as follows:                                                           *|

|*                                                                           *|

|*       Copyright 2003 NVIDIA, Corporation.  All rights reserved.           *|

|*                                                                           *|

|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|

|*     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     *|

|*     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     *|

|*     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     *|

|*     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     *|

|*     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     *|

|*     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     *|

|*     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     *|

|*     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     *|

|*     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     *|

|*     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     *|

|*                                                                           *|

|*     U.S. Government  End  Users.   This source code  is a "commercial     *|

|*     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     *|

|*     consisting  of "commercial  computer  software"  and  "commercial     *|

|*     computer  software  documentation,"  as such  terms  are  used in     *|

|*     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     *|

|*     ment only as  a commercial end item.   Consistent with  48 C.F.R.     *|

|*     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     *|

|*     all U.S. Government End Users  acquire the source code  with only     *|

|*     those rights set forth herein.                                        *|

|*                                                                           *|

/*

 * GPL Licensing Note - According to Mark Vojkovich, author of the Xorg/

 * XFree86 'nv' driver, this source code is provided under MIT-style licensing

 * where the source code is provided "as is" without warranty of any kind.

 * The only usage restriction is for the copyright notices to be retained

 * whenever code is used.

 *

 * Antonino Daplas <adaplas@pol.net> 2005-03-11

/*

 * Override VGA I/O routines.

 turn on big endian register access */

 can't set this here */

 really means the CRTC is slaved */

 8 bit registers */

 look for known laptop chips */

 NV4 doesn't support FlatPanels */

 /***************************************************************************\

|*                                                                           *|

|*       Copyright 1993-2003 NVIDIA, Corporation.  All rights reserved.      *|

|*                                                                           *|

|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|

|*     international laws.  Users and possessors of this source code are     *|

|*     hereby granted a nonexclusive,  royalty-free copyright license to     *|

|*     use this code in individual and commercial software.                  *|

|*                                                                           *|

|*     Any use of this source code must include,  in the user documenta-     *|

|*     tion and  internal comments to the code,  notices to the end user     *|

|*     as follows:                                                           *|

|*                                                                           *|

|*       Copyright 1993-2003 NVIDIA, Corporation.  All rights reserved.      *|

|*                                                                           *|

|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|

|*     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     *|

|*     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     *|

|*     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     *|

|*     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     *|

|*     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     *|

|*     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     *|

|*     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     *|

|*     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     *|

|*     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     *|

|*     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     *|

|*                                                                           *|

|*     U.S. Government  End  Users.   This source code  is a "commercial     *|

|*     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     *|

|*     consisting  of "commercial  computer  software"  and  "commercial     *|

|*     computer  software  documentation,"  as such  terms  are  used in     *|

|*     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     *|

|*     ment only as  a commercial end item.   Consistent with  48 C.F.R.     *|

|*     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     *|

|*     all U.S. Government End Users  acquire the source code  with only     *|

|*     those rights set forth herein.                                        *|

|*                                                                           *|

/*

 * GPL Licensing Note - According to Mark Vojkovich, author of the Xorg/

 * XFree86 'nv' driver, this source code is provided under MIT-style licensing

 * where the source code is provided "as is" without warranty of any kind.

 * The only usage restriction is for the copyright notices to be retained

 * whenever code is used.

 *

 * Antonino Daplas <adaplas@pol.net> 2005-03-11

 $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/nv_hw.c,v 1.4 2003/11/03 05:11:25 tsi Exp $ */

/****************************************************************************\

*                                                                            *

* The video arbitration routines calculate some "magic" numbers.  Fixes      *

* the snow seen when accessing the framebuffer without it.                   *

* It just works (I hope).                                                    *

*                                                                            *

 freq in KHz */

 lwm detect. */

 lwm -> sync. */

 fbi bus cycles (1 req + 1 busy) */

 2 edge sync.  may be very close to edge so just put one. */

 arb_hp_req */

 ap_hp_req   tiling pipeline */

 tc_req     latency fifo */

 fb_cas_n_  memory request to fbio block */

 sm_d_rdv   data returned from fbio block */

 fb.rd.d.Put_gc   need to accumulate 256 bits for read */

 64 bit bus */

 64 bit bus */

 Margin of error */

 Margin of error */

* Margin of error */
 Margin of error */

 2 edge sync.  may be very close to edge so just put one. */

 fbi_d_rdv_n */

 Fbi_d_rdata */

 crtfifo load */

 Mp can get in with a burst of 8. */

 Extra clocks determined by heuristics */

 Mclk latency in us */

 Minimum Mclk latency in us */

 nvclk latency in us */

 nvclk latency in us */

 Mclk latency in us */

 MB/s */

 self generating page miss */

 One higher priority before */

 self generating page miss */

 if MA0 conflict */

 Video has separate read return path */

 Wait for video */

 CRT Page miss */

 other latency */

 fixed point <= float_point - 1.  Fixes that */

 bpp * pclk/8 */

 self generating page miss */

 MA0 page miss */

 if MA0 conflict */

 fixed point <= float_point - 1.  Fixes that */

 Finally, a heuristic check when width == 64 bits */

Large number to fail */

		/*

		   Overfill check:

 Amount of overfill */

 pclk cycles to drain */

 bytes drained. */

 Can't adjust anymore! */

 reduce the burst size */

 Have some margin */

 Can't adjust anymore! */

		/*  printf("CRT LWM: %f bytes, prog: 0x%x, bs: 256\n",

/****************************************************************************\

*                                                                            *

*                          RIVA Mode State Routines                          *

*                                                                            *

/*

 * Calculate the Video Clock parameters for the PLL.

 fixed at x4 for now */

/*

 * Calculate extended mode parameters (SVGA) and save in a

 * mode state structure.

	/*

	 * Save mode parameters.

 this is not bitsPerPixel, it's 8,15,16,32 */

	/*

	 * Extended RIVA registers.

 DirectColor */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Backlight code for nVidia based graphic cards

 *

 * Copyright 2004 Antonino Daplas <adaplas@pol.net>

 * Copyright (c) 2006 Michael Hanselmann <linux-kernel@hansmi.ch>

/* We do not have any information about which values are allowed, thus

 * we used safe values.

 Get and convert the value */

 No locking of bl_curve since we read a single value */

 backlight bit */

/*

 * linux/drivers/video/nvidia/nvidia-i2c.c - nVidia i2c

 *

 * Copyright 2004 Antonino A. Daplas <adaplas @pol.net>

 *

 * Based on rivafb-i2c.c

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 Raise SCL and SDA */

 try to get from firmware */

/*

 * linux/drivers/video/nvidia/nv_of.c

 *

 * Copyright 2004 Antonino A. Daplas <adaplas @pol.net>

 *

 * Based on rivafb-i2c.c

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * linux/drivers/video/nvidia/nvidia.c - nVidia fb driver

 *

 * Copyright 2004 Antonino Daplas <adaplas@pol.net>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

 HW cursor parameters */

 command line data, set in nvidiafb_setup() */

 Autodetect later */

		/* Begin flat panel hacks.

		 * This is unfortunate, but some chips need this register

		 * tweaked or else you get artifacts where adjacent pixels are

		 * swapped.  There are no hard rules for what to set here so all

		 * we can do is experiment and apply hacks.

 At least one NV34 laptop needs this workaround. */

 end flat panel hacks */

		/*

		 * Turn off screen and disable sequencer.

 Synchronous Reset */

 disable the display */

		/*

		 * Reenable sequencer, then turn on screen.

 reenable display */

 End Reset */

 Ensure CRTC registers 0-7 are unlocked by clearing bit 7 of CRTC[17] */

	/*

	 * Set all CRTC values.

 interlace off */

	/*

	 * Calculate the extended registers.

 turn on LFB swapping */

 Update debug text engine */

 gray = 0.30*R + 0.59*G + 0.11*B */

 "transparent" stuff is completely ignored. */

 do nothing */

 RGBA 8888 */

 calculate modeline if supported by monitor */

	/*

	 * If we're on a flat panel, check if the mode is outside of the

	 * panel dimensions. If so, cap it and try for the next best mode

	 * before bailing out.

 screen on/off */

 sync on/off */

/*

 * Because the VGA registers are not mapped linearly in its MMIO space,

 * restrict VGA register saving and restore to x86 only, where legacy VGA IO

 * access is legal. Consequently, we must also check if the device is the

 * primary display.

 X86 */

 CONFIG_PM_SLEEP */

 maximize virtual vertical length */

 pci-e */

 wrong endian */

 GeForce 256 */

 GeForce2 MX */

 GeForce2 */

 GeForce4 MX */

 GeForce4 MX (8x AGP) */

 nForce */

 nForce2 */

 GeForce3 */

 GeForce4 Ti */

 GeForce4 Ti (8x AGP) */

 GeForceFX 5800 */

 GeForceFX 5600 */

 GeForceFX 5200 */

 GeForceFX 5900 */

 GeForceFX 5700 */

 GeForce 6800 */

 GeForce 6800 */

 GeForce 6800 */

 GeForce 6600 */

 GeForce 6200 */

 GeForce 7200, 7300, 7400 */

 GeForce 7800 */

 GeForce 6800 */

 GeForce 6200 */

 GeForce 6100 */

 GeForce 7900 */

 GeForce 7600 */

 TNT, TNT2 */

 unknown architecture */

 enable IO and mem if not already done */

 Limit amount of vram to 64 MB */

/* ------------------------------------------------------------------------- *

 *

 * initialization

 *

 !MODULE */

/* ------------------------------------------------------------------------- *

 *

 * modularization

 *

 /***************************************************************************\

|*                                                                           *|

|*       Copyright 1993-2003 NVIDIA, Corporation.  All rights reserved.      *|

|*                                                                           *|

|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|

|*     international laws.  Users and possessors of this source code are     *|

|*     hereby granted a nonexclusive,  royalty-free copyright license to     *|

|*     use this code in individual and commercial software.                  *|

|*                                                                           *|

|*     Any use of this source code must include,  in the user documenta-     *|

|*     tion and  internal comments to the code,  notices to the end user     *|

|*     as follows:                                                           *|

|*                                                                           *|

|*       Copyright 1993-2003 NVIDIA, Corporation.  All rights reserved.      *|

|*                                                                           *|

|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|

|*     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     *|

|*     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     *|

|*     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     *|

|*     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     *|

|*     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     *|

|*     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     *|

|*     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     *|

|*     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     *|

|*     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     *|

|*     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     *|

|*                                                                           *|

|*     U.S. Government  End  Users.   This source code  is a "commercial     *|

|*     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     *|

|*     consisting  of "commercial  computer  software"  and  "commercial     *|

|*     computer  software  documentation,"  as such  terms  are  used in     *|

|*     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     *|

|*     ment only as  a commercial end item.   Consistent with  48 C.F.R.     *|

|*     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     *|

|*     all U.S. Government End Users  acquire the source code  with only     *|

|*     those rights set forth herein.                                        *|

|*                                                                           *|

/*

 * GPL Licensing Note - According to Mark Vojkovich, author of the Xorg/

 * XFree86 'nv' driver, this source code is provided under MIT-style licensing

 * where the source code is provided "as is" without warranty of any kind.

 * The only usage restriction is for the copyright notices to be retained

 * whenever code is used.

 *

 * Antonino Daplas <adaplas@pol.net> 2005-03-11

/* There is a HW race condition with videoram command buffers.

   You can't jump to the location of your put offset.  We write put

   at the jump offset + SKIPS dwords with noop padding in between

 copy   */

 invert */

 copy  */

 invert */

 set to something invalid */

 /*-*- linux-c -*-

 *  linux/drivers/video/i810-i2c.c -- Intel 810/815 I2C support

 *

 *      Copyright (C) 2004 Antonino Daplas<adaplas@pol.net>

 *      All Rights Reserved

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License. See the file COPYING in the main directory of this archive for

 *  more details.

 bit locations in the registers */

 define this for verbose EDID parsing output */

 flush posted write */

 flush posted write */

 Raise SCL and SDA */

 /*-*- linux-c -*-

 *  linux/drivers/video/i810_main.c -- Intel 810 frame buffer device

 *

 *      Copyright (C) 2001 Antonino Daplas<adaplas@pol.net>

 *      All Rights Reserved      

 *

 *      Contributors:

 *         Michael Vogt <mvogt@acm.org> - added support for Intel 815 chipsets

 *                                        and enabling the power-on state of 

 *                                        external VGA connectors for 

 *                                        secondary displays

 *

 *         Fredrik Andersson <krueger@shell.linux.se> - alpha testing of

 *                                        the VESA GTF

 *

 *         Brad Corrion <bcorrion@web-co.com> - alpha testing of customized

 *                                        timings support

 *

 *	The code framework is a modification of vfb.c by Geert Uytterhoeven.

 *      DotClock and PLL calculations are partly based on i810_driver.c 

 *              in xfree86 v4.0.3 by Precision Insight.

 *      Watermark calculation and tables are based on i810_wmark.c 

 *              in xfre86 v4.0.3 by Precision Insight.  Slight modifications 

 *              only to allow for integer operations instead of floating point.

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License. See the file COPYING in the main directory of this archive for

 *  more details.

/*

 * voffset - framebuffer offset in MiB from aperture start address.  In order for

 * the driver to work with X, we must try to use memory holes left untouched by X. The

 * following table lists where X's different surfaces start at.

 *

 * ---------------------------------------------

 * :                :  64 MiB     : 32 MiB      :

 * ----------------------------------------------

 * : FrontBuffer    :   0         :  0          :

 * : DepthBuffer    :   48        :  16         :

 * : BackBuffer     :   56        :  24         :

 * ----------------------------------------------

 *

 * So for chipsets with 64 MiB Aperture sizes, 32 MiB for v_offset is okay, allowing up to

 * 15 + 1 MiB of Framebuffer memory.  For 32 MiB Aperture sizes, a v_offset of 8 MiB should

 * work, allowing 7 + 1 MiB of Framebuffer memory.

 * Note, the size of the hole may change depending on how much memory you allocate to X,

 * and how the memory is split up between these surfaces.

 *

 * Note: Anytime the DepthBuffer or FrontBuffer is overlapped, X would still run but with

 * DRI disabled.  But if the Frontbuffer is overlapped, X will fail to load.

 *

 * Experiment with v_offset to find out which works best for you.

 For 32 MiB Aper size, 8 should be the default */

 Chipset Specific Functions */

 Initialization */

 PCI */

 mvo: added i815 PCI-ID */

------------------------------------------------------------*/

/**************************************************************

 *                Hardware Low Level Routines                 *

/**

 * i810_screen_off - turns off/on display

 * @mmio: address of register space

 * @mode: on or off

 *

 * DESCRIPTION:

 * Blanks/unblanks the display

/**

 * i810_dram_off - turns off/on dram refresh

 * @mmio: address of register space

 * @mode: on or off

 *

 * DESCRIPTION:

 * Turns off DRAM refresh.  Must be off for only 2 vsyncs

 * before data becomes corrupt

/**

 * i810_protect_regs - allows rw/ro mode of certain VGA registers

 * @mmio: address of register space

 * @mode: protect/unprotect

 *

 * DESCRIPTION:

 * The IBM VGA standard allows protection of certain VGA registers.  

 * This will  protect or unprotect them. 

/**

 * i810_load_pll - loads values for the hardware PLL clock

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Loads the P, M, and N registers.  

/**

 * i810_load_vga - load standard VGA registers

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Load values to VGA registers

 interlace */

/**

 * i810_load_vgax - load extended VGA registers

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Load values to extended VGA registers

/**

 * i810_load_2d - load grahics registers

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Load values to graphics registers

/**

 * i810_hires - enables high resolution mode

 * @mmio: address of register space

 Stop LCD displays from flickering */

/**

 * i810_load_pitch - loads the characters per line of the display

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Loads the characters per line

/**

 * i810_load_color - loads the color depth of the display

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Loads the color depth of the display and the graphics engine

/**

 * i810_load_regs - loads all registers for the mode

 * @par: pointer to i810fb_par structure

 * 

 * DESCRIPTION:

 * Loads registers

/************************************************************

 *                   VGA State Restore                      * 

restore interlace*/

/***********************************************************************

 *                         VGA State Save                              *

/************************************************************

 *                    Helpers                               * 

/**

 * get_line_length - calculates buffer pitch in bytes

 * @par: pointer to i810fb_par structure

 * @xres_virtual: virtual resolution of the frame

 * @bpp: bits per pixel

 *

 * DESCRIPTION:

 * Calculates buffer pitch in bytes.  

/**

 * i810_calc_dclk - calculates the P, M, and N values of a pixelclock value

 * @freq: target pixelclock in picoseconds

 * @m: where to write M register

 * @n: where to write N register

 * @p: where to write P register

 *

 * DESCRIPTION:

 * Based on the formula Freq_actual = (4*M*Freq_ref)/(N^P)

 * Repeatedly computes the Freq until the actual Freq is equal to

 * the target Freq or until the loop count is zero.  In the latter

 * case, the actual frequency nearest the target will be used.

	/*

	 * find P such that target freq is 16x reference freq (Hz). 

/*************************************************************

 *                Hardware Cursor Routines                   *

/**

 * i810_enable_cursor - show or hide the hardware cursor

 * @mmio: address of register space

 * @mode: show (1) or hide (0)

 *

 * Description:

 * Shows or hides the hardware cursor

/**

 * i810_init_cursor - initializes the cursor

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Initializes the cursor registers

/*********************************************************************

 *                    Framebuffer hook helpers                       *

/**

 * i810_round_off -  Round off values to capability of hardware

 * @var: pointer to fb_var_screeninfo structure

 *

 * DESCRIPTION:

 * @var contains user-defined information for the mode to be set.

 * This will try modify those values to ones nearest the

 * capability of the hardware

	/*

	 *  Presently supports only these configurations 

 round of horizontal timings to nearest 8 pixels */

/**

 * set_color_bitfields - sets rgba fields

 * @var: pointer to fb_var_screeninfo

 *

 * DESCRIPTION:

 * The length, offset and ordering  for each color field 

 * (red, green, blue)  will be set as specified 

 * by the hardware

 RGB 888   */

 RGBA 8888 */

/**

 * i810_check_params - check if contents in var are valid

 * @var: pointer to fb_var_screeninfo

 * @info: pointer to fb_info

 *

 * DESCRIPTION:

 * This will check if the framebuffer size is sufficient 

 * for the current mode and if the user's monitor has the 

 * required specifications to display the current mode.

	/*

	 *  Memory limit

	/*

	 * Monitor limit

/**

 * encode_fix - fill up fb_fix_screeninfo structure

 * @fix: pointer to fb_fix_screeninfo

 * @info: pointer to fb_info

 *

 * DESCRIPTION:

 * This will set up parameters that are unmodifiable by the user.

/**

 * decode_var - modify par according to contents of var

 * @var: pointer to fb_var_screeninfo

 * @par: pointer to i810fb_par

 *

 * DESCRIPTION:

 * Based on the contents of @var, @par will be dynamically filled up.

 * @par contains all information necessary to modify the hardware. 

/**

 * i810fb_getcolreg - gets red, green and blue values of the hardware DAC

 * @regno: DAC index

 * @red: red

 * @green: green

 * @blue: blue

 * @transp: transparency (alpha)

 * @info: pointer to fb_info

 *

 * DESCRIPTION:

 * Gets the red, green and blue values of the hardware DAC as pointed by @regno

 * and writes them to @red, @green and @blue respectively

/****************************************************************** 

 *           Framebuffer device-specific hooks                    *

 RGB 555 */

 RGB 565 */

 RGB 888 */

 RGBA 8888 */

/***********************************************************************

 *                         Power Management                            *

/***********************************************************************

 *                  AGP resource allocation                            *

/*************************************************************** 

 *                    Initialization                           * 

/**

 * i810_init_monspecs

 * @info: pointer to device specific info structure

 *

 * DESCRIPTION:

 * Sets the user monitor's horizontal and vertical

 * frequency limits

/**

 * i810_init_defaults - initializes default values to use

 * @par: pointer to i810fb_par structure

 * @info: pointer to current fb_info structure

/**

 * i810_init_device - initialize device

 * @par: pointer to i810fb_par structure

 mvo: enable external vga-connector (for laptops) */

/***************************************************************

 *                     De-initialization                        *

/*********************************************************************

 *                          Modularization                           *

 MODULE */

/*-*- linux-c -*-

 *  linux/drivers/video/i810_accel.c -- Hardware Acceleration

 *

 *      Copyright (C) 2001 Antonino Daplas<adaplas@pol.net>

 *      All Rights Reserved      

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License. See the file COPYING in the main directory of this archive for

 *  more details.

 ROP_COPY */

 ROP_XOR  */

 Macros */

***********************************************************/

 BLT Engine Routines */

/**

 * wait_for_space - check ring buffer free space

 * @space: amount of ringbuffer space needed in bytes

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * The function waits until a free space from the ringbuffer

 * is available 

/** 

 * wait_for_engine_idle - waits for all hardware engines to finish

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * This waits for lring(0), iring(1), and batch(3), etc to finish and

 * waits until ringbuffer is empty.

 flush */

/* begin_iring - prepares the ringbuffer 

 * @space: length of sequence in dwords

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Checks/waits for sufficient space in ringbuffer of size

 * space.  Returns the tail of the buffer

/**

 * end_iring - advances the buffer

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * This advances the tail of the ringbuffer, effectively

 * beginning the execution of the graphics instruction sequence.

/**

 * source_copy_blit - BLIT transfer operation

 * @dwidth: width of rectangular graphics data

 * @dheight: height of rectangular graphics data

 * @dpitch: bytes per line of destination buffer

 * @xdir: direction of copy (left to right or right to left)

 * @src: address of first pixel to read from

 * @dest: address of first pixel to write to

 * @from: source address

 * @where: destination address

 * @rop: raster operation

 * @blit_bpp: pixel format which can be different from the 

 *            framebuffer's pixelformat

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * This is a BLIT operation typically used when doing

 * a 'Copy and Paste'

/**

 * color_blit - solid color BLIT operation

 * @width: width of destination

 * @height: height of destination

 * @pitch: pixels per line of the buffer

 * @dest: address of first pixel to write to

 * @where: destination

 * @rop: raster operation

 * @what: color to transfer

 * @blit_bpp: pixel format which can be different from the 

 *            framebuffer's pixelformat

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * A BLIT operation which can be used for  color fill/rectangular fill

/**

 * mono_src_copy_imm_blit - color expand from system memory to framebuffer

 * @dwidth: width of destination

 * @dheight: height of destination

 * @dpitch: pixels per line of the buffer

 * @dsize: size of bitmap in double words

 * @dest: address of first byte of pixel;

 * @rop: raster operation

 * @blit_bpp: pixelformat to use which can be different from the 

 *            framebuffer's pixelformat

 * @src: address of image data

 * @bg: backgound color

 * @fg: forground color

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * A color expand operation where the  source data is placed in the 

 * ringbuffer itself. Useful for drawing text. 

 *

 * REQUIREMENT:

 * The end of a scanline must be padded to the next word.

/**

 * i810fb_iring_enable - enables/disables the ringbuffer

 * @mode: enable or disable

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Enables or disables the ringbuffer, effectively enabling or

 * disabling the instruction/acceleration engine.

/**

 * i810fb_init_ringbuffer - initialize the ringbuffer

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Initializes the ringbuffer by telling the device the

 * size and location of the ringbuffer.  It also sets 

 * the head and tail pointers = 0

/*-*- linux-c -*-

 *  linux/drivers/video/i810_main.h -- Intel 810 Non-discrete Video Timings 

 *                                     (VESA GTF)

 *

 *      Copyright (C) 2001 Antonino Daplas<adaplas@pol.net>

 *      All Rights Reserved      

 *

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License. See the file COPYING in the main directory of this archive for

 *  more details.

/*

 * FIFO and Watermark tables - based almost wholly on i810_wmark.c in 

 * XFree86 v4.03 by Precision Insight.  Slightly modified for integer 

 * operation, instead of float

/**

 * i810fb_encode_registers - encode @var to hardware register values

 * @var: pointer to var structure

 * @par: pointer to hardware par structure

 * 

 * DESCRIPTION: 

 * Timing values in @var will be converted to appropriate

 * register values of @par.  

 Horizontal */

 htotal */

 xres */

 hblank */

 hsync */

 Vertical */

 vtotal */

 vsync */ 

 yres */

 vblank */

 sync polarity */

 interlace */

 overlay */

/**

 * i810_get_watermark - gets watermark

 * @var: pointer to fb_var_screeninfo

 * @par: pointer to i810fb_par structure

 *

 * DESCRIPTION:

 * Gets the required watermark based on 

 * pixelclock and RAMBUS frequency.

 * 

 * RETURNS:

 * watermark

/*-*- linux-c -*-

 *  linux/drivers/video/i810_dvt.c -- Intel 810 Discrete Video Timings (Intel)

 *

 *      Copyright (C) 2001 Antonino Daplas<adaplas@pol.net>

 *      All Rights Reserved      

 *

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License. See the file COPYING in the main directory of this archive for

 *  more details.

 640x480 @ 60Hz */

 640x480 @ 70Hz */

 640x480 @ 72Hz */

 640x480 @ 75Hz */

 640x480 @ 85Hz */

 800x600 @ 56Hz */

 800x600 @ 60Hz */

 800x600 @ 70Hz */

 800x600 @ 72Hz */

 800x600 @ 75Hz */

 800x600 @ 85Hz */

 1024x768 @ 60Hz */

 1024x768 @ 70Hz */

 1024x768 @ 75Hz */          

 1024x768 @ 85Hz */

 1152x864 @ 60Hz */ 

 1152x864 @ 70Hz */

 1152x864 @ 72Hz */

 1152x864 @ 75Hz */

 1152x864 @ 85Hz */

 1280x960 @ 60Hz */

 1280x960 @ 75Hz */

 1280x960 @ 85Hz */

 1600x1200 @ 60Hz */

 1600x1200 @ 65 Hz */

 1600x1200 @ 70 Hz */

 1600x1200 @ 72 Hz */

 1600x1200 @ 75 Hz */

 1600x1200 @ 85 Hz */

 overlay */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200, G400 and G450.

 *

 * (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>

 *

 * Version: 1.64 2002/06/10

 *

 * See matroxfb_base.c for contributors.

 *

 MGA-TVO I2C for G200, G400 */

 primary head DDC for Mystique(?), G100, G200, G400 */

 primary head DDC for Millennium, Millennium II */

 secondary head DDC for G400 */

*****************************************************/

 We must reset GENIODATA very often... XFree plays with this register */

 software I2C functions */

 Register maven bus even on G450/G550 */

 no __setup required */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200 and G400

 *

 * (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>

 *

 * Version: 1.65 2002/08/14

 *

 * MTRR stuff: 1998 Tom Rini <trini@kernel.crashing.org>

 *

 * Contributors: "menion?" <menion@mindless.com>

 *                     Betatesting, fixes, ideas

 *

 *               "Kurt Garloff" <garloff@suse.de>

 *                     Betatesting, fixes, ideas, videomodes, videomodes timmings

 *

 *               "Tom Rini" <trini@kernel.crashing.org>

 *                     MTRR stuff, PPC cleanups, betatesting, fixes, ideas

 *

 *               "Bibek Sahu" <scorpio@dodds.net>

 *                     Access device through readb|w|l and write b|w|l

 *                     Extensive debugging stuff

 *

 *               "Daniel Haun" <haund@usa.net>

 *                     Testing, hardware cursor fixes

 *

 *               "Scott Wood" <sawst46+@pitt.edu>

 *                     Fixes

 *

 *               "Gerd Knorr" <kraxel@goldbach.isdn.cs.tu-berlin.de>

 *                     Betatesting

 *

 *               "Kelly French" <targon@hazmat.com>

 *               "Fernando Herrera" <fherrera@eurielec.etsit.upm.es>

 *                     Betatesting, bug reporting

 *

 *               "Pablo Bianucci" <pbian@pccp.com.ar>

 *                     Fixes, ideas, betatesting

 *

 *               "Inaky Perez Gonzalez" <inaky@peloncho.fis.ucm.es>

 *                     Fixes, enhandcements, ideas, betatesting

 *

 *               "Ryuichi Oikawa" <roikawa@rr.iiij4u.or.jp>

 *                     PPC betatesting, PPC support, backward compatibility

 *

 *               "Paul Womar" <Paul@pwomar.demon.co.uk>

 *               "Owen Waller" <O.Waller@ee.qub.ac.uk>

 *                     PPC betatesting

 *

 *               "Thomas Pornin" <pornin@bolet.ens.fr>

 *                     Alpha betatesting

 *

 *               "Pieter van Leuven" <pvl@iae.nl>

 *               "Ulf Jaenicke-Roessler" <ujr@physik.phy.tu-dresden.de>

 *                     G100 testing

 *

 *               "H. Peter Arvin" <hpa@transmeta.com>

 *                     Ideas

 *

 *               "Cort Dougan" <cort@cs.nmt.edu>

 *                     CHRP fixes and PReP cleanup

 *

 *               "Mark Vojkovich" <mvojkovi@ucsd.edu>

 *                     G400 support

 *

 * (following author is not in any relation with this code, but his code

 *  is included in this driver)

 *

 * Based on framebuffer driver for VBE 2.0 compliant graphic boards

 *     (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>

 *

 * (following author is not in any relation with this code, but his ideas

 *  were used when writing this driver)

 *

 *		 FreeVBE/AF (Matrox), "Shawn Hargreaves" <shawn@talula.demon.co.uk>

 *

 accelerate as 8bpp video */

 disable linearization */

 turn off acceleration!!! */

			/* Great. Source has 32bit aligned lines, so we can feed them

 Special case for 1..8bit widths */

 Special case for 9..15bit widths */

 Tell... well, why bother... */

 Hope that there are at least three readable bytes beyond the end of bitmap */

		/* Danger! image->depth is useless: logo painting code always

		   passes framebuffer color depth here, although logo data are

		   always 8bpp and info->pseudo_palette is changed to contain

		   logo palette to be used (but only for true/direct-color... sic...).

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200, G400 and G450.

 *

 * (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>

 *

 * Portions Copyright (c) 2001 Matrox Graphics Inc.

 *

 * Version: 1.65 2002/08/14

 *

 * See matroxfb_base.c for contributors.

 *

 maybe it is GDIV2 on G100 ?! */

 only for devices older than G450 */

 they must be in POS order */

 black */

 white */

 red */

 read MCLK and give up... */

 select PCI clock until we have setup oscilator... */

 powerup system PLL, select PCI clock */

		/* !!! you must not access device if MCLK is not running !!!

		   Doing so cause immediate PCI lockup :-( Maybe they should

		   generate ABORT or I/O (parity...) error and Linux should

		   recover from this... (kill driver/process). But world is not

		/* (bit 2 of PCI_OPTION_REG must be 0... and bits 0,1 must not

 select PLL */

 select specified system clock source */

 Clear PLL + enable for CRTC2 */

 Enable CRTC2 */

 Stop VIDEO PLL */

 Disable CRTC2 */

 Powerdown CRTC2 */

 Use reference directly */

 Use pixel PLL */

			/* PIXEL and VIDEO PLL must not use same frequency. We modify N

			   of PIXEL PLL in such case because of VIDEO PLL may be source

			   of TVO clocks, and chroma subcarrier is derived from its

 Use video PLL */

 0-50 */

 34-62 */

 42-78 */

 62-92 */

 74-108 */

 94-122 */

 108-132 */

 120-168 */

 G450 */

 0-54 */

 38-70 */

 56-96 */

 80-114 */

 102-144 */

 132-166 */

 154-182 */

 170-204 */

 powerup everything */

 disable outputs */

 enable output; CRTC1/2 selection is in CRTC2 ctl */

 Poweroff DAC2 */

				/* HELP! If we boot without DFP connected to DVI, we can

				   poweroff TMDS. But if we boot with DFP connected,

				   TMDS generated clocks are used instead of ALL pixclocks

				   available... If someone knows which register

 Poweroff TMDS */

 Now set timming related variables... */

 case 4: not supported by MGA1064 DAC */

 unsupported depth */

 256 entries */

 0..31, 128..159 */

 with p15 == 0 */

 with p15 == 1 */

 0..63 */

 NEED_DAC1064 */

 should be only FB_SYNC_COMP */

 should be only FB_SYNC_COMP */

 G */

 minfo->features.DAC1064.vco_freq_min = 120000; */

 maybe cmdline MCLK= ?, doc says gclk=44MHz, mclk=66MHz... it was 55/83 with old values */

 BIOS environ */

 flags, maybe 0x10 = SDRAM, 0x00 = SGRAM??? */

 G100 wants 0x10, G200 SGRAM does not care... */

 reg50, & 0x0F, & 0x3000 (only 0x0000, 0x1000, 0x2000 (0x3000 disallowed and treated as 0) */

 there should be flags & 0x03 & case 0/1/else */

 and we should first select source and after that we should wait for PLL */

 and we are waiting for PLL with oscilator disabled... Is it right? */

 minfo->capable.cfb4 = 0; ... preinitialized by 0 */

 do not modify settings */

 switch all clocks to PCI source */

 switch clocks to their real PLL source(s) */

 disable memory refresh */

 set memory interface parameters */

 first set up memory interface with disabled memory interface clocks */

 start memory clocks */

 value is written to memory chips only if old != new */

 minfo->hw.MXoptionReg = minfo->values.reg.opt; */

 Init system clocks */

 stop crtc2 */

 stop cursor */

 stop crtc1 */

 set legacy VGA clock sources for DOSEmu or VMware... */

 restore crtc1 */

 restore cursor */

 restore crtc2 */

 there are some instabilities if in_div > 19 && vco < 61000 */

 my sample: >118 */

 minfo->capable.cfb4 = 0; ... preinitialized by 0 */

		/* we must do this always, BIOS does not do it for us

 it should help with G100 */

 if found and bridging Matrox, do some strange stuff */

 disable back-to-back & SERR */

 ??? */

 ??? */

 ??? */

 FIXME... */

 either leave MCLK as is... or they were set in preinit */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200, G400 and G450.

 *

 * (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>

 *

 * Portions Copyright (c) 2001 Matrox Graphics Inc.

 *

 * Version: 1.65 2002/08/14

 *

 * See matroxfb_base.c for contributors.

 *

 Definition of the various controls */

/* Return: positive number: id found

           -EINVAL:         id not found, return failure

	/*

	 * Check if changed.

	/*

	 * Check limits.

	/*

	 * Store new value.

 | 0x40 for SCART */

 maybe cve2 has requirement 800 < hlen < 1184 */

 burst length */

 x sync point */

 in field lines */

 upper blanking */

 y sync point */

 ps

 ps

 ps

 ps

 4433618.750 Hz

 ps

 ps

 ps

 ps

 ps

 3579545.454 Hz

 ps

 lines

 00: chroma subcarrier */

 test */

 modified by code (F9 written...) */

 ? not written */

 08 */

 09 */

 0A */

 0B */

 0C */

 ? not written */

		0x3F, 0x03, /* 0E-0F */

 10-11 */

 12 */

 13 */

 14-16 */

 17-18 */

 19 */

 1A */

 1B */

 1C */

 1D */

		0x89, 0x03, /* 1E-1F */

		0x72,	/* 20 */

 21 */

		0x72,	/* 22 */

 23 */

 24 */

 25 */

 26 */

 27 */

 28 */

 29 */

 2A-2B */

 2C */

 2D-2E */

 2F-30 */

 31-32 */

 33 */

 34 */

 35 written multiple times */

 36 not written */

 37 */

 38 */

 39 */

 3A */

 3B */

 3C-3D */

 3E written multiple times */

 3F not written */

 00: chroma subcarrier */

 test */

 modified by code (F9 written...) */

 ? not written */

 08 */

 09 */

 0A */

 0B */

 0C */

 ? not written */

 0E-0F */

 10-11 */

 12 */

 13 */

 14-16 */

 17-18 */

 19 */

 1A */

 1B */

 1C */

 1D */

0x89, 0x02, /* 1E-1F */

 1E-1F */

0x5F,	/* 20 */

 20 */

 21 */

0x5F,	/* 22 */

 22 */

 23 */

 24 */

 25 */

 26 */

 27 */

 28 */

 29 */

 2A-2B */

 2C */

 2D-2E */

 2F-30 */

 31-32 */

 33 */

 34 */

 35 written multiple times */

 36 not written */

 37 */

 38 */

 39 */

 3A */

 3B */

 3C-3D */

 3E written multiple times */

 never written */

		/* We must program clocks before CRTC2, otherwise interlaced mode

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200 and G400

 *

 * (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>

 *

 * Portions Copyright (c) 2001 Matrox Graphics Inc.

 *

 * Version: 1.65 2002/08/14

 *

 * MTRR stuff: 1998 Tom Rini <trini@kernel.crashing.org>

 *

 * Contributors: "menion?" <menion@mindless.com>

 *                     Betatesting, fixes, ideas

 *

 *               "Kurt Garloff" <garloff@suse.de>

 *                     Betatesting, fixes, ideas, videomodes, videomodes timmings

 *

 *               "Tom Rini" <trini@kernel.crashing.org>

 *                     MTRR stuff, PPC cleanups, betatesting, fixes, ideas

 *

 *               "Bibek Sahu" <scorpio@dodds.net>

 *                     Access device through readb|w|l and write b|w|l

 *                     Extensive debugging stuff

 *

 *               "Daniel Haun" <haund@usa.net>

 *                     Testing, hardware cursor fixes

 *

 *               "Scott Wood" <sawst46+@pitt.edu>

 *                     Fixes

 *

 *               "Gerd Knorr" <kraxel@goldbach.isdn.cs.tu-berlin.de>

 *                     Betatesting

 *

 *               "Kelly French" <targon@hazmat.com>

 *               "Fernando Herrera" <fherrera@eurielec.etsit.upm.es>

 *                     Betatesting, bug reporting

 *

 *               "Pablo Bianucci" <pbian@pccp.com.ar>

 *                     Fixes, ideas, betatesting

 *

 *               "Inaky Perez Gonzalez" <inaky@peloncho.fis.ucm.es>

 *                     Fixes, enhandcements, ideas, betatesting

 *

 *               "Ryuichi Oikawa" <roikawa@rr.iiij4u.or.jp>

 *                     PPC betatesting, PPC support, backward compatibility

 *

 *               "Paul Womar" <Paul@pwomar.demon.co.uk>

 *               "Owen Waller" <O.Waller@ee.qub.ac.uk>

 *                     PPC betatesting

 *

 *               "Thomas Pornin" <pornin@bolet.ens.fr>

 *                     Alpha betatesting

 *

 *               "Pieter van Leuven" <pvl@iae.nl>

 *               "Ulf Jaenicke-Roessler" <ujr@physik.phy.tu-dresden.de>

 *                     G100 testing

 *

 *               "H. Peter Arvin" <hpa@transmeta.com>

 *                     Ideas

 *

 *               "Cort Dougan" <cort@cs.nmt.edu>

 *                     CHRP fixes and PReP cleanup

 *

 *               "Mark Vojkovich" <mvojkovi@ucsd.edu>

 *                     G400 support

 *

 *               "David C. Hansen" <haveblue@us.ibm.com>

 *                     Fixes

 *

 *               "Ian Romanick" <idr@us.ibm.com>

 *                     Find PInS data in BIOS on PowerPC systems.

 *

 * (following author is not in any relation with this code, but his code

 *  is included in this driver)

 *

 * Based on framebuffer driver for VBE 2.0 compliant graphic boards

 *     (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>

 *

 * (following author is not in any relation with this code, but his ideas

 *  were used when writing this driver)

 *

 *		 FreeVBE/AF (Matrox), "Shawn Hargreaves" <shawn@talula.demon.co.uk>

 *

 10ns = 100MHz */

 or 0x09 */

 bitplanes */

 CRTC 0..7, 9, 16..19, 21, 22 are reprogrammed by Matrox Millennium code... Hope that by MGA1064 too */

 GCTL is ignored when not using 0xA0000 aperture */

 Whole ATTR is ignored in PowerGraphics mode */

 standard timmings are in 8pixels, but for interleaved we cannot */

 do it for 4bpp (because of (4bpp >> 1(interleaved))/4 == 0) */

 using 16 or more pixels per unit can save us */

 divider can be from 1 to 8 */

 G200 cannot work with (ht & 7) == 6 */

 blanking */

 sync start */

 end hor. blanking */

 FIXME: Enable vidrst only on G400, and only if TV-out is used */

 enable horizontal and vertical vidrst */

 disp end */

 vblanking start */

 & 0xFF */;

 & 0xFF */;

 & 0xFF */;

 & 0xFF */;

 & 0xFF */;

 Check for 'IBM .*(V....TVO' string - it means TVO BIOS */

	/* On PowerPC cards, the PInS offset isn't stored at the end of the

	 * BIOS image.  Instead, you must search the entire BIOS image for

	 * the magic PInS signature.

	 *

	 * This actually applies to all OpenFirmware base cards.  Since these

	 * cards could be put in a MIPS or SPARC system, should the condition

	 * be something different?

 ignore 4MB, 8MB, module clocks */

 Millennium */

 Millennium II, Mystique */

 memory config */

 G100, G200 */

 G400 */

 Mine 16MB G450 with SDRAM DDR */

 DAC1064, Ti3026 */

 DAC1064, Ti3026 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200, G400 and G450.

 *

 * (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>

 *

 * Portions Copyright (c) 2001 Matrox Graphics Inc.

 *

 * Version: 1.65 2002/08/14

 *

 **************************************************** */

 **************************************************** */

 gray = 0.30*R + 0.59*G + 0.11*B */

		case 32: */

 enable CRTC2 */

 source from secondary pixel PLL */

 no vidrst when in monitor mode */

 Enable H/V vidrst */

 source from VDOCLK */

 enable vvidrst & hvidrst */

 MGA TVO is our clock source */

 source from pixclock */

 PIXPLL is our clock source */

 connect CRTC2 to DAC */

 interlaced, second field is bigger, as G450 apparently ignores it */

 0x10000000 is VIDRST polarity */

 preload */

 field #0 is smaller, so... */

 field #1 vmemory start */

 field #0 vmemory start */

 vmemory start */

 data control */

 line compare */

 disable CRTC2, CRTC1->DAC1, PLL as clock source */

/*

 * This function is called before the register_framebuffer so

 * no locking is needed.

 TBD */

 no accel... */

 cmap */

 CRTC2 delay */

 mask out reserved bits + field number (odd/even) */

 compatibility stuff */

                /* Only one writer, aligned int value...

 do something... */

 W,H, virtual W,H */

 offset */

 depth */

 gray */

 R */

 G */

 B */

 alpha */

 nonstd */

 display size */

 accel flags */

 no sync info */

 PAGE_MASK? */

 check yres on first head... */

 ************************** */

 return memory back to primary head */

 hardware is CRTC2 incapable... */

 we do not have __setup() yet */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200, G400 and G450.

 *

 * (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>

 *

 * Portions Copyright (c) 2001 Matrox Graphics Inc.

 *

 * Version: 1.65 2002/08/14

 *

 * See matroxfb_base.c for contributors.

 *

 Definition of the various controls */

/* Return: positive number: id found

           -EINVAL:         id not found, return failure

 27027000/60 == 27000000/59.94005994 */

 if h2/post/in/feed have not been assigned, return zero (error) */

			df |= 0x00; */

 00: chroma subcarrier */

 ? not written */

 modified by code (F9 written...) */

 ? not written */

 08 */

 09 */

 0A */

 0B */

 0C */

 ? not written */

 0E-0F */

 10-11 */

 12 */

 13 */

 14-16 */

 17-18 */

 19 */

 1A */

 1B */

 1C */

 1D */

 1E-1F */

 20 */

 21 */

 22 */

 23 */

 24 */

 25 */

 26 */

 27 */

 28 */

 29 */

 2A-2B */

 2C */

 2D-2E */

 2F-30 */

 31-32 */

 33 */

 34 */

 35 written multiple times */

 36 not written */

 37 */

 38 */

 39 */

 3A */

 3B */

 3C-3D */

 3E written multiple times */

 3F not written */

 00: chroma subcarrier */

 ? not written */

 modified by code (F9 written...) */

 ? not written */

 08 */

 09 */

 0A */

 0B */

 0C */

 ? not written */

 0E-0F */

 10-11 */

 12 */

 13 */

 14-16 */

 17-18 */

 19 */

 1A */

 1B */

 1C */

 1D */

 1E-1F */

 20 */

 21 */

 22 */

 23 */

 24 */

 25 */

 26 */

 27 */

 28 */

 29 */

 2A-2B */

 2C */

 2D-2E */

 2F-30 */

 31-32 */

 33 */

 34 */

 35 written multiple times */

 36 not written */

 37 */

 38 */

 39 */

 3A */

 3B */

 3C-3D */

 3E written multiple times */

 never written */

 Set deflicker */

 set gamma */

 Set contrast / brightness */

 Set saturation */

 Set HUE */

 fetch oscillator state? */

 get 0x82 */

 xmiscctrl */

 removed code... */

 or read |= 0xF0 ? */

 removed code here... */

 real code begins here? */

 chroma subcarrier */

 ... */

 ... */

 saturation #1 */

 saturation #2 */

 hue */

 ... */

 read 0x80 */

 ugh... */

 read 0x7C */

 read 0x00 */

 read 0x82 */

 04 1A 91 or 05 21 91 */

 4D 50 52 or 4E 05 45 */

 0049 or 004F */

 0004 or 0004 */

 0458 or 045E */

 05DA or 051B */

 00CC or 00CF */

 007D or 007F */

 007C or 007E */

 03CB or 03CE */

 0000 or 0000 */

 0044 or 003A */

 05DA or 051B */

 04BC or 046A */

 004D or 004E */

 saturation #1 */

 saturation #2 */

 whoops */

 oh, saturation #1 again */

 oh, saturation #2 again */

 hue */

 problems with memory? */

 yes, matrox must have problems in memory area... */

 load gamma correction stuff */

 0x10 or anything ored with it */

 output mode */

 1:1 */

 or issue warning? */

 last (first? middle?) line in picture can have different length */

 hlen - 2 */

 ... */

 hblanking end */

 100% */

 100% */

 who knows */

 htotal - 2 */

 vblanking end */

 stop vblanking */

 something end... [A6]+1..[A8] */

 something start... 0..[A4]-1 */

 vertical line count - 1 */

 horizontal vidrst pos */

 0 <= hcrt <= htotal - 2 */

 vertical vidrst pos */

 moves picture up/down and so on... */

 Fix this... 0..VTotal */

 Verify! */

 Where 94208 came from? */

			/* Now we have to compute input buffer length.

			   If you want any picture, it must be between

			     4 + lmargin + xres

			   and

			     94208 / hdec

			   If you want perfect picture even on the top

			   of screen, it must be also

			     0x3C0000 * i / hdec + Q - R / hdec

			   where

			        R      Qmin   Qmax

			     0x07000   0x5AE  0x5BF

			     0x08000   0x5CF  0x5FF

			     0x0C000   0x653  0x67F

			     0x10000   0x6F8  0x6FF

 < 0x40 || > 0x80 is bad... 0x80 is questionable */

 'valid' input line length */

 *32768 */

 FIXME: 146?! */

 output: SVideo/Composite */

 htotal... */

 ?? */

 hsync len */

 hblank end */

 hblank start */

 htotal + 1 */

 vsync?! */

 ignored? */

 ignored? */

 vtotal - 1 */

 hor vidrst */

 vert vidrst */

 ignored? */

 output: monitor */

 ??? */

 must be set... */

 defaults to 0x10: test signal */

 defaults to 0x2C: too bright */

 makes picture stable */

 output: monitor */

 ??? */

 must be set... */

 defaults to 0x10: test signal */

 defaults to 0x2C: too bright */

 makes picture stable */

 start whole thing */

	/*

	 * Check if changed.

	/*

	 * Check limits.

	/*

	 * Store new value.

*****************************************************/

 Tweak some things for this old chip */

	/*

	 * Set all parameters to its initial values.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200 and G400

 *

 * (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>

 *

 * Portions Copyright (c) 2001 Matrox Graphics Inc.

 *

 * Version: 1.65 2002/08/14

 *

 * MTRR stuff: 1998 Tom Rini <trini@kernel.crashing.org>

 *

 * Contributors: "menion?" <menion@mindless.com>

 *                     Betatesting, fixes, ideas

 *

 *               "Kurt Garloff" <garloff@suse.de>

 *                     Betatesting, fixes, ideas, videomodes, videomodes timmings

 *

 *               "Tom Rini" <trini@kernel.crashing.org>

 *                     MTRR stuff, PPC cleanups, betatesting, fixes, ideas

 *

 *               "Bibek Sahu" <scorpio@dodds.net>

 *                     Access device through readb|w|l and write b|w|l

 *                     Extensive debugging stuff

 *

 *               "Daniel Haun" <haund@usa.net>

 *                     Testing, hardware cursor fixes

 *

 *               "Scott Wood" <sawst46+@pitt.edu>

 *                     Fixes

 *

 *               "Gerd Knorr" <kraxel@goldbach.isdn.cs.tu-berlin.de>

 *                     Betatesting

 *

 *               "Kelly French" <targon@hazmat.com>

 *               "Fernando Herrera" <fherrera@eurielec.etsit.upm.es>

 *                     Betatesting, bug reporting

 *

 *               "Pablo Bianucci" <pbian@pccp.com.ar>

 *                     Fixes, ideas, betatesting

 *

 *               "Inaky Perez Gonzalez" <inaky@peloncho.fis.ucm.es>

 *                     Fixes, enhandcements, ideas, betatesting

 *

 *               "Ryuichi Oikawa" <roikawa@rr.iiij4u.or.jp>

 *                     PPC betatesting, PPC support, backward compatibility

 *

 *               "Paul Womar" <Paul@pwomar.demon.co.uk>

 *               "Owen Waller" <O.Waller@ee.qub.ac.uk>

 *                     PPC betatesting

 *

 *               "Thomas Pornin" <pornin@bolet.ens.fr>

 *                     Alpha betatesting

 *

 *               "Pieter van Leuven" <pvl@iae.nl>

 *               "Ulf Jaenicke-Roessler" <ujr@physik.phy.tu-dresden.de>

 *                     G100 testing

 *

 *               "H. Peter Arvin" <hpa@transmeta.com>

 *                     Ideas

 *

 *               "Cort Dougan" <cort@cs.nmt.edu>

 *                     CHRP fixes and PReP cleanup

 *

 *               "Mark Vojkovich" <mvojkovi@ucsd.edu>

 *                     G400 support

 *

 *               "Samuel Hocevar" <sam@via.ecp.fr>

 *                     Fixes

 *

 *               "Anton Altaparmakov" <AntonA@bigfoot.com>

 *                     G400 MAX/non-MAX distinction

 *

 *               "Ken Aaker" <kdaaker@rchland.vnet.ibm.com>

 *                     memtype extension (needed for GXT130P RS/6000 adapter)

 *

 *               "Uns Lider" <unslider@miranda.org>

 *                     G100 PLNWT fixes

 *

 *               "Denis Zaitsev" <zzz@cd-club.ru>

 *                     Fixes

 *

 *               "Mike Pieper" <mike@pieper-family.de>

 *                     TVOut enhandcements, V4L2 control interface.

 *

 *               "Diego Biurrun" <diego@biurrun.de>

 *                     DFP testing

 *

 * (following author is not in any relation with this code, but his code

 *  is included in this driver)

 *

 * Based on framebuffer driver for VBE 2.0 compliant graphic boards

 *     (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>

 *

 * (following author is not in any relation with this code, but his ideas

 *  were used when writing this driver)

 *

 *		 FreeVBE/AF (Matrox), "Shawn Hargreaves" <shawn@talula.demon.co.uk>

 *

 --------------------------------------------------------------------- */

/*

 * card parameters

 --------------------------------------------------------------------- */

 W,H, W, H (virtual) load xres,xres_virtual*/

 virtual -> visible no offset */

 depth -> load bits_per_pixel */

 greyscale ? */

 R */

 G */

 B */

 transparency */

 standard pixel format */

 accel flags */

 No sync info */

 --------------------------------------------------------------------- */

 Make sure that displays are compatible */

 No update pending anymore */

 Clear any pending field interrupts */

 Flush pending pan-at-vbl request... */

 --------------------------------------------------------------------- */

 FB_ACTIVATE_VBL and we can acquire interrupts? Honor FB_ACTIVATE_VBL then... */

 Abort any pending change */

	/* Currently we are holding big kernel lock on all dead & usecount updates.

	 * Destroy everything after all users release it. Especially do not unregister

	 * framebuffer and iounmap memory, neither fbmem nor fbcon-cfb* does not check

	 * for device unplugged when in use.

	 * In future we should point mmio.vbase & video.vbase somewhere where we can

	 * write data without causing too much damage...

 destroy it later */

	/*

	 * Open/Release the frame buffer device

 doc says 64; 32 is OK for G400 */

 doc says 64; 32 is OK for G400 */

 on G400, 16 really does not work */

 pseudocolor... 16 entries HW palette */

 pseudocolor... 256 entries HW palette */

 directcolor... 16 entries SW palette */

 Mystique: truecolor, 16 entries SW palette, HW palette hardwired into 1:1 mapping */

 directcolor... 16 entries SW palette */

 Mystique: truecolor, 16 entries SW palette, HW palette hardwired into 1:1 mapping */

 directcolor... 16 entries SW palette */

 Mystique: truecolor, 16 entries SW palette, HW palette hardwired into 1:1 mapping */

 return something reasonable... or panic()? */

 There is hardware bug that no line can cross 4MB boundary */

 give up for CFB24, it is impossible to easy workaround it */

 for other try to do something */

 sorry */

 or 128 if you do not need PAGE ALIGNED address */

 YDSTLEN contains only signed 16bit value */

	/* we must round yres/xres down, we already rounded y/xres_virtual up

 an artificial value - 15 */

	/*

	 *  Set a single color register. The values supplied are

	 *  already rounded down to the hardware's capabilities

	 *  (according to the entries in the `var' structure). Return

	 *  != 0 for invalid regno.

 gray = 0.30*R + 0.59*G + 0.11*B */

 for 1:5:5:5 */

 8:8:8:8 */

 8 for 8bpp, 4 for 16bpp, 2 for 32bpp */

 CRTC1 delays */

	/* BTW, on my PIII/450 with G400, reading M_INSTS1

	   byte makes this call about 12% slower (1.70 vs. 2.05 us

		/* Only one writer, aligned int value...

 0 unblank, 1 blank, 2 no vsync, 3 no hsync, 4 off */

 works ??? */

	.fb_fillrect =	<set by matrox_cfbX_init>, */

	.fb_copyarea =	<set by matrox_cfbX_init>, */

	.fb_imageblit =	<set by matrox_cfbX_init>, */

	.fb_cursor =	<set by matrox_cfbX_init>, */

 9-F */

 textmode with (default) VGA8x16 */

 textmode hardwired to VGA8x8 */

 initialized by setup, see explanation at end of file (search for MODULE_PARM_DESC) */

 "matroxfb:mem:xxxxxM" */

 cannot be changed, option_precise_width==0 must imply noaccel */

 "matroxfb:inv24" */

 "matroxfb:cross4MB" */

 "matroxfb:disabled" */

 "matroxfb:noaccel" */

 "matroxfb:nopan" */

 "matroxfb:nopciretry" */

 "matroxfb:novga" */

 "matroxfb:nobios" */

 "matroxfb:init" */

 "matroxfb:inverse" */

 "matroxfb:sgram" */

 "matroxfb:nomtrr" */

 "matroxfb:grayscale" */

 "matroxfb:dev:xxxxx" */

 "matroxfb:vesa:xxxxx" */

 "matroxfb:depth:xxxxx" */

 "matroxfb:xres:xxxxx" */

 "matroxfb:yres:xxxxx" */

 "matroxfb:upper:xxxxx" */

 "matroxfb:lower:xxxxx" */

 "matroxfb:vslen:xxxxx" */

 "matroxfb:left:xxxxx" */

 "matroxfb:right:xxxxx" */

 "matroxfb:hslen:xxxxx" */

 "matroxfb:pixclock:xxxxx" */

 "matroxfb:sync:xxxxx" */

 "matroxfb:fv:xxxxx" */

 "matroxfb:fh:xxxxxk" */

 "matroxfb:maxclk:xxxxM" */

 "matroxfb:dfp */

 "matroxfb:dfp:xxx */

 "matroxfb:memtype:xxx" */

 "matroxfb:outputs:xxx" */

 "matroxfb:mode:xxxxx" or "matroxfb:xxxxx" */

 must be X*2MB (really it must be 2 or X*4MB) */

 at least 2MB */

 CONFIG_FB_MATROX_MILLENIUM */

 CONFIG_FB_MATROX_MYSTIQUE */

/* from doc it looks like that accelerator can draw only to low 16MB :-( Direct accesses & displaying are OK for

 #define DEVF_recycled	0x0040	*/

 #define DEVF_recycled	0x0080	*/

 no doc, no vxres... */

 if you'll find how to drive DFP... */

 640x480 @ 60Hz, 31.5 kHz */

 !MODULE */

 Nullify this option for subsequent adapters */

 set default values... */

 convert mem (autodetect k, M) */

 clear BIG_ENDIAN */

 disable palette snooping */

 select non-DMA memory for PCI_MGA_DATA, otherwise dump of PCI cfg space can lock PCI bus */

 maybe preinit() candidate, but it is same... for all devices... at this time... */

 TBD */

 static settings */

 Prefer panning for scroll under MC viewer/edit */

 We have hw-assisted bmove */

 And fillrect */

 And imageblit */

 And we support both horizontal */

 And vertical panning */

 mode database is marked __init!!! */

 !MODULE */

 mode modifiers */

 fv, fh, maxclk limits was specified */

 > 500MHz */

 250MHz */

 1MHz */

 FIXME: Where to move this?! */

 Note: mac_vmode_to_var() does not set all parameters */

 !MODULE */

 CONFIG_PPC_PMAC */

		vesafb_defined.yres_virtual = 65536; /* large enough to be INF, but small enough

 Normalize values (namely yres_virtual) */

	/* And put it into "current" var. Do NOT program hardware yet, or we'll not take over

	 * vgacon correctly. fbcon_startup will call fb_set_par for us, WITHOUT check_var,

	 * and unfortunately it will do it BEFORE vgacon contents is saved, so it won't work

/* We do not have to set currcon to 0... register_framebuffer do it for us on first console

	/* there is no console on this fb... but we have to initialize hardware

		/* We have to use FB_ACTIVATE_FORCE, as we had to put vesafb_defined to the fbcon.var

 not match... */

 not requested one... */

 DEVFLAGS */

 subsequent heads always needs initialization and must not enable BIOS */

 **************************** init-time only **************************** */

 132 x 43 text */

 132 x 50 text */

 132 x 60 text */

 10-FF */

 default must be first */

 fh from kHz to Hz */

 1kHz minimum */

 maxclk */

 kHz -> Hz, MHz -> kHz */

 kHz -> Hz, 1MHz minimum */

 fix VESA number */

 mask out clearscreen, acceleration and so on */

 static settings */

 accept all new devices... */

 **************************** exit-time only **************************** */

 ************************* init in-kernel code ************************** */

 nodisabled does not exist */

 noenabled does not exist */

 nosgram == sdram */

 never return failure, user can hotplug matrox later... */

 *************************** init module code **************************** */

 never return failure; user can hotplug matrox later... */

 MODULE */

/*

 *

 * Hardware accelerated Matrox PCI cards - G450/G550 PLL control.

 *

 * (c) 2001-2002 Petr Vandrovec <vandrove@vc.cvut.cz>

 *

 * Portions Copyright (c) 2001 Matrox Graphics Inc.

 *

 * Version: 1.64 2002/06/10

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file COPYING in the main directory of this archive for

 * more details.

 *

 do not mask high byte so we'll catch NO_MORE_MNP */

				p |= 0x00; */

 udelay(1)... but DAC_in is much slower... */

				/* DVI PLL preferred for frequencies up to

 Setting this breaks PC systems so don't do it */

 matroxfb_DAC_out(minfo, M1064_XDVICLKCTRL, tmp); */

				/* == is important; due to nextpll algorithm we get

				   sorted equally good frequencies from lower VCO 

				   frequency to higher - with <= lowest wins, while

					/* all else being equal except VCO,

					 * choose VCO not near (within 1/16th or so) VCOmin

					 * (freqs near VCOmin aren't as stable)

 VideoPLL and PixelPLL matched: do nothing... In all other cases we should get at least one frequency */

/* It must be greater than number of possible PLL values.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200 and G400

 *

 * (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>

 *

 * Portions Copyright (c) 2001 Matrox Graphics Inc.

 *

 * Version: 1.65 2002/08/14

 *

 * MTRR stuff: 1998 Tom Rini <trini@kernel.crashing.org>

 *

 * Contributors: "menion?" <menion@mindless.com>

 *                     Betatesting, fixes, ideas

 *

 *               "Kurt Garloff" <garloff@suse.de>

 *                     Betatesting, fixes, ideas, videomodes, videomodes timmings

 *

 *               "Tom Rini" <trini@kernel.crashing.org>

 *                     MTRR stuff, PPC cleanups, betatesting, fixes, ideas

 *

 *               "Bibek Sahu" <scorpio@dodds.net>

 *                     Access device through readb|w|l and write b|w|l

 *                     Extensive debugging stuff

 *

 *               "Daniel Haun" <haund@usa.net>

 *                     Testing, hardware cursor fixes

 *

 *               "Scott Wood" <sawst46+@pitt.edu>

 *                     Fixes

 *

 *               "Gerd Knorr" <kraxel@goldbach.isdn.cs.tu-berlin.de>

 *                     Betatesting

 *

 *               "Kelly French" <targon@hazmat.com>

 *               "Fernando Herrera" <fherrera@eurielec.etsit.upm.es>

 *                     Betatesting, bug reporting

 *

 *               "Pablo Bianucci" <pbian@pccp.com.ar>

 *                     Fixes, ideas, betatesting

 *

 *               "Inaky Perez Gonzalez" <inaky@peloncho.fis.ucm.es>

 *                     Fixes, enhandcements, ideas, betatesting

 *

 *               "Ryuichi Oikawa" <roikawa@rr.iiij4u.or.jp>

 *                     PPC betatesting, PPC support, backward compatibility

 *

 *               "Paul Womar" <Paul@pwomar.demon.co.uk>

 *               "Owen Waller" <O.Waller@ee.qub.ac.uk>

 *                     PPC betatesting

 *

 *               "Thomas Pornin" <pornin@bolet.ens.fr>

 *                     Alpha betatesting

 *

 *               "Pieter van Leuven" <pvl@iae.nl>

 *               "Ulf Jaenicke-Roessler" <ujr@physik.phy.tu-dresden.de>

 *                     G100 testing

 *

 *               "H. Peter Arvin" <hpa@transmeta.com>

 *                     Ideas

 *

 *               "Cort Dougan" <cort@cs.nmt.edu>

 *                     CHRP fixes and PReP cleanup

 *

 *               "Mark Vojkovich" <mvojkovi@ucsd.edu>

 *                     G400 support

 *

 * (following author is not in any relation with this code, but his code

 *  is included in this driver)

 *

 * Based on framebuffer driver for VBE 2.0 compliant graphic boards

 *     (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>

 *

 * (following author is not in any relation with this code, but his ideas

 *  were used when writing this driver)

 *

 *		 FreeVBE/AF (Matrox), "Shawn Hargreaves" <shawn@talula.demon.co.uk>

 *

 transparent, transparent, transparent, transparent */

 transparent, 0, 1, 2 */

 0, 1, transparent, complement */

 transparent, transparent, 0, 1 */

 ext.signal ODD/\EVEN */

 ext.signal EVEN/\ODD */

 ??? do not understand... but it works... !!! */

 ??? do not understand... but it works... !!! */

 paletized */

 5:4/5:2 instead of 4:3/8:3 */

 4:3/8:3 (or 5:4/5:2) */

 - */

 - */

 2MB RAM, 512K * 4 */

 >2MB RAM, 512K * 8 & more */

 L0,H0,L1,H1... */

 H0,L0,H1,L1... */

 VGA MEMORY, 8BIT PIXEL */

 CLK2 is TTL source*/

 not CLK2 is TTL source */

 CLK2 and not CLK2 is ECL source */

 disable & poweroff internal clock */

 or 8, bit 3 is ignored */

 PSEL high selects directcolor */

 PSEL high selects truecolor or pseudocolor */

 2,4,6,8,10,12,14,16, division applied to LOOP PLL after divide by 2^P */

 MKC4 */

 MKC4 */

 dot clock divided by loop pclk N prescaler */

 set lm to any possible value */

 div 2 */

 default... */

 change from 0x80 to 0x40 */

 or _8_1, they are same */

 or _4_1, they are same */

 XLATCHCTRL should be _4_1 / _2_1... Why is not? (_2_1 is used every time) */

 XLATCHCTRL is: for (A) use _4_3 (?_8_3 is same? TBD), for (B) it is set in setpclk */

 XLATCHCTRL should be _2_1 / _1_1... Why is not? (_2_1 is used every time) */

 TODO: failed */

 set SYNC */

 set DELAY */

 set HWCURSOR */

 set interleaving */

 set DAC */

 save pclk */

 stop pclk */

 set pclk to new mclk */

 wait for PLL to lock */

 output pclk on mclk pin */

 stop MCLK */

 set mclk to new freq */

 wait for PLL to lock */

 output MCLK to MCLK pin */

 stop PCLK */

 restore pclk */

 wait for PLL to lock */

 agrhh... setting up PLL is very slow on Millennium... */

 Mystique PLL is locked in few ms, but Millennium PLL lock takes about 0.15 s... */

 Maybe even we should call schedule() ? */

 wait for PLL only if PLL clock requested (always for PowerMode, never for VGA) */

 isMilleniumII(minfo); */

 preserve VGA I/O, BIOS and PPC */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * driver for Silicon Image SiI 164 PanelLink Transmitter

 check vendor id and device id */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



  Index, Mask, Value */

 Set panel power sequence timing */

 T1: VDD on - Data on. Each increment is 1 ms. (50ms = 031h) */

 T2: Data on - Backlight on. Each increment is 2 ms. (210ms = 068h) */

 T3: Backlight off -Data off. Each increment is 2 ms. (210ms = 068h)*/

 T4: Data off - VDD off. Each increment is 1 ms. (50ms = 031h) */

 T5: VDD off - VDD on. Each increment is 100 ms. (500ms = 04h) */

 LVDS output power up */

 turn on back light */

 Index, Mask, Value */

 Common settings: */

 Input Data Mode Select */

 Sense VT1636 LVDS Transmiter */

 Check vendor ID first: */

 Check Chip ID: */

 Graphics DPA settings: */

 LVDS Transmitter DPA settings: */

 Graphics DPA settings: */

 LVDS Transmitter DPA settings: */

 Graphics DPA settings: */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



 Hot-Plug Priority: DVI > CRT*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



 according to VIA Technologies these values are based on experiment */

 LCD Scaling Parameter 1 */

 LCD Scaling Parameter 2 */

 LCD Scaling Parameter 3 */

 LCD Scaling Parameter 4 */

 LCD Scaling Parameter 5 */

 LCD Scaling Parameter 6 */

 LCD Scaling Parameter 7 */

 LCD Scaling Parameter 8 */

 LCD Scaling Parameter 9 */

 LCD Scaling Parameter 10 */

 LCD Scaling Parameter 11 */

 LCD Scaling Parameter 12 */

 LCD Scaling Parameter 13 */

 LCD Scaling Parameter 14 */

	{VIACR, CR07, 0x10, 0x10}, /* [0] vertical total (bit 8)

					[1] vertical display end (bit 8)

					[2] vertical retrace start (bit 8)

					[3] start vertical blanking (bit 8)

					[4] line compare (bit 8)

					[5] vertical total (bit 9)

					[6] vertical display end (bit 9)

	{VIACR, CR08, 0xFF, 0x00}, /* [0-4] preset row scan

	{VIACR, CR09, 0xDF, 0x40}, /* [0-4] max scan line

					[5] start vertical blanking (bit 9)

					[6] line compare (bit 9)

	{VIACR, CR0A, 0xFF, 0x1E}, /* [0-4] cursor start

	{VIACR, CR0B, 0xFF, 0x00}, /* [0-4] cursor end

 [0-7] cursor location (high) */

 [0-7] cursor location (low) */

	{VIACR, CR11, 0xF0, 0x80}, /* [0-3] vertical retrace end

					[6] memory refresh bandwidth

	{VIACR, CR14, 0xFF, 0x00}, /* [0-4] underline location

					[5] divide memory address clock by 4

	{VIACR, CR17, 0xFF, 0x63}, /* [0-1] mapping of display address 13-14

					[2] divide scan line clock by 2

					[3] divide memory address clock by 2

					[5] address wrap

					[6] byte mode select

 [0-7] line compare */

 IGA1 FIFO Depth_Select */

 IGA2 FIFO Depth_Select */

 IGA1 FIFO Threshold Select */

 IGA2 FIFO Threshold Select */

 IGA1 FIFO High Threshold Select */

 IGA2 FIFO High Threshold Select */

 IGA1 Display Queue Expire Num */

 IGA2 Display Queue Expire Num */

 Definition Fetch Count Registers*/

 IGA1 Fetch Count Register */

 IGA2 Fetch Count Register */

 {R,G,B} */

 Index 0x00~0x03 */

 Index 0x04~0x07 */

 Index 0x08~0x0B */

 Index 0x0C~0x0F */

 Index 0x10~0x13 */

 Index 0x14~0x17 */

 Index 0x18~0x1B */

 Index 0x1C~0x1F */

 Index 0x20~0x23 */

 Index 0x24~0x27 */

 Index 0x28~0x2B */

 Index 0x2C~0x2F */

 Index 0x30~0x33 */

 Index 0x34~0x37 */

 Index 0x38~0x3B */

 Index 0x3C~0x3F */

 Index 0x40~0x43 */

 Index 0x44~0x47 */

 Index 0x48~0x4B */

 Index 0x4C~0x4F */

 Index 0x50~0x53 */

 Index 0x54~0x57 */

 Index 0x58~0x5B */

 Index 0x5C~0x5F */

 Index 0x60~0x63 */

 Index 0x64~0x67 */

 Index 0x68~0x6B */

 Index 0x6C~0x6F */

 Index 0x70~0x73 */

 Index 0x74~0x77 */

 Index 0x78~0x7B */

 Index 0x7C~0x7F */

 Index 0x80~0x83 */

 Index 0x84~0x87 */

 Index 0x88~0x8B */

 Index 0x8C~0x8F */

 Index 0x90~0x93 */

 Index 0x94~0x97 */

 Index 0x98~0x9B */

 Index 0x9C~0x9F */

 Index 0xA0~0xA3 */

 Index 0xA4~0xA7 */

 Index 0xA8~0xAB */

 Index 0xAC~0xAF */

 Index 0xB0~0xB3 */

 Index 0xB4~0xB7 */

 Index 0xB8~0xBB */

 Index 0xBC~0xBF */

 Index 0xC0~0xC3 */

 Index 0xC4~0xC7 */

 Index 0xC8~0xCB */

 Index 0xCC~0xCF */

 Index 0xD0~0xD3 */

 Index 0xD4~0xD7 */

 Index 0xD8~0xDB */

 Index 0xDC~0xDF */

 Index 0xE0~0xE3 */

 Index 0xE4~0xE7 */

 Index 0xE8~0xEB */

 Index 0xEC~0xEF */

 Index 0xF0~0xF3 */

 Index 0xF4~0xF7 */

 Index 0xF8~0xFB */

 Index 0xFC~0xFF */

 structure with function pointers to support clock control */

Set IGA path for each device*/

 looks like the OLPC has its display wired to DVP1 and LVDS2 */

 bit mask of palette */

	/*

	TODO: Can we enable/disable these devices? How?

	if (devices & VIA_LDVP0)

	if (devices & VIA_LDVP1)

 always set to 1 */

 line compare should set all bits = 1 (extend modes) */

 line compare should set all bits = 1 (extend modes) */

viafb_write_reg_mask(CR32, VIACR, 0x01, BIT0); */

 If K8M800, enable Prefetch Mode. */

if (bit_num==8) timing_value = timing_value >>8; */

 Write Registers */

DEBUG_MSG(KERN_INFO "Table Size : %x!!\n",ItemNum ); */

			/* If resolution > 1280x1024, expire length = 64, else

			/* If resolution > 1280x1024, expire length = 64, else

			/* If resolution > 1280x1024, expire length = 64,

 Set Display FIFO Depath Select */

 Set Display FIFO Threshold Select */

 Set FIFO High Threshold Select */

 Set Display Queue Expire Num */

			/* If resolution > 1280x1024, expire length = 64,

			/* If resolution > 1280x1024, expire length = 64,

			/* If resolution > 1280x1024, expire length = 64,

 Set Display FIFO Depath Select */

 Patch LCD in IGA2 case */

 Set Display FIFO Depath Select */

 Set Display FIFO Threshold Select */

 Set FIFO High Threshold Select */

 Set Display Queue Expire Num */

 X1 frequency */

 Set VCLK*/

 Fire! */

 select external clock */

Set IGA path for each device */

 Check revision of CLE266 Chip */

 CR4F only define in CLE266.CX chip */

 restore orignal CR4F value */

 Determine which 2D engine we have */

 we should check support by hardware layout.*/

 TMDS on PCIE, we set DFPLOW as default. */

 set DVP1 default for DVI */

	/*If CX700,two singel LCD, we need to reassign

 access Primary Display's LUT */

 turn off LCK */

 turn on LCK */

 access Secondary Display's LUT */

 set IGA1 DAC for default */

 turn off CRT screen (IGA1) */

 turn on CRT screen (IGA1) */

	/*If viafb_LCD2_ON, on cx700, internal lvds's information

 For dual channel LCD: */

 Set to Dual LVDS channel. */

 For LCD+DFP: */

 Set to LVDS1 + TMDS channel. */

 Set to single TMDS channel. */

 For dual channel LCD: */

 Set to Dual LVDS channel. */

 Set to LVDS0 + LVDS1 channel. */

 Write Common Setting for Video Mode */

 magic required on VX900 for correct modesetting on IGA1 */

 probably this should go to the scaling code one day */

 VX900 hw scale on IGA2 */

 Fill VPIT Parameters */

 Write Misc Register */

 Write Sequencer */

 Write Graphic Controller */

 Write Attribute Controller */

 Update Patch Register */

 Update Refresh Rate Setting */

 Clear On Screen */

 CRT set mode */

		/* Patch if set_hres is not 8 alignment (1366) to viafb_setmode

		to 8 alignment (1368),there is several pixels (2 pixels)

 IGA1 doesn't have LCD scaling, so set it center. */

 IGA1 doesn't have LCD scaling, so set it center. */

 If set mode normally, save resolution information for hot-plug . */

CONFIG_FB_VIA_X_COMPATIBILITY*/

 OLPC DCON only supports 50 Hz */

 to enable second display channel. */

 to disable second display channel. */

 DVP0 Clock Polarity and Adjust: */

 DVP0 Clock and Data Pads Driving: */

 DVP1 Clock Polarity and Adjust: */

 DVP1 Clock and Data Pads Driving: */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



 CLE266 Software Power Sequence */

 {Mask}, {Data}, {Delay} */

 LCD Horizontal Scaling Factor Register */

 LCD Vertical Scaling Factor Register */

 LCD Horizontal Scaling Factor Register */

 LCD Vertical Scaling Factor Register */

 Two dual channel LCD (Internal LVDS + External LVDS): */

		/* If we have an external LVDS, such as VT1636, we should

 Two single channel LCD (Internal LVDS + Internal LVDS): */

		/* If we have found external LVDS, just use it,

 Check for VT1631: */

 OLPC XO-1.5 panel */

 LCD Scaling Enable */

 Check if expansion for horizontal */

 Load Horizontal Scaling Factor */

 Horizontal scaling enabled */

 Horizontal scaling disabled */

 Check if expansion for vertical */

 Load Vertical Scaling Factor */

 Vertical scaling enabled */

 Vertical scaling disabled */

 Fetch Count */

 LCD Set Mode */

 Get panel table Pointer */

 disable scaling */

 Fetch count for IGA2 only */

 If K8M800, enable LCD Prefetch Mode. */

 Patch for non 32bit alignment mode */

 Use second power sequence control: */

 Turn off power sequence. */

 Turn off back light. */

 Use first power sequence control: */

 Turn off power sequence. */

 Turn off back light. */

 Power off LVDS channel. */

 Use first power sequence control: */

 Use hardware control power sequence. */

 Turn on back light. */

 Turn on hardware power sequence. */

 Use second power sequence control: */

 Use hardware control power sequence. */

 Turn on back light. */

 Turn on hardware power sequence. */

 Power on LVDS channel. */

 DI1 pad off */

 Backlight off           */

 24 bit DI data paht off */

 Disable expansion bit   */

 Simultaneout disabled   */

 DI1 pad on */

 Backlight on            */

 24 bit DI data paht on  */

 LCD enabled             */

 Software control power sequence */

 Disable LCD */

 Software control power sequence */

 Enable LCD */

 Dual & Dithering */

 Determine LCD DI Port by hardware layout. */

Do nothing, lcd port is specified by module parameter */

 Rom address */

 Compare pattern */

 Get the start of Table */

 0x1B means BIOS offset position */

 Get the start of biosver structure */

 18 means BIOS version position. */

		/* The offset should be 44, but the

 pRom += 44; */

 release memory */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Support for viafb GPIO ports.

 *

 * Copyright 2009 Jonathan Corbet <corbet@lwn.net>

/*

 * The ports we know about.  Note that the port-25 gpios are not

 * mentioned in the datasheet.

 Data sheet name */

 Guess - not in datasheet */

 aka DISPCLKI0 */

 aka DISPCLKO0 */

 DISPCLKI1 */

 DISPCLKO1 */

/*

 * This structure controls the active GPIOs, which may be a subset

 * of those which are known.

/*

 * GPIO access functions

 output enable */

/*

 * Set the input direction.  I'm not sure this is right; we should

 * be able to do input without disabling output.

/*

 * Manage the software enable bit.

 CONFIG_PM */

/*

 * Look up a specific gpio and return the number it was assigned.

/*

 * Platform device stuff.

	/*

	 * Set up entries for all GPIOs which have been configured to

	 * operate as such (as opposed to as i2c ports).

	/*

	 * Enable the ports.  They come in pairs, with a single

	 * enable bit for both.

	/*

	 * Get registered.

 Dynamic */

	/*

	 * Get unregistered.

	/*

	 * Disable the ports.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2009 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



/*

 * There can only be one set of these, so there's no point in having

 * them be dynamically allocated...

 Passed in from core */

/*

 * Allow other viafb subdevices to look up a specific adapter

 * by port name.

 i2c_set_adapdata(adapter, adap_cfg); */

 Raise SCL and SDA */

 FIXME: PCIDEV */

 Still try to make the rest */

		/*

		 * Only remove those entries in the array that we've

		 * actually used (and thus initialized algo_data)

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



/*  ClkRange, DVP0, DVP0DataDriving,  DVP0ClockDriving, DVP1,

/*  CR96, SR2A[5], SR1B[1], SR2A[4], SR1E[2], CR9B,

 LCK/VCK < 30000000 will use this value */

 30000000 < LCK/VCK < 50000000 will use this value */

 50000000 < LCK/VCK < 70000000 will use this value */

 70000000 < LCK/VCK < 100000000 will use this value */

 100000000 < LCK/VCK < 15000000 will use this value */

 15000000 < LCK/VCK will use this value */

/*  ClkRange,DVP0, DVP0DataDriving,  DVP0ClockDriving, DVP1,

/*   CR96, SR2A[5], SR1B[1], SR2A[4], SR1E[2], CR9B,

 LCK/VCK < 30000000 will use this value */

 30000000 < LCK/VCK < 50000000 will use this value */

 50000000 < LCK/VCK < 70000000 will use this value */

 70000000 < LCK/VCK < 100000000 will use this value */

 100000000 < LCK/VCK < 15000000 will use this value */

 15000000 < LCK/VCK will use this value */

 For VT3364: */

/*  ClkRange,DVP0, DVP0DataDriving,  DVP0ClockDriving, DVP1,

/*   CR96, SR2A[5], SR1B[1], SR2A[4], SR1E[2], CR9B,

 LCK/VCK < 30000000 will use this value */

 30000000 < LCK/VCK < 50000000 will use this value */

 50000000 < LCK/VCK < 70000000 will use this value */

 70000000 < LCK/VCK < 100000000 will use this value */

 100000000 < LCK/VCK < 15000000 will use this value */

 15000000 < LCK/VCK will use this value */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2009 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



 video mode */

 Added for specifying active devices.*/

Added for specify lcd output port*/

/* supported output devices on each IGP

 * only CX700, VX800, VX855, VX900 were documented

 * VIA_CRT should be everywhere

 * VIA_6C can be onle pre-CX700 (probably only on CLE266) as 6C is used for PLL

 * source selection on CX700 and later

 * K400 seems to support VIA_96, VIA_DVP1, VIA_LVDS{1,2} as in viamode.c

 Just tell the accel name */

 Sanity check */

 HW neither support interlacte nor double-scaned mode */

	/* the refresh rate is not important here, as we only want to know

	 * whether the resolution exists

	/* Based on var passed in to calculate the refresh,

	 * because our driver use some modes special.

 Adjust var according to our driver's own table */

 Set one color register */

 clear DPMS setting */

 Screen: On, HSync: On, VSync: On */

 control CRT monitor power management */

 Screen: Off, HSync: Off, VSync: On */

 control CRT monitor power management */

 Screen: Off, HSync: On, VSync: Off */

 control CRT monitor power management */

 Screen: Off, HSync: Off, VSync: Off */

 control CRT monitor power management */

 LCD ouput does not support hw cursors (at least on VN896) */

 Rule: device on iga1 path are the primary device. */

 get device status */

 Get lcd attributes */

 1. Modify the active status of devices. */

	/* 2. Keep the order of devices, so we can set corresponding

	/*    Note: The previous of active_dev is primary device,

 LCD only */

 CRT+DVI */

 DVI+CRT */

 CRT+LCD */

 LCD+CRT */

 DVI+LCD */

 LCD+DVI */

 CRT only */

 DVI only */

 LCD only */

Initialize to avoid unexpected behavior */

/*

 * The proc filesystem read/write function, a simple proc implement to

 * get/set the value of DPA  DVP0,   DVP0DataDriving,  DVP0ClockDriving, DVP1,

 * DVP1Driving, DFPHigh, DFPLow CR96,   SR2A[5], SR1B[1], SR2A[4], SR1E[2],

 * CR9B,    SR65,    CR97,    CR99

Ensure end string */

Ensure end string */

Ensure end string */

 CONFIG_FB_VIA_DIRECT_PROCFS */

 CONFIG_FB_VIA_DIRECT_PROCFS */

 parent dir */

 CONFIG_FB_VIA_DIRECT_PROCFS */

 should be always CRT */

 seems to be usually DVP1 */

 FIXME: what is this? */

	/* Allocate fb_info and ***_par here, also including some other needed

	 * variables

	/*

	 * The framebuffer will have been successfully mapped by

	 * the core (or we'd not be here), but we still need to

	 * set up our own accounting.

/*

 * These are called out of via-core for now.

 Apply XO-1.5-specific configuration. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * driver for VIA VT1632 DVI Transmitter

 check vendor id and device id */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



/*

 * Figure out an appropriate bytes-per-pixel setting.

 Preserve the reserved bits */

 Lowest 2 bits to zero gives us no rotation */

 blackness */

 pattern inversion */

 pattern copy */

 whiteness */

 ROP=SRCCOPY */

 blackness */

 pattern inversion */

 pattern copy */

 whiteness */

 ROP=SRCCOPY */

	/*

	 * Set aside a chunk of framebuffer memory for the camera

	 * driver.  Someday this driver probably needs a proper allocator

	 * for fbmem; for now, we just have to do this before the

	 * framebuffer initializes itself.

	 *

	 * As for the size: the engine can handle three frames,

	 * 16 bits deep, up to VGA resolution.

 Initialize registers to reset the 2D engine */

 Init AGP and VQ regs */

 Enable VQ */

 Set Cursor Image Base Address */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



 Turn on ouputting pad */

=* DFP Low Pad on *=*/

 DFP Low Pad on */

 DVP0 Pad on */

 DVP0/DVP1 Pad on */

	    /* SR3E[1]Multi-function selection:

 Check for VT1632: */

		/*

		 * Currently only support 12bits,dual edge,add 24bits mode later

 DVI Set Mode */

 Sense DVI Connector */

 DI1 Pad on */

 CR6B[0]VCK Input Selection: 1 = External clock. */

		/* CR91[4] VDD On [3] Data On [2] VEE On [1] Back Light Off

		/* CR93[7] DI1 Data Source Selection: 1 = DSP2.

		   CR93[5] DI1 Clock Source: 1 = internal.

		   CR93[4] DI1 Clock Polarity.

 DVP0/DVP1 Pad on */

		/* SR3E[1]Multi-function selection:

		/* CR91[4] VDD On [3] Data On [2] VEE On [1] Back Light Off

		/*CR9B[4] DVP1 Data Source Selection: 1 = From secondary

 Restore status */

 Query Flat Panel's EDID Table Version Through DVI Connector */

 Found EDID1 Table */

 Get Panel Size Using EDID1 Table */

 The first two byte must be zero. */

 To get max pixel clock. */

 If Disable DVI, turn off pad */

 Turn off TMDS power. */

 Reset data driving first: */

 If Enable DVI, turn off pad */

			/*clear CR91[5] to direct on display period

fix dvi cann't be enabled with MB VT5718C4 - Al Zhang */

			/*clear CR91[5] to direct on display period

fix DVI cannot enable on EPIA-M board */

 Turn on Display period in the panel path. */

 Turn on TMDS power. */

 Disable LCD Scaling */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * driver for VIA VT1631 LVDS Transmitter

 check vendor id and device id */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * generic EDID driver

 as EDID devices can be connected/disconnected just add the driver */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 1998-2009 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.

 * Copyright 2009 Jonathan Corbet <corbet@lwn.net>

/*

 * Core code for the Via multifunction framebuffer device.

/*

 * The default port config.

/*

 * The OLPC XO-1.5 puts the camera power and reset lines onto

 * GPIO 2C.

/*

 * We currently only support one viafb device (will there ever be

 * more than one?), so just declare it globally here.

/*

 * Basic register access; spinlock required.

 ---------------------------------------------------------------------- */

/*

 * Interrupt management.  We have a single IRQ line for a lot of

 * different functions, so we need to share it.  The design here

 * is that we don't want to reimplement the shared IRQ code here;

 * we also want to avoid having contention for a single handler thread.

 * So each subdev driver which needs interrupts just requests

 * them directly from the kernel.  We just have what's needed for

 * overall access to the interrupt control register.

/*

 * Which interrupts are enabled now?

/*

 * Allow subdevs to ask for specific interrupts to be enabled.  These

 * functions must be called with reg_lock held

 Disable entirely */

 ---------------------------------------------------------------------- */

/*

 * Currently, the camera driver is the only user of the DMA code, so we

 * only compile it in if the camera driver is being built.  Chances are,

 * most viafb systems will not need to have this extra code for a while.

 * As soon as another user comes long, the ifdef can be removed.

/*

 * Access to the DMA engine.  This currently provides what the camera

 * driver needs (i.e. outgoing only) but is easily expandable if need

 * be.

/*

 * There are four DMA channels in the vx855.  For now, we only

 * use one of them, though.  Most of the time, the DMA channel

 * will be idle, so we keep the IRQ handler unregistered except

 * when some subsystem has indicated an interest.

/*

 * This mutex protects viafb_dma_users and our global interrupt

 * registration state; it also serializes access to the DMA

 * engine.

/*

 * The VX855 DMA descriptor (used for s/g transfers) looks

 * like this.

 Low part of phys addr */

 High 12 bits of addr */

 Offset into FB memory */

 Size, 16-byte units */

 "tile mode" setting */

 Next descriptor addr */

 Fill out to 64 bytes */

/*

 * Flags added to the "next descriptor low" pointers

 ??? Just has to be there */

 Final segment */

/*

 * The completion IRQ handler.

/*

 * Indicate a need for DMA functionality.

	/*

	 * Only VX855 is supported currently.

	/*

	 * Note the new user and set up our interrupt handler

	 * if need be.

/*

 * Do a scatter/gather DMA copy from FB memory.  You must have done

 * a successful call to viafb_request_dma() first.

	/*

	 * Get a place to put the descriptors.

	/*

	 * Fill them in.

 VIA driver does this */

	/*

	 * Program the engine.

	/*

	 * Now we just wait until the interrupt handler says

	 * we're done.  Except that, actually, we need to wait a little

	 * longer: the interrupts seem to jump the gun a little and we

	 * get corrupted frames sometimes.

	/*

	 * Clean up and we're done.

 Reset int enable */

 CONFIG_VIDEO_VIA_CAMERA */

 ---------------------------------------------------------------------- */

/*

 * Figure out how big our framebuffer memory is.  Kind of ugly,

 * but evidently we can't trust the information found in the

 * fbdev configuration area.

/* Get the BIOS-configured framebuffer size from PCI configuration space

 search for the "FUNCTION3" device in this chipset */

case CN750_FUNCTION3: */

16M */

32M */

64M */

32M */

8M */

16M */

32M */

64M */

128M */

256M */

 Only on VX855/875 */

512M */

32M */

/*

 * Figure out and map our MMIO regions.

	/*

	 * Hook up to the device registers.  Note that we soldier

	 * on if it fails; the framebuffer can operate (without

	 * acceleration) without this region.

	/*

	 * Map in framebuffer memory.  For now, failure here is

	 * fatal.  Unfortunately, in the absence of significant

	 * vmalloc space, failure here is also entirely plausible.

	 * Eventually we want to move away from mapping this

	 * entire region.

 try to map less memory on failure, 8 MB should be still enough */

/*

 * Create our subsidiary devices.

	/*

	 * Ignore return values.  Even if some of the devices

	 * fail to be created, we'll still be able to use some

	 * of the rest.

/*

 * Power management functions

	/*

	 * "I've occasionally hit a few drivers that caused suspend

	 * failures, and each and every time it was a driver bug, and

	 * the right thing to do was to just ignore the error and suspend

	 * anyway - returning an error code and trying to undo the suspend

	 * is not what anybody ever really wants, even if our model

	 *_allows_ for it."

	 * -- Linus Torvalds, Dec. 7, 2009

 Now bring back any subdevs */

	/*

	 * Global device initialization.

	/*

	 * Set up interrupts and create our subdevices.  Continue even if

	 * some things fail.

	/*

	 * Set up the framebuffer device

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * driver for VIA VT1621(M) TV Encoder

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * clock and PLL management functions

 enable reset */

 disable reset */

 enable reset */

 disable reset */

 enable reset */

 disable reset */

 enable reset */

 disable reset */

 enable reset */

 disable reset */

 0x06 should be the same */

		/* The OLPC XO-1.5 cannot suspend/resume reliably if the

		 * IGA1/IGA2 clocks are set as on or off (memory rot

		 * occasionally happens during suspend under such

		 * configurations).

		 *

		 * The only known stable scenario is to leave this bits as-is,

		 * which in their default states are documented to enable the

		 * clock only when it is needed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * infrastructure for devices connected via I2C

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



====================================================================*/

                      Gamma Function Implementation*/

====================================================================*/

 8 bpp mode can't adjust gamma */

 Enable Gamma */

 Fill IGA1 Gamma Table */

	/* If adjust Gamma value in SAMM, fill IGA1,

 Switch to IGA2 Gamma Table */

 Fill IGA2 Gamma Table */

 Enable Gamma */

 Reading gamma table to get color value */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.

 * Copyright 2010 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * basic modesetting functions

 unlock timing registers */

 lock timing registers */

 reset timing control */

 secondary display supports only quadword aligned memory */

	/* spec does not say that first adapter skips 3 bits but old

	 * code did it and seems to be reasonable in analogy to 2nd adapter

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * driver for VIA VT1622(M) Digital TV Encoder

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * driver for Chrontel CH7301 DVI Transmitter

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



 LCD Panel Type                      */

 LCD Timing Control 0                */

 LCD Timing Control 1                */

 LCD Power Sequence Control 0        */

 LCD Power Sequence Control 1        */

 LCD Power Sequence Control 2        */

 LCD Power Sequence Control 3        */

 LCD Power Sequence Control 4        */

 LCD Power Sequence Control 5        */

 24/12 bit LVDS Data off             */

 Video Mode Table for VT3314 chipset*/

 Common Setting for Video Mode */

Horizontal Retrace Start bit[11] should be 0*/

 Default FIFO For IGA2 */

 LCD scaling Factor */

 LCD scaling Factor */

 LCD scaling Factor */

 LCD scaling Factor */

 LCD Panel Type */

 LCD Timing Control 0 */

 LCD Timing Control 1 */

 LCD Power Sequence Control 0 */

 LCD Power Sequence Control 1 */

 LCD Power Sequence Control 2 */

 LCD Power Sequence Control 3 */

 LCD Power Sequence Control 4 */

 LCD Power Sequence Control 5 */

 24/12 bit LVDS Data off */

 Unlock Register                 */

 Display FIFO threshold Control  */

 Display FIFO Control            */

 GFX PREQ threshold              */

 GFX PREQ threshold              */

 Memory Control 0                */

 Power Management Control 0      */

 Power Management Control        */

 Sequencer Arbiter Control 0     */

 Sequencer Arbiter Control 1     */

 Display Arbiter Control 1       */

 Power Management Control 5      */

 Power Management Control 1      */

 Power Management Control 2      */

 Power Mangement 3                  */

 Default FIFO For IGA2              */

 Extended FIFO On                   */

 LCD Panel Type                     */

 LCD Timing Control 0               */

 LCD Timing Control 1               */

 LCD Power Sequence Control 0       */

 LCD Power Sequence Control 1       */

 LCD Power Sequence Control 2       */

 LCD Power Sequence Control 3       */

 LCD Power Sequence Control 4       */

 LCD Power Sequence Control 5       */

 24/12 bit LVDS Data off            */

 DVP0        ; DVP0 Clock Skew */

 DFP high    ; DFPH Clock Skew */

 DFP low           ; DFPL Clock Skew*/

 DVI on DVP1       ; DVP1 Clock Skew*/

 For VT3324: Common Setting for Video Mode */

 delayed E3_ECK */

 Clear VCK Plus. */

 LCD Panel Type                      */

 LCD Timing Control 0                */

 LCD Timing Control 1                */

 Second power sequence control       */

 LCD Power Sequence Control 0        */

 LCD Power Sequence Control 1        */

 LCD Power Sequence Control 2        */

 LCD Power Sequence Control 3        */

 LCD Power Sequence Control 4        */

 LCD Power Sequence Control 5        */

 24/12 bit LVDS Data off             */

 delayed E3_ECK */

 LCD Panel Type                      */

 LCD Timing Control 0                */

 LCD Timing Control 1                */

 Second power sequence control       */

 24/12 bit LVDS Data off             */

 TMDS/LVDS control register.         */

 Video Mode Table */

 Common Setting for Video Mode */

 Mode:1024X768 */

/* struct VPITTable {

	unsigned char  Misc;

	unsigned char  SR[StdSR];

	unsigned char  CR[StdCR];

	unsigned char  GR[StdGR];

	unsigned char  AR[StdAR];

 Msic */

 Sequencer */

 Graphic Controller */

 Attribute Controller */

*******************/

 Mode Table       */

*******************/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.



 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * driver for VIA VT1636 LVDS Transmitter

 check vendor id and device id */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

/*

 * driver for VIA VT1625(M) HDTV Encoder

/*

 *  linux/drivers/video/kyro/fbdev.c

 *

 *  Copyright (C) 2002 STMicroelectronics

 *  Copyright (C) 2003, 2004 Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * PCI Definitions

***************************************************************************/

 640x480, 16bpp @ 60 Hz */

 Virtual address of PCI register region */

 Offset from start of vid mem to next free region */

 Offset from start of vid mem to overlay */

 Interleaved YUV and 422 mode Y stride */

 422 mode U & V stride */

 global graphics card info structure (one per card) */

 PCI driver prototypes */

 640x350 @ 85Hz */

 640x400 @ 85Hz */

 720x400 @ 85Hz */

 640x480 @ 60Hz */

 640x480 @ 72Hz */

 640x480 @ 75Hz */

 640x480 @ 85Hz */

 800x600 @ 56Hz */

 800x600 @ 60Hz */

 800x600 @ 72Hz */

 800x600 @ 75Hz */

 800x600 @ 85Hz */

 1024x768 @ 60Hz */

 1024x768 @ 70Hz */

 1024x768 @ 75Hz */

 1024x768 @ 85Hz */

 1152x864 @ 75Hz */

 1280x960 @ 60Hz */

 1280x960 @ 85Hz */

 1280x1024 @ 60Hz */

 1280x1024 @ 75Hz */

 1280x1024 @ 85Hz */

 1600x1200 @ 60Hz */

 1600x1200 @ 65Hz */

 1600x1200 @ 70Hz */

 1600x1200 @ 75Hz */

 1600x1200 @ 85Hz */

 1792x1344 @ 60Hz */

 1792x1344 @ 75Hz */

 1856x1392 @ 60Hz */

 1856x1392 @ 75Hz */

 1920x1440 @ 60Hz */

 1920x1440 @ 75Hz */

/*

 * This needs to be kept ordered corresponding to kyro_modedb.

 Accessors */

 Turn off display */

 Bring us out of VGA and into Hi-Res mode, if not already. */

 Turn on display in new mode */

		/*

		 * Can only create one overlay without resetting the card or

		 * changing display mode

	/* Overlays are addressed in multiples of 16bytes or 32bytes, so make

	 * sure the start offset is on an appropriate boundary.

 probably haven't called CreateOverlay yet */

 Stop Ramdac Output */

 Start Ramdac Output */

 Height/Width of picture in mm */

 Timing information. All values are in picoseconds */

	/* par->PIXCLK is in 100Hz units. Convert to picoseconds -

	 * ensuring we do not exceed 32 bit precision

	/*

	 * XXX: Enabling this really screws over the pixclock value when we

	 * read it back with fbset. As such, leaving this commented out appears

	 * to do the right thing (at least for now) .. bearing in mind that we

	 * have infact already done the KHZ2PICOS conversion in both the modedb

	 * and kyro_var. -- PFM.

	var->pixclock = 1000000000 / (par->PIXCLK / 10);

	/* the header file claims we should use picoseconds

	 * - nobody else does though, the all use pixels and lines

	 * of h and v sizes. Both options here.

	/*

	 * If we're being called by __fb_try_mode(), then we don't want to

	 * override any of the var settings that we've already parsed

	 * from our modedb. -- PFM.

 Actual resolution */

 pixel depth */

 Refresh rate */

 time for a line in ns */

 time for a frame in ns (precision in 32bpp) */

 Calculate refresh rate and horrizontal clocks */

 calculate horizontal timings */

 calculate vertical timings */

 length of a line in bytes    */

 Invalid register */

 This should give a reasonable default video mode */

 Reset the board */

 Sync up the PLL */

/*

 *  linux/drivers/video/kyro/STG4000OverlayDevice.c

 *

 *  Copyright (C) 2000 Imagination Technologies Ltd

 *  Copyright (C) 2002 STMicroelectronics

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 HW Defines */

 Primary surface */

 Overlay surface */

 Decimation and Scaling */

clipped on-screen pixel position of overlay */

clipped pixel pos of source data within buffer thses need to be 128 bit word aligned */

 on-screen pixel position of overlay */

 Set Overlay address to default */

 Set Overlay U address */

 Set Overlay V address */

 Set Overlay Size */

 Set Overlay Vt Decimation */

 Set Overlay format to default value */

 Set Vertical scaling to default */

 Set to no scaling */

 Set Horizontal Scaling to default */

 Set to no scaling */

 Set Blend mode to Alpha Blend */

	/* ????? SG 08/11/2001 Surely this isn't the alpha blend mode,

	   hopefully its overwrite

 Stride in 16 byte words - 16Bpp */

 Format is 16bits so num 16 byte words is width/8 */

 inWidth % 8 */

 Round up to next 16byte boundary */

 Y component is 8bits so num 16 byte words is width/16 */

 inWidth % 16 */

 Round up to next 16byte boundary */

 Set Overlay address and Format mode */

 Overlay format to Linear */

 Overlay format to Planer */

 Only bits 24:4 of the Overlay address */

 Y component is 8bits so num 32 byte words is width/32 */

 inWidth % 16 */

 Round up to next 32byte boundary */

 Align U,V data to 32byte boundary */

 Align U,V data to 32byte boundary */

	/* Set Overlay YUV pixel format

	 * Make sure that LUT not used - ??????

 Only support Planer or UYVY linear formats */

 In bytes */

 Enable Overlay */

 Set video stream control */

 video stream */

************ Vertical decimation/scaling ******************/

 Get Src Top and Bottom */

 on-screen overlay */

	/* First work out the position we are to display as offset from the

	 * source of the buffer

 fixed point scale factor */

 At this point ulSrc represents the input decimator */

 the number number of lines that will go into the scaler */

 vertical decimation factor scaled up to nearest integer */

 Decimation */

**************** Horizontal decimation/scaling ***************************/

	/*

	 * Now we handle the horizontal case, this is a simplified version of

	 * the vertical case in that we decimate by factors of 2.  as we are

	 * working in words we should always be able to decimate by these

	 * factors.  as we always have to have a buffer which is aligned to a

	 * whole number of 128 bit words, we must align the left side to the

	 * lowest to the next lowest 128 bit boundary, and the right hand edge

	 * to the next largets boundary, (in a similar way to how we didi it in

	 * PMX1) as the left and right hand edges are aligned to these

	 * boundaries normally this only becomes an issue when we are chopping

	 * of one of the sides We shall work out vertical stuff first

 first work out the position we are to display as offset from the source of the buffer */

 source pixels per dest pixel <<11 */

 then number of destination pixels out we are */

 this replaces the code which was making a decision as to use either ulFxOffset or ulSrcX1 */

 then number of destination pixels out we are */

		/*

		 * we must align these to our 128 bit boundaries. we shall

		 * round down the pixel pos to the nearest 8 pixels.

 shift fxscale until it is in the range of the scaler */

		/*

		 * to try and get the best values We first try and use

		 * src/dwdest for the scale factor, then we move onto src-1

		 *

		 * we want to check to see if we will need to clip data, if so

		 * then we should clip our source so that we don't need to

			/*

			 * we must align the right hand edge to the next 32

			 * pixel` boundary, must be on a 256 boundary so u, and

			 * v are 128 bit aligned

			/*

			 * we must align the right hand edge to the next

			 * 8pixel` boundary

 this is the input size line store needs to cope with */

		/*

		 * use unclipped value to work out scale factror this is the

		 * scale factor we want we shall now work out the horizonal

		 * decimation and scaling

 input pixels to scaler; */

 We may need to do more here if we really have a HW rev < 5 */

 Vertical Scaling */

	/* Calculate new output line stride, this is always the number of 422

	   words in the line buffer, so it doesn't matter if the

	   mode is 420. Then set the vertical scale register.

 DAC_LS_CTRL = stride */

	/* Now set up the overlay size using the modified width and height

	   from decimate and scaling calculations

 Set Video Window Start */

 Set Video Window End */

	/* Finally set up the rest of the overlay regs in the order

	   done in the IMG driver

/*

 *  linux/drivers/video/kyro/STG4000VTG.c

 *

 *  Copyright (C) 2002 STMicroelectronics

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 Reset the VGA registers */

 Just for Delay */

 Pull-out the VGA registers from reset */

 Stop Ver and Hor Sync Generator */

 Start Ver and Hor Sync Generator */

 Horizontal */

 Vertical */

 Need to calculate the right border */

 Work out the Border */

 Border the same for Vertical and Horizontal */

*********** Get Timing values for Horizontal ******************/

*********** Get Timing values for Vertical ******************/

 Set Hor Timing 1, 2, 3 */

 Set Ver Timing 1, 2, 3 */

 Set Verical and Horizontal Polarity */

 +hsync -vsync */

 -hsync +vsync */

 -hsync -vsync */

 +hsync -vsync */

/*

 *  linux/drivers/video/kyro/STG4000InitDevice.c

 *

 *  Copyright (C) 2000 Imagination Technologies Ltd

 *  Copyright (C) 2002 STMicroelectronics

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 SDRAM fixed settings */

 Reset values */

 reserved bit, do not reset */

 Core clock freq */

 Reference Clock freq */

 PCI Registers */

 Misc */

 PLL Clock */

 scale numbers by 2^8 for fixed point calc */

 Minimum multiplier */

 Max */

 Minimum divisor */

 Max */

 Min output divider (shift) */

 Max */

 Min VCO rate */

 Max VCO rate */

 Min VCO rate (restricted) */

 Max VCO rate (restricted) */

 Min VCO rate (restricted) */

 Max VCO rate */

 Max VCO rate (restricted) */

 Get memory tpye and chip speed indexs from the SubSysDevID */

 Program SD-RAM interface */

 Translate clock in Hz */

 in Hz */

 in Hz */

	/* Work out acceptable clock

	 * The method calculates ~ +- 0.4% (1/256)

 Scale clock required for use in calculations */

 Iterate through post divider values */

 loop for pre-divider from min to max  */

 estimate required feedback multiplier */

 F = ClkRequired * R * (2^OD) / Fref */

 compensate for accuracy */

			/*

			 * We should be close to our target frequency (if it's

			 * achievable with current OD & R) let's iterate

			 * through F for best fit

 Calc VCO at full accuracy */

				/*

				 * Check it's within restricted VCO range

				 * unless of course the desired frequency is

				 * above the restricted range, then test

				 * against VCO limit

 Clock = VCO / (2^OD) */

 Is this clock good enough? */

 is this better, ( aim for highest Score) */

			/*--------------------------------------------------------------------------

                             Here we want to use a scoring system which will take account of both the

                            value at the phase comparater and the VCO output

                             to do this we will use a cumulative score between the two

                          The way this ends up is that we choose the first value in the loop anyway

                          but we shall keep this code in case new restrictions come into play

	/*

	   did we find anything?

	   Then return RFOD

 Disable Primary Core Thread0 */

 Disable Primary Core Thread1 */

 Need to play around to reset TA */

 Set Core PLL Control to Core PLL Mode  */

 Send bits 0:7 of the Core PLL Mode register */

	/* Without some delay between the PCI config writes the clock does

	   not reliably set when the code is compiled -O3

 Send bits 8:15 of the Core PLL Mode register */

 Enable Primary Core Thread0 */

 Enable Primary Core Thread1 */

/*

 *  linux/drivers/video/kyro/STG4000Ramdac.c

 *

 *  Copyright (C) 2002 STMicroelectronics

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 128 bit bus width      */

 Make sure DAC is in Reset */

 Set Pixel Format */

 Set LUT not used from 16bpp to 32 bpp ??? */

 Set for 32 bits per pixel */

 Workout Bus transfer bandwidth according to pixel format */

 Get Screen Stride in pixels */

 Set Primary size info */

 Set Pixel Clock */

 Set DAC PLL Mode */

 tmp |= ((P-1) | ((F-2) << 2) | ((R-2) << 11)); */

 Set Prim Address */

 Set Cursor details with HW Cursor disabled */

 Set Video Window */

 Set DAC Border Color to default */

 Set Graphics and Overlay Burst Control */

 Set CRC Trigger to default */

 Set Video Port Control to default */

 Ramdac control, turning output to the screen on and off */

 Disable DAC for Graphics Stream Control */

 Enable DAC for Graphics Stream Control */

/*

 * intelfb

 *

 * Linux framebuffer driver for Intel(R) 865G integrated graphics chips.

 *

 * Copyright © 2002, 2003 David Dawes <dawes@xfree86.org>

 *                   2004 Sylvain Meyer

 *

 * This driver consists of two parts.  The first part (intelfbdrv.c) provides

 * the basic fbdev interfaces, is derived in part from the radeonfb and

 * vesafb drivers, and is covered by the GPL.  The second part (intelfbhw.c)

 * provides the code to program the hardware.  Most of it is derived from

 * the i810/i830 XFree86 driver.  The HW-specific code is covered here

 * under a dual license (GPL and MIT/XFree86 license).

 *

 * Author: David Dawes

 *

 $DHD: intelfb/intelfbhw.c,v 1.9 2003/06/27 15:06:25 dawes Exp $ */

 I8xx */

 I9xx */

 Find the bridge device.  It is always 0:0.0 */

 Get the fb aperture size and "stolen" memory amount. */

		/* 915, 945 and 965 chipsets support a 256MB aperture.

		   Aperture size is determined by inspected the

	/* Stolen memory size is reduced by the GTT and the popup.

 Check if enough video memory. */

 Check if x/y limits are OK. */

 Check for doublescan modes. */

 Check if clock is OK. */

 Blank the screen. */

 Turn plane A on or off */

 Flush */

 Turn off/on the HW cursor */

 Set DPMS level */

 Check which pipe is connected to an active display plane. */

 keep old default behaviour - prefer PIPE_A */

 Impossible that no pipe is selected - return PIPE_A */

 Read in as much of the HW state as possible. */

 This seems to be a problem with the 852GM/855GM */

 Read in as much of the HW state as possible. */

 Split the M parameter into M1 and M2. */

 no point optimising too much - brute force m */

 Split the P parameter into P1 and P2. */

 slightly bias the error for bigger clocks */

 It is assumed that hw is filled in with the initial state information. */

 Disable VGA */

 Set which pipe's registers will be set. */

 Use ADPA register for sync control. */

 sync polarity */

 Connect correct pipe to the analog port DAC */

 Set DPMS state to D0 (on) */

 Desired clock in kHz */

 Check for overflow. */

 Use display plane A. */

 Set CRTC registers. */

 the chip adds 2 halflines automatically */

 Adjust for register values, and check for overflow. */

 Check stride alignment. */

 Set the palette to 8-bit mode. */

 Program a (non-VGA) video mode. */

 Assume single pipe */

 Disable VGA */

 turn off pipe */

 Disable planes A and B. */

 Wait for vblank. For now, just wait for a 50Hz cycle (20ms)) */

 Disable Sync */

 do some funky magic - xyzzy */

 turn off PLL */

 Set PLL parameters */

 Enable PLL */

 Set DVOs B/C */

 undo funky magic */

 Set ADPA */

 Set pipe parameters */

 even lines first */

 non-interlaced */

 clear all status bits only */

 Enable pipe */

 Enable sync */

 setup display plane */

		/*

		 *      i830M errata: the display plane must be enabled

		 *      to allow writes to the other bits in the plane

		 *      control register.

 Enable plane */

 forward declarations */

 Try again */

	/*

	 * Send a flush, then wait until the ring is empty.  This is what

	 * the XFree86 driver does, and actually it doesn't seem a lot worse

	 * than the recommended method (both have problems).

 Flush the ring buffer if it's enabled. */

 Stop the 2D engine, and turn off the ring buffer. */

/*

 * Enable the ring buffer, and initialise the 2D engine.

 * It is assumed that the graphics engine has been stopped by previously

 * calling intelfb_2d_stop().

 Initialise the primary ring buffer. */

 2D fillrect (solid fill or invert) */

 size in bytes of a padded scanline */

 Total bytes of padded scanline data to write out. */

	/*

	 * Check if the glyph data exceeds the immediate mode limit.

	 * It would take a large font (1K pixels) to hit this limit.

 Src data is packaged a dword (32-bit) at a time. */

	/*

	 * Ring has to be padded to a quad word. But because the command starts

	   with 7 bytes, pad only if there is an even number of ndwords

 HW cursor functions. */

 Flush changes */

 Flush changes */

	/*

	 * Sets the position. The coordinates are assumed to already

	 * have any offset adjusted. Assume that the cursor is never

	 * completely off-screen, and that x, y are always >= 0.

 non-interlaced */

 not us */

 clear status bits 0-15 ASAP and don't touch bits 16-31 */

 i830 DRM uses ffff */

 non-interlaced */

 clear IRQ requests */

/*

 * intelfb

 *

 * Linux framebuffer driver for Intel(R) 830M/845G/852GM/855GM/865G/915G/915GM/

 * 945G/945GM/945GME/965G/965GM integrated graphics chips.

 *

 * Copyright © 2002, 2003 David Dawes <dawes@xfree86.org>

 *                   2004 Sylvain Meyer

 *                   2006 David Airlie

 *

 * This driver consists of two parts.  The first part (intelfbdrv.c) provides

 * the basic fbdev interfaces, is derived in part from the radeonfb and

 * vesafb drivers, and is covered by the GPL.  The second part (intelfbhw.c)

 * provides the code to program the hardware.  Most of it is derived from

 * the i810/i830 XFree86 driver.  The HW-specific code is covered here

 * under a dual license (GPL and MIT/XFree86 license).

 *

 * Author: David Dawes

 *

 $DHD: intelfb/intelfbdrv.c,v 1.20 2003/06/27 15:17:40 dawes Exp $ */

/*

 * Changes:

 *    01/2003 - Initial driver (0.1.0), no mode switching, no acceleration.

 *		This initial version is a basic core that works a lot like

 *		the vesafb driver.  It must be built-in to the kernel,

 *		and the initial video mode must be set with vga=XXX at

 *		boot time.  (David Dawes)

 *

 *    01/2003 - Version 0.2.0: Mode switching added, colormap support

 *		implemented, Y panning, and soft screen blanking implemented.

 *		No acceleration yet.  (David Dawes)

 *

 *    01/2003 - Version 0.3.0: fbcon acceleration support added.  Module

 *		option handling added.  (David Dawes)

 *

 *    01/2003 - Version 0.4.0: fbcon HW cursor support added.  (David Dawes)

 *

 *    01/2003 - Version 0.4.1: Add auto-generation of built-in modes.

 *		(David Dawes)

 *

 *    02/2003 - Version 0.4.2: Add check for active non-CRT devices, and

 *		mode validation checks.  (David Dawes)

 *

 *    02/2003 - Version 0.4.3: Check when the VC is in graphics mode so that

 *		acceleration is disabled while an XFree86 server is running.

 *		(David Dawes)

 *

 *    02/2003 - Version 0.4.4: Monitor DPMS support.  (David Dawes)

 *

 *    02/2003 - Version 0.4.5: Basic XFree86 + fbdev working.  (David Dawes)

 *

 *    02/2003 - Version 0.5.0: Modify to work with the 2.5.32 kernel as well

 *		as 2.4.x kernels.  (David Dawes)

 *

 *    02/2003 - Version 0.6.0: Split out HW-specifics into a separate file.

 *		(David Dawes)

 *

 *    02/2003 - Version 0.7.0: Test on 852GM/855GM.  Acceleration and HW

 *		cursor are disabled on this platform.  (David Dawes)

 *

 *    02/2003 - Version 0.7.1: Test on 845G.  Acceleration is disabled

 *		on this platform.  (David Dawes)

 *

 *    02/2003 - Version 0.7.2: Test on 830M.  Acceleration and HW

 *		cursor are disabled on this platform.  (David Dawes)

 *

 *    02/2003 - Version 0.7.3: Fix 8-bit modes for mobile platforms

 *		(David Dawes)

 *

 *    02/2003 - Version 0.7.4: Add checks for FB and FBCON_HAS_CFB* configured

 *		in the kernel, and add mode bpp verification and default

 *		bpp selection based on which FBCON_HAS_CFB* are configured.

 *		(David Dawes)

 *

 *    02/2003 - Version 0.7.5: Add basic package/install scripts based on the

 *		DRI packaging scripts.  (David Dawes)

 *

 *    04/2003 - Version 0.7.6: Fix typo that affects builds with SMP-enabled

 *		kernels.  (David Dawes, reported by Anupam).

 *

 *    06/2003 - Version 0.7.7:

 *              Fix Makefile.kernel build problem (Tsutomu Yasuda).

 *		Fix mis-placed #endif (2.4.21 kernel).

 *

 *    09/2004 - Version 0.9.0 - by Sylvain Meyer

 *              Port to linux 2.6 kernel fbdev

 *              Fix HW accel and HW cursor on i845G

 *              Use of agpgart for fb memory reservation

 *              Add mtrr support

 *

 *    10/2004 - Version 0.9.1

 *              Use module_param instead of old MODULE_PARM

 *              Some cleanup

 *

 *    11/2004 - Version 0.9.2

 *              Add vram option to reserve more memory than stolen by BIOS

 *              Fix intelfbhw_pan_display typo

 *              Add __initdata annotations

 *

 *    04/2008 - Version 0.9.5

 *              Add support for 965G/965GM. (Maik Broemme <mbroemme@plusserver.de>)

 *

 *    08/2008 - Version 0.9.6

 *              Add support for 945GME. (Phil Endecott <spam_from_intelfb@chezphil.org>)

/*

 * Limiting the class to PCI_CLASS_DISPLAY_VGA prevents function 1 of the

 * mobile chipsets from being registered.

 Global data */

 fb ops */

 PCI driver module table */

 Module description/parameters */

	/*

	 * These are the built-in options analogous to the module parameters

	 * defined above.

	 *

	 * The syntax is:

	 *

	 *    video=intelfb:[mode][,<param>=<val>] ...

	 *

	 * e.g.,

	 *

	 *    video=intelfb:1024x768-16@75,accel=0

/***************************************************************

 *                        driver init / cleanup                *

 un-register I2C bus */

 Reserve pixmap space. */

	/* set early this option because it could be changed by tv encoder

 Enable device. */

 Set base addresses. */

 Reserve the fb and MMIO regions */

 Get the chipset info. */

 Set these from the options. */

 Framebuffer parameters - Use all the stolen memory if >= vram */

 Allocate space for the ring buffer and HW cursor if enabled. */

 Use agpgart to manage the GATT */

 get the current gatt info */

 set the mem offsets - set them after the already used pages */

 Allocate memories (which aren't stolen) */

 Map the fb and MMIO regions */

 ioremap only up to the end of used aperture */

 update framebuffer memory parameters */

 starts at offset 0 */

 release agpgart */

	/*

	 * Check if the LVDS port or any DVO ports are enabled.  If so,

	 * don't allow mode switching

 Initialise dinfo and related data. */

 If an initial mode was programmed at boot time, get its details. */

 remap fb address */

 register I2C bus */

 Save the initial register state. */

 read active pipe */

 Cursor initialisation */

 2d acceleration init */

/***************************************************************

 *                       helper functions                      *

/***************************************************************

 *                Various initialisation functions             *

 Dummy timing values (assume 60Hz) */

 Allow use of half of the video ram for panning */

 Update dinfo to match the active video mode. */

 Make sure the line length is a aligned correctly. */

 fbops functions */

/***************************************************************

 *                       fbdev interface                       *

 Good pitches to allow tiling.  Don't care about pitches < 1024. */

 update the pitch */

 Check for a supported bpp. */

	/*

	 * Disable VCO prior to timing register change.

 When/if we have our own ioctls. */

 ROP_XOR */

 If XFree killed the cursor - restore it */

		/* save the bitmap to restore it when XFree will

/**************************************************************************



 Copyright 2006 Dave Airlie <airlied@linux.ie>



All Rights Reserved.



Permission is hereby granted, free of charge, to any person obtaining a

copy of this software and associated documentation files (the "Software"),

to deal in the Software without restriction, including without limitation

on the rights to use, copy, modify, merge, publish, distribute, sub

license, and/or sell copies of the Software, and to permit persons to whom

the Software is furnished to do so, subject to the following conditions:



The above copyright notice and this permission notice (including the next

paragraph) shall be included in all copies or substantial portions of the

Software.



THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

THE COPYRIGHT HOLDERS AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,

DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

USE OR OTHER DEALINGS IN THE SOFTWARE.



 bit locations in the registers */

 Raise SCL and SDA */

 everyone has at least a single analog output */

 setup the DDC bus for analog output */

	/* need to add the output busses for each device

	   - this function is very incomplete

	   - i915GM has LVDS and TVOUT for example

 has some LVDS + tv-out */

 SDVO ports have a single control bus - 2 devices */

 TODO: initialize the SDVO */

 I830SDVOInit(pScrn, i, DVOB); */

 set up SDVOC */

 TODO: initialize the SDVO */

 I830SDVOInit(pScrn, i, DVOC); */

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_pr.c

 *

 * This file contains SPC-3 compliant persistent reservations and

 * legacy SPC-2 reservations with compatible reservation handling (CRH=1)

 *

 * (c) Copyright 2009-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

/*

 * Used for Specify Initiator Ports Capable Bit (SPEC_I_PT)

		/*

		 * From spc4r17 5.7.3 Exceptions to SPC-2 RESERVE and RELEASE

		 * behavior

		 *

		 * A RESERVE(6) or RESERVE(10) command shall complete with GOOD

		 * status, but no reservation shall be established and the

		 * persistent reservation shall not be changed, if the command

		 * is received from a) and b) below.

		 *

		 * A RELEASE(6) or RELEASE(10) command shall complete with GOOD

		 * status, but the persistent reservation shall not be released,

		 * if the command is received from a) and b)

		 *

		 * a) An I_T nexus that is a persistent reservation holder; or

		 * b) An I_T nexus that is registered if a registrants only or

		 *    all registrants type persistent reservation is present.

		 *

		 * In all other cases, a RESERVE(6) command, RESERVE(10) command,

		 * RELEASE(6) command, or RELEASE(10) command shall be processed

		 * as defined in SPC-2.

		/*

		 * Following spc2r20 5.5.1 Reservations overview:

		 *

		 * If a logical unit has executed a PERSISTENT RESERVE OUT

		 * command with the REGISTER or the REGISTER AND IGNORE

		 * EXISTING KEY service action and is still registered by any

		 * initiator, all RESERVE commands and all RELEASE commands

		 * regardless of initiator shall conflict and shall terminate

		 * with a RESERVATION CONFLICT status.

	/*

	 * This is currently the case for target_core_mod passthrough struct se_cmd

	 * ops

/*

 * Begin SPC-3/SPC-4 Persistent Reservations emulation support

 *

 * This function is called by those initiator ports who are *NOT*

 * the active PR reservation holder when a reservation is present.

 Conflict by default */

 ALL_REG, REG_ONLY */

 Write Exclusive */

	int legacy = 0; /* Act like a legacy device and return

		/*

		 * Some commands are only allowed for the persistent reservation

		 * holder.

		/*

		 * Some commands are only allowed for registered I_T Nexuses.

		/*

		 * Each registered I_T Nexus is a reservation holder.

	/*

	 * Referenced from spc4r17 table 45 for *NON* PR holder access

 Allowed Write Exclusive */

		/*

		 * This follows PERSISTENT_RESERVE_OUT service actions that

		 * are allowed in the presence of various reservations.

		 * See spc4r17, table 46

 Handled by CRH=1 in target_scsi2_reservation_release() */

 Handled by CRH=1 in target_scsi2_reservation_reserve() */

 Conflict for legacy */

 Allowed Write Exclusive */

 Allowed Write Exclusive */

 Allowed */

		ret = 0; /*/ Allowed CDBs */

		break;

	default:

		other_cdb = 1;

		break;

	}



	 */

	if (!ret && !other_cdb) {

		pr_debug("Allowing explicit CDB: 0x%02x for %s"

			" reservation holder\n", cdb[0],

			core_scsi3_pr_dump_type(pr_reg_type));



		return ret;

	}



	 */

	if (we && !registered_nexus) {

		if (cmd->data_direction == DMA_TO_DEVICE) {



			 */

			pr_debug("%s Conflict for unregistered nexus"

				" %s CDB: 0x%02x to %s reservation\n",

				transport_dump_cmd_direction(cmd),

				se_sess->se_node_acl->initiatorname, cdb[0],

				core_scsi3_pr_dump_type(pr_reg_type));

			return 1;

		} else {



			 */



			if (!registered_nexus) {

				pr_debug("Allowing implicit CDB: 0x%02x"

					" for %s reservation on unregistered"

					" nexus\n", cdb[0],

					core_scsi3_pr_dump_type(pr_reg_type));

			}



			return 0;

		}

	} else if ((reg_only) || (all_reg)) {

		if (registered_nexus) {



			 */



			pr_debug("Allowing implicit CDB: 0x%02x for %s"

				" reservation\n", cdb[0],

				core_scsi3_pr_dump_type(pr_reg_type));



			return 0;

		}

       } else if (we && registered_nexus) {



                */

               if (cmd->data_direction == DMA_FROM_DEVICE) {

                       pr_debug("Allowing READ CDB: 0x%02x for %s"

                               " reservation\n", cdb[0],

                               core_scsi3_pr_dump_type(pr_reg_type));



                       return 0;

               }

	}

	pr_debug("%s Conflict for %sregistered nexus %s CDB: 0x%2x"

		" for %s reservation\n", transport_dump_cmd_direction(cmd),

		(registered_nexus) ? "" : "un",

		se_sess->se_node_acl->initiatorname, cdb[0],

		core_scsi3_pr_dump_type(pr_reg_type));



	return 1; /* Conflict by default */

}



static sense_reason_t

target_scsi3_pr_reservation_check(struct se_cmd *cmd)

{

	struct se_device *dev = cmd->se_dev;

	struct se_session *sess = cmd->se_sess;

	u32 pr_reg_type;

	bool isid_mismatch = false;



	if (!dev->dev_pr_res_holder)

		return 0;



	pr_reg_type = dev->dev_pr_res_holder->pr_res_type;

	cmd->pr_res_key = dev->dev_pr_res_holder->pr_res_key;

	if (dev->dev_pr_res_holder->pr_reg_nacl != sess->se_node_acl)

		goto check_nonholder;



	if (dev->dev_pr_res_holder->isid_present_at_reg) {

		if (dev->dev_pr_res_holder->pr_reg_bin_isid !=

		    sess->sess_bin_isid) {

			isid_mismatch = true;

			goto check_nonholder;

		}

	}



	return 0;



check_nonholder:

	if (core_scsi3_pr_seq_non_holder(cmd, pr_reg_type, isid_mismatch))

		return TCM_RESERVATION_CONFLICT;

	return 0;

}



static u32 core_scsi3_pr_generation(struct se_device *dev)

{

	u32 prg;





	 */

	spin_lock(&dev->dev_reservation_lock);

	prg = dev->t10_pr.pr_generation++;

	spin_unlock(&dev->dev_reservation_lock);



	return prg;

}



static struct t10_pr_registration *__core_scsi3_do_alloc_registration(

	struct se_device *dev,

	struct se_node_acl *nacl,

	struct se_lun *lun,

	struct se_dev_entry *dest_deve,

	u64 mapped_lun,

	unsigned char *isid,

	u64 sa_res_key,

	int all_tg_pt,

	int aptpl)

{

	struct t10_pr_registration *pr_reg;



	pr_reg = kmem_cache_zalloc(t10_pr_reg_cache, GFP_ATOMIC);

	if (!pr_reg) {

		pr_err("Unable to allocate struct t10_pr_registration\n");

		return NULL;

	}



	INIT_LIST_HEAD(&pr_reg->pr_reg_list);

	INIT_LIST_HEAD(&pr_reg->pr_reg_abort_list);

	INIT_LIST_HEAD(&pr_reg->pr_reg_aptpl_list);

	INIT_LIST_HEAD(&pr_reg->pr_reg_atp_list);

	INIT_LIST_HEAD(&pr_reg->pr_reg_atp_mem_list);

	atomic_set(&pr_reg->pr_res_holders, 0);

	pr_reg->pr_reg_nacl = nacl;



	 */

	if (dest_deve) {

		pr_reg->pr_reg_deve = dest_deve;

	} else {

		rcu_read_lock();

		pr_reg->pr_reg_deve = target_nacl_find_deve(nacl, mapped_lun);

		if (!pr_reg->pr_reg_deve) {

			rcu_read_unlock();

			pr_err("Unable to locate PR deve %s mapped_lun: %llu\n",

				nacl->initiatorname, mapped_lun);

			kmem_cache_free(t10_pr_reg_cache, pr_reg);

			return NULL;

		}

		kref_get(&pr_reg->pr_reg_deve->pr_kref);

		rcu_read_unlock();

	}

	pr_reg->pr_res_mapped_lun = mapped_lun;

	pr_reg->pr_aptpl_target_lun = lun->unpacked_lun;

	pr_reg->tg_pt_sep_rtpi = lun->lun_rtpi;

	pr_reg->pr_res_key = sa_res_key;

	pr_reg->pr_reg_all_tg_pt = all_tg_pt;

	pr_reg->pr_reg_aptpl = aptpl;



	 */

	if (isid != NULL) {

		pr_reg->pr_reg_bin_isid = get_unaligned_be64(isid);

		snprintf(pr_reg->pr_reg_isid, PR_REG_ISID_LEN, "%s", isid);

		pr_reg->isid_present_at_reg = 1;

	}



	return pr_reg;

}



static int core_scsi3_lunacl_depend_item(struct se_dev_entry *);

static void core_scsi3_lunacl_undepend_item(struct se_dev_entry *);





 */

static struct t10_pr_registration *__core_scsi3_alloc_registration(

	struct se_device *dev,

	struct se_node_acl *nacl,

	struct se_lun *lun,

	struct se_dev_entry *deve,

	u64 mapped_lun,

	unsigned char *isid,

	u64 sa_res_key,

	int all_tg_pt,

	int aptpl)

{

	struct se_dev_entry *deve_tmp;

	struct se_node_acl *nacl_tmp;

	struct se_lun_acl *lacl_tmp;

	struct se_lun *lun_tmp, *next, *dest_lun;

	const struct target_core_fabric_ops *tfo = nacl->se_tpg->se_tpg_tfo;

	struct t10_pr_registration *pr_reg, *pr_reg_atp, *pr_reg_tmp, *pr_reg_tmp_safe;

	int ret;



	 */

	pr_reg = __core_scsi3_do_alloc_registration(dev, nacl, lun, deve, mapped_lun,

						    isid, sa_res_key, all_tg_pt,

						    aptpl);

	if (!pr_reg)

		return NULL;



	 */

	if (!all_tg_pt)

		return pr_reg;



	 */

	spin_lock(&dev->se_port_lock);

	list_for_each_entry_safe(lun_tmp, next, &dev->dev_sep_list, lun_dev_link) {

		if (!percpu_ref_tryget_live(&lun_tmp->lun_ref))

			continue;

		spin_unlock(&dev->se_port_lock);



		spin_lock(&lun_tmp->lun_deve_lock);

		list_for_each_entry(deve_tmp, &lun_tmp->lun_deve_list, lun_link) {



			 */

			if (!deve_tmp->se_lun_acl)

				continue;



			lacl_tmp = rcu_dereference_check(deve_tmp->se_lun_acl,

						lockdep_is_held(&lun_tmp->lun_deve_lock));

			nacl_tmp = lacl_tmp->se_lun_nacl;



			 */

			if (nacl == nacl_tmp)

				continue;



			 */

			if (tfo != nacl_tmp->se_tpg->se_tpg_tfo)

				continue;



			 */

			if (strcmp(nacl->initiatorname, nacl_tmp->initiatorname))

				continue;



			kref_get(&deve_tmp->pr_kref);

			spin_unlock(&lun_tmp->lun_deve_lock);



			 */

			ret = core_scsi3_lunacl_depend_item(deve_tmp);

			if (ret < 0) {

				pr_err("core_scsi3_lunacl_depend"

						"_item() failed\n");

				percpu_ref_put(&lun_tmp->lun_ref);

				kref_put(&deve_tmp->pr_kref, target_pr_kref_release);

				goto out;

			}



			 */

			dest_lun = rcu_dereference_check(deve_tmp->se_lun,

				kref_read(&deve_tmp->pr_kref) != 0);



			pr_reg_atp = __core_scsi3_do_alloc_registration(dev,

						nacl_tmp, dest_lun, deve_tmp,

						deve_tmp->mapped_lun, NULL,

						sa_res_key, all_tg_pt, aptpl);

			if (!pr_reg_atp) {

				percpu_ref_put(&lun_tmp->lun_ref);

				core_scsi3_lunacl_undepend_item(deve_tmp);

				goto out;

			}



			list_add_tail(&pr_reg_atp->pr_reg_atp_mem_list,

				      &pr_reg->pr_reg_atp_list);

			spin_lock(&lun_tmp->lun_deve_lock);

		}

		spin_unlock(&lun_tmp->lun_deve_lock);



		spin_lock(&dev->se_port_lock);

		percpu_ref_put(&lun_tmp->lun_ref);

	}

	spin_unlock(&dev->se_port_lock);



	return pr_reg;

out:

	list_for_each_entry_safe(pr_reg_tmp, pr_reg_tmp_safe,

			&pr_reg->pr_reg_atp_list, pr_reg_atp_mem_list) {

		list_del(&pr_reg_tmp->pr_reg_atp_mem_list);

		core_scsi3_lunacl_undepend_item(pr_reg_tmp->pr_reg_deve);

		kmem_cache_free(t10_pr_reg_cache, pr_reg_tmp);

	}

	kmem_cache_free(t10_pr_reg_cache, pr_reg);

	return NULL;

}



int core_scsi3_alloc_aptpl_registration(

	struct t10_reservation *pr_tmpl,

	u64 sa_res_key,

	unsigned char *i_port,

	unsigned char *isid,

	u64 mapped_lun,

	unsigned char *t_port,

	u16 tpgt,

	u64 target_lun,

	int res_holder,

	int all_tg_pt,

	u8 type)

{

	struct t10_pr_registration *pr_reg;



	if (!i_port || !t_port || !sa_res_key) {

		pr_err("Illegal parameters for APTPL registration\n");

		return -EINVAL;

	}



	pr_reg = kmem_cache_zalloc(t10_pr_reg_cache, GFP_KERNEL);

	if (!pr_reg) {

		pr_err("Unable to allocate struct t10_pr_registration\n");

		return -ENOMEM;

	}



	INIT_LIST_HEAD(&pr_reg->pr_reg_list);

	INIT_LIST_HEAD(&pr_reg->pr_reg_abort_list);

	INIT_LIST_HEAD(&pr_reg->pr_reg_aptpl_list);

	INIT_LIST_HEAD(&pr_reg->pr_reg_atp_list);

	INIT_LIST_HEAD(&pr_reg->pr_reg_atp_mem_list);

	atomic_set(&pr_reg->pr_res_holders, 0);

	pr_reg->pr_reg_nacl = NULL;

	pr_reg->pr_reg_deve = NULL;

	pr_reg->pr_res_mapped_lun = mapped_lun;

	pr_reg->pr_aptpl_target_lun = target_lun;

	pr_reg->pr_res_key = sa_res_key;

	pr_reg->pr_reg_all_tg_pt = all_tg_pt;

	pr_reg->pr_reg_aptpl = 1;

	pr_reg->pr_res_scope = 0; /* Always LUN_SCOPE */

	pr_reg->pr_res_type = type;



	 */

	if (isid != NULL) {

		pr_reg->pr_reg_bin_isid = get_unaligned_be64(isid);

		snprintf(pr_reg->pr_reg_isid, PR_REG_ISID_LEN, "%s", isid);

		pr_reg->isid_present_at_reg = 1;

	}



	 */

	snprintf(pr_reg->pr_iport, PR_APTPL_MAX_IPORT_LEN, "%s", i_port);

	snprintf(pr_reg->pr_tport, PR_APTPL_MAX_TPORT_LEN, "%s", t_port);

	pr_reg->pr_reg_tpgt = tpgt;



	 */

	pr_reg->pr_res_holder = res_holder;



	list_add_tail(&pr_reg->pr_reg_aptpl_list, &pr_tmpl->aptpl_reg_list);

	pr_debug("SPC-3 PR APTPL Successfully added registration%s from"

			" metadata\n", (res_holder) ? "+reservation" : "");

	return 0;

}



static void core_scsi3_aptpl_reserve(

	struct se_device *dev,

	struct se_portal_group *tpg,

	struct se_node_acl *node_acl,

	struct t10_pr_registration *pr_reg)

{

	char i_buf[PR_REG_ISID_ID_LEN] = { };



	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);



	spin_lock(&dev->dev_reservation_lock);

	dev->dev_pr_res_holder = pr_reg;

	spin_unlock(&dev->dev_reservation_lock);



	pr_debug("SPC-3 PR [%s] Service Action: APTPL RESERVE created"

		" new reservation holder TYPE: %s ALL_TG_PT: %d\n",

		tpg->se_tpg_tfo->fabric_name,

		core_scsi3_pr_dump_type(pr_reg->pr_res_type),

		(pr_reg->pr_reg_all_tg_pt) ? 1 : 0);

	pr_debug("SPC-3 PR [%s] RESERVE Node: %s%s\n",

		tpg->se_tpg_tfo->fabric_name, node_acl->initiatorname,

		i_buf);

}



static void __core_scsi3_add_registration(struct se_device *, struct se_node_acl *,

				struct t10_pr_registration *, enum register_type, int);



static int __core_scsi3_check_aptpl_registration(

	struct se_device *dev,

	struct se_portal_group *tpg,

	struct se_lun *lun,

	u64 target_lun,

	struct se_node_acl *nacl,

	u64 mapped_lun)

{

	struct t10_pr_registration *pr_reg, *pr_reg_tmp;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	unsigned char i_port[PR_APTPL_MAX_IPORT_LEN] = { };

	unsigned char t_port[PR_APTPL_MAX_TPORT_LEN] = { };

	u16 tpgt;





	 */

	snprintf(i_port, PR_APTPL_MAX_IPORT_LEN, "%s", nacl->initiatorname);

	snprintf(t_port, PR_APTPL_MAX_TPORT_LEN, "%s",

			tpg->se_tpg_tfo->tpg_get_wwn(tpg));

	tpgt = tpg->se_tpg_tfo->tpg_get_tag(tpg);



	 */

	spin_lock(&pr_tmpl->aptpl_reg_lock);

	list_for_each_entry_safe(pr_reg, pr_reg_tmp, &pr_tmpl->aptpl_reg_list,

				pr_reg_aptpl_list) {



		if (!strcmp(pr_reg->pr_iport, i_port) &&

		     (pr_reg->pr_res_mapped_lun == mapped_lun) &&

		    !(strcmp(pr_reg->pr_tport, t_port)) &&

		     (pr_reg->pr_reg_tpgt == tpgt) &&

		     (pr_reg->pr_aptpl_target_lun == target_lun)) {



			 */

			rcu_read_lock();

			pr_reg->pr_reg_deve = target_nacl_find_deve(nacl, mapped_lun);

			if (!pr_reg->pr_reg_deve) {

				pr_err("Unable to locate PR APTPL %s mapped_lun:"

					" %llu\n", nacl->initiatorname, mapped_lun);

				rcu_read_unlock();

				continue;

			}

			kref_get(&pr_reg->pr_reg_deve->pr_kref);

			rcu_read_unlock();



			pr_reg->pr_reg_nacl = nacl;

			pr_reg->tg_pt_sep_rtpi = lun->lun_rtpi;

			list_del(&pr_reg->pr_reg_aptpl_list);

			spin_unlock(&pr_tmpl->aptpl_reg_lock);



			 */

			__core_scsi3_add_registration(dev, nacl, pr_reg, 0, 0);



			 */

			if (pr_reg->pr_res_holder)

				core_scsi3_aptpl_reserve(dev, tpg,

						nacl, pr_reg);



			 */

			spin_lock(&pr_tmpl->aptpl_reg_lock);

			pr_tmpl->pr_aptpl_active = 1;

		}

	}

	spin_unlock(&pr_tmpl->aptpl_reg_lock);



	return 0;

}



int core_scsi3_check_aptpl_registration(

	struct se_device *dev,

	struct se_portal_group *tpg,

	struct se_lun *lun,

	struct se_node_acl *nacl,

	u64 mapped_lun)

{

	if (dev->dev_reservation_flags & DRF_SPC2_RESERVATIONS)

		return 0;



	return __core_scsi3_check_aptpl_registration(dev, tpg, lun,

						     lun->unpacked_lun, nacl,

						     mapped_lun);

}



static void __core_scsi3_dump_registration(

	const struct target_core_fabric_ops *tfo,

	struct se_device *dev,

	struct se_node_acl *nacl,

	struct t10_pr_registration *pr_reg,

	enum register_type register_type)

{

	struct se_portal_group *se_tpg = nacl->se_tpg;

	char i_buf[PR_REG_ISID_ID_LEN] = { };



	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);



	pr_debug("SPC-3 PR [%s] Service Action: REGISTER%s Initiator"

		" Node: %s%s\n", tfo->fabric_name, (register_type == REGISTER_AND_MOVE) ?

		"_AND_MOVE" : (register_type == REGISTER_AND_IGNORE_EXISTING_KEY) ?

		"_AND_IGNORE_EXISTING_KEY" : "", nacl->initiatorname,

		i_buf);

	pr_debug("SPC-3 PR [%s] registration on Target Port: %s,0x%04x\n",

		 tfo->fabric_name, tfo->tpg_get_wwn(se_tpg),

		tfo->tpg_get_tag(se_tpg));

	pr_debug("SPC-3 PR [%s] for %s TCM Subsystem %s Object Target"

		" Port(s)\n",  tfo->fabric_name,

		(pr_reg->pr_reg_all_tg_pt) ? "ALL" : "SINGLE",

		dev->transport->name);

	pr_debug("SPC-3 PR [%s] SA Res Key: 0x%016Lx PRgeneration:"

		" 0x%08x  APTPL: %d\n", tfo->fabric_name,

		pr_reg->pr_res_key, pr_reg->pr_res_generation,

		pr_reg->pr_reg_aptpl);

}



static void __core_scsi3_add_registration(

	struct se_device *dev,

	struct se_node_acl *nacl,

	struct t10_pr_registration *pr_reg,

	enum register_type register_type,

	int register_move)

{

	const struct target_core_fabric_ops *tfo = nacl->se_tpg->se_tpg_tfo;

	struct t10_pr_registration *pr_reg_tmp, *pr_reg_tmp_safe;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	struct se_dev_entry *deve;





	 */

	pr_reg->pr_res_generation = (register_move) ?

			dev->t10_pr.pr_generation++ :

			core_scsi3_pr_generation(dev);



	spin_lock(&pr_tmpl->registration_lock);

	list_add_tail(&pr_reg->pr_reg_list, &pr_tmpl->registration_list);



	__core_scsi3_dump_registration(tfo, dev, nacl, pr_reg, register_type);

	spin_unlock(&pr_tmpl->registration_lock);



	 */

	if (!pr_reg->pr_reg_all_tg_pt || register_move)

		goto out;



	 */

	list_for_each_entry_safe(pr_reg_tmp, pr_reg_tmp_safe,

			&pr_reg->pr_reg_atp_list, pr_reg_atp_mem_list) {

		struct se_node_acl *nacl_tmp = pr_reg_tmp->pr_reg_nacl;



		list_del(&pr_reg_tmp->pr_reg_atp_mem_list);



		pr_reg_tmp->pr_res_generation = core_scsi3_pr_generation(dev);



		spin_lock(&pr_tmpl->registration_lock);

		list_add_tail(&pr_reg_tmp->pr_reg_list,

			      &pr_tmpl->registration_list);



		__core_scsi3_dump_registration(tfo, dev, nacl_tmp, pr_reg_tmp,

					       register_type);

		spin_unlock(&pr_tmpl->registration_lock);



		 */

		rcu_read_lock();

		deve = pr_reg_tmp->pr_reg_deve;

		if (deve) {

			set_bit(DEF_PR_REG_ACTIVE, &deve->deve_flags);

			core_scsi3_lunacl_undepend_item(deve);

			pr_reg_tmp->pr_reg_deve = NULL;

		}

		rcu_read_unlock();

	}

out:



	 */

	rcu_read_lock();

	deve = pr_reg->pr_reg_deve;

	if (deve) {

		set_bit(DEF_PR_REG_ACTIVE, &deve->deve_flags);

		kref_put(&deve->pr_kref, target_pr_kref_release);

		pr_reg->pr_reg_deve = NULL;

	}

	rcu_read_unlock();

}



static int core_scsi3_alloc_registration(

	struct se_device *dev,

	struct se_node_acl *nacl,

	struct se_lun *lun,

	struct se_dev_entry *deve,

	u64 mapped_lun,

	unsigned char *isid,

	u64 sa_res_key,

	int all_tg_pt,

	int aptpl,

	enum register_type register_type,

	int register_move)

{

	struct t10_pr_registration *pr_reg;



	pr_reg = __core_scsi3_alloc_registration(dev, nacl, lun, deve, mapped_lun,

						 isid, sa_res_key, all_tg_pt,

						 aptpl);

	if (!pr_reg)

		return -EPERM;



	__core_scsi3_add_registration(dev, nacl, pr_reg,

			register_type, register_move);

	return 0;

}



static struct t10_pr_registration *__core_scsi3_locate_pr_reg(

	struct se_device *dev,

	struct se_node_acl *nacl,

	unsigned char *isid)

{

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	struct t10_pr_registration *pr_reg, *pr_reg_tmp;



	spin_lock(&pr_tmpl->registration_lock);

	list_for_each_entry_safe(pr_reg, pr_reg_tmp,

			&pr_tmpl->registration_list, pr_reg_list) {



		 */

		if (pr_reg->pr_reg_nacl != nacl)

			continue;





		 */

		if (!pr_reg->isid_present_at_reg) {

			atomic_inc_mb(&pr_reg->pr_res_holders);

			spin_unlock(&pr_tmpl->registration_lock);

			return pr_reg;

		}



		 */

		if (!isid)

			continue;

		if (strcmp(isid, pr_reg->pr_reg_isid))

			continue;



		atomic_inc_mb(&pr_reg->pr_res_holders);

		spin_unlock(&pr_tmpl->registration_lock);

		return pr_reg;

	}

	spin_unlock(&pr_tmpl->registration_lock);



	return NULL;

}



static struct t10_pr_registration *core_scsi3_locate_pr_reg(

	struct se_device *dev,

	struct se_node_acl *nacl,

	struct se_session *sess)

{

	struct se_portal_group *tpg = nacl->se_tpg;

	unsigned char buf[PR_REG_ISID_LEN] = { };

	unsigned char *isid_ptr = NULL;



	if (tpg->se_tpg_tfo->sess_get_initiator_sid != NULL) {

		tpg->se_tpg_tfo->sess_get_initiator_sid(sess, &buf[0],

					PR_REG_ISID_LEN);

		isid_ptr = &buf[0];

	}



	return __core_scsi3_locate_pr_reg(dev, nacl, isid_ptr);

}



static void core_scsi3_put_pr_reg(struct t10_pr_registration *pr_reg)

{

	atomic_dec_mb(&pr_reg->pr_res_holders);

}



static int core_scsi3_check_implicit_release(

	struct se_device *dev,

	struct t10_pr_registration *pr_reg)

{

	struct se_node_acl *nacl = pr_reg->pr_reg_nacl;

	struct t10_pr_registration *pr_res_holder;

	int ret = 0;



	spin_lock(&dev->dev_reservation_lock);

	pr_res_holder = dev->dev_pr_res_holder;

	if (!pr_res_holder) {

		spin_unlock(&dev->dev_reservation_lock);

		return ret;

	}

	if (pr_res_holder == pr_reg) {



		 */

		__core_scsi3_complete_pro_release(dev, nacl, pr_reg, 0, 1);

		ret = 1;



		 */

	} else if (pr_reg->pr_reg_all_tg_pt &&

		  (!strcmp(pr_res_holder->pr_reg_nacl->initiatorname,

			  pr_reg->pr_reg_nacl->initiatorname)) &&

		  (pr_res_holder->pr_res_key == pr_reg->pr_res_key)) {

		pr_err("SPC-3 PR: Unable to perform ALL_TG_PT=1"

			" UNREGISTER while existing reservation with matching"

			" key 0x%016Lx is present from another SCSI Initiator"

			" Port\n", pr_reg->pr_res_key);

		ret = -EPERM;

	}

	spin_unlock(&dev->dev_reservation_lock);



	return ret;

}



static void __core_scsi3_free_registration(

	struct se_device *dev,

	struct t10_pr_registration *pr_reg,

	struct list_head *preempt_and_abort_list,

	int dec_holders)

	__releases(&pr_tmpl->registration_lock)

	__acquires(&pr_tmpl->registration_lock)

{

	const struct target_core_fabric_ops *tfo =

			pr_reg->pr_reg_nacl->se_tpg->se_tpg_tfo;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	struct se_node_acl *nacl = pr_reg->pr_reg_nacl;

	struct se_dev_entry *deve;

	char i_buf[PR_REG_ISID_ID_LEN] = { };



	lockdep_assert_held(&pr_tmpl->registration_lock);



	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);



	if (!list_empty(&pr_reg->pr_reg_list))

		list_del(&pr_reg->pr_reg_list);



	 */

	if (dec_holders)

		core_scsi3_put_pr_reg(pr_reg);



	spin_unlock(&pr_tmpl->registration_lock);



	 */

	while (atomic_read(&pr_reg->pr_res_holders) != 0) {

		pr_debug("SPC-3 PR [%s] waiting for pr_res_holders\n",

				tfo->fabric_name);

		cpu_relax();

	}



	rcu_read_lock();

	deve = target_nacl_find_deve(nacl, pr_reg->pr_res_mapped_lun);

	if (deve)

		clear_bit(DEF_PR_REG_ACTIVE, &deve->deve_flags);

	rcu_read_unlock();



	spin_lock(&pr_tmpl->registration_lock);

	pr_debug("SPC-3 PR [%s] Service Action: UNREGISTER Initiator"

		" Node: %s%s\n", tfo->fabric_name,

		pr_reg->pr_reg_nacl->initiatorname,

		i_buf);

	pr_debug("SPC-3 PR [%s] for %s TCM Subsystem %s Object Target"

		" Port(s)\n", tfo->fabric_name,

		(pr_reg->pr_reg_all_tg_pt) ? "ALL" : "SINGLE",

		dev->transport->name);

	pr_debug("SPC-3 PR [%s] SA Res Key: 0x%016Lx PRgeneration:"

		" 0x%08x\n", tfo->fabric_name, pr_reg->pr_res_key,

		pr_reg->pr_res_generation);



	if (!preempt_and_abort_list) {

		pr_reg->pr_reg_deve = NULL;

		pr_reg->pr_reg_nacl = NULL;

		kmem_cache_free(t10_pr_reg_cache, pr_reg);

		return;

	}



	 */

	list_add_tail(&pr_reg->pr_reg_abort_list, preempt_and_abort_list);

}



void core_scsi3_free_pr_reg_from_nacl(

	struct se_device *dev,

	struct se_node_acl *nacl)

{

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	struct t10_pr_registration *pr_reg, *pr_reg_tmp, *pr_res_holder;

	bool free_reg = false;



	 */

	spin_lock(&dev->dev_reservation_lock);

	pr_res_holder = dev->dev_pr_res_holder;

	if ((pr_res_holder != NULL) &&

	    (pr_res_holder->pr_reg_nacl == nacl)) {

		__core_scsi3_complete_pro_release(dev, nacl, pr_res_holder, 0, 1);

		free_reg = true;

	}

	spin_unlock(&dev->dev_reservation_lock);



	 */

	spin_lock(&pr_tmpl->registration_lock);

	if (pr_res_holder && free_reg)

		__core_scsi3_free_registration(dev, pr_res_holder, NULL, 0);



	list_for_each_entry_safe(pr_reg, pr_reg_tmp,

			&pr_tmpl->registration_list, pr_reg_list) {



		if (pr_reg->pr_reg_nacl != nacl)

			continue;



		__core_scsi3_free_registration(dev, pr_reg, NULL, 0);

	}

	spin_unlock(&pr_tmpl->registration_lock);

}



void core_scsi3_free_all_registrations(

	struct se_device *dev)

{

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	struct t10_pr_registration *pr_reg, *pr_reg_tmp, *pr_res_holder;



	spin_lock(&dev->dev_reservation_lock);

	pr_res_holder = dev->dev_pr_res_holder;

	if (pr_res_holder != NULL) {

		struct se_node_acl *pr_res_nacl = pr_res_holder->pr_reg_nacl;

		__core_scsi3_complete_pro_release(dev, pr_res_nacl,

						  pr_res_holder, 0, 0);

	}

	spin_unlock(&dev->dev_reservation_lock);



	spin_lock(&pr_tmpl->registration_lock);

	list_for_each_entry_safe(pr_reg, pr_reg_tmp,

			&pr_tmpl->registration_list, pr_reg_list) {



		__core_scsi3_free_registration(dev, pr_reg, NULL, 0);

	}

	spin_unlock(&pr_tmpl->registration_lock);



	spin_lock(&pr_tmpl->aptpl_reg_lock);

	list_for_each_entry_safe(pr_reg, pr_reg_tmp, &pr_tmpl->aptpl_reg_list,

				pr_reg_aptpl_list) {

		list_del(&pr_reg->pr_reg_aptpl_list);

		kmem_cache_free(t10_pr_reg_cache, pr_reg);

	}

	spin_unlock(&pr_tmpl->aptpl_reg_lock);

}



static int core_scsi3_tpg_depend_item(struct se_portal_group *tpg)

{

	return target_depend_item(&tpg->tpg_group.cg_item);

}



static void core_scsi3_tpg_undepend_item(struct se_portal_group *tpg)

{

	target_undepend_item(&tpg->tpg_group.cg_item);

	atomic_dec_mb(&tpg->tpg_pr_ref_count);

}



static int core_scsi3_nodeacl_depend_item(struct se_node_acl *nacl)

{

	if (nacl->dynamic_node_acl)

		return 0;

	return target_depend_item(&nacl->acl_group.cg_item);

}



static void core_scsi3_nodeacl_undepend_item(struct se_node_acl *nacl)

{

	if (!nacl->dynamic_node_acl)

		target_undepend_item(&nacl->acl_group.cg_item);

	atomic_dec_mb(&nacl->acl_pr_ref_count);

}



static int core_scsi3_lunacl_depend_item(struct se_dev_entry *se_deve)

{

	struct se_lun_acl *lun_acl;





	 */

	lun_acl = rcu_dereference_check(se_deve->se_lun_acl,

				kref_read(&se_deve->pr_kref) != 0);

	if (!lun_acl)

		return 0;



	return target_depend_item(&lun_acl->se_lun_group.cg_item);

}



static void core_scsi3_lunacl_undepend_item(struct se_dev_entry *se_deve)

{

	struct se_lun_acl *lun_acl;





	 */

	lun_acl = rcu_dereference_check(se_deve->se_lun_acl,

				kref_read(&se_deve->pr_kref) != 0);

	if (!lun_acl) {

		kref_put(&se_deve->pr_kref, target_pr_kref_release);

		return;

	}



	target_undepend_item(&lun_acl->se_lun_group.cg_item);

	kref_put(&se_deve->pr_kref, target_pr_kref_release);

}



static sense_reason_t

core_scsi3_decode_spec_i_port(

	struct se_cmd *cmd,

	struct se_portal_group *tpg,

	unsigned char *l_isid,

	u64 sa_res_key,

	int all_tg_pt,

	int aptpl)

{

	struct se_device *dev = cmd->se_dev;

	struct se_portal_group *dest_tpg = NULL, *tmp_tpg;

	struct se_session *se_sess = cmd->se_sess;

	struct se_node_acl *dest_node_acl = NULL;

	struct se_dev_entry *dest_se_deve = NULL;

	struct t10_pr_registration *dest_pr_reg, *local_pr_reg, *pr_reg_e;

	struct t10_pr_registration *pr_reg_tmp, *pr_reg_tmp_safe;

	LIST_HEAD(tid_dest_list);

	struct pr_transport_id_holder *tidh_new, *tidh, *tidh_tmp;

	unsigned char *buf, *ptr, proto_ident;

	const unsigned char *i_str = NULL;

	char *iport_ptr = NULL, i_buf[PR_REG_ISID_ID_LEN];

	sense_reason_t ret;

	u32 tpdl, tid_len = 0;

	u32 dest_rtpi = 0;





	 */

	tidh_new = kzalloc(sizeof(struct pr_transport_id_holder), GFP_KERNEL);

	if (!tidh_new) {

		pr_err("Unable to allocate tidh_new\n");

		return TCM_INSUFFICIENT_REGISTRATION_RESOURCES;

	}

	INIT_LIST_HEAD(&tidh_new->dest_list);

	tidh_new->dest_tpg = tpg;

	tidh_new->dest_node_acl = se_sess->se_node_acl;



	local_pr_reg = __core_scsi3_alloc_registration(cmd->se_dev,

				se_sess->se_node_acl, cmd->se_lun,

				NULL, cmd->orig_fe_lun, l_isid,

				sa_res_key, all_tg_pt, aptpl);

	if (!local_pr_reg) {

		kfree(tidh_new);

		return TCM_INSUFFICIENT_REGISTRATION_RESOURCES;

	}



	if (core_scsi3_lunacl_depend_item(local_pr_reg->pr_reg_deve)) {

		kfree(tidh_new);

		kref_put(&local_pr_reg->pr_reg_deve->pr_kref,

			 target_pr_kref_release);

		kmem_cache_free(t10_pr_reg_cache, local_pr_reg);

		return TCM_INSUFFICIENT_REGISTRATION_RESOURCES;

	}



	tidh_new->dest_pr_reg = local_pr_reg;

	list_add_tail(&tidh_new->dest_list, &tid_dest_list);



	if (cmd->data_length < 28) {

		pr_warn("SPC-PR: Received PR OUT parameter list"

			" length too small: %u\n", cmd->data_length);

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out;

	}



	buf = transport_kmap_data_sg(cmd);

	if (!buf) {

		ret = TCM_INSUFFICIENT_REGISTRATION_RESOURCES;

		goto out;

	}





	 */

	tpdl = get_unaligned_be32(&buf[24]);



	if ((tpdl + 28) != cmd->data_length) {

		pr_err("SPC-3 PR: Illegal tpdl: %u + 28 byte header"

			" does not equal CDB data_length: %u\n", tpdl,

			cmd->data_length);

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out_unmap;

	}



	 */

	ptr = &buf[28];



	while (tpdl > 0) {

		struct se_lun *dest_lun, *tmp_lun;



		proto_ident = (ptr[0] & 0x0f);

		dest_tpg = NULL;



		spin_lock(&dev->se_port_lock);

		list_for_each_entry(tmp_lun, &dev->dev_sep_list, lun_dev_link) {

			tmp_tpg = tmp_lun->lun_tpg;





			 */

			if (tmp_tpg->proto_id != proto_ident)

				continue;

			dest_rtpi = tmp_lun->lun_rtpi;



			iport_ptr = NULL;

			i_str = target_parse_pr_out_transport_id(tmp_tpg,

					ptr, &tid_len, &iport_ptr);

			if (!i_str)

				continue;



			 */

			if (tpg->se_tpg_tfo->sess_get_initiator_sid &&

			    dev->dev_attrib.enforce_pr_isids &&

			    !iport_ptr) {

				pr_warn("SPC-PR: enforce_pr_isids is set but a isid has not been sent in the SPEC_I_PT data for %s.",

					i_str);

				ret = TCM_INVALID_PARAMETER_LIST;

				spin_unlock(&dev->se_port_lock);

				goto out_unmap;

			}



			atomic_inc_mb(&tmp_tpg->tpg_pr_ref_count);

			spin_unlock(&dev->se_port_lock);



			if (core_scsi3_tpg_depend_item(tmp_tpg)) {

				pr_err(" core_scsi3_tpg_depend_item()"

					" for tmp_tpg\n");

				atomic_dec_mb(&tmp_tpg->tpg_pr_ref_count);

				ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

				goto out_unmap;

			}



			 */

			mutex_lock(&tmp_tpg->acl_node_mutex);

			dest_node_acl = __core_tpg_get_initiator_node_acl(

						tmp_tpg, i_str);

			if (dest_node_acl)

				atomic_inc_mb(&dest_node_acl->acl_pr_ref_count);

			mutex_unlock(&tmp_tpg->acl_node_mutex);



			if (!dest_node_acl) {

				core_scsi3_tpg_undepend_item(tmp_tpg);

				spin_lock(&dev->se_port_lock);

				continue;

			}



			if (core_scsi3_nodeacl_depend_item(dest_node_acl)) {

				pr_err("configfs_depend_item() failed"

					" for dest_node_acl->acl_group\n");

				atomic_dec_mb(&dest_node_acl->acl_pr_ref_count);

				core_scsi3_tpg_undepend_item(tmp_tpg);

				ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

				goto out_unmap;

			}



			dest_tpg = tmp_tpg;

			pr_debug("SPC-3 PR SPEC_I_PT: Located %s Node: %s Port RTPI: %u\n",

				dest_tpg->se_tpg_tfo->fabric_name,

				dest_node_acl->initiatorname, dest_rtpi);



			spin_lock(&dev->se_port_lock);

			break;

		}

		spin_unlock(&dev->se_port_lock);



		if (!dest_tpg) {

			pr_err("SPC-3 PR SPEC_I_PT: Unable to locate"

					" dest_tpg\n");

			ret = TCM_INVALID_PARAMETER_LIST;

			goto out_unmap;

		}



		pr_debug("SPC-3 PR SPEC_I_PT: Got %s data_length: %u tpdl: %u"

			" tid_len: %d for %s + %s\n",

			dest_tpg->se_tpg_tfo->fabric_name, cmd->data_length,

			tpdl, tid_len, i_str, iport_ptr);



		if (tid_len > tpdl) {

			pr_err("SPC-3 PR SPEC_I_PT: Illegal tid_len:"

				" %u for Transport ID: %s\n", tid_len, ptr);

			core_scsi3_nodeacl_undepend_item(dest_node_acl);

			core_scsi3_tpg_undepend_item(dest_tpg);

			ret = TCM_INVALID_PARAMETER_LIST;

			goto out_unmap;

		}



		 */

		dest_se_deve = core_get_se_deve_from_rtpi(dest_node_acl,

					dest_rtpi);

		if (!dest_se_deve) {

			pr_err("Unable to locate %s dest_se_deve from destination RTPI: %u\n",

				dest_tpg->se_tpg_tfo->fabric_name,

				dest_rtpi);



			core_scsi3_nodeacl_undepend_item(dest_node_acl);

			core_scsi3_tpg_undepend_item(dest_tpg);

			ret = TCM_INVALID_PARAMETER_LIST;

			goto out_unmap;

		}



		if (core_scsi3_lunacl_depend_item(dest_se_deve)) {

			pr_err("core_scsi3_lunacl_depend_item()"

					" failed\n");

			kref_put(&dest_se_deve->pr_kref, target_pr_kref_release);

			core_scsi3_nodeacl_undepend_item(dest_node_acl);

			core_scsi3_tpg_undepend_item(dest_tpg);

			ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

			goto out_unmap;

		}



		pr_debug("SPC-3 PR SPEC_I_PT: Located %s Node: %s"

			" dest_se_deve mapped_lun: %llu\n",

			dest_tpg->se_tpg_tfo->fabric_name,

			dest_node_acl->initiatorname, dest_se_deve->mapped_lun);





		 */

		pr_reg_e = __core_scsi3_locate_pr_reg(dev, dest_node_acl,

					iport_ptr);

		if (pr_reg_e) {

			core_scsi3_put_pr_reg(pr_reg_e);

			core_scsi3_lunacl_undepend_item(dest_se_deve);

			core_scsi3_nodeacl_undepend_item(dest_node_acl);

			core_scsi3_tpg_undepend_item(dest_tpg);

			ptr += tid_len;

			tpdl -= tid_len;

			tid_len = 0;

			continue;

		}



		 */

		tidh_new = kzalloc(sizeof(struct pr_transport_id_holder),

				GFP_KERNEL);

		if (!tidh_new) {

			pr_err("Unable to allocate tidh_new\n");

			core_scsi3_lunacl_undepend_item(dest_se_deve);

			core_scsi3_nodeacl_undepend_item(dest_node_acl);

			core_scsi3_tpg_undepend_item(dest_tpg);

			ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

			goto out_unmap;

		}

		INIT_LIST_HEAD(&tidh_new->dest_list);

		tidh_new->dest_tpg = dest_tpg;

		tidh_new->dest_node_acl = dest_node_acl;

		tidh_new->dest_se_deve = dest_se_deve;





		 */

		dest_lun = rcu_dereference_check(dest_se_deve->se_lun,

				kref_read(&dest_se_deve->pr_kref) != 0);



		dest_pr_reg = __core_scsi3_alloc_registration(cmd->se_dev,

					dest_node_acl, dest_lun, dest_se_deve,

					dest_se_deve->mapped_lun, iport_ptr,

					sa_res_key, all_tg_pt, aptpl);

		if (!dest_pr_reg) {

			core_scsi3_lunacl_undepend_item(dest_se_deve);

			core_scsi3_nodeacl_undepend_item(dest_node_acl);

			core_scsi3_tpg_undepend_item(dest_tpg);

			kfree(tidh_new);

			ret = TCM_INSUFFICIENT_REGISTRATION_RESOURCES;

			goto out_unmap;

		}

		tidh_new->dest_pr_reg = dest_pr_reg;

		list_add_tail(&tidh_new->dest_list, &tid_dest_list);



		ptr += tid_len;

		tpdl -= tid_len;

		tid_len = 0;



	}



	transport_kunmap_data_sg(cmd);





	 */

	list_for_each_entry_safe(tidh, tidh_tmp, &tid_dest_list, dest_list) {

		dest_tpg = tidh->dest_tpg;

		dest_node_acl = tidh->dest_node_acl;

		dest_se_deve = tidh->dest_se_deve;

		dest_pr_reg = tidh->dest_pr_reg;



		list_del(&tidh->dest_list);

		kfree(tidh);



		memset(i_buf, 0, PR_REG_ISID_ID_LEN);

		core_pr_dump_initiator_port(dest_pr_reg, i_buf, PR_REG_ISID_ID_LEN);



		__core_scsi3_add_registration(cmd->se_dev, dest_node_acl,

					dest_pr_reg, 0, 0);



		pr_debug("SPC-3 PR [%s] SPEC_I_PT: Successfully"

			" registered Transport ID for Node: %s%s Mapped LUN:"

			" %llu\n", dest_tpg->se_tpg_tfo->fabric_name,

			dest_node_acl->initiatorname, i_buf, (dest_se_deve) ?

			dest_se_deve->mapped_lun : 0);



		if (dest_pr_reg == local_pr_reg)

			continue;



		core_scsi3_nodeacl_undepend_item(dest_node_acl);

		core_scsi3_tpg_undepend_item(dest_tpg);

	}



	return 0;

out_unmap:

	transport_kunmap_data_sg(cmd);

out:



	 */

	list_for_each_entry_safe(tidh, tidh_tmp, &tid_dest_list, dest_list) {

		bool is_local = false;



		dest_tpg = tidh->dest_tpg;

		dest_node_acl = tidh->dest_node_acl;

		dest_se_deve = tidh->dest_se_deve;

		dest_pr_reg = tidh->dest_pr_reg;



		if (dest_pr_reg == local_pr_reg)

			is_local = true;



		list_del(&tidh->dest_list);

		kfree(tidh);



		 */

		list_for_each_entry_safe(pr_reg_tmp, pr_reg_tmp_safe,

				&dest_pr_reg->pr_reg_atp_list,

				pr_reg_atp_mem_list) {

			list_del(&pr_reg_tmp->pr_reg_atp_mem_list);

			core_scsi3_lunacl_undepend_item(pr_reg_tmp->pr_reg_deve);

			kmem_cache_free(t10_pr_reg_cache, pr_reg_tmp);

		}



		kmem_cache_free(t10_pr_reg_cache, dest_pr_reg);

		core_scsi3_lunacl_undepend_item(dest_se_deve);



		if (is_local)

			continue;



		core_scsi3_nodeacl_undepend_item(dest_node_acl);

		core_scsi3_tpg_undepend_item(dest_tpg);

	}

	return ret;

}



static int core_scsi3_update_aptpl_buf(

	struct se_device *dev,

	unsigned char *buf,

	u32 pr_aptpl_buf_len)

{

	struct se_portal_group *tpg;

	struct t10_pr_registration *pr_reg;

	unsigned char tmp[512], isid_buf[32];

	ssize_t len = 0;

	int reg_count = 0;

	int ret = 0;



	spin_lock(&dev->dev_reservation_lock);

	spin_lock(&dev->t10_pr.registration_lock);



	 */

	list_for_each_entry(pr_reg, &dev->t10_pr.registration_list,

			pr_reg_list) {



		tmp[0] = '\0';

		isid_buf[0] = '\0';

		tpg = pr_reg->pr_reg_nacl->se_tpg;



		 */

		if (pr_reg->isid_present_at_reg)

			snprintf(isid_buf, 32, "initiator_sid=%s\n",

					pr_reg->pr_reg_isid);



		 */

		if (dev->dev_pr_res_holder == pr_reg) {

			snprintf(tmp, 512, "PR_REG_START: %d"

				"\ninitiator_fabric=%s\n"

				"initiator_node=%s\n%s"

				"sa_res_key=%llu\n"

				"res_holder=1\nres_type=%02x\n"

				"res_scope=%02x\nres_all_tg_pt=%d\n"

				"mapped_lun=%llu\n", reg_count,

				tpg->se_tpg_tfo->fabric_name,

				pr_reg->pr_reg_nacl->initiatorname, isid_buf,

				pr_reg->pr_res_key, pr_reg->pr_res_type,

				pr_reg->pr_res_scope, pr_reg->pr_reg_all_tg_pt,

				pr_reg->pr_res_mapped_lun);

		} else {

			snprintf(tmp, 512, "PR_REG_START: %d\n"

				"initiator_fabric=%s\ninitiator_node=%s\n%s"

				"sa_res_key=%llu\nres_holder=0\n"

				"res_all_tg_pt=%d\nmapped_lun=%llu\n",

				reg_count, tpg->se_tpg_tfo->fabric_name,

				pr_reg->pr_reg_nacl->initiatorname, isid_buf,

				pr_reg->pr_res_key, pr_reg->pr_reg_all_tg_pt,

				pr_reg->pr_res_mapped_lun);

		}



		if ((len + strlen(tmp) >= pr_aptpl_buf_len)) {

			pr_err("Unable to update renaming APTPL metadata,"

			       " reallocating larger buffer\n");

			ret = -EMSGSIZE;

			goto out;

		}

		len += sprintf(buf+len, "%s", tmp);





		 */

		snprintf(tmp, 512, "target_fabric=%s\ntarget_node=%s\n"

			"tpgt=%hu\nport_rtpi=%hu\ntarget_lun=%llu\nPR_REG_END:"

			" %d\n", tpg->se_tpg_tfo->fabric_name,

			tpg->se_tpg_tfo->tpg_get_wwn(tpg),

			tpg->se_tpg_tfo->tpg_get_tag(tpg),

			pr_reg->tg_pt_sep_rtpi, pr_reg->pr_aptpl_target_lun,

			reg_count);



		if ((len + strlen(tmp) >= pr_aptpl_buf_len)) {

			pr_err("Unable to update renaming APTPL metadata,"

			       " reallocating larger buffer\n");

			ret = -EMSGSIZE;

			goto out;

		}

		len += sprintf(buf+len, "%s", tmp);

		reg_count++;

	}



	if (!reg_count)

		len += sprintf(buf+len, "No Registrations or Reservations");



out:

	spin_unlock(&dev->t10_pr.registration_lock);

	spin_unlock(&dev->dev_reservation_lock);



	return ret;

}



static int __core_scsi3_write_aptpl_to_file(

	struct se_device *dev,

	unsigned char *buf)

{

	struct t10_wwn *wwn = &dev->t10_wwn;

	struct file *file;

	int flags = O_RDWR | O_CREAT | O_TRUNC;

	char *path;

	u32 pr_aptpl_buf_len;

	int ret;

	loff_t pos = 0;



	path = kasprintf(GFP_KERNEL, "%s/pr/aptpl_%s", db_root,

			&wwn->unit_serial[0]);

	if (!path)

		return -ENOMEM;



	file = filp_open(path, flags, 0600);

	if (IS_ERR(file)) {

		pr_err("filp_open(%s) for APTPL metadata"

			" failed\n", path);

		kfree(path);

		return PTR_ERR(file);

	}



	pr_aptpl_buf_len = (strlen(buf) + 1); /* Add extra for NULL */



	ret = kernel_write(file, buf, pr_aptpl_buf_len, &pos);



	if (ret < 0)

		pr_debug("Error writing APTPL metadata file: %s\n", path);

	fput(file);

	kfree(path);



	return (ret < 0) ? -EIO : 0;

}





 */

static sense_reason_t core_scsi3_update_and_write_aptpl(struct se_device *dev, bool aptpl)

{

	unsigned char *buf;

	int rc, len = PR_APTPL_BUF_LEN;



	if (!aptpl) {

		char *null_buf = "No Registrations or Reservations\n";



		rc = __core_scsi3_write_aptpl_to_file(dev, null_buf);

		dev->t10_pr.pr_aptpl_active = 0;

		pr_debug("SPC-3 PR: Set APTPL Bit Deactivated\n");



		if (rc)

			return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;



		return 0;

	}

retry:

	buf = vzalloc(len);

	if (!buf)

		return TCM_OUT_OF_RESOURCES;



	rc = core_scsi3_update_aptpl_buf(dev, buf, len);

	if (rc < 0) {

		vfree(buf);

		len *= 2;

		goto retry;

	}



	rc = __core_scsi3_write_aptpl_to_file(dev, buf);

	if (rc != 0) {

		pr_err("SPC-3 PR: Could not update APTPL\n");

		vfree(buf);

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

	}

	dev->t10_pr.pr_aptpl_active = 1;

	vfree(buf);

	pr_debug("SPC-3 PR: Set APTPL Bit Activated\n");

	return 0;

}



static sense_reason_t

core_scsi3_emulate_pro_register(struct se_cmd *cmd, u64 res_key, u64 sa_res_key,

		bool aptpl, bool all_tg_pt, bool spec_i_pt, enum register_type register_type)

{

	struct se_session *se_sess = cmd->se_sess;

	struct se_device *dev = cmd->se_dev;

	struct se_lun *se_lun = cmd->se_lun;

	struct se_portal_group *se_tpg;

	struct t10_pr_registration *pr_reg, *pr_reg_p, *pr_reg_tmp;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	unsigned char isid_buf[PR_REG_ISID_LEN] = { };

	unsigned char *isid_ptr = NULL;

	sense_reason_t ret = TCM_NO_SENSE;

	int pr_holder = 0, type;



	if (!se_sess || !se_lun) {

		pr_err("SPC-3 PR: se_sess || struct se_lun is NULL!\n");

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

	}

	se_tpg = se_sess->se_tpg;



	if (se_tpg->se_tpg_tfo->sess_get_initiator_sid) {

		se_tpg->se_tpg_tfo->sess_get_initiator_sid(se_sess, &isid_buf[0],

				PR_REG_ISID_LEN);

		isid_ptr = &isid_buf[0];

	}



	 */

	pr_reg = core_scsi3_locate_pr_reg(dev, se_sess->se_node_acl, se_sess);

	if (!pr_reg) {

		if (res_key) {

			pr_warn("SPC-3 PR: Reservation Key non-zero"

				" for SA REGISTER, returning CONFLICT\n");

			return TCM_RESERVATION_CONFLICT;

		}



		 */

		if (!sa_res_key)

			return 0;



		if (!spec_i_pt) {



			 */

			if (core_scsi3_alloc_registration(cmd->se_dev,

					se_sess->se_node_acl, cmd->se_lun,

					NULL, cmd->orig_fe_lun, isid_ptr,

					sa_res_key, all_tg_pt, aptpl,

					register_type, 0)) {

				pr_err("Unable to allocate"

					" struct t10_pr_registration\n");

				return TCM_INSUFFICIENT_REGISTRATION_RESOURCES;

			}

		} else {



			 */

			ret = core_scsi3_decode_spec_i_port(cmd, se_tpg,

					isid_ptr, sa_res_key, all_tg_pt, aptpl);

			if (ret != 0)

				return ret;

		}

		return core_scsi3_update_and_write_aptpl(dev, aptpl);

	}



	/* ok, existing registration */



	if ((register_type == REGISTER) && (res_key != pr_reg->pr_res_key)) {

		pr_err("SPC-3 PR REGISTER: Received"

		       " res_key: 0x%016Lx does not match"

		       " existing SA REGISTER res_key:"

		       " 0x%016Lx\n", res_key,

		       pr_reg->pr_res_key);

		ret = TCM_RESERVATION_CONFLICT;

		goto out;

	}



	if (spec_i_pt) {

		pr_err("SPC-3 PR REGISTER: SPEC_I_PT"

			" set on a registered nexus\n");

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out;

	}





	 */

	if (pr_reg->pr_reg_all_tg_pt && !all_tg_pt) {

		pr_err("SPC-3 PR REGISTER: ALL_TG_PT=1"

			" registration exists, but ALL_TG_PT=1 bit not"

			" present in received PROUT\n");

		ret = TCM_INVALID_CDB_FIELD;

		goto out;

	}





	 */

	if (sa_res_key) {



		 */

		pr_reg->pr_res_generation = core_scsi3_pr_generation(cmd->se_dev);

		pr_reg->pr_res_key = sa_res_key;

		pr_debug("SPC-3 PR [%s] REGISTER%s: Changed Reservation"

			 " Key for %s to: 0x%016Lx PRgeneration:"

			 " 0x%08x\n", cmd->se_tfo->fabric_name,

			 (register_type == REGISTER_AND_IGNORE_EXISTING_KEY) ? "_AND_IGNORE_EXISTING_KEY" : "",

			 pr_reg->pr_reg_nacl->initiatorname,

			 pr_reg->pr_res_key, pr_reg->pr_res_generation);



	} else {



		 */

		type = pr_reg->pr_res_type;

		pr_holder = core_scsi3_check_implicit_release(cmd->se_dev,

							      pr_reg);

		if (pr_holder < 0) {

			ret = TCM_RESERVATION_CONFLICT;

			goto out;

		}



		spin_lock(&pr_tmpl->registration_lock);



		 */

		if (pr_reg->pr_reg_all_tg_pt) {

			list_for_each_entry_safe(pr_reg_p, pr_reg_tmp,

					&pr_tmpl->registration_list,

					pr_reg_list) {



				if (!pr_reg_p->pr_reg_all_tg_pt)

					continue;

				if (pr_reg_p->pr_res_key != res_key)

					continue;

				if (pr_reg == pr_reg_p)

					continue;

				if (strcmp(pr_reg->pr_reg_nacl->initiatorname,

					   pr_reg_p->pr_reg_nacl->initiatorname))

					continue;



				__core_scsi3_free_registration(dev,

						pr_reg_p, NULL, 0);

			}

		}





		 */

		__core_scsi3_free_registration(cmd->se_dev, pr_reg, NULL, 1);

		pr_reg = NULL;





		 */

		if (pr_holder &&

		    (type == PR_TYPE_WRITE_EXCLUSIVE_REGONLY ||

		     type == PR_TYPE_EXCLUSIVE_ACCESS_REGONLY)) {

			list_for_each_entry(pr_reg_p,

					&pr_tmpl->registration_list,

					pr_reg_list) {



				target_ua_allocate_lun(

					pr_reg_p->pr_reg_nacl,

					pr_reg_p->pr_res_mapped_lun,

					0x2A,

					ASCQ_2AH_RESERVATIONS_RELEASED);

			}

		}



		spin_unlock(&pr_tmpl->registration_lock);

	}



	ret = core_scsi3_update_and_write_aptpl(dev, aptpl);



out:

	if (pr_reg)

		core_scsi3_put_pr_reg(pr_reg);

	return ret;

}



unsigned char *core_scsi3_pr_dump_type(int type)

{

	switch (type) {

	case PR_TYPE_WRITE_EXCLUSIVE:

		return "Write Exclusive Access";

	case PR_TYPE_EXCLUSIVE_ACCESS:

		return "Exclusive Access";

	case PR_TYPE_WRITE_EXCLUSIVE_REGONLY:

		return "Write Exclusive Access, Registrants Only";

	case PR_TYPE_EXCLUSIVE_ACCESS_REGONLY:

		return "Exclusive Access, Registrants Only";

	case PR_TYPE_WRITE_EXCLUSIVE_ALLREG:

		return "Write Exclusive Access, All Registrants";

	case PR_TYPE_EXCLUSIVE_ACCESS_ALLREG:

		return "Exclusive Access, All Registrants";

	default:

		break;

	}



	return "Unknown SPC-3 PR Type";

}



static sense_reason_t

core_scsi3_pro_reserve(struct se_cmd *cmd, int type, int scope, u64 res_key)

{

	struct se_device *dev = cmd->se_dev;

	struct se_session *se_sess = cmd->se_sess;

	struct se_lun *se_lun = cmd->se_lun;

	struct t10_pr_registration *pr_reg, *pr_res_holder;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	char i_buf[PR_REG_ISID_ID_LEN] = { };

	sense_reason_t ret;



	if (!se_sess || !se_lun) {

		pr_err("SPC-3 PR: se_sess || struct se_lun is NULL!\n");

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

	}



	 */

	pr_reg = core_scsi3_locate_pr_reg(cmd->se_dev, se_sess->se_node_acl,

				se_sess);

	if (!pr_reg) {

		pr_err("SPC-3 PR: Unable to locate"

			" PR_REGISTERED *pr_reg for RESERVE\n");

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

	}



	 */

	if (res_key != pr_reg->pr_res_key) {

		pr_err("SPC-3 PR RESERVE: Received res_key: 0x%016Lx"

			" does not match existing SA REGISTER res_key:"

			" 0x%016Lx\n", res_key, pr_reg->pr_res_key);

		ret = TCM_RESERVATION_CONFLICT;

		goto out_put_pr_reg;

	}



	 */

	if (scope != PR_SCOPE_LU_SCOPE) {

		pr_err("SPC-3 PR: Illegal SCOPE: 0x%02x\n", scope);

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out_put_pr_reg;

	}



	 */

	spin_lock(&dev->dev_reservation_lock);

	pr_res_holder = dev->dev_pr_res_holder;

	if (pr_res_holder) {



		 */

		if (!is_reservation_holder(pr_res_holder, pr_reg)) {

			struct se_node_acl *pr_res_nacl = pr_res_holder->pr_reg_nacl;

			pr_err("SPC-3 PR: Attempted RESERVE from"

				" [%s]: %s while reservation already held by"

				" [%s]: %s, returning RESERVATION_CONFLICT\n",

				cmd->se_tfo->fabric_name,

				se_sess->se_node_acl->initiatorname,

				pr_res_nacl->se_tpg->se_tpg_tfo->fabric_name,

				pr_res_holder->pr_reg_nacl->initiatorname);



			spin_unlock(&dev->dev_reservation_lock);

			ret = TCM_RESERVATION_CONFLICT;

			goto out_put_pr_reg;

		}



		 */

		if ((pr_res_holder->pr_res_type != type) ||

		    (pr_res_holder->pr_res_scope != scope)) {

			struct se_node_acl *pr_res_nacl = pr_res_holder->pr_reg_nacl;

			pr_err("SPC-3 PR: Attempted RESERVE from"

				" [%s]: %s trying to change TYPE and/or SCOPE,"

				" while reservation already held by [%s]: %s,"

				" returning RESERVATION_CONFLICT\n",

				cmd->se_tfo->fabric_name,

				se_sess->se_node_acl->initiatorname,

				pr_res_nacl->se_tpg->se_tpg_tfo->fabric_name,

				pr_res_holder->pr_reg_nacl->initiatorname);



			spin_unlock(&dev->dev_reservation_lock);

			ret = TCM_RESERVATION_CONFLICT;

			goto out_put_pr_reg;

		}



		 */

		spin_unlock(&dev->dev_reservation_lock);

		ret = 0;

		goto out_put_pr_reg;

	}



	 */

	pr_reg->pr_res_scope = scope;

	pr_reg->pr_res_type = type;

	pr_reg->pr_res_holder = 1;

	dev->dev_pr_res_holder = pr_reg;

	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);



	pr_debug("SPC-3 PR [%s] Service Action: RESERVE created new"

		" reservation holder TYPE: %s ALL_TG_PT: %d\n",

		cmd->se_tfo->fabric_name, core_scsi3_pr_dump_type(type),

		(pr_reg->pr_reg_all_tg_pt) ? 1 : 0);

	pr_debug("SPC-3 PR [%s] RESERVE Node: %s%s\n",

			cmd->se_tfo->fabric_name,

			se_sess->se_node_acl->initiatorname,

			i_buf);

	spin_unlock(&dev->dev_reservation_lock);



	if (pr_tmpl->pr_aptpl_active)

		core_scsi3_update_and_write_aptpl(cmd->se_dev, true);



	ret = 0;

out_put_pr_reg:

	core_scsi3_put_pr_reg(pr_reg);

	return ret;

}



static sense_reason_t

core_scsi3_emulate_pro_reserve(struct se_cmd *cmd, int type, int scope,

		u64 res_key)

{

	switch (type) {

	case PR_TYPE_WRITE_EXCLUSIVE:

	case PR_TYPE_EXCLUSIVE_ACCESS:

	case PR_TYPE_WRITE_EXCLUSIVE_REGONLY:

	case PR_TYPE_EXCLUSIVE_ACCESS_REGONLY:

	case PR_TYPE_WRITE_EXCLUSIVE_ALLREG:

	case PR_TYPE_EXCLUSIVE_ACCESS_ALLREG:

		return core_scsi3_pro_reserve(cmd, type, scope, res_key);

	default:

		pr_err("SPC-3 PR: Unknown Service Action RESERVE Type:"

			" 0x%02x\n", type);

		return TCM_INVALID_CDB_FIELD;

	}

}



static void __core_scsi3_complete_pro_release(

	struct se_device *dev,

	struct se_node_acl *se_nacl,

	struct t10_pr_registration *pr_reg,

	int explicit,

	int unreg)

{

	const struct target_core_fabric_ops *tfo = se_nacl->se_tpg->se_tpg_tfo;

	char i_buf[PR_REG_ISID_ID_LEN] = { };

	int pr_res_type = 0, pr_res_scope = 0;



	lockdep_assert_held(&dev->dev_reservation_lock);



	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);



	 */

	if (dev->dev_pr_res_holder) {

		pr_res_type = dev->dev_pr_res_holder->pr_res_type;

		pr_res_scope = dev->dev_pr_res_holder->pr_res_scope;

		dev->dev_pr_res_holder->pr_res_type = 0;

		dev->dev_pr_res_holder->pr_res_scope = 0;

		dev->dev_pr_res_holder->pr_res_holder = 0;

		dev->dev_pr_res_holder = NULL;

	}

	if (!unreg)

		goto out;



	spin_lock(&dev->t10_pr.registration_lock);

	list_del_init(&pr_reg->pr_reg_list);



	 */

	if (!list_empty(&dev->t10_pr.registration_list) &&

	    ((pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||

	     (pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG))) {

		dev->dev_pr_res_holder =

			list_entry(dev->t10_pr.registration_list.next,

				   struct t10_pr_registration, pr_reg_list);

		dev->dev_pr_res_holder->pr_res_type = pr_res_type;

		dev->dev_pr_res_holder->pr_res_scope = pr_res_scope;

		dev->dev_pr_res_holder->pr_res_holder = 1;

	}

	spin_unlock(&dev->t10_pr.registration_lock);

out:

	if (!dev->dev_pr_res_holder) {

		pr_debug("SPC-3 PR [%s] Service Action: %s RELEASE cleared"

			" reservation holder TYPE: %s ALL_TG_PT: %d\n",

			tfo->fabric_name, (explicit) ? "explicit" :

			"implicit", core_scsi3_pr_dump_type(pr_res_type),

			(pr_reg->pr_reg_all_tg_pt) ? 1 : 0);

	}

	pr_debug("SPC-3 PR [%s] RELEASE Node: %s%s\n",

		tfo->fabric_name, se_nacl->initiatorname,

		i_buf);



	 */

	pr_reg->pr_res_holder = pr_reg->pr_res_type = pr_reg->pr_res_scope = 0;

}



static sense_reason_t

core_scsi3_emulate_pro_release(struct se_cmd *cmd, int type, int scope,

		u64 res_key)

{

	struct se_device *dev = cmd->se_dev;

	struct se_session *se_sess = cmd->se_sess;

	struct se_lun *se_lun = cmd->se_lun;

	struct t10_pr_registration *pr_reg, *pr_reg_p, *pr_res_holder;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	sense_reason_t ret = 0;



	if (!se_sess || !se_lun) {

		pr_err("SPC-3 PR: se_sess || struct se_lun is NULL!\n");

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

	}



	 */

	pr_reg = core_scsi3_locate_pr_reg(dev, se_sess->se_node_acl, se_sess);

	if (!pr_reg) {

		pr_err("SPC-3 PR: Unable to locate"

			" PR_REGISTERED *pr_reg for RELEASE\n");

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

	}



	 */

	spin_lock(&dev->dev_reservation_lock);

	pr_res_holder = dev->dev_pr_res_holder;

	if (!pr_res_holder) {



		 */

		spin_unlock(&dev->dev_reservation_lock);

		goto out_put_pr_reg;

	}



	if (!is_reservation_holder(pr_res_holder, pr_reg)) {



		 */

		spin_unlock(&dev->dev_reservation_lock);

		goto out_put_pr_reg;

	}





	 */

	if (res_key != pr_reg->pr_res_key) {

		pr_err("SPC-3 PR RELEASE: Received res_key: 0x%016Lx"

			" does not match existing SA REGISTER res_key:"

			" 0x%016Lx\n", res_key, pr_reg->pr_res_key);

		spin_unlock(&dev->dev_reservation_lock);

		ret = TCM_RESERVATION_CONFLICT;

		goto out_put_pr_reg;

	}



	 */

	if ((pr_res_holder->pr_res_type != type) ||

	    (pr_res_holder->pr_res_scope != scope)) {

		struct se_node_acl *pr_res_nacl = pr_res_holder->pr_reg_nacl;

		pr_err("SPC-3 PR RELEASE: Attempted to release"

			" reservation from [%s]: %s with different TYPE "

			"and/or SCOPE  while reservation already held by"

			" [%s]: %s, returning RESERVATION_CONFLICT\n",

			cmd->se_tfo->fabric_name,

			se_sess->se_node_acl->initiatorname,

			pr_res_nacl->se_tpg->se_tpg_tfo->fabric_name,

			pr_res_holder->pr_reg_nacl->initiatorname);



		spin_unlock(&dev->dev_reservation_lock);

		ret = TCM_RESERVATION_CONFLICT;

		goto out_put_pr_reg;

	}



	 */

	__core_scsi3_complete_pro_release(dev, se_sess->se_node_acl,

					  pr_reg, 1, 0);



	spin_unlock(&dev->dev_reservation_lock);



	if ((type != PR_TYPE_WRITE_EXCLUSIVE_REGONLY) &&

	    (type != PR_TYPE_EXCLUSIVE_ACCESS_REGONLY) &&

	    (type != PR_TYPE_WRITE_EXCLUSIVE_ALLREG) &&

	    (type != PR_TYPE_EXCLUSIVE_ACCESS_ALLREG)) {



		 */

		goto write_aptpl;

	}



	spin_lock(&pr_tmpl->registration_lock);

	list_for_each_entry(pr_reg_p, &pr_tmpl->registration_list,

			pr_reg_list) {



		 */

		if (pr_reg_p == pr_reg)

			continue;



		target_ua_allocate_lun(pr_reg_p->pr_reg_nacl,

				pr_reg_p->pr_res_mapped_lun,

				0x2A, ASCQ_2AH_RESERVATIONS_RELEASED);

	}

	spin_unlock(&pr_tmpl->registration_lock);



write_aptpl:

	if (pr_tmpl->pr_aptpl_active)

		core_scsi3_update_and_write_aptpl(cmd->se_dev, true);



out_put_pr_reg:

	core_scsi3_put_pr_reg(pr_reg);

	return ret;

}



static sense_reason_t

core_scsi3_emulate_pro_clear(struct se_cmd *cmd, u64 res_key)

{

	struct se_device *dev = cmd->se_dev;

	struct se_node_acl *pr_reg_nacl;

	struct se_session *se_sess = cmd->se_sess;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	struct t10_pr_registration *pr_reg, *pr_reg_tmp, *pr_reg_n, *pr_res_holder;

	u64 pr_res_mapped_lun = 0;

	int calling_it_nexus = 0;



	 */

	pr_reg_n = core_scsi3_locate_pr_reg(cmd->se_dev,

			se_sess->se_node_acl, se_sess);

	if (!pr_reg_n) {

		pr_err("SPC-3 PR: Unable to locate"

			" PR_REGISTERED *pr_reg for CLEAR\n");

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

	}



	 */

	if (res_key != pr_reg_n->pr_res_key) {

		pr_err("SPC-3 PR REGISTER: Received"

			" res_key: 0x%016Lx does not match"

			" existing SA REGISTER res_key:"

			" 0x%016Lx\n", res_key, pr_reg_n->pr_res_key);

		core_scsi3_put_pr_reg(pr_reg_n);

		return TCM_RESERVATION_CONFLICT;

	}



	 */

	spin_lock(&dev->dev_reservation_lock);

	pr_res_holder = dev->dev_pr_res_holder;

	if (pr_res_holder) {

		struct se_node_acl *pr_res_nacl = pr_res_holder->pr_reg_nacl;

		__core_scsi3_complete_pro_release(dev, pr_res_nacl,

						  pr_res_holder, 0, 0);

	}

	spin_unlock(&dev->dev_reservation_lock);



	 */

	spin_lock(&pr_tmpl->registration_lock);

	list_for_each_entry_safe(pr_reg, pr_reg_tmp,

			&pr_tmpl->registration_list, pr_reg_list) {



		calling_it_nexus = (pr_reg_n == pr_reg) ? 1 : 0;

		pr_reg_nacl = pr_reg->pr_reg_nacl;

		pr_res_mapped_lun = pr_reg->pr_res_mapped_lun;

		__core_scsi3_free_registration(dev, pr_reg, NULL,

					calling_it_nexus);



		 */

		if (!calling_it_nexus)

			target_ua_allocate_lun(pr_reg_nacl, pr_res_mapped_lun,

				0x2A, ASCQ_2AH_RESERVATIONS_PREEMPTED);

	}

	spin_unlock(&pr_tmpl->registration_lock);



	pr_debug("SPC-3 PR [%s] Service Action: CLEAR complete\n",

		cmd->se_tfo->fabric_name);



	core_scsi3_update_and_write_aptpl(cmd->se_dev, false);



	core_scsi3_pr_generation(dev);

	return 0;

}



static void __core_scsi3_complete_pro_preempt(

	struct se_device *dev,

	struct t10_pr_registration *pr_reg,

	struct list_head *preempt_and_abort_list,

	int type,

	int scope,

	enum preempt_type preempt_type)

{

	struct se_node_acl *nacl = pr_reg->pr_reg_nacl;

	const struct target_core_fabric_ops *tfo = nacl->se_tpg->se_tpg_tfo;

	char i_buf[PR_REG_ISID_ID_LEN] = { };



	lockdep_assert_held(&dev->dev_reservation_lock);



	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);



	 */

	if (dev->dev_pr_res_holder)

		__core_scsi3_complete_pro_release(dev, nacl,

						  dev->dev_pr_res_holder, 0, 0);



	dev->dev_pr_res_holder = pr_reg;

	pr_reg->pr_res_holder = 1;

	pr_reg->pr_res_type = type;

	pr_reg->pr_res_scope = scope;



	pr_debug("SPC-3 PR [%s] Service Action: PREEMPT%s created new"

		" reservation holder TYPE: %s ALL_TG_PT: %d\n",

		tfo->fabric_name, (preempt_type == PREEMPT_AND_ABORT) ? "_AND_ABORT" : "",

		core_scsi3_pr_dump_type(type),

		(pr_reg->pr_reg_all_tg_pt) ? 1 : 0);

	pr_debug("SPC-3 PR [%s] PREEMPT%s from Node: %s%s\n",

		tfo->fabric_name, (preempt_type == PREEMPT_AND_ABORT) ? "_AND_ABORT" : "",

		nacl->initiatorname, i_buf);



	 */

	if (preempt_and_abort_list)

		list_add_tail(&pr_reg->pr_reg_abort_list,

				preempt_and_abort_list);

}



static void core_scsi3_release_preempt_and_abort(

	struct list_head *preempt_and_abort_list,

	struct t10_pr_registration *pr_reg_holder)

{

	struct t10_pr_registration *pr_reg, *pr_reg_tmp;



	list_for_each_entry_safe(pr_reg, pr_reg_tmp, preempt_and_abort_list,

				pr_reg_abort_list) {



		list_del(&pr_reg->pr_reg_abort_list);

		if (pr_reg_holder == pr_reg)

			continue;

		if (pr_reg->pr_res_holder) {

			pr_warn("pr_reg->pr_res_holder still set\n");

			continue;

		}



		pr_reg->pr_reg_deve = NULL;

		pr_reg->pr_reg_nacl = NULL;

		kmem_cache_free(t10_pr_reg_cache, pr_reg);

	}

}



static sense_reason_t

core_scsi3_pro_preempt(struct se_cmd *cmd, int type, int scope, u64 res_key,

		u64 sa_res_key, enum preempt_type preempt_type)

{

	struct se_device *dev = cmd->se_dev;

	struct se_node_acl *pr_reg_nacl;

	struct se_session *se_sess = cmd->se_sess;

	LIST_HEAD(preempt_and_abort_list);

	struct t10_pr_registration *pr_reg, *pr_reg_tmp, *pr_reg_n, *pr_res_holder;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	u64 pr_res_mapped_lun = 0;

	int all_reg = 0, calling_it_nexus = 0;

	bool sa_res_key_unmatched = sa_res_key != 0;

	int prh_type = 0, prh_scope = 0;



	if (!se_sess)

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;



	pr_reg_n = core_scsi3_locate_pr_reg(cmd->se_dev, se_sess->se_node_acl,

				se_sess);

	if (!pr_reg_n) {

		pr_err("SPC-3 PR: Unable to locate"

			" PR_REGISTERED *pr_reg for PREEMPT%s\n",

			(preempt_type == PREEMPT_AND_ABORT) ? "_AND_ABORT" : "");

		return TCM_RESERVATION_CONFLICT;

	}

	if (pr_reg_n->pr_res_key != res_key) {

		core_scsi3_put_pr_reg(pr_reg_n);

		return TCM_RESERVATION_CONFLICT;

	}

	if (scope != PR_SCOPE_LU_SCOPE) {

		pr_err("SPC-3 PR: Illegal SCOPE: 0x%02x\n", scope);

		core_scsi3_put_pr_reg(pr_reg_n);

		return TCM_INVALID_PARAMETER_LIST;

	}



	spin_lock(&dev->dev_reservation_lock);

	pr_res_holder = dev->dev_pr_res_holder;

	if (pr_res_holder &&

	   ((pr_res_holder->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||

	    (pr_res_holder->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG)))

		all_reg = 1;



	if (!all_reg && !sa_res_key) {

		spin_unlock(&dev->dev_reservation_lock);

		core_scsi3_put_pr_reg(pr_reg_n);

		return TCM_INVALID_PARAMETER_LIST;

	}



	 */

	if (!pr_res_holder || (pr_res_holder->pr_res_key != sa_res_key)) {



		 */

		spin_lock(&pr_tmpl->registration_lock);

		list_for_each_entry_safe(pr_reg, pr_reg_tmp,

				&pr_tmpl->registration_list, pr_reg_list) {



			 */

			if (!all_reg) {

				if (pr_reg->pr_res_key != sa_res_key)

					continue;

				sa_res_key_unmatched = false;



				calling_it_nexus = (pr_reg_n == pr_reg) ? 1 : 0;

				pr_reg_nacl = pr_reg->pr_reg_nacl;

				pr_res_mapped_lun = pr_reg->pr_res_mapped_lun;

				__core_scsi3_free_registration(dev, pr_reg,

					(preempt_type == PREEMPT_AND_ABORT) ? &preempt_and_abort_list :

						NULL, calling_it_nexus);

			} else {



				 */

				if ((sa_res_key) &&

				     (pr_reg->pr_res_key != sa_res_key))

					continue;

				sa_res_key_unmatched = false;



				calling_it_nexus = (pr_reg_n == pr_reg) ? 1 : 0;

				if (calling_it_nexus)

					continue;



				pr_reg_nacl = pr_reg->pr_reg_nacl;

				pr_res_mapped_lun = pr_reg->pr_res_mapped_lun;

				__core_scsi3_free_registration(dev, pr_reg,

					(preempt_type == PREEMPT_AND_ABORT) ? &preempt_and_abort_list :

						NULL, 0);

			}

			if (!calling_it_nexus)

				target_ua_allocate_lun(pr_reg_nacl,

					pr_res_mapped_lun, 0x2A,

					ASCQ_2AH_REGISTRATIONS_PREEMPTED);

		}

		spin_unlock(&pr_tmpl->registration_lock);



		 */

		if (sa_res_key_unmatched) {

			spin_unlock(&dev->dev_reservation_lock);

			core_scsi3_put_pr_reg(pr_reg_n);

			return TCM_RESERVATION_CONFLICT;

		}



		 */

		if (pr_res_holder && all_reg && !(sa_res_key)) {

			__core_scsi3_complete_pro_preempt(dev, pr_reg_n,

				(preempt_type == PREEMPT_AND_ABORT) ? &preempt_and_abort_list : NULL,

				type, scope, preempt_type);



			if (preempt_type == PREEMPT_AND_ABORT)

				core_scsi3_release_preempt_and_abort(

					&preempt_and_abort_list, pr_reg_n);

		}

		spin_unlock(&dev->dev_reservation_lock);



		if (pr_tmpl->pr_aptpl_active)

			core_scsi3_update_and_write_aptpl(cmd->se_dev, true);



		core_scsi3_put_pr_reg(pr_reg_n);

		core_scsi3_pr_generation(cmd->se_dev);

		return 0;

	}



	 */

	prh_type = pr_res_holder->pr_res_type;

	prh_scope = pr_res_holder->pr_res_scope;



	 */

	if (pr_reg_n != pr_res_holder)

		__core_scsi3_complete_pro_release(dev,

						  pr_res_holder->pr_reg_nacl,

						  dev->dev_pr_res_holder, 0, 0);



	 */

	spin_lock(&pr_tmpl->registration_lock);

	list_for_each_entry_safe(pr_reg, pr_reg_tmp,

			&pr_tmpl->registration_list, pr_reg_list) {



		calling_it_nexus = (pr_reg_n == pr_reg) ? 1 : 0;

		if (calling_it_nexus)

			continue;



		if (pr_reg->pr_res_key != sa_res_key)

			continue;



		pr_reg_nacl = pr_reg->pr_reg_nacl;

		pr_res_mapped_lun = pr_reg->pr_res_mapped_lun;

		__core_scsi3_free_registration(dev, pr_reg,

				(preempt_type == PREEMPT_AND_ABORT) ? &preempt_and_abort_list : NULL,

				calling_it_nexus);



		 */

		target_ua_allocate_lun(pr_reg_nacl, pr_res_mapped_lun, 0x2A,

				ASCQ_2AH_REGISTRATIONS_PREEMPTED);

	}

	spin_unlock(&pr_tmpl->registration_lock);



	 */

	__core_scsi3_complete_pro_preempt(dev, pr_reg_n,

			(preempt_type == PREEMPT_AND_ABORT) ? &preempt_and_abort_list : NULL,

			type, scope, preempt_type);



	 */

	if ((prh_type != type) || (prh_scope != scope)) {

		spin_lock(&pr_tmpl->registration_lock);

		list_for_each_entry_safe(pr_reg, pr_reg_tmp,

				&pr_tmpl->registration_list, pr_reg_list) {



			calling_it_nexus = (pr_reg_n == pr_reg) ? 1 : 0;

			if (calling_it_nexus)

				continue;



			target_ua_allocate_lun(pr_reg->pr_reg_nacl,

					pr_reg->pr_res_mapped_lun, 0x2A,

					ASCQ_2AH_RESERVATIONS_RELEASED);

		}

		spin_unlock(&pr_tmpl->registration_lock);

	}

	spin_unlock(&dev->dev_reservation_lock);



	 */

	if (preempt_type == PREEMPT_AND_ABORT) {

		core_tmr_lun_reset(dev, NULL, &preempt_and_abort_list, cmd);

		core_scsi3_release_preempt_and_abort(&preempt_and_abort_list,

						pr_reg_n);

	}



	if (pr_tmpl->pr_aptpl_active)

		core_scsi3_update_and_write_aptpl(cmd->se_dev, true);



	core_scsi3_put_pr_reg(pr_reg_n);

	core_scsi3_pr_generation(cmd->se_dev);

	return 0;

}



static sense_reason_t

core_scsi3_emulate_pro_preempt(struct se_cmd *cmd, int type, int scope,

		u64 res_key, u64 sa_res_key, enum preempt_type preempt_type)

{

	switch (type) {

	case PR_TYPE_WRITE_EXCLUSIVE:

	case PR_TYPE_EXCLUSIVE_ACCESS:

	case PR_TYPE_WRITE_EXCLUSIVE_REGONLY:

	case PR_TYPE_EXCLUSIVE_ACCESS_REGONLY:

	case PR_TYPE_WRITE_EXCLUSIVE_ALLREG:

	case PR_TYPE_EXCLUSIVE_ACCESS_ALLREG:

		return core_scsi3_pro_preempt(cmd, type, scope, res_key,

					      sa_res_key, preempt_type);

	default:

		pr_err("SPC-3 PR: Unknown Service Action PREEMPT%s"

			" Type: 0x%02x\n", (preempt_type == PREEMPT_AND_ABORT) ? "_AND_ABORT" : "", type);

		return TCM_INVALID_CDB_FIELD;

	}

}





static sense_reason_t

core_scsi3_emulate_pro_register_and_move(struct se_cmd *cmd, u64 res_key,

		u64 sa_res_key, int aptpl, int unreg)

{

	struct se_session *se_sess = cmd->se_sess;

	struct se_device *dev = cmd->se_dev;

	struct se_dev_entry *dest_se_deve = NULL;

	struct se_lun *se_lun = cmd->se_lun, *tmp_lun;

	struct se_node_acl *pr_res_nacl, *pr_reg_nacl, *dest_node_acl = NULL;

	struct se_portal_group *se_tpg, *dest_se_tpg = NULL;

	const struct target_core_fabric_ops *dest_tf_ops = NULL, *tf_ops;

	struct t10_pr_registration *pr_reg, *pr_res_holder, *dest_pr_reg;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	unsigned char *buf;

	const unsigned char *initiator_str;

	char *iport_ptr = NULL, i_buf[PR_REG_ISID_ID_LEN] = { };

	u32 tid_len, tmp_tid_len;

	int new_reg = 0, type, scope, matching_iname;

	sense_reason_t ret;

	unsigned short rtpi;

	unsigned char proto_ident;



	if (!se_sess || !se_lun) {

		pr_err("SPC-3 PR: se_sess || struct se_lun is NULL!\n");

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

	}



	se_tpg = se_sess->se_tpg;

	tf_ops = se_tpg->se_tpg_tfo;



	 */

	pr_reg = core_scsi3_locate_pr_reg(cmd->se_dev, se_sess->se_node_acl,

				se_sess);

	if (!pr_reg) {

		pr_err("SPC-3 PR: Unable to locate PR_REGISTERED"

			" *pr_reg for REGISTER_AND_MOVE\n");

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

	}



	 */

	if (res_key != pr_reg->pr_res_key) {

		pr_warn("SPC-3 PR REGISTER_AND_MOVE: Received"

			" res_key: 0x%016Lx does not match existing SA REGISTER"

			" res_key: 0x%016Lx\n", res_key, pr_reg->pr_res_key);

		ret = TCM_RESERVATION_CONFLICT;

		goto out_put_pr_reg;

	}



	 */

	if (!sa_res_key) {

		pr_warn("SPC-3 PR REGISTER_AND_MOVE: Received zero"

			" sa_res_key\n");

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out_put_pr_reg;

	}





	 */

	buf = transport_kmap_data_sg(cmd);

	if (!buf) {

		ret = TCM_INSUFFICIENT_REGISTRATION_RESOURCES;

		goto out_put_pr_reg;

	}



	rtpi = get_unaligned_be16(&buf[18]);

	tid_len = get_unaligned_be32(&buf[20]);

	transport_kunmap_data_sg(cmd);

	buf = NULL;



	if ((tid_len + 24) != cmd->data_length) {

		pr_err("SPC-3 PR: Illegal tid_len: %u + 24 byte header"

			" does not equal CDB data_length: %u\n", tid_len,

			cmd->data_length);

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out_put_pr_reg;

	}



	spin_lock(&dev->se_port_lock);

	list_for_each_entry(tmp_lun, &dev->dev_sep_list, lun_dev_link) {

		if (tmp_lun->lun_rtpi != rtpi)

			continue;

		dest_se_tpg = tmp_lun->lun_tpg;

		dest_tf_ops = dest_se_tpg->se_tpg_tfo;

		if (!dest_tf_ops)

			continue;



		atomic_inc_mb(&dest_se_tpg->tpg_pr_ref_count);

		spin_unlock(&dev->se_port_lock);



		if (core_scsi3_tpg_depend_item(dest_se_tpg)) {

			pr_err("core_scsi3_tpg_depend_item() failed"

				" for dest_se_tpg\n");

			atomic_dec_mb(&dest_se_tpg->tpg_pr_ref_count);

			ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

			goto out_put_pr_reg;

		}



		spin_lock(&dev->se_port_lock);

		break;

	}

	spin_unlock(&dev->se_port_lock);



	if (!dest_se_tpg || !dest_tf_ops) {

		pr_err("SPC-3 PR REGISTER_AND_MOVE: Unable to locate"

			" fabric ops from Relative Target Port Identifier:"

			" %hu\n", rtpi);

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out_put_pr_reg;

	}



	buf = transport_kmap_data_sg(cmd);

	if (!buf) {

		ret = TCM_INSUFFICIENT_REGISTRATION_RESOURCES;

		goto out_put_pr_reg;

	}

	proto_ident = (buf[24] & 0x0f);



	pr_debug("SPC-3 PR REGISTER_AND_MOVE: Extracted Protocol Identifier:"

			" 0x%02x\n", proto_ident);



	if (proto_ident != dest_se_tpg->proto_id) {

		pr_err("SPC-3 PR REGISTER_AND_MOVE: Received"

			" proto_ident: 0x%02x does not match ident: 0x%02x"

			" from fabric: %s\n", proto_ident,

			dest_se_tpg->proto_id,

			dest_tf_ops->fabric_name);

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out;

	}

	initiator_str = target_parse_pr_out_transport_id(dest_se_tpg,

			&buf[24], &tmp_tid_len, &iport_ptr);

	if (!initiator_str) {

		pr_err("SPC-3 PR REGISTER_AND_MOVE: Unable to locate"

			" initiator_str from Transport ID\n");

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out;

	}



	transport_kunmap_data_sg(cmd);

	buf = NULL;



	pr_debug("SPC-3 PR [%s] Extracted initiator %s identifier: %s"

		" %s\n", dest_tf_ops->fabric_name, (iport_ptr != NULL) ?

		"port" : "device", initiator_str, (iport_ptr != NULL) ?

		iport_ptr : "");



	 */

	pr_reg_nacl = pr_reg->pr_reg_nacl;

	matching_iname = (!strcmp(initiator_str,

				  pr_reg_nacl->initiatorname)) ? 1 : 0;

	if (!matching_iname)

		goto after_iport_check;



	if (!iport_ptr || !pr_reg->isid_present_at_reg) {

		pr_err("SPC-3 PR REGISTER_AND_MOVE: TransportID: %s"

			" matches: %s on received I_T Nexus\n", initiator_str,

			pr_reg_nacl->initiatorname);

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out;

	}

	if (!strcmp(iport_ptr, pr_reg->pr_reg_isid)) {

		pr_err("SPC-3 PR REGISTER_AND_MOVE: TransportID: %s %s"

			" matches: %s %s on received I_T Nexus\n",

			initiator_str, iport_ptr, pr_reg_nacl->initiatorname,

			pr_reg->pr_reg_isid);

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out;

	}

after_iport_check:



	 */

	mutex_lock(&dest_se_tpg->acl_node_mutex);

	dest_node_acl = __core_tpg_get_initiator_node_acl(dest_se_tpg,

				initiator_str);

	if (dest_node_acl)

		atomic_inc_mb(&dest_node_acl->acl_pr_ref_count);

	mutex_unlock(&dest_se_tpg->acl_node_mutex);



	if (!dest_node_acl) {

		pr_err("Unable to locate %s dest_node_acl for"

			" TransportID%s\n", dest_tf_ops->fabric_name,

			initiator_str);

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out;

	}



	if (core_scsi3_nodeacl_depend_item(dest_node_acl)) {

		pr_err("core_scsi3_nodeacl_depend_item() for"

			" dest_node_acl\n");

		atomic_dec_mb(&dest_node_acl->acl_pr_ref_count);

		dest_node_acl = NULL;

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out;

	}



	pr_debug("SPC-3 PR REGISTER_AND_MOVE: Found %s dest_node_acl:"

		" %s from TransportID\n", dest_tf_ops->fabric_name,

		dest_node_acl->initiatorname);





	 */

	dest_se_deve = core_get_se_deve_from_rtpi(dest_node_acl, rtpi);

	if (!dest_se_deve) {

		pr_err("Unable to locate %s dest_se_deve from RTPI:"

			" %hu\n",  dest_tf_ops->fabric_name, rtpi);

		ret = TCM_INVALID_PARAMETER_LIST;

		goto out;

	}



	if (core_scsi3_lunacl_depend_item(dest_se_deve)) {

		pr_err("core_scsi3_lunacl_depend_item() failed\n");

		kref_put(&dest_se_deve->pr_kref, target_pr_kref_release);

		dest_se_deve = NULL;

		ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;

		goto out;

	}



	pr_debug("SPC-3 PR REGISTER_AND_MOVE: Located %s node %s LUN"

		" ACL for dest_se_deve->mapped_lun: %llu\n",

		dest_tf_ops->fabric_name, dest_node_acl->initiatorname,

		dest_se_deve->mapped_lun);





	 */

	spin_lock(&dev->dev_reservation_lock);

	pr_res_holder = dev->dev_pr_res_holder;

	if (!pr_res_holder) {

		pr_warn("SPC-3 PR REGISTER_AND_MOVE: No reservation"

			" currently held\n");

		spin_unlock(&dev->dev_reservation_lock);

		ret = TCM_INVALID_CDB_FIELD;

		goto out;

	}



	 */

	if (!is_reservation_holder(pr_res_holder, pr_reg)) {

		pr_warn("SPC-3 PR REGISTER_AND_MOVE: Calling I_T"

			" Nexus is not reservation holder\n");

		spin_unlock(&dev->dev_reservation_lock);

		ret = TCM_RESERVATION_CONFLICT;

		goto out;

	}



	 */

	if ((pr_res_holder->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||

	    (pr_res_holder->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG)) {

		pr_warn("SPC-3 PR REGISTER_AND_MOVE: Unable to move"

			" reservation for type: %s\n",

			core_scsi3_pr_dump_type(pr_res_holder->pr_res_type));

		spin_unlock(&dev->dev_reservation_lock);

		ret = TCM_RESERVATION_CONFLICT;

		goto out;

	}

	pr_res_nacl = pr_res_holder->pr_reg_nacl;



	 */

	type = pr_res_holder->pr_res_type;

	scope = pr_res_holder->pr_res_type;



	 */

	dest_pr_reg = __core_scsi3_locate_pr_reg(dev, dest_node_acl,

					iport_ptr);

	if (!dest_pr_reg) {

		struct se_lun *dest_lun = rcu_dereference_check(dest_se_deve->se_lun,

				kref_read(&dest_se_deve->pr_kref) != 0);



		spin_unlock(&dev->dev_reservation_lock);

		if (core_scsi3_alloc_registration(cmd->se_dev, dest_node_acl,

					dest_lun, dest_se_deve, dest_se_deve->mapped_lun,

					iport_ptr, sa_res_key, 0, aptpl, 2, 1)) {

			ret = TCM_INSUFFICIENT_REGISTRATION_RESOURCES;

			goto out;

		}

		spin_lock(&dev->dev_reservation_lock);

		dest_pr_reg = __core_scsi3_locate_pr_reg(dev, dest_node_acl,

						iport_ptr);

		new_reg = 1;

	}



	 */

	__core_scsi3_complete_pro_release(dev, pr_res_nacl,

					  dev->dev_pr_res_holder, 0, 0);



	 */

	dev->dev_pr_res_holder = dest_pr_reg;

	dest_pr_reg->pr_res_holder = 1;

	dest_pr_reg->pr_res_type = type;

	pr_reg->pr_res_scope = scope;

	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);



	 */

	if (!new_reg)

		dest_pr_reg->pr_res_generation = pr_tmpl->pr_generation++;

	spin_unlock(&dev->dev_reservation_lock);



	pr_debug("SPC-3 PR [%s] Service Action: REGISTER_AND_MOVE"

		" created new reservation holder TYPE: %s on object RTPI:"

		" %hu  PRGeneration: 0x%08x\n", dest_tf_ops->fabric_name,

		core_scsi3_pr_dump_type(type), rtpi,

		dest_pr_reg->pr_res_generation);

	pr_debug("SPC-3 PR Successfully moved reservation from"

		" %s Fabric Node: %s%s -> %s Fabric Node: %s %s\n",

		tf_ops->fabric_name, pr_reg_nacl->initiatorname,

		i_buf, dest_tf_ops->fabric_name,

		dest_node_acl->initiatorname, (iport_ptr != NULL) ?

		iport_ptr : "");



	 */

	core_scsi3_lunacl_undepend_item(dest_se_deve);

	core_scsi3_nodeacl_undepend_item(dest_node_acl);

	core_scsi3_tpg_undepend_item(dest_se_tpg);



	 */

	if (unreg) {

		spin_lock(&pr_tmpl->registration_lock);

		__core_scsi3_free_registration(dev, pr_reg, NULL, 1);

		spin_unlock(&pr_tmpl->registration_lock);

	} else

		core_scsi3_put_pr_reg(pr_reg);



	core_scsi3_update_and_write_aptpl(cmd->se_dev, aptpl);



	core_scsi3_put_pr_reg(dest_pr_reg);

	return 0;

out:

	if (buf)

		transport_kunmap_data_sg(cmd);

	if (dest_se_deve)

		core_scsi3_lunacl_undepend_item(dest_se_deve);

	if (dest_node_acl)

		core_scsi3_nodeacl_undepend_item(dest_node_acl);

	core_scsi3_tpg_undepend_item(dest_se_tpg);



out_put_pr_reg:

	core_scsi3_put_pr_reg(pr_reg);

	return ret;

}





 */

sense_reason_t

target_scsi3_emulate_pr_out(struct se_cmd *cmd)

{

	struct se_device *dev = cmd->se_dev;

	unsigned char *cdb = &cmd->t_task_cdb[0];

	unsigned char *buf;

	u64 res_key, sa_res_key;

	int sa, scope, type, aptpl;

	int spec_i_pt = 0, all_tg_pt = 0, unreg = 0;

	sense_reason_t ret;





	 */

	if (cmd->se_dev->dev_reservation_flags & DRF_SPC2_RESERVATIONS) {

		pr_err("Received PERSISTENT_RESERVE CDB while legacy"

			" SPC-2 reservation is held, returning"

			" RESERVATION_CONFLICT\n");

		return TCM_RESERVATION_CONFLICT;

	}





	 */

	if (!cmd->se_sess)

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;



	if (cmd->data_length < 24) {

		pr_warn("SPC-PR: Received PR OUT parameter list"

			" length too small: %u\n", cmd->data_length);

		return TCM_PARAMETER_LIST_LENGTH_ERROR;

	}





	 */

	sa = (cdb[1] & 0x1f);

	scope = (cdb[2] & 0xf0);

	type = (cdb[2] & 0x0f);



	buf = transport_kmap_data_sg(cmd);

	if (!buf)

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;





	 */

	res_key = get_unaligned_be64(&buf[0]);

	sa_res_key = get_unaligned_be64(&buf[8]);



	 */

	if (sa != PRO_REGISTER_AND_MOVE) {

		spec_i_pt = (buf[20] & 0x08);

		all_tg_pt = (buf[20] & 0x04);

		aptpl = (buf[20] & 0x01);

	} else {

		aptpl = (buf[17] & 0x01);

		unreg = (buf[17] & 0x02);

	}



	 */

	if (dev->dev_attrib.force_pr_aptpl)

		aptpl = 1;



	transport_kunmap_data_sg(cmd);

	buf = NULL;





	 */

	if (spec_i_pt && (sa != PRO_REGISTER))

		return TCM_INVALID_PARAMETER_LIST;





	 */

	if (!spec_i_pt && (sa != PRO_REGISTER_AND_MOVE) &&

	    (cmd->data_length != 24)) {

		pr_warn("SPC-PR: Received PR OUT illegal parameter"

			" list length: %u\n", cmd->data_length);

		return TCM_PARAMETER_LIST_LENGTH_ERROR;

	}





	 */

	switch (sa) {

	case PRO_REGISTER:

		ret = core_scsi3_emulate_pro_register(cmd,

			res_key, sa_res_key, aptpl, all_tg_pt, spec_i_pt, REGISTER);

		break;

	case PRO_RESERVE:

		ret = core_scsi3_emulate_pro_reserve(cmd, type, scope, res_key);

		break;

	case PRO_RELEASE:

		ret = core_scsi3_emulate_pro_release(cmd, type, scope, res_key);

		break;

	case PRO_CLEAR:

		ret = core_scsi3_emulate_pro_clear(cmd, res_key);

		break;

	case PRO_PREEMPT:

		ret = core_scsi3_emulate_pro_preempt(cmd, type, scope,

					res_key, sa_res_key, PREEMPT);

		break;

	case PRO_PREEMPT_AND_ABORT:

		ret = core_scsi3_emulate_pro_preempt(cmd, type, scope,

					res_key, sa_res_key, PREEMPT_AND_ABORT);

		break;

	case PRO_REGISTER_AND_IGNORE_EXISTING_KEY:

		ret = core_scsi3_emulate_pro_register(cmd,

			0, sa_res_key, aptpl, all_tg_pt, spec_i_pt, REGISTER_AND_IGNORE_EXISTING_KEY);

		break;

	case PRO_REGISTER_AND_MOVE:

		ret = core_scsi3_emulate_pro_register_and_move(cmd, res_key,

				sa_res_key, aptpl, unreg);

		break;

	default:

		pr_err("Unknown PERSISTENT_RESERVE_OUT service"

			" action: 0x%02x\n", sa);

		return TCM_INVALID_CDB_FIELD;

	}



	if (!ret)

		target_complete_cmd(cmd, SAM_STAT_GOOD);

	return ret;

}





 */

static sense_reason_t

core_scsi3_pri_read_keys(struct se_cmd *cmd)

{

	struct se_device *dev = cmd->se_dev;

	struct t10_pr_registration *pr_reg;

	unsigned char *buf;

	u32 add_len = 0, off = 8;



	if (cmd->data_length < 8) {

		pr_err("PRIN SA READ_KEYS SCSI Data Length: %u"

			" too small\n", cmd->data_length);

		return TCM_INVALID_CDB_FIELD;

	}



	buf = transport_kmap_data_sg(cmd);

	if (!buf)

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;



	put_unaligned_be32(dev->t10_pr.pr_generation, buf);



	spin_lock(&dev->t10_pr.registration_lock);

	list_for_each_entry(pr_reg, &dev->t10_pr.registration_list,

			pr_reg_list) {



		 */

		if (off + 8 <= cmd->data_length) {

			put_unaligned_be64(pr_reg->pr_res_key, &buf[off]);

			off += 8;

		}



		 */

		add_len += 8;

	}

	spin_unlock(&dev->t10_pr.registration_lock);



	put_unaligned_be32(add_len, &buf[4]);

	target_set_cmd_data_length(cmd, 8 + add_len);



	transport_kunmap_data_sg(cmd);



	return 0;

}





 */

static sense_reason_t

core_scsi3_pri_read_reservation(struct se_cmd *cmd)

{

	struct se_device *dev = cmd->se_dev;

	struct t10_pr_registration *pr_reg;

	unsigned char *buf;

	u64 pr_res_key;

	u32 add_len = 0;



	if (cmd->data_length < 8) {

		pr_err("PRIN SA READ_RESERVATIONS SCSI Data Length: %u"

			" too small\n", cmd->data_length);

		return TCM_INVALID_CDB_FIELD;

	}



	buf = transport_kmap_data_sg(cmd);

	if (!buf)

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;



	put_unaligned_be32(dev->t10_pr.pr_generation, &buf[0]);



	spin_lock(&dev->dev_reservation_lock);

	pr_reg = dev->dev_pr_res_holder;

	if (pr_reg) {



		 */

		add_len = 16;

		put_unaligned_be32(add_len, &buf[4]);



		if (cmd->data_length < 22)

			goto err;





		 */

		if ((pr_reg->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||

		    (pr_reg->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG))

			pr_res_key = 0;

		else

			pr_res_key = pr_reg->pr_res_key;



		put_unaligned_be64(pr_res_key, &buf[8]);



		 */

		buf[21] = (pr_reg->pr_res_scope & 0xf0) |

			  (pr_reg->pr_res_type & 0x0f);

	}



	target_set_cmd_data_length(cmd, 8 + add_len);



err:

	spin_unlock(&dev->dev_reservation_lock);

	transport_kunmap_data_sg(cmd);



	return 0;

}





 */

static sense_reason_t

core_scsi3_pri_report_capabilities(struct se_cmd *cmd)

{

	struct se_device *dev = cmd->se_dev;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	unsigned char *buf;

	u16 len = 8; /* Hardcoded to 8. */



	if (cmd->data_length < 6) {

		pr_err("PRIN SA REPORT_CAPABILITIES SCSI Data Length:"

			" %u too small\n", cmd->data_length);

		return TCM_INVALID_CDB_FIELD;

	}



	buf = transport_kmap_data_sg(cmd);

	if (!buf)

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;



	put_unaligned_be16(len, &buf[0]);

	buf[2] |= 0x10; /* CRH: Compatible Reservation Hanlding bit. */

	buf[2] |= 0x08; /* SIP_C: Specify Initiator Ports Capable bit */

	buf[2] |= 0x04; /* ATP_C: All Target Ports Capable bit */

	buf[2] |= 0x01; /* PTPL_C: Persistence across Target Power Loss bit */



	 */

	buf[3] |= 0x80;



	 */

	buf[3] |= 0x10; /* ALLOW COMMANDs field 001b */



	 */

	if (pr_tmpl->pr_aptpl_active)

		buf[3] |= 0x01;



	 */

	buf[4] |= 0x80; /* PR_TYPE_EXCLUSIVE_ACCESS_ALLREG */

	buf[4] |= 0x40; /* PR_TYPE_EXCLUSIVE_ACCESS_REGONLY */

	buf[4] |= 0x20; /* PR_TYPE_WRITE_EXCLUSIVE_REGONLY */

	buf[4] |= 0x08; /* PR_TYPE_EXCLUSIVE_ACCESS */

	buf[4] |= 0x02; /* PR_TYPE_WRITE_EXCLUSIVE */

	buf[5] |= 0x01; /* PR_TYPE_EXCLUSIVE_ACCESS_ALLREG */



	target_set_cmd_data_length(cmd, len);



	transport_kunmap_data_sg(cmd);



	return 0;

}





 */

static sense_reason_t

core_scsi3_pri_read_full_status(struct se_cmd *cmd)

{

	struct se_device *dev = cmd->se_dev;

	struct se_node_acl *se_nacl;

	struct se_portal_group *se_tpg;

	struct t10_pr_registration *pr_reg, *pr_reg_tmp;

	struct t10_reservation *pr_tmpl = &dev->t10_pr;

	unsigned char *buf;

	u32 add_desc_len = 0, add_len = 0;

	u32 off = 8; /* off into first Full Status descriptor */

	int format_code = 0, pr_res_type = 0, pr_res_scope = 0;

	int exp_desc_len, desc_len;

	bool all_reg = false;



	if (cmd->data_length < 8) {

		pr_err("PRIN SA READ_FULL_STATUS SCSI Data Length: %u"

			" too small\n", cmd->data_length);

		return TCM_INVALID_CDB_FIELD;

	}



	buf = transport_kmap_data_sg(cmd);

	if (!buf)

		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;



	put_unaligned_be32(dev->t10_pr.pr_generation, &buf[0]);



	spin_lock(&dev->dev_reservation_lock);

	if (dev->dev_pr_res_holder) {

		struct t10_pr_registration *pr_holder = dev->dev_pr_res_holder;



		if (pr_holder->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG ||

		    pr_holder->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG) {

			all_reg = true;

			pr_res_type = pr_holder->pr_res_type;

			pr_res_scope = pr_holder->pr_res_scope;

		}

	}

	spin_unlock(&dev->dev_reservation_lock);



	spin_lock(&pr_tmpl->registration_lock);

	list_for_each_entry_safe(pr_reg, pr_reg_tmp,

			&pr_tmpl->registration_list, pr_reg_list) {



		se_nacl = pr_reg->pr_reg_nacl;

		se_tpg = pr_reg->pr_reg_nacl->se_tpg;

		add_desc_len = 0;



		atomic_inc_mb(&pr_reg->pr_res_holders);

		spin_unlock(&pr_tmpl->registration_lock);



		 */

		exp_desc_len = target_get_pr_transport_id_len(se_nacl, pr_reg,

					&format_code);

		if (exp_desc_len < 0 ||

		    exp_desc_len + add_len > cmd->data_length) {

			pr_warn("SPC-3 PRIN READ_FULL_STATUS ran"

				" out of buffer: %d\n", cmd->data_length);

			spin_lock(&pr_tmpl->registration_lock);

			atomic_dec_mb(&pr_reg->pr_res_holders);

			break;

		}



		 */

		put_unaligned_be64(pr_reg->pr_res_key, &buf[off]);

		off += 8;

		off += 4; /* Skip Over Reserved area */





		 */

		if (pr_reg->pr_reg_all_tg_pt)

			buf[off] = 0x02;



		 */

		if (pr_reg->pr_res_holder) {

			buf[off++] |= 0x01;

			buf[off++] = (pr_reg->pr_res_scope & 0xf0) |

				     (pr_reg->pr_res_type & 0x0f);

		} else if (all_reg) {

			buf[off++] |= 0x01;

			buf[off++] = (pr_res_scope & 0xf0) |

				     (pr_res_type & 0x0f);

		} else {

			off += 2;

		}



		off += 4; /* Skip over reserved area */



		 */

		if (!pr_reg->pr_reg_all_tg_pt) {

			u16 sep_rtpi = pr_reg->tg_pt_sep_rtpi;



			put_unaligned_be16(sep_rtpi, &buf[off]);

			off += 2;

		} else

			off += 2; /* Skip over RELATIVE TARGET PORT IDENTIFIER */



		buf[off+4] = se_tpg->proto_id;





		 */

		desc_len = target_get_pr_transport_id(se_nacl, pr_reg,

				&format_code, &buf[off+4]);



		spin_lock(&pr_tmpl->registration_lock);

		atomic_dec_mb(&pr_reg->pr_res_holders);



		if (desc_len < 0)

			break;



		 */

		put_unaligned_be32(desc_len, &buf[off]);

		off += 4;



		 */

		add_desc_len = (24 + desc_len);



		off += desc_len;

		add_len += add_desc_len;

	}

	spin_unlock(&pr_tmpl->registration_lock);



	 */

	put_unaligned_be32(add_len, &buf[4]);

	target_set_cmd_data_length(cmd, 8 + add_len);



	transport_kunmap_data_sg(cmd);



	return 0;

}



sense_reason_t

target_scsi3_emulate_pr_in(struct se_cmd *cmd)

{

	sense_reason_t ret;





	 */

	if (cmd->se_dev->dev_reservation_flags & DRF_SPC2_RESERVATIONS) {

		pr_err("Received PERSISTENT_RESERVE CDB while legacy"

			" SPC-2 reservation is held, returning"

			" RESERVATION_CONFLICT\n");

		return TCM_RESERVATION_CONFLICT;

	}



	switch (cmd->t_task_cdb[1] & 0x1f) {

	case PRI_READ_KEYS:

		ret = core_scsi3_pri_read_keys(cmd);

		break;

	case PRI_READ_RESERVATION:

		ret = core_scsi3_pri_read_reservation(cmd);

		break;

	case PRI_REPORT_CAPABILITIES:

		ret = core_scsi3_pri_report_capabilities(cmd);

		break;

	case PRI_READ_FULL_STATUS:

		ret = core_scsi3_pri_read_full_status(cmd);

		break;

	default:

		pr_err("Unknown PERSISTENT_RESERVE_IN service"

			" action: 0x%02x\n", cmd->t_task_cdb[1] & 0x1f);

		return TCM_INVALID_CDB_FIELD;

	}



	if (!ret)

		target_complete_cmd(cmd, SAM_STAT_GOOD);

	return ret;

}



sense_reason_t

target_check_reservation(struct se_cmd *cmd)

{

	struct se_device *dev = cmd->se_dev;

	sense_reason_t ret;



	if (!cmd->se_sess)

		return 0;

	if (dev->se_hba->hba_flags & HBA_FLAGS_INTERNAL_USE)

		return 0;

	if (!dev->dev_attrib.emulate_pr)

		return 0;

	if (dev->transport_flags & TRANSPORT_FLAG_PASSTHROUGH_PGR)

		return 0;



	spin_lock(&dev->dev_reservation_lock);

	if (dev->dev_reservation_flags & DRF_SPC2_RESERVATIONS)

		ret = target_scsi2_reservation_check(cmd);

	else

		ret = target_scsi3_pr_reservation_check(cmd);

	spin_unlock(&dev->dev_reservation_lock);



	return ret;

}

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_rd.c

 *

 * This file contains the Storage Engine <-> Ramdisk transport

 * specific functions.

 *

 * (c) Copyright 2003-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

/*	rd_build_device_space():

 *

 *

		/*

		 * Reserve extra element for chain entry

 Don't need backing pages for NULLIO */

	/*

	 * prot_length=8byte dif data

	 * tot sg needed = rd_page_count * (PGSZ/block_size) *

	 * 		   (prot_length/block_size) + pad

	 * PGSZ canceled each other.

 rd page completed, next one please */

 since we increment, the first sg entry is correct */

 Unknown device type, not connected */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 Shaohua Li <shli@kernel.org>

 * Copyright (C) 2014 Red Hat, Inc.

 * Copyright (C) 2015 Arrikto, Inc.

 * Copyright (C) 2017 Chinamobile, Inc.

/**

 * DOC: Userspace I/O

 * Userspace I/O

 * -------------

 *

 * Define a shared-memory interface for LIO to pass SCSI commands and

 * data to userspace for processing. This is to allow backends that

 * are too complex for in-kernel support to be possible.

 *

 * It uses the UIO framework to do a lot of the device-creation and

 * introspection work for us.

 *

 * See the .h file for how the ring is laid out. Note that while the

 * command ring is defined, the particulars of the data area are

 * not. Offset values in the command entry point to other locations

 * internal to the mmap-ed area. There is separate space outside the

 * command ring for data buffers. This leaves maximum flexibility for

 * moving buffer allocations, or even page flipping or other

 * allocation techniques, without altering the command ring layout.

 *

 * SECURITY:

 * The user process must be assumed to be malicious. There's no way to

 * prevent it breaking the command ring protocol if it wants, but in

 * order to prevent other issues we must only ever read *data* from

 * the shared memory area, not offsets or sizes. This applies to

 * command ring entries as well as the mailbox. Extra code needed for

 * this may have a 'UAM' comment.

 For mailbox plus cmd ring, the size is fixed 8MB */

 Offset of cmd ring is size of mailbox */

/*

 * For data area, the default block size is PAGE_SIZE and

 * the default total size is 256K * PAGE_SIZE.

/*

 * Default number of global data blocks(512K * PAGE_SIZE)

 * when the unmap thread will be started.

 wake up thread waiting for reply */

 Offset of data area from start of mb */

 Must add data_off and mb_addr to get the address */

	/* Can't use se_cmd when cleaning up expired cmds, because if

/*

 * To avoid dead lock the mutex lock order should always be:

 *

 * mutex_lock(&root_udev_mutex);

 * ...

 * mutex_lock(&tcmu_dev->cmdr_lock);

 * mutex_unlock(&tcmu_dev->cmdr_lock);

 * ...

 * mutex_unlock(&root_udev_mutex);

 multicast group */

 Our generic netlink family */

 Count the number of already allocated pages */

 try to get new zeroed page from the mm */

 start value of dbi + 1 must not be a valid dbi */

 Get the next dbi */

 Do not add more than udev->data_blk_size to iov */

	/*

	 * The following code will gather and map the blocks to the same iovec

	 * when the blocks are all next to each other.

 dbi is not next to previous dbi, so start new iov */

 write offset relative to mb_addr */

 start value of dbi + 1 must not be a valid dbi */

 We prepare the IOVs for DMA_FROM_DEVICE transfer direction */

/*

 * Some ring helper functions. We don't assume size is a power of 2 so

 * we can't use circ_buf.h.

 Keep 1 byte unused or we can't tell full from empty */

 start value of dbi + 1 must not be a valid dbi */

 set length to 0 to abort outer loop */

		/*

		 * For bidi case, the first count blocks are for Data-Out

		 * buffer blocks, and before gathering the Data-In buffer

		 * the Data-Out buffer blocks should be skipped.

/*

 * We can't queue a command until we have space available on the cmd ring.

 *

 * Called with ring lock held.

 UAM */

	/*

	 * If cmd end-of-ring space is too small then we need space for a NOP plus

	 * original cmd - cmds are internally contiguous.

/*

 * We have to allocate data buffers before we can queue a command.

 * Returns -1 on error (not enough space) or number of needed iovs on success

 *

 * Called with ring lock held.

 try to check and get the data blocks as needed */

	/*

	 * For backwards compat if qfull_time_out is not set use

	 * cmd_time_out and if that's not set use the default time out.

 UAM */

 Insert a PAD if end-of-ring space is too small */

 not used for PAD */

 UAM */

/**

 * queue_cmd_ring - queue cmd to ring or internally

 * @tcmu_cmd: cmd to queue

 * @scsi_err: TCM error code if failure (-1) returned.

 *

 * Returns:

 * -1 we cannot queue internally or to the ring.

 *  0 success

 *  1 internally queued to wait for ring memory to free.

 size of data buffer needed */

	/*

	 * Must be a certain minimum size for response sense info, but

	 * also may be larger if the iov array is large.

		/*

		 * Don't leave commands partially setup because the unmap

		 * thread might need the blocks to make forward progress.

 prepare iov list and copy data to data area if necessary */

 Handle BIDI commands */

 All offsets relative to mb_addr, not start of entry! */

/**

 * queue_tmr_ring - queue tmr info to ring or internally

 * @udev: related tcmu_dev

 * @tmr: tcmu_tmr containing tmr info to queue

 *

 * Returns:

 *  0 success

 *  1 internally queued to wait for ring memory to free.

 First we check for aborted commands in qfull_queue */

 Commands on qfull queue have no id yet */

	/*

	 * cmd has been completed already from timeout, just reclaim

	 * data area space and free cmd

 Get Data-In buffer before clean up */

 TODO: */

		/*

		 * Keep this command after completion, since userspace still

		 * needs the data buffer. Mark it with TCMU_CMD_BIT_KEEP_BUF

		 * and reset potential TCMU_CMD_BIT_EXPIRED, so we don't accept

		 * a second completion later.

		 * Userspace can free the buffer later by writing the cmd_id

		 * to new action attribute free_kept_buf.

			/*

			 * tmr was requeued, so just put all tmrs back in

			 * the queue

		/*

		 * Flush max. up to end of cmd ring since current entry might

		 * be a padding that is shorter than sizeof(*entry)

		/*

		 * Allocated blocks exceeded global block limit, currently no

		 * more pending or waiting commands so try to reclaim blocks.

 Upper layer should drain all requests before calling this */

 There can be left over TMR cmds. Remove them. */

			/*

			 * We were not able to even start the command, so

			 * fail with busy to allow a retry in case runner

			 * was only temporarily down. If the device is being

			 * removed then LIO core will do the right thing and

			 * fail the retry.

			/*

			 * Ignore scsi_ret for now. target_complete_cmd

			 * drops it.

			/*

			 * cmd was requeued, so just put all cmds back in

			 * the queue

/*

 * mmap code from uio.c. Copied here because we want to hook mmap()

 * and this stuff must come along.

	/*

	 * Userspace messed up and passed in a address not in the

	 * data iov passed to it.

 release ref from tcmu_vma_open */

	/*

	 * We need to subtract mi because userspace uses offset = N*PAGE_SIZE

	 * to use mem[N].

 For the vmalloc()ed cmd area pages */

 For the dynamically growing data area pages */

 Ensure the mmap is exactly the right size */

 O_EXCL not supported for char devs, so fake it? */

		/* Cmds with KEEP_BUF set are no longer on the ring, but

		 * userspace still holds the data buffer. If userspace closes

		 * we implicitly free these cmds and buffers, since after new

		 * open the (new ?) userspace cannot find the cmd in the ring

		 * and thus never will release the buffer by writing cmd_id to

		 * free_kept_buf action attribute.

	/*

	 * We only freed data space, not ring space. Therefore we dont call

	 * run_tmr_queue, but call run_qfull_queue if tmr_list is empty.

 Wait during an add as the listener may not be up yet */

 If the old string exists, free it */

 mailbox fits in first part of CMDR space */

 Default in Idle state */

 Initialise the mailbox of the ring buffer */

 User can set hw_block_size before enable the device */

 Other attributes can be configured in userspace */

	/* If user didn't explicitly disable netlink reply support, use

	 * module scope setting.

	/*

	 * Get a ref incase userspace does a close on the uio device before

	 * LIO has initiated tcmu_free_device.

 release ref from init */

 release ref from configure */

 complete IO that has executed successfully */

 fail IO waiting to be queued */

				/*

				 * Userspace was not able to start the

				 * command or it is retryable.

 hard failure */

	/*

	 * ring is empty and qfull queue never contains aborted commands.

	 * So TMRs in tmr queue do not contain relevant cmd_ids.

	 * After a ring reset userspace should do a fresh start, so

	 * even LUN RESET message is no longer relevant.

	 * Therefore remove all TMRs from qfull queue

 Check if device has been configured before */

 Check if device has been configured before */

 Check if device has been configured before */

	/*

	 * We only freed data space, not ring space. Therefore we dont call

	 * run_tmr_queue, but call run_qfull_queue if tmr_list is empty.

 Try to complete the finished commands first */

 Skip the udevs in idle */

			/*

			 * The last bit is dbi_max, so it is not possible

			 * reclaim any blocks.

 The current udev will goto idle state */

 Here will truncate the data area from off */

 Release the block pages */

		/*

		 * If cmd_time_out is disabled but qfull is set deadline

		 * will only reflect the qfull timeout. Ignore it.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SCSI Primary Commands (SPC) parsing and emulation.

 *

 * (c) Copyright 2002-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

	/*

	 * Set SCCS for MAINTENANCE_IN + REPORT_TARGET_PORT_GROUPS.

	/*

	 * Set TPGS field for explicit and/or implicit ALUA access type

	 * and opteration.

	 *

	 * See spc4r17 section 6.4.2 Table 135

 Set RMB (removable media) for tape devices */

 SPC-4 */

	/*

	 * NORMACA and HISUP = 0, RESPONSE DATA FORMAT = 2

	 *

	 * SPC4 says:

	 *   A RESPONSE DATA FORMAT field set to 2h indicates that the

	 *   standard INQUIRY data is in the format defined in this

	 *   standard. Response data format values less than 2h are

	 *   obsolete. Response data format values greater than 2h are

	 *   reserved.

	/*

	 * Enable SCCS and TPGS fields for Emulated ALUA

	/*

	 * Set Third-Party Copy (3PC) bit to indicate support for EXTENDED_COPY

	/*

	 * Set Protection (PROTECT) bit when DIF has been enabled on the

	 * device, and the fabric supports VERIFY + PASS.  Also report

	 * PROTECT=1 if sess_prot_type has been configured to allow T10-PI

	 * to unprotected devices.

 CmdQue=1 */

	/*

	 * ASCII data fields described as being left-aligned shall have any

	 * unused bytes at the end of the field (i.e., highest offset) and the

	 * unused bytes shall be filled with ASCII space characters (20h).

	/*

	 * Set the VERSION DESCRIPTOR fields

 Set additional length to 91 */

 unit serial number */

 Extra Byte for NULL Terminator */

/*

 * Generate NAA IEEE Registered Extended designator

	/*

	 * Start NAA IEEE Registered Extended Identifier/Designator

 IEEE COMPANY_ID */

	/*

	 * Generate up to 36 bits of VENDOR SPECIFIC IDENTIFIER starting on

	 * byte 3 bit 3-0 for NAA IEEE Registered Extended DESIGNATOR field

	 * format, followed by 64 bits of VENDOR SPECIFIC IDENTIFIER EXTENSION

	 * to complete the payload.  These are based from VPD=0x80 PRODUCT SERIAL

	 * NUMBER set via vpd_unit_serial in target_core_configfs.c to ensure

	 * per device uniqeness.

/*

 * Device identification VPD, for a complete list of

 * DESIGNATOR TYPEs see spc4r17 Table 459.

	/*

	 * NAA IEEE Registered Extended Assigned designator format, see

	 * spc4r17 section 7.7.3.6.5

	 *

	 * We depend upon a target_core_mod/ConfigFS provided

	 * /sys/kernel/config/target/core/$HBA/$DEV/wwn/vpd_unit_serial

	 * value in order to return the NAA id.

 CODE SET == Binary */

 Set ASSOCIATION == addressed logical unit: 0)b */

 Identifier/Designator type == NAA identifier */

 Identifier/Designator length */

 NAA IEEE Registered Extended designator */

	/*

	 * T10 Vendor Identifier Page, see spc4r17 section 7.7.3.4

 For Vendor field */

 For VPD Header */

 For Vendor field */

 For : */

 For NULL Terminator */

 ASCII */

 T10 Vendor ID */

 left align Vendor ID and pad with spaces */

 Extra Byte for NULL Terminator */

 Identifier Length */

 Header size for Designation descriptor */

		/*

		 * Relative target port identifer, see spc4r17

		 * section 7.7.3.7

		 *

		 * Get the PROTOCOL IDENTIFIER as defined by spc4r17

		 * section 7.5.1 Table 362

 CODE SET == Binary */

 Set PIV=1 */

 Set ASSOCIATION == target port: 01b */

 DESIGNATOR TYPE == Relative target port identifer */

 Skip over Reserved */

 DESIGNATOR LENGTH */

		/* Skip over Obsolete field in RTPI payload

 Header size + Designation descriptor */

		/*

		 * Target port group identifier, see spc4r17

		 * section 7.7.3.8

		 *

		 * Get the PROTOCOL IDENTIFIER as defined by spc4r17

		 * section 7.5.1 Table 362

 CODE SET == Binary */

 Set PIV=1 */

 Set ASSOCIATION == target port: 01b */

 DESIGNATOR TYPE == Target port group identifier */

 Skip over Reserved */

 DESIGNATOR LENGTH */

 Skip over Reserved Field */

 Header size + Designation descriptor */

		/*

		 * Logical Unit Group identifier, see spc4r17

		 * section 7.7.3.8

 CODE SET == Binary */

 DESIGNATOR TYPE == Logical Unit Group identifier */

 Skip over Reserved */

 DESIGNATOR LENGTH */

 Skip over Reserved Field */

 Header size + Designation descriptor */

		/*

		 * SCSI name string designator, see spc4r17

		 * section 7.7.3.11

		 *

		 * Get the PROTOCOL IDENTIFIER as defined by spc4r17

		 * section 7.5.1 Table 362

 CODE SET == UTF-8 */

 Set PIV=1 */

 Set ASSOCIATION == target port: 01b */

 DESIGNATOR TYPE == SCSI name string */

 Skip over Reserved and length */

		/*

		 * SCSI name string identifer containing, $FABRIC_MOD

		 * dependent information.  For LIO-Target and iSCSI

		 * Target Port, this means "<iSCSI name>,t,0x<TPGT> in

		 * UTF-8 encoding.

 Include  NULL terminator */;

		/*

		 * The null-terminated, null-padded (see 4.4.2) SCSI

		 * NAME STRING field contains a UTF-8 format string.

		 * The number of bytes in the SCSI NAME STRING field

		 * (i.e., the value in the DESIGNATOR LENGTH field)

		 * shall be no larger than 256 and shall be a multiple

		 * of four.

 Header size + Designation descriptor */

		/*

		 * Target device designator

 CODE SET == UTF-8 */

 Set PIV=1 */

 Set ASSOCIATION == target device: 10b */

 DESIGNATOR TYPE == SCSI name string */

 Skip over Reserved and length */

		/*

		 * SCSI name string identifer containing, $FABRIC_MOD

		 * dependent information.  For LIO-Target and iSCSI

		 * Target Port, this means "<iSCSI name>" in

		 * UTF-8 encoding.

 Include  NULL terminator */;

		/*

		 * The null-terminated, null-padded (see 4.4.2) SCSI

		 * NAME STRING field contains a UTF-8 format string.

		 * The number of bytes in the SCSI NAME STRING field

		 * (i.e., the value in the DESIGNATOR LENGTH field)

		 * shall be no larger than 256 and shall be a multiple

		 * of four.

 Header size + Designation descriptor */

 Page Length for VPD 0x83 */

 Extended INQUIRY Data VPD Page */

	/*

	 * Set GRD_CHK + REF_CHK for TYPE1 protection, or GRD_CHK

	 * only for TYPE3 protection.

 logical unit supports type 1 and type 3 protection */

 Set HEADSUP, ORDSUP, SIMPSUP */

 If WriteCache emulation is enabled, set V_SUP */

 If an LBA map is present set R_SUP */

 Block Limits VPD page */

	/*

	 * Following spc3r22 section 6.5.3 Block Limits VPD page, when

	 * emulate_tpu=1 or emulate_tpws=1 we will be expect a

	 * different page length for Thin Provisioning.

 Set WSNZ to 1 */

	/*

	 * Set MAXIMUM COMPARE AND WRITE LENGTH

	/*

	 * Set OPTIMAL TRANSFER LENGTH GRANULARITY

	/*

	 * Set MAXIMUM TRANSFER LENGTH

	 *

	 * XXX: Currently assumes single PAGE_SIZE per scatterlist for fabrics

	 * enforcing maximum HW scatter-gather-list entry limit

	/*

	 * Set OPTIMAL TRANSFER LENGTH

	/*

	 * Exit now if we don't support TP.

	/*

	 * Set MAXIMUM UNMAP LBA COUNT

	/*

	 * Set MAXIMUM UNMAP BLOCK DESCRIPTOR COUNT

	/*

	 * Set OPTIMAL UNMAP GRANULARITY

	/*

	 * UNMAP GRANULARITY ALIGNMENT

 Set the UGAVALID bit */

	/*

	 * MAXIMUM WRITE SAME LENGTH

 Block Device Characteristics VPD page */

 Thin Provisioning VPD */

	/*

	 * From spc3r22 section 6.5.4 Thin Provisioning VPD page:

	 *

	 * The PAGE LENGTH field is defined in SPC-4. If the DP bit is set to

	 * zero, then the page length shall be set to 0004h.  If the DP bit

	 * is set to one, then the page length shall be set to the value

	 * defined in table 162.

	/*

	 * Set Hardcoded length mentioned above for DP=0

	/*

	 * The THRESHOLD EXPONENT field indicates the threshold set size in

	 * LBAs as a power of 2 (i.e., the threshold set size is equal to

	 * 2(threshold exponent)).

	 *

	 * Note that this is currently set to 0x00 as mkp says it will be

	 * changing again.  We can enable this once it has settled in T10

	 * and is actually used by Linux/SCSI ML code.

	/*

	 * A TPU bit set to one indicates that the device server supports

	 * the UNMAP command (see 5.25). A TPU bit set to zero indicates

	 * that the device server does not support the UNMAP command.

	/*

	 * A TPWS bit set to one indicates that the device server supports

	 * the use of the WRITE SAME (16) command (see 5.42) to unmap LBAs.

	 * A TPWS bit set to zero indicates that the device server does not

	 * support the use of the WRITE SAME (16) command to unmap LBAs.

	/*

	 * The unmap_zeroes_data set means that the underlying device supports

	 * REQ_OP_DISCARD and has the discard_zeroes_data bit set. This

	 * satisfies the SBC requirements for LBPRZ, meaning that a subsequent

	 * read will return zeroes after an UNMAP or WRITE SAME (16) to an LBA

	 * See sbc4r36 6.6.4.

 Referrals VPD page */

 supported vital product data pages */

	/*

	 * Only report the INQUIRY EVPD=1 pages after a valid NAA

	 * Registered Extended LUN WWN has been set via ConfigFS

	 * during device creation/restart.

 No changeable values for now */

 No changeable values for now */

 GLTSD: No implicit save of log parameters */

 D_SENSE: Descriptor format sense data for 64bit sectors */

	/*

	 * From spc4r23, 7.4.7 Control mode page

	 *

	 * The QUEUE ALGORITHM MODIFIER field (see table 368) specifies

	 * restrictions on the algorithm used for reordering commands

	 * having the SIMPLE task attribute (see SAM-4).

	 *

	 *                    Table 368 -- QUEUE ALGORITHM MODIFIER field

	 *                         Code      Description

	 *                          0h       Restricted reordering

	 *                          1h       Unrestricted reordering allowed

	 *                          2h to 7h    Reserved

	 *                          8h to Fh    Vendor specific

	 *

	 * A value of zero in the QUEUE ALGORITHM MODIFIER field specifies that

	 * the device server shall order the processing sequence of commands

	 * having the SIMPLE task attribute such that data integrity is maintained

	 * for that I_T nexus (i.e., if the transmission of new SCSI transport protocol

	 * requests is halted at any time, the final value of all data observable

	 * on the medium shall be the same as if all the commands had been processed

	 * with the ORDERED task attribute).

	 *

	 * A value of one in the QUEUE ALGORITHM MODIFIER field specifies that the

	 * device server may reorder the processing sequence of commands having the

	 * SIMPLE task attribute in any manner. Any data integrity exposures related to

	 * command sequence order shall be explicitly handled by the application client

	 * through the selection of appropriate ommands and task attributes.

	/*

	 * From spc4r17, section 7.4.6 Control mode Page

	 *

	 * Unit Attention interlocks control (UN_INTLCK_CTRL) to code 00b

	 *

	 * 00b: The logical unit shall clear any unit attention condition

	 * reported in the same I_T_L_Q nexus transaction as a CHECK CONDITION

	 * status and shall not establish a unit attention condition when a com-

	 * mand is completed with BUSY, TASK SET FULL, or RESERVATION CONFLICT

	 * status.

	 *

	 * 10b: The logical unit shall not clear any unit attention condition

	 * reported in the same I_T_L_Q nexus transaction as a CHECK CONDITION

	 * status and shall not establish a unit attention condition when

	 * a command is completed with BUSY, TASK SET FULL, or RESERVATION

	 * CONFLICT status.

	 *

	 * 11b a The logical unit shall not clear any unit attention condition

	 * reported in the same I_T_L_Q nexus transaction as a CHECK CONDITION

	 * status and shall establish a unit attention condition for the

	 * initiator port associated with the I_T nexus on which the BUSY,

	 * TASK SET FULL, or RESERVATION CONFLICT status is being returned.

	 * Depending on the status, the additional sense code shall be set to

	 * PREVIOUS BUSY STATUS, PREVIOUS TASK SET FULL STATUS, or PREVIOUS

	 * RESERVATION CONFLICT STATUS. Until it is cleared by a REQUEST SENSE

	 * command, a unit attention condition shall be established only once

	 * for a BUSY, TASK SET FULL, or RESERVATION CONFLICT status regardless

	 * to the number of commands completed with one of those status codes.

 TARGET_UA_INTLCK_CTRL_CLEAR */

	/*

	 * From spc4r17, section 7.4.6 Control mode Page

	 *

	 * Task Aborted Status (TAS) bit set to zero.

	 *

	 * A task aborted status (TAS) bit set to zero specifies that aborted

	 * tasks shall be terminated by the device server without any response

	 * to the application client. A TAS bit set to one specifies that tasks

	 * aborted by the actions of an I_T nexus other than the I_T nexus on

	 * which the command was received shall be completed with TASK ABORTED

	 * status (see SAM-4).

	/*

	 * From spc4r30, section 7.5.7 Control mode page

	 *

	 * Application Tag Owner (ATO) bit set to one.

	 *

	 * If the ATO bit is set to one the device server shall not modify the

	 * LOGICAL BLOCK APPLICATION TAG field and, depending on the protection

	 * type, shall not modify the contents of the LOGICAL BLOCK REFERENCE

	 * TAG field.

 No changeable values for now */

 Write Cache Enable */

 Disabled Read Ahead */

 No changeable values for now */

	/*

	 * I believe that the WP bit (bit 7) in the mode header is the same for

	 * all device types..

 WP bit */

 DPOFUA bit */

 LONGLBA */

	/*

	 * Skip over MODE DATA LENGTH + MEDIUM TYPE fields to byte 3 for

	 * MODE_SENSE_10 and byte 2 for MODE_SENSE (6).

 DEVICE-SPECIFIC PARAMETER */

	/*

	 * SBC only allows us to enable FUA and DPO together.  Fortunately

	 * DPO is explicitly specified as a hint, so a noop is a perfectly

	 * valid implementation.

 BLOCK DESCRIPTOR */

	/*

	 * For now we only include a block descriptor for disk (SBC)

	 * devices; other command sets use a slightly different format.

			/*

			 * Tricky way to say all subpage 00h for

			 * subpage==0, all subpages for subpage==0xff

			 * (and we just checked above that those are

			 * the only two possibilities).

	/*

	 * We don't intend to implement:

	 *  - obsolete page 03h "format parameters" (checked by Solaris)

	/*

	 * If no struct se_session pointer is present, this struct se_cmd is

	 * coming via a target_core_mod PASSTHROUGH op, and not through

	 * a $FABRIC_MOD.  In that case, report LUN=0 only.

		/*

		 * We determine the correct LUN LIST LENGTH even once we

		 * have reached the initial allocation length.

		 * See SPC2-R20 7.19.

	/*

	 * See SPC3 r07, page 159.

	/*

	 * If no LUNs are accessible, report virtual LUN 0.

		/*

		 * The SPC-2 RESERVE does not contain a size in the SCSI CDB.

		 * Assume the passthrough or $FABRIC_MOD will tell us about it.

		/*

		 * Do implicit HEAD_OF_QUEUE processing for INQUIRY.

		 * See spc4r17 section 5.3

		/*

		 * Do implicit HEAD_OF_QUEUE processing for REPORT_LUNS

		 * See spc4r17 section 5.3

			/*

			 * MAINTENANCE_IN from SCC-2

			 * Check for emulated MI_REPORT_TARGET_PGS

			/*

			 * GPCMD_SEND_KEY from multi media commands

			/*

			 * MAINTENANCE_OUT from SCC-2

			 * Check for emulated MO_SET_TARGET_PGS.

			/*

			 * GPCMD_SEND_KEY from multi media commands

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_tpg.c

 *

 * This file contains generic Target Portal Group related functions.

 *

 * (c) Copyright 2002-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

/*	__core_tpg_get_initiator_node_acl():

 *

 *	mutex_lock(&tpg->acl_node_mutex); must be held when calling

/*	core_tpg_get_initiator_node_acl():

 *

 *

	/*

	 * Obtain se_node_acl->acl_kref using fabric driver provided

	 * initiatorname[] during node acl endpoint lookup driven by

	 * new se_session login.

	 *

	 * The reference is held until se_session shutdown -> release

	 * occurs via fabric driver invoked transport_deregister_session()

	 * or transport_free_session() code.

/*	core_tpg_add_node_to_devs():

 *

 *

		/*

		 * By default in LIO-Target $FABRIC_MOD,

		 * demo_mode_write_protect is ON, or READ_ONLY;

			/*

			 * Allow only optical drives to issue R/W in default RO

			 * demo mode.

		/*

		 * Check to see if there are any existing persistent reservation

		 * APTPL pre-registrations that need to be enabled for this dynamic

		 * LUN ACL now..

	/*

	 * When allocating a dynamically generated node_acl, go ahead

	 * and take the extra kref now before returning to the fabric

	 * driver caller.

	 *

	 * Note this reference will be released at session shutdown

	 * time within transport_free_session() code.

	/*

	 * Here we only create demo-mode MappedLUNs from the active

	 * TPG LUNs if the fabric is not explicitly asking for

	 * tpg_check_demo_mode_login_only() == 1.

	/*

	 * Wait for last target_put_nacl() to complete in target_complete_nacl()

	 * for active fabric session transport_deregister_session() callbacks.

/*	core_tpg_set_initiator_node_queue_depth():

 *

 *

	/*

	 * Allow the setting of se_node_acl queue_depth to be idempotent,

	 * and not force a session shutdown event if the value is not

	 * changing.

	/*

	 * User has requested to change the queue depth for a Initiator Node.

	 * Change the value in the Node's struct se_node_acl, and call

	 * target_set_nacl_queue_depth() to set the new queue depth.

	/*

	 * Shutdown all pending sessions to force session reinstatement.

/*	core_tpg_set_initiator_node_tag():

 *

 *	Initiator nodeacl tags are not used internally, but may be used by

 *	userspace to emulate aliases or groups.

 *	Returns length of newly-set tag or -EINVAL.

 Does not change se_wwn->priv. */

	/*

	 * For the typical case where core_tpg_register() is called by a

	 * fabric driver from target_core_fabric_ops->fabric_make_tpg()

	 * configfs context, use the original tf_ops pointer already saved

	 * by target-core in target_fabric_make_wwn().

	 *

	 * Otherwise, for special cases like iscsi-target discovery TPGs

	 * the caller is responsible for setting ->se_tpg_tfo ahead of

	 * calling core_tpg_register().

	/*

	 * Release any remaining demo-mode generated se_node_acl that have

	 * not been released because of TFO->tpg_check_demo_mode_cache() == 1

	 * in transport_deregister_session().

	/*

	 * rcu_dereference_raw protected by se_lun->lun_group symlink

	 * reference to se_device->dev_group.

	/*

	 * Wait for any active I/O references to percpu se_lun->lun_ref to

	 * be released.  Also, se_lun->lun_ref is now used by PR and ALUA

	 * logic when referencing a remote target port during ALL_TGT_PT=1

	 * and generating UNIT_ATTENTIONs for ALUA access state transition.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_fabric_lib.c

 *

 * This file contains generic high level protocol identifier and PR

 * handlers for TCM fabric modules

 *

 * (c) Copyright 2010-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

/*

 * See SPC4, section 7.5 "Protocol specific parameters" for details

 * on the formats implemented in this file.

 Skip over 'naa. prefix */

	/*

	 * We convert the ASCII formatted N Port name into a binary

	 * encoded TransportID.

	/*

	 * The FC Transport ID is a hardcoded 24-byte length

	/*

	 * Only null terminate the last field.

	 *

	 * From spc4r37 section 7.6.4.6: TransportID for initiator ports using

	 * SCSI over iSCSI.

	 *

	 * Table 507 TPID=0 Initiator device TransportID

	 *

	 * The null-terminated, null-padded (see 4.3.2) ISCSI NAME field shall

	 * contain the iSCSI name of an iSCSI initiator node (see RFC 7143).

	 * The first ISCSI NAME field byte containing an ASCII null character

	 * terminates the ISCSI NAME field without regard for the specified

	 * length of the iSCSI TransportID or the contents of the ADDITIONAL

	 * LENGTH field.

		/*

		 * Set FORMAT CODE 01b for iSCSI Initiator port TransportID

		 * format.

		/*

		 * From spc4r37 Section 7.6.4.6

		 *

		 * Table 508 TPID=1 Initiator port TransportID.

		 *

		 * The ISCSI NAME field shall not be null-terminated

		 * (see 4.3.2) and shall not be padded.

		 *

		 * The SEPARATOR field shall contain the five ASCII

		 * characters ",i,0x".

		 *

		 * The null-terminated, null-padded ISCSI INITIATOR SESSION ID

		 * field shall contain the iSCSI initiator session identifier

		 * (see RFC 3720) in the form of ASCII characters that are the

		 * hexadecimal digits converted from the binary iSCSI initiator

		 * session identifier value. The first ISCSI INITIATOR SESSION

		 * ID field byte containing an ASCII null character terminates

		 * the ISCSI INITIATOR SESSION ID field without regard for the

		 * specified length of the iSCSI TransportID or the contents

		 * of the ADDITIONAL LENGTH field.

 ASCII Character: "," */

 ASCII Character: "i" */

 ASCII Character: "," */

 ASCII Character: "0" */

 ASCII Character: "x" */

	/*

	 * The ADDITIONAL LENGTH field specifies the number of bytes that follow

	 * in the TransportID. The additional length shall be at least 20 and

	 * shall be a multiple of four.

	/*

	 * Increment value for total payload + header length for

	 * full status descriptor

	/*

	 * Add extra byte for NULL terminator

	/*

	 * If there is ISID present with the registration, use format code:

	 * 01b: iSCSI Initiator port TransportID format

	 *

	 * If there is not an active iSCSI session, use format code:

	 * 00b: iSCSI Initiator device TransportID format

 For ",i,0x" ASCII separator */

	/*

	 * The ADDITIONAL LENGTH field specifies the number of bytes that follow

	 * in the TransportID. The additional length shall be at least 20 and

	 * shall be a multiple of four.

	/*

	 * Increment value for total payload + header length for

	 * full status descriptor

	/*

	 * Check for FORMAT CODE 00b or 01b from spc4r17, section 7.5.4.6:

	 *

	 *       TransportID for initiator ports using SCSI over iSCSI,

	 *       from Table 388 -- iSCSI TransportID formats.

	 *

	 *    00b     Initiator port is identified using the world wide unique

	 *            SCSI device name of the iSCSI initiator

	 *            device containing the initiator port (see table 389).

	 *    01b     Initiator port is identified using the world wide unique

	 *            initiator port identifier (see table 390).10b to 11b

	 *            Reserved

	/*

	 * If the caller wants the TransportID Length, we set that value for the

	 * entire iSCSI Tarnsport ID now.

 The shift works thanks to integer promotion rules */

 Add four bytes for iSCSI Transport ID header */

	/*

	 * Check for ',i,0x' separator between iSCSI Name and iSCSI Initiator

	 * Session ID as defined in Table 390 - iSCSI initiator port TransportID

	 * format.

 Terminate iSCSI Name */

 Skip over ",i,0x" separator */

		/*

		 * Go ahead and do the lower case conversion of the received

		 * 12 ASCII characters representing the ISID in the TransportID

		 * for comparison against the running iSCSI session's ISID from

		 * iscsi_target.c:lio_sess_get_initiator_sid()

			/*

			 * The first ISCSI INITIATOR SESSION ID field byte

			 * containing an ASCII null character terminates the

			 * ISCSI INITIATOR SESSION ID field without regard for

			 * the specified length of the iSCSI TransportID or the

			 * contents of the ADDITIONAL LENGTH field.

	/*

	 * Most transports use a fixed length 24 byte identifier.

		/*

		 * Assume the FORMAT CODE 00b from spc4r17, 7.5.4.7 TransportID

		 * for initiator ports using SCSI over SAS Serial SCSI Protocol.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_transport.c

 *

 * This file contains the Generic Target Engine Core.

 *

 * (c) Copyright 2002-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

 This code ensures unique mib indexes are handed out. */

/*

 * Allocate a new row index for the entry type specified

/**

 * transport_init_session - initialize a session object

 * @se_sess: Session object pointer.

 *

 * The caller must have zero-initialized @se_sess before calling this function.

	/*

	 * Drivers like iscsi and loop do not call target_stop_session

	 * during session shutdown so we have to drop the ref taken at init

	 * time here.

/**

 * transport_alloc_session - allocate a session object and initialize it

 * @sup_prot_ops: bitmask that defines which T10-PI modes are supported.

/**

 * transport_alloc_session_tags - allocate target driver private data

 * @se_sess:  Session pointer.

 * @tag_num:  Maximum number of in-flight commands between initiator and target.

 * @tag_size: Size in bytes of the private data a target driver associates with

 *	      each command.

/**

 * transport_init_session_tags - allocate a session and target driver private data

 * @tag_num:  Maximum number of in-flight commands between initiator and target.

 * @tag_size: Size in bytes of the private data a target driver associates with

 *	      each command.

 * @sup_prot_ops: bitmask that defines which T10-PI modes are supported.

/*

 * Called with spin_lock_irqsave(&struct se_portal_group->session_lock called.

	/*

	 * Used by struct se_node_acl's under ConfigFS to locate active se_session-t

	 *

	 * Only set for struct se_session's that will actually be moving I/O.

	 * eg: *NOT* discovery sessions.

		/*

		 *

		 * Determine if fabric allows for T10-PI feature bits exposed to

		 * initiators for device backends with !dev->dev_attrib.pi_prot_type.

		 *

		 * If so, then always save prot_type on a per se_node_acl node

		 * basis and re-instate the previous sess_prot_type to avoid

		 * disabling PI from below any previously initiator side

		 * registered LUNs.

		/*

		 * If the fabric module supports an ISID based TransportID,

		 * save this value in binary from the fabric I_T Nexus now.

		/*

		 * The se_nacl->nacl_sess pointer will be set to the

		 * last active I_T Nexus for each struct se_node_acl.

	/*

	 * If the fabric driver is using percpu-ida based pre allocation

	 * of I/O descriptor tags, go ahead and perform that setup now..

	/*

	 * Go ahead and perform any remaining fabric setup that is

	 * required before transport_register_session().

 Include NULL terminator */

	/*

	 * Used by struct se_node_acl's under ConfigFS to locate active struct se_session

		/*

		 * If the session list is empty, then clear the pointer.

		 * Otherwise, set the struct se_session pointer from the tail

		 * element of the per struct se_node_acl active session list.

	/*

	 * Drop the se_node_acl->nacl_kref obtained from within

	 * core_tpg_get_initiator_node_acl().

		/*

		 * Also determine if we need to drop the extra ->cmd_kref if

		 * it had been previously dynamically generated, and

		 * the endpoint is not caching dynamic ACLs.

	/*

	 * Since the session is being removed, release SPC-2

	 * reservations held by the session that is disappearing.

	/*

	 * If last kref is dropping now for an explicit NodeACL, awake sleeping

	 * ->acl_free_comp caller to wakeup configfs se_node_acl->acl_group

	 * removal context from within transport_free_session() code.

	 *

	 * For dynamic ACL, target_put_nacl() uses target_complete_nacl()

	 * to release all remaining generate_node_acl=1 created ACL resources.

/*

 * This function is called by the target core after the target core has

 * finished processing a SCSI command or SCSI TMF. Both the regular command

 * processing code and the code for aborting commands can call this

 * function. CMD_T_STOP is set if and only if another thread is waiting

 * inside transport_wait_for_tasks() for t_transport_stop_comp.

	/*

	 * Determine if frontend context caller is requesting the stopping of

	 * this command for frontend exceptions.

	/*

	 * Some fabric modules like tcm_loop can release their internally

	 * allocated I/O reference and struct se_cmd now.

	 *

	 * Fabric modules are expected to return '1' here if the se_cmd being

	 * passed is released at this point, or zero if not being released.

	/*

	 * Clear struct se_cmd->se_lun before the handoff to FE.

/*

 * Used when asking transport to copy Sense Data from the underlying

 * Linux/SCSI struct scsi_cmnd

		/*

		 * Allow the fabric driver to unmap any resources before

		 * releasing the descriptor via TFO->release_cmd().

		/*

		 * To do: establish a unit attention condition on the I_T

		 * nexus associated with cmd. See also the paragraph "Aborting

		 * commands" in SAM.

 May be called from interrupt context so must not sleep. */

/*

 * Handle QUEUE_FULL / -EAGAIN and -ENOMEM status

	/*

	 * Check if the Protocol Identifier Valid (PIV) bit is set..

	 *

	 * from spc3r23.pdf section 7.5.1

	/*

	 * The VPD identification association..

	 *

	 * from spc3r23.pdf Section 7.6.3.1 Table 297

	/*

	 * The VPD identifier type..

	 *

	 * from spc3r23.pdf Section 7.6.3.1 Table 298

 Binary */

 ASCII */

 UTF-8 */

 offset to start of the identifier */

	/*

	 * The VPD Code Set (encoding)

	 *

	 * from spc3r23.pdf Section 7.6.3.1 Table 296

 Binary */

 ASCII */

 UTF-8 */

	/*

	 * Check if fabric enforced maximum SGL entries per I/O descriptor

	 * exceeds se_cmd->data_length.  If true, set SCF_UNDERFLOW_BIT +

	 * residual_count and reduce original cmd->data_length to maximum

	 * length based on single PAGE_SIZE entry scatter-lists.

		/*

		 * If an existing CDB overflow is present, calculate new residual

		 * based on CDB size minus fabric maximum transfer length.

		 *

		 * If an existing CDB underflow is present, calculate new residual

		 * based on original cmd->data_length minus fabric maximum transfer

		 * length.

		 *

		 * Otherwise, set the underflow residual based on cmd->data_length

		 * minus fabric maximum transfer length.

		/*

		 * Reset sbc_check_prot() calculated protection payload

		 * length based upon the new smaller MTL.

/**

 * target_cmd_size_check - Check whether there will be a residual.

 * @cmd: SCSI command.

 * @size: Data buffer size derived from CDB. The data buffer size provided by

 *   the SCSI transport driver is available in @cmd->data_length.

 *

 * Compare the data buffer size from the CDB with the data buffer limit from the transport

 * header. Set @cmd->residual_count and SCF_OVERFLOW_BIT or SCF_UNDERFLOW_BIT if necessary.

 *

 * Note: target drivers set @cmd->data_length by calling __target_init_cmd().

 *

 * Return: TCM_NO_SENSE

		/*

		 * For READ command for the overflow case keep the existing

		 * fabric provided ->data_length. Otherwise for the underflow

		 * case, reset ->data_length to the smaller SCSI expected data

		 * transfer length.

			/*

			 * Do not truncate ->data_length for WRITE command to

			 * dump all payload

			/*

			 * Some fabric drivers like iscsi-target still expect to

			 * always reject overflow writes.  Reject this case until

			 * full fabric driver level support for overflow writes

			 * is introduced tree-wide.

/*

 * Used by fabric modules containing a local struct se_cmd within their

 * fabric dependent per I/O descriptor.

 *

 * Preserves the value of @cmd->tag.

	/*

	 * Check if SAM Task Attribute emulation is enabled for this

	 * struct se_device storage object

	/*

	 * Ensure that the received CDB is less than the max (252 + 8) bytes

	 * for VARIABLE_LENGTH_CMD

	/*

	 * If the received CDB is larger than TCM_MAX_COMMAND_SIZE,

	 * allocate the additional extended CDB buffer now..  Otherwise

	 * setup the pointer from __t_task_cdb to t_task_cdb.

	/*

	 * Copy the original CDB into cmd->

	/*

	 * Copy the CDB here to allow trace_target_cmd_complete() to

	 * print the cdb to the trace buffers.

/*

 * Used by fabric module frontends to queue tasks directly.

 * May only be used from process context.

	/*

	 * Set TRANSPORT_NEW_CMD state and CMD_T_ACTIVE to ensure that

	 * outstanding descriptors are handled correctly during shutdown via

	 * transport_wait_for_tasks()

	 *

	 * Also, we don't take cmd->t_state_lock here as we only expect

	 * this to be called for initial descriptor submission.

	/*

	 * transport_generic_new_cmd() is already handling QUEUE_FULL,

	 * so follow TRANSPORT_NEW_CMD processing thread context usage

	 * and call transport_generic_request_failure() if necessary..

	/*

	 * Reject SCSI data overflow with map_mem_to_cmd() as incoming

	 * scatterlists already have been set to follow what the fabric

	 * passes for the original expected data transfer length.

/**

 * target_init_cmd - initialize se_cmd

 * @se_cmd: command descriptor to init

 * @se_sess: associated se_sess for endpoint

 * @sense: pointer to SCSI sense buffer

 * @unpacked_lun: unpacked LUN to reference for struct se_lun

 * @data_length: fabric expected data transfer length

 * @task_attr: SAM task attribute

 * @data_dir: DMA data direction

 * @flags: flags for command submission from target_sc_flags_tables

 *

 * Task tags are supported if the caller has set @se_cmd->tag.

 *

 * Returns:

 *	- less than zero to signal active I/O shutdown failure.

 *	- zero on success.

 *

 * If the fabric driver calls target_stop_session, then it must check the

 * return code and handle failures. This will never fail for other drivers,

 * and the return code can be ignored.

	/*

	 * Signal bidirectional data payloads to target-core

	/*

	 * Initialize se_cmd for target operation.  From this point

	 * exceptions are handled by sending exception status via

	 * target_core_fabric_ops->queue_status() callback

	/*

	 * Obtain struct se_cmd->cmd_kref reference. A second kref_get here is

	 * necessary for fabrics using TARGET_SCF_ACK_KREF that expect a second

	 * kref_put() to happen during fabric packet acknowledgement.

/**

 * target_submit_prep - prepare cmd for submission

 * @se_cmd: command descriptor to prep

 * @cdb: pointer to SCSI CDB

 * @sgl: struct scatterlist memory for unidirectional mapping

 * @sgl_count: scatterlist count for unidirectional mapping

 * @sgl_bidi: struct scatterlist memory for bidirectional READ mapping

 * @sgl_bidi_count: scatterlist count for bidirectional READ mapping

 * @sgl_prot: struct scatterlist memory protection information

 * @sgl_prot_count: scatterlist count for protection information

 * @gfp: gfp allocation type

 *

 * Returns:

 *	- less than zero to signal failure.

 *	- zero on success.

 *

 * If failure is returned, lio will the callers queue_status to complete

 * the cmd.

	/*

	 * Locate se_lun pointer and attach it to struct se_cmd

	/*

	 * Save pointers for SGLs containing protection information,

	 * if present.

	/*

	 * When a non zero sgl_count has been passed perform SGL passthrough

	 * mapping for pre-allocated fabric memory instead of having target

	 * core perform an internal SGL allocation..

/**

 * target_submit - perform final initialization and submit cmd to LIO core

 * @se_cmd: command descriptor to submit

 *

 * target_submit_prep must have been called on the cmd, and this must be

 * called from process context.

		/*

		 * A work-around for tcm_loop as some userspace code via

		 * scsi-generic do not memset their associated read buffers,

		 * so go ahead and do that here for type non-data CDBs.  Also

		 * note that this is currently guaranteed to be a single SGL

		 * for this case by target core in target_setup_cmd_from_cdb()

		 * -> transport_generic_cmd_sequencer().

	/*

	 * Check if we need to delay processing because of ALUA

	 * Active/NonOptimized primary access state..

/**

 * target_submit_cmd - lookup unpacked lun and submit uninitialized se_cmd

 *

 * @se_cmd: command descriptor to submit

 * @se_sess: associated se_sess for endpoint

 * @cdb: pointer to SCSI CDB

 * @sense: pointer to SCSI sense buffer

 * @unpacked_lun: unpacked LUN to reference for struct se_lun

 * @data_length: fabric expected data transfer length

 * @task_attr: SAM task attribute

 * @data_dir: DMA data direction

 * @flags: flags for command submission from target_sc_flags_tables

 *

 * Task tags are supported if the caller has set @se_cmd->tag.

 *

 * This may only be called from process context, and also currently

 * assumes internal allocation of fabric payload buffer by target-core.

 *

 * It also assumes interal target core SGL memory allocation.

 *

 * This function must only be used by drivers that do their own

 * sync during shutdown and does not use target_stop_session. If there

 * is a failure this function will call into the fabric driver's

 * queue_status with a CHECK_CONDITION.

	/*

	 * We have a ref to the lun at this point, but the cmds could

	 * complete before we unplug, so grab a ref to the se_device so we

	 * can call back into the backend.

 Previous call took what we were queued to submit */

/**

 * target_queue_submission - queue the cmd to run on the LIO workqueue

 * @se_cmd: command descriptor to submit

/**

 * target_submit_tmr - lookup unpacked lun and submit uninitialized se_cmd

 *                     for TMR CDBs

 *

 * @se_cmd: command descriptor to submit

 * @se_sess: associated se_sess for endpoint

 * @sense: pointer to SCSI sense buffer

 * @unpacked_lun: unpacked LUN to reference for struct se_lun

 * @fabric_tmr_ptr: fabric context for TMR req

 * @tm_type: Type of TM request

 * @gfp: gfp type for caller

 * @tag: referenced task tag for TMR_ABORT_TASK

 * @flags: submit cmd flags

 *

 * Callable from all contexts.

	/*

	 * FIXME: Currently expect caller to handle se_cmd->se_tmr_req

	 * allocation failure.

 See target_submit_cmd for commentary */

	/*

	 * For callback during failure handling, push this work off

	 * to process context with TMR_LUN_DOES_NOT_EXIST status.

/*

 * Handle SAM-esque emulation for generic transport request failures.

	/*

	 * For SAM Task Attribute emulation for failed struct se_cmd

		/*

		 * No SENSE Data payload for this case, set SCSI Status

		 * and queue the response to $FABRIC_MOD.

		 *

		 * Uses linux/include/scsi/scsi.h SAM status codes defs

		/*

		 * For UA Interlock Code 11b, a RESERVATION CONFLICT will

		 * establish a UNIT ATTENTION with PREVIOUS RESERVATION

		 * CONFLICT STATUS.

		 *

		 * See spc4r17, section 7.4.6 Control Mode Page, Table 349

		/*

		 * Check for an existing UNIT ATTENTION condition after

		 * target_handle_task_attr() has done SAM task attr

		 * checking, and possibly have already defered execution

		 * out to target_restart_delayed_cmds() context.

	/*

	 * Perform WRITE_INSERT of PI using software emulation when backend

	 * device has PI enabled, if the transport has not already generated

	 * PI using hardware WRITE_INSERT offload.

	/*

	 * Check for the existence of HEAD_OF_QUEUE, and if true return 1

	 * to allow the passed struct se_cmd list of tasks to the front of the list.

		/*

		 * For SIMPLE and UNTAGGED Task Attribute commands

		/*

		 * We will account for this when we dequeue from the delayed

		 * list.

	/*

	 * We may have no non ordered cmds when this function started or we

	 * could have raced with the last simple/head cmd completing, so kick

	 * the delayed handler here.

	/*

	 * Determine if frontend context caller is requesting the stopping of

	 * this command for frontend exceptions.

	 *

	 * If the received CDB has already been aborted stop processing it here.

/*

 * Process all commands up to the last received ORDERED task attribute which

 * requires another blocking boundary

			/*

			 * Check if we started with:

			 * [ordered] [simple] [ordered]

			 * and we are now at the last ordered so we have to wait

			 * for the simple cmd.

/*

 * Called from I/O completion to determine which dormant/delayed

 * and ordered cmds need to have their tasks added to the execution queue.

	/*

	 * If a fabric driver ->write_pending() or ->queue_data_in() callback

	 * has returned neither -ENOMEM or -EAGAIN, assume it's fatal and

	 * the same callbacks should not be retried.  Return CHECK_CONDITION

	 * if a scsi_status is not already set.

	 *

	 * If a fabric driver ->queue_status() has returned non zero, always

	 * keep retrying no matter what..

	/*

	 * Check if we need to send a sense buffer from

	 * the struct se_cmd in question. We do NOT want

	 * to take this path of the IO has been marked as

	 * needing to be treated like a "normal read". This

	 * is the case if it's a tape read, and either the

	 * FM, EOM, or ILI bits are set, but there is no

	 * sense data.

 queue status if not treating this as a normal read */

	/*

	 * -EAGAIN or -ENOMEM signals retry of ->write_pending() and/or

	 * ->queue_data_in() callbacks from new process context.

	 *

	 * Otherwise for other errors, transport_complete_qf() will send

	 * CHECK_CONDITION via ->queue_status() instead of attempting to

	 * retry associated fabric driver data-transfer callbacks.

	/*

	 * Check if we need to move delayed/dormant tasks from cmds on the

	 * delayed execution list after a HEAD_OF_QUEUE or ORDERED Task

	 * Attribute.

	/*

	 * Check to schedule QUEUE_FULL work, or execute an existing

	 * cmd->transport_qf_callback()

	/*

	 * Check if we need to send a sense buffer from

	 * the struct se_cmd in question. We do NOT want

	 * to take this path of the IO has been marked as

	 * needing to be treated like a "normal read". This

	 * is the case if it's a tape read, and either the

	 * FM, EOM, or ILI bits are set, but there is no

	 * sense data.

	/*

	 * Check for a callback, used by amongst other things

	 * XDWRITE_READ_10 and COMPARE_AND_WRITE emulation.

		/*

		 * if this is a READ-type IO, but SCSI status

		 * is set, then skip returning data and just

		 * return the status -- unless this IO is marked

		 * as needing to be treated as a normal read,

		 * in which case we want to go ahead and return

		 * the data. This happens, for example, for tape

		 * reads with the FM, EOM, or ILI bits set, with

		 * no sense data.

		/*

		 * Perform READ_STRIP of PI using software emulation when

		 * backend had PI enabled, if the transport will not be

		 * performing hardware READ_STRIP offload.

		/*

		 * Check if we need to send READ payload for BIDI-COMMAND

	/*

	 * Check for saved t_data_sg that may be used for COMPARE_AND_WRITE

	 * emulation, and free + reset pointers if necessary..

		/*

		 * Release special case READ buffer payload required for

		 * SG_TO_MEM_NOALLOC to function with COMPARE_AND_WRITE

	/*

	 * We need to take into account a possible offset here for fabrics like

	 * tcm_loop who may be using a contig buffer from the SCSI midlayer for

	 * control CDBs passed as SGLs via transport_generic_map_mem_to_cmd()

 >1 page. use vmap */

 convert sg[] to pages[] */

/*

 * Allocate any required resources to execute the command.  For writes we

 * might not have the payload yet, so notify the fabric via a call to

 * ->write_pending instead. Otherwise place it on the execution queue.

	/*

	 * Determine if the TCM fabric module has already allocated physical

	 * memory, and is directly calling transport_generic_map_mem_to_cmd()

	 * beforehand.

		/*

		 * Special case for COMPARE_AND_WRITE with fabrics

		 * using SCF_PASSTHROUGH_SG_TO_MEM_NOALLOC.

	/*

	 * If this command is not a write we can execute it right here,

	 * for write buffers we need to notify the fabric driver first

	 * and let it call back once the write buffers are ready.

	/*

	 * Determine if frontend context caller is requesting the stopping of

	 * this command for frontend exceptions.

/*

 * Call target_put_sess_cmd() and wait until target_release_cmd_kref(@cmd) has

 * finished.

/*

 * This function is called by frontend drivers after processing of a command

 * has finished.

 *

 * The protocol for ensuring that either the regular frontend command

 * processing flow or target_handle_abort() code drops one reference is as

 * follows:

 * - Calling .queue_data_in(), .queue_status() or queue_tm_rsp() will cause

 *   the frontend driver to call this function synchronously or asynchronously.

 *   That will cause one reference to be dropped.

 * - During regular command processing the target core sets CMD_T_COMPLETE

 *   before invoking one of the .queue_*() functions.

 * - The code that aborts commands skips commands and TMFs for which

 *   CMD_T_COMPLETE has been set.

 * - CMD_T_ABORTED is set atomically after the CMD_T_COMPLETE check for

 *   commands that will be aborted.

 * - If the CMD_T_ABORTED flag is set but CMD_T_TAS has not been set

 *   transport_generic_free_cmd() skips its call to target_put_sess_cmd().

 * - For aborted commands for which CMD_T_TAS has been set .queue_status() will

 *   be called and will drop a reference.

 * - For aborted commands for which CMD_T_TAS has not been set .aborted_task()

 *   will be called. target_handle_abort() will drop the final reference.

		/*

		 * Handle WRITE failure case where transport_generic_new_cmd()

		 * has already added se_cmd to state_list, but fabric has

		 * failed command before I/O submission.

/**

 * target_get_sess_cmd - Verify the session is accepting cmds and take ref

 * @se_cmd:	command descriptor to add

 * @ack_kref:	Signal that fabric will perform an ack target_put_sess_cmd()

	/*

	 * Add a second kref if the fabric caller is expecting to handle

	 * fabric acknowledgement that requires two target_put_sess_cmd()

	 * invocations before se_cmd descriptor release.

/**

 * target_put_sess_cmd - decrease the command reference count

 * @se_cmd:	command to drop a reference from

 *

 * Returns 1 if and only if this target_put_sess_cmd() call caused the

 * refcount to drop to zero. Returns zero otherwise.

/*

 * Convert a transport state bitmask into a string. The caller is

 * responsible for freeing the returned pointer.

/**

 * target_stop_session - Stop new IO from being queued on the session.

 * @se_sess:    session to stop

/**

 * target_wait_for_sess_cmds - Wait for outstanding commands

 * @se_sess:    session to wait for active I/O

/*

 * Prevent that new percpu_ref_tryget_live() calls succeed and wait until

 * all references to the LUN have been released. Called during LUN shutdown.

/**

 * transport_wait_for_tasks - set CMD_T_STOP and wait for t_transport_stop_comp

 * @cmd: command to wait on

 LOGICAL UNIT NOT SUPPORTED */

 INVALID COMMAND OPERATION CODE */

 INVALID COMMAND OPERATION CODE */

 INVALID FIELD IN CDB */

 BUS DEVICE RESET FUNCTION OCCURRED */

 WRITE ERROR */

 NOT ENOUGH UNSOLICITED DATA */

 INVALID FIELD IN CDB */

 INVALID FIELD IN PARAMETER LIST */

 TOO MANY TARGET DESCRIPTORS */

 UNSUPPORTED TARGET DESCRIPTOR TYPE CODE */

 TOO MANY SEGMENT DESCRIPTORS */

 UNSUPPORTED SEGMENT DESCRIPTOR TYPE CODE */

 PARAMETER LIST LENGTH ERROR */

 WRITE ERROR */

 UNEXPECTED_UNSOLICITED_DATA */

 PROTOCOL SERVICE CRC ERROR */

 N/A */

 READ ERROR */

 FAILED RETRANSMISSION REQUEST */

 WRITE PROTECTED */

 LOGICAL BLOCK ADDRESS OUT OF RANGE */

 MISCOMPARE DURING VERIFY OPERATION */

 LOGICAL BLOCK GUARD CHECK FAILED */

 LOGICAL BLOCK APPLICATION TAG CHECK FAILED */

 LOGICAL BLOCK REFERENCE TAG CHECK FAILED */

 COPY TARGET DEVICE NOT REACHABLE */

		/*

		 * Returning ILLEGAL REQUEST would cause immediate IO errors on

		 * Solaris initiators.  Returning NOT READY instead means the

		 * operations will be retried a finite number of times and we

		 * can survive intermittent errors.

 LOGICAL UNIT COMMUNICATION FAILURE */

		/*

		 * From spc4r22 section5.7.7,5.7.8

		 * If a PERSISTENT RESERVE OUT command with a REGISTER service action

		 * or a REGISTER AND IGNORE EXISTING KEY service action or

		 * REGISTER AND MOVE service actionis attempted,

		 * but there are insufficient device server resources to complete the

		 * operation, then the command shall be terminated with CHECK CONDITION

		 * status, with the sense key set to ILLEGAL REQUEST,and the additonal

		 * sense code set to INSUFFICIENT REGISTRATION RESOURCES.

 INSUFFICIENT REGISTRATION RESOURCES */

 INVALID FIELD IN COMMAND INFORMATION UNIT */

/**

 * translate_sense_reason - translate a sense reason into T10 key, asc and ascq

 * @cmd: SCSI command in which the resulting sense buffer or SCSI status will

 *   be stored.

 * @reason: LIO sense reason code. If this argument has the value

 *   TCM_CHECK_CONDITION_UNIT_ATTENTION, try to dequeue a unit attention. If

 *   dequeuing a unit attention fails due to multiple commands being processed

 *   concurrently, set the command status to BUSY.

 *

 * Return: 0 upon success or -EINVAL if the sense buffer is too small.

/**

 * target_send_busy - Send SCSI BUSY status back to the initiator

 * @cmd: SCSI command for which to send a BUSY reply.

 *

 * Note: Only call this function if target_submit_cmd*() failed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_pscsi.c

 *

 * This file contains the generic target mode <-> Linux SCSI subsystem plugin.

 *

 * (c) Copyright 2003-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

/*	pscsi_attach_hba():

 *

 * 	pscsi_get_sh() used scsi_host_lookup() to locate struct Scsi_Host.

 *	from the passed SCSI Host ID.

	/*

	 * Release the struct Scsi_Host

	/*

	 * Otherwise, locate struct Scsi_Host from the original passed

	 * pSCSI Host ID and enable for phba mode

 12 bytes */

	/*

	 * If MODE_SENSE still returns zero, set the default value to 1024.

	/*

	 * Use sdev->inquiry data from drivers/scsi/scsi_scan.c:scsi_add_lun()

 Query VPD */

 Unit Serial Number */

 Query VPD */

 Device Identifier */

 Grab a pointer to the Identification descriptor */

	/*

	 * Setup our standard INQUIRY info into se_dev->t10_wwn

	/*

	 * Locate VPD WWN Information used for various purposes within

	 * the Storage Engine.

		/*

		 * If VPD Unit Serial returned GOOD status, try

		 * VPD Device Identification page (0x83).

	/*

	 * For TYPE_TAPE, attempt to determine blocksize with MODE_SENSE.

/*

 * Called with struct Scsi_Host->host_lock called.

	/*

	 * Claim exclusive struct block_device access to struct scsi_device

	 * for TYPE_DISK and TYPE_ZBC using supplied udev_path

/*

 * Called with struct Scsi_Host->host_lock called.

	/*

	 * If not running in PHV_LLD_SCSI_HOST_NO mode, locate the

	 * struct Scsi_Host we will need to bring the TCM/pSCSI object online

		/*

		 * For the newer PHV_VIRTUAL_HOST_ID struct scsi_device

		 * reference, we enforce that udev_path has been set

		/*

		 * If no scsi_host_id= was passed for PHV_VIRTUAL_HOST_ID,

		 * use the original TCM hba ID to reference Linux/SCSI Host No

		 * and enable for PHV_LLD_SCSI_HOST_NO mode.

		/*

		 * Functions will release the held struct scsi_host->host_lock

		 * before calling calling pscsi_add_device_to_list() to register

		 * struct scsi_device with target_core_mod.

		/*

		 * Release exclusive pSCSI internal struct block_device claim for

		 * struct scsi_device with TYPE_DISK or TYPE_ZBC

		 * from pscsi_create_type_disk()

		/*

		 * For HBA mode PHV_LLD_SCSI_HOST_NO, release the reference

		 * to struct Scsi_Host now.

	/*

	 * Special case for REPORT_LUNs handling where pscsi_plugin_task has

	 * not been allocated because TCM is handling the emulation directly.

	/*

	 * Hack to make sure that Write-Protect modepage is set if R/O mode is

	 * forced.

 XXX: TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE */

	/*

	 * Hack to correctly obtain the initiator requested blocksize for

	 * TYPE_TAPE.  Since this value is dependent upon each tape media,

	 * struct scsi_device->sector_size will not contain the correct value

	 * by default, so we go ahead and set it so

	 * TRANSPORT(dev)->get_blockdev() returns the correct value to the

	 * storage engine.

		/*

		 * check for TAPE device reads with

		 * FM/EOM/ILI set, so that we can get data

		 * back despite framework assumption that a

		 * check condition means there is no data

			/*

			 * is sense data valid, fixed format,

			 * and have FM, EOM, or ILI set?

 valid, fixed format */

 FM, EOM, or ILI */

 key==NO_SENSE */

	/*

	 * Use bio_malloc() following the comment in for bio -> struct request

	 * in block/blk-core.c:blk_make_request()

		/*

		 * We only have one page of data in each sg element,

		 * we can not cross a page boundary.

				/*

				 * Calls bio_kmalloc() and sets bio->bi_end_io()

				/*

				 * Clear the pointer so that another bio will

				 * be allocated with pscsi_get_bio() above.

	/*

	 * Dynamically alloc cdb space, since it may be larger than

	 * TCM_MAX_COMMAND_SIZE

/*	pscsi_get_device_type():

 *

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_device.c (based on iscsi_target_device.c)

 *

 * This file contains the TCM Virtual Device and Disk Transport

 * agnostic related functions.

 *

 * (c) Copyright 2003-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

 not static, needed by tpg.c */

		/*

		 * Use the se_portal_group->tpg_virt_lun0 to allow for

		 * REPORT_LUNS, et al to be returned when no active

		 * MappedLUN=0 exists for this Initiator Port.

		/*

		 * Force WRITE PROTECT for virtual LUN 0

	/*

	 * RCU reference protected by percpu se_lun->lun_ref taken above that

	 * must drop to zero (including initial reference) before this se_lun

	 * pointer can be kfree_rcu() by the final se_lun->lun_group put via

	 * target_core_fabric_configfs.c:target_fabric_port_release

/*

 * This function is called from core_scsi3_emulate_pro_register_and_move()

 * and core_scsi3_decode_spec_i_port(), and will increment &deve->pr_kref

 * when a matching rtpi is found.

/*

 * Called with rcu_read_lock or nacl->device_list_lock held.

	/*

	 * rcu_dereference_raw protected by se_lun->lun_group symlink

	 * reference to se_device->dev_group.

	/*

	 * If the MappedLUN entry is being disabled, the entry in

	 * lun->lun_deve_list must be removed now before clearing the

	 * struct se_dev_entry pointers below as logic in

	 * core_alua_do_transition_tg_pt() depends on these being present.

	 *

	 * deve->se_lun_acl will be NULL for demo-mode created LUNs

	 * that have not been explicitly converted to MappedLUNs ->

	 * struct se_lun_acl, but we remove deve->lun_link from

	 * lun->lun_deve_list. This also means that active UAs and

	 * NodeACL context specific PR metadata for demo-mode

	 * MappedLUN *deve will be released below..

	/*

	 * Disable struct se_dev_entry LUN ACL mapping

	/*

	 * Before firing off RCU callback, wait for any in process SPEC_I_PT=1

	 * or REGISTER_AND_MOVE PR operation to complete.

/*      core_clear_lun_from_tpg():

 *

 *

	/*

	 * Allocate the next RELATIVE TARGET PORT IDENTIFIER for this struct se_device

	 * Here is the table from spc4r17 section 7.7.3.8.

	 *

	 *    Table 473 -- RELATIVE TARGET PORT IDENTIFIER field

	 *

	 * Code      Description

	 * 0h        Reserved

	 * 1h        Relative port 1, historically known as port A

	 * 2h        Relative port 2, historically known as port B

	 * 3h to FFFFh    Relative port 3 through 65 535

		/*

		 * Make sure RELATIVE TARGET PORT IDENTIFIER is unique

		 * for 16-bit wrap..

	/*

	 * Limit max_sectors to a PAGE_SIZE aligned value for modern

	 * transport_allocate_data_tasks() operation.

	/*

	 * Update LUN maps for dynamically added initiators when

	 * generate_node_acl is enabled.

/*      core_dev_del_lun():

 *

 *

	/*

	 * rcu_dereference_raw protected by se_lun->lun_group symlink

	 * reference to se_device->dev_group.

	/*

	 * Check to see if there are any existing persistent reservation APTPL

	 * pre-registrations that need to be enabled for this LUN ACL..

	/*

	 * Print Linux/SCSI style INQUIRY formatting to the kernel ring buffer

	/*

	 * Use OpenFabrics IEEE Company ID: 00 14 05

 Preload the default INQUIRY const values */

/*

 * Check if the underlying struct block_device request_queue supports

 * the QUEUE_FLAG_DISCARD bit for UNMAP/WRITE_SAME in SCSI + TRIM

 * in ATA and we need to set TPE=1

	/*

	 * Currently hardcoded to 1 in Linux/SCSI code..

/*

 * Convert from blocksize advertised to the initiator to the 512 byte

 * units unconditionally used by the Linux block layer.

	/*

	 * We add the device early to the idr, so it can be used

	 * by backend modules during configuration. We do not want

	 * to allow other callers to access partially setup devices,

	 * so we skip them here.

/**

 * target_for_each_device - iterate over configured devices

 * @fn: iterator function

 * @data: pointer to data that will be passed to fn

 *

 * fn must return 0 to continue looping over devices. non-zero will break

 * from the loop and return that value to the caller.

	/*

	 * Add early so modules like tcmu can use during its

	 * configuration.

	/*

	 * Use cyclic to try and avoid collisions with devices

	 * that were recently removed.

	/*

	 * XXX: there is not much point to have two different values here..

	/*

	 * Align max_hw_sectors down to PAGE_SIZE I/O transfers

	/*

	 * Setup work_queue for QUEUE_FULL

/*

 * Common CDB parsing for kernel and user passthrough.

	/*

	 * For REPORT LUNS we always need to emulate the response, for everything

	 * else, pass it up.

	/*

	 * With emulate_pr disabled, all reservation requests should fail,

	 * regardless of whether or not TRANSPORT_FLAG_PASSTHROUGH_PGR is set.

	/*

	 * For PERSISTENT RESERVE IN/OUT, RELEASE, and RESERVE we need to

	 * emulate the response, since tcmu does not have the information

	 * required to process these commands.

 Set DATA_CDB flag for ops that should have it */

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_stat.c

 *

 * Modern ConfigFS group context specific statistics based on original

 * target_core_mib.c code

 *

 * (c) Copyright 2006-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

/*

 * SCSI Device Table

/*

 * SCSI Target Device Table

/*

 * SCSI Logical Unit Table

 FIXME: scsiLuDefaultLun */

 scsiLuWwnName */

 scsiLuPeripheralType */

 scsiLuStatus */

 scsiLuState */

 scsiLuNumCommands */

 scsiLuReadMegaBytes */

 scsiLuWrittenMegaBytes */

 scsiLuInResets */

 FIXME: scsiLuOutTaskSetFullStatus */

 FIXME: scsiLuHSInCommands */

 scsiLuCreationTime */

/*

 * Called from target_core_configfs.c:target_core_make_subdev() to setup

 * the target statistics groups + configfs CITs located in target_core_stat.c

/*

 * SCSI Port Table

 FIXME: scsiPortBusyStatuses  */

/*

 * SCSI Target Port Table

 FIXME: scsiTgtPortHsInCommands */

/*

 * SCSI Transport Table

 scsiTransportType */

 scsiTransportDevName */

/*

 * Called from target_core_fabric_configfs.c:target_fabric_make_lun() to setup

 * the target port statistics groups + configfs CITs located in target_core_stat.c

/*

 * SCSI Authorized Initiator Table

 scsiInstIndex */

 scsiDeviceIndex */

 scsiAuthIntrTgtPortIndex */

 scsiAuthIntrIndex */

 scsiAuthIntrDevOrPort */

 scsiAuthIntrName */

 FIXME: scsiAuthIntrLunMapIndex */

 scsiAuthIntrAttachedTimes */

 scsiAuthIntrOutCommands */

 scsiAuthIntrReadMegaBytes */

 scsiAuthIntrWrittenMegaBytes */

 FIXME: scsiAuthIntrHSOutCommands */

 scsiAuthIntrLastCreation */

 FIXME: scsiAuthIntrRowStatus */

/*

 * SCSI Attached Initiator Port Table

 scsiInstIndex */

 scsiDeviceIndex */

 scsiPortIndex */

 scsiAttIntrPortIndex */

 scsiAttIntrPortAuthIntrIdx */

 scsiAttIntrPortName+scsiAttIntrPortIdentifier */

/*

 * Called from target_core_fabric_configfs.c:target_fabric_make_mappedlun() to setup

 * the target MappedLUN statistics groups + configfs CITs located in target_core_stat.c

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_hba.c

 *

 * This file contains the TCM HBA Transport related functions.

 *

 * (c) Copyright 2003-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

			/*

			 * Wait for any outstanding backend driver ->rcu_head

			 * callbacks to complete post TBO->free_device() ->

			 * call_rcu(), before allowing backend driver module

			 * unload of target_backend_ops->owner to proceed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_iblock.c

 *

 * This file contains the Storage Engine  <-> Linux BlockIO transport

 * specific functions.

 *

 * (c) Copyright 2003-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

 max # of bios to submit at a time */

	/*

	 * Enable write same emulation for IBLOCK and use 0xFFFF as

	 * the smaller WRITE_SAME(10) only has a two-byte block count.

	/*

	 * Each se_device has a per cpu work this can be run from. We

	 * shouldn't have multiple threads on the same cpu calling this

	 * at the same time.

		/*

		 * Bump the ib_bio_err_cnt and release bio.

	/*

	 * Only allocate as many vector entries as the bio code allows us to,

	 * we'll loop later on until we have handled the whole request.

	/*

	 * The block layer handles nested plugs, so just plug/unplug to handle

	 * fabric drivers that didn't support batching and multi bio cmds.

/*

 * Implement SYCHRONIZE CACHE.  Note that we can't handle lba ranges and must

 * always flush the whole cache.

	/*

	 * If the Immediate bit is set, queue up the GOOD response

	 * for this SYNCHRONIZE_CACHE op.

	/*

	 * Fall back to block_execute_write_same() slow-path if

	 * incoming WRITE_SAME payload does not contain zeros.

 Always in 512 byte units for Linux/Block */

 virtual start sector must be in integrity interval units */

		/*

		 * Force writethrough using REQ_FUA if a volatile write cache

		 * is not enabled, or if initiator set the Force Unit Access bit.

		/*

		 * XXX: if the length the device accepts is shorter than the

		 *	length of the S/G list entry this will cause and

		 *	endless loop.  Better hope no driver uses huge pages.

 Always in 512 byte units for Linux/Block */

 convert offset-bytes to offset-lbas */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SCSI Block Commands (SBC) parsing and emulation.

 *

 * (c) Copyright 2002-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

	/*

	 * SBC-2 says:

	 *   If the PMI bit is set to zero and the LOGICAL BLOCK

	 *   ADDRESS field is not set to zero, the device server shall

	 *   terminate the command with CHECK CONDITION status with

	 *   the sense key set to ILLEGAL REQUEST and the additional

	 *   sense code set to INVALID FIELD IN CDB.

	 *

	 * In SBC-3, these fields are obsolete, but some SCSI

	 * compliance tests actually check this, so we might as well

	 * follow SBC-2.

	/*

	 * Set P_TYPE and PROT_EN bits for DIF support

		/*

		 * Only override a device's pi_prot_type if no T10-PI is

		 * available, and sess_prot_type has been explicitly enabled.

	/*

	 * Set Thin Provisioning Enable bit following sbc3r22 in section

	 * READ CAPACITY (16) byte 14 if emulate_tpu or emulate_tpws is enabled.

		/*

		 * LBPRZ signifies that zeroes will be read back from an LBA after

		 * an UNMAP or WRITE SAME w/ unmap bit (sbc3r36 5.16.2)

	/*

	 * See sbc3r36 section 5.25

	 * Immediate bit should be set since there is nothing to complete

	 * POWER CONDITION MODIFIER 0h

	/*

	 * See sbc3r36 section 5.25

	 * POWER CONDITION 0h START_VALID - process START and LOEJ

	/*

	 * See sbc3r36 section 5.25

	 * LOEJ 0h - nothing to load or unload

	 * START 1h - we are ready

 WRITE_SAME_32 via VARIABLE_LENGTH_CMD */

	/*

	 * Use the explicit range when non zero is supplied, otherwise calculate

	 * the remaining range based on ->get_blocks() - starting LBA.

	/*

	 * Use 8-bit sector value.  SBC-3 says:

	 *

	 *   A TRANSFER LENGTH field set to zero specifies that 256

	 *   logical blocks shall be written.  Any other value

	 *   specifies the number of logical blocks that shall be

	 *   written.

/*

 * Used for VARIABLE_LENGTH_CDB WRITE_32 and READ_32 variants

/*

 * For VARIABLE_LENGTH_CDB w/ 32 byte extended CDBs

	/*

	 * Sanity check for LBA wrap and request past end of device.

 We always have ANC_SUP == 0 so setting ANCHOR is always an error */

	/*

	 * Special case for WRITE_SAME w/ UNMAP=1 that ends up getting

	 * translated into block discard requests within backend code.

	/*

	 * From sbc3r22.pdf section 5.48 XDWRITEREAD (10) command

	 *

	 * 1) read the specified logical block(s);

	 * 2) transfer logical blocks from the data-out buffer;

	 * 3) XOR the logical blocks transferred from the data-out buffer with

	 *    the logical blocks read, storing the resulting XOR data in a buffer;

	 * 4) if the DISABLE WRITE bit is set to zero, then write the logical

	 *    blocks transferred from the data-out buffer; and

	 * 5) transfer the resulting XOR data to the data-in buffer.

	/*

	 * Copy the scatterlist WRITE buffer located at cmd->t_data_sg

	 * into the locally allocated *buf

	/*

	 * Now perform the XOR against the BIDI read memory located at

	 * cmd->t_mem_bidi_list

	/*

	 * Unlock ->caw_sem originally obtained during sbc_compare_and_write()

	 * before the original READ I/O submission.

/*

 * compare @cmp_len bytes of @read_sgl with @cmp_sgl. On miscompare, fill

 * @miscmp_off and return TCM_MISCOMPARE_VERIFY.

	/*

	 * Compare SCSI READ payload against verify payload

	/*

	 * Handle early failure in transport_generic_request_failure(),

	 * which will not have taken ->caw_sem yet..

	/*

	 * Handle special case for zero-length COMPARE_AND_WRITE

	/*

	 * Immediately exit + release dev->caw_sem if command has already

	 * been failed with a non-zero SCSI status.

		/*

		 * SBC-4 r15: 5.3 COMPARE AND WRITE command

		 * In the sense data (see 4.18 and SPC-5) the offset from the

		 * start of the Data-Out Buffer to the first byte of data that

		 * was not equal shall be reported in the INFORMATION field.

	/*

	 * Currently assumes NoLB=1 and SGLs are PAGE_SIZE..

	/*

	 * Save the original SGL + nents values before updating to new

	 * assignments, to be released in transport_free_pages() ->

	 * transport_reset_sgl_orig()

	/*

	 * Now reset ->execute_cmd() to the normal sbc_execute_rw() handler

	 * for submitting the adjusted SGL to write instance user-data.

	/*

	 * In the MISCOMPARE or failure case, unlock ->caw_sem obtained in

	 * sbc_compare_and_write() before the original READ I/O submission.

	/*

	 * Submit the READ first for COMPARE_AND_WRITE to perform the

	 * comparision using SGLs at cmd->t_bidi_data_sg..

	/*

	 * Reset cmd->data_length to individual block_size in order to not

	 * confuse backend drivers that depend on this value matching the

	 * size of the I/O being submitted.

	/*

	 * Unlock of dev->caw_sem to occur in compare_and_write_callback()

	 * upon MISCOMPARE, or in compare_and_write_done() upon completion

	 * of WRITE instance user-data.

		/*

		 * See if the fabric supports T10-PI, and the session has been

		 * configured to allow export PROTECT=1 feature bit with backend

		 * devices that don't support T10-PI.

	/**

	 * In case protection information exists over the wire

	 * we modify command data length to describe pure data.

	 * The actual transfer length is data length + protection

	 * length

 see explanation in spc_emulate_modesense */

		/*

		 * Setup BIDI XOR callback to be run after I/O completion.

			/*

			 * Use WRITE_32 and READ_32 opcodes for the emulated

			 * XDWRITE_READ_32 logic.

			/*

			 * Setup BIDI XOR callback to be run during after I/O

			 * completion.

		/*

		 * Currently enforce COMPARE_AND_WRITE for a single sector

		/*

		 * Double size because we have two buffers, note that

		 * zero is not an error..

		/*

		 * Follow sbcr26 with WRITE_SAME (10) and check for the existence

		 * of byte 1 bit 3 UNMAP instead of original reserved field

		/*

		 * There are still clients out there which use these old SCSI-2

		 * commands. This mainly happens when running VMs with legacy

		 * guest systems, connected via SCSI command pass-through to

		 * iSCSI targets. Make them happy and return status GOOD.

 reject any command that we don't have a handler for */

 We never set ANC_SUP */

 First UNMAP block descriptor starts at 8 byte offset */

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename: target_core_ua.c

 *

 * This file contains logic for SPC-3 Unit Attention emulation

 *

 * (c) Copyright 2009-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

	/*

	 * From sam4r14, section 5.14 Unit attention condition:

	 *

	 * a) if an INQUIRY command enters the enabled command state, the

	 *    device server shall process the INQUIRY command and shall neither

	 *    report nor clear any unit attention condition;

	 * b) if a REPORT LUNS command enters the enabled command state, the

	 *    device server shall process the REPORT LUNS command and shall not

	 *    report any unit attention condition;

	 * e) if a REQUEST SENSE command enters the enabled command state while

	 *    a unit attention condition exists for the SCSI initiator port

	 *    associated with the I_T nexus on which the REQUEST SENSE command

	 *    was received, then the device server shall process the command

	 *    and either:

		/*

		 * Do not report the same UNIT ATTENTION twice..

		/*

		 * Attach the highest priority Unit Attention to

		 * the head of the list following sam4r14,

		 * Section 5.14 Unit Attention Condition:

		 *

		 * POWER ON, RESET, OR BUS DEVICE RESET OCCURRED highest

		 * POWER ON OCCURRED or

		 * DEVICE INTERNAL RESET

		 * SCSI BUS RESET OCCURRED or

		 * MICROCODE HAS BEEN CHANGED or

		 * protocol specific

		 * BUS DEVICE RESET FUNCTION OCCURRED

		 * I_T NEXUS LOSS OCCURRED

		 * COMMANDS CLEARED BY POWER LOSS NOTIFICATION

		 * all others                                    Lowest

		 *

		 * Each of the ASCQ codes listed above are defined in

		 * the 29h ASC family, see spc4r17 Table D.1

			/*

			 * Incoming Family 29h ASCQ codes will override

			 * Family 2AHh ASCQ codes for Unit Attention condition.

/*

 * Dequeue a unit attention from the unit attention list. This function

 * returns true if the dequeuing succeeded and if *@key, *@asc and *@ascq have

 * been set.

 LOGICAL UNIT NOT SUPPORTED */

	/*

	 * The highest priority Unit Attentions are placed at the head of the

	 * struct se_dev_entry->ua_list, and will be returned in CHECK_CONDITION +

	 * sense data for the received CDB.

		/*

		 * For ua_intlck_ctrl code not equal to 00b, only report the

		 * highest priority UNIT_ATTENTION and ASC/ASCQ without

		 * clearing it.

		/*

		 * Otherwise for the default 00b, release the UNIT ATTENTION

		 * condition.  Return the ASC/ASCQ of the highest priority UA

		 * (head of the list) in the outgoing CHECK_CONDITION + sense.

	/*

	 * The highest priority Unit Attentions are placed at the head of the

	 * struct se_dev_entry->ua_list.  The First (and hence highest priority)

	 * ASC/ASCQ will be returned in REQUEST_SENSE payload data for the

	 * matching struct se_lun.

	 *

	 * Once the returning ASC/ASCQ values are set, we go ahead and

	 * release all of the Unit Attention conditions for the associated

	 * struct se_lun.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_configfs.c

 *

 * This file contains ConfigFS logic for the Generic Target Engine project.

 *

 * (c) Copyright 2008-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

 * based on configfs Copyright (C) 2005 Oracle.  All rights reserved.

 *

/*

 * Attributes for /sys/kernel/config/target/

 validate new db root before accepting it */

/*

 * Called from struct target_core_group_ops->make_group()

		/*

		 * Below are some hardcoded request_module() calls to automatically

		 * local fabric modules when the following is called:

		 *

		 * mkdir -p /sys/kernel/config/target/$MODULE_NAME

		 *

		 * Note that this does not limit which TCM fabric module can be

		 * registered, but simply provids auto loading logic for modules with

		 * mkdir(2) system calls with known TCM fabric modules.

			/*

			 * Automatically load the LIO Target fabric module when the

			 * following is called:

			 *

			 * mkdir -p $CONFIGFS/target/iscsi

			/*

			 * Automatically load the tcm_loop fabric module when the

			 * following is called:

			 *

			 * mkdir -p $CONFIGFS/target/loopback

	/*

	 * On a successful target_core_get_fabric() look, the returned

	 * struct target_fabric_configfs *tf will contain a usage reference.

/*

 * Called from struct target_core_group_ops->drop_item()

/*

 * All item attributes appearing in /sys/kernel/target/ appear here.

/*

 * Provides Fabrics Groups and Item Attributes for /sys/kernel/config/target/

/*##############################################################################

// Start functions called by external Target Fabrics Modules

############################################################################*/

	/*

	 * We at least require tfo->fabric_make_wwn(), tfo->fabric_drop_wwn()

	 * tfo->fabric_make_tpg() and tfo->fabric_drop_tpg() in

	 * target_core_fabric_configfs.c WWN+TPG group context code.

			/*

			 * Wait for any outstanding fabric se_deve_entry->rcu_head

			 * callbacks to complete post kfree_rcu(), before allowing

			 * fabric driver unload of TFO->module to proceed.

/*##############################################################################

// Stop functions called by external Target Fabrics Modules

############################################################################*/

 Start functions for struct config_item_type tb_dev_attrib_cit */

	/*

	 * XXX We can't use sizeof(dev->t10_wwn.model) (INQUIRY_MODEL_LEN + 1)

	 * here without potentially breaking existing setups, so continue to

	 * truncate one byte shorter than what can be carried in INQUIRY.

	/*

	 * We expect this value to be non-zero when generic Block Layer

	 * Discard supported is detected iblock_create_virtdevice().

	/*

	 * We expect this value to be non-zero when generic Block Layer

	 * Discard supported is detected iblock_create_virtdevice().

 0 is only allowed value for non-supporting backends */

 always zero, but attr needs to remain RW to avoid userspace breakage */

	/*

	 * We expect this value to be non-zero when generic Block Layer

	 * Discard supported is detected iblock_configure_device().

/*

 * Note, this can only be called on unexported SE Device Object.

/*

 * dev_attrib attributes for devices using the target core SBC/SPC

 * interpreter.  Any backend using spc_parse_cdb should be using

 * these.

/*

 * Minimal dev_attrib attributes for devices passing through CDBs.

 * In this case we only provide a few read-only attributes for

 * backwards compatibility.

/*

 * pr related dev_attrib attributes for devices passing through CDBs,

 * but allowing in core pr emulation.

 End functions for struct config_item_type tb_dev_attrib_cit */

  Start functions for struct config_item_type tb_dev_wwn_cit */

	/*

	 * SPC 4.3.1:

	 * ASCII data fields shall contain only ASCII printable characters

	 * (i.e., code values 20h to 7Eh) and may be terminated with one or

	 * more ASCII null (00h) characters.

/*

 * STANDARD and VPD page 0x83 T10 Vendor Identification

 +2 to allow for a trailing (stripped) '\n' and null-terminator */

 Strip any newline added from userspace. */

	/*

	 * Check to see if any active exports exist.  If they do exist, fail

	 * here as changing this information on the fly (underneath the

	 * initiator side OS dependent multipath code) could cause negative

	 * effects.

 +2 to allow for a trailing (stripped) '\n' and null-terminator */

 Strip any newline added from userspace. */

	/*

	 * Check to see if any active exports exist.  If they do exist, fail

	 * here as changing this information on the fly (underneath the

	 * initiator side OS dependent multipath code) could cause negative

	 * effects.

 +2 to allow for a trailing (stripped) '\n' and null-terminator */

 Strip any newline added from userspace. */

	/*

	 * Check to see if any active exports exist.  If they do exist, fail

	 * here as changing this information on the fly (underneath the

	 * initiator side OS dependent multipath code) could cause negative

	 * effects.

	/*

	 * The IEEE COMPANY_ID field should contain a 24-bit canonical

	 * form OUI assigned by the IEEE.

	/*

	 * Check to see if any active exports exist. If they do exist, fail

	 * here as changing this information on the fly (underneath the

	 * initiator side OS dependent multipath code) could cause negative

	 * effects.

/*

 * VPD page 0x80 Unit serial

	/*

	 * If Linux/SCSI subsystem_api_t plugin got a VPD Unit Serial

	 * from the struct scsi_device level firmware, do not allow

	 * VPD Unit Serial to be emulated.

	 *

	 * Note this struct scsi_device could also be emulating VPD

	 * information from its drivers/scsi LLD.  But for now we assume

	 * it is doing 'the right thing' wrt a world wide unique

	 * VPD Unit Serial Number that OS dependent multipath can depend on.

	/*

	 * Check to see if any active $FABRIC_MOD exports exist.  If they

	 * do exist, fail here as changing this information on the fly

	 * (underneath the initiator side OS dependent multipath code)

	 * could cause negative effects.

	/*

	 * This currently assumes ASCII encoding for emulated VPD Unit Serial.

	 *

	 * Also, strip any newline added from the userspace

	 * echo $UUID > $TARGET/$HBA/$STORAGE_OBJECT/wwn/vpd_unit_serial

/*

 * VPD page 0x83 Protocol Identifier

/*

 * Generic wrapper for dumping VPD identifiers by association.

 VPD page 0x83 Association: Logical Unit */

 VPD page 0x83 Association: Target Port */

 VPD page 0x83 Association: SCSI Target Device */

  End functions for struct config_item_type tb_dev_wwn_cit */

  Start functions for struct config_item_type tb_dev_pr_cit */

		/*

		 * PR APTPL Metadata for Reservation

		/*

		 * PR APTPL Metadata for Target Port

  End functions for struct config_item_type tb_dev_pr_cit */

  Start functions for struct config_item_type tb_dev_cit */

	/*

	 * Any ALUA logical unit alias besides "NULL" means we will be

	 * making a new group association.

		/*

		 * core_alua_get_lu_gp_by_name() will increment reference to

		 * struct t10_alua_lu_gp.  This reference is released with

		 * core_alua_get_lu_gp_by_name below().

		/*

		 * Clearing an existing lu_gp association, and replacing

		 * with NULL

		/*

		 * Removing existing association of lu_gp_mem with lu_gp

	/*

	 * Associate lu_gp_mem with lu_gp_new.

/*

 * Used in target_core_fabric_configfs.c to verify valid se_device symlink

 * within target_fabric_port_link()

 End functions for struct config_item_type tb_dev_cit */

 Start functions for struct config_item_type target_core_alua_lu_gp_cit */

 Extra byte for NULL terminator */

 End functions for struct config_item_type target_core_alua_lu_gp_cit */

 Start functions for struct config_item_type target_core_alua_lu_gps_cit */

	/*

	 * core_alua_free_lu_gp() is called from target_core_alua_lu_gp_ops->release()

	 * -> target_core_alua_lu_gp_release()

 End functions for struct config_item_type target_core_alua_lu_gps_cit */

 Start functions for struct config_item_type target_core_alua_tg_pt_gp_cit */

 LBA DEPENDENT is only allowed with implicit ALUA */

 Extra byte for NULL terminator */

 End functions for struct config_item_type target_core_alua_tg_pt_gp_cit */

 Start functions for struct config_item_type tb_alua_tg_pt_gps_cit */

	/*

	 * core_alua_free_tg_pt_gp() is called from target_core_alua_tg_pt_gp_ops->release()

	 * -> target_core_alua_tg_pt_gp_release().

 End functions for struct config_item_type tb_alua_tg_pt_gps_cit */

 Start functions for struct config_item_type target_core_alua_cit */

/*

 * target_core_alua_cit is a ConfigFS group that lives under

 * /sys/kernel/config/target/core/alua.  There are default groups

 * core/alua/lu_gps and core/alua/tg_pt_gps that are attached to

 * target_core_alua_cit in target_core_init_configfs() below.

 End functions for struct config_item_type target_core_alua_cit */

 Start functions for struct config_item_type tb_dev_stat_cit */

 End functions for struct config_item_type tb_dev_stat_cit */

 Start functions for struct config_item_type target_core_hba_cit */

	/*

	 * Add core/$HBA/$DEV/alua/default_tg_pt_gp

	/*

	 * Add core/$HBA/$DEV/statistics/ default groups

	/*

	 * core_alua_free_tg_pt_gp() is called from ->default_tg_pt_gp

	 * directly from target_core_alua_tg_pt_gp_release().

	/*

	 * se_dev is released from target_core_dev_item_ops->release()

	/*

	 * Special case for subsystem plugins that have "_" in their names.

	 * Namely rd_direct and rd_mcp..

 Terminate for *se_plugin_str */

 Skip to start of plugin dependent ID */

 Terminate for *se_plugin_str */

 Skip to start of plugin dependent ID */

	/*

	 * Load up TCM subsystem plugins if they have not already been loaded.

	/*

	 * core_delete_hba() is called from target_core_hba_item_ops->release()

	 * -> target_core_hba_release()

 Stop functions for struct config_item_type target_core_hba_cit */

	/*

	 * Create $CONFIGFS/target/core default group for HBA <-> Storage Object

	 * and ALUA Logical Unit Group and Target Port Group infrastructure.

	/*

	 * Create ALUA infrastructure under /sys/kernel/config/target/core/alua/

	/*

	 * Add ALUA Logical Unit Group and Target Port Group ConfigFS

	 * groups under /sys/kernel/config/target/core/alua/

	/*

	 * Add core/alua/lu_gps/default_lu_gp

	/*

	 * Register the target_core_mod subsystem with configfs.

	/*

	 * Register built-in RAMDISK subsystem logic for virtual LUN 0

	/*

	 * We expect subsys->su_group.default_groups to be released

	 * by configfs subsystem provider logic..

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_alua.c

 *

 * This file contains SPC-3 compliant asymmetric logical unit assigntment (ALUA)

 *

 * (c) Copyright 2009-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

/*

 * REPORT REFERRALS

 *

 * See sbc3r35 section 5.23

	/*

	 * Set the RETURN DATA LENGTH set in the header of the DataIN Payload

/*

 * REPORT_TARGET_PORT_GROUPS

 *

 * See spc4r17 section 6.27

	/*

	 * Skip over RESERVED area to first Target port group descriptor

	 * depending on the PARAMETER DATA FORMAT type..

		/*

		 * Check if the Target port group and Target port descriptor list

		 * based on tg_pt_gp_members count will fit into the response payload.

		 * Otherwise, bump rd_len to let the initiator know we have exceeded

		 * the allocation length and the response is truncated.

		/*

		 * PREF: Preferred target port bit, determine if this

		 * bit should be set for port group.

		/*

		 * Set the ASYMMETRIC ACCESS State

		/*

		 * Set supported ASYMMETRIC ACCESS State bits

		/*

		 * TARGET PORT GROUP

 Skip over Reserved */

		/*

		 * STATUS CODE

		/*

		 * Vendor Specific field

		/*

		 * TARGET PORT COUNT

			/*

			 * Start Target Port descriptor format

			 *

			 * See spc4r17 section 6.2.7 Table 247

 Skip over Obsolete */

			/*

			 * Set RELATIVE TARGET PORT IDENTIFIER

	/*

	 * Set the RETURN DATA LENGTH set in the header of the DataIN Payload

	/*

	 * Fill in the Extended header parameter data format if requested

		/*

		 * Set the implicit transition time (in seconds) for the application

		 * client to use as a base for it's transition timeout value.

		 *

		 * Use the current tg_pt_gp_mem -> tg_pt_gp membership from the LUN

		 * this CDB was received upon to determine this value individually

		 * for ALUA target port group.

/*

 * SET_TARGET_PORT_GROUPS for explicit ALUA operation.

 *

 * See spc4r17 section 6.35

 Skip over RESERVED area in header */

	/*

	 * Determine if explicit ALUA via SET_TARGET_PORT_GROUPS is allowed

	 * for the local tg_pt_gp.

 Skip over RESERVED area in header */

		/*

		 * Check the received ALUA access state, and determine if

		 * the state is a primary or secondary target port asymmetric

		 * access state.

			/*

			 * If the SET TARGET PORT GROUPS attempts to establish

			 * an invalid combination of target port asymmetric

			 * access states or attempts to establish an

			 * unsupported target port asymmetric access state,

			 * then the command shall be terminated with CHECK

			 * CONDITION status, with the sense key set to ILLEGAL

			 * REQUEST, and the additional sense code set to INVALID

			 * FIELD IN PARAMETER LIST.

		/*

		 * If the ASYMMETRIC ACCESS STATE field (see table 267)

		 * specifies a primary target port asymmetric access state,

		 * then the TARGET PORT GROUP OR TARGET PORT field specifies

		 * a primary target port group for which the primary target

		 * port asymmetric access state shall be changed. If the

		 * ASYMMETRIC ACCESS STATE field specifies a secondary target

		 * port asymmetric access state, then the TARGET PORT GROUP OR

		 * TARGET PORT field specifies the relative target port

		 * identifier (see 3.1.120) of the target port for which the

		 * secondary target port asymmetric access state shall be

		 * changed.

			/*

			 * Locate the matching target port group ID from

			 * the global tg_pt_gp list

			/*

			 * Extract the RELATIVE TARGET PORT IDENTIFIER to identify

			 * the Target Port in question for the the incoming

			 * SET_TARGET_PORT_GROUPS op.

			/*

			 * Locate the matching relative target port identifier

			 * for the struct se_device storage object.

 XXX: racy unlock

	/*

	 * Set SCF_ALUA_NON_OPTIMIZED here, this value will be checked

	 * later to determine if processing of this cmd needs to be

	 * temporarily delayed for the Active/NonOptimized primary access state.

 Only need to check for cdb actually containing LBAs */

	/*

	 * Allowed CDBs for ALUA_ACCESS_STATE_STANDBY as defined by

	 * spc4r17 section 5.9.2.4.4

	/*

	 * Allowed CDBs for ALUA_ACCESS_STATE_UNAVAILABLE as defined by

	 * spc4r17 section 5.9.2.4.5

	/*

	 * Allowed CDBs for ALUA_ACCESS_STATE_TRANSITION as defined by

	 * spc4r17 section 5.9.2.5

/*

 * return 1: Is used to signal LUN not accessible, and check condition/not ready

 * return 0: Used to signal success

 * return -1: Used to signal failure, and invalid cdb field

	/*

	 * First, check for a struct se_port specific secondary ALUA target port

	 * access state: OFFLINE

	/*

	 * Process ALUA_ACCESS_STATE_ACTIVE_OPTIMIZED in a separate conditional

	 * statement so the compiler knows explicitly to check this case first.

	 * For the Optimized ALUA access state case, we want to process the

	 * incoming fabric cmd ASAP..

	/*

	 * OFFLINE is a secondary ALUA target port group access state, that is

	 * handled above with struct se_lun->lun_tg_pt_secondary_offline=1

/*

 * Check implicit and explicit ALUA state change request.

	/*

	 * OPTIMIZED, NON-OPTIMIZED, STANDBY and UNAVAILABLE are

	 * defined as primary target port asymmetric access states.

		/*

		 * OFFLINE state is defined as a secondary target port

		 * asymmetric access state.

			/*

			 * Transitioning is set internally and by tcmu daemon,

			 * and cannot be selected through a STPG.

/*

 * Used by fabric modules to determine when we need to delay processing

 * for the Active/NonOptimized paths..

	/*

	 * The ALUA Active/NonOptimized access state delay can be disabled

	 * in via configfs with a value of zero

	/*

	 * struct se_cmd->alua_nonop_delay gets set by a target port group

	 * defined interval in core_alua_state_nonoptimized()

		/*

		 * After an implicit target port asymmetric access state

		 * change, a device server shall establish a unit attention

		 * condition for the initiator port associated with every I_T

		 * nexus with the additional sense code set to ASYMMETRIC

		 * ACCESS STATE CHANGED.

		 *

		 * After an explicit target port asymmetric access state

		 * change, a device server shall establish a unit attention

		 * condition with the additional sense code set to ASYMMETRIC

		 * ACCESS STATE CHANGED for the initiator port associated with

		 * every I_T nexus other than the I_T nexus on which the SET

		 * TARGET PORT GROUPS command

			/*

			 * spc4r37 p.242:

			 * After an explicit target port asymmetric access

			 * state change, a device server shall establish a

			 * unit attention condition with the additional sense

			 * code set to ASYMMETRIC ACCESS STATE CHANGED for

			 * the initiator port associated with every I_T nexus

			 * other than the I_T nexus on which the SET TARGET

			 * PORT GROUPS command was received.

			/*

			 * se_deve->se_lun_acl pointer may be NULL for a

			 * entry created without explicit Node+MappedLUN ACLs

 Nothing to be done here */

	/*

	 * Save the old primary ALUA access state, and set the current state

	 * to ALUA_ACCESS_STATE_TRANSITION.

	/*

	 * Check for the optional ALUA primary state transition delay

	/*

	 * Set the current primary ALUA access state to the requested new state

	/*

	 * Update the ALUA metadata buf that has been allocated in

	 * core_alua_do_port_transition(), this metadata will be written

	 * to struct file.

	 *

	 * Note that there is the case where we do not want to update the

	 * metadata when the saved metadata is being parsed in userspace

	 * when setting the existing port access state and access status.

	 *

	 * Also note that the failure to write out the ALUA metadata to

	 * struct file does NOT affect the actual ALUA transition.

	/*

	 * For storage objects that are members of the 'default_lu_gp',

	 * we only do transition on the passed *l_tp_pt_gp, and not

	 * on all of the matching target port groups IDs in default_lu_gp.

		/*

		 * core_alua_do_transition_tg_pt() will always return

		 * success.

	/*

	 * For all other LU groups aside from 'default_lu_gp', walk all of

	 * the associated storage objects looking for a matching target port

	 * group ID from the local target port group.

			/*

			 * If the target behavior port asymmetric access state

			 * is changed for any target port group accessible via

			 * a logical unit within a LU group, the target port

			 * behavior group asymmetric access states for the same

			 * target port group accessible via other logical units

			 * in that LU group will also change.

			/*

			 * core_alua_do_transition_tg_pt() will always return

			 * success.

	/*

	 * Set the secondary ALUA target port access state to OFFLINE

	 * or release the previously secondary state for struct se_lun

	/*

	 * Do the optional transition delay after we set the secondary

	 * ALUA access state.

	/*

	 * See if we need to update the ALUA fabric port metadata for

	 * secondary state and status

	/*

	 * The lu_gp->lu_gp_id may only be set once..

	/*

	 * Once we have reached this point, config_item_put() has

	 * already been called from target_core_alua_drop_lu_gp().

	 *

	 * Here, we remove the *lu_gp from the global list so that

	 * no associations can be made while we are releasing

	 * struct t10_alua_lu_gp.

	/*

	 * Allow struct t10_alua_lu_gp * referenced by core_alua_get_lu_gp_by_name()

	 * in target_core_configfs.c:target_core_store_alua_lu_gp() to be

	 * released with core_alua_put_lu_gp_from_name()

	/*

	 * Release reference to struct t10_alua_lu_gp * from all associated

	 * struct se_device.

		/*

		 *

		 * lu_gp_mem is associated with a single

		 * struct se_device->dev_alua_lu_gp_mem, and is released when

		 * struct se_device is released via core_alua_free_lu_gp_mem().

		 *

		 * If the passed lu_gp does NOT match the default_lu_gp, assume

		 * we want to re-associate a given lu_gp_mem with default_lu_gp.

/*

 * Called with struct t10_alua_lu_gp_member->lu_gp_mem_lock

/*

 * Called with struct t10_alua_lu_gp_member->lu_gp_mem_lock

	/*

	 * Enable both explicit and implicit ALUA support by default

	/*

	 * Set the default Active/NonOptimized Delay in milliseconds

	/*

	 * Enable all supported states

	/*

	 * The tg_pt_gp->tg_pt_gp_id may only be set once..

	/*

	 * Once we have reached this point, config_item_put() has already

	 * been called from target_core_alua_drop_tg_pt_gp().

	 *

	 * Here we remove *tg_pt_gp from the global list so that

	 * no associations *OR* explicit ALUA via SET_TARGET_PORT_GROUPS

	 * can be made while we are releasing struct t10_alua_tg_pt_gp.

	/*

	 * Allow a struct t10_alua_tg_pt_gp_member * referenced by

	 * core_alua_get_tg_pt_gp_by_name() in

	 * target_core_configfs.c:target_core_store_alua_tg_pt_gp()

	 * to be released with core_alua_put_tg_pt_gp_from_name().

	/*

	 * Release reference to struct t10_alua_tg_pt_gp from all associated

	 * struct se_port.

		/*

		 * If the passed tg_pt_gp does NOT match the default_tg_pt_gp,

		 * assume we want to re-associate a given tg_pt_gp_mem with

		 * default_tg_pt_gp.

	/*

	 * rcu_dereference_raw protected by se_lun->lun_group symlink

	 * reference to se_device->dev_group.

	/*

	 * Any ALUA target port group alias besides "NULL" means we will be

	 * making a new group association.

		/*

		 * core_alua_get_tg_pt_gp_by_name() will increment reference to

		 * struct t10_alua_tg_pt_gp.  This reference is released with

		 * core_alua_put_tg_pt_gp_from_name() below.

		/*

		 * Clearing an existing tg_pt_gp association, and replacing

		 * with the default_tg_pt_gp.

	/*

	 * rcu_dereference_raw protected by se_lun->lun_group symlink

	 * reference to se_device->dev_group.

		/*

		 * Associate this struct se_device with the default ALUA

		 * LUN Group.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_tmr.c

 *

 * This file contains SPC-3 task management infrastructure

 *

 * (c) Copyright 2009-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

	/*

	 * If command already reached CMD_T_COMPLETE state within

	 * target_complete_cmd() or CMD_T_FABRIC_STOP due to shutdown,

	 * this se_cmd has been passed to fabric driver and will

	 * not be aborted.

	 *

	 * Otherwise, obtain a local se_cmd->cmd_kref now for TMR

	 * ABORT_TASK + LUN_RESET for CMD_T_ABORTED processing as

	 * long as se_cmd->cmd_kref is still active unless zero.

			/*

			 * skip task management functions, including

			 * tmr->task_cmd

	/*

	 * Release all pending and outgoing TMRs aside from the received

	 * LUN_RESET tmr..

		/*

		 * If this function was called with a valid pr_res_key

		 * parameter (eg: for PROUT PREEMPT_AND_ABORT service action

		 * skip non registration key matching TMRs.

/**

 * core_tmr_drain_state_list() - abort SCSI commands associated with a device

 *

 * @dev:       Device for which to abort outstanding SCSI commands.

 * @prout_cmd: Pointer to the SCSI PREEMPT AND ABORT if this function is called

 *             to realize the PREEMPT AND ABORT functionality.

 * @tmr_sess:  Session through which the LUN RESET has been received.

 * @tas:       Task Aborted Status (TAS) bit from the SCSI control mode page.

 *             A quote from SPC-4, paragraph "7.5.10 Control mode page":

 *             "A task aborted status (TAS) bit set to zero specifies that

 *             aborted commands shall be terminated by the device server

 *             without any response to the application client. A TAS bit set

 *             to one specifies that commands aborted by the actions of an I_T

 *             nexus other than the I_T nexus on which the command was

 *             received shall be completed with TASK ABORTED status."

 * @preempt_and_abort_list: For the PREEMPT AND ABORT functionality, a list

 *             with registrations that will be preempted.

	/*

	 * Complete outstanding commands with TASK_ABORTED SAM status.

	 *

	 * This is following sam4r17, section 5.6 Aborting commands, Table 38

	 * for TMR LUN_RESET:

	 *

	 * a) "Yes" indicates that each command that is aborted on an I_T nexus

	 * other than the one that caused the SCSI device condition is

	 * completed with TASK ABORTED status, if the TAS bit is set to one in

	 * the Control mode page (see SPC-4). "No" indicates that no status is

	 * returned for aborted commands.

	 *

	 * d) If the logical unit reset is caused by a particular I_T nexus

	 * (e.g., by a LOGICAL UNIT RESET task management function), then "yes"

	 * (TASK_ABORTED status) applies.

	 *

	 * Otherwise (e.g., if triggered by a hard reset), "no"

	 * (no TASK_ABORTED SAM status) applies.

	 *

	 * Note that this seems to be independent of TAS (Task Aborted Status)

	 * in the Control Mode Page.

			/*

			 * For PREEMPT_AND_ABORT usage, only process commands

			 * with a matching reservation key.

			/*

			 * Not aborting PROUT PREEMPT_AND_ABORT CDB..

        /*

	 * TASK_ABORTED status bit, this is configurable via ConfigFS

	 * struct se_device attributes.  spc4r17 section 7.4.6 Control mode page

	 *

	 * A task aborted status (TAS) bit set to zero specifies that aborted

	 * tasks shall be terminated by the device server without any response

	 * to the application client. A TAS bit set to one specifies that tasks

	 * aborted by the actions of an I_T nexus other than the I_T nexus on

	 * which the command was received shall be completed with TASK ABORTED

	 * status (see SAM-4).

	/*

	 * Determine if this se_tmr is coming from a $FABRIC_MOD

	 * or struct se_device passthrough..

	/*

	 * Clear any legacy SPC-2 reservation when called during

	 * LOGICAL UNIT RESET

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename: target_core_xcopy.c

 *

 * This file contains support for SPC-4 Extended-Copy offload with generic

 * TCM backends.

 *

 * Copyright (c) 2011-2013 Datera, Inc. All rights reserved.

 *

 * Author:

 * Nicholas A. Bellinger <nab@daterainc.com>

 *

/**

 * target_xcopy_locate_se_dev_e4_iter - compare XCOPY NAA device identifiers

 *

 * @se_dev: device being considered for match

 * @dev_wwn: XCOPY requested NAA dev_wwn

 * @return: 1 on match, 0 on no-match

 cmd with NULL sess indicates no associated $FABRIC_MOD */

	/*

	 * Extract RELATIVE INITIATOR PORT IDENTIFIER

	/*

	 * Check for supported code set, association, and designator type

	/*

	 * Check for matching 16 byte length for NAA IEEE Registered Extended

	 * Assigned designator

	/*

	 * Check for NAA IEEE Registered Extended Assigned header..

		/*

		 * Determine if the source designator matches the local device

		/*

		 * Determine if the destination designator matches the local

		 * device. If @cscd_index corresponds to both source (stdi) and

		 * destination (dtdi), or dtdi comes after stdi, then

		 * XCOL_DEST_RECV_OP wins.

 spc4r37 6.4.3.4 CSCD DESCRIPTOR LIST LENGTH field */

	/*

	 * Generate an IEEE Registered Extended designator based upon the

	 * se_device the XCOPY was received upon..

		/*

		 * Check target descriptor identification with 0xE4 type, and

		 * compare the current index with the CSCD descriptor IDs in

		 * the segment descriptor. Use VPD 0x83 WWPN matching ..

	/*

	 * If a matching IEEE NAA 0x83 descriptor for the requested device

	 * is not located on this node, return COPY_ABORTED with ASQ/ASQC

	 * 0x0d/0x02 - COPY_TARGET_DEVICE_NOT_REACHABLE to request the

	 * initiator to fall back to normal copy method.

 spc4r37 6.4.3.5 SEGMENT DESCRIPTOR LIST LENGTH field */

		/*

		 * Check segment descriptor type code for block -> block

/*

 * Start xcopy_pt ops

 xpt_cmd is on the stack, nothing to free here */

/*

 * End xcopy_pt_ops

/*

 * target_xcopy_setup_pt_cmd - set up a pass-through command

 * @xpt_cmd:	 Data structure to initialize.

 * @xop:	 Describes the XCOPY operation received from an initiator.

 * @se_dev:	 Backend device to associate with @xpt_cmd if

 *		 @remote_port == true.

 * @cdb:	 SCSI CDB to be copied into @xpt_cmd.

 * @remote_port: If false, use the LUN through which the XCOPY command has

 *		 been received. If true, use @se_dev->xcopy_lun.

 *

 * Set up a SCSI command (READ or WRITE) that will be used to execute an

 * XCOPY command.

	/*

	 * Setup LUN+port to honor reservations based upon xop->op_origin for

	 * X-COPY PUSH or X-COPY PULL based upon where the CDB was received.

	/*

	 * Break up XCOPY I/O into hw_max_sectors sized I/O based on the

	 * smallest max_sectors between src_dev + dev_dev, or

			/*

			 * (Re)allocate a buffer large enough to hold the XCOPY

			 * I/O size, which can be reused each read / write loop.

	/*

	 * The XCOPY command was aborted after some data was transferred.

	 * Terminate command with CHECK CONDITION status, with the sense key

	 * set to COPY ABORTED.

/*

 * Returns TCM_NO_SENSE upon success or a sense code != TCM_NO_SENSE if parsing

 * fails.

	/*

	 * Determine TARGET DESCRIPTOR LIST LENGTH + SEGMENT DESCRIPTOR LIST LENGTH

	/*

	 * skip over the target descriptors until segment descriptors

	 * have been passed - CSCD ids are needed to determine src and dest.

	/*

	 * Set SNLID=1 (Supports no List ID)

	/*

	 * MAXIMUM TARGET DESCRIPTOR COUNT

	/*

	 * MAXIMUM SEGMENT DESCRIPTOR COUNT

	/*

	 * MAXIMUM DESCRIPTOR LIST LENGTH

	/*

	 * MAXIMUM SEGMENT LENGTH

	/*

	 * MAXIMUM INLINE DATA LENGTH for SA 0x04 (NOT SUPPORTED)

	/*

	 * HELD DATA LIMIT

	/*

	 * MAXIMUM STREAM DEVICE TRANSFER SIZE

	/*

	 * TOTAL CONCURRENT COPIES

	/*

	 * MAXIMUM CONCURRENT COPIES

	/*

	 * DATA SEGMENT GRANULARITY (log 2)

	/*

	 * INLINE DATA GRANULARITY log 2)

	/*

	 * HELD DATA GRANULARITY

	/*

	 * IMPLEMENTED DESCRIPTOR LIST LENGTH

	/*

	 * List of implemented descriptor type codes (ordered)

 Copy Block to Block device */

 Identification descriptor target descriptor */

	/*

	 * AVAILABLE DATA (n-3)

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  target_core_file.c

 *

 * This file contains the Storage Engine <-> FILEIO transport specific functions

 *

 * (c) Copyright 2005-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@kernel.org>

 *

	/*

	 * Use O_DSYNC by default instead of O_SYNC to forgo syncing

	 * of pure timestamp updates.

	/*

	 * Optionally allow fd_buffered_io=1 to be enabled for people

	 * who want use the fs buffer cache as an WriteCache mechanism.

	 *

	 * This means that in event of a hard failure, there is a risk

	 * of silent data-loss if the SCSI client has *not* performed a

	 * forced unit access (FUA) write, or issued SYNCHRONIZE_CACHE

	 * to write-out the entire device cache.

	/*

	 * If using a block backend with this struct file, we extract

	 * fd_dev->fd_[block,dev]_size from struct block_device.

	 *

	 * Otherwise, we use the passed fd_size= from configfs

		/*

		 * Determine the number of bytes from i_size_read() minus

		 * one (1) logical sector from underlying struct block_device

		/*

		 * Enable write same emulation for IBLOCK and use 0xFFFF as

		 * the smaller WRITE_SAME(10) only has a two-byte block count.

		/*

		 * Limit UNMAP emulation to 8k Number of LBAs (NoLB)

		/*

		 * Currently hardcoded to 1 in Linux/SCSI code..

		/*

		 * Limit WRITE_SAME w/ UNMAP=0 emulation to 8k Number of LBAs (NoLB)

		 * based upon struct iovec limit for vfs_writev()

		/*

		 * Return zeros and GOOD status even if the READ did not return

		 * the expected virt_size for struct file w/o a backing struct

		 * block_device.

				/*

				 * Short read case:

				 * Probably some one truncate file under us.

				 * We must explicitly zero sg-pages to prevent

				 * expose uninizialized pages to userspace.

	/*

	 * If the Immediate bit is set, queue up the GOOD response

	 * for this SYNCHRONIZE_CACHE op

	/*

	 * Determine if we will be flushing the entire device.

 The backend is block device, use discard */

 The backend is normal file, use fallocate */

	/*

	 * Call vectorized fileio functions to map struct scatterlist

	 * physical memory addresses to struct iovec virtual memory.

		/*

		 * Perform implicit vfs_fsync_range() for fd_do_writev() ops

		 * for SCSI WRITEs with Forced Unit Access (FUA) set.

		 * Allow this to happen independent of WCE=0 setting.

	/*

	 * We are currently limited by the number of iovecs (2048) per

	 * single vfs_[writev,readv] call.

	/*

	 * When using a file that references an underlying struct block_device,

	 * ensure dev_size is always based on the current inode size in order

	 * to handle underlying block_device resize operations.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

* Filename: target_core_fabric_configfs.c

 *

 * This file contains generic fabric module configfs infrastructure for

 * TCM v4.x code

 *

 * (c) Copyright 2010-2013 Datera, Inc.

 *

 * Nicholas A. Bellinger <nab@linux-iscsi.org>

*

 Start of tfc_tpg_mappedlun_cit */

	/*

	 * Ensure that the source port exists

	/*

	 * Make sure the SymLink is going to the same $FABRIC/$WWN/tpgt_$TPGT

	/*

	 * If this struct se_node_acl was dynamically generated with

	 * tpg_1/attrib/generate_node_acls=1, use the existing

	 * deve->lun_access_ro value, which will be true when

	 * tpg_1/attrib/demo_mode_write_protect=1

	/*

	 * Determine the actual mapped LUN value user wants..

	 *

	 * This value is what the SCSI Initiator actually sees the

	 * $FABRIC/$WWPN/$TPGT/lun/lun_* as on their SCSI Initiator Ports.

 wp=1 means lun_access_ro=true */

 End of tfc_tpg_mappedlun_cit */

 Start of tfc_tpg_mappedlun_port_cit */

 End of tfc_tpg_mappedlun_port_cit */

 Start of tfc_tpg_nacl_base_cit */

	/*

	 * Make sure user is creating iscsi/$IQN/$TPGT/acls/$INITIATOR/lun_$ID.

	/*

	 * Determine the Mapped LUN value.  This is what the SCSI Initiator

	 * Port will actually see.

 End of tfc_tpg_nacl_base_cit */

 Start of tfc_node_fabric_stats_cit */

/*

 * This is used as a placeholder for struct se_node_acl->acl_fabric_stat_group

 * to allow fabrics access to ->acl_fabric_stat_group->default_groups[]

 End of tfc_wwn_fabric_stats_cit */

 Start of tfc_tpg_nacl_cit */

	/*

	 * struct se_node_acl free is done in target_fabric_nacl_base_release()

 End of tfc_tpg_nacl_cit */

 Start of tfc_tpg_np_base_cit */

 End of tfc_tpg_np_base_cit */

 Start of tfc_tpg_np_cit */

	/*

	 * struct se_tpg_np is released via target_fabric_np_base_release()

 End of tfc_tpg_np_cit */

 Start of tfc_tpg_port_cit */

		/*

		 * Call the optional fabric_post_link() to allow a

		 * fabric module to setup any additional state once

		 * core_dev_add_lun() has been called..

		/*

		 * Call the optional fabric_pre_unlink() to allow a

		 * fabric module to release any additional stat before

		 * core_dev_del_lun() is called.

 End of tfc_tpg_port_cit */

 Start of tfc_tpg_port_stat_cit */

 End of tfc_tpg_port_stat_cit */

 Start of tfc_tpg_lun_cit */

 End of tfc_tpg_lun_cit */

 Start of tfc_tpg_base_cit */

 + 1 for final NULL in the array */

 End of tfc_tpg_base_cit */

 Start of tfc_tpg_cit */

 End of tfc_tpg_cit */

 Start of tfc_wwn_fabric_stats_cit */

/*

 * This is used as a placeholder for struct se_wwn->fabric_stat_group

 * to allow fabrics access to ->fabric_stat_group->default_groups[]

 End of tfc_wwn_fabric_stats_cit */

 Start of tfc_wwn_cit */

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains the main functions related to Initiator Node Attributes.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

	/*

	 * Reenable disabled nopin_timeout timer for all iSCSI connections.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains the iSCSI Virtual Device and Disk Transport

 * agnostic related functions.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

	/*

	 * This is a discovery session, the single queue slot was already

	 * assigned in iscsi_login_zero_tsih().  Since only Logout and

	 * Text Opcodes are allowed during discovery we do not have to worry

	 * about the HBA's queue depth here.

	/*

	 * This is a normal session, set the Session's CmdSN window to the

	 * struct se_node_acl->queue_depth.  The value in struct se_node_acl->queue_depth

	 * has already been validated as a legal value in

	 * core_set_queue_depth_for_node().

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file houses the main functions for the iSCSI CHAP support

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

	/*

	 * Set CHAP_C, and copy the generated challenge into c_str.

 Tie the challenge length to the digest size */

	/*

	 * Set Identifier.

	/*

	 * Generate Challenge.

	/*

	 * Extract CHAP_N.

 Include the terminating NULL in the compare */

	/*

	 * Extract CHAP_R.

	/*

	 * One way authentication has succeeded, return now if mutual

	 * authentication is not enabled.

	/*

	 * Get CHAP_I.

	/*

	 * RFC 1994 says Identifier is no more than octet (8 bits).

	/*

	 * Get CHAP_C.

	/*

	 * During mutual authentication, the CHAP_C generated by the

	 * initiator must not match the original CHAP_C generated by

	 * the target.

	/*

	 * Generate CHAP_N and CHAP_R for mutual authentication.

 To handle both endiannesses */

	/*

	 * Convert received challenge to binary hex.

	/*

	 * Generate CHAP_N and CHAP_R.

	/*

	 * Convert response from binary hex to ascii hext.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains main functions related to iSCSI DataSequenceInOrder=No

 * and DataPDUInOrder=No.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

/*

 *	Generate count random values into array.

 *	Use 0x80000000 to mark generates valued in array[].

/*

 *	Builds PDU and/or Sequence list, called while DataSequenceInOrder=No

 *	or DataPDUInOrder=No.

	/*

	 * Do nothing if no OOO shenanigans

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Modern ConfigFS group context specific iSCSI statistics based on original

 * iscsi_target_mib.c code

 *

 * Copyright (c) 2011-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

 Instance Attributes Table */

/****************************************************************************

 * iSCSI MIB Tables

/*

 * Instance Attributes Table

/*

 * Instance Session Failure Stats Table

/*

 * Target Attributes Table

/*

 * Target Login Stats Table

/*

 * Target Logout Stats Table

/*

 * Session Stats Table

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains the login functions used by the iSCSI Target driver.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

 TCP_NODELAY */

 ipv6_addr_v4mapped() */

/*

 * Used by iscsi_target_nego.c:iscsi_target_locate_portal() to setup

 * per struct iscsi_conn libcrypto contexts for crc32c and crc32-intel

	/*

	 * Setup slicing by CRC32C algorithm for RX and TX libcrypto contexts

	 * which will default to crc32c_intel.ko for cpu_has_xmm4_2, or fallback

	 * to software 1x8 byte slicing from crc32c.ko

	/*

	 * If the Time2Retain handler has expired, the session is already gone.

	/*

	 * Generate a random Status sequence number (statsn) for the new

	 * iSCSI connection.

/*

 *	This is the leading connection of a new session,

 *	or session reinstatement.

	/*

	 * The FFP CmdSN window values will be allocated from the TPG's

	 * Initiator Node's ACL once the login has been successfully completed.

	/*

	 * Assign a new TPG Session Handle.  Note this is protected with

	 * struct iscsi_portal_group->np_login_sem from iscsit_access_np().

	/*

	 * Create the default params from user defined values..

	/*

	 * Need to send TargetPortalGroupTag back in first login response

	 * on any iSCSI connection where the Initiator provides TargetName.

	 * See 5.3.1.  Login Phase Start

	 *

	 * In our case, we have already located the struct iscsi_tiqn at this point.

	/*

	 * Workaround for Initiators that have broken connection recovery logic.

	 *

	 * "We would really like to get rid of this." Linux-iSCSI.org team

	/*

	 * Set RDMAExtensions=Yes by default for iSER enabled network portals

		/*

		 * Make MaxRecvDataSegmentLength PAGE_SIZE aligned for

		 * Immediate Data + Unsolicited Data-OUT if necessary..

		/*

		 * ISER currently requires that ImmediateData + Unsolicited

		 * Data be disabled when protection / signature MRs are enabled.

/*

 *	Add a new connection to an existing session.

	/*

	 * If the Time2Retain handler has expired, the session is already gone.

	/*

	 * Stop the Time2Retain timer if this is a failed session, we restart

	 * the timer if the login is not successful.

	/*

	 * Need to send TargetPortalGroupTag back in first login response

	 * on any iSCSI connection where the Initiator provides TargetName.

	 * See 5.3.1.  Login Phase Start

	 *

	 * In our case, we have already located the struct iscsi_tiqn at this point.

	/*

	 * By following item 5 in the login table,  if we have found

	 * an existing ISID and a valid/existing TSIH and an existing

	 * CID we do connection reinstatement.  Currently we dont not

	 * support it so we send back an non-zero status class to the

	 * initiator and release the new connection.

	/*

	 * Check for any connection recovery entries containing CID.

	 * We use the original ExpStatSN sent in the first login request

	 * to acknowledge commands for the failed connection.

	 *

	 * Also note that an explict logout may have already been sent,

	 * but the response may not be sent due to additional connection

	 * loss.

	/*

	 * Else we follow item 4 from the login table in that we have

	 * found an existing ISID and a valid/existing TSIH and a new

	 * CID we go ahead and continue to add a new connection to the

	 * session.

	/*

	 * FIXME: Unsolicited NopIN support for ISER

	/*

	 * SCSI Initiator -> SCSI Target Port Mapping

		/*

		 * Determine CPU mask to ensure connection's RX and TX kthreads

		 * are scheduled on the same CPU.

		/*

		 * Wakeup the sleeping iscsi_target_rx_thread() now that

		 * iscsi_conn is in TARG_CONN_STATE_LOGGED_IN state.

	/*

	 * Determine CPU mask to ensure connection's RX and TX kthreads

	 * are scheduled on the same CPU.

	/*

	 * Wakeup the sleeping iscsi_target_rx_thread() now that

	 * iscsi_conn is in TARG_CONN_STATE_LOGGED_IN state.

	/*

	 * This used the TA_LOGIN_TIMEOUT constant because at this

	 * point we do not have access to ISCSI_TPG_ATTRIB(tpg)->login_timeout

	/*

	 * Setup the np->np_sockaddr from the passed sockaddr setup

	 * in iscsi_target_configfs.c code..

	/*

	 * Set SO_REUSEADDR, and disable Nagle Algorithm with TCP_NODELAY.

 Pretend to be an ipv4 socket */

 Pretend to be an ipv4 socket */

	/*

	 * Setup the initial iscsi_login values from the leading

	 * login request PDU.

	/*

	 * If login negotiation fails check if the Time2Retain timer

	 * needs to be restarted.

 Get another socket */

 Get another socket */

	/*

	 * Perform the remaining iSCSI connection initialization items..

	/*

	 * This will process the first login request + payload..

	/*

	 * Used by iscsit_tx_login_rsp() for Login Resonses PDUs

	 * when Status-Class != 0.

		/*

		 * This is the leading connection of a new session.

		 * We wait until after authentication to check for

		 * session reinstatement.

		/*

		 * Add a new connection to an existing session.

		 * We check for a non-existant session in

		 * iscsi_login_non_zero_tsih_s2() below based

		 * on ISID/TSIH, but wait until after authentication

		 * to check for connection reinstatement, etc.

	/*

	 * SessionType: Discovery

	 *

	 * 	Locates Default Portal

	 *

	 * SessionType: Normal

	 *

	 * 	Locates Target Portal from NP -> Target IQN

 Get another socket */

		/*

		 * We break and exit here unless another sock_accept() call

		 * is expected.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains main functions related to iSCSI Parameter negotiation.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

 struct kvec */

 #warning Add extension keys */

	/*

	 * The format for setting the initial parameter definitions are:

	 *

	 * Parameter name:

	 * Initial value:

	 * Allowable phase:

	 * Scope:

	 * Allowable senders:

	 * Typerange:

	 * Use:

	/*

	 * Extra parameters for ISER from RFC-5046

	/*

	 * RFC 1994

	/*

	 * RFC 2945

			/*

			 * Required for gPXE iSCSI boot client

			/*

			 * Required for Mellanox Flexboot PXE boot ROM

			/*

			 * Required for gPXE iSCSI boot client

			/*

			 * Reject is not fatal for [I,O]FMarkInt,  and causes

			 * [I,O]FMarker to be reset to No. (See iSCSI v20 A.3.2)

 #warning FIXME: Add check for X-ExtensionKey here */

	/*

	 * Key name length must not exceed 63 bytes. (See iSCSI v20 5.1)

		/*

		 * Special case to set MAXXMITDATASEGMENTLENGTH from the

		 * target requested MaxRecvDataSegmentLength, even though

		 * this key is not sent over the wire.

			/*

			 * At this point iscsi_check_acceptor_state() will have

			 * set ops->MaxRecvDataSegmentLength from the original

			 * initiator provided value.

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains the iSCSI Target specific Task Management functions.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

/*

 *	Called from iscsit_handle_task_mgt_cmd().

	/*

	 * Do the real work in transport_generic_do_tmr().

	/*

	 * Do the real work in transport_generic_do_tmr().

	/*

	 * Temporary check to prevent connection recovery for

	 * connections with a differing Max*DataSegmentLength.

	/*

	 * Command can now be reassigned to a new connection.

	 * The task management response must be sent before the

	 * reassignment actually happens.  See iscsi_tmr_post_handler().

	/*

	 * Reset the StatSN so a new one for this commands new connection

	 * will be assigned.

	 * Reset the ExpStatSN as well so we may receive Status SNACKs.

	/*

	 * The Initiator must not send a R2T SNACK with a Begrun less than

	 * the TMR TASK_REASSIGN's ExpDataSN.

	/*

	 * The TMR TASK_REASSIGN's ExpDataSN contains the next R2TSN the

	 * Initiator is expecting.  The Target controls all WRITE operations

	 * so if we have received all DataOUT we can safety ignore Initiator.

	/*

	 * Special case to deal with DataSequenceInOrder=No and Non-Immeidate

	 * Unsolicited DataOut.

	/*

	 * iscsit_build_r2ts_for_cmd() can handle the rest from here.

	/*

	 * The Initiator must not send a Data SNACK with a BegRun less than

	 * the TMR TASK_REASSIGN's ExpDataSN.

	/*

	 * The TMR TASK_REASSIGN's ExpDataSN contains the next DataSN the

	 * Initiator is expecting.

	/*

	 * Reset the StatSN so a new one for this commands new connection

	 * will be assigned.

	 * Reset the ExpStatSN as well so we may receive Status SNACKs.

/*

 *	Handles special after-the-fact actions related to TMRs.

 *	Right now the only one that its really needed for is

 *	connection recovery releated TASK_REASSIGN.

/*

 *	Nothing to do here, but leave it for good measure. :-)

	/*

	 * The command was in the process of receiving Unsolicited DataOUT when

	 * the connection failed.

	/*

	 * The Initiator is requesting R2Ts starting from zero,  skip

	 * checking acknowledged R2Ts and start checking struct iscsi_r2ts

	 * greater than zero.

	/*

	 * We now check that the PDUs in DataOUT sequences below

	 * the TMR TASK_REASSIGN ExpDataSN (R2TSN the Initiator is

	 * expecting next) have all the DataOUT they require to complete

	 * the DataOUT sequence.  First scan from R2TSN 0 to TMR

	 * TASK_REASSIGN ExpDataSN-1.

	 *

	 * If we have not received all DataOUT in question,  we must

	 * make sure to make the appropriate changes to values in

	 * struct iscsi_cmd (and elsewhere depending on session parameters)

	 * so iscsit_build_r2ts_for_cmd() in iscsit_task_reassign_complete_write()

	 * will resend a new R2T for the DataOUT sequences in question.

		/*

		 * Safely ignore Recovery R2Ts and R2Ts that have completed

		 * DataOUT sequences.

		/*

		 *                 DataSequenceInOrder=Yes:

		 *

		 * Taking into account the iSCSI implementation requirement of

		 * MaxOutstandingR2T=1 while ErrorRecoveryLevel>0 and

		 * DataSequenceInOrder=Yes, we must take into consideration

		 * the following:

		 *

		 *                  DataSequenceInOrder=No:

		 *

		 * Taking into account that the Initiator controls the (possibly

		 * random) PDU Order in (possibly random) Sequence Order of

		 * DataOUT the target requests with R2Ts,  we must take into

		 * consideration the following:

		 *

		 *      DataPDUInOrder=Yes for DataSequenceInOrder=[Yes,No]:

		 *

		 * While processing non-complete R2T DataOUT sequence requests

		 * the Target will re-request only the total sequence length

		 * minus current received offset.  This is because we must

		 * assume the initiator will continue sending DataOUT from the

		 * last PDU before the connection failed.

		 *

		 *      DataPDUInOrder=No for DataSequenceInOrder=[Yes,No]:

		 *

		 * While processing non-complete R2T DataOUT sequence requests

		 * the Target will re-request the entire DataOUT sequence if

		 * any single PDU is missing from the sequence.  This is because

		 * we have no logical method to determine the next PDU offset,

		 * and we must assume the Initiator will be sending any random

		 * PDU offset in the current sequence after TASK_REASSIGN

		 * has completed.

	/*

	 * We now drop all unacknowledged R2Ts, ie: ExpDataSN from TMR

	 * TASK_REASSIGN to the last R2T in the list..  We are also careful

	 * to check that the Initiator is not requesting R2Ts for DataOUT

	 * sequences it has already completed.

	 *

	 * Free each R2T in question and adjust values in struct iscsi_cmd

	 * accordingly so iscsit_build_r2ts_for_cmd() do the rest of

	 * the work after the TMR TASK_REASSIGN Response is sent.

		/*

		 * Skip up to the R2T Sequence number provided by the

		 * iSCSI TASK_REASSIGN TMR

		/*		   DataSequenceInOrder=Yes:

		 *

		 * Taking into account the iSCSI implementation requirement of

		 * MaxOutstandingR2T=1 while ErrorRecoveryLevel>0 and

		 * DataSequenceInOrder=Yes, it's safe to subtract the R2Ts

		 * entire transfer length from the commands R2T offset marker.

		 *

		 *		   DataSequenceInOrder=No:

		 *

		 * We subtract the difference from struct iscsi_seq between the

		 * current offset and original offset from cmd->write_data_done

		 * for account for DataOUT PDUs already received.  Then reset

		 * the current offset to the original and zero out the current

		 * burst length,  to make sure we re-request the entire DataOUT

		 * sequence.

/*

 *	Performs sanity checks TMR TASK_REASSIGN's ExpDataSN for

 *	a given struct iscsi_cmd.

	/*

	 * For READs the TMR TASK_REASSIGNs ExpDataSN contains the next DataSN

	 * of DataIN the Initiator is expecting.

	 *

	 * Also check that the Initiator is not re-requesting DataIN that has

	 * already been acknowledged with a DataAck SNACK.

	/*

	 * For WRITEs the TMR TASK_REASSIGNs ExpDataSN contains the next R2TSN

	 * for R2Ts the Initiator is expecting.

	 *

	 * Do the magic in iscsit_task_reassign_prepare_write().

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains main functions related to the iSCSI Target Core Driver.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

/*

 * Note that IQN formatting is expected to be done in userspace, and

 * no explict IQN format checks are done here.

	/*

	 * Wait for accesses to said struct iscsi_tiqn to end.

	/*

	 * iscsit_set_tiqn_shutdown sets tiqn->tiqn_state = TIQN_STATE_SHUTDOWN

	 * while holding tiqn->tiqn_state_lock.  This means that all subsequent

	 * attempts to access this struct iscsi_tiqn will fail from both transport

	 * fabric and control code paths.

	/*

	 * Determine if the network portal is accepting storage traffic.

	/*

	 * Determine if the portal group is accepting storage traffic.

	/*

	 * Here we serialize access across the TIQN+TPG Tuple.

			/*

			 * Increment the np_exports reference count now to

			 * prevent iscsit_del_np() below from being called

			 * while iscsi_tpg_add_network_portal() is called.

	/*

	 * Locate the existing struct iscsi_np if already active..

	/*

	 * Increment the np_exports reference count now to prevent

	 * iscsit_del_np() below from being run while a new call to

	 * iscsi_tpg_add_network_portal() for a matching iscsi_np is

	 * active.  We don't need to hold np->np_thread_lock at this

	 * point because iscsi_np has not been added to g_np_list yet.

		/*

		 * We need to send the signal to wakeup Linux/Net

		 * which may be sleeping in sock_accept()..

 XXX: this probably wants it to be it's own unwind step.. */

	/*

	 * Shutdown discovery sessions and disable discovery TPG

	/*

	 * Perform the kref_put now if se_cmd has already been setup by

	 * scsit_setup_scsi_cmd()

/*

 * Map some portion of the allocated scatterlist to an iovec, suitable for

 * kernel sockets to copy data in/out.

	/*

	 * We know each entry in t_data_sg contains a page.

 FIXME; Add checks for AdditionalHeaderSegment */

		/*

		 * From RFC-3720 Section 10.3.1:

		 *

		 * "Either or both of R and W MAY be 1 when either the

		 *  Expected Data Transfer Length and/or Bidirectional Read

		 *  Expected Data Transfer Length are 0"

		 *

		 * For this case, go ahead and clear the unnecssary bits

		 * to avoid any confusion with ->data_direction.

	/*

	 * Figure out the SAM Task Attribute for the incoming SCSI CDB

	/*

	 * Initialize struct se_cmd descriptor from target_core_mod infrastructure

	/*

	 * Check if we need to delay processing because of ALUA

	 * Active/NonOptimized primary access state..

	/*

	 * Check the CmdSN against ExpCmdSN/MaxCmdSN here if

	 * the Immediate Bit is not set, and no Immediate

	 * Data is attached.

	 *

	 * A PDU/CmdSN carrying Immediate Data can only

	 * be processed after the DataCRC has passed.

	 * If the DataCRC fails, the CmdSN MUST NOT

	 * be acknowledged. (See below)

	/*

	 * If no Immediate Data is attached, it's OK to return now.

	/*

	 * Early CHECK_CONDITIONs with ImmediateData never make it to command

	 * execution.  These exceptions are processed in CmdSN order using

	 * iscsit_check_received_cmdsn() in iscsit_get_immediate_data() below.

	/*

	 * Call directly into transport_generic_new_cmd() to perform

	 * the backend memory allocation.

	/*

	 * Special case for Unsupported SAM WRITE Opcodes and ImmediateData=Yes.

		/*

		 * A PDU/CmdSN carrying Immediate Data passed

		 * DataCRC, check against ExpCmdSN/MaxCmdSN if

		 * Immediate Bit is not set.

		/*

		 * Immediate Data failed DataCRC and ERL>=1,

		 * silently drop this PDU and let the initiator

		 * plug the CmdSN gap.

		 *

		 * FIXME: Send Unsolicited NOPIN with reserved

		 * TTT here to help the initiator figure out

		 * the missing CmdSN, although they should be

		 * intelligent enough to determine the missing

		 * CmdSN and issue a retry to plug the sequence.

 immed_ret == IMMEDIATE_DATA_CANNOT_RECOVER */

	/*

	 * Allocation iovecs needed for struct socket operations for

	 * traditional iSCSI block I/O.

 iscsit_map_iovec has already checked for invalid sg pointers */

 iSCSI write */

		/*

		 * Special case for dealing with Unsolicited DataOUT

		 * and Unsupported SAM WRITE Opcodes and SE resource allocation

		 * failures;

 Something's amiss if we're not in WRITE_PENDING state... */

			/*

			 * Check if a delayed TASK_ABORTED status needs to

			 * be sent now if the ISCSI_FLAG_CMD_FINAL has been

			 * received with the unsolicited data out.

		/*

		 * For the normal solicited data path:

		 *

		 * Check for a delayed TASK_ABORTED status and dump any

		 * incoming data out payload if one exists.  Also, when the

		 * ISCSI_FLAG_CMD_FINAL is set to denote the end of the current

		 * data out sequence, we decrement outstanding_r2ts.  Once

		 * outstanding_r2ts reaches zero, go ahead and send the delayed

		 * TASK_ABORTED status.

	/*

	 * Perform DataSN, DataSequenceInOrder, DataPDUInOrder, and

	 * within-command recovery checks before receiving the payload.

	/*

	 * Increment post receive data and CRC values or perform

	 * within-command recovery.

		/*

		 * Handle extra special case for out of order

		 * Unsolicited Data Out.

 DATAOUT_CANNOT_RECOVER */

	/*

	 * This is not a response to a Unsolicited NopIN, which means

	 * it can either be a NOPOUT ping request (with a valid ITT),

	 * or a NOPOUT not requesting a NOPIN (with a reserved ITT).

	 * Either way, make sure we allocate an struct iscsi_cmd, as both

	 * can contain ping data.

	/*

	 * Initiator is expecting a NopIN ping reply..

	/*

	 * This was a response to a unsolicited NOPIN ping.

	/*

	 * Otherwise, initiator is not expecting a NOPIN is response.

	 * Just ignore for now.

	/*

	 * Handle NOP-OUT payload for traditional iSCSI sockets

					/*

					 * Silently drop this PDU and let the

					 * initiator plug the CmdSN gap.

		/*

		 * Attach ping data to struct iscsi_cmd->buf_ptr.

	/*

	 * TASK_REASSIGN for ERL=2 / connection stays inside of

	 * LIO-Target $FABRIC_MOD

	/*

	 * Locate the struct se_lun for all TMRs not related to ERL=2 TASK_REASSIGN

		/*

		 * Perform sanity checks on the ExpDataSN only if the

		 * TASK_REASSIGN was successful.

	/*

	 * Found the referenced task, send to transport for processing.

	/*

	 * Could not find the referenced LUN, task, or Task Management

	 * command not authorized or supported.  Change state and

	 * let the tx_thread send the response.

	 *

	 * For connection recovery, this is also the default action for

	 * TMR TASK_REASSIGN.

 #warning FIXME: Support Text Command parameters besides SendTargets */

 '=' confirmed in strncmp */

					/*

					 * Silently drop this PDU and let the

					 * initiator plug the CmdSN gap.

	/*

	 * A Logout Request with a CLOSECONNECTION reason code for a CID

	 * can arrive on a connection with a differing CID.

		/*

		 * Handle all different cid CLOSECONNECTION requests in

		 * iscsit_logout_post_handler_diffcid() as to give enough

		 * time for any non immediate command's CmdSN to be

		 * acknowledged on the connection in question.

		 *

		 * Here we simply make sure the CID is still around.

	/*

	 * We need to sleep in these cases (by returning 1) until the Logout

	 * Response gets sent in the tx thread.

	/*

	 * Immediate commands are executed, well, immediately.

	 * Non-Immediate Logout Commands are executed in CmdSN order.

	/*

	 * SNACK_DATA and SNACK_R2T are both 0,  so check which function to

	 * call from inside iscsi_send_recovery_datain_or_r2t().

 FIXME: Support R-Data SNACK */

		/*

		 * Special case: length of immediate data exceeds the data

		 * buffer size derived from the CDB.

/* #warning iscsi_build_conn_drop_async_message() only sends out on connections

	/*

	 * Only send a Asynchronous Message on connections whos network

	 * interface is still functional.

	/*

	 * Be paranoid and double check the logic for now.

	/*

	 * Special case for successfully execution w/ both DATAIN

	 * and Sense Data.

	/*

	 * The actual shutting down of Sessions and/or Connections

	 * for CLOSESESSION and CLOSECONNECTION Logout Requests

	 * is done in scsi_logout_post_handler().

		/*

		 * For CLOSECONNECTION logout requests carrying

		 * a matching logout CID -> local CID, the reference

		 * for the local CID will have been incremented in

		 * iscsi_logout_closeconnection().

		 *

		 * For CLOSECONNECTION logout requests carrying

		 * a different CID than the connection it arrived

		 * on, the connection responding to cmd->logout_cid

		 * is stopped in iscsit_logout_post_handler_diffcid().

		/*

		 * If the connection is still active from our point of view

		 * force connection recovery to occur.

/*

 *	Unsolicited NOPIN, either requesting a response or not.

	/*

	 * NOPOUT Ping Data is attached to struct iscsi_cmd->buf_ptr.

	 * NOPOUT DataSegmentLength is at struct iscsi_cmd->buf_ptr_size.

/*

 *	@recovery: If called from iscsi_task_reassign_complete_write() for

 *		connection recovery.

	/*

	 * Attach SENSE DATA payload to iSCSI Response PDU

 iqn + "TargetName=" + \0 */

	/*

	 * Locate pointer to iqn./eui. string for ICF_SENDTARGETS_SINGLE

	 * explicit case..

		/*

		 * Skip over '=' character..

			/* If demo_mode_discovery=0 and generate_node_acls=0

			 * (demo mode dislabed) do not return

			 * TargetName+TargetAddress unless a NodeACL exists.

	/*

	 * Reset maxcmdsn_inc in multi-part text payload exchanges to

	 * correctly increment MaxCmdSN for each response answering a

	 * non immediate text request with a valid CmdSN.

	/*

	 * bitmap_id is assigned from iscsit_global->ts_bitmap from

	 * within iscsit_start_kthreads()

	 *

	 * Here we use bitmap_id to determine which CPU that this

	 * iSCSI connection's RX/TX threads will be scheduled to

	 * execute upon.

	/*

	 * This should never be reached..

 more drs */

 all done */

			/* Still must send status,

	/*

	 * Allow ourselves to be interrupted by SIGINT so that a

	 * connection recovery / failure event can be triggered externally.

		/*

		 * Ensure that both TX and RX per connection kthreads

		 * are scheduled to run on the same CPU.

	/*

	 * Avoid the normal connection failure code-path if this connection

	 * is still within LOGIN mode, and iscsi_np process context is

	 * responsible for cleaning up the early connection failure.

		/*

		 * Ensure that both TX and RX per connection kthreads

		 * are scheduled to run on the same CPU.

				/*

				 * Set the PDU to 0xff so it will intentionally

				 * hit default in the switch below.

	/*

	 * Allow ourselves to be interrupted by SIGINT so that a

	 * connection recovery / failure event can be triggered externally.

	/*

	 * Wait for iscsi_post_login_handler() to complete before allowing

	 * incoming iscsi/tcp socket I/O, and/or failing the connection.

	/*

	 * We expect this function to only ever be called from either RX or TX

	 * thread context via iscsit_close_connection() once the other context

	 * has been reset -> returned sleeping pre-handler state.

				/*

				 * LIO's abort path owns the cleanup for this,

				 * so put it back on the list and let

				 * aborted_task handle it.

	/*

	 * Always up conn_logout_comp for the traditional TCP and HW_OFFLOAD

	 * case just in case the RX Thread in iscsi_target_rx_opcode() is

	 * sleeping and the logout response never got sent because the

	 * connection failed.

	 *

	 * However for iser-target, isert_wait4logout() is using conn_logout_comp

	 * to signal logout response TX interrupt completion.  Go ahead and skip

	 * this for iser since isert_rx_opcode() does not wait on logout failure,

	 * and to avoid iscsi_conn pointer dereference in iser-target code.

	/*

	 * During Connection recovery drop unacknowledged out of order

	 * commands for this connection, and prepare the other commands

	 * for reallegiance.

	 *

	 * During normal operation clear the out of order commands (but

	 * do not free the struct iscsi_ooo_cmdsn's) and release all

	 * struct iscsi_cmds.

	/*

	 * Handle decrementing session or connection usage count if

	 * a logout response was not able to be sent because the

	 * connection failed.  Fall back to Session Recovery here.

	/*

	 * Attempt to let the Initiator know this connection failed by

	 * sending an Connection Dropped Async Message on another

	 * active connection.

	/*

	 * If connection reinstatement is being performed on this connection,

	 * up the connection reinstatement semaphore that is being blocked on

	 * in iscsit_cause_connection_reinstatement().

	/*

	 * If connection reinstatement is being performed on this connection

	 * by receiving a REMOVECONNFORRECOVERY logout request, up the

	 * connection wait rcfr semaphore that is being blocked on

	 * an iscsit_connection_reinstatement_rcfr().

	/*

	 * If any other processes are accessing this connection pointer we

	 * must wait until they have completed.

	/*

	 * Make sure that if one connection fails in an non ERL=2 iSCSI

	 * Session that they all fail.

	/*

	 * If this was not the last connection in the session, and we are

	 * performing session reinstatement or falling back to ERL=0, call

	 * iscsit_stop_session() without sleeping to shutdown the other

	 * active connections.

	/*

	 * If this was the last connection in the session and one of the

	 * following is occurring:

	 *

	 * Session Reinstatement is not being performed, and are falling back

	 * to ERL=0 call iscsit_close_session().

	 *

	 * Session Logout was requested.  iscsit_close_session() will be called

	 * elsewhere.

	 *

	 * Session Continuation is not being performed, start the Time2Retain

	 * handler and check if sleep_on_sess_wait_sem is active.

/*

 * If the iSCSI Session for the iSCSI Initiator Node exists,

 * forcefully shutdown the iSCSI NEXUS.

	/*

	 * transport_deregister_session_configfs() will clear the

	 * struct se_node_acl->nacl_sess pointer now as a iscsi_np process context

	 * can be setting it again with __transport_register_session() in

	 * iscsi_post_login_handler() again after the iscsit_stop_session()

	 * completes in iscsi_np context.

	/*

	 * If any other processes are accessing this session pointer we must

	 * wait until they have completed.  If we are in an interrupt (the

	 * time2retain handler) and contain and active session usage count we

	 * restart the timer and exit.

	/*

	 * Traditional iscsi/tcp will invoke this logic from TX thread

	 * context during session logout, so clear tx_thread_active and

	 * sleep if iscsit_close_connection() has not already occured.

	 *

	 * Since iser-target invokes this logic from it's own workqueue,

	 * always sleep waiting for RX/TX thread shutdown to complete

	 * within iscsit_close_connection().

/*

 *	Return of 0 causes the TX thread to restart.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains error recovery level two functions used by

 * the iSCSI Target driver.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

/*

 *	FIXME: Does RData SNACK apply here as well?

/*

 *	Called with cr->conn_recovery_cmd_lock help.

	/*

	 * Allocate an struct iscsi_conn_recovery for this connection.

	 * Each struct iscsi_cmd contains an struct iscsi_conn_recovery pointer

	 * (struct iscsi_cmd->cr) so we need to allocate this before preparing the

	 * connection's command list for connection recovery.

	/*

	 * Only perform connection recovery on ISCSI_OP_SCSI_CMD or

	 * ISCSI_OP_NOOP_OUT opcodes.  For all other opcodes call

	 * list_del_init(&cmd->i_conn_node); to release the command to the

	 * session pool and remove it from the connection's list.

	 *

	 * Also stop the DataOUT timer, which will be restarted after

	 * sending the TMR response.

		/*

		 * Special case where commands greater than or equal to

		 * the session's ExpCmdSN are attached to the connection

		 * list but not to the out of order CmdSN list.  The one

		 * obvious case is when a command with immediate data

		 * attached must only check the CmdSN against ExpCmdSN

		 * after the data is received.  The special case below

		 * is when the connection fails before data is received,

		 * but also may apply to other PDUs, so it has been

		 * made generic here.

		/*

		 * Add the struct iscsi_cmd to the connection recovery cmd list

	/*

	 * Fill in the various values in the preallocated struct iscsi_conn_recovery.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains iSCSI Target Portal Group related functions.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

	/*

	 * Save iscsi_ops pointer for special case discovery TPG that

	 * doesn't exist as se_wwn->wwn_group within configfs.

 First Assigned LIO Session ID */

	/*

	 * By default we disable authentication for discovery sessions,

	 * this can be changed with:

	 *

	 * /sys/kernel/config/target/iscsi/discovery_auth/enforce_discovery_auth

	/*

	 * Make sure that AuthMethod does not contain None as an option

	 * unless explictly disabled.  Set the default to CHAP if authentication

	 * is enforced (as per default), and remove the NONE option.

	/*

	 * iscsit_del_np() will shutdown struct iscsi_np when last TPG reference is released.

		/*

		 * We are the parent tpg network portal.  Release all of the

		 * child tpg_np's (eg: the non ISCSI_TCP ones) on our parent

		 * list first.

		/*

		 * We are not the parent ISCSI_TCP tpg network portal.  Release

		 * our own network portals from the child list.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains the iSCSI Target DataIN value generation functions.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

/*

 *	For Normal and Recovery DataSequenceInOrder=Yes and DataPDUInOrder=Yes.

/*

 *	For Normal and Recovery DataSequenceInOrder=No and DataPDUInOrder=Yes.

/*

 *	For Normal and Recovery DataSequenceInOrder=Yes and DataPDUInOrder=No.

/*

 *	For Normal and Recovery DataSequenceInOrder=No and DataPDUInOrder=No.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains the iSCSI Target specific utility functions.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

 ipv6_addr_equal() */

/*

 * May be called from software interrupt (timer) context for allocating

 * iSCSI NopINs.

	/*

	 * This is the proper method of checking received CmdSN against

	 * ExpCmdSN and MaxCmdSN values, as well as accounting for out

	 * or order CmdSNs due to multiple connection sessions and/or

	 * CRC failures.

/*

 * Commands may be received out of order if MC/S is in use.

 * Ensure they are executed in CmdSN order.

		/*

		 * Existing callers for iscsit_sequence_cmd() will silently

		 * ignore commands with CMDSN_LOWER_THAN_EXP, so force this

		 * return for CMDSN_MAXCMDSN_OVERRUN as well..

	/*

	 * Scan through the inactive connection recovery list's command list.

	 * If init_task_tag matches the command is still alligent.

	/*

	 * Scan through the active connection recovery list's command list.

	 * If init_task_tag matches the command is ready to be reassigned.

	/*

	* NOPIN timeout is disabled.

	/*

	 * Set iov_off used by padding and data digest tx_data() calls below

	 * in order to determine proper offset into cmd->iov_data[]

	/*

	 * Perform sendpage() for each page in the scatterlist

/*

 *      This function is used for mainly sending a ISCSI_TARG_LOGIN_RSP PDU

 *      back to the Initiator when an expection condition occurs with the

 *      errors set in status_class and status_detail.

 *

 *      Parameters:     iSCSI Connection, Status Class, Status Detail.

 *      Returns:        0 on success, -1 on error.

 Save initiator name, ip address and time, if it is a failed login */

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 * This file contains error recovery level zero functions used by

 * the iSCSI Target driver.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

/*

 *	Used to set values in struct iscsi_cmd that iscsit_dataout_check_sequence()

 *	checks against to determine a PDU's Offset+Length is within the current

 *	DataOUT Sequence.  Used for DataSequenceInOrder=Yes only.

	/*

	 * Still set seq_start_offset and seq_end_offset for Unsolicited

	 * DataOUT, even if DataSequenceInOrder=No.

	/*

	 * We do the within-command recovery checks here as it is

	 * the first function called in iscsi_check_pre_dataout().

	 * Basically, if we are in within-command recovery and

	 * the PDU does not contain the offset the sequence needs,

	 * dump the payload.

	 *

	 * This only applies to DataPDUInOrder=Yes, for

	 * DataPDUInOrder=No we only re-request the failed PDU

	 * and check that all PDUs in a sequence are received

	 * upon end of sequence.

		/*

		 * Set the struct iscsi_seq pointer to reuse later.

	/*

	 * Perform various MaxBurstLength and ISCSI_FLAG_CMD_FINAL sanity

	 * checks for the current Unsolicited DataOUT Sequence.

		/*

		 * Ignore ISCSI_FLAG_CMD_FINAL checks while DataPDUInOrder=No, end of

		 * sequence checks are handled in

		 * iscsit_dataout_datapduinorder_no_fbit().

	/*

	 * For DataSequenceInOrder=Yes: Check that the offset and offset+length

	 * is within range as defined by iscsi_set_dataout_sequence_values().

	 *

	 * For DataSequenceInOrder=No: Check that an struct iscsi_seq exists for

	 * offset+length tuple.

		/*

		 * Due to possibility of recovery DataOUT sent by the initiator

		 * fullfilling an Recovery R2T, it's best to just dump the

		 * payload here, instead of erroring out.

		/*

		 * Set the struct iscsi_seq pointer to reuse later.

	/*

	 * Perform various MaxBurstLength and ISCSI_FLAG_CMD_FINAL sanity

	 * checks for the current DataOUT Sequence.

		/*

		 * Ignore ISCSI_FLAG_CMD_FINAL checks while DataPDUInOrder=No, end of

		 * sequence checks are handled in

		 * iscsit_dataout_datapduinorder_no_fbit().

	/*

	 * Considering the target has no method of re-requesting DataOUT

	 * by DataSN, if we receieve a greater DataSN than expected we

	 * assume the functions for DataPDUInOrder=[Yes,No] below will

	 * handle it.

	 *

	 * If the DataSN is less than expected, dump the payload.

	/*

	 * For DataSequenceInOrder=Yes: If the offset is greater than the global

	 * DataPDUInOrder=Yes offset counter in struct iscsi_cmd a protcol error has

	 * occurred and fail the connection.

	 *

	 * For DataSequenceInOrder=No: If the offset is greater than the per

	 * sequence DataPDUInOrder=Yes offset counter in struct iscsi_seq a protocol

	 * error has occurred and fail the connection.

	/*

	 * The rest of this function is only called when DataPDUInOrder=No.

/*

 *	Called from iscsit_handle_data_out() before DataOUT Payload is received

 *	and CRC computed.

/*

 *	Called from iscsit_handle_data_out() after DataOUT Payload is received

 *	and CRC computed.

	/*

	 * Only start Time2Retain timer when the associated TPG is still in

	 * an ACTIVE (eg: not disabled or shutdown) state.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains the configfs implementation for iSCSI Target mode

 * from the LIO-Target Project.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

 Start items for lio_target_portal_cit */

 Stop items for lio_target_portal_cit */

 Start items for lio_target_np_cit */

 Skip over leading "[" */

 Terminate the unbracketed IPv6 address */

 Skip over the \0 */

 Terminate string for IP */

 Skip over ":" */

 Terminate string for IP */

 Skip over ":" */

	/*

	 * Assume ISCSI_TCP by default.  Other network portals for other

	 * iSCSI fabrics:

	 *

	 * Traditional iSCSI over SCTP (initial support)

	 * iSER/TCP (TODO, hardware available)

	 * iSER/SCTP (TODO, software emulation with osc-iwarp)

	 * iSER/IB (TODO, hardware available)

	 *

	 * can be enabled with attributes under

	 * sys/kernel/config/iscsi/$IQN/$TPG/np/$IP:$PORT/

	 *

 End items for lio_target_np_cit */

 Start items for lio_target_nacl_attrib_cit */

 End items for lio_target_nacl_attrib_cit */

 Start items for lio_target_nacl_auth_cit */

/*

 * One-way authentication userid

 End items for lio_target_nacl_auth_cit */

 Start items for lio_target_nacl_param_cit */

 End items for lio_target_nacl_param_cit */

 Start items for lio_target_acl_cit */

 End items for lio_target_acl_cit */

 Start items for lio_target_tpg_attrib_cit */

 End items for lio_target_tpg_attrib_cit */

 Start items for lio_target_tpg_auth_cit */

 End items for lio_target_tpg_auth_cit */

 Start items for lio_target_tpg_param_cit */

 Kill newline */			\

 End items for lio_target_tpg_param_cit */

 Start items for lio_target_tpg_cit */

 End items for lio_target_tpg_cit */

 Start items for lio_target_tiqn_cit */

	/*

	 * Only tpgt_# directory groups can be created below

	 * target/iscsi/iqn.superturodiskarry/

 Skip ahead of "tpgt_" */

		/*

		 * iscsit_tpg_disable_portal_group() assumes force=1

	/*

	 * iscsit_tpg_del_portal_group() assumes force=1

 End items for lio_target_tiqn_cit */

 Start LIO-Target TIQN struct contig_item lio_target_cit */

 End LIO-Target TIQN struct contig_lio_target_cit */

 Start lio_target_discovery_auth_cit */

		/*

		 * Reset the AuthMethod key to CHAP.

		/*

		 * Reset the AuthMethod key to CHAP,None

 End lio_target_discovery_auth_cit */

 Start functions for target_core_fabric_ops */

	/*

	 * iSCSI Initiator Session Identifier from RFC-3720.

	/*

	 * Only report fabric_prot_type if t10_pi has also been enabled

	 * for incoming ib_isert sessions.

/*

 * This function calls iscsit_inc_session_usage_count() on the

 * struct iscsi_session in question.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains main functions related to iSCSI Parameter negotiation.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

 skip 0x */

		/*

		 * For SessionType=Normal

		/*

		 * For SessionType=Discovery

 SRP, SPKM1, SPKM2 and KRB5 are unsupported */

			/*

			 * For non-leading connections, double check that the

			 * received InitiatorName matches the existing session's

			 * struct iscsi_node_acl.

	/*

	 * Before sending the last login response containing the transition

	 * bit for full-feature-phase, go ahead and start up TX/RX threads

	 * now to avoid potential resource allocation failures after the

	 * final login response has been sent.

	/*

	 * If iscsi_target_do_login_rx() has been invoked by ->sk_data_ready()

	 * before initial PDU processing in iscsi_target_start_negotiation()

	 * has completed, go ahead and retry until it's cleared.

	 *

	 * Otherwise if the TCP connection drops while this is occuring,

	 * iscsi_target_start_negotiation() will detect the failure, call

	 * cancel_delayed_work_sync(&conn->login_work), and cleanup the

	 * remaining iscsi connection resources from iscsi_np process context.

	/*

	 * LOGIN_FLAGS_READ_ACTIVE is cleared so that sk_data_ready

	 * could be triggered again after this.

	 *

	 * LOGIN_FLAGS_WRITE_ACTIVE is cleared after we successfully

	 * process a login PDU, so that sk_state_chage can do login

	 * cleanup as needed if the socket is closed. If a delayed work is

	 * ongoing (LOGIN_FLAGS_WRITE_ACTIVE or LOGIN_FLAGS_READ_ACTIVE),

	 * sk_state_change will leave the cleanup to the delayed work or

	 * it will schedule a delayed work to do cleanup.

	/*

	 * If the TCP connection has dropped, go ahead and set LOGIN_FLAGS_CLOSED,

	 * but only queue conn->login_work -> iscsi_target_do_login_rx()

	 * processing if LOGIN_FLAGS_INITIAL_PDU has already been cleared.

	 *

	 * When iscsi_target_do_login_rx() runs, iscsi_target_sk_check_close()

	 * will detect the dropped TCP connection from delayed workqueue context.

	 *

	 * If LOGIN_FLAGS_INITIAL_PDU is still set, which means the initial

	 * iscsi_target_start_negotiation() is running, iscsi_target_do_login()

	 * via iscsi_target_sk_check_close() or iscsi_target_start_negotiation()

	 * via iscsi_target_sk_check_and_clear() is responsible for detecting the

	 * dropped TCP connection in iscsi_np process context, and cleaning up

	 * the remaining iscsi connection resources.

/*

 *	NOTE: We check for existing sessions or connections AFTER the initiator

 *	has been successfully authenticated in order to protect against faked

 *	ISID/TSIH combinations.

				/*

				 * Check to make sure the TCP connection has not

				 * dropped asynchronously while session reinstatement

				 * was occuring in this kthread context, before

				 * transitioning to full feature phase operation.

/*

 * Processes the first Login Request..

	/*

	 * Locate the initial keys expected from the Initiator node in

	 * the first login request in order to progress with the login phase.

	/*

	 * See 5.3.  Login Phase.

	/*

	 * Convert the incoming InitiatorName to lowercase following

	 * RFC-3720 3.2.6.1. section c) that says that iSCSI IQNs

	 * are NOT case sensitive.

	/*

	 * Use default portal group for discovery sessions.

		/*

		 * Setup crc32c modules from libcrypto

		/*

		 * Serialize access across the discovery struct iscsi_portal_group to

		 * process login attempt.

	/*

	 * Locate Target IQN from Storage Node.

	/*

	 * Locate Target Portal Group from Storage Node.

	/*

	 * Setup crc32c modules from libcrypto

	/*

	 * Serialize access across the struct iscsi_portal_group to

	 * process login attempt.

	/*

	 * conn->sess->node_acl will be set when the referenced

	 * struct iscsi_session is located from received ISID+TSIH in

	 * iscsi_login_non_zero_tsih_s2().

	/*

	 * This value is required in iscsi_login_zero_tsih_s2()

	/*

	 * Locate incoming Initiator IQN reference from Storage Node.

	/*

	 * Setup pre-allocated tags based upon allowed per NodeACL CmdSN

	 * depth for non immediate commands, plus extra tags for immediate

	 * commands.

	 *

	 * Also enforce a ISCSIT_MIN_TAGS to prevent unnecessary contention

	 * in per-cpu-ida tag allocation logic + small queue_depth.

	/*

	 * If iscsi_target_do_login returns zero to signal more PDU

	 * exchanges are required to complete the login, go ahead and

	 * clear LOGIN_FLAGS_INITIAL_PDU but only if the TCP connection

	 * is still active.

	 *

	 * Otherwise if TCP connection dropped asynchronously, go ahead

	 * and perform connection cleanup now.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * This file contains error recovery level one used by the iSCSI Target driver.

 *

 * (c) Copyright 2007-2013 Datera, Inc.

 *

 * Author: Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

/*

 *	Used to dump excess datain payload for certain error recovery

 *	situations.  Receive in OFFLOAD_BUF_SIZE max of datain per rx_data().

 *

 *	dump_padding_digest denotes if padding and data digests need

 *	to be dumped.

/*

 *	Used for retransmitting R2Ts from a R2T SNACK request.

	/*

	 * If the struct iscsi_r2t has not been sent yet, we can safely

	 * ignore retransmission

	 * of the R2TSN in question.

	/*

	 * Make sure the initiator is not requesting retransmission

	 * of R2TSNs already acknowledged by a TMR TASK_REASSIGN.

/*

 *	Generates Offsets and NextBurstLength based on Begrun and Runlength

 *	carried in a Data SNACK or ExpDataSN in TMR TASK_REASSIGN.

 *

 *	For DataSequenceInOrder=Yes and DataPDUInOrder=[Yes,No] only.

 *

 *	FIXME: How is this handled for a RData SNACK?

/*

 *	Generates Offsets and NextBurstLength based on Begrun and Runlength

 *	carried in a Data SNACK or ExpDataSN in TMR TASK_REASSIGN.

 *

 *	For DataSequenceInOrder=No and DataPDUInOrder=[Yes,No] only.

 *

 *	FIXME: How is this handled for a RData SNACK?

	/*

	 * Calculate read_data_done for all sequences containing a

	 * first_datasn and last_datasn less than the BegRun.

	 *

	 * Locate the struct iscsi_seq the BegRun lies within and calculate

	 * NextBurstLenghth up to the DataSN based on MaxRecvDataSegmentLength.

	 *

	 * Also use struct iscsi_seq->seq_send_order to determine where to start.

		/*

		 * No data has been transferred for this DataIN sequence, so the

		 * seq->first_datasn and seq->last_datasn have not been set.

		/*

		 * This DataIN sequence is precedes the received BegRun, add the

		 * total xfer_len of the sequence to read_data_done and reset

		 * seq->pdu_send_order.

		/*

		 * The BegRun lies within this DataIN sequence.

			/*

			 * For DataPDUInOrder=Yes, while the first DataSN of

			 * the sequence is less than the received BegRun, add

			 * the MaxRecvDataSegmentLength to read_data_done and

			 * to the sequence's next_burst_len;

			 *

			 * For DataPDUInOrder=No, while the first DataSN of the

			 * sequence is less than the received BegRun, find the

			 * struct iscsi_pdu of the DataSN in question and add the

			 * MaxRecvDataSegmentLength to read_data_done and to the

			 * sequence's next_burst_len;

		/*

		 * This DataIN sequence is larger than the received BegRun,

		 * reset seq->pdu_send_order and continue.

	/*

	 * Make sure the initiator is not requesting retransmission

	 * of DataSNs already acknowledged by a Data ACK SNACK.

	/*

	 * Make sure BegRun and RunLength in the Data SNACK are sane.

	 * Note: (cmd->data_sn - 1) will carry the maximum DataSN sent.

	/*

	 * FIXME: This will not work for bidi commands.

 #warning FIXME: Status SNACK needs to be dependent on OPCODE!!! */

	/*

	 * For Data ACK SNACK, BegRun is the next expected DataSN.

	 * (see iSCSI v19: 10.16.6)

	/*

	 * Get an struct iscsi_pdu pointer to the first PDU, and total PDU count

	 * of the DataOUT sequence.

	/*

	 * Loop through the ending DataOUT Sequence checking each struct iscsi_pdu.

	 * The following ugly logic does batching of not received PDUs.

		/*

		 * Set recovery = 1 for any missing, CRC failed, or timed

		 * out PDUs to let the DataOUT logic know that this sequence

		 * has not been completed yet.

		 *

		 * Also, only send a Recovery R2T for ISCSI_PDU_NOT_RECEIVED.

		 * We assume if the PDU either failed CRC or timed out

		 * that a Recovery R2T has already been sent.

	/*

	 * We attach the struct iscsi_ooo_cmdsn entry to the out of order

	 * list in increasing CmdSN order.

	 * This allows iscsi_execute_ooo_cmdsns() to detect any

	 * additional CmdSN holes while performing delayed execution.

		/*

		 * CmdSN is greater than the tail of the list.

			/*

			 * CmdSN is either lower than the head,  or somewhere

			 * in the middle.

 Insert before this entry */

/*

 *	Removes an struct iscsi_ooo_cmdsn from a session's list,

 *	called with struct iscsi_session->cmdsn_mutex held.

/*

 *	Called either:

 *

 *	1. With sess->cmdsn_mutex held from iscsi_execute_ooo_cmdsns()

 *	or iscsi_check_received_cmdsn().

 *	2. With no locks held directly from iscsi_handle_XXX_pdu() functions

 *	for immediate commands.

		/*

		 * Go ahead and send the CHECK_CONDITION status for

		 * any SCSI CDB exceptions that may have occurred.

		/*

		 * Special case for delayed CmdSN with Immediate

		 * Data and/or Unsolicited Data Out attached.

		/*

		 * The default handler.

/*

 *	NOTE: Called from interrupt (timer) context.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016 Chelsio Communications, Inc.

		/**

		 * No point in stalling here when np_thread

		 * is in state RESET/SHUTDOWN/EXIT - bail

/*

 * CPL connection rx data ack: host ->

 * Send RX credits through an RX_DATA_ACK CPL message.

 * Returns the number of credits sent.

	/*

	 * Specify the largest window that will fit in opt0. The

	 * remainder will be specified in the rx_data_ack.

 Find output route */

	/*

	 * Return the number of 16-byte credits used by the flowc request.

	 * Pass back the nparams and actual flowc length if requested.

  set up ulp submode */

 simultaneous close */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016 Chelsio Communications, Inc.

/*

 * cxgbit_is_ofld_imm - check whether a packet can be sent as immediate data

 * @skb: the packet

 *

 * Returns true if a packet can be sent as an offload WR with immediate

 * data.  We currently use the same limit as for Ethernet packets.

/*

 * cxgbit_sgl_len - calculates the size of an SGL of the given capacity

 * @n: the number of SGL entries

 * Calculates the number of flits needed for a scatter/gather list that

 * can hold the given number of entries.

/*

 * cxgbit_calc_tx_flits_ofld - calculate # of flits for an offload packet

 * @skb: the packet

 *

 * Returns the number of flits needed for the given offload packet.

 * These packets are already fully constructed and no additional headers

 * will be added.

		/*

		 * Assumes the initial credits is large enough to support

		 * fw_flowc_wr plus largest possible first payload

	/*

	 * We know each entry in t_data_sg contains a page.

/*

 * cxgbit_seq_pdu_inorder()

 * @csk: pointer to cxgbit socket structure

 *

 * This function checks whether data sequence and data

 * pdu are in order.

 *

 * Return: returns -1 on error, 0 if data sequence and

 * data pdu are in order, 1 if data sequence or data pdu

 * is not in order.

	/*

	 * Special case for Unsupported SAM WRITE Opcodes and ImmediateData=Yes.

		/*

		 * A PDU/CmdSN carrying Immediate Data passed

		 * DataCRC, check against ExpCmdSN/MaxCmdSN if

		 * Immediate Bit is not set.

		/*

		 * Immediate Data failed DataCRC and ERL>=1,

		 * silently drop this PDU and let the initiator

		 * plug the CmdSN gap.

		 *

		 * FIXME: Send Unsolicited NOPIN with reserved

		 * TTT here to help the initiator figure out

		 * the missing CmdSN, although they should be

		 * intelligent enough to determine the missing

		 * CmdSN and issue a retry to plug the sequence.

 immed_ret == IMMEDIATE_DATA_CANNOT_RECOVER */

			/*

			 * drop this PDU and let the

			 * initiator plug the CmdSN gap.

	/*

	 * Handle NOP-OUT payload for traditional iSCSI sockets

		/*

		 * Attach ping data to struct iscsi_cmd->buf_ptr.

			/*

			 * drop this PDU and let the

			 * initiator plug the CmdSN gap.

	/*

	 * Setup the initial iscsi_login values from the leading

	 * login request PDU.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016 Chelsio Communications, Inc.

 cdev list lock */

 48(BHS) + 256(AHS) + 8(Digest) */

 usually there's just one frag */

 get a reference to the last page, we don't own it */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016 Chelsio Communications, Inc.

	/*

	 * the fifth address needs to be repeated in the next ppod, so do

	 * not move sg

	/*

	 * the ddp tag will be used for the ttt in the outgoing r2t pdu

			/* Abort the TCP conn if DDP is not complete to

			 * avoid any possibility of DDP after freeing

			 * the cmd.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010 Cisco Systems, Inc.

 XXX TBD some includes may be extraneous */

/*

 * Dump cmd state for debugging.

 undo get from lookup at recv */

/*

 * Send response.

	/*

	 * Test underflow and overflow with one mask.  Usually both are off.

	 * Bidirectional commands are not handled yet.

	/*

	 * Send response.

		/*

		 * Generate a TASK_SET_FULL status to notify the initiator

		 * to reduce it's queue_depth after the se_cmd response has

		 * been re-queued by target-core.

	/*

	 * Drop the extra ACK_KREF reference taken by target_submit_cmd()

	 * ahead of ft_check_stop_free() -> transport_generic_free_cmd()

	 * final se_cmd->cmd_kref put.

/*

 * Send TX_RDY (transfer ready).

 Signal QUEUE_FULL */

 Only if it is 'Exchange Responder' */

		/* Target is 'exchange responder' and sending XFER_READY

		 * to 'exchange initiator (initiator)'

/*

 * FC sequence response handler for follow-on sequences (data) and aborts.

 XXX need to find cmd if queued */

 write data */

 command */

 transfer ready */

 transfer ready */

/*

 * Send a FCP response including SCSI status and optional FCP rsp_code.

 * status is SAM_STAT_GOOD (zero) iff code is valid.

 * This is used in error cases, such as allocation failures.

/*

 * Send error or task management response.

/*

 * Send error or task management response.

 * Always frees the cmd and associated state.

/*

 * Handle Task Management Request.

		/*

		 * FCP4r01 indicates having a combination of

		 * tm_flags set is invalid.

 FIXME: Add referenced task tag for ABORT_TASK */

/*

 * Send status from completed task management request.

	/*

	 * Drop the extra ACK_KREF reference taken by target_submit_tmr()

	 * ahead of ft_check_stop_free() -> transport_generic_free_cmd()

	 * final se_cmd->cmd_kref put.

/*

 * Handle incoming FCP command.

 hold frame during cmd */

 undo get from lookup */

/*

 * Handle incoming FCP frame.

 * Caller has verified that the frame is type FCP.

 command */

 write data */

 transfer ready */

 SRR, perhaps */

 undo get from lookup */

/*

 * Send new command to target.

 not handling longer CDBs yet */

	/*

	 * Check for FCP task management flags

 TBD not supported by tcm_fc yet */

	/*

	 * Locate the SAM Task Attr from fc_pri_ta

	/*

	 * Use a single se_cmd->cmd_kref as we expect to release se_cmd

	 * directly from ft_check_stop_free callback in response path.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010 Cisco Systems, Inc.

 *

 * Portions based on tcm_loop_fabric_scsi.c and libfc/fc_fcp.c

 *

 * Copyright (c) 2007 Intel Corporation. All rights reserved.

 * Copyright (c) 2008 Red Hat, Inc.  All rights reserved.

 * Copyright (c) 2008 Mike Christie

 * Copyright (c) 2009 Rising Tide, Inc.

 * Copyright (c) 2009 Linux-iSCSI.org

 * Copyright (c) 2009 Nicholas A. Bellinger <nab@linux-iscsi.org>

 XXX TBD some includes may be extraneous */

/*

 * Deliver read data back to initiator.

 * XXX TBD handle resource problems later.

	/*

	 * Setup to use first mem list entry, unless no data.

 no scatter/gather in skb for odd word length due to fc_seq_send() */

			/*

			 * If lport's has capability of Large Send Offload LSO)

			 * , then allow 'frame_len' to be as big as 'lso_max'

			 * if indicated transfer length is >= lport->lso_max

			/*

			 * Setup the frame's max payload which is used by base

			 * driver to indicate HW about max frame size, so that

			 * HW can do fragmentation appropriately based on

			 * "gso_max_size" of underline netdev.

			/*

			 * Go ahead and set TASK_SET_FULL status ignoring the

			 * rest of the DataIN, and immediately attempt to

			 * send the response via ft_queue_status() in order

			 * to notify the initiator that it should reduce it's

			 * per LUN queue_depth.

/*

 * Receive write data frame.

		/*

		 * Since DDP (Large Rx offload) was setup for this request,

		 * payload is expected to be copied directly to user buffers.

		/*

		 * Invalidate HW DDP context if it was setup for respective

		 * command. Invalidation of HW DDP context is requited in both

		 * situation (success and error).

		/*

		 * If "Sequence Initiative (TSI)" bit set in f_ctl, means last

		 * write data frame is received successfully where payload is

		 * posted directly to user buffer and only the last frame's

		 * header is posted in receive queue.

		 *

		 * If "Sequence Initiative (TSI)" bit is not set, means error

		 * condition w.r.t. DDP, hence drop the packet and let explict

		 * ABORTS from other end of exchange timer trigger the recovery.

	/*

	 * Setup to use first mem list entry, unless no data.

/*

 * Handle and cleanup any HW specific resources if

 * received ABORTS, errors, timeouts.

 Cleanup the DDP context in HW if DDP was setup */

				/*

				 * "ddp_done" trigger invalidation of HW

				 * specific DDP context

				/*

				 * Resetting same variable to indicate HW's

				 * DDP context has been invalidated to avoid

				 * re_invalidation of same context (context is

				 * identified using ep->xid)

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010 Cisco Systems, Inc.

 XXX TBD some includes may be extraneous */

/*

 * Lookup or allocate target local port.

 * Caller holds ft_lport_lock.

/*

 * Delete a target local port.

 * Caller holds ft_lport_lock.

/*

 * Add local port.

 * Called thru fc_lport_iterate().

/*

 * Delete local port.

 * Called thru fc_lport_iterate().

/*

 * Notification of local port change from libfc.

 * Create or delete local port and associated tport.

/*

 * Hash function for FC_IDs.

/*

 * Find session in local port.

 * Sessions and hash lists are RCU-protected.

 * A reference is taken which must be eventually freed.

/*

 * Allocate session and enter it in the hash for the local port.

 * Caller holds ft_lport_lock.

 ref for table entry */

/*

 * Unhash the session.

 * Caller holds ft_lport_lock.

/*

 * Delete session from hash.

 * Caller holds ft_lport_lock.

/*

 * Delete all sessions from tport.

 * Caller holds ft_lport_lock.

 release from table */

/*

 * TCM ops for sessions.

/*

 * Remove session and send PRLO.

 * This is called when the ACL is being deleted or queue depth is changing.

 XXX Send LOGO or PRLO */

 let transport deregister happen */

 XXX TBD probably not what is needed */

/*

 * libfc ops involving sessions.

 not a target for this local port */

	/*

	 * If both target and initiator bits are off, the SPP is invalid.

	/*

	 * Create session (image pair) only if requested by

	 * EST_IMG_PAIR flag and if the requestor is an initiator.

 XXX TBD - clearing actions.  unit attn, see 4.10 */

	/*

	 * OR in our service parameters with other provider (initiator), if any.

/**

 * ft_prli() - Handle incoming or outgoing PRLI for the FCP target

 * @rdata: remote port private

 * @spp_len: service parameter page length

 * @rspp: received service parameter page (NULL for outgoing PRLI)

 * @spp: response service parameter page

 *

 * Returns spp response code.

 release from table */

 XXX TBD - clearing actions.  unit attn, see 4.10 */

/*

 * Handle incoming FCP request.

 * Caller has verified that the frame is type FCP.

 TBD XXX - if FCP_CMND, send PRLO */

 must do ft_sess_put() */

/*

 * Provider ops for libfc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*******************************************************************************

 * Filename:  tcm_fc.c

 *

 * This file contains the configfs implementation for TCM_fc fabric node.

 * Based on tcm_loop_configfs.c

 *

 * Copyright (c) 2010 Cisco Systems, Inc.

 * Copyright (c) 2009,2010 Rising Tide, Inc.

 * Copyright (c) 2009,2010 Linux-iSCSI.org

 *

 * Copyright (c) 2009,2010 Nicholas A. Bellinger <nab@linux-iscsi.org>

 *

/*

 * Parse WWN.

 * If strict, we require lower-case hex and colon separators to be sure

 * the name is the same as what would be generated by ft_format_wwn()

 * so the name and wwn are mapped one-to-one.

/*

 * ACL auth ops.

/*

 * ACL ops.

/*

 * Add ACL for an initiator.  The ACL is named arbitrarily.

 * The port_name and/or node_name are attributes.

/*

 * local_port port_group (tpg) ops.

	/*

	 * Name must be "tpgt_" followed by the index.

 Wait for sessions to be freed thru RCU, for BUG_ON below */

/*

 * Verify that an lport is configured to use the tcm_fc module, and return

 * the target port group that should be used.

 *

 * The caller holds ft_lport_lock.

/*

 * target config instance ops.

/*

 * Add lport to allowed config.

 * The name is the WWPN in lower-case ASCII, colon-separated bytes.

	/*

	 * This tag is used when forming SCSI Name identifier in EVPD=1 0x83

	 * to represent the SCSI Target Port.

	/*

	 * Setup function pointers for generic logic in

	 * target_core_fabric_configfs.c

/*******************************************************************************

 *

 * This file contains the Linux/SCSI LLD virtual SCSI initiator driver

 * for emulated SAS initiator ports

 *

 * © Copyright 2011-2013 Datera, Inc.

 *

 * Licensed to the Linux Foundation under the General Public License (GPL) version 2.

 *

 * Author: Nicholas A. Bellinger <nab@risingtidesystems.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or

 * (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 * Called from struct target_core_fabric_ops->check_stop_free()

/*

 * Used with root_device_register() in tcm_loop_alloc_core_bus() below

	/*

	 * Ensure that this tl_tpg reference from the incoming sc->device->id

	 * has already been configured via tcm_loop_make_naa_tpg().

		/*

		 * loopback transport doesn't support

		 * WRITE_GENERATE, READ_STRIP protection

		 * information operations, go ahead unprotected.

/*

 * ->queuecommand can be and usually is called from interrupt context, so

 * defer the actual submission to a workqueue.

/*

 * Called from SCSI EH process context to issue a LUN_RESET TMR

 * to struct scsi_device

	/*

	 * Locate the tl_nexus and se_sess pointers

	/*

	 * Locate the tcm_loop_hba_t pointer

/*

 * Called from SCSI EH process context to issue a LUN_RESET TMR

 * to struct scsi_device

	/*

	 * Locate the tcm_loop_hba_t pointer

	/*

	 * Locate the tcm_loop_hba_t pointer

	/*

	 * Locate the tl_tpg pointer from TargetID in sc->device->id

	/*

	 * Assign the struct tcm_loop_hba pointer to struct Scsi_Host->hostdata

	/*

	 * Setup single ID, Channel and LUN for now..

/*

 * Called from tcm_loop_make_scsi_hba() in tcm_loop_configfs.c

/*

 * Called from tcm_loop_fabric_init() in tcl_loop_fabric.c to load the emulated

 * tcm_loop SCSI bus.

	/*

	 * Return the passed NAA identifier for the Target Port

	/*

	 * This Tag is used when forming SCSI Name identifier in EVPD=1 0x83

	 * to represent the SCSI Target Port.

/*

 * Returning (1) here allows for target_core_mod struct se_node_acl to be generated

 * based upon the incoming fabric dependent SCSI Initiator Port

/*

 * Allow I_T Nexus full READ-WRITE access without explict Initiator Node ACLs for

 * local virtual Linux/SCSI LLD passthrough into VM hypervisor guest

/*

 * Because TCM_Loop does not use explict ACLs and MappedLUNs, this will

 * never be called for TCM_Loop by target_core_fabric_configfs.c code.

 * It has been added here as a nop for target_fabric_tf_ops_check()

	/*

	 * Since Linux/SCSI has already sent down a struct scsi_cmnd

	 * sc->sc_data_direction of DMA_TO_DEVICE with struct scatterlist array

	 * memory, and memory has already been mapped to struct se_cmd->t_mem_list

	 * format with transport_generic_map_mem_to_cmd().

	 *

	 * We now tell TCM to add this WRITE CDB directly into the TCM storage

	 * object execution queue.

 Wake up tcm_loop_issue_tmr(). */

 Start items for tcm_loop_port_cit */

	/*

	 * Add Linux/SCSI struct scsi_device by HCTL

	/*

	 * Remove Linux/SCSI struct scsi_device by HCTL

 End items for tcm_loop_port_cit */

 Start items for tcm_loop_nexus_cit */

	/*

	 * Release the SCSI I_T Nexus to the emulated Target Port

 End items for tcm_loop_nexus_cit */

	/*

	 * Shutdown the active I_T nexus if 'NULL' is passed..

	/*

	 * Otherwise make sure the passed virtual Initiator port WWN matches

	 * the fabric protocol_id set in tcm_loop_make_scsi_hba(), and call

	 * tcm_loop_make_nexus()

 Skip over "fc." */

	/*

	 * Clear any trailing newline for the NAA WWN

 Start items for tcm_loop_naa_cit */

	/*

	 * Register the tl_tpg as a emulated TCM Target Endpoint

	/*

	 * Release the I_T Nexus for the Virtual target link if present

	/*

	 * Deregister the tl_tpg as a emulated TCM Target Endpoint

 End items for tcm_loop_naa_cit */

 Start items for tcm_loop_cit */

	/*

	 * Determine the emulated Protocol Identifier and Target Port Name

	 * based on the incoming configfs directory name.

 Skip over "fc." */

	/*

	 * Call device_register(tl_hba->dev) to register the emulated

	 * Linux/SCSI LLD of type struct Scsi_Host at tl_hba->sh after

	 * device_register() callbacks in tcm_loop_driver_probe()

	/*

	 * Call device_unregister() on the original tl_hba->dev.

	 * tcm_loop_fabric_scsi.c:tcm_loop_release_adapter() will

	 * release *tl_hba;

 Start items for tcm_loop_cit */

 End items for tcm_loop_cit */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SBP2 target driver (SCSI over IEEE1394 in target mode)

 *

 * Copyright (C) 2011  Chris Boot <bootc@bootc.net>

 FireWire address region for management and command block address handlers */

 unit_specifier_id: NCITS/T10 */

 unit_sw_version: 1155D Rev 4 */

 command_set_specifier_id: NCITS/T10 */

 command_set: SPC-2 */

 command_set_revision: 0 */

 firmware_revision: 1 */

 FIXME: abort/wait on tasks */

			/*

			 * SBP-2 R4 says we should return access denied, but

			 * that can confuse initiators. Instead we need to

			 * treat this like a reconnect, but send the login

			 * response block like a fresh login.

			 *

			 * This is required particularly in the case of Apple

			 * devices booting off the FireWire target, where

			 * the firmware has an active login to the target. When

			 * the OS takes control of the session it issues its own

			 * LOGIN rather than a RECONNECT. To avoid the machine

			 * waiting until the reconnect_hold expires, we can skip

			 * the ACCESS_DENIED errors to speed things up.

	/*

	 * check exclusive bit in login request

	 * reject with access_denied if any logins present

	/*

	 * check exclusive bit in any existing login descriptor

	 * reject with access_denied if any exclusive logins present

	/*

	 * check we haven't exceeded the number of allowed logins

	 * reject with resources_unavailable if we have

 only take the latest reconnect_hold into account */

 FIXME: implement */

 update the node details */

 could be called while tearing down the session */

 check for bus reset and make node_id invalid */

 still waiting for reconnect */

 reconnect timeout has expired */

 ignored */

 ignored as we don't send unsolicited status */

 turn offset into the offset from the start of the block */

 AGENT_STATE */

 AGENT_RESET */

 ORB_POINTER */

 DOORBELL */

 UNSOLICITED_STATUS_ENABLE */

 Format specified by this standard */

 Reserved for future standardization */

 Vendor-dependent */

 Dummy ORB */

 used to double-check we haven't been issued an AGENT_RESET */

 read in the ORB */

 check the next_ORB field */

 don't process this request, just check next_ORB */

 check if we should carry on processing */

/*

 * Simple wrapper around fw_run_transaction that retries the transaction several

 * times in case of failure, with an exponential backoff.

/*

 * Wrapper around sbp_run_transaction that gets the card, destination,

 * generation and speed out of the request's session.

 only used for printk until we do TMRs */

/*

 * DMA_TO_DEVICE = read from initiator (SCSI WRITE)

 * DMA_FROM_DEVICE = write to initiator (SCSI READ)

 FIXME: take page_size into account */

	/*

	 * Drop the extra ACK_KREF reference taken by target_submit_cmd()

	 * ahead of sbp_check_stop_free() -> transport_generic_free_cmd()

	 * final se_cmd->cmd_kref put.

 sfmt */

 current, fixed */

 deferred, fixed */

 current, descriptor */

 deferred, descriptor */

		/*

		 * TODO: SBP-3 specifies what we should do with descriptor

		 * format sense data

 status */

 valid */

 mark, eom, ili */

 sense_key */

 XXX sense_code */

 XXX sense_qualifier */

 information */

 CDB-dependent */

 fru */

 sense_key-dependent */

 fetch the ORB from the initiator */

 Response to ORB, next_ORB absent */

 write the status block back to the initiator */

/*

 * Called after command (no data transfer) or after the write (to device)

 * operation is completed

	/*

	 * Number of entries in the final unit directory:

	 *  - all of those in the template

	 *  - management_agent

	 *  - unit_characteristics

	 *  - reconnect_timeout

	 *  - unit unique ID

	 *  - one for each LUN

	 *

	 *  MUST NOT include leaf or sub-directory entries

 allocate num_entries + 4 for the header and unique ID leaf */

 directory_length */

 directory_id */

 unit directory template */

 management_agent */

 unit_characteristics */

 reconnect_timeout */

 unit unique ID (leaf is just after LUNs) */

		/*

		 * rcu_dereference_raw protected by se_lun->lun_group symlink

		 * reference to se_device->dev_group.

 logical_unit_number */

 unit unique ID leaf */

 default attribute values */

 XXX: force-shutdown sessions instead? */

 XXX: also check against current count? */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Cadence Design Systems Inc.

 *

 * Author: Boris Brezillon <boris.brezillon@bootlin.com>

/**

 * i3c_device_do_priv_xfers() - do I3C SDR private transfers directed to a

 *				specific device

 *

 * @dev: device with which the transfers should be done

 * @xfers: array of transfers

 * @nxfers: number of transfers

 *

 * Initiate one or several private SDR transfers with @dev.

 *

 * This function can sleep and thus cannot be called in atomic context.

 *

 * Return: 0 in case of success, a negative error core otherwise.

/**

 * i3c_device_get_info() - get I3C device information

 *

 * @dev: device we want information on

 * @info: the information object to fill in

 *

 * Retrieve I3C dev info.

/**

 * i3c_device_disable_ibi() - Disable IBIs coming from a specific device

 * @dev: device on which IBIs should be disabled

 *

 * This function disable IBIs coming from a specific device and wait for

 * all pending IBIs to be processed.

 *

 * Return: 0 in case of success, a negative error core otherwise.

/**

 * i3c_device_enable_ibi() - Enable IBIs coming from a specific device

 * @dev: device on which IBIs should be enabled

 *

 * This function enable IBIs coming from a specific device and wait for

 * all pending IBIs to be processed. This should be called on a device

 * where i3c_device_request_ibi() has succeeded.

 *

 * Note that IBIs from this device might be received before this function

 * returns to its caller.

 *

 * Return: 0 in case of success, a negative error core otherwise.

/**

 * i3c_device_request_ibi() - Request an IBI

 * @dev: device for which we should enable IBIs

 * @req: setup requested for this IBI

 *

 * This function is responsible for pre-allocating all resources needed to

 * process IBIs coming from @dev. When this function returns, the IBI is not

 * enabled until i3c_device_enable_ibi() is called.

 *

 * Return: 0 in case of success, a negative error core otherwise.

/**

 * i3c_device_free_ibi() - Free all resources needed for IBI handling

 * @dev: device on which you want to release IBI resources

 *

 * This function is responsible for de-allocating resources previously

 * allocated by i3c_device_request_ibi(). It should be called after disabling

 * IBIs with i3c_device_disable_ibi().

/**

 * i3cdev_to_dev() - Returns the device embedded in @i3cdev

 * @i3cdev: I3C device

 *

 * Return: a pointer to a device object.

/**

 * dev_to_i3cdev() - Returns the I3C device containing @dev

 * @dev: device object

 *

 * Return: a pointer to an I3C device object.

/**

 * i3c_device_match_id() - Returns the i3c_device_id entry matching @i3cdev

 * @i3cdev: I3C device

 * @id_table: I3C device match table

 *

 * Return: a pointer to an i3c_device_id object or NULL if there's no match.

/**

 * i3c_driver_register_with_owner() - register an I3C device driver

 *

 * @drv: driver to register

 * @owner: module that owns this driver

 *

 * Register @drv to the core.

 *

 * Return: 0 in case of success, a negative error core otherwise.

/**

 * i3c_driver_unregister() - unregister an I3C device driver

 *

 * @drv: driver to unregister

 *

 * Unregister @drv.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Cadence Design Systems Inc.

 *

 * Author: Boris Brezillon <boris.brezillon@bootlin.com>

/**

 * i3c_bus_maintenance_lock - Lock the bus for a maintenance operation

 * @bus: I3C bus to take the lock on

 *

 * This function takes the bus lock so that no other operations can occur on

 * the bus. This is needed for all kind of bus maintenance operation, like

 * - enabling/disabling slave events

 * - re-triggering DAA

 * - changing the dynamic address of a device

 * - relinquishing mastership

 * - ...

 *

 * The reason for this kind of locking is that we don't want drivers and core

 * logic to rely on I3C device information that could be changed behind their

 * back.

/**

 * i3c_bus_maintenance_unlock - Release the bus lock after a maintenance

 *			      operation

 * @bus: I3C bus to release the lock on

 *

 * Should be called when the bus maintenance operation is done. See

 * i3c_bus_maintenance_lock() for more details on what these maintenance

 * operations are.

/**

 * i3c_bus_normaluse_lock - Lock the bus for a normal operation

 * @bus: I3C bus to take the lock on

 *

 * This function takes the bus lock for any operation that is not a maintenance

 * operation (see i3c_bus_maintenance_lock() for a non-exhaustive list of

 * maintenance operations). Basically all communications with I3C devices are

 * normal operations (HDR, SDR transfers or CCC commands that do not change bus

 * state or I3C dynamic address).

 *

 * Note that this lock is not guaranteeing serialization of normal operations.

 * In other words, transfer requests passed to the I3C master can be submitted

 * in parallel and I3C master drivers have to use their own locking to make

 * sure two different communications are not inter-mixed, or access to the

 * output/input queue is not done while the engine is busy.

/**

 * i3c_bus_normaluse_unlock - Release the bus lock after a normal operation

 * @bus: I3C bus to release the lock on

 *

 * Should be called when a normal operation is done. See

 * i3c_bus_normaluse_lock() for more details on what these normal operations

 * are.

 Addresses 0 to 7 are reserved. */

	/*

	 * Reserve broadcast address and all addresses that might collide

	 * with the broadcast address when facing a single bit error.

	/*

	 * I3C/I2C frequency may have been overridden, check that user-provided

	 * values are not exceeding max possible frequency.

/**

 * i3c_master_get_free_addr() - get a free address on the bus

 * @master: I3C master object

 * @start_addr: where to start searching

 *

 * This function must be called with the bus lock held in write mode.

 *

 * Return: the first free address starting at @start_addr (included) or -ENOMEM

 * if there's no more address available.

/**

 * i3c_master_entdaa_locked() - start a DAA (Dynamic Address Assignment)

 *				procedure

 * @master: master used to send frames on the bus

 *

 * Send a ENTDAA CCC command to start a DAA procedure.

 *

 * Note that this function only sends the ENTDAA CCC command, all the logic

 * behind dynamic address assignment has to be handled in the I3C master

 * driver.

 *

 * This function must be called with the bus lock held in write mode.

 *

 * Return: 0 in case of success, a positive I3C error code if the error is

 * one of the official Mx error codes, and a negative error code otherwise.

/**

 * i3c_master_disec_locked() - send a DISEC CCC command

 * @master: master used to send frames on the bus

 * @addr: a valid I3C slave address or %I3C_BROADCAST_ADDR

 * @evts: events to disable

 *

 * Send a DISEC CCC command to disable some or all events coming from a

 * specific slave, or all devices if @addr is %I3C_BROADCAST_ADDR.

 *

 * This function must be called with the bus lock held in write mode.

 *

 * Return: 0 in case of success, a positive I3C error code if the error is

 * one of the official Mx error codes, and a negative error code otherwise.

/**

 * i3c_master_enec_locked() - send an ENEC CCC command

 * @master: master used to send frames on the bus

 * @addr: a valid I3C slave address or %I3C_BROADCAST_ADDR

 * @evts: events to disable

 *

 * Sends an ENEC CCC command to enable some or all events coming from a

 * specific slave, or all devices if @addr is %I3C_BROADCAST_ADDR.

 *

 * This function must be called with the bus lock held in write mode.

 *

 * Return: 0 in case of success, a positive I3C error code if the error is

 * one of the official Mx error codes, and a negative error code otherwise.

/**

 * i3c_master_defslvs_locked() - send a DEFSLVS CCC command

 * @master: master used to send frames on the bus

 *

 * Send a DEFSLVS CCC command containing all the devices known to the @master.

 * This is useful when you have secondary masters on the bus to propagate

 * device information.

 *

 * This should be called after all I3C devices have been discovered (in other

 * words, after the DAA procedure has finished) and instantiated in

 * &i3c_master_controller_ops->bus_init().

 * It should also be called if a master ACKed an Hot-Join request and assigned

 * a dynamic address to the device joining the bus.

 *

 * This function must be called with the bus lock held in write mode.

 *

 * Return: 0 in case of success, a positive I3C error code if the error is

 * one of the official Mx error codes, and a negative error code otherwise.

 No other master on the bus, skip DEFSLVS. */

 Skip the I3C dev representing this master. */

	/*

	 * When the device does not have IBI payload GETMRL only returns 2

	 * bytes of data.

	/*

	 * ->init_dyn_addr should have been reserved before that, so, if we're

	 * trying to apply a pre-reserved dynamic address, we should not try

	 * to reserve the address slot a second time.

	/*

	 * We don't attach devices to the controller until they are

	 * addressable on the bus.

 Do not attach the master device itself. */

 Do not detach the master device itself. */

/**

 * i3c_master_do_daa() - do a DAA (Dynamic Address Assignment)

 * @master: master doing the DAA

 *

 * This function is instantiating an I3C device object and adding it to the

 * I3C device list. All device information are automatically retrieved using

 * standard CCC commands.

 *

 * The I3C device object is returned in case the master wants to attach

 * private data to it using i3c_dev_set_master_data().

 *

 * This function must be called with the bus lock held in write mode.

 *

 * Return: a 0 in case of success, an negative error code otherwise.

/**

 * i3c_master_set_info() - set master device information

 * @master: master used to send frames on the bus

 * @info: I3C device information

 *

 * Set master device info. This should be called from

 * &i3c_master_controller_ops->bus_init().

 *

 * Not all &i3c_device_info fields are meaningful for a master device.

 * Here is a list of fields that should be properly filled:

 *

 * - &i3c_device_info->dyn_addr

 * - &i3c_device_info->bcr

 * - &i3c_device_info->dcr

 * - &i3c_device_info->pid

 * - &i3c_device_info->hdr_cap if %I3C_BCR_HDR_CAP bit is set in

 *   &i3c_device_info->bcr

 *

 * This function must be called with the bus lock held in maintenance mode.

 *

 * Return: 0 if @info contains valid information (not every piece of

 * information can be checked, but we can at least make sure @info->dyn_addr

 * and @info->bcr are correct), -EINVAL otherwise.

/**

 * i3c_master_bus_init() - initialize an I3C bus

 * @master: main master initializing the bus

 *

 * This function is following all initialisation steps described in the I3C

 * specification:

 *

 * 1. Attach I2C devs to the master so that the master can fill its internal

 *    device table appropriately

 *

 * 2. Call &i3c_master_controller_ops->bus_init() method to initialize

 *    the master controller. That's usually where the bus mode is selected

 *    (pure bus or mixed fast/slow bus)

 *

 * 3. Instruct all devices on the bus to drop their dynamic address. This is

 *    particularly important when the bus was previously configured by someone

 *    else (for example the bootloader)

 *

 * 4. Disable all slave events.

 *

 * 5. Reserve address slots for I3C devices with init_dyn_addr. And if devices

 *    also have static_addr, try to pre-assign dynamic addresses requested by

 *    the FW with SETDASA and attach corresponding statically defined I3C

 *    devices to the master.

 *

 * 6. Do a DAA (Dynamic Address Assignment) to assign dynamic addresses to all

 *    remaining I3C devices

 *

 * Once this is done, all I3C and I2C devices should be usable.

 *

 * Return: a 0 in case of success, an negative error code otherwise.

	/*

	 * First attach all devices with static definitions provided by the

	 * FW.

	/*

	 * Now execute the controller specific ->bus_init() routine, which

	 * might configure its internal logic to match the bus limitations.

	/*

	 * The master device should have been instantiated in ->bus_init(),

	 * complain if this was not the case.

	/*

	 * Reset all dynamic address that may have been assigned before

	 * (assigned by the bootloader for example).

 Disable all slave events before starting DAA. */

	/*

	 * Reserve init_dyn_addr first, and then try to pre-assign dynamic

	 * address and retrieve device information if needed.

	 * In case pre-assign dynamic address fails, setting dynamic address to

	 * the requested init_dyn_addr is retried after DAA is done in

	 * i3c_master_add_i3c_dev_locked().

		/*

		 * We don't reserve a dynamic address for devices that

		 * don't explicitly request one.

		/*

		 * Only try to create/attach devices that have a static

		 * address. Other devices will be created/attached when

		 * DAA happens, and the requested dynamic address will

		 * be set using SETNEWDA once those devices become

		 * addressable.

/**

 * i3c_master_add_i3c_dev_locked() - add an I3C slave to the bus

 * @master: master used to send frames on the bus

 * @addr: I3C slave dynamic address assigned to the device

 *

 * This function is instantiating an I3C device object and adding it to the

 * I3C device list. All device information are automatically retrieved using

 * standard CCC commands.

 *

 * The I3C device object is returned in case the master wants to attach

 * private data to it using i3c_dev_set_master_data().

 *

 * This function must be called with the bus lock held in write mode.

 *

 * Return: a 0 in case of success, an negative error code otherwise.

		/*

		 * We need to restore the IBI state too, so let's save the

		 * IBI information and try to restore them after olddev has

		 * been detached+released and its IBI has been stopped and

		 * the associated resources have been freed.

	/*

	 * Depending on our previous state, the expected dynamic address might

	 * differ:

	 * - if the device already had a dynamic address assigned, let's try to

	 *   re-apply this one

	 * - if the device did not have a dynamic address and the firmware

	 *   requested a specific address, pick this one

	 * - in any other case, keep the address automatically assigned by the

	 *   master

		/*

		 * Try to apply the expected dynamic address. If it fails, keep

		 * the address assigned by the master.

	/*

	 * Now is time to try to restore the IBI setup. If we're lucky,

	 * everything works as before, otherwise, all we can do is complain.

	 * FIXME: maybe we should add callback to inform the driver that it

	 * should request the IBI again instead of trying to hide that from

	 * him.

	/*

	 * The I3C Specification does not clearly say I2C devices with 10-bit

	 * address are supported. These devices can't be passed properly through

	 * DEFSLVS command.

 LVR is encoded in reg[2]. */

	/*

	 * The manufacturer ID can't be 0. If reg[1] == 0 that means we're

	 * dealing with an I2C device.

	/*

	 * The user might want to limit I2C and I3C speed in case some devices

	 * on the bus are not supporting typical rates, or if the bus topology

	 * prevents it from using max possible rate.

 Doing transfers to different devices is not supported. */

 FIXME: Should we allow i3c masters to override these values? */

	/*

	 * We silently ignore failures here. The bus should keep working

	 * correctly even if one or more i2c devices are not registered.

/**

 * i3c_master_queue_ibi() - Queue an IBI

 * @dev: the device this IBI is coming from

 * @slot: the IBI slot used to store the payload

 *

 * Queue an IBI to the controller workqueue. The IBI handler attached to

 * the dev will be called from a workqueue context.

/**

 * i3c_generic_ibi_free_pool() - Free a generic IBI pool

 * @pool: the IBI pool to free

 *

 * Free all IBI slots allated by a generic IBI pool.

	/*

	 * If the number of freed slots is not equal to the number of allocated

	 * slots we have a leak somewhere.

/**

 * i3c_generic_ibi_alloc_pool() - Create a generic IBI pool

 * @dev: the device this pool will be used for

 * @req: IBI setup request describing what the device driver expects

 *

 * Create a generic IBI pool based on the information provided in @req.

 *

 * Return: a valid IBI pool in case of success, an ERR_PTR() otherwise.

/**

 * i3c_generic_ibi_get_free_slot() - Get a free slot from a generic IBI pool

 * @pool: the pool to query an IBI slot on

 *

 * Search for a free slot in a generic IBI pool.

 * The slot should be returned to the pool using i3c_generic_ibi_recycle_slot()

 * when it's no longer needed.

 *

 * Return: a pointer to a free slot, or NULL if there's no free slot available.

/**

 * i3c_generic_ibi_recycle_slot() - Return a slot to a generic IBI pool

 * @pool: the pool to return the IBI slot to

 * @s: IBI slot to recycle

 *

 * Add an IBI slot back to its generic IBI pool. Should be called from the

 * master driver struct_master_controller_ops->recycle_ibi() method.

/**

 * i3c_master_register() - register an I3C master

 * @master: master used to send frames on the bus

 * @parent: the parent device (the one that provides this I3C master

 *	    controller)

 * @ops: the master controller operations

 * @secondary: true if you are registering a secondary master. Will return

 *	       -ENOTSUPP if set to true since secondary masters are not yet

 *	       supported

 *

 * This function takes care of everything for you:

 *

 * - creates and initializes the I3C bus

 * - populates the bus with static I2C devs if @parent->of_node is not

 *   NULL

 * - registers all I3C devices added by the controller during bus

 *   initialization

 * - registers the I2C adapter and all I2C devices

 *

 * Return: 0 in case of success, a negative error code otherwise.

 We do not support secondary masters yet. */

	/*

	 * Expose our I3C bus as an I2C adapter so that I2C devices are exposed

	 * through the I2C subsystem.

	/*

	 * We're done initializing the bus and the controller, we can now

	 * register I3C devices discovered during the initial DAA.

/**

 * i3c_master_unregister() - unregister an I3C master

 * @master: master used to send frames on the bus

 *

 * Basically undo everything done in i3c_master_register().

 *

 * Return: 0 in case of success, a negative error code otherwise.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Cadence Design Systems Inc.

 *

 * Author: Boris Brezillon <boris.brezillon@bootlin.com>

	/*

	 * First make sure that all transactions (block of transfers separated

	 * by a STOP marker) fit in the FIFOs.

 RR0[7:1] = addr[6:0] */

 RR0[15:13] = addr[9:7] */

 RR0[0] = ~XOR(addr[6:0]) */

 Only update PRESCL_CTRL1 if the I3C SCL limitation has changed. */

 Configure PP_LOW to meet I3C slave limitations. */

 Disable I3C master before updating PRESCL_CTRL1. */

 Prepare RR slots before launching DAA. */

	/*

	 * Clear all retaining registers filled during DAA. We already

	 * have the addressed assigned to them in the addrs array.

	/*

	 * Clear slots that ended up not being used. Can be caused by I3C

	 * device creation failure or when the I3C device was already known

	 * by the system but with a different address (in this case the device

	 * already has a slot and does not need a new one).

 Unmask Hot-Join and Mastership request interrupts. */

 Every value greater than 3 is not valid. */

 CTLR_THD_DEL value is encoded. */

 Calculate OD and PP low. */

 Get an address for the master. */

	/*

	 * Enable Hot-Join, and, when a Hot-Join request happens, disable all

	 * events coming from this device.

	 *

	 * We will issue ENTDAA afterwards from the threaded IRQ handler.

	/*

	 * Configure data hold delay based on device-specific data.

	 *

	 * MIPI I3C Specification 1.0 defines non-zero minimal tHD_PP timing on

	 * master output. This setting allows to meet this timing on master's

	 * SoC outputs, regardless of PCB balancing.

	/*

	 * FIXME: maybe we should report the FIFO OVF errors to the upper

	 * layer.

 Consume data from the FIFO if it's not been done already. */

 sentinel */ },

 Device ID0 is reserved to describe this master. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Silvaco dual-role I3C master driver

 *

 * Copyright (C) 2020 Silvaco

 * Author: Miquel RAYNAL <miquel.raynal@bootlin.com>

 * Based on a work from: Conor Culhane <conor.culhane@silvaco.com>

 Master Mode Registers */

 This parameter depends on the implementation and may be tuned */

/**

 * struct svc_i3c_master - Silvaco I3C Master structure

 * @base: I3C master controller

 * @dev: Corresponding device

 * @regs: Memory mapping

 * @free_slots: Bit array of available slots

 * @addrs: Array containing the dynamic addresses of each attached device

 * @descs: Array of descriptors, one per attached device

 * @hj_work: Hot-join work

 * @ibi_work: IBI work

 * @irq: Main interrupt

 * @pclk: System clock

 * @fclk: Fast clock (bus)

 * @sclk: Slow clock (other events)

 * @xferqueue: Transfer queue structure

 * @xferqueue.list: List member

 * @xferqueue.cur: Current ongoing transfer

 * @xferqueue.lock: Queue lock

 * @ibi: IBI structure

 * @ibi.num_slots: Number of slots available in @ibi.slots

 * @ibi.slots: Available IBI slots

 * @ibi.tbq_slot: To be queued IBI slot

 * @ibi.lock: IBI lock

 Prevent races between transfers */

 Prevent races within IBI handlers */

/**

 * struct svc_i3c_i2c_dev_data - Device specific data

 * @index: Index in the master tables corresponding to this device

 * @ibi: IBI slot index in the master structure

 * @ibi_pool: IBI pool associated to this device

	/*

	 * This delay is necessary after the emission of a stop, otherwise eg.

	 * repeating IBIs do not get detected. There is a note in the manual

	 * about it, stating that the stop condition might not be settled

	 * correctly if a start condition follows too rapidly.

 Acknowledge the incoming interrupt with the AUTOIBI mechanism */

 Wait for IBIWON, should take approximately 100us */

 Clear the interrupt status */

 Handle the critical responses to IBI's */

	/*

	 * If an error happened, we probably got interrupted and the exchange

	 * timedout. In this case we just drop everything, emit a stop and wait

	 * for the slave to interrupt again.

 Handle the non critical tasks */

 Clear the interrupt status */

 Handle the interrupt in a non atomic context */

 Timings derivation */

	/*

	 * Using I3C Push-Pull mode, target is 12.5MHz/80ns period.

	 * Simplest configuration is using a 50% duty-cycle of 40ns.

	/*

	 * Using I3C Open-Drain mode, target is 4.17MHz/240ns with a

	 * duty-cycle tuned so that high levels are filetered out by

	 * the 50ns filter (target being 40ns).

		/*

		 * Using I2C Fm+ mode, target is 1MHz/1000ns, the difference

		 * between the high and low period does not really matter.

		/*

		 * Using I2C Fm mode, target is 0.4MHz/2500ns, with the same

		 * constraints as the FM+ mode.

 Master core's registration */

 Disable master */

 Enter/proceed with DAA */

		/*

		 * Either one slave will send its ID, or the assignment process

		 * is done.

			/*

			 * We only care about the 48-bit provisional ID yet to

			 * be sure a device does not nack an address twice.

			 * Otherwise, we would just need to flush the RX FIFO.

 We do not care about the BCR and DCR yet */

				/*

				 * All devices received and acked they dynamic

				 * address, this is the natural end of the DAA

				 * procedure.

				/*

				 * A slave device nacked the address, this is

				 * allowed only once, DAA will be stopped and

				 * then resumed. The same device is supposed to

				 * answer again immediately and shall ack the

				 * address this time.

 Wait for the slave to be ready to receive its address */

 Give the slave device a suitable dynamic address */

 Create the IBIRULES register for both cases */

 IBI rules cannot be applied to devices with MSb=1 */

 IBI rules cannot be applied to devices with MSb=1 */

 Device list cannot be handled by hardware */

 No list can be properly handled, return an error */

 Pick the first list that can be handled by hardware, randomly */

 Register all devices who participated to the core */

 Configure IBI auto-rules */

		/*

		 * The last byte to be sent over the bus must either have the

		 * "end" bit set or be written in MWDATABE.

 No software support for CCC commands targeting more than one slave */

 Broadcasted message */

 Directed message */

 Clear pending warnings */

 Set RX and TX tigger levels, flush FIFOs */

 Register the master */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018 Synopsys, Inc. and/or its affiliates.

 *

 * Author: Vitor Soares <vitor.soares@synopsys.com>

 For now don't support Hot-Join */

 Prepare DAT before launching DAA. */

 Information regarding the FIFOs/QUEUEs depth */

 SPDX-License-Identifier: BSD-3-Clause

/*

 * Copyright (c) 2020, MIPI Alliance, Inc.

 *

 * Author: Nicolas Pitre <npitre@baylibre.com>

 *

 * I3C HCI v1.0/v1.1 Command Descriptor Handling

/*

 * Address Assignment Command

/*

 * Immediate Data Transfer Command

/*

 * Regular Data Transfer Command

/*

 * Combo Transfer (Write + Write/Read) Command

/*

 * Internal Control Command

 Data Transfer Speed and Mode */

 we consumed all the data with the cmd descriptor */

 this should never happen */

 we use an Immediate Data Transfer Command */

 we use a Regular Data Transfer Command */

 we use an Immediate Data Transfer Command */

 we use a Regular Data Transfer Command */

 we use an Immediate Data Transfer Command */

 we use a Regular Data Transfer Command */

	/*

	 * Simple for now: we allocate a temporary DAT entry, do a single

	 * DAA, register the device which will allocate its own DAT entry

	 * via the core callback, then free the temporary DAT entry.

	 * Loop until there is no more devices to assign an address to.

	 * Yes, there is room for improvements.

 no more devices to be assigned */

		/*

		 * TODO: Extend the subsystem layer to allow for registering

		 * new device and provide BCR/DCR/PID at the same time.

 SPDX-License-Identifier: BSD-3-Clause

/*

 * Copyright (c) 2020, MIPI Alliance, Inc.

 *

 * Author: Nicolas Pitre <npitre@baylibre.com>

 *

 * I3C HCI v2.0 Command Descriptor Handling

 *

 * Note: The I3C HCI v2.0 spec is still in flux. The code here will change.

/*

 * Unified Data Transfer Command

/*

 * Address Assignment Command

 we consumed all the data with the cmd descriptor */

 we consumed all the data with the cmd descriptor */

 no more devices to be assigned */

		/*

		 * TODO: Extend the subsystem layer to allow for registering

		 * new device and provide BCR/DCR/PID at the same time.

 SPDX-License-Identifier: BSD-3-Clause

/*

 * Copyright (c) 2020, MIPI Alliance, Inc.

 *

 * Author: Nicolas Pitre <npitre@baylibre.com>

 Extended Capability Header */

 ought to go in a table if this grows too much */

 skip header */

 TODO: will be needed when I3C core does more than SDR */

 skip header */

 remember auto-command register location for later use */

 hci->schedcmd_regs = base; */

 hci->NCM_regs = base; */

 TODO confirm size */

 reset the FPGA */

 some arbitrary limit */

 SPDX-License-Identifier: BSD-3-Clause

/*

 * Copyright (c) 2020, MIPI Alliance, Inc.

 *

 * Author: Nicolas Pitre <npitre@baylibre.com>

 *

 * Note: The I3C HCI v2.0 spec is still in flux. The IBI support is based on

 * v1.x of the spec and v2.0 will likely be split out.

/*

 * Software Parameter Values (somewhat arb itrary for now).

 * Some of them could be determined at run time eventually.

 max: 8 */

 max: 255 */

 max: 8 */

 max: 255 */

 max: 256 bytes equivalent */

 max: 1023 */

/*

 * Ring Header Preamble

 Preamble Section Size */

 Ring Header Size */

 HC Max Header Count */

 Driver Max Header Count */

/*

 * Ring Header (Per-Ring Bundle)

 Command/Response Ring */

 Ring Scatter Gather Support */

 Buffer Vs. List Pointer */

/*

 * Data Buffer Descriptor (in memory)

 Buffer Vs. List Pointer */

 Interrupt on Completion */

 trickery to avoid compiler warnings on 32-bit build targets */

 IBIs */

 For now we only use ring 0 */

 store cmd descriptor */

 first word of Data Buffer Descriptor Structure */

 2nd and 3rd words of Data Buffer Descriptor Structure */

 remember corresponding xfer struct */

 remember corresponding ring/entry for this xfer structure */

		/*

		 * We may update the hardware view of the enqueue pointer

		 * only if we didn't reach its dequeue pointer.

 the ring is full */

 take care to update the hardware enqueue pointer atomically */

 stop the ring */

		/*

		 * We're deep in it if ever this condition is ever met.

		 * Hardware might still be writing to memory, etc.

		 * Better suspend the world than risking silent corruption.

		/*

		 * At the time the abort happened, the xfer might have

		 * completed already. If not then replace corresponding

		 * descriptor entries with a no-op.

 store no-op cmd descriptor */

 disassociate this xfer struct */

 and unmap it */

 restart the ring */

 TODO: do something about it? */

 take care to update the software dequeue pointer atomically */

 let's find all we can about this IBI */

 we no longer care */

 the address changed unexpectedly */

 validate what we've got */

 this IBI sequence is not yet complete */

 determine who this is for */

	/*

	 * This ring model is not suitable for zero-copy processing of IBIs.

	 * We have the data chunk ring wrap-around to deal with, meaning

	 * that the payload might span multiple chunks beginning at the

	 * end of the ring and wrap to the start of the ring. Furthermore

	 * there is no guarantee that those chunks will be released in order

	 * and in a timely manner by the upper driver. So let's just copy

	 * them to a discrete buffer. In practice they're supposed to be

	 * small anyway.

 copy first part of the payload */

 copy second part if any */

 we wrap back to the start and copy remaining data */

 submit it */

 take care to update the ibi dequeue pointer atomically */

 update the chunk pointer */

 and tell the hardware about freed chunks */

 SPDX-License-Identifier: BSD-3-Clause

/*

 * Copyright (c) 2020, MIPI Alliance, Inc.

 *

 * Author: Nicolas Pitre <npitre@baylibre.com>

/*

 * PIO Access Area

/*

 * Handy status bit combinations

	/*

	 * Let's initialize data thresholds to half of the actual FIFO size.

	 * The start thresholds aren't used (set to 0) as the FIFO is always

	 * serviced before the corresponding command is queued.

 those are expressed as 2^[n+1), so just sub 1 if not 0 */

 size is 2^(n+1) and threshold is 2^n i.e. already halved */

	/*

	 * Let's raise an interrupt as soon as there is one free cmd slot

	 * or one available response or IBI. For IBI data let's use half the

	 * IBI queue size within allowed bounds.

 Disable all IRQs but allow all status bits */

 Always accept error interrupts (will be activated on first xfer) */

 bail out if FIFO hasn't reached the threshold value yet */

 extract data from FIFO */

 trailing data is retrieved upon response reception */

 extract data from FIFO */

		/*

		 * There are trailing bytes in the last word.

		 * Fetch it and extract bytes in an endian independent way.

		 * Unlike the TX case, we must not write memory past the

		 * end of the destination buffer.

 bail out if FIFO free space is below set threshold */

 we can fill up to that TX threshold */

 push data into the FIFO */

		/*

		 * There are trailing bytes to send. We can simply load

		 * them from memory as a word which will keep those bytes

		 * in their proper place even on a BE system. This will

		 * also get some bytes past the actual buffer but no one

		 * should care as they won't be sent out.

 preserve word  to become partial */

 treat last word specially because of partial word issues */

			/*

			 * Like in hci_pio_do_trailing_rx(), preserve original

			 * word to be stored partially then store bytes it

			 * in an endian independent way.

 let's pretend it is a prog error... any of them  */

			/*

			 * Response availability implies RX completion.

			 * Retrieve trailing RX data if any.

			 * Note that short reads are possible.

 we consumed data meant for next xfer */

 then process the RX list pointer */

		/*

		 * We're about to give back ownership of the xfer structure

		 * to the waiting instance. Make sure no reference to it

		 * still exists.

		/*

		 * Always process the data FIFO before sending the command

		 * so needed TX data or RX space is available upfront.

		/*

		 * Then queue our response request. This will also process

		 * the response FIFO in case it got suddenly filled up

		 * with results from previous commands.

		/*

		 * Finally send the command.

		/*

		 * And move on.

 link xfer instances together and initialize data count */

	/*

	 * To safely dequeue a transfer request, it must be either entirely

	 * processed, or not yet processed at all. If our request tail is

	 * reachable from either the data or resp list that means the command

	 * was submitted and not yet completed.

	/*

	 * The command was completed, or wasn't yet submitted.

	 * Unlink it from the que if the later.

 return true if we actually unqueued something */

	/*

	 * Life is tough. We must invalidate the hardware state and

	 * discard everything that is still queued.

 TODO: this ought to be more sophisticated eventually */

 this may happen when an error is signaled with ROC unset */

 dump states on programming errors */

 just bust out everything with pending responses for now */

 ... and half-way TX transfers if any */

 then reset the hardware */

 write the threshold reg only if it changes */

 determine our IBI queue threshold value */

 bail out if we don't have that amount of data ready */

 extract the data from the IBI port */

		/*

		 * There are trailing bytes in the last word.

		 * Fetch it and extract bytes in an endian independent way.

		 * Unlike the TX case, we must not write past the end of

		 * the destination buffer.

	/*

	 * We have a new IBI. Try to set up its payload retrieval.

	 * When returning true, the IBI data has to be consumed whether

	 * or not we are set up to capture it. If we return true with

	 * ibi->slot == NULL that means the data payload has to be

	 * drained out of the IBI port and dropped.

 was the last segment: submit it and leave */

			/*

			 * No slot but a non-zero count. This is the result

			 * of some error and the payload must be drained.

			 * This normally does not happen therefore no need

			 * to be extra optimized here.

 try to move to the next segment right away */

 target address changed before last segment */

 SPDX-License-Identifier: BSD-3-Clause

/*

 * Copyright (c) 2020, MIPI Alliance, Inc.

 *

 * Author: Nicolas Pitre <npitre@baylibre.com>

/*

 * Device Characteristic Table

 SPDX-License-Identifier: BSD-3-Clause

/*

 * Copyright (c) 2020, MIPI Alliance, Inc.

 *

 * Author: Nicolas Pitre <npitre@baylibre.com>

 *

 * Core driver code with main interface to the I3C subsystem.

/*

 * Host Controller Capabilities and Operation Registers

 HCI Version (in BCD) */

 Hot-Join ACK/NACK Control */

 DMA/PIO Mode Selector */

 Include I3C Broadcast Address */

 Master Device Address */

 Dynamic Address is Valid */

 master handoff capable */

 endian selection possible */

 Core Reset */

 Cmd Sequence Underflow */

 HC Cancelled Reset */

 HC Internal Error */

 cascaded PIO interrupt */

 Device Address Table */

 Device Characteristics Table */

 PIO Offset */

 IBI Notify Control */

 Rejected Target Interrupt Request */

 Rejected Master Request Control */

 Rejected Hot-Join Control */

 the HC_CONTROL_RESUME bit is R/W1C so just read and write back */

 located here rather than pio.c because needed bits are in core reg space */

 located here rather than dct.c because needed bits are in core reg space */

 silence the const qualifier warning with a cast */

 v1.0 does not have PIO cascaded notification bits */

 Validate HCI hardware version */

 known versions */

 version 1.0 */

 version 1.1 */

 version 2.0 */

	/*

	 * Now let's reset the hardware.

	 * SOFT_RST must be clear before we write to it.

	 * Then we must wait until it clears again.

 Disable all interrupts and allow all signal updates */

 Make sure our data ordering fits the host's */

 Select our command descriptor model */

 Try activating DMA operations first */

 If no DMA, try PIO */

 temporary for dev_printk's, to be replaced in i3c_master_register */

 SPDX-License-Identifier: BSD-3-Clause

/*

 * Copyright (c) 2020, MIPI Alliance, Inc.

 *

 * Author: Nicolas Pitre <npitre@baylibre.com>

/*

 * Device Address Table Structure

	DAT_0_I2C_DEVICE		W0_BIT_(31) */

	DAT_0_SIR_REJECT		W0_BIT_(13) */

	DAT_0_IBI_PAYLOAD		W0_BIT_(12) */

 use a bitmap for faster free slot search */

 clear them */

 default flags */

 SPDX-License-Identifier: GPL-2.0

 SOLOS_ATTR_RO(DspVersion)

 SOLOS_ATTR_RO(CommonHandshake)

 SOLOS_ATTR_RO(DeltACTATPds)

 SOLOS_ATTR_RO(DeltACTATPus)

/******************************************************************************

         iphase.c: Device driver for Interphase ATM PCI adapter cards 

                    Author: Peter Wang  <pwang@iphase.com>            

		   Some fixes: Arnaldo Carvalho de Melo <acme@conectiva.com.br>

                   Interphase Corporation  <www.iphase.com>           

                               Version: 1.0                           

*******************************************************************************

      

      This software may be used and distributed according to the terms

      of the GNU General Public License (GPL), incorporated herein by reference.

      Drivers based on this skeleton fall under the GPL and must retain

      the authorship (implicit copyright) notice.



      This program is distributed in the hope that it will be useful, but

      WITHOUT ANY WARRANTY; without even the implied warranty of

      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

      General Public License for more details.

      

      Modified from an incomplete driver for Interphase 5575 1KVC 1M card which 

      was originally written by Monalisa Agrawal at UNH. Now this driver 

      supports a variety of varients of Interphase ATM PCI (i)Chip adapter 

      card family (See www.iphase.com/products/ClassSheet.cfm?ClassID=ATM) 

      in terms of PHY type, the size of control memory and the size of 

      packet memory. The following are the change log and history:

     

          Bugfix the Mona's UBR driver.

          Modify the basic memory allocation and dma logic.

          Port the driver to the latest kernel from 2.0.46.

          Complete the ABR logic of the driver, and added the ABR work-

              around for the hardware anormalies.

          Add the CBR support.

	  Add the flow control logic to the driver to allow rate-limit VC.

          Add 4K VC support to the board with 512K control memory.

          Add the support of all the variants of the Interphase ATM PCI 

          (i)Chip adapter cards including x575 (155M OC3 and UTP155), x525

          (25M UTP25) and x531 (DS3 and E3).

          Add SMP support.



      Support and updates available at: ftp://ftp.iphase.com/pub/atm



static uint IADebugFlag = /* IF_IADBG_ERR | IF_IADBG_CBR| IF_IADBG_INIT_ADAPTER

*************************** IA_LIB **********************************/

 ia_hack_tcq */

 while */

 Get the next available descriptor number from TCQ */

 get system time */

 0x2 */ ) {

 Wait for 10 Micro sec */

 last descriptor */	 	   

 vcstatus->cnt */

 Wait for 10 Micro sec */

 state is idle */

 foundLockUp */

 if an ABR VC */

/*

** Conversion of 24-bit cellrate (cells/sec) to 16-bit floating point format.

**

**  +----+----+------------------+-------------------------------+

**  |  R | NZ |  5-bit exponent  |        9-bit mantissa         |

**  +----+----+------------------+-------------------------------+

** 

**    R = reserved (written as 0)

**    NZ = 0 if 0 cells/sec; 1 otherwise

**

**    if NZ = 1, rate = 1.mmmmmmmmm x 2^(eeeee) cells/sec

 Number of bits in mantissa */

 Number of bits in exponent */

/*

** Conversion of 16-bit floating point format to 24-bit cellrate (cells/sec).

 FFRED initialization */

 sanity check */

 (2 ** (srv_p->nrm +1)) */

 i.e 2**n = 2 << (n-1) */

 RFRED initialization */	

 IpAdjustTrafficParams */

 IaFFrednInsertCbrSched */

 Starting at an arbitrary location, place the entries into the table

 as smoothly as possible

 get modulo

 If this is the first time, start the table loading for this connection

 as close to entryPoint as possible.

 Adding 2 helps to prevent clumping

 Wrap if necessary

 Point to the next location

 in the table that would be  smoothest

 get new integer part

 calc new fractional part

 Continuously check around this ideal value until a null

 location is encountered.

set index and read in value

 If another VC at this location, we have to keep looking

 Wrap if necessary

 set table index

 Wrap if necessary

 set table index and read in value

 while */

 Move this VCI number into this location of the CBR Sched table.

 while */ 

 IaFFrednCbrEnable */

	/*

	 * Issue a command to enable writes to the NOVRAM

	/*

	 * issue the write command

	/* 

	 * Send the data, starting with D15, then D14, and so on for 16 bits

	/*

	 * disable writes again

	/*

	 * Read the first bit that was clocked with the falling edge of the

	 * the last command data clock

	/*

	 * Now read the rest of the bits, the next bit read is D14, then D13,

	 * and so on.

 Enable RSOP loss of signal interrupt. */

 Clear error counters. */

 Clear "PMCTST" in master test register. */

 __SNMP__ */

**************************** IA_LIB END *****************************/

 pad end of buffer with blanks */

 close xdump(... */

 CONFIG_ATM_IA_DEBUG */

-- some utilities and memory allocation stuff will come here -------------*/  

 regval = readl((u32)ia_cmds->maddr);

----------------------------- Receiving side stuff --------------------------*/  

 closing the receiving size will cause too many excp int */  

u_short *ptr;  

 TODO: update exception stat

 pwang_test

 mask 1st 3 bits to get the actual descno. */  

 update the read pointer  - maybe we shud do this in the end*/  

	/* get the buffer desc entry.  

		update stuff. - doesn't seem to be any update necessary  

 make the ptr point to the corresponding buffer desc entry */  

 might want to check the status bits for errors */  

	/*  

		build DLE.	  

 pwang_test

 Build the DLE structure */  

 We don't know this do we ?? */  

 shud take care of wrap around here too. */  

 Increment transaction counter */  

 do something */  

	/* Basically recvd an interrupt for receiving a packet.  

	A descriptor would have been written to the packet complete   

	queue. Get all the descriptors and set up dma to move the   

	packets till the packet complete queue is empty..  

 probably need to handle the exception queue also. */  

	/* need to handle the raw incoming cells. This deepnds on   

	whether we have programmed to receive the raw cells or not.  

  /* free all the dles done, that is just update our own dle read pointer   

  /* DMA is done, just get all the recevie buffers from the rx dma queue  

	and push them up to the higher layer protocol. Also free the desc  

 free the DMAed skb */  

 no VCC related housekeeping done as yet. lets see */  

 get real pkt length  pwang_test

 Display the packet */  

  /* if the interrupts are masked because there were no free desc available,  

 RX_EXCP_RCVD |*/ RX_PKT_RCVD),

	/* Make only this VCI in the vc table valid and let all   

 mask the last 6 bits and OR it with 3 for 1K VCs */  

	/* Also keep a list of open rx vcs so that we can attach them with  

 for UBR  later may need to add CBR logic */

    spin_lock_init(&iadev->rx_lock); 

 Allocate 4k bytes - more aligned than needed (4k boundary) */

	/* the end of the dle q points to the entry after the last  

 write the upper 20 bits of the start address to rx list address register */  

 We know this is 32bit bus addressed so the following is safe */

	/* Receive side control memory map  

	   -------------------------------  

  

		Buffer descr	0x0000 (736 - 23K)  

		VP Table	0x5c00 (256 - 512)  

		Except q	0x5e00 (128 - 512)  

		Free buffer q	0x6000 (1K - 2K)  

		Packet comp q	0x6800 (1K - 2K)  

		Reass Table	0x7000 (1K - 2K)  

		VC Table	0x7800 (1K - 2K)  

		ABR VC Table	0x8000 (1K - 32K)  

 Base address for Buffer Descriptor Table */  

 Set the buffer size register */  

 Initialize each entry in the Buffer Descriptor Table */  

 Fill the FREEQ with all the free descriptors. */  

 Packet Complete Queue */

 Exception Queue */

 Load local copy of FREEQ and PCQ ptrs */

 just for check - no VP TBL */  

 VP Table */  

 writew(0x0b80, iadev->reass_reg+VP_LKUP_BASE); */  

	/* initialize VP Table for invalid VPIs  

		- I guess we can write all 1s or 0x000f in the entire memory  

		  space or something similar.  

 This seems to work and looks right to me too !!! */  

 initialize Reassembly table to I don't know what ???? */  

		/* shift the reassembly pointer by 3 + lower 3 bits of   

		vc_lkup_base register (=3 for 1K VCs) and the last byte   

		is those low 3 bits.   

		Shall program this later.  

 for invalid VCI */  

 ABR VC table */

 Initialize other registers */  

 VP Filter Register set for VC Reassembly only */  

	/* Packet Timeout Count  related Registers : 

	   Set packet timeout to occur in about 3 seconds

	   Set Packet Aging Interval count register to overflow in about 4 us

 initiate the desc_tble */

 to clear the interrupt status register - read it */  

 Mask Register - clear it */  

 Mode Register */  

/*  

	The memory map suggested in appendix A and the coding for it.   

	Keeping it around just in case we change our mind later.  

  

		Buffer descr	0x0000 (128 - 4K)  

		UBR sched	0x1000 (1K - 4K)  

		UBR Wait q	0x2000 (1K - 4K)  

		Commn queues	0x3000 Packet Ready, Trasmit comp(0x3100)  

					(128 - 256) each  

		extended VC	0x4000 (1K - 8K)  

		ABR sched	0x6000	and ABR wait queue (1K - 2K) each  

		CBR sched	0x7000 (as needed)  

		VC table	0x8000 (1K - 32K)  

 free the DMAed skb */ 

 Revenge of the 2 dle (skb + trailer) used in ia_pkt_tx() */

 Hold the rate-limited skb for flow control */

 find pcr */

	/* store the most significant 4 bits of vci as the last 4 bits   

		of first part of atm header.  

	   store the last 12 bits of vci as first 12 bits of the second  

		part of the atm header.  

 check the following for different traffic classes */  

 Allocate 4k (boundary aligned) bytes */

 write the upper 20 bits of the start address to tx list address register */  

	/*  

	   Transmit side control memory map  

	   --------------------------------    

	 Buffer descr 	0x0000 (128 - 4K)  

	 Commn queues	0x1000	Transmit comp, Packet ready(0x1400)   

					(512 - 1K) each  

					TCQ - 4K, PRQ - 5K  

	 CBR Table 	0x1800 (as needed) - 6K  

	 UBR Table	0x3000 (1K - 4K) - 12K  

	 UBR Wait queue	0x4000 (1K - 4K) - 16K  

	 ABR sched	0x5000	and ABR wait queue (1K - 2K) each  

				ABR Tbl - 20K, ABR Wq - 22K   

	 extended VC	0x6000 (1K - 8K) - 24K  

	 VC Table	0x8000 (1K - 32K) - 32K  

	  

	Between 0x2000 (8K) and 0x3000 (12K) there is 4K space left for VBR Tbl  

	and Wait q, which can be allotted later.  

 Buffer Descriptor Table Base address */  

 initialize each entry in the buffer descriptor table */  

 Communication Queues base address */  

 Transmit Complete Queue */  

 Fill the TCQ with all the free descriptors. */  

 Packet Ready Queue */  

 Load local copy of PRQ and TCQ ptrs */

 Just for safety initializing the queue to have desc 1 always */  

 Fill the PRQ with all the free descriptors. */  

 desc 1 in all entries */  

 CBR Table */  

 for 1K VC board, CBR_PTR_BASE is 0 */

 Charlie's logic is wrong ? */

 CBR_PTR;

 Initialize the CBR Schedualing Table */

 UBR scheduling Table and wait queue */  

	/* initialize all bytes of UBR scheduler table and wait queue to 0   

		- SCHEDSZ is 1K (# of entries).  

		- UBR Table size is 4K  

		- UBR wait queue is 4K  

	   since the table and wait queues are contiguous, all the bytes   

	   can be initialized by one memeset.

 ABR scheduling Table(0x5000-0x57ff) and wait queue(0x5800-0x5fff)*/  

	/* initialize all bytes of ABR scheduler table and wait queue to 0   

		- SCHEDSZ is 1K (# of entries).  

		- ABR Table size is 2K  

		- ABR wait queue is 2K  

	   since the table and wait queues are contiguous, all the bytes   

	   can be initialized by one memeset.

 Other Initialization */  

 Max Rate Register */  

 Set Idle Header Reigisters to be sure */  

 Program ABR UBR Priority Register  as  PRI_ABR_UBR_EQUAL */

 RM Cell Protocol ID and Message Type */  

 Mode Register 1 */  

 Mode Register 0 */  

 Interrupt Status Register - read to clear */  

 Interrupt Mask Reg- don't mask TCQ_NOT_EMPTY interrupt generation */  

 do something */  

 Clear this bit by writing a 1 to it. */  

 do something */ 

----------------------------- entries --------------------------------*/  

	/* The device has been identified and registered. Now we read   

	   necessary configuration info like memory base address,   

 find mapping size of board */  

 enable bus mastering */

	/*  

	 * Delay at least 1us before doing any mem accesses (how 'bout 10?)  

 mapping the physical address to a virtual address in address space */  

 ioremap is not resolved ??? */  

 filling the iphase dev structure */  

 Bus Interface Control Registers */  

 Segmentation Control Registers */  

 Reassembly Control Registers */  

 Front end/ DMA control registers */  

 RAM - Segmentation RAm and Reassembly RAM */  

 lets print out the above */  

 lets try reading the MAC address */  

 reset SAR */  

 @@@ should release IRQ on error */  

 enabling memory + master */  

	/* Maybe we should reset the front end, initialize Bus Interface Control   

 shud be removed l8r */  

 resolve compiler complaint */

 Get iadev->carrier_detect status */

 reset reass table

 reset vc table

 Drain the packets

 Device dependent initialization */  

 Copy real rfred registers into the local copy */

 Copy real ffred registers into the local copy */

	/* Get a descriptor number from our free descriptor queue  

	   We get the descr number from the TCQ now, since I am using  

	   the TCQ as a free buffer queue. Initially TCQ will be   

	   initialized with all the descriptors and is hence, full.  

 return SUCCESS */

 remember the desc and vcc mapping */

	/* Put the descriptor number in the packet ready queue  

		and put the updated write pointer in the DLE field   

	/* Figure out the exact length of the packet and padding required to 

 Put the packet in a tx buffer */   

big endian*/ 

 not needed - dummy bytes */  

 Display the packet */  

 Build the buffer descriptor */  

 points to the corresponding entry */  

 Huh ? p.115 of users guide describes this as a read-only register */

 Build the DLE structure */  

 wr_ptr->bytes = swap_byte_order(total_len); didn't seem to affect?? */

 hw bug - DLEs of 0x2d, 0x2e, 0x2f cause DMA lockup */

 end is not to be used for the DLE q */  

 Build trailer dle */

 end is not to be used for the DLE q */

 Increment transaction counter */  

 add flow control logic */ 

 vcc->tx_quota = 3 * iavcc->saved_tx_quota / 4;

 Disable phy interrupts */

 De-register device */  

 SPDX-License-Identifier: GPL-2.0-only

/*

 * nicstar.c

 *

 * Device driver supporting CBR for IDT 77201/77211 "NICStAR" based cards.

 *

 * IMPORTANT: The included file nicstarmac.c was NOT WRITTEN BY ME.

 *            It was taken from the frle-0.22 device driver.

 *            As the file doesn't have a copyright notice, in the file

 *            nicstarmac.copyright I put the copyright notice from the

 *            frle-0.22 device driver.

 *            Some code is based on the nicstar driver by M. Welsh.

 *

 * Author: Rui Prior (rprior@inescn.pt)

 * PowerPC support by Jay Talbott (jay_talbott@mcg.mot.com) April 1999

 *

 *

 * (C) INESC 1999

/*

 * IMPORTANT INFORMATION

 *

 * There are currently three types of spinlocks:

 *

 * 1 - Per card interrupt spinlock (to protect structures and such)

 * 2 - Per SCQ scq spinlock

 * 3 - Per card resource spinlock (to access registers, etc.)

 *

 * These must NEVER be grabbed in reverse order.

 *

 Header files */

 CONFIG_ATM_NICSTAR_USE_SUNI */

 CONFIG_ATM_NICSTAR_USE_IDT77105 */

 Additional code */

 Configurable parameters */

 Do not touch these */

 TX_DEBUG */

 RX_DEBUG */

 GENERAL_DEBUG */

 EXTRA_DEBUG */

 Macros */

 Function declarations */

 Global variables */

 Functions */

 don't increment index */

 Stop everything */

 De-register device */

 Disable PCI device */

 Free up resources */

 terminate list */

 Initialized to remove compile warning */

 PHY_LOOPBACK */

 address must be dword aligned */

 SRAM read command */

 count range now is 0..3 instead of 1..4 */

 to use increments of 4 */

	/* Note: DR# registers are the first 4 dwords in nicstar's memspace,

 NS_PCI_LATENCY */

 Clear timer overflow */

 Software reset */

 PHY reset */

 Sync UTOPIA with SAR clock */

 Detect PHY type */

 Clear an eventual pending interrupt */

 PHY_LOOPBACK */

 PHY_LOOPBACK */

 Determine SRAM size */

 card->rct_size == 16384 */

 Initialize the nicstar eeprom/eprom stuff, for the MAC addr */

 Set the VPI/VCI MSb mask to zero so we can receive OAM cells */

 Initialize TSQ */

 Initialize RSQ */

 Initialize SCQ0, the only VBR SCQ used */

 These last two won't be used */

 but are initialized, just in case... */

 Initialize TSTs */

 Initialize RCT. AAL type is set on opening the VC. */

 RCQ_SUPPORT */

 Initialize buffer levels */

 To prevent push_rxbufs from enabling the interrupt */

 Pre-allocate some huge buffers */

 Allocate large buffers */

 Not used */

 Due to the implementation of push_rxbufs() this is 1, not 0 */

 Test for strange behaviour which leads to crashes */

 Allocate small buffers */

 Not used */

 Test for strange behaviour which leads to crashes */

 Allocate iovec buffers */

 Configure NICStAR */

 (card->rct_size == 16384) */

 Register device */

 CONFIG_ATM_NICSTAR_USE_SUNI */

 CONFIG_ATM_NICSTAR_USE_IDT77105 */

 Only enabled if RCQ_SUPPORT */

 Only enabled if ENABLE_TSQFIE */

 For variable rate SCQ vcc must be NULL */

 vcc must be != NULL */

/* The handles passed must be pointers to the sk_buff containing the small

 *BARF* */

 save so we can unmap later */

 GENERAL_DEBUG */

 (!sm_addr) */

 buf_type == BUF_LG */

 (!lg_addr) */

 (buf_type == BUF_LG) */

 Transmit Status Indicator has been written to T. S. Queue */

 Incomplete CS-PDU has been transmitted */

 Transmit Status Queue 7/8 full */

 Timer overflow */

 PHY device interrupt signal active */

 Small Buffer Queue is full */

 Large Buffer Queue is full */

 Receive Status Queue is full */

 Complete CS-PDU received */

 Raw cell received */

 RCQ_SUPPORT */

		/* NOTE: the following procedure may keep a raw cell pending until the

		   next interrupt. As this preliminary support is only meant to

 Small buffer queue is empty */

 Large buffer queue empty */

 Receive Status Queue is 7/8 full */

 target cell rate, and absolute value */

	int n = 0;		/* Number of entries in the TST. Initialized to remove

	int frscdi = 0;		/* Index of the SCD. Initialized to remove the compiler

				   warning. How I wish compilers were clever enough to

				   tell which variables can truly be used

 tx or rx vc already in use by another vcc */

	/* NOTE: You are not allowed to modify an open connection's QOS. To change

	   that, remove the ATM_VF_PARTIAL flag checking. There may be other changes

 Check requested cell rate and availability of SCD */

 Open the connection in hardware */

 vcc->qos.aal == ATM_AAL0 */

 RCQ_SUPPORT */

			/* If the last entry is not a TSR, place one in the SCQ in order to

 Free all TST entries */

 remove all references to vcc before deleting it */

 RX_DEBUG */

	/* It would be very complicated to keep the two TSTs synchronized while

	   assuring that writes are only made to the inactive TST. So, for now I

 Fill procedure */

 End of fill procedure */

 TBD flags, not CPU flags */

 Multiple of 48 */

 (vcc->qos.aal == ATM_AAL0) */

 i.e., 48 bytes */

 Payload type 1 - end of pdu */

 Force the VPI/VCI to be the same as in VCC struct */

 flag indicating at least on entry was serviced */

 At most two empty, as stated in the 77201 errata */

 Skip the one or two possible empty entries */

 already increased by 1 */

 Rebuild the header */

 To reach this point, the AAL layer can only be AAL5 */

 No buffers in the queue */

		/* IMPORTANT: a pointer to the sk_buff containing the small or large

		   buffer is stored as iovec base, NOT a pointer to the

 NS_PRV_IOVCNT(iovb) >= 2 */

 EXTRA_DEBUG */

 This works correctly regardless of the endianness of the host */

 By this point we (hopefully) have a complete SDU without errors. */

 Just a small buffer */

 skb points to a small buffer */

 One small plus one large buffer */

 skb points to a large buffer */

 len > NS_SMBUFSIZE, the usual case */

 Must push a huge buffer */

 No buffers in the queue */

 Copy the small buffer to the huge buffer */

 Free the small buffer */

 Copy all large buffers to the huge buffer and free them */

 EXTRA_DEBUG */

 Dump 25.6 Mbps PHY registers */

	/* Now there's a 25.6 Mbps PHY driver this code isn't needed. I left it

 0 - Dump 25.6 Mbps PHY registers */

 Dump TST */

 0 */

 a long is the same size as a pointer or bigger */

 EXTRA_DEBUG */

 Probably it isn't worth spinning */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

  Madge Horizon ATM Adapter driver.

  Copyright (C) 1995-1999  Madge Networks Ltd.

  

/*

  IMPORTANT NOTE: Madge Networks no longer makes the adapters

  supported by this driver and makes no commitment to maintain it.

/*

  

  CREDITS

  

  Driver and documentation by:

  

  Chris Aston        Madge Networks

  Giuliano Procida   Madge Networks

  Simon Benham       Madge Networks

  Simon Johnson      Madge Networks

  Various Others     Madge Networks

  

  Some inspiration taken from other drivers by:

  

  Alexandru Cucos    UTBv

  Kari Mettinen      University of Helsinki

  Werner Almesberger EPFL LRC

  

  Theory of Operation

  

  I Hardware, detection, initialisation and shutdown.

  

  1. Supported Hardware

  

  This driver should handle all variants of the PCI Madge ATM adapters

  with the Horizon chipset. These are all PCI cards supporting PIO, BM

  DMA and a form of MMIO (registers only, not internal RAM).

  

  The driver is only known to work with SONET and UTP Horizon Ultra

  cards at 155Mb/s. However, code is in place to deal with both the

  original Horizon and 25Mb/s operation.

  

  There are two revisions of the Horizon ASIC: the original and the

  Ultra. Details of hardware bugs are in section III.

  

  The ASIC version can be distinguished by chip markings but is NOT

  indicated by the PCI revision (all adapters seem to have PCI rev 1).

  

  I believe that:

  

  Horizon       => Collage  25 PCI Adapter (UTP and STP)

  Horizon Ultra => Collage 155 PCI Client (UTP or SONET)

  Ambassador x  => Collage 155 PCI Server (completely different)

  

  Horizon (25Mb/s) is fitted with UTP and STP connectors. It seems to

  have a Madge B154 plus glue logic serializer. I have also found a

  really ancient version of this with slightly different glue. It

  comes with the revision 0 (140-025-01) ASIC.

  

  Horizon Ultra (155Mb/s) is fitted with either a Pulse Medialink

  output (UTP) or an HP HFBR 5205 output (SONET). It has either

  Madge's SAMBA framer or a SUNI-lite device (early versions). It

  comes with the revision 1 (140-027-01) ASIC.

  

  2. Detection

  

  All Horizon-based cards present with the same PCI Vendor and Device

  IDs. The standard Linux 2.2 PCI API is used to locate any cards and

  to enable bus-mastering (with appropriate latency).

  

  ATM_LAYER_STATUS in the control register distinguishes between the

  two possible physical layers (25 and 155). It is not clear whether

  the 155 cards can also operate at 25Mbps. We rely on the fact that a

  card operates at 155 if and only if it has the newer Horizon Ultra

  ASIC.

  

  For 155 cards the two possible framers are probed for and then set

  up for loop-timing.

  

  3. Initialisation

  

  The card is reset and then put into a known state. The physical

  layer is configured for normal operation at the appropriate speed;

  in the case of the 155 cards, the framer is initialised with

  line-based timing; the internal RAM is zeroed and the allocation of

  buffers for RX and TX is made; the Burnt In Address is read and

  copied to the ATM ESI; various policy settings for RX (VPI bits,

  unknown VCs, oam cells) are made. Ideally all policy items should be

  configurable at module load (if not actually on-demand), however,

  only the vpi vs vci bit allocation can be specified at insmod.

  

  4. Shutdown

  

  This is in response to module_cleaup. No VCs are in use and the card

  should be idle; it is reset.

  

  II Driver software (as it should be)

  

  0. Traffic Parameters

  

  The traffic classes (not an enumeration) are currently: ATM_NONE (no

  traffic), ATM_UBR, ATM_CBR, ATM_VBR and ATM_ABR, ATM_ANYCLASS

  (compatible with everything). Together with (perhaps only some of)

  the following items they make up the traffic specification.

  

  struct atm_trafprm {

    unsigned char traffic_class; traffic class (ATM_UBR, ...)

    int           max_pcr;       maximum PCR in cells per second

    int           pcr;           desired PCR in cells per second

    int           min_pcr;       minimum PCR in cells per second

    int           max_cdv;       maximum CDV in microseconds

    int           max_sdu;       maximum SDU in bytes

  };

  

  Note that these denote bandwidth available not bandwidth used; the

  possibilities according to ATMF are:

  

  Real Time (cdv and max CDT given)

  

  CBR(pcr)             pcr bandwidth always available

  rtVBR(pcr,scr,mbs)   scr bandwidth always available, up to pcr at mbs too

  

  Non Real Time

  

  nrtVBR(pcr,scr,mbs)  scr bandwidth always available, up to pcr at mbs too

  UBR()

  ABR(mcr,pcr)         mcr bandwidth always available, up to pcr (depending) too

  

  mbs is max burst size (bucket)

  pcr and scr have associated cdvt values

  mcr is like scr but has no cdtv

  cdtv may differ at each hop

  

  Some of the above items are qos items (as opposed to traffic

  parameters). We have nothing to do with qos. All except ABR can have

  their traffic parameters converted to GCRA parameters. The GCRA may

  be implemented as a (real-number) leaky bucket. The GCRA can be used

  in complicated ways by switches and in simpler ways by end-stations.

  It can be used both to filter incoming cells and shape out-going

  cells.

  

  ATM Linux actually supports:

  

  ATM_NONE() (no traffic in this direction)

  ATM_UBR(max_frame_size)

  ATM_CBR(max/min_pcr, max_cdv, max_frame_size)

  

  0 or ATM_MAX_PCR are used to indicate maximum available PCR

  

  A traffic specification consists of the AAL type and separate

  traffic specifications for either direction. In ATM Linux it is:

  

  struct atm_qos {

  struct atm_trafprm txtp;

  struct atm_trafprm rxtp;

  unsigned char aal;

  };

  

  AAL types are:

  

  ATM_NO_AAL    AAL not specified

  ATM_AAL0      "raw" ATM cells

  ATM_AAL1      AAL1 (CBR)

  ATM_AAL2      AAL2 (VBR)

  ATM_AAL34     AAL3/4 (data)

  ATM_AAL5      AAL5 (data)

  ATM_SAAL      signaling AAL

  

  The Horizon has support for AAL frame types: 0, 3/4 and 5. However,

  it does not implement AAL 3/4 SAR and it has a different notion of

  "raw cell" to ATM Linux's (48 bytes vs. 52 bytes) so neither are

  supported by this driver.

  

  The Horizon has limited support for ABR (including UBR), VBR and

  CBR. Each TX channel has a bucket (containing up to 31 cell units)

  and two timers (PCR and SCR) associated with it that can be used to

  govern cell emissions and host notification (in the case of ABR this

  is presumably so that RM cells may be emitted at appropriate times).

  The timers may either be disabled or may be set to any of 240 values

  (determined by the clock crystal, a fixed (?) per-device divider, a

  configurable divider and a configurable timer preload value).

  

  At the moment only UBR and CBR are supported by the driver. VBR will

  be supported as soon as ATM for Linux supports it. ABR support is

  very unlikely as RM cell handling is completely up to the driver.

  

  1. TX (TX channel setup and TX transfer)

  

  The TX half of the driver owns the TX Horizon registers. The TX

  component in the IRQ handler is the BM completion handler. This can

  only be entered when tx_busy is true (enforced by hardware). The

  other TX component can only be entered when tx_busy is false

  (enforced by driver). So TX is single-threaded.

  

  Apart from a minor optimisation to not re-select the last channel,

  the TX send component works as follows:

  

  Atomic test and set tx_busy until we succeed; we should implement

  some sort of timeout so that tx_busy will never be stuck at true.

  

  If no TX channel is set up for this VC we wait for an idle one (if

  necessary) and set it up.

  

  At this point we have a TX channel ready for use. We wait for enough

  buffers to become available then start a TX transmit (set the TX

  descriptor, schedule transfer, exit).

  

  The IRQ component handles TX completion (stats, free buffer, tx_busy

  unset, exit). We also re-schedule further transfers for the same

  frame if needed.

  

  TX setup in more detail:

  

  TX open is a nop, the relevant information is held in the hrz_vcc

  (vcc->dev_data) structure and is "cached" on the card.

  

  TX close gets the TX lock and clears the channel from the "cache".

  

  2. RX (Data Available and RX transfer)

  

  The RX half of the driver owns the RX registers. There are two RX

  components in the IRQ handler: the data available handler deals with

  fresh data that has arrived on the card, the BM completion handler

  is very similar to the TX completion handler. The data available

  handler grabs the rx_lock and it is only released once the data has

  been discarded or completely transferred to the host. The BM

  completion handler only runs when the lock is held; the data

  available handler is locked out over the same period.

  

  Data available on the card triggers an interrupt. If the data is not

  suitable for our existing RX channels or we cannot allocate a buffer

  it is flushed. Otherwise an RX receive is scheduled. Multiple RX

  transfers may be scheduled for the same frame.

  

  RX setup in more detail:

  

  RX open...

  RX close...

  

  III Hardware Bugs

  

  0. Byte vs Word addressing of adapter RAM.

  

  A design feature; see the .h file (especially the memory map).

  

  1. Bus Master Data Transfers (original Horizon only, fixed in Ultra)

  

  The host must not start a transmit direction transfer at a

  non-four-byte boundary in host memory. Instead the host should

  perform a byte, or a two byte, or one byte followed by two byte

  transfer in order to start the rest of the transfer on a four byte

  boundary. RX is OK.

  

  Simultaneous transmit and receive direction bus master transfers are

  not allowed.

  

  The simplest solution to these two is to always do PIO (never DMA)

  in the TX direction on the original Horizon. More complicated

  solutions are likely to hurt my brain.

  

  2. Loss of buffer on close VC

  

  When a VC is being closed, the buffer associated with it is not

  returned to the pool. The host must store the reference to this

  buffer and when opening a new VC then give it to that new VC.

  

  The host intervention currently consists of stacking such a buffer

  pointer at VC close and checking the stack at VC open.

  

  3. Failure to close a VC

  

  If a VC is currently receiving a frame then closing the VC may fail

  and the frame continues to be received.

  

  The solution is to make sure any received frames are flushed when

  ready. This is currently done just before the solution to 2.

  

  4. PCI bus (original Horizon only, fixed in Ultra)

  

  Reading from the data port prior to initialisation will hang the PCI

  bus. Just don't do that then! We don't.

  

  IV To Do List

  

  . Timer code may be broken.

  

  . Allow users to specify buffer allocation split for TX and RX.

  

  . Deal once and for all with buggy VC close.

  

  . Handle interrupted and/or non-blocking operations.

  

  . Change some macros to functions and move from .h to .c.

  

  . Try to limit the number of TX frames each VC may have queued, in

    order to reduce the chances of TX buffer exhaustion.

  

  . Implement VBR (bucket and timers not understood) and ABR (need to

    do RM cells manually); also no Linux support for either.

  

  . Implement QoS changes on open VCs (involves extracting parts of VC open

    and close into separate functions and using them to make changes).

  

********* globals **********/

********* access functions **********/

 Read / Write Horizon registers */

/* Read / Write to a given address in Horizon buffer memory.

   Interrupts must be disabled between the address register and data

 wr_regl (dev, MEM_WR_ADDR_REG_OFF, (u32) addr);

 wr_regl (dev, MEM_RD_ADDR_REG_OFF, (u32) addr);

********* specialised access functions **********/

 RX */

 TX */

 Update or query one configuration parameter of a particular channel. */

********* dump functions **********/

********* VPI/VCI <-> (RX) channel conversions **********/

 RX channels are 10 bit integers, these fns are quite paranoid */

********* decode RX queue entries **********/

/* Cell Transmit Rate Values

 *

 * the cell transmit rate (cells per sec) can be set to a variety of

 * different values by specifying two parameters: a timer preload from

 * 1 to 16 (stored as 0 to 15) and a clock divider (2 to the power of

 * an exponent from 0 to 14; the special value 15 disables the timer).

 *

 * cellrate = baserate / (preload * 2^divider)

 *

 * The maximum cell rate that can be specified is therefore just the

 * base rate. Halving the preload is equivalent to adding 1 to the

 * divider and so values 1 to 8 of the preload are redundant except

 * in the case of a maximal divider (14).

 *

 * Given a desired cell rate, an algorithm to determine the preload

 * and divider is:

 * 

 * a) x = baserate / cellrate, want p * 2^d = x (as far as possible)

 * b) if x > 16 * 2^14 then set p = 16, d = 14 (min rate), done

 *    if x <= 16 then set p = x, d = 0 (high rates), done

 * c) now have 16 < x <= 2^18, or 1 < x/16 <= 2^14 and we want to

 *    know n such that 2^(n-1) < x/16 <= 2^n, so slide a bit until

 *    we find the range (n will be between 1 and 14), set d = n

 * d) Also have 8 < x/2^n <= 16, so set p nearest x/2^n

 *

 * The algorithm used below is a minor variant of the above.

 *

 * The base rate is derived from the oscillator frequency (Hz) using a

 * fixed divider:

 *

 * baserate = freq / 32 in the case of some Unknown Card

 * baserate = freq / 8  in the case of the Horizon        25

 * baserate = freq / 8  in the case of the Horizon Ultra 155

 *

 * The Horizon cards have oscillators and base rates as follows:

 *

 * Card               Oscillator  Base Rate

 * Unknown Card       33 MHz      1.03125 MHz (33 MHz = PCI freq)

 * Horizon        25  32 MHz      4       MHz

 * Horizon Ultra 155  40 MHz      5       MHz

 *

 * The following defines give the base rates in Hz. These were

 * previously a factor of 100 larger, no doubt someone was using

 * cps*100.

 d is an exponent

 p ranges from 1 to a power of 2

 note: rounding the rate down means rounding 'p' up

 br_exp and br_man are used to avoid overflowing (c*maxp*2^d) in

 the tests below. We could think harder about exact possibilities

 of failure...

 avoid div by zero

 (br >>br_exp) <<br_exp == br and

 br_exp <= CR_MAXPEXP+CR_MIND

 Equivalent to: B <= (c << (MAXPEXP+MIND))

 take care of rounding

 but p must be non-zero

 but p must be non-zero

 round_up */

 but p must be non-zero

 at this point we have

 d == MIND and (c << (MAXPEXP+MIND)) < B

 Equivalent to: B <= (c << (MAXPEXP+d))

 c << (MAXPEXP+d-1) < B <= c << (MAXPEXP+d)

 1 << (MAXPEXP-1) < B/2^d/c <= 1 << MAXPEXP

 MAXP/2 < B/c2^d <= MAXP

 take care of rounding

 round_up */

 at this point we have

 d == MAXD and (c << (MAXPEXP+MAXD)) < B

 but we cannot go any higher

 take care of rounding

 paranoia

 actual rate is not returned

 should never happen as round_nearest always succeeds

 within tolerance

 intolerant, try rounding instead

********* Listen on a VC **********/

 is there any guarantee that we don't get two simulataneous

 identical calls of this function from different processes? yes

 rate_lock

 u16?

 very serious error, should never occur

 clean up?

 Give back spare buffer

 should never occur

 but easy to recover from

 Channel is currently disabled so change its status to idle

 do we really need to save the flags again?

 rxer->rate = make_rate (qos->peak_cells);

********* change vc rate for a given vc **********/

********* free an skb (as per ATM device driver documentation) **********/

********* cancel listen on a VC **********/

 I suppose this could happen once we deal with _NONE traffic properly

 XXX Is this all really necessary? We can rely on the rx_data_av

 handler to discard frames that remain queued for delivery. If the

 worry is that immediately reopening the channel (perhaps by a

 different process) may cause some data to be mis-delivered then

 there may still be a simpler solution (such as busy-waiting on

 rx_busy once the channel is disabled or before a new one is

 opened - does this leave any holes?). Arguably setting up and

 tearing down the TX and RX halves of each virtual circuit could

 most safely be done within ?x_busy protected regions.

 OK, current changes are that Simon's marker is disabled and we DO

 look for NULL rxer elsewhere. The code here seems flush frames

 and then remember the last dead cell belonging to the channel

 just disabled - the cell gets relinked at the next vc_open.

 However, when all VCs are closed or only a few opened there are a

 handful of buffers that are unusable.

 Does anyone feel like documenting spare_buffers properly?

 Does anyone feel like fixing this in a nicer way?

 Flush any data which is left in the channel

 Change the rx channel port to something different to the RX

 channel we are trying to close to force Horizon to flush the rx

 channel read and write pointers.

 Select this RX channel. Flush doesn't seem to work unless we

 select an RX channel before hand

 Attempt to flush a frame on this RX channel

 Force Horizon to flush rx channel read and write pointers as before

********* schedule RX transfers **********/

 Note on tail recursion: a GCC developer said that it is not likely

 to be fixed soon, so do not define TAILRECUSRIONWORKS unless you

 are sure it does as you may otherwise overflow the kernel stack.

 giving this fn a return value would help GCC, allegedly

 bytes waiting for RX transfer

 this code follows the TX code but (at the moment) there is only

 one region - the skb itself. I don't know if this will change,

 but it doesn't hurt to have the code here, disabled.

 start next transfer within same region

 rx_bytes == 0 -- we're between regions

 regions remaining to transfer

 start a new region

 rx_regions == 0

 that's all folks - end of frame

 dev->rx_iovec = 0;

 VC layer stats

 end of our responsibility

 note: writing RX_COUNT clears any interrupt condition

 allow another RX thread to start

 and we all bless optimised tail calls

 grrrrrrr!

********* handle RX bus master complete events **********/

 clear interrupt condition on adapter

********* (queue to) become the next TX thread **********/

********* allow another TX thread to start **********/

********* schedule TX transfers **********/

 bytes in current region waiting for TX transfer

 start next transfer within same region

 end of last region

 tx_bytes == 0 -- we're between regions

 regions remaining to transfer

 start a new region

 tx_regions == 0

 that's all folks - end of frame

 VC layer stats

 free the skb

 note: writing TX_COUNT clears any interrupt condition

 and we all bless optimised tail calls

 grrrrrrr!

********* handle TX bus master complete events **********/

 clear interrupt condition on adapter

********* move RX Q pointer to next item in circular buffer **********/

 called only from IRQ sub-handler

********* handle RX data received by device **********/

 called from IRQ handler

 try to grab rx lock (not possible during RX bus mastering)

 lock is cleared if we fail now, o/w after bus master completion

 (at least) bus-mastering breaks if we try to handle a

 zero-length frame, besides AAL5 does not support them

 if no vcc is assigned to this channel, we should drop the frame

 (is this what SIMONS etc. was trying to achieve?)

 remember this so we can push it later

 remember this so we can flush it later

 prepare socket buffer

 simple transfer

 dev->rx_regions = 0;

 dev->rx_iovec = 0;

 do the business

 do we count this?

 do we count this?

 do we count this?

 Wait update complete ? SPONG

 RX was aborted

********* interrupt handler **********/

 definitely for us

 In the interests of fairness, the handlers below are

 called in sequence and without immediate return to the head of

 the while loop. This is only of issue for slow hosts (or when

 debugging messages are on). Really slow hosts may find a fast

 sender keeps them permanently in the IRQ handler. :(

 (only an issue for slow hosts) RX completion goes before

 rx_data_av as the former implies rx_busy and so the latter

 would just abort. If it reschedules another transfer

 (continuing the same frame) then it will not clear rx_busy.

 (only an issue for slow hosts) TX completion goes before RX

 data available as it is a much shorter routine - there is the

 chance that any further transfers it schedules will be complete

 by the time of the return to the head of the while loop

********* housekeeping **********/

 just stats at the moment

 collect device-specific (not driver/atm-linux) stats here

********* find an idle channel for TX and set it up **********/

 called with tx_busy set

 better would be to fail immediately, the caller can then decide whether

 to wait or drop (depending on whether this is UBR etc.)

 delay a bit here

 got an idle channel

 tx_idle ensures we look for idle channels in RR order

 set up the channel we found

 Initialise the cell header in the transmit channel descriptor

 a.k.a. prepare the channel and remember that we have done so.

 Update the transmit channel record.

 xBR channel

 Update the PCR counter preload value etc.

 SCR timer

 Bucket size...

 ... and fullness

 Initialise the read and write buffer pointers

 idle TX channels should have identical pointers

 spin_unlock... return -E...

 I wonder if gcc would get rid of one of the pointer aliases

 Initialise the CRC

 Write the Cell Header

 Payload Type, CLP and GFC would go here if non-zero

********* send a frame **********/

 signed for error return */

 don't understand this

 where would be a better place for this? housekeeping?

 wey-hey! */

 wait until TX is free and grab lock

 Wait for enough space to be available in transmit buffer memory.

 should be number of cells needed + 2 (according to hardware docs)

 = ((framelen+8)+47) / 48 + 2

 = (framelen+7) / 48 + 3, hmm... faster to put addition inside XXX

 replace with timer and sleep, add dev->tx_buffers_queue (max 1 entry)

 what is the appropriate delay? implement a timeout? (depending on line speed?)

 mdelay (1);

 what happens if we kill (current_pid, SIGKILL) ?

 Select a channel to transmit the frame on.

 Are we currently transmitting this VC on one of the channels?

 Find and set up an idle channel.

 TX start transfer

 remember this so we can free it later

 scatter gather transfer

 @@@ needs rewritten */

 simple transfer

 and do the business

********* reset a card **********/

 why not set RESET_HORIZON to one and wait for the card to

 reassert that bit as zero? Like so:

 old reset code retained:

 just guessing here

********* read the burnt in address **********/

 DI must be valid around rising SK edge

 wake Serial EEPROM and send 110 (READ) command

 we could check that we have DO = 0 here

********* initialise a card **********/

 Reset the card to get everything in a known state

 Clear all the buffer memory

 All transmit eight channels are set up as AAL5 ABR channels with

 a 16us cell spacing. Why?

 Channel 0 gets the free buffer at 100h, channel 1 gets the free

 buffer at 110h etc.

 initialise the read and write buffer pointers

 set the status of the initial buffers to empty

 Use space bufn3 at the moment for tx buffers

 Initialise the transmit free buffer count

 Initialise all of the receive channels to be AAL5 disabled with

 an interrupt threshold of 0

 Use space bufn4 at the moment for rx buffers

 Initialise the receive free buffer count

 Initialize Horizons registers

 TX config

 RX config. Use 10-x VC bits, x VP bits, non user cells in channel 0.

 RX line config

 Set the max AAL5 cell count to be just enough to contain the

 largest AAL5 frame that the user wants to receive

 Enable receive

 Drive the OE of the LEDs then turn the green LED on

 Test for a 155-capable card

 Select 155 mode... make this a choice (or: how do we detect

 external line speed and switch?)

 test SUNI-lite vs SAMBA

 Register 0x00 in the SUNI will have some of bits 3-7 set, and

 they will always be zero for the SAMBA.  Ha!  Bloody hardware

 engineers.  It'll never work.

 SUNI

 Reset, just in case

 Configure transmit FIFO

 Set line timed mode

 SAMBA

 Reset, just in case

 Turn off diagnostic loopback and enable line-timed mode

 Turn on transmit outputs

 Select 25 mode

 Madge B154 setup

 none required?

 in the card I have, EEPROM

 addresses 0, 1, 2 contain 0

 addresess 5, 6 etc. contain ffff

 NB: Madge prefix is 00 00 f6 (which is 00 00 6f in Ethernet bit order)

 the read_bia routine gets the BIA in Ethernet bit order

 Enable RX_Q and ?X_COMPLETE interrupts only

********* check max_sdu **********/

********* check pcr **********/

 something like this should be part of ATM Linux

 we are assuming non-UBR, and non-special values of pcr

 !! max_pcr = UNSPEC (0) is equivalent to max_pcr = MAX (-1)

 easier to #define ATM_MAX_PCR 0 and have all rates unsigned?

 [this would get rid of next two conditionals]

 each limit unspecified or not violated

********* open VC **********/

 allocated late

 UNSPEC is deprecated, remove this code eventually

 max speed for the moment

 check AAL and remember it

 we would if it were 48 bytes and not 52!

 we would if I knew how do the SAR!

 TX traffic parameters

 there are two, interrelated problems here: 1. the reservation of

 PCR is not a binary choice, we are given bounds and/or a

 desirable value; 2. the device is only capable of certain values,

 most of which are not integers. It is almost certainly acceptable

 to be off by a maximum of 1 to 10 cps.

 Pragmatic choice: always store an integral PCR as that which has

 been allocated, even if we allocate a little (or a lot) less,

 after rounding. The actual allocation depends on what we can

 manage with our rate selection algorithm. The rate selection

 algorithm is given an integral PCR and a tolerance and told

 whether it should round the value up or down if the tolerance is

 exceeded; it returns: a) the actual rate selected (rounded up to

 the nearest integer), b) a bit pattern to feed to the timer

 register, and c) a failure value if no applicable rate exists.

 Part of the job is done by atm_pcr_goal which gives us a PCR

 specification which says: EITHER grab the maximum available PCR

 (and perhaps a lower bound which we must not pass), OR grab this

 amount, rounding down if you have to (and perhaps a lower bound

 which we must not pass) OR grab this amount, rounding up if you

 have to (and perhaps an upper bound which we must not pass). If any

 bounds ARE passed we fail. Note that rounding is only rounding to

 match device limitations, we do not round down to satisfy

 bandwidth availability even if this would not violate any given

 lower bound.

 Note: telephony = 64kb/s = 48 byte cell payload @ 500/3 cells/s

 (say) so this is not even a binary fixpoint cell rate (but this

 device can do it). To avoid this sort of hassle we use a

 tolerance parameter (currently fixed at 10 cps).

 set up defaults for no traffic

 who knows what would actually happen if you try and send on this?

 we take "the PCR" as a rate-cap

 not reserved

 reserve min, allow up to max

 ?

 down vs. up, remaining bandwidth vs. unlimited bandwidth!!

 should really have: once someone gets unlimited bandwidth

 that no more non-UBR channels can be opened until the

 unlimited one closes?? For the moment, round_down means

 greedy people actually get something and not nothing

 slight race (no locking) here so we may get -EAGAIN

 later; the greedy bastards would deserve it :)

 not really clear what further checking is needed

 int scr = atm_scr_goal (txtp);

 just for fun

 just for fun

 see comments for PCR with CBR above

 slight race (no locking) here so we may get -EAGAIN

 later; the greedy bastards would deserve it :)

 not really clear what further checking is needed

 error = atm_scr_check (txtp, vcc.tx_rate);

 bucket calculations (from a piece of paper...) cell bucket

 capacity must be largest integer smaller than m(p-s)/p + 1

 where m = max burst size, p = pcr, s = scr

 RX traffic parameters

 set up defaults for no traffic

 not reserved

 reserve min

 ?

 slight race (no locking) here so we may get -EAGAIN

 later; the greedy bastards would deserve it :)

 not really clear what further checking is needed

 int scr = atm_scr_goal (rxtp);

 just for fun

 slight race (no locking) here so we may get -EAGAIN

 later; the greedy bastards would deserve it :)

 not really clear what further checking is needed

 error = atm_scr_check (rxtp, vcc.rx_rate);

 late abort useful for diagnostics

 get space for our vcc stuff and copy parameters into it

 clear error and grab cell rate resource lock

 really consume cell rates

 release lock and exit on error

 this is "immediately before allocating the connection identifier

 in hardware" - so long as the next call does not fail :)

 any errors here are very serious and should never occur

 this link allows RX frames through

 success, set elements of atm_vcc

 indicate readiness

********* close VC **********/

 indicate unreadiness

 let any TX on this channel that has started complete

 no restart, just keep trying

 remove record of any tx_channel having been setup for this channel

 disable RXing - it tries quite hard

 forget the vcc - no more skbs will be pushed

 atomically release our rate reservation

 free our structure

 say the VPI/VCI is free again

********* proc file contents **********/

 more diagnostics here? */

 adapter slot free, read resources from PCI configuration space

 XXX DEV_LABEL is a guess */

 perhaps we should be nice: deregister all adapters and abort?

 grab IRQ and install handler - move this someplace more sensible

 irqflags guess */

 name guess */

 enable bus master accesses

 frobnicate latency (upwards, usually)

 these next three are performance hacks

 Allocate cell rates and remember ASIC version

 Fibre: ATM_OC3_PCR = 1555200000/8/270*260/53 - 29/53

 Copper: (WRONG) we want 6 into the above, close to 25Mb/s

 Copper: (plagarise!) 25600000/8/270*260/53 - n/53

 to be really pedantic, this should be ATM_OC3c_PCR

 NOT "|= ultra" !

 rate changes spinlock

 on-board memory access spinlock; we want atomic reads and

 writes to adapter memory (handles IRQ and SMP)

 vpi in 0..4, vci in 6..10

********* module entry **********/

 check arguments

 get the juice

********* module exit **********/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

  Madge Ambassador ATM Adapter driver.

  Copyright (C) 1995-1999  Madge Networks Ltd.



 * dedicated to the memory of Graham Gordon 1971-1998 * */

/*

  

  Theory of Operation

  

  I Hardware, detection, initialisation and shutdown.

  

  1. Supported Hardware

  

  This driver is for the PCI ATMizer-based Ambassador card (except

  very early versions). It is not suitable for the similar EISA "TR7"

  card. Commercially, both cards are known as Collage Server ATM

  adapters.

  

  The loader supports image transfer to the card, image start and few

  other miscellaneous commands.

  

  Only AAL5 is supported with vpi = 0 and vci in the range 0 to 1023.

  

  The cards are big-endian.

  

  2. Detection

  

  Standard PCI stuff, the early cards are detected and rejected.

  

  3. Initialisation

  

  The cards are reset and the self-test results are checked. The

  microcode image is then transferred and started. This waits for a

  pointer to a descriptor containing details of the host-based queues

  and buffers and various parameters etc. Once they are processed

  normal operations may begin. The BIA is read using a microcode

  command.

  

  4. Shutdown

  

  This may be accomplished either by a card reset or via the microcode

  shutdown command. Further investigation required.

  

  5. Persistent state

  

  The card reset does not affect PCI configuration (good) or the

  contents of several other "shared run-time registers" (bad) which

  include doorbell and interrupt control as well as EEPROM and PCI

  control. The driver must be careful when modifying these registers

  not to touch bits it does not use and to undo any changes at exit.

  

  II Driver software

  

  0. Generalities

  

  The adapter is quite intelligent (fast) and has a simple interface

  (few features). VPI is always zero, 1024 VCIs are supported. There

  is limited cell rate support. UBR channels can be capped and ABR

  (explicit rate, but not EFCI) is supported. There is no CBR or VBR

  support.

  

  1. Driver <-> Adapter Communication

  

  Apart from the basic loader commands, the driver communicates

  through three entities: the command queue (CQ), the transmit queue

  pair (TXQ) and the receive queue pairs (RXQ). These three entities

  are set up by the host and passed to the microcode just after it has

  been started.

  

  All queues are host-based circular queues. They are contiguous and

  (due to hardware limitations) have some restrictions as to their

  locations in (bus) memory. They are of the "full means the same as

  empty so don't do that" variety since the adapter uses pointers

  internally.

  

  The queue pairs work as follows: one queue is for supply to the

  adapter, items in it are pending and are owned by the adapter; the

  other is the queue for return from the adapter, items in it have

  been dealt with by the adapter. The host adds items to the supply

  (TX descriptors and free RX buffer descriptors) and removes items

  from the return (TX and RX completions). The adapter deals with out

  of order completions.

  

  Interrupts (card to host) and the doorbell (host to card) are used

  for signalling.

  

  1. CQ

  

  This is to communicate "open VC", "close VC", "get stats" etc. to

  the adapter. At most one command is retired every millisecond by the

  card. There is no out of order completion or notification. The

  driver needs to check the return code of the command, waiting as

  appropriate.

  

  2. TXQ

  

  TX supply items are of variable length (scatter gather support) and

  so the queue items are (more or less) pointers to the real thing.

  Each TX supply item contains a unique, host-supplied handle (the skb

  bus address seems most sensible as this works for Alphas as well,

  there is no need to do any endian conversions on the handles).

  

  TX return items consist of just the handles above.

  

  3. RXQ (up to 4 of these with different lengths and buffer sizes)

  

  RX supply items consist of a unique, host-supplied handle (the skb

  bus address again) and a pointer to the buffer data area.

  

  RX return items consist of the handle above, the VC, length and a

  status word. This just screams "oh so easy" doesn't it?



  Note on RX pool sizes:

   

  Each pool should have enough buffers to handle a back-to-back stream

  of minimum sized frames on a single VC. For example:

  

    frame spacing = 3us (about right)

    

    delay = IRQ lat + RX handling + RX buffer replenish = 20 (us)  (a guess)

    

    min number of buffers for one VC = 1 + delay/spacing (buffers)



    delay/spacing = latency = (20+2)/3 = 7 (buffers)  (rounding up)

    

  The 20us delay assumes that there is no need to sleep; if we need to

  sleep to get buffers we are going to drop frames anyway.

  

  In fact, each pool should have enough buffers to support the

  simultaneous reassembly of a separate frame on each VC and cope with

  the case in which frames complete in round robin cell fashion on

  each VC.

  

  Only one frame can complete at each cell arrival, so if "n" VCs are

  open, the worst case is to have them all complete frames together

  followed by all starting new frames together.

  

    desired number of buffers = n + delay/spacing

    

  These are the extreme requirements, however, they are "n+k" for some

  "k" so we have only the constant to choose. This is the argument

  rx_lats which current defaults to 7.

  

  Actually, "n ? n+k : 0" is better and this is what is implemented,

  subject to the limit given by the pool size.

  

  4. Driver locking

  

  Simple spinlocks are used around the TX and RX queue mechanisms.

  Anyone with a faster, working method is welcome to implement it.

  

  The adapter command queue is protected with a spinlock. We always

  wait for commands to complete.

  

  A more complex form of locking is used around parts of the VC open

  and close functions. There are three reasons for a lock: 1. we need

  to do atomic rate reservation and release (not used yet), 2. Opening

  sometimes involves two adapter commands which must not be separated

  by another command on the same VC, 3. the changes to RX pool size

  must be atomic. The lock needs to work over context switches, so we

  use a semaphore.

  

  III Hardware Features and Microcode Bugs

  

  1. Byte Ordering

  

  *%^"$&%^$*&^"$(%^$#&^%$(&#%$*(&^#%!"!"!*!

  

  2. Memory access

  

  All structures that are not accessed using DMA must be 4-byte

  aligned (not a problem) and must not cross 4MB boundaries.

  

  There is a DMA memory hole at E0000000-E00000FF (groan).

  

  TX fragments (DMA read) must not cross 4MB boundaries (would be 16MB

  but for a hardware bug).

  

  RX buffers (DMA write) must not cross 16MB boundaries and must

  include spare trailing bytes up to the next 4-byte boundary; they

  will be written with rubbish.

  

  The PLX likes to prefetch; if reading up to 4 u32 past the end of

  each TX fragment is not a problem, then TX can be made to go a

  little faster by passing a flag at init that disables a prefetch

  workaround. We do not pass this flag. (new microcode only)

  

  Now we:

  . Note that alloc_skb rounds up size to a 16byte boundary.  

  . Ensure all areas do not traverse 4MB boundaries.

  . Ensure all areas do not start at a E00000xx bus address.

  (I cannot be certain, but this may always hold with Linux)

  . Make all failures cause a loud message.

  . Discard non-conforming SKBs (causes TX failure or RX fill delay).

  . Discard non-conforming TX fragment descriptors (the TX fails).

  In the future we could:

  . Allow RX areas that traverse 4MB (but not 16MB) boundaries.

  . Segment TX areas into some/more fragments, when necessary.

  . Relax checks for non-DMA items (ignore hole).

  . Give scatter-gather (iovec) requirements using ???. (?)

  

  3. VC close is broken (only for new microcode)

  

  The VC close adapter microcode command fails to do anything if any

  frames have been received on the VC but none have been transmitted.

  Frames continue to be reassembled and passed (with IRQ) to the

  driver.

  

  IV To Do List

  

  . Fix bugs!

  

  . Timer code may be broken.

  

  . Deal with buggy VC close (somehow) in microcode 12.

  

  . Handle interrupted and/or non-blocking writes - is this a job for

    the protocol layer?

  

  . Add code to break up TX fragments when they span 4MB boundaries.

  

  . Add SUNI phy layer (need to know where SUNI lives on card).

  

  . Implement a tx_alloc fn to (a) satisfy TX alignment etc. and (b)

    leave extra headroom space for Ambassador TX descriptors.

  

  . Understand these elements of struct atm_vcc: recvq (proto?),

    sleep, callback, listenq, backlog_quota, reply and user_back.

  

  . Adjust TX/RX skb allocation to favour IP with LANE/CLIP (configurable).

  

  . Impose a TX-pending limit (2?) on each VC, help avoid TX q overflow.

  

  . Decide whether RX buffer recycling is or can be made completely safe;

    turn it back on. It looks like Werner is going to axe this.

  

  . Implement QoS changes on open VCs (involves extracting parts of VC open

    and close into separate functions and using them to make changes).

  

  . Hack on command queue so that someone can issue multiple commands and wait

    on the last one (OR only "no-op" or "wait" commands are waited for).

  

  . Eliminate need for while-schedule around do_command.

  

********* globals **********/

********* access to adapter **********/

********* dump routines **********/

be32_to_cpu*/ (cmd->request));

be32_to_cpu*/ (cmd->args.par[i]));

********* check memory areas for use by Ambassador **********/

 see limitations under Hardware Features */

 assumes length > 0

********* free an skb (as per ATM device driver documentation) **********/

********* TX completion **********/

 VC layer stats

 free the descriptor

 free the skb

********* RX completion **********/

 unused: u16 lec_id = be16_to_cpu (rx->lec_id);

 XXX move this in and add to VC stats ???

 prepare socket buffer

 VC layer stats

 end of our responsibility

 someone fix this (message), please!

 drop stats incremented in atm_charge

 should we count this?

 this is an adapter bug, only in new version of microcode

/*

  

  Note on queue handling.

  

  Here "give" and "take" refer to queue entries and a queue (pair)

  rather than frames to or from the host or adapter. Empty frame

  buffers are given to the RX queue pair and returned unused or

  containing RX frames. TX frames (well, pointers to TX fragment

  lists) are given to the TX queue pair, completions are returned.

  

********* command queue **********/

 I really don't like this, but it's the best I can do at the moment

 also, the callers are responsible for byte order as the microcode

 sometimes does 16-bit accesses (yuk yuk yuk)

 if not full...

 remember my slot for later

 copy command in

 mail the command

 these comments were in a while-loop before, msleep removes the loop

 go to sleep

 PRINTD (DBG_CMD, "wait: sleeping %lu for command", timeout);

 wait for my slot to be reached (all waiters are here or above, until...)

 wait on my slot (... one gets to its slot, and... )

 update queue (... moves the queue along to the next slot)

 copy command out

********* TX queue pair **********/

 hand over the TX and ring the bell

 deal with TX completion

 mark unused again

 remove item

********* RX queue pairs **********/

 hand over the RX buffer

 deal with RX completion

 mark unused again

 remove item

********* RX Pool handling **********/

 pre: buffers_wanted = 0, post: pending = 0 */

  /* we are not quite like the fill pool routines as we cannot just

     remove one buffer, we have to remove all of them, but we might as

 the pool may also be emptied via the interrupt handler */

 cast needed as there is no %? for pointer differences

 top up all RX pools

********* enable host interrupts **********/

********* disable host interrupts **********/

********* interrupt handling **********/

 for us or someone else sharing the same interrupt

 definitely for us

********* make rate (not quite as much fun as Horizon) **********/

 hush gcc

 hush gcc

 rates in cells per second, ITU format (nasty 16-bit floating-point)

 given 5-bit e and 9-bit m:

 rate = EITHER (1+m/2^9)*2^e    OR 0

 bits = EITHER 1<<14 | e<<9 | m OR 0

 (bit 15 is "reserved", bit 14 "non-zero")

 smallest rate is 0 (special representation)

 largest rate is (1+511/512)*2^31 = 4290772992 (< 2^32-1)

 smallest non-zero rate is (1+0/512)*2^0 = 1 (> 0)

 simple algorithm:

 find position of top bit, this gives e

 remove top bit and shift (rounding if feeling clever) by 9-e

 ucode bug: please don't set bit 14! so 0 rate not representable

 larger than largest representable rate

 representable rate

 invariant: rate = man*2^(exp-31)

 man has top bit set

 rate = (2^31+(man-2^31))*2^(exp-31)

 rate = (1+(man-2^31)/2^31)*2^exp

 a nop on 32-bit systems

 rate = (1+man/2^32)*2^exp

 exp is in the range 0 to 31, man is in the range 0 to 2^32-1

 time to lose significance... we want m in the range 0 to 2^9-1

 rounding presents a minor problem... we first decide which way

 we are rounding (based on given rounding direction and possibly

 the bits of the mantissa that are to be discarded).

 just truncate

 check all bits that we are discarding

 no need to check for round up outside of range

 check msb that we are discarding

 no need to check for round up outside of range

 zero rate - not representable

 (1<<14) | */ (exp<<9) | man;

********* Linux ATM Operations **********/

 some are not yet implemented while others do not make sense for

 this device

********* Open a VC **********/

 hush gcc

 hush gcc

 hush gcc

 hush gcc

 UNSPEC is deprecated, remove this code eventually

 traffic parameters

 we take "the PCR" as a rate-cap

 no rate cap

 PRINTD (DBG_QOS, "request for non-UBR/ABR denied");

 do nothing

 choose an RX pool (arranged in increasing size)

 PRINTD (DBG_QOS, "request for non-UBR/ABR denied");

 get space for our vcc stuff

 no failures beyond this point

 we are not really "immediately before allocating the connection

 identifier in hardware", but it will just have to do!

 RXer on the channel already, just modify rate...

 vpi 0

 ... and TX flags, preserving the RX pool

 vpi 0

 no RXer on the channel, just open (with pool zero)

 vpi 0

 grow RX buffer pool */

 TXer on the channel already

 switch (from pool zero) to this pool, preserving the TX bits

 vpi 0

 no TXer on the channel, open the VC (with no rate info)

 vpi 0

 this link allows RX frames through

 indicate readiness

********* Close a VC **********/

 indicate unreadiness

 disable TXing

 RXer still on the channel, just modify rate... XXX not really needed

 vpi 0

 ... and clear TX rate flags (XXX to stop RM cell output?), preserving RX pool

 no RXer on the channel, close channel

 vpi 0

 disable RXing

 this is (the?) one reason why we need the amb_vcc struct

 TXer still on the channel, just go to pool zero XXX not really needed

 vpi 0

 no TXer on the channel, close the VC

 vpi 0

 forget the rxer - no more skbs will be pushed

 shrink RX buffer pool */

 free our structure

 say the VPI/VCI is free again

********* Send **********/

 this is a driver private field so we have to set it ourselves,

 despite the fact that we are _required_ to use it to check for a

 pop function

 ?

 allocate memory for fragments

********* Change QoS on a VC **********/

 int amb_change_qos (struct atm_vcc * atm_vcc, struct atm_qos * qos, int flags);

********* Free RX Socket Buffer **********/

 This may be unsafe for various reasons that I cannot really guess

 at. However, I note that the ATM layer calls kfree_skb rather

 than dev_kfree_skb at this point so we are least covered as far

 as buffer locking goes. There may be bugs if pcap clones RX skbs.

 success

 just do what the ATM layer would have done

********* Proc File Output **********/

 more diagnostics here? */

 suni block etc?

********* Operation Structure **********/

********* housekeeping **********/

 could collect device-specific (not driver/atm-linux) stats here

 last resort refill once every ten seconds

********* creation of communication queues **********/

********* destruction of communication queues **********/

 all queues assumed empty

 includes txq.in, txq.out, rxq[].in and rxq[].out

********* basic loader commands and error handling **********/

 centisecond timeouts - guessing away here

  /* do a command

     

     Set the return value to zero, set the command type and set the

     valid entry to the right magic value. The payload is already

     correctly byte-ordered so we leave it alone. Hit the doorbell

     with the bus address of this structure.

     

 dump_registers (dev);

 dump_loader_block (lb);

 wait for start command to acknowledge...

 loader: determine loader version */

 loader: write memory data blocks */

 loader: verify memory data blocks */

 loader: start microcode */

********* reset card **********/

 put card into reset state

 wait a short while

 put card into known good state

 clear all interrupts just in case

 clear self-test done flag

 take card out of reset state

 4.2 second wait

 half second time-out

 get results of self-test

 XXX double check byte-order

 better return value?

********* transfer and start the microcode **********/

 First record contains just the start address */

********* give adapter parameters **********/

 the other "a" items are set up by the adapter

 disable fast PLX prefetching

 pass the structure

 2.2 second wait (must not touch doorbell during 2 second DMA test)

 give the adapter another half second?

 get microcode version

 get end station address

 fix up the PLX-mapped window base address to match the block

 the kernel stack had better not ever cross a 1Gb boundary!

 amb_talk */

 create_queues, ucode_init */

 get_loader_version */

 amb_reset */

 set up known dev items straight away

 flags (currently only dead)

 Allocate cell rates (fibre)

 ATM_OC3_PCR = 1555200000/8/270*260/53 - 29/53

 to be really pedantic, this should be ATM_OC3c_PCR

 semaphore for txer/rxer modifications - we cannot use a

 spinlock as the critical region needs to switch processes

 queue manipulation spinlocks; we want atomic reads and

 writes to the queue descriptors (handles IRQ and SMP)

 consider replacing "int pending" -> "atomic_t available"

 => problem related to who gets to move queue pointers

 enable bus master accesses

 frobnicate latency (upwards, usually)

 read resources from PCI configuration space

 check IO region

 grab (but share) IRQ and install handler

 register our address

 0 bits for vpi, 10 bits for vci

 enable host interrupts

 the drain should not be necessary

 buffers sizes should be greater than zero and strictly increasing

********* module stuff **********/

********* module entry **********/

 get the juice

********* module exit **********/

 SPDX-License-Identifier: GPL-2.0-only

 drivers/atm/atmtcp.c - ATM over TCP "device" driver */

 Written 1997-2000 by Werner Almesberger, EPFL LRC/ICA */

 "raw" AAL5 transport */

 control VCC; NULL if detached */

 non-zero if persistent */

 simplifies life */

/*

 * Hairy code ahead: the control VCC may be closed while we're still

 * waiting for an answer, so we need to re-validate out_vcc every once

 * in a while.

 Nothing.... Isn't this simple :-)  -- REW */

 just in case ... */

 Initializer quietens GCC warning */

/*

 * Device operations for the virtual ATM devices created by ATMTCP.

/*

 * Device operations for the ATMTCP control device.

 @@@ losing AAL in transit ... */

 SPDX-License-Identifier: GPL-2.0-only

 drivers/atm/uPD98402.c - NEC uPD98402 (PHY) declarations */

 Written 1995-2000 by Werner Almesberger, EPFL LRC/ICA */

 link diagnostics */

 SONET/SDH framing */

 loopback mode */

		/* unused fields are reported as -1, but we must not "adjust"

 clear interrupt cause */

 clear performance events */

 ignore frequency adj */

 clear overflows */

 clear interrupts */

 enable them */

 clear kernel counters */

 let SAR driver worry about stopping interrupts */

 module_exit not defined so not unloadable */

/*



  he.c



  ForeRunnerHE ATM Adapter driver for ATM on Linux

  Copyright (C) 1999-2001  Naval Research Laboratory



  This library is free software; you can redistribute it and/or

  modify it under the terms of the GNU Lesser General Public

  License as published by the Free Software Foundation; either

  version 2.1 of the License, or (at your option) any later version.



  This library is distributed in the hope that it will be useful,

  but WITHOUT ANY WARRANTY; without even the implied warranty of

  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

  Lesser General Public License for more details.



  You should have received a copy of the GNU Lesser General Public

  License along with this library; if not, write to the Free Software

  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA



/*



  he.c



  ForeRunnerHE ATM Adapter driver for ATM on Linux

  Copyright (C) 1999-2001  Naval Research Laboratory



  Permission to use, copy, modify and distribute this software and its

  documentation is hereby granted, provided that both the copyright

  notice and this permission notice appear in all copies of the software,

  derivative works or modified versions, and any portions thereof, and

  that both notices appear in supporting documentation.



  NRL ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION AND

  DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER

  RESULTING FROM THE USE OF THIS SOFTWARE.



  This driver was written using the "Programmer's Reference Manual for

  ForeRunnerHE(tm)", MANU0361-01 - Rev. A, 08/21/98.



  AUTHORS:

	chas williams <chas@cmf.nrl.navy.mil>

	eric kinzie <ekinzie@cmf.nrl.navy.mil>



  NOTES:

	4096 supported 'connections'

	group 0 is used for all traffic

	interrupt queue 0 is used for all interrupts

	aal0 support (based on work from ulrich.u.muller@nokia.com)



 still confused about this */

 #undef HE_DEBUG */

 !HE_DEBUG */

 HE_DEBUG */

 declarations */

 globals */

 Read from EEPROM = 0000 0011b */

 0 */

 0 */

 0 */

 0 */

 0 */

 0 */

 1 */

 1 */

 Clock to read from/write to the EEPROM */

 section 2.12 connection memory access */

 flush posted writes */

 figure 2.2 connection id */

 2.5.1 per connection transmit state registers */

	/* from page 2-20

	 *

	 * NOTE While the transmit connection is active, bits 23 through 0

	 *      of this register must not be written by the host.  Byte

	 *      enables should be used during normal operation when writing

	 *      the most significant byte.

 2.7.1 per connection receive state registers */

 need to remove from he_devs */

 cps to atm forum format */

 5.1.7 cs block initialization */

 rate grid timer reload values */

		/* 2.4 internal transmit function

		 *

	 	 * we initialize the first row in the rate grid.

		 * values are period (in clock cycles) of timer

 table 5.2 (4 cells per lbuf) */

 table 5.3, 5.4, 5.5, 5.6, 5.7 */

 table 5.8 */

 table 5.9 */

 table 5.1 (4 cells per lbuf) */

 table 5.3, 5.4, 5.5, 5.6, 5.7 */

 table 5.8 */

 table 5.9 */

 initialize rate grid group table */

 initialize rate controller groups */

 initialize tNrm lookup table */

	/* the manual makes reference to a routine in a sample driver

	   for proper configuration; fortunately, we only need this

 initialize rate to group table */

	/*

	 * 2.4 transmit internal functions

	 * 

	 * we construct a copy of the rate grid used by the scheduler

	 * in order to construct the rate to group table below

	/*

	 * 2.4 transmit internal function

	 *

	 * this table maps the upper 5 bits of exponent and mantissa

	 * of the atm forum representation of the rate into an index

	 * on rate grid  

		/* 

			instead of '/ 512', use '>> 9' to prevent a call

			to divdu3 on x86 platforms

 2.2.1 minimum payload rate is 10 cps */

 pick nearest rate instead? */

		/*

		 * each table entry is 16 bits: (rate grid index (8 bits)

		 * and a buffer limit (8 bits)

		 * there are two table entries in each 32-bit register

 this is pretty, but avoids _divdu3 and is mostly correct */

 bitmap table */

 rbpl_virt 64-bit pointers */

 large buffer pool */

 rx buffer ready queue */

 tx buffer ready queue */

	/* 2.9.3.5  tail offset for each interrupt queue is located after the

 2.9.3.2 interrupt queue mapping registers */

	/*

	 * pci bus controller initialization 

 4.3 pci bus controller-specific initialization */

	/* from table 3.9

	 *

	 * LAT_TIMER = 1 + AVG_LAT + BURST_SIZE/BUS_SIZE

	 * 

	 * AVG_LAT: The average first data read/write latency [maximum 16 clock cycles]

	 * BURST_SIZE: 1536 bytes (read) for 622, 768 bytes (read) for 155 [192 clock cycles]

	 *

 4.4 card reset */

 16 ms */

 4.5 set bus width */

 4.7 read prom contents */

 4.6 set host endianess */

 4 cells */

 8 cells */

 __BIG_ENDIAN */

 4.8 sdram controller initialization */

 4.9 initialize rnum value */

 4.10 initialize the interrupt queues */

 4.11 enable pci bus controller state machines */

	/*

	 * atm network controller initialization

 5.1.1 generic configuration state */

	/*

	 *		local (cell) buffer memory map

	 *                    

	 *             HE155                          HE622

	 *                                                      

	 *        0 ____________1023 bytes  0 _______________________2047 bytes

	 *         |            |            |                   |   |

	 *         |  utility   |            |        rx0        |   |

	 *        5|____________|         255|___________________| u |

	 *        6|            |         256|                   | t |

	 *         |            |            |                   | i |

	 *         |    rx0     |     row    |        tx         | l |

	 *         |            |            |                   | i |

	 *         |            |         767|___________________| t |

	 *      517|____________|         768|                   | y |

	 * row  518|            |            |        rx1        |   |

	 *         |            |        1023|___________________|___|

	 *         |            |

	 *         |    tx      |

	 *         |            |

	 *         |            |

	 *     1535|____________|

	 *     1536|            |

	 *         |    rx1     |

	 *     2047|____________|

	 *

 total 4096 connections */

 5.1.2 configure hardware dependent registers */

 5.1.3 initialize connection memory */

	/*

	 *	transmit connection memory map

	 *

	 *                  tx memory

	 *          0x0 ___________________

	 *             |                   |

	 *             |                   |

	 *             |       TSRa        |

	 *             |                   |

	 *             |                   |

	 *       0x8000|___________________|

	 *             |                   |

	 *             |       TSRb        |

	 *       0xc000|___________________|

	 *             |                   |

	 *             |       TSRc        |

	 *       0xe000|___________________|

	 *             |       TSRd        |

	 *       0xf000|___________________|

	 *             |       tmABR       |

	 *      0x10000|___________________|

	 *             |                   |

	 *             |       tmTPD       |

	 *             |___________________|

	 *             |                   |

	 *                      ....

	 *      0x1ffff|___________________|

	 *

	 *

	/*

	 *	receive connection memory map

	 *

	 *          0x0 ___________________

	 *             |                   |

	 *             |                   |

	 *             |       RSRa        |

	 *             |                   |

	 *             |                   |

	 *       0x8000|___________________|

	 *             |                   |

	 *             |             rx0/1 |

	 *             |       LBM         |   link lists of local

	 *             |             tx    |   buffer memory 

	 *             |                   |

	 *       0xd000|___________________|

	 *             |                   |

	 *             |      rmABR        |

	 *       0xe000|___________________|

	 *             |                   |

	 *             |       RSRb        |

	 *             |___________________|

	 *             |                   |

	 *                      ....

	 *       0xffff|___________________|

 5.1.4 initialize local buffer free pools linked lists */

 10% of r0+r1 buffers */

 5% of r0+r1 buffers */

 5.1.5 initialize intermediate receive queues */

 5.1.6 application tunable parameters */

 5.1.7 cs block initialization */

 5.1.8 cs block connection memory initialization */

 5.1.10 initialize host structures */

 host status page */

 initialize framer */

 CONFIG_ATM_HE_USE_SUNI */

 this really should be in suni.c but for now... */

 5.1.12 enable transmit and receive */

 atm linux initialization */

 disable interrupts */

 disable recv and transmit */

 CONFIG_ATM_HE_USE_SUNI */

/* 2.10.1.2 receive

 *

 * aal5 packets can optionally return the tcp checksum in the lower

 * 16 bits of the crc (RSR0_TCP_CKSUM)

 2.10.1.5 raw cell receive */

 2.10.1.2 aal5 receive */

 2.1.6 transmit buffer return queue */

 && !TBRQ_MULTIPLE(he_dev->tbrq_head) */

 table 3.42 -- rbpl_tail should never be set to rbpl_head */

 shouldn't happen unless small buffers enabled */

 see 8.1.1 -- check all queues */

 8.1.2 controller errata; flush posted writes */

 8.1.2 controller errata */

 && !IRQ_PENDING */)

 clear interrupt */

 flush posted writes */

 new_tail = he_dev->tpdrq_tail; */

	/*

	 * check to see if we are about to set the tail == head

	 * if true, update the head pointer from the adapter

	 * to see if this is really the case (reading the queue

	 * head for every enqueue would be unnecessarily slow)

			/*

			 * FIXME

			 * push tpd onto a transmit backlog queue

			 * after service_tbrq, service the backlog

			 * for now, we just drop the pdu

 2.1.5 transmit packet descriptor ready queue */

 flush posted writes */

 means round down, technically */

 2.3.3.1 open connection ubr */

 2.3.3.2 open connection cbr */

 8.2.3 cbr scheduler wrap problem -- limit to 90% total link rate */

 also protects he_dev->cs_stper[] */

 find an unused cs_stper register */

 flush posted writes */

		/* 5.1.11 last parameter initialized should be

 flush posted writes */

 2.7.2.2 close receive operation */

 wait for previous close (if any) to finish */

 flush posted writes */

		/* 2.1.2

		 *

		 * ... the host must first stop queueing packets to the TPDRQ

		 * on the connection to be closed, then wait for all outstanding

		 * packets to be transmitted and their buffers returned to the

		 * TBRQ. When the last packet on the connection arrives in the

		 * TBRQ, the host issues the close command to the adapter.

 2.3.1.1 generic close operations with flush */

 also clears TSR4_SESSION_ENDED */

 flush posted writes */

 queue tpd; start new tpd */

			tpd->skb = NULL;	/* not the last fragment

 CONFIG_ATM_HE_USE_SUNI */

 CONFIG_ATM_HE_USE_SUNI */

 flush posted writes */

 eeprom routines  -- see 4.7 */

 Turn on write enable */

 Send READ instruction */

 Next, we need to send the byte address to read from */

 Turn off write enable */

 Now, we can read data from the EEPROM by clocking it in */

 SPDX-License-Identifier: GPL-2.0-only

 drivers/atm/zatm.c - ZeitNet ZN122x device driver */

 Written 1995-2000 by Werner Almesberger, EPFL LRC/ICA */

/*

 * TODO:

 *

 * Minor features

 *  - support 64 kB SDUs (will have to use multibuffer batches then :-( )

 *  - proper use of CDV, credit = max(1,CDVT*PCR)

 *  - AAL0

 *  - better receive timestamps

 *  - OAM

/* 

 * NULL pointer checking

/*

 * Very extensive activity logging. Greatly improves bug detection speed but

 * costs a few Mbps if enabled.

 CONFIG_ATM_ZATM_DEBUG */

#define RING_BUSY	1	/* indication from do_tx that PDU has to be

 RX0, RX1, TX0, TX1 */

 entry size in bytes */

-------------------------------- utilities --------------------------------*/

------------------------------- free lists --------------------------------*/

/*

 * Free buffer head structure:

 *   [0] pointer to buffer (for SAR)

 *   [1] buffer descr link pointer (for SAR)

 *   [2] back pointer to skb (for poll_rx)

 *   [3] data

 *   ...

 pointer to buffer (for SAR) */

 buffer descriptor link pointer (for SAR) */

 back pointer to skb (for poll_rx) */

 for 32 byte alignment */

 use_pool isn't reentrant */

 64B... */

 ... 64kB */

----------------------------------- RX ------------------------------------*/

 probably a stupid idea */

 maybe this saves us a few interrupts */

			/* fix this - we may want to receive 64kB SDUs

 set up VC descriptor */

 should also handle VPI @@@ */

 disable receiver */

 why oh why ... ? */

 set VPI/VCI split (use all VCIs and give what's left to VPIs) */

 prepare free buffer pools */

----------------------------------- TX ------------------------------------*/

 @@@ should check alignment */

 @@@ would fail on CLP */

 mark as invalid */

/*

 * BUG BUG BUG: Doesn't handle "new-style" rate specification yet.

 @@@ should use max_cdv ! */

 initialize ring */

 set up VC descriptor */

 initialize shapers */

------------------------------- interrupts --------------------------------*/

 don't handle RD */

 don't handle IND */

 @@@ should try to recover */

 @@@ handle RCRn */

----------------------------- (E)EPROM access -----------------------------*/

 select EPROM */

 deselect EPROM */

 assumes ESI_LEN == 6 */

--------------------------------- entries ---------------------------------*/

 reset uPD98401 */

uPD98401_BURST4*/,GMR);

 reset again to rebuild memory pointers */

 TODO: should shrink allocation now */

 loop if wrapping ... */

 define memory regions */

 @@@ no VPI for now */

 ??? */

 receive pool */

 shapers */

 free pool */

 create mailboxes */

		/*

		 * Alignment provided by dma_alloc_coherent() isn't enough

		 * for this device.

 enable interrupts */

 enable TX & RX */

 deallocate memory */

 @@@ AAL0 */

 for zatm_close after open_rx */

 @@@ */

 module_exit not defined so not unloadable */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * adummy.c: a dummy ATM driver

 version definition */

 globals */

 We want them in dev's root folder */

 SPDX-License-Identifier: GPL-2.0-or-later

/* lanai.c -- Copyright 1999-2003 by Mitchell Blank Jr <mitch@sfgoth.com>

 *

 * This driver supports ATM cards based on the Efficient "Lanai"

 * chipset such as the Speedstream 3010 and the ENI-25p.  The

 * Speedstream 3060 is currently not supported since we don't

 * have the code to drive the on-board Alcatel DSL chipset (yet).

 *

 * Thanks to Efficient for supporting this project with hardware,

 * documentation, and by answering my questions.

 *

 * Things not working yet:

 *

 * o  We don't support the Speedstream 3060 yet - this card has

 *    an on-board DSL modem chip by Alcatel and the driver will

 *    need some extra code added to handle it

 *

 * o  Note that due to limitations of the Lanai only one VCC can be

 *    in CBR at once

 *

 * o We don't currently parse the EEPROM at all.  The code is all

 *   there as per the spec, but it doesn't actually work.  I think

 *   there may be some issues with the docs.  Anyway, do NOT

 *   enable it yet - bugs in that code may actually damage your

 *   hardware!  Because of this you should hardware an ESI before

 *   trying to use this in a LANE or MPOA environment.

 *

 * o  AAL0 is stubbed in but the actual rx/tx path isn't written yet:

 *	vcc_tx_aal0() needs to send or queue a SKB

 *	vcc_tx_unqueue_aal0() needs to attempt to send queued SKBs

 *	vcc_rx_aal0() needs to handle AAL0 interrupts

 *    This isn't too much work - I just wanted to get other things

 *    done first.

 *

 * o  lanai_change_qos() isn't written yet

 *

 * o  There aren't any ioctl's yet -- I'd like to eventually support

 *    setting loopback and LED modes that way.

 *

 * o  If the segmentation engine or DMA gets shut down we should restart

 *    card as per section 17.0i.  (see lanai_reset)

 *

 * o setsockopt(SO_CIRANGE) isn't done (although despite what the

 *   API says it isn't exactly commonly implemented)

/* Version history:

 *   v.1.00 -- 26-JUL-2003 -- PCI/DMA updates

 *   v.0.02 -- 11-JAN-2000 -- Endian fixes

 *   v.0.01 -- 30-NOV-1999 -- Initial release

 -------------------- TUNABLE PARAMATERS: */

/*

 * Maximum number of VCIs per card.  Setting it lower could theoretically

 * save some memory, but since we allocate our vcc list with get_free_pages,

 * it's not really likely for most architectures

/*

 * Enable extra debugging

/*

 * Debug _all_ register operations with card, except the memory test.

 * Also disables the timed poll to prevent extra chattiness.  This

 * isn't for normal use

/*

 * The programming guide specifies a full test of the on-board SRAM

 * at initialization time.  Undefine to remove this

/*

 * This is the number of (4 byte) service entries that we will

 * try to allocate at startup.  Note that we will end up with

 * one PAGE_SIZE's worth regardless of what this is set to

 TODO: make above a module load-time option */

/*

 * We normally read the onboard EEPROM in order to discover our MAC

 * address.  Undefine to _not_ do this

 #define READ_EEPROM */ 
 TODO: make above a module load-time option (also) */

/*

 * Depth of TX fifo (in 128 byte units; range 2-31)

 * Smaller numbers are better for network latency

 * Larger numbers are better for PCI latency

 * I'm really sure where the best tradeoff is, but the BSD driver uses

 * 7 and it seems to work ok.

 TODO: make above a module load-time option */

/*

 * How often (in jiffies) we will try to unstick stuck connections -

 * shouldn't need to happen much

 TODO: make above a module load-time option */

/*

 * When allocating an AAL5 receiving buffer, try to make it at least

 * large enough to hold this many max_sdu sized PDUs

 TODO: make above a module load-time option */

/*

 * Same for transmitting buffer

 TODO: make above a module load-time option */

/*

 * When allocating an AAL0 transmiting buffer, how many cells should fit.

 * Remember we'll end up with a PAGE_SIZE of them anyway, so this isn't

 * really critical

 TODO: make above a module load-time option */

/*

 * How large should we make the AAL0 receiving buffer.  Remember that this

 * is shared between all AAL0 VC's

 TODO: make above a module load-time option */

/*

 * Should we use Lanai's "powerdown" feature when no vcc's are bound?

 #define USE_POWERDOWN */

 TODO: make above a module load-time option (also) */

 -------------------- DEBUGGING AIDS: */

 !DEBUG */

 DEBUG */

 !DEBUG_RW */

 -------------------- DATA DEFINITIONS: */

 DMA buffer in host memory for TX, RX, or service list. */

 From get_free_pages */

 One past last byte */

 Pointer to current host location */

 Forward declaration */

/*

 * This is the card-specific per-vcc data.  Note that unlike some other

 * drivers there is NOT a 1-to-1 correspondance between these and

 * atm_vcc's - each one of these represents an actual 2-way vcc, but

 * an atm_vcc can be 1-way and share with a 1-way vcc in the other

 * direction.  To make it weirder, there can even be 0-way vccs

 * bound to us, waiting to do a change_qos

 Base of VCC's registers */

 # of atm_vcc's who reference us */

 atm_vcc who is receiver */

 atm_vcc who is transmitter */

 last endptr from service entry */

 # of cells dropped - buffer overflow */

 # of cells dropped - closed vci */

 # of cells dropped - bad HEC */

 # of cells dropped - rx fifo overflow */

 number of bound vccs */

 Currently just NUM_VCI */

 VCCs with tx backlog */

 VCCs with transmit space */

 AAL0 RX buffers */

 CONFIG[12] registers */

 STATUS register */

 TODO - look at race conditions with maintence of conf1/conf2 */

 TODO - transmit locking: should we use _irq not _irqsave? */

 TODO - organize above in some rational fashion (see <asm/cache.h>) */

/*

 * Each device has two bitmaps for each VCC (baclog_vccs and transmit_ready)

 * This function iterates one of these, calling a given function for each

 * vci with their bit set

 -------------------- BUFFER  UTILITIES: */

/*

 * Lanai needs DMA buffers aligned to 256 bytes of at least 1024 bytes -

 * usually any page allocation will do.  Just to be safe in case

 * PAGE_SIZE is insanely tiny, though...

/*

 * Allocate a buffer in host RAM for service list, RX, or TX

 * Returns buf->start==NULL if no memory

 * Note that the size will be rounded up 2^n bytes, and

 * if we can't allocate that we'll settle for something smaller

 * until minbytes

 max lanai buffer size */

		/*

		 * Technically we could use non-consistent mappings for

		 * everything, but the way the lanai uses DMA memory would

		 * make that a terrific pain.  This is much simpler.

 Success */

 Lanai requires 256-byte alignment of DMA bufs */

 size of buffer in bytes */

 size of buffer as "card order" (0=1k .. 7=128k) */

 This can only happen if PAGE_SIZE is gigantic, but just in case */

 -------------------- PORT I/O UTILITIES: */

 Registers (and their bit-fields) */

 Reset; read for chip type; bits: */

 Board revision */

 Board ID */

 25.6M adapter card */

 Endian setting */

 Interrupt status */

 Interrupt status (masked) */

 Interrupt acknowledge */

 Interrupt acknowledge (masked) */

 Get status + enable/disable */

 Get status + en/di (masked) */

 Interrupt control enable */

 Interrupt control disable */

 Status */

 PROM_DATA pin */

 Interrupt being delayed */

 SOOL alarm */

 LOCD alarm */

 LED (HAPPI) output */

 GPIN pin */

 Butt register is pending */

 Config word 1; bits: */

 PROM_DATA pin */

 PROM_CLK pin */

 PCI BM reads; values: */

   Plain memory read */

   Memory read line */

   Memory read multiple */

 Turn on DMA */

 Turn off clocks */

 Clock&loop mode; values: */

   Normal - no loop */

 Mode of LED; values: */

   !SOOL */

   0     */

   1     */

   !LOCD */

   GPIN  */

   !GPIN */

 Toggle for reset */

 Loopback PHY */

 Loopback lanai */

 Config word 2; bits: */

 >512 VCIs? */

 Make PTI=7 RM, not OAM */

 Ignore RX VPI value */

 Drop cells w/ HEC errors */

 Treat VCI=0 normally */

 Deal with CBR traffic */

 Trashing incoming cells */

 Trashing outgoing cells */

 Turn trashing on */

 Statistics; bits: */

 FIFO overflowed */

 HEC was bad */

 VCI not open */

 VCC buffer full */

 Service stuff; bits: */

 size of service buffer */

 set address of buffer */

 ServWrite Pointer */

 ServRead Pointer */

 FIFO Transmit Depth */

 Butt register */

 Ping count */

 DMA address */

 Same as conf2_write(), but defers I/O if we're powered down */

 USE_POWERDOWN */

	/*

	 * If we don't delay a little while here then we can end up

	 * leaving the card in a VERY weird state and lock up the

	 * PCI bus.  This isn't documented anywhere but I've convinced

	 * myself after a lot of painful experimentation

 -------------------- CARD SRAM UTILITIES: */

/* The SRAM is mapped into normal PCI memory space - the only catch is

 * that it is only 16-bits wide but must be accessed as 32-bit.  The

 * 16 high bits will be zero.  We don't hide this, since they get

 * programmed mostly like discrete registers anyway

 Again, half don't really exist */

 -------------------- CARD-BASED VCC TABLE UTILITIES: */

 vcc table */

 Location1, plus bits: */

 size of RX buffer */

 RM cell action; values: */

   discard */

   input as AAL0 */

   pipe to coscheduler */

   pipe non-RM too */

 Input OAM cells as AAL0 */

 Reassembly mode */

   discard */

   non-AAL5 mode */

   AAL5, intr. each PDU */

   AAL5 w/o per-PDU intr */

 Location2 */

 RX CRC claculation space */

 RX writeptr, plus bits: */

 Last PDU had EFCI bit */

 Had error, dropping */

 Trashing */

 RX bufstart, plus bits: */

 RX readptr */

 TX ICG */

 Location1, plus bits: */

 size of TX buffer */

 use ABR (doesn't work) */

 Location2 */

 TX CRC claculation space */

 TX Readptr, plus bits: */

 ? */

 TX Endptr, plus bits: */

 PDU mode; values: */

 TX Writeptr */

 # of next CBR VCI in ring */

 "bozo bit" */

 -------------------- COMPUTE SIZE OF AN AAL5 PDU: */

/* How many bytes will an AAL5 PDU take to transmit - remember that:

 *   o  we need to add 8 bytes for length, CPI, UU, and CRC

 *   o  we need to round up to 48 bytes for cells

 -------------------- FREE AN ATM SKB: */

 -------------------- TURN VCCS ON AND OFF: */

 ??? */

 RXADDR1_OAM_PRESERVE |	--- no OAM support yet */

 ??? */

 ??? */

 This one must be last! */

 Shutdown receiving on card */

 We were never bound to a VCI */

 15.1.1 - set to trashing, wait one cell time (15us) */

 15.1.2 - clear rest of entries */

/* Shutdown transmitting on card.

 * Unfortunately the lanai needs us to wait until all the data

 * drains out of the buffer before we can dealloc it, so this

 * can take awhile -- up to 370ms for a full 128KB buffer

 * assuming everone else is quiet.  In theory the time is

 * boundless if there's a CBR VCC holding things up.

 We were never bound to a VCI */

 15.2.1 - wait for queue to drain */

	/*

	 * We need to wait for the VCC to drain but don't wait forever.  We

	 * give each 1K of buffer size 1/128th of a second to clear out.

	 * TODO: maybe disable CBR if we're about to timeout?

 Is TX buffer empty? */

 Has there been any progress? */

 15.2.2 - clear out all tx registers */

 -------------------- MANAGING AAL0 RX BUFFER: */

 -------------------- EEPROM UTILITIES: */

 Offsets of data in the EEPROM */

 Stub functions to use if EEPROM reading is disabled */

 READ_EEPROM */

 start with both clock and data high */

 Command=read + address */

 send start bit */

 write command out */

 Let new data settle */

 look for ack */

 No ack seen */

 read back result */

 look again for ack */

 Spurious ack */

 finish read */

 read a big-endian 4-byte value out of eeprom */

 Checksum/validate EEPROM contents */

 First, see if we can get an ASCIIZ string out of the copyright */

 Validate checksum */

 Verify MAC address */

 Verify serial number */

 Verify magic number */

 READ_EEPROM */

 -------------------- INTERRUPT HANDLING UTILITIES: */

 Interrupt types */

 Statistics counter overflow */

 SOOL changed state */

 LOCD changed state */

 LED (HAPPI) changed state */

 GPIN changed state */

 PING_COUNT fulfilled */

 Lanai wants bus */

 CBR sched hit VCI 0 */

 Service list overflow */

 TX magic list mismatch */

 Non-AAL5 buffer half filled */

 Non-AAL5 data available */

 Service list entries available */

 Target abort sent by lanai */

 Abort rcv'd as bus master */

 No response to bus master */

 Parity error on PCI */

 Sets of the above */

 All interrupts */

 Some status pin changed */

 DMA engine got shut down */

 Segmentation got shut down */

 -------------------- CARD/PCI STATUS: */

 -------------------- VCC TX BUFFER UTILITIES: */

 space left in tx buffer in bytes */

 Leave "bubble" - if start==end it looks empty */

 test if VCC is currently backlogged */

 Bit fields in the segmentation buffer descriptor */

 Add 32-bit descriptor with its padding */

 Hope the values REALLY don't matter */

 Add 32-bit AAL5 trailer and leave room for its CRC */

 Update "butt" register to specify new WritePtr */

	/*

	 * Since the "butt register" is a shared resounce on the card we

	 * serialize all accesses to it through this spinlock.  This is

	 * mostly just paranoia since the register is rarely "busy" anyway

	 * but is needed for correctness.

	/*

	 * We need to check if the "butt busy" bit is set before

	 * updating the butt register.  In theory this should

	 * never happen because the ATM card is plenty fast at

	 * updating the register.  Still, we should make sure

	/*

	 * Before we tall the card to start work we need to be sure 100% of

	 * the info in the service buffer has been written before we tell

	 * the card about it

/*

 * Add one AAL5 PDU to lvcc's transmit buffer.  Caller garauntees there's

 * space available.  "pdusize" is the number of bytes the PDU will take

 Try to fill the buffer - don't call unless there is backlog */

 No room for this packet - put it back on queue */

 Given an skb that we want to transmit either send it now or queue */

 Already backlogged */

 No space for this PDU */

 Remember to increment lvcc->tx.atmvcc->stats->tx */

 -------------------- VCC RX BUFFER UTILITIES: */

 unlike the _tx_ cousins, this doesn't update ptr */

 Make sure that these copies don't get reordered */

 Receive AAL5 data on a VCC with a particular endptr */

 Recover the second-to-last word to get true pdu length */

	/*

	 * Before we actually read from the buffer, make sure the memory

	 * changes have arrived

 Make sure size matches padding */

 Remember to get read_lock(&vcc_sklist_lock) while looking up VC */

 Remember to increment lvcc->rx.atmvcc->stats->rx */

 -------------------- MANAGING HOST-BASED VCC TABLE: */

 Decide whether to use vmalloc or get_zeroed_page for VCC table */

 Allocate a fresh lanai_vcc, with the appropriate things cleared */

 Setup a RX buffer for a currently unbound AAL5 vci */

 Setup a TX buffer for a currently unbound AAL5 vci */

 We already were bound in the other direction */

 This vcc was never bound */

 -------------------- RESET CARD: */

 TODO */

	/* The following is just a hack until we write the real

	 * resetter - at least ack whatever interrupt sent us

	 * here

 -------------------- SERVICE LIST UTILITIES: */

/*

 * Allocate service buffer and tell card about it

 Clear ServWrite register to be safe */

 ServiceStuff register contains size and address of buffer */

 Bitfields in service list */

 Was from transmission */

 RXed PDU was trashed */

 RXed PDU had CRC error */

 RXed PDU had CI set */

 RXed PDU had CLP set */

 RX Stream mode */

/* Handle one thing from the service list - returns true if it marked a

 * VCC ready for xmit

 segmentation interrupt */

 Try transmitting on all VCIs that we marked ready to serve */

/* Run service queue -- called from interrupt context or with

 * interrupts otherwise disabled and with the lanai->servicelock

 * lock held

 -------------------- GATHER STATISTICS: */

 -------------------- POLLING TIMER: */

 Try to undequeue 1 backlogged vcc */

 !DEBUG_RW */

 USE_POWERDOWN */

 If we can grab the spinlock, check if any services need to be run */

 ...and see if any backlogged VCs can make progress */

 unfortunately linux has no read_trylock() currently */

 !DEBUG_RW */

 -------------------- INTERRUPT SERVICE: */

 The rest of the interrupts are pretty rare */

 No need to ack */

	/*

	 * If we're powered down we shouldn't be generating any interrupts -

	 * so assume that this is a shared interrupt line and it's for someone

	 * else

 Must be for someone else */

 Maybe we've been unplugged? */

/* TODO - it would be nice if we could use the "delayed interrupt" system

 *   to some advantage

 -------------------- CHECK BOARD ID/REV: */

/*

 * The board id and revision are stored both in the reset register and

 * in the PCI configuration space - the documentation says to check

 * each of them.  If revp!=NULL we store the revision there

 -------------------- PCI INITIALIZATION/SHUTDOWN: */

 Set latency timer to zero as per lanai docs */

 -------------------- VPI/VCI ALLOCATION: */

/*

 * We _can_ use VCI==0 for normal traffic, but only for UBR (or we'll

 * get a CBRZERO interrupt), and we can use it only if no one is receiving

 * AAL0 traffic (since they will use the same queue) - according to the

 * docs we shouldn't even use it for AAL0 traffic

/* return true if vci is currently unused, or if requested qos is

 * compatible

 -------------------- MANAGE CBR: */

/*

 * CBR ICG is stored as a fixed-point number with 4 fractional bits.

 * Note that storing a number greater than 2046.0 will result in

 * incorrect shaping

/*

 * ICG is related to PCR with the formula PCR = MAXPCR / (ICG + 1)

 * where MAXPCR is (according to the docs) 25600000/(54*8),

 * which is equal to (3125<<9)/27.

 *

 * Solving for ICG, we get:

 *    ICG = MAXPCR/PCR - 1

 *    ICG = (3125<<9)/(27*PCR) - 1

 *    ICG = ((3125<<9) - (27*PCR)) / (27*PCR)

 *

 * The end result is supposed to be a fixed-point number with FRAC_BITS

 * bits of a fractional part, so we keep everything in the numerator

 * shifted by that much as we compute

 *

 1 = Round PCR down, i.e. round ICG _up_ */

 Use maximum bandwidth */

 -------------------- OPERATIONS: */

 setup a newly detected device */

 Basic device fields */

 3.2: PCI initialization */

 3.3: Reset lanai and PHY */

	/*

	 * 3.4: Turn on endian mode for big-endian hardware

	 *   We don't actually want to do this - the actual bit fields

	 *   in the endian register are not documented anywhere.

	 *   Instead we do the bit-flipping ourselves on big-endian

	 *   hardware.

	 *

	 * 3.5: get the board ID/rev by reading the reset register

 3.6: read EEPROM */

 3.7: re-reset PHY, do loopback tests, setup PHY */

 TODO - loopback tests */

 3.8/3.9: test and initialize card SRAM */

 3.10: initialize lanai registers */

 ??? */ CONFIG2_PTI7_MODE;

 CBR defaults to no limit */

 Make sure that all that made it */

 3.11: initialize loop mode (i.e. turn looping off) */

 We're now done initializing this card */

/* called when device is being shutdown, and all vcc's are gone - higher

 * levels will deallocate the atm device for us

 close a vcc */

 open a vcc on the card to vpi/vci */

 we don't support partial open - it's not really useful anyway */

	/*

	 * Make sure everything made it to RAM before we tell the card about

	 * the VCC

 NOTE - this next line is technically invalid - we haven't unshared skb */

const*/ struct atm_qos *qos, int flags)

 TODO: need to write this */

 At this point, "left" should be the VCI we're looking for */

 Note that we re-use "left" here since we're done with it */

 CONFIG_PROC_FS */

 -------------------- HOOKS: */

 initialize one probed card */

 terminal entry */

 SPDX-License-Identifier: GPL-2.0

/*

 * this file included by nicstar.c

/*

 * nicstarmac.c

 * Read this ForeRunner's MAC address from eprom/eeprom

/*

   This was the original definition

#define osp_MicroDelay(microsec) \

    do { int _i = 4*microsec; while (--_i > 0) { __SLOW_DOWN_IO; }} while (0)

/*

 * The following tables represent the timing diagrams found in

 * the Data Sheet for the Xicor X25020 EEProm.  The #defines below

 * represent the bits in the NICStAR's General Purpose register

 * that must be toggled for the corresponding actions on the EEProm

 * to occur.

 Write Data To EEProm from SI line on rising edge of CLK */

 Read Data From EEProm on falling edge of CLK */

 Chip select high */

 Chip select low (active low) */

 Clock high */

 Clock low  */

 Serial input data high */

 Serial input data low */

 Read Status Register = 0000 0101b */

 0 */

 0 */

 0 */

 0 */

 0 */

 1 */

 0 */

 1 */

  0  */

 Read from EEPROM = 0000 0011b */

	/*

	   CS_HIGH | CLK_HIGH,

 0 */

 0 */

 0 */

 0 */

 0 */

 0 */

 1 */

 1 */

 Clock to read from/write to the eeprom */

/*

 * This routine will clock the Read_Status_reg function into the X2520

 * eeprom, then pull the result from bit 16 of the NicSTaR's General Purpose 

 * register.  

 Send read instruction */

 Done sending instruction - now pull data off of bit 16, MSB first */

 Data clocked out of eeprom on falling edge of clock */

  0  */

/*

 * This routine will clock the Read_data function into the X2520

 * eeprom, followed by the address to read from, through the NicSTaR's General

 * Purpose register.  

 Send READ instruction */

 Next, we need to send the byte address to read from */

 Now, we can read data from the eeprom by clocking it in */

	/*

	 * turn chip select off

/*

 * This routine will be the interface to the ReadPromByte function

 * above.

 SPDX-License-Identifier: GPL-2.0-or-later

/* drivers/atm/firestream.c - FireStream 155 (MB86697) and

 *                            FireStream  50 (MB86695) device driver 

/* Written & (C) 2000 by R.E.Wolff@BitWizard.nl 

 * Copied snippets from zatm.c by Werner Almesberger, EPFL LRC/ICA 

 * and ambassador.c Copyright (C) 1995-1999  Madge Networks Ltd 

/*

 for request_region */

/* According to measurements (but they look suspicious to me!) done in

 * '97, 37% of the packets are one cell in size. So it pays to have

 * buffers allocated at that size. A large jump in percentage of

 * packets occurs at packets around 536 bytes in length. So it also

 * pays to have those pre-allocated. Unfortunately, we can't fully

 * take advantage of this as the majority of the packets is likely to

 * be TCP/IP (As where obviously the measurement comes from) There the

 * link would be opened with say a 1500 byte MTU, and we can't handle

 * smaller buffers more efficiently than the larger ones. -- REW

/* Due to the way Linux memory management works, specifying "576" as

 * an allocation size here isn't going to help. They are allocated

 * from 1024-byte regions anyway. With the size of the sk_buffs (quite

/* This is all guesswork. Hard numbers to back this up or disprove this, 

/* The last entry should be about 64k. However, the "buffer size" is

 * passed to the chip in a 16 bit field. I don't know how "65536"

 log2:                 7     8     9    10    11    12    14     16 */

 debug */

 log2:                 10    10    9    8     7     6     5      5  */

 sumlog2:              17    18    18   18    18    18    19     21 */

 mem allocated:        128k  256k  256k 256k  256k  256k  512k   2M */

 tot mem: almost 4M */

 NP is shorter, so that it fits on a single line. */

/* Small hardware gotcha:



   The FS50 CAM (VP/VC match registers) always take the lowest channel

   number that matches. This is not a problem.



   However, they also ignore whether the channel is enabled or

   not. This means that if you allocate channel 0 to 1.2 and then

   channel 1 to 0.0, then disabeling channel 0 and writing 0 to the

   match channel for channel 0 will "steal" the traffic from channel

   1, even if you correctly disable channel 0.



   Workaround: 



   - When disabling channels, write an invalid VP/VC value to the

   match register. (We use 0xffffffff, which in the worst case 

   matches VP/VC = <maxVP>/<maxVC>, but I expect it not to match

   anything as some "when not in use, program to 0" bits are now

   programmed to 1...)



   - Don't initialize the match registers to 0, as 0.0 is a valid

   channel.

/* Optimization hints and tips.



   The FireStream chips are very capable of reducing the amount of

   "interrupt-traffic" for the CPU. This driver requests an interrupt on EVERY

   action. You could try to minimize this a bit. 



   Besides that, the userspace->kernel copy and the PCI bus are the

   performance limiting issues for this driver.



   You could queue up a bunch of outgoing packets without telling the

   FireStream. I'm not sure that's going to win you much though. The

   Linux layer won't tell us in advance when it's not going to give us

   any more packets in a while. So this is tricky to implement right without

   introducing extra delays. 

  

   -- REW

 The strings that define what the RX queue entry is all about. */

/* Fujitsu: Please tell me which ones can have a pointer to a 

 FIXME: The strings between 30-40 might be wrong. */

 changed here to make loopback */

 -1 signals end of list */

/* Safetyfeature: If the card interrupts more than this number of times

   in a jiffy (1/100th of a second) then we just disable the interrupt and

   print a message. This prevents the system from hanging. 



   150000 packets per second is close to the limit a PC is going to have

 100

/* Interrupts work now. Unlike serial cards, ATM cards don't work all

 100

/* 

   This driver can spew a whole lot of debugging output at you. If you

   need maximum performance, you should disable the DEBUG define. To

   aid in debugging in the field, I'm leaving the compile-time debug

   features enabled, and disable them "runtime". That allows me to

   instruct people with problems to enable debugging without requiring

   them to recompile... -- REW

 nothing */

/* I didn't forget to set this to zero before shipping. Hit me with a stick 

 XXX Add rx_buf_sizes, and rx_pool_sizes As per request Amar. -- REW */

 DEBUG */

 DEBUG */

********* free an skb (as per ATM device driver documentation) **********/

/* Hmm. If this is ATM specific, why isn't there an ATM routine for this?

/* It seems the ATM forum recommends this horribly complicated 16bit

 * floating point format. Turns out the Ambassador uses the exact same

 * encoding. I just copied it over. If Mitch agrees, I'll move it over

 * to the atm_misc file or something like that. (and remove it from 

 * here and the ambassador driver) -- REW

/* The good thing about this format is that it is monotonic. So, 

   a conversion routine need not be very complicated. To be able to

   round "nearest" we need to take along a few extra bits. Lets

   put these after 16 bits, so that we can just return the top 16

   bits of the 32bit number as the result:



   int mr (unsigned int rate, int r) 

     {

     int e = 16+9;

     static int round[4]={0, 0, 0xffff, 0x8000};

     if (!rate) return 0;

     while (rate & 0xfc000000) {

       rate >>= 1;

       e++;

     }

     while (! (rate & 0xfe000000)) {

       rate <<= 1;

       e--;

     }



// Now the mantissa is in positions bit 16-25. Excepf for the "hidden 1" that's in bit 26.

     rate &= ~0x02000000;

// Next add in the exponent

     rate |= e << (16+9);

// And perform the rounding:

     return (rate + round[r]) >> 16;

   }



   14 lines-of-code. Compare that with the 120 that the Ambassador

   guys needed. (would be 8 lines shorter if I'd try to really reduce

   the number of lines:



   int mr (unsigned int rate, int r) 

   {

     int e = 16+9;

     static int round[4]={0, 0, 0xffff, 0x8000};

     if (!rate) return 0;

     for (;  rate & 0xfc000000 ;rate >>= 1, e++);

     for (;!(rate & 0xfe000000);rate <<= 1, e--);

     return ((rate & ~0x02000000) | (e << (16+9)) + round[r]) >> 16;

   }



   Exercise for the reader: Remove one more line-of-code, without

   cheating. (Just joining two lines is cheating). (I know it's

   possible, don't think you've beat me if you found it... If you

   manage to lose two lines or more, keep me updated! ;-)



********* make rate (not quite as much fun as Horizon) **********/

 hush gcc */

 hush gcc */

	/* rates in cells per second, ITU format (nasty 16-bit floating-point)

	   given 5-bit e and 9-bit m:

	   rate = EITHER (1+m/2^9)*2^e    OR 0

	   bits = EITHER 1<<14 | e<<9 | m OR 0

	   (bit 15 is "reserved", bit 14 "non-zero")

	   smallest rate is 0 (special representation)

	   largest rate is (1+511/512)*2^31 = 4290772992 (< 2^32-1)

	   smallest non-zero rate is (1+0/512)*2^0 = 1 (> 0)

	   simple algorithm:

	   find position of top bit, this gives e

	   remove top bit and shift (rounding if feeling clever) by 9-e

	/* Ambassador ucode bug: please don't set bit 14! so 0 rate not

	   representable. // This should move into the ambassador driver

 larger than largest representable rate */

 representable rate */

 invariant: rate = man*2^(exp-31) */

		/* man has top bit set

		   rate = (2^31+(man-2^31))*2^(exp-31)

		   rate = (1+(man-2^31)/2^31)*2^exp 

 a nop on 32-bit systems */

		/* rate = (1+man/2^32)*2^exp

    

		   exp is in the range 0 to 31, man is in the range 0 to 2^32-1

		   time to lose significance... we want m in the range 0 to 2^9-1

		   rounding presents a minor problem... we first decide which way

		   we are rounding (based on given rounding direction and possibly

		   the bits of the mantissa that are to be discarded).

 just truncate */

 check all bits that we are discarding */

 no need to check for round up outside of range */

 check msb that we are discarding */

 no need to check for round up outside of range */

 zero rate - not representable */

 (1<<14) | */ (exp<<9) | man;

 FireStream access routines */

/* For DEEP-DOWN debugging these can be rigged to intercept accesses to

	/* XXX Sanity check: the write pointer can be checked to be 

  udelay (5); */

 Test the "other" way one day... -- REW */

 This is for AAL0 where we put the chip in streaming mode */

 Process a real txdone entry. */

 Here we get the tx purge inhibit command ... */

 Action, I believe, is "don't do anything". -- REW */

 Single buffer packet */

 Fall through for streaming mode */

 Packet received OK.... */

		case 0x17:/* AAL 5 CRC32 error. IFF the length field is nonzero, a buffer

  Reassembly abort: no buffers. */

 Silently increment error counter. */

 Hmm. Haven't written the code to handle the others yet... -- REW */

  struct fs_receive_config *rc;*/

  struct FS_QENTRY *qe; */

 XXX AAL0 */

 XXX handle qos parameters (rate limiting) ? */

 Increment the channel numer: take a free one next time.  */

 We only have 32 channels */

 If we need to do RX, AND the RX is inuse, try the next */

 If we need to do TX, AND the TX is inuse, try the next */

 Ok, both are free! (or not needed) */

		/* Allocate the "open" entry from the high priority txq. This makes

		   it most likely that the chip will notice it. It also prevents us

		   from having to wait for completion. On the other hand, we may

		   need to wait for completion anyway, to see if it completed

 XXX Change to VBR -- PVDL */

 ??? */

		/* Docs are vague about this atm_hdr field. By the way, the FS

			/* XXX Hmm. officially we're only allowed to do this if rounding 

 no rate cap */

 Just copied over the bits from Fujitsu -- REW */

 Unused */

 Unused */

 Unused */

 UTOPIA address, UDF, HEC: Unused -> 0 */

		tc->rtag[0] = 0; /* What should I do with routing tags??? 

		/* We now use the "submit_command" function to submit commands to

		   the firestream. There is a define up near the definition of

		   that routine that switches this routine between immediate write

		   to the immediate command registers and queuing the commands in

		   the HPTXQ for execution. This last technique might be more

		   efficient if we know we're going to submit a whole lot of

		   commands in one go, but this driver is not setup to be able to

		   use such a construct. So it probably doen't matter much right

 The command is IMMediate and INQueue. The parameters are out-of-line.. */

 XXX Cleanup? -- Would just calling fs_close work??? -- REW */

 XXX clear tx inuse. Close TX part? */

 XXX -- Use defines. */

 Indicate we're done! */

		/* We're going to wait for the last packet to get sent on this VC. It would

		   be impolite not to send them don't you think? 

		   XXX

		   We don't know which packets didn't get sent. So if we get interrupted in 

		   this sleep_on, we'll lose any reference to these packets. Memory leak!

		   On the other hand, it's awfully convenient that we can abort a "close" that

	/* See App note XXX (Unpublished as of now) for the reason for the 

QE_CMD_IMM_INQ|*/ vcc->channo, 0,0,0);

 This means that this is configured as a receive channel */

			/* Disable the receive filter. Is 0/0 indeed an invalid receive

			   channel? -- REW.  Yes it is. -- Hang. Ok. I'll use -1

 Oops out of mem */

 Some function placeholders for functions we don't yet support. */

 ioctl:          fs_ioctl, */

 change_qos:     fs_change_qos, */

 For now implement these internally here... */  

 phy_put:        fs_phy_put, */

 phy_get:        fs_phy_get, */

 The Windows driver says: */

	/* Switch off FireStream Retry Limit Threshold 

	/* The register at 0x28 is documented as "reserved", no further

/**************************************************************************

 *                              PHY routines                              *

 "PHY_CLEARALL means clear all registers. Numregisters is in "val". */

 Undocumented delay */

	/* The "internal registers are documented to all reset to zero, but 

	   comments & code in the Windows driver indicates that the pools are

	/* The same goes for the match channel registers, although those are

	/* The Windows driver DOES write 0 to these registers somewhere in

	   the init sequence. However, a small hardware-feature, will

	   prevent reception of data on VPI/VCI = 0/0 (Unless the channel

	   allocated happens to have no disabled channels that have a lower

 Clear the match channel registers. */

		/* Configuration for the receive queue: 0: interrupt immediately,

		   no pre-warning to empty queues: We do our best to keep the

 This seems to be unreliable.... */

/* Check if this gets going again if a pool ever runs out.  -- Yes, it

   does. I've seen "receive abort: no buffers" and things started

		/*

		 * FIXME: following code encodes and decodes

		 * machine pointers (could be 64-bit) into a

		 * 32-bit register.

 XXX Atomic_inc? */

 Configuration ? */

	/* Aaargh! I'm ashamed. This costs more lines-of-code than the actual 

 print the bits in the ISR register. */

		/* The FS_DEBUG things are unnecessary here. But this way it is

 items mentioned on RBRQ0 are from FP 0 or 1. */

 We don't use shadow registers. */

	/* 10ms * 100 is 1 second. That should be enough, as AN3:9 says it takes

 This bit is documented as "RESERVED" */

 Try again after 10ms. */

 XXX fix for fs155 */

 AN3: 10 */

 XXX PHY */

 XXX Loopback mode enable... */

 That's what hang's driver does. Program to 0 */

 XXX FS155 */);

 Cal prescale etc */

 AN3: 11 */

 AN3: 12 */

 Changed from 0xff to 0x5a */

		  | (num  * CELLOSCONF_COST));/* after a hint from Hang. 

 Magic value by Hang */

		/* We can chose the split arbitrarily. We might be able to 

 Address bits we can't use should be compared to 0. */

		/* Manual (AN9, page 6) says ASF1=0 means compare Utopia address

		 * too.  I can't find ASF1 anywhere. Anyway, we AND with just the

		 * other bits, then compare with 0, which is exactly what we

 XXX Clean up..... */

 bits/byte */ , GFP_KERNEL);

 XXX Clean up..... */

 -- RAS1 : FS155 and 50 differ. Default (0) should be OK for both */

 -- RAS2 : FS50 only: Default is OK. */

 DMAMODE, default should be OK. -- REW */

 XXX undo all previous stuff... */

	/* We want to be notified of most things. Just the statistics count

 We don't use shadow registers. */

 XXX Hit all the tx channels too! */

 XXX Wait a while for the chip to release all buffers. */

		/* Hang the chip in "reset", prevent it clobbering memory that is

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the Solos PCI ADSL2+ card, designed to support Linux by

 *  Traverse Technologies -- https://www.traverse.com.au/

 *  Xrio Limited          -- http://www.xrio.com/

 *

 * Copyright © 2008 Traverse Technologies

 * Copyright © 2008 Intel Corporation

 *

 * Authors: Nathan Williams <nathan@traverse.com.au>

 *          David Woodhouse <dwmw2@infradead.org>

 *          Treker Chen <treker@xrio.com>

 For FPGA versions <= 2*/

 Old boards use ATMEL AD45DB161D flash */

 FPGA flash page size*/

 Solos flash page size*/

 FPGA block size*/

 Solos block size*/

 Current boards use M25P/M25PE SPI flash */

 Sometimes it has a newline, sometimes it doesn't. */

		/* We know we have enough space allocated for this; we allocated 

/*

 * Status packet has fields separated by \n, starting with a version number

 * for the information therein. Fields are....

 *

 *     packet version

 *     RxBitRate	(version >= 1)

 *     TxBitRate	(version >= 1)

 *     State		(version >= 1)

 *     LocalSNRMargin	(version >= 1)

 *     LocalLineAttn	(version >= 1)

 Anything but 'Showtime' is down */

 HardwareVersion */

 HardwareVariant */

 New FPGAs require driver version before permitting flash upgrades */

 Set mode to Chip Erase */

 Clear write flag */

 Set mode to Block Write */

 dev_info(&card->dev->dev, "Set FPGA Flash mode to Block Write\n"); */

 Copy block to buffer, swapping each 16 bits for Atmel flash */

 Specify block number and then trigger flash write */

 If we're up and running, just kick the tasklet to process TX/RX */

	/*

	 * Since fpga_tx() is going to need to read the flags under its lock,

	 * it can return them to us so that we don't have to hit PCI MMIO

	 * again for the same information

				/* Use netdev_alloc_skb() because it adds NET_SKB_PAD of

				 * headroom, and ensures we can route packets back out an

				 * Ethernet interface (for example) without having to

				 * reallocate. Adding NET_IP_ALIGN also ensures that both

 FIXME: Not really, surely? */

 Allocate RX skbs for any ports which need them */

			/* Unlike the MMIO case (qv) we can't add NET_IP_ALIGN

			 * here; the FPGA can only DMA to addresses which are

 We'll have to try again later */

 Remove any yet-to-be-transmitted packets from the pending queue */

	/* Hold up vcc_destroy_socket() (our caller) until solos_bh() in the

	   tasklet has finished processing any incoming packets (and, more to

	/* Theoretically we could just schedule the tasklet here, but

	/*

	 * The queue lock is required for _writing_ to tx_mask, but we're

	 * OK to read it here without locking. The only potential update

	 * that we could race with is in fpga_queue() where it sets a bit

	 * for a new port... but it's going to call this function again if

	 * it's doing that, anyway.

 We're done with this skb already */

 Clean up and free oldskb now it's gone */

 For non-DMA TX, write the 'TX start' bit for all four ports simultaneously */

 This does _not_ include the size of the header */

 Stopped using Atmel flash after 0.03-38 */

 All known FPGA versions so far */

 Fallback to MMIO doesn't work */

 Set RX empty flag for all ports */

 Disable IRQs */

 Reset FPGA */

 Release device from reset */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

  A FORE Systems 200E-series driver for ATM on Linux.

  Christophe Lizzi (lizzi@cnam.fr), October 1999-March 2003.



  Based on the PCA-200E driver from Uwe Dannowski (Uwe.Dannowski@inf.tu-dresden.de).



  This driver simultaneously supports PCA-200E and SBA-200E adapters

  on i386, alpha (untested), powerpc, sparc and sparc64 architectures.



 defer interrupt work to a tasklet */

 enable the debugging code of the buffer supply queues */

 ensure correct handling of 52-byte AAL0 SDUs expected by atmdump-like apps */

 override .config */

 currently unused */

/* allocate and align a chunk of memory intended to hold the data behing exchanged

 free a chunk of memory */

/*

 * Allocate a DMA consistent chunk of memory intended to act as a communication

 * mechanism (to hold descriptors, status, queues, etc.) shared by the driver

 * and the adapter.

 returned chunks are page-aligned */

/*

 * Free a DMA consistent chunk of memory.

 first, reset the board to prevent further interrupts or data transfers */

 then, release all allocated resources */

 nothing to do for that state */

 nothing to do for that state */

 nothing to do for that state */

 nothing to do for that state */

 XXX shouldn't we *start* by deregistering the device? */

 nothing to do for that state */

    /* on big-endian hosts, the board is configured to convert

    /* on big-endian hosts, the board is configured to convert

 this is a 1 bit register */

 gain access to the PCA specific registers  */

 request the PCA board to convert the endianess of slave RAM accesses */

    /* raise latency from 32 (default) to 192, as this seems to prevent NIC

       lockups (under heavy rx loads) due to continuous 'FIFO OUT full' condition.

 MAC address is stored as little-endian */

 CONFIG_PCI */

 gain access to the SBA specific registers  */

 XXX hardwired interrupt level */

 get the supported DVMA burst sizes */

 CONFIG_SBUS */

 free copy of misaligned data */

 remove DMA mapping */

 vcc closed since the time the entry was submitted for tx? */

 vcc closed then immediately re-opened? */

		/* when a vcc is closed, some PDUs may be still pending in the tx queue.

		   if the same vcc is immediately re-opened, those pending PDUs must

		   not be popped after the completion of their emission, as they refer

		   to the prior incarnation of that vcc. otherwise, sk_atm(vcc)->sk_wmem_alloc

		   would be decremented by the size of the (unrelated) skb, possibly

		   leading to a negative sk->sk_wmem_alloc count, ultimately freezing the vcc.

		   we thus bind the tx entry to the current incarnation of the vcc

		   when the entry is submitted for tx. When the tx later completes,

		   if the incarnation number of the tx entry does not match the one

		   of the vcc, then this implies that the vcc has been closed then re-opened.

 notify tx completion */

 check error condition */

 take the first buffer in the free buffer list */

 decrease accordingly the number of free rx buffers */

 compute total PDU length */

 reassemble segments */

 rebuild rx buffer address from rsd handle */

 Make device DMA transfer visible to CPU.  */

 Now let the device get at it again.  */

 push PDU */

 rebuild rx buffer address from rsd handle */

 re-insert the buffer into the free buffer list */

 then increment the number of free rx buffers */

 no more received PDUs */

 rewrite the rpd address to ack the received PDU */

 fairly balance the VCs over (identical) buffer schemes */

 the MTU is not used by the cp, except in the case of AAL0 */

 XXX depends on CDVT */

 compute the data cells to idle cells ratio from the tx PCR */

 disable rate control */

 pseudo-CBR bandwidth requested? */

 reserve bandwidth */

 compute rate control parameters */

 new incarnation of the vcc */

 VC unusable before this flag is set */

 the vc is no longer considered as "in use" by fore200e_open() */

 release reserved bandwidth, if any */

 skip 4-byte cell header */

 this simply NUKES the PCA board */

 try to free completed tx queue entries */

 retry once again? */

    /* The dma_map call above implies a dma_sync so the device can use it,

     * thus no explicit dma_sync call is necessary here.

 set tx rate control information */

 set the ATM header, common to all cells conveying the PDU */

 size is expressed in 32 byte blocks */

 shift the address, as we are in a bitfield */

 currently unused */

 not implemented */

 update rate control parameters */

 probably meaningless with SBA boards */

 allocate the array of receive buffers */

 allocate the receive buffer body */

 insert the buffer into the free buffer list */

 all the buffers are free, initially */

 allocate and align the array of status words */

 allocate and align the array of receive buffer descriptors */

 get the base address of the cp resident buffer supply queue entries */

 fill the host resident and cp resident buffer supply queue entries */

 allocate and align the array of status words */

 allocate and align the array of receive PDU descriptors */

 get the base address of the cp resident rx queue entries */

 fill the host resident and cp resident rx entries */

 set the head entry of the queue */

 allocate and align the array of status words */

 allocate and align the array of transmit PDU descriptors */

 get the base address of the cp resident tx queue entries */

 fill the host resident and cp resident tx entries */

        /* although there is a one-to-one mapping of tx queue entries and tpds,

	   we do not write here the DMA (physical) base address of each tpd into

	   the related cp resident entry, because the cp relies on this write

 set the head and tail entries of the queue */

 allocate and align the array of status words */

 get the base address of the cp resident cmd queue entries */

 fill the host resident and cp resident cmd entries */

 set the head entry of the queue */

 enable cp to host interrupts */

 issue the initialize command */

 the i960 monitor doesn't accept any new character if it has something to say */

 reported to be required by SBA cards on some sparc64 hosts */

 all done, board initialization is now complete */

 print bus-specific information */

 CONFIG_PCI */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/atm/suni.c - S/UNI PHY driver

 *

 * Supports the following:

 * 	PMC PM5346 S/UNI LITE

 * 	PMC PM5350 S/UNI 155 ULTRA

 * 	PMC PM5355 S/UNI 622

 Written 1995-2000 by Werner Almesberger, EPFL LRC/ICA */

 latch counters */

 SONET_INS_FRAME is one-shot only */

/*

 * SONET vs. SDH Configuration

 *

 * Z0INS (register 0x06): 0 for SONET, 1 for SDH

 * ENSS (register 0x3D): 0 for SONET, 1 for SDH

 * LEN16 (register 0x28): 0 for SONET, 1 for SDH (n/a for S/UNI 155 QUAD)

 * LEN16 (register 0x50): 0 for SONET, 1 for SDH (n/a for S/UNI 155 QUAD)

 * S[1:0] (register 0x46): 00 for SONET, 10 for SDH

 interrupt on loss of signal */

 ... and clear SUNI interrupts */

 clear SUNI counters */

 clear kernel counters */

 let SAR driver worry about stopping interrupts */

 reset SUNI */

 disable all tests */

 idle cells */

/******************************************************************* 

 *

 * Copyright (c) 2000 ATecoM GmbH 

 *

 * The author may be reached at ecd@atecom.com.

 *

 * This program is free software; you can redistribute  it and/or modify it

 * under  the terms of  the GNU General  Public License as published by the

 * Free Software Foundation;  either version 2 of the  License, or (at your

 * option) any later version.

 *

 * THIS  SOFTWARE  IS PROVIDED   ``AS  IS'' AND   ANY  EXPRESS OR   IMPLIED

 * WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF

 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN

 * NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT,  INDIRECT,

 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT

 * NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF

 * USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON

 * ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 * You should have received a copy of the  GNU General Public License along

 * with this program; if not, write  to the Free Software Foundation, Inc.,

 * 675 Mass Ave, Cambridge, MA 02139, USA.

 *

 CONFIG_ATM_IDT77252_USE_SUNI */

/*

 * Debug HACKs.

 does not work, yet. */

/*

 * SCQ Handling.

/*

 * FBQ Handling.

/*

 * RSQ Handling.

/*

 * TSQ handling.

/*

 * ATM Interface.

****************************************************************************/

                                                                           */

 I/O and Utility Bus                                                       */

                                                                           */

****************************************************************************/

 0 */

 0 */

 0 */

 0 */

 0 */

 1 */

 0 */

 1 */

 0 */

 0 */

 0 */

 0 */

 1 */

 1 */

 0 */

 0 */

 0 */

 0 */

 0 */

 0 */

 0 */

 0 */

 1 */

 1 */

 0 */

 0 */

 0 */

 0 */

 0 */

 0 */

 1 */

 0 */

 HAVE_EEPROM */

****************************************************************************/

                                                                           */

 SCQ Handling                                                              */

                                                                           */

****************************************************************************/

****************************************************************************/

                                                                           */

 RSQ Handling                                                              */

                                                                           */

****************************************************************************/

****************************************************************************/

                                                                           */

 TSQ Handling                                                              */

                                                                           */

****************************************************************************/

	/*

	 * Fill Soft TST.

****************************************************************************/

                                                                           */

 FBQ Handling                                                              */

                                                                           */

****************************************************************************/

****************************************************************************/

                                                                           */

 ATM Interface                                                             */

                                                                           */

****************************************************************************/

 e > 9 */

 XXX: make this configurable */

 XXX: make this configurable */

 Let SAR drop Video */

****************************************************************************/

                                                                           */

 Interrupt handler                                                         */

                                                                           */

****************************************************************************/

 no interrupt for us */

 reset interrupt */

 entry written to TSQ  */

 Incomplete CS-PDU has  */

 TSQ 7/8 full           */

 Timer overflow         */

 Got complete CS-PDU    */

 RSQ is 7/8 full        */

 RSQ is full            */

 Raw cell received      */

 PHY device interrupt   */

 enable receive path                  */

 interrupt on complete PDU		*/

 interrupt enable on raw cells        */

 interrupt on RSQ almost full         */

 interrupt on timer overflow          */

 interrupt on low free buffers        */

 transmit operation enable            */

 interrupt on transmit status         */

 interrupt on transmit underrun       */

 interrupt on TSQ almost full         */

 enable PHY interrupts		*/

 Test RAW cell receive. */

 enable receive path           */

 interrupt on complete PDU     */

 interrupt enable on raw cells */

 interrupt on RSQ almost full  */

 interrupt on timer overflow   */

 interrupt on low free buffers */

 transmit operation enable     */

 interrupt on transmit status  */

 interrupt on xmit underrun    */

 interrupt on TSQ almost full  */

****************************************************************************/

                                                                           */

 Initialisation and Deinitialization of IDT77252                           */

                                                                           */

****************************************************************************/

 set SRAM layout for THIS card */

 Initialize TCT */

 Initialize RCT */

 Initialize rate table  */

 Fill RDF and AIR tables. */

 Initialize TSTs */

 last two are jumps */

 Initialize ABRSTD and Receive FIFO */

****************************************************************/

   P C I   C O N F I G U R A T I O N                           */

****************************************************************/

 Set PCI Retry-Timeout and TRDY timeout */

 Reset Timer register */

****************************************************************/

   C H E C K   A N D   I N I T   S R A M                       */

****************************************************************/

 preset size of connecton table, so that init_sram() knows about it */

 Use maximum fifo size */

 Receive Status Queue is 8k */

 Set CLP on idle cells */

 Do not send idle cells */

*******************************************************************/

  A L L O C   R A M   A N D   S E T   V A R I O U S   T H I N G S */

*******************************************************************/

 Initialize TSQ */

 Initialize RSQ */

 Little Endian Order   */

 Initialize RAW Cell Handle Register  */

	/*

	 * this is a jhs hack to get around special functionality in the

	 * phy driver for the atecom hardware; the functionality doesn't

	 * exist in the linux atm suni driver

	 *

	 * it isn't the right way to do things, but as the guy from NIST

	 * said, talking about their measurement of the fine structure

	 * constant, "it's good enough for government work."

 HAVE_EEPROM */

	/*

	 * XXX: <hack>

 jhs: was "tmp = dev_get(tname);" */

	/*

	 * XXX: </hack>

 Set Maximum Deficit Count for now. */

****************************************************************************/

                                                                           */

 Probing of IDT77252 ABR SAR                                               */

                                                                           */

****************************************************************************/

****************************************************************/

   P C I   C O N F I G U R A T I O N                           */

****************************************************************/

****************************************************************/

   G E N E R I C   R E S E T                                   */

****************************************************************/

 Software reset */

 Do the I/O remapping... */

 CONFIG_ATM_IDT77252_USE_SUNI */

 SPDX-License-Identifier: GPL-2.0-only

 drivers/atm/idt77105.c - IDT77105 (PHY) driver */

 Written 1999 by Greg Banks, NEC Australia <gnb@linuxfan.com>. Based on suni.c */

 link diagnostics */

 device back-pointer */

 storage of MCR reg while signal lost */

/*

 * Retrieve the value of one of the IDT77105's counters.

 * `counter' is one of the IDT77105_CTRSEL_* constants.

 write the counter bit into PHY register 6 */

 read the low 8 bits from register 4 */

 read the high 8 bits from register 5 */

/*

 * Timer function called every second to gather statistics

 * from the 77105. This is done because the h/w registers

 * will overflow if not read at least once per second. The

 * kernel's stats are much higher precision. Also, having

 * a separate copy of the stats allows implementation of

 * an ioctl which gathers the stats *without* zero'ing them.

/*

 * A separate timer func which handles restarting PHY chips which

 * have had the cable re-inserted after being pulled out. This is

 * done by polling the Good Signal Bit in the Interrupt Status

 * register every 5 seconds. The other technique (checking Good

 * Signal Bit in the interrupt handler) cannot be used because PHY

 * interrupts need to be disabled when the cable is pulled out

 * to avoid lots of spurious cell error interrupts.

 side effect: clears all interrupt status bits */

 Found signal again */

 flush the receive FIFO */

 re-enable interrupts */

 side effect: clears all interrupt status bits */

 Rx Signal Condition Change - line went up or down */

 signal detected again */

 This should not happen (restart timer does it) but JIC */

 signal lost */

                /*

                 * Disable interrupts and stop all transmission and

                 * reception - the restart timer will restore these.

 Rx FIFO Overrun -- perform a FIFO flush */

 normally don't care - just report in stats */

 initialise dev->signal from Good Signal Bit */

 initialise loop mode from hardware */

 enable interrupts, e.g. on loss of signal */

 clear 77105 counters */

 clear kernel counters */

 disable interrupts */

 detach private struct from atm_dev & free */

 turn off timers */

 SPDX-License-Identifier: GPL-2.0-only

 drivers/atm/eni.c - Efficient Networks ENI155P device driver */

 Written 1995-2000 by Werner Almesberger, EPFL LRC/ICA */

/*

 * TODO:

 *

 * Show stoppers

 *  none

 *

 * Minor

 *  - OAM support

 *  - fix bugs listed below

/*

 * KNOWN BUGS:

 *

 * - may run into JK-JK bug and deadlock

 * - should allocate UBR channel first

 * - buffer space allocation algorithm is stupid

 *   (RX: should be maxSDU+maxdelay*rate

 *    TX: should be maxSDU+min(maxSDU,maxdelay*rate) )

 * - doesn't support OAM cells

 * - eni_put_free may hang if not putting memory fragments that _complete_

 *   2^n block (never happens in real life, though)

/* 

 * NULL pointer checking

/*

 * Very extensive activity logging. Greatly improves bug detection speed but

 * costs a few Mbps if enabled.

 CONFIG_ATM_ENI_DEBUG */

/*

 * NExx   must not be equal at end

 * EExx   may be equal at end

 * xxPJOK verify validity of pointer jumps

 * xxPMOK operating on a circular buffer of "c" words

 Read/write registers on card */

-------------------------------- utilities --------------------------------*/

dump_mem(eni_dev);*/

 we don't have more than 2^64 of anything ... */

 silence GCC */

 never leak data */

dump_mem(eni_dev);*/

dump_mem(eni_dev);*/

----------------------------------- RX ------------------------------------*/

 immediately halt adapter */

 dump useful information */

 really stop it */

 GCC, shut up */

 PDU plus descriptor */

 @@@ actually, skip is always == 1 ... */

 may work with some PCI chipsets ... */

 works only with *some* PCI chipsets ... */

 recommended */

 probably useless if RX_4W, RX_8W, ... */

	/*

	 * Can I move the dma_wr pointer by 2j+1 positions without overwriting

	 * data that hasn't been read (position of dma_rd) yet ?

 @@@ +1 is ugly */

 could do a full fallback, but that might be more expensive */

/*

 * TODO: should check whether direct copies (without DMA setup, dequeuing on

 * interrupt, etc.) aren't much faster for AAL0

 no HEC */

 -trailer(2)+header(1) */

 ^ trailer length (8) */

 clear IN_SERVICE flag */

	/*

	 * If new data has arrived between evaluating the while condition and

	 * clearing IN_SERVICE, we wouldn't be notified until additional data

	 * follows. So we have to loop again to be sure.

 nasty but we try to go on anyway */

 @@@ nope, doesn't work */

 set up VCI descriptor */

 descr, read = 0 */

 write, state, count = 0 */

 now it counts */

 block receiver */

 wait for receiver to become idle */

 discard pending cell */

 don't accept any new ones */

 wait for RX queue to drain */

 transition service->rx: rxing++, servicing-- */

----------------------------------- TX ------------------------------------*/

 don't complain anymore */

 may work with some PCI chipsets ... */

 recommended */

 probably useless if TX_8W or TX_16W */

 probably useless if TX_4W, TX_8W, ... */

 in words */

 Enable this for testing with the "align" program */

 should work now */

	/*

	 * Potential future IP speedup: make hard_header big enough to put

	 * segmentation descriptor directly into PDU. Saves: 4 slave writes,

	 * 1 DMA xfer & 2 DMA'ed bytes (protocol layering is for wimps :-)

 check space in buffer */

			/* cell without HEC plus segmentation header (includes

 add AAL5 trailer */

 add segmentation header */

	/*

	 * Can I move tx_pos by size bytes without getting closer than TX_GAP

	 * to the read pointer ? TX_GAP means to leave some space for what

	 * the manual calls "too close".

 check DMA */

	dma_size = 3; /* JK for descriptor and final fill, plus final size

 prepare DMA queue entries */

 @@@ well, this doesn't work anyway */

 JK for AAL5 trailer - AAL0 doesn't need it, but who cares ... */

 store frame */

printk("dsc = 0x%08lx\n",(unsigned long) readl(tx->send+tx->tx_pos*4));*/

 2^(((x+2)^2-(x+2))/2+1) */

 else fail later */

 for gcc */

 nothing to do */

 wait for TX queue to drain */

		/*

		 * Looping a few times in here is probably far cheaper than

		 * keeping track of TX completions all the time, so let's poll

		 * a bit ...

--------------------------------- common ----------------------------------*/

 may become useful again when tuning things */

	/*

	 * Must handle these two right now, because reading ISA doesn't clear

	 * them, so they re-occur and we never make it to the tasklet. Since

	 * they're rare, we don't mind the occasional invocation of eni_tasklet

	 * with eni_dev->events == 0.

 poll_tx ? */

 poll_rx ? */

--------------------------------- entries ---------------------------------*/

  0- 3 */

  4- 7 */

  8-11 */

 12-15 */

 16-19 */

 20-23 */

 24-27 */

 28-31 */

 10 usecs */ \

 10 usecs */ \

 start operation */

 send address */

 get ack */

 get ack */

 stop operation */

 id may not be present in ASIC Tonga boards - check this @@@ */

 TODO: should shrink allocation now */

 TODO: check for non-SUNI, check for TAXI ? */

 determine addresses of internal tables */

 initialize memory management */

 clear VCI table */

	/*

	 * byte_addr  free (k)

	 * 0x00000000     512  VCI table

	 * 0x00004000	  496  RX DMA

	 * 0x00005000	  492  TX DMA

	 * 0x00006000	  488  service list

	 * 0x00007000	  484  buffers

	 * 0x00080000	    0  end (512kB)

 Tonga uses SBus INTReq1 */

 clear Midway interrupts */

 deallocate memory */

foo();*/

 for eni_close after open_rx */

 should power down SUNI while !ref_count @@@ */

	/*

	 * Walk through the send buffer and patch the rate information in all

	 * segmentation buffer descriptors of this VCC.

 FPGA */ },

 ASIC */ },

 dummy for sizeof */

 @@@ since exit routine not defined, this module can not be unloaded */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vt1211.c - driver for the VIA VT1211 Super-I/O chip integrated hardware

 *            monitoring features

 * Copyright (C) 2006 Juerg Haefliger <juergh@gmail.com>

 *

 * This driver is based on the driver for kernel 2.4 by Mark D. Studebaker

 * and its port to kernel 2.6 by Lars Ekman.

/* ---------------------------------------------------------------------

 * Registers

 *

 * The sensors are defined as follows.

 *

 * Sensor          Voltage Mode   Temp Mode   Notes (from the datasheet)

 * --------        ------------   ---------   --------------------------

 * Reading 1                      temp1       Intel thermal diode

 * Reading 3                      temp2       Internal thermal diode

 * UCH1/Reading2   in0            temp3       NTC type thermistor

 * UCH2            in1            temp4       +2.5V

 * UCH3            in2            temp5       VccP

 * UCH4            in3            temp6       +5V

 * UCH5            in4            temp7       +12V

 * 3.3V            in5                        Internal VDD (+3.3V)

 *

 Voltages (in) numbered 0-5 (ix) */

 Temperatures (temp) numbered 0-6 (ix) */

 Fans numbered 0-1 (ix) */

 PWMs numbered 0-1 (ix) */

 Auto points numbered 0-3 (ap) */

 Miscellaneous registers */

 In, temp & fan alarm bits */

/* ---------------------------------------------------------------------

 * Data structures and manipulation thereof

 true if following fields are valid */

 In jiffies */

 Register values */

 Read once at init time */

 Read once at init time */

 ix = [0-5] */

 ix = [0-6] */

/*

 * in5 (ix = 5) is special. It's the internal 3.3V so it's scaled in the

 * driver according to the VT1211 BIOS porting guide

/*

 * temp1 (ix = 0) is an intel thermal diode which is scaled in user space.

 * temp2 (ix = 1) is the internal temp diode so it's scaled in the driver

 * according to some measurements that I took on an EPIA M10000.

 * temp3-7 are thermistor based so the driver returns the voltage measured at

 * the pin (range 0V - 2.2V).

/* ---------------------------------------------------------------------

 * Super-I/O constants and functions

/*

 * Configuration index port registers

 * The vt1211 can live at 2 different addresses so we need to probe both

 Configuration registers */

 logical device number */

 device ID */

 device revision */

 HW monitor active */

 base I/O address */

 VT1211 device ID */

 VT1211 logical device numbers */

 HW monitor */

/* ---------------------------------------------------------------------

 * Device I/O access

 registers cache is refreshed after 1 second */

 read VID */

 voltage (in) registers */

 temp registers */

 fan & pwm registers */

 pwm & temp auto point registers */

 alarm registers */

/* ---------------------------------------------------------------------

 * Voltage sysfs interfaces

 * ix = [0-5]

/* ---------------------------------------------------------------------

 * Temperature sysfs interfaces

 * ix = [0-6]

/* ---------------------------------------------------------------------

 * Fan sysfs interfaces

 * ix = [0-1]

 sync the data cache */

/* ---------------------------------------------------------------------

 * PWM sysfs interfaces

 * ix = [0-1]

 sync the data cache */

			/*

			 * disable SmartGuardian if both PWM outputs are

			 * disabled

 calculate tmp = log2(val) */

 sync the data cache */

 sync the data cache */

/* ---------------------------------------------------------------------

 * PWM auto point definitions

 * ix = [0-1]

 * ap = [0-3]

/*

 * pwm[ix+1]_auto_point[ap+1]_temp mapping table:

 * Note that there is only a single set of temp auto points that controls both

 * PWM controllers. We still create 2 sets of sysfs files to make it look

 * more consistent even though they map to the same registers.

 *

 * ix ap : description

 * -------------------

 * 0  0  : pwm1/2 off temperature        (pwm_auto_temp[0])

 * 0  1  : pwm1/2 low speed temperature  (pwm_auto_temp[1])

 * 0  2  : pwm1/2 high speed temperature (pwm_auto_temp[2])

 * 0  3  : pwm1/2 full speed temperature (pwm_auto_temp[3])

 * 1  0  : pwm1/2 off temperature        (pwm_auto_temp[0])

 * 1  1  : pwm1/2 low speed temperature  (pwm_auto_temp[1])

 * 1  2  : pwm1/2 high speed temperature (pwm_auto_temp[2])

 * 1  3  : pwm1/2 full speed temperature (pwm_auto_temp[3])

 sync the data cache */

/*

 * pwm[ix+1]_auto_point[ap+1]_pwm mapping table:

 * Note that the PWM auto points 0 & 3 are hard-wired in the VT1211 and can't

 * be changed.

 *

 * ix ap : description

 * -------------------

 * 0  0  : pwm1 off                   (pwm_auto_pwm[0][0], hard-wired to 0)

 * 0  1  : pwm1 low speed duty cycle  (pwm_auto_pwm[0][1])

 * 0  2  : pwm1 high speed duty cycle (pwm_auto_pwm[0][2])

 * 0  3  : pwm1 full speed            (pwm_auto_pwm[0][3], hard-wired to 255)

 * 1  0  : pwm2 off                   (pwm_auto_pwm[1][0], hard-wired to 0)

 * 1  1  : pwm2 low speed duty cycle  (pwm_auto_pwm[1][1])

 * 1  2  : pwm2 high speed duty cycle (pwm_auto_pwm[1][2])

 * 1  3  : pwm2 full speed            (pwm_auto_pwm[1][3], hard-wired to 255)

/* ---------------------------------------------------------------------

 * Miscellaneous sysfs interfaces (VRM, VID, name, and (legacy) alarms)

/* ---------------------------------------------------------------------

 * Device attribute structs

/* ---------------------------------------------------------------------

 * Device registration and initialization

 set VRM */

 Read (and initialize) UCH config */

	/*

	 * Initialize the interrupt mode (if request at module load time).

	 * The VT1211 implements 3 different modes for clearing interrupts:

	 * 0: Clear INT when status register is read. Regenerate INT as long

	 *    as temp stays above hysteresis limit.

	 * 1: Clear INT when status register is read. DON'T regenerate INT

	 *    until temp falls below hysteresis limit and exceeds hot limit

	 *    again.

	 * 2: Clear INT when temp falls below max limit.

	 *

	 * The driver only allows to force mode 0 since that's the only one

	 * that makes sense for 'sensors'

 Fill in some hard wired values into our data struct */

 Initialize the VT1211 chip */

 Create sysfs interface files */

 Register device */

 Sets global pdev as a side effect */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm93.c - Part of lm_sensors, Linux kernel modules for hardware monitoring

 *

 * Author/Maintainer: Mark M. Hoffman <mhoffman@lightlink.com>

 *	Copyright (c) 2004 Utilitek Systems, Inc.

 *

 * derived in part from lm78.c:

 *	Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl>

 *

 * derived in part from lm85.c:

 *	Copyright (c) 2002, 2003 Philip Pokorny <ppokorny@penguincomputing.com>

 *	Copyright (c) 2003       Margit Schubert-While <margitsw@t-online.de>

 *

 * derived in part from w83l785ts.c:

 *	Copyright (c) 2003-2004 Jean Delvare <jdelvare@suse.de>

 *

 * Ported to Linux 2.6 by Eric J. Bowersox <ericb@aspsys.com>

 *	Copyright (c) 2005 Aspen Systems, Inc.

 *

 * Adapted to 2.6.20 by Carsten Emde <cbe@osadl.org>

 *	Copyright (c) 2006 Carsten Emde, Open Source Automation Development Lab

 *

 * Modified for mainline integration by Hans J. Koch <hjk@hansjkoch.de>

 *	Copyright (c) 2007 Hans J. Koch, Linutronix GmbH

 LM93 REGISTER ADDRESSES */

 miscellaneous */

 alarm values start here */

 voltage inputs: in1-in16 (nr => 0-15) */

 temperature inputs: temp1-temp4 (nr => 0-3) */

 temp[1-4]_auto_boost (nr => 0-3) */

 #PROCHOT inputs: prochot1-prochot2 (nr => 0-1) */

 fan tach inputs: fan1-fan4 (nr => 0-3) */

 pwm outputs: pwm1-pwm2 (nr => 0-1, reg => 0-3) */

 GPIO input state */

 vid inputs: vid1-vid2 (nr => 0-1) */

 vccp1 & vccp2: VID relative inputs (nr => 0-1) */

 temp[1-4]_auto_boost_hyst */

 temp[1-4]_auto_pwm_[min|hyst] */

 prochot_override & prochot_interval */

 temp[1-4]_auto_base (nr => 0-3) */

 temp[1-4]_auto_offsets (step => 0-11) */

 #PROCHOT & #VRDHOT PWM ramp control */

 miscellaneous */

 error masks */

 LM93 REGISTER VALUES */

 LM94 REGISTER VALUES */

 SMBus capabilities */

 Addresses to scan */

 Insmod parameters */

 Driver data */

 LM93 BLOCK READ COMMANDS */

/*

 * ALARMS: SYSCTL format described further below

 * REG: 64 bits in 8 registers, as immediately below

/*

 * Client-specific data

 In jiffies */

 client update function */

 true if following fields are valid */

 register values, arranged by block read groups */

	/*

	 * temp1 - temp4: unfiltered readings

	 * temp1 - temp2: filtered readings

 vin1 - vin16: readings */

 prochot1 - prochot2: readings */

 fan counts 1-4 => 14-bits, LE, *left* justified */

 block6 has a lot of data we don't need */

 vin1 - vin16: low and high limits */

 fan count limits 1-4 => same format as block5 */

 pwm control registers (2 pwms, 4 regs) */

 auto/pwm base temp and offset temp registers */

 master config register */

 VID1 & VID2 => register format, 6-bits, right justified */

 prochot1 - prochot2: limits */

 vccp1 & vccp2 (in7 & in8): VID relative limits (register format) */

 GPIO input state (register format, i.e. inverted) */

 #PROCHOT override (register format) */

 #PROCHOT intervals (register format) */

 Fan Boost Temperatures (register format) */

 Fan Boost Hysteresis (register format) */

 Temperature Zone Min. PWM & Hysteresis (register format) */

 #PROCHOT & #VRDHOT PWM Ramp Control */

 miscellaneous setup regs */

	/*

	 * The two PWM CTL2  registers can read something other than what was

	 * last written for the OVR_DC field (duty cycle override).  So, we

	 * save the user-commanded value here.

/*

 * VID:	mV

 * REG: 6-bits, right justified, *always* using Intel VRM/VRD 10

 min, max, and nominal register values, per channel (u8) */

/*

 * Values from the datasheet. They're here for documentation only.

 * static const u8 lm93_vin_reg_nom[16] = {

 * 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,

 * 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0,

 * };

 min, max, and nominal voltage readings, per channel (mV)*/

/*

 * Values from the datasheet. They're here for documentation only.

 * static const unsigned long lm93_vin_val_nom[16] = {

 * 927,  927,  927, 1200, 1500, 1500, 1200, 1200,

 * 3300, 5000, 2500, 1969,  984,  984,  309, 3300,

 * };

/*

 * IN: mV, limits determined by channel nr

 * REG: scaling determined by channel nr

 range limit */

 try not to lose too much precision here */

 convert */

 vid in mV, upper == 0 indicates low limit, otherwise upper limit */

/*

 * vid in mV , upper == 0 indicates low limit, otherwise upper limit

 * upper also determines which nibble of the register is returned

 * (the other nibble will be 0x0)

/*

 * TEMP: 1/1000 degrees C (-128C to +127C)

 * REG: 1C/bit, two's complement

/*

 * TEMP: 1/1000 degrees C (-128C to +127C)

 * REG: 1C/bit, two's complement

 Determine 4-bit temperature offset resolution */

 mode: 0 => 1C/bit, nonzero => 0.5C/bit */

/*

 * This function is common to all 4-bit temperature offsets

 * reg is 4 bits right justified

 * mode 0 => 1C/bit, mode !0 => 0.5C/bit

/*

 * This function is common to all 4-bit temperature offsets

 * returns 4 bits right justified

 * mode 0 => 1C/bit, mode !0 => 0.5C/bit

 0 <= nr <= 3 */

 temp1-temp2 (nr=0,1) use lower nibble */

 temp3-temp4 (nr=2,3) use upper nibble */

/*

 * TEMP: 1/10 degrees C (0C to +15C (mode 0) or +7.5C (mode non-zero))

 * REG: 1.0C/bit (mode 0) or 0.5C/bit (mode non-zero)

 * 0 <= nr <= 3

 temp1-temp2 (nr=0,1) use lower nibble */

 temp3-temp4 (nr=2,3) use upper nibble */

/*

 * PWM: 0-255 per sensors documentation

 * REG: 0-13 as mapped below... right justified

   0.00% */ 0x40, 
  31.25% */ 0x60, 
  43.75% */ 0x80, 
  56.25% */ 0xa0, 
  68.75% */ 0xc0, 
  81.25% */ 0xe0, 
  93.75% */ 0xff, 
 14, 15 are reserved and should never occur */

   0.00% */ 0x40, 
  28.57% */ 0x52, 
  35.71% */ 0x64, 
  42.86% */ 0x76, 
  50.00% */ 0x89, 
  57.14% */ 0xb6, 
  85.71% */ 0xff, 
 14, 15 are reserved and should never occur */

 round up to nearest match */

 can fall through with i==13 */

/*

 * RPM: (82.5 to 1350000)

 * REG: 14-bits, LE, *left* justified

/*

 * PWM FREQ: HZ

 * REG: 0-7 as mapped below

 round up to nearest match */

 can fall through with i==0 */

/*

 * TIME: 1/100 seconds

 * REG: 0-7 as mapped below

 round up to nearest match */

 can fall through with i==8 */

/*

 * RAMP: 1/100 seconds

 * REG: 50mS/bit 4-bits right justified

/*

 * PROCHOT: 0-255, 0 => 0%, 255 => > 96.6%

 * REG: (same)

/*

 * PROCHOT-INTERVAL: 73 - 37200 (1/100 seconds)

 * REG: 0-9 as mapped below

 round up to nearest match */

 can fall through with i==9 */

/*

 * GPIO: 0-255, GPIO0 is LSB

 * REG: inverted

/*

 * alarm bitmask definitions

 * The LM93 has nearly 64 bits of error status... I've pared that down to

 * what I think is a useful subset in order to fit it into 32 bits.

 *

 * Especially note that the #VRD_HOT alarms are missing because we provide

 * that information as values in another sysfs file.

 *

 * If libsensors is extended to support 64 bit values, this could be revisited.

 retry in case of read errors */

 <TODO> what to return in case of error? */

 <TODO> how to handle write errors? */

 retry in case of read errors */

 <TODO> what to return in case of error? */

 <TODO> how to handle write errors? */

/*

 * read block data into values, retry if not expected length

 * fbn => index to lm93_block_read_cmds table

 * (Fixed Block Number - section 14.5.2 of LM93 datasheet)

 <TODO> what to do in case of error? */

 update routine for data that has no corresponding SMBus block command */

 temp1 - temp4: limits */

 config register */

 vid1 - vid2: values */

 prochot1 - prochot2: limits */

 vccp1 - vccp2: VID relative limits */

 GPIO input state */

 #PROCHOT override state */

 #PROCHOT intervals */

 Fan Boost Temperature registers */

 Fan Boost Temperature Hyst. registers */

 Temperature Zone Min. PWM & Hysteresis registers */

 #PROCHOT & #VRDHOT PWM Ramp Control register */

 misc setup registers */

 write back alarm values to clear */

 update routine which uses SMBus block data commands */

 in1 - in16: values & limits */

 temp1 - temp4: values */

 prochot1 - prochot2: values */

 fan1 - fan4: values & limits */

 pmw control registers */

 alarm values */

 auto/pwm registers */

 update routine which uses SMBus byte/word data commands only */

 in1 - in16: values & limits */

 temp1 - temp4: values */

 prochot1 - prochot2: values */

 fan1 - fan4: values & limits */

 pwm control registers */

 alarm values */

 auto/pwm (base temp) registers */

 auto/pwm (offset temp) registers */

 following are the sysfs callback functions */

 force 0.5C/bit mode */

 force 0.5C/bit mode */

 force 0.5C/bit mode */

/*

 * some tedious bit-twiddling here to deal with the register format:

 *

 *	data->sf_tach_to_pwm: (tach to pwm mapping bits)

 *

 *		bit |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0

 *		     T4:P2 T4:P1 T3:P2 T3:P1 T2:P2 T2:P1 T1:P2 T1:P1

 *

 *	data->sfc2: (enable bits)

 *

 *		bit |  3  |  2  |  1  |  0

 *		       T4    T3    T2    T1

 extract the relevant mapping */

 if there's a mapping and it's enabled */

/*

 * helper function - must grab data->update_lock before calling

 * fan is 0-3, indicating fan1-fan4

 insert the new mapping and write it out */

 insert the enable bit and write it out */

 sanity test, ignore the write otherwise */

 can't enable if pwm freq is 22.5KHz */

 show user commanded value if enabled */

 show present h/w value if manual pwm disabled */

 save user commanded value */

 manual override enabled ? */

 enable manual override, set PWM to max */

 enable manual override */

 disable manual override */

/*

 * helper function - must grab data->update_lock before calling

 * pwm is 0-1, indicating pwm1-pwm2

 * this disables smart tach for all tach channels bound to the given pwm

 collapse the mapping into a mask of enable bits */

 disable smart tach according to the mask */

 ctl4 == 0 -> 22.5KHz -> disable smart tach */

 configure VID pin input thresholds */

 enable #ALERT pin */

 enable ASF mode for BMC status registers */

 set sleep state to S0 */

 unmask #VRDHOT and dynamic VCCP (if nec) error events */

 start monitoring */

 spin until ready */

 Return 0 if detection is successful, -ENODEV otherwise */

 detection */

 choose update routine based on bus capabilities */

 housekeeping */

 initialize the chip */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * sbrmi.c - hwmon driver for a SB-RMI mailbox

 *           compliant AMD SoC device.

 *

 * Copyright (C) 2020-2021 Advanced Micro Devices, Inc.

 Do not allow setting negative power limit */

 Mask for Status Register bit[1] */

 Software Interrupt for triggering */

/*

 * SB-RMI supports soft mailbox service request to MP1 (power management

 * firmware) through SBRMI inbound/outbound message registers.

 * SB-RMI message IDs

 SB-RMI registers */

 Each client has this additional data */

	/*

	 * Enable the SB-RMI Software alert status

	 * by writing 0 to bit 4 of Control register(0x1)

 Indicate firmware a command is to be serviced */

 Write the command to SBRMI::InBndMsg_inst0 */

	/*

	 * For both read and write the initiator (BMC) writes

	 * Command Data In[31:0] to SBRMI::InBndMsg_inst[4:1]

	 * SBRMI_x3C(MSB):SBRMI_x39(LSB)

	/*

	 * Write 0x01 to SBRMI::SoftwareInterrupt to notify firmware to

	 * perform the requested read or write command

	/*

	 * Firmware will write SBRMI::Status[SwAlertSts]=1 to generate

	 * an ALERT (if enabled) to initiator (BMC) to indicate completion

	 * of the requested command

	/*

	 * For a read operation, the initiator (BMC) reads the firmware

	 * response Command Data Out[31:0] from SBRMI::OutBndMsg_inst[4:1]

	 * {SBRMI_x34(MSB):SBRMI_x31(LSB)}.

	/*

	 * BMC must write 1'b1 to SBRMI::Status[SwAlertSts] to clear the

	 * ALERT to initiator

 hwmon power attributes are in microWatt */

	/*

	 * hwmon power attributes are in microWatt

	 * mailbox read/write is in mWatt

 Enable alert for SB-RMI sequence */

 Cache maximum power limit */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * w83792d.c - Part of lm_sensors, Linux kernel modules for hardware

 *	       monitoring

 * Copyright (C) 2004, 2005 Winbond Electronics Corp.

 *			    Shane Huang,

 *			    Rudolf Marek <r.marek@assembler.cz>

 *

 * Note:

 * 1. This driver is only for 2.6 kernel, 2.4 kernel need a different driver.

 * 2. This driver is only for Winbond W83792D C version device, there

 *     are also some motherboards with B version W83792D device. The

 *     calculation method to in6-in7(measured value, limits) is a little

 *     different between C and B version. C or B version can be identified

 *     by CR[0x49h].

/*

 * Supports following chips:

 *

 * Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA

 * w83792d	9	7	7	3	0x7a	0x5ca3	yes	no

 Addresses to scan */

 Insmod parameters */

 The W83792D registers */

 Vcore A in DataSheet */

 Vcore B in DataSheet */

 VIN0 in DataSheet */

 VIN1 in DataSheet */

 VIN2 in DataSheet */

 VIN3 in DataSheet */

 5VCC in DataSheet */

 5VSB in DataSheet */

 VBAT in DataSheet */

 Low Bits I in DataSheet */

 Low Bits II in DataSheet */

 Vcore A High Limit in DataSheet */

 Vcore B High Limit in DataSheet */

 VIN0 High Limit in DataSheet */

 VIN1 High Limit in DataSheet */

 VIN2 High Limit in DataSheet */

 VIN3 High Limit in DataSheet */

 5VCC High Limit in DataSheet */

 5VSB High Limit in DataSheet */

 VBAT High Limit in DataSheet */

 Vcore A Low Limit in DataSheet */

 Vcore B Low Limit in DataSheet */

 VIN0 Low Limit in DataSheet */

 VIN1 Low Limit in DataSheet */

 VIN2 Low Limit in DataSheet */

 VIN3 Low Limit in DataSheet */

 5VCC Low Limit in DataSheet */

 5VSB Low Limit in DataSheet */

 VBAT Low Limit in DataSheet */

 FAN 1 Count in DataSheet */

 FAN 2 Count in DataSheet */

 FAN 3 Count in DataSheet */

 FAN 4 Count in DataSheet */

 FAN 5 Count in DataSheet */

 FAN 6 Count in DataSheet */

 FAN 7 Count in DataSheet */

 FAN 1 Count Low Limit in DataSheet */

 FAN 2 Count Low Limit in DataSheet */

 FAN 3 Count Low Limit in DataSheet */

 FAN 4 Count Low Limit in DataSheet */

 FAN 5 Count Low Limit in DataSheet */

 FAN 6 Count Low Limit in DataSheet */

 FAN 7 Count Low Limit in DataSheet */

 FAN Configuration in DataSheet */

 contains FAN2 and FAN1 Divisor */

 contains FAN4 and FAN3 Divisor */

 contains FAN6 and FAN5 Divisor */

 contains FAN7 Divisor. */

 FAN 1 Duty Cycle, be used to control */

 FAN 2 Duty Cycle, be used to control */

 FAN 3 Duty Cycle, be used to control */

 FAN 4 Duty Cycle, be used to control */

 FAN 5 Duty Cycle, be used to control */

 FAN 6 Duty Cycle, be used to control */

 FAN 7 Duty Cycle, be used to control */

 TEMP 1 in DataSheet */

 TEMP 1 Over in DataSheet */

 TEMP 1 Hyst in DataSheet */

 TEMP 2 in DataSheet */

 TEMP 2(0.5 deg) in DataSheet */

 TEMP 2 Over High part in DataSheet */

 TEMP 2 Over Low part in DataSheet */

 TEMP 2 Thyst High part in DataSheet */

 TEMP 2 Thyst Low part in DataSheet */

 TEMP 3 in DataSheet */

 TEMP 3(0.5 deg) in DataSheet */

 TEMP 3 Over High part in DataSheet */

 TEMP 3 Over Low part in DataSheet */

 TEMP 3 Thyst High part in DataSheet */

 TEMP 3 Thyst Low part in DataSheet */

 SmartFanI: Fan1 target value */

 SmartFanI: Fan2 target value */

 SmartFanI: Fan3 target value */

 (bit3-0)SmartFan Fan1 tolerance */

 (bit7-4)SmartFan Fan2 tolerance */

 (bit3-0)SmartFan Fan3 tolerance */

 SmartFanII: Fan1 temp point 1 */

 SmartFanII: Fan1 temp point 2 */

 SmartFanII: Fan1 temp point 3 */

 SmartFanII: Fan1 temp point 4 */

 SmartFanII: Fan2 temp point 1 */

 SmartFanII: Fan2 temp point 2 */

 SmartFanII: Fan2 temp point 3 */

 SmartFanII: Fan2 temp point 4 */

 SmartFanII: Fan3 temp point 1 */

 SmartFanII: Fan3 temp point 2 */

 SmartFanII: Fan3 temp point 3 */

 SmartFanII: Fan3 temp point 4 */

 (bit3-0) SmartFanII: Fan1 Non-Stop */

 (bit7-4) SmartFanII: Fan1 Level 1 */

 (bit7-4) SmartFanII: Fan1 Level 2 */

 (bit3-0) SmartFanII: Fan1 Level 3 */

 (bit3-0) SmartFanII: Fan2 Non-Stop */

 (bit7-4) SmartFanII: Fan2 Level 1 */

 (bit7-4) SmartFanII: Fan2 Level 2 */

 (bit3-0) SmartFanII: Fan2 Level 3 */

 (bit3-0) SmartFanII: Fan3 Non-Stop */

 (bit7-4) SmartFanII: Fan3 Level 1 */

 (bit7-4) SmartFanII: Fan3 Level 2 */

 (bit3-0) SmartFanII: Fan3 Level 3 */

 realtime status register1 */

 realtime status register2 */

 realtime status register3 */

 Bit 5: Case Open status bit */

 Bit 7: Case Open CLR_CHS/Reset bit */

 control in0/in1 's limit modifiability */

/*

 * Conversions. Rounding and limit checking is only done on the TO_REG

 * variants. Note that you should be a bit careful with which arguments

 * these macros are called: arguments may be evaluated more than once.

 * Fixing this is just not worth it.

 for temp1 */

 for temp2 and temp3, because they need additional resolution */

 true if following fields are valid */

 In jiffies */

 Register value */

 Register value */

 Register value */

 Additional resolution to voltage in6-0 */

 Register value */

 Register value */

 current, over, thyst */

 Register value */

 Register encoding, shifted right */

 The 7 PWM outputs */

 realtime status register encoding,combined */

 Chassis status */

 Smart FanI: Fan1,2,3 target value */

 Fan1,2,3 tolerance(Smart Fan I/II) */

 Smart FanII: Fan1,2,3 temperature points */

 Smart FanII: Fan1,2,3 duty cycle levels */

 in7 and in8 do not have low bits, but the formula still works */

/*

 * The SMBus locks itself. The Winbond W83792D chip has a bank register,

 * but the driver only accesses registers in bank 0, so we don't have

 * to switch banks and lock access between switches.

 following are the sysfs callback functions */

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan divisor.  This follows the principle of

 * least surprise; the user doesn't expect the fan minimum to change just

 * because the divisor changed.

u8 reg;*/

 Save fan_min */

 Restore fan_min */

 read/write the temperature1, includes measured value and limits */

 read/write the temperature2-3, includes measured value and limits */

 get realtime status of all sensors items: voltage, temp, fan */

 manual mode */

thermal cruise/Smart Fan I */

 Smart Fan II */

 manual mode */

 Smart Fan II */

 thermal cruise/Smart Fan I */

 PWM mode */

 DC mode */

 Force cache refresh */

 For Smart Fan I / Thermal Cruise */

 For Smart Fan I/Thermal Cruise and Smart Fan II */

 For Smart Fan II */

 Return 0 if detection is successful, -ENODEV otherwise */

 Check for Winbond ID if in bank 0 */

 is Bank0 */

	/*

	 * If Winbond chip, address of chip and W83792D_REG_I2C_ADDR

	 * should match

  Put it now into bank 0 and Vendor ID High Byte */

 Determine the chip type. */

 Initialize the chip */

 A few vars need to be filled upon startup */

 Register sysfs hooks */

	/*

	 * Read GPIO enable register to check if pins for fan 4,5 are used as

	 * GPIO

	/*

	 * Clear the bit6 of W83792D_REG_VID_IN_B(set it into 0):

	 * W83792D_REG_VID_IN_B bit6 = 0: the high/low limit of

	 * vin0/vin1 can be modified by user;

	 * W83792D_REG_VID_IN_B bit6 = 1: the high/low limit of

	 * vin0/vin1 auto-updated, can NOT be modified by user.

 Start monitoring */

 Update the voltages measured value and limits */

 Update the Fan measured value and limits */

 Update the PWM/DC Value and PWM/DC flag */

 Update the Fan Divisor */

 Update the realtime status */

 Update CaseOpen status and it's CLR_CHS. */

 Update Thermal Cruise/Smart Fan I target value */

 Update Smart Fan I/II tolerance */

 Update Smart Fan II temperature points */

 Update Smart Fan II duty cycle levels */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * A hwmon driver for the IBM System Director Active Energy Manager (AEM)

 * temperature/power/energy sensors and capping functionality.

 * Copyright (C) 2008 IBM

 *

 * Author: Darrick J. Wong <darrick.wong@oracle.com>

 AEM 2.x has more energy registers */

 AEM 2.x needs more sensor files */

 In jiffies */

 Function and buffer to update sensors */

	/*

	 * AEM 1.x sensors:

	 * Available sensors:

	 * Energy meter

	 * Power meter

	 *

	 * AEM 2.x sensors:

	 * Two energy meters

	 * Two power meters

	 * Two temperature sensors

	 * Six power cap registers

 sysfs attrs */

 energy use in mJ */

 power sampling interval in ms */

 Everything past here is for AEM2 only */

 power caps in dW */

 exhaust temperature in C */

 Data structures returned by the AEM firmware */

 These are used to find AEM1 instances */

 These are used to find AEM2 instances */

 These are used to query sensors */

 Data structures to talk to the IPMI layer */

 Functions to talk to the IPMI layer */

 Initialize IPMI address, message buffers and user data */

 Initialize IPMI address */

 Initialize message buffers */

 Create IPMI messaging interface user */

 Send an IPMI command */

 Dispatch IPMI messages to callers */

 Sensor support functions */

 Read a sensor value; must be called with data->lock held */

 Use preallocated rx buffer */

 AEM registers are 1, 2, 4 or 8 bytes */

 Update AEM energy registers */

 Update all AEM1 sensors */

 Update all AEM2 sensors */

 Delete an AEM instance */

 Probe functions for AEM1 devices */

 Retrieve version and module handle for an AEM1 instance */

 Find and initialize one AEM1 instance */

 Copy instance data */

 Create sub-device for this fw instance */

 Set up IPMI interface */

 Register with hwmon */

 Find sensors */

 Add to our list of AEM devices */

 Find and initialize all AEM1 instances */

 Probe functions for AEM2 devices */

 Retrieve version and module handle for an AEM2 instance */

 Find and initialize one AEM2 instance */

 Copy instance data */

 Create sub-device for this fw instance */

 Set up IPMI interface */

 Register with hwmon */

 Find sensors */

 Add to our list of AEM devices */

 Find and initialize all AEM2 instances */

 Probe a BMC for AEM firmware instances */

 Ignore probe errors; they won't cause problems */

 Handle BMC deletion */

 sysfs support functions */

 AEM device name */

 AEM device version */

 Display power use */

 Display energy use */

 Display power interval registers */

 Set power interval registers */

 Discover sensors on an AEM device */

 Set up read-only sensors */

 Set up read-write sensors */

 sysfs support functions for AEM2 sensors */

 Display temperature use */

 Display power-capping registers */

 Remove sensors attached to an AEM device */

 Sensor probe functions */

 Description of AEM1 sensors */

 Description of AEM2 sensors */

 Set up AEM1 sensor attrs */

 Set up AEM2 sensor attrs */

 Module init/exit routines */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * via686a.c - Part of lm_sensors, Linux kernel modules

 *	       for hardware monitoring

 *

 * Copyright (c) 1998 - 2002  Frodo Looijaard <frodol@dds.nl>,

 *			      Kyösti Mälkki <kmalkki@cc.hut.fi>,

 *			      Mark Studebaker <mdsxyz123@yahoo.com>,

 *			      and Bob Dougherty <bobd@stanford.edu>

 *

 * (Some conversion-factor data were contributed by Jonathan Teh Soon Yew

 * <j.teh@iname.com> and Alex van Kaam <darkside@chello.nl>.)

/*

 * Supports the Via VT82C686A, VT82C686B south bridges.

 * Reports all as a 686A.

 * Warning - only supports a single device.

/*

 * If force_addr is set to anything different from 0, we forcibly enable

 * the device at the given address.

/*

 * The Via 686a southbridge has a LM78-like chip integrated on the same IC.

 * This driver is a customized copy of lm78.c

 Many VIA686A constants specified below */

 Length of ISA address segment */

 The VIA686A registers */

 ins numbered 0-4 */

 fans numbered 1-2 */

 temps numbered 1-3 */

 bits 7-6 */

 2 = bits 5-4, 3 = bits 7-6 */

/*

 * The following register sets temp interrupt mode (bits 1-0 for temp1,

 * 3-2 for temp2, 5-4 for temp3).  Modes are:

 * 00 interrupt stays as long as value is out-of-range

 * 01 interrupt is cleared once register is read (default)

 * 10 comparator mode- like 00, but ignores hysteresis

 * 11 same as 00

 We'll just assume that you want to set all 3 simultaneously: */

/*

 * Conversions. Limit checking is only done on the TO_REG

 * variants.

 *

 ******** VOLTAGE CONVERSIONS (Bob Dougherty) ********

 * From HWMon.cpp (Copyright 1998-2000 Jonathan Teh Soon Yew):

 * voltagefactor[0]=1.25/2628; (2628/1.25=2102.4)   // Vccp

 * voltagefactor[1]=1.25/2628; (2628/1.25=2102.4)   // +2.5V

 * voltagefactor[2]=1.67/2628; (2628/1.67=1573.7)   // +3.3V

 * voltagefactor[3]=2.6/2628;  (2628/2.60=1010.8)   // +5V

 * voltagefactor[4]=6.3/2628;  (2628/6.30=417.14)   // +12V

 * in[i]=(data[i+2]*25.0+133)*voltagefactor[i];

 * That is:

 * volts = (25*regVal+133)*factor

 * regVal = (volts/factor-133)/25

 * (These conversions were contributed by Jonathan Teh Soon Yew

 * <j.teh@iname.com>)

	/*

	 * To avoid floating point, we multiply constants by 10 (100 for +12V).

	 * Rounding is done (120500 is actually 133000 - 12500).

	 * Remember that val is expressed in 0.001V/bit, which is why we divide

	 * by an additional 10000 (100000 for +12V): 1000 for val and 10 (100)

	 * for the constants.

	/*

	 * To avoid floating point, we multiply constants by 10 (100 for +12V).

	 * We also multiply them by 1000 because we want 0.001V/bit for the

	 * output value. Rounding is done.

******** FAN RPM CONVERSIONS ********/

/*

 * Higher register values = slower fans (the fan's strobe gates a counter).

 * But this chip saturates back at 0, not at 255 like all the other chips.

 * So, 0 means 0 RPM

******* TEMP CONVERSIONS (Bob Dougherty) *********/

/*

 * linear fits from HWMon.cpp (Copyright 1998-2000 Jonathan Teh Soon Yew)

 *	if(temp<169)

 *		return double(temp)*0.427-32.08;

 *	else if(temp>=169 && temp<=202)

 *		return double(temp)*0.582-58.16;

 *	else

 *		return double(temp)*0.924-127.33;

 *

 * A fifth-order polynomial fits the unofficial data (provided by Alex van

 * Kaam <darkside@chello.nl>) a bit better.  It also give more reasonable

 * numbers on my machine (ie. they agree with what my BIOS tells me).

 * Here's the fifth-order fit to the 8-bit data:

 * temp = 1.625093e-10*val^5 - 1.001632e-07*val^4 + 2.457653e-05*val^3 -

 *	2.967619e-03*val^2 + 2.175144e-01*val - 7.090067e+0.

 *

 * (2000-10-25- RFD: thanks to Uwe Andersen <uandersen@mayah.com> for

 * finding my typos in this formula!)

 *

 * Alas, none of the elegant function-fit solutions will work because we

 * aren't allowed to use floating point in the kernel and doing it with

 * integers doesn't provide enough precision.  So we'll do boring old

 * look-up table stuff.  The unofficial data (see below) have effectively

 * 7-bit resolution (they are rounded to the nearest degree).  I'm assuming

 * that the transfer function of the device is monotonic and smooth, so a

 * smooth function fit to the data will allow us to get better precision.

 * I used the 5th-order poly fit described above and solved for

 * VIA register values 0-255.  I *10 before rounding, so we get tenth-degree

 * precision.  (I could have done all 1024 values for our 10-bit readings,

 * but the function is very linear in the useful range (0-80 deg C), so

 * we'll just use linear interpolation for 10-bit readings.)  So, temp_lut

 * is the temp at via register values 0-255:

/*

 * the original LUT values from Alex van Kaam <darkside@chello.nl>

 * (for via register values 12-240):

 * {-50,-49,-47,-45,-43,-41,-39,-38,-37,-35,-34,-33,-32,-31,

 * -30,-29,-28,-27,-26,-25,-24,-24,-23,-22,-21,-20,-20,-19,-18,-17,-17,-16,-15,

 * -15,-14,-14,-13,-12,-12,-11,-11,-10,-9,-9,-8,-8,-7,-7,-6,-6,-5,-5,-4,-4,-3,

 * -3,-2,-2,-1,-1,0,0,1,1,1,3,3,3,4,4,4,5,5,5,6,6,7,7,8,8,9,9,9,10,10,11,11,12,

 * 12,12,13,13,13,14,14,15,15,16,16,16,17,17,18,18,19,19,20,20,21,21,21,22,22,

 * 22,23,23,24,24,25,25,26,26,26,27,27,27,28,28,29,29,30,30,30,31,31,32,32,33,

 * 33,34,34,35,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,

 * 45,46,46,47,48,48,49,49,50,51,51,52,52,53,53,54,55,55,56,57,57,58,59,59,60,

 * 61,62,62,63,64,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,

 * 85,86,88,89,91,92,94,96,97,99,101,103,105,107,109,110};

 *

 *

 * Here's the reverse LUT.  I got it by doing a 6-th order poly fit (needed

 * an extra term for a good fit to these inverse data!) and then

 * solving for each temp value from -50 to 110 (the useable range for

 * this chip).  Here's the fit:

 * viaRegVal = -1.160370e-10*val^6 +3.193693e-08*val^5 - 1.464447e-06*val^4

 * - 2.525453e-04*val^3 + 1.424593e-02*val^2 + 2.148941e+00*val +7.275808e+01)

 * Note that n=161:

/*

 * Converting temps to (8-bit) hyst and over registers

 * No interpolation here.

 * The +50 is because the temps start at -50

 for 8-bit temperature hyst and over registers */

 for 10-bit temperature readings */

 no interpolation for these */

 do some linear interpolation */

/*

 * For each registered chip, we need to keep some data in memory.

 * The structure is dynamically allocated.

 true if following fields are valid */

 In jiffies */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value 10 bit */

 Register value */

 Register value */

 Register encoding, shifted right */

 Register encoding, combined */

 pointer to the (only) via686a */

 following are the sysfs callback functions */

 7 voltage sensors */

 3 temperatures */

 2 Fans */

 Alarms */

 This is called when the module is loaded */

 Reserve the ISA region */

 Initialize the VIA686A chip */

 Register sysfs hooks */

 Start monitoring */

 Configure temp interrupt mode for continuous-interrupt operation */

 Pre-read fan clock divisor values */

		/*

		 * add in lower 2 bits

		 * temp1 uses bits 7-6 of VIA686A_REG_TEMP_LOW1

		 * temp2 uses bits 5-4 of VIA686A_REG_TEMP_LOW23

		 * temp3 uses bits 7-6 of VIA686A_REG_TEMP_LOW23

 Sets global pdev as a side effect */

	/*

	 * Always return failure here.  This is to allow other drivers to bind

	 * to this pci device.  We don't really want to have control over the

	 * pci device, we only wanted to read as few register values from it.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max31722 - hwmon driver for Maxim Integrated MAX31722/MAX31723 SPI

 * digital thermometer and thermostats.

 *

 * Copyright (c) 2016, Intel Corporation.

 Keep 12 bits and multiply by the scale of 62.5 millidegrees/bit. */

	/*

	 * Set SD bit to 0 so we can have continuous measurements.

	 * Set resolution to 12 bits for maximum precision.

 There is nothing we can do about this ... */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * smsc47m192.c - Support for hardware monitoring block of

 *		  SMSC LPC47M192 and compatible Super I/O chips

 *

 * Copyright (C) 2006  Hartmut Rick <linux@rick.claranet.de>

 *

 * Derived from lm78.c and other chip drivers.

 Addresses to scan */

 SMSC47M192 registers */

 generalised scaling with integer rounding */

 Conversions */

 smsc47m192 internally scales voltage measurements */

/*

 * TEMP: 0.001 degC units (-128C to +127C)

 * REG: 1C/bit, two's complement

 true if following fields are valid */

 In jiffies */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register encoding, combined */

 Register encoding, combined */

		/*

		 * first offset is temp_offset[0] if SFR bit 4 is set,

		 * temp_offset[1] otherwise

 Voltages */

 Temperatures */

		/*

		 * offset[0] and offset[1] share the same register,

		 * SFR bit 4 activates offset[0]

 VID */

 Alarms */

 select cycle mode (pause 1 sec between updates) */

 initialize alarm limits */

 start monitoring */

 Return 0 if detection is successful, -ENODEV otherwise */

 Detection criteria from sensors_detect script */

 Initialize the SMSC47M192 chip */

 sysfs hooks */

 Pin 110 is either in4 (+12V) or VID4 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2017 IBM Corp.

 *

 * Driver for the Nuvoton W83773G SMBus temperature sensor IC.

 * Supported models: W83773G

 W83773 has 3 channels */

 The W83773 registers */

 this is the number of sensors in the device */

 offset value equals to (high_byte << 3 | low_byte >> 5) * 125 */

	/*

	 * For valid rates, interval can be calculated as

	 *	interval = (1 << (8 - rate)) * 62.5;

	 * Rounded rate is therefore

	 *	rate = 8 - __fls(interval * 8 / (62.5 * 7));

	 * Use clamp_val() to avoid overflows, and to ensure valid input

	 * for __fls.

 Set the conversion rate to 2 Hz */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ntc_thermistor.c - NTC Thermistors

 *

 *  Copyright (C) 2010 Samsung Electronics

 *  MyungJoo Ham <myungjoo.ham@samsung.com>

/*

 * Used as index in a zero-terminated array, holes not allowed so

 * that NTC_LAST is the first empty array entry.

/*

 * A compensation table should be sorted by the values of .ohm

 * in descending order.

 * The following compensation tables are from the specification of Murata NTC

 * Thermistors Datasheet

/*

 * The following compensation tables are from the specifications in EPCOS NTC

 * Thermistors Datasheets

		/*

		 * This fallback uses a raw read and then

		 * assumes the ADC is 12 bits, scaling with

		 * a factor 1000 to get to microvolts.

 Assume 12 bit ADC with vref at pullup_uv */

 Usage of vendor name "ntc" is deprecated */

 status change should be possible if not always on. */

	/*

	 * Handle special cases: Resistance is higher than or equal to

	 * resistance in first table entry, or resistance is lower or equal

	 * to resistance in last table entry.

	 * In these cases, return i_low == i_high, either pointing to the

	 * beginning or to the end of the table depending on the condition.

 Do a binary search on compensation table */

		/*

		 * start <= mid < end

		 * data->comp[start].ohm > ohm >= data->comp[end].ohm

		 *

		 * We could check for "ohm == data->comp[mid].ohm" here, but

		 * that is a quite unlikely condition, and we would have to

		 * check again after updating start. Check it at the end instead

		 * for simplicity.

			/*

			 * ohm >= data->comp[start].ohm might be true here,

			 * since we set start to mid + 1. In that case, we are

			 * done. We could keep going, but the condition is quite

			 * likely to occur, so it is worth checking for it.

		/*

		 * start <= end

		 * data->comp[start].ohm >= ohm >= data->comp[end].ohm

	/*

	 * start == end

	 * ohm >= data->comp[end].ohm

	/*

	 * First multiplying the table temperatures with 1000 to get to

	 * millicentigrades (which is what we want) and then interpolating

	 * will give the best precision.

 Either one of the two is required. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * w83793.c - Linux kernel driver for hardware monitoring

 * Copyright (C) 2006 Winbond Electronics Corp.

 *	      Yuan Mu

 *	      Rudolf Marek <r.marek@assembler.cz>

 * Copyright (C) 2009-2010 Sven Anders <anders@anduras.de>, ANDURAS AG.

 *		Watchdog driver part

 *		(Based partially on fschmd driver,

 *		 Copyright 2007-2008 by Hans de Goede)

/*

 * Supports following chips:

 *

 * Chip	#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA

 * w83793	10	12	8	6	0x7b	0x5ca3	yes	no

 Default values */

 2 minute default timeout */

 Addresses to scan */

 Insmod parameters */

 default timeout in minutes */

/*

 * Address 0x00, 0x0d, 0x0e, 0x0f in all three banks are reserved

 * as ID, Bank Select registers

/*

 * only crit and crit_hyst affect real-time alarm status

 * current crit crit_hyst warn warn_hyst

 SMI MASK4 */

 Current, High, Low */

 Vcore A	*/

 Vcore B	*/

 Vtt		*/

 VSEN1	*/

 VSEN2	*/

 +3VSEN	*/

 +12VSEN	*/

 5VDD		*/

 5VSB		*/

 VBAT		*/

 Low Bits of Vcore A/B Vtt Read/High/Low */

 High byte */

 High byte */

 Unit in 0.1 second */

 Unit in 0.1 second */

 bit field, fan1 is bit0, fan2 is bit1 ... */

 true if following fields are valid */

 In jiffies */

	unsigned long last_nonvolatile;	/* In jiffies, last time we update the

					 * nonvolatile registers

 Register value, read/high/low */

 Additional resolution for VCore A/B Vtt */

 Only fan1- fan5 has own pins */

 Register value combine */

 Register value combine */

 current, crit, crit_hyst,warn, warn_hyst */

 Additional resolution TD1-TD4 */

	u8 temp_mode[2];	/* byte 0: Temp D1-D4 mode each has 2 bits

				 * byte 1: Temp R1,R2 mode, each has 1 bit

 If reached all fan will be at full speed */

 Temp controls which pwm fan, bit field */

 Register value, each Temp has 1 bit */

 Register value */

 Register value */

 All fan default pwm, next poweron valid */

 Register value */

 realtime status registers */

 Temp tolerance(Smart Fan I/II) */

 Smart FanII: Fan duty cycle */

 Smart FanII: Temp level point */

 watchdog */

 member of the watchdog_data_list */

 must be unique to avoid sysfs conflict */

 watchdog timeout in minutes */

/*

 * Somewhat ugly :( global data pointer list with all devices, so that

 * we can find our device data as when using misc_register. There is no

 * other method to get to one's device data from the open file-op and

 * for usage in the reboot notifier callback.

 Note this lock not only protect list access, but also data.kref access */

/*

 * Release our data struct when we're detached from the i2c client *and* all

 * references to our watchdog device are released

 BEEP_ENABLE */

 Write 0 to clear chassis alarm */

 Force cache refresh */

 Only TD1-TD4 have low bits */

/*

 * TD1-TD4

 * each has 4 mode:(2 bits)

 * 0:	Stop monitor

 * 1:	Use internal temp sensor(default)

 * 2:	Reserved

 * 3:	Use sensor in Intel CPU and get result by PECI

 *

 * TR1-TR2

 * each has 2 mode:(1 bit)

 * 0:	Disable temp sensor monitor

 * 1:	To enable temp sensors monitor

 0 disable, 6 PECI */

 for the internal sensor, found out if diode or thermistor */

 transform the sysfs interface values into table above */

 transform diode or thermistor into internal enable */

 Unit in 0.1s */

 Unit in 0.1s */

 SETUP_TEMP_CRITICAL */

/*

 * Temp SmartFan control

 * TEMP_FAN_MAP

 * Temp channel control which pwm fan, bitfield, bit 0 indicate pwm1...

 * It's possible two or more temp channels control the same fan, w83793

 * always prefers to pick the most critical request and applies it to

 * the related Fan.

 * It's possible one fan is not in any mapping of 6 temp channels, this

 * means the fan is manual mode

 *

 * TEMP_PWM_ENABLE

 * Each temp channel has its own SmartFan mode, and temp channel

 * control fans that are set by TEMP_FAN_MAP

 * 0:	SmartFanII mode

 * 1:	Thermal Cruise Mode

 *

 * TEMP_CRUISE

 * Target temperature in thermal cruise mode, w83793 will try to turn

 * fan speed to keep the temperature of target device around this

 * temperature.

 *

 * TEMP_TOLERANCE

 * If Temp higher or lower than target with this tolerance, w83793

 * will take actions to speed up or slow down the fan to keep the

 * temperature within the tolerance range.

 +2 to transform into 2 and 3 to conform with sysfs intf */

 TEMP_TOLERANCE */

 TEMP_TOLERANCE */

 only Vcore A/B and Vtt have additional 2 bits precision */

 voltage inputs 5VDD and 5VSB needs 150mV offset */

 fix the limit values of 5VDD and 5VSB to ALARM mechanism */

 Fan6-Fan12 */

 Pwm4-Pwm8 */

 Start monitoring */

/*

 * Watchdog routines

 Set Timeout value (in Minutes) */

 Set Timeout value (in Minutes) */

 Set initial timeout */

 Enable Soft Watchdog */

 Disable Soft Watchdog */

	/*

	 * We get called from drivers/char/misc.c with misc_mtx hold, and we

	 * call misc_register() from  w83793_probe() with watchdog_data_mutex

	 * hold, as misc_register() takes the misc_mtx lock, this is a possible

	 * deadlock, so we use mutex_trylock here.

 Check, if device is already open */

	/*

	 * Increase data reference counter (if not already done).

	 * Note we can never not have found data, so we don't check for this

 Check, if device is already open and possibly issue error */

 Enable Soft Watchdog */

 Store pointer to data into filp's private data */

 Decrease data reference counter */

 Clear it in case it was set with a previous write */

/*

 *	Notifier for system down

 Disable each registered watchdog */

/*

 *	The WDT needs to learn about soft shutdowns in order to

 *	turn the timebomb registers off.

/*

 * Init / remove routines

 Unregister the watchdog (if registered) */

 Tell the watchdog code the client is gone */

 Reset Configuration Register to Disable Watch Dog Registers */

 Decrease data reference counter */

 Return 0 if detection is successful, -ENODEV otherwise */

 Check Winbond vendor ID */

	/*

	 * If Winbond chip, address of chip and W83793_REG_I2C_ADDR

	 * should match

 Determine the chip type now */

	/*

	 * Store client pointer in our data struct for watchdog usage

	 * (where the client is found through a data ptr instead of the

	 * otherway around)

 Initialize the chip */

	/*

	 * Only fan 1-5 has their own input pins,

	 * Pwm 1-3 has their own pins

 check the function of pins 49-56 */

 has VIDB */

 pwm 4,5 */

 fan 6 */

 fan 7 */

 fan 8 */

 check the function of pins 37-40 */

 has VIDA */

 fan 9 */

 fan 10 */

 fan 11 */

 fan 12 */

 fan 8, second location */

 fan 9, second location */

 fan 10, second location */

 fan 11, second location */

 fan 12, second location */

 check the temp1-6 mode, ignore former AMDSI selected inputs */

 Register sysfs hooks */

 Watchdog initialization */

 Register boot notifier */

	/*

	 * Enable Watchdog registers.

	 * Set Configuration Register to Enable Watch Dog Registers

	 * (Bit 2) = XXXX, X1XX.

 Set the default watchdog timeout */

 Check, if last reboot was caused by watchdog */

 Disable Soft Watchdog during initialiation */

	/*

	 * We take the data_mutex lock early so that watchdog_open() cannot

	 * run when misc_register() has completed, but we've not yet added

	 * our data to the watchdog_data_list (and set the default timeout)

 Register our watchdog part */

 Unregister hwmon device */

 Unregister sysfs hooks */

	/*

	 * They are somewhat "stable" registers, and to update them every time

	 * takes so much time, it's just not worthy. Update them in a long

	 * interval to avoid exception.

 update voltage limits */

 Update the Fan measured value and limits */

 Update the voltages measured value and limits */

/*

 * Ignore the possibility that somebody change bank outside the driver

 * Must be called with data->update_lock held, except during initialization

 read 0x0 from the chip */

 Must be called with data->update_lock held, except during initialization */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * g760a - Driver for the Global Mixed-mode Technology Inc. G760A

 *	   fan speed PWM controller chip

 *

 * Copyright (C) 2007  Herbert Valerio Riedel <hvr@gnu.org>

 *

 * Complete datasheet is available at GMT's website:

 * http://www.gmt.com.tw/product/datasheet/EDS-760A.pdf

 +/-20% off */

 below 1920rpm */

 register data is read (and cached) at most once per second */

 board specific parameters */

 default 32kHz */

 default P=2 */

 g760a register cache */

 In jiffies */

 PWM (period) count number; 0xff stops fan */

   formula: cnt = (CLK * 30)/(rpm * P) */

	u8 fan_sta; /* bit 0: set when actual fan speed more than 20%

		     *   outside requested fan speed

		     * bit 1: set when fan speed below 1920 rpm

 read/write wrappers */

/*

 * sysfs attributes

/*

 * new-style driver model code

 setup default configuration for now */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm70.c

 *

 * The LM70 is a temperature sensor chip from National Semiconductor (NS).

 * Copyright (C) 2006 Kaiwan N Billimoria <kaiwan@designergraphix.com>

 *

 * The LM70 communicates with a host processor via an SPI/Microwire Bus

 * interface. The complete datasheet is available at National's website

 * here:

 * http://www.national.com/pf/LM/LM70.html

 original NS LM70 */

 TI TMP121/TMP123 */

 NS LM71 */

 NS LM74 */

 TI TMP122/TMP124 */

 sysfs hook function */

	/*

	 * spi_read() requires a DMA-safe buffer; so we use

	 * spi_write_then_read(), transmitting 0 bytes.

	/*

	 * LM70:

	 * The "raw" temperature read into rxbuf[] is a 16-bit signed 2's

	 * complement value. Only the MSB 11 bits (1 sign + 10 temperature

	 * bits) are meaningful; the LSB 5 bits are to be discarded.

	 * See the datasheet.

	 *

	 * Further, each bit represents 0.25 degrees Celsius; so, multiply

	 * by 0.25. Also multiply by 1000 to represent in millidegrees

	 * Celsius.

	 * So it's equivalent to multiplying by 0.25 * 1000 = 250.

	 *

	 * LM74 and TMP121/TMP122/TMP123/TMP124:

	 * 13 bits of 2's complement data, discard LSB 3 bits,

	 * resolution 0.0625 degrees celsius.

	 *

	 * LM71:

	 * 14 bits of 2's complement data, discard LSB 2 bits,

	 * resolution 0.0312 degrees celsius.

 millidegrees Celsius */

----------------------------------------------------------------------*/

 signaling is SPI_MODE_0 */

 NOTE:  we assume 8-bit words, and convert to 16 bits manually */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * IBM PowerNV platform sensors for temperature/fan/voltage/power

 * Copyright (C) 2014 IBM

 Sensor suffix name from DT */

/*

 * Enumerates all the types of sensors in the POWERNV platform and does index

 * into 'struct sensor_group'

/*

 * 'compatible' string properties for sensor types as defined in old

 * PowerNV firmware (skiboot). These are ordered as 'enum sensors'.

 matches property 'sensor-type' */

 An opaque id of the firmware for each sensor */

 Total count of sensors from each group */

 Total number of sensor groups */

 Convert temperature to milli-degrees */

 Convert power to micro-watts */

	/*

	 * Core temp pretty print

			/*

			 * The digital thermal sensors are associated

			 * with a core.

	/*

	 * Membuffer pretty print

/*

 * This function translates the DT node name into the 'hwmon' attribute name.

 * IBMPOWERNV device node appear like cooling-fan#2-data, amb-temp#1-thrs etc.

 * which need to be mapped as fan2_input, temp1_max respectively before

 * populating them inside hwmon device class.

	/*

	 * Let's check if we have a newer device tree

	/*

	 * We don't use the OPAL index on newer device trees

		/*

		 * add attributes for labels, min and max

/*

 * Iterate through the device tree for each child of 'sensors' node, create

 * a sysfs attribute file, the file is named by translating the DT node name

 * to the name required by the higher 'hwmon' driver like fan1_input, temp1_max

 * etc..

		/*

		 * Newer device trees use a "sensor-data" property

		 * name for input.

		/*

		 * If we can not parse the node name, it means we are

		 * running on a newer device tree. We can just forget

		 * about the OPAL index and use a defaut value for the

		 * hwmon attribute name

			/*

			 * For the label attribute, we can reuse the

			 * "properties" of the previous "input"

			 * attribute. They are related to the same

			 * sensor.

 Create sysfs attribute data for each sensor found in the DT */

 Finally, register with hwmon */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm92 - Hardware monitoring driver

 * Copyright (C) 2005-2008  Jean Delvare <jdelvare@suse.de>

 *

 * Based on the lm90 driver, with some ideas taken from the lm_sensors

 * lm92 driver as well.

 *

 * The LM92 is a sensor chip made by National Semiconductor. It reports

 * its own temperature with a 0.0625 deg resolution and a 0.33 deg

 * accuracy. Complete datasheet can be obtained from National's website

 * at:

 *   http://www.national.com/pf/LM/LM92.html

 *

 * This driver also supports the MAX6635 sensor chip made by Maxim.

 * This chip is compatible with the LM92, but has a lesser accuracy

 * (1.0 deg). Complete datasheet can be obtained from Maxim's website

 * at:

 *   http://www.maxim-ic.com/quick_view2.cfm/qv_pk/3074

 *

 * Since the LM92 was the first chipset supported by this driver, most

 * comments will refer to this chipset, but are actually general and

 * concern all supported chipsets, unless mentioned otherwise.

 *

 * Support could easily be added for the National Semiconductor LM76

 * and Maxim MAX6633 and MAX6634 chips, which are mostly compatible

 * with the LM92.

/*

 * The LM92 and MAX6635 have 2 two-state pins for address selection,

 * resulting in 4 possible addresses.

 The LM92 registers */

 8-bit, RW */

 16-bit, RO */

 16-bit, RW */

 16-bit, RW */

 16-bit, RW */

 16-bit, RW */

 16-bit, RO, LM92 only */

/*

 * The LM92 uses signed 13-bit values with LSB = 0.0625 degree Celsius,

 * left-justified in 16-bit registers. No rounding is done, with such

 * a resolution it's just not worth it. Note that the MAX6635 doesn't

 * make use of the 4 lower bits for limits (i.e. effective resolution

 * for limits is 1 degree Celsius).

 Alarm flags are stored in the 3 LSB of the temperature register */

 Client data (each client gets its own) */

 false until following fields are valid */

 in jiffies */

 registers values */

 index with enum temp_index */

/*

 * Sysfs attributes and callback functions

/*

 * Detection and registration

 Start the conversions if needed */

 Return 0 if detection is successful, -ENODEV otherwise */

 Initialize the chipset */

/*

 * Module and driver stuff

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * adt7x10.c - Part of lm_sensors, Linux kernel modules for hardware

 *	 monitoring

 * This driver handles the ADT7410 and compatible digital temperature sensors.

 * Hartmut Knaack <knaack.h@gmx.de> 2012-07-22

 * based on lm75.c by Frodo Looijaard <frodol@dds.nl>

 * and adt7410.c from iio-staging by Sonic Zhang <sonic.zhang@analog.com>

/*

 * ADT7X10 status

/*

 * ADT7X10 config

/*

 * ADT7X10 masks

 straight from the datasheet */

 Each client has this additional data */

 true if registers valid */

 In jiffies */

	s16			temp[4];	/* Register values,

						   0 = input

						   1 = high

						   2 = low

 hysteresis offset */

 input */

 high */

 low */

 critical */

 check for new value */

 in 13 bit mode, bits 0-2 are status flags - mask them out */

	/*

	 * temperature is stored in twos complement format, in steps of

	 * 1/128°C

-----------------------------------------------------------------------*/

 sysfs attributes for hwmon */

	/*

	 * hysteresis is stored as a 4 bit offset in the device, convert it

	 * to an absolute value

 min has positive offset, others have negative */

 convert absolute hysteresis value to a 4 bit delta value */

 configure as specified */

	/*

	 * Set to 16 bit resolution, continous conversion and comparator mode.

 Register sysfs hooks */

	/*

	 * The I2C device will already have it's own 'name' attribute, but for

	 * the SPI device we need to register it. name will only be non NULL if

	 * the device doesn't register the 'name' attribute on its own.

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * nct7904.c - driver for Nuvoton NCT7904D.

 *

 * Copyright (c) 2015 Kontron

 * Author: Vadim V. Vlasov <vvlasov@dev.rtsoft.ru>

 *

 * Copyright (c) 2019 Advantech

 * Author: Amy.Shih <amy.shih@advantech.com.tw>

 *

 * Copyright (c) 2020 Advantech

 * Author: Yuechao Zhao <yuechao.zhao@advantech.com.cn>

 *

 * Supports the following chips:

 *

 * Chip        #vin  #fan  #pwm  #temp  #dts  chip ID

 * nct7904d     20    12    4     5      8    0xc5

 Any bank */

 Any bank */

 Any bank */

 Counted from 1 */

#define VSEN_MAX		21	/* VSEN1..14, 3VDD, VBAT, V3VSB,

 Counted from 1 */

 Counted from 1 */

 Counted from 1 */

 Counted from 1 */

 Bank 0 */

 Bank 0 */

 Bank 0 */

 Bank 1; 2 regs (HV/LV) per sensor */

 Bank 1; 2 regs (HV/LV) per sensor */

 Bank 1; 2 regs (HV/LV) per sensor */

 Bank 1; 2 regs (HV/LV) per sensor */

 Bank 0; SMI Status Register */

 Bank 0; SMI Status Register */

 Bank 0; SMI Status Register */

 Bank 0; SMI Status Register */

 Bank 0; SMI Status Register */

 Bank 0; 2 regs (HV/LV) per sensor */

 Bank 0; same as VSEN2_HV */

 Bank 0; 2 regs in VSEN range */

 Bank 1; 1 reg for LTD */

 Bank 1; 1 reg for LTD */

 Bank 1; 1 reg for LTD */

 Bank 1; 1 reg for LTD */

 Bank 1; 1 reg for LTD */

 Bank 1; 1 reg for LTD */

 Bank 1; 1 reg for LTD */

 Bank 1; 1 reg per sensor */

 Bank 1; 1 reg per sensor */

 Bank 1; 1 reg per sensor */

 Bank 1; 1 reg per sensor */

 Bank 1; 1 reg per sensor */

 Bank 0; 2 regs (HV/LV) per sensor */

 Bank 1; 2 regs (HV/LV) per sensor */

 Bank 1; 2 regs (HV/LV) per sensor */

 Bank 0; 2 regs (HV/LV) per sensor */

 Bank 2 */

 Bank 2; PECI Function Enable */

 Bank 2; TSI Control Register */

 Bank 3; 1 reg per channel */

 Bank 3; 1 reg per channel */

 W/O Lock Watchdog Register */

 R/O Watchdog Enable Register */

 R/O Watchdog Status Register */

 R/W Watchdog Timer Register */

 Enable soft watchdog timer */

 Disable soft watchdog timer */

 1 minute default timeout */

The timeout range is 1-255 minutes*/

 0: TR mode, 1: TD mode */

 Access functions */

 Read 1-byte register. Returns unsigned reg or -ERRNO on error. */

/*

 * Read 2-byte register. Returns register in big-endian format or

 * -ERRNO on error.

 Write 1-byte register. Returns 0 or -ERRNO on error. */

 If there is new alarm showing up */

 Needs to clean the alarm if alarm existing */

 Not used */

 0.002V scale */

 0.006V scale */

 0.002V scale */

 0.006V scale */

 0.002V scale */

 0.006V scale */

 If there is new alarm showing up */

 Needs to clean the alarm if alarm existing */

 TD */

 TR */

 TSI */

 PECI */

 0.002V scale */

 0.006V scale */

 Return 0 if detection is successful, -ENODEV otherwise */

 Determine the chip type. */

 dummy, skipped in is_visible */

/*

 * Watchdog Function

 Enable soft watchdog timer */

	/*

	 * The NCT7904 is very special in watchdog function.

	 * Its minimum unit is minutes. And wdt->timeout needs

	 * to match the actual timeout selected. So, this needs

	 * to be: wdt->timeout = timeout / 60 * 60.

	 * For example, if the user configures a timeout of

	 * 119 seconds, the actual timeout will be 60 seconds.

	 * So, wdt->timeout must then be set to 60 seconds.

	/*

	 * Note:

	 * NCT7904 does not support refreshing WDT_TIMER_REG register when

	 * the watchdog is active. Please disable watchdog before feeding

	 * the watchdog and enable it again.

 Disable soft watchdog timer */

 feed watchdog */

 Enable soft watchdog timer */

 Setup sensor groups. */

 FANIN attributes */

	/*

	 * VSEN attributes

	 *

	 * Note: voltage sensors overlap with external temperature

	 * sensors. So, if we ever decide to support the latter

	 * we will have to adjust 'vsen_mask' accordingly.

 CPU_TEMP attributes */

 TR1 */

 TR2 */

 TR3 */

 TR4 */

 LTD */

 Multi-Function detecting for Volt and TR/TD */

 Reserved */

 PECI */

 Enable DTS & PECI */

 Enable DTS & TSI */

 Check DTS enable status */

 Read all of SMI status register to clear alarms */

 Watchdog initialization */

 Set default timeout */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * abituguru.c Copyright (c) 2005-2006 Hans de Goede <hdegoede@redhat.com>

/*

 * This driver supports the sensor part of the first and second revision of

 * the custom Abit uGuru chip found on Abit uGuru motherboards. Note: because

 * of lack of specs the CPU/RAM voltage & frequency control is not supported!

 Banks */

 1x 3 bytes */

 16x volt and temp */

 3x 5 bytes */

 fans */

 max nr of sensors in bank1, a bank1 sensor can be in, temp or nc */

/*

 * Warning if you increase one of the 2 MAX defines below to 10 or higher you

 * should adjust the belonging _NAMES_LENGTH macro for the 2 digit number!

 max nr of sensors in bank2, currently mb's with max 6 fans are known */

 max nr of pwm outputs, currently mb's with max 5 pwm outputs are known */

 uGuru sensor bank 1 flags */			     
  temp over warn */

  volt over max */

  volt under min */

 temp is over warn */

 volt is over max */

 volt is under min */

 uGuru sensor bank 2 flags */			     
   fan under min */

 uGuru sensor bank common flags */

 beep if alarm */

 shutdown if alarm */

 uGuru fan PWM (speed control) flags */

 enable speed control */

 Values used for conversion */

 RPM */

 Bank1 sensor types */

/*

 * In many cases we need to wait for the uGuru to reach a certain status, most

 * of the time it will reach this status within 30 - 90 ISA reads, and thus we

 * can best busy wait. This define gives the total amount of reads to try.

/*

 * However sometimes older versions of the uGuru seem to be distracted and they

 * do not respond for a long time. To handle this we sleep before each of the

 * last ABIT_UGURU_WAIT_TIMEOUT_SLEEP tries.

/*

 * Normally all expected status in abituguru_ready, are reported after the

 * first read, but sometimes not and we need to poll.

 Maximum 3 retries on timedout reads/writes, delay 200 ms before retrying */

 Maximum 2 timeouts in abituguru_update_device, iow 3 in a row is an error */

 utility macros */

 Macros to help calculate the sysfs_names array length */

/*

 * sum of strlen of: in??_input\0, in??_{min,max}\0, in??_{min,max}_alarm\0,

 * in??_{min,max}_alarm_enable\0, in??_beep\0, in??_shutdown\0

/*

 * sum of strlen of: temp??_input\0, temp??_max\0, temp??_crit\0,

 * temp??_alarm\0, temp??_alarm_enable\0, temp??_beep\0, temp??_shutdown\0

/*

 * sum of strlen of: fan?_input\0, fan?_min\0, fan?_alarm\0,

 * fan?_alarm_enable\0, fan?_beep\0, fan?_shutdown\0

/*

 * sum of strlen of: pwm?_enable\0, pwm?_auto_channels_temp\0,

 * pwm?_auto_point{1,2}_pwm\0, pwm?_auto_point{1,2}_temp\0

 IN_NAMES_LENGTH > TEMP_NAMES_LENGTH so assume all bank1 sensors are in */

/*

 * All the macros below are named identical to the oguru and oguru2 programs

 * reverse engineered by Olle Sandberg, hence the names might not be 100%

 * logical. I could come up with better names, but I prefer keeping the names

 * identical so that this driver can be compared with his work more easily.

 Two i/o-ports are used by uGuru */

 Used to tell uGuru what to read and to read the actual data */

 Mostly used to check if uGuru is busy */

 uGuru status' */

 Ready to be written */

 Ready to be read */

 More input */

 Ready to be written */

 Constants */

 in (Volt) sensors go up to 3494 mV, temp to 255000 millidegrees Celsius */

/*

 * Min / Max allowed values for sensor2 (fan) alarm threshold, these values

 * correspond to 300-3000 RPM

/*

 * Register 0 is a bitfield, 1 and 2 are pwm settings (255 = 100%), 3 and 4

 * are temperature trip points.

/*

 * Min / Max allowed values for pwm_settings. Note: pwm1 (CPU fan) is a

 * special case the minimum allowed pwm% setting for this is 30% (77) on

 * some MB's this special case is handled in the code!

 Insmod parameters */

 Default verbose is 2, since this driver is still in the testing phase */

/*

 * For the Abit uGuru, we need to keep some data in memory.

 * The structure is dynamically allocated, at the same time when a new

 * abituguru device is allocated.

 hwmon registered device */

 protect access to data and uGuru */

 In jiffies */

 uguru base address */

 is the uguru in ready state? */

	unsigned char update_timeouts;	/*

					 * number of update timeouts since last

					 * successful update

	/*

	 * The sysfs attr and their names are generated automatically, for bank1

	 * we cannot use a predefined array because we don't know beforehand

	 * of a sensor is a volt or a temp sensor, for bank2 and the pwms its

	 * easier todo things the same way.  For in sensors we have 9 (temp 7)

	 * sysfs entries per sensor, for bank2 and pwms 6.

 Buffer to store the dynamically generated sysfs names */

 Bank 1 data */

 number of and addresses of [0] in, [1] temp sensors */

	/*

	 * This array holds 3 entries per sensor for the bank 1 sensor settings

	 * (flags, min, max for voltage / flags, warn, shutdown for temp).

	/*

	 * Maximum value for each sensor used for scaling in mV/millidegrees

	 * Celsius.

 Bank 2 data, ABIT_UGURU_MAX_BANK2_SENSORS entries for bank2 */

 actual number of bank2 sensors found */

 flags, min */

 Alarms 2 bytes for bank1, 1 byte for bank2 */

 Fan PWM (speed control) 5 bytes per PWM */

 actual number of pwms found */

 wait till the uguru is in the specified state */

		/*

		 * sleep a bit before our last few tries, see the comment on

		 * this where ABIT_UGURU_WAIT_TIMEOUT_SLEEP is defined.

 Put the uguru in ready for input state */

 Reset? / Prepare for next read/write cycle */

 Wait till the uguru is ready */

 Cmd port MUST be read now and should contain 0xAC */

	/*

	 * After this the ABIT_UGURU_DATA port should contain

	 * ABIT_UGURU_STATUS_INPUT

/*

 * Send the bank and then sensor address to the uGuru for the next read/write

 * cycle. This function gets called as the first part of a read/write by

 * abituguru_read and abituguru_write. This function should never be

 * called by any other function.

	/*

	 * assume the caller does error handling itself if it has not requested

	 * any retries, and thus be quiet.

		/*

		 * Make sure the uguru is ready and then send the bank address,

		 * after this the uguru is no longer "ready".

		/*

		 * Wait till the uguru is ABIT_UGURU_STATUS_INPUT state again

		 * and send the sensor addr

/*

 * Read count bytes from sensor sensor_addr in bank bank_addr and store the

 * result in buf, retry the send address part of the read retries times.

 Send the address */

 And read the data */

 Last put the chip back in ready state */

/*

 * Write count bytes from buf to sensor sensor_addr in bank bank_addr, the send

 * address part of the write is always retried ABIT_UGURU_MAX_RETRIES times.

	/*

	 * We use the ready timeout as we have to wait for 0xAC just like the

	 * ready function

 Send the address */

 And write the data */

	/*

	 * Now we need to wait till the chip is ready to be read again,

	 * so that we can read 0xAC as confirmation that our write has

	 * succeeded.

 Cmd port MUST be read now and should contain 0xAC */

 Last put the chip back in ready state */

/*

 * Detect sensor type. Temp and Volt sensors are enabled with

 * different masks and will ignore enable masks not meant for them.

 * This enables us to test what kind of sensor we're dealing with.

 * By setting the alarm thresholds so that we will always get an

 * alarm for sensor type X and then enabling the sensor as sensor type

 * X, if we then get an alarm it is a sensor of type X.

 error is the most common used retval :| */

 If overriden by the user return the user selected type */

 First read the sensor and the current settings */

 Test val is sane / usable for sensor type detection. */

		/*

		 * assume no sensor is there for sensors for which we can't

		 * determine the sensor type because their reading is too close

		 * to their limits, this usually means no sensor is there.

	/*

	 * Volt sensor test, enable volt low alarm, set min value ridiculously

	 * high, or vica versa if the reading is very high. If its a volt

	 * sensor this should always give us an alarm.

	/*

	 * Now we need 20 ms to give the uguru time to read the sensors

	 * and raise a voltage alarm

 Check for alarm and check the alarm is a volt low alarm. */

	/*

	 * Temp sensor test, enable sensor as a temp sensor, set beep value

	 * ridiculously low (but not too low, otherwise uguru ignores it).

	 * If its a temp sensor this should always give us an alarm.

	/*

	 * Now we need 50 ms to give the uguru time to read the sensors

	 * and raise a temp alarm

 Check for alarm and check the alarm is a temp high alarm. */

	/*

	 * Restore original settings, failing here is really BAD, it has been

	 * reported that some BIOS-es hang when entering the uGuru menu with

	 * invalid settings present in the uGuru, so we try this 3 times.

/*

 * These functions try to find out how many sensors there are in bank2 and how

 * many pwms there are. The purpose of this is to make sure that we don't give

 * the user the possibility to change settings for non-existent sensors / pwm.

 * The uGuru will happily read / write whatever memory happens to be after the

 * memory storing the PWM settings when reading/writing to a PWM which is not

 * there. Notice even if we detect a PWM which doesn't exist we normally won't

 * write to it, unless the user tries to change the settings.

 *

 * Although the uGuru allows reading (settings) from non existing bank2

 * sensors, my version of the uGuru does seem to stop writing to them, the

 * write function above aborts in this case with:

 * "CMD reg does not hold 0xAC after write"

 *

 * Notice these 2 tests are non destructive iow read-only tests, otherwise

 * they would defeat their purpose. Although for the bank2_sensors detection a

 * read/write test would be feasible because of the reaction above, I've

 * however opted to stay on the safe side.

		/*

		 * 0x89 are the known used bits:

		 * -0x80 enable shutdown

		 * -0x08 enable beep

		 * -0x01 enable alarm

		 * All other bits should be 0, but on some motherboards

		 * 0x40 (bit 6) is also high for some of the fans??

 check if the threshold is within the allowed range */

		/*

		 * 0x80 is the enable bit and the low

		 * nibble is which temp sensor to use,

		 * the other bits should be 0

		/*

		 * the low nibble must correspond to one of the temp sensors

		 * we've found

 check if all other settings are within the allowed range */

 special case pwm1 min pwm% */

 check that min temp < max temp and min pwm < max pwm */

/*

 * Following are the sysfs callback functions. These functions expect:

 * sensor_device_attribute_2->index:   sensor address/offset in the bank

 * sensor_device_attribute_2->nr:      register offset, bitmask or NA.

 this check can be done before taking the lock */

	/*

	 * See if the alarm bit for this sensor is set, and if the

	 * alarm matches the type of alarm we're looking for (for volt

	 * it can be either low or high). The type is stored in a few

	 * readonly bits in the settings part of the relevant sensor.

	 * The bitmask of the type is passed to us in attr->nr.

 Fan PWM (speed control) */

 special case pwm1 min pwm% */

 this check can be done before taking the lock */

 this check needs to be done after taking the lock */

	/*

	 * We need to walk to the temp sensor addresses to find what

	 * the userspace id of the configured temp sensor is.

 Sysfs attr templates, the real entries are generated automatically. */

	/*

	 * El weirdo probe order, to keep the sysfs order identical to the

	 * BIOS and window-appliction listing order.

 See if the uGuru is ready */

	/*

	 * Completely read the uGuru this has 2 purposes:

	 * - testread / see if one really is there.

	 * - make an in memory copy of all the uguru settings for future use.

	/*

	 * Note: We don't know how many bank2 sensors / pwms there really are,

	 * but in order to "detect" this we need to read the maximum amount

	 * anyways. If we read sensors/pwms not there we'll just read crap

	 * this can't hurt. We need the detection because we don't want

	 * unwanted writes, which will hurt!

 Detect sensor types and fill the sysfs attr for bank1 */

 res 1 (temp) sensors have 7 sysfs entries, 0 (in) 9 */

 Detect number of sensors and fill the sysfs attr for bank2 (fans) */

 Detect number of sensors and fill the sysfs attr for pwms */

 Fail safe check, this should never happen! */

 Register sysfs hooks */

 success */

 fake a complete successful read if no update necessary. */

 success! */

 handle timeout condition */

 No overflow please */

 Just a timeout, fake a successful read */

 On success set last_updated */

	/*

	 * make sure all communications with the uguru are done and no new

	 * ones are started

 See if the uGuru is still ready */

 CONFIG_PM */

	/*

	 * See if there is an uguru there. After a reboot uGuru will hold 0x00

	 * at DATA and 0xAC, when this driver has already been loaded once

	 * DATA will hold 0x08. For most uGuru's CMD will hold 0xAC in either

	 * scenario but some will hold 0x00.

	 * Some uGuru's initially hold 0x09 at DATA and will only hold 0x08

	 * after reading CMD first, so CMD must be read first!

 No uGuru found */

 safety check, refuse to load on non Abit motherboards */

www.abit.com.tw/")))

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Linear Technology LTC2990 power monitor

 *

 * Copyright (C) 2014 Topic Embedded Products

 * Author: Mike Looijmans <mike.looijmans@topic.nl>

 Enabled measurements for mode bits 2..0 */

 Enabled measurements for mode bits 4..3 */

 Return the converted value from the given register in uV or mC */

 temp, 0.0625 degrees/LSB */

 Vx-Vy, 19.42uV/LSB */

 Vcc, 305.18uV/LSB, 2.5V offset */

 Vx, 305.18uV/LSB */

 won't happen, keep compiler happy */

 Setup continuous mode */

 Trigger once to start continuous conversion */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * k8temp.c - Linux kernel module for hardware monitoring

 *

 * Copyright (C) 2006 Rudolf Marek <r.marek@assembler.cz>

 *

 * Inspired from the w83785 and amd756 drivers.

 registers values */

 sensor presence bits - SEL_CORE, SEL_PLACE */

 meaning of SEL_CORE is inverted */

	/*

	 * Differentiate between AM2 and ASB1.

	 * See "Constructing the processor Name String" in "Revision

	 * Guide for AMD NPT Family 0Fh Processors" (33610).

 Single core */

 Dual core */

 feature available since SH-C0, exclude older revisions */

	/*

	 * AMD NPT family 0fh, i.e. RevF and RevG:

	 * meaning of SEL_CORE bit is inverted

	/*

	 * RevG desktop CPUs (i.e. no socket S1G1 or ASB1 parts) need

	 * additional offset, otherwise reported temperature is below

	 * ambient temperature

 Select sensor 0, core0 */

 now we know if we can change core and/or sensor */

 Select sensor 1, core0 */

 prepare for next selection */

 if temp is 0 -49C is unlikely */

 Select sensor 0, core1 */

 if temp is 0 -49C is unlikely */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * fschmd.c

 *

 * Copyright (C) 2007 - 2009 Hans de Goede <hdegoede@redhat.com>

/*

 *  Merged Fujitsu Siemens hwmon driver, supporting the Poseidon, Hermes,

 *  Scylla, Heracles, Heimdall, Hades and Syleus chips

 *

 *  Based on the original 2.4 fscscy, 2.6 fscpos, 2.6 fscher and 2.6

 *  (candidate) fschmd drivers:

 *  Copyright (C) 2006 Thilo Cestonaro

 *			<thilo.cestonaro.external@fujitsu-siemens.com>

 *  Copyright (C) 2004, 2005 Stefan Ott <stefan@desire.ch>

 *  Copyright (C) 2003, 2004 Reinhard Nissl <rnissl@gmx.de>

 *  Copyright (c) 2001 Martin Knoblauch <mkn@teraport.de, knobi@knobisoft.de>

 *  Copyright (C) 2000 Hermann Jung <hej@odn.de>

 Addresses to scan */

 Insmod parameters */

/*

 * The FSCHMD registers and other defines

 chip identification */

 global control and status */

 watchdog */

 the same as trigger */

 voltages, weird order is to keep the same order as the old drivers */

 pos */

 her */

 scy */

 hrc */

 hmd */

 hds */

 syl */

/*

 * minimum pwm at which the fan is driven (pwm can be increased depending on

 * the temp. Notice that for the scy some fans share there minimum speed.

 * Also notice that with the scy the sensor order is different than with the

 * other chips, this order was in the 2.4 driver and kept for consistency.

 pos */

 her */

 scy */

 hrc */

 hmd */

 hds */

 syl */

 actual fan speed */

 pos */

 her */

 scy */

 hrc */

 hmd */

 hds */

 syl */

 fan status registers */

 pos */

 her */

 scy */

 hrc */

 hmd */

 hds */

 syl */

 fan ripple / divider registers */

 pos */

 her */

 scy */

 hrc */

 hmd */

 hds */

 syl */

 Fan status register bitmasks */

 called fault by FSC! */

 actual temperature registers */

 pos */

 her */

 scy */

 hrc */

 hmd */

 hds */

 syl */

 temperature state registers */

 pos */

 her */

 scy */

 hrc */

 hmd */

 hds */

 syl */

/*

 * temperature high limit registers, FSC does not document these. Proven to be

 * there with field testing on the fscher and fschrc, already supported / used

 * in the fscscy 2.4 driver. FSC has confirmed that the fschmd has registers

 * at these addresses, but doesn't want to confirm they are the same as with

 * the fscher??

 pos */

 her */

 scy */

 hrc */

 hmd */

 hds */

 syl */

/*

 * These were found through experimenting with an fscher, currently they are

 * not used, but we keep them around for future reference.

 * On the fscsyl AUTOP1 lives at 0x#c (so 0x5c for fan1, 0x6c for fan2, etc),

 * AUTOP2 lives at 0x#e, and 0x#1 is a bitmask defining which temps influence

 * the fan speed.

 * static const u8 FSCHER_REG_TEMP_AUTOP1[] =	{ 0x73, 0x83, 0x93 };

 * static const u8 FSCHER_REG_TEMP_AUTOP2[] =	{ 0x75, 0x85, 0x95 };

 temp status register bitmasks */

 there only really is an alarm if the sensor is working and alert == 1 */

/*

 * Functions declarations

/*

 * Driver data (common to all clients)

/*

 * Client data (each client gets its own)

 member of the watchdog_data_list */

 must be unique to avoid sysfs conflict */

 false until following fields are valid */

 in jiffies */

 register values */

 chip revision */

 global control register */

 watchdog control register */

 watchdog status register */

 watchdog counter preset on trigger val */

 voltage */

 temperature */

 status of sensor */

 high temp limit, notice: undocumented! */

 fans revolutions per second */

 fan status */

 fan min value for rps */

 divider for rps */

/*

 * Global variables to hold information read from special DMI tables, which are

 * available on FSC machines with an fscher or later chip. There is no need to

 * protect these with a lock as they are only modified from our attach function

 * which always gets called with the i2c-core lock held and never accessed

 * before the attach function is done with them.

/*

 * Somewhat ugly :( global data pointer list with all fschmd devices, so that

 * we can find our device data as when using misc_register there is no other

 * method to get to ones device data from the open fop.

 Note this lock not only protect list access, but also data.kref access */

/*

 * Release our data struct when we're detached from the i2c client *and* all

 * references to our watchdog device are released

/*

 * Sysfs attr show / store functions

 bit 0 set means sensor working ok, so no fault! */

 bits 2..7 reserved => mask with 3 */

 supported values: 2, 4, 8 */

 bits 2..7 reserved => mask with 0x03 */

 0 = allow turning off (except on the syl), 1-255 = 50-100% */

 reg: 0 = allow turning off (except on the syl), 1-255 = 50-100% */

/*

 * The FSC hwmon family has the ability to force an attached alert led to flash

 * from software, we export this as an alert_led sysfs attr

/*

 * Watchdog routines

 0-x array index -> 1-x module param */

 2 second or 60 second resolution? */

 Write new timeout value */

 Write new control register, do not trigger! */

	/*

	 * Don't store the stop flag in our watchdog control register copy, as

	 * its a write only bit (read always returns 0)

	/*

	 * We get called from drivers/char/misc.c with misc_mtx hold, and we

	 * call misc_register() from fschmd_probe() with watchdog_data_mutex

	 * hold, as misc_register() takes the misc_mtx lock, this is a possible

	 * deadlock, so we use mutex_trylock here.

 Note we can never not have found data, so we don't check for this */

 Start the watchdog */

 Clear it in case it was set with a previous write */

/*

 * Detect, register, unregister and update device functions

/*

 * DMI decode routine to read voltage scaling factors from special DMI tables,

 * which are available on FSC machines with an fscher or later chip.

	/*

	 * dmi code ugliness, we get passed the address of the contents of

	 * a complete DMI record, but in the form of a dmi_header pointer, in

	 * reality this address holds header->length bytes of which the header

	 * are the first 4 bytes

 We are looking for OEM-specific type 185 */

	/*

	 * we are looking for what Siemens calls "subtype" 19, the subtype

	 * is stored in byte 5 of the dmi block

	/*

	 * After the subtype comes 1 unknown byte and then blocks of 5 bytes,

	 * consisting of what Siemens calls an "Entity" number, followed by

	 * 2 16-bit words in LSB first order

 entity 1 - 3: voltage multiplier and offset */

 Our in sensors order and the DMI order differ */

 Check for twice the same entity */

 entity 7: reference voltage */

 Check for twice the same entity */

		/*

		 * According to the docs there should be separate dmi entries

		 * for the mult's and offsets of in3-5 of the syl, but on

		 * my test machine these are not present

 Detect & Identify the chip */

	/*

	 * Store client pointer in our data struct for watchdog usage

	 * (where the client is found through a data ptr instead of the

	 * otherway around)

		/*

		 * The Poseidon has hardwired temp limits, fill these

		 * in for the alarm resetting code

 Read the special DMI table for fscher and newer chips */

 Read in some never changing registers */

 Poseidon doesn't have TEMP_LIMIT registers */

 Poseidon doesn't have a FAN_MIN register for its 3rd fan */

	/*

	 * We take the data_mutex lock early so that watchdog_open() cannot

	 * run when misc_register() has completed, but we've not yet added

	 * our data to the watchdog_data_list (and set the default timeout)

 Register our watchdog part */

 will also free data for us */

 Unregister the watchdog (if registered) */

 Tell the watchdog code the client is gone */

	/*

	 * Check if registered in case we're called from fschmd_detect

	 * to cleanup after an error

 The fscpos doesn't have TEMP_LIMIT registers */

			/*

			 * reset alarm if the alarm condition is gone,

			 * the chip doesn't do this itself

 The fscpos third fan doesn't have a fan_min */

 reset fan status if speed is back to > 0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Fan Control HDL CORE driver

 *

 * Copyright 2019 Analog Devices Inc.

 register map */

 IRQ sources */

 pulses per revolution */

/*

 * The core calculates the temperature as:

 *	T = /raw * 509.3140064 / 65535) - 280.2308787

	/*

	 * PWM_PERIOD is a RO register set by the core. It should never be 0.

	 * For now we are trusting the HW...

 should we return error, EAGAIN maybe? */

	/*

	 * The tacho period should be:

	 *      TACH = 60/(ppr * rpm), where rpm is revolutions per second

	 *      and ppr is pulses per revolution.

	 * Given the tacho period, we can multiply it by the input clock

	 * so that we know how many clocks we need to have this period.

	 * From this, we can derive the RPM value.

		/*

		 * The formula for the temperature is:

		 *      T = (ADC * 501.3743 / 2^bits) - 273.6777

		 * It's multiplied by 1000 to have millidegrees as

		 * specified by the hwmon sysfs interface.

 clear it now */

/*

 * This core has two main ways of changing the PWM duty cycle. It is done,

 * either by a request from userspace (writing on pwm1_input) or by the

 * core itself. When the change is done by the core, it will use predefined

 * parameters to evaluate the tach signal and, on that case we cannot set them.

 * On the other hand, when the request is done by the user, with some arbitrary

 * value that the core does not now about, we have to provide the tach

 * parameters so that, the core can evaluate the signal. On the IRQ handler we

 * distinguish this by using the ADI_IRQ_SRC_TEMP_INCREASE interrupt. This tell

 * us that the CORE requested a new duty cycle. After this, there is 5s delay

 * on which the core waits for the fan rotation speed to stabilize. After this

 * we get ADI_IRQ_SRC_PWM_CHANGED irq where we will decide if we need to set

 * the tach parameters or not on the next tach measurement cycle (corresponding

 * already to the ney duty cycle) based on the %ctl->hw_pwm_req flag.

 hardware requested a new pwm */

		/*

		 * if the pwm changes on behalf of software,

		 * we need to provide new tacho parameters to the core.

		 * Wait for the next measurement for that...

 get 25% tolerance */

 set new tacho parameters */

 clear all interrupts */

 get fan pulses per revolution */

 1, 2 and 4 are the typical and accepted values */

	/*

	 * Enable all IRQs

 bring the device out of reset */

 temperature threshold below which PWM should be 0% */

 temperature threshold above which PWM should be 25% */

 temperature threshold below which PWM should be 25% */

 temperature threshold above which PWM should be 50% */

 temperature threshold below which PWM should be 50% */

 temperature threshold above which PWM should be 75% */

 temperature threshold below which PWM should be 75% */

 temperature threshold above which PWM should be 100% */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ds1621.c - Part of lm_sensors, Linux kernel modules for hardware

 *	      monitoring

 * Christian W. Zuckschwerdt  <zany@triq.net>  2000-11-23

 * based on lm75.c by Frodo Looijaard <frodol@dds.nl>

 * Ported to Linux 2.6 by Aurelien Jarno <aurelien@aurel32.net> with

 * the help of Jean Delvare <jdelvare@suse.de>

 *

 * The DS1621 device is a digital temperature/thermometer with 9-bit

 * resolution, a thermal alarm output (Tout), and user-defined minimum

 * and maximum temperature thresholds (TH and TL).

 *

 * The DS1625, DS1631, DS1721, and DS1731 are pin compatible with the DS1621

 * and similar in operation, with slight variations as noted in the device

 * datasheets (please refer to www.maximintegrated.com for specific

 * device information).

 *

 * Since the DS1621 was the first chipset supported by this driver,

 * most comments will refer to this chipset, but are actually general

 * and concern all supported chipsets, unless mentioned otherwise.

 Supported devices */

 Insmod parameters */

/*

 * The Configuration/Status register

 *

 * - DS1621:

 *   7    6    5    4    3    2    1    0

 * |Done|THF |TLF |NVB | X  | X  |POL |1SHOT|

 *

 * - DS1625:

 *   7    6    5    4    3    2    1    0

 * |Done|THF |TLF |NVB | 1  | 0  |POL |1SHOT|

 *

 * - DS1631, DS1731:

 *   7    6    5    4    3    2    1    0

 * |Done|THF |TLF |NVB | R1 | R0 |POL |1SHOT|

 *

 * - DS1721:

 *   7    6    5    4    3    2    1    0

 * |Done| X  | X  | U  | R1 | R0 |POL |1SHOT|

 *

 * Where:

 * - 'X' is Reserved

 * - 'U' is Undefined

 ds1721 conversion rates: {C/LSB, time(ms), resolution bit setting} */

  9-bits (0.5,  93.75, RES[0..1] = 0 */

 10-bits (0.25, 187.5, RES[0..1] = 1 */

 11-bits (0.125,  375, RES[0..1] = 2 */

 12-bits (0.0625, 750, RES[0..1] = 3 */

 The DS1621 temperature registers */

 input, word, RO */

 min, word, RW */

 max, word, RW */

 byte, RW */

 no data */

 no data */

 no data */

 The DS1621 configuration register */

 Conversions */

 Each client has this additional data */

 true if following fields are valid */

 In jiffies */

 device type */

 Register values, word */

 Register encoding, combined */

	u8 zbits;			/* Resolution encoded as number of

 Conversion rate in milliseconds */

/*

 * TEMP: 0.001C/bit (-55C to +125C)

 * REG:

 *  - 1621, 1625: 0.5C/bit, 7 zero-bits

 *  - 1631, 1721, 1731: 0.0625C/bit, 4 zero-bits

 switch to continuous conversion mode */

 setup output polarity */

 start conversion */

 reset alarms if necessary */

 input > min */

 input < max */

 Convert rate into resolution bits */

 shhh, we're hiding update_interval */

 Initialize the DS1621 chip */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-only

/* Hwmon client for industrial I/O devices

 *

 * Copyright (c) 2011 Jonathan Cameron

/**

 * struct iio_hwmon_state - device instance state

 * @channels:		filled with array of channels from iio

 * @num_channels:	number of channels in channels (saves counting twice)

 * @attr_group:		the group of attributes

 * @groups:		null terminated array of attribute groups

 * @attrs:		null terminated array of attribute pointers.

/*

 * Assumes that IIO and hwmon operate in the same base units.

 * This is supposed to be true, but needs verification for

 * new channel types.

 mili-Watts to micro-Watts conversion */

 count how many attributes we have */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * A hwmon driver for the IBM PowerExecutive temperature/power sensors

 * Copyright (C) 2007 IBM

 *

 * Author: Darrick J. Wong <darrick.wong@oracle.com>

 In jiffies */

 Create attributes */

 Create IPMI messaging interface user */

 Initialize message */

 Does this BMC support PowerExecutive? */

 Register the BMC as a HWMON class device */

 finally add the new bmc data to the bmc data list */

 Now go find all the sensors */

 SPDX-License-Identifier: GPL-2.0

/*

 * Synaptics AS370 SoC Hardware Monitoring Driver

 *

 * Copyright (C) 2018 Synaptics Incorporated

 * Author: Jisheng Zhang <jszhang@kernel.org>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Linear Technology LTC4151 High Voltage I2C Current

 * and Voltage Monitor

 *

 * Copyright (C) 2011 AppearTV AS

 *

 * Derived from:

 *

 *  Driver for Linear Technology LTC4261 I2C Negative Voltage Hot

 *  Swap Controller

 *  Copyright (C) 2010 Ericsson AB.

 *

 * Datasheet: http://www.linear.com/docs/Datasheet/4151fc.pdf

 chip registers */

 in jiffies */

 in micro ohms */

 Registers */

	/*

	 * The chip's A/D updates 6 times per second

	 * (Conversion Rate 6 - 9 Hz)

 Read all registers */

 Return the voltage from the given register in mV */

 500uV resolution. Convert to mV. */

		/*

		 * 20uV resolution. Convert to current as measured with

		 * a given sense resistor, in mA.

 25 mV per increment */

 If we get here, the developer messed up */

/*

 * Input voltages.

 Currents (via sense resistor) */

/*

 * Finally, construct an array of pointers to members of the above objects,

 * as required for sysfs_create_group()

 1 mOhm if not set via DT */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * asb100.c - Part of lm_sensors, Linux kernel modules for hardware

 *	      monitoring

 *

 * Copyright (C) 2004 Mark M. Hoffman <mhoffman@lightlink.com>

 *

 * (derived from w83781d.c)

 *

 * Copyright (C) 1998 - 2003  Frodo Looijaard <frodol@dds.nl>,

 *			      Philip Edelbrock <phil@netroedge.com>, and

 *			      Mark Studebaker <mdsxyz123@yahoo.com>

/*

 * This driver supports the hardware sensor chips: Asus ASB100 and

 * ASB100-A "BACH".

 *

 * ASB100-A supports pwm1, while plain ASB100 does not.  There is no known

 * way for the driver to tell which one is there.

 *

 * Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA

 * asb100	7	3	1	4	0x31	0x0694	yes	no

 I2C addresses to scan */

 Voltage IN registers 0-6 */

 FAN IN registers 1-3 */

 TEMPERATURE registers 1-4 */

 bit 7 -> enable, bits 0-3 -> duty cycle */

/*

 * CONVERSIONS

 * Rounding and limit checking is only done on the TO_REG variants.

 These constants are a guess, consistent w/ w83781d */

/*

 * IN: 1/1000 V (0V to 4.08V)

 * REG: 16mV/bit

 These constants are a guess, consistent w/ w83781d */

/*

 * TEMP: 0.001C/bit (-128C to +127C)

 * REG: 1C/bit, two's complement

/*

 * PWM: 0 - 255 per sensors documentation

 * REG: (6.25% duty cycle per bit)

/*

 * FAN DIV: 1, 2, 4, or 8 (defaults to 2)

 * REG: 0, 1, 2, or 3 (respectively) (defaults to 1)

/*

 * For each registered client, we need to keep some data in memory. That

 * data is pointed to by client->data. The structure itself is

 * dynamically allocated, at the same time the client itself is allocated.

 In jiffies */

 array of 2 pointers to subclients */

 true if following fields are valid */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value (0 and 3 are u8 only) */

 Register value (0 and 3 are u8 only) */

 Register value (0 and 3 are u8 only) */

 Register encoding, right justified */

 Register encoding */

 Register encoding, combined */

 Register encoding, combined */

 7 Voltages */

 3 Fans */

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan divisor.  This follows the principle of

 * least surprise; the user doesn't expect the fan minimum to change just

 * because the divisor changed.

 fan 1 */

 fan 2 */

 fan 3 */

 4 Temp. Sensors */

 VID */

 VRM */

 Alarms */

 1 PWM */

 keep the enable bit */

 keep the duty cycle bits */

 Undo inits in case of errors */

 Return 0 if detection is successful, -ENODEV otherwise */

 If we're in bank 0 */

 Check for ASB100 ID (low byte) */

 Check for ASB100 ID (high byte ) */

 Put it now into bank 0 and Vendor ID High Byte */

 Determine the chip type. */

 Attach secondary lm75 clients */

 Initialize the chip */

 A few vars need to be filled upon startup */

 Register sysfs hooks */

/*

 * The SMBus locks itself, usually, but nothing may access the chip between

 * bank switches.

 switch banks */

 switch to subclient */

 convert from ISA to LM75 I2C addresses */

 TEMP */

 CONFIG */

 HYST */

 MAX */

 switch banks */

 switch to subclient */

 convert from ISA to LM75 I2C addresses */

 CONFIG */

 HYST */

 MAX */

 Start monitoring */

 7 voltage inputs */

 3 fan inputs */

 4 temperature inputs */

 VID and fan divisors */

 PWM */

 alarms */

 SPDX-License-Identifier: GPL-2.0-or-later

/***************************************************************************

 *   Copyright (C) 2006 by Hans Edgington <hans@edgington.nl>              *

 *   Copyright (C) 2007-2011 Hans de Goede <hdegoede@redhat.com>           *

 *                                                                         *

 Hardware monitor logical device */

 Hardware monitor logical device */

 Key to enable Super-I/O */

 Key to disable Super-I/O */

 Logical device select */

 Device ID (2 bytes) */

 Device revision */

 Fintek ID (2 bytes) */

 Logical device enable */

 Logical device address (2 bytes) */

 Manufacturers ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 f7188x only */

 f7188x only */

 f7188x only */

 F81866 only */

 F81866 only */

 F81866 only */

 Lowest detectable fanspeed */

 Both f71869f and f71869e, reg. compatible and same id */

 f81801u too, same id */

 +1 fan which is monitor + simple pwm only */

 +1 fan which is monitor only */

 Super-I/O Function prototypes */

 temp numbering start (0 or 1) */

 true if following fields are valid */

 In jiffies */

 In jiffies */

 Register Values */

	/*

	 * Note: all models have max 3 temperature channels, but on some

	 * they are addressed as 0-2 and on others as 1-3, so for coding

	 * convenience we reserve space for 4 channels

 2 hysts stored per reg */

 Sysfs in */

 Sysfs Fan */

 Sysfs Temp */

 PWM and Auto point control */

 Sysfs misc */

/*

 * Temp attr for the f71858fg, the f71858fg is special as it has its

 * temperature indexes start at 0 (the others start at 1)

 Temp attr for the standard models */

	/*

	 * Should really be temp1_max_alarm, but older versions did not handle

	 * the max and crit alarms separately and lm_sensors v2 depends on the

	 * presence of temp#_alarm files. The same goes for temp2/3 _alarm.

 Should be temp2_max_alarm, see temp1_alarm note */

 Should be temp3_max_alarm, see temp1_alarm note */

 Temp attr for models which can beep on temp alarm */

/*

 * Temp attr for the f8000

 * Note on the f8000 temp_ovt (crit) is used as max, and temp_high (max)

 * is used as hysteresis value to clear alarms

 * Also like the f71858fg its temperature indexes start at 0

 in attr for all models */

 For models with in1 alarm capability */

 Fan / PWM attr common to all models */

 Attr for the third fan of the f71808a, which only has manual pwm */

 Attr for models which can beep on Fan alarm */

/*

 * PWM attr for the f71862fg, fewer pwms and fewer zones per pwm than the

 * standard models

/*

 * PWM attr for the f71808e/f71869, almost identical to the f71862fg, but the

 * pwm setting when the temperature is above the pwmX_auto_point1_temp can be

 * programmed instead of being hardcoded to 0xff

 PWM attr for the standard models */

 Fan attr specific to the f8000 (4th fan input can only measure speed) */

/*

 * PWM attr for the f8000, zones mapped to temp instead of to pwm!

 * Also the register block at offset A0 maps to TEMP1 (so our temp2, as the

 * F8000 starts counting temps at 0), B0 maps the TEMP2 and C0 maps to TEMP0

 Super I/O functions */

 Don't step on other drivers' I/O space by accident */

 according to the datasheet the key must be send twice! */

 Update once every 60 seconds */

 Get High & boundary temps*/

 All but the f71858fg / f8000 have this register */

 Update every second */

 Some models have 1 more fan with limited capabilities */

 Sysfs Interface */

 TEMP_TABLE_SEL 1 or 3 ? */

 convert abs to relative and check */

 convert value to register contents */

 PWM mode */

 RPM mode */

 PWM mode */

 RPM mode */

 Normal auto mode */

 Manual mode */

 Thermostat mode */

 Manual mode */

 Special case for F8000 pwm channel 3 which only does auto mode */

 Special case for F8000 auto PWM mode / Thermostat mode */

 Normal auto mode */

 Thermostat mode */

 The f71858fg does not support manual RPM mode */

 Manual */

 Normal auto mode */

 PWM mode */

 RPM mode */

 PWM mode */

 RPM mode */

 Prevent negative numbers */

 Sanity check the pwm setting */

 This is a non fatal condition */

 Check for unsupported auto pwm settings */

 This is a non fatal condition */

 Register sysfs interface files */

				/*

				 * The f71858fg temperature alarms behave as

				 * the f8000 alarms in this mode

 These always have signed auto point temps */

 to select correct fan/pwm reg bank! */

 Ensure banked pwm registers point to right bank */

 Some types have 1 extra fan with limited functionality */

 Will unregister the sysfs files for us */

 f71882fg_remove() also frees our data */

 Ignore 3 LSB */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * adm1021.c - Part of lm_sensors, Linux kernel modules for hardware

 *	       monitoring

 * Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl> and

 *			     Philip Edelbrock <phil@netroedge.com>

 Addresses to scan */

 adm1021 constants specified below */

 The adm1021 registers */

 Read-only */

 For nr in 0-1 */

 0x41 = AD, 0x49 = TI, 0x4D = Maxim, 0x23 = Genesys , 0x54 = Onsemi */

 ADM1021 = 0x0X, ADM1023 = 0x3X */

 These use different addresses for reading/writing */

 These are for the ADM1023's additional precision on the remote temp sensor */

 limits */

 For nr in 0-1 */

 write-only */

 Initial values */

/*

 * Note: Even though I left the low and high limits named os and hyst,

 * they don't quite work like a thermostat the way the LM75 does.  I.e.,

 * a lower temp than THYST actually triggers an alarm instead of

 * clearing it.  Weird, ey?   --Phil

 Each client has this additional data */

 true if following fields are valid */

 !=0 if device in low power mode */

 In jiffies */

 Register values */

 Special values for ADM1023 only */

 (amalysh) read only mode, otherwise any limit's writing confuse BIOS */

			/*

			 * The ADM1023 provides 3 extra bits of precision for

			 * the remote sensor in extra registers.

 Return 0 if detection is successful, -ENODEV otherwise */

 Check unused bits */

 Determine the chip type. */

 extra checks for LM84 and MAX1617 to avoid misdetections */

 fail if any of the additional register reads failed */

		/*

		 * Fail for negative temperatures and negative high limits.

		 * This check also catches read errors on the tested registers.

 fail if all registers hold the same value */

		/*

		 * LM84 Mfr ID is in a different place,

		 * and it has more unused bits.

 fail if low limits are larger than high limits */

 Enable ADC and disable suspend mode */

 Set Conversion rate to 1/sec (this can be tinkered with) */

 Initialize the ADM1021 chip */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * tc654.c - Linux kernel modules for fan speed controller

 *

 * Copyright (C) 2016 Allied Telesis Labs NZ

 RPM Output 1 */

 RPM Output 2 */

 Fan Fault 1 Threshold */

 Fan Fault 2 Threshold */

 Configuration */

 Status */

 Fan Speed Duty Cycle */

 Manufacturer Identification */

 Version Identification */

 Macros to easily index the registers */

 Config register bits */

 Resolution Selection */

 Duty Cycle Control */

 Shutdown Mode */

 Status register bits */

 Fan 2 Fault */

 Fan 1 Fault */

 RPM resolution for RPM Output registers */

 25 RPM resolution */

 50 RPM resolution */

 Convert to the fan fault RPM threshold from register value */

 50 RPM resolution */

 Convert to register value from the fan fault RPM threshold */

 Register data is read (and cached) at most once per second. */

 update mutex */

 tc654 register cache */

 in jiffies */

	u8 rpm_output[2];	/* The fan RPM data for fans 1 and 2 is then

				 * written to registers RPM1 and RPM2

	u8 fan_fault[2];	/* The Fan Fault Threshold Registers are used to

				 * set the fan fault threshold levels for fan 1

				 * and fan 2

	u8 config;	/* The Configuration Register is an 8-bit read/

			 * writable multi-function control register

			 *   7: Fan Fault Clear

			 *      1 = Clear Fan Fault

			 *      0 = Normal Operation (default)

			 *   6: Resolution Selection for RPM Output Registers

			 *      RPM Output Registers (RPM1 and RPM2) will be

			 *      set for

			 *      1 = 25 RPM (9-bit) resolution

			 *      0 = 50 RPM (8-bit) resolution (default)

			 *   5: Duty Cycle Control Method

			 *      The V OUT duty cycle will be controlled via

			 *      1 = the SMBus interface.

			 *      0 = via the V IN analog input pin. (default)

			 * 4,3: Fan 2 Pulses Per Rotation

			 *      00 = 1

			 *      01 = 2 (default)

			 *      10 = 4

			 *      11 = 8

			 * 2,1: Fan 1 Pulses Per Rotation

			 *      00 = 1

			 *      01 = 2 (default)

			 *      10 = 4

			 *      11 = 8

			 *   0: Shutdown Mode

			 *      1 = Shutdown mode.

			 *      0 = Normal operation. (default)

	u8 status;	/* The Status register provides all the information

			 * about what is going on within the TC654/TC655

			 * devices.

			 * 7,6: Unimplemented, Read as '0'

			 *   5: Over-Temperature Fault Condition

			 *      1 = Over-Temperature condition has occurred

			 *      0 = Normal operation. V IN is less than 2.6V

			 *   4: RPM2 Counter Overflow

			 *      1 = Fault condition

			 *      0 = Normal operation

			 *   3: RPM1 Counter Overflow

			 *      1 = Fault condition

			 *      0 = Normal operation

			 *   2: V IN Input Status

			 *      1 = V IN is open

			 *      0 = Normal operation. voltage present at V IN

			 *   1: Fan 2 Fault

			 *      1 = Fault condition

			 *      0 = Normal operation

			 *   0: Fan 1 Fault

			 *      1 = Fault condition

			 *      0 = Normal operation

	u8 duty_cycle;	/* The DUTY_CYCLE register is a 4-bit read/

			 * writable register used to control the duty

			 * cycle of the V OUT output.

 helper to grab and cache data, at most one time per second */

 upon error, encode it in return value */

/*

 * sysfs attributes

 Driver data */

/*

 * device probe and removal

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for the ADT7411 (I2C/SPI 8 channel 10 bit ADC & temperature-sensor)

 *

 *  Copyright (C) 2008, 2010 Pengutronix

 *

 *  TODO: SPI, use power-down mode for suspend?, interrupt handling?

 for "atomic" device accesses */

/*

 * When reading a register containing (up to 4) lsb, all associated

 * msb-registers get locked by the hardware. After _one_ of those msb is read,

 * _all_ are unlocked. In order to use this locking correctly, reading lsb/msb

 * is protected here with a mutex, too.

 force update */

 10 bit signed */

 8 bit signed */

	/*

	 * We must only write zero to bit 1 and bit 2 and only one to bit 3

	 * according to the datasheet.

	/*

	 * We must only write zero to bit 1 and only one to bit 3 according to

	 * the datasheet.

 enable monitoring */

 force update on first occasion */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for Maxim MAX6621

 *

 * Copyright (c) 2017 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2017 Vadim Pasternak <vadimp@mellanox.com>

 Error codes */

#define MAX6621_TRAN_FAILED	0x8100	/*

					 * PECI transaction failed for more

					 * than the configured number of

					 * consecutive retries.

#define MAX6621_POOL_DIS	0x8101	/*

					 * Polling disabled for requested

					 * socket/domain.

#define MAX6621_POOL_UNCOMPLETE	0x8102	/*

					 * First poll not yet completed for

					 * requested socket/domain (on

					 * startup).

#define MAX6621_SD_DIS		0x8103	/*

					 * Read maximum temperature requested,

					 * but no sockets/domains enabled or

					 * all enabled sockets/domains have

					 * errors; or read maximum temperature

					 * address requested, but read maximum

					 * temperature was not called.

#define MAX6621_ALERT_DIS	0x8104	/*

					 * Get alert socket/domain requested,

					 * but no alert active.

 Intel spec PECI error min value. */

 Intel spec PECI error max value. */

/**

 * struct max6621_data - private data:

 *

 * @client: I2C client;

 * @regmap: register map handle;

 * @input_chan2reg: mapping from channel to register;

 Skip channels which are not physically conncted. */

			/*

			 * Bit MAX6621_REG_TEMP_SHIFT represents 1 degree step.

			 * The temperature is given in two's complement and 8

			 * bits is used for the register conversion.

			/*

			 * Set val to zero to recover the case, when reading

			 * MAX6621_TEMP_ALERT_CAUSE_REG results in for example

			 * MAX6621_ALERT_DIS. Reading will return with error,

			 * but in such case alarm should be returned as 0.

 Do not report error if alert is disabled. */

			/*

			 * Clear the alert automatically, using send-byte

			 * smbus protocol for clearing alert.

 Clamp to allowed range to prevent overflow. */

 Clamp to allowed range to prevent overflow. */

 Set CONFIG0 register masking temperature alerts and PEC. */

 Set CONFIG1 register for PEC access retry number. */

 Sync registers with hardware. */

 Verify which temperature input registers are enabled. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * w83791d.c - Part of lm_sensors, Linux kernel modules for hardware

 *	       monitoring

 *

 * Copyright (C) 2006-2007 Charles Spirakis <bezaur@gmail.com>

/*

 * Supports following chips:

 *

 * Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA

 * w83791d	10	5	5	3	0x71	0x5ca3	yes	no

 *

 * The w83791d chip appears to be part way between the 83781d and the

 * 83792d. Thus, this file is derived from both the w83792d.c and

 * w83781d.c files.

 *

 * The w83791g chip is the same as the w83791d but lead-free.

 Addresses to scan */

 Insmod parameters */

 The W83791D registers */

 VCOREA in DataSheet */

 VINR0 in DataSheet */

 +3.3VIN in DataSheet */

 VDD5V in DataSheet */

 +12VIN in DataSheet */

 -12VIN in DataSheet */

 -5VIN in DataSheet */

 5VSB in DataSheet */

 VBAT in DataSheet */

 VINR1 in DataSheet */

 VCOREA High Limit in DataSheet */

 VINR0 High Limit in DataSheet */

 +3.3VIN High Limit in DataSheet */

 VDD5V High Limit in DataSheet */

 +12VIN High Limit in DataSheet */

 -12VIN High Limit in DataSheet */

 -5VIN High Limit in DataSheet */

 5VSB High Limit in DataSheet */

 VBAT High Limit in DataSheet */

 VINR1 High Limit in DataSheet */

 VCOREA Low Limit in DataSheet */

 VINR0 Low Limit in DataSheet */

 +3.3VIN Low Limit in DataSheet */

 VDD5V Low Limit in DataSheet */

 +12VIN Low Limit in DataSheet */

 -12VIN Low Limit in DataSheet */

 -5VIN Low Limit in DataSheet */

 5VSB Low Limit in DataSheet */

 VBAT Low Limit in DataSheet */

 VINR1 Low Limit in DataSheet */

 FAN 1 Count in DataSheet */

 FAN 2 Count in DataSheet */

 FAN 3 Count in DataSheet */

 FAN 4 Count in DataSheet */

 FAN 5 Count in DataSheet */

 FAN 1 Count Low Limit in DataSheet */

 FAN 2 Count Low Limit in DataSheet */

 FAN 3 Count Low Limit in DataSheet */

 FAN 4 Count Low Limit in DataSheet */

 FAN 5 Count Low Limit in DataSheet */

 PWM 1 duty cycle register in DataSheet */

 PWM 2 duty cycle register in DataSheet */

 PWM 3 duty cycle register in DataSheet */

 PWM 4 duty cycle register in DataSheet */

 PWM 5 duty cycle register in DataSheet */

 PWM 1 target temperature for temp 1 */

 PWM 2 target temperature for temp 2 */

 PWM 3 target temperature for temp 3 */

 PWM 1/2 temperature tolerance */

 PWM 3 temperature tolerance */

 FAN 1/2 configuration */

 FAN 3 configuration */

 contains FAN1 and FAN2 Divisor */

 contains FAN3 Divisor */

 contains FAN4 and FAN5 Divisor */

 TEMP 1 in DataSheet */

 TEMP 1 Over in DataSheet */

 TEMP 1 Hyst in DataSheet */

 TEMP 2 in DataSheet */

 TEMP 2(0.5 deg) in DataSheet */

 TEMP 2 Over High part in DataSheet */

 TEMP 2 Over Low part in DataSheet */

 TEMP 2 Thyst High part in DataSheet */

 TEMP 2 Thyst Low part in DataSheet */

 TEMP 3 in DataSheet */

 TEMP 3(0.5 deg) in DataSheet */

 TEMP 3 Over High part in DataSheet */

 TEMP 3 Over Low part in DataSheet */

 TEMP 3 Thyst High part in DataSheet */

 TEMP 3 Thyst Low part in DataSheet */

 BEEP Control Register 1 */

 BEEP Control Register 2 */

 BEEP Control Register 3 */

 realtime status register1 */

 realtime status register2 */

 realtime status register3 */

/*

 * The SMBus locks itself. The Winbond W83791D has a bank select register

 * (index 0x4e), but the driver only accesses registers in bank 0. Since

 * we don't switch banks, we don't need any special code to handle

 * locking access between bank switches

/*

 * The analog voltage inputs have 16mV LSB. Since the sysfs output is

 * in mV as would be measured on the chip input pin, need to just

 * multiply/divide by 16 to translate from/to register values.

 for temp1 which is 8-bit resolution, LSB = 1 degree Celsius */

/*

 * for temp2 and temp3 which are 9-bit resolution, LSB = 0.5 degree Celsius

 * Assumes the top 8 bits are the integral amount and the bottom 8 bits

 * are the fractional amount. Since we only have 0.5 degree resolution,

 * the bottom 7 bits will always be zero

 for thermal cruise target temp, 7-bits, LSB = 1 degree Celsius */

 for thermal cruise temp tolerance, 4-bits, LSB = 1 degree Celsius */

 fan divisors max out at 128 */

 true if following fields are valid */

 In jiffies */

 volts */

 Register value */

 Register value */

 Register value */

 fans */

 Register value */

 Register value */

 Register encoding, shifted right */

 Temperature sensors */

 current, over, thyst */

	s16 temp_add[2][3];	/* fixed point value. Top 8 bits are the

				 * integral part, bottom 8 bits are the

				 * fractional part. We only use the top

				 * 9 bits as the resolution is only

				 * to the 0.5 degree C...

				 * two sensors with three values

				 * (cur, over, hyst)

 PWMs */

 pwm duty cycle */

	u8 pwm_enable[3];	/* pwm enable status for fan 1-3

				 * (fan 4-5 only support manual mode)

 pwm 1-3 target temperature */

 pwm 1-3 temperature tolerance */

 Misc */

 realtime status register encoding,combined */

 Global beep enable */

 Mask off specific beeps */

 Register encoding, combined */

 hwmon-vid */

 following are the sysfs callback functions */

/*

 * Note: The bitmask for the beep enable/disable is different than

 * the bitmask for the alarm.

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan divisor.  This follows the principle of

 * least surprise; the user doesn't expect the fan minimum to change just

 * because the divisor changed.

 Save fan_min */

 Bit 2 of fans 0-2 is stored in the vbat register (bits 5-7) */

 Restore fan_min */

 read/write PWMs */

 For Smart Fan I / Thermal Cruise */

 read/write the temperature1, includes measured value and limits */

 read/write temperature2-3, includes measured value and limits */

/*

 * Note: The bitmask for the beep enable/disable is different than

 * the bitmask for the alarm.

 get realtime status of all sensors items: voltage, temp, fan */

 Beep control */

	/*

	 * The beep_enable state overrides any enabling request from

	 * the masks

 Keep the full mask value in sync with the current enable */

	/*

	 * The global control is in the second beep control register

	 * so only need to update that register

 cpu voltage regulation information */

	/*

	 * No lock needed as vrm is internal to the driver

	 * (not read from a chip register) and so is not

	 * updated in w83791d_update_device()

/*

 * Separate group of attributes for fan/pwm 4-5. Their pins can also be

 * in use for GPIO in which case their sysfs-interface should not be made

 * available

 Return 0 if detection is successful, -ENODEV otherwise */

 Check for Winbond ID if in bank 0 */

	/*

	 * If Winbond chip, address of chip and W83791D_REG_I2C_ADDR

	 * should match

 We want bank 0 and Vendor ID high byte */

 Verify it is a Winbond w83791d */

 Initialize the chip */

	/*

	 * If the fan_div is changed, make sure there is a rational

	 * fan_min in place

 Register sysfs hooks */

 Check if pins of fan/pwm 4-5 are in use as GPIO */

 Everything is ready, now register the working device */

	/*

	 * The difference between reset and init is that reset

	 * does a hard reset of the chip via index 0x40, bit 7,

	 * but init simply forces certain registers to have "sane"

	 * values. The hope is that the BIOS has done the right

	 * thing (which is why the default is reset=0, init=0),

	 * but if not, reset is the hard hammer and init

	 * is the soft mallet both of which are trying to whack

	 * things into place...

	 * NOTE: The data sheet makes a distinction between

	 * "power on defaults" and "reset by MR". As far as I can tell,

	 * the hard reset puts everything into a power-on state so I'm

	 * not sure what "reset by MR" means or how it can happen.

 keep some BIOS settings when we... */

 ... reset the chip and ... */

 ... disable power-on abnormal beep */

 disable the global beep (not done by hard reset) */

 Make sure monitoring is turned on for add-ons */

 Start monitoring */

 Update the voltages measured value and limits */

 Update the fan counts and limits */

 Update the Fan measured value and limits */

 Update the fan divisor */

		/*

		 * The fan divisor for fans 0-2 get bit 2 from

		 * bits 5-7 respectively of vbat register

 Update PWM duty cycle */

 Update PWM enable status */

 Update PWM target temperature */

 Update PWM temperature tolerance */

 Update the first temperature sensor */

 Update the rest of the temperature sensors */

 Update the realtime status */

 Update the beep configuration information */

 Extract global beep enable flag */

 Update the cpu voltage information */

	/*

	 * temperature math is signed, but only print out the

	 * bits that matter

 SPDX-License-Identifier: GPL-2.0

/*

 * Analog Devices LTC2947 high precision power and energy monitor over SPI

 *

 * Copyright 2019 Analog Devices Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * INA3221 Triple Current/Voltage Monitor

 *

 * Copyright (C) 2016 Texas Instruments Incorporated - https://www.ti.com/

 *	Andrew F. Davis <afd@ti.com>

 Configuration */

 Status Flags */

 Warning Flags */

 Alert Flags: SF is the summation-alert flag */

 sentinel */

/**

 * struct ina3221_input - channel input source specific information

 * @label: label of channel input source

 * @shunt_resistor: shunt resistor value of channel input source

 * @disconnected: connection status of channel input source

/**

 * struct ina3221_data - device specific information

 * @pm_dev: Device pointer for pm runtime

 * @regmap: Register map of the device

 * @fields: Register fields of the device

 * @inputs: Array of channel input source specific structures

 * @lock: mutex lock to serialize sysfs attribute accesses

 * @reg_config: Register value of INA3221_CONFIG

 * @summation_shunt_resistor: equivalent shunt resistor value for summation

 * @single_shot: running in single-shot operating mode

 Summation channel checks shunt resistor values */

/*

 * Helper function to return the resistor value for current summation.

 *

 * There is a condition to calculate current summation -- all the shunt

 * resistor values should be the same, so as to simply fit the formula:

 *     current summation = shunt voltage summation / shunt resistor

 *

 * Returns the equivalent shunt resistor value on success or 0 on failure

 Found the reference shunt resistor value */

 No summation if resistor values are different */

 Lookup table for Bus and Shunt conversion times in usec */

 Lookup table for number of samples using in averaging mode */

 Converting update_interval in msec to conversion time in usec */

 Bisect the result to Bus and Shunt conversion times */

 Converting CONFIG register value to update_interval in usec */

 Calculate total conversion time */

 Polling the CVRF bit to make sure read data is ready */

	/*

	 * Shunt Voltage Sum register has 14-bit value with 1-bit shift

	 * Other Shunt Voltage registers have 12 bits with 3-bit shift

 Return in msec */

	/*

	 * Translate shunt channel index to sensor channel index except

	 * the 7th channel (6 since being 0-aligned) is for summation.

 Write CONFIG register to trigger a single-shot measurement */

		/*

		 * Scale of shunt voltage (uV): LSB is 40uV

		 * Scale of bus voltage (mV): LSB is 8mV

 Write CONFIG register to trigger a single-shot measurement */

 Scale of shunt voltage: LSB is 40uV (40000nV) */

 Return current in mA */

 No actual register read if channel is disabled */

 Return 0 for alert flags */

 Update reg_config accordingly */

 Update Bus and Shunt voltage conversion times */

 Update reg_config accordingly */

 clamp current */

 clamp voltage */

	/*

	 * Formula to convert voltage_uv to register value:

	 *     regval = (voltage_uv / scale) << shift

	 * Note:

	 *     The scale is 40uV for all shunt voltage registers

	 *     Shunt Voltage Sum register left-shifts 1 bit

	 *     All other Shunt Voltage registers shift 3 bits

	 * Results:

	 *     SHUNT_SUM: (1 / 40uV) << 1 = 1 / 20uV

	 *     SHUNT[1-3]: (1 / 40uV) << 3 = 1 / 5uV

 Bypass if enable status is not being changed */

 For enabling routine, increase refcount and resume() at first */

 Enable or disable the channel */

 Cache the latest config register value */

 For disabling routine, decrease refcount or suspend() at last */

 0-align channel ID */

 0-align channel ID */

 Ignore in0_ */

 Hide label node if label is not provided */

 0: dummy, skipped in is_visible */

 1-3: input voltage Channels */

 4-6: shunt voltage Channels */

 7: summation of shunt voltage channels */

 1-3: current channels*/

 4: summation of current channels */

 Extra attribute groups */

 Update summation_shunt_resistor for summation channel */

 shunt resistance */

 Log the disconnected channel input */

 Save the connected input label if available */

 Overwrite default shunt resistor value optionally */

 Compatible with non-DT platforms */

 The driver will be reset, so use reset value */

 Clear continuous bit to use single-shot mode */

 Disable channels if their inputs are disconnected */

 Initialize summation_shunt_resistor for summation channel control */

 Enable PM runtime -- status is suspended by default */

 Initialize (resume) the device */

 Match the refcount with number of enabled channels */

 pm_runtime_put_noidle() will decrease the PM refcount until 0 */

 pm_runtime_put_noidle() will decrease the PM refcount until 0 */

 Save config register value and enable cache-only */

 Set to power-down mode for power saving */

 Software reset the chip */

 Restore cached register values to hardware */

 Restore config register value to hardware */

 Initialize summation channel control */

		/*

		 * Take all three channels into summation by default

		 * Shunt measurements of disconnected channels should

		 * be 0, so it does not matter for summation.

 sentinel */ }

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AD7314 digital temperature sensor driver for AD7314, ADT7301 and ADT7302

 *

 * Copyright 2010 Analog Devices Inc.

 *

 * Conversion to hwmon from IIO done by Jonathan Cameron <jic23@cam.ac.uk>

/*

 * AD7314 temperature masks

/*

 * ADT7301 and ADT7302 temperature masks

		/*

		 * Documented as a 13 bit twos complement register

		 * with a sign bit - which is a 14 bit 2's complement

		 * register.  1lsb - 31.25 milli degrees centigrade

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * w83627hf.c - Part of lm_sensors, Linux kernel modules for hardware

 *		monitoring

 * Copyright (c) 1998 - 2003  Frodo Looijaard <frodol@dds.nl>,

 *			      Philip Edelbrock <phil@netroedge.com>,

 *			      and Mark Studebaker <mdsxyz123@yahoo.com>

 * Ported to 2.6 by Bernhard C. Schrenk <clemy@clemy.org>

 * Copyright (c) 2007 - 1012  Jean Delvare <jdelvare@suse.de>

/*

 * Supports following chips:

 *

 * Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA

 * w83627hf	9	3	2	3	0x20	0x5ca3	no	yes(LPC)

 * w83627thf	7	3	3	3	0x90	0x5ca3	no	yes(LPC)

 * w83637hf	7	3	3	3	0x80	0x5ca3	no	yes(LPC)

 * w83687thf	7	3	3	3	0x90	0x5ca3	no	yes(LPC)

 * w83697hf	8	2	2	2	0x60	0x5ca3	no	yes(LPC)

 *

 * For other winbond chips, and for i2c support in the above chips,

 * use w83781d.c.

 *

 * Note: automatic ("cruise") fan control for 697, 637 & 627thf not

 * supported yet.

 modified from kernel/include/traps.c */

 Register: Logical device select */

 logical device numbers for superio_select (below) */

 w83627hf only */

 w83627thf only */

 w83627thf only */

 Register: Device ID */

 w83627thf only */

 w83627thf only */

 w83627thf only */

 w83687thf only */

 w83687thf only */

 w83687thf only */

 Constants specified below */

 Alignment of the base address */

 Offset & size of I/O region we are interested in */

 Where are the sensors address/data registers relative to the region offset */

 The W83781D registers */

 The W83782D registers for nr=7,8 are in bank 5 */

 nr:0-2 for fans:1-3 */

 these are zero-based, unlike config constants above */

 FAN 1 mode */

 FAN 2 mode */

 FAN AUX mode */

 697HF/637HF/687THF too */

 697HF/637HF/687THF too */

 637HF/687THF too */

 637HF/687THF too */

 Only for the 627HF */

 697HF/687THF too */

 697HF/687THF too */

 687THF too */

 Sensor selection */

/*

 * Conversions. Limit checking is only done on the TO_REG

 * variants. Note that you should be a bit careful with which arguments

 * these macros are called: arguments may be evaluated more than once.

 * Fixing this is just not worth it.

/*

 * TEMP: 0.001C/bit (-128C to +127C)

 * REG: 1C/bit, two's complement

	/*

	 * Only 5 dividers (1 2 4 8 16)

	 * Search for the nearest available frequency

 Clock bit 8 -> 180 kHz or 24 MHz */

 This should not happen but anyway... */

 Minimum divider value is 0x01 and maximum is 0x7F */

 The highest we can do */

 Use 24 MHz clock */

 The lowest we can do */

 Use 180 kHz clock */

/*

 * For each registered chip, we need to keep some data in memory.

 * The structure is dynamically allocated.

 true if following fields are valid */

 In jiffies */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register encoding, shifted right */

 Register encoding, combined */

 Register encoding, combined */

 Register encoding, combined */

 Register value */

	u8 pwm_enable[3];	/* 1 = manual

				 * 2 = thermal cruise (also called SmartFan I)

				 * 3 = fan speed cruise

 Register value */

	u16 sens[3];		/* 1 = pentium diode; 2 = 3904 diode;

				 * 4 = thermistor

 Register value, 627THF/637HF/687THF only */

 Remember extra register values over suspend/resume */

 Restore limits */

 skip missing sensors */

 Fixup BIOS bugs */

 Force re-reading all values */

 CONFIG_PM */

 use a different set of functions for in0 */

 use VRM9 calculation */

 use VRM8 (standard) calculation */

 use VRM9 calculation */

 use VRM8 (standard) calculation */

 use VRM9 calculation */

 use VRM8 (standard) calculation */

 preserve beep enable */

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan divisor.  This follows the principle of

 * least surprise; the user doesn't expect the fan minimum to change just

 * because the divisor changed.

 Save fan_min */

 Restore fan_min */

 bits 0-3 are reserved  in 627THF */

 modes 1, 2 and 3 are supported */

 PII/Celeron diode */

 3904 */

 thermistor */

 No device at all */

 Initialize the chip */

 A few vars need to be filled upon startup */

 Register common device attributes */

 Register chip-specific device attributes */

 Convert VID to voltage based on VRM */

 Registers 0x50-0x5f are banked */

 Not strictly necessary, but play it safe for now */

		/*

		 * Some other driver reserved the address space for itself.

		 * We don't want to fail driver instantiation because of that,

		 * so display a warning and keep going.

 Make sure these GPIO pins are enabled */

	/*

	 * Make sure the pins are configured for input

	 * There must be at least five (VRM 9), and possibly 6 (VRM 10)

		/*

		 * Some other driver reserved the address space for itself.

		 * We don't want to fail driver instantiation because of that,

		 * so display a warning and keep going.

 Make sure these GPIO pins are enabled */

 Make sure the pins are configured for input */

 Minimize conflicts with other winbond i2c-only clients...  */

 disable i2c subclients... how to disable main i2c client?? */

 force i2c address to relatively uncommon address */

 Read VID only once */

 Read VRM & OVT Config only once */

 Enable temp2 */

 Enable temp3 */

 Start monitoring */

 Enable VBAT monitoring if needed */

 skip missing sensors */

 bits 0-3 are reserved  in 627THF */

 Sets global pdev as a side effect */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Copyright (C) 2012 ARM Limited

 SPDX-License-Identifier: GPL-2.0+

/*

 * Hardware monitoring driver for MAX127.

 *

 * Copyright (c) 2020 Facebook Inc.

/*

 * MAX127 Control Byte. Refer to MAX127 datasheet, Table 1 "Control-Byte

 * Format" for details.

/*

 * MAX127 channel input ranges. Refer to MAX127 datasheet, Table 3 "Range

 * and Polarity Selection" for details.

 10V */

 5V */

/*

 * MAX127 returns 2 bytes at read:

 *   - the first byte contains data[11:4].

 *   - the second byte contains data[3:0] (MSB) and 4 dummy 0s (LSB).

 * Refer to MAX127 datasheet, "Read a Conversion (Read Cycle)" section

 * for details.

	/*

	 * MAX127's data coding is binary in unipolar mode with 1 LSB =

	 * (Full-Scale/4096) and two’s complement binary in bipolar mode

	 * with 1 LSB = [(2 x |FS|)/4096].

	 * Refer to MAX127 datasheet, "Transfer Function" section for

	 * details.

 RNG=0, BIP=0 */

 RNG=0, BIP=1 */

 RNG=1, BIP=0 */

 RNG=1, BIP=1 */

 RNG=0, BIP=0 */

 RNG=0, BIP=1 */

 RNG=1, BIP=0 */

 RNG=1, BIP=1 */

 SPDX-License-Identifier: GPL-2.0-only

/* linux/drivers/hwmon/s3c-hwmon.c

 *

 * Copyright (C) 2005, 2008, 2009 Simtec Electronics

 *	http://armlinux.simtec.co.uk/

 *	Ben Dooks <ben@simtec.co.uk>

 *

 * S3C24XX/S3C64XX ADC hwmon support

/**

 * struct s3c_hwmon - ADC hwmon client information

 * @lock: Access lock to serialise the conversions.

 * @client: The client we registered with the S3C ADC core.

 * @hwmon_dev: The hwmon device we created.

 * @attr: The holders for the channel attributes.

/**

 * s3c_hwmon_read_ch - read a value from a given adc channel.

 * @dev: The device.

 * @hwmon: Our state.

 * @channel: The channel we're reading from.

 *

 * Read a value from the @channel with the proper locking and sleep until

 * either the read completes or we timeout awaiting the ADC core to get

 * back to us.

/**

 * s3c_hwmon_show_raw - show a conversion from the raw channel number.

 * @dev: The device that the attribute belongs to.

 * @attr: The attribute being read.

 * @buf: The result buffer.

 *

 * This show deals with the raw attribute, registered for each possible

 * ADC channel. This does a conversion and returns the raw (un-scaled)

 * value returned from the hardware.

 CONFIG_SENSORS_S3C_RAW */

/**

 * s3c_hwmon_ch_show - show value of a given channel

 * @dev: The device that the attribute belongs to.

 * @attr: The attribute being read.

 * @buf: The result buffer.

 *

 * Read a value from the ADC and scale it before returning it to the

 * caller. The scale factor is gained from the channel configuration

 * passed via the platform data when the device was registered.

/**

 * s3c_hwmon_label_show - show label name of the given channel.

 * @dev: The device that the attribute belongs to.

 * @attr: The attribute being read.

 * @buf: The result buffer.

 *

 * Return the label name of a given channel

/**

 * s3c_hwmon_create_attr - create hwmon attribute for given channel.

 * @dev: The device to create the attribute on.

 * @cfg: The channel configuration passed from the platform data.

 * @channel: The ADC channel number to process.

 *

 * Create the scaled attribute for use with hwmon from the specified

 * platform data in @pdata. The sysfs entry is handled by the routine

 * s3c_hwmon_ch_show().

 *

 * The attribute name is taken from the configuration data if present

 * otherwise the name is taken by concatenating in_ with the channel

 * number.

 if this has a name, add a label */

/**

 * s3c_hwmon_probe - device probe entry.

 * @dev: The device being probed.

 Register with the core ADC driver. */

 add attributes for our adc devices. */

 register with the hwmon core */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * adm9240.c	Part of lm_sensors, Linux kernel modules for hardware

 *		monitoring

 *

 * Copyright (C) 1999	Frodo Looijaard <frodol@dds.nl>

 *			Philip Edelbrock <phil@netroedge.com>

 * Copyright (C) 2003	Michiel Rook <michiel@grendelproject.nl>

 * Copyright (C) 2005	Grant Coady <gcoady.lk@gmail.com> with valuable

 *				guidance from Jean Delvare

 *

 * Driver supports	Analog Devices		ADM9240

 *			Dallas Semiconductor	DS1780

 *			National Semiconductor	LM81

 *

 * ADM9240 is the reference, DS1780 and LM81 are register compatibles

 *

 * Voltage	Six inputs are scaled by chip, VID also reported

 * Temperature	Chip temperature to 0.5'C, maximum and max_hysteris

 * Fans		2 fans, low speed alarm, automatic fan clock divider

 * Alarms	16-bit map of active alarms

 * Analog Out	0..1250 mV output

 *

 * Chassis Intrusion: clear CI latch with 'echo 0 > intrusion0_alarm'

 *

 * Test hardware: Intel SE440BX-2 desktop motherboard --Grant

 *

 * LM81 extended temp reading not implemented

 Addresses to scan */

 ADM9240 registers */

 0..5 */

 0..1 */

 0, 1 = high, hyst */

 generalised scaling with integer rounding */

 adm9240 internally scales voltage measurements */

 temperature range: -40..125, 127 disables temperature alarm */

 two fans, each with low fan speed limit */

 error */

 analog out 0..1250mV */

 per client data */

 rw	fan1_div, read-only accessor */

 --	vrm set on startup, no accessor */

 write new fan div, callers must hold data->update_lock */

/*

 * set fan speed low limit:

 *

 * - value is zero: disable fan speed low limit alarm

 *

 * - value is below fan speed measurement range: enable fan speed low

 *   limit alarm to be asserted while fan speed too slow to measure

 *

 * - otherwise: select fan clock divider to suit fan speed low limit,

 *   measurement code may adjust registers to ensure fan speed reading

 keep > 0 */

** sensor chip detect and driver install ***/

 Return 0 if detection is successful, -ENODEV otherwise */

 verify chip: reg address should match i2c address */

 check known chip manufacturer */

 successful detect, print chip info */

 need this to report vid as mV */

 measurement cycle running: report state */

 cold start: open limits before starting chip */

 start measurement cycle */

 read fan divs */

 adjust fan clock divider on overflow */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max1619.c - Part of lm_sensors, Linux kernel modules for hardware

 *             monitoring

 * Copyright (C) 2003-2004 Oleksij Rempel <bug-track@fisher-privat.net>

 *                         Jean Delvare <jdelvare@suse.de>

 *

 * Based on the lm90 driver. The MAX1619 is a sensor chip made by Maxim.

 * It reports up to two temperatures (its own plus up to

 * one external one). Complete datasheet can be

 * obtained from Maxim's website at:

 *   http://pdfserv.maxim-ic.com/en/ds/MAX1619.pdf

/*

 * The MAX1619 registers

/*

 * Conversions

/*

 * Client data (each client gets its own)

 false until following fields are valid */

 in jiffies */

 registers values */

 index with enum temp_index */

 If OVERT polarity is low, reverse alarm bit */

/*

 * Sysfs stuff

 Return 0 if detection is successful, -ENODEV otherwise */

 detection */

 identification */

	/*

	 * Start the conversions.

 2 Hz */

 run */

 Initialize the MAX1619 chip */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm83.c - Part of lm_sensors, Linux kernel modules for hardware

 *          monitoring

 * Copyright (C) 2003-2009  Jean Delvare <jdelvare@suse.de>

 *

 * Heavily inspired from the lm78, lm75 and adm1021 drivers. The LM83 is

 * a sensor chip made by National Semiconductor. It reports up to four

 * temperatures (its own plus up to three external ones) with a 1 deg

 * resolution and a 3-4 deg accuracy. Complete datasheet can be obtained

 * from National's website at:

 *   http://www.national.com/pf/LM/LM83.html

 * Since the datasheet omits to give the chip stepping code, I give it

 * here: 0x03 (at register 0xff).

 *

 * Also supports the LM82 temp sensor, which is basically a stripped down

 * model of the LM83.  Datasheet is here:

 * http://www.national.com/pf/LM/LM82.html

/*

 * Addresses to scan

 * Address is selected using 2 three-level pins, resulting in 9 possible

 * addresses.

/*

 * The LM83 registers

 * Manufacturer ID is 0x01 for National Semiconductor.

/*

 * Conversions and various macros

 * The LM83 uses signed 8-bit values with LSB = 1 degree Celsius.

/*

 * Client data (each client gets its own)

 false until following fields are valid */

 in jiffies */

 registers values */

	s8 temp[9];	/* 0..3: input 1-4,

			   4..7: high limit 1-4,

 bitvector, combined */

/*

 * Sysfs stuff

 Individual alarm files */

 Raw alarm file for compatibility */

/*

 * Real code

 Return 0 if detection is successful, -ENODEV otherwise */

 Detection */

 Identification */

 National Semiconductor */

 identification failed */

	/*

	 * Register sysfs hooks

	 * The LM82 can only monitor one external diode which is

	 * at the same register as the LM83 temp3 entry - so we

	 * declare 1 and 3 common, and then 2 and 4 only for the LM83.

/*

 * Driver data (common to all clients)

 SPDX-License-Identifier: GPL-2.0-only

/*

 * aht10.c - Linux hwmon driver for AHT10 Temperature and Humidity sensor

 * Copyright (C) 2020 Johannes Cornelis Draaijer

/*

 * Poll intervals (in milliseconds)

/*

 * I2C command delays (in microseconds)

/*

 * Command bytes

/*

 * Flags in the answer byte/command

/**

 *   struct aht10_data - All the data required to operate an AHT10 chip

 *   @client: the i2c client associated with the AHT10

 *   @lock: a mutex that is used to prevent parallel access to the

 *          i2c client

 *   @min_poll_interval: the minimum poll interval

 *                   While the poll rate limit is not 100% necessary,

 *                   the datasheet recommends that a measurement

 *                   is not performed too often to prevent

 *                   the chip from warming up due to the heat it generates.

 *                   If it's unwanted, it can be ignored setting it to

 *                   it to 0. Default value is 2000 ms

 *   @previous_poll_time: the previous time that the AHT10

 *                        was polled

 *   @temperature: the latest temperature value received from

 *                 the AHT10

 *   @humidity: the latest humidity value received from the

 *              AHT10

	/*

	 * Prevent simultaneous access to the i2c

	 * client and previous_poll_time

/**

 * aht10_init() - Initialize an AHT10 chip

 * @client: the i2c client associated with the AHT10

 * @data: the data associated with this AHT10 chip

 * Return: 0 if succesfull, 1 if not

/**

 * aht10_polltime_expired() - check if the minimum poll interval has

 *                                  expired

 * @data: the data containing the time to compare

 * Return: 1 if the minimum poll interval has expired, 0 if not

/**

 * aht10_read_values() - read and parse the raw data from the AHT10

 * @aht10_data: the struct aht10_data to use for the lock

 * Return: 0 if succesfull, 1 if not

/**

 * aht10_interval_write() - store the given minimum poll interval.

 * Return: 0 on success, -EINVAL if a value lower than the

 *         AHT10_MIN_POLL_INTERVAL is given

/**

 * aht10_interval_read() - read the minimum poll interval

 *                            in milliseconds

/**

 * aht10_temperature1_read() - read the temperature in millidegrees

/**

 * aht10_humidity1_read() - read the relative humidity in millipercent

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * corsair-cpro.c - Linux driver for Corsair Commander Pro

 * Copyright (C) 2020 Marius Zachmann <mail@mariuszachmann.de>

 *

 * This driver uses hid reports to communicate with the device to allow hidraw userspace drivers

 * still being used. The device does not use report ids. When using hidraw and this driver

 * simultaniously, reports could be switched.

#define CTL_GET_TMP_CNCT	0x10	/*

					 * returns in bytes 1-4 for each temp sensor:

					 * 0 not connected

					 * 1 connected

#define CTL_GET_TMP		0x11	/*

					 * send: byte 1 is channel, rest zero

					 * rcv:  returns temp for channel in centi-degree celsius

					 * in bytes 1 and 2

					 * returns 0x11 in byte 0 if no sensor is connected

#define CTL_GET_VOLT		0x12	/*

					 * send: byte 1 is rail number: 0 = 12v, 1 = 5v, 2 = 3.3v

					 * rcv:  returns millivolt in bytes 1,2

					 * returns error 0x10 if request is invalid

#define CTL_GET_FAN_CNCT	0x20	/*

					 * returns in bytes 1-6 for each fan:

					 * 0 not connected

					 * 1 3pin

					 * 2 4pin

#define CTL_GET_FAN_RPM		0x21	/*

					 * send: byte 1 is channel, rest zero

					 * rcv:  returns rpm in bytes 1,2

#define CTL_GET_FAN_PWM		0x22	/*

					 * send: byte 1 is channel, rest zero

					 * rcv:  returns pwm in byte 1 if it was set

					 *	 returns error 0x12 if fan is controlled via

					 *	 fan_target or fan curve

#define CTL_SET_FAN_FPWM	0x23	/*

					 * set fixed pwm

					 * send: byte 1 is fan number

					 * send: byte 2 is percentage from 0 - 100

#define CTL_SET_FAN_TARGET	0x24	/*

					 * set target rpm

					 * send: byte 1 is fan number

					 * send: byte 2-3 is target

					 * device accepts all values from 0x00 - 0xFFFF

 whenever buffer is used, lock before send_usb_cmd */

 converts response error in buffer to errno */

 success */

 called invalid command */

 called GET_VOLT / GET_TMP with invalid arguments */

 requested temps of disconnected sensors */

 requested pwm of not pwm controlled channels */

 send command, check for error in response, response in ccp->buffer */

 only copy buffer when requested */

 requests and returns single data values depending on channel */

 The Corsair Commander Pro uses values from 0-100 */

 how to read target values from the device is unknown */

 driver returns last set value or 0			*/

 read fan connection status and set labels */

 read temp sensor connection status */

 temp and fan connection status only updates when device is powered on */

/*

 * When compiling this driver as built-in, hwmon initcalls will get called before the

 * hid driver and this driver would fail to register. late_initcall solves this.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * adcxx.c

 *

 * The adcxx4s is an AD converter family from National Semiconductor (NS).

 *

 * Copyright (c) 2008 Marc Pignat <marc.pignat@hevs.ch>

 *

 * The adcxx4s communicates with a host processor via an SPI/Microwire Bus

 * interface. This driver supports the whole family of devices with name

 * ADC<bb><c>S<sss>, where

 * * bb is the resolution in number of bits (8, 10, 12)

 * * c is the number of channels (1, 2, 4, 8)

 * * sss is the maximum conversion speed (021 for 200 kSPS, 051 for 500 kSPS

 *   and 101 for 1 MSPS)

 *

 * Complete datasheets are available at National's website here:

 * http://www.national.com/ds/DC/ADC<bb><c>S<sss>.pdf

 *

 * Handling of 8, 10 and 12 bits converters are the same, the

 * unavailable bits are 0 :)

 in millivolts */

 sysfs hook function */

 other bits are don't care */

 The minimum reference is 0 for this chip family */

----------------------------------------------------------------------*/

 set a default value for the reference */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2008, 2010 Davide Rizzo <elpa.rizzo@gmail.com>

 *

 * The LM95241 is a sensor chip made by National Semiconductors.

 * It reports up to three temperatures (its own plus up to two external ones).

 * Complete datasheet can be obtained from National's website at:

 *   http://www.national.com/ds.cgi/LM/LM95241.pdf

 LM95241 registers */

 LM95241 specific bitfields */

 Client data (each client gets its own) */

 in jiffies */

 in milli-seconds */

 false until following fields are valid */

 registers values */

 Conversions */

 Return 0 if detection is successful, -ENODEV otherwise */

 Fill the i2c board info */

 Initialize the LM95241 chip */

 Driver data (common to all clients) */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Linear Technology LTC4222 Dual Hot Swap controller

 *

 * Copyright (c) 2014 Guenter Roeck

 chip registers */

/*

 * Fault register bits

 Return the voltage from the given register in mV or mA */

 1.25 mV resolution. Convert to mV. */

 31.25 mV resolution. Convert to mV. */

		/*

		 * 62.5 uV resolution. Convert to current as measured with

		 * an 1 mOhm sense resistor, in mA. If a different sense

		 * resistor is installed, calculate the actual current by

		 * dividing the reported current by the sense resistor value

		 * in mOhm.

 Clear reported faults in chip register */

 Voltages */

/*

 * Voltage alarms

 * UV/OV faults are associated with the input voltage, and power bad and fet

 * faults are associated with the output voltage.

 Current (via sense resistor) */

 Overcurrent alarm */

 Clear faults */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * emc1403.c - SMSC Thermal Driver

 *

 * Copyright (C) 2008 Intel Corp

 *

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/*

 *	Sensors. We pass the actual i2c register to the methods.

/*

 * EMC14x2 uses a different register and different bits to report alarm and

 * fault status. For simplicity, provide a separate attribute group for this

 * chip series.

 * Since we can not re-use the same attribute names, create a separate attribute

 * array.

 Check if thermal chip is SMSC and EMC1403 or EMC1423 */

 internal diode high byte */

 external diode 1 high byte */

 status */

 external diode 1 low byte */

 external diode fault */

 external diode 2 high byte */

 external diode 2 low byte */

 internal diode low byte */

 externl diode 3 high byte */

 external diode 3 low byte */

 high limit status */

 low limit status */

 therm limit status */

 Last digit of chip name indicates number of channels */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * adm1025.c

 *

 * Copyright (C) 2000       Chen-Yuan Wu <gwu@esoft.com>

 * Copyright (C) 2003-2009  Jean Delvare <jdelvare@suse.de>

 *

 * The ADM1025 is a sensor chip made by Analog Devices. It reports up to 6

 * voltages (including its own power source) and up to two temperatures

 * (its own plus up to one external one). Voltages are scaled internally

 * (which is not the common way) with ratios such that the nominal value

 * of each voltage correspond to a register value of 192 (which means a

 * resolution of about 0.5% of the nominal value). Temperature values are

 * reported with a 1 deg resolution and a 3 deg accuracy. Complete

 * datasheet can be obtained from Analog's website at:

 *   https://www.onsemi.com/PowerSolutions/product.do?id=ADM1025

 *

 * This driver also supports the ADM1025A, which differs from the ADM1025

 * only in that it has "open-drain VID inputs while the ADM1025 has

 * on-chip 100k pull-ups on the VID inputs". It doesn't make any

 * difference for us.

 *

 * This driver also supports the NE1619, a sensor chip made by Philips.

 * That chip is similar to the ADM1025A, with a few differences. The only

 * difference that matters to us is that the NE1619 has only two possible

 * addresses while the ADM1025A has a third one. Complete datasheet can be

 * obtained from Philips's website at:

 *   http://www.semiconductors.philips.com/pip/NE1619DS.html

 *

 * Since the ADM1025 was the first chipset supported by this driver, most

 * comments will refer to this chipset, but are actually general and

 * concern all supported chipsets, unless mentioned otherwise.

/*

 * Addresses to scan

 * ADM1025 and ADM1025A have three possible addresses: 0x2c, 0x2d and 0x2e.

 * NE1619 has two possible addresses: 0x2c and 0x2d.

/*

 * The ADM1025 registers

/*

 * Conversions and various macros

 * The ADM1025 uses signed 8-bit values for temperatures.

/*

 * Client data (each client gets its own)

 false until following fields are valid */

 in jiffies */

 register value */

 register value */

 register value */

 register value */

 register value */

 register value */

 register values, combined */

 register values, combined */

/*

 * Sysfs stuff

/*

 * Real code

 Return 0 if detection is successful, -ENODEV otherwise */

 Check for unused bits */

 Identification */

	/*

	 * Set high limits

	 * Usually we avoid setting limits on driver init, but it happens

	 * that the ADM1025 comes with stupid default limits (all registers

	 * set to 0). In case the chip has not gone through any limit

	 * setting yet, we better set the high limits to the max so that

	 * no alarm triggers.

	/*

	 * Start the conversions

 Initialize the ADM1025 chip */

 sysfs hooks */

 Pin 11 is either in4 (+12V) or VID4 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * gl518sm.c - Part of lm_sensors, Linux kernel modules for hardware

 *             monitoring

 * Copyright (C) 1998, 1999 Frodo Looijaard <frodol@dds.nl> and

 * Kyosti Malkki <kmalkki@cc.hut.fi>

 * Copyright (C) 2004 Hong-Gunn Chew <hglinux@gunnet.org> and

 * Jean Delvare <jdelvare@suse.de>

 *

 * Ported to Linux 2.6 by Hong-Gunn Chew with the help of Jean Delvare

 * and advice of Greg Kroah-Hartman.

 *

 * Notes about the port:

 * Release 0x00 of the GL518SM chipset doesn't support reading of in0,

 * in1 nor in2. The original driver had an ugly workaround to get them

 * anyway (changing limits and watching alarms trigger and wear off).

 * We did not keep that part of the original driver in the Linux 2.6

 * version, since it was making the driver significantly more complex

 * with no real benefit.

 Addresses to scan */

 Many GL518 constants specified below */

 The GL518 registers */

/*

 * Conversions. Rounding and limit checking is only done on the TO_REG

 * variants. Note that you should be a bit careful with which arguments

 * these macros are called: arguments may be evaluated more than once.

 * Fixing this is just not worth it.

 Each client has this additional data */

 true if following fields are valid */

 In jiffies */

 Register values; [0] = VDD */

 Register values; [0] = VDD */

 Register values; [0] = VDD */

 Register encoding, shifted right */

 Boolean */

 Register values */

 Register values */

 Register values */

 Register value */

 Register value */

 Boolean */

/*

 * Registers 0x07 to 0x0c are word-sized, others are byte-sized

 * GL518 uses a high-byte first convention, which is exactly opposite to

 * the SMBus standard.

/*

 * Sysfs stuff

/*

 * Real code

 Return 0 if detection is successful, -ENODEV otherwise */

 Now, we do the remaining detection. */

 Determine the chip type. */

/*

 * Called when we have found a new GL518SM.

 * Note that we preserve D4:NoFan2 and D2:beep_enable.

 Make sure we leave D7:Reset untouched */

 Comparator mode (D3=0), standby mode (D6=0) */

 Never interrupts */

 Clear status register (D5=1), start (D6=1) */

 Initialize the GL518SM chip */

 sysfs hooks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max1111.c - +2.7V, Low-Power, Multichannel, Serial 8-bit ADCs

 *

 * Based on arch/arm/mach-pxa/corgi_ssp.c

 *

 * Copyright (C) 2004-2005 Richard Purdie

 *

 * Copyright (C) 2008 Marvell International Ltd.

 *	Eric Miao <eric.miao@marvell.com>

 MAX1111 Commands */

 NOTE: bit 4 is ignored */

 protect msg, xfer and buffers from multiple access */

 writing to drvdata struct is not thread safe, wait on mutex */

/*

 * NOTE: SPI devices do not have a default 'name' attribute, which is

 * likely to be used by hwmon applications to distinguish between

 * different devices, explicitly add a name attribute here.

	/*

	 * Assume the reference voltage to be 2.048V or 4.096V, with an 8-bit

	 * sample. The LSB weight is 8mV or 16mV depending on the chip type.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2020 Sartura Ltd.

 *

 * Driver for the TI TPS23861 PoE PSE.

 *

 * Author: Robert Marko <robert.marko@sartura.hr>

 Measurment beyond clamp voltage */

 Insufficient voltage delta */

 0.652 degrees Celsius */

 3.662 mV */

 255 mOhm */

 62.260 uA */

 61.039 uA */

 11.0966 Ohm*/

 15.7216 Ohm*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max31790.c - Part of lm_sensors, Linux kernel modules for hardware

 *             monitoring.

 *

 * (C) 2015 by Il Han <corone.il.han@gmail.com>

 MAX31790 registers */

 Fan Config register bits */

 Fan Dynamics register bits */

/*

 * Client data (each client gets its own)

 zero until following fields are valid */

 in jiffies */

 register values */

		/*

		 * If a fault bit is set, we need to write into one of the fan

		 * configuration registers to clear it. Note that this also

		 * clears the fault for the companion channel if enabled.

			/*

			 * Disable RPM mode; otherwise disabling fan speed

			 * monitoring is not possible.

			/*

			 * The chip sets MAX31790_FAN_CFG_TACH_INPUT_EN on its

			 * own if MAX31790_FAN_CFG_RPM_MODE is set.

			 * Do it here as well to reflect the actual register

			 * value in the cache.

	/*

	 * Initialize the max31790 chip

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * dell-smm-hwmon.c -- Linux driver for accessing the SMM BIOS on Dell laptops.

 *

 * Copyright (C) 2001  Massimo Dal Zotto <dz@debian.org>

 *

 * Hwmon integration:

 * Copyright (C) 2011  Jean Delvare <jdelvare@suse.de>

 * Copyright (C) 2013, 2014  Guenter Roeck <linux@roeck-us.net>

 * Copyright (C) 2014, 2015  Pali Rohár <pali@kernel.org>

 lock for sensors writes */

/*

 * Call the System Management Mode BIOS. Code provided by Jonathan Buzzard.

 SMM requires CPU 0 */

/*

 * Call the System Management Mode BIOS.

/*

 * Read the fan status.

/*

 * Read the fan speed in RPM.

/*

 * Read the fan type.

 I8K_SMM_GET_FAN_TYPE SMM call is expensive, so cache values */

/*

 * Read the fan nominal rpm for specific fan speed.

/*

 * Enable or disable automatic BIOS fan control support

/*

 * Set the fan speed (off, low, high, ...).

/*

 * Read the cpu temperature.

	/*

	 * Sometimes the temperature sensor returns 0x99, which is out of range.

	 * In this case we retry (once) before returning an error.

	 # 1003655137 00000058 00005a4b

	 # 1003655138 00000099 00003a80 <--- 0x99 = 153 degrees

	 # 1003655139 00000054 00005c52

	/*

	 * Return -ENODATA for all invalid temperatures.

	 *

	 * Known instances are the 0x99 value as seen above as well as

	 * 0xc1 (193), which may be returned when trying to read the GPU

	 * temperature if the system supports a GPU and it is currently

	 * turned off.

/*

 * Read the Fn key status.

/*

 * Read the power status.

/*

 * Procfs interface

/*

 * Print the information for /proc/i8k.

 11100 µs */

   580 µs */

   580 µs */

   580 µs */

   580 µs */

   750 µs */

 14700 µs */

	/*

	 * Info:

	 *

	 * 1)  Format version (this will change if format changes)

	 * 2)  BIOS version

	 * 3)  BIOS machine ID

	 * 4)  Cpu temperature

	 * 5)  Left fan status

	 * 6)  Right fan status

	 * 7)  Left fan speed

	 * 8)  Right fan speed

	 * 9)  AC power

	 * 10) Fn Key status

 Register the proc entry */

/*

 * Hwmon interface

				/*

				 * There is no command for retrieve the current status

				 * from BIOS, and userspace/firmware itself can change

				 * it.

				 * Thus we can only provide write-only access for now.

 Mark nominal speed table as invalid in case of error */

/*

 * Only use for machines which need some special configuration

 * in order to work correctly (e.g. if autoconfig fails on this machines).

 UK Inspiron 6400  */

/*

 * On some machines once I8K_SMM_GET_FAN_TYPE is issued then CPU fan speed

 * randomly going up and down due to bug in Dell SMM or BIOS. Here is blacklist

 * of affected Dell machines for which we disallow I8K_SMM_GET_FAN_TYPE call.

 * See bug: https://bugzilla.kernel.org/show_bug.cgi?id=100121

/*

 * On some machines all fan related SMM functions implemented by Dell BIOS

 * firmware freeze kernel for about 500ms. Until Dell fixes these problems fan

 * support for affected blacklisted Dell machines stay disabled.

 * See bug: https://bugzilla.kernel.org/show_bug.cgi?id=195751

	/*

	 * Set fan multiplier and maximal fan speed from dmi config

	 * Values specified in module parameters override values from dmi

 Must not be 0 */

		/*

		 * Autodetect fan multiplier based on nominal rpm

		 * If fan reports rpm value too high then set multiplier to 1

 Fan multiplier was specified in module param or in dmi */

/*

 * Probe for the presence of a supported laptop.

	/*

	 * Get DMI information

	/*

	 * Get SMM Dell signature

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm63.c - driver for the National Semiconductor LM63 temperature sensor

 *          with integrated fan control

 * Copyright (C) 2004-2008  Jean Delvare <jdelvare@suse.de>

 * Based on the lm90 driver.

 *

 * The LM63 is a sensor chip made by National Semiconductor. It measures

 * two temperatures (its own and one external one) and the speed of one

 * fan, those speed it can additionally control. Complete datasheet can be

 * obtained from National's website at:

 *   http://www.national.com/pf/LM/LM63.html

 *

 * The LM63 is basically an LM86 with fan speed monitoring and control

 * capabilities added. It misses some of the LM86 features though:

 *  - No low limit for local temperature.

 *  - No critical limit for local temperature.

 *  - Critical limit for remote temperature can be changed only once. We

 *    will consider that the critical limit is read-only.

 *

 * The datasheet isn't very clear about what the tachometer reading is.

 * I had a explanation from National Semiconductor though. The two lower

 * bits of the read value have to be masked out. The value is still 16 bit

 * in width.

/*

 * Addresses to scan

 * Address is fully defined internally and cannot be changed except for

 * LM64 which has one pin dedicated to address selection.

 * LM63 and LM96163 have address 0x4c.

 * LM64 can have address 0x18 or 0x4e.

/*

 * The LM63 registers

/*

 * Conversions and various macros

 * For tachometer counts, the LM63 uses 16-bit values.

 * For local temperature and high limit, remote critical limit and hysteresis

 * value, it uses signed 8-bit values with LSB = 1 degree Celsius.

 * For remote temperature, low and high limits, it uses signed 11-bit values

 * with LSB = 0.125 degree Celsius, left-justified in 16-bit registers.

 * For LM64 the actual remote diode temperature is 16 degree Celsius higher

 * than the register reading. Remote temperature setpoints have to be

 * adapted accordingly.

/*

 * Client data (each client gets its own)

 false until following fields are valid */

 zero until lut fields are valid */

 in jiffies */

 in jiffies */

 in milliseconds */

 8 or 12 */

 registers values */

	u16 fan[2];	/* 0: input

	u8 pwm1[13];	/* 0: current output

	s8 temp8[15];	/* 0: local input

			   1: local high limit

			   2: remote critical limit

	s16 temp11[4];	/* 0: remote input

			   1: remote low limit

			   2: remote high limit

 remote input (unsigned) */

 true if unsigned remote upper limits */

/*

 * Update the lookup table register cache.

 * client->update_lock must be held when calling this function.

 tachometer enabled  */

 order matters for fan1_input */

 order matters for temp2_input */

/*

 * Trip points in the lookup table should be in ascending order for both

 * temperatures and PWM output values.

/*

 * Sysfs callback functions and files

 register is read-only */

	/*

	 * Only let the user switch to automatic mode if the lookup table

	 * looks sane.

/*

 * There are 8bit registers for both local(temp1) and remote(temp2) sensor.

 * For remote sensor registers temp2_offset has to be considered,

 * for local sensor it must not.

 * So we need separate 8bit accessors for local and remote sensor.

 lookup table */

		/*

		 * Use unsigned temperature unless its value is zero.

		 * If it is zero, use signed temperature.

/*

 * Hysteresis register holds a relative value, while we want to present

 * an absolute to user-space

/*

 * And now the other way around, user-space provides an absolute

 * hysteresis value and we have to store a relative one

/*

 * Set conversion rate.

 * client->update_lock must be held when calling this function.

 Shift calculations to avoid rounding errors */

 find the nearest update rate */

 Individual alarm files */

 Raw alarm file for compatibility */

/*

 * On LM63, temp2_crit can be set only once, which should be job

 * of the bootloader.

 * On LM64, temp2_crit can always be set.

 * On LM96163, temp2_crit can be set if bit 1 of the configuration

 * register is true.

/*

 * Real code

 Return 0 if detection is successful, -ENODEV otherwise */

 National Semiconductor */

/*

 * Ideally we shouldn't have to initialize anything, since the BIOS

 * should have taken care of everything

 Start converting if needed */

 standby */

 Tachometer is always enabled on LM64 */

 We may need pwm1_freq before ever updating the client data */

	/*

	 * For LM96163, check if high resolution PWM

	 * and unsigned temperature format is enabled.

 Show some debug info about the LM63 configuration */

 Set the device type */

 Initialize chip */

 Register sysfs hooks */

 tachometer enabled */

/*

 * Driver data (common to all clients)

 SPDX-License-Identifier: GPL-2.0+

/*

 * hwmon driver for Aquacomputer D5 Next watercooling pump

 *

 * The D5 Next sends HID reports (with ID 0x01) every second to report sensor values

 * (coolant temperature, pump and fan speed, voltage, current and power). It responds to

 * Get_Report requests, but returns a dummy value of no use.

 *

 * Copyright 2021 Aleksa Savic <savicaleksa83@gmail.com>

 In seconds */

 Register offsets for the D5 Next pump */

 Labels for provided values */

 How many times the device was powered on */

 Info provided with every report */

 Sensor readings */

 Aquacomputer D5 Next */

 Request to initialize after the HID bus to ensure it's not being loaded before */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * w83l786ng.c - Linux kernel driver for hardware monitoring

 * Copyright (c) 2007 Kevin Lo <kevlo@kevlo.org>

/*

 * Supports following chips:

 *

 * Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA

 * w83l786ng	3	2	2	2	0x7b	0x5ca3	yes	no

 Addresses to scan */

 Insmod parameters */

 TEMP 0 in DataSheet */

 TEMP 0 Over in DataSheet */

 TEMP 0 Hyst in DataSheet */

 TEMP 1 in DataSheet */

 TEMP 1 Over in DataSheet */

 TEMP 1 Hyst in DataSheet */

 FAN Duty Cycle, be used to control */

 for temp */

/*

 * The analog voltage inputs have 8mV LSB. Since the sysfs output is

 * in mV as would be measured on the chip input pin, need to just

 * multiply/divide by 8 to translate from/to register values.

 true if following fields are valid */

 In jiffies */

	unsigned long last_nonvolatile;	/* In jiffies, last time we update the

	u8 pwm_mode[2];	/* 0->DC variable voltage

	u8 pwm_enable[2]; /* 1->manual

 Update the voltages measured value and limits */

 Update the fan counts and limits */

 Update the fan divisor */

 Update the temperature sensors */

 Update Smart Fan I/II tolerance */

 following are the sysfs callback functions */

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan divisor.  This follows the principle of

 * least surprise; the user doesn't expect the fan minimum to change just

 * because the divisor changed.

 Save fan_min */

 Restore fan_min */

 read/write the temperature, includes measured value and limits */

 only modes 1 and 2 are supported */

 For Smart Fan I/Thermal Cruise and Smart Fan II */

 Detection */

 Identification */

 Winbond */

 W83L786NG */

 Start monitoring */

 Initialize the chip */

 A few vars need to be filled upon startup */

 Update the fan divisor */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel MAX 10 BMC HWMON Driver

 *

 * Copyright (C) 2018-2020 Intel Corporation. All rights reserved.

 *

	/*

	 * BMC Firmware will return 0xdeadbeef if the sensor value is invalid

	 * at that time. This usually happens on sensor channels which connect

	 * to external pluggable modules, e.g. QSFP temperature and voltage.

	 * When the QSFP is unplugged from cage, driver will get 0xdeadbeef

	 * from their registers.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * hwmon.c - part of lm_sensors, Linux kernel modules for hardware monitoring

 *

 * This file defines the sysfs class "hwmon", for use by sensors drivers.

 *

 * Copyright (C) 2005 Mark M. Hoffman <mhoffman@lightlink.com>

/*

 * Thermal zone information

 hwmon tzdata list entry */

 Reference to hwmon device */

 sensor index */

 thermal zone device */

 Thermal zone handling */

/*

 * The complex conditional is necessary to avoid a cyclic dependency

 * between hwmon and thermal_sys modules.

	/*

	 * If CONFIG_THERMAL_OF is disabled, this returns -ENODEV,

	 * so ignore that error but forward any other error.

 IS_REACHABLE(CONFIG_THERMAL) && ... */

 sysfs attribute management */

 The attribute is invisible if there is no template string */

/*

 * Chip attributes are not attribute templates but actual sysfs attributes.

 * See hwmon_genattr() for special handling.

 Complain about invalid characters in hwmon name attribute */

 terminating NULL plus &hwdev->groups */

			/*

			 * Don't worry about hwdev; hwmon_dev_release(), called

			 * from device_unregister(), will free it.

/**

 * hwmon_device_register_with_groups - register w/ hwmon

 * @dev: the parent device

 * @name: hwmon name attribute

 * @drvdata: driver data to attach to created device

 * @groups: List of attribute groups to create

 *

 * hwmon_device_unregister() must be called when the device is no

 * longer needed.

 *

 * Returns the pointer to the new device.

/**

 * hwmon_device_register_with_info - register w/ hwmon

 * @dev: the parent device

 * @name: hwmon name attribute

 * @drvdata: driver data to attach to created device

 * @chip: pointer to hwmon chip information

 * @extra_groups: pointer to list of additional non-standard attribute groups

 *

 * hwmon_device_unregister() must be called when the device is no

 * longer needed.

 *

 * Returns the pointer to the new device.

/**

 * hwmon_device_register - register w/ hwmon

 * @dev: the device to register

 *

 * hwmon_device_unregister() must be called when the device is no

 * longer needed.

 *

 * Returns the pointer to the new device.

/**

 * hwmon_device_unregister - removes the previously registered class device

 *

 * @dev: the class device to destroy

/**

 * devm_hwmon_device_register_with_groups - register w/ hwmon

 * @dev: the parent device

 * @name: hwmon name attribute

 * @drvdata: driver data to attach to created device

 * @groups: List of attribute groups to create

 *

 * Returns the pointer to the new device. The new device is automatically

 * unregistered with the parent device.

/**

 * devm_hwmon_device_register_with_info - register w/ hwmon

 * @dev:	the parent device

 * @name:	hwmon name attribute

 * @drvdata:	driver data to attach to created device

 * @chip:	pointer to hwmon chip information

 * @groups:	pointer to list of driver specific attribute groups

 *

 * Returns the pointer to the new device. The new device is automatically

 * unregistered with the parent device.

/**

 * devm_hwmon_device_unregister - removes a previously registered hwmon device

 *

 * @dev: the parent device of the device to unregister

 Open access to 0x295-0x296 on MSI MS-7031 */

 MSI */

 MS-7031 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2012 Guenter Roeck <linux@roeck-us.net>

 *

 * based on max1668.c

 * Copyright (c) 2011 David George <david.george@ska.ac.za>

 Report local sensor as temp1 */

/*

 * Map device tree / platform data register bit map to chip bit map.

 * Applies to alert register and over-temperature register.

 ms per channel, worst case */

 in milli-seconds */

 in degrees C */

 In jiffies */

 true if following fields are valid */

 1x local and up to 7x remote */

 [nr][0]=temp [1]=ext [2]=max [3]=crit */

 Diode fault status bits on MAX6581 are right shifted by one bit */

 disable the offset for channel if the new offset is 0 */

 There is no offset for local temperature so starting from temp2 */

 channel number */

 attribute index within channel */

 offset reg is only supported on max6581 remote channels */

/*

 * max6697_is_visible uses the index into the following array to determine

 * if attributes should be created or not. Any change in order or content

 * must be matched in max6697_is_visible.

	/*

	 * Don't touch configuration if neither platform data nor OF

	 * configuration was specified. If that is the case, use the

	 * current chip configuration.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * gl520sm.c - Part of lm_sensors, Linux kernel modules for hardware

 *	       monitoring

 * Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl>,

 *			     Kyösti Mälkki <kmalkki@cc.hut.fi>

 * Copyright (c) 2005	Maarten Deprez <maartendeprez@users.sourceforge.net>

 Type of the extra sensor */

 Addresses to scan */

/*

 * Many GL520 constants specified below

 * One of the inputs can be configured as either temp or voltage.

 * That's why _TEMP2 and _IN4 access the same register

 The GL520 registers */

 Client data */

 false until the following fields are valid */

 in jiffies */

 [0] = VVD */

 [0] = VDD */

 [0] = VDD */

/*

 * Registers 0x07 to 0x0c are word-sized, others are byte-sized

 * GL520 uses a high-byte first convention

 Temp1 and Vin4 are the same input */

/*

 * Sysfs stuff

/*

 * Real code

 Return 0 if detection is successful, -ENODEV otherwise */

 Determine the chip type. */

 Called when we have found a new GL520SM. */

 If IRQ# is disabled, we can safely force comparator mode */

 Enable monitoring if needed */

 Initialize the GL520SM chip */

 sysfs hooks */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Texas Instruments TMP512, TMP513 power monitor chips

 *

 * TMP513:

 * Thermal/Power Management with Triple Remote and

 * Local Temperature Sensor and Current Shunt Monitor

 * Datasheet: https://www.ti.com/lit/gpn/tmp513

 *

 * TMP512:

 * Thermal/Power Management with Dual Remote

 *	and Local Temperature Sensor and Current Shunt Monitor

 * Datasheet: https://www.ti.com/lit/gpn/tmp512

 *

 * Copyright (C) 2019 Eric Tremblay <etremblay@distech-controls.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 Common register definition

 TMP513 specific register definition

 Common attrs, and NULL

 Default config

 Mask and shift

 Alarms

 Max and Min value

 Max possible value is -256 to +256 but datasheet indicated -40 to 125.

 Set the shift based on the gain 8=4, 4=3, 2=2, 1=1

		/*

		 * The valus is read in voltage in the chip but reported as

		 * current to the user.

		 * 2's complement number shifted by one to four depending

		 * on the pga gain setting. 1lsb = 10uV

 1lsb = 4mV

 Power = (current * BusVoltage) / 5000

 Current = (ShuntVoltage * CalibrationRegister) / 4096

 1lsb = 0.0625 degrees centigrade

 1lsb = 0.5 degrees centigrade

 Programmer goofed

		/*

		 * The user enter current value and we convert it to

		 * voltage. 1lsb = 10uV

 1lsb = 4mV

 1lsb = 0.0625 degrees centigrade

 1lsb = 0.5 degrees centigrade

 Programmer goofed

/*

 * Calibrate the tmp51x following the datasheet method

	/*

	 * If shunt_uohms is equal to 0, the calibration should be set to 0.

	 * The consequence will be that the current and power measurement engine

	 * of the sensor will not work. Temperature and voltage sensing will

	 * continue to work.

	/*

	 * Calculate the minimal bit resolution for the current and the power.

	 * Those values will be used during register interpretation.

/*

 * Initialize the configuration and calibration registers.

 nFactor configuration

 Read the status register before using as the datasheet propose

 Check if shunt value is compatible with pga-gain

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  w83795.c - Linux kernel driver for hardware monitoring

 *  Copyright (C) 2008 Nuvoton Technology Corp.

 *                Wei Song

 *  Copyright (C) 2010 Jean Delvare <jdelvare@suse.de>

 *

 *  Supports following chips:

 *

 *  Chip       #vin   #fanin #pwm #temp #dts wchipid  vendid  i2c  ISA

 *  w83795g     21     14     8     6     8    0x79   0x5ca3  yes   no

 *  w83795adg   18     14     2     6     8    0x79   0x5ca3  yes   no

 Addresses to scan */

 Multi-Function Pin Ctrl Registers */

/*

 * only crit and crit_hyst affect real-time alarm status

 * current crit crit_hyst warn warn_hyst

 TD1/TR1 */

 TD2/TR2 */

 TD3/TR3 */

 TD4/TR4 */

 TR5 */

 TR6 */

 Current, HL, LL */

 VSEN1 */

 VSEN2 */

 VSEN3 */

 VSEN4 */

 VSEN5 */

 VSEN6 */

 VSEN7 */

 VSEN8 */

 VSEN9 */

 VSEN10 */

 VSEN11 */

 VTT */

 3VDD */

 3VSB */

 VBAT */

 VSEN12 */

 VSEN13 */

 VSEN14 */

 VSEN15 */

 VSEN16 */

 VSEN17 */

 VSEN1-4 */

 VSEN5-8 */

 VSEN9-11 */

 VTT, 3VDD, 3VSB, 3VBAT */

 VSEN12 */

 VSEN13 */

 VSEN14 */

 VSEN15 */

 VSEN16 */

 VSEN17 */

 High/Low LSB shift, LSB No. */

 VSEN1 */

 VSEN2 */

 VSEN3 */

 VSEN4 */

 VSEN5 */

 VSEN6 */

 VSEN7 */

 VSEN8 */

 VSEN9 */

 VSEN10 */

 VSEN11 */

 VTT */

 3VDD */

 3VSB	*/

 VBAT	*/

 VSEN12 */

 VSEN13 */

 VSEN14 */

 VSEN15 */

 VSEN16 */

 VSEN17 */

 3VDD, 3VSB and VBAT: 6 mV/bit; other inputs: 2 mV/bit */

 Best fit for cksel = 0 */

 cksel = 1 can't beat this */

 Best fit for cksel = 1 */

 Choose the closest one */

 In jiffies */

 Enable monitor VIN or not */

 Only in2-0 can have this */

 Register value, read/high/low */

 LSB Register value, high/low */

 has gain: in17-20 * 8 */

 Enable fan14-1 or not */

 Register value combine */

 Register value combine */

 Enable monitor temp6-1 or not */

 current, crit, crit_hyst, warn, warn_hyst */

 Bit vector, 0 = TR, 1 = TD */

 Register value */

	u8 enable_dts;		/*

				 * Enable PECI and SB-TSI,

				 * bit 0: =1 enable, =0 disable,

				 * bit 1: =1 AMD SB-TSI, =0 Intel PECI

 Enable monitor DTS temp */

 Register value */

 Register value */

 Register value */

	u8 has_pwm;		/*

				 * 795g supports 8 pwm, 795adg only supports 2,

				 * no config register, only affected by chip

				 * type

	u8 pwm[8][5];		/*

				 * Register value, output, freq, start,

				 *  non stop, stop time

 CLKIN frequency in kHz */

 Register value */

 Register value */

 Register value */

	u16 target_speed[8];	/*

				 * Register value, target speed for speed

				 * cruise

 tolerance of target speed */

 TTTI, CTFS, HCT, HOT */

 6 temp, temp/dcpwm, 7 registers */

 Register value */

 Register value */

 Register value */

/*

 * Hardware access

 * We assume that nobdody can change the bank outside the driver.

 Must be called with data->update_lock held, except during initialization */

 If the same bank is already set, nothing to do */

 Change to new bank, preserve all other bits */

 Must be called with data->update_lock held, except during initialization */

 Arbitrary */

 Arbitrary */

 Must be called with data->update_lock held, except during initialization */

 Read the voltage limits */

 Read the fan limits */

 Silent false gcc warning */

		/*

		 * Each register contains LSB for 2 fans, but we want to

		 * read it only once to save time

 Read the temperature limits */

 Read the DTS limits */

 Read beep settings */

 Read temperature source selection */

 Read automatic fan speed control settings */

 Read SmartFanIV trip points */

 Read setup PWM */

 Update the voltages value */

 in0-2 can have dynamic limits (W83795G only) */

 Update fan */

 Update temperature */

 Update dts temperature */

 Update pwm output */

	/*

	 * Update intrusion and alarms

	 * It is important to read intrusion first, because reading from

	 * register SMI STS6 clears the interrupt status temporarily.

 Switch to interrupt status for intrusion if needed */

 Switch to real-time alarms */

 Restore original configuration if needed */

/*

 * Sysfs attributes

 BEEP_ENABLE */

 Write 0 to clear chassis alarm */

 Clear status and force cache refresh */

 Speed cruise mode */

 Thermal cruise or SmartFan IV mode */

 Manual mode */

 Clear speed cruise mode bits */

 Clear thermal cruise mode bits */

 DC */

 PWM */

/*

 * Check whether a given temperature source can ever be useful.

 * Returns the number of selectable temperature channels which are

 * enabled.

 Analog */

 Digital */

 Pick high nibble */

 Pick low nibble */

 Look-up the actual temperature channel number */

 Shouldn't happen */

 Check if request can be fulfilled */

 No match */

 Thermal diode */

 Thermistor */

 Only for temp1-4 (temp5-6 can only be thermistor) */

 Thermal diode */

 Thermistor */

 show/store VIN */

 calculate this value again by sensors as sensors3.conf */

/*

 * Don't change the attribute order, _max, _min and _beep are accessed by index

 * somewhere else in the code

/*

 * Don't change the attribute order, _beep is accessed by index

 * somewhere else in the code

/*

 * Don't change the attribute order, _beep is accessed by index

 * somewhere else in the code

/*

 * Don't change the attribute order, _beep is accessed by index

 * somewhere else in the code

/*

 * Driver interface

 in kHz */

 Start monitoring if needed */

	/*

	 * Special case for rev. A chips; can't be checked first because later

	 * revisions emulate this for compatibility

 Return 0 if detection is successful, -ENODEV otherwise */

 Check Nuvoton vendor ID */

 Check device ID */

	/*

	 * If Nuvoton chip, address of chip and W83795_REG_I2C_ADDR

	 * should match

	/*

	 * Check 795 chip type: 795G or 795ADG

	 * Usually we don't write to chips during detection, but here we don't

	 * quite have the choice; hopefully it's OK, we are about to return

	 * success anyway

 We need a wrapper that fits in w83795_handle_files */

 Return immediately if VRM isn't configured */

 Voltage limits in dynamic mode, switch to read-only */

 Check pins that can be used for either temperature or voltage monitoring */

 config is a 2-bit value */

 Voltage monitoring */

 Thermal diode */

 Thermistor */

 Initialize the chip */

 Check which voltages and fans are present */

 Check which analog temperatures and extra voltages are present */

 Check DTS enable status */

 Report PECI Tbase values */

 pwm and smart fan */

 Check if BEEP pin is available */

 The W83795G has a dedicated BEEP pin */

		/*

		 * The W83795ADG has a shared pin for OVT# and BEEP, so you

		 * can't have both

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * emc2103.c - Support for SMSC EMC2103

 * Copyright (c) 2010 SMSC

 Addresses scanned */

 equation 4 from datasheet: rpm = (3932160 * multipler) / count */

/*

 * 2103-2 and 2103-4's 3rd temperature sensor can be connected to two diodes

 * in anti-parallel mode, and in this configuration both can be read

 * independently (so we have 4 temperature inputs).  The device can't

 * detect if it's connected in this mode, so we have to manually enable

 * it.  Default is to leave the device in the state it's already in (-1).

 * This parameter allows APD mode to be optionally forced on or off

 0-7 multiples of 0.125 */

 registers are valid */

 num of temp sensors */

 in jiffies */

 internal + 3 external */

 no fractional part */

 no fractional part */

/*

 * Note: we also update the fan target here, because its value is

 * determined in part by the fan clock divider.  This follows the principle

 * of least surprise; the user doesn't expect the fan target to change just

 * because the divider changed.

 No change */

 update fan target if high byte is not disabled */

 invalidate data to force re-read from hardware */

 high byte of 0xff indicates disabled so return 0 */

 Datasheet states 16384 as maximum RPM target (table 3.2) */

 sensors present on all models */

 extra temperature sensors only present on 2103-2 and 2103-4 */

 extra temperature sensors only present on 2103-2 and 2103-4 in APD mode */

 2103-2 and 2103-4 have 3 external diodes, 2103-1 has 1 */

 2103-1 only has 1 external diode */

 2103-2 and 2103-4 have 3 or 4 external diodes */

 detect current state of hardware */

 force APD state if module parameter is set */

 force APD mode off */

 force APD mode on */

 sysfs hooks */

 LIST END */ }

 Return 0 if detection is successful, -ENODEV otherwise */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm90.c - Part of lm_sensors, Linux kernel modules for hardware

 *          monitoring

 * Copyright (C) 2003-2010  Jean Delvare <jdelvare@suse.de>

 *

 * Based on the lm83 driver. The LM90 is a sensor chip made by National

 * Semiconductor. It reports up to two temperatures (its own plus up to

 * one external one) with a 0.125 deg resolution (1 deg for local

 * temperature) and a 3-4 deg accuracy.

 *

 * This driver also supports the LM89 and LM99, two other sensor chips

 * made by National Semiconductor. Both have an increased remote

 * temperature measurement accuracy (1 degree), and the LM99

 * additionally shifts remote temperatures (measured and limits) by 16

 * degrees, which allows for higher temperatures measurement.

 * Note that there is no way to differentiate between both chips.

 * When device is auto-detected, the driver will assume an LM99.

 *

 * This driver also supports the LM86, another sensor chip made by

 * National Semiconductor. It is exactly similar to the LM90 except it

 * has a higher accuracy.

 *

 * This driver also supports the ADM1032, a sensor chip made by Analog

 * Devices. That chip is similar to the LM90, with a few differences

 * that are not handled by this driver. Among others, it has a higher

 * accuracy than the LM90, much like the LM86 does.

 *

 * This driver also supports the MAX6657, MAX6658 and MAX6659 sensor

 * chips made by Maxim. These chips are similar to the LM86.

 * Note that there is no easy way to differentiate between the three

 * variants. We use the device address to detect MAX6659, which will result

 * in a detection as max6657 if it is on address 0x4c. The extra address

 * and features of the MAX6659 are only supported if the chip is configured

 * explicitly as max6659, or if its address is not 0x4c.

 * These chips lack the remote temperature offset feature.

 *

 * This driver also supports the MAX6654 chip made by Maxim. This chip can

 * be at 9 different addresses, similar to MAX6680/MAX6681. The MAX6654 is

 * otherwise similar to MAX6657/MAX6658/MAX6659. Extended range is available

 * by setting the configuration register accordingly, and is done during

 * initialization. Extended precision is only available at conversion rates

 * of 1 Hz and slower. Note that extended precision is not enabled by

 * default, as this driver initializes all chips to 2 Hz by design.

 *

 * This driver also supports the MAX6646, MAX6647, MAX6648, MAX6649 and

 * MAX6692 chips made by Maxim.  These are again similar to the LM86,

 * but they use unsigned temperature values and can report temperatures

 * from 0 to 145 degrees.

 *

 * This driver also supports the MAX6680 and MAX6681, two other sensor

 * chips made by Maxim. These are quite similar to the other Maxim

 * chips. The MAX6680 and MAX6681 only differ in the pinout so they can

 * be treated identically.

 *

 * This driver also supports the MAX6695 and MAX6696, two other sensor

 * chips made by Maxim. These are also quite similar to other Maxim

 * chips, but support three temperature sensors instead of two. MAX6695

 * and MAX6696 only differ in the pinout so they can be treated identically.

 *

 * This driver also supports ADT7461 and ADT7461A from Analog Devices as well as

 * NCT1008 from ON Semiconductor. The chips are supported in both compatibility

 * and extended mode. They are mostly compatible with LM90 except for a data

 * format difference for the temperature value registers.

 *

 * This driver also supports the SA56004 from Philips. This device is

 * pin-compatible with the LM86, the ED/EDP parts are also address-compatible.

 *

 * This driver also supports the G781 from GMT. This device is compatible

 * with the ADM1032.

 *

 * This driver also supports TMP451 and TMP461 from Texas Instruments.

 * Those devices are supported in both compatibility and extended mode.

 * They are mostly compatible with ADT7461 except for local temperature

 * low byte register and max conversion rate.

 *

 * Since the LM90 was the first chipset supported by this driver, most

 * comments will refer to this chipset, but are actually general and

 * concern all supported chipsets, unless mentioned otherwise.

/*

 * Addresses to scan

 * Address is fully defined internally and cannot be changed except for

 * MAX6659, MAX6680 and MAX6681.

 * LM86, LM89, LM90, LM99, ADM1032, ADM1032-1, ADT7461, ADT7461A, MAX6649,

 * MAX6657, MAX6658, NCT1008 and W83L771 have address 0x4c.

 * ADM1032-2, ADT7461-2, ADT7461A-2, LM89-1, LM99-1, MAX6646, and NCT1008D

 * have address 0x4d.

 * MAX6647 has address 0x4e.

 * MAX6659 can have address 0x4c, 0x4d or 0x4e.

 * MAX6654, MAX6680, and MAX6681 can have address 0x18, 0x19, 0x1a, 0x29,

 * 0x2a, 0x2b, 0x4c, 0x4d or 0x4e.

 * SA56004 can have address 0x48 through 0x4F.

/*

 * The LM90 registers

 MAX6646/6647/6649/6654/6657/6658/6659/6695/6696 registers */

  SA56004 registers */

 Maximum conversion rate in ms */

 TMP451/TMP461 registers */

/*

 * Device flags

 ADT7461 extended mode	*/

 Device features */

 temperature offset register	*/

 extended remote limit	*/

 3rd upper (emergency) limit	*/

 emergency alarm		*/

 3rd temperature sensor	*/

 Broken alert		*/

 extended temperature support*/

 Pause conversion for config	*/

 LM90 status */

 local THERM limit tripped */

 remote THERM limit tripped */

 remote is an open circuit */

 remote low temp limit tripped */

 remote high temp limit tripped */

 local low temp limit tripped */

 local high temp limit tripped */

 remote2 THERM limit tripped */

 remote2 is an open circuit */

 remote2 low temp limit tripped */

 remote2 high temp limit tripped */

 remote emergency limit tripped */

 remote2 emergency limit tripped */

 local emergency limit tripped */

/*

 * Driver data (common to all clients)

/*

 * chip type specific parameters

 Capabilities */

 Which alarm bits trigger ALERT# */

 Upper 8 bits for max6695/96 */

 Maximum conversion rate register value */

 Extended local temp register (optional) */

/*

 * TEMP8 register index

 max6659 and max6695/96 */

 max6659 and max6695/96 */

 max6695/96 only */

 max6695/96 only */

/*

 * TEMP11 register index

 except max6646, max6657/58/59, and max6695/96 */

 max6695/96 only */

 max6695/96 only */

 max6695/96 only */

/*

 * Client data (each client gets its own)

 true if register values are valid */

 in jiffies */

 in milliseconds */

 Current configuration register value */

 Original configuration register value */

 Original conversion rate register value */

 Which alarm bits trigger ALERT# */

 Upper 8 bits for max6695/96 */

 Maximum conversion rate */

 local extension register offset */

 registers values */

 bitvector (upper 8 bits for max6695/96) */

/*

 * Support functions

/*

 * The ADM1032 supports PEC but not on write byte transactions, so we need

 * to explicitly ask for a transaction without PEC.

/*

 * It is assumed that client->update_lock is held (unless we are in

 * detection or initialization steps). This matters when PEC is enabled,

 * because we don't want the address pointer to change between the write

 * byte and the read byte transactions.

	/*

	 * There is a trick here. We have to read two registers to have the

	 * sensor temperature, but we have to beware a conversion could occur

	 * between the readings. The datasheet says we should either use

	 * the one-shot conversion register, which we don't want to do

	 * (disables hardware monitoring) or monitor the busy bit, which is

	 * impossible (we can't read the values and monitor that bit at the

	 * exact same time). So the solution used here is to read the high

	 * byte once, then the low byte, then the high byte again. If the new

	 * high byte matches the old one, then we have a valid reading. Else

	 * we have to read the low byte again, and now we believe we have a

	 * correct reading.

/*

 * client->update_lock must be held when calling this function (unless we are

 * in detection or initialization steps), and while a remote channel other

 * than channel 0 is selected. Also, calling code must make sure to re-select

 * external channel 0 before releasing the lock. This is necessary because

 * various registers have different meanings as a result of selecting a

 * non-default remote channel.

 Save config and pause conversion */

 Set conv rate */

 Revert change to config */

/*

 * Set conversion rate.

 * client->update_lock must be held when calling this function (unless we are

 * in detection or initialization steps).

 Shift calculations to avoid rounding errors */

 find the nearest update rate */

 lower 8 bit of alarms */

		/*

		 * Re-enable ALERT# output if it was originally enabled and

		 * relevant alarms are all clear

/*

 * Conversions

 * For local temperatures and limits, critical limits and the hysteresis

 * value, the LM90 uses signed 8-bit values with LSB = 1 degree Celsius.

 * For remote temperatures and limits, it uses signed 11-bit values with

 * LSB = 0.125 degree Celsius, left-justified in 16-bit registers.  Some

 * Maxim chips use unsigned values.

/*

 * ADT7461 in compatibility mode is almost identical to LM90 except that

 * attempts to write values that are outside the range 0 < temp < 127 are

 * treated as the boundary value.

 *

 * ADT7461 in "extended mode" operation uses unsigned integers offset by

 * 64 (e.g., 0 -> -64 degC).  The range is restricted to -64..191 degC.

 pec used for ADM1032 only */

 +16 degrees offset for temp2 for the LM99 */

 +16 degrees offset for temp2 for the LM99 */

 prevent integer underflow */

 +16 degrees offset for temp2 for the LM99 */

 +16 degrees offset for temp2 for the LM99 */

 prevent integer underflow */

 +16 degrees offset for temp2 for the LM99 */

 prevent integer underflow */

 Return 0 if detection is successful, -ENODEV otherwise */

 detection and identification */

 Make compiler happy */

 National Semiconductor */

 LM90 */

 LM89/LM99 */

 LM86 */

 Analog Devices */

 ADM1032 */

			/*

			 * The ADM1032 supports PEC, but only if combined

			 * transactions are not used.

 ADT7461 */

 ADT7461A, NCT1008 */

 Maxim */

		/*

		 * We read MAX6659_REG_R_REMOTE_EMERG twice, and re-read

		 * LM90_REG_R_MAN_ID in between. If MAX6659_REG_R_REMOTE_EMERG

		 * exists, both readings will reflect the same value. Otherwise,

		 * the readings will be different.

		/*

		 * The MAX6657, MAX6658 and MAX6659 do NOT have a chip_id

		 * register. Reading from that address will return the last

		 * read value, which in our case is those of the man_id

		 * register. Likewise, the config1 register seems to lack a

		 * low nibble, so the value will be those of the previous

		 * read, so in our case those of the man_id register.

		 * MAX6659 has a third set of upper temperature limit registers.

		 * Those registers also return values on MAX6657 and MAX6658,

		 * thus the only way to detect MAX6659 is by its address.

		 * For this reason it will be mis-detected as MAX6657 if its

		 * address is 0x4C.

		/*

		 * Even though MAX6695 and MAX6696 do not have a chip ID

		 * register, reading it returns 0x01. Bit 4 of the config1

		 * register is unused and should return zero when read. Bit 0 of

		 * the status2 register is unused and should return zero when

		 * read.

		 *

		 * MAX6695 and MAX6696 have an additional set of temperature

		 * limit registers. We can detect those chips by checking if

		 * one of those registers exists.

		/*

		 * The chip_id register of the MAX6680 and MAX6681 holds the

		 * revision of the chip. The lowest bit of the config1 register

		 * is unused and should return zero when read, so should the

		 * second to last bit of config1 (software reset).

		/*

		 * The chip_id register of the MAX6646/6647/6649 holds the

		 * revision of the chip. The lowest 6 bits of the config1

		 * register are unused and should return zero when read.

		/*

		 * The chip_id of the MAX6654 holds the revision of the chip.

		 * The lowest 3 bits of the config1 register are unused and

		 * should return zero when read.

 Winbond/Nuvoton */

 W83L771W/G */

 W83L771AWG/ASG */

  NXP Semiconductor/Philips */

 GMT */

 G781 */

 identification failed */

 Restore initial configuration */

	/*

	 * Start the conversions.

 500ms; 2Hz conversion rate */

 Check Temperature Range Select */

	/*

	 * Put MAX6680/MAX8881 into extended resolution (bit 0x10,

	 * 0.125 degree resolution) and range (0x08, extend range

	 * to -64 degree) mode for the remote temperature sensor.

	/*

	 * Put MAX6654 into extended range (0x20, extend minimum range from

	 * 0 degrees to -64 degrees). Note that extended resolution is not

	 * possible on the MAX6654 unless conversion rate is set to 1 Hz or

	 * slower, which is intentionally not done by default.

	/*

	 * Select external channel 0 for max6695/96

	/*

	 * Interrupt is enabled by default on reset, but it may be disabled

	 * by bootloader, unmask it.

 run */

 Set the device type */

	/*

	 * Different devices have different alarm bits triggering the

	 * ALERT# output

 Set chip capabilities */

 Set maximum conversion rate */

 Initialize the LM90 chip */

	/*

	 * The 'pec' attribute is attached to the i2c device and thus created

	 * separately.

		/*

		 * Disable ALERT# output, because these chips don't implement

		 * SMBus alert correctly; they should only hold the alert line

		 * low briefly.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm75.c - Part of lm_sensors, Linux kernel modules for hardware

 *	 monitoring

 * Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl>

/*

 * This driver handles the LM75 and compatible digital temperature sensors.

 keep sorted in alphabetical order */

/**

 * struct lm75_params - lm75 configuration parameters.

 * @set_mask:		Bits to set in configuration register when configuring

 *			the chip.

 * @clr_mask:		Bits to clear in configuration register when configuring

 *			the chip.

 * @default_resolution:	Default number of bits to represent the temperature

 *			value.

 * @resolution_limits:	Limit register resolution. Optional. Should be set if

 *			the resolution of limit registers does not match the

 *			resolution of the temperature register.

 * @resolutions:	List of resolutions associated with sample times.

 *			Optional. Should be set if num_sample_times is larger

 *			than 1, and if the resolution changes with sample times.

 *			If set, number of entries must match num_sample_times.

 * @default_sample_time:Sample time to be set by default.

 * @num_sample_times:	Number of possible sample times to be set. Optional.

 *			Should be set if the number of sample times is larger

 *			than one.

 * @sample_times:	All the possible sample times to be set. Mandatory if

 *			num_sample_times is larger than 1. If set, number of

 *			entries must match num_sample_times.

 Addresses scanned */

 The LM75 registers */

 Each client has this additional data */

 In bits, 9 to 16 */

 In ms */

-----------------------------------------------------------------------*/

/* The structure below stores the configuration values of the supported devices.

 * In case of being supported multiple configurations, the default one must

 * always be the first element of the array

 not one-shot mode */

 11-bit mode */

 11-bit mode */

 11-bit mode */

 12-bit mode*/

 12-bit mode */

 not one-shot mode */

 12-bit mode */

 not one-shot mode */

 12-bit mode */

 not one-shot mode */

 12-bit mode */

 not one-shot mode*/

 8 samples / second */

 no one-shot mode*/

 12-bit mode */

 not one-shot mode*/

 12-bit mode */

 not one-shot mode*/

 12-bit mode */

 not one-shot mode*/

 not one-shot mode, Conversion rate 37Hz */

not one-shot mode*/

 not one-shot mode, 27.5 ms sample rate */

	/*

	 * Resolution of limit registers is assumed to be the same as the

	 * temperature input register resolution unless given explicitly.

	/* Set to LM75 resolution (9 bits, 1/2 degree C) and range.

	 * Then tweak to be more precise when appropriate.

 Save default sample time and resolution*/

 Enable the power */

 Cache original configuration */

 LIST END */ }

 Return 0 if detection is successful, -ENODEV otherwise */

	/*

	 * Now, we do the remaining detection. There is no identification-

	 * dedicated register so we have to rely on several tricks:

	 * unused bits, registers cycling over 8-address boundaries,

	 * addresses 0x04-0x07 returning the last read value.

	 * The cycling+unused addresses combination is not tested,

	 * since it would significantly slow the detection down and would

	 * hardly add any value.

	 *

	 * The National Semiconductor LM75A is different than earlier

	 * LM75s.  It has an ID byte of 0xaX (where X is the chip

	 * revision, with 1 being the only revision in existence) in

	 * register 7, and unused registers return 0xff rather than the

	 * last read value.

	 *

	 * Note that this function only detects the original National

	 * Semiconductor LM75 and the LM75A. Clones from other vendors

	 * aren't detected, on purpose, because they are typically never

	 * found on PC hardware. They are found on embedded designs where

	 * they can be instantiated explicitly so detection is not needed.

	 * The absence of identification registers on all these clones

	 * would make their exhaustive detection very difficult and weak,

	 * and odds are that the driver would bind to unsupported devices.

 Unused bits */

 First check for LM75A */

		/*

		 * LM75A returns 0xff on unused registers so

		 * just to be sure we check for that too.

 Traditional style LM75 detection */

 Unused addresses */

	/*

	 * It is very unlikely that this is a LM75 if both

	 * hysteresis and temperature limit registers are 0.

 Addresses cycling */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * An hwmon driver for the Microchip TC74

 *

 * Copyright 2015 Maciej Szmigiero <mail@maciej.szmigiero.name>

 *

 * Based on ad7414.c:

 *	Copyright 2006 Stefan Roese, DENX Software Engineering

 *	Copyright 2008 Sean MacLennan, PIKA Technologies

 *	Copyright 2008 Frank Edelhaeuser, Spansion Inc.

 TC74 registers */

 atomic read data updates */

 validity of fields below */

 In jiffies */

 Temp value in dC */

 not ready yet */

 Make sure the chip is powered up. */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Sensirion SHTC1 humidity and temperature sensor driver

 *

 * Copyright (C) 2014 Sensirion AG, Switzerland

 * Author: Johannes Winkelmann <johannes.winkelmann@sensirion.com>

 commands (high precision mode) */

 commands (low precision mode) */

 command for reading the ID register */

/*

 * constants for reading the ID register

 * SHTC1: 0x0007 with mask 0x003f

 * SHTW1: 0x0007 with mask 0x003f

 * SHTC3: 0x0807 with mask 0x083f

 delays for non-blocking i2c commands, both in us */

 in jiffies */

 in us */

 1000 * temperature in dgr C */

 1000 * relative humidity in %RH */

	/*

	 * In blocking mode (clock stretching mode) the I2C bus

	 * is blocked for other traffic, thus the call to i2c_master_recv()

	 * will wait until the data is ready. For non blocking mode, we

	 * have to wait ourselves.

 sysfs attributes */

		/*

		 * From datasheet:

		 * T = -45 + 175 * ST / 2^16

		 * RH = 100 * SRH / 2^16

		 *

		 * Adapted for integer fixed point (3 digit) arithmetic.

 device ID table */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * LM73 Sensor driver

 * Based on LM75

 *

 * Copyright (C) 2007, CenoSYS (www.cenosys.com).

 * Copyright (C) 2009, Bollore telecom (www.bolloretelecom.eu).

 *

 * Guillaume Ligneul <guillaume.ligneul@gmail.com>

 * Adrien Demarez <adrien.demarez@bolloretelecom.eu>

 * Jeremy Laine <jeremy.laine@bolloretelecom.eu>

 * Chris Verges <kg4ysn@gmail.com>

 Addresses scanned */

 LM73 registers */

 0x0190, byte-swapped */

 11-bits (0.25000 C/LSB): RES1 Bit = 0, RES0 Bit = 0 */

 12-bits (0.12500 C/LSB): RES1 Bit = 0, RES0 Bit = 1 */

 13-bits (0.06250 C/LSB): RES1 Bit = 1, RES0 Bit = 0 */

 14-bits (0.03125 C/LSB): RES1 Bit = 1, RES0 Bit = 1 */

 control register value */

-----------------------------------------------------------------------*/

 Write value */

	/* use integer division instead of equivalent right shift to

	/*

	 * Convert the desired conversion rate into register bits.

	 * res is already initialized, and everything past the second-to-last

	 * value in the array is treated as belonging to the last value

	 * in the array.

-----------------------------------------------------------------------*/

 sysfs attributes for hwmon */

-----------------------------------------------------------------------*/

 device probe and removal */

 LIST END */ }

 Return 0 if detection is successful, -ENODEV otherwise */

	/*

	 * Do as much detection as possible with byte reads first, as word

	 * reads can confuse other devices.

 Check device ID */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * sbtsi_temp.c - hwmon driver for a SBI Temperature Sensor Interface (SB-TSI)

 *                compliant AMD SoC temperature device.

 *

 * Copyright (c) 2020, Google Inc.

 * Copyright (c) 2020, Kun Yi <kunyi@google.com>

/*

 * SB-TSI registers only support SMBus byte data access. "_INT" registers are

 * the integer part of a temperature value or limit, and "_DEC" registers are

 * corresponding decimal parts.

 RO */

 RO */

 RO */

 RW */

 RW */

 RW */

 RW */

 RW */

 Each client has this additional data */

/*

 * From SB-TSI spec: CPU temperature readings and limit registers encode the

 * temperature in increments of 0.125 from 0 to 255.875. The "high byte"

 * register encodes the base-2 of the integer portion, and the upper 3 bits of

 * the "low byte" encode in base-2 the decimal portion.

 *

 * e.g. INT=0x19, DEC=0x20 represents 25.125 degrees Celsius

 *

 * Therefore temperature in millidegree Celsius =

 *   (INT + DEC / 256) * 1000 = (INT * 8 + DEC / 32) * 125

/*

 * Inversely, given temperature in millidegree Celsius

 *   INT = (TEMP / 125) / 8

 *   DEC = ((TEMP / 125) % 8) * 32

 * Caller have to make sure temp doesn't exceed 255875, the max valid value.

		/*

		 * ReadOrder bit specifies the reading order of integer and

		 * decimal part of CPU temp for atomic reads. If bit == 0,

		 * reading integer part triggers latching of the decimal part,

		 * so integer part should be read first. If bit == 1, read

		 * order should be reversed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * atxp1.c - kernel module for setting CPU VID and general purpose

 *	     I/Os using the Attansic ATXP1 chip.

 *

 * The ATXP1 can reside on I2C addresses 0x37 or 0x4e. The chip is

 * not auto-detected by the driver and must be instantiated explicitly.

 * See Documentation/i2c/instantiating-devices.rst for more information.

 VID output register */

 VID input from CPU */

 General purpose I/O register 1 */

 General purpose I/O register 2 */

 Detected CPU VRM */

 Update local register data */

 sys file functions for cpu0_vid */

 Calculate VID */

	/*

	 * If output enabled, use control register value.

	 * Otherwise original CPU VID

 Nothing changed, aborting */

 Write every 25 mV step to increase stability */

/*

 * CPU core reference voltage

 * unit: millivolt

 sys file functions for GPIO1 */

/*

 * GPIO1 data register

 * unit: Four bit as hex (e.g. 0x0f)

 sys file functions for GPIO2 */

/*

 * GPIO2 data register

 * unit: Eight bit as hex (e.g. 0xff)

 Get VRM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * g762 - Driver for the Global Mixed-mode Technology Inc. fan speed

 *        PWM controller chips from G762 family, i.e. G762 and G763

 *

 * Copyright (C) 2013, Arnaud EBALARD <arno@natisbad.org>

 *

 * This work is based on a basic version for 2.6.31 kernel developed

 * by Olivier Mouchet for LaCie. Updates and correction have been

 * performed to run on recent kernels. Additional features, like the

 * ability to configure various characteristics via .dts file or

 * board init file have been added. Detailed datasheet on which this

 * development is based is available here:

 *

 *  http://natisbad.org/NAS/refs/GMT_EDS-762_763-080710-0.2.pdf

 *

 * Headers from previous developments have been kept below:

 *

 * Copyright (c) 2009 LaCie

 *

 * Author: Olivier Mouchet <olivier.mouchet@gmail.com>

 *

 * based on g760a code written by Herbert Valerio Riedel <hvr@gnu.org>

 * Copyright (C) 2007  Herbert Valerio Riedel <hvr@gnu.org>

 *

 * g762: minimal datasheet available at:

 *       http://www.gmt.com.tw/product/datasheet/EDS-762_3.pdf

 Config register bits */

 enable fan_fail signal */

 enable fan_out_of_control */

 out mode: PWM or DC */

 fan mode: closed/open-loop */

 clock divisor value */

 PWM polarity */

 pulse per fan revolution */

 fan gear mode */

 fan startup voltage */

 fan fail */

 fan out of control */

 Config register values */

 Register data is read (and cached) at most once per second. */

/*

 * Extract pulse count per fan revolution value (2 or 4) from given

 * FAN_CMD1 register value.

/*

 * Extract fan clock divisor (1, 2, 4 or 8) from given FAN_CMD1

 * register value.

/*

 * Extract fan gear mode multiplier value (0, 2 or 4) from given

 * FAN_CMD2 register value.

 update mutex */

 board specific parameters. */

 g762 register cache */

 in jiffies */

 controls fan rotation speed in closed-loop mode */

 provides access to current fan RPM value */

	u8 fan_sta;  /* bit 0: set when actual fan speed is more than

		      *        25% outside requested fan speed

		      * bit 1: set when no transition occurs on fan

		      *        pin for 0.7s

 controls fan rotation speed in open-loop mode */

	u8 fan_cmd1; /*   0: FG_PLS_ID0 FG pulses count per revolution

		      *      0: 2 counts per revolution

		      *      1: 4 counts per revolution

		      *   1: PWM_POLARITY 1: negative_duty

		      *                   0: positive_duty

		      * 2,3: [FG_CLOCK_ID0, FG_CLK_ID1]

		      *         00: Divide fan clock by 1

		      *         01: Divide fan clock by 2

		      *         10: Divide fan clock by 4

		      *         11: Divide fan clock by 8

		      *   4: FAN_MODE 1:closed-loop, 0:open-loop

		      *   5: OUT_MODE 1:PWM, 0:DC

		      *   6: DET_FAN_OOC enable "fan ooc" status

		      *   7: DET_FAN_FAIL enable "fan fail" status

	u8 fan_cmd2; /* 0,1: FAN_STARTV 0,1,2,3 -> 0,32,64,96 dac_code

		      * 2,3: FG_GEAR_MODE

		      *         00: multiplier = 1

		      *         01: multiplier = 2

		      *         10: multiplier = 4

		      *   4: Mask ALERT# (g763 only)

/*

 * Convert count value from fan controller register (FAN_SET_CNT) into fan

 * speed RPM value. Note that the datasheet documents a basic formula;

 * influence of additional parameters (fan clock divisor, fan gear mode)

 * have been infered from examples in the datasheet and tests.

 setting cnt to 255 stops the fan */

/*

 * Convert fan RPM value from sysfs into count value for fan controller

 * register (FAN_SET_CNT).

 to stop the fan, set cnt to 255 */

 helper to grab and cache data, at most one time per second */

 upon error, encode it in return value */

 helpers for writing hardware parameters */

/*

 * Set input clock frequency received on CLK pin of the chip. Accepted values

 * are between 0 and 0xffffff. If zero is given, then default frequency

 * (32,768Hz) is used. Note that clock frequency is a characteristic of the

 * system but an internal parameter, i.e. value is not passed to the device.

 Set pwm mode. Accepts either 0 (PWM mode) or 1 (DC mode) */

 Set fan clock divisor. Accepts either 1, 2, 4 or 8. */

 Set fan gear mode. Accepts either 0, 1 or 2. */

 Set number of fan pulses per revolution. Accepts either 2 or 4. */

 Set fan mode. Accepts either 1 (open-loop) or 2 (closed-loop). */

		/*

		 * BUG FIX: if SET_CNT register value is 255 then, for some

		 * unknown reason, fan will not rotate as expected, no matter

		 * the value of SET_OUT (to be specific, this seems to happen

		 * only in PWM mode). To workaround this bug, we give SET_CNT

		 * value of 254 if it is 255 when switching to open-loop.

 Set PWM polarity. Accepts either 0 (positive duty) or 1 (negative duty) */

/*

 * Set pwm value. Accepts values between 0 (stops the fan) and

 * 255 (full speed). This only makes sense in open-loop mode.

/*

 * Set fan RPM value. Can be called both in closed and open-loop mode

 * but effect will only be seen after closed-loop mode is configured.

 Set fan startup voltage. Accepted values are either 0, 1, 2 or 3. */

/*

 * Helper to import hardware characteristics from .dts file and push

 * those to the chip.

/*

 * Grab clock (a required property), enable it, get (fixed) clock frequency

 * and store it. Note: upon success, clock has been prepared and enabled; it

 * must later be unprepared and disabled (e.g. during module unloading) by a

 * call to g762_of_clock_disable(). Note that a reference to clock is kept

 * in our private data structure to be used in this function.

/*

 * Helper to import hardware characteristics from .dts file and push

 * those to the chip.

/*

 * sysfs attributes

/*

 * Read function for fan1_input sysfs file. Return current fan RPM value, or

 * 0 if fan is out of control.

 reverse logic: fan out of control reporting is enabled low */

/*

 * Read and write functions for pwm1_mode sysfs file. Get and set fan speed

 * control mode i.e. PWM (1) or DC (0).

/*

 * Read and write functions for fan1_div sysfs file. Get and set fan

 * controller prescaler value

/*

 * Read and write functions for fan1_pulses sysfs file. Get and set number

 * of tachometer pulses per fan revolution.

/*

 * Read and write functions for pwm1_enable. Get and set fan speed control mode

 * (i.e. closed or open-loop).

 *

 * Following documentation about hwmon's sysfs interface, a pwm1_enable node

 * should accept the following:

 *

 *  0 : no fan speed control (i.e. fan at full speed)

 *  1 : manual fan speed control enabled (use pwm[1-*]) (open-loop)

 *  2+: automatic fan speed control enabled (use fan[1-*]_target) (closed-loop)

 *

 * but we do not accept 0 as this mode is not natively supported by the chip

 * and it is not emulated by g762 driver. -EINVAL is returned in this case.

/*

 * Read and write functions for pwm1 sysfs file. Get and set pwm value

 * (which affects fan speed) in open-loop mode. 0 stops the fan and 255

 * makes it run at full speed.

/*

 * Read and write function for fan1_target sysfs file. Get/set the fan speed in

 * closed-loop mode. Speed is given as a RPM value; then the chip will regulate

 * the fan speed using pulses from fan tachometer.

 *

 * Refer to rpm_from_cnt() implementation above to get info about count number

 * calculation.

 *

 * Also note that due to rounding errors it is possible that you don't read

 * back exactly the value you have set.

 read function for fan1_fault sysfs file. */

/*

 * read function for fan1_alarm sysfs file. Note that OOC condition is

 * enabled low

 Driver data */

/*

 * Enable both fan failure detection and fan out of control protection. The

 * function does not protect change/access to data structure; it must thus

 * only be called during initialization.

 Enable fan failure detection and fan out of control protection */

 Get configuration via DT ... */

 ... or platform_data */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * A hwmon driver for the Analog Devices ADT7462

 * Copyright (C) 2008 IBM

 *

 * Author: Darrick J. Wong <darrick.wong@oracle.com>

 Addresses to scan */

 ADT7462 registers */

 cfg0 */

 cfg1 */

 cfg2 */

 cfg3 */

/*

 * The chip can measure 13 different voltage sources:

 *

 * 1. +12V1 (pin 7)

 * 2. Vccp1/+2.5V/+1.8V/+1.5V (pin 23)

 * 3. +12V3 (pin 22)

 * 4. +5V (pin 21)

 * 5. +1.25V/+0.9V (pin 19)

 * 6. +2.5V/+1.8V (pin 15)

 * 7. +3.3v (pin 13)

 * 8. +12V2 (pin 8)

 * 9. Vbatt/FSB_Vtt (pin 26)

 * A. +3.3V/+1.2V1 (pin 25)

 * B. Vccp2/+2.5V/+1.8V/+1.5V (pin 24)

 * C. +1.5V ICH (only if BOTH pin 28/29 are set to +1.5V)

 * D. +1.5V 3GPIO (only if BOTH pin 28/29 are set to +1.5V)

 *

 * Each of these 13 has a factor to convert raw to voltage.  Even better,

 * the pins can be connected to other sensors (tach/gpio/hot/etc), which

 * makes the bookkeeping tricky.

 *

 * Some, but not all, of these voltages have low/high limits.

 datasheet only mentions a revision 4 */

 How often do we reread sensors values? (In jiffies) */

 How often do we reread sensor limit values? (In jiffies) */

 datasheet says to divide this number by the fan reading to get fan rpm */

 In jiffies */

 In jiffies */

 bits 6-7 are quarter pieces of temp */

 only one per chip */

/*

 * 16-bit registers on the ADT7462 are low-byte first.  The data sheet says

 * that the low byte must be read before the high byte.

 For some reason these registers are not contiguous. */

 Voltage registers are scattered everywhere */

 Provide labels for sysfs */

 Multipliers are actually in uV, not mV. */

 Map Trange register values to mC */

		/*

		 * Reading the fractional register locks the integral

		 * register until both have been read.

 convert from uV to mV */

 convert mV to uV */

 convert from uV to mV */

 convert mV to uV */

 convert from uV to mV */

 Only the MSB of the min fan period is stored... */

 package things up */

 tmax = tmin + trange */

 trange = tmax - tmin */

 off */

 manual */

 automatic */

 off */

 manual */

 temp[1234] only */

 temp1 & temp4  */

 Return 0 if detection is successful, -ENODEV otherwise */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * thmc50.c - Part of lm_sensors, Linux kernel modules for hardware

 *	      monitoring

 * Copyright (C) 2007 Krzysztof Helt <krzysztof.h1@wp.pl>

 * Based on 2.4 driver by Frodo Looijaard <frodol@dds.nl> and

 * Philip Edelbrock <phil@netroedge.com>

 Addresses to scan */

 Insmod parameters */

 Many THMC50 constants specified below */

 The THMC50 registers */

/*

 * The mirror status register cannot be used as

 * reading it does not clear alarms.

 Each client has this additional data */

 In jiffies */

 !=0 if it is ADM1022 in temp3 mode */

 true if following fields are valid */

 Register values */

 There is only one PWM mode = DC */

 Temperatures */

 for ADM1022 3rd temperature mode */

 Return 0 if detection is successful, -ENODEV otherwise */

 enable 2nd remote temp */

 set up to at least 1 */

 start the chip if it is in standby mode */

 sysfs hooks */

 Register additional ADM1022 sysfs hooks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * powr1220.c - Driver for the Lattice POWR1220 programmable power supply

 * and monitor. Users can read all ADC inputs along with their labels

 * using the sysfs nodes.

 *

 * Copyright (c) 2014 Echo360 https://www.echo360.com

 * Scott Kanowitz <skanowitz@echo360.com> <scott.kanowitz@gmail.com>

 the next value is in jiffies */

 values */

 Reads the specified ADC channel */

		/*

		 * figure out if we need to use the attenuator for

		 * high inputs or inputs that we don't yet have a measurement

		 * for. We dynamically set the attenuator depending on the

		 * max reading.

 set the attenuator and mux */

		/*

		 * wait at least Tconvert time (200 us) for the

		 * conversion to complete

 get the ADC reading */

 get the upper half of the reading */

 now convert the reading to a voltage */

 Shows the voltage associated with the specified ADC channel */

 Shows the maximum setting associated with the specified ADC channel */

 Shows the label associated with the specified ADC channel */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Raspberry Pi voltage sensor driver

 *

 * Based on firmware/raspberrypi.c by Noralf Trønnes

 *

 * Copyright (C) 2018 Stefan Wahren <stefan.wahren@i2se.com>

 Request firmware to clear sticky bits */

	/*

	 * We can't run faster than the sticky shift (100ms) since we get

	 * flipping in the sticky bits that are cleared.

 Parent driver assure that firmware is correct */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2014-2018 Nuvoton Technology corporation.

 NPCM7XX PWM registers */

 Define the maximum PWM channel number */

 Define the Counter Register, value = 100 for match 100% */

 default all PWM channels PRESCALE2 = 1 */

 NPCM7XX FAN Tacho registers */

 FAN General Definition */

 Define the maximum FAN channel number */

/*

 * Get Fan Tach Timeout (base on clock 214843.75Hz, 1 cnt = 4.654us)

 * Timeout 94ms ~= 0x5000

 * (The minimum FAN speed could to support ~640RPM/pulse 1,

 * 320RPM/pulse 2, ...-- 10.6Hz)

 Obtain the fan number */

 fan sample status */

	/*

	 * Config PWM Comparator register for setting duty cycle

 write new CMR value  */

 Disable PWM */

 Enable PWM */

 to check whether any fan tach is enable */

 reset status */

		/*

		 * the interrupt enable bits do not need to be cleared before

		 * it sets, the interrupt enable bits are cleared only on reset.

		 * the clock unit control register is behaving in the same

		 * manner that the interrupt enable register behave.

 enable interrupt */

 start to Capture */

 enable interrupt */

 start to Capture */

/*

 * Enable a background timer to poll fan tach value, (200ms * 4)

 * to polling all fan

	/*

	 * Polling two module per one round,

	 * FAN01 & FAN89 / FAN23 & FAN1011 / FAN45 & FAN1213 / FAN67 & FAN1415

 clear the flag and reset the counter (TCNT) */

 reset the timer interval */

 clear capature flag, H/W will auto reset the NPCM7XX_FAN_TCNTx */

 First capture, drop it */

 reset counter */

		/*

		 * collect the enough sample,

		 * (ex: 2 pulse fan need to get 2 sample)

 get enough sample or fan disable */

 compute finial average cnt per pulse */

 disable interrupt */

 stop capturing */

 disable interrupt */

 clear interrupt flag */

 stop capturing */

		/*

		 *  If timeout occurs (NPCM7XX_FAN_TIMEOUT), the fan doesn't

		 *  connect or speed is lower than 10.6Hz (320RPM/pulse2).

		 *  In these situation, the RPM output should be zero.

 input capture is occurred */

 Convert the raw reading to RPM */

 Adjust NPCM7xx PWMs output frequency to ~25Khz */

 If prescale_val = 0, then the prescale output clock is stopped */

	/*

	 * prescale_val need to decrement in one because in the PWM Prescale

	 * register the Prescale value increment by one

 Setting PWM Prescale Register value register to both modules */

 stop FAN0~7 clock */

 disable all interrupt */

 clear all interrupt */

 set FAN0~7 clock prescaler */

 set FAN0~7 mode (high-to-low transition) */

 set FAN0~7 Initial Count/Cap */

 set FAN0~7 compare (equal to count) */

 set FAN0~7 compare value */

 set FAN0~7 fan input FANIN 0~15 */

 Fan tach input clock = APB clock / prescalar, default is 255. */

 fan timer initialization */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * STTS751 sensor driver

 *

 * Copyright (C) 2016-2017 Istituto Italiano di Tecnologia - RBCS - EDL

 * Robotics, Brain and Cognitive Sciences department

 * Electronic Design Laboratory

 *

 * Written by Andrea Merello <andrea.merello@gmail.com>

 *

 * Based on  LM95241 driver and LM90 driver

 STTS751-0 */

 STTS751-1 */

/*

 * Possible update intervals are (in mS):

 * 16000, 8000, 4000, 2000, 1000, 500, 250, 125, 62.5, 31.25

 * However we are not going to complicate things too much and we stick to the

 * approx value in mS.

/*

 * These functions converts temperature from HW format to integer format and

 * vice-vers. They are (mostly) taken from lm90 driver. Unit is in mC.

 10 bits */

 11 bits */

 12 bits */

	/*

	 * There is a trick here, like in the lm90 driver. We have to read two

	 * registers to get the sensor temperature, but we have to beware a

	 * conversion could occur between the readings. We could use the

	 * one-shot conversion register, but we don't want to do this (disables

	 * hardware monitoring). So the solution used here is to read the high

	 * byte once, then the low byte, then the high byte again. If the new

	 * high byte matches the old one, then we have a valid reading. Else we

	 * have to read the low byte again, and now we believe we have a correct

	 * reading.

/*

 * Update alert flags without waiting for cache to expire. We detects alerts

 * immediately for the sake of the alert handler; we still need to deal with

 * caching to workaround the fact that alarm flags int the status register,

 * despite what the datasheet claims, gets always cleared on read.

	/*

	 * Add another 10% because if we run faster than the HW conversion

	 * rate we will end up in reporting incorrectly alarms.

	/*

	 * Reset the cache if the cache time expired, or if we are sure

	 * we have valid data from a device conversion, or if we know

	 * our cache has been never written.

	 *

	 * Note that when the cache has been never written the point is

	 * to correctly initialize the timestamp, rather than clearing

	 * the cache values.

	 *

	 * Note that updating the cache timestamp when we get an alarm flag

	 * is required, otherwise we could incorrectly report alarms to be zero.

 default to worst case */

 unblock alert poll */

 unblock alert poll */

 HW works in range -64C to +127.937C */

	/*

	 * hysteresis reg is relative to therm, so the HW does not need to be

	 * adjusted, we need to update our local copy only.

 HW works in range -64C to +127.937C */

 HW works in range -64C to +127.937C */

 HW works in range -64C to +127.937C */

	/*

	 * In early development stages I've become suspicious about the chip

	 * starting to misbehave if I ever set, even briefly, an invalid

	 * configuration. While I'm not sure this is really needed, be

	 * conservative and set rate/resolution in such an order that avoids

	 * passing through an invalid configuration.

 speed up: lower the resolution, then modify convrate */

 slow down: modify convrate, then raise resolution */

 lower temperaure registers always have bits 0-3 set to zero */

 smbus timeout register always have bits 0-7 set to zero */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm85.c - Part of lm_sensors, Linux kernel modules for hardware

 *	    monitoring

 * Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl>

 * Copyright (c) 2002, 2003  Philip Pokorny <ppokorny@penguincomputing.com>

 * Copyright (c) 2003        Margit Schubert-While <margitsw@t-online.de>

 * Copyright (c) 2004        Justin Thiessen <jthiessen@penguincomputing.com>

 * Copyright (C) 2007--2014  Jean Delvare <jdelvare@suse.de>

 *

 * Chip details at	      <http://www.national.com/ds/LM/LM85.pdf>

 Addresses to scan */

 The LM85 registers */

 Fan speeds are LSB, MSB (2 bytes) */

 These are the recognized values for the above regs */

 Also known as EMC6D103:A2 */

 Automated FAN control */

 IN5, IN6 and IN7 */

/*

 * Conversions. Rounding and limit checking is only done on the TO_REG

 * variants. Note that you should be a bit careful with which arguments

 * these macros are called: arguments may be evaluated more than once.

 IN are scaled according to built-in resistors */

 .001 Volts */

EMC6D100*/

 FAN speed is measured using 90kHz clock */

 Temperature is reported in .001 degC increments */

/*

 * ZONEs have the following parameters:

 *    Limit (low) temp,           1. degC

 *    Hysteresis (below limit),   1. degC (0-15)

 *    Range of speed control,     .1 degC (2-80)

 *    Critical (high) temp,       1. degC

 *

 * FAN PWMs have the following parameters:

 *    Reference Zone,                 1, 2, 3, etc.

 *    Spinup time,                    .05 sec

 *    PWM value at limit/low temp,    1 count

 *    PWM Frequency,                  1. Hz

 *    PWM is Min or OFF below limit,  flag

 *    Invert PWM output,              flag

 *

 * Some chips filter the temp, others the fan.

 *    Filter constant (or disabled)   .1 seconds

 These are the zone temperature range encodings in .001 degree C */

 These are the PWM frequency encodings */

 1 Hz */

 1 Hz */

 1 Hz */

/*

 * Since we can't use strings, I'm abusing these numbers

 *   to stand in for the following meanings:

 *      1 -- PWM responds to Zone 1

 *      2 -- PWM responds to Zone 2

 *      3 -- PWM responds to Zone 3

 *     23 -- PWM responds to the higher temp of Zone 2 or 3

 *    123 -- PWM responds to highest of Zone 1, 2, or 3

 *      0 -- PWM is always at 0% (ie, off)

 *     -1 -- PWM is always at 100%

 *     -2 -- PWM responds to manual control

 Not found. */

 Always 100% */

/*

 * Chip sampling rates

 *

 * Some sensors are not updated more frequently than once per second

 *    so it doesn't make sense to read them more often than that.

 *    We cache the results and return the saved data if the driver

 *    is called again before a second has elapsed.

 *

 * Also, there is significant configuration data for this chip

 *    given the automatic PWM fan control that is possible.  There

 *    are about 47 bytes of config data to only 22 bytes of actual

 *    readings.  So, we keep the config data up to date in the cache

 *    when it is written and only sample it once every 1 *minute*

/*

 * LM85 can automatically adjust fan speeds based on temperature

 * This structure encapsulates an entire Zone config.  There are

 * three zones (one for each temperature input) on the lm85

 Low temp limit */

 Low limit hysteresis. (0-15) */

 Temp range, encoded */

 "All fans ON" temp limit */

	u8 max_desired; /*

			 * Actual "max" temperature specified.  Preserved

			 * to prevent "drift" as other autofan control

			 * values change.

 Register value */

 Minimum PWM value, encoded */

 Min PWM or OFF below "limit", flag */

/*

 * For each registered chip, we need to keep some data in memory.

 * The structure is dynamically allocated.

 true if VID5 is configured for ADT7463 or ADT7468 */

 true if following fields are valid */

 In jiffies */

 In jiffies */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register encoding */

 Decoded values */

 Decoded values */

 Register value */

 VRM version */

 Register encoding, combined */

 Config Register 5 on ADT7468 */

 What size location is it? */

 Read WORD data */

 Read both bytes at once */

 Read BYTE data */

 Write WORD data */

 NOTE: ALARM is read only, so not included here */

 Write BYTE data */

 Things that change quickly */

		/*

		 * Have to read extended bits first to "freeze" the

		 * more significant bits that are read later.

		 * There are 2 additional resolution bits per channel and we

		 * have room for 4, so we shift them to the left.

 Three more voltage sensors */

 More alarm bits */

			/*

			 * Have to read LSB bits after the MSB ones because

			 * the reading of the MSB bits has frozen the

			 * LSBs (backward from the ADM1027).

 last_reading */

 Things that don't change often */

 last_config */

 4 Fans */

 vid, vrm, alarms */

 6-pin VID (VRM 10) */

 5-pin VID (VRM 9) */

 pwm */

 PWM is always at 100% */

 PWM is always at 0% */

 PWM responds to manual control */

 PWM in automatic mode */

		/*

		 * Here we have to choose arbitrarily one of the 5 possible

		 * configurations; I go for the safest

	/*

	 * The ADT7468 has a special high-frequency PWM output mode,

	 * where all PWM outputs are driven by a 22.5 kHz clock.

	 * This might confuse the user, but there's not much we can do.

 High freq. mode */

 Low freq. mode */

 Voltages */

 Temps */

 Automatic PWM control */

 Temperature settings for automatic PWM control */

 Update temp_auto_max and temp_auto_range */

 Start monitoring if needed */

 Warn about unusual configuration bits */

	/*

	 * Differenciate between real LM96000 and Winbond WPCD377I. The latter

	 * emulate the former except that it has no hardware monitoring function

	 * so the readings are always 0.

 Return 0 if detection is successful, -ENODEV otherwise */

 We need to be able to do byte I/O */

 Determine the chip type */

 Check for Winbond WPCD377I */

 Note: we can't tell a '100 from a '101 */

 Fill in the chip specific driver values */

 Set the VRM version */

 Initialize the LM85 chip */

 sysfs hooks */

 minctl and temp_off exist on all chips except emc6d103s */

	/*

	 * The ADT7463/68 have an optional VRM 10 mode where pin 21 is used

	 * as a sixth digital VID input rather than an analog input.

 The EMC6D100 has 3 additional voltage inputs */

 SPDX-License-Identifier: GPL-2.0

/*

 * adm1029.c - Part of lm_sensors, Linux kernel modules for hardware monitoring

 *

 * Copyright (C) 2006 Corentin LABBE <clabbe.montjoie@gmail.com>

 *

 * Based on LM83 Driver by Jean Delvare <jdelvare@suse.de>

 *

 * Give only processor, motherboard temperatures and fan tachs

 * Very rare chip please let me know if you use it

 *

 * http://www.analog.com/UploadedFiles/Data_Sheets/ADM1029.pdf

/*

 * Addresses to scan

/*

 * The ADM1029 registers

 * Manufacturer ID is 0x41 for Analog Devices

 Registers to be checked by adm1029_update_device() */

/*

 * Client data (each client gets its own)

 protect register access */

 false until following fields are valid */

 in jiffies */

 registers values, signed for temperature, unsigned for other stuff */

/*

 * function that update the status of the chips (temperature for example)

	/*

	 * Use the "cache" Luke, don't recheck values

	 * if there are already checked not a long time later

/*

 * Sysfs stuff

Read actual config */

 Update the value */

 Update the cache */

 Write value */

 Access rights on sysfs. */

/*

 * Real code

 Return 0 if detection is successful, -ENODEV otherwise */

	/*

	 * ADM1029 doesn't have CHIP ID, check just MAN ID

	 * For better detection we check also ADM1029_TEMP_DEVICES_INSTALLED,

	 * ADM1029_REG_NB_FAN_SUPPORT and compare it with possible values

	 * documented

 0x41 is Analog Devices */

		/*

		 * There are no "official" CHIP ID, so actually

		 * we use Major/Minor revision for that

 recheck config */

	/*

	 * Initialize the ADM1029 chip

	 * Check config register

 SPDX-License-Identifier: GPL-2.0-or-later

/* Sensirion SHT3x-DIS humidity and temperature sensor driver.

 * The SHT3x comes in many different versions, this driver is for the

 * I2C version only.

 *

 * Copyright (C) 2016 Sensirion AG, Switzerland

 * Author: David Frey <david.frey@sensirion.com>

 * Author: Pascal Sachs <pascal.sachs@sensirion.com>

 commands (high precision mode) */

 commands (low power mode) */

 commands for periodic mode */

 commands for heater control */

 other commands */

 delays for non-blocking i2c commands, both in us */

 periodic measure commands (high precision mode) */

 0.5 measurements per second */

 1 measurements per second */

 2 measurements per second */

 4 measurements per second */

 10 measurements per second */

 periodic measure commands (low power mode) */

 0.5 measurements per second */

 1 measurements per second */

 2 measurements per second */

 4 measurements per second */

 10 measurements per second */

 temp1_max, humidity1_max */

 temp_1_max_hyst, humidity1_max_hyst */

 temp1_min, humidity1_min */

 temp_1_min_hyst, humidity1_min_hyst */

 lock for sending i2c commands */

 lock for updating driver data */

 in us*/

 last update in periodic mode*/

	/*

	 * cached values for temperature and humidity and limits

	 * the limits arrays have the following order:

	 * max, max_hyst, min, min_hyst

 find next faster update interval */

	/*

	 * From datasheet:

	 * T = -45 + 175 * ST / 2^16

	 * Adapted for integer fixed point (3 digit) arithmetic.

	/*

	 * From datasheet:

	 * RH = 100 * SRH / 2^16

	 * Adapted for integer fixed point (3 digit) arithmetic.

	/*

	 * Only update cached readings once per update interval in periodic

	 * mode. In single shot mode the sensor measures values on demand, so

	 * every time the sysfs interface is called, a measurement is triggered.

	 * In periodic mode however, the measurement process is handled

	 * internally by the sensor and reading out sensor values only makes

	 * sense if a new reading is available.

 sysfs attributes */

/*

 * limits_update must only be called from probe or with data_lock held

/*

 * limit_store must only be called with data_lock held

	/*

	 * ST = (T + 45) / 175 * 2^16

	 * SRH = RH / 100 * 2^16

	 * adapted for fixed point arithmetic and packed the same as

	 * in limit_show()

	/*

	 * In blocking mode (clock stretching mode) the I2C bus

	 * is blocked for other traffic, thus the call to i2c_master_recv()

	 * will wait until the data is ready. For non blocking mode, we

	 * have to wait ourselves.

 mode did not change */

	/*

	 * Abort periodic measure mode.

	 * To do any changes to the configuration while in periodic mode, we

	 * have to send a break command to the sensor, which then falls back

	 * to single shot (mode = 0).

 select mode */

 select mode and command */

	/*

	 * we require full i2c support since the sht3x uses multi-byte read and

	 * writes as well as multi-byte commands which are not supported by

	 * the smbus protocol

	/*

	 * An attempt to read limits register too early

	 * causes a NACK response from the chip.

	 * Waiting for an empirical delay of 500 us solves the issue.

 device ID table */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for TI ADC128D818 System Monitor with Temperature Sensor

 *

 * Copyright (c) 2014 Guenter Roeck

 *

 * Derived from lm80.c

 * Copyright (C) 1998, 1999  Frodo Looijaard <frodol@dds.nl>

 *			     and Philip Edelbrock <phil@netroedge.com>

/* Addresses to scan

 * The chip also supports addresses 0x35..0x37. Don't scan those addresses

 * since they are also used by some EEPROMs, which may result in false

 * positives.

 registers */

 No. of voltage entries in adc128_attrs */

 Voltage inputs visible per operation mode */

 Reference voltage in mV */

 Operation mode */

 true if following fields are valid */

 In jiffies */

	u16 in[3][8];		/* Register value, normalized to 12 bit

				 * 0: input voltage

				 * 1: min limit

				 * 2: max limit

	s16 temp[3];		/* Register value, normalized to 9 bit

				 * 0: sensor 1: limit 2: hyst

 alarm register value */

 10 mV LSB on limit registers */

 0.5 degrees C resolution */

	/*

	 * Clear an alarm after reporting it to user space. If it is still

	 * active, the next update sequence will set the alarm bit again.

 Voltage, visible according to num_inputs[] */

 Temperature, visible if not in mode 1 */

 Check unused bits for confirmation */

	/*

	 * Reset chip to defaults.

	 * This makes most other initializations unnecessary.

 Set operation mode, if non-default */

 If external vref is selected, configure the chip to use it */

 Write advanced configuration register */

 Start monitoring */

 vref is optional. If specified, is used as chip reference voltage */

 2.56V, in mV */

 Operation mode is optional. If unspecified, keep current mode */

 Initialize the chip */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * A hwmon driver for the Intel 5000 series chipset FB-DIMM AMB

 * temperature sensors

 * Copyright (C) 2007 IBM

 *

 * Author: Darrick J. Wong <darrick.wong@oracle.com>

/*

 * Ugly hack: For some reason the highest bit is set if there

 * are _any_ DIMMs in the channel.  Attempting to read from

 * this "high-order" AMB results in a memory bus error, so

 * for now we'll just ignore that top bit, even though that

 * might prevent us from seeing the 16th DIMM in the channel.

 Count the number of AMBs found */

 ignore the high-order bit, see "Ugly hack" comment above */

 Set up sysfs stuff */

 sysfs label */

 Temperature sysfs knob */

 Temperature min sysfs knob */

 Temperature mid sysfs knob */

 Temperature max sysfs knob */

 Temperature alarm sysfs knob */

 only ever going to be one of these */

 Find AMB register memory space */

 Is it big enough? */

 Copy the DIMM presence map for these two channels */

 Figure out where the AMB registers live */

 Copy the DIMM presence map for the first two channels */

 Copy the DIMM presence map for the optional second two channels */

 Set up resource regions */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vt8231.c - Part of lm_sensors, Linux kernel modules

 *	      for hardware monitoring

 *

 * Copyright (c) 2005 Roger Lucas <vt8231@hiddenengine.co.uk>

 * Copyright (c) 2002 Mark D. Studebaker <mdsxyz123@yahoo.com>

 *		      Aaron M. Marsh <amarsh@sdf.lonestar.org>

/*

 * Supports VIA VT8231 South Bridge embedded sensors

/*

 * The VT8231 registers

 *

 * The reset value for the input channel configuration is used (Reg 0x4A=0x07)

 * which sets the selected inputs marked with '*' below if multiple options are

 * possible:

 *

 *		    Voltage Mode	  Temperature Mode

 *	Sensor	      Linux Id	      Linux Id	      VIA Id

 *	--------      --------	      --------	      ------

 *	CPU Diode	N/A		temp1		0

 *	UIC1		in0		temp2 *		1

 *	UIC2		in1 *		temp3		2

 *	UIC3		in2 *		temp4		3

 *	UIC4		in3 *		temp5		4

 *	UIC5		in4 *		temp6		5

 *	3.3V		in5		N/A

 *

 * Note that the BIOS may set the configuration register to a different value

 * to match the motherboard configuration.

 fans numbered 0-1 */

 Voltage inputs numbered 0-5 */

/*

 * Temperatures are numbered 1-6 according to the Linux kernel specification.

 *

 * In the VIA datasheet, however, the temperatures are numbered from zero.

 * Since it is important that this driver can easily be compared to the VIA

 * datasheet, we will use the VIA numbering within this driver and map the

 * kernel sysfs device name to the VIA number in the sysfs callback.

/*

 * temps 0-5 as numbered in VIA datasheet - see later for mapping to Linux

 * numbering

 voltages 0-5 */

/*

 * NB  The values returned here are NOT temperatures.  The calibration curves

 *     for the thermistor curves are board-specific and must go in the

 *     sensors.conf file.  Temperature sensors are actually ten bits, but the

 *     VIA datasheet only considers the 8 MSBs obtained from the regtemp[]

 *     register.  The temperature value returned should have a magnitude of 3,

 *     so we use the VIA scaling as the "true" scaling and use the remaining 2

 *     LSBs as fractional precision.

 *

 *     All the on-chip hardware temperature comparisons for the alarms are only

 *     8-bits wide, and compare against the 8 MSBs of the temperature.  The bits

 *     in the registers VT8231_REG_TEMP_LOW01 and VT8231_REG_TEMP_LOW25 are

 *     ignored.

/*

 ****** FAN RPM CONVERSIONS ********

 * This chip saturates back at 0, not at 255 like many the other chips.

 * So, 0 means 0 RPM

 true if following fields are valid */

 In jiffies */

 Register value */

 Register value */

 Register value */

 Register value 10 bit, right aligned */

 Register value */

 Register value */

 Register value */

 Register value */

 Register encoding, shifted right */

 Register encoding */

 following are the sysfs callback functions */

 Special case for input 5 as this has 3.3V scaling built into the chip */

 Temperatures */

/*

 * Note that these map the Linux temperature sensor numbering (1-6) to the VIA

 * temperature sensor numbering (0-5)

 Fans */

 Correct the fan minimum speed */

 Alarms */

 Reserve the ISA region */

 Register sysfs hooks */

 Must update device information to find out the config field */

 Set alarm flags correctly */

 Sets global pdev as a side effect */

	/*

	 * Always return failure here.  This is to allow other drivers to bind

	 * to this pci device.  We don't really want to have control over the

	 * pci device, we only wanted to read as few register values from it.

	/*

	 * We do, however, mark ourselves as using the PCI device to stop it

	 * getting unloaded.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * HWMON Driver for Dialog DA9052

 *

 * Copyright(c) 2012 Dialog Semiconductor Ltd.

 *

 * Author: David Dajun Chen <dchen@diasemi.com>

 Conversion function for VDDOUT and VBAT */

 Conversion function for ADC channels 4, 5 and 6 */

 Conversion function for VBBAT */

 Equivalent to 3.9mA/bit in register ICHG_AV */

 block read to avoid separation of MSB and LSB */

 Wait for an conversion done interrupt */

	/*

	 * Degrees celsius = 1.708 * (TJUNC_RES - T_OFFSET) - 108.8

	 * T_OFFSET is a trim value used to improve accuracy of the result

 convert from microvolt (DT) to millivolt (hwmon) */

 TSIREF limits from datasheet */

 disable touchscreen features */

 Sample every 1ms */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ds620.c - Support for temperature sensor and thermostat DS620

 *

 *  Copyright (C) 2010, 2011 Roland Stigge <stigge@antcom.de>

 *

 *  based on ds1621.c by Christian W. Zuckschwerdt  <zany@triq.net>

/*

 * Many DS620 constants specified below

 *  15   14   13   12   11   10   09    08

 * |Done|NVB |THF |TLF |R1  |R0  |AUTOC|1SHOT|

 *

 *  07   06   05   04   03   02   01    00

 * |PO2 |PO1 |A2  |A1  |A0  |    |     |     |

 The DS620 registers */

 input, word, RO */

 min, word, RW */

 max, word, RW */

 word, RW */

 no data */

 no data */

 Each client has this additional data */

 true if following fields are valid */

 In jiffies */

 Register values, word */

 switch to continuous conversion mode */

 already high at power-on, but don't trust the BIOS! */

 thermostat mode according to platform data */

 PO_LOW */

 PO_HIGH */

 always low */

 with highest precision */

 start conversion */

 reset alarms if necessary */

 Initialize the DS620 chip */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * smsc47m1.c - Part of lm_sensors, Linux kernel modules

 *		for hardware monitoring

 *

 * Supports the SMSC LPC47B27x, LPC47M10x, LPC47M112, LPC47M13x,

 * LPC47M14x, LPC47M15x, LPC47M192, LPC47M292 and LPC47M997

 * Super-I/O chips.

 *

 * Copyright (C) 2002 Mark D. Studebaker <mdsxyz123@yahoo.com>

 * Copyright (C) 2004-2007 Jean Delvare <jdelvare@suse.de>

 * Ported to Linux 2.6 by Gabriele Gorla <gorlik@yahoo.com>

 *			and Jean Delvare

 Super-I/0 registers and commands */

 The register to read/write */

 The value to read/write */

 logical device for fans is 0x0A */

 Logical device registers */

 nr is 0 or 1 in the macros below */

 In jiffies */

 Register value */

 Register value */

 Register encoding, shifted right */

 Register encoding */

 Register value (bit 0 is disable) */

 Remember initial device state */

 Clear alarms if needed */

 Clear alarm if needed */

	/*

	 * This chip (stupidly) stops monitoring fan speed if PWM is

	 * enabled and duty cycle is 0%. This is fine if the monitoring

	 * and control concern the same fan, but troublesome if they are

	 * not (which could as well happen).

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan clock divider.  This follows the principle

 * of least surprise; the user doesn't expect the fan minimum to change just

 * because the divider changed.

 No change */

 Preserve fan min */

 Preserve additional bits */

 preserve the other bits */

	/*

	 * SMSC LPC47M10x/LPC47M112/LPC47M13x (device id 0x59), LPC47M14x

	 * (device id 0x5F) and LPC47B27x (device id 0x51) have fan control.

	 * The LPC47M15x and LPC47M192 chips "with hardware monitoring block"

	 * can do much more besides (device id 0x60).

	 * The LPC47M997 is undocumented, but seems to be compatible with

	 * the LPC47M192, and has the same device id.

	 * The LPC47M292 (device id 0x6B) is somewhat compatible, but it

	 * supports a 3rd fan, and the pin configuration registers are

	 * unfortunately different.

	 * The LPC47M233 has the same device id (0x6B) but is not compatible.

	 * We check the high bit of the device revision register to

	 * differentiate them.

	/*

	 * Enable only if address is set (needed at least on the

	 * Compaq Presario S4000NX)

 Restore device to its initial state */

/*

 * This function can be used to:

 *  - test for resource conflicts with ACPI

 *  - request the resources

 * We only allocate the I/O ports we really need, to minimize the risk of

 * conflicts with ACPI or with other drivers.

 register, region length */

 register, region length */

 Only check for conflicts */

 Request the resources */

	/*

	 * If no function is properly configured, there's no point in

	 * actually registering the chip.

	/*

	 * Some values (fan min, clock dividers, pwm registers) may be

	 * needed before any update is triggered, so we better read them

	 * at least once here. We don't usually do it that way, but in

	 * this particular case, manually reading 5 registers out of 8

	 * doesn't make much sense and we're better using the existing

	 * function.

 Register sysfs hooks */

 Sets global pdev as a side effect */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/hwmon/wm831x-hwmon.c - Wolfson Microelectronics WM831x PMIC

 *                                hardware monitoring features.

 *

 * Copyright (C) 2009 Wolfson Microelectronics plc

 Degrees celsius = (512.18-ret) / 1.0983 */

/*

 * Report as a voltage since conversion depends on external components

 * and that's what the ABI wants.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * adm1026.c - Part of lm_sensors, Linux kernel modules for hardware

 *	       monitoring

 * Copyright (C) 2002, 2003  Philip Pokorny <ppokorny@penguincomputing.com>

 * Copyright (C) 2004 Justin Thiessen <jthiessen@penguincomputing.com>

 *

 * Chip details at:

 *

 * <https://www.onsemi.com/PowerSolutions/product.do?id=ADM1026>

 Addresses to scan */

 Many ADM1026 constants specified below */

 The ADM1026 registers */

 CONFIG2 controls FAN0/GPIO0 through FAN7/GPIO7 */

/*

 * There are 10 general analog inputs and 7 dedicated inputs

 * They are:

 *    0 - 9  =  AIN0 - AIN9

 *       10  =  Vbat

 *       11  =  3.3V Standby

 *       12  =  3.3V Main

 *       13  =  +5V

 *       14  =  Vccp (CPU core voltage)

 *       15  =  +12V

 *       16  =  -12V

/*

 * Temperatures are:

 *    0 - Internal

 *    1 - External 1

 *    2 - External 2

 CFG_16 in REG_CFG3 */

 STATUS_16 in REG_STATUS4 */

 MASK_16 in REG_MASK4 */

 These are the recognized values for the above regs */

/*

 * Conversions. Rounding and limit checking is only done on the TO_REG

 * variants. Note that you should be a bit careful with which arguments

 * these macros are called: arguments may be evaluated more than once.

/*

 * IN are scaled according to built-in resistors.  These are the

 *   voltages corresponding to 3/4 of full scale (192 or 0xc0)

 *   NOTE: The -12V input needs an additional factor to account

 *      for the Vref pullup resistor.

 *      NEG12_OFFSET = SCALE * Vref / V-192 - Vref

 *                   = 13875 * 2.50 / 1.875 - 2500

 *                   = 16000

 *

 * The values in this table are based on Table II, page 15 of the

 *    datasheet.

 .001 Volts */

/*

 * FAN speed is measured using 22.5kHz clock and counts for 2 pulses

 *   and we assume a 2 pulse-per-rev fan tach signal

 *      22500 kHz * 60 (sec/min) * 2 (pulse) / 2 (pulse/rev) == 1350000

 Temperature is reported in 1 degC increments */

/*

 * Analog output is a voltage, and scaled to millivolts.  The datasheet

 *   indicates that the DAC could be used to drive the fans, but in our

 *   example board (Arima HDAMA) it isn't connected to the fans at all.

/*

 * Chip sampling rates

 *

 * Some sensors are not updated more frequently than once per second

 *    so it doesn't make sense to read them more often than that.

 *    We cache the results and return the saved data if the driver

 *    is called again before a second has elapsed.

 *

 * Also, there is significant configuration data for this chip

 *    So, we keep the config data up to date in the cache

 *    when it is written and only sample it once every 5 *minutes*

/*

 * We allow for multiple chips in a single system.

 *

 * For each registered ADM1026, we need to keep state information

 * at client->data. The adm1026_data structure is dynamically

 * allocated, when a new client structure is allocated.

 true if following fields are valid */

 In jiffies */

 In jiffies */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Decoded value */

 Pwm control values */

 VRM version */

 Register value (DAC) */

 Register encoding, combined */

 Register encoding, combined */

 Register encoding, combined */

 Register encoding, combined */

 Decoded value */

 Register value */

 Register value */

 Register value */

 "RAM" locations */

 EEPROM, do nothing */

 "RAM" locations */

 EEPROM, do nothing */

 Things that change quickly */

			/*

			 * NOTE: temp[] is s8 and we assume 2's complement

			 *   "conversion" in the assignment

 GPIO16 is MSbit of alarms, move it to gpio */

 GPIO16 */

 Read the GPIO values */

 last_reading */

 Things that don't change often */

			/*

			 * NOTE: temp_xxx[] are s8 and we assume 2's

			 *    complement "conversion" in the assignment

 Read the STATUS/alarm masks */

 GPIO16 */

 Read the GPIO values */

 Read various values from CONFIG1 */

 Read the GPIO config */

 last_config */

 Now add fan read/write functions */

 Adjust fan_min to account for new fan divisor */

 0 and 0xff are special.  Don't adjust them */

 Now add fan_div read/write functions */

 0 <= nr < 4 */

 3 < nr < 8 */

 Temps */

 apply immediately */

 apply pwm1_auto_pwm_min to pwm1 */

 set pwm to safe value */

 enable PWM fan control */

 Return 0 if detection is successful, -ENODEV otherwise */

 We need to be able to do byte I/O */

 Now, we do the remaining detection. */

 Determine the chip type. */

 Analog Devices ADM1026 */

 Not an ADM1026... */

 GPIO16 is THERM */

 Make the changes requested. */

	/*

	 * We may need to unlock/stop monitoring or soft-reset the

	 *    chip before we can make changes.  This hasn't been

	 *    tested much.  FIXME

 Make outputs */

 if GPIO0-7 is output, it isn't a FAN tach */

 Input overrides output */

 if GPIO0-7 is input, it isn't a FAN tach */

 Inverted */

 Normal overrides inverted */

 Fan overrides input and output */

 Write new configs to registers */

 Print the new config */

 Read chip config */

 Inform user of chip config */

 Read and pick apart the existing GPIO configuration */

 ... and then print it */

	/*

	 * If the user asks us to reprogram the GPIO config, then

	 * do it now.

	/*

	 * WE INTENTIONALLY make no changes to the limits,

	 *   offsets, pwms, fans and zones.  If they were

	 *   configured, we don't want to mess with them.

	 *   If they weren't, the default is 100% PWM, no

	 *   control and will suffice until 'sensors -s'

	 *   can be run by the user.  We DO set the default

	 *   value for pwm1.auto_pwm_min to its maximum

	 *   so that enabling automatic pwm fan control

	 *   without first setting a value for pwm1.auto_pwm_min

	 *   will not result in potentially dangerous fan speed decrease.

 Start monitoring */

 Set MONITOR, clear interrupt acknowledge and s/w reset */

 initialize fan_div[] to hardware defaults */

 Set the VRM version */

 Initialize the ADM1026 chip */

 sysfs hooks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/hwmon/nsa320-hwmon.c

 *

 * ZyXEL NSA320 Media Servers

 * hardware monitoring

 *

 * Copyright (C) 2016 Adam Baker <linux@baker-net.org.uk>

 * based on a board file driver

 * Copyright (C) 2012 Peter Schildmann <linux@schildmann.info>

 Tests for error return values rely upon this value being < 0x80 */

/*

 * The Zyxel hwmon MCU is a Holtek HT46R065 that is factory programmed

 * to perform temperature and fan speed monitoring. It is read by taking

 * the active pin low. The 32 bit output word is then clocked onto the

 * data line. The MSB of the data word is a magic nuber to indicate it

 * has been read correctly, the next byte is the fan speed (in hundreds

 * of RPM) and the last two bytes are the temperature (in tenths of a

 * degree)

 lock GPIO operations */

 jiffies */

/*

 * Although this protocol looks similar to SPI the long delay

 * between the active (aka chip select) signal and the shorter

 * delay between clock pulses are needed for reliable operation.

 * The delays provided are taken from the manufacturer kernel,

 * testing suggest they probably incorporate a reasonable safety

 * margin. (The single device tested became unreliable if the

 * delay was reduced to 1/10th of this value.)

 Look up the GPIO pins to use */

 All allocations use devres so remove() is not needed. */

 SPDX-License-Identifier: GPL-2.0

/*

 * sht15.c - support for the SHT15 Temperature and Humidity Sensor

 *

 * Portions Copyright (c) 2010-2012 Savoir-faire Linux Inc.

 *          Jerome Oufella <jerome.oufella@savoirfairelinux.com>

 *          Vivien Didelot <vivien.didelot@savoirfairelinux.com>

 *

 * Copyright (c) 2009 Jonathan Cameron

 *

 * Copyright (c) 2007 Wouter Horre

 *

 * For further information, see the Documentation/hwmon/sht15.rst file.

 Commands */

 Min timings */

 (nsecs) clock low */

 (nsecs) clock high */

 (nsecs) data setup time */

 (msecs) soft reset time */

 Status Register Bits */

 List of supported chips */

 Actions the driver may be doing */

/**

 * struct sht15_temppair - elements of voltage dependent temp calc

 * @vdd:	supply voltage in microvolts

 * @d1:		see data sheet

 microvolts */

 Table 9 from datasheet - relates temperature calculation to supply voltage */

 Table from CRC datasheet, section 2.4 */

/**

 * struct sht15_data - device instance specific data

 * @sck:		clock GPIO line

 * @data:		data GPIO line

 * @read_work:		bh of interrupt handler.

 * @wait_queue:		wait queue for getting values from device.

 * @val_temp:		last temperature value read from device.

 * @val_humid:		last humidity value read from device.

 * @val_status:		last status register value read from device.

 * @checksum_ok:	last value read from the device passed CRC validation.

 * @checksumming:	flag used to enable the data validation with CRC.

 * @state:		state identifying the action the driver is doing.

 * @measurements_valid:	are the current stored measures valid (start condition).

 * @status_valid:	is the current stored status valid (start condition).

 * @last_measurement:	time of last measure.

 * @last_status:	time of last status reading.

 * @read_lock:		mutex to ensure only one read in progress at a time.

 * @dev:		associate device structure.

 * @hwmon_dev:		device associated with hwmon subsystem.

 * @reg:		associated regulator (if specified).

 * @nb:			notifier block to handle notifications of voltage

 *                      changes.

 * @supply_uv:		local copy of supply voltage used to allow use of

 *                      regulator consumer if available.

 * @supply_uv_valid:	indicates that an updated value has not yet been

 *			obtained from the regulator and so any calculations

 *			based upon it will be invalid.

 * @update_supply_work:	work struct that is used to update the supply_uv.

 * @interrupt_handled:	flag used to indicate a handler has been scheduled.

/**

 * sht15_crc8() - compute crc8

 * @data:	sht15 specific data.

 * @value:	sht15 retrieved data.

 * @len:	Length of retrieved data

 *

 * This implements section 2 of the CRC datasheet.

/**

 * sht15_connection_reset() - reset the comms interface

 * @data:	sht15 specific data

 *

 * This implements section 3.4 of the data sheet

/**

 * sht15_send_bit() - send an individual bit to the device

 * @data:	device state data

 * @val:	value of bit to be sent

 clock low time */

/**

 * sht15_transmission_start() - specific sequence for new transmission

 * @data:	device state data

 *

 * Timings for this are not documented on the data sheet, so very

 * conservative ones used in implementation. This implements

 * figure 12 on the data sheet.

 ensure data is high and output */

/**

 * sht15_send_byte() - send a single byte to the device

 * @data:	device state

 * @byte:	value to be sent

/**

 * sht15_wait_for_response() - checks for ack from device

 * @data:	device state

/**

 * sht15_send_cmd() - Sends a command to the device.

 * @data:	device state

 * @cmd:	command byte to be sent

 *

 * On entry, sck is output low, data is output pull high

 * and the interrupt disabled.

/**

 * sht15_soft_reset() - send a soft reset command

 * @data:	sht15 specific data.

 *

 * As described in section 3.2 of the datasheet.

 device resets default hardware status register value */

/**

 * sht15_ack() - send a ack

 * @data:	sht15 specific data.

 *

 * Each byte of data is acknowledged by pulling the data line

 * low for one clock pulse.

/**

 * sht15_end_transmission() - notify device of end of transmission

 * @data:	device state.

 *

 * This is basically a NAK (single clock pulse, data high).

/**

 * sht15_read_byte() - Read a byte back from the device

 * @data:	device state.

/**

 * sht15_send_status() - write the status register byte

 * @data:	sht15 specific data.

 * @status:	the byte to set the status register with.

 *

 * As described in figure 14 and table 5 of the datasheet.

/**

 * sht15_update_status() - get updated status register from device if too old

 * @data:	device instance specific data.

 *

 * As described in figure 15 and table 5 of the datasheet.

		/*

		 * Perform checksum validation on the received data.

		 * Specification mentions that in case a checksum verification

		 * fails, a soft reset command must be sent to the device.

/**

 * sht15_measurement() - get a new value from device

 * @data:		device instance specific data

 * @command:		command sent to request value

 * @timeout_msecs:	timeout after which comms are assumed

 *			to have failed are reset.

 Only relevant if the interrupt hasn't occurred. */

 I/O error occurred */

 timeout occurred */

	/*

	 *  Perform checksum validation on the received data.

	 *  Specification mentions that in case a checksum verification fails,

	 *  a soft reset command must be sent to the device.

/**

 * sht15_update_measurements() - get updated measures from device if too old

 * @data:	device state

/**

 * sht15_calc_temp() - convert the raw reading to a temperature

 * @data:	device state

 *

 * As per section 4.3 of the data sheet.

 Find pointer to interpolate */

/**

 * sht15_calc_humid() - using last temperature convert raw to humid

 * @data:	device state

 *

 * This is the temperature compensated version as per section 4.2 of

 * the data sheet.

 *

 * The sensor is assumed to be V3, which is compatible with V4.

 * Humidity conversion coefficients are shown in table 7 of the datasheet.

 milli percent */

 x 10 ^ -6 */

 x 10 ^ -7 */

 x 10 ^ -6 */

 x 10 ^ -7 */

/**

 * sht15_show_status() - show status information in sysfs

 * @dev:	device.

 * @attr:	device attribute.

 * @buf:	sysfs buffer where information is written to.

 *

 * Will be called on read access to temp1_fault, humidity1_fault

 * and heater_enable sysfs attributes.

 * Returns number of bytes written into buffer, negative errno on error.

/**

 * sht15_store_heater() - change heater state via sysfs

 * @dev:	device.

 * @attr:	device attribute.

 * @buf:	sysfs buffer to read the new heater state from.

 * @count:	length of the data.

 *

 * Will be called on write access to heater_enable sysfs attribute.

 * Returns number of bytes actually decoded, negative errno on error.

/**

 * sht15_show_temp() - show temperature measurement value in sysfs

 * @dev:	device.

 * @attr:	device attribute.

 * @buf:	sysfs buffer where measurement values are written to.

 *

 * Will be called on read access to temp1_input sysfs attribute.

 * Returns number of bytes written into buffer, negative errno on error.

 Technically no need to read humidity as well */

/**

 * sht15_show_humidity() - show humidity measurement value in sysfs

 * @dev:	device.

 * @attr:	device attribute.

 * @buf:	sysfs buffer where measurement values are written to.

 *

 * Will be called on read access to humidity1_input sysfs attribute.

 * Returns number of bytes written into buffer, negative errno on error.

 First disable the interrupt */

 Then schedule a reading work struct */

 Firstly, verify the line is low */

		/*

		 * If not, then start the interrupt again - care here as could

		 * have gone low in meantime so verify it hasn't!

 If still not occurred or another handler was scheduled */

 Read the data back from the device */

		/*

		 * Ask the device for a checksum and read it back.

		 * Note: the device sends the checksum byte reversed.

 Tell the device we are done */

/**

 * sht15_invalidate_voltage() - mark supply voltage invalid when notified by reg

 * @nb:		associated notification structure

 * @event:	voltage regulator state change event code

 * @ignored:	function parameter - ignored here

 *

 * Note that as the notification code holds the regulator lock, we have

 * to schedule an update of the supply voltage rather than getting it directly.

	/*

	 * If a regulator is available,

	 * query what the supply voltage actually is!

		/*

		 * Setup a notifier block to update this if another device

		 * causes the voltage to change

 Try requesting the GPIOs */

	/*

	 * Make sure any reads from the device are done and

	 * prevent new ones beginning

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Support for the FTS Systemmonitoring Chip "Teutates"

 *

 * Copyright (C) 2016 Fujitsu Technology Solutions GmbH,

 *		  Thilo Cestonaro <thilo.cestonaro@ts.fujitsu.com>

 update sensor data lock */

 read/write register lock */

 in jiffies */

 false until following fields are valid */

 in rps */

****************************************************************************/

 I2C Helper functions							     */

****************************************************************************/

****************************************************************************/

 Data Updater Helper function						     */

****************************************************************************/

 Data not ready yet */

****************************************************************************/

 Watchdog functions							     */

****************************************************************************/

	/* switch watchdog resolution to minutes if timeout does not fit

	 * into a byte

 watchdog not running, set timeout to a default of 60 sec. */

 Register our watchdog part */

 max timeout 255 minutes. */

****************************************************************************/

 SysFS handler functions						     */

****************************************************************************/

 00h Temperature = Sensor Error */

****************************************************************************/

 SysFS structs							     */

****************************************************************************/

 Temperature sensors */

 Fans */

 Voltages */

****************************************************************************/

 Module initialization / remove functions				     */

****************************************************************************/

 detection works with revision greater or equal to 0x2b */

 Device Detect Regs must have 0x17 0x34 and 0x54 */

	/*

	 * 0x10 == Baseboard Management Controller, 0x01 == Teutates

	 * Device ID Reg needs to be 0x11

 Baseboard Management Controller check */

****************************************************************************/

 Module Details							     */

****************************************************************************/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ads7871 - driver for TI ADS7871 A/D converter

 *

 *  Copyright (c) 2010 Paul Thomas <pthomas8589@gmail.com>

 *

 *	You need to have something like this in struct spi_board_info

 *	{

 *		.modalias	= "ads7871",

 *		.max_speed_hz	= 2*1000*1000,

 *		.chip_select	= 0,

 *		.bus_num	= 1,

 *	},

From figure 18 in the datasheet*/

Register addresses*/

A/D Output Data, LS Byte*/

A/D Output Data, MS Byte*/

PGA Valid Register*/

A/D Control Register*/

Gain/Mux Register*/

Digital I/O State Register*/

Digital I/O Control Register*/

Rev/Oscillator Control Register*/

Serial Interface Control Register*/

ID Register*/

/*

 * From figure 17 in the datasheet

 * These bits get ORed with the address to form

 * the instruction byte

Instruction Bit masks*/

From figure 18 in the datasheet*/

bit masks for Rev/Oscillator Control Register*/

M3 selects single ended*/

allows for reg = (gain << MUX_G_BV) | ...*/

From figure 18 in the datasheet*/

bit masks for Rev/Oscillator Control Register*/

	/*

	 * TODO: add support for conversions

	 * other than single ended with a gain of 1

MUX_M3_BM forces single ended*/

This is also where the gain of the PGA would be set*/

	/*

	 * on 400MHz arm9 platform the conversion

	 * is already done when we do this test

result in volts*10000 = (val/8192)*2.5*10000*/

 Configure the SPI bus */

	/*

	 * because there is no other error checking on an SPI bus

	 * we need to make sure we really have a chip

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2011 Alexander Stein <alexander.stein@systec-electronic.com>

 *

 * The LM95245 is a sensor chip made by TI / National Semiconductor.

 * It reports up to two temperatures (its own plus an external one).

 *

 * This driver is based on lm95241.c

 LM95245 registers */

 general registers */

 diode configuration */

 status registers */

 limit registers */

 temperature signed */

 temperature unsigned */

 id registers */

 LM95245 specific bitfields */

 conversation rate in ms */

 Client data (each client gets its own) */

 in msecs */

 Conversions */

		/*

		 * Local temp is always signed.

		 * Remote temp has both signed and unsigned data.

		 * Use signed calculation for remote if signed bit is set

		 * or if reported temperature is below signed limit.

 Clamp to reasonable range to prevent overflow */

 Return 0 if detection is successful, -ENODEV otherwise */

 Initialize the LM95245 chip */

 Driver data (common to all clients) */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Lantiq cpu temperature sensor driver

 *

 * Copyright (C) 2017 Florian Eckert <fe@dev.tdt.de>

 gphy1 configuration register contains cpu temperature */

 get the temperature including one decimal place */

 range -38 to +154 °C, register value zero is -38.0 °C */

 scale temp to millidegree */

 available on vr9 v1.2 SoCs only */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm80.c - From lm_sensors, Linux kernel modules for hardware

 *	    monitoring

 * Copyright (C) 1998, 1999  Frodo Looijaard <frodol@dds.nl>

 *			     and Philip Edelbrock <phil@netroedge.com>

 *

 * Ported to Linux 2.6 by Tiago Sousa <mirage@kaotik.org>

 Addresses to scan */

 Many LM80 constants specified below */

 The LM80 registers */

/*

 * Conversions. Rounding and limit checking is only done on the TO_REG

 * variants. Note that you should be a bit careful with which arguments

 * these macros are called: arguments may be evaluated more than once.

 * Fixing this is just not worth it.

/*

 * Client data (each client gets its own)

 !=0 if error occurred during last update */

 true if following fields are valid */

 In jiffies */

 Register value, 1st index is enum in_index */

 Register value, 1st index enum fan_index */

 Register encoding, shifted right */

 Register values, normalized to 16 bit */

 Register encoding, combined */

 Called when we have found a new LM80 and after read errors */

	/*

	 * Reset all except Watchdog values and last conversion values

	 * This sets fan-divs to 2, among others. This makes most other

	 * initializations unnecessary

 Set 11-bit temperature resolution */

 Start monitoring */

/*

 * Sysfs stuff

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan divisor.  This follows the principle of

 * least surprise; the user doesn't expect the fan minimum to change just

 * because the divisor changed.

 Save fan_min */

 Restore fan_min */

/*

 * Real code

 Return 0 if detection is successful, -ENODEV otherwise */

 First check for unused bits, common to both chip types */

	/*

	 * The LM96080 has manufacturer and stepping/die rev registers so we

	 * can just check that. The LM80 does not have such registers so we

	 * have to use a more expensive trick.

 Check more unused bits for confirmation */

 Check 6-bit addressing */

 Initialize the LM80 chip */

 A few vars need to be filled upon startup */

/*

 * Driver data (common to all clients)

 SPDX-License-Identifier: GPL-2.0

/*

 * Hwmon client for disk and solid state drives with temperature sensors

 * Copyright (C) 2019 Zodiac Inflight Innovations

 *

 * With input from:

 *    Hwmon client for S.M.A.R.T. hard disk drives with temperature sensors.

 *    (C) 2018 Linus Walleij

 *

 *    hwmon: Driver for SCSI/ATA temperature sensors

 *    by Constantin Baranov <const@mimas.ru>, submitted September 2009

 *

 * This drive supports reporting the temperature of SATA drives. It can be

 * easily extended to report the temperature of SCSI drives.

 *

 * The primary means to read drive temperatures and temperature limits

 * for ATA drives is the SCT Command Transport feature set as specified in

 * ATA8-ACS.

 * It can be used to read the current drive temperature, temperature limits,

 * and historic minimum and maximum temperatures. The SCT Command Transport

 * feature set is documented in "AT Attachment 8 - ATA/ATAPI Command Set

 * (ATA8-ACS)".

 *

 * If the SCT Command Transport feature set is not available, drive temperatures

 * may be readable through SMART attributes. Since SMART attributes are not well

 * defined, this method is only used as fallback mechanism.

 *

 * There are three SMART attributes which may report drive temperatures.

 * Those are defined as follows (from

 * http://www.cropel.com/library/smart-attribute-list.aspx).

 *

 * 190	Temperature	Temperature, monitored by a sensor somewhere inside

 *			the drive. Raw value typicaly holds the actual

 *			temperature (hexadecimal) in its rightmost two digits.

 *

 * 194	Temperature	Temperature, monitored by a sensor somewhere inside

 *			the drive. Raw value typicaly holds the actual

 *			temperature (hexadecimal) in its rightmost two digits.

 *

 * 231	Temperature	Temperature, monitored by a sensor somewhere inside

 *			the drive. Raw value typicaly holds the actual

 *			temperature (hexadecimal) in its rightmost two digits.

 *

 * Wikipedia defines attributes a bit differently.

 *

 * 190	Temperature	Value is equal to (100-temp. °C), allowing manufacturer

 *	Difference or	to set a minimum threshold which corresponds to a

 *	Airflow		maximum temperature. This also follows the convention of

 *	Temperature	100 being a best-case value and lower values being

 *			undesirable. However, some older drives may instead

 *			report raw Temperature (identical to 0xC2) or

 *			Temperature minus 50 here.

 * 194	Temperature or	Indicates the device temperature, if the appropriate

 *	Temperature	sensor is fitted. Lowest byte of the raw value contains

 *	Celsius		the exact temperature value (Celsius degrees).

 * 231	Life Left	Indicates the approximate SSD life left, in terms of

 *	(SSDs) or	program/erase cycles or available reserved blocks.

 *	Temperature	A normalized value of 100 represents a new drive, with

 *			a threshold value at 10 indicating a need for

 *			replacement. A value of 0 may mean that the drive is

 *			operating in read-only mode to allow data recovery.

 *			Previously (pre-2010) occasionally used for Drive

 *			Temperature (more typically reported at 0xC2).

 *

 * Common denominator is that the first raw byte reports the temperature

 * in degrees C on almost all drives. Some drives may report a fractional

 * temperature in the second raw byte.

 *

 * Known exceptions (from libatasmart):

 * - SAMSUNG SV0412H and SAMSUNG SV1204H) report the temperature in 10th

 *   degrees C in the first two raw bytes.

 * - A few Maxtor drives report an unknown or bad value in attribute 194.

 * - Certain Apple SSD drives report an unknown value in attribute 190.

 *   Only certain firmware versions are affected.

 *

 * Those exceptions affect older ATA drives and are currently ignored.

 * Also, the second raw byte (possibly reporting the fractional temperature)

 * is currently ignored.

 *

 * Many drives also report temperature limits in additional SMART data raw

 * bytes. The format of those is not well defined and varies widely.

 * The driver does not currently attempt to report those limits.

 *

 * According to data in smartmontools, attribute 231 is rarely used to report

 * drive temperatures. At the same time, several drives report SSD life left

 * in attribute 231, but do not support temperature sensors. For this reason,

 * attribute 231 is currently ignored.

 *

 * Following above definitions, temperatures are reported as follows.

 *   If SCT Command Transport is supported, it is used to read the

 *   temperature and, if available, temperature limits.

 * - Otherwise, if SMART attribute 194 is supported, it is used to read

 *   the temperature.

 * - Otherwise, if SMART attribute 190 is supported, it is used to read

 *   the temperature.

 list of instantiated devices */

 protect data buffer accesses */

 SCSI device */

 instantiating device */

 hardware monitoring device */

 local buffer */

 lowest temp in SCT status */

 highest temp in SCT status */

 have min temp */

 have max temp */

 have lower critical limit */

 have critical limit */

 min temp */

 max temp */

 lower critical limit */

 critical limit */

 log byte offsets */

 PIO Data-out */

		/*

		 * No off.line or cc, write to dev, block count in sector count

		 * field.

 PIO Data-in */

		/*

		 * No off.line or cc, read from dev, block count in sector count

		 * field.

 1 sector */

 Checksum the read value table */

/*

 * These drives will have WRITE FPDMA QUEUED command timeouts and sometimes just

 * freeze until power-cycled under heavy write loads when their temperature is

 * getting polled in SCT mode. The SMART mode seems to be fine, though.

 *

 * While only the 3 TB model (DT01ACA3) was actually caught exhibiting the

 * problem let's play safe here to avoid data corruption and ban the whole

 * DT01ACAx family.



 * The models from this array are prefix-matched.

	/*

	 * The "model" field contains just the raw SCSI INQUIRY response

	 * "product identification" field, which has a width of 16 bytes.

	 * This field is space-filled, but is NOT NULL-terminated.

 SCSI-ATA Translation present? */

	/*

	 * Verify that ATA IDENTIFY DEVICE data is included in ATA Information

	 * VPD and that the drive implements the SATA protocol.

 bail out if this is not a SATA device */

 Request and read temperature history table */

 data table command */

 read table */

 temperature history table */

	/*

	 * Temperature limits per AT Attachment 8 -

	 * ATA/ATAPI Command Set (ATA8-ACS)

 Bail out immediately if there is no inquiry data */

 Disk device? */

/*

 * The device argument points to sdev->sdev_dev. Its parent is

 * sdev->sdev_gendev, which we can use to get the scsi_device pointer.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Linear Technology LTC4215 I2C Hot Swap Controller

 *

 * Copyright (C) 2009 Ira W. Snyder <iws@ovro.caltech.edu>

 *

 * Datasheet:

 * http://www.linear.com/pc/downloadDocument.do?navId=H0,C1,C1003,C1006,C1163,P17572,D12697

 Here are names of the chip's registers (a.k.a. commands) */

 rw */

 rw */

 ro */

 rw */

 rw */

 rw */

 rw */

 in jiffies */

 Registers */

 The chip's A/D updates 10 times per second */

 Read all registers */

 Return the voltage from the given register in millivolts */

 151 uV per increment */

 60.5 mV per increment */

		/*

		 * The ADIN input is divided by 12.5, and has 4.82 mV

		 * per increment, so we have the additional multiply

 If we get here, the developer messed up */

 Return the current from the sense resistor in mA */

	/*

	 * The strange looking conversions that follow are fixed-point

	 * math, since we cannot do floating point in the kernel.

	 *

	 * Step 1: convert sense register to microVolts

	 * Step 2: convert voltage to milliAmperes

	 *

	 * If you play around with the V=IR equation, you come up with

	 * the following: X uV / Y mOhm == Z mA

	 *

	 * With the resistors that are fractions of a milliOhm, we multiply

	 * the voltage and resistance by 10, to shift the decimal point.

	 * Now we can use the normal division operator again.

 Calculate voltage in microVolts (151 uV per increment) */

 Calculate current in milliAmperes (4 milliOhm sense resistor) */

 current in mA * voltage in mV == power in uW */

/*

 * These macros are used below in constructing device attribute objects

 * for use with sysfs_create_group() to make a sysfs device file

 * for each register.

 Construct a sensor_device_attribute structure for each register */

 Current */

 Power (virtual) */

 Input Voltage */

 Output Voltage */

/*

 * Finally, construct an array of pointers to members of the above objects,

 * as required for sysfs_create_group()

 Initialize the LTC4215 chip */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for Maxim MAX6620

 *

 * Originally from L. Grunenberg.

 * (C) 2012 by L. Grunenberg <contact@lgrunenberg.de>

 *

 * Copyright (c) 2021 Dell Inc. or its subsidiaries. All Rights Reserved.

 *

 * based on code written by :

 * 2007 by Hans J. Koch <hjk@hansjkoch.de>

 * John Morris <john.morris@spirentcom.com>

 * Copyright (c) 2003 Spirent Communications

 * and Claus Gindhart <claus.gindhart@kontron.com>

 *

 * This module has only been tested with the MAX6620 chip.

 *

 * The datasheet was last seen at:

 *

 *        http://pdfserv.maxim-ic.com/en/ds/MAX6620.pdf

 *

/*

 * MAX 6620 registers

/*

 * Config register bits

/*

 * Failure status register bits

 Clock frequency in Hz */

 Tachometer pulses per revolution */

 Minimum and maximum values of the FAN-RPM */

/*

 * Client data (each client gets its own)

 false until following fields are valid */

 in jiffies */

 register values */

		/*

		 * Alarms are cleared on read in case the condition that

		 * caused the alarm is removed. Keep the value latched here

		 * for providing the register through different alarm files.

 Setting TACH count to re-enable fan fault detection */

 Setting TACH count re-enables fan fault detection */

	/*

	 * Set bit 4, disable other fans from going full speed on a fail

	 * failure.

 Enable RPM mode */

 2 counts (001) and Rate change 100 (0.125 secs) */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * nct7802 - Driver for Nuvoton NCT7802Y

 *

 * Copyright (C) 2014  Guenter Roeck <linux@roeck-us.net>

 7.2.32 Mode Selection Register */

/*

 * Resistance temperature detector (RTD) modes according to 7.2.32 Mode

 * Selection Register

/*

 * Bit offset for sensors modes in REG_MODE.

 * Valid for index 0..2, indicating RTD1..3.

/*

 * Data structures and manipulation thereof

 for multi-byte read and write operations */

 RD3 */

 11 bit data */

 convert fan count to rpm */

 maximum value, assume fan is stopped */

 convert fan count to rpm */

 maximum value, assume no limit */

 voltage */

 limit */

	/*

	 * The SMI Voltage status register is the only register giving a status

	 * for voltages. A bit is set for each input crossing a threshold, in

	 * both direction, but the "inside" or "outside" limits info is not

	 * available. Also this register is cleared on read.

	 * Note: this is not explicitly spelled out in the datasheet, but

	 * from experiment.

	 * To deal with this we use a status cache with one validity bit and

	 * one status bit for each input. Validity is cleared at startup and

	 * each time the register reports a change, and the status is processed

	 * by software based on current input value and limits.

 SMI Voltage status */

 invalidate cached status for all inputs crossing a threshold */

 if cached status for requested input is invalid, update it */

 10 */

 20 */

 30 */

 38 */

 46 */

 RD1 */

 RD2 */

 RD3 */

 local */

 PECI 0 */

 PECI 1 */

 5 */

 6 */

 11 */

 16 */

 VCC, VCORE */

 VSEN1 */

 VSEN2 */

 VSEN3 */

 7.2.89 Fan Control Output Type */

 7.2.91... Fan Control Output Value */

 7.2.95... Temperature to Fan mapping Relationships Register */

 4 attributes per fan */

 7.2.115... 0x80-0x83, 0x84 Temperature (X-axis) transition */

 7.2.120... 0x85-0x88 PWM (Y-axis) transition */

 7.2.124 Table 2 X-axis Transition Point 1 Register */

 7.2.129 Table 2 Y-axis Transition Point 1 Register */

 7.2.133 Table 3 X-axis Transition Point 1 Register */

 7.2.138 Table 3 Y-axis Transition Point 1 Register */

	/*

	 * Chip identification registers are only available in bank 0,

	 * so only attempt chip detection if bank 0 is selected

 Also validate lower bits of voltage and temperature registers */

 At this point we have reg >= 1 && reg <= 3 */

 RTD3 only supports thermistor mode */

 Enable local temperature sensor by default */

 Enable ADC */

 Enable Vcore and VCC voltage monitoring */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Texas Instruments INA219, INA226 power monitor chips

 *

 * INA219:

 * Zero Drift Bi-Directional Current/Power Monitor with I2C Interface

 * Datasheet: https://www.ti.com/product/ina219

 *

 * INA220:

 * Bi-Directional Current/Power Monitor with I2C Interface

 * Datasheet: https://www.ti.com/product/ina220

 *

 * INA226:

 * Bi-Directional Current/Power Monitor with I2C Interface

 * Datasheet: https://www.ti.com/product/ina226

 *

 * INA230:

 * Bi-directional Current/Power Monitor with I2C Interface

 * Datasheet: https://www.ti.com/product/ina230

 *

 * Copyright (C) 2012 Lothar Felten <lothar.felten@gmail.com>

 * Thanks to Jan Volkering

 common register definitions */

 readonly */

 readonly */

 readonly */

 readonly */

 INA226 register definitions */

 register count */

 settings - depend on use case */

 PGA=8 */

 averages=16 */

 worst case is 68.10 ms (~14.6Hz, ina219) */

 worst case delay in ms */

 bit mask for reading the averaging setting in the configuration register */

 bit number of alert functions in Mask/Enable Register */

 bit mask for alert config bits of Mask/Enable Register */

 common attrs, ina226 attrs and NULL */

/*

 * Both bus voltage and shunt voltage conversion times for ina226 are set

 * to 0b0100 on POR, which translates to 2200 microseconds in total.

 uV */

/*

 * Available averaging rates for ina226. The indices correspond with

 * the bit values expected by the chip (according to the ina226 datasheet,

 * table 3 AVG bit settings, found at

 * https://www.ti.com/lit/ds/symlink/ina226.pdf.

	/*

	 * Multiply the total conversion time by the number of averages.

	 * Return the result in milliseconds.

/*

 * Return the new, shifted AVG field value of CONFIG register,

 * to use with regmap_update_bits

/*

 * Calibration register is set to the best value, which eliminates

 * truncation errors on calculating current register in hardware.

 * According to datasheet (eq. 3) the best values are 2048 for

 * ina226 and 4096 for ina219. They are hardcoded as calibration_value.

/*

 * Initialize the configuration and calibration registers.

		/*

		 * If the current value in the calibration register is 0, the

		 * power and current registers will also remain at 0. In case

		 * the chip has been reset let's check the calibration

		 * register and reinitialize if needed.

		 * We do that extra read of the calibration register if there

		 * is some hint of a chip reset.

				/*

				 * Let's make sure the power and current

				 * registers have been updated before trying

				 * again.

	/*

	 * If we're here then although all write operations succeeded, the

	 * chip still returns 0 in the calibration register. Nothing more we

	 * can do here.

 signed register */

 signed register, result in mA */

 programmer goofed */

 programmer goofed */

/*

 * Turns alert limit values into register values.

 * Opposite of the formula in ina2xx_get_value().

 programmer goofed */

	/*

	 * Clear all alerts first to avoid accidentally triggering ALERT pin

	 * due to register write sequence. Then, only enable the alert

	 * if the value is non-zero.

/*

 * In order to keep calibration register value fixed, the product

 * of current_lsb and shunt_resistor should also be fixed and equal

 * to shunt_voltage_lsb = 1 / shunt_div multiplied by 10^9 in order

 * to keep the scale.

 shunt voltage */

 shunt voltage over/under voltage alert setting and alarm */

 bus voltage */

 bus voltage over/under voltage alert setting and alarm */

 calculated current */

 calculated power */

 over-limit power alert setting and alarm */

 shunt resistance */

 update interval (ina226 only) */

 pointers to created device attributes */

 set the device type */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * An hwmon driver for the Analog Devices AD7416/17/18

 * Copyright (C) 2006-07 Tower Technologies

 *

 * Author: Alessandro Zummo <a.zummo@towertech.it>

 *

 * Based on lm75.c

 * Copyright (C) 1998-99 Frodo Looijaard <frodol@dds.nl>

 AD7418 registers */

 number of ADC channels */

 In jiffies */

 Register values */

 read config register and clear channel bits */

 restore old configuration value */

 Initialize the AD7418 chip */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for SMM665 Power Controller / Monitor

 *

 * Copyright (C) 2010 Ericsson AB.

 *

 * This driver should also work for SMM465, SMM764, and SMM766, but is untested

 * for those chips. Only monitoring functionality is implemented.

 *

 * Datasheets:

 * http://www.summitmicro.com/prod_select/summary/SMM665/SMM665B_2089_20.pdf

 * http://www.summitmicro.com/prod_select/summary/SMM766B/SMM766B_2122.pdf

 Internal reference voltage (VREF, x 1000 */

 module parameters */

/*

 * ADC channel addresses

/*

 * Command registers

/*

 * Configuration registers and register groups

 First limit register */

/*

 * Limit register bit masks

/*

 * Fault register bit definitions

 * Values are merged from status registers 1/2,

 * with status register 1 providing the upper 8 bits.

/*

 * I2C Register addresses

 *

 * The configuration register needs to be the configured base register.

 * The command/status register address is derived from it.

/*

 *  Equations given by chip manufacturer to calculate voltage/temperature values

 *  vref = Reference voltage on VREF_ADC pin (module parameter)

 *  adc  = 10bit ADC value read back from registers

 Voltage A-F and VDD */

 Voltage 12VIN */

 Voltage AIN1, AIN2 */

 Temp Sensor */

/*

 * Chip dependent ADC conversion time, in uS

 ADC conversion time */

 in jiffies */

 adc values (raw) */

 fault status */

 The following values are in mV */

/*

 * smm665_read16()

 *

 * Read 16 bit value from <reg>, <reg+1>. Upper 8 bits are in <reg>.

/*

 * Read adc value.

	/*

	 * Algorithm for reading ADC, per SMM665 datasheet

	 *

	 *  {[S][addr][W][Ack]} {[offset][Ack]} {[S][addr][R][Nack]}

	 * [wait conversion time]

	 *  {[S][addr][R][Ack]} {[datahi][Ack]} {[datalo][Ack][P]}

	 *

	 * To implement the first part of this exchange,

	 * do a full read transaction and expect a failure/Nack.

	 * This sets up the address pointer on the SMM665

	 * and starts the ADC conversion.

	 * Then do a two-byte read transaction.

		/*

		 * We expect ENXIO to reflect NACK

		 * (per Documentation/i2c/fault-codes.rst).

		 * Everything else is an error.

	/*

	 * Now read two bytes.

	 *

	 * Neither i2c_smbus_read_byte() nor

	 * i2c_smbus_read_block_data() worked here,

	 * so use i2c_smbus_read_word_swapped() instead.

	 * We could also try to use i2c_master_recv(),

	 * but that is not always supported.

	/*

	 * Validate/verify readback adc channel (in bit 11..14).

		/*

		 * read status registers

 Read adc registers */

 Return converted value from given adc */

 If we get here, the developer messed up */

/*

 * These macros are used below in constructing device attribute objects

 * for use with sysfs_create_group() to make a sysfs device file

 * for each register.

 Construct a sensor_device_attribute structure for each register */

 Input voltages */

 Input voltages min */

 Input voltages max */

 Input voltages lcrit */

 Input voltages crit */

 critical alarms */

 Temperature */

/*

 * Finally, construct an array of pointers to members of the above objects,

 * as required for sysfs_create_group()

	/*

	 * Read limits.

	 *

	 * Limit registers start with register SMM665_LIMIT_BASE.

	 * Each channel uses 8 registers, providing four limit values

	 * per channel. Each limit value requires two registers, with the

	 * high byte in the first register and the low byte in the second

	 * register. The first two limits are under limit values, followed

	 * by two over limit values.

	 *

	 * Limit register order matches the ADC register order, so we use

	 * ADC register defines throughout the code to index limit registers.

	 *

	 * We save the first retrieved value both as "critical" and "alarm"

	 * value. The second value overwrites either the critical or the

	 * alarm value, depending on its configuration. This ensures that both

	 * critical and alarm values are initialized, even if both registers are

	 * configured as critical or non-critical.

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2020 MaxLinear, Inc.

 *

 * This driver is a hardware monitoring driver for PVT controller

 * (MR75203) which is used to configure & control Moortec embedded

 * analog IP to enable multiple embedded temperature sensor(TS),

 * voltage monitor(VM) & process detector(PD) modules.

 PVT Common register */

 Macro Common Register */

 TS & PD Individual Macro Register */

 VM Individual Macro Register */

 SDA Slave Register */

		/*

		 * Convert the register value to

		 * degrees centigrade temperature

 Convert the N bitstream count into voltage */

	/*

	 * The system supports 'clk_sys' to 'clk_ip' frequency ratios

	 * from 2:1 to 512:1

		/*

		 * Incase intel,vm-map property is not defined, we assume

		 * incremental channel numbers.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) Linumiz 2021

 *

 * sht4x.c - Linux hwmon driver for SHT4x Temperature and Humidity sensor

 *

 * Author: Navin Sankar Velliangiri <navin@linumiz.com>

/*

 * Poll intervals (in milliseconds)

/*

 * I2C command delays (in microseconds)

/*

 * Command Bytes

/**

 * struct sht4x_data - All the data required to operate an SHT4X chip

 * @client: the i2c client associated with the SHT4X

 * @lock: a mutex that is used to prevent parallel access to the i2c client

 * @update_interval: the minimum poll interval

 * @last_updated: the previous time that the SHT4X was polled

 * @temperature: the latest temperature value received from the SHT4X

 * @humidity: the latest humidity value received from the SHT4X

 atomic read data updates */

 validity of fields below */

 in milli-seconds */

 in jiffies */

/**

 * sht4x_read_values() - read and parse the raw data from the SHT4X

 * @sht4x_data: the struct sht4x_data to use for the lock

 * Return: 0 if successful, -ERRNO if not

 sht4x_interval_read() - read the minimum poll interval in milliseconds */

 sht4x_temperature1_read() - read the temperature in millidegrees */

 sht4x_humidity1_read() - read a relative humidity in millipercent */

	/*

	 * we require full i2c support since the sht4x uses multi-byte read and

	 * writes as well as multi-byte commands which are not supported by

	 * the smbus protocol

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * fam15h_power.c - AMD Family 15h processor power monitoring

 *

 * Copyright (c) 2011-2016 Advanced Micro Devices, Inc.

 * Author: Andreas Herrmann <herrmann.der.user@googlemail.com>

 D18F3 */

 D18F4 */

 D18F5 */

 set maximum interval as 1 second */

 maximum accumulated power of a compute unit */

 accumulated power of the compute units */

 performance timestamp counter */

 online/offline status of current compute unit */

	/*

	 * On Carrizo and later platforms, TdpRunAvgAccCap bit field

	 * is extended to 4:31 from 4:25.

	/*

	 * On Carrizo and later platforms, ApmTdpLimit bit field

	 * is extended to 16:31 from 16:28.

	/*

	 * Convert to microWatt

	 *

	 * power is in Watt provided as fixed point integer with

	 * scaling factor 1/(2^16).  For conversion we use

	 * (10^6)/(2^16) = 15625/(2^10)

	/*

	 * With the new x86 topology modelling, cpu core id actually

	 * is compute unit id.

/*

 * This function is only able to be called when CPUID

 * Fn8000_0007:EDX[12] is set.

	/*

	 * Choose the first online core of each compute unit, and then

	 * read their MSR value of power and ptsc in a single IPI,

	 * because the MSR value of CPU core represent the compute

	 * unit's.

 get any CPU on this compute unit */

	/*

	 * With the new x86 topology modelling, x86_max_cores is the

	 * compute unit number.

 check if current compute unit is online */

 the unit is microWatt */

 the interval value should be greater than 0 */

 check if processor supports accumulated power */

/*

 * Newer BKDG versions have an updated recommendation on how to properly

 * initialize the running average range (was: 0xE, now: 0x9). This avoids

 * counter saturations resulting in bogus power readings.

 * We correct this value ourselves to cope with older BIOSes.

	/*

	 * let this quirk apply only to the current version of the

	 * northbridge, since future versions may change the behavior

 result not allowed to be >= 256W */

 convert to microWatt */

 CPUID Fn8000_0007:EDX[12] indicates to support accumulated power */

	/*

	 * determine the ratio of the compute unit power accumulator

	 * sample period to the PTSC counter period by executing CPUID

	 * Fn8000_0007:ECX

	/*

	 * Milliseconds are a reasonable interval for the measurement.

	 * But it shouldn't set too long here, because several seconds

	 * would cause the read function to hang. So set default

	 * interval as 10 ms.

	/*

	 * though we ignore every other northbridge, we still have to

	 * do the tweaking on _each_ node in MCM processors as the counters

	 * are working hand-in-hand

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the Texas Instruments / Burr Brown INA209

 * Bidirectional Current/Power Monitor

 *

 * Copyright (C) 2012 Guenter Roeck <linux@roeck-us.net>

 *

 * Derived from Ira W. Snyder's original driver submission

 *	Copyright (C) 2008 Paul Hays <Paul.Hays@cattail.ca>

 *	Copyright (C) 2008-2009 Ira W. Snyder <iws@ovro.caltech.edu>

 *

 * Aligned with ina2xx driver

 *	Copyright (C) 2012 Lothar Felten <l-felten@ti.com>

 *	Thanks to Jan Volkering

 *

 * Datasheet:

 * https://www.ti.com/lit/gpn/ina209

 register definitions */

 PGA=8, full range */

 uOhm */

 in jiffies */

 All chip registers */

 Original configuration */

 Original calibration */

/*

 * Read a value from a device register and convert it to the

 * appropriate sysfs units

 LSB=10 uV. Convert to mV. */

 LSB=4 mV, last 3 bits unused */

 LSB=1 mV, in the upper 8 bits */

 LSB=1 mV, in the upper 8 bits */

 LSB=20 mW. Convert to uW */

 LSB=1 mA (selected). Is in mA */

 programmer goofed */

/*

 * Take a value and convert it to register format, clamping the value

 * to the appropriate range.

 Limit to +- 320 mV, 10 uV LSB */

		/*

		 * Limit to 0-32000 mV, 4 mV LSB

		 *

		 * The last three bits aren't part of the value, but we'll

		 * preserve them in their original state.

		/*

		 * Limit to -255-0 mV, 1 mV LSB

		 * Convert the value to a positive value for the register

		 *

		 * The value lives in the top 8 bits only, be careful

		 * and keep original value of other bits.

		/*

		 * Limit to 0-255 mV, 1 mV LSB

		 *

		 * The value lives in the top 8 bits only, be careful

		 * and keep original value of other bits.

 20 mW LSB */

 Other registers are read-only, return access error */

/*

 * History is reset by writing 1 into bit 0 of the respective peak register.

 * Since more than one peak register may be affected by the scope of a

 * reset_history attribute write, use a bit mask in attr->index to identify

 * which registers are affected.

	/*

	 * All alarms are in the INA209_STATUS register. To avoid a long

	 * switch statement, the mask is passed in attr->index

 Shunt voltage, history, limits, alarms */

 Bus voltage, history, limits, alarms */

 Power */

 Current */

/*

 * Finally, construct an array of pointers to members of the above objects,

 * as required for sysfs_create_group()

 Restore initial configuration */

	/*

	 * Calibrate current LSB to 1mA. Shunt is in uOhms.

	 * See equation 13 in datasheet.

 Clear status register */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Texas Instruments / National Semiconductor LM95234

 *

 * Copyright (c) 2013, 2014 Guenter Roeck <linux@roeck-us.net>

 *

 * Derived from lm95241.c

 * Copyright (C) 2008, 2010 Davide Rizzo <elpa.rizzo@gmail.com>

 LM95234 registers */

 Remote only */

 Remote only */

 Remote channel 1,2 */

 Client data (each client gets its own) */

 in jiffies */

 false until following fields are valid */

 registers values */

 temperature (signed) */

 fault/alarm status */

 critical temperature limit */

 high temperature limit */

 remote temperature offset */

 common hysteresis */

 temperature sensor type */

	/*

	 * Read signed temperature if unsigned temperature is 0,

	 * or if this is the local sensor.

 Fill value cache. Must be called with update lock held. */

 Result can be negative, so be careful with unsigned operands */

 Result can be negative, so be careful with unsigned operands */

 Accuracy is 1/2 degrees C */

 start conversion if necessary */

 If diode type status reports an error, try to fix it */

 Initialize the LM95234 chip */

 Driver data (common to all clients) */

 SPDX-License-Identifier: GPL-2.0+

/*

 * nzxt-kraken2.c - hwmon driver for NZXT Kraken X42/X52/X62/X72 coolers

 *

 * The device asynchronously sends HID reports (with id 0x04) twice a second to

 * communicate current fan speed, pump speed and coolant temperature.  The

 * device does not respond to Get_Report requests for this status report.

 *

 * Copyright 2019-2021  Jonas Malaco <jonas@protocubo.io>

 seconds; equivalent to 4 missed updates */

 jiffies */

 unreachable */

 unreachable */

	/*

	 * The fractional byte of the coolant temperature has been observed to

	 * be in the interval [1,9], but some of these steps are also

	 * consistently skipped for certain integer parts.

	 *

	 * For the lack of a better idea, assume that the resolution is 0.1°C,

	 * and that the missing steps are artifacts of how the firmware

	 * processes the raw sensor data.

	/*

	 * Initialize ->updated to STATUS_VALIDITY seconds in the past, making

	 * the initial empty data invalid for kraken2_read without the need for

	 * a special case there.

	/*

	 * Enable hidraw so existing user-space tools can continue to work.

 NZXT Kraken X42/X52/X62/X72 */

/*

 * When compiled into the kernel, initialize after the hid bus.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm87.c

 *

 * Copyright (C) 2000       Frodo Looijaard <frodol@dds.nl>

 *                          Philip Edelbrock <phil@netroedge.com>

 *                          Stephen Rousset <stephen.rousset@rocketlogix.com>

 *                          Dan Eaton <dan.eaton@rocketlogix.com>

 * Copyright (C) 2004-2008  Jean Delvare <jdelvare@suse.de>

 *

 * Original port to Linux 2.6 by Jeff Oliver.

 *

 * The LM87 is a sensor chip made by National Semiconductor. It monitors up

 * to 8 voltages (including its own power source), up to three temperatures

 * (its own plus up to two external ones) and up to two fans. The default

 * configuration is 6 voltages, two temperatures and two fans (see below).

 * Voltages are scaled internally with ratios such that the nominal value of

 * each voltage correspond to a register value of 192 (which means a

 * resolution of about 0.5% of the nominal value). Temperature values are

 * reported with a 1 deg resolution and a 3-4 deg accuracy. Complete

 * datasheet can be obtained from National's website at:

 *   http://www.national.com/pf/LM/LM87.html

 *

 * Some functions share pins, so not all functions are available at the same

 * time. Which are depends on the hardware setup. This driver normally

 * assumes that firmware configured the chip correctly. Where this is not

 * the case, platform code must set the I2C client's platform_data to point

 * to a u8 value to be written to the channel register.

 * For reference, here is the list of exclusive functions:

 *  - in0+in5 (default) or temp3

 *  - fan1 (default) or in6

 *  - fan2 (default) or in7

 *  - VID lines (default) or IRQ lines (not handled by this driver)

 *

 * The LM87 additionally features an analog output, supposedly usable to

 * control the speed of a fan. All new chips use pulse width modulation

 * instead. The LM87 is the only hardware monitoring chipset I know of

 * which uses amplitude modulation. Be careful when using this feature.

 *

 * This driver also supports the ADM1024, a sensor chip made by Analog

 * Devices. That chip is fully compatible with the LM87. Complete

 * datasheet can be obtained from Analog's website at:

 *   https://www.analog.com/en/prod/0,2877,ADM1024,00.html

/*

 * Addresses to scan

 * LM87 has three possible addresses: 0x2c, 0x2d and 0x2e.

/*

 * The LM87 registers

 nr in 0..5 */

 nr in 0..1 */

 nr in 0..1 */

/*

 * Conversions and various macros

 * The LM87 uses signed 8-bit values for temperatures.

 analog out is 9.80mV/LSB */

 nr in 0..1 */

/*

 * Client data (each client gets its own)

 false until following fields are valid */

 In jiffies */

 register value */

 original register value */

 register value */

 register value */

 register value */

 register value */

 register value */

 register value */

 min of two register values */

 min of two register values */

 register value */

 register value */

 register value, shifted right */

 register value */

 register values, combined */

 register values, combined */

/*

 * Sysfs stuff

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan clock divider.  This follows the principle

 * of least surprise; the user doesn't expect the fan minimum to change just

 * because the divider changed.

/*

 * Real code

 Return 0 if detection is successful, -ENODEV otherwise */

 Now, we do the remaining detection. */

 National Semiconductor */

 Analog Devices */

 Limits are left uninitialized after power-up */

 Make sure Start is set and INT#_Clear is clear */

 Initialize the LM87 chip */

	/*

	 * Construct the list of attributes, the list depends on the

	 * configuration of the chip

/*

 * Driver data (common to all clients)

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * nct6683 - Driver for the hardware monitoring functionality of

 *	     Nuvoton NCT6683D/NCT6686D/NCT6687D eSIO

 *

 * Copyright (C) 2013  Guenter Roeck <linux@roeck-us.net>

 *

 * Derived from nct6775 driver

 * Copyright (C) 2012, 2013  Guenter Roeck <linux@roeck-us.net>

 *

 * Supports the following chips:

 *

 * Chip        #vin    #fan    #pwm    #temp  chip ID

 * nct6683d     21(1)   16      8       32(1) 0xc730

 * nct6686d     21(1)   16      8       32(1) 0xd440

 * nct6687d     21(1)   16      8       32(1) 0xd590

 *

 * Notes:

 *	(1) Total number of vin and temp inputs is 32.

/*

 * Super-I/O constants and functions

 Logical device select */

 Device ID (2 bytes) */

 Logical device enable */

 Logical device address (2 bytes) */

 for later */

	/*

	 * Try to reserve <ioreg> and <ioreg + 1> for exclusive access.

/*

 * ISA constants

 Use EC port 1 */

 Common and NCT6683 specific data */

 8 bit */

 8 bit */

 8 bit */

 8 bit */

 16 bit */

 disabled */

 0x10 */

 0x20 */

 0x30 */

 0x40 */

 0x50 */

 0x60 voltage sensors */

 ------------------------------------------------------- */

 IO base of EC space */

 SIO register */

 number of temperature attributes */

 number of voltage attributes */

 used to protect sensor updates */

 true if following fields are valid */

 In jiffies */

 Voltage attribute values */

 [0]=in, [1]=in_max, [2]=in_min */

 Temperature attribute values */

	s8 temp[4][NCT6683_NUM_REG_MON];/* [0]=min, [1]=max, [2]=hyst,

					 * [3]=crit

 Fan attribute values */

 some fan inputs can be disabled */

 Remember extra register values over suspend/resume */

 true if both index and nr are used */

 LSB is 16 mV, except for the following sources, where it is 32 mV */

 unlock */

 unlock */

 max */

 crit */

 min */

 max */

 hyst */

 crit */

 Measured voltages and limits */

 Measured temperatures and limits */

 Measured fan speeds and limits */

/*

 * Sysfs callback functions

 attribute */

	/*

	 * Voltage limits exist for Intel boards,

	 * but register location and encoding is unknown

 fan index */

 attribute index */

	/*

	 * Intel may have minimum fan speed limits,

	 * but register location and encoding are unknown.

/*

 * nct6683_fan_is_visible uses the index into the following array

 * to determine if attributes should be created or not.

 * Any change in order or content must be matched.

/*

 * Temperature sensor type is determined by temperature source

 * and can not be modified.

 * 0x02..0x07: Thermal diode

 * 0x08..0x18: Thermistor

 * 0x20..0x2b: Intel PECI

 * 0x42..0x49: AMD TSI

 * Others are unspecified (not visible)

 thermal diode */

 thermistor */

 PECI */

 temp index */

 attribute index */

	/*

	 * Intel does not have low temperature limits or temperature hysteresis

	 * registers, or at least register location and encoding is unknown.

 type */

/*

 * nct6683_temp_is_visible uses the index into the following array

 * to determine if attributes should be created or not.

 * Any change in order or content must be matched.

 2 */

 3 */

 4 */

 5 */

 6 */

 pwm index */

 Only update pwm values for Mitac boards */

 Case open detection */

	/*

	 * Use CR registers to clear caseopen status.

	 * Caseopen is activ low, clear by writing 1 into the register.

 Force cache refresh */

 Get the monitoring functions started */

 Start hardware monitoring if needed */

/*

 * There are a total of 24 fan inputs. Each can be configured as input

 * or as output. A maximum of 16 inputs and 8 outputs is configurable.

/*

 * Translation from monitoring register to temperature and voltage attributes

 * ==========================================================================

 *

 * There are a total of 32 monitoring registers. Each can be assigned to either

 * a temperature or voltage monitoring source.

 * NCT6683_REG_MON_CFG(x) defines assignment for each monitoring source.

 *

 * Temperature and voltage attribute mapping is determined by walking through

 * the NCT6683_REG_MON_CFG registers. If the assigned source is

 * a temperature, temp_index[n] is set to the monitor register index, and

 * temp_src[n] is set to the temperature source. If the assigned source is

 * a voltage, the respective values are stored in in_index[] and in_src[],

 * respectively.

 Ignore invalid assignments */

 Skip if disabled or reserved */

 By default only instantiate driver if the customer ID is known */

 Register sysfs hooks */

 Force re-reading all values */

 CONFIG_PM */

 We have a known chip, find the HWM I/O address */

 Activate logical device if needed */

/*

 * when Super-I/O functions move to a separate file, the Super-I/O

 * bus will manage the lifetime of the device and this module will only keep

 * track of the nct6683 driver. But since we use platform_device_alloc(), we

 * must keep track of the device

	/*

	 * initialize sio_data->kind and sio_data->sioreg.

	 *

	 * when Super-I/O functions move to a separate file, the Super-I/O

	 * driver will probe 0x2e and 0x4e and auto-detect the presence of a

	 * nct6683 hardware monitor, and call probe()

 platform_device_add calls probe() */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  pc87360.c - Part of lm_sensors, Linux kernel modules

 *              for hardware monitoring

 *  Copyright (C) 2004, 2007 Jean Delvare <jdelvare@suse.de>

 *

 *  Copied from smsc47m1.c:

 *  Copyright (C) 2002 Mark D. Studebaker <mdsxyz123@yahoo.com>

 *

 *  Supports the following chips:

 *

 *  Chip        #vin    #fan    #pwm    #temp   devid

 *  PC87360     -       2       2       -       0xE1

 *  PC87363     -       2       2       -       0xE8

 *  PC87364     -       3       3       -       0xE4

 *  PC87365     11      3       3       2       0xE5

 *  PC87366     11      3       3       3-4     0xE9

 *

 *  This driver assumes that no more than one chip is present, and one of

 *  the standard Super-I/O addresses is used (0x2E/0x2F or 0x4E/0x4F).

/*

 * Super-I/O registers and operations

 Register: Logical device select */

 Register: Device ID */

 Register: Device activation */

 Register: Base address */

 Logical device: fans */

 Logical device: voltages */

 Logical device: temperatures */

/*

 * Logical devices

/*

 * Fan registers and conversions

 nr has to be 0 or 1 (PC87360/87363) or 2 (PC87364/87365/87366) */

/*

 * Voltage registers and conversions

/*

 * Temperature registers and conversions

/*

 * Device data

 true if following fields are valid */

 In jiffies */

 Register value */

 Register value */

 Register value */

 Register value */

 Configuration register values, combined */

 1 mV/bit */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register values, combined, masked */

 Configuration register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value, masked */

/*

 * Functions declaration

/*

 * Driver data

/*

 * Sysfs stuff

 If it wouldn't fit, change clock divisor */

 Write new divider, preserve alarm bits */

 (temp & vin) channel status register alarm bits (pdf sec.11.5.12) */

 min limit crossed */

 max limit exceeded */

 temp crit exceeded (temp only) */

/*

 * show_in_min/max_alarm() reads data from the per-channel status

 * register (sec 11.5.12), not the vin event status registers (sec

 * 11.5.2) that (legacy) show_in_alarm() resds (via data->in_alarms)

/*

 * the +11 term below reflects the fact that VLM units 11,12,13 are

 * used in the chip to measure voltage across the thermistors

/*

 * show_therm_min/max_alarm() reads data from the per-channel voltage

 * status register (sec 11.5.12)

/*

 * show_temp_min/max_alarm() reads data from the per-channel status

 * register (sec 12.3.7), not the temp event status registers (sec

 * 12.3.2) that show_temp_alarm() reads (via data->temp_alarms)

 open diode */

/*

 * Device detection, registration and update

 logical device count */

 No superio_enter */

 Identify device */

 PC87360 */

 PC87363 */

 PC87364 */

 PC87365 */

 PC87366 */

 Remember the device id */

 select logical device */

 Fans */

 Voltages */

 Are we using thermistors? */

 PC87366 */

				/*

				 * These registers are not logical-device

				 * specific, just that we won't need them if

				 * we don't use the VLM device

 Retrieve the fans configuration from Super-I/O space */

	/*

	 * Use the correct reference voltage

	 * Unless both the VLM and the TMS logical devices agree to

	 * use an external Vref, the internal one is used.

 Fan clock dividers may be needed before any data is read */

 PC87366 */

 Register all-or-nothing sysfs groups */

 create device attr-files for varying sysfs groups */

/*

 * ldi is the logical device index

 * bank is for voltages and temperatures only

 (temp & vin) channel conversion status register flags (pdf sec.11.5.12) */

 new data ready */

 enabled channel (temp or vin) */

 propagate to alarms-reg ?? (chk val!) */

 sample ready mask */

 OTS Output Enable */

 0x87 */

 0xCF */

 Forcibly enable voltage channel */

	/*

	 * We can't blindly trust the Super-I/O space configuration bit,

	 * most BIOS won't set it properly

 thermistors are temp[4-6], measured on vin[11-14] */

 Forcibly enable temperature channel */

				/*

				 * The pin may already be used by thermal

				 * diodes

 Forcibly enable thermistor channel */

 Chip config as documented by National Semi. */

			/*

			 * We voluntarily omit the bank here, in case the

			 * sequence itself matters. It shouldn't be a problem,

			 * since nobody else is supposed to access the

			 * device at that point.

 Increase clock divider if needed and possible */

 overflow flag */

 next to overflow */

 Decrease clock divider if possible */

 min "nails" divider */

 bad accuracy */

 Write new fan min if it changed */

 Fans */

 Change clock divider if needed */

 Clear bits and write new divider */

 Voltages */

 Clear bits */

 Temperatures */

 Clear bits */

 Arbitrarily pick one of the addresses */

 Sets global pdev as a side effect */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ADT7410/ADT7420 digital temperature sensor driver

 *

 * Copyright 2012-2013 Analog Devices Inc.

 *   Author: Lars-Peter Clausen <lars@metafoo.de>

 SPDX-License-Identifier: GPL-2.0-or-later

/* tmp421.c

 *

 * Copyright (C) 2009 Andre Prendel <andre.prendel@gmx.de>

 * Preliminary support by:

 * Melvin Rook, Raymond Ng

/*

 * Driver for the Texas Instruments TMP421 SMBus temperature sensor IC.

 * Supported models: TMP421, TMP422, TMP423, TMP441, TMP442

 Addresses to scan */

 The TMP421 registers */

 Flags */

 Manufacturer / Device ID's */

 Mask out status bits */

		/*

		 * Any of OPEN or /PVLD bits indicate a hardware mulfunction

		 * and the conversion result may be incorrect

 Set the conversion rate to 2 Hz */

 Start conversions (disable shutdown if necessary) */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * f71805f.c - driver for the Fintek F71805F/FG and F71872F/FG Super-I/O

 *             chips integrated hardware monitoring features

 * Copyright (C) 2005-2006  Jean Delvare <jdelvare@suse.de>

 *

 * The F71805F/FG is a LPC Super-I/O chip made by Fintek. It integrates

 * complete hardware monitoring features: voltage, fan and temperature

 * sensors, and manual and automatic fan speed control.

 *

 * The F71872F/FG is almost the same, with two more voltages monitored,

 * and 6 VID inputs.

 *

 * The F71806F/FG is essentially the same as the F71872F/FG. It even has

 * the same chip ID, so the driver can't differentiate between.

/*

 * Super-I/O constants and functions

 Logical device select */

 Device ID (2 bytes) */

 Device revision */

 Fintek ID (2 bytes) */

 Multi Function Select 1 (F71872F) */

 Logical device enable */

 Logical device address (2 bytes) */

/*

 * ISA constants

/*

 * Registers

 in nr from 0 to 10 (8-bit values) */

 fan nr from 0 to 2 (12-bit values, two registers) */

 temp nr from 0 to 2 (8-bit values) */

 pwm/fan pwmnr from 0 to 2, auto point apnr from 0 to 2 */

 map Fintek numbers to our numbers as follows: 9->0, 5->1, 1->2 */

 status nr from 0 to 2 */

 individual register bits */

/*

 * Data structures and manipulation thereof

 true if following fields are valid */

 In jiffies */

 In jiffies */

 Register values */

 The 2 least significant bits are not used */

 in0 is downscaled by a factor 2 internally */

 The 4 most significant bits are not used */

	/*

	 * If the low limit is set below what the chip can measure,

	 * store the largest possible 12-bit value in the registers,

	 * so that no alarm will ever trigger.

 The highest we can do */

 Use 48 MHz clock */

 The lowest we can do */

 Use 1 MHz clock */

/*

 * Device I/O access

 Must be called with data->update_lock held, except during initialization */

 Must be called with data->update_lock held, except during initialization */

/*

 * It is important to read the MSB first, because doing so latches the

 * value of the LSB, so we are sure both bytes belong to the same value.

 * Must be called with data->update_lock held, except during initialization

 Must be called with data->update_lock held, except during initialization */

 Limit registers cache is refreshed after 60 seconds */

 Measurement registers cache is refreshed after 1 second */

/*

 * Sysfs interface

 MANUAL */

 Automatic mode, user can't set PWM value */

 Manual mode, user can set PWM value */

 3 is diode, 4 is thermistor */

/*

 * pwm (value) files are created read-only, write permission is

 * then added or removed dynamically as needed

/*

 * We don't include pwm_freq files in the arrays above, because they must be

 * created conditionally (only if pwm_mode is 1 == PWM)

 We also need an indexed access to pwmN files to toggle writability */

/*

 * Device registration and initialization

	/*

	 * Fan monitoring can be disabled. If it is, we won't be polling

	 * the register values, and won't create the related sysfs files.

		/*

		 * Clear latch full bit, else "speed mode" fan speed control

		 * doesn't work

 Some voltage inputs depend on chip model and configuration */

 in4 */

 in8 */

 Initialize the F71805F chip */

 Register sysfs interface files */

 in4 */

 in8 */

 in9 (F71872F/FG only) */

 in9 (F71872F/FG only) */

 If control mode is PWM, create pwm_freq file */

 If PWM is in manual mode, add write permission */

 Ignore 3 LSB */

 Sets global pdev as a side effect */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * jc42.c - driver for Jedec JC42.4 compliant temperature sensors

 *

 * Copyright (c) 2010  Ericsson AB.

 *

 * Derived from lm77.c by Andras BALI <drewie@freemail.hu>.

 *

 * JC42.4 compliant temperature sensors are typically used on memory modules.

 Addresses to scan */

 JC42 registers. All registers are 16 bit. */

 NXP and Atmel, possibly others? */

 Status bits in temperature register */

 Configuration register defines */

 Capabilities */

 Manufacturer IDs */

 Analog Devices */

 Atmel */

 Atmel */

 Maxim */

 IDT */

 Microchip */

 NXP Semiconductors */

 ON Semiconductor */

 ST Microelectronics */

 Giantec */

 Giantec, 2nd mfg ID */

 SMBUS register */

 SMBus time-out, active low */

 Supported chips */

 Analog Devices */

 Atmel */

 Giantec */

 IDT */

 Also matches TSE2002 */

 Maxim */

 Microchip */

 Also matches mcp9805 */

 NXP */

 ON Semiconductor */

 Also matches CAT34TS02 */

 ST Microelectronics */

 Each client has this additional data */

 protect register access */

 true if extended range supported */

 In jiffies */

 original configuration */

 current configuration */

 Temperatures */

 convert from 0.001 to 0.0625 resolution */

 convert from 0.0625 to 0.001 resolution */

		/*

		 * JC42.4 compliant chips only support four hysteresis values.

		 * Pick best choice and go from there.

 1.5 degrees C */

 3.0 degrees C */

 6.0 degrees C */

 Return 0 if detection is successful, -ENODEV otherwise */

		/*

		 * Not all chips support this register, but from a

		 * quick read of various datasheets no chip appears

		 * incompatible with the below attempt to disable

		 * the timeout. And the whole thing is opt-in...

 Restore original configuration except hysteresis */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Linear Technology LTC4245 I2C Multiple Supply Hot Swap Controller

 *

 * Copyright (C) 2008 Ira W. Snyder <iws@ovro.caltech.edu>

 *

 * This driver is based on the ds1621 and ina209 drivers.

 *

 * Datasheet:

 * http://www.linear.com/pc/downloadDocument.do?navId=H0,C1,C1003,C1006,C1140,P19392,D13517

 Here are names of the chip's registers (a.k.a. commands) */

 readonly */

 in jiffies */

 Control registers */

 Voltage registers */

 GPIO ADC registers */

/*

 * Update the readings from the GPIO pins. If the driver has been configured to

 * sample all GPIO's as analog voltages, a round-robin sampling method is used.

 * Otherwise, only the configured GPIO pin is sampled.

 *

 * LOCKING: must hold data->update_lock

 no extra gpio support, we're basically done */

	/*

	 * If the last reading was too long ago, then we mark all old GPIO

	 * readings as stale by setting them to -EAGAIN

	/*

	 * Get the current GPIO pin

	 *

	 * The datasheet calls these GPIO[1-3], but we'll calculate the zero

	 * based array index instead, and call them GPIO[0-2]. This is much

	 * easier to think about.

 Read the GPIO voltage from the GPIOADC register */

 Find the next GPIO pin to read */

	/*

	 * Calculate the correct setting for the GPIO register so it will

	 * sample the next GPIO pin

 Update the GPIO register */

 Update saved data */

 Read control registers -- 0x00 to 0x07 */

 Read voltage registers -- 0x10 to 0x1c */

 Update GPIO readings */

 Return the voltage from the given register in millivolts */

 If we get here, the developer messed up */

 Return the current in the given sense register in milliAmperes */

	/*

	 * The strange looking conversions that follow are fixed-point

	 * math, since we cannot do floating point in the kernel.

	 *

	 * Step 1: convert sense register to microVolts

	 * Step 2: convert voltage to milliAmperes

	 *

	 * If you play around with the V=IR equation, you come up with

	 * the following: X uV / Y mOhm == Z mA

	 *

	 * With the resistors that are fractions of a milliOhm, we multiply

	 * the voltage and resistance by 10, to shift the decimal point.

	 * Now we can use the normal division operator again.

 voltage in uV */

 sense resistor 50 mOhm */

 voltage in uV */

 sense resistor 3.5 mOhm */

 voltage in uV */

 sense resistor 2.5 mOhm */

 voltage in uV */

 sense resistor 100 mOhm */

 If we get here, the developer messed up */

 Map from voltage channel index to voltage register */

 Map from current channel index to current register */

 prefer platform data */

 fallback on OF */

 Initialize the LTC4245 chip */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * coretemp.c - Linux kernel module for hardware monitoring

 *

 * Copyright (C) 2007 Rudolf Marek <r.marek@assembler.cz>

 *

 * Inspired from many hwmon drivers

/*

 * force_tjmax only matters when TjMax can't be read from the CPU itself.

 * When set, it replaces the driver's suboptimal heuristic.

 Sysfs attribute for package temp */

 Sysfs Base attr no for coretemp */

 Number of Real cores per cpu */

 String Length of attrs */

 Maximum no of basic attrs */

/*

 * Per-Core Temperature Data

 * @last_updated: The time when the current temperature value was updated

 *		earlier (in jiffies).

 * @cpu_core_id: The CPU Core from which temperature values should be read

 *		This value is passed as "id" field to rdmsr/wrmsr functions.

 * @status_reg: One of IA32_THERM_STATUS or IA32_PACKAGE_THERM_STATUS,

 *		from where the temperature values should be read.

 * @attr_size:  Total number of pre-core attrs displayed in the sysfs.

 * @is_pkg_data: If this is 1, the temp_data holds pkgtemp data.

 *		Otherwise, temp_data holds coretemp data.

 * @valid: If this is 1, the current temperature is valid.

 Platform Data per Physical CPU */

 Keep track of how many zone pointers we allocated in init() */

 Array of zone pointers. Serialized by cpu hotplug lock */

 Check whether the time interval has elapsed */

		/*

		 * Ignore the valid bit. In all observed cases the register

		 * value is either low or zero if the valid bit is 0.

		 * Return it instead of reporting an error which doesn't

		 * really help at all.

 CE41x0 (Sodaville ) */

 Atom S1240 (Centerton) */

 Atom S1220 (Centerton) */

 Atom S1260 (Centerton) */

 Model 0x1c, stepping 2	*/

 Model 0x1c, stepping 2	*/

 D4xx, K4xx, N4xx, D5xx, K5xx, N5xx */

	{ 0x1c, ANY, 90000 },	/* Z5xx, N2xx, possibly others

				 * Note: Also matches 230 and 330,

				 * which are covered by tjmax_table

	{ 0x26, ANY, 90000 },	/* Atom Tunnel Creek (Exx), Lincroft (Z6xx)

				 * Note: TjMax for E6xxT is 110C, but CPU type

				 * is undetectable by software

 Atom Medfield (Z2460) */

 Atom Clover Trail/Cloverview (Z27x0) */

	{ 0x36, ANY, 100000 },	/* Atom Cedar Trail/Cedarview (N2xxx, D2xxx)

				 * Also matches S12x0 (stepping 9), covered by

				 * PCI table

 The 100C is default for both mobile and non mobile CPUs */

	/*

	 * Explicit tjmax table entries override heuristics.

	 * First try PCI host bridge IDs, followed by model ID strings

	 * and model/stepping information.

 Early chips have no MSR for TjMax */

		/*

		 * Now we can detect the mobile CPU using Intel provided table

		 * http://softwarecommunity.intel.com/Wiki/Mobility/720.htm

		 * For Core2 cores, check MSR 0x17, bit 28 1 = Mobile CPU

			/*

			 * Trust bit 28 up to Penryn, I could not find any

			 * documentation on that; if you happen to know

			 * someone at Intel please ask

 Platform ID bits 52:50 (EDX starts at bit 32) */

			/*

			 * Mobile Penryn CPU seems to be platform ID 7 or 5

			 * (guesswork)

				/*

				 * If MSR EE bit is set, set it to 90 degrees C,

				 * otherwise 105 degrees C

		/*

		 * If we don't use msr EE it means we are desktop CPU

		 * (with exeception of Atom)

	/*

	 * A new feature of current Intel(R) processors, the

	 * IA32_TEMPERATURE_TARGET contains the TjMax value

		/*

		 * If the TjMax is not plausible, an assumption

		 * will be used

	/*

	 * An assumption is made for early CPUs and unreadable MSR.

	 * NOTE: the calculated value may not be correct.

	/*

	 * Check if we have problem with errata AE18 of Core processors:

	 * Readings might stop update when processor visited too deep sleep,

	 * fixed for stepping D0 (6EC).

	/*

	 * Find attr number for sysfs:

	 * We map the attr number to core id of the CPU

	 * The attr number is always core id + 2

	 * The Pkgtemp will always show up as temp1_*, if available

 Test if we can access the status register */

 We can access status register. Get Critical Temperature */

	/*

	 * Read the still undocumented bits 8:15 of IA32_TEMPERATURE_TARGET.

	 * The target temperature is available on older CPUs but not in this

	 * register. Atoms don't have the register at all.

 Create sysfs interfaces */

 Remove the sysfs attributes */

 Initialize the per-zone data structures */

	/*

	 * Don't execute this on resume as the offline callback did

	 * not get executed on suspend.

	/*

	 * CPUID.06H.EAX[0] indicates whether the CPU has thermal

	 * sensors. We check this bit only, all the early CPUs

	 * without thermal sensors will be filtered out.

 Check the microcode version of the CPU */

		/*

		 * Alright, we have DTS support.

		 * We are bringing the _first_ core in this pkg

		 * online. So, initialize per-pkg data structures and

		 * then bring this core online.

		/*

		 * Check whether pkgtemp support is available.

		 * If so, add interfaces for pkgtemp.

	/*

	 * Check whether a thread sibling is already online. If not add the

	 * interface for this CPU core.

	/*

	 * Don't execute this on suspend as the device remove locks

	 * up the machine.

 If the physical CPU device does not exist, just return */

 The core id is too big, just return */

	/*

	 * If this is the last thread sibling, remove the CPU core

	 * interface, If there is still a sibling online, transfer the

	 * target cpu of that core interface to it.

	/*

	 * If all cores in this pkg are offline, remove the device. This

	 * will invoke the platform driver remove function, which cleans up

	 * the rest.

	/*

	 * Check whether this core is the target for the package

	 * interface. We need to assign it to some other cpu.

	/*

	 * CPUID.06H.EAX[0] indicates whether the CPU has thermal

	 * sensors. We check this bit only, all the early CPUs

	 * without thermal sensors will be filtered out.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * sis5595.c - Part of lm_sensors, Linux kernel modules

 *	       for hardware monitoring

 *

 * Copyright (C) 1998 - 2001 Frodo Looijaard <frodol@dds.nl>,

 *			     Kyösti Mälkki <kmalkki@cc.hut.fi>, and

 *			     Mark D. Studebaker <mdsxyz123@yahoo.com>

 * Ported to Linux 2.6 by Aurelien Jarno <aurelien@aurel32.net> with

 * the help of Jean Delvare <jdelvare@suse.de>

/*

 * SiS southbridge has a LM78-like chip integrated on the same IC.

 * This driver is a customized copy of lm78.c

 *

 * Supports following revisions:

 *	Version		PCI ID		PCI Revision

 *	1		1039/0008	AF or less

 *	2		1039/0008	B0 or greater

 *

 *  Note: these chips contain a 0008 device which is incompatible with the

 *	 5595. We recognize these by the presence of the listed

 *	 "blacklist" PCI ID and refuse to load.

 *

 * NOT SUPPORTED	PCI ID		BLACKLIST PCI ID

 *	 540		0008		0540

 *	 550		0008		0550

 *	5513		0008		5511

 *	5581		0008		5597

 *	5582		0008		5597

 *	5597		0008		5597

 *	5598		0008		5597/5598

 *	 630		0008		0630

 *	 645		0008		0645

 *	 730		0008		0730

 *	 735		0008		0735

/*

 * If force_addr is set to anything different from 0, we forcibly enable

 * the device at the given address.

 Many SIS5595 constants specified below */

 Length of ISA address segment */

 PCI Config Registers */

 Where are the ISA address/data registers relative to the base address */

 The SIS5595 registers */

/*

 * On the first version of the chip, the temp registers are separate.

 * On the second version,

 * TEMP pin is shared with IN4, configured in PCI register 0x7A.

 * The registers are the same as well.

 * OVER and HYST are really MAX and MIN.

/*

 * Conversions. Limit checking is only done on the TO_REG

 * variants.

/*

 * IN: mV, (0V to 4.08V)

 * REG: 16mV/bit

/*

 * TEMP: mC (-54.12C to +157.53C)

 * REG: 0.83C/bit + 52.12, two's complement

/*

 * FAN DIV: 1, 2, 4, or 8 (defaults to 2)

 * REG: 0, 1, 2, or 3 (respectively) (defaults to 1)

/*

 * For each registered chip, we need to keep some data in memory.

 * The structure is dynamically allocated.

 true if following fields are valid */

 In jiffies */

 == 3 if temp enabled, otherwise == 4 */

 Reg. value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register encoding, shifted right */

 Register encoding, combined */

 pointer to the (only) sis5595 */

 4 Voltages */

 Temperature */

 2 Fans */

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan divisor.  This follows the principle of

 * least surprise; the user doesn't expect the fan minimum to change just

 * because the divisor changed.

 Alarms */

 This is called when the module is loaded */

 Reserve the ISA region */

	/*

	 * Check revision and pin registers to determine whether 4 or 5 voltages

 4 voltages, 1 temp */

 5 voltages, no temps */

 Initialize the SIS5595 chip */

 A few vars need to be filled upon startup */

 Register sysfs hooks */

 ISA access must be locked explicitly. */

 Called when we have found a new SIS5595. */

	PCI_DEVICE_ID_SI_5511, /*

				* 5513 chip has the 0008 device but

				* that ID shows up in other chips so we

				* use the 5511 ID for recognition

 doesn't work for some chips? */

 doesn't work for some chips! */

 Sets global pdev as a side effect */

	/*

	 * Always return failure here.  This is to allow other drivers to bind

	 * to this pci device.  We don't really want to have control over the

	 * pci device, we only wanted to read as few register values from it.

 SPDX-License-Identifier: GPL-2.0-or-later

/***************************************************************************

 *   Copyright (C) 2010-2012 Hans de Goede <hdegoede@redhat.com>           *

 *                                                                         *

 Insmod parameters */

 Embedded uController Logical Dev */

 Key to enable Super-I/O */

 Key to disable Super-I/O */

 Logical device select */

 Device ID */

 Logical device enable */

 Logical device address (2 bytes) */

 Chipset ID */

 Chipset ID */

 Watchdog registers */

 Super I/O functions */

 Don't step on other drivers' I/O space by accident */

	/*

	 * According to SMSC for the commands we use the maximum time for

	 * the EM to respond is 15 ms, but testing shows in practice it

	 * responds within 15-32 reads, so we first busy poll, and if

	 * that fails sleep a bit and try again until we are way past

	 * the 15 ms maximum response time.

 (Optional) Write-Clear the EC to Host Mailbox Register */

 Set Mailbox Address Pointer to first location in Region 1 */

 Write Request Packet Header */

 VREG Access Type read:0x02 write:0x03 */

 # of Entries: 1 Byte (8-bit) */

 Mailbox AP to first data entry loc. */

 Write Value field */

 Write Address field */

 Execute the Random Access Command */

 Write 01h to the Host-to-EC register */

 EM Interface Polling "Algorithm" */

 Read Interrupt source Register */

 Write Clear the interrupt source bits */

 Command Completed ? */

	/*

	 * According to SMSC we may need to retry this, but sofar I've always

	 * seen this succeed in 1 try.

 Read EC-to-Host Register */

 Command Completed ? */

	/*

	 * According to the SMSC app note we should now do:

	 *

	 * Set Mailbox Address Pointer to first location in Region 1 *

	 * outb(0x00, addr + 2);

	 * outb(0x80, addr + 3);

	 *

	 * But if we do that things don't work, so let's not.

 Read Value field */

 Read LSB first, this will cause the matching MSB to be latched */

 Read MSB first, this will cause the matching LSN to be latched */

/*

 * Watchdog routines

 1 second or 60 second resolution? */

	/*

	 * Remember new timeout value, but do not write as that (re)starts

	 * the watchdog countdown.

	/*

	 * The sch56xx's watchdog cannot really be started / stopped

	 * it is always running, but we can avoid the timer expiring

	 * from causing a system reset by clearing the output enable bit.

	 *

	 * The sch56xx's watchdog will set the watchdog event bit, bit 0

	 * of the second interrupt source register (at base-address + 9),

	 * when the timer expires.

	 *

	 * This will only cause a system reset if the 0-1 flank happens when

	 * output enable is true. Setting output enable after the flank will

	 * not cause a reset, nor will the timer expiring a second time.

	 * This means we must clear the watchdog event bit in case it is set.

	 *

	 * The timer may still be running (after a recent watchdog_stop) and

	 * mere milliseconds away from expiring, so the timer must be reset

	 * first!

 1. Reset the watchdog countdown counter */

 2. Enable output */

 3. Clear the watchdog event bit if set */

 Reset the watchdog countdown counter */

 Cache the watchdog registers */

	/* Since the watchdog uses a downcounter there is no register to read

	   the BIOS set timeout from (if any was set at all) ->

 seconds */

 minute */

/*

 * platform dev find, add and remove functions

	/*

	 * Warning the order of the low / high byte is the other way around

	 * as on most other superio devices!!

 SPDX-License-Identifier: GPL-2.0-or-later

/***************************************************************************

 *   Copyright (C) 2011-2012 Hans de Goede <hdegoede@redhat.com>           *

 *                                                                         *

 We only support one model for now */

 FAULT in datasheet, but acts as an alarm */

 true if following fields are valid */

 In jiffies */

 Cache the values for 1 second */

 Alarms need to be explicitly write-cleared */

 Alarms need to be explicitly write-cleared */

 Read all temp + fan ctrl registers to determine which are active */

 Note failing to register the watchdog is not a fatal error */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * i5500_temp - Driver for Intel 5500/5520/X58 chipset thermal sensor

 *

 * Copyright (C) 2012, 2014 Jean Delvare <jdelvare@suse.de>

 Register definitions from datasheet */

 Sensor resolution : 0.5 degree C */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Sparx5 SoC temperature sensor driver

 *

 * Copyright (C) 2020 Lars Povlsen <lars.povlsen@microchip.com>

		/*

		 * From register documentation:

		 * Temp(C) = TEMP_SENSOR_STAT.TEMP / 4096 * 352.2 - 109.4

		/*

		 * Scale down by 10 from above and multiply by 1000 to

		 * have millidegrees as specified by the hwmon sysfs

		 * interface.

 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)



 Copyright (c) 2018 Mellanox Technologies. All rights reserved.

 Copyright (c) 2018 Vadim Pasternak <vadimp@mellanox.com>

 20% */

 100% */

/*

 * Minimum and maximum FAN allowed speed in percent: from 20% to 100%. Values

 * MLXREG_FAN_MAX_STATE + x, where x is between 2 and 10 are used for

 * setting FAN speed dynamic minimum. For example, if value is set to 14 (40%)

 * cooling levels vector will be set to 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10 to

 * introduce PWM speed in percent: 40, 40, 40, 40, 40, 50, 60. 70, 80, 90, 100.

 20 percent */

/*

 * FAN datasheet defines the formula for RPM calculations as RPM = 15/t-high.

 * The logic in a programmable device measures the time t-high by sampling the

 * tachometer every t-sample (with the default value 11.32 uS) and increment

 * a counter (N) as long as the pulse has not change:

 * RPM = 15 / (t-sample * (K + Regval)), where:

 * Regval: is the value read from the programmable device register;

 *  - 0xff - represents tachometer fault;

 *  - 0xfe - represents tachometer minimum value , which is 4444 RPM;

 *  - 0x00 - represents tachometer maximum value , which is 300000 RPM;

 * K: is 44 and it represents the minimum allowed samples per pulse;

 * N: is equal K + Regval;

 * In order to calculate RPM from the register value the following formula is

 * used: RPM = 15 / ((Regval + K) * 11.32) * 10^(-6)), which in  the

 * default case is modified to:

 * RPM = 15000000 * 100 / ((Regval + 44) * 1132);

 * - for Regval 0x00, RPM will be 15000000 * 100 / (44 * 1132) = 30115;

 * - for Regval 0xfe, RPM will be 15000000 * 100 / ((254 + 44) * 1132) = 4446;

 * In common case the formula is modified to:

 * RPM = 15000000 * 100 / ((Regval + samples) * divider).

/*

 * struct mlxreg_fan_tacho - tachometer data (internal use):

 *

 * @connected: indicates if tachometer is connected;

 * @reg: register offset;

 * @mask: fault mask;

 * @prsnt: present register offset;

/*

 * struct mlxreg_fan_pwm - PWM data (internal use):

 *

 * @fan: private data;

 * @connected: indicates if PWM is connected;

 * @reg: register offset;

 * @cooling: cooling device levels;

 * @cdev: cooling device;

/*

 * struct mlxreg_fan - private data (internal use):

 *

 * @dev: basic device;

 * @regmap: register map of parent device;

 * @tacho: tachometer data;

 * @pwm: PWM data;

 * @tachos_per_drwr - number of tachometers per drawer;

 * @samples: minimum allowed samples per pulse;

 * @divider: divider value for tachometer RPM calculation;

			/*

			 * Check FAN presence: FAN related bit in presence register is one,

			 * if FAN is physically connected, zero - otherwise.

				/*

				 * Map channel to presence bit - drawer can be equipped with

				 * one or few FANs, while presence is indicated per drawer.

 FAN is not connected - return zero for FAN speed. */

	/*

	 * Verify if this request is for changing allowed FAN dynamical

	 * minimum. If it is - update cooling levels accordingly and update

	 * state, if current state is below the newly requested minimum state.

	 * For example, if current state is 5, and minimal state is to be

	 * changed from 4 to 6, fan->cooling_levels[0 to 5] will be changed all

	 * from 4 to 6. And state 5 (fan->cooling_levels[4]) should be

	 * overwritten.

		/*

		 * This is configuration change, which is only supported through sysfs.

		 * For configuration non-zero value is to be returned to avoid thermal

		 * statistics update.

 Normalize the state to the valid speed range. */

	/*

	 * Set divider value according to the capability register, in case it

	 * contains valid value. Otherwise use default value. The purpose of

	 * this validation is to protect against the old hardware, in which

	 * this register can return zero.

 Validate if more then one PWM is connected. */

 Validate that conf parameters are not zeros. */

 Obtain the number of FAN drawers, supported by system. */

 Set the number of tachometers per one drawer. */

 Init cooling levels per PWM state. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * mcp3021.c - driver for Microchip MCP3021 and MCP3221

 *

 * Copyright (C) 2008-2009, 2012 Freescale Semiconductor, Inc.

 * Author: Mingkai Hu <Mingkai.hu@freescale.com>

 * Reworked by Sven Schuchmann <schuchmann@schleissheimer.de>

 * DT support added by Clemens Gruber <clemens.gruber@pqgruber.com>

 *

 * This driver export the value of analog input voltage to sysfs, the

 * voltage unit is mV. Through the sysfs interface, lm-sensors tool

 * can also display the input voltage.

 Vdd / reference voltage in millivolt */

 output format */

 10-bit resolution */

 12-bit resolution */

/*

 * Client data (each client gets its own)

 supply and reference voltage in millivolt */

 The output code of the MCP3021 is transmitted with MSB first. */

	/*

	 * The ten-bit output code is composed of the lower 4-bit of the

	 * first byte and the upper 6-bit of the second byte.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for the ADC on Freescale Semiconductor MC13783 and MC13892 PMICs.

 *

 * Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.

 * Copyright (C) 2009 Sascha Hauer, Pengutronix

 platform device id driver data */

 ADIN7 subchannels */

		/*

		 * BP (channel 2) reports with offset 2.4V to the actual value

		 * to fit the input range of the ADC.  unit = 2.25mV = 9/4 mV.

	/*

	 * input range is [0, 2.3V], val has 10 bits, so each bit

	 * is worth 9/4 mV.

 MC13892 have 1/2 divider, input range is [0, 4.800V] */

 MC13783 have 0.9 divider, input range is [0, 2.555V] */

		/*

		 * MC13892:

		 * Die Temperature Read Out Code at 25C 680

		 * Temperature change per LSB +0.4244C

		/*

		 * MC13783:

		 * Die Temperature Read Out Code at 25C 282

		 * Temperature change per LSB -1.14C

 these are only used if MC13783_ADC_16CHANS is provided in driver data */

 last four channels may be occupied by the touchscreen */

 Register sysfs hooks */

 sentinel */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * A hwmon driver for the Analog Devices ADT7470

 * Copyright (C) 2007 IBM

 *

 * Author: Darrick J. Wong <darrick.wong@oracle.com>

 Addresses to scan */

 ADT7470 registers */

 datasheet only mentions a revision 2 */

 "all temps" according to hwmon sysfs interface spec */

 How often do we reread sensors values? (In jiffies) */

 How often do we reread sensor limit values? (In jiffies) */

 Wait at least 200ms per sensor for 10 sensors */

 auto update thing won't fire more than every 2s */

 datasheet says to divide this number by the fan reading to get fan rpm */

 Config registers 1 and 2 include fields for selecting the PWM frequency */

 In jiffies */

 In jiffies */

 -1 = probe */

/*

 * 16-bit registers on the ADT7470 are low-byte first.  The data sheet says

 * that the low byte must be read before the high byte.

 Probe for temperature sensors.  Assumes lock is held */

 save pwm[1-4] config register */

 set manual pwm to whatever it is set to now */

 put pwm in manual mode */

 write pwm control to whatever it was */

 start reading temperature sensors */

 Delay is 200ms * number of temp sensors. */

 done reading temperature sensors */

 restore pwm[1-4] config registers */

 Only count fans if we have to */

	/*

	 * Figure out if we need to update the shadow registers.

	 * Lockless means that we may occasionally report out of

	 * date data.

 These are the valid PWM frequencies to the nearest Hz */

 Round the user value given to the closest available frequency */

 Configuration Register 1 */

 Configuration Register 2 */

 the datasheet says that tmax = tmin + 20C */

 Return 0 if detection is successful, -ENODEV otherwise */

 Initialize the ADT7470 chip */

 Register sysfs hooks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * APM X-Gene SoC Hardware Monitoring Driver

 *

 * Copyright (c) 2016, Applied Micro Circuits Corporation

 * Author: Loc Ho <lho@apm.com>

 *         Hoan Tran <hotran@apm.com>

 *

 * This driver provides the following features:

 *  - Retrieve CPU total power (uW)

 *  - Retrieve IO total power (uW)

 *  - Retrieve SoC temperature (milli-degree C) and alarm

 SLIMpro message defines */

 PCC defines */

/*

 * Arbitrary retries in case the remote processor is slow to respond

 * to PCC commands

/*

 * This function tests and clears a bitmask then returns its old value

 Write signature for subspace */

 Write to the shared command region */

 Flip CMD COMPLETE bit */

 Copy the message to the PCC comm space */

 Ring the doorbell */

 Check for error message */

 Check for error message */

	/*

	 * Check if sensor data is valid.

/*

 * Sensor temperature/power functions

/*

 * This function is called to process async work queue

		/*

		 * If PCC, send a consumer command to Platform to get info

		 * If Slimpro Mailbox, get message from specific FIFO

 Enqueue to the FIFO */

/*

 * This function is called when the SLIMpro Mailbox received a message

	/*

	 * While the driver registers with the mailbox framework, an interrupt

	 * can be pending before the probe function completes its

	 * initialization. If such condition occurs, just queue up the message

	 * as the driver is not ready for servicing the callback.

	/*

	 * Response message format:

	 * msg[0] is the return code of the operation

	 * msg[1] is the first parameter word

	 * msg[2] is the second parameter word

	 *

	 * As message only supports dword size, just assign it.

 Check for sync query */

 Operation waiting for response */

 Enqueue to the FIFO */

 Schedule the bottom handler */

/*

 * This function is called when the PCC Mailbox received a message

	/*

	 * While the driver registers with the mailbox framework, an interrupt

	 * can be pending before the probe function completes its

	 * initialization. If such condition occurs, just queue up the message

	 * as the driver is not ready for servicing the callback.

 Check if platform sends interrupt */

	/*

	 * Response message format:

	 * msg[0] is the return code of the operation

	 * msg[1] is the first parameter word

	 * msg[2] is the second parameter word

	 *

	 * As message only supports dword size, just assign it.

 Check for sync query */

 Check if platform completes command */

 Operation waiting for response */

	/*

	 * Platform notifies interrupt to OSPM.

	 * OPSM schedules a consumer command to get this information

	 * in a workqueue. Platform must wait until OSPM has issued

	 * a consumer command that serves this notification.

 Enqueue to the FIFO */

 Schedule the bottom handler */

 Request mailbox channel */

		/*

		 * This is the shared communication region

		 * for the OS and Platform to communicate over.

		/*

		 * pcc_chan->latency is just a Nominal value. In reality

		 * the remote processor could be much slower to reply.

		 * So add an arbitrary amount of wait on top of Nominal.

	/*

	 * Schedule the bottom handler if there is a pending message.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/hwmon/applesmc.c - driver for Apple's SMC (accelerometer, temperature

 * sensors, fan control, keyboard backlight control) used in Intel-based Apple

 * computers.

 *

 * Copyright (C) 2007 Nicolas Boichat <nicolas@boichat.ch>

 * Copyright (C) 2010 Henrik Rydberg <rydberg@euromail.se>

 *

 * Based on hdaps.c driver:

 * Copyright (C) 2005 Robert Love <rml@novell.com>

 * Copyright (C) 2005 Jesper Juhl <jj@chaosbits.net>

 *

 * Fan control based on smcFanControl:

 * Copyright (C) 2006 Hendrik Holtmann <holtmann@mac.com>

 data port used by Apple SMC */

 command/status port used by Apple SMC */

 0x300-0x31f */

 Apple SMC status bits */

 SMC has data waiting to be read */

 Will ignore any input */

 Command in progress */

 Initial wait is 8us */

 r-o ui32 */

 r-o {alv (6-10 bytes) */

 r-o {alv (6-10 bytes) */

 w-o {lkb (2 bytes) */

 r-o ui8 (unused) */

 r-o sp78 (2 bytes) */

 r-o sp78 (2 bytes) */

 r-o sp78 (2 bytes) */

 r/w ui16 */

 r-o ui8 */

 r-w ui16 */

 r-o char[16] */

 List of keys used to read/write fan speeds */

 actual speed */

 minimum speed (rw) */

 maximum speed */

 safe speed - not all models */

 target speed (manual: rw) */

 wait up to 5s for device init ... */

 ... in 50ms increments */

 msecs */

 input event threshold */

 Dynamic device node attributes */

 hwmon attributes */

 room for node file name */

 Dynamic device node group */

 format string */

 show function */

 store function */

 function argument */

 dynamic node array */

 AppleSMC entry - cached register information */

 four-letter key code */

 set when entry is successfully read once */

 bounded by APPLESMC_MAX_DATA_LENGTH */

 four-letter type code */

 0x10: func; 0x40: write; 0x80: read */

 Register lookup and registers common to all SMCs */

 register read/write mutex */

 number of SMC registers */

 number of fans */

 number of temperature registers */

 temperature lower index bound */

 temperature upper index bound */

 size of temperature index array */

 number of light sensors */

 has motion sensor */

 has keyboard backlight */

 true when fully initialized */

 cached key entries */

 temperature key index */

/*

 * Last index written to key_at_index sysfs file, and value to use for all other

 * key_at_index_* sysfs files.

/*

 * Wait for specific status bits with a mask on the SMC.

 * Used before all transactions.

 * This does 10 fast loops of 8us then exponentially backs off for a

 * minimum total wait of 262ms. Depending on usleep_range this could

 * run out past 500ms.

 send_byte - Write to SMC data port. Callers must hold applesmc_lock. */

	/*

	 * This needs to be a separate read looking for bit 0x04

	 * after bit 0x02 falls. If consolidated with the wait above

	 * this extra read may not happen if status returns both

	 * simultaneously and this would appear to be required.

 send_command - Write a command to the SMC. Callers must hold applesmc_lock. */

/*

 * Based on logic from the Apple driver. This is issued before any interaction

 * If busy is stuck high, issue a read command to reset the SMC state machine.

 * If busy is stuck high after the command then the SMC is jammed.

 This has no effect on newer (2012) SMCs */

 Read the data port until bit0 is cleared */

/*

 * Serialized I/O

 *

 * Returns zero on success or a negative error on failure.

 * All functions below are concurrency safe - callers should NOT hold lock.

/*

 * applesmc_read_s16 - Read 16-bit signed big endian register

/*

 * applesmc_device_init - initialize the accelerometer.  Can sleep.

/*

 * applesmc_init_smcreg_try - Try to initialize register cache. Idempotent.

/*

 * applesmc_init_smcreg - Initialize register cache.

 *

 * Retries until initialization is successful, or the operation times out.

 *

 Device model stuff */

 Synchronize device with memorized backlight state */

 Reinitialize device on resume from hibernation */

/*

 * applesmc_calibrate - Set our "resting" values.  Callers must

 * hold applesmc_lock.

 Sysfs Files */

 newer macbooks report a single 10-bit bigendian value */

 Displays sensor key as label */

 Displays degree Celsius * 1000 */

 Bigger than a 14-bit value */

 Module stuff */

/*

 * applesmc_destroy_nodes - remove files and free associated memory

/*

 * applesmc_create_nodes - create a two-dimensional group of sysfs files

 Create accelerometer resources */

 initial calibrate for the input device */

 initialize the input device */

 Release all resources used by the accelerometer */

/*

 * Note that DMI_MATCH(...,"MacBook") will match "MacBookPro1,1".

 * So we need to put "Apple MacBook Pro" before "Apple MacBook".

 create register cache */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for

 *  Maxim MAX16065/MAX16066 12-Channel/8-Channel, Flash-Configurable

 *  System Managers with Nonvolatile Fault Registers

 *  Maxim MAX16067/MAX16068 6-Channel, Flash-Configurable System Managers

 *  with Nonvolatile Fault Registers

 *  Maxim MAX16070/MAX16071 12-Channel/8-Channel, Flash-Configurable System

 *  Monitors with Nonvolatile Fault Registers

 *

 * Copyright (C) 2011 Ericsson AB.

/*

 * Registers

#define MAX16065_LIMIT(l, x)	(0x48 + (l) + (x) * 3)	/*

							 * l: limit

							 *  0: min/max

							 *  1: crit

							 *  2: lcrit

							 * x: ADC index

#define MAX16065_WARNING_OV	(1 << 3) /* Set if secondary threshold is OV

 maximum number of ADC channels */

 in jiffies */

 limits are in mV */

 voltage range */

 adc values (raw) including csp_adc */

 ADC registers have 10 bit resolution. */

/*

 * Limit registers have 8 bit resolution and match upper 8 bits of ADC

 * registers.

/*

 * max16065_read_adc()

 *

 * Read 16 bit value from <reg>, <reg+1>.

 * Upper 8 bits are in <reg>, lower 2 bits are in bits 7:6 of <reg+1>.

 Construct a sensor_device_attribute structure for each register */

 Input voltages */

 Input voltages lcrit */

 Input voltages crit */

 Input voltages min */

 Input voltages max */

 alarms */

 Current and alarm */

/*

 * Finally, construct an array of pointers to members of the above objects,

 * as required for sysfs_create_group()

 true if chip has secondary limits */

 secondary limits reflect max */

 Read scale registers, convert to range */

 Read limits */

 sysfs hooks */

			/*

			 * Current gain is 6, 12, 24, 48 based on values in

			 * bit 2,3.

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Lineage Compact Power Line series of power entry modules.

 *

 * Copyright (C) 2010, 2011 Ericsson AB.

 *

 * Documentation:

 *  http://www.lineagepower.com/oem/pdf/CPLI2C.pdf

/*

 * This driver supports various Lineage Compact Power Line DC/DC and AC/DC

 * converters such as CP1800, CP2000AC, CP2000DC, CP2100DC, and others.

 *

 * The devices are nominally PMBus compliant. However, most standard PMBus

 * commands are not supported. Specifically, all hardware monitoring and

 * status reporting commands are non-standard. For this reason, a standard

 * PMBus driver can not be used.

 *

 * All Lineage CPL devices have a built-in I2C bus master selector (PCA9541).

 * To ensure device access, this driver should only be used as client driver

 * to the pca9541 I2C master selector driver.

 Command codes */

 offsets in data string */

 Virtual entries, to report constants */

 offsets in input string */

 offsets in fan data */

 Status register bits */

 Alarm register bits */

 4 for most devices	*/

 in jiffies */

 Read data string */

 Read input string */

 Read fan speeds */

 97 degrees C per datasheet */

 107 degrees C per datasheet */

/*

 * Show boolean, either a fault or an alarm.

 * .nr points to the register, .index is the bit mask to check

 Voltages */

 Currents */

 Power */

 Fans */

 Temperatures */

	/*

	 * We use the next two commands to determine if the device is really

	 * there.

 sysfs hooks */

	/*

	 * Check if input readings are supported.

	 * This is the case if we can read input data,

	 * and if the returned data is not all zeros.

	 * Note that input alarms are always supported.

 Input string is one byte longer for some devices */

	/*

	 * Check if fan speed readings are supported.

	 * This is the case if we can read fan speed data,

	 * and if the returned data is not all zeros.

	 * Note that the fan alarm is always supported.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2016 Google, Inc

 ASPEED PWM & FAN Tach Register Definition */

 ASPEED_PTCR_CTRL : 0x00 - General Control Register */

 ASPEED_PTCR_CLK_CTRL : 0x04 - Clock Control Register */

 TYPE N */

 TYPE M */

/*

 * ASPEED_PTCR_DUTY_CTRL/1/2/3 : 0x08/0x0C/0x48/0x4C - PWM-FAN duty control

 * 0/1/2/3 register

 ASPEED_PTCR_TYPEM_CTRL : 0x10/0x18/0x50 - Type M/N/O Ctrl 0 Register */

 ASPEED_PTCR_TACH_SOURCE : 0x20/0x60 - Tach Source Register */

 bit [0,1] at 0x20, bit [2] at 0x60 */

 ASPEED_PTCR_RESULT : 0x2c - Result Register */

 ASPEED_PTCR_CTRL_EXT : 0x40 - General Control Extension #1 Register */

 ASPEED_PTCR_CLK_EXT_CTRL : 0x44 - Clock Control Extension #1 Register */

 TYPE O */

 10b */

/*

 * 5:4 Type N fan tach mode selection bit:

 * 00: falling

 * 01: rising

 * 10: both

 * 11: reserved.

 10b */

 How long we sleep in us while waiting for an RPM result. */

 return -ETIMEDOUT if we didn't get an answer. */

	/*

	 * We need the mode to determine if the raw_data is double (from

	 * counting both edges).

/*

 * The clock type is type M :

 * The PWM frequency = 24MHz / (type M clock division L bit *

 * type M clock division H bit * (type M PWM period bit + 1))

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * abituguru3.c

 *

 * Copyright (c) 2006-2008 Hans de Goede <hdegoede@redhat.com>

 * Copyright (c) 2008 Alistair John Strachan <alistair@devzero.co.uk>

/*

 * This driver supports the sensor part of revision 3 of the custom Abit uGuru

 * chip found on newer Abit uGuru motherboards. Note: because of lack of specs

 * only reading the sensors and their settings is supported.

 uGuru3 bank addresses */

 uGuru3 sensor bank flags */			     
  temp over warn */

  volt over max */

  volt under min */

 temp is over warn */

 volt is over max */

 volt is under min */

   fan under min */

 beep if alarm */

 shutdown if alarm */

 sensor types */

/*

 * Timeouts / Retries, if these turn out to need a lot of fiddling we could

 * convert them to params. Determined by trial and error. I assume this is

 * cpu-speed independent, since the ISA-bus and not the CPU should be the

 * bottleneck.

/*

 * Normally the 0xAC at the end of synchronize() is reported after the

 * first read, but sometimes not and we need to poll

 utility macros */

 Macros to help calculate the sysfs_names array length */

/*

 * sum of strlen +1 of: in??_input\0, in??_{min,max}\0, in??_{min,max}_alarm\0,

 * in??_{min,max}_alarm_enable\0, in??_beep\0, in??_shutdown\0, in??_label\0

/*

 * sum of strlen +1 of: temp??_input\0, temp??_max\0, temp??_crit\0,

 * temp??_alarm\0, temp??_alarm_enable\0, temp??_beep\0, temp??_shutdown\0,

 * temp??_label\0

/*

 * sum of strlen +1 of: fan??_input\0, fan??_min\0, fan??_alarm\0,

 * fan??_alarm_enable\0, fan??_beep\0, fan??_shutdown\0, fan??_label\0

/*

 * Worst case scenario 16 in sensors (longest names_length) and the rest

 * temp sensors (second longest names_length).

/*

 * All the macros below are named identical to the openguru2 program

 * reverse engineered by Louis Kruger, hence the names might not be 100%

 * logical. I could come up with better names, but I prefer keeping the names

 * identical so that this driver can be compared with his work more easily.

 Two i/o-ports are used by uGuru */

/*

 * The wait_xxx functions return this on success and the last contents

 * of the DATA register (0-255) on failure.

 uGuru status flags */

 Structures */

 Avoid use of flexible array members */

 + 1 -> end of sensors indicated by a sensor with name == NULL */

/*

 * For the Abit uGuru, we need to keep some data in memory.

 * The structure is dynamically allocated, at the same time when a new

 * abituguru3 device is allocated.

 hwmon registered device */

 protect access to data and uGuru */

 uguru base address */

 true if following fields are valid */

 In jiffies */

	/*

	 * For convenience the sysfs attr and their names are generated

	 * automatically. We have max 10 entries per sensor (for in sensors)

 Buffer to store the dynamically generated sysfs names */

 Pointer to the sensors info for the detected motherboard */

	/*

	 * The abituguru3 supports up to 48 sensors, and thus has registers

	 * sets for 48 sensors, for convenience reasons / simplicity of the

	 * code we always read and store all registers for all 48 sensors

 Alarms for all 48 sensors (1 bit per sensor) */

 Value of all 48 sensors */

	/*

	 * Settings of all 48 sensors, note in and temp sensors (the first 32

	 * sensors) have 3 bytes of settings, while fans only have 2 bytes,

	 * for convenience we use 3 bytes for all sensors

 Constants */

 Unknown, need DMI string */, {

 Abit AW8, need DMI string */, {

 AL-8, need DMI string */, {

 Unknown, need DMI string */, {

 Abit NI8 SLI GR, need DMI string */, {

 Abit AN8 32X, need DMI string */, {

 Abit AW8D, need DMI string */, {

 Unknown, need DMI string */, {

 Unknown, need DMI string */, {

 Unknown, need DMI string */, {

 Insmod parameters */

 Default verbose is 1, since this driver is still in the testing phase */

 wait while the uguru is busy (usually after a write) */

		/*

		 * sleep a bit before our last try, to give the uGuru3 one

		 * last chance to respond.

 wait till uguru is ready to be read */

		/*

		 * sleep a bit before our last try, to give the uGuru3 one

		 * last chance to respond.

/*

 * This synchronizes us with the uGuru3's protocol state machine, this

 * must be done before each command.

/*

 * Read count bytes from sensor sensor_addr in bank bank_addr and store the

 * result in buf

/*

 * Sensor settings are stored 1 byte per offset with the bytes

 * placed add consecutive offsets.

/*

 * Following are the sysfs callback functions. These functions expect:

 * sensor_device_attribute_2->index:   index into the data->sensors array

 * sensor_device_attribute_2->nr:      register offset, bitmask or NA.

 are we reading a setting, or is this a normal read? */

 convert the value */

	/*

	 * alternatively we could update the sensors settings struct for this,

	 * but then its contents would differ from the windows sw ini files

	/*

	 * See if the alarm bit for this sensor is set and if a bitmask is

	 * given in attr->nr also check if the alarm matches the type of alarm

	 * we're looking for (for volt it can be either low or high). The type

	 * is stored in a few readonly bits in the settings of the sensor.

 Sysfs attr templates, the real entries are generated automatically. */

 Read the motherboard ID */

 Completely read the uGuru to see if one really is there */

 lookup the ID in our motherboard table */

 Fill the sysfs attr array */

 Fail safe check, this should never happen! */

 Fail safe check, this should never happen! */

 Register sysfs hooks */

 success */

 Clear data->valid while updating */

 Read alarms */

 Read in and temp sensors (3 byte settings / sensor) */

 Read temp sensors (2 byte settings / sensor) */

	/*

	 * make sure all communications with the uguru3 are done and no new

	 * ones are started

 CONFIG_PM */

www.abit.com.tw/"))

	/*

	 * At the moment, we don't care about the part of the vendor

	 * DMI string contained in brackets. Truncate the string at

	 * the first occurrence of a bracket. Trim any trailing space

	 * from the substring.

 No match found */

/*

 * FIXME: Manual detection should die eventually; we need to collect stable

 *        DMI model names first before we can rely entirely on CONFIG_DMI.

	/*

	 * See if there is an uguru3 there. An idle uGuru3 will hold 0x00 or

	 * 0x08 at DATA and 0xAC at CMD. Sometimes the uGuru3 will hold 0x05

	 * or 0x55 at CMD instead, why is unknown.

 No uGuru3 found */

 Attempt DMI detection first */

	/*

	 * Fall back to manual detection if there was no exact

	 * board name match, or force was specified.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  MEN 14F021P00 Board Management Controller (BMC) hwmon driver.

 *

 *  This is the core hwmon driver of the MEN 14F021P00 BMC.

 *  The BMC monitors the board voltages which can be access with this

 *  driver through sysfs.

 *

 *  Copyright (C) 2014 MEN Mikro Elektronik Nuernberg GmbH

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2001-2004 Aurelien Jarno <aurelien@aurel32.net>

 * Ported to Linux 2.6 by Aurelien Jarno <aurelien@aurel32.net> with

 * the help of Jean Delvare <jdelvare@suse.de>

 Insmod parameters */

/*

 * The PCF8591 control byte

 *      7    6    5    4    3    2    1    0

 *   |  0 |AOEF|   AIP   |  0 |AINC|  AICH   |

 Analog Output Enable Flag (analog output active if 1) */

/*

 * Analog Input Programming

 * 0x00 = four single ended inputs

 * 0x10 = three differential inputs

 * 0x20 = single ended and differential mixed

 * 0x30 = two differential inputs

 Autoincrement Flag (switch on if 1) */

/*

 * Channel selection

 * 0x00 = channel 0

 * 0x01 = channel 1

 * 0x02 = channel 2

 * 0x03 = channel 3

 Initial values */

 DAC out = 0 */

 Conversions */

 following are the sysfs callback functions */

/*

 * Real code

 Initialize the PCF8591 chip */

 Register sysfs hooks */

 Register input2 if not in "two differential inputs" mode */

 Register input3 only in "four single ended inputs" mode */

 Called when we have found a new PCF8591. */

	/*

	 * The first byte transmitted contains the conversion code of the

	 * previous read cycle. FLUSH IT!

		/*

		 * The first byte transmitted contains the conversion code of

		 * the previous read cycle. FLUSH IT!

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * k10temp.c - AMD Family 10h/11h/12h/14h/15h/16h/17h

 *		processor hardware monitoring

 *

 * Copyright (c) 2009 Clemens Ladisch <clemens@ladisch.de>

 * Copyright (c) 2020 Guenter Roeck <linux@roeck-us.net>

 *

 * Implementation notes:

 * - CCD register address information as well as the calculation to

 *   convert raw register values is from https://github.com/ocerman/zenpower.

 *   The information is not confirmed from chip datasheets, but experiments

 *   suggest that it provides reasonable temperature values.

 Provide lock for writing to NB_SMU_IND_ADDR */

 CPUID function 0x80000001, ebx */

 DRAM controller (PCI function 2) */

 miscellaneous (PCI function 3) */

/*

 * For F15h M60h and M70h, REG_HARDWARE_THERMAL_CONTROL

 * and REG_REPORTED_TEMPERATURE have been moved to

 * D0F0xBC_xD820_0C64 [Hardware Temperature Control]

 * D0F0xBC_xD820_0CA4 [Reported Temperature Control]

 Common for Zen CPU families (Family 17h and 18h and 19h) */

 F17h thermal registers through SMN */

 1A / LSB	*/

 0.25A / LSB	*/

 1A / LSB	*/

 0.31A / LSB	*/

 F19h thermal registers through SMN */

 1A / LSB	*/

 0.31A / LSB	*/

 19{00,20,50}X */

 29{20,50,70,90}[W]X */

 Tctl */

 Tdie */

 Tccd{1-8} */

 Show temperature labels only on Zen CPUs */

	/*

	 * Erratum 319: The thermal sensor of Socket F/AM2+ processors

	 *              may be unreliable.

 DDR3 memory implies socket AM3, which is good */

	/*

	 * Unfortunately it is possible to run a socket AM3 CPU with DDR2

	 * memory. We blacklist all the cores which do exist in socket AM2+

	 * format. It still isn't perfect, as RB-C2 cores exist in both AM2+

	 * and AM3 formats, but that's the best we can do.

 Always show Tctl */

 Zen */

 Zen+ */

 Zen APU */

 Zen+ APU */

 Zen2 Threadripper */

 Renoir */

 Lucienne */

 Zen2 */

 Zen3 SP3/TR */

 Zen3 Ryzen Desktop */

 Green Sardine */

 Yellow Carp */

 show Tdie */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Texas Instruments TMP108 SMBus temperature sensor driver

 *

 * Copyright (C) 2016 John Muir <john@jmuir.com>

 Minimum millicelcius. */

 Maximum millicelcius. */

/* Configuration register bits.

 * Note: these bit definitions are byte swapped.

 Sensor mode. */

 Thermostat mode. */

 Watchdog flag - TLOW */

 Watchdog flag - THIGH */

 Conversion rate. */

 Hysteresis. */

 Polarity of alert. */

 Defaults set by the hardware upon reset. */

 These bits are read-only. */

 Default */

 When M1 is set, M0 is ignored. */

 Default */

 Default */

 in milli-seconds */

 convert 12-bit TMP108 register value to milliCelsius */

 convert milliCelsius to left adjusted 12-bit TMP108 register value */

 Is it too early to return a conversion ? */

 Configuration register must be volatile to enable FL and FH. */

 Only continuous mode is supported. */

 Only comparator mode is supported. */

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface(SCMI) based hwmon sensor driver

 *

 * Copyright (C) 2018-2021 ARM Ltd.

 * Sudeep Holla <sudeep.holla@arm.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Linear Technology LTC4260 I2C Positive Voltage Hot Swap Controller

 *

 * Copyright (c) 2014 Guenter Roeck

 chip registers */

/*

 * Fault register bits

 Return the voltage from the given register in mV or mA */

 10 mV resolution. Convert to mV. */

 400 mV resolution. Convert to mV. */

		/*

		 * 300 uV resolution. Convert to current as measured with

		 * an 1 mOhm sense resistor, in mA. If a different sense

		 * resistor is installed, calculate the actual current by

		 * dividing the reported current by the sense resistor value

		 * in mOhm.

 Clear reported faults in chip register */

 Voltages */

/*

 * Voltage alarms

 * UV/OV faults are associated with the input voltage, and the POWER BAD and

 * FET SHORT faults are associated with the output voltage.

 Current (via sense resistor) */

 Overcurrent alarm */

 Clear faults */

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Power Interface(SCPI) based hwmon sensor driver

 *

 * Copyright (C) 2015 ARM Ltd.

 * Punit Agrawal <punit.agrawal@arm.com>

 (celsius)		*/

 (millivolts)		*/

 (milliamperes)	*/

 (microwatts)		*/

 (microjoules)	*/

 (millicelsius)	*/

 (millivolts)		*/

 (milliamperes)	*/

 (microwatts)		*/

 (microjoules)	*/

 hwmon callback functions */

	/*

	 * Temperature sensor values are treated as signed values based on

	 * observation even though that is not explicitly specified, and

	 * because an unsigned u64 temperature does not really make practical

	 * sense especially when the temperature is below zero degrees Celsius.

	/*

	 * Register the temperature sensors with the thermal framework

	 * to allow their usage in setting up the thermal zones from

	 * device tree.

	 *

	 * NOTE: Not all temperature sensors maybe used for thermal

	 * control

		/*

		 * The call to thermal_zone_of_sensor_register returns

		 * an error for sensors that are not associated with

		 * any thermal zones or if the thermal subsystem is

		 * not configured.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * via-cputemp.c - Driver for VIA CPU core temperature monitoring

 * Copyright (C) 2009 VIA Technologies, Inc.

 *

 * based on existing coretemp.c, which is

 *

 * Copyright (C) 2007 Rudolf Marek <r.marek@assembler.cz>

/*

 * Functions declaration

/*

 * Sysfs stuff

 show label */

 Optional attributes */

 C7 A */

 C7 D */

 Nano */

 test if we can access the TEMPERATURE MSR */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ads7828.c - driver for TI ADS7828 8-channel A/D converter and compatibles

 * (C) 2007 EADS Astrium

 *

 * This driver is based on the lm75 and other lm_sensors/hwmon drivers

 *

 * Written by Steve Hardy <shardy@redhat.com>

 *

 * ADS7830 support, by Guillaume Roguez <guillaume.roguez@savoirfairelinux.com>

 *

 * For further information, see the Documentation/hwmon/ads7828.rst file.

 The ADS7828 registers */

 Single ended inputs */

 Internal vref OFF && A/D ON */

 Internal vref ON && A/D ON */

 Internal vref is 2.5V, 2500mV */

 External vref min value 0.05V */

 External vref max value 5.25V */

 List of supported devices */

 Client specific data */

 Command byte without channel bits */

 Resolution of the ADC sample LSB */

 Command byte C2,C1,C0 - see datasheet */

 sysfs callback function */

 Bound Vref with min/max values */

 ADS7828 uses 12-bit samples, while ADS7830 is 8-bit */

	/*

	 * Datasheet specifies internal reference voltage is disabled by

	 * default. The internal reference voltage needs to be enabled and

	 * voltage needs to settle before getting valid ADC data. So perform a

	 * dummy read to enable the internal reference voltage.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * hwmon-vid.c - VID/VRM/VRD voltage conversions

 *

 * Copyright (c) 2004 Rudolf Marek <r.marek@assembler.cz>

 *

 * Partly imported from i2c-vid.h of the lm_sensors project

 * Copyright (c) 2002 Mark D. Studebaker <mdsxyz123@yahoo.com>

 * With assistance from Trent Piepho <xyzzy@speakeasy.org>

/*

 * Common code for decoding VID pins.

 *

 * References:

 *

 * For VRM 8.4 to 9.1, "VRM x.y DC-DC Converter Design Guidelines",

 * available at http://developer.intel.com/.

 *

 * For VRD 10.0 and up, "VRD x.y Design Guide",

 * available at http://developer.intel.com/.

 *

 * AMD Athlon 64 and AMD Opteron Processors, AMD Publication 26094,

 * http://support.amd.com/us/Processor_TechDocs/26094.PDF

 * Table 74. VID Code Voltages

 * This corresponds to an arbitrary VRM code of 24 in the functions below.

 * These CPU models (K8 revision <= E) have 5 VID pins. See also:

 * Revision Guide for AMD Athlon 64 and AMD Opteron Processors, AMD Publication 25759,

 * http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/25759.pdf

 *

 * AMD NPT Family 0Fh Processors, AMD Publication 32559,

 * http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/32559.pdf

 * Table 71. VID Code Voltages

 * This corresponds to an arbitrary VRM code of 25 in the functions below.

 * These CPU models (K8 revision >= F) have 6 VID pins. See also:

 * Revision Guide for AMD NPT Family 0Fh Processors, AMD Publication 33610,

 * http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/33610.pdf

 *

 * The 17 specification is in fact Intel Mobile Voltage Positioning -

 * (IMVP-II). You can find more information in the datasheet of Max1718

 * http://www.maxim-ic.com/quick_view2.cfm/qv_pk/2452

 *

 * The 13 specification corresponds to the Intel Pentium M series. There

 * doesn't seem to be any named specification for these. The conversion

 * tables are detailed directly in the various Pentium M datasheets:

 * https://www.intel.com/design/intarch/pentiumm/docs_pentiumm.htm

 *

 * The 14 specification corresponds to Intel Core series. There

 * doesn't seem to be any named specification for these. The conversion

 * tables are detailed directly in the various Pentium Core datasheets:

 * https://www.intel.com/design/mobile/datashts/309221.htm

 *

 * The 110 (VRM 11) specification corresponds to Intel Conroe based series.

 * https://www.intel.com/design/processor/applnots/313214.htm

/*

 * vrm is the VRM/VRD document version multiplied by 10.

 * val is the 4-bit or more VID code.

 * Returned value is in mV to avoid floating point in the kernel.

 * Some VID have some bits in uV scale, this is rounded to mV.

 VRD 10.0 */

 compute in uV, round to mV */

 Intel Conroe */

 compute in uV, round to mV */

 Athlon64 & Opteron */

 AMD NPT 0Fh */

 AMD family 10h to 15h, serial VID */

 VRM 9.1 */

 VRM 9.0 */

 VRM 8.5 */

 VRM 8.4 */

 VRM 8.2 */

 Intel IMVP-II */

 Exception for Eden ULV 500 MHz */

 Intel Core */

 compute in uV, round to mV */

 report 0 for unknown */

/*

 * After this point is the code to automatically determine which

 * VRM/VRD specification should be used depending on the CPU.

/*

 * The stepping_to parameter is highest acceptable stepping for current line.

 * The model match must be exact for 4-bit values. For model values 0x10

 * and above (extended model), all models below the parameter will match.

 Athlon Duron etc */

 Athlon 64, Opteron */

	/*

	 * In theory, all NPT family 0Fh processors have 6 VID pins and should

	 * thus use vrm 25, however in practice not all mainboards route the

	 * 6th VID pin because it is never needed. So we use the 5 VID pin

	 * variant (vrm 24) for the models which exist today.

 NPT family 0Fh */

 future fam. 0Fh */

 NPT family 10h */

 family 11h */

 family 12h */

 family 14h */

 family 15h */

	{X86_VENDOR_INTEL, 0x6, 0x0, 0x6, ANY, 82},	/* Pentium Pro,

							 * Pentium II, Xeon,

							 * Mobile Pentium,

 Pentium III, Xeon */

 Pentium III, Xeon */

 Pentium M (130 nm) */

 Pentium III Xeon */

 Tualatin */

 Pentium M (90 nm) */

 Intel Core (65 nm) */

	{X86_VENDOR_INTEL, 0x6, 0xF, ANY, ANY, 110},	/* Intel Conroe and

 P4 */

 P4 Willamette */

 P4 Northwood */

	{X86_VENDOR_INTEL, 0xF, 0x3, ANY, ANY, 100},	/* Prescott and above

 Eden ESP/Ezra */

 Ezra T */

 Nehemiah */

 C3-M, Eden-N */

 No information */

	{X86_VENDOR_CENTAUR, 0x6, 0xA, 0xA, ANY, 13},	/* C7-M, C7,

	{X86_VENDOR_CENTAUR, 0x6, 0xD, 0xD, ANY, 134},	/* C7-D, C7-M, C7,

/*

 * Special case for VIA model D: there are two different possible

 * VID tables, so we have to figure out first, which one must be

 * used. This resolves temporary drm value 134 to 14 (Intel Core

 * 7-bit VID), 13 (Pentium M 6-bit VID) or 131 (Pentium M 6-bit VID

 * + quirk for Eden ULV 500 MHz).

 * Note: something similar might be needed for model A, I'm not sure.

 Enable quirk for Eden */

 Any CPU with family lower than 6 */

 doesn't have VID */

 and now for something completely different for the non-x86 world */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * w83781d.c - Part of lm_sensors, Linux kernel modules for hardware

 *	       monitoring

 * Copyright (c) 1998 - 2001  Frodo Looijaard <frodol@dds.nl>,

 *			      Philip Edelbrock <phil@netroedge.com>,

 *			      and Mark Studebaker <mdsxyz123@yahoo.com>

 * Copyright (c) 2007 - 2008  Jean Delvare <jdelvare@suse.de>

/*

 * Supports following chips:

 *

 * Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA

 * as99127f	7	3	0	3	0x31	0x12c3	yes	no

 * as99127f rev.2 (type_name = as99127f)	0x31	0x5ca3	yes	no

 * w83781d	7	3	0	3	0x10-1	0x5ca3	yes	yes

 * w83782d	9	3	2-4	3	0x30	0x5ca3	yes	yes

 * w83783s	5-6	3	2	1-2	0x40	0x5ca3	yes	no

 *

 Addresses to scan */

 Insmod parameters */

 Constants specified below */

 Length of ISA address segment */

 Where are the ISA address/data registers relative to the base address */

 The device registers */

 in nr from 0 to 8 */

 fan nr from 0 to 2 */

 temp nr from 1 to 3 */

 Interrupt status (W83781D, AS99127F) */

 Real-time status (W83782D, W83783S) */

 not on W83781D */

 782D/783S only */

 PWM 782D (1-4) and 783S (1-2) only */

/*

 * The following are undocumented in the data sheets however we

 * received the information in an email from Winbond tech support

 Sensor selection - not on 781d */

 Conversions */

 For ISA device only */

 true if following fields are valid */

 In jiffies */

 for secondary I2C addresses */

 array of 2 pointers to subclients */

 Register value - 8 & 9 for 782D only */

 Register value - 8 & 9 for 782D only */

 Register value - 8 & 9 for 782D only */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register encoding, shifted right */

 Register encoding, combined */

 Register encoding, combined */

 Register encoding, combined */

 Register value */

 Boolean */

	u16 sens[3];		/*

				 * 782D/783S only.

				 * 1 = pentium diode; 2 = 3904 diode;

				 * 4 = thermistor

 following are the sysfs callback functions */

 TEMP2 and TEMP3 */ \

 TEMP1 */ \

 TEMP2 and TEMP3 */ \

 TEMP1 */ \

 The W83781D has a single alarm bit for temp2 and temp3 */

 preserve beep enable */

 The W83781D has a single beep bit for temp2 and temp3 */

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan divisor.  This follows the principle of

 * least surprise; the user doesn't expect the fan minimum to change just

 * because the divisor changed.

 Save fan_min */

 w83781d and as99127f don't have extended divisor bits */

 Restore fan_min */

 only PWM2 can be enabled/disabled */

 PII/Celeron diode */

 3904 */

 thermistor */

/*

 * Assumes that adapter is of I2C, not ISA variety.

 * OTHERWISE DON'T CALL THIS

 Undo inits in case of errors */

 No clean up is done on error, it's up to the caller */

 Return 0 if detection is successful, -ENODEV otherwise */

	/*

	 * We block updates of the ISA device to minimize the risk of

	 * concurrent access to the same W83781D chip through different

	 * interfaces.

 Check for Winbond or Asus ID if in bank 0 */

	/*

	 * If Winbond SMBus, check address at 0x48.

	 * Asus doesn't support, except for as99127f rev.2

 Put it now into bank 0 and Vendor ID High Byte */

 Get the vendor ID */

 Determine the chip type. */

 attach secondary i2c lm75-like clients */

 Initialize the chip */

 Register sysfs hooks */

 switch banks */

 switch to subclient */

 convert from ISA to LM75 I2C addresses */

 TEMP */

 CONFIG */

 HYST */

 OVER */

 switch banks */

 switch to subclient */

 convert from ISA to LM75 I2C addresses */

 CONFIG */

 HYST */

 OVER */

	if (reset && type != as99127f) { /*

					  * this resets registers we don't have

					  * documentation for on the as99127f

		/*

		 * Resetting the chip has been the default for a long time,

		 * but it causes the BIOS initializations (fan clock dividers,

		 * thermal sensor types...) to be lost, so it is now optional.

		 * It might even go away if nobody reports it as being useful,

		 * as I see very little reason why this would be needed at

		 * all.

 save these registers */

		/*

		 * Reset all except Watchdog values and last conversion values

		 * This sets fan-divs to 2, among others

		/*

		 * Restore the registers and disable power-on abnormal beep.

		 * This saves FAN 1/2/3 input/output values set by BIOS.

		/*

		 * Disable master beep-enable (reset turns it on).

		 * Individual beep_mask should be reset to off but for some

		 * reason disabling this bit helps some people not get beeped

	/*

	 * Disable power-on abnormal beep, as advised by the datasheet.

	 * Already done if reset=1.

 Enable temp2 */

 Enable temp3 */

 Start monitoring */

 A few vars need to be filled upon startup */

 783S has no in1 */

 Only W83782D on SMBus has PWM3 and PWM4 */

 Only PWM2 can be disabled */

			/*

			 * No real-time status registers, fall back to

			 * interrupt status registers

 LIST END */ }

/*

 * ISA related code

 ISA device, if found */

/*

 * I2C devices get this name attribute automatically, but for ISA devices

 * we must create it by ourselves.

 Returns 1 if the I2C chip appears to be an alias of the ISA chip */

 No ISA chip */

 Address doesn't match */

 Chip type doesn't match */

	/*

	 * We compare all the limit registers, the config register and the

	 * interrupt mask registers

/*

 * The SMBus locks itself, usually, but nothing may access the Winbond between

 * bank switches. ISA access must always be locked explicitly!

 * We ignore the W83781D BUSY flag at this moment - it could lead to deadlocks,

 * would slow down the W83781D access and should not be necessary.

 * There are some ugly typecasts here, but the good news is - they should

 * nowhere else be necessary!

 Reserve the ISA region */

 Initialize the W83781D chip */

 Register sysfs hooks */

 return 1 if a supported chip is found, 0 otherwise */

	/*

	 * Some boards declare base+0 to base+7 as a PNP device, some base+4

	 * to base+7 and some base+5 to base+6. So we better request each port

	 * individually for the probing phase.

	/*

	 * We need the timeouts for at least some W83781D-like

	 * chips. But only if we read 'undefined' registers.

	/*

	 * We should be able to change the 7 LSB of the address port. The

	 * MSB (busy flag) should be clear initially, set after the write.

 We found a device, now see if it could be a W83781D */

 Not a valid I2C address */

 The busy flag should be clear again */

 Determine the chip type */

 W83781D */

 W83782D */

 Sets global pdev as a side effect */

 !CONFIG_ISA */

 CONFIG_ISA */

	/*

	 * We register the ISA device first, so that we can skip the

	 * registration of an I2C interface to the same device.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  w83627ehf - Driver for the hardware monitoring functionality of

 *		the Winbond W83627EHF Super-I/O chip

 *  Copyright (C) 2005-2012  Jean Delvare <jdelvare@suse.de>

 *  Copyright (C) 2006  Yuan Mu (Winbond),

 *			Rudolf Marek <r.marek@assembler.cz>

 *			David Hubbard <david.c.hubbard@gmail.com>

 *			Daniel J Blueman <daniel.blueman@gmail.com>

 *  Copyright (C) 2010  Sheng-Yuan Huang (Nuvoton) (PS00)

 *

 *  Shamelessly ripped from the w83627hf driver

 *  Copyright (C) 2003  Mark Studebaker

 *

 *  Thanks to Leon Moonen, Steve Cliffe and Grant Coady for their help

 *  in testing and debugging this driver.

 *

 *  This driver also supports the W83627EHG, which is the lead-free

 *  version of the W83627EHF.

 *

 *  Supports the following chips:

 *

 *  Chip        #vin    #fan    #pwm    #temp  chip IDs       man ID

 *  w83627ehf   10      5       4       3      0x8850 0x88    0x5ca3

 *					       0x8860 0xa1

 *  w83627dhg    9      5       4       3      0xa020 0xc1    0x5ca3

 *  w83627dhg-p  9      5       4       3      0xb070 0xc1    0x5ca3

 *  w83627uhg    8      2       2       3      0xa230 0xc1    0x5ca3

 *  w83667hg     9      5       3       3      0xa510 0xc1    0x5ca3

 *  w83667hg-b   9      5       3       4      0xb350 0xc1    0x5ca3

 used to set data->name = w83627ehf_device_names[data->sio_kind] */

/*

 * Super-I/O constants and functions

 Logical device select */

 Device ID (2 bytes) */

 GPIO3, GPIO4 selection */

 Logical device enable */

 Logical device address (2 bytes) */

 VID control */

 VID data */

/*

 * ISA constants

/*

 * Not currently used:

 * REG_MAN_ID has the value 0x5ca3 for all supported chips.

 * REG_CHIP_ID == 0x88/0xa1/0xc1 depending on chip model.

 * REG_MAN_ID is at port 0x4f

 * REG_CHIP_ID is at port 0x58

 The W83627EHF registers for nr=7,8,9 are in bank 5 */

 Fan clock dividers are spread over the following five registers */

 SMI STATUS #2 */

 SMI MASK #3 */

 SmartFan registers */

 DC or PWM output fan configuration */

 SYS FAN0 output mode and PWM mode */

 CPU FAN0 output mode and PWM mode */

 AUX FAN mode */

 CPU FAN1 mode */

 FAN Duty Cycle, be used to control */

 Advanced Fan control, some values are common for all fans */

/*

 * Conversions

 1 is PWM mode, output in ms */

/*

 * Some of the voltage inputs have internal scaling, the tables below

 * contain 8 (the ADC LSB in mV) * scaling factor * 100

/*

 * Data structures and manipulation thereof

 IO base of hw monitor block */

 true if following fields are valid */

 In jiffies */

 Register values */

 current register bank */

 number of in inputs we have */

 Register value */

 Register value */

 Register value */

 some fan inputs can be disabled */

 some fans don't have min register */

 0->DC variable voltage, 1->PWM variable duty cycle */

	u8 pwm_enable[4]; /* 1->manual

			   * 2->thermal cruise mode (also called SmartFan I)

			   * 3->fan speed cruise mode

			   * 4->variable thermal cruise (also called

			   * SmartFan III)

			   * 5->enhanced variable thermal cruise (also called

			   * SmartFan IV)

 original value of pwm_enable */

 number of pwm */

 minimum fan speed when spinning up */

 minimum fan speed when spinning down */

 time at minimum before disabling fan */

 maximum fan speed */

 rate of change output value */

 Remember extra register values over suspend/resume */

/*

 * On older chips, only registers 0x50-0x5f are banked.

 * On more recent chips, all registers are banked.

 * Assume that is the case and set the bank number for each access.

 * Cache the bank number so it only needs to be set if it changes.

 We left-align 8-bit temperature values to make the code simpler */

 This function assumes that the caller holds data->update_lock */

 fan5 input control bit is write only, compute the value */

 fan5 input control bit is write only, compute the value */

 shut up the compiler */

 pwmcfg, tolerance mapped for i=0, i=1 to same reg */

 Fan clock dividers */

 Measured voltages and limits */

 Measured fan speeds and limits */

			/*

			 * If we failed to measure the fan speed and clock

			 * divider can be increased, let's try that for next

			 * time

 Preserve min limit if possible */

 Measured temperatures and limits */

 No min limit, alarm disabled */

 No change */

		/*

		 * Speed below this value cannot possibly be represented,

		 * even with the highest divider (128)

 128 == (1 << 7) */

		/*

		 * Speed above this value cannot possibly be represented,

		 * even with the lowest divider (1)

 1 == (1 << 0) */

		/*

		 * Automatically pick the best divider, i.e. the one such

		 * that the min limit will correspond to a register value

		 * in the 96..192 range

	/*

	 * Write both the fan clock divider (if it changed) and the new

	 * fan min (unconditionally)

 Give the chip time to sample a new speed value */

 Limit the temp to 0C - 15C */

 Smart Fan registers */

/*

 * pwm1 and pwm3 don't support max and step settings on all chips.

 * Need to check support while generating/removing attribute files.

 Case open detection */

 Force cache refresh */

 Not sensor */

 if fan3 and fan4 are enabled create the files for them */

 These groups handle non-standard attributes used in this device */

/*

 * Driver and device management

 Get the monitoring functions started */

 Start monitoring is needed */

 Enable temperature sensors if needed */

 Enable VBAT monitoring if needed */

 Get thermal sensor types */

 Digital source overrides analog type */

 thermistor */

 The W83627UHG is simple, only two fan inputs, no config */

 fan1 and fan2 */

 fan4 and fan5 share some pins with the GPIO and serial flash */

 fan1 and fan2 */

	/*

	 * It looks like fan4 and fan5 pins can be alternatively used

	 * as fan on/off switches, but fan5 control is write only :/

	 * We assume that if the serial interface is disabled, designers

	 * connected fan5 as input unless they are emitting log 1, which

	 * is not the default.

 channel 0.., name 1.. */

 channel 0.., name 1.. */

 channel 0.., name 0.. */

 channel 0.., name 1.. */

 Shouldn't happen */

 Shouldn't happen */

 shouldn't happen */

 Nothing else should be read as a string */

 Force initial bank selection */

 627EHG and 627EHF have 10 voltage inputs; 627DHG and 667HG have 9 */

 667HG has 3 pwms, and 627UHG has only 2 */

 Default to 3 temperature inputs, code below will adjust as needed */

 Deal with temperature register setup first. */

		/*

		 * Temperature sources are selected with bank 0, registers 0x49

		 * and 0x4a.

		/*

		 * W83667HG-B has another temperature register at 0x7e.

		 * The temperature source is selected with register 0x7d.

		 * Support it if the source differs from already reported

		 * sources.

		/*

		 * Chip supports either AUXTIN or VIN3. Try to find out which

		 * one.

		/*

		 * Temperature sources for temp2 and temp3 are selected with

		 * bank 0, registers 0x49 and 0x4a.

 SYSTIN */

 Adjust to have the same mapping as other source registers */

 should never happen */

		/*

		 * Skip temp3 if source is invalid or the same as temp1

		 * or temp2.

 No limit regs */

 No VIN3 */

 Temperature sources are fixed */

			/*

			 * Chip supports either AUXTIN or VIN3. Try to find

			 * out which one.

 Setup input voltage scaling factors */

 Initialize the chip */

 Read VID value */

		/*

		 * W83667HG has different pins for VID input and output, so

		 * we can get the VID input values directly at logical device D

		 * 0xe3.

			/*

			 * Set VID input sensibility if needed. In theory the

			 * BIOS should have set it, but in practice it's not

			 * always the case. We only do it for the W83627EHF/EHG

			 * because the W83627DHG is more complex in this

			 * respect.

 6 VID pins only */

 Read fan clock dividers immediately */

 Read pwm data to save original values */

 Force initial bank selection */

 Restore limits */

 Restore other settings */

 Force re-reading all values */

 w83627ehf_find() looks for a '627 in the Super-I/O config space */

 We have a known chip, find the HWM I/O address */

 Activate logical device if needed */

/*

 * when Super-I/O functions move to a separate file, the Super-I/O

 * bus will manage the lifetime of the device and this module will only keep

 * track of the w83627ehf driver.

	/*

	 * initialize sio_data->kind and sio_data->sioreg.

	 *

	 * when Super-I/O functions move to a separate file, the Super-I/O

	 * driver will probe 0x2e and 0x4e and auto-detect the presence of a

	 * w83627ehf hardware monitor, and call probe()

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pwm-fan.c - Hwmon driver for fans connected to PWM lines.

 *

 * Copyright (c) 2014 Samsung Electronics Co., Ltd.

 *

 * Author: Kamil Debski <k.debski@samsung.com>

 This handler assumes self resetting edge triggered interrupt. */

 thermal cooling device callbacks */

 We always have a PWM channel. */

	/*

	 * __set_pwm assumes that MAX_PWM * (period - 1) fits into an unsigned

	 * long. Check this here to prevent the fan running at a too low

	 * frequency.

 Set duty cycle to maximum allowed and enable PWM output */

 We also have a FAN channel. */

 keep ctx->pwm_state unmodified for pwm_fan_resume() */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * dme1737.c - Driver for the SMSC DME1737, Asus A8000, SMSC SCH311x, SCH5027,

 *             and SCH5127 Super-I/O chips integrated hardware monitoring

 *             features.

 * Copyright (c) 2007, 2008, 2009, 2010 Juerg Haefliger <juergh@gmail.com>

 *

 * This driver is an I2C/ISA hybrid, meaning that it uses the I2C bus to access

 * the chip registers if a DME1737, A8000, or SCH5027 is found and the ISA bus

 * if a SCH311x or SCH5127 chip is found. Both types of chips have very

 * similar hardware monitoring capabilities but differ in the way they can be

 * accessed.

 ISA device, if found */

 Module load parameters */

 Addresses to scan */

/* ---------------------------------------------------------------------

 * Registers

 *

 * The sensors are defined as follows:

 *

 * Voltages                          Temperatures

 * --------                          ------------

 * in0   +5VTR (+5V stdby)           temp1   Remote diode 1

 * in1   Vccp  (proc core)           temp2   Internal temp

 * in2   VCC   (internal +3.3V)      temp3   Remote diode 2

 * in3   +5V

 * in4   +12V

 * in5   VTR   (+3.3V stby)

 * in6   Vbat

 * in7   Vtrip (sch5127 only)

 *

 Voltages (in) numbered 0-7 (ix) */

 Temperatures (temp) numbered 0-2 (ix) */

/*

 * Voltage and temperature LSBs

 * The LSBs (4 bits each) are stored in 5 registers with the following layouts:

 *    IN_TEMP_LSB(0) = [in5, in6]

 *    IN_TEMP_LSB(1) = [temp3, temp1]

 *    IN_TEMP_LSB(2) = [in4, temp2]

 *    IN_TEMP_LSB(3) = [in3, in0]

 *    IN_TEMP_LSB(4) = [in2, in1]

 *    IN_TEMP_LSB(5) = [res, in7]

 Fans numbered 0-5 (ix) */

 only for fan[4-5] */

 PWMs numbered 0-2, 4-5 (ix) */

 only for pwm[0-2] */

 only for pwm[0-2] */

/*

 * The layout of the ramp rate registers is different from the other pwm

 * registers. The bits for the 3 PWMs are stored in 2 registers:

 *    PWM_RR(0) = [OFF3, OFF2,  OFF1,  RES,   RR1E, RR1-2, RR1-1, RR1-0]

 *    PWM_RR(1) = [RR2E, RR2-2, RR2-1, RR2-0, RR3E, RR3-2, RR3-1, RR3-0]

 only for pwm[0-2] */

 Thermal zones 0-2 */

/*

 * The layout of the hysteresis registers is different from the other zone

 * registers. The bits for the 3 zones are stored in 2 registers:

 *    ZONE_HYST(0) = [H1-3,  H1-2,  H1-1, H1-0, H2-3, H2-2, H2-1, H2-0]

 *    ZONE_HYST(1) = [H3-3,  H3-2,  H3-1, H3-0, RES,  RES,  RES,  RES]

/*

 * Alarm registers and bit mapping

 * The 3 8-bit alarm registers will be concatenated to a single 32-bit

 * alarm value [0, ALARM3, ALARM2, ALARM1].

 Miscellaneous registers */

/* ---------------------------------------------------------------------

 * Misc defines

 Chip identification */

 Device ID values (global configuration register index 0x20) */

 Length of ISA address segment */

 chip-dependent features */

 bit 0 */

 bit 1 */

 bit 2 */

 bit 3 */

 bit 4 */

 bits 5-10 */

 bits 11-16 */

 bit 17 */

/* ---------------------------------------------------------------------

 * Data structures and manipulation thereof

 for I2C devices only */

 for ISA devices only */

 true if following fields are valid */

 in jiffies */

 in jiffies */

 pointer to IN_NOMINAL array */

 Register values */

 Nominal voltage values */

/*

 * Voltage input

 * Voltage inputs have 16 bits resolution, limit values have 8 bits

 * resolution.

/*

 * Temperature input

 * The register values represent temperatures in 2's complement notation from

 * -127 degrees C to +127 degrees C. Temp inputs have 16 bits resolution, limit

 * values have 8 bits resolution.

 Temperature range */

/*

 * Temperature hysteresis

 * Register layout:

 *    reg[0] = [H1-3, H1-2, H1-1, H1-0, H2-3, H2-2, H2-1, H2-0]

 *    reg[1] = [H3-3, H3-2, H3-1, H3-0, xxxx, xxxx, xxxx, xxxx]

 Fan input RPM */

/*

 * Fan TPC (tach pulse count)

 * Converts a register value to a TPC multiplier or returns 0 if the tachometer

 * is configured in legacy (non-tpc) mode

/*

 * Fan type

 * The type of a fan is expressed in number of pulses-per-revolution that it

 * emits

 Fan max RPM */

/*

 * PWM enable

 * Register to enable mapping:

 * 000:  2  fan on zone 1 auto

 * 001:  2  fan on zone 2 auto

 * 010:  2  fan on zone 3 auto

 * 011:  0  fan full on

 * 100: -1  fan disabled

 * 101:  2  fan on hottest of zones 2,3 auto

 * 110:  2  fan on hottest of zones 1,2,3 auto

 * 111:  1  fan in manual mode

/*

 * PWM auto channels zone

 * Register to auto channels zone mapping (ACZ is a bitfield with bit x

 * corresponding to zone x+1):

 * 000: 001  fan on zone 1 auto

 * 001: 010  fan on zone 2 auto

 * 010: 100  fan on zone 3 auto

 * 011: 000  fan full on

 * 100: 000  fan disabled

 * 101: 110  fan on hottest of zones 2,3 auto

 * 110: 111  fan on hottest of zones 1,2,3 auto

 * 111: 000  fan in manual mode

 PWM frequency */

 the first two cases are special - stupid chip design! */

/*

 * PWM ramp rate

 * Register layout:

 *    reg[0] = [OFF3,  OFF2,  OFF1,  RES,   RR1-E, RR1-2, RR1-1, RR1-0]

 *    reg[1] = [RR2-E, RR2-2, RR2-1, RR2-0, RR3-E, RR3-2, RR3-1, RR3-0]

 PWM ramp rate enable */

/*

 * PWM min/off

 * The PWM min/off bits are part of the PMW ramp rate register 0 (see above for

 * the register layout).

/* ---------------------------------------------------------------------

 * Device I/O access

 *

 * ISA access is performed through an index/data register pair and needs to

 * be protected by a mutex during runtime (not required for initialization).

 * We use data->update_lock for this and need to ensure that we acquire it

 * before calling dme1737_read or dme1737_write.

 I2C device */

 ISA device */

 I2C device */

 ISA device */

 Enable a Vbat monitoring cycle every 10 mins */

 Sample register contents every 1 sec */

 In (voltage) registers */

			/*

			 * Voltage inputs are stored as 16 bit values even

			 * though they have only 12 bits resolution. This is

			 * to make it consistent with the temp inputs.

 Temp registers */

			/*

			 * Temp inputs are stored as 16 bit values even

			 * though they have only 12 bits resolution. This is

			 * to take advantage of implicit conversions between

			 * register values (2's complement) and temp values

			 * (signed decimal).

		/*

		 * In and temp LSB registers

		 * The LSBs are latched when the MSBs are read, so the order in

		 * which the registers are read (MSB first, then LSB) is

		 * important!

 Fan registers */

			/*

			 * Skip reading registers if optional fans are not

			 * present

 fan_max exists only for fan[5-6] */

 PWM registers */

			/*

			 * Skip reading registers if optional PWMs are not

			 * present

 pwm_config and pwm_min exist only for pwm[1-3] */

 Thermal zone registers */

 Skip reading registers if zone3 is not present */

 sch5127 zone2 registers are special */

 Alarm registers */

		/*

		 * Bit 7 tells us if the other alarm registers are non-zero and

		 * therefore also need to be read

		/*

		 * The ISA chips require explicit clearing of alarm bits.

		 * Don't worry, an alarm will come back if the condition

		 * that causes it still exists

/* ---------------------------------------------------------------------

 * Voltage sysfs attributes

 * ix = [0-7]

/* ---------------------------------------------------------------------

 * Temperature sysfs attributes

 * ix = [0-2]

/* ---------------------------------------------------------------------

 * Zone sysfs attributes

 * ix = [0-2]

 check config2 for non-standard temp-to-zone mapping */

 pwm_freq holds the temp range bits in the upper nibble */

 Refresh the cache */

 Modify the temp hyst value */

 Refresh the cache */

		/*

		 * Modify the temp range value (which is stored in the upper

		 * nibble of the pwm_freq register)

/* ---------------------------------------------------------------------

 * Fan sysfs attributes

 * ix = [0-5]

 only valid for fan[5-6] */

 only valid for fan[1-4] */

 Refresh the cache */

 Modify the fan min value */

 Only valid for fan[5-6] */

 Only valid for fan[1-4] */

/* ---------------------------------------------------------------------

 * PWM sysfs attributes

 * ix = [0-4]

 pwm[5-6] hard-wired to manual mode */

 Only valid for pwm[1-3] */

 Only valid for pwm[1-3] */

 Only valid for pwm[1-3] */

 Only valid for pwm[1-3] */

 Only valid for pwm[1-3] */

 hard-wired */

 Only valid for pwm[1-3] */

 Refresh the cache */

 Bail out if no change */

 Do some housekeeping if we are currently in auto mode */

 Save the current zone channel assignment */

 Save the current ramp rate state and disable it */

 Set the new PWM mode */

 Change permissions of pwm[ix] to read-only */

 Turn fan fully on */

 Turn on manual mode */

 Change permissions of pwm[ix] to read-writeable */

 Change permissions of pwm[ix] to read-only */

			/*

			 * Turn on auto mode using the saved zone channel

			 * assignment

 Enable PWM ramp rate if previously enabled */

 Only valid for pwm[1-3] */

 Refresh the cache */

 Set the ramp rate value */

		/*

		 * Enable/disable the feature only if the associated PWM

		 * output is in automatic mode.

 Only valid for pwm[1-3] */

 Refresh the cache */

			/*

			 * PWM is already in auto mode so update the temp

			 * channel assignment

			/*

			 * PWM is not in auto mode so we save the temp

			 * channel assignment for later use

 Only valid for pwm[1-3] */

 Refresh the cache */

		/*

		 * There are only 2 values supported for the auto_pwm_min

		 * value: 0 or auto_point1_pwm. So if the temperature drops

		 * below the auto_point1_temp_hyst value, the fan either turns

		 * off or runs at auto_point1_pwm duty-cycle.

 Only valid for pwm[1-3] */

/* ---------------------------------------------------------------------

 * Miscellaneous sysfs attributes

/* ---------------------------------------------------------------------

 * Sysfs device attribute defines and structs

 Voltages 0-7 */

 Temperatures 1-3 */

 Zones 1-3 */

 Fans 1-4 */

 Fans 5-6 */

 PWMs 1-3 */

 PWMs 5-6 */

 Misc */

 for ISA devices */

/*

 * This struct holds all the attributes that are always present and need to be

 * created unconditionally. The attributes that need modification of their

 * permissions are created read-only and write permissions are added or removed

 * on the fly when required

 Voltages */

 Temperatures */

 Zones */

/*

 * The following struct holds temp offset attributes, which are not available

 * in all chips. The following chips support them:

 * DME1737, SCH311x

/*

 * The following struct holds VID related attributes, which are not available

 * in all chips. The following chips support them:

 * DME1737

/*

 * The following struct holds temp zone 3 related attributes, which are not

 * available in all chips. The following chips support them:

 * DME1737, SCH311x, SCH5027

/*

 * The following struct holds temp zone hysteresis related attributes, which

 * are not available in all chips. The following chips support them:

 * DME1737, SCH311x

/*

 * The following struct holds voltage in7 related attributes, which

 * are not available in all chips. The following chips support them:

 * SCH5127

/*

 * The following structs hold the PWM attributes, some of which are optional.

 * Their creation depends on the chip configuration which is determined during

 * module load.

/*

 * The following struct holds auto PWM min attributes, which are not available

 * in all chips. Their creation depends on the chip type which is determined

 * during module load.

/*

 * The following structs hold the fan attributes, some of which are optional.

 * Their creation depends on the chip configuration which is determined during

 * module load.

/*

 * The permissions of the following zone attributes are changed to read-

 * writeable if the chip is *not* locked. Otherwise they stay read-only.

/*

 * The permissions of the following zone 3 attributes are changed to read-

 * writeable if the chip is *not* locked. Otherwise they stay read-only.

/*

 * The permissions of the following PWM attributes are changed to read-

 * writeable if the chip is *not* locked and the respective PWM is available.

 * Otherwise they stay read-only.

/*

 * Pwm[1-3] are read-writeable if the associated pwm is in manual mode and the

 * chip is not locked. Otherwise they are read-only.

/* ---------------------------------------------------------------------

 * Super-IO functions

/* ---------------------------------------------------------------------

 * Device initialization

 Create a name attribute for ISA devices */

 Create standard sysfs attributes */

 Create chip-dependent sysfs attributes */

 Create fan sysfs attributes */

 Create PWM sysfs attributes */

	/*

	 * Inform if the device is locked. Otherwise change the permissions of

	 * selected attributes from read-only to read-writeable.

 Change permissions of zone sysfs attributes */

 Change permissions of chip-dependent sysfs attributes */

 Change permissions of PWM sysfs attributes */

 Change permissions of pwm[1-3] if in manual mode */

 Point to the right nominal voltages array */

 Inform if part is not monitoring/started */

 Force monitoring */

 Inform if part is not ready */

	/*

	 * Determine which optional fan and pwm features are enabled (only

	 * valid for I2C devices)

 I2C chip */

 Check if optional fan3 input is enabled */

		/*

		 * Fan4 and pwm3 are only available if the client's I2C address

		 * is the default 0x2e. Otherwise the I/Os associated with

		 * these functions are used for addr enable/select.

		/*

		 * Determine which of the optional fan[5-6] and pwm[5-6]

		 * features are enabled. For this, we need to query the runtime

		 * registers through the Super-IO LPC interface. Try both

		 * config ports 0x2e and 0x4e.

 Fan[1-2] and pwm[1-2] are present in all chips */

 Chip-dependent features */

 Inform if fan-to-pwm mapping differs from the default */

 I2C chip */

 ISA chip */

	/*

	 * Switch pwm[1-3] to manual mode if they are currently disabled and

	 * set the duty-cycles to 0% (which is identical to the PWMs being

	 * disabled).

 Initialize the default PWM auto channels zone (acz) assignments */

 pwm1 -> zone1 */

 pwm2 -> zone2 */

 pwm3 -> zone3 */

 Set VRM */

/* ---------------------------------------------------------------------

 * I2C device detection and registration

	/*

	 * Check device ID

	 * We currently know about two kinds of DME1737 and SCH5027.

 Select logical device A (runtime registers) */

 Get the base address of the runtime registers */

	/*

	 * Read the runtime registers to determine which optional features

	 * are enabled and available. Bits [3:2] of registers 0x43-0x46 are set

	 * to '10' if the respective feature is enabled.

 fan6 */

 pwm6 */

 fan5 */

 pwm5 */

 Return 0 if detection is successful, -ENODEV otherwise */

 Initialize the DME1737 chip */

 Create sysfs files */

 Register device */

/* ---------------------------------------------------------------------

 * ISA device detection and registration

	/*

	 * Check device ID

	 * We currently know about SCH3112, SCH3114, SCH3116, and SCH5127

 Select logical device A (runtime registers) */

 Get the base address of the runtime registers */

	/*

	 * Access to the hwmon registers is through an index/data register

	 * pair located at offset 0x70/0x71.

 Skip chip detection if module is loaded with force_id parameter */

 Initialize the mutex */

 Initialize the chip */

 Create sysfs files */

 Register device */

/* ---------------------------------------------------------------------

 * Module initialization and cleanup

 Return 0 if we didn't find an ISA device */

 Sets global pdev as a side effect */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Linear Technology LTC2945 I2C Power Monitor

 *

 * Copyright (c) 2014 Guenter Roeck

 chip registers */

 Fault register bits */

 Control register bits */

 Return the value from the given register in uW, mV, or mA */

 power */

 current, voltage */

		/*

		 * Convert to uW by assuming current is measured with

		 * an 1mOhm sense resistor, similar to current

		 * measurements.

		 * Control register bit 0 selects if voltage at SENSE+/VDD

		 * or voltage at ADIN is used to measure power.

 25 mV * 25 uV = 0.625 uV resolution. */

 0.5 mV * 25 uV = 0.0125 uV resolution. */

 25 mV resolution. Convert to mV. */

 0.5mV resolution. Convert to mV. */

		/*

		 * 25 uV resolution. Convert to current as measured with

		 * an 1 mOhm sense resistor, in mA. If a different sense

		 * resistor is installed, calculate the actual current by

		 * dividing the reported current by the sense resistor value

		 * in mOhm.

		/*

		 * Convert to register value by assuming current is measured

		 * with an 1mOhm sense resistor, similar to current

		 * measurements.

		 * Control register bit 0 selects if voltage at SENSE+/VDD

		 * or voltage at ADIN is used to measure power, which in turn

		 * determines register calculations.

 25 mV * 25 uV = 0.625 uV resolution. */

			/*

			 * 0.5 mV * 25 uV = 0.0125 uV resolution.

			 * Divide first to avoid overflow;

			 * accept loss of accuracy.

 25 mV resolution. */

 0.5mV resolution. */

		/*

		 * 25 uV resolution. Convert to current as measured with

		 * an 1 mOhm sense resistor, in mA. If a different sense

		 * resistor is installed, calculate the actual current by

		 * dividing the reported current by the sense resistor value

		 * in mOhm.

 convert to register value, then clamp and write result */

 Reset minimum */

 Reset maximum */

 Try resetting test mode even if there was an error */

 Clear reported faults in chip register */

 Input voltages */

 Voltage alarms */

 Currents (via sense resistor) */

 Current alarms */

 Power */

 Power alarms */

 Clear faults */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  it87.c - Part of lm_sensors, Linux kernel modules for hardware

 *           monitoring.

 *

 *  The IT8705F is an LPC-based Super I/O part that contains UARTs, a

 *  parallel port, an IR port, a MIDI port, a floppy controller, etc., in

 *  addition to an Environment Controller (Enhanced Hardware Monitor and

 *  Fan Controller)

 *

 *  This driver supports only the Environment Controller in the IT8705F and

 *  similar parts.  The other devices are supported by different drivers.

 *

 *  Supports: IT8603E  Super I/O chip w/LPC interface

 *            IT8620E  Super I/O chip w/LPC interface

 *            IT8622E  Super I/O chip w/LPC interface

 *            IT8623E  Super I/O chip w/LPC interface

 *            IT8628E  Super I/O chip w/LPC interface

 *            IT8705F  Super I/O chip w/LPC interface

 *            IT8712F  Super I/O chip w/LPC interface

 *            IT8716F  Super I/O chip w/LPC interface

 *            IT8718F  Super I/O chip w/LPC interface

 *            IT8720F  Super I/O chip w/LPC interface

 *            IT8721F  Super I/O chip w/LPC interface

 *            IT8726F  Super I/O chip w/LPC interface

 *            IT8728F  Super I/O chip w/LPC interface

 *            IT8732F  Super I/O chip w/LPC interface

 *            IT8758E  Super I/O chip w/LPC interface

 *            IT8771E  Super I/O chip w/LPC interface

 *            IT8772E  Super I/O chip w/LPC interface

 *            IT8781F  Super I/O chip w/LPC interface

 *            IT8782F  Super I/O chip w/LPC interface

 *            IT8783E/F Super I/O chip w/LPC interface

 *            IT8786E  Super I/O chip w/LPC interface

 *            IT8790E  Super I/O chip w/LPC interface

 *            IT8792E  Super I/O chip w/LPC interface

 *            Sis950   A clone of the IT8705F

 *

 *  Copyright (C) 2001 Chris Gauthron

 *  Copyright (C) 2005-2010 Jean Delvare <jdelvare@suse.de>

 The register to read/write */

 Secondary register to read/write */

 Register: Logical device select */

 The device with the fan registers in it */

 The device with the IT8718F/IT8720F VID value in it */

 Register: Device ID */

 Register: Device Revision */

	/*

	 * Try to reserve ioreg and ioreg + 1 for exclusive access.

 Logical device 4 registers */

 Logical device 7 registers (IT8712F and later) */

 Pin selection */

 Pin selection */

 SPI function pin select */

 VID value */

 Beep pin mapping */

 Update battery voltage after every reading if true */

 Not all BIOSes properly configure the PWM registers */

 Many IT87 constants specified below */

 Length of ISA address segment */

 Length of ISA address segment for Environmental Controller */

 Offset of EC registers from ISA base address */

 Where are the ISA address/data registers relative to the EC base address */

----- The IT87 registers -----*/

/*

 * The IT8718F and IT8720F have the VID value in a different register, in

 * Super-I/O configuration space.

/*

 * The IT8705F and IT8712F earlier than revision 0x08 use register 0x0b

 * for fan divisors. Later IT8712F revisions must use 16-bit tachometer

 * mode.

/*

 * Monitors:

 * - up to 13 voltage (0 to 7, battery, avcc, 10 to 12)

 * - up to 6 temp (1 to 6)

 * - up to 6 fan (1 to 6)

 Need to enable 16-bit fans */

 Supports five fans */

 Set if chip supports VID */

 Set if in7 is internal */

 Supports six fans */

 Chip supports in9/AVCC3 */

 Chip supports 5 pwm chn */

 Chip supports 6 pwm chn */

 Separate pwm freq 2 */

 Up to 6 temp sensors */

 VIN3 connected to +5V */

 may need to overwrite */

 may need to overwrite */

 Actually reports PCH */

 Actually reports PCH */

 PECI: guesswork */

 12mV ADC (OHM) */

 16 bit fans (OHM) */

 three fans, always 16 bit (guesswork) */

 PECI (coreboot) */

 12mV ADC (HWSensors4, OHM) */

 16 bit fans (HWSensors4, OHM) */

 three fans, always 16 bit (datasheet) */

 Actually reports PCH */

 Values read from Super-I/O config space */

 Internal sensors can be labeled */

 Features skipped based on config or DMI */

/*

 * For each registered chip, we need to keep some data in memory.

 * The structure is dynamically allocated.

 true if following fields are valid */

 In jiffies */

 Internal voltage sensors are scaled */

 Bitfield, internal sensors (for labels) */

 Bitfield, voltage sensors enabled */

 [nr][0]=in, [1]=min, [2]=max */

 Bitfield, fans enabled */

 Register values, [nr][0]=fan, [1]=min */

 Bitfield, temp sensors enabled */

 [nr][0]=temp, [1]=min, [2]=max, [3]=offset */

 Register value (IT87_REG_TEMP_ENABLE) */

 Register value (IT87_REG_TEMP_EXTRA) */

 Register encoding, shifted right */

 True if VID supported */

 Register encoding, combined */

 Register encoding, combined */

 true if beep supported */

 Register encoding */

 Register value */

 Register value */

	/*

	 * The following 3 arrays correspond to the same registers up to

	 * the IT8720F. The meaning of bits 6-0 depends on the value of bit

	 * 7, and we want to preserve settings on mode changes, so we have

	 * to track all values separately.

	 * Starting with the IT8721F, the manual PWM duty cycles are stored

	 * in separate registers (8-bit values), so the separate tracking

	 * is no longer needed, but it is still done to keep the driver

	 * simple.

 Bitfield, pwm control enabled */

 Register value */

 Manual PWM value set by user */

 PWM to temp. chan. mapping (bits 1-0) */

 Automatic fan speed control registers */

 [nr][3] is hard-coded */

 [nr][0] is point1_temp_hyst */

 The divider is fixed to 2 in 16-bit mode */

/*

 * PWM base frequencies. The frequency has to be divided by either 128 or 256,

 * depending on the chip type, to calculate the actual PWM frequency.

 *

 * Some of the chip datasheets suggest a base frequency of 51 kHz instead

 * of 750 kHz for the slowest base frequency, resulting in a PWM frequency

 * of 200 Hz. Sometimes both PWM frequency select registers are affected,

 * sometimes just one. It is unknown if this is a datasheet error or real,

 * so this is ignored for now.

/*

 * Must be called with data->update_lock held, except during initialization.

 * We ignore the IT87 BUSY flag at this moment - it could lead to deadlocks,

 * would slow down the IT87 access and should not be necessary.

/*

 * Must be called with data->update_lock held, except during initialization.

 * We ignore the IT87 BUSY flag at this moment - it could lead to deadlocks,

 * would slow down the IT87 access and should not be necessary.

 Automatic mode */

 Manual mode */

		/*

		 * 0: temperature hysteresis (base + 5)

		 * 1: fan off temperature (base + 0)

		 * 2: fan start temperature (base + 1)

		 * 3: fan max temperature (base + 2)

		/*

		 * 0: start pwm value (base + 3)

		 * 1: pwm slope (base + 4, 1/8th pwm)

			/*

			 * Cleared after each update, so reenable.  Value

			 * returned by this read will be previous value

 VBAT and AVCC don't have limit registers */

 Skip disabled fans */

 Add high byte if in 16-bit mode */

 Newer chips don't have clock dividers */

		/*

		 * The IT8705F does not have VID capability.

		 * The IT8718F and later don't use IT87_REG_VID for the

		 * same purpose.

			/*

			 * The older IT8712F revisions had only 5 VID pins,

			 * but we assume it is always safe to read 6 bits.

 Up to 6 temperatures */

 In case value is updated while used */

 Intel PECI */

 thermal diode */

 thermistor */

 disabled */

 backwards compatibility */

 3 = thermal diode; 4 = thermistor; 6 = Intel PECI; 0 = disabled */

 Force cache refresh */

 6 Fans */

 Full speed */

 Automatic mode */

 Full speed */

 Manual mode */

 Save fan min limit */

 Restore fan min limit */

 Returns 0 if OK, -EINVAL otherwise */

 Check trip points before switching to automatic mode */

 make sure the fan is on when in on/off mode */

 set on/off mode */

 No on/off mode, set maximum pwm value */

 and set manual mode */

 set SmartGuardian mode */

		/*

		 * If we are in automatic mode, the PWM duty cycle register

		 * is read-only so we can't write the value.

		/*

		 * If we are in manual mode, write the duty cycle immediately;

		 * otherwise, just store it for later use.

 Search for the nearest available frequency */

 Should never happen */

 pwm channels 3..6 map to temp4..6 */

	/*

	 * If we are in automatic mode, write the temp mapping immediately;

	 * otherwise, just store it for later use.

 Alarms */

 Invalidate cache to force re-read */

 fanX_beep writability is set later */

 AVCC3 */

 voltage index */

 attribute index */

 in8 and higher only have input attributes */

 4 */

 9 */

 14 */

 19 */

 24 */

 29 */

 34 */

 39 */

 40 */

 temperature index */

 attribute index */

 5 */

 6 */

 7 */

 14 */

 21 */

 2 */

 3 */

 4 .. 7 */

 fan index */

 attribute index */

 fan 4..6 don't have divisor attributes */

 beep */

 first fan beep attribute is writable */

 divisor */

 3 */

 4 */

 9 */

 14 */

 15 */

 19 */

 23 */

 pwm index */

 attribute index */

 pwmX_auto_channels_temp is only writable if auto pwm is supported */

 pwm2_freq is writable if there are two pwm frequency selects */

 pwm index */

 attribute index */

 pwm 4..6 */

 no auto point pwm */

 no auto_point4 */

 no pwm_auto_start, pwm_auto_slope */

 11 */

 22 */

 33 */

 SuperIO detection - will change isa_address if a chip is found */

 No device at all */

 in7 (VSB or VCCH5V) is always internal on some chips */

 in8 (Vbat) is always internal */

 in9 (AVCC3), always internal if supported */

 in9 is AVCC */

 Read GPIO config and VID value from LDN 7 (GPIO) */

 The IT8705F has a different LD number for GPIO */

 Check if fan3 is there or not */

 Check if fan2 is there or not */

 VIN5 */

 No VIN5 */

 VIN6 */

 No VIN6 */

		/*

		 * VIN7

		 * Does not depend on bit 2 of Reg2C, contrary to datasheet.

			/*

			 * The data sheet is a bit unclear regarding the

			 * internal voltage divider for VCCH5V. It says

			 * "This bit enables and switches VIN7 (pin 91) to the

			 * internal voltage divider for VCCH5V".

			 * This is different to other chips, where the internal

			 * voltage divider would connect VIN7 to an internal

			 * voltage source. Maybe that is the case here as well.

			 *

			 * Since we don't know for sure, re-route it if that is

			 * not the case, and ask the user to report if the

			 * resulting voltage is sane.

 Check if fan3 is there or not */

 Check if fan2 is there or not */

 No VIN5 */

 No VIN6 */

 Check for pwm5 */

 Check for fan4, fan5 */

 Check for pwm3, fan3 */

 Check for pwm4 */

 Check for pwm2, fan2 */

 Check for pwm6, fan6 */

 Check if AVCC is on VIN3 */

 Check for pwm4, fan4 */

 Check for pwm3, fan3, pwm5, fan5 */

 Check for pwm2, fan2 */

 Check for AVCC */

 Check for fan4, fan5 */

 We need at least 4 VID pins */

 Check if fan3 is there or not */

 Check if fan2 is there or not */

		/*

		 * The IT8720F has no VIN7 pin, so VCCH5V should always be

		 * routed internally to VIN7 with an internal divider.

		 * Curiously, there still is a configuration bit to control

		 * this, which means it can be set incorrectly. And even

		 * more curiously, many boards out there are improperly

		 * configured, even though the IT8720F datasheet claims

		 * that the internal routing of VCCH5V to VIN7 is the default

		 * setting. So we force the internal routing in this case.

		 *

		 * On IT8782F, VIN7 is multiplexed with one of the UART6 pins.

		 * If UART6 is enabled, re-route VIN7 to the internal divider

		 * if that is not already the case.

		/*

		 * On IT8782F, UART6 pins overlap with VIN5, VIN6, and VIN7.

		 * While VIN7 can be routed to the internal voltage divider,

		 * VIN5 and VIN6 are not available if UART6 is enabled.

		 *

		 * Also, temp3 is not available if UART6 is enabled and TEMPIN3

		 * is the temperature source. Since we can not read the

		 * temperature source here, skip_temp is preliminary.

 Disable specific features based on DMI strings */

			/*

			 * On the Shuttle SN68PT, FAN_CTL2 is apparently not

			 * connected to a fan, but to something else. One user

			 * has reported instant system power-off when changing

			 * the PWM2 duty cycle, so we disable it.

			 * I use the board name string as the trigger in case

			 * the same board is ever used in other systems.

/*

 * Some chips seem to have default value 0xff for all limit

 * registers. For low voltage limits it makes no sense and triggers

 * alarms, so change to 0 instead. For high temperature limits, it

 * means -1 degree C, which surprisingly doesn't trigger an alarm,

 * but is still confusing, so change to 127 degrees C.

 Check if voltage monitors are reset manually or by some reason */

 Enable all voltage monitors */

 Check if tachometers are reset manually or by some reason */

 Enable all fan tachometers */

 Set tachometers to 16-bit mode if needed */

 Called when we have found a new IT87. */

	/*

	 * For each PWM channel:

	 * - If it is in automatic mode, setting to manual mode should set

	 *   the fan to full speed by default.

	 * - If it is in manual mode, we need a mapping to temperature

	 *   channels to use when later setting to automatic mode later.

	 *   Use a 1:1 mapping by default (we are clueless.)

	 * In both cases, the value can (and should) be changed by the user

	 * prior to switching to a different mode.

	 * Note that this is no longer needed for the IT8721F and later, as

	 * these have separate registers for the temperature mapping and the

	 * manual duty cycle.

 Full speed */

 Full speed, hard-coded */

	/*

	 * Temperature channels are not forcibly enabled, as they can be

	 * set to two different sensor types and we can't guess which one

	 * is correct for a given system. These channels can be enabled at

	 * run-time through the temp{1-3}_type sysfs accessors if needed.

 Check for additional fans */

 fan4 enabled */

 fan5 enabled */

 fan6 enabled */

 Fan input pins may be used for alternative functions */

 Check if pwm5, pwm6 are enabled */

 The following code may be IT8620E specific */

 Return 1 if and only if the PWM interface is safe to use */

	/*

	 * Some BIOSes fail to correctly configure the IT87 fans. All fans off

	 * and polarity set to active low is sign that this is the case so we

	 * disable pwm control to protect the user.

			/*

			 * The user asks us to attempt a chip reconfiguration.

			 * This means switching to active high polarity and

			 * inverting all fan speed values.

			/*

			 * If any fan is in automatic pwm mode, the polarity

			 * might be correct, as suspicious as it seems, so we

			 * better don't change anything (but still disable the

			 * PWM interface).

	/*

	 * IT8705F Datasheet 0.4.1, 3h == Version G.

	 * IT8712F Datasheet 0.9.1, section 8.3.5 indicates 8h == Version J.

	 * These are the first revisions with 16-bit tachometer support.

 Now, we do the remaining detection. */

 Check PWM configuration */

 Starting with IT8721F, we handle scaling of internal voltages */

 in3 is AVCC */

 in7 is VSB */

 in8 is Vbat */

 in9 is AVCC */

 in3 is VCC5V */

 in7 is VCCH5V */

 Check for additional temperature sensors */

 Check for additional voltage sensors */

 Initialize the IT87 chip */

 VID reading from Super-I/O config space if available */

 Prepare for sysfs hooks */

 force update */

		/*

		 * Don't register second chip if its ISA address matches

		 * the first chip's ISA address.

		/*

		 * IT8705F may respond on both SIO addresses.

		 * Stop probing after finding one.

 NULL check handled by platform_device_unregister */

 NULL check handled by platform_device_unregister */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm77.c - Part of lm_sensors, Linux kernel modules for hardware

 *	    monitoring

 *

 * Copyright (c) 2004  Andras BALI <drewie@freemail.hu>

 *

 * Heavily based on lm75.c by Frodo Looijaard <frodol@dds.nl>.  The LM77

 * is a temperature sensor and thermal window comparator with 0.5 deg

 * resolution made by National Semiconductor.  Complete datasheet can be

 * obtained at their site:

 *	http://www.national.com/pf/LM/LM77.html

 Addresses to scan */

 The LM77 registers */

 Each client has this additional data */

 In jiffies */

 index using temp_index */

 straight from the datasheet */

/*

 * In the temperature registers, the low 3 bits are not part of the

 * temperature values; they are the status bits.

/*

 * All registers are word-sized, except for the configuration register.

 * The LM77 uses the high-byte first convention.

 sysfs stuff */

/*

 * hysteresis is stored as a relative value on the chip, so it has to be

 * converted first.

 Return 0 if detection is successful, -ENODEV otherwise */

	/*

	 * Here comes the remaining detection.  Since the LM77 has no

	 * register dedicated to identification, we have to rely on the

	 * following tricks:

	 *

	 * 1. the high 4 bits represent the sign and thus they should

	 *    always be the same

	 * 2. the high 3 bits are unused in the configuration register

	 * 3. addresses 0x06 and 0x07 return the last read value

	 * 4. registers cycling over 8-address boundaries

	 *

	 * Word-sized registers are high-byte first.

 addresses cycling */

 sign bits */

 unused bits */

 0x06 and 0x07 return the last read value */

 Initialize the LM77 chip - turn off shutdown mode */

 Initialize the LM77 chip */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2011 David George <david.george@ska.ac.za>

 *

 * based on adm1021.c

 * some credit to Christoph Scheurer, but largely a rewrite

 Addresses to scan */

 max1668 registers */

 limits */

 write high limits */

 write low limits */

 read high limits */

 read low limits */

 manufacturer and device ID Constants */

 read only mode module parameter */

 true if following fields are valid */

 In jiffies */

 1x local and 4x remote */

 Attributes common to MAX1668, MAX1989 and MAX1805 */

 Attributes not present on MAX1805 */

 Return 0 if detection is successful, -ENODEV otherwise */

 Check for unsupported part */

 sysfs hooks */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/hwmon/wm8350-hwmon.c - Wolfson Microelectronics WM8350 PMIC

 *                                  hardware monitoring features.

 *

 * Copyright (C) 2009 Wolfson Microelectronics plc

 SPDX-License-Identifier: GPL-2.0

/*

 * ADM1177 Hot Swap Controller and Digital Power Monitor with Soft Start Pin

 *

 * Copyright 2015-2019 Analog Devices Inc.

  Command Byte Operations */

 Extended Register */

/**

 * struct adm1177_state - driver instance specific data

 * @client:		pointer to i2c client

 * @reg:		regulator info for the power supply of the device

 * @r_sense_uohm:	current sense resistor value

 * @alert_threshold_ua:	current limit for shutdown

 * @vrange_high:	internal voltage divider

			/*

			 * convert to milliamperes

			 * ((105.84mV / 4096) x raw) / senseResistor(ohm)

		/*

		 * convert to millivolts based on resistor devision

		 * (V_fullscale / 4096) * raw

			/*

			 * set maximum default value from datasheet based on

			 * shunt-resistor

 SPDX-License-Identifier: GPL-2.0

/*

 * Analog Devices LTC2947 high precision power and energy monitor over I2C

 *

 * Copyright 2019 Analog Devices Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * w83l785ts.c - Part of lm_sensors, Linux kernel modules for hardware

 *               monitoring

 * Copyright (C) 2003-2009  Jean Delvare <jdelvare@suse.de>

 *

 * Inspired from the lm83 driver. The W83L785TS-S is a sensor chip made

 * by Winbond. It reports a single external temperature with a 1 deg

 * resolution and a 3 deg accuracy. Datasheet can be obtained from

 * Winbond's website at:

 *   http://www.winbond-usa.com/products/winbond_products/pdfs/PCIC/W83L785TS-S.pdf

 *

 * Ported to Linux 2.6 by Wolfgang Ziegler <nuppla@gmx.at> and Jean Delvare

 * <jdelvare@suse.de>.

 *

 * Thanks to James Bolt <james@evilpenguin.com> for benchmarking the read

 * error handling mechanism.

 How many retries on register read error */

/*

 * Address to scan

 * Address is fully defined internally and cannot be changed.

/*

 * The W83L785TS-S registers

 * Manufacturer ID is 0x5CA3 for Winbond.

 not sure about this one */

/*

 * Conversions

 * The W83L785TS-S uses signed 8-bit values.

/*

 * Functions declaration

/*

 * Driver data (common to all clients)

/*

 * Client data (each client gets its own)

 false until following fields are valid */

 in jiffies */

 registers values */

 0: input, 1: critical limit */

/*

 * Sysfs stuff

/*

 * Real code

 Return 0 if detection is successful, -ENODEV otherwise */

 detection */

 Identification */

 Winbond */

 W83L785TS-S */

	/*

	 * Initialize the W83L785TS chip

	 * Nothing yet, assume it is already started.

 Register sysfs hooks */

	/*

	 * We might be called during detection, at which point the client

	 * isn't yet fully initialized, so we can't use dev_dbg on it

	/*

	 * Frequent read errors have been reported on Asus boards, so we

	 * retry on read errors. If it still fails (unlikely), return the

	 * default value requested by the caller.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lm78.c - Part of lm_sensors, Linux kernel modules for hardware

 *	    monitoring

 * Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl>

 * Copyright (c) 2007, 2011  Jean Delvare <jdelvare@suse.de>

 Addresses to scan */

 Many LM78 constants specified below */

 Length of ISA address segment */

 Where are the ISA address/data registers relative to the base address */

 The LM78 registers */

/*

 * Conversions. Rounding and limit checking is only done on the TO_REG

 * variants.

/*

 * IN: mV (0V to 4.08V)

 * REG: 16mV/bit

/*

 * TEMP: mC (-128C to +127C)

 * REG: 1C/bit, two's complement

 For ISA device only */

 true if following fields are valid */

 In jiffies */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register value */

 Register encoding, shifted right */

 Register encoding, combined */

 Register encoding, combined */

 7 Voltages */

 Temperature */

 3 Fans */

/*

 * Note: we save and restore the fan minimum here, because its value is

 * determined in part by the fan divisor.  This follows the principle of

 * least surprise; the user doesn't expect the fan minimum to change just

 * because the divisor changed.

 Fan 3 divisor is locked in H/W */

 VID */

 Alarms */

/*

 * ISA related code

 ISA device, if found */

 Returns 1 if the I2C chip appears to be an alias of the ISA chip */

 No ISA chip */

 Address doesn't match */

 Chip type doesn't match */

	/*

	 * We compare all the limit registers, the config register and the

	 * interrupt mask registers

 !CONFIG_ISA */

 CONFIG_ISA */

	/*

	 * We block updates of the ISA device to minimize the risk of

	 * concurrent access to the same LM78 chip through different

	 * interfaces.

 Explicitly prevent the misdetection of Winbond chips */

 Determine the chip type. */

 LM78 */

 LM78-J */

 Initialize the LM78 chip */

/*

 * The SMBus locks itself, but ISA access must be locked explicitly!

 * We don't want to lock the whole ISA bus, so we lock each client

 * separately.

 * We ignore the LM78 BUSY flag at this moment - it could lead to deadlocks,

 * would slow down the LM78 access and should not be necessary.

 ISA device */

 ISA device */

 Start monitoring */

 A few vars need to be filled upon startup */

 Reserve the ISA region */

 Initialize the LM78 chip */

 return 1 if a supported chip is found, 0 otherwise */

	/*

	 * Some boards declare base+0 to base+7 as a PNP device, some base+4

	 * to base+7 and some base+5 to base+6. So we better request each port

	 * individually for the probing phase.

	/*

	 * We need the timeouts for at least some LM78-like

	 * chips. But only if we read 'undefined' registers.

	/*

	 * We should be able to change the 7 LSB of the address port. The

	 * MSB (busy flag) should be clear initially, set after the write.

 We found a device, now see if it could be an LM78 */

 Not a valid I2C address */

 The busy flag should be clear again */

 Explicitly prevent the misdetection of Winbond chips */

 Explicitly prevent the misdetection of ITE chips */

 Determine the chip type */

 LM78 */

 LM78-J */

 LM79 */

 Sets global pdev as a side effect */

 !CONFIG_ISA */

 CONFIG_ISA */

	/*

	 * We register the ISA device first, so that we can skip the

	 * registration of an I2C interface to the same device.

 SPDX-License-Identifier: GPL-2.0-or-later

/* Sensirion SHT21 humidity and temperature sensor driver

 *

 * Copyright (C) 2010 Urs Fleisch <urs.fleisch@sensirion.com>

 *

 * Data sheet available at https://www.sensirion.com/file/datasheet_sht21

 I2C command bytes */

/**

 * struct sht21 - SHT21 device specific data

 * @client: I2C client device

 * @lock: mutex to protect measurement values

 * @last_update: time of last update (jiffies)

 * @temperature: cached temperature measurement value

 * @humidity: cached humidity measurement value

 * @valid: only 0 before first measurement is taken

 * @eic: cached electronic identification code text

/**

 * sht21_temp_ticks_to_millicelsius() - convert raw temperature ticks to

 * milli celsius

 * @ticks: temperature ticks value received from sensor

 clear status bits */

	/*

	 * Formula T = -46.85 + 175.72 * ST / 2^16 from data sheet 6.2,

	 * optimized for integer fixed point (3 digits) arithmetic

/**

 * sht21_rh_ticks_to_per_cent_mille() - convert raw humidity ticks to

 * one-thousandths of a percent relative humidity

 * @ticks: humidity ticks value received from sensor

 clear status bits */

	/*

	 * Formula RH = -6 + 125 * SRH / 2^16 from data sheet 6.1,

	 * optimized for integer fixed point (3 digits) arithmetic

/**

 * sht21_update_measurements() - get updated measurements from device

 * @dev: device

 *

 * Returns 0 on success, else negative errno.

	/*

	 * Data sheet 2.4:

	 * SHT2x should not be active for more than 10% of the time - e.g.

	 * maximum two measurements per second at 12bit accuracy shall be made.

/**

 * sht21_show_temperature() - show temperature measurement value in sysfs

 * @dev: device

 * @attr: device attribute

 * @buf: sysfs buffer (PAGE_SIZE) where measurement values are written to

 *

 * Will be called on read access to temp1_input sysfs attribute.

 * Returns number of bytes written into buffer, negative errno on error.

/**

 * sht21_show_humidity() - show humidity measurement value in sysfs

 * @dev: device

 * @attr: device attribute

 * @buf: sysfs buffer (PAGE_SIZE) where measurement values are written to

 *

 * Will be called on read access to humidity1_input sysfs attribute.

 * Returns number of bytes written into buffer, negative errno on error.

/**

 * eic_show() - show Electronic Identification Code in sysfs

 * @dev: device

 * @attr: device attribute

 * @buf: sysfs buffer (PAGE_SIZE) where EIC is written

 *

 * Will be called on read access to eic sysfs attribute.

 * Returns number of bytes written into buffer, negative errno on error.

 sysfs attributes */

 Device ID table */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * A hwmon driver for ACPI 4.0 power meters

 * Copyright (C) 2009 IBM

 *

 * Author: Darrick J. Wong <darrick.wong@oracle.com>

 Averaging interval */

 _PAI returns 0 on success, nonzero otherwise */

 Cap functions */

 _SHL returns 0 on success, nonzero otherwise */

 Power meter trip points */

 Both trip levels must be set */

 This driver stores min, max; ACPI wants max, min. */

 _PTP returns 0 on success, nonzero otherwise */

 Power meter */

 Miscellaneous */

 Sensor descriptions.  If you add a sensor, update NUM_SENSORS above! */

 Read power domain data */

 Refuse non-references */

 Create a symlink to domain objects */

 Registration and deregistration */

 Grab all the integer data at once */

 Grab the string data */

 Handle ACPI event notifications */

 CONFIG_PM_SLEEP */

 Module init/exit routines */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  pc87427.c - hardware monitoring driver for the

 *              National Semiconductor PC87427 Super-I/O chip

 *  Copyright (C) 2006, 2008, 2010  Jean Delvare <jdelvare@suse.de>

 *

 *  Supports the following chips:

 *

 *  Chip        #vin    #fan    #pwm    #temp   devid

 *  PC87427     -       8       4       6       0xF2

 *

 *  This driver assumes that no more than one chip is present.

 *  Only fans are fully supported so far. Temperatures are in read-only

 *  mode, and voltages aren't supported at all.

/*

 * The lock mutex protects both the I/O accesses (needed because the

 * device is using banked registers) and the register cache (needed to keep

 * the data in the registers and the cache in sync at any time).

 in jiffies */

 bit vector */

 register values */

 register values */

 register values */

 bit vector */

 bit vector */

 register values */

 register values */

 bit vector */

 register values */

 register values */

 register values */

 register values */

 register values */

 register values */

/*

 * Super-I/O registers and operations

 Logical device select */

 Device ID */

 Configuration 2 */

 Configuration 3 */

 Configuration 4 */

 Configuration 5 */

 Configuration B */

 Configuration C */

 Configuration D */

 Device activation */

 I/O or memory mapping */

 I/O base address */

/*

 * Logical devices

/*

 * I/O access functions

 ldi is the logical device index */

 Must be called with data->lock held, except during init */

 Must be called with data->lock held, except during init */

/*

 * Fan registers and conversions

 fan data registers are 16-bit wide */

/*

 * Dedicated function to read all registers related to a given fan input.

 * This saves us quite a few locks and bank selections.

 * Must be called with data->lock held.

 * nr is from 0 to 7

 Clear fan alarm bits */

/*

 * The 2 LSB of fan speed registers are used for something different.

 * The actual 2 LSB of the measurements are not available.

 The 2 LSB of the fan speed limit registers are not significant. */

/*

 * PWM registers and conversions

/*

 * Dedicated function to read all registers related to a given PWM output.

 * This saves us quite a few locks and bank selections.

 * Must be called with data->lock held.

 * nr is from 0 to 3

/*

 * Temperature registers and conversions

/*

 * Dedicated function to read all registers related to a given temperature

 * input. This saves us quite a few locks and bank selections.

 * Must be called with data->lock held.

 * nr is from 0 to 5

 Clear fan alarm bits */

/*

 * We assume 8-bit thermal sensors; 9-bit thermal sensors are possible

 * too, but I have no idea how to figure out when they are used.

/*

 * Data interface

 Fans */

 PWM outputs */

 Temperature channels */

	/*

	 * The low speed limit registers are read-only while monitoring

	 * is enabled, so we have to disable monitoring, then change the

	 * limit, and finally enable monitoring again.

/*

 * Must be called with data->lock held and pc87427_readall_pwm() freshly

 * called

 Can't go to automatic mode if it isn't configured */

 We may have to change the mode */

 Transition from Manual to Off */

 Transition from Off to Manual */

/*

 * Device detection, attach and detach

 The FMC module should be ready */

 Check which fans are enabled */

 Not wired */

 Not wired */

 Check which PWM outputs are enabled */

 Not wired */

		/*

		 * We don't expose an interface to reconfigure the automatic

		 * fan control mode, so only allow to return to this mode if

		 * it was originally set.

 The HMC module should be ready */

 Check which temperature channels are enabled */

 Register sysfs hooks */

 Identify device */

 PC87427 */

 Select logical device */

 No point in loading the driver if everything is disabled */

 Check which fan inputs are wired */

 FANIN2, FANIN3 */

 FANIN0 */

 FANIN4 */

 FANIN1 */

 FANIN7 */

 FANIN5 */

 FANIN6 */

 Check which fan outputs are wired */

 FANOUT0 */

 FANOUT3 */

 FANOUT1 */

 FANOUT2 */

 FANOUT1 and FANOUT2 can each be routed to 2 different pins */

 FANOUT1 */

 FANOUT2 */

 Sets global pdev as a side effect */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Texas Instruments TMP102 SMBus temperature sensor driver

 *

 * Copyright (C) 2010 Steven King <sfking@fdwdc.com>

 note: these bit definitions are byte swapped */

 in milli-seconds */

 convert left adjusted 13-bit TMP102 register value to milliCelsius */

 convert milliCelsius to left adjusted 13-bit TMP102 register value */

 Is it too early to return a conversion ? */

	/*

	 * Mark that we are not ready with data until the first

	 * conversion is complete

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * HWMON Driver for Dialog DA9055

 *

 * Copyright(c) 2012 Dialog Semiconductor Ltd.

 *

 * Author: David Dajun Chen <dchen@diasemi.com>

 Selects desired MUX for manual conversion */

 Wait for an interrupt */

 Conversion function for VSYS and ADCINx */

	/*

	 * Degrees celsius = -0.4084 * (ADC_RES - T_OFFSET) + 307.6332

	 * T_OFFSET is a trim value used to improve accuracy of the result

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for +/-1 degree C, SMBus-Compatible Remote/Local Temperature Sensor

 * with Overtemperature Alarm

 *

 * Copyright (C) 2011 AppearTV AS

 *

 * Derived from:

 *

 *  Based on the max1619 driver.

 *  Copyright (C) 2003-2004 Oleksij Rempel <bug-track@fisher-privat.net>

 *                          Jean Delvare <jdelvare@suse.de>

 *

 * The MAX6642 is a sensor chip made by Maxim.

 * It reports up to two temperatures (its own plus up to

 * one external one). Complete datasheet can be

 * obtained from Maxim's website at:

 *   http://datasheets.maxim-ic.com/en/ds/MAX6642.pdf

/*

 * The MAX6642 registers

/*

 * Conversions

/*

 * Client data (each client gets its own)

 zero until following fields are valid */

 in jiffies */

 registers values */

 local/remote */

 local/remote */

/*

 * Real code

	/*

	 * Start the conversions.

 run */

 Return 0 if detection is successful, -ENODEV otherwise */

 identification */

 sanity check */

	/*

	 * We read the config and status register, the 4 lower bits in the

	 * config register should be zero and bit 5, 3, 1 and 0 should be

	 * zero in the status register.

 in between, another round of sanity checks */

/*

 * Sysfs stuff

 Initialize the MAX6642 chip */

/*

 * Driver data (common to all clients)

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * asc7621.c - Part of lm_sensors, Linux kernel modules for hardware monitoring

 * Copyright (c) 2007, 2010 George Joseph  <george.joseph@fairview5.com>

 Addresses to scan */

/*

 * Defines the highest register to be used, not the count.

 * The actual count will probably be smaller because of gaps

 * in the implementation (unused register locations).

 * This define will safely set the array size of both the parameter

 * and data arrays.

 * This comes from the data sheet register description table.

 true if following fields are valid */

 In jiffies */

 In jiffies */

	/*

	 * Registers we care about occupy the corresponding index

	 * in the array.  Registers we don't care about are left

	 * at 0.

/*

 * Macro to get the parent asc7621_param structure

 * from a sensor_device_attribute passed into the

 * show/store functions.

/*

 * Each parameter to be retrieved needs an asc7621_param structure

 * allocated.  It contains the sensor_device_attribute structure

 * and the control info needed to retrieve the value from the register map.

/*

 * This is the map that ultimately indicates whether we'll be

 * retrieving a register value or not, and at what frequency.

/*

 * Data Handlers

 * Each function handles the formatting, storage

 * and retrieval of like parameters.

/*

 * u8 is just what it sounds like...an unsigned byte with no

 * special formatting.

/*

 * Many of the config values occupy only a few bits of a register.

/*

 * 16 bit fan rpm values

 * reported by the device as the number of 11.111us periods (90khz)

 * between full fan rotations.  Therefore...

 * RPM = (90000 * 60) / register value

	/*

	 * If a minimum RPM of zero is requested, then we set the register to

	 * 0xffff. This value allows the fan to be stopped completely without

	 * generating an alarm.

/*

 * Voltages are scaled in the device so that the nominal voltage

 * is 3/4ths of the 0-255 range (i.e. 192).

 * If all voltages are 'normal' then all voltage registers will

 * read 0xC0.

 *

 * The data sheet provides us with the 3/4 scale value for each voltage

 * which is stored in in_scaling.  The sda->index parameter value provides

 * the index into in_scaling.

 *

 * NOTE: The chip expects the first 2 inputs be 2.5 and 2.25 volts

 * respectively. That doesn't mean that's what the motherboard provides. :)

 The LSB value is a 2-bit scaling of the MSB's LSbit value. */

 8 bit voltage values (the mins and maxs) */

/*

 * Temperatures that occupy 2 bytes always have the whole

 * number of degrees in the MSB with some part of the LSB

 * indicating fractional degrees.

   mmmmmmmm.llxxxxxx */

   mmmmmm.ll */

/*

 * The aSC7621 doesn't provide an "auto_point2".  Instead, you

 * specify the auto_point1 and a range.  To keep with the sysfs

 * hwmon specs, we synthesize the auto_point_2 from them.

/*

 * End of data handlers

 *

 * These defines do nothing more than make the table easier

 * to read when wrapped at column 80.

/*

 * Creates a variable length array inititalizer.

 * VAA(1,3,5,7) would produce {1,3,5,7}

/*

 * PWRITEM assumes that the initializers for the .msb, .lsb, .mask and .shift

 * were created using the VAA macro.

/*

 * The asc7621 chips guarantee consistent reads of multi-byte values

 * regardless of the order of the reads.  No special logic is needed

 * so we can just read the registers in whatever  order they appear

 * in the asc7621_params array.

 Read all the high priority registers */

 last_reading */

 Read all the low priority registers. */

 last_reading */

/*

 * Standard detection and initialization below

 *

 * Helper function that checks if an address is valid

 * for a particular chip.

 Warn if part was not "READY" */

/*

 * Start monitoring

 *

 * Try to clear LOCK, Set START, save everything else

 Initialize the asc7621 chip */

 Create the sysfs entries */

/*

 * Collect all the registers needed into a single array.

 * This way, if a register isn't actually used for anything,

 * we don't retrieve it.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * An hwmon driver for the Analog Devices AD7414

 *

 * Copyright 2006 Stefan Roese <sr at denx.de>, DENX Software Engineering

 *

 * Copyright (c) 2008 PIKA Technologies

 *   Sean MacLennan <smaclennan@pikatech.com>

 *

 * Copyright (c) 2008 Spansion Inc.

 *   Frank Edelhaeuser <frank.edelhaeuser at spansion.com>

 *   (converted to "new style" I2C driver model, removed checkpatch.pl warnings)

 *

 * Based on ad7418.c

 * Copyright 2006 Tower Technologies, Alessandro Zummo <a.zummo at towertech.it>

 AD7414 registers */

 atomic read data updates */

 true if following fields are valid */

 In jiffies */

 Register values */

 REG: (0.25C/bit, two's complement) << 6 */

	/*

	 * use integer division instead of equivalent right shift to

	 * guarantee arithmetic shift and preserve the sign

 Make sure the chip is powered up. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * adm1031.c - Part of lm_sensors, Linux kernel modules for hardware

 *	       monitoring

 * Based on lm75.c and lm85.c

 * Supports adm1030 / adm1031

 * Copyright (C) 2004 Alexandre d'Alton <alex@alexdalton.org>

 * Reworked by Jean Delvare <jdelvare@suse.de>

 Following macros takes channel parameter starting from 0 to 2 */

 Monitoring enable */

 PWM Invert */

 Auto FAN */

 Addresses to scan */

 Each client has this additional data */

 true if following fields are valid */

 In jiffies */

 In milliseconds */

	/*

	 * The chan_select_table contains the possible configurations for

	 * auto fan control.

 oldh is actually newer */

 FAN auto control */

/*

 * The tables below contains the possible values for the auto fan

 * control bitfields. the index in the table is the register value.

 * MSb is the auto fan control enable bit, so the four first entries

 * in the table disables auto fan control when both bitfields are zero.

 0b010 */ , 4 
 0b010 */ , 2 
 0b100 */ , 4 
 0b111 */ , 7 
 0b10 */		, 0 },

 invalid */	, 0 },

 invalid */	, 0 },

 0b11 */		, 0 },

/*

 * That function checks if a bitfield is valid and returns the other bitfield

 * nearest match if no exact match where found.

 We found an exact match */

			/*

			 * Save the first match in case of an exact match has

			 * not been found

			/*

			 * Switch to Auto Fan Mode

			 * Save PWM registers

			 * Set PWM registers to 33% Both

 Switch to Manual Mode */

 Restore PWM registers */

 Auto Temps */

 pwm */

 In automatic mode, the only PWM accepted is 33% */

 Fans */

/*

 * That function checks the cases where the fan reading is not

 * relevant.  It is used to provide 0 as fan reading when the fan is

 * not supposed to run

			/*

			 * remote temp1 controls fan1,

			 * remote temp2 controls fan2

 remote temp1 controls both fans */

 remote temp2 controls both fans */

 max controls both fans */

 Get fresh readings */

 Write the new clock divider and fan min */

 Invalidate the cache: fan speed is no longer valid */

 Temps */

 Alarms */

 Update Interval */

	/*

	 * Find the nearest update interval from the table.

	 * Use it to determine the matching update rate.

 if not found, we point to the last entry (lowest update interval) */

 set the new update rate while preserving other settings */

 Return 0 if detection is successful, -ENODEV otherwise */

 Initialize the ADM1031 chip (enables fan speed reading ) */

 Read the chip's update rate */

 Save it as update interval */

 Initialize the ADM1031 chip */

 sysfs hooks */

 SPDX-License-Identifier: GPL-2.0

/*

 * Analog Devices LTC2947 high precision power and energy monitor

 *

 * Copyright 2019 Analog Devices Inc.

 register's */

 200Khz */

 25Mhz */

 Voltage registers */

 in mV */

 Current registers */

 in mA */

 Power registers */

 in uW */

 Temperature registers */

 in millidegress Celsius */

 Energy registers */

 Status/Alarm/Overflow registers */

	/*

	 * The mutex is needed because the device has 2 memory pages. When

	 * reading/writing the correct page needs to be set so that, the

	 * complete sequence select_page->read/write needs to be protected.

 set device on correct page */

	/*

	 * let's reset the tracking register's. Tracking register's have all

	 * 2 bytes size

 +1 to include status reg */

	/*

	 * As stated in the datasheet, when Threshold and Overflow registers

	 * are used, the status and all alert registers must be read in one

	 * multi-byte transaction.

 get the alarm */

 value in microJoule. st->lsb_energy was multiplied by 10E9 */

 in milidegrees celcius, temp is given by: */

 in uW */

 in mA */

 in mV */

 energy attributes are 6bytes wide so we need u64 */

 clear status register by reading it */

	/*

	 * Set max/min for power here since the default values x scale

	 * would overflow on 32bit arch

 check external clock presence */

 let's calculate and set the right valus in TBCTL */

 as in table 1 of the datasheet */

		/*

		 * Div is given by:

		 *	floor(fref / (2^PRE * 32768))

		/*

		 * The energy lsb is given by (in W*s):

		 *      06416 * (1/fref) * 2^PRE * (DIV + 1)

		 * The value is multiplied by 10E9

 19.89E-6 * 10E9 */

 the LSB is the same as the current, so 3mA */

 check gpio cfg */

 setup GPIO as output */

		/*

		 * Setup the accum options. The gpioctl is already defined as

		 * input by default.

 set continuos mode */

 dummy read to wake the device */

	/*

	 * Wait for the device. It takes 100ms to wake up so, 10ms extra

	 * should be enough.

 ctrl should be 0 */

 set continuous mode */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max6650.c - Part of lm_sensors, Linux kernel modules for hardware

 *             monitoring.

 *

 * (C) 2007 by Hans J. Koch <hjk@hansjkoch.de>

 *

 * based on code written by John Morris <john.morris@spirentcom.com>

 * Copyright (c) 2003 Spirent Communications

 * and Claus Gindhart <claus.gindhart@kontron.com>

 *

 * This module has only been tested with the MAX6650 chip. It should

 * also work with the MAX6651. It does not distinguish max6650 and max6651

 * chips.

 *

 * The datasheet was last seen at:

 *

 *        http://pdfserv.maxim-ic.com/en/ds/MAX6650-MAX6651.pdf

/*

 * Insmod parameters

 fan_voltage: 5=5V fan, 12=12V fan, 0=don't change */

 prescaler: Possible values are 1, 2, 4, 8, 16 or 0 for don't change */

 clock: The clock frequency of the chip (max6651 can be clocked externally) */

/*

 * MAX 6650/6651 registers

/*

 * Config register bits

/*

 * Alarm status register bits

 Minimum and maximum values of the FAN-RPM */

/*

 * Client data (each client gets its own)

 protect alarm register updates */

 false until following fields are valid */

 in jiffies */

 register values */

	/*

	 * Useful range for dac is 0-180 for 12V fans and 0-76 for 5V fans.

	 * Lower DAC values mean higher speeds.

		/*

		 * Alarms are cleared on read in case the condition that

		 * caused the alarm is removed. Keep the value latched here

		 * for providing the register through different alarm files.

/*

 * Change the operating mode of the chip (if needed).

 * mode is one of the MAX6650_CFG_MODE_* values.

/*

 * Set the fan speed to the specified RPM (or read back the RPM setting).

 * This works in closed loop mode only. Use pwm1 for open loop speed setting.

 *

 * The MAX6650/1 will automatically control fan speed when in closed loop

 * mode.

 *

 * Assumptions:

 *

 * 1) The MAX6650/1 internal 254kHz clock frequency is set correctly. Use

 *    the clock module parameter if you need to fine tune this.

 *

 * 2) The prescaler (low three bits of the config register) has already

 *    been set to an appropriate value. Use the prescaler module parameter

 *    if your BIOS doesn't initialize the chip properly.

 *

 * The relevant equations are given on pages 21 and 22 of the datasheet.

 *

 * From the datasheet, the relevant equation when in regulation is:

 *

 *    [fCLK / (128 x (KTACH + 1))] = 2 x FanSpeed / KSCALE

 *

 * where:

 *

 *    fCLK is the oscillator frequency (either the 254kHz internal

 *         oscillator or the externally applied clock)

 *

 *    KTACH is the value in the speed register

 *

 *    FanSpeed is the speed of the fan in rps

 *

 *    KSCALE is the prescaler value (1, 2, 4, 8, or 16)

 *

 * When reading, we need to solve for FanSpeed. When writing, we need to

 * solve for KTACH.

 *

 * Note: this tachometer is completely separate from the tachometers

 * used to measure the fan speeds. Only one fan's speed (fan1) is

 * controlled.

	/*

	 * Divide the required speed by 60 to get from rpm to rps, then

	 * use the datasheet equation:

	 *

	 *     KTACH = [(fCLK x KSCALE) / (256 x FanSpeed)] - 1

/*

 * Get gpio alarm status:

 * Possible values:

 * 0 = no alarm

 * 1 = alarm

	/*

	 * Hide the alarms that have not been enabled by the firmware

 Microvolts to volts */

			/*

			 * Possible values:

			 * 0 = Fan always on

			 * 1 = Open loop, Voltage is set according to speed,

			 *     not regulated.

			 * 2 = Closed loop, RPM for all fans regulated by fan1

			 *     tachometer

			 * 3 = Fan off

 {0 1 2 3} -> {0 3 2 1} */

			/*

			 * Calculation details:

			 *

			 * Each tachometer counts over an interval given by the

			 * "count" register (0.25, 0.5, 1 or 2 seconds).

			 * The driver assumes that the fans produce two pulses

			 * per revolution (this seems to be the most common).

			/*

			 * Use the datasheet equation:

			 *    FanSpeed = KSCALE x fCLK / [256 x (KTACH + 1)]

			 * then multiply by 60 to give rpm.

	/*

	 * Initialize the max6650 chip

 SPDX-License-Identifier: GPL-2.0-or-later

/* tmp401.c

 *

 * Copyright (C) 2007,2008 Hans de Goede <hdegoede@redhat.com>

 * Preliminary tmp411 support by:

 * Gabriel Konat, Sander Leget, Wouter Willems

 * Copyright (C) 2009 Andre Prendel <andre.prendel@gmx.de>

 *

 * Cleanup and support for TMP431 and TMP432 by Guenter Roeck

 * Copyright (c) 2013 Guenter Roeck <linux@roeck-us.net>

/*

 * Driver for the Texas Instruments TMP401 SMBUS temperature sensor IC.

 *

 * Note this IC is in some aspect similar to the LM90, but it has quite a

 * few differences too, for example the local temp has a higher resolution

 * and thus has 16 bits registers for its value and limit instead of 8 bits.

 Addresses to scan */

/*

 * The TMP401 registers, note some registers have different addresses for

 * reading and writing

 temp */

 low limit */

 high limit */

 therm (crit) limit */

 lowest */

 highest */

 temp (unused) */

 low limit */

 high limit */

 therm (crit) limit */

 lowest */

 highest */

 temp */

 low limit */

 high limit */

 therm (crit) limit */

 temp  - unused */

 low limit */

 high limit */

 therm (crit) limit */

 [0] = fault, [1] = low, [2] = high, [3] = therm/crit */

 Flags */

 On TMP432, each status has its own register */

 Manufacturer / Device ID's */

/*

 * Driver data (common to all clients)

/*

 * Client data (each client gets its own)

 false until following fields are valid */

 in jiffies */

 in milliseconds */

 register values */

/*

 * Sysfs attr show / store functions

 local / r1 / r2 */

 temp / low / ... */

 crit is msb only */

			/*

			 * The driver uses the TMP432 status format internally.

			 * Convert status to TMP432 format for other chips.

 crit is msb only */

 Hardware expects big endian data --> use _swapped */

/*

 * Resets the historical measurements of minimum and maximum temperatures.

 * This is done by writing any value to any of the minimum/maximum registers

 * (0x30-0x37).

	/*

	 * For valid rates, interval can be calculated as

	 *	interval = (1 << (7 - rate)) * 125;

	 * Rounded rate is therefore

	 *	rate = 7 - __fls(interval * 4 / (125 * 3));

	 * Use clamp_val() to avoid overflows, and to ensure valid input

	 * for __fls.

/*

 * Additional features of the TMP411 chip.

 * The TMP411 stores the minimum and maximum

 * temperature measured since power-on, chip-reset, or

 * minimum and maximum register reset for both the local

 * and remote channels.

/*

 * Begin non sysfs callback code (aka Real code)

 Set the conversion rate to 2 Hz */

 Start conversions (disable shutdown if necessary) */

 Detect and identify the chip */

 Datasheet says: 0x1-0x6 */

 Initialize the TMP401 chip */

 Register sysfs hooks */

 Register additional tmp411 sysfs hooks */

 Register additional tmp432 sysfs hooks */

 SPDX-License-Identifier: GPL-2.0

/*

 * Lochnagar hardware monitoring features

 *

 * Copyright (c) 2016-2019 Cirrus Logic, Inc. and

 *                         Cirrus Logic International Semiconductor Ltd.

 *

 * Author: Lucas Tanure <tanureal@opensource.cirrus.com>

 Lock to ensure only a single sensor is read at a time */

/**

 * float_to_long - Convert ieee754 reading from hardware to an integer

 *

 * @data: Value read from the hardware

 * @precision: Units to multiply up to eg. 1000 = milli, 1000000 = micro

 *

 * Return: Converted integer reading

 *

 * Depending on the measurement type the hardware returns an ieee754

 * floating point value in either volts, amps or celsius. This function

 * will convert that into an integer in a smaller unit such as micro-amps

 * or milli-celsius. The hardware does not return NaN, so consideration of

 * that is not required.

	/*

	 * Actual measurement time is ~1.67mS per sample, approximate this

	 * with a 1.5mS per sample msleep and then poll for success up to

	 * ~0.17mS * 1023 (LN2_MAX_NSAMPLES). Normally for smaller values

	 * of nsamples the poll will complete on the first loop due to

	 * other latency in the system.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * corsair-psu.c - Linux driver for Corsair power supplies with HID sensors interface

 * Copyright (C) 2020 Wilken Gottwalt <wilken.gottwalt@posteo.net>

/*

 * Corsair protocol for PSUs

 *

 * message size = 64 bytes (request and response, little endian)

 * request:

 *	[length][command][param0][param1][paramX]...

 * reply:

 *	[echo of length][echo of command][data0][data1][dataX]...

 *

 *	- commands are byte sized opcodes

 *	- length is the sum of all bytes of the commands/params

 *	- the micro-controller of most of these PSUs support concatenation in the request and reply,

 *	  but it is better to not rely on this (it is also hard to parse)

 *	- the driver uses raw events to be accessible from userspace (though this is not really

 *	  supported, it is just there for convenience, may be removed in the future)

 *	- a reply always start with the length and command in the same order the request used it

 *	- length of the reply data is specific to the command used

 *	- some of the commands work on a rail and can be switched to a specific rail (0 = 12v,

 *	  1 = 5v, 2 = 3.3v)

 *	- the format of the init command 0xFE is swapped length/command bytes

 *	- parameter bytes amount and values are specific to the command (rail setting is the only

 *	  for now that uses non-zero values)

 *	- there are much more commands, especially for configuring the device, but they are not

 *	  supported because a wrong command/length can lockup the micro-controller

 *	- the driver supports debugfs for values not fitting into the hwmon class

 *	- not every device class (HXi, RMi or AXi) supports all commands

 *	- it is a pure sensors reading driver (will not support configuring)

 max length of a reply to a single command */

 3v3 + 5v + 12v */

 expects length 2 */

 the rest of the commands expect length 3 */

 for locking access to cmd_buffer */

 not all commands are supported on every PSU */

 some values are SMBus LINEAR11 data which need a conversion */

	/*

	 * at the start of the reply is an echo of the send command/length in the same order it

	 * was send, not every command is supported on every device class, if a command is not

	 * supported, the length value in the reply is okay, but the command value is set to 0

	/*

	 * PSU_CMD_INIT uses swapped length/command and expects 2 parameter bytes, this command

	 * actually generates a reply, but we don't need it

	/*

	 * the biggest value here comes from the uptime command and to exceed MAXINT total uptime

	 * needs to be about 68 years, the rest are u16 values and the biggest value coming out of

	 * the LINEAR11 conversion are the watts values which are about 1200 for the strongest psu

	 * supported (HX1200i)

 some PSUs turn off the microcontroller during standby, so a reinit is required */

 Corsair HX550i */

 Corsair HX650i */

 Corsair HX750i */

 Corsair HX850i */

 Corsair HX1000i */

 Corsair HX1200i */

 Corsair RM550i */

 Corsair RM650i */

 Corsair RM750i */

 Corsair RM850i */

 Corsair RM1000i */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Honeywell HIH-6130/HIH-6131 humidity and temperature sensor driver

 *

 * Copyright (C) 2012 Iain Paton <ipaton0@gmail.com>

 *

 * heavily based on the sht21 driver

 * Copyright (C) 2010 Urs Fleisch <urs.fleisch@sensirion.com>

 *

 * Data sheets available (2012-06-22) at

 * http://sensing.honeywell.com/index.php?ci_id=3106&la_id=1&defId=44872

/**

 * struct hih6130 - HIH-6130 device specific data

 * @client: pointer to I2C client device

 * @lock: mutex to protect measurement values

 * @valid: only false before first measurement is taken

 * @last_update: time of last update (jiffies)

 * @temperature: cached temperature measurement value

 * @humidity: cached humidity measurement value

 * @write_length: length for I2C measurement request

/**

 * hih6130_temp_ticks_to_millicelsius() - convert raw temperature ticks to

 * milli celsius

 * @ticks: temperature ticks value received from sensor

	/*

	 * from data sheet section 5.0

	 * Formula T = ( ticks / ( 2^14 - 2 ) ) * 165 -40

/**

 * hih6130_rh_ticks_to_per_cent_mille() - convert raw humidity ticks to

 * one-thousandths of a percent relative humidity

 * @ticks: humidity ticks value received from sensor

 clear status bits */

	/*

	 * from data sheet section 4.0

	 * Formula RH = ( ticks / ( 2^14 -2 ) ) * 100

/**

 * hih6130_update_measurements() - get updated measurements from device

 * @dev: device

 *

 * Returns 0 on success, else negative errno.

	/*

	 * While the measurement can be completed in ~40ms the sensor takes

	 * much longer to react to a change in external conditions. How quickly

	 * it reacts depends on airflow and other factors outwith our control.

	 * The datasheet specifies maximum 'Response time' for humidity at 8s

	 * and temperature at 30s under specified conditions.

	 * We therefore choose to only read the sensor at most once per second.

	 * This trades off pointless activity polling the sensor much faster

	 * than it can react against better response times in conditions more

	 * favourable than specified in the datasheet.

		/*

		 * Write to slave address to request a measurement.

		 * According with the datasheet it should be with no data, but

		 * for systems with I2C bus drivers that do not allow zero

		 * length packets we write one dummy byte to allow sensor

		 * measurements on them.

 measurement cycle time is ~36.65msec */

/**

 * hih6130_show_temperature() - show temperature measurement value in sysfs

 * @dev: device

 * @attr: device attribute

 * @buf: sysfs buffer (PAGE_SIZE) where measurement values are written to

 *

 * Will be called on read access to temp1_input sysfs attribute.

 * Returns number of bytes written into buffer, negative errno on error.

/**

 * hih6130_show_humidity() - show humidity measurement value in sysfs

 * @dev: device

 * @attr: device attribute

 * @buf: sysfs buffer (PAGE_SIZE) where measurement values are written to

 *

 * Will be called on read access to humidity1_input sysfs attribute.

 * Returns number of bytes written into buffer, negative errno on error.

 sysfs attributes */

 Device ID table */

 SPDX-License-Identifier: GPL-2.0-or-later

/***************************************************************************

 *   Copyright (C) 2010-2012 Hans de Goede <hdegoede@redhat.com>           *

 *                                                                         *

 We only support one model */

 In jiffies */

 !=0 if following fields are valid */

 In jiffies */

 Cache the values for 1 second */

 Cache the values for 1 second */

 Trigger a Vbat voltage measurement every 5 minutes */

 Cache the values for 1 second */

		/*

		 * Note what SMSC calls ABS, is what lm_sensors calls max

		 * (aka high), and HIGH is what lm_sensors calls crit.

	/* Trigger a Vbat voltage measurement, so that we get a valid reading

	/*

	 * Read limits, we do this only once as reading a register on

	 * the sch5627 is quite expensive (and they don't change).

 Note failing to register the watchdog is not a fatal error */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ultra45_env.c: Driver for Ultra45 PIC16F747 environmental monitor.

 *

 * Copyright (C) 2008 David S. Miller <davem@davemloft.net>

 PIC device registers */

 Registers accessed indirectly via REG_DATA/REG_ADDR */

/*

 * There seems to be a adr7462 providing these values, thus a lot

 * of these calculations are borrowed from the adt7470 driver.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max6639.c - Support for Maxim MAX6639

 *

 * 2-Channel Temperature Monitor with Dual PWM Fan-Speed Controller

 *

 * Copyright (C) 2010, 2011 Roland Stigge <stigge@antcom.de>

 *

 * based on the initial MAX6639 support from semptian.net

 * by He Changqing <hechangqing@semptian.com>

 Addresses to scan */

 The MAX6639 registers, valid channel numbers: 0, 1 */

 Register bits */

/*

 * Client data (each client gets its own)

 true if following fields are valid */

 In jiffies */

 Register values sampled regularly */

 Temperature, in 1/8 C, 0..255 C */

 Detected temperature diode failure */

 Register value: TACH count for fans >=30 */

 Detected channel alarms and fan failures */

 Register values only written to */

 Register value: Duty cycle 0..120 */

 THERM Temperature, 0..255 C (->_max) */

 ALERT Temperature, 0..255 C (->_crit) */

 OT Temperature, 0..255 C (->_emergency) */

 Register values initialized only once */

 Pulses per rotation 0..3 for 1..4 ppr */

 Index in above rpm_ranges table */

/*

 *  returns respective index in rpm_ranges table

 *  1 by default on invalid range

 default: 4000 RPM */

 default: 4000 RPM */

 Reset chip to default values, see below for GCONFIG setup */

 Fans pulse per revolution is 2 by default */

 Set Fan pulse per revolution */

 Fans config PWM, RPM */

 Fans PWM polarity high by default */

		/*

		 * /THERM full speed enable,

		 * PWM frequency 25kHz, see also GCONFIG below

 Max. temp. 80C/90C/100C */

 PWM 120/120 (i.e. 100%) */

 Start monitoring */

 Return 0 if detection is successful, -ENODEV otherwise */

 Actual detection via device and manufacturer ID */

 Initialize the max6639 chip */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ADT7310/ADT7310 digital temperature sensor driver

 *

 * Copyright 2012-2013 Analog Devices Inc.

 *   Author: Lars-Peter Clausen <lars@metafoo.de>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Texas Instruments TMP103 SMBus temperature sensor driver

 * Copyright (C) 2014 Heiko Schocher <hs@denx.de>

 *

 * Based on:

 * Texas Instruments TMP102 SMBus temperature sensor driver

 *

 * Copyright (C) 2010 Steven King <sfking@fdwdc.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * emc6w201.c - Hardware monitoring driver for the SMSC EMC6W201

 * Copyright (C) 2011  Jean Delvare <jdelvare@suse.de>

/*

 * Addresses to scan

/*

 * The EMC6W201 registers

/*

 * Per-device data

 false until following fields are valid */

 in jiffies */

 registers values */

/*

 * Combine LSB and MSB registers in a single value

 * Locking: must be called with data->update_lock held

 Arbitrary value */

/*

 * Write 16-bit value to LSB and MSB registers

 * Locking: must be called with data->update_lock held

 Read 8-bit value from register */

 Arbitrary value */

 Write 8-bit value to register */

/*

 * Sysfs callback functions

/*

 * Driver interface

 Return 0 if detection is successful, -ENODEV otherwise */

 Identification */

 Check configuration */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for MAX31730 3-Channel Remote Temperature Sensor

 *

 * Copyright (c) 2019 Guenter Roeck <linux@roeck-us.net>

 Addresses scanned */

 The MAX31730 registers */

 Each client has this additional data */

-----------------------------------------------------------------------*/

 Cache original configuration and enable status */

 Return 0 if detection is successful, -ENODEV otherwise */

 lower 4 bit of temperature and limit registers must be 0 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * adt7475 - Thermal sensor driver for the ADT7475 chip and derivatives

 * Copyright (C) 2007-2008, Advanced Micro Devices, Inc.

 * Copyright (C) 2008 Jordan Crouse <jordan@cosmicpenguin.net>

 * Copyright (C) 2008 Hans de Goede <hdegoede@redhat.com>

 * Copyright (C) 2009 Jean Delvare <jdelvare@suse.de>

 *

 * Derived from the lm83 driver by Jean Delvare

 Indexes for the sysfs hooks */

/*

 * These are unique identifiers for the sysfs functions - unlike the

 * numbers above, these are not also indexes into an array

 7475 Common Registers */

 ADT7490 only */

 ADT7490 only */

 ADT7490 only */

 ADT7476 only */

 ADT7490 only */

 ADT7490 only */

 ADT7490 only */

 ADT7476 only */

 ADT7476 only */

 ADT7475 Settings */

 Not counting Vtt */

 Macro to read the registers */

 Macros to easily index the registers */

 Bypass voltage attenuator */

 Given a temp value, convert it to register value */

 Given a register value, convert it to a real temp value */

 Scaling factors for voltage inputs, taken from the ADT7490 datasheet */

 +2.5V */

 Vccp */

 Vcc */

 +5V */

 +12V */

 Vtt */

		/*

		 * Show the value as an absolute number tied to

		 * THERM

		/*

		 * Offset is always 2's complement, regardless of the

		 * setting in CONFIG5

 Note - only for remote1 and remote2 */

 All other temp values are in the configured format */

 We need the config register in all cases for temp <-> reg conv. */

		/*

		 * The value will be given as an absolute value, turn it

		 * into an offset based on THERM

 Read fresh THERM and HYSTERSIS values from the chip */

		/*

		 * We maintain an extra 2 digits of precision for simplicity

		 * - shift those back off before writing the value

 Assuming CONFIG6[SLOW] is 0 */

/*

 * Table of autorange values - the user will write the value in millidegrees,

 * and we'll convert it

 Get a fresh copy of the needed registers */

	/*

	 * The user will write an absolute value, so subtract the start point

	 * to figure the range

 Find the nearest table entry to what the user wrote */

 Get a fresh value for CONTROL */

		/*

		 * If we are not in manual mode, then we shouldn't allow

		 * the user to set the pwm speed

 Called by set_pwmctrl and set_pwmchan */

 Run at full speed */

 Manual mode */

 Remote1 controls PWM */

 local controls PWM */

 remote2 controls PWM */

 local/remote2 control PWM */

 All three control PWM */

 Read Modify Write PWM values */

 Read Modify Write PWM values */

 List of frequencies for the PWM */

 Non-standard name, might need revisiting */

 Analog Devices */

 Adjust values so they match the input precision */

 Adjust values so they match the input precision */

 Set the channel and control information */

 Initialize device-specific values */

 in1 to in3 */

 in1 to in5 */

 in1, in2 */

 Pin PWM2 may alternatively be used for ALERT output */

 Meaning of this bit is inverted for the ADT7473-1 */

 Pin TACH4 may alternatively be used for THERM */

	/*

	 * THERM configuration is more complex on the ADT7476 and ADT7490,

	 * because 2 different pins (TACH4 and +2.5 Vin) can be used for

	 * this function

 in0 */

	/*

	 * On the ADT7476, the +12V input pin may instead be used as VID5,

	 * and VID pins may alternatively be used as GPIO

 in4 */

 Voltage attenuators can be bypassed, globally or individually */

	/*

	 * Call adt7475_read_pwm for all pwm's as this will reprogram any

	 * pwm's which are disabled to manual mode with 0% duty cycle

 Start monitoring */

 Features that can be disabled individually */

 register device with all the acquired attributes */

 Limits and settings, should never change update more than once */

	/*

	 * Figure out the internal value for pwmctrl and pwmchan

	 * based on the current settings

		/*

		 * The fan is disabled - we don't want to

		 * support that, so change to manual mode and

		 * set the duty cycle to 0 instead

 Updated by hw when in auto mode */

 Measurement values update every 2 seconds */

 SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)

/*

 * LTC2992 - Dual Wide Range Power Monitor

 *

 * Copyright 2020 Analog Devices Inc.

 CTRLB register bitfields */

 FAULT1 FAULT2 registers common bitfields */

 FAULT1 bitfields */

 FAULT2 bitfields */

 FAULT3 bitfields */

 lock for gpio access */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Linear Technology LTC4261 I2C Negative Voltage Hot Swap Controller

 *

 * Copyright (C) 2010 Ericsson AB.

 *

 * Derived from:

 *

 *  Driver for Linear Technology LTC4245 I2C Multiple Supply Hot Swap Controller

 *  Copyright (C) 2008 Ira W. Snyder <iws@ovro.caltech.edu>

 *

 * Datasheet: http://cds.linear.com/docs/Datasheet/42612fb.pdf

 chip registers */

 readonly */

/*

 * Fault register bits

 in jiffies */

 Registers */

 Read registers -- 0x00 to 0x09 */

 Return the voltage from the given register in mV or mA */

 2.5mV resolution. Convert to mV. */

		/*

		 * 62.5uV resolution. Convert to current as measured with

		 * an 1 mOhm sense resistor, in mA. If a different sense

		 * resistor is installed, calculate the actual current by

		 * dividing the reported current by the sense resistor value

		 * in mOhm.

 If we get here, the developer messed up */

 Clear reported faults in chip register */

/*

 * Input voltages.

/*

 * Voltage alarms. The chip has only one set of voltage alarm status bits,

 * triggered by input voltage alarms. In many designs, those alarms are

 * associated with the ADIN2 sensor, due to the proximity of the ADIN2 pin

 * to the OV pin. ADIN2 is, however, not available on all chip variants.

 * To ensure that the alarm condition is reported to the user, report it

 * with both voltage sensors.

 Currents (via sense resistor) */

 Overcurrent alarm */

 Clear faults */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sl28cpld hardware monitoring driver

 *

 * Copyright 2020 Kontron Europe GmbH

		/*

		 * The register has a 7 bit value and 1 bit which indicates the

		 * scale. If the MSB is set, then the lower 7 bit has to be

		 * multiplied by 8, to get the correct reading.

		/*

		 * The counter period is 1000ms and the sysfs specification

		 * says we should asssume 2 pulses per revolution.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Maxim MAX197 A/D Converter driver

 *

 * Copyright (c) 2012 Savoir-faire Linux Inc.

 *          Vivien Didelot <vivien.didelot@savoirfairelinux.com>

 *

 * For further information, see the Documentation/hwmon/max197.rst file.

 4V */

 10V */

 8 Analog Input Channels */

 Control byte format */

 Bipolarity */

 Full range */

 Scale coefficient for raw data */

 List of supported chips */

/**

 * struct max197_data - device instance specific data

 * @pdata:		Platform data.

 * @hwmon_dev:		The hwmon device.

 * @lock:		Read/Write mutex.

 * @limit:		Max range value (10V for MAX197, 4V for MAX199).

 * @scale:		Need to scale.

 * @ctrl_bytes:		Channels control byte.

 Function called on read access on in{0,1,2,3,4,5,6,7}_{min,max} */

 Function called on write access on in{0,1,2,3,4,5,6,7}_{min,max} */

 We can deduce only the polarity */

 We can deduce only the range */

 We can deduce only the range */

 Function called on read access on in{0,1,2,3,4,5,6,7}_input */

	/*

	 * Coefficient to apply on raw value.

	 * See Table 1. Full Scale and Zero Scale in the MAX197 datasheet.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * amc6821.c - Part of lm_sensors, Linux kernel modules for hardware

 *	       monitoring

 * Copyright (C) 2009 T. Mertelj <tomaz.mertelj@guest.arnes.si>

 *

 * Based on max6650.c:

 * Copyright (C) 2007 Hans J. Koch <hjk@hansjkoch.de>

 Needed for KERN_INFO */

/*

 * Addresses to scan.

/*

 * Insmod parameters

Inverted PWM output. */

Power-on initialization.*/

/*

 * Client data (each client gets its own)

 false until following fields are valid */

 in jiffies */

 register values */

open loop: software sets pwm1*/

closed loop: remote T (temp2)*/

closed loop: local and remote T (temp2)*/

		case 1: /*

			 * semi-open loop: software sets rpm, chip controls

			 * pwm1, currently not implemented

 Return 0 if detection is successful, -ENODEV otherwise */

	/*

	 * Bit 7 of the address register is ignored, so we can check the

	 * ID registers again

	/*

	 * Initialize the amc6821 chip

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Gateworks System Controller Hardware Monitor module

 *

 * Copyright (C) 2020 Gateworks Corporation

 convert to millidegrees celsius */

 scale based on ref voltage and ADC resolution */

 scale based on optional voltage divider */

 adjust by uV offset */

 convert to revolutions per minute */

 no adjustment needed */

 fan controller base address */

 allocate structures for channels and count instances of each type */

 setup config structures */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020 BAIKAL ELECTRONICS, JSC

 *

 * Authors:

 *   Maxim Kaurkin <maxim.kaurkin@baikalelectronics.ru>

 *   Serge Semin <Sergey.Semin@baikalelectronics.ru>

 *

 * Baikal-T1 Process, Voltage, Temperature sensor driver

/*

 * For the sake of the code simplification we created the sensors info table

 * with the sensor names, activation modes, threshold registers base address

 * and the thresholds bit fields.

/*

 * The original translation formulae of the temperature (in degrees of Celsius)

 * to PVT data and vice-versa are following:

 * N = 1.8322e-8*(T^4) + 2.343e-5*(T^3) + 8.7018e-3*(T^2) + 3.9269*(T^1) +

 *     1.7204e2,

 * T = -1.6743e-11*(N^4) + 8.1542e-8*(N^3) + -1.8201e-4*(N^2) +

 *     3.1020e-1*(N^1) - 4.838e1,

 * where T = [-48.380, 147.438]C and N = [0, 1023].

 * They must be accordingly altered to be suitable for the integer arithmetics.

 * The technique is called 'factor redistribution', which just makes sure the

 * multiplications and divisions are made so to have a result of the operations

 * within the integer numbers limit. In addition we need to translate the

 * formulae to accept millidegrees of Celsius. Here what they look like after

 * the alterations:

 * N = (18322e-20*(T^4) + 2343e-13*(T^3) + 87018e-9*(T^2) + 39269e-3*T +

 *     17204e2) / 1e4,

 * T = -16743e-12*(D^4) + 81542e-9*(D^3) - 182010e-6*(D^2) + 310200e-3*D -

 *     48380,

 * where T = [-48380, 147438] mC and N = [0, 1023].

/*

 * Similar alterations are performed for the voltage conversion equations.

 * The original formulae are:

 * N = 1.8658e3*V - 1.1572e3,

 * V = (N + 1.1572e3) / 1.8658e3,

 * where V = [0.620, 1.168] V and N = [0, 1023].

 * After the optimization they looks as follows:

 * N = (18658e-3*V - 11572) / 10,

 * V = N * 10^5 / 18658 + 11572 * 10^4 / 18658.

/*

 * Here is the polynomial calculation function, which performs the

 * redistributed terms calculations. It's pretty straightforward. We walk

 * over each degree term up to the free one, and perform the redistributed

 * multiplication of the term coefficient, its divider (as for the rationale

 * fraction representation), data power and the rational fraction divider

 * leftover. Then all of this is collected in a total sum variable, which

 * value is normalized by the total divider before being returned.

/*

 * Baikal-T1 PVT mode can be updated only when the controller is disabled.

 * So first we disable it, then set the new mode together with the controller

 * getting back enabled. The same concerns the temperature trim and

 * measurements timeout. If it is necessary the interface mutex is supposed

 * to be locked at the time the operations are performed.

/*

 * This driver can optionally provide the hwmon alarms for each sensor the PVT

 * controller supports. The alarms functionality is made compile-time

 * configurable due to the hardware interface implementation peculiarity

 * described further in this comment. So in case if alarms are unnecessary in

 * your system design it's recommended to have them disabled to prevent the PVT

 * IRQs being periodically raised to get the data cache/alarms status up to

 * date.

 *

 * Baikal-T1 PVT embedded controller is based on the Analog Bits PVT sensor,

 * but is equipped with a dedicated control wrapper. It exposes the PVT

 * sub-block registers space via the APB3 bus. In addition the wrapper provides

 * a common interrupt vector of the sensors conversion completion events and

 * threshold value alarms. Alas the wrapper interface hasn't been fully thought

 * through. There is only one sensor can be activated at a time, for which the

 * thresholds comparator is enabled right after the data conversion is

 * completed. Due to this if alarms need to be implemented for all available

 * sensors we can't just set the thresholds and enable the interrupts. We need

 * to enable the sensors one after another and let the controller to detect

 * the alarms by itself at each conversion. This also makes pointless to handle

 * the alarms interrupts, since in occasion they happen synchronously with

 * data conversion completion. The best driver design would be to have the

 * completion interrupts enabled only and keep the converted value in the

 * driver data cache. This solution is implemented if hwmon alarms are enabled

 * in this driver. In case if the alarms are disabled, the conversion is

 * performed on demand at the time a sensors input file is read.

	/*

	 * DVALID bit will be cleared by reading the data. We need to save the

	 * status before the next conversion happens. Threshold events will be

	 * handled a bit later.

	/*

	 * Then lets recharge the PVT interface with the next sampling mode.

	 * Lock the interface mutex to serialize trim, timeouts and alarm

	 * thresholds settings.

	/*

	 * For some reason we have to mask the interrupt before changing the

	 * mode, otherwise sometimes the temperature mode doesn't get

	 * activated even though the actual mode in the ctrl register

	 * corresponds to one. Then we read the data. By doing so we also

	 * recharge the data conversion. After this the mode corresponding

	 * to the next sensor in the row is set. Finally we enable the

	 * interrupts back.

	/*

	 * We can now update the data cache with data just retrieved from the

	 * sensor. Lock write-seqlock to make sure the reader has a coherent

	 * data.

	/*

	 * While PVT core is doing the next mode data conversion, we'll check

	 * whether the alarms were triggered for the current sensor. Note that

	 * according to the documentation only one threshold IRQ status can be

	 * set at a time, that's why if-else statement is utilized.

 No need in serialization, since it is just read from MMIO. */

 Serialize limit update, since a part of the register is changed. */

 Make sure the upper and lower ranges don't intersect. */

 !CONFIG_SENSORS_BT1_PVT_ALARMS */

	/*

	 * Mask the DVALID interrupt so after exiting from the handler a

	 * repeated conversion wouldn't happen.

	/*

	 * Nothing special for alarm-less driver. Just read the data, update

	 * the cache and notify a waiter of this event.

	/*

	 * Lock PVT conversion interface until data cache is updated. The

	 * data read procedure is following: set the requested PVT sensor

	 * mode, enable IRQ and conversion, wait until conversion is finished,

	 * then disable conversion and IRQ, and read the cached data.

	/*

	 * Unmask the DVALID interrupt and enable the sensors conversions.

	 * Do the reverse procedure when conversion is done.

	/*

	 * Wait with timeout since in case if the sensor is suddenly powered

	 * down the request won't be completed and the caller will hang up on

	 * this procedure until the power is back up again. Multiply the

	 * timeout by the factor of two to prevent a false timeout.

 !CONFIG_SENSORS_BT1_PVT_ALARMS */

 The rest of the types are independent from the channel number. */

	/*

	 * Serialize trim update, since a part of the register is changed and

	 * the controller is supposed to be disabled during this operation.

 Return the result in msec as hwmon sysfs interface requires. */

	/*

	 * If alarms are enabled, the requested timeout must be divided

	 * between all available sensors to have the requested delay

	 * applicable to each individual sensor.

	/*

	 * Subtract a constant lag, which always persists due to the limited

	 * PVT sampling rate. Make sure the timeout is not negative.

	/*

	 * Finally recalculate the timeout in terms of the reference clock

	 * period.

	/*

	 * Update the measurements delay, but lock the interface first, since

	 * we have to disable PVT in order to have the new delay actually

	 * updated.

	/*

	 * Test out the sensor conversion functionality. If it is not done on

	 * time then the domain must have been unpowered and we won't be able

	 * to use the device later in this driver.

	 * Note If the power source is lost during the normal driver work the

	 * data read procedure will either return -ETIMEDOUT (for the

	 * alarm-less driver configuration) or just stop the repeated

	 * conversion. In the later case alas we won't be able to detect the

	 * problem.

	/*

	 * Make sure all interrupts and controller are disabled so not to

	 * accidentally have ISR executed before the driver data is fully

	 * initialized. Clear the IRQ status as well.

 Setup default sensor mode, timeout and temperature trim. */

	/*

	 * Preserve the current ref-clock based delay (Ttotal) between the

	 * sensors data samples in the driver data so not to recalculate it

	 * each time on the data requests and timeout reads. It consists of the

	 * delay introduced by the internal ref-clock timer (N / Fclk) and the

	 * constant timeout caused by each conversion latency (Tmin):

	 *   Ttotal = N / Fclk + Tmin

	 * If alarms are enabled the sensors are polled one after another and

	 * in order to get the next measurement of a particular sensor the

	 * caller will have to wait for at most until all the others are

	 * polled. In that case the formulae will look a bit different:

	 *   Ttotal = 5 * (N / Fclk + Tmin)

	/*

	 * Enable sensors data conversion and IRQ. We need to lock the

	 * interface mutex since hwmon has just been created and the

	 * corresponding sysfs files are accessible from user-space,

	 * which theoretically may cause races.

 !CONFIG_SENSORS_BT1_PVT_ALARMS */

 !CONFIG_SENSORS_BT1_PVT_ALARMS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * nct6775 - Driver for the hardware monitoring functionality of

 *	       Nuvoton NCT677x Super-I/O chips

 *

 * Copyright (C) 2012  Guenter Roeck <linux@roeck-us.net>

 *

 * Derived from w83627ehf driver

 * Copyright (C) 2005-2012  Jean Delvare <jdelvare@suse.de>

 * Copyright (C) 2006  Yuan Mu (Winbond),

 *		       Rudolf Marek <r.marek@assembler.cz>

 *		       David Hubbard <david.c.hubbard@gmail.com>

 *		       Daniel J Blueman <daniel.blueman@gmail.com>

 * Copyright (C) 2010  Sheng-Yuan Huang (Nuvoton) (PS00)

 *

 * Shamelessly ripped from the w83627hf driver

 * Copyright (C) 2003  Mark Studebaker

 *

 * Supports the following chips:

 *

 * Chip        #vin    #fan    #pwm    #temp  chip IDs       man ID

 * nct6106d     9      3       3       6+3    0xc450 0xc1    0x5ca3

 * nct6116d     9      5       5       3+3    0xd280 0xc1    0x5ca3

 * nct6775f     9      4       3       6+3    0xb470 0xc1    0x5ca3

 * nct6776f     9      5       3       6+3    0xc330 0xc1    0x5ca3

 * nct6779d    15      5       5       2+6    0xc560 0xc1    0x5ca3

 * nct6791d    15      6       6       2+6    0xc800 0xc1    0x5ca3

 * nct6792d    15      6       6       2+6    0xc910 0xc1    0x5ca3

 * nct6793d    15      6       6       2+6    0xd120 0xc1    0x5ca3

 * nct6795d    14      6       6       2+6    0xd350 0xc1    0x5ca3

 * nct6796d    14      7       7       2+6    0xd420 0xc1    0x5ca3

 * nct6797d    14      7       7       2+6    0xd450 0xc1    0x5ca3

 *                                           (0xd451)

 * nct6798d    14      7       7       2+6    0xd428 0xc1    0x5ca3

 *                                           (0xd429)

 *

 * #temp lists the number of monitored temperature sources (first value) plus

 * the number of directly connectable temperature sensors (second value).

 used to set data->name = nct6775_device_names[data->sio_kind] */

/*

 * Super-I/O constants and functions

 Logical device select */

 Device ID (2 bytes) */

 Logical device enable */

 Logical device address (2 bytes) */

 superio_() callbacks  */

	/*

	 * Try to reserve <ioreg> and <ioreg + 1> for exclusive access.

/*

 * ISA constants

/*

 * Not currently used:

 * REG_MAN_ID has the value 0x5ca3 for all supported chips.

 * REG_CHIP_ID == 0x88/0xa1/0xc1 depending on chip model.

 * REG_MAN_ID is at port 0x4f

 * REG_CHIP_ID is at port 0x58

 Max number of temp attribute sets w/ limits*/

 Max number of fixed temp attribute sets */

 Max number of alarm registers */

 Max number of beep registers */

 Common and NCT6775 specific data */

 Voltage min/max registers for nr=7..14 are in bank 5 */

 0..15 voltages, 16..23 fans, 24..29 temperatures, 30..31 intrusion */

 in0.. in7 */

 in8..in14 */

 unused */

 fan1..fan5 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

/*

 * 0..14 voltages, 15 global beep enable, 16..23 fans, 24..29 temperatures,

 * 30..31 intrusion

 in0.. in7 */

 in8..in14 */

 global beep enable */

 fan1..fan5 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

 DC or PWM output fan configuration */

 Advanced Fan control, some values are common for all fans */

 NCT6776 specific data */

 STEP_UP_TIME and STEP_DOWN_TIME regs are swapped for all chips but NCT6775 */

 in0.. in7 */

 in8..in14 */

 unused */

 fan1..fan5 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

 in0.. in7 */

 in8..in14 */

 global beep enable */

 fan1..fan5 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

 NCT6779 specific data */

 in0.. in7 */

 in8..in14 */

 unused */

 fan1..fan5 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

 in0.. in7 */

 in8..in14 */

 global beep enable */

 fan1..fan5 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

 NCT6791 specific data */

 in0.. in7 */

 in8..in14 */

 unused */

 fan1..fan6 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

 NCT6792/NCT6793 specific data */

 undocumented */

 undocumented */

 NCT6102D/NCT6106D specific data */

 in0.. in7 */

 in8..in14 */

 unused */

 fan1..fan5 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

 in0.. in7 */

 in8..in14 */

 global beep enable */

 fan1..fan5 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

 NCT6112D/NCT6114D/NCT6116D specific data */

 in0.. in7 */

 in8..in9 */

 unused */

 fan1..fan5 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

 in0.. in7 */

 in8..in14 */

 global beep enable */

 fan1..fan5 */

 unused */

 temp1..temp6 */

 intrusion0, intrusion1 */

/*

 * Conversions

 1 is DC mode, output in ms */

	/*

	 * Even though the registers are 16 bit wide, the fan divisor

	 * still applies.

/*

 * Some of the voltage inputs have internal scaling, the tables below

 * contain 8 (the ADC LSB in mV) * scaling factor * 100

/*

 * Data structures and manipulation thereof

 IO base of hw monitor block */

 SIO register address */

	u16 reg_temp[5][NUM_TEMP]; /* 0=temp, 1=temp_over, 2=temp_hyst,

				    * 3=temp_crit, 4=temp_lcrit

	const u16 *REG_PWM[7];	/* [0]=pwm, [1]=pwm_start, [2]=pwm_floor,

				 * [3]=pwm_max, [4]=pwm_step,

				 * [5]=weight_duty_step, [6]=weight_duty_base

 temp register sources */

 0=base, 1=tolerance, 2=step */

 true if following fields are valid */

 In jiffies */

 Register values */

 current register bank */

 number of in inputs we have */

 [0]=in, [1]=in_max, [2]=in_min */

 some fan inputs can be disabled */

 some fans don't have min register */

 2, 3, or 6 */

 2, 3, or 6 */

 3 or 6 */

	s16 temp[5][NUM_TEMP]; /* 0=temp, 1=temp_over, 2=temp_hyst,

 number of pwm */

	u8 pwm_mode[NUM_FAN];	/* 0->DC variable voltage,

				 * 1->PWM variable duty cycle

			/* 0->off

			 * 1->manual

			 * 2->thermal cruise mode (also called SmartFan I)

			 * 3->fan speed cruise mode

			 * 4->SmartFan III

			 * 5->enhanced variable thermal cruise (SmartFan IV)

	u8 pwm[7][NUM_FAN];	/* [0]=pwm, [1]=pwm_start, [2]=pwm_floor,

				 * [3]=pwm_max, [4]=pwm_step,

				 * [5]=weight_duty_step, [6]=weight_duty_base

 0 = stop_time, 1 = step_up, 2 = step_down */

 Automatic fan speed control registers */

	u8 weight_temp[3][NUM_FAN];	/* 0->temp_step, 1->temp_step_tol,

					 * 2->temp_base

 Remember extra register values over suspend/resume */

 nct6775_*() callbacks  */

 true if both index and nr are used */

/*

 * On older chips, only registers 0x50-0x5f are banked.

 * On more recent chips, all registers are banked.

 * Assume that is the case and set the bank number for each access.

 * Cache the bank number so it only needs to be set if it changes.

 We left-align 8-bit temperature values to make the code simpler */

 This function assumes that the caller holds data->update_lock */

	/*

	 * For all fans, start with highest divider value if the divider

	 * register is not initialized. This ensures that we get a

	 * reading from the fan count register, even if it is not optimal.

	 * We'll compute a better divider later on.

	/*

	 * If fan_min is not set (0), set it to 0xff to disable it. This

	 * prevents the unnecessary warning when fanX_min is reported as 0.

	/*

	 * If we failed to measure the fan speed, or the reported value is not

	 * in the optimal range, and the clock divider can be modified,

	 * let's try that for next time.

 Preserve min limit if possible */

 If fan can stop, report floor as 0 */

 If weight is disabled, report weight source as 0 */

 Weight temp data */

 Update only in matching mode or if never updated */

 critical auto_pwm temperature data */

 Fan clock dividers */

 Measured voltages and limits */

 Measured fan speeds and limits */

 Measured temperatures and limits */

/*

 * Sysfs callback functions

	/*

	 * For temperatures, there is no fixed mapping from registers to alarm

	 * bits. Alarm bits are determined by the temperature source mapping.

	/*

	 * For temperatures, there is no fixed mapping from registers to beep

	 * enable bits. Beep enable bits are determined by the temperature

	 * source mapping.

 voltage index */

/*

 * nct6775_in_is_visible uses the index into the following array

 * to determine if attributes should be created or not.

 * Any change in order or content must be matched.

 NCT6776F or NCT6779D; we know this is a 13 bit register */

 Leave fan divider alone */

 No min limit, alarm disabled */

 No change */

		/*

		 * Speed below this value cannot possibly be represented,

		 * even with the highest divider (128)

 128 == BIT(7) */

		/*

		 * Speed above this value cannot possibly be represented,

		 * even with the lowest divider (1)

 1 == BIT(0) */

		/*

		 * Automatically pick the best divider, i.e. the one such

		 * that the min limit will correspond to a register value

		 * in the 96..192 range

	/*

	 * Write both the fan clock divider (if it changed) and the new

	 * fan min (unconditionally)

 Give the chip time to sample a new speed value */

 fan index */

 attribute index */

/*

 * nct6775_fan_is_visible uses the index into the following array

 * to determine if attributes should be created or not.

 * Any change in order or content must be matched.

 1 */

 2 */

 4 */

 5 */

 CPU diode (diode, current mode) */

 diode, voltage mode */

 thermistor */

 temp index */

 attribute index */

 alarm */

 beep */

 max */

 max_hyst */

 crit */

 lcrit */

 offset and type only apply to fixed sensors */

/*

 * nct6775_temp_is_visible uses the index into the following array

 * to determine if attributes should be created or not.

 * Any change in order or content must be matched.

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 Setting DC mode (0) is not supported for all chips/channels */

	/*

	 * For automatic fan control modes, show current pwm readings.

	 * Otherwise, show the configured value.

 floor: disable if val == 0 */

 Returns 0 if OK, -EINVAL otherwise */

 validate critical temperature and pwm if enabled (pwm > 0) */

		/*

		 * turn off pwm control: select manual mode, set pwm to maximum

 Limit tolerance as needed */

/*

 * Fan speed tolerance is a tricky beast, since the associated register is

 * a tick counter, but the value is reported and configured as rpm.

 * Compute resulting low and high rpm values and report the difference.

 * A fan speed tolerance only makes sense if a fan target speed has been

 * configured, so only display values other than 0 if that is the case.

 Limit tolerance as needed */

 Smart Fan registers */

 disable if needed (pwm == 0) */

 always enabled, nothing to do */

	/*

	 * We don't know for sure if the temperature is signed or unsigned.

	 * Assume it is unsigned.

 pwm index */

 attribute index */

 weight */

 pwm_max */

 pwm_step */

 weight_duty_base */

 auto point */

 auto point index */

/*

 * nct6775_pwm_is_visible uses the index into the following array

 * to determine if attributes should be created or not.

 * Any change in order or content must be matched.

 14 */

 18 */

 19 */

 20 */

 21 */

 22 */

 35 */

 Case open detection */

	/*

	 * Use CR registers to clear caseopen status.

	 * The CR registers are the same for all chips, and not all chips

	 * support clearing the caseopen status through "regular" registers.

 Force cache refresh */

/*

 * nct6775_other_is_visible uses the index into the following array

 * to determine if attributes should be created or not.

 * Any change in order or content must be matched.

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 Start monitoring if needed */

 Enable temperature sensors if needed */

 Enable VBAT monitoring if needed */

 diode */

 thermistor */

 Store SIO_REG_ENABLE for use during resume */

 fan4 and fan5 share some pins with the GPIO and serial flash */

 On NCT6775, fan4 shares pins with the fdc interface */

			/*

			 * Auxiliary fan monitoring is not enabled on ASRock

			 * Z77 Pro4-M if booted in UEFI Ultra-FastBoot mode.

			 * Observed with BIOS version 2.00.

 pin 1(2)

 pin 65(66)

 pin 126(127)

 pin 94(96)

		/*

		 * NCT6779D, NCT6791D, NCT6792D, NCT6793D, NCT6795D, NCT6796D,

		 * NCT6797D, NCT6798D

 NCT6779D */

 fan 1 and 2 (0x03) are always present */

 Force initial bank selection */

	/*

	 * On some boards, not all available temperature sources are monitored,

	 * even though some of the monitoring registers are unused.

	 * Get list of unused monitoring registers, then detect if any fan

	 * controls are configured to use unmonitored temperature sources.

	 * If so, assign the unmonitored temperature sources to available

	 * monitoring registers.

	/*

	 * Now find unmonitored temperature registers and enable monitoring

	 * if additional monitoring registers are available.

 First dynamic temperature attribute */

 Use fixed index for SYSTIN(1), CPUTIN(2), AUXTIN(3) */

 Use dynamic index for other sources */

	/*

	 * Repeat with temperatures used for fan control.

	 * This set of registers does not support limits.

		/*

		 * For virtual temperature sources, the 'virtual' temperature

		 * for each fan reflects a different temperature, and there

		 * are no duplicates.

 Use fixed index for SYSTIN(1), CPUTIN(2), AUXTIN(3) */

 Use dynamic index for other sources */

	/*

	 * Go through the list of alternate temp registers and enable

	 * if possible.

	 * The temperature is already monitored if the respective bit in <mask>

	 * is set.

 Abort if no more space */

 USE_ALTERNATE */

 Initialize the chip */

	/*

	 * Read VID value

	 * We can get the VID input values directly at logical device D 0xe3.

 Read fan clock dividers immediately */

 Register sysfs hooks */

 Force initial bank selection */

 Restore limits */

 Restore other settings */

 Force re-reading all values */

 nct6775_find() looks for a '627 in the Super-I/O config space */

 We have a known chip, find the HWM I/O address */

 Activate logical device if needed */

/*

 * when Super-I/O functions move to a separate file, the Super-I/O

 * bus will manage the lifetime of the device and this module will only keep

 * track of the nct6775 driver. But since we use platform_device_alloc(), we

 * must keep track of the device

 if reading chip id via WMI succeeds, use WMI */

	/*

	 * initialize sio_data->kind and sio_data->sioreg.

	 *

	 * when Super-I/O functions move to a separate file, the Super-I/O

	 * driver will probe 0x2e and 0x4e and auto-detect the presence of a

	 * nct6775 hardware monitor, and call probe()

 platform_device_add calls probe() */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2007-2009 Luca Tettamanti <kronos.it@gmail.com>

 *

 * See COPYING in the top level directory of the kernel tree.

 Old interface has broken MCH temp monitoring */

 Old interface reads the same sensor for fan0 and fan1 */

/*

 * Minimum time between readings, enforced in order to avoid

 * hogging the CPU.

 New package format */

 Old package format */

 old interface */

 new interface */

 Worst case is "tempN_input" */

 in jiffies */

/*

 * Return buffer format:

 * [0-3] "value" is valid flag

 * [4-7] value

 * [8- ] unknown stuff on newer mobos

 Input buffer used for GITM and SITM methods */

 ACPI returns decidegree */

/*

 * New package format is:

 * - flag (int)

 *	class - used for de-muxing the request to the correct GITn

 *	type (volt, temp, fan)

 *	sensor id |

 *	sensor id - used for de-muxing the request _inside_ the GITn

 * - name (str)

 * - unknown (int)

 * - unknown (int)

 * - limit1 (int)

 * - limit2 (int)

 * - enable (int)

 *

 * The old package has the same format but it's missing the two unknown fields.

 Don't check... we don't know what they're useful for anyway */

 Execution was successful, but the id was not found */

 Sanity check */

 Sanity check */

		/*

		 * The reading is not valid, possible causes:

		 * - sensor failure

		 * - enumeration was FUBAR (and we didn't notice)

 Print the package */

 CONFIG_DEBUG_FS */

 wft is this? */

 Ok, we have a valid hwmon package */

 sensor is disabled */

 The upper limit is expressed as delta from lower limit */

 Voltages */

 Temperatures */

 Fans */

 The MGMT class does not exists - that's ok */

 Search the EC */

 The system has no EC */

 If the EC was disabled we will disable it again on unload */

 RTMP: read temperature */

 RVLT: read voltage */

 RFAN: read fan status */

 Enumeration */

 De-multiplexer (read) */

 De-multiplexer (write) */

	/*

	 * Check for hwmon methods: first check "old" style methods; note that

	 * both may be present: in this case we stick to the old interface;

	 * analysis of multiple DSDTs indicates that when both interfaces

	 * are present the new one (GGRP/GITM) is not functional.

 Make sure it's safe to access the device through ACPI */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * f75375s.c - driver for the Fintek F75375/SP, F75373 and

 *             F75387SG/RG hardware monitoring features

 * Copyright (C) 2006-2007  Riku Voipio

 *

 * Datasheets available at:

 *

 * f75375:

 * http://www.fintek.com.tw/files/productfiles/F75375_V026P.pdf

 *

 * f75373:

 * http://www.fintek.com.tw/files/productfiles/F75373_V025P.pdf

 *

 * f75387:

 * http://www.fintek.com.tw/files/productfiles/F75387_V027P.pdf

 Addresses to scan */

 Fintek F75375 registers  */

/*

 * Data structures and manipulation thereof

 protect register access */

 In jiffies */

 In jiffies */

 Register values */

	/*

	 * f75387: For remote temperature reading, it uses signed 11-bit

	 * values with LSB = 0.125 degree Celsius, left-justified in 16-bit

	 * registers. For original 8-bit temp readings, the LSB just is 0.

 in most cases, should be called while holding update_lock */

 Limit registers cache is refreshed after 60 seconds */

 Measurement registers cache is refreshed after 2 second */

 assign MSB, therefore shift it by 8 bits */

 merge F75387's temperature LSB (11-bit) */

 Manual, duty mode (full speed) */

 Manual, duty mode */

 Auto, duty mode */

 Auto, speed mode */

 Manual, speed mode */

 Manual, duty mode (full speed) */

 Manual, duty mode */

 Manual, speed mode */

 Auto, speed mode */

 Auto, duty mode */

 For now, deny dangerous toggling of duty mode */

 clear each fanX_mode bit before setting them properly */

 full speed */

 PWM */

 Automatic, speed mode */

 fan speed */

 Automatic, pwm */

 clear each fanX_mode bit before setting them properly */

 full speed */

 PWM */

 AUTOMATIC*/

 fan speed */

 Automatic pwm */

 F75373 does not support DC (linear voltage) fan control mode */

 take care for different registers */

 auto, pwm */

 manual, speed */

 automatic, speed */

 manual, pwm */

 speed */

 automatic */

 manual */

 Return 0 if detection is successful, -ENODEV otherwise */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * gpio-fan.c - Hwmon driver for fans connected to GPIO lines.

 *

 * Copyright (C) 2010 LaCie

 *

 * Author: Simon Guinot <sguinot@lacie.com>

 Cooling device if any */

 lock GPIOs operations. */

/*

 * Alarm GPIO.

	/*

	 * If the alarm GPIO don't support interrupts, just leave

	 * without initializing the fail notification support.

/*

 * Control GPIOs.

 Must be called with fan_data->lock held, except during initialization. */

 Must be called with fan_data->lock held, except during initialization. */

 Disable manual control mode: set fan at full speed. */

 0 */

 1 */

		/*

		 * The GPIO descriptors were retrieved with GPIOD_ASIS so here

		 * we set the GPIO into output mode, carefully preserving the

		 * current value by setting it to whatever it is already set

		 * (no surprise changes in default fan speed).

 Enable manual fan speed control. */

/*

 * Translate OpenFirmware node properties into platform_data

 Alarm GPIO if one exists */

 Fill GPIO pin array */

 Get number of RPM/ctrl_val pairs in speed map */

	/*

	 * Populate speed map

	 * Speed map is in the form <RPM ctrl_val RPM ctrl_val ...>

	 * this needs splitting into pairs to create gpio_fan_speed structs

 Configure control GPIOs if available. */

 Make this driver part of hwmon class. */

 Configure alarm GPIO if available. */

 Optional cooling device register for Device tree platforms */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * smsc47b397.c - Part of lm_sensors, Linux kernel modules

 * for hardware monitoring

 *

 * Supports the SMSC LPC47B397-NC Super-I/O chip.

 *

 * Author/Maintainer: Mark M. Hoffman <mhoffman@lightlink.com>

 * Copyright (C) 2004 Utilitek Systems, Inc.

 *

 * derived in part from smsc47m1.c:

 * Copyright (C) 2002 Mark D. Studebaker <mdsxyz123@yahoo.com>

 * Copyright (C) 2004 Jean Delvare <jdelvare@suse.de>

 Super-I/0 registers and commands */

 The register to read/write */

 The value to read/write */

 select superio logical device */

 0 <= nr <= 3 */

 0 <= nr <= 3 */

 in jiffies */

 register values */

 4 temperature inputs, 4 fan inputs */

 must read LSB first */

/*

 * TEMP: 0.001C/bit (-128C to +127C)

 * REG: 1C/bit, two's complement

/*

 * FAN: 1 RPM/bit

 * REG: count of 90kHz pulses / revolution

 Sets global pdev as a side effect */

 SPDX-License-Identifier: GPL-2.0+

 Copyright IBM Corp 2019

 lock access to ffdc data */

 P9 OCC poll data */

 Host is shutdown, don't spew errors */

 SPDX-License-Identifier: GPL-2.0+

 Copyright IBM Corp 2019

 OCB (on-chip control bridge - interface to OCC) registers */

 OCC SRAM address space */

 p8 i2c slave requires shift */

 address is a scom address; bus-endian */

 data from OCC is big-endian */

 p8 i2c slave requires shift */

 address is bus-endian; data passed through from user as-is */

 set sram address for command */

 write command (expected to already be BE), we need bus-endian... */

 trigger OCC attention */

 set sram address for response */

 wait for OCC */

 check the OCC response */

 fetch the rest of the response data */

 P8 OCC poll data */

 SPDX-License-Identifier: GPL-2.0+

 Copyright IBM Corp 2019

 OCC status register */

 OCC extended status register */

	/*

	 * On the first poll response, we haven't yet created the sysfs

	 * attributes, so don't make any notify calls.

 no notifications for OCC state; doesn't indicate error condition */

 SPDX-License-Identifier: GPL-2.0+

 Copyright IBM Corp 2019

 required by OCC spec */

 1 min */

 OCC sensor type and version definitions */

 big endian */

 sequence number */

 cmd type */

 data length msb */

 data length lsb */

 data */

 checksum msb */

 checksum lsb */

 mutex should already be locked if necessary */

 clear error since communication was successful */

 check for safe state */

 sequence number */

 cmd type */

 data length msb */

 data length lsb */

 checksum msb */

 checksum lsb */

 limit the maximum rate of polling the OCC */

		/*

		 * If a sensor reading has expired and couldn't be refreshed,

		 * OCC returns 0xFFFF for that sensor.

		/*

		 * VRM doesn't return temperature, only alarm bit. This

		 * attribute maps to tempX_alarm instead of tempX_input for

		 * VRM

 sensor not ready */

 sensor not ready */

 microwatt to watt */

/*

 * Some helper macros to make it easier to define an occ_attribute. Since these

 * are dynamically allocated, we shouldn't use the existing kernel macros which

 * stringify the name argument.

/*

 * Allocate and instatiate sensor_device_attribute_2s. It's most efficient to

 * use our own instead of the built-in hwmon attribute types.

 null-terminated list */

		/*

		 * Special case for many-attribute power sensor. Split it into

		 * a sensor number per power type, emulating several sensors.

 put the sensors in the group */

 only need to do this once at startup, as OCC won't change sensors on us */

 validate all the length/size fields */

 match sensor block type */

 no need to lock */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for FSP 3Y-Power PSUs

 *

 * Copyright (c) 2021 Václav Kubernát, CESNET

 *

 * This driver is mostly reverse engineered with the help of a tool called pmbus_peek written by

 * David Brownell (and later adopted by Jan Kundrát). The device has some sort of a timing issue

 * when switching pages, details are explained in the code. The driver support is limited. It

 * exposes only the values, that have been tested to work correctly. Unsupported values either

 * aren't supported by the devices or their encondings are unknown.

		/*

		 * Testing showed that the device has a timing issue. After

		 * setting a page, it takes a while, before the device actually

		 * gives the correct values from the correct page. 20 ms was

		 * tested to be enough to not give wrong values (15 ms wasn't

		 * enough).

	/*

	 * Inject an exponent for non-compliant YH5151-E.

	/*

	 * This masks commands which weren't tested to work correctly. Some of

	 * the masked commands return 0xFFFF. These would probably get tagged as

	 * invalid by pmbus_core. Other ones do return values which might be

	 * useful (that is, they are not 0xFFFF), but their encoding is unknown,

	 * and so they are unsupported.

	/*

	 * Handle YH-5151E non-compliant linear11 vout voltage.

	/*

	 * YH-5151E sometimes reports vout in linear11 and sometimes in

	 * linear16. This depends on the exact individual piece of hardware. One

	 * YH-5151E can use linear16 and another might use linear11 instead.

	 *

	 * The format can be recognized by reading VOUT_MODE - if it doesn't

	 * report a valid exponent, then vout uses linear11. Otherwise, the

	 * device is compliant and uses linear16.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2017 IBM Corp.

		/*

		 * PMBUS_FAN_COMMAND_x is probed to judge whether or not to

		 * expose fan control registers.

		 *

		 * Don't expose fan_target attribute for virtual pages.

	/*

	 * The datasheet describes the accepted value range for manual PWM as

	 * [0, 0x2710], while the hwmon pwmX sysfs interface accepts values in

	 * [0, 255]. The MAX31785 uses DIRECT mode to scale the FAN_COMMAND

	 * registers and in PWM mode the coefficients are m=1, b=0, R=2. The

	 * important observation here is that 0x2710 == 10000 == 100 * 100.

	 *

	 * R=2 (== 10^2 == 100) accounts for scaling the value provided at the

	 * sysfs interface into the required hardware resolution, but it does

	 * not yet yield a value that we can write to the device (this initial

	 * scaling is handled by pmbus_data2reg()). Multiplying by 100 below

	 * translates the parameter value into the percentage units required by

	 * PMBus, and then we scale back by 255 as required by the hwmon pwmX

	 * interface to yield the percentage value at the appropriate

	 * resolution for hardware.

 RPM */

 PWM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for BluTek BPA-RS600 Power Supplies

 *

 * Copyright 2021 Allied Telesis Labs

		/*

		 * Two fans are reported in PMBUS_FAN_CONFIG_12 but there is

		 * only one fan in the module. Mask out the FAN2 bits.

/*

 * The BPA-RS600 violates the PMBus spec. Specifically it treats the

 * mantissa as unsigned. Deal with this here to allow the PMBus core

 * to work with correctly encoded data.

/*

 * Firmware V5.70 incorrectly reports 1640W for MFR_PIN_MAX.

 * Deal with this by returning a sensible value.

 Detect invalid 1640W (linear encoding) */

 Report 700W (linear encoding) */

 These commands return data but it is invalid/un-documented */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Hardware monitoring driver for STMicroelectronics digital controller PM6764TR

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for Infineon Multi-phase Digital VR Controllers

 *

 * Copyright (c) 2020 Mellanox Technologies. All rights reserved.

 VR12.0 mode, 5-mV DAC */

 VR12.5 mode, 10-mV DAC */

 IMVP9 mode, 10-mV DAC */

 AMD mode 6.25mV */

 Convert register value to LINEAR11 data. */

 Convert data to VID register. */

 Read the register with VOUT scaling value.*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Delta DPS920AB PSU

 *

 * Copyright (C) 2021 Delta Networks, Inc.

 * Copyright (C) 2021 Sartura Ltd.

	/*

	 * This masks commands which are not supported.

	 * PSU advertises that all features are supported,

	 * in reality that unfortunately is not true.

	 * So enable only those that the datasheet confirms.

	/*

	 * This masks commands which are not supported.

	 * PSU only has one R/W register and that is

	 * for the fan.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for Maxim MAX15301

 *

 * Copyright (c) 2021 Flextronics International Sweden AB

 *

 * Even though the specification does not specifically mention it,

 * extensive empirical testing has revealed that auto-detection of

 * limit-registers will fail in a random fashion unless the delay

 * parameter is set to above about 80us. The default delay is set

 * to 100us to include some safety margin.

 Chip access time */

 Delay between chip accesses in us */

 us	*/

 This chip needs a delay between accesses */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for MAX20710, MAX20730, MAX20734, and MAX20743 Integrated,

 * Step-Down Switching Regulators

 *

 * Copyright 2019 Google LLC.

 * Copyright 2020 Maxim Integrated

 Used to protect against parallel writes */

 AN6209 */

 AN6042 or AN6140 */

 AN6042 */

 CONFIG_DEBUG_FS */

/*

 * Convert discreet value to direct data format. Strictly speaking, all passed

 * values are constants, so we could do that calculation manually. On the

 * downside, that would make the driver more difficult to maintain, so lets

 * use this approach.

 take milli-units into account */

	/*

	 * R < 0 is true for all callers, so we don't need to bother

	 * about the R > 0 case.

 Source : Maxim AN6140 and AN6042 */

 Source : Maxim AN6042 */

		/*

		 * Values in the datasheet are adjusted for temperature and

		 * for the relationship between Vin and Vout.

		 * Unfortunately, the data sheet suggests that Vout measurement

		 * may be scaled with a resistor array. This is indeed the case

		 * at least on the evaulation boards. As a result, any in-driver

		 * adjustments would either be wrong or require elaborate means

		 * to configure the scaling. Instead of doing that, just report

		 * raw values and let userspace handle adjustments.

 Source : Maxim AN6209 */

 Source : Maxim AN6042 */

	/*

	 * The chips support reading PMBUS_MFR_MODEL. On both MAX20730

	 * and MAX20734, reading it returns M20743. Presumably that is

	 * the reason why the command is not documented. Unfortunately,

	 * that means that there is no reliable means to detect the chip.

	 * However, we can at least detect the chip series. Compare

	 * the returned value against 'M20743' and bail out if there is

	 * a mismatch. If that doesn't work for all chips, we may have

	 * to remove this check.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2019 Inspur Corp.

 filled with printable characters, ending with # */

 < 100 */, data[3]
 < 100 */);

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for Maxim MAX34440/MAX34441

 *

 * Copyright (c) 2011 Ericsson AB.

 * Copyright (c) 2012 Guenter Roeck

/*

 * The whole max344* family have IOUT_OC_WARN_LIMIT and IOUT_OC_FAULT_LIMIT

 * swapped from the standard pmbus spec addresses.

	/*

	 * Each of the channel 0-15 can be configured to monitor the following

	 * functions based on MFR_CHANNEL_CONFIG[5:0]

	 * 0x10: Sequencing + voltage monitoring (only valid for PAGES 0–11)

	 * 0x20: Voltage monitoring (no sequencing)

	 * 0x21: Voltage read only

	 * 0x22: Current monitoring

	 * 0x23: Current read only

	 * 0x30: General-purpose input active low

	 * 0x34: General-purpose input active high

	 * 0x00:  Disabled

 R = 0 in datasheet reflects mV */

 R = 0 in datasheet reflects mV */

 R = 0 in datasheet reflects mA */

 func 0-15 is set dynamically before probing */

 page 16 is reserved */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for the STPDDC60 controller

 *

 * Copyright (c) 2021 Flextronics International Sweden AB.

/*

 * Calculate the closest absolute offset between commanded vout value

 * and limit value in steps of 50mv in the range 0 (50mv) to 7 (400mv).

 * Return 0 if the upper limit is lower than vout or if the lower limit

 * is higher than vout.

 Convert VID to mv */

 Convert LINEAR to mv */

/*

 * Adjust the linear format word to use the given fixed exponent.

/*

 * The VOUT_COMMAND register uses the VID format but the vout alarm limit

 * registers use the LINEAR format so we override VOUT_MODE here to force

 * LINEAR format for all registers.

/*

 * The vout related registers return values in LINEAR11 format when LINEAR16

 * is expected. Clear the top 5 bits to set the exponent part to zero to

 * convert the value to LINEAR16 format.

/*

 * The vout under- and over-voltage limits are set as an offset relative to

 * the commanded vout voltage. The vin, iout, pout and temp limits must use

 * the same fixed exponent the chip uses to encode the data when read.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for PIM4006, PIM4328 and PIM4820

 *

 * Copyright (c) 2021 Flextronics International Sweden AB

 PIM4006 and PIM4328 */

 PIM4006 */

 PIM4328 */

 PIM4820 */

 Input UV */

 Input UV */

 Output UV */

 Input OV or OC */

 Input UV */

 OT */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Hardware monitoring driver for the Infineon IRPS5401M PMIC.

 *

 * Copyright (c) 2019 SED Systems, a division of Calian Ltd.

 *

 * The device supports VOUT_PEAK, IOUT_PEAK, and TEMPERATURE_PEAK, however

 * this driver does not currently support them.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for Maxim MAX20751

 *

 * Copyright (c) 2015 Guenter Roeck

 SPDX-License-Identifier: GPL-2.0

/*

 * Hardware monitoring driver for Maxim MAX16508 and MAX16601.

 *

 * Implementation notes:

 *

 * This chip series supports two rails, VCORE and VSA. Telemetry information

 * for the two rails is reported in two subsequent I2C addresses. The driver

 * instantiates a dummy I2C client at the second I2C address to report

 * information for the VSA rail in a single instance of the driver.

 * Telemetry for the VSA rail is reported to the PMBus core in PMBus page 2.

 *

 * The chip reports input current using two separate methods. The input current

 * reported with the standard READ_IIN command is derived from the output

 * current. The first method is reported to the PMBus core with PMBus page 0,

 * the second method is reported with PMBus page 1.

 *

 * The chip supports reading per-phase temperatures and per-phase input/output

 * currents for VCORE. Telemetry is reported in vendor specific registers.

 * The driver translates the vendor specific register values to PMBus standard

 * register values and reports per-phase information in PMBus page 0.

 *

 * Copyright 2019, 2020 Google LLC.

 VSA */

 VCORE */

 VCORE, read IIN/PIN from sensor element */

 VSA */

 VCORE */

 VCORE IIN/PIN from sensor element */

 VSA */

	/*

	 * If REG_DEFAULT_NUM_POP returns 0, we don't know how many phases

	 * are populated. Stick with the default in that case.

	/*

	 * PMBUS_IC_DEVICE_ID is expected to return "MAX16601y.xx"

	 * or "MAX16500y.xx".

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for IR35221

 *

 * Copyright (C) IBM Corporation 2017.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for Maxim MAX16064

 *

 * Copyright (c) 2011 Ericsson AB.

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for ZL6100 and compatibles

 *

 * Copyright (c) 2011 Ericsson AB.

 * Copyright (c) 2012 Guenter Roeck

 chip access time */

 Delay between chip accesses in uS */

 uS	*/

 Convert linear sensor value to milli-units */

 scale result to milli-units */

 simple case */

 Reduce large mantissa until it fits into 10 bit */

 Increase small mantissa to improve precision */

 Convert mantissa from milli-units to units */

 Ensure that resulting number is within range */

 restore sign */

 Convert to 5 bit exponent, 11 bit mantissa */

 Some chips need a delay between accesses */

		/*

		 * Limit register detection is not reliable on ZL2005.

		 * Make sure registers are not erroneously detected.

	/*

	 * According to information from the chip vendor, all currently

	 * supported chips are known to require a wait time between I2C

	 * accesses.

	/*

	 * Since there was a direct I2C device access above, wait before

	 * accessing the chip again.

	/*

	 * ZL2004, ZL8802, ZL9101M, ZL9117M and ZLS4009 support monitoring

	 * an extra voltage (VMON for ZL2004, ZL8802 and ZLS4009,

	 * VDRV for ZL9101M and ZL9117M). Report it as vmon.

	/*

	 * ZL8802 has two outputs that can be used either independently or in

	 * a current sharing configuration. The driver uses the DDC_CONFIG

	 * register to check if the module is running with independent or

	 * shared outputs. If the module is in shared output mode, only one

	 * output voltage will be reported.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for MPS Multi-phase Digital VR Controllers

 *

 * Copyright (C) 2020 Nvidia Technologies Ltd.

 Vendor specific registers. */

 Enforce VOUT direct format. */

	/*

	 * Obtain DrMOS current sense gain of power stage from the register

	 * , bits 0-2. The value is selected as below:

	 * 00b - 5µA/A, 01b - 8.5µA/A, 10b - 9.7µA/A, 11b - 10µA/A. Other

	 * values are reserved.

	/*

	 * Obtain resolution selector for total and phase current report and protection.

	 * 0: original resolution; 1: half resolution (in such case phase current value should

	 * be doubled.

	/*

	 * Output value is calculated as: (READ_CSx / 80 – 1.23) / (Kcs * Rcs)

	 * where:

	 * - Kcs is the DrMOS current sense gain of power stage, which is obtained from the

	 *   register MP2888_MFR_VR_CONFIG1, bits 13-12 with the following selection of DrMOS

	 *   (data->curr_sense_gain):

	 *   00b - 5µA/A, 01b - 8.5µA/A, 10b - 9.7µA/A, 11b - 10µA/A.

	 * - Rcs is the internal phase current sense resistor. This parameter depends on hardware

	 *   assembly. By default it is set to 1kΩ. In case of different assembly, user should

	 *   scale this parameter by dividing it by Rcs.

	 * If phase current resolution bit is set to 1, READ_CSx value should be doubled.

	 * Note, that current phase sensing, providing by the device is not accurate. This is

	 * because sampling of current occurrence of bit weight has a big deviation, especially for

	 * light load.

 Scale according to total current resolution. */

		/*

		 * READ_VIN requires fixup to scale it to linear11 format. Register data format

		 * provides 10 bits for mantissa and 6 bits for exponent. Bits 15:10 are set with

		 * the fixed value 111011b.

		/*

		 * Chip reports limits in degrees C, but the actual temperature in 10th of

		 * degrees C - scaling is needed to match both.

		/*

		 * READ_IOUT register has unused bits 15:12 with fixed value 1110b. Clear these

		 * bits and scale with total current resolution. Data is provided in direct format.

		/*

		 * Chip reports limits with resolution 1A or 2A, if total current resolution bit is

		 * set 1. Actual current is reported with 0.25A or respectively 0.5A resolution.

		 * Scaling is needed to match both.

		/*

		 * Chip reports limits with resolution 1W or 2W, if total current resolution bit is

		 * set 1. Actual power is reported with 0.5W or 1W respectively resolution. Scaling

		 * is needed to match both.

	/*

	 * The below registers are not implemented by device or implemented not according to the

	 * spec. Skip all of them to avoid exposing non-relevant inputs to sysfs.

 Drop unused bits 15:8. */

 Fix limit according to total curent resolution. */

 Drop unused bits 15:10. */

 Fix limit according to total curent resolution. */

 Drop unused bits 15:10. */

 Identify multiphase number - could be from 1 to 10. */

	/*

	 * The device provides a total of 10 PWM pins, and can be configured to different phase

	 * count applications for rail.

 Identify multiphase configuration. */

 Obtain current sense gain of power stage and current resolution. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for Texas Instruments TPS53679

 *

 * Copyright (c) 2017 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2017 Vadim Pasternak <vadimp@mellanox.com>

 VR12.0 mode, 5-mV DAC */

 VR12.5 mode, 10-mV DAC */

 VR13.0 mode, 10-mV DAC */

 IMVP8 mode, 5-mV DAC */

 VR13.0 mode, 5-mV DAC */

 Number of phases, per page */

 Read the register with VOUT scaling value.*/

 On TPS53681, only channel A provides per-phase output current */

/*

 * Common identification function for chips with multi-phase support.

 * Since those chips have special configuration registers, we want to have

 * some level of reassurance that we are really talking with the chip

 * being probed. Check PMBus revision and chip ID.

	/*

	 * For reading the total output current (READ_IOUT) for all phases,

	 * the chip datasheet is a bit vague. It says "PHASE must be set to

	 * FFh to access all phases simultaneously. PHASE may also be set to

	 * 80h readack (!) the total phase current".

	 * Experiments show that the command does _not_ report the total

	 * current for all phases if the phase is set to 0xff. Instead, it

	 * appears to report the current of one of the phases. Override phase

	 * parameter with 0x80 when reading the total output current on page 0.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for ucd9200 series Digital PWM System Controllers

 *

 * Copyright (C) 2011 Ericsson AB.

	/*

	 * Calculate number of configured pages (rails) from PHASE_INFO

	 * register.

	 * Rails have to be sequential, so we can abort after finding

	 * the first unconfigured rail.

	/*

	 * Set PHASE registers on all pages to 0xff to ensure that phase

	 * specific commands will apply to all phases of a given page (rail).

	 * This only affects the READ_IOUT and READ_TEMPERATURE2 registers.

	 * READ_IOUT will return the sum of currents of all phases of a rail,

	 * and READ_TEMPERATURE2 will return the maximum temperature detected

	 * for the the phases of the rail.

		/*

		 * Setting PAGE & PHASE fails once in a while for no obvious

		 * reason, so we need to retry a couple of times.

 ucd9240 supports a single fan */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for UCD90xxx Sequencer and System Health

 * Controller series

 *

 * Copyright (C) 2011 Ericsson AB.

 GPIO CONFIG bits */

 Use lower bit position */

 Pulses/revolution */

 No page set required */

 Page set not required */

 Page set not required */

 GPIO support is optional. */

	/*

	 * Pinmux support has not been added to the new gpio_chip.

	 * This support should be added when possible given the mux

	 * behavior of these IO devices.

 CONFIG_GPIOLIB */

	/*

	 * GPI fault bits are in sets of 8, two bytes from end of response.

	/*

	 * Of the chips this driver supports, only the UCD9090, UCD90160,

	 * UCD90320, and UCD90910 report GPI faults in their MFR_STATUS

	 * register, so only create the GPI fault debugfs attributes for those

	 * chips.

 CONFIG_DEBUG_FS */

 The internal temperature sensor is always active */

 Everything else is configurable */

 Fan configuration */

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for LM25056 / LM25066 / LM5064 / LM5066

 *

 * Copyright (c) 2011 Ericsson AB.

 * Copyright (c) 2013 Guenter Roeck

 Current limit */

 LM25056 only */

 Maximum register value */

 Adjust returned value to match VIN coefficients */

 VIN: 6.14 mV VAUX: 293 uV LSB */

 VIN: 4.54 mV VAUX: 283.2 uV LSB */

 VIN: 4.53 mV VAUX: 700 uV LSB */

 VIN: 2.18 mV VAUX: 725 uV LSB */

 Adjust returned value to match VIN coefficients */

 Adjust returned value to match VIN coefficients */

 Adjust from VIN coefficients (for LM25056) */

 Adjust from VIN coefficients (for LM25056) */

	/*

	 * Values in the TI datasheets are normalized for a 1mOhm sense

	 * resistor; assume that unless DT specifies a value explicitly.

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Hardware monitoring driver for Infineon PXE1610

 *

 * Copyright (c) 2019 Facebook Inc

 *

 Identify chip parameters. */

 Read the register with VOUT scaling value.*/

				/*

				 * If prior pages are available limit operation

				 * to them

	/*

	 * By default this device doesn't boot to page 0, so set page 0

	 * to access all pmbus registers.

 Read Manufacturer id */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for PMBus devices

 *

 * Copyright (c) 2010, 2011 Ericsson AB.

/*

 * Find sensor groups and status registers on each page.

 Sensors detected on page 0 only */

 Sensors detected on all pages */

/*

 * Identify chip parameters.

		/*

		 * Check if the PAGE command is supported. If it is,

		 * keep setting the page number until it fails or until the

		 * maximum number of pages has been reached. Assume that

		 * this is the number of pages supported by the chip.

	/*

	 * We should check if the COEFFICIENTS register is supported.

	 * If it is, and the chip is configured for direct mode, we can read

	 * the coefficients from the chip, one set per group of sensor

	 * registers.

	 *

	 * To do this, we will need access to a chip which actually supports the

	 * COEFFICIENTS command, since the command is too complex to implement

	 * without testing it. Until then, abort if a chip configured for direct

	 * mode was detected.

 Try to find sensor groups  */

/*

 * Use driver_data to set the number of pages supported by the chip.

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Delta modules, Q54SJ108A2 series 1/4 Brick DC/DC

 * Regulated Power Module

 *

 * Copyright 2020 Delta LLC.

 Source : Delta Q54SJ108A2 */

	/*

	 * The chips support reading PMBUS_MFR_MODEL.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Hardware monitoring driver for Infineon IR36021

 *

 * Copyright (c) 2021 Allied Telesis

 SPDX-License-Identifier: GPL-2.0+

/*

 * Hardware monitoring driver for Renesas Digital Multiphase Voltage Regulators

 *

 * Copyright (c) 2017 Google Inc

 * Copyright (c) 2020 Renesas Electronics America

 *

	/*

	 * Writes to VOUT setpoint over AVSBus will persist after the VRM is

	 * switched to PMBus control. Switching back to AVSBus control

	 * restores this persisted setpoint rather than re-initializing to

	 * PMBus VOUT_COMMAND. Writing VOUT_COMMAND first over PMBus before

	 * enabling AVS control is the workaround.

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for Analog Devices ADM1275 Hot-Swap Controller

 * and Digital Power Monitor

 *

 * Copyright (c) 2011 Ericsson AB.

 * Copyright (c) 2018 Guenter Roeck

 voltage */

 current, irange25 */

 current, irange50 */

 power, irange25 */

 power, irange50 */

 voltage, vrange 60V */

 voltage, vrange 100V */

 current, vsense range 15mV */

 current, vsense range 30mV */

 power, vrange 60V, irange 15mV */

 power, vrange 100V, irange 15mV */

 power, vrange 60V, irange 30mV */

 power, vrange 100V, irange 30mV */

 temperature */

 voltage, vrange set */

 voltage, vrange not set */

 current */

 voltage, vrange set */

 voltage, vrange not set */

 current */

 power, vrange set */

 power, vrange not set */

 voltage */

 current */

 power */

 temperature */

 voltage, vrange 1.2V */

 voltage, vrange 7.4V */

 voltage, vrange 21V */

 current, irange25 */

 current, irange50 */

 current, irange100 */

 current, irange200 */

 power, 1.2V, irange25 */

 power, 1.2V, irange50 */

 power, 1.2V, irange100 */

 power, 1.2V, irange200 */

 power, 7.4V, irange25 */

 power, 7.4V, irange50 */

 power, 7.4V, irange100 */

 power, 7.4V, irange200 */

 power, 21V, irange25 */

 power, 21V, irange50 */

 power, 21V, irange100 */

 power, 21V, irange200 */

	/*

	 * The PMON configuration register is a 16-bit register only on chips

	 * supporting power average sampling. On other chips it is an 8-bit

	 * register.

 1 mOhm if not set via DT */

 pindex depends on the combination of the above */

 Enable VOUT & TEMP1 if not enabled (disabled by default) */

 Enable VOUT & TEMP1 if not enabled (disabled by default) */

 1.2V */

 7.4V */

 21V */

 disabled */

 Scale current with sense resistor value */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for Maxim MAX8688

 *

 * Copyright (c) 2011 Ericsson AB.

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for LTC3815

 *

 * Copyright (c) 2015 Linear Technology

 * Copyright (c) 2015 Guenter Roeck

		/*

		 * The chip returns 0x3e, suggesting VID mode with manufacturer

		 * specific VID codes. Since the output voltage is reported

		 * with a LSB of 0.5mV, override and report direct mode with

		 * appropriate coefficients.

		/*

		 * LTC3815 does not support the CLEAR_FAULTS command.

		 * Emulate it by clearing the status register.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Hardware monitoring driver for BEL PFE family power supplies.

 *

 * Copyright (c) 2019 Facebook Inc.

/*

 * Disable status check for pfe3000 devices, because some devices report

 * communication error (invalid command) for VOUT_MODE command (0x20)

 * although correct VOUT_MODE (0x16) is returned: it leads to incorrect

 * exponent in linear mode.

 Page 0: V1. */

 Page 1: Vsb. */

		/*

		 * Page 2: V1 Ishare.

		 * Page 3: Reserved.

		 * Page 4: V1 Cathode.

		 * Page 5: Vsb Cathode.

		 * Page 6: V1 Sense.

	/*

	 * PFE3000-12-069RA devices may not stay in page 0 during device

	 * probe which leads to probe failure (read status word failed).

	 * So let's set the device to page 0 at the beginning.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for PMBus devices

 *

 * Copyright (c) 2010, 2011 Ericsson AB.

 * Copyright (c) 2012 Guenter Roeck

/*

 * Number of additional attribute pointers to allocate

 * with each call to krealloc

 sysfs sensor name */

 page number */

 phase number, 0xff for all phases */

 register */

 sensor class */

 runtime sensor update needed */

 Whether or not to apply linear/vid/direct */

	int data;		/* Sensor data.

 sysfs boolean name */

 sysfs label name */

 label */

 Macros for converting between sensor index and register/page/status mask */

 from platform data */

 linear mode: exponent for output voltages */

 debugfs device directory */

 device uses STATUS_WORD register */

 current page, -1 for unknown/unset */

 current phase, 0xff for all, -1 for unknown/unset */

/*

 * _pmbus_write_byte() is similar to pmbus_write_byte(), but checks if

 * a device specific mapping function exists and calls it if necessary.

/*

 * _pmbus_write_word_data() is similar to pmbus_write_word_data(), but checks if

 * a device specific mapping function exists and calls it if necessary.

/*

 * _pmbus_read_word_data() is similar to pmbus_read_word_data(), but checks if

 * a device specific mapping function exists and calls it if necessary.

 Same as above, but without phase parameter, for use in check functions */

/*

 * _pmbus_read_byte_data() is similar to pmbus_read_byte_data(), but checks if

 * a device specific mapping function exists and calls it if necessary.

 Can't sensibly map between RPM and PWM, just return zero */

/*

 * Convert linear sensor values to milli- or micro-units

 * depending on sensor type.

 LINEAR16 */

 LINEAR11 */

 scale result to milli-units for all sensors except fans */

 scale result to micro-units for power sensors */

/*

 * Convert direct sensor values to milli- or micro-units

 * depending on sensor type.

 X = 1/m * (Y * 10^-R - b) */

 scale result to milli-units for everything but fans */

 scale result to micro-units for power sensors */

 round closest */

/*

 * Convert VID sensor values to milli- or micro-units

 * depending on sensor type.

 simple case */

 LINEAR16 does not support negative voltages */

		/*

		 * For a static exponents, we don't have a choice

		 * but to adjust the value to it.

 Power is in uW. Convert to mW before converting. */

	/*

	 * For simplicity, convert fan data to milli-units

	 * before calculating the exponent.

 Reduce large mantissa until it fits into 10 bit */

 Increase small mantissa to improve precision */

 Convert mantissa from milli-units to units */

 restore sign */

 Convert to 5 bit exponent, 11 bit mantissa */

 Power is in uW. Adjust R and b. */

 Calculate Y = (m * X + b) * 10^R */

 Adjust R and b for data in milli-units */

 round closest */

/*

 * Return boolean calculated from converted data.

 * <index> defines a status register index and mask.

 * The mask is in the lower 8 bits, the register index is in bits 8..23.

 *

 * The associated pmbus_boolean structure contains optional pointers to two

 * sensor attributes. If specified, those attributes are compared against each

 * other to determine if a limit has been exceeded.

 *

 * If the sensor attribute pointers are NULL, the function returns true if

 * (status[reg] & mask) is true.

 *

 * If sensor attribute pointers are provided, a comparison against a specified

 * limit has to be performed to determine the boolean result.

 * In this case, the function returns true if v1 >= v2 (where v1 and v2 are

 * sensor values referenced by sensor attribute pointers s1 and s2).

 *

 * To determine if an object exceeds upper limits, specify <s1,s2> = <v,limit>.

 * To determine if an object exceeds lower limits, specify <s1,s2> = <limit,v>.

 *

 * If a negative value is stored in any of the referenced registers, this value

 * reflects an error code which will be returned.

/*

 * Search for attributes. Allocate sensors, booleans, and labels as needed.

/*

 * The pmbus_limit_attr structure describes a single limit attribute

 * and its associated alarm attribute.

 Limit register */

 Alarm attribute status bit */

 True if register needs updates */

	bool low;		/* True if low limit; for limits with compare

 Attribute name */

 Alarm attribute name */

/*

 * The pmbus_sensor_attr structure describes one sensor attribute. This

 * description includes a reference to the associated limit attributes.

 sensor register */

 generic status bit */

 # of limit registers */

 sensor class */

 sensor label */

 true if paged sensor */

 true if update needed */

 true if compare function needed */

 sensor mask */

 sensor status mask */

 status register */

 limit registers */

/*

 * Add a set of limit attributes and, if supported, the associated

 * alarm attributes.

 * returns 0 if no alarm register found, 1 if an alarm register was found,

 * < 0 on errors.

 need to check STATUS_WORD */

 No limit and alarm attributes for phase specific sensors */

		/*

		 * Add generic alarm attribute only if there are no individual

		 * alarm attributes, if there is a global alarm bit, and if

		 * the generic status register (word or byte, depending on

		 * which global bit is set) for this page is accessible.

	/*

	 * Some attributes may be present on more than one page despite

	 * not being marked with the paged attribute. If that is the case,

	 * then treat the sensor as being paged and add the page suffix to the

	 * attribute name.

	 * We don't just add the paged attribute to all such attributes, in

	 * order to maintain the un-suffixed labels in the case where the

	 * attribute is only on page 0.

 Current attributes */

 Power attributes */

 Temperature atributes */

 Fans */

 Precondition: FAN_CONFIG_x_y and FAN_COMMAND_x must exist for the fan ID */

			/*

			 * Skip fan if not installed.

			 * Each fan configuration register covers multiple fans,

			 * so we have to do some magic.

 Fan control */

			/*

			 * Each fan status register covers multiple fans,

			 * so we have to do some magic.

 fan 3, 4 */

 Voltage sensors */

 Current sensors */

 Power sensors */

 Temperature sensors */

 Fans */

/*

 * The pmbus_class_attr_map structure maps one sensor class to

 * it's corresponding sensor attributes array.

/*

 * Read the coefficients for direct mode.

/*

 * Identify chip parameters.

 * This function is called for all chips.

		/*

		 * Not all chips support the VOUT_MODE command,

		 * so a failure to read it is not an error.

 linear mode      */

 VID mode         */

 direct mode      */

	/*

	 * Some PMBus chips don't support PMBUS_STATUS_WORD, so try

	 * to use PMBUS_STATUS_BYTE instead if that is the case.

	 * Bail out if both registers are not supported.

 Enable PEC if the controller and bus supports it */

	/*

	 * Check if the chip is write protected. If it is, we can not clear

	 * faults, and we should not try it. Also, in that case, writes into

	 * limit registers need to be disabled.

 pmbus debugfs directory */

	/*

	 * Create the debugfs directory for this device. Use the hwmon device

	 * name to avoid conflicts (hwmon numbers are globally unique).

 Allocate the max possible entries we need. */

 Check accessibility of status register if it's not page 0 */

 No need to set reg as we have special read op. */

 IS_ENABLED(CONFIG_DEBUG_FS) */

	/*

	 * If there are no attributes, something is wrong.

	 * Bail out instead of trying to register nothing.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for TI TPS40422

 *

 * Copyright (c) 2014 Nokia Solutions and Networks.

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for MPS Multi-phase Digital VR Controllers

 *

 * Copyright (C) 2020 Nvidia Technologies Ltd.

 Vendor specific registers. */

		/*

		 * Enforce VOUT direct format, since device allows to set the

		 * different formats for the different rails. Conversion from

		 * VID to direct provided by driver internally, in case it is

		 * necessary.

	/*

	 * Output value is calculated as: (READ_CSx / 80 – 1.23) / (Kcs * Rcs)

	 * where:

	 * - Kcs is the DrMOS current sense gain of power stage, which is

	 *   obtained from the register MP2975_MFR_VR_CONFIG1, bits 13-12 with

	 *   the following selection of DrMOS (data->curr_sense_gain[page]):

	 *   00b - 5µA/A, 01b - 8.5µA/A, 10b - 9.7µA/A, 11b - 10µA/A.

	 * - Rcs is the internal phase current sense resistor which is constant

	 *   value 1kΩ.

	/*

	 * Current phase sensing, providing by the device is not accurate

	 * for the light load. This because sampling of current occurrence of

	 * bit weight has a big deviation for light load. For handling such

	 * case phase current is represented as the maximum between the value

	 * calculated  above and total rail current divided by number phases.

		/*

		 * Register provides two values for over-voltage protection

		 * threshold for fixed (ovp2) and tracking (ovp1) modes. The

		 * minimum of these two values is provided as over-voltage

		 * fault alarm.

		/*

		 * READ_VOUT can be provided in VID or direct format. The

		 * format type is specified by bit 15 of the register

		 * MP2975_MFR_DC_LOOP_CTRL. The driver enforces VOUT direct

		 * format, since device allows to set the different formats for

		 * the different rails and also all VOUT limits registers are

		 * provided in a direct format. In case format is VID - convert

		 * to direct.

	/*

	 * Identify multiphase for rail 2 - could be from 0 to 4.

	 * In case phase number is zero – only page zero is supported

 Identify multiphase for rail 2 - could be from 0 to 4. */

 Set phases for rail 2 from upper to lower. */

 Identify multiphase for rail 1 - could be from 1 to 8. */

	/*

	 * The device provides a total of 8 PWM pins, and can be configured

	 * to different phase count applications for rail 1 and rail 2.

	 * Rail 1 can be set to 8 phases, while rail 2 can only be set to 4

	 * phases at most. When rail 1’s phase count is configured as 0, rail

	 * 1 operates with 1-phase DCM. When rail 2 phase count is configured

	 * as 0, rail 2 is disabled.

 Identify VID mode and step selection. */

 Identify VID mode for rail 1. */

 Identify VID mode for rail 2, if connected. */

	/*

	 * Obtain DrMOS current sense gain of power stage from the register

	 * MP2975_MFR_VR_CONFIG1, bits 13-12. The value is selected as below:

	 * 00b - 5µA/A, 01b - 8.5µA/A, 10b - 9.7µA/A, 11b - 10µA/A. Other

	 * values are invalid.

 Get voltage reference value for rail 1. */

 Get voltage reference value for rail 2, if connected. */

 Get maximum reference voltage of VID-DAC in VID format. */

	/*

	 * Get divider for over- and under-voltage protection thresholds

	 * configuration from the Advanced Options of Auto Phase Shedding and

	 * decay register.

 Select the gain of remote sense amplifier. */

 Obtain voltage reference offsets. */

 Obtain maximum voltage values. */

		/*

		 * Get VOUT format for READ_VOUT command : VID or direct.

		 * Pages on same device can be configured with different

		 * formats.

		/*

		 * Set over-voltage fixed value. Thresholds are provided as

		 * fixed value, and tracking value. The minimum of them are

		 * exposed as over-voltage critical threshold.

 Identify multiphase configuration for rail 2. */

 Two rails are connected. */

 Identify multiphase configuration. */

 Identify VID setting per rail. */

 Obtain current sense gain of power stage. */

 Obtain voltage reference values. */

 Obtain vout over-voltage scales. */

 Obtain offsets, maximum and format for vout. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Hardware monitoring driver for LTC2978 and compatible chips.

 *

 * Copyright (c) 2011 Ericsson AB.

 * Copyright (c) 2013, 2014, 2015 Guenter Roeck

 * Copyright (c) 2015 Linear Technology

 * Copyright (c) 2018 Analog Devices Inc.

 Managers */

 Controllers */

 Modules */

 Common for all chips */

 Undocumented on LTC3882 */

 LTC2974, LTC2975, LCT2977, LTC2980, LTC2978, and LTM2987 */

 LTC2974, LTC2975 */

 LTC3880, LTC3882, LTC3883, LTC3887, LTM4675, and LTM4676 */

 LTC3883, LTC3884, LTC3886, LTC3889 and LTC7880 only */

 LTC2975 only */

 Early revision */

 A/B for two die IDs */

 Dash 1 */

 A/B for two die IDs */

 in milli-seconds */

/*

 * LTC2978 clears peak data whenever the CLEAR_FAULTS command is executed, which

 * happens pretty much each time chip data is updated. Raw peak data therefore

 * does not provide much value. To be able to provide useful peak data, keep an

 * internal cache of measured peak data, which is only cleared if an explicit

 * "clear peak" command is executed for the sensor in question.

	/*

	 * LTC3883 does not support LTC_NOT_PENDING, even though

	 * the datasheet claims that it does.

 PEC error or NACK: chip may be busy, try again */

	/*

	 * mantissa is 10 bit + sign, exponent adds up to 15 bit.

	 * Add 6 bit to exponent for maximum accuracy (10 + 15 + 6 = 31).

			/*

			 * VOUT is 16 bit unsigned with fixed exponent,

			 * so we can compare it directly

			/*

			 * VOUT_MIN is known to not be supported on some lots

			 * of LTC2978 revision 1, and will return the maximum

			 * possible voltage if read. If VOUT_MAX is valid and

			 * lower than the reading of VOUT_MIN, use it instead.

 CONFIG_SENSORS_LTC2978_REGULATOR */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2017 IBM Corp.

 STATUS_MFR_SPECIFIC bits */

			/*

			 * Use a raw i2c transfer, since we need more bytes

			 * than Linux I2C supports through smbus xfr (only 32).

			/*

			 * Return the status register instead of an error,

			 * since we successfully read status.

 Add MFR_SPECIFIC bits to the standard pmbus status regs. */

			/*

			 * Return the status register instead of an error,

			 * since we successfully read status.

 Set the client name to include the version number. */

	/*

	 * Don't fail the probe if there isn't enough memory for leds and

	 * debugfs.

 Don't fail the probe if we can't create debugfs */

 SPDX-License-Identifier: GPL-2.0

/*

 * ADM1266 - Cascadable Super Sequencer with Margin

 * Control and Fault Recording

 *

 * Copyright 2020 Analog Devices Inc.

 ADM1266 GPIO defines */

 ADM1266 PDIO defines */

/*

 * Different from Block Read as it sends data and waits for the slave to

 * return a value dependent on that data. The protocol is simply a Write Block

 * followed by a Read Block without the Read-Block command field and the

 * Write-Block STOP bit.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Hardware monitoring driver for Infineon IR38064

 *

 * Copyright (c) 2017 Google Inc

 *

 * VOUT_MODE is not supported by the device. The driver fakes VOUT linear16

 * mode with exponent value -8 as direct mode with m=256/b=0/R=0.

 *          

 * The device supports VOUT_PEAK, IOUT_PEAK, and TEMPERATURE_PEAK, however

 * this driver does not currently support them.

 This is the driver that will be inserted */

 SPDX-License-Identifier: GPL-2.0

/*

 * Microchip PolarFire SoC (MPFS) system controller/mailbox controller driver

 *

 * Copyright (c) 2020 Microchip Corporation. All rights reserved.

 *

 * Author: Conor Dooley <conor.dooley@microchip.com>

 *

 SCBCTRL service control register */

 SCBCTRL service status register */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2010,2015 Broadcom

 *  Copyright (C) 2013-2014 Lubomir Rintel

 *  Copyright (C) 2013 Craig McGeachie

 *

 * Parts of the driver are based on:

 *  - arch/arm/mach-bcm2708/vcio.c file written by Gray Girling that was

 *    obtained from branch "rpi-3.6.y" of git://github.com/raspberrypi/

 *    linux.git

 *  - drivers/mailbox/bcm2835-ipc.c by Lubomir Rintel at

 *    https://github.com/hackerspace/rpi-linux/blob/lr-raspberry-pi/drivers/

 *    mailbox/bcm2835-ipc.c

 *  - documentation available on the following web site:

 *    https://github.com/raspberrypi/firmware/wiki/Mailbox-property-interface

 Mailboxes */

/*

 * Mailbox registers. We basically only support mailbox 0 & 1. We

 * deliver to the VC in mailbox 1, it delivers to us in mailbox 0. See

 * BCM2835-ARM-Peripherals.pdf section 1.3 for an explanation about

 * the placement of memory barriers.

 Status register: FIFO state. */

 Configuration register: Enable interrupts. */

 Enable the interrupt on data reception */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018 Pengutronix, Oleksij Rempel <o.rempel@pengutronix.de>

 TX0/RX0/RXDB[0-3] */

 TX0/RX0 */

 Tx */

 Rx */

 Tx doorbell */

 Rx doorbell */

 control register lock */

 Transmit Register0 */

 Receive Register0 */

 Status Registers */

 Control Registers */

 General Purpose Interrupt Enable */

 Receive Interrupt Enable */

 Transmit Interrupt Enable */

 General Purpose Interrupt Request */

		/*

		 * msg->hdr.size specifies the number of u32 words while

		 * sizeof yields bytes.

			/*

			 * The real message size can be different to

			 * struct imx_sc_rpc_msg_max/imx_s4_rpc_msg_max size

 Tx doorbell don't have ACK support */

 IPC MU should be with IRQF_NO_SUSPEND set */

 channel type */

 index */

 channel type */

 index */

 Set default MU configuration */

 Set default MU configuration */

	/*

	 * ONLY restore MU when context lost, the TIE could

	 * be set during noirq resume as there is MU data

	 * communication going on, and restore the saved

	 * value will overwrite the TIE and cause MU data

	 * send failed, may lead to system freeze. This issue

	 * is observed by testing freeze mode suspend.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2016 Broadcom

/*

 * Broadcom PDC Mailbox Driver

 * The PDC provides a ring based programming interface to one or more hardware

 * offload engines. For example, the PDC driver works with both SPU-M and SPU2

 * cryptographic offload hardware. In some chips the PDC is referred to as MDE,

 * and in others the FA2/FA+ hardware is used with this PDC driver.

 *

 * The PDC driver registers with the Linux mailbox framework as a mailbox

 * controller, once for each PDC instance. Ring 0 for each PDC is registered as

 * a mailbox channel. The PDC driver uses interrupts to determine when data

 * transfers to and from an offload engine are complete. The PDC driver uses

 * threaded IRQs so that response messages are handled outside of interrupt

 * context.

 *

 * The PDC driver allows multiple messages to be pending in the descriptor

 * rings. The tx_msg_start descriptor index indicates where the last message

 * starts. The txin_numd value at this index indicates how many descriptor

 * indexes make up the message. Similar state is kept on the receive side. When

 * an rx interrupt indicates a response is ready, the PDC driver processes numd

 * descriptors from the tx and rx ring, thus processing one response at a time.

 # entries in PDC dma ring */

/*

 * Minimum number of ring descriptor entries that must be free to tell mailbox

 * framework that it can submit another request

 Rings are 8k aligned */

 descriptor bumping macros */

 Length of BCM header at start of SPU msg, in bytes */

/*

 * PDC driver reserves ringset 0 on each SPU for its own use. The driver does

 * not currently support use of multiple ringsets on a single PDC engine.

/*

 * Interrupt mask and status definitions. Enable interrupts for tx and rx on

 * ring 0

/*

 * For SPU2, configure MDE_CKSUM_CONTROL to write 17 bytes of metadata

 * before frame

/*

 * Sets the following bits for write to transmit control reg:

 * 11    - PtyChkDisable - parity check is disabled

 * 20:18 - BurstLen = 3 -> 2^7 = 128 byte data reads from memory

 Bit in tx control reg to enable tx channel */

/*

 * Sets the following bits for write to receive control reg:

 * 7:1   - RcvOffset - size in bytes of status region at start of rx frame buf

 * 9     - SepRxHdrDescEn - place start of new frames only in descriptors

 *                          that have StartOfFrame set

 * 10    - OflowContinue - on rx FIFO overflow, clear rx fifo, discard all

 *                         remaining bytes in current frame, report error

 *                         in rx frame status for current frame

 * 11    - PtyChkDisable - parity check is disabled

 * 20:18 - BurstLen = 3 -> 2^7 = 128 byte data reads from memory

 Bit in rx control reg to enable rx channel */

 descriptor flags */

 end of descriptor table */

 interrupt on complete */

 end of frame */

 start of frame */

 Maximum size buffer the DMA engine can handle */

 FA2/FA+ hardware (i.e. Northstar Plus) */

 PDC/MDE hardware (i.e. Northstar 2, Pegasus) */

 opaque context associated with frame */

 dma descriptor */

 misc control bits */

 buffer count and address extension */

 memory address of the date buffer, bits 31:0 */

 memory address of the date buffer, bits 63:32 */

 dma registers per channel(xmt or rcv) */

 enable, et al */

 last descriptor posted to chip */

 descriptor ring base address low 32-bits */

 descriptor ring base address bits 63:32 */

 last rx descriptor written by hw */

 driver does not use */

 cpp contortions to concatenate w/arg prescan */

 PAD */

 dma registers. matches hw layout. */

 dma tx */

 dma rx */

 PDC registers */

 0x000 */

 0x004 */

 0x00c */

 0x020 */

 0x024 */

 0x028 */

 0x030 (Only in PDC, not FA2) */

 0x034 (Only in PDC, not FA2) */

 0x038 (Only in PDC, not FA2) */

 0x03c (Only in PDC, not FA2) */

 0x100 (Only in FA2, not PDC) */

 0x104 */

 0x108 */

 0x10c */

 0x120 */

 0x124 */

 0x128 */

 0x180 */

 0x188 */

 0x18c */

 0x190 */

 0x194 */

 0x198 */

 0x19c */

 0x1a0 */

 0x1a4 */

 0x1a8 */

 0x1ac */

 0x1b0 */

 0x1b4-1dc */

 0x1e0 */

 0x1e4 (Only in PDC, not FA2) */

 0x1e8 */

 0x0200 - 0x2fc */

 more registers follow, but we don't use them */

 structure for allocating/freeing DMA rings */

 DMA address of start of ring */

 base kernel virtual address of ring */

 ring allocation size in bytes */

/*

 * context associated with a receive descriptor.

 * @rxp_ctx: opaque context associated with frame that starts at each

 *           rx ring index.

 * @dst_sg:  Scatterlist used to form reply frames beginning at a given ring

 *           index. Retained in order to unmap each sg after reply is processed.

 * @rxin_numd: Number of rx descriptors associated with the message that starts

 *             at a descriptor index. Not set for every index. For example,

 *             if descriptor index i points to a scatterlist with 4 entries,

 *             then the next three descriptor indexes don't have a value set.

 * @resp_hdr: Virtual address of buffer used to catch DMA rx status

 * @resp_hdr_daddr: physical address of DMA rx status buffer

 PDC state structure */

 Index of the PDC whose state is in this structure instance */

 Platform device for this PDC instance */

	/*

	 * Each PDC instance has a mailbox controller. PDC receives request

	 * messages through mailboxes, and sends response messages through the

	 * mailbox framework.

 tasklet for deferred processing after DMA rx interrupt */

 Number of bytes of receive status prior to each rx frame */

 Whether a BCM header is prepended to each frame */

 Sum of length of BCM header and rx status header */

 The base virtual address of DMA hw registers */

 Pool for allocation of DMA rings */

 Pool for allocation of metadata buffers for response messages */

	/*

	 * The base virtual address of DMA tx/rx descriptor rings. Corresponding

	 * DMA address and size of ring allocation.

 start of PDC registers */

 dma tx engine registers */

 dma rx engine registers */

	/*

	 * Arrays of PDC_RING_ENTRIES descriptors

	 * To use multiple ringsets, this needs to be extended

 tx descriptor ring */

 rx descriptor ring */

 descriptor ring sizes */

 # tx descriptors */

 # rx descriptors */

 # rx buffers to keep posted */

 max number of tx buffers that can be posted */

	/*

	 * Index of next tx descriptor to reclaim. That is, the descriptor

	 * index of the oldest tx buffer for which the host has yet to process

	 * the corresponding response.

	/*

	 * Index of the first receive descriptor for the sequence of

	 * message fragments currently under construction. Used to build up

	 * the rxin_numd count for a message. Updated to rxout when the host

	 * starts a new sequence of rx buffers for a new message.

 Index of next tx descriptor to post. */

	/*

	 * Number of tx descriptors associated with the message that starts

	 * at this tx descriptor index.

	/*

	 * Index of next rx descriptor to reclaim. This is the index of

	 * the next descriptor whose data has yet to be processed by the host.

	/*

	 * Index of the first receive descriptor for the sequence of

	 * message fragments currently under construction. Used to build up

	 * the rxin_numd count for a message. Updated to rxout when the host

	 * starts a new sequence of rx buffers for a new message.

	/*

	 * Saved value of current hardware rx descriptor index.

	 * The last rx buffer written by the hw is the index previous to

	 * this one.

 Index of next rx descriptor to post. */

	/*

	 * Scatterlists used to form request and reply frames beginning at a

	 * given ring index. Retained in order to unmap each sg after reply

	 * is processed

 counters */

 number of request messages submitted */

 number of reply messages received */

 too few tx descriptors to indicate done */

 unable to accept msg because tx ring full */

 unable to accept msg because rx ring full */

 unable to create tx descriptor */

 unable to create rx descriptor */

 count of rx overflows */

 hardware type - FA2 or PDC/MDE */

 Global variables */

 Actual number of SPUs in hardware, as reported by device tree */

 top level debug FS directory for PDC driver */

/**

 * pdc_setup_debugfs() - Create the debug FS directories. If the top-level

 * directory has not yet been created, create it now. Create a stats file in

 * this directory for a SPU.

 * @pdcs: PDC state structure

 S_IRUSR == 0400 */

/**

 * pdc_build_rxd() - Build DMA descriptor to receive SPU result.

 * @pdcs:      PDC state for SPU that will generate result

 * @dma_addr:  DMA address of buffer that descriptor is being built for

 * @buf_len:   Length of the receive buffer, in bytes

 * @flags:     Flags to be stored in descriptor

 bump ring index and return */

/**

 * pdc_build_txd() - Build a DMA descriptor to transmit a SPU request to

 * hardware.

 * @pdcs:        PDC state for the SPU that will process this request

 * @dma_addr:    DMA address of packet to be transmitted

 * @buf_len:     Length of tx buffer, in bytes

 * @flags:       Flags to be stored in descriptor

 bump ring index and return */

/**

 * pdc_receive_one() - Receive a response message from a given SPU.

 * @pdcs:    PDC state for the SPU to receive from

 *

 * When the return code indicates success, the response message is available in

 * the receive buffers provided prior to submission of the request.

 *

 * Return:  PDC_SUCCESS if one or more receive descriptors was processed

 *          -EAGAIN indicates that no response message is available

 *          -EIO an error occurred

 virtual addr of start of resp message DMA header */

 number of fragments ready to read */

 ring index of start of receive frame */

	/*

	 * return if a complete response message is not yet ready.

	 * rxin_numd[rxin] is the number of fragments in the next msg

	 * to read.

 No response ready */

 Return opaque context with result */

		/*

		 * For SPU-M, get length of response msg and rx overflow status.

/**

 * pdc_receive() - Process as many responses as are available in the rx ring.

 * @pdcs:  PDC state

 *

 * Called within the hard IRQ.

 * Return:

 read last_rx_curr from register once */

 Could be many frames ready */

/**

 * pdc_tx_list_sg_add() - Add the buffers in a scatterlist to the transmit

 * descriptors for a given SPU. The scatterlist buffers contain the data for a

 * SPU request message.

 * @spu_idx:   The index of the SPU to submit the request to, [0, max_spu)

 * @sg:        Scatterlist whose buffers contain part of the SPU request

 *

 * If a scatterlist buffer is larger than PDC_DMA_BUF_MAX, multiple descriptors

 * are written for that buffer, each <= PDC_DMA_BUF_MAX byte in length.

 *

 * Return: PDC_SUCCESS if successful

 *         < 0 otherwise

	/*

	 * Num descriptors needed. Conservatively assume we need a descriptor

	 * for every entry in sg.

 Number of tx descriptors written */

 Number of bytes of buffer pointed to by descriptor */

 DMA address to put in descriptor */

 check whether enough tx descriptors are available */

 build tx descriptors */

 Start of frame */

		/*

		 * If sg buffer larger than PDC limit, split across

		 * multiple descriptors

 Writing last descriptor for frame */

 Clear start of frame after first descriptor */

/**

 * pdc_tx_list_final() - Initiate DMA transfer of last frame written to tx

 * ring.

 * @pdcs:  PDC state for SPU to process the request

 *

 * Sets the index of the last descriptor written in both the rx and tx ring.

 *

 * Return: PDC_SUCCESS

	/*

	 * write barrier to ensure all register writes are complete

	 * before chip starts to process new request

/**

 * pdc_rx_list_init() - Start a new receive descriptor list for a given PDC.

 * @pdcs:   PDC state for SPU handling request

 * @dst_sg: scatterlist providing rx buffers for response to be returned to

 *	    mailbox client

 * @ctx:    Opaque context for this request

 *

 * Posts a single receive descriptor to hold the metadata that precedes a

 * response. For example, with SPU-M, the metadata is a 32-byte DMA header and

 * an 8-byte BCM header. Moves the msg_start descriptor indexes for both tx and

 * rx to indicate the start of a new message.

 *

 * Return:  PDC_SUCCESS if successful

 *          < 0 if an error (e.g., rx ring is full)

 Adding a single rx buffer */

 allocate a buffer for the dma rx status */

	/*

	 * Update msg_start indexes for both tx and rx to indicate the start

	 * of a new sequence of descriptor indexes that contain the fragments

	 * of the same message.

 This is always the first descriptor in the receive sequence */

/**

 * pdc_rx_list_sg_add() - Add the buffers in a scatterlist to the receive

 * descriptors for a given SPU. The caller must have already DMA mapped the

 * scatterlist.

 * @spu_idx:    Indicates which SPU the buffers are for

 * @sg:         Scatterlist whose buffers are added to the receive ring

 *

 * If a receive buffer in the scatterlist is larger than PDC_DMA_BUF_MAX,

 * multiple receive descriptors are written, each with a buffer <=

 * PDC_DMA_BUF_MAX.

 *

 * Return: PDC_SUCCESS if successful

 *         < 0 otherwise (e.g., receive ring is full)

	/*

	 * Num descriptors needed. Conservatively assume we need a descriptor

	 * for every entry from our starting point in the scatterlist.

 Number of tx descriptors written */

 Number of bytes of buffer pointed to by descriptor */

 DMA address to put in descriptor */

		/*

		 * If sg buffer larger than PDC limit, split across

		 * multiple descriptors

/**

 * pdc_irq_handler() - Interrupt handler called in interrupt context.

 * @irq:      Interrupt number that has fired

 * @data:     device struct for DMA engine that generated the interrupt

 *

 * We have to clear the device interrupt status flags here. So cache the

 * status for later use in the thread function. Other than that, just return

 * WAKE_THREAD to invoke the thread function.

 *

 * Return: IRQ_WAKE_THREAD if interrupt is ours

 *         IRQ_NONE otherwise

 Disable interrupts until soft handler runs */

 Clear interrupt flags in device */

 Wakeup IRQ thread */

/**

 * pdc_tasklet_cb() - Tasklet callback that runs the deferred processing after

 * a DMA receive interrupt. Reenables the receive interrupt.

 * @data: PDC state structure

 reenable interrupts */

/**

 * pdc_ring_init() - Allocate DMA rings and initialize constant fields of

 * descriptors in one ringset.

 * @pdcs:    PDC instance state

 * @ringset: index of ringset being used

 *

 * Return: PDC_SUCCESS if ring initialized

 *         < 0 otherwise

 Allocate tx ring */

 Allocate rx ring */

 Set descriptor array base addresses */

 Tell device the base DMA address of each ring */

 But first disable DMA and set curptr to 0 for both TX & RX */

 Set base DMA addresses */

 Re-enable DMA */

 Initialize descriptors */

 Every tx descriptor can be used for start of frame. */

 Last descriptor in ringset. Set End of Table. */

 Every rx descriptor can be used for start of frame */

 Last descriptor in ringset. Set End of Table. */

/**

 * pdc_desc_count() - Count the number of DMA descriptors that will be required

 * for a given scatterlist. Account for the max length of a DMA buffer.

 * @sg:    Scatterlist to be DMA'd

 * Return: Number of descriptors required

/**

 * pdc_rings_full() - Check whether the tx ring has room for tx_cnt descriptors

 * and the rx ring has room for rx_cnt descriptors.

 * @pdcs:  PDC state

 * @tx_cnt: The number of descriptors required in the tx ring

 * @rx_cnt: The number of descriptors required i the rx ring

 *

 * Return: true if one of the rings does not have enough space

 *         false if sufficient space is available in both rings

 Check if the tx and rx rings are likely to have enough space */

/**

 * pdc_last_tx_done() - If both the tx and rx rings have at least

 * PDC_RING_SPACE_MIN descriptors available, then indicate that the mailbox

 * framework can submit another message.

 * @chan:  mailbox channel to check

 * Return: true if PDC can accept another message on this channel

/**

 * pdc_send_data() - mailbox send_data function

 * @chan:	The mailbox channel on which the data is sent. The channel

 *              corresponds to a DMA ringset.

 * @data:	The mailbox message to be sent. The message must be a

 *              brcm_message structure.

 *

 * This function is registered as the send_data function for the mailbox

 * controller. From the destination scatterlist in the mailbox message, it

 * creates a sequence of receive descriptors in the rx ring. From the source

 * scatterlist, it creates a sequence of transmit descriptors in the tx ring.

 * After creating the descriptors, it writes the rx ptr and tx ptr registers to

 * initiate the DMA transfer.

 *

 * This function does the DMA map and unmap of the src and dst scatterlists in

 * the mailbox message.

 *

 * Return: 0 if successful

 *	   -ENOTSUPP if the mailbox message is a type this driver does not

 *			support

 *         < 0 if an error

	/*

	 * Check if the tx and rx rings have enough space. Do this prior to

	 * writing any tx or rx descriptors. Need to ensure that we do not write

	 * a partial set of descriptors, or write just rx descriptors but

	 * corresponding tx descriptors don't fit. Note that we want this check

	 * and the entire sequence of descriptor to happen without another

	 * thread getting in. The channel spin lock in the mailbox framework

	 * ensures this.

 Create rx descriptors to SPU catch response */

 Create tx descriptors to submit SPU request */

 initiate transfer */

/**

 * pdc_hw_init() - Use the given initialization parameters to initialize the

 * state for one of the PDCs.

 * @pdcs:  state of the PDC

 initialize data structures */

 Configure DMA but will enable later in pdc_ring_init() */

 Reset current index pointers after making sure DMA is disabled */

/**

 * pdc_hw_disable() - Disable the tx and rx control in the hw.

 * @pdcs: PDC state structure

 *

/**

 * pdc_rx_buf_pool_create() - Pool of receive buffers used to catch the metadata

 * header returned with each response message.

 * @pdcs: PDC state structure

 *

 * The metadata is not returned to the mailbox client. So the PDC driver

 * manages these buffers.

 *

 * Return: PDC_SUCCESS

 *         -ENOMEM if pool creation fails

/**

 * pdc_interrupts_init() - Initialize the interrupt configuration for a PDC and

 * specify a threaded IRQ handler for deferred handling of interrupts outside of

 * interrupt context.

 * @pdcs:   PDC state

 *

 * Set the interrupt mask for transmit and receive done.

 * Set the lazy interrupt frame count to generate an interrupt for just one pkt.

 *

 * Return:  PDC_SUCCESS

 *          <0 if threaded irq request fails

 interrupt configuration */

 read irq from device tree */

/**

 * pdc_mb_init() - Initialize the mailbox controller.

 * @pdcs:  PDC state

 *

 * Each PDC is a mailbox controller. Each ringset is a mailbox channel. Kernel

 * driver only uses one ringset and thus one mb channel. PDC uses the transmit

 * complete interrupt to determine when a mailbox message has successfully been

 * transmitted.

 *

 * Return: 0 on success

 *         < 0 if there is an allocation or registration failure

 Register mailbox controller */

 Device tree API */

 sentinel */ }

/**

 * pdc_dt_read() - Read application-specific data from device tree.

 * @pdev:  Platform device

 * @pdcs:  PDC state

 *

 * Reads the number of bytes of receive status that precede each received frame.

 * Reads whether transmit and received frames should be preceded by an 8-byte

 * BCM header.

 *

 * Return: 0 if successful

 *         -ENODEV if device not available

/**

 * pdc_probe() - Probe function for PDC driver.

 * @pdev:   PDC platform device

 *

 * Reserve and map register regions defined in device tree.

 * Allocate and initialize tx and rx DMA rings.

 * Initialize a mailbox controller for each PDC.

 *

 * Return: 0 if successful

 *         < 0 if an error

 PDC state for one SPU */

 Create DMA pool for tx ring */

 create rx buffer pool after dt read to know how big buffers are */

 Init tasklet for deferred DMA rx processing */

 Initialize mailbox controller */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2016 BayLibre SAS.

 * Author: Neil Armstrong <narmstrong@baylibre.com>

 * Synchronised with arm_mhu.c from :

 * Copyright (C) 2013-2015 Fujitsu Semiconductor Ltd.

 * Copyright (C) 2015 Linaro Ltd.

 * Author: Jassi Brar <jaswinder.singh@linaro.org>

 Allocate memory for device */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2017-2018 HiSilicon Limited.

 Copyright (c) 2017-2018 Linaro Limited.

/**

 * Hi3660 mailbox channel information

 *

 * A channel can be used for TX or RX, it can trigger remote

 * processor interrupt to notify remote processor and can receive

 * interrupt if has incoming message.

 *

 * @dst_irq:	Interrupt vector for remote processor

 * @ack_irq:	Interrupt vector for local processor

/**

 * Hi3660 mailbox controller data

 *

 * Mailbox controller includes 32 channels and can allocate

 * channel for message transferring.

 *

 * @dev:	Device to which it is attached

 * @base:	Base address of the register mapping region

 * @chan:	Representation of channels in mailbox controller

 * @mchan:	Representation of channel info

 * @controller:	Representation of a communication channel controller

 Mailbox is ready to use */

 Wait for acknowledge from remote */

 clear ack state, mailbox will get back to ready state */

 Check if channel is in idle state */

 Check ack bit has been set successfully */

 Clear mask for destination interrupt */

 Config destination for interrupt vector */

 Automatic acknowledge mode */

 Fill message data */

 Trigger data transferring */

 Initialize mailbox channel data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Spreadtrum mailbox driver

 *

 * Copyright (c) 2020 Spreadtrum Communications Inc.

 Bit and mask definition for inbox's SPRD_MBOX_FIFO_STS register */

 Bit and mask definition for SPRD_MBOX_IRQ_STS register */

 Bit and mask definition for outbox's SPRD_MBOX_FIFO_STS register */

 Bit and mask definition for inbox's SPRD_MBOX_IRQ_MSK register */

 Bit and mask definition for outbox's SPRD_MBOX_IRQ_MSK register */

  Base register address for supplementary outbox */

	/*

	 * If the read pointer is equal with write pointer, which means the fifo

	 * is full or empty.

 Trigger to update outbox FIFO pointer */

 Clear irq status after reading all message. */

 Get the inbox data delivery status */

		/*

		 * Check if the message was fetched by remote target, if yes,

		 * that means the transmission has been completed.

 Clear FIFO delivery and overflow status */

 Clear irq status */

 Write data into inbox FIFO, and only support 8 bytes every time */

 Set target core id */

 Trigger remote request */

 Select outbox FIFO mode and reset the outbox FIFO status */

 Enable inbox FIFO overflow and delivery interrupt */

 Enable outbox FIFO not empty interrupt */

 Enable supplementary outbox as the fundamental one */

 Disable inbox & outbox interrupt */

	/*

	 * Unisoc mailbox uses an inbox to send messages to the target

	 * core, and uses (an) outbox(es) to receive messages from other

	 * cores.

	 *

	 * Thus in general the mailbox controller supplies 2 different

	 * register addresses and IRQ numbers for inbox and outbox.

	 *

	 * If necessary, a supplementary inbox could be enabled optionally

	 * with an independent FIFO and an extra interrupt.

 Supplementary outbox IRQ is optional */

 Get the default outbox FIFO depth */

 SPDX-License-Identifier: GPL-2.0-only OR MIT

/*

 * Apple mailbox driver

 *

 * Copyright (C) 2021 The Asahi Linux Contributors

 *

 * This driver adds support for two mailbox variants (called ASC and M3 by

 * Apple) found in Apple SoCs such as the M1. It consists of two FIFOs used to

 * exchange 64+32 bit messages between the main CPU and a co-processor.

 * Various coprocessors implement different IPC protocols based on these simple

 * messages and shared memory buffers.

 *

 * Both the main CPU and the co-processor see the same set of registers but

 * the first FIFO (A2I) is always used to transfer messages from the application

 * processor (us) to the I/O processor and the second one (I2A) for the

 * other direction.

	/*

	 * The interrupt is level triggered and will keep firing as long as the

	 * FIFO is empty. It will also keep firing if the FIFO was empty

	 * at any point in the past until it has been acknowledged at the

	 * mailbox level. By acknowledging it here we can ensure that we will

	 * only get the interrupt once the FIFO has been cleared again.

	 * If the FIFO is already empty before the ack it will fire again

	 * immediately after the ack.

	/*

	 * We don't need to acknowledge the interrupt at the mailbox level

	 * here even if supported by the hardware. It will keep firing but that

	 * doesn't matter since it's disabled at the main interrupt controller.

	 * apple_mbox_chan_send_data will acknowledge it before enabling

	 * it at the main controller again.

	/*

	 * The interrupt will keep firing even if there are no more messages

	 * unless we also acknowledge it at the mailbox level here.

	 * There's no race if a message comes in between the check in the while

	 * loop above and the ack below: If a new messages arrives inbetween

	 * those two the interrupt will just fire again immediately after the

	 * ack since it's level triggered.

	/*

	 * Only some variants of this mailbox HW provide interrupt control

	 * at the mailbox level. We therefore need to handle enabling/disabling

	 * interrupts at the main interrupt controller anyway for hardware that

	 * doesn't. Just always keep the interrupts we care about enabled at

	 * the mailbox level so that both hardware revisions behave almost

	 * the same.

 SPDX-License-Identifier: GPL-2.0

/*

 * OMAP mailbox driver

 *

 * Copyright (C) 2006-2009 Nokia Corporation. All rights reserved.

 * Copyright (C) 2013-2021 Texas Instruments Incorporated - https://www.ti.com

 *

 * Contact: Hiroshi DOYU <Hiroshi.DOYU@nokia.com>

 *          Suman Anna <s-anna@ti.com>

 Interrupt register configuration types */

 global variables for the mailbox devices */

 Mailbox FIFO handle functions */

 Mailbox IRQ handle functions */

 Flush posted write for irq status to avoid spurious interrupts */

	/*

	 * Read and update the interrupt configuration register for pre-OMAP4.

	 * OMAP4 and later SoCs have a dedicated interrupt disabling register.

/*

 * Message receiver(workqueue)

/*

 * Mailbox interrupt handler

 no more messages in the fifo. clear IRQ source. */

 we must read and ack the interrupt directly from here */

 always enable the interrupt */

 end */

 allocate one extra for marking end of list */

	/*

	 * OMAP/K3 Mailbox IP does not have a Tx-Done IRQ, but rather a Tx-Ready

	 * IRQ and is needed to run the Tx state machine

	/*

	 * just print the raw revision register, the format is not

	 * uniform across all SoCs

 kfifo size sanity check: alignment and minimal size */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * APM X-Gene SLIMpro MailBox Driver

 *

 * Copyright (c) 2015, Applied Micro Circuits Corporation

 * Author: Feng Kan fkan@apm.com

 Configuration and Status Registers */

/**

 * X-Gene SlimPRO mailbox channel information

 *

 * @dev:	Device to which it is attached

 * @chan:	Pointer to mailbox communication channel

 * @reg:	Base address to access channel registers

 * @irq:	Interrupt number of the channel

 * @rx_msg:	Received message storage

/**

 * X-Gene SlimPRO Mailbox controller data

 *

 * X-Gene SlimPRO Mailbox controller has 8 communication channels.

 * Each channel has a separate IRQ number assigned to it.

 *

 * @mb_ctrl:	Representation of the communication channel controller

 * @mc:		Array of SlimPRO mailbox channels of the controller

 * @chans:	Array of mailbox communication channels

 *

 Enable HW interrupt */

 Unmask doorbell status interrupt */

 Mask doorbell status interrupt */

 Setup mailbox links */

 Setup mailbox controller */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2012 Calxeda, Inc.

 blocking implementation from the A9 side, not usable in interrupts! */

 Init slow mailbox */

 Init receive mailbox */

/*

 * Copyright (C) 2017 Broadcom

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 * Broadcom FlexRM Mailbox Driver

 *

 * Each Broadcom FlexSparx4 offload engine is implemented as an

 * extension to Broadcom FlexRM ring manager. The FlexRM ring

 * manager provides a set of rings which can be used to submit

 * work to a FlexSparx4 offload engine.

 *

 * This driver creates a mailbox controller using a set of FlexRM

 * rings where each mailbox channel represents a separate FlexRM ring.

 ====== FlexRM register defines ===== */

 FlexRM configuration */

 Per-Ring register offsets */

 Register RING_BD_START_ADDR fields */

 Register RING_CMPL_START_ADDR fields */

 Register RING_CONTROL fields */

 Register RING_FLUSH_DONE fields */

 Register RING_MSI_CONTROL fields */

 Register RING_BD_READ_PTR_DDR_CONTROL fields */

 ====== FlexRM ring descriptor defines ===== */

 Completion descriptor format */

 Completion DME status code */

 Completion RM status code */

 General descriptor format */

 Null descriptor format  */

 Header descriptor format */

 Source (SRC) descriptor format */

 Destination (DST) descriptor format */

 Immediate (IMM) descriptor format */

 Next pointer (NPTR) descriptor format */

 Mega source (MSRC) descriptor format */

 Mega destination (MDST) descriptor format */

 Source with tlast (SRCT) descriptor format */

 Destination with tlast (DSTT) descriptor format */

 Immediate with tlast (IMMT) descriptor format */

 Descriptor helper macros */

 ====== FlexRM data structures ===== */

 Unprotected members */

 Atomic stats */

 Protected members */

 ====== FlexRM ring descriptor helper routines ===== */

 Sanity check */

	/*

	 * Each request or packet start with a HEADER descriptor followed

	 * by one or more non-HEADER descriptors (SRC, SRCT, MSRC, DST,

	 * DSTT, MDST, IMM, and IMMT). The number of non-HEADER descriptors

	 * following a HEADER descriptor is represented by BDCOUNT field

	 * of HEADER descriptor. The max value of BDCOUNT field is 31 which

	 * means we can only have 31 non-HEADER descriptors following one

	 * HEADER descriptor.

	 *

	 * In general use, number of non-HEADER descriptors can easily go

	 * beyond 31. To tackle this situation, we have packet (or request)

	 * extension bits (STARTPKT and ENDPKT) in the HEADER descriptor.

	 *

	 * To use packet extension, the first HEADER descriptor of request

	 * (or packet) will have STARTPKT=1 and ENDPKT=0. The intermediate

	 * HEADER descriptors will have STARTPKT=0 and ENDPKT=0. The last

	 * HEADER descriptor will have STARTPKT=0 and ENDPKT=1. Also, the

	 * TOGGLE bit of the first HEADER will be set to invalid state to

	 * ensure that FlexRM does not start fetching descriptors till all

	 * descriptors are enqueued. The user of this function will flip

	 * the TOGGLE bit of first HEADER after all descriptors are

	 * enqueued.

 Prepare the header descriptor */

 Write header descriptor */

 Point to next descriptor */

 Skip next pointer descriptors */

 Write desired descriptor */

 Point to next descriptor */

 Skip next pointer descriptors */

 Null descriptor with invalid toggle bit */

 Ensure that descriptors have been written to memory */

 Flip toggle bit in header */

 Convert SBA commands into descriptors */

 Destination response descriptor */

 Destination response with tlast descriptor */

 Destination with tlast descriptor */

 Command as immediate descriptor */

 Command as immediate descriptor with tlast */

 Source with tlast descriptor */

 Null descriptor with invalid toggle bit */

 Ensure that descriptors have been written to memory */

 Flip toggle bit in header */

 ====== FlexRM driver helper routines ===== */

 Do sanity check on message */

 If no requests possible then save data pointer and goto done. */

 Do DMA mappings for the message */

 Determine current HW BD read offset */

	/*

	 * Number required descriptors = number of non-header descriptors +

	 *				 number of header descriptors +

	 *				 1x null descriptor

 Check for available descriptor space. */

 Write descriptors to ring */

 Save ring BD write offset */

 Increment number of messages sent */

 Update error status in message */

 Cleanup if we failed */

	/*

	 * Get current completion read and write offset

	 *

	 * Note: We should read completion write pointer at least once

	 * after we get a MSI interrupt because HW maintains internal

	 * MSI status which will allow next MSI interrupt only after

	 * completion write pointer is read.

 For each completed request notify mailbox clients */

 Dequeue next completion descriptor */

 Next read offset */

 Decode error from completion descriptor */

 Determine request id from completion descriptor */

 Determine message pointer based on reqid */

 Release reqid for recycling */

 Unmap DMA mappings */

 Give-back message to mailbox client */

 Increment number of completions processed */

 ====== FlexRM Debugfs callbacks ====== */

 Write config in file */

 Write stats in file */

 ====== FlexRM interrupt handler ===== */

 We only have MSI for completions so just wakeup IRQ thread */

 Ring related errors will be informed via completion descriptors */

 ====== FlexRM mailbox callbacks ===== */

 Allocate BD memory */

 Configure next table pointer entries in BD memory */

 Allocate completion memory */

 Request IRQ */

 Set IRQ affinity hint */

 Disable/inactivate ring */

 Program BD start address */

 BD write pointer will be same as HW write pointer */

 Program completion start address */

 Completion read pointer will be same as HW write pointer */

 Read ring Tx, Rx, and Outstanding counts to clear */

 Configure RING_MSI_CONTROL */

 Enable/activate ring */

 Reset stats to zero */

 Disable/inactivate ring */

 Set ring flush state */

 timeout of 1s */

 Clear ring flush state */

 timeout of 1s */

 Abort all in-flight requests */

 Release reqid for recycling */

 Unmap DMA mappings */

 Give-back message to mailbox client */

 Clear requests bitmap */

 Release IRQ */

 Free-up completion descriptor ring */

 Free-up BD descriptor ring */

 ====== FlexRM platform driver ===== */

 Configure per-Ring MSI registers */

 Allocate driver mailbox struct */

 Get resource for registers */

 Map registers of all rings */

 Scan and count available rings */

 Allocate driver ring structs */

 Initialize members of driver ring structs */

 FlexRM is capable of 40-bit physical addresses only */

 Create DMA pool for ring BD memory */

 Create DMA pool for ring completion memory */

 Allocate platform MSIs for each ring */

 Save alloced IRQ numbers for each ring */

 Check availability of debugfs */

 Create debugfs root entry */

 Create debugfs config entry */

 Create debugfs stats entry */

 Initialize mailbox controller */

 Register mailbox controller */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright Altera Corporation (C) 2013-2014. All rights reserved

 polling interval 5ms */

 1-sender, 0-receiver */

 If the controller supports only RX polling mode */

	/* Write a magic number to PTR register and read back this register.

	 * This register is read-write if it is a sender.

 Clear to 0 */

 use polling if failed */

 Setup polling timer */

 Enable interrupt before send */

 Pointer register must write before command register */

 Return false if mailbox is full */

 Unmask all interrupt masks */

 Allocated one channel */

 Check is it a sender or receiver? */

 Hardware supports only one channel. */

 Sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2015 ST Microelectronics

 *

 * Author: Lee Jones <lee.jones@linaro.org>

 Only allocate memory if we need to */

	/*

	 * A separate signal is only of use if there is

	 * MMIO to subsequently pass the message through

 It's okay for MMIO to be NULL */

 if reserved area in SRAM, try just ioremap */

 If specified, second reg entry is Rx MMIO */

 If Rx is not specified but has Rx MMIO, then Rx = Tx */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 IPCC Register offsets */

/**

 * struct qcom_ipcc_chan_info - Per-mailbox-channel info

 * @client_id:	The client-id to which the interrupt has to be triggered

 * @signal_id:	The signal-id to which the interrupt has to be triggered

/**

 * struct qcom_ipcc - Holder for the mailbox driver

 * @dev:		Device associated with this instance

 * @base:		Base address of the IPCC frame associated to APSS

 * @irq_domain:		The irq_domain associated with this instance

 * @chan:		The mailbox channels array

 * @mchan:		The per-mailbox channel info array

 * @mbox:		The mailbox controller

 * @irq:		Summary irq

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Hisilicon's Hi6220 mailbox driver

 *

 * Copyright (c) 2015 HiSilicon Limited.

 * Copyright (c) 2015 Linaro Limited.

 *

 * Author: Leo Yan <leo.yan@linaro.org>

 Mailbox message length: 8 words */

 Mailbox Registers */

 IPC registers */

	/*

	 * Description for channel's hardware info:

	 *  - direction: tx or rx

	 *  - dst irq: peer core's irq number

	 *  - ack irq: local irq number

	 *  - slot number

 flag of enabling tx's irq mode */

 region for ipc event */

 region for mailbox */

 Only set idle state for polling mode */

 indicate as a TX channel */

 trigger remote request */

 clear IRQ source */

 enable interrupt */

 disable interrupt */

 Bounds checking */

 Is requested channel free? */

 mask and clear all interrupt vectors */

 use interrupt for tx's ack */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, Fuzhou Rockchip Electronics Co., Ltd

 The maximum size of buf for each channel */

 Enable all B2A interrupts */

 Disable all B2A interrupts */

 Clear mbox interrupt */

 spurious */

 Each channel has two buffers for A2B and B2A */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2017-2019 Samuel Holland <samuel@sholland.org>

 Only examine channels that are currently enabled. */

 The IRQ can be cleared only once the FIFO is empty. */

 Using a channel backwards gets the hardware into a bad state. */

 The coprocessor is responsible for setting channel directions. */

 Flush the receive FIFO. */

 Enable the receive IRQ. */

 Disable the receive IRQ. */

 Attempt to flush the FIFO until the IRQ is cleared. */

	/*

	 * The hardware allows snooping on the remote user's IRQ statuses.

	 * We consider a message to be acknowledged only once the receive IRQ

	 * for that channel is cleared. Since the receive IRQ for a channel

	 * cannot be cleared until the FIFO for that channel is empty, this

	 * ensures that the message has actually been read. It also gives the

	 * recipient an opportunity to perform minimal processing before

	 * acknowledging the message.

	/*

	 * NOTE: We rely on platform firmware to preconfigure the channel

	 * directions, and we share this hardware block with other firmware

	 * that runs concurrently with Linux (e.g. a trusted monitor).

	 *

	 * Therefore, we do *not* assert the reset line if probing fails or

	 * when removing the device.

 Disable all IRQs for this end of the msgbox. */

 See the comment in sun6i_msgbox_probe about the reset line. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Mailbox: Common code for Mailbox controllers and users

 *

 * Copyright (C) 2013-2014 Linaro Ltd.

 * Author: Jassi Brar <jassisinghbrar@gmail.com>

 See if there is any space left */

 Try to submit a message to the MBOX controller */

 kick start the timer immediately to avoid delays */

 but only if not already active */

 Submit next message */

 Notify the client */

/**

 * mbox_chan_received_data - A way for controller driver to push data

 *				received from remote to the upper layer.

 * @chan: Pointer to the mailbox channel on which RX happened.

 * @mssg: Client specific message typecasted as void *

 *

 * After startup and before shutdown any data received on the chan

 * is passed on to the API via atomic mbox_chan_received_data().

 * The controller should ACK the RX only after this call returns.

 No buffering the received data */

/**

 * mbox_chan_txdone - A way for controller driver to notify the

 *			framework that the last TX has completed.

 * @chan: Pointer to the mailbox chan on which TX happened.

 * @r: Status of last TX - OK or ERROR

 *

 * The controller that has IRQ for TX ACK calls this atomic API

 * to tick the TX state machine. It works only if txdone_irq

 * is set by the controller.

/**

 * mbox_client_txdone - The way for a client to run the TX state machine.

 * @chan: Mailbox channel assigned to this client.

 * @r: Success status of last transmission.

 *

 * The client/protocol had received some 'ACK' packet and it notifies

 * the API that the last packet was sent successfully. This only works

 * if the controller can't sense TX-Done.

/**

 * mbox_client_peek_data - A way for client driver to pull data

 *			received from remote by the controller.

 * @chan: Mailbox channel assigned to this client.

 *

 * A poke to controller driver for any received data.

 * The data is actually passed onto client via the

 * mbox_chan_received_data()

 * The call can be made from atomic context, so the controller's

 * implementation of peek_data() must not sleep.

 *

 * Return: True, if controller has, and is going to push after this,

 *          some data.

 *         False, if controller doesn't have any data to be read.

/**

 * mbox_send_message -	For client to submit a message to be

 *				sent to the remote.

 * @chan: Mailbox channel assigned to this client.

 * @mssg: Client specific message typecasted.

 *

 * For client to submit data to the controller destined for a remote

 * processor. If the client had set 'tx_block', the call will return

 * either when the remote receives the data or when 'tx_tout' millisecs

 * run out.

 *  In non-blocking mode, the requests are buffered by the API and a

 * non-negative token is returned for each queued request. If the request

 * is not queued, a negative token is returned. Upon failure or successful

 * TX, the API calls 'tx_done' from atomic context, from which the client

 * could submit yet another request.

 * The pointer to message should be preserved until it is sent

 * over the chan, i.e, tx_done() is made.

 * This function could be called from atomic context as it simply

 * queues the data and returns a token against the request.

 *

 * Return: Non-negative integer for successful submission (non-blocking mode)

 *	or transmission over chan (blocking mode).

 *	Negative value denotes failure.

 wait forever */

/**

 * mbox_flush - flush a mailbox channel

 * @chan: mailbox channel to flush

 * @timeout: time, in milliseconds, to allow the flush operation to succeed

 *

 * Mailbox controllers that need to work in atomic context can implement the

 * ->flush() callback to busy loop until a transmission has been completed.

 * The implementation must call mbox_chan_txdone() upon success. Clients can

 * call the mbox_flush() function at any time after mbox_send_message() to

 * flush the transmission. After the function returns success, the mailbox

 * transmission is guaranteed to have completed.

 *

 * Returns: 0 on success or a negative error code on failure.

/**

 * mbox_request_channel - Request a mailbox channel.

 * @cl: Identity of the client requesting the channel.

 * @index: Index of mailbox specifier in 'mboxes' property.

 *

 * The Client specifies its requirements and capabilities while asking for

 * a mailbox channel. It can't be called from atomic context.

 * The channel is exclusively allocated and can't be used by another

 * client before the owner calls mbox_free_channel.

 * After assignment, any packet received on this channel will be

 * handed over to the client via the 'rx_callback'.

 * The framework holds reference to the client, so the mbox_client

 * structure shouldn't be modified until the mbox_free_channel returns.

 *

 * Return: Pointer to the channel assigned to the client if successful.

 *		ERR_PTR for request failure.

/**

 * mbox_free_channel - The client relinquishes control of a mailbox

 *			channel by this call.

 * @chan: The mailbox channel to be freed.

 The queued TX requests are simply aborted, no callbacks are made */

/**

 * mbox_controller_register - Register the mailbox controller

 * @mbox:	Pointer to the mailbox controller.

 *

 * The controller driver registers its communication channels

 Sanity check */

 It has to be ACK then */

/**

 * mbox_controller_unregister - Unregister the mailbox controller

 * @mbox:	Pointer to the mailbox controller.

/**

 * devm_mbox_controller_register() - managed mbox_controller_register()

 * @dev: device owning the mailbox controller being registered

 * @mbox: mailbox controller being registered

 *

 * This function adds a device-managed resource that will make sure that the

 * mailbox controller, which is registered using mbox_controller_register()

 * as part of this function, will be unregistered along with the rest of

 * device-managed resources upon driver probe failure or driver removal.

 *

 * Returns 0 on success or a negative error code on failure.

/**

 * devm_mbox_controller_unregister() - managed mbox_controller_unregister()

 * @dev: device owning the mailbox controller being unregistered

 * @mbox: mailbox controller being unregistered

 *

 * This function unregisters the mailbox controller and removes the device-

 * managed resource that was set up to automatically unregister the mailbox

 * controller on driver probe failure or driver removal. It's typically not

 * necessary to call this function.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016-2018, NVIDIA CORPORATION.  All rights reserved.

		/*

		 * Depending on the bootloader chain, the CCPLEX doorbell will

		 * have some doorbells enabled, which means that requesting an

		 * interrupt will immediately fire.

		 *

		 * In that case, db->channel.chan will still be NULL here and

		 * cause a crash if not properly guarded.

		 *

		 * It remains to be seen if ignoring the doorbell in that case

		 * is the correct solution.

 process EMPTY interrupts first */

			/*

			 * Disable EMPTY interrupts until data is sent with

			 * the next message. These interrupts are level-

			 * triggered, so if we kept them enabled they would

			 * constantly trigger until we next write data into

			 * the message.

 process FULL interrupts */

			/*

			 * Need to clear all bits here since some producers,

			 * such as TCU, depend on fields in the register

			 * getting cleared by the consumer.

			 *

			 * The mailbox API doesn't give the consumers a way

			 * of doing that explicitly, so we have to make sure

			 * we cover all possible cases.

	/*

	 * On simulation platforms the BPMP hasn't had a chance yet to mark

	 * the doorbell as ringable by the CCPLEX, so we want to skip extra

	 * checks here.

 copy data and mark mailbox full */

 enable EMPTY interrupt for the shared mailbox */

	/*

	 * Shared mailboxes start out as consumers by default. FULL and EMPTY

	 * interrupts are coalesced at the same shared interrupt.

	 *

	 * Keep EMPTY interrupts disabled at startup and only enable them when

	 * the mailbox is actually full. This is required because the FULL and

	 * EMPTY interrupts are level-triggered, so keeping EMPTY interrupts

	 * enabled all the time would cause an interrupt storm while mailboxes

	 * are idle.

 disable all interrupts */

 setup the doorbell controller */

 setup the shared mailbox controller */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * ARM Message Handling Unit Version 2 (MHUv2) driver.

 *

 * Copyright (C) 2020 ARM Ltd.

 * Copyright (C) 2020 Linaro Ltd.

 *

 * An MHUv2 mailbox controller can provide up to 124 channel windows (each 32

 * bit long) and the driver allows any combination of both the transport

 * protocol modes: data-transfer and doorbell, to be used on those channel

 * windows.

 *

 * The transport protocols should be specified in the device tree entry for the

 * device. The transport protocols determine how the underlying hardware

 * resources of the device are utilized when transmitting data. Refer to the

 * device tree bindings of the ARM MHUv2 controller for more details.

 *

 * The number of registered mailbox channels is dependent on both the underlying

 * hardware - mainly the number of channel windows implemented by the platform,

 * as well as the selected transport protocols.

 *

 * The MHUv2 controller can work both as a sender and receiver, but the driver

 * and the DT bindings support unidirectional transfers for better allocation of

 * the channels. That is, this driver will be probed for two separate devices

 * for each mailbox controller, a sender device and a receiver device.

 ====== MHUv2 Registers ====== */

 Maximum number of channel windows */

 Number of combined interrupt status registers */

 Register Message Handling Unit Configuration fields */

 register Interrupt Status fields */

 Register Interrupt Clear fields */

 Register Interrupt Enable fields */

 Register Implementer Identification fields */

 Register Architecture Identification Register fields */

 Sender Channel Window fields */

 Sender frame register fields */

 Receiver Channel Window fields */

 Receiver frame register fields */

 ====== MHUv2 data structures ====== */

/**

 * struct mhuv2 - MHUv2 mailbox controller data

 *

 * @mbox:	Mailbox controller belonging to the MHU frame.

 * @send/recv:	Base address of the register mapping region.

 * @frame:	Frame type: RECEIVER_FRAME or SENDER_FRAME.

 * @irq:	Interrupt.

 * @windows:	Channel windows implemented by the platform.

 * @minor:	Minor version of the controller.

 * @length:	Length of the protocols array in bytes.

 * @protocols:	Raw protocol information, derived from device tree.

 * @doorbell_pending_lock: spinlock required for correct operation of Tx

 *		interrupt for doorbells.

/**

 * struct mhuv2_protocol_ops - MHUv2 operations

 *

 * Each transport protocol must provide an implementation of the operations

 * provided here.

 *

 * @rx_startup: Startup callback for receiver.

 * @rx_shutdown: Shutdown callback for receiver.

 * @read_data: Reads and clears newly available data.

 * @tx_startup: Startup callback for receiver.

 * @tx_shutdown: Shutdown callback for receiver.

 * @last_tx_done: Report back if the last tx is completed or not.

 * @send_data: Send data to the receiver.

/*

 * MHUv2 mailbox channel's private information

 *

 * @ops:	protocol specific ops for the channel.

 * @ch_wn_idx:	Channel window index allocated to the channel.

 * @windows:	Total number of windows consumed by the channel, only relevant

 *		in DATA_TRANSFER protocol.

 * @doorbell:	Doorbell bit number within the ch_wn_idx window, only relevant

 *		in DOORBELL protocol.

 * @pending:	Flag indicating pending doorbell interrupt, only relevant in

 *		DOORBELL protocol.

 Macro for reading a bitfield within a physically mapped packed struct */

 Macro for writing a bitfield within a physically mapped packed struct */

 =================== Doorbell transport protocol operations =============== */

 ============= Data transfer transport protocol operations ================ */

	/*

	 * The protocol mandates that all but the last status register must be

	 * masked.

	/*

	 * Messages are expected in order of most significant word to least

	 * significant word. Refer mhuv2_data_transfer_send_data() for more

	 * details.

	 *

	 * We also need to read the stat register instead of stat_masked, as we

	 * masked all but the last window.

	 *

	 * Last channel window must be cleared as the final operation. Upon

	 * clearing the last channel window register, which is unmasked in

	 * data-transfer protocol, the interrupt is de-asserted.

 Enable interrupts only for the last window */

 Just checking the last channel window should be enough */

/*

 * Message will be transmitted from most significant to least significant word.

 * This is to allow for messages shorter than channel windows to still trigger

 * the receiver interrupt which gets activated when the last stat register is

 * written. As an example, a 6-word message is to be written on a 4-channel MHU

 * connection: Registers marked with '*' are masked, and will not generate an

 * interrupt on the receiver side once written.

 *

 * u32 *data =	[0x00000001], [0x00000002], [0x00000003], [0x00000004],

 *		[0x00000005], [0x00000006]

 *

 * ROUND 1:

 * stat reg		To write	Write sequence

 * [ stat 3 ]	<-	[0x00000001]	4 <- triggers interrupt on receiver

 * [ stat 2 ]	<-	[0x00000002]	3

 * [ stat 1 ]	<-	[0x00000003]	2

 * [ stat 0 ]	<-	[0x00000004]	1

 *

 * data += 4 // Increment data pointer by number of stat regs

 *

 * ROUND 2:

 * stat reg		To write	Write sequence

 * [ stat 3 ]	<-	[0x00000005]	2 <- triggers interrupt on receiver

 * [ stat 2 ]	<-	[0x00000006]	1

 * [ stat 1 ]	<-	[0x00000000]

 * [ stat 0 ]	<-	[0x00000000]

 Data less than windows can transfer ? */

 Interrupt handlers */

 Return first chan of the window in doorbell mode */

 Clear the interrupt first, so we don't miss any doorbell later */

	/*

	 * In Doorbell mode, make sure no new transitions happen while the

	 * interrupt handler is trying to find the finished doorbell tx

	 * operations, else we may think few of the transfers were complete

	 * before they actually were.

	/*

	 * In case of doorbell mode, the first channel of the window is returned

	 * by get_irq_chan_comb(). Find all the pending channels here.

 Find cases where pending was 1, but stat's bit is cleared */

		/*

		 * We may have already processed the doorbell in the previous

		 * iteration if the interrupt came right after we cleared it but

		 * before we read the stat register.

	/*

	 * In case of doorbell mode, the first channel of the window is returned

	 * by the routine. Find the exact channel here.

 Read and clear the data first */

 Sender and receiver ops */

			/*

			 * Permanently enable interrupt as we can't

			 * control it per doorbell.

 Make sure we have initialized all channels */

	/*

	 * For minor version 1 and forward, tx interrupt is provided by

	 * the controller.

 Disable all channel interrupts */

 Wait for receiver to be ready */

 Mask all the channel windows */

 Channel windows can't be 0 */

 2.0 */

 2.1 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * STi Mailbox

 *

 * Copyright (C) 2015 ST Microelectronics

 *

 * Author: Lee Jones <lee.jones@linaro.org> for ST Microelectronics

 *

 * Based on the original driver written by;

 *   Alexandre Torgue, Olivier Lebreton and Loic Pallardy

 RAM saving: Max supported instances */

 RAM saving: Max supported channels  */

 Read interrupt status	              */

 Generate a Tx channel interrupt     */

 Clear pending Rx interrupts	      */

 Read enable status		      */

 Enable a channel		      */

 Disable a channel		      */

/**

 * struct sti_mbox_device - STi Mailbox device data

 *

 * @dev:	Device to which it is attached

 * @mbox:	Representation of a communication channel controller

 * @base:	Base address of the register mapping region

 * @name:	Name of the mailbox

 * @enabled:	Local copy of enabled channels

 * @lock:	Mutex protecting enabled status

 *

 * An IP Mailbox is currently composed of 4 instances

 * Each instance is currently composed of 32 channels

 * This means that we have 128 channels per Mailbox

 * A channel an be used for TX or RX

/**

 * struct sti_mbox_pdata - STi Mailbox platform specific configuration

 *

 * @num_inst:	Maximum number of instances in one HW Mailbox

 * @num_chan:	Maximum number of channel per instance

/**

 * struct sti_channel - STi Mailbox allocated channel information

 *

 * @mdev:	Pointer to parent Mailbox device

 * @instance:	Instance number channel resides in

 * @channel:	Channel number pertaining to this container

 No IRQs fired in specified instance */

 An IRQ has fired, find the associated channel */

 Only handle IRQ if no other valid IRQs were found */

 Send event to co-processor */

 Reset channel */

 Bounds checking */

 Is requested channel free? */

		/*

		 * Find the first free slot, then continue checking

		 * to see if requested channel is in use

 STi Mailbox does not have a Tx-Done or Tx-Ready IRQ */

 It's okay for Tx Mailboxes to not supply IRQs */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Copyright (C) 2014 Linaro Ltd.

 *	Author:	Ashwin Chaugule <ashwin.chaugule@linaro.org>

 *

 *  PCC (Platform Communication Channel) is defined in the ACPI 5.0+

 *  specification. It is a mailbox like mechanism to allow clients

 *  such as CPPC (Collaborative Processor Performance Control), RAS

 *  (Reliability, Availability and Serviceability) and MPST (Memory

 *  Node Power State Table) to talk to the platform (e.g. BMC) through

 *  shared memory regions as defined in the PCC table entries. The PCC

 *  specification supports a Doorbell mechanism for the PCC clients

 *  to notify the platform about new data. This Doorbell information

 *  is also specified in each PCC table entry.

 *

 *  Typical high level flow of operation is:

 *

 *  PCC Reads:

 *  * Client tries to acquire a channel lock.

 *  * After it is acquired it writes READ cmd in communication region cmd

 *		address.

 *  * Client issues mbox_send_message() which rings the PCC doorbell

 *		for its PCC channel.

 *  * If command completes, then client has control over channel and

 *		it can proceed with its reads.

 *  * Client releases lock.

 *

 *  PCC Writes:

 *  * Client tries to acquire channel lock.

 *  * Client writes to its communication region after it acquires a

 *		channel lock.

 *  * Client writes WRITE cmd in communication region cmd address.

 *  * Client issues mbox_send_message() which rings the PCC doorbell

 *		for its PCC channel.

 *  * If command completes, then writes have succeeded and it can release

 *		the channel lock.

 *

 *  There is a Nominal latency defined for each channel which indicates

 *  how long to wait until a command completes. If command is not complete

 *  the client needs to retry or assume failure.

 *

 *	For more details about PCC, please see the ACPI specification from

 *  http://www.uefi.org/ACPIv5.1 Section 14.

 *

 *  This file implements PCC as a Mailbox controller and allows for PCC

 *  clients to be implemented as its Mailbox Client Channels.

/**

 * struct pcc_chan_reg - PCC register bundle

 *

 * @vaddr: cached virtual address for this register

 * @gas: pointer to the generic address structure for this register

 * @preserve_mask: bitmask to preserve when writing to this register

 * @set_mask: bitmask to set when writing to this register

 * @status_mask: bitmask to determine and/or update the status for this register

/**

 * struct pcc_chan_info - PCC channel specific information

 *

 * @chan: PCC channel information with Shared Memory Region info

 * @db: PCC register bundle for the doorbell register

 * @plat_irq_ack: PCC register bundle for the platform interrupt acknowledge

 *	register

 * @cmd_complete: PCC register bundle for the command complete check register

 * @cmd_update: PCC register bundle for the command complete update register

 * @error: PCC register bundle for the error status register

 * @plat_irq: platform interrupt

/*

 * PCC can be used with perf critical drivers such as CPPC

 * So it makes sense to locally cache the virtual address and

 * use it to read/write to PCC registers such as doorbell register

 *

 * The below read_register and write_registers are used to read and

 * write from perf critical registers such as PCC doorbell register

/**

 * pcc_map_interrupt - Map a PCC subspace GSI to a linux IRQ number

 * @interrupt: GSI number.

 * @flags: interrupt flags

 *

 * Returns: a valid linux IRQ number on success

 *		0 or -EINVAL on failure

/**

 * pcc_mbox_irq - PCC mailbox interrupt handler

 * @irq:	interrupt number

 * @p: data/cookie passed from the caller to identify the channel

 *

 * Returns: IRQ_HANDLED if interrupt is handled or IRQ_NONE if not

/**

 * pcc_mbox_request_channel - PCC clients call this function to

 *		request a pointer to their PCC subspace, from which they

 *		can get the details of communicating with the remote.

 * @cl: Pointer to Mailbox client, so we know where to bind the

 *		Channel.

 * @subspace_id: The PCC Subspace index as parsed in the PCC client

 *		ACPI package. This is used to lookup the array of PCC

 *		subspaces as parsed by the PCC Mailbox controller.

 *

 * Return: Pointer to the PCC Mailbox Channel if successful or ERR_PTR.

/**

 * pcc_mbox_free_channel - Clients call this to free their Channel.

 *

 * @pchan: Pointer to the PCC mailbox channel as returned by

 *	   pcc_mbox_request_channel()

/**

 * pcc_send_data - Called from Mailbox Controller code. Used

 *		here only to ring the channel doorbell. The PCC client

 *		specific read/write is done in the client driver in

 *		order to maintain atomicity over PCC channel once

 *		OS has control over it. See above for flow of operations.

 * @chan: Pointer to Mailbox channel over which to send data.

 * @data: Client specific data written over channel. Used here

 *		only for debug after PCC transaction completes.

 *

 * Return: Err if something failed else 0 for success.

/**

 * parse_pcc_subspace - Count PCC subspaces defined

 * @header: Pointer to the ACPI subtable header under the PCCT.

 * @end: End of subtable entry.

 *

 * Return: If we find a PCC subspace entry of a valid type, return 0.

 *	Otherwise, return -EINVAL.

 *

 * This gets called for each entry in the PCC table.

/**

 * pcc_parse_subspace_irq - Parse the PCC IRQ and PCC ACK register

 *

 * @pchan: Pointer to the PCC channel info structure.

 * @pcct_entry: Pointer to the ACPI subtable header.

 *

 * Return: 0 for Success, else errno.

 *

 * There should be one entry per PCC channel. This gets called for each

 * entry in the PCC table. This uses PCCY Type1 structure for all applicable

 * types(Type 1-4) to fetch irq

/**

 * pcc_parse_subspace_db_reg - Parse the PCC doorbell register

 *

 * @pchan: Pointer to the PCC channel info structure.

 * @pcct_entry: Pointer to the ACPI subtable header.

 *

 * Return: 0 for Success, else errno.

/**

 * pcc_parse_subspace_shmem - Parse the PCC Shared Memory Region information

 *

 * @pchan: Pointer to the PCC channel info structure.

 * @pcct_entry: Pointer to the ACPI subtable header.

 *

/**

 * acpi_pcc_probe - Parse the ACPI tree for the PCCT.

 *

 * Return: 0 for Success, else errno.

 Set up the subtable handlers */

/**

 * pcc_mbox_probe - Called when we find a match for the

 *	PCCT platform device. This is purely used to represent

 *	the PCCT as a virtual device for registering with the

 *	generic Mailbox framework.

 *

 * @pdev: Pointer to platform device returned when a match

 *	is found.

 *

 *	Return: 0 for Success, else errno.

 Search for PCCT */

 Point to the first PCC subspace entry */

 Check if PCC support is available. */

/*

 * Make PCC init postcore so that users of this mailbox

 * such as the ACPI Processor driver have it available

 * at their init.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) STMicroelectronics 2018 - All Rights Reserved

 * Authors: Ludovic Barre <ludovic.barre@st.com> for STMicroelectronics.

 *          Fabien Dessenne <fabien.dessenne@st.com> for STMicroelectronics.

 protect access to IPCC registers */

 read 'channel occupied' status from other proc */

 search for unmasked 'channel occupied' */

 search for unmasked 'channel free' */

 mask 'tx channel free' interrupt */

 set channel n occupied */

 unmask 'tx channel free' interrupt */

 unmask 'rx channel occupied' interrupt */

 mask rx/tx interrupt */

 proc_id */

 regs */

 clock */

 irq */

 mask and enable rx/tx irq */

 wakeup */

 mailbox controller */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013-2015 Fujitsu Semiconductor Ltd.

 * Copyright (C) 2015 Linaro Ltd.

 * Author: Jassi Brar <jaswinder.singh@linaro.org>

 Allocate memory for device */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2018 MediaTek Inc.

 the packet sent from mailbox client */

 If already disabled, treat as suspended successful. */

 notify GCE to re-fetch commands by setting GCE thread PC */

 let previous task jump to this task */

	/*

	 * When ISR call this function, another CPU core could run

	 * "release task" right before we acquire the spin lock, and thus

	 * reset / disable this GCE thread, so we need to check the enable

	 * bit of this GCE thread.

 Client should not flush new tasks if suspended. */

		/*

		 * The thread reset will clear thread related register to 0,

		 * including pc, end, priority, irq, suspend and enable. Thus

		 * set CMDQ_THR_ENABLED to CMDQ_THR_ENABLE_TASK will enable

		 * thread and make it running.

 check boundary */

 set to this task directly */

 modify jump before enable thread */

 make sure executed tasks have success callback */

	/*

	 * The thread->task_busy_list empty means thread already disable. The

	 * cmdq_mbox_send_data() always reset thread which clear disable and

	 * suspend statue when first pkt send to channel, so there is no need

	 * to do any operation here, only unlock and leave.

 make use of TXDONE_BY_ACK */

 SPDX-License-Identifier: GPL-2.0

/*

 * Xilinx Inter Processor Interrupt(IPI) Mailbox Driver

 *

 * Copyright (C) 2018 Xilinx, Inc.

 IPI agent ID any */

 indicate if ZynqMP IPI mailbox driver uses SMC calls or HVC calls */

 Default IPI SMC function IDs */

 IPI SMC Macros */

#define IPI_SMC_ENQUIRY_DIRQ_MASK	0x00000001UL /* Flag to indicate if

						      * notification interrupt

						      * to be disabled.

#define IPI_SMC_ACK_EIRQ_MASK		0x00000001UL /* Flag to indicate if

						      * notification interrupt

						      * to be enabled.

 IPI mailbox status */

 IPI mailbox TX channel */

 IPI mailbox RX channel */

/**

 * struct zynqmp_ipi_mchan - Description of a Xilinx ZynqMP IPI mailbox channel

 * @is_opened: indicate if the IPI channel is opened

 * @req_buf: local to remote request buffer start address

 * @resp_buf: local to remote response buffer start address

 * @req_buf_size: request buffer size

 * @resp_buf_size: response buffer size

 * @rx_buf: receive buffer to pass received message to client

 * @chan_type: channel type

/**

 * struct zynqmp_ipi_mbox - Description of a ZynqMP IPI mailbox

 *                          platform data.

 * @pdata:		  pointer to the IPI private data

 * @dev:                  device pointer corresponding to the Xilinx ZynqMP

 *                        IPI mailbox

 * @remote_id:            remote IPI agent ID

 * @mbox:                 mailbox Controller

 * @mchans:               array for channels, tx channel and rx channel.

 * @irq:                  IPI agent interrupt ID

/**

 * struct zynqmp_ipi_pdata - Description of z ZynqMP IPI agent platform data.

 *

 * @dev:                  device pointer corresponding to the Xilinx ZynqMP

 *                        IPI agent

 * @irq:                  IPI agent interrupt ID

 * @method:               IPI SMC or HVC is going to be used

 * @local_id:             local IPI agent ID

 * @num_mboxes:           number of mailboxes of this IPI agent

 * @ipi_mboxes:           IPI mailboxes of this IPI agent

/**

 * zynqmp_ipi_interrupt - Interrupt handler for IPI notification

 *

 * @irq:  Interrupt number

 * @data: ZynqMP IPI mailbox platform data.

 *

 * Return: -EINVAL if there is no instance

 * IRQ_NONE if the interrupt is not ours.

 * IRQ_HANDLED if the rx interrupt was successfully handled.

/**

 * zynqmp_ipi_peek_data - Peek to see if there are any rx messages.

 *

 * @chan: Channel Pointer

 *

 * Return: 'true' if there is pending rx data, 'false' if there is none.

		/* TX channel, check if the message has been acked

		 * by the remote, if yes, response is available.

 RX channel, check if there is message arrived. */

/**

 * zynqmp_ipi_last_tx_done - See if the last tx message is sent

 *

 * @chan: Channel pointer

 *

 * Return: 'true' is no pending tx data, 'false' if there are any.

		/* We only need to check if the message been taken

		 * by the remote in the TX channel

 Check the SMC call status, a0 of the result */

 Always true for the response message in RX channel */

/**

 * zynqmp_ipi_send_data - Send data

 *

 * @chan: Channel Pointer

 * @data: Message Pointer

 *

 * Return: 0 if all goes good, else appropriate error messages.

 Send request message */

 Kick IPI mailbox to send message */

 Send response message */

/**

 * zynqmp_ipi_startup - Startup the IPI channel

 *

 * @chan: Channel pointer

 *

 * Return: 0 if all goes good, else return corresponding error message

 If no channel has been opened, open the IPI mailbox */

 Check the SMC call status, a0 of the result */

 If it is RX channel, enable the IPI notification interrupt */

/**

 * zynqmp_ipi_shutdown - Shutdown the IPI channel

 *

 * @chan: Channel pointer

 If it is RX channel, disable notification interrupt */

 Release IPI mailbox if no other channel is opened */

 ZynqMP IPI mailbox operations */

/**

 * zynqmp_ipi_of_xlate - Translate of phandle to IPI mailbox channel

 *

 * @mbox: mailbox controller pointer

 * @p:    phandle pointer

 *

 * Return: Mailbox channel, else return error pointer.

 Only supports TX and RX channels */

/**

 * zynqmp_ipi_mbox_get_buf_res - Get buffer resource from the IPI dev node

 *

 * @node: IPI mbox device child node

 * @name: name of the IPI buffer

 * @res: pointer to where the resource information will be stored.

 *

 * Return: 0 for success, negative value for failure

/**

 * zynqmp_ipi_mbox_dev_release() - release the existence of a ipi mbox dev

 *

 * @dev: the ipi mailbox device

 *

 * This is to avoid the no device release() function kernel warning.

 *

/**

 * zynqmp_ipi_mbox_probe - probe IPI mailbox resource from device node

 *

 * @ipi_mbox: pointer to IPI mailbox private data structure

 * @node: IPI mailbox device node

 *

 * Return: 0 for success, negative value for failure

 Initialize dev for IPI mailbox */

 Get the IPI remote agent ID */

/**

 * zynqmp_ipi_free_mboxes - Free IPI mailboxes devices

 *

 * @pdata: IPI private data

 Get the IPI local agents ID */

 IPI IRQ */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013-2015 Fujitsu Semiconductor Ltd.

 * Copyright (C) 2015 Linaro Ltd.

 * Based on ARM MHU driver by Jassi Brar <jaswinder.singh@linaro.org>

 * Copyright (C) 2020 ARM Ltd.

 Secure, Non-Secure High and Low Priority */

 Max channels to save on unused RAM */

/**

 * ARM MHU Mailbox allocated channel information

 *

 * @mhu: Pointer to parent mailbox device

 * @pchan: Physical channel within which this doorbell resides in

 * @doorbell: doorbell number pertaining to this channel

 No IRQs fired in specified physical channel */

 An IRQ has fired, find the associated channel */

 Send event to co-processor */

 Reset channel */

 Bounds checking */

 Is requested channel free? */

 Find the first free slot */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2017, Linaro Ltd

 Initialize channel identifiers */

 .data is the offset of the ipc register within the global block */

 SPDX-License-Identifier: GPL-2.0+

/*

 * rWTM BIU Mailbox driver for Armada 37xx

 *

 * Author: Marek Behún <kabel@kernel.org>

 relative to rWTM BIU Mailbox Registers */

 enable IRQ generation */

 disable interrupt generation */

 Allocated one channel */

 Hardware supports only one channel. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments' Message Manager Driver

 *

 * Copyright (C) 2015-2017 Texas Instruments Incorporated - https://www.ti.com/

 *	Nishanth Menon

/**

 * struct ti_msgmgr_valid_queue_desc - SoC valid queues meant for this processor

 * @queue_id:	Queue Number for this path

 * @proxy_id:	Proxy ID representing the processor in SoC

 * @is_tx:	Is this a receive path?

/**

 * struct ti_msgmgr_desc - Description of message manager integration

 * @queue_count:	Number of Queues

 * @max_message_size:	Message size in bytes

 * @max_messages:	Number of messages

 * @data_first_reg:	First data register for proxy data region

 * @data_last_reg:	Last data register for proxy data region

 * @status_cnt_mask:	Mask for getting the status value

 * @status_err_mask:	Mask for getting the error value, if applicable

 * @tx_polled:		Do I need to use polled mechanism for tx

 * @tx_poll_timeout_ms: Timeout in ms if polled

 * @valid_queues:	List of Valid queues that the processor can access

 * @data_region_name:	Name of the proxy data region

 * @status_region_name:	Name of the proxy status region

 * @ctrl_region_name:	Name of the proxy control region

 * @num_valid_queues:	Number of valid queues

 * @is_sproxy:		Is this an Secure Proxy instance?

 *

 * This structure is used in of match data to describe how integration

 * for a specific compatible SoC is done.

/**

 * struct ti_queue_inst - Description of a queue instance

 * @name:	Queue Name

 * @queue_id:	Queue Identifier as mapped on SoC

 * @proxy_id:	Proxy Identifier as mapped on SoC

 * @irq:	IRQ for Rx Queue

 * @is_tx:	'true' if transmit queue, else, 'false'

 * @queue_buff_start: First register of Data Buffer

 * @queue_buff_end: Last (or confirmation) register of Data buffer

 * @queue_state: Queue status register

 * @queue_ctrl: Queue Control register

 * @chan:	Mailbox channel

 * @rx_buff:	Receive buffer pointer allocated at probe, max_message_size

/**

 * struct ti_msgmgr_inst - Description of a Message Manager Instance

 * @dev:	device pointer corresponding to the Message Manager instance

 * @desc:	Description of the SoC integration

 * @queue_proxy_region:	Queue proxy region where queue buffers are located

 * @queue_state_debug_region:	Queue status register regions

 * @queue_ctrl_region:	Queue Control register regions

 * @num_valid_queues:	Number of valid queues defined for the processor

 *		Note: other queues are probably reserved for other processors

 *		in the SoC.

 * @qinsts:	Array of valid Queue Instances for the Processor

 * @mbox:	Mailbox Controller

 * @chans:	Array for channels corresponding to the Queue Instances.

/**

 * ti_msgmgr_queue_get_num_messages() - Get the number of pending messages

 * @d:		Description of message manager

 * @qinst:	Queue instance for which we check the number of pending messages

 *

 * Return: number of messages pending in the queue (0 == no pending messages)

	/*

	 * We cannot use relaxed operation here - update may happen

	 * real-time.

/**

 * ti_msgmgr_queue_is_error() - Check to see if there is queue error

 * @d:		Description of message manager

 * @qinst:	Queue instance for which we check the number of pending messages

 *

 * Return: true if error, else false

 Msgmgr has no error detection */

	/*

	 * We cannot use relaxed operation here - update may happen

	 * real-time.

/**

 * ti_msgmgr_queue_rx_interrupt() - Interrupt handler for receive Queue

 * @irq:	Interrupt number

 * @p:		Channel Pointer

 *

 * Return: -EINVAL if there is no instance

 * IRQ_NONE if the interrupt is not ours.

 * IRQ_HANDLED if the rx interrupt was successfully handled.

 Do I have an invalid interrupt source? */

 Do I actually have messages to read? */

 Shared IRQ? */

	/*

	 * I have no idea about the protocol being used to communicate with the

	 * remote producer - 0 could be valid data, so I won't make a judgement

	 * of how many bytes I should be reading. Let the client figure this

	 * out.. I just read the full message and pass it on..

	/*

	 * NOTE about register access involved here:

	 * the hardware block is implemented with 32bit access operations and no

	 * support for data splitting.  We don't want the hardware to misbehave

	 * with sub 32bit access - For example: if the last register read is

	 * split into byte wise access, it can result in the queue getting

	 * stuck or indeterminate behavior. An out of order read operation may

	 * result in weird data results as well.

	 * Hence, we do not use memcpy_fromio or __ioread32_copy here, instead

	 * we depend on readl for the purpose.

	 *

	 * Also note that the final register read automatically marks the

	 * queue message as read.

	/*

	 * Last register read automatically clears the IRQ if only 1 message

	 * is pending - so send the data up the stack..

	 * NOTE: Client is expected to be as optimal as possible, since

	 * we invoke the handler in IRQ context.

/**

 * ti_msgmgr_queue_peek_data() - Peek to see if there are any rx messages.

 * @chan:	Channel Pointer

 *

 * Return: 'true' if there is pending rx data, 'false' if there is none.

/**

 * ti_msgmgr_last_tx_done() - See if all the tx messages are sent

 * @chan:	Channel pointer

 *

 * Return: 'true' is no pending tx data, 'false' if there are any.

 In secure proxy, msg_count indicates how many we can send */

 if we have any messages pending.. */

/**

 * ti_msgmgr_send_data() - Send data

 * @chan:	Channel Pointer

 * @data:	ti_msgmgr_message * Message Pointer

 *

 * Return: 0 if all goes good, else appropriate error messages.

 NOTE: Constraints similar to rx path exists here as well */

 Ensure all unused data is 0 */

	/*

	 * 'data_reg' indicates next register to write. If we did not already

	 * write on tx complete reg(last reg), we must do so for transmit

/**

 *  ti_msgmgr_queue_rx_irq_req() - RX IRQ request

 *  @dev:	device pointer

 *  @d:		descriptor for ti_msgmgr

 *  @qinst:	Queue instance

 *  @chan:	Channel pointer

 Get the IRQ if not found */

 With the expectation that the IRQ might be shared in SoC */

/**

 * ti_msgmgr_queue_startup() - Startup queue

 * @chan:	Channel pointer

 *

 * Return: 0 if all goes good, else return corresponding error message

	/*

	 * If sproxy is starting and can send messages, we are a Tx thread,

	 * else Rx

 Allocate usage buffer for rx */

 Request IRQ */

/**

 * ti_msgmgr_queue_shutdown() - Shutdown the queue

 * @chan:	Channel pointer

/**

 * ti_msgmgr_of_xlate() - Translation of phandle to queue

 * @mbox:	Mailbox controller

 * @p:		phandle pointer

 *

 * Return: Mailbox channel corresponding to the queue, else return error

 * pointer.

/**

 * ti_msgmgr_queue_setup() - Setup data structures for each queue instance

 * @idx:	index of the queue

 * @dev:	pointer to the message manager device

 * @np:		pointer to the of node

 * @inst:	Queue instance pointer

 * @d:		Message Manager instance description data

 * @qd:		Queue description data

 * @qinst:	Queue instance pointer

 * @chan:	pointer to mailbox channel

 *

 * Return: 0 if all went well, else return corresponding error

 XXX: DONOT read registers here!.. Some may be unusable */

 Setup an error value for IRQ - Lazy allocation */

 Queue operations */

 Keystone K2G SoC integration details */

 Sentinel */ }

 All proxies may be valid in Secure Proxy instance */

 Only Some proxies are valid in Message Manager */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * intel_idle.c - native hardware idle loop for modern Intel processors

 *

 * Copyright (c) 2013 - 2020, Intel Corporation.

 * Len Brown <len.brown@intel.com>

 * Rafael J. Wysocki <rafael.j.wysocki@intel.com>

/*

 * intel_idle is a cpuidle driver that loads on all Intel CPUs with MWAIT

 * in lieu of the legacy ACPI processor_idle driver.  The intent is to

 * make Linux more efficient on these processors, as intel_idle knows

 * more than ACPI, as well as make Linux more immune to ACPI BIOS bugs.

/*

 * Design Assumptions

 *

 * All CPUs have same idle states as boot CPU

 *

 * Chipset BM_STS (bus master status) bit is a NOP

 *	for preventing entry into deep C-states

 *

 * CPU will flush caches as needed when entering a C-state via MWAIT

 *	(in contrast to entering ACPI C3, in which case the WBINVD

 *	instruction needs to be executed to flush the caches)

/*

 * Known limitations

 *

 * ACPI has a .suspend hack to turn off deep c-statees during suspend

 * to avoid complications with the lapic timer workaround.

 * Have not seen issues with suspend, but may need same workaround here.

 *

 un-comment DEBUG to enable pr_debug() statements */

 #define DEBUG */

 intel_idle.max_cstate=0 disables driver */

	/*

	 * Hardware C-state auto-demotion may not always be optimal.

	 * Indicate which enable bits to clear here.

/*

 * Enable interrupts before entering the C-state. On some platforms and for

 * some C-states, this may measurably decrease interrupt latency.

/*

 * Enable this state by default even if the ACPI _CST does not list it.

/*

 * MWAIT takes an 8-bit "hint" in EAX "suggesting"

 * the C-state (top nibble) and sub-state (bottom nibble)

 * 0x00 means "MWAIT(C1)", 0x10 means "MWAIT(C2)" etc.

 *

 * We store the hint at the top of our "flags" for each state.

/**

 * intel_idle - Ask the processor to enter the given idle state.

 * @dev: cpuidle device of the target CPU.

 * @drv: cpuidle driver (assumed to point to intel_idle_driver).

 * @index: Target idle state index.

 *

 * Use the MWAIT instruction to notify the processor that the CPU represented by

 * @dev is idle and it can try to enter the idle state corresponding to @index.

 *

 * If the local APIC timer is not known to be reliable in the target idle state,

 * enable one-shot tick broadcasting for the target CPU before executing MWAIT.

 *

 * Optionally call leave_mm() for the target CPU upfront to avoid wakeups due to

 * flushing user TLBs.

 *

 * Must be called under local_irq_disable().

 break on interrupt flag */

/**

 * intel_idle_s2idle - Ask the processor to enter the given idle state.

 * @dev: cpuidle device of the target CPU.

 * @drv: cpuidle driver (assumed to point to intel_idle_driver).

 * @index: Target idle state index.

 *

 * Use the MWAIT instruction to notify the processor that the CPU represented by

 * @dev is idle and it can try to enter the idle state corresponding to @index.

 *

 * Invoked as a suspend-to-idle callback routine with frozen user space, frozen

 * scheduler tick and suspended scheduler clock on the target CPU.

 break on interrupt flag */

/*

 * States are indexed by the cstate number,

 * which is also the index into the MWAIT hint array.

 * Thus C0 is a dummy.

/*

 * Note, depending on HW and FW revision, SnowRidge SoC may or may not support

 * C6, and this is indicated in the CPUID mwait leaf.

	/*

	 * Switch over to one-shot tick broadcast if the target C-state

	 * is deeper than C1.

 No effect if no_acpi is set. */

/**

 * intel_idle_cst_usable - Check if the _CST information can be used.

 *

 * Check if all of the C-states listed by _CST in the max_cstate range are

 * ACPI_CSTATE_FFH, which means that they should be entered via MWAIT.

	/*

	 * If limit > 0, intel_idle_cst_usable() has returned 'true', so all of

	 * the interesting states are ACPI_CSTATE_FFH.

		/*

		 * For C1-type C-states use the same number for both the exit

		 * latency and target residency, because that is the case for

		 * C1 in the majority of the static C-states tables above.

		 * For the other types of C-states, however, set the target

		 * residency to 3 times the exit latency which should lead to

		 * a reasonable balance between energy-efficiency and

		 * performance in the majority of interesting cases.

	/*

	 * If there are no _CST C-states, do not disable any C-states by

	 * default.

	/*

	 * If limit > 0, intel_idle_cst_usable() has returned 'true', so all of

	 * the interesting states are ACPI_CSTATE_FFH.

 !CONFIG_ACPI_PROCESSOR_CSTATE */

 !CONFIG_ACPI_PROCESSOR_CSTATE */

/**

 * ivt_idle_state_table_update - Tune the idle states table for Ivy Town.

 *

 * Tune IVT multi-socket targets.

 * Assumption: num_sockets == (max_package_num + 1).

 IVT uses a different table for 1-2, 3-4, and > 4 sockets */

 else, 1 and 2 socket systems use default ivt_cstates */

/**

 * irtl_2_usec - IRTL to microseconds conversion.

 * @irtl: IRTL MSR value.

 *

 * Translate the IRTL (Interrupt Response Time Limit) MSR value to microseconds.

/**

 * bxt_idle_state_table_update - Fix up the Broxton idle states table.

 *

 * On BXT, trust the IRTL (Interrupt Response Time Limit) MSR to show the

 * definitive maximum latency and use the same value for target_residency.

/**

 * sklh_idle_state_table_update - Fix up the Sky Lake idle states table.

 *

 * On SKL-H (model 0x5e) skip C8 and C9 if C10 is enabled and SGX disabled.

 if PC10 disabled via cmdline intel_idle.max_cstate=7 or shallower */

 if PC10 not present in CPUID.MWAIT.EDX */

 PC10 is not enabled in PKG C-state limit */

 if SGX is present */

 if SGX is enabled */

 C8-SKL */

 C9-SKL */

/**

 * skx_idle_state_table_update - Adjust the Sky Lake/Cascade Lake

 * idle states table.

	/*

	 * 000b: C0/C1 (no package C-state support)

	 * 001b: C2

	 * 010b: C6 (non-retention)

	 * 011b: C6 (retention)

	 * 111b: No Package C state limits.

		/*

		 * Uses the CC6 + PC0 latency and 3 times of

		 * latency for target_residency if the PC6

		 * is disabled in BIOS. This is consistent

		 * with how intel_idle driver uses _CST

		 * to set the target_residency.

 Ignore the C-state if there are NO sub-states in CPUID for it. */

 If marked as unusable, skip this state. */

 Structure copy. */

/**

 * intel_idle_cpuidle_driver_init - Create the list of available idle states.

 * @drv: cpuidle driver structure to initialize.

/**

 * intel_idle_cpu_init - Register the target CPU with the cpuidle core.

 * @cpu: CPU to initialize.

 *

 * Register a cpuidle device object for @cpu and update its MSRs in accordance

 * with the processor model flags.

	/*

	 * Some systems can hotplug a cpu at runtime after

	 * the kernel has booted, we have to initialize the

	 * driver in this case

/**

 * intel_idle_cpuidle_devices_uninit - Unregister all cpuidle devices.

 Do not load intel_idle at all for now if idle= is passed */

/*

 * We are not really modular, but we used to support that.  Meaning we also

 * support "intel_idle.max_cstate=..." at boot and also a read-only export of

 * it at /sys/module/intel_idle/parameters/max_cstate -- so using module_param

 * is the easiest way (currently) to continue doing that.

/*

 * The positions of the bits that are set in this number are the indices of the

 * idle states to be disabled by default (as reflected by the names of the

 * corresponding idle state directories in sysfs, "state0", "state1" ...

 * "state<i>" ..., where <i> is the index of the given state).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * tveeprom - eeprom decoder for tvcard configuration eeproms

 *

 * Data and decoding routines shamelessly borrowed from bttv-cards.c

 * eeprom access routine shamelessly borrowed from bttv-if.c

 * which are:



    Copyright (C) 1996,97,98 Ralph  Metzler (rjkm@thp.uni-koeln.de)

			   & Marcus Metzler (mocm@thp.uni-koeln.de)

    (c) 1999-2001 Gerd Knorr <kraxel@goldbach.in-berlin.de>



 * Adjustments to fit a more general model and all bugs:



	Copyright (C) 2003 John Klar <linpvr at projectplasma.com>



/*

 * The Hauppauge eeprom uses an 8bit field to determine which

 * tuner formats the tuner supports.

/* This is the full list of possible tuners. Many thanks to Hauppauge for

   supplying this information. Note that many tuners where only used for

   testing and never made it to the outside world. So you will only see

 0-9 */

 10-19 */

 20-29 */

 30-39 */

 mono radio */

 40-49 */

 50-59 */

 60-69 */

 70-79 */

 80-89 */

 90-99 */

 100-109 */

 110-119 */

 120-129 */

 130-139 */

 140-149 */

 150-159 */

 160-169 */

 170-179 */

 180-188 */

/* Use TVEEPROM_AUDPROC_INTERNAL for those audio 'chips' that are

 0-4 */

 5-9 */

 10-14 */

 15-19 */

 20-24 */

 25-29 */

 30-34 */

 35-39 */

 40-44 */

 45-49 */

 50-52 */

 This list is supplied by Hauppauge. Thanks! */

 0-4 */

 5-9 */

 10-14 */

 15-19 */

 20-24 */

 25-29 */

 30-34 */

 35-39 */

 40-44 */

 45-49 */

 50-53 */

 PNPEnv_TUNER_FR1236_MK2 */

 PNPEnv_TUNER_FM1236 */

 PNPEnv_TUNER_FMR1236 */

 PNPEnv_TUNER_FR1216_MK2 */

 PNPEnv_TUNER_FR1246_MK2 */

 PNPEnv_TUNER_FM1216 */

 PNPEnv_TUNER_FM1246 */

 PNPEnv_TUNER_FR1216MF_MK2 */

 PNPEnv_TUNER_FM1216MF */

 PNPEnv_TUNER_FR1256_MK2 */

 PNPEnv_TUNER_FM1256 */

 PNPEnv_TUNER_4039FR5 */

 PNPEnv_TUNER_4009FR5 */

 PNPEnv_TUNER_4049FM5 */

 PNPEnv_TUNER_4049FM5_AltI2C */

 PNPEnv_TUNER_4009FN5 */

 PNPEnv_TUNER_TCPB9085P */

 PNPEnv_TUNER_TCPN9085D */

 PNPEnv_TUNER_TP18NSR01F */

 PNPEnv_TUNER_TP18PSB01D */

 PNPEnv_TUNER_TAPC_I001D */

 PNPEnv_TUNER_TAPE_S001D_MK3 */

 PNPEnv_TUNER_FM1216ME_MK3 */

 PNPEnv_TUNER_FM1216MP_MK3 */

 PNPEnv_TUNER_FM1236_MK3 */

 PNPEnv_TUNER_TAPE_H001F_MK3 */

 PNPEnv_TUNER_TAPE_M001D_MK3 */

 PNPEnv_TUNER_TDA8275C1_8290_FM */

 PNPEnv_TUNER_TCL_MFPE05_2 */

 PNPEnv_TUNER_PHILIPS_FQ1236A_MK4 */

	/* ----------------------------------------------

	** The hauppauge eeprom format is tagged

	**

	** if packet[0] == 0x84, then packet[0..1] == length

	** else length = packet[0] & 3f;

	** if packet[0] & f8 == f8, then EOD and packet[1] == checksum

	**

	** In our (ivtv) case we're interested in the following:

	** tuner type:   tag [00].05 or [0a].01 (index into hauppauge_tuner)

	** tuner fmts:   tag [00].04 or [0a].00 (bitmask index into

	**		 hauppauge_tuner_fmt)

	** radio:        tag [00].{last} or [0e].00  (bitmask.  bit2=FM)

	** audio proc:   tag [02].01 or [05].00 (mask with 0x7f)

	** decoder proc: tag [09].01)



	** Fun info:

	** model:      tag [00].07-08 or [06].00-01

	** revision:   tag [00].09-0b or [06].04-06

	** serial#:    tag [01].05-07 or [04].04-06



	** # of inputs/outputs ???

 Different eeprom start offsets for em28xx, cx2388x and cx23418 */

 Generic em28xx offset */

 Generic cx2388x offset */

 Generic cx23418 offset (models 74xxx) */

 verify checksum! */

 process by tag */

 tag: 'Comprehensive' */

			/* old style tag, don't know how to detect

 tag: 'SerialID' */

			/* tag 'AudioInfo'

			Note mask with 0x7F, high bit used on some older models

			to indicate 4052 mux was removed in favor of using MSP

 case 0x03: tag 'EEInfo' */

 tag 'SerialID2' */

			/* tag 'Audio2'

			Note mask with 0x7F, high bit used on some older models

			to indicate 4052 mux was removed in favor of using MSP

 tag 'ModelRev' */

			/* tag 'Details': according to Hauppauge not interesting

 there is no tag 0x08 defined */

 tag 'Video' */

 tag 'Tuner' */

 a second (radio) tuner may be present */

 not a TV tuner? */

 must be radio */

			/* tag 'Inputs': according to Hauppauge this is specific

			to each driver family, so no good assumptions can be

 case 0x0c: tag 'Balun' */

 case 0x0d: tag 'Teletext' */

 tag: 'Radio' */

 tag 'IRInfo' */

 case 0x10: tag 'VBIInfo' */

 case 0x11: tag 'QCInfo' */

 case 0x12: tag 'InfoBits' */

 dump the rest of the packet? */

 ----------------------------------------------------------------------- */

 generic helper functions                                                */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Retrieve encoded MAC address from 24C16 serial 2-wire EEPROM,

    decode it and store it in the associated adapter struct for

    use by dvb_net.c



    This card appear to have the 24C16 write protect held to ground,

    thus permitting normal read/write operation. Theoretically it

    would be possible to write routines to burn a different (encoded)

    MAC address into the EEPROM.



    Robert Schlabbach	GMX

    Michael Glaum	KVH Industries

    Holger Waechtler	Convergence



    Copyright (C) 2002-2003 Ralph Metzler <rjkm@metzlerbros.de>

			    Metzler Brothers Systementwicklung GbR





 In case there is a sig check failure have the orig contents available */

 dprintk("%s\n", __func__); */

 Assume EEPROM isn't there */

 Will only be -ENODEV */

 SPDX-License-Identifier: GPL-2.0-only

/*  cypress_firmware.c is part of the DVB USB library.

 *

 * Copyright (C) 2004-6 Patrick Boettcher (patrick.boettcher@posteo.de)

 * see dvb-usb-init.c for copyright information.

 *

 * This file contains functions for downloading the firmware to Cypress FX 1

 * and 2 based devices.

 *

 name of the usb controller */

	u16 cs_reg;		/* needs to be restarted,

/*

 * load a firmware packet to the device

		/* b[4] and b[5] are the Extended linear address record data

 stop the CPU */

 write firmware to memory */

 start the CPU */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * cx2341x - generic code for cx23415/6/8 based devices

 *

 * Copyright (C) 2006 Hans Verkuil <hverkuil@xs4all.nl>

********************* COMMON CODE *********************/

 definitions for audio properties bits 29-28 */

********************* OLD CODE *********************/

 Must be sorted from low to high control ID! */

 misc */

 stream */

 audio */

 video */

 YCbCr value for black */

 encoding filters */

/* Map the control ID to the correct field in the cx2341x_mpeg_params

/* Map the control ID to the correct field in the cx2341x_mpeg_params

 Max GOP size = 34 */

 Max GOP size = 34 */

 MPEG-1 only allows CBR */

 MPEG-1 implies CBR */

 MPEG controls */

			/*

			 * The state of L2 & AC3 bitrate controls can change

			 * when this control changes, but v4l2_ctrl_query_fill()

			 * already sets V4L2_CTRL_FLAG_UPDATE for

			 * V4L2_CID_MPEG_AUDIO_ENCODING, so we don't here.

		/* this setting is read-only for the cx2341x since the

		   V4L2_CID_MPEG_STREAM_TYPE really determines the

 Init YUV (really YCbCr) to black */

 CX23415/6 specific */

 Not sure if this MPEG Layer II setting is required */

 Assuming MPEG Layer II */

/* Check for correctness of the ctrl's value based on the data from

   struct v4l2_queryctrl and the available menu items. Note that

 MPEG-2 PS */

 MPEG-2 TS */

 MPEG-1 SS */

 DVD */

 VCD */

 SVCD */

 Stream */

 Video */

 Audio */

 Encoding filters */

********************* NEW CODE *********************/

 ctrl->handler->lock is held, so it is safe to access cur.val */

 video gop cluster */

 Max GOP size = 34 */

 stream type cluster */

 MPEG-1 implies CBR */

 peak bitrate shall be >= normal bitrate */

 MPEG-2 PS */

 MPEG-2 TS */

 MPEG-1 SS */

 DVD */

 VCD */

 SVCD */

 audio properties cluster */

 Not sure if this MPEG Layer II setting is required */

 Assuming MPEG Layer II */

 video gop cluster */

 stream type cluster */

 video mute cluster */

 video filter mode */

 video filter type cluster */

 video filter cluster */

 video median cluster */

	/* Add controls in ascending control ID order for fastest

 CX23415/6 specific */

/*

 * videobuf2-core.c - video buffer 2 core framework

 *

 * Copyright (C) 2010 Samsung Electronics

 *

 * Author: Pawel Osciak <pawel@osciak.com>

 *	   Marek Szyprowski <m.szyprowski@samsung.com>

 *

 * The vb2_thread implementation was based on code from videobuf-dvb.c:

 *	(c) 2004 Gerd Knorr <kraxel@bytesex.org> [SUSE Labs]

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation.

/*

 * If advanced debugging is on, then count how often each op is called

 * successfully, which can either be per-buffer or per-queue.

 *

 * This makes it easy to check that the 'init' and 'cleanup'

 * (and variations thereof) stay balanced.

/*

 * __vb2_buf_mem_alloc() - allocate video memory for the given buffer

	/*

	 * Allocate memory for all planes in this buffer

	 * NOTE: mmapped areas should be page aligned

 Memops alloc requires size to be page aligned. */

 Did it wrap around? */

 Associate allocator private data with this plane */

 Free already allocated memory if one of the allocations failed */

/*

 * __vb2_buf_mem_free() - free memory of the given buffer

/*

 * __vb2_buf_userptr_put() - release userspace memory associated with

 * a USERPTR buffer

/*

 * __vb2_plane_dmabuf_put() - release memory associated with

 * a DMABUF shared plane

/*

 * __vb2_buf_dmabuf_put() - release memory associated with

 * a DMABUF shared buffer

/*

 * __vb2_buf_mem_prepare() - call ->prepare() on buffer's private memory

 * to sync caches

/*

 * __vb2_buf_mem_finish() - call ->finish on buffer's private memory

 * to sync caches

/*

 * __setup_offsets() - setup unique offsets ("cookies") for every plane in

 * the buffer.

	/*

	 * DMA exporter should take care of cache syncs, so we can avoid

	 * explicit ->prepare()/->finish() syncs. For other ->memory types

	 * we always need ->prepare() or/and ->finish() cache sync.

	/*

	 * ->finish() cache sync can be avoided when queue direction is

	 * TO_DEVICE.

/*

 * __vb2_queue_alloc() - allocate videobuf buffer structures and (for MMAP type)

 * video buffer memory for all buffers/planes on the queue and initializes the

 * queue

 *

 * Returns the number of buffers successfully allocated.

 Ensure that q->num_buffers+num_buffers is below VB2_MAX_FRAME */

 Allocate videobuf buffer structures */

 Allocate video buffer memory for the MMAP type */

			/*

			 * Call the driver-provided buffer initialization

			 * callback, if given. An error in initialization

			 * results in queue setup failure.

/*

 * __vb2_free_mem() - release all video buffer memory for a given queue

 Free MMAP buffers or release USERPTR buffers */

/*

 * __vb2_queue_free() - free buffers at the end of the queue - video memory and

 * related information, if no buffers are left return the queue to an

 * uninitialized state. Might be called even if the queue has already been freed.

	/*

	 * Sanity check: when preparing a buffer the queue lock is released for

	 * a short while (see __buf_prepare for the details), which would allow

	 * a race with a reqbufs which can call this function. Removing the

	 * buffers from underneath __buf_prepare is obviously a bad idea, so we

	 * check if any of the buffers is in the state PREPARING, and if so we

	 * just return -EAGAIN.

 Call driver-provided cleanup function for each buffer, if provided */

 Release video buffer memory */

	/*

	 * Check that all the calls were balances during the life-time of this

	 * queue. If not (or if the debug level is 1 or up), then dump the

	 * counters to the kernel log.

 Free videobuf buffers */

		/*

		 * If num_users() has not been provided, call_memop

		 * will return 0, apparently nobody cares about this

		 * case anyway. If num_users() returns more than 1,

		 * we are not the only user of the plane's memory.

/*

 * __buffers_in_use() - return true if any buffers on the queue are in use and

 * the queue cannot be freed (by the means of REQBUFS(0)) call

/*

 * __verify_userptr_ops() - verify that all memory operations required for

 * USERPTR queue type have been provided

/*

 * __verify_mmap_ops() - verify that all memory operations required for

 * MMAP queue type have been provided

/*

 * __verify_dmabuf_ops() - verify that all memory operations required for

 * DMABUF queue type have been provided

	/*

	 * Make sure all the required memory ops for given memory type

	 * are available.

	/*

	 * Place the busy tests at the end: -EBUSY can be ignored when

	 * create_bufs is called with count == 0, but count == 0 should still

	 * do the memory and type validation.

		/*

		 * We already have buffers allocated, so first check if they

		 * are not in use and can be freed.

		/*

		 * Call queue_cancel to clean up any buffers in the

		 * QUEUED state which is possible if buffers were prepared or

		 * queued without ever calling STREAMON.

		/*

		 * In case of REQBUFS(0) return immediately without calling

		 * driver's queue_setup() callback and allocating resources.

	/*

	 * Make sure the requested values and current defaults are sane.

	/*

	 * Ask the driver how many buffers and planes per buffer it requires.

	 * Driver also sets the size and allocator context for each plane.

 Check that driver has set sane values */

 Finally, allocate buffers and video memory */

	/*

	 * There is no point in continuing if we can't allocate the minimum

	 * number of buffers needed by this vb2_queue.

	/*

	 * Check if driver can handle the allocated number of buffers.

		/*

		 * num_planes is set by the previous queue_setup(), but since it

		 * signals to queue_setup() whether it is called from create_bufs()

		 * vs reqbufs() we zero it here to signal that queue_setup() is

		 * called for the reqbufs() case.

		/*

		 * Either the driver has accepted a smaller number of buffers,

		 * or .queue_setup() returned an error

		/*

		 * Note: __vb2_queue_free() will subtract 'allocated_buffers'

		 * from q->num_buffers.

	/*

	 * Return the number of successfully allocated buffers

	 * to the userspace.

	/*

	 * Ask the driver, whether the requested number of buffers, planes per

	 * buffer and their sizes are acceptable

 Finally, allocate buffers and video memory */

	/*

	 * Check if driver can handle the so far allocated number of buffers.

		/*

		 * q->num_buffers contains the total number of buffers, that the

		 * queue driver has set up

		/*

		 * Either the driver has accepted a smaller number of buffers,

		 * or .queue_setup() returned an error

		/*

		 * Note: __vb2_queue_free() will subtract 'allocated_buffers'

		 * from q->num_buffers.

	/*

	 * Return the number of successfully allocated buffers

	 * to the userspace.

	/*

	 * Although this is not a callback, it still does have to balance

	 * with the buf_queue op. So update this counter manually.

 Add the buffer to the done buffers list */

 Inform any processes that may be waiting for buffers */

/*

 * __prepare_mmap() - prepare an MMAP buffer

/*

 * __prepare_userptr() - prepare a USERPTR buffer

 Copy relevant information provided by the userspace */

 Skip the plane if already verified */

 Check if the provided plane buffer is large enough */

 Release previously acquired memory if present */

 Acquire each plane's memory */

	/*

	 * Now that everything is in order, copy relevant information

	 * provided by userspace.

		/*

		 * One or more planes changed, so we must call buf_init to do

		 * the driver-specific initialization on the newly acquired

		 * buffer, if provided.

 In case of errors, release planes that were already acquired */

/*

 * __prepare_dmabuf() - prepare a DMABUF buffer

 Copy relevant information provided by the userspace */

 use DMABUF size if length is not provided */

 Skip the plane if already verified */

 Release previously acquired memory if present */

 Acquire each plane's memory */

	/*

	 * This pins the buffer(s) with dma_buf_map_attachment()). It's done

	 * here instead just before the DMA, while queueing the buffer(s) so

	 * userspace knows sooner rather than later if the dma-buf map fails.

	/*

	 * Now that everything is in order, copy relevant information

	 * provided by userspace.

		/*

		 * Call driver-specific initialization on the newly acquired buffer,

		 * if provided.

 In case of errors, release planes that were already acquired */

/*

 * __enqueue_in_driver() - enqueue a vb2_buffer in driver for processing

	/*

	 * There is no method to propagate an error from vb2_core_qbuf(),

	 * so if this returns a non-0 value, then WARN.

	 *

	 * The only exception is -EIO which is returned if q->error is

	 * set. We just ignore that, and expect this will be caught the

	 * next time vb2_req_prepare() is called.

 Fill buffer information for the userspace */

/*

 * vb2_start_streaming() - Attempt to start streaming.

 * @q:		videobuf2 queue

 *

 * Attempt to start streaming. When this function is called there must be

 * at least q->min_buffers_needed buffers queued up (i.e. the minimum

 * number of buffers required for the DMA engine to function). If the

 * @start_streaming op fails it is supposed to return all the driver-owned

 * buffers back to vb2 in state QUEUED. Check if that happened and if

 * not warn and reclaim them forcefully.

	/*

	 * If any buffers were queued before streamon,

	 * we can now pass them to driver for processing.

 Tell the driver to start streaming */

	/*

	 * If you see this warning, then the driver isn't cleaning up properly

	 * after a failed start_streaming(). See the start_streaming()

	 * documentation in videobuf2-core.h for more information how buffers

	 * should be returned to vb2 in start_streaming().

		/*

		 * Forcefully reclaim buffers if the driver did not

		 * correctly return them to vb2.

 Must be zero now */

	/*

	 * If done_list is not empty, then start_streaming() didn't call

	 * vb2_buffer_done(vb, VB2_BUF_STATE_QUEUED) but STATE_ERROR or

	 * STATE_DONE.

 Make sure the request is in a safe state for updating. */

		/*

		 * Increment the refcount and store the request.

		 * The request refcount is decremented again when the

		 * buffer is dequeued. This is to prevent vb2_buffer_done()

		 * from freeing the request from interrupt context, which can

		 * happen if the application closed the request fd after

		 * queueing the request.

 Fill buffer information for the userspace */

	/*

	 * Add to the queued buffers list, a buffer will stay on it until

	 * dequeued in dqbuf.

	/*

	 * If already streaming, give the buffer to driver for processing.

	 * If not, the buffer will be given to driver on next streamon.

 Fill buffer information for the userspace */

	/*

	 * If streamon has been called, and we haven't yet called

	 * start_streaming() since not enough buffers were queued, and

	 * we now have reached the minimum number of queued buffers,

	 * then we can finally call start_streaming().

			/*

			 * Since vb2_core_qbuf will return with an error,

			 * we should return it to state DEQUEUED since

			 * the error indicates that the buffer wasn't queued.

/*

 * __vb2_wait_for_done_vb() - wait for a buffer to become available

 * for dequeuing

 *

 * Will sleep if required for nonblocking == false.

	/*

	 * All operations on vb_done_list are performed under done_lock

	 * spinlock protection. However, buffers may be removed from

	 * it and returned to userspace only while holding both driver's

	 * lock and the done_lock spinlock. Thus we can be sure that as

	 * long as we hold the driver's lock, the list will remain not

	 * empty if list_empty() check succeeds.

			/*

			 * Found a buffer that we were waiting for.

		/*

		 * We are streaming and blocking, wait for another buffer to

		 * become ready or for streamoff. Driver's lock is released to

		 * allow streamoff or qbuf to be called while waiting.

		/*

		 * All locks have been released, it is safe to sleep now.

		/*

		 * We need to reevaluate both conditions again after reacquiring

		 * the locks or return an error if one occurred.

/*

 * __vb2_get_done_vb() - get a buffer ready for dequeuing

 *

 * Will sleep if required for nonblocking == false.

	/*

	 * Wait for at least one buffer to become available on the done_list.

	/*

	 * Driver's lock has been held since we last verified that done_list

	 * is not empty, so no need for another list_empty(done_list) check.

	/*

	 * Only remove the buffer from done_list if all planes can be

	 * handled. Some cases such as V4L2 file I/O and DVB have pb

	 * == NULL; skip the check then as there's nothing to verify.

/*

 * __vb2_dqbuf() - bring back the buffer to the DEQUEUED state

 nothing to do if the buffer is already dequeued */

 Fill buffer information for the userspace */

 Remove from videobuf queue */

 go back to dequeued state */

/*

 * __vb2_queue_cancel() - cancel and stop (pause) streaming

 *

 * Removes all queued buffers from driver's queue and all buffers queued by

 * userspace from videobuf's queue. Returns to state after reqbufs.

	/*

	 * Tell driver to stop all transactions and release all queued

	 * buffers.

	/*

	 * If you see this warning, then the driver isn't cleaning up properly

	 * in stop_streaming(). See the stop_streaming() documentation in

	 * videobuf2-core.h for more information how buffers should be returned

	 * to vb2 in stop_streaming().

 Must be zero now */

	/*

	 * Remove all buffers from videobuf's list...

	/*

	 * ...and done list; userspace will not receive any buffers it

	 * has not already dequeued before initiating cancel.

	/*

	 * Reinitialize all buffers for next use.

	 * Make sure to call buf_finish for any queued buffers. Normally

	 * that's done in dqbuf, but that's not going to happen when we

	 * cancel the whole queue. Note: this code belongs here, not in

	 * __vb2_dqbuf() since in vb2_core_dqbuf() there is a critical

	 * call to __fill_user_buffer() after buf_finish(). That order can't

	 * be changed, so we can't move the buf_finish() to __vb2_dqbuf().

		/*

		 * If a request is associated with this buffer, then

		 * call buf_request_cancel() to give the driver to complete()

		 * related request objects. Otherwise those objects would

		 * never complete.

	/*

	 * Tell driver to start streaming provided sufficient buffers

	 * are available.

	/*

	 * Cancel will pause streaming and remove all buffers from the driver

	 * and videobuf, effectively returning control over them to userspace.

	 *

	 * Note that we do this even if q->streaming == 0: if you prepare or

	 * queue buffers, and then call streamoff without ever having called

	 * streamon, you would still expect those buffers to be returned to

	 * their normal dequeued state.

/*

 * __find_plane_by_offset() - find plane associated with the given offset off

	/*

	 * Go over all buffers and their planes, comparing the given offset

	 * with an offset assigned to each plane. If a match is found,

	 * return its buffer and plane numbers.

	/*

	 * Check memory area access mode.

	/*

	 * Find the plane corresponding to the offset passed by userspace.

	/*

	 * MMAP requires page_aligned buffers.

	 * The buffer length was page_aligned at __vb2_buf_mem_alloc(),

	 * so, we need to do the same here.

	/*

	 * vm_pgoff is treated in V4L2 API as a 'cookie' to select a buffer,

	 * not as a in-buffer offset. We always want to mmap a whole buffer

	 * from its beginning.

	/*

	 * Find the plane corresponding to the offset passed by userspace.

	/*

	 * Sanity check

	/*

	 * This combination is not allowed since a non-zero value of

	 * q->min_buffers_needed can cause vb2_core_qbuf() to fail if

	 * it has to call start_streaming(), and the Request API expects

	 * that queueing a request (and thus queueing a buffer contained

	 * in that request) will always succeed. There is no method of

	 * propagating an error back to userspace.

	/*

	 * poll_wait() MUST be called on the first invocation on all the

	 * potential queues of interest, even if we are not interested in their

	 * events during this first call. Failure to do so will result in

	 * queue's events to be ignored because the poll_table won't be capable

	 * of adding new wait queues thereafter.

	/*

	 * Start file I/O emulator only if streaming API has not been used yet.

			/*

			 * Write to OUTPUT queue can be done immediately.

	/*

	 * There is nothing to wait for if the queue isn't streaming, or if the

	 * error flag is set.

	/*

	 * If this quirk is set and QBUF hasn't been called yet then

	 * return EPOLLERR as well. This only affects capture queues, output

	 * queues will always initialize waiting_for_buffers to false.

	 * This quirk is set by V4L2 for backwards compatibility reasons.

	/*

	 * For output streams you can call write() as long as there are fewer

	 * buffers queued than there are buffers available.

		/*

		 * If the last buffer was dequeued from a capture queue,

		 * return immediately. DQBUF will return -EPIPE.

	/*

	 * Take first buffer available for dequeuing.

/*

 * struct vb2_fileio_buf - buffer context used by file io emulator

 *

 * vb2 provides a compatibility layer and emulator of file io (read and

 * write) calls on top of streaming API. This structure is used for

 * tracking context related to the buffers.

/*

 * struct vb2_fileio_data - queue context used by file io emulator

 *

 * @cur_index:	the index of the buffer currently being read from or

 *		written to. If equal to q->num_buffers then a new buffer

 *		must be dequeued.

 * @initial_index: in the read() case all buffers are queued up immediately

 *		in __vb2_init_fileio() and __vb2_perform_fileio() just cycles

 *		buffers. However, in the write() case no buffers are initially

 *		queued, instead whenever a buffer is full it is queued up by

 *		__vb2_perform_fileio(). Only once all available buffers have

 *		been queued up will __vb2_perform_fileio() start to dequeue

 *		buffers. This means that initially __vb2_perform_fileio()

 *		needs to know what buffer index to use when it is queuing up

 *		the buffers for the first time. That initial index is stored

 *		in this field. Once it is equal to q->num_buffers all

 *		available buffers have been queued and __vb2_perform_fileio()

 *		should start the normal dequeue/queue cycle.

 *

 * vb2 provides a compatibility layer and emulator of file io (read and

 * write) calls on top of streaming API. For proper operation it required

 * this structure to save the driver state between each call of the read

 * or write function.

/*

 * __vb2_init_fileio() - initialize file io emulator

 * @q:		videobuf2 queue

 * @read:	mode selector (1 means read, 0 means write)

	/*

	 * Sanity check

	/*

	 * Check if device supports mapping buffers to kernel virtual space.

	/*

	 * Check if streaming api has not been already activated.

	/*

	 * Start with count 1, driver can increase it in queue_setup()

	/*

	 * Request buffers and use MMAP type to force driver

	 * to allocate buffers by itself.

	/*

	 * Check if plane_count is correct

	 * (multiplane buffers are not supported).

	/*

	 * Get kernel address of each buffer.

	/*

	 * Read mode requires pre queuing of all buffers.

		/*

		 * Queue all buffers.

		/*

		 * All buffers have been queued, so mark that by setting

		 * initial_index to q->num_buffers

	/*

	 * Start streaming.

/*

 * __vb2_cleanup_fileio() - free resourced used by file io emulator

 * @q:		videobuf2 queue

/*

 * __vb2_perform_fileio() - perform a single file io (read or write) operation

 * @q:		videobuf2 queue

 * @data:	pointed to target userspace buffer

 * @count:	number of bytes to read or write

 * @ppos:	file handle position tracking pointer

 * @nonblock:	mode selector (1 means blocking calls, 0 means nonblocking)

 * @read:	access mode selector (1 means read, 0 means write)

	/*

	 * When using write() to write data to an output video node the vb2 core

	 * should copy timestamps if V4L2_BUF_FLAG_TIMESTAMP_COPY is set. Nobody

	 * else is able to provide this information with the write() operation.

	/*

	 * Initialize emulator on first call.

	/*

	 * Check if we need to dequeue the buffer.

		/*

		 * Call vb2_dqbuf to get buffer back.

		/*

		 * Get number of bytes filled by the driver

 Compensate for data_offset on read in the multiplanar case. */

	/*

	 * Limit count on last few bytes of the buffer.

	/*

	 * Transfer data to userspace.

	/*

	 * Update counters.

	/*

	 * Queue next buffer if required.

		/*

		 * Check if this is the last buffer to read.

		/*

		 * Call vb2_qbuf and give buffer to the driver.

		/*

		 * Buffer has been queued, update the status

		/*

		 * If we are queuing up buffers for the first time, then

		 * increase initial_index by one.

		/*

		 * The next buffer to use is either a buffer that's going to be

		 * queued for the first time (initial_index < q->num_buffers)

		 * or it is equal to q->num_buffers, meaning that the next

		 * time we need to dequeue a buffer since we've now queued up

		 * all the 'first time' buffers.

	/*

	 * Return proper number of bytes processed.

		/*

		 * Call vb2_dqbuf to get buffer back.

 Hmm, linux becomes *very* unhappy without this ... */

/*

 * This function should not be used for anything else but the videobuf2-dvb

 * support. If you think you have another good use-case for this, then please

 * contact the linux-media mailinglist first.

 Wake up all pending sleeps in the thread */

/*

 * videobuf2-dma-contig.c - DMA contig memory allocator for videobuf2

 *

 * Copyright (C) 2010 Samsung Electronics

 *

 * Author: Pawel Osciak <pawel@osciak.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation.

 MMAP related */

 DMABUF related */

********************************************/

        scatterlist table functions        */

********************************************/

********************************************/

         callbacks for all buffers         */

********************************************/

/*

 * This function may fail if:

 *

 * - dma_buf_vmap() fails

 *   E.g. due to lack of virtual mapping address space, or due to

 *   dmabuf->ops misconfiguration.

 *

 * - dma_vmap_noncontiguous() fails

 *   For instance, when requested buffer size is larger than totalram_pages().

 *   Relevant for buffers that use non-coherent memory.

 *

 * - Queue DMA attrs have DMA_ATTR_NO_KERNEL_MAPPING set

 *   Relevant for buffers that use coherent memory.

 This takes care of DMABUF and user-enforced cache sync hint */

 For both USERPTR and non-coherent MMAP */

 Non-coherent MMAP only */

 This takes care of DMABUF and user-enforced cache sync hint */

 For both USERPTR and non-coherent MMAP */

 Non-coherent MMAP only */

********************************************/

        callbacks for MMAP buffers         */

********************************************/

	/*

	 * For non-coherent buffers the kernel mapping is created on demand

	 * in vb2_dc_vaddr().

 Prevent the device from being released while the buffer is used */

********************************************/

         DMABUF ops for exporters          */

********************************************/

	/* Copy the buf->base_sgt scatter list to the attachment, as we can't

	 * map the same scatter list to multiple attachments at the same time.

 release the scatterlist cache */

		/*

		 * Cache sync can be skipped here, as the vb2_dc memory is

		 * allocated from device coherent memory, which means the

		 * memory locations do not require any explicit cache

		 * maintenance prior or after being used by the device.

 stealing dmabuf mutex to serialize map/unmap operations */

 return previously mapped sg table */

 release any previous cache */

	/*

	 * mapping to the client with new direction, no cache sync

	 * required see comment in vb2_dc_dmabuf_ops_detach()

 nothing to be done here */

 drop reference obtained in vb2_dc_get_dmabuf */

 dmabuf keeps reference to vb2 buffer */

********************************************/

       callbacks for USERPTR buffers       */

********************************************/

		/*

		 * No need to sync to CPU, it's already synced to the CPU

		 * since the finish() memop will have been called before this.

 sgt should exist only if vector contains pages... */

 Only cache aligned DMA transfers are reliable */

		/*

		 * Failed to convert to pages... Check the memory is physically

		 * contiguous and use direct mapping

	/*

	 * No need to sync to the device, this will happen later when the

	 * prepare() memop is called.

********************************************/

       callbacks for DMABUF buffers        */

********************************************/

 get the associated scatterlist for this buffer */

 checking if dmabuf is big enough to store contiguous chunk */

 if vb2 works correctly you should never detach mapped buffer */

 detach this attachment */

 create attachment for the dmabuf with the user device */

********************************************/

       DMA CONTIG exported functions       */

********************************************/

/**

 * vb2_dma_contig_set_max_seg_size() - configure DMA max segment size

 * @dev:	device for configuring DMA parameters

 * @size:	size of DMA max segment size to set

 *

 * To allow mapping the scatter-list into a single chunk in the DMA

 * address space, the device is required to have the DMA max segment

 * size parameter set to a value larger than the buffer size. Otherwise,

 * the DMA-mapping subsystem will split the mapping into max segment

 * size chunks. This function sets the DMA max segment size

 * parameter to let DMA-mapping map a buffer as a single chunk in DMA

 * address space.

 * This code assumes that the DMA-mapping subsystem will merge all

 * scatterlist segments if this is really possible (for example when

 * an IOMMU is available and enabled).

 * Ideally, this parameter should be set by the generic bus code, but it

 * is left with the default 64KiB value due to historical litmiations in

 * other subsystems (like limited USB host drivers) and there no good

 * place to set it to the proper value.

 * This function should be called from the drivers, which are known to

 * operate on platforms with IOMMU and provide access to shared buffers

 * (either USERPTR or DMABUF). This should be done before initializing

 * videobuf2 queue.

/*

 * videobuf2-dma-sg.c - dma scatter/gather memory allocator for videobuf2

 *

 * Copyright (C) 2010 Samsung Electronics

 *

 * Author: Andrzej Pietrasiewicz <andrzejtp2010@gmail.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation.

	/*

	 * This will point to sg_table when used with the MMAP or USERPTR

	 * memory model, and to the dma_buf sglist when used with the

	 * DMABUF memory model.

 Don't over allocate*/

 size is already page aligned */

	/*

	 * NOTE: dma-sg allocates memory using the page allocator directly, so

	 * there is no memory consistency guarantee, hence dma-sg ignores DMA

	 * attributes passed from the upper layer.

 Prevent the device from being released while the buffer is used */

	/*

	 * No need to sync to the device, this will happen later when the

	 * prepare() memop is called.

	/*

	 * No need to sync to the device, this will happen later when the

	 * prepare() memop is called.

/*

 * @put_userptr: inform the allocator that a USERPTR buffer will no longer

 *		 be used

 add offset in case userptr is not page-aligned */

	/*

	 * Use common vm_area operations to track buffer refcount.

********************************************/

         DMABUF ops for exporters          */

********************************************/

	/* Copy the buf->base_sgt scatter list to the attachment, as we can't

	 * map the same scatter list to multiple attachments at the same time.

 release the scatterlist cache */

 stealing dmabuf mutex to serialize map/unmap operations */

 return previously mapped sg table */

 release any previous cache */

 mapping to the client with new direction */

 nothing to be done here */

 drop reference obtained in vb2_dma_sg_get_dmabuf */

 dmabuf keeps reference to vb2 buffer */

********************************************/

       callbacks for DMABUF buffers        */

********************************************/

 get the associated scatterlist for this buffer */

 if vb2 works correctly you should never detach mapped buffer */

 detach this attachment */

 create attachment for the dmabuf with the user device */

 SPDX-License-Identifier: GPL-2.0

/*

 * videobuf2-vmalloc.c - vmalloc memory allocator for videobuf2

 *

 * Copyright (C) 2010 Samsung Electronics

 *

 * Author: Pawel Osciak <pawel@osciak.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation.

		/*

		 * We cannot get page pointers for these pfns. Check memory is

		 * physically contiguous and use direct mapping.

	/*

	 * Make sure that vm_areas for 2 buffers won't be merged together

	/*

	 * Use common vm_area operations to track buffer refcount.

********************************************/

         DMABUF ops for exporters          */

********************************************/

 release the scatterlist cache */

 stealing dmabuf mutex to serialize map/unmap operations */

 return previously mapped sg table */

 release any previous cache */

 mapping to the client with new direction */

 nothing to be done here */

 drop reference obtained in vb2_vmalloc_get_dmabuf */

 dmabuf keeps reference to vb2 buffer */

 CONFIG_HAS_DMA */

********************************************/

       callbacks for DMABUF buffers        */

********************************************/

/*

 * videobuf2-memops.c - generic memory handling routines for videobuf2

 *

 * Copyright (C) 2010 Samsung Electronics

 *

 * Author: Pawel Osciak <pawel@osciak.com>

 *	   Marek Szyprowski <m.szyprowski@samsung.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation.

/**

 * vb2_create_framevec() - map virtual addresses to pfns

 * @start:	Virtual user address where we start mapping

 * @length:	Length of a range to map

 *

 * This function allocates and fills in a vector with pfns corresponding to

 * virtual address range passed in arguments. If pfns have corresponding pages,

 * page references are also grabbed to pin pages in memory. The function

 * returns pointer to the vector on success and error pointer in case of

 * failure. Returned vector needs to be freed via vb2_destroy_pfnvec().

 We accept only complete set of PFNs */

/**

 * vb2_destroy_framevec() - release vector of mapped pfns

 * @vec:	vector of pfns / pages to release

 *

 * This releases references to all pages in the vector @vec (if corresponding

 * pfns are backed by pages) and frees the passed vector.

/**

 * vb2_common_vm_open() - increase refcount of the vma

 * @vma:	virtual memory region for the mapping

 *

 * This function adds another user to the provided vma. It expects

 * struct vb2_vmarea_handler pointer in vma->vm_private_data.

/**

 * vb2_common_vm_close() - decrease refcount of the vma

 * @vma:	virtual memory region for the mapping

 *

 * This function releases the user from the provided vma. It expects

 * struct vb2_vmarea_handler pointer in vma->vm_private_data.

/*

 * vb2_common_vm_ops - common vm_ops used for tracking refcount of mmapped

 * video buffers

/*

 * videobuf2-v4l2.c - V4L2 driver helper framework

 *

 * Copyright (C) 2010 Samsung Electronics

 *

 * Author: Pawel Osciak <pawel@osciak.com>

 *	   Marek Szyprowski <m.szyprowski@samsung.com>

 *

 * The vb2_thread implementation was based on code from videobuf-dvb.c:

 *	(c) 2004 Gerd Knorr <kraxel@bytesex.org> [SUSE Labs]

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation.

 Flags that are set by us */

 Output buffer flags that should be passed on to the driver */

/*

 * __verify_planes_array() - verify that the planes array passed in struct

 * v4l2_buffer from userspace can be safely used

 Is memory for copying plane information present? */

/*

 * __verify_length() - Verify that the bytesused value for each plane fits in

 * the plane length and that the data offset doesn't exceed the bytesused value.

/*

 * __init_vb2_v4l2_buffer() - initialize the vb2_v4l2_buffer struct

		/*

		 * For output buffers copy the timestamp if needed,

		 * and the timecode field and flag if needed.

		/*

		 * If the format's field is ALTERNATE, then the buffer's field

		 * should be either TOP or BOTTOM, not ALTERNATE since that

		 * makes no sense. The driver has to know whether the

		 * buffer represents a top or a bottom field in order to

		 * program any DMA correctly. Using ALTERNATE is wrong, since

		 * that just says that it is either a top or a bottom field,

		 * but not which of the two it is.

 Fill in driver-provided information for OUTPUT types */

			/*

			 * Will have to go up to b->length when API starts

			 * accepting variable number of planes.

			 *

			 * If bytesused == 0 for the output buffer, then fall

			 * back to the full buffer size. In that case

			 * userspace clearly never bothered to set it and

			 * it's a safe assumption that they really meant to

			 * use the full plane sizes.

			 *

			 * Some drivers, e.g. old codec drivers, use bytesused == 0

			 * as a way to indicate that streaming is finished.

			 * In that case, the driver should use the

			 * allow_zero_bytesused flag to keep old userspace

			 * applications working.

		/*

		 * Single-planar buffers do not use planes array,

		 * so fill in relevant v4l2_buffer struct fields instead.

		 * In videobuf we use our internal V4l2_planes struct for

		 * single-planar buffers as well, for simplicity.

		 *

		 * If bytesused == 0 for the output buffer, then fall back

		 * to the full buffer size as that's a sensible default.

		 *

		 * Some drivers, e.g. old codec drivers, use bytesused == 0 as

		 * a way to indicate that streaming is finished. In that case,

		 * the driver should use the allow_zero_bytesused flag to keep

		 * old userspace applications working.

 Zero flags that we handle */

		/*

		 * Non-COPY timestamps and non-OUTPUT queues will get

		 * their timestamp and timestamp source flags from the

		 * queue.

		/*

		 * For output buffers mask out the timecode flag:

		 * this will be handled later in vb2_qbuf().

		 * The 'field' is valid metadata for this output buffer

		 * and so that needs to be copied here.

 Zero any output buffer flags as this is a capture buffer */

 Zero last flag, this is a signal from driver to userspace */

		/*

		 * Clear buffer cache flags if queue does not support user

		 * space hints. That's to indicate to userspace that these

		 * flags won't work.

 Should never happen */

 Copy relevant information provided by the userspace */

	/*

	 * For proper locking when queueing a request you need to be able

	 * to lock access to the vb2 queue, so check that there is a lock

	 * that we can use. In addition p_req must be non-NULL.

	/*

	 * Make sure this op is implemented by the driver. It's easy to forget

	 * this callback, but is it important when canceling a buffer in a

	 * queued request.

	/*

	 * Make sure this op is implemented by the driver for the output queue.

	 * It's easy to forget this callback, but is it important to correctly

	 * validate the 'field' value at QBUF time.

	/*

	 * Early sanity check. This is checked again when the buffer

	 * is bound to the request in vb2_core_qbuf().

/*

 * __fill_v4l2_buffer() - fill in a struct v4l2_buffer with information to be

 * returned to userspace

 Copy back data such as timestamp, flags, etc. */

		/*

		 * Fill in plane-related data if userspace provided an array

		 * for it. The caller has already verified memory and size.

		/*

		 * We use length and offset in v4l2_planes array even for

		 * single-planar buffers, but userspace does not.

	/*

	 * Clear any buffer state related flags.

		/*

		 * For non-COPY timestamps, drop timestamp source bits

		 * and obtain the timestamp source from the queue.

 nothing */

/*

 * __fill_vb2_buffer() - fill a vb2_buffer with information provided in a

 * v4l2_buffer by the userspace. It also verifies that struct

 * v4l2_buffer has a valid number of planes.

/*

 * vb2_querybuf() - query video buffer information

 * @q:		videobuf queue

 * @b:		buffer struct passed from userspace to vidioc_querybuf handler

 *		in driver

 *

 * Should be called from vidioc_querybuf ioctl handler in driver.

 * This function will verify the passed v4l2_buffer structure and fill the

 * relevant information for the userspace.

 *

 * The return values from this function are intended to be directly returned

 * from vidioc_querybuf handler in driver.

		/*

		 * This needs to clear V4L2_MEMORY_FLAG_NON_COHERENT only,

		 * but in order to avoid bugs we zero out all bits.

 Clear all unknown flags. */

	/*

	 *  After calling the VIDIOC_DQBUF V4L2_BUF_FLAG_DONE must be

	 *  cleared.

	/*

	 * Sanity check

 Warn that the driver should choose an appropriate timestamp type */

 Warn that vb2_memory should match with v4l2_memory */

	/*

	 * For compatibility with vb1: if QBUF hasn't been called yet, then

	 * return EPOLLERR as well. This only affects capture queues, output

	 * queues will always initialize waiting_for_buffers to false.

/*

 * The following functions are not part of the vb2 core API, but are helper

 * functions that plug into struct v4l2_ioctl_ops, struct v4l2_file_operations

 * and struct vb2_ops.

 * They contain boilerplate code that most if not all drivers have to do

 * and so they simplify the driver code.

 The queue is busy if there is a owner and you are not that owner. */

 vb2 ioctl helpers */

	/* If count == 0, then the owner has released all buffers and he

	/*

	 * If count == 0, then just check if memory and type are valid.

	 * Any -EBUSY result from vb2_verify_memory_type can be mapped to 0.

 No need to call vb2_queue_is_busy(), anyone can query buffers. */

 v4l2_file_operations helpers */

	/*

	 * If this helper doesn't know how to lock, then you shouldn't be using

	 * it but you should write your own.

 If fileio was started, then we have a new queue owner. */

 Check if vdev was ever registered at all */

	/*

	 * Calling this function only makes sense if vdev->queue is set.

	 * If it is NULL, then just call video_unregister_device() instead.

	/*

	 * Take a reference to the device since video_unregister_device()

	 * calls device_unregister(), but we don't want that to release

	 * the device since we want to clean up the queue first.

	/*

	 * Now we put the device, and in most cases this will release

	 * everything.

 vb2_ops helpers. Only use if vq->lock is non-NULL. */

/*

 * Note that this function is called during validation time and

 * thus the req_queue_mutex is held to ensure no request objects

 * can be added or deleted while validating. So there is no need

 * to protect the objects list.

	/*

	 * Queue all objects. Note that buffer objects are at the end of the

	 * objects list, after all other object types. Once buffer objects

	 * are queued, the driver might delete them immediately (if the driver

	 * processes the buffer at once), so we have to use

	 * list_for_each_entry_safe() to handle the case where the object we

	 * queue is deleted.

 SPDX-License-Identifier: GPL-2.0

/**

 * get_vaddr_frames() - map virtual addresses to pfns

 * @start:	starting user address

 * @nr_frames:	number of pages / pfns from start to map

 * @vec:	structure which receives pages / pfns of the addresses mapped.

 *		It should have space for at least nr_frames entries.

 *

 * This function maps virtual addresses from @start and fills @vec structure

 * with page frame numbers or page pointers to corresponding pages (choice

 * depends on the type of the vma underlying the virtual address). If @start

 * belongs to a normal vma, the function grabs reference to each of the pages

 * to pin them in memory. If @start belongs to VM_IO | VM_PFNMAP vma, we don't

 * touch page structures and the caller must make sure pfns aren't reused for

 * anything else while he is using them.

 *

 * The function returns number of pages mapped which may be less than

 * @nr_frames. In particular we stop mapping if there are more vmas of

 * different type underlying the specified range of virtual addresses.

 * When the function isn't able to map a single page, it returns error.

 *

 * This function takes care of grabbing mmap_lock as necessary.

 Bail out if VMA doesn't completely cover the tail page. */

/**

 * put_vaddr_frames() - drop references to pages if get_vaddr_frames() acquired

 *			them

 * @vec:	frame vector to put

 *

 * Drop references to pages if get_vaddr_frames() acquired them. We also

 * invalidate the frame vector so that it is prepared for the next call into

 * get_vaddr_frames().

	/*

	 * frame_vector_pages() might needed to do a conversion when

	 * get_vaddr_frames() got pages but vec was later converted to pfns.

	 * But it shouldn't really fail to convert pfns back...

/**

 * frame_vector_to_pages - convert frame vector to contain page pointers

 * @vec:	frame vector to convert

 *

 * Convert @vec to contain array of page pointers.  If the conversion is

 * successful, return 0. Otherwise return an error. Note that we do not grab

 * page references for the page structures.

/**

 * frame_vector_to_pfns - convert frame vector to contain pfns

 * @vec:	frame vector to convert

 *

 * Convert @vec to contain array of pfns.

/**

 * frame_vector_create() - allocate & initialize structure for pinned pfns

 * @nr_frames:	number of pfns slots we should reserve

 *

 * Allocate and initialize struct pinned_pfns to be able to hold @nr_pfns

 * pfns.

	/*

	 * This is absurdly high. It's here just to avoid strange effects when

	 * arithmetics overflows.

	/*

	 * Avoid higher order allocations, use vmalloc instead. It should

	 * be rare anyway.

/**

 * frame_vector_destroy() - free memory allocated to carry frame vector

 * @vec:	Frame vector to free

 *

 * Free structure allocated by frame_vector_create() to carry frames.

 Make sure put_vaddr_frames() got called properly... */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 * some helper function for simple DVB cards which simply DMA the

 * complete transport stream and let the computer sort everything else

 * (i.e. we are using the software demux, ...).  Also uses the

 * video-buf to manage DMA buffers.

 *

 * (c) 2004 Gerd Knorr <kraxel@bytesex.org> [SUSE Labs]

 ------------------------------------------------------------------ */

 ------------------------------------------------------------------ */

 register adapter */

 register frontend */

 register demux stuff */

 register network adapter */

 ------------------------------------------------------------------ */

 Register a single adapter and one or more frontends */

 Bring up the adapter */

 Attach all of the frontends to the adapter */

 always allocated, may have been reset */

 remove list entry */

 free frontend allocation */

 SPDX-License-Identifier: GPL-2.0+



 Copyright(c) 2013 Mauro Carvalho Chehab

 EOF */

 return EOF to read() */

/*

 * Functions used by smsdvb, in order to create the interfaces

	/*

	 * FIXME: This was written to debug Siano USB devices. So, it creates

	 * the debugfs node under <debugfs>/usb.

	 * A similar logic would be needed for Siano sdio devices, but, in that

	 * case, usb_debug_root is not a good choice.

	 *

	 * Perhaps the right fix here would be to create another sysfs root

	 * node for sdio-based boards, but this may need some logic at sdio

	 * subsystem.

 SPDX-License-Identifier: GPL-2.0-or-later

/****************************************************************



 Siano Mobile Silicon, Inc.

 MDTV receiver kernel modules.

 Copyright (C) 2006-2009, Uri Shkolnik





 __BIG_ENDIAN */

 __BIG_ENDIAN */

 __BIG_ENDIAN */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Siano core API module

 *

 *  This file contains implementation for the interface to sms core component

 *

 *  author: Uri Shkolnik

 *

 *  Copyright (c), 2005-2008 Siano Mobile Silicon, Inc.

/*

 * register a client callback that called when device plugged in/unplugged

 * NOTE: if devices exist callback is called immediately for each device

 *

 * @param hotplug callback

 *

 * return: 0 on success, <0 on error.

 now notify callback about existing devices */

/*

 * unregister a client callback that called when device plugged in/unplugged

 *

 * @param hotplug callback

 *

 the client must call smscore_unregister_client from remove handler */

 note: must be called under g_deviceslock */

/*

 * creates coredev object for a device, prepares buffers,

 * creates buffer mappings, notifies registered hotplugs about new device.

 *

 * @param params device pointer to struct with device specific parameters

 *               and handlers

 * @param coredev pointer to a value that receives created coredev object

 *

 * return: 0 on success, <0 on error.

 init list entry so it could be safe in smscore_unregister_device */

 init queues */

 init locks */

 init completion events */

 Buffer management */

 alloc common buffer */

 prepare dma buffers */

 add device to devices list */

/*

 * Starts & enables IR operations

 *

 * return: 0 on success, < 0 on error.

 only if IR port exist we use IR sub-module */

/*

 * configures device features according to board configuration structure.

 *

 * @param coredev pointer to a coredev object returned by

 *                smscore_register_device

 *

 * return: 0 on success, <0 on error.

/*

 * sets initial device mode and notifies client hotplugs that device is ready

 *

 * @param coredev pointer to a coredev object returned by

 *		  smscore_register_device

 *

 * return: 0 on success, <0 on error.

 Device is initialized as DEVICE_MODE_NONE */

 PAGE_SIZE buffer shall be enough and dma aligned */

 Entry point */

 Regular checksum*/

 Entry point */

 Priority */

 Stack size */

 Parameter */

 Task ID */

	/*

	 * backward compatibility - wait to device_ready_done for

	 * not more than 400 ms

/*

 * get firmware file name from one of the two mechanisms : sms_boards or

 * smscore_fw_lkup.

 * @param coredev pointer to a coredev object returned by

 *		  smscore_register_device

 * @param mode requested mode of operation

 * @param lookup if 1, always get the fw filename from smscore_fw_lkup

 *	 table. if 0, try first to get from sms_boards

 *

 * return: 0 on success, <0 on error.

 Prevent looking outside the smscore_fw_lkup table */

/*

 * loads specified firmware into a buffer and calls device loadfirmware_handler

 *

 * @param coredev pointer to a coredev object returned by

 *                smscore_register_device

 * @param filename null-terminated string specifies firmware file name

 * @param loadfirmware_handler device handler that loads firmware

 *

 * return: 0 on success, <0 on error.

/*

 * notifies all clients registered with the device, notifies hotplugs,

 * frees all buffers and coredev object

 *

 * @param coredev pointer to a coredev object returned by

 *                smscore_register_device

 *

 * return: 0 on success, <0 on error.

 Release input device (IR) resources */

	/* at this point all buffers should be back

/*

 * send init device request and wait for response

 *

 * @param coredev pointer to a coredev object returned by

 *                smscore_register_device

 * @param mode requested mode of operation

 *

 * return: 0 on success, <0 on error.

/*

 * calls device handler to change mode of operation

 * NOTE: stellar/usb may disconnect when changing mode

 *

 * @param coredev pointer to a coredev object returned by

 *                smscore_register_device

 * @param mode requested mode of operation

 *

 * return: 0 on success, <0 on error.

/*

 * calls device handler to get current mode of operation

 *

 * @param coredev pointer to a coredev object returned by

 *                smscore_register_device

 *

 * return: current mode

/*

 * find client by response id & type within the clients list.

 * return client handle or NULL.

 *

 * @param coredev pointer to a coredev object returned by

 *                smscore_register_device

 * @param data_type client data type (SMS_DONT_CARE for all types)

 * @param id client id (SMS_DONT_CARE for all id)

 *

/*

 * find client by response id/type, call clients onresponse handler

 * return buffer to pool on error

 *

 * @param coredev pointer to a coredev object returned by

 *                smscore_register_device

 * @param cb pointer to response buffer descriptor

 *

 = 0; */

 = 0; */

 Do we need to re-route? */

	/* If no client registered for type & id,

			/*

			 * It can be received here, if the frontend is

			 * tuned into a valid channel and the proper firmware

			 * is loaded. That happens when the module got removed

			 * and re-inserted, without powering the device off

/*

 * return pointer to next free buffer descriptor from core pool

 *

 * @param coredev pointer to a coredev object returned by

 *                smscore_register_device

 *

 * return: pointer to descriptor on success, NULL on error.

/*

 * return buffer descriptor to a pool

 *

 * @param coredev pointer to a coredev object returned by

 *                smscore_register_device

 * @param cb pointer buffer descriptor

 *

/*

 * creates smsclient object, check that id is taken by another client

 *

 * @param coredev pointer to a coredev object from clients hotplug

 * @param initial_id all messages with this id would be sent to this client

 * @param data_type all messages of this type would be sent to this client

 * @param onresponse_handler client handler that is called to

 *                           process incoming messages

 * @param onremove_handler client handler that is called when device is removed

 * @param context client-specific context

 * @param client pointer to a value that receives created smsclient object

 *

 * return: 0 on success, <0 on error.

 check that no other channel with same parameters exists */

/*

 * frees smsclient object and all subclients associated with it

 *

 * @param client pointer to smsclient object returned by

 *               smscore_register_client

 *

/*

 * verifies that source id is not taken by another client,

 * calls device handler to send requests to the device

 *

 * @param client pointer to smsclient object returned by

 *               smscore_register_client

 * @param buffer pointer to a request buffer

 * @param size size (in bytes) of request buffer

 *

 * return: 0 on success, <0 on error.

 check that no other channel with same id exists */

 old GPIO managements implementation */

 Convert slew rate for Nova: Fast(0) = 3 / Slow(1) = 0; */

 Nova - 16mA */

 Nova - 11mA */

 Nova - 7mA */

 Nova - 4mA */

 TODO: SMS_DEVICE_FAMILY1 */

 new GPIO management implementation */

 keep it 3 ! */

 keep it 3 ! */

 Send message to SMS */

 Send message to SMS */

	/* Its a race between other gpio_get_level() and the copy of the single

	 * global 'coredev->gpio_get_res' to  the function's variable 'level'

 This should match what's defined at smscoreapi.h */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Card-specific functions for the Siano SMS1xxx USB dongle

 *

 *  Copyright (c) 2008 Michael Krufky <mkrufky@linuxtv.org>

 including hotplug */

 BOARD_EVENT_BIND */

 BOARD_EVENT_POWER_SUSPEND */

 BOARD_EVENT_POWER_RESUME */

 BOARD_EVENT_BIND */

 BOARD_EVENT_SCAN_PROG */

 BOARD_EVENT_SCAN_COMP */

 BOARD_EVENT_EMERGENCY_WARNING_SIGNAL */

 BOARD_EVENT_FE_LOCK */

 BOARD_EVENT_FE_UNLOCK */

 BOARD_EVENT_DEMOD_LOCK */

 BOARD_EVENT_DEMOD_UNLOCK */

 BOARD_EVENT_RECEPTION_MAX_4 */

 BOARD_EVENT_RECEPTION_3 */

 BOARD_EVENT_RECEPTION_2 */

 BOARD_EVENT_RECEPTION_1 */

 BOARD_EVENT_RECEPTION_LOST_0 */

 BOARD_EVENT_MULTIPLEX_OK */

 BOARD_EVENT_MULTIPLEX_ERRORS */

 inverted gpio */

 turn off all LEDs */

 turn off LNA */

 power LED */

 LNA */

 don't touch GPIO if LEDs are already set */

 SPDX-License-Identifier: GPL-2.0-or-later

/****************************************************************



Siano Mobile Silicon, Inc.

MDTV receiver kernel modules.

Copyright (C) 2006-2008, Uri Shkolnik





 Events that may come from DVB v3 adapter */

 Global stats */

 Per-layer stats */

	/*

	 * Put all of them at FE_SCALE_NOT_AVAILABLE. They're dynamically

	 * changed when the stats become available.

 signal Strength, in DBm */

 Carrier to noise ratio, in DB */

 PER/BER requires demod lock */

 TS PER */

 ber */

 Legacy PER/BER */

 Update DVB modulation parameters */

 update reception data */

 Carrier to noise ratio, in DB */

 signal Strength, in DBm */

 PER/BER requires demod lock */

 TS PER */

 ber */

 Legacy PER/BER */

	/*

	 * Firmware 2.1 seems to report only lock status and

	 * signal strength. The signal strength indicator is at the

	 * wrong field.

 Update ISDB-T transmission parameters */

 update reception data */

 Carrier to noise ratio, in DB */

 signal Strength, in DBm */

 PER/BER and per-layer stats require demod lock */

 Clears global counters, as the code below will sum it again */

 Update per-layer transmission parameters */

 Time interleaving */

 TS PER */

 Update global PER counter */

 BER */

 Update global BER counter */

 Update ISDB-T transmission parameters */

 update reception data */

 Carrier to noise ratio, in DB */

 signal Strength, in DBm */

 PER/BER and per-layer stats require demod lock */

 Clears global counters, as the code below will sum it again */

 Update per-layer transmission parameters */

 Time interleaving */

 TS PER */

 Update global PER counter */

 ber */

 Update global ber counter */

		/*

		 * Only feed data to dvb demux if are there any feed listening

		 * to it and if the device has tuned

 Skip sms_msg_statistics_info:request_result field */

 Only for ISDB-T */

 Skip sms_msg_statistics_info:request_result field? */

 must be called under clientslock */

 Don't request stats too fast */

		/*

		* Check for firmware version, to avoid breaking for old cards

 Preferred scale for SNR with legacy API: 0.1 dB */

 Disable LNA, if any. An error is returned if no LNA is present */

 tune with LNA off at first */

 previous tune didn't lock - enable LNA and tune again */

 Disable LNA, if any. An error is returned if no LNA is present */

 tune with LNA off at first */

 previous tune didn't lock - enable LNA and tune again */

 do nothing */

 device removal handled by onremove callback */

 register dvb adapter */

 init dvb demux */

 todo: nova ??? */

 init dmxdev */

 init and register frontend */

 SPDX-License-Identifier: GPL-2.0+



 Siano Mobile Silicon, Inc.

 MDTV receiver kernel modules.

 Copyright (C) 2006-2009, Uri Shkolnik



 Copyright (c) 2010 - Mauro Carvalho Chehab

	- Ported the driver to use rc-core

	- IR raw event decoding is now done at rc-core

	- Code almost re-written

 Todo: vega/nova SPI number */

 TODO: properly initialize the parameters below */

 SPDX-License-Identifier: GPL-2.0

/*

 * Linux driver for digital TV devices equipped with B2C2 FlexcopII(b)/III

 * flexcop-eeprom.c - eeprom access methods (currently only MAC address reading)

 * see flexcop.c for copyright information

EEPROM (Skystar2 has one "24LC08B" chip on board) */

 These functions could be used to unlock SkyStar2 cards. */

/* JJ's comment about extended == 1: it is not presently used anywhere but was

 SPDX-License-Identifier: GPL-2.0

/*

 * Linux driver for digital TV devices equipped with B2C2 FlexcopII(b)/III

 * flexcop-misc.c - miscellaneous functions

 * see flexcop.c for copyright information

 bus parts have to decide if hw pid filtering is used or not. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Linux driver for digital TV devices equipped with B2C2 FlexcopII(b)/III

 * flexcop-sram.c - functions for controlling the SRAM

 * see flexcop.c for copyright information

 TODO delay really necessary */

		/* check if the address range belongs to the same

		 * 32K memory chip. If not, the data is read

		/* check if the address range belongs to the same

		 * 32K memory chip. If not, the data is

 32K */

 64K */

 128K */

 32K */

/* FlexcopII can work with 32K, 64K or 128K of external SRAM memory.

   - for 128K there are 4x32K chips at bank 0,1,2,3.

   - for  64K there are 2x32K chips at bank 1,2.

   - for  32K there is one 32K chip at bank 0.



   FlexCop works only with one bank at a time. The bank is selected

   by bits 28-29 of the 0x700 register.



   bank 0 covers addresses 0x00000-0x07fff

   bank 1 covers addresses 0x08000-0x0ffff

   bank 2 covers addresses 0x10000-0x17fff

 check for internal SRAM ???

 SPDX-License-Identifier: GPL-2.0

/*

 * Linux driver for digital TV devices equipped with B2C2 FlexcopII(b)/III

 * flexcop-fe-tuner.c - methods for frontend attachment and DiSEqC controlling

 * see flexcop.c for copyright information

/* Can we use the specified front-end?  Remember that if we are compiled

 lnb control */

 SkyStar2 DVB-S rev 2.3 */

 u16 wz_half_period_for_45_mhz[] = { 0x01ff, 0x0154, 0x00ff, 0x00cc }; */

 divide by 2 */

 SkyStar2 DVB-S rev 2.6 */

 SkyStar2 DVB-S rev 2.7 */

 enable no_base_addr - no repeated start when reading */

 enable no_base_addr - no repeated start when reading */

 the ITD1000 requires a lower i2c clock - is it a problem ? */

 Should i2c clock be restored? */

 for the next devices we need it again */

 SkyStar2 rev 2.8 */

	/* TODO on i2c_adap[1] addr 0x11 (EEPROM) there seems to be an

 AirStar DVB-T */

 AirStar ATSC 1st generation */

 AirStar ATSC 2nd generation */

 AirStar ATSC 3rd generation */

 CableStar2 DVB-C */

	/* This tuner doesn't use the stv0297's I2C gate, but instead the

 Reset for next frontend to try */

 SkyStar S2 PCI DVB-S/S2 card based on Conexant cx24120/cx24118 */

 try to figure out the frontend */

		/* type needs to be set before, because of some workarounds

 Clean up partially attached frontend */

 SPDX-License-Identifier: GPL-2.0

/*

 * Linux driver for digital TV devices equipped with B2C2 FlexcopII(b)/III

 * flexcop-hw-filter.c - pid and mac address filtering and control functions

 * see flexcop.c for copyright information

 index_reg_310.extra_index_reg need to 0 or 7 to work */

/* this fancy define reduces the code size of the quite similar PID controlling of

 * the first 6 PIDs

 First 6 can be buggy - skip over them if option set */

	/* We could use bit magic here to reduce source code size.

 set the index */

 the number of PIDs/Feed currently requested */

	/* toggle complete-TS-streaming when:

	 * - pid_filtering is not enabled and it is the first or last feed requested

	 * - pid_filtering is enabled,

	 *   - but the number of requested feeds is exceeded

 if it was the first or last feed request change the stream-status */

 device specific stream control */

 feeding stopped -> reset the flexcop filter*/

/*

 * Linux driver for digital TV devices equipped with B2C2 FlexcopII(b)/III

 * flexcop.c - main module part

 * Copyright (C) 2004-9 Patrick Boettcher <patrick.boettcher@posteo.de>

 * based on skystar2-driver Copyright (C) 2003 Vadim Catana, skystar@moldova.cc

 *

 * Acknowledgements:

 *   John Jurrius from BBTI, Inc. for extensive support

 *                    with code examples and data books

 *   Bjarne Steinsbo, bjarne at steinsbo.com (some ideas for rewriting)

 *

 * Contributions to the skystar2-driver have been done by

 *   Vincenzo Di Massa, hawk.it at tiscalinet.it (several DiSEqC fixes)

 *   Roberto Ragusa, r.ragusa at libero.it (polishing, restyling the code)

 *   Uwe Bugla, uwe.bugla at gmx.de (doing tests, restyling code, writing docu)

 *   Niklas Peinecke, peinecke at gdv.uni-hannover.de (hardware pid/mac

 *               filtering)

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU Lesser General Public License

 * as published by the Free Software Foundation; either version 2.1

 * of the License, or (at your option) any later version.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 global zero for ibi values */

/* these methods are necessary to achieve the long-term-goal of hiding the

 reset the flexcop itself */

 reset the periphical devices */

	/* i2c has to be done before doing EEProm stuff -

 do the MAC address reading after initializing the dvb_adapter */

 SPDX-License-Identifier: GPL-2.0

/*

 * Linux driver for digital TV devices equipped with B2C2 FlexcopII(b)/III

 * flexcop-i2c.c - flexcop internal 2Wire bus (I2C) and dvb i2c initialization

 * see flexcop.c for copyright information

 initiating i2c operation */

 remember total_bytes is buflen-1 */

	/* work-around to have CableStar2 and SkyStar2 rev 2.7 work

	 * correctly:

	 *

	 * the ITD1000 is behind an i2c-gate which closes automatically

	 * after an i2c-transaction the STV0297 needs 2 consecutive reads

	 * one with no_base_addr = 0 and one with 1

	 *

	 * those two work-arounds are conflictin: we check for the card

 there is at least one more byte, otherwise we wouldn't be here */

 remember total_bytes is buflen-1 */

 there is at least one byte, otherwise we wouldn't be here */

 write the additional i2c data before doing the actual i2c operation */

	/* in that case addr is the only value ->

	 * we write it twice as baseaddr and val0

 exported for PCI i2c */

 master xfer callback for demodulator */

	/* Some drivers use 1 byte or 0 byte reads as probes, which this

	 * driver doesn't support.  These probes will always fail, so this

	 * hack makes them always succeed.  If one knew how, it would of

 reading */

 skip the following message */

 writing */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * v4l2-tpg-core.c - Test Pattern Generator

 *

 * Note: gen_twopix and tpg_gen_text are based on code from vivi.c. See the

 * vivi.c source for the copyright information of those functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 Must remain in sync with enum tpg_pattern */

 Must remain in sync with enum tpg_aspect */

/*

 * Sine table: sin[0] = 127 * sin(-180 degrees)

 *             sin[128] = 127 * sin(0 degrees)

 *             sin[256] = 127 * sin(180 degrees)

 Global font descriptor */

 Value */

 Saturation */

 Hue */

 Clamp Hue */

		/* Ignore quantization range, there is only one possible

		/* Ignore quantization range, there is only one possible

		/* Ignore quantization range, there is only one possible

		/* Ignore quantization range, there is only one possible

 precalculate color bar values to speed up rendering */

 Rec. 709 Luma function */

 (0.2126, 0.7152, 0.0722) * (255 * 256) */

	/*

	 * The assumption is that the RGB output is always full range,

	 * so only if the rgb_range overrides the 'real' rgb range do

	 * we need to convert the RGB values.

	 *

	 * Remember that r, g and b are still in the 0 - 0xff0 range.

		/*

		 * Convert from full range (which is what r, g and b are)

		 * to limited range (which is the 'real' RGB range), which

		 * is then interpreted as full range.

		/*

		 * Clamp r, g and b to the limited range and convert to full

		 * range since that's what we deliver.

 Implement these operations */

 First convert to YCbCr */

 Convert to YCbCr */

		/*

		 * XV601/709 use the header/footer margins to encode R', G'

		 * and B' values outside the range [0-1]. So do not clamp

		 * XV601/709 values.

 'odd' is true for pixels 1, 3, 5, etc. and false for pixels 0, 2, 4, etc. */

 R or precalculated Y, H */

 G or precalculated U, V */

 B or precalculated V */

		/*

		 * Ideally both bytes should be set to r_y_h, but then you won't

		 * be able to detect endian problems. So keep it 0 except for

		 * the corner case where r_y_h is 0xff so white really will be

		 * white (0xffff).

 See comment for V4L2_PIX_FMT_Y16 above */

 Return how many pattern lines are used by the current pattern. */

 Which pattern line should be used for the given frame line. */

/*

 * Which color should be used for the given pattern line and X coordinate.

 * Note: x is in the range 0 to 2 * tpg->src_width.

	/* Maximum number of bars are TPG_COLOR_MAX - otherwise, the input print code

 Standard ITU-R 75% color bar sequence */

 Standard ITU-R 100% color bar sequence */

 Color bar sequence suitable to test CSC */

/*

 * Given the pixel aspect ratio and video aspect ratio calculate the

 * coordinates of a centered square and the coordinates of the border of

 * the active video area. The coordinates are relative to the source

 * frame rectangle.

 Coarse scaling with Bresenham */

 need this to do rgb24 rendering */

 Checks if it is possible to show string */

 Print text */

 Map the line number relative to the crop rectangle to a frame line number */

/*

 * Map the line number relative to the compose rectangle to a destination

 * buffer line number.

/*

 * This struct contains common parameters used by both the drawing of the

 * test pattern and the drawing of the extras (borders, square, etc.)

 common data */

 test pattern */

 extras */

		/*

		 * Replace the first half of the top line of a 50 Hz frame

		 * with random data to simulate a WSS signal.

			/*

			 * Now decide whether we need to use downsampled_lines[].

			 * That's necessary if the two lines use different patterns.

 Coarse scaling with Bresenham */

		/*

		 * For line-interleaved formats determine the 'plane'

		 * based on the buffer line.

			/*

			 * When doing vertical downsampling the field setting

			 * matters: for SEQ_BT/TB we downsample each field

			 * separately (i.e. lines 0+2 are combined, as are

			 * lines 1+3), for the other field settings we combine

			 * odd and even lines. Doing that for SEQ_BT/TB would

			 * be really weird.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * v4l2-tpg-colors.c - A table that converts colors to various colorspaces

 *

 * The test pattern generator uses the tpg_colors for its test patterns.

 * For testing colorspaces the first 8 colors of that table need to be

 * converted to their equivalent in the target colorspace.

 *

 * The tpg_csc_colors[] table is the result of that conversion and since

 * it is precalculated the colorspace conversion is just a simple table

 * lookup.

 *

 * This source also contains the code used to generate the tpg_csc_colors

 * table. Run the following command to compile it:

 *

 *	gcc v4l2-tpg-colors.c -DCOMPILE_APP -o gen-colors -lm

 *

 * and run the utility.

 *

 * Note that the converted colors are in the range 0x000-0xff0 (so times 16)

 * in order to preserve precision.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 sRGB colors with range [0-255] */

	/*

	 * Colors to test colorspace conversion: converting these colors

	 * to other colorspaces will never lead to out-of-gamut colors.

 TPG_COLOR_CSC_WHITE */

 TPG_COLOR_CSC_YELLOW */

 TPG_COLOR_CSC_CYAN */

 TPG_COLOR_CSC_GREEN */

 TPG_COLOR_CSC_MAGENTA */

 TPG_COLOR_CSC_RED */

 TPG_COLOR_CSC_BLUE */

 TPG_COLOR_CSC_BLACK */

 75% colors */

 TPG_COLOR_75_YELLOW */

 TPG_COLOR_75_CYAN */

 TPG_COLOR_75_GREEN */

 TPG_COLOR_75_MAGENTA */

 TPG_COLOR_75_RED */

 TPG_COLOR_75_BLUE */

 100% colors */

 TPG_COLOR_100_WHITE */

 TPG_COLOR_100_YELLOW */

 TPG_COLOR_100_CYAN */

 TPG_COLOR_100_GREEN */

 TPG_COLOR_100_MAGENTA */

 TPG_COLOR_100_RED */

 TPG_COLOR_100_BLUE */

 TPG_COLOR_100_BLACK */

 TPG_COLOR_RANDOM placeholder */

 Generated table */

 Generated table */

 Generated table */

 This code generates the table above */

	/*

	 * This transform uses the Bradford method to compensate for

	 * the different whitepoints.

	/*

	 * This transform uses the Bradford method to compensate for

	 * the different whitepoints.

	/*

	 * The RGB input maps to the luminance range 0-100 cd/m^2, while

	 * SMPTE-2084 maps values to the luminance range of 0-10000 cd/m^2.

	 * Hence the factor 100.

 Convert the primaries of Rec. 709 Linear RGB */

 Generated table */\n");

 Generated table */\n");

 Generated table */\n");

 SPDX-License-Identifier: GPL-2.0

	/* once again, a bug in the saa7146: the brs acquisition

	   is buggy and especially the BXO-counter does not work

	   as specified. there is this workaround, but please

 setup some basic programming, just for the workaround */

 load brs-control register */

 BXO = 1h, BRS to outbound */

 wait for vbi_a or vbi_b*/

/*

		WRITE_RPS1(CMD_PAUSE | MASK_09);

 upload brs */

 load brs-control register */

 BYO = 1, BXO = NQBIL (=1728 for PAL, for NTSC this is 858*2) - NumByte3 (=1440) = 288 */

 wait for brs_done */

 upload brs */

 load video-dma3 NumLines3 and NumBytes3 */

 dev->vbi_count*2 lines, 720 pixel (= 1440 Bytes) */

 load brs-control register */

 Set BRS right: note: this is an experimental value for BXO (=> PAL!) */

 5 == vbi_start

 wait for brs_done */

 upload brs and video-dma3*/

 load mc2 register: enable dma3 */

 generate interrupt */

 stop rps1 */

	/* we have to do the workaround twice to be sure that

 indicate to the irq handler that we do the workaround */

 enable rps1 irqs */

 prepare to wait to be woken up by the irq-handler */

 start rps1 to enable workaround */

 disable rps1 irqs */

 stop video-dma3 */

 stop rps1 for sure */

/*

	vdma3.base_even	= 0xc8000000+2560*70;

	vdma3.base_odd	= 0xc8000000;

	vdma3.prot_addr	= 0xc8000000+2560*164;

	vdma3.pitch	= 2560;

	vdma3.base_page	= 0;

	vdma3.num_line_byte = (64<<16)|((vbi_pixel_to_capture)<<0); // set above!

 write beginning of rps-program */

 wait for o_fid_a/b / e_fid_a/b toggle only if bit 1 is not set */

	/* we don't wait here for the first field anymore. this is different from the video

	   capture and might cause that the first buffer is only half filled (with only

	   one field). but since this is some sort of streaming data, this is not that negative.

/*

	WRITE_RPS1(CMD_PAUSE | CMD_OAN | CMD_SIG1 | e_wait);

	WRITE_RPS1(CMD_PAUSE | CMD_OAN | CMD_SIG1 | o_wait);

 set bit 1 */

 turn on video-dma3 */

 => mask */

 => values */

 wait for o_fid_a/b / e_fid_a/b toggle */

 generate interrupt */

 stop */

 enable rps1 irqs */

 write the address of the rps-program */

 turn on rps */

 2 fields */

 FIXME: check this

 2 fields */

 ------------------------------------------------------------------ */

 disable rps1  */

 disable rps1 irqs */

 shut down dma 3 transfers */

 adjust arbitrition control for video dma 3 */

 FIXME: does this really work?

 initialize the brs */

 return ret;*/

 upload brs register */

 this must be += 2, one count for each field */

 fixme: check if dma3 is available

 fixme: activate vbi engine here if necessary. (really?)

/*

	printk("BASE_ODD3:      0x%08x\n", saa7146_read(dev, BASE_ODD3));

	printk("BASE_EVEN3:     0x%08x\n", saa7146_read(dev, BASE_EVEN3));

	printk("PROT_ADDR3:     0x%08x\n", saa7146_read(dev, PROT_ADDR3));

	printk("PITCH3:         0x%08x\n", saa7146_read(dev, PITCH3));

	printk("BASE_PAGE3:     0x%08x\n", saa7146_read(dev, BASE_PAGE3));

	printk("NUM_LINE_BYTE3: 0x%08x\n", saa7146_read(dev, NUM_LINE_BYTE3));

	printk("BRS_CTRL:       0x%08x\n", saa7146_read(dev, BRS_CTRL));

 SPDX-License-Identifier: GPL-2.0

 DEB_I2C("'%s'\n", adapter->name); */

 this function returns the status-register of our i2c-device */

 DEB_I2C("status: 0x%08x\n", iicsta); */

/* this function runs through the i2c-messages and prepares the data to be

   sent through the saa7146. have a look at the specifications p. 122 ff

   to understand this. it returns the number of u32s to send, or -1

 first determine size of needed memory */

	/* worst case: we need one u32 for three bytes to be send

	/* we assume that op points to a memory of at least

	 * SAA7146_I2C_MEM bytes size. if we exceed this limit...

 DEB_I2C("cannot prepare i2c-message\n"); */

 be careful: clear out the i2c-mem first */

 loop through all messages */

 loop through all bytes of message i */

 insert the data bytes */

	/* have a look at the last byte inserted:

 return the number of u32s to send */

/* this functions loops through all i2c-messages. normally, it should determine

   which bytes were read through the adapter and write them back to the corresponding

   i2c-message. but instead, we simply write back all bytes.

 loop through all messages */

 loop through all bytes of message i */

 write back all bytes that could have been read */

 this functions resets the i2c-device and returns 0 if everything was fine, otherwise -1 */

 get current status */

 clear registers for sure */

 check if any operation is still in progress */

 yes, kill ongoing operation */

 set "ABORT-OPERATION"-bit (bit 7)*/

 clear all error-bits pending; this is needed because p.123, note 1 */

 check if any error is (still) present. (this can be necessary because p.123, note 1) */

		/* Repeat the abort operation. This seems to be necessary

 clear all error-bits pending */

		/* the data sheet says it might be necessary to clear the status

 if any error is still present, a fatal error has occurred ... */

/* this functions writes out the data-byte 'dword' to the i2c-device.

   it returns 0 if ok, -1 if the transfer failed, -2 if the transfer

 write out i2c-command */

 10ms */

 a signal arrived */

 do not poll for i2c-status before upload is complete */

 10ms */

 wait until we get a transfer done or error */

 10ms */

 first read usually delivers bogus results... */

				/* this is normal when probing the bus

				 * (no answer from nonexisistant device...)

 give a detailed status report */

 it may take some time until ERR goes high - ignore */

 we handle address-errors here */

 read back data, just in case we were reading ... */

 prepare the message(s), get number of u32s to transfer */

 reset the i2c-device if necessary */

 write out the u32s one after another */

				/* this one is unsatisfying: some i2c slaves on some

				   dvb cards don't acknowledge correctly, so the saa7146

				   thinks that an address error occurred. in that case, the

				   transaction should be retrying, even if an address error

				   occurred. analog saa7146 based cards extensively rely on

				   i2c address probing, however, and address errors indicate that a

				   device is really *not* there. retrying in that case

				   increases the time the device needs to probe greatly, so

				   it should be avoided. So we bail out in irq mode after an

 delay a bit before retrying */

 quit if any error occurred */

 if any things had to be read, get the results */

 return the number of delivered messages */

	/* another bug in revision 0: the i2c-registers get uploaded randomly by other

 utility functions */

 use helper function to transfer data */

****************************************************************************/

 i2c-adapter helper functions                                              */

 exported algorithm data */

 enable i2c-port pins */

 SPDX-License-Identifier: GPL-2.0-only

 clear out the necessary bits */

 set these bits new */

/* helper functions for the calculation of the horizontal- and vertical

   scaling registers, clip-format-register etc ...

   these functions take pointers to the (most-likely read-out

   original-values) and manipulate them according to the requested

   changes.

 hps_coeff used for CXY and CXUV; scale 1/1 -> scale 1/64 */

 table of attenuation values for horizontal scaling */

 calculate horizontal scale registers */

 horizontal prescaler */

 horizontal scaler */

 vertical scale & gain */

 helper variables */

 mask out vanity-bit */

	/* calculate prescale-(xspc)-value:	[n   .. 1/2) : 1

						[1/2 .. 1/3) : 2

						[1/3 .. 1/4) : 3

 zooming */

	/* if flip_lr-bit is set, number of pixels after

 set vanity bit */

	/* if zooming is wanted, number of pixels after

 maximum prescale is 64 (p.69) */

 keep xacm clear*/

 set horizontal filter parameters (CXY = CXUV) */

 calculate and set horizontal fine scale (xsci) */

 bypass the horizontal scaler ? */

 set start phase for horizontal fine scale (xp) to 0 */

 set xim, if we bypass the horizontal scaler */

	/* if the prescaler is bypassed, enable horizontal

		/* get best match in the table of attenuations

	/* the horizontal scaling increment controls the UV filter

	   to reduce the bandwidth to improve the display quality,

 table of attenuation values for vertical scaling */

 calculate vertical scale registers */

 vertical scaling */

 vertical scale & gain */

 helper variables */

 error, if vertical zooming */

	/* linear phase interpolation may be used

	   if scaling is between 1 and 1/2 (both fields used)

 calculate scaling increment */

 calculate ype and ypo */

 calculate scaling increment */

 calculate ype and ypo */

		/* the sequence length interval (yacl) has to be set according

		   to the prescale value, e.g.	[n   .. 1/2) : 0

						[1/2 .. 1/3) : 1

						[1/3 .. 1/4) : 2

 get filter coefficients for cya, cyb from table hps_v_coeff_tab */

 get best match in the table of attenuations for vertical scaling */

 ypo and ype swapped in spec ? */

 simple bubble-sort algorithm with duplicate elimination */

 sanity checks */

 bubble sort the first @count items of the array @values */

 remove duplicate items */

 clear out memory */

 fill the line and pixel-lists */

 insert left/right coordinates */

 insert top/bottom coordinates */

 sort and eliminate lists */

 calculate the number of used u32s */

 fill up cliptable */

 fill up cliptable with the display infos */

 adjust arbitration control register */

 set clipping-mode. this depends on the field(s) used */

 disable clipping */

 mask out relevant bits (=lower word)*/

 upload clipping-registers*/

 disable video dma2 */

 check clipcount, disable clipping if clipcount == 0*/

 set clipping format */

 prepare video dma2 */

 prepare the rest */

 upload clip_control-register, clipping-registers, enable video dma2 */

 set vertical scale */

 all bits get set by the function-call */

 fixme: saa7146_read(dev, HPS_V_GAIN);*/

 set horizontal scale */

 all bits get set in the function */

 set hyo and hxo */

 write out new register contents */

 upload shadow-ram registers */

 calculate the new memory offsets for a desired position */

	/* The unsigned long cast is to remove a 64-bit compile warning since

	   it looks like a 64-bit address is cast to a 32-bit value, even

	   though the base pointer is really a 32-bit physical address that

	   goes into a 32-bit DMA register.

	   FIXME: might not work on some 64-bit platforms, but see the FIXME

	   in struct v4l2_framebuffer (videodev2.h) for that.

 calculate memory offsets for picture, look if we shall top-down-flip */

 fixme */

 call helper function */

 update the hps registers */

 select input-source */

 read old state */

 write back & upload register */

 enable video dma1 */

 disable clipping + video dma1 */

 calculate starting address */

 upload */

/*

	printk("vdma%d.base_even:     0x%08x\n", which,vdma->base_even);

	printk("vdma%d.base_odd:      0x%08x\n", which,vdma->base_odd);

	printk("vdma%d.prot_addr:     0x%08x\n", which,vdma->prot_addr);

	printk("vdma%d.base_page:     0x%08x\n", which,vdma->base_page);

	printk("vdma%d.pitch:         0x%08x\n", which,vdma->pitch);

	printk("vdma%d.num_line_byte: 0x%08x\n", which,vdma->num_line_byte);

 fixme */

 fixme: look at bytesperline! */

 fixme: look at bytesperline! */

	/* fixme: what happens for user space buffers here?. The offsets are

	   most likely wrong, this version here only works for page-aligned

 unused */

 unused */

 fixme */

 wait for o_fid_a/b / e_fid_a/b toggle only if rps register 0 is not set*/

 set rps register 0 */

 turn on video-dma1 */

 => mask */

 => values */

 turn on video-dma2 */

 => mask */

 => values */

 turn on video-dma3 */

 => mask */

 => values */

 wait for o_fid_a/b / e_fid_a/b toggle */

 turn off video-dma1 */

 => mask */

 => values */

 turn off video-dma2 */

 => mask */

 => values */

 turn off video-dma3 */

 => mask */

 => values */

 generate interrupt */

 stop */

 clear out beginning of streaming bit (rps register 0)*/

/*

	printk("vdma%d.base_even:     0x%08x\n", 1,saa7146_read(dev,BASE_EVEN1));

	printk("vdma%d.base_odd:      0x%08x\n", 1,saa7146_read(dev,BASE_ODD1));

	printk("vdma%d.prot_addr:     0x%08x\n", 1,saa7146_read(dev,PROT_ADDR1));

	printk("vdma%d.base_page:     0x%08x\n", 1,saa7146_read(dev,BASE_PAGE1));

	printk("vdma%d.pitch:         0x%08x\n", 1,saa7146_read(dev,PITCH1));

	printk("vdma%d.num_line_byte: 0x%08x\n", 1,saa7146_read(dev,NUM_LINE_BYTE1));

	printk("vdma%d => vptr      : 0x%08x\n", 1,saa7146_read(dev,PCI_VDP1));

 write the address of the rps-program */

 turn on rps */

 format descriptions for capture and preview */

/* unfortunately, the saa7146 contains a bug which prevents it from doing on-the-fly byte swaps.

   due to this, it's impossible to provide additional *packed* formats, which are simply byte swapped

 check if we have overlay information */

 check if streaming capture is running */

 check if overlay is running */

 check if streaming capture is running */

 check if overlay is running at all */

*******************************************************************************/

 common pagetable functions */

 create some offsets inside the page table */

 create some offsets inside the page table */

 walk all pages, copy all page addresses to ptr1 */

/*

		ptr1 = pt1->cpu;

		for(j=0;j<40;j++) {

			printk("ptr1 %d: 0x%08x\n",j,ptr1[j]);

		}

		/* if we have a user buffer, the first page may not be

 create video-dma2 page table */

 create video-dma3 page table */

 finally: finish up video-dma1 page table */

/*

		ptr1 = pt1->cpu;

		ptr2 = pt2->cpu;

		ptr3 = pt3->cpu;

		for(j=0;j<40;j++) {

			printk("ptr1 %d: 0x%08x\n",j,ptr1[j]);

		}

		for(j=0;j<40;j++) {

			printk("ptr2 %d: 0x%08x\n",j,ptr2[j]);

		}

		for(j=0;j<40;j++) {

			printk("ptr3 %d: 0x%08x\n",j,ptr3[j]);

		}

*******************************************************************************/

 file operations */

 side effect: video_status is now 0, video_fh is NULL */

 we need to have a valid format set here */

 clear out beginning of streaming bit (rps register 0)*/

 enable rps0 irqs */

 we need to have a valid format set here */

 disable rps0  */

 disable rps0 irqs */

 shut down all used video dma transfers */

 check args */

 planar formats are not allowed for overlay video, clipping and video dma would clash */

 check if overlay is running */

 ok, accept it */

 fixme: we can support changing VFLIP and HFLIP here... */

 CHECK: && (vv->video_fh == fh)) */

 arbitrary constraint */

 vv->ov.fh is used to indicate that we have valid overlay information, too */

 check if our current overlay is active */

	/* the saa7146 supfhrts (used in conjunction with the saa7111a for example)

	   PAL / NTSC / SECAM. if your hardware does not (or does more)

/*

	case VIDIOC_ENUMSTD:

	{

		struct v4l2_standard *e = arg;

		if (e->index < 0 )

			return -EINVAL;

		if( e->index < dev->ext_vv_data->num_stds ) {

			DEB_EE("VIDIOC_ENUMSTD: index:%d\n", e->index);

			v4l2_video_std_construct(e, dev->ext_vv_data->stds[e->index].id, dev->ext_vv_data->stds[e->index].name);

			return 0;

		}

		return -EINVAL;

	}

 side effect: video_status is now 0, video_fh is NULL */

	/* ugly: we need to copy some checks from video_end(),

	   because videobuf_streamoff() relies on the capture running.

********************************************************************************/

 buffer handling functions                                                  */

 sanity checks */

 check if we exceed the "max_memory" parameter */

*******************************************************************************/

 file operations */

 set some default values */

 FIXME: what's this? */

 hmm, why is this function declared void? */

 only finish the buffer if we have one... */

 fixme: should we allow read() captures while streaming capture? */

 restart overlay if it was active before */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    saa7146.o - driver for generic saa7146-based hardware



    Copyright (C) 1998-2003 Michael Hunold <michael@mihu.de>



/****************************************************************************

 * gpio and debi helper functions

 This DEBI code is based on the saa7146 Stradis driver by Nathan Laredo */

 wait for registers to be programmed */

 wait for transfer to complete */

 wait for registers to be programmed */

 wait for transfer to complete */

/****************************************************************************

 * general helper functions

/* this is videobuf_vmalloc_to_sg() from videobuf-dma-sg.c

   make sure virt has been allocated with vmalloc_32(), otherwise the BUG()

*******************************************************************************/

 common page table functions */

	/* if we have a user buffer, the first page may not be

/*

		pr_debug("i:%d, adr:0x%08x, len:%d, offset:%d\n",

			 i, sg_dma_address(list), sg_dma_len(list),

			 list->offset);

 safety; fill the page table up with the last valid page */

/*

	ptr = pt->cpu;

	pr_debug("offset: %d\n", pt->offset);

	for(i=0;i<5;i++) {

		pr_debug("ptr1 %d: 0x%08x\n", i, ptr[i]);

	}

*******************************************************************************/

 interrupt handler */

 read out the interrupt status register */

 is this our interrupt? */

 nope, some other device */

 only wake up if we expect something */

********************************************************************************/

 configuration-functions                                                       */

 clear out mem for sure */

 create a nice device name */

 enable bus-mastering */

 get chip-revision; this is needed to enable bug-fixes */

 remap the memory from virtual to physical address */

	/* we don't do a master reset here anymore, it screws up

	   some boards that don't have an i2c-eeprom for configuration

/*

	saa7146_write(dev, MC1, MASK_31);

 disable all irqs */

 shut down all dma transfers and rps tasks */

 clear out any rps-signals pending */

 request an interrupt for the saa7146 */

 get memory for various stuff */

 the rest + print status message */

 set some sane pci arbitrition values */

 TODO: use the status code of the callback */

	/* V4L extensions will set the pci drvdata to the v4l2_device in the

	   attach() above. So for those cards that do not use V4L we have to

 shut down all video dma transfers */

 disable all irqs, release irq-routine */

********************************************************************************/

 extension handling functions                                                  */

 misc functions used by extension modules */

 SPDX-License-Identifier: GPL-2.0-only

***************************************************************************/

 resource management functions, shamelessly stolen from saa7134 driver */

 have it already allocated */

 is it free? */

 no, someone else uses it */

 it's free, grab it */

*******************************************************************************/

 common dma functions */

*******************************************************************************/

 common buffer functions */

 finish current buffer */

 activate next one from queue */

 turn off video-dma3 */

			/* nothing to do -- just prevent next video-dma1 transfer

 fixme: fix this for vflip != 0

 write the address of the rps-program */

 turn on rps */

/*

			printk("vdma%d.base_even:     0x%08x\n", 1,saa7146_read(dev,BASE_EVEN1));

			printk("vdma%d.base_odd:      0x%08x\n", 1,saa7146_read(dev,BASE_ODD1));

			printk("vdma%d.prot_addr:     0x%08x\n", 1,saa7146_read(dev,PROT_ADDR1));

			printk("vdma%d.base_page:     0x%08x\n", 1,saa7146_read(dev,BASE_PAGE1));

			printk("vdma%d.pitch:         0x%08x\n", 1,saa7146_read(dev,PITCH1));

			printk("vdma%d.num_line_byte: 0x%08x\n", 1,saa7146_read(dev,NUM_LINE_BYTE1));

	/* we don't restart the transfer here like other drivers do. when

	   a streaming capture is disabled, the timeout function will be

	   called for the current buffer. if we activate the next buffer now,

	   we mess up our capture logic. if a timeout occurs on another buffer,

	   then something is seriously broken before, so no need to buffer the

/*

	saa7146_buffer_next(dev,q);

*******************************************************************************/

 file operations */

 check if an extension is registered */

 allocate per open data */

/*

		DEB_EE("V4L2_BUF_TYPE_VIDEO_CAPTURE: file:%p, data:%p, count:%lun",

		       file, data, (unsigned long)count);

/*

		DEB_EE("V4L2_BUF_TYPE_VBI_CAPTURE: file:%p, data:%p, count:%lu\n",

		       file, data, (unsigned long)count);

 set default values for video parts of the saa7146 */

 enable video-port pins */

	/* save per-device extension data (one extension can

	   handle different devices that might need different

 todo */

 fixme: this only works for PAL */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  smssdio.c - Siano 1xxx SDIO interface driver

 *

 *  Copyright 2008 Pierre Ossman

 *

 * Based on code by Siano Mobile Silicon, Inc.,

 * Copyright (C) 2006-2008, Uri Shkolnik

 *

 * This hardware is a bit odd in that all transfers should be done

 * to/from the SMSSDIO_DATA register, yet the "increase address" bit

 * always needs to be set.

 *

 * Also, buffers from the card are always aligned to 128 byte

 * boundaries.

/*

 * General cleanup notes:

 *

 * - only typedefs should be name *_t

 *

 * - use ERR_PTR and friends for smscore_register_device()

 *

 * - smscore_getbuffer should zero fields

 *

 * Fix stop command

 Registers */

 end: all zeroes */ },

******************************************************************/

 Siano core callbacks                                            */

******************************************************************/

******************************************************************/

 SDIO callbacks                                                  */

******************************************************************/

	/*

	 * The interrupt register has no defined meaning. It is just

	 * a way of turning of the level triggered interrupt.

		/*

		 * First attempt to transfer all of it in one go...

		/*

		 * ..then fall back to one block at a time if that is

		 * not possible...

		 *

		 * (we have to do this manually because of the

		 * problem with the "increase address" bit)

 ?? */

 ?? */

		/*

		 * FIXME: Stellar needs special handling...

 FIXME: racy! */

******************************************************************/

 Module functions                                                */

******************************************************************/

 SPDX-License-Identifier: GPL-2.0

/*

 * V4L2 H264 helpers.

 *

 * Copyright (C) 2019 Collabora, Ltd.

 *

 * Author: Boris Brezillon <boris.brezillon@collabora.com>

/**

 * v4l2_h264_init_reflist_builder() - Initialize a P/B0/B1 reference list

 *				      builder

 *

 * @b: the builder context to initialize

 * @dec_params: decode parameters control

 * @sps: SPS control

 * @dpb: DPB to use when creating the reference list

		/*

		 * Handle frame_num wraparound as described in section

		 * '8.2.4.1 Decoding process for picture numbers' of the spec.

		 * TODO: This logic will have to be adjusted when we start

		 * supporting interlaced content.

 Short term pics first. */

	/*

	 * Short term pics in descending pic num order, long term ones in

	 * ascending order.

 Short term pics first. */

 Long term pics in ascending pic num order. */

	/*

	 * Short term pics with POC < cur POC first in POC descending order

	 * followed by short term pics with POC > cur POC in POC ascending

	 * order.

 Short term pics first. */

 Long term pics in ascending pic num order. */

	/*

	 * Short term pics with POC > cur POC first in POC ascending order

	 * followed by short term pics with POC < cur POC in POC descending

	 * order.

/**

 * v4l2_h264_build_p_ref_list() - Build the P reference list

 *

 * @builder: reference list builder context

 * @reflist: 16-bytes array used to store the P reference list. Each entry

 *	     is an index in the DPB

 *

 * This functions builds the P reference lists. This procedure is describe in

 * section '8.2.4 Decoding process for reference picture lists construction'

 * of the H264 spec. This function can be used by H264 decoder drivers that

 * need to pass a P reference list to the hardware.

/**

 * v4l2_h264_build_b_ref_lists() - Build the B0/B1 reference lists

 *

 * @builder: reference list builder context

 * @b0_reflist: 16-bytes array used to store the B0 reference list. Each entry

 *		is an index in the DPB

 * @b1_reflist: 16-bytes array used to store the B1 reference list. Each entry

 *		is an index in the DPB

 *

 * This functions builds the B0/B1 reference lists. This procedure is described

 * in section '8.2.4 Decoding process for reference picture lists construction'

 * of the H264 spec. This function can be used by H264 decoder drivers that

 * need to pass B0/B1 reference lists to the hardware.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * V4L2 flash LED sub-device registration helpers.

 *

 *	Copyright (C) 2015 Samsung Electronics Co., Ltd

 *	Author: Jacek Anaszewski <j.anaszewski@samsung.com>

	/*

	 * Only above values are applicable to

	 * the 'ctrls' array in the struct v4l2_flash.

	/*

	 * Indicator LEDs, unlike torch LEDs, are turned on/off basing on

	 * the state of V4L2_CID_FLASH_INDICATOR_INTENSITY control only.

	 * Therefore it must be possible to set it to 0 level which in

	 * the LED subsystem reflects LED_OFF state.

	/*

	 * Indicator LEDs, unlike torch LEDs, are turned on/off basing on

	 * the state of V4L2_CID_FLASH_INDICATOR_INTENSITY control only.

	 * Do not decrement brightness read from the LED subsystem for

	 * indicator LED as it may equal 0. For torch LEDs this function

	 * is called only when V4L2_FLASH_LED_MODE_TORCH is set and the

	 * brightness read is guaranteed to be greater than 0. In the mode

	 * V4L2_FLASH_LED_MODE_NONE the cached torch intensity value is used.

	/*

	 * In case a LED Flash class driver provides ops for custom

	 * brightness <-> intensity conversion, it also must have defined

	 * related v4l2 control step == 1. In such a case a backward conversion

	 * from led brightness to v4l2 intensity is required to find out the

	 * the aligned intensity value.

		/*

		 * Update torch brightness only if in TORCH_MODE. In other modes

		 * torch led is turned off, which would spuriously inform the

		 * user space that V4L2_CID_FLASH_TORCH_INTENSITY control value

		 * has changed to 0.

		/*

		 * No conversion is needed as LED Flash class also uses

		 * microamperes for flash intensity units.

 LED faults map directly to V4L2 flash faults */

 Turn the torch LED off */

 Stop flash strobing */

		/*

		 * For some hardware arrangements setting strobe source may

		 * affect torch mode. Therefore, if not in the flash mode,

		 * cache only this setting. It will be applied upon switching

		 * to flash mode.

		/*

		 * No conversion is needed as LED Flash class also uses

		 * microseconds for flash timeout units.

		/*

		 * No conversion is needed as LED Flash class also uses

		 * microamperes for flash intensity units.

 Init INDICATOR_INTENSITY ctrl data */

 Init FLASH_FAULT ctrl data */

 Init FLASH_LED_MODE ctrl data */

 Init TORCH_INTENSITY ctrl data */

 Init FLASH_STROBE ctrl data */

 Init STROBE_STOP ctrl data */

 Init FLASH_STROBE_SOURCE ctrl data */

 Init STROBE_STATUS ctrl data */

 Init FLASH_TIMEOUT ctrl data */

 Init FLASH_INTENSITY ctrl data */

 allocate memory dynamically so as not to exceed stack frame size */

	/*

	 * For some hardware arrangements setting strobe source may affect

	 * torch mode. Synchronize strobe source setting only if not in torch

	 * mode. For torch mode case it will get synchronized upon switching

	 * to flash mode.

/*

 * V4L2 subdev internal operations

 SPDX-License-Identifier: GPL-2.0-only

/*

 * v4l2-fh.c

 *

 * V4L2 file handles.

 *

 * Copyright (C) 2009--2010 Nokia Corporation.

 *

 * Contact: Sakari Ailus <sakari.ailus@iki.fi>

 Inherit from video_device. May be overridden by the driver. */

	/*

	 * determine_valid_ioctls() does not know if struct v4l2_fh

	 * is used by this driver, but here we do. So enable the

	 * prio ioctls here.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * v4l2-event.c

 *

 * V4L2 events.

 *

 * Copyright (C) 2009--2010 Nokia Corporation.

 *

 * Contact: Sakari Ailus <sakari.ailus@iki.fi>

 Release the vdev lock while waiting */

 Caller must hold fh->vdev->fh_lock! */

 Are we subscribed? */

 Increase event sequence number on fh. */

 Do we have any free events? */

 no, remove the oldest one */

 Take one and fill it. */

 Remove any pending events for this subscription */

 Already listening */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * helper functions for SG DMA video4linux capture buffers

 *

 * The functions expect the hardware being able to scatter gather

 * (i.e. the buffers are not linear in physical memory, but fragmented

 * into PAGE_SIZE chunks).  They also assume the driver does not need

 * to touch the video data.

 *

 * (c) 2007 Mauro Carvalho Chehab, <mchehab@kernel.org>

 *

 * Highly based on video-buf written originally by:

 * (c) 2001,02 Gerd Knorr <kraxel@bytesex.org>

 * (c) 2006 Mauro Carvalho Chehab, <mchehab@kernel.org>

 * (c) 2006 Ted Walther and John Sokol

 --------------------------------------------------------------------- */

/*

 * Return a scatterlist for some page-aligned vmalloc()'ed memory

 * block (NULL on errors).  Memory for the scatterlist is allocated

 * using kmalloc.  The caller must free the memory.

/*

 * Return a scatterlist for a an array of userpages (NULL on errors).

 * Memory for the scatterlist is allocated using kmalloc.  The caller

 * must free the memory.

 DMA to highmem pages might not work */

 --------------------------------------------------------------------- */

 --------------------------------------------------------------------- */

/*

 * Get a anonymous page for the mapping.  Make sure we can DMA to that

 * memory location with 32bit PCI devices (i.e. don't use highmem for

 * now ...).  Bounce buffers don't work very well for the data rates

 * video capture has.

/* ---------------------------------------------------------------------

 * SG handlers for the generic methods

/* Allocated area consists on 3 parts:

	struct video_buffer

	struct <driver>_buffer (cx88_buffer, saa7134_buf, ...)

	struct videobuf_dma_sg_memory

 no userspace addr -- kernel bounce buffer */

 dma directly to userspace */

			/* NOTE: HACK: videobuf_iolock on V4L2_MEMORY_MMAP

			buffers can only be called from videobuf_qbuf

			we take current->mm->mmap_lock there, to prevent

 FIXME: need sanity checks for vb->boff */

		/*

		 * Using a double cast to avoid compiler warnings when

		 * building for PAE. Compiler doesn't like direct casting

		 * of a 32 bit ptr to 64 bit integer.

 look for first buffer to map */

 paranoia, should never happen since buf is always valid. */

 create mapping + update buffer list */

 using shared anonymous pages */

 Required to make generic handler to call __videobuf_alloc */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    V4L2 device support.



    Copyright (C) 2008  Hans Verkuil <hverkuil@xs4all.nl>



 If dev == NULL, then name must be filled in by the caller */

 Set name to driver name + device name if it is empty. */

	/* Just return if v4l2_dev is NULL or if it was already

 Unregister subdevs */

 Mark as unregistered, thus preventing duplicate unregistrations */

 Check for valid input */

	/*

	 * The reason to acquire the module here is to avoid unloading

	 * a module of sub-device which is registered to a media

	 * device. To make it possible to unload modules for media

	 * devices that also register sub-devices, do not

	 * try_module_get() such sub-device owners.

 This just returns 0 if either of the two args is NULL */

 Register the entity. */

	/* Register a device node for every subdev marked with the

	 * V4L2_SUBDEV_FL_HAS_DEVNODE flag.

 Interface is created by __video_register_device() */

 return if it isn't registered */

		/*

		 * No need to explicitly remove links, as both pads and

		 * links are removed by the function below, in the right order

 SPDX-License-Identifier: GPL-2.0-only

/*

 * V4L2 fwnode binding parsing library

 *

 * The origins of the V4L2 fwnode library are in V4L2 OF library that

 * formerly was located in v4l2-of.c.

 *

 * Copyright (c) 2016 Intel Corporation.

 * Author: Sakari Ailus <sakari.ailus@linux.intel.com>

 *

 * Copyright (C) 2012 - 2013 Samsung Electronics Co., Ltd.

 * Author: Sylwester Nawrocki <s.nawrocki@samsung.com>

 *

 * Copyright (C) 2012 Renesas Electronics Corp.

 * Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>

 clock+data */) {

 Only D-PHY has a clock lane. */

 The property is optional. */

 The connector-type is stored within the compatible string. */

 Parse the connector specific properties. */

 Avoid compiler warnings */

 not an error if asd already exists */

/*

 * v4l2_fwnode_reference_parse - parse references for async sub-devices

 * @dev: the device node the properties of which are parsed for references

 * @notifier: the async notifier where the async subdevs will be added

 * @prop: the name of the property

 *

 * Return: 0 on success

 *	   -ENOENT if no entries were found

 *	   -ENOMEM if memory allocation failed

 *	   -EINVAL if property parsing failed

	/*

	 * Note that right now both -ENODATA and -ENOENT may signal

	 * out-of-bounds access. Return the error in cases other than that.

 not an error if asd already exists */

/*

 * v4l2_fwnode_reference_get_int_prop - parse a reference with integer

 *					arguments

 * @fwnode: fwnode to read @prop from

 * @notifier: notifier for @dev

 * @prop: the name of the property

 * @index: the index of the reference to get

 * @props: the array of integer property names

 * @nprops: the number of integer property names in @nprops

 *

 * First find an fwnode referred to by the reference at @index in @prop.

 *

 * Then under that fwnode, @nprops times, for each property in @props,

 * iteratively follow child nodes starting from fwnode such that they have the

 * property in @props array at the index of the child node distance from the

 * root node and the value of that property matching with the integer argument

 * of the reference, at the same index.

 *

 * The child fwnode reached at the end of the iteration is then returned to the

 * caller.

 *

 * The core reason for this is that you cannot refer to just any node in ACPI.

 * So to refer to an endpoint (easy in DT) you need to refer to a device, then

 * provide a list of (property name, property value) tuples where each tuple

 * uniquely identifies a child node. The first tuple identifies a child directly

 * underneath the device fwnode, the next tuple identifies a child node

 * underneath the fwnode identified by the previous tuple, etc. until you

 * reached the fwnode you need.

 *

 * THIS EXAMPLE EXISTS MERELY TO DOCUMENT THIS FUNCTION. DO NOT USE IT AS A

 * REFERENCE IN HOW ACPI TABLES SHOULD BE WRITTEN!! See documentation under

 * Documentation/firmware-guide/acpi/dsd/ instead and especially graph.txt,

 * data-node-references.txt and leds.txt .

 *

 *	Scope (\_SB.PCI0.I2C2)

 *	{

 *		Device (CAM0)

 *		{

 *			Name (_DSD, Package () {

 *				ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),

 *				Package () {

 *					Package () {

 *						"compatible",

 *						Package () { "nokia,smia" }

 *					},

 *				},

 *				ToUUID("dbb8e3e6-5886-4ba6-8795-1319f52a966b"),

 *				Package () {

 *					Package () { "port0", "PRT0" },

 *				}

 *			})

 *			Name (PRT0, Package() {

 *				ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),

 *				Package () {

 *					Package () { "port", 0 },

 *				},

 *				ToUUID("dbb8e3e6-5886-4ba6-8795-1319f52a966b"),

 *				Package () {

 *					Package () { "endpoint0", "EP00" },

 *				}

 *			})

 *			Name (EP00, Package() {

 *				ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),

 *				Package () {

 *					Package () { "endpoint", 0 },

 *					Package () {

 *						"remote-endpoint",

 *						Package() {

 *							\_SB.PCI0.ISP, 4, 0

 *						}

 *					},

 *				}

 *			})

 *		}

 *	}

 *

 *	Scope (\_SB.PCI0)

 *	{

 *		Device (ISP)

 *		{

 *			Name (_DSD, Package () {

 *				ToUUID("dbb8e3e6-5886-4ba6-8795-1319f52a966b"),

 *				Package () {

 *					Package () { "port4", "PRT4" },

 *				}

 *			})

 *

 *			Name (PRT4, Package() {

 *				ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),

 *				Package () {

 *					Package () { "port", 4 },

 *				},

 *				ToUUID("dbb8e3e6-5886-4ba6-8795-1319f52a966b"),

 *				Package () {

 *					Package () { "endpoint0", "EP40" },

 *				}

 *			})

 *

 *			Name (EP40, Package() {

 *				ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),

 *				Package () {

 *					Package () { "endpoint", 0 },

 *					Package () {

 *						"remote-endpoint",

 *						Package () {

 *							\_SB.PCI0.I2C2.CAM0,

 *							0, 0

 *						}

 *					},

 *				}

 *			})

 *		}

 *	}

 *

 * From the EP40 node under ISP device, you could parse the graph remote

 * endpoint using v4l2_fwnode_reference_get_int_prop with these arguments:

 *

 *  @fwnode: fwnode referring to EP40 under ISP.

 *  @prop: "remote-endpoint"

 *  @index: 0

 *  @props: "port", "endpoint"

 *  @nprops: 2

 *

 * And you'd get back fwnode referring to EP00 under CAM0.

 *

 * The same works the other way around: if you use EP00 under CAM0 as the

 * fwnode, you'll get fwnode referring to EP40 under ISP.

 *

 * The same example in DT syntax would look like this:

 *

 * cam: cam0 {

 *	compatible = "nokia,smia";

 *

 *	port {

 *		port = <0>;

 *		endpoint {

 *			endpoint = <0>;

 *			remote-endpoint = <&isp 4 0>;

 *		};

 *	};

 * };

 *

 * isp: isp {

 *	ports {

 *		port@4 {

 *			port = <4>;

 *			endpoint {

 *				endpoint = <0>;

 *				remote-endpoint = <&cam 0 0>;

 *			};

 *		};

 *	};

 * };

 *

 * Return: 0 on success

 *	   -ENOENT if no entries (or the property itself) were found

 *	   -EINVAL if property parsing otherwise failed

 *	   -ENOMEM if memory allocation failed

	/*

	 * Obtain remote fwnode as well as the integer arguments.

	 *

	 * Note that right now both -ENODATA and -ENOENT may signal

	 * out-of-bounds access. Return -ENOENT in that case.

	/*

	 * Find a node in the tree under the referred fwnode corresponding to

	 * the integer arguments.

 Loop over all child nodes under fwnode. */

 Found property, see if its value matches. */

 No property found; return an error here. */

/*

 * v4l2_fwnode_reference_parse_int_props - parse references for async

 *					   sub-devices

 * @dev: struct device pointer

 * @notifier: notifier for @dev

 * @prop: the name of the property

 * @props: the array of integer property names

 * @nprops: the number of integer properties

 *

 * Use v4l2_fwnode_reference_get_int_prop to find fwnodes through reference in

 * property @prop with integer arguments with child nodes matching in properties

 * @props. Then, set up V4L2 async sub-devices for those fwnodes in the notifier

 * accordingly.

 *

 * While it is technically possible to use this function on DT, it is only

 * meaningful on ACPI. On Device tree you can refer to any node in the tree but

 * on ACPI the references are limited to devices.

 *

 * Return: 0 on success

 *	   -ENOENT if no entries (or the property itself) were found

 *	   -EINVAL if property parsing otherwisefailed

 *	   -ENOMEM if memory allocation failed

			/*

			 * Note that right now both -ENODATA and -ENOENT may

			 * signal out-of-bounds access. Return the error in

			 * cases other than that.

 not an error if asd already exists */

/**

 * v4l2_async_nf_parse_fwnode_sensor - parse common references on

 *					     sensors for async sub-devices

 * @dev: the device node the properties of which are parsed for references

 * @notifier: the async notifier where the async subdevs will be added

 *

 * Parse common sensor properties for remote devices related to the

 * sensor and set up async sub-devices for them.

 *

 * Any notifier populated using this function must be released with a call to

 * v4l2_async_nf_release() after it has been unregistered and the async

 * sub-devices are no longer in use, even in the case the function returned an

 * error.

 *

 * Return: 0 on success

 *	   -ENOMEM if memory allocation failed

 *	   -EINVAL if property parsing failed

 SPDX-License-Identifier: GPL-2.0-only

/*

 * helper functions for vmalloc video4linux capture buffers

 *

 * The functions expect the hardware being able to scatter gather

 * (i.e. the buffers are not linear in physical memory, but fragmented

 * into PAGE_SIZE chunks).  They also assume the driver does not need

 * to touch the video data.

 *

 * (c) 2007 Mauro Carvalho Chehab <mchehab@kernel.org>

**************************************************************************/

 We need first to cancel streams, before unmapping */

				/* This callback is called only if kernel has

				   allocated memory and this memory is mmapped.

				   In this case, memory should be freed,

				   in order to do memory unmap.

				/* vfree is not atomic - can't be

				   called with IRQ's disabled

/* ---------------------------------------------------------------------

 * vmalloc handlers for the generic methods

/* Allocated area consists on 3 parts:

	struct video_buffer

	struct <driver>_buffer (cx88_buffer, saa7134_buf, ...)

	struct videobuf_dma_sg_memory

 All handling should be done by __videobuf_mmap_mapper() */

		/* The only USERPTR currently supported is the one needed for

		 * read() method.

 Currently, doesn't support V4L2_MEMORY_OVERLAY */

 create mapping + update buffer list */

 Try to remap memory */

	/* mmapped memory can't be freed here, otherwise mmapped region

	   would be released, while still needed. In this case, the memory

	   release should happen inside videobuf_vm_close().

	   So, it should free memory only if the memory were allocated for

	   read() operation.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * V4L2 controls framework control definitions.

 *

 * Copyright (C) 2010-2021  Hans Verkuil <hverkuil-cisco@xs4all.nl>

/*

 * Returns NULL or a character pointer array containing the menu for

 * the given control ID. The pointer array ends with a NULL pointer.

 * An empty string signifies a menu entry that is invalid. This allows

 * drivers to disable certain options if it is not supported.

/*

 * Returns NULL or an s64 type array containing the menu for given

 * control ID. The total number of the menu items is returned in @len.

 Return the control name. */

 USER controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

	/*

	 * Codec controls

	 *

	 * The MPEG controls are applicable to all codec controls

	 * and the 'MPEG' part of the define is historical.

	 *

	 * Keep the order of the 'case's the same as in videodev2.h!

 VPX controls */

 HEVC controls */

 CAMERA controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

 FM Radio Modulator controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

 Flash controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

 JPEG encoder controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

 Image source controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

 Image processing controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

 DV controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

 Detection controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

 Stateless Codec controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

 Colorimetry controls */

 Keep the order of the 'case's the same as in v4l2-controls.h! */

 You can neither read nor write these */

 Max is calculated as RGB888 that is 2^24 */

 default for 8 bit black, luma is 16, chroma is 128 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * v4l2-i2c - I2C helpers for Video4Linux2

	/*

	 * We need to unregister the i2c client

	 * explicitly. We cannot rely on

	 * i2c_del_adapter to always unregister

	 * clients for us, since if the i2c bus is a

	 * platform bus, then it is never deleted.

	 *

	 * Device tree or ACPI based devices must not

	 * be unregistered as they have not been

	 * registered by us, and would not be

	 * re-created by just probing the V4L2 driver.

 the owner is the same as the i2c_client's driver owner */

 i2c_client and v4l2_subdev point to one another */

 Load an i2c sub-device. */

 Create the i2c client */

	/*

	 * Note: by loading the module first we are certain that c->driver

	 * will be set if the driver was found. If the module was not loaded

	 * first, then the i2c core tries to delay-load the module for us,

	 * and then c->driver is still NULL until the module is finally

	 * loaded. This delay-load mechanism doesn't work if other drivers

	 * want to use the i2c device, so explicitly loading the module

	 * is the best alternative.

 Lock the module so we can safely get the v4l2_subdev pointer */

	/*

	 * Register with the v4l2_device which increases the module's

	 * use count as well.

 Decrease the module use count to match the first try_module_get. */

	/*

	 * If we have a client but no subdev, then something went wrong and

	 * we must unregister the client.

	/*

	 * Setup the i2c board info with the device type and

	 * the device address.

 Return i2c client address of v4l2_subdev. */

/*

 * Return a list of I2C tuner addresses to probe. Use only if the tuner

 * addresses are unknown.

 tda8290 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * V4L2 controls framework Request API implementation.

 *

 * Copyright (C) 2018-2021  Hans Verkuil <hverkuil-cisco@xs4all.nl>

 Initialize the request-related fields in a control handler */

 Free the request-related fields in a control handler */

	/*

	 * Do nothing if this isn't the main handler or the main

	 * handler is not used in any request.

	 *

	 * The main handler can be identified by having a NULL ops pointer in

	 * the request object.

	/*

	 * If the main handler is freed and it is used by handler objects in

	 * outstanding requests, then unbind and put those objects before

	 * freeing the main handler.

 Skip refs inherited from other devices */

	/*

	 * If there are no controls in this completed request,

	 * then that can only happen if:

	 *

	 * 1) no controls were present in the queued request, and

	 * 2) v4l2_ctrl_request_complete() could not allocate a

	 *    control handler object to store the completed state in.

	 *

	 * So return ENOMEM to indicate that there was an out-of-memory

	 * error.

	/*

	 * Note that it is valid if nothing was found. It means

	 * that this request doesn't have any controls and so just

	 * wants to leave the controls unchanged.

 Create a new request so the driver can return controls */

 g_volatile_ctrl will update the current control values */

 Copy the current control value into the request */

	/*

	 * Note that it is valid if nothing was found. It means

	 * that this request doesn't have any controls and so just

	 * wants to leave the controls unchanged.

		/*

		 * Skip if this control was already handled by a cluster.

		 * Skip button controls and read-only controls.

		/*

		 * For volatile autoclusters that are currently in auto mode

		 * we need to discover if it will be set to manual mode.

		 * If so, then we have to copy the current volatile values

		 * first since those will become the new manual values (which

		 * may be overwritten by explicit new values from this set

		 * of controls).

			/*

			 * If the new value == the manual value, then copy

			 * the current volatile values.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * V4L2 JPEG header parser helpers.

 *

 * Copyright (C) 2019 Pengutronix, Philipp Zabel <kernel@pengutronix.de>

 *

 * For reference, see JPEG ITU-T.81 (ISO/IEC 10918-1) [1]

 *

 * [1] https://www.w3.org/Graphics/JPEG/itu-t81.pdf

 Table B.1 - Marker code assignments */

 start of frame */

 extensions */

 huffman table */

 arithmetic coding conditioning */

 restart */

 start of image */

 end of image */

 start of stream */

 quantization table */

 number of lines */

 restart interval */

 hierarchical progression */

 expand reference */

 application data */

 application data for colour encoding */

 extensions */

 comment */

 temporary */

/**

 * struct jpeg_stream - JPEG byte stream

 * @curr: current position in stream

 * @end: end position, after last byte

 returns a value that fits into u8, or negative error */

 returns a value that fits into u16, or negative error */

 skip stuffing bytes and REServed markers */

 this does not advance the current position in the stream */

 no chroma subsampling for 4-component images */

 Lf = 8 + 3 * Nf, Nf >= 1 */

 Table B.2 - Frame header parameter sizes and values */

		/*

		 * Baseline DCT only supports 8-bit precision.

		 * Extended sequential DCT also supports 12-bit precision.

		/*

		 * The spec allows 1 <= Nf <= 255, but we only support up to 4

		 * components.

 all chroma sampling factors must be 1 */

 Ls = 8 + 3 * Ns, Ns >= 1 */

 skip Ss, Se, Ah, and Al */

 B.2.4.1 Quantization table-specification syntax */

 Lq = 2 + n * 65 (for baseline DCT), n >= 1 */

 quantization table element precision */

		/*

		 * Only 8-bit Qk values for 8-bit sample precision. Extended

		 * sequential DCT with 12-bit sample precision also supports

		 * 16-bit Qk values.

 quantization table destination identifier */

 quantization table element */

 B.2.4.2 Huffman table-specification syntax */

 Table B.5 - Huffman table specification parameter sizes and values */

 table class - 0 = DC, 1 = AC */

 huffman table destination identifier */

 only two Huffman tables for baseline DCT */

 BITS - number of Huffman codes with length i */

 HUFFVAL - values associated with each Huffman code */

 B.2.4.4 Restart interval definition syntax */

 Rec. ITU-T T.872 (06/2012) 6.5.3 */

 Check for "Adobe\0" in Ap1..6 */

 get to Ap12 */

 skip the rest of the segment, this ensures at least it is complete */

/**

 * v4l2_jpeg_parse_header - locate marker segments and optionally parse headers

 * @buf: address of the JPEG buffer, should start with a SOI marker

 * @len: length of the JPEG buffer

 * @out: returns marker segment positions and optionally parsed headers

 *

 * The out->scan_header pointer must be initialized to NULL or point to a valid

 * v4l2_jpeg_scan_header structure. The out->huffman_tables and

 * out->quantization_tables pointers must be initialized to NULL or point to a

 * valid array of 4 v4l2_jpeg_reference structures each.

 *

 * Returns 0 or negative error if parsing failed.

 the first bytes must be SOI, B.2.1 High-level syntax */

 init value to signal if this marker is not present */

 loop through marker segments */

 baseline DCT, extended sequential DCT */

 progressive, lossless */

 differential coding */

 arithmetic coding */

			/*

			 * stop parsing, the scan header marks the beginning of

			 * the entropy coded segment

 markers without parameters */

 restart */

 start of image */

 end of image */

 skip unknown or unsupported marker segments */

/**

 * v4l2_jpeg_parse_frame_header - parse frame header

 * @buf: address of the frame header, after the SOF0 marker

 * @len: length of the frame header

 * @frame_header: returns the parsed frame header

 *

 * Returns 0 or negative error if parsing failed.

/**

 * v4l2_jpeg_parse_scan_header - parse scan header

 * @buf: address of the scan header, after the SOS marker

 * @len: length of the scan header

 * @scan_header: returns the parsed scan header

 *

 * Returns 0 or negative error if parsing failed.

/**

 * v4l2_jpeg_parse_quantization_tables - parse quantization tables segment

 * @buf: address of the quantization table segment, after the DQT marker

 * @len: length of the quantization table segment

 * @precision: sample precision (P) in bits per component

 * @q_tables: returns four references into the buffer for the

 *            four possible quantization table destinations

 *

 * Returns 0 or negative error if parsing failed.

/**

 * v4l2_jpeg_parse_huffman_tables - parse huffman tables segment

 * @buf: address of the Huffman table segment, after the DHT marker

 * @len: length of the Huffman table segment

 * @huffman_tables: returns four references into the buffer for the

 *                  four possible Huffman table destinations, in

 *                  the order DC0, DC1, AC0, AC1

 *

 * Returns 0 or negative error if parsing failed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * v4l2-spi - SPI helpers for Video4Linux2

 the owner is the same as the spi_device's driver owner */

 spi_device and v4l2_subdev point to one another */

 initialize name */

	/*

	 * Register with the v4l2_device which increases the module's

	 * use count as well.

 Decrease the module use count to match the first try_module_get. */

	/*

	 * If we have a client but no subdev, then something went wrong and

	 * we must unregister the client.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ioctl32.c: Conversion between 32bit and 64bit native ioctls.

 *	Separated from fs stuff by Arnd Bergmann <arnd@arndb.de>

 *

 * Copyright (C) 1997-2000  Jakub Jelinek  (jakub@redhat.com)

 * Copyright (C) 1998  Eddie C. Dost  (ecd@skynet.be)

 * Copyright (C) 2001,2002  Andi Kleen, SuSE Labs

 * Copyright (C) 2003       Pavel Machek (pavel@ucw.cz)

 * Copyright (C) 2005       Philippe De Muyter (phdm@macqel.be)

 * Copyright (C) 2008       Hans Verkuil <hverkuil@xs4all.nl>

 *

 * These routines maintain argument size conversion between 32bit and 64bit

 * ioctls.

/*

 * Per-ioctl data copy handlers.

 *

 * Those come in pairs, with a get_v4l2_foo() and a put_v4l2_foo() routine,

 * where "v4l2_foo" is the name of the V4L2 struct.

 *

 * They basically get two __user pointers, one with a 32-bits struct that

 * came from the userspace call and a 64-bits struct, also allocated as

 * userspace, but filled internally by do_video_ioctl().

 *

 * For ioctls that have pointers inside it, the functions will also

 * receive an ancillary buffer with extra space, used to pass extra

 * data to the routine.

 enum v4l2_field */

 actually struct v4l2_clip32 * */

 copy everything except the clips pointer */

 enum v4l2_buf_type */

 user-defined */

/**

 * struct v4l2_create_buffers32 - VIDIOC_CREATE_BUFS32 argument

 * @index:	on return, index of the first created buffer

 * @count:	entry: number of requested buffers,

 *		return: number of created buffers

 * @memory:	buffer memory type

 * @format:	frame format, for which buffers are requested

 * @capabilities: capabilities of this buffer type.

 * @flags:	additional buffer management attributes (ignored unless the

 *		queue has V4L2_BUF_CAP_SUPPORTS_MMAP_CACHE_HINTS capability and

 *		configured for MMAP streaming I/O).

 * @reserved:	future extensions

 enum v4l2_memory */

 Frames, not fields */

 other fields are not set by the user, nor used by the driver */

/*

 * This is correct for all architectures including i386, but not x32,

 * which has different alignment requirements for timestamp

 enum v4l2_buf_type */

 enum v4l2_field */

 memory location */

 enum v4l2_memory */

 enum v4l2_buf_type */

 enum v4l2_field */

 memory location */

 enum v4l2_memory */

  Which input */

  Label */

  Type of input */

  Associated audios (bitfield) */

  Associated tuner */

/*

 * The 64-bit v4l2_input struct has extra padding at the end of the struct.

 * Otherwise it is identical to the 32-bit version.

 actually struct v4l2_ext_control32 * */

 actually char * */

 Return true if this control is a pointer type. */

/*

 * x86 is the only compat architecture with different struct alignment

 * between 32-bit and 64-bit tasks.

 *

 * On all other architectures, v4l2_event32 and v4l2_event32_time32 are

 * the same as v4l2_event and v4l2_event_time32, so we can use the native

 * handlers, converting v4l2_event to v4l2_event_time32 if necessary.

/*

 * List of ioctls that require 32-bits/64-bits conversion

 *

 * The V4L2 ioctls that aren't listed there don't have pointer arguments

 * and the struct size is identical for both 32 and 64 bits versions, so

 * they don't need translations.

			/*

			 * Do not modify the pointer when copying a pointer

			 * control.  The contents of the pointer was changed,

			 * not the pointer itself.

			 * The structures are otherwise compatible.

/**

 * v4l2_compat_ioctl32() - Handles a compat32 ioctl call

 *

 * @file: pointer to &struct file with the file handler

 * @cmd: ioctl to be called

 * @arg: arguments passed from/to the ioctl handler

 *

 * This function is meant to be used as .compat_ioctl fops at v4l2-dev.c

 * in order to deal with 32-bit calls on a 64-bits Kernel.

 *

 * This function calls do_video_ioctl() for non-private V4L2 ioctls.

 * If the function is a private one it calls vdev->fops->compat_ioctl32

 * instead.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * V4L2 asynchronous subdevice registration API

 *

 * Copyright (C) 2012-2013, Guennadi Liakhovetski <g.liakhovetski@gmx.de>

	/*

	 * Both the subdev and the async subdev can provide either an endpoint

	 * fwnode or a device fwnode. Start with the simple case of direct

	 * fwnode matching.

	/*

	 * Check the same situation for any possible secondary assigned to the

	 * subdev's fwnode

	/*

	 * Otherwise, check if the sd fwnode and the asd fwnode refer to an

	 * endpoint or a device. If they're of the same type, there's no match.

	 * Technically speaking this checks if the nodes refer to a connected

	 * endpoint, which is the simplest check that works for both OF and

	 * ACPI. This won't make a difference, as drivers should not try to

	 * match unconnected endpoints.

	/*

	 * The sd and asd fwnodes are of different types. Get the device fwnode

	 * parent of the endpoint fwnode, and compare it with the other fwnode.

	/*

	 * We have a heterogeneous match. Retrieve the struct device of the side

	 * that matched on a device fwnode to print its driver name.

 bus_type has been verified valid before */

 Cannot happen, unless someone breaks us */

 match cannot be NULL here */

 Compare two async sub-device descriptors for equivalence */

 Find the sub-device notifier registered by a sub-device driver. */

 Get v4l2_device related to the notifier if one can be found. */

/*

 * Return true if all child sub-device notifiers are complete, false otherwise.

/*

 * Complete the master notifier if possible. This is done when all async

 * sub-devices have been bound; v4l2_device is also available then.

 Quick check whether there are still more sub-devices here. */

 Check the entire notifier tree; find the root notifier first. */

 This is root if it has v4l2_dev. */

 Is everything ready? */

 Remove from the waiting list */

 Move from the global subdevice list to notifier's done */

	/*

	 * See if the sub-device has a notifier. If not, return here.

	/*

	 * Proceed with checking for the sub-device notifier's async

	 * sub-devices, and return the result. The error will be handled by the

	 * caller.

 Test all async sub-devices in a notifier for a match. */

		/*

		 * v4l2_async_match_notify() may lead to registering a

		 * new notifier and thus changing the async subdevs

		 * list. In order to proceed safely from here, restart

		 * parsing the list from the beginning.

	/*

	 * Subdevice driver will reprobe and put the subdev back

	 * onto the list

 Unbind all sub-devices in the notifier tree. */

 See if an async sub-device can be found in a notifier's lists. */

/*

 * Find out whether an async sub-device was set up already or

 * whether it exists in a given notifier before @this_index.

 * If @this_index < 0, search the notifier's entire @asd_list.

 Check that an asd is not being added more than once. */

 Check that an asd does not exist in other notifiers. */

 Keep also completed notifiers on the list */

	/*

	 * On failure, unbind all sub-devices registered through this notifier.

	/*

	 * Calling __v4l2_async_nf_add_fwnode grabs a refcount,

	 * so drop the one we got in fwnode_graph_get_remote_port_parent.

	/*

	 * No reference taken. The reference is held by the device

	 * (struct v4l2_subdev.dev), and async sub-device does not

	 * exist independently of the device at any point of time.

 None matched, wait for hot-plugging */

	/*

	 * Complete failed. Unbind the sub-devices bound through registering

	 * this async sub-device.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Media Controller ancillary functions

 *

 * Copyright (c) 2016 Mauro Carvalho Chehab <mchehab@kernel.org>

 * Copyright (C) 2016 Shuah Khan <shuahkh@osg.samsung.com>

 * Copyright (C) 2006-2010 Nokia Corporation

 * Copyright (c) 2016 Intel Corporation.

 It should have at least one I/O entity */

	/*

	 * Here, webcams are modelled on a very simple way: the sensor is

	 * connected directly to the I/O entity. All dirty details, like

	 * scaler and crop HW are hidden. While such mapping is not enough

	 * for mc-centric hardware, it is enough for v4l2 interface centric

	 * PC-consumer's hardware.

 The device isn't a webcam. So, it should have a decoder */

 Link the tuner and IF video output pads */

 Create demod to V4L, VBI and SDR radio links */

 Create links for the media connectors */

		/*

		 * ask the sink to verify it owns the remote endpoint,

		 * and translate to a sink pad.

		/*

		 * the source endpoint corresponds to one of its source pads,

		 * the source endpoint connects to an endpoint at the sink

		 * entity, and the sink endpoint corresponds to the sink

		 * pad requested, so we have found an endpoint connection

		 * that works, create the media link for it.

 skip if link already exists */

/* -----------------------------------------------------------------------------

 * Pipeline power management

 *

 * Entities must be powered up when part of a pipeline that contains at least

 * one open video device node.

 *

 * To achieve this use the entity use_count field to track the number of users.

 * For entities corresponding to video device nodes the use_count field stores

 * the users count of the node. For entities corresponding to subdevs the

 * use_count field stores the total number of users of all video device nodes

 * in the pipeline.

 *

 * The v4l2_pipeline_pm_{get, put}() functions must be called in the open() and

 * close() handlers of video device nodes. It increments or decrements the use

 * count of all subdev entities in the pipeline.

 *

 * To react to link management on powered pipelines, the link setup notification

 * callback updates the use count of all entities in the source and sink sides

 * of the link.

/*

 * pipeline_pm_use_count - Count the number of users of a pipeline

 * @entity: The entity

 *

 * Return the total number of users of all video device nodes in the pipeline.

/*

 * pipeline_pm_power_one - Apply power change to an entity

 * @entity: The entity

 * @change: Use count change

 *

 * Change the entity use count by @change. If the entity is a subdev update its

 * power state by calling the core::s_power operation when the use count goes

 * from 0 to != 0 or from != 0 to 0.

 *

 * Return 0 on success or a negative error code on failure.

/*

 * pipeline_pm_power - Apply power change to all entities in a pipeline

 * @entity: The entity

 * @change: Use count change

 *

 * Walk the pipeline to update the use count and the power state of all non-node

 * entities.

 *

 * Return 0 on success or a negative error code on failure.

 Apply use count to node. */

 Apply power change to connected non-nodes. */

 Powering off entities shouldn't fail. */

 Powering off entities is assumed to never fail. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * V4L2 controls framework core implementation.

 *

 * Copyright (C) 2010-2021  Hans Verkuil <hverkuil-cisco@xs4all.nl>

 strings are always 0-terminated */

 Default intra MPEG-2 quantisation coefficients, from the specification. */

 4:2:0 */

 interlaced top field */

		/*

		 * The default non-intra MPEG-2 quantisation

		 * coefficients are all 16, as per the specification.

/*

 * Round towards the closest legal value. Be careful when we are

 * close to the maximum range of the control type to prevent

 * wrap-arounds.

 Validate a new control */

/*

 * Compound controls validation requires setting unused fields/flags to zero

 * in order to properly detect unchanged controls with std_equal's memcmp.

 4:2:0 */

 4:2:2 */

 4:4:4 */

 8 bits */

 9 bits */

 10 bits */

 11 bits */

 Some syntax elements are only conditionally valid */

		/*

		 * Chroma 4:2:2 format require at least High 4:2:2 profile.

		 *

		 * The H264 specification and well-known parser implementations

		 * use profile-idc values directly, as that is clearer and

		 * less ambiguous. We do the same here.

 Chroma 4:4:4 format require at least High 4:2:2 profile */

		/*

		 * pic_init_qp_minus26 shall be in the range of

		 * -(26 + QpBdOffset_y) to +25, inclusive,

		 *  where QpBdOffset_y is 6 * bit_depth_luma_minus8

 The following restriction comes from ITU-T Rec. H.265 spec */

		/*

		 * We can't use the ROUND_TO_RANGE define here due to

		 * the u64 divide that needs special care.

 Copy the one value to another. */

 Copy the new value to the current value. */

 has_changed is set by cluster_changed */

 Note: CH_FLAGS is only set for auto clusters. */

		/* If a control was changed that was not one of the controls

 Copy the current value to the new value */

 Copy the new value to the request value */

 Copy the current value to the request value */

 Copy the request value to the new value */

 Control range checking */

		/* Note: step == menu_skip_mask for menu controls.

 Validate a new control */

 Set the handler's error code if it wasn't set earlier already */

 Initialize the handler */

 Free all controls and control refs */

 Free all nodes */

 Free all controls owned by the handler */

/* For backwards compatibility: V4L2_CID_PRIVATE_BASE should no longer

   be used except in G_CTRL, S_CTRL, QUERYCTRL and QUERYMENU when dealing

   with applications that do not use the NEXT_CTRL flag.



   We just find the n-th private user control. It's O(N), but that should not

		/* Search for private user controls that are compatible with

 Find a control with the given ID. */

 Old-style private controls need special handling */

 Simple optimization: cache the last control found */

 Not in cache, search the hash */

 cache it! */

 Find a control with the given ID. Take the handler's lock first. */

 Find a control with the given ID. */

 Allocate a new v4l2_ctrl_ref and hook it into the handler. */

 which bucket to use */

	/*

	 * Automatically add the control class if it is not yet present and

	 * the new control is not a compound control.

	/* Add immediately at the end of the list if the list is empty, or if

	   the last element in the list has a lower ID.

	   This ensures that when elements are added in ascending order the

 Find insert position in sorted list */

 Don't add duplicates */

 Insert the control node in the hash */

		/* By default each control starts in a cluster of its own.

		 * new_ref->ctrl is basically a cluster array with one

		 * element, so that's perfect to use as the cluster pointer.

		 * But only do this for the handler that owns the control.

 Add a new control */

 Prefill elem_size for all types handled by std_type_ops */

 Sanity checks */

 Helper function for standard non-menu controls */

 Helper function for standard menu controls */

 Helper function for standard menu controls with driver defined menu */

	/* v4l2_ctrl_new_std_menu_items() should only be called for

	 * standard controls without a standard menu.

 Helper function for standard compound controls */

 Helper function for standard integer menu controls */

 Add the controls from another handler to our own. */

 Do nothing if either handler is NULL or if they are the same */

 Skip handler-private controls. */

 And control classes */

 Filter any unwanted controls */

 Cluster controls */

 The first control is the master control and it must not be NULL */

/*

 * Obtain the current volatile values of an autocluster and mark them

 * as new.

/*

 * Return non-zero if one or more of the controls in the cluster has a new

 * value that differs from the current value.

		/*

		 * Set has_changed to false to avoid generating

		 * the event V4L2_EVENT_CTRL_CH_VALUE

/*

 * Core function that calls try/s_ctrl and ensures that the new value is

 * copied to the current value on a set.

 * Must be called with ctrl->handler->lock held.

	/*

	 * Go through the cluster and either validate the new value or

	 * (if no new value was set), copy the current value to the new

	 * value, ensuring a consistent view for the control ops when

	 * called.

		/*

		 * Check again: it may have changed since the

		 * previous check in try_or_set_ext_ctrls().

 Don't set if there is no change */

 If OK, then make the new values permanent. */

		/*

		 * If we switch from auto to manual mode, and this cluster

		 * contains volatile controls, then all non-master controls

		 * have to be marked as changed. The 'new' value contains

		 * the volatile value (obtained by update_from_auto_cluster),

		 * which now has to become the current value.

 Activate/deactivate a control. */

 invert since the actual flag is called 'inactive' */

 set V4L2_CTRL_FLAG_INACTIVE */

 clear V4L2_CTRL_FLAG_INACTIVE */

 set V4L2_CTRL_FLAG_GRABBED */

 clear V4L2_CTRL_FLAG_GRABBED */

 Call s_ctrl for all controls owned by the handler */

 Skip if this control was already handled by a cluster. */

 Skip button controls and read-only controls. */

 Log the control name and value */

 Log all controls owned by the handler */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * v4l2-dv-timings - dv-timings helper functions

 *

 * Copyright 2013 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

/**

 * v4l2_match_dv_timings - check if two timings match

 * @t1: compare this v4l2_dv_timings struct...

 * @t2: with this struct.

 * @pclock_delta: the allowed pixelclock deviation.

 * @match_reduced_fps: if true, then fail if V4L2_DV_FL_REDUCED_FPS does not

 *	match.

 *

 * Compare t1 with t2 with a given margin of error for the pixelclock.

/** v4l2_calc_timeperframe - helper function to calculate timeperframe based

 *	v4l2_dv_timings fields.

 * @t - Timings for the video mode.

 *

 * Calculates the expected timeperframe using the pixel clock value and

 * horizontal/vertical measures. This means that v4l2_dv_timings structure

 * must be correctly and fully filled.

/*

 * CVT defines

 * Based on Coordinated Video Timings Standard

 * version 1.1 September 10, 2003

 pixel clock granularity */

 granularity for reduced blanking v2*/

 Normal blanking */

 lines */

 lines */

 min time of vsync + back porch (us) */

 nominal hsync as percentage of line */

 Normal blanking for CVT uses GTF to calculate horizontal blanking */

 character cell granularity */

 blanking formula gradient */

 blanking formula offset */

 blanking formula scaling factor */

 blanking formula scaling factor */

 Reduced Blanking */

 lines  */

 lines  */

 us     */

 pixels */

 pixels */

 Reduce blanking Version 2 */

 pixels */

 lines  */

 lines  */

 lines  */

/** v4l2_detect_cvt - detect if the given timings follow the CVT standard

 * @frame_height - the total height of the frame (including blanking) in lines.

 * @hfreq - the horizontal frequency in Hz.

 * @vsync - the height of the vertical sync in lines.

 * @active_width - active width of image (does not include blanking). This

 * information is needed only in case of version 2 of reduced blanking.

 * In other cases, this parameter does not have any effect on timings.

 * @polarities - the horizontal and vertical polarities (same as struct

 *		v4l2_bt_timings polarities).

 * @interlaced - if this flag is true, it indicates interlaced format

 * @fmt - the resulting timings.

 *

 * This function will attempt to detect if the given values correspond to a

 * valid CVT format. If so, then it will return true, and fmt will be filled

 * in with the found CVT timings.

 Vertical */

 Aspect ratio based on vsync */

 special case */

 Horizontal */

/*

 * GTF defines

 * Based on Generalized Timing Formula Standard

 * Version 1.1 September 2, 1999

 pixel clock granularity */

 min time of vsync + back porch (us) */

 vertical front porch (lines) */

 character cell granularity */

 Default */

 blanking formula gradient */

 blanking formula offset */

 blanking formula scaling factor */

 blanking formula scaling factor */

 Secondary */

 blanking formula gradient */

 blanking formula offset */

 blanking formula scaling factor */

 blanking formula scaling factor */

/** v4l2_detect_gtf - detect if the given timings follow the GTF standard

 * @frame_height - the total height of the frame (including blanking) in lines.

 * @hfreq - the horizontal frequency in Hz.

 * @vsync - the height of the vertical sync in lines.

 * @polarities - the horizontal and vertical polarities (same as struct

 *		v4l2_bt_timings polarities).

 * @interlaced - if this flag is true, it indicates interlaced format

 * @aspect - preferred aspect ratio. GTF has no method of determining the

 *		aspect ratio in order to derive the image width from the

 *		image height, so it has to be passed explicitly. Usually

 *		the native screen aspect ratio is used for this. If it

 *		is not filled in correctly, then 16:9 will be assumed.

 * @fmt - the resulting timings.

 *

 * This function will attempt to detect if the given values correspond to a

 * valid GTF format. If so, then it will return true, and fmt will be filled

 * in with the found GTF timings.

 Vertical */

 Horizontal */

/** v4l2_calc_aspect_ratio - calculate the aspect ratio based on bytes

 *	0x15 and 0x16 from the EDID.

 * @hor_landscape - byte 0x15 from the EDID.

 * @vert_portrait - byte 0x16 from the EDID.

 *

 * Determines the aspect ratio from the EDID.

 * See VESA Enhanced EDID standard, release A, rev 2, section 3.6.2:

 * "Horizontal and Vertical Screen Size or Aspect Ratio"

 Nothing filled in, fallback to 16:9 */

 Both filled in, so they are interpreted as the screen size in cm */

	/* Only one is filled in, so interpret them as a ratio:

 Change some rounded values into the exact aspect ratio */

 The aspect ratio is for portrait, so swap numerator and denominator */

/** v4l2_hdmi_rx_colorimetry - determine HDMI colorimetry information

 *	based on various InfoFrames.

 * @avi: the AVI InfoFrame

 * @hdmi: the HDMI Vendor InfoFrame, may be NULL

 * @height: the frame height

 *

 * Determines the HDMI colorimetry information, i.e. how the HDMI

 * pixel color data should be interpreted.

 *

 * Note that some of the newer features (DCI-P3, HDR) are not yet

 * implemented: the hdmi.h header needs to be updated to the HDMI 2.0

 * and CTA-861-G standards.

 RGB pixel encoding */

 YCbCr pixel encoding */

 fall back to ITU_709 */

		/*

		 * YCC Quantization Range signaling is more-or-less broken,

		 * let's just ignore this.

/**

 * v4l2_get_edid_phys_addr() - find and return the physical address

 *

 * @edid:	pointer to the EDID data

 * @size:	size in bytes of the EDID data

 * @offset:	If not %NULL then the location of the physical address

 *		bytes in the EDID will be returned here. This is set to 0

 *		if there is no physical address found.

 *

 * Return: the physical address or CEC_PHYS_ADDR_INVALID if there is none.

/**

 * v4l2_set_edid_phys_addr() - find and set the physical address

 *

 * @edid:	pointer to the EDID data

 * @size:	size in bytes of the EDID data

 * @phys_addr:	the new physical address

 *

 * This function finds the location of the physical address in the EDID

 * and fills in the given physical address and updates the checksum

 * at the end of the EDID block. It does nothing if the EDID doesn't

 * contain a physical address.

 update the checksum */

/**

 * v4l2_phys_addr_for_input() - calculate the PA for an input

 *

 * @phys_addr:	the physical address of the parent

 * @input:	the number of the input port, must be between 1 and 15

 *

 * This function calculates a new physical address based on the input

 * port number. For example:

 *

 * PA = 0.0.0.0 and input = 2 becomes 2.0.0.0

 *

 * PA = 3.0.0.0 and input = 1 becomes 3.1.0.0

 *

 * PA = 3.2.1.0 and input = 5 becomes 3.2.1.5

 *

 * PA = 3.2.1.3 and input = 5 becomes f.f.f.f since it maxed out the depth.

 *

 * Return: the new physical address or CEC_PHYS_ADDR_INVALID.

 Check if input is sane */

	/*

	 * All nibbles are used so no valid physical addresses can be assigned

	 * to the input.

/**

 * v4l2_phys_addr_validate() - validate a physical address from an EDID

 *

 * @phys_addr:	the physical address to validate

 * @parent:	if not %NULL, then this is filled with the parents PA.

 * @port:	if not %NULL, then this is filled with the input port.

 *

 * This validates a physical address as read from an EDID. If the

 * PA is invalid (such as 1.0.1.0 since '0' is only allowed at the end),

 * then it will return -EINVAL.

 *

 * The parent PA is passed into %parent and the input port is passed into

 * %port. For example:

 *

 * PA = 0.0.0.0: has parent 0.0.0.0 and input port 0.

 *

 * PA = 1.0.0.0: has parent 0.0.0.0 and input port 1.

 *

 * PA = 3.2.0.0: has parent 3.0.0.0 and input port 2.

 *

 * PA = f.f.f.f: has parent f.f.f.f and input port 0.

 *

 * Return: 0 if the PA is valid, -EINVAL if not.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * V4L2 controls framework uAPI implementation:

 *

 * Copyright (C) 2010-2021  Hans Verkuil <hverkuil-cisco@xs4all.nl>

 Internal temporary helper struct, one for each v4l2_ext_control */

 Pointer to the control reference of the master control */

 The control ref corresponding to the v4l2_ext_control ID field. */

	/*

	 * v4l2_ext_control index of the next control belonging to the

	 * same cluster, or 0 if there isn't any.

/*

 * Helper functions to copy control payload data from kernel space to

 * user space and vice versa.

 Helper function: copy the given control value back to the caller */

 Helper function: copy the current control value back to the caller */

 Helper function: copy the new control value back to the caller */

 Helper function: copy the request value back to the caller */

 Helper function: copy the initial control value back to the caller */

 Helper function: copy the caller-provider value to the given control value */

			/*

			 * If the string was longer than ctrl->maximum,

			 * then return an error.

 Helper function: copy the caller-provider value as the new control value */

/*

 * VIDIOC_G/TRY/S_EXT_CTRLS implementation

/*

 * Some general notes on the atomic requirements of VIDIOC_G/TRY/S_EXT_CTRLS:

 *

 * It is not a fully atomic operation, just best-effort only. After all, if

 * multiple controls have to be set through multiple i2c writes (for example)

 * then some initial writes may succeed while others fail. Thus leaving the

 * system in an inconsistent state. The question is how much effort you are

 * willing to spend on trying to make something atomic that really isn't.

 *

 * From the point of view of an application the main requirement is that

 * when you call VIDIOC_S_EXT_CTRLS and some values are invalid then an

 * error should be returned without actually affecting any controls.

 *

 * If all the values are correct, then it is acceptable to just give up

 * in case of low-level errors.

 *

 * It is important though that the application can tell when only a partial

 * configuration was done. The way we do that is through the error_idx field

 * of struct v4l2_ext_controls: if that is equal to the count field then no

 * controls were affected. Otherwise all controls before that index were

 * successful in performing their 'get' or 'set' operation, the control at

 * the given index failed, and you don't know what happened with the controls

 * after the failed one. Since if they were part of a control cluster they

 * could have been successfully processed (if a cluster member was encountered

 * at index < error_idx), they could have failed (if a cluster member was at

 * error_idx), or they may not have been processed yet (if the first cluster

 * member appeared after error_idx).

 *

 * It is all fairly theoretical, though. In practice all you can do is to

 * bail out. If error_idx == count, then it is an application bug. If

 * error_idx < count then it is only an application bug if the error code was

 * EBUSY. That usually means that something started streaming just when you

 * tried to set the controls. In all other cases it is a driver/hardware

 * problem and all you can do is to retry or bail out.

 *

 * Note that these rules do not apply to VIDIOC_TRY_EXT_CTRLS: since that

 * never modifies controls the error_idx is just set to whatever control

 * has an invalid value.

/*

 * Prepare for the extended g/s/try functions.

 * Find the controls in the control array and do some basic checks.

		/*

		 * Old-style private controls are not allowed for

		 * extended controls.

				/*

				 * In the get case the application first

				 * queries to obtain the size of the control.

 Store the ref to the master control of the cluster */

		/*

		 * Initially set next to 0, meaning that there is no other

		 * control in this helper array belonging to the same

		 * cluster.

	/*

	 * We are done if there were no controls that belong to a multi-

	 * control cluster.

	/*

	 * The code below figures out in O(n) time which controls in the list

	 * belong to the same cluster.

 This has to be done with the handler lock taken. */

 First zero the helper field in the master control references */

		/*

		 * If the mref->helper is set, then it points to an earlier

		 * helper that belongs to the same cluster.

			/*

			 * Set the next field of mref->helper to the current

			 * index: this means that the earlier helper now

			 * points to the next helper in the same cluster.

			/*

			 * mref should be set only for the first helper in the

			 * cluster, clear the others.

 Point the mref helper to the current helper struct. */

/*

 * Handles the corner case where cs->count == 0. It checks whether the

 * specified control class exists. If that class ID is 0, then it checks

 * whether there are any controls at all.

/*

 * Get extended controls. Allocates the helpers array if needed.

 *

 * Note that v4l2_g_ext_ctrls_common() with 'which' set to

 * V4L2_CTRL_WHICH_REQUEST_VAL is only called if the request was

 * completed, and in that case valid_p_req is true for all controls.

		/*

		 * g_volatile_ctrl will update the new control values.

		 * This makes no sense for V4L2_CTRL_WHICH_DEF_VAL and

		 * V4L2_CTRL_WHICH_REQUEST_VAL. In the case of requests

		 * it is v4l2_ctrl_request_complete() that copies the

		 * volatile controls at the time of request completion

		 * to the request, so you don't want to do that again.

		/*

		 * Copy the default value (if is_default is true), the

		 * request value (if is_request is true and p_req is valid),

		 * the new volatile value (if is_volatile is true) or the

		 * current value.

 Validate controls. */

		/*

		 * This test is also done in try_set_control_cluster() which

		 * is called in atomic context, so that has the final say,

		 * but it makes sense to do an up-front check as well. Once

		 * an error occurs in try_set_control_cluster() some other

		 * controls may have been set already and we want to do a

		 * best-effort to avoid that.

		/*

		 * Skip validation for now if the payload needs to be copied

		 * from userspace into kernelspace. We'll validate those later.

 Try or try-and-set controls */

 Default value cannot be changed */

 Reset the 'is_new' flags of the cluster */

		/*

		 * For volatile autoclusters that are currently in auto mode

		 * we need to discover if it will be set to manual mode.

		 * If so, then we have to copy the current volatile values

		 * first since those will become the new manual values (which

		 * may be overwritten by explicit new values from this set

		 * of controls).

 Pick an initial non-manual value */

				/*

				 * Check if the auto control is part of the

				 * list, and remember the new value.

			/*

			 * If the new value == the manual value, then copy

			 * the current volatile values.

		/*

		 * Copy the new caller-supplied control values.

		 * user_to_new() sets 'is_new' to 1.

 Copy the new values back to userspace. */

/*

 * VIDIOC_G/S_CTRL implementation

 Helper function to get a single control */

	/* Compound controls are not supported. The new_to_user() and

	 * cur_to_user() calls below would need to be modified not to access

	 * userspace memory when called from get_ctrl().

 g_volatile_ctrl will update the current control values */

 Helper function for VIDIOC_S_CTRL compatibility */

 Reset the 'is_new' flags of the cluster */

	/*

	 * For autoclusters with volatiles that are switched from auto to

	 * manual mode we have to update the current volatile values since

	 * those will become the initial manual values after such a switch.

 Helper function for VIDIOC_S_CTRL compatibility */

/*

 * Helper functions for drivers to get/set controls.

 It's a driver bug if this happens. */

 It's a driver bug if this happens. */

 It's a driver bug if this happens. */

 It's a driver bug if this happens. */

 It's a driver bug if this happens. */

 It's a driver bug if this happens. */

/*

 * Modify the range of a control.

 Implement VIDIOC_QUERY_EXT_CTRL */

 Try to find it */

 Match any control that is not hidden */

 Match any hidden control */

 Match any control, compound or not */

 Find the next control with ID > qc->id */

 Did we reach the end of the control list? */

 Yes, so there is no next control */

			/*

			 * We found a control with the given ID, so just get

			 * the next valid one in the list.

			/*

			 * No control with the given ID exists, so start

			 * searching for the next largest ID. We know there

			 * is one, otherwise the first 'if' above would have

			 * been true.

 Implement VIDIOC_QUERYCTRL */

 Implement VIDIOC_QUERYMENU */

 Sanity checks */

 Use mask to see if this menu item should be skipped */

 Empty menu items should also be skipped */

/*

 * VIDIOC_LOG_STATUS helpers

/*

 * VIDIOC_(UN)SUBSCRIBE_EVENT implementation

/*

 * poll helper

 SPDX-License-Identifier: GPL-2.0-only

/*

 * i2c tv tuner chip device driver

 * core core, i.e. kernel interfaces, registering and so on

 *

 * Copyright(c) by Ralph Metzler, Gerd Knorr, Gunther Mayer

 *

 * Copyright(c) 2005-2011 by Mauro Carvalho Chehab

 *	- Added support for a separate Radio tuner

 *	- Major rework and cleanups at the code

 *

 * This driver supports many devices and the idea is to let the driver

 * detect which device is present. So rather than listing all supported

 * devices here, we pretend to support a single, fake device type that will

 * handle both radio and analog TV tuning.

/*

 * Driver modprobe parameters

 insmod options used at init time => read/only */

 insmod options used at runtime => read/write */

/*

 * Static vars

/*

 * Debug macros

/*

 * Internal enums/struct used inside the driver

/**

 * enum tuner_pad_index - tuner pad index for MEDIA_ENT_F_TUNER

 *

 * @TUNER_PAD_RF_INPUT:

 *	Radiofrequency (RF) sink pad, usually linked to a RF connector entity.

 * @TUNER_PAD_OUTPUT:

 *	tuner video output source pad. Contains the video chrominance

 *	and luminance or the hole bandwidth of the signal converted to

 *	an Intermediate Frequency (IF) or to baseband (on zero-IF tuners).

 * @TUNER_PAD_AUD_OUT:

 *	Tuner audio output source pad. Tuners used to decode analog TV

 *	signals have an extra pad for audio output. Old tuners use an

 *	analog stage with a saw filter for the audio IF frequency. The

 *	output of the pad is, in this case, the audio IF, with should be

 *	decoded either by the bridge chipset (that's the case of cx2388x

 *	chipsets) or may require an external IF sound processor, like

 *	msp34xx. On modern silicon tuners, the audio IF decoder is usually

 *	incorporated at the tuner. On such case, the output of this pad

 *	is an audio sampled data.

 * @TUNER_NUM_PADS:

 *	Number of pads of the tuner.

/**

 * enum if_vid_dec_pad_index - video IF-PLL pad index

 *	for MEDIA_ENT_F_IF_VID_DECODER

 *

 * @IF_VID_DEC_PAD_IF_INPUT:

 *	video Intermediate Frequency (IF) sink pad

 * @IF_VID_DEC_PAD_OUT:

 *	IF-PLL video output source pad. Contains the video chrominance

 *	and luminance IF signals.

 * @IF_VID_DEC_PAD_NUM_PADS:

 *	Number of pads of the video IF-PLL.

 device */

 keep track of the current settings */

 Combination of allowable modes */

 Standby mode */

 chip type id */

/*

 * Function prototypes

/*

 * tuner attach/detach logic

 This macro allows us to probe dynamically, avoiding static links */

/*

 * struct analog_demod_ops callbacks

/*

 * Functions to select between radio and TV and tuner probe/remove functions

/**

 * set_type - Sets the tuner type for a given device

 *

 * @c:			i2c_client descriptor

 * @type:		type of the tuner (e. g. tuner number)

 * @new_mode_mask:	Indicates if tuner supports TV and/or Radio

 * @new_config:		an optional parameter used by a few tuners to adjust

 *			internal parameters, like LNA mode

 * @tuner_callback:	an optional function to be called when switching

 *			to analog mode

 *

 * This function applies the tuner config to tuner specified

 * by tun_setup structure. It contains several per-tuner initialization "magic"

 discard private data, in case set_type() was previously called */

 if_khz will be set at dvb_attach() */

 if_khz will be set at dvb_attach() */

 FIXME: the correct parameters will be set */

 only when the digital dvb_attach() occurs */

	/* Some tuners require more initialization setup before use,

	   such as firmware download or device calibration.

	   trying to set a frequency here will just fail

	   FIXME: better to move set_freq to the tuner code. This is needed

	   on analog tuners for PLL to properly work

/**

 * tuner_s_type_addr - Sets the tuner type for a device

 *

 * @sd:		subdev descriptor

 * @tun_setup:	type to be associated to a given tuner i2c address

 *

 * This function applies the tuner config to tuner specified

 * by tun_setup structure.

 * If tuner I2C address is UNSET, then it will only set the device

 * if the tuner supports the mode specified in the call.

 * If the address is specified, the change will be applied only if

 * tuner I2C address matches.

 * The call can change the tuner number and the tuner mode.

/**

 * tuner_s_config - Sets tuner configuration

 *

 * @sd:		subdev descriptor

 * @cfg:	tuner configuration

 *

 * Calls tuner set_config() private function to set some tuner-internal

 * parameters

/**

 * tuner_lookup - Seek for tuner adapters

 *

 * @adap:	i2c_adapter struct

 * @radio:	pointer to be filled if the adapter is radio

 * @tv:		pointer to be filled if the adapter is TV

 *

 * Search for existing radio and/or TV tuners on the given I2C adapter,

 * discarding demod-only adapters (tda9887).

 *

 * Note that when this function is called from tuner_probe you can be

 * certain no other devices will be added/deleted at the same time, I2C

 * core protects against that.

		/* Note: currently TDA9887 is the only demod-only

		   device. If other devices appear then we need to

/**

 *tuner_probe - Probes the existing tuners on an I2C bus

 *

 * @client:	i2c_client descriptor

 * @id:		not used

 *

 * This routine probes for tuners at the expected I2C addresses. On most

 * cases, if a device answers to a given I2C address, it assumes that the

 * device is a tuner. On a few cases, however, an additional logic is needed

 * to double check if the device is really a tuner, or to identify the tuner

 * type, like on tea5767/5761 devices.

 *

 * During client attach, set_type is called by adapter's attach_inform callback.

 * set_type must then be completed by tuner_probe.

 Initial freq range */

 Sets freq to VHF High - needed for some PLL's to properly start */

 autodetection code based on the i2c addr */

			/* If chip is not tda8290, don't register.

 Default is being tda9887 */

 Sets freq to FM range */

	/* Initializes only the first TV tuner on this adapter. Why only the

	   first? Because there are some devices (notably the ones with TI

	   tuners) that have more than one i2c address for the *same* device.

	   Experience shows that, except for just one case, the first

	   address is the right one. The exception is a Russian tuner

	   (ACORP_Y878F). So, the desired behavior is just to enable the

 Should be just before return */

	/*

	 * Handle the special case where the tuner has actually

	 * two stages: the PLL to tune into a frequency and the

	 * IF-PLL demodulator (tda988x).

 Sets a default mode */

/**

 * tuner_remove - detaches a tuner

 *

 * @client:	i2c_client descriptor

/*

 * Functions to switch between Radio and TV

 *

 * A few cards have a separate I2C tuner for radio. Those routines

 * take care of switching between TV/Radio mode, filtering only the

 * commands that apply to the Radio or TV tuner.

/**

 * check_mode - Verify if tuner supports the requested mode

 * @t: a pointer to the module's internal struct_tuner

 * @mode: mode of the tuner, as defined by &enum v4l2_tuner_type.

 *

 * This function checks if the tuner is capable of tuning analog TV,

 * digital TV or radio, depending on what the caller wants. If the

 * tuner can't support that mode, it returns -EINVAL. Otherwise, it

 * returns 0.

 * This function is needed for boards that have a separate tuner for

 * radio (like devices with tea5767).

 *

 * NOTE: mt20xx uses V4L2_TUNER_DIGITAL_TV and calls set_tv_freq to

 *       select a TV frequency. So, t_mode = T_ANALOG_TV could actually

 *	 be used to represent a Digital TV too.

/**

 * set_mode - Switch tuner to other mode.

 * @t:		a pointer to the module's internal struct_tuner

 * @mode:	enum v4l2_type (radio or TV)

 *

 * If tuner doesn't support the needed mode (radio or TV), prints a

 * debug message and returns -EINVAL, changing its state to standby.

 * Otherwise, changes the mode and returns 0.

/**

 * set_freq - Set the tuner to the desired frequency.

 * @t:		a pointer to the module's internal struct_tuner

 * @freq:	frequency to set (0 means to use the current frequency)

/*

 * Functions that are specific for TV mode

/**

 * set_tv_freq - Set tuner frequency,  freq in Units of 62.5 kHz = 1/16MHz

 *

 * @c:	i2c_client descriptor

 * @freq: frequency

		/* V4L2 spec: if the freq is not possible then the closest

/**

 * tuner_fixup_std - force a given video standard variant

 *

 * @t: tuner internal struct

 * @std:	TV standard

 *

 * A few devices or drivers have problem to detect some standard variations.

 * On other operational systems, the drivers generally have a per-country

 * code, and some logic to apply per-country hacks. V4L2 API doesn't provide

 * such hacks. Instead, it relies on a proper video standard selection from

 * the userspace application. However, as some apps are buggy, not allowing

 * to distinguish all video standard variations, a modprobe parameter can

 * be used to force a video standard match.

/*

 * Functions that are specific for Radio mode

/**

 * set_radio_freq - Set tuner frequency,  freq in Units of 62.5 Hz  = 1/16kHz

 *

 * @c:	i2c_client descriptor

 * @freq: frequency

		/* V4L2 spec: if the freq is not possible then the closest

	/*

	 * The tuner driver might decide to change the audmode if it only

	 * supports stereo, so update t->audmode.

/*

 * Debug function for reporting tuner status to userspace

/**

 * tuner_status - Dumps the current tuner status at dmesg

 * @fe: pointer to struct dvb_frontend

 *

 * This callback is used only for driver debug purposes, answering to

 * VIDIOC_LOG_STATUS. No changes should happen on this call.

 Used by mt20xx */

/*

 * Function to splicitly change mode to radio. Probably not needed anymore

/*

 * Tuner callbacks to handle userspace ioctl's

/**

 * tuner_standby - places the tuner in standby mode

 * @sd: pointer to struct v4l2_subdev

/**

 * tuner_g_frequency - Get the tuned frequency for the tuner

 * @sd: pointer to struct v4l2_subdev

 * @f: pointer to struct v4l2_frequency

 *

 * At return, the structure f will be filled with tuner frequency

 * if the tuner matches the f->type.

 * Note: f->type should be initialized before calling it.

 * This is done by either video_ioctl2 or by the bridge driver.

/**

 * tuner_g_tuner - Fill in tuner information

 * @sd: pointer to struct v4l2_subdev

 * @vt: pointer to struct v4l2_tuner

 *

 * At return, the structure vt will be filled with tuner information

 * if the tuner matches vt->type.

 * Note: vt->type should be initialized before calling it.

 * This is done by either video_ioctl2 or by the bridge driver.

 radio mode */

/**

 * tuner_s_tuner - Set the tuner's audio mode

 * @sd: pointer to struct v4l2_subdev

 * @vt: pointer to struct v4l2_tuner

 *

 * Sets the audio mode if the tuner matches vt->type.

 * Note: vt->type should be initialized before calling it.

 * This is done by either video_ioctl2 or by the bridge driver.

		/*

		 * For radio audmode can only be mono or stereo. Map any

		 * other values to stereo. The actual tuner driver that is

		 * called in set_radio_freq can decide to limit the audmode to

		 * mono if only mono is supported.

	/* TUNER_SET_CONFIG is still called by tuner-simple.c, so we have

	   to handle it here.

/*

 * Callback structs

/*

 * I2C structs and module init functions

 autodetect */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * generic helper functions for handling video4linux capture buffers

 *

 * (c) 2007 Mauro Carvalho Chehab, <mchehab@kernel.org>

 *

 * Highly based on video-buf written originally by:

 * (c) 2001,02 Gerd Knorr <kraxel@bytesex.org>

 * (c) 2006 Mauro Carvalho Chehab, <mchehab@kernel.org>

 * (c) 2006 Ted Walther and John Sokol

 --------------------------------------------------------------------- */

	/* Release vdev lock to prevent this wait from blocking outside access to

 Relock */

 --------------------------------------------------------------------- */

 All buffer operations are mandatory */

 Lock is mandatory for queue_cancel to work */

 Having implementations for abstract methods are mandatory */

 Locking: Only usage in bttv unsafe find way to remove */

/*

 * __videobuf_free() - free all the buffers and their control structures

 *

 * This function can only be called if streaming/reading is off, i.e. no buffers

 * are under control of the driver.

 Locking: Caller holds q->vb_lock */

 Locking: Caller holds q->vb_lock */

 remove queued buffers from list */

 free all buffers + clear queue */

 --------------------------------------------------------------------- */

 Locking: Caller holds q->vb_lock */

 Locking: Caller holds q->vb_lock */

 DMABUF is not handled in videobuf framework */

 nothing */

 Locking: Caller holds q->vb_lock */

 Allocate and initialize buffers */

 nothing */

 Locking: Caller holds q->vb_lock */

 Drop lock to avoid deadlock with qbuf */

			/* Checking list_empty and streaming is safe without

			 * locks because we goto checks to validate while

 Locking: Caller holds q->vb_lock */

 Locking: Caller holds q->vb_lock */

 Locking: Caller holds q->vb_lock */

 setup stuff */

 start capture & wait */

 cleanup */

 copy to userspace */

		/* dirty, undocumented hack -- pass the frame counter

			* within the last four bytes of each vbi data block.

			* We need that one to maintain backward compatibility

 copy stuff using the common method */

 ok, all done */

 fallback to kernel bounce buffer on failures */

 need to capture a new frame */

 preferred size */

 wait until capture is done */

 catch I/O errors */

 Copy to userspace */

 all data copied, cleanup */

 Locking: Caller holds q->vb_lock */

 get / wait for data */

 some error */

 requeue buffer when done with copying */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Video capture interface for Linux version 2

 *

 * A generic framework to process V4L2 ioctl commands.

 *

 * Authors:	Alan Cox, <alan@lxorguk.ukuu.org.uk> (version 1)

 *              Mauro Carvalho Chehab <mchehab@kernel.org> (version 2)

/* Zero out the end of the struct pointed to by p.  Everything after, but

/* video4linux standard ID conversion to standard name

	/* HACK: ppc32 architecture doesn't have __ucmpdi2 function to handle

	   64 bit comparisons. So, on that architecture, with some gcc

	   variants, compilation fails. Currently, the max value is 30bit wide.

 Returns frame period for the given standard */

/* Fill in the fields of a v4l2_standard structure according to the

/* Fill in the fields of a v4l2_standard structure according to the

	/* Return -ENODATA if the id for the current input

 Return norm array in a canonical way */

		/* last std value in the standards array is 0, so this

 ----------------------------------------------------------------- */

 some arrays for pretty-printing debug messages of enum types      */

 ------------------------------------------------------------------ */

 debug help functions                                               */

		/* Note: we can't print the clip list here since the clips

		 * pointer is a userspace pointer, not a kernelspace

 zero the reserved fields */

		/*

		 * V4L2_CID_PRIVATE_BASE cannot be used as control class

		 * when using extended controls.

		 * Only when passed in through VIDIOC_G_CTRL and VIDIOC_S_CTRL

		 * is it allowed for backwards compatibility.

 Default value cannot be changed */

 Check that all controls are from the same control class. */

 Make sure num_planes is not bogus */

	/*

	 * The v4l2_pix_format structure has been extended with fields that were

	 * not previously required to be set to zero by applications. The priv

	 * field, when set to a magic value, indicates the the extended fields

	 * are valid. Otherwise they will contain undefined values. To simplify

	 * the API towards drivers zero the extended fields and set the priv

	 * field to the magic value when the extended pixel format structure

	 * isn't used by applications.

	/*

	 * Drivers must not change device_caps, so check for this and

	 * warn if this happened.

	/*

	 * Check that capabilities is a superset of

	 * vfd->device_caps | V4L2_CAP_DEVICE_CAPS

	/*

	 * We set the flags for CAP_DV_TIMINGS &

	 * CAP_STD here based on ioctl handler provided by the

	 * driver. If the driver doesn't support these

	 * for a specific input, it must override these flags.

	/*

	 * We set the flags for CAP_DV_TIMINGS &

	 * CAP_STD here based on ioctl handler provided by the

	 * driver. If the driver doesn't support these

	 * for a specific output, it must override these flags.

	/*

	 * We depart from the normal coding style here since the descriptions

	 * should be aligned so it is easy to see which descriptions will be

	 * longer than 31 characters (the max length for a description).

	 * And frankly, this is easier to read anyway.

	 *

	 * Note that gcc will use O(log N) comparisons to find the right case.

 Max description length mask:	descr = "0123456789012345678901234567890" */

 Compressed formats */

 Max description length mask:	descr = "0123456789012345678901234567890" */

 aka H.265 */

 used in vicodec */

 used in vicodec */

	/*

	 * The v4l2_pix_format structure contains fields that make no sense for

	 * touch. Set them to default values in this case.

	/*

	 * fmt can't be cleared for these overlay types due to the 'clips'

	 * 'clipcount' and 'bitmap' pointers in struct v4l2_window.

	 * Those are provided by the user. So handle these two overlay types

	 * first, and then just do a simple memset for the other types.

 just in case the driver zeroed it again */

 just in case the driver zeroed it again */

 just in case the driver zeroed it again */

 just in case the driver zeroed it again */

 just in case the driver zeroed it again */

 just in case the driver zeroed it again */

 Check if std is supported */

 Calls the specific handler */

	/*

	 * If no signal is detected, then the driver should return

	 * V4L2_STD_UNKNOWN. Otherwise it should return tvnorms with

	 * any standards that do not apply removed.

	 *

	 * This means that tuners, audio and video decoders can join

	 * their efforts to improve the standards detection.

 s_hw_freq_seek is not supported for SDR for now */

 Note: extendedmode is never used in drivers */

/*

 * The selection API specified originally that the _MPLANE buffer types

 * shouldn't be used. The reasons for this are lost in the mists of time

 * (or just really crappy memories). Regardless, this is really annoying

 * for userspace. So to keep things simple we map _MPLANE buffer types

 * to their 'regular' counterparts before calling the driver. And we

 * restore it afterwards. This way applications can use either buffer

 * type and drivers don't need to check for both.

 simulate capture crop using selection api */

 crop means compose for output devices */

 copying results to old structure on success */

 simulate capture crop using selection api */

 crop means compose for output devices */

 setting trivial pixelaspect */

	/*

	 * The determine_valid_ioctls() call already should ensure

	 * that this can never happen, but just in case...

	/*

	 * Ignore ENOTTY or ENOIOCTLCMD error returns, just use the

	 * square pixel aspect ratio in that case.

 Use g_selection() to fill in the bounds and defrect rectangles */

 obtaining bounds */

 obtaining defrect */

 Clear up to type, everything after type is zeroed already */

 This control needs a priority check */

 This control can be valid if the filehandle passes a control handler. */

 Queuing ioctl */

 Always copy back result, even on error */

 Zero struct from after the field to the end */

/* Common ioctl debug function. This function can be used by

 ioctl serialization mutex */

	/*

	 * We need to serialize streamon/off with queueing new requests.

	 * These ioctls may trigger the cancellation of a streaming

	 * operation, and that should not be mixed with queueing a new

	 * request at the same time.

 read-only ioctl */

	/*

	 * In some cases, only a few fields are used as input,

	 * i.e. when the app sets "index" and then the driver

	 * fills in the rest of the structure for the thing

	 * with that index.  We only need to copy up the first

	 * non-input field.

 zero out anything we don't copy from userspace */

  Copy results into user buffer  */

  Copy arguments into temp kernel buffer  */

 too big to allocate from stack */

 Handles IOCTL */

	/*

	 * Some ioctls can return an error, but still have valid

	 * results that must be returned.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Video capture interface for Linux version 2

 *

 *	A generic video device interface for the LINUX operating system

 *	using a set of device structures/vectors for low level operations.

 *

 * Authors:	Alan Cox, <alan@lxorguk.ukuu.org.uk> (version 1)

 *              Mauro Carvalho Chehab <mchehab@kernel.org> (version 2)

 *

 * Fixes:	20000516  Claudio Matsuoka <claudio@conectiva.com>

 *		- Added procfs support

/*

 *	sysfs stuff

/*

 *	Active devices

 Device node utility functions */

/* Note: these utility functions all assume that vfl_type is in the range

 Return the bitmap corresponding to vfl_type. */

	/* Any types not assigned to fixed minor ranges must be mapped to

	   one single bitmap for the purposes of finding a free node number

 Return the bitmap corresponding to vfl_type. */

 Mark device node number vdev->num as used */

 Mark device node number vdev->num as unused */

 Try to find a free device node number in the range [from, to> */

 Do nothing */

 Only valid when the video_device struct is a static. */

 Called when the last user of the video device exits. */

 should not happen */

 Free up this device for reuse */

 Delete the cdev on this minor as well */

	/* Just in case some driver tries to access this from

 Mark device node number as free */

 Remove interfaces and interface links */

	/* Do not call v4l2_device_put if there is no release callback set.

	 * Drivers that have no v4l2_device release callback might free the

	 * v4l2_dev instance in the video_device release callback below, so we

	 * must perform this check here.

	 *

	 * TODO: In the long run all drivers that use v4l2_device should use the

	 * v4l2_device release callback. This check will then be unnecessary.

	/* Release video_device and perform other

 Decrease v4l2_device refcount */

 Priority handling */

 Override for the open function */

 Check if the video device is available */

 return ENODEV if the video device has already been removed. */

 and increase the device refcount */

 decrease the refcount in case of an error */

 Override for the release function */

	/*

	 * We need to serialize the release() with queueing new requests.

	 * The release() may trigger the cancellation of a streaming

	 * operation, and that should not be mixed with queueing a new

	 * request at the same time.

	/* decrease the refcount unconditionally since the release()

/**

 * get_index - assign stream index number based on v4l2_dev

 * @vdev: video_device to assign index number to, vdev->v4l2_dev should be assigned

 *

 * Note that when this is called the new device has not yet been registered

 * in the video_device array, but it was able to obtain a minor number.

 *

 * This means that we can always obtain a free stream index number since

 * the worst case scenario is that there are VIDEO_NUM_DEVICES - 1 slots in

 * use of the video_device array.

 *

 * Returns a free index number.

	/* This can be static since this function is called with the global

/* This determines which ioctls are actually implemented in the driver.

   It's a one-time thing which simplifies video_ioctl2 as it can just do

   a bit test.



   Note that drivers can override this by setting bits to 1 in

   vdev->valid_ioctls. If an ioctl is marked as 1 when this function is

   called, then that ioctl will actually be marked as unimplemented.



   It does that by first setting up the local valid_ioctls bitmap, and

   at the end do a:



   vdev->valid_ioctls = valid_ioctls & ~(vdev->valid_ioctls)

 vfl_type and vfl_dir independent ioctls */

	/* Note: the control handler can also be passed through the filehandle,

	   and that can't be tested here. If the bit for these control ioctls

	   is set, then the ioctl is valid. But if it is 0, then it can still

 yes, really vidioc_subscribe_event */

 video specific ioctls */

 metadata capture specific ioctls */

 metadata output specific ioctls */

 vbi specific ioctls */

 touch specific ioctls */

 SDR receiver specific ioctls */

 SDR transmitter specific ioctls */

 ioctls valid for video, vbi, sdr, touch and metadata */

 ioctls valid for video, vbi and metadata */

 radio transmitter only ioctls */

 receiver only ioctls */

	/* Memory-to-memory devices are more complex and use

	 * their own function to register its mc entities.

		/*

		 * Radio doesn't have an entity at the V4L2 side to represent

		 * radio input or output. Instead, the audio input/output goes

		 * via either physical wires or ALSA.

 Entity will be created via v4l2_device_register_subdev() */

 Needed just for backward compatibility with legacy MC API */

 FIXME: how to create the other interface links? */

	/* A minor value of -1 marks this video device as never

 the release callback MUST be present */

 the v4l2_dev pointer MUST be present */

 the device_caps field MUST be set for all but subdevs */

 v4l2_fh support */

 Part 1: check device type */

 Use device name 'swradio' because 'sdr' was already taken. */

	/* If the prio state pointer is NULL, then use the v4l2_device

 Part 2: find a free minor, device node number and device index. */

	/* Keep the ranges for the first four types for historical

	 * reasons.

	 * Newer devices (not yet in place) should use the range

	 * of 128-191 and just pick the first free minor there

 Pick a device node number */

 1-on-1 mapping of device node number to minor number */

	/* The device node number and minor numbers are independent, so

 Should not happen since we thought this minor was free */

 Part 3: Initialize the character device */

 Part 4: register the device with sysfs */

	/* Register the release callback that will be called when the last

 Increase v4l2_device refcount */

 Part 5: Register the entity. */

 Part 6: Activate this minor. The char device can now be used. */

 Mark this video device as never having been registered. */

/**

 *	video_unregister_device - unregister a video4linux device

 *	@vdev: the device to unregister

 *

 *	This unregisters the passed device. Future open calls will

 *	be met with errors.

 Check if vdev was ever registered at all */

	/* This must be in a critical section to prevent a race with v4l2_open.

	 * Once this bit has been cleared video_get may never be called again.

/*

 *	Initialise video for linux

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Memory-to-memory device framework for Video for Linux 2 and videobuf.

 *

 * Helper functions for devices that use videobuf buffers for both their

 * source and destination.

 *

 * Copyright (c) 2009-2010 Samsung Electronics Co., Ltd.

 * Pawel Osciak, <pawel@osciak.com>

 * Marek Szyprowski, <m.szyprowski@samsung.com>

 Instance is already queued on the job_queue */

 Instance is currently running in hardware */

 Instance is currently aborting */

 The job queue is not running new jobs */

/* Offset base for buffers on the destination queue - used to distinguish

 * between source and destination buffers when mmapping - they receive the same

/**

 * struct v4l2_m2m_dev - per-device context

 * @source:		&struct media_entity pointer with the source entity

 *			Used only when the M2M device is registered via

 *			v4l2_m2m_unregister_media_controller().

 * @source_pad:		&struct media_pad with the source pad.

 *			Used only when the M2M device is registered via

 *			v4l2_m2m_unregister_media_controller().

 * @sink:		&struct media_entity pointer with the sink entity

 *			Used only when the M2M device is registered via

 *			v4l2_m2m_unregister_media_controller().

 * @sink_pad:		&struct media_pad with the sink pad.

 *			Used only when the M2M device is registered via

 *			v4l2_m2m_unregister_media_controller().

 * @proc:		&struct media_entity pointer with the M2M device itself.

 * @proc_pads:		&struct media_pad with the @proc pads.

 *			Used only when the M2M device is registered via

 *			v4l2_m2m_unregister_media_controller().

 * @intf_devnode:	&struct media_intf devnode pointer with the interface

 *			with controls the M2M device.

 * @curr_ctx:		currently running instance

 * @job_queue:		instances queued to run

 * @job_spinlock:	protects job_queue

 * @job_work:		worker to run queued jobs.

 * @job_queue_flags:	flags of the queue status, %QUEUE_PAUSED.

 * @m2m_ops:		driver callbacks

/*

 * Scheduling handlers

/**

 * v4l2_m2m_try_run() - select next job to perform and run it if possible

 * @m2m_dev: per-device context

 *

 * Get next transaction (if present) from the waiting jobs list and run it.

 *

 * Note that this function can run on a given v4l2_m2m_ctx context,

 * but call .device_run for another context.

/*

 * __v4l2_m2m_try_queue() - queue a job

 * @m2m_dev: m2m device

 * @m2m_ctx: m2m context

 *

 * Check if this context is ready to queue a job.

 *

 * This function can run in interrupt context.

 If the context is aborted then don't schedule it */

/**

 * v4l2_m2m_try_schedule() - schedule and possibly run a job for any context

 * @m2m_ctx: m2m context

 *

 * Check if this context is ready to queue a job. If suitable,

 * run the next queued job on the mem2mem device.

 *

 * This function shouldn't run in interrupt context.

 *

 * Note that v4l2_m2m_try_schedule() can schedule one job for this context,

 * and then run another job for another context.

/**

 * v4l2_m2m_device_run_work() - run pending jobs for the context

 * @work: Work structure used for scheduling the execution of this function.

/**

 * v4l2_m2m_cancel_job() - cancel pending jobs for the context

 * @m2m_ctx: m2m context with jobs to be canceled

 *

 * In case of streamoff or release called on any context,

 * 1] If the context is currently running, then abort job will be called

 * 2] If the context is queued, then the context will be removed from

 *    the job_queue

 Do nothing, was not on queue/running */

/*

 * Schedule the next job, called from v4l2_m2m_job_finish() or

 * v4l2_m2m_buf_done_and_job_finish().

	/*

	 * This instance might have more buffers ready, but since we do not

	 * allow more than one job on the job_queue per instance, each has

	 * to be scheduled separately after the previous one finishes.

	/*

	 * We might be running in atomic context,

	 * but the job must be run in non-atomic context.

/*

 * Assumes job_spinlock is held, called from v4l2_m2m_job_finish() or

 * v4l2_m2m_buf_done_and_job_finish().

	/*

	 * This function should not be used for drivers that support

	 * holding capture buffers. Those should use

	 * v4l2_m2m_buf_done_and_job_finish() instead.

	/*

	 * If the request API is being used, returning the OUTPUT

	 * (src) buffer will wake-up any process waiting on the

	 * request file descriptor.

	 *

	 * Therefore, return the CAPTURE (dst) buffer first,

	 * to avoid signalling the request file descriptor

	 * before the CAPTURE buffer is done.

	/* If count == 0, then the owner has released all buffers and he

 Adjust MMAP memory offsets for the CAPTURE queue */

/*

 * This will add the LAST flag and mark the buffer management

 * state as stopped.

 * This is called when the last capture buffer must be flagged as LAST

 * in draining mode from the encoder/decoder driver buf_queue() callback

 * or from v4l2_update_last_buf_state() when a capture buffer is available.

 When stop command is issued, update buffer management state */

	/*

	 * The processing of the last output buffer queued before

	 * the STOP command is expected to mark the buffer management

	 * state as stopped with v4l2_m2m_mark_stopped().

	/*

	 * In case the output queue is empty, try to mark the last capture

	 * buffer as LAST.

		/*

		 * Wait for the next queued one in encoder/decoder driver

		 * buf_queue() callback using the v4l2_m2m_dst_buf_is_last()

		 * helper or in v4l2_m2m_qbuf() if encoder/decoder is not yet

		 * streaming.

/*

 * Updates the encoding/decoding buffer management state, should

 * be called from encoder/decoder drivers start_streaming()

 If start streaming again, untag the last output buffer */

/*

 * Updates the encoding/decoding buffer management state, should

 * be called from encoder/decoder driver stop_streaming()

		/*

		 * If in draining state, either mark next dst buffer as

		 * done or flag next one to be marked as done either

		 * in encoder/decoder driver buf_queue() callback using

		 * the v4l2_m2m_dst_buf_is_last() helper or in v4l2_m2m_qbuf()

		 * if encoder/decoder is not yet streaming

	/*

	 * Since the buffer hasn't been queued to the ready queue,

	 * mark is active and owned before marking it LAST and DONE

	/*

	 * If the capture queue is streaming, but streaming hasn't started

	 * on the device, but was asked to stop, mark the previously queued

	 * buffer as DONE with LAST flag since it won't be queued on the

	 * device.

 wait until the current context is dequeued from job_queue */

 We should not be scheduled anymore, since we're dropping a queue. */

	/* Drop queue, since streamoff returns device to the same state as after

	/*

	 * There has to be at least one buffer queued on each queued_list, which

	 * means either in driver already or waiting for driver to claim it

	 * and start processing.

	/*

	 * If the last buffer was dequeued from the capture queue, signal

	 * userspace. DQBUF(CAPTURE) will return -EPIPE.

	/*

	 * poll_wait() MUST be called on the first invocation on all the

	 * potential queues of interest, even if we are not interested in their

	 * events during this first call. Failure to do so will result in

	 * queue's events to be ignored because the poll_table won't be capable

	 * of adding new wait queues thereafter.

	/* A memory-to-memory device consists in two

	 * DMA engine and one video processing entities.

	 * The DMA engine entities are linked to a V4L interface

 Create the three entities with their pads */

 Connect the three entities */

 Create video interface */

 Connect the two DMA engines to the interface */

	/*

	 * Both queues should use same the mutex to lock the m2m context.

	 * This lock is used in some v4l2_m2m_* helpers.

 wait until the current context is dequeued from job_queue */

	/*

	 * Queue all objects. Note that buffer objects are at the end of the

	 * objects list, after all other object types. Once buffer objects

	 * are queued, the driver might delete them immediately (if the driver

	 * processes the buffer at once), so we have to use

	 * list_for_each_entry_safe() to handle the case where the object we

	 * queue is deleted.

 Sanity checks */

		/*

		 * The buffer we queue here can in theory be immediately

		 * unbound, hence the use of list_for_each_entry_safe()

		 * above and why we call the queue op last.

 Videobuf2 ioctl helpers */

/*

 * Updates the encoding state on ENC_CMD_STOP/ENC_CMD_START

 * Should be called from the encoder driver encoder_cmd() callback

/*

 * Updates the decoding state on DEC_CMD_STOP/DEC_CMD_START

 * Should be called from the decoder driver decoder_cmd() callback

	/*

	 * If there is an out buffer pending, then clear any HOLD flag.

	 *

	 * By clearing this flag we ensure that when this output

	 * buffer is processed any held capture buffer will be released.

		/*

		 * If there were no output buffers, but there is a

		 * capture buffer that is held, then release that

		 * buffer.

/*

 * v4l2_file_operations helpers. It is assumed here same lock is used

 * for the output and the capture buffer queue.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * V4L2 sub-device

 *

 * Copyright (C) 2010 Nokia Corporation

 *

 * Contact: Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 *	    Sakari Ailus <sakari.ailus@iki.fi>

 CONFIG_VIDEO_V4L2_SUBDEV_API */

 CONFIG_VIDEO_V4L2_SUBDEV_API */

 allow pad 0 on subdevices not registered as media entities */

		/*

		 * TODO: this really should be folded into v4l2_queryctrl (this

		 * currently returns -EINVAL for NULL control handlers).

		 * However, v4l2_queryctrl() is still called directly by

		 * drivers as well and until that has been addressed I believe

		 * it is safer to do the check here. The same is true for the

		 * other control ioctls below.

 CONFIG_VIDEO_V4L2_SUBDEV_API */

 CONFIG_VIDEO_V4L2_SUBDEV_API */

 The width, height and code must match. */

	/* The field order must match, or the sink field order must be NONE

	 * to support interlaced hardware connected to bridges that support

	 * progressive formats only.

 CONFIG_MEDIA_CONTROLLER */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Video for Linux Two

 *

 *	A generic video device interface for the LINUX operating system

 *	using a set of device structures/vectors for low level operations.

 *

 *	This file replaces the videodev.c file that comes with the

 *	regular kernel distribution.

 *

 * Author:	Bill Dirks <bill@thedirks.org>

 *		based on code by Alan Cox, <alan@cymru.net>

/*

 * Video capture interface for Linux

 *

 *	A generic video device interface for the LINUX operating system

 *	using a set of device structures/vectors for low level operations.

 *

 * Author:	Alan Cox, <alan@lxorguk.ukuu.org.uk>

 *

 * Fixes:

/*

 * Video4linux 1/2 integration by Justin Schoeman

 * <justin@suntiger.ee.up.ac.za>

 * 2.4 PROCFS support ported from 2.4 kernels by

 *  Iñaki García Etxebarria <garetxe@euskalnet.net>

 * Makefile fix by "W. Michael Petullo" <mike@flyn.org>

 * 2.4 devfs support ported from 2.4 kernels by

 *  Dan Merillat <dan@merillat.org>

 * Added Gerd Knorrs v4l1 enhancements (Justin Schoeman)

/*

 *

 *	V 4 L 2   D R I V E R   H E L P E R   A P I

 *

/*

 *  Video Standard Operations (contributed by Michael Schimek)

 Helper functions for control handling			     */

 Fill in a struct v4l2_queryctrl */

/* Clamp x to be between min and max, aligned to a multiple of 2^align.  min

 * and max don't have to be aligned, but there must be at least one valid

 * value.  E.g., min=17,max=31,align=4 is not allowed as there are no multiples

 Bits that must be zero to be aligned */

 Clamp to aligned min and max */

 Round to nearest aligned value */

 Usually we don't need to align the size and are done now. */

 How much alignment do we have? */

 Enough to satisfy the image alignment? */

 Max walign where there is still a valid width */

 Max halign where there is still a valid height */

 up the smaller alignment until we have enough */

 RGB formats */

 YUV packed formats */

 YUV planar formats */

 Tiled YUV formats */

 YUV planar formats, non contiguous variant */

 Bayer RGB formats */

	/*

	 * Clamp width/height to meet min/max constraints and round it up to

	 * macroblock alignment.

 Single planar API cannot be used for multi plane formats. */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-only

/*

 * helper functions for physically contiguous capture buffers

 *

 * The functions support hardware lacking scatter gather support

 * (i.e. the buffers must be linear in physical memory)

 *

 * Copyright (c) 2008 Magnus Damm

 *

 * Based on videobuf-vmalloc.c,

 * (c) 2007 Mauro Carvalho Chehab, <mchehab@kernel.org>

 We need first to cancel streams, before unmapping */

				/* This callback is called only if kernel has

				   allocated memory and this memory is mmapped.

				   In this case, memory should be freed,

				   in order to do memory unmap.

				/* vfree is not atomic - can't be

				   called with IRQ's disabled

/**

 * videobuf_dma_contig_user_put() - reset pointer to user space buffer

 * @mem: per-buffer private videobuf-dma-contig data

 *

 * This function resets the user space pointer

/**

 * videobuf_dma_contig_user_get() - setup user space memory pointer

 * @mem: per-buffer private videobuf-dma-contig data

 * @vb: video buffer to map

 *

 * This function validates and sets up a pointer to user space memory.

 * Only physically contiguous pfn-mapped memory is accepted.

 *

 * Returns 0 if successful.

 kill warning */

 All handling should be done by __videobuf_mmap_mapper() */

 handle pointer from user space */

 allocate memory for the read() method */

 create mapping + update buffer list */

 Try to remap memory */

	/* the "vm_pgoff" is just used in v4l2 to find the

	 * corresponding buffer data structure which is allocated

	 * earlier and it does not mean the offset from the physical

	 * buffer start address as usual. So set it to 0 to pass

	 * the sanity check in vm_iomap_memory().

	/* mmapped memory can't be freed here, otherwise mmapped region

	   would be released, while still needed. In this case, the memory

	   release should happen inside videobuf_vm_close().

	   So, it should free memory only if the memory were allocated for

	   read() operation.

 handle user space pointer case */

 read() method */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008 Sensoray Company Inc.

 Should never happen */

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

/*

 * This file contains code to generate a firmware image for the GO7007SB

 * encoder.  Much of the firmware is read verbatim from a file, but some of

 * it concerning bitrate control and other things that can be configured at

 * run-time are generated dynamically.  Note that the format headers

 * generated here do not affect the functioning of the encoder; they are

 * merely parroted back to the host at the start of each frame.

 Constants used in the source firmware image to describe code segments */

 Little data class for creating MPEG headers bit-by-bit */

 destination */

 collects bits at the top of the variable */

 bit position of most recently-written bit */

 written out so far */

 Tables for creating the bitrate control data */

 MPEG blank frame generation tables */

 Standard JPEG tables */

/* Zig-zag mapping for quant table

 *

 * OK, let's do this mapping on the actual table above so it doesn't have

 * to be done on the fly.

 buf[p++] = (default_intra_quant_table[i] * q) >> 3; */

 keep the compiler happy */

 Is this supposed to be here?? */

 What is this?? */

 Byte-align with zeros */

 Byte-align with zeros */

 Byte-align with zeros */

 30 fps seems like a reasonable default */

 Byte-align with zeros */

 Byte-align with zeros */

 Byte-align with zeros */

 keep compiler quiet */

 Byte-align with a zero followed by ones */

 Byte-align */

 Bizarre math below depends on rounding errors in division */

 Remove once we don't care about matching */

	(1 << 9) |   */

 holds the lengths of empty frame templates */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008 Sensoray Company Inc.

/*

 * Note: this board has two i2c devices: a vpx3226f and a tlv320aic23b.

 * Due to the unusual way these are accessed on this device we do not

 * reuse the i2c drivers, but instead they are implemented in this

 * driver. It would be nice to improve on this, though.

 PAL specific values */

 from go7007-usb.c which is Copyright (C) 2005-2006 Micronas USA Inc.*/

 end from go7007-usb.c which is Copyright (C) 2005-2006 Micronas USA Inc.*/

 firmware wants 8-bit address */

 save last 12b value */

 ------------------------------------------------------------------------- */

 composite */

 S-Video */

 Line In */

 Mic */

 Mic Boost */

 --------------------------------------------------------------------------*/

 --------------------------------------------------------------------------*/

 initialize the audio */

 set default channel */

 composite */

 set default audio input */

 Line In */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

		/* Just set a flag to indicate we should signal ALSA when

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

******************** Driver for on-board I2C adapter *********************/

 #define GO7007_I2C_DEBUG */

/* There is only one I2C port on the TW2804 that feeds all four GO7007 VIPs

 Bridge the I2C port on this GO7007 to the shared bus */

 Wait for I2C adapter to be ready */

 Set target register (command) */

 If we're writing, send the data and target address and we're done */

 Otherwise, we're reading.  First clear i2c_rx_data_rdy. */

 Send the target address plus read flag */

 Wait for i2c_rx_data_rdy */

 Retrieve the read byte */

 Isolate the I2C port on this GO7007 from the shared bus */

/* VERY LIMITED I2C master xfer function -- only needed because the

 * SMBus functions only support 8-bit commands and the SAA7135 uses

 * 16-bit commands.  The I2C interface on the GO7007, as limited as

		/* We can only do two things here -- write three bytes, or

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

		/* For future reference: this is the list of MPEG4

		 * profiles that are available, although they are

		 * untested:

		 *

		 * Profile		pali

		 * --------------	----

		 * PROFILE_S_L0		0x08

		 * PROFILE_S_L1		0x01

		 * PROFILE_S_L2		0x02

		 * PROFILE_S_L3		0x03

		 * PROFILE_ARTS_L1	0x91

		 * PROFILE_ARTS_L2	0x92

		 * PROFILE_ARTS_L3	0x93

		 * PROFILE_ARTS_L4	0x94

		 * PROFILE_AS_L0	0xf0

		 * PROFILE_AS_L1	0xf1

		 * PROFILE_AS_L2	0xf2

		 * PROFILE_AS_L3	0xf3

		 * PROFILE_AS_L4	0xf4

		 * PROFILE_AS_L5	0xf5

 Turn on Capture LED */

 Turn on Capture LED */

/* VIDIOC_ENUMSTD on go7007 were used for enumerating the supported fps and

   its resolution, when the device is not connected to TV.

   This is were an API abuse, probably used by the lack of specific IOCTL's to

   enumerate it, by the time the driver was written.



   However, since kernel 2.6.19, two new ioctls (VIDIOC_ENUM_FRAMEINTERVALS

   and VIDIOC_ENUM_FRAMESIZES) were added for this purpose.



   The two functions below implement the newer ioctls

 If this board has a tuner, it will be the first input */

		/* Allow for up to 30 events (1 second for NTSC) to be

 Setup correct crystal frequency on this board */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

 #define GO7007_I2C_DEBUG */ 
/*

 * Pipes on EZ-USB interface:

 *	0 snd - Control

 *	0 rcv - Control

 *	2 snd - Download firmware (control)

 *	4 rcv - Read Interrupt (interrupt)

 *	6 rcv - Read Video (bulk)

 *	8 rcv - Read Audio (bulk)

********************** Product specification data ***********************/

		.flags		 = GO7007_BOARD_HAS_AUDIO, /* |

		/*	{

		 *		.video_input	= 3,

		 *		.audio_index	= AUDIO_TUNER,

		 *		.name		= "Tuner",

		 *	},

	.audio_index	= AUDIO_EXTERN, */

	.audio_index	= AUDIO_EXTERN, */

 yes, really */

 Vendor ID of WIS Technologies */

 Product ID of GO7007SB chip */

 Revision number of XMen */

 Vendor ID of WIS Technologies */

 Product ID of GO7007SB chip */

 Revision number of Matrix II */

 Vendor ID of WIS Technologies */

 Product ID of GO7007SB chip */

 Revision number of Matrix */

     Reloaded */

 Vendor ID of WIS Technologies */

 Product ID of GO7007SB chip */

 Revision number of XMen-II */

 Vendor ID of WIS Technologies */

 Product ID of GO7007SB chip */

 Revision number of Star Trek */

 Vendor ID of WIS Technologies */

 Product ID of GO7007SB chip */

 Revision number of XMen-III */

 Vendor ID of WIS Technologies */

 Product ID of GO7007SB chip */

 Revision number of Matrix */

     Revolution */

 Vendor ID of Plextor */

 Product ID of M402U */

 revision number of Blueberry */

 Vendor ID of Plextor */

 Product ID of TV402U */

 Vendor ID of Anubis Electronics */

 Product ID of Lifeview LR192 */

 Vendor ID Sensoray */

 Product ID of 2250/2251 */

 Vendor ID of ADS Technologies */

 Product ID of DVD Xpress DX2 */

 Terminating entry */

******************** Driver for EZ-USB HPI interface *********************/

 Reset encoder */

 Reset buffer in EZ-USB */

 Reset encoder again */

 Wait for an interrupt to indicate successful hardware reset */

 Free USB-related structs */

******************** Driver for EZ-USB I2C adapter *********************/

		/* The hardware command is "write some bytes then read some

		 * bytes", so we try to coalesce a write followed by a read

	/* No errors are reported by the hardware, so we don't bother

******************** USB add/remove functions *********************/

 Allocate the URB and buffer for receiving incoming interrupts */

 Boot the GO7007 */

 Register the EZ-USB I2C adapter, if we're using it */

	/* Pelco and Adlink reused the XMen and XMen-III vendor and product

	 * IDs for their own incompatible designs.  We can detect XMen boards

	 * by probing the sensor, but there is no way to probe the sensors on

	 * the Pelco and Adlink designs so we default to the Adlink.  If it

	 * is actually a Pelco, the user must set the assume_endura module

 Check to see if register 0x0A is 0x76 */

 read channel number from GPIO[1:0] */

 Probe the tuner model on the TV402U */

 Board strapping indicates tuner model */

		/* Configure tuner mode selection inputs connected

	/* Print a nasty message if the user attempts to use a USB2.0 device in

 Allocate the URBs and buffers for receiving the video stream */

 Allocate the URBs and buffers for receiving the audio stream */

	/* Do any final GO7007 initialization, then register the

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

/*

 * Wait for an interrupt to be delivered from the GO7007SB and return

 * the associated value and data.

 *

 * Must be called with the hw_lock held.

/*

 * Read a register/address on the GO7007SB.

 *

 * Must be called with the hw_lock held.

/*

 * Send the boot firmware to the encoder, which just wakes it up and lets

 * us talk to the GPIO pins and on-board I2C adapter.

 *

 * Must be called with the hw_lock held.

/*

 * Boot the encoder and register the I2C adapter if requested.  Do the

 * minimum initialization necessary, since the board-specific code may

 * still need to probe the board ID.

 *

 * Must NOT be called with the hw_lock held.

/*

 * Configure any hardware-related registers in the GO7007, such as GPIO

 * pins and bus parameters, which are board-specific.  This assumes

 * the boot firmware has already been downloaded.

 *

 * Must be called with the hw_lock held.

 Set GPIO pin 0 to be an output (audio clock control) */

 set GPIO5 to be an output, currently low */

 GPIO pin 0: audio clock control */

      pin 2: TW9906 reset */

      pin 3: capture LED */

/*

 * Send the boot firmware to the GO7007 and configure the registers.  This

 * is the only way to stop the encoder once it has started streaming video.

 *

 * Must be called with the hw_lock held.

/*

 * Attempt to instantiate an I2C client by ID, probably loading a module.

/*

 * Detach and unregister the encoder.  The go7007 struct won't be freed

 * until v4l2 finishes releasing its resources and all associated fds are

 * closed by applications.

/*

 * Finalize the GO7007 hardware setup, register the on-board I2C adapter

 * (if used on this board), load the I2C client driver for the sensor

 * (SAA7115 or whatever) and other devices, and register the ALSA and V4L2

 * interfaces.

 *

 * Must NOT be called with the hw_lock held.

 Reset the TW9906 */

/*

 * Send the encode firmware to the encoder, which will cause it

 * to immediately start delivering the video and audio streams.

 *

 * Must be called with the hw_lock held.

/*

 * Store a byte in the current video buffer, if there is one.

/*

 * Determine regions with motion and send a motion detection event

 * in case of changes.

/*

 * Deliver the last video buffer and get a new one to start writing to.

/*

 * Parse a chunk of the video stream into frames.  The frames are not

 * delimited by the hardware, so we have to parse the frame boundaries

 * based on the type of video stream we're receiving.

 go->state remains STATE_00_00 */

 MODET start code, but MODET not enabled */

			/* If this is the start of a new MPEG frame,

			/* Handle any special chunk types, or just write the

 timestamp */

 vbi */

 MD map */

 Potential JPEG start code */

 go->state remains STATE_FF */

/*

 * Allocate a new go7007 struct.  Used by the hardware-specific probe.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  s2255drv.c - a driver for the Sensoray 2255 USB video capture device

 *

 *   Copyright (C) 2007-2014 by Sensoray Company Inc.

 *                              Dean Anderson

 *

 * Some video buffer code based on vivi driver:

 *

 * Sensoray 2255 device supports 4 simultaneous channels.

 * The channels are not "crossbar" inputs, they are physically

 * attached to separate video decoders.

 *

 * Because of USB2.0 bandwidth limitations. There is only a

 * certain amount of data which may be transferred at one time.

 *

 * Example maximum bandwidth utilization:

 *

 * -full size, color mode YUYV or YUV422P: 2 channels at once

 * -full or half size Grey scale: all 4 channels at once

 * -half size, color mode YUYV or YUV422P: all 4 channels at once

 * -full size, color mode YUYV or YUV422P 1/2 frame rate: all 4 channels

 *  at once.

 default JPEG quality */

 vendor request in */

 vendor request out */

 firmware query */

 USB endpoint number for configuring the device */

 maximum time for DSP to start responding after last FW word loaded(ms) */

 maximum time to wait for firmware to load (ms) */

 maximum size is PAL full size plus room for the marker header(s) */

 predefined settings */

 640x480(NTSC) or 704x576(PAL) */

 640x240(NTSC) or 704x288(PAL) */

 320x240(NTSC) or 352x288(PAL) */

 SCALE_4CIFSI is the 2 fields interpolated into one */

 640x480(NTSC) or 704x576(PAL) high quality */

 YUV planar */

 YUV packed */

 monochrome */

 JPEG */

 frame decimation. */

 capture every frame. default */

 capture every 2nd frame */

 capture every 3rd frame */

 capture every 5th frame */

/*-------------------------------------------------------

 * Default mode parameters.

 usb config commands */

 input video format (NTSC, PAL) */

 output video scale */

 output video color format */

 frame decimation */

 brightness */

 contrast */

 saturation */

 hue (NTSC only)*/

 capture 1 frame at a time (!=0), continuously (==0)*/

 block size. should be 4096 of DEF_USB_BLOCK */

 if DSP requires restart */

 frame structure */

 ulState:S2255_READ_IDLE, S2255_READ_FRAME*/

 image data */

 current data copied to it */

 image buffer structure */

 number of frames in buffer */

 array of FRAME structures */

 for firmware loading, fw_state */

 2255 read states */

 back pointer to s2255_dev struct*/

forward declaration */

 2255 video channel */

 jpeg compression */

 capture parameters (for high quality mode full size) */

 allocated image size */

 received packet size */

 if JPEG image */

 if channel configured to default state */

 video status items */

 channel number on device, 0-3 */

 streaming lock */

 channels[].vdev.lock */

 protects cmdbuf */

 current channel */

 dsp firmware version (f2255usb.bin) */

 product id */

 buffer for one video frame */

 common v4l buffer stuff -- must be first */

 current cypress EEPROM firmware version */

 current DSP FW version */

 Need DSP version 5+ for video status feature */

 private V4L2 controls */

/*

 * The following chart displays how COLORFILTER should be set

 *  =========================================================

 *  =     fourcc              =     COLORFILTER             =

 *  =                         ===============================

 *  =                         =   0             =    1      =

 *  =========================================================

 *  =  V4L2_PIX_FMT_GREY(Y8)  = monochrome from = monochrome=

 *  =                         = s-video or      = composite =

 *  =                         = B/W camera      = input     =

 *  =========================================================

 *  =    other                = color, svideo   = color,    =

 *  =                         =                 = composite =

 *  =========================================================

 *

 * Notes:

 *   channels 0-3 on 2255 are composite

 *   channels 0-1 on 2257 are composite, 2-3 are s-video

 * If COLORFILTER is 0 with a composite color camera connected,

 * the output will appear monochrome but hatching

 * will occur.

 * COLORFILTER is different from "color killer" and "color effects"

 * for reasons above.

 frame prefix size (sent once every frame) */

 Channels on box are in reverse order */

 dev_err macro with driver name */

 start video number */

 /dev/videoN, -1 for autodetect */

 Enable jpeg capture. */

 USB device table */

same family as 2255*/

 Terminating entry */

 image formats.  */

 JPEG formats must be defined last to support jpeg_enable parameter */

/*

 * TODO: fixme: move YUV reordering to hardware

 * converts 2255 planar format to yuyv or uyvy

/* kickstarts the firmware loading. from probe

 wake up anything waiting for the firmware */

/* this loads the firmware asynchronously.

   Originally this was done synchronously in probe.

   But it is better to load it asynchronously here than block

   inside the probe function. Blocking inside probe affects boot time.

   FW loading is triggered by the timer in the probe function

 wake up anything waiting for the firmware */

 wake up anything waiting for the firmware */

	/* all USB transfers must be done with continuous kernel memory.

	   can't allocate more than 128k in current linux kernel, so

	   upload the firmware in chunks

 wake up anything waiting for the firmware */

 tell v4l buffer was filled */

/* video buffer vmalloc implementation based partly on VIVI driver which is

 *          Copyright (c) 2006 by

 *                  Mauro Carvalho Chehab <mchehab--a.t--infradead.org>

 *                  Ted Walther <ted--a.t--enumera.com>

 *                  John Sokol <sokol--a.t--videotechnology.com>

 *                  http://v4l.videotechnology.com/

 *

/* ------------------------------------------------------------------

   Videobuf operations

 NTSC */

 PAL */

 color mode */

 write to the configuration pipe, synchronously */

 2 bytes/pixel if not monochrome */

	/* total bytes to send including prefix and 4K padding;

 always send prefix */

 if size not a multiple of USB_READ_SIZE */

/*

 * set mode is the function which controls the DSP.

 * the restart parameter in struct s2255_mode should be set whenever

 * the image size could change via color format, video system or image

 * size.

 * When the restart parameter is set, we sleep for ONE frame to allow the

 * DSP time to get the new frame

 if JPEG, set the quality */

 save the mode */

 set the mode */

 wait at least 3 frames before continuing */

 clear the restart flag */

 form the get vid status command */

 abort streaming and wait for last buffer */

	/*

	 * Changing the standard implies a format change, which is not allowed

	 * while buffers for use with streaming have already been allocated.

 if changing format, reset frame decimation/intervals */

/* Sensoray 2255 is a multiple channel capture device.

   It does not have a "crossbar" of inputs.

   We use one V4L device per channel. The user must

   be aware that certain combinations are not allowed.

   For instance, you cannot do full FPS on more than 2 channels(2 videodevs)

   at once in color(you can do full fps on 4 channels with greyscale.

 update the mode to the corresponding value */

	/* set mode here.  Note: stream does not need restarted.

	   some V4L programs restart stream unnecessarily

	   after a s_crtl.

 high quality capture mode requires a stream restart */

 state may have changed, re-read */

		/* give S2255_LOAD_TIMEOUT time for firmware to load in case

 state may have changed, re-read */

 state may have changed in above switch statement */

		/*

		 * Timeout on firmware load means device unusable.

		 * Set firmware failure state.

		 * On next s2255_open the firmware will be reloaded.

 configure channel to default state */

 board shutdown stops the read pipe if it is running */

 make sure firmware still not trying to load */

 only started in .probe and .open */

 reset the DSP so firmware can be reloaded next time */

 V4L2 ioctl handler */

 initialize all video 4 linux */

 register 4 video devices */

 register video devices */

 if no channels registered, return error and probe will fail*/

/* this function moves the usb stream read pipe data

 * into the system buffers.

 * returns 0 on success, EAGAIN if more data to process( call this

 * function again).

 *

 * Received frame structure:

 * bytes 0-3:  marker : 0x2255DA4AL (S2255_MARKER_FRAME)

 * bytes 4-7:  channel: 0-3

 * bytes 8-11: payload size:  size of the frame

 * bytes 12-payloadsize+12:  frame data

data from dsp is little endian */

 search for marker codes */

 reverse it */

 discard the bad frame */

 check if channel valid */

 set mode ready */

 all channels ready */

 for */

 search done.  now find out if should be acquiring on this channel */

 we found a frame, but this channel is turned off */

 skip the marker 512 bytes (and offset if out of sync) */

 sanity check on pdest */

 end of system frame ring buffer, start at zero */

 frame ready */

 done successfully */

 otherwise copy to the system buffers */

/*

 * retrieve FX2 firmware version. future use.

 * @param dev pointer to device extension

 * @return -1 for fail, else returns firmware version as an int(16 bits)

/*

 * Create the system ring buffer to copy frames into from the

 * usb read pipe.

 always allocate maximum size(PAL) for system buffers */

 allocate the frames */

 make sure internal states are set */

 query the firmware */

 create the system buffers */

 start read pipe */

 release transfer buffer */

 if shutting down, do not resubmit, exit immediately */

 reuse urb */

 transfer buffer allocated in board_init */

 starts acquisition process */

 send the start command */

 send the stop command */

 cancel urb */

 standard usb probe function */

 allocate memory for our device state and initialize it to zero */

 grab usb_device and save it */

 set up the endpoint information  */

 we found the bulk in endpoint */

 load the first chunk */

 check the firmware is valid */

 make sure firmware is the latest */

 load 2255 board specific */

 loads v4l specific */

 disconnect routine. when board is removed physically or with rmmod */

see comments in the uvc_driver.c usb disconnect function */

 unregister each video device. */

 wake up any of our timers */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   cx231xx-core.c - driver for Conexant Cx23100/101/102

				USB video capture devices



   Copyright (C) 2008 <srinivasa.deevi at conexant dot com>

				Based on em28xx driver



 #define ENABLE_DEBUG_ISOC_FRAMES */

/*****************************************************************

*             Device control list functions					 *

/*

 * cx231xx_realease_resources()

 * unregisters the v4l2,i2c and usb devices

 * called when the device gets disconnected or at module unload

/****************************************************************

*               U S B related functions                         *

 Get the I2C period, nostop and reserve parameters */

 Set wValue */

 set channel number */

 channel number, for read,spec required channel_num +4 */

 channel number,  */

 set index value */

 need check */

 set wLength value */

 set bData value */

 set the direction */

 set the buffer for read / write */

 call common vendor command request */

/*

 * Sends/Receives URB control messages, assuring to use a kalloced buffer

 * for all operations (dev->urb_buf), to avoid using stacked buffers, as

 * they aren't safe for usage with USB, due to DMA restrictions.

 * Also implements the debug code for control URB's.

 Do the real call to usb_control_msg */

/*

 * cx231xx_read_ctrl_reg()

 * reads data from the usb device specifying bRequest and wValue

 invalid option */

	/*

	 * If the cx23102 read more than 4 bytes with i2c bus,

	 * need chop to 4 byte per request

					/* Internal Master 3 Bus can send

					 * and receive only 4 bytes per time

 the first package */

 the middle package */

 the last package */

/*

 * cx231xx_write_ctrl_reg()

 * sends data to the usb device, specifying bRequest

 invalid option */

/****************************************************************

*           USB Alternate Setting functions                     *

	/* When image size is bigger than a certain value,

	   the frame size should be increased, otherwise, only

	   green screen will be received.

 resolutions: 720,704,640 */

 resolutions: 360,352,320,240 */

 resolutions: 180,176,160,128,88 */

 Change to alt0 BULK to release USB bandwidth */

 Get the correct video interface Index */

		/*To workaround error number=-71 on EP0 for videograbber,

 Send GPIO reset sequences specified at board entry */

 Set the chip in power saving mode */

 Resource is locked */

 Set Digital power mode */ {

 set AGC mode to Digital */

 Set Analog Power mode */ {

 set AGC mode to Analog */

/*****************************************************************

*                URB Streaming functions                         *

/*

 * IRQ callback, called by URB callback

 success */

 NAK */

 kill */

 error */

 Copy data from URB */

 Reset urb buffers */

/*****************************************************************

*                URB Streaming functions                         *

/*

 * IRQ callback, called by URB callback

 success */

 NAK */

 kill */

 stall */

 error */

 Copy data from URB */

 Reset urb buffers */

/*

 * Stop and Deallocate URBs

/*

 * Stop and Deallocate URBs

/*

 * Allocate URBs and start IRQ

 De-allocates all pending stuff */

 allocate urbs and transfer buffers */

 submit urbs and enables IRQ */

/*

 * Allocate URBs and start IRQ

 De-allocates all pending stuff */

 allocate urbs and transfer buffers */

 clear halt */

 submit urbs and enables IRQ */

 EXPORT_SYMBOL_GPL(cx231xx_stop_TS1); */

 EXPORT_SYMBOL_GPL(cx231xx_start_TS1); */

/*****************************************************************

*             Device Init/UnInit functions                       *

 Initialize I2C bus */

 External Master 1 Bus */

 100 KHz */

 External Master 2 Bus */

 100 KHz */

 Internal Master 3 Bus */

 100kHz */

 register I2C buses */

 scan the real bus segments in the order of physical port numbers */

 init hardware */

	/* Note : with out calling set power mode function,

 reset the Tuner, if it is a Xceive tuner */

 initialize Colibri block */

 Set DIF in By pass mode */

 I2S block related functions */

 init control pins */

 set AGC mode to Analog */

 set all alternate settings to zero initially */

 Un Initialize I2C bus */

/*****************************************************************

*              G P I O related functions                         *

 Set wValue */

 set request */

 0x9 gpio */

 0x8 gpio */

 0xb gpie */

 0xa gpie */

 set index value */

 set wLength value */

 set bData value */

 set the buffer for read / write */

 set the direction */

 call common vendor command request */

/*****************************************************************

 *    C O N T R O L - Register R E A D / W R I T E functions     *

/*****************************************************************

 *            I 2 C Internal C O N T R O L   functions           *

 prepare xfer_data struct */

 usb send command */

 Copy the data read back to main buffer */

 prepare xfer_data struct */

 usb send command */

 prepare xfer_data struct */

 usb send command */

 Copy the data read back to main buffer */

 prepare xfer_data struct */

 usb send command */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   cx231xx-video.c - driver for Conexant Cx23100/101/102

		     USB video capture devices



   Copyright (C) 2008 <srinivasa.deevi at conexant dot com>

	Based on em28xx driver

	Based on cx23885 driver

	Based on cx88 driver



 supported video standards */

	/*

	 * This will find the tuner that is connected into the decoder.

	 * Technically, this is not 100% correct, as the device may be

	 * using an analog input instead of the tuner. However, as we can't

	 * do DVB streaming while the DMA engine is being used for V4L2,

	 * this should be enough for the actual needs.

/* ------------------------------------------------------------------

	Video buffer and parser functions

/*

 * Announces that a buffer were filled and request the next

 Advice that buffer was filled */

/*

 * video-buf generic routine to get the next available buffer

 Get the next buffer */

 Cleans up buffer - Useful for testing for frame/URB loss */

/*

 * Controls the isoc copy of each urb packet

 cx231xx_isocdbg("packet %d is empty",i); - spammy */

  get buffer pointer and length */

 Handle the case of a partial line */

			/* Check for a SAV/EAV overlapping

		/* Get the first line if we have some portion of an SAV/EAV from

 SAV/EAV */

 p_buffer */

 buf size */

 Now parse data that is completely in this buffer */

 dma_q->is_partial_line = 0;  */

 p_buffer */

 buf size */

 bytes used to get SAV/EAV */

 SAV/EAV */

 p_buffer */

buf size*/

		/* Save the last four bytes of the buffer so we can check the

  get buffer pointer and length */

 Handle the case of a partial line */

			/* Check for a SAV/EAV overlapping

		/* Get the first line if we have some portion of an SAV/EAV from

 SAV/EAV */

 p_buffer */

 buf size */

 Now parse data that is completely in this buffer */

 dma_q->is_partial_line = 0;  */

 p_buffer */

 buf size */

 bytes used to get SAV/EAV */

 SAV/EAV */

 p_buffer */

buf size*/

		/* Save the last four bytes of the buffer so we can check the

	/* Create an array of the last 4 bytes of the last buffer and the first

 Check for the SAV/EAV in the boundary buffer */

		/* found a boundary SAV/EAV.  Updates the bytes used to reflect

	/*

	 * Don't search if the buffer size is less than 4.  It causes a page

	 * fault since buffer_size - 4 evaluates to a large number in that

	 * case.

		/* looking for skipped line which occurred in PAL 720x480 mode.

		   In this case, there will be no active data contained

		/* looking for skipped line which occurred in PAL 720x480 mode.

		   In this case, there will be no active data contained between

 get the buffer pointer */

 Remember the field number for next time */

	/* If we don't have a buffer, just return the number of bytes we would

 copy the data to video buffer */

 handle the switch from field 1 to field 2 */

 first try to get the buffer */

 reset the counters */

 Offset field 2 one line from the top of the buffer */

 Offset for field 2 */

 lines already completed in the current field */

 bytes already completed in the current line */

 The below copies the UYVY data straight into video buffer */

 Dual field stream */

/* ------------------------------------------------------------------

	Videobuf operations

********************  v4l2 interface  **************************************/

 do mode control overrides if required */

/* ------------------------------------------------------------------

	IOCTL vidioc handling

	/* width must even because of the YUYV format

 set new image size */

 Adjusts width/height, if needed */

	/* We need to reset basic properties in the decoder related to

	   resolution (since a standard change effects things like the number

 do mode control overrides */

 Create entities for each input connector */

 The DVB core will handle it */

 just to shut up a gcc warning */

 If they are asking about the active input, read signal status */

		/* There's a tuner, so reset the standard and put it on the

		   last known frequency (since it was probably powered down

 LOCKED */

 set pre channel change settings in DIF first */

 i2c device tuners */

 set post channel change settings in DIF first */

5.4MHz	*/

6.0MHz	*/

6.9MHz	*/

7.1MHz	*/

7.25MHz	*/

6.9MHz	*/

1.25MHz	*/

 Cx231xx - internal registers */

 AFE - read byte */

 Video Block - read byte */

 I2S block - read byte */

 AFE - read dword */

 Video Block - read dword */

 I2S Block - read dword */

 Cx231xx - internal registers */

 AFE - read byte */

 Video Block - read byte */

 I2S block - read byte */

 AFE - read dword */

 Video Block - read dword */

 I2S Block - read dword */

 cx231xx internal registers */

 AFE - write byte */

 Video Block - write byte */

 I2S block - write byte */

 AFE - write dword */

 Video Block - write dword */

 I2S block - write dword */

 RAW VBI ioctls */

 ----------------------------------------------------------- */

 RADIO ESPECIFIC IOCTLS                                      */

 ----------------------------------------------------------- */

/*

 * cx231xx_v4l2_open()

 * inits the device and starts isoc transfer

 Power up in Analog TV mode */

 set video alternate setting */

		/* Needed, since GPIO might have disabled power of

 device needs to be initialized before isoc transfer */

 cx231xx_start_radio(dev); */

		/* Set the required alternate setting  VBI interface works in

/*

 * cx231xx_realease_resources()

 * unregisters the v4l2,i2c and usb devices

 * called when the device gets disconnected or at module unload

FIXME: I2C IR should be disconnected */

/*

 * cx231xx_close()

 * stops streaming and deallocates all resources allocated by the v4l2

 * calls and ioctls

 Save some power by putting tuner to sleep */

 do this before setting alternate! */

	/*

	 * To workaround error number=-71 on EP0 for VideoGrabber,

	 *	 need exclude following.

	 * FIXME: It is probably safe to remove most of these, as we're

	 * now avoiding the alternate setting for INDEX_VANC

 do this before setting alternate! */

 set alternate 0 */

 set alternate 0 */

******************************* usb interface ******************************/

 set default norm */

 Analog specific initialization */

 Set the initial input */

 enable vbi capturing */

 write code here...  */

 allocate and fill video video_device struct */

 i2c device tuners */

 register v4l2 video video_device */

 Initialize VBI template */

 Allocate and fill vbi video_device struct */

 i2c device tuners */

 register v4l2 vbi video_device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   cx231xx-i2c.c - driver for Conexant Cx23100/101/102 USB video capture devices



   Copyright (C) 2008 <srinivasa.deevi at conexant dot com>

		Based on em28xx driver

		Based on Cx23885 driver



 ----------------------------------------------------------- */

/*

 * cx231xx_i2c_send_bytes()

 register write sub addr */

			/* Just writing sub address will cause problem

 register write with sub addr */

 start tuner calibration mode */

 FW Loading is done */

 Set signal source */

 Set TV standard - Video */

 Set TV standard - Audio */

 Set RF Frequency */

 special case for Xc5000 tuner case */

 adjust the length to correct length */

 prepare xfer_data struct */

 usb send command */

 regular case */

 prepare xfer_data struct */

 usb send command */

/*

 * cx231xx_i2c_recv_bytes()

 * read a byte from the i2c device

 BUSY check */

Try read BUSY register, just set it to zero*/

 read Lock status */

				/* this is a special case to handle Xceive tuner

 prepare xfer_data struct */

 usb send command */

 prepare xfer_data struct */

 usb send command */

/*

 * cx231xx_i2c_recv_bytes_with_saddr()

 * read a byte from the i2c device

 read FW load status */

 read Lock status */

 prepare xfer_data struct */

 usb send command */

/*

 * cx231xx_i2c_check_for_device()

 * check if there is a i2c_device at the supplied address

 prepare xfer_data struct */

 usb send command */

/*

 * cx231xx_i2c_xfer()

 * the main i2c transfer function

 no len: check only for device presence */

 read bytes */

 write bytes */

 read bytes */

 write bytes */

 ----------------------------------------------------------- */

/*

 * functionality()

 ----------------------------------------------------------- */

/*

 * i2c_devs

 * incomplete list of known devices

/*

 * cx231xx_do_i2c_scan()

 * check i2c address range for devices

 Don't generate I2C errors during scan */

/*

 * cx231xx_i2c_register()

 * register i2c bus

/*

 * cx231xx_i2c_unregister()

 * unregister i2c_bus

/*

 * cx231xx_i2c_mux_select()

 * switch i2c master number 1 between port1 and port3

 chan_id */,

 class */);

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 DVB device driver for cx231xx



 Copyright (C) 2008 <srinivasa.deevi at conexant dot com>

		Based on em28xx driver



 feed count management */

 general boilerplate stuff */

 0x74 >> 1 */

 Feed the transport payload into the kernel demux */

 ------------------------------------------------------------------ */

 ------------------------------------------------------------------ */

 ------------------------------------------------------------------ */

 0- Air; 1 - cable */

params.audmode = ;       */

 Set the analog parameters to set the frequency */

 ------------------------------------------------------------------ */

 register adapter */

 Ensure all frontends negotiate bus access */

 register frontend */

 MFE lock */

 register demux stuff */

 register network adapter */

 remove I2C tuner */

 remove I2C demod(s) */

 This device does not support the extension */

 init frontend */

 define general-purpose callback pointer */

 define general-purpose callback pointer */

 define general-purpose callback pointer */

 define general-purpose callback pointer */

 define general-purpose callback pointer */

 attach demod */

 perform probe/init/attach */

 define general-purpose callback pointer */

 attach demod */

 perform probe/init/attach */

 define general-purpose callback pointer */

 attach tuner */

 perform probe/init/attach */

 perform probe/init/attach */

 define general-purpose callback pointer */

 attach tuner */

 perform probe/init/attach */

 define general-purpose callback pointer */

 attach demodulator chip */

 from *.inf file */

 perform probe/init/attach */

 attach tuner chip */

 perform probe/init/attach */

 attach demodulator chip */

 perform probe/init/attach */

 define general-purpose callback pointer */

 attach tuner chip */

 attach demodulator chip */

 perform probe/init/attach */

 define general-purpose callback pointer */

 attach tuner */

 perform probe/init/attach */

 attach first demodulator chip */

 perform probe/init/attach */

 attach second demodulator chip */

 perform probe/init/attach */

 define general-purpose callback pointer */

 attach tuner */

 perform probe/init/attach */

 register everything */

 remove I2C tuner */

 remove I2C demod(s) */

 This device does not support the extension */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   cx231xx-cards.c - driver for Conexant Cx23100/101/102

				USB video capture devices



   Copyright (C) 2008 <srinivasa.deevi at conexant dot com>

				Based on em28xx driver



 Bitmask marking allocated devices from 0 to CX231XX_MAXBOARDS */

/*

 *  Reset sequences for analog/digital modes

/*

 *  Board definitions

		/* Actually, it has a 417, but it isn't working correctly.

		 * So set to 0 for now until someone can manage to get this

 According with PV cxPolaris.inf file */

 According with PV cxPolaris.inf file */

 According with PV CxPlrCAP.inf file */

.has_417 = 1, */

		/* This board is believed to have a hardware encoding chip

		 * supporting mpeg1/2/4, but as the 417 is apparently not

 0xc8 >> 1 */

 0xc8 >> 1 */

 0xb2 >> 1 */

 0xc8 >> 1 */

 0xc0 >> 1 */

 0x30 >> 1 */

 0x74 >> 1 */

 0xc8 >> 1 */

 0xb2 >> 1 */

 0xc8 >> 1 */

 table of devices that work with this driver */

 AverMedia DVD EZMaker 7 */

 Hauppauge WinTV-HVR-900-H */

 Hauppauge WinTV-HVR-901-H */

 PCTV QuatroStick 521e */

 PCTV QuatroStick 522e */

/* cx231xx_tuner_callback

 * will be used to reset XC5000 tuner using GPIO pin

/* Since cx231xx_pre_card_setup() requires a proper dev->model,

 * this won't work for boards with generic PCI IDs

 turn on demodulator chip */

 set the direction for GPIO pins */

 request some modules if any required */

 set the mode to Analog mode initially */

 Unlock device */

 cx231xx_set_mode(dev, CX231XX_SUSPEND); */

 configure tuner */

 just a magic number */

 start reading at offset 0 */

 request some modules */

 Initialize the tuner */

/*

 * cx231xx_config()

 * inits registers with sane defaults

 TBD need to add cx231xx specific code */

/*

 * cx231xx_config_i2c()

 * configure i2c attached devices

 u32 input = INPUT(dev->video_input)->vmux; */

/*

 * cx231xx_realease_resources()

 * unregisters the v4l2,i2c and usb devices

 * called when the device gets disconnected or at module unload

 Release I2C buses */

 delete v4l2 device */

 Mark device as unused */

/*

 * cx231xx_init_dev()

 * allocates and inits the device structs, registers i2c bus and v4l device

 Query cx231xx to find what pcb config it is related to */

	/*To workaround error number=-71 on EP0 for VideoGrabber,

 Cx231xx pre card setup */

 set default norm */

 register i2c bus */

 Do board specific init */

 configure the device */

 set default image size */

 init video dma queue */

 init vbi dma queue */

 Reset other chips required if they are tied up with GPIO pins */

 CONFIG_MODULES */

 Video Init */

 compute alternate max packet sizes for video */

 VBI Init */

 compute alternate max packet sizes for vbi */

 Sliced CC VBI init */

 compute alternate max packet sizes for sliced CC */

/*

 * cx231xx_usb_probe()

 * checks for supported devices

	/*

	 * Interface number 0 - IR interface (handled by mceusb driver)

	 * Interface number 1 - AV interface (handled by this driver)

 Check to see next free device and mark as used */

 No free device slots */

 allocate memory for our device state and initialize it */

 reset gpio dir and value */

 0 - vbi ; 1 -sliced cc mode */

 get maximum no.of IAD interfaces */

 init CIR module TBD */

mode_tv: digital=1 or analog=0*/

 increment interface count */

 get device number */

 save our data pointer in this interface device */

 Initialize the media controller */

 Create v4l2 device */

 allocate device struct */

 compute alternate max packet sizes for TS1 */

 load other modules required */

 Init entities at the Media Controller */

 cx231xx_uninit_dev: */

/*

 * cx231xx_usb_disconnect()

 * called when the device gets disconnected

 * video device will be unregistered on v4l2_close in case it is still open

	/* wait until all current v4l2 io is finished then deallocate

 Even having users, it is safe to remove the RC i2c driver */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 *  Support for a cx23417 mpeg encoder via cx231xx host port.

 *

 *    (c) 2004 Jelle Foks <jelle@foks.us>

 *    (c) 2004 Gerd Knorr <kraxel@bytesex.org>

 *    (c) 2008 Steven Toth <stoth@linuxtv.org>

 *      - CX23885/7/8 support

 *

 *  Includes parts from the ivtv driver( http://ivtv.sourceforge.net/),

 for polaris ITVC */

 Read and write modes for polaris ITVC */

 ------------------------------------------------------------------ */

 stop at the end of gop, generate irq */

 stop immediately, no irq */

 NTSC: 30fps */

 PAL: 25fps */

 239 */

 240 */

 261 */

 239 */

 240 */

 262 */

 defines below are from ivtv-driver.h */

 Firmware API commands */

 Registers */

 IVTV_REG_OFFSET */

/*

 * Bit definitions for MC417_RWD and MC417_OEN registers

 *

 * bits 31-16

 *+-----------+

 *| Reserved  |

 *|+-----------+

 *|  bit 15  bit 14  bit 13 bit 12  bit 11  bit 10  bit 9   bit 8

 *|+-------+-------+-------+-------+-------+-------+-------+-------+

 *|| MIWR# | MIRD# | MICS# |MIRDY# |MIADDR3|MIADDR2|MIADDR1|MIADDR0|

 *|+-------+-------+-------+-------+-------+-------+-------+-------+

 *| bit 7   bit 6   bit 5   bit 4   bit 3   bit 2   bit 1   bit 0

 *|+-------+-------+-------+-------+-------+-------+-------+-------+

 *||MIDATA7|MIDATA6|MIDATA5|MIDATA4|MIDATA3|MIDATA2|MIDATA1|MIDATA0|

 *|+-------+-------+-------+-------+-------+-------+-------+-------+

/* Bit definitions for MC417_CTL register ****

 *bits 31-6   bits 5-4   bit 3    bits 2-1       Bit 0

 *+--------+-------------+--------+--------------+------------+

 *|Reserved|MC417_SPD_CTL|Reserved|MC417_GPIO_SEL|UART_GPIO_EN|

 *+--------+-------------+--------+--------------+------------+

 Values for speed control */

 b'1x, but we use b'11 */

 Values for GPIO select */

write data byte 1;*/

write data byte 2;*/

write data byte 3;*/

write address byte 0;*/

write address byte 1;*/

Write that the mode is write.*/

write address byte 0;*/

write address byte 1;*/

write that the mode is read;*/

	/*wait for the MIRDY line to be asserted ,

switch the DATA- GPIO to input mode;*/

Read data byte 0;*/

 Read data byte 1;*/

Read data byte 2;*/

Read data byte 3;*/

write data byte 0;*/

write data byte 1;*/

write data byte 2;*/

write data byte 3;*/

 write address byte 2;*/

 write address byte 1;*/

 write address byte 0;*/

wait for MIRDY line;*/

write address byte 2;*/

write address byte 1*/

write address byte 0*/

Wait for MIRDY line*/

Read data byte 3;*/

Read data byte 2;*/

 Read data byte 1;*/

Read data byte 0;*/

 ------------------------------------------------------------------ */

 MPEG encoder API */

	/* this may not be 100% safe if we can't read any memory location

	/* This read looks at 32 bits, but flag is only 8 bits.

	 * Seems we also bail if CMD or TIMEOUT bytes are set???

 tell 'em we're working on it */

 write command + args + fill remaining with zeros */

 command code */

 timeout */

 tell 'em we're done writing */

 wait for firmware to handle the API command */

 read output values */

/* We don't need to call the API often, so using just one

 * mailbox will probably suffice

CX231xx_FIRM_IMAGE_SIZE*/

write data byte 1;*/

write data byte 2;*/

write data byte 3;*/

 write address byte 2;*/

 write address byte 1;*/

 write address byte 0;*/

u32 checksum = 0;*/

u32 *dataptr;*/

u32 current_fw[800];*/

 Save GPIO settings before reset of APU */

 transfer to the chip */

download the firmware by ep5-out*/

 F/W power up disturbs the GPIOs, restore state */

 assign frame size */

 ping */

 stop mpeg capture */

/*	cx231xx_api_cmd(dev, CX2341X_ENC_SET_NUM_VSYNC_LINES, 2, 0,

		CX231xx_FIELD1_SAA7115, CX231xx_FIELD2_SAA7115);

	cx231xx_api_cmd(dev, CX2341X_ENC_SET_PLACEHOLDER, 12, 0,

		CX231xx_CUSTOM_EXTENSION_USR_DATA, 0, 0, 0, 0, 0, 0, 0, 0, 0,

		0, 0);

 TODO */

 Setup to capture VBI */

 frames per interrupt */

 total bufs */

 start codes */

 stop codes */

 lines */

 BPL */

/*	cx231xx_api_cmd(dev, CX2341X_ENC_MUTE_AUDIO, 1, 0, CX231xx_UNMUTE);

	msleep(60);

 initialize the video input */

 Enable VIP style pixel invalidation so we work with scaled mode */

 start capturing to the host interface */

 ------------------------------------------------------------------ */

 Fill buffer */

 Fill buffer */

 do this before setting alternate! */

 ------------------------------------------------------------------ */

 do mode control overrides */

 Update the A/V core */

 fix videodecoder resolution */

	/* The audio clock of the digitizer must match the codec sample

 needed for the video clock freq */

 needed for setting up the video resolution */

 FIXME: Port1 hardcoded here */

 Set default TV standard */

 Allocate and initialize V4L video device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   cx231xx-pcb-config.c - driver for Conexant

		Cx23100/101/102 USB video capture devices



   Copyright (C) 2008 <srinivasa.deevi at conexant dot com>



*****************************************************************************/

 index */

 power_type */

 speed , not decide yet */

 mode */

 ts1_source, digital tv only */

 ts2_source  */

 analog source */

 digital_index  */

 analog index */

 dif_index   */

 external_index */

 only one configuration */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 full-speed config */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 index */

 power_type */

 speed , not decide yet */

 mode */

 ts1_source, digital tv only */

 ts2_source,need update from register */

 analog source */

 digital_index  */

 analog index */

 dif_index */

 external_index */

 only one configuration */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 full-speed */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 index */

 power_type */

 speed , not decide yet */

 mode ,analog tv only */

 ts1_source, NOT SUPPORT */

 ts2_source,NOT SUPPORT */

 analog source, need update */

 digital_index  */

 analog index */

 dif_index */

 external_index */

 only one configuration */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 full-speed */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 index */

 power_type */

 speed , not decide yet */

 mode ,analog tv and digital path */

 ts1_source,will update in register */

 ts2_source,NOT SUPPORT */

 analog source need update */

 digital_index  */

 analog index */

 dif_index */

 external_index */

 only one configuration */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 full-speed */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 index */

 power_type */

 speed , not decide yet */

 mode ,analog tv and digital path */

 ts1_source, update in register */

 ts2_source,update in register */

 analog source, need update */

 digital_index  */

 analog index */

 dif_index */

 external_index */

 only one configuration */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 full-speed */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 index */

 power_type */

 speed , not decide yet */

 mode ,analog tv AND DIGITAL path */

 ts1_source, disable */

 ts2_source */

 analog source,need update */

 digital_index  */

 analog index */

 dif_index */

 external_index */

 only one configuration */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 full-speed  */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 index */

 power_type */

 speed , not decide yet */

 mode ,analog tv AND DIGITAL path */

 ts1_source, disable */

 ts2_source */

 analog source */

 digital_index  */

 analog index */

 dif_index */

 external_index */

 only one configuration */

 config index */

 interrupt ep index  = 2 */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 full-speed */

 config index */

 interrupt ep index  = 2 */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 index */

 power_type */

 speed , not decide yet */

 mode ,analog tv AND DIGITAL path */

 ts1_source, disable */

 ts2_source */

 analog source--analog */

 digital_index  */

 analog index */

 dif_index */

 external_index */

 only one configuration */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 full-speed */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 index */

 power_type */

 speed , not decide yet */

 mode ,analog tv AND DIGITAL path */

 ts1_source, disable */

 ts2_source */

 analog source, dif */

 digital_index  */

 analog index */

 dif_index */

 external_index */

 only one configuration */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

 full speed */

 config index */

 interrupt ep index */

 ts1 index */

 TS2 index */

 AUDIO */

 VIDEO */

 VANC */

 HANC */

 ir_index */

****************************************************************/

 from register,1--HS, 0--FS  */

	/* read board config register to find out which

 Verify this device belongs to Bus power or Self power device */

 bus-power */

 self-power */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Conexant Cx231xx audio extension

 *

 *  Copyright (C) 2008 <srinivasa.deevi at conexant dot com>

 *       Based on em28xx driver

 success */

 NAK */

 kill */

 error */

 success */

 NAK */

 kill */

 error */

 just about the value in usbaudio.c */

 12544/2, */

 12544, */

 set alternate setting for audio interface */

 1 - 48000 samples per sec */

 inform hardware to start streaming */

 inform hardware to stop streaming */

 set alternate setting for audio interface */

 1 - 48000 samples per sec */

		/* This device does not support the extension (in this case

		   the device is expecting the snd-usb-audio module or

 compute alternate max packet sizes for Audio */

		/* This device does not support the extension (in this case

		   the device is expecting the snd-usb-audio module or

 SPDX-License-Identifier: GPL-2.0

 cx231xx IR glue driver



 Copyright (c) 2010 Mauro Carvalho Chehab <mchehab@kernel.org>



 Polaris (cx231xx) has its support for IR's with a design close to MCE.

 however, a few designs are using an external I2C chip for IR, instead

 of using the one provided by the chip.

 This driver provides support for those extra devices

 poll IR chip */

	/* it seems that 0xFE indicates that a button is still hold

	   down, while 0xff indicates that no button is hold

 Only initialize if a rc keycode map is defined */

	/*

	 * Board-dependent values

	 *

	 * For now, there's just one type of hardware design using

	 * an i2c device.

 The i2c micro-controller only outputs the cmd part of NEC protocol */

 Load and bind ir-kbd-i2c */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   cx231xx_avcore.c - driver for Conexant Cx23100/101/102

		      USB video capture devices



   Copyright (C) 2008 <srinivasa.deevi at conexant dot com>



   This program contains the specific code to control the avdecoder chip and

   other related usb control functions for cx231xx based chipset.



/******************************************************************************

			-: BLOCK ARRANGEMENT :-

	I2S block ----------------------|

	[I2S audio]			|

					|

	Analog Front End --> Direct IF -|-> Cx25840 --> Audio

	[video & audio]			|   [Audio]

					|

					|-> Cx25840 --> Video

					    [Video]



/******************************************************************************

 *                    VERVE REGISTER                                          *

 *									      *

/******************************************************************************

 *                    A F E - B L O C K    C O N T R O L   functions          *

 *				[ANALOG FRONT END]			      *

 super block initialize */

 enable pll     */

 start tuning filter */

 exit tuning */

 power up all 3 channels, clear pd_buffer */

 Enable quantizer calibration */

 channel initialize, force modulator (fb) reset */

 start quantilizer calibration  */

 exit modulator (fb) reset */

 enable the pre_clamp in each channel for single-ended input */

 use diode instead of resistor, so set term_en to 0, res_en to 0  */

 dynamic element matching off */

/*

	The Analog Front End in Cx231xx has 3 channels. These

	channels are used to share between different inputs

	like tuner, s-video and composite inputs.



	channel 1 ----- pin 1  to pin4(in reg is 1-4)

	channel 2 ----- pin 5  to pin8(in reg is 5-8)

	channel 3 ----- pin 9 to pin 12(in reg is 9-11)

	/* For ch3_setting, the value to put in the register is

	/*

	* FIXME: We need to implement the AFE code for LOW IF and for HI IF.

	* Currently, only baseband works.

 SetupAFEforEuHiIF(); */

 SetupAFEforUsHiIF(); */

 SetupAFEforJapanHiIF(); */

 switch  */

/******************************************************************************

 *     V I D E O / A U D I O    D E C O D E R    C O N T R O L   functions    *

 External AV */

 Tuner */

 i2c device tuners */

 save the selection */

 call afe block to set video inputs */

 set [24:23] [22:15] to 0  */

 set FUNC_MODE[24:23] = 2 IF_MOD[22:15] = 0  */

 Set output mode */

 Tell DIF object to go to baseband mode  */

 Read the DFE_CTRL1 register */

 enable the VBI_GATE_EN */

 Enable the auto-VGA enable */

 Write it back */

 Disable auto config of registers */

 Set CVBS input mode */

 Disable the use of  DIF */

 set [24:23] [22:15] to 0 */

		/* set FUNC_MODE[24:23] = 2

 Tell DIF object to go to baseband mode */

 Read the DFE_CTRL1 register */

 enable the VBI_GATE_EN */

 Enable the auto-VGA enable */

 Write it back */

 Disable auto config of registers  */

 Set YC input mode */

 Chroma to ADC2 */

 set the chroma in select */

		/* Clear VGA_SEL_CH2 and VGA_SEL_CH3 (bits 7 and 8)

		   This sets them to use video

 TODO: Test if this is also needed for xc2028/xc3028 */

 Disable the use of  DIF   */

 set [24:23] [22:15] to 0 */

 set FUNC_MODE[24:23] = 2 IF_MOD[22:15] = 0 */

 Set output mode */

 Tell DIF object to go to baseband mode */

 Read the DFE_CTRL1 register */

 enable the VBI_GATE_EN */

 Enable the auto-VGA enable */

 Write it back */

 Disable auto config of registers */

 Set CVBS input mode */

 Enable the DIF for the tuner */

 Reinitialize the DIF */

 Make sure bypass is cleared */

 Clear the bypass bit */

 Enable the use of the DIF block */

 Read the DFE_CTRL1 register */

 Disable the VBI_GATE_EN */

			/* Enable the auto-VGA enable, AGC, and

 Write it back */

 Wait until AGC locks up */

 Disable the auto-VGA enable AGC */

 Write it back */

 Enable Polaris B0 AGC output */

 Set output mode */

 Disable auto config of registers */

 Set CVBS input mode */

			/* Set some bits in AFE_CTRL so that channel 2 or 3

 Clear clamp for channels 2 and 3      (bit 16-17) */

 Clear droop comp                      (bit 19-20) */

 Set VGA_SEL (for audio control)       (bit 7-8) */

Set Func mode:01-DIF 10-baseband 11-YUV*/

 Set raw VBI mode */

enable TS1 data[0:7] as output to export 656*/

enable TS1 clock as output to export 656*/

/*

 * Handle any video-mode specific overrides that are different

 * on a per video standards basis after touching the MODE_CTRL

 * register which resets many values for autodetect

 Change the DFE_CTRL3 bp_percent to fix flagging */

		/* Move the close caption lines out of active video,

 Adjust the active video horizontal start point */

 Adjust the active video horizontal start point */

 Put it in soft reset   */

 setup AUD_IO control from Merlin paralle output */

		/* setup input to Merlin, SRC2 connect to AC97

		   bypass upsample-by-2, slave mode, sony mode, left justify

 select the parallel1 and SRC3 */

		/* unmute all, AC97 in, independence mode

 set AVC maximum threshold, adr 08d4, dat ffff0024 */

 set SC maximum threshold, adr 08ec, dat ffffb3a3 */

 Setup SRC sources and clocks */

 Setup the AUD_IO control */

 setAudioStandard(_audio_standard); */

 SIF passthrough at 28.6363 MHz sample rate */

 Normal mode: SIF passthrough at 14.32 MHz */

 i2c device tuners */

 TODO: Normal mode: SIF passthrough at 14.32 MHz?? */

			/* This is just a casual suggestion to people adding

			   new boards in case they use a tuner type we don't

		/*  use SIF for FM radio

		   setupFM();

		   setAudioStandard(_audio_standard);

 Take it out of soft reset */

/******************************************************************************

 *                    C H I P Specific  C O N T R O L   functions             *

 first set the direction to output */

 0 - demod ; 1 - Analog mode */

	/*

	 * Should this code check dev->port_3_switch_enabled first

	 * to skip unnecessary reading of the register?

	 * If yes, the flag dev->port_3_switch_enabled must be initialized

	 * correctly.

 Just return, if already using the right port */

 remember status of the switch for usage in is_tuner */

/*

	u8 status = 0;

	u32 value = 0;



	vid_blk_write_word(dev, PIN_CTRL, 0xA0FFF82F);

	vid_blk_write_word(dev, DIF_MISC_CTRL, 0x0A203F11);

	vid_blk_write_word(dev, DIF_SRC_PHASE_INC, 0x1BEFBF06);



	status = vid_blk_read_word(dev, AFE_CTRL_C2HH_SRC_CTRL, &value);

	vid_blk_write_word(dev, AFE_CTRL_C2HH_SRC_CTRL, 0x4485D390);

	status = vid_blk_read_word(dev, AFE_CTRL_C2HH_SRC_CTRL,  &value);

/*

	config colibri to lo-if mode



	FIXME: ntf_mode = 2'b00 by default. But set 0x1 would reduce

		the diff IF input by half,



		for low-if agc defect

 Device has a DIF if this function is called */

Set colibri for low IF*/

 Set C2HH for low IF operation.*/

 Get colibri offsets.*/

 Set the band Pass filter for DIF*/

4.83MHz	*/

2.70MHz       */

2.10MHz	*/

KSPROPERTY_TUNER_MODE_TV*/{

 Calculate the PLL frequency word based on the adjusted if_freq*/

pll_freq_word = 0x3463497;*/

 Enable Spectral Invert*/

 Disable Spectral Invert*/

/******************************************************************************

 *                 D I F - B L O C K    C O N T R O L   functions             *

 C2HH */

 lo if big signal */

 FUNC_MODE = DIF */

 IF_MODE */

 no inv */

 lo if big signal */

 FUNC_MODE = DIF */

 IF_MODE */

 no inv */

 0x124, AUD_CHAN1_SRC = 0x3 */

 C2HH setup */

 lo if big signal */

 FUNC_MODE = DIF */

 IF_MODE */

 no inv */

 default PAL BG */

 C2HH setup */

 lo if big signal */

 FUNC_MODE = DIF */

 IF_MODE */

 no inv */

 base band */

		/* There is a different SRC_PHASE_INC value

 Save the Spec Inversion value */

 Save the Spec Inversion value */

 improved Low Frequency Phase Noise */

 Save the Spec Inversion value */

 improved Low Frequency Phase Noise */

 Save the Spec Inversion value */

 Save the Spec Inversion value */

 Is it SECAM_L1? */

 Save the Spec Inversion value */

		/* V4L2_STD_NTSC_M (75 IRE Setup) Or

		/* For NTSC the centre frequency of video coming out of

		   sidewinder is around 7.1MHz or 3.6MHz depending on the

		   spectral inversion. so for a non spectrally inverted channel

		   the pll freq word is 0x03420c49

 Save the Spec Inversion value */

 default PAL BG */

 Save the Spec Inversion value */

	/* The AGC values should be the same for all standards,

	/* It is still possible to get Set Standard calls even when we

	   are in FM mode.

 Write the calculated value for misc ontrol register      */

 Set the RF and IF k_agc values to 3 */

	/* Set the RF and IF k_agc values to 4 for PAL/NTSC and 8 for

/******************************************************************************

 *		    I 2 S - B L O C K    C O N T R O L   functions            *

 enables clock to delta-sigma and decimation filter */

 power up all channel */

 set i2s_blk for audio input types */

/******************************************************************************

 *                  P O W E R      C O N T R O L   functions                  *

 reset state of xceive tuner */

 reset the Tuner */

 reset the Tuner */

	/* For power saving, only enable Pwr_resetout_n

 update power control for afe */

 update power control for i2s_blk */

/******************************************************************************

 *                  S T R E A M    C O N T R O L   functions                  *

 get EP for media type */

 ep4  [00:1000] */

 ep3  [00:0100] */

 ep5 [01:0000] */

 ep6 [10:0000] */

 ep1 [00:0001] */

 ep2 [00:0010] */

 enable video capture */

 disable video capture */

/*****************************************************************************

*                   G P I O   B I T control functions                        *

/*

* cx231xx_set_gpio_direction

*      Sets the direction of the GPIO pin to input or output

*

* Parameters :

*      pin_number : The GPIO Pin number to program the direction for

*                   from 0 to 31

*      pin_value : The Direction of the GPIO Pin under reference.

*                      0 = Input direction

*                      1 = Output direction

 Check for valid pin_number - if 32 , bail out */

 input */

 clear */

 cache the value for future */

/*

* cx231xx_set_gpio_value

*      Sets the value of the GPIO pin to Logic high or low. The Pin under

*      reference should ALREADY BE SET IN OUTPUT MODE !!!!!!!!!

*

* Parameters :

*      pin_number : The GPIO Pin number to program the direction for

*      pin_value : The value of the GPIO Pin under reference.

*                      0 = set it to 0

*                      1 = set it to 1

 Check for valid pin_number - if 0xFF , bail out */

 first do a sanity check - if the Pin is not output, make it output */

 It was in input mode */

 store the value */

 toggle bit0 of GP_IO */

/*****************************************************************************

*                      G P I O I2C related functions                         *

 set SCL to output 1 ; set SDA to output 1 */

 set SCL to output 1; set SDA to output 0 */

 set SCL to output 0; set SDA to output 0      */

 set SCL to output 0; set SDA to output 0      */

 set SCL to output 1; set SDA to output 0      */

	/* set SCL to input ,release SCL cable control

 set SCL to output ; set SDA to output */

 set SCL to output 0; set SDA to output 0     */

 set SCL to output 1; set SDA to output 0     */

 set SCL to output 0; set SDA to output 0     */

 set SCL to output 0; set SDA to output 1     */

 set SCL to output 1; set SDA to output 1     */

 set SCL to output 0; set SDA to output 1     */

 read byte */

 send write I2c addr */

 set SCL to output 0; set SDA to input */

 set SCL to output 1; set SDA to input */

 get SDA data bit */

	/* set SCL to output 0,finish the read latest SCL signal.

	   !!!set SDA to input, never to modify SDA direction at

 store the value */

	/* clock stretch; set SCL to input; set SDA to input;

	/*

	 * readAck

	 * through clock stretch, slave has given a SCL signal,

	 * so the SDA data can be directly read.

	/* read SDA end, set the SCL to output 0, after this operation,

 set SDA to output */

 set SCL = 0 (output); set SDA = 0 (output) */

 set SCL = 1 (output); set SDA = 0 (output) */

 set SCL = 0 (output); set SDA = 0 (output) */

 set SDA to input,and then the slave will read data from SDA. */

 set scl to output ; set sda to input */

 set scl to output 0; set sda to input */

 set scl to output 1; set sda to input */

/*****************************************************************************

*                      G P I O I2C related functions                         *

/* cx231xx_gpio_i2c_read

 * Function to read data from gpio based I2C interface

 get the lock */

 start */

 write dev_addr */

 readAck */

 read data */

 read data */

 only do write ack if we more length */

 write NAK - inform reads are complete */

 write end */

 release the lock */

/* cx231xx_gpio_i2c_write

 * Function to write data to gpio based I2C interface

 get the lock */

 start */

 write dev_addr */

 read Ack */

 Write data */

 read Ack */

 write End */

 release the lock */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   cx231xx_vbi.c - driver for Conexant Cx23100/101/102 USB video capture devices



   Copyright (C) 2008 <srinivasa.deevi at conexant dot com>

	Based on cx88 driver



/*

 * Controls the isoc copy of each urb packet

 get buffer pointer and length */

			/* Handle the case where we were working on a partial

			/* Check for a SAV/EAV overlapping the

		/* Get the first line if we have some portion of an SAV/EAV from

 SAV/EAV */

 p_buffer */

 buffer size */

 Now parse data that is completely in this buffer */

 p_buffer */

 buffer size */

 bytes used to get SAV/EAV */

 SAV/EAV */

 p_buffer */

buf size*/

		/* Save the last four bytes of the buffer so we can

/* ------------------------------------------------------------------

	Vbi buf operations

 This is called *without* dev->slock held; please keep it that way */

/* ------------------------------------------------------------------

	URB control

/*

 * IRQ callback, called by URB callback

 success */

 NAK */

 kill */

 error */

 Copy data from URB */

 Reset status */

/*

 * Stop and Deallocate URBs

/*

 * Allocate URBs and start IRQ

 De-allocates all pending stuff */

 clear if any halt */

 allocate urbs and transfer buffers */

 submit urbs and enables IRQ */

/*

 * Announces that a buffer were filled and request the next

 Advice that buffer was filled */

 dev_dbg(dev->dev, "[%p/%d] wakeup\n", buf, buf->vb.index); */

 Just starting up */

 get the buffer pointer */

 Remember the field number for next time */

	/* If we don't have a buffer, just return the number of bytes we would

 copy the data to video buffer */

/*

 * video-buf generic routine to get the next available buffer

 Get the next buffer */

 Cleans up buffer - Useful for testing for frame/URB loss */

 first try to get the buffer */

 Populate the second half of the frame */

 prepare destination address */

/*

 * Copyright (c) 2013 Federico Simoncelli

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL").

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR

 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT

 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,

 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT

 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,

 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY

 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE

 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/*

 * Fushicai USBTV007 Audio-Video Grabber Driver

 *

 * Product web site:

 * http://www.fushicai.com/products_detail/&productId=d05449ee-b690-42f9-a661-aa7353894bed.html

 *

 * No physical hardware was harmed running Windows during the

 * reverse-engineering activity

 value in usbaudio.c */

 These seem to enable the device. */

 this sets the input from composite */

 starting the stream */

	/* The original windows driver sometimes sends also:

	 *   { USBTV_BASE + 0x00a2, 0x0013 }

	 * but it seems useless and its real effects are untested at

	 * the moment.

/*

 * Copyright (c) 2013 Lubomir Rintel

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL").

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR

 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT

 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,

 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT

 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,

 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY

 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE

 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/*

 * Fushicai USBTV007 Audio-Video Grabber Driver

 *

 * Product web site:

 * http://www.fushicai.com/products_detail/&productId=d05449ee-b690-42f9-a661-aa7353894bed.html

 *

 * Following LWN articles were very useful in construction of this driver:

 * Video4Linux2 API series: http://lwn.net/Articles/203924/

 * videobuf2 API explanation: http://lwn.net/Articles/447435/

 * Thanks go to Jonathan Corbet for providing this quality documentation.

 * He is awesome.

 *

 * No physical hardware was harmed running Windows during the

 * reverse-engineering activity

 Checks that the device is what we think it is. */

	/* Packet size is split into 11 bits of base size and count of

 Device structure */

 for simplicity we exploit the v4l2_device reference counting */

 we must not free at this point */

 this will undo the v4l2_device_get() */

	/* the usbtv structure will be deallocated when v4l2 will be

/*

 * Copyright (c) 2013,2016 Lubomir Rintel

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL").

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS

 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT

 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR

 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT

 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,

 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT

 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,

 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY

 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE

 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/*

 * Fushicai USBTV007 Audio-Video Grabber Driver

 *

 * Product web site:

 * http://www.fushicai.com/products_detail/&productId=d05449ee-b690-42f9-a661-aa7353894bed.html

 *

 * Following LWN articles were very useful in construction of this driver:

 * Video4Linux2 API series: http://lwn.net/Articles/203924/

 * videobuf2 API explanation: http://lwn.net/Articles/447435/

 * Thanks go to Jonathan Corbet for providing this quality documentation.

 * He is awesome.

 *

 * No physical hardware was harmed running Windows during the

 * reverse-engineering activity

 NTSC M/M-JP/M-KR */

 PAL BG/DK/H/I */

 SECAM B/D/G/H/K/K1/L/Lc */

 Fallback to automatic detection for other standards */

	/* These are the series of register values used to configure the

	 * decoder for a specific standard.

	 * The first 21 register writes are copied from the

	 * Settings\DecoderDefaults registry keys present in the Windows driver

	 * .INF file, and control various image tuning parameters (color

	 * correction, sharpness, ...).

 "AVPAL" tuning sequence from .INF file */

 End image tuning */

 "AVNTSC" tuning sequence from .INF file */

 End image tuning */

 "AVSECAM" tuning sequence from .INF file */

 End image tuning */

 Masks for norms using a NTSC or PAL color encoding. */

 Configure the decoder for the color standard */

 These seem to enable the device. */

		/* These seem to influence color parameters, such as

/* Copy data from chunk into a frame buffer, deinterlacing the data

 * into every second line. Unfortunately, they don't align nicely into

 * 720 pixel lines, as the chunk is 240 words long, which is 480 pixels.

 * Therefore, we break down the chunk into two halves before copying,

 * so that we can interleave a line if needed.

 *

 * Each "chunk" is 240 words; a word in this context equals 4 bytes.

 * Image format is YUYV/YUV 4:2:2, consisting of Y Cr Y Cb, defining two

 * pixels, the Cr and Cb shared between the two pixels, but each having

 * separate Y values. Thus, the 240 words equal 480 pixels. It therefore,

 * takes 1.5 chunks to make a 720 pixel-wide line for the frame.

 * The image is interlaced, so there is a "scan" of odd lines, followed

 * by "scan" of even numbered lines.

 *

 * Following code is writing the chunks in correct sequence, skipping

 * the rows based on "odd" value.

 * line 1: chunk[0][  0..479] chunk[0][480..959] chunk[1][  0..479]

 * line 3: chunk[1][480..959] chunk[2][  0..479] chunk[2][480..959]

 * ...etc.

/* Called for each 256-byte image chunk.

 * First word identifies the chunk, followed by 240 words of image

 Ignore corrupted lines. */

 Beginning of a frame. */

 No free buffers. Userspace likely too slow. */

 First available buffer. */

 Copy the chunk data. */

 Last chunk in a field */

 Last chunk in a frame, signalling an end */

/* Got image data. Each packet contains a number of 256-word chunks we

 All fine. */

 Device disconnected or capture stopped? */

 Unknown error. Retry. */

 Cancel running transfers. */

 Return buffers to userspace. */

	/*

	 * Read in the current brightness/contrast registers. We need them

	 * both, because the values are for some reason interleaved.

 videobuf2 structure */

 controls */

 v4l2 structure */

 Video structure */

 SPDX-License-Identifier: GPL-2.0

 Support for audio capture for tm5600/6000/6010

 Copyright (c) 2007-2008 Mauro Carvalho Chehab <mchehab@kernel.org>



 Based on cx88-alsa.c

/****************************************************************************

			Module global static vars

 Index 0-MAX */

/****************************************************************************

				Module macros

/****************************************************************************

			Module specific functions

/*

 * BOARD Specific: Sets audio DMA

 Enables audio */

/*

 * BOARD Specific: Resets audio DMA

 Disables audio */

/****************************************************************************

				ALSA PCM Interface

/*

 * Digital hardware definition

/*

 * audio pcm capture open callback

/*

 * audio close callback

/*

 * prepare callback

/*

 * trigger callback

/*

 * pointer callback

/*

 * operators

/*

 * create a PCM device

 FIXME: Control interface - How to control volume/mute? */

/****************************************************************************

			Basic Flow for Sound Devices

/*

 * Alsa Constructor - Component probe

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  tm6000-input.c - driver for TM5600/TM6000/TM6010 USB video capture devices

 *

 *  Copyright (C) 2010 Stefan Ringel <stefan.ringel@arcor.de>

 ms - Delay to submit an URB request on retrial and init */

 ms - Delay to turn led on again on int mode */

 poll expernal decoder */

 IR device properties */

	/*

	 * The IR decoder supports RC-5 or NEC, with a configurable timing.

	 * The timing configuration there is not that accurate, as it uses

	 * approximate values. The NEC spec mentions a 562.5 unit period,

	 * and RC-5 uses a 888.8 period.

	 * Currently, driver assumes a clock provided by a 12 MHz XTAL, but

	 * a modprobe parameter can adjust it.

	 * Adjustments are required for other timings.

	 * It seems that the 900ms timing for NEC is used to detect a RC-5

	 * IR, in order to discard such decoding

 ms */

 ms - the actual value would be 562 */

 ms - from the NEC decoding */

 ms - The actual value would be 1776 */

 Remote WAKEUP = enable, normal mode, from IR decoder output */

 Enable IR reception on non-busrt mode */

 IR_WKUP_SEL = Low byte in decoded IR data */

 IR_WKU_ADD code */

 Shows that IR is working via the LED */

	/*

	 * Flash the led. We can't do it here, as it is running on IRQ context.

	 * So, use the scheduler to do it, in a few ms.

 Check if something was read */

 Re-schedule polling */

 Retry in 100 ms */

 Led is enabled only if USB submit doesn't fail */

 TODO */

 record handles to ourself */

 input setup */

 Needed, in order to support NEC remotes with 24 or 32 bits */

 ir register */

 skip detach on non attached board */

 Turn off the led */

 SPDX-License-Identifier: GPL-2.0

 tm6000-cards.c - driver for TM5600/TM6000/TM6010 USB video capture devices



 Copyright (c) 2006-2007 Mauro Carvalho Chehab <mchehab@kernel.org>

 EEPROM name */

 size of EEPROM name */

 Position where it appears at ROM */

 variant of the chipset */

 type of the tuner */

 tuner address */

 demodulator address */

 has a XC3028 */

 has a XC3028 */

 has a XC3028 */

 has a XC3028 */

 has a XC3028 */

 table of devices that work with this driver */

 Control power led for show some activity */

 Power LED unconfigured */

 ON Power LED */

 OFF Power LED */

 Tuner callback to provide the proper gpio changes needed for xc5000 */

 Tuner callback to provide the proper gpio changes needed for xc2028 */

 Reset codes during load firmware */

 newer tuner can faster reset */

	/*

	 * Board-specific initialization sequence. Handles all GPIO

	 * initialization sequences that are board-specific.

	 * Up to now, all found devices use GPIO1 and GPIO4 at the same way.

	 * Probably, they're all based on some reference device. Due to that,

	 * there's a common routine at the end to handle those GPIO's. Devices

	 * that use different pinups or init sequences can just return at

	 * the board-specific session.

 Turn xceive 3028 on */

 Turn zarlink zl10353 on */

 Reset zarlink zl10353 */

 Turn zarlink zl10353 off */

 ir ? */

 Power led on (blue) */

 DVB led off (orange) */

 Turn zarlink zl10353 on */

 Power led on (blue) */

 Reset zarlink zl10353 */

 Power led on (blue) */

	/*

	 * Default initialization. Most of the devices seem to use GPIO1

	 * and GPIO4.on the same way, so, this handles the common sequence

	 * used by most devices.

	 * If a device uses a different sequence or different GPIO pins for

	 * reset, just add the code at the board-specific part

 Just to be conservative */

 Load tuner module */

 setup per-model quirks */

 initialize hardware */

 CONFIG_MODULES */

 register i2c bus */

 register i2c bus */

 Default values for STD and resolutions */

 Configure tuner */

 Set video standard */

 Set tuner frequency - also loads firmware on xc2028/xc3028 */

 193.25 MHz */

 register and initialize V4L2 */

 high bandwidth multiplier, as encoded in highspeed endpoint descriptors */

/*

 * tm6000_usb_probe()

 * checks for supported devices

 Selects the proper interface */

 Check to see next free device and mark as used */

 Create and initialize dev struct */

 Increment usage count */

 Get endpoints */

 check if the the device has the iso in endpoint at the correct place */

 save our data pointer in this interface device */

/*

 * tm6000_usb_disconnect()

 * called when the device gets disconnected

 * video device will be unregistered on v4l2_close in case it is still open

 Power led off */

 Power led off */

 SPDX-License-Identifier: GPL-2.0

 tm6000-stds.c - driver for TM5600/TM6000/TM6010 USB video capture devices



 Copyright (c) 2007 Mauro Carvalho Chehab <mchehab@kernel.org>

 GC1 Fixed gain 0dB */

 Auto 4.5 = M Japan, Auto 6.5 = DK */

 Auto de-emphasis, manual channel mode */

 set mono or stereo */

	/*

	 * STD/MN shouldn't be affected by tm6010_a_mode, as there's just one

	 * audio standard for each V4L2_STD type.

 auto */

 Other PAL/SECAM standards */

 A2 */

 NICAM */

 other */

 Currently, those are the only supported resoltions */

 Load board's initialization table */

 Mux overflow workaround */

 Mux overflow workaround */

 Mux overflow workaround */

 Mux overflow workaround */

 SPDX-License-Identifier: GPL-2.0

 tm6000-video.c - driver for TM5600/TM6000/TM6010 USB video capture devices



 Copyright (c) 2006-2007 Mauro Carvalho Chehab <mchehab@kernel.org>



 Copyright (c) 2007 Michel Ludwig <michel.ludwig@gmail.com>

	- Fixed module load/unload

 2 seconds */

 Limits minimum and default number of buffers */

 Max number of ISO packets */

 Declare static vars that will be used as parameters */

 Video memory limit, in Mb */

 /dev/videoN, -1 for autodetect */

 /dev/radioN, -1 for autodetect */

 keep urb buffers allocated */

 Debug level */

/* ------------------------------------------------------------------

 *	DMA and thread functions

 * ------------------------------------------------------------------

/*

 * video-buf generic routine to get the next available buffer

/*

 * Announces that a buffer were filled and request the next

 Advice that buffer was filled */

/*

 * Identify the tm5600/6000 buffer header type and properly handles

 get video buffer */

 Header */

 from last urb or packet */

 have incomplete header */

 Seek for sync */

 Get message header */

 split the header fields */

 Validates header fields */

			/*

			 * calculate position in buffer and change the buffer

						/*

						 * Announces that a new buffer

						 * were filled

 Don't allow to write out of the buffer */

 Size is always 180 bytes */

 Continue the last copy */

 copy data in different buffers */

 Fills video buffer */

 Need some code to copy vbi buffer */

 Need some code to copy pts */

			/*

			 * End of URB packet, but cmd processing is not

			 * complete. Preserve the state for a next packet

/*

 * Identify the tm5600/6000 buffer header type and properly handles

 Announces that a new buffer were filled */

/*

 * Controls the isoc copy of each urb packet

/* ------------------------------------------------------------------

 *	URB control

 * ------------------------------------------------------------------

/*

 * IRQ callback, called by URB callback

 Reset urb buffers */

/*

 * Allocate URB buffers

/*

 * Free URB buffers

/*

 * Stop and Deallocate URBs

/*

 * Assign URBs and start IRQ

 De-allocates all pending stuff */

 Stop interrupt USB pipe */

 Start interrupt USB pipe */

 call free, as some buffers might have been allocated */

 allocate urbs and transfer buffers */

 submit urbs and enables IRQ */

/* ------------------------------------------------------------------

 *	Videobuf operations

 * ------------------------------------------------------------------

	/* We used to wait for the buffer to finish here, but this didn't work

	   because, as we were keeping the state as VIDEOBUF_QUEUED,

	   videobuf_queue_cancel marked it as finished for us.

	   (Also, it could wedge forever if the hardware was misconfigured.)



	   This should be safe; by the time we get here, the buffer isn't

	   queued anymore. If we ever start marking the buffers as

	   VIDEOBUF_ACTIVE, it won't be, though.

 FIXME: It assumes depth=2 */

 The only currently supported format is 16 bits/pixel */

/* ------------------------------------------------------------------

 *	IOCTL handling

 * ------------------------------------------------------------------

 Is the current fh handling it? if so, that's OK */

 Is the current fh handling it? if so, that's OK */

 Is the current fh handling it? if so, that's OK */

 is it free? */

 grab it */

 Is the current fh handling it? if so, that's OK */

/* ------------------------------------------------------------------

 *	IOCTL vidioc handling

 * ------------------------------------------------------------------

FIXME: This seems to be generic enough to be at videodev2 */

 --- controls ---------------------------------------------- */

/* ------------------------------------------------------------------

	File operations for the device

 If more than one user, mutex should be added */

 allocate + initialize per filehandle data */

 initialize hardware on analog mode */

 streaming capture */

 read() capture */

 Stop interrupt USB pipe */

 Start interrupt USB pipe */

 V4L2 ioctl handler */

/* -----------------------------------------------------------------

 *	Initialization and module stuff

 * ------------------------------------------------------------------

 init video dma queues */

 if URB buffers are still allocated free them now */

 SPDX-License-Identifier: GPL-2.0

 tm6000-i2c.c - driver for TM5600/TM6000/TM6010 USB video capture devices



 Copyright (c) 2006-2007 Mauro Carvalho Chehab <mchehab@kernel.org>



 Copyright (c) 2007 Michel Ludwig <michel.ludwig@gmail.com>

	- Fix SMBus Read Byte command

 ----------------------------------------------------------- */

 capture mutex */

 release mutex */

 release mutex */

 Generic read - doesn't work fine with 16bit registers */

 capture mutex */

		/*

		 * Workaround an I2C bug when reading from zl10353

 release mutex */

/*

 * read from a 16bit register

 * for example xc2028, xc3028 or xc3028L

 capture mutex */

 release mutex */

 release mutex */

 read request without preceding register selection */

			/*

			 * The TM6000 only supports a read transaction

			 * immediately after a 1 or 2 byte write to select

			 * a register.  We cannot fulfill this request.

 1 or 2 byte write followed by a read */

 write bytes */

 ----------------------------------------------------------- */

/*

 * functionality()

 ----------------------------------------------------------- */

/*

 * tm6000_i2c_register()

 * register i2c bus

/*

 * tm6000_i2c_unregister()

 * unregister i2c_bus

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  tm6000-dvb.c - dvb-t support for TM5600/TM6000/TM6010 USB video capture devices

 *

 *  Copyright (C) 2007 Michel Ludwig <michel.ludwig@gmail.com>

 512 x 8 or 12 or 15 */

	mutex_lock(&tm6000_driver.open_close_mutex); */

	mutex_unlock(&tm6000_driver.open_close_mutex); */

		mutex_init(&tm6000_dev->streming_mutex); */

		mutex_destroy(&tm6000_dev->streaming_mutex); */

	mutex_destroy(&tm6000_dev->streaming_mutex); */

 attach the frontend */

	mutex_lock(&tm6000_driver.open_close_mutex); */

	mutex_unlock(&tm6000_driver.open_close_mutex); */

 SPDX-License-Identifier: GPL-2.0

 tm6000-core.c - driver for TM5600/TM6000/TM6010 USB video capture devices



 Copyright (c) 2006-2007 Mauro Carvalho Chehab <mchehab@kernel.org>



 Copyright (c) 2007 Michel Ludwig <michel.ludwig@gmail.com>

     - DVB-T support

 ms */

 Calculate delay time, 14000us for 64 bytes */

	/*

	 * FIXME:

	 * VBI lines and start/end are different between 60Hz and 50Hz

	 * So, it is very likely that we need to change the config to

	 * something that takes it into account, doing something different

	 * if (dev->norm & V4L2_STD_525_60)

 Enable video and audio */

 Disable TS input */

 Enables soft reset */

 Disable Hfilter and Enable TS Drop err */

 Enable Hfilter and disable TS Drop err */

 AP Software reset */

 Disables soft reset */

 Tuner firmware can now be loaded */

	/*

	 * FIXME: This is a hack! xc3028 "sleeps" when no channel is detected

	 * for more than a few seconds. Not sure why, as this behavior does

	 * not happen on other devices with xc3028. So, I suspect that it

	 * is yet another bug at tm6000. After start sleeping, decoding

	 * doesn't start automatically. Instead, it requires some

	 * I2C commands to wake it up. As we want to have image at the

	 * beginning, we needed to add this hack. The better would be to

	 * discover some way to make tm6000 to wake up without this hack.

 switch dvb led off */

 Disable video and audio */

 Enable TS input */

 all power down, but not the digital data port */

 switch dvb led on */

 The meaning of those initializations are unknown */

 REG  VALUE */

 48000 bits/sample, external input */

 Start of soft reset */

 End of the soft reset */

 set remote wakeup key:any key wakeup */

 Check board revision */

 Load board's initialization table */

 Just to be conservative */

 ADC MCLK = 250 Fs */

 SIF 48KHz */

 ADC MCLK = 250 Fs */

 SIF 48KHz */

 ADC MCLK = 375 Fs */

 SIF 32KHz */

 enable I2S, if we use sif or external I2S device */

 Audio crossbar setting, default SIF1 */

 Set audio input crossbar */

 Mux overflow workaround */

 Audio setting, default LINE1 */

 Set audio input */

 Offset to 0 dB */

/*

 * tm6000_realease_resource()

/*

 * Extension interface

 FIXME: tm6000_extension_devlist_lock should be a spinlock */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Linux driver for Philips webcam

   Decompression for chipset version 1

   (C) 2004-2006 Luc Saillard (luc@saillard.org)



   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx

   driver and thus may have bugs that are not present in the original version.

   Please send bug reports and support requests to <luc@saillard.org>.

   The decompression routines have been implemented by reverse-engineering the

   Nemosoft binary pwcx module. Caveat emptor.



 SPDX-License-Identifier: GPL-2.0-or-later

/* Linux driver for Philips webcam

   (C) 2004-2006 Luc Saillard (luc@saillard.org)



   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx

   driver and thus may have bugs that are not present in the original version.

   Please send bug reports and support requests to <luc@saillard.org>.

   The decompression routines have been implemented by reverse-engineering the

   Nemosoft binary pwcx module. Caveat emptor.



/* This tables contains entries for the 675/680/690 (Timon) camera, with

   4 different qualities (no compression, low, medium, high).

   It lists the bandwidth requirements for said mode by its alternate interface

   number. An alternate of 0 means that the mode is unavailable.



   There are 6 * 4 * 4 entries:

     6 different resolutions subqcif, qsif, qcif, sif, cif, vga

     6 framerates: 5, 10, 15, 20, 25, 30

     4 compression modi: none, low, medium, high



   When an uncompressed mode is not available, the next available compressed mode

   will be chosen (unless the decompressor is absent). Sometimes there are only

   1 or 2 compressed modes available; in that case entries are duplicated.

 SQCIF */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 QSIF */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 QCIF */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 SIF */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 CIF */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 VGA */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

/*

 * 16 versions:

 *   2 tables  (one for Y, and one for U&V)

 *   16 levels of details per tables

 *   8 blocs

 version 0 */

 version 0, passes 0 */

 version 0, passes 1 */

 version 1 */

 version 1, passes 0 */

 version 1, passes 1 */

 version 2 */

 version 2, passes 0 */

 version 2, passes 1 */

 version 3 */

 version 3, passes 0 */

 version 3, passes 1 */

 version 4 */

 version 4, passes 0 */

 version 4, passes 1 */

 version 5 */

 version 5, passes 0 */

 version 5, passes 1 */

 version 6 */

 version 6, passes 0 */

 version 6, passes 1 */

 version 7 */

 version 7, passes 0 */

 version 7, passes 1 */

 version 8 */

 version 8, passes 0 */

 version 8, passes 1 */

 version 9 */

 version 9, passes 0 */

 version 9, passes 1 */

 version 10 */

 version 10, passes 0 */

 version 10, passes 1 */

 version 11 */

 version 11, passes 0 */

 version 11, passes 1 */

 version 12 */

 version 12, passes 0 */

 version 12, passes 1 */

 version 13 */

 version 13, passes 0 */

 version 13, passes 1 */

 version 14 */

 version 14, passes 0 */

 version 14, passes 1 */

 version 15 */

 version 15, passes 0 */

 version 15, passes 1 */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Linux driver for Philips webcam

   Various miscellaneous functions and tables.

   (C) 1999-2003 Nemosoft Unv.

   (C) 2004-2006 Luc Saillard (luc@saillard.org)



   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx

   driver and thus may have bugs that are not present in the original version.

   Please send bug reports and support requests to <luc@saillard.org>.

   The decompression routines have been implemented by reverse-engineering the

   Nemosoft binary pwcx module. Caveat emptor.



 sqcif */

 qsif */

 qcif */

 sif */

 cif */

 vga */

 x,y -> PSZ_ */

	/* Find the largest size supported by the camera that fits into the

 No mode found, return the smallest mode we have */

 Never reached there always is at least one supported mode */

 initialize variables depending on type and decompressor */

 if (DEVICE_USE_CODEC2(pdev->type)) */ {

 SPDX-License-Identifier: GPL-2.0-or-later

/* Linux driver for Philips webcam

   Decompression for chipset version 2 et 3

   (C) 2004-2006  Luc Saillard (luc@saillard.org)



   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx

   driver and thus may have bugs that are not present in the original version.

   Please send bug reports and support requests to <luc@saillard.org>.

   The decompression routines have been implemented by reverse-engineering the

   Nemosoft binary pwcx module. Caveat emptor.





/*

 * USE_LOOKUP_TABLE_TO_CLAMP

 *   0: use a C version of this tests:  {  a<0?0:(a>255?255:a) }

 *   1: use a faster lookup table for cpu with a big cache (intel)

/*

 * UNROLL_LOOP_FOR_COPYING_BLOCK

 *   0: use a loop for a smaller code (but little slower)

 *   1: when unrolling the loop, gcc produces some faster code (perhaps only

 *   valid for intel processor class). Activating this option, automatically

 *   activate USE_LOOKUP_TABLE_TO_CLAMP

 We have 16 compressions tables */

 end of for (k=0; k<16; k++, p8++) */

 end of for (j=0; j<8; j++ , table++) */

 end of foreach compression_mode */

/*

 *

/*

 * To decode the stream:

 *   if look_bits(2) == 0:	# op == 2 in the lookup table

 *      skip_bits(2)

 *      end of the stream

 *   elif look_bits(3) == 7:	# op == 1 in the lookup table

 *      skip_bits(3)

 *      yyyy = get_bits(4)

 *      xxxx = get_bits(8)

 *   else:			# op == 0 in the lookup table

 *      skip_bits(x)

 *

 * For speedup processing, we build a lookup table and we takes the first 6 bits.

 *

 * struct {

 *   unsigned char op;	    // operation to execute

 *   unsigned char bits;    // bits use to perform operation

 *   unsigned char offset1; // offset to add to access in the table_0004 % 16

 *   unsigned char offset2; // offset to add to access in the table_0004

 * }

 *

 * How to build this table ?

 *   op == 2 when (i%4)==0

 *   op == 1 when (i%8)==7

 *   op == 0 otherwise

 *

/*

 *

 If the type or the command change, we rebuild the lookup table */

 More bits, mean more bits to encode the stream, but better quality */

 Information can be coded on a variable number of bits but never less than 8 */

 Build the static table to clamp value [0-255] */

/*

 * Copy the 4x4 image block to Y plane buffer

/*

 * Copy the 4x4 image block to a CrCb plane buffer

 *

 Unroll all loops */

/*

 * To manage the stream, we keep bits in a 32 bits register.

 * fill_nbits(n): fill the reservoir with at least n bits

 * skip_bits(n): discard n bits from the reservoir

 * get_bits(n): fill the reservoir, returns the first n bits and discard the

 *              bits from the reservoir.

 * __get_nbits(n): faster version of get_bits(n), but asumes that the reservoir

 *                 contains at least n bits. bits returned is discarded.

/*

 * Decode a 4x4 pixel block

 Very simple, the color is the same for all pixels of the square */

 This block is encoded with small pattern */

		/* [  zzzz y x x ]

		 *     xx == 00 :=> end of the block def, remove the two bits from the stream

		 *    yxx == 111

		 *    yxx == any other value

		 *

			/* 15bits [ xxxx xxxx yyyy 111 ]

			 * yyy => offset in the table8004

			 * xxx => offset in the tabled004 (tree)

 offset1 += yyyy */

 col1 = xxxx xxxx */

 Bit mask table */

			/* op == 0

			 * offset1 is coded on 3 bits

 The first byte of the stream is skipped */

 pass 1: uncompress Y component */

 Each block decode a square of 4x4 */

 pass 2: uncompress UV component */

 Each block decode a square of 4x4 */

/**

 * pwc_dec23_decompress - Uncompress a pwc23 buffer.

 * @pdev: pointer to pwc device's internal struct

 * @src: raw data

 * @dst: image output

 YUV420P image format */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Linux driver for Philips webcam

   USB and Video4Linux interface part.

   (C) 1999-2004 Nemosoft Unv.

   (C) 2004-2006 Luc Saillard (luc@saillard.org)

   (C) 2011 Hans de Goede <hdegoede@redhat.com>



   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx

   driver and thus may have bugs that are not present in the original version.

   Please send bug reports and support requests to <luc@saillard.org>.

   The decompression routines have been implemented by reverse-engineering the

   Nemosoft binary pwcx module. Caveat emptor.





/*

   This code forms the interface between the USB layers and the Philips

   specific stuff. Some adanved stuff of the driver falls under an

   NDA, signed between me and Philips B.V., Eindhoven, the Netherlands, and

   is thus not distributed in source form. The binary pwcx.o module

   contains the code that falls under the NDA.



   In case you're wondering: 'pwc' stands for "Philips WebCam", but

   I really didn't want to type 'philips_web_cam' every time (I'm lazy as

   any Linux kernel hacker, but I don't like uncomprehensible abbreviations

   without explanation).



   Oh yes, convention: to disctinguish between all the various pointers to

   device-structures, I use these names for the pointer variables:

   udev: struct usb_device *

   vdev: struct video_device (member of pwc_dev)

   pdev: struct pwc_devive *

/* Contributors:

   - Alvarado: adding whitebalance code

   - Alistar Moire: QuickCam 3000 Pro device/product ID

   - Tony Hoyle: Creative Labs Webcam 5 device/product ID

   - Mark Burazin: solving hang in VIDIOCSYNC when camera gets unplugged

   - Jk Fang: Sotec Afina Eye ID

   - Xavier Roche: QuickCam Pro 4000 ID

   - Jens Knudsen: QuickCam Zoom ID

   - J. Debert: QuickCam for Notebooks ID

   - Pham Thanh Nam: webcam snapshot button as an event input device

 simple_strtol() */

 Function prototypes and driver templates */

 hotplug device table support */

 Creative Webcam 5 */

 Creative Webcam Pro Ex */

 Logitech QuickCam 3000 Pro */

 Logitech QuickCam Notebook Pro */

 Logitech QuickCam 4000 Pro */

 Logitech QuickCam Zoom (old model) */

 Logitech QuickCam Zoom (new model) */

 Logitech QuickCam Orbit/Sphere */

 Logitech/Cisco VT Camera */

 Logitech ViewPort AV 100 */

 Logitech QuickCam */

 Philips PCA645VC */

 Philips PCA646VC */

 Askey VC010 type 2 */

 Philips PCVC675K (Vesta) */

 Philips PCVC680K (Vesta Pro) */

 Philips PCVC690K (Vesta Pro Scan) */

 Philips PCVC730K (ToUCam Fun)/PCVC830 (ToUCam II) */

 Philips PCVC740K (ToUCam Pro)/PCVC840 (ToUCam II) */

 Philips PCVC750K (ToUCam Pro Scan) */

 Philips PCVC720K/40 (ToUCam XS) */

 Philips SPC 900NC webcam */

 Philips SPC 880NC webcam */

 Sotec Afina Eye */

 Samsung MPC-C10 */

 Samsung MPC-C30 */

 Samsung SNC-35E (Ver3.0) */

 Askey VC010 type 1 */

 AME Co. Afina Eye */

 Visionite VCS-UC300 */

 Visionite VCS-UM100 */

 name */

 probe() */

 disconnect() */

**/

 Filled in later */

**************************************************************************/

 Private functions */

	/* The ToUCam Fun CMOS sensor causes the firmware to send 2 or 3 bogus

	   frames on the USB wire after an exposure change. This conditition is

	   however detected  in the cam and a bit is set in the header.

		/* Sometimes the trailer of the 730 is still sent as a 4 byte packet

		   after a short frame; this condition is filtered out specifically. A 4 byte

		   frame doesn't make sense anyway.

		   So we get either this sequence:

		   drop_bit set -> 4 byte frame -> short frame -> good frame

		   Or this one:

		   drop_bit set -> short frame -> good frame

		   So we drop either 3 or 2 frames in all!

 In case we were instructed to drop the frame, do so silently. */

 Check for underflow first */

 !drop_frames */

/* This gets called for the Isochronous pipe (video). This is done in

 * interrupt time, so it has to be fast, not crash, and not stall. Neat.

 Give up after a number of contiguous errors */

 Drop the current frame */

 Reset ISOC error counter. We did get here, after all. */

	/* vsync: 0 = don't copy data

		  1 = sync-hunt

		  2 = synched

 Compact data */

 Let's wait for an EOF */

 Shorter packet... end of frame */

 Both v4l2_lock and vb_queue_lock should be locked when calling this */

 0..3 = uncompressed..high */

	/* We first try with low compression and then retry with a higher

 Get the current alternate interface, adjust packet size */

 Search video endpoint */

 Odd error, that should be noticeable */

 Set alternate interface */

 Allocate and init Isochronuous urbs */

 devik

 link */

 All is done... */

 Unlinking ISOC buffers one by one */

 Freeing ISOC buffers one by one */

 Both v4l2_lock and vb_queue_lock should be locked when calling this */

 Must be called with vb_queue_lock hold */

**************************************************************************/

 Video4Linux functions */

**************************************************************************/

 Videobuf2 operations */

 need vmalloc since frame buffer > 128K */

 Don't allow queueing new buffers after device disconnection */

		/*

		 * Application has called dqbuf and is getting back a buffer

		 * we've filled, take the pwc data we've stored in buf->data

		 * and decompress it into a usable format, storing the result

		 * in the vb2_buffer.

 Check the device has not disconnected between prep and queuing */

 Turn on camera and set LEDS on */

 If we failed turn camera and LEDS back off */

 And cleanup any queued bufs!! */

**************************************************************************/

 USB functions */

/* This function gets called when a new device is plugged in or the usb core

 * is loaded.

 Check if we can handle this device */

	/* the interfaces are probed one by one. We are only interested in the

	   video interface (0) now.

	   Interface 1 is the Audio Control, and interface 2 Audio itself.

 CCD sensor */

 CCD sensor */

 CCD sensor */

 CCD sensor */

 CCD sensor */

 CCD sensor */

 CCD sensor */

 CCD sensor */

 Where this released? */

 Assuming CMOS */

		/* I don't know the difference between the C10 and the C30;

		   I suppose the difference is the sensor, but both cameras

		   work equally well with a type_id of 675

 This is essentially the same cam as the Sotec Afina Eye */

 CCD sensor */

 CMOS sensor */

 Not any of the know types; but the list keeps growing. */

 Allocate structure, initialize pointers, mutexes, etc. and link it to the usb_device */

 set min/max sizes correct */

 Init videobuf2 queue structure */

 Init video_device structure */

 Allocate USB command buffers */

 Query sensor type */

 Set the leds off */

 Setup initial videomode */

 Register controls (and read default values from camera */

 And powerdown the camera until streaming starts */

 Register the v4l2_device structure */

 register webcam snapshot button input device */

 The user yanked out the cable... */

 No need to keep the urbs around after disconnection */

/*

 * Initialization code & module stuff

 SPDX-License-Identifier: GPL-2.0-or-later

/* Linux driver for Philips webcam

   Decompression frontend.

   (C) 1999-2003 Nemosoft Unv.

   (C) 2004-2006 Luc Saillard (luc@saillard.org)



   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx

   driver and thus may have bugs that are not present in the original version.

   Please send bug reports and support requests to <luc@saillard.org>.

   The decompression routines have been implemented by reverse-engineering the

   Nemosoft binary pwcx module. Caveat emptor.

 Skip header */

 Raw format; that's easy... */

			/* cmd_buf is always 4 bytes, but sometimes, only the

			 * first 3 bytes is filled (Nala case). We can

		/* Uncompressed mode.

		 *

		 * We do some byte shuffling here to go from the

		 * native format to YUV420P.

	/*

	 * Compressed;

	 * the decompressor routines will write the data in planar format

	 * immediately.

 TODO & FIXME */

 No such device or address: missing decompressor */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Driver for Philips webcam

   Functions that send various control messages to the webcam, including

   video modes.

   (C) 1999-2003 Nemosoft Unv.

   (C) 2004-2006 Luc Saillard (luc@saillard.org)

   (C) 2011 Hans de Goede <hdegoede@redhat.com>



   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx

   driver and thus may have bugs that are not present in the original version.

   Please send bug reports and support requests to <luc@saillard.org>.



   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx

   driver and thus may have bugs that are not present in the original version.

   Please send bug reports and support requests to <luc@saillard.org>.

   The decompression routines have been implemented by reverse-engineering the

   Nemosoft binary pwcx module. Caveat emptor.



/*

   Changes

   2001/08/03  Alvarado   Added methods for changing white balance and

			  red/green gains

 Control functions for the cam; brightness, contrast, video mode, etc. */

 Selectors for status controls used only in this file */

 Get */

 [GS] 1 */

 Formatters for the Video Endpoint controls [GS]ET_EP_STREAM_CTL */

*******/

/* Entries for the Nala (645/646) camera; the Nala doesn't have compression

   preferences, so you either get compressed or non-compressed streams.



   An alternate value of 0 means this mode is not available at all.

 USB alternate setting */

 Compressed yes/no */

 precomputed mode table */

***************************************************************************/

 closest match of framerate */

  0-4  */

  5-9  */

 10-14 */

 15-19 */

 20-24 */

 25-29 */

 30    */

  0-4  */

  5-9  */

 10-14 */

 15-19 */

 20-24 */

 25-29 */

 30    */

 Set various parameters */

 4 fold compression */

 Let pwc-if.c:isoc_init know we don't support higher compression */

 Find a supported framerate with progressively higher compression */

 Not supported. */

 Set various parameters */

 Find a supported framerate with progressively higher compression */

 Not supported. */

 Firmware bug: video endpoint is 5, but commands are sent to endpoint 4 */

 All set and go */

 POWER */

 Not supported by Nala or Timon < release 6 */

 active */

 power save */

 The Vesta series doesn't have this call */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Linux driver for Philips webcam

   (C) 2004-2006 Luc Saillard (luc@saillard.org)



   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx

   driver and thus may have bugs that are not present in the original version.

   Please send bug reports and support requests to <luc@saillard.org>.

   The decompression routines have been implemented by reverse-engineering the

   Nemosoft binary pwcx module. Caveat emptor.



/* This tables contains entries for the 730/740/750 (Kiara) camera, with

   4 different qualities (no compression, low, medium, high).

   It lists the bandwidth requirements for said mode by its alternate interface

   number. An alternate of 0 means that the mode is unavailable.



   There are 6 * 4 * 4 entries:

     6 different resolutions subqcif, qsif, qcif, sif, cif, vga

     6 framerates: 5, 10, 15, 20, 25, 30

     4 compression modi: none, low, medium, high



   When an uncompressed mode is not available, the next available compressed mode

   will be chosen (unless the decompressor is absent). Sometimes there are only

   1 or 2 compressed modes available; in that case entries are duplicated.

 SQCIF */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 QSIF */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 QCIF */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 SIF */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 CIF */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 VGA */

 5 fps */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

/*

 * Rom table for kiara chips

 *

 * 32 roms tables (one for each resolution ?)

 *  2 tables per roms (one for each passes) (Y, and U&V)

 * 128 bytes per passes

 version 0 */

 version 0, passes 0 */

 version 0, passes 1 */

 version 1 */

 version 1, passes 0 */

 version 1, passes 1 */

 version 2 */

 version 2, passes 0 */

 version 2, passes 1 */

 version 3 */

 version 3, passes 0 */

 version 3, passes 1 */

 version 4 */

 version 4, passes 0 */

 version 4, passes 1 */

 version 5 */

 version 5, passes 0 */

 version 5, passes 1 */

 version 6 */

 version 6, passes 0 */

 version 6, passes 1 */

 version 7 */

 version 7, passes 0 */

 version 7, passes 1 */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Linux driver for Philips webcam

   USB and Video4Linux interface part.

   (C) 1999-2004 Nemosoft Unv.

   (C) 2004-2006 Luc Saillard (luc@saillard.org)

   (C) 2011 Hans de Goede <hdegoede@redhat.com>



   NOTE: this version of pwc is an unofficial (modified) release of pwc & pcwx

   driver and thus may have bugs that are not present in the original version.

   Please send bug reports and support requests to <luc@saillard.org>.

   The decompression routines have been implemented by reverse-engineering the

   Nemosoft binary pwcx module. Caveat emptor.





 Brightness, contrast, saturation, gamma */

 auto white balance, red gain, blue gain */

 check auto controls to avoid NULL deref in v4l2_ctrl_auto_cluster */

 autogain, gain */

 Note a register value if 0 means auto gain is on */

 auto exposure, exposure */

		/*

		 * def = 0 auto, def = ff manual

		 * menu idx 0 = auto, idx 1 = manual

 GET_LUM_CTL, PRESET_SHUTTER_FORMATTER is unreliable */

 CODEC2: separate auto gain & auto exposure */

 GET_LUM_CTL, PRESET_SHUTTER_FORMATTER is unreliable */

 CODEC3: both gain and exposure controlled by autogain */

 color / bw setting */

 def = 0 bw, def = ff color, menu idx 0 = color, idx 1 = bw */

 autocontour, contour */

 backlight */

 flikker rediction */

 Dynamic noise reduction */

 Save / Restore User / Factory Settings */

 Auto White Balance speed & delay */

 Motor pan / tilt / reset */

 ioctl(VIDIOC_TRY_FMT) */

 ioctl(VIDIOC_SET_FMT) */

 Only one INPUT is supported */

 For CODEC3 where autogain also controls expo */

 Force cache update */

		/*

		 * If this is a preset, update our red / blue balance values

		 * so that events get generated for the new preset values

 For CODEC2 models which have separate autogain and auto exposure */

 Force cache update */

 For CODEC2 models which have separate autogain and auto exposure */

 Force cache update */

 For CODEC3 models which have autogain controlling both gain and exposure */

 Force cache update */

 Force cache update */

 We only support two format: the raw format, and YUV */

 RAW format */

 TODO: Support raw format */

	/* If timeperframe == 0, then reset the framerate to the nominal value.

	   We pick a high framerate here, and let pwc_set_video_mode() figure

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * stk-webcam.c : Driver for Syntek 1125 USB webcam controller

 *

 * Copyright (C) 2006 Nicolas VIVIEN

 * Copyright 2007-2008 Jaime Velasco Juan <jsagarribay@gmail.com>

 *

 * Some parts are inspired from cafe_ccic.c

 * Copyright 2006-2007 Jonathan Corbet

 Some cameras have audio interfaces, we aren't interested in those */

/*

 * The stk webcam laptop module is mounted upside down in some laptops :(

 *

 * Some background information (thanks to Hans de Goede for providing this):

 *

 * 1) Once upon a time the stkwebcam driver was written

 *

 * 2) The webcam in question was used mostly in Asus laptop models, including

 * the laptop of the original author of the driver, and in these models, in

 * typical Asus fashion (see the long long list for uvc cams inside v4l-utils),

 * they mounted the webcam-module the wrong way up. So the hflip and vflip

 * module options were given a default value of 1 (the correct value for

 * upside down mounted models)

 *

 * 3) Years later I got a bug report from a user with a laptop with stkwebcam,

 * where the module was actually mounted the right way up, and thus showed

 * upside down under Linux. So now I was facing the choice of 2 options:

 *

 * a) Add a not-upside-down list to stkwebcam, which overrules the default.

 *

 * b) Do it like all the other drivers do, and make the default right for

 *    cams mounted the proper way and add an upside-down model list, with

 *    models where we need to flip-by-default.

 *

 * Despite knowing that going b) would cause a period of pain where we were

 * building the table I opted to go for option b), since a) is just too ugly,

 * and worse different from how every other driver does it leading to

 * confusion in the long run. This change was made in kernel 3.6.

 *

 * So for any user report about upside-down images since kernel 3.6 ask them

 * to provide the output of 'sudo dmidecode' so the laptop can be added in

 * the table below.

/*

 * Basic stuff

/*

 * This seems to be the shortest init sequence we

 * must do in order to find the sensor

 * Bit 5 of reg. 0x0000 here is important, when reset to 0 the sensor

 * is also reset. Maybe powers down it?

 * Rest of values don't make a difference

TODO: What means this sequence? */

 *********************************************** */

/*

 * This function is called as an URB transfert is complete (Isochronous pipe).

 * So, the traitement is done in interrupt time, so it has be fast, not crash,

 * and not stall. Neat.

FIXME Stop streaming after a while */

 no data */

		/*

		 * we found something informational from there

		 * the isoc frames have to type of headers

		 * type1: 00 xx 00 00 or 20 xx 00 00

		 * type2: 80 xx 00 00 00 00 00 00 or a0 xx 00 00 00 00 00 00

		 * xx is a sequencer which has never been seen over 0x3f

		 * imho data written down looks like bayer, i see similarities

		 * after every 640 bytes

 This marks a new frame */

 Always reuse the last buffer */

 Our buffer is full !!! */

FIXME Do something here? */

 New size of our buffer */

 -------------------------------------------- */

	/*

	* If any buffers are mapped, we cannot free them at all.

	/*

	* OK, let's do it.

 -------------------------------------------- */

 v4l file operations */

 turn off the LED */

 v4l ioctl handlers */

 This registers controls some timings, not sure of what. */

	/*

	 * Registers 0x0115 0x0114 are the size of each line (bytes),

	 * regs 0x0117 0x0116 are the height of the image.

 turn off the LED */

FIXME If they ask for zero, we must stop streaming and free */

 Arbitrary limit */

FIXME This is not correct */

 USB Stuff */

 webcam LED management */

	/* Set up the endpoint information

	 * use only the first isoc-in endpoint

 we found an isoc in endpoint */

 yes, this is ugly */

 SPDX-License-Identifier: GPL-2.0-or-later

/* stk-sensor.c: Driver for ov96xx sensor (used in some Syntek webcams)

 *

 * Copyright 2007-2008 Jaime Velasco Juan <jsagarribay@gmail.com>

 *

 * Some parts derived from ov7670.c:

 * Copyright 2006 One Laptop Per Child Association, Inc.  Written

 * by Jonathan Corbet with substantial inspiration from Mark

 * McClelland's ovcamchip code.

 *

 * Copyright 2006-7 Jonathan Corbet <corbet@lwn.net>

 *

 * This file may be distributed under the terms of the GNU General

/* Controlling the sensor via the STK1125 vendor specific control interface:

 * The camera uses an OmniVision sensor and the stk1125 provides an

 * SCCB(i2c)-USB bridge which let us program the sensor.

 * In my case the sensor id is 0x9652, it can be read from sensor's register

 * 0x0A and 0x0B as follows:

 * - read register #R:

 *   output #R to index 0x0208

 *   output 0x0070 to index 0x0200

 *   input 1 byte from index 0x0201 (some kind of status register)

 *     until its value is 0x01

 *   input 1 byte from index 0x0209. This is the value of #R

 * - write value V to register #R

 *   output #R to index 0x0204

 *   output V to index 0x0205

 *   output 0x0005 to index 0x0200

 *   input 1 byte from index 0x0201 until its value becomes 0x04

 It seems the i2c bus is controlled with these registers */

/* I don't know what does this register.

 * when it is 0x00 or 0x01, we cannot talk to the sensor,

 This is what the driver writes in windows */

/*

 * Address of the slave. Seems like the binary driver look for the

 * sensor in multiple places, attempting a reset sequence.

 * We only know about the ov9650

 From ov7670.c (These registers aren't fully accurate) */

 Registers */

 Gain lower 8 bits (rest in vref) */

 blue gain */

 red gain */

 Pieces of GAIN, VSTART, VSTOP */

 Control 1 */

 CCIR656 enable */

 QVGA/QCIF format */

 Do not skip any row */

 Skip 2 rows of 4 */

 Skip 3 rows of 4 */

 U/B Average level */

 Y/Gb Average level */

 AEC MS 5 bits */

 V/R Average level */

 Control 2 */

 Soft sleep mode */

 Product ID MSB */

 Product ID LSB */

 Control 3 */

 Byte swap */

 Enable scaling */

 Enable downsamp/crop/window */

 Control 4 */

 All "reserved" */

 Control 6 */

 More bits of AEC value */

 Clock control */

 Enable internal PLL */

 Use external clock directly */

 Mask for internal clock scale */

 Control 7 */

 Register reset */

 CIF format */

 QVGA format */

 QCIF format */

 bits 0 and 2 - RGB format */

 YUV */

 Bayer format */

 "Processed bayer" */

 Control 8 */

 Enable fast AGC/AEC */

 Unlimited AEC step size */

 Band filter enable */

 Auto gain enable */

 White balance enable */

 Auto exposure enable */

 Control 9  - gain ceiling */

 Control 10 */

 HSYNC instead of HREF */

 Suppress PCLK on horiz blank */

 Reverse HREF */

 VSYNC on clock leading edge */

 VSYNC negative */

 HSYNC negative */

 Horiz start high bits */

 Horiz stop high bits */

 Vert start high bits */

 Vert stop high bits */

 Pixel delay after HREF */

 Manuf. ID high */

 Manuf. ID low */

 Mirror / vflip */

 Mirror image */

 Vertical flip */

 AGC upper limit */

 AGC lower limit */

 AGC/AEC fast mode op region */

 Insert dummy lines (LSB) */

 Insert dummy lines (MSB) */

 HSYNC rising edge delay */

 HSYNC falling edge delay */

 HREF pieces */

 lots of stuff */

 UYVY or VYUY - see com13 */

 swap bytes in 16bit mode? */

 Control 11 */

 NIght mode enable */

 Two bit NM frame rate */

 Auto detect 50/60 Hz */

 Manual 50Hz select */

 Control 12 */

 HREF always */

 Control 13 */

 Gamma enable */

 UV saturation auto adjustment */

 Enable color matrix for RGB or YUV */

 V before U - w/TSLB */

 Control 14 */

 DCW/PCLK-scale enable */

 Edge enhancement factor */

 Control 15 */

 Data range 10 to F0 */

            01 to FE */

            00 to FF */

 RGB565 output */

 FIXME  */

 RGB555 output */

 Control 16 */

 AWB gain enable */

 Control 17 */

 AEC window - must match COM4 */

 DSP Color bar */

/*

 * This matrix defines how the colors are generated, must be

 * tweaked to adjust hue and saturation.

 *

 * Order: v-red, v-green, v-blue, u-red, u-green, u-blue

 *

 * They are nine-bit signed quantities, with the sign bit

 * stored in 0x58.  Sign for v-red is bit 0, and up from there.

 Brightness */

 Contrast control */

 Fix gain control */

 RGB 444 control */

 Turn on RGB444, overrides 5x5 */

 Empty nibble at end */

 Hist AEC/AGC control 1 */

 Hist AEC/AGC control 2 */

 50hz banding step limit */

 Hist AEC/AGC control 3 */

 Hist AEC/AGC control 4 */

 Hist AEC/AGC control 5 */

 Hist AEC/AGC control 6 */

 Hist AEC/AGC control 7 */

 60hz banding step limit */

 Returns 0 if OK */

 Do not enable fast AEC for now */

{REG_COM8, COM8_FASTAEC|COM8_AECSTEP|COM8_BFILT|COM8_AGC|COM8_AEC},*/

 Gamma curve values */

/*	{ 0x7a, 0x20 },		{ 0x7b, 0x10 },

	{ 0x7c, 0x1e },		{ 0x7d, 0x35 },

	{ 0x7e, 0x5a },		{ 0x7f, 0x69 },

	{ 0x80, 0x76 },		{ 0x81, 0x80 },

	{ 0x82, 0x88 },		{ 0x83, 0x8f },

	{ 0x84, 0x96 },		{ 0x85, 0xa3 },

	{ 0x86, 0xaf },		{ 0x87, 0xc4 },

	{ 0x88, 0xd7 },		{ 0x89, 0xe8 },

	{REG_COM15, 0xc1}, TODO */

 END MARKER */

 Probe the I2C bus and initialise the sensor chip */

 Read the manufacturer ID: ov = 0x7FA2 */

 V4L2_PIX_FMT_UYVY */

 "matrix coefficient 1" */

 "matrix coefficient 2" */

 vb */

 "matrix coefficient 4" */

 "matrix coefficient 5" */

 "matrix coefficient 6" */

 END MARKER */

 V4L2_PIX_FMT_YUYV */

 "matrix coefficient 1" */

 "matrix coefficient 2" */

 vb */

 "matrix coefficient 4" */

 "matrix coefficient 5" */

 "matrix coefficient 6" */

 END MARKER */

 V4L2_PIX_FMT_RGB565X rrrrrggg gggbbbbb */

 No RGB444 please */

 16x gain ceiling; 0x8 is reserved bit */

 "matrix coefficient 1" */

 "matrix coefficient 2" */

 vb */

 "matrix coefficient 4" */

 "matrix coefficient 5" */

 "matrix coefficient 6" */

 V4L2_PIX_FMT_RGB565 gggbbbbb rrrrrggg */

 No RGB444 please */

 16x gain ceiling; 0x8 is reserved bit */

 "matrix coefficient 1" */

 "matrix coefficient 2" */

 vb */

 "matrix coefficient 4" */

 "matrix coefficient 5" */

 "matrix coefficient 6" */

 V4L2_PIX_FMT_SRGGB8 */

 This changes color order */

 BGGR */

 {REG_TSLB, 0x08}, */ 
 END MARKER */

/*

 * Store a set of start/stop values into the camera.

/*

 * Horizontal: 11 bits, top 8 live in hstart and hstop.  Bottom 3 of

 * hstart are in href[2:0], bottom 3 of hstop in href[5:3].  There is

 * a mystery "edge offset" value in the top two bits of href.

/*

 * Vertical: similar arrangement (note: this is different from ov7670.c)

	/*

	 * We setup the sensor to output dummy lines in low-res modes,

	 * so we don't get absurdly hight framerates.

	/*FIXME sometimes the sensor go to a bad state

		/*FIXME These settings seem ignored by the sensor

		if (stk_sensor_set_hw(dev, 220, 1500, 10, 1034))

			pr_err("stk_sensor_set_hw failed (SXGA)\n");

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   au0828-vbi.c - VBI driver for au0828



   Copyright (C) 2010 Devin Heitmueller <dheitmueller@kernellabs.com>



   This work was sponsored by GetWellNetwork Inc.



 ------------------------------------------------------------------ */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for the Auvitek AU0828 USB bridge

 *

 *  Copyright (c) 2008 Steven Toth <stoth@linuxtv.org>

 FIXME: Implement join handling correctly */

		/*

		 * Due to I2C clock stretch, we need to use a lower speed

		 * on xc5000 for commands. However, firmware transfer can

		 * speed up to 400 KHz.

 Set the I2C clock */

 Hardware needs 8 bit addresses */

 Deal with i2c_scan */

		/* The analog tuner detection code makes use of the SMBUS_QUICK

		   message (which involves a zero length i2c write).  To avoid

		   checking the status register when we didn't strobe out any

		   actual bytes to the bus, just do a read check.  This is

		   consistent with how I saw i2c device checking done in the

 Strobe the byte into the bus */

 Reset strobe trigger */

 FIXME: Implement join handling correctly */

	/*

	 * Due to xc5000c clock stretch, we cannot use full speed at

	 * readings from xc5000, as otherwise they'll fail.

 Set the I2C clock */

 Hardware needs 8 bit addresses */

 Deal with i2c_scan */

 read */

 write then read from same address */

 write */

 ----------------------------------------------------------------------- */

 init + register i2c adapter */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Auvitek AU0828 USB Bridge (Analog video support)

 *

 * Copyright (C) 2009 Devin Heitmueller <dheitmueller@linuxtv.org>

 * Copyright (C) 2005-2008 Auvitek International, Ltd.

/* Developer Notes:

 *

 * The hardware scaler supported is unimplemented

 * AC97 audio support is unimplemented (only i2s audio mode)

 *

/* ------------------------------------------------------------------

	Videobuf operations

/*

 * IRQ callback, called by URB callback

 success */

 NAK */

 kill */

 unknown error */

 Copy data from URB */

 Reset urb buffers */

/*

 * Stop and Deallocate URBs

/*

 * Allocate URBs and start IRQ

 allocate urbs and transfer buffers */

 submit urbs and enables IRQ */

/*

 * Announces that a buffer were filled and request the next

 Advice that buffer was filled */

/*

 * Identify the buffer header type and properly handles

 Assumes 16-bit depth @@@@ */

 Interlaces frame */

 We have enough data to check for greenscreen */

/*

 * video-buf generic routine to get the next available buffer

 Get the next buffer */

 Cleans up buffer - Useful for testing for frame/URB loss */

 Make sure the bottom field populates the second half of the frame */

/*

 * video-buf generic routine to get the next available VBI buffer

 Get the next buffer */

 Cleans up buffer - Useful for testing for frame/URB loss */

/*

 * Controls the isoc copy of each urb packet

 VBI */

 Video */

				/* As long as isoc traffic is arriving, keep

 Create the v4l2_device */

 This control handler will inherit the controls from au8522 */

 Enable i2s mode */

/*

 * Auvitek au0828 analog stream enable

 set au0828 interface0 to AS5 here again */

 set x position */

 set y position */

/*

 * Some operations needs to stop current streaming

 If we were doing ac97 instead of i2s, it would go here...*/

/* ------------------------------------------------------------------

   V4L2 interface

/*

 * au0828_analog_unregister

 * unregister v4l2 devices

 No analog TV */

/* This function ensures that video frames continue to be delivered even if

   the ITU-656 input isn't receiving any data (thereby preventing applications

 Blank green frame */

 Cancel timeout thread in case they didn't call streamoff */

 Cancel timeout thread in case they didn't call streamoff */

		/*

		 * Avoid putting tuner in sleep if DVB or ALSA are

		 * streaming.

		 *

		 * On most USB devices  like au0828 the tuner can

		 * be safely put in sleep state here if ALSA isn't

		 * streaming. Exceptions are some very old USB tuner

		 * models such as em28xx-based WinTV USB2 which have

		 * a separate audio output jack. The devices that have

		 * a separate audio output jack have analog tuners,

		 * like Philips FM1236. Those devices are always on,

		 * so the s_power callback are silently ignored.

		 * So, the current logic here does the following:

		 * Disable (put tuner to sleep) when

		 * - ALSA and DVB aren't streaming.

		 * - the last V4L2 file handler is closed.

		 *

		 * FIXME:

		 *

		 * Additionally, this logic could be improved to

		 * disable the media source if the above conditions

		 * are met and if the device:

		 * - doesn't have a separate audio out plug (or

		 * - doesn't use a silicon tuner like xc2028/3028/4000/5000).

		 *

		 * Once this additional logic is in place, a callback

		 * is needed to enable the media source and power on

		 * the tuner, for radio to work.

		/* When close the device, set the usb intf0 into alt0 to free

 Must be called with dev->lock held */

	/* If we've never sent the standard in tuner core, do so now.

	   We don't do this at device probe because we don't want to

	/* If they are demanding a format other than the one we support,

 format->fmt.pix.width only support 720 and height 480 */

 maybe set new image format, driver current only support 720*480 */

 set the device capabilities */

 NTSC/PAL */

	/*

	 * FIXME: when we support something other than 60Hz standards,

	 * we are going to have to make the au0828 bridge adjust the size

	 * of its capture buffer, which is currently hardcoded at 720x480

			/* Make sure we leave it turned on if some

	/*

	 * Input has been changed. Disable the media source

	 * associated with the old input and enable source

	 * for the newly set input

 Get the actual set (and possibly clamped) frequency */

 RAW VBI ioctls */

 stop urbs */

 If we were doing ac97 instead of i2s, it would go here...*/

 submit urbs */

 Setup Videobuf2 for Video capture */

 Setup Videobuf2 for VBI capture */

 Initialize Video and VBI pads */

 Create entities for each input connector */

 Just to shut up a warning */

*************************************************************************/

 No analog TV */

 set au0828 usb interface0 to as5 */

 Figure out which endpoint has the isoc interface */

 we find our isoc in endpoint */

 init video dma queues */

 Default input is TV Tuner */

 Fill the video capture device struct */

 Setup the VBI device */

 Init entities at the Media Controller */

 initialize videobuf2 stuff */

 Register the v4l2 device */

 Register the vbi device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for the Auvitek USB bridge

 *

 *  Copyright (c) 2008 Steven Toth <stoth@linuxtv.org>

 Due to enum tuner_pad_index */

/*

 * 1 = General debug messages

 * 2 = USB handling

 * 4 = I2C related

 * 8 = Bridge related

 * 16 = IR related

 USB Direction */

 cp must be memory that has been allocated by kmalloc */

		/* the host controller requires heap allocated memory, which

 Remove au0828 entity_notify callbacks */

 clear enable_source, disable_source */

 I2C */

	/* there is a small window after disconnect, before

	   dev->usbdev is NULL, for poll (e.g: IR) try to access

	   the device and fill the dmesg with error messages.

	   Set the status so poll routines can check and avoid

	   access after disconnect.

 Digital TV */

		/*

		 * No need to call au0828_usb_release() if V4L2 is enabled,

		 * as this is already called via au0828_usb_v4l2_release()

		/*

		 * Called during au0828 probe time to connect

		 * entities that were created prior to registering

		 * the notify handler. Find mixer and decoder.

 In case, Mixer is added first, find mixer and create link */

 Tuner link can be shared by audio, video, and VBI */

 Callers should hold graph_mutex */

	/*

	 * For Audio and V4L2 entity, find the link to which decoder

	 * is the sink. Look for an active link between decoder and

	 * source (tuner/s-video/Composite), if one exists, nothing

	 * to do. If not, look for any  active links between source

	 * and any other entity. If one exists, source is busy. If

	 * source is free, setup link and start pipeline from source.

	 * For DVB FE entity, the source for the link is the tuner.

	 * Check if tuner is available and setup link and start

	 * pipeline.

 Analog isn't configured or register failed */

		/*

		 * Default input is tuner and default input_type

		 * is AU0828_VMUX_TELEVISION.

		 *

		 * There is a problem when s_input is called to

		 * change the default input. s_input will try to

		 * enable_source before attempting to change the

		 * input on the device, and will end up enabling

		 * default source which is tuner.

		 *

		 * Additional logic is necessary in au0828 to detect

		 * that the input has changed and enable the right

		 * source. au0828 handles this case in its s_input.

		 * It will disable the old source and enable the new

		 * source.

		 *

 unknown input - let user select input */

 Is there an active link between sink and source */

			/* This check is necessary to handle multiple

			 * enable_source calls from v4l_ioctls during

			 * the course of video/vbi application run-time.

			/* Either ALSA or Video own tuner. Sink is the same

			 * for both. Allow sharing the active link between

			 * their common source (tuner) and sink (decoder).

			 * Starting pipeline between sharing entity and sink

			 * will fail with pipe mismatch, while owner has an

			 * active pipeline. Switch pipeline ownership from

			 * user to owner when owner disables the source.

 save the user info to use from disable */

 Check sink, and source */

 activate link between source and sink and start pipeline */

	/* save link state to allow audio and video share the link

	 * and not disable the link while the other is using it.

	 * active_link_owner is used to deactivate the link.

 Callers should hold graph_mutex */

	/* link is active - stop pipeline from source

	 * (tuner/s-video/Composite) to the entity

	 * When DVB/s-video/Composite owns tuner, it won't be in

	 * shared state.

		/*

		 * Prevent video from deactivating link when audio

		 * has active pipeline and vice versa. In addition

		 * handle the case when more than one video/vbi

		 * application is sharing the link.

			/* Handle video device users > 1

			 * When audio owns the shared link with

			 * more than one video users, avoid

			 * disabling the source and/or switching

			 * the owner until the last disable_source

			 * call from video _close(). Use dev->users to

			 * determine when to switch/disable.

 video device has users > 1 */

 video owns the link and has users > 1 */

 stop pipeline */

 link user is now the owner */

 video/vbi owns the link and has users > 1 */

 stop pipeline */

 register media device */

		/*

		 * Call au0828_media_graph_notify() to connect

		 * audio graph to our graph. In this case, audio

		 * driver registered the device and there is no

		 * entity_notify to be called when new entities

		 * are added. Invoke it now.

	/*

	 * Find tuner, decoder and demod.

	 *

	 * The tuner and decoder should be cached, as they'll be used by

	 *	au0828_enable_source.

	 *

	 * It also needs to disable the link between tuner and

	 * decoder/demod, to avoid disable step when tuner is requested

	 * by video or audio. Note that this step can't be done until dvb

	 * graph is created during dvb register.

 Disable link between tuner->demod and/or tuner->decoder */

 register entity_notify callback */

 set enable_source */

	/*

	 * Make sure we have 480 Mbps of bandwidth, otherwise things like

	 * video stream wouldn't likely work, since 12 Mbps is generally

	 * not enough even for most Digital TV streams.

 Initialize the media controller */

 Power Up the bridge */

 Bring up the GPIO's and supporting devices */

 I2C */

 Setup */

	/*

	 * Store the pointer to the au0828_dev so it can be accessed in

	 * au0828_usb_disconnect

 Analog TV */

 Digital TV */

 Remote controller */

 FIXME: should suspend also ATV/DTV */

 Power Up the bridge */

 Bring up the GPIO's and supporting devices */

 FIXME: should resume also ATV/DTV */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for the Auvitek USB bridge

 *

 *  Copyright (c) 2008 Steven Toth <stoth@linuxtv.org>

 off */

 yellow */

 green */

 dB */ * 10,

 dB */ * 10,

 dB */ * 10,

-------------------------------------------------------------------*/

	/* See if the stream is corrupted (to work around a hardware

		/* The URB handler has fired, so cancel timer which would

		 * restart endpoint if we hadn't

 Feed the transport payload into the kernel demux */

 Clean the buffer before we requeue */

 Requeue URB */

 If we don't valid data within 1 second, restart stream */

 Start transport */

 We ran out of memory... */

 Stop transport */

 Stop transport */

 Start transport */

		/*

		 * We can't hold a mutex here, as the restart_streaming

		 * kthread may also hold it.

 register adapter */

 register frontend */

 Hook dvb frontend */

 register demux stuff */

 register network adapter */

/* All the DVB attach calls go here, this function gets modified

 * for each new card. No other function in this file needs

 * to change.

 init frontend */

 define general-purpose callback pointer */

 register everything */

 Stop transport */

 suspend frontend - does tuner and fe to sleep */

 resume frontend - does fe and tuner init */

 Start transport */

 SPDX-License-Identifier: GPL-2.0+

 handle au0828 IR remotes via linux kernel input layer.



 Copyright (c) 2014 Mauro Carvalho Chehab <mchehab@samsung.com>

 Copyright (c) 2014 Samsung Electronics Co., Ltd.



 Based on em28xx-input.c.

 poll decoder */

 i2c slave address of external device (if used) */

/*

 * AU8522 has a builtin IR receiver. Add functions to get IR from it

 Nothing to do, just return */

 Remote Controller time units */

 us */

 do nothing if device is disconnected */

 Check IR int */

 Be sure that IR is enabled */

 Something arrived. Get the data */

 Disable IR */

 Enable IR */

			/*

			 * Fix an au8522 bug: the first pulse event

			 * is lost. So, we need to fake it, based on the

			 * protocol. That means that not all raw decoders

			 * will work, as we need to add a hack for each

			 * protocol, based on the first space.

			 * So, we only support RC5 and NEC.

 NEC protocol */

 RC5 protocol */

/*

 * Generic IR code

 Enable IR */

 do nothing if device is disconnected */

 Disable IR */

 record handles to ourself */

 external i2c device */

 This is how often we ask the chip for IR information */

 ms */

 init input device */

 all done */

 skip detach on non attached boards */

 done */

 Disable IR */

 Enable IR */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for the Auvitek USB bridge

 *

 *  Copyright (c) 2008 Steven Toth <stoth@linuxtv.org>

	/* Because the HVR-950q shares an i2s bus between the cs5340 and the

/*

 * WARNING: There's a quirks table at sound/usb/quirks-table.h

 * that should also be updated every time a new device with V4L2 support

 * is added here.

/* Tuner callback function for au0828 boards. Currently only needed

 * for HVR1500Q, which has an xc5000 tuner.

 Tuner Reset Command from xc5000 */

 Drive the tuner into reset and out */

 Should never be here */

 Make sure we support the board model */

 WinTV-HVR950q (Retail, IR, ATSC/QAM */

 WinTV-HVR950q (Retail, IR, ATSC/QAM and analog video */

 WinTV-HVR950q (Retail, IR, ATSC/QAM and analog video */

 WinTV-HVR950q (OEM, IR, ATSC/QAM and analog video */

 WinTV-HVR950q (OEM, IR, ATSC/QAM and analog video */

 WinTV-HVR950q (OEM, IR, ATSC/QAM and analog video */

 WinTV-HVR950q (OEM, IR, ATSC/QAM and analog video */

 WinTV-HVR950q (OEM, No IR, ATSC/QAM and analog video */

 WinTV-HVR950q (Retail, IR, ATSC/QAM and analog video */

 WinTV-HVR950q (OEM, No IR, ATSC/QAM and analog video */

 WinTV-HVR950q (OEM, No IR, ATSC/QAM and analog video */

 WinTV-HVR950q (OEM, No IR, ATSC/QAM and analog video */

 WinTV-HVR850 (Retail, IR, ATSC and analog video */

 WinTV-HVR950q (OEM, No IR, ATSC/QAM */

		/* Load the analog demodulator driver (note this would need to

		   be abstracted out if we ever need to support a different

 Setup tuners */

 Load the tuner module, which does the attach */

/*

 * The bridge has between 8 and 12 gpios.

 * Regs 1 and 0 deal with output enables.

 * Regs 3 and 2 deal with direction.

		/* GPIO's

		 * 4 - CS5340

		 * 5 - AU8522 Demodulator

		 * 6 - eeprom W/P

		 * 7 - power supply

		 * 9 - XC5000 Tuner

		/* Set relevant GPIOs as outputs (leave the EEPROM W/P

		   as an input since we will never touch it and it has

 Into reset */

 Bring power supply out of reset */

		/* Bring xc5000 and au8522 out of reset (leave the

 xc5000 */

 PS + au8522 */

		/* GPIO's

		 * 6 - ?

		 * 8 - AU8522 Demodulator

		 * 9 - XC5000 Tuner

 Into reset */

 Out of reset */

 table of devices that work with this driver */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Syntek STK1135 subdriver

 *

 * Copyright (c) 2013 Ondrej Zary

 *

 * Based on Syntekdriver (stk11xx) by Nicolas VIVIEN:

 *   http://syntekdriver.sourceforge.net

 specific webcam descriptor */

 !! must be the first item */

 default mode (this driver supports variable resolution) */

 -- read a register -- */

 -- write a register -- */

 this function is called at probe time */

 maximum retry count */

 repeat if BUSY or WRITE/READ not finished */

 begin read */

 wait until finished */

 load address and data registers */

 begin write */

 wait until finished */

 configure MT9M112 sensor */

 restart&reset, chip enable, reserved */

 mode ctl: AWB on, AE both, clip aper corr, defect corr, AE */

 B-R thresholds, */

 AWB */

 Cb and Cr limits */

 lum limits, RGB gain */

 R, B limit */

 mtx adj lim, adv ctl */

 wide gates */

 Color correction */

 imager gains base, delta, delta signs */

 AWB adv ctl 2, gain offs */

 base matrix signs, scale K1-5, K6-9 */

 base matrix coef */

K1-3*/

K4-6*/

K7-9*/

 delta mtx signs */

 delta matrix coef */

D1-3*/

D4-6*/

D7-9*/

 enable & disable manual WB to apply color corr. settings */

 Lens shading correction */

 control */

 vertical knee 0, 2+1, 4+3 */

 R */

 G */

 B */

 horizontal knee 0, 2+1, 4+3, 5 */

 R .. */

 .. R */

 G .. */

 .. G */

 B .. */

 .. B */

 vertical knee 6+5, 8+7 */

 R */

 G */

 B */

 horizontal knee 7+6, 9+8, 10 */

 R */

 G */

 B */

 enable lens shading correction */

 Gamma correction - context A */

 Gamma correction - context B */

 output format: RGB, invert output pixclock, output bayer */

 for context A, B */

 format control - enable bayer row flip */

 AE A, B */

 default prg conf, prg ctl - by 0x2d2, prg advance - PA1 */

 AE tgt ctl, gain lim */

 PLL */

 clk ctl - enable PLL (clear bit 14) */

 PLL M=128, N=3, P=1 */

 disable PLL bypass (clear bit 15) */

 horiz blanking B, A */

 AE line size, shutter delay limit */

 for context A */

 for context B */

 shutter width basis 60Hz, 50Hz */

 for context A */

 for context B */

 flicker 60Hz, 50Hz */

 reserved */

 flicker, AE gain limits, gain zone limits */

 vert blanking A */

 set output size */

 context A (half readout speed)*/

 set read mode context A */

 set resize, read mode, vblank, hblank context A */

 context B (full readout speed) */

 set read mode context B */

 set resize, read mode, vblank, hblank context B */

 configure SCLKOUT */

 set 1 clock per pixel */

 and positive edge clocked pulse high when pixel counter = 0 */

 enable CLKOUT for sensor */

 disable STOP clock */

 set lower 8 bits of PLL feedback divider */

 set other PLL parameters */

 enable timing generator */

 enable PLL */

 set serial interface clock divider (30MHz/0x1f*16+2) = 60240 kHz) */

 wait a while for sensor to catch up */

 set capture end Y position to 0 */

 disable capture */

 enable sensor standby and diasble chip enable */

 disable PLL */

 disable timing generator */

 enable STOP clock */

 disable CLKOUT for sensor */

 disable sensor (GPIO5) and enable GPIO0,3,6 (?) - sensor standby? */

 this function is called at probe and resume time */

 set GPIO3,4,5,6 direction to output */

 enable sensor (GPIO5) */

 disable ROM interface */

 enable interrupts from GPIO8 (flip sensor) and GPIO9 (???) */

 enable remote wakeup from GPIO9 (???) */

 reset serial interface */

 set sensor address */

 disable alt 2-wire serial interface */

 read sensor ID */

 -- start the camera -- */

 enable sensor (GPIO5) */

 set capture start position X = 0, Y = 0 */

 set capture end position */

 set 8-bit mode */

 enable capture */

 isoc packet */

 iso packet length */

 GPIO 8 is flip sensor (1 = normal position, 0 = flipped to back) */

 it's a switch, needs software debounce */

 check sequence number (not present in new frame packets) */

 resync sequence and discard packet */

 new frame */

 the header is longer */

 round up to even numbers */

 sub-driver description */

 -- module initialisation -- */

 ASUS laptop, MT9M112 sensor */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Benq DC E300 subdriver

 *

 * Copyright (C) 2009 Jean-Francois Moine (http://moinejf.free.fr)

moinejf.free.fr>");

 specific webcam descriptor */

 !! must be the first item */

 -- write a register -- */

 this function is called at probe time */

 this function is called at probe and resume time */

 -- start the camera -- */

 create 4 URBs - 2 on endpoint 0x83 and 2 on 0x082 */

 isoc packet */

 iso packet length */

 unused */

 reception of an URB */

 disconnection */

 if this is a control URN (ep 0x83), wait */

 scan both received URBs */

 check the packet status and length */

		/*

		 * The images are received in URBs of different endpoints

		 * (0x83 and 0x82).

		 * Image pieces in URBs of ep 0x83 are continuated in URBs of

		 * ep 0x82 of the same index.

		 * The packets in the URBs of endpoint 0x83 start with:

		 *	- 80 ba/bb 00 00 = start of image followed by 'ff d8'

		 *	- 04 ba/bb oo oo = image piece

		 *		where 'oo oo' is the image offset

						(not checked)

		 *	- (other -> bad frame)

		 * The images are JPEG encoded with full header and

		 * normal ff escape.

		 * The end of image ('ff d9') may occur in any URB.

		 * (not checked)

 new image */

 resubmit the URBs */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * gspca ViCam subdriver

 *

 * Copyright (C) 2011 Hans de Goede <hdegoede@redhat.com>

 *

 * Based on the usbvideo vicam driver, which is:

 *

 * Copyright (c) 2002 Joe Burks (jburks@wavicle.org),

 *                    Chris Cheney (chris.cheney@gmail.com),

 *                    Pavel Machek (pavel@ucw.cz),

 *                    John Tyner (jtyner@cs.ucr.edu),

 *                    Monroe Williams (monroe@pobox.com)

 !! must be the first item */

/* The vicam sensor has a resolution of 512 x 244, with I believe square

   pixels, but this is forced to a 4:3 ratio by optics. So it has

 2 modes with somewhat more square pixels */

 This mode has extremely non square pixels, testing use only */

/*

 *  request and read a block of data

 low nibble x-scale */

 high nibble y-scale */

 unknown, does not seem to do anything */

 vend? */

 Yes 242 not 240 */

 vend? */

 Up to 244 lines with req_data[3] == 0x08 */

 vend? */

 Frame rate maxed out, use partial frame expo time */

 Modify frame rate */

 vstart */

 bytes 9-15 do not seem to affect exposure or image quality */

 successful, it returns 0, otherwise  negative */

/*

 * This function is called as a workqueue function and runs whenever the camera

 * is streaming data. Because it is a workqueue function it is allowed to sleep

 * so we can use synchronous USB calls. To avoid possible collisions with other

 * threads attempting to use gspca_dev->usb_buf we take the usb_lock when

 * performing USB operations using it. In practice we don't really need this

 * as the cameras controls are only written from the workqueue.

		/* Note the frame header contents seem to be completely

		   constant, they do not change with either image, or

		   settings. So we simply discard it. The frames have

		   a very similar 64 byte footer, which we don't even

 This function is called at probe time just before sd_init */

 We don't use the buffer gspca allocates so make it small. */

 this function is called at probe and resume time */

 Set up for getting frames. */

 called on streamoff with alt==0 and on disconnect */

 the usb_lock is held at entry - restore on exit */

 wait for the work queue to terminate */

 This waits for vicam_dostream to finish */

 Table of supported USB devices */

 sub-driver description */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SN9C2028 library

 *

 * Copyright (C) 2009 Theodore Kilgore <kilgota@auburn.edu>

 specific webcam descriptor */

 !! must be the first item */

 autogain and gain control cluster */

 length to read. 0 means no reply requested */

 How to change the resolution of any of the VGA cams is unknown */

 No way to change the resolution of the CIF cams is known */

 the bytes to write are in gspca_dev->usb_buf */

	/* in general, the first byte of the response is the first byte of

 this function is called at probe time */

 this function is called at probe and resume time */

 This byte is gain */,

 standalone gain control */

 autogain */

 width  352 */

 height 288 */

 {{0x13, 0x27, 0x01, 0x28, 0x00, 0x00}, 4}, */

 red gain ?*/

 {{0x13, 0x28, 0x01, 0x00, 0x00, 0x00}, 4}, */

 {{0x13, 0x29, 0x01, 0x0c, 0x00, 0x00}, 4}, */

 {{0x13, 0x2c, 0x01, 0x02, 0x00, 0x00}, 4}, */

 {{0x13, 0x2e, 0x01, 0x09, 0x00, 0x00}, 4}, */

don't mess with*/

{{0x11, 0x04, 0x06, 0x00, 0x00, 0x00}, 4}, observed */

 brighter */

{{0x11, 0x05, 0x65, 0x00, 0x00, 0x00}, 4}, observed */

 brighter */

 observed */

{{0x11, 0x08, 0x06, 0x00, 0x00, 0x00}, 4}, observed */

 {{0x11, 0x0f, 0x00, 0x00, 0x00, 0x00}, 4}, */

		/* brightness or gain. 0 is default. 4 is good

hstart or hoffs*/

 {{0x1b, 0x02, 0x06, 0x00, 0x00, 0x00}, 1}, observed */

 brighter */

 {{0x1b, 0x13, 0x01, 0x00, 0x00, 0x00}, 1}, observed */

 compresses */

 Camera should start to capture now. */

 The entire sequence below seems redundant */

		/* {{0x13, 0x20, 0x01, 0x00, 0x00, 0x00}, 4},

		{{0x13, 0x21, 0x01, 0x00, 0x00, 0x00}, 4},

		{{0x13, 0x22, 0x01, 0x06, 0x00, 0x00}, 4},

		{{0x13, 0x23, 0x01, 0x02, 0x00, 0x00}, 4},

		{{0x13, 0x24, 0x01, 0x00, 0x00, 0x00}, 4},

		{{0x13, 0x25, 0x01, 0x16, 0x00, 0x00}, 4}, width?

		{{0x13, 0x26, 0x01, 0x12, 0x00, 0x00}, 4}, height?

		{{0x13, 0x27, 0x01, 0x68, 0x00, 0x00}, 4}, subsample?

		{{0x13, 0x28, 0x01, 0x00, 0x00, 0x00}, 4},

		{{0x13, 0x29, 0x01, 0x20, 0x00, 0x00}, 4},

		{{0x13, 0x2a, 0x01, 0x00, 0x00, 0x00}, 4},

		{{0x13, 0x2b, 0x01, 0x00, 0x00, 0x00}, 4},

		{{0x13, 0x2c, 0x01, 0x02, 0x00, 0x00}, 4},

		{{0x13, 0x2d, 0x01, 0x03, 0x00, 0x00}, 4},

		{{0x13, 0x2e, 0x01, 0x0f, 0x00, 0x00}, 4},

		{{0x13, 0x2f, 0x01, 0x0c, 0x00, 0x00}, 4},

		{{0x12, 0x34, 0x01, 0x00, 0x00, 0x00}, 4},

		{{0x13, 0x34, 0x01, 0xa1, 0x00, 0x00}, 4},

 width/8 */

 height/8 */

		/* {{0x13, 0x27, 0x01, 0x68, 0x00, 0x00}, 4}, subsample?

		 * {{0x13, 0x28, 0x01, 0x1e, 0x00, 0x00}, 4}, does nothing

		/* {{0x13, 0x29, 0x01, 0x22, 0x00, 0x00}, 4},

		 * causes subsampling

 use compression */

 Camera should start to capture now. */

 width  */

 height */

 vstart? */

 hstart? */

 Camera should start to capture now. */

 "preliminary" width and height settings */

 real width */

 real height */

 Camera should start to capture now. */

 Camera should start to capture now. */

		/*

		 * Above is changed from OEM 0x0b. Fixes Bayer tiling.

		 * Presumably gives a vertical shift of one row.

 Above seems to do horizontal shift. */

 Above three commands seem to relate to brightness. */

		/* {{0x13, 0x25, 0x01, 0x28, 0x00, 0x00}, 4},

		{{0x13, 0x26, 0x01, 0x1e, 0x00, 0x00}, 4},

 Above is brightness; OEM driver setting is 0x10 */

 Include sn9c2028 sof detection functions */

 isoc packet */

 iso packet length */

 finish decoding current frame */

 Start next frame. */

 sub-driver description */

 -- module initialisation -- */

 Genius Smart 300, version 2 */

 Genius Videocam Live v2  */

 The Genius Smart is untested. I can't find an owner ! */

 {USB_DEVICE(0x0c45, 0x8000)}, DC31VC, Don't know this camera */

 Wild Planet digital spy cam */

 Several small CIF cameras */

 {USB_DEVICE(0x0c45, 0x8006)}, Unknown VGA camera */

 Mini-Shotz ms-350 */

 Vivicam 3350B */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * T613 subdriver

 *

 * Copyright (C) 2010 Jean-Francois Moine (http://moinejf.free.fr)

 *

 *Notes: * t613  + tas5130A

 *	* Focus to light do not balance well as in win.

 *	  Quality in win is not good, but its kinda better.

 *	 * Fix some "extraneous bytes", most of apps will show the image anyway

 *	 * Gamma table, is there, but its really doing something?

 *	 * 7~8 Fps, its ok, max on win its 10.

 *			Costantino Leandro

 !! must be the first item */

 awb / color gains control cluster */

 must verify if this is the actual model */

 HDG: broken with my test cam, so lets disable it */

 HDG: broken with my test cam, so lets disable it */

 sensor specific data */

 this could be removed later */

 Normal */

 Repujar */

 Monochrome */

 Sepia */

 Croquis */

 Sun Effect */

 Negative */

 gamma table from cam1690.ini */

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 10 */

 11 */

 12 */

 13 */

 14 */

 15 */

 read 1 byte */

 request */

 value */

 write values to consecutive registers */

 table end */

 continue? */

 this function is called at probe time */

 was 0xc0 */

 AWB off */

 no flicker */

 60Hz */

 this function is called at probe and resume time */

	/* some of this registers are not really needed, because

	 * they are overridden by setbrigthness, setcontrast, etc.,

	 * but won't hurt anyway, and can help someone with similar webcam

 OK */

/* Is this really needed?

 (some differences / ms-drv) */

 640x480 (0x00) */

 352x288 */

 320x240 */

 176x144 */

	case 4:		 * 160x120 */

 just in case and to keep sync with logs (for mine) */

 If the last button state is pressed, release it now! */

 isoc packet */

 iso packet length */

		/* Control Packet, after this came the header again,

		 * but extra bytes came in the packet before this,

	/* Activate lowlight, some apps don't bring up the

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ov534-ov7xxx gspca driver

 *

 * Copyright (C) 2008 Antonio Ospite <ospite@studenti.unina.it>

 * Copyright (C) 2008 Jim Paris <jim@jtan.com>

 * Copyright (C) 2009 Jean-Francois Moine http://moinejf.free.fr

 *

 * Based on a prototype written by Mark Ferrell <majortrips@gmail.com>

 * USB protocol reverse engineered by Jim Paris <jim@jtan.com>

 * https://jim.sh/svn/jim/devl/playstation/ps3/eye/test/

 *

 * PS3 Eye camera enhanced by Richard Kaswy http://kaswy.free.fr

 * PS3 Eye camera - brightness, contrast, awb, agc, aec controls

 *                  added by Max Thrun <bear24rw@gmail.com>

 * PS3 Eye camera - FPS range extended by Joseph Howse

 *                  <josephhowse@nummist.com> https://nummist.com

 sensor address */

 specific webcam descriptor */

 !! must be the first item */

 gain control cluster */

 exposure control cluster */

 320x240 */

 640x480 */

 320x240 SGBRG8 */

 640x480 SGBRG8 */

 comments from the ms-win file apollo7670.set */

 str1 */

 HSize 640 */

 VSize 480 */

 enable Audio Suspend mode */

 Input YUV */

 enable PRE */

 enable Audio Suspend mode */

 this solves failure of "SuspendResumeTest" */

 enable 1.8V Suspend */

 turn on JPEG */

 GPIO[8]:Input */

	{0x94, 0x11},	/* If the default setting is loaded when

 set Gamma=1.6 below */

 gain max 16x */

 jfm: auto sharpness + auto de-noise  */

 Night mode trigger point */

 str59 JPG */

 turn on JPEG */

 for higher clock rate(30fps) */

 enable Audio Suspend mode */

 enable PRE */

 CIF VSize LSB[2:0] */

 output YUV */

	{0x34, 0x05},	 * enable Audio Suspend mode (?) */

 H/V divider=0 */

 input H=640/4 */

 input V=480/4 */

 offset X=0 */

 offset Y=0 */

 H/V size[8]=0 */

 H-size[9]=0 */

 output size[9:8]=0 */

 output H=640/4 */

 output V=480/4 */

 str86 JPG */

 turn on JPEG */

 CIF HSize 640 */

 CIF VSize 480 */

 CIF VSize LSB[2:0] */

 output YUV */

 enable Audio Suspend mode */

 output YUV and Enable DCW */

 enable PRE */

 indirect addressing */

 output YUV422 */

 H/V divider=/2; plus DCW AVG */

 DCW input H=640/4 */

 DCW input V=480/4 */

 offset X=0 */

 offset Y=0 */

 H/V size[8]=0 */

 H-size[9]=0 */

 DCW output size[9:8]=0 */

 DCW output H=320/4 */

 DCW output V=240/4 */

 turn on UVC header */

 .. */

fixme: better have a delay?*/

 AWB - was e0 */

 com8 */

 AWB */

 De-noise threshold */

		/*

		 * Make sure the result is zeroed to avoid uninitialized

		 * values.

/* Two bits control LED: 0x21 bit 7 and 0x23 bit 7.

 output a bridge sequence (reg - val) */

 output a sensor sequence (reg - val) */

 ov772x specific controls */

 640x480 */

 320x240 */

		{205, 0x01, 0xc1, 0x02},  * 205 FPS: video is partly corrupt */

 187 FPS or below: video is valid */

 TBD */

		/* According to the datasheet the registers expect HUESIN and

		 * HUECOS to be the result of the trigonometric functions,

		 * scaled by 0x80.

		 *

		 * The 0x7fff here represents the maximum absolute value

		 * returned byt fixp_sin and fixp_cos, so the scaling will

		 * consider the result like in the interval [-1.0, 1.0].

 U saturation */

 V saturation */

 bright */

 contras */

	case 0x30: */

 set only aec[9:2] */

 aech */

		/* 'val' is one byte and represents half of the exposure value

		 * we are going to set into registers, a two bytes value:

		 *

		 *    MSB: ((u16) val << 1) >> 8   == val >> 7

		 *    LSB: ((u16) val << 1) & 0xff == val << 1

 get only aec[9:2] */

 aech */

 agc + aec */

 agc */

 Auto de-noise threshold */

 De-noise threshold */

 mvfp */

 insert dummy to 25fps for 50Hz */

 this function is called at probe time */

 case V4L2_CID_GAIN: */

 case V4L2_CID_EXPOSURE: */

 parameters with different values between the supported sensors */

 this function is called at probe and resume time */

 reset bridge */

 initialize the sensor address */

 reset sensor */

 probe the sensor */

 initialize */

	set_frame_rate(gspca_dev);	*/

 (from ms-win trace) */

 black sun enable ? */

 0: 320x240, 1: 640x480 */

 Values for bmHeaderInfo (Video and Still Image Payload Headers, 2.4.3.3) */

		/* Payloads are prefixed with a UVC-style header.  We

		   consider a frame to start when the FID toggles, or the PTS

		   changes.  A frame ends when EOF is set, and we've received

 Verify UVC header.  Header length is always 12 */

 Check errors */

 Extract PTS and FID */

 If PTS or FID has changed, start a new frame. */

 If this packet is marked as EOF, end the frame */

 Add the data from this payload */

 Done this payload */

 Discard data until a new frame starts. */

 get stream parameters (framerate) */

 set stream parameters (framerate) */

 Return the actual framerate */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *		Sunplus spca504(abc) spca533 spca536 library

 *		Copyright (C) 2005 Michel Xhaard mxhaard@magic.fr

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

 specific webcam descriptor */

 !! must be the first item */

 Frame packet header offsets for the spca533 */

 Frame packet header offsets for the spca536 */

 Initialisation data for the Creative PC-CAM 600 */

	{0xa0, 0x0000, 0x0503},  * capture mode */

 brightness */

 contrast */

 sat/hue */

 hue */

 saturation */

 gamma */

/* Creative PC-CAM 600 specific open data, sent before using the

 * generic initialisation data from spca504_open_data.

 snapshot mode */

 Initialisation data for the logitech clicksmart 420 */

	{0xa0, 0x0000, 0x0503},  * capture mode */

 brightness */

 contrast */

 sat/hue */

 hue */

 saturation */

 gamma */

 clicksmart 420 open data ? */

 Q-table Y-components */

 Q-table C-components */

/* FIXME: This Q-table is identical to the Creative PC-CAM one,

 *		except for one byte. Possibly a typo?

 *		NWG: 18/05/2003.

 Q-table Y-components */

 0x22 */ , 0x1e, 0x1f, 0x1e,

 Q-table C-components */

 read <len> bytes to gspca_dev->usb_buf */

 value */

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

 write one byte */

 write req / index / value */

 loop over y components */

 loop over c components */

 gsmart mini2 write a each wait setting 1 ms is enough */

		reg_w_riv(gspca_dev, req, idx, val); */

 type */

 size */

 Init the cam width height with some values get on init ? */

 case BRIDGE_SPCA504B: */

 case BRIDGE_SPCA536: */

 size */

 type */

 spca504a aiptek */

 capture mode */

 With this we get the status, when return 0 it's all ok */

	case BRIDGE_SPCA533: */

	case BRIDGE_SPCA504B: */

 hue */

 sat/hue */

 gamma */

 this function is called at probe time */

		/* try to get the firmware as some cam answer 2.0.1.2.2

 (right bridge/subtype) */

	case BRIDGE_SPCA504B: */

	case BRIDGE_SPCA504: */

	case BRIDGE_SPCA536: */

 320x240 only */

 this function is called at probe and resume time */

 pccam600 */

 reset */

	case BRIDGE_SPCA504: */

 Set AE AWB Banding Type 3-> 50Hz 2-> 60Hz */

 Twice sequential need status 0xff->0x9e->0x9d */

*****************************/

 spca504a aiptek */

			reg_write (dev, 0, 0x2000, 0); */

			reg_write (dev, 0, 0x2883, 1); */

/*			spca504A_acknowledged_command (gspca_dev, 0x08,

/*			spca504A_acknowledged_command (gspca_dev, 0x24,

 L92 sno1t.txt */

 setup qtable */

 create the JPEG header */

 JPEG 411 */

	case BRIDGE_SPCA504B: */

	case BRIDGE_SPCA533: */

	case BRIDGE_SPCA536: */

 Set AE AWB Banding Type 3-> 50Hz 2-> 60Hz */

 Twice sequential need status 0xff->0x9e->0x9d */

 L92 sno1t.txt */

 auto exposure */

 auto whiteness */

 set default exposure compensation and whiteness balance */

 ~ 20 fps */

	case BRIDGE_SPCA533: */

	case BRIDGE_SPCA536: */

	case BRIDGE_SPCA504B: */

 spca504a aiptek */

/*			spca504A_acknowledged_command(gspca_dev, 0x08,

 isoc packet */

 iso packet length */

 frames are jpeg 4.1.1 without 0xff escape */

 drop packet */

				gspca_dev->last_packet_type = DISCARD_PACKET; */

	case BRIDGE_SPCA504: */

	case BRIDGE_SPCA504B: */

 start of frame */

 drop packet */

			gspca_dev->last_packet_type = DISCARD_PACKET; */

 start of frame */

 drop packet */

			gspca_dev->last_packet_type = DISCARD_PACKET; */

 start of frame */

 put the JPEG header in the new frame */

 add 0x00 after 0xff */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Functions for auto gain.

 *

 * Copyright (C) 2010-2012 Hans de Goede <hdegoede@redhat.com>

/* auto gain and exposure algorithm based on the knee algorithm described here:

   http://ytse.tricolour.net/docs/LowLightOptimization.html



   Returns 0 if no changes were made, 1 if the gain and or exposure settings

	/* If we are of a multiple of deadzone, do multiple steps to reach the

/* Autogain + exposure algorithm for cameras with a coarse exposure control

   (usually this means we can only control the clockdiv to change exposure)

   As changing the clockdiv so that the fps drops from 30 to 15 fps for

   example, will lead to a huge exposure change (it effectively doubles),

   this algorithm normally tries to only adjust the gain (between 40 and

   80 %) and if that does not help, only then changes exposure. This leads

   to a much more stable image then using the knee algorithm which at

   certain points of the knee graph will only try to adjust exposure,

   which leads to oscillating as one exposure step is huge.



   Returns 0 if no changes were made, 1 if the gain and or exposure settings

	/* If we are of a multiple of deadzone, do multiple steps to reach the

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for USB webcams based on Konica chipset. This

 * chipset is used in Intel YC76 camera.

 *

 * Copyright (C) 2010 Hans de Goede <hdegoede@redhat.com>

 *

 * Based on the usbvideo v4l1 konicawc driver which is:

 *

 * Copyright (C) 2002 Simon Evans <spse@secret.org.uk>

 *

 * The code for making gspca work with a webcam with 2 isoc endpoints was

 * taken from the benq gspca subdriver which is:

 *

 * Copyright (C) 2009 Jean-Francois Moine (http://moinejf.free.fr)

 specific webcam descriptor */

 !! must be the first item */

/* .priv is what goes to register 8 for this mode, known working values:

   0x00 -> 176x144, cropped

   0x01 -> 176x144, cropped

   0x02 -> 176x144, cropped

   0x03 -> 176x144, cropped

   0x04 -> 176x144, binned

   0x05 -> 320x240

   0x06 -> 320x240

   0x07 -> 160x120, cropped

   0x08 -> 160x120, cropped

   0x09 -> 160x120, binned (note has 136 lines)

   0x0a -> 160x120, binned (note has 136 lines)

   0x0b -> 160x120, cropped

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

 this function is called at probe time */

 this function is called at probe and resume time */

	/*

	 * The konica needs a freaking large time to "boot" (approx 6.5 sec.),

	 * and does not want to be bothered while doing so :|

	 * Register 0x10 counts from 1 - 3, with 3 being "ready"

 create 4 URBs - 2 on endpoint 0x83 and 2 on 0x082 */

	/* Don't keep the button in the pressed state "forever" if it was

 reception of an URB */

 disconnection */

 if this is a data URB (ep 0x82), wait */

		/* st: 0x80-0xff: frame start with frame number (ie 0-7f)

		 * otherwise:

		 * bit 0 0: keep packet

		 *	 1: drop packet (padding data)

		 *

		 * bit 4 0 button not clicked

		 *       1 button clicked

		 * button is used to `take a picture' (in software)

 Needs to be verified */

 sub-driver description */

 -- module initialisation -- */

 Intel YC 76 */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ToupTek UCMOS / AmScope MU series camera driver

 * TODO: contrast with ScopeTek / AmScope MDC cameras

 *

 * Copyright (C) 2012-2014 John McMaster <JohnDMcMaster@gmail.com>

 *

 * Special thanks to Bushing for helping with the decrypt algorithm and

 * Sean O'Sullivan / the Rensselaer Center for Open Source

 * Software (RCOS) for helping me learn kernel development

/*

 * Exposure reg is linear with exposure time

 * Exposure (sec), E (reg)

 * 0.000400, 0x0002

 * 0.001000, 0x0005

 * 0.005000, 0x0019

 * 0.020000, 0x0064

 * 0.080000, 0x0190

 * 0.400000, 0x07D0

 * 1.000000, 0x1388

 * 2.000000, 0x2710

 *

 * Three gain stages

 * 0x1000: master channel enable bit

 * 0x007F: low gain bits

 * 0x0080: medium gain bit

 * 0x0100: high gain bit

 * gain = enable * (1 + regH) * (1 + regM) * z * regL

 *

 * Gain implementation

 * Want to do something similar to mt9v011.c's set_balance

 *

 * Gain does not vary with resolution (checked 640x480 vs 1600x1200)

 *

 * Constant derivation:

 *

 * Raw data:

 * Gain,   GTOP,   B,	  R,	  GBOT

 * 1.00,   0x105C, 0x1068, 0x10C8, 0x105C

 * 1.20,   0x106E, 0x107E, 0x10D6, 0x106E

 * 1.40,   0x10C0, 0x10CA, 0x10E5, 0x10C0

 * 1.60,   0x10C9, 0x10D4, 0x10F3, 0x10C9

 * 1.80,   0x10D2, 0x10DE, 0x11C1, 0x10D2

 * 2.00,   0x10DC, 0x10E9, 0x11C8, 0x10DC

 * 2.20,   0x10E5, 0x10F3, 0x11CF, 0x10E5

 * 2.40,   0x10EE, 0x10FE, 0x11D7, 0x10EE

 * 2.60,   0x10F7, 0x11C4, 0x11DE, 0x10F7

 * 2.80,   0x11C0, 0x11CA, 0x11E5, 0x11C0

 * 3.00,   0x11C5, 0x11CF, 0x11ED, 0x11C5

 *

 * zR = 0.0069605943152454778

 *	about 3/431 = 0.0069605568445475635

 * zB = 0.0095695970695970703

 *	about 6/627 = 0.0095693779904306216

 * zG = 0.010889328063241107

 *	about 6/551 = 0.010889292196007259

 * about 10 bits for constant + 7 bits for value => at least 17 bit

 * intermediate with 32 bit ints should be fine for overflow etc

 * Essentially gains are in range 0-0x001FF

 *

 * However, V4L expects a main gain channel + R and B balance

 * To keep things simple for now saturate the values of balance is too high/low

 * This isn't really ideal but easy way to fit the Linux model

 *

 * Converted using gain model turns out to be quite linear:

 * Gain, GTOP, B, R, GBOT

 * 1.00, 92, 104, 144, 92

 * 1.20, 110, 126, 172, 110

 * 1.40, 128, 148, 202, 128

 * 1.60, 146, 168, 230, 146

 * 1.80, 164, 188, 260, 164

 * 2.00, 184, 210, 288, 184

 * 2.20, 202, 230, 316, 202

 * 2.40, 220, 252, 348, 220

 * 2.60, 238, 272, 376, 238

 * 2.80, 256, 296, 404, 256

 * 3.00, 276, 316, 436, 276

 *

 * Maximum gain is 0x7FF * 2 * 2 => 0x1FFC (8188)

 * or about 13 effective bits of gain

 * The highest the commercial driver goes in my setup 436

 * However, because could *maybe* damage circuits

 * limit the gain until have a reason to go higher

 * Solution: gain clipped and warning emitted

 Frame sync is a short read */

 MT9E001 reg names to give a rough approximation */

 specific webcam descriptor */

 !! must be the first item */

 How many bytes this frame */

	/*

	Device has separate gains for each Bayer quadrant

	V4L supports master gain which is referenced to G1/G2 and supplies

	individual balance controls for R/B

 Used to simplify reg write error handling */

/*

 * As there's no known frame sync, the only way to keep synced is to try hard

 * to never miss any packets

 Wonder if there's a good reason for sending it twice */

 probably not but leave it in because...why not */

	/*

	 * TODO: check if there are any issues with corner cases

	 * 0x000 (0):0x07F (127): regL

	 * 0x080 (128) - 0x0FF (255): regM, regL

	 * 0x100 (256) - max: regH, regM, regL

 Packets that were encrypted, no idea if the grouping is significant */

	/*

	 * First driver sets a sort of encryption key

	 * A number of futur requests of this type have wValue and wIndex

	 * encrypted as follows:

	 * -Compute key = this wValue rotate left by 4 bits

	 *	(decrypt.py rotates right because we are decrypting)

	 * -Later packets encrypt packets by XOR'ing with key

	 *	XOR encrypt/decrypt is symmetrical

	 *	wValue, and wIndex are encrypted

	 *	bRequest is not and bRequestType is always 0xC0

	 *		This allows resyncing if key is unknown?

	 * By setting 0 we XOR with 0 and the shifting and XOR drops out

	/*

	 * Next does some sort of 2 packet challenge / response

	 * evidence suggests its an Atmel I2C crypto part but nobody cares to

	 * look

	 * (to make sure its not cloned hardware?)

	 * Ignore: I want to work with their hardware, not clone it

	 * 16 bytes out challenge, requestType: 0x40

	 * 16 bytes in response, requestType: 0xC0

	/*

	 * Serial number?  Doesn't seem to be required

	 * cam1: \xE6\x0D\x00\x00, cam2: \x70\x19\x00\x00

	 * rc = usb_control_msg(gspca_dev->dev,

	 *			usb_rcvctrlpipe(gspca_dev->dev, 0),

	 *			0x20, 0xC0, 0x0000, 0x0000, buff, 4, 500);

 Large (EEPROM?) read, skip it since no idea what to do with it */

 Omitted this by accident, does not work without it */

 Yes we want URBs and we want them now! */

 Largest size the windows driver uses */

 Def need to use bulk transfers */

	/* First two frames have messed up gains

 isoc packet */

 iso packet length */

 can we finish a frame? */

 lost some data, discard the frame */

 gspca_dev->gain automatically updated */

 Mostly limited by URB timeouts */

 XXX: make dynamic based on frame rate? */

 sub-driver description */

 Table of supported USB devices */

 Commented out devices should be related */

 AS: AmScope, TT: ToupTek */

 { USB_DEVICE(0x0547, 0x6035) },  TT UCMOS00350KPA */

 { USB_DEVICE(0x0547, 0x6130) },  TT UCMOS01300KPA */

 { USB_DEVICE(0x0547, 0x6200) },  TT UCMOS02000KPA */

 { USB_DEVICE(0x0547, 0x6310) },  TT UCMOS03100KPA */

 { USB_DEVICE(0x0547, 0x6510) },  TT UCMOS05100KPA */

 { USB_DEVICE(0x0547, 0x6800) },  TT UCMOS08000KPA */

 { USB_DEVICE(0x0547, 0x6801) },  TT UCMOS08000KPB */

 TT UCMOS08000KPB, AS MU800 */

 { USB_DEVICE(0x0547, 0x6900) },  TT UCMOS09000KPA */

 { USB_DEVICE(0x0547, 0x6901) },  TT UCMOS09000KPB */

 { USB_DEVICE(0x0547, 0x6010) },  TT UCMOS10000KPA */

 { USB_DEVICE(0x0547, 0x6014) },  TT UCMOS14000KPA */

 { USB_DEVICE(0x0547, 0x6131) },  TT UCMOS01300KMA */

 { USB_DEVICE(0x0547, 0x6511) },  TT UCMOS05100KMA */

 { USB_DEVICE(0x0547, 0x8080) },  TT UHCCD00800KPA */

 { USB_DEVICE(0x0547, 0x8140) },  TT UHCCD01400KPA */

 { USB_DEVICE(0x0547, 0x8141) },  TT EXCCD01400KPA */

 { USB_DEVICE(0x0547, 0x8200) },  TT UHCCD02000KPA */

 { USB_DEVICE(0x0547, 0x8201) },  TT UHCCD02000KPB */

 { USB_DEVICE(0x0547, 0x8310) },  TT UHCCD03100KPA */

 { USB_DEVICE(0x0547, 0x8500) },  TT UHCCD05000KPA */

 { USB_DEVICE(0x0547, 0x8510) },  TT UHCCD05100KPA */

 { USB_DEVICE(0x0547, 0x8600) },  TT UHCCD06000KPA */

 { USB_DEVICE(0x0547, 0x8800) },  TT UHCCD08000KPA */

 { USB_DEVICE(0x0547, 0x8315) },  TT UHCCD03150KPA */

 { USB_DEVICE(0x0547, 0x7800) },  TT UHCCD00800KMA */

 { USB_DEVICE(0x0547, 0x7140) },  TT UHCCD01400KMA */

 { USB_DEVICE(0x0547, 0x7141) },  TT UHCCD01400KMB */

 { USB_DEVICE(0x0547, 0x7200) },  TT UHCCD02000KMA */

 { USB_DEVICE(0x0547, 0x7315) },  TT UHCCD03150KMA */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Syntek DV4000 (STK014) subdriver

 *

 * Copyright (C) 2008 Jean-Francois Moine (http://moinejf.free.fr)

moinejf.free.fr>");

 specific webcam descriptor */

 !! must be the first item */

 -- read a register -- */

 -- write a register -- */

 -- get a bulk value (4 bytes) -- */

 len & 0xff */

 len >> 8 */

 length */

 timeout in milliseconds */

 -- send a bulk value -- */

 size */

 timeout in milliseconds */

 set a camera parameter */

 whiteness */

 contrast */

 saturation */

 50 Hz */

 60 Hz */

 this function is called at probe time */

 this function is called at probe and resume time */

 check if the device responds */

 -- start the camera -- */

 create the JPEG header */

 JPEG 411 */

 work on alternate 1 */

 640x480 */

 320x240 */

 << (value ff ff ff ff) */

 Red ? */

 Green ? */

 Blue ? */

 Gamma ? */

 start the video flow */

 << (value ff ff ff ff) */

 isoc packet */

 iso packet length */

	/* a frame starts with:

	 *	- 0xff 0xfe

	 *	- 0x08 0x00	- length (little endian ?!)

	 *	- 4 bytes = size of whole frame (BE - including header)

	 *	- 0x00 0x0c

	 *	- 0xff 0xd8

	 *	- ..	JPEG image with escape sequences (ff 00)

	 *		(without ending - ff d9)

 put the JPEG 411 header */

 beginning of the frame */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *		Pixart PAC7311 library

 *		Copyright (C) 2005 Thomas Kaiser thomas@kaiser-linux.li

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

/* Some documentation about various registers as determined by trial and error.

 *

 * Register page 1:

 *

 * Address	Description

 * 0x08		Unknown compressor related, must always be 8 except when not

 *		in 640x480 resolution and page 4 reg 2 <= 3 then set it to 9 !

 * 0x1b		Auto white balance related, bit 0 is AWB enable (inverted)

 *		bits 345 seem to toggle per color gains on/off (inverted)

 * 0x78		Global control, bit 6 controls the LED (inverted)

 * 0x80		Compression balance, interesting settings:

 *		0x01 Use this to allow the camera to switch to higher compr.

 *		     on the fly. Needed to stay within bandwidth @ 640x480@30

 *		0x1c From usb captures under Windows for 640x480

 *		0x2a Values >= this switch the camera to a lower compression,

 *		     using the same table for both luminance and chrominance.

 *		     This gives a sharper picture. Usable only at 640x480@ <

 *		     15 fps or 320x240 / 160x120. Note currently the driver

 *		     does not use this as the quality gain is small and the

 *		     generated JPG-s are only understood by v4l-utils >= 0.8.9

 *		0x3f From usb captures under Windows for 320x240

 *		0x69 From usb captures under Windows for 160x120

 *

 * Register page 4:

 *

 * Address	Description

 * 0x02		Clock divider 2-63, fps =~ 60 / val. Must be a multiple of 3 on

 *		the 7302, so one of 3, 6, 9, ..., except when between 6 and 12?

 * 0x0f		Master gain 1-245, low value = high gain

 * 0x10		Another gain 0-15, limited influence (1-2x gain I guess)

 * 0x21		Bitfield: 0-1 unused, 2-3 vflip/hflip, 4-5 unknown, 6-7 unused

 *		Note setting vflip disabled leads to a much lower image quality,

 *		so we always vflip, and tell userspace to flip it back

 * 0x27		Seems to toggle various gains on / off, Setting bit 7 seems to

 *		completely disable the analog amplification block. Set to 0x68

 *		for max gain, 0x14 for minimal gain.

 Include pac common sof detection functions */

 20 fps, avoid using high compr. */

 !! must be the first item */

 Bit_0=start stream, Bit_6=LED */

 Bit_0=start stream, Bit_6=LED */

 Bit_0=start stream, Bit_6=LED */

	index, len, [value]* */

 page 1 */

 page 4 */

 load the page 4 */

 end of sequence */

 page 4 - the value SKIP says skip the index - see reg_w_page() */

 request */

 value */

 request */

 load the beginning of a page */

 skip this index */

 request */

 output a variable sequence */

 not reached */

 this function is called at probe time for pac7311 */

 load registers to sensor (Bit 0, auto clear) */

 page 4 */

 load registers to sensor (Bit 0, auto clear) */

 page 4 */

 load registers to sensor (Bit 0, auto clear) */

	/*

	 * Page 1 register 8 must always be 0x08 except when not in

	 *  640x480 mode and page 4 reg 2 <= 3 then it must be 9

	/*

	 * Page1 register 80 sets the compression balance, normally we

	 * want / use 0x1c, but for 640x480@30fps we must allow the

	 * camera to use higher compression or we may run out of

	 * bandwidth.

 load registers to sensor (Bit 0, auto clear) */

 page 4 */

 load registers to sensor (Bit 0, auto clear) */

 this function is called at probe and resume time for pac7311 */

		/* when switching to autogain set defaults to make sure

		   we are on a valid point of the autogain gain /

		   exposure knee graph, and give this change time to

 this function is called at probe time */

 -- start the camera -- */

 set correct resolution */

 160x120 */

 320x240 */

 640x480 */

 start stream */

 Bit_0=start stream, Bit_6=LED */

 Bit_0=start stream, Bit_6=LED */

 Bit_0=start stream, Bit_6=LED */

 JPEG header, part 1 */

 SOI: Start of Image */

 SOF0: Start of Frame (Baseline DCT) */

 length = 17 bytes (including this length field) */

 Precision: 8 */

 2 bytes is placed here: number of image lines */

 2 bytes is placed here: samples per line */

 JPEG header, continued */

 Number of image components: 3 */

 ID=1, Subsampling 1x1, Quantization table: 0 */

 ID=2, Subsampling 2x1, Quantization table: 1 */

 ID=3, Subsampling 2x1, Quantization table: 1 */

 SOS: Start Of Scan */

 length = 12 bytes (including this length field) */

 number of components: 3 */

 selector 1, table 0x00 */

 selector 2, table 0x11 */

 selector 3, table 0x11 */

 Spectral selection: 0 .. 63 */

 Successive approximation: 0 */

 this function is run at interrupt level */

 isoc packet */

 iso packet length */

		/*

		 * 6 bytes after the FF D9 EOF marker a number of lumination

		 * bytes are send corresponding to different parts of the

		 * image, the 14th and 15th byte after the EOF seem to

		 * correspond to the center of the image.

 Finish decoding current frame */

 Get average lumination */

 Start the new frame with the jpeg header */

 interrupt packet data */

 interrupt packet length */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SQ930x subdriver

 *

 * Copyright (C) 2010 Jean-François Moine <http://moinejf.free.fr>

 * Copyright (C) 2006 -2008 Gerard Klaver <gerard at gkall dot hobby dot nl>

 * Copyright (C) 2007 Sam Revitch <samr7@cs.washington.edu>

moinejf.free.fr>\n"

 Structure to hold all of our device specific stuff */

 !! must be the first item */

 exposure/gain control cluster */

 = MI360SOC */

 sq930x registers */

 gpio 1 (8..15) */

 gpio 3 (24..31) */

 reserved - def 0x0005 */

 reserved - def 0x002a */

 reserved - def 0x0100 */

 reserved - def 0x068f */

 window height */

 window width */

 global gain */

 green1 gain */

 blue gain */

 red gain */

 green2 gain */

 reserved - def 0x0418 */

 horiz blanking */

 horiz blanking */

 select IFP/SOC registers */

 operating mode control */

 output format control (RGB) */

 select sensor core registers */

 window height */

 window width */

 output control */

 global gain */

 green1 gain */

 blue gain */

 red gain */

 green2 gain */

	{0x05, 0x00ce}, */

 horizontal blanking */

 start parameters indexed by [sensor][mode] */

 Bayer 320x240 */

 Bayer 640x480 */

 Bayer 320x240 */

 Bayer 640x480 */

 Bayer 320x240 */

 Bayer 640x480 */

 Bayer 320x240 */

 Bayer 640x480 */

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

 request */

 request */

 request */

 request */

 SQ930_CLKFREQ_60MHZ */

		SENSOR_LZ24BP,		(tested as ccd) */

	case SENSOR_MT9V111: */

 ccd */

 cmos */

	case SENSOR_MI0360: */

	case SENSOR_MT9V111: */

 i2c_slave_addr */

 2 * ni2c */

 reg = shutter width */

 val H */

 val L */

 reg = global gain */

 val H */

 val L */

 This function is called at probe time just before sd_init */

 this function is called at probe and resume time */

 force gpio rewrite */

/*fixme: is this needed for icx098bp and mi0360?

	if (sd->sensor != SENSOR_LZ24BP)

		reg_w(gspca_dev, SQ930_CTRL_RESET, 0x0000);

/* it returns:

 * 03 00 12 93 0b f6 c9 00	live! ultra

 * 03 00 07 93 0b f6 ca 00	live! ultra for notebook

 * 03 00 12 93 0b fe c8 00	Trust WB-3500T

 * 02 00 06 93 0b fe c8 00	Joy-IT 318S

 * 03 00 12 93 0b f6 cf 00	icam tracer - sensor icx098bq

 * 02 00 12 93 0b fe cf 00	ProQ Motion Webcam

 *

 * byte

 * 0: 02 = usb 1.0 (12Mbit) / 03 = usb2.0 (480Mbit)

 * 1: 00

 * 2: 06 / 07 / 12 = mode webcam? firmware??

 * 3: 93 chip = 930b (930b or 930c)

 * 4: 0b

 * 5: f6 = cdd (icx098bq, lz24bp) / fe or de = cmos (i2c) (other sensors)

 * 6: c8 / c9 / ca / cf = mode webcam?, sensor? webcam?

 * 7: 00

 no sensor probe for icam tracer */

 if ccd */

 send the start/stop commands to the webcam */

 function called at start time before URB creation */

 there must be one URB only */

 start the capture */

 1st start */

 2nd start */

 1st start */

	case SENSOR_MT9V111: */

 set the exposure */

 function called when the application gets a new frame */

 It sets the exposure if required and restart the bulk transfer. */

 wait a little time, otherwise the webcam crashes */

 isoc packet */

 iso packet length */

 sub-driver description */

 Table of supported USB devices */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPCA501 chip based cameras initialization data

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

 specific webcam descriptor */

 !! must be the first item */

 spca505 501 */

/*

 * Data to initialize a SPCA501. From a capture file provided by Bill Roehl

 * With SPCA501 chip description

 set CCDSP parameters */

 set time generator set */

 set DSP windows parameters */

 Set alternate set to YUV transform coeffs. */

 Frame packet header offsets for the spca501 */

 SPCA501 CCDSP control */

 SPCA501 control/status registers */

 registers for color correction and YUV transformation */

 Data for video camera initialization before capturing */

 bmRequest,value,index */

 C/S enable soft reset */

 C/S disable soft reset */

 C/S general purpose I/O data */

 C/S general purpose I/O data */

 CCDSP options */

 CCDSP Optical black level for user settings */

 CCDSP Optical black settings */

 CCDSP CCD gamma enable */

 Add gamma correction */

 CCDSP High luminance for white balance */

 CCDSP Low luminance for white balance */

 Color correction and RGB-to-YUV transformation coefficients changing */

 A11 */

 A12 */

 A13 */

 A21 */

 A22 */

 A23 */

 A31 */

 A32 */

 A33 */

 A11 0x31 */

 A12 f8 */

 A13 f8 */

 A21 f8 */

 A22 0x14 */

 A23 f8 */

 A31 f8 */

 A32 f8 */

 A33 0x20 */

 R offset */

 G offset */

 B offset */

 GB offset */

 Time generator manipulations */

 Set up high bits of shutter speed */

 Set up low bits of shutter speed */

 DCLK*2 clock phase adjustment */

 ADCK phase adjustment, inv. ext. VB */

 FR phase adjustment */

 FCDS phase adjustment */

 FS phase adjustment */

 FH1 phase and delay adjustment */

 pixel identification */

 clock source selection (default) */

	/*VERY strange manipulations with

	 * select DMCLP or OBPX to be ADCLP output (0x0C)

	 * OPB always toggle or not (0x0D) but they allow

	 * us to set up brightness

 Done */

 Setting image processing parameters */

 Changing Windows positions X1 */

 X2 */

 X3 */

 X4 */

 X5 */

 Y5 */

 Changing A33 */

 Setting video compression & resolution 160x120 */

 Setting video no compression */

/*

   The SPCAxxx docs from Sunplus document these values

   in tables, one table per register number.  In the data

   below, dmRequest is the register number, index is the Addr,

   and value is a combination of Bit values.

   Bit  Value (hex)

   0    01

   1    02

   2    04

   3    08

   4    10

   5    20

   6    40

   7    80

 Data for chip initialization (set default values) */

 Set all the values to powerup defaults */

 bmRequest,value,index */

	/* Strange - looks like the 501 driver doesn't do anything

	 * at insert time except read the EEPROM

/* Data for video camera init before capture.

 * Capture and decoding by Colin Peart.

 * This is is for the 3com HomeConnect Lite which is spca501a based.

 bmRequest,value,index */

 C/S Enable TG soft reset, timing mode=010 */

 C/S Disable TG soft reset, timing mode=010 */

 C/S GPIO */

 C/S GPIO */

 CCDSP Options */

 CCDSP Black Level */

 CCDSP Gamma options */

 CCDSP Luminance Low */

 CCDSP Luminance High */

 CCDSP Gamma correction toggle */

 CCDSP YUV A11 */

 CCDSP YUV A12 */

 CCDSP YUV A13 */

 CCDSP YUV A21 */

 CCDSP YUV A22 */

 CCDSP YUV A23 */

 CCDSP YUV A31 */

 CCDSP YUV A32 */

 CCDSP YUV A33 */

 CCDSP R Offset */

 CCDSP G Offset */

 CCDSP B Offset */

 CCDSP BG Offset */

 CCDSP Gamma Correction Enable */

 TG Shutter Speed High Bits */

 TG Shutter Speed Low Bits */

 TG DCLK*2 Adjust */

 TG ADCK Adjust */

 TG FR Phase Adjust */

 TG FCDS Phase Adjust */

 TG FS Phase Adjust */

 TG MH1 */

 TG Pixel ID */

 Like below, unexplained toglleing */

 CCDSP W1 Start X */

 CCDSP W2 Start X */

 CCDSP W3 Start X */

 CCDSP W4 Start X */

 CCDSP W5 Start X */

 CCDSP W5 Start Y */

 TG Start Clock */

	{0x2, 0x006a, 0x0001},	 * C/S Enable ISOSYNCH Packet Engine */

 C/S Disable ISOSYNCH Packet Engine */

 C/S Set Timing Mode, Disable TG soft reset */

 C/S Set Timing Mode, Disable TG soft reset */

 C/S GPIO */

 C/S GPIO */

 C/S Enable ISOSYNCH Packet Engine */

/*

 * Data used to initialize a SPCA501C with HV7131B sensor.

 * From a capture file taken with USBSnoop v 1.5

 * I have a "SPCA501C pc camera chipset" manual by sunplus, but some

 * of the value meanings are obscure or simply "reserved".

 * to do list:

 * 1) Understand what every value means

 * 2) Understand why some values seem to appear more than once

 * 3) Write a small comment for each line of the following arrays.

 bmRequest,value,index */

 bmRequest,value,index */

 Unknown camera from Ori Usbid 0x0000:0x0000 */

 Based on snoops from Ori Cohen */

 DSP Registers */

 RGB offset */

	{0x00, 0x0000, 0x0000 }, */

 Part 2 */

 TG Registers */

 Based on snoops from Ori Cohen */

 Part 3 */

 TG registers */

	{0x00, 0x0000, 0x0000}, */

 640 */

 480 */

 Offset H hight */

 low */

 Offset V */

 low */

 DSP Registers	*/

 Level Calc bit7 ->1 Auto */

 A11 Color correction coeff */

 A12 */

 A13 */

 A21 */

 A22 */

 A23 */

 A31 */

 A32 */

 A33 */

 Reserved */

 Reserved */

 Win1 Start begin */

 Win1 Start end */

 Reserved begin */

 Reserved end */

 Edge Gain */

 Edge Bandwidth */

 Part 4 */

 Part 5 */

 c8 Poids fort Luma */

 32 */

 R 00 */

 G 00 */

 B 00 */

 this function is called at probe time */

 this function is called at probe and resume time */

 Arowana 300k CMOS Camera data */

 Unknown Ori CMOS Camera data */

 generic spca501 init data */

 Special handling for 3com data */

 Arowana 300k CMOS Camera data */

 Unknown CMOS Camera data */

 Generic 501 open data */

 memorize the wanted pixel format */

	/* Enable ISO packet machine CTRL reg=2,

 640x480 */

 320x240 */

	case 2:  * 160x120 */

	/* Disable ISO packet

 called on streamoff with alt 0 and on disconnect */

 isoc packet */

 iso packet length */

 start of frame */

 drop */

		gspca_dev->last_packet_type = DISCARD_PACKET; */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Sonix sn9c102p sn9c105 sn9c120 (jpeg) subdriver

 *

 * Copyright (C) 2009-2011 Jean-François Moine <http://moinejf.free.fr>

 * Copyright (C) 2005 Michel Xhaard mxhaard@magic.fr

moinejf.free.fr>");

 specific webcam descriptor */

 !! must be the first item */

 red/blue balance control cluster */

 hflip/vflip control cluster */

 (used by pkt_scan) */

 image quality */

 Type of image sensor chip */

 device flags */

 inverse pin S_PWR_DN / sn_xxx tables */

 presence of illuminator */

 sn9c1xx definitions */

 register 0x01 */

 sensor power down */

 inverse pin S_PWR_DN */

 video transfer enable */

 output to pin LED */

 open-drain mode */

 system clock 0: 24MHz, 1: 48MHz */

 register 0x17 */

 sensor master clock */

 enable sensor clock */

 defect pixel by 0: soft, 1: hard */

 Note 3 / 8 is not large enough, not even 5 / 8 is ?! */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

	reg0	reg1	reg2	reg3	reg4	reg5	reg6	reg7 */

	reg8	reg9	rega	regb	regc	regd	rege	regf */

	reg10	reg11	reg12	reg13	reg14	reg15	reg16	reg17 */

	reg18	reg19	reg1a	reg1b */

 sequence specific to the sensors - !! index = SENSOR_xxx */

 default gamma table */

 gamma for sensor ADCM1700 */

 gamma for sensors HV7131R and MT9V111 */

 gamma for sensor GC0307 */

 gamma for sensor SP80708 */

 color matrix and offsets */

 YR YG YB gains */

 UR UG UB */

 VR VG VB */

 YUV offsets */

 reset */

 exposure? */

 exposure? */

delay 10ms*/

param3*/

	{0x91, 0x11, 0x44, 0x00, 0x00, 0x00, 0x00, 0x10}, */

	{0x91, 0x11, 0x18, 0x00, 0x00, 0x00, 0x00, 0x10}, */

 gain14 */

 r g b 101a10 */

 set sensor clock */

 sensor clck ?2 */

 exposure 2 */

 42 */

	{0xb1, 0x5d, 0x35, 0x00, 0x67, 0x00, 0x00, 0x10}, * gain orig */

	{0xb1, 0x5d, 0x35, 0x00, 0x20, 0x00, 0x00, 0x10}, * gain */

 update */

 sensor on */

delay 20ms*/

delay 20ms*/

 exposure 2 */

 update */

 sensor on */

 reset? */

 delay 20ms */

 IFP select */

 output fmt ctrl */

 op mode ctrl */

 sensor select */

 row start */

 col start */

 window height */

 window width */

 output ctrl */

 shutter delay */

 zoom col start */

 zoom row start */

 digital zoom */

 read mode */

 G1 and B gains */

 R and G2 gains */

 vert blanking */

 horiz blanking */

 global gain */

fixme: variable*/

 factory mode */

 output raw RGB */

	{0xa0, 0x34, 0xfb, 0x11, 0x00, 0x00, 0x00, 0x10}, */

 auto-exposure speed (0) / white balance mode (auto RGB) */

/*	{0xa0, 0x34, 0xf1, 0x02, 0x00, 0x00, 0x00, 0x10},

/*	{0xa0, 0x34, 0xfe, 0x5b, 0x00, 0x00, 0x00, 0x10},

/*	{0xa0, 0x34, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x10},

/*	{0xa0, 0x34, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x10},

/*	{0xa0, 0x34, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x10},

/*	{0xa0, 0x34, 0xe8, 0x31, 0x00, 0x00, 0x00, 0x10},

 luminance mode (0x4f -> AutoExpo on) */

 preset shutter */

/*	{0xa0, 0x34, 0xef, 0x00, 0x00, 0x00, 0x00, 0x10},

	{0xa0, 0x34, 0xfb, 0xee, 0x00, 0x00, 0x00, 0x10}, */

 delay 20ms */

 delay 20ms */

 win: i2c_r from 00 to 80 */

/* HDG: 0x11 was 0x00 change to 0x01 for better exposure (15 fps instead of 30)

fixme: + 0x12, 0x04*/

/*	{0xa1, 0x21, 0x75, 0x82, 0x00, 0x00, 0x00, 0x10},  * COMN

 */

	{0xa1, 0x21, 0x2a, 0x88, 0x00, 0x00, 0x00, 0x10}, * set by setfreq */

	{0xa1, 0x21, 0x2b, 0x34, 0x00, 0x00, 0x00, 0x10}, * set by setfreq */

 */

	{0xb1, 0x21, 0x01, 0x88, 0x70, 0x00, 0x00, 0x10}, */

 reset */

 delay 20ms */

	{0xd1, 0x21, 0x25, 0x80, 0x32, 0xfe, 0xa0, 0x10}, jfm done */

	{0xd1, 0x21, 0x29, 0x00, 0x91, 0x00, 0x88, 0x10}, jfm done */

	{0xb1, 0x21, 0x2d, 0x85, 0x00, 0x00, 0x00, 0x10}, set by setfreq */

	{0xa1, 0x21, 0x12, 0x08, 0x00, 0x00, 0x00, 0x10}, jfm done */

/*	{0xa1, 0x21, 0x75, 0x06, 0x00, 0x00, 0x00, 0x10},   * COMN

	{0xa1, 0x21, 0x16, 0x00, 0x00, 0x00, 0x00, 0x10}, jfm done */

	{0xa1, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10},  * GAIN - def */

	{0xb1, 0x21, 0x01, 0x6c, 0x6c, 0x00, 0x00, 0x10},  * B R - def: 80 */

...*/

 CLKRC */

	{0xa1, 0x21, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x10}, jfm done */

	{0xa1, 0x21, 0x16, 0x00, 0x00, 0x00, 0x00, 0x10}, jfm done */

	{0xa1, 0x21, 0x2a, 0x91, 0x00, 0x00, 0x00, 0x10}, jfm done */

	{0xa1, 0x21, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x10}, jfm done */

	{0xb1, 0x21, 0x01, 0x64, 0x84, 0x00, 0x00, 0x10},  * B R - def: 80 */

 reset SCCB */

 delay 20ms */

 Outformat = rawRGB */

 init COM8 */

 GAIN BLUE RED VREF */

 COM 1 BAVE GEAVE AECHH */

 RAVE COM2 */

 COM 3 4 5 6 */

 AECH CLKRC COM7 COM8 */

 COM9 COM10 */

 HSTART HSTOP VSTRT VSTOP */

 PSHFT */

 MVFP LAEC */

 BOS GBOS GROS ROS (BGGR offset) */

	{0xd1, 0x21, 0x24, 0x68, 0x58, 0xd4, 0x80, 0x10}, */

 AEW AEB VPT BBIAS */

 GbBIAS RSVD EXHCH EXHCL */

 RBIAS ADVFL ASDVFH YAVE */

 HSYST HSYEN HREF */

 reserved */

 ADC ACOM OFON TSLB */

 COM11 COM12 COM13 COM14 */

 EDGE COM15 COM16 COM17 */

 reserved */

 reserved */

 reserved */

 MTX 1 2 3 4 */

 MTX 5 6 7 8 */

 MTX9 MTXS */

 reserved */

 reserved */

 reserved */

 LCC1 LCC2 LCC3 LCC4 */

 LCC5 */

 MANU */

 band gap reference [0:3] DBLV */

 gamma curve */

 gamma curve */

 gamma curve */

 gamma curve */

 gamma curve */

 gamma curve */

 gamma curve */

 gamma curve */

 reserved */

 DM_LNL/H */

 not in all ms-win traces*/

 MVFP */

 bits[3..0]reserved */

 VREF vertical frame ctrl */

 AECH 0x20 */

 ADVFL */

 ADVFH */

 GAIN */

	{0xb1, 0x21, 0x01, 0x78, 0x78, 0x00, 0x00, 0x10}, * BLUE */

***** (some exchanges in the win trace) ******/

fixme:param2*/

 dummy line hight */

 dummy line low */

 EXHCH */

 EXHCL */

	{0xa1, 0x21, 0x02, 0x90, 0x00, 0x00, 0x00, 0x10},  * RED */

***** (some exchanges in the win trace) ******/

*****!! startsensor KO if changed !!****/

fixme: param3*/

 the sensor registers are described in m5602/m5602_po1030.h */

 sensor reset */

 delay 20ms */

 r/g1/b/g2 gains */

 gamma corr */

 color matrix */

 raw rgb bayer */

 from ms-win traces - these values change with auto gain/expo/wb.. */

 mean values */

 integlines */

 global gain */

 r/g1/b gains */

 control1 */

 frameheight */

	{0xc1, 0x6e, 0x16, 0x49, 0x40, 0x45, 0x00, 0x10}, */

 delay 10ms */

 delay 10ms */

 delay 8ms */

 RGBG gains */

param2*/

 reset */

 delay 96ms */

 */

	{0xa1, 0x21, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x10}, */

	{0xa1, 0x21, 0x2d, 0x25, 0x00, 0x00, 0x00, 0x10}, */

	{0xb1, 0x21, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x10}, */

 the next sequence should be used for auto gain */

 global gain ? : 07 - change with 0x15 at the end */

 ???? : 063f */

 exposure ? : 0200 - change with 0x1e at the end */

 read <len> bytes to gspca_dev->usb_buf */

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

 I2C write 1 byte */

 i2c command = a0 (100 kHz) */

 i2c command = a1 (400 kHz) */

 value = i2c */

 I2C write 8 bytes */

 value, index */

 sensor read 'len' (1..5) bytes in gspca_dev->usb_buf */

 i2c command = a0 (100 kHz) */

 i2c command = 91 (400 kHz) */

 check the ID of the hv7131 sensor */

 this sequence is needed because it activates the sensor */

 sensor wakeup */

 Gpio on */

 read sensor id */

 chip ID (02 is R) */

 mi0360 */

 mt9v111 */

 check ov76xx */

 soi768 */

fixme: only valid for 0c45:613e?*/

 check ov76xx */

 ov76xx */

 check po1030 */

 po1030 */

 0c45:6142 sensor may be po2030n, gc0305 or gc0307 */

 check gc0307 */

 reset */

 gc0307 (?) */

 check po2030n */

		sd->sensor = SENSOR_PO2030N; */

 this function is called at probe time */

 24 packets per ISOC message */

 this function is called at probe and resume time */

 no audio */

 setup a selector by bridge */

 get sonix chip id */

 with audio */

	case BRIDGE_SN9C110: */

	case BRIDGE_SN9C120: */

	/* Note we do not disable the sensor clock here (power saving mode),

 set the i2c address */

 this function is called at probe time */

 expo = 0..255 -> a = 19..43 */

 heuristic */

 exposure 0x0635 -> 4 fp/s 0x10 */

 update sensor */

 sensor on */

 preset AGC - works when AutoExpo = off */

 only positive Y offset */

 don't set the Y offset */

 don't set the Y offset */

 Y offset already set */

 color matrix Y offset */

 37..73 */

 red */

 green */

 blue */

 U & V gains */

 same as reg84 in signed decimal */

 UR UG UB */

 VR VG VB */

 UR UG UB */

 VR VG VB */

 red  green1 blue (no g2) */

 0x40 = normal value = gain x 1 */

	reg_w1(gspca_dev, 0x07, 32); */

 1a: expo H, 1b: expo M */

 15: gain */

 clkdiv = 1, ablcen = 1 */

 sctra */

		/* Reg. 0x1E: Timing Generator Control Register 2 (Tgcontrol2)

		 * (reset value: 0x0A)

		 * bit7: HM: Horizontal Mirror: 0: disable, 1: enable

		 * bit6: VM: Vertical Mirror: 0: disable, 1: enable

		 * bit5: ST: Shutter Selection: 0: electrical, 1: mechanical

		 * bit4: FT: Single Frame Transfer: 0: disable, 1: enable

		 * bit3-0: X

 gpio */

 should have been: */

						0x55 : 0x54);	* 370i */

						0x66 : 0x64);	* Clip */

 auto gain/wb/expo */

 Banding filter disabled */

 50 hz */

 60 hz */

 Get reg2a / reg2d base values */

 Banding filter disabled */

 50 hz (filter on and framerate adj) */

 60 hz (filter on, no framerate adj) */

 JPEG quality update */

 This function is executed from a work queue. */

 To protect gspca_dev->usb_buf and gspca_dev->usb_err */

 -- start the camera -- */

 MI0360 */

 create the JPEG header */

 JPEG 422 */

 initialize the bridge */

 sensor clock already enabled in sd_init */

 reg_w1(gspca_dev, 0xf1, 0x00); */

 power down inverted */

 configure gpio */

 keep the audio connection */

fixme: is it useful? */

 clock / 4 */

 sensor power on */

 remove open-drain mode */

fixme: is it useful? */

 initialize the sensor */

 AE_H_SIZE = 116 */

 AE_V_SIZE = 96 */

 AE_H_SIZE = 212 */

 AE_V_SIZE = 160 */

 AW_H_STOP = 352 */

 AW_V_STOP = 288 */

 AW_H_STOP = 640 */

 AW_V_STOP = 480 */

	case SENSOR_OV7648:		* fixme: sometimes */

 red */

 green */

 blue */

fixme: 8 times with all zeroes and 1 or 2 times with normal values */

 red */

 green */

 blue */

 clock / 2 */

 640x480: clk 24Mhz */

 clock / 1 */

 if 320x240 */

 clk 24Mz */

 clock / 1 */

 if 640x480 */

 clock / 4 */

 clk 24Mz */

 clock / 2 */

 clock / 1 */

 more sensor initialization - param1 */

		init = NULL; */

 ?? {0x1e, 0xdd, 0x2d, 0xe7} */

 here change size mode 0 -> VGA; 1 -> CIF */

		reg_w1(gspca_dev, 0x02, 0x??);	 * LED off ? */

		reg_w1(gspca_dev, 0x02, 0x40);	  * LED off ? */

 sensor power down */

 clock 24MHz */

 Don't disable sensor clock as that disables the button on the cam */

 reg_w1(gspca_dev, 0xf1, 0x01); */

 called on streamoff with alt==0 and on disconnect */

 the usb_lock is held at entry - restore on exit */

 Thanks S., without your advice, autobright should not work :) */

		case SENSOR_MO4000: */

		case SENSOR_MI0360: */

		case SENSOR_MI0360B: */

 set the average luminosity from an isoc marker */

	/*	w0 w1 w2

	 *	w3 w4 w5

	 *	w6 w7 w8

 w3 */

 w5 */

 w1 */

 w7 */

 w4 * 4 */

 scan the URB packets */

 This function is run at interrupt level. */

 isoc packet */

 iso packet length */

	/*

	 * A frame ends on the marker

	 *		ff ff 00 c4 c4 96 ..

	 * which is 62 bytes long and is followed by various information

	 * including statuses and luminosity.

	 *

	 * A marker may be split on two packets.

	 *

	 * The 6th byte of a marker contains the bits:

	 *	0x08: USB full

	 *	0xc0: frame sequence

	 * When the bit 'USB full' is set, the frame must be discarded;

	 * this is also the case when the 2 bytes before the marker are

	 * not the JPEG end of frame ('ff d9').

 count the packets and their size */

/*fixme: assumption about the following code:

 *	- there can be only one marker in a packet

 skip the remaining bytes of a short marker */

 if 'ff' at end of previous packet */

 search backwards if there is a marker in the packet */

 (there may be 'ff ff' inside a marker) */

 no marker found */

 add the JPEG header if first fragment */

 marker found */

 if some error, discard the frame and decrease the quality */

 compute the filling rate and a new JPEG quality */

	/* if the marker is smaller than 62 bytes,

 no more usable data */

 if more data, start a new frame */

 interrupt packet data */

 interrupt packet length */

 sub-driver description */

 -- module initialisation -- */

	{USB_DEVICE(0x0c45, 0x603a), BS(SN9C102P, OV7648)}, */

	{USB_DEVICE(0x0c45, 0x607a), BS(SN9C102P, OV7648)}, */

	{USB_DEVICE(0x0c45, 0x607b), BS(SN9C102P, OV7660)}, */

	{USB_DEVICE(0x0c45, 0x607e), BS(SN9C102P, OV7630)}, */

 or MT9V111 */

	{USB_DEVICE(0x0c45, 0x60c2), BS(SN9C105, P1030xC)}, */

	{USB_DEVICE(0x0c45, 0x60c8), BS(SN9C105, OM6802)}, */

	{USB_DEVICE(0x0c45, 0x60cc), BS(SN9C105, HV7131GP)}, */

	{USB_DEVICE(0x0c45, 0x60ef), BS(SN9C105, ICM105C)}, */

	{USB_DEVICE(0x0c45, 0x60fa), BS(SN9C105, OV7648)}, */

	{USB_DEVICE(0x0c45, 0x60f2), BS(SN9C105, OV7660)}, */

sn9c128*/

 /GC0305*/

	{USB_DEVICE(0x0c45, 0x6108), BS(SN9C120, OM6802)}, */

sn9c128*/

sn9c128*/

sn9c128*/

sn9c128*/

	{USB_DEVICE(0x0c45, 0x610f), BS(SN9C120, S5K53BEB)}, */

	{USB_DEVICE(0x0c45, 0x6122), BS(SN9C110, ICM105C)}, */

	{USB_DEVICE(0x0c45, 0x6123), BS(SN9C110, SanyoCCD)}, */

sn9c325?*/

bw600.inf:*/

sn9c325?*/

	{USB_DEVICE(0x0c45, 0x612f), BS(SN9C110, ICM105C)}, */

 or MT9V111 / MI0360B */

	{USB_DEVICE(0x0c45, 0x6132), BS(SN9C120, OV7670)}, */

sn9c120b*/

 or GC0305 / GC0307 */

sn9c120b*/

sn9c120b*/

	{USB_DEVICE(0x0c45, 0x614c), BS(SN9C120, GC0306)}, */	
 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Etoms Et61x151 GPL Linux driver by Michel Xhaard (09/09/2004)

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

 specific webcam descriptor */

 !! must be the first item */

/*	{640, 480, V4L2_PIX_FMT_SBGGR8, V4L2_FIELD_NONE,

		.bytesperline = 640,

		.sizeimage = 640 * 480,

		.colorspace = V4L2_COLORSPACE_SRGB,

 Control IO bit[0..5] (0 in  1 out) */

 Only IO data */

 Read Only IO data */

 enable i2c OutClck Powerdown mode */

 Compression register */

 base registers for luma calculation */

 OBW */

 OBW */

 OBW_AWB */

 OBW_AWB */

 OBW_AWB */

 Clkdelay ns */

 test pattern */

 test pattern */

 pxlClk = systemClk/(reg2) */

 line/frame H [11..4] */

 line/frame L [3..0] */

 exposure time line offset(default 5) */

 exposure time pixel offset(default 6) */

 signbit Dac (default 0) */

 global gain [4..0](default 0x0e) */

 end i2c write */

 read 'len' bytes to gspca_dev->usb_buf */

 buffer should be [D0..D7] */

 set the base address */

 sensor base for the pas106 */

 set count and prefetch */

 set the register base */

 set the base address */

 sensor base for the pas106 */

 set count and prefetch (cnd: 4 bits - mode: 4 bits) */

 set the register base */

 prefetch */

 read one byte */

 startvideo - set Bit5 */

 stopvideo */

 0x16 enabled pattern */

  compression et subsampling */

 320 */

 640 */

 undocumented registers */

 colors setting */

 0x30 */

 0x34 */

************/

 0x4d */

 0x52 */

 Window control registers */

 use cmc_out */

*************************************/

 0x68 */

0x69 */

0x0c */

 6d */

 Clock Pattern registers ***************** */

 0x28 */

 0x01 */

*********************************************/

*************************************/

*******************************************/

/*	reg_r(gspca_dev, ET_I2C_BASE, 1);

 set the sensor */

 320 */

 640 */

		value = 0x1e;	/* 0x17	 * setting PixelClock

					 * 0x03 mean 24/(3+1) = 6 Mhz

					 * 0x05 -> 24/(5+1) = 4 Mhz

					 * 0x0b -> 24/(11+1) = 2 Mhz

					 * 0x17 -> 24/(23+1) = 1 Mhz

 now set by fifo the FormatLine setting */

 set exposure times [ 0..0x78] 0->longvalue 0x78->shortvalue */

 0x47; */

 0x40; */

 Pedro change */

 Brightness change Brith+ decrease value */

 Brigth- increase value */

 original value = 0x70; */

 0x20; - set brightness */

 0x20; */

 __u8 green = 0; */

 red */

 blue */

 green = 15 - ((((7*I2cc[0]) >> 2 ) + I2cc[3]) >> 1); */

 I2cc[1] = I2cc[2] = green; */

		i2c_r(gspca_dev, PAS106_REG9);		 * blue */

 red */

	__u8 I2c0 [] = {0x0a, 0x12, 0x05, 0x22, 0xac, 0x00, 0x01, 0x00}; */

 try 1/120 0x6d 0xcd 0x40 */

/*	__u8 I2c0 [] = {0x0a, 0x12, 0x05, 0xfe, 0xfe, 0xc0, 0x01, 0x00};

   compression et subsampling */

 undocumented registers */

 colors setting */

 Window control registers */

 0x56 */

 0x04 */

 Clock Pattern registers */

 set the sensor */

 value = 0x1f; */

 value = 0x10; */

		/* bit 2 enable bit 1:2 select 0 1 2 3

		   value = 0x07;                                * curve 0 *

		   i2c_w(gspca_dev, PAS106_REG0f, &value, 1, 1);

	value = 0x01; */

	value = 0x22; */

	i2c_w(gspca_dev, PAS106_REG5, &value, 1, 1); */

 magnetude and sign bit for DAC */

 now set by fifo the whole colors setting */

 this function is called at probe time */

 this function is called at probe and resume time */

 video off */

 -- start the camera -- */

 video on */

 video off */

 isoc packet */

 iso packet length */

 don't change datalength as the chips provided it */

 Drop Packet */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

