/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Christian KÃ¶nig <christian.koenig@amd.com>

 Polaris10/11/12 firmware version */

/**

* uvd_v6_0_enc_support - get encode support status

*

* @adev: amdgpu_device pointer

*

* Returns the current hardware encode support status

/**

 * uvd_v6_0_ring_get_rptr - get read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware read pointer

/**

 * uvd_v6_0_enc_ring_get_rptr - get enc read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware enc read pointer

/**

 * uvd_v6_0_ring_get_wptr - get write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware write pointer

/**

 * uvd_v6_0_enc_ring_get_wptr - get enc write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware enc write pointer

/**

 * uvd_v6_0_ring_set_wptr - set write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the write pointer to the hardware

/**

 * uvd_v6_0_enc_ring_set_wptr - set enc write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the enc write pointer to the hardware

/**

 * uvd_v6_0_enc_ring_test_ring - test if UVD ENC ring is working

 *

 * @ring: the engine to test on

 *

/**

 * uvd_v6_0_enc_get_create_msg - generate a UVD ENC create msg

 *

 * @ring: ring we should submit the msg to

 * @handle: session handle to use

 * @bo: amdgpu object for which we query the offset

 * @fence: optional fence to return

 *

 * Open up a stream for HW test

 session info */

 task info */

 op initialize */

/**

 * uvd_v6_0_enc_get_destroy_msg - generate a UVD ENC destroy msg

 *

 * @ring: ring we should submit the msg to

 * @handle: session handle to use

 * @bo: amdgpu object for which we query the offset

 * @fence: optional fence to return

 *

 * Close up a stream for HW test or if userspace failed to do so

 session info */

 task info */

 op close session */

/**

 * uvd_v6_0_enc_ring_test_ib - test if UVD ENC IBs are working

 *

 * @ring: the engine to test on

 * @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT

 *

 UVD TRAP */

 UVD ENC TRAP */

/**

 * uvd_v6_0_hw_init - start and test UVD block

 *

 * @handle: handle used to pass amdgpu_device pointer

 *

 * Initialize the hardware, boot up the VCPU and do some testing

 Clear timeout status bits */

/**

 * uvd_v6_0_hw_fini - stop the hardware block

 *

 * @handle: handle used to pass amdgpu_device pointer

 *

 * Stop the UVD block, mark ring as not ready any more

	/*

	 * Proper cleanups before halting the HW engine:

	 *   - cancel the delayed idle work

	 *   - enable powergating

	 *   - enable clockgating

	 *   - disable dpm

	 *

	 * TODO: to align with the VCN implementation, move the

	 * jobs for clockgating/powergating/dpm setting to

	 * ->set_powergating_state().

 shutdown the UVD block */

/**

 * uvd_v6_0_mc_resume - memory controller programming

 *

 * @adev: amdgpu_device pointer

 *

 * Let the UVD memory controller know it's offsets

 program memory controller bits 0-27 */

/**

 * uvd_v6_0_start - start UVD block

 *

 * @adev: amdgpu_device pointer

 *

 * Setup and start the UVD block

 disable DPG */

 disable byte swapping */

 disable interupt */

 stall UMC and register bus before resetting VCPU */

 put LMI, VCPU, RBC etc... into reset */

 take UVD block out of reset */

 initialize UVD memory controller */

 swap (8 in 32) RB and IB */

 take all subblocks out of reset, except VCPU */

 enable VCPU clock */

 enable UMC */

 boot up the VCPU */

 enable master interrupt */

 clear the bit 4 of UVD_STATUS */

 force RBC into idle state */

 set the write pointer delay */

 set the wb address */

 program the RB_BASE for ring buffer */

 Initialize the ring buffer's read and write pointers */

/**

 * uvd_v6_0_stop - stop UVD block

 *

 * @adev: amdgpu_device pointer

 *

 * stop the UVD block

 force RBC into idle state */

 Stall UMC and register bus before resetting VCPU */

 put VCPU into reset */

 disable VCPU clock */

 Unstall UMC and register bus */

/**

 * uvd_v6_0_ring_emit_fence - emit an fence & trap command

 *

 * @ring: amdgpu_ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Write a fence and a trap command to the ring.

/**

 * uvd_v6_0_enc_ring_emit_fence - emit an enc fence & trap command

 *

 * @ring: amdgpu_ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Write enc a fence and a trap command to the ring.

/**

 * uvd_v6_0_ring_emit_hdp_flush - skip HDP flushing

 *

 * @ring: amdgpu_ring pointer

 The firmware doesn't seem to like touching registers at this point. */

/**

 * uvd_v6_0_ring_test_ring - register write test

 *

 * @ring: amdgpu_ring pointer

 *

 * Test if we can successfully write to the context register

/**

 * uvd_v6_0_ring_emit_ib - execute indirect buffer

 *

 * @ring: amdgpu_ring pointer

 * @job: job to retrieve vmid from

 * @ib: indirect buffer to execute

 * @flags: unused

 *

 * Write ring commands to execute the indirect buffer

/**

 * uvd_v6_0_enc_ring_emit_ib - enc execute indirect buffer

 *

 * @ring: amdgpu_ring pointer

 * @job: job to retrive vmid from

 * @ib: indirect buffer to execute

 * @flags: unused

 *

 * Write enc ring commands to execute the indirect buffer

 mask */

 mask */

 Wait a little for things to settle down */

 TODO

 only in pg enabled, we can gate clock to vcpu*/

 wait for STATUS to clear */

 enable HW gates because UVD is idle */

		uvd_v6_0_set_hw_clock_gating(adev); */

 disable HW gating and enable Sw gating */

	/* This doesn't actually powergate the UVD block.

	 * That's done in the dpm code via the SMC.  This

	 * just re-inits the block as necessary.  The actual

	 * gating still happens in the dpm code.  We should

	 * revisit this when there is a cleaner line between

	 * the smc and the hw blocks

 AMD_CG_SUPPORT_UVD_MGCG */

 hdp invalidate */

 uvd_v6_0_ring_emit_pipeline_sync */

 uvd_v6_0_ring_emit_fence x1 no user fence */

 uvd_v6_0_ring_emit_ib */

 hdp invalidate */

 uvd_v6_0_ring_emit_pipeline_sync */

 uvd_v6_0_ring_emit_vm_flush */

 uvd_v6_0_ring_emit_fence x2 vm fence */

 uvd_v6_0_ring_emit_ib */

 uvd_v6_0_enc_ring_emit_pipeline_sync */

 uvd_v6_0_enc_ring_emit_vm_flush */

 uvd_v6_0_enc_ring_emit_fence x2 vm fence */

 uvd_v6_0_enc_ring_insert_end */

 uvd_v6_0_enc_ring_emit_ib */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 ras init of specific umc version */

		/* still call query_ras_error_address to clear error status

		 * even NOMEM error is encountered

		/* umc query_ras_error_address is also responsible for clearing

		 * error status

 only uncorrectable error needs gpu reset */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 record to keep track of pmu entry per pmu type per device */

/*

 * Events fall under two categories:

 *  - PMU typed

 *    Events in /sys/bus/event_source/devices/amdgpu_<pmu_type>_<dev_num> have

 *    performance counter operations handled by one IP <pmu_type>.  Formats and

 *    events should be defined by <pmu_type>_<asic_type>_formats and

 *    <pmu_type>_<asic_type>_events respectively.

 *

 *  - Event config typed

 *    Events in /sys/bus/event_source/devices/amdgpu_<dev_num> have performance

 *    counter operations that can be handled by multiple IPs dictated by their

 *    "type" format field.  Formats and events should be defined by

 *    amdgpu_pmu_formats and <asic_type>_events respectively.  Format field

 *    "type" is generated in amdgpu_pmu_event_show and defined in

 *    <asic_type>_event_config_types.

 Vega20 events */

 Vega20 data fabric (DF) events */

 Arcturus events */

 initialize perf counter */

 test the event attr type check for PMU enumeration */

 update the hw_perf_event struct with config data */

 start perf counter */

 unused */,

 add counter */);

 read perf counter */

 stop perf counter */

 add perf counter */

 unused */,

 add counter */);

 delete perf counter  */

 init pmu tracking per pmu type */

 destroy all pmu data associated with target device */

 init amdgpu_pmu */

/*

 * Copyright 2018 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

				/*

				 * convert the endianness of base addresses in place,

				 * so that we don't need to convert them when accessing adev->reg_offset.

					/* Instance support is somewhat inconsistent.

					 * SDMA is a good example.  Sienna cichlid has 4 total

					 * SDMA instances, each enumerated separately (HWIDs

					 * 42, 43, 68, 69).  Arcturus has 8 total SDMA instances,

					 * but they are enumerated as multiple instances of the

					 * same HWIDs (4x HWID 42, 4x HWID 43).  UMC is another

					 * example.  On most chips there are multiple instances

					 * with the same HWID.

 some IP discovery tables on Navy Flounder don't have this set correctly */

 what IP to use for this? */

 use GC or MMHUB IP version */

 UVD is not supported on vega20 SR-IOV */

 VCE is not supported on vega20 SR-IOV */

 set NBIO version */

 For SR-IOV, PSP needs to be initialized before IH */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Copyright 2007-8 Advanced Micro Devices, Inc.

 * Copyright 2008 Red Hat Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Dave Airlie

 *          Alex Deucher

		/* Don't mess with SS if percentage is 0 or external ss.

		 * SS is already disabled previously, and disabling it

		 * again can cause display problems if the pll is already

		 * programmed.

				/* one other crtc is using this pll don't turn

				 * off spread spectrum as it might turn off

				 * display on active crtc

 use recommended ref_div for ss */

 DVO wants 2x pixel clock if the DVO chip is in 12 bit mode */

 adjust pll for deep color modes */

	/* DCE3+ has an AdjustDisplayPll that will adjust the pixel clock

	 * accordingly based on the encoder/transmitter to work around

	 * special hw requirements.

 16200 or 27000 */

/* on DCE5, make sure the voltage is high enough to support the

 * required disp clk.

			/* if the default dcpll clock is specified,

			 * SetPixelClock provides the dividers

			/* if the default dcpll clock is specified,

			 * SetPixelClock provides the dividers

 10kHz units */

 HDMI depth, etc. */

 yes this is correct, the atom define is wrong */

 yes this is correct, the atom define is wrong */

 HDMI depth, etc. */

 100 hz units */

 Assign mode clock for hdmi deep color max clock limit check */

 DP/eDP */

 adjust pixel clock as needed */

 pass the actual clock to amdgpu_atombios_crtc_program_pll for HDMI */

 update pll params */

 calculate ss amount and step size */

/*

 * Copyright 2012 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Alex Deucher

/*

 * Indirect registers accessor

 Some of the registers might be dependent on GRBM_GFX_INDEX */

/**

 * cik_get_xclk - get the xclk

 *

 * @adev: amdgpu_device pointer

 *

 * Returns the reference clock used by the gfx engine

 * (CIK).

/**

 * cik_srbm_select - select specific register instances

 *

 * @adev: amdgpu_device pointer

 * @me: selected ME (micro engine)

 * @pipe: pipe

 * @queue: queue

 * @vmid: VMID

 *

 * Switches the currently active registers instances.  Some

 * registers are instanced per VMID, others are instanced per

 * me/pipe/queue combination.

 enable the rom */

 Disable VGA mode */

 restore regs */

 APU vbios image is part of sbios image */

 take the smc lock since we are using the smc index */

 set rom index to 0 */

 set index to data for continous read */

/**

 * cik_asic_pci_config_reset - soft reset GPU

 *

 * @adev: amdgpu_device pointer

 *

 * Use PCI Config method to reset the GPU.

 *

 * Returns 0 for success.

 disable BM */

 reset */

 wait for asic to come out of reset */

 enable BM */

 does asic init need to be run first??? */

/**

 * cik_asic_reset - soft reset GPU

 *

 * @adev: amdgpu_device pointer

 *

 * Look up which blocks are hung and attempt

 * to reset them.

 * Returns 0 for success.

 re-try equalization if gen3 is not already enabled */

 check status */

 linkctl */

 linkctl2 */

 set the link speed */

 gen3 */

 gen2 */

 gen1 */

 XXX double check APUs */

 change this when we support soft reset */

	/* This reports 0 on APUs, so return to avoid writing/reading registers

	 * that may or may not be different from their GPU counterparts

 Set the 2 events that we wish to watch, defined above */

 Reg 40 is # received msgs, Reg 104 is # of posted requests sent */

 Write to enable desired perf counters */

	/* Zero out and enable the perf counters

	 * Write 0x5:

	 * Bit 0 = Start all counters(1)

	 * Bit 2 = Global counter reset enable(1)

	/* Load the shadow and disable the perf counters

	 * Write 0x2:

	 * Bit 0 = Stop counters(0)

	 * Bit 1 = Load the shadow counters(1)

 Read register values to get any >32bit overflow */

 Get the values and add the overflow */

 check if the SMC is already running */

 Get the number of NAKs received and generated */

 Add the total number of NAKs, i.e the number of replays */

AMD_CG_SUPPORT_GFX_CGCG |*/

AMD_CG_SUPPORT_GFX_CGCG |*/

AMD_CG_SUPPORT_GFX_CGCG |*/

			/*AMD_PG_SUPPORT_GFX_PG |

			  AMD_PG_SUPPORT_GFX_SMG |

			/*  AMD_PG_SUPPORT_CP |

			  AMD_PG_SUPPORT_GDS |

			  AMD_PG_SUPPORT_RLC_SMU_HS |

			  AMD_PG_SUPPORT_ACP |

AMD_CG_SUPPORT_GFX_CGCG |*/

			/*AMD_PG_SUPPORT_GFX_PG |

			/*AMD_PG_SUPPORT_VCE |

			  AMD_PG_SUPPORT_CP |

			  AMD_PG_SUPPORT_GDS |

			  AMD_PG_SUPPORT_RLC_SMU_HS |

 FIXME: not supported yet */

 move the golden regs per IP block */

 enable pcie gen2/3 link */

 enable aspm */

 XXX hard reset?? */

 FIXME: not supported yet */

/*

 * Copyright 2007-8 Advanced Micro Devices, Inc.

 * Copyright 2008 Red Hat Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Dave Airlie

 *          Alex Deucher

 walk the list and link encoders to connectors */

	/* if we don't have an active device yet, just use one of

	 * the connectors tied to the encoder.

 HDMI 1.3 supports up to 340 Mhz over single link */

 HDMI 1.3 supports up to 340 Mhz over single link */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * The 2 macros bellow represent the actual size in bytes that

 * those entities occupy in the EEPROM memory.

 * RAS_TABLE_RECORD_SIZE is different than sizeof(eeprom_table_record) which

 * uses uint64 to store 6b fields such as retired_page.

 Table hdr is 'AMDR' */

 Bad GPU tag âBADGâ */

 Assume 2-Mbit size EEPROM and take up the whole space. */

/* Given a zero-based index of an EEPROM RAS record, yields the EEPROM

 * offset off of RAS_TABLE_START.  That is, this is something you can

 * add to control->i2c_address, and then tell I2C layer to read

 * from/write to there. _N is the so called absolute index,

 * because it starts right after the table header.

/* Given a 0-based relative record index, 0, 1, 2, ..., etc., off

 * of "fri", return the absolute record index off of the end of

 * the table header.

		/* The address given by VBIOS is an 8-bit, wire-format

		 * address, i.e. the most significant byte.

		 *

		 * Normalize it to a 19-bit EEPROM address. Remove the

		 * device type identifier and make it a 7-bit address;

		 * then make it a 19-bit EEPROM address. See top of

		 * amdgpu_eeprom.c.

 i2c may be unstable in gpu reset */

 Header checksum, skip checksum field in the calculation */

/**

 * amdgpu_ras_eeprom_reset_table -- Reset the RAS EEPROM table

 * @control: pointer to control structure

 *

 * Reset the contents of the header of the RAS EEPROM table.

 * Return 0 on success, -errno on error.

 Next are all record fields according to EEPROM page spec in LE foramt */

 Next are all record fields according to EEPROM page spec in LE foramt */

 skip check eeprom table for VEGA20 Gaming */

/**

 * __amdgpu_ras_eeprom_write -- write indexed from buffer to EEPROM

 * @control: pointer to control structure

 * @buf: pointer to buffer containing data to write

 * @fri: start writing at this index

 * @num: number of records to write

 *

 * The caller must hold the table mutex in @control.

 * Return 0 on success, -errno otherwise.

 i2c may be unstable in gpu reset */

		/* Short write, return error.

	/* Encode all of them in one go.

	/* a, first record index to write into.

	 * b, last record index to write into.

	 * a = first index to read (fri) + number of records in the table,

	 * b = a + @num - 1.

	 * Let N = control->ras_max_num_record_count, then we have,

	 * case 0: 0 <= a <= b < N,

	 *   just append @num records starting at a;

	 * case 1: 0 <= a < N <= b,

	 *   append (N - a) records starting at a, and

	 *   append the remainder,  b % N + 1, starting at 0.

	 * case 2: 0 <= fri < N <= a <= b, then modulo N we get two subcases,

	 * case 2a: 0 <= a <= b < N

	 *   append num records starting at a; and fix fri if b overwrote it,

	 *   and since a <= b, if b overwrote it then a must've also,

	 *   and if b didn't overwrite it, then a didn't also.

	 * case 2b: 0 <= b < a < N

	 *   write num records starting at a, which wraps around 0=N

	 *   and overwrite fri unconditionally. Now from case 2a,

	 *   this means that b eclipsed fri to overwrite it and wrap

	 *   around 0 again, i.e. b = 2N+r pre modulo N, so we unconditionally

	 *   set fri = b + 1 (mod N).

	 * Now, since fri is updated in every case, except the trivial case 0,

	 * the number of records present in the table after writing, is,

	 * num_recs - 1 = b - fri (mod N), and we take the positive value,

	 * by adding an arbitrary multiple of N before taking the modulo N

	 * as shown below.

 Note that, b - a + 1 = num. */

			/* b < a, which means, we write from

			 * a to the end of the table, and from

			 * the start of the table to b.

	/* Modify the header if it exceeds.

	/* Recalc the checksum.

 avoid sign extension when assigning to "checksum" */

/**

 * amdgpu_ras_eeprom_append -- append records to the EEPROM RAS table

 * @control: pointer to control structure

 * @record: array of records to append

 * @num: number of records in @record array

 *

 * Append @num records to the table, calculate the checksum and write

 * the table back to EEPROM. The maximum number of records that

 * can be appended is between 1 and control->ras_max_record_count,

 * regardless of how many records are already stored in the table.

 *

 * Return 0 on success or if EEPROM is not supported, -errno on error.

/**

 * __amdgpu_ras_eeprom_read -- read indexed from EEPROM into buffer

 * @control: pointer to control structure

 * @buf: pointer to buffer to read into

 * @fri: first record index, start reading at this index, absolute index

 * @num: number of records to read

 *

 * The caller must hold the table mutex in @control.

 * Return 0 on success, -errno otherwise.

 i2c may be unstable in gpu reset */

		/* Short read, return error.

/**

 * amdgpu_ras_eeprom_read -- read EEPROM

 * @control: pointer to control structure

 * @record: array of records to read into

 * @num: number of records in @record

 *

 * Reads num records from the RAS table in EEPROM and

 * writes the data into @record array.

 *

 * Returns 0 on success, -errno on error.

	/* Determine how many records to read, from the first record

	 * index, fri, to the end of the table, and from the beginning

	 * of the table, such that the total number of records is

	 * @num, and we handle wrap around when fri > 0 and

	 * fri + num > RAS_MAX_RECORD_COUNT.

	 *

	 * First we compute the index of the last element

	 * which would be fetched from each region,

	 * g0 is in [fri, fri + num - 1], and

	 * g1 is in [0, RAS_MAX_RECORD_COUNT - 1].

	 * Then, if g0 < RAS_MAX_RECORD_COUNT, the index of

	 * the last element to fetch, we set g0 to _the number_

	 * of elements to fetch, @num, since we know that the last

	 * indexed to be fetched does not exceed the table.

	 *

	 * If, however, g0 >= RAS_MAX_RECORD_COUNT, then

	 * we set g0 to the number of elements to read

	 * until the end of the table, and g1 to the number of

	 * elements to read from the beginning of the table.

	/* Read up everything? Then transform.

	/* We want *pos - data_len > 0, which means there's

	 * bytes to be printed from data.

		/* Find the starting record index

			/* Read a single record

/**

 * __verify_ras_table_checksum -- verify the RAS EEPROM table checksum

 * @control: pointer to control structure

 *

 * Check the checksum of the stored in EEPROM RAS table.

 *

 * Return 0 if the checksum is correct,

 * positive if it is not correct, and

 * -errno on I/O error.

		/* On partial reads, return -EIO.

 Verify i2c adapter is initialized */

 Read the table header from EEPROM address */

		/* Warn if we are at 90% of the threshold or above

			/* This means that, the threshold was increased since

			 * the last time the system was booted, and now,

			 * ras->bad_page_cnt_threshold - control->num_recs > 0,

			 * so that at least one more record can be saved,

			 * before the page count threshold is reached.

/*

 * Copyright 2016-2018 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

/* Eviction Fence

 * Fence helper functions to deal with KFD memory eviction.

 * Big Idea - Since KFD submissions are done by user queues, a BO cannot be

 *  evicted unless all the user queues for that process are evicted.

 *

 * All the BOs in a process share an eviction fence. When process X wants

 * to map VRAM memory but TTM can't find enough space, TTM will attempt to

 * evict BOs from its LRU list. TTM checks if the BO is valuable to evict

 * by calling ttm_device_funcs->eviction_valuable().

 *

 * ttm_device_funcs->eviction_valuable() - will return false if the BO belongs

 *  to process X. Otherwise, it will return true to indicate BO can be

 *  evicted by TTM.

 *

 * If ttm_device_funcs->eviction_valuable returns true, then TTM will continue

 * the evcition process for that BO by calling ttm_bo_evict --> amdgpu_bo_move

 * --> amdgpu_copy_buffer(). This sets up job in GPU scheduler.

 *

 * GPU Scheduler (amd_sched_main) - sets up a cb (fence_add_callback) to

 *  nofity when the BO is free to move. fence_add_callback --> enable_signaling

 *  --> amdgpu_amdkfd_fence.enable_signaling

 *

 * amdgpu_amdkfd_fence.enable_signaling - Start a work item that will quiesce

 * user queues and signal fence. The work item will also start another delayed

 * work item to restore BOs

 This reference gets released in amdkfd_fence_release */

/**

 * amdkfd_fence_enable_signaling - This gets called when TTM wants to evict

 *  a KFD BO and schedules a job to move the BO.

 *  If fence is already signaled return true.

 *  If fence is not signaled schedule a evict KFD process work item.

 *

 *  @f: dma_fence

/**

 * amdkfd_fence_release - callback that fence can be freed

 *

 * @f: dma_fence

 *

 * This function is called when the reference count becomes zero.

 * Drops the mm_struct reference and RCU schedules freeing up the fence.

	/* Unconditionally signal the fence. The process is getting

	 * terminated.

 Not an amdgpu_amdkfd_fence */

/**

 * amdkfd_fence_check_mm - Check if @mm is same as that of the fence @f

 *  if same return TRUE else return FALSE.

 *

 * @f: [IN] fence

 * @mm: [IN] mm that needs to be verified

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 Enable pflip interrupts */

 Disable pflip interrupts */

/**

 * dce_v8_0_page_flip - pageflip callback.

 *

 * @adev: amdgpu_device pointer

 * @crtc_id: crtc to cleanup pageflip on

 * @crtc_base: new address of the crtc (GPU MC address)

 * @async: asynchronous flip

 *

 * Triggers the actual pageflip by updating the primary

 * surface base address.

 flip at hsync for async, default is vsync */

 update pitch */

 update the primary scanout addresses */

 writing to the low address triggers the update */

 post the write */

/**

 * dce_v8_0_hpd_sense - hpd sense callback.

 *

 * @adev: amdgpu_device pointer

 * @hpd: hpd (hotplug detect) pin

 *

 * Checks if a digital monitor is connected (evergreen+).

 * Returns true if connected, false if not connected.

/**

 * dce_v8_0_hpd_set_polarity - hpd set polarity callback.

 *

 * @adev: amdgpu_device pointer

 * @hpd: hpd (hotplug detect) pin

 *

 * Set the polarity of the hpd pin (evergreen+).

/**

 * dce_v8_0_hpd_init - hpd setup callback.

 *

 * @adev: amdgpu_device pointer

 *

 * Setup the hpd pins used by the card (evergreen+).

 * Enable the pin, set the polarity, and enable the hpd interrupts.

			/* don't try to enable hpd on eDP or LVDS avoid breaking the

			 * aux dp channel on imac and help (but not completely fix)

			 * https://bugzilla.redhat.com/show_bug.cgi?id=726143

			 * also avoid interrupt storms during dpms.

/**

 * dce_v8_0_hpd_fini - hpd tear down callback.

 *

 * @adev: amdgpu_device pointer

 *

 * Tear down the hpd pins used by the card (evergreen+).

 * Disable the hpd interrupts.

 Lockout access through VGA aperture*/

 disable VGA render */

Disable VGA render and enabled crtc, if has DCE engine*/

Disable crtc*/

 LVDS/eDP FMT is set up by atom */

 not needed for analog */

 XXX sort out optimal dither settings */

 XXX sort out optimal dither settings */

 XXX sort out optimal dither settings */

 not needed */

 display watermark setup */

/**

 * dce_v8_0_line_buffer_adjust - Set up the line buffer

 *

 * @adev: amdgpu_device pointer

 * @amdgpu_crtc: the selected display controller

 * @mode: the current display mode on the selected display

 * controller

 *

 * Setup up the line buffer allocation for

 * the selected display controller (CIK).

 * Returns the line buffer size in pixels.

	/*

	 * Line Buffer Setup

	 * There are 6 line buffers, one for each display controllers.

	 * There are 3 partitions per LB. Select the number of partitions

	 * to enable based on the display width.  For display widths larger

	 * than 4096, you need use to use 2 display controllers and combine

	 * them using the stereo blender.

 controller not enabled, so no lb used */

/**

 * cik_get_number_of_dram_channels - get the number of dram channels

 *

 * @adev: amdgpu_device pointer

 *

 * Look up the number of video ram channels (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the number of dram channels

 number of dram channels */

 bandwidth per dram data pin in kHz */

 engine clock in kHz */

 display clock in kHz */

 viewport width */

 active display time in ns */

 blank time in ns */

 mode is interlaced */

 vertical scale ratio */

 number of active crtcs */

 bytes per pixel display + overlay */

 line buffer allocated to pipe */

 vertical scaler taps */

/**

 * dce_v8_0_dram_bandwidth - get the dram bandwidth

 *

 * @wm: watermark calculation data

 *

 * Calculate the raw dram bandwidth (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the dram bandwidth in MBytes/s

 Calculate raw DRAM Bandwidth */

 0.7 */

/**

 * dce_v8_0_dram_bandwidth_for_display - get the dram bandwidth for display

 *

 * @wm: watermark calculation data

 *

 * Calculate the dram bandwidth used for display (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the dram bandwidth for display in MBytes/s

 Calculate DRAM Bandwidth and the part allocated to display. */

 0.3 to 0.7 */

 XXX worse case value 0.3 */

/**

 * dce_v8_0_data_return_bandwidth - get the data return bandwidth

 *

 * @wm: watermark calculation data

 *

 * Calculate the data return bandwidth used for display (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the data return bandwidth in MBytes/s

 Calculate the display Data return Bandwidth */

 0.8 */

/**

 * dce_v8_0_dmif_request_bandwidth - get the dmif bandwidth

 *

 * @wm: watermark calculation data

 *

 * Calculate the dmif bandwidth used for display (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the dmif bandwidth in MBytes/s

 Calculate the DMIF Request Bandwidth */

 0.8 */

/**

 * dce_v8_0_available_bandwidth - get the min available bandwidth

 *

 * @wm: watermark calculation data

 *

 * Calculate the min available bandwidth used for display (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the min available bandwidth in MBytes/s

 Calculate the Available bandwidth. Display can use this temporarily but not in average. */

/**

 * dce_v8_0_average_bandwidth - get the average available bandwidth

 *

 * @wm: watermark calculation data

 *

 * Calculate the average available bandwidth used for display (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the average available bandwidth in MBytes/s

	/* Calculate the display mode Average Bandwidth

	 * DisplayMode should contain the source and destination dimensions,

	 * timing, etc.

/**

 * dce_v8_0_latency_watermark - get the latency watermark

 *

 * @wm: watermark calculation data

 *

 * Calculate the latency watermark (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the latency watermark in ns

 First calculate the latency in ns */

 2000 ns. */

 dc pipe latency */

/**

 * dce_v8_0_average_bandwidth_vs_dram_bandwidth_for_display - check

 * average and available dram bandwidth

 *

 * @wm: watermark calculation data

 *

 * Check if the display average bandwidth fits in the display

 * dram bandwidth (CIK).

 * Used for display watermark bandwidth calculations

 * Returns true if the display fits, false if not.

/**

 * dce_v8_0_average_bandwidth_vs_available_bandwidth - check

 * average and available bandwidth

 *

 * @wm: watermark calculation data

 *

 * Check if the display average bandwidth fits in the display

 * available bandwidth (CIK).

 * Used for display watermark bandwidth calculations

 * Returns true if the display fits, false if not.

/**

 * dce_v8_0_check_latency_hiding - check latency hiding

 *

 * @wm: watermark calculation data

 *

 * Check latency hiding (CIK).

 * Used for display watermark bandwidth calculations

 * Returns true if the display fits, false if not.

/**

 * dce_v8_0_program_watermarks - program display watermarks

 *

 * @adev: amdgpu_device pointer

 * @amdgpu_crtc: the selected display controller

 * @lb_size: line buffer size

 * @num_heads: number of display controllers in use

 *

 * Calculate and program the display watermarks for the

 * selected display controller (CIK).

 watermark for high clocks */

 XXX: get this from fb config */

 set for high clocks */

 possibly force display priority to high */

 should really do this at mode validation time... */

 watermark for low clocks */

 XXX: get this from fb config */

 set for low clocks */

 possibly force display priority to high */

 should really do this at mode validation time... */

 select wm A */

 select wm B */

 restore original selection */

 save values for DPM */

 Save number of lines the linebuffer leads before the scanout */

/**

 * dce_v8_0_bandwidth_update - program display watermarks

 *

 * @adev: amdgpu_device pointer

 *

 * Calculate and program the display watermarks and line

 * buffer allocation (CIK).

 program the speaker allocation */

 set HDMI mode */

 stereo */

 KV: 4 streams, 7 endpoints */

 KB/ML: 2 streams, 3 endpoints */

 BN/HW: 6 streams, 7 endpoints */

 disable audio.  it will be set up later */

 XXX remove once we switch to ip funcs */

/*

 * update the N and CTS parameters for a given pixel clock rate

/*

 * build a HDMI Video Info Frame

 XXX two dtos; generally use dto0 for hdmi */

	/* Express [24MHz / target pixel clock] as an exact rational

	 * number (coefficient of two integer numbers.  DCCG_AUDIO_DTOx_PHASE

	 * is the numerator, DCCG_AUDIO_DTOx_MODULE is the denominator

/*

 * update the info frames with the data from the current display mode

 Silent, r600_hdmi_enable will raise WARN for us */

 hdmi deep color mode general control packets setup, if bpc > 8 */

 disable audio prior to setting up hw */

 send null packets when required */

 send null packets when required */

 send general control packets */

 send general control packets every frame */

 enable audio info frames (frames won't be set until audio is enabled) */

 required for audio info values to be updated */

 required for audio info values to be updated */

 anything other than 0 */

 unset HDMI_GC_AVMUTE */

 set the default audio delay */

 should be suffient for all audio modes and small enough for all hblanks */

 allow 60958 channel status fields to be updated */

 fglrx clears sth in AFMT_AUDIO_PACKET_CONTROL2 here */

 allow hw to sent ACR packets when required */

 select SW CTS value */

 allow hw to sent ACR packets when required */

 enable AVI info frames */

 required for audio info values to be updated */

 anything other than 0 */

 send audio packets */

 enable audio after setting up hw */

 Silent, r600_hdmi_enable will raise WARN for us */

 DCE8 has audio blocks tied to DIG encoders */

 no fb bound */

	/* If atomic, assume fb object is pinned & idle & fenced and

	 * just update base pointers

 Greater 8 bpc fb needs to bypass hw-lut to retain precision */

 Greater 8 bpc fb needs to bypass hw-lut to retain precision */

	/* Make sure surface address is updated at vertical blank rather than

	 * horizontal blank

	/*

	 * The LUT only has 256 slots for indexing by a 8 bpc fb. Bypass the LUT

	 * for > 8 bpc scanout to avoid truncation of fb indices to 8 msb's, to

	 * retain the full precision throughout the pipeline.

 set pageflip to happen anywhere in vblank interval */

 Bytes per pixel may have changed */

 XXX match this to the depth of the crtc fmt block, move to modeset? */

	/* XXX this only needs to be programmed once per crtc at startup,

	 * not sure where the best place for it is

/**

 * dce_v8_0_pick_pll - Allocate a PPLL for use by the crtc.

 *

 * @crtc: drm crtc

 *

 * Returns the PPLL (Pixel PLL) to be used by the crtc.  For DP monitors

 * a single PPLL can be used for all DP crtcs/encoders.  For non-DP

 * monitors a dedicated PPLL must be used.  If a particular board has

 * an external DP PLL, return ATOM_PPLL_INVALID to skip PLL programming

 * as there is no need to program the PLL itself.  If we are not able to

 * allocate a PLL, return ATOM_PPLL_INVALID to skip PLL programming to

 * avoid messing up an existing monitor.

 *

 * Asic specific PLL information

 *

 * DCE 8.x

 * KB/KV

 * - PPLL1, PPLL2 are available for all UNIPHY (both DP and non-DP)

 * CI

 * - PPLL0, PPLL1, PPLL2 are available for all UNIPHY (both DP and non-DP) and DAC

 *

 skip PPLL programming if using ext clock */

 use the same PPLL for all DP monitors */

 use the same PPLL for all monitors with the same clock */

 otherwise, pick one of the plls */

 KB/ML has PPLL1 and PPLL2 */

 CI/KV has PPLL0, PPLL1, and PPLL2 */

 avivo cursor are offset into the total surface */

 turn off cursor */

 Make sure VBLANK and PFLIP interrupts are still enabled */

 adjust pm to dpms */

 disable crtc pair power gating before programming */

 disable the GRPH */

			/* one other crtc is using this pll don't turn

			 * off the pll

 disable the ppll */

 disable the ppll */

 update the hw version fpr dpm */

 assign the encoder to the amdgpu crtc to avoid repeated lookups later */

 pick pll */

 if we can't get a PPLL for a non-DP encoder, fail */

 ? */

 FIXME: not supported yet */

 HPD hotplug */

 allocate crtcs */

 setup afmt */

 disable vga render */

 init dig PHYs, disp eng pll */

 initialize hpd */

 turn on the BL */

 Wait a little for things to settle down */

 vblank */

 vline */

 IRQ could occur when in initial stage */

 page flip completed. clean up */

 wakeup usersapce */

 need to call this here rather than in prepare() since we need some crtc info */

 set scaler clears this on some chips */

 select the clock/data port if it uses a router */

 turn eDP panel on for mode set */

 this is needed for the pll/ss setup to work correctly in some cases */

 set up the FMT blocks */

 need to call this here as we need the crtc set up */

 these are handled by the primary encoders */

 no detect for TMDS/LVDS yet */

 see if we already added it */

 add a new one */

 these are handled by the primary encoders */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * navi10_ih_init_register_offset - Initialize register offset for ih rings

 *

 * @adev: amdgpu_device pointer

 *

 * Initialize register offset ih rings (NAVI10).

/**

 * force_update_wptr_for_self_int - Force update the wptr for self interrupt

 *

 * @adev: amdgpu_device pointer

 * @threshold: threshold to trigger the wptr reporting

 * @timeout: timeout to trigger the wptr reporting

 * @enabled: Enable/disable timeout flush mechanism

 *

 * threshold input range: 0 ~ 15, default 0,

 * real_threshold = 2^threshold

 * timeout input range: 0 ~ 20, default 8,

 * real_timeout = (2^timeout) * 1024 / (socclk_freq)

 *

 * Force update wptr for self interrupt ( >= SIENNA_CICHLID).

/**

 * navi10_ih_toggle_ring_interrupts - toggle the interrupt ring buffer

 *

 * @adev: amdgpu_device pointer

 * @ih: amdgpu_ih_ring pointet

 * @enable: true - enable the interrupts, false - disable the interrupts

 *

 * Toggle the interrupt ring buffer (NAVI10)

 enable_intr field is only valid in ring0 */

 set rptr, wptr to 0 */

/**

 * navi10_ih_toggle_interrupts - Toggle all the available interrupt ring buffers

 *

 * @adev: amdgpu_device pointer

 * @enable: enable or disable interrupt ring buffers

 *

 * Toggle all the available interrupt ring buffers (NAVI10).

	/* Ring Buffer write pointer writeback. If enabled, IH_RB_WPTR register

	 * value is written to memory

/**

 * navi10_ih_enable_ring - enable an ih ring buffer

 *

 * @adev: amdgpu_device pointer

 * @ih: amdgpu_ih_ring pointer

 *

 * Enable an ih ring buffer (NAVI10)

 Ring Buffer base. [39:8] of 40-bit address of the beginning of the ring buffer*/

 set the ih ring 0 writeback address whether it's enabled or not */

 set rptr, wptr to 0 */

/**

 * navi10_ih_irq_init - init and enable the interrupt ring

 *

 * @adev: amdgpu_device pointer

 *

 * Allocate a ring buffer for the interrupt controller,

 * enable the RLC, disable interrupts, enable the IH

 * ring buffer and enable it (NAVI).

 * Called at device load and reume.

 * Returns 0 for success, errors for failure.

 disable irqs */

 update doorbell range for ih ring 0*/

 enable interrupts */

 enable wptr force update for self int */

/**

 * navi10_ih_irq_disable - disable interrupts

 *

 * @adev: amdgpu_device pointer

 *

 * Disable interrupts on the hw (NAVI10).

 Wait and acknowledge irq */

/**

 * navi10_ih_get_wptr - get the IH ring buffer wptr

 *

 * @adev: amdgpu_device pointer

 * @ih: IH ring buffer to fetch wptr

 *

 * Get the IH ring buffer wptr from either the register

 * or the writeback memory buffer (NAVI10).  Also check for

 * ring buffer overflow and deal with it.

 * Returns the value of the wptr.

	/* When a ring buffer overflow happen start parsing interrupt

	 * from the last not overwritten vector (wptr + 32). Hopefully

	 * this should allow us to catch up.

/**

 * navi10_ih_irq_rearm - rearm IRQ if lost

 *

 * @adev: amdgpu_device pointer

 * @ih: IH ring to match

 *

 Rearm IRQ / re-write doorbell if doorbell write is lost */

/**

 * navi10_ih_set_rptr - set the IH ring buffer rptr

 *

 * @adev: amdgpu_device pointer

 *

 * @ih: IH ring buffer to set rptr

 * Set the IH ring buffer rptr.

 XXX check if swapping is necessary on BE */

/**

 * navi10_ih_self_irq - dispatch work for ring 1 and 2

 *

 * @adev: amdgpu_device pointer

 * @source: irq source

 * @entry: IV with WPTR update

 *

 * Update the WPTR from the IV and schedule work to handle the entries.

	/* use gpu virtual address for ih ring

	 * until ih_checken is programmed to allow

 initialize ih control registers offset */

 todo */

 todo */

 todo */

/*

 * Copyright 2016 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * vcn_v1_0_early_init - set function pointers

 *

 * @handle: amdgpu_device pointer

 *

 * Set ring and irq function pointers

/**

 * vcn_v1_0_sw_init - sw init for VCN block

 *

 * @handle: amdgpu_device pointer

 *

 * Load firmware and sw initialization

 VCN DEC TRAP */

 VCN ENC TRAP */

 Override the work func */

/**

 * vcn_v1_0_sw_fini - sw fini for VCN block

 *

 * @handle: amdgpu_device pointer

 *

 * VCN suspend and free up sw allocation

/**

 * vcn_v1_0_hw_init - start and test VCN block

 *

 * @handle: amdgpu_device pointer

 *

 * Initialize the hardware, boot up the VCPU and do some testing

/**

 * vcn_v1_0_hw_fini - stop the hardware block

 *

 * @handle: amdgpu_device pointer

 *

 * Stop the VCN block, mark ring as not ready any more

/**

 * vcn_v1_0_suspend - suspend VCN block

 *

 * @handle: amdgpu_device pointer

 *

 * HW fini and suspend VCN block

/**

 * vcn_v1_0_resume - resume VCN block

 *

 * @handle: amdgpu_device pointer

 *

 * Resume firmware and hw init VCN block

/**

 * vcn_v1_0_mc_resume_spg_mode - memory controller programming

 *

 * @adev: amdgpu_device pointer

 *

 * Let the VCN memory controller know it's offsets

 cache window 0: fw */

 cache window 1: stack */

 cache window 2: context */

 cache window 0: fw */

 cache window 1: stack */

 cache window 2: context */

 VCN global tiling registers */

/**

 * vcn_v1_0_disable_clock_gating - disable VCN clock gating

 *

 * @adev: amdgpu_device pointer

 *

 * Disable clock gating for VCN block

 JPEG disable CGC */

 UVD disable CGC */

 turn on */

/**

 * vcn_v1_0_enable_clock_gating - enable VCN clock gating

 *

 * @adev: amdgpu_device pointer

 *

 * Enable clock gating for VCN block

 enable JPEG CGC */

 enable UVD CGC */

 disable JPEG CGC */

 enable sw clock gating control */

 turn off clock gating */

 turn on SUVD clock gating */

 turn on sw mode in UVD_SUVD_CGC_CTRL */

 polling UVD_PGFSM_STATUS to confirm UVDM_PWR_STATUS , UVDU_PWR_STATUS are 0 (power on) */

 Before power off, this indicator has to be turned on */

/**

 * vcn_v1_0_start_spg_mode - start VCN block

 *

 * @adev: amdgpu_device pointer

 *

 * Setup and start the VCN block

 disable byte swapping */

 disable clock gating */

 disable interupt */

 initialize VCN memory controller */

 swap (8 in 32) RB and IB */

 enable VCPU clock */

 boot up the VCPU */

 enable UMC */

 enable master interrupt */

 enable system interrupt for JRBC, TODO: move to set interrupt*/

 clear the busy bit of UVD_STATUS */

 force RBC into idle state */

 set the write pointer delay */

 set the wb address */

 program the RB_BASE for ring buffer */

 Initialize the ring buffer's read and write pointers */

 disable byte swapping */

 enable dynamic power gating mode */

 enable clock gating */

 enable VCPU clock */

 disable interupt */

 initialize VCN memory controller */

 swap (8 in 32) RB and IB */

 boot up the VCPU */

 enable UMC */

 enable master interrupt */

 setup mmUVD_LMI_CTRL */

 setup VCN global tiling registers */

 enable System Interrupt for JRBC */

 force RBC into idle state */

 set the write pointer delay */

 set the wb address */

 program the RB_BASE for ring buffer */

 Initialize the ring buffer's read and write pointers */

/**

 * vcn_v1_0_stop_spg_mode - stop VCN block

 *

 * @adev: amdgpu_device pointer

 *

 * stop the VCN block

 stall UMC channel */

 disable VCPU clock */

 reset LMI UMC/LMI */

 put VCPU into reset */

 Wait for power status to be UVD_POWER_STATUS__UVD_POWER_STATUS_TILES_OFF */

 wait for read ptr to be equal to write ptr */

 disable dynamic power gating mode */

 pause/unpause if state is changed */

 pause DPG non-jpeg */

 Restore */

 unpause dpg non-jpeg, no need to wait */

 pause/unpause if state is changed */

 Make sure JPRG Snoop is disabled before sending the pause */

 pause DPG jpeg */

 Restore */

 unpause dpg jpeg, no need to wait */

 wait for STATUS to clear */

 disable HW gating and enable Sw gating */

/**

 * vcn_v1_0_dec_ring_get_rptr - get read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware read pointer

/**

 * vcn_v1_0_dec_ring_get_wptr - get write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware write pointer

/**

 * vcn_v1_0_dec_ring_set_wptr - set write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the write pointer to the hardware

/**

 * vcn_v1_0_dec_ring_insert_start - insert a start command

 *

 * @ring: amdgpu_ring pointer

 *

 * Write a start command to the ring.

/**

 * vcn_v1_0_dec_ring_insert_end - insert a end command

 *

 * @ring: amdgpu_ring pointer

 *

 * Write a end command to the ring.

/**

 * vcn_v1_0_dec_ring_emit_fence - emit an fence & trap command

 *

 * @ring: amdgpu_ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Write a fence and a trap command to the ring.

/**

 * vcn_v1_0_dec_ring_emit_ib - execute indirect buffer

 *

 * @ring: amdgpu_ring pointer

 * @job: job to retrieve vmid from

 * @ib: indirect buffer to execute

 * @flags: unused

 *

 * Write ring commands to execute the indirect buffer

 wait for register write */

/**

 * vcn_v1_0_enc_ring_get_rptr - get enc read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware enc read pointer

 /**

 * vcn_v1_0_enc_ring_get_wptr - get enc write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware enc write pointer

 /**

 * vcn_v1_0_enc_ring_set_wptr - set enc write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the enc write pointer to the hardware

/**

 * vcn_v1_0_enc_ring_emit_fence - emit an enc fence & trap command

 *

 * @ring: amdgpu_ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Write enc a fence and a trap command to the ring.

/**

 * vcn_v1_0_enc_ring_emit_ib - enc execute indirect buffer

 *

 * @ring: amdgpu_ring pointer

 * @job: job to retrive vmid from

 * @ib: indirect buffer to execute

 * @flags: unused

 *

 * Write enc ring commands to execute the indirect buffer

 wait for reg writes */

	/* This doesn't actually powergate the VCN block.

	 * That's done in the dpm code via the SMC.  This

	 * just re-inits the block as necessary.  The actual

	 * gating still happens in the dpm code.  We should

	 * revisit this when there is a cleaner line between

	 * the smc and the hw blocks

 vcn_v1_0_check_soft_reset */,

 vcn_v1_0_pre_soft_reset */,

 vcn_v1_0_soft_reset */,

 vcn_v1_0_post_soft_reset */,

 hdp invalidate / flush */

 vcn_v1_0_dec_ring_emit_vm_flush */

 vcn_v1_0_dec_ring_emit_fence x2 vm fence */

 vcn_v1_0_dec_ring_emit_ib */

 vcn_v1_0_enc_ring_emit_vm_flush */

 vcn_v1_0_enc_ring_emit_fence x2 vm fence */

 vcn_v1_0_enc_ring_insert_end */

 vcn_v1_0_enc_ring_emit_ib */

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 Topaz */

 Tonga, CZ, ST, Fiji */

 Polaris */

 Topaz */

 Tonga */

 CZ, ST, Fiji, Polaris */

/*

 * Indirect registers accessor

 smu_8_0_d.h */

 Some of the registers might be dependent on GRBM_GFX_INDEX */

/**

 * vi_get_xclk - get the xclk

 *

 * @adev: amdgpu_device pointer

 *

 * Returns the reference clock used by the gfx engine

 * (VI).

/**

 * vi_srbm_select - select specific register instances

 *

 * @adev: amdgpu_device pointer

 * @me: selected ME (micro engine)

 * @pipe: pipe

 * @queue: queue

 * @vmid: VMID

 *

 * Switches the currently active registers instances.  Some

 * registers are instanced per VMID, others are instanced per

 * me/pipe/queue combination.

 todo */

 enable the rom */

 Disable VGA mode */

 restore regs */

 APU vbios image is part of sbios image */

 take the smc lock since we are using the smc index */

 set rom index to 0 */

 set index to data for continous read */

/**

 * vi_asic_pci_config_reset - soft reset GPU

 *

 * @adev: amdgpu_device pointer

 *

 * Use PCI Config method to reset the GPU.

 *

 * Returns 0 for success.

 disable BM */

 reset */

 wait for asic to come out of reset */

 enable BM */

/**

 * vi_asic_reset - soft reset GPU

 *

 * @adev: amdgpu_device pointer

 *

 * Look up which blocks are hung and attempt

 * to reset them.

 * Returns 0 for success.

 todo */

 not necessary on CZ */

 CZ has hang issues with full reset at the moment */

 XXX: soft reset should work on fiji and tonga */

 change this when we support soft reset */

	/* This reports 0 on APUs, so return to avoid writing/reading registers

	 * that may or may not be different from their GPU counterparts

 Set the 2 events that we wish to watch, defined above */

 Reg 40 is # received msgs, Reg 104 is # of posted requests sent */

 Write to enable desired perf counters */

	/* Zero out and enable the perf counters

	 * Write 0x5:

	 * Bit 0 = Start all counters(1)

	 * Bit 2 = Global counter reset enable(1)

	/* Load the shadow and disable the perf counters

	 * Write 0x2:

	 * Bit 0 = Stop counters(0)

	 * Bit 1 = Load the shadow counters(1)

 Read register values to get any >32bit overflow */

 Get the values and add the overflow */

 Get the number of NAKs received and generated */

 Add the total number of NAKs, i.e the number of replays */

 check if the SMC is already running */

			/*AMD_CG_SUPPORT_GFX_MGCG |

			AMD_CG_SUPPORT_GFX_RLC_LS |

			AMD_CG_SUPPORT_GFX_CP_LS |

			AMD_CG_SUPPORT_GFX_CGCG |

			AMD_CG_SUPPORT_GFX_CGLS |

			AMD_CG_SUPPORT_GFX_3D_CGCG |

			AMD_CG_SUPPORT_GFX_3D_CGLS |

			AMD_CG_SUPPORT_SDMA_MGCG |

			AMD_CG_SUPPORT_SDMA_LS |

			AMD_CG_SUPPORT_BIF_MGCG |

			AMD_CG_SUPPORT_BIF_LS |

			AMD_CG_SUPPORT_HDP_MGCG |

			AMD_CG_SUPPORT_HDP_LS |

			AMD_CG_SUPPORT_ROM_MGCG |

			AMD_CG_SUPPORT_MC_MGCG |

			AMD_CG_SUPPORT_MC_LS |

			AMD_CG_SUPPORT_DRM_LS |

			AMD_CG_SUPPORT_UVD_MGCG |

 rev0 hardware requires workarounds to support PG */

 FIXME: not supported yet */

 move the golden regs per IP block */

 enable pcie gen2/3 link */

 enable aspm */

 enable the doorbell aperture */

 enable the doorbell aperture */

 AMD_CG_SUPPORT_BIF_LS */

 AMD_CG_SUPPORT_HDP_LS */

 AMD_CG_SUPPORT_HDP_MGCG */

 AMD_CG_SUPPORT_ROM_MGCG */

 topaz has no DCE, UVD, VCE */

 FIXME: not supported yet */

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 Block CPU access */

 blackout the MC */

 wait for the MC to settle */

 unblackout the MC */

 allow CPU access */

/**

 * gmc_v8_0_init_microcode - load ucode images from disk

 *

 * @adev: amdgpu_device pointer

 *

 * Use the firmware interface to load the ucode images into

 * the driver (not loaded into hw).

 * Returns 0 on success, error on failure.

 Polaris12 32bit ASIC needs a special MC firmware */

/**

 * gmc_v8_0_tonga_mc_load_microcode - load tonga MC ucode into the hw

 *

 * @adev: amdgpu_device pointer

 *

 * Load the GDDR MC ucode into the hw (VI).

 * Returns 0 on success, error on failure.

	/* Skip MC ucode loading on SR-IOV capable boards.

	 * vbios does this for us in asic_init in that case.

	 * Skip MC ucode loading on VF, because hypervisor will do that

	 * for this adaptor.

 reset the engine and set to writable */

 load mc io regs */

 load the MC ucode */

 put the engine back into the active state */

 wait for training to complete */

	/* Skip MC ucode loading on SR-IOV capable boards.

	 * vbios does this for us in asic_init in that case.

	 * Skip MC ucode loading on VF, because hypervisor will do that

	 * for this adaptor.

 load mc io regs */

 load the MC ucode */

 put the engine back into the active state */

 wait for training to complete */

/**

 * gmc_v8_0_mc_program - program the GPU memory controller

 *

 * @adev: amdgpu_device pointer

 *

 * Set the location of vram, gart, and AGP in the GPU's

 * physical address space (VI).

 Initialize HDP */

 Lockout access through VGA aperture*/

 disable VGA render */

 Update configuration */

 XXX double check these! */

/**

 * gmc_v8_0_mc_init - initialize the memory controller driver params

 *

 * @adev: amdgpu_device pointer

 *

 * Look up the amount of vram, vram width, and decide how to place

 * vram and gart within the GPU's physical address space (VI).

 * Returns 0 for success.

 Get VRAM informations */

 size in MB on si */

 In case the PCI BAR is larger than the actual amount of vram */

 set the gart size */

 all engines support GPUVM */

 all engines support GPUVM */

 all engines support GPUVM */

 all engines support GPUVM */

 UVD, VCE do not support GPUVM */

 UVD, VCE do not support GPUVM */

 UVD, VCE do not support GPUVM, DCE SG support */

 UVD does not support GPUVM, DCE SG support */

/**

 * gmc_v8_0_flush_gpu_tlb_pasid - tlb flush via pasid

 *

 * @adev: amdgpu_device pointer

 * @pasid: pasid to be flush

 * @flush_type: type of flush

 * @all_hub: flush all hubs

 *

 * Flush the TLB for the requested pasid.

/*

 * GART

 * VMID 0 is the physical GPU addresses as used by the kernel.

 * VMIDs 1-15 are used for userspace clients and are handled

 * by the amdgpu vm/hsa code.

/**

 * gmc_v8_0_flush_gpu_tlb - gart tlb flush callback

 *

 * @adev: amdgpu_device pointer

 * @vmid: vm instance to flush

 * @vmhub: which hub to flush

 * @flush_type: type of flush

 *

 * Flush the TLB for the requested page table (VI).

 bits 0-15 are the VM contexts0-15 */

 bits 0-15 are the VM contexts0-15 */

/*

 * PTE format on VI:

 * 63:40 reserved

 * 39:12 4k physical page base address

 * 11:7 fragment

 * 6 write

 * 5 read

 * 4 exe

 * 3 reserved

 * 2 snooped

 * 1 system

 * 0 valid

 *

 * PDE format on VI:

 * 63:59 block fragment size

 * 58:40 reserved

 * 39:1 physical base address of PTE

 * bits 5:1 must be 0.

 * 0 valid

/**

 * gmc_v8_0_set_fault_enable_default - update VM fault handling

 *

 * @adev: amdgpu_device pointer

 * @value: true redirects VM faults to the default page

/**

 * gmc_v8_0_set_prt - set PRT VM fault

 *

 * @adev: amdgpu_device pointer

 * @enable: enable/disable VM fault handling for PRT

/**

 * gmc_v8_0_gart_enable - gart enable

 *

 * @adev: amdgpu_device pointer

 *

 * This sets up the TLBs, programs the page tables for VMID0,

 * sets up the hw for VMIDs 1-15 which are allocated on

 * demand, and sets up the global locations for the LDS, GDS,

 * and GPUVM for FSA64 clients (VI).

 * Returns 0 for success, errors for failure.

 Setup TLB control */

 Setup L2 cache */

 XXX: set to enable PTE/PDE in system memory */

 setup context0 */

 empty context1-15 */

	/* FIXME start with 4G, once using 2 level pt switch to full

	 * vm size space

 set vm size, must be a multiple of 4 */

 enable context1-15 */

 Initialize common gart structure */

/**

 * gmc_v8_0_gart_disable - gart disable

 *

 * @adev: amdgpu_device pointer

 *

 * This disables all VM page table (VI).

 Disable all tables */

 Setup TLB control */

 Setup L2 cache */

/**

 * gmc_v8_0_vm_decode_fault - print human readable fault info

 *

 * @adev: amdgpu_device pointer

 * @status: VM_CONTEXT1_PROTECTION_FAULT_STATUS register value

 * @addr: VM_CONTEXT1_PROTECTION_FAULT_ADDR register value

 * @mc_client: VM_CONTEXT1_PROTECTION_FAULT_MCCLIENT register value

 * @pasid: debug logging only - no functional use

 *

 * Print human readable fault information (VI).

	/* Adjust VM size here.

	 * Currently set to 4GB ((1 << 20) 4k pages).

	 * Max GPUVM size for cayman and SI is 40 bits.

	/* Set the internal MC address mask

	 * This is the max address of the GPU's

	 * internal address space.

 40 bit MC */

 Memory manager */

	/*

	 * number of VMs

	 * VMID 0 is reserved for System

	 * amdgpu graphics/compute will use VMIDs 1-7

	 * amdkfd will use VMIDs 8-15

 base offset of vram pages */

 read MC_STATUS */

 Wait a little for things to settle down */

 system context */

 VMs */

 system context */

 VMs */

 reset addr and status */

 AMD_CG_SUPPORT_MC_MGCG */

 AMD_CG_SUPPORT_MC_LS */

/*

 * Copyright 2020 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

/*

 * Copyright 2021 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 allocate 4k Page of Local Frame Buffer memory for ring */

 Write the ring destroy command*/

 there might be handshake issue with hardware which needs delay */

 Wait for response flag (bit 31) */

 Write the ring destroy command*/

 there might be handshake issue with hardware which needs delay */

 Wait for response flag (bit 31) */

 Write low address of the ring to C2PMSG_102 */

 Write high address of the ring to C2PMSG_103 */

 Write the ring initialization command to C2PMSG_101 */

 there might be handshake issue with hardware which needs delay */

 Wait for response flag (bit 31) in C2PMSG_101 */

 Wait for sOS ready for ring creation */

 Write low address of the ring to C2PMSG_69 */

 Write high address of the ring to C2PMSG_70 */

 Write size of ring to C2PMSG_71 */

 Write the ring initialization command to C2PMSG_64 */

 there might be handshake issue with hardware which needs delay */

 Wait for response flag (bit 31) in C2PMSG_64 */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * based on nouveau_prime.c

 *

 * Authors: Alex Deucher

/**

 * DOC: PRIME Buffer Sharing

 *

 * The following callback implementations are used for :ref:`sharing GEM buffer

 * objects between different devices via PRIME <prime_buffer_sharing>`.

/**

 * amdgpu_dma_buf_attach - &dma_buf_ops.attach implementation

 *

 * @dmabuf: DMA-buf where we attach to

 * @attach: attachment to add

 *

 * Add the attachment as user to the exported DMA-buf.

/**

 * amdgpu_dma_buf_detach - &dma_buf_ops.detach implementation

 *

 * @dmabuf: DMA-buf where we remove the attachment from

 * @attach: the attachment to remove

 *

 * Called when an attachment is removed from the DMA-buf.

/**

 * amdgpu_dma_buf_pin - &dma_buf_ops.pin implementation

 *

 * @attach: attachment to pin down

 *

 * Pin the BO which is backing the DMA-buf so that it can't move any more.

 pin buffer into GTT */

/**

 * amdgpu_dma_buf_unpin - &dma_buf_ops.unpin implementation

 *

 * @attach: attachment to unpin

 *

 * Unpin a previously pinned BO to make it movable again.

/**

 * amdgpu_dma_buf_map - &dma_buf_ops.map_dma_buf implementation

 * @attach: DMA-buf attachment

 * @dir: DMA direction

 *

 * Makes sure that the shared DMA buffer can be accessed by the target device.

 * For now, simply pins it to the GTT domain, where it should be accessible by

 * all DMA devices.

 *

 * Returns:

 * sg_table filled with the DMA addresses to use or ERR_PRT with negative error

 * code.

 move buffer into GTT or VRAM */

/**

 * amdgpu_dma_buf_unmap - &dma_buf_ops.unmap_dma_buf implementation

 * @attach: DMA-buf attachment

 * @sgt: sg_table to unmap

 * @dir: DMA direction

 *

 * This is called when a shared DMA buffer no longer needs to be accessible by

 * another device. For now, simply unpins the buffer from GTT.

/**

 * amdgpu_dma_buf_begin_cpu_access - &dma_buf_ops.begin_cpu_access implementation

 * @dma_buf: Shared DMA buffer

 * @direction: Direction of DMA transfer

 *

 * This is called before CPU access to the shared DMA buffer's memory. If it's

 * a read access, the buffer is moved to the GTT domain if possible, for optimal

 * CPU read performance.

 *

 * Returns:

 * 0 on success or a negative error code on failure.

 move to gtt */

/**

 * amdgpu_gem_prime_export - &drm_driver.gem_prime_export implementation

 * @gobj: GEM BO

 * @flags: Flags such as DRM_CLOEXEC and DRM_RDWR.

 *

 * The main work is done by the &drm_gem_prime_export helper.

 *

 * Returns:

 * Shared DMA buffer representing the GEM BO from the given device.

/**

 * amdgpu_dma_buf_create_obj - create BO for DMA-buf import

 *

 * @dev: DRM device

 * @dma_buf: DMA-buf

 *

 * Creates an empty SG BO for DMA-buf import.

 *

 * Returns:

 * A new GEM BO of the given DRM device, representing the memory

 * described by the given DMA-buf attachment and scatter/gather table.

/**

 * amdgpu_dma_buf_move_notify - &attach.move_notify implementation

 *

 * @attach: the DMA-buf attachment

 *

 * Invalidate the DMA-buf attachment, making sure that the we re-create the

 * mapping before the next use.

			/* When we get an error here it means that somebody

			 * else is holding the VM lock and updating page tables

			 * So we can just continue here.

			/* TODO: This is more problematic and we actually need

			 * to allow page tables updates without holding the

			 * lock.

/**

 * amdgpu_gem_prime_import - &drm_driver.gem_prime_import implementation

 * @dev: DRM device

 * @dma_buf: Shared DMA buffer

 *

 * Import a dma_buf into a the driver and potentially create a new GEM object.

 *

 * Returns:

 * GEM BO representing the shared DMA buffer for the given device.

			/*

			 * Importing dmabuf exported from out own gem increases

			 * refcount on gem itself instead of f_count of dmabuf.

/**

 * amdgpu_dmabuf_is_xgmi_accessible - Check if xgmi available for P2P transfer

 *

 * @adev: amdgpu_device pointer of the importer

 * @bo: amdgpu buffer object

 *

 * Returns:

 * True if dmabuf accessible over xgmi, false otherwise.

 No XGMI with non AMD GPUs */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * sdma_v5_2_init_microcode - load ucode images from disk

 *

 * @adev: amdgpu_device pointer

 *

 * Use the firmware interface to load the ucode images into

 * the driver (not loaded into hw).

 * Returns 0 on success, error on failure.

 emulation only, won't work on real chip

 navi10 real chip need to use PSP to load firmware

 this is the offset we need patch later */

 insert dummy here and patch it later */

/**

 * sdma_v5_2_ring_get_rptr - get the current read pointer

 *

 * @ring: amdgpu ring pointer

 *

 * Get the current rptr from the hardware (NAVI10+).

 XXX check if swapping is necessary on BE */

/**

 * sdma_v5_2_ring_get_wptr - get the current write pointer

 *

 * @ring: amdgpu ring pointer

 *

 * Get the current wptr from the hardware (NAVI10+).

 XXX check if swapping is necessary on BE */

/**

 * sdma_v5_2_ring_set_wptr - commit the write pointer

 *

 * @ring: amdgpu ring pointer

 *

 * Write the wptr back to the hardware (NAVI10+).

 XXX check if swapping is necessary on BE */

/**

 * sdma_v5_2_ring_emit_ib - Schedule an IB on the DMA engine

 *

 * @ring: amdgpu ring pointer

 * @job: job to retrieve vmid from

 * @ib: IB object to schedule

 * @flags: unused

 *

 * Schedule an IB in the DMA ring.

	/* An IB packet must end on a 8 DW boundary--the next dword

	 * must be on a 8-dword boundary. Our IB packet below is 6

	 * dwords long, thus add x number of NOPs, such that, in

	 * modular arithmetic,

	 * wptr + 6 + x = 8k, k >= 0, which in C is,

	 * (wptr + 6 + x) % 8 = 0.

	 * The expression below, is a solution of x.

 base must be 32 byte aligned */

/**

 * sdma_v5_2_ring_emit_mem_sync - flush the IB by graphics cache rinse

 *

 * @ring: amdgpu ring pointer

 * @job: job to retrieve vmid from

 * @ib: IB object to schedule

 *

 * flush the IB by graphics cache rinse.

 flush entire cache L0/L1/L2, this can be optimized by performance requirement */

/**

 * sdma_v5_2_ring_emit_hdp_flush - emit an hdp flush on the DMA ring

 *

 * @ring: amdgpu ring pointer

 *

 * Emit an hdp flush packet on the requested DMA ring.

 == */

 reference */

 mask */

 retry count, poll interval */

/**

 * sdma_v5_2_ring_emit_fence - emit a fence on the DMA ring

 *

 * @ring: amdgpu ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Add a DMA fence packet to the ring to write

 * the fence seq number and DMA trap packet to generate

 * an interrupt if needed.

 write the fence */

 Ucached(UC) */

 zero in first two bits */

 optionally write high bits as well */

 zero in first two bits */

 generate an interrupt */

/**

 * sdma_v5_2_gfx_stop - stop the gfx async dma engines

 *

 * @adev: amdgpu_device pointer

 *

 * Stop the gfx async dma ring buffers.

/**

 * sdma_v5_2_rlc_stop - stop the compute async dma engines

 *

 * @adev: amdgpu_device pointer

 *

 * Stop the compute async dma queues.

 XXX todo */

/**

 * sdma_v5_2_ctx_switch_enable - stop the async dma engines context switch

 *

 * @adev: amdgpu_device pointer

 * @enable: enable/disable the DMA MEs context switch.

 *

 * Halt or unhalt the async dma engines context switch.

/**

 * sdma_v5_2_enable - stop the async dma engines

 *

 * @adev: amdgpu_device pointer

 * @enable: enable/disable the DMA MEs.

 *

 * Halt or unhalt the async dma engines.

/**

 * sdma_v5_2_gfx_resume - setup and start the async dma engines

 *

 * @adev: amdgpu_device pointer

 *

 * Set up the gfx DMA ring buffers and enable them.

 * Returns 0 for success, error for failure.

 Set ring buffer size in dwords */

 Initialize the ring buffer's read and write pointers */

 setup the wptr shadow polling */

 set the wb address whether it's enabled or not */

 before programing wptr to a less value, need set minor_ptr_update first */

 only bare-metal use register write for wptr */

 set minor_ptr_update to 0 after wptr programed */

 set utc l1 enable flag always to 1 */

 enable MCBP */

 Set up RESP_MODE to non-copy addresses */

 program default cache read and write policy */

 clean read policy and write policy bits */

 unhalt engine */

 enable DMA RB */

 enable DMA IBs */

 bare-metal sequence doesn't need below to lines */

/**

 * sdma_v5_2_rlc_resume - setup and start the async dma engines

 *

 * @adev: amdgpu_device pointer

 *

 * Set up the compute DMA queues and enable them.

 * Returns 0 for success, error for failure.

/**

 * sdma_v5_2_load_microcode - load the sDMA ME ucode

 *

 * @adev: amdgpu_device pointer

 *

 * Loads the sDMA0/1/2/3 ucode.

 * Returns 0 for success, -EINVAL if the ucode is not available.

 halt the MEs */

/**

 * sdma_v5_2_start - setup and start the async dma engines

 *

 * @adev: amdgpu_device pointer

 *

 * Set up the DMA engines and enable them.

 * Returns 0 for success, error for failure.

 set RB registers */

 The value of mmSDMA_F32_CNTL is invalid the moment after loading fw */

	/* TODO: check whether can submit a doorbell request to raise

	 * a doorbell fence to exit gfxoff.

 unhalt the MEs */

 enable sdma ring preemption */

 start the gfx rings and rlc compute queues */

/**

 * sdma_v5_2_ring_test_ring - simple async dma engine test

 *

 * @ring: amdgpu_ring structure holding ring information

 *

 * Test the DMA engine by writing using it to write an

 * value to memory.

 * Returns 0 for success, error for failure.

/**

 * sdma_v5_2_ring_test_ib - test an IB on the DMA engine

 *

 * @ring: amdgpu_ring structure holding ring information

 * @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT

 *

 * Test a simple IB in the DMA ring.

 * Returns 0 on success, error on failure.

/**

 * sdma_v5_2_vm_copy_pte - update PTEs by copying them from the GART

 *

 * @ib: indirect buffer to fill with commands

 * @pe: addr of the page entry

 * @src: src addr to copy from

 * @count: number of page entries to update

 *

 * Update PTEs by copying them from the GART using sDMA.

 src/dst endian swap */

/**

 * sdma_v5_2_vm_write_pte - update PTEs by writing them manually

 *

 * @ib: indirect buffer to fill with commands

 * @pe: addr of the page entry

 * @value: dst addr to write into pe

 * @count: number of page entries to update

 * @incr: increase next addr by incr bytes

 *

 * Update PTEs by writing them manually using sDMA.

/**

 * sdma_v5_2_vm_set_pte_pde - update the page tables using sDMA

 *

 * @ib: indirect buffer to fill with commands

 * @pe: addr of the page entry

 * @addr: dst addr to write into pe

 * @count: number of page entries to update

 * @incr: increase next addr by incr bytes

 * @flags: access flags

 *

 * Update the page tables using sDMA.

 for physically contiguous pages (vram) */

 dst addr */

 mask */

 value */

 increment size */

 number of entries */

/**

 * sdma_v5_2_ring_pad_ib - pad the IB

 *

 * @ib: indirect buffer to fill with padding

 * @ring: amdgpu_ring structure holding ring information

 *

 * Pad the IB with NOPs to a boundary multiple of 8.

/**

 * sdma_v5_2_ring_emit_pipeline_sync - sync the pipeline

 *

 * @ring: amdgpu_ring pointer

 *

 * Make sure all previous operations are completed (CIK).

 wait for idle */

 equal */

 reference */

 mask */

 retry count, poll interval */

/**

 * sdma_v5_2_ring_emit_vm_flush - vm flush using sDMA

 *

 * @ring: amdgpu_ring pointer

 * @vmid: vmid number to use

 * @pd_addr: address

 *

 * Update the page table base and flush the VM TLB

 * using sDMA.

 equal */

 reference */

 mask */

 wait for a cycle to reset vm_inv_eng*_ack */

 SDMA trap event */

get DWORD offset

 assert preemption condition */

 emit the trailing fence */

 assert IB preemption */

 poll the trailing fence */

 deassert IB preemption */

 deassert the preemption condition */

 XXX compute */

 XXX compute */

 XXX page queue*/

 XXX compute */

 XXX compute */

 XXX page queue*/

 XXX compute */

 XXX compute */

 XXX page queue*/

 XXX compute */

 XXX compute */

 XXX page queue*/

 Enable sdma clock gating */

 Disable sdma clock gating */

 Enable sdma mem light sleep */

 Disable sdma mem light sleep */

 AMD_CG_SUPPORT_SDMA_LS */

 sdma_v5_2_ring_init_cond_exec */

 sdma_v5_2_ring_emit_hdp_flush */

 hdp_invalidate */

 sdma_v5_2_ring_emit_pipeline_sync */

 sdma_v5_2_ring_emit_vm_flush */

 sdma_v5_2_ring_emit_fence x3 for user fence, vm fence */

 sdma_v5_2_ring_emit_ib */

/**

 * sdma_v5_2_emit_copy_buffer - copy buffer using the sDMA engine

 *

 * @ib: indirect buffer to copy to

 * @src_offset: src GPU address

 * @dst_offset: dst GPU address

 * @byte_count: number of bytes to xfer

 * @tmz: if a secure copy should be used

 *

 * Copy GPU buffers using the DMA engine.

 * Used by the amdgpu ttm implementation to move pages if

 * registered as the asic copy callback.

 src/dst endian swap */

/**

 * sdma_v5_2_emit_fill_buffer - fill buffer using the sDMA engine

 *

 * @ib: indirect buffer to fill

 * @src_data: value to write to buffer

 * @dst_offset: dst GPU address

 * @byte_count: number of bytes to xfer

 *

 * Fill GPU buffers using the DMA engine.

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * jpeg_v2_0_early_init - set function pointers

 *

 * @handle: amdgpu_device pointer

 *

 * Set ring and irq function pointers

/**

 * jpeg_v2_0_sw_init - sw init for JPEG block

 *

 * @handle: amdgpu_device pointer

 *

 * Load firmware and sw initialization

 JPEG TRAP */

/**

 * jpeg_v2_0_sw_fini - sw fini for JPEG block

 *

 * @handle: amdgpu_device pointer

 *

 * JPEG suspend and free up sw allocation

/**

 * jpeg_v2_0_hw_init - start and test JPEG block

 *

 * @handle: amdgpu_device pointer

 *

/**

 * jpeg_v2_0_hw_fini - stop the hardware block

 *

 * @handle: amdgpu_device pointer

 *

 * Stop the JPEG block, mark ring as not ready any more

/**

 * jpeg_v2_0_suspend - suspend JPEG block

 *

 * @handle: amdgpu_device pointer

 *

 * HW fini and suspend JPEG block

/**

 * jpeg_v2_0_resume - resume JPEG block

 *

 * @handle: amdgpu_device pointer

 *

 * Resume firmware and hw init JPEG block

 Removing the anti hang mechanism to indicate the UVDJ tile is ON */

UVD_JPEG_POWER_STATUS__JPEG_POWER_STATUS_TILES_OFF;

/**

 * jpeg_v2_0_start - start JPEG block

 *

 * @adev: amdgpu_device pointer

 *

 * Setup and start the JPEG block

 disable power gating */

 JPEG disable CGC */

 enable JMI channel */

 enable System Interrupt for JRBC */

/**

 * jpeg_v2_0_stop - stop JPEG block

 *

 * @adev: amdgpu_device pointer

 *

 * stop the JPEG block

 reset JMI */

 enable JPEG CGC */

 enable power gating */

/**

 * jpeg_v2_0_dec_ring_get_rptr - get read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware read pointer

/**

 * jpeg_v2_0_dec_ring_get_wptr - get write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware write pointer

/**

 * jpeg_v2_0_dec_ring_set_wptr - set write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the write pointer to the hardware

/**

 * jpeg_v2_0_dec_ring_insert_start - insert a start command

 *

 * @ring: amdgpu_ring pointer

 *

 * Write a start command to the ring.

/**

 * jpeg_v2_0_dec_ring_insert_end - insert a end command

 *

 * @ring: amdgpu_ring pointer

 *

 * Write a end command to the ring.

/**

 * jpeg_v2_0_dec_ring_emit_fence - emit an fence & trap command

 *

 * @ring: amdgpu_ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Write a fence and a trap command to the ring.

/**

 * jpeg_v2_0_dec_ring_emit_ib - execute indirect buffer

 *

 * @ring: amdgpu_ring pointer

 * @job: job to retrieve vmid from

 * @ib: indirect buffer to execute

 * @flags: unused

 *

 * Write ring commands to execute the indirect buffer.

 wait for register write */

 jpeg_v2_0_dec_ring_emit_vm_flush */

 jpeg_v2_0_dec_ring_emit_fence x2 vm fence */

 jpeg_v2_0_dec_ring_emit_ib */

/*

 * Copyright 2020 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 CPC */

 DC */

 CPF */

 GDS */

 SPI */

 SQ */

 SQC */

 TA */

 TCA */

 TCC */

 TCI */

 TCP */

 TD */

 GCEA */

 RLC */

 CPC */

 CPF */

 GDS */

 SPI */

 SQ */

 SQC */

 TA */

 TCA */

 TCC */

 TCI */

 TCP */

 TD */

 EA */

 RLC */

				/* SDP read/write error/parity error in FUE_IS_FATAL mode

				 * can cause system fatal error in arcturas. Harvest the error

/*

 * Copyright 2020 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 HW has more IP blocks,  only initialize the block needed by driver */

 SPDX-License-Identifier: GPL-2.0+

/**

 * DOC: amdgpu_vkms

 *

 * The amdgpu vkms interface provides a virtual KMS interface for several use

 * cases: devices without display hardware, platforms where the actual display

 * hardware is not useful (e.g., servers), SR-IOV virtual functions, device

 * emulation/simulation, and device bring up prior to display hardware being

 * usable. We previously emulated a legacy KMS interface, but there was a desire

 * to move to the atomic KMS interface. The vkms driver did everything we

 * needed, but we wanted KMS support natively in the driver without buffer

 * sharing and the ability to support an instance of VKMS per device. We first

 * looked at splitting vkms into a stub driver and a helper module that other

 * drivers could use to implement a virtual display, but this strategy ended up

 * being messy due to driver specific callbacks needed for buffer management.

 * Ultimately, it proved easier to import the vkms code as it mostly used core

 * drm helpers anyway.

	/*

	 * To prevent races we roll the hrtimer forward before we do any

	 * interrupt processing - this is how real hw works (the interrupt is

	 * only generated after all the vblank registers are updated) and what

	 * the vblank core expects. Therefore we need to always correct the

	 * timestampe by one frame.

 for now primary plane must be visible and full screen */

 allocate crtcs, encoders, connectors */

 no DCE */

/*

 * Copyright 2007-8 Advanced Micro Devices, Inc.

 * Copyright 2008 Red Hat Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Dave Airlie

 *          Alex Deucher

 Skip TV/CV support */

 look up gpio for ddc, hpd */

 needed for aux chan transactions */

 pixel clocks */

 system clock */

 ??? */

 memory clock */

 ??? */

 disp clock */

 set a reasonable default for DP */

 not technically a clock, but... */

/*

 * Return vram width from integrated system info table, if available,

 * or 0 if not.

 get any igp specific overrides */

 get any igp specific overrides */

		/* r6xx, r7xx, evergreen, ni, si.

 for SI we use ComputeMemoryClockParam for memory plls */

 fusion */

 10 khz */

 CI */

 COMPUTE_GPUCLK_INPUT_FLAG_DEFAULT_GPUCLK, COMPUTE_GPUCLK_INPUT_FLAG_SCLK */

 10 khz */

 SI */

 10 khz */

 let the bios control the backlight */

 tell the bios not to handle mode switching */

 clear the vbios dpms state */

/* Atom needs data in little endian format so swap as appropriate when copying

 * data to or from atom. Note that atom operates on dw units.

 *

 * Use to_le=true when sending data to atom and provide at least

 * ALIGN(num_bytes,4) bytes in the dst buffer.

 *

 * Use to_le=false when receiving data from atom and provide ALIGN(num_bytes,4)

 * byes in the src buffer.

 Firmware request VRAM reservation for SR-IOV */

 Use the default scratch size */

 allocate some scratch memory */

 ATOM accessor methods */

/*

 * ATOM is an interpreted byte code stored in tables in the vbios.  The

 * driver registers callbacks to access registers and the interpreter

 * in the driver parses the tables and executes then to program specific

 * actions (set display modes, asic init, etc.).  See amdgpu_atombios.c,

 * atombios.h, and atom.c

/**

 * cail_pll_read - read PLL register

 *

 * @info: atom card_info pointer

 * @reg: PLL register offset

 *

 * Provides a PLL register accessor for the atom interpreter (r4xx+).

 * Returns the value of the PLL register.

/**

 * cail_pll_write - write PLL register

 *

 * @info: atom card_info pointer

 * @reg: PLL register offset

 * @val: value to write to the pll register

 *

 * Provides a PLL register accessor for the atom interpreter (r4xx+).

/**

 * cail_mc_read - read MC (Memory Controller) register

 *

 * @info: atom card_info pointer

 * @reg: MC register offset

 *

 * Provides an MC register accessor for the atom interpreter (r4xx+).

 * Returns the value of the MC register.

/**

 * cail_mc_write - write MC (Memory Controller) register

 *

 * @info: atom card_info pointer

 * @reg: MC register offset

 * @val: value to write to the pll register

 *

 * Provides a MC register accessor for the atom interpreter (r4xx+).

/**

 * cail_reg_write - write MMIO register

 *

 * @info: atom card_info pointer

 * @reg: MMIO register offset

 * @val: value to write to the pll register

 *

 * Provides a MMIO register accessor for the atom interpreter (r4xx+).

/**

 * cail_reg_read - read MMIO register

 *

 * @info: atom card_info pointer

 * @reg: MMIO register offset

 *

 * Provides an MMIO register accessor for the atom interpreter (r4xx+).

 * Returns the value of the MMIO register.

/**

 * amdgpu_atombios_fini - free the driver info and callbacks for atombios

 *

 * @adev: amdgpu_device pointer

 *

 * Frees the driver info and register access callbacks for the ATOM

 * interpreter (r4xx+).

 * Called at driver shutdown.

/**

 * amdgpu_atombios_init - init the driver info and callbacks for atombios

 *

 * @adev: amdgpu_device pointer

 *

 * Initializes the driver info and register access callbacks for the

 * ATOM interpreter (r4xx+).

 * Returns 0 on sucess, -ENOMEM on failure.

 * Called at driver startup.

 cached firmware_flags for further usage */

/*

 * Copyright 2014-2018 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

/* Userptr restore delay, just long enough to allow consecutive VM

 * changes to accumulate

 Impose limit on how much memory KFD can use */

/* Set memory usage limits. Current, limits are

 *  System (TTM + userptr) memory - 15/16th System RAM

 *  TTM memory - 3/8th System RAM

/* Estimate page table size needed to represent a given memory size

 *

 * With 4KB pages, we need one 8 byte PTE for each 4KB of memory

 * (factor 512, >> 9). With 2MB pages, we need one 8 byte PTE for 2MB

 * of memory (factor 256K, >> 18). ROCm user mode tries to optimize

 * for 2MB pages for TLB efficiency. However, small allocations and

 * fragmented system memory still need some 4KB pages. We choose a

 * compromise that should work in most cases without reserving too

 * much memory for page tables unnecessarily (factor 16K, >> 14).

 TTM GTT memory */

 Userptr */

 VRAM and SG */

/* amdgpu_amdkfd_remove_eviction_fence - Removes eviction fence from BO's

 *  reservation object.

 *

 * @bo: [IN] Remove eviction fence(s) from this BO

 * @ef: [IN] This eviction fence is removed if it

 *  is present in the shared list.

 *

 * NOTE: Must be called with BO reserved i.e. bo->tbo.resv->lock held.

	/* Go through all the shared fences in the resevation object and sort

	 * the interesting ones to the end of the list.

 Install the new fence list, seqcount provides the barriers */

 Drop the references to the removed fences or move them to ef_list */

 we can always get vm_bo from root PD bo.*/

/* vm_validate_pt_pd_bos - Validate page table and directory BOs

 *

 * Page directories are not updated here because huge page handling

 * during page table updates can invalidate page directory entries

 * again. Page directories are only updated after updating page

 * tables.

 Same sequence as in amdgpu_ttm_tt_pin_userptr */

	/* Import takes an extra reference on the dmabuf. Drop it now to

	 * avoid leaking it. We only need the one reference in

	 * kgd_mem->dmabuf.

/* kfd_mem_attach - Add a BO to a VM

 *

 * Everything that needs to bo done only once when a BO is first added

 * to a VM. It can later be mapped and unmapped many times without

 * repeating these steps.

 *

 * 0. Create BO for DMA mapping, if needed

 * 1. Allocate and initialize BO VA entry data structure

 * 2. Add BO to the VM

 * 3. Determine ASIC-specific PTE flags

 * 4. Alloc page tables and directories if needed

 * 4a.  Validate new page tables and directories

			/* Mappings on the local GPU and VRAM mappings in the

			 * local hive share the original BO

 Multiple mappings on the same GPU share the BO */

 Create an SG BO to DMA-map userptrs on other GPUs */

			/* GTT BOs use DMA-mapping ability of dynamic-attach

			 * DMA bufs. TODO: The same should work for VRAM on

			 * large-BAR GPUs.

			/* FIXME: Need to DMA-map other BO types:

			 * large-BAR VRAM, doorbells, MMIO remap

 Add BO to VM internal data structures */

/* Initializes user pages. It registers the MMU notifier and validates

 * the userptr BO in the GTT domain.

 *

 * The BO must already be on the userptr_valid_list. Otherwise an

 * eviction and restore may happen that leaves the new BO unmapped

 * with the user mode queues running.

 *

 * Takes the process_info->lock to protect against concurrent restore

 * workers.

 *

 * Returns 0 for success, negative errno for errors.

/* Reserving a BO and its page table BOs must happen atomically to

 * avoid deadlocks. Some operations update multiple VMs at once. Track

 * all the reservation info in a context structure. Optionally a sync

 * object can track VM updates.

 BO list entry for the KFD BO */

 Number of VMs reserved	    */

 Array of VM BO list entries  */

 Reservation ticket	    */

 BO lists			    */

 Pointer to sync object	    */

 Whether BOs are reserved	    */

 Match VMs where a BO is not mapped */

 Match VMs where a BO is mapped     */

 Match all VMs a BO was added to    */

/**

 * reserve_bo_and_vm - reserve a BO and a VM unconditionally.

 * @mem: KFD BO structure.

 * @vm: the VM to reserve.

 * @ctx: the struct that will be used in unreserve_bo_and_vms().

/**

 * reserve_bo_and_cond_vms - reserve a BO and some VMs conditionally

 * @mem: KFD BO structure.

 * @vm: the VM to reserve. If NULL, then all VMs associated with the BO

 * is used. Otherwise, a single VM associated with the BO.

 * @map_type: the mapping status that will be used to filter the VMs.

 * @ctx: the struct that will be used in unreserve_bo_and_vms().

 *

 * Returns 0 for success, negative for failure.

/**

 * unreserve_bo_and_vms - Unreserve BO and VMs from a reservation context

 * @ctx: Reservation context to unreserve

 * @wait: Optionally wait for a sync object representing pending VM updates

 * @intr: Whether the wait is interruptible

 *

 * Also frees any resources allocated in

 * reserve_bo_and_(cond_)vm(s). Returns the status from

 * amdgpu_sync_wait.

 Update the page tables  */

 Set virtual address for the allocation */

 Validate page directory and attach eviction fence */

 Update process info */

 Two fence references: one in info and one in *ef */

 Already a compute VM? */

	/* Free the original amdgpu allocated pasid,

	 * will be replaced with kfd allocated pasid.

 Convert VM into a compute VM */

 Initialize KFD part of the VM and process info */

 Release eviction fence from PD */

 Update process info */

 Release per-process resources when last compute VM is destroyed */

	/* The original pasid of amdgpu vm has already been

	 * released during making a amdgpu vm to a compute vm

	 * The current pasid is managed by kfd and will be

	 * released on kfd process destroy. Set amdgpu pasid

	 * to 0 to avoid duplicate release.

	/*

	 * Check on which domain to allocate BO

	/* Workaround for AQL queue wraparound bug. Map the same

	 * memory twice. That means we only actually allocate half

	 * the memory.

 Don't unreserve system mem limit twice */

	/* lock is not needed after this, since mem is unused and will

	 * be freed anyway

 Make sure restore workers don't access the BO any more */

 No more MMU notifiers */

	/* The eviction fence should be removed by the last unmap.

	 * TODO: Log an error condition if the bo still has the eviction fence

	 * attached

 Remove from VM internal data structures */

 Free the sync object */

	/* If the SG is not NULL, it's one we created for a doorbell or mmio

	 * remap BO. We need to free it.

	/* Update the size of the BO being freed if it was allocated from

	 * VRAM and is not imported.

 Free the BO*/

	/* If this releases the last reference, it will end up calling

	 * amdgpu_amdkfd_release_notify and kfree the mem struct. That's why

	 * this needs to be the last call here.

	/* Make sure restore is not running concurrently. Since we

	 * don't map invalid userptr BOs, we rely on the next restore

	 * worker to do the mapping

	/* Lock mmap-sem. If we find an invalid userptr BO, we can be

	 * sure that the MMU notifier is no longer running

	 * concurrently and the queues are actually stopped

	/* Userptr can be marked as "not invalid", but not actually be

	 * validated yet (still in the system domain). In that case

	 * the queues are still stopped and we can leave mapping for

	 * the next restore worker

		/* Validate BO only once. The eviction fence gets added to BO

		 * the first time it is mapped. Validate will wait for all

		 * background evictions to complete.

	/* Only apply no TLB flush on Aldebaran to

	 * workaround regressions on other Asics.

 If no VMs were reserved, it means the BO wasn't actually mapped */

	/* If BO is unmapped from all VMs, unfence it. It can be evicted if

	 * required.

	/* delete kgd_mem from kfd_bo_list to avoid re-validating

	 * this BO in BO's restoring after eviction.

 Can't handle non-graphics buffers */

 Can't handle buffers from other devices */

 Only VRAM and GTT BOs are supported */

/* Evict a userptr BO by stopping the queues if necessary

 *

 * Runs in MMU notifier, may be in RECLAIM_FS context. This means it

 * cannot do any memory allocations, and cannot take any locks that

 * are held elsewhere while allocating memory. Therefore this is as

 * simple as possible, using atomic counters.

 *

 * It doesn't do anything to the BO itself. The real work happens in

 * restore, where we get updated page addresses. This function only

 * ensures that GPU access to the BO is stopped.

 First eviction, stop the queues */

/* Update invalid userptr BOs

 *

 * Moves invalidated (evicted) userptr BOs from userptr_valid_list to

 * userptr_inval_list and updates user pages for all BOs that have

 * been invalidated since their last update.

	/* Move all invalidated BOs to the userptr_inval_list and

	 * release their user pages by migration to the CPU domain

 BO is still valid */

 All evicted userptr BOs were freed */

 Go through userptr_inval_list and update any invalid user_pages */

			/* BO hasn't been invalidated since the last

			 * revalidation attempt. Keep its BO list.

 Get updated user pages */

			/* Return -EFAULT bad address error as success. It will

			 * fail later with a VM fault if the GPU tries to access

			 * it. Better than hanging indefinitely with stalled

			 * user mode queues.

			 *

			 * Return other error -EBUSY or -ENOMEM to retry restore

			/*

			 * FIXME: Cannot ignore the return code, must hold

			 * notifier_lock

		/* Mark the BO as valid unless it was invalidated

		 * again concurrently.

/* Validate invalid userptr BOs

 *

 * Validates BOs on the userptr_inval_list, and moves them back to the

 * userptr_valid_list. Also updates GPUVM page tables with new page

 * addresses and waits for the page table updates to complete.

 Get all the page directory BOs that need to be reserved */

 Add the userptr_inval_list entries to resv_list */

 Reserve all BOs and page tables for validation */

 Validate BOs and update GPUVM page tables */

 Validate the BO if we got user pages */

		/* Update mapping. If the BO was not validated

		 * (because we couldn't get user pages), this will

		 * clear the page table entries, which will result in

		 * VM faults if the GPU tries to access the invalid

		 * memory.

 make sure this gets validated again */

 Update page directories */

/* Worker callback to restore evicted userptr BOs

 *

 * Tries to update and validate all userptr BOs. If successful and no

 * concurrent evictions happened, the queues are restarted. Otherwise,

 * reschedule for another attempt later.

 Reference task and mm in case of concurrent process termination */

	/* userptr_inval_list can be empty if all evicted userptr BOs

	 * have been freed. In that case there is nothing to validate

	 * and we can just restart the queues.

 Concurrent eviction, try again */

	/* Final check for concurrent evicton and atomic update. If

	 * another eviction happens after successful update, it will

	 * be a first eviction that calls quiesce_mm. The eviction

	 * reference counting inside KFD will handle this case.

		/* No recovery from this failure. Probably the CP is

		 * hanging. No point trying again.

 If validation failed, reschedule another attempt */

/** amdgpu_amdkfd_gpuvm_restore_process_bos - Restore all BOs for the given

 *   KFD process identified by process_info

 *

 * @process_info: amdkfd_process_info of the KFD process

 *

 * After memory eviction, restore thread calls this function. The function

 * should be called when the Process is still valid. BO restore involves -

 *

 * 1.  Release old eviction fence and create new one

 * 2.  Get two copies of PD BO list from all the VMs. Keep one copy as pd_list.

 * 3   Use the second PD list and kfd_bo_list to create a list (ctx.list) of

 *     BOs that need to be reserved.

 * 4.  Reserve all the BOs

 * 5.  Validate of PD and PT BOs.

 * 6.  Validate all KFD BOs using kfd_bo_list and Map them and add new fence

 * 7.  Add fence to all PD and PT BOs.

 * 8.  Unreserve all BOs

	/* Reserve all BOs and page tables/directory. Add all BOs from

	 * kfd_bo_list to ctx.list

 Validate PDs and PTs */

 Validate BOs and map them to GPUVM (update VM page tables). */

 Update page directories */

 Wait for validate and PT updates to finish */

	/* Release old eviction fence and create new one, because fence only

	 * goes from unsignaled to signaled, fence cannot be reused.

	 * Use context and mm from the old fence.

 Attach new eviction fence to all BOs */

 Attach eviction fence to PD / PT BOs */

 Validate gws bo the first time it is added to process */

	/* GWS resource is shared b/t amdgpu and amdkfd

	 * Add process eviction fence to bo so they can

	 * evict each other.

	/* Remove BO from process's validate list so restore worker won't touch

	 * it anymore

TODO add BO back to validate_list?

 Returns GPU-specific tiling mode information */

 Those values are not set from GFX9 onwards */

/*

 * Copyright 2016 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * vega10_ih_init_register_offset - Initialize register offset for ih rings

 *

 * @adev: amdgpu_device pointer

 *

 * Initialize register offset ih rings (VEGA10).

/**

 * vega10_ih_toggle_ring_interrupts - toggle the interrupt ring buffer

 *

 * @adev: amdgpu_device pointer

 * @ih: amdgpu_ih_ring pointet

 * @enable: true - enable the interrupts, false - disable the interrupts

 *

 * Toggle the interrupt ring buffer (VEGA10)

 enable_intr field is only valid in ring0 */

 set rptr, wptr to 0 */

/**

 * vega10_ih_toggle_interrupts - Toggle all the available interrupt ring buffers

 *

 * @adev: amdgpu_device pointer

 * @enable: enable or disable interrupt ring buffers

 *

 * Toggle all the available interrupt ring buffers (VEGA10).

	/* Ring Buffer write pointer writeback. If enabled, IH_RB_WPTR register

	 * value is written to memory

/**

 * vega10_ih_enable_ring - enable an ih ring buffer

 *

 * @adev: amdgpu_device pointer

 * @ih: amdgpu_ih_ring pointer

 *

 * Enable an ih ring buffer (VEGA10)

 Ring Buffer base. [39:8] of 40-bit address of the beginning of the ring buffer*/

 set the ih ring 0 writeback address whether it's enabled or not */

 set rptr, wptr to 0 */

/**

 * vega10_ih_irq_init - init and enable the interrupt ring

 *

 * @adev: amdgpu_device pointer

 *

 * Allocate a ring buffer for the interrupt controller,

 * enable the RLC, disable interrupts, enable the IH

 * ring buffer and enable it (VI).

 * Called at device load and reume.

 * Returns 0 for success, errors for failure.

 disable irqs */

 enable interrupts */

/**

 * vega10_ih_irq_disable - disable interrupts

 *

 * @adev: amdgpu_device pointer

 *

 * Disable interrupts on the hw (VEGA10).

 Wait and acknowledge irq */

/**

 * vega10_ih_get_wptr - get the IH ring buffer wptr

 *

 * @adev: amdgpu_device pointer

 * @ih: IH ring buffer to fetch wptr

 *

 * Get the IH ring buffer wptr from either the register

 * or the writeback memory buffer (VEGA10).  Also check for

 * ring buffer overflow and deal with it.

 * Returns the value of the wptr.

		/* Only ring0 supports writeback. On other rings fall back

		 * to register-based code with overflow checking below.

 Double check that the overflow wasn't already cleared. */

	/* When a ring buffer overflow happen start parsing interrupt

	 * from the last not overwritten vector (wptr + 32). Hopefully

	 * this should allow us to catchup.

/**

 * vega10_ih_irq_rearm - rearm IRQ if lost

 *

 * @adev: amdgpu_device pointer

 * @ih: IH ring to match

 *

 Rearm IRQ / re-wwrite doorbell if doorbell write is lost */

/**

 * vega10_ih_set_rptr - set the IH ring buffer rptr

 *

 * @adev: amdgpu_device pointer

 * @ih: IH ring buffer to set rptr

 *

 * Set the IH ring buffer rptr.

 XXX check if swapping is necessary on BE */

/**

 * vega10_ih_self_irq - dispatch work for ring 1 and 2

 *

 * @adev: amdgpu_device pointer

 * @source: irq source

 * @entry: IV with WPTR update

 *

 * Update the WPTR from the IV and schedule work to handle the entries.

 initialize ih control registers offset */

 todo */

 todo */

 todo */

		/**

		 * Vega10/12 and RAVEN don't have IH_BUFFER_MEM_CLK_SOFT_OVERRIDE field.

/*

 * Copyright 2017 Valve Corporation

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Andres Rodriguez <andresx7@gmail.com>

	/* First check the op, then the op's argument.

		/* Impossible.

/*

 * Copyright 2020 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 *

/**

 * DOC: AMDGPU RAP debugfs test interface

 *

 * how to use?

 * echo opcode > <debugfs_dir>/dri/xxx/rap_test

 *

 * opcode:

 * currently, only 2 is supported by Linux host driver,

 * opcode 2 stands for TA_CMD_RAP__VALIDATE_L0, used to

 * trigger L0 policy validation, you can refer more detail

 * from header file ta_rap_if.h

 *

	/* make sure gfx core is on, RAP TA cann't handle

	 * GFX OFF case currently.

/*

 * Copyright 2018 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 Defined in global_features.h as FTI_PERFMON_VISIBLE */

 get flags from df perfmon config */

/*

 * df_v3_6_perfmon_rreg - read perfmon lo and hi

 *

 * required to be atomic.  no mmio method provided so subsequent reads for lo

 * and hi require to preserve df finite state machine

/*

 * df_v3_6_perfmon_wreg - write to perfmon lo and hi

 *

 * required to be atomic.  no mmio method provided so subsequent reads after

 * data writes cannot occur to preserve data fabrics finite state machine.

 same as perfmon_wreg but return status on write value check */

/*

 * retry arming counters every 100 usecs within 1 millisecond interval.

 * if retry fails after time out, return error.

 get the number of df counters available */

 device attr for available perfmon counters */

 encoding for hash-enabled on Arcturus and Aldebaran */

 init perfmons */

 Put DF on broadcast mode */

 Exit broadcast mode */

 AMD_CG_SUPPORT_DF_MGCG */

 get assigned df perfmon ctr as int */

 get address based on counter assignment */

 get read counter address */

 get control counter settings i.e. address and values to set */

 add df performance counters for read */

 release performance counter */

 return available counter if is_add == 1 otherwise return error status. */

 rearm the counter or throw away count value on failure */

/*

 * Copyright 2021 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 UMC 6_1_1 registers */

 select the lower chip and check the error count */

 select the higher chip and check the err counter */

	/* check for SRAM correctable error

 check the MCUMC_STATUS */

 select the lower chip */

 clear lower chip error count */

 select the higher chip */

 clear higher chip error count */

	/*TODO: driver needs to toggle DF Cstate to ensure

 clear umc status */

 calculate error address if ue/ce error is detected */

 translate umc channel address to soc pa, 3 parts are included */

 we only save ue error information currently, ce is skipped */

 page frame address is saved */

 clear umc status */

	/*TODO: driver needs to toggle DF Cstate to ensure

	 * safe access of UMC resgisters. Will add the protection

		/* Enabling fatal error in one channel will be considered

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Christian KÃ¶nig <christian.koenig@amd.com>

/**

 * uvd_v5_0_ring_get_rptr - get read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware read pointer

/**

 * uvd_v5_0_ring_get_wptr - get write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware write pointer

/**

 * uvd_v5_0_ring_set_wptr - set write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the write pointer to the hardware

 UVD TRAP */

/**

 * uvd_v5_0_hw_init - start and test UVD block

 *

 * @handle: handle used to pass amdgpu_device pointer

 *

 * Initialize the hardware, boot up the VCPU and do some testing

 Clear timeout status bits */

/**

 * uvd_v5_0_hw_fini - stop the hardware block

 *

 * @handle: handle used to pass amdgpu_device pointer

 *

 * Stop the UVD block, mark ring as not ready any more

	/*

	 * Proper cleanups before halting the HW engine:

	 *   - cancel the delayed idle work

	 *   - enable powergating

	 *   - enable clockgating

	 *   - disable dpm

	 *

	 * TODO: to align with the VCN implementation, move the

	 * jobs for clockgating/powergating/dpm setting to

	 * ->set_powergating_state().

 shutdown the UVD block */

/**

 * uvd_v5_0_mc_resume - memory controller programming

 *

 * @adev: amdgpu_device pointer

 *

 * Let the UVD memory controller know it's offsets

 program memory controller bits 0-27 */

/**

 * uvd_v5_0_start - start UVD block

 *

 * @adev: amdgpu_device pointer

 *

 * Setup and start the UVD block

disable DPG */

 disable byte swapping */

 disable interupt */

 stall UMC and register bus before resetting VCPU */

 put LMI, VCPU, RBC etc... into reset */

 take UVD block out of reset */

 initialize UVD memory controller */

 swap (8 in 32) RB and IB */

 take all subblocks out of reset, except VCPU */

 enable VCPU clock */

 enable UMC */

 boot up the VCPU */

 enable master interrupt */

 clear the bit 4 of UVD_STATUS */

 force RBC into idle state */

 set the write pointer delay */

 set the wb address */

 program the RB_BASE for ring buffer */

 Initialize the ring buffer's read and write pointers */

/**

 * uvd_v5_0_stop - stop UVD block

 *

 * @adev: amdgpu_device pointer

 *

 * stop the UVD block

 force RBC into idle state */

 Stall UMC and register bus before resetting VCPU */

 put VCPU into reset */

 disable VCPU clock */

 Unstall UMC and register bus */

/**

 * uvd_v5_0_ring_emit_fence - emit an fence & trap command

 *

 * @ring: amdgpu_ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Write a fence and a trap command to the ring.

/**

 * uvd_v5_0_ring_test_ring - register write test

 *

 * @ring: amdgpu_ring pointer

 *

 * Test if we can successfully write to the context register

/**

 * uvd_v5_0_ring_emit_ib - execute indirect buffer

 *

 * @ring: amdgpu_ring pointer

 * @job: job to retrieve vmid from

 * @ib: indirect buffer to execute

 * @flags: unused

 *

 * Write ring commands to execute the indirect buffer

 TODO

 only in pg enabled, we can gate clock to vcpu*/

 wait for STATUS to clear */

 enable HW gates because UVD is idle */

		uvd_v5_0_set_hw_clock_gating(adev); */

	/* This doesn't actually powergate the UVD block.

	 * That's done in the dpm code via the SMC.  This

	 * just re-inits the block as necessary.  The actual

	 * gating still happens in the dpm code.  We should

	 * revisit this when there is a cleaner line between

	 * the smc and the hw blocks

 AMD_CG_SUPPORT_UVD_MGCG */

 uvd_v5_0_ring_emit_fence  x1 no user fence */

 uvd_v5_0_ring_emit_ib */

/*

 * Copyright 2008 Advanced Micro Devices, Inc.

 * Copyright 2008 Red Hat Inc.

 * Copyright 2009 Christian KÃ¶nig.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Christian KÃ¶nig

	     32kHz	  44.1kHz	48kHz    */

 Clock      N     CTS      N     CTS      N     CTS */

  25,20/1.001 MHz */

  25.20       MHz */

  27.00       MHz */

  27.00*1.001 MHz */

  54.00       MHz */

  54.00*1.001 MHz */

  74.25/1.001 MHz */

  74.25       MHz */

 148.50/1.001 MHz */

 148.50       MHz */

/*

 * calculate CTS and N values if they are not found in the table

 Safe, but overly large values */

 Smallest valid fraction */

	/*

	 * The optimal N is 128*freq/1000. Calculate the closest larger

	 * value that doesn't truncate any bits.

 Check that we are in spec (not always possible) */

 Precalculated values for common clocks */

 And odd clocks get manually calculated */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 AMD_CG_SUPPORT_ATHUB_MGCG */

 AMD_CG_SUPPORT_ATHUB_LS */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * jpeg_v3_0_early_init - set function pointers

 *

 * @handle: amdgpu_device pointer

 *

 * Set ring and irq function pointers

/**

 * jpeg_v3_0_sw_init - sw init for JPEG block

 *

 * @handle: amdgpu_device pointer

 *

 * Load firmware and sw initialization

 JPEG TRAP */

/**

 * jpeg_v3_0_sw_fini - sw fini for JPEG block

 *

 * @handle: amdgpu_device pointer

 *

 * JPEG suspend and free up sw allocation

/**

 * jpeg_v3_0_hw_init - start and test JPEG block

 *

 * @handle: amdgpu_device pointer

 *

/**

 * jpeg_v3_0_hw_fini - stop the hardware block

 *

 * @handle: amdgpu_device pointer

 *

 * Stop the JPEG block, mark ring as not ready any more

/**

 * jpeg_v3_0_suspend - suspend JPEG block

 *

 * @handle: amdgpu_device pointer

 *

 * HW fini and suspend JPEG block

/**

 * jpeg_v3_0_resume - resume JPEG block

 *

 * @handle: amdgpu_device pointer

 *

 * Resume firmware and hw init JPEG block

 disable anti hang mechanism */

 keep the JPEG in static PG mode */

 enable anti hang mechanism */

/**

 * jpeg_v3_0_start - start JPEG block

 *

 * @adev: amdgpu_device pointer

 *

 * Setup and start the JPEG block

 disable power gating */

 JPEG disable CGC */

 MJPEG global tiling registers */

 enable JMI channel */

 enable System Interrupt for JRBC */

/**

 * jpeg_v3_0_stop - stop JPEG block

 *

 * @adev: amdgpu_device pointer

 *

 * stop the JPEG block

 reset JMI */

 enable power gating */

/**

 * jpeg_v3_0_dec_ring_get_rptr - get read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware read pointer

/**

 * jpeg_v3_0_dec_ring_get_wptr - get write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware write pointer

/**

 * jpeg_v3_0_dec_ring_set_wptr - set write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the write pointer to the hardware

 jpeg_v3_0_dec_ring_emit_vm_flush */

 jpeg_v3_0_dec_ring_emit_fence x2 vm fence */

 jpeg_v3_0_dec_ring_emit_ib */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

	/* Only server cards have the FRU EEPROM

	 * TODO: See if we can figure this out dynamically instead of

	 * having to parse VBIOS versions.

	/* VBIOS is of the format ###-DXXXYY-##. For SKU identification,

	 * we can use just the "DXXX" portion. If there were more models, we

	 * could convert the 3 characters to a hex integer and use a switch

	 * for ease/speed/readability. For now, 2 string comparisons are

	 * reasonable and not too expensive

 D161 and D163 are the VG20 server SKUs */

	/* The size returned by the i2c requires subtraction of 0xC0 since the

	 * size apparently always reports as 0xC0+actual size.

 If algo exists, it means that the i2c_adapter's initialized */

	/* There's a lot of repetition here. This is due to the FRU having

	 * variable-length fields. To get the information, we have to find the

	 * size of each field, and then keep reading along and reading along

	 * until we get all of the data that we want. We use addrptr to track

	 * the address as we go

	/* The first fields are all of size 1-byte, from 0-7 are offsets that

	 * contain information that isn't useful to us.

	 * Bytes 8-a are all 1-byte and refer to the size of the entire struct,

	 * and the language field, so just start from 0xb, manufacturer size

	/* Increment the addrptr by the size of the field, and 1 due to the

	 * size field being 1 byte. This pattern continues below.

	/* Product name should only be 32 characters. Any more,

	 * and something could be wrong. Cap it at 32 to be safe

 Start at 2 due to buff using fields 0 and 1 for the address */

	/* Product number should only be 16 characters. Any more,

	 * and something could be wrong. Cap it at 16 to be safe

	/* Serial number should only be 16 characters. Any more,

	 * and something could be wrong. Cap it at 16 to be safe

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 * Copyright 2008 Red Hat Inc.

 * Copyright 2009 Jerome Glisse.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * amdgpu_gfx_rlc_enter_safe_mode - Set RLC into safe mode

 *

 * @adev: amdgpu_device pointer

 *

 * Set RLC enter into safe mode if RLC is enabled and haven't in safe mode.

 if RLC is not enabled, do nothing */

/**

 * amdgpu_gfx_rlc_exit_safe_mode - Set RLC out of safe mode

 *

 * @adev: amdgpu_device pointer

 *

 * Set RLC exit safe mode if RLC is enabled and have entered into safe mode.

 if RLC is not enabled, do nothing */

/**

 * amdgpu_gfx_rlc_init_sr - Init save restore block

 *

 * @adev: amdgpu_device pointer

 * @dws: the size of save restore block

 *

 * Allocate and setup value to save restore block of rlc.

 * Returns 0 on succeess or negative error code if allocate failed.

 allocate save restore block */

 write the sr buffer */

/**

 * amdgpu_gfx_rlc_init_csb - Init clear state block

 *

 * @adev: amdgpu_device pointer

 *

 * Allocate and setup value to clear state block of rlc.

 * Returns 0 on succeess or negative error code if allocate failed.

 allocate clear state block */

/**

 * amdgpu_gfx_rlc_init_cpt - Init cp table

 *

 * @adev: amdgpu_device pointer

 *

 * Allocate and setup value to cp table of rlc.

 * Returns 0 on succeess or negative error code if allocate failed.

 set up the cp table */

/**

 * amdgpu_gfx_rlc_setup_cp_table - setup cp the buffer of cp table

 *

 * @adev: amdgpu_device pointer

 *

 * Write cp firmware data into cp table.

 write the cp table buffer */

/**

 * amdgpu_gfx_rlc_fini - Free BO which used for RLC

 *

 * @adev: amdgpu_device pointer

 *

 * Free three BO which is used for rlc_save_restore_block, rlc_clear_state_block

 * and rlc_jump_table_block.

 save restore block */

 clear state block */

 jump table block */

/*

 * Copyright 2015 Advanced Micro Devices, Inc.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

/*

 * Authors:

 *    Christian KÃ¶nig <deathsimple@vodafone.de>

	/* This is based on the bucket sort with O(n) time complexity.

	 * An item with priority "i" is added to bucket[i]. The lists are then

	 * concatenated in descending order.

	/* Since buffers which appear sooner in the relocation list are

	 * likely to be used more often than buffers which appear later

	 * in the list, the sort mustn't change the ordering of buffers

	 * with the same priority, i.e. it must be stable.

 Connect the sorted buckets in the output list. */

 copy the handle array from userspace to a kernel buffer */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright 2009 VMware, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Michel DÃ¤nzer

 Test BO GTT->VRAM and VRAM->GTT GPU copies across the whole GTT aperture */

	/* Number of tests =

	 * (Total GTT - gart_pin_size - (2 transfer windows for buffer moves)) / test size

/*

 * Copyright 2008 Advanced Micro Devices, Inc.

 * Copyright 2008 Red Hat Inc.

 * Copyright 2009 Jerome Glisse.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Dave Airlie

 *          Alex Deucher

 *          Jerome Glisse

/*

 * GART

 * The GART (Graphics Aperture Remapping Table) is an aperture

 * in the GPU's address space.  System pages can be mapped into

 * the aperture and look like contiguous pages from the GPU's

 * perspective.  A page table maps the pages in the aperture

 * to the actual backing pages in system memory.

 *

 * Radeon GPUs support both an internal GART, as described above,

 * and AGP.  AGP works similarly, but the GART table is configured

 * and maintained by the northbridge rather than the driver.

 * Radeon hw has a separate AGP aperture that is programmed to

 * point to the AGP aperture provided by the northbridge and the

 * requests are passed through to the northbridge aperture.

 * Both AGP and internal GART can be used at the same time, however

 * that is not currently supported by the driver.

 *

 * This file handles the common internal GART management.

/*

 * Common GART table functions.

/**

 * amdgpu_gart_dummy_page_init - init dummy page used by the driver

 *

 * @adev: amdgpu_device pointer

 *

 * Allocate the dummy page used by the driver (all asics).

 * This dummy page is used by the driver as a filler for gart entries

 * when pages are taken out of the GART

 * Returns 0 on sucess, -ENOMEM on failure.

/**

 * amdgpu_gart_dummy_page_fini - free dummy page used by the driver

 *

 * @adev: amdgpu_device pointer

 *

 * Frees the dummy page used by the driver (all asics).

/**

 * amdgpu_gart_table_vram_alloc - allocate vram for gart page table

 *

 * @adev: amdgpu_device pointer

 *

 * Allocate video memory for GART page table

 * (pcie r4xx, r5xx+).  These asics require the

 * gart table to be in video memory.

 * Returns 0 for success, error for failure.

/**

 * amdgpu_gart_table_vram_pin - pin gart page table in vram

 *

 * @adev: amdgpu_device pointer

 *

 * Pin the GART page table in vram so it will not be moved

 * by the memory manager (pcie r4xx, r5xx+).  These asics require the

 * gart table to be in video memory.

 * Returns 0 for success, error for failure.

/**

 * amdgpu_gart_table_vram_unpin - unpin gart page table in vram

 *

 * @adev: amdgpu_device pointer

 *

 * Unpin the GART page table in vram (pcie r4xx, r5xx+).

 * These asics require the gart table to be in video memory.

/**

 * amdgpu_gart_table_vram_free - free gart page table vram

 *

 * @adev: amdgpu_device pointer

 *

 * Free the video memory used for the GART page table

 * (pcie r4xx, r5xx+).  These asics require the gart table to

 * be in video memory.

/*

 * Common gart functions.

/**

 * amdgpu_gart_unbind - unbind pages from the gart page table

 *

 * @adev: amdgpu_device pointer

 * @offset: offset into the GPU's gart aperture

 * @pages: number of pages to unbind

 *

 * Unbinds the requested pages from the gart page table and

 * replaces them with the dummy page (all asics).

 * Returns 0 for success, -EINVAL for failure.

 Starting from VEGA10, system bit must be 0 to mean invalid. */

/**

 * amdgpu_gart_map - map dma_addresses into GART entries

 *

 * @adev: amdgpu_device pointer

 * @offset: offset into the GPU's gart aperture

 * @pages: number of pages to bind

 * @dma_addr: DMA addresses of pages

 * @flags: page table entry flags

 * @dst: CPU address of the gart table

 *

 * Map the dma_addresses into GART entries (all asics).

 * Returns 0 for success, -EINVAL for failure.

/**

 * amdgpu_gart_bind - bind pages into the gart page table

 *

 * @adev: amdgpu_device pointer

 * @offset: offset into the GPU's gart aperture

 * @pages: number of pages to bind

 * @dma_addr: DMA addresses of pages

 * @flags: page table entry flags

 *

 * Binds the requested pages to the gart page table

 * (all asics).

 * Returns 0 for success, -EINVAL for failure.

/**

 * amdgpu_gart_invalidate_tlb - invalidate gart TLB

 *

 * @adev: amdgpu device driver pointer

 *

 * Invalidate gart TLB which can be use as a way to flush gart changes

 *

/**

 * amdgpu_gart_init - init the driver info for managing the gart

 *

 * @adev: amdgpu_device pointer

 *

 * Allocate the dummy page and init the gart driver info (all asics).

 * Returns 0 for success, error for failure.

 We need PAGE_SIZE >= AMDGPU_GPU_PAGE_SIZE */

 Compute table size */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

	/* If use GART for FB translation, vmid0 page table covers both

	 * vram and system memory (gart)

 Program the AGP BAR */

 Program the system aperture low logical page number. */

	/* In the case squeezing vram into GART aperture, we don't use

	 * FB aperture and AGP aperture. Disable them.

 Set default page address. */

 Program "protection fault". */

 Setup TLB control */

 XXX for emulation. */

 Setup L2 cache */

 XXX for emulation, Refer to closed source code.*/

		/* On Aldebaran, XNACK can be enabled in the SQ per-process.

		 * Retry faults need to be enabled for that to work.

 GART Enable. */

 Disable all tables */

 Setup TLB control */

 Setup L2 cache */

/**

 * mmhub_v1_7_set_fault_enable_default - update GART/VM fault handling

 *

 * @adev: amdgpu_device pointer

 * @value: true redirects VM faults to the default page

 Change state only if MCCG support is enabled through driver */

 Change state only if LS support is enabled through driver */

 AMD_CG_SUPPORT_MC_MGCG */

 AMD_CG_SUPPORT_MC_LS */

 MMHUB Range 0 */

 MMHUB Range 1 */

 MMHAB Range 2*/

 MMHUB Rang 3 */

 MMHUB Range 4 */

 MMHUAB Range 5 */

 write 0 to reset the edc counters */

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 missing from the gfx_7 IP headers */

/*

 * Core functions

/**

 * gfx_v7_0_init_microcode - load ucode images from disk

 *

 * @adev: amdgpu_device pointer

 *

 * Use the firmware interface to load the ucode images into

 * the driver (not loaded into hw).

 * Returns 0 on success, error on failure.

/**

 * gfx_v7_0_tiling_mode_table_init - init the hw tiling table

 *

 * @adev: amdgpu_device pointer

 *

 * Starting with SI, the tiling setup is done globally in a

 * set of 32 tiling modes.  Rather than selecting each set of

 * parameters per surface as on older asics, we just select

 * which index in the tiling table we want to use, and the

 * surface uses those parameters (CIK).

/**

 * gfx_v7_0_select_se_sh - select which SE, SH to address

 *

 * @adev: amdgpu_device pointer

 * @se_num: shader engine to address

 * @sh_num: sh block to address

 * @instance: Certain registers are instanced per SE or SH.

 *            0xffffffff means broadcast to all SEs or SHs (CIK).

 *

 * Select which SE, SH combinations to address.

/**

 * gfx_v7_0_get_rb_active_bitmap - computes the mask of enabled RBs

 *

 * @adev: amdgpu_device pointer

 *

 * Calculates the bitmask of enabled RBs (CIK).

 * Returns the enabled RB bitmask.

 GRBM_GFX_INDEX has a different offset on CI+ */

 GRBM_GFX_INDEX has a different offset on CI+ */

/**

 * gfx_v7_0_setup_rb - setup the RBs on the asic

 *

 * @adev: amdgpu_device pointer

 *

 * Configures per-SE/SH RB registers (CIK).

 cache the values for userspace */

/**

 * gfx_v7_0_init_compute_vmid - gart enable

 *

 * @adev: amdgpu_device pointer

 *

 * Initialize compute vmid sh_mem registers

 *

	/*

	 * Configure apertures:

	 * LDS:         0x60000000'00000000 - 0x60000001'00000000 (4GB)

	 * Scratch:     0x60000001'00000000 - 0x60000002'00000000 (4GB)

	 * GPUVM:       0x60010000'00000000 - 0x60020000'00000000 (1TB)

 CP and shaders */

	/* Initialize all compute VMIDs to have no GDS, GWS, or OA

	/*

	 * Initialize all compute and user-gfx VMIDs to have no GDS, GWS, or OA

	 * access. Compute VMIDs should be enabled by FW for target VMIDs,

	 * the driver can enable them for graphics. VMID0 should maintain

	 * access so that HWS firmware can save/restore entries.

/**

 * gfx_v7_0_constants_init - setup the 3D engine

 *

 * @adev: amdgpu_device pointer

 *

 * init the gfx constants such as the 3D engine, tiling configuration

 * registers, maximum number of quad pipes, render backends...

 set HW defaults for 3D engine */

	/*

	 * making sure that the following register writes will be broadcasted

	 * to all the shaders

 XXX SH_MEM regs */

 where to put LDS, scratch, GPUVM in FSA64 space */

 CP and shaders */

/*

 * GPU scratch registers helpers function.

/**

 * gfx_v7_0_scratch_init - setup driver info for CP scratch regs

 *

 * @adev: amdgpu_device pointer

 *

 * Set up the number and offset of the CP scratch registers.

 * NOTE: use of CP scratch registers is a legacy interface and

 * is not used by default on newer asics (r6xx+).  On newer asics,

 * memory buffers are used for fences rather than scratch regs.

/**

 * gfx_v7_0_ring_test_ring - basic gfx ring test

 *

 * @ring: amdgpu_ring structure holding ring information

 *

 * Allocate a scratch register and write to it using the gfx ring (CIK).

 * Provides a basic gfx ring test to verify that the ring is working.

 * Used by gfx_v7_0_cp_gfx_resume();

 * Returns 0 on success, error on failure.

/**

 * gfx_v7_0_ring_emit_hdp_flush - emit an hdp flush on the cp

 *

 * @ring: amdgpu_ring structure holding ring information

 *

 * Emits an hdp flush on the cp.

 write, wait, write */

 == */

 pfp or me */

 poll interval */

/**

 * gfx_v7_0_ring_emit_fence_gfx - emit a fence on the gfx ring

 *

 * @ring: amdgpu_ring structure holding ring information

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Emits a fence sequence number on the gfx ring and flushes

 * GPU caches.

	/* Workaround for cache flush problems. First send a dummy EOP

	 * event down the pipe with seq one below.

 Then send the real EOP event down the pipe. */

/**

 * gfx_v7_0_ring_emit_fence_compute - emit a fence on the compute ring

 *

 * @ring: amdgpu_ring structure holding ring information

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Emits a fence sequence number on the compute ring and flushes

 * GPU caches.

 RELEASE_MEM - flush caches, send int */

/*

 * IB stuff

/**

 * gfx_v7_0_ring_emit_ib_gfx - emit an IB (Indirect Buffer) on the ring

 *

 * @ring: amdgpu_ring structure holding ring information

 * @job: job to retrieve vmid from

 * @ib: amdgpu indirect buffer object

 * @flags: options (AMDGPU_HAVE_CTX_SWITCH)

 *

 * Emits an DE (drawing engine) or CE (constant engine) IB

 * on the gfx ring.  IBs are usually generated by userspace

 * acceleration drivers and submitted to the kernel for

 * scheduling on the ring.  This function schedules the IB

 * on the gfx ring for execution by the GPU.

 insert SWITCH_BUFFER packet before first IB in the ring frame */

	/* Currently, there is a high possibility to get wave ID mismatch

	 * between ME and GDS, leading to a hw deadlock, because ME generates

	 * different wave IDs than the GDS expects. This situation happens

	 * randomly when at least 5 compute pipes use GDS ordered append.

	 * The wave IDs generated by ME are also wrong after suspend/resume.

	 * Those are probably bugs somewhere else in the kernel driver.

	 *

	 * Writing GDS_COMPUTE_MAX_WAVE_ID resets wave ID counters in ME and

	 * GDS to 0 for this ring (me/pipe).

 set load_enable otherwise this package is just NOPs */

 set load_global_config & load_global_uconfig */

 set load_cs_sh_regs */

 set load_per_context_state & load_gfx_sh_regs */

/**

 * gfx_v7_0_ring_test_ib - basic ring IB test

 *

 * @ring: amdgpu_ring structure holding ring information

 * @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT

 *

 * Allocate an IB and execute it on the gfx ring (CIK).

 * Provides a basic gfx ring test to verify that IBs are working.

 * Returns 0 on success, error on failure.

/*

 * CP.

 * On CIK, gfx and compute now have independent command processors.

 *

 * GFX

 * Gfx consists of a single ring and can process both gfx jobs and

 * compute jobs.  The gfx CP consists of three microengines (ME):

 * PFP - Pre-Fetch Parser

 * ME - Micro Engine

 * CE - Constant Engine

 * The PFP and ME make up what is considered the Drawing Engine (DE).

 * The CE is an asynchronous engine used for updating buffer desciptors

 * used by the DE so that they can be loaded into cache in parallel

 * while the DE is processing state update packets.

 *

 * Compute

 * The compute CP consists of two microengines (ME):

 * MEC1 - Compute MicroEngine 1

 * MEC2 - Compute MicroEngine 2

 * Each MEC supports 4 compute pipes and each pipe supports 8 queues.

 * The queues are exposed to userspace and are programmed directly

 * by the compute runtime.

/**

 * gfx_v7_0_cp_gfx_enable - enable/disable the gfx CP MEs

 *

 * @adev: amdgpu_device pointer

 * @enable: enable or disable the MEs

 *

 * Halts or unhalts the gfx MEs.

/**

 * gfx_v7_0_cp_gfx_load_microcode - load the gfx CP ME ucode

 *

 * @adev: amdgpu_device pointer

 *

 * Loads the gfx PFP, ME, and CE ucode.

 * Returns 0 for success, -EINVAL if the ucode is not available.

 PFP */

 CE */

 ME */

/**

 * gfx_v7_0_cp_gfx_start - start the gfx ring

 *

 * @adev: amdgpu_device pointer

 *

 * Enables the ring and loads the clear state context and other

 * packets required to init the ring.

 * Returns 0 for success, error for failure.

 init the CP */

 init the CE partitions.  CE only used for gfx on CIK */

 clear state buffer */

 VGT_VERTEX_REUSE_BLOCK_CNTL */

 VGT_OUT_DEALLOC_CNTL */

/**

 * gfx_v7_0_cp_gfx_resume - setup the gfx ring buffer registers

 *

 * @adev: amdgpu_device pointer

 *

 * Program the location and size of the gfx ring buffer

 * and test it to make sure it's working.

 * Returns 0 for success, error for failure.

 Set the write pointer delay */

 set the RB to use vmid 0 */

 ring 0 - compute and gfx */

 Set ring buffer size */

 Initialize the ring buffer's read and write pointers */

 set the wb address whether it's enabled or not */

 scratch register shadowing is no longer supported */

 start the ring */

 XXX check if swapping is necessary on BE */

 XXX check if swapping is necessary on BE */

/**

 * gfx_v7_0_cp_compute_enable - enable/disable the compute CP MEs

 *

 * @adev: amdgpu_device pointer

 * @enable: enable or disable the MEs

 *

 * Halts or unhalts the compute MEs.

/**

 * gfx_v7_0_cp_compute_load_microcode - load the compute CP ME ucode

 *

 * @adev: amdgpu_device pointer

 *

 * Loads the compute MEC1&2 ucode.

 * Returns 0 for success, -EINVAL if the ucode is not available.

 MEC1 */

 MEC2 */

/**

 * gfx_v7_0_cp_compute_fini - stop the compute queues

 *

 * @adev: amdgpu_device pointer

 *

 * Stop the compute queues and tear down the driver queue

 * info.

 take ownership of the relevant compute queues */

 allocate space for ALL pipes (even the ones we don't own) */

 clear memory.  Not sure if this is required or not */

 write the EOP addr */

 set the VMID assigned */

 set the EOP size, register value is 2^(EOP_SIZE+1) dwords */

 disable the queue if it's active */

 init the mqd struct */

 enable doorbell? */

 set the pointer to the MQD */

 set MQD vmid to 0 */

 set the pointer to the HQD, this is similar CP_RB0_BASE/_HI */

 set up the HQD, this is similar to CP_RB0_CNTL */

 assuming kernel queue control */

 only used if CP_PQ_WPTR_POLL_CNTL.CP_PQ_WPTR_POLL_CNTL__EN_MASK=1 */

 set the wb address whether it's enabled or not */

 enable the doorbell if requested */

 read and write pointers, similar to CP_RB0_WPTR/_RPTR */

 set the vmid for the queue */

 defaults */

 activate the queue */

 HQD registers extend from mmCP_MQD_BASE_ADDR to mmCP_MQD_CONTROL */

 disable wptr polling */

 program all HQD registers */

 activate the HQD */

/**

 * gfx_v7_0_cp_compute_resume - setup the compute queue registers

 *

 * @adev: amdgpu_device pointer

 *

 * Program the compute queues and test them to make sure they

 * are working.

 * Returns 0 for success, error for failure.

 fix up chicken bits */

 init all pipes (even the ones we don't own) */

 init the queues */

/**

 * gfx_v7_0_ring_emit_pipeline_sync - cik vm flush using the CP

 *

 * @ring: the ring to emit the commands to

 *

 * Sync the command pipeline with the PFP. E.g. wait for everything

 * to be completed.

 memory */

 equal */

 pfp or me */

 poll interval */

 sync CE with ME to prevent CE fetch CEIB before context switch done */

/*

 * vm

 * VMID 0 is the physical GPU addresses as used by the kernel.

 * VMIDs 1-15 are used for userspace clients and are handled

 * by the amdgpu vm/hsa code.

/**

 * gfx_v7_0_ring_emit_vm_flush - cik vm flush using the CP

 *

 * @ring: amdgpu_ring pointer

 * @vmid: vmid number to use

 * @pd_addr: address

 *

 * Update the page table base and flush the VM TLB

 * using the CP (CIK).

 wait for the invalidate to complete */

 wait */

 always */

 me */

 ref */

 mask */

 poll interval */

 compute doesn't have PFP */

 sync PFP to ME, otherwise we might get invalid PFP reads */

 synce CE with ME to prevent CE fetch CEIB before context switch done */

/*

 * RLC

 * The RLC is a multi-purpose microengine that handles a

 * variety of functions.

 allocate rlc buffers */

 CP JT */

 GDS */

 init save restore block */

 init clear state block */

 init spm vmid with 0xf */

/**

 * gfx_v7_0_rlc_stop - stop the RLC ME

 *

 * @adev: amdgpu_device pointer

 *

 * Halt the RLC ME (MicroEngine) (CIK).

/**

 * gfx_v7_0_rlc_start - start the RLC ME

 *

 * @adev: amdgpu_device pointer

 *

 * Unhalt the RLC ME (MicroEngine) (CIK).

/**

 * gfx_v7_0_rlc_resume - setup the RLC hw

 *

 * @adev: amdgpu_device pointer

 *

 * Initialize the RLC registers, load the ucode,

 * and start the RLC (CIK).

 * Returns 0 for success, -EINVAL if the ucode is not available.

 disable CG */

 XXX - find out what chips support lbpw */

 order matters! */

 begin clear state */

 context control state */

 pa_sc_raster_config/pa_sc_raster_config1 */

 end clear state */

 clear state */

 XXX */

 XXX */

/**

 * gfx_v7_0_get_gpu_clock_counter - return GPU clock counter snapshot

 *

 * @adev: amdgpu_device pointer

 *

 * Fetches a GPU clock counter snapshot (SI).

 * Returns the 64 bit clock counter snapshot.

 GDS Base */

 GDS Size */

 GWS */

 OA */

 type 0 wave data */

 Get memory bank mapping mode. */

 Validate settings in case only one DIMM installed. */

 If DIMM Addr map is 8GB, ROW size should be 2KB. Otherwise 1KB. */

 If ROW size(DIMM1) != ROW size(DMIMM0), ROW size should be larger one. */

 XXX use MC settings? */

 fix up row size */

 mec0 is me1 */

 type-2 packets are deprecated on MEC, use type-3 instead */

 EOP Event */

 Privileged reg */

 Privileged inst */

 allocate mec buffers */

 set up the compute queues - allocate horizontally across pipes */

 init CSB */

 init rlc */

 read MC_STATUS */

 GRBM_STATUS */

 GRBM_STATUS2 */

 SRBM_STATUS */

 disable CG/PG */

 stop the rlc */

 Disable GFX parsing/prefetching */

 Disable MEC parsing/prefetching */

 Wait a little for things to settle down */

	/*

	 * amdgpu controls only the first MEC. That's why this function only

	 * handles the setting of interrupts for this specific MEC. All other

	 * pipes' interrupts are set by amdkfd.

 XXX soft reset the gfx block only

 order matters! */

 CP_COHER_CNTL */

 CP_COHER_SIZE */

 CP_COHER_BASE */

 poll interval */

 CP_COHER_CNTL */

 CP_COHER_SIZE */

 CP_COHER_SIZE_HI */

 CP_COHER_BASE */

 CP_COHER_BASE_HI */

 poll interval */

 gfx_v7_0_ring_emit_gds_switch */

 gfx_v7_0_ring_emit_hdp_flush */

 hdp invalidate */

 gfx_v7_0_ring_emit_fence_gfx x3 for user fence, vm fence */

 gfx_v7_0_ring_emit_pipeline_sync */

 gfx_v7_0_ring_emit_vm_flush */

 gfx_v7_ring_emit_cntxcntl including vgt flush*/

 SURFACE_SYNC */

 gfx_v7_0_ring_emit_ib_gfx */

 gfx_v7_0_ring_emit_gds_switch */

 gfx_v7_0_ring_emit_hdp_flush */

 hdp invalidate */

 gfx_v7_0_ring_emit_pipeline_sync */

 gfx_v7_0_ring_emit_vm_flush */

 gfx_v7_0_ring_emit_fence_compute x3 for user fence, vm fence */

 gfx_v7_0_emit_mem_sync_compute */

 gfx_v7_0_ring_emit_ib_compute */

 init asci gds info */

/*

 * Copyright 2009 Jerome Glisse.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

/*

 * Authors:

 *    Jerome Glisse <glisse@freedesktop.org>

 *    Thomas Hellstrom <thomas-at-tungstengraphics-dot-com>

 *    Dave Airlie

/**

 * DOC: amdgpu_object

 *

 * This defines the interfaces to operate on an &amdgpu_bo buffer object which

 * represents memory used by driver (VRAM, system memory, etc.). The driver

 * provides DRM/GEM APIs to userspace. DRM/GEM APIs then use these interfaces

 * to create/destroy/set buffer object which are then managed by the kernel TTM

 * memory manager.

 * The interfaces are also used internally by kernel clients, including gfx,

 * uvd, etc. for kernel managed allocations used by the GPU.

 *

 in case amdgpu_device_recover_vram got NULL of bo->parent */

/**

 * amdgpu_bo_is_amdgpu_bo - check if the buffer object is an &amdgpu_bo

 * @bo: buffer object to be checked

 *

 * Uses destroy function associated with the object to determine if this is

 * an &amdgpu_bo.

 *

 * Returns:

 * true if the object belongs to &amdgpu_bo, false if not.

/**

 * amdgpu_bo_placement_from_domain - set buffer's placement

 * @abo: &amdgpu_bo buffer object whose placement is to be set

 * @domain: requested domain

 *

 * Sets buffer's placement according to requested domain and the buffer's

 * flags.

/**

 * amdgpu_bo_create_reserved - create reserved BO for kernel use

 *

 * @adev: amdgpu device object

 * @size: size for the new BO

 * @align: alignment for the new BO

 * @domain: where to place it

 * @bo_ptr: used to initialize BOs in structures

 * @gpu_addr: GPU addr of the pinned BO

 * @cpu_addr: optional CPU address mapping

 *

 * Allocates and pins a BO for kernel internal use, and returns it still

 * reserved.

 *

 * Note: For bo_ptr new BO is only created if bo_ptr points to NULL.

 *

 * Returns:

 * 0 on success, negative error code otherwise.

/**

 * amdgpu_bo_create_kernel - create BO for kernel use

 *

 * @adev: amdgpu device object

 * @size: size for the new BO

 * @align: alignment for the new BO

 * @domain: where to place it

 * @bo_ptr:  used to initialize BOs in structures

 * @gpu_addr: GPU addr of the pinned BO

 * @cpu_addr: optional CPU address mapping

 *

 * Allocates and pins a BO for kernel internal use.

 *

 * Note: For bo_ptr new BO is only created if bo_ptr points to NULL.

 *

 * Returns:

 * 0 on success, negative error code otherwise.

/**

 * amdgpu_bo_create_kernel_at - create BO for kernel use at specific location

 *

 * @adev: amdgpu device object

 * @offset: offset of the BO

 * @size: size of the BO

 * @domain: where to place it

 * @bo_ptr:  used to initialize BOs in structures

 * @cpu_addr: optional CPU address mapping

 *

 * Creates a kernel BO at a specific offset in the address space of the domain.

 *

 * Returns:

 * 0 on success, negative error code otherwise.

	/*

	 * Remove the original mem node and create a new one at the request

	 * position.

/**

 * amdgpu_bo_free_kernel - free BO for kernel use

 *

 * @bo: amdgpu BO to free

 * @gpu_addr: pointer to where the BO's GPU memory space address was stored

 * @cpu_addr: pointer to where the BO's CPU memory space address was stored

 *

 * unmaps and unpin a BO for kernel internal use.

 Validate bo size is bit bigger then the request domain */

	/*

	 * If GTT is part of requested domains the check must succeed to

	 * allow fall back to GTT

 TODO add more domains checks, such as AMDGPU_GEM_DOMAIN_CPU */

	/* XXX: Write-combined CPU mappings of GTT seem broken on 32-bit

	 * See https://bugs.freedesktop.org/show_bug.cgi?id=84627

	/* Don't try to enable write-combining when it can't work, or things

	 * may be slow

	 * See https://bugs.freedesktop.org/show_bug.cgi?id=88758

	/* For architectures that don't support WC memory,

	 * mask out the WC flag from the BO

/**

 * amdgpu_bo_create - create an &amdgpu_bo buffer object

 * @adev: amdgpu device object

 * @bp: parameters to be used for the buffer object

 * @bo_ptr: pointer to the buffer object pointer

 *

 * Creates an &amdgpu_bo buffer object.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

 We opt to avoid OOM on system pages allocations */

 Note that GDS/GWS/OA allocates 1 page per byte/resource. */

 GWS and OA don't need any alignment. */

 Both size and alignment must be a multiple of 4. */

 Memory should be aligned at least to a page size. */

 Treat CPU_ACCESS_REQUIRED only as a hint if given by UMD */

/**

 * amdgpu_bo_create_user - create an &amdgpu_bo_user buffer object

 * @adev: amdgpu device object

 * @bp: parameters to be used for the buffer object

 * @ubo_ptr: pointer to the buffer object pointer

 *

 * Create a BO to be used by user application;

 *

 * Returns:

 * 0 for success or a negative error code on failure.

/**

 * amdgpu_bo_create_vm - create an &amdgpu_bo_vm buffer object

 * @adev: amdgpu device object

 * @bp: parameters to be used for the buffer object

 * @vmbo_ptr: pointer to the buffer object pointer

 *

 * Create a BO to be for GPUVM.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

	/* bo_ptr_size will be determined by the caller and it depends on

	 * num of amdgpu_vm_pt entries.

/**

 * amdgpu_bo_add_to_shadow_list - add a BO to the shadow list

 *

 * @vmbo: BO that will be inserted into the shadow list

 *

 * Insert a BO to the shadow list.

/**

 * amdgpu_bo_restore_shadow - restore an &amdgpu_bo shadow

 *

 * @shadow: &amdgpu_bo shadow to be restored

 * @fence: dma_fence associated with the operation

 *

 * Copies a buffer object's shadow content back to the object.

 * This is used for recovering a buffer from its shadow in case of a gpu

 * reset where vram context may be lost.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

/**

 * amdgpu_bo_kmap - map an &amdgpu_bo buffer object

 * @bo: &amdgpu_bo buffer object to be mapped

 * @ptr: kernel virtual address to be returned

 *

 * Calls ttm_bo_kmap() to set up the kernel virtual mapping; calls

 * amdgpu_bo_kptr() to get the kernel virtual address.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

/**

 * amdgpu_bo_kptr - returns a kernel virtual address of the buffer object

 * @bo: &amdgpu_bo buffer object

 *

 * Calls ttm_kmap_obj_virtual() to get the kernel virtual address

 *

 * Returns:

 * the virtual address of a buffer object area.

/**

 * amdgpu_bo_kunmap - unmap an &amdgpu_bo buffer object

 * @bo: &amdgpu_bo buffer object to be unmapped

 *

 * Unmaps a kernel map set up by amdgpu_bo_kmap().

/**

 * amdgpu_bo_ref - reference an &amdgpu_bo buffer object

 * @bo: &amdgpu_bo buffer object

 *

 * References the contained &ttm_buffer_object.

 *

 * Returns:

 * a refcounted pointer to the &amdgpu_bo buffer object.

/**

 * amdgpu_bo_unref - unreference an &amdgpu_bo buffer object

 * @bo: &amdgpu_bo buffer object

 *

 * Unreferences the contained &ttm_buffer_object and clear the pointer

/**

 * amdgpu_bo_pin_restricted - pin an &amdgpu_bo buffer object

 * @bo: &amdgpu_bo buffer object to be pinned

 * @domain: domain to be pinned to

 * @min_offset: the start of requested address range

 * @max_offset: the end of requested address range

 *

 * Pins the buffer object according to requested domain and address range. If

 * the memory is unbound gart memory, binds the pages into gart table. Adjusts

 * pin_count and pin_size accordingly.

 *

 * Pinning means to lock pages in memory along with keeping them at a fixed

 * offset. It is required when a buffer can not be moved, for example, when

 * a display buffer is being scanned out.

 *

 * Compared with amdgpu_bo_pin(), this function gives more flexibility on

 * where to pin a buffer if there are specific restrictions on where a buffer

 * must be located.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

 A shared bo cannot be migrated to VRAM */

	/* This assumes only APU display buffers are pinned with (VRAM|GTT).

	 * See function amdgpu_display_supported_domains()

 force to pin into visible video ram */

/**

 * amdgpu_bo_pin - pin an &amdgpu_bo buffer object

 * @bo: &amdgpu_bo buffer object to be pinned

 * @domain: domain to be pinned to

 *

 * A simple wrapper to amdgpu_bo_pin_restricted().

 * Provides a simpler API for buffers that do not have any strict restrictions

 * on where a buffer must be located.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

/**

 * amdgpu_bo_unpin - unpin an &amdgpu_bo buffer object

 * @bo: &amdgpu_bo buffer object to be unpinned

 *

 * Decreases the pin_count, and clears the flags if pin_count reaches 0.

 * Changes placement and pin size accordingly.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

/**

 * amdgpu_bo_init - initialize memory manager

 * @adev: amdgpu device object

 *

 * Calls amdgpu_ttm_init() to initialize amdgpu memory manager.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

 On A+A platform, VRAM can be mapped as WB */

 reserve PAT memory space to WC for VRAM */

 Add an MTRR for the VRAM */

/**

 * amdgpu_bo_fini - tear down memory manager

 * @adev: amdgpu device object

 *

 * Reverses amdgpu_bo_init() to tear down memory manager.

/**

 * amdgpu_bo_set_tiling_flags - set tiling flags

 * @bo: &amdgpu_bo buffer object

 * @tiling_flags: new flags

 *

 * Sets buffer object's tiling flags with the new one. Used by GEM ioctl or

 * kernel driver to set the tiling flags on a buffer.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

/**

 * amdgpu_bo_get_tiling_flags - get tiling flags

 * @bo: &amdgpu_bo buffer object

 * @tiling_flags: returned flags

 *

 * Gets buffer object's tiling flags. Used by GEM ioctl or kernel driver to

 * set the tiling flags on a buffer.

/**

 * amdgpu_bo_set_metadata - set metadata

 * @bo: &amdgpu_bo buffer object

 * @metadata: new metadata

 * @metadata_size: size of the new metadata

 * @flags: flags of the new metadata

 *

 * Sets buffer object's metadata, its size and flags.

 * Used via GEM ioctl.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

/**

 * amdgpu_bo_get_metadata - get metadata

 * @bo: &amdgpu_bo buffer object

 * @buffer: returned metadata

 * @buffer_size: size of the buffer

 * @metadata_size: size of the returned metadata

 * @flags: flags of the returned metadata

 *

 * Gets buffer object's metadata, its size and flags. buffer_size shall not be

 * less than metadata_size.

 * Used via GEM ioctl.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

/**

 * amdgpu_bo_move_notify - notification about a memory move

 * @bo: pointer to a buffer object

 * @evict: if this move is evicting the buffer from the graphics address space

 * @new_mem: new information of the bufer object

 *

 * Marks the corresponding &amdgpu_bo buffer object as invalid, also performs

 * bookkeeping.

 * TTM driver callback which is called when ttm moves a buffer.

 remember the eviction */

 update statistics */

 move_notify is called before move happens */

/**

 * amdgpu_bo_release_notify - notification about a BO being released

 * @bo: pointer to a buffer object

 *

 * Wipes VRAM buffers whose contents should not be leaked before the

 * memory is released.

 We only remove the fence if the resv has individualized. */

/**

 * amdgpu_bo_fault_reserve_notify - notification about a memory fault

 * @bo: pointer to a buffer object

 *

 * Notifies the driver we are taking a fault on this BO and have reserved it,

 * also performs bookkeeping.

 * TTM driver callback for dealing with vm faults.

 *

 * Returns:

 * 0 for success or a negative error code on failure.

 Remember that this BO was accessed by the CPU */

 Can't move a pinned BO to visible VRAM */

 hurrah the memory is not visible ! */

 Avoid costly evictions; only set GTT as a busy placement */

 this should never happen */

/**

 * amdgpu_bo_fence - add fence to buffer object

 *

 * @bo: buffer object in question

 * @fence: fence to add

 * @shared: true if fence should be added shared

 *

/**

 * amdgpu_bo_sync_wait_resv - Wait for BO reservation fences

 *

 * @adev: amdgpu device pointer

 * @resv: reservation object to sync to

 * @sync_mode: synchronization mode

 * @owner: fence owner

 * @intr: Whether the wait is interruptible

 *

 * Extract the fences from the reservation object and waits for them to finish.

 *

 * Returns:

 * 0 on success, errno otherwise.

/**

 * amdgpu_bo_sync_wait - Wrapper for amdgpu_bo_sync_wait_resv

 * @bo: buffer object to wait for

 * @owner: fence owner

 * @intr: Whether the wait is interruptible

 *

 * Wrapper to wait for fences in a BO.

 * Returns:

 * 0 on success, errno otherwise.

/**

 * amdgpu_bo_gpu_offset - return GPU offset of bo

 * @bo:	amdgpu object for which we query the offset

 *

 * Note: object should either be pinned or reserved when calling this

 * function, it might be useful to add check for this for debugging.

 *

 * Returns:

 * current GPU offset of the object.

/**

 * amdgpu_bo_gpu_offset_no_check - return GPU offset of bo

 * @bo:	amdgpu object for which we query the offset

 *

 * Returns:

 * current GPU offset of the object without raising warnings.

/**

 * amdgpu_bo_get_preferred_domain - get preferred domain

 * @adev: amdgpu device object

 * @domain: allowed :ref:`memory domains <amdgpu_memory_domains>`

 *

 * Returns:

 * Which of the allowed domains is preferred for allocating the BO.

/**

 * amdgpu_bo_print_info - print BO info in debugfs file

 *

 * @id: Index or Id of the BO

 * @bo: Requested BO for printing info

 * @m: debugfs file

 *

 * Print BO information in debugfs file

 *

 * Returns:

 * Size of the BO in bytes.

/*

 * Copyright 2016 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Helper function to query firmware capability

 *

 * @adev: amdgpu_device pointer

 *

 * Return firmware_capability in firmwareinfo table on success or 0 if not

 support firmware_info 3.1 + */

/*

 * Helper function to query gpu virtualizaiton capability

 *

 * @adev: amdgpu_device pointer

 *

 * Return true if gpu virtualization is supported or false if not

 Firmware request VRAM reservation for SR-IOV */

 Use the default scratch size */

 allocate some scratch memory */

 channel width is 64 */

 channel width is 64 */

/*

 * Return true if vbios enabled ecc by default, if umc info table is available

 * or false if ecc is not enabled or umc info table is not available

 unsupported crev */

/*

 * Helper function to query sram ecc capablity

 *

 * @adev: amdgpu_device pointer

 *

 * Return true if vbios supports sram ecc or false if not

/*

 * Helper function to query dynamic boot config capability

 *

 * @adev: amdgpu_device pointer

 *

 * Return true if vbios supports dynamic boot config or false if not

/**

 * amdgpu_atomfirmware_ras_rom_addr -- Get the RAS EEPROM addr from VBIOS

 * adev: amdgpu_device pointer

 * i2c_address: pointer to u8; if not NULL, will contain

 *    the RAS EEPROM address if the function returns true

 *

 * Return true if VBIOS supports RAS EEPROM address reporting,

 * else return false. If true and @i2c_address is not NULL,

 * will contain the RAS ROM address.

 support firmware_info 3.4 + */

			/* The ras_rom_i2c_slave_addr should ideally

			 * be a 19-bit EEPROM address, which would be

			 * used as is by the driver; see top of

			 * amdgpu_eeprom.c.

			 *

			 * When this is the case, 0 is of course a

			 * valid RAS EEPROM address, in which case,

			 * we'll drop the first "if (firm...)" and only

			 * leave the check for the pointer.

			 *

			 * The reason this works right now is because

			 * ras_rom_i2c_slave_addr contains the EEPROM

			 * device type qualifier 1010b in the top 4

			 * bits.

 system clock */

 memory clock */

	/* if asic is Navi+, the rlc reference clock is used for system clock

/*

 * Helper function to query two stage mem training capability

 *

 * @adev: amdgpu_device pointer

 *

 * Return true if two stage mem training is supported or false if not

 fail to parse data_header */

/*

 * Copyright 2017 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * PASID manager

 *

 * PASIDs are global address space identifiers that can be shared

 * between the GPU, an IOMMU and the driver. VMs on different devices

 * may use the same PASID if they share the same address

 * space. Therefore PASIDs are allocated using a global IDA. VMs are

 * looked up from the PASID per amdgpu_device.

 Helper to free pasid from a fence callback */

/**

 * amdgpu_pasid_alloc - Allocate a PASID

 * @bits: Maximum width of the PASID in bits, must be at least 1

 *

 * Allocates a PASID of the given width while keeping smaller PASIDs

 * available if possible.

 *

 * Returns a positive integer on success. Returns %-EINVAL if bits==0.

 * Returns %-ENOSPC if no PASID was available. Returns %-ENOMEM on

 * memory allocation failure.

/**

 * amdgpu_pasid_free - Free a PASID

 * @pasid: PASID to free

/**

 * amdgpu_pasid_free_delayed - free pasid when fences signal

 *

 * @resv: reservation object with the fences to wait for

 * @pasid: pasid to free

 *

 * Free the pasid only after all the fences in resv are signaled.

 Last resort when we are OOM */

	/* Not enough memory for the delayed delete, as last resort

	 * block for all the fences to complete.

/*

 * VMID manager

 *

 * VMIDs are a per VMHUB identifier for page tables handling.

/**

 * amdgpu_vmid_had_gpu_reset - check if reset occured since last use

 *

 * @adev: amdgpu_device pointer

 * @id: VMID structure

 *

 * Check if GPU reset occured since last use of the VMID.

/**

 * amdgpu_vmid_grab_idle - grab idle VMID

 *

 * @vm: vm to allocate id for

 * @ring: ring we want to submit job to

 * @sync: sync object where we add dependencies

 * @idle: resulting idle VMID

 *

 * Try to find an idle VMID, if none is idle add a fence to wait to the sync

 * object. Returns -ENOMEM when we are out of memory.

 Check if we have an idle VMID */

 Don't use per engine and per process VMID at the same time */

 If we can't find a idle VMID to use, wait till one becomes available */

/**

 * amdgpu_vmid_grab_reserved - try to assign reserved VMID

 *

 * @vm: vm to allocate id for

 * @ring: ring we want to submit job to

 * @sync: sync object where we add dependencies

 * @fence: fence protecting ID from reuse

 * @job: job who wants to use the VMID

 * @id: resulting VMID

 *

 * Try to assign a reserved VMID.

 Don't use per engine and per process VMID at the same time */

 to prevent one context starved by another context */

	/* Good we can use this VMID. Remember this submission as

	* user of the VMID.

/**

 * amdgpu_vmid_grab_used - try to reuse a VMID

 *

 * @vm: vm to allocate id for

 * @ring: ring we want to submit job to

 * @sync: sync object where we add dependencies

 * @fence: fence protecting ID from reuse

 * @job: job who wants to use the VMID

 * @id: resulting VMID

 *

 * Try to reuse a VMID for this submission.

 Check if we can use a VMID already assigned to this VM */

 Check all the prerequisites to using this VMID */

		/* Good, we can use this VMID. Remember this submission as

		 * user of the VMID.

/**

 * amdgpu_vmid_grab - allocate the next free VMID

 *

 * @vm: vm to allocate id for

 * @ring: ring we want to submit job to

 * @sync: sync object where we add dependencies

 * @fence: fence protecting ID from reuse

 * @job: job who wants to use the VMID

 *

 * Allocate an id for the vm, adding fences to the sync obj as necessary.

 Still no ID to use? Then use the idle one found earlier */

 Remember this submission as user of the VMID */

 Select the first entry VMID */

/**

 * amdgpu_vmid_reset - reset VMID to zero

 *

 * @adev: amdgpu device structure

 * @vmhub: vmhub type

 * @vmid: vmid number to use

 *

 * Reset saved GDW, GWS and OA to force switch on next flush.

/**

 * amdgpu_vmid_reset_all - reset VMID to zero

 *

 * @adev: amdgpu device structure

 *

 * Reset VMID to force flush on next use

/**

 * amdgpu_vmid_mgr_init - init the VMID manager

 *

 * @adev: amdgpu_device pointer

 *

 * Initialize the VM manager structures

 manage only VMIDs not used by KFD */

 skip over VMID 0, since it is the system VM */

/**

 * amdgpu_vmid_mgr_fini - cleanup VM manager

 *

 * @adev: amdgpu_device pointer

 *

 * Cleanup the VM manager and free resources.

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * vcn_v3_0_early_init - set function pointers

 *

 * @handle: amdgpu_device pointer

 *

 * Set ring and irq function pointers

 both instances are harvested, disable the block */

/**

 * vcn_v3_0_sw_init - sw init for VCN block

 *

 * @handle: amdgpu_device pointer

 *

 * Load firmware and sw initialization

	/*

	 * Note: doorbell assignment is fixed for SRIOV multiple VCN engines

	 * Formula:

	 *   vcn_db_base  = adev->doorbell_index.vcn.vcn_ring0_1 << 1;

	 *   dec_ring_i   = vcn_db_base + i * (adev->vcn.num_enc_rings + 1)

	 *   enc_ring_i,j = vcn_db_base + i * (adev->vcn.num_enc_rings + 1) + 1 + j

 get DWORD offset */

 VCN DEC TRAP */

 VCN ENC TRAP */

/**

 * vcn_v3_0_sw_fini - sw fini for VCN block

 *

 * @handle: amdgpu_device pointer

 *

 * VCN suspend and free up sw allocation

/**

 * vcn_v3_0_hw_init - start and test VCN block

 *

 * @handle: amdgpu_device pointer

 *

 * Initialize the hardware, boot up the VCPU and do some testing

 initialize VCN dec and enc ring buffers */

/**

 * vcn_v3_0_hw_fini - stop the hardware block

 *

 * @handle: amdgpu_device pointer

 *

 * Stop the VCN block, mark ring as not ready any more

/**

 * vcn_v3_0_suspend - suspend VCN block

 *

 * @handle: amdgpu_device pointer

 *

 * HW fini and suspend VCN block

/**

 * vcn_v3_0_resume - resume VCN block

 *

 * @handle: amdgpu_device pointer

 *

 * Resume firmware and hw init VCN block

/**

 * vcn_v3_0_mc_resume - memory controller programming

 *

 * @adev: amdgpu_device pointer

 * @inst: instance number

 *

 * Let the VCN memory controller know it's offsets

 cache window 0: fw */

 cache window 1: stack */

 cache window 2: context */

 non-cache window */

 cache window 0: fw */

 cache window 1: stack */

 cache window 2: context */

 non-cache window */

 VCN global tiling registers */

 Before power off, this indicator has to be turned on */

/**

 * vcn_v3_0_disable_clock_gating - disable VCN clock gating

 *

 * @adev: amdgpu_device pointer

 * @inst: instance number

 *

 * Disable clock gating for VCN block

 VCN disable CGC */

 enable sw clock gating control */

 turn off clock gating */

 turn on SUVD clock gating */

 turn on sw mode in UVD_SUVD_CGC_CTRL */

/**

 * vcn_v3_0_enable_clock_gating - enable VCN clock gating

 *

 * @adev: amdgpu_device pointer

 * @inst: instance number

 *

 * Enable clock gating for VCN block

 enable VCN CGC */

 disable register anti-hang mechanism */

 enable dynamic power gating mode */

 enable clock gating */

 enable VCPU clock */

 disable master interupt */

 setup mmUVD_LMI_CTRL */

 enable LMI MC and UMC channels */

 unblock VCPU register access */

 enable master interrupt */

 add nop to workaround PSP size check */

 force RBC into idle state */

 Stall DPG before WPTR/RPTR reset */

 set the write pointer delay */

 set the wb address */

 programm the RB_BASE for ring buffer */

 Initialize the ring buffer's read and write pointers */

 Reset FW shared memory RBC WPTR/RPTR */

resetting done, fw can check RB ring */

 Unstall DPG */

 disable VCN power gating */

 set VCN status busy */

SW clock gating */

 enable VCPU clock */

 disable master interrupt */

 enable LMI MC and UMC channels */

 setup mmUVD_LMI_CTRL */

 setup mmUVD_MPC_CNTL */

 setup UVD_MPC_SET_MUXA0 */

 setup UVD_MPC_SET_MUXB0 */

 setup mmUVD_MPC_SET_MUX */

 VCN global tiling registers */

 unblock VCPU register access */

 release VCPU reset to boot */

 enable master interrupt */

 clear the busy bit of VCN_STATUS */

 force RBC into idle state */

 programm the RB_BASE for ring buffer */

 Initialize the ring buffer's read and write pointers */

 force RBC into idle state */

 add end packet */

 refine header */

 Update init table header in memory */

	/* message MMSCH (in VCN[0]) to initialize this client

	 * 1, write to mmsch_vf_ctx_addr_lo/hi register with GPU mc addr

	 * of memory descriptor location

 2, update vmid of descriptor */

 use domain0 for MM scheduler */

 3, notify mmsch about the size of this descriptor */

 4, set resp to zero */

	/* 5, kick off the initialization and wait until

	 * MMSCH_VF_MAILBOX_RESP becomes non-zero

 Wait for power status to be 1 */

 wait for read ptr to be equal to write ptr */

 disable dynamic power gating mode */

 wait for vcn idle */

 disable LMI UMC channel */

 block VCPU register access */

 reset VCPU */

 disable VCPU clock */

 apply soft reset */

 clear status */

 apply HW clock gating */

 enable VCN power gating */

 pause/unpause if state is changed */

 pause DPG */

 wait for ACK */

 Stall DPG before WPTR/RPTR reset */

 Restore */

 restore wptr/rptr with pointers saved in FW shared memory*/

 Unstall DPG */

 unpause dpg, no need to wait */

/**

 * vcn_v3_0_dec_ring_get_rptr - get read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware read pointer

/**

 * vcn_v3_0_dec_ring_get_wptr - get write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware write pointer

/**

 * vcn_v3_0_dec_ring_set_wptr - set write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the write pointer to the hardware

whenever update RBC_RB_WPTR, we save the wptr in shared rb.wptr and scratch2 */

 wait for register write */

 vcn_v3_0_dec_sw_ring_emit_vm_flush */

 vcn_v3_0_dec_sw_ring_emit_fdec_swe x2 vm fdec_swe */

 vcn_v3_0_dec_sw_ring_insert_end */

 vcn_v3_0_dec_sw_ring_emit_ib */

amdgpu_vcn_dec_sw_ring_test_ib,

 The create msg must be in the first IB submitted */

 Check length */

 H246, HEVC and VP9 can run on any instance */

 The first instance can decode anything */

 vcn_v2_0_dec_ring_emit_vm_flush */

 vcn_v2_0_dec_ring_emit_fence x2 vm fence */

 vcn_v2_0_dec_ring_emit_ib */

/**

 * vcn_v3_0_enc_ring_get_rptr - get enc read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware enc read pointer

/**

 * vcn_v3_0_enc_ring_get_wptr - get enc write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware enc write pointer

/**

 * vcn_v3_0_enc_ring_set_wptr - set enc write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the enc write pointer to the hardware

 vcn_v2_0_enc_ring_emit_vm_flush */

 vcn_v2_0_enc_ring_emit_fence x2 vm fence */

 vcn_v2_0_enc_ring_insert_end */

 vcn_v2_0_enc_ring_emit_ib */

	/* for SRIOV, guest should not control VCN Power-gating

	 * MMSCH FW should control Power-gating and clock-gating

	 * guest should avoid touching CGC and PG

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 Enable pflip interrupts */

 Disable pflip interrupts */

/**

 * dce_v10_0_page_flip - pageflip callback.

 *

 * @adev: amdgpu_device pointer

 * @crtc_id: crtc to cleanup pageflip on

 * @crtc_base: new address of the crtc (GPU MC address)

 * @async: asynchronous flip

 *

 * Triggers the actual pageflip by updating the primary

 * surface base address.

 flip at hsync for async, default is vsync */

 update pitch */

 update the primary scanout address */

 writing to the low address triggers the update */

 post the write */

/**

 * dce_v10_0_hpd_sense - hpd sense callback.

 *

 * @adev: amdgpu_device pointer

 * @hpd: hpd (hotplug detect) pin

 *

 * Checks if a digital monitor is connected (evergreen+).

 * Returns true if connected, false if not connected.

/**

 * dce_v10_0_hpd_set_polarity - hpd set polarity callback.

 *

 * @adev: amdgpu_device pointer

 * @hpd: hpd (hotplug detect) pin

 *

 * Set the polarity of the hpd pin (evergreen+).

/**

 * dce_v10_0_hpd_init - hpd setup callback.

 *

 * @adev: amdgpu_device pointer

 *

 * Setup the hpd pins used by the card (evergreen+).

 * Enable the pin, set the polarity, and enable the hpd interrupts.

			/* don't try to enable hpd on eDP or LVDS avoid breaking the

			 * aux dp channel on imac and help (but not completely fix)

			 * https://bugzilla.redhat.com/show_bug.cgi?id=726143

			 * also avoid interrupt storms during dpms.

/**

 * dce_v10_0_hpd_fini - hpd tear down callback.

 *

 * @adev: amdgpu_device pointer

 *

 * Tear down the hpd pins used by the card (evergreen+).

 * Disable the hpd interrupts.

 Lockout access through VGA aperture*/

 disable VGA render */

Disable VGA render and enabled crtc, if has DCE engine*/

Disable crtc*/

 LVDS/eDP FMT is set up by atom */

 not needed for analog */

 XXX sort out optimal dither settings */

 XXX sort out optimal dither settings */

 XXX sort out optimal dither settings */

 not needed */

 display watermark setup */

/**

 * dce_v10_0_line_buffer_adjust - Set up the line buffer

 *

 * @adev: amdgpu_device pointer

 * @amdgpu_crtc: the selected display controller

 * @mode: the current display mode on the selected display

 * controller

 *

 * Setup up the line buffer allocation for

 * the selected display controller (CIK).

 * Returns the line buffer size in pixels.

	/*

	 * Line Buffer Setup

	 * There are 6 line buffers, one for each display controllers.

	 * There are 3 partitions per LB. Select the number of partitions

	 * to enable based on the display width.  For display widths larger

	 * than 4096, you need use to use 2 display controllers and combine

	 * them using the stereo blender.

 controller not enabled, so no lb used */

/**

 * cik_get_number_of_dram_channels - get the number of dram channels

 *

 * @adev: amdgpu_device pointer

 *

 * Look up the number of video ram channels (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the number of dram channels

 number of dram channels */

 bandwidth per dram data pin in kHz */

 engine clock in kHz */

 display clock in kHz */

 viewport width */

 active display time in ns */

 blank time in ns */

 mode is interlaced */

 vertical scale ratio */

 number of active crtcs */

 bytes per pixel display + overlay */

 line buffer allocated to pipe */

 vertical scaler taps */

/**

 * dce_v10_0_dram_bandwidth - get the dram bandwidth

 *

 * @wm: watermark calculation data

 *

 * Calculate the raw dram bandwidth (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the dram bandwidth in MBytes/s

 Calculate raw DRAM Bandwidth */

 0.7 */

/**

 * dce_v10_0_dram_bandwidth_for_display - get the dram bandwidth for display

 *

 * @wm: watermark calculation data

 *

 * Calculate the dram bandwidth used for display (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the dram bandwidth for display in MBytes/s

 Calculate DRAM Bandwidth and the part allocated to display. */

 0.3 to 0.7 */

 XXX worse case value 0.3 */

/**

 * dce_v10_0_data_return_bandwidth - get the data return bandwidth

 *

 * @wm: watermark calculation data

 *

 * Calculate the data return bandwidth used for display (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the data return bandwidth in MBytes/s

 Calculate the display Data return Bandwidth */

 0.8 */

/**

 * dce_v10_0_dmif_request_bandwidth - get the dmif bandwidth

 *

 * @wm: watermark calculation data

 *

 * Calculate the dmif bandwidth used for display (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the dmif bandwidth in MBytes/s

 Calculate the DMIF Request Bandwidth */

 0.8 */

/**

 * dce_v10_0_available_bandwidth - get the min available bandwidth

 *

 * @wm: watermark calculation data

 *

 * Calculate the min available bandwidth used for display (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the min available bandwidth in MBytes/s

 Calculate the Available bandwidth. Display can use this temporarily but not in average. */

/**

 * dce_v10_0_average_bandwidth - get the average available bandwidth

 *

 * @wm: watermark calculation data

 *

 * Calculate the average available bandwidth used for display (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the average available bandwidth in MBytes/s

	/* Calculate the display mode Average Bandwidth

	 * DisplayMode should contain the source and destination dimensions,

	 * timing, etc.

/**

 * dce_v10_0_latency_watermark - get the latency watermark

 *

 * @wm: watermark calculation data

 *

 * Calculate the latency watermark (CIK).

 * Used for display watermark bandwidth calculations

 * Returns the latency watermark in ns

 First calculate the latency in ns */

 2000 ns. */

 dc pipe latency */

/**

 * dce_v10_0_average_bandwidth_vs_dram_bandwidth_for_display - check

 * average and available dram bandwidth

 *

 * @wm: watermark calculation data

 *

 * Check if the display average bandwidth fits in the display

 * dram bandwidth (CIK).

 * Used for display watermark bandwidth calculations

 * Returns true if the display fits, false if not.

/**

 * dce_v10_0_average_bandwidth_vs_available_bandwidth - check

 * average and available bandwidth

 *

 * @wm: watermark calculation data

 *

 * Check if the display average bandwidth fits in the display

 * available bandwidth (CIK).

 * Used for display watermark bandwidth calculations

 * Returns true if the display fits, false if not.

/**

 * dce_v10_0_check_latency_hiding - check latency hiding

 *

 * @wm: watermark calculation data

 *

 * Check latency hiding (CIK).

 * Used for display watermark bandwidth calculations

 * Returns true if the display fits, false if not.

/**

 * dce_v10_0_program_watermarks - program display watermarks

 *

 * @adev: amdgpu_device pointer

 * @amdgpu_crtc: the selected display controller

 * @lb_size: line buffer size

 * @num_heads: number of display controllers in use

 *

 * Calculate and program the display watermarks for the

 * selected display controller (CIK).

 watermark for high clocks */

 XXX: get this from fb config */

 set for high clocks */

 possibly force display priority to high */

 should really do this at mode validation time... */

 watermark for low clocks */

 XXX: get this from fb config */

 set for low clocks */

 possibly force display priority to high */

 should really do this at mode validation time... */

 select wm A */

 select wm B */

 restore original selection */

 save values for DPM */

 Save number of lines the linebuffer leads before the scanout */

/**

 * dce_v10_0_bandwidth_update - program display watermarks

 *

 * @adev: amdgpu_device pointer

 *

 * Calculate and program the display watermarks and line

 * buffer allocation (CIK).

 program the speaker allocation */

 set HDMI mode */

 stereo */

 disable audio.  it will be set up later */

 XXX remove once we switch to ip funcs */

/*

 * update the N and CTS parameters for a given pixel clock rate

/*

 * build a HDMI Video Info Frame

 XXX two dtos; generally use dto0 for hdmi */

	/* Express [24MHz / target pixel clock] as an exact rational

	 * number (coefficient of two integer numbers.  DCCG_AUDIO_DTOx_PHASE

	 * is the numerator, DCCG_AUDIO_DTOx_MODULE is the denominator

/*

 * update the info frames with the data from the current display mode

 Silent, r600_hdmi_enable will raise WARN for us */

 hdmi deep color mode general control packets setup, if bpc > 8 */

 disable audio prior to setting up hw */

 send null packets when required */

 send null packets when required */

 send general control packets */

 send general control packets every frame */

 enable audio info frames (frames won't be set until audio is enabled) */

 required for audio info values to be updated */

 required for audio info values to be updated */

 anything other than 0 */

 unset HDMI_GC_AVMUTE */

 set the default audio delay */

 should be suffient for all audio modes and small enough for all hblanks */

 allow 60958 channel status fields to be updated */

 clear SW CTS value */

 select SW CTS value */

 allow hw to sent ACR packets when required */

 enable AVI info frames */

 required for audio info values to be updated */

 send audio packets */

 enable audio after to setting up hw */

 Silent, r600_hdmi_enable will raise WARN for us */

 DCE10 has audio blocks tied to DIG encoders */

 no fb bound */

	/* If atomic, assume fb object is pinned & idle & fenced and

	 * just update base pointers

 Greater 8 bpc fb needs to bypass hw-lut to retain precision */

 Greater 8 bpc fb needs to bypass hw-lut to retain precision */

	/* Make sure surface address is updated at vertical blank rather than

	 * horizontal blank

	/*

	 * The LUT only has 256 slots for indexing by a 8 bpc fb. Bypass the LUT

	 * for > 8 bpc scanout to avoid truncation of fb indices to 8 msb's, to

	 * retain the full precision throughout the pipeline.

 set pageflip to happen anywhere in vblank interval */

 Bytes per pixel may have changed */

 XXX match this to the depth of the crtc fmt block, move to modeset? */

	/* XXX this only needs to be programmed once per crtc at startup,

	 * not sure where the best place for it is

/**

 * dce_v10_0_pick_pll - Allocate a PPLL for use by the crtc.

 *

 * @crtc: drm crtc

 *

 * Returns the PPLL (Pixel PLL) to be used by the crtc.  For DP monitors

 * a single PPLL can be used for all DP crtcs/encoders.  For non-DP

 * monitors a dedicated PPLL must be used.  If a particular board has

 * an external DP PLL, return ATOM_PPLL_INVALID to skip PLL programming

 * as there is no need to program the PLL itself.  If we are not able to

 * allocate a PLL, return ATOM_PPLL_INVALID to skip PLL programming to

 * avoid messing up an existing monitor.

 *

 * Asic specific PLL information

 *

 * DCE 10.x

 * Tonga

 * - PPLL1, PPLL2 are available for all UNIPHY (both DP and non-DP)

 * CI

 * - PPLL0, PPLL1, PPLL2 are available for all UNIPHY (both DP and non-DP) and DAC

 *

 skip PPLL programming if using ext clock */

 use the same PPLL for all DP monitors */

 use the same PPLL for all monitors with the same clock */

 DCE10 has PPLL0, PPLL1, and PPLL2 */

 avivo cursor are offset into the total surface */

 turn off cursor */

 Make sure VBLANK and PFLIP interrupts are still enabled */

 adjust pm to dpms */

 disable crtc pair power gating before programming */

 disable the GRPH */

			/* one other crtc is using this pll don't turn

			 * off the pll

 disable the ppll */

 update the hw version fpr dpm */

 assign the encoder to the amdgpu crtc to avoid repeated lookups later */

 pick pll */

 if we can't get a PPLL for a non-DP encoder, fail */

 FIXME: not supported yet */

 HPD hotplug */

 allocate crtcs */

 setup afmt */

 disable vga render */

 init dig PHYs, disp eng pll */

 initialize hpd */

 turn on the BL */

 Wait a little for things to settle down */

 IRQ could occur when in initial stage */

 page flip completed. clean up */

 wakeup usersapce */

 vblank */

 vline */

 need to call this here rather than in prepare() since we need some crtc info */

 set scaler clears this on some chips */

 select the clock/data port if it uses a router */

 turn eDP panel on for mode set */

 this is needed for the pll/ss setup to work correctly in some cases */

 set up the FMT blocks */

 need to call this here as we need the crtc set up */

 these are handled by the primary encoders */

 no detect for TMDS/LVDS yet */

 see if we already added it */

 add a new one */

 these are handled by the primary encoders */

/*

 * Copyright 2011 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Alex Deucher

 *

 these are a limitation of ProcessI2cChannelTransaction not the hw */

 error */

 check for bus probe */

 max_bytes are a limitation of ProcessI2cChannelTransaction not the hw */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

/**

 * amdgpu_vm_sdma_map_table - make sure new PDs/PTs are GTT mapped

 *

 * @table: newly allocated or validated PD/PT

/**

 * amdgpu_vm_sdma_prepare - prepare SDMA command submission

 *

 * @p: see amdgpu_vm_update_params definition

 * @resv: reservation object with embedded fence

 * @sync_mode: synchronization mode

 *

 * Returns:

 * Negativ errno, 0 for success.

/**

 * amdgpu_vm_sdma_commit - commit SDMA command submission

 *

 * @p: see amdgpu_vm_update_params definition

 * @fence: resulting fence

 *

 * Returns:

 * Negativ errno, 0 for success.

/**

 * amdgpu_vm_sdma_copy_ptes - copy the PTEs from mapping

 *

 * @p: see amdgpu_vm_update_params definition

 * @bo: PD/PT to update

 * @pe: addr of the page entry

 * @count: number of page entries to copy

 *

 * Traces the parameters and calls the DMA function to copy the PTEs.

/**

 * amdgpu_vm_sdma_set_ptes - helper to call the right asic function

 *

 * @p: see amdgpu_vm_update_params definition

 * @bo: PD/PT to update

 * @pe: byte offset of the PDE/PTE, relative to start of PDB/PTB

 * @addr: dst addr to write into pe

 * @count: number of page entries to update

 * @incr: increase next addr by incr bytes

 * @flags: hw access flags

 *

 * Traces the parameters and calls the right asic functions

 * to setup the page table using the DMA.

/**

 * amdgpu_vm_sdma_update - execute VM update

 *

 * @p: see amdgpu_vm_update_params definition

 * @vmbo: PD/PT to update

 * @pe: byte offset of the PDE/PTE, relative to start of PDB/PTB

 * @addr: dst addr to write into pe

 * @count: number of page entries to update

 * @incr: increase next addr by incr bytes

 * @flags: hw access flags

 *

 * Reserve space in the IB, setup mapping buffer on demand and write commands to

 * the IB.

 Wait for PD/PT moves to be completed */

 estimate how many dw we need */

 set page commands needed */

 copy commands needed */

 for padding */

 Put the PTEs at the end of the IB. */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 AMD_CG_SUPPORT_ATHUB_MGCG */

 AMD_CG_SUPPORT_ATHUB_LS */

/*

 * Copyright 2016 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Christian KÃ¶nig

/**

 * DOC: mem_info_gtt_total

 *

 * The amdgpu driver provides a sysfs API for reporting current total size of

 * the GTT.

 * The file mem_info_gtt_total is used for this, and returns the total size of

 * the GTT block, in bytes

/**

 * DOC: mem_info_gtt_used

 *

 * The amdgpu driver provides a sysfs API for reporting current total amount of

 * used GTT.

 * The file mem_info_gtt_used is used for this, and returns the current used

 * size of the GTT block, in bytes

/**

 * amdgpu_gtt_mgr_has_gart_addr - Check if mem has address space

 *

 * @res: the mem object to check

 *

 * Check if a mem object has already address space allocated.

/**

 * amdgpu_gtt_mgr_new - allocate a new node

 *

 * @man: TTM memory type manager

 * @tbo: TTM BO we need this range for

 * @place: placement flags and restrictions

 * @res: the resulting mem object

 *

 * Dummy, allocate the node but no space for it yet.

/**

 * amdgpu_gtt_mgr_del - free ranges

 *

 * @man: TTM memory type manager

 * @res: TTM memory object

 *

 * Free the allocated GTT again.

/**

 * amdgpu_gtt_mgr_usage - return usage of GTT domain

 *

 * @man: TTM memory type manager

 *

 * Return how many bytes are used in the GTT domain

/**

 * amdgpu_gtt_mgr_recover - re-init gart

 *

 * @man: TTM memory type manager

 *

 * Re-init the gart for each known BO in the GTT.

/**

 * amdgpu_gtt_mgr_debug - dump VRAM table

 *

 * @man: TTM memory type manager

 * @printer: DRM printer to use

 *

 * Dump the table content using printk.

/**

 * amdgpu_gtt_mgr_init - init GTT manager and DRM MM

 *

 * @adev: amdgpu_device pointer

 * @gtt_size: maximum size of GTT

 *

 * Allocate and initialize the GTT manager.

/**

 * amdgpu_gtt_mgr_fini - free and destroy GTT manager

 *

 * @adev: amdgpu_device pointer

 *

 * Destroy and free the GTT manager, returns -EBUSY if ranges are still

 * allocated inside it.

/*

 * Copyright 2020 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/* helper function that allow only use sdma0 register offset

 double bits error (multiple bits) error detection is not supported */

		/* the SDMA_EDC_COUNTER register in each sdma instance

		 * shares the same sed shift_mask

 double bit error is not supported */

 double bit error is not supported */

	/*

	 * err_data->ue_count should be initialized to 0

	 * before calling into this function

	 *

	 * SDMA RAS supports single bit uncorrectable error detection.

	 * So, increment uncorrectable error count.

	/*

	 * SDMA RAS does not support correctable errors.

	 * Set ce count to 0.

 write 0 to EDC_COUNTER reg to clear sdma edc counters */

/*

 * Copyright 2018 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 Put DF on broadcast mode */

 Exit boradcast mode */

 AMD_CG_SUPPORT_DF_MGCG */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 UMC 6_1_2 registers */

 UMC 6_1_1 registers */

 select the lower chip */

 clear lower chip error count */

 select the higher chip */

 clear higher chip error count */

 UMC 6_1_2 registers */

 UMC 6_1_1 registers */

 select the lower chip and check the error count */

 select the higher chip and check the err counter */

	/* check for SRAM correctable error

 UMC 6_1_2 registers */

 UMC 6_1_1 registers */

 check the MCUMC_STATUS */

 UMC 6_1_2 registers */

 UMC 6_1_1 registers */

 clear umc status */

 calculate error address if ue/ce error is detected */

 the lowest lsb bits should be ignored */

 translate umc channel address to soc pa, 3 parts are included */

 we only save ue error information currently, ce is skipped */

 page frame address is saved */

 clear umc status */

 UMC 6_1_2 registers */

 UMC 6_1_1 registers */

 select the lower chip and check the error count */

 set ce error interrupt type to APIC based interrupt */

 set error count to initial value */

 select the higher chip and check the err counter */

/*

 * Copyright 2016 Advanced Micro Devices, Inc.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

/**

 * vce_v4_0_ring_get_rptr - get read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware read pointer

/**

 * vce_v4_0_ring_get_wptr - get write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware write pointer

/**

 * vce_v4_0_ring_set_wptr - set write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the write pointer to the hardware

 XXX check if swapping is necessary on BE */

 1, write to vce_mmsch_vf_ctx_addr_lo/hi register with GPU mc addr of memory descriptor location */

 2, update vmid of descriptor */

 use domain0 for MM scheduler */

 3, notify mmsch about the size of this descriptor */

 4, set resp to zero */

 5, kick off the initialization and wait until VCE_MMSCH_VF_MAILBOX_RESP becomes non-zero */

 BEGING OF MC_RESUME */

 end of MC_RESUME */

 clear BUSY flag */

 add end packet */

/**

 * vce_v4_0_start - start VCE block

 *

 * @adev: amdgpu_device pointer

 *

 * Setup and start the VCE block

 clear BUSY flag */

 Disable VCPU */

 hold on ECPU */

 clear VCE_STATUS */

 Set Clock-Gating off */

	/* if (adev->cg_flags & AMD_CG_SUPPORT_VCE_MGCG)

		vce_v4_0_set_vce_sw_clock_gating(adev, false);

 currently only VCN0 support SRIOV */

 DOORBELL only works under SRIOV */

			/* currently only use the first encoding ring for sriov,

			 * so set unused location for other unused rings.

 free MM table */

 vce_v4_0_wait_for_idle(handle); */

 full access mode, so don't touch any VCE register */

	/*

	 * Proper cleanups before halting the HW engine:

	 *   - cancel the delayed idle work

	 *   - enable powergating

	 *   - enable clockgating

	 *   - disable dpm

	 *

	 * TODO: to align with the VCN implementation, move the

	 * jobs for clockgating/powergating/dpm setting to

	 * ->set_powergating_state().

 needed for driver unload*/

 AUTO_BUSY */

 RB0_BUSY */

 RB1_BUSY */

	/* According to VCE team , we should use VCE_STATUS instead

	 * SRBM_STATUS.VCE_BUSY bit for busy status checking.

	 * GRBM_GFX_INDEX.INSTANCE_INDEX is used to specify which VCE

	 * instance's registers are accessed

	 * (0 for 1st instance, 10 for 2nd instance).

	 *

	 *VCE_STATUS

	 *|UENC|ACPI|AUTO ACTIVE|RB1 |RB0 |RB2 |          |FW_LOADED|JOB |

	 *|----+----+-----------+----+----+----+----------+---------+----|

	 *|bit8|bit7|    bit6   |bit5|bit4|bit3|   bit2   |  bit1   |bit0|

	 *

	 * VCE team suggest use bit 3--bit 6 for busy status check

 Wait a little for things to settle down */

 Set Override to disable Clock Gating */

	/* This function enables MGCG which is controlled by firmware.

	   With the clocks in the gated state the core is still

	   accessible but the firmware will throttle the clocks on the

	   fly as necessary.

 Program VCE Instance 0 or 1 if not harvested */

 initialize VCE_CLOCK_GATING_A: Clock ON/OFF delay */

 initialize VCE_UENC_CLOCK_GATING: Clock ON/OFF delay */

	/* This doesn't actually powergate the VCE block.

	 * That's done in the dpm code via the SMC.  This

	 * just re-inits the block as necessary.  The actual

	 * gating still happens in the dpm code.  We should

	 * revisit this when there is a cleaner line between

	 * the smc and the hw blocks

 wait for reg writes */

 vce_v4_0_is_idle */,

 vce_v4_0_wait_for_idle */,

 vce_v4_0_check_soft_reset */,

 vce_v4_0_pre_soft_reset */,

 vce_v4_0_soft_reset */,

 vce_v4_0_post_soft_reset */,

 vce_v4_0_emit_vm_flush */

 amdgpu_vce_ring_emit_fence x2 vm fence */

 vce_v4_0_ring_insert_end */

 vce_v4_0_ring_emit_ib */

/*

 * Copyright 2016 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

	/*

	 * The only chips with SDMAv4 and ULV are VG10 and VG20.

	 * Server SKUs take a different hysteresis setting from other SKUs.

		/* arcturus shares the same FW memory across

/**

 * sdma_v4_0_init_microcode - load ucode images from disk

 *

 * @adev: amdgpu_device pointer

 *

 * Use the firmware interface to load the ucode images into

 * the driver (not loaded into hw).

 * Returns 0 on success, error on failure.

 emulation only, won't work on real chip

 vega10 real chip need to use PSP to load firmware

			/* Acturus & Aldebaran will leverage the same FW memory

/**

 * sdma_v4_0_ring_get_rptr - get the current read pointer

 *

 * @ring: amdgpu ring pointer

 *

 * Get the current rptr from the hardware (VEGA10+).

 XXX check if swapping is necessary on BE */

/**

 * sdma_v4_0_ring_get_wptr - get the current write pointer

 *

 * @ring: amdgpu ring pointer

 *

 * Get the current wptr from the hardware (VEGA10+).

 XXX check if swapping is necessary on BE */

/**

 * sdma_v4_0_ring_set_wptr - commit the write pointer

 *

 * @ring: amdgpu ring pointer

 *

 * Write the wptr back to the hardware (VEGA10+).

 XXX check if swapping is necessary on BE */

/**

 * sdma_v4_0_page_ring_get_wptr - get the current write pointer

 *

 * @ring: amdgpu ring pointer

 *

 * Get the current wptr from the hardware (VEGA10+).

 XXX check if swapping is necessary on BE */

/**

 * sdma_v4_0_page_ring_set_wptr - commit the write pointer

 *

 * @ring: amdgpu ring pointer

 *

 * Write the wptr back to the hardware (VEGA10+).

 XXX check if swapping is necessary on BE */

/**

 * sdma_v4_0_ring_emit_ib - Schedule an IB on the DMA engine

 *

 * @ring: amdgpu ring pointer

 * @job: job to retrieve vmid from

 * @ib: IB object to schedule

 * @flags: unused

 *

 * Schedule an IB in the DMA ring (VEGA10).

 IB packet must end on a 8 DW boundary */

 base must be 32 byte aligned */

 == */

 memory */

 registers */

 reference */

 mask */

 retry count, poll interval */

/**

 * sdma_v4_0_ring_emit_hdp_flush - emit an hdp flush on the DMA ring

 *

 * @ring: amdgpu ring pointer

 *

 * Emit an hdp flush packet on the requested DMA ring.

/**

 * sdma_v4_0_ring_emit_fence - emit a fence on the DMA ring

 *

 * @ring: amdgpu ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Add a DMA fence packet to the ring to write

 * the fence seq number and DMA trap packet to generate

 * an interrupt if needed (VEGA10).

 write the fence */

 zero in first two bits */

 optionally write high bits as well */

 zero in first two bits */

 generate an interrupt */

/**

 * sdma_v4_0_gfx_stop - stop the gfx async dma engines

 *

 * @adev: amdgpu_device pointer

 *

 * Stop the gfx async dma ring buffers (VEGA10).

/**

 * sdma_v4_0_rlc_stop - stop the compute async dma engines

 *

 * @adev: amdgpu_device pointer

 *

 * Stop the compute async dma queues (VEGA10).

 XXX todo */

/**

 * sdma_v4_0_page_stop - stop the page async dma engines

 *

 * @adev: amdgpu_device pointer

 *

 * Stop the page async dma ring buffers (VEGA10).

/**

 * sdma_v4_0_ctx_switch_enable - stop the async dma engines context switch

 *

 * @adev: amdgpu_device pointer

 * @enable: enable/disable the DMA MEs context switch.

 *

 * Halt or unhalt the async dma engines context switch (VEGA10).

		/*

		 * Enable SDMA utilization. Its only supported on

		 * Arcturus for the moment and firmware version 14

		 * and above.

 Extend page fault timeout to avoid interrupt storm */

/**

 * sdma_v4_0_enable - stop the async dma engines

 *

 * @adev: amdgpu_device pointer

 * @enable: enable/disable the DMA MEs.

 *

 * Halt or unhalt the async dma engines (VEGA10).

/*

 * sdma_v4_0_rb_cntl - get parameters for rb_cntl

 Set ring buffer size in dwords */

/**

 * sdma_v4_0_gfx_resume - setup and start the async dma engines

 *

 * @adev: amdgpu_device pointer

 * @i: instance to resume

 *

 * Set up the gfx DMA ring buffers and enable them (VEGA10).

 * Returns 0 for success, error for failure.

 Initialize the ring buffer's read and write pointers */

 set the wb address whether it's enabled or not */

 before programing wptr to a less value, need set minor_ptr_update first */

 set minor_ptr_update to 0 after wptr programed */

 setup the wptr shadow polling */

 enable DMA RB */

 enable DMA IBs */

/**

 * sdma_v4_0_page_resume - setup and start the async dma engines

 *

 * @adev: amdgpu_device pointer

 * @i: instance to resume

 *

 * Set up the page DMA ring buffers and enable them (VEGA10).

 * Returns 0 for success, error for failure.

 Initialize the ring buffer's read and write pointers */

 set the wb address whether it's enabled or not */

 before programing wptr to a less value, need set minor_ptr_update first */

 paging queue doorbell range is setup at sdma_v4_0_gfx_resume */

 set minor_ptr_update to 0 after wptr programed */

 setup the wptr shadow polling */

 enable DMA RB */

 enable DMA IBs */

 enable idle interrupt */

 disable idle interrupt */

 Enable HW based PG. */

 enable interrupt */

 Configure hold time to filter in-valid power on/off request. Use default right now */

 Configure switch time for hysteresis purpose. Use default right now */

/**

 * sdma_v4_0_rlc_resume - setup and start the async dma engines

 *

 * @adev: amdgpu_device pointer

 *

 * Set up the compute DMA queues and enable them (VEGA10).

 * Returns 0 for success, error for failure.

/**

 * sdma_v4_0_load_microcode - load the sDMA ME ucode

 *

 * @adev: amdgpu_device pointer

 *

 * Loads the sDMA0/1 ucode.

 * Returns 0 for success, -EINVAL if the ucode is not available.

 halt the MEs */

/**

 * sdma_v4_0_start - setup and start the async dma engines

 *

 * @adev: amdgpu_device pointer

 *

 * Set up the DMA engines and enable them (VEGA10).

 * Returns 0 for success, error for failure.

 unhalt the MEs */

 enable sdma ring preemption */

 start the gfx rings and rlc compute queues */

 set utc l1 enable flag always to 1 */

 unhalt engine */

/**

 * sdma_v4_0_ring_test_ring - simple async dma engine test

 *

 * @ring: amdgpu_ring structure holding ring information

 *

 * Test the DMA engine by writing using it to write an

 * value to memory. (VEGA10).

 * Returns 0 for success, error for failure.

/**

 * sdma_v4_0_ring_test_ib - test an IB on the DMA engine

 *

 * @ring: amdgpu_ring structure holding ring information

 * @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT

 *

 * Test a simple IB in the DMA ring (VEGA10).

 * Returns 0 on success, error on failure.

/**

 * sdma_v4_0_vm_copy_pte - update PTEs by copying them from the GART

 *

 * @ib: indirect buffer to fill with commands

 * @pe: addr of the page entry

 * @src: src addr to copy from

 * @count: number of page entries to update

 *

 * Update PTEs by copying them from the GART using sDMA (VEGA10).

 src/dst endian swap */

/**

 * sdma_v4_0_vm_write_pte - update PTEs by writing them manually

 *

 * @ib: indirect buffer to fill with commands

 * @pe: addr of the page entry

 * @value: dst addr to write into pe

 * @count: number of page entries to update

 * @incr: increase next addr by incr bytes

 *

 * Update PTEs by writing them manually using sDMA (VEGA10).

/**

 * sdma_v4_0_vm_set_pte_pde - update the page tables using sDMA

 *

 * @ib: indirect buffer to fill with commands

 * @pe: addr of the page entry

 * @addr: dst addr to write into pe

 * @count: number of page entries to update

 * @incr: increase next addr by incr bytes

 * @flags: access flags

 *

 * Update the page tables using sDMA (VEGA10).

 for physically contiguous pages (vram) */

 dst addr */

 mask */

 value */

 increment size */

 number of entries */

/**

 * sdma_v4_0_ring_pad_ib - pad the IB to the required number of dw

 *

 * @ring: amdgpu_ring structure holding ring information

 * @ib: indirect buffer to fill with padding

/**

 * sdma_v4_0_ring_emit_pipeline_sync - sync the pipeline

 *

 * @ring: amdgpu_ring pointer

 *

 * Make sure all previous operations are completed (CIK).

 wait for idle */

/**

 * sdma_v4_0_ring_emit_vm_flush - vm flush using sDMA

 *

 * @ring: amdgpu_ring pointer

 * @vmid: vmid number to use

 * @pd_addr: address

 *

 * Update the page table base and flush the VM TLB

 * using sDMA (VEGA10).

return fw_version >= 31;*/

 TODO: Page queue breaks driver reload under SRIOV */

 SDMA trap event */

 SDMA SRAM ECC event */

 SDMA VM_HOLE/DOORBELL_INV/POLL_TIMEOUT/SRBM_WRITE_PROTECTION event*/

 doorbell size is 2 dwords, get DWORD offset */

			/* paging queue use same doorbell index/routing as gfx queue

			 * with 0x400 (4096 dwords) offset on second doorbell page

 todo */

 XXX compute */

	/* When âFull RASâ is enabled, the per-IP interrupt sources should

	 * be disabled and the driver should only look for the aggregated

	 * interrupt via sync flood

 1-not override: enable sdma mem light sleep */

 0-override:disable sdma mem light sleep */

 AMD_CG_SUPPORT_SDMA_MGCG */

 AMD_CG_SUPPORT_SDMA_LS */

 sdma_v4_0_ring_emit_hdp_flush */

 hdp invalidate */

 sdma_v4_0_ring_emit_pipeline_sync */

 sdma_v4_0_ring_emit_vm_flush */

 sdma_v4_0_ring_emit_fence x3 for user fence, vm fence */

 sdma_v4_0_ring_emit_ib */

/*

 * On Arcturus, SDMA instance 5~7 has a different vmhub type(AMDGPU_MMHUB_1).

 * So create a individual constant ring_funcs for those instances.

 sdma_v4_0_ring_emit_hdp_flush */

 hdp invalidate */

 sdma_v4_0_ring_emit_pipeline_sync */

 sdma_v4_0_ring_emit_vm_flush */

 sdma_v4_0_ring_emit_fence x3 for user fence, vm fence */

 sdma_v4_0_ring_emit_ib */

 sdma_v4_0_ring_emit_hdp_flush */

 hdp invalidate */

 sdma_v4_0_ring_emit_pipeline_sync */

 sdma_v4_0_ring_emit_vm_flush */

 sdma_v4_0_ring_emit_fence x3 for user fence, vm fence */

 sdma_v4_0_ring_emit_ib */

 sdma_v4_0_ring_emit_hdp_flush */

 hdp invalidate */

 sdma_v4_0_ring_emit_pipeline_sync */

 sdma_v4_0_ring_emit_vm_flush */

 sdma_v4_0_ring_emit_fence x3 for user fence, vm fence */

 sdma_v4_0_ring_emit_ib */

For Arcturus and Aldebaran, add another 4 irq handler*/

/**

 * sdma_v4_0_emit_copy_buffer - copy buffer using the sDMA engine

 *

 * @ib: indirect buffer to copy to

 * @src_offset: src GPU address

 * @dst_offset: dst GPU address

 * @byte_count: number of bytes to xfer

 * @tmz: if a secure copy should be used

 *

 * Copy GPU buffers using the DMA engine (VEGA10/12).

 * Used by the amdgpu ttm implementation to move pages if

 * registered as the asic copy callback.

 src/dst endian swap */

/**

 * sdma_v4_0_emit_fill_buffer - fill buffer using the sDMA engine

 *

 * @ib: indirect buffer to copy to

 * @src_data: value to write to buffer

 * @dst_offset: dst GPU address

 * @byte_count: number of bytes to xfer

 *

 * Fill GPU buffers using the DMA engine (VEGA10/12).

 double bits error (multiple bits) error detection is not supported */

		/* the SDMA_EDC_COUNTER register in each sdma instance

		 * shares the same sed shift_mask

 double bit error is not supported */

	/* err_data->ce_count should be initialized to 0

	/* double bit error is not supported

 read back edc counter registers to clear the counters */

/*

 * Copyright 2015 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Alex Deucher

	/* The indirect buffer packet must end on an 8 DW boundary in the DMA ring.

	 * Pad as necessary with NOPs.

/**

 * si_dma_ring_emit_fence - emit a fence on the DMA ring

 *

 * @ring: amdgpu ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Add a DMA fence packet to the ring to write

 * the fence seq number and DMA trap packet to generate

 * an interrupt if needed (VI).

 write the fence */

 optionally write high bits as well */

 generate an interrupt */

 dma0 */

 Set ring buffer size in dwords */

 Initialize the ring buffer's read and write pointers */

 enable DMA IBs */

/**

 * si_dma_ring_test_ring - simple async dma engine test

 *

 * @ring: amdgpu_ring structure holding ring information

 *

 * Test the DMA engine by writing using it to write an

 * value to memory. (VI).

 * Returns 0 for success, error for failure.

/**

 * si_dma_ring_test_ib - test an IB on the DMA engine

 *

 * @ring: amdgpu_ring structure holding ring information

 * @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT

 *

 * Test a simple IB in the DMA ring (VI).

 * Returns 0 on success, error on failure.

/**

 * si_dma_vm_copy_pte - update PTEs by copying them from the GART

 *

 * @ib: indirect buffer to fill with commands

 * @pe: addr of the page entry

 * @src: src addr to copy from

 * @count: number of page entries to update

 *

 * Update PTEs by copying them from the GART using DMA (SI).

/**

 * si_dma_vm_write_pte - update PTEs by writing them manually

 *

 * @ib: indirect buffer to fill with commands

 * @pe: addr of the page entry

 * @value: dst addr to write into pe

 * @count: number of page entries to update

 * @incr: increase next addr by incr bytes

 *

 * Update PTEs by writing them manually using DMA (SI).

/**

 * si_dma_vm_set_pte_pde - update the page tables using sDMA

 *

 * @ib: indirect buffer to fill with commands

 * @pe: addr of the page entry

 * @addr: dst addr to write into pe

 * @count: number of page entries to update

 * @incr: increase next addr by incr bytes

 * @flags: access flags

 *

 * Update the page tables using sDMA (CIK).

 for physically contiguous pages (vram) */

 dst addr */

 mask */

 value */

 increment size */

/**

 * si_dma_ring_pad_ib - pad the IB to the required number of dw

 *

 * @ring: amdgpu_ring pointer

 * @ib: indirect buffer to fill with padding

 *

/**

 * si_dma_ring_emit_pipeline_sync - sync the pipeline

 *

 * @ring: amdgpu_ring pointer

 *

 * Make sure all previous operations are completed (CIK).

 wait for idle */

 Poll memory */

 retry, addr_hi */

 mask */

 value */

 func(equal) | poll interval */

/**

 * si_dma_ring_emit_vm_flush - cik vm flush using sDMA

 *

 * @ring: amdgpu_ring pointer

 * @vmid: vmid number to use

 * @pd_addr: address

 *

 * Update the page table base and flush the VM TLB

 * using sDMA (VI).

 wait for invalidate to complete */

 retry */

 mask */

 value */

 func(always) | poll interval */

 DMA0 trap event */

 DMA1 trap event */

 hdp flush / invalidate */

 si_dma_ring_emit_pipeline_sync */

 si_dma_ring_emit_vm_flush */

 si_dma_ring_emit_fence x3 for user fence, vm fence */

 si_dma_ring_emit_ib */

/**

 * si_dma_emit_copy_buffer - copy buffer using the sDMA engine

 *

 * @ib: indirect buffer to copy to

 * @src_offset: src GPU address

 * @dst_offset: dst GPU address

 * @byte_count: number of bytes to xfer

 * @tmz: is this a secure operation

 *

 * Copy GPU buffers using the DMA engine (VI).

 * Used by the amdgpu ttm implementation to move pages if

 * registered as the asic copy callback.

/**

 * si_dma_emit_fill_buffer - fill buffer using the sDMA engine

 *

 * @ib: indirect buffer to copy to

 * @src_data: value to write to buffer

 * @dst_offset: dst GPU address

 * @byte_count: number of bytes to xfer

 *

 * Fill GPU buffers using the DMA engine (VI).

/*

 * Copyright 2016 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

CPC*/

 CPF*/

 CPG*/

 GDS*/

 SPI*/

 SQ*/

 VGPR = SP*/

 SQC (3 ranges)*/

 SQC range 0*/

 SQC range 1*/

 SQC range 2*/

 TA*/

 TCA*/

 TCC (5 sub-ranges)*/

 TCC range 0*/

 TCC range 1*/

 TCC range 2*/

 TCC range 3*/

 TCC range 4*/

 TCI*/

 TCP*/

 TD*/

 EA (3 sub-ranges)*/

 EA range 0*/

 EA range 1*/

 EA range 2*/

 UTC VM L2 bank*/

 UTC VM walker*/

 UTC ATC L2 2MB cache*/

 UTC ATC L2 4KB cache*/

 vmid_mask:0* queue_type:0 (KIQ) */

 queue mask lo */

 queue mask hi */

 gws mask lo */

 gws mask hi */

 oac mask */

 gds heap base:0, gds heap size:0 */

 Q_sel:0, vmid:0, vidmem: 1, engine:0, num_Q:1*/

 Q_sel: 0, vmid: 0, engine: 0, num_Q: 1 */

 Queue_Sel */

 VMID */

queue_type: normal compute queue */

 alloc format: all_on_one_pipe */

 num_queues: must be 1 */

 Q_sel: 0, vmid: 0, engine: 0, num_Q: 1 */

 Q_sel: 0, vmid: 0, engine: 0, num_Q: 1 */

 for renoir, don't need common goldensetting */

 memory (1) or register (0) */

 wait */

 equal */

 Dword align */

 poll interval */

bugzilla.kernel.org/show_bug.cgi?id=204689 */

bugzilla.kernel.org/show_bug.cgi?id=207171 */

 GFXOFF is unstable on C6 parts with a VBIOS 113-RAVEN-114 */

	/*

	 * For Picasso && AM4 SOCKET board, we use picasso_rlc_am4.bin

	 * instead of picasso_rlc.bin.

	 * Judgment method:

	 * PCO AM4: revision >= 0xC8 && revision <= 0xCF

	 *          or revision >= 0xD8 && revision <= 0xDF

	 * otherwise is PCO FP5

		/**

		*SMC is loaded by SBIOS on APU and it's able to get the SMU version directly.

			/* TODO: Determine if MEC2 JT FW loading can be removed

 No CPG in Arcturus */

 begin clear state */

 context control state */

 end clear state */

 clear state */

 set mmRLC_LB_THR_CONFIG_1/2/3/4 */

 set mmRLC_LB_CNTR_INIT = 0x0000_0000 */

 set mmRLC_LB_CNTR_MAX = 0x0000_0500 */

 set mmRLC_LB_INIT_CU_MASK thru broadcast mode to enable all SE/SH*/

 set mmRLC_LB_PARAMS = 0x003F_1006 */

 set mmRLC_GPM_GENERAL_7[31-16] = 0x00C0 */

	/*

	 * RLC_LB_ALWAYS_ACTIVE_CU_MASK = 0xF (4 CUs AON for Raven),

	 * programmed in gfx_v9_0_init_always_on_cu_mask()

	/* set RLC_LB_CNTL = 0x8000_0095, 31 bit is reserved,

 set mmRLC_LB_THR_CONFIG_1/2/3/4 */

 set mmRLC_LB_CNTR_INIT = 0x0000_0000 */

 set mmRLC_LB_CNTR_MAX = 0x0000_0500 */

 set mmRLC_LB_INIT_CU_MASK thru broadcast mode to enable all SE/SH*/

 set mmRLC_LB_PARAMS = 0x003F_1006 */

 set mmRLC_GPM_GENERAL_7[31-16] = 0x00C0 */

	/*

	 * RLC_LB_ALWAYS_ACTIVE_CU_MASK = 0xFFF (12 CUs AON),

	 * programmed in gfx_v9_0_init_always_on_cu_mask()

	/* set RLC_LB_CNTL = 0x8000_0095, 31 bit is reserved,

 init clear state block */

 TODO: double check the cp_table_size for RV */

 JT + GDS */

 init spm vmid with 0xf */

 take ownership of the relevant compute queues */

 type 1 wave data */

 check vbios table if gpu info is not available */

 check vbios table if gpu info is not available */

 mec0 is me1 */

 type-2 packets are deprecated on MEC, use type-3 instead */

 EOP Event */

 Privileged reg */

 Privileged inst */

 ECC error */

 FUE error */

 set up the gfx ring */

 set up the compute queues - allocate horizontally across pipes */

 create MQD for all compute queues as wel as KIQ for SRIOV case */

 TODO */

	/*

	 * Configure apertures:

	 * LDS:         0x60000000'00000000 - 0x60000001'00000000 (4GB)

	 * Scratch:     0x60000001'00000000 - 0x60000002'00000000 (4GB)

	 * GPUVM:       0x60010000'00000000 - 0x60020000'00000000 (1TB)

 CP and shaders */

	/* Initialize all compute VMIDs to have no GDS, GWS, or OA

	/*

	 * Initialize all compute and user-gfx VMIDs to have no GDS, GWS, or OA

	 * access. Compute VMIDs should be enabled by FW for target VMIDs,

	 * the driver can enable them for graphics. VMID0 should maintain

	 * access so that HWS firmware can save/restore entries.

 XXX SH_MEM regs */

 where to put LDS, scratch, GPUVM in FSA64 space */

 CP and shaders */

 These interrupts should be enabled to drive DS clock */

 csib */

 look for the matching indice */

 setup unique_indirect_regs array and indirect_start_offsets array */

 enable auto inc in case it is disabled */

 write register_restore table to offset 0x0 using RLC_SRM_ARAM_ADDR/DATA */

 load indirect register */

 direct register portion */

 indirect register portion */

 set save/restore list size */

 write the starting offsets to RLC scratch ram */

 load unique indirect regs*/

 enable GFXIP control over CGPG */

 update status */

 restore GFXIP control over GCPG */

 init IDLE_POLL_COUNT = 60 */

 init RLC PG Delay */

 program GRBM_REG_SAVE_GFX_IDLE_THRESHOLD to 0x55f0 */

 read any GFX register to wake up GFX */

	/*

	 * Rlc save restore list is workable since v2_1.

	 * And it's needed by gfxoff feature.

 carrizo do enable cp interrupt after cp inited */

 RLC_GPM_GENERAL_6 : RLC Ucode version */

		/* RLC_GPM_TIMER_INT_3 : Timer interval in RefCLK cycles,

		/* RLC_GPM_GENERAL_12 : Minimum gap between wptr and rptr

		 * to disable the page fault retry interrupts, default is

 disable CG */

 legacy rlc firmware loading */

 PFP */

 CE */

 ME */

 init the CP */

 Set the write pointer delay */

 set the RB to use vmid 0 */

 Set ring buffer size */

 Initialize the ring buffer's write pointers */

 set the wb address wether it's enabled or not */

 start the ring */

 MEC1 */

 Todo : Loading MEC2 firmware is only necessary if MEC2 should run different microcode than MEC1. */

 KIQ functions */

 tell RLC which is KIQ queue */

 set the EOP size, register value is 2^(EOP_SIZE+1) dwords */

 enable doorbell? */

 disable the queue if it's active */

 set the pointer to the MQD */

 set MQD vmid to 0 */

 set the pointer to the HQD, this is similar CP_RB0_BASE/_HI */

 set up the HQD, this is similar to CP_RB0_CNTL */

 set the wb address whether it's enabled or not */

 only used if CP_PQ_WPTR_POLL_CNTL.CP_PQ_WPTR_POLL_CNTL__EN_MASK=1 */

 enable the doorbell if requested */

 reset read and write pointers, similar to CP_RB0_WPTR/_RPTR */

 set the vmid for the queue */

 set MIN_IB_AVAIL_SIZE */

 set static priority for a queue/ring */

	/* map_queues packet doesn't need activate the queue,

	 * so only kiq need set this field.

 disable wptr polling */

 set the EOP size, register value is 2^(EOP_SIZE+1) dwords */

 enable doorbell? */

 disable the queue if it's active */

 set the pointer to the MQD */

 set MQD vmid to 0 */

 set the pointer to the HQD, this is similar CP_RB0_BASE/_HI */

 set up the HQD, this is similar to CP_RB0_CNTL */

 set the wb address whether it's enabled or not */

 only used if CP_PQ_WPTR_POLL_CNTL.CP_PQ_WPTR_POLL_CNTL__EN_MASK=1 */

 enable the doorbell if requested */

		/* If GC has entered CGPG, ringing doorbell > first page

		 * doesn't wakeup GC. Enlarge CP_MEC_DOORBELL_RANGE_UPPER to

		 * workaround this issue. And this change has to align with firmware

		 * update.

 reset read and write pointers, similar to CP_RB0_WPTR/_RPTR */

 set the vmid for the queue */

 activate the queue */

 disable the queue if it's active */

 Manual disable if dequeue request times out */

	/* GPU could be in bad state during probe, driver trigger the reset

	 * after load the SMU, in this case , the mqd is not be initialized.

	 * driver need to re-init the mqd.

	 * check mqd->cp_hqd_pq_control since this value should not be 0

 for GPU_RESET case , reset MQD to a clean status */

 reset ring buffer */

	/* Same as above kiq init, driver need to re-init the mqd if mqd->cp_hqd_pq_control

	 * is not be initialized before

 for GPU_RESET case */

 reset MQD to a clean status */

 reset ring buffer */

 legacy firmware loading */

 DF freeze and kcq disable will fail */

 disable KCQ to avoid CPC touch memory not valid anymore */

		/* must disable polling for SRIOV when hw finished, otherwise

		 * CPC engine may still keep fetching WB address which is already

		 * invalid after sw finished and trigger DMAR reading error in

		 * hypervisor side.

	/* Use deinitialize sequence from CAIL when unbinding device from driver,

	 * otherwise KIQ is hanging when binding back

 Skip suspend with A+A reset */

 GRBM_STATUS */

 GRBM_STATUS2 */

 stop the rlc */

 Disable GFX parsing/prefetching */

 Disable MEC parsing/prefetching */

 Wait a little for things to settle down */

 src: register*/

 dst: memory */

 count sel */

 write confirm */

	/* don't wait anymore for gpu reset case because this way may

	 * block gpu_recover() routine forever, e.g. this virt_kiq_rreg

	 * is triggered in TTM and ttm_bo_lock_delayed_workqueue() will

	 * never return if we keep waiting in virt_kiq_rreg, which cause

	 * gpu_recover() hang there.

	 *

	 * also don't wait anymore for IRQ context

 GDS Base */

 GDS Size */

 GWS */

 OA */

/* When below register arrays changed, please update gpr_reg_size,

  and sec_ded_counter_reg_size in function gfx_v9_0_do_edc_gpr_workarounds,

 64KB LDS */

 64KB LDS */

 (80 GPRS) */

 (80 GPRS) */

 only support when RAS is enabled */

 only support when RAS is enabled */

 bail if the compute ring is not ready */

 VGPRS */

 SGPRS1 */

 SGPRS2 */

 allocate an indirect buffer to put the commands in */

 load the compute shaders */

 init the ib length to 0 */

 VGPR */

 write the register state for the compute dispatch */

 write the shader start address: mmCOMPUTE_PGM_LO, mmCOMPUTE_PGM_HI */

 write dispatch packet */

 x */

 y */

 z */

 write CS partial flush packet */

 SGPR1 */

 write the register state for the compute dispatch */

 write the shader start address: mmCOMPUTE_PGM_LO, mmCOMPUTE_PGM_HI */

 write dispatch packet */

 x */

 y */

 z */

 write CS partial flush packet */

 SGPR2 */

 write the register state for the compute dispatch */

 write the shader start address: mmCOMPUTE_PGM_LO, mmCOMPUTE_PGM_HI */

 write dispatch packet */

 x */

 y */

 z */

 write CS partial flush packet */

 shedule the ib on the ring */

 wait for the GPU to finish processing the IB */

	/*

	 * Temp workaround to fix the issue that CP firmware fails to

	 * update read pointer when CPDMA is writing clearing operation

	 * to GDS in suspend/resume sequence on several cards. So just

	 * limit this operation in cold boot sequence.

 requires IBs so do in late init after IB pool is initialized */

 if RLC is not enabled, do nothing */

 wait for RLC_SAFE_MODE */

 TODO: double check if we need to perform under safe mode */

 gfx_v9_0_enter_rlc_safe_mode(adev); */

 gfx_v9_0_exit_rlc_safe_mode(adev); */

 It is disabled by HW by default */

 1 - RLC_CGTT_MGCG_OVERRIDE */

 only for Vega10 & Raven1 */

 MGLS is a global flag to control all MGLS in GFX */

 2 - RLC memory Light sleep */

 3 - CP memory Light sleep */

 1 - MGCG_OVERRIDE */

 2 - disable MGLS in RLC */

 3 - disable MGLS in CP */

 Enable 3D CGCG/CGLS */

 write cmd to clear cgcg/cgls ov */

 unset CGCG override */

 update CGCG and CGLS override bits */

 enable 3Dcgcg FSM(0x0000363f) */

 set IDLE_POLL_COUNT(0x00900100) */

 Disable CGCG/CGLS */

 disable cgcg, cgls should be disabled */

 disable cgcg and cgls in FSM */

 unset CGCG override */

 update CGCG and CGLS override bits */

 enable cgcg FSM(0x0000363F) */

 set IDLE_POLL_COUNT(0x00900100) */

 reset CGCG/CGLS bits */

 disable cgcg and cgls in FSM */

		/* CGCG/CGLS should be enabled after MGCG/MGLS

		 * ===  MGCG + MGLS ===

 ===  CGCG /CGLS for GFX 3D Only === */

 ===  CGCG + CGLS === */

		/* CGCG/CGLS should be disabled before MGCG/MGLS

		 * ===  CGCG + CGLS ===

 ===  CGCG /CGLS for GFX 3D Only === */

 ===  MGCG + MGLS === */

 update gfx cgpg state */

 update mgcg state */

 AMD_CG_SUPPORT_GFX_MGCG */

 AMD_CG_SUPPORT_GFX_CGCG */

 AMD_CG_SUPPORT_GFX_CGLS */

 AMD_CG_SUPPORT_GFX_RLC_LS */

 AMD_CG_SUPPORT_GFX_CP_LS */

 AMD_CG_SUPPORT_GFX_3D_CGCG */

 AMD_CG_SUPPORT_GFX_3D_CGLS */

 gfx9 is 32bit rptr*/

 XXX check if swapping is necessary on BE */

 XXX check if swapping is necessary on BE */

 pfp */

 Dword align */

	/* Currently, there is a high possibility to get wave ID mismatch

	 * between ME and GDS, leading to a hw deadlock, because ME generates

	 * different wave IDs than the GDS expects. This situation happens

	 * randomly when at least 5 compute pipes use GDS ordered append.

	 * The wave IDs generated by ME are also wrong after suspend/resume.

	 * Those are probably bugs somewhere else in the kernel driver.

	 *

	 * Writing GDS_COMPUTE_MAX_WAVE_ID resets wave ID counters in ME and

	 * GDS to 0 for this ring (me/pipe).

 Dword align */

 RELEASE_MEM - flush caches, send int */

	/*

	 * the address should be Qword aligned if 64bit write, Dword

	 * aligned if only send 32bit data low (discard data high)

 compute doesn't have PFP */

 sync PFP to ME, otherwise we might get invalid PFP reads */

 gfx9 hardware is 32bit rptr */

 XXX check if swapping is necessary on BE */

 XXX check if swapping is necessary on BE */

 only DOORBELL method supported on gfx9 now */

 we only allocate 32bit for each seq wb address */

 write fence seq to the "addr" */

 set register to trigger INT */

 src_id is 178 */

 set load_enable otherwise this package is just NOPs */

 set load_global_config & load_global_uconfig */

 set load_cs_sh_regs */

 set load_per_context_state & load_gfx_sh_regs for GFX */

 set load_ce_ram if preamble presented */

		/* still load_ce_ram if this is the first time preamble presented

		 * although there is no context switch happens.

 discard following DWs if *cond_exec_gpu_addr==0 */

 patch dummy value later */

 src: register*/

 dst: memory */

 write confirm */

 no inc addr */

	/*

	 * amdgpu controls only the first MEC. That's why this function only

	 * handles the setting of interrupts for this specific MEC. All other

	 * pipes' interrupts are set by amdkfd.

			/* Per-queue interrupt is supported for MEC starting from VI.

			  * The interrupt can only be enabled/disabled per pipe instead of per queue.

 read back registers to clear the counters */

 ACQUIRE_MEM -make one or more surfaces valid for use by the subsequent operations */

 CP_COHER_CNTL */

 CP_COHER_SIZE */

 CP_COHER_SIZE_HI */

 CP_COHER_BASE */

 CP_COHER_BASE_HI */

 POLL_INTERVAL */

 mmSPI_WCL_PIPE_PERCENT_CS[0-7]_DEFAULT values are same */

	/* mmSPI_WCL_PIPE_PERCENT_GFX is 7 bit multiplier register to limit

	 * number of gfx waves. Setting 5 bit will make sure gfx only gets

	 * around 25% of gpu resources.

	/* Restrict waves for normal/low priority compute queues as well

	 * to get best QoS for high priority compute jobs.

	 *

	 * amdgpu controls only 1st ME(0-3 CS pipes).

 totally 242 maximum if 16 IBs */

 COND_EXEC */

 PIPELINE_SYNC */

 VM_FLUSH */

 FENCE for VM_FLUSH */

 GDS switch */

		4 + /* double SWITCH_BUFFER,

		       the first COND_EXEC jump to the place just

 COND_EXEC */

	HDP_flush */

	VGT_flush */

	CE_META */

	DE_META */

 CNTX_CTRL */

 HDP_INVL */

 FENCE x2 */

 SWITCH_BUFFER */

 gfx_v9_0_emit_mem_sync */

 gfx_v9_0_ring_emit_ib_gfx */

 gfx_v9_0_ring_emit_gds_switch */

 gfx_v9_0_ring_emit_hdp_flush */

 hdp invalidate */

 gfx_v9_0_ring_emit_pipeline_sync */

 gfx_v9_0_ring_emit_vm_flush */

 gfx_v9_0_ring_emit_fence x3 for user fence, vm fence */

 gfx_v9_0_emit_mem_sync */

 gfx_v9_0_emit_wave_limit for updating mmSPI_WCL_PIPE_PERCENT_GFX register */

 for updating 3 mmSPI_WCL_PIPE_PERCENT_CS registers */

 gfx_v9_0_ring_emit_ib_compute */

 gfx_v9_0_ring_emit_gds_switch */

 gfx_v9_0_ring_emit_hdp_flush */

 hdp invalidate */

 gfx_v9_0_ring_emit_pipeline_sync */

 gfx_v9_0_ring_emit_vm_flush */

 gfx_v9_0_ring_emit_fence_kiq x3 for user fence, vm fence */

 gfx_v9_0_ring_emit_ib_compute */

C5 ECC error and C9 FUE error*/

 init asci gds info */

		/* aldebaran removed all the GDS internal memory,

		 * only support GWS opcode in kernel, like barrier

 raven2 */

 raven1 */

 deprecated for Aldebaran, no usage at all */

 this really depends on the chip */

	/*

	 * 16 comes from bitmap array size 4*4, and it can cover all gfx9 ASICs

			/*

			 * The bitmap(and ao_cu_bitmap) in cu_info structure is

			 * 4x4 size array, and it's usually suitable for Vega

			 * ASICs which has 4*2 SE/SH layout.

			 * But for Arcturus, SE/SH layout is changed to 8*1.

			 * To mostly reduce the impact, we make it compatible

			 * with current bitmap array as below:

			 *    SE4,SH0 --> bitmap[0][1]

			 *    SE5,SH0 --> bitmap[1][1]

			 *    SE6,SH0 --> bitmap[2][1]

			 *    SE7,SH0 --> bitmap[3][1]

/*

 * Copyright 2020 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

	/* Before doing clock/power mode switch,

	/* HDP 5.0 doesn't support dynamic power mode switch,

 Already disabled above. The actions below are for "enabled" only */

 only one clock gating mode (LS/DS/SD) can be enabled */

 RC should not use shut down mode, fallback to ds  or ls if allowed */

		/* confirmed that IPH_MEM_POWER_CTRL_EN and RC_MEM_POWER_CTRL_EN have to

 disable IPH & RC clock override after clock/power mode changing */

 AMD_CG_SUPPORT_HDP_MGCG */

 AMD_CG_SUPPORT_HDP_LS/DS/SD */

/*

 * Copyright 2016 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

UVD_PG0_CC_UVD_HARVESTING

/**

 * uvd_v7_0_ring_get_rptr - get read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware read pointer

/**

 * uvd_v7_0_enc_ring_get_rptr - get enc read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware enc read pointer

/**

 * uvd_v7_0_ring_get_wptr - get write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware write pointer

/**

 * uvd_v7_0_enc_ring_get_wptr - get enc write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware enc write pointer

/**

 * uvd_v7_0_ring_set_wptr - set write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the write pointer to the hardware

/**

 * uvd_v7_0_enc_ring_set_wptr - set enc write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the enc write pointer to the hardware

 XXX check if swapping is necessary on BE */

/**

 * uvd_v7_0_enc_ring_test_ring - test if UVD ENC ring is working

 *

 * @ring: the engine to test on

 *

/**

 * uvd_v7_0_enc_get_create_msg - generate a UVD ENC create msg

 *

 * @ring: ring we should submit the msg to

 * @handle: session handle to use

 * @bo: amdgpu object for which we query the offset

 * @fence: optional fence to return

 *

 * Open up a stream for HW test

 session info */

 task info */

 op initialize */

/**

 * uvd_v7_0_enc_get_destroy_msg - generate a UVD ENC destroy msg

 *

 * @ring: ring we should submit the msg to

 * @handle: session handle to use

 * @bo: amdgpu object for which we query the offset

 * @fence: optional fence to return

 *

 * Close up a stream for HW test or if userspace failed to do so

 op close session */

/**

 * uvd_v7_0_enc_ring_test_ib - test if UVD ENC IBs are working

 *

 * @ring: the engine to test on

 * @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT

 *

 both instances are harvested, disable the block */

 UVD TRAP */

 UVD ENC TRAP */

				/* currently only use the first enconding ring for

				 * sriov, so set unused location for other unused rings.

/**

 * uvd_v7_0_hw_init - start and test UVD block

 *

 * @handle: handle used to pass amdgpu_device pointer

 *

 * Initialize the hardware, boot up the VCPU and do some testing

 Clear timeout status bits */

/**

 * uvd_v7_0_hw_fini - stop the hardware block

 *

 * @handle: handle used to pass amdgpu_device pointer

 *

 * Stop the UVD block, mark ring as not ready any more

 full access mode, so don't touch any UVD register */

	/*

	 * Proper cleanups before halting the HW engine:

	 *   - cancel the delayed idle work

	 *   - enable powergating

	 *   - enable clockgating

	 *   - disable dpm

	 *

	 * TODO: to align with the VCN implementation, move the

	 * jobs for clockgating/powergating/dpm setting to

	 * ->set_powergating_state().

 shutdown the UVD block */

/**

 * uvd_v7_0_mc_resume - memory controller programming

 *

 * @adev: amdgpu_device pointer

 *

 * Let the UVD memory controller know it's offsets

 1, write to vce_mmsch_vf_ctx_addr_lo/hi register with GPU mc addr of memory descriptor location */

 2, update vmid of descriptor */

 use domain0 for MM scheduler */

 3, notify mmsch about the size of this descriptor */

 4, set resp to zero */

 5, kick off the initialization and wait until VCE_MMSCH_VF_MAILBOX_RESP becomes non-zero */

 mc resume*/

 mc resume end*/

 disable clock gating */

 disable interupt */

 stall UMC and register bus before resetting VCPU */

 put LMI, VCPU, RBC etc... into reset */

 initialize UVD memory controller */

 take all subblocks out of reset, except VCPU */

 enable VCPU clock */

 enable master interrupt */

 clear the bit 4 of UVD_STATUS */

 force RBC into idle state */

 boot up the VCPU */

 enable UMC */

 add end packet */

/**

 * uvd_v7_0_start - start UVD block

 *

 * @adev: amdgpu_device pointer

 *

 * Setup and start the UVD block

 disable DPG */

 disable byte swapping */

 disable clock gating */

 disable interupt */

 stall UMC and register bus before resetting VCPU */

 put LMI, VCPU, RBC etc... into reset */

 initialize UVD memory controller */

 swap (8 in 32) RB and IB */

 take all subblocks out of reset, except VCPU */

 enable VCPU clock */

 enable UMC */

 boot up the VCPU */

 enable master interrupt */

 clear the bit 4 of UVD_STATUS */

 force RBC into idle state */

 set the write pointer delay */

 set the wb address */

 program the RB_BASE for ring buffer */

 Initialize the ring buffer's read and write pointers */

/**

 * uvd_v7_0_stop - stop UVD block

 *

 * @adev: amdgpu_device pointer

 *

 * stop the UVD block

 force RBC into idle state */

 Stall UMC and register bus before resetting VCPU */

 put VCPU into reset */

 disable VCPU clock */

 Unstall UMC and register bus */

/**

 * uvd_v7_0_ring_emit_fence - emit an fence & trap command

 *

 * @ring: amdgpu_ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Write a fence and a trap command to the ring.

/**

 * uvd_v7_0_enc_ring_emit_fence - emit an enc fence & trap command

 *

 * @ring: amdgpu_ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Write enc a fence and a trap command to the ring.

/**

 * uvd_v7_0_ring_emit_hdp_flush - skip HDP flushing

 *

 * @ring: amdgpu_ring pointer

 The firmware doesn't seem to like touching registers at this point. */

/**

 * uvd_v7_0_ring_test_ring - register write test

 *

 * @ring: amdgpu_ring pointer

 *

 * Test if we can successfully write to the context register

/**

 * uvd_v7_0_ring_patch_cs_in_place - Patch the IB for command submission.

 *

 * @p: the CS parser with the IBs

 * @ib_idx: which IB to patch

 *

 No patching necessary for the first instance */

/**

 * uvd_v7_0_ring_emit_ib - execute indirect buffer

 *

 * @ring: amdgpu_ring pointer

 * @job: job to retrieve vmid from

 * @ib: indirect buffer to execute

 * @flags: unused

 *

 * Write ring commands to execute the indirect buffer

/**

 * uvd_v7_0_enc_ring_emit_ib - enc execute indirect buffer

 *

 * @ring: amdgpu_ring pointer

 * @job: job to retrive vmid from

 * @ib: indirect buffer to execute

 * @flags: unused

 *

 * Write enc ring commands to execute the indirect buffer

 wait for reg writes */

 wait for reg writes */

 Wait a little for things to settle down */

 TODO

 disable HW gating and enable Sw gating */

 wait for STATUS to clear */

 enable HW gates because UVD is idle */

 uvd_v7_0_set_hw_clock_gating(adev); */

	/* This doesn't actually powergate the UVD block.

	 * That's done in the dpm code via the SMC.  This

	 * just re-inits the block as necessary.  The actual

	 * gating still happens in the dpm code.  We should

	 * revisit this when there is a cleaner line between

	 * the smc and the hw blocks

 needed for driver unload*/

 uvd_v7_0_is_idle */,

 uvd_v7_0_wait_for_idle */,

 uvd_v7_0_check_soft_reset */,

 uvd_v7_0_pre_soft_reset */,

 uvd_v7_0_soft_reset */,

 uvd_v7_0_post_soft_reset */,

 uvd_v7_0_set_powergating_state */,

 hdp invalidate */

 uvd_v7_0_ring_emit_vm_flush */

 uvd_v7_0_ring_emit_fence x2 vm fence */

 uvd_v7_0_ring_emit_ib */

 hdp flush / invalidate */

 uvd_v7_0_enc_ring_emit_vm_flush */

 uvd_v7_0_enc_ring_emit_fence x2 vm fence */

 uvd_v7_0_enc_ring_insert_end */

 uvd_v7_0_enc_ring_emit_ib */

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Interrupts

 * Starting with r6xx, interrupts are handled via a ring buffer.

 * Ring buffers are areas of GPU accessible memory that the GPU

 * writes interrupt vectors into and the host reads vectors out of.

 * There is a rptr (read pointer) that determines where the

 * host is currently reading, and a wptr (write pointer)

 * which determines where the GPU has written.  When the

 * pointers are equal, the ring is idle.  When the GPU

 * writes vectors to the ring buffer, it increments the

 * wptr.  When there is an interrupt, the host then starts

 * fetching commands and processing them until the pointers are

 * equal again at which point it updates the rptr.

/**

 * tonga_ih_enable_interrupts - Enable the interrupt ring buffer

 *

 * @adev: amdgpu_device pointer

 *

 * Enable the interrupt ring buffer (VI).

/**

 * tonga_ih_disable_interrupts - Disable the interrupt ring buffer

 *

 * @adev: amdgpu_device pointer

 *

 * Disable the interrupt ring buffer (VI).

 set rptr, wptr to 0 */

/**

 * tonga_ih_irq_init - init and enable the interrupt ring

 *

 * @adev: amdgpu_device pointer

 *

 * Allocate a ring buffer for the interrupt controller,

 * enable the RLC, disable interrupts, enable the IH

 * ring buffer and enable it (VI).

 * Called at device load and reume.

 * Returns 0 for success, errors for failure.

 disable irqs */

 setup interrupt control */

	/* INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi

	 * INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN

 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram */

 Ring Buffer base. [39:8] of 40-bit address of the beginning of the ring buffer*/

 Ring Buffer write pointer writeback. If enabled, IH_RB_WPTR register value is written to memory */

 set the writeback address whether it's enabled or not */

 set rptr, wptr to 0 */

 enable interrupts */

/**

 * tonga_ih_irq_disable - disable interrupts

 *

 * @adev: amdgpu_device pointer

 *

 * Disable interrupts on the hw (VI).

 Wait and acknowledge irq */

/**

 * tonga_ih_get_wptr - get the IH ring buffer wptr

 *

 * @adev: amdgpu_device pointer

 * @ih: IH ring buffer to fetch wptr

 *

 * Get the IH ring buffer wptr from either the register

 * or the writeback memory buffer (VI).  Also check for

 * ring buffer overflow and deal with it.

 * Used by cz_irq_process(VI).

 * Returns the value of the wptr.

 Double check that the overflow wasn't already cleared. */

	/* When a ring buffer overflow happen start parsing interrupt

	 * from the last not overwritten vector (wptr + 16). Hopefully

	 * this should allow us to catchup.

/**

 * tonga_ih_decode_iv - decode an interrupt vector

 *

 * @adev: amdgpu_device pointer

 * @ih: IH ring buffer to decode

 * @entry: IV entry to place decoded information into

 *

 * Decodes the interrupt vector at the current rptr

 * position and also advance the position.

 wptr/rptr are in bytes! */

 wptr/rptr are in bytes! */

/**

 * tonga_ih_set_rptr - set the IH ring buffer rptr

 *

 * @adev: amdgpu_device pointer

 * @ih: IH ring buffer to set rptr

 *

 * Set the IH ring buffer rptr.

 XXX check if swapping is necessary on BE */

 read MC_STATUS */

 Wait a little for things to settle down */

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * amdgpu_pll_reduce_ratio - fractional number reduction

 *

 * @nom: nominator

 * @den: denominator

 * @nom_min: minimum value for nominator

 * @den_min: minimum value for denominator

 *

 * Find the greatest common divisor and apply it on both nominator and

 * denominator, but make nominator and denominator are at least as large

 * as their minimum values.

 reduce the numbers to a simpler ratio */

 make sure nominator is large enough */

 make sure the denominator is large enough */

/**

 * amdgpu_pll_get_fb_ref_div - feedback and ref divider calculation

 *

 * @nom: nominator

 * @den: denominator

 * @post_div: post divider

 * @fb_div_max: feedback divider maximum

 * @ref_div_max: reference divider maximum

 * @fb_div: resulting feedback divider

 * @ref_div: resulting reference divider

 *

 * Calculate feedback and reference divider for a given post divider. Makes

 * sure we stay within the limits.

 limit reference * post divider to a maximum */

 get matching reference and feedback divider */

 limit fb divider to its maximum */

/**

 * amdgpu_pll_compute - compute PLL paramaters

 *

 * @pll: information about the PLL

 * @freq: requested frequency

 * @dot_clock_p: resulting pixel clock

 * @fb_div_p: resulting feedback divider

 * @frac_fb_div_p: fractional part of the feedback divider

 * @ref_div_p: resulting reference divider

 * @post_div_p: resulting reference divider

 *

 * Try to calculate the PLL parameters to generate the given frequency:

 * dot_clock = (ref_freq * feedback_div) / (ref_div * post_div)

 determine allowed feedback divider range */

 determine allowed ref divider range */

 determine allowed post divider range */

 represent the searched ratio as fractional number */

 reduce the numbers to a simpler ratio */

 now search for a post divider */

 get the feedback and reference divider for the optimal value */

 reduce the numbers to a simpler ratio once more */

 this also makes sure that the reference divider is large enough */

 avoid high jitter with small fractional dividers */

 and finally save the result */

/**

 * amdgpu_pll_get_use_mask - look up a mask of which pplls are in use

 *

 * @crtc: drm crtc

 *

 * Returns the mask of which PPLLs (Pixel PLLs) are in use.

/**

 * amdgpu_pll_get_shared_dp_ppll - return the PPLL used by another crtc for DP

 *

 * @crtc: drm crtc

 *

 * Returns the PPLL (Pixel PLL) used by another crtc/encoder which is

 * also in DP mode.  For DP, a single PPLL can be used for all DP

 * crtcs/encoders.

 for DP use the same PLL for all */

/**

 * amdgpu_pll_get_shared_nondp_ppll - return the PPLL used by another non-DP crtc

 *

 * @crtc: drm crtc

 *

 * Returns the PPLL (Pixel PLL) used by another non-DP crtc/encoder which can

 * be shared (i.e., same clock).

 check if we are already driving this connector with another crtc */

 if we are, return that pll */

 for non-DP check the clock */

/*

 * Copyright (C) 2019  Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included

 * in all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN

 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 invalidate using legacy mode on vmid*/

 Program the AGP BAR */

 Program the system aperture low logical page number. */

 Set default page address. */

 Program "protection fault". */

 Setup TLB control */

 UC, uncached */

	/* These registers are not accessible to VF-SRIOV.

	 * The PF will program them instead.

 Setup L2 cache */

 XXX for emulation, Refer to closed source code.*/

	/* These registers are not accessible to VF-SRIOV.

	 * The PF will program them instead.

 Send no-retry XNACK on fault to suppress VM fault storm. */

		/*

		 * GCMC_VM_FB_LOCATION_BASE/TOP is NULL for VF, becuase they are

		 * VF copy registers so vbios post doesn't program them, for

		 * SRIOV driver need to program them

 GART Enable. */

 Disable all tables */

 Setup TLB control */

 Setup L2 cache */

/**

 * gfxhub_v2_1_set_fault_enable_default - update GART/VM fault handling

 *

 * @adev: amdgpu_device pointer

 * @value: true redirects VM faults to the default page

	/* These registers are not accessible to VF-SRIOV.

	 * The PF will program them instead.

 PF_MAX_REGION=0 means xgmi is disabled */

 Get SA disabled bitmap from eFuse setting */

 Get SA disabled bitmap from VBIOS setting */

 Make sure not to report harvested SAs beyond the max SA count */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 invalidate using legacy mode on vmid*/

 Program the AGP BAR */

 Program the system aperture low logical page number. */

 Set default page address. */

 Program "protection fault". */

 Setup TLB control */

 UC, uncached */

	/* These registers are not accessible to VF-SRIOV.

	 * The PF will program them instead.

 Setup L2 cache */

 XXX for emulation, Refer to closed source code.*/

	/* These registers are not accessible to VF-SRIOV.

	 * The PF will program them instead.

 Send no-retry XNACK on fault to suppress VM fault storm. */

 GART Enable. */

 Disable all tables */

 Setup TLB control */

 Setup L2 cache */

/**

 * mmhub_v2_0_set_fault_enable_default - update GART/VM fault handling

 *

 * @adev: amdgpu_device pointer

 * @value: true redirects VM faults to the default page

	/* These registers are not accessible to VF-SRIOV.

	 * The PF will program them instead.

 AMD_CG_SUPPORT_MC_MGCG */

 AMD_CG_SUPPORT_MC_LS */

/*

 * Copyright 2013 Advanced Micro Devices, Inc.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * Authors: Christian KÃ¶nig <christian.koenig@amd.com>

 1 second timeout */

 Firmware Names */

/**

 * amdgpu_vce_sw_init - allocate memory, load vce firmware

 *

 * @adev: amdgpu_device pointer

 * @size: size for the new BO

 *

 * First step to get VCE online, allocate memory and load the firmware

/**

 * amdgpu_vce_sw_fini - free memory

 *

 * @adev: amdgpu_device pointer

 *

 * Last step on VCE teardown, free firmware memory

/**

 * amdgpu_vce_entity_init - init entity

 *

 * @adev: amdgpu_device pointer

 *

/**

 * amdgpu_vce_suspend - unpin VCE fw memory

 *

 * @adev: amdgpu_device pointer

 *

 TODO: suspending running encoding sessions isn't supported */

/**

 * amdgpu_vce_resume - pin VCE fw memory

 *

 * @adev: amdgpu_device pointer

 *

/**

 * amdgpu_vce_idle_work_handler - power off VCE

 *

 * @work: pointer to work structure

 *

 * power of VCE when it's not used any more

/**

 * amdgpu_vce_ring_begin_use - power up VCE

 *

 * @ring: amdgpu ring

 *

 * Make sure VCE is powerd up when we want to use it

/**

 * amdgpu_vce_ring_end_use - power VCE down

 *

 * @ring: amdgpu ring

 *

 * Schedule work to power VCE down again

/**

 * amdgpu_vce_free_handles - free still open VCE handles

 *

 * @adev: amdgpu_device pointer

 * @filp: drm file pointer

 *

 * Close all VCE handles still open by this file pointer

/**

 * amdgpu_vce_get_create_msg - generate a VCE create msg

 *

 * @ring: ring we should submit the msg to

 * @handle: VCE session handle to use

 * @bo: amdgpu object for which we query the offset

 * @fence: optional fence to return

 *

 * Open up a stream for HW test

 only one gpu page is needed, alloc +1 page to make addr aligned. */

 let addr point to page boundary */

 stitch together an VCE create msg */

 len */

 session cmd */

 len */

 len */

 create cmd */

 len */

 feedback buffer */

/**

 * amdgpu_vce_get_destroy_msg - generate a VCE destroy msg

 *

 * @ring: ring we should submit the msg to

 * @handle: VCE session handle to use

 * @direct: direct or delayed pool

 * @fence: optional fence to return

 *

 * Close up a stream for HW test or if userspace failed to do so

 stitch together an VCE destroy msg */

 len */

 session cmd */

 len */

 task info */

 next task info, set to 0xffffffff if no */

 destroy session */

 feedback is not needed, set to 0xffffffff and firmware will not output feedback */

 len */

 destroy cmd */

/**

 * amdgpu_vce_validate_bo - make sure not to cross 4GB boundary

 *

 * @p: parser context

 * @ib_idx: indirect buffer to use

 * @lo: address of lower dword

 * @hi: address of higher dword

 * @size: minimum size

 * @index: bs/fb index

 *

 * Make sure that no BO cross a 4GB boundary.

/**

 * amdgpu_vce_cs_reloc - command submission relocation

 *

 * @p: parser context

 * @ib_idx: indirect buffer to use

 * @lo: address of lower dword

 * @hi: address of higher dword

 * @size: minimum size

 * @index: bs/fb index

 *

 * Patch relocation inside command stream with real buffer address

/**

 * amdgpu_vce_validate_handle - validate stream handle

 *

 * @p: parser context

 * @handle: handle to validate

 * @allocated: allocated a new handle?

 *

 * Validates the handle and return the found session index or -EINVAL

 * we we don't have another free session index.

 validate the handle */

 handle not found try to alloc a new one */

/**

 * amdgpu_vce_ring_parse_cs - parse and validate the command stream

 *

 * @p: parser context

 * @ib_idx: indirect buffer to use

 task info */

 encode */

 context buffer */

 video bitstream buffer */

 feedback buffer */

 MV buffer */

 session */

 task info */

 create */

 config extension */

 pic control */

 rate control */

 motion estimation */

 rdo */

 vui */

 auxiliary buffer */

 clock table */

 hw config */

 encode */

 destroy */

 context buffer */

 video bitstream buffer */

 feedback buffer */

 MV buffer */

 No error, free all destroyed handle slots */

 Error during parsing, free all allocated handle slots */

/**

 * amdgpu_vce_ring_parse_cs_vm - parse the command stream in VM mode

 *

 * @p: parser context

 * @ib_idx: indirect buffer to use

 session */

 create */

 destroy */

 No error, free all destroyed handle slots */

 Error during parsing, free all allocated handle slots */

/**

 * amdgpu_vce_ring_emit_ib - execute indirect buffer

 *

 * @ring: engine to use

 * @job: job to retrieve vmid from

 * @ib: the IB to execute

 * @flags: unused

 *

/**

 * amdgpu_vce_ring_emit_fence - add a fence command to the ring

 *

 * @ring: engine to use

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

/**

 * amdgpu_vce_ring_test_ring - test if VCE ring is working

 *

 * @ring: the engine to test on

 *

 skip ring test for sriov*/

/**

 * amdgpu_vce_ring_test_ib - test if VCE IBs are working

 *

 * @ring: the engine to test on

 * @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT

 *

 skip vce ring1/2 ib test for now, since it's not reliable */

/*

 * Copyright 2007-8 Advanced Micro Devices, Inc.

 * Copyright 2008 Red Hat Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Dave Airlie

 *          Alex Deucher

	/* bail if the connector does not have hpd pin, e.g.,

	 * VGA, TV, etc.

 if the connector is already off, don't turn it back on */

 just deal with DP (not eDP) here. */

 if existing sink type was not DP no need to retrain */

 first get sink type as it may be reset after (un)plug */

		/* don't do anything if sink is not display port, i.e.,

		 * passive dp->(dvi|hdmi) adaptor

 Don't start link training before we have the DPCD */

			/* Turn the connector off and back on immediately, which

			 * will trigger link training

		/*

		 * Pre DCE-8 hw can't handle > 12 bpc, and more than 12 bpc doesn't make

		 * much sense without support for > 12 bpc framebuffers. RGB 4:4:4 at

		 * 12 bpc is always supported on hdmi deep color sinks, as this is

		 * required by the HDMI-1.3 spec. Clamp to a safe 12 bpc maximum.

 Any defined maximum tmds clock limit we must not exceed? */

 mode_clock is clock in kHz for mode to be modeset on this connector */

 Maximum allowable input clock in kHz */

 Check if bpc is within clock limit. Try to degrade gracefully otherwise */

 max_tmds_clock missing, but hdmi spec mandates it for deep color. */

 on hw with routers, select right port */

 some laptops provide a hardcoded edid in rom for LCDs */

 pick the first one */

 mac laptops without an edid */

		/* Note that this is not necessarily the exact panel mode,

		 * but an approximation based on the cvt formula.  For these

		 * systems we should ideally read the mode info out of the

		 * registers or add a mode table, but this works and is much

		 * simpler.

 need to find digital encoder on connector */

 need to find digital encoder on connector */

 need to find digital encoder on connector */

 need to find digital encoder on connector */

 need to find digital encoder on connector */

 need to find digital encoder on connector */

 If the EDID preferred mode doesn't match the native mode, use it */

 Try to get native mode details from EDID if necessary */

 add scaled modes */

 we have no EDID modes */

 add the width/height from vbios tables if available */

 add scaled modes */

		/* AVIVO hardware supports downscaling modes larger than the panel

		 * to the panel size, but I'm not sure this is desirable.

 if scaling is disabled, block non-native modes */

 check if panel is valid */

 check for edid as well */

 check acpi lid status ??? */

 XXX check mode bandwidth */

			/* some oems have boards with separate digital and analog connectors

			 * with a shared ddc line (often vga + hdmi)

 if we aren't forcing don't do destructive polling */

			/* only return the previous status if we last

			 * detected a monitor via load.

/*

 * DVI is complicated

 * Do a DDC probe, if DDC probe passes, get the full EDID so

 * we can do analog/digital monitor detection at this point.

 * If the monitor is an analog monitor or we got no DDC,

 * we need to find the DAC encoder object for this connector.

 * If we got no DDC, we do load detection on the DAC encoder object.

 * If we got analog DDC or load detection passes on the DAC encoder

 * we have to check if this analog encoder is shared with anyone else (TV)

 * if its shared we have to set the other connector to disconnected.

 defer use_digital to later */

			/* some oems have boards with separate digital and analog connectors

			 * with a shared ddc line (often vga + hdmi)

			/* This gets complicated.  We have boards with VGA + HDMI with a

			 * shared DDC line and we have boards with DVI-D + HDMI with a shared

			 * DDC line.  The latter is more complex because with DVI<->HDMI adapters

			 * you don't really know what's connected to which port as both are digital.

 cases where both connectors are digital */

 hpd is our only option in this case */

 DVI-D and HDMI-A are digital only */

 if we aren't forcing don't do destructive polling */

		/* only return the previous status if we last

		 * detected a monitor via load.

 find analog encoder */

 deal with analog monitors without DDC */

 assume digital unless load detected otherwise */

 updated in get modes as well since we need to know if it's analog or digital */

 okay need to be smart in here about which encoder to pick */

 see if we have a default encoder  TODO */

 then check use digitial */

 pick the first one */

 XXX check mode bandwidth */

 HDMI 1.3+ supports max clock of 340 Mhz */

 check against the max pixel clock */

 need to setup ddc on the bridge */

 add scaled modes */

 we have no EDID modes */

 add the width/height from vbios tables if available */

 add scaled modes */

 need to setup ddc on the bridge */

 check if panel is valid */

 eDP is always DP */

 DP bridges are always DP */

 get the DPCD from the bridge */

 setup ddc on the bridge */

 bridge chips are always aux */

 try DDC */

 try load detection */

 try non-aux ddc (DP to DVI/HDMI/etc. adapter) */

 XXX check mode bandwidth */

			/* AVIVO hardware supports downscaling modes larger than the panel

			 * to the panel size, but I'm not sure this is desirable.

 if scaling is disabled, block non-native modes */

 HDMI 1.3+ supports max clock of 340 Mhz */

 see if we already added it */

 check if it's a dp bridge */

 no HPD on analog connectors */

 no HPD on analog connectors */

 in theory with a DP to VGA converter... */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 invalidate using legacy mode on vmid*/

 Program the AGP BAR */

 Program the system aperture low logical page number. */

 Set default page address. */

 Program "protection fault". */

 Setup TLB control */

 UC, uncached */

 These regs are not accessible for VF, PF will program these in SRIOV */

 Setup L2 cache */

 XXX for emulation, Refer to closed source code.*/

 Send no-retry XNACK on fault to suppress VM fault storm. */

 GART Enable. */

 Disable all tables */

 Setup TLB control */

 Setup L2 cache */

/**

 * gfxhub_v2_0_set_fault_enable_default - update GART/VM fault handling

 *

 * @adev: amdgpu_device pointer

 * @value: true redirects VM faults to the default page

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * Authors: Christian KÃ¶nig <christian.koenig@amd.com>

/**

 * vce_v3_0_ring_get_rptr - get read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware read pointer

/**

 * vce_v3_0_ring_get_wptr - get write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware write pointer

/**

 * vce_v3_0_ring_set_wptr - set write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the write pointer to the hardware

 Set Override to disable Clock Gating */

	/* This function enables MGCG which is controlled by firmware.

	   With the clocks in the gated state the core is still

	   accessible but the firmware will throttle the clocks on the

	   fly as necessary.

/**

 * vce_v3_0_start - start VCE block

 *

 * @adev: amdgpu_device pointer

 *

 * Setup and start the VCE block

		/* Program instance 0 reg space for two instances or instance 0 case

 clear BUSY flag */

 hold on ECPU */

 clear VCE STATUS */

 VCE */

 52.8.3 required for 3 ring support */

	/*

	 * Proper cleanups before halting the HW engine:

	 *   - cancel the delayed idle work

	 *   - enable powergating

	 *   - enable clockgating

	 *   - disable dpm

	 *

	 * TODO: to align with the VCN implementation, move the

	 * jobs for clockgating/powergating/dpm setting to

	 * ->set_powergating_state().

 AUTO_BUSY */

 RB0_BUSY */

 RB1_BUSY */

	/* According to VCE team , we should use VCE_STATUS instead

	 * SRBM_STATUS.VCE_BUSY bit for busy status checking.

	 * GRBM_GFX_INDEX.INSTANCE_INDEX is used to specify which VCE

	 * instance's registers are accessed

	 * (0 for 1st instance, 10 for 2nd instance).

	 *

	 *VCE_STATUS

	 *|UENC|ACPI|AUTO ACTIVE|RB1 |RB0 |RB2 |          |FW_LOADED|JOB |

	 *|----+----+-----------+----+----+----+----------+---------+----|

	 *|bit8|bit7|    bit6   |bit5|bit4|bit3|   bit2   |  bit1   |bit0|

	 *

	 * VCE team suggest use bit 3--bit 6 for busy status check

 Wait a little for things to settle down */

 Program VCE Instance 0 or 1 if not harvested */

 initialize VCE_CLOCK_GATING_A: Clock ON/OFF delay */

 initialize VCE_UENC_CLOCK_GATING: Clock ON/OFF delay */

	/* This doesn't actually powergate the VCE block.

	 * That's done in the dpm code via the SMC.  This

	 * just re-inits the block as necessary.  The actual

	 * gating still happens in the dpm code.  We should

	 * revisit this when there is a cleaner line between

	 * the smc and the hw blocks

 AMD_CG_SUPPORT_VCE_MGCG */

 vce_v3_0_emit_pipeline_sync */

 amdgpu_vce_ring_emit_fence x1 no user fence */

 amdgpu_vce_ring_emit_ib */

 vce_v3_0_emit_vm_flush */

 vce_v3_0_emit_pipeline_sync */

 amdgpu_vce_ring_emit_fence x2 vm fence */

 vce_v3_0_ring_emit_ib */

/*

 * Copyright 2015 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: monk liu <monk.liu@amd.com>

	/* This should not happen as we sanitized userspace provided priority

	 * already, WARN if this happens.

 NORMAL and below are accessible by everyone */

 disable load balance if the hw engine retains context among dependent jobs */

 Right now all IPs have only one instance - multiple rings. */

 TODO: these two are always zero */

 determine if a GPU reset has occured since the last call */

 TODO: this should ideally return NO, GUILTY, or INNOCENT. */

		/* Return the cached values in O(1),

		 * and schedule delayed work to cache

		 * new vaues.

	/* For backwards compatibility reasons, we need to accept

 set sw priority */

 set hw priority */

		/* Harmonic mean approximation diverges for very small

		 * values. If ratio < 0.01% ignore

/*

 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

/*

 * KMS wrapper.

 * - 3.0.0 - initial driver

 * - 3.1.0 - allow reading more status registers (GRBM, SRBM, SDMA, CP)

 * - 3.2.0 - GFX8: Uses EOP_TC_WB_ACTION_EN, so UMDs don't have to do the same

 *           at the end of IBs.

 * - 3.3.0 - Add VM support for UVD on supported hardware.

 * - 3.4.0 - Add AMDGPU_INFO_NUM_EVICTIONS.

 * - 3.5.0 - Add support for new UVD_NO_OP register.

 * - 3.6.0 - kmd involves use CONTEXT_CONTROL in ring buffer.

 * - 3.7.0 - Add support for VCE clock list packet

 * - 3.8.0 - Add support raster config init in the kernel

 * - 3.9.0 - Add support for memory query info about VRAM and GTT.

 * - 3.10.0 - Add support for new fences ioctl, new gem ioctl flags

 * - 3.11.0 - Add support for sensor query info (clocks, temp, etc).

 * - 3.12.0 - Add query for double offchip LDS buffers

 * - 3.13.0 - Add PRT support

 * - 3.14.0 - Fix race in amdgpu_ctx_get_fence() and note new functionality

 * - 3.15.0 - Export more gpu info for gfx9

 * - 3.16.0 - Add reserved vmid support

 * - 3.17.0 - Add AMDGPU_NUM_VRAM_CPU_PAGE_FAULTS.

 * - 3.18.0 - Export gpu always on cu bitmap

 * - 3.19.0 - Add support for UVD MJPEG decode

 * - 3.20.0 - Add support for local BOs

 * - 3.21.0 - Add DRM_AMDGPU_FENCE_TO_HANDLE ioctl

 * - 3.22.0 - Add DRM_AMDGPU_SCHED ioctl

 * - 3.23.0 - Add query for VRAM lost counter

 * - 3.24.0 - Add high priority compute support for gfx9

 * - 3.25.0 - Add support for sensor query info (stable pstate sclk/mclk).

 * - 3.26.0 - GFX9: Process AMDGPU_IB_FLAG_TC_WB_NOT_INVALIDATE.

 * - 3.27.0 - Add new chunk to to AMDGPU_CS to enable BO_LIST creation.

 * - 3.28.0 - Add AMDGPU_CHUNK_ID_SCHEDULED_DEPENDENCIES

 * - 3.29.0 - Add AMDGPU_IB_FLAG_RESET_GDS_MAX_WAVE_ID

 * - 3.30.0 - Add AMDGPU_SCHED_OP_CONTEXT_PRIORITY_OVERRIDE.

 * - 3.31.0 - Add support for per-flip tiling attribute changes with DC

 * - 3.32.0 - Add syncobj timeline support to AMDGPU_CS.

 * - 3.33.0 - Fixes for GDS ENOMEM failures in AMDGPU_CS.

 * - 3.34.0 - Non-DC can flip correctly between buffers with different pitches

 * - 3.35.0 - Add drm_amdgpu_info_device::tcc_disabled_mask

 * - 3.36.0 - Allow reading more status registers on si/cik

 * - 3.37.0 - L2 is invalidated before SDMA IBs, needed for correctness

 * - 3.38.0 - Add AMDGPU_IB_FLAG_EMIT_MEM_SYNC

 * - 3.39.0 - DMABUF implicit sync does a full pipeline sync

 * - 3.40.0 - Add AMDGPU_IDS_FLAGS_TMZ

 * - 3.41.0 - Add video codec query

 * - 3.42.0 - Add 16bpc fixed point display support

 * - 3.43.0 - Add device hot plug/unplug support

 * - 3.44.0 - DCN3 supports DCC independent block settings: !64B && 128B, 64B && 128B

 auto */

 auto */

 auto */

/*

 * OverDrive(bit 14) disabled by default

 * GFX DCS(bit 19) disabled by default

 auto */

/*

 * FBC (bit 0) disabled by default

 * MULTI_MON_PP_MCLK_SWITCH (bit 1) enabled by default

 *   - With this, for multiple monitors in sync(e.g. with the same model),

 *     mclk switching will be allowed. And the mclk will be not foced to the

 *     highest. That helps saving some idle power.

 * DISABLE_FRACTIONAL_PWM (bit 2) disabled by default

 * PSR (bit 3) disabled by default

 * EDP NO POWER SEQUENCING (bit 4) disabled by default

 auto */

 auto */

 default to 0x0 (timeout disable) */

/**

 * DOC: vramlimit (int)

 * Restrict the total amount of VRAM in MiB for testing.  The default is 0 (Use full VRAM).

/**

 * DOC: vis_vramlimit (int)

 * Restrict the amount of CPU visible VRAM in MiB for testing.  The default is 0 (Use full CPU visible VRAM).

/**

 * DOC: gartsize (uint)

 * Restrict the size of GART in Mib (32, 64, etc.) for testing. The default is -1 (The size depends on asic).

/**

 * DOC: gttsize (int)

 * Restrict the size of GTT domain in MiB for testing. The default is -1 (It's VRAM size if 3GB < VRAM < 3/4 RAM,

 * otherwise 3/4 RAM size).

/**

 * DOC: moverate (int)

 * Set maximum buffer migration rate in MB/s. The default is -1 (8 MB/s).

/**

 * DOC: benchmark (int)

 * Run benchmarks. The default is 0 (Skip benchmarks).

/**

 * DOC: test (int)

 * Test BO GTT->VRAM and VRAM->GTT GPU copies. The default is 0 (Skip test, only set 1 to run test).

/**

 * DOC: audio (int)

 * Set HDMI/DPAudio. Only affects non-DC display handling. The default is -1 (Enabled), set 0 to disabled it.

/**

 * DOC: disp_priority (int)

 * Set display Priority (1 = normal, 2 = high). Only affects non-DC display handling. The default is 0 (auto).

/**

 * DOC: hw_i2c (int)

 * To enable hw i2c engine. Only affects non-DC display handling. The default is 0 (Disabled).

/**

 * DOC: pcie_gen2 (int)

 * To disable PCIE Gen2/3 mode (0 = disable, 1 = enable). The default is -1 (auto, enabled).

/**

 * DOC: msi (int)

 * To disable Message Signaled Interrupts (MSI) functionality (1 = enable, 0 = disable). The default is -1 (auto, enabled).

/**

 * DOC: lockup_timeout (string)

 * Set GPU scheduler timeout value in ms.

 *

 * The format can be [Non-Compute] or [GFX,Compute,SDMA,Video]. That is there can be one or

 * multiple values specified. 0 and negative values are invalidated. They will be adjusted

 * to the default timeout.

 *

 * - With one value specified, the setting will apply to all non-compute jobs.

 * - With multiple values specified, the first one will be for GFX.

 *   The second one is for Compute. The third and fourth ones are

 *   for SDMA and Video.

 *

 * By default(with no lockup_timeout settings), the timeout for all non-compute(GFX, SDMA and Video)

 * jobs is 10000. The timeout for compute is 60000.

/**

 * DOC: dpm (int)

 * Override for dynamic power management setting

 * (0 = disable, 1 = enable)

 * The default is -1 (auto).

/**

 * DOC: fw_load_type (int)

 * Set different firmware loading type for debugging (0 = direct, 1 = SMU, 2 = PSP). The default is -1 (auto).

/**

 * DOC: aspm (int)

 * To disable ASPM (1 = enable, 0 = disable). The default is -1 (auto, enabled).

/**

 * DOC: runpm (int)

 * Override for runtime power management control for dGPUs in PX/HG laptops. The amdgpu driver can dynamically power down

 * the dGPU on PX/HG laptops when it is idle. The default is -1 (auto enable). Setting the value to 0 disables this functionality.

/**

 * DOC: ip_block_mask (uint)

 * Override what IP blocks are enabled on the GPU. Each GPU is a collection of IP blocks (gfx, display, video, etc.).

 * Use this parameter to disable specific blocks. Note that the IP blocks do not have a fixed index. Some asics may not have

 * some IPs or may include multiple instances of an IP so the ordering various from asic to asic. See the driver output in

 * the kernel log for the list of IPs on the asic. The default is 0xffffffff (enable all blocks on a device).

/**

 * DOC: bapm (int)

 * Bidirectional Application Power Management (BAPM) used to dynamically share TDP between CPU and GPU. Set value 0 to disable it.

 * The default -1 (auto, enabled)

/**

 * DOC: deep_color (int)

 * Set 1 to enable Deep Color support. Only affects non-DC display handling. The default is 0 (disabled).

/**

 * DOC: vm_size (int)

 * Override the size of the GPU's per client virtual address space in GiB.  The default is -1 (automatic for each asic).

/**

 * DOC: vm_fragment_size (int)

 * Override VM fragment size in bits (4, 5, etc. 4 = 64K, 9 = 2M). The default is -1 (automatic for each asic).

/**

 * DOC: vm_block_size (int)

 * Override VM page table size in bits (default depending on vm_size and hw setup). The default is -1 (automatic for each asic).

/**

 * DOC: vm_fault_stop (int)

 * Stop on VM fault for debugging (0 = never, 1 = print first, 2 = always). The default is 0 (No stop).

/**

 * DOC: vm_debug (int)

 * Debug VM handling (0 = disabled, 1 = enabled). The default is 0 (Disabled).

/**

 * DOC: vm_update_mode (int)

 * Override VM update mode. VM updated by using CPU (0 = never, 1 = Graphics only, 2 = Compute only, 3 = Both). The default

 * is -1 (Only in large BAR(LB) systems Compute VM tables will be updated by CPU, otherwise 0, never).

/**

 * DOC: exp_hw_support (int)

 * Enable experimental hw support (1 = enable). The default is 0 (disabled).

/**

 * DOC: dc (int)

 * Disable/Enable Display Core driver for debugging (1 = enable, 0 = disable). The default is -1 (automatic for each asic).

/**

 * DOC: sched_jobs (int)

 * Override the max number of jobs supported in the sw queue. The default is 32.

/**

 * DOC: sched_hw_submission (int)

 * Override the max number of HW submissions. The default is 2.

/**

 * DOC: ppfeaturemask (hexint)

 * Override power features enabled. See enum PP_FEATURE_MASK in drivers/gpu/drm/amd/include/amd_shared.h.

 * The default is the current set of stable power features.

/**

 * DOC: forcelongtraining (uint)

 * Force long memory training in resume.

 * The default is zero, indicates short training in resume.

/**

 * DOC: pcie_gen_cap (uint)

 * Override PCIE gen speed capabilities. See the CAIL flags in drivers/gpu/drm/amd/include/amd_pcie.h.

 * The default is 0 (automatic for each asic).

/**

 * DOC: pcie_lane_cap (uint)

 * Override PCIE lanes capabilities. See the CAIL flags in drivers/gpu/drm/amd/include/amd_pcie.h.

 * The default is 0 (automatic for each asic).

/**

 * DOC: cg_mask (uint)

 * Override Clockgating features enabled on GPU (0 = disable clock gating). See the AMD_CG_SUPPORT flags in

 * drivers/gpu/drm/amd/include/amd_shared.h. The default is 0xffffffff (all enabled).

/**

 * DOC: pg_mask (uint)

 * Override Powergating features enabled on GPU (0 = disable power gating). See the AMD_PG_SUPPORT flags in

 * drivers/gpu/drm/amd/include/amd_shared.h. The default is 0xffffffff (all enabled).

/**

 * DOC: sdma_phase_quantum (uint)

 * Override SDMA context switch phase quantum (x 1K GPU clock cycles, 0 = no change). The default is 32.

/**

 * DOC: disable_cu (charp)

 * Set to disable CUs (It's set like se.sh.cu,...). The default is NULL.

/**

 * DOC: virtual_display (charp)

 * Set to enable virtual display feature. This feature provides a virtual display hardware on headless boards

 * or in virtualized environments. It will be set like xxxx:xx:xx.x,x;xxxx:xx:xx.x,x. It's the pci address of

 * the device, plus the number of crtcs to expose. E.g., 0000:26:00.0,4 would enable 4 virtual crtcs on the pci

 * device at 26:00.0. The default is NULL.

/**

 * DOC: job_hang_limit (int)

 * Set how much time allow a job hang and not drop it. The default is 0.

/**

 * DOC: lbpw (int)

 * Override Load Balancing Per Watt (LBPW) support (1 = enable, 0 = disable). The default is -1 (auto, enabled).

/**

 * DOC: gpu_recovery (int)

 * Set to enable GPU recovery mechanism (1 = enable, 0 = disable). The default is -1 (auto, disabled except SRIOV).

/**

 * DOC: emu_mode (int)

 * Set value 1 to enable emulation mode. This is only needed when running on an emulator. The default is 0 (disabled).

/**

 * DOC: ras_enable (int)

 * Enable RAS features on the GPU (0 = disable, 1 = enable, -1 = auto (default))

/**

 * DOC: ras_mask (uint)

 * Mask of RAS features to enable (default 0xffffffff), only valid when ras_enable == 1

 * See the flags in drivers/gpu/drm/amd/amdgpu/amdgpu_ras.h

/**

 * DOC: timeout_fatal_disable (bool)

 * Disable Watchdog timeout fatal error event

/**

 * DOC: timeout_period (uint)

 * Modify the watchdog timeout max_cycles as (1 << period)

/**

 * DOC: si_support (int)

 * Set SI support driver. This parameter works after set config CONFIG_DRM_AMDGPU_SI. For SI asic, when radeon driver is enabled,

 * set value 0 to use radeon driver, while set value 1 to use amdgpu driver. The default is using radeon driver when it available,

 * otherwise using amdgpu driver.

/**

 * DOC: cik_support (int)

 * Set CIK support driver. This parameter works after set config CONFIG_DRM_AMDGPU_CIK. For CIK asic, when radeon driver is enabled,

 * set value 0 to use radeon driver, while set value 1 to use amdgpu driver. The default is using radeon driver when it available,

 * otherwise using amdgpu driver.

/**

 * DOC: smu_memory_pool_size (uint)

 * It is used to reserve gtt for smu debug usage, setting value 0 to disable it. The actual size is value * 256MiB.

 * E.g. 0x1 = 256Mbyte, 0x2 = 512Mbyte, 0x4 = 1 Gbyte, 0x8 = 2GByte. The default is 0 (disabled).

/**

 * DOC: async_gfx_ring (int)

 * It is used to enable gfx rings that could be configured with different prioritites or equal priorities

/**

 * DOC: mcbp (int)

 * It is used to enable mid command buffer preemption. (0 = disabled (default), 1 = enabled)

/**

 * DOC: discovery (int)

 * Allow driver to discover hardware IP information from IP Discovery table at the top of VRAM.

 * (-1 = auto (default), 0 = disabled, 1 = enabled, 2 = use ip_discovery table from file)

/**

 * DOC: mes (int)

 * Enable Micro Engine Scheduler. This is a new hw scheduling engine for gfx, sdma, and compute.

 * (0 = disabled (default), 1 = enabled)

/**

 * DOC: noretry (int)

 * Disable XNACK retry in the SQ by default on GFXv9 hardware. On ASICs that

 * do not support per-process XNACK this also disables retry page faults.

 * (0 = retry enabled, 1 = retry disabled, -1 auto (default))

/**

 * DOC: force_asic_type (int)

 * A non negative value used to specify the asic type for all supported GPUs.

/**

 * DOC: sched_policy (int)

 * Set scheduling policy. Default is HWS(hardware scheduling) with over-subscription.

 * Setting 1 disables over-subscription. Setting 2 disables HWS and statically

 * assigns queues to HQDs.

/**

 * DOC: hws_max_conc_proc (int)

 * Maximum number of processes that HWS can schedule concurrently. The maximum is the

 * number of VMIDs assigned to the HWS, which is also the default.

/**

 * DOC: cwsr_enable (int)

 * CWSR(compute wave store and resume) allows the GPU to preempt shader execution in

 * the middle of a compute wave. Default is 1 to enable this feature. Setting 0

 * disables it.

/**

 * DOC: max_num_of_queues_per_device (int)

 * Maximum number of queues per device. Valid setting is between 1 and 4096. Default

 * is 4096.

/**

 * DOC: send_sigterm (int)

 * Send sigterm to HSA process on unhandled exceptions. Default is not to send sigterm

 * but just print errors on dmesg. Setting 1 enables sending sigterm.

/**

 * DOC: debug_largebar (int)

 * Set debug_largebar as 1 to enable simulating large-bar capability on non-large bar

 * system. This limits the VRAM size reported to ROCm applications to the visible

 * size, usually 256MB.

 * Default value is 0, diabled.

/**

 * DOC: ignore_crat (int)

 * Ignore CRAT table during KFD initialization. By default, KFD uses the ACPI CRAT

 * table to get information about AMD APUs. This option can serve as a workaround on

 * systems with a broken CRAT table.

 *

 * Default is auto (according to asic type, iommu_v2, and crat table, to decide

 * whehter use CRAT)

/**

 * DOC: halt_if_hws_hang (int)

 * Halt if HWS hang is detected. Default value, 0, disables the halt on hang.

 * Setting 1 enables halt on hang.

/**

 * DOC: hws_gws_support(bool)

 * Assume that HWS supports GWS barriers regardless of what firmware version

 * check says. Default value: false (rely on MEC2 firmware version check).

/**

  * DOC: queue_preemption_timeout_ms (int)

  * queue preemption timeout in ms (1 = Minimum, 9000 = default)

/**

 * DOC: debug_evictions(bool)

 * Enable extra debug messages to help determine the cause of evictions

/**

 * DOC: no_system_mem_limit(bool)

 * Disable system memory limit, to support multiple process shared memory

/**

 * DOC: no_queue_eviction_on_vm_fault (int)

 * If set, process queues will not be evicted on gpuvm fault. This is to keep the wavefront context for debugging (0 = queue eviction, 1 = no queue eviction). The default is 0 (queue eviction).

/**

 * DOC: dcfeaturemask (uint)

 * Override display features enabled. See enum DC_FEATURE_MASK in drivers/gpu/drm/amd/include/amd_shared.h.

 * The default is the current set of stable display features.

/**

 * DOC: dcdebugmask (uint)

 * Override display features enabled. See enum DC_DEBUG_MASK in drivers/gpu/drm/amd/include/amd_shared.h.

/**

 * DOC: abmlevel (uint)

 * Override the default ABM (Adaptive Backlight Management) level used for DC

 * enabled hardware. Requires DMCU to be supported and loaded.

 * Valid levels are 0-4. A value of 0 indicates that ABM should be disabled by

 * default. Values 1-4 control the maximum allowable brightness reduction via

 * the ABM algorithm, with 1 being the least reduction and 4 being the most

 * reduction.

 *

 * Defaults to 0, or disabled. Userspace can still override this level later

 * after boot.

/**

 * DOC: tmz (int)

 * Trusted Memory Zone (TMZ) is a method to protect data being written

 * to or read from memory.

 *

 * The default value: 0 (off).  TODO: change to auto till it is completed.

/**

 * DOC: freesync_video (uint)

 * Enable the optimization to adjust front porch timing to achieve seamless

 * mode change experience when setting a freesync supported mode for which full

 * modeset is not needed.

 *

 * The Display Core will add a set of modes derived from the base FreeSync

 * video mode into the corresponding connector's mode list based on commonly

 * used refresh rates and VRR range of the connected display, when users enable

 * this feature. From the userspace perspective, they can see a seamless mode

 * change experience when the change between different refresh rates under the

 * same resolution. Additionally, userspace applications such as Video playback

 * can read this modeset list and change the refresh rate based on the video

 * frame rate. Finally, the userspace can also derive an appropriate mode for a

 * particular refresh rate based on the FreeSync Mode and add it to the

 * connector's mode list.

 *

 * Note: This is an experimental feature.

 *

 * The default value: 0 (off).

/**

 * DOC: reset_method (int)

 * GPU reset method (-1 = auto (default), 0 = legacy, 1 = mode0, 2 = mode1, 3 = mode2, 4 = baco, 5 = pci)

/**

 * DOC: bad_page_threshold (int) Bad page threshold is specifies the

 * threshold value of faulty pages detected by RAS ECC, which may

 * result in the GPU entering bad status when the number of total

 * faulty pages by ECC exceeds the threshold value.

/**

 * DOC: smu_pptable_id (int)

 * Used to override pptable id. id = 0 use VBIOS pptable.

 * id > 0 use the soft pptable with specicfied id.

/* These devices are not supported by amdgpu.

 * They are supported by the mach64, r128, radeon drivers

 mach64 */

 r128 */

 radeon */

 Kaveri */

 Bonaire */

 Hawaii */

 Kabini */

 mullins */

 topaz */

 tonga */

 fiji */

 carrizo */

 stoney */

 Polaris11 */

 Polaris10 */

 Polaris12 */

 VEGAM */

 Vega 10 */

 Vega 12 */

 Vega 20 */

 Raven */

 Arcturus */

 Navi10 */

 Navi14 */

 Renoir */

 Navi12 */

 Sienna_Cichlid */

 Van Gogh */

 Yellow Carp */

 Navy_Flounder */

 DIMGREY_CAVEFISH */

 Aldebaran */

 CYAN_SKILLFISH */

 BEIGE_GOBY */

 skip devices which are owned by radeon */

	/* Due to hardware bugs, S/G Display on raven requires a 1:1 IOMMU mapping,

	 * however, SME requires an indirect IOMMU mapping because the encryption

	 * bit is beyond the DMA mask of the chip.

 Get rid of things like offb */

 Don't request EX mode too frequently which is attacking */

	/*

	 * Flush any in flight DMA operations from device.

	 * Clear the Bus Master Enable bit and then wait on the PCIe Device

	 * StatusTransactions Pending bit.

	/* if we are running in a VM, make sure the device

	 * torn down properly on reboot/shutdown.

	 * unfortunately we can't detect certain

	 * hypervisors so just do this all the time.

/**

 * amdgpu_drv_delayed_reset_work_handler - work handler for reset

 *

 * @work: work_struct.

 Use a common context, just need to make sure full reset is done */

 reset function will rebuild the xgmi hive info , clear it now */

 unregister the GPU first, reset function will add them back */

 Use a common context, just need to make sure full reset is done */

	/* Return a positive number here so

	 * DPM_FLAG_SMART_SUSPEND works properly

 nothing to do */

 Avoids registers access if device is physically gone */

 wait for all rings to drain before suspending */

		/* Only need to handle PCI state in the driver for ATPX

		 * PCI core handles it for _PR3.

 nothing to do */

 Avoids registers access if device is physically gone */

		/* Only need to handle PCI state in the driver for ATPX

		 * PCI core handles it for _PR3.

		/* Only need to handle PCI state in the driver for ATPX

		 * PCI core handles it for _PR3.

 we don't want the main rpm_idle to call suspend - we want to autosuspend */

 KMS */

 Ignore KFD init failures. Normal when CONFIG_HSA_AMD is not set. */

 let modprobe override vga console setting */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

/**

 * amdgpu_vm_cpu_map_table - make sure new PDs/PTs are kmapped

 *

 * @table: newly allocated or validated PD/PT

/**

 * amdgpu_vm_cpu_prepare - prepare page table update with the CPU

 *

 * @p: see amdgpu_vm_update_params definition

 * @resv: reservation object with embedded fence

 * @sync_mode: synchronization mode

 *

 * Returns:

 * Negativ errno, 0 for success.

/**

 * amdgpu_vm_cpu_update - helper to update page tables via CPU

 *

 * @p: see amdgpu_vm_update_params definition

 * @vmbo: PD/PT to update

 * @pe: byte offset of the PDE/PTE, relative to start of PDB/PTB

 * @addr: dst addr to write into pe

 * @count: number of page entries to update

 * @incr: increase next addr by incr bytes

 * @flags: hw access flags

 *

 * Write count number of PT/PD entries directly.

/**

 * amdgpu_vm_cpu_commit - commit page table update to the HW

 *

 * @p: see amdgpu_vm_update_params definition

 * @fence: unused

 *

 * Make sure that the hardware sees the page table updates.

 Flush HDP */

/*

 * Copyright 2020 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors: Sonny Jiang <sonny.jiang@amd.com>

/**

 * uvd_v3_1_ring_get_rptr - get read pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware read pointer

/**

 * uvd_v3_1_ring_get_wptr - get write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Returns the current hardware write pointer

/**

 * uvd_v3_1_ring_set_wptr - set write pointer

 *

 * @ring: amdgpu_ring pointer

 *

 * Commits the write pointer to the hardware

/**

 * uvd_v3_1_ring_emit_ib - execute indirect buffer

 *

 * @ring: amdgpu_ring pointer

 * @job: iob associated with the indirect buffer

 * @ib: indirect buffer to execute

 * @flags: flags associated with the indirect buffer

 *

 * Write ring commands to execute the indirect buffer

/**

 * uvd_v3_1_ring_emit_fence - emit an fence & trap command

 *

 * @ring: amdgpu_ring pointer

 * @addr: address

 * @seq: sequence number

 * @flags: fence related flags

 *

 * Write a fence and a trap command to the ring.

/**

 * uvd_v3_1_ring_test_ring - register write test

 *

 * @ring: amdgpu_ring pointer

 *

 * Test if we can successfully write to the context register

 uvd_v3_1_ring_emit_fence  x1 no user fence */

 uvd_v3_1_ring_emit_ib */

/**

 * uvd_v3_1_mc_resume - memory controller programming

 *

 * @adev: amdgpu_device pointer

 *

 * Let the UVD memory controller know it's offsets

 programm the VCPU memory controller bits 0-27 */

 bits 28-31 */

 bits 32-39 */

/**

 * uvd_v3_1_fw_validate - FW validation operation

 *

 * @adev: amdgpu_device pointer

 *

 * Initialate and check UVD validation.

/**

 * uvd_v3_1_start - start UVD block

 *

 * @adev: amdgpu_device pointer

 *

 * Setup and start the UVD block

 disable byte swapping */

 set uvd busy */

 take UVD block out of reset */

 enable VCPU clock */

 disable interrupt */

 swap (8 in 32) RB and IB */

 initialize UVD memory controller */

 enable UMC */

 enable interrupt */

 force RBC into idle state */

 Set the write pointer delay */

 programm the 4GB memory segment for rptr and ring buffer */

 Initialize the ring buffer's read and write pointers */

 set the ring address */

 Set ring buffer size */

/**

 * uvd_v3_1_stop - stop UVD block

 *

 * @adev: amdgpu_device pointer

 *

 * stop the UVD block

 Stall UMC and register bus before resetting VCPU */

 put LMI, VCPU, RBC etc... into reset */

 UVD TRAP */

 Retrieval firmware validate key */

/**

 * uvd_v3_1_hw_init - start and test UVD block

 *

 * @handle: handle used to pass amdgpu_device pointer

 *

 * Initialize the hardware, boot up the VCPU and do some testing

 Clear timeout status bits */

/**

 * uvd_v3_1_hw_fini - stop the hardware block

 *

 * @handle: handle used to pass amdgpu_device pointer

 *

 * Stop the UVD block, mark ring as not ready any more

	/*

	 * Proper cleanups before halting the HW engine:

	 *   - cancel the delayed idle work

	 *   - enable powergating

	 *   - enable clockgating

	 *   - disable dpm

	 *

	 * TODO: to align with the VCN implementation, move the

	 * jobs for clockgating/powergating/dpm setting to

	 * ->set_powergating_state().

 shutdown the UVD block */

/*

 * Copyright 2012 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Interrupts

 * Starting with r6xx, interrupts are handled via a ring buffer.

 * Ring buffers are areas of GPU accessible memory that the GPU

 * writes interrupt vectors into and the host reads vectors out of.

 * There is a rptr (read pointer) that determines where the

 * host is currently reading, and a wptr (write pointer)

 * which determines where the GPU has written.  When the

 * pointers are equal, the ring is idle.  When the GPU

 * writes vectors to the ring buffer, it increments the

 * wptr.  When there is an interrupt, the host then starts

 * fetching commands and processing them until the pointers are

 * equal again at which point it updates the rptr.

/**

 * cik_ih_enable_interrupts - Enable the interrupt ring buffer

 *

 * @adev: amdgpu_device pointer

 *

 * Enable the interrupt ring buffer (CIK).

/**

 * cik_ih_disable_interrupts - Disable the interrupt ring buffer

 *

 * @adev: amdgpu_device pointer

 *

 * Disable the interrupt ring buffer (CIK).

 set rptr, wptr to 0 */

/**

 * cik_ih_irq_init - init and enable the interrupt ring

 *

 * @adev: amdgpu_device pointer

 *

 * Allocate a ring buffer for the interrupt controller,

 * enable the RLC, disable interrupts, enable the IH

 * ring buffer and enable it (CIK).

 * Called at device load and reume.

 * Returns 0 for success, errors for failure.

 disable irqs */

 setup interrupt control */

	/* INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi

	 * INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN

 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram */

 set the writeback address whether it's enabled or not */

 set rptr, wptr to 0 */

 Default settings for IH_CNTL (disabled at first) */

 IH_CNTL__RPTR_REARM_MASK only works if msi's are enabled */

 enable irqs */

/**

 * cik_ih_irq_disable - disable interrupts

 *

 * @adev: amdgpu_device pointer

 *

 * Disable interrupts on the hw (CIK).

 Wait and acknowledge irq */

/**

 * cik_ih_get_wptr - get the IH ring buffer wptr

 *

 * @adev: amdgpu_device pointer

 * @ih: IH ring buffer to fetch wptr

 *

 * Get the IH ring buffer wptr from either the register

 * or the writeback memory buffer (CIK).  Also check for

 * ring buffer overflow and deal with it.

 * Used by cik_irq_process().

 * Returns the value of the wptr.

		/* When a ring buffer overflow happen start parsing interrupt

		 * from the last not overwritten vector (wptr + 16). Hopefully

		 * this should allow us to catchup.

/*        CIK IV Ring

 * Each IV ring entry is 128 bits:

 * [7:0]    - interrupt source id

 * [31:8]   - reserved

 * [59:32]  - interrupt source data

 * [63:60]  - reserved

 * [71:64]  - RINGID

 *            CP:

 *            ME_ID [1:0], PIPE_ID[1:0], QUEUE_ID[2:0]

 *            QUEUE_ID - for compute, which of the 8 queues owned by the dispatcher

 *                     - for gfx, hw shader state (0=PS...5=LS, 6=CS)

 *            ME_ID - 0 = gfx, 1 = first 4 CS pipes, 2 = second 4 CS pipes

 *            PIPE_ID - ME0 0=3D

 *                    - ME1&2 compute dispatcher (4 pipes each)

 *            SDMA:

 *            INSTANCE_ID [1:0], QUEUE_ID[1:0]

 *            INSTANCE_ID - 0 = sdma0, 1 = sdma1

 *            QUEUE_ID - 0 = gfx, 1 = rlc0, 2 = rlc1

 * [79:72]  - VMID

 * [95:80]  - PASID

 * [127:96] - reserved

 /**

 * cik_ih_decode_iv - decode an interrupt vector

 *

 * @adev: amdgpu_device pointer

 *

 * Decodes the interrupt vector at the current rptr

 * position and also advance the position.

 wptr/rptr are in bytes! */

 wptr/rptr are in bytes! */

/**

 * cik_ih_set_rptr - set the IH ring buffer rptr

 *

 * @adev: amdgpu_device pointer

 * @ih: IH ring buffer to set wptr

 *

 * Set the IH ring buffer rptr.

 read MC_STATUS */

 Wait a little for things to settle down */

/*

 * Copyright 2021 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 for baremetal, the ucode is allocated in gtt, so don't need to fill the bo when reset/suspend */

	/*

	 * if SMU loaded firmware, it needn't add SMC, UVD, and VCE

	 * ucode info here

/*

 * Copyright 2014 Advanced Micro Devices, Inc.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

/*

 * Authors:

 *    Christian KÃ¶nig <christian.koenig@amd.com>

/**

 * DOC: MMU Notifier

 *

 * For coherent userptr handling registers an MMU notifier to inform the driver

 * about updates on the page tables of a process.

 *

 * When somebody tries to invalidate the page tables we block the update until

 * all operations on the pages in question are completed, then those pages are

 * marked as accessed and also dirty if it wasn't a read only access.

 *

 * New command submissions using the userptrs in question are delayed until all

 * page table invalidation are completed and we once more see a coherent process

 * address space.

/**

 * amdgpu_mn_invalidate_gfx - callback to notify about mm change

 *

 * @mni: the range (mm) is about to update

 * @range: details on the invalidation

 * @cur_seq: Value to pass to mmu_interval_set_seq()

 *

 * Block for operations on BOs to finish and mark pages as accessed and

 * potentially dirty.

/**

 * amdgpu_mn_invalidate_hsa - callback to notify about mm change

 *

 * @mni: the range (mm) is about to update

 * @range: details on the invalidation

 * @cur_seq: Value to pass to mmu_interval_set_seq()

 *

 * We temporarily evict the BO attached to this range. This necessitates

 * evicting all user-mode queues of the process.

/**

 * amdgpu_mn_register - register a BO for notifier updates

 *

 * @bo: amdgpu buffer object

 * @addr: userptr addr we should monitor

 *

 * Registers a mmu_notifier for the given BO at the specified address.

 * Returns 0 on success, -ERRNO if anything goes wrong.

/**

 * amdgpu_mn_unregister - unregister a BO for notifier updates

 *

 * @bo: amdgpu buffer object

 *

 * Remove any registration of mmu notifier updates from the buffer object.

 Assuming 512MB takes maxmium 1 second to fault page address */

		/*

		 * FIXME: This timeout should encompass the retry from

		 * mmu_interval_read_retry() as well.

	/*

	 * Due to default_flags, all pages are HMM_PFN_VALID or

	 * hmm_range_fault() fails. FIXME: The pages cannot be touched outside

	 * the notifier_lock, and mmu_interval_read_retry() must be done first.

/*

 * Copyright 2020 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 enable/disable ROM CG is not supported on APU */

 CGTT_ROM_CLK_CTRL0 is not availabe for APUs */

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 APE1 no longer exists on GFX9 */

 ATC is defeatured on Sienna_Cichlid */

 Mapping vmid to pasid also for IH block */

 HIQ is set during driver init period with vmid set to 0*/

 HQD registers extend from CP_MQD_BASE_ADDR to CP_HQD_EOP_WPTR_MEM. */

 Activate doorbell logic before triggering WPTR poll. */

		/* Don't read wptr with get_user because the user

		 * context may not be accessible (if this function

		 * runs in a work queue). Instead trigger a one-shot

		 * polling read from memory in the CP. This assumes

		 * that wptr is GPU-accessible in the queue's VMID via

		 * ATC or SVM. WPTR==RPTR before starting the poll so

		 * the CP starts fetching new commands from the right

		 * place.

		 *

		 * Guessing a 64-bit WPTR from a 32-bit RPTR is a bit

		 * tricky. Assume that the queue didn't overflow. The

		 * number of valid bits in the 32-bit RPTR depends on

		 * the queue size. The remaining bits are taken from

		 * the saved 64-bit WPTR. If the WPTR wrapped, add the

		 * queue size.

 Start the EOP fetcher */

 Queue_Sel */

 VMID */

queue_type: normal compute queue */

 alloc format: all_on_one_pipe */

 engine_sel: hiq */

 num_queues: must be 1 */

 SDMA is on gfxhub as well for Navi1* series */

	/*

	 * Program TBA registers

	/*

	 * Program TMA registers

/* kgd_get_iq_wait_times: Returns the mmCP_IQ_WAIT_TIME1/2 values

 * The values read are:

 *	ib_offload_wait_time     -- Wait Count for Indirect Buffer Offloads.

 *	atomic_offload_wait_time -- Wait Count for L2 and GDS Atomics Offloads.

 *	wrm_offload_wait_time    -- Wait Count for WAIT_REG_MEM Offloads.

 *	gws_wait_time            -- Wait Count for Global Wave Syncs.

 *	que_sleep_wait_time      -- Wait Count for Dequeue Retry.

 *	sch_wave_wait_time       -- Wait Count for Scheduling Wave Message.

 *	sem_rearm_wait_time      -- Wait Count for Semaphore re-arm.

 *	deq_retry_wait_time      -- Wait Count for Global Wave Syncs.

/*

 * Copyright 2021 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Copyright 2017 Advanced Micro Devices, Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice shall be included in

 * all copies or substantial portions of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 u32 pf2vf_flags = 0; */

/*

	TODO: Enable these code when pv2vf_info is merged

	AMDGPU_FW_VRAM_PF2VF_READ (adev, feature_flags, &pf2vf_flags);

	if (!(pf2vf_flags & AMDGIM_FEATURE_ERROR_LOG_COLLECT)) {

		return;

	}

 The errors are overlay of array, correct read_count as full. */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> */

	/* If this value is too low, when in high GPU clk freq,

	 * GPU will be in unstable state.

 status reg 1=off 0=on */

 power up all ip */

		/* Don't wait for interrupt on Mali400 if all domains are

		 * powered off because the HW won't generate an interrupt

		 * in this case.

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> */

/*

 * Changelog:

 *

 * - 1.1.0 - add heap buffer support

 Allocate and initialize the DRM device. */

	/*

	 * Register the DRM device with the core and the connectors with

	 * sysfs.

 stop autosuspend to make sure device is in active state */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> */

 should not create new bo_va if not asked by caller */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2018-2019 Qiang Yu <yuq825@gmail.com> */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> */

 Mali Utgard GPU can only support 32bit address space */

 drop reference from allocate - handle holds it now */

 explicit sync use user passed dep fence */

		/* increase refcnt of gpu va map to prevent unmapped when executing,

		 * will be decreased when task done

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> */

 mask all interrupts before hard reset */

 for shared irq case */

 for shared irq case */

		/* status read first in case int state change in the middle

		 * which may miss the interrupt handling

 PP has been reset by individual PP resume */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> */

 for shared irq case */

 mask all interrupts before resume */

 flush the TLB */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2018-2019 Qiang Yu <yuq825@gmail.com> */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> */

 for shared irq case */

 mask all interrupts before hard reset */

 update real heap buffer size for GP */

 before any hw ops, wait last success task async soft reset */

 Resume from where we stopped, i.e. new start is old end */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> */

 check any task running */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2020 Martin Blumenstingl <martin.blumenstingl@googlemail.com>

 *

 * Based on panfrost_devfreq.c:

 *   Copyright 2019 Collabora ltd.

 ~3 frames */

 Optional, continue without devfreq */

 Continue if the optional regulator is missing */

	/*

	 * Setup default thresholds for the simple_ondemand governor.

	 * The values are chosen based on experiments.

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> */

 l2_cache2 only exists when one of PP4-7 present */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> */

 resume GPU if it has been suspended by runtime PM */

 GPU can do auto runtime suspend */

 after GPU reset */

	/* for caller usage of the fence, otherwise irq handler

	 * may consume the fence before caller use it

	/* this is needed for MMU to work correctly, otherwise GP/PP

	 * will hang or page fault for unknown reason after running for

	 * a while.

	 *

	 * Need to investigate:

	 * 1. is it related to TLB

	 * 2. how much performance will be affected by L2 cache flush

	 * 3. can we reduce the calling of this function because all

	 *    GP/PP use the same L2 cache on mali400

	 *

	 * TODO:

	 * 1. move this to task fini to save some wait time?

	 * 2. when GP/PP use different l2 cache, need PP wait GP l2

	 *    cache flush?

 frame chunk */

 process name chunk */

 pid chunk */

 buffer chunks */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2020 Qiang Yu <yuq825@gmail.com> */

 SPDX-License-Identifier: GPL-2.0 OR MIT

 Copyright 2018-2019 Qiang Yu <yuq825@gmail.com> */

/* mga_warp.c -- Matrox G200/G400 WARP engine management -*- linux-c -*-

 * Created: Thu Jan 11 21:29:32 2001 by gareth@valinux.com

 *

 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors:

 *    Gareth Hughes <gareth@valinux.com>

 in bytes */

	/* FIXME: Get rid of these damned magic numbers...

/* mga_dma.c -- DMA support for mga g200/g400 -*- linux-c -*-

 * Created: Mon Dec 13 01:50:01 1999 by jhartmann@precisioninsight.com

 *

 * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.

 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER

 * DEALINGS IN THE SOFTWARE.

/*

 * \file mga_dma.c

 * DMA support for MGA G200 / G400.

 *

 * \author Rickard E. (Rik) Faith <faith@valinux.com>

 * \author Jeff Hartmann <jhartmann@valinux.com>

 * \author Keith Whitwell <keith@tungstengraphics.com>

 * \author Gareth Hughes <gareth@valinux.com>

/* ================================================================

 * Engine control

	/* The primary DMA stream should look like new right about now.

	/* FIXME: Reset counters, buffer ages etc...

	/* FIXME: What else do we need to reinitialize?  WARP stuff?

/* ================================================================

 * Primary DMA stream

 We need to wait so that we can do an safe flush */

	/* We need to pad the stream between flushes, as the card

	 * actually (partially?) reads the first of these commands.

	 * See page 4-16 in the G400 manual, middle of the page or so.

/* ================================================================

 * Freelist management

/* FIXME: Still needed?

/* ================================================================

 * DMA initialization, cleanup

	/* There are PCI versions of the G450.  These cards have the

	 * same PCI ID as the AGP G450, but have an additional PCI-to-PCI

	 * bridge chip.  We detect these cards, which are not currently

	 * supported by this driver, by looking at the device ID of the

	 * bus the "card" is on.  If vendor is 0x3388 (Hint Corp) and the

	 * device is 0x0021 (HB6 Universal PCI-PCI bridge), we reject the

	 * device.

		/* FIXME: This should be quirked in the pci core, but oh well

/*

 * Bootstrap the driver for AGP DMA.

 *

 * \todo

 * Investigate whether there is any benefit to storing the WARP microcode in

 * AGP memory.  If not, the microcode may as well always be put in PCI

 * memory.

 *

 * \todo

 * This routine needs to set dma_bs->agp_mode to the mode actually configured

 * in the hardware.  Looking just at the Linux AGP driver code, I don't see

 * an easy way to determine this.

 *

 * \sa mga_do_dma_bootstrap, mga_do_pci_dma_bootstrap

 Acquire AGP. */

	/* In addition to the usual AGP mode configuration, the G200 AGP cards

	 * need to have the AGP mode "manually" set.

 Allocate and bind AGP memory. */

	/* Make drm_legacy_addbufs happy by not trying to create a mapping for

	 * less than a page.

/*

 * Bootstrap the driver for PCI DMA.

 *

 * \todo

 * The algorithm for decreasing the size of the primary DMA buffer could be

 * better.  The size should be rounded up to the nearest page size, then

 * decrease the request size by a single page each pass through the loop.

 *

 * \todo

 * Determine whether the maximum address passed to drm_pci_alloc is correct.

 * The same goes for drm_legacy_addbufs_pci.

 *

 * \sa mga_do_dma_bootstrap, mga_do_agp_dma_bootstrap

	/* Make drm_legacy_addbufs happy by not trying to create a mapping for

	 * less than a page.

 The proper alignment is 0x100 for this mapping */

	/* Other than the bottom two bits being used to encode other

	 * information, there don't appear to be any restrictions on the

	 * alignment of the primary or secondary DMA buffers.

 The proper alignment for this mapping is 0x04 */

	/* The first steps are the same for both PCI and AGP based DMA.  Map

	 * the cards MMIO registers and map a status page.

	/* The DMA initialization procedure is slightly different for PCI and

	 * AGP cards.  AGP cards just allocate a large block of AGP memory and

	 * carve off portions of it for internal uses.  The remaining memory

	 * is returned to user-mode to be used for AGP textures.

	/* If we attempted to initialize the card for AGP DMA but failed,

	 * clean-up any mess that may have been created.

	/* Not only do we want to try and initialized PCI cards for PCI DMA,

	 * but we also try to initialized AGP cards that could not be

	 * initialized for AGP DMA.  This covers the case where we have an AGP

	 * card in a system with an unsupported AGP chipset.  In that case the

	 * card will be detected as AGP, but we won't be able to allocate any

	 * AGP memory, etc.

	/* FIXME: Need to support AGP textures...

	/* Init the primary DMA registers.

 Soft trap, SECEND, SETUPEND */

 DWGSYNC */

	/* Make sure interrupts are disabled here because the uninstall ioctl

	 * may not have been called from userspace and after dev_private

	 * is freed, it's too late.

/* ================================================================

 * Primary DMA stream management

/* ================================================================

 * DMA buffer management

	/* Please don't send us buffers.

	/* We'll send you buffers.

/*

 * Called just before the module is unloaded.

/*

 * Called when the last opener of the device is closed.

/* mga_state.c -- State support for MGA G200/G400 -*- linux-c -*-

 * Created: Thu Jan 27 02:53:43 2000 by jhartmann@precisioninsight.com

 *

 * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.

 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors:

 *    Jeff Hartmann <jhartmann@valinux.com>

 *    Keith Whitwell <keith@tungstengraphics.com>

 *

 * Rewritten by:

 *    Gareth Hughes <gareth@valinux.com>

/* ================================================================

 * DMA hardware state programming functions

	/* Force reset of DWGCTL on G400 (eliminates clip disable bit).

	printk("mga_g400_emit_tex0 %x %x %x\n", tex->texorg, */

	       tex->texctl, tex->texctl2); */

	printk("mga_g400_emit_tex1 %x %x %x\n", tex->texorg,  */

	       tex->texctl, tex->texctl2); */

	/* Padding required due to hardware bug.

	printk("mga_g400_emit_pipe %x\n", pipe); */

 Flush the WARP pipe */

 tex0              */

 tex0              */

 tex1              */

 tex1              */

 tex0 width        */

 tex0 height       */

 tex1 width        */

 tex1 height       */

 Padding required due to hardware bug */

/* ================================================================

 * SAREA state verification

/* Disallow all write destinations except the front and backbuffer.

/* Disallow texture reads from PCI space.

/* ================================================================

 *

 Force reset of DWGCTL */

/* This copies a 64 byte aligned agp region to the frambuffer with a

 * standard blit, the ioctl needs to do checking.

	/* Do something to flush AGP?

 Force reset of DWGCTL */

/* ================================================================

 *

	/* Make sure we restore the 3D state next time.

	/* Make sure we restore the 3D state next time.

	/* Make sure we restore the 3D state next time.

	/* Make sure we restore the 3D state next time.

	/* I would normal do this assignment in the declaration of fence,

	 * but dev_priv may be NULL.

/* mga_irq.c -- IRQ handling for radeon -*- linux-c -*-

/*

 * Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.

 *

 * The Weather Channel (TM) funded Tungsten Graphics to develop the

 * initial release of the Radeon 8500 driver under the XFree86 license.

 * This notice must be preserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER

 * DEALINGS IN THE SOFTWARE.

 *

 * Authors:

 *    Keith Whitwell <keith@tungstengraphics.com>

 *    Eric Anholt <anholt@FreeBSD.org>

 VBLANK interrupt */

 SOFTRAP interrupt */

		/* In addition to clearing the interrupt-pending bit, we

		 * have to write to MGA_PRIMEND to re-start the DMA operation.

	/* Do *NOT* disable the vertical refresh interrupt.  MGA doesn't have

	 * a nice hardware counter that tracks the number of refreshes when

	 * the interrupt is disabled, and the kernel doesn't know the refresh

	 * rate to calculate an estimate.

 MGA_WRITE(MGA_IEN, MGA_VLINEIEN | MGA_SOFTRAPEN); */

	/* Assume that the user has missed the current sequence number

	 * by about a day rather than she wants to wait for years

	 * using fences.

 Disable *all* interrupts */

 Clear bits if they're already high */

	/* Turn on soft trap interrupt.  Vertical blank interrupts are enabled

	 * in mga_enable_vblank.

 Disable *all* interrupts */

/* mga_drv.c -- Matrox G200/G400 driver -*- linux-c -*-

 * Created: Mon Dec 13 01:56:22 1999 by jhartmann@precisioninsight.com

 *

 * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.

 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 * OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors:

 *    Rickard E. (Rik) Faith <faith@valinux.com>

 *    Gareth Hughes <gareth@valinux.com>

/*

 * \file mga_ioc32.c

 *

 * 32-bit ioctl compatibility routines for the MGA DRM.

 *

 * \author Dave Airlie <airlied@linux.ie> with code from patches by Egbert Eich

 *

 *

 * Copyright (C) Paul Mackerras 2005

 * Copyright (C) Egbert Eich 2003,2004

 * Copyright (C) Dave Airlie 2005

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,

 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

 * IN THE SOFTWARE.

/**

 * mga_compat_ioctl - Called whenever a 32-bit process running under

 *                    a 64-bit kernel performs an ioctl on /dev/dri/card<n>.

 *

 * @filp: file pointer.

 * @cmd:  command.

 * @arg:  user argument.

 * return: zero on success or negative number on failure.

/*

 * Copyright 2012 Red Hat Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

/*

 * Authors: Dave Airlie <airlied@redhat.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2012 Red Hat

 *

 * Authors: Matthew Garrett

 *          Dave Airlie

/*

 * DRM driver

/*

 * DRM device

 BAR 1 contains registers */

 Test for MATROX string. */

 Get the PInS offset. */

 Get PInS data structure. */

 Extract the clock values */

 stash G200 SE model number for later use */

/*

 * PCI driver

 SPDX-License-Identifier: GPL-2.0-only

/*

 * G200

/*

 * G200SE

 Permited delta is 0.5% as VESA Specification */

/*

 * G200WB

 set pixclkdis to 1 */

 select PLL Set C */

 reset the PLL */

 program pixel pll register */

 turn pll on */

 select the pixel pll */

 reset dotclock rate bit */

/*

 * G200EV

/*

 * G200EH

/*

 * G200EH3

 same as G200EH

/*

 * G200ER

/*

 * G200EW3

 same as G200WB

/*

 * PLL initialization

/*

 * Copyright 2012 Red Hat Inc.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

/*

 * Authors: Dave Airlie <airlied@redhat.com>

 Probe */

 BAR 0 is VRAM */

 Don't fail on errors, but performance might be reduced. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2010 Matt Turner.

 * Copyright 2012 Red Hat

 *

 * Authors: Matthew Garrett

 *	    Matt Turner

 *	    Dave Airlie

/*

 * This file contains setup code for the CRTC.

 VGA registers */

 VGA registers */

	/* 1- The first step is to warn the BMC of an upcoming mode change.

 we are putting a 1 on the misc<0> line */

	/* 2- Second step to mask and further scan request

	 * This will be done by asserting the remfreqmsk bit (XSPAREREG<7>)

	/* 3a- the third step is to verifu if there is an active scan

	 * We are searching for a 0 on remhsyncsts <XSPAREREG<0>)

	/* 3b- this step occurs only if the remove is actually scanning

	 * we are waiting for the end of the frame which is a 1 on

	 * remvsyncsts (XSPAREREG<1>)

 1- The first step is to ensure that the vrsten and hrsten are set */

 2- second step is to assert the rstlvl2 */

 wait 10 us */

 3- deassert rstlvl2 */

 4- remove mask of scan request */

 5- put back a 0 on the misc<0> line */

/*

 * This is how the framebuffer base address is stored in g200 cards:

 *   * Assume @offset is the gpu_addr variable of the framebuffer object

 *   * Then addr is the number of _pixels_ (not bytes) from the start of

 *     VRAM to the first pixel we want to display. (divided by 2 for 32bit

 *     framebuffers)

 *   * addr is stored in the CRTCEXT0, CRTCC and CRTCD registers

 *      addr<20> -> CRTCEXT0<6>

 *      addr<19-16> -> CRTCEXT0<3-0>

 *      addr<15-8> -> CRTCC<7-0>

 *      addr<7-0> -> CRTCD<7-0>

 *

 *  CRTCEXT0 has to be programmed last to trigger an update and make the

 *  new addr variable take effect.

	/*

	 * Can't store addresses any higher than that, but we also

	 * don't have more than 16 MiB of memory, so it should be fine.

 0x00: */        0,    0,    0,    0,    0,    0, 0x00,    0,

 0x08: */        0,    0,    0,    0,    0,    0,    0,    0,

 0x10: */        0,    0,    0,    0,    0,    0,    0,    0,

 0x18: */     0x00,    0, 0xC9, 0xFF, 0xBF, 0x20, 0x1F, 0x20,

 0x20: */     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

 0x28: */     0x00, 0x00, 0x00, 0x00,    0,    0,    0, 0x40,

 0x30: */     0x00, 0xB0, 0x00, 0xC2, 0x34, 0x14, 0x02, 0x83,

 0x38: */     0x00, 0x93, 0x00, 0x77, 0x00, 0x00, 0x00, 0x3A,

 0x40: */        0,    0,    0,    0,    0,    0,    0,    0,

 0x48: */        0,    0,    0,    0,    0,    0,    0,    0

 Work around hardware quirk */

 vrsten */

 hrsten */

 linecomp */

/*

 * Calculates the HW offset value from the framebuffer's pitch. The

 * offset is a multiple of the pixel size and depends on the display

 * format.

 BUG: We should have caught this problem already. */

 undocumented magic value */

 implicitly sets maxhipri to 0 */

	/*

	 * TODO: replace busy waiting with vblank IRQ; put

	 *       msleep(50) before changing SCROFF

	/*

	 * TODO: replace busy waiting with vblank IRQ; put

	 *       msleep(50) before changing SCROFF

/*

 * Connector

 Validate the mode input by the user */

/*

 * Simple Display Pipe

 TODO: Use mapping abstraction properly */

 Always scanout image at VRAM offset 0 */

 update PLL settings */

 must be set to NULL here */

/*

 * Mode config

 FIXME: legacy gamma tables; convert to CRTC state */

 SPDX-License-Identifier: GPL-2.0

/*

 * Test cases for the drm_rect functions

	/*

	 * Make sure we don't divide by zero when dst

	 * width/height is zero and dst and clip do not intersect.

 1:1 scaling */

 2:1 scaling */

 1:2 scaling */

 1:1 scaling top/left clip */

 1:1 scaling bottom/right clip */

 2:1 scaling top/left clip */

 2:1 scaling bottom/right clip */

 1:2 scaling top/left clip */

 1:2 scaling bottom/right clip */

	/*

	 * 'clip.x2 - dst.x1 >= dst width' could result a negative

	 * src rectangle width which is no longer expected by the

	 * code as it's using unsigned types. This could lead to

	 * the clipped source rectangle appering visible when it

	 * should have been fully clipped. Make sure both rectangles

	 * end up invisible.

 SPDX-License-Identifier: GPL-2.0

/*

 * Test case for drm_damage_helper functions

 just enough so that drm_plane_enable_fb_damage_clips() works */

 0 is an invalid id */

	/*

	 * Round down x1/y1 and round up x2/y2. This is because damage is not in

	 * 16.16 fixed point so to catch all pixels.

 common mocked structs many tests need */

 Plane src same as fb size. */

 Plane src has fractional part. */

 Plane src moved since old plane state. */

 Plane src has fractional part and it moved since old plane state. */

 Damage set to plane src */

 Damage intersect with plane src. */

 Damage clip outside plane src */

 Plane src has fractional part. */

 Plane src has fractional part. */

 Damage intersect with plane src. */

 Plane src has fractional part. */

 Damage clip outside plane src */

 Plane src moved since old plane state. */

 Plane src with fractional part moved since old plane state. */

 Damage intersect with plane src. */

 2 damage clips. */

 2 damage clips, one intersect plane src. */

 2 damage clips, one outside plane src. */

 2 damage clips, one outside plane src. */

 2 damage clips, one outside plane src. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Test cases for the drm_plane_helper functions

 Simple clipping, no scaling. */

 Rotated clipping + reflection, no scaling. */

 Check whether positioning works correctly. */

 Simple scaling tests. */

 Testing rounding errors. */

 Should not be rounded to 0x20001, which would be upscaling. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Common file for modeset selftests.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Test cases for for the DRM DP MST helpers

	/*

	 * Compare struct members manually for request types which can't be

	 * compared simply using memcmp(). This is because said request types

	 * contain pointers to other allocated structs

 Clear everything but the req_type for the input */

/*

 * Copyright Â© 2016 Intel Corporation

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING

 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

 * IN THE SOFTWARE.

 Embed the line number into the parameter name so that we can order tests */

 Tests are listed in natural order in drm_*_selftests.h */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Test cases for the drm_mm range manager

 Start with some simple checks on initialising the struct drm_mm */

 After creation, it should all be one massive hole */

 After filling the range entirely, there should be no holes */

 And then after emptying it again, the massive hole should be back */

	/* Create a small drm_mm with a couple of nodes and a few holes, and

	 * check that the debug iterator doesn't explode over a trivial drm_mm.

	/* For exercising drm_mm_reserve_node(), we want to check that

	 * reservations outside of the drm_mm range are rejected, and to

	 * overlapping and otherwise already occupied ranges. Afterwards,

	 * the tree and nodes should be intact.

 After random insertion the nodes should be in order */

 Repeated use should then fail */

 Remove and reinsert should work */

 Overlapping use should then fail */

 Remove several, reinsert, check full */

 Fill a range with lots of nodes, check it doesn't fail too early */

 After random insertion the nodes should be in order */

 Repeated use should then fail */

 Remove one and reinsert, as the only hole it should refill itself */

 Remove several, reinsert, check full */

	/* Reuse igt_insert to exercise replacement by inserting a dummy node,

	 * then replacing it with the intended node. We want to check that

	 * the tree is intact and all the information we need is carried

	 * across to the target node.

	/* Very similar to __igt_insert(), but now instead of populating the

	 * full range of the drm_mm, we try to fill a small portion of it.

 Remove one and reinsert, it should refill itself */

 Check that requests outside the bounds of drm_mm are rejected. */

 introduce fragmentation by freeing every other node */

	/* We need 4 * insert_size nodes to hold intermediate allocated

	 * drm_mm nodes.

	 * 1 times for prepare_igt_frag()

	 * 1 times for get_insert_time()

	 * 2 times for get_insert_time()

	/* For BOTTOMUP and TOPDOWN, we first fragment the

	 * address space using prepare_igt_frag() and then try to verify

	 * that that insertions scale quadratically from 10k to 20k insertions

	/* For each of the possible insertion modes, we pick a few

	 * arbitrary alignments and check that the inserted node

	 * meets our requirements.

 Check that we can align to the full u64 address space */

	/* Here we populate a full drm_mm and then try and insert a new node

	 * by evicting other nodes in a random order. The drm_mm_scan should

	 * pick the first matching hole it finds from the random list. We

	 * repeat that for different allocation strategies, alignments and

	 * sizes to try and stress the hole finder.

 First check that using the scanner doesn't break the mm */

	/* Like igt_evict() but now we are limiting the search to a

	 * small portion of the full drm_mm.

	/* When allocating top-down, we expect to be returned a node

	 * from a suitable hole at the top of the drm_mm. We check that

	 * the returned node does match the highest available slot.

	/* Like igt_topdown, but instead of searching for the last hole,

	 * we search for the first.

	/* Color adjustment complicates everything. First we just check

	 * that when we insert a node we apply any color_adjustment callback.

	 * The callback we use should ensure that there is a gap between

	 * any two nodes, and so after each insertion we check that those

	 * holes are inserted and that they are preserved.

 Now, let's start experimenting with applying a color callback */

	/* Check that the drm_mm_scan also honours color adjustment when

	 * choosing its victims to create a hole. Our color_adjust does not

	 * allow two nodes to be placed together without an intervening hole

	 * enlarging the set of victims that must be evicted.

	/* Like igt_color_evict(), but limited to small portion of the full

	 * drm_mm range.

 SPDX-License-Identifier: GPL-2.0

/*

 * Test cases for the drm_format functions

 Test invalid arguments */

 Test 1 plane format */

 Test 2 planes format */

 Test 3 planes format */

 Test a tiled format */

 Test invalid arguments */

 Test 1 plane format */

 Test 2 planes format */

 Test 3 planes format */

 Test a tiled format */

 Test invalid arguments */

 Test 1 plane 8 bits per pixel format */

 Test 1 plane 16 bits per pixel format */

 Test 1 plane 24 bits per pixel format */

 Test 1 plane 32 bits per pixel format */

 Test 2 planes format */

 Test 3 planes 8 bits per pixel format */

 Test tiled format */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2019 Bootlin

 SPDX-License-Identifier: GPL-2.0

/*

 * Test cases for the drm_framebuffer functions

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2014-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Treat context OTables as resources to make use of the resource

 * backing MOB eviction mechanism, that is used to read back the COTable

 * whenever the backing MOB is evicted.

/**

 * struct vmw_cotable - Context Object Table resource

 *

 * @res: struct vmw_resource we are deriving from.

 * @ctx: non-refcounted pointer to the owning context.

 * @size_read_back: Size of data read back during eviction.

 * @seen_entries: Seen entries in command stream for this cotable.

 * @type: The cotable type.

 * @scrubbed: Whether the cotable has been scrubbed.

 * @resource_list: List of resources in the cotable.

/**

 * struct vmw_cotable_info - Static info about cotable types

 *

 * @min_initial_entries: Min number of initial intries at cotable allocation

 * for this cotable type.

 * @size: Size of each entry.

 * @unbind_func: Unbind call-back function.

/*

 * Cotables with bindings that we remove must be scrubbed first,

 * otherwise, the device will swap in an invalid context when we remove

 * bindings before scrubbing a cotable...

/**

 * vmw_cotable - Convert a struct vmw_resource pointer to a struct

 * vmw_cotable pointer

 *

 * @res: Pointer to the resource.

/**

 * vmw_cotable_destroy - Cotable resource destroy callback

 *

 * @res: Pointer to the cotable resource.

 *

 * There is no device cotable destroy command, so this function only

 * makes sure that the resource id is set to invalid.

/**

 * vmw_cotable_unscrub - Undo a cotable unscrub operation

 *

 * @res: Pointer to the cotable resource

 *

 * This function issues commands to (re)bind the cotable to

 * its backing mob, which needs to be validated and reserved at this point.

 * This is identical to bind() except the function interface looks different.

/**

 * vmw_cotable_bind - Undo a cotable unscrub operation

 *

 * @res: Pointer to the cotable resource

 * @val_buf: Pointer to a struct ttm_validate_buffer prepared by the caller

 * for convenience / fencing.

 *

 * This function issues commands to (re)bind the cotable to

 * its backing mob, which needs to be validated and reserved at this point.

	/*

	 * The create() callback may have changed @res->backup without

	 * the caller noticing, and with val_buf->bo still pointing to

	 * the old backup buffer. Although hackish, and not used currently,

	 * take the opportunity to correct the value here so that it's not

	 * misused in the future.

/**

 * vmw_cotable_scrub - Scrub the cotable from the device.

 *

 * @res: Pointer to the cotable resource.

 * @readback: Whether initiate a readback of the cotable data to the backup

 * buffer.

 *

 * In some situations (context swapouts) it might be desirable to make the

 * device forget about the cotable without performing a full unbind. A full

 * unbind requires reserved backup buffers and it might not be possible to

 * reserve them due to locking order violation issues. The vmw_cotable_scrub

 * function implements a partial unbind() without that requirement but with the

 * following restrictions.

 * 1) Before the cotable is again used by the GPU, vmw_cotable_unscrub() must

 *    be called.

 * 2) Before the cotable backing buffer is used by the CPU, or during the

 *    resource destruction, vmw_cotable_unbind() must be called.

 Trigger a create() on next validate. */

/**

 * vmw_cotable_unbind - Cotable resource unbind callback

 *

 * @res: Pointer to the cotable resource.

 * @readback: Whether to read back cotable data to the backup buffer.

 * @val_buf: Pointer to a struct ttm_validate_buffer prepared by the caller

 * for convenience / fencing.

 *

 * Unbinds the cotable from the device and fences the backup buffer.

/**

 * vmw_cotable_readback - Read back a cotable without unbinding.

 *

 * @res: The cotable resource.

 *

 * Reads back a cotable to its backing mob without scrubbing the MOB from

 * the cotable. The MOB is fenced for subsequent CPU access.

/**

 * vmw_cotable_resize - Resize a cotable.

 *

 * @res: The cotable resource.

 * @new_size: The new size.

 *

 * Resizes a cotable and binds the new backup buffer.

 * On failure the cotable is left intact.

 * Important! This function may not fail once the MOB switch has been

 * committed to hardware. That would put the device context in an

 * invalid state which we can't currently recover from.

	/*

	 * While device is processing, Allocate and reserve a buffer object

	 * for the new COTable. Initially pin the buffer object to make sure

	 * we can use tryreserve without failure.

	/*

	 * Do a page by page copy of COTables. This eliminates slow vmap()s.

	 * This should really be a TTM utility.

 Unpin new buffer, and switch backup buffers. */

	/*

	 * Now tell the device to switch. If this fails, then we need to

	 * revert the full resize.

 Let go of the old mob. */

 Release the pin acquired in vmw_bo_init */

/**

 * vmw_cotable_create - Cotable resource create callback

 *

 * @res: Pointer to a cotable resource.

 *

 * There is no separate create command for cotables, so this callback, which

 * is called before bind() in the validation sequence is instead used for two

 * things.

 * 1) Unscrub the cotable if it is scrubbed and still attached to a backup

 *    buffer.

 * 2) Resize the cotable if needed.

 Check whether we need to resize the cotable */

/**

 * vmw_hw_cotable_destroy - Cotable hw_destroy callback

 *

 * @res: Pointer to a cotable resource.

 *

 * The final (part of resource destruction) destroy callback.

/**

 * vmw_cotable_free - Cotable resource destructor

 *

 * @res: Pointer to a cotable resource.

/**

 * vmw_cotable_alloc - Create a cotable resource

 *

 * @dev_priv: Pointer to a device private struct.

 * @ctx: Pointer to the context resource.

 * The cotable resource will not add a refcount.

 * @type: The cotable type.

/**

 * vmw_cotable_notify - Notify the cotable about an item creation

 *

 * @res: Pointer to a cotable resource.

 * @id: Item id.

 Trigger a call to create() on next validate */

/**

 * vmw_cotable_add_resource - add a view to the cotable's list of active views.

 *

 * @res: pointer struct vmw_resource representing the cotable.

 * @head: pointer to the struct list_head member of the resource, dedicated

 * to the cotable active resource list.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright Â© 2018 VMware, Inc., Palo Alto, CA., USA

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * struct vmw_validation_bo_node - Buffer object validation metadata.

 * @base: Metadata used for TTM reservation- and validation.

 * @hash: A hash entry used for the duplicate detection hash table.

 * @coherent_count: If switching backup buffers, number of new coherent

 * resources that will have this buffer as a backup buffer.

 * @as_mob: Validate as mob.

 * @cpu_blit: Validate for cpu blit access.

 *

 * Bit fields are used since these structures are allocated and freed in

 * large numbers and space conservation is desired.

/**

 * struct vmw_validation_res_node - Resource validation metadata.

 * @head: List head for the resource validation list.

 * @hash: A hash entry used for the duplicate detection hash table.

 * @res: Reference counted resource pointer.

 * @new_backup: Non ref-counted pointer to new backup buffer to be assigned

 * to a resource.

 * @new_backup_offset: Offset into the new backup mob for resources that can

 * share MOBs.

 * @no_buffer_needed: Kernel does not need to allocate a MOB during validation,

 * the command stream provides a mob bind operation.

 * @switching_backup: The validation process is switching backup MOB.

 * @first_usage: True iff the resource has been seen only once in the current

 * validation batch.

 * @reserved: Whether the resource is currently reserved by this process.

 * @dirty_set: Change dirty status of the resource.

 * @dirty: Dirty information VMW_RES_DIRTY_XX.

 * @private: Optionally additional memory for caller-private data.

 *

 * Bit fields are used since these structures are allocated and freed in

 * large numbers and space conservation is desired.

/**

 * vmw_validation_mem_alloc - Allocate kernel memory from the validation

 * context based allocator

 * @ctx: The validation context

 * @size: The number of bytes to allocated.

 *

 * The memory allocated may not exceed PAGE_SIZE, and the returned

 * address is aligned to sizeof(long). All memory allocated this way is

 * reclaimed after validation when calling any of the exported functions:

 * vmw_validation_unref_lists()

 * vmw_validation_revert()

 * vmw_validation_done()

 *

 * Return: Pointer to the allocated memory on success. NULL on failure.

/**

 * vmw_validation_mem_free - Free all memory allocated using

 * vmw_validation_mem_alloc()

 * @ctx: The validation context

 *

 * All memory previously allocated for this context using

 * vmw_validation_mem_alloc() is freed.

/**

 * vmw_validation_find_bo_dup - Find a duplicate buffer object entry in the

 * validation context's lists.

 * @ctx: The validation context to search.

 * @vbo: The buffer object to search for.

 *

 * Return: Pointer to the struct vmw_validation_bo_node referencing the

 * duplicate, or NULL if none found.

/**

 * vmw_validation_find_res_dup - Find a duplicate resource entry in the

 * validation context's lists.

 * @ctx: The validation context to search.

 * @res: Reference counted resource pointer.

 *

 * Return: Pointer to the struct vmw_validation_bo_node referencing the

 * duplicate, or NULL if none found.

/**

 * vmw_validation_add_bo - Add a buffer object to the validation context.

 * @ctx: The validation context.

 * @vbo: The buffer object.

 * @as_mob: Validate as mob, otherwise suitable for GMR operations.

 * @cpu_blit: Validate in a page-mappable location.

 *

 * Return: Zero on success, negative error code otherwise.

/**

 * vmw_validation_add_resource - Add a resource to the validation context.

 * @ctx: The validation context.

 * @res: The resource.

 * @priv_size: Size of private, additional metadata.

 * @dirty: Whether to change dirty status.

 * @p_node: Output pointer of additional metadata address.

 * @first_usage: Whether this was the first time this resource was seen.

 *

 * Return: Zero on success, negative error code otherwise.

 Overwriting previous information here is intentional! */

/**

 * vmw_validation_res_set_dirty - Register a resource dirty set or clear during

 * validation.

 * @ctx: The validation context.

 * @val_private: The additional meta-data pointer returned when the

 * resource was registered with the validation context. Used to identify

 * the resource.

 * @dirty: Dirty information VMW_RES_DIRTY_XX

 Overwriting previous information here is intentional! */

/**

 * vmw_validation_res_switch_backup - Register a backup MOB switch during

 * validation.

 * @ctx: The validation context.

 * @val_private: The additional meta-data pointer returned when the

 * resource was registered with the validation context. Used to identify

 * the resource.

 * @vbo: The new backup buffer object MOB. This buffer object needs to have

 * already been registered with the validation context.

 * @backup_offset: Offset into the new backup MOB.

/**

 * vmw_validation_res_reserve - Reserve all resources registered with this

 * validation context.

 * @ctx: The validation context.

 * @intr: Use interruptible waits when possible.

 *

 * Return: Zero on success, -ERESTARTSYS if interrupted. Negative error

 * code on failure.

/**

 * vmw_validation_res_unreserve - Unreserve all reserved resources

 * registered with this validation context.

 * @ctx: The validation context.

 * @backoff: Whether this is a backoff- of a commit-type operation. This

 * is used to determine whether to switch backup MOBs or not.

/**

 * vmw_validation_bo_validate_single - Validate a single buffer object.

 * @bo: The TTM buffer object base.

 * @interruptible: Whether to perform waits interruptible if possible.

 * @validate_as_mob: Whether to validate in MOB memory.

 *

 * Return: Zero on success, -ERESTARTSYS if interrupted. Negative error

 * code on failure.

	/**

	 * Put BO in VRAM if there is space, otherwise as a GMR.

	 * If there is no space in VRAM and GMR ids are all used up,

	 * start evicting GMRs to make room. If the DMA buffer can't be

	 * used as a GMR, this will return -ENOMEM.

	/**

	 * If that failed, try VRAM again, this time evicting

	 * previous contents.

/**

 * vmw_validation_bo_validate - Validate all buffer objects registered with

 * the validation context.

 * @ctx: The validation context.

 * @intr: Whether to perform waits interruptible if possible.

 *

 * Return: Zero on success, -ERESTARTSYS if interrupted,

 * negative error code on failure.

		/*

		 * Rather than having the resource code allocating the bo

		 * dirty tracker in resource_unreserve() where we can't fail,

		 * Do it here when validating the buffer object.

/**

 * vmw_validation_res_validate - Validate all resources registered with the

 * validation context.

 * @ctx: The validation context.

 * @intr: Whether to perform waits interruptible if possible.

 *

 * Before this function is called, all resource backup buffers must have

 * been validated.

 *

 * Return: Zero on success, -ERESTARTSYS if interrupted,

 * negative error code on failure.

 Check if the resource switched backup buffer */

/**

 * vmw_validation_drop_ht - Reset the hash table used for duplicate finding

 * and unregister it from this validation context.

 * @ctx: The validation context.

 *

 * The hash table used for duplicate finding is an expensive resource and

 * may be protected by mutexes that may cause deadlocks during resource

 * unreferencing if held. After resource- and buffer object registering,

 * there is no longer any use for this hash table, so allow freeing it

 * either to shorten any mutex locking time, or before resources- and

 * buffer objects are freed during validation context cleanup.

/**

 * vmw_validation_unref_lists - Unregister previously registered buffer

 * object and resources.

 * @ctx: The validation context.

 *

 * Note that this function may cause buffer object- and resource destructors

 * to be invoked.

	/*

	 * No need to detach each list entry since they are all freed with

	 * vmw_validation_free_mem. Just make the inaccessible.

/**

 * vmw_validation_prepare - Prepare a validation context for command

 * submission.

 * @ctx: The validation context.

 * @mutex: The mutex used to protect resource reservation.

 * @intr: Whether to perform waits interruptible if possible.

 *

 * Note that the single reservation mutex @mutex is an unfortunate

 * construct. Ideally resource reservation should be moved to per-resource

 * ww_mutexes.

 * If this functions doesn't return Zero to indicate success, all resources

 * are left unreserved but still referenced.

 * Return: Zero on success, -ERESTARTSYS if interrupted, negative error code

 * on error.

/**

 * vmw_validation_revert - Revert validation actions if command submission

 * failed.

 *

 * @ctx: The validation context.

 *

 * The caller still needs to unref resources after a call to this function.

/**

 * vmw_validation_done - Commit validation actions after command submission

 * success.

 * @ctx: The validation context.

 * @fence: Fence with which to fence all buffer objects taking part in the

 * command submission.

 *

 * The caller does NOT need to unref resources after a call to this function.

/**

 * vmw_validation_preload_bo - Preload the validation memory allocator for a

 * call to vmw_validation_add_bo().

 * @ctx: Pointer to the validation context.

 *

 * Iff this function returns successfully, the next call to

 * vmw_validation_add_bo() is guaranteed not to sleep. An error is not fatal

 * but voids the guarantee.

 *

 * Returns: Zero if successful, %-EINVAL otherwise.

/**

 * vmw_validation_preload_res - Preload the validation memory allocator for a

 * call to vmw_validation_add_res().

 * @ctx: Pointer to the validation context.

 * @size: Size of the validation node extra data. See below.

 *

 * Iff this function returns successfully, the next call to

 * vmw_validation_add_res() with the same or smaller @size is guaranteed not to

 * sleep. An error is not fatal but voids the guarantee.

 *

 * Returns: Zero if successful, %-EINVAL otherwise.

/**

 * vmw_validation_bo_backoff - Unreserve buffer objects registered with a

 * validation context

 * @ctx: The validation context

 *

 * This function unreserves the buffer objects previously reserved using

 * vmw_validation_bo_reserve. It's typically used as part of an error path

	/*

	 * Switching coherent resource backup buffers failed.

	 * Release corresponding buffer object dirty trackers.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009 - 2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Helper macro to get dx_ctx_node if available otherwise print an error

 * message. This is for use in command verifier function where if dx_ctx_node

 * is not set then command is invalid.

/**

 * struct vmw_relocation - Buffer object relocation

 *

 * @head: List head for the command submission context's relocation list

 * @vbo: Non ref-counted pointer to buffer object

 * @mob_loc: Pointer to location for mob id to be modified

 * @location: Pointer to location for guest pointer to be modified

/**

 * enum vmw_resource_relocation_type - Relocation type for resources

 *

 * @vmw_res_rel_normal: Traditional relocation. The resource id in the

 * command stream is replaced with the actual id after validation.

 * @vmw_res_rel_nop: NOP relocation. The command is unconditionally replaced

 * with a NOP.

 * @vmw_res_rel_cond_nop: Conditional NOP relocation. If the resource id after

 * validation is -1, the command is replaced with a NOP. Otherwise no action.

 * @vmw_res_rel_max: Last value in the enum - used for error checking

/**

 * struct vmw_resource_relocation - Relocation info for resources

 *

 * @head: List head for the software context's relocation list.

 * @res: Non-ref-counted pointer to the resource.

 * @offset: Offset of single byte entries into the command buffer where the id

 * that needs fixup is located.

 * @rel_type: Type of relocation.

/**

 * struct vmw_ctx_validation_info - Extra validation metadata for contexts

 *

 * @head: List head of context list

 * @ctx: The context resource

 * @cur: The context's persistent binding state

 * @staged: The binding state changes of this command buffer

/**

 * struct vmw_cmd_entry - Describe a command for the verifier

 *

 * @func: Call-back to handle the command.

 * @user_allow: Whether allowed from the execbuf ioctl.

 * @gb_disable: Whether disabled if guest-backed objects are available.

 * @gb_enable: Whether enabled iff guest-backed objects are available.

 * @cmd_name: Name of the command.

/**

 * vmw_ptr_diff - Compute the offset from a to b in bytes

 *

 * @a: A starting pointer.

 * @b: A pointer offset in the same address space.

 *

 * Returns: The offset in bytes between the two pointers.

/**

 * vmw_execbuf_bindings_commit - Commit modified binding state

 *

 * @sw_context: The command submission context

 * @backoff: Whether this is part of the error path and binding state changes

 * should be ignored

 List entries are freed with the validation context */

/**

 * vmw_bind_dx_query_mob - Bind the DX query MOB if referenced

 *

 * @sw_context: The command submission context

/**

 * vmw_cmd_ctx_first_setup - Perform the setup needed when a context is added to

 * the validate list.

 *

 * @dev_priv: Pointer to the device private:

 * @sw_context: The command submission context

 * @res: Pointer to the resource

 * @node: The validation node holding the context resource metadata

/**

 * vmw_execbuf_res_size - calculate extra size fore the resource validation node

 *

 * @dev_priv: Pointer to the device private struct.

 * @res_type: The resource type.

 *

 * Guest-backed contexts and DX contexts require extra size to store execbuf

 * private information in the validation node. Typically the binding manager

 * associated data structures.

 *

 * Returns: The extra size requirement based on resource type.

/**

 * vmw_execbuf_rcache_update - Update a resource-node cache entry

 *

 * @rcache: Pointer to the entry to update.

 * @res: Pointer to the resource.

 * @private: Pointer to the execbuf-private space in the resource validation

 * node.

/**

 * vmw_execbuf_res_noref_val_add - Add a resource described by an unreferenced

 * rcu-protected pointer to the validation list.

 *

 * @sw_context: Pointer to the software context.

 * @res: Unreferenced rcu-protected pointer to the resource.

 * @dirty: Whether to change dirty status.

 *

 * Returns: 0 on success. Negative error code on failure. Typical error codes

 * are %-EINVAL on inconsistency and %-ESRCH if the resource was doomed.

/**

 * vmw_execbuf_res_noctx_val_add - Add a non-context resource to the resource

 * validation list if it's not already on it

 *

 * @sw_context: Pointer to the software context.

 * @res: Pointer to the resource.

 * @dirty: Whether to change dirty status.

 *

 * Returns: Zero on success. Negative error code on failure.

/**

 * vmw_view_res_val_add - Add a view and the surface it's pointing to to the

 * validation list

 *

 * @sw_context: The software context holding the validation list.

 * @view: Pointer to the view resource.

 *

 * Returns 0 if success, negative error code otherwise.

	/*

	 * First add the resource the view is pointing to, otherwise it may be

	 * swapped out when the view is validated.

/**

 * vmw_view_id_val_add - Look up a view and add it and the surface it's pointing

 * to to the validation list.

 *

 * @sw_context: The software context holding the validation list.

 * @view_type: The view type to look up.

 * @id: view id of the view.

 *

 * The view is represented by a view id and the DX context it's created on, or

 * scheduled for creation on. If there is no DX context set, the function will

 * return an -EINVAL error pointer.

 *

 * Returns: Unreferenced pointer to the resource on success, negative error

 * pointer on failure.

/**

 * vmw_resource_context_res_add - Put resources previously bound to a context on

 * the validation list

 *

 * @dev_priv: Pointer to a device private structure

 * @sw_context: Pointer to a software context used for this command submission

 * @ctx: Pointer to the context resource

 *

 * This function puts all resources that were previously bound to @ctx on the

 * resource validation list. This is part of the context state reemission

 Add all cotables to the validation list. */

 Add all resources bound to the context to the validation list */

/**

 * vmw_resource_relocation_add - Add a relocation to the relocation list

 *

 * @sw_context: Pointer to the software context.

 * @res: The resource.

 * @offset: Offset into the command buffer currently being parsed where the id

 * that needs fixup is located. Granularity is one byte.

 * @rel_type: Relocation type.

/**

 * vmw_resource_relocations_free - Free all relocations on a list

 *

 * @list: Pointer to the head of the relocation list

 Memory is validation context memory, so no need to free it */

/**

 * vmw_resource_relocations_apply - Apply all relocations on a list

 *

 * @cb: Pointer to the start of the command buffer bein patch. This need not be

 * the same buffer as the one being parsed when the relocation list was built,

 * but the contents must be the same modulo the resource ids.

 * @list: Pointer to the head of the relocation list.

 Validate the struct vmw_resource_relocation member size */

/**

 * vmw_resources_reserve - Reserve all resources on the sw_context's resource

 * list.

 *

 * @sw_context: Pointer to the software context.

 *

 * Note that since vmware's command submission currently is protected by the

 * cmdbuf mutex, no fancy deadlock avoidance is required for resources, since

 * only a single thread at once will attempt this.

/**

 * vmw_cmd_res_check - Check that a resource is present and if so, put it on the

 * resource validate list unless it's already there.

 *

 * @dev_priv: Pointer to a device private structure.

 * @sw_context: Pointer to the software context.

 * @res_type: Resource type.

 * @dirty: Whether to change dirty status.

 * @converter: User-space visisble type specific information.

 * @id_loc: Pointer to the location in the command buffer currently being parsed

 * from where the user-space resource id handle is located.

 * @p_res: Pointer to pointer to resource validalidation node. Populated on

 * exit.

/**

 * vmw_rebind_all_dx_query - Rebind DX query associated with the context

 *

 * @ctx_res: context the query belongs to

 *

 * This function assumes binding_mutex is held.

/**

 * vmw_rebind_contexts - Rebind all resources previously bound to referenced

 * contexts.

 *

 * @sw_context: Pointer to the software context.

 *

 * Rebind context binding points that have been scrubbed because of eviction.

/**

 * vmw_view_bindings_add - Add an array of view bindings to a context binding

 * state tracker.

 *

 * @sw_context: The execbuf state used for this command.

 * @view_type: View type for the bindings.

 * @binding_type: Binding type for the bindings.

 * @shader_slot: The shader slot to user for the bindings.

 * @view_ids: Array of view ids to be bound.

 * @num_views: Number of view ids in @view_ids.

 * @first_slot: The binding slot to be used for the first view id in @view_ids.

/**

 * vmw_cmd_cid_check - Check a command header for valid context information.

 *

 * @dev_priv: Pointer to a device private structure.

 * @sw_context: Pointer to the software context.

 * @header: A command header with an embedded user-space context handle.

 *

 * Convenience function: Call vmw_cmd_res_check with the user-space context

 * handle embedded in @header.

/**

 * vmw_execbuf_info_from_res - Get the private validation metadata for a

 * recently validated resource

 *

 * @sw_context: Pointer to the command submission context

 * @res: The resource

 *

 * The resource pointed to by @res needs to be present in the command submission

 * context's resource cache and hence the last resource of that type to be

 * processed by the validation code.

 *

 * Return: a pointer to the private metadata of the resource, or NULL if it

 * wasn't found

/**

 * vmw_query_bo_switch_prepare - Prepare to switch pinned buffer for queries.

 *

 * @dev_priv: The device private structure.

 * @new_query_bo: The new buffer holding query results.

 * @sw_context: The software context used for this command submission.

 *

 * This function checks whether @new_query_bo is suitable for holding query

 * results, and if another buffer currently is pinned for query results. If so,

 * the function prepares the state of @sw_context for switching pinned buffers

 * after successful submission of the current command batch.

/**

 * vmw_query_bo_switch_commit - Finalize switching pinned query buffer

 *

 * @dev_priv: The device private structure.

 * @sw_context: The software context used for this command submission batch.

 *

 * This function will check if we're switching query buffers, and will then,

 * issue a dummy occlusion query wait used as a query barrier. When the fence

 * object following that query wait has signaled, we are sure that all preceding

 * queries have finished, and the old query buffer can be unpinned. However,

 * since both the new query buffer and the old one are fenced with that fence,

 * we can do an asynchronus unpin now, and be sure that the old query buffer

 * won't be moved until the fence has signaled.

 *

 * As mentioned above, both the new - and old query buffers need to be fenced

 * using a sequence emitted *after* calling this function.

	/*

	 * The validate list should still hold references to all

	 * contexts here.

			/*

			 * We pin also the dummy_query_bo buffer so that we

			 * don't need to validate it when emitting dummy queries

			 * in context destroy paths.

/**

 * vmw_translate_mob_ptr - Prepare to translate a user-space buffer handle

 * to a MOB id.

 *

 * @dev_priv: Pointer to a device private structure.

 * @sw_context: The software context used for this command batch validation.

 * @id: Pointer to the user-space handle to be translated.

 * @vmw_bo_p: Points to a location that, on successful return will carry a

 * non-reference-counted pointer to the buffer object identified by the

 * user-space handle in @id.

 *

 * This function saves information needed to translate a user-space buffer

 * handle to a MOB id. The translation does not take place immediately, but

 * during a call to vmw_apply_relocations().

 *

 * This function builds a relocation list and a list of buffers to validate. The

 * former needs to be freed using either vmw_apply_relocations() or

 * vmw_free_relocations(). The latter needs to be freed using

 * vmw_clear_validations.

/**

 * vmw_translate_guest_ptr - Prepare to translate a user-space buffer handle

 * to a valid SVGAGuestPtr

 *

 * @dev_priv: Pointer to a device private structure.

 * @sw_context: The software context used for this command batch validation.

 * @ptr: Pointer to the user-space handle to be translated.

 * @vmw_bo_p: Points to a location that, on successful return will carry a

 * non-reference-counted pointer to the DMA buffer identified by the user-space

 * handle in @id.

 *

 * This function saves information needed to translate a user-space buffer

 * handle to a valid SVGAGuestPtr. The translation does not take place

 * immediately, but during a call to vmw_apply_relocations().

 *

 * This function builds a relocation list and a list of buffers to validate.

 * The former needs to be freed using either vmw_apply_relocations() or

 * vmw_free_relocations(). The latter needs to be freed using

 * vmw_clear_validations.

/**

 * vmw_cmd_dx_define_query - validate SVGA_3D_CMD_DX_DEFINE_QUERY command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context used for this command submission.

 * @header: Pointer to the command header in the command stream.

 *

 * This function adds the new query into the query COTABLE

/**

 * vmw_cmd_dx_bind_query - validate SVGA_3D_CMD_DX_BIND_QUERY command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context used for this command submission.

 * @header: Pointer to the command header in the command stream.

 *

 * The query bind operation will eventually associate the query ID with its

 * backing MOB.  In this function, we take the user mode MOB ID and use

 * vmw_translate_mob_ptr() to translate it to its kernel mode equivalent.

	/*

	 * Look up the buffer pointed to by q.mobid, put it on the relocation

	 * list so its kernel mode MOB ID can be filled in later

/**

 * vmw_cmd_begin_gb_query - validate SVGA_3D_CMD_BEGIN_GB_QUERY command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context used for this command submission.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_begin_query - validate SVGA_3D_CMD_BEGIN_QUERY command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context used for this command submission.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_end_gb_query - validate SVGA_3D_CMD_END_GB_QUERY command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context used for this command submission.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_end_query - validate SVGA_3D_CMD_END_QUERY command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context used for this command submission.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_wait_gb_query - validate SVGA_3D_CMD_WAIT_GB_QUERY command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context used for this command submission.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_wait_query - validate SVGA_3D_CMD_WAIT_QUERY command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context used for this command submission.

 * @header: Pointer to the command header in the command stream.

 Make sure device and verifier stays in sync. */

 Make sure DMA doesn't cross BO boundaries. */

/**

 * vmw_cmd_res_switch_backup - Utility function to handle backup buffer

 * switching

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @res: Pointer to the resource.

 * @buf_id: Pointer to the user-space backup buffer handle in the command

 * stream.

 * @backup_offset: Offset of backup into MOB.

 *

 * This function prepares for registering a switch of backup buffers in the

 * resource metadata just prior to unreserving. It's basically a wrapper around

 * vmw_cmd_res_switch_backup with a different interface.

/**

 * vmw_cmd_switch_backup - Utility function to handle backup buffer switching

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @res_type: The resource type.

 * @converter: Information about user-space binding for this resource type.

 * @res_id: Pointer to the user-space resource handle in the command stream.

 * @buf_id: Pointer to the user-space backup buffer handle in the command

 * stream.

 * @backup_offset: Offset of backup into MOB.

 *

 * This function prepares for registering a switch of backup buffers in the

 * resource metadata just prior to unreserving. It's basically a wrapper around

 * vmw_cmd_res_switch_backup with a different interface.

/**

 * vmw_cmd_bind_gb_surface - Validate SVGA_3D_CMD_BIND_GB_SURFACE command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_update_gb_image - Validate SVGA_3D_CMD_UPDATE_GB_IMAGE command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_update_gb_surface - Validate SVGA_3D_CMD_UPDATE_GB_SURFACE command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_readback_gb_image - Validate SVGA_3D_CMD_READBACK_GB_IMAGE command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_readback_gb_surface - Validate SVGA_3D_CMD_READBACK_GB_SURFACE

 * command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_invalidate_gb_image - Validate SVGA_3D_CMD_INVALIDATE_GB_IMAGE

 * command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_invalidate_gb_surface - Validate SVGA_3D_CMD_INVALIDATE_GB_SURFACE

 * command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_shader_define - Validate SVGA_3D_CMD_SHADER_DEFINE command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_shader_destroy - Validate SVGA_3D_CMD_SHADER_DESTROY command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_set_shader - Validate SVGA_3D_CMD_SET_SHADER command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

		/*

		 * This is the compat shader path - Per device guest-backed

		 * shaders, but user-space thinks it's per context host-

		 * backed shaders.

/**

 * vmw_cmd_set_shader_const - Validate SVGA_3D_CMD_SET_SHADER_CONST command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_bind_gb_shader - Validate SVGA_3D_CMD_BIND_GB_SHADER command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_set_single_constant_buffer - Validate

 * SVGA_3D_CMD_DX_SET_SINGLE_CONSTANT_BUFFER command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_set_shader_res - Validate SVGA_3D_CMD_DX_SET_SHADER_RESOURCES

 * command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_set_shader - Validate SVGA_3D_CMD_DX_SET_SHADER command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_set_vertex_buffers - Validates SVGA_3D_CMD_DX_SET_VERTEX_BUFFERS

 * command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_set_index_buffer - Validate

 * SVGA_3D_CMD_DX_IA_SET_INDEX_BUFFER command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_set_rendertargets - Validate SVGA_3D_CMD_DX_SET_RENDERTARGETS

 * command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_clear_rendertarget_view - Validate

 * SVGA_3D_CMD_DX_CLEAR_RENDERTARGET_VIEW command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_clear_depthstencil_view - Validate

 * SVGA_3D_CMD_DX_CLEAR_DEPTHSTENCIL_VIEW command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

	/*

	 * This is based on the fact that all affected define commands have the

	 * same initial command body layout.

/**

 * vmw_cmd_dx_set_so_targets - Validate SVGA_3D_CMD_DX_SET_SOTARGETS command.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

	/*

	 * This is based on the fact that all affected define commands have

	 * the same initial command body layout.

/**

 * vmw_cmd_dx_check_subresource - Validate SVGA_3D_CMD_DX_[X]_SUBRESOURCE

 * command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_view_remove - validate a view remove command and schedule the view

 * resource for removal.

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

 *

 * Check that the view exists, and if it was not created using this command

 * batch, conditionally make this command a NOP.

	/*

	 * If the view wasn't created during this command batch, it might

	 * have been removed due to a context swapout, so add a

	 * relocation to conditionally make this command a NOP to avoid

	 * device errors.

/**

 * vmw_cmd_dx_define_shader - Validate SVGA_3D_CMD_DX_DEFINE_SHADER command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_destroy_shader - Validate SVGA_3D_CMD_DX_DESTROY_SHADER command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_bind_shader - Validate SVGA_3D_CMD_DX_BIND_SHADER command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_dx_genmips - Validate SVGA_3D_CMD_DX_GENMIPS command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

	/*

	 * Normally the shader-resource view is not gpu-dirtying, but for

	 * this particular command it is...

	 * So mark the last looked-up surface, which is the surface

	 * the view points to, gpu-dirty.

/**

 * vmw_cmd_dx_transfer_from_buffer - Validate

 * SVGA_3D_CMD_DX_TRANSFER_FROM_BUFFER command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

/**

 * vmw_cmd_intra_surface_copy - Validate SVGA_3D_CMD_INTRA_SURFACE_COPY command

 *

 * @dev_priv: Pointer to a device private struct.

 * @sw_context: The software context being used for this batch.

 * @header: Pointer to the command header in the command stream.

	/*

	 * When device does not support SM5 then streamoutput with mob command is

	 * not available to user-space. Simply return in this case.

	/*

	 * With SM5 capable device if lookup fails then user-space probably used

	 * old streamoutput define command. Return without an error.

	/*

	 * When device does not support SM5 then streamoutput with mob command is

	 * not available to user-space. Simply return in this case.

	/*

	 * With SM5 capable device if lookup fails then user-space probably used

	 * old streamoutput define command. Return without an error.

 Only one SO set to context at a time. */

 SM commands */

	/*

	 * SM5 commands

 Handle any none 3D commands */

 Memory is validation context memory, so no need to free it */

/*

 * vmw_execbuf_fence_commands - create and submit a command stream fence

 *

 * Creates a fence object and submits a command stream marker.

 * If this fails for some reason, We sync the fifo and return NULL.

 * It is then safe to fence buffers with a NULL pointer.

 *

 * If @p_handle is not NULL @file_priv must also not be NULL. Creates a

 * userspace handle if @p_handle is not NULL, otherwise not.

 p_handle implies file_priv. */

/**

 * vmw_execbuf_copy_fence_user - copy fence object information to user-space.

 *

 * @dev_priv: Pointer to a vmw_private struct.

 * @vmw_fp: Pointer to the struct vmw_fpriv representing the calling file.

 * @ret: Return value from fence object creation.

 * @user_fence_rep: User space address of a struct drm_vmw_fence_rep to which

 * the information should be copied.

 * @fence: Pointer to the fenc object.

 * @fence_handle: User-space fence handle.

 * @out_fence_fd: exported file descriptor for the fence.  -1 if not used

 * @sync_file:  Only used to clean up in case of an error in this function.

 *

 * This function copies fence information to user-space. If copying fails, the

 * user-space struct drm_vmw_fence_rep::error member is hopefully left

 * untouched, and if it's preloaded with an -EFAULT by user-space, the error

 * will hopefully be detected.

 *

 * Also if copying fails, user-space will be unable to signal the fence object

 * so we wait for it immediately, and then unreference the user-space reference.

	/*

	 * copy_to_user errors will be detected by user space not seeing

	 * fence_rep::error filled in. Typically user-space would have pre-set

	 * that member to -EFAULT.

	/*

	 * User-space lost the fence object. We need to sync and unreference the

	 * handle.

/**

 * vmw_execbuf_submit_fifo - Patch a command batch and submit it using the fifo.

 *

 * @dev_priv: Pointer to a device private structure.

 * @kernel_commands: Pointer to the unpatched command batch.

 * @command_size: Size of the unpatched command batch.

 * @sw_context: Structure holding the relocation lists.

 *

 * Side effects: If this function returns 0, then the command batch pointed to

 * by @kernel_commands will have been modified.

/**

 * vmw_execbuf_submit_cmdbuf - Patch a command batch and submit it using the

 * command buffer manager.

 *

 * @dev_priv: Pointer to a device private structure.

 * @header: Opaque handle to the command buffer allocation.

 * @command_size: Size of the unpatched command batch.

 * @sw_context: Structure holding the relocation lists.

 *

 * Side effects: If this function returns 0, then the command buffer represented

 * by @header will have been modified.

/**

 * vmw_execbuf_cmdbuf - Prepare, if possible, a user-space command batch for

 * submission using a command buffer.

 *

 * @dev_priv: Pointer to a device private structure.

 * @user_commands: User-space pointer to the commands to be submitted.

 * @command_size: Size of the unpatched command batch.

 * @header: Out parameter returning the opaque pointer to the command buffer.

 *

 * This function checks whether we can use the command buffer manager for

 * submission and if so, creates a command buffer of suitable size and copies

 * the user data into that buffer.

 *

 * On successful return, the function returns a pointer to the data in the

 * command buffer and *@header is set to non-NULL.

 *

 * @kernel_commands: If command buffers could not be used, the function will

 * return the value of @kernel_commands on function call. That value may be

 * NULL. In that case, the value of *@header will be set to NULL.

 *

 * If an error is encountered, the function will return a pointer error value.

 * If the function is interrupted by a signal while sleeping, it will return

 * -ERESTARTSYS casted to a pointer error value.

 If possible, add a little space for fencing. */

	/*

	 * This error is harmless, because if fence submission fails,

	 * vmw_fifo_send_fence will sync. The error will be propagated to

	 * user-space in @fence_rep

	/*

	 * If anything fails here, give up trying to export the fence and do a

	 * sync since the user mode will not be able to sync the fence itself.

	 * This ensures we are still functionally correct.

 Link the fence with the FD created earlier */

 Don't unreference when handing fence out */

	/*

	 * Unreference resources outside of the cmdbuf_mutex to avoid deadlocks

	 * in resource destruction paths.

	/*

	 * Unreference resources outside of the cmdbuf_mutex to avoid deadlocks

	 * in resource destruction paths.

/**

 * vmw_execbuf_unpin_panic - Idle the fifo and unpin the query buffer.

 *

 * @dev_priv: The device private structure.

 *

 * This function is called to idle the fifo and unpin the query buffer if the

 * normal way to do this hits an error, which should typically be extremely

 * rare.

/**

 * __vmw_execbuf_release_pinned_bo - Flush queries and unpin the pinned query

 * bo.

 *

 * @dev_priv: The device private structure.

 * @fence: If non-NULL should point to a struct vmw_fence_obj issued _after_ a

 * query barrier that flushes all queries touching the current buffer pointed to

 * by @dev_priv->pinned_bo

 *

 * This function should be used to unpin the pinned query bo, or as a query

 * barrier when we need to make sure that all queries have finished before the

 * next fifo command. (For example on hardware context destructions where the

 * hardware may otherwise leak unfinished queries).

 *

 * This function does not return any failure codes, but make attempts to do safe

 * unpinning in case of errors.

 *

 * The function will synchronize on the previous query barrier, and will thus

 * not finish until that barrier has executed.

 *

 * the @dev_priv->cmdbuf_mutex needs to be held by the current thread before

 * calling this function.

/**

 * vmw_execbuf_release_pinned_bo - Flush queries and unpin the pinned query bo.

 *

 * @dev_priv: The device private structure.

 *

 * This function should be used to unpin the pinned query bo, or as a query

 * barrier when we need to make sure that all queries have finished before the

 * next fifo command. (For example on hardware context destructions where the

 * hardware may otherwise leak unfinished queries).

 *

 * This function does not return any failure codes, but make attempts to do safe

 * unpinning in case of errors.

 *

 * The function will synchronize on the previous query barrier, and will thus

 * not finish until that barrier has executed.

	/*

	 * Extend the ioctl argument while maintaining backwards compatibility:

	 * We take different code paths depending on the value of arg->version.

	 *

	 * Note: The ioctl argument is extended and zeropadded by core DRM.

 For v1 core DRM have extended + zeropadded the data */

 For v2 and later core DRM would have correctly copied it */

 If imported a fence FD from elsewhere, then wait on it */

 SPDX-License-Identifier: GPL-2.0 OR MIT */

/**************************************************************************

 *

 * Copyright (c) 2009-2013 VMware, Inc., Palo Alto, CA., USA

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Authors: Thomas Hellstrom <thellstrom-at-vmware-dot-com>

 *

 * While no substantial code is shared, the prime code is inspired by

 * drm_prime.c, with

 * Authors:

 *      Dave Airlie <airlied@redhat.com>

 *      Rob Clark <rob.clark@linaro.org>

/** @file ttm_ref_object.c

 *

 * Base- and reference object implementation for the various

 * ttm objects. Implements reference counting, minimal security checks

 * and release on file close.

/**

 * struct ttm_object_file

 *

 * @tdev: Pointer to the ttm_object_device.

 *

 * @lock: Lock that protects the ref_list list and the

 * ref_hash hash tables.

 *

 * @ref_list: List of ttm_ref_objects to be destroyed at

 * file release.

 *

 * @ref_hash: Hash tables of ref objects, one per ttm_ref_type,

 * for fast lookup of ref objects given a base object.

 *

 * @refcount: reference/usage count

/*

 * struct ttm_object_device

 *

 * @object_lock: lock that protects the object_hash hash table.

 *

 * @object_hash: hash table for fast lookup of object global names.

 *

 * @object_count: Per device object count.

 *

 * This is the per-device data structure needed for ttm object management.

/*

 * struct ttm_ref_object

 *

 * @hash: Hash entry for the per-file object reference hash.

 *

 * @head: List entry for the per-file list of ref-objects.

 *

 * @kref: Ref count.

 *

 * @obj: Base object this ref object is referencing.

 *

 * @ref_type: Type of ref object.

 *

 * This is similar to an idr object, but it also has a hash table entry

 * that allows lookup with a pointer to the referenced object as a key. In

 * that way, one can easily detect whether a base object is referenced by

 * a particular ttm_object_file. It also carries a ref count to avoid creating

 * multiple ref objects if a ttm_object_file references the same base

 * object more than once.

	/*

	 * Note: We don't use synchronize_rcu() here because it's far

	 * too slow. It's up to the user to free the object using

	 * call_rcu() or ttm_base_object_kfree().

/**

 * ttm_base_object_noref_lookup - look up a base object without reference

 * @tfile: The struct ttm_object_file the object is registered with.

 * @key: The object handle.

 *

 * This function looks up a ttm base object and returns a pointer to it

 * without refcounting the pointer. The returned pointer is only valid

 * until ttm_base_object_noref_release() is called, and the object

 * pointed to by the returned pointer may be doomed. Any persistent usage

 * of the object requires a refcount to be taken using kref_get_unless_zero().

 * Iff this function returns successfully it needs to be paired with

 * ttm_base_object_noref_release() and no sleeping- or scheduling functions

 * may be called inbetween these function callse.

 *

 * Return: A pointer to the object if successful or NULL otherwise.

/**

 * ttm_ref_object_exists - Check whether a caller has a valid ref object

 * (has opened) a base object.

 *

 * @tfile: Pointer to a struct ttm_object_file identifying the caller.

 * @base: Pointer to a struct base object.

 *

 * Checks wether the caller identified by @tfile has put a valid USAGE

 * reference object on the base object identified by @base.

	/*

	 * Verify that the ref object is really pointing to our base object.

	 * Our base object could actually be dead, and the ref object pointing

	 * to another base object with the same handle.

	/*

	 * Verify that the ref->obj pointer was actually valid!

	/*

	 * Since we release the lock within the loop, we have to

	 * restart it from the beginning each time.

/**

 * get_dma_buf_unless_doomed - get a dma_buf reference if possible.

 *

 * @dmabuf: Non-refcounted pointer to a struct dma-buf.

 *

 * Obtain a file reference from a lookup structure that doesn't refcount

 * the file, but synchronizes with its release method to make sure it has

 * not been freed yet. See for example kref_get_unless_zero documentation.

 * Returns true if refcounting succeeds, false otherwise.

 *

 * Nobody really wants this as a public API yet, so let it mature here

 * for some time...

/**

 * ttm_prime_refcount_release - refcount release method for a prime object.

 *

 * @p_base: Pointer to ttm_base_object pointer.

 *

 * This is a wrapper that calls the refcount_release founction of the

 * underlying object. At the same time it cleans up the prime object.

 * This function is called when all references to the base object we

 * derive from are gone.

/**

 * ttm_prime_dmabuf_release - Release method for the dma-bufs we export

 *

 * @dma_buf:

 *

 * This function first calls the dma_buf release method the driver

 * provides. Then it cleans up our dma_buf pointer used for lookup,

 * and finally releases the reference the dma_buf has on our base

 * object.

/**

 * ttm_prime_fd_to_handle - Get a base object handle from a prime fd

 *

 * @tfile: A struct ttm_object_file identifying the caller.

 * @fd: The prime / dmabuf fd.

 * @handle: The returned handle.

 *

 * This function returns a handle to an object that previously exported

 * a dma-buf. Note that we don't handle imports yet, because we simply

 * have no consumers of that implementation.

/**

 * ttm_prime_handle_to_fd - Return a dma_buf fd from a ttm prime object

 *

 * @tfile: Struct ttm_object_file identifying the caller.

 * @handle: Handle to the object we're exporting from.

 * @flags: flags for dma-buf creation. We just pass them on.

 * @prime_fd: The returned file descriptor.

 *

		/*

		 * Need to create a new dma_buf, with memory accounting.

		/*

		 * dma_buf has taken the base object reference

/**

 * ttm_prime_object_init - Initialize a ttm_prime_object

 *

 * @tfile: struct ttm_object_file identifying the caller

 * @size: The size of the dma_bufs we export.

 * @prime: The object to be initialized.

 * @shareable: See ttm_base_object_init

 * @type: See ttm_base_object_init

 * @refcount_release: See ttm_base_object_init

 * @ref_obj_release: See ttm_base_object_init

 *

 * Initializes an object which is compatible with the drm_prime model

 * for data sharing between processes and devices.

 SPDX-License-Identifier: GPL-2.0 OR MIT */

/**************************************************************************

 *

 * Copyright (c) 2006-2009 VMware, Inc., Palo Alto, CA., USA

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 convert from number of pages to KB */

 convert from KB to number of pages */

/*

 * At this point we only support a single shrink callback.

 * Extend this if needed, perhaps using a linked list of callbacks.

 * Note that this function is reentrant:

 * many threads may try to swap out at any given time.

	/**

	 * No special dma32 zone needed.

	/*

	 * Limit max dma32 memory to 4GB for now

	 * until we can figure out how big this

	 * zone really is.

 set it as 0 by default to keep original behavior of OOM */

/*

 * check if the available mem is under lower memory limit

 *

 * a. if no swap disk at all or free swap space is under swap_mem_limit

 * but available system mem is bigger than sys_mem_limit, allow TTM

 * allocation;

 *

 * b. if the available system mem is less than sys_mem_limit but free

 * swap disk is bigger than swap_mem_limit, allow TTM allocation.

 We allow over commit during suspend */

	/**

	 * Normal allocations of kernel memory are registered in

	 * the kernel zone.

	/**

	 * Page allocations may be registed in a single zone

	 * only if highmem or !dma32.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright Â© 2018-2019 VMware, Inc., Palo Alto, CA., USA

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * struct vmw_dx_streamoutput - Streamoutput resource metadata.

 * @res: Base resource struct.

 * @ctx: Non-refcounted context to which @res belong.

 * @cotable: Refcounted cotable holding this Streamoutput.

 * @cotable_head: List head for cotable-so_res list.

 * @id: User-space provided identifier.

 * @size: User-space provided mob size.

 * @committed: Whether streamoutput is actually created or pending creation.

 Command buffer managed resource. */

/**

 * vmw_dx_streamoutput_unscrub - Reattach the MOB to streamoutput.

 * @res: The streamoutput resource.

 *

 * Return: 0 on success, negative error code on failure.

/**

 * vmw_dx_streamoutput_scrub - Unbind the MOB from streamoutput.

 * @res: The streamoutput resource.

 *

 * Return: 0 on success, negative error code on failure.

/**

 * vmw_dx_streamoutput_lookup - Do a streamoutput resource lookup by user key.

 * @man: Command buffer managed resource manager for current context.

 * @user_key: User-space identifier for lookup.

 *

 * Return: Valid refcounted vmw_resource on success, error pointer on failure.

 Destroyed by user-space cmd buf or as part of context takedown. */

/**

 * vmw_dx_streamoutput_add - Add a streamoutput as a cmd buf managed resource.

 * @man: Command buffer managed resource manager for current context.

 * @ctx: Pointer to context resource.

 * @user_key: The identifier for this streamoutput.

 * @list: The list of staged command buffer managed resources.

 *

 * Return: 0 on success, negative error code on failure.

/**

 * vmw_dx_streamoutput_set_size - Sets streamoutput mob size in res struct.

 * @res: The streamoutput res for which need to set size.

 * @size: The size provided by user-space to set.

/**

 * vmw_dx_streamoutput_remove - Stage streamoutput for removal.

 * @man: Command buffer managed resource manager for current context.

 * @user_key: The identifier for this streamoutput.

 * @list: The list of staged command buffer managed resources.

 *

 * Return: 0 on success, negative error code on failure.

/**

 * vmw_dx_streamoutput_cotable_list_scrub - cotable unbind_func callback.

 * @dev_priv: Device private.

 * @list: The list of cotable resources.

 * @readback: Whether the call was part of a readback unbind.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2012-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * If we set up the screen target otable, screen objects stop working.

/*

 * struct vmw_mob - Structure containing page table and metadata for a

 * Guest Memory OBject.

 *

 * @num_pages       Number of pages that make up the page table.

 * @pt_level        The indirection level of the page table. 0-2.

 * @pt_root_page    DMA address of the level 0 page of the page table.

/*

 * struct vmw_otable - Guest Memory OBject table metadata

 *

 * @size:           Size of the table (page-aligned).

 * @page_table:     Pointer to a struct vmw_mob holding the page table.

/*

 * vmw_setup_otable_base - Issue an object table base setup command to

 * the device

 *

 * @dev_priv:       Pointer to a device private structure

 * @type:           Type of object table base

 * @offset          Start of table offset into dev_priv::otable_bo

 * @otable          Pointer to otable metadata;

 *

 * This function returns -ENOMEM if it fails to reserve fifo space,

 * and may block waiting for fifo space.

	/*

	 * The device doesn't support this, But the otable size is

	 * determined at compile-time, so this BUG shouldn't trigger

	 * randomly.

/*

 * vmw_takedown_otable_base - Issue an object table base takedown command

 * to the device

 *

 * @dev_priv:       Pointer to a device private structure

 * @type:           Type of object table base

 *

/*

 * vmw_otables_setup - Set up guest backed memory object tables

 *

 * @dev_priv:       Pointer to a device private structure

 *

 * Takes care of the device guest backed surface

 * initialization, by setting up the guest backed memory object tables.

 * Returns 0 on success and various error codes on failure. A successful return

 * means the object tables can be taken down using the vmw_otables_takedown

 * function.

/*

 * vmw_otables_takedown - Take down guest backed memory object tables

 *

 * @dev_priv:       Pointer to a device private structure

 *

 * Take down the Guest Memory Object tables.

/*

 * vmw_mob_calculate_pt_pages - Calculate the number of page table pages

 * needed for a guest backed memory object.

 *

 * @data_pages:  Number of data pages in the memory object buffer.

/*

 * vmw_mob_create - Create a mob, but don't populate it.

 *

 * @data_pages:  Number of data pages of the underlying buffer object.

/*

 * vmw_mob_pt_populate - Populate the mob pagetable

 *

 * @mob:         Pointer to the mob the pagetable of which we want to

 *               populate.

 *

 * This function allocates memory to be used for the pagetable, and

 * adjusts TTM memory accounting accordingly. Returns ENOMEM if

 * memory resources aren't sufficient and may cause TTM buffer objects

 * to be swapped out by using the TTM memory accounting function.

/**

 * vmw_mob_assign_ppn - Assign a value to a page table entry

 *

 * @addr: Pointer to pointer to page table entry.

 * @val: The page table entry

 *

 * Assigns a value to a page table entry pointed to by *@addr and increments

 * *@addr according to the page table entry size.

/*

 * vmw_mob_build_pt - Build a pagetable

 *

 * @data_addr:      Array of DMA addresses to the underlying buffer

 *                  object's data pages.

 * @num_data_pages: Number of buffer object data pages.

 * @pt_pages:       Array of page pointers to the page table pages.

 *

 * Returns the number of page table pages actually used.

 * Uses atomic kmaps of highmem pages to avoid TLB thrashing.

/*

 * vmw_mob_build_pt - Set up a multilevel mob pagetable

 *

 * @mob:            Pointer to a mob whose page table needs setting up.

 * @data_addr       Array of DMA addresses to the buffer object's data

 *                  pages.

 * @num_data_pages: Number of buffer object data pages.

 *

 * Uses tail recursion to set up a multilevel mob page table.

/*

 * vmw_mob_destroy - Destroy a mob, unpopulating first if necessary.

 *

 * @mob:            Pointer to a mob to destroy.

/*

 * vmw_mob_unbind - Hide a mob from the device.

 *

 * @dev_priv:       Pointer to a device private.

 * @mob_id:         Device id of the mob to unbind.

		/*

		 * Noone else should be using this buffer.

/*

 * vmw_mob_bind - Make a mob visible to the device after first

 *                populating it if necessary.

 *

 * @dev_priv:       Pointer to a device private.

 * @mob:            Pointer to the mob we're making visible.

 * @data_addr:      Array of DMA addresses to the data pages of the underlying

 *                  buffer object.

 * @num_data_pages: Number of data pages of the underlying buffer

 *                  object.

 * @mob_id:         Device id of the mob to bind

 *

 * This function is intended to be interfaced with the ttm_tt backend

 * code.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 * Copyright 2014-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * The currently only reason we need to keep track of views is that if we

 * destroy a hardware surface, all views pointing to it must also be destroyed,

 * otherwise the device will error.

 * So in particular if a surface is evicted, we must destroy all views pointing

 * to it, and all context bindings of that view. Similarly we must restore

 * the view bindings, views and surfaces pointed to by the views when a

 * context is referenced in the command stream.

/**

 * struct vmw_view - view metadata

 *

 * @rcu: RCU callback head

 * @res: The struct vmw_resource we derive from

 * @ctx: Non-refcounted pointer to the context this view belongs to.

 * @srf: Refcounted pointer to the surface pointed to by this view.

 * @cotable: Refcounted pointer to the cotable holding this view.

 * @srf_head: List head for the surface-to-view list.

 * @cotable_head: List head for the cotable-to_view list.

 * @view_type: View type.

 * @view_id: User-space per context view id. Currently used also as per

 * context device view id.

 * @cmd_size: Size of the SVGA3D define view command that we've copied from the

 * command stream.

 * @committed: Whether the view is actually created or pending creation at the

 * device level.

 * @cmd: The SVGA3D define view command copied from the command stream.

 Immutable */

 Immutable */

 Immutable */

 Protected by binding_mutex */

 Protected by binding_mutex */

 Immutable */

 Immutable */

 Immutable */

 Protected by binding_mutex */

 Immutable */

/**

 * struct vmw_view_define - view define command body stub

 *

 * @view_id: The device id of the view being defined

 * @sid: The surface id of the view being defined

 *

 * This generic struct is used by the code to change @view_id and @sid of a

 * saved view define command.

/**

 * vmw_view - Convert a struct vmw_resource to a struct vmw_view

 *

 * @res: Pointer to the resource to convert.

 *

 * Returns a pointer to a struct vmw_view.

/**

 * vmw_view_commit_notify - Notify that a view operation has been committed to

 * hardware from a user-supplied command stream.

 *

 * @res: Pointer to the view resource.

 * @state: Indicating whether a creation or removal has been committed.

 *

/**

 * vmw_view_create - Create a hardware view.

 *

 * @res: Pointer to the view resource.

 *

 * Create a hardware view. Typically used if that view has previously been

 * destroyed by an eviction operation.

 Sid may have changed due to surface eviction. */

/**

 * vmw_view_destroy - Destroy a hardware view.

 *

 * @res: Pointer to the view resource.

 *

 * Destroy a hardware view. Typically used on unexpected termination of the

 * owning process or if the surface the view is pointing to is destroyed.

/**

 * vmw_hw_view_destroy - Destroy a hardware view as part of resource cleanup.

 *

 * @res: Pointer to the view resource.

 *

 * Destroy a hardware view if it's still present.

/**

 * vmw_view_key - Compute a view key suitable for the cmdbuf resource manager

 *

 * @user_key: The user-space id used for the view.

 * @view_type: The view type.

 *

 * Destroy a hardware view if it's still present.

/**

 * vmw_view_id_ok - Basic view id and type range checks.

 *

 * @user_key: The user-space id used for the view.

 * @view_type: The view type.

 *

 * Checks that the view id and type (typically provided by user-space) is

 * valid.

/**

 * vmw_view_res_free - resource res_free callback for view resources

 *

 * @res: Pointer to a struct vmw_resource

 *

 * Frees memory and memory accounting held by a struct vmw_view.

/**

 * vmw_view_add - Create a view resource and stage it for addition

 * as a command buffer managed resource.

 *

 * @man: Pointer to the compat shader manager identifying the shader namespace.

 * @ctx: Pointer to a struct vmw_resource identifying the active context.

 * @srf: Pointer to a struct vmw_resource identifying the surface the view

 * points to.

 * @view_type: The view type deduced from the view create command.

 * @user_key: The key that is used to identify the shader. The key is

 * unique to the view type and to the context.

 * @cmd: Pointer to the view create command in the command stream.

 * @cmd_size: Size of the view create command in the command stream.

 * @list: Caller's list of staged command buffer resource actions.

/**

 * vmw_view_remove - Stage a view for removal.

 *

 * @man: Pointer to the view manager identifying the shader namespace.

 * @user_key: The key that is used to identify the view. The key is

 * unique to the view type.

 * @view_type: View type

 * @list: Caller's list of staged command buffer resource actions.

 * @res_p: If the resource is in an already committed state, points to the

 * struct vmw_resource on successful return. The pointer will be

 * non ref-counted.

/**

 * vmw_view_cotable_list_destroy - Evict all views belonging to a cotable.

 *

 * @dev_priv: Pointer to a device private struct.

 * @list: List of views belonging to a cotable.

 * @readback: Unused. Needed for function interface only.

 *

 * This function evicts all views belonging to a cotable.

 * It must be called with the binding_mutex held, and the caller must hold

 * a reference to the view resource. This is typically called before the

 * cotable is paged out.

/**

 * vmw_view_surface_list_destroy - Evict all views pointing to a surface

 *

 * @dev_priv: Pointer to a device private struct.

 * @list: List of views pointing to a surface.

 *

 * This function evicts all views pointing to a surface. This is typically

 * called before the surface is evicted.

/**

 * vmw_view_srf - Return a non-refcounted pointer to the surface a view is

 * pointing to.

 *

 * @res: pointer to a view resource.

 *

 * Note that the view itself is holding a reference, so as long

 * the view resource is alive, the surface resource will be.

/**

 * vmw_view_lookup - Look up a view.

 *

 * @man: The context's cmdbuf ref manager.

 * @view_type: The view type.

 * @user_key: The view user id.

 *

 * returns a refcounted pointer to a view or an error pointer if not found.

/**

 * vmw_view_dirtying - Return whether a view type is dirtying its resource

 * @res: Pointer to the view

 *

 * Each time a resource is put on the validation list as the result of a

 * view pointing to it, we need to determine whether that resource will

 * be dirtied (written to by the GPU) as a result of the corresponding

 * GPU operation. Currently only rendertarget-, depth-stencil and unordered

 * access views are capable of dirtying its resource.

 *

 * Return: Whether the view type of @res dirties the resource it points to.

 Update this function as we add more view types */

 To remove unused function warning */

/*

 * This function is unused at run-time, and only used to dump various build

 * asserts important for code optimization assumptions.

 Assert that our vmw_view_cmd_to_type() function is correct. */

 Assert that our "one body fits all" assumption is valid */

 Assert that the view key space can hold all view ids. */

	/*

	 * Assert that the offset of sid in all view define commands

	 * is what we assume it to be.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2011 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 Use VM_PFNMAP rather than VM_MIXEDMAP if not a COW mapping */

 release extra ref taken by ttm_bo_mmap_obj() */

 struct vmw_validation_mem callback */

 struct vmw_validation_mem callback */

/**

 * vmw_validation_mem_init_ttm - Interface the validation memory tracker

 * to ttm.

 * @dev_priv: Pointer to struct vmw_private. The reason we choose a vmw private

 * rather than a struct vmw_validation_mem is to make sure assumption in the

 * callbacks that struct vmw_private derives from struct vmw_validation_mem

 * holds true.

 * @gran: The recommended allocation granularity

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2016 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * struct vmw_user_simple_resource - User-space simple resource struct

 *

 * @base: The TTM base object implementing user-space visibility.

 * @account_size: How much memory was accounted for this object.

 * @simple: The embedded struct vmw_simple_resource.

/*

 * Nothing to be placed after @simple, since size of @simple is

 * unknown.

/**

 * vmw_simple_resource_init - Initialize a simple resource object.

 *

 * @dev_priv: Pointer to a struct device private.

 * @simple: The struct vmw_simple_resource to initialize.

 * @data: Data passed to the information initialization function.

 * @res_free: Function pointer to destroy the simple resource.

 *

 * Returns:

 *   0 if succeeded.

 *   Negative error value if error, in which case the resource will have been

 * freed.

/**

 * vmw_simple_resource_free - Free a simple resource object.

 *

 * @res: The struct vmw_resource member of the simple resource object.

 *

 * Frees memory and memory accounting for the object.

/**

 * vmw_simple_resource_base_release - TTM object release callback

 *

 * @p_base: The struct ttm_base_object member of the simple resource object.

 *

 * Called when the last reference to the embedded struct ttm_base_object is

 * gone. Typically results in an object free, unless there are other

 * references to the embedded struct vmw_resource.

/**

 * vmw_simple_resource_create_ioctl - Helper to set up an ioctl function to

 * create a struct vmw_simple_resource.

 *

 * @dev: Pointer to a struct drm device.

 * @data: Ioctl argument.

 * @file_priv: Pointer to a struct drm_file identifying the caller.

 * @func: Pointer to a struct vmw_simple_resource_func identifying the

 * simple resource type.

 *

 * Returns:

 *   0 if success,

 *   Negative error value on error.

	/*

	 * From here on, the destructor takes over resource freeing.

/**

 * vmw_simple_resource_lookup - Look up a simple resource from its user-space

 * handle.

 *

 * @tfile: struct ttm_object_file identifying the caller.

 * @handle: The user-space handle.

 * @func: The struct vmw_simple_resource_func identifying the simple resource

 * type.

 *

 * Returns: Refcounted pointer to the embedded struct vmw_resource if

 * successfule. Error pointer otherwise.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/******************************************************************************

 *

 * COPYRIGHT (C) 2014-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * struct vmw_stdu_dirty - closure structure for the update functions

 *

 * @base: The base type we derive from. Used by vmw_kms_helper_dirty().

 * @transfer: Transfer direction for DMA command.

 * @left: Left side of bounding box.

 * @right: Right side of bounding box.

 * @top: Top side of bounding box.

 * @bottom: Bottom side of bounding box.

 * @fb_left: Left side of the framebuffer/content bounding box

 * @fb_top: Top of the framebuffer/content bounding box

 * @pitch: framebuffer pitch (stride)

 * @buf: buffer object when DMA-ing between buffer and screen targets.

 * @sid: Surface ID when copying between surface and screen targets.

/*

 * SVGA commands that are used by this code. Please see the device headers

 * for explanation.

/**

 * struct vmw_screen_target_display_unit

 *

 * @base: VMW specific DU structure

 * @display_srf: surface to be displayed.  The dimension of this will always

 *               match the display mode.  If the display mode matches

 *               content_vfbs dimensions, then this is a pointer into the

 *               corresponding field in content_vfbs.  If not, then this

 *               is a separate buffer to which content_vfbs will blit to.

 * @content_fb_type: content_fb type

 * @display_width:  display width

 * @display_height: display height

 * @defined:     true if the current display unit has been initialized

 * @cpp:         Bytes per pixel

 For CPU Blit */

/******************************************************************************

 * Screen Target Display Unit CRTC Functions

/**

 * vmw_stdu_crtc_destroy - cleans up the STDU

 *

 * @crtc: used to get a reference to the containing STDU

/**

 * vmw_stdu_define_st - Defines a Screen Target

 *

 * @dev_priv:  VMW DRM device

 * @stdu: display unit to create a Screen Target for

 * @mode: The mode to set.

 * @crtc_x: X coordinate of screen target relative to framebuffer origin.

 * @crtc_y: Y coordinate of screen target relative to framebuffer origin.

 *

 * Creates a STDU that we can used later.  This function is called whenever the

 * framebuffer size changes.

 *

 * RETURNs:

 * 0 on success, error code on failure

/**

 * vmw_stdu_bind_st - Binds a surface to a Screen Target

 *

 * @dev_priv: VMW DRM device

 * @stdu: display unit affected

 * @res: Buffer to bind to the screen target.  Set to NULL to blank screen.

 *

 * Binding a surface to a Screen Target the same as flipping

 Set up image using information in vfb */

/**

 * vmw_stdu_populate_update - populate an UPDATE_GB_SCREENTARGET command with a

 * bounding box.

 *

 * @cmd: Pointer to command stream.

 * @unit: Screen target unit.

 * @left: Left side of bounding box.

 * @right: Right side of bounding box.

 * @top: Top side of bounding box.

 * @bottom: Bottom side of bounding box.

/**

 * vmw_stdu_update_st - Full update of a Screen Target

 *

 * @dev_priv: VMW DRM device

 * @stdu: display unit affected

 *

 * This function needs to be called whenever the content of a screen

 * target has changed completely. Typically as a result of a backing

 * surface change.

 *

 * RETURNS:

 * 0 on success, error code on failure

/**

 * vmw_stdu_destroy_st - Destroy a Screen Target

 *

 * @dev_priv:  VMW DRM device

 * @stdu: display unit to destroy

 Nothing to do if not successfully defined */

 Force sync */

/**

 * vmw_stdu_crtc_mode_set_nofb - Updates screen target size

 *

 * @crtc: CRTC associated with the screen target

 *

 * This function defines/destroys a screen target

 *

/**

 * vmw_stdu_bo_clip - Callback to encode a suface DMA command cliprect

 *

 * @dirty: The closure structure.

 *

 * Encodes a surface DMA command cliprect and updates the bounding box

 * for the DMA.

 Destination bounding box */

/**

 * vmw_stdu_bo_fifo_commit - Callback to fill in and submit a DMA command.

 *

 * @dirty: The closure structure.

 *

 * Fills in the missing fields in a DMA command, and optionally encodes

 * a screen target update command, depending on transfer direction.

/**

 * vmw_stdu_bo_cpu_clip - Callback to encode a CPU blit

 *

 * @dirty: The closure structure.

 *

 * This function calculates the bounding box for all the incoming clips.

 Calculate destination bounding box */

	/*

	 * Calculate content bounding box.  We only need the top-left

	 * coordinate because width and height will be the same as the

	 * destination bounding box above

/**

 * vmw_stdu_bo_cpu_commit - Callback to do a CPU blit from buffer object

 *

 * @dirty: The closure structure.

 *

 * For the special case when we cannot create a proxy surface in a

 * 2D VM, we have to do a CPU blit ourselves.

 Assume we are blitting from Guest (bo) to Host (display_srf) */

 Swap src and dst if the assumption was wrong. */

 We are updating the actual surface, not a proxy */

/**

 * vmw_kms_stdu_dma - Perform a DMA transfer between a buffer-object backed

 * framebuffer and the screen target system.

 *

 * @dev_priv: Pointer to the device private structure.

 * @file_priv: Pointer to a struct drm-file identifying the caller. May be

 * set to NULL, but then @user_fence_rep must also be set to NULL.

 * @vfb: Pointer to the buffer-object backed framebuffer.

 * @user_fence_rep: User-space provided structure for fence information.

 * @clips: Array of clip rects. Either @clips or @vclips must be NULL.

 * @vclips: Alternate array of clip rects. Either @clips or @vclips must

 * be NULL.

 * @num_clips: Number of clip rects in @clips or @vclips.

 * @increment: Increment to use when looping over @clips or @vclips.

 * @to_surface: Whether to DMA to the screen target system as opposed to

 * from the screen target system.

 * @interruptible: Whether to perform waits interruptible if possible.

 * @crtc: If crtc is passed, perform stdu dma on that crtc only.

 *

 * If DMA-ing till the screen target system, the function will also notify

 * the screen target system that a bounding box of the cliprects has been

 * updated.

 * Returns 0 on success, negative error code on failure. -ERESTARTSYS if

 * interrupted.

	/*

	 * VMs without 3D support don't have the surface DMA command and

	 * we'll be using a CPU blit, and the framebuffer should be moved out

	 * of VRAM.

/**

 * vmw_kms_stdu_surface_clip - Callback to encode a surface copy command cliprect

 *

 * @dirty: The closure structure.

 *

 * Encodes a surface copy command cliprect and updates the bounding box

 * for the copy.

 Destination bounding box */

/**

 * vmw_kms_stdu_surface_fifo_commit - Callback to fill in and submit a surface

 * copy command.

 *

 * @dirty: The closure structure.

 *

 * Fills in the missing fields in a surface copy command, and encodes a screen

 * target update command.

/**

 * vmw_kms_stdu_surface_dirty - Dirty part of a surface backed framebuffer

 *

 * @dev_priv: Pointer to the device private structure.

 * @framebuffer: Pointer to the surface-buffer backed framebuffer.

 * @clips: Array of clip rects. Either @clips or @vclips must be NULL.

 * @vclips: Alternate array of clip rects. Either @clips or @vclips must

 * be NULL.

 * @srf: Pointer to surface to blit from. If NULL, the surface attached

 * to @framebuffer will be used.

 * @dest_x: X coordinate offset to align @srf with framebuffer coordinates.

 * @dest_y: Y coordinate offset to align @srf with framebuffer coordinates.

 * @num_clips: Number of clip rects in @clips.

 * @inc: Increment to use when looping over @clips.

 * @out_fence: If non-NULL, will return a ref-counted pointer to a

 * struct vmw_fence_obj. The returned fence pointer may be NULL in which

 * case the device has already synchronized.

 * @crtc: If crtc is passed, perform surface dirty on that crtc only.

 *

 * Returns 0 on success, negative error code on failure. -ERESTARTSYS if

 * interrupted.

/*

 *  Screen Target CRTC dispatch table

/******************************************************************************

 * Screen Target Display Unit Encoder Functions

/**

 * vmw_stdu_encoder_destroy - cleans up the STDU

 *

 * @encoder: used the get the containing STDU

 *

 * vmwgfx cleans up crtc/encoder/connector all at the same time so technically

 * this can be a no-op.  Nevertheless, it doesn't hurt of have this in case

 * the common KMS code changes and somehow vmw_stdu_crtc_destroy() doesn't

 * get called.

/******************************************************************************

 * Screen Target Display Unit Connector Functions

/**

 * vmw_stdu_connector_destroy - cleans up the STDU

 *

 * @connector: used to get the containing STDU

 *

 * vmwgfx cleans up crtc/encoder/connector all at the same time so technically

 * this can be a no-op.  Nevertheless, it doesn't hurt of have this in case

 * the common KMS code changes and somehow vmw_stdu_crtc_destroy() doesn't

 * get called.

/******************************************************************************

 * Screen Target Display Plane Functions

/**

 * vmw_stdu_primary_plane_cleanup_fb - Unpins the display surface

 *

 * @plane:  display plane

 * @old_state: Contains the FB to clean up

 *

 * Unpins the display surface

 *

 * Returns 0 on success

/**

 * vmw_stdu_primary_plane_prepare_fb - Readies the display surface

 *

 * @plane:  display plane

 * @new_state: info on the new plane state, including the FB

 *

 * This function allocates a new display surface if the content is

 * backed by a buffer object.  The display surface is pinned here, and it'll

 * be unpinned in .cleanup_fb()

 *

 * Returns 0 on success

 No FB to prepare */

		/*

		 * If content buffer is a buffer object, then we have to

		 * construct surface info

		/*

		 * prepare_fb and clean_fb should only take care of pinning

		 * and unpinning.  References are tracked by state objects.

		 * The only time we add a reference in prepare_fb is if the

		 * state object doesn't have a reference to begin with

 Pin new surface before flipping */

	/*

	 * This should only happen if the buffer object is too large to create a

	 * proxy surface for.

	 * If we are a 2D VM with a buffer object then we have to use CPU blit

	 * so cache these mappings

/**

 * vmw_stdu_plane_update_bo - Update display unit for bo backed fb.

 * @dev_priv: device private.

 * @plane: plane state.

 * @old_state: old plane state.

 * @vfb: framebuffer which is blitted to display unit.

 * @out_fence: If non-NULL, will return a ref-counted pointer to vmw_fence_obj.

 *             The returned fence pointer may be NULL in which case the device

 *             has already synchronized.

 *

 * Return: 0 on success or a negative error code on failure.

	/*

	 * VM without 3D support don't have surface DMA command and framebuffer

	 * should be moved out of VRAM.

	/*

	 * proxy surface is special where a buffer object type fb is wrapped

	 * in a surface and need an update gb image command to sync with device.

/**

 * vmw_stdu_plane_update_surface - Update display unit for surface backed fb

 * @dev_priv: Device private

 * @plane: Plane state

 * @old_state: Old plane state

 * @vfb: Framebuffer which is blitted to display unit

 * @out_fence: If non-NULL, will return a ref-counted pointer to vmw_fence_obj.

 *             The returned fence pointer may be NULL in which case the device

 *             has already synchronized.

 *

 * Return: 0 on success or a negative error code on failure.

/**

 * vmw_stdu_primary_plane_atomic_update - formally switches STDU to new plane

 * @plane: display plane

 * @state: Only used to get crtc info

 *

 * Formally update stdu->display_srf to the new plane, and bind the new

 * plane STDU.  This function is called during the commit phase when

 * all the preparation have been done and all the configurations have

 * been checked.

 If case of device error, maintain consistent atomic state */

 Blank STDU when fb and crtc are NULL */

 In case of error, vblank event is send in vmw_du_crtc_atomic_flush */

/*

 * Atomic Helpers

/**

 * vmw_stdu_init - Sets up a Screen Target Display Unit

 *

 * @dev_priv: VMW DRM device

 * @unit: unit number range from 0 to VMWGFX_NUM_DISPLAY_UNITS

 *

 * This function is called once per CRTC, and allocates one Screen Target

 * display unit to represent that CRTC.  Since the SVGA device does not separate

 * out encoder and connector, they are represented as part of the STDU as well.

 Initialize primary plane */

 Initialize cursor plane */

/**

 *  vmw_stdu_destroy - Cleans up a vmw_screen_target_display_unit

 *

 *  @stdu:  Screen Target Display Unit to be destroyed

 *

 *  Clean up after vmw_stdu_init

/******************************************************************************

 * Screen Target Display KMS Functions

 *

 * These functions are called by the common KMS code in vmwgfx_kms.c

/**

 * vmw_kms_stdu_init_display - Initializes a Screen Target based display

 *

 * @dev_priv: VMW DRM device

 *

 * This function initialize a Screen Target based display device.  It checks

 * the capability bits to make sure the underlying hardware can support

 * screen targets, and then creates the maximum number of CRTCs, a.k.a Display

 * Units, as supported by the display hardware.

 *

 * RETURNS:

 * 0 on success, error code otherwise

 Do nothing if Screen Target support is turned off */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Huge page-table-entry support for IO memory.

 *

 * Copyright (C) 2007-2019 Vmware, Inc. All rights reservedd.

/**

 * struct vmw_thp_manager - Range manager implementing huge page alignment

 *

 * @manager: TTM resource manager.

 * @mm: The underlying range manager. Protected by @lock.

 * @lock: Manager lock.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Copyright 2016 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * vmw_open_channel

 *

 * @channel: RPC channel

 * @protocol:

 *

 * Returns: 0 on success

/**

 * vmw_close_channel

 *

 * @channel: RPC channel

 *

 * Returns: 0 on success

 Set up additional parameters */

/**

 * vmw_port_hb_out - Send the message payload either through the

 * high-bandwidth port if available, or through the backdoor otherwise.

 * @channel: The rpc channel.

 * @msg: NULL-terminated message.

 * @hb: Whether the high-bandwidth port is available.

 *

 * Return: The port status.

 HB port can't access encrypted memory. */

 HB port not available. Send the message 4 bytes at a time. */

/**

 * vmw_port_hb_in - Receive the message payload either through the

 * high-bandwidth port if available, or through the backdoor otherwise.

 * @channel: The rpc channel.

 * @reply: Pointer to buffer holding reply.

 * @reply_len: Length of the reply.

 * @hb: Whether the high-bandwidth port is available.

 *

 * Return: The port status.

 HB port can't access encrypted memory */

 HB port not available. Retrieve the message 4 bytes at a time. */

/**

 * vmw_send_msg: Sends a message to the host

 *

 * @channel: RPC channel

 * @msg: NULL terminated string

 *

 * Returns: 0 on success

 Set up additional parameters */

 Expected success. Give up. */

 Send msg */

 A checkpoint occurred. Retry. */

/**

 * vmw_recv_msg: Receives a message from the host

 *

 * Note:  It is the caller's responsibility to call kfree() on msg.

 *

 * @channel:  channel opened by vmw_open_channel

 * @msg:  [OUT] message received from the host

 * @msg_len: message length

 Set up additional parameters */

 No reply available.  This is okay. */

 Receive buffer */

 A checkpoint occurred. Retry. */

 Ack buffer */

 A checkpoint occurred. Retry. */

/**

 * vmw_host_get_guestinfo: Gets a GuestInfo parameter

 *

 * Gets the value of a  GuestInfo.* parameter.  The value returned will be in

 * a string, and it is up to the caller to post-process.

 *

 * @guest_info_param:  Parameter to get, e.g. GuestInfo.svga.gl3

 * @buffer: if NULL, *reply_len will contain reply size.

 * @length: size of the reply_buf.  Set to size of reply upon return

 *

 * Returns: 0 on success

		/* Remove reply code, which are the first 2 characters of

		 * the reply

/**

 * vmw_host_printf: Sends a log message to the host

 *

 * @fmt: Regular printf format string and arguments

 *

 * Returns: 0 on success

/**

 * vmw_msg_ioctl: Sends and receveives a message to/from host from/to user-space

 *

 * Sends a message from user-space to host.

 * Can also receive a result from host and return that to user-space.

 *

 * @dev: Identifies the drm device.

 * @data: Pointer to the ioctl argument.

 * @file_priv: Identifies the caller.

 * Return: Zero on success, negative error code on error.

/**

 * reset_ppn_array: Resets a PPN64 array to INVALID_PPN64 content

 *

 * @arr: Array to reset.

 * @size: Array length.

/**

 * hypervisor_ppn_reset_all: Removes all mksGuestStat instance descriptors from

 * the hypervisor. All related pages should be subsequently unpinned or freed.

 *

/**

 * hypervisor_ppn_add: Adds a single mksGuestStat instance descriptor to the

 * hypervisor. Any related userspace pages should be pinned in advance.

 *

 * @pfn: Physical page number of the instance descriptor

/**

 * hypervisor_ppn_remove: Removes a single mksGuestStat instance descriptor from

 * the hypervisor. All related pages should be subsequently unpinned or freed.

 *

 * @pfn: Physical page number of the instance descriptor

 Order of the total number of pages used for kernel-internal mksGuestStat; at least 2 */

 Header to the text description of mksGuestStat instance descriptor */

 Kernel mksGuestStats counter names and desciptions; same order as enum mksstat_kern_stats_t */

/**

 * mksstat_init_record: Initializes an MKSGuestStatCounter-based record

 * for the respective mksGuestStat index.

 *

 * @stat_idx: Index of the MKSGuestStatCounter-based mksGuestStat record.

 * @pstat: Pointer to array of MKSGuestStatCounterTime.

 * @pinfo: Pointer to array of MKSGuestStatInfoEntry.

 * @pstrs: Pointer to current end of the name/description sequence.

 * Return: Pointer to the new end of the names/description sequence.

/**

 * mksstat_init_record_time: Initializes an MKSGuestStatCounterTime-based record

 * for the respective mksGuestStat index.

 *

 * @stat_idx: Index of the MKSGuestStatCounterTime-based mksGuestStat record.

 * @pstat: Pointer to array of MKSGuestStatCounterTime.

 * @pinfo: Pointer to array of MKSGuestStatInfoEntry.

 * @pstrs: Pointer to current end of the name/description sequence.

 * Return: Pointer to the new end of the names/description sequence.

/**

 * mksstat_init_kern_id: Creates a single mksGuestStat instance descriptor and

 * kernel-internal counters. Adds PFN mapping to the hypervisor.

 *

 * Create a single mksGuestStat instance descriptor and corresponding structures

 * for all kernel-internal counters. The corresponding PFNs are mapped with the

 * hypervisor.

 *

 * @ppage: Output pointer to page containing the instance descriptor.

 * Return: Zero on success, negative error code on error.

 Allocate pages for the kernel-internal instance descriptor */

 Set up all kernel-internal counters and corresponding structures */

 Add new counters above, in their order of appearance in mksstat_kern_stats_t */

 Set up the kernel-internal instance descriptor */

/**

 * vmw_mksstat_get_kern_slot: Acquires a slot for a single kernel-internal

 * mksGuestStat instance descriptor.

 *

 * Find a slot for a single kernel-internal mksGuestStat instance descriptor.

 * In case no such was already present, allocate a new one and set up a kernel-

 * internal mksGuestStat instance descriptor for the former.

 *

 * @pid: Process for which a slot is sought.

 * @dev_priv: Identifies the drm private device.

 * Return: Non-negative slot on success, negative error code on error.

 Check if an instance descriptor for this pid is already present */

 Set up a new instance descriptor for this pid */

 Reset top-timer tracking for this slot */

/**

 * vmw_mksstat_cleanup_descriptor: Frees a single userspace-originating

 * mksGuestStat instance-descriptor page and unpins all related user pages.

 *

 * Unpin all user pages realated to this instance descriptor and free

 * the instance-descriptor page itself.

 *

 * @page: Page of the instance descriptor.

/**

 * vmw_mksstat_remove_all: Resets all mksGuestStat instance descriptors

 * from the hypervisor.

 *

 * Discard all hypervisor PFN mappings, containing active mksGuestState instance

 * descriptors, unpin the related userspace pages and free the related kernel pages.

 *

 * @dev_priv: Identifies the drm private device.

 * Return: Zero on success, negative error code on error.

 Discard all PFN mappings with the hypervisor */

 Discard all userspace-originating instance descriptors and unpin all related pages */

 Discard all kernel-internal instance descriptors and free all related pages */

/**

 * vmw_mksstat_reset_ioctl: Resets all mksGuestStat instance descriptors

 * from the hypervisor.

 *

 * Discard all hypervisor PFN mappings, containing active mksGuestStat instance

 * descriptors, unpin the related userspace pages and free the related kernel pages.

 *

 * @dev: Identifies the drm device.

 * @data: Pointer to the ioctl argument.

 * @file_priv: Identifies the caller; unused.

 * Return: Zero on success, negative error code on error.

/**

 * vmw_mksstat_add_ioctl: Creates a single userspace-originating mksGuestStat

 * instance descriptor and registers that with the hypervisor.

 *

 * Create a hypervisor PFN mapping, containing a single mksGuestStat instance

 * descriptor and pin the corresponding userspace pages.

 *

 * @dev: Identifies the drm device.

 * @data: Pointer to the ioctl argument.

 * @file_priv: Identifies the caller; unused.

 * Return: Zero on success, negative error code on error.

 Find an available slot in the mksGuestStats user array and reserve it */

 Allocate a page for the instance descriptor */

 Set up the instance descriptor */

 Pin mksGuestStat user pages and store those in the instance descriptor */

	/* Send the descriptor to the host via a hypervisor call. The mksGuestStat

	   pages will remain in use until the user requests a matching remove stats

/**

 * vmw_mksstat_remove_ioctl: Removes a single userspace-originating mksGuestStat

 * instance descriptor from the hypervisor.

 *

 * Discard a hypervisor PFN mapping, containing a single mksGuestStat instance

 * descriptor and unpin the corresponding userspace pages.

 *

 * @dev: Identifies the drm device.

 * @data: Pointer to the ioctl argument.

 * @file_priv: Identifies the caller; unused.

 * Return: Zero on success, negative error code on error.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2007-2010 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Authors: Thomas Hellstrom <thellstrom-at-vmware-dot-com>

		/*

		 * Because the graphics memory is a soft limit we can try to

		 * expand it instead of letting the userspace apps crash.

		 * We're just going to have a sane limit (half of RAM)

		 * on the number of MOB's that we create and will try to keep

		 * the system running until we reach that.

 TODO: This is most likely not correct */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Display unit using the legacy register interface.

/*

 * Legacy Display Unit CRTC functions

	/* If there is no display topology the host just assumes

	 * that the guest will set the same layout as the host.

 Make sure we always show something. */

 Must init otherwise list_empty(&ldu->active) will not work. */

/**

 * vmw_ldu_crtc_mode_set_nofb - Enable svga

 *

 * @crtc: CRTC associated with the new screen

 *

 * For LDU, just enable the svga

/**

 * vmw_ldu_crtc_atomic_enable - Noop

 *

 * @crtc: CRTC associated with the new screen

 * @state: Unused

 *

 * This is called after a mode set has been completed.  Here's

 * usually a good place to call vmw_ldu_add_active/vmw_ldu_del_active

 * but since for LDU the display plane is closely tied to the

 * CRTC, it makes more sense to do those at plane update time.

/**

 * vmw_ldu_crtc_atomic_disable - Turns off CRTC

 *

 * @crtc: CRTC to be turned off

 * @state: Unused

/*

 * Legacy Display Unit encoder functions

/*

 * Legacy Display Unit connector functions

/*

 * Legacy Display Plane Functions

/*

 * Atomic Helpers

	/*

	 * Remove this after enabling atomic because property values can

	 * only exist in a state object

 Initialize primary plane */

	/*

	 * We're going to be using traces and software cursors

 Initialize cursor plane */

 for old hardware without multimon only enable one display */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

	/*

	 * The destroy callback is only called with a committed resource on

	 * context destroy, in which case we destroy the cotable anyway,

	 * so there's no need to destroy DX shaders separately.

/*

 * Shader management:

/**

 * vmw_res_to_dx_shader - typecast a struct vmw_resource to a

 * struct vmw_dx_shader

 *

 * @res: Pointer to the struct vmw_resource.

/*

 * GB shader code:

	/*

	 * Create a fence object and fence the backup buffer.

/*

 * DX shader code:

/**

 * vmw_dx_shader_commit_notify - Notify that a shader operation has been

 * committed to hardware from a user-supplied command stream.

 *

 * @res: Pointer to the shader resource.

 * @state: Indicating whether a creation or removal has been committed.

 *

/**

 * vmw_dx_shader_unscrub - Have the device reattach a MOB to a DX shader.

 *

 * @res: The shader resource

 *

 * This function reverts a scrub operation.

/**

 * vmw_dx_shader_create - The DX shader create callback

 *

 * @res: The DX shader resource

 *

 * The create callback is called as part of resource validation and

 * makes sure that we unscrub the shader if it's previously been scrubbed.

/**

 * vmw_dx_shader_bind - The DX shader bind callback

 *

 * @res: The DX shader resource

 * @val_buf: Pointer to the validate buffer.

 *

/**

 * vmw_dx_shader_scrub - Have the device unbind a MOB from a DX shader.

 *

 * @res: The shader resource

 *

 * This function unbinds a MOB from the DX shader without requiring the

 * MOB dma_buffer to be reserved. The driver still considers the MOB bound.

 * However, once the driver eventually decides to unbind the MOB, it doesn't

 * need to access the context.

/**

 * vmw_dx_shader_unbind - The dx shader unbind callback.

 *

 * @res: The shader resource

 * @readback: Whether this is a readback unbind. Currently unused.

 * @val_buf: MOB buffer information.

/**

 * vmw_dx_shader_cotable_list_scrub - The cotable unbind_func callback for

 * DX shaders.

 *

 * @dev_priv: Pointer to device private structure.

 * @list: The list of cotable resources.

 * @readback: Whether the call was part of a readback unbind.

 *

 * Scrubs all shader MOBs so that any subsequent shader unbind or shader

 * destroy operation won't need to swap in the context.

/**

 * vmw_dx_shader_res_free - The DX shader free callback

 *

 * @res: The shader resource

 *

 * Frees the DX shader resource and updates memory accounting.

/**

 * vmw_dx_shader_add - Add a shader resource as a command buffer managed

 * resource.

 *

 * @man: The command buffer resource manager.

 * @ctx: Pointer to the context resource.

 * @user_key: The id used for this shader.

 * @shader_type: The shader type.

 * @list: The list of staged command buffer managed resources.

	/*

	 * The user_key name-space is not per shader type for DX shaders,

	 * so when hashing, use a single zero shader type.

/*

 * User-space shader management:

/*

 * This function is called when user space has no more references on the

 * base object. It releases the base-object's reference on the resource object.

	/*

	 * From here on, the destructor takes over resource freeing.

	/*

	 * From here on, the destructor takes over resource freeing.

/**

 * vmw_shader_id_ok - Check whether a compat shader user key and

 * shader type are within valid bounds.

 *

 * @user_key: User space id of the shader.

 * @shader_type: Shader type.

 *

 * Returns true if valid false if not.

/**

 * vmw_shader_key - Compute a hash key suitable for a compat shader.

 *

 * @user_key: User space id of the shader.

 * @shader_type: Shader type.

 *

 * Returns a hash key suitable for a command buffer managed resource

 * manager hash table.

/**

 * vmw_shader_remove - Stage a compat shader for removal.

 *

 * @man: Pointer to the compat shader manager identifying the shader namespace.

 * @user_key: The key that is used to identify the shader. The key is

 * unique to the shader type.

 * @shader_type: Shader type.

 * @list: Caller's list of staged command buffer resource actions.

/**

 * vmw_compat_shader_add - Create a compat shader and stage it for addition

 * as a command buffer managed resource.

 *

 * @dev_priv: Pointer to device private structure.

 * @man: Pointer to the compat shader manager identifying the shader namespace.

 * @user_key: The key that is used to identify the shader. The key is

 * unique to the shader type.

 * @bytecode: Pointer to the bytecode of the shader.

 * @shader_type: Shader type.

 * @size: Command size.

 * @list: Caller's list of staged command buffer resource actions.

 *

 Allocate and pin a DMA buffer */

 Map and copy shader bytecode. */

/**

 * vmw_shader_lookup - Look up a compat shader

 *

 * @man: Pointer to the command buffer managed resource manager identifying

 * the shader namespace.

 * @user_key: The user space id of the shader.

 * @shader_type: The shader type.

 *

 * Returns a refcounted pointer to a struct vmw_resource if the shader was

 * found. An error pointer otherwise.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2014 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Overlay control

	/*

	 * Each stream is a single overlay. In Xv these are called ports.

/*

 * Send put command to hw.

 *

 * Returns

 * -ERESTARTSYS if interrupted by a signal.

 defines are a index needs + 1 */

 hardware has hung, can't do anything here */

 the size is header + number of items */

 the IDs are neatly numbered */

/*

 * Send stop command to hw.

 *

 * Returns

 * -ERESTARTSYS if interrupted by a signal.

/*

 * Move a buffer to vram or gmr if @pin is set, else unpin the buffer.

 *

 * With the introduction of screen objects buffers could now be

 * used with GMRs instead of being locked to vram.

/*

 * Stop or pause a stream.

 *

 * If the stream is paused the no evict flag is removed from the buffer

 * but left in vram. This allows for instance mode_set to evict it

 * should it need to.

 *

 * The caller must hold the overlay lock.

 *

 * @stream_id which stream to stop/pause.

 * @pause true to pause, false to stop completely.

 no buffer attached the stream is completely stopped */

 If the stream is paused this is already done */

 We just remove the NO_EVICT flag so no -ENOMEM */

/*

 * Update a stream and send any put or stop fifo commands needed.

 *

 * The caller must hold the overlay lock.

 *

 * Returns

 * -ENOMEM if buffer doesn't fit in vram.

 * -ERESTARTSYS if interrupted.

		/* If the buffers match and not paused then just send

		 * the put command, no need to do anything else.

	/* We don't start the old stream if we are interrupted.

	 * Might return -ENOMEM if it can't fit the buffer in vram.

		/* This one needs to happen no matter what. We only remove

		 * the NO_EVICT flag so this is safe from -ENOMEM.

 stream is no longer stopped/paused */

/*

 * Try to resume all paused streams.

 *

 * Used by the kms code after moving a new scanout buffer to vram.

 *

 * Takes the overlay lock.

/*

 * Pauses all active streams.

 *

 * Used by the kms code when moving a new scanout buffer to vram.

 *

 * Takes the overlay lock.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * vmw_resource_mob_attach - Mark a resource as attached to its backing mob

 * @res: The resource

/**

 * vmw_resource_mob_detach - Mark a resource as detached from its backing mob

 * @res: The resource

/**

 * vmw_resource_release_id - release a resource id to the id manager.

 *

 * @res: Pointer to the resource.

 *

 * Release the resource id to the resource id manager and set it to -1

/**

 * vmw_resource_alloc_id - release a resource id to the id manager.

 *

 * @res: Pointer to the resource.

 *

 * Allocate the lowest free resource from the resource manager, and set

 * @res->id to that id. Returns 0 on success and -ENOMEM on failure.

/**

 * vmw_resource_init - initialize a struct vmw_resource

 *

 * @dev_priv:       Pointer to a device private struct.

 * @res:            The struct vmw_resource to initialize.

 * @delay_id:       Boolean whether to defer device id allocation until

 *                  the first validation.

 * @res_free:       Resource destructor.

 * @func:           Resource function table.

/**

 * vmw_user_resource_lookup_handle - lookup a struct resource from a

 * TTM user-space handle and perform basic type checks

 *

 * @dev_priv:     Pointer to a device private struct

 * @tfile:        Pointer to a struct ttm_object_file identifying the caller

 * @handle:       The TTM user-space handle

 * @converter:    Pointer to an object describing the resource type

 * @p_res:        On successful return the location pointed to will contain

 *                a pointer to a refcounted struct vmw_resource.

 *

 * If the handle can't be found or is associated with an incorrect resource

 * type, -EINVAL will be returned.

/**

 * vmw_user_resource_noref_lookup_handle - lookup a struct resource from a

 * TTM user-space handle and perform basic type checks

 *

 * @dev_priv:     Pointer to a device private struct

 * @tfile:        Pointer to a struct ttm_object_file identifying the caller

 * @handle:       The TTM user-space handle

 * @converter:    Pointer to an object describing the resource type

 *

 * If the handle can't be found or is associated with an incorrect resource

 * type, -EINVAL will be returned.

/*

 * Helper function that looks either a surface or bo.

 *

 * The pointer this pointed at by out_surf and out_buf needs to be null.

/**

 * vmw_resource_buf_alloc - Allocate a backup buffer for a resource.

 *

 * @res:            The resource for which to allocate a backup buffer.

 * @interruptible:  Whether any sleeps during allocation should be

 *                  performed while interruptible.

/**

 * vmw_resource_do_validate - Make a resource up-to-date and visible

 *                            to the device.

 *

 * @res:            The resource to make visible to the device.

 * @val_buf:        Information about a buffer possibly

 *                  containing backup data if a bind operation is needed.

 * @dirtying:       Transfer dirty regions.

 *

 * On hardware resource shortage, this function returns -EBUSY and

 * should be retried once resources have been freed up.

	/*

	 * Handle the case where the backup mob is marked coherent but

	 * the resource isn't.

	/*

	 * Transfer the dirty regions to the resource and update

	 * the resource.

/**

 * vmw_resource_unreserve - Unreserve a resource previously reserved for

 * command submission.

 *

 * @res:               Pointer to the struct vmw_resource to unreserve.

 * @dirty_set:         Change dirty status of the resource.

 * @dirty:             When changing dirty status indicates the new status.

 * @switch_backup:     Backup buffer has been switched.

 * @new_backup:        Pointer to new backup buffer if command submission

 *                     switched. May be NULL.

 * @new_backup_offset: New backup offset if @switch_backup is true.

 *

 * Currently unreserving a resource means putting it back on the device's

 * resource lru list, so that it can be evicted if necessary.

			/*

			 * The validation code should already have added a

			 * dirty tracker here.

/**

 * vmw_resource_check_buffer - Check whether a backup buffer is needed

 *                             for a resource and in that case, allocate

 *                             one, reserve and validate it.

 *

 * @ticket:         The ww aqcquire context to use, or NULL if trylocking.

 * @res:            The resource for which to allocate a backup buffer.

 * @interruptible:  Whether any sleeps during allocation should be

 *                  performed while interruptible.

 * @val_buf:        On successful return contains data about the

 *                  reserved and validated backup buffer.

/*

 * vmw_resource_reserve - Reserve a resource for command submission

 *

 * @res:            The resource to reserve.

 *

 * This function takes the resource off the LRU list and make sure

 * a backup buffer is present for guest-backed resources. However,

 * the buffer may not be bound to the resource at this point.

 *

/**

 * vmw_resource_backoff_reservation - Unreserve and unreference a

 *                                    backup buffer

 *.

 * @ticket:         The ww acquire ctx used for reservation.

 * @val_buf:        Backup buffer information.

/**

 * vmw_resource_do_evict - Evict a resource, and transfer its data

 *                         to a backup buffer.

 *

 * @ticket:         The ww acquire ticket to use, or NULL if trylocking.

 * @res:            The resource to evict.

 * @interruptible:  Whether to wait interruptible.

/**

 * vmw_resource_validate - Make a resource up-to-date and visible

 *                         to the device.

 * @res: The resource to make visible to the device.

 * @intr: Perform waits interruptible if possible.

 * @dirtying: Pending GPU operation will dirty the resource

 *

 * On succesful return, any backup DMA buffer pointed to by @res->backup will

 * be reserved and validated.

 * On hardware resource shortage, this function will repeatedly evict

 * resources of the same type until the validation succeeds.

 *

 * Return: Zero on success, -ERESTARTSYS if interrupted, negative error code

 * on failure.

 Trylock backup buffers with a NULL ticket. */

/**

 * vmw_resource_unbind_list

 *

 * @vbo: Pointer to the current backing MOB.

 *

 * Evicts the Guest Backed hardware resource if the backup

 * buffer is being moved out of MOB memory.

 * Note that this function will not race with the resource

 * validation code, since resource validation and eviction

 * both require the backup buffer to be reserved.

/**

 * vmw_query_readback_all - Read back cached query states

 *

 * @dx_query_mob: Buffer containing the DX query MOB

 *

 * Read back cached states from the device if they exist.  This function

 * assumings binding_mutex is held.

 No query bound, so do nothing */

 Triggers a rebind the next time affected context is bound */

/**

 * vmw_query_move_notify - Read back cached query states

 *

 * @bo: The TTM buffer object about to move.

 * @old_mem: The memory region @bo is moving from.

 * @new_mem: The memory region @bo is moving to.

 *

 * Called before the query MOB is swapped out to read back cached query

 * states from the device.

 If BO is being moved from MOB to system memory */

 Create a fence and attach the BO to it */

/**

 * vmw_resource_needs_backup - Return whether a resource needs a backup buffer.

 *

 * @res:            The resource being queried.

/**

 * vmw_resource_evict_type - Evict all resources of a specific type

 *

 * @dev_priv:       Pointer to a device private struct

 * @type:           The resource type to evict

 *

 * To avoid thrashing starvation or as part of the hibernation sequence,

 * try to evict all evictable resources of a specific type.

 Wait lock backup buffers with a ticket. */

/**

 * vmw_resource_evict_all - Evict all evictable resources

 *

 * @dev_priv:       Pointer to a device private struct

 *

 * To avoid thrashing starvation or as part of the hibernation sequence,

 * evict all evictable resources. In particular this means that all

 * guest-backed resources that are registered with the device are

 * evicted and the OTable becomes clean.

/*

 * vmw_resource_pin - Add a pin reference on a resource

 *

 * @res: The resource to add a pin reference on

 *

 * This function adds a pin reference, and if needed validates the resource.

 * Having a pin reference means that the resource can never be evicted, and

 * its id will never change as long as there is a pin reference.

 * This function returns 0 on success and a negative error code on failure.

 Do we really need to pin the MOB as well? */

/**

 * vmw_resource_unpin - Remove a pin reference from a resource

 *

 * @res: The resource to remove a pin reference from

 *

 * Having a pin reference means that the resource can never be evicted, and

 * its id will never change as long as there is a pin reference.

/**

 * vmw_res_type - Return the resource type

 *

 * @res: Pointer to the resource

/**

 * vmw_resource_dirty_update - Update a resource's dirty tracker with a

 * sequential range of touched backing store memory.

 * @res: The resource.

 * @start: The first page touched.

 * @end: The last page touched + 1.

/**

 * vmw_resources_clean - Clean resources intersecting a mob range

 * @vbo: The mob buffer object

 * @start: The mob page offset starting the range

 * @end: The mob page offset ending the range

 * @num_prefault: Returns how many pages including the first have been

 * cleaned and are ok to prefault

	/*

	 * Find the resource with lowest backup_offset that intersects the

	 * range.

 Continue to look for resources with lower offsets */

	/*

	 * In order of increasing backup_offset, clean dirty resorces

	 * intersecting the range.

	/*

	 * Set number of pages allowed prefaulting and fence the buffer object

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 vmw_user_surface_lookup takes one ref so does new_fb */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 A future safe maximum remap size. */

	/*

	 * Need to split the command if there are too many

	 * pages that goes into the gmr.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright Â© 2011-2018 VMware, Inc., Palo Alto, CA., USA

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * struct vmw_user_buffer_object - User-space-visible buffer object

 *

 * @prime: The prime object providing user visibility.

 * @vbo: The struct vmw_buffer_object

/**

 * vmw_buffer_object - Convert a struct ttm_buffer_object to a struct

 * vmw_buffer_object.

 *

 * @bo: Pointer to the TTM buffer object.

 * Return: Pointer to the struct vmw_buffer_object embedding the

 * TTM buffer object.

/**

 * vmw_user_buffer_object - Convert a struct ttm_buffer_object to a struct

 * vmw_user_buffer_object.

 *

 * @bo: Pointer to the TTM buffer object.

 * Return: Pointer to the struct vmw_buffer_object embedding the TTM buffer

 * object.

/**

 * vmw_bo_pin_in_placement - Validate a buffer to placement.

 *

 * @dev_priv:  Driver private.

 * @buf:  DMA buffer to move.

 * @placement:  The placement to pin it.

 * @interruptible:  Use interruptible wait.

 * Return: Zero on success, Negative error code on failure. In particular

 * -ERESTARTSYS if interrupted by a signal

/**

 * vmw_bo_pin_in_vram_or_gmr - Move a buffer to vram or gmr.

 *

 * This function takes the reservation_sem in write mode.

 * Flushes and unpins the query bo to avoid failures.

 *

 * @dev_priv:  Driver private.

 * @buf:  DMA buffer to move.

 * @interruptible:  Use interruptible wait.

 * Return: Zero on success, Negative error code on failure. In particular

 * -ERESTARTSYS if interrupted by a signal

/**

 * vmw_bo_pin_in_vram - Move a buffer to vram.

 *

 * This function takes the reservation_sem in write mode.

 * Flushes and unpins the query bo to avoid failures.

 *

 * @dev_priv:  Driver private.

 * @buf:  DMA buffer to move.

 * @interruptible:  Use interruptible wait.

 * Return: Zero on success, Negative error code on failure. In particular

 * -ERESTARTSYS if interrupted by a signal

/**

 * vmw_bo_pin_in_start_of_vram - Move a buffer to start of vram.

 *

 * This function takes the reservation_sem in write mode.

 * Flushes and unpins the query bo to avoid failures.

 *

 * @dev_priv:  Driver private.

 * @buf:  DMA buffer to pin.

 * @interruptible:  Use interruptible wait.

 * Return: Zero on success, Negative error code on failure. In particular

 * -ERESTARTSYS if interrupted by a signal

	/*

	 * Is this buffer already in vram but not at the start of it?

	 * In that case, evict it first because TTM isn't good at handling

	 * that situation.

 For some reason we didn't end up at the start of vram */

/**

 * vmw_bo_unpin - Unpin the buffer given buffer, does not move the buffer.

 *

 * This function takes the reservation_sem in write mode.

 *

 * @dev_priv:  Driver private.

 * @buf:  DMA buffer to unpin.

 * @interruptible:  Use interruptible wait.

 * Return: Zero on success, Negative error code on failure. In particular

 * -ERESTARTSYS if interrupted by a signal

/**

 * vmw_bo_get_guest_ptr - Get the guest ptr representing the current placement

 * of a buffer.

 *

 * @bo: Pointer to a struct ttm_buffer_object. Must be pinned or reserved.

 * @ptr: SVGAGuestPtr returning the result.

/**

 * vmw_bo_pin_reserved - Pin or unpin a buffer object without moving it.

 *

 * @vbo: The buffer object. Must be reserved.

 * @pin: Whether to pin or unpin.

 *

/**

 * vmw_bo_map_and_cache - Map a buffer object and cache the map

 *

 * @vbo: The buffer object to map

 * Return: A kernel virtual address or NULL if mapping failed.

 *

 * This function maps a buffer object into the kernel address space, or

 * returns the virtual kernel address of an already existing map. The virtual

 * address remains valid as long as the buffer object is pinned or reserved.

 * The cached map is torn down on either

 * 1) Buffer object move

 * 2) Buffer object swapout

 * 3) Buffer object destruction

 *

/**

 * vmw_bo_unmap - Tear down a cached buffer object map.

 *

 * @vbo: The buffer object whose map we are tearing down.

 *

 * This function tears down a cached map set up using

 * vmw_buffer_object_map_and_cache().

/**

 * vmw_bo_acc_size - Calculate the pinned memory usage of buffers

 *

 * @dev_priv: Pointer to a struct vmw_private identifying the device.

 * @size: The requested buffer size.

 * @user: Whether this is an ordinary dma buffer or a user dma buffer.

/**

 * vmw_bo_bo_free - vmw buffer object destructor

 *

 * @bo: Pointer to the embedded struct ttm_buffer_object

/**

 * vmw_user_bo_destroy - vmw buffer object destructor

 *

 * @bo: Pointer to the embedded struct ttm_buffer_object

/**

 * vmw_bo_create_kernel - Create a pinned BO for internal kernel use.

 *

 * @dev_priv: Pointer to the device private struct

 * @size: size of the BO we need

 * @placement: where to put it

 * @p_bo: resulting BO

 *

 * Creates and pin a simple BO for in kernel use.

/**

 * vmw_bo_init - Initialize a vmw buffer object

 *

 * @dev_priv: Pointer to the device private struct

 * @vmw_bo: Pointer to the struct vmw_buffer_object to initialize.

 * @size: Buffer object size in bytes.

 * @placement: Initial placement.

 * @interruptible: Whether waits should be performed interruptible.

 * @pin: If the BO should be created pinned at a fixed location.

 * @bo_free: The buffer object destructor.

 * Returns: Zero on success, negative error code on error.

 *

 * Note that on error, the code will free the buffer object.

/**

 * vmw_user_bo_release - TTM reference base object release callback for

 * vmw user buffer objects

 *

 * @p_base: The TTM base object pointer about to be unreferenced.

 *

 * Clears the TTM base object pointer and drops the reference the

 * base object has on the underlying struct vmw_buffer_object.

/**

 * vmw_user_bo_ref_obj_release - TTM synccpu reference object release callback

 * for vmw user buffer objects

 *

 * @base: Pointer to the TTM base object

 * @ref_type: Reference type of the reference reaching zero.

 *

 * Called when user-space drops its last synccpu reference on the buffer

 * object, Either explicitly or as part of a cleanup file close.

/**

 * vmw_user_bo_alloc - Allocate a user buffer object

 *

 * @dev_priv: Pointer to a struct device private.

 * @tfile: Pointer to a struct ttm_object_file on which to register the user

 * object.

 * @size: Size of the buffer object.

 * @shareable: Boolean whether the buffer is shareable with other open files.

 * @handle: Pointer to where the handle value should be assigned.

 * @p_vbo: Pointer to where the refcounted struct vmw_buffer_object pointer

 * should be assigned.

 * @p_base: The TTM base object pointer about to be allocated.

 * Return: Zero on success, negative error code on error.

/**

 * vmw_user_bo_verify_access - verify access permissions on this

 * buffer object.

 *

 * @bo: Pointer to the buffer object being accessed

 * @tfile: Identifying the caller.

 Check that the caller has opened the object. */

/**

 * vmw_user_bo_synccpu_grab - Grab a struct vmw_user_buffer_object for cpu

 * access, idling previous GPU operations on the buffer and optionally

 * blocking it for further command submissions.

 *

 * @user_bo: Pointer to the buffer object being grabbed for CPU access

 * @tfile: Identifying the caller.

 * @flags: Flags indicating how the grab should be performed.

 * Return: Zero on success, Negative error code on error. In particular,

 * -EBUSY will be returned if a dontblock operation is requested and the

 * buffer object is busy, and -ERESTARTSYS will be returned if a wait is

 * interrupted by a signal.

 *

 * A blocking grab will be automatically released when @tfile is closed.

/**

 * vmw_user_bo_synccpu_release - Release a previous grab for CPU access,

 * and unblock command submission on the buffer if blocked.

 *

 * @handle: Handle identifying the buffer object.

 * @tfile: Identifying the caller.

 * @flags: Flags indicating the type of release.

/**

 * vmw_user_bo_synccpu_ioctl - ioctl function implementing the synccpu

 * functionality.

 *

 * @dev: Identifies the drm device.

 * @data: Pointer to the ioctl argument.

 * @file_priv: Identifies the caller.

 * Return: Zero on success, negative error code on error.

 *

 * This function checks the ioctl arguments for validity and calls the

 * relevant synccpu functions.

/**

 * vmw_bo_alloc_ioctl - ioctl function implementing the buffer object

 * allocation functionality.

 *

 * @dev: Identifies the drm device.

 * @data: Pointer to the ioctl argument.

 * @file_priv: Identifies the caller.

 * Return: Zero on success, negative error code on error.

 *

 * This function checks the ioctl arguments for validity and allocates a

 * struct vmw_user_buffer_object bo.

/**

 * vmw_bo_unref_ioctl - Generic handle close ioctl.

 *

 * @dev: Identifies the drm device.

 * @data: Pointer to the ioctl argument.

 * @file_priv: Identifies the caller.

 * Return: Zero on success, negative error code on error.

 *

 * This function checks the ioctl arguments for validity and closes a

 * handle to a TTM base object, optionally freeing the object.

/**

 * vmw_user_bo_lookup - Look up a vmw user buffer object from a handle.

 *

 * @tfile: The TTM object file the handle is registered with.

 * @handle: The user buffer object handle

 * @out: Pointer to a where a pointer to the embedded

 * struct vmw_buffer_object should be placed.

 * @p_base: Pointer to where a pointer to the TTM base object should be

 * placed, or NULL if no such pointer is required.

 * Return: Zero on success, Negative error code on error.

 *

 * Both the output base object pointer and the vmw buffer object pointer

 * will be refcounted.

/**

 * vmw_user_bo_noref_lookup - Look up a vmw user buffer object without reference

 * @tfile: The TTM object file the handle is registered with.

 * @handle: The user buffer object handle.

 *

 * This function looks up a struct vmw_user_bo and returns a pointer to the

 * struct vmw_buffer_object it derives from without refcounting the pointer.

 * The returned pointer is only valid until vmw_user_bo_noref_release() is

 * called, and the object pointed to by the returned pointer may be doomed.

 * Any persistent usage of the object requires a refcount to be taken using

 * ttm_bo_reference_unless_doomed(). Iff this function returns successfully it

 * needs to be paired with vmw_user_bo_noref_release() and no sleeping-

 * or scheduling functions may be called inbetween these function calls.

 *

 * Return: A struct vmw_buffer_object pointer if successful or negative

 * error pointer on failure.

/**

 * vmw_user_bo_reference - Open a handle to a vmw user buffer object.

 *

 * @tfile: The TTM object file to register the handle with.

 * @vbo: The embedded vmw buffer object.

 * @handle: Pointer to where the new handle should be placed.

 * Return: Zero on success, Negative error code on error.

/**

 * vmw_bo_fence_single - Utility function to fence a single TTM buffer

 *                       object without unreserving it.

 *

 * @bo:             Pointer to the struct ttm_buffer_object to fence.

 * @fence:          Pointer to the fence. If NULL, this function will

 *                  insert a fence into the command stream..

 *

 * Contrary to the ttm_eu version of this function, it takes only

 * a single buffer object instead of a list, and it also doesn't

 * unreserve the buffer object, which needs to be done separately.

/**

 * vmw_dumb_create - Create a dumb kms buffer

 *

 * @file_priv: Pointer to a struct drm_file identifying the caller.

 * @dev: Pointer to the drm device.

 * @args: Pointer to a struct drm_mode_create_dumb structure

 * Return: Zero on success, negative error code on failure.

 *

 * This is a driver callback for the core drm create_dumb functionality.

 * Note that this is very similar to the vmw_bo_alloc ioctl, except

 * that the arguments have a different format.

/**

 * vmw_dumb_map_offset - Return the address space offset of a dumb buffer

 *

 * @file_priv: Pointer to a struct drm_file identifying the caller.

 * @dev: Pointer to the drm device.

 * @handle: Handle identifying the dumb buffer.

 * @offset: The address space offset returned.

 * Return: Zero on success, negative error code on failure.

 *

 * This is a driver callback for the core drm dumb_map_offset functionality.

/**

 * vmw_dumb_destroy - Destroy a dumb boffer

 *

 * @file_priv: Pointer to a struct drm_file identifying the caller.

 * @dev: Pointer to the drm device.

 * @handle: Handle identifying the dumb buffer.

 * Return: Zero on success, negative error code on failure.

 *

 * This is a driver callback for the core drm dumb_destroy functionality.

/**

 * vmw_bo_swap_notify - swapout notify callback.

 *

 * @bo: The buffer object to be swapped out.

 Is @bo embedded in a struct vmw_buffer_object? */

 Kill any cached kernel maps before swapout */

/**

 * vmw_bo_move_notify - TTM move_notify_callback

 *

 * @bo: The TTM buffer object about to move.

 * @mem: The struct ttm_resource indicating to what memory

 *       region the move is taking place.

 *

 * Detaches cached maps and device bindings that require that the

 * buffer doesn't move.

 Make sure @bo is embedded in a struct vmw_buffer_object? */

	/*

	 * Kill any cached kernel maps before move to or from VRAM.

	 * With other types of moves, the underlying pages stay the same,

	 * and the map can be kept.

	/*

	 * If we're moving a backup MOB out of MOB placement, then make sure we

	 * read back all resource content first, and unbind the MOB from

	 * the resource.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * This file implements the vmwgfx context binding manager,

 * The sole reason for having to use this code is that vmware guest

 * backed contexts can be swapped out to their backing mobs by the device

 * at any time, also swapped in at any time. At swapin time, the device

 * validates the context bindings to make sure they point to valid resources.

 * It's this outside-of-drawcall validation (that can happen at any time),

 * that makes this code necessary.

 *

 * We therefore need to kill any context bindings pointing to a resource

 * when the resource is swapped out. Furthermore, if the vmwgfx driver has

 * swapped out the context we can't swap it in again to kill bindings because

 * of backing mob reservation lockdep violations, so as part of

 * context swapout, also kill all bindings of a context, so that they are

 * already killed if a resource to which a binding points

 * needs to be swapped out.

 *

 * Note that a resource can be pointed to by bindings from multiple contexts,

 * Therefore we can't easily protect this data by a per context mutex

 * (unless we use deadlock-safe WW mutexes). So we use a global binding_mutex

 * to protect all binding manager data.

 *

 * Finally, any association between a context and a global resource

 * (surface, shader or even DX query) is conceptually a context binding that

 * needs to be tracked by this code.

/**

 * struct vmw_ctx_binding_state - per context binding state

 *

 * @dev_priv: Pointer to device private structure.

 * @list: linked list of individual active bindings.

 * @render_targets: Render target bindings.

 * @texture_units: Texture units bindings.

 * @ds_view: Depth-stencil view binding.

 * @so_targets: StreamOutput target bindings.

 * @vertex_buffers: Vertex buffer bindings.

 * @index_buffer: Index buffer binding.

 * @per_shader: Per shader-type bindings.

 * @ua_views: UAV bindings.

 * @so_state: StreamOutput bindings.

 * @dirty: Bitmap tracking per binding-type changes that have not yet

 * been emitted to the device.

 * @dirty_vb: Bitmap tracking individual vertex buffer binding changes that

 * have not yet been emitted to the device.

 * @bind_cmd_buffer: Scratch space used to construct binding commands.

 * @bind_cmd_count: Number of binding command data entries in @bind_cmd_buffer

 * @bind_first_slot: Used together with @bind_cmd_buffer to indicate the

 * device binding slot of the first command data entry in @bind_cmd_buffer.

 *

 * Note that this structure also provides storage space for the individual

 * struct vmw_ctx_binding objects, so that no dynamic allocation is needed

 * for individual bindings.

 *

/**

 * struct vmw_binding_info - Per binding type information for the binding

 * manager

 *

 * @size: The size of the struct binding derived from a struct vmw_ctx_bindinfo.

 * @offsets: array[shader_slot] of offsets to the array[slot]

 * of struct bindings for the binding type.

 * @scrub_func: Pointer to the scrub function for this binding type.

 *

 * Holds static information to help optimize the binding manager and avoid

 * an excessive amount of switch statements.

/*

 * A number of static variables that help determine the scrub func and the

 * location of the struct vmw_ctx_bindinfo slots for each binding type.

/**

 * vmw_cbs_context - Return a pointer to the context resource of a

 * context binding state tracker.

 *

 * @cbs: The context binding state tracker.

 *

 * Provided there are any active bindings, this function will return an

 * unreferenced pointer to the context resource that owns the context

 * binding state tracker. If there are no active bindings, this function

 * will return NULL. Note that the caller must somehow ensure that a reference

 * is held on the context resource prior to calling this function.

/**

 * vmw_binding_loc - determine the struct vmw_ctx_bindinfo slot location.

 *

 * @cbs: Pointer to a struct vmw_ctx_binding state which holds the slot.

 * @bt: The binding type.

 * @shader_slot: The shader slot of the binding. If none, then set to 0.

 * @slot: The slot of the binding.

/**

 * vmw_binding_drop: Stop tracking a context binding

 *

 * @bi: Pointer to binding tracker storage.

 *

 * Stops tracking a context binding, and re-initializes its storage.

 * Typically used when the context binding is replaced with a binding to

 * another (or the same, for that matter) resource.

/**

 * vmw_binding_add: Start tracking a context binding

 *

 * @cbs: Pointer to the context binding state tracker.

 * @bi: Information about the binding to track.

 * @shader_slot: The shader slot of the binding.

 * @slot: The slot of the binding.

 *

 * Starts tracking the binding in the context binding

 * state structure @cbs.

/**

 * vmw_binding_add_uav_index - Add UAV index for tracking.

 * @cbs: Pointer to the context binding state tracker.

 * @slot: UAV type to which bind this index.

 * @index: The splice index to track.

/**

 * vmw_binding_transfer: Transfer a context binding tracking entry.

 *

 * @cbs: Pointer to the persistent context binding state tracker.

 * @from: Staged binding info built during execbuf

 * @bi: Information about the binding to track.

 *

/**

 * vmw_binding_state_kill - Kill all bindings associated with a

 * struct vmw_ctx_binding state structure, and re-initialize the structure.

 *

 * @cbs: Pointer to the context binding state tracker.

 *

 * Emits commands to scrub all bindings associated with the

 * context binding state tracker. Then re-initializes the whole structure.

/**

 * vmw_binding_state_scrub - Scrub all bindings associated with a

 * struct vmw_ctx_binding state structure.

 *

 * @cbs: Pointer to the context binding state tracker.

 *

 * Emits commands to scrub all bindings associated with the

 * context binding state tracker.

/**

 * vmw_binding_res_list_kill - Kill all bindings on a

 * resource binding list

 *

 * @head: list head of resource binding list

 *

 * Kills all bindings associated with a specific resource. Typically

 * called before the resource is destroyed.

/**

 * vmw_binding_res_list_scrub - Scrub all bindings on a

 * resource binding list

 *

 * @head: list head of resource binding list

 *

 * Scrub all bindings associated with a specific resource. Typically

 * called before the resource is evicted.

/**

 * vmw_binding_state_commit - Commit staged binding info

 *

 * @to:   Staged binding info area to copy into to.

 * @from: Staged binding info built during execbuf.

 *

 * Transfers binding info from a temporary structure

 * (typically used by execbuf) to the persistent

 * structure in the context. This can be done once commands have been

 * submitted to hardware

 Also transfer uav splice indices */

/**

 * vmw_binding_rebind_all - Rebind all scrubbed bindings of a context

 *

 * @cbs: Pointer to the context binding state tracker.

 *

 * Walks through the context binding list and rebinds all scrubbed

 * resources.

/**

 * vmw_binding_scrub_shader - scrub a shader binding from a context.

 *

 * @bi: single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

/**

 * vmw_binding_scrub_render_target - scrub a render target binding

 * from a context.

 *

 * @bi: single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

/**

 * vmw_binding_scrub_texture - scrub a texture binding from a context.

 *

 * @bi: single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

 *

 * TODO: Possibly complement this function with a function that takes

 * a list of texture bindings and combines them to a single command.

/**

 * vmw_binding_scrub_dx_shader - scrub a dx shader binding from a context.

 *

 * @bi: single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

/**

 * vmw_binding_scrub_cb - scrub a constant buffer binding from a context.

 *

 * @bi: single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

/**

 * vmw_collect_view_ids - Build view id data for a view binding command

 * without checking which bindings actually need to be emitted

 *

 * @cbs: Pointer to the context's struct vmw_ctx_binding_state

 * @biv: Pointer to where the binding info array is stored in @cbs

 * @max_num: Maximum number of entries in the @bi array.

 *

 * Scans the @bi array for bindings and builds a buffer of view id data.

 * Stops at the first non-existing binding in the @bi array.

 * On output, @cbs->bind_cmd_count contains the number of bindings to be

 * emitted, @cbs->bind_first_slot is set to zero, and @cbs->bind_cmd_buffer

 * contains the command data.

/**

 * vmw_collect_dirty_view_ids - Build view id data for a view binding command

 *

 * @cbs: Pointer to the context's struct vmw_ctx_binding_state

 * @bi: Pointer to where the binding info array is stored in @cbs

 * @dirty: Bitmap indicating which bindings need to be emitted.

 * @max_num: Maximum number of entries in the @bi array.

 *

 * Scans the @bi array for bindings that need to be emitted and

 * builds a buffer of view id data.

 * On output, @cbs->bind_cmd_count contains the number of bindings to be

 * emitted, @cbs->bind_first_slot indicates the index of the first emitted

 * binding, and @cbs->bind_cmd_buffer contains the command data.

/**

 * vmw_emit_set_sr - Issue delayed DX shader resource binding commands

 *

 * @cbs: Pointer to the context's struct vmw_ctx_binding_state

 * @shader_slot: The shader slot of the binding.

/**

 * vmw_emit_set_rt - Issue delayed DX rendertarget binding commands

 *

 * @cbs: Pointer to the context's struct vmw_ctx_binding_state

/**

 * vmw_collect_so_targets - Build SVGA3dSoTarget data for a binding command

 * without checking which bindings actually need to be emitted

 *

 * @cbs: Pointer to the context's struct vmw_ctx_binding_state

 * @biso: Pointer to where the binding info array is stored in @cbs

 * @max_num: Maximum number of entries in the @bi array.

 *

 * Scans the @bi array for bindings and builds a buffer of SVGA3dSoTarget data.

 * Stops at the first non-existing binding in the @bi array.

 * On output, @cbs->bind_cmd_count contains the number of bindings to be

 * emitted, @cbs->bind_first_slot is set to zero, and @cbs->bind_cmd_buffer

 * contains the command data.

/**

 * vmw_emit_set_so_target - Issue delayed streamout binding commands

 *

 * @cbs: Pointer to the context's struct vmw_ctx_binding_state

/**

 * vmw_binding_emit_dirty_ps - Issue delayed per shader binding commands

 *

 * @cbs: Pointer to the context's struct vmw_ctx_binding_state

 *

/**

 * vmw_collect_dirty_vbs - Build SVGA3dVertexBuffer data for a

 * SVGA3dCmdDXSetVertexBuffers command

 *

 * @cbs: Pointer to the context's struct vmw_ctx_binding_state

 * @bi: Pointer to where the binding info array is stored in @cbs

 * @dirty: Bitmap indicating which bindings need to be emitted.

 * @max_num: Maximum number of entries in the @bi array.

 *

 * Scans the @bi array for bindings that need to be emitted and

 * builds a buffer of SVGA3dVertexBuffer data.

 * On output, @cbs->bind_cmd_count contains the number of bindings to be

 * emitted, @cbs->bind_first_slot indicates the index of the first emitted

 * binding, and @cbs->bind_cmd_buffer contains the command data.

/**

 * vmw_emit_set_vb - Issue delayed vertex buffer binding commands

 *

 * @cbs: Pointer to the context's struct vmw_ctx_binding_state

 *

 Splice index is specified user-space   */

 Start index is specified user-space */

/**

 * vmw_binding_emit_dirty - Issue delayed binding commands

 *

 * @cbs: Pointer to the context's struct vmw_ctx_binding_state

 *

 * This function issues the delayed binding commands that arise from

 * previous scrub / unscrub calls. These binding commands are typically

 * commands that batch a number of bindings and therefore it makes sense

 * to delay them.

/**

 * vmw_binding_scrub_sr - Schedule a dx shaderresource binding

 * scrub from a context

 *

 * @bi: single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

/**

 * vmw_binding_scrub_dx_rt - Schedule a dx rendertarget binding

 * scrub from a context

 *

 * @bi: single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

/**

 * vmw_binding_scrub_so_target - Schedule a dx streamoutput buffer binding

 * scrub from a context

 *

 * @bi: single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

/**

 * vmw_binding_scrub_vb - Schedule a dx vertex buffer binding

 * scrub from a context

 *

 * @bi: single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

/**

 * vmw_binding_scrub_ib - scrub a dx index buffer binding from a context

 *

 * @bi: single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

/**

 * vmw_binding_scrub_so - Scrub a streamoutput binding from context.

 * @bi: Single binding information.

 * @rebind: Whether to issue a bind instead of scrub command.

/**

 * vmw_binding_state_alloc - Allocate a struct vmw_ctx_binding_state with

 * memory accounting.

 *

 * @dev_priv: Pointer to a device private structure.

 *

 * Returns a pointer to a newly allocated struct or an error pointer on error.

/**

 * vmw_binding_state_free - Free a struct vmw_ctx_binding_state and its

 * memory accounting info.

 *

 * @cbs: Pointer to the struct vmw_ctx_binding_state to be freed.

/**

 * vmw_binding_state_list - Get the binding list of a

 * struct vmw_ctx_binding_state

 *

 * @cbs: Pointer to the struct vmw_ctx_binding_state

 *

 * Returns the binding list which can be used to traverse through the bindings

 * and access the resource information of all bindings.

/**

 * vmw_binding_state_reset - clear a struct vmw_ctx_binding_state

 *

 * @cbs: Pointer to the struct vmw_ctx_binding_state to be cleared

 *

 * Drops all bindings registered in @cbs. No device binding actions are

 * performed.

/**

 * vmw_binding_dirtying - Return whether a binding type is dirtying its resource

 * @binding_type: The binding type

 *

 * Each time a resource is put on the validation list as the result of a

 * context binding referencing it, we need to determine whether that resource

 * will be dirtied (written to by the GPU) as a result of the corresponding

 * GPU operation. Currently rendertarget-, depth-stencil-, stream-output-target

 * and unordered access view bindings are capable of dirtying its resource.

 *

 * Return: Whether the binding type dirties the resource its binding points to.

 Review this function as new bindings are added. */

/*

 * This function is unused at run-time, and only used to hold various build

 * asserts important for code optimization assumptions.

	/*

	 * struct vmw_ctx_binding_state::bind_cmd_buffer is used for various

	 * view id arrays.

	/*

	 * struct vmw_ctx_binding_state::bind_cmd_buffer is used for

	 * u32 view ids, SVGA3dSoTargets and SVGA3dVertexBuffers

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * vmw_thread_fn - Deferred (process context) irq handler

 *

 * @irq: irq number

 * @arg: Closure argument. Pointer to a struct drm_device cast to void *

 *

 * This function implements the deferred part of irq processing.

 * The function is guaranteed to run at least once after the

 * vmw_irq_handler has returned with IRQ_WAKE_THREAD.

 *

/**

 * vmw_irq_handler: irq handler

 *

 * @irq: irq number

 * @arg: Closure argument. Pointer to a struct drm_device cast to void *

 *

 * This function implements the quick part of irq processing.

 * The function performs fast actions like clearing the device interrupt

 * flags and also reasonably quick actions like waking processes waiting for

 * FIFO space. Other IRQ actions are deferred to the IRQ thread.

	/**

	 * Then check if the seqno is higher than what we've actually

	 * emitted. Then the fence is stale and signaled.

	/**

	 * Block command submission while waiting for idle.

			/**

			 * FIXME: Use schedule_hr_timeout here for

			 * newer kernels and lower CPU utilization.

/**

 * vmw_irq_install - Install the irq handlers

 *

 * @dev:  Pointer to the drm device.

 * @irq:  The irq number.

 * Return:  Zero if successful. Negative number otherwise.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Context management:

/*

 * GB context.

	/*

	 * Create a fence object and fence the backup buffer.

/*

 * DX context.

/**

 * vmw_dx_context_scrub_cotables - Scrub all bindings and

 * cotables from a context

 *

 * @ctx: Pointer to the context resource

 * @readback: Whether to save the otable contents on scrubbing.

 *

 * COtables must be unbound before their context, but unbinding requires

 * the backup buffer being reserved, whereas scrubbing does not.

 * This function scrubs all cotables of a context, potentially reading back

 * the contents into their backup buffers. However, scrubbing cotables

 * also makes the device context invalid, so scrub all bindings first so

 * that doesn't have to be done later with an invalid context.

 Avoid racing with ongoing cotable destruction. */

	/*

	 * Create a fence object and fence the backup buffer.

/*

 * User-space context management:

/*

 * This function is called when user space has no more references on the

 * base object. It releases the base-object's reference on the resource object.

	/*

	 * From here on, the destructor takes over resource freeing.

/**

 * vmw_context_binding_list - Return a list of context bindings

 *

 * @ctx: The context resource

 *

 * Returns the current list of bindings of the given context. Note that

 * this list becomes stale as soon as the dev_priv::binding_mutex is unlocked.

/**

 * vmw_context_binding_state -

 * Return a pointer to a context binding state structure

 *

 * @ctx: The context resource

 *

 * Returns the current state of bindings of the given context. Note that

 * this state becomes stale as soon as the dev_priv::binding_mutex is unlocked.

/**

 * vmw_context_bind_dx_query -

 * Sets query MOB for the context.  If @mob is NULL, then this function will

 * remove the association between the MOB and the context.  This function

 * assumes the binding_mutex is held.

 *

 * @ctx_res: The context resource

 * @mob: a reference to the query MOB

 *

 * Returns -EINVAL if a MOB has already been set and does not match the one

 * specified in the parameter.  0 otherwise.

 Can only have one MOB per context for queries */

/**

 * vmw_context_get_dx_query_mob - Returns non-counted reference to DX query mob

 *

 * @ctx_res: The context resource

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Display Unit Cursor functions

 No snooper installed */

 TODO handle none page aligned offsets */

 TODO handle more dst & src != 0 */

 TODO handle more then one copy */

 Image is unsigned pointer. */

/**

 * vmw_kms_legacy_hotspot_clear - Clear legacy hotspots

 *

 * @dev_priv: Pointer to the device private struct.

 *

 * Clears all legacy hotspots.

 Planes are static in our case so we don't free it */

/**

 * vmw_du_plane_unpin_surf - unpins resource associated with a framebuffer surface

 *

 * @vps: plane state associated with the display surface

 * @unreference: true if we also want to unreference the display.

/**

 * vmw_du_plane_cleanup_fb - Unpins the cursor

 *

 * @plane:  display plane

 * @old_state: Contains the FB to clean up

 *

 * Unpins the framebuffer surface

 *

 * Returns 0 on success

/**

 * vmw_du_cursor_plane_prepare_fb - Readies the cursor by referencing it

 *

 * @plane:  display plane

 * @new_state: info on the new plane state, including the FB

 *

 * Returns 0 on success

/**

 * vmw_du_primary_plane_atomic_check - check if the new state is okay

 *

 * @plane: display plane

 * @state: info on the new plane state, including the FB

 *

 * Check if the new state is settable given the current state.  Other

 * than what the atomic helper checks, we care about crtc fitting

 * the FB and maintaining one active framebuffer.

 *

 * Returns 0 on success

/**

 * vmw_du_cursor_plane_atomic_check - check if the new state is okay

 *

 * @plane: cursor plane

 * @state: info on the new plane state

 *

 * This is a chance to fail if the new cursor state does not fit

 * our requirements.

 *

 * Returns 0 on success

 Turning off */

 A lot of the code assumes this */

 We always want to have an active plane with an active CRTC */

	/*

	 * Our virtual device does not have a dot clock, so use the logical

	 * clock value as the dot clock.

/**

 * vmw_du_crtc_duplicate_state - duplicate crtc state

 * @crtc: DRM crtc

 *

 * Allocates and returns a copy of the crtc state (both common and

 * vmw-specific) for the specified crtc.

 *

 * Returns: The newly allocated crtc state, or NULL on failure.

/**

 * vmw_du_crtc_reset - creates a blank vmw crtc state

 * @crtc: DRM crtc

 *

 * Resets the atomic state for @crtc by freeing the state pointer (which

 * might be NULL, e.g. at driver load time) and allocating a new empty state

 * object.

/**

 * vmw_du_crtc_destroy_state - destroy crtc state

 * @crtc: DRM crtc

 * @state: state object to destroy

 *

 * Destroys the crtc state (both common and vmw-specific) for the

 * specified plane.

/**

 * vmw_du_plane_duplicate_state - duplicate plane state

 * @plane: drm plane

 *

 * Allocates and returns a copy of the plane state (both common and

 * vmw-specific) for the specified plane.

 *

 * Returns: The newly allocated plane state, or NULL on failure.

 Each ref counted resource needs to be acquired again */

/**

 * vmw_du_plane_reset - creates a blank vmw plane state

 * @plane: drm plane

 *

 * Resets the atomic state for @plane by freeing the state pointer (which might

 * be NULL, e.g. at driver load time) and allocating a new empty state object.

/**

 * vmw_du_plane_destroy_state - destroy plane state

 * @plane: DRM plane

 * @state: state object to destroy

 *

 * Destroys the plane state (both common and vmw-specific) for the

 * specified plane.

 Should have been freed by cleanup_fb */

/**

 * vmw_du_connector_duplicate_state - duplicate connector state

 * @connector: DRM connector

 *

 * Allocates and returns a copy of the connector state (both common and

 * vmw-specific) for the specified connector.

 *

 * Returns: The newly allocated connector state, or NULL on failure.

/**

 * vmw_du_connector_reset - creates a blank vmw connector state

 * @connector: DRM connector

 *

 * Resets the atomic state for @connector by freeing the state pointer (which

 * might be NULL, e.g. at driver load time) and allocating a new empty state

 * object.

/**

 * vmw_du_connector_destroy_state - destroy connector state

 * @connector: DRM connector

 * @state: state object to destroy

 *

 * Destroys the connector state (both common and vmw-specific) for the

 * specified plane.

/*

 * Generic framebuffer code

/*

 * Surface framebuffer code

/**

 * vmw_kms_readback - Perform a readback from the screen system to

 * a buffer-object backed framebuffer.

 *

 * @dev_priv: Pointer to the device private structure.

 * @file_priv: Pointer to a struct drm_file identifying the caller.

 * Must be set to NULL if @user_fence_rep is NULL.

 * @vfb: Pointer to the buffer-object backed framebuffer.

 * @user_fence_rep: User-space provided structure for fence information.

 * Must be set to non-NULL if @file_priv is non-NULL.

 * @vclips: Array of clip rects.

 * @num_clips: Number of clip rects in @vclips.

 *

 * Returns 0 on success, negative error code on failure. -ERESTARTSYS if

 * interrupted.

 3D is only supported on HWv8 and newer hosts */

	/*

	 * Sanity checks.

 Surface must be marked as a scanout. */

	/*

	 * For DX, surface format validation is done when surface->scanout

	 * is set.

/*

 * Buffer-object framebuffer code

/*

 * Pin the bofer in a location suitable for access by the

 * display system.

				/*

				 * Use surface DMA to get content to

				 * sreen target surface.

 Use CPU blit. */

 Use surface / image update */

/**

 * vmw_create_bo_proxy - create a proxy surface for the buffer object

 *

 * @dev: DRM device

 * @mode_cmd: parameters for the new surface

 * @bo_mob: MOB backing the buffer object

 * @srf_out: newly created surface

 *

 * When the content FB is a buffer object, we create a surface as a proxy to the

 * same buffer.  This way we can do a surface copy rather than a surface DMA.

 * This is a more efficient approach

 *

 * RETURNS:

 * 0 on success, error code otherwise

 Reserve and switch the backing mob. */

 Limited framebuffer color depth support for screen objects */

/**

 * vmw_kms_srf_ok - check if a surface can be created

 *

 * @dev_priv: Pointer to device private struct.

 * @width: requested width

 * @height: requested height

 *

 * Surfaces need to be less than texture size

/**

 * vmw_kms_new_framebuffer - Create a new framebuffer.

 *

 * @dev_priv: Pointer to device private struct.

 * @bo: Pointer to buffer object to wrap the kms framebuffer around.

 * Either @bo or @surface must be NULL.

 * @surface: Pointer to a surface to wrap the kms framebuffer around.

 * Either @bo or @surface must be NULL.

 * @only_2d: No presents will occur to this buffer object based framebuffer.

 * This helps the code to do some important optimizations.

 * @mode_cmd: Frame-buffer metadata.

	/*

	 * We cannot use the SurfaceDMA command in an non-accelerated VM,

	 * therefore, wrap the buffer object in a surface so we can use the

	 * SurfaceCopy command.

 Don't create a proxy for cursor */

 Create the new framebuffer depending one what we have */

		/*

		 * vmw_create_bo_proxy() adds a reference that is no longer

		 * needed

/*

 * Generic Kernel modesetting functions

	/*

	 * Take a reference on the user object of the resource

	 * backing the kms fb. This ensures that user-space handle

	 * lookups on that resource will always work as long as

	 * it's registered with a kms framebuffer. This is important,

	 * since vmw_execbuf_process identifies resources in the

	 * command stream using user-space handles.

	/**

	 * End conditioned code.

 returns either a bo or surface */

 vmw_user_lookup_handle takes one ref so does new_fb */

/**

 * vmw_kms_check_display_memory - Validates display memory required for a

 * topology

 * @dev: DRM device

 * @num_rects: number of drm_rect in rects

 * @rects: array of drm_rect representing the topology to validate indexed by

 * crtc index.

 *

 * Returns:

 * 0 on success otherwise negative error code

		/*

		 * For STDU only individual screen (screen target) is limited by

		 * SCREENTARGET_MAX_WIDTH/HEIGHT registers.

 Bounding box upper left is at (0,0). */

 Virtual svga device primary limits are always in 32-bpp. */

	/*

	 * For HV10 and below prim_bb_mem is vram size. When

	 * SVGA_REG_MAX_PRIMARY_BOUNDING_BOX_MEM is not present vram size is

	 * limit on primary bounding box

 SVGA_CAP_NO_BB_RESTRICTION is available for STDU only. */

/**

 * vmw_crtc_state_and_lock - Return new or current crtc state with locked

 * crtc mutex

 * @state: The atomic state pointer containing the new atomic state

 * @crtc: The crtc

 *

 * This function returns the new crtc state if it's part of the state update.

 * Otherwise returns the current crtc state. It also makes sure that the

 * crtc mutex is locked.

 *

 * Returns: A valid crtc state pointer or NULL. It may also return a

 * pointer error, in particular -EDEADLK if locking needs to be rerun.

/**

 * vmw_kms_check_implicit - Verify that all implicit display units scan out

 * from the same fb after the new state is committed.

 * @dev: The drm_device.

 * @state: The new state to be checked.

 *

 * Returns:

 *   Zero on success,

 *   -EINVAL on invalid state,

 *   -EDEADLK if modeset locking needs to be rerun.

		/*

		 * Can't move primary planes across crtcs, so this is OK.

		 * It also means we don't need to take the plane mutex.

/**

 * vmw_kms_check_topology - Validates topology in drm_atomic_state

 * @dev: DRM device

 * @state: the driver state object

 *

 * Returns:

 * 0 on success otherwise negative error code

 Determine change to topology due to new atomic state */

		/*

		 * For vmwgfx each crtc has only one connector attached and it

		 * is not changed so don't really need to check the

		 * crtc->connector_mask and iterate over it.

/**

 * vmw_kms_atomic_check_modeset- validate state object for modeset changes

 *

 * @dev: DRM device

 * @state: the driver state object

 *

 * This is a simple wrapper around drm_atomic_helper_check_modeset() for

 * us to assign a value to mode->crtc_clock so that

 * drm_calc_timestamping_constants() won't throw an error message

 *

 * Returns:

 * Zero for success or -errno

 Fallback */

	/*

	 * Docs says we should take the lock before calling this function

	 * but since it destroys encoders and our destructor calls

	 * drm_encoder_cleanup which takes the lock we deadlock.

/*

 * Function called by DRM code called with vbl_lock held.

/*

 * Function called by DRM code called with vbl_lock held.

/*

 * Function called by DRM code called with vbl_lock held.

/**

 * vmw_du_update_layout - Update the display unit with topology from resolution

 * plugin and generate DRM uevent

 * @dev_priv: device private

 * @num_rects: number of drm_rect in rects

 * @rects: toplogy to update

 Currently gui_x/y is protected with the crtc mutex */

 640x480@60Hz */

 800x600@60Hz */

 1024x768@60Hz */

 1152x864@75Hz */

 1280x720@60Hz */

 1280x768@60Hz */

 1280x800@60Hz */

 1280x960@60Hz */

 1280x1024@60Hz */

 1360x768@60Hz */

 1440x1050@60Hz */

 1440x900@60Hz */

 1600x1200@60Hz */

 1680x1050@60Hz */

 1792x1344@60Hz */

 1853x1392@60Hz */

 1920x1080@60Hz */

 1920x1200@60Hz */

 1920x1440@60Hz */

 2560x1440@60Hz */

 2560x1600@60Hz */

 2880x1800@60Hz */

 3840x2160@60Hz */

 3840x2400@60Hz */

 Terminate */

/**

 * vmw_guess_mode_timing - Provide fake timings for a

 * 60Hz vrefresh mode.

 *

 * @mode: Pointer to a struct drm_display_mode with hdisplay and vdisplay

 * members filled in.

	/*

	 * For STDU extra limit for a mode on SVGA_REG_SCREENTARGET_MAX_WIDTH/

	 * HEIGHT registers.

 Add preferred mode */

 mode might be null here, this is intended */

 Move the prefered mode first, help apps pick the right mode. */

/**

 * vmw_kms_update_layout_ioctl - Handler for DRM_VMW_UPDATE_LAYOUT ioctl

 * @dev: drm device for the ioctl

 * @data: data pointer for the ioctl

 * @file_priv: drm file for the ioctl call

 *

 * Update preferred topology of display unit as per ioctl request. The topology

 * is expressed as array of drm_vmw_rect.

 * e.g.

 * [0 0 640 480] [640 0 800 600] [0 480 640 480]

 *

 * NOTE:

 * The x and y offset (upper left) in drm_vmw_rect cannot be less than 0. Beside

 * device limit on topology, x + w and y + h (lower right) cannot be greater

 * than INT_MAX. So topology beyond these limits will return with error.

 *

 * Returns:

 * Zero on success, negative errno on failure.

 Verify user-space for overflow as kernel use drm_rect */

		/*

		 * Currently this check is limiting the topology within

		 * mode_config->max (which actually is max texture size

		 * supported by virtual device). This limit is here to address

		 * window managers that create a big framebuffer for whole

		 * topology.

/**

 * vmw_kms_helper_dirty - Helper to build commands and perform actions based

 * on a set of cliprects and a set of display units.

 *

 * @dev_priv: Pointer to a device private structure.

 * @framebuffer: Pointer to the framebuffer on which to perform the actions.

 * @clips: A set of struct drm_clip_rect. Either this os @vclips must be NULL.

 * Cliprects are given in framebuffer coordinates.

 * @vclips: A set of struct drm_vmw_rect cliprects. Either this or @clips must

 * be NULL. Cliprects are given in source coordinates.

 * @dest_x: X coordinate offset for the crtc / destination clip rects.

 * @dest_y: Y coordinate offset for the crtc / destination clip rects.

 * @num_clips: Number of cliprects in the @clips or @vclips array.

 * @increment: Integer with which to increment the clip counter when looping.

 * Used to skip a predetermined number of clip rects.

 * @dirty: Closure structure. See the description of struct vmw_kms_dirty.

 If crtc is passed, no need to iterate over other display units */

			/*

			 * Select clip array type. Note that integer type

			 * in @clips is unsigned short, whereas in @vclips

			 * it's 32-bit.

 Skip this clip if it's outside the crtc region */

 Clip right and bottom to crtc limits */

 Clip left and top to crtc limits */

/**

 * vmw_kms_helper_validation_finish - Helper for post KMS command submission

 * cleanup and fencing

 * @dev_priv: Pointer to the device-private struct

 * @file_priv: Pointer identifying the client when user-space fencing is used

 * @ctx: Pointer to the validation context

 * @out_fence: If non-NULL, returned refcounted fence-pointer

 * @user_fence_rep: If non-NULL, pointer to user-space address area

 * in which to copy user-space fence info

/**

 * vmw_kms_update_proxy - Helper function to update a proxy surface from

 * its backing MOB.

 *

 * @res: Pointer to the surface resource

 * @clips: Clip rects in framebuffer (surface) space.

 * @num_clips: Number of clips in @clips.

 * @increment: Integer with which to increment the clip counter when looping.

 * Used to skip a predetermined number of clip rects.

 *

 * This function makes sure the proxy surface is updated from its backing MOB

 * using the region given by @clips. The surface resource @res and its backing

 * MOB needs to be reserved and validated on call.

/**

 * vmw_kms_create_implicit_placement_property - Set up the implicit placement

 * property.

 *

 * @dev_priv: Pointer to a device private struct.

 *

 * Sets up the implicit placement property unless it's already set up.

/**

 * vmw_kms_suspend - Save modesetting state and turn modesetting off.

 *

 * @dev: Pointer to the drm device

 * Return: 0 on success. Negative error code on failure.

/**

 * vmw_kms_resume - Re-enable modesetting and restore state

 *

 * @dev: Pointer to the drm device

 * Return: 0 on success. Negative error code on failure.

 *

 * State is resumed from a previous vmw_kms_suspend(). It's illegal

 * to call this function without a previous vmw_kms_suspend().

/**

 * vmw_kms_lost_device - Notify kms that modesetting capabilities will be lost

 *

 * @dev: Pointer to the drm device

/**

 * vmw_du_helper_plane_update - Helper to do plane update on a display unit.

 * @update: The closure structure.

 *

 * Call this helper after setting callbacks in &vmw_du_update_plane to do plane

 * update on display unit.

 *

 * Return: 0 on success or a negative error code on failure.

	/*

	 * Iterate in advance to check if really need plane update and find the

	 * number of clips that actually are in plane src for fifo allocation.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2014-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * struct vmw_cmdbuf_res - Command buffer managed resource entry.

 *

 * @res: Refcounted pointer to a struct vmw_resource.

 * @hash: Hash entry for the manager hash table.

 * @head: List head used either by the staging list or the manager list

 * of commited resources.

 * @state: Staging state of this resource entry.

 * @man: Pointer to a resource manager for this entry.

/**

 * struct vmw_cmdbuf_res_manager - Command buffer resource manager.

 *

 * @resources: Hash table containing staged and commited command buffer

 * resources

 * @list: List of commited command buffer resources.

 * @dev_priv: Pointer to a device private structure.

 *

 * @resources and @list are protected by the cmdbuf mutex for now.

/**

 * vmw_cmdbuf_res_lookup - Look up a command buffer resource

 *

 * @man: Pointer to the command buffer resource manager

 * @res_type: The resource type, that combined with the user key

 * identifies the resource.

 * @user_key: The user key.

 *

 * Returns a valid refcounted struct vmw_resource pointer on success,

 * an error pointer on failure.

/**

 * vmw_cmdbuf_res_free - Free a command buffer resource.

 *

 * @man: Pointer to the command buffer resource manager

 * @entry: Pointer to a struct vmw_cmdbuf_res.

 *

 * Frees a struct vmw_cmdbuf_res entry and drops its reference to the

 * struct vmw_resource.

/**

 * vmw_cmdbuf_res_commit - Commit a list of command buffer resource actions

 *

 * @list: Caller's list of command buffer resource actions.

 *

 * This function commits a list of command buffer resource

 * additions or removals.

 * It is typically called when the execbuf ioctl call triggering these

 * actions has commited the fifo contents to the device.

/**

 * vmw_cmdbuf_res_revert - Revert a list of command buffer resource actions

 *

 * @list: Caller's list of command buffer resource action

 *

 * This function reverts a list of command buffer resource

 * additions or removals.

 * It is typically called when the execbuf ioctl call triggering these

 * actions failed for some reason, and the command stream was never

 * submitted.

/**

 * vmw_cmdbuf_res_add - Stage a command buffer managed resource for addition.

 *

 * @man: Pointer to the command buffer resource manager.

 * @res_type: The resource type.

 * @user_key: The user-space id of the resource.

 * @res: Valid (refcount != 0) pointer to a struct vmw_resource.

 * @list: The staging list.

 *

 * This function allocates a struct vmw_cmdbuf_res entry and adds the

 * resource to the hash table of the manager identified by @man. The

 * entry is then put on the staging list identified by @list.

/**

 * vmw_cmdbuf_res_remove - Stage a command buffer managed resource for removal.

 *

 * @man: Pointer to the command buffer resource manager.

 * @res_type: The resource type.

 * @user_key: The user-space id of the resource.

 * @list: The staging list.

 * @res_p: If the resource is in an already committed state, points to the

 * struct vmw_resource on successful return. The pointer will be

 * non ref-counted.

 *

 * This function looks up the struct vmw_cmdbuf_res entry from the manager

 * hash table and, if it exists, removes it. Depending on its current staging

 * state it then either removes the entry from the staging list or adds it

 * to it with a staging state of removal.

/**

 * vmw_cmdbuf_res_man_create - Allocate a command buffer managed resource

 * manager.

 *

 * @dev_priv: Pointer to a struct vmw_private

 *

 * Allocates and initializes a command buffer managed resource manager. Returns

 * an error pointer on failure.

/**

 * vmw_cmdbuf_res_man_destroy - Destroy a command buffer managed resource

 * manager.

 *

 * @man: Pointer to the  manager to destroy.

 *

 * This function destroys a command buffer managed resource manager and

 * unreferences / frees all command buffer managed resources and -entries

 * associated with it.

/**

 * vmw_cmdbuf_res_man_size - Return the size of a command buffer managed

 * resource manager

 *

 * Returns the approximate allocation size of a command buffer managed

 * resource manager.

/**************************************************************************

 *

 * Copyright Â© 2007 David Airlie

 * Copyright Â© 2009-2015 VMware, Inc., Palo Alto, CA., USA

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * vmw_fb_dirty_flush - flush dirty regions to the kms framebuffer

 *

 * @work: The struct work_struct associated with this task.

 *

 * This function flushes the dirty regions of the vmalloc framebuffer to the

 * kms framebuffer, and if the kms framebuffer is visible, also updated the

 * corresponding displays. Note that this function runs even if the kms

 * framebuffer is not bound to a crtc and thus not visible, but it's turned

 * off during hibernation using the par->dirty.active bool.

	/*

	 * Handle panning when copying from vmalloc to framebuffer.

	 * Clip dirty area to framebuffer.

		/* if we are active start the dirty work

		/*

		 * Since we've already waited on this work once, try to

		 * execute asap.

/*

 * Draw code

/*

 * Bring up code

 init frees the buffer on failure */

 Detach the KMS framebuffer from crtcs */

 Need new buffer object ? */

	/* If there already was stuff dirty we wont

 XXX As shouldn't these be as well. */

	/*

	 * Par

	/*

	 * Create buffers and alloc memory

	/*

	 * Fixed and var

 doing it in hw */

 doing it in hw */

 24 depth per default */

 Use default scratch pixmap (info->pixmap.flags = FB_PIXMAP_SYSTEM) */

	/*

	 * Dirty & Deferred IO

 ??? order */

	/*

	 * Need to reschedule a dirty update, because otherwise that's

	 * only done in dirty_mark() if the previous coalesced

	 * dirty region was empty.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2016 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Fully encoded drm commands. Might move to vmw_drm.h

/*

 * Ioctl definitions.

 these allow direct access to the framebuffers mark as master only */

	/*

	 * The permissions of the below ioctl are overridden in

	 * vmw_generic_ioctl(). We require either

	 * DRM_MASTER or capable(CAP_SYS_ADMIN).

/**

 * vmw_dummy_query_bo_create - create a bo to hold a dummy query result

 *

 * @dev_priv: A device private structure.

 *

 * This function creates a small buffer object that holds the query

 * result for dummy queries emitted as query barriers.

 * The function will then map the first page and initialize a pending

 * occlusion query result structure, Finally it will unmap the buffer.

 * No interruptible waits are done within this function.

 *

 * Returns an error if bo creation or initialization fails.

	/*

	 * Create the vbo as pinned, so that a tryreserve will

	 * immediately succeed. This is because we're the only

	 * user of the bo currently.

	/*

	 * Legacy sync

/**

 * vmw_request_device_late - Perform late device setup

 *

 * @dev_priv: Pointer to device private.

 *

 * This function performs setup of otables and enables large command

 * buffer submission. These tasks are split out to a separate function

 * because it reverts vmw_release_device_early and is intended to be used

 * by an error path in the hibernation code.

/**

 * vmw_release_device_early - Early part of fifo takedown.

 *

 * @dev_priv: Pointer to device private struct.

 *

 * This is the first part of command submission takedown, to be called before

 * buffer management is taken down.

	/*

	 * Previous destructions should've released

	 * the pinned bo.

/**

 * vmw_release_device_late - Late part of fifo takedown.

 *

 * @dev_priv: Pointer to device private struct.

 *

 * This is the last part of the command submission takedown, to be called when

 * command submission is no longer needed. It may wait on pending fences.

/*

 * Sets the initial_[width|height] fields on the given vmw_private.

 *

 * It does so by reading SVGA_REG_[WIDTH|HEIGHT] regs and then

 * clamping the value to fb_max_[width|height] fields and the

 * VMW_MIN_INITIAL_[WIDTH|HEIGHT].

 * If the values appear to be invalid, set them to

 * VMW_MIN_INITIAL_[WIDTH|HEIGHT].

		/*

		 * This is a host error and shouldn't occur.

/**

 * vmw_dma_select_mode - Determine how DMA mappings should be set up for this

 * system.

 *

 * @dev_priv: Pointer to a struct vmw_private

 *

 * This functions tries to determine what actions need to be taken by the

 * driver to make system pages visible to the device.

 * If this function decides that DMA is not possible, it returns -EINVAL.

 * The driver may then try to disable features of the device that require

 * DMA.

 TTM currently doesn't fully support SEV encryption. */

/**

 * vmw_dma_masks - set required page- and dma masks

 *

 * @dev_priv: Pointer to struct drm-device

 *

 * With 32-bit we can only handle 32 bit PFNs. Optionally set that

 * restriction also for 64-bit systems.

	/*

	 * This is approximate size of the vram, the exact size will only

	 * be known after we read SVGA_REG_VRAM_SIZE. The PCI resource

	 * size will be equal to or bigger than the size reported by

	 * SVGA_REG_VRAM_SIZE.

		/*

		 * An arbitrary limit of 512MiB on surface

		 * memory. But all HWV8 hardware supports GMR2.

		/*

		 * Workaround for low memory 2D VMs to compensate for the

		 * allocation taken by fbdev

 Need mmio memory to check for fifo pitchlock cap. */

	/*

	 * Enable VRAM, but initially don't use it until SVGA is enabled and

	 * unhidden.

	/*

	 * "Guest Memory Regions" is an aperture like feature with

	 *  one slot per bo. There is an upper limit of the number of

	 *  slots as well as the bo size.

 TODO: This is most likely not correct */

 SVGA_CAP2_DX2 (DefineGBSurface_v3) is needed for SM4_1 support */

	/*

	 * Do extra checking on driver private ioctls.

	/*

	 * Inform a new master that the layout may have changed while

	 * it was gone.

/**

 * __vmw_svga_enable - Enable SVGA mode, FIFO and use of VRAM.

 *

 * @dev_priv: Pointer to device private struct.

 * Needs the reservation sem to be held in non-exclusive mode.

/**

 * vmw_svga_enable - Enable SVGA mode, FIFO and use of VRAM.

 *

 * @dev_priv: Pointer to device private struct.

/**

 * __vmw_svga_disable - Disable SVGA mode and use of VRAM.

 *

 * @dev_priv: Pointer to device private struct.

 * Needs the reservation sem to be held in exclusive mode.

 * Will not empty VRAM. VRAM must be emptied by caller.

/**

 * vmw_svga_disable - Disable SVGA_MODE, and use of VRAM. Keep the fifo

 * running.

 *

 * @dev_priv: Pointer to device private struct.

 * Will empty VRAM.

	/*

	 * Disabling SVGA will turn off device modesetting capabilities, so

	 * notify KMS about that so that it doesn't cache atomic state that

	 * isn't valid anymore, for example crtcs turned on.

	 * Strictly we'd want to do this under the SVGA lock (or an SVGA mutex),

	 * but vmw_kms_lost_device() takes the reservation sem and thus we'll

	 * end up with lock order reversal. Thus, a master may actually perform

	 * a new modeset just after we call vmw_kms_lost_device() and race with

	 * vmw_svga_disable(), but that should at worst cause atomic KMS state

	 * to be inconsistent with the device, causing modesetting problems.

	 *

		/*

		 * Take the reservation sem in write mode, which will make sure

		 * there are no other processes holding a buffer object

		 * reservation, meaning we should be able to evict all buffer

		 * objects if needed.

		 * Once user-space processes have been frozen, we can release

		 * the lock again.

	/*

	 * No user-space processes should be running now.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * __vmw_piter_non_sg_next: Helper functions to advance

 * a struct vmw_piter iterator.

 *

 * @viter: Pointer to the iterator.

 *

 * These functions return false if past the end of the list,

 * true otherwise. Functions are selected depending on the current

 * DMA mapping mode.

/**

 * vmw_piter_start - Initialize a struct vmw_piter.

 *

 * @viter: Pointer to the iterator to initialize

 * @vsgt: Pointer to a struct vmw_sg_table to initialize from

 * @p_offset: Pointer offset used to update current array position

 *

 * Note that we're following the convention of __sg_page_iter_start, so that

 * the iterator doesn't point to a valid page after initialization; it has

 * to be advanced one step first.

/**

 * vmw_ttm_unmap_from_dma - unmap  device addresses previsouly mapped for

 * TTM pages

 *

 * @vmw_tt: Pointer to a struct vmw_ttm_backend

 *

 * Used to free dma mappings previously mapped by vmw_ttm_map_for_dma.

/**

 * vmw_ttm_map_for_dma - map TTM pages to get device addresses

 *

 * @vmw_tt: Pointer to a struct vmw_ttm_backend

 *

 * This function is used to get device addresses from the kernel DMA layer.

 * However, it's violating the DMA API in that when this operation has been

 * performed, it's illegal for the CPU to write to the pages without first

 * unmapping the DMA mappings, or calling dma_sync_sg_for_cpu(). It is

 * therefore only legal to call this function if we know that the function

 * dma_sync_sg_for_cpu() is a NOP, and dma_sync_sg_for_device() is at most

 * a CPU write buffer flush.

/**

 * vmw_ttm_map_dma - Make sure TTM pages are visible to the device

 *

 * @vmw_tt: Pointer to a struct vmw_ttm_tt

 *

 * Select the correct function for and make sure the TTM pages are

 * visible to the device. Allocate storage for the device mappings.

 * If a mapping has already been performed, indicated by the storage

 * pointer being non NULL, the function returns success.

/**

 * vmw_ttm_unmap_dma - Tear down any TTM page device mappings

 *

 * @vmw_tt: Pointer to a struct vmw_ttm_tt

 *

 * Tear down any previously set up device DMA mappings and free

 * any storage space allocated for them. If there are no mappings set up,

 * this function is a NOP.

/**

 * vmw_bo_sg_table - Return a struct vmw_sg_table object for a

 * TTM buffer object

 *

 * @bo: Pointer to a struct ttm_buffer_object

 *

 * Returns a pointer to a struct vmw_sg_table object. The object should

 * not be freed after use.

 * Note that for the device addresses to be valid, the buffer object must

 * either be reserved or pinned.

 TODO: maybe completely drop this ? */

/**

 * vmw_move_notify - TTM move_notify_callback

 *

 * @bo: The TTM buffer object about to move.

 * @old_mem: The old memory where we move from

 * @new_mem: The struct ttm_resource indicating to what memory

 *       region the move is taking place.

 *

 * Calls move_notify for all subsystems needing it.

 * (currently only resources).

/**

 * vmw_swap_notify - TTM move_notify_callback

 *

 * @bo: The TTM buffer object about to be swapped out.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Size of inline command buffers. Try to make sure that a page size is a

 * multiple of the DMA pool allocation size.

/**

 * struct vmw_cmdbuf_context - Command buffer context queues

 *

 * @submitted: List of command buffers that have been submitted to the

 * manager but not yet submitted to hardware.

 * @hw_submitted: List of command buffers submitted to hardware.

 * @preempted: List of preempted command buffers.

 * @num_hw_submitted: Number of buffers currently being processed by hardware

 * @block_submission: Identifies a block command submission.

/**

 * struct vmw_cmdbuf_man - Command buffer manager

 *

 * @cur_mutex: Mutex protecting the command buffer used for incremental small

 * kernel command submissions, @cur.

 * @space_mutex: Mutex to protect against starvation when we allocate

 * main pool buffer space.

 * @error_mutex: Mutex to serialize the work queue error handling.

 * Note this is not needed if the same workqueue handler

 * can't race with itself...

 * @work: A struct work_struct implementeing command buffer error handling.

 * Immutable.

 * @dev_priv: Pointer to the device private struct. Immutable.

 * @ctx: Array of command buffer context queues. The queues and the context

 * data is protected by @lock.

 * @error: List of command buffers that have caused device errors.

 * Protected by @lock.

 * @mm: Range manager for the command buffer space. Manager allocations and

 * frees are protected by @lock.

 * @cmd_space: Buffer object for the command buffer space, unless we were

 * able to make a contigous coherent DMA memory allocation, @handle. Immutable.

 * @map_obj: Mapping state for @cmd_space. Immutable.

 * @map: Pointer to command buffer space. May be a mapped buffer object or

 * a contigous coherent DMA memory allocation. Immutable.

 * @cur: Command buffer for small kernel command submissions. Protected by

 * the @cur_mutex.

 * @cur_pos: Space already used in @cur. Protected by @cur_mutex.

 * @default_size: Default size for the @cur command buffer. Immutable.

 * @max_hw_submitted: Max number of in-flight command buffers the device can

 * handle. Immutable.

 * @lock: Spinlock protecting command submission queues.

 * @headers: Pool of DMA memory for device command buffer headers.

 * Internal protection.

 * @dheaders: Pool of DMA memory for device command buffer headers with trailing

 * space for inline data. Internal protection.

 * @alloc_queue: Wait queue for processes waiting to allocate command buffer

 * space.

 * @idle_queue: Wait queue for processes waiting for command buffer idle.

 * @irq_on: Whether the process function has requested irq to be turned on.

 * Protected by @lock.

 * @using_mob: Whether the command buffer space is a MOB or a contigous DMA

 * allocation. Immutable.

 * @has_pool: Has a large pool of DMA memory which allows larger allocations.

 * Typically this is false only during bootstrap.

 * @handle: DMA address handle for the command buffer space if @using_mob is

 * false. Immutable.

 * @size: The size of the command buffer space. Immutable.

 * @num_contexts: Number of contexts actually enabled.

/**

 * struct vmw_cmdbuf_header - Command buffer metadata

 *

 * @man: The command buffer manager.

 * @cb_header: Device command buffer header, allocated from a DMA pool.

 * @cb_context: The device command buffer context.

 * @list: List head for attaching to the manager lists.

 * @node: The range manager node.

 * @handle: The DMA address of @cb_header. Handed to the device on command

 * buffer submission.

 * @cmd: Pointer to the command buffer space of this buffer.

 * @size: Size of the command buffer space of this buffer.

 * @reserved: Reserved space of this buffer.

 * @inline_space: Whether inline command buffer space is used.

/**

 * struct vmw_cmdbuf_dheader - Device command buffer header with inline

 * command buffer space.

 *

 * @cb_header: Device command buffer header.

 * @cmd: Inline command buffer space.

/**

 * struct vmw_cmdbuf_alloc_info - Command buffer space allocation metadata

 *

 * @page_size: Size of requested command buffer space in pages.

 * @node: Pointer to the range manager node.

 * @done: True if this allocation has succeeded.

 Loop over each context in the command buffer manager. */

/**

 * vmw_cmdbuf_cur_lock - Helper to lock the cur_mutex.

 *

 * @man: The range manager.

 * @interruptible: Whether to wait interruptible when locking.

/**

 * vmw_cmdbuf_cur_unlock - Helper to unlock the cur_mutex.

 *

 * @man: The range manager.

/**

 * vmw_cmdbuf_header_inline_free - Free a struct vmw_cmdbuf_header that has

 * been used for the device context with inline command buffers.

 * Need not be called locked.

 *

 * @header: Pointer to the header to free.

/**

 * __vmw_cmdbuf_header_free - Free a struct vmw_cmdbuf_header  and its

 * associated structures.

 *

 * @header: Pointer to the header to free.

 *

 * For internal use. Must be called with man::lock held.

/**

 * vmw_cmdbuf_header_free - Free a struct vmw_cmdbuf_header  and its

 * associated structures.

 *

 * @header: Pointer to the header to free.

 Avoid locking if inline_space */

/**

 * vmw_cmdbuf_header_submit: Submit a command buffer to hardware.

 *

 * @header: The header of the buffer to submit.

/**

 * vmw_cmdbuf_ctx_init: Initialize a command buffer context.

 *

 * @ctx: The command buffer context to initialize

/**

 * vmw_cmdbuf_ctx_submit: Submit command buffers from a command buffer

 * context.

 *

 * @man: The command buffer manager.

 * @ctx: The command buffer context.

 *

 * Submits command buffers to hardware until there are no more command

 * buffers to submit or the hardware can't handle more command buffers.

 This should never happen */

/**

 * vmw_cmdbuf_ctx_process - Process a command buffer context.

 *

 * @man: The command buffer manager.

 * @ctx: The command buffer context.

 * @notempty: Pass back count of non-empty command submitted lists.

 *

 * Submit command buffers to hardware if possible, and process finished

 * buffers. Typically freeing them, but on preemption or error take

 * appropriate action. Wake up waiters if appropriate.

/**

 * vmw_cmdbuf_man_process - Process all command buffer contexts and

 * switch on and off irqs as appropriate.

 *

 * @man: The command buffer manager.

 *

 * Calls vmw_cmdbuf_ctx_process() on all contexts. If any context has

 * command buffers left that are not submitted to hardware, Make sure

 * IRQ handling is turned on. Otherwise, make sure it's turned off.

 Rerun in case we just missed an irq. */

/**

 * vmw_cmdbuf_ctx_add - Schedule a command buffer for submission on a

 * command buffer context

 *

 * @man: The command buffer manager.

 * @header: The header of the buffer to submit.

 * @cb_context: The command buffer context to use.

 *

 * This function adds @header to the "submitted" queue of the command

 * buffer context identified by @cb_context. It then calls the command buffer

 * manager processing to potentially submit the buffer to hardware.

 * @man->lock needs to be held when calling this function.

/**

 * vmw_cmdbuf_irqthread - The main part of the command buffer interrupt

 * handler implemented as a threaded irq task.

 *

 * @man: Pointer to the command buffer manager.

 *

 * The bottom half of the interrupt handler simply calls into the

 * command buffer processor to free finished buffers and submit any

 * queued buffers to hardware.

/**

 * vmw_cmdbuf_work_func - The deferred work function that handles

 * command buffer errors.

 *

 * @work: The work func closure argument.

 *

 * Restarting the command buffer context after an error requires process

 * context, so it is deferred to this work function.

 Preempt all contexts */

 Move preempted command buffers to the preempted queue. */

		/*

		 * Add the preempted queue after the command buffer

		 * that caused an error.

		/*

		 * Finally add all command buffers first in the submitted

		 * queue, to rerun them.

 Send a new fence in case one was removed */

/**

 * vmw_cmdbuf_man_idle - Check whether the command buffer manager is idle.

 *

 * @man: The command buffer manager.

 * @check_preempted: Check also the preempted queue for pending command buffers.

 *

/**

 * __vmw_cmdbuf_cur_flush - Flush the current command buffer for small kernel

 * command submissions

 *

 * @man: The command buffer manager.

 *

 * Flushes the current command buffer without allocating a new one. A new one

 * is automatically allocated when needed. Call with @man->cur_mutex held.

/**

 * vmw_cmdbuf_cur_flush - Flush the current command buffer for small kernel

 * command submissions

 *

 * @man: The command buffer manager.

 * @interruptible: Whether to sleep interruptible when sleeping.

 *

 * Flushes the current command buffer without allocating a new one. A new one

 * is automatically allocated when needed.

/**

 * vmw_cmdbuf_idle - Wait for command buffer manager idle.

 *

 * @man: The command buffer manager.

 * @interruptible: Sleep interruptible while waiting.

 * @timeout: Time out after this many ticks.

 *

 * Wait until the command buffer manager has processed all command buffers,

 * or until a timeout occurs. If a timeout occurs, the function will return

 * -EBUSY.

/**

 * vmw_cmdbuf_try_alloc - Try to allocate buffer space from the main pool.

 *

 * @man: The command buffer manager.

 * @info: Allocation info. Will hold the size on entry and allocated mm node

 * on successful return.

 *

 * Try to allocate buffer space from the main pool. Returns true if succeeded.

 * If a fatal error was hit, the error code is returned in @info->ret.

/**

 * vmw_cmdbuf_alloc_space - Allocate buffer space from the main pool.

 *

 * @man: The command buffer manager.

 * @node: Pointer to pre-allocated range-manager node.

 * @size: The size of the allocation.

 * @interruptible: Whether to sleep interruptible while waiting for space.

 *

 * This function allocates buffer space from the main pool, and if there is

 * no space available ATM, it turns on IRQ handling and sleeps waiting for it to

 * become available.

	/*

	 * To prevent starvation of large requests, only one allocating call

	 * at a time waiting for space.

 Try to allocate space without waiting. */

/**

 * vmw_cmdbuf_space_pool - Set up a command buffer header with command buffer

 * space from the main pool.

 *

 * @man: The command buffer manager.

 * @header: Pointer to the header to set up.

 * @size: The requested size of the buffer space.

 * @interruptible: Whether to sleep interruptible while waiting for space.

/**

 * vmw_cmdbuf_space_inline - Set up a command buffer header with

 * inline command buffer space.

 *

 * @man: The command buffer manager.

 * @header: Pointer to the header to set up.

 * @size: The requested size of the buffer space.

/**

 * vmw_cmdbuf_alloc - Allocate a command buffer header complete with

 * command buffer space.

 *

 * @man: The command buffer manager.

 * @size: The requested size of the buffer space.

 * @interruptible: Whether to sleep interruptible while waiting for space.

 * @p_header: points to a header pointer to populate on successful return.

 *

 * Returns a pointer to command buffer space if successful. Otherwise

 * returns an error pointer. The header pointer returned in @p_header should

 * be used for upcoming calls to vmw_cmdbuf_reserve() and vmw_cmdbuf_commit().

/**

 * vmw_cmdbuf_reserve_cur - Reserve space for commands in the current

 * command buffer.

 *

 * @man: The command buffer manager.

 * @size: The requested size of the commands.

 * @ctx_id: The context id if any. Otherwise set to SVGA3D_REG_INVALID.

 * @interruptible: Whether to sleep interruptible while waiting for space.

 *

 * Returns a pointer to command buffer space if successful. Otherwise

 * returns an error pointer.

/**

 * vmw_cmdbuf_commit_cur - Commit commands in the current command buffer.

 *

 * @man: The command buffer manager.

 * @size: The size of the commands actually written.

 * @flush: Whether to flush the command buffer immediately.

/**

 * vmw_cmdbuf_reserve - Reserve space for commands in a command buffer.

 *

 * @man: The command buffer manager.

 * @size: The requested size of the commands.

 * @ctx_id: The context id if any. Otherwise set to SVGA3D_REG_INVALID.

 * @interruptible: Whether to sleep interruptible while waiting for space.

 * @header: Header of the command buffer. NULL if the current command buffer

 * should be used.

 *

 * Returns a pointer to command buffer space if successful. Otherwise

 * returns an error pointer.

/**

 * vmw_cmdbuf_commit - Commit commands in a command buffer.

 *

 * @man: The command buffer manager.

 * @size: The size of the commands actually written.

 * @header: Header of the command buffer. NULL if the current command buffer

 * should be used.

 * @flush: Whether to flush the command buffer immediately.

/**

 * vmw_cmdbuf_send_device_command - Send a command through the device context.

 *

 * @man: The command buffer manager.

 * @command: Pointer to the command to send.

 * @size: Size of the command.

 *

 * Synchronously sends a device context command.

/**

 * vmw_cmdbuf_preempt - Send a preempt command through the device

 * context.

 *

 * @man: The command buffer manager.

 * @context: Device context to pass command through.

 *

 * Synchronously sends a preempt command.

/**

 * vmw_cmdbuf_startstop - Send a start / stop command through the device

 * context.

 *

 * @man: The command buffer manager.

 * @context: Device context to start/stop.

 * @enable: Whether to enable or disable the context.

 *

 * Synchronously sends a device start / stop context command.

/**

 * vmw_cmdbuf_set_pool_size - Set command buffer manager sizes

 *

 * @man: The command buffer manager.

 * @size: The size of the main space pool.

 *

 * Set the size and allocate the main command buffer space pool.

 * If successful, this enables large command submissions.

 * Note that this function requires that rudimentary command

 * submission is already available and that the MOB memory manager is alive.

 * Returns 0 on success. Negative error code on failure.

 First, try to allocate a huge chunk of DMA memory */

		/*

		 * DMA memory failed. If we can have command buffers in a

		 * MOB, try to use that instead. Note that this will

		 * actually call into the already enabled manager, when

		 * binding the MOB.

	/*

	 * For now, set the default size to VMW_CMDBUF_INLINE_SIZE to

	 * prevent deadlocks from happening when vmw_cmdbuf_space_pool()

	 * needs to wait for space and we block on further command

	 * submissions to be able to free up space.

/**

 * vmw_cmdbuf_man_create: Create a command buffer manager and enable it for

 * inline command buffer submissions only.

 *

 * @dev_priv: Pointer to device private structure.

 *

 * Returns a pointer to a cummand buffer manager to success or error pointer

 * on failure. The command buffer manager will be enabled for submissions of

 * size VMW_CMDBUF_INLINE_SIZE only.

/**

 * vmw_cmdbuf_remove_pool - Take down the main buffer space pool.

 *

 * @man: Pointer to a command buffer manager.

 *

 * This function removes the main buffer space pool, and should be called

 * before MOB memory management is removed. When this function has been called,

 * only small command buffer submissions of size VMW_CMDBUF_INLINE_SIZE or

 * less are allowed, and the default size of the command buffer for small kernel

 * submissions is also set to this size.

/**

 * vmw_cmdbuf_man_destroy - Take down a command buffer manager.

 *

 * @man: Pointer to a command buffer manager.

 *

 * This function idles and then destroys a command buffer manager.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * struct vmw_user_surface - User-space visible surface resource

 *

 * @prime:          The TTM prime object.

 * @base:           The TTM base object handling user-space visibility.

 * @srf:            The surface metadata.

 * @size:           TTM accounting size for the surface.

 * @master:         Master of the creating client. Used for security check.

 * @backup_base:    The TTM base object of the backup buffer.

/**

 * struct vmw_surface_offset - Backing store mip level offset info

 *

 * @face:           Surface face.

 * @mip:            Mip level.

 * @bo_offset:      Offset into backing store of this mip level.

 *

/**

 * struct vmw_surface_dirty - Surface dirty-tracker

 * @cache: Cached layout information of the surface.

 * @size: Accounting size for the struct vmw_surface_dirty.

 * @num_subres: Number of subresources.

 * @boxes: Array of SVGA3dBoxes indicating dirty regions. One per subresource.

/*

 * struct vmw_surface_dma - SVGA3D DMA command

/*

 * struct vmw_surface_define - SVGA3D Surface Define command

/*

 * struct vmw_surface_destroy - SVGA3D Surface Destroy command

/**

 * vmw_surface_dma_size - Compute fifo size for a dma command.

 *

 * @srf: Pointer to a struct vmw_surface

 *

 * Computes the required size for a surface dma command for backup or

 * restoration of the surface represented by @srf.

/**

 * vmw_surface_define_size - Compute fifo size for a surface define command.

 *

 * @srf: Pointer to a struct vmw_surface

 *

 * Computes the required size for a surface define command for the definition

 * of the surface represented by @srf.

/**

 * vmw_surface_destroy_size - Compute fifo size for a surface destroy command.

 *

 * Computes the required size for a surface destroy command for the destruction

 * of a hw surface.

/**

 * vmw_surface_destroy_encode - Encode a surface_destroy command.

 *

 * @id: The surface id

 * @cmd_space: Pointer to memory area in which the commands should be encoded.

/**

 * vmw_surface_define_encode - Encode a surface_define command.

 *

 * @srf: Pointer to a struct vmw_surface object.

 * @cmd_space: Pointer to memory area in which the commands should be encoded.

	/*

	 * Downcast of surfaceFlags, was upcasted when received from user-space,

	 * since driver internally stores as 64 bit.

	 * For legacy surface define only 32 bit flag is supported.

/**

 * vmw_surface_dma_encode - Encode a surface_dma command.

 *

 * @srf: Pointer to a struct vmw_surface object.

 * @cmd_space: Pointer to memory area in which the commands should be encoded.

 * @ptr: Pointer to an SVGAGuestPtr indicating where the surface contents

 * should be placed or read from.

 * @to_surface: Boolean whether to DMA to the surface or from the surface.

/**

 * vmw_hw_surface_destroy - destroy a Device surface

 *

 * @res:        Pointer to a struct vmw_resource embedded in a struct

 *              vmw_surface.

 *

 * Destroys a the device surface associated with a struct vmw_surface if

 * any, and adjusts accounting and resource count accordingly.

		/*

		 * used_memory_size_atomic, or separate lock

		 * to avoid taking dev_priv::cmdbuf_mutex in

		 * the destroy path.

/**

 * vmw_legacy_srf_create - Create a device surface as part of the

 * resource validation process.

 *

 * @res: Pointer to a struct vmw_surface.

 *

 * If the surface doesn't have a hw id.

 *

 * Returns -EBUSY if there wasn't sufficient device resources to

 * complete the validation. Retry after freeing up resources.

 *

 * May return other errors if the kernel is out of guest resources.

	/*

	 * Alloc id for the resource.

	/*

	 * Encode surface define- commands.

	/*

	 * Surface memory usage accounting.

/**

 * vmw_legacy_srf_dma - Copy backup data to or from a legacy surface.

 *

 * @res:            Pointer to a struct vmw_res embedded in a struct

 *                  vmw_surface.

 * @val_buf:        Pointer to a struct ttm_validate_buffer containing

 *                  information about the backup buffer.

 * @bind:           Boolean wether to DMA to the surface.

 *

 * Transfer backup data to or from a legacy surface as part of the

 * validation process.

 * May return other errors if the kernel is out of guest resources.

 * The backup buffer will be fenced or idle upon successful completion,

 * and if the surface needs persistent backup storage, the backup buffer

 * will also be returned reserved iff @bind is true.

	/*

	 * Create a fence object and fence the backup buffer.

/**

 * vmw_legacy_srf_bind - Perform a legacy surface bind as part of the

 *                       surface validation process.

 *

 * @res:            Pointer to a struct vmw_res embedded in a struct

 *                  vmw_surface.

 * @val_buf:        Pointer to a struct ttm_validate_buffer containing

 *                  information about the backup buffer.

 *

 * This function will copy backup data to the surface if the

 * backup buffer is dirty.

/**

 * vmw_legacy_srf_unbind - Perform a legacy surface unbind as part of the

 *                         surface eviction process.

 *

 * @res:            Pointer to a struct vmw_res embedded in a struct

 *                  vmw_surface.

 * @readback:       Readback - only true if dirty

 * @val_buf:        Pointer to a struct ttm_validate_buffer containing

 *                  information about the backup buffer.

 *

 * This function will copy backup data from the surface.

/**

 * vmw_legacy_srf_destroy - Destroy a device surface as part of a

 *                          resource eviction process.

 *

 * @res:            Pointer to a struct vmw_res embedded in a struct

 *                  vmw_surface.

	/*

	 * Encode the dma- and surface destroy commands.

	/*

	 * Surface memory usage accounting.

	/*

	 * Release the surface ID.

/**

 * vmw_surface_init - initialize a struct vmw_surface

 *

 * @dev_priv:       Pointer to a device private struct.

 * @srf:            Pointer to the struct vmw_surface to initialize.

 * @res_free:       Pointer to a resource destructor used to free

 *                  the object.

	/*

	 * The surface won't be visible to hardware until a

	 * surface validate.

/**

 * vmw_user_surface_base_to_res - TTM base object to resource converter for

 *                                user visible surfaces

 *

 * @base:           Pointer to a TTM base object

 *

 * Returns the struct vmw_resource embedded in a struct vmw_surface

 * for the user-visible object identified by the TTM base object @base.

/**

 * vmw_user_surface_free - User visible surface resource destructor

 *

 * @res:            A struct vmw_resource embedded in a struct vmw_surface.

/**

 * vmw_user_surface_base_release - User visible surface TTM base object destructor

 *

 * @p_base:         Pointer to a pointer to a TTM base object

 *                  embedded in a struct vmw_user_surface.

 *

 * Drops the base object's reference on its resource, and the

 * pointer pointed to by *p_base is set to NULL.

/**

 * vmw_surface_destroy_ioctl - Ioctl function implementing

 *                                  the user surface destroy functionality.

 *

 * @dev:            Pointer to a struct drm_device.

 * @data:           Pointer to data copied from / to user-space.

 * @file_priv:      Pointer to a drm file private structure.

/**

 * vmw_surface_define_ioctl - Ioctl function implementing

 *                                  the user surface define functionality.

 *

 * @dev:            Pointer to a struct drm_device.

 * @data:           Pointer to data copied from / to user-space.

 * @file_priv:      Pointer to a drm file private structure.

 Driver internally stores as 64-bit flags */

	/**

	 * From this point, the generic resource management functions

	 * destroy the object on failure.

	/*

	 * A gb-aware client referencing a shared surface will

	 * expect a backup buffer to be present.

 Error out if we are unauthenticated primary */

		/*

		 * Make sure the surface creator has the same

		 * authenticating master, or is already registered with us.

/**

 * vmw_surface_reference_ioctl - Ioctl function implementing

 *                                  the user surface reference functionality.

 *

 * @dev:            Pointer to a struct drm_device.

 * @data:           Pointer to data copied from / to user-space.

 * @file_priv:      Pointer to a drm file private structure.

 Downcast of flags when sending back to user space */

/**

 * vmw_gb_surface_create - Encode a surface_define command.

 *

 * @res:        Pointer to a struct vmw_resource embedded in a struct

 *              vmw_surface.

 VMW_SM_4 support verified at creation time. */

 We've just made a full upload. Cear dirty regions. */

	/*

	 * Create a fence object and fence the backup buffer.

/**

 * vmw_gb_surface_define_ioctl - Ioctl function implementing

 * the user surface define functionality.

 *

 * @dev: Pointer to a struct drm_device.

 * @data: Pointer to data copied from / to user-space.

 * @file_priv: Pointer to a drm file private structure.

/**

 * vmw_gb_surface_reference_ioctl - Ioctl function implementing

 * the user surface reference functionality.

 *

 * @dev: Pointer to a struct drm_device.

 * @data: Pointer to data copied from / to user-space.

 * @file_priv: Pointer to a drm file private structure.

/**

 * vmw_gb_surface_define_ext_ioctl - Ioctl function implementing

 * the user surface define functionality.

 *

 * @dev: Pointer to a struct drm_device.

 * @data: Pointer to data copied from / to user-space.

 * @file_priv: Pointer to a drm file private structure.

/**

 * vmw_gb_surface_reference_ext_ioctl - Ioctl function implementing

 * the user surface reference functionality.

 *

 * @dev: Pointer to a struct drm_device.

 * @data: Pointer to data copied from / to user-space.

 * @file_priv: Pointer to a drm file private structure.

/**

 * vmw_gb_surface_define_internal - Ioctl function implementing

 * the user surface define functionality.

 *

 * @dev: Pointer to a struct drm_device.

 * @req: Request argument from user-space.

 * @rep: Response argument to user-space.

 * @file_priv: Pointer to a drm file private structure.

 array_size must be null for non-GL3 host. */

 Define a surface based on the parameters. */

/**

 * vmw_gb_surface_reference_internal - Ioctl function implementing

 * the user surface reference functionality.

 *

 * @dev: Pointer to a struct drm_device.

 * @req: Pointer to user-space request surface arg.

 * @rep: Pointer to response to user-space.

 * @file_priv: Pointer to a drm file private structure.

 Protect res->backup */

/**

 * vmw_subres_dirty_add - Add a dirty region to a subresource

 * @dirty: The surfaces's dirty tracker.

 * @loc_start: The location corresponding to the start of the region.

 * @loc_end: The location corresponding to the end of the region.

 *

 * As we are assuming that @loc_start and @loc_end represent a sequential

 * range of backing store memory, if the region spans multiple lines then

 * regardless of the x coordinate, the full lines are dirtied.

 * Correspondingly if the region spans multiple z slices, then full rather

 * than partial z slices are dirtied.

/**

 * vmw_subres_dirty_full - Mark a full subresource as dirty

 * @dirty: The surface's dirty tracker.

 * @subres: The subresource

/*

 * vmw_surface_tex_dirty_add_range - The dirty_add_range callback for texture

 * surfaces.

		/*

		 * Multiple multisample sheets. To do this in an optimized

		 * fashion, compute the dirty region for each sheet and the

		 * resulting union. Since this is not a common case, just dirty

		 * the whole surface.

 Dirty range covers a single sub-resource */

 Dirty range covers multiple sub-resources */

/*

 * vmw_surface_tex_dirty_add_range - The dirty_add_range callback for buffer

 * surfaces.

/*

 * vmw_surface_tex_dirty_add_range - The dirty_add_range callback for surfaces

/*

 * vmw_surface_dirty_sync - The surface's dirty_sync callback.

		/*

		 * DX_UPDATE_SUBRESOURCE is aware of array surfaces.

		 * UPDATE_GB_IMAGE is not.

/*

 * vmw_surface_dirty_alloc - The surface's dirty_alloc callback.

/*

 * vmw_surface_dirty_free - The surface's dirty_free callback

/*

 * vmw_surface_clean - The surface's clean callback

/*

 * vmw_gb_surface_define - Define a private GB surface

 *

 * @dev_priv: Pointer to a device private.

 * @user_accounting_size:  Used to track user-space memory usage, set

 *                         to 0 for kernel mode only memory

 * @metadata: Metadata representing the surface to create.

 * @user_srf_out: allocated user_srf. Set to NULL on failure.

 *

 * GB surfaces allocated by this function will not have a user mode handle, and

 * thus will only be visible to vmwgfx.  For optimization reasons the

 * surface may later be given a user mode handle by another function to make

 * it available to user mode drivers.

	/*

	 * Don't set SVGA3D_SURFACE_SCREENTARGET flag for a scanout surface with

	 * size greater than STDU max width/height. This is really a workaround

	 * to support creation of big framebuffer requested by some user-space

	 * for whole topology. That big framebuffer won't really be used for

	 * binding with screen target as during prepare_fb a separate surface is

	 * created so it's safe to ignore SVGA3D_SURFACE_SCREENTARGET flag.

	/*

	 * From this point, the generic resource management functions

	 * destroy the object on failure.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2011-2015 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * struct vmw_kms_sou_surface_dirty - Closure structure for

 * blit surface to screen command.

 * @base: The base type we derive from. Used by vmw_kms_helper_dirty().

 * @left: Left side of bounding box.

 * @right: Right side of bounding box.

 * @top: Top side of bounding box.

 * @bottom: Bottom side of bounding box.

 * @dst_x: Difference between source clip rects and framebuffer coordinates.

 * @dst_y: Difference between source clip rects and framebuffer coordinates.

 * @sid: Surface id of surface to copy from.

/*

 * SVGA commands that are used by this code. Please see the device headers

 * for explanation.

/*

 * Display unit using screen objects.

*< Size of allocated buffer */

*< Backing store buffer */

/*

 * Screen Object Display Unit CRTC functions

/*

 * Send the fifo command to create a screen.

 Ok to assume that buffer is pinned in vram */

/*

 * Send the fifo command to destroy a screen.

 no need to do anything */

 Force sync */

/**

 * vmw_sou_crtc_mode_set_nofb - Create new screen

 *

 * @crtc: CRTC associated with the new screen

 *

 * This function creates/destroys a screen.  This function cannot fail, so if

 * somehow we run into a failure, just do the best we can to get out.

/**

 * vmw_sou_crtc_helper_prepare - Noop

 *

 * @crtc:  CRTC associated with the new screen

 *

 * Prepares the CRTC for a mode set, but we don't need to do anything here.

/**

 * vmw_sou_crtc_atomic_enable - Noop

 *

 * @crtc: CRTC associated with the new screen

 * @state: Unused

 *

 * This is called after a mode set has been completed.

/**

 * vmw_sou_crtc_atomic_disable - Turns off CRTC

 *

 * @crtc: CRTC to be turned off

 * @state: Unused

/*

 * Screen Object Display Unit encoder functions

/*

 * Screen Object Display Unit connector functions

/*

 * Screen Object Display Plane Functions

/**

 * vmw_sou_primary_plane_cleanup_fb - Frees sou backing buffer

 *

 * @plane:  display plane

 * @old_state: Contains the FB to clean up

 *

 * Unpins the display surface

 *

 * Returns 0 on success

/**

 * vmw_sou_primary_plane_prepare_fb - allocate backing buffer

 *

 * @plane:  display plane

 * @new_state: info on the new plane state, including the FB

 *

 * The SOU backing buffer is our equivalent of the display plane.

 *

 * Returns 0 on success

			/*

			 * Note that this might temporarily up the pin-count

			 * to 2, until cleanup_fb() is called.

	/* After we have alloced the backing store might not be able to

	 * resume the overlays, this is preferred to failing to alloc.

 vmw_bo_init frees on error */

	/*

	 * TTM already thinks the buffer is pinned, but make sure the

	 * pin_count is upped.

	/* Emulate RGBA support, contrary to svga_reg.h this is not

	 * supported by hosts. This is only a problem if we are reading

	 * this value later and expecting what we uploaded back.

/**

 * vmw_sou_plane_update_bo - Update display unit for bo backed fb.

 * @dev_priv: Device private.

 * @plane: Plane state.

 * @old_state: Old plane state.

 * @vfb: Framebuffer which is blitted to display unit.

 * @out_fence: If non-NULL, will return a ref-counted pointer to vmw_fence_obj.

 *             The returned fence pointer may be NULL in which case the device

 *             has already synchronized.

 *

 * Return: 0 on success or a negative error code on failure.

	/*

	 * SOU SVGA_3D_CMD_BLIT_SURFACE_TO_SCREEN is special in the sense that

	 * its bounding box is filled before iterating over all the clips. So

	 * store the FIFO start address and revisit to fill the details.

 Update the source and destination bounding box later in post_clip */

	/*

	 * rects are relative to dest bounding box rect on screen object, so

	 * translate to it later in post_clip

 To translate bb back to fb src coord */

 rects are relative to dest bb rect */

/**

 * vmw_sou_plane_update_surface - Update display unit for surface backed fb.

 * @dev_priv: Device private.

 * @plane: Plane state.

 * @old_state: Old plane state.

 * @vfb: Framebuffer which is blitted to display unit

 * @out_fence: If non-NULL, will return a ref-counted pointer to vmw_fence_obj.

 *             The returned fence pointer may be NULL in which case the device

 *             has already synchronized.

 *

 * Return: 0 on success or a negative error code on failure.

 In case of device error, maintain consistent atomic state */

 Do nothing when fb and crtc is NULL (blank crtc) */

 For error case vblank event is send from vmw_du_crtc_atomic_flush */

/*

 * Atomic Helpers

	/*

	 * Remove this after enabling atomic because property values can

	 * only exist in a state object

 Initialize primary plane */

 Initialize cursor plane */

	/* Emulate RGBA support, contrary to svga_reg.h this is not

	 * supported by hosts. This is only a problem if we are reading

	 * this value later and expecting what we uploaded back.

 Buffer is reserved in vram or GMR */

/**

 * vmw_sou_surface_fifo_commit - Callback to fill in and submit a

 * blit surface to screen command.

 *

 * @dirty: The closure structure.

 *

 * Fills in the missing fields in the command, and translates the cliprects

 * to match the destination bounding box encoded.

	/*

	 * Use the destination bounding box to specify destination - and

	 * source bounding regions.

 Blits are relative to the destination rect. Translate. */

/**

 * vmw_sou_surface_clip - Callback to encode a blit surface to screen cliprect.

 *

 * @dirty: The closure structure

 *

 * Encodes a SVGASignedRect cliprect and updates the bounding box of the

 * BLIT_SURFACE_TO_SCREEN command.

 Destination rect. */

 Destination bounding box */

/**

 * vmw_kms_sou_do_surface_dirty - Dirty part of a surface backed framebuffer

 *

 * @dev_priv: Pointer to the device private structure.

 * @framebuffer: Pointer to the surface-buffer backed framebuffer.

 * @clips: Array of clip rects. Either @clips or @vclips must be NULL.

 * @vclips: Alternate array of clip rects. Either @clips or @vclips must

 * be NULL.

 * @srf: Pointer to surface to blit from. If NULL, the surface attached

 * to @framebuffer will be used.

 * @dest_x: X coordinate offset to align @srf with framebuffer coordinates.

 * @dest_y: Y coordinate offset to align @srf with framebuffer coordinates.

 * @num_clips: Number of clip rects in @clips.

 * @inc: Increment to use when looping over @clips.

 * @out_fence: If non-NULL, will return a ref-counted pointer to a

 * struct vmw_fence_obj. The returned fence pointer may be NULL in which

 * case the device has already synchronized.

 * @crtc: If crtc is passed, perform surface dirty on that crtc only.

 *

 * Returns 0 on success, negative error code on failure. -ERESTARTSYS if

 * interrupted.

/**

 * vmw_sou_bo_fifo_commit - Callback to submit a set of readback clips.

 *

 * @dirty: The closure structure.

 *

 * Commits a previously built command buffer of readback clips.

/**

 * vmw_sou_bo_clip - Callback to encode a readback cliprect.

 *

 * @dirty: The closure structure

 *

 * Encodes a BLIT_GMRFB_TO_SCREEN cliprect.

/**

 * vmw_kms_sou_do_bo_dirty - Dirty part of a buffer-object backed framebuffer

 *

 * @dev_priv: Pointer to the device private structure.

 * @framebuffer: Pointer to the buffer-object backed framebuffer.

 * @clips: Array of clip rects.

 * @vclips: Alternate array of clip rects. Either @clips or @vclips must

 * be NULL.

 * @num_clips: Number of clip rects in @clips.

 * @increment: Increment to use when looping over @clips.

 * @interruptible: Whether to perform waits interruptible if possible.

 * @out_fence: If non-NULL, will return a ref-counted pointer to a

 * struct vmw_fence_obj. The returned fence pointer may be NULL in which

 * case the device has already synchronized.

 * @crtc: If crtc is passed, perform bo dirty on that crtc only.

 *

 * Returns 0 on success, negative error code on failure. -ERESTARTSYS if

 * interrupted.

/**

 * vmw_sou_readback_fifo_commit - Callback to submit a set of readback clips.

 *

 * @dirty: The closure structure.

 *

 * Commits a previously built command buffer of readback clips.

/**

 * vmw_sou_readback_clip - Callback to encode a readback cliprect.

 *

 * @dirty: The closure structure

 *

 * Encodes a BLIT_SCREEN_TO_GMRFB cliprect.

/**

 * vmw_kms_sou_readback - Perform a readback from the screen object system to

 * a buffer-object backed framebuffer.

 *

 * @dev_priv: Pointer to the device private structure.

 * @file_priv: Pointer to a struct drm_file identifying the caller.

 * Must be set to NULL if @user_fence_rep is NULL.

 * @vfb: Pointer to the buffer-object backed framebuffer.

 * @user_fence_rep: User-space provided structure for fence information.

 * Must be set to non-NULL if @file_priv is non-NULL.

 * @vclips: Array of clip rects.

 * @num_clips: Number of clip rects in @vclips.

 * @crtc: If crtc is passed, readback on that crtc only.

 *

 * Returns 0 on success, negative error code on failure. -ERESTARTSYS if

 * interrupted.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2017 VMware, Inc., Palo Alto, CA., USA

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Template that implements find_first_diff() for a generic

 * unsigned integer type. @size and return value are in bytes.

/*

 * Template that implements find_last_diff() for a generic

 * unsigned integer type. Pointers point to the item following the

 * *end* of the area to be examined. @size and return value are in

 * bytes.

/*

 * Instantiate find diff functions for relevant unsigned integer sizes,

 * assuming that wider integers are faster (including aligning) up to the

 * architecture native width, which is assumed to be 32 bit unless

 * CONFIG_64BIT is defined.

 We use size aligned copies. This computes (addr - align(addr)) */

/*

 * Template to compute find_first_diff() for a certain integer type

 * including a head copy for alignment, and adjustment of parameters

 * for tail find or increased resolution find using an unsigned integer find

 * of smaller width. If finding is complete, and resolution is sufficient,

 * the macro executes a return statement. Otherwise it falls through.

/**

 * vmw_find_first_diff - find the first difference between dst and src

 *

 * @dst: The destination address

 * @src: The source address

 * @size: Number of bytes to compare

 * @granularity: The granularity needed for the return value in bytes.

 * return: The offset from find start where the first difference was

 * encountered in bytes. If no difference was found, the function returns

 * a value >= @size.

	/*

	 * Try finding with large integers if alignment allows, or we can

	 * fix it. Fall through if we need better resolution or alignment

	 * was bad.

/*

 * Template to compute find_last_diff() for a certain integer type

 * including a tail copy for alignment, and adjustment of parameters

 * for head find or increased resolution find using an unsigned integer find

 * of smaller width. If finding is complete, and resolution is sufficient,

 * the macro executes a return statement. Otherwise it falls through.

/**

 * vmw_find_last_diff - find the last difference between dst and src

 *

 * @dst: The destination address

 * @src: The source address

 * @size: Number of bytes to compare

 * @granularity: The granularity needed for the return value in bytes.

 * return: The offset from find start where the last difference was

 * encountered in bytes, or a negative value if no difference was found.

/**

 * vmw_memcpy - A wrapper around kernel memcpy with allowing to plug it into a

 * struct vmw_diff_cpy.

 *

 * @diff: The struct vmw_diff_cpy closure argument (unused).

 * @dest: The copy destination.

 * @src: The copy source.

 * @n: Number of bytes to copy.

/**

 * vmw_adjust_rect - Adjust rectangle coordinates for newly found difference

 *

 * @diff: The struct vmw_diff_cpy used to track the modified bounding box.

 * @diff_offs: The offset from @diff->line_offset where the difference was

 * found.

/**

 * vmw_diff_memcpy - memcpy that creates a bounding box of modified content.

 *

 * @diff: The struct vmw_diff_cpy used to track the modified bounding box.

 * @dest: The copy destination.

 * @src: The copy source.

 * @n: Number of bytes to copy.

 *

 * In order to correctly track the modified content, the field @diff->line must

 * be pre-loaded with the current line number, the field @diff->line_offset must

 * be pre-loaded with the line offset in bytes where the copy starts, and

 * finally the field @diff->cpp need to be preloaded with the number of bytes

 * per unit in the horizontal direction of the area we're examining.

 * Typically bytes per pixel.

 * This is needed to know the needed granularity of the difference computing

 * operations. A higher cpp generally leads to faster execution at the cost of

 * bounding box width precision.

 TODO: Possibly use a single vmw_find_first_diff per line? */

		/*

		 * Starting from where first difference was found, find

		 * location of last difference, and then copy.

/**

 * struct vmw_bo_blit_line_data - Convenience argument to vmw_bo_cpu_blit_line

 *

 * @mapped_dst: Already mapped destination page index in @dst_pages.

 * @dst_addr: Kernel virtual address of mapped destination page.

 * @dst_pages: Array of destination bo pages.

 * @dst_num_pages: Number of destination bo pages.

 * @dst_prot: Destination bo page protection.

 * @mapped_src: Already mapped source page index in @dst_pages.

 * @src_addr: Kernel virtual address of mapped source page.

 * @src_pages: Array of source bo pages.

 * @src_num_pages: Number of source bo pages.

 * @src_prot: Source bo page protection.

 * @diff: Struct vmw_diff_cpy, in the end forwarded to the memcpy routine.

/**

 * vmw_bo_cpu_blit_line - Blit part of a line from one bo to another.

 *

 * @d: Blit data as described above.

 * @dst_offset: Destination copy start offset from start of bo.

 * @src_offset: Source copy start offset from start of bo.

 * @bytes_to_copy: Number of bytes to copy in this line.

/**

 * vmw_bo_cpu_blit - in-kernel cpu blit.

 *

 * @dst: Destination buffer object.

 * @dst_offset: Destination offset of blit start in bytes.

 * @dst_stride: Destination stride in bytes.

 * @src: Source buffer object.

 * @src_offset: Source offset of blit start in bytes.

 * @src_stride: Source stride in bytes.

 * @w: Width of blit.

 * @h: Height of blit.

 * @diff: The struct vmw_diff_cpy used to track the modified bounding box.

 * return: Zero on success. Negative error value on failure. Will print out

 * kernel warnings on caller bugs.

 *

 * Performs a CPU blit from one buffer object to another avoiding a full

 * bo vmap which may exhaust- or fragment vmalloc space.

 * On supported architectures (x86), we're using kmap_atomic which avoids

 * cross-processor TLB- and cache flushes and may, on non-HIGHMEM systems

 * reference already set-up mappings.

 *

 * Neither of the buffer objects may be placed in PCI memory

 * (Fixed memory in TTM terminology) when using this function.

 Buffer objects need to be either pinned or reserved: */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2009-2020 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 Legacy Display Unit does not support surfaces */

/*

 * Reserve @bytes number of bytes in the fifo.

 *

 * This function will return NULL (error) on two conditions:

 *  If it timeouts waiting for fifo space, or if @bytes is larger than the

 *   available fifo space.

 *

 * Returns:

 *   Pointer to the fifo, or null on error (possible hardware hang).

/**

 * vmw_cmd_commit_flush - Commit fifo space and flush any buffered commands.

 *

 * @dev_priv: Pointer to device private structure.

 * @bytes: Number of bytes to commit.

/**

 * vmw_cmd_flush - Flush any buffered commands and make sure command processing

 * starts.

 *

 * @dev_priv: Pointer to device private structure.

 * @interruptible: Whether to wait interruptible if function needs to sleep.

		/*

		 * Don't request hardware to send a fence. The

		 * waiting code in vmwgfx_irq.c will emulate this.

/**

 * vmw_cmd_emit_dummy_legacy_query - emits a dummy query to the fifo using

 * legacy query commands.

 *

 * @dev_priv: The device private structure.

 * @cid: The hardware context id used for the query.

 *

 * See the vmw_cmd_emit_dummy_query documentation.

	/*

	 * A query wait without a preceding query end will

	 * actually finish all queries for this cid

	 * without writing to the query result structure.

/**

 * vmw_cmd_emit_dummy_gb_query - emits a dummy query to the fifo using

 * guest-backed resource query commands.

 *

 * @dev_priv: The device private structure.

 * @cid: The hardware context id used for the query.

 *

 * See the vmw_cmd_emit_dummy_query documentation.

	/*

	 * A query wait without a preceding query end will

	 * actually finish all queries for this cid

	 * without writing to the query result structure.

/**

 * vmw_cmd_emit_dummy_query - emits a dummy query to the fifo using

 * appropriate resource query commands.

 *

 * @dev_priv: The device private structure.

 * @cid: The hardware context id used for the query.

 *

 * This function is used to emit a dummy occlusion query with

 * no primitives rendered between query begin and query end.

 * It's used to provide a query barrier, in order to know that when

 * this query is finished, all preceding queries are also finished.

 *

 * A Query results structure should have been initialized at the start

 * of the dev_priv->dummy_query_bo buffer object. And that buffer object

 * must also be either reserved or pinned when this function is called.

 *

 * Returns -ENOMEM on failure to reserve fifo space.

/**

 * vmw_cmd_supported - returns true if the given device supports

 * command queues.

 *

 * @vmw: The device private structure.

 *

 * Returns true if we can issue commands.

	/*

	 * We have FIFO cmd's

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2011-2014 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 Protected by @goal_irq_mutex */

	bool seqno_valid; /* Protected by @lock, and may not be set to true

/**

 * struct vmw_event_fence_action - fence action that delivers a drm event.

 *

 * @action: A struct vmw_fence_action to hook up to a fence.

 * @event: A pointer to the pending event.

 * @fence: A referenced pointer to the fence to keep it alive while @action

 * hangs on it.

 * @dev: Pointer to a struct drm_device so we can access the event stuff.

 * @tv_sec: If non-null, the variable pointed to will be assigned

 * current time tv_sec val when the fence signals.

 * @tv_usec: Must be set if @tv_sec is set, and the variable pointed to will

 * be assigned the current time tv_usec val when the fence signals.

/*

 * Note on fencing subsystem usage of irqs:

 * Typically the vmw_fences_update function is called

 *

 * a) When a new fence seqno has been submitted by the fifo code.

 * b) On-demand when we have waiters. Sleeping waiters will switch on the

 * ANY_FENCE irq and call vmw_fences_update function each time an ANY_FENCE

 * irq is received. When the last fence waiter is gone, that IRQ is masked

 * away.

 *

 * In situations where there are no waiters and we don't submit any new fences,

 * fence objects may not be signaled. This is perfectly OK, since there are

 * no consumers of the signaled data, but that is NOT ok when there are fence

 * actions attached to a fence. The fencing subsystem then makes use of the

 * FENCE_GOAL irq and sets the fence goal seqno to that of the next fence

 * which has an action attached, and each time vmw_fences_update is called,

 * the subsystem makes sure the fence goal seqno is updated.

 *

 * The fence goal seqno irq is on as long as there are unsignaled fence

 * objects with actions attached to them.

		/*

		 * We can use the barrier free __set_current_state() since

		 * DMA_FENCE_FLAG_SIGNALED_BIT + wakeup is protected by the

		 * fence spinlock.

/*

 * Execute signal actions on fences recently signaled.

 * This is done from a workqueue so we don't have to execute

 * signal actions from atomic context.

		/*

		 * At this point, only we should be able to manipulate the

		 * list heads of the actions we have on the private list.

		 * hence fman::lock not held.

		/*

		 * Add the cleanup action to the cleanup list so that

		 * it will be performed by a worker task.

/**

 * vmw_fence_goal_new_locked - Figure out a new device fence goal

 * seqno if needed.

 *

 * @fman: Pointer to a fence manager.

 * @passed_seqno: The seqno the device currently signals as passed.

 *

 * This function should be called with the fence manager lock held.

 * It is typically called when we have a new passed_seqno, and

 * we might need to update the fence goal. It checks to see whether

 * the current fence goal has already passed, and, in that case,

 * scans through all unsignaled fences to get the next fence object with an

 * action attached, and sets the seqno of that fence as a new fence goal.

 *

 * returns true if the device goal seqno was updated. False otherwise.

/**

 * vmw_fence_goal_check_locked - Replace the device fence goal seqno if

 * needed.

 *

 * @fence: Pointer to a struct vmw_fence_obj the seqno of which should be

 * considered as a device fence goal.

 *

 * This function should be called with the fence manager lock held.

 * It is typically called when an action has been attached to a fence to

 * check whether the seqno of that fence should be used for a fence

 * goal interrupt. This is typically needed if the current fence goal is

 * invalid, or has a higher seqno than that of the current fence object.

 *

 * returns true if the device goal seqno was updated. False otherwise.

	/*

	 * Rerun if the fence goal seqno was updated, and the

	 * hardware might have raced with that update, so that

	 * we missed a fence_goal irq.

	/*

	 * Free kernel space accounting.

	/*

	 * Kernel memory space accounting, since this object may

	 * be created by a user-space request.

	/*

	 * The base object holds a reference which is freed in

	 * vmw_user_fence_base_release.

		/*

		 * Free the base object's reference

/**

 * vmw_wait_dma_fence - Wait for a dma fence

 *

 * @fman: pointer to a fence manager

 * @fence: DMA fence to wait on

 *

 * This function handles the case when the fence is actually a fence

 * array.  If that's the case, it'll wait on each of the child fence

	/* From i915: Note that if the fence-array was created in

	 * signal-on-any mode, we should *not* decompose it into its individual

	 * fences. However, we don't currently store which mode the fence-array

	 * is operating in. Fortunately, the only user of signal-on-any is

	 * private to amdgpu and we should not see any incoming fence-array

	 * from sync-file being in signal-on-any mode.

/*

 * vmw_fence_fifo_down - signal all unsignaled fence objects.

	/*

	 * The list may be altered while we traverse it, so always

	 * restart when we've released the fman->lock.

/**

 * vmw_fence_obj_lookup - Look up a user-space fence object

 *

 * @tfile: A struct ttm_object_file identifying the caller.

 * @handle: A handle identifying the fence object.

 * @return: A struct vmw_user_fence base ttm object on success or

 * an error pointer on failure.

 *

 * The fence object is looked up and type-checked. The caller needs

 * to have opened the fence object first, but since that happens on

 * creation and fence objects aren't shareable, that's not an

 * issue currently.

	/*

	 * 64-bit division not present on 32-bit systems, so do an

	 * approximation. (Divide by 1000000).

	/*

	 * Optionally unref the fence object.

/**

 * vmw_event_fence_action_seq_passed

 *

 * @action: The struct vmw_fence_action embedded in a struct

 * vmw_event_fence_action.

 *

 * This function is called when the seqno of the fence where @action is

 * attached has passed. It queues the event on the submitter's event list.

 * This function is always called from atomic context.

 monotonic time, so no y2038 overflow */

/**

 * vmw_event_fence_action_cleanup

 *

 * @action: The struct vmw_fence_action embedded in a struct

 * vmw_event_fence_action.

 *

 * This function is the struct vmw_fence_action destructor. It's typically

 * called from a workqueue.

/**

 * vmw_fence_obj_add_action - Add an action to a fence object.

 *

 * @fence: The fence object.

 * @action: The action to add.

 *

 * Note that the action callbacks may be executed before this function

 * returns.

		/*

		 * This function may set fman::seqno_valid, so it must

		 * be run with the goal_irq_mutex held.

/**

 * vmw_event_fence_action_queue - Post an event for sending when a fence

 * object seqno has passed.

 *

 * @file_priv: The file connection on which the event should be posted.

 * @fence: The fence object on which to post the event.

 * @event: Event to be posted. This event should've been alloced

 * using k[mz]alloc, and should've been completely initialized.

 * @tv_sec: If non-null, the variable pointed to will be assigned

 * current time tv_sec val when the fence signals.

 * @tv_usec: Must be set if @tv_sec is set, and the variable pointed to will

 * be assigned the current time tv_usec val when the fence signals.

 * @interruptible: Interruptible waits if possible.

 *

 * As a side effect, the object pointed to by @event may have been

 * freed when this function returns. If this function returns with

 * an error code, the caller needs to free that object.

	/*

	 * Look up an existing fence object,

	 * and if user-space wants a new reference,

	 * add one.

	/*

	 * Create a new fence object.

 SPDX-License-Identifier: GPL-2.0 OR MIT */

/**************************************************************************

 *

 * Copyright 2021 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

	/*

	 * A version of user-space exists which use MULTISAMPLE_MASKABLESAMPLES

	 * to check the sample count supported by virtual device. Since there

	 * never was support for multisample count for backing MOB return 0.

	 *

	 * MULTISAMPLE_MASKABLESAMPLES devcap is marked as deprecated by virtual

	 * device.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2013 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Authors:

 *     Thomas Hellstrom <thellstrom@vmware.com>

 *

/*

 * DMA-BUF attach- and mapping methods. No need to implement

 * these until we have other virtual devices use them.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2019 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/*

 * Different methods for tracking dirty:

 * VMW_BO_DIRTY_PAGETABLE - Scan the pagetable for hardware dirty bits

 * VMW_BO_DIRTY_MKWRITE - Write-protect page table entries and record write-

 * accesses in the VM mkwrite() callback

/*

 * No dirtied pages at scan trigger a transition to the _MKWRITE method,

 * similarly a certain percentage of dirty pages trigger a transition to

 * the _PAGETABLE method. How many triggers should we wait for before

 * changing method?

 Percentage to trigger a transition to the _PAGETABLE method */

/**

 * struct vmw_bo_dirty - Dirty information for buffer objects

 * @start: First currently dirty bit

 * @end: Last currently dirty bit + 1

 * @method: The currently used dirty method

 * @change_count: Number of consecutive method change triggers

 * @ref_count: Reference count for this structure

 * @bitmap_size: The size of the bitmap in bits. Typically equal to the

 * nuber of pages in the bo.

 * @size: The accounting size for this struct.

 * @bitmap: A bitmap where each bit represents a page. A set bit means a

 * dirty page.

/**

 * vmw_bo_dirty_scan_pagetable - Perform a pagetable scan for dirty bits

 * @vbo: The buffer object to scan

 *

 * Scans the pagetable for dirty bits. Clear those bits and modify the

 * dirty structure with the results. This function may change the

 * dirty-tracking method.

/**

 * vmw_bo_dirty_scan_mkwrite - Reset the mkwrite dirty-tracking method

 * @vbo: The buffer object to scan

 *

 * Write-protect pages written to so that consecutive write accesses will

 * trigger a call to mkwrite.

 *

 * This function may change the dirty-tracking method.

/**

 * vmw_bo_dirty_scan - Scan for dirty pages and add them to the dirty

 * tracking structure

 * @vbo: The buffer object to scan

 *

 * This function may change the dirty tracking method.

/**

 * vmw_bo_dirty_pre_unmap - write-protect and pick up dirty pages before

 * an unmap_mapping_range operation.

 * @vbo: The buffer object,

 * @start: First page of the range within the buffer object.

 * @end: Last page of the range within the buffer object + 1.

 *

 * If we're using the _PAGETABLE scan method, we may leak dirty pages

 * when calling unmap_mapping_range(). This function makes sure we pick

 * up all dirty pages.

/**

 * vmw_bo_dirty_unmap - Clear all ptes pointing to a range within a bo

 * @vbo: The buffer object,

 * @start: First page of the range within the buffer object.

 * @end: Last page of the range within the buffer object + 1.

 *

 * This is similar to ttm_bo_unmap_virtual() except it takes a subrange.

/**

 * vmw_bo_dirty_add - Add a dirty-tracking user to a buffer object

 * @vbo: The buffer object

 *

 * This function registers a dirty-tracking user to a buffer object.

 * A user can be for example a resource or a vma in a special user-space

 * mapping.

 *

 * Return: Zero on success, -ENOMEM on memory allocation failure.

 Write-protect and then pick up already dirty bits */

/**

 * vmw_bo_dirty_release - Release a dirty-tracking user from a buffer object

 * @vbo: The buffer object

 *

 * This function releases a dirty-tracking user from a buffer object.

 * If the reference count reaches zero, then the dirty-tracking object is

 * freed and the pointer to it cleared.

 *

 * Return: Zero on success, -ENOMEM on memory allocation failure.

/**

 * vmw_bo_dirty_transfer_to_res - Pick up a resource's dirty region from

 * its backing mob.

 * @res: The resource

 *

 * This function will pick up all dirty ranges affecting the resource from

 * it's backup mob, and call vmw_resource_dirty_update() once for each

 * range. The transferred ranges will be cleared from the backing mob's

 * dirty tracking.

/**

 * vmw_bo_dirty_clear_res - Clear a resource's dirty region from

 * its backing mob.

 * @res: The resource

 *

 * This function will clear all dirty ranges affecting the resource from

 * it's backup mob's dirty tracking.

	/*

	 * mkwrite() doesn't handle the VM_FAULT_RETRY return value correctly.

	 * So make sure the TTM helpers are aware.

	/*

	 * If we don't track dirty using the MKWRITE method, make sure

	 * sure the page protection is write-enabled so we don't get

	 * a lot of unnecessary write faults.

 SPDX-License-Identifier: GPL-2.0 OR MIT

/**************************************************************************

 *

 * Copyright 2012-2016 VMware, Inc., Palo Alto, CA., USA

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the

 * "Software"), to deal in the Software without restriction, including

 * without limitation the rights to use, copy, modify, merge, publish,

 * distribute, sub license, and/or sell copies of the Software, and to

 * permit persons to whom the Software is furnished to do so, subject to

 * the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

/**

 * struct vmw_stream - Overlay stream simple resource.

 * @sres: The simple resource we derive from.

 * @stream_id: The overlay stream id.

/**

 * vmw_stream - Typecast a struct vmw_resource to a struct vmw_stream.

 * @res: Pointer to the struct vmw_resource.

 *

 * Returns: Returns a pointer to the struct vmw_stream.

/***************************************************************************

 * Simple resource callbacks for struct vmw_stream

/***************************************************************************

 * End simple resource callbacks for struct vmw_stream

/**

 * vmw_stream_unref_ioctl - Ioctl to unreference a user-space handle to

 * a struct vmw_stream.

 * @dev: Pointer to the drm device.

 * @data: The ioctl argument

 * @file_priv: Pointer to a struct drm_file identifying the caller.

 *

 * Return:

 *   0 if successful.

 *   Negative error value on failure.

/**

 * vmw_stream_claim_ioctl - Ioctl to claim a struct vmw_stream overlay.

 * @dev: Pointer to the drm device.

 * @data: The ioctl argument

 * @file_priv: Pointer to a struct drm_file identifying the caller.

 *

 * Return:

 *   0 if successful.

 *   Negative error value on failure.

/**

 * vmw_user_stream_lookup - Look up a struct vmw_user_stream from a handle.

 * @dev_priv: Pointer to a struct vmw_private.

 * @tfile: struct ttm_object_file identifying the caller.

 * @inout_id: In: The user-space handle. Out: The stream id.

 * @out: On output contains a refcounted pointer to the embedded

 * struct vmw_resource.

 *

 * Return:

 *   0 if successful.

 *   Negative error value on failure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2021 Microsoft

 *

 * Portions of this code is derived from hyperv_fb.c

 size of message after this field */

 size of this header + payload after this field */

 SYNTHVID_CURSOR_MAX_X at most */

 SYNTHVID_CURSOR_MAX_Y at most */

 hotspot relative to upper-left of pointer image */

 top left corner */

 bottom right corner, exclusive */

 vram_offset should always be 0 */

/*

 * Hyper-V supports a hardware cursor feature. It's not used by Linux VM,

 * but the Hyper-V host still draws a point as an extra mouse pointer,

 * which is unwanted, especially when Xorg is running.

 *

 * The hyperv_fb driver uses synthvid_send_ptr() to hide the unwanted

 * pointer, by setting msg.ptr_pos.is_visible = 1 and setting the

 * msg.ptr_shape.data. Note: setting msg.ptr_pos.is_visible to 0 doesn't

 * work in tests.

 *

 * Copy synthvid_send_ptr() to hyperv_drm and rename it to

 * hyperv_hide_hw_ptr(). Note: hyperv_hide_hw_ptr() is also called in the

 * handler of the SYNTHVID_FEATURE_CHANGE event, otherwise the host still

 * draws an extra unwanted mouse pointer after the VM Connection window is

 * closed and reopened.

 Complete the wait event */

 Negotiate the protocol version with host */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2021 Microsoft

 TODO: Use mapping abstraction properly */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2021 Microsoft

 end of list */ }

/*

 * PCI stub to support gen1 VM.

	/*

	 * Map the VRAM cacheable for performance. This is also required for VM

	 * connect to display properly for ARM64 Linux VM, as the host also maps

	 * the VRAM cacheable.

	/*

	 * Should be done only once during init and resume. Failing to update

	 * vram location is not fatal. Device will update dirty area till

	 * preferred resolution only.

 Synthetic Video Device GUID */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (C) COPYRIGHT 2012-2013 ARM Limited. All rights reserved.

 *

 * Parts of this file were based on sources as follows:

 *

 * Copyright (c) 2006-2008 Intel Corporation

 * Copyright (c) 2007 Dave Airlie <airlied@linux.ie>

 * Copyright (C) 2011 Texas Instruments

/**

 * DOC: ARM PrimeCell PL110 and PL111 CLCD Driver

 *

 * The PL110/PL111 is a simple LCD controller that can support TFT

 * and STN displays. This driver exposes a standard KMS interface

 * for them.

 *

 * The driver currently doesn't expose the cursor.  The DRM API for

 * cursors requires support for 64x64 ARGB8888 cursor images, while

 * the hardware can only support 64x64 monochrome with masking

 * cursors.  While one could imagine trying to hack something together

 * to look at the ARGB8888 and program reasonable in monochrome, we

 * just don't expose the cursor at all instead, and leave cursor

 * support to the application software cursor layer.

 *

 * TODO:

 *

 * - Fix race between setting plane base address and getting IRQ for

 *   vsync firing the pageflip completion.

 *

 * - Read back hardware state at boot to skip reprogramming the

 *   hardware when doing a no-op modeset.

 *

 * - Use the CLKSEL bit to support switching between the two external

 *   clock parents.

				/*

				 * Something deferred, but that is often just

				 * another way of saying -ENODEV, but let's

				 * cast a vote for later deferral.

 Continue, maybe something else is working */

	/*

	 * If we can't find neither panel nor bridge on any of the

	 * endpoints, and any of them retured -EPROBE_DEFER, then

	 * let's defer this driver too.

	/*

	 * When using device-specific reserved memory we can't import

	 * DMA buffers: those are passed by reference in any global

	 * memory and we can only handle a specific range of memory.

 The two main variants swap this register */

 This may override some variant settings */

 turn off interrupts before requesting the irq */

/*

 * This early variant lacks the 565 and 444 pixel formats.

 RealView, Versatile Express etc use this modern variant */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright Â© 2017 Broadcom

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Versatile family (ARM reference designs) handling for the PL11x.

 * This is based on code and know-how in the previous frame buffer

 * driver in drivers/video/fbdev/amba-clcd.c:

 * Copyright (C) 2001 ARM Limited, by David A Rusling

 * Updated to 2.5 by Deep Blue Solutions Ltd.

 * Major contributions and discoveries by Russell King.

/*

 * We detect the different syscon types from the compatible strings.

/*

 * Core module CLCD control on the Integrator/CP, bits

 * 8 thru 19 of the CM_CONTROL register controls a bunch

 * of CLCD settings.

 Bits 11,12,13 controls the LCD or VGA bridge type */

 R/L flip on Sharp */

 U/D flip on Sharp */

 No connection on Sharp */

 0 = 24bit VGA, 1 = 18bit VGA */

 FIXME: really needed? */

 24bit formats */

 Pseudocolor, RGB555, BGR555 */

/*

 * This configuration register in the Versatile and RealView

 * family is uniformly present but appears more and more

 * unutilized starting with the RealView series.

 Set up the MUX */

 Then enable the display */

 PL110 pixel formats for Integrator, vanilla PL110 */

 Extended PL110 pixel formats for Integrator and Versatile */

 Uses external PLD */

 Uses external PLD */

/*

 * The Integrator variant is a PL110 with a bunch of broken, or not

 * yet implemented features

/*

 * The IM-PD1 variant is a PL110 with a bunch of broken, or not

 * yet implemented features

/*

 * This is the in-between PL110 variant found in the ARM Versatile,

 * supporting RGB565/BGR565

/*

 * RealView PL111 variant, the only real difference from the vanilla

 * PL111 is that we select 16bpp framebuffer by default to be able

 * to get 1024x768 without saturating the memory bus.

/*

 * Versatile Express PL111 variant, again we just push the maximum

 * BPP to 16 to be able to get 1024x768 without saturating the memory

 * bus. The clockdivider also seems broken on the Versatile Express.

	/*

	 * Check if we have a CLCD or HDLCD on the core tile by checking if a

	 * CLCD or HDLCD is available in the root of the device tree.

	/*

	 * If there is a coretile HDLCD and it has a driver,

	 * do not mux the CLCD on the motherboard to the DVI.

	/*

	 * On the Vexpress CA9 we let the CLCD on the coretile

	 * take precedence, so also in this case do not mux the

	 * motherboard to the DVI.

 Call into deep Vexpress configuration API */

 Non-ARM reference designs, just bail out */

 Versatile Express special handling */

	/*

	 * On the Integrator, check if we should use the IM-PD1 instead,

	 * if we find it, it will take precedence. This is on the Integrator/AP

	 * which only has this option for PL110 graphics.

 This can do RGB565 with external PLD */

		/*

		 * The Versatile has a variant halfway between PL110

		 * and PL111 where these two registers have already been

		 * swapped.

 SPDX-License-Identifier: GPL-2.0+

	/*

	 * Just bail out of this is not found, we could be running

	 * multiplatform on something else than Nomadik.

	/*

	 * This bit in the PMU controller multiplexes the two graphics

	 * blocks found in the Nomadik STn8815. The other one is called

	 * MDIF (Master Display Interface) and gets muxed out here.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (C) COPYRIGHT 2012-2013 ARM Limited. All rights reserved.

 *

 * Parts of this file were based on sources as follows:

 *

 * Copyright (c) 2006-2008 Intel Corporation

 * Copyright (c) 2007 Dave Airlie <airlied@linux.ie>

 * Copyright (C) 2011 Texas Instruments

 Clear the interrupt once done */

	/*

	 * We use the pixelclock to also account for interlaced modes, the

	 * resulting bandwidth is in bytes per second.

 In Hz */

	/*

	 * If no bandwidth constraints, anything goes, else

	 * check if we are too fast.

 FB base address must be dword aligned. */

		/* There's no pitch register -- the mode's hdisplay

		 * controls it.

		/* We can't change the FB format in a flicker-free

		 * manner (and only update it during CRTC enable).

		/*

		 * The AC pin bias frequency is set to max count when using

		 * grayscale so at least once in a while we will reverse

		 * polarity and get rid of any DC built up that could

		 * damage the display.

		/*

		 * Here is when things get really fun. Sometimes the bridge

		 * timings are such that the signal out from PL11x is not

		 * stable before the receiving bridge (such as a dumb VGA DAC

		 * or similar) samples it. If that happens, we compensate by

		 * the only method we have: output the data on the opposite

		 * edge of the clock so it is for sure stable when it gets

		 * sampled.

		 *

		 * The PL111 manual does not contain proper timining diagrams

		 * or data for these details, but we know from experiments

		 * that the setup time is more than 3000 picoseconds (3 ns).

		 * If we have a bridge that requires the signal to be stable

		 * earlier than 3000 ps before the clock pulse, we have to

		 * output the data on the opposite edge to avoid flicker.

	/*

	 * Detect grayscale bus format. We do not support a grayscale mode

	 * toward userspace, instead we expose an RGB24 buffer and then the

	 * hardware will activate its grayscaler to convert to the grayscale

	 * format.

 Else we assume TFT display */

 On the ST Micro variant, assume all 24 bits are connected */

	/*

	 * Note that the the ARM hardware's format reader takes 'r' from

	 * the low bit, while DRM formats list channels from high bit

	 * to low bit as you read left to right. The ST Micro version of

	 * the PL110 (LCDC) however uses the standard DRM format.

 Only supported on the ST Micro variant */

 Only supported on the ST Micro variant */

 The PL110 in Integrator/Versatile does the BGR routing externally */

 Power sequence: first enable and chill */

	/*

	 * We expect this delay to stabilize the contrast

	 * voltage Vee as stipulated by the manual

 Power Up */

 Power Down */

	/*

	 * We expect this delay to stabilize the contrast voltage Vee as

	 * stipulated by the manual

 Disable */

 If the clock divider is broken, use the parent directly */

 SPDX-License-Identifier: GPL-2.0+

 PRCMU DSI reset registers */

 Mask off the ACK value and clear status */

 This happens all the time (safe to ignore) */

 This happens all the time (safe to ignore) */

	/*

	 * Select the way the DSI data flow is pushing to the display:

	 * currently we just support video or command mode depending

	 * on the type of display. Video mode defaults to using the

	 * formatter itself for synchronization (stateless video panel).

	 *

	 * FIXME: add flags to struct mipi_dsi_device .flags to indicate

	 * displays that require BTA (bus turn around) so we can handle

	 * such displays as well. Figure out how to properly handle

	 * single frame on-demand updates with DRM for command mode

	 * displays (MCDE_COMMAND_ONESHOT_FLOW).

 MIPI_DSI_FMT_RGB88 etc */

 us */

 Send command */

 Read command */

 Set exit code and retry */

 Writing only */

 Set exit code and retry */

 Return number of bytes written */

 OK this is a read command, get the response */

 FIXME: read more than 4 bytes */

 Successful transmission */

 Command "nature" */

 MCTL_MAIN_DATA_CTL already set up */

	/*

	 * More than 2 bytes will not fit in a single packet, so it's

	 * time to set the "long not short" bit. One byte is used by

	 * the MIPI DCS command leaving just one byte for the payload

	 * in a short package.

 MIPI DCS command is part of the data */

 Clear any errors */

 This sends a direct (short) command to request TE */

 Command "nature" TE request */

 Clear TE reveived and error status bits and enables them */

 Clear and enable no TE or TE missing status */

 Send this TE request command */

 cpp, characters per pixel, number of bytes per pixel */

 RGB header and pixel mode */

 TODO: TVG (test video generator) could be enabled here */

	/*

	 * During vertical blanking: go to LP mode

	 * Like with the EOL setting, if this is not set, the EOL area will be

	 * filled with NULL or blanking packets in the vblank area.

	 * FIXME: some Samsung phones and display panels such as s6e63m0 use

	 * DSI_VID_MAIN_CTL_REG_BLKLINE_MODE_BLANKING here instead,

	 * figure out how to properly configure that from the panel.

	/*

	 * During EOL: go to LP mode. If this is not set, the EOL area will be

	 * filled with NULL or blanking packets.

 Recovery mode 1 */

 All other fields zero */

 Vertical frame parameters are pretty straight-forward */

 vertical front porch */

 vertical sync active */

 vertical back porch */

	/*

	 * Horizontal frame parameters:

	 * horizontal resolution is given in pixels but must be re-calculated

	 * into bytes since this is what the hardware expects, these registers

	 * define the payload size of the packet.

	 *

	 * hfp = horizontal front porch in bytes

	 * hbp = horizontal back porch in bytes

	 * hsa = horizontal sync active in bytes

	 *

	 * 6 + 2 is HFP header + checksum

		/*

		 * Use sync pulse for sync: explicit HSA time

		 * 6 is HBP header + checksum

		 * 4 is RGB header + checksum

		/*

		 * 6 is HBP header + checksum

		 * 4 is HSW packet bytes

		 * 4 is RGB header + checksum

		/*

		 * Use event for sync: HBP includes both back porch and sync

		 * 6 is HBP header + checksum

		 * 4 is HSW packet bytes

		 * 4 is RGB header + checksum

 HSA is not present in this mode and set to 0 */

 Frame parameters: horizontal sync active */

 horizontal back porch */

 horizontal front porch */

 RGB data length (visible bytes on one scanline) */

	/*

	 * Calculate the time between two pixels in picoseconds using

	 * the supplied refresh rate and total resolution including

	 * porches and sync.

 (ps/s) / (pixels/s) = ps/pixels */

	/*

	 * How many bytes per line will this update frequency yield?

	 *

	 * Calculate the number of picoseconds for one scanline (1), then

	 * divide by 1000000000000 (2) to get in pixels per second we

	 * want to output.

	 *

	 * Multiply with number of bytes per second at this video display

	 * frequency (3) to get number of bytes transferred during this

	 * time. Notice that we use the frequency the display wants,

	 * not what we actually get from the DSI PLL, which is hs_freq.

	 *

	 * These arithmetics are done in a different order to avoid

	 * overflow.

 (1) picoseconds per line */

 Multiply with bytes per second (3) */

 Pixels per second (2) */

 microseconds */

 seconds */

 parallel transactions in all lanes */

	/*

	 * 6 is header + checksum, header = 4 bytes, checksum = 2 bytes

	 * 4 is short packet for vsync/hsync

 Set the event packet size to 0 (not used) */

		/*

		 * FIXME: isn't the hsync width in pixels? The porch and

		 * sync area size is in pixels here, but this -6

		 * seems to be for bytes. It looks like this in the vendor

		 * code though. Is it completely untested?

 Set the sync pulse packet size to 0 (not used) */

 Specifying payload size in bytes (-4-6 from manual) */

	/*

	 * The line duration is used to scale back the frequency from

	 * the max frequency supported by the HS clock to the desired

	 * update frequency in vrefresh.

	/*

	 * The datasheet contains this complex condition to decreasing

	 * the line duration by 1 under very specific circumstances.

	 * Here we also imply that LP is used during burst EOL.

	/*

	 * This is the time to perform LP->HS on D-PHY

	 * FIXME: nowhere to get this from: DT property on the DSI?

	 * The manual says this is "system dependent".

	 * values like 48 and 72 seen in the vendor code.

	/*

	 * See the manual figure 657 page 2203 for understanding the impact

	 * of the different burst mode settings.

		/*

		 * Packet size at EOL for burst mode, this is only used

		 * if DSI_VID_MAIN_CTL_REG_BLKEOL_MODE_LP_0 is NOT set,

		 * but we instead send NULL or blanking packets at EOL.

		 * This is given in number of bytes.

		 *

		 * See the manual page 2198 for the 13 reg_blkeol_pck bits.

 Use the same value for exact burst limit */

		/*

		 * This BLKEOL duration is claimed to be the duration in clock

		 * cycles of the BLLP end-of-line (EOL) period for each line if

		 * DSI_VID_MAIN_CTL_REG_BLKEOL_MODE_LP_0 is set.

		 *

		 * It is hard to trust the manuals' claim that this is in clock

		 * cycles as we mimic the behaviour of the vendor code, which

		 * appears to write a number of bytes that would have been

		 * transferred on a single lane.

		 *

		 * See the manual figure 657 page 2203 and page 2198 for the 13

		 * reg_blkeol_duration bits.

		 *

		 * FIXME: should this also be set up also for non-burst mode

		 * according to figure 565 page 2202?

 Max burst limit, this is given in bytes */

 Maximum line limit */

 No integration mode */

 Enable the DSI port, from drivers/video/mcde/dsilink_v2.c */

 Set a high command timeout, clear other fields */

	/*

	 * UI_X4 is described as "unit interval times four"

	 * I guess since DSI packets are 4 bytes wide, one unit

	 * is one byte.

 MHz */

	/*

	 * Enable clocking: 0x0f (something?) between each burst,

	 * enable the second lane if needed, enable continuous clock if

	 * needed, enable switch into ULPM (ultra-low power mode) on

	 * all the lines.

 High PHY timeout */

 Wait for the PLL to lock and the clock and data lines to come up */

 Sleep for a millisecond */

 TODO needed? */

 Command mode, clear IF1 ID */

	/*

	 * If we enable low-power mode here,

	 * then display updates become really slow.

 Wait for DSI PHY to initialize */

/*

 * Notice that this is called from inside the display controller

 * and not from the bridge callbacks.

 Copy maximum clock frequencies */

 Enable LP (Low Power, Energy Save, ES) and HS (High Speed) clocks */

 Start clocks */

 Assert RESET through the PRCMU, active low */

 FIXME: which DSI block? */

 De-assert RESET again */

 Start up the hardware */

 Set up the video mode from the DRM mode */

 Put IF1 into video mode */

 Disable command mode on IF1 */

 Enable some error interrupts */

 Enable video mode */

 Command mode, clear IF1 ID */

		/*

		 * If we enable low-power mode here

		 * the display updates become really slow.

	/*

	 * Wait until we get out of command mode

	 * CSM = Command State Machine

 Sleep for a millisecond */

 Wait until we get out og video mode */

 Sleep for a millisecond */

/*

 * Notice that this is called from inside the display controller

 * and not from the bridge callbacks.

 Stop video mode */

 Stop command mode */

	/*

	 * Stop clocks and terminate any DSI traffic here so the panel can

	 * send commands to shut down the display using DSI direct write until

	 * this point.

 Disable all error interrupts */

 Attach the DSI bridge to the output (panel etc) bridge */

 If the display attached before binding, set this up */

 Obtain the clocks */

 Look for a panel as a child to this node */

 TODO: AV8100 HDMI encoder goes here for example */

 Create a bridge for this DSI channel */

 TODO: first come first serve, use a list */

 Get a handle on the PRCMU so we can do reset */

 SPDX-License-Identifier: GPL-2.0

 The MCDE internal clock dividers for FIFO A and B */

	/*

	 * Select the PLL72 (LCD) clock as parent

	 * FIXME: implement other parents.

 Internal clock */

 Clear then set the divider */

	/*

	 * If the MCDE is not powered we can't access registers.

	 * It will come up with 0 in the divider register bits, which

	 * means "divide by 2".

 0 in the PCD means "divide by 2", 1 means "divide by 3" etc */

	/*

	 * We cache the CR bits to set the divide in the state so that

	 * we can call this before we can even write to the hardware.

 Bypass clock divider */

 Allocate 2 clocks */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Linus Walleij <linus.walleij@linaro.org>

 * Parts of this file were based on the MCDE driver by Marcus Lorentzon

 * (C) ST-Ericsson SA 2013

 TODO: implement FIFO C0 and FIFO C1 */

 Handle display IRQs */

	/*

	 * Handle IRQs from the DSI link. All IRQs from the DSI links

	 * are just latched onto the MCDE IRQ line, so we need to traverse

	 * any active DSI masters and check if an IRQ is originating from

	 * them.

	 *

	 * TODO: Currently only one DSI link is supported.

		/*

		 * In oneshot mode we do not send continuous updates

		 * to the display, instead we only push out updates when

		 * the update function is called, then we disable the

		 * flow on the channel once we get the TE IRQ.

 Disable FIFO A flow */

 Vblank from one of the channels */

 Disable all IRQs */

 Clear any pending IRQs */

 FB base address must be dword aligned. */

		/*

		 * There's no pitch register, the mode's hdisplay

		 * controls this.

		/*

		 * We can't change the FB format in a flicker-free

		 * manner (and only update it during CRTC enable).

	/*

	 * Configure external source 0 one buffer (buffer 0)

	 * primary overlay ID 0.

	 * From mcde_hw.c ovly_update_registers() in the vendor tree

 Software select, primary */

 Use external source 0 that we just configured */

 OPQ: overlay is opaque */

 No OPQ */

	/*

	 * Pixel fetch watermark level is max 0x1FFF pixels.

	 * Two basic rules should be followed:

	 * 1. The value should be at least 256 bits.

	 * 2. The sum of all active overlays pixelfetch watermark level

	 *    multiplied with bits per pixel, should be lower than the

	 *    size of input_fifo_size in bits.

	 * 3. The value should be a multiple of a line (256 bits).

 Number of bytes to fetch per line */

 No cropping */

 Set up overlay control register */

 Not using rotation but set it up anyways */

	/*

	 * Set up the overlay compositor to route the overlay out to

	 * the desired channel

 Set up channel 0 sync (based on chnl_update_registers()) */

 Oneshot is achieved with software sync */

		/*

		 * TODO:

		 * The vendor driver uses the formatter as sync source

		 * for BTA TE mode. Test to use TE if you have a panel

		 * that uses this mode.

 Set up pixels per line and lines per frame */

	/*

	 * Normalize color conversion:

	 * black background, OLED conversion disable on channel

 Set up muxing: connect the channel to the desired FIFO */

	/*

	 * If using DPI configure the sync event.

	 * TODO: this is for LCD only, it does not cover TV out.

	/*

	 * Select the formatter to use for this FIFO

	 *

	 * The register definitions imply that different IDs should be used

	 * by the DSI formatters depending on if they are in VID or CMD

	 * mode, and the manual says they are dedicated but identical.

	 * The vendor code uses them as it seems fit.

 Blend source with Alpha 0xff on FIFO */

	/*

	 * Set-up from mcde_fmtr_dsi.c, fmtr_dsi_enable_video()

	 * FIXME: a different clock needs to be selected for TV out.

 Assume RGB888 24 bit if we have no further info */

		/*

		 * Set up the CDWIN and OUTBPP for the LCD

		 *

		 * FIXME: fill this in if you know the correspondance between the MIPI

		 * DPI specification and the media bus formats.

 Use the MCDE clock for DSI */

	/*

	 * Enable formatter

	 * 8 bit commands and DCS commands (notgen = not generic)

 Define the MIPI command: we want to write into display memory */

	/*

	 * FIXME: the vendor driver has some hack around this value in

	 * CMD mode with autotrig.

 Check that we really drained and stopped the flow */

/*

 * This drains a pipe i.e. a FIFO connected to a certain channel

 Attempt to clear the FIFO */

 Trigger a software sync out on respective channel (0-3) */

 Disable FIFO A flow again */

	/*

	 * DSI command mode line packets should be split into an even number of

	 * packets smaller than or equal to the fifo size.

 FIXME: we only support LCD, implement TV out */

 Display actual values */

	/*

	 * The pixel fetcher is 128 64-bit words deep = 1024 bytes.

	 * One overlay of 32bpp (4 cpp) assumed, fetch 160 pixels.

	 * 160 * 4 = 640 bytes.

 Set up the main control, watermark level at 7 */

	/*

	 * This sets up the internal silicon muxing of the DPI

	 * lines. This is how the silicon connects out to the

	 * external pins, then the pins need to be further

	 * configured into "alternate functions" using pin control

	 * to actually get the signals out.

	 *

	 * FIXME: this is hardcoded to the only setting found in

	 * the wild. If we need to use different settings for

	 * different DPI displays, make this parameterizable from

	 * the device tree.

 24 bits DPI: connect Ch A LSB to D[0:7] */

 24 bits DPI: connect Ch A MID to D[8:15] */

 Don't care about this muxing */

 Don't care about this muxing */

 24 bits DPI: connect Ch A MSB to D[32:39] */

 Syncmux bits zero: DPI channel A */

 This hammers us into LCD mode */

 Front porch and sync width */

 The vendor driver sets the same value into TVBL2A */

 Vertical back porch */

 The vendor drivers sets the same value into TVDVOA */

 Horizontal back porch, as 0 = 1 cycle we need to subtract 1 */

 Horizongal sync width and horizonal front porch, 0 = 1 cycle */

 Blank some TV registers we don't use */

 Set up sync inversion etc */

 pixels per line */

 lines per frame */

 Set up the main control, watermark level at 7 */

	/*

	 * This is the internal silicon muxing of the DPI

	 * (parallell display) lines. Since we are not using

	 * this at all (we are using DSI) these are just

	 * dummy values from the vendor tree.

 Calculations from mcde_fmtr_dsi.c, fmtr_dsi_enable_video() */

	/*

	 * Set up FIFO A watermark level:

	 * 128 for LCD 32bpp video mode

	 * 48  for LCD 32bpp command mode

	 * 128 for LCD 16bpp video mode

	 * 64  for LCD 16bpp command mode

	 * 128 for HDMI 32bpp

	 * 192 for HDMI 16bpp

 The FIFO is 640 entries deep on this v3 hardware */

 NOTE: pkt_div is 1 for video mode */

 Commands CMD8 need one extra byte */

 NOTE: pkt_div is 1 for video mode */

 This powers up the entire MCDE block and the DSI hardware */

 Clear any pending interrupts */

 Drain the FIFO A + channel 0 pipe so we have a clean slate */

	/*

	 * We set up our display pipeline:

	 * EXTSRC 0 -> OVERLAY 0 -> CHANNEL 0 -> FIFO A -> DSI FORMATTER 0

	 *

	 * First configure the external source (memory) on external source 0

	 * using the desired bitstream/bitmap format

	/*

	 * Configure overlay 0 according to format and mode and take input

	 * from external source 0 and route the output of this overlay to

	 * channel 0

	/*

	 * Configure pixel-per-line and line-per-frame for channel 0 and then

	 * route channel 0 to FIFO A

 Configure FIFO A to use DPI formatter 0 */

 Set up and enable the LCD clock */

 Configure FIFO A to use DSI formatter 0 */

		/*

		 * This brings up the DSI bridge which is tightly connected

		 * to the MCDE DSI formatter.

 Configure the DSI formatter 0 for the DSI panel output */

 We are using TE in some combination */

 Enable VSYNC capture on TE0 */

 No TE capture */

	/*

	 * If we're using oneshot mode we don't start the flow

	 * until each time the display is given an update, and

	 * then we disable it immediately after. For all other

	 * modes (command or video) we start the FIFO flow

	 * right here. This is necessary for the hardware to

	 * behave right.

 Enable MCDE with automatic clock gating */

 Disable FIFO A flow */

 This disables the DSI bridge */

 Make sure we are powered down (before we may power up again) */

 Request a TE ACK only in TE+BTA mode */

 Enable FIFO A flow */

	/*

	 * If oneshot mode is enabled, the flow will be disabled

	 * when the TE0 IRQ arrives in the interrupt handler. Otherwise

	 * updates are continuously streamed to the display after this

	 * point.

 Trigger a software sync out on channel 0 */

		/*

		 * Disable FIFO A flow again: since we are using TE sync we

		 * need to wait for the FIFO to drain before we continue

		 * so repeated calls to this function will not cause a mess

		 * in the hardware by pushing updates will updates are going

		 * on already.

 Write bitmap base address to register */

	/*

	 * Base address for next line this is probably only used

	 * in interlace modes.

	/*

	 * Handle any pending event first, we need to arm the vblank

	 * interrupt before sending any update to the display so we don't

	 * miss the interrupt.

		/*

		 * Hardware must be on before we can arm any vblank event,

		 * this is not a scanout controller where there is always

		 * some periodic update going on, it is completely frozen

		 * until we get an update. If MCDE output isn't yet enabled,

		 * we just send a vblank dummy event back.

	/*

	 * We do not start sending framebuffer updates before the

	 * display is enabled. Update events will however be dispatched

	 * from the DRM core before the display is enabled.

		/*

		 * Usually the flow is already active, unless we are in

		 * oneshot mode, then we need to kick the flow right here.

		/*

		 * If an update is receieved before the MCDE is enabled

		 * (before mcde_display_enable() is called) we can't really

		 * do much with that buffer.

 Enable all VBLANK IRQs */

 Disable all VBLANK IRQs */

 Clear any pending IRQs */

 These are actually IRGB1555 so intensity bit is lost */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Linus Walleij <linus.walleij@linaro.org>

 * Parts of this file were based on the MCDE driver by Marcus Lorentzon

 * (C) ST-Ericsson SA 2013

/**

 * DOC: ST-Ericsson MCDE Driver

 *

 * The MCDE (short for multi-channel display engine) is a graphics

 * controller found in the Ux500 chipsets, such as NovaThor U8500.

 * It was initially conceptualized by ST Microelectronics for the

 * successor of the Nomadik line, STn8500 but productified in the

 * ST-Ericsson U8500 where is was used for mass-market deployments

 * in Android phones from Samsung and Sony Ericsson.

 *

 * It can do 1080p30 on SDTV CCIR656, DPI-2, DBI-2 or DSI for

 * panels with or without frame buffering and can convert most

 * input formats including most variants of RGB and YUV.

 *

 * The hardware has four display pipes, and the layout is a little

 * bit like this::

 *

 *   Memory     -> Overlay -> Channel -> FIFO -> 8 formatters -> DSI/DPI

 *   External      0..5       0..3       A,B,    6 x DSI         bridge

 *   source 0..9                         C0,C1   2 x DPI

 *

 * FIFOs A and B are for LCD and HDMI while FIFO CO/C1 are for

 * panels with embedded buffer.

 * 6 of the formatters are for DSI, 3 pairs for VID/CMD respectively.

 * 2 of the formatters are for DPI.

 *

 * Behind the formatters are the DSI or DPI ports that route to

 * the external pins of the chip. As there are 3 DSI ports and one

 * DPI port, it is possible to configure up to 4 display pipelines

 * (effectively using channels 0..3) for concurrent use.

 *

 * In the current DRM/KMS setup, we use one external source, one overlay,

 * one FIFO and one formatter which we connect to the simple CMA framebuffer

 * helpers. We then provide a bridge to the DSI port, and on the DSI port

 * bridge we connect hang a panel bridge or other bridge. This may be subject

 * to change as we exploit more of the hardware capabilities.

 *

 * TODO:

 *

 * - Enabled damaged rectangles using drm_plane_enable_fb_damage_clips()

 *   so we can selectively just transmit the damaged area to a

 *   command-only display.

 * - Enable mixing of more planes, possibly at the cost of moving away

 *   from using the simple framebuffer pipeline.

 * - Enable output to bridges such as the AV8100 HDMI encoder from

 *   the DSI bridge.

	/*

	 * Using this function is necessary to commit atomic updates

	 * that need the CRTC to be enabled before a commit, as is

	 * the case with e.g. DSI displays.

	/*

	 * If no other bridge was found, check if we have a DPI panel or

	 * any other bridge connected directly to the MCDE DPI output.

	 * If a DSI bridge is found, DSI will take precedence.

	 *

	 * TODO: more elaborate bridge selection if we have more than one

	 * thing attached to the system.

 This hardware can do 1080p */

 Attach the bridge. */

 First obtain and turn on the main power */

	/*

	 * The vendor code uses ESRAM (onchip RAM) and need to activate

	 * the v-esram34 regulator, but we don't use that yet

 Clock the silicon so we can access the registers */

	/*

	 * Check hardware revision, we only support U8500v2 version

	 * as this was the only version used for mass market deployment,

	 * but surely you can add more versions if you have them and

	 * need them.

 Disable and clear any pending interrupts */

 Spawn child devices for the DSI ports */

 Create something that will match the subdrivers when we bind */

	/*

	 * Perform an invasive reset of the MCDE and all blocks by

	 * cutting the power to the subsystem, then bring it back up

	 * later when we enable the display as a result of

	 * component_master_add_with_match().

 Wait 50 ms so we are sure we cut the power */

		/*

		 * The EPOD regulator is already disabled at this point so some

		 * special errorpath code is needed

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (C) COPYRIGHT 2016 ARM Limited. All rights reserved.

 * Author: Liviu Dudau <Liviu.Dudau@arm.com>

 *

 * ARM Mali DP500/DP550/DP650 KMS/DRM driver

 Update all channels with a single gamma curve. */

	/*

	 * Always write an entire table, so the address field in

	 * DE_COEFFTAB_ADDR is 0 and we can use the gamma_write_mask bitmask

	 * directly.

 Set SE_CONTROL */

 Set IN_SIZE & OUT_SIZE. */

 Set phase regs. */

/*

 * set the "config valid" bit and wait until the hardware acts on it

 don't wait for config_valid flag if we are in config mode */

		/*

		 * if we have an event to deliver to userspace, make sure

		 * the vblank is enabled as we are sending it from the IRQ

		 * handler.

 only set config_valid if the CRTC is enabled */

			/*

			 * make a loop around the second CVAL setting and

			 * try 5 times before giving up.

 CRTC inactive means vblank IRQ is disabled, send event directly */

	/*

	 * set config_valid to a special value to let IRQ handlers

	 * know that we are updating registers

 fetch the interrupts from DT */

 allocate for the worst case scenario, i.e. rotated buffers */

CONFIG_DEBUG_FS

	/*

	 * The DP500 CORE_ID register is in a different location, so check it

	 * first. If the product id field matches, then this is DP500, otherwise

	 * check the DP550/650 CORE_ID register.

 Offset 0x18 will never read 0x500 on products other than DP500. */

 we can only suspend if the hardware is in config mode */

 number of lines for the R, G and B output */

 Get the optional framebuffer memory resource */

 Enable power management */

 Resume device to enable the clocks */

 set the number of lines used for output of RGB data */

 Set the CRTC's port so that the encoder component can find it */

	/* We expect to have a maximum of two encoders one for the actual

	 * display and a virtual one for the writeback connector

 there is only one output port inside each device, find it */

/*

 * Copyright (C) 2013-2015 ARM Limited

 * Author: Liviu Dudau <Liviu.Dudau@arm.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

 *  Implementation of a CRTC class for the HDLCD driver.

/*

 * The HDLCD controller is a dumb RGB streamer that gets connected to

 * a single HDMI transmitter or in the case of the ARM Models it gets

 * emulated by the software that does the actual rendering.

 *

 stop the controller on cleanup */

/*

 * Setup the HDLCD registers for decoding the pixels out of the framebuffer

 HDLCD uses 'bytes per pixel', zero means 1 byte */

	/*

	 * The format of the HDLCD_REG_<color>_SELECT register is:

	 *   - bits[23:16] - default value for that color component

	 *   - bits[11:8]  - number of bits to extract for each color component

	 *   - bits[4:0]   - index of the lowest bit to extract

	 *

	 * The default color value is used when bits[11:8] are zero, when the

	 * pixel is outside the visible frame area or when there is a

	 * buffer underrun.

 show underruns in red */

 Allow max number of outstanding requests and largest burst size */

 0.1% seems a close enough tolerance for the TDA19988 on Juno */

 clock required by mode not supported by hardware */

 only the HDLCD_REG_FB_LINE_COUNT register has a limit */

 we cannot disable the plane while the CRTC is active */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (C) COPYRIGHT 2016 ARM Limited. All rights reserved.

 * Author: Liviu Dudau <Liviu.Dudau@arm.com>

 *

 * ARM Mali DP500/DP550/DP650 driver (crtc operations)

	/*

	 * check that the hardware can drive the required clock rate,

	 * but skip the check if the clock is meant to be disabled (req_rate = 0)

 We rely on firmware to set mclk to a sensible level. */

 always disable planes on the CRTC that is being turned off */

 sector 0 */

 sector 1 */

 sector 2 */

 sector 3 */

 sector 4 */

 sector 5 */

 sector 6 */

 DP has 12-bit internal precision for its LUTs. */

/*

 * Check if there is a new gamma LUT and if it is of an acceptable size. Also,

 * reject any LUTs that use distinct red, green, and blue curves.

		/*

		 * Kerneldoc for drm_atomic_helper_check_modeset mandates that

		 * it be invoked when the driver sets ->mode_changed. Since

		 * changing the gamma LUT doesn't depend on any external

		 * resources, it is safe to call it only once.

/*

 * Check if there is a new CTM and if it contains valid input. Valid here means

 * that the number is inside the representable range for a Q3.12 number,

 * excluding truncating the fractional part of the input data.

 *

 * The COLORADJ registers can be changed atomically.

	/*

	 * The size of the ctm is checked in

	 * drm_atomic_replace_property_blob_from_id.

 Convert from S31.32 to Q3.12. */

		/*

		 * Convert to 2s complement and check the destination's top bit

		 * for overflow. NB: Can't check before converting or it'd

		 * incorrectly reject the case:

		 * sign == 1

		 * mag == 0x2000

 U16.16 */

 U16.16 */

 The scaling engine can only handle one plane at a time. */

		/*

		 * Convert crtc_[w|h] to U32.32, then divide by U16.16 src_[w|h]

		 * to get the U16.16 result.

 Calculate initial_phase and delta_phase for horizontal. */

 Same for vertical. */

	/*

	 * check if there is enough rotation memory available for planes

	 * that need 90Â° and 270Â° rotion or planes that are compressed.

	 * Each plane has set its required memory size in the ->plane_check()

	 * callback, here we only make sure that the sums are less that the

	 * total usable memory.

	 *

	 * The rotation memory allocation algorithm (for each plane):

	 *  a. If no more rotated or compressed planes exist, all remaining

	 *     rotate memory in the bank is available for use by the plane.

	 *  b. If other rotated or compressed planes exist, and plane's

	 *     layer ID is DE_VIDEO1, it can use all the memory from first bank

	 *     if secondary rotation memory bank is available, otherwise it can

	 *     use up to half the bank's memory.

	 *  c. If other rotated or compressed planes exist, and plane's layer ID

	 *     is not DE_VIDEO1, it can use half of the available memory.

	 *

	 * Note: this algorithm assumes that the order in which the planes are

	 * checked always has DE_VIDEO1 plane first in the list if it is

	 * rotated. Because that is how we create the planes in the first

	 * place, under current DRM version things work, but if ever the order

	 * in which drm_atomic_crtc_state_for_each_plane() iterates over planes

	 * changes, we need to pre-sort the planes before validation.

 first count the number of rotated planes */

	/*

	 * if we have more than 1 plane using rotation memory, use the second

	 * block of rotation memory as well

 now validate the rotation memory requirements */

 process current plane */

 no more rotated planes, we can use what's left */

 If only the writeback routing has changed, we don't need a modeset */

 No inverse-gamma: it is per-plane. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (C) COPYRIGHT 2016 ARM Limited. All rights reserved.

 * Author: Liviu Dudau <Liviu.Dudau@arm.com>

 *

 * ARM Mali DP plane manipulation routines.

 Layer specific register offsets */

/*

 * This 4-entry look-up-table is used to determine the full 8-bit alpha value

 * for formats with 1- or 2-bit alpha channels.

 * We set it to give 100%/0% opacity for 1-bit formats and 100%/66%/33%/0%

 * opacity for 2-bit formats.

 page sizes the MMU prefetcher can support */

 readahead for partial-frame prefetch */

/*

 * Replicate what the default ->reset hook does: free the state pointer and

 * allocate a new empty object. We just need enough space to store

 * a malidp_plane_state instead of a drm_plane_state.

 Some pixel formats are supported without any modifier */

		/*

		 * However these pixel formats need to be supported with

		 * modifiers only

 SPLIT buffers must use SPARSE layout */

 CBR only applies to YUV formats, where YTR should be always 0 */

 return false, if the modifier was not found */

	/*

	 * RGB formats need to provide YTR modifier and YUV formats should not

	 * provide YTR modifier.

 Scaling not necessary for this plane. */

 Defer scaling requirements calculation to the crtc check. */

/*

 * Check if the framebuffer is entirely made up of pages at least pgsize in

 * size. Only a heuristic: assumes that each scatterlist entry has been aligned

 * to the largest page size smaller than its length and that the MMU maps to

 * the largest page size possible.

/*

 * Check if it is possible to enable partial-frame MMU prefetch given the

 * current format, AFBC state and rotation.

 rotation and horizontal flip not supported for partial prefetch */

 always supported */

 supported, but if AFBC then must be sparse mode */

 supported, but not for AFBC */

 not supported */

/*

 * Select the preferred MMU prefetch mode. Full-frame prefetch is preferred as

 * long as the framebuffer is all large pages. Otherwise partial-frame prefetch

 * is selected as long as it is supported for the current format. The selected

 * page size for prefetch is returned in pgsize_bitmap.

 get the full-frame prefetch page size(s) supported by the MMU */

 get the partial-frame prefetch page size(s) supported by the MMU */

 partial prefetch using the smallest page size */

 get the page sizes supported by the MMU */

	/*

	 * DP550/650 video layers can accept 3 plane formats only if

	 * fb->pitches[1] == fb->pitches[2] since they don't have a

	 * third plane stride register.

 validate the rotation constraints for each layer */

		/*

		 * packed RGB888 / BGR888 can't be rotated or flipped

		 * unless they are stored in a compressed way

 SMART layer does not support AFBC */

 HW can't support plane + pixel blending */

	/*

	 * The drm convention for pitch is that it needs to cover width * cpp,

	 * but our hardware wants the pitch/stride to cover all rows included

	 * in a tile.

 coefficients are signed, two's complement values */

 check hardware supports MMU prefetch */

	/*

	 * drm_fb_cma_get_gem_addr() alters the physical base address of the

	 * framebuffer as per the plane's src_x, src_y co-ordinates (ie to

	 * take care of source cropping).

	 * For AFBC, this is not needed as the cropping is handled by _AD_CROP_H

	 * and _AD_CROP_V registers.

 no afbc_decoder_offset means AFBC is not supported on this plane */

 convert src values from Q16 fixed point to integer */

	/*

	 * For AFBC framebuffer, use the framebuffer width and height for

	 * configuring layer input size register.

 convert src values from Q16 fixed point to integer */

		/*

		 * Enable the first rectangle in the SMART layer to be

		 * able to use it as a drm plane.

 first clear the rotation bits */

 setup the rotation and axis flip bits */

 We only care about blend mode if the format has alpha */

 set the 'enable layer' bit */

		/*

		 * Since our hardware does not support SPLIT, so build the list

		 * of supported modifiers excluding SPLIT ones.

 build the list of DRM supported formats based on the map */

		/*

		 * All the layers except smart layer supports AFBC modifiers.

 Skip the features which the SMART layer doesn't have. */

 Attach the YUV->RGB property only to video layers */

 default encoding for YUV->RGB is BT601 NARROW */

 program the HW registers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * (C) COPYRIGHT 2016 ARM Limited. All rights reserved.

 * Author: Liviu Dudau <Liviu.Dudau@arm.com>

 *

 * ARM Mali DP500/DP550/DP650 hardware manipulation routines. This is where

 * the difference between various versions of the hardware is being dealt with

 * in an attempt to provide to the rest of the driver code a unified view

 SE writeback not enabled */

 SE in one-shot mode for writeback */

 SE started writeback */

 SE will start another writeback after this one */

 SE needs to stop after this writeback */

    fourcc,   layers supporting the format,     internal id  */

 These are supported with AFBC only */

    fourcc,   layers supporting the format,      internal id   */ \

 This is only supported with linear modifier */	\

 This is only supported with AFBC modifier */		\

 This is only supported with linear modifier */ \

 This is only supported with AFBC modifier */ \

 This is only supported with linear modifier */ \

 This is only supported with AFBC modifier */ \

 This is only supported with AFBC modifier */ \

	/* id, base address, fb pointer address base, stride offset,

	 *	yuv2rgb matrix offset, mmu control register offset, rotation_features

	/* id, base address, fb pointer address base, stride offset,

	 *	yuv2rgb matrix offset, mmu control register offset, rotation_features

	/* id, base address, fb pointer address base, stride offset,

	 *	yuv2rgb matrix offset, mmu control register offset,

	 *	rotation_features

 All RGB formats (except XRGB, RGBX, XBGR, BGRX) */

 All RGB formats > 16bpp (except XRGB, RGBX, XBGR, BGRX) */

 All 8 or 10 bit YUV 444 formats. */

 In DP550, 10 bit YUV 420 format also supported */

 YUV 420, 422 P1 8 bit and YUV 444 8 bit/10 bit formats */

 YUV 420, 422 P1 8, 10 bit formats */

 All formats */

 bit 4 of the CONFIG_ID register holds the line size multiplier */

 no second rotation memory bank */

		/*

		 * entering config mode can take as long as the rendering

		 * of a full frame, hence the long sleep here

	/*

	 * Mali-DP500 encodes the background color like this:

	 *    - red   @ MALIDP500_BGND_COLOR[12:0]

	 *    - green @ MALIDP500_BGND_COLOR[27:16]

	 *    - blue  @ (MALIDP500_BGND_COLOR + 4)[12:0]

	/*

	 * Program the RQoS register to avoid high resolutions flicker

	 * issue on the LS1028A.

	/*

	 * Each layer needs enough rotation memory to fit 8 lines

	 * worth of pixel data. Required size is then:

	 *    size = rotated_width * (bpp / 8) * 8;

 Get array indices into dp500_se_scaling_coeffs. */

 Hz */

	/*

	 * mclk = max(a, 1.5) * pxlclk

	 *

	 * To avoid float calculaiton, using 15 instead of 1.5 and div by

	 * 10 to get mclk.

 enable the scaling engine block */

 restart the writeback if already enabled */

 two banks of 64KB for rotation memory */

 two banks of 128KB for rotation memory */

 two banks of 40KB for rotation memory */

 reserved value */

		/*

		 * entering config mode can take as long as the rendering

		 * of a full frame, hence the long sleep here

	/*

	 * Mali-DP550 and Mali-DP650 encode the background color like this:

	 *   - red   @ MALIDP550_DE_BGND_COLOR[23:16]

	 *   - green @ MALIDP550_DE_BGND_COLOR[15:8]

	 *   - blue  @ MALIDP550_DE_BGND_COLOR[7:0]

	 *

	 * We need to truncate the least significant 4 bits from the default

	 * MALIDP_BGND_COLOR_x values

 8 lines at 4 bytes per pixel */

 16 lines at 2 bytes per pixel */

 16 lines at 1.5 bytes per pixel */

 8 lines at 3 bytes per pixel */

 16 lines at 12 bits per pixel */

 8 lines at 3 bytes per pixel */

 8 lines at 30 bits per pixel */

 16 lines at 15 bits per pixel */

 8 lines at 15 bits per pixel */

 Uncompressed YUV 420 10 bit single plane cannot be rotated */

 16 lines at 2 bytes per pixel */

 mclk can't be slower than pxlclk. */

 enable the scaling engine block */

 reserved values */

 two banks of 128KB for rotation memory */

 two banks of 80KB for rotation memory */

 no CLEARIRQ register */

			/*

			 * In some DP550 and DP650, DRM_FORMAT_YUYV + AFBC modifier

			 * is supported by a different h/w format id than

			 * DRM_FORMAT_YUYV (only).

	/*

	 * if we are suspended it is likely that we were invoked because

	 * we share an interrupt line with some other driver, don't try

	 * to read the hardware registers

 first handle the config valid IRQ */

 do we have a page flip event? */

 keep the status of the enabled interrupts, plus the error bits */

 ensure interrupts are disabled */

 first enable the DC block IRQs */

 now enable the DE block IRQs */

 ensure interrupts are disabled */

	/*

	 * if we are suspended it is likely that we were invoked because

	 * we share an interrupt line with some other driver, don't try

	 * to read the hardware registers

 disable writeback after stop */

 to a new start */

 writeback started, need to emulate one-shot mode */

			/*

			 * only set config_valid HW bit if there is no other update

			 * in progress or if we raced ahead of the DE IRQ handler

			 * and config_valid flag will not be update until later

 ensure interrupts are disabled */

 ensure interrupts are disabled */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2016 ARM Limited. All rights reserved.

 * Author: Brian Starkey <brian.starkey@arm.com>

 *

 * ARM Mali DP Writeback connector implementation

 memory write buffers are never rotated */

/*

 * Copyright (C) 2013-2015 ARM Limited

 * Author: Liviu Dudau <Liviu.Dudau@arm.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

 *  ARM HDLCD Driver

 acknowledge interrupt(s) */

 Ensure interrupts are disabled */

 enable debug interrupts */

 disable all the interrupts that we might have enabled */

 disable debug interrupts */

 disable vsync interrupts */

 Get the optional framebuffer memory resource */

 Set the CRTC's port so that the encoder component can find it */

 there is only one output port inside each device, find it */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 the write back data comes from the compiz */

 compiz doesn't output alpha */

	/*

	 * No need for a full modested when the only connector changed is the

	 * writeback connector.

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 enum ports */

 Get the optional framebuffer memory resource */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

/* Two assumptions

 * 1. RGB always has YTR

 * 2. Tiled RGB always has SC

 AFBC_16x16 + features: YUV+RGB both */

 SPARSE */

 YTR + (SPARSE) */

 SPLIT + SPARSE + YTR RGB only */

 split mode is only allowed for sparse mode */

 TILED + (SPARSE) */

 TILED YUV format only */

 TILED + SC + (SPLIT+SPARSE | SPARSE) + (YTR) */

 AFBC_32x8 + features: which are RGB formats only */

 YTR + (SPARSE) */

 SPLIT + SPARSE + (YTR) */

 split mode is only allowed for sparse mode */

 TILED + SC + (SPLIT+SPARSE | SPARSE) + YTR */

		/* one fourcc may has two caps items in table (afbc/none-afbc),

		 * so check the existing list to avoid adding a duplicated one.

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 Call into the CHIP to recognize events */

 Notify the crtc to handle the events */

	/* Considering the list sequence is zpos increasing, so if list is empty

	 * or the zpos of new node bigger than the last node in list, no need

	 * loop and just insert the new one to the tail of the list.

 Build the list by zpos increasing */

			/* Komeda doesn't support setting a same zpos for

			 * different planes.

 This loop also added all effected planes into the new state */

 Build a list by zpos increasing */

		/* When layer_split has been enabled, one plane will be handled

		 * by two separated komeda layers (left/right), which may needs

		 * two zorders.

		 * - zorder: for left_layer for left display part.

		 * - zorder + 1: will be reserved for right layer.

 calculate max slave zorder */

	/* Komeda need to re-calculate resource assumption in every commit

	 * so need to add all affected_planes (even unchanged) to

	 * drm_atomic_state.

 Get value from dev */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 connector doesn't config any color_format, use RGB444 as default */

/**

 * komeda_crtc_atomic_check - build display output data flow

 * @crtc: DRM crtc

 * @state: the crtc state object

 *

 * crtc_atomic_check is the final check stage, so beside build a display data

 * pipeline according to the crtc_state, but still needs to release or disable

 * the unclaimed pipeline resources.

 *

 * RETURNS:

 * Zero for success or -errno

 release unclaimed pipeline resources */

/* For active a crtc, mainly need two parts of preparation

 * 1. adjust display operation mode.

 * 2. enable needed clk

	/* Only need to enable aclk on single display mode, but no need to

	 * enable aclk it on dual display mode, since the dual mode always

	 * switch from single display mode, the aclk already enabled, no need

	 * to enable it again.

 will handle it together with the write back support */

			/*

			 * Consume event before notifying drm core that flip

			 * happened.

 step 1: update the pipeline/component state to HW */

 step 2: notify the HW to kickoff the update */

 if caller doesn't send a flip_done, use a private flip_done */

 wait the flip take affect.*/

	/* crtc_disable has two scenarios according to the state->active switch.

	 * 1. active -> inactive

	 *    this commit is a disable commit. and the commit will be finished

	 *    or done after the disable operation. on this case we can directly

	 *    use the crtc->state->event to tracking the HW disable operation.

	 * 2. active -> active

	 *    the crtc->commit is not for disable, but a modeset operation when

	 *    crtc is active, such commit actually has been completed by 3

	 *    DRM operations:

	 *    crtc_disable, update_planes(crtc_flush), crtc_enable

	 *    so on this case the crtc->commit is for the whole process.

	 *    we can not use it for tracing the disable, we need a temporary

	 *    flip_done for tracing the disable. and crtc->state->event for

	 *    the crtc_enable operation.

	 *    That's also the reason why skip modeset commit in

	 *    komeda_crtc_atomic_flush()

 wait phase 1 disable done */

 phase 2 */

 commit with modeset will be handled in enable/disable */

 Returns the minimum frequency of the aclk rate (main engine clock) in Hz */

	/* Once dual-link one display pipeline drives two display outputs,

	 * the aclk needs run on the double rate of pxlclk

 Get current aclk rate that specified by state */

 In dual link half the horizontal settings */

 crtc_clock will be used as the komeda output pixel clock */

 only master can be primary */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

* komeda_pipeline_add - Add a pipeline to &komeda_dev */

* komeda_component_add - Add a component to &komeda_pipeline */

 calculate right layer for the layer split */

/* if pipeline_A accept another pipeline_B's component as input, treat

 * pipeline_B as slave of pipeline_A.

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 Assign pipeline for crtc */

 pipeline only can be disabled when the it is free or unused */

/**

 * komeda_component_get_state_and_set_user()

 *

 * @c: component to get state and set user

 * @state: global atomic state

 * @user: direct user, the binding user

 * @crtc: the CRTC user, the big boss :)

 *

 * This function accepts two users:

 * -   The direct user: can be plane/crtc/wb_connector depends on component

 * -   The big boss (CRTC)

 * CRTC is the big boss (the final user), because all component resources

 * eventually will be assigned to CRTC, like the layer will be binding to

 * kms_plane, but kms plane will be binding to a CRTC eventually.

 *

 * The big boss (CRTC) is for pipeline assignment, since &komeda_component isn't

 * independent and can be assigned to CRTC freely, but belongs to a specific

 * pipeline, only pipeline can be shared between crtc, and pipeline as a whole

 * (include all the internal components) assigned to a specific CRTC.

 *

 * So when set a user to komeda_component, need first to check the status of

 * component->pipeline to see if the pipeline is available on this specific

 * CRTC. if the pipeline is busy (assigned to another CRTC), even the required

 * component is free, the component still cannot be assigned to the direct user.

 First check if the pipeline is available */

 check if the component has been occupied */

 mark the component as active if user is valid */

	/* since the inputs[i] is only valid when it is active. So if a input[i]

	 * is a newly enabled input which switches from disable to enable, then

	 * the old inputs[i] is undefined (NOT zeroed), we can not rely on

	 * memcmp, but directly mark it changed

 Get current available scaler from the component->supported_outputs */

 update the data flow for the next stage */

	/*

	 * The rotation has been handled by layer, so adjusted the data flow for

	 * the next stage.

	/* If input comes from compiz that means the scaling is for writeback

	 * and scaler can not do upscaling for writeback

 Enable alpha processing if the next stage needs the pixel alpha */

 check display rect */

 compare with old to check if this input has been changed */

	/* compiz output dflow will be fed to the next pipeline stage, prepare

	 * the data flow configuration for the next stage

		/* the output data of compiz doesn't have alpha, it only can be

		 * used as bottom layer when blend it with master layers

 if format doesn't have alpha, fix blend mode to PIXEL_NONE */

 try to enable image enhancer if data flow is a 2x+ upscaling */

	/* try to enable split if scaling exceed the scaler's acceptable

	 * input/output range.

 if split, check if can put the data flow into merger */

/*

 * Split is introduced for workaround scaler's input/output size limitation.

 * The idea is simple, if one scaler can not fit the requirement, use two.

 * So split splits the big source image to two half parts (left/right) and do

 * the scaling by two scaler separately and independently.

 * But split also imports an edge problem in the middle of the image when

 * scaling, to avoid it, split isn't a simple half-and-half, but add an extra

 * pixels (overlap) to both side, after split the left/right will be:

 * - left: [0, src_length/2 + overlap]

 * - right: [src_length/2 - overlap, src_length]

 * The extra overlap do eliminate the edge problem, but which may also generates

 * unnecessary pixels when scaling, we need to crop them before scaler output

 * the result to the next stage. and for the how to crop, it depends on the

 * unneeded pixels, another words the position where overlay has been added.

 * - left: crop the right

 * - right: crop the left

 *

 * The diagram for how to do the split

 *

 *  <---------------------left->out_w ---------------->

 * |--------------------------------|---right_crop-----| <- left after split

 *  \                                \                /

 *   \                                \<--overlap--->/

 *   |-----------------|-------------|(Middle)------|-----------------| <- src

 *                     /<---overlap--->\                               \

 *                    /                 \                               \

 * right after split->|-----left_crop---|--------------------------------|

 *                    ^<------------------- right->out_w --------------->^

 *

 * NOTE: To consistent with HW the output_w always contains the crop size.

	/* original dflow may fed into splitter, and which doesn't need

	 * enhancement overlap

 split the origin content */

	/* left/right here always means the left/right part of display image,

	 * not the source Image

 DRM rotation is anti-clockwise */

 enhancer only */

 split without scaler, no overlap */

		/* Consider YUV format, after split, the split source w/h

		 * may not aligned to 2. we have two choices for such case.

		 * 1. scaler is enabled (overlap != 0), we can do a alignment

		 *    both left/right and crop the extra data by scaler.

		 * 2. scaler is not enabled, only align the split left

		 *    src/disp, and the rest part assign to right

 do YUV alignment when scaler enabled */

 on flip_h, the left display content from the right-source */

 split the disp_rect */

 calculate the scaling crop */

 left scaler output more data and do crop */

 out_w includes the crop length */

/* For layer split, a plane state will be split to two data flows and handled

 * by two separated komeda layer input pipelines. komeda supports two types of

 * layer split:

 * - none-scaling split:

 *             / layer-left -> \

 * plane_state                  compiz-> ...

 *             \ layer-right-> /

 *

 * - scaling split:

 *             / layer-left -> scaler->\

 * plane_state                          merger -> compiz-> ...

 *             \ layer-right-> scaler->/

 *

 * Since merger only supports scaler as input, so for none-scaling split, two

 * layer data flows will be output to compiz directly. for scaling_split, two

 * data flow will be merged by merger firstly, then merger outputs one merged

 * data flow to compiz.

 The rotation has been handled by layer, so adjusted the data flow */

	/* left and right dflow has been merged to compiz already,

	 * no need merger to merge them anymore.

 line merger path */

 writeback data path: compiz -> scaler -> wb_layer -> memory */

/* writeback scaling split data path:

 *                   /-> scaler ->\

 * compiz -> splitter              merger -> wb_layer -> memory

 *                   \-> scaler ->/

/* build display output data flow, the data path is:

 * compiz -> improc -> timing_ctrlr

 master data flow */

 slave data flow */

 merge the slave dflow into master pipeline */

 unbound all disabling component */

 release unclaimed pipeline resource */

 ignore the pipeline which is not affected */

/* Since standalong disabled components must be disabled separately and in the

 * last, So a complete disable operation may needs to call pipeline_disable

 * twice (two phase disabling).

 * Phase 1: disable the common components, flush it.

 * Phase 2: disable the standalone disabled components, flush it.

 *

 * RETURNS:

 * true: disable is not complete, needs a phase 2 disable.

 * false: disable is complete.

		/*

		 * If we disabled a component then all active_inputs should be

		 * put in the list of changed_active_inputs, so they get

		 * re-enabled.

		 * This usually happens during a modeset when the pipeline is

		 * first disabled and then the actual state gets committed

		 * again.

	/* Update the pipeline state, if there are components that are still

	 * active, return true for calling the phase 2 disable.

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 add connector */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2019 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

/* return 0 on success,  < 0 on no space.

 GLB error */

 DOU error */

 LPU errors or events */

 LPU TBU errors*/

 CU errors*/

 reduce the same msg print, only print the first evt for one frame */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 tiled header afbc */

 if the fb can be supported by a specific layer */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

/**

 * komeda_plane_atomic_check - build input data flow

 * @plane: DRM plane

 * @state: the plane state object

 *

 * RETURNS:

 * Zero for success or -errno

 crtc is inactive, skip the resource assignment */

/* plane doesn't represent a real HW, so there is no HW update for plane.

 * komeda handles all the HW update in crtc->atomic_flush

 for komeda, which is pipeline can be share between crtcs */

 use Layer0 as primary */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2019 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 10bit precision YUV2RGB matrix */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 0xA4 is WO register */

/* On D71, we are using the global line size. From D32, every component have

 * a line size register to indicate the fifo size.

 if input is not active, set hw input_id(0) to disable it */

 afbc 1.2 wants payload, afbc 1.0/1.1 wants end_addr */

 these fmt support MPGE/JPEG both, here perfer JPEG*/

 D32 or newer product */

 D71 4K */

 D71 2K */

 rich layer is 4K configuration */

		/* Besides clearing the input ID to zero, D71 compiz also has

		 * input enable bit in CU_INPUTx_CONTROL which need to be

		 * cleared.

	/* for right part, HW only sample the valid pixel which means the pixels

	 * in left_crop will be jumpped, and the first sample pixel is:

	 *

	 * dst_a = st->total_hsize_out - st->hsize_out + st->left_crop + 0.5;

	 *

	 * Then the corresponding texel in src is:

	 *

	 * h_delta_phase = st->total_hsize_in / st->total_hsize_out;

	 * src_a = dst_A * h_delta_phase;

	 *

	 * and h_init_phase is src_a deduct the real source start src_S;

	 *

	 * src_S = st->total_hsize_in - st->hsize_in;

	 * h_init_phase = src_a - src_S;

	 *

	 * And HW precision for the initial/delta_phase is 16:16 fixed point,

	 * the following is the simplified formula

 If we use the hardware splitter we shouldn't set SC_CTRL_LS */

	/* D71 downscaling must satisfy the following equation

	 *

	 *   ACLK                   h_in * v_in

	 * ------- >= ---------------------------------------------

	 *  PXLCLK     (h_total - (1 + 2 * v_in / v_out)) * v_out

	 *

	 * In only horizontal downscaling situation, the right side should be

	 * multiplied by (h_total - 3) / (h_active - 3), then equation becomes

	 *

	 *   ACLK          h_in

	 * ------- >= ----------------

	 *  PXLCLK     (h_active - 3)

	 *

	 * To avoid precision lost the equation 1 will be convert to:

	 *

	 *   ACLK             h_in * v_in

	 * ------- >= -----------------------------------

	 *  PXLCLK     (h_total -1 ) * v_out -  2 * v_in

 enable gamma */

 enable gamut */

 config color format */

 configure bs control register */

 SPDX-License-Identifier: GPL-2.0

/*

 * (C) COPYRIGHT 2018 ARM Limited. All rights reserved.

 * Author: James.Qian.Wang <james.qian.wang@arm.com>

 *

 Check error of LPU status */

 Check errors of TBU status */

 get valid input and output ids */

 probe GCU */

	/* Only the legacy HW has the periph block, the newer merges the periph

	 * into GCU

 probe PERIPHERAL in legacy HW */

		/* D71 HW doesn't update shadow registers when display output

		 * is turning off, so when we disable all pipeline components

		 * together with display output disable by one flush or one

		 * operation, the disable operation updated registers will not

		 * be flush to or valid in HW, which may leads problem.

		 * To workaround this problem, introduce a two phase disable.

		 * Phase1: Disabling components with display is on to make sure

		 *	   the disable can be flushed to HW.

		 * Phase2: Only turn-off display output.

	/* loop the register blks and probe.

	 * NOTE: d71->num_blocks includes reserved blocks.

	 * d71->num_blocks = GCU + valid blocks + reserved blocks

 exclude GCU */

 skip GCU */

   HW_ID    |        fourcc         |   layer_types |   rots    | afbc_layouts | afbc_features */

 ABGR_2101010*/

 afbc */

 ABGR_8888*/

 afbc */

 XBGB_8888 */

 BGR_888 */ 
 afbc */

 BGR 16bpp */

 afbc */

 afbc */

 YUV 444/422/420 8bit  */

 afbc */

 afbc */

 YUV 10bit*/

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 NVIDIA Corporation */

 IOMMU domain managed directly using IOMMU API */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, NVIDIA Corporation.

 copy the whole thing taking into account endianness */

 endian problems would show up right here */

 currently only version 1 is supported */

 check that the firmware size is consistent */

 request_firmware prints error if it fails */

 copy firmware image into local area. this also ensures endianness */

 parse the image data */

 setup the address of the binary data so Falcon can access it later */

 copy the data segment into Falcon internal memory */

 copy the code segment into Falcon internal memory */

 setup falcon interrupts */

 enable interface */

 boot falcon */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 NVIDIA Corporation */

 TODO check that target_offset is within bounds */

 Syncpt ref will be dropped on job release */

 Check for maximum gather size */

 Set initial class for firewall. */

 Allocate gather BO and copy gather words in. */

 Get data buffer mappings and do relocation patching. */

 Allocate host1x_job and add gathers and waits to it. */

 Map gather data for Host1x. */

 Boot engine. */

	/*

	 * job_data is now part of job reference counting, so don't release

	 * it from here.

 Submit job to hardware. */

 Return postfences to userspace and add fences to DMA reservations. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Avionic Design GmbH

 * Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.

	/*

	 * If the panel provides one or more modes, use them exclusively and

	 * ignore any other means of obtaining a mode.

		/*

		 * Don't mix nvidia,panel phandle with the graph in a

		 * device-tree.

		/*

		 * Disable the interrupt until the connector has been

		 * initialized to avoid a race in the hotplug interrupt

		 * handler.

	/*

	 * The connector is now registered and ready to receive hotplug events

	 * so the hotplug interrupt can be enabled.

	/*

	 * Create a CEC notifier for HDMI connector.

	/*

	 * The connector is going away, so the interrupt must be disabled to

	 * prevent the hotplug interrupt handler from potentially crashing.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 NVIDIA Corporation

 for ganged-mode support */

/*

 * non-burst mode with sync pulses

/*

 * non-burst mode with sync events

 XXX: pass in state into this function? */

 enable DCS commands for command mode */

 horizontal active pixels */

 horizontal sync width */

 horizontal back porch */

 horizontal front porch */

 subtract packet overhead */

 set SOL delay (for non-burst mode only) */

 TODO: implement ganged mode */

			/*

			 * For ganged mode, assume symmetric left-right mode.

 1 byte (DCS command) + pixel data */

 set SOL delay */

 SOL to valid, valid to FIFO and FIFO write delay */

 FIFO read delay */

 TODO: revisit for non-ganged mode */

		/*

		 * TODO: Support modes other than symmetrical left-right

		 * split.

	/*

	 * XXX Is this still needed? The module reset is deasserted right

	 * before this function is called.

 start calibration */

 one frame high-speed transmission timeout */

 2 ms peripheral timeout for panel */

	/*

	 * The following accesses registers of the display controller, so make

	 * sure it's only executed when the output is attached to one.

	/*

	 * The D-PHY timing fields are expressed in byte-clock cycles, so

	 * multiply the period by 8.

 enable display controller */

 enable DSI controller */

 compute byte clock */

	/*

	 * Compute bit clock and round up to the next MHz.

	/*

	 * We divide the frequency by two here, but we make up for that by

	 * setting the shift clock divider (further below) to half of the

	 * correct value.

	/*

	 * Derive pixel clock from bit clock using the shift clock divider.

	 * Note that this is only half of what we would expect, but we need

	 * that to make up for the fact that we divided the bit clock by a

	 * factor of two above.

	 *

	 * It's not clear exactly why this is necessary, but the display is

	 * not working properly otherwise. Perhaps the PLLs cannot generate

	 * frequencies sufficiently high.

 Gangsters must not register their own outputs. */

 read and parse packet header */

 maximum FIFO depth is 1920 words */

 reset underflow/overflow flags */

	/*

	 * The host FIFO has a maximum of 64 words, so larger transmissions

	 * need to use the video FIFO.

	/*

	 * For reads and messages with explicitly requested ACK, generate a

	 * BTA sequence after the transmission of the packet.

 write packet header, ECC is generated by hardware */

 write payload (if any) */

			/*

			dev_dbg(dsi->dev, "ACK\n");

			/*

			dev_dbg(dsi->dev, "ESCAPE\n");

				/*

				 * For read commands, return the number of

				 * bytes returned by the peripheral.

		/*

		 * For write commands, we have transmitted the 4-byte header

		 * plus the variable-length payload.

 make sure both DSI controllers share the same PLL */

	/*

	 * Slaves don't have a panel associated with them, so they provide

	 * merely the second channel.

	/*

	 * Assume these values by default. When a DSI peripheral driver

	 * attaches to the DSI host, the parameters will be taken from

	 * the attached device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Avionic Design GmbH

 * Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.

 slow pixel clock modes */

 high pixel clock modes */

 480p modes */

 720p modes */

 1080p modes */

 480p/576p / 25.2MHz/27MHz modes */

 720p / 74.25MHz modes */

 1080p / 148.5MHz modes */

 225/297MHz modes */

 480p/576p / 25.2MHz/27MHz modes */

 720p / 74.25MHz modes */

 1080p / 148.5MHz modes */

 225/297MHz modes */

 compute aval in 48.16 fixed point */

 It should round without any rest */

 Compute cts in 48.16 fixed point */

 Round it to the nearest integer */

 Compute the absolute error */

	/*

	 * Tegra30 and later use a slightly modified version of the register

	 * layout to accomodate for changes related to supporting HDA as the

	 * audio input source for HDMI. The source select field has moved to

	 * the SOR_AUDIO_CNTRL0 register, but the error tolerance and frames

	 * per block fields remain in the AUDIO_CNTRL0 register.

		/*

		 * Inject null samples into the audio FIFO for every frame in

		 * which the codec did not receive any samples. This applies

		 * to stereo LPCM only.

		 *

		 * XXX: This seems to be a remnant of MCP days when this was

		 * used to work around issues with monitors not being able to

		 * play back system startup sounds early. It is possibly not

		 * needed on Linux at all.

	/*

	 * On Tegra20, HDA is not a supported audio source and the source

	 * select field is part of the AUDIO_CNTRL0 register.

	/*

	 * Advertise support for High Bit-Rate on Tegra114 and later.

	/*

	 * The HDA codec will always report an ELD buffer size of 96 bytes and

	 * the HDA codec driver will check that each byte read from the buffer

	 * is valid. Therefore every byte must be written, even if no 96 bytes

	 * were parsed from EDID.

	/*

	 * Each subpack contains 7 bytes, divided into:

	 * - subpack_low: bytes 0 - 3

	 * - subpack_high: bytes 4 - 6 (with byte 7 padded to 0x00)

	/*

	 * The audio infoframe has only one set of subpack registers, so the

	 * infoframe needs to be truncated. One set of subpack registers can

	 * contain 7 bytes. Including the 3 byte header only the first 10

	 * bytes can be programmed.

	/*

	 * The following accesses registers of the display controller, so make

	 * sure it's only executed when the output is attached to one.

	/*

	 * Enable and unmask the HDA codec SCRATCH0 register interrupt. This

	 * is used for interoperability between the HDA codec driver and the

	 * HDMI driver.

 power up sequence */

 video_preamble uses h_pulse2 */

		/*

		 * Make sure that the audio format has been configured before

		 * enabling audio, otherwise we may try to divide by zero.

 TMDS CONFIG */

 start SOR */

 setup sync polarities */

 TODO: add HDCP support */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 Avionic Design GmbH

 * Copyright (C) 2013 NVIDIA Corporation

 initialize address register map */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Avionic Design GmbH

 * Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.

 XXX: parameterize? */

 XXX: parameterize? */

 XXX: parameterize? */

	/*

	 * We may not want to change the frequency of the parent clock, since

	 * it may be a parent for other peripherals. This is due to the fact

	 * that on Tegra20 there's only a single clock dedicated to display

	 * (pll_d_out0), whereas later generations have a second one that can

	 * be used to independently drive a second output (pll_d2_out0).

	 *

	 * As a way to support multiple outputs on Tegra20 as well, pll_p is

	 * typically used as the parent clock for the display controllers.

	 * But this comes at a cost: pll_p is the parent of several other

	 * peripherals, so its frequency shouldn't change out of the blue.

	 *

	 * The best we can do at this point is to use the shift clock divider

	 * and hope that the desired frequency can be matched (or at least

	 * matched sufficiently close that the panel will still work).

	/*

	 * Wrap directly-connected panel into DRM bridge in order to let

	 * DRM core to handle panel for us.

	/*

	 * Tegra devices that have LVDS panel utilize LVDS encoder bridge

	 * for converting up to 28 LCD LVTTL lanes into 5/4 LVDS lanes that

	 * go to display panel's receiver.

	 *

	 * Encoder usually have a power-down control which needs to be enabled

	 * in order to transmit data to the panel.  Historically devices that

	 * use an older device-tree version didn't model the bridge, assuming

	 * that encoder is turned ON by default, while today's DRM allows us

	 * to model LVDS encoder properly.

	 *

	 * Newer device-trees utilize LVDS encoder bridge, which provides

	 * us with a connector and handles the display panel.

	 *

	 * For older device-trees we wrapped panel into the panel-bridge.

	/*

	 * Other outputs can be attached to either display controller. The RGB

	 * outputs are an exception and work only with their parent display

	 * controller.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012-2013 Avionic Design GmbH

 * Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.

 *

 * Based on the KMS/FB CMA helpers

 *   Copyright (C) 2012 Analog Devices Inc.

 Undo the special mapping we made in fbdev probe. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, NVIDIA Corporation.

 Platform configuration */

			/*

			 * STREAMID0 is used for input/output buffers.

			 * Initialize it to SID_VIC in case context isolation

			 * is not enabled, and SID_VIC is used for both firmware

			 * and data buffers.

			 *

			 * If context isolation is enabled, it will be

			 * overridden by the SETSTREAMID opcode as part of

			 * each job.

 STREAMID1 is used for firmware loading. */

 setup clockgating registers */

 Old VIC firmware needs kernel help with setting up FCE microcode. */

	/*

	 * Inherit the DMA parameters (such as maximum segment size) from the

	 * parent host1x device.

 avoid a dangling pointer just in case this disappears */

	/*

	 * In this case we have received an IOVA from the shared domain, so we

	 * need to make sure to get the physical address so that the DMA API

	 * knows what memory pages to flush the cache for.

 inherit DMA mask from host1x parent */

 SPDX-License-Identifier: MIT

/*

 * Copyright (C) 2013-2019 NVIDIA Corporation

 * Copyright (C) 2015 Rob Clark

/**

 * drm_dp_link_add_rate() - add a rate to the list of supported rates

 * @link: the link to add the rate to

 * @rate: the rate to add

 *

 * Add a link rate to the list of supported link rates.

 *

 * Returns:

 * 0 on success or one of the following negative error codes on failure:

 * - ENOSPC if the maximum number of supported rates has been reached

 * - EEXISTS if the link already supports this rate

 *

 * See also:

 * drm_dp_link_remove_rate()

/**

 * drm_dp_link_remove_rate() - remove a rate from the list of supported rates

 * @link: the link from which to remove the rate

 * @rate: the rate to remove

 *

 * Removes a link rate from the list of supported link rates.

 *

 * Returns:

 * 0 on success or one of the following negative error codes on failure:

 * - EINVAL if the specified rate is not among the supported rates

 *

 * See also:

 * drm_dp_link_add_rate()

/**

 * drm_dp_link_update_rates() - normalize the supported link rates array

 * @link: the link for which to normalize the supported link rates

 *

 * Users should call this function after they've manually modified the array

 * of supported link rates. This function removes any stale entries, compacts

 * the array and updates the supported link rate count. Note that calling the

 * drm_dp_link_remove_rate() function already does this janitorial work.

 *

 * See also:

 * drm_dp_link_add_rate(), drm_dp_link_remove_rate()

/**

 * drm_dp_link_probe() - probe a DisplayPort link for capabilities

 * @aux: DisplayPort AUX channel

 * @link: pointer to structure in which to return link capabilities

 *

 * The structure filled in by this function can usually be passed directly

 * into drm_dp_link_power_up() and drm_dp_link_configure() to power up and

 * configure the link based on the link's capabilities.

 *

 * Returns 0 on success or a negative error code on failure.

	/*

	 * The DPCD stores the AUX read interval in units of 4 ms. There are

	 * two special cases:

	 *

	 *   1) if the TRAINING_AUX_RD_INTERVAL field is 0, the clock recovery

	 *      and channel equalization should use 100 us or 400 us AUX read

	 *      intervals, respectively

	 *

	 *   2) for DP v1.4 and above, clock recovery should always use 100 us

	 *      AUX read intervals

 Parse SUPPORTED_LINK_RATES from eDP 1.4 */

/**

 * drm_dp_link_power_up() - power up a DisplayPort link

 * @aux: DisplayPort AUX channel

 * @link: pointer to a structure containing the link configuration

 *

 * Returns 0 on success or a negative error code on failure.

 DP_SET_POWER register is only available on DPCD v1.1 and later */

	/*

	 * According to the DP 1.1 specification, a "Sink Device must exit the

	 * power saving state within 1 ms" (Section 2.5.3.1, Table 5-52, "Sink

	 * Control Field" (register 0x600).

/**

 * drm_dp_link_power_down() - power down a DisplayPort link

 * @aux: DisplayPort AUX channel

 * @link: pointer to a structure containing the link configuration

 *

 * Returns 0 on success or a negative error code on failure.

 DP_SET_POWER register is only available on DPCD v1.1 and later */

/**

 * drm_dp_link_configure() - configure a DisplayPort link

 * @aux: DisplayPort AUX channel

 * @link: pointer to a structure containing the link configuration

 *

 * Returns 0 on success or a negative error code on failure.

/**

 * drm_dp_link_choose() - choose the lowest possible configuration for a mode

 * @link: DRM DP link object

 * @mode: DRM display mode

 * @info: DRM display information

 *

 * According to the eDP specification, a source should select a configuration

 * with the lowest number of lanes and the lowest possible link rate that can

 * match the bitrate requirements of a video mode. However it must ensure not

 * to exceed the capabilities of the sink.

 *

 * Returns: 0 on success or a negative error code on failure.

 available link symbol clock rates */

 available number of lanes */

 bandwidth requirement */

			/*

			 * Capacity for this combination of lanes and rate,

			 * factoring in the ANSI 8B/10B encoding.

			 *

			 * Link rates in the DRM DP helpers are really link

			 * symbol frequencies, so a tenth of the actual rate

			 * of the link.

/**

 * DOC: Link training

 *

 * These functions contain common logic and helpers to implement DisplayPort

 * link training.

/**

 * drm_dp_link_train_init() - initialize DisplayPort link training state

 * @train: DisplayPort link training state

 write currently selected voltage-swing and pre-emphasis levels */

 write currently selected post-cursor level (if supported) */

 write link pattern */

 start clock recovery using training pattern 1 */

 start channel equalization using pattern 2 or 3 */

 transmit training pattern 1 for 500 microseconds */

 transmit training pattern 2 or 3 for 500 microseconds */

/**

 * drm_dp_link_train() - perform DisplayPort link training

 * @link: a DP link object

 *

 * Uses the context stored in the DP link object to perform link training. It

 * is expected that drivers will call drm_dp_link_probe() to obtain the link

 * capabilities before performing link training.

 *

 * If the sink supports fast link training (no AUX CH handshake) and valid

 * training settings are available, this function will try to perform fast

 * link training and fall back to full link training on failure.

 *

 * Returns: 0 on success or a negative error code on failure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 NVIDIA Corporation

 Tegra has 4x4 byte DP AUX transmit and receive FIFOs. */

	/*

	 * Allow zero-sized messages only for I2C, in which case they specify

	 * address-only transactions.

 For non-zero-sized messages, set the CMDLEN field. */

 start transaction */

 read status and clear errors */

			/*

			 * There might be a smarter way to do this, but since

			 * the DP helpers will already retry transactions for

			 * an -EBUSY return value, simply reuse that instead.

 clear interrupts */

 TODO: handle this */

	/*

	 * Assume that by default the DPAUX/I2C pads will be used for HDMI,

	 * so power them up and configure them in I2C mode.

	 *

	 * The DPAUX code paths reconfigure the pads in AUX mode, but there

	 * is no possibility to perform the I2C mode configuration in the

	 * HDMI path.

 enable and clear all interrupts */

 make sure pads are powered down when not in use */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 NVIDIA Corporation

/*

 * Default D-PHY timings based on MIPI D-PHY specification. Derived from the

 * valid ranges specified in Section 6.9, Table 14, Page 40 of the D-PHY

 * specification (v1.2) with minor adjustments.

	/*

	 * The MIPI D-PHY specification (Section 6.9, v1.2, Table 14, Page 40)

	 * contains this formula as:

	 *

	 *     T_HS-TRAIL = max(n * 8 * period, 60 + n * 4 * period)

	 *

	 * where n = 1 for forward-direction HS mode and n = 4 for reverse-

	 * direction HS mode. There's only one setting and this function does

	 * not parameterize on anything other that period, so this code will

	 * assumes that reverse-direction HS mode is supported and uses n = 4.

/*

 * Validate D-PHY timing according to MIPI D-PHY specification (v1.2, Section

 * Section 6.9 "Global Operation Timing Parameters").

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2010-2020 NVIDIA Corporation */

 IMM cannot reasonably be used to write a pointer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NVIDIA Tegra DRM GEM helper functions

 *

 * Copyright (C) 2012 Sascha Hauer, Pengutronix

 * Copyright (C) 2013-2015 NVIDIA CORPORATION, All rights reserved.

 *

 * Based on the GEM/CMA helpers

 *

 * Copyright (c) 2011 Samsung Electronics Co., Ltd.

 XXX move this into lib/scatterlist.c? */

	/*

	 * If we've manually mapped the buffer object through the IOMMU, make

	 * sure to return the IOVA address of our mapping.

	 *

	 * Similarly, for buffers that have been allocated by the DMA API the

	 * physical address can be used for devices that are not attached to

	 * an IOMMU. For these devices, callers must pass a valid pointer via

	 * the @phys argument.

	 *

	 * Imported buffers were also already mapped at import time, so the

	 * existing mapping can be reused.

	/*

	 * If we don't have a mapping for this buffer yet, return an SG table

	 * so that host1x can do the mapping for us via the DMA API.

		/*

		 * If the buffer object was allocated from the explicit IOMMU

		 * API code paths, construct an SG table from the pages.

		/*

		 * If the buffer object already has an SG table but no pages

		 * were allocated for it, it means the buffer was imported and

		 * the SG table needs to be copied to avoid overwriting any

		 * other potential users of the original SG table.

		/*

		 * If the buffer object had no pages allocated and if it was

		 * not imported, it had to be allocated with the DMA API, so

		 * the DMA API helper can be used.

		/*

		 * Clear the VM_PFNMAP flag that was set by drm_gem_mmap(),

		 * and set the vm_pgoff (used as a fake buffer offset by DRM)

		 * to 0 as we want to map the whole buffer.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012-2013, NVIDIA Corporation.

 initialize address register map */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2017 NVIDIA CORPORATION.  All rights reserved.

 check for the sector layout bit */

		/*

		 * If we're not attached to a domain, we already stored the

		 * physical address when the buffer was allocated. If we're

		 * part of a group that's shared between all display

		 * controllers, we've also already mapped the framebuffer

		 * through the SMMU. In both cases we can short-circuit the

		 * code below and retrieve the stored IOV address.

			/*

			 * The display controller needs contiguous memory, so

			 * fail if the buffer is discontiguous and we fail to

			 * map its SG table to a single contiguous chunk of

			 * I/O virtual memory.

	/*

	 * Note that real memory bandwidth vary depending on format and

	 * memory layout, we are not taking that into account because small

	 * estimation error isn't important since bandwidth is rounded up

	 * anyway.

		/*

		 * Sub-sampling is relevant for chroma planes only and vertical

		 * readouts are not cached, hence only horizontal sub-sampling

		 * matters.

 average bandwidth in kbytes/sec */

 mode.clock in kHz, peak bandwidth in kbytes/sec */

	/*

	 * Tegra30/114 Memory Controller can't interleave DC memory requests

	 * for the tiled windows because DC uses 16-bytes atom, while DDR3

	 * uses 32-bytes atom.  Hence there is x2 memory overfetch for tiled

	 * framebuffer and DDR3 on these SoCs.

 ICC bandwidth in kbytes/sec */

 Propagate errors from allocation or locking failures. */

 Check plane state for visibility and calculate clipping bounds */

 assume no swapping of fetched data */

/*

 * This is applicable to Tegra20 and Tegra30 only where the opaque formats can

 * be emulated using the alpha formats and alpha blending disabled.

 check if zpos / transparency changed */

 include all sibling planes into this commit */

 skip this plane and planes on different CRTCs */

 skip this plane and planes on different CRTCs */

		/*

		 * Missing framebuffer means that plane is disabled, in this

		 * case mark B / C window as top to be able to differentiate

		 * windows indices order in regards to zPos for the middle

		 * window X / Y registers programming.

	/*

	 * If planes zpos / transparency changed, sibling planes blending

	 * state may require adjustment and in this case they will be included

	 * into this atom commit, otherwise blending state is unchanged.

	/*

	 * All planes are now in the atomic state, walk them up and update

	 * transparency state for each plane.

 skip planes on different CRTCs */

		/*

		 * There is no need to update blending state for the disabled

		 * plane.

 plane B on T20/30 has a dedicated memory client for a 6-tap vertical filter */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 NVIDIA Corporation

 0 */,

 0x34 */

 0 */,

 0x34 */

 for HDMI 2.0 */

/*

 * Implementing ->set_parent() here isn't really required because the parent

 * will be explicitly selected in the driver code via the DP_CLK_SEL mux in

 * the SOR_CLK_CNTRL register. This is primarily for compatibility with the

 * Tegra186 and later SoC generations where the BPMP implements this clock

 * and doesn't expose the mux via the common clock framework.

 Tegra only supports RBR, HBR and HBR2 */

	/*

	 * Clear or set the PD_TXD bit corresponding to each lane, depending

	 * on whether it is used or not.

 start lane sequencer */

 power down all lanes */

 start lane sequencer */

 pre-charge all used lanes */

 enable pad calibration logic */

 disable pad calibration logic */

 configure link speed and lane count */

 configure load pulse position adjustment */

 use alternate scrambler reset for eDP */

 power up and pre-charge lanes */

 period */

 duty cycle */

 clock source: PCLK */

 wake up in normal mode */

 attach */

 wait for head to wake up */

 number of link clocks per line */

 ratio between input and output */

 precision factor */

 fraction < 0.5 */

 1/fraction */

 round up */

 compute the number of symbols per horizontal blanking interval */

 compute the number of symbols per vertical blanking interval */

	/*

	 * TODO: The video timing programming below doesn't seem to match the

	 * register definitions.

 sync end = sync width - 1 */

 blank end = sync end + back porch */

 blank start = blank end + active */

 XXX interlacing support */

 switch to safe mode */

 go to sleep */

 detach */

 switch to safe parent clock */

	/*

	 * For HBR2 modes, the SOR brick needs to use the x20 multiplier, so

	 * the pixel clock must be corrected accordingly.

	/*

	 * Each subpack contains 7 bytes, divided into:

	 * - subpack_low: bytes 0 - 3

	 * - subpack_high: bytes 4 - 6 (with byte 7 padded to 0x00)

 disable AVI infoframe */

 enable AVI infoframe */

	/*

	 * The HDA codec will always report an ELD buffer size of 96 bytes and

	 * the HDA codec driver will check that each byte read from the buffer

	 * is valid. Therefore every byte must be written, even if no 96 bytes

	 * were parsed from EDID.

	/*

	 * Enable and unmask the HDA codec SCRATCH0 register interrupt. This

	 * is used for interoperability between the HDA codec driver and the

	 * HDMI/DP driver.

 select HDA audio input */

 inject null samples */

 enable advertising HBR capability */

 enable HW CTS */

 allow packet to be sent */

 reset N counter and enable lookup */

 disable display to SOR clock */

 switch to safe parent clock */

 SOR pad PLL stabilization time */

 program the reference clock */

 XXX not in TRM */

	/*

	 * Switch the pad clock to the DP clock. Note that we cannot actually

	 * do this because Tegra186 and later don't support clk_set_parent()

	 * on the sorX_pad_clkout clocks. We already do the equivalent above

	 * using the DP_CLK_SEL mux of the SOR_CLK_CNTRL register.

 switch the SOR clock to the pad clock */

 switch the output clock to the parent pixel clock */

 adjust clock rate for HDMI 2.0 modes */

 XXX is this the proper check? */

 H_PULSE2 setup */

 infoframe setup */

 XXX HDMI audio support not implemented yet */

 use single TMDS protocol */

 power up pad calibration */

 production settings */

 XXX not in TRM */

 power down pad calibration */

 miscellaneous display controller settings */

 XXX set display head owner */

 configure dynamic range of output */

 configure colorspace */

 program preamble timing in SOR (XXX) */

 enable display to SOR clock and generate HDMI preamble */

	/*

	 * Do not attempt to power down a DP link if we're not connected since

	 * the AUX transactions would just be timing out.

 switch to safe parent clock */

 switch to safe parent clock */

 XXX not in TRM */

 XXX not in TRM */

 XXX not in TRM */

	/*

	 * Switch the pad clock to the DP clock. Note that we cannot actually

	 * do this because Tegra186 and later don't support clk_set_parent()

	 * on the sorX_pad_clkout clocks. We already do the equivalent above

	 * using the DP_CLK_SEL mux of the SOR_CLK_CNTRL register.

 switch the SOR clock to the pad clock */

 switch the output clock to the parent pixel clock */

 use DP-A protocol */

 enable port */

 compute configuration */

 CSTM (LVDS, link A/B, upper) */

 PWM setup */

 attach and wake up */

	/*

	 * XXX: Remove this reset once proper hand-over from firmware to

	 * kernel is possible.

 Tegra124 and Tegra132 have lanes 0 and 2 swapped. */

		/*

		 * override the default that we already set for Tegra210 and

		 * earlier

 fall back to default per-SoC XBAR configuration */

 copy cells to SOR XBAR configuration */

		/*

		 * No need to keep this around since we only use it as a check

		 * to see if a panel is connected (eDP) or not (DP).

		/*

		 * At this point, the reset control is most likely being used

		 * by the generic power domain implementation. With any luck

		 * the power domain will have taken care of resetting the SOR

		 * and we don't have to do anything.

		/*

		 * For backwards compatibility with Tegra210 device trees,

		 * fall back to the old clock name "source" if the new "out"

		 * clock is not available.

 fall back to the module clock on SOR0 (eDP/LVDS only) */

	/*

	 * Starting with Tegra186, the BPMP provides an implementation for

	 * the pad output clock, so we have to look it up from device tree.

		/*

		 * If the pad output clock is not available, then we assume

		 * we're on Tegra210 or earlier and have to provide our own

		 * implementation.

	/*

	 * The bootloader may have set up the SOR such that it's module clock

	 * is sourced by one of the display PLLs. However, that doesn't work

	 * without properly having set up other bits of the SOR.

	/*

	 * On Tegra210 and earlier, provide our own implementation for the

	 * pad output clock.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Avionic Design GmbH

 * Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.

 Reads the active copy of a register. */

/*

 * Double-buffered registers have two copies: ASSEMBLY and ACTIVE. When the

 * *_ACT_REQ bits are set the ASSEMBLY copy is latched into the ACTIVE copy.

 * Latching happens mmediately if the display controller is in STOP mode or

 * on the next frame boundary otherwise.

 *

 * Triple-buffered registers have three copies: ASSEMBLY, ARM and ACTIVE. The

 * ASSEMBLY copy is latched into the ARM copy immediately after *_UPDATE bits

 * are written. When the *_ACT_REQ bits are written, the ARM copy is latched

 * into the ACTIVE copy, either immediately if the display controller is in

 * STOP mode, or at the next frame boundary otherwise.

 disable blending for non-overlapping case */

		/*

		 * Since custom fix-weight blending isn't utilized and weight

		 * of top window is set to max, we can enforce dependent

		 * blending which in this case results in transparent bottom

		 * window if top window is opaque and if top window enables

		 * alpha blending, then bottom window is getting alpha value

		 * of 1 minus the sum of alpha components of the overlapping

		 * plane.

		/*

		 * The region where three windows overlap is the intersection

		 * of the two regions where two windows overlap. It contributes

		 * to the area if all of the windows on top of it have an alpha

		 * component.

		/*

		 * Enable alpha blending if pixel format has an alpha

		 * component.

		/*

		 * If any of the windows on top of this window is opaque, it

		 * will completely conceal this window within that area. If

		 * top window has an alpha component, it is blended over the

		 * bottom window.

			/*

			 * When both middle and topmost windows have an alpha,

			 * these windows a mixed together and then the result

			 * is blended over the bottom window.

		/*

		 * If window B / C is topmost, then X / Y registers are

		 * matching the order of blending[...] state indices,

		 * otherwise a swap is required.

	/*

	 * For YUV planar modes, the number of bytes per pixel takes into

	 * account only the luma component and therefore is 1.

	/*

	 * For DDA computations the number of bytes per pixel for YUV planar

	 * modes needs to take into account all Y, U and V components.

			/*

			 * No need to handle this here because ->atomic_check

			 * will already have filtered it out.

 setup default colorspace conversion coefficients */

		/*

		 * Enable horizontal 6-tap filter and set filtering

		 * coefficients to the default values defined in TRM.

		/*

		 * Enable vertical 2-tap filter and set filtering

		 * coefficients to the default values defined in TRM.

 non-native formats */

 new on Tegra114 */

 new on Tegra114 */

 new on Tegra124 */

 no need for further checks if the plane is being disabled */

	/*

	 * Tegra20 and Tegra30 are special cases here because they support

	 * only variants of specific formats with an alpha component, but not

	 * the corresponding opaque formats. However, the opaque formats can

	 * be emulated by disabling alpha blending for the plane.

	/*

	 * Older userspace used custom BO flag in order to specify the Y

	 * reflection, while modern userspace uses the generic DRM rotation

	 * property in order to achieve the same result.  The legacy BO flag

	 * duplicates the DRM rotation property when both are set.

	/*

	 * Tegra doesn't support different strides for U and V planes so we

	 * error out if the user tries to display a framebuffer with such a

	 * configuration.

 rien ne va plus */

 rien ne va plus */

 copy from state */

		/*

		 * Tegra uses a shared stride for UV planes. Framebuffers are

		 * already checked for this in the tegra_plane_atomic_check()

		 * function, so it's safe to ignore the V-plane pitch here.

	/*

	 * Ideally this would use drm_crtc_mask(), but that would require the

	 * CRTC to already be in the mode_config's list of CRTCs. However, it

	 * will only be added to that list in the drm_crtc_init_with_planes()

	 * (in tegra_dc_init()), which in turn requires registration of these

	 * planes. So we have ourselves a nice little chicken and egg problem

	 * here.

	 *

	 * We work around this by manually creating the mask from the number

	 * of CRTCs that have been registered, and should therefore always be

	 * the same as drm_crtc_index() after registration.

 Always use window A as primary window */

 no need for further checks if the plane is being disabled */

 scaling not supported for cursor */

 only square cursors supported */

 rien ne va plus */

	/*

	 * Legacy display supports hardware clipping of the cursor, but

	 * nvdisplay relies on software to clip the cursor to the screen.

 enable cursor and set blend mode */

 nvdisplay relies on software for clipping */

 position the cursor */

 rien ne va plus */

	/*

	 * This index is kind of fake. The cursor isn't a regular plane, but

	 * its update and activation request bits in DC_CMD_STATE_CONTROL do

	 * use the same programming. Setting this fake index here allows the

	 * code in tegra_add_plane_state() to do the right thing without the

	 * need to special-casing the cursor plane.

 non-native formats */

 planar formats */

 new on Tegra114 */

 planar formats */

 new on Tegra114 */

 new on Tegra124 */

 planar formats */

				/*

				 * Choose the first shared plane owned by this

				 * head as the primary plane.

 XXX vblank syncpoints don't work with nvdisplay yet */

 fallback to software emulated VBLANK counter */

/**

 * tegra_dc_state_setup_clock - check clock settings and store them in atomic

 *     state

 * @dc: display controller

 * @crtc_state: CRTC atomic state

 * @clk: parent clock for display controller

 * @pclk: pixel clock

 * @div: shift clock divider

 *

 * Returns:

 * 0 on success or a negative error-code on failure.

	/*

	 * Outputs may not want to change the parent clock rate. This is only

	 * relevant to Tegra20 where only a single display PLL is available.

	 * Since that PLL would typically be used for HDMI, an internal LVDS

	 * panel would need to be driven by some other clock such as PLL_P

	 * which is shared with other peripherals. Changing the clock rate

	 * should therefore be avoided.

 stop the display controller */

		/*

		 * When CRTC is disabled on DPMS, the state of attached planes

		 * is kept unchanged. Hence we need to enforce removal of the

		 * bandwidths from the ICC paths.

		/*

		 * We're iterating over the global atomic state and it contains

		 * planes from another CRTC, hence we need to filter out the

		 * planes unrelated to this CRTC.

		/*

		 * See the comment related to !crtc->state->active above,

		 * which explains why bandwidths need to be updated when

		 * CRTC is turning ON.

		/*

		 * During the preparation phase (atomic_begin), the memory

		 * freq should go high before the DC changes are committed

		 * if bandwidth requirement goes up, otherwise memory freq

		 * should to stay high if BW requirement goes down.  The

		 * opposite applies to the completion phase (post_commit).

		/*

		 * Ignore the return value, there isn't anything useful to do

		 * in case this fails.

	/*

	 * This should really be part of the RGB encoder driver, but clearing

	 * these bits has the side-effect of stopping the display controller.

	 * When that happens no VBLANK interrupts will be raised. At the same

	 * time the encoder is disabled before the display controller, so the

	 * above code is always going to timeout waiting for the controller

	 * to go idle.

	 *

	 * Given the close coupling between the RGB encoder and the display

	 * controller doing it here is still kind of okay. None of the other

	 * encoder drivers require these bits to be cleared.

	 *

	 * XXX: Perhaps given that the display controller is switched off at

	 * this point anyway maybe clearing these bits isn't even useful for

	 * the RGB encoder?

 initialize display controller */

 initialize timer */

 apply PLL and pixel clock changes */

 program display mode */

 interlacing isn't supported yet, so disable it */

 enable underflow reporting and display red for missing pixels */

	/*

	 * Data-prefetch FIFO will easily help to overcome temporal memory

	 * pressure if other plane overlaps with the cursor plane.

		/*

		 * Ignore cursor plane overlaps because it's not practical to

		 * assume that it contributes to the bandwidth in overlapping

		 * area if window width is small.

	/*

	 * The nv-display uses shared planes.  The algorithm below assumes

	 * maximum 3 planes per-CRTC, this assumption isn't applicable to

	 * the nv-display.  Note that T124 support has additional windows,

	 * but currently they aren't supported by the driver.

	/*

	 * For overlapping planes pixel's data is fetched for each plane at

	 * the same time, hence bandwidths are accumulated in this case.

	 * This needs to be taken into account for calculating total bandwidth

	 * consumed by all planes.

	 *

	 * Here we get the overlapping state of each plane, which is a

	 * bitmask of plane indices telling with what planes there is an

	 * overlap. Note that bitmask[plane] includes BIT(plane) in order

	 * to make further code nicer and simpler.

	/*

	 * Then we calculate maximum bandwidth of each plane state.

	 * The bandwidth includes the plane BW + BW of the "simultaneously"

	 * overlapping planes, where "simultaneously" means areas where DC

	 * fetches from the planes simultaneously during of scan-out process.

	 *

	 * For example, if plane A overlaps with planes B and C, but B and C

	 * don't overlap, then the peak bandwidth will be either in area where

	 * A-and-B or A-and-C planes overlap.

	 *

	 * The plane_peak_bw[] contains peak memory bandwidth values of

	 * each plane, this information is needed by interconnect provider

	 * in order to set up latency allowance based on the peak BW, see

	 * tegra_crtc_update_memory_bandwidth().

		/*

		 * Note that plane's atomic check doesn't touch the

		 * total_peak_memory_bandwidth of enabled plane, hence the

		 * current state contains the old bandwidth state from the

		 * previous CRTC commit.

		/*

		 * If plane's peak bandwidth changed (for example plane isn't

		 * overlapped anymore) and plane isn't in the atomic state,

		 * then add plane to the state in order to have the bandwidth

		 * updated.

	/*

	 * Display bandwidth is allowed to go down only once hardware state

	 * is known to be armed, i.e. state was committed and VBLANK event

	 * received.

		/*

		dev_dbg(dc->dev, "%s(): frame end\n", __func__);

		/*

		dev_dbg(dc->dev, "%s(): vertical blank\n", __func__);

		/*

		dev_dbg(dc->dev, "%s(): underflow\n", __func__);

		/*

		dev_dbg(dc->dev, "%s(): overflow\n", __func__);

	/*

	 * DC has been reset by now, so VBLANK syncpoint can be released

	 * for general use.

	/*

	 * XXX do not register DCs with no window groups because we cannot

	 * assign a primary plane to them, which in turn will cause KMS to

	 * crash.

	/*

	 * Set the display hub as the host1x client parent for the display

	 * controller. This is needed for the runtime reference counting that

	 * ensures the display hub is always powered when any of the display

	 * controllers are.

 dedicate one overlay to mouse cursor */

	/*

	 * Keep track of the minimum pitch alignment across all display

	 * controllers.

 track maximum resolution */

	/*

	 * Inherit the DMA parameters (such as maximum segment size) from the

	 * parent host1x device.

 avoid a dangling pointer just in case this disappears */

 sentinel */

		/*

		 * If the nvidia,head property isn't present, try to find the

		 * correct head number by looking up the position of this

		 * display controller's node within the device tree. Assuming

		 * that the nodes are ordered properly in the DTS file and

		 * that the translation into a flattened device tree blob

		 * preserves that ordering this will actually yield the right

		 * head number.

		 *

		 * If those assumptions don't hold, this will still work for

		 * cases where only a single display controller is used.

	/*

	 * On Tegra20, DC1 requires DC0 to be taken out of reset in order to

	 * be enabled, otherwise CPU hangs on writing to CMD_DISPLAY_COMMAND /

	 * POWER_CONTROL registers during CRTC enabling.

 assert reset and disable clock */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2017 NVIDIA CORPORATION.  All rights reserved.

 new on Tegra114 */

 planar formats */

	/*

	 * The GPU sector layout is only supported on Tegra194, but these will

	 * be filtered out later on by ->format_mod_supported() on SoCs where

	 * it isn't supported.

 sentinel */

	/*

	 * XXX Enabling/disabling windowgroups needs to happen when the owner

	 * display controller is disabled. There's currently no good point at

	 * which this could be executed, so unconditionally enable all window

	 * groups for now.

 Skip orphaned window group whose parent DC is disabled */

	/*

	 * XXX Remove this once window groups can be more fine-grainedly

	 * enabled and disabled.

 Skip orphaned window group whose parent DC is disabled */

	/*

	 * This seems to happen whenever the head has been disabled with one

	 * or more windows being active. This is harmless because we'll just

	 * reassign the window to the new head anyway.

 disable watermark */

 pipe meter */

 mempool entries */

 no need for further checks if the plane is being disabled */

	/*

	 * Tegra doesn't support different strides for U and V planes so we

	 * error out if the user tries to display a framebuffer with such a

	 * configuration.

 XXX scaling is not yet supported, add a check here */

 rien ne va plus */

	/*

	 * XXX Legacy helpers seem to sometimes call ->atomic_disable() even

	 * on planes that are already disabled. Make sure we fallback to the

	 * head for this particular state instead of crashing.

 rien ne va plus */

 blending */

 scaling */

 disable compression */

	/*

	 * Physical address bit 39 in Tegra194 is used as a switch for special

	 * logic that swizzles the memory using either the legacy Tegra or the

	 * dGPU sector layout.

 XXX parameterize */

 XXX */

 XXX not supported on Tegra186 and later */

 disable gamut CSC */

 planes can be assigned to arbitrary CRTCs */

	/*

	 * The display hub display clock needs to be fed by the display clock

	 * with the highest frequency to ensure proper functioning of all the

	 * displays.

	 *

	 * Note that this isn't used before Tegra186, but it doesn't hurt and

	 * conditionalizing it would make the code less clean.

 XXX: enable clock across reset? */

 sentinel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Avionic Design GmbH

 * Copyright (C) 2012-2016 NVIDIA CORPORATION.  All rights reserved.

 We don't yet support other than one syncpt_incr struct per submit */

 We don't yet support waitchks */

	/*

	 * Track referenced BOs so that they can be unreferenced after the

	 * submission is complete.

 reuse as an iterator later */

		/*

		 * The maximum number of CDMA gather fetches is 16383, a higher

		 * value means the words count is malformed.

		/*

		 * Gather buffer base address must be 4-bytes aligned,

		 * unaligned offset is malformed and cause commands stream

		 * corruption on the buffer address relocation.

 copy and resolve relocations from submit */

		/*

		 * The unaligned cmdbuf offset will cause an unaligned write

		 * during of the relocations patching, corrupting the commands

		 * stream.

 Syncpoint ref will be dropped on job release. */

	/*

	 * When MLOCKs are implemented, change to allocate a shared channel

	 * only when MLOCKs are disabled.

	/*

	 * If the host1x client is already attached to an IOMMU domain that is

	 * not the shared IOMMU domain, don't try to attach it to a different

	 * domain. This allows using the IOMMU-backed DMA API.

		/*

		 * Devices that are part of the same group may no longer be

		 * attached to a domain at this point because their group may

		 * have been detached by an earlier client.

		/*

		 * Many units only support 32-bit addresses, even on 64-bit

		 * SoCs. If there is no IOMMU to translate into a 32-bit IO

		 * virtual address space, force allocations to be in the

		 * lower 32-bit range.

		/*

		 * If IOMMU is disabled, devices address physical memory

		 * directly.

	/*

	 * If the Tegra DRM clients are backed by an IOMMU, push buffers are

	 * likely to be allocated beyond the 32-bit boundary if sufficient

	 * system memory is available. This is problematic on earlier Tegra

	 * generations where host1x supports a maximum of 32 address bits in

	 * the GATHER opcode. In this case, unless host1x is behind an IOMMU

	 * as well it won't be able to process buffers allocated beyond the

	 * 32-bit boundary.

	 *

	 * The DMA API will use bounce buffers in this case, so that could

	 * perhaps still be made to work, even if less efficient, but there

	 * is another catch: in order to perform cache maintenance on pages

	 * allocated for discontiguous buffers we need to map and unmap the

	 * SG table representing these buffers. This is fine for something

	 * small like a push buffer, but it exhausts the bounce buffer pool

	 * (typically on the order of a few MiB) for framebuffers (many MiB

	 * for any modern resolution).

	 *

	 * Work around this by making sure that Tegra DRM clients only use

	 * an IOMMU if the parent host1x also uses an IOMMU.

	 *

	 * Note that there's still a small gap here that we don't cover: if

	 * the DMA API is backed by an IOMMU there's no way to control which

	 * device is attached to an IOMMU and which isn't, except via wiring

	 * up the device tree appropriately. This is considered an problem

	 * of integration, so care must be taken for the DT to be consistent.

	/*

	 * Tegra20 and Tegra30 don't support addressing memory beyond the

	 * 32-bit boundary, so the regular GATHER opcodes will always be

	 * sufficient and whether or not the host1x is attached to an IOMMU

	 * doesn't matter.

	/*

	 * Now that all display controller have been initialized, the maximum

	 * supported resolution is known and the bitmask for horizontal and

	 * vertical bitfields can be computed.

 syncpoints are used for full 32-bit hardware VBLANK counters */

 sentinel */ }

 SPDX-License-Identifier: MIT

/*

 * Copyright (C) 2019 NVIDIA Corporation

 channels are encoded as n - 1 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Red Hat

 *

 * based in parts on udlfb.c:

 * Copyright (C) 2009 Roberto De Ioris <roberto@unbit.it>

 * Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>

 * Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>

 -BULK_SIZE as per usb-skeleton. Can we get full page and avoid overhead? */

 vendor specific */

 descriptor length */

 vendor descriptor type */

 version (2 bytes) */

 length after type */

 the fixed header we've already parsed */

 max_area */

 allow udlfb to load for now even if firmware unrecognized */

/*

 * Need to ensure a channel is selected before submitting URBs

 sync/async unlink faults aren't errors */

 reset to actual */

	/*

	 * When using fb_defio, we deadlock if up() is called

	 * while another is waiting. So queue to another process.

 keep waiting and freeing, until we've got 'em all */

 have reserved one with sem */

 Free each separately allocated piece */

 urb->transfer_buffer_length set to actual before submit */

 Wait for an in-flight buffer to complete and get re-queued */

 reserved one with limit_sem */

 set to actual payload len */

 because no one else will */

 not an error */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Red Hat

 * based in parts on udlfb.c:

 * Copyright (C) 2009 Roberto De Ioris <roberto@unbit.it>

 * Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>

 * Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>

/*

 * Trims identical data from front and back of line

 * Sets new front buffer address and width

 * And returns byte count of identical pixels

 * Assumes CPU natural alignment (unsigned long)

 * for back and front buffer ptrs and width

/*

 * Render a command stream for an encoded horizontal line segment of pixels.

 *

 * A command buffer holds several commands.

 * It always begins with a fresh command header

 * (the protocol doesn't require this, but we enforce it to allow

 * multiple buffers to be potentially encoded and sent in parallel).

 * A single command encodes one contiguous horizontal line of pixels

 *

 * The function relies on the client to do all allocation, so that

 * rendering can be done directly to output buffers (e.g. USB URBs).

 * The function fills the supplied command buffer, providing information

 * on where it left off, so the client may call in again with additional

 * buffers if the line will take several buffers to complete.

 *

 * A single command can transmit a maximum of 256 pixels,

 * regardless of the compression ratio (protocol design limit).

 * To the hardware, 0 for a size byte means 256

 *

 * Rather than 256 pixel commands which are either rl or raw encoded,

 * the rlx command simply assumes alternating raw and rl spans within one cmd.

 * This has a slightly larger header overhead, but produces more even results.

 * It also processes all data (read and write) in a single pass.

 * Performance benchmarks of common cases show it having just slightly better

 * compression than 256 pixel raw or rle commands, with similar CPU consumpion.

 * But for very rl friendly data, will compress not quite as well.

  we'll know this later */

  we'll know this later */

 go back and fill in raw pixel count */

 immediately after raw data is repeat byte */

 Then start another raw pixel span */

 finalize last RAW span */

 undo unused byte */

 Fill leftover bytes with no-ops */

/*

 * There are 3 copies of every pixel: The front buffer that the fbdev

 * client renders to, the actual framebuffer across the USB bus in hardware

 * (that we can only write to, slowly, and can never read), and (optionally)

 * our shadow copy that tracks what's been sent to that hardware buffer.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Red Hat

 * based in parts on udlfb.c:

 * Copyright (C) 2009 Roberto De Ioris <roberto@unbit.it>

 * Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>

 * Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>

 cleanup previous edid */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Red Hat

/*

 * FIXME: Dma-buf sharing requires DMA support by the importing device.

 *        This function is a workaround to make USB devices work as well.

 *        See todo.rst for how to fix the issue in the dma-buf framework.

 GEM hooks */

/*

 * There are many DisplayLink-based graphics products, all with unique PIDs.

 * So we match on DisplayLink's VID + Vendor-Defined Interface Class (0xff)

 * We also require a match on SubClass (0x00) and Protocol (0x00),

 * which is compatible with all known USB 2.0 era graphics chips and firmware,

 * but allows DisplayLink to increment those for any future incompatible chips

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Red Hat

 *

 * based in parts on udlfb.c:

 * Copyright (C) 2009 Roberto De Ioris <roberto@unbit.it>

 * Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>

 * Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>

/*

 * All DisplayLink bulk operations start with 0xAF, followed by specific code

 * All operations are written to buffers which then later get sent to device

 the base pointer is 16 bits wide, 0x20 is hi byte. */

/*

 * DisplayLink HW has separate 16bpp and 8bpp framebuffers.

 * In 24bpp modes, the low 323 RGB bits go in the 8bpp framebuffer

/*

 * This is kind of weird because the controller takes some

 * register values in a different byte order than other registers.

/*

 * LFSR is linear feedback shift register. The reason we have this is

 * because the display controller needs to minimize the clock depth of

 * various counters used in the display path. So this code reverses the

 * provided value into the lfsr16 value by counting backwards to get

 * the value that needs to be set in the hardware comparator to get the

 * same actual count. This makes sense once you read above a couple of

 * times and think about it from a hardware perspective.

 This is the lfsr value that the hw starts with */

/*

 * This does LFSR conversion on the value that is to be written.

 * See LFSR explanation above for more detail.

/*

 * This takes a standard fbdev screeninfo struct and all of its monitor mode

 * details and converts them into the DisplayLink equivalent register commands.

  ERR(vreg(dev,               0x00, (color_depth == 16) ? 0 : 1));

  ERR(vreg_lfsr16(dev,        0x01, xDisplayStart));

  ERR(vreg_lfsr16(dev,        0x03, xDisplayEnd));

  ERR(vreg_lfsr16(dev,        0x05, yDisplayStart));

  ERR(vreg_lfsr16(dev,        0x07, yDisplayEnd));

  ERR(vreg_lfsr16(dev,        0x09, xEndCount));

  ERR(vreg_lfsr16(dev,        0x0B, hSyncStart));

  ERR(vreg_lfsr16(dev,        0x0D, hSyncEnd));

  ERR(vreg_big_endian(dev,    0x0F, hPixels));

  ERR(vreg_lfsr16(dev,        0x11, yEndCount));

  ERR(vreg_lfsr16(dev,        0x13, vSyncStart));

  ERR(vreg_lfsr16(dev,        0x15, vSyncEnd));

  ERR(vreg_big_endian(dev,    0x17, vPixels));

  ERR(vreg_little_endian(dev, 0x1B, pixelClock5KHz));



  ERR(vreg(dev,               0x1F, 0));



  ERR(vbuf(dev, WRITE_VIDREG_UNLOCK, DSIZEOF(WRITE_VIDREG_UNLOCK)));

 x display start */

 x display end */

 y display start */

 y display end */

 x end count is active + blanking - 1 */

 libdlo hardcodes hsync start to 1 */

 hsync end is width of sync pulse + 1 */

 hpixels is active pixels */

 yendcount is vertical active + vertical blanking */

 libdlo hardcodes vsync start to 0 */

 vsync end is width of vsync pulse */

 vpixels is active pixels */

 copy */

 from addr */

 one pixel */

 to address */

 TODO: Use mapping abstraction properly */

 Send partial buffer remaining before exiting */

/*

 * Simple display pipeline

	/* This first section has to do with setting the base address on the

	 * controller associated with the display. There are 2 base

	 * pointers, currently, we only use the 16 bpp segment.

 set base for 16bpp segment to 0 */

 set base for 8bpp segment to end of fb */

 enable display */

/*

 * Modesetting

 SPDX-License-Identifier: GPL-2.0+

/*

 * i.MX drm driver - Television Encoder (TVEv2)

 *

 * Copyright (C) 2013 Philipp Zabel, Pengutronix

 TVE_COM_CONF_REG */

 TVE_TVDACx_CONT_REG */

 TVE_CD_CONT_REG */

 TVE_INT_CONT_REG */

 TVE_TST_MODE_REG */

 clear interrupt status register */

 cable detection irq disabled in VGA mode, enabled in TVOUT mode */

 set gain to (1 + 10/128) to provide 0.7V peak-to-peak amplitude */

 set configuration register */

 set test mode (as documented) */

 pixel clock with 2x oversampling */

 pixel clock without oversampling */

	/*

	 * FIXME

	 * we should try 4k * mode->clock first,

	 * and enable 4x oversampling for lower resolutions

 clear interrupt status register */

 this is the IPU DI clock input selector, can be parented to tve_di */

 disable cable detection for VGA mode */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * i.MX drm driver - LVDS display bridge

 *

 * Copyright (C) 2012 Sascha Hauer, Pengutronix

 Defines what is connected to the ldb, only one at a time */

 our own clock */

 parent of display clock */

 original parent of clk_sel */

 upstream clock we can adjust */

 set display clock mux to LDB input clock */

 FIXME - assumes straight connections DI0 --> CH0, DI1 --> CH1 */

 set display clock mux back to original input clock */

 Bus format description in DT overrides connector display info. */

		/*

		 * We want to add the connector whenever there is no bridge

		 * that brings its own, not only when there is a panel. For

		 * historical reasons, the ldb driver can also work without

		 * a panel.

/*

 * For a device declaring compatible = "fsl,imx6q-ldb", "fsl,imx53-ldb",

 * of_match_device will walk through this list and take the first entry

 * matching any of its compatible values. Therefore, the more generic

 * entries (in this case fsl,imx53-ldb) need to be ordered last.

 if no DDC available, fallback to hardcoded EDID */

 fallback to display-timings node */

 disable LDB by resetting the control register to POR default */

	/*

	 * There are three different possible clock mux configurations:

	 * i.MX53:  ipu1_di0_sel, ipu1_di1_sel

	 * i.MX6q:  ipu1_di0_sel, ipu1_di1_sel, ipu2_di0_sel, ipu2_di1_sel

	 * i.MX6dl: ipu1_di0_sel, ipu1_di1_sel, lcdif_sel

	 * Map them all to di0_sel...di3_sel.

		/*

		 * The output port is port@4 with an external 4-port mux or

		 * port@2 with the internal 2-port mux.

 panel ddc only if there is no bridge */

			/*

			 * If no bus format was specified in the device tree,

			 * we can still get it from the connected panel later.

 SPDX-License-Identifier: GPL-2.0

/* Copyright (C) 2011-2013 Freescale Semiconductor, Inc.

 *

 * derived from imx-hdmi.c(renamed to bridge/dw_hdmi.c now)

      pixelclk     bpp8    bpp10   bpp12 */

/*

 * Resistance term 133Ohm Cfg

 * PREEMP config 0.00

 * TX/CK level 10

pixelclk   symbol   term   vlev */

 FIXME: Hardware is capable of 266MHz, but setup data is missing. */

 FIXME: Hardware is capable of 270MHz, but setup data is missing. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * i.MX drm driver - parallel display implementation

 *

 * Copyright (C) 2012 Sascha Hauer, Pengutronix

	/*

	 * If the next bridge does not support bus format negotiation, let's

	 * use the static bus format definition (imxpd->bus_format) if it's

	 * specified, RGB888 when it's not.

 Now make sure the requested output format is supported. */

	/* set the connector's dpms to OFF so that

	 * drm_helper_connector_dpms() won't return

	 * immediately since the current state is ON

	 * at this point.

 port@1 is the output port */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * Freescale i.MX drm driver

 *

 * Copyright (C) 2011 Sascha Hauer, Pengutronix

	/*

	 * Check modeset again in case crtc_state->mode_changed is

	 * updated in plane's ->atomic_check callback.

 Assign PRG/PRE channels and check if all constrains are satisfied. */

	/*

	 * The flip done wait is only strictly required by imx-drm if a deferred

	 * plane disable is in-flight. As the core requires blocking commits

	 * to wait for the flip it is done here unconditionally. This keeps the

	 * workitem around a bit longer than required for the majority of

	 * non-blocking commits, but we accept that for the sake of simplicity.

	/*

	 * If we failed to find the CRTC(s) which this encoder is

	 * supposed to be connected to, it's because the CRTC has

	 * not been registered yet.  Defer probing, and hope that

	 * the required CRTC is added later.

 FIXME: cloning support not clear, disable it all for now */

 none so far */

 Special case for DI, dev->of_node may not be set yet */

 Special case for LDB, one device for two channels */

	/*

	 * set max width and height as default value(4096x4096).

	 * this value would be used to check framebuffer size limitation

	 * at drm_mode_addfb().

 Now try and bind all our sub-components */

	/*

	 * All components are now initialised, so setup the fb helper.

	 * The fb helper takes copies of key hardware information, so the

	 * crtcs/connectors/encoders must not change after this point.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0+

/*

 * i.MX IPUv3 Graphics driver

 *

 * Copyright (C) 2011 Sascha Hauer, Pengutronix

 plane[0] is the full plane, plane[1] is the partial plane */

	/*

	 * Planes must be disabled before DC clock is removed, as otherwise the

	 * attached IDMACs will be left in undefined state, possibly hanging

	 * the IPU or even system.

	/*

	 * If we have DAC or LDB, then we need the IPU DI clock to be

	 * the same as the LDB DI clock. For TVDAC, derive the IPU DI

	 * clock from 27 MHz TVE_DI clock, but allow to divide it.

 Default to driving pixel data on negative clock edges */

 If this crtc is using the DP, add an overlay plane */

 Only enable IRQ when we actually need it to trigger work. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * i.MX IPUv3 DP Overlay Planes

 *

 * Copyright (C) 2013 Philipp Zabel, Pengutronix

 linear is supported for all planes and formats */

	/*

	 * Without a PRG the possible modifiers list only includes the linear

	 * modifier, so we always take the early return from this function and

	 * only end up here if the PRG is present.

 Ok to disable */

 nothing to check when disabling or disabled */

 full plane minimum width is 13 pixels */

	/*

	 * We support resizing active plane or changing its format by

	 * forcing CRTC mode change in plane's ->atomic_check callback

	 * and disabling all affected active planes in CRTC's ->atomic_disable

	 * callback.  The planes will be reenabled in plane's ->atomic_update

	 * callback.

		/*

		 * Multiplanar formats have to meet the following restrictions:

		 * - The (up to) three plane addresses are EBA, EBA+UBO, EBA+VBO

		 * - EBA, UBO and VBO are a multiple of 8

		 * - UBO and VBO are unsigned and not larger than 0xfffff8

		 * - Only EBA may be changed while scanout is active

		 * - The strides of U and V planes must be identical.

		/*

		 * The x/y offsets must be even in case of horizontal/vertical

		 * chroma subsampling.

 Maximum number of pixels per burst without overshooting stride */

 Maximum number of consecutive bursts without overshooting stride */

	/*

	 * Configure PRG channel and attached PRE, this changes the EBA to an

	 * internal SRAM location.

 nothing to do if PRE is used */

 disabled crtcs must not block the update */

	/*

	 * Pretend no update is pending in the non-PRE/PRG case. For this to

	 * happen, an atomic update would have to be deferred until after the

	 * start of the next frame and simultaneously interrupt latency would

	 * have to be high enough to let the atomic update finish and issue an

	 * event before the previous end of frame interrupt handler can be

	 * executed.

	/*

	 * We are going over the planes in 2 passes: first we assign PREs to

	 * planes with a tiling modifier, which need the PREs to resolve into

	 * linear. Any failure to assign a PRE there is fatal. In the second

	 * pass we try to assign PREs to linear FBs, to improve memory access

	 * patterns for them. Failure at this point is non-fatal, as we can

	 * scan out linear FBs without a PRE.

 make sure that modifier is initialized */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 RGB */

	/*

	 * The width and height after clipping.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 vblank trigger */

 CTXLD trigger */

 we care about alpha only when channel 0 is concerned */

	/*

	 * Use global alpha if pixel format does not have alpha channel or the

	 * user explicitly chose to use global alpha (i.e. alpha is not OPAQUE).

 use per-pixel alpha otherwise */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 The following sizes are in context loader entries, 8 bytes each. */

 max 65536 */

 max 65536 */

 max 65536 */

 Sizes, in entries, of the DB, SB_HP and SB_LP context regions. */

 this represents an entry in the context loader map */

 holds the sizes of DB, SB_HP and SB_LP ctx */

 protects concurent access to private data */

		/*

		 * Except for throwing an error message and clearing the status

		 * register, there's not much we can do here.

 make sure SB_LP context area comes after SB_HP */

 enable the context loader */

	/*

	 * Toggle the current context to the alternate one so that any updates

	 * in the modules' settings take place there.

 reset context region and sizes */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 CONFIG_PM_SLEEP */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 stop DPR on all channels */

 LIN, GPU_STD, GPU_SUP, VPU_YUV420, VPU_VP9 */

 PIX_SIZE_8  */

 PIX_SIZE_16 */

 PIX_SIZE_32 */

 This function will be called from interrupt context. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 stop SS */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 *

 * Scaling algorithms were contributed by Dzung Hoang <dzung.hoang@nxp.com>

 scaler coefficients generator */

/**

 * mult_q() - Performs fixed-point multiplication.

 * @A: multiplier

 * @B: multiplicand

/**

 * div_q() - Performs fixed-point division.

 * @A: dividend

 * @B: divisor

/**

 * exp_approx_q() - Compute approximation to exp(x) function using Taylor

 *		    series.

 * @x: fixed-point argument of exp function

/**

 * dcss_scaler_gaussian_filter() - Generate gaussian prototype filter.

 * @fc_q: fixed-point cutoff frequency normalized to range [0, 1]

 * @use_5_taps: indicates whether to use 5 taps or 7 taps

 * @coef: output filter coefficients

 seed coefficient scanner */

 seed gaussian filter generator */

 override phase 0 with identity filter if specified */

 normalize coef */

/**

 * dcss_scaler_filter_design() - Compute filter coefficients using

 *				 Gaussian filter.

 * @src_length: length of input

 * @dst_length: length of output

 * @use_5_taps: 0 for 7 taps per phase, 1 for 5 taps

 * @coef: output coefficients

 compute cutoff frequency */

 compute gaussian filter coefficients */

 for 4:4:4 to 4:2:2 conversion, source height should be 1 less */

 adjustments for source chroma location */

 vertical input chroma position adjustment */

			/*

			 * move chroma up to first luma line

			 * (1/4 chroma input line spacing)

			/*

			 * move chroma up to first luma line

			 * (1/2 chroma input line spacing)

 horizontal input chroma position adjustment */

 move chroma left 1/4 chroma input sample spacing */

 adjustments to chroma resolution */

 save chroma start phase */

 reverse both phase and tap orderings */

 reverse both phase and tap orderings */

 horizontal luma */

 vertical luma */

 adjust chroma resolution */

 should not happen */

 horizontal chroma */

 vertical chroma */

 horizontal RGB */

 vertical RGB */

 This function will be called from interrupt context. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 Allow CTXLD kick interrupt to be disabled when VBLANK is disabled. */

	/*

	 * Do not shut off CTXLD kick interrupt when shutting VBLANK off. It

	 * will be needed to commit the last changes, before going to suspend.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2021 Raspberry Pi

 Number of monitored counters cannot exceed HW limits. */

 Make sure all counters are valid. */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (C) 2014-2018 Broadcom */

/**

 * DOC: Broadcom V3D Graphics Driver

 *

 * This driver supports the Broadcom V3D 3.3 and 4.1 OpenGL ES GPUs.

 * For V3D 2.x support, see the VC4 driver.

 *

 * The V3D GPU includes a tiled render (composed of a bin and render

 * pipelines), the TFU (texture formatting unit), and the CSD (compute

 * shader dispatch).

	/* Note that DRM_V3D_PARAM_V3D_CORE0_IDENT0 is 0, so we need

	 * to explicitly allow it in the "the register in our

	 * parameter map" check.

/* DRM_AUTH is required on SUBMIT_CL for now, while we don't have GMP

 * protection between clients.  Note that render nodes would be

 * able to submit CLs that could access BOs from clients authenticated

 * with the master node.  The TFU doesn't use the GMP, so it would

 * need to stay DRM_AUTH until we do buffer size/offset validation.

 multicore not yet implemented */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (C) 2015-2018 Broadcom */

/**

 * DOC: V3D GEM BO management support

 *

 * Compared to VC4 (V3D 2.x), V3D 3.3 introduces an MMU between the

 * GPU and the bus, allowing us to use shmem objects for our storage

 * instead of CMA.

 *

 * Physically contiguous objects may still be imported to V3D, but the

 * driver doesn't allocate physically contiguous objects on its own.

 * Display engines requiring physically contiguous allocations should

 * look into Mesa's "renderonly" support (as used by the Mesa pl111

 * driver) for an example of how to integrate with V3D.

 *

 * Long term, we should support evicting pages from the MMU when under

 * memory pressure (thus the v3d_bo_get_pages() refcounting), but

 * that's not a high priority since our systems tend to not have swap.

/* Called DRM core on the last userspace/kernel unreference of the

 * BO.

 GPU execution may have dirtied any pages in the BO. */

/* gem_create_object function for allocating a BO struct and doing

 * early setup.

	/* So far we pin the BO in the MMU for its lifetime, so use

	 * shmem's helper for getting a lifetime sgt.

	/* Allocate the object's space in the GPU's page tables.

	 * Inserting PTEs will happen later, but the offset is for the

	 * lifetime of the BO.

 Track stats for /debug/dri/n/bo_stats. */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (C) 2014-2018 Broadcom */

	/* Set OVRTMUOUT, which means that the texture sampler uniform

	 * configuration's tmu output type field is used, instead of

	 * using the hardware default behavior based on the texture

	 * type.  If you want the default behavior, you can still put

	 * "2" in the indirect texture state's output_type field.

	/* Whenever we flush the L2T cache, we always want to flush

	 * the whole thing.

 Sets invariant state for the HW. */

		/* GFXH-1383: The SW_INIT may cause a stray write to address 0

		 * of the unit, so reset it to its power-on value here.

 XXX: only needed for safe powerdown, not reset. */

/* Invalidates the (read-only) L2C cache.  This was the L2 cache for

 * uniforms and instructions on V3D 3.2.

 Invalidates texture L2 cachelines */

	/* While there is a busy bit (V3D_L2TCACTL_L2TFLS), we don't

	 * need to wait for completion before dispatching the job --

	 * L2T accesses will be stalled until the flush has completed.

	 * However, we do need to make sure we don't try to trigger a

	 * new flush while the L2_CLEAN queue is trying to

	 * synchronously clean after a job.

/* Cleans texture L1 and L2 cachelines (writing back dirty data).

 *

 * For cleaning, which happens from the CACHE_CLEAN queue after CSD has

 * executed, we need to make sure that the clean is done before

 * signaling job completion.  So, we synchronously wait before

 * returning, and we make sure that L2 invalidates don't happen in the

 * meantime to confuse our are-we-done checks.

 Invalidates the slice caches.  These are read-only caches. */

	/* Invalidate the caches from the outside in.  That way if

	 * another CL's concurrent use of nearby memory were to pull

	 * an invalidated cacheline back in, we wouldn't leave stale

	 * data in the inner cache.

/* Takes the reservation lock on all the BOs being referenced, so that

 * at queue submit time we can update the reservations.

 *

 * We don't lock the RCL the tile alloc/state BOs, or overflow memory

 * (all of which are on exec->unref_list).  They're entirely private

 * to v3d, so we don't attach dma-buf fences to them.

/**

 * v3d_lookup_bos() - Sets up job->bo[] with the GEM objects

 * referenced by the job.

 * @dev: DRM device

 * @file_priv: DRM file for this fd

 * @job: V3D job being set up

 * @bo_handles: GEM handles

 * @bo_count: Number of GEM handles passed in

 *

 * The command validator needs to reference BOs by their index within

 * the submitted job's BO list.  This does the validation of the job's

 * BO list and reference counting for the lifetime of the job.

 *

 * Note that this function doesn't need to unreference the BOs on

 * failure, because that will happen at v3d_exec_cleanup() time.

		/* See comment on bo_index for why we have to check

		 * this.

	/* Decrement the user's timeout, in case we got interrupted

	 * such that the ioctl will be restarted.

 Asked to wait beyond the jiffie/scheduler precision? */

 put by scheduler job completion */

 XXX: Use shared fences for read-only objects. */

 Update the return sync object for the job */

 If it only supports a single signal semaphore*/

 If multiple semaphores extension is supported */

/* Get data for multiple binary semaphores synchronization. Parse syncobj

 * to be signaled when job completes (out_sync).

/* Whenever userspace sets ioctl extensions, v3d_get_extensions parses data

 * according to the extension id (name).

/**

 * v3d_submit_cl_ioctl() - Submits a job (frame) to the V3D.

 * @dev: DRM device

 * @data: ioctl argument

 * @file_priv: DRM file for this fd

 *

 * This is the main entrypoint for userspace to submit a 3D frame to

 * the GPU.  Userspace provides the binner command list (if

 * applicable), and the kernel sets up the render command list to draw

 * to the framebuffer described in the ioctl, using the command lists

 * that the 3D engine's binner will produce.

/**

 * v3d_submit_tfu_ioctl() - Submits a TFU (texture formatting) job to the V3D.

 * @dev: DRM device

 * @data: ioctl argument

 * @file_priv: DRM file for this fd

 *

 * Userspace provides the register setup for the TFU, which we don't

 * need to validate since the TFU is behind the MMU.

/**

 * v3d_submit_csd_ioctl() - Submits a CSD (texture formatting) job to the V3D.

 * @dev: DRM device

 * @data: ioctl argument

 * @file_priv: DRM file for this fd

 *

 * Userspace provides the register setup for the CSD, which we don't

 * need to validate since the CSD is behind the MMU.

	/* Note: We don't allocate address 0.  Various bits of HW

	 * treat 0 as special, such as the occlusion query counters

	 * where 0 means "disabled".

	/* Waiting for jobs to finish would need to be done before

	 * unregistering V3D.

 SPDX-License-Identifier: GPL-2.0+

 Copyright (C) 2018 Broadcom */

/**

 * DOC: Broadcom V3D scheduling

 *

 * The shared DRM GPU scheduler is used to coordinate submitting jobs

 * to the hardware.  Each DRM fd (roughly a client process) gets its

 * own scheduler entity, which will process jobs in order.  The GPU

 * scheduler will round-robin between clients to submit the next job.

 *

 * For simplicity, and in order to keep latency low for interactive

 * jobs when bulk background jobs are queued up, we submit a new job

 * to the HW only when it has completed the last one, instead of

 * filling up the CT[01]Q FIFOs with jobs.  Similarly, we use

 * drm_sched_job_add_dependency() to manage the dependency between bin and

 * render, instead of having the clients submit jobs using the HW's

 * semaphores to interlock between them.

	/* Lock required around bin_job update vs

	 * v3d_overflow_mem_work().

	/* Clear out the overflow allocation, so we don't

	 * reuse the overflow attached to a previous job.

	/* Set the current and end address of the control list.

	 * Writing the end register is what starts the job.

	/* Can we avoid this flush?  We need to be careful of

	 * scheduling, though -- imagine job0 rendering to texture and

	 * job1 reading, and them being executed as bin0, bin1,

	 * render0, render1, so that render1's flush at bin time

	 * wasn't enough.

 XXX: Set the QCFG */

	/* Set the current and end address of the control list.

	 * Writing the end register is what starts the job.

 ICFG kicks off the job. */

 CFG0 write kicks off the job. */

 block scheduler */

 get the GPU back into the init state */

 Unblock schedulers and restart their jobs. */

/* If the current address or return address have changed, then the GPU

 * has probably made progress and we should delay the reset.  This

 * could fail if the GPU got in an infinite loop in the CL, but that

 * is pretty unlikely outside of an i-g-t testcase.

	/* If we've made progress, skip reset and let the timer get

	 * rearmed.

 SPDX-License-Identifier: GPL-2.0+

 Copyright (C) 2014-2018 Broadcom */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (C) 2015 Broadcom */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (C) 2017-2018 Broadcom */

/**

 * DOC: Broadcom V3D MMU

 *

 * The V3D 3.x hardware (compared to VC4) now includes an MMU.  It has

 * a single level of page tables for the V3D's 4GB address space to

 * map to AXI bus addresses, thus it could need up to 4MB of

 * physically contiguous memory to store the PTEs.

 *

 * Because the 4MB of contiguous memory for page tables is precious,

 * and switching between them is expensive, we load all BOs into the

 * same 4GB address space.

 *

 * To protect clients from each other, we should use the GMP to

 * quickly mask out (at 128kb granularity) what pages are available to

 * each client.  This is not yet implemented.

/* Note: All PTEs for the 1MB superpage must be filled with the

 * superpage bit set.

	/* Make sure that another flush isn't already running when we

	 * start this one.

 SPDX-License-Identifier: GPL-2.0+

 Copyright (C) 2014-2018 Broadcom */

/**

 * DOC: Interrupt management for the V3D engine

 *

 * When we take a bin, render, TFU done, or CSD done interrupt, we

 * need to signal the fence for that job so that the scheduler can

 * queue up the next one and unblock any waiters.

 *

 * When we take the binner out of memory interrupt, we need to

 * allocate some new memory and pass it to the binner so that the

 * current job can make progress.

 XXX: GMP */, 256 * 1024);

	/* We lost a race, and our work task came in after the bin job

	 * completed and exited.  This can happen because the HW

	 * signals OOM before it's fully OOM, so the binner might just

	 * barely complete.

	 *

	 * If we lose the race and our work task comes in after a new

	 * bin job got scheduled, that's fine.  We'll just give them

	 * some binner pool anyway.

 Acknowledge the interrupts we're handling here. */

		/* Note that the OOM status is edge signaled, so the

		 * interrupt won't happen again until the we actually

		 * add more memory.  Also, as of V3D 4.1, FLDONE won't

		 * be reported until any OOM state has been cleared.

	/* We shouldn't be triggering these if we have GMP in

	 * always-allowed mode.

	/* V3D 4.2 wires the hub and core IRQs together, so if we &

	 * didn't see the common one then check hub for MMU IRQs.

 Acknowledge the interrupts we're handling here. */

	/* Clear any pending interrupts someone might have left around

	 * for us.

 Enable our set of interrupts, masking out any others. */

 Disable all interrupts. */

 Clear any pending interrupts we might have left. */

* Reinitializes interrupt registers when a GPU reset is performed. */

 SPDX-License-Identifier: GPL-2.0+

 Copyright (C) 2017-2018 Broadcom */

/*

 * Copyright 2006 Tungsten Graphics Inc., Bismarck, ND., USA.

 * All rights reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sub license,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE AUTHORS OR COPYRIGHT HOLDERS AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER

 * DEALINGS IN THE SOFTWARE.

/*

 * Authors: Thomas HellstrÃ¶m <thomas-at-tungstengraphics-dot-com>

 Linux specific until context tracking code gets ported to BSD */

 Last context, perform cleanup */

/* via_dma.c -- DMA support for the VIA Unichrome/Pro

 *

 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.

 * All Rights Reserved.

 *

 * Copyright 2004 Digeo, Inc., Palo Alto, CA, U.S.A.

 * All Rights Reserved.

 *

 * Copyright 2004 The Unichrome project.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sub license,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors:

 *    Tungsten Graphics,

 *    Erdi Chen,

 *    Thomas Hellstrom.

 defines for VIA 3D registers */

 VIA_REG_STATUS(0x400): Engine Status */

 Command Regulator is busy */

 2D Engine is busy */

 3D Engine is busy */

 Virtual Queue is busy */

/*

 * Free space in command buffer.

/*

 * How much does the command regulator lag behind?

/*

 * Check that the given size fits in the buffer, otherwise wait.

/*

 * Checks whether buffer head has reach the end. Rewind the ring buffer

 * when necessary.

 *

 * Returns virtual pointer to ring buffer.

	/*

	 * Running this function on AGP memory is dead slow. Therefore

	 * we run it on a temporary cacheable system memory buffer and

	 * copy it to AGP memory when ready.

	/*

	 * Small submissions somehow stalls the CPU. (AGP cache effects?)

	 * pad to greater size.

/*

 * This function is used internally by ring buffer management code.

 *

 * Returns virtual pointer to ring buffer.

/*

 * Hooks a segment of data into the tail of the ring-buffer by

 * modifying the pause address stored in the buffer itself. If

 * the regulator has already paused, restart it.

	/*

	 * If there is a possibility that the command reader will

	 * miss the new pause address and pause on the old one,

	 * In that case we need to program the new start address

	 * using PCI.

			/*

			 * There is a concern that these writes may stall the PCI bus

			 * if the GPU is not idle. However, idling the GPU first

			 * doesn't make a difference.

	/*

	 * This is the difference between where we tell the

	 * command reader to pause and where it actually pauses.

	 * This differs between hw implementation so we need to

	 * detect it.

	/*

	 * Wrap command buffer to the beginning.

	/*

	 * Now, set a trap that will pause the regulator if it tries to rerun the old

	 * command buffer. (Which may happen if via_hook_segment detecs a command regulator pause

	 * and reissues the jump command over PCI, while the regulator has already taken the jump

	 * and actually paused at the current buffer end).

	 * There appears to be no other way to detect this condition, since the hw_addr_pointer

	 * does not seem to get updated immediately when a jump occurs.

/*

 * User interface to the space and lag functions.

/*

 * Copyright 1998-2003 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2003 S3 Graphics, Inc. All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sub license,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * VIA, S3 GRAPHICS, AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER

 * DEALINGS IN THE SOFTWARE.

/* via_dmablit.c -- PCI DMA BitBlt support for the VIA Unichrome/Pro

 *

 * Copyright (C) 2005 Thomas Hellstrom, All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sub license,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 * USE OR OTHER DEALINGS IN THE SOFTWARE.

 *

 * Authors:

 *    Thomas Hellstrom.

 *    Partially based on code obtained from Digeo Inc.

/*

 * Unmaps the DMA mappings.

 * FIXME: Is this a NoOp on x86? Also

 * FIXME: What happens if this one is called and a pending blit has previously done

 * the same DMA mappings?

/*

 * Unmap a DMA mapping.

/*

 * If mode = 0, count how many descriptors are needed.

 * If mode = 1, Map the DMA pages for the device, put together and map also the descriptors.

 * Descriptors are run in reverse order by the hardware because we are not allowed to update the

 * 'next' field without syncing calls when the descriptor is already mapped.

/*

 * Function that frees up all resources for a blit. It is usable even if the

 * blit info has only been partially built as long as the status enum is consistent

 * with the actual status of the used resources.

/*

 * Fire a blit engine.

/*

 * Obtain a page pointer array and lock all pages into system memory. A segmentation violation will

 * occur here if the calling user does not have access to the submitted address.

/*

 * Allocate DMA capable memory for the blit descriptor chain, and an array that keeps track of the

 * pages we allocate. We don't want to use kmalloc for the descriptor chain because it may be

 * quite large for some blits, and pages don't need to be contiguous.

/*

 * The dmablit part of the IRQ handler. Trying to do only reasonably fast things here.

 * The rest, like unmapping and freeing memory for done blits is done in a separate workqueue

 * task. Basically the task of the interrupt handler is to submit a new blit to the engine, while

 * the workqueue task takes care of processing associated with the old blit.

		/*

		 * Clear transfer done flag.

		/*

		 * Abort transfer after one second.

/*

 * Check whether this blit is still active, performing necessary locking.

	/*

	 * Allow for handle wraparounds.

/*

 * Sync. Wait for at least three seconds for the blit to be performed.

/*

 * A timer that regularly polls the blit engine in cases where we don't have interrupts:

 * a) Broken hardware (typically those that don't have any video capture facility).

 * b) Blit abort. The hardware doesn't send an interrupt when a blit is aborted.

 * The timer and hardware IRQ's can and do work in parallel. If the hardware has

 * irqs, it will shorten the latency somewhat.

	       /*

		* Rerun handler to delete timer if engines are off, and

		* to shorten abort latency. This is a little nasty.

/*

 * Workqueue task that frees data and mappings associated with a blit.

 * Also wakes up waiting processes. Each of these tasks handles one

 * blit engine only and may not be called on each interrupt.

/*

 * Init all blit engines. Currently we use two, but some hardware have 4.

/*

 * Build all info and do all mappings required for a blit.

	/*

	 * Below check is a driver limitation, not a hardware one. We

	 * don't want to lock unused pages, and don't want to incoporate the

	 * extra logic of avoiding them. Make sure there are no.

	 * (Not a big limitation anyway.)

	/*

	 * Don't lock an arbitrary large number of pages, since that causes a

	 * DOS security hole.

	/*

	 * we allow a negative fb stride to allow flipping of images in

	 * transfer.

	/*

	 * A hardware bug seems to be worked around if system memory addresses start on

	 * 16 byte boundaries. This seems a bit restrictive however. VIA is contacted

	 * about this. Meanwhile, impose the following restrictions:

/*

 * Reserve one free slot in the blit queue. Will wait for one second for one

 * to become available. Otherwise -EBUSY is returned.

/*

 * Hand back a free slot if we changed our mind.

/*

 * Grab a free slot. Build blit info and queue a blit.

/*

 * Sync on a previously submitted blit. Note that the X server use signals extensively, and

 * that there is a very big probability that this IOCTL will be interrupted by a signal. In that

 * case it returns with -EAGAIN for the signal to be delivered.

 * The caller should then reissue the IOCTL. This is similar to what is being done for drmGetLock().

/*

 * Queue a blit and hand back a handle to be used for sync. This IOCTL may be interrupted by a signal

 * while waiting for a free slot in the blit queue. In that case it returns with -EAGAIN and should

 * be reissued. See the above IOCTL code.

/* via_irq.c

 *

 * Copyright 2004 BEAM Ltd.

 * Copyright 2002 Tungsten Graphics, Inc.

 * Copyright 2005 Thomas Hellstrom.

 * All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * BEAM LTD, TUNGSTEN GRAPHICS  AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,

 * DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER

 * DEALINGS IN THE SOFTWARE.

 *

 * Authors:

 *    Terry Barnaby <terry1@beam.ltd.uk>

 *    Keith Whitwell <keith@tungstengraphics.com>

 *    Thomas Hellstrom <unichrome@shipmail.org>

 *

 * This code provides standard DRM access to the Via Unichrome / Pro Vertical blank

 * interrupt, as well as an infrastructure to handle other interrupts of the chip.

 * The refresh rate is also calculated for video playback sync purposes.

 VIA_REG_INTERRUPT */

/*

 * Device-specific IRQs go here. This type might need to be extended with

 * the register if there are multiple IRQ control registers.

 * Currently we activate the HQV interrupts of  Unichrome Pro group A.

 Acknowledge interrupts */

 Acknowledge interrupts */

/*

 * drm_dma.h hooks

 Clear VSync interrupt regs */

 Clear bits if they're already high */

 Some magic, oh for some data sheets ! */

 Some more magic, oh for some data sheets ! */

/*

 * Copyright 1998-2003 VIA Technologies, Inc. All Rights Reserved.

 * Copyright 2001-2003 S3 Graphics, Inc. All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sub license,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * VIA, S3 GRAPHICS, AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER

 * DEALINGS IN THE SOFTWARE.

/*

 * Copyright 2005 Thomas Hellstrom. All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sub license,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE AUTHOR(S), AND/OR THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER

 * DEALINGS IN THE SOFTWARE.

 *

 * Author: Thomas Hellstrom 2005.

 *

 * Video and XvMC related functions.

/*

 * Copyright 2004 The Unichrome Project. All Rights Reserved.

 * Copyright 2005 Thomas Hellstrom. All Rights Reserved.

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sub license,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the

 * next paragraph) shall be included in all copies or substantial portions

 * of the Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL

 * THE AUTHOR(S), AND/OR THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR

 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,

 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER

 * DEALINGS IN THE SOFTWARE.

 *

 * Author: Thomas Hellstrom 2004, 2005.

 * This code was written using docs obtained under NDA from VIA Inc.

 *

 * Don't run this code directly on an AGP buffer. Due to cache problems it will

 * be very slow.

/*

 * Associates each hazard above with a possible multi-command

 * sequence. For example an address that is split over multiple

 * commands and that needs to be checked at the first command

 * that does not include any part of the address.

/*

 * Partially stolen from drm_memory.h

/*

 * Require that all AGP texture levels reside in the same AGP map which should

 * be mappable by the client. This is not a big restriction.

 * FIXME: To actually enforce this security policy strictly, drm_rmmap

 * would have to wait for dma quiescent before removing an AGP map.

 * The via_drm_lookup_agp_map call in reality seems to take

 * very little CPU time.

		/*

		 * Texture width. We don't care since we have the pitch.

		/*

		 * How many dwords per vertex ?

		/*

		 * There are some unimplemented HC_ParaTypes here, that

		 * need to be implemented if the Mesa driver is extended.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 Digital clock en*/

Tx Analog*/

Cbus Analog*/

HDMI Pll Analog*/

MIPI Analog*/

	/*

	 * At this time we only initialize 2 chips, but the lt8912 provides

	 * a third interface for the audio over HDMI configuration.

	/*

	 * edid must be read through the ddc bus but it must be

	 * given to the hdmi connector node.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020 BayLibre, SAS

 * Author: Phong LE <ple@baylibre.com>

 * Copyright (C) 2018-2019, Artem Mygaiev

 * Copyright (C) 2017, Fresco Logic, Incorporated.

 *

 Khz */

 Protects fields below and device registers */

 TOFIX: Handle YCbCr Input & Output */

/**

 * it66121_configure_afe() - Configure the analog front end

 * @ctx: it66121_ctx object

 * @mode: mode to configure

 *

 * RETURNS:

 * zero if success, a negative error code otherwise.

 Clear reset flags */

 Per programming manual, sleep here before emptying the FIFO */

 Per programming manual, sleep here for bridge to settle */

 Start interrupts */

 TOFIX handle more than MEDIA_BUS_FMT_RGB888_1X24 as output format */

 IT66121FN Datasheet specifies Little-Endian ordering */

 TOFIX support more input bus formats in 24bit width */

 Write new AVI infoframe packet */

 Enable AVI infoframe */

 Set TX mode to HDMI */

 Revision is shared with DEVICE_ID1 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2019 Renesas Electronics Corporation

 * Copyright (C) 2016 Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 Locate the panel DT node. */

	/*

	 * Decoder input LVDS format is a property of the decoder chip or even

	 * its strapping. Handle data-mapping the same way lvds-panel does. In

	 * case data-mapping is not present, do nothing, since there are still

	 * legacy bindings which do not specify this property.

	/*

	 * The panel_bridge bridge is attached to the panel's of_node,

	 * but we need a bridge attached to our of_node for our user

	 * to look up.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Silicon Image SiI8620 HDMI/MHL bridge driver

 *

 * Copyright (C) 2015, Samsung Electronics Co., Ltd.

 * Andrzej Hajda <a.hajda@samsung.com>

 context lock, protects fields below */

 Main System */

 TDM and HSIC */

 TMDS Receiver, MHL EDID */

 eMSC, HDCP, HSIC */

 MHL Spec */

 MHL CBUS */

 Hardware TPI (Transmitter Programming Interface) */

 eCBUS-S, eCBUS-D */

 copy src to dst and set changed bits in src */

 endian agnostic, non-volatile version of test_bit */

 get micro-USB connector node */

 next get micro-USB Interface Controller node */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for MegaChips STDP4028 with GE B850v3 firmware (LVDS-DP)

 * Driver for MegaChips STDP2690 with GE B850v3 firmware (DP-DP++)



 * Copyright (c) 2017, Collabora Ltd.

 * Copyright (c) 2017, General Electric Company





 * This driver creates a drm_bridge and a drm_connector for the LVDS to DP++

 * display bridge of the GE B850v3. There are two physical bridges on the video

 * signal pipeline: a STDP4028(LVDS to DP) and a STDP2690(DP to DP++). The

 * physical bridges are automatically configured by the input video signal, and

 * the driver has no access to the video processing pipeline. The driver is

 * only needed to read EDID from the STDP2690 and to handle HPD events from the

 * STDP4028. The driver communicates with both bridges over i2c. The video

 * signal pipeline is as follows:

 *

 *   Host -> LVDS|--(STDP4028)--|DP -> DP|--(STDP2690)--|DP++ -> Video output

		/* Yes, read the entire buffer, and do not skip the first

		 * EDID_LENGTH bytes.

 Configures the bridge to re-enable interrupts after each ack. */

 Enable interrupts */

	/*

	 * This check is to avoid both the drivers

	 * removing the bridge in their remove() function

 drm bridge initialization */

 Clear pending interrupts since power up. */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2020 Texas Instruments Incorporated - https://www.ti.com

 *  Author: Peter Ujfalusi <peter.ujfalusi@ti.com>

 Global (16-bit addressable) */

 Debug (16-bit addressable) */

 TX PHY (32-bit addressable) */

 TX PPI (32-bit addressable) */

 TX CTRL (32-bit addressable) */

 DSITX CTRL (16-bit addressable) */

 TC358768_DSI_CONTROL (0x040C) register */

 TC358768_DSI_CONFW (0x0500) register */

 number of Parallel Port Input Data Lines */

 number of DSI Lanes */

 Parameters for PLL programming */

 PLL feedback divider */

 PLL input divider */

 PLL Freqency range for HSCK (post divider) */

 pll_clk / 2 */

gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

 16-bit register? */

 16-bit register? */

 Assert Reset */

 Release Reset, Exit Sleep */

	/*

	 * The RESX is active low (GPIO_ACTIVE_LOW).

	 * DEASSERT (value = 0) the reset_gpio to enable the chip

 wait for encoder clocks to stabilize */

	/*

	 * The RESX is active low (GPIO_ACTIVE_LOW).

	 * ASSERT (value = 1) the reset_gpio to disable the chip

 pll_clk = RefClk * [(FBD + 1)/ (PRD + 1)] * [1 / (2^FRS)] */

	/*

	 * tc358768 supports both Video and Pulse mode, but the driver only

	 * implements Video (event) mode currently

	/*

	 * tc358768 supports RGB888, RGB666, RGB666_PACKED and RGB565, but only

	 * RGB888 is verified.

 get input ep (port0/endpoint0) */

 start transfer */

 set FrmStop */

 wait at least for one frame */

 clear PP_en */

 set RstPtr */

 PRD[15:12] FBD[8:0] */

 FRS[11:10] LBWS[9:8] CKEN[4] RESETB[1] EN[0] */

 wait for lock */

 FRS[11:10] LBWS[9:8] CKEN[4] PLL_CKEN[4] RESETB[1] EN[0] */

 Data Format Control Register */

 rdswap_en | dsitx_en | txdt_en */

 VSDly[9:0] */

 Enable D-PHY (HiZ->LP11) */

 Enable lanes */

 DSI Timings */

 LP11 > 100us for D-PHY Rx Init */

 LPTimeCnt > 50ns */

 38ns < TCLK_PREPARE < 95ns */

 TCLK_PREPARE > 300ns */

 TCLK_TRAIL > 60ns + 3*UI */

 40ns + 4*UI < THS_PREPARE < 85ns + 6*UI */

 THS_ZERO > 145ns + 10*UI */

 TWAKEUP > 1ms in lptxcnt steps */

 TCLK_POSTCNT > 60ns + 52*UI */

 60ns + 4*UI < THS_PREPARE < 105ns + 12*UI */

 TXTAGOCNT[26:16] RXTASURECNT[10:0] */

 START[0] */

 Set event mode */

 vsw (+ vbp) */

 vbp (not used in event mode) */

 vact */

 (hsw + hbp) * byteclk * ndl / pclk */

 hbp (not used in event mode) */

 hact (bytes) */

 VSYNC polarity */

 HSYNC polarity */

 Start DSI Tx */

 Configure DSI_Control register */

 DSI mode */

 clear FrmStop and RstPtr */

 set PP_en */

	/*

	 * RESX is low active, to disable tc358768 initially (keep in reset)

	 * the gpio line must be LOW. This is the ASSERTED state of

	 * GPIO_ACTIVE_LOW (GPIOD_OUT_HIGH == ASSERTED).

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2020 Marek Vasut <marex@denx.de>

 *

 * Based on tc358764.c by

 *  Andrzej Hajda <a.hajda@samsung.com>

 *  Maciej Purski <m.purski@samsung.com>

 *

 * Based on rpi_touchscreen.c by

 *  Eric Anholt <eric@anholt.net>

 PPI layer registers */

 START control bit */

 LPTX timing signal */

 Assertion timer for Lane 0 */

 Assertion timer for Lane 1 */

 DSI layer registers */

 START control bit of DSI-TX */

 Enables each lane */

 LCDC/DPI Host Registers */

 SPI Master Registers */

 System Controller Registers */

 System registers */

 Lane enable PPI and DSI register bits */

	/*

	 * The post_disable hook might be called multiple times.

	 * We want to avoid regulator imbalance below.

 TODO: Find out how to get dual-lane mode working */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2017 Samsung Electronics

 *

 * Authors:

 *    Tomasz Stanislawski <t.stanislaws@samsung.com>

 *    Maciej Purski <m.purski@samsung.com>

 *

 * Based on sii9234 driver created by:

 *    Adam Hampson <ahampson@sta.samsung.com>

 *    Erik Gilling <konkers@android.com>

 *    Shankar Bandal <shankar.b@samsung.com>

 *    Dharam Kumar <dharam.kr@samsung.com>

 MHL Tx registers and bits */

 HDMI registers */

 CBUS registers */

 TPI registers */

 Timeouts in msec */

 in kHz */

 Protects fields below and device registers */

		/*

		 * Enable WRITE_STAT interrupt for writes to all

		 * 4 MSC Status registers.

		/*

		 * Enable SET_INT interrupt for writes to all

		 * 4 MSC Interrupt registers.

 Require to chek mhl imformation of samsung in cbus_init_register */

 Setup our devcap */

 Disable CBUS discovery */

 Force USB ID switch to open */

 Force upstream HPD to 0 when not in MHL mode. */

 Clear USB ID switch to open */

 Enable CBUS discovery */

 Force the SiI9234 into the D0 state. */

 Enable TxPLL Clock */

 Enable Tx Clock Path & Equalizer */

 Power Up TMDS */

 Enable HDCP Compliance safety */

 CBUS discovery cycle time for each drive and float = 150us */

 Clear bit 6 (reg_skip_rgnd) */

 Reserved */

	/*

	 * Changed from 66 to 65 for 94[1:0] = 01 = 5k reg_cbusmhl_pup_sel

	 * 1.8V CBUS VTH & GND threshold

	 * to meet CTS 3.3.7.2 spec

 RGND & single discovery attempt (RGND blocking) */

 Use VBUS path of discovery state machine */

 0x92[3] sets the CBUS / ID switch */

	/*

	 * To allow RGND engine to operate correctly.

	 * When moving the chip from D2 to D0 (power up, init regs)

	 * the values should be

	 * 94[1:0] = 01  reg_cbusmhl_pup_sel[1:0] should be set for 5k

	 * 93[7:6] = 10  reg_cbusdisc_pup_sel[1:0] should be

	 * set for 10k (default)

	 * 93[5:4] = 00  reg_cbusidle_pup_sel[1:0] = open (default)

	/*

	 * Change from CC to 8C to match 5K

	 * to meet CTS 3.3.72 spec

 Configure the interrupt as active high */

 Release usb_id switch */

 Enable Auto soft reset on SCDT = 0 */

 HDMI Transcode mode enable */

 This point is very important before measure RGND impedance */

 Force upstream HPD to 0 when not in MHL mode */

 I2C above is expected to fail because power goes down */

 To avoid irq storm, when hw is in meta state */

 Turn on&off hpd festure for only QCT HDMI */

 Got interrupt in inappropriate state */

 Discovery override */

 Increase DDC translation layer timer (byte mode) */

 Keep the discovery enabled. Need RGND interrupt */

 Downstream HPD High, Enable TMDS */

 Downstream HPD Low, Disable TMDS */

 Work_around code to handle wrong interrupt */

	/*

	 * Once RSEN loss is confirmed,we need to check

	 * based on cable status and chip power status,whether

	 * it is SINK Loss(HDMI cable not connected, TV Off)

	 * or MHL cable disconnection

	 * TODO: Define the below mhl_disconnection()

 To meet CTS 3.3.22.2 spec */

 Clean interrupt status and pending flags */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2019 Laurent Pinchart <laurent.pinchart@ideasonboard.com>

		/*

		 * For DVI and HDMI connectors a DDC probe failure indicates

		 * that no cable is connected.

		/*

		 * Composite and S-Video connectors have no other detection

		 * mean than the HPD GPIO. For VGA connectors, even if we have

		 * an I2C bus, we can't assume that the cable is disconnected

		 * if drm_probe_ddc fails, as some cables don't wire the DDC

		 * pins.

 Get the exact connector type. */

 All the supported connector types support interlaced modes. */

 Get the optional connector label. */

	/*

	 * Get the HPD GPIO for DVI, HDMI and DP connectors. If the GPIO can provide

	 * edge interrupts, register an interrupt handler.

 Retrieve the DDC I2C adapter for DVI, HDMI and VGA connectors. */

 Get the DP PWR for DP connector. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright: 2017 Cadence Design Systems, Inc.

 *

 * Author: Boris Brezillon <boris.brezillon@bootlin.com>

	/*

	 * Make sure DSI htotal is aligned on a lane boundary when calculating

	 * the expected data rate. This is done by extending HFP in case of

	 * misalignment.

 data rate in bytes/sec is not an integer, refuse the mode. */

 data rate was in bytes/sec, convert to bits/sec. */

	/*

	 * Make sure DPI(HFP) > DSI(HSS+HSA+HSE+HBP) to guarantee that the FIFO

	 * is empty before we start a receiving a new line on the DPI

	 * interface.

	/*

	 * VFP_DSI should be less than VFP_DPI and VFP_DSI should be at

	 * least 1.

 VSA_DSI = VSA_DPI and must be at least 2. */

 HACT must be 32-bits aligned. */

	/*

	 * Power all internal DPHY blocks down and maintain their reset line

	 * asserted before changing the DPHY config.

 Activate the PLL and wait until it's locked. */

 De-assert data and clock reset lines. */

 ULPOUT should be set to 1ms and is expressed in sysclk cycles. */

	/*

	 * HSTX and LPRX timeouts are both expressed in TX byte clk cycles and

	 * both should be set to at least the time it takes to transmit a

	 * frame.

	/*

	 * We currently do not support connecting several DSI devices to the

	 * same host. In order to support that we'd need the DRM bridge

	 * framework to allow dynamic reconfiguration of the bridge chain.

 We do not support burst mode yet. */

	/*

	 * The host <-> device link might be described using an OF-graph

	 * representation, in this case we extract the device of_node from

	 * this representation, otherwise we use dsidev->dev.of_node which

	 * should have been filled by the core.

	/*

	 * The DSI output has been properly configured, we can now safely

	 * register the input to the bridge framework so that it can take place

	 * in a display pipeline.

 For read operations, the maximum TX len is 2. */

 TX len is limited by the CMD FIFO depth. */

 RX len is limited by the RX FIFO depth. */

 Clear status flags before sending the command. */

 We did not receive the events we were waiting for. */

 'READ' or 'WRITE with ACK' failed. */

	/*

	 * We only support the DPI input, so force input->id to

	 * CDNS_DPI_INPUT.

 Mask all interrupts before registering the IRQ handler. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 * Copyright (c) 2019-2020. Linaro Limited.

 3840x2160 24bit 30Hz 4Lane 2ports */

 1080P 24bit 60Hz 4lane 1port */

 1080P 24bit 30Hz 3lane 1port */

 port A rx current */

 port A ldo voltage set */

 enable port A lprx */

 port B rx current */

 port B ldo voltage set */

 enable port B lprx */

 PortA clk lane no-LP mode */

 PortB clk lane with-LP mode */

 stage 1 */

 stage 2 */

 MK limit */

 pcr rst */

 txpll init */

	/*

	 * first divide pclk by 2 first

	 *  - write divide by 64k to 19:16 bits which means shift by 17

	 *  - write divide by 256 to 15:8 bits which means shift by 9

	 *  - write remainder to 7:0 bits, which means shift by 1

 pclk[19:16] */

 pclk[15:8]  */

 pclk[7:0]   */

 top module video check */

 vactive */

 v_total */

 h_total_sysclk */

 hactive_a */

 hactive_b */

 UD1 infoframe */

 HDMI DC mode */

 HDMI AC mode */

 hpd changed low */

 hpd changed high */

 video input changed */

 clear */

 set addr pin as output */

 disable IRQ */

 MIPI Rx power down */

 bandgap power down */

 system clk power down */

 LT9611_System_Init */

 sel xtal clock */

 timer for frequency meter */

 timer 2 */

 timer 1 */

 irq init */

 hpd irq */

 hpd debounce width */

 video check irq */

 power consumption for work */

 connector funcs */

 memset to clear old buffer, if any */

 0xA0 is EDID device address */

 0x00 is EDID offset address */

 length for read */

 offset address */

 DDC No Ack or Abitration lost */

 supports up to 1 extension block */

 TODO: add support for more extension blocks */

 bridge funcs */

 Enable HDMI output */

 Disable HDMI output */

 Attach primary DSI */

 Attach secondary DSI, if specified */

	/*

	 * HDMI sound should be located as reg = <2>

	 * Then, it is sound port 0

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2016 Texas Instruments

 * Author: Jyri Sarha <jsarha@ti.com>

		/*

		 * No EDID, fallback on the XGA standard modes and prefer a mode

		 * pretty much anything can handle.

 Start with defaults. */

		/*

		 * In I2C mode timings are configured through the I2C interface.

		 * As the driver doesn't support I2C configuration yet, we just

		 * go with the defaults (BSEL=1, DSEL=1, DKEN=0, EDGE=1).

	/*

	 * In non-I2C mode, timings are configured through the BSEL, DSEL, DKEN

	 * and EDGE pins. They are specified in DT through endpoint properties

	 * and vendor-specific properties.

 Get the sampling edge from the endpoint. */

 Get the setup and hold time from vendor-specific properties. */

 Get the next bridge, connected to port@1. */

 Get the powerdown GPIO. */

  Register the DRM bridge. */

 There is currently no i2c functionality. */

 IS_ENABLED(CONFIG_I2C) */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016 Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 * Copyright (C) 2017 Broadcom

	/*

	 * Cleanup the connector if we know it was initialized.

	 *

	 * FIXME: This wouldn't be needed if the panel_bridge structure was

	 * allocated with drmm_kzalloc(). This might be tricky since the

	 * drm_device pointer can only be retrieved when the bridge is attached.

/**

 * drm_panel_bridge_add - Creates a &drm_bridge and &drm_connector that

 * just calls the appropriate functions from &drm_panel.

 *

 * @panel: The drm_panel being wrapped.  Must be non-NULL.

 *

 * For drivers converting from directly using drm_panel: The expected

 * usage pattern is that during either encoder module probe or DSI

 * host attach, a drm_panel will be looked up through

 * drm_of_find_panel_or_bridge().  drm_panel_bridge_add() is used to

 * wrap that panel in the new bridge, and the result can then be

 * passed to drm_bridge_attach().  The drm_panel_prepare() and related

 * functions can be dropped from the encoder driver (they're now

 * called by the KMS helpers before calling into the encoder), along

 * with connector creation.  When done with the bridge (after

 * drm_mode_config_cleanup() if the bridge has already been attached), then

 * drm_panel_bridge_remove() to free it.

 *

 * The connector type is set to @panel->connector_type, which must be set to a

 * known type. Calling this function with a panel whose connector type is

 * DRM_MODE_CONNECTOR_Unknown will return ERR_PTR(-EINVAL).

 *

 * See devm_drm_panel_bridge_add() for an automatically managed version of this

 * function.

/**

 * drm_panel_bridge_add_typed - Creates a &drm_bridge and &drm_connector with

 * an explicit connector type.

 * @panel: The drm_panel being wrapped.  Must be non-NULL.

 * @connector_type: The connector type (DRM_MODE_CONNECTOR_*)

 *

 * This is just like drm_panel_bridge_add(), but forces the connector type to

 * @connector_type instead of infering it from the panel.

 *

 * This function is deprecated and should not be used in new drivers. Use

 * drm_panel_bridge_add() instead, and fix panel drivers as necessary if they

 * don't report a connector type.

/**

 * drm_panel_bridge_remove - Unregisters and frees a drm_bridge

 * created by drm_panel_bridge_add().

 *

 * @bridge: The drm_bridge being freed.

/**

 * devm_drm_panel_bridge_add - Creates a managed &drm_bridge and &drm_connector

 * that just calls the appropriate functions from &drm_panel.

 * @dev: device to tie the bridge lifetime to

 * @panel: The drm_panel being wrapped.  Must be non-NULL.

 *

 * This is the managed version of drm_panel_bridge_add() which automatically

 * calls drm_panel_bridge_remove() when @dev is unbound.

/**

 * devm_drm_panel_bridge_add_typed - Creates a managed &drm_bridge and

 * &drm_connector with an explicit connector type.

 * @dev: device to tie the bridge lifetime to

 * @panel: The drm_panel being wrapped.  Must be non-NULL.

 * @connector_type: The connector type (DRM_MODE_CONNECTOR_*)

 *

 * This is just like devm_drm_panel_bridge_add(), but forces the connector type

 * to @connector_type instead of infering it from the panel.

 *

 * This function is deprecated and should not be used in new drivers. Use

 * devm_drm_panel_bridge_add() instead, and fix panel drivers as necessary if

 * they don't report a connector type.

/**

 * drm_panel_bridge_connector - return the connector for the panel bridge

 * @bridge: The drm_bridge.

 *

 * drm_panel_bridge creates the connector.

 * This function gives external access to the connector.

 *

 * Returns: Pointer to drm_connector

/**

 * devm_drm_of_get_bridge - Return next bridge in the chain

 * @dev: device to tie the bridge lifetime to

 * @np: device tree node containing encoder output ports

 * @port: port in the device tree node

 * @endpoint: endpoint in the device tree node

 *

 * Given a DT node's port and endpoint number, finds the connected node

 * and returns the associated bridge if any, or creates and returns a

 * drm panel bridge instance if a panel is connected.

 *

 * Returns a pointer to the bridge if successful, or an error pointer

 * otherwise.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2015-2016 Free Electrons

 * Copyright (C) 2015-2016 NextThing Co

 *

 * Maxime Ripard <maxime.ripard@free-electrons.com>

		/*

		 * In case we cannot retrieve the EDIDs (missing or broken DDC

		 * bus from the next bridge), fallback on the XGA standards and

		 * prefer a mode pretty much anyone can handle.

 Get the next bridge in the pipeline. */

 Get the regulator and GPIO resources. */

 Register the bridge. */

/*

 * We assume the ADV7123 DAC is the "default" for historical reasons

 * Information taken from the ADV7123 datasheet, revision D.

 * NOTE: the ADV7123EP seems to have other timings and need a new timings

 * set if used.

 Timing specifications, datasheet page 7 */

/*

 * Information taken from the THS8134, THS8134A, THS8134B datasheet named

 * "SLVS205D", dated May 1990, revised March 2000.

 From timing diagram, datasheet page 9 */

 From datasheet, page 12 */

 I guess this means latched input */

/*

 * Information taken from the THS8135 datasheet named "SLAS343B", dated

 * May 2001, revised April 2013.

 From timing diagram, datasheet page 14 */

 From datasheet, page 16 */

 SPDX-License-Identifier: GPL-2.0

/*

 * THC63LVD1024 LVDS to parallel data DRM bridge driver.

 *

 * Copyright (C) 2018 Jacopo Mondi <jacopo+renesas@jmondi.org>

	/*

	 * The THC63LVD1024 pixel rate range is 8 to 135 MHz in all modes but

	 * dual-in, single-out where it is 40 to 150 MHz. As dual-in, dual-out

	 * isn't supported by the driver yet, simply derive the limits from the

	 * input mode.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016 MediaTek Inc.

/*

 * PS8640 uses multiple addresses:

 * page[0]: for DP control

 * page[1]: for VIDEO Bridge

 * page[2]: for control top

 * page[3]: for DSI Link Control1

 * page[4]: for MIPI Phy

 * page[5]: for VPLL

 * page[6]: for DSI Link Control2

 * page[7]: for SPI ROM mapping

 Assume it's good */

 Write to the internal FIFO buffer */

 Zero delay loop because i2c transactions are slow already */

 Ignore the DEFER cases as they are already handled in hardware */

		/*

		 * The programming guide is not clear about whether a I2C NACK

		 * would trigger SWAUX_STATUS_NACK or SWAUX_STATUS_I2C_NACK. So

		 * we handle both cases together.

 Read from the internal FIFO buffer */

	/*

	 * Wait for the ps8640 embedded MCU to be ready

	 * First wait 200ms and then check the MCU ready flag every 20ms

	/*

	 * The Manufacturer Command Set (MCS) is a device dependent interface

	 * intended for factory programming of the display module default

	 * parameters. Once the display module is configured, the MCS shall be

	 * disabled by the manufacturer. Once disabled, all MCS commands are

	 * ignored by the display interface.

 Switch access edp panel's edid through i2c */

 port@0 is ps8640 dsi input port */

 Attach the panel-bridge to the dsi bridge */

	/*

	 * When we end calling get_edid() triggered by an ioctl, i.e

	 *

	 *   drm_mode_getconnector (ioctl)

	 *     -> drm_helper_probe_single_connector_modes

	 *        -> drm_bridge_connector_get_modes

	 *           -> ps8640_bridge_get_edid

	 *

	 * We need to make sure that what we need is enabled before reading

	 * EDID, for this chip, we need to do a full poweron, otherwise it will

	 * fail.

	/*

	 * If we call the get_edid() function without having enabled the chip

	 * before, return the chip to its original power state.

 port@1 is ps8640 output port */

	/*

	 * Assert the reset to avoid the bridge being initialized prematurely

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * tc358767 eDP bridge driver

 *

 * Copyright (C) 2016 CogentEmbedded Inc

 * Author: Andrey Gusakov <andrey.gusakov@cogentembedded.com>

 *

 * Copyright (C) 2016 Pengutronix, Philipp Zabel <p.zabel@pengutronix.de>

 *

 * Copyright (C) 2016 Zodiac Inflight Innovations

 *

 * Initially based on: drivers/gpu/drm/i2c/tda998x_drv.c

 *

 * Copyright (C) 2012 Texas Instruments

 * Author: Rob Clark <robdclark@gmail.com>

 Registers */

 Display Parallel Interface */

 LSB aligned */

 Loosely Packed */

 LSB aligned 8-bit */

 Video Path */

 Video Timing Gen Disabled */

 Video Timing Gen Enabled */

 Magic Square FRC disabled */

 Magic Square FRC enabled */

 Video Frame Timing Upload */

 System */

 Control */

 Auto-generate M/N values */

 Enable Enhanced Framing */

 Video transmission enable */

 Enable DPTX function */

 Clocks */

 Main Channel */

 LSCLK cycles per TU */

 AUX channel */

 Link Training */

 PHY */

 DP PHY Global Soft Reset */

 AUX PHY BGR Enable */

 PHY Power Switch Enable */

 Reset PHY1 Main Channel */

 PHY Main Channels Ready */

 Reset PHY0 Main Channel */

 PHY Enable 2 lanes */

 PHY Aux Channel0 Enable */

 PHY Main Channel0 Enable */

 PLL */

 not defined in DS */

 38.4 MHz */

 19.2 MHz */

 26 MHz */

 13 MHz */

 Test & Debug */

 link settings */

 current mode */

 do we have IRQ */

 HPD pin number (0 or 1) or -ENODEV */

 Store address */

 Start transfer */

	/*

	 * For some reason address-only DP_AUX_I2C_WRITE (MOT), still

	 * reports 1 byte transferred in its status. To deal we that

	 * we ignore aux_bytes field if we know that this was an

	 * address-only transfer

	/*

	 * No training pattern, skew lane 1 data by two LSCLK cycles with

	 * respect to lane 0 data, AutoCorrect Mode = 0

 Scrambler Disabled */

 Spread Spectrum Enable */

 Two Main Channel Lanes */

 2.7 Gbps link */

 Wait for PLL to lock: up to 2.09 ms, depending on refclk */

 Loop over all possible ext_divs, skipping invalid configurations */

		/*

		 * refclk / ext_pre_div should be in the 1 to 200 MHz range.

		 * We don't allow any refclk > 200 MHz, only check lower bounds.

 Check limits */

				/*

				 * refclk * mul / (ext_pre_div * pre_div)

				 * should be in the 150 to 650 MHz range

 if VCO >= 300 MHz */

 see DS */

 Power up PLL and switch to bypass */

 For PLL VCO >= 300 MHz = 1 */

 External Pre-divider */

 External Post-divider */

 Use RefClk as PLL input */

 Divider for PLL RefClk */

 Multiplier for PLL */

 Force PLL parameter update and disable bypass */

 Enable PLL bypass, power down PLL */

	/*

	 * If the Stream clock and Link Symbol clock are

	 * asynchronous with each other, the value of M changes over

	 * time. This way of generating link clock and stream

	 * clock is called Asynchronous Clock mode. The value M

	 * must change while the value N stays constant. The

	 * value of N in this Asynchronous Clock mode must be set

	 * to 2^15 or 32,768.

	 *

	 * LSCLK = 1/10 of high speed link clock

	 *

	 * f_STRMCLK = M/N * f_LSCLK

	 * M/N = f_STRMCLK / f_LSCLK

	 *

 Setup DP-PHY / PLL */

	/*

	 * Initially PLLs are in bypass. Force PLL parameter update,

	 * disable PLL bypass, enable PLL

 Setup AUX link */

 Aux Bit Period Calculator Threshold */

 Aux Response Timeout Timer */

 Read DP Rx Link Capability */

 read assr */

	/*

	 * Recommended maximum number of symbols transferred in a transfer unit:

	 * DIV_ROUND_UP((input active video bandwidth in bytes) * tu_size,

	 *              (output active video bandwidth in bytes))

	 * Must be less than tu_size.

	/*

	 * LCD Ctl Frame Size

	 * datasheet is not clear of vsdelay in case of DPI

	 * assume we do not need any delay when DPI is a source of

	 * sync signals

 update settings */

 Test pattern settings */

 DP Main Stream Attributes */

 SSCG and BW27 on DP1 must be set to the same as on DP0 */

 Setup Main Link */

 PLL setup */

 Reset/Enable Main Links */

 Set misc: 8 bits per color */

	/*

	 * ASSR mode

	 * on TC358767 side ASSR configured through strap pin

	 * seems there is no way to change this setting from SW

	 *

	 * check is tc configured for same mode

 try to set ASSR on display side */

 read back */

 trying with disabled scrambler */

 Setup Link & DPRx Config for Training */

 DOWNSPREAD_CTRL */

 MAIN_LINK_CHANNEL_CODING_SET */

 Reset voltage-swing & pre-emphasis */

 Clock-Recovery */

 Set DPCD 0x102 for Training Pattern 1 */

 Defer Iteration Count */

 Loop Iteration Count */

 Loop Timer Delay */

 Enable DP0 to start Link Training */

 wait */

 Channel Equalization */

 Set DPCD 0x102 for Training Pattern 2 */

 wait */

	/*

	 * Toshiba's documentation suggests to first clear DPCD 0x102, then

	 * clear the training pattern bit in DP0_SRCCTRL. Testing shows

	 * that the link sometimes drops if those steps are done in that order,

	 * but if the steps are done in reverse order, the link stays up.

	 *

	 * So we do the steps differently than documented here.

 Clear Training Pattern, set AutoCorrect Mode = 1 */

 Clear DPCD 0x102 */

 Note: Can Not use DP0_SNKLTCTRL (0x06E4) short cut */

 Check link status */

 PXL PLL setup */

 Set M/N */

	/*

	 * VID_EN assertion should be delayed by at least N * LSCLK

	 * cycles from the time VID_MN_GEN is enabled in order to

	 * generate stable values for VID_M. LSCLK is 270 MHz or

	 * 162 MHz, VID_N is set to 32768 in  tc_stream_clock_calc(),

	 * so a delay of at least 203 us should suffice.

 Set input interface */

 Fixup sync polarities, both hsync and vsync are active low */

 DPI interface clock limitation: upto 154 MHz */

 If a connector is required then this driver shall create it */

 Create DP/eDP connector */

 Don't poll if don't have HPD connected */

		/*

		 * H is triggered when the GPIO goes high.

		 *

		 * LC is triggered when the GPIO goes low and stays low for

		 * the duration of LCNT

 port@2 is the output port */

 Shut down GPIO is optional */

 Reset GPIO is optional */

 enable SysErr */

 Enable ASSR for eDP panels */

		/*

		 * If the reset pin isn't present, do a software reset. It isn't

		 * as thorough as the hardware reset, as we can't reset the I2C

		 * communication block for obvious reasons, but it's getting the

		 * chip into a defined state.

 Set LCNT to 2ms */

 We need the "alternate" mode for HPD */

 enable H & LC */

 Register DP AUX channel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Chrontel CH7033 Video Encoder Driver

 *

 * Copyright (C) 2019,2020 Lubomir Rintel

 Page 0, Register 0x07 */

 Page 0, Register 0x08 */

 Page 0, Register 0x09 */

 Page 0, Register 0x0a */

 Page 0, Register 0x18 */

 Page 0, Register 0x19 */

 Page 0, Register 0x2e */

 Page 0, Register 0x2b */

 Page 0, Register 0x54 */

 Page 0, Register 0x57 */

 Page 0, Register 0x7e */

 Page 1, Register 0x07 */

 Page 1, Register 0x08 */

 Page 1, Register 0x0c */

 Page 1, Register 0x6b */

 Page 1, Register 0x6c */

 Page 3, Register 0x28 */

 Page 3, Register 0x2a */

 Page 4, Register 0x52 */

	/*

	 * Page 4

 Turn everything off to set all the registers to their defaults. */

 Bring I/O block up. */

	/*

	 * Page 0

 Bring up parts we need from the power down. */

 Horizontal input timing. */

 Vertical input timing. */

 Input color swap. */

 Input clock and sync polarity. */

 Horizontal output timing. */

 Vertical output timing. */

 VGA channel bypass */

 Output sync polarity. */

 HDMI horizontal output timing. */

 HDMI vertical output timing. */

 Pick HDMI, not LVDS. */

	/*

	 * Page 1

 No idea what these do, but VGA is wobbly and blinky without them. */

 DRI PLL */

 This seems to be color calibration for VGA. */

 LSB Blue */

 LSB Green */

 LSB Red */

 MSB Blue */

 MSB Green */

 MSB Red */

	/*

	 * Page 3

 More bypasses and apparently another HDMI/LVDS selector. */

	/*

	 * Page 4

 Output clock. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2018 Renesas Electronics

 *

 * Copyright (C) 2016 Atmel

 *		      Bo Shen <voice.shen@atmel.com>

 *

 * Authors:	      Bo Shen <voice.shen@atmel.com>

 *		      Boris Brezillon <boris.brezillon@free-electrons.com>

 *		      Wu, Songjun <Songjun.Wu@atmel.com>

 *

 * Copyright (C) 2010-2011 Freescale Semiconductor, Inc. All Rights Reserved.

 Audio  */

 Indirect internal register access */

	/*

	 * Mutex protects audio and video functions from interfering

	 * each other, by keeping their i2c command sequences atomic.

 The datasheet says treset-min = 100us. Make it 150us to be sure. */

 TODO: check mode */

 Do not send the infoframe header, but keep the CRC field. */

 Decode Level 0 Packets */

	/*

	 * HDMI sound should be located at reg = <3>

	 * Return expected DAI index 0.

 Only i2s support for now. */

 struct sii902x mutex should be enough */

/*

 * The purpose of sii902x_i2c_bypass_select is to enable the pass through

 * mode of the HDMI transmitter. Do not use regmap from within this function,

 * only use sii902x_*_unlocked functions to read/modify/write registers.

 * We are holding the parent adapter lock here, keep this in mind before

 * adding more i2c transactions.

 *

 * Also, since SII902X_SYS_CTRL_DATA is used with regmap_update_bits elsewhere

 * in this driver, we need to make sure that we only touch 0x1A[2:1] from

 * within sii902x_i2c_bypass_select and sii902x_i2c_bypass_deselect, and that

 * we leave the remaining bits as we have found them.

/*

 * The purpose of sii902x_i2c_bypass_deselect is to disable the pass through

 * mode of the HDMI transmitter. Do not use regmap from within this function,

 * only use sii902x_*_unlocked functions to read/modify/write registers.

 * We are holding the parent adapter lock here, keep this in mind before

 * adding more i2c transactions.

 *

 * Also, since SII902X_SYS_CTRL_DATA is used with regmap_update_bits elsewhere

 * in this driver, we need to make sure that we only touch 0x1A[2:1] from

 * within sii902x_i2c_bypass_select and sii902x_i2c_bypass_deselect, and that

 * we leave the remaining bits as we have found them.

	/*

	 * When the HDMI transmitter is in pass through mode, we need an

	 * (undocumented) additional delay between STOP and START conditions

	 * to guarantee the bus won't get stuck.

	/*

	 * Sometimes the I2C bus can stall after failure to use the

	 * EDID channel. Retry a few times to see if things clear

	 * up, else continue anyway.

 Clear all pending interrupts */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CrOS EC ANX7688 HDMI->DP bridge driver

 *

 * Copyright 2020 Google LLC

 Register addresses */

 First supported firmware version (0.85) */

 Read both regs 0x85 (bandwidth) and 0x86 (lane count). */

 Maximum 0x19 bandwidth (6.75 Gbps Turbo mode), 2 lanes */

 Compute available bandwidth (kHz) */

 Required bandwidth (8 bpc, kHz) */

 Read both vendor and device id (4 bytes). */

 FW version >= 0.85 supports bandwidth/lane count registers */

 Warn, but not fail, for backwards compatibility */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 * Copyright (c) 2019-2020. Linaro Limited.

 Protects all accesses to registers by stopping the on-chip MCU */

 can be accessed from different threads, so protect this with ocm_lock */

/*

 * This chip supports only a fixed set of modes.

 * Enumerate them here to check whether the mode is supported.

 50000 according to dtsi */

 Attach primary DSI */

 Attach secondary DSI, if specified */

	/*

	 * LT9611UXC will automatically detect rate and sample size, so no need

	 * to setup anything here.

	/*

	 * HDMI sound should be located as reg = <2>

	 * Then, it is sound port 0

	/*

	 * Need erase block 2 timess here. Sometimes, block erase can fail.

	 * This is a workaroud.

 sentinel */ }

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 * datasheet: https://www.ti.com/lit/ds/symlink/sn65dsi86.pdf

 fudge factor required to account for 8b/10b encoding */

 Matches DP_AUX_MAX_PAYLOAD_BYTES (for now) */

/**

 * struct ti_sn65dsi86 - Platform data for ti-sn65dsi86 driver.

 * @bridge_aux:   AUX-bus sub device for MIPI-to-eDP bridge functionality.

 * @gpio_aux:     AUX-bus sub device for GPIO controller functionality.

 * @aux_aux:      AUX-bus sub device for eDP AUX channel functionality.

 *

 * @dev:          Pointer to the top level (i2c) device.

 * @regmap:       Regmap for accessing i2c.

 * @aux:          Our aux channel.

 * @bridge:       Our bridge.

 * @connector:    Our connector.

 * @host_node:    Remote DSI node.

 * @dsi:          Our MIPI DSI source.

 * @refclk:       Our reference clock.

 * @next_bridge:  The bridge on the eDP side.

 * @enable_gpio:  The GPIO we toggle to enable the bridge.

 * @supplies:     Data for bulk enabling/disabling our regulators.

 * @dp_lanes:     Count of dp_lanes we're using.

 * @ln_assign:    Value to program to the LN_ASSIGN register.

 * @ln_polrs:     Value for the 4-bit LN_POLRS field of SN_ENH_FRAME_REG.

 * @comms_enabled: If true then communication over the aux channel is enabled.

 * @comms_mutex:   Protects modification of comms_enabled.

 *

 * @gchip:        If we expose our GPIOs, this is used.

 * @gchip_output: A cache of whether we've set GPIOs to output.  This

 *                serves double-duty of keeping track of the direction and

 *                also keeping track of whether we've incremented the

 *                pm_runtime reference count for this pin, which we do

 *                whenever a pin is configured as an output.  This is a

 *                bitmap so we can do atomic ops on it without an extra

 *                lock so concurrent users of our 4 GPIOs don't stomp on

 *                each other's read-modify-write.

 clk frequencies supported by bridge in Hz in case derived from REFCLK pin */

 clk frequencies supported by bridge in Hz in case derived from DACP/N pin */

 for i equals to refclk_lut_size means default frequency */

 configure bridge ref_clk */

	/*

	 * HPD on this bridge chip is a bit useless.  This is an eDP bridge

	 * so the HPD is an internal signal that's only there to signal that

	 * the panel is done powering up.  ...but the bridge chip debounces

	 * this signal by between 100 ms and 400 ms (depending on process,

	 * voltage, and temperate--I measured it at about 200 ms).  One

	 * particular panel asserted HPD 84 ms after it was powered on meaning

	 * that we saw HPD 284 ms after power on.  ...but the same panel said

	 * that instead of looking at HPD you could just hardcode a delay of

	 * 200 ms.  We'll assume that the panel driver will have the hardcoded

	 * delay in its prepare and always disable HPD.

	 *

	 * If HPD somehow makes sense on some future panel we'll have to

	 * change this to be conditional on someone specifying that HPD should

	 * be used.

 td2: min 100 us after regulators before enabling the GPIO */

	/*

	 * If we have a reference clock we can enable communication w/ the

	 * panel (including the aux channel) w/out any need for an input clock

	 * so we can do it in resume which lets us read the EDID before

	 * pre_enable(). Without a reference clock we need the MIPI reference

	 * clock so reading early doesn't work.

 IRQ Status Registers, see Table 31 in datasheet */

	/*

	 * We might get an error back if debugfs wasn't enabled in the kernel

	 * so let's just silently return upon failure.

/* -----------------------------------------------------------------------------

 * Auxiliary Devices (*not* AUX)

/*

 * AUX bus docs say that a non-NULL release is mandatory, but it makes no

 * sense for the model used here where all of the aux devices are allocated

 * in the single shared structure. We'll use this noop as a workaround.

/* -----------------------------------------------------------------------------

 * AUX Adapter

	/*

	 * If someone tries to do a DDC over AUX transaction before pre_enable()

	 * on a device without a dedicated reference clock then we just can't

	 * do it. Fail right away. This prevents non-refclk users from reading

	 * the EDID before enabling the panel but such is life.

 Assume it's good */

 Clear old status bits before start so we don't get confused */

 Zero delay loop because i2c transactions are slow already */

		/*

		 * The hardware tried the message seven times per the DP spec

		 * but it hit a timeout. We ignore defers here because they're

		 * handled in hardware.

	/*

	 * The eDP to MIPI bridge parts don't work until the AUX channel is

	 * setup so we don't add it in the main driver probe, we add it now.

/* -----------------------------------------------------------------------------

 * DRM Connector Operations

/*------------------------------------------------------------------------------

 * DRM Bridge

	/*

	 * TODO: ideally finding host resource and dsi dev registration needs

	 * to be done in bridge probe. But some existing DSI host drivers will

	 * wait for any of the drm_bridge/drm_panel to get added to the global

	 * bridge/panel list, before completing their probe. So if we do the

	 * dsi dev registration part in bridge probe, before populating in

	 * the global bridge list, then it will cause deadlock as dsi host probe

	 * will never complete, neither our bridge probe. So keeping it here

	 * will satisfy most of the existing host drivers. Once the host driver

	 * is fixed we can move the below code to bridge probe safely.

 TODO: setting to 4 MIPI lanes always for now */

 check if continuous dsi clock is required or not */

 We never want the next bridge to *also* create a connector: */

 Attach the next bridge */

 maximum supported resolution is 4K at 60 fps */

 disable video stream */

 set DSIA clk frequency */

 for each increment in val, frequency increases by 5MHz */

/*

 * LUT index corresponds to register value and

 * LUT values corresponds to dp data rate supported

 * by the bridge in Mbps unit.

 Calculate minimum bit rate based on our pixel clock. */

 Calculate minimum DP data rate, taking 80% as per DP spec */

 eDP 1.4 devices must provide a custom table */

 By zeroing we'll fall back to DP_MAX_LINK_RATE. */

 On older versions best we can do is use DP_MAX_LINK_RATE */

 10ms delay recommended by spec */

 set dp clk frequency value */

 enable DP PLL */

	/*

	 * We'll try to link train several times.  As part of link training

	 * the bridge chip will write DP_SET_POWER_D0 to DP_SET_POWER.  If

	 * the panel isn't ready quite it might respond NAK here which means

	 * we need to try again.

 Semi auto link training mode */

 If we saw quite a few retries, add a note about it */

 Disable the PLL if we failed */

 DSI_A lane config */

 set dsi clk frequency value */

	/*

	 * The SN65DSI86 only supports ASSR Display Authentication method and

	 * this method is enabled by default. An eDP panel must support this

	 * authentication method. We need to enable this method in the eDP panel

	 * at DisplayPort address 0x0010A prior to link training.

 Set the DP output format (18 bpp or 24 bpp) */

 DP lane config */

 Train until we run out of rates */

 config video parameters */

 enable video stream */

 td7: min 100 us after enable before DSI data */

 semi auto link training mode OFF */

 Num lanes to 0 as per power sequencing in data sheet */

 disable DP PLL */

	/*

	 * Read config from the device tree about lane remapping and lane

	 * polarities.  These are optional and we assume identity map and

	 * normal polarity if nothing is specified.  It's OK to specify just

	 * data-lanes but not lane-polarities but not vice versa.

	 *

	 * Error checking is light (we just make sure we don't crash or

	 * buffer overrun) and we assume dts is well formed and specifying

	 * mappings that the hardware supports.

	/*

	 * Convert into register format.  Loop over all lanes even if

	 * data-lanes had fewer elements so that we nicely initialize

	 * the LN_ASSIGN register.

 Stash in our struct for when we power on */

/* -----------------------------------------------------------------------------

 * GPIO Controller

	/*

	 * We already have to keep track of the direction because we use

	 * that to figure out whether we've powered the device.  We can

	 * just return that rather than (maybe) powering up the device

	 * to ask its direction.

	/*

	 * When the pin is an input we don't forcibly keep the bridge

	 * powered--we just power it on to read the pin.  NOTE: part of

	 * the reason this works is that the bridge defaults (when

	 * powered back on) to all 4 GPIOs being configured as GPIO input.

	 * Also note that if something else is keeping the chip powered the

	 * pm_runtime functions are lightweight increments of a refcount.

	/*

	 * NOTE: if nobody else is powering the device this may fully power

	 * it off and when it comes back it will have lost all state, but

	 * that's OK because the default is input and we're now an input.

 Set value first to avoid glitching */

 Set direction */

 We won't keep pm_runtime if we're input, so switch there on free */

 Only init if someone is going to use us as a GPIO controller */

/* -----------------------------------------------------------------------------

 * Probe & Remove

	/*

	 * Break ourselves up into a collection of aux devices. The only real

	 * motiviation here is to solve the chicken-and-egg problem of probe

	 * ordering. The bridge wants the panel to be there when it probes.

	 * The panel wants its HPD GPIO (provided by sn65dsi86 on some boards)

	 * when it probes. The panel and maybe backlight might want the DDC

	 * bus. Soon the PWM provided by the bridge chip will have the same

	 * problem. Having sub-devices allows the some sub devices to finish

	 * probing even if others return -EPROBE_DEFER and gets us around the

	 * problems.

	/*

	 * NOTE: At the end of the AUX channel probe we'll add the aux device

	 * for the bridge. This is because the bridge can't be used until the

	 * AUX channel is there and this is a very simple solution to the

	 * dependency problem.

 SPDX-License-Identifier: GPL-2.0

/*

 * TC358775 DSI to LVDS bridge driver

 *

 * Copyright (C) 2020 SMART Wireless Computing

 * Author: Vinay Simha BN <simhavcs@gmail.com>

 *

 #define DEBUG */

 Registers */

 DSI D-PHY Layer Registers */

 Data Lane 0 DPHY Tx Control */

 Clock Lane DPHY Rx Control */

 Data Lane 0 DPHY Rx Control */

 Data Lane 1 DPHY Rx Control */

 Data Lane 2 DPHY Rx Control */

 Data Lane 3 DPHY Rx Control */

 DPHY Rx Common Control */

 Clock Lane Control */

 Data Lane 0 Control */

 Data Lane 1 Control */

 Data Lane 2 Control */

 Data Lane 3 Control */

 DFT Mode Control */

 DSI PPI Layer Registers */

 START control bit of PPI-TX function. */

 Line Initialization Wait Counter  */

 Enables each lane at the PPI layer. */

 DSI Bus Turn Around timing parameters */

 Analog timer function enable */

 Delay for Clock Lane in LPRX  */

 Delay for Data Lane 0 in LPRX */

 Delay for Data Lane 1 in LPRX */

 Delay for Data Lane 2 in LPRX */

 Delay for Data Lane 3 in LPRX */

 For lane 0 */

 For lane 1 */

 For lane 2 */

 For lane 3 */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 Digital Counter inside of PHY IO */

 PRE Counters has reached set values */

 Clear SIPO values, Slave mode use only. */

 HS Rx Time Out Counter */

 Enable HS Rx Time Out Counter */

 START control bit of DSI-TX function */

 Enables each lane at the Protocol layer. */

 Displays lane is in HS RX mode. */

 Displays lane is in ULPS or STOP state */

 Interrupt Status */

 Interrupt Mask */

 Interrupt Clear */

 Low Power Tx Time Out Counter */

 DSI Error Count */

 Application Layer Control */

 Command Read Packet Length */

 Video Path Control */

 Horizontal Timing Control 1 */

 Horizontal Timing Control 2 */

 Vertical Timing Control 1 */

 Vertical Timing Control 2 */

 Video Frame Timing Update Enable */

 Upload Enable */

 Mux Input Select for LVDS LINK Input */

 Bit 0 to 3 */

 Bit 4 to 7 */

 Bit 8 to 11 */

 Bit 12 to 15 */

 Bit 16 to 19 */

 Bit 20 to 23 */

 Bit 24 to 27 */

 Input bit numbers used in mux registers */

 LVDS Configuration  */

 LVDS PHY 0 */

 PHY reset */

 Frequency range select */

 Clock/Data Flag pins */

 LVDS PHY 1 */

 System Status  */

 System Reset  */

 Reset I2C-Slave controller */

 Reset I2C-Master controller */

 Reset LCD controller */

 Reset Bus Management controller */

 Reset DSI-RX and App controller */

 Reset Register module */

 GPIO Registers */

 GPIO Control  */

 GPIO Output  */

 GPIO Input  */

 I2C Registers */

 I2C IF Timing and Enable Control */

 I2C Master Addressing */

 Write Data Queue */

 Read Data Queue */

 Chip ID and Revision ID Register */

 Debug Registers */

 Debug */

 LVDS Data */

 PCLK=DCLK/3 */

 PCLK=DCLK/6 */

 single-link or dual-link */

 helper function to access bus_formats */

 bpc = 6; */

	/*

	 * Default hardware register settings of tc358775 configured

	 * with MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA jeida-24 format

 VESA-24 */

  MEDIA_BUS_FMT_RGB666_1X7X3_SPWG - JEIDA-18 */

	/*

	 * Maximum pixel clock speed 135MHz for single-link

	 * 270MHz for dual-link

 RGB888 */

 RGB666 */

	/*

	 * To get the data-lanes of dsi, we need to access the dsi0_out of port1

	 *  of dsi0 endpoint from bridge port0 of d2l_in

 dsi0_out node */

 dsi0 port 1 */

 Attach the panel-bridge to the dsi bridge */

 SPDX-License-Identifier: GPL-2.0

/*

 * TPD12S015 HDMI ESD protection & level shifter chip driver

 *

 * Copyright (C) 2019 Texas Instruments Incorporated

 *

 * Based on the omapdrm-specific encoder-opa362 driver

 *

 * Copyright (C) 2013 Texas Instruments Incorporated

 * Author: Tomi Valkeinen <tomi.valkeinen@ti.com>

 DC-DC converter needs at max 300us to get to 90% of 5V. */

 Get the next bridge, connected to port@1. */

 Get the control and HPD GPIOs. */

 Register the IRQ if the HPD GPIO is IRQ-capable. */

 Register the DRM bridge. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Samsung Electronics Co., Ltd

 *

 * Authors:

 *	Andrzej Hajda <a.hajda@samsung.com>

 *	Maciej Purski <m.purski@samsung.com>

 PPI layer registers */

 START control bit */

 LPTX timing signal */

 Enables each lane */

 BTA timing parameters */

 Assertion timer for Lane 0 */

 Assertion timer for Lane 1 */

 Assertion timer for Lane 2 */

 Assertion timer for Lane 3 */

 DSI layer registers */

 START control bit of DSI-TX */

 Enables each lane */

 Video path registers */

 Video Path Control */

 Magic square in RGB666 */

 Use chip clock for timing */

 Event mode */

 RGB888 mode */

 VSYNC delay */

 Polarity of HSYNC signal */

 Polarity of DE signal */

 Polarity of VSYNC signal */

 Horizontal Timing Control 1 */

 Horizontal Timing Control 2 */

 Vertical Timing Control 1 */

 Vertical Timing Control 2 */

 Video Frame Timing Update Enable */

 LVDS registers */

 Mux input bit 0 to 3 */

 Mux input bit 4 to 7 */

 Mux input bit 8 to 11 */

 Mux input bit 12 to 15 */

 Mux input bit 16 to 19 */

 Mux input bit 20 to 23 */

 Mux input bit 24 to 27 */

 Input bit numbers used in mux registers */

 LVDS Configuration */

 LVDS PHY 0 */

 PHY reset */

 Frequency range select */

 Clock/Data Flag pins */

 System registers */

 System Reset */

 System ID */

 Reset I2C-Slave controller */

 Reset I2C-Master controller */

 Reset LCD controller */

 Reset Bus Management controller */

 Reset DSI-RX and App controller */

 Reset Register module */

 Lane enable PPI and DSI register bits */

 LVCFG fields */

 configure PPI counters */

 enable four data lanes and clock lane */

 start */

 configure video path */

 reset PHY */

 reset bridge */

 set bit order */

 SPDX-License-Identifier: GPL-2.0

/*

 * TI SN65DSI83,84,85 driver

 *

 * Currently supported:

 * - SN65DSI83

 *   = 1x Single-link DSI ~ 1x Single-link LVDS

 *   - Supported

 *   - Single-link LVDS mode tested

 * - SN65DSI84

 *   = 1x Single-link DSI ~ 2x Single-link or 1x Dual-link LVDS

 *   - Supported

 *   - Dual-link LVDS mode tested

 *   - 2x Single-link LVDS mode unsupported

 *     (should be easy to add by someone who has the HW)

 * - SN65DSI85

 *   = 2x Single-link or 1x Dual-link DSI ~ 2x Single-link or 1x Dual-link LVDS

 *   - Unsupported

 *     (should be easy to add by someone who has the HW)

 *

 * Copyright (C) 2021 Marek Vasut <marex@denx.de>

 *

 * Based on previous work of:

 * Valentin Raevsky <valentin@compulab.co.il>

 * Philippe Schenker <philippe.schenker@toradex.com>

 ID registers */

 Reset and clock registers */

 DSI registers */

 DSI85-only */

 DSI85-only */

 DSI85-only */

 LVDS registers */

 0:AB 1:A-only */

 Video registers */

 IRQ registers */

	/*

	 * Reset the chip, pull EN line low for t_reset=10ms,

	 * then high for t_en=1ms.

	/*

	 * The encoding of the LVDS_CLK_RANGE is as follows:

	 * 000 - 25 MHz <= LVDS_CLK < 37.5 MHz

	 * 001 - 37.5 MHz <= LVDS_CLK < 62.5 MHz

	 * 010 - 62.5 MHz <= LVDS_CLK < 87.5 MHz

	 * 011 - 87.5 MHz <= LVDS_CLK < 112.5 MHz

	 * 100 - 112.5 MHz <= LVDS_CLK < 137.5 MHz

	 * 101 - 137.5 MHz <= LVDS_CLK <= 154 MHz

	 * which is a range of 12.5MHz..162.5MHz in 50MHz steps, except that

	 * the ends of the ranges are clamped to the supported range. Since

	 * sn65dsi83_mode_valid() already filters the valid modes and limits

	 * the clock to 25..154 MHz, the range calculation can be simplified

	 * as follows:

	/*

	 * The encoding of the CHA_DSI_CLK_RANGE is as follows:

	 * 0x00 through 0x07 - Reserved

	 * 0x08 - 40 <= DSI_CLK < 45 MHz

	 * 0x09 - 45 <= DSI_CLK < 50 MHz

	 * ...

	 * 0x63 - 495 <= DSI_CLK < 500 MHz

	 * 0x64 - 500 MHz

	 * 0x65 through 0xFF - Reserved

	 * which is DSI clock in 5 MHz steps, clamped to 40..500 MHz.

	 * The DSI clock are calculated as:

	 *  DSI_CLK = mode clock * bpp / dsi_data_lanes / 2

	 * the 2 is there because the bus is DDR.

 The divider is (DSI_CLK / LVDS_CLK) - 1, which really is: */

 Get the LVDS format from the bridge state. */

		/*

		 * Some bridges still don't set the correct

		 * LVDS bus pixel format, use SPWG24 default

		 * format until those are fixed.

	/*

	 * Retrieve the CRTC adjusted mode. This requires a little dance to go

	 * from the bridge to the encoder, to the connector and to the CRTC.

 Clear reset, disable PLL */

 Reference clock derived from DSI link clock. */

 Set number of DSI lanes and LVDS link config. */

 CHB is DSI85-only, set to default on DSI83/DSI84 */

 No equalization. */

 Set up sync signal polarity. */

 Set up bits-per-pixel, 18bpp or 24bpp. */

 Set up LVDS format, JEIDA/Format 1 or SPWG/Format 2 */

 Set up LVDS output config (DSI84,DSI85) */

 32 + 1 pixel clock to ensure proper operation */

 Enable PLL */

 On failure, disable PLL again and exit. */

 Trigger reset after CSR register update. */

 Clear all errors that got asserted during initialization. */

 Clear reset, disable PLL */

 Put the chip in reset, pull EN line low. */

 LVDS output clock range 25..154 MHz */

 This is the DSI-end bus format */

 Odd pixels to LVDS Channel A, even pixels to B */

 Even pixels to LVDS Channel A, odd pixels to B */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NXP PTN3460 DP/LVDS bridge driver

 *

 * Copyright (C) 2013 Google, Inc.

 Load the selected edid into SRAM (accessed at PTN3460_EDID_ADDR) */

 Enable EDID emulation and select the desired EDID */

	/*

	 * There's a bug in the PTN chip where it falsely asserts hotplug before

	 * it is fully functional. We're forced to wait for the maximum start up

	 * time specified in the chip's datasheet to make sure we're really up.

 Let this driver create connector if requested */

	/*

	 * Request the reset pin low to avoid the bridge being

	 * initialized prematurely

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2020 Amarula Solutions(India)

 * Author: Jagan Teki <jagan@amarulasolutions.com>

	/**

	 * lsb nibble: 2nd nibble of hdisplay

	 * msb nibble: 2nd nibble of vdisplay

 dsi specific sequence */

 icn6211 specific sequence */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * i.MX8 NWL MIPI DSI host driver

 *

 * Copyright (C) 2017 NXP

 * Copyright (C) 2020 Purism SPC

 i.MX8 NWL quirks */

 i.MX8MQ errata E11418 */

 status of transmission */

 in bytes */

 in bytes */

	/*

	 * The DSI host controller needs this reset sequence according to NWL:

	 * 1. Deassert pclk reset to get access to DSI regs

	 * 2. Configure DSI Host and DPHY and enable DPHY

	 * 3. Deassert ESC and BYTE resets to allow host TX operations)

	 * 4. Send DSI cmds to configure peripheral (handled by panel drv)

	 * 5. Deassert DPI reset so DPI receives pixels and starts sending

	 *    DSI data

	 *

	 * TODO: Since panel_bridges do their DSI setup in enable we

	 * currently have 4. and 5. swapped.

 DSI clocks */

	/*

	 * hardware bug: the i.MX8MQ needs this clock on during reset

	 * even when not using LCDIF.

 dsi lanes */

/*

 * ps2bc - Picoseconds to byte clock cycles

/*

 * ui2bc - UI time periods to byte clock cycles

/*

 * us2bc - micro seconds to lp clock cycles

 values in byte clock cycles */

 In LP clock cycles */

	/*

	 * Adjusting input polarity based on the video mode results in

	 * a black screen so always pick active low:

 Get the RX header and parse it */

 read second byte */

 read first byte */

 Set word_count from previous header read */

 If RX payload is not yet received, wait for it */

 Read the RX payload */

 Send the payload, if any */

 Send the rest of the payload */

	/*

	 * Send the header

	 * header[0] = Virtual Channel + Data Type

	 * header[1] = Word Count LSB (LP) or first param (SP)

	 * header[2] = Word Count MSB (LP) or second param (SP)

 Send packet command */

 Create packet to be sent */

 Initiate the DSI packet transmision */

 Disabling the clock before the phy breaks enabling dsi again */

	/*

	 * So far the DPHY spec minimal timings work for both mixel

	 * dphy and nwl dsi host

 At least LCDIF + NWL needs active high sync */

	/*

	 * Do a full modeset if crtc_state->active is changed to be true.

	 * This ensures our ->mode_set() is called to get the DSI controller

	 * and the PHY ready to send DCS commands, when only the connector's

	 * DPMS is brought out of "Off" status.

 Save the new desired phy config */

 Step 1 from DSI reset-out instructions */

 Step 2 from DSI reset-out instructions */

 Step 3 from DSI reset-out instructions */

 Step 5 from DSI reset-out instructions */

 If MEDIA_BUS_FMT_FIXED is tested, return default bus format */

 sentinel */ }

 sentinel. */ },

 GPLv2 or later */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Parade PS8622 eDP/LVDS bridge driver

 *

 * Copyright (C) 2014 Google, Inc.

 Brightness scale on the Parade chip */

 Timings taken from the version 1.7 datasheet for the PS8622/PS8625 */

 HPD low */

 SW setting: [1:0] SW output 1.2V voltage is lower to 96% */

 RCO SS setting: [5:4] = b01 0.5%, b10 1%, b11 1.5% */

 [7] RCO SS enable */

	/* RPHY Setting

	 * [3:2] CDR tune wait cycle before measure for fine tune

	 * b00: 1us b01: 0.5us b10:2us, b11: 4us

 [3] RFD always on */

 CTN lock in/out: 20000ppm/80000ppm. Lock out 2 times. */

 2.7G CDR settings: NOF=40LSB for HBR CDR  setting */

 [1:0] Fmin=+4bands */

 [7:5] DCO_FTRNG=+-40% */

 1.62G CDR settings: [5:2]NOF=64LSB [1:0]DCO scale is 2/5 */

 Gitune=-37% */

 Fbstep=100% */

 [7] LOS signal disable */

 RPIO Setting: [7:4] LVDS driver bias current : 75% (250mV swing) */

 [7:6] Right-bar GPIO output strength is 8mA */

 EQ Training State Machine Setting, RCO calibration start */

 Logic, needs more than 10 I2C command */

 [4:0] MAX_LANE_COUNT set to max supported lanes */

 [4:0] LANE_COUNT_SET set to chosen lane count */

 HPD CP toggle enable */

 Counter number, add 1ms counter delay */

 [6]PWM function control by DPCD0040f[7], default is PWM block */

 04h Adjust VTotal toleranceto fix the 30Hz no display issue */

 DPCD00400='h00, Parade OUI ='h001cf8 */

 DPCD00401='h1c */

 DPCD00402='hf8 */

 DPCD403~408 = ASCII code, D2SLV5='h4432534c5635 */

 DPCD404 */

 DPCD405 */

 DPCD406 */

 DPCD407 */

 DPCD408 */

 DPCD40A, Initial Code major revision '01' */

 DPCD40B, Initial Code minor revision '05' */

 DPCD720, internal PWM */

 FFh for 100% brightness, 0h for 0% brightness */

 DPCD720, external PWM */

 Set LVDS output as 6bit-VESA mapping, single LVDS channel */

 Enable SSC set by register */

 Set SSC enabled and +/-1% central spreading */

 Logic end */

 MPU Clock source: LC => RCO */

 LC -> RCO */

 HPD high */

	/*

	 * T1 is the range of time that it takes for the power to rise after we

	 * enable the lcd/ps8622 fet. T2 is the range of time in which the

	 * data sheet specifies we should deassert the reset pin.

	 *

	 * If it takes T1.max for the power to rise, we need to wait atleast

	 * T2.min before deasserting the reset pin. If it takes T1.min for the

	 * power to rise, we need to wait at most T2.max before deasserting the

	 * reset pin.

 wait 20ms after RST high */

 Delay after panel is disabled */

	/*

	 * This doesn't matter if the regulators are turned off, but something

	 * else might keep them on. In that case, we want to assert the slp gpio

	 * to lower power.

	/*

	 * Sleep for at least the amount of time that it takes the power rail to

	 * fall to prevent asserting the rst gpio from doing anything.

	/*

	 * Assert the reset pin high to avoid the bridge being

	 * initialized prematurely

 Device type, max_lane_count */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Analog Devices ADV7511 HDMI transmitter driver

 *

 * Copyright 2012 Analog Devices Inc.

 ADI recommended values for proper operation. */

/* -----------------------------------------------------------------------------

 * Register access

 00 */

 10 */

 20 */

 30 */

 40 */

 50 */

 60 */

 70 */

 80 */

 90 */

 a0 */

 b0 */

 c0 */

 d0 */

 e0 */

 f0 */

/* -----------------------------------------------------------------------------

 * Hardware configuration

 Coefficients for adv7511 color space conversion */

 The AVI infoframe id is not configurable */

	/*

	 * The input style values documented in the datasheet don't match the

	 * hardware register field values :-(

 TODO Support input ID 6 */

		/*

		 * Documentation says the INT_ENABLE registers are reset in

		 * POWER_DOWN mode. My 7511w preserved the bits, however.

		 * Still, let's be safe and stick to the documentation.

	/*

	 * Per spec it is allowed to pulse the HPD signal to indicate that the

	 * EDID information has changed. Some monitors do this when they wakeup

	 * from standby or are enabled. When the HPD goes low the adv7511 is

	 * reset and the outputs are disabled which might cause the monitor to

	 * go to standby again. To avoid this we ignore the HPD pin for the

	 * first few seconds after enabling the output.

	/*

	 * Most of the registers are reset during power down or when HPD is low.

 TODO: setup additional power down modes */

/* -----------------------------------------------------------------------------

 * Interrupt and hotplug detection

	/*

	 * The bridge resets its registers on unplug. So when we get a plug

	 * event and we're already supposed to be powered, cycle the bridge to

	 * restore its state.

/* -----------------------------------------------------------------------------

 * EDID retrieval

		/* Break this apart, hopefully more I2C controllers will

		 * support 64 byte transfers than 256 byte transfers

/* -----------------------------------------------------------------------------

 * ADV75xx helpers

 Reading the EDID only works if the device is powered */

 Reset the EDID_I2C_ADDR register as it might be cleared */

	/* The chip resets itself when the cable is disconnected, so in case

	 * there is a pending HPD interrupt and the cable is connected there was

	 * at least one transition from disconnected to connected and the chip

 Renable HPD sensing */

 The hardware vsync generator has a off-by-one bug */

		/**

		 * If the input signal is always low or always high we want to

		 * invert or let it passthrough depending on the polarity of the

		 * current mode.

	/*

	 * TODO Test first order 4:2:2 to 4:4:4 up conversion method, which is

	 * supposed to give better results.

/* -----------------------------------------------------------------------------

 * DRM Connector Operations

/* -----------------------------------------------------------------------------

 * DRM Bridge Operations

/* -----------------------------------------------------------------------------

 * Probe & remove

 Hardcode the sync pulse configurations for now. */

	/*

	 * The power down GPIO is optional. If present, toggle it from active to

	 * inactive to wake up the encoder.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016, The Linux Foundation. All rights reserved.

 2, 3, 4 lanes */

 set pixel clock divider mode */

 horizontal porch params */

 vertical porch params */

 set number of dsi lanes */

 reset internal timing generator */

 disable internal timing generator */

 enable hdmi */

 disable test mode */

 disable hdmi */

 disable internal timing generator */

 TODO: Check if these need to be parsed by DT or not */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Analog Devices ADV7511 HDMI transmitter driver

 *

 * Copyright 2012 Analog Devices Inc.

 * Copyright (c) 2016, Linaro Limited

 hide Audio infoframe updates */

 enable N/CTS, enable Audio sample packets */

 enable N/CTS */

 not copyrighted */

 enable audio infoframes */

 AV mute disable */

 use Audio infoframe updated info */

 enable SPDIF receiver */

	/*

	 * HDMI sound should be located as reg = <2>

	 * Then, it is sound port 0

 SPDX-License-Identifier: GPL-2.0-only

/*

 * adv7511_cec.c - Analog Devices ADV7511/33 cec driver

 *

 * Copyright 2017 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

		/*

		 * We set this status bit since this hardware performs

		 * retransmissions.

 toggle to re-enable rx 1 */

 power up cec section */

 legacy mode and clear all rx buffers */

 initially disable tx */

 enabled irqs: */

 tx: ready */

 tx: arbitration lost */

 tx: retry timeout */

 rx: ready 1 */

 disable address mask 1-3 */

 power down cec section */

 enable address mask 0 */

 set address for mask 0 */

 enable address mask 1 */

 set address for mask 1 */

 enable address mask 2 */

 set address for mask 1 */

	/*

	 * The number of retries is the number of attempts - 1, but retry

	 * at least once. It's not clear if a value of 0 is allowed, so

	 * let's do at least one retry.

 blocking, clear cec tx irq status */

 write data */

 set length (data + header) */

 start transmit, enable tx */

 cec soft reset */

 legacy mode */

 SPDX-License-Identifier: GPL-2.0

/*

 * dw-hdmi-i2s-audio.c

 *

 * Copyright (c) 2017 Renesas Solutions Corp.

 * Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

 it cares I2S only */

 Reset the FIFOs before applying new params */

 Enable the required i2s lanes */

 Fall-thru */

	/*

	 * HDMI sound should be located as reg = <2>

	 * Then, it is sound port 0

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DesignWare HDMI audio driver

 *

 * Written and tested against the Designware HDMI Tx found in iMX6.

 Provide some bits rather than bit offsets */

/*

 * The default mapping of ALSA channels to HDMI channels and speaker

 * allocation bits.  Note that we can't do channel remapping here -

 * channels must be in the same order.

 *

 * Mappings for alsa-lib pcm/surround*.conf files:

 *

 *		Front	Sur4.0	Sur4.1	Sur5.0	Sur5.1	Sur7.1

 * Channels	2	4	6	6	6	8

 *

 * Our mapping from ALSA channel to CEA686D speaker name and HDMI channel:

 *

 *				Number of ALSA channels

 * ALSA Channel	2	3	4	5	6	7	8

 * 0		FL:0	=	=	=	=	=	=

 * 1		FR:1	=	=	=	=	=	=

 * 2			FC:3	RL:4	LFE:2	=	=	=

 * 3				RR:5	RL:4	FC:3	=	=

 * 4					RR:5	RL:4	=	=

 * 5						RR:5	=	=

 * 6							RC:6	=

 * 7							RLC/FRC	RLC/FRC

 FL,FR */

 FL,FR,FC */

 FL,FR,RL,RR */

 FL,FR,LFE,RL,RR */

 FL,FR,LFE,FC,RL,RR */

 FL,FR,LFE,FC,RL,RR,RC */

 FL,FR,LFE,FC,RL,RR,[FR]RC,[FR]LC */

/*

 * Convert to hardware format: The userspace buffer contains IEC958 samples,

 * with the PCUV bits in bits 31..28 and audio samples in bits 27..4.  We

 * need these to be in bits 27..24, with the IEC B bit in bit 28, and audio

 * samples in 23..0.

 *

 * Default preamble in bits 3..0: 8 = block start, 4 = even 2 = odd

 *

 * Ideally, we could do with having the data properly formatted in userspace.

 Clear all irqs before enabling irqs and starting DMA */

 Setup the hardware start/stop addresses */

 Disable interrupts before disabling DMA */

 ERR004323: must limit to 8k */

 Limit the buffer size to the size of the preallocated buffer */

 Clear FIFO */

 Configure interrupt polarities */

 Keep interrupts masked, and clear any pending */

 Un-mute done interrupt */

 Mute all interrupts */

 Allocate the PCM runtime buffer, which is exposed to userspace. */

 Setup as per 3.0.5 FSL 4.1.0 BSP */

 NOTREACHED */

 Minimum number of bytes in the fifo. */

	/*

	 * We are unable to report the exact hardware position as

	 * reading the 32-bit DMA position using 8-bit reads is racy.

	/*

	 * To support 8-channel 96kHz audio reliably, we need 512k

	 * to satisfy alsa with our restricted period (ERR004323).

/*

 * This code is fine, but requires implementation in the dw_hdmi_trigger()

 * method which is currently missing as I have no way to test this.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Designware HDMI CEC driver

 *

 * Copyright (C) 2015-2017 Russell King.

	/*

	 * Our device is just a convenience - we want to link to the real

	 * hardware device here, so that userspace can see the association

	 * between the HDMI hardware and its associated CEC chardev.

 override the module pointer */

	/*

	 * CEC documentation says we must not call cec_delete_adapter

	 * after a successful call to cec_register_adapter().

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DesignWare High-Definition Multimedia Interface (HDMI) driver

 *

 * Copyright (C) 2013-2015 Mentor Graphics Inc.

 * Copyright (C) 2011-2013 Freescale Semiconductor, Inc.

 * Copyright (C) 2010, Guennadi Liakhovetski <g.liakhovetski@gmx.de>

 DW-HDMI Controller >= 0x200a are at least compliant with SCDC version 1 */

 used to serialize data transfers */

 for state below and previous_mode */

 mutex-protected force state */

 current connector (only valid when !disabled) */

 DRM has disabled our bridge */

 indicates the bridge is on */

 rxsense state */

 desired phy int mask settings */

 clock disable register */

 Software reset */

 Set Standard Mode speed (determined to be 100KHz on iMX6) */

 Set done, not acknowledged and arbitration interrupt polarities */

 Clear DONE and ERROR interrupts */

 Mute DONE and ERROR interrupts */

 If no unwedge state then give up */

	/*

	 * This is a huge hack to workaround a problem where the dw_hdmi i2c

	 * bus could sometimes get wedged.  Once wedged there doesn't appear

	 * to be any way to unwedge it (including the HDMI_I2CM_SOFTRSTZ)

	 * other than pulsing the SDA line.

	 *

	 * We appear to be able to pulse the SDA line (in the eyes of dw_hdmi)

	 * by:

	 * 1. Remux the pin as a GPIO output, driven low.

	 * 2. Wait a little while.  1 ms seems to work, but we'll do 10.

	 * 3. Immediately jump to remux the pin as dw_hdmi i2c again.

	 *

	 * At the moment of remuxing, the line will still be low due to its

	 * recent stint as an output, but then it will be pulled high by the

	 * (presumed) external pullup.  dw_hdmi seems to see this as a rising

	 * edge and that seems to get it out of its jam.

	 *

	 * This wedging was only ever seen on one TV, and only on one of

	 * its HDMI ports.  It happened when the TV was powered on while the

	 * device was plugged in.  A scope trace shows the TV bringing both SDA

	 * and SCL low, then bringing them both back up at roughly the same

	 * time.  Presumably this confuses dw_hdmi because it saw activity but

	 * no real STOP (maybe it thinks there's another master on the bus?).

	 * Giving it a clean rising edge of SDA while SCL is already high

	 * presumably makes dw_hdmi see a STOP which seems to bring dw_hdmi out

	 * of its stupor.

	 *

	 * Note that after coming back alive, transfers seem to immediately

	 * resume, so if we unwedge due to a timeout we should wait a little

	 * longer for our transfer to finish, since it might have just started

	 * now.

 If we can't unwedge, return timeout */

 We tried to unwedge; give it another chance */

 Check for error condition on the bus */

 Use the first write byte as register address */

		/*

		 * The internal I2C controller does not support the multi-byte

		 * read and write operations needed for DDC/CI.

		 * TOFIX: Blacklist the DDC/CI address until we filter out

		 * unsupported I2C operations.

 Unmute DONE and ERROR interrupts */

 Set slave device address taken from the first I2C message */

 Set slave device register address on transfer */

 Set segment pointer for I2C extended read mode operation */

 Mute DONE and ERROR interrupts */

 Must be set/cleared first */

 nshift factor = 0 */

 Use automatic CTS generation mode when CTS is not set */

/*

 * When transmitting IEC60958 linear PCM audio, these registers allow to

 * configure the channel status information of all the channel status

 * bits in the IEC60958 frame. For the moment this configuration is only

 * used when the I2S audio interface, General Purpose Audio (GPA),

 * or AHB audio DMA (AHBAUDDMA) interface is active

 * (for S/PDIF interface this information comes from the stream).

	/*

	 * Set channel status register for frequency and word length.

	 * Use default values for other registers.

 Only compute CTS when using internal AHB audio */

		/*

		 * Compute the CTS value from the N value.  Note that CTS and N

		 * can be up to 20 bits in total, so we need 64-bit math.  Also

		 * note that our TDMS clock is not fully accurate; it is

		 * accurate to kHz.  This can introduce an unnecessary remainder

		 * in the calculation below, so we don't try to warn about that.

	/*

	 * For >2 channel PCM audio, we need to select layout 1

	 * and set an appropriate channel map.

 Set the audio infoframes channel count */

/*

 * this submodule is responsible for the video data synchronization.

 * for example, for RGB 4:4:4 input, the data map is defined as

 *			pin{47~40} <==> R[7:0]

 *			pin{31~24} <==> G[7:0]

 *			pin{15~8}  <==> B[7:0]

 Enable TX stuffing: When DE is inactive, fix the output data to 0 */

 The CSC registers are sequential, alternating MSB then LSB */

 YCC422 interpolation to 444 mode */

 Configure the CSC registers */

/*

 * HDMI video packetizer is used to packetize the data.

 * for example, if input is YCC422 mode or repeater is used,

 * data should be repacked this module can be bypassed.

 set the packetizer registers */

 Data from pixel repeater block */

 data from packetizer block */

/* -----------------------------------------------------------------------------

 * Synopsys PHY Handling

 Filter out invalid setups to avoid configuring SCDC and scrambling */

 Completely disable SCDC support for older controllers */

 Disable if no DDC bus */

 Disable if SCDC is not supported, or if an HF-VSDB block is absent */

	/*

	 * Disable if display only support low TMDS rates and scrambling

	 * for low rates is not supported either

/*

 * HDMI2.0 Specifies the following procedure for High TMDS Bit Rates:

 * - The Source shall suspend transmission of the TMDS clock and data

 * - The Source shall write to the TMDS_Bit_Clock_Ratio bit to change it

 * from a 0 to a 1 or from a 1 to a 0

 * - The Source shall allow a minimum of 1 ms and a maximum of 100 ms from

 * the time the TMDS_Bit_Clock_Ratio bit is written until resuming

 * transmission of TMDS clock and data

 *

 * To respect the 100ms maximum delay, the dw_hdmi_set_high_tmds_clock_ratio()

 * helper should called right before enabling the TMDS Clock and Data in

 * the PHY configuration callback.

 Control for TMDS Bit Period/TMDS Clock-Period Ratio */

 PHY reset. The reset signal is active high on Gen2 PHYs. */

	/*

	 * Wait for TX_PHY_LOCK to be deasserted to indicate that the PHY went

	 * to low power mode.

 Toggle TMDS enable. */

 Wait for PHY PLL lock */

/*

 * PHY configuration function for the DWC HDMI 3D TX PHY. Based on the available

 * information the DWC MHL PHY has the same register layout and is thus also

 * supported by this function.

 TOFIX Will need 420 specific PHY configuration tables */

 PLL/MPLL Cfg - always match on final entry */

 Override and disable clock termination. */

 Leave low power consumption mode by asserting SVSRET. */

 Write to the PHY as configured by the platform */

 Wait for resuming transmission of TMDS clock and data */

 HDMI Phy spec says to do the phy initialization sequence twice */

	/*

	 * Configure the PHY RX SENSE and HPD interrupts polarities and clear

	 * any pending interrupt.

 Enable cable hot plug irq. */

 Clear and unmute interrupts. */

/* -----------------------------------------------------------------------------

 * HDMI TX Setup

 disable rx detect */

 Initialise info frame from DRM mode */

 Set up colorimetry */

 Carries no data */

	/*

	 * The Designware IP uses a different byte format from standard

	 * AVI info frames, though generally the bits are in the correct

	 * bytes.

	/*

	 * AVI data byte 1 differences: Colorspace in bits 0,1 rather than 5,6,

	 * scan info in bits 4,5 rather than 0,1 and active aspect present in

	 * bit 6 rather than 4.

 AVI data byte 2 differences: none */

 AVI data byte 3 differences: none */

 AVI data byte 4 differences: none */

 AVI Data Byte 5- set up input and output pixel repetition */

	/*

	 * AVI data byte 5 differences: content type in 0,1 rather than 4,5,

	 * ycc range in bits 2,3 rather than 6,7

 AVI Data Bytes 6-13 */

		/*

		 * Going into that statement does not means vendor infoframe

		 * fails. It just informed us that vendor infoframe is not

		 * needed for the selected mode. Only 4k or stereoscopic 3D

		 * mode requires vendor infoframe. So just simply return.

 Set the length of HDMI vendor specific InfoFrame payload */

 Set 24bit IEEE Registration Identifier */

 Set HDMI_Video_Format and HDMI_VIC/3D_Structure */

 Packet frame interpolation */

 Auto packets per frame and line spacing */

 Configures the Frame Composer On RDRB mode */

 Set up HDMI_FC_INVIDCONF */

	/*

	 * When we're setting a YCbCr420 mode, we need

	 * to adjust the horizontal timing to suit.

	/*

	 * When we're setting an interlaced mode, we need

	 * to adjust the vertical timing to suit.

 Scrambling Control */

			/*

			 * HDMI2.0 Specifies the following procedure:

			 * After the Source Device has determined that

			 * SCDC_Present is set (=1), the Source Device should

			 * write the accurate Version of the Source Device

			 * to the Source Version field in the SCDCS.

			 * Source Devices compliant shall set the

			 * Source Version = 1.

 Enabled Scrambling in the Sink */

			/*

			 * To activate the scrambler feature, you must ensure

			 * that the quasi-static configuration bit

			 * fc_invidconf.HDCP_keepout is set at configuration

			 * time, before the required mc_swrstzreq.tmdsswrst_req

			 * reset request is issued.

 Set up horizontal active pixel width */

 Set up vertical active lines */

 Set up horizontal blanking pixel region width */

 Set up vertical blanking pixel region width */

 Set up HSYNC active edge delay width (in pixel clks) */

 Set up VSYNC active edge delay (in lines) */

 Set up HSYNC active pulse width (in pixel clks) */

 Set up VSYNC active edge delay (in lines) */

 HDMI Initialization Step B.4 */

 control period minimum duration */

 Set to fill TMDS data channels */

 Enable pixel clock and tmds data path */

 Enable csc path */

 Workaround to clear the overflow condition */

	/*

	 * Under some circumstances the Frame Composer arithmetic unit can miss

	 * an FC register write due to being busy processing the previous one.

	 * The issue can be worked around by issuing a TMDS software reset and

	 * then write one of the FC registers several times.

	 *

	 * The number of iterations matters and depends on the HDMI TX revision

	 * (and possibly on the platform). So far i.MX6Q (v1.30a), i.MX6DL

	 * (v1.31a) and multiple Allwinner SoCs (v1.32a) have been identified

	 * as needing the workaround, with 4 iterations for v1.30a and 1

	 * iteration for others.

	 * The Amlogic Meson GX SoCs (v2.01a) have been identified as needing

	 * the workaround with a single iteration.

	 * The Rockchip RK3288 SoC (v2.00a) and RK3328/RK3399 SoCs (v2.11a) have

	 * been identified as needing the workaround with a single iteration.

 TMDS software reset */

 TOFIX: Get input encoding from plat data or fallback to none */

 HDMI Initialization Step B.1 */

 HDMI Initializateion Step B.2 */

 HDMI Initialization Step B.3 */

 HDMI Initialization Step E - Configure audio */

 not for DVI mode */

 HDMI Initialization Step F - Configure AVI InfoFrame */

	/*

	 * Boot up defaults are:

	 * HDMI_IH_MUTE   = 0x03 (disabled)

	 * HDMI_IH_MUTE_* = 0x00 (enabled)

	 *

	 * Disable top level interrupt bits in HDMI block

 by default mask all interrupts */

 Disable interrupts in the IH_MUTE_* registers */

 Enable top level interrupt bits in HDMI block */

	/*

	 * The curr_conn field is guaranteed to be valid here, as this function

	 * is only be called when !hdmi->disabled.

/*

 * Adjust the detection of RXSENSE according to whether we have a forced

 * connection mode enabled, or whether we have been disabled.  There is

 * no point processing RXSENSE interrupts if we have a forced connection

 * state, or DRM has us disabled.

 *

 * We also disable rxsense interrupts when we think we're disconnected

 * to avoid floating TDMS signals giving false rxsense interrupts.

 *

 * Note: we still need to listen for HPD interrupts even when DRM has us

 * disabled so that we can detect a connect event.

/* -----------------------------------------------------------------------------

 * DRM Connector Operations

	/*

	 * drm_connector_attach_max_bpc_property() requires the

	 * connector to have a state.

/* -----------------------------------------------------------------------------

 * DRM Bridge Operations

/*

 * Possible output formats :

 * - MEDIA_BUS_FMT_UYYVYY16_0_5X48,

 * - MEDIA_BUS_FMT_UYYVYY12_0_5X36,

 * - MEDIA_BUS_FMT_UYYVYY10_0_5X30,

 * - MEDIA_BUS_FMT_UYYVYY8_0_5X24,

 * - MEDIA_BUS_FMT_YUV16_1X48,

 * - MEDIA_BUS_FMT_RGB161616_1X48,

 * - MEDIA_BUS_FMT_UYVY12_1X24,

 * - MEDIA_BUS_FMT_YUV12_1X36,

 * - MEDIA_BUS_FMT_RGB121212_1X36,

 * - MEDIA_BUS_FMT_UYVY10_1X20,

 * - MEDIA_BUS_FMT_YUV10_1X30,

 * - MEDIA_BUS_FMT_RGB101010_1X30,

 * - MEDIA_BUS_FMT_UYVY8_1X16,

 * - MEDIA_BUS_FMT_YUV8_1X24,

 * - MEDIA_BUS_FMT_RGB888_1X24,

 Can return a maximum of 11 possible output formats for a mode/connector */

 If dw-hdmi is the only bridge, avoid negociating with ourselves */

	/*

	 * If the current mode enforces 4:2:0, force the output but format

	 * to 4:2:0 and do not add the YUV422/444/RGB formats

 Order bus formats from 16bit to 8bit if supported */

 Default 8bit fallback */

	/*

	 * Order bus formats from 16bit to 8bit and from YUV422 to RGB

	 * if supported. In any case the default RGB888 format is added

 Default 8bit RGB fallback */

/*

 * Possible input formats :

 * - MEDIA_BUS_FMT_RGB888_1X24

 * - MEDIA_BUS_FMT_YUV8_1X24

 * - MEDIA_BUS_FMT_UYVY8_1X16

 * - MEDIA_BUS_FMT_UYYVYY8_0_5X24

 * - MEDIA_BUS_FMT_RGB101010_1X30

 * - MEDIA_BUS_FMT_YUV10_1X30

 * - MEDIA_BUS_FMT_UYVY10_1X20

 * - MEDIA_BUS_FMT_UYYVYY10_0_5X30

 * - MEDIA_BUS_FMT_RGB121212_1X36

 * - MEDIA_BUS_FMT_YUV12_1X36

 * - MEDIA_BUS_FMT_UYVY12_1X24

 * - MEDIA_BUS_FMT_UYYVYY12_0_5X36

 * - MEDIA_BUS_FMT_RGB161616_1X48

 * - MEDIA_BUS_FMT_YUV16_1X48

 * - MEDIA_BUS_FMT_UYYVYY16_0_5X48

 Can return a maximum of 3 possible input formats for an output format */

 If MEDIA_BUS_FMT_FIXED is tested, return default bus format */

 8bit */

 10bit */

 12bit */

 16bit */

YUV 4:2:0 */

 We don't support double-clocked modes */

 Store the display mode for plugin/DKMS poweron events */

/* -----------------------------------------------------------------------------

 * IRQ Handling

		/*

		 * If the RX sense status indicates we're disconnected,

		 * clear the software rxsense status.

		/*

		 * Only set the software rxsense status when both

		 * rxsense and hpd indicates we're connected.

		 * This avoids what seems to be bad behaviour in

		 * at least iMX6S versions of the phy.

	/*

	 * RX sense tells us whether the TDMS transmitters are detecting

	 * load - in other words, there's something listening on the

	 * other end of the link.  Use this to decide whether we should

	 * power on the phy as HPD may be toggled by the sink to merely

	 * ask the source to re-read the EDID.

 Vendor PHYs require support from the glue layer. */

 Synopsys PHYs are handled internally. */

	/*

	 * Reset HDMI DDC I2C master controller and mute I2CM interrupts.

	 * Even if we are using a separate i2c adapter doing this doesn't

	 * hurt.

/* -----------------------------------------------------------------------------

 * Probe/remove API, used from platforms based on the DRM bridge API.

		/*

		 * On platforms whose bindings don't make the output port

		 * mandatory (such as Rockchip) the plat_data->output_port

		 * field isn't set, so it's safe to make this a fatal error.

 Product and revision IDs */

	/*

	 * To prevent overflows in HDMI_IH_FC_STAT2, set the clk regenerator

	 * N and cts values before enabling phy

 If DDC bus is not specified, try to register HDMI I2C bus */

 Look for (optional) stuff related to unwedging */

 Disable all interrupts */

/* -----------------------------------------------------------------------------

 * Bind/unbind API, used from platforms based on the component framework.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (c) 2016, Fuzhou Rockchip Electronics Co., Ltd

 * Copyright (C) STMicroelectronics SA 2017

 *

 * Modified by Philippe Cornu <philippe.cornu@st.com>

 * This generic Synopsys DesignWare MIPI DSI host driver is based on the

 * Rockchip version from rockchip/dw-mipi-dsi.c with phy & bridge APIs.

 IP version 1.31 */

 CONFIG_DEBUG_FS */

 per lane */

 CONFIG_DEBUG_FS */

 dual-dsi master ptr */

 dual-dsi slave ptr */

/*

 * Check if either a link to a master or slave is present

/*

 * The controller should generate 2 frames before

 * preparing the peripheral.

	/*

	 * TODO dw drv improvements

	 * largest packet sizes during hfp or during vsa/vpb/vfp

	 * should be computed according to byte lane, lane number and only

	 * if sending lp cmds in high speed is enable (PHY_TXREQUESTCLKHS)

 Wait end of the read operation */

 Read fifo must not be empty before all bytes are read */

	/*

	 * TODO dw drv improvements

	 * enabling low power is panel-dependent, we should use the

	 * panel configuration here...

 CONFIG_DEBUG_FS */

 in MHz */

	/*

	 * The maximum permitted escape clock is 20MHz and it is derived from

	 * lanebyteclk, which is running at "lane_mbps / 8".

 Default to 20MHz */

	/*

	 * We want :

	 *     (lane_mbps >> 3) / esc_clk_division < X

	 * which is:

	 *     (lane_mbps >> 3) / X > esc_clk_division

	/*

	 * TODO dw drv improvements

	 * timeout clock division should be computed with the

	 * high speed transmission counter timeout and byte lane...

	/*

	 * TODO dw drv improvements

	 * only burst mode is supported here. For non-burst video modes,

	 * we should compute DSI_VID_PKT_SIZE, DSI_VCCR.NUMC &

	 * DSI_VNPCR.NPSIZE... especially because this driver supports

	 * non-burst video modes, see dw_mipi_dsi_video_mode_config()...

	/*

	 * TODO dw drv improvements

	 * compute high speed transmission counter timeout according

	 * to the timeout clock division (TO_CLK_DIVISION) and byte lane...

	/*

	 * TODO dw drv improvements

	 * the Bus-Turn-Around Timeout Counter should be computed

	 * according to byte lane...

 Get lane byte clock cycles. */

	/*

	 * TODO dw drv improvements

	 * computations below may be improved...

	/*

	 * TODO dw drv improvements

	 * data & clock lane timers should be computed according to panel

	 * blankings and to the automatic clock lane control mode...

	 * note: DSI_PHY_TMR_CFG.MAX_RD_TIME should be in line with

	 * DSI_CMD_MODE_CFG.MAX_RD_PKT_SIZE_LP (see CMD_MODE_ALL_LP)

	/*

	 * TODO dw drv improvements

	 * stop wait time should be the maximum between host dsi

	 * and panel stop wait times

 Clear PHY state */

	/*

	 * Switch to command mode before panel-bridge post_disable &

	 * panel unprepare.

	 * Note: panel-bridge disable & panel disable has been called

	 * before by the drm framework.

	/*

	 * TODO Only way found to call panel-bridge post_disable &

	 * panel unprepare before the dsi "final" disable...

	 * This needs to be fixed in the drm_bridge framework and the API

	 * needs to be updated to manage our own call chains...

 this instance is the slave, so add the master's lanes */

 this instance is the master, so add the slave's lanes */

 single-dsi, so no other instance to consider */

 Switch to cmd mode for panel-bridge pre_enable & panel prepare */

 Switch to video mode for panel-bridge enable & panel enable */

 Set the encoder type as caller does not know it */

 Attach the panel-bridge to the dsi bridge */

 CONFIG_DEBUG_FS */

	/*

	 * Note that the reset was not defined in the initial device tree, so

	 * we have to be prepared for it not being found.

 introduce controllers to each other */

 migrate settings for already attached displays */

/*

 * Probe/remove API, used from platforms based on the DRM bridge API.

/*

 * Bind/unbind API, used from platforms based on the component framework.

 SPDX-License-Identifier: GPL-2.0

/*

 * TI j721e Cadence MHDP8546 DP wrapper

 *

 * Copyright (C) 2020 Texas Instruments Incorporated - http://www.ti.com/

 * Author: Jyri Sarha <jsarha@ti.com>

 TODO turn DPTX_IPCFG fw_mem_clk_en at pm_runtime_suspend. */

	/*

	 * Enable VIF_0 and select DPI2 as its input. DSS0 DPI0 is connected

	 * to eDP DPI2. This is the only supported SST configuration on

	 * J721E.

 Put everything to defaults  */

 SPDX-License-Identifier: GPL-2.0

/*

 * Cadence MHDP8546 DP bridge driver.

 *

 * Copyright (C) 2020 Cadence Design Systems, Inc.

 *

 * Authors: Quentin Schulz <quentin.schulz@free-electrons.com>

 *          Swapnil Jakhade <sjakhade@cadence.com>

 *          Yuti Amonkar <yamonkar@cadence.com>

 *          Tomi Valkeinen <tomi.valkeinen@ti.com>

 *          Jyri Sarha <jsarha@ti.com>

 *

 * TODO:

 *     - Implement optimized mailbox communication using mailbox interrupts

 *     - Add support for power management

 *     - Add support for features like audio, MST and fast link training

 *     - Implement request_fw_cancel to handle HW_STATE

 *     - Fix asynchronous loading of firmware implementation

 *     - Add DRM helper function for cdns_mhdp_lower_link_rate

 read the header of the message */

		/*

		 * If the message in mailbox is not what we want, we need to

		 * clear the mailbox by reading its contents.

 Returned address value should be the same as requested */

 read the firmware state */

 For DPCD read response header */

 Yes, read the DPCD read command response */

/**

 * cdns_mhdp_link_power_up() - power up a DisplayPort link

 * @aux: DisplayPort AUX channel

 * @link: pointer to a structure containing the link configuration

 *

 * Returns 0 on success or a negative error code on failure.

 DP_SET_POWER register is only available on DPCD v1.1 and later */

	/*

	 * According to the DP 1.1 specification, a "Sink Device must exit the

	 * power saving state within 1 ms" (Section 2.5.3.1, Table 5-52, "Sink

	 * Control Field" (register 0x600).

/**

 * cdns_mhdp_link_power_down() - power down a DisplayPort link

 * @aux: DisplayPort AUX channel

 * @link: pointer to a structure containing the link configuration

 *

 * Returns 0 on success or a negative error code on failure.

 DP_SET_POWER register is only available on DPCD v1.1 and later */

/**

 * cdns_mhdp_link_configure() - configure a DisplayPort link

 * @aux: DisplayPort AUX channel

 * @link: pointer to a structure containing the link configuration

 *

 * Returns 0 on success or a negative error code on failure.

 Check if SSC is supported by both sides */

		/*

		 * Older FW versions with major number 1, used to store FW

		 * version information by storing repository revision number

		 * in registers. This is for identifying these FW versions.

 To identify newer FW versions with major number 2 onwards. */

 Release uCPU reset and stall it. */

 Leave debug mode, release stall */

	/*

	 * Wait for the KEEP_ALIVE "message" on the first 8 bits.

	 * Updated each sched "tick" (~2ms)

 Init events to 0 as it's not cleared by FW at boot but on read */

 Activate uCPU */

	/*

	 * Here we must keep the lock while enabling the interrupts

	 * since it would otherwise be possible that interrupt enable

	 * code is executed after the bridge is detached. The similar

	 * situation is not possible in attach()/detach() callbacks

	 * since the hw_state changes from MHDP_HW_READY to

	 * MHDP_HW_STOPPED happens only due to driver removal when

	 * bridge should already be detached.

	/*

	 *  XXX how to make sure the bridge is still attached when

	 *      calling drm_kms_helper_hotplug_event() after releasing

	 *      the lock? We should not hold the spin lock when

	 *      calling drm_kms_helper_hotplug_event() since it may

	 *      cause a dead lock. FB-dev console calls detect from the

	 *      same thread just down the call stack started here.

 Reset PHY configuration */

 Check if Voltage swing and pre-emphasis are within limits */

		/*

		 * Voltage swing level and pre-emphasis level combination is

		 * not allowed: leaving pre-emphasis as-is, and adjusting

		 * voltage swing.

 Enable link training TPS[eq_tps] in PHY */

 3.1.5.2 in DP Standard v1.4. Table 3-1 */

 Not all CR_DONE bits set */

		/*

		 * Voltage swing/pre-emphasis adjust requested

		 * during CR phase

 Reset PHY config */

 Reset PHY config */

 Get source capabilities based on PHY attributes */

 PHY uses Mb/s, DRM uses tens of kb/s. */

 Set SSC support */

 Set TPS support */

 Set fast link support */

 Disable framer for link training */

 Spread AMP if required, enable 8b/10b coding */

	/*

	 * HACK: Warn about unsupported display formats until we deal

	 *       with them correctly.

	/*

	 * mode->clock is expressed in kHz. Multiplying by bpp and dividing by 8

	 * we get the number of kB/s. DisplayPort applies a 8b-10b encoding, the

	 * value thus equals the bandwidth in 10kb/s units, which matches the

	 * units of the rate parameter.

 Enable SW event interrupts */

	/*

	 * If YCBCR supported and stream not SD, use ITU709

	 * Need to handle ITU version with YCBCR420 when supported

 Use VSC SDP for Y420 */

 Get rate in MSymbols per second per lane */

 Enable VIF clock for stream 0 */

 Disable VIF clock for stream 0 */

 Enable SW event interrupts */

 Getting event bits failed, bail out */

	/*

	 * If we get a HPD pulse event and we were and still are connected,

	 * check the link status. If link status is ok, there's nothing to do

	 * as we don't handle DP interrupts. If link status is bad, continue

	 * with full link setup.

		/*

		 * If everything looks fine, just return, as we don't handle

		 * DP IRQs.

 If link is bad, mark link as down so that we do a new LT */

 Grab the locks before changing connector property */

	/*

	 * Set connector link status to BAD and send a Uevent to notify

	 * userspace to do a modeset.

 Send Hotplug uevent so userspace can reprobe */

	/*

	 *  Calling drm_kms_helper_hotplug_event() when not attached

	 *  to drm device causes an oops because the drm_bridge->dev

	 *  is NULL. See cdns_mhdp_fw_cb() comments for details about the

	 *  problems related drm_kms_helper_hotplug_event() call.

 Initialize link rate and num of lanes to host values */

 The only currently supported format */

 Initialize the work for modeset in case of link train failure */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Cadence MHDP8546 DP bridge driver.

 *

 * Copyright (C) 2020 Cadence Design Systems, Inc.

 *

 read the header of the message */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

* Analogix DP (Display Port) core interface driver.

*

* Copyright (C) 2012 Samsung Electronics Co., Ltd.

* Author: Jingoo Han <jg1.han@samsung.com>

 SW defined function Normal operation */

	/*

	 * Some edp screen do not have hpd signal, so we can't just

	 * return failed when hpd plug in detect failed, DT property

	 * "force-hpd" would indicate whether driver need this.

	/*

	 * The eDP TRM indicate that if HPD_STATUS(RO) is 0, AUX CH

	 * will not work, so we need to give a force hpd action to

	 * set HPD_STATUS manually.

 Disable psr function */

 Main-Link transmitter remains active during PSR active states */

 Enable psr function */

 Set link rate and count as you want to establish*/

 Setup RX configuration */

 set enhanced mode if available */

 Set TX pre-emphasis to minimum */

 Wait for PLL lock */

 Set training pattern 1 */

 Set RX training pattern */

 set training pattern 2 for EQ */

 traing pattern Set to Normal */

 not all locked */

	/*

	 * For DP rev.1.1, Maximum link rate of Main Link lanes

	 * 0x06 = 1.62 Gbps, 0x0a = 2.7 Gbps

	 * For DP rev.1.2, Maximum link rate of Main Link lanes

	 * 0x06 = 1.62 Gbps, 0x0a = 2.7 Gbps, 0x14 = 5.4Gbps

	/*

	 * For DP rev.1.1, Maximum number of Main Link lanes

	 * 0x01 = 1 lane, 0x02 = 2 lanes, 0x04 = 4 lanes

	/*

	 * MACRO_RST must be applied after the PLL_LOCK to avoid

	 * the DP inter pair skew issue for at least 10 us

 Initialize by reading RX's DPCD */

 Setup TX lane count & rate */

 All DP analog module power up */

 Process here */

 source Set training pattern 1 */

 From DP spec, pattern must be on-screen for a minimum 500us */

 From DP spec, pattern must be on-screen for a minimum 500us */

 TODO: enhanced_mode?*/

	/*

	 * Useful for debugging issues with fast link training, disable for more

	 * speed

 Set to use the register calculated M/N video */

 For video bist, Video timing must be generated by register */

 Disable video mute */

 Configure video slave mode */

 Enable video */

 Keep the panel disabled while we configure video */

 Safe to enable the panel now */

 Check whether panel supports fast training */

 Prepare VSC packet as per EDP 1.4 spec, Table 6.9 */

 Prepare VSC packet as per EDP 1.4 spec, Table 6.9 */

/*

 * This function is a bit of a catch-all for panel preparation, hopefully

 * simplifying the logic of functions that need to prepare/unprepare the panel

 * below.

 *

 * If @prepare is true, this function will prepare the panel. Conversely, if it

 * is false, the panel will be unprepared.

 *

 * If @is_modeset_prepare is true, the function will disregard the current state

 * of the panel and either prepare/unprepare the panel based on @prepare. Once

 * it finishes, it will update dp->panel_is_modeset to reflect the current state

 * of the panel.

	/*

	 * Exit early if this is a temporary prepare/unprepare and we're already

	 * modeset (since we neither want to prepare twice or unprepare early).

	/*

	 * NOTE: the connector registration is implemented in analogix

	 * platform driver, that to say connector would be exist after

	 * plat_data->attch return, that's why we record the connector

	 * point after plat attached.

 Don't touch the panel if we're coming back from PSR */

	/*

	 * According to DP spec v1.3 chap 3.5.1.2 Link Training,

	 * We should first make sure the HPD signal is asserted high by device

	 * when we want to establish a link with it.

 Not a full enable, just disable PSR and continue */

 Don't do a full disable on PSR transitions */

 Input video interlaces & hsync pol & vsync pol */

 Input video dynamic_range & colorimetry */

 Input vide bpc and color_formats */

	/*

	 * NOTE: those property parsing code is used for providing backward

	 * compatibility for samsung platform.

	 * Due to we used the "of_property_read_u32" interfaces, when this

	 * property isn't present, the "video_info" can keep the original

	 * values and wouldn't be modified.

		/*

		 * Like Rk3288 DisplayPort TRM indicate that "Main link

		 * containing 4 physical lanes of 2.7/1.62 Gbps/lane".

		/*

		 * NOTE: those property parseing code is used for

		 * providing backward compatibility for samsung platform.

	/*

	 * platform dp driver need containor_of the plat_data to get

	 * the driver private data, so we need to store the point of

	 * plat_data, not the context of plat_data.

			/*

			 * phy itself is not enabled, so we can move forward

			 * assigning NULL to phy pointer.

 Try two different names */

		/*

		 * Set up the hotplug GPIO from the device tree as an interrupt.

		 * Simply specifying a different interrupt in the device tree

		 * doesn't work since we handle hotplug rather differently when

		 * using a GPIO.  We also need the actual GPIO specifier so

		 * that we can get the current state of the GPIO.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2020, Analogix Semiconductor. All rights reserved.

 *

/*

 * There is a sync issue while access I2C register between AP(CPU) and

 * internal firmware(OCM), to avoid the race condition, AP should access

 * the reserved slave address before slave address occurs changes.

 Set mute on flag */

 Clear mipi RX en */

 Mute off flag */

 Set MIPI RX EN */

 Channel num */

 FS */

 Word length */

 I2S */

 Audio change flag */

 Reduction of fraction a/b */

	/*

	 * In the end, make a, b larger to have higher ODFC PLL

	 * output frequency accuracy

 Pixel clock frequency is too high */

 Pixel clock frequency is too low */

 Patch to improve the accuracy */

 27,000,000 is not divisible by 7 */

 27,000,000 is not divisible by 11 */

 27,000,000 is not divisible by 13 or 14 */

 Config input reference clock frequency 27MHz/19.2MHz */

 Post divider */

 Add patch for MIS2-125 (5pcs ANX7625 fail ATE MBIST test) */

 Reset ODFC PLL */

/*

 * The MIPI source video data exist large variation (e.g. 59Hz ~ 61Hz),

 * anx7625 defined K ratio for matching MIPI input video clock and

 * DP output video clock. Increase K value can match bigger video data

 * variation. IVO panel has small variation than DP CTS spec, need

 * decrease the K value.

 Configure pixel clock */

 Lane count */

 Htotal */

 Hactive */

 HFP */

 HWS */

 HBP */

 Vactive */

 VFP */

 VWS */

 VBP */

 M value */

 N value */

 Swap MIPI-DSI data lane 3 P and N */

 Swap MIPI-DSI data lane 3 P and N */

 DSI clock settings */

	/*

	 * Decreased HS prepare timing delay from 160ns to 80ns work with

	 *     a) Dragon board 810 series (Qualcomm AP)

	 *     b) Moving Pixel DSI source (PG3A pattern generator +

	 *	P332 D-PHY Probe) default D-PHY timing

	 *	5ns/step

 Enable DSI mode*/

 Toggle m, n ready */

 Configure integer stable register */

 Power on MIPI RX */

 DSC disable */

 Set MIPI RX EN */

 Clear mute flag */

	/*

	 * Video disable: 0x72:08 bit 7 = 0;

	 * Audio disable: 0x70:87 bit 0 = 0;

 Set I2C read com 0x01 mot = 0 and read 16 bytes */

 Write address only */

 Write segment address */

 Data read */

 Set I2C read com 0x01 mot = 0 and read 16 bytes */

 Address initial */

 Check edid data */

 Reset aux channel */

 Power on pin enable */

 Power reset pin enable */

 Basic configurations of ANX7625 */

 Reset main ocm */

 Disable PD */

 Release main ocm */

 Check interface workable */

 Gpio for chip power enable */

 Gpio for chip reset */

 Not support HDCP */

 Try auth flag */

 Interrupt for DRM */

 HPD changed */

 Max 1200p at 5.4 Ghz, one lane, pixel clock 300M */

 HFP needs to be even */

 HBP needs to be even */

 HSYNC needs to be even */

	/*

	 * Once illegal timing detected, use default HFP, HSYNC, HBP

	 * This adjusting made for built-in eDP panel, for the externel

	 * DP monitor, may need return false.

 Adjust hfp if hfp less than HP_MIN */

		/*

		 * Balance total HBlanking pixel, if HBP does not have enough

		 * space, adjust HSYNC length, otherwise adjust HBP

 HBP not enough space */

		/*

		 * Balance total HBlanking pixel, if HBP hasn't enough space,

		 * adjust HSYNC length, otherwize adjust HBP

 HFP not enough space */

 Reconstruct timing */

 Add work function */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2016, Analogix Semiconductor.

 *

 * Based on anx7808 driver obtained from chromeos with copyright:

 * Copyright(c) 2013, Google Inc.

 27M */

	/*

	 * I2C Slave addresses of ANX7814 are mapped as TX_P0, TX_P1, TX_P2,

	 * RX_P0 and RX_P1.

 Sync detect change, GP set mute */

 Enable DDC stretch */

 TMDS phy initialization */

	/*

	 * REVISIT : It is writing to a RESERVED bits in Analog Control 0

	 * register.

	/*

	 * Write DP TX output emphasis precise tune bits.

 Set terminal resistor to 50 ohm */

 Enable aux double diff output */

	/*

	 * DP HDCP auto authentication wait timer (when downstream starts to

	 * auth, DP side will wait for this period then do auth automatically)

	/*

	 * Short the link integrity check timer to speed up bstatus

	 * polling for HDCP CTS item 1A-07

 Power down the main link by default */

 Gen m_clk with downspreading */

	/*

	 * BIT0: INT pin assertion polarity: 1 = assert high

	 * BIT1: INT pin output type: 0 = push/pull

 Power on registers module */

 Power on all modules */

	/*

	 * This delay seems to help keep the hardware in a good state. Without

	 * it, there are times where it fails silently.

 1.0V digital core power regulator  */

 GPIO for HPD */

 GPIO for chip power down */

 GPIO for chip reset */

 Get DPCD info */

 Clear channel x SERDES power down */

	/*

	 * Power up the sink (DP_SET_POWER register is only available on DPCD

	 * v1.1 and later).

		/*

		 * According to the DP 1.1 specification, a "Sink Device must

		 * exit the power saving state within 1 ms" (Section 2.5.3.1,

		 * Table 5-52, "Sink Control Field" (register 0x600).

 Possibly enable downspread on the sink */

 4000PPM */

 Set the lane count and the link rate on the sink */

 Start training on the source */

 Enable DP output */

 Register aux channel */

 Max 1200p at 5.4 Ghz, one lane */

 Power off all modules except configuration registers access */

 Cable is pulled, power on the chip */

 Free cached EDID */

 Make sure we are still powered after handle HPD events */

 Map slave addresses of ANX7814 */

 Look for supported chip ID */

 If cable is pulled out, just poweroff and wait for HPD event */

 sentinel */ }

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only */

/*

 * Copyright(c) 2016, Analogix Semiconductor.

 *

 * Based on anx7808 driver obtained from chromeos with copyright:

 * Copyright(c) 2013, Google Inc.

 Read the AUX channel access status */

	/*

	 * DP AUX CH Address Register #2, only update bits[3:0]

	 * [7:4] RESERVED

	 * [3:0] AUX_ADDR[19:16], Register control AUX CH address.

 The DP AUX transmit and receive buffer has 16 bytes. */

 Zero-sized messages specify address-only transactions. */

 For non-zero-sized set the length field. */

 When WRITE | MOT write values to data buffer */

 Write address and request */

 Start transaction */

 Read values from data buffer */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Analogix DP (Display port) core register interface driver.

 *

 * Copyright (C) 2012 Samsung Electronics Co., Ltd.

 * Author: Jingoo Han <jg1.han@samsung.com>

 Set interrupt pin assertion polarity as high */

 Clear pending regisers */

 0:mask,1: unmask */

 0: mask, 1: unmask */

 0: mask, 1: unmask */

 0: mask, 1: unmask */

		/*

		 * There is no bit named DP_PHY_PD, so We used DP_INC_BG

		 * to power off everything instead of DP_PHY_PD in

		 * Rockchip

 Power up PLL */

 Enable Serdes FIFO function and Link symbol clock domain module */

 Parse hotplug interrupt status register */

 Disable AUX channel module */

 Clear inerrupts related to AUX channel */

 AUX_BIT_PERIOD_EXPECTED_DELAY doesn't apply to Rockchip IP */

 Disable AUX transaction H/W retry */

 Receive AUX Channel DEFER commands equal to DEFFER_COUNT*64 */

 Enable AUX channel module */

 10 us is the minimum reset time. */

 Configure the input color depth, color space, dynamic range */

 Set Input Color YCbCr Coefficients to ITU601 or ITU709 */

 don't send info frame */

 configure single frame update mode */

 configure VSC HB0~HB3 */

 configure reused VSC PB0~PB3, magic number from vendor */

 configure DB0 / DB1 values */

 set reuse spd inforframe */

 mark info frame update */

 send info frame */

 Buffer size of AUX CH is 16 bytes */

 Clear AUX CH data buffer */

 Select DPCD device address */

 Enable AUX CH operation */

 Zero-sized messages specify address-only transactions. */

 TODO: Wait for an interrupt instead of looping? */

 Is AUX CH command reply received? */

 Clear interrupt source for AUX CH command reply */

 Clear interrupt source for AUX CH access error */

 Check if Rx sends defer */

 if aux err happen, reset aux */

 SPDX-License-Identifier: GPL-2.0-only */

/*

 * Copyright(c) 2016, Analogix Semiconductor.

 * Copyright(c) 2017, Icenowy Zheng <icenowy@aosc.io>

 *

 * Based on anx7808 driver obtained from chromeos with copyright:

 * Copyright(c) 2013, Google Inc.

 us */

 us */

 protect EDID access */

 I2C Slave addresses of ANX6345 are mapped as DPTX and SYS */

 Get DPCD info */

 Clear channel x SERDES power down */

	/*

	 * Power up the sink (DP_SET_POWER register is only available on DPCD

	 * v1.1 and later).

		/*

		 * According to the DP 1.1 specification, a "Sink Device must

		 * exit the power saving state within 1 ms" (Section 2.5.3.1,

		 * Table 5-52, "Sink Control Field" (register 0x600).

 Possibly enable downspread on the sink */

 4000PPM */

 Set the lane count and the link rate on the sink */

 Start training on the source */

 FIXME: colordepth is hardcoded for now */

 Force HPD */

 4 lanes */

 Reset AUX */

 Ensure reset is asserted before starting power on sequence */

 T1 - delay between VDD12 and VDD25 should be 0-2ms */

	/* T2 - delay between RESETN and all power rail stable,

	 * should be 2-5ms

 Power on registers module */

 Power on needed modules */

	/*

	 * This delay seems to help keep the hardware in a good state. Without

	 * it, there are times where it fails silently.

 Enable DP output */

 Force stream valid */

 Driver currently supports only 6bpc */

 Register aux channel */

 Max 1200p at 5.4 Ghz, one lane */

 Power off all modules except configuration registers access */

 1.2V digital core power regulator  */

 2.5V digital core power regulator  */

 GPIO for chip reset */

 Map slave addresses of ANX6345 */

 Look for supported chip ID */

 sentinel */ }

 sentinel */ },

/*

 * Copyright Â© 2017 Broadcom

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING

 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

 * IN THE SOFTWARE.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Broadcom

/**

 * DOC: VC4 plane module

 *

 * Each DRM plane is a layer of pixels being scanned out by the HVS.

 *

 * At atomic modeset check time, we compute the HVS display element

 * state that would be necessary for displaying the plane (giving us a

 * chance to figure out if a plane configuration is invalid), then at

 * atomic flush time the CRTC will ask us to write our element state

 * into the region of the HVS that it has allocated for us.

 DRM_FORMAT_* */

 HVS_FORMAT_* */

 Called during init to allocate the plane's atomic state. */

/* Returns the scl0/scl1 field based on whether the dimensions need to

 * be up/down/non-scaled.

 *

 * This is a replication of a table from the spec.

		/* The unity case is independently handled by

		 * SCALER_CTL0_UNITY.

 We don't support subpixel source positioning for scaling. */

		/* YUV conversion requires that horizontal scaling be enabled

		 * on the UV plane even if vc4_get_scaling_mode() returned

		 * VC4_SCALING_NONE (which can happen when the down-scaling

		 * ratio is 0.5). Let's force it to VC4_SCALING_PPF in this

		 * case.

	/* The specs note that while the reciprocal would be defined

	 * as (1<<32)/scale, ~0 is close enough.

 LBM is not needed when there's no vertical scaling. */

	/*

	 * This can be further optimized in the RGB/YUV444 case if the PPF

	 * decimation factor is between 0.5 and 1.0 by using crtc_w.

	 *

	 * It's not an issue though, since in that case since src_w[0] is going

	 * to be greater than or equal to crtc_w.

 In special cases, this multiplier might be 12. */

		/* There are cases for this going down to a multiplier

		 * of 2, but according to the firmware source, the

		 * table in the docs is somewhat wrong.

 Align it to 64 or 128 (hvs5) bytes */

 Each "word" of the LBM memory contains 2 or 4 (hvs5) pixels */

 Ch0 H-PPF Word 0: Scaling Parameters */

 Ch0 V-PPF Words 0-1: Scaling Parameters, Context */

 Ch0 H-TPZ Words 0-1: Scaling Parameters, Recip */

 Ch0 V-TPZ Words 0-2: Scaling Parameters, Recip, Context */

	/* The HVS is able to process 2 pixels/cycle when scaling the source,

	 * 4 pixels/cycle otherwise.

	 * Alpha blending step seems to be pipelined and it's always operating

	 * at 4 pixels/cycle, so the limiting aspect here seems to be the

	 * scaler block.

	 * HVS load is expressed in clk-cycles/sec (AKA Hz).

		/* Even if the bandwidth/plane required for a single frame is

		 *

		 * vc4_state->src_w[i] * vc4_state->src_h[i] * cpp * vrefresh

		 *

		 * when downscaling, we have to read more pixels per line in

		 * the time frame reserved for a single line, so the bandwidth

		 * demand can be punctually higher. To account for that, we

		 * calculate the down-scaling factor and multiply the plane

		 * load by this number. We're likely over-estimating the read

		 * demand, but that's better than under-estimating it.

	/* Allocate the LBM memory that the HVS will use for temporary

	 * storage due to our scaling/format conversion.

/* Writes out a full display list for an active plane to the plane's

 * private dlist state.

	/* SCL1 is used for Cb/Cr scaling of planar formats.  For RGB

	 * and 4:4:4, scl1 should be set to scl0 so both channels of

	 * the scaler do the same thing.  For YUV, the Y plane needs

	 * to be put in channel 1 and Cb/Cr in channel 0, so we swap

	 * the scl fields here.

 We must point to the last line when Y reflection is enabled. */

		/* Adjust the base pointer to the first pixel to be scanned

		 * out.

 T tiles are 4kb */

 Whole-tile offsets, mostly for setting the pitch. */

 16 and 32bpp are 32 pixels high */

		/* The height mask on 32-bit-per-pixel tiles is 63, i.e. twice

		 * the height (in pixels) of a 4k tile.

		/* For T-tiled, the FB pitch is "how many bytes from one row to

		 * the next, such that

		 *

		 *	pitch * tile_h == tile_size * tiles_per_row

		/* Intra-tile offsets, which modify the base address (the

		 * SCALER_PITCH0_TILE_Y_OFFSET tells HVS how to walk from that

		 * base address).

		/* When Y reflection is requested we must set the

		 * SCALER_PITCH0_TILE_LINE_DIR flag to tell HVS that all lines

		 * after the initial one should be fetched in descending order,

		 * which makes sense since we start from the last line and go

		 * backward.

		 * Don't know why we need y_off = max_y_off - y_off, but it's

		 * definitely required (I guess it's also related to the "going

		 * backward" situation).

 Rows of tiles alternate left-to-right and right-to-left. */

		/* Adjust the base pointer to the first pixel to be scanned

		 * out.

	/* Don't waste cycles mixing with plane alpha if the set alpha

	 * is opaque or there is no per-pixel alpha information.

	 * In any case we use the alpha property value as the fixed alpha.

 Control word */

 Position Word 0: Image Positions and Alpha Value */

 Position Word 1: Scaled Image Dimensions. */

 Position Word 2: Source Image Size, Alpha */

 Position Word 3: Context.  Written by the HVS. */

 Control word */

 Position Word 0: Image Positions and Alpha Value */

 Control Word 2 */

 Position Word 1: Scaled Image Dimensions. */

 Position Word 2: Source Image Size */

 Position Word 3: Context.  Written by the HVS. */

	/* Pointer Word 0/1/2: RGB / Y / Cb / Cr Pointers

	 *

	 * The pointers may be any byte address.

 Pointer Context Word 0/1/2: Written by the HVS */

 Pitch word 0 */

 Pitch word 1/2 */

 Colorspace conversion words */

		/* Reserve a slot for the LBM Base Address. The real value will

		 * be set when calling vc4_plane_allocate_lbm().

			/* Emit Cb/Cr as channel 0 and Y as channel

			 * 1. This matches how we set up scl0/scl1

			 * above.

		/* If any PPF setup was done, then all the kernel

		 * pointers get uploaded.

 HPPF plane 0 */

 VPPF plane 0 */

 HPPF plane 1 */

 VPPF plane 1 */

 crtc_* are already clipped coordinates. */

	/* Background fill might be necessary when the plane has per-pixel

	 * alpha content or a non-opaque plane alpha and could blend from the

	 * background or does not cover the entire screen.

	/* Flag the dlist as initialized to avoid checking it twice in case

	 * the async update check already called vc4_plane_mode_set() and

	 * decided to fallback to sync update because async update was not

	 * possible.

/* If a modeset involves changing the setup of a plane, the atomic

 * infrastructure will call this to validate a proposed plane setup.

 * However, if a plane isn't getting updated, this (and the

 * corresponding vc4_plane_atomic_update) won't get called.  Thus, we

 * compute the dlist here and have all active plane dlists get updated

 * in the CRTC's flush.

	/* No contents here.  Since we don't know where in the CRTC's

	 * dlist we should be stored, our dlist is uploaded to the

	 * hardware with vc4_plane_write_dlist() at CRTC atomic_flush

	 * time.

 Can't memcpy_toio() because it needs to be 32-bit writes. */

/* Updates the plane to immediately (well, once the FIFO needs

 * refilling) scan out from at a new framebuffer.

	/* We're skipping the address adjustment for negative origin,

	 * because this is only called on the primary plane.

	/* Write the new address into the hardware immediately.  The

	 * scanout will start from this address as soon as the FIFO

	 * needs to refill with pixels.

	/* Also update the CPU-side dlist copy, so that any later

	 * atomic updates that don't do a new modeset on our plane

	 * also use our updated address.

 Update the current vc4_state pos0, pos2 and ptr0 dlist entries. */

	/* Note that we can't just call vc4_plane_write_dlist()

	 * because that would smash the context data that the HVS is

	 * currently using.

	/* Only pos0, pos2 and ptr0 DWORDS can be updated in an async update

	 * if anything else has changed, fallback to a sync update.

 Support T_TILING for RGB formats only. */

	/* Set up some arbitrary number of planes.  We're not limited

	 * by a set number of physical registers, just the space in

	 * the HVS (16k) and how small an plane can be (28 bytes).

	 * However, each plane we set up takes up some memory, and

	 * increases the cost of looping over planes, which atomic

	 * modesetting does quite a bit.  As a result, we pick a

	 * modest number of planes to expose, that should hopefully

	 * still cover any sane usecase.

		/* Set up the legacy cursor after overlay initialization,

		 * since we overlay planes on the CRTC in the order they were

		 * initialized.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright Â© 2015 Broadcom

/**

 * DOC: VC4 GEM BO management support

 *

 * The VC4 GPU architecture (both scanout and rendering) has direct

 * access to system memory with no MMU in between.  To support it, we

 * use the GEM CMA helper functions to allocate contiguous ranges of

 * physical memory for our BOs.

 *

 * Since the CMA allocator is very slow, we keep a cache of recently

 * freed BOs around so that the kernel's allocation of objects for 3D

 * rendering can return quickly.

/* Takes ownership of *name and returns the appropriate slot for it in

 * the bo_labels[] array, extending it as necessary.

 *

 * This is inefficient and could use a hash table instead of walking

 * an array and strcmp()ing.  However, the assumption is that user

 * labeling will be infrequent (scanout buffers and other long-lived

 * objects, or debug driver builds), so we can live with it for now.

		/* Free user BO label slots on last unreference.

		 * Slots are just where we track the stats for a given

		 * name, and once a name is unused we can reuse that

		 * slot.

		/* Rebase the old cached BO lists to their new list

		 * head locations.

 And initialize the brand new BO list heads. */

	/* list_del_init() is used here because the caller might release

	 * the purgeable lock in order to acquire the madv one and update the

	 * madv status.

	 * During this short period of time a user might decide to mark

	 * the BO as unpurgeable, and if bo->madv is set to

	 * VC4_MADV_DONTNEED it will try to remove the BO from the

	 * purgeable list which will fail if the ->next/prev fields

	 * are set to LIST_POISON1/LIST_POISON2 (which is what

	 * list_del() does).

	 * Re-initializing the list element guarantees that list_del()

	 * will work correctly even if it's a NOP.

		/* Release the purgeable lock while we're purging the BO so

		 * that other people can continue inserting things in the

		 * purgeable pool without having to wait for all BOs to be

		 * purged.

		/* Since we released the purgeable pool lock before acquiring

		 * the BO madv one, the user may have marked the BO as WILLNEED

		 * and re-used it in the meantime.

		 * Before purging the BO we need to make sure

		 * - it is still marked as DONTNEED

		 * - it has not been re-inserted in the purgeable list

		 * - it is not used by HW blocks

		 * If one of these conditions is not met, just skip the entry.

/**

 * vc4_create_object - Implementation of driver->gem_create_object.

 * @dev: DRM device

 * @size: Size in bytes of the memory the object will reference

 *

 * This lets the CMA helpers allocate object structs for us, and keep

 * our BO stats correct.

 First, try to get a vc4_bo from the kernel BO cache. */

		/*

		 * If we've run out of CMA memory, kill the cache of

		 * CMA allocations we've got laying around and try again.

		/*

		 * Still not enough CMA memory, purge the userspace BO

		 * cache and retry.

		 * This is sub-optimal since we purge the whole userspace

		 * BO cache which forces user that want to re-use the BO to

		 * restore its initial content.

		 * Ideally, we should purge entries one by one and retry

		 * after each to see if CMA allocation succeeds. Or even

		 * better, try to find an entry with at least the same

		 * size.

	/* By default, BOs do not support the MADV ioctl. This will be enabled

	 * only on BOs that are exposed to userspace (V3D, V3D_SHADER and DUMB

	 * BOs).

/* Called on the last userspace/kernel unreference of the BO.  Returns

 * it to the BO cache if possible, otherwise frees it.

 Remove the BO from the purgeable list. */

	/* If the object references someone else's memory, we can't cache it.

 Don't cache if it was publicly named. */

	/* If this object was partially constructed but CMA allocation

	 * had failed, just free it. Can also happen when the BO has been

	 * purged.

 Reset madv and usecnt before adding the BO to the cache. */

	/* Fast path: if the BO is already retained by someone, no need to

	 * check the madv status.

		/* We shouldn't use a BO marked as purgeable if at least

		 * someone else retained its content by incrementing usecnt.

		 * Luckily the BO hasn't been purged yet, but something wrong

		 * is happening here. Just throw an error instead of

		 * authorizing this use case.

 We can't use a purged BO. */

 Invalid madv value. */

	/* Fast path: if the BO is still retained by someone, no need to test

	 * the madv value.

	/* Note: as soon as the BO is exported it becomes unpurgeable, because

	 * noone ever decrements the usecnt even if the reference held by the

	 * exported BO is released. This shouldn't be a problem since we don't

	 * expect exported BOs to be marked as purgeable.

	/* The only reason we would end up here is when user-space accesses

	 * BO's memory after it's been purged.

	/*

	 * We can't allocate from the BO cache, because the BOs don't

	 * get zeroed, and that might leak data between users.

 The mmap offset was set up at BO allocation time. */

	/* Clear the rest of the memory from allocating from the BO

	 * cache.

	/* We have to create the handle after validation, to avoid

	 * races for users to do doing things like mmap the shader BO.

/**

 * vc4_set_tiling_ioctl() - Sets the tiling modifier for a BO.

 * @dev: DRM device

 * @data: ioctl argument

 * @file_priv: DRM file for this fd

 *

 * The tiling state of the BO decides the default modifier of an fb if

 * no specific modifier was set by userspace, and the return value of

 * vc4_get_tiling_ioctl() (so that userspace can treat a BO it

 * received from dmabuf as the same tiling format as the producer

 * used).

/**

 * vc4_get_tiling_ioctl() - Gets the tiling modifier for a BO.

 * @dev: DRM device

 * @data: ioctl argument

 * @file_priv: DRM file for this fd

 *

 * Returns the tiling modifier for a BO as set by vc4_set_tiling_ioctl().

	/* Create the initial set of BO labels that the kernel will

	 * use.  This lets us avoid a bunch of string reallocation in

	 * the kernel's draw and BO allocation paths.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2016 Broadcom Limited

/**

 * DOC: VC4 DPI module

 *

 * The VC4 DPI hardware supports MIPI DPI type 4 and Nokia ViSSI

 * signals.  On BCM2835, these can be routed out to GPIO0-27 with the

 * ALT2 function.

/* The order field takes the incoming 24 bit RGB from the pixel valve

 * and shuffles the 3 channels.

/* The format field takes the ORDER-shuffled pixel valve data and

 * formats it onto the output lines.

 This define is named in the hardware, but actually just outputs 0. */

 Outputs 00000000rrrrrggggggbbbbb */

 Outputs 000rrrrr00gggggg000bbbbb */

 Outputs 00rrrrr000gggggg00bbbbb0 */

 Outputs 000000rrrrrrggggggbbbbbb */

 Outputs 00rrrrrr00gggggg00bbbbbb */

 Outputs rrrrrrrrggggggggbbbbbbbb */

 Reverses the polarity of the corresponding signal */

 Outputs the signal the falling clock edge instead of rising. */

 Disables the signal */

 Power gate to the device, full reset at 0 -> 1 transition */

 All other registers besides DPI_C return the ID */

 General DPI hardware state. */

 VC4 DPI encoder KMS struct */

	/* Look up the connector attached to DPI so we can get the

	 * bus_format.  Ideally the bridge would tell us the

	 * bus_format we want, but it doesn't yet, so assume that it's

	 * uniform throughout the bridge chain.

 Default to 24bit if no connector found. */

/* Sets up the next link in the display chain, whether it's a panel or

 * a bridge.

		/* If nothing was connected in the DT, that's not an

		 * error.

/*

 * Copyright Â© 2014 Broadcom

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING

 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

 * IN THE SOFTWARE.

/**

 * DOC: Command list validator for VC4.

 *

 * Since the VC4 has no IOMMU between it and system memory, a user

 * with access to execute command lists could escalate privilege by

 * overwriting system memory (drawing to it as a framebuffer) or

 * reading system memory it shouldn't (reading it as a vertex buffer

 * or index buffer)

 *

 * We validate binner command lists to ensure that all accesses are

 * within the bounds of the GEM objects referenced by the submitted

 * job.  It explicitly whitelists packets, and looks at the offsets in

 * any address fields to make sure they're contained within the BOs

 * they reference.

 *

 * Note that because CL validation is already reading the

 * user-submitted CL and writing the validated copy out to the memory

 * that the GPU will actually read, this is also where GEM relocation

 * processing (turning BO references into actual addresses for the GPU

 * to use) happens.

* Return the width in pixels of a 64-byte microtile. */

* Return the height in pixels of a 64-byte microtile. */

/**

 * size_is_lt() - Returns whether a miplevel of the given size will

 * use the lineartile (LT) tiling layout rather than the normal T

 * tiling layout.

 * @width: Width in pixels of the miplevel

 * @height: Height in pixels of the miplevel

 * @cpp: Bytes per pixel of the pixel format

	/* Note that the untrusted pointer passed to these functions is

	 * incremented past the packet byte.

	/* The shaded vertex format stores signed 12.4 fixed point

	 * (-2048,2047) offsets from the viewport center, so we should

	 * never have a render target larger than 4096.  The texture

	 * unit can only sample from 2048x2048, so it's even more

	 * restricted.  This lets us avoid worrying about overflow in

	 * our math.

 Check overflow condition */

 Check overflow condition */

	/* The slot we allocated will only be used by this job, and is

	 * free when the job completes rendering.

	/* The tile state data array is 48 bytes per tile, and we put it at

	 * the start of a BO containing both it and the tile alloc.

 Since the tile alloc array will follow us, align. */

 tile alloc address. */

 tile alloc size. */

 tile state address. */

	/* Note: The docs say this was also 105, but it was 106 in the

	 * initial userland code drop.

 GEM handle loading doesn't produce HW packets. */

 When the CL hits halt, it'll stop reading anything else. */

	/* The bin CL must be ended with INCREMENT_SEMAPHORE and FLUSH.  The

	 * semaphore is used to trigger the render CL to start up, and the

	 * FLUSH is what caps the bin lists with

	 * VC4_PACKET_RETURN_FROM_SUB_LIST (so they jump back to the main

	 * render CL when they get called to) and actually triggers the queued

	 * semaphore increment.

		/* ETC1 is arranged as 64-bit blocks, where each block is 4x4

		 * pixels.

	/* The mipmap levels are stored before the base of the texture.  Make

	 * sure there is actually space in the BO.

 Once the levels get small enough, they drop from T to LT. */

 fs */

 vs */

 cs */

	/* Shader recs have to be aligned to 16 bytes (due to the attribute

	 * flags being in the low bytes), so round the next validated shader

	 * rec address up.  This should be safe, since we've got so many

	 * relocations in a shader rec packet.

		/* Fill in the uniform slots that need this shader's

		 * start-of-uniforms address (used for resetting the uniform

		 * stream in the presence of control flow).

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2015 Broadcom

 * Copyright (c) 2014 The Linux Foundation. All rights reserved.

 * Copyright (C) 2013 Red Hat

 * Author: Rob Clark <robdclark@gmail.com>

	/* PHY should be in reset, like

	 * vc4_hdmi_encoder_disable() does.

 RM offset is stored as 9.22 format */

	/*

	 * If the pixel clock exceeds our max setting, try the max

	 * setting anyway.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2016 Broadcom

/**

 * DOC: VC4 SDTV module

 *

 * The VEC encoder generates PAL or NTSC composite video output.

 *

 * TV mode selection is done by an atomic property on the encoder,

 * because a drm_mode_modeinfo is insufficient to distinguish between

 * PAL and PAL-M or NTSC and NTSC-J.

 WSE Registers */

 VEC Registers */

 General VEC hardware state. */

 VC4 VEC encoder KMS struct */

 VC4 VEC connector KMS struct */

	/* Since the connector is attached to just the one encoder,

	 * this is the reference to it so we can do the best_encoder()

	 * hook.

	/*

	 * We need to set the clock rate each time we enable the encoder

	 * because there's a chance we share the same parent with the HDMI

	 * clock, and both drivers are requesting different rates.

	 * The good news is, these 2 encoders cannot be enabled at the same

	 * time, thus preventing incompatible rate requests.

 Reset the different blocks */

 Disable the CGSM-A and WSE blocks */

 Write config common to all modes. */

	/*

	 * Color subcarrier phase: phase = 360 * SCHPH / 256.

	 * 0x28 <=> 39.375 deg.

	/*

	 * Reset to default values.

 Mask all interrupts. */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014 The Linux Foundation. All rights reserved.

 * Copyright (C) 2013 Red Hat

 * Author: Rob Clark <robdclark@gmail.com>

/*

 * Wraps pm_runtime_get_sync() in a refcount, so that we can reliably

 * get the pm_runtime refcount to 0 in vc4_reset().

	/* Take all the memory that would have been reserved for user

	 * QPU programs, since we don't have an interface for running

	 * them, anyway.

 Switch from ffs() bit index to a 0-based index. */

	/* Couldn't find an open slot.  Wait for render to complete

	 * and try again.

/*

 * bin_bo_alloc() - allocates the memory that will be used for

 * tile binning.

 *

 * The binner has a limitation that the addresses in the tile state

 * buffer that point into the tile alloc buffer or binner overflow

 * memory only have 28 bits (256MB), and the top 4 on the bus for

 * tile alloc references end up coming from the tile state buffer's

 * address.

 *

 * To work around this, we allocate a single large buffer while V3D is

 * in use, make sure that it has the top 4 bits constant across its

 * entire extent, and then put the tile state, tile alloc, and binner

 * overflow memory inside that buffer.

 *

 * This creates a limitation where we may not be able to execute a job

 * if it doesn't fit within the buffer that we allocated up front.

 * However, it turns out that 16MB is "enough for anybody", and

 * real-world applications run into allocation failures from the

 * overall CMA pool before they make scenes complicated enough to run

 * out of bin space.

	/* We may need to try allocating more than once to get a BO

	 * that doesn't cross 256MB.  Track the ones we've allocated

	 * that failed so far, so that we can free them when we've got

	 * one that succeeded (if we freed them right away, our next

	 * allocation would probably be the same chunk of memory).

 Check if this BO won't trigger the addressing bug. */

			/* Set up for allocating 512KB chunks of

			 * binner memory.  The biggest allocation we

			 * need to do is for the initial tile alloc +

			 * tile state buffer.  We can render to a

			 * maximum of ((2048*2048) / (32*32) = 4096

			 * tiles in a frame (until we do floating

			 * point rendering, at which point it would be

			 * 8192).  Tile state is 48b/tile (rounded to

			 * a page), and tile alloc is 32b/tile

			 * (rounded to a page), plus a page of extra,

			 * for a total of 320kb for our worst-case.

			 * We choose 512kb so that it divides evenly

			 * into our 16MB, and the rest of the 512kb

			 * will be used as storage for the overflow

			 * from the initial 32b CL per bin.

			/* Enable the out-of-memory interrupt to set our

			 * newly-allocated binner BO, potentially from an

			 * already-pending-but-masked interrupt.

 Put it on the list to free later, and try again. */

 Free all the BOs we allocated but didn't choose. */

 We disabled the IRQ as part of vc4_irq_uninstall in suspend. */

 bcm2835 didn't have a clock reference in the DT. */

	/* Reset the binner overflow address/size at setup, to be sure

	 * we don't reuse an old one.

 a little over 2 frames. */

	/* Disable the binner's overflow memory address, so the next

	 * driver probe (if any) doesn't try to reuse our old

	 * allocation.

/*

 * Copyright Â© 2014-2015 Broadcom

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING

 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

 * IN THE SOFTWARE.

/**

 * DOC: Render command list generation

 *

 * In the V3D hardware, render command lists are what load and store

 * tiles of a framebuffer and optionally call out to binner-generated

 * command lists to do the 3D drawing for that tile.

 *

 * In the VC4 driver, render command list generation is performed by the

 * kernel instead of userspace.  We do this because validating a

 * user-submitted command list is hard to get right and has high CPU overhead,

 * while the number of valid configurations for render command lists is

 * actually fairly low.

/*

 * Emits a no-op STORE_TILE_BUFFER_GENERAL.

 *

 * If we emit a PACKET_TILE_COORDINATES, it must be followed by a store of

 * some sort before another load is triggered.

 no address, since we're in None mode */

/*

 * Calculates the physical address of the start of a tile in a RCL surface.

 *

 * Unlike the other load/store packets,

 * VC4_PACKET_LOAD/STORE_FULL_RES_TILE_BUFFER don't look at the tile

 * coordinates packet, and instead just store to the address given.

/*

 * Emits a PACKET_TILE_COORDINATES if one isn't already pending.

 *

 * The tile coordinates packet triggers a pending load if there is one, are

 * used for clipping during rendering, and determine where loads/stores happen

 * relative to their base address.

	/* Note that the load doesn't actually occur until the

	 * tile coords packet is processed, and only one load

	 * may be outstanding at a time.

 Exec previous load. */

	/* Clipping depends on tile coordinates having been

	 * emitted, so we always need one here.

	/* Wait for the binner before jumping to the first

	 * tile's lists.

 We need a VC4_PACKET_TILE_COORDINATES in between each store. */

	/* The tile buffer gets cleared when the previous tile is stored.  If

	 * the clear values changed between frames, then the tile buffer has

	 * stale clear values in it, so we have to do a store in None mode (no

	 * writes) so that we trigger the tile buffer clear.

 no address, since we're in None mode */

	/* We shouldn't even have the job submitted to us if there's no

	 * surface to write out.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Broadcom

 * Copyright (c) 2014 The Linux Foundation. All rights reserved.

 * Copyright (C) 2013 Red Hat

 * Author: Rob Clark <robdclark@gmail.com>

/**

 * DOC: VC4 Falcon HDMI module

 *

 * The HDMI core has a state machine and a PHY.  On BCM2835, most of

 * the unit operates off of the HSM clock from CPRMAN.  It also

 * internally uses the PLLH_PIX clock for the PHY.

 *

 * HDMI infoframes are kept within a small packet ram, where each

 * packet can be individually enabled for including in a frame.

 *

 * HDMI audio is implemented entirely within the HDMI IP block.  A

 * register in the HDMI encoder takes SPDIF frames from the DMA engine

 * and transfers them over an internal MAI (multi-channel audio

 * interconnect) bus to the encoder side for insertion into the video

 * blank regions.

 *

 * The driver's HDMI encoder does not yet support power management.

 * The HDMI encoder's power domain and the HSM/pixel clocks are kept

 * continuously running, and only the HDMI logic and packet ram are

 * powered off/on at disable/enable time.

 *

 * The driver does not yet support CEC control, though the HDMI

 * encoder block has CEC support.

	/*

	 * Set the clock divider: the hsm_clock rate and this divider

	 * setting will give a 40 kHz CEC clock.

	/*

	 * Some of the properties below require access to state, like bpc.

	 * Allocate some default initial connector state with our reset helper.

 Create and attach TV margin props to this connector. */

	/*

	 * If audio was streaming, then we need to reenabled the audio

	 * infoframe here during encoder_enable.

	/*

	 * At boot, encoder->crtc will be NULL. Since we don't know the

	 * state of the scrambler and in order to avoid any

	 * inconsistency, let's disable it all the time.

		/* CEA VICs other than #1 requre limited range RGB

		 * output unless overridden by an AVI infoframe.

		 * Apply a colorspace conversion to squash 0-255 down

		 * to 16-235.  The matrix here is:

		 *

		 * [ 0      0      0.8594 16]

		 * [ 0      0.8594 0      16]

		 * [ 0.8594 0      0      16]

		 * [ 0      0      0       1]

 The RGB order applies even when CSC is disabled. */

 RGB_CONVERT_MODE = custom matrix, || USE_RGB_TO_YCBCR */

		/* CEA VICs other than #1 requre limited range RGB

		 * output unless overridden by an AVI infoframe.

		 * Apply a colorspace conversion to squash 0-255 down

		 * to 16-235.  The matrix here is:

		 *

		 * [ 0.8594 0      0      16]

		 * [ 0      0.8594 0      16]

		 * [ 0      0      0.8594 16]

		 * [ 0      0      0       1]

		 * Matrix is signed 2p13 fixed point, with signed 9p6 offsets

		/* Still use the matrix for full range, but make it unity.

		 * Matrix is signed 2p13 fixed point, with signed 9p6 offsets

	/*

	 * As stated in RPi's vc4 firmware "HDMI state machine (HSM) clock must

	 * be faster than pixel clock, infinitesimally faster, tested in

	 * simulation. Otherwise, exact value is unimportant for HDMI

	 * operation." This conflicts with bcm2835's vc4 documentation, which

	 * states HSM's clock has to be at least 108% of the pixel clock.

	 *

	 * Real life tests reveal that vc4's firmware statement holds up, and

	 * users are able to use pixel clocks closer to HSM's, namely for

	 * 1920x1200@60Hz. So it was decided to have leave a 1% margin between

	 * both clocks. Which, for RPi0-3 implies a maximum pixel clock of

	 * 162MHz.

	 *

	 * Additionally, the AXI clock needs to be at least 25% of

	 * pixel clock, but HSM ends up being the limiting factor.

	/*

	 * The 1440p@60 pixel rate is in the same range than the first

	 * WiFi channel (between 2.4GHz and 2.422GHz with 22MHz

	 * bandwidth). Slightly lower the frequency to bring it out of

	 * the WiFi range.

 HDMI audio codec callbacks */

	/*

	 * We could get slightly more accurate clocks in some cases by

	 * providing a CTS_1 value.  The two CTS values are alternated

	 * between based on the period fields

	/*

	 * If the HDMI encoder hasn't probed, or the encoder is

	 * currently in DVI mode, treat the codec dai as missing.

 HDMI audio codec callbacks */

 The B frame identifier should match the value used by alsa-lib (8) */

 Set the MAI threshold */

	/*

	 * Get the physical address of VC4_HD_MAI_DATA. We need to retrieve

	 * the bus address specified in the DT, because the physical address

	 * (the one returned by platform_get_resource()) is not appropriate

	 * for DMA transfers.

	 * This VC/MMU should probably be exposed to avoid this kind of hacks.

 Before BCM2711, we don't have a named register range */

	/*

	 * Be careful, snd_soc_register_card() calls dev_set_drvdata() and

	 * stores a pointer to the snd card object in dev->driver_data. This

	 * means we cannot use it for something else. The hdmi back-pointer is

	 * now stored in card->drvdata and should be retrieved with

	 * snd_soc_card_get_drvdata() if needed.

		/*

		 * This CEC implementation makes 1 retry, so if we

		 * get a NACK, then that means it made 2 attempts.

 clock period in microseconds */

 Set the logical address to Unregistered */

	/* Only use the GPIO HPD pin if present in the DT, otherwise

	 * we'll use the HDMI core's register.

	/*

	 * ASoC makes it a bit hard to retrieve a pointer to the

	 * vc4_hdmi structure. Registering the card will overwrite our

	 * device drvdata with a pointer to the snd_soc_card structure,

	 * which can then be used to retrieve whatever drvdata we want

	 * to associate.

	 *

	 * However, that doesn't fly in the case where we wouldn't

	 * register an ASoC card (because of an old DT that is missing

	 * the dmas properties for example), then the card isn't

	 * registered and the device drvdata wouldn't be set.

	 *

	 * We can deal with both cases by making sure a snd_soc_card

	 * pointer and a vc4_hdmi structure are pointing to the same

	 * memory address, so we can treat them indistinctly without any

	 * issue.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright Â© 2014 Broadcom

/*

 * Called at drm_dev_register() time on each of the minors registered

 * by the DRM device, to attach the debugfs files.

/*

 * Registers a debugfs file with a callback function for a vc4 component.

 *

 * This is like drm_debugfs_create_files(), but that can only be

 * called a given DRM minor, while the various VC4 components want to

 * register their debugfs files during the component bind process.  We

 * track the request and delay it to be called on each minor during

 * vc4_debugfs_init().

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Broadcom

/**

 * DOC: VC4 CRTC module

 *

 * In VC4, the Pixel Valve is what most closely corresponds to the

 * DRM's concept of a CRTC.  The PV generates video timings from the

 * encoder's clock plus its configuration.  It pulls scaled pixels from

 * the HVS at that timing, and feeds it to the encoder.

 *

 * However, the DRM CRTC also collects the configuration of all the

 * DRM planes attached to it.  As a result, the CRTC is also

 * responsible for writing the display list for the HVS channel that

 * the CRTC will use.

 *

 * The 2835 has 3 different pixel valves.  pv0 in the audio power

 * domain feeds DSI0 or DPI, while pv1 feeds DS1 or SMI.  pv2 in the

 * image domain can feed either HDMI or the SDTV controller.  The

 * pixel valve chooses from the CPRMAN clocks (HSM for HDMI, VEC for

 * SDTV, etc.) according to which output type is chosen in the mux.

 *

 * For power management, the pixel valve's registers are all clocked

 * by the AXI clock, while the timings and FIFOs make use of the

 * output-specific clock.  Since the encoders also directly consume

 * the CPRMAN clocks, and know what timings they need, they are the

 * ones that set the clock.

	/* Top/base are supposed to be 4-pixel aligned, but the

	 * Raspberry Pi firmware fills the low bits (which are

	 * presumably ignored).

 preempt_disable_rt() should go right here in PREEMPT_RT patchset. */

 Get optional system timestamp before query. */

	/*

	 * Read vertical scanline which is currently composed for our

	 * pixelvalve by the HVS, and also the scaler status.

 Get optional system timestamp after query. */

 preempt_enable_rt() should go right here in PREEMPT_RT patchset. */

 Vertical position of hvs composed scanline. */

 Use hpos to correct for field offset in interlaced mode. */

 This is the offset we need for translating hvs -> pv scanout pos. */

 HVS more than fifo_lines into frame for compositing? */

		/*

		 * We are in active scanout and can get some meaningful results

		 * from HVS. The actual PV scanout can not trail behind more

		 * than fifo_lines as that is the fifo's capacity. Assume that

		 * in active scanout the HVS and PV work in lockstep wrt. HVS

		 * refilling the fifo and PV consuming from the fifo, ie.

		 * whenever the PV consumes and frees up a scanline in the

		 * fifo, the HVS will immediately refill it, therefore

		 * incrementing vpos. Therefore we choose HVS read position -

		 * fifo size in scanlines as a estimate of the real scanout

		 * position of the PV.

	/*

	 * Less: This happens when we are in vblank and the HVS, after getting

	 * the VSTART restart signal from the PV, just started refilling its

	 * fifo with new lines from the top-most lines of the new framebuffers.

	 * The PV does not scan out in vblank, so does not remove lines from

	 * the fifo, so the fifo will be full quickly and the HVS has to pause.

	 * We can't get meaningful readings wrt. scanline position of the PV

	 * and need to make things up in a approximative but consistent way.

		/*

		 * Assume the irq handler got called close to first

		 * line of vblank, so PV has about a full vblank

		 * scanlines to go, and as a base timestamp use the

		 * one taken at entry into vblank irq handler, so it

		 * is not affected by random delays due to lock

		 * contention on event_lock or vblank_time lock in

		 * the core.

		/*

		 * If the HVS fifo is not yet full then we know for certain

		 * we are at the very beginning of vblank, as the hvs just

		 * started refilling, and the stime and etime timestamps

		 * truly correspond to start of vblank.

		 *

		 * Unfortunately there's no way to report this to upper levels

		 * and make it more useful.

		/*

		 * No clue where we are inside vblank. Return a vpos of zero,

		 * which will cause calling code to just return the etime

		 * timestamp uncorrected. At least this is no worse than the

		 * standard fallback.

	/*

	 * Pixels are pulled from the HVS if the number of bytes is

	 * lower than the FIFO full level.

	 *

	 * The latency of the pixel fetch mechanism is 6 pixels, so we

	 * need to convert those 6 pixels in bytes, depending on the

	 * format, and then subtract that from the length of the FIFO

	 * to make sure we never end up in a situation where the FIFO

	 * is full.

		/*

		 * For some reason, the pixelvalve4 doesn't work with

		 * the usual formula and will only work with 32.

		/*

		 * It looks like in some situations, we will overflow

		 * the PixelValve FIFO (with the bit 10 of PV stat being

		 * set) and stall the HVS / PV, eventually resulting in

		 * a page flip timeout.

		 *

		 * Displaying the video overlay during a playback with

		 * Kodi on an RPi3 seems to be a great solution with a

		 * failure rate around 50%.

		 *

		 * Removing 1 from the FIFO full level however

		 * seems to completely remove that issue.

/*

 * Returns the encoder attached to the CRTC.

 *

 * VC4 can only scan out to one encoder at a time, while the DRM core

 * allows drivers to push pixels to more than one encoder from the

 * same CRTC.

 The PV needs to be disabled before it can be flushed */

		/* We set up first field even mode for HDMI.  VEC's

		 * NTSC mode would want first field odd instead, once

		 * we support it (to do so, set ODD_FIRST and put the

		 * delay in VSYNCD_EVEN instead).

	/*

	 * This delay is needed to avoid to get a pixel stuck in an

	 * unflushable FIFO between the pixelvalve and the HDMI

	 * controllers on the BCM2711.

	 *

	 * Timing is fairly sensitive here, so mdelay is the safest

	 * approach.

	 *

	 * If it was to be reworked, the stuck pixel happens on a

	 * BCM2711 when changing mode with a good probability, so a

	 * script that changes mode on a regular basis should trigger

	 * the bug after less than 10 attempts. It manifests itself with

	 * every pixels being shifted by one to the right, and thus the

	 * last pixel of a line actually being displayed as the first

	 * pixel on the next line.

 Disable vblank irq handling before crtc is disabled. */

	/*

	 * Make sure we issue a vblank event after disabling the CRTC if

	 * someone was waiting it.

	/* Enable vblank irq handling before crtc is started otherwise

	 * drm_crtc_get_vblank() fails in vc4_crtc_update_dlist().

	/* When feeding the transposer block the pixelvalve is unneeded and

	 * should not be enabled.

 Do not allow doublescan modes from user space */

	/* We have to interate over all new connector states because

	 * vc4_crtc_get_margins() might be called before

	 * vc4_crtc_atomic_check() which means margins info in vc4_crtc_state

	 * might be outdated.

		/* Wait for the page flip to unmask the underrun to ensure that

		 * the display list was updated by the hardware. Before that

		 * happens, the HVS will be using the previous display list with

		 * the CRTC and encoder already reconfigured, leading to

		 * underruns. This can be seen when reconfiguring the CRTC.

/* Called when the V3D execution for the BO being flipped to is done, so that

 * we can actually update the plane's address to point to it.

	/* Decrement the BO usecnt in order to keep the inc/dec calls balanced

	 * when the planes are updated through the async update path.

	 * FIXME: we should move to generic async-page-flip when it's

	 * available, so that we can get rid of this hand-made cleanup_fb()

	 * logic.

/* Implements async (non-vblank-synced) page flips.

 *

 * The page flip ioctl needs to return immediately, so we grab the

 * modeset semaphore on the pipe, and queue the address update for

 * when V3D is done with the BO being flipped to.

	/* Increment the BO usecnt here, so that we never end up with an

	 * unbalanced number of vc4_bo_{dec,inc}_usecnt() calls when the

	 * plane is later updated through the non-async path.

	 * FIXME: we should move to generic async-page-flip when it's

	 * available, so that we can get rid of this hand-made prepare_fb()

	 * logic.

	/* Save the current FB before it's replaced by the new one in

	 * drm_atomic_set_fb_for_plane(). We'll need the old FB in

	 * vc4_async_page_flip_complete() to decrement the BO usecnt and keep

	 * it consistent.

	 * FIXME: we should move to generic async-page-flip when it's

	 * available, so that we can get rid of this hand-made cleanup_fb()

	 * logic.

	/* Immediately update the plane's legacy fb pointer, so that later

	 * modeset prep sees the state that will be present when the semaphore

	 * is released.

 Driver takes ownership of state on successful async commit. */

 handled by drm_mode_cursor_universal */

 handled by drm_mode_cursor_universal */

	/* For now, we create just the primary and the legacy cursor

	 * planes.  We should be able to stack more planes on easily,

	 * but to do that we would need to compute the bandwidth

	 * requirement of the plane configuration, and reject ones

	 * that will take too much.

		/* We support CTM, but only for one CRTC at a time. It's therefore

		 * implemented as private driver state in vc4_kms, not here.

/*

 * Copyright Â© 2014 Broadcom

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING

 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

 * IN THE SOFTWARE.

/**

 * DOC: Interrupt management for the V3D engine

 *

 * We have an interrupt status register (V3D_INTCTL) which reports

 * interrupts, and where writing 1 bits clears those interrupts.

 * There are also a pair of interrupt registers

 * (V3D_INTENA/V3D_INTDIS) where writing a 1 to their bits enables or

 * disables that specific interrupt, and 0s written are ignored

 * (reading either one returns the set of enabled interrupts).

 *

 * When we take a binning flush done interrupt, we need to submit the

 * next frame for binning and move the finished frame to the render

 * thread.

 *

 * When we take a render frame interrupt, we need to wake the

 * processes waiting for some frame to be done, and get the next frame

 * submitted ASAP (so the hardware doesn't sit idle when there's work

 * to do).

 *

 * When we take the binner out of memory interrupt, we need to

 * allocate some new memory and pass it to the binner so that the

 * current job can make progress.

		/* If we had overflow memory allocated previously,

		 * then that chunk will free when the current bin job

		 * is done.  If we don't have a bin job running, then

		 * the chunk will be done whenever the list of render

		 * jobs has drained.

			/* There's nothing queued in the hardware, so

			 * the old slot is free immediately.

	/* Only submit the next job in the bin list if it matches the perfmon

	 * attached to the one that just finished (or if both jobs don't have

	 * perfmon attached to them).

 Stop the perfmon so that the next bin job can be started. */

	/* Only stop the perfmon if following jobs in the queue don't expect it

	 * to be enabled.

	/* If there's a render job waiting, start it. If this is not the case

	 * we may have to unblock the binner if it's been stalled because of

	 * perfmon (this can be checked by comparing the perfmon attached to

	 * the finished renderjob to the one attached to the next bin job: if

	 * they don't match, this means the binner is stalled and should be

	 * restarted).

	/* Acknowledge the interrupts we're handling here. The binner

	 * last flush / render frame done interrupt will be cleared,

	 * while OUTOMEM will stay high until the underlying cause is

	 * cleared.

 Disable OUTOMEM until the work is done. */

	/* Clear any pending interrupts someone might have left around

	 * for us.

	/* Enable the render done interrupts. The out-of-memory interrupt is

	 * enabled as soon as we have a binner BO allocated.

 Disable sending interrupts for our driver's IRQs. */

 Clear any pending interrupts we might have left. */

 Finish any interrupt handler still in flight. */

* Reinitializes interrupt registers when a GPU reset is performed. */

 Acknowledge any stale IRQs. */

	/*

	 * Turn all our interrupts on.  Binner out of memory is the

	 * only one we expect to trigger at this point, since we've

	 * just come from poweron and haven't supplied any overflow

	 * memory yet.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Broadcom

/**

 * DOC: VC4 KMS

 *

 * This is the general code for implementing KMS mode setting that

 * doesn't clearly associate with any of the other objects (plane,

 * crtc, HDMI encoder).

 Converts a DRM S31.32 value to the HW S0.9 format. */

 Sign bit. */

 We have zero integer bits so we can only saturate here. */

 Otherwise take the 9 most important fractional bits. */

		/*

		 * SCALER_DISPCTRL_DSP3 = X, where X < 2 means 'connect DSP3 to

		 * FIFO X'.

		 * SCALER_DISPCTRL_DSP3 = 3 means 'disable DSP 3'.

		 *

		 * DSP3 is connected to FIFO2 unless the transposer is

		 * enabled. In this case, FIFO 2 is directly accessed by the

		 * TXP IP, and we need to disable the FIFO2 -> pixelvalve1

		 * route.

	/* If the user didn't specify a modifier, use the

	 * vc4_set_tiling_ioctl() state for the BO.

/* Our CTM has some peculiar limitations: we can only enable it for one CRTC

 * at a time and the HW only supports S0.9 scalars. To account for the latter,

 * we don't allow userland to set a CTM that we have no hope of approximating.

 CTM is being disabled. */

 CTM is being enabled or the matrix changed. */

 fifo is 1-based since 0 disables CTM. */

			/* Check userland isn't trying to turn on CTM for more

			 * than one CRTC at a time.

			/* Check we can approximate the specified CTM.

			 * We disallow scalars |c| > 1.0 since the HW has

			 * no integer bits.

 Don't check the load when the tracker is disabled. */

	/* The absolute limit is 2Gbyte/sec, but let's take a margin to let

	 * the system work when other blocks are accessing the memory.

	/* HVS clock is supposed to run @ 250Mhz, let's take a margin and

	 * consider the maximum number of cycles is 240M.

/*

 * The BCM2711 HVS has up to 7 outputs connected to the pixelvalves and

 * the TXP (and therefore all the CRTCs found on that platform).

 *

 * The naive (and our initial) implementation would just iterate over

 * all the active CRTCs, try to find a suitable FIFO, and then remove it

 * from the pool of available FIFOs. However, there are a few corner

 * cases that need to be considered:

 *

 * - When running in a dual-display setup (so with two CRTCs involved),

 *   we can update the state of a single CRTC (for example by changing

 *   its mode using xrandr under X11) without affecting the other. In

 *   this case, the other CRTC wouldn't be in the state at all, so we

 *   need to consider all the running CRTCs in the DRM device to assign

 *   a FIFO, not just the one in the state.

 *

 * - To fix the above, we can't use drm_atomic_get_crtc_state on all

 *   enabled CRTCs to pull their CRTC state into the global state, since

 *   a page flip would start considering their vblank to complete. Since

 *   we don't have a guarantee that they are actually active, that

 *   vblank might never happen, and shouldn't even be considered if we

 *   want to do a page flip on a single CRTC. That can be tested by

 *   doing a modetest -v first on HDMI1 and then on HDMI0.

 *

 * - Since we need the pixelvalve to be disabled and enabled back when

 *   the FIFO is changed, we should keep the FIFO assigned for as long

 *   as the CRTC is enabled, only considering it free again once that

 *   CRTC has been disabled. This can be tested by booting X11 on a

 *   single display, and changing the resolution down and then back up.

 Nothing to do here, let's skip it */

 Muxing will need to be modified, mark it as such */

 If we're disabling our CRTC, we put back our channel */

		/*

		 * The problem we have to solve here is that we have

		 * up to 7 encoders, connected to up to 6 CRTCs.

		 *

		 * Those CRTCs, depending on the instance, can be

		 * routed to 1, 2 or 3 HVS FIFOs, and we need to set

		 * the change the muxing between FIFOs and outputs in

		 * the HVS accordingly.

		 *

		 * It would be pretty hard to come up with an

		 * algorithm that would generically solve

		 * this. However, the current routing trees we support

		 * allow us to simplify a bit the problem.

		 *

		 * Indeed, with the current supported layouts, if we

		 * try to assign in the ascending crtc index order the

		 * FIFOs, we can't fall into the situation where an

		 * earlier CRTC that had multiple routes is assigned

		 * one that was the only option for a later CRTC.

		 *

		 * If the layout changes and doesn't give us that in

		 * the future, we will need to have something smarter,

		 * but it works so far.

		/* Start with the load tracker enabled. Can be

		 * disabled through the debugfs load_tracker file.

 Set support for vblank irq fast disable, before drm_vblank_init() */

/*

 * Copyright Â© 2014 Broadcom

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING

 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

 * IN THE SOFTWARE.

/**

 * DOC: Shader validator for VC4.

 *

 * Since the VC4 has no IOMMU between it and system memory, a user

 * with access to execute shaders could escalate privilege by

 * overwriting system memory (using the VPM write address register in

 * the general-purpose DMA mode) or reading system memory it shouldn't

 * (reading it as a texture, uniform data, or direct-addressed TMU

 * lookup).

 *

 * The shader validator walks over a shader's BO, ensuring that its

 * accesses are appropriately bounded, and recording where texture

 * accesses are made so that we can do relocations for them in the

 * uniform stream.

 *

 * Shader BO are immutable for their lifetimes (enforced by not

 * allowing mmaps, GEM prime export, or rendering to from a CL), so

 * this validation is only performed at BO creation time.

 Current IP being validated. */

 IP at the end of the BO, do not read shader[max_ip] */

	/* For registers that were last written to by a MIN instruction with

	 * one argument being a uniform, the address of the uniform.

	 * Otherwise, ~0.

	 *

	 * This is used for the validation of direct address memory reads.

	/* Bitfield of which IPs are used as branch targets.

	 *

	 * Used for validation that the uniform stream is updated at the right

	 * points and clearing the texturing/clamping state.

	/* Set when entering a basic block, and cleared when the uniform

	 * address update is found.  This is used to make sure that we don't

	 * read uniforms when the address is undefined.

	/* Set when we find a backwards branch.  If the branch is backwards,

	 * the taraget is probably doing an address reset to read uniforms,

	 * and so we need to be sure that a uniforms address is present in the

	 * stream, even if the shader didn't need to read uniforms in later

	 * basic blocks.

	/* Set when we find an instruction writing the top half of the

	 * register files.  If we allowed writing the unusable regs in

	 * a threaded shader, then the other shader running on our

	 * QPU's clamp validation would be invalid.

		/* Make sure that this texture load is an add of the base

		 * address of the UBO to a clamped offset within the UBO.

		/* We assert that the clamped address is the first

		 * argument, and the UBO base address is the second argument.

		 * This is arbitrary, but simpler than supporting flipping the

		 * two either way.

		/* Store the clamp value's offset in p1 (see reloc_tex() in

		 * vc4_validate.c).

	/* Since direct uses a RADDR uniform reference, it will get counted in

	 * check_instruction_reads()

	/* We want our reset to be pointing at whatever uniform follows the

	 * uniforms base address.

	/* We only support absolute uniform address changes, and we

	 * require that they be in the current basic block before any

	 * of its uniform reads.

	 *

	 * One could potentially emit more efficient QPU code, by

	 * noticing that (say) an if statement does uniform control

	 * flow for all threads and that the if reads the same number

	 * of uniforms on each side.  However, this scheme is easy to

	 * validate so it's all we allow for now.

		/* These only interact with the tile buffer, not main memory,

		 * so they're safe.

		/* XXX: I haven't thought about these, so don't support them

		 * for now.

		/* We allow VPM setup in general, even including VPM DMA

		 * configuration setup, because the (unsafe) DMA can only be

		 * triggered by QPU_W_VPM_ADDR writes.

	/* Check whether OP_ADD's A argumennt comes from a live MAX(x, 0),

	 * before we clear previous live state.

 Clear live state for registers written by our instruction. */

		/* Nothing further to do for live tracking, since only ADDs

		 * generate new live clamp registers.

 Now, handle remaining live clamp tracking for the ADD operation. */

		/* Track live clamps of a value to a minimum of 0 (in either

		 * arg).

		/* Track live clamps of a value clamped to a minimum of 0 and

		 * a maximum of some uniform's offset.

	/* We don't want to have to worry about validation of this, and

	 * there's no need for it.

		/* This can't overflow the uint32_t, because we're reading 8

		 * bytes of instruction to increment by 4 here, so we'd

		 * already be OOM.

/* Make sure that all branches are absolute and point within the shader, and

 * note their targets for later.

			/* There are two delay slots after program end is

			 * signaled that are still executed, then we're

			 * finished.  validation_state->max_ip is the

			 * instruction after the last valid instruction in the

			 * program.

		/* The actual branch target is the instruction after the delay

		 * slots, plus whatever byte offset is in the low 32 bits of

		 * the instruction.  Make sure we're not branching beyond the

		 * end of the shader object.

		/* Make sure that the non-branching path is also not outside

		 * the shader.

/* Resets any known state for the shader, used when we may be branched to from

 * multiple locations in the program (or at shader start).

	/* Reset our live values tracking, since this instruction may have

	 * multiple predecessors.

	 *

	 * One could potentially do analysis to determine that, for

	 * example, all predecessors have a live max clamp in the same

	 * register, but we don't bother with that.

	/* Since we've entered a basic block from potentially multiple

	 * predecessors, we need the uniforms address to be updated before any

	 * unforms are read.  We require that after any branch point, the next

	 * uniform to be loaded is a uniform address offset.  That uniform's

	 * offset will be marked by the uniform address register write

	 * validation, or a one-off the end-of-program check.

 Reset r0-r3 live clamp data */

		/* There are two delay slots after program end is signaled

		 * that are still executed, then we're finished.

 Might corrupt other thread */

	/* If we did a backwards branch and we haven't emitted a uniforms

	 * reset since then, we still need the uniforms stream to have the

	 * uniforms address available so that the backwards branch can do its

	 * uniforms reset.

	 *

	 * We could potentially prove that the backwards branch doesn't

	 * contain any uses of uniforms until program exit, but that doesn't

	 * seem to be worth the trouble.

	/* Again, no chance of integer overflow here because the worst case

	 * scenario is 8 bytes of uniforms plus handles per 8-byte

	 * instruction.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright Â© 2018 Broadcom

 *

 * Authors:

 *	Eric Anholt <eric@anholt.net>

 *	Boris Brezillon <boris.brezillon@bootlin.com>

/* Base address of the output.  Raster formats must be 4-byte aligned,

 * T and LT must be 16-byte aligned or maybe utile-aligned (docs are

 * inconsistent, but probably utile).

/* Pitch in bytes for raster images, 16-byte aligned.  For tiled, it's

 * the width in tiles.

/* For T-tiled imgaes, DST_PITCH should be the number of tiles wide,

 * shifted up.

/* For LT-tiled images, DST_PITCH should be the number of utiles wide,

 * shifted up.

/* Pre-rotation width/height of the image.  Must match HVS config.

 *

 * If TFORMAT and 32-bit, limit is 1920 for 32-bit and 3840 to 16-bit

 * and width/height must be tile or utile-aligned as appropriate.  If

 * transposing (rotating), width is limited to 1920.

 *

 * Height is limited to various numbers between 4088 and 4095.  I'd

 * just use 4088 to be safe.

 These bits are set to 0x54 */

 Bits 22-23 are set to 0x01 */

 Powers down the internal memory. */

/* Enables storing the alpha component in 8888/4444, instead of

 * filling with ~ALPHA_INVERT.

/* 4 bits, each enables stores for a channel in each set of 4 bytes.

 * Set to 0xf for normal operation.

 Debug: Generate VSTART again at EOF. */

/* Debug: Terminate the current frame immediately.  Stops AXI

 * writes.

/* Inverts alpha if TXP_ALPHA_ENABLE, chooses fill value for

 * !TXP_ALPHA_ENABLE.

/* Note: I've listed the channels here in high bit (in byte 3/2/1) to

 * low bit (in byte 0) order.

 888s are non-rotated, raster-only */

 If TFORMAT is set, generates LT instead of T format. */

 Rotate output by 90 degrees. */

 Generate a tiled format for V3D. */

 Generates some undefined test mode output. */

 Request odd field from HVS. */

 Raise interrupt when idle. */

 Set when generating a frame, clears when idle. */

 Starts a frame.  Self-clearing. */

 Number of lines received and committed to memory. */

 Pitch must be aligned on 16 bytes. */

 Disable vblank irq handling before crtc is disabled. */

	/*

	 * Make sure we issue a vblank event after disabling the CRTC if

	 * someone was waiting it.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Broadcom

/**

 * DOC: VC4 V3D performance monitor module

 *

 * The V3D block provides 16 hardware counters which can count various events.

 Number of monitored counters cannot exceed HW limits. */

 Make sure all events are valid. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Broadcom

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2016 Broadcom

/**

 * DOC: VC4 DSI0/DSI1 module

 *

 * BCM2835 contains two DSI modules, DSI0 and DSI1.  DSI0 is a

 * single-lane DSI controller, while DSI1 is a more modern 4-lane DSI

 * controller.

 *

 * Most Raspberry Pi boards expose DSI1 as their "DISPLAY" connector,

 * while the compute module brings both DSI0 and DSI1 out.

 *

 * This driver has been tested for DSI1 video-mode display only

 * currently, with most of the information necessary for DSI0

 * hopefully present.

 Command packet control. */

 AKA PKTC */

 Short, trigger, BTA, or a long packet that fits all in CMDFIFO. */

/* Primary display where cmdfifo provides part of the payload and

 * pixelvalve the rest.

/* Secondary display where cmdfifo provides part of the payload and

 * pixfifo the rest.

 Command only.  Uses TXPKT1H and DISPLAY_NO */

 Command with BTA for either ack or read data. */

 Trigger according to TRIG_CMD */

/* BTA alone for getting error status after a command, or a TE trigger

 * without a previous command.

 Command packet header. */

 AKA PKTH */

 AKA RX1_PKTH */

 Byte count if DSI_RXPKT1H_PKT_TYPE_LONG */

 Short return bytes if !DSI_RXPKT1H_PKT_TYPE_LONG */

 AKA RX2_PKTH */

 AKA CMD_DATAF */

/* Transmit RGB pixels and null packets only during HACTIVE, instead

 * of going to LP-STOP.

 Transmit blanking packet only during vblank, instead of allowing LP-STOP. */

 Transmit blanking packet only during HFP, instead of allowing LP-STOP. */

 Transmit blanking packet only during HBP, instead of allowing LP-STOP. */

 Enables end events for HSYNC/VSYNC, not just start events. */

 Default is VIDEO mode. */

 Format of the data written to TXPKT_PIX_FIFO. */

 DISP1 is always command mode. */

 AKA PIX_FIFO */

 Signaled when the clock lane enters the given state. */

 Signaled on timeouts */

 Contention on a line when trying to drive the line low */

 Control error: incorrect line state sequence on data lane 0. */

 LPDT synchronization error (bits received not a multiple of 8. */

/* Signaled after receiving an error packet from the display in

 * response to a read.

/* Signaled after receiving a packet.  The header and optional short

 * response will be in RXPKT1H, and a long response will be in the

 * RXPKT_FIFO.

 Signaled after all repeats of TXPKT1 are transferred. */

 Signaled after each TXPKT1 repeat is scheduled. */

/* State reporting bits.  These mostly behave like INT_STAT, where

 * writing a 1 clears the bit.

 Set when in forward direction */

/* Actually, all registers in the range that aren't otherwise claimed

 * will return the ID.

 Whether we're on bcm2835's DSI0 or DSI1. */

 General DSI hardware state. */

 DSI channel for the panel we're connected to. */

	/* Input clock from CPRMAN to the digital PHY, for the DSI

	 * escape clock.

	/* Input clock to the analog PHY, used to generate the DSI bit

	 * clock.

 HS Clocks generated within the DSI analog PHY. */

	/* Pixel clock output to the pixelvalve, generated from the HS

	 * clock.

 DSI0 should be able to write normally. */

 VC4 DSI encoder KMS struct */

 Enters or exits Ultra Low Power State. */

	/* The DSI module can't be disabled while the module is

	 * generating ULPS state.  So, to be able to disable the

	 * module, we have the AFE latch the ULPS state and continue

	 * on to having the module enter STOP.

	/* The HS timings have to be rounded up to a multiple of 8

	 * because we're using the byte clock.

 ESC always runs at 100Mhz. */

/* Extends the mode's blank intervals to handle BCM2835's integer-only

 * DSI PLL divider.

 *

 * On 2835, PLLD is set to 2Ghz, and may not be changed by the display

 * driver since most peripherals are hanging off of the PLLD_PER

 * divider.  PLLD_DSI1, which drives our DSI bit clock (and therefore

 * the pixel clock), only has an integer divider off of DSI.

 *

 * To get our panel mode to refresh at the expected 60Hz, we need to

 * extend the horizontal blank time.  This means we drive a

 * higher-than-expected clock rate to the panel, but that's what the

 * firmware does too.

	/* Find what divider gets us a faster clock than the requested

	 * pixel clock.

	/* Now that we've picked a PLL divider, calculate back to its

	 * pixel clock.

 Given the new pixel clock, adjust HFP to keep vrefresh the same. */

 Minimum LP state duration in escape clock cycles. */

	/* Round up the clk_set_rate() request slightly, since

	 * PLLD_DSI1 is an integer divider and its rate selection will

	 * never round up.

 Reset the DSI and all its fifos. */

 Clear all stat bits so we see what has happened during enable. */

 Set AFE CTR00/CTR1 to release powerdown of analog. */

 AFEC reset hold time */

	/* Yes, we set the DSI0P/DSI1P pixel clock to the byte rate,

	 * not the pixel clock rate.  DSIxP take from the APHY's byte,

	 * DDR2, or DDR4 clock (we use byte) and feed into the PV at

	 * that rate.  Separately, a value derived from PIX_CLK_DIV

	 * and HS_CLKC is fed into the PV to divide down to the actual

	 * pixel clock for pushing pixels into DSI.

	/* How many ns one DSI unit interval is.  Note that the clock

	 * is DDR, so there's an extra divide by 2.

	/* T_INIT is how long STOP is driven after power-up to

	 * indicate to the slave (also coming out of power-up) that

	 * master init is complete, and should be greater than the

	 * maximum of two value: T_INIT,MASTER and T_INIT,SLAVE.  The

	 * D-PHY spec gives a minimum 100us for T_INIT,MASTER and

	 * T_INIT,SLAVE, while allowing protocols on top of it to give

	 * greater minimums.  The vc4 firmware uses an extremely

	 * conservative 5ms, and we maintain that here.

 HS timeout in HS clock cycles: disabled. */

 LP receive timeout in HS clocks. */

 Bus turnaround timeout */

 Display reset sequence timeout */

	/* Set up DISP1 for transferring long command payloads through

	 * the pixfifo.

 Ungate the block. */

 Bring AFE out of reset. */

		/* Divide data across the various FIFOs we have available.

		 * The command FIFO takes byte-oriented data, but is of

		 * limited size. The pixel FIFO (never actually used for

		 * pixel data in reality) is word oriented, and substantially

		 * larger. So, we use the pixel FIFO for most of the data,

		 * sending the residual bytes in the command FIFO at the start.

		 *

		 * With this arrangement, the command FIFO will never get full.

	/* Send one copy of the packet.  Larger repeats are used for pixel

	 * data in command mode.

 Enable the appropriate interrupt for the transfer completion. */

 Send the packet. */

 FINISHME: Handle AWER */

/*

 * Initial handler for port 1 where we need the reg_dma workaround.

 * The register DMA writes sleep, so we can't do it in the top half.

 * Instead we use IRQF_ONESHOT so that the IRQ gets disabled in the

 * parent interrupt contrller until our interrupt thread is done.

/*

 * Normal IRQ handler for port 0, or the threaded IRQ handler for port

 * 1 where we need the reg_dma workaround.

/**

 * vc4_dsi_init_phy_clocks - Exposes clocks generated by the analog

 * PHY that are consumed by CPRMAN (clk-bcm2835.c).

 * @dsi: DSI encoder

		/* We just use core fixed factor clock ops for the PHY

		 * clocks.  The clocks are actually gated by the

		 * PHY_AFEC0_DDRCLK_EN bits, which we should be

		 * setting if we use the DDR/DDR2 clocks.  However,

		 * vc4_dsi_encoder_enable() is setting up both AFEC0,

		 * setting both our parent DSI PLL's rate and this

		 * clock's rate, so it knows if DDR/DDR2 are going to

		 * be used and could enable the gates itself.

	/* DSI1 on BCM2835/6/7 has a broken AXI slave that doesn't respond to

	 * writes from the ARM.  It does handle writes from the DMA engine,

	 * so set up a channel for talking to it.

		/* Get the physical address of the device's registers.  The

		 * struct resource for the regs gives us the bus address

		 * instead.

 At startup enable error-reporting interrupts and nothing else. */

 Clear any existing interrupt state. */

 The esc clock rate is supposed to always be 100Mhz. */

	/* Disable the atomic helper calls into the bridge.  We

	 * manually call the bridge pre_enable / enable / etc. calls

	 * from our driver, since we need to sequence them within the

	 * encoder's enable/disable paths.

	/*

	 * Restore the bridge_chain so the bridge detach procedure can happen

	 * normally.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Broadcom

/**

 * DOC: VC4 HVS module.

 *

 * The Hardware Video Scaler (HVS) is the piece of hardware that does

 * translation, scaling, colorspace conversion, and compositing of

 * pixels stored in framebuffers into a FIFO of pixels going out to

 * the Pixel Valve (CRTC).  It operates at the system clock rate (the

 * system audio clock gate, specifically), which is much higher than

 * the pixel clock rate.

 *

 * There is a single global HVS, with multiple output FIFOs that can

 * be consumed by the PVs.  This file just manages the resources for

 * the HVS, while the vc4_crtc.c code actually drives HVS setup for

 * each CRTC.

/* The filter kernel is composed of dwords each containing 3 9-bit

 * signed integers packed next to each other.

/* The whole filter kernel is arranged as the coefficients 0-16 going

 * up, then a pad, then 17-31 going down and reversed within the

 * dwords.  This means that a linear phase kernel (where it's

 * symmetrical at the boundary between 15 and 16) has the last 5

 * dwords matching the first 5, but reversed.

/* Recommended B=1/3, C=1/3 filter choice from Mitchell/Netravali.

 * http://www.cs.utexas.edu/~fussell/courses/cs384g/lectures/mitchell/Mitchell.pdf

	/* The LUT memory is laid out with each HVS channel in order,

	 * each of which takes 256 writes for R, 256 for G, then 256

	 * for B.

	/* Turn on the scaler, which will wait for vstart to start

	 * compositing.

	 * When feeding the transposer, we should operate in oneshot

	 * mode.

	/* Reload the LUT, since the SRAMs would have been disabled if

	 * all CRTCs had SCALER_DISPBKGND_GAMMA unset at once.

 Once we leave, the scaler should be disabled and its fifo empty. */

	/* The pixelvalve can only feed one encoder (and encoders are

	 * 1:1 with connectors.)

 Account for SCALER_CTL0_END. */

 Copy all the active planes' dlist contents to the hardware dlist. */

 Is this the first active plane? */

			/* We need to enable background fill when a plane

			 * could be alpha blending from the background, i.e.

			 * where no other plane is underneath. It suffices to

			 * consider the first active plane here since we set

			 * needs_bg_fill such that either the first plane

			 * already needs it or all planes on top blend from

			 * the first or a lower plane.

		/* This sets a black background color fill, as is the case

		 * with other DRM drivers.

	/* Only update DISPLIST if the CRTC was already running and is not

	 * being disabled.

	 * vc4_crtc_enable() takes care of updating the dlist just after

	 * re-enabling VBLANK interrupts and before enabling the engine.

	 * If the CRTC is being disabled, there's no point in updating this

	 * information.

			/* Unsetting DISPBKGND_GAMMA skips the gamma lut step

			 * in hardware, which is the same as a linear lut that

			 * DRM expects us to use in absence of a user lut.

 Interrupt masking is not always honored, so check it here. */

 Clear every per-channel interrupt flag. */

	/* Set up the HVS display list memory manager.  We never

	 * overwrite the setup from the bootloader (just 128b out of

	 * our 16K), since we don't want to scramble the screen when

	 * transitioning from the firmware's boot setup to runtime.

	/* Set up the HVS LBM memory manager.  We could have some more

	 * complicated data structure that allowed reuse of LBM areas

	 * between planes when they don't overlap on the screen, but

	 * for now we just allocate globally.

 48k words of 2x12-bit pixels */

 60k words of 4x12-bit pixels */

	/* Upload filter kernels.  We only have the one for now, so we

	 * keep it around for the lifetime of the driver.

	/* Set DSP3 (PV1) to use HVS channel 2, which would otherwise

	 * be unused.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014-2015 Broadcom

 * Copyright (C) 2013 Red Hat

/**

 * DOC: Broadcom VC4 Graphics Driver

 *

 * The Broadcom VideoCore 4 (present in the Raspberry Pi) contains a

 * OpenGL ES 2.0-compatible 3D engine called V3D, and a highly

 * configurable display output pipeline that supports HDMI, DSI, DPI,

 * and Composite TV output.

 *

 * The 3D engine also has an interface for submitting arbitrary

 * compute shader-style jobs using the same shader processor as is

 * used for vertex and fragment shaders in GLES 2.0.  However, given

 * that the hardware isn't able to expose any standard interfaces like

 * OpenGL compute shaders or OpenCL, it isn't supported by this

 * driver.

 Helper function for mapping the regs on a platform device. */

 If VC4 V3D is missing, don't advertise render nodes. */

/*

 * This list determines the binding order of our components, and we have

 * a few constraints:

 *   - The TXP driver needs to be bound before the PixelValves (CRTC)

 *     but after the HVS to set the possible_crtc field properly

 *   - The HDMI driver needs to be bound after the HVS so that we can

 *     lookup the HVS maximum core clock rate and figure out if we

 *     support 4kp60 or not.

/*

 * Copyright Â© 2014 Broadcom

 *

 * Permission is hereby granted, free of charge, to any person obtaining a

 * copy of this software and associated documentation files (the "Software"),

 * to deal in the Software without restriction, including without limitation

 * the rights to use, copy, modify, merge, publish, distribute, sublicense,

 * and/or sell copies of the Software, and to permit persons to whom the

 * Software is furnished to do so, subject to the following conditions:

 *

 * The above copyright notice and this permission notice (including the next

 * paragraph) shall be included in all copies or substantial portions of the

 * Software.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL

 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING

 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

 * IN THE SOFTWARE.

	/* If the user's array isn't big enough, just return the

	 * required array size.

 Save the user's BO pointer, so we don't stomp it with the memcpy. */

 Get the bos from both binner and renderer into hang state. */

			/* Retain BOs just in case they were marked purgeable.

			 * This prevents the BO from being purged before

			 * someone had a chance to dump the hang state.

			/* No need to retain BOs coming from the ->unref_list

			 * because they are naturally unpurgeable.

	/* We need to turn purgeable BOs into unpurgeable ones so that

	 * userspace has a chance to dump the hang state before the kernel

	 * decides to purge those BOs.

	 * Note that BO consistency at dump time cannot be guaranteed. For

	 * example, if the owner of these BOs decides to re-use them or mark

	 * them purgeable again there's nothing we can do to prevent it.

		/* Power the device off and back on the by dropping the

		 * reference on runtime PM.

	/* Rearm the hangcheck -- another job might have been waiting

	 * for our hung one to get kicked off, and vc4_irq_reset()

	 * would have started it.

 If idle, we can stop watching for hangs. */

	/* If we've made any progress in execution, rearm the timer

	 * and wait.

	/* We've gone too long with no progress, reset.  This has to

	 * be done from a work struct, since resetting can sleep and

	 * this timer hook isn't allowed to.

	/* Set the current and end address of the control list.

	 * Writing the end register is what starts the job.

	/* Flush the GPU L2 caches.  These caches sit on top of system

	 * L3 (the 128kb or so shared with the CPU), and are

	 * non-allocating in the L3.

/* Sets the registers for the next job to be actually be executed in

 * the hardware.

 *

 * The job_lock should be held during this.

	/* Only start the perfmon if it was not already started by a previous

	 * job.

	/* Either put the job in the binner if it uses the binner, or

	 * immediately move it to the to-be-rendered queue.

		/* We can't start the next bin job if the previous job had a

		 * different perfmon instance attached to it. The same goes

		 * if one of them had a perfmon attached to it and the other

		 * one doesn't.

	/* A previous RCL may have written to one of our textures, and

	 * our full cache flush at bin time may have occurred before

	 * that RCL completed.  Flush the texture cache now, but not

	 * the instructions or uniforms (since we don't write those

	 * from an RCL).

/* Takes the reservation lock on all the BOs being referenced, so that

 * at queue submit time we can update the reservations.

 *

 * We don't lock the RCL the tile alloc/state BOs, or overflow memory

 * (all of which are on exec->unref_list).  They're entirely private

 * to vc4, so we don't attach dma-buf fences to them.

	/* Reserve space for our shared (read-only) fence references,

	 * before we commit the CL to the hardware.

/* Queues a struct vc4_exec_info for execution.  If no job is

 * currently executing, then submits it.

 *

 * Unlike most GPUs, our hardware only handles one command list at a

 * time.  To queue multiple jobs at once, we'd need to edit the

 * previous command list to have a jump to the new one at the end, and

 * then bump the end address.  That's a change for a later date,

 * though.

	/* If no bin job was executing and if the render job (if any) has the

	 * same perfmon as our job attached to it (or if both jobs don't have

	 * perfmon activated), then kick ours off.  Otherwise, it'll get

	 * started when the previous job's flush/render done interrupt occurs.

/**

 * vc4_cl_lookup_bos() - Sets up exec->bo[] with the GEM objects

 * referenced by the job.

 * @dev: DRM device

 * @file_priv: DRM file for this fd

 * @exec: V3D job being set up

 *

 * The command validator needs to reference BOs by their index within

 * the submitted job's BO list.  This does the validation of the job's

 * BO list and reference counting for the lifetime of the job.

		/* See comment on bo_index for why we have to check

		 * this.

	/* Decrease usecnt on acquired objects.

	 * We cannot rely on  vc4_complete_exec() to release resources here,

	 * because vc4_complete_exec() has no information about which BO has

	 * had its ->usecnt incremented.

	 * To make things easier we just free everything explicitly and set

	 * exec->bo to NULL so that vc4_complete_exec() skips the 'BO release'

	 * step.

 Release any reference to acquired objects. */

	/* Allocate space where we'll store the copied in user command lists

	 * and shader records.

	 *

	 * We don't just copy directly into the BOs because we need to

	 * read the contents back for validation, and I think the

	 * bo->vaddr is uncached access.

	/* Block waiting on any previous rendering into the CS's VBO,

	 * IB, or textures, so that pixels are actually written by the

	 * time we try to read them.

	/* If we got force-completed because of GPU reset rather than

	 * through our IRQ handler, signal the fence now.

 Free up the allocation of any bin slots we used. */

 Release the reference on the binner BO if needed. */

 Release the reference we had on the perf monitor. */

/* Scheduled when any job has been completed, this walks the list of

 * jobs that had completed and unrefs their BOs and frees their exec

 * structs.

/**

 * vc4_submit_cl_ioctl() - Submits a job (frame) to the VC4.

 * @dev: DRM device

 * @data: ioctl argument

 * @file_priv: DRM file for this fd

 *

 * This is the main entrypoint for userspace to submit a 3D frame to

 * the GPU.  Userspace provides the binner command list (if

 * applicable), and the kernel sets up the render command list to draw

 * to the framebuffer described in the ioctl, using the command lists

 * that the 3D engine's binner will produce.

		/* When the fence (or fence array) is exclusively from our

		 * context we can skip the wait since jobs are executed in

		 * order of their submission through this ioctl and this can

		 * only have fences from a prior job.

		/* We replace the fence in out_sync in vc4_queue_submit since

		 * the render job could execute immediately after that call.

		 * If it finishes before our ioctl processing resumes the

		 * render job fence could already have been freed.

	/* Clear this out of the struct we'll be putting in the queue,

	 * since it's part of our stack.

	/* The syncobj isn't part of the exec data and we need to free our

	 * reference even if job submission failed.

 Return the seqno for our job. */

	/* Waiting for exec to finish would need to be done before

	 * unregistering V3D.

	/* V3D should already have disabled its interrupt and cleared

	 * the overflow allocation registers.  Now free the object.

 Only BOs exposed to userspace can be purged. */

	/* Not sure it's safe to purge imported BOs. Let's just assume it's

	 * not until proven otherwise.

		/* If the BO is about to be marked as purgeable, is not used

		 * and is not already purgeable or purged, add it to the

		 * purgeable list.

		/* The BO has not been purged yet, just remove it from

		 * the purgeable list.

 Save the purged state. */

 Update internal madv state only if the bo was not purged. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Avionic Design GmbH

 * Copyright (C) 2012-2013, NVIDIA Corporation

/**

 * host1x_subdev_add() - add a new subdevice with an associated device node

 * @device: host1x device to add the subdevice to

 * @driver: host1x driver containing the subdevices

 * @np: device node

 recursively add children */

 XXX cleanup? */

/**

 * host1x_subdev_del() - remove subdevice

 * @subdev: subdevice to remove

/**

 * host1x_device_parse_dt() - scan device tree and add matching subdevices

 * @device: host1x logical device

 * @driver: host1x driver

	/*

	 * Move the subdevice to the list of active (registered) subdevices

	 * and associate it with a client. At the same time, associate the

	 * client with its parent device.

	/*

	 * If all subdevices have been activated, we're about to remove the

	 * first active subdevice, so unload the driver first.

	/*

	 * Move the subdevice back to the list of idle subdevices and remove

	 * it from list of clients.

	/*

	 * XXX: Perhaps don't do this here, but rather explicitly remove it

	 * when the device is about to be deleted.

	 *

	 * This is somewhat complicated by the fact that this function is

	 * used to remove the subdevice when a client is unregistered but

	 * also when the composite device is about to be removed.

/**

 * host1x_device_init() - initialize a host1x logical device

 * @device: host1x logical device

 *

 * The driver for the host1x logical device can call this during execution of

 * its &host1x_driver.probe implementation to initialize each of its clients.

 * The client drivers access the subsystem specific driver data using the

 * &host1x_client.parent field and driver data associated with it (usually by

 * calling dev_get_drvdata()).

 reset client to end of list for late teardown */

/**

 * host1x_device_exit() - uninitialize host1x logical device

 * @device: host1x logical device

 *

 * When the driver for a host1x logical device is unloaded, it can call this

 * function to tear down each of its clients. Typically this is done after a

 * subsystem-specific data structure is removed and the functionality can no

 * longer be used.

	/*

	 * This duplicates most of of_device_uevent(), but the latter cannot

	 * be called from modules and operates on dev->of_node, which is not

	 * available in this case.

	 *

	 * Note that this is really only needed for backwards compatibility

	 * with libdrm, which parses this information from sysfs and will

	 * fail if it can't find the OF_FULLNAME, specifically.

 unregister subdevices */

		/*

		 * host1x_subdev_unregister() will remove the client from

		 * any lists, so we'll need to manually add it back to the

		 * list of idle clients.

		 *

		 * XXX: Alternatively, perhaps don't remove the client from

		 * any lists in host1x_subdev_unregister() and instead do

		 * that explicitly from host1x_unregister_client()?

 add the client to the list of idle clients */

 remove subdevices */

 move clients to idle list */

 finally remove the device */

/*

 * Removes a device by first unregistering any subdevices and then removing

 * itself from the list of devices.

 *

 * This function must be called with the host1x->devices_lock held.

/**

 * host1x_register() - register a host1x controller

 * @host1x: host1x controller

 *

 * The host1x controller driver uses this to register a host1x controller with

 * the infrastructure. Note that all Tegra SoC generations have only ever come

 * with a single host1x instance, so this function is somewhat academic.

/**

 * host1x_unregister() - unregister a host1x controller

 * @host1x: host1x controller

 *

 * The host1x controller driver uses this to remove a host1x controller from

 * the infrastructure.

/**

 * host1x_driver_register_full() - register a host1x driver

 * @driver: host1x driver

 * @owner: owner module

 *

 * Drivers for host1x logical devices call this function to register a driver

 * with the infrastructure. Note that since these drive logical devices, the

 * registration of the driver actually triggers tho logical device creation.

 * A logical device will be created for each host1x instance.

/**

 * host1x_driver_unregister() - unregister a host1x driver

 * @driver: host1x driver

 *

 * Unbinds the driver from each of the host1x logical devices that it is

 * bound to, effectively removing the subsystem devices that they represent.

/**

 * __host1x_client_init() - initialize a host1x client

 * @client: host1x client

 * @key: lock class key for the client-specific mutex

/**

 * host1x_client_exit() - uninitialize a host1x client

 * @client: host1x client

/**

 * __host1x_client_register() - register a host1x client

 * @client: host1x client

 * @key: lock class key for the client-specific mutex

 *

 * Registers a host1x client with each host1x controller instance. Note that

 * each client will only match their parent host1x controller and will only be

 * associated with that instance. Once all clients have been registered with

 * their parent host1x controller, the infrastructure will set up the logical

 * device and call host1x_device_init(), which will in turn call each client's

 * &host1x_client_ops.init implementation.

/**

 * host1x_client_unregister() - unregister a host1x client

 * @client: host1x client

 *

 * Removes a host1x client from its host1x controller instance. If a logical

 * device has already been initialized, it will be torn down.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Syncpoint dma_fence implementation

 *

 * Copyright (c) 2020, NVIDIA Corporation.

	/*

	 * The dma_fence framework requires the fence driver to keep a

	 * reference to any fences for which 'enable_signaling' has been

	 * called (and that have not been signalled).

	 *

	 * We provide a userspace API to create arbitrary syncpoint fences,

	 * so we cannot normally guarantee that all fences get signalled.

	 * As such, setup a timeout, so that long-lasting fences will get

	 * reaped eventually.

 intr framework takes ownership of waiter */

	/*

	 * The fence may get signalled at any time after the above call,

	 * so we need to initialize all state used by signalling

	 * before it.

	/*

	 * Cancel pending timeout work - if it races, it will

	 * not get 'f->signaling' and return.

	/*

	 * Cancel pending timeout work - if it races, it will

	 * not get 'f->signaling' and return.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra host1x Interrupt Management

 *

 * Copyright (c) 2010-2013, NVIDIA Corporation.

 Wait list management */

/*

 * add a waiter to a waiter queue, sorted by threshold

 * returns true if it was added at the head of the queue

/*

 * run through a waiter queue for a single sync point ID

 * and gather all completed waiters into lists by actions

 consolidate submit cleanups */

 PENDING->REMOVED or CANCELLED->HANDLED */

  Add nr_completed to trace */

/*

 * Remove & handle all waiters that have completed for the given syncpt

/*

 * Sync point threshold interrupt service thread function

 * Handles sync point threshold triggers, in thread context

 initialize a new waiter */

 added at head of list - new threshold value */

 added as first waiter - enable interrupt */

 Wait until any concurrently executing handler has finished. */

 output diagnostics */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra host1x Command DMA

 *

 * Copyright (c) 2010-2013, NVIDIA Corporation.

/*

 * push_buffer

 *

 * The push buffer is a circular array of words to be fetched by command DMA.

 * Note that it works slightly differently to the sync queue; fence == pos

 * means that the push buffer is full, not empty.

/*

 * Typically the commands written into the push buffer are a pair of words. We

 * use slots to represent each of these pairs and to simplify things. Note the

 * strange number of slots allocated here. 512 slots will fit exactly within a

 * single memory page. We also need one additional word at the end of the push

 * buffer for the RESTART opcode that will instruct the CDMA to jump back to

 * the beginning of the push buffer. With 512 slots, this means that we'll use

 * 2 memory pages and waste 4092 bytes of the second page that will never be

 * used.

/*

 * Clean up push buffer resources

/*

 * Init push buffer resources

 initialize buffer pointers */

/*

 * Push two words to the push buffer

 * Caller must ensure push buffer is not full

/*

 * Pop a number of two word slots from the push buffer

 * Caller must ensure push buffer is not empty

 Advance the next write position */

/*

 * Return the number of two word slots free in the push buffer

/*

 * Sleep (if necessary) until the requested event happens

 *   - CDMA_EVENT_SYNC_QUEUE_EMPTY : sync queue is completely empty.

 *     - Returns 1

 *   - CDMA_EVENT_PUSH_BUFFER_SPACE : there is space in the push buffer

 *     - Return the amount of space (> 0)

 * Must be called with the cdma lock held.

 If somebody has managed to already start waiting, yield */

/*

 * Sleep (if necessary) until the push buffer has enough free space.

 *

 * Must be called with the cdma lock held.

 If somebody has managed to already start waiting, yield */

/*

 * Start timer that tracks the time spent by the job.

 * Must be called with the cdma lock held.

 timer already started */

/*

 * Stop timer when a buffer submission completes.

 * Must be called with the cdma lock held.

/*

 * For all sync queue entries that have already finished according to the

 * current sync point registers:

 *  - unpin & unref their mems

 *  - pop their push buffer slots

 *  - remove them from the sync queue

 * This is normally called from the host code's worker thread, but can be

 * called manually if necessary.

 * Must be called with the cdma lock held.

	/*

	 * Walk the sync queue, reading the sync point registers as necessary,

	 * to consume as many sync queue entries as possible without blocking

 Check whether this syncpt has completed, and bail if not */

 Start timer on next pending syncpt */

 Cancel timeout, when a buffer completes */

 Unpin the memory */

 Pop push buffer slots */

	/*

	 * Move the sync_queue read pointer to the first entry that hasn't

	 * completed based on the current HW syncpt value. It's likely there

	 * won't be any (i.e. we're still at the head), but covers the case

	 * where a syncpt incr happens just prior/during the teardown.

 all jobs have been completed */

	/*

	 * Increment with CPU the remaining syncpts of a partially executed job.

	 *

	 * CDMA will continue execution starting with the next job or will get

	 * into idle state.

 do CPU increments for the remaining syncpts */

 won't need a timeout when replayed */

 safe to use CPU to incr syncpts */

				/*

				 * Overwrite opcodes with 0 word writes

				 * to offset 0xbad. This does nothing but

				 * has a easily detected signature in debug

				 * traces.

 roll back DMAGET and start up channel again */

/*

 * Create a cdma

/*

 * Destroy a cdma

/*

 * Begin a cdma submit

	/*

	 * Check if syncpoint was locked due to previous job timeout.

	 * This needs to be done within the cdma lock to avoid a race

	 * with the timeout handler.

 init state on first submit with timeout value */

/*

 * Push two words into a push buffer slot

 * Blocks as necessary if the push buffer is full.

/*

 * Push four words into two consecutive push buffer slots. Note that extra

 * care needs to be taken not to split the two slots across the end of the

 * push buffer. Otherwise the RESTART opcode at the end of the push buffer

 * that ensures processing will restart at the beginning will break up the

 * four words.

 *

 * Blocks as necessary if the push buffer is full.

 compute number of extra slots needed for padding */

	/*

	 * Note that we rely on the fact that this is only used to submit wide

	 * gather opcodes, which consist of 3 words, and they are padded with

	 * a NOP to avoid having to deal with fractional slots (a slot always

	 * represents 2 words). The fourth opcode passed to this function will

	 * therefore always be a NOP.

	 *

	 * This works around a slight ambiguity when it comes to opcodes. For

	 * all current host1x incarnations the NOP opcode uses the exact same

	 * encoding (0x20000000), so we could hard-code the value here, but a

	 * new incarnation may change it and break that assumption.

/*

 * End a cdma submit

 * Kick off DMA, add job to the sync queue, and a number of slots to be freed

 * from the pushbuffer. The handles for a submit must all be pinned at the same

 * time, but they can be unpinned in smaller chunks.

 start timer on idle -> active transitions */

/*

 * Update cdma state according to current sync point values

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra host1x Syncpoints

 *

 * Copyright (c) 2010-2015, NVIDIA Corporation.

/**

 * host1x_syncpt_alloc() - allocate a syncpoint

 * @host: host1x device data

 * @flags: bitfield of HOST1X_SYNCPT_* flags

 * @name: name for the syncpoint for use in debug prints

 *

 * Allocates a hardware syncpoint for the caller's use. The caller then has

 * the sole authority to mutate the syncpoint's value until it is freed again.

 *

 * If no free syncpoints are available, or a NULL name was specified, returns

 * NULL.

/**

 * host1x_syncpt_id() - retrieve syncpoint ID

 * @sp: host1x syncpoint

 *

 * Given a pointer to a struct host1x_syncpt, retrieves its ID. This ID is

 * often used as a value to program into registers that control how hardware

 * blocks interact with syncpoints.

/**

 * host1x_syncpt_incr_max() - update the value sent to hardware

 * @sp: host1x syncpoint

 * @incrs: number of increments

 /*

 * Write cached syncpoint and waitbase values to hardware.

/*

 * Update the cached syncpoint and waitbase values by reading them

 * from the registers.

/*

 * Updates the cached syncpoint value by reading a new value from the hardware

 * register

/*

 * Get the current syncpoint base

/**

 * host1x_syncpt_incr() - increment syncpoint value from CPU, updating cache

 * @sp: host1x syncpoint

/*

 * Updated sync point form hardware, and returns true if syncpoint is expired,

 * false if we may need to wait

/**

 * host1x_syncpt_wait() - wait for a syncpoint to reach a given value

 * @sp: host1x syncpoint

 * @thresh: threshold

 * @timeout: maximum time to wait for the syncpoint to reach the given value

 * @value: return location for the syncpoint value

 first check cache */

 try to read from register */

 allocate a waiter */

 schedule a wakeup when the syncpoint value is reached */

 Caller-specified timeout may be impractically low */

 wait for the syncpoint, or timeout, or signal */

/*

 * Returns true if syncpoint is expired, false if we may need to wait

		/*

		 * Unassign syncpt from channels for purposes of Tegra186

		 * syncpoint protection. This prevents any channel from

		 * accessing it until it is reassigned.

 Allocate sync point to use for clearing waits for expired fences */

/**

 * host1x_syncpt_request() - request a syncpoint

 * @client: client requesting the syncpoint

 * @flags: flags

 *

 * host1x client drivers can use this function to allocate a syncpoint for

 * subsequent use. A syncpoint returned by this function will be reserved for

 * use by the client exclusively. When no longer using a syncpoint, a host1x

 * client driver needs to release it using host1x_syncpt_put().

/**

 * host1x_syncpt_put() - free a requested syncpoint

 * @sp: host1x syncpoint

 *

 * Release a syncpoint previously allocated using host1x_syncpt_request(). A

 * host1x client driver should call this when the syncpoint is no longer in

 * use.

/**

 * host1x_syncpt_read_max() - read maximum syncpoint value

 * @sp: host1x syncpoint

 *

 * The maximum syncpoint value indicates how many operations there are in

 * queue, either in channel or in a software thread.

/**

 * host1x_syncpt_read_min() - read minimum syncpoint value

 * @sp: host1x syncpoint

 *

 * The minimum syncpoint value is a shadow of the current sync point value in

 * hardware.

/**

 * host1x_syncpt_read() - read the current syncpoint value

 * @sp: host1x syncpoint

/**

 * host1x_syncpt_get_by_id() - obtain a syncpoint by ID

 * @host: host1x controller

 * @id: syncpoint ID

/**

 * host1x_syncpt_get_by_id_noref() - obtain a syncpoint by ID but don't

 * 	increase the refcount.

 * @host: host1x controller

 * @id: syncpoint ID

/**

 * host1x_syncpt_get() - increment syncpoint refcount

 * @sp: syncpoint

/**

 * host1x_syncpt_get_base() - obtain the wait base associated with a syncpoint

 * @sp: host1x syncpoint

/**

 * host1x_syncpt_base_id() - retrieve the ID of a syncpoint wait base

 * @base: host1x syncpoint wait base

/**

 * host1x_syncpt_release_vblank_reservation() - Make VBLANK syncpoint

 *   available for allocation

 *

 * @client: host1x bus client

 * @syncpt_id: syncpoint ID to make available

 *

 * Makes VBLANK<i> syncpoint available for allocatation if it was

 * reserved at initialization time. This should be called by the display

 * driver after it has ensured that any VBLANK increment programming configured

 * by the boot chain has been disabled.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra host1x driver

 *

 * Copyright (c) 2010-2013, NVIDIA Corporation.

 VIC */

 VIC */

	/*

	 * If we support addressing a maximum of 32 bits of physical memory

	 * and if the host1x firewall is enabled, there's no need to enable

	 * IOMMU support. This can happen for example on Tegra20, Tegra30

	 * and Tegra114.

	 *

	 * Tegra124 and later can address up to 34 bits of physical memory and

	 * many platforms come equipped with more than 2 GiB of system memory,

	 * which requires crossing the 4 GiB boundary. But there's a catch: on

	 * SoCs before Tegra186 (i.e. Tegra124 and Tegra210), the host1x can

	 * only address up to 32 bits of memory in GATHER opcodes, which means

	 * that command buffers need to either be in the first 2 GiB of system

	 * memory (which could quickly lead to memory exhaustion), or command

	 * buffers need to be treated differently from other buffers (which is

	 * not possible with the current ABI).

	 *

	 * A third option is to use the IOMMU in these cases to make sure all

	 * buffers will be mapped into a 32-bit IOVA space that host1x can

	 * address. This allows all of the system memory to be used and works

	 * within the limitations of the host1x on these SoCs.

	 *

	 * In summary, default to enable IOMMU on Tegra124 and later. For any

	 * of the earlier SoCs, only use the IOMMU for additional safety when

	 * the host1x firewall is disabled.

	/*

	 * We may not always want to enable IOMMU support (for example if the

	 * host1x firewall is already enabled and we don't support addressing

	 * more than 32 bits of physical memory), so check for that first.

	 *

	 * Similarly, if host1x is already attached to an IOMMU (via the DMA

	 * API), don't try to attach again.

	/*

	 * If we're not behind an IOMMU make sure we don't get push buffers

	 * that are allocated outside of the range addressable by the GATHER

	 * opcode.

	 *

	 * Newer generations of Tegra (Tegra186 and later) support a wide

	 * variant of the GATHER opcode that allows addressing more bits.

 set common host1x device data */

/**

 * host1x_get_dma_mask() - query the supported DMA mask for host1x

 * @host1x: host1x instance

 *

 * Note that this returns the supported DMA mask for host1x, which can be

 * different from the applicable DMA mask under certain circumstances.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra host1x Job

 *

 * Copyright (c) 2010-2015, NVIDIA Corporation.

 Check that we're not going to overflow */

 Redistribute memory to the structs  */

		/*

		 * If the client device is not attached to an IOMMU, the

		 * physical address of the buffer object can be used.

		 *

		 * Similarly, when an IOMMU domain is shared between all

		 * host1x clients, the IOVA is already available, so no

		 * need to map the buffer object again.

		 *

		 * XXX Note that this isn't always safe to do because it

		 * relies on an assumption that no cache maintenance is

		 * needed on the buffer objects.

	/*

	 * We will copy gathers BO content later, so there is no need to

	 * hold and pin them.

		/**

		 * If the host1x is not attached to an IOMMU, there is no need

		 * to map the buffer object for the host1x, since the physical

		 * address can simply be used.

 pin & patch the relocs for one gather */

 skip all other gathers */

 relocation shift value validation isn't implemented yet */

	/*

	 * Try a non-blocking allocation from a higher priority pools first,

	 * as awaiting for the allocation here is a major performance hit.

 the higher priority allocation failed, try the generic-blocking */

 Copy the gather */

 Store the location in the buffer */

 Validate the job */

 No relocs should remain at this point */

 pin memory */

 patch gathers */

 process each gather mem only once */

 copy_gathers() sets gathers base if firewall is enabled */

/*

 * Debug routine used to dump job entries

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2010 Google, Inc.

 * Author: Erik Gilling <konkers@android.com>

 *

 * Copyright (C) 2011-2013 NVIDIA Corporation

 Store the created entry */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra host1x Channel

 *

 * Copyright (c) 2010-2013, NVIDIA Corporation.

 Constructor for the host1x device list */

/**

 * host1x_channel_get_index() - Attempt to get channel reference by index

 * @host: Host1x device object

 * @index: Index of channel

 *

 * If channel number @index is currently allocated, increase its refcount

 * and return a pointer to it. Otherwise, return NULL.

/**

 * host1x_channel_request() - Allocate a channel

 * @client: Host1x client this channel will be used to send commands to

 *

 * Allocates a new host1x channel for @client. May return NULL if CDMA

 * initialization fails.

/*

 * Copyright (C) 2013 NVIDIA Corporation

 *

 * Permission to use, copy, modify, distribute, and sell this software and its

 * documentation for any purpose is hereby granted without fee, provided that

 * the above copyright notice appear in all copies and that both that copyright

 * notice and this permission notice appear in supporting documentation, and

 * that the name of the copyright holders not be used in advertising or

 * publicity pertaining to distribution of the software without specific,

 * written prior permission.  The copyright holders make no representations

 * about the suitability of this software for any purpose.  It is provided "as

 * is" without express or implied warranty.

 *

 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,

 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO

 * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR

 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,

 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER

 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE

 * OF THIS SOFTWARE.

 for data and clock lanes */

 for data lanes */

 for clock lanes */

 bias pad configuration settings */

 calibration settings for data lanes */

 calibration settings for clock lanes */

	/*

	 * The MIPI_CAL_BIAS_PAD_PDVREG controls a voltage regulator that

	 * supplies the DSI pads. This must be kept enabled until none of the

	 * DSI lanes are used anymore.

	/*

	 * MIPI_CAL_BIAS_PAD_PDVCLAMP and MIPI_CAL_BIAS_PAD_E_VCLAMP_REF

	 * control a regulator that supplies current to the pre-driver logic.

	 * Powering down this regulator causes DSI to fail, so it must remain

	 * powered on until none of the DSI lanes are used anymore.

 clear any pending status bits */

	/*

	 * Wait for min 72uS to let calibration logic finish calibration

	 * sequence codes before waiting for pads idle state to apply the

	 * results.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra host1x Interrupt Management

 *

 * Copyright (C) 2010 Google, Inc.

 * Copyright (c) 2010-2013, NVIDIA Corporation.

/*

 * Sync point threshold interrupt service function

 * Handles sync point threshold triggers, in interrupt context

 disable the ip_busy_timeout. this prevents write drops */

	/*

	 * increase the auto-ack timout to the maximum value. 2d will hang

	 * otherwise on Tegra2.

 update host clocks per usec */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2010 Google, Inc.

 * Author: Erik Gilling <konkers@android.com>

 *

 * Copyright (C) 2011-2013 NVIDIA Corporation

 Map dmaget cursor to corresponding mem handle */

	/*

	 * Sometimes we're given different hardware address to the same

	 * page - in these cases the offset will get an invalid number and

	 * we just have to bail out.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Host1x init for Tegra186 SoCs

 *

 * Copyright (c) 2017 NVIDIA Corporation.

 include hw specification */

 include code */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Host1x init for T20 and T30 Architecture Chips

 *

 * Copyright (c) 2011-2013, NVIDIA Corporation.

 include hw specification */

 include code */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2010 Google, Inc.

 * Author: Erik Gilling <konkers@android.com>

 *

 * Copyright (C) 2011-2017 NVIDIA Corporation

 Peek pointer values are invalid during SLCG, so disable it */

 TODO */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Host1x init for Tegra124 SoCs

 *

 * Copyright (c) 2013 NVIDIA Corporation.

 include hw specification */

 include code */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra host1x Syncpoints

 *

 * Copyright (c) 2010-2013, NVIDIA Corporation.

/*

 * Write the current syncpoint value back to hw.

/*

 * Write the current waitbase value back to hw.

/*

 * Read waitbase value from hw.

/*

 * Updates the last value read from hardware.

 Loop in case there's a race writing to min_val */

/*

 * Write a cpu syncpoint increment to the hardware, without touching

 * the cache.

/**

 * syncpt_assign_to_channel() - Assign syncpoint to channel

 * @sp: syncpoint

 * @ch: channel

 *

 * On chips with the syncpoint protection feature (Tegra186+), assign @sp to

 * @ch, preventing other channels from incrementing the syncpoints. If @ch is

 * NULL, unassigns the syncpoint.

 *

 * On older chips, do nothing.

/**

 * syncpt_enable_protection() - Enable syncpoint protection

 * @host: host1x instance

 *

 * On chips with the syncpoint protection feature (Tegra186+), enable this

 * feature. On older chips, do nothing.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra host1x Command DMA

 *

 * Copyright (c) 2010-2013, NVIDIA Corporation.

/*

 * Put the restart at the end of pushbuffer memory

/*

 * Increment timedout buffer's syncpt via CPU.

 after CPU incr, ensure shadow is up to date */

/*

 * Start channel DMA

 set base, put and end pointer */

 reset GET */

 start the command DMA */

/*

 * Similar to cdma_start(), but rather than starting from an idle

 * state (where DMA GET is set to DMA PUT), on a timeout we restore

 * DMA GET from an explicit value (so DMA may again be pending).

 set base, end pointer (all of memory) */

 set GET, by loading the value in PUT (then reset GET) */

 deassert GET reset and set PUT */

 start the command DMA */

/*

 * Kick channel DMA into action by writing its PUT offset (if it has changed)

/*

 * Stops both channel's command processor and CDMA immediately.

 * Also, tears down the channel and resets corresponding module.

/*

 * If this timeout fires, it indicates the current sync_queue entry has

 * exceeded its TTL and the userctx should be timed out and remaining

 * submits already issued cleaned up (future submits return an error).

 stop processing to get a clean snapshot */

 has buffer actually completed? */

 restore */

 stop HW, resetting channel/module */

/*

 * Init timeout resources

/*

 * Clean up timeout resources

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra host1x Channel

 *

 * Copyright (c) 2010-2013, NVIDIA Corporation.

		/*

		 * Write in batches of 128 as there seems to be a limit

		 * of how much you can output to ftrace at once.

 WAIT_SYNCPT_32 is at SYNCPT_PAYLOAD_32+2 */

 TODO add waitchk or use waitbases or other mitigation */

 before error checks, return current max */

 get submit lock */

 begin a CDMA submit */

		/*

		 * Force serialization by inserting a host wait for the

		 * previous job to finish before this one can commence.

 Synchronize base register to allow using it for relative waiting */

 add a setclass for modules that require it */

 end CDMA submit & stash pinned hMems into sync queue */

 schedule a submit complete interrupt */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Host1x init for Tegra210 SoCs

 *

 * Copyright (c) 2015 NVIDIA Corporation.

 include hw specification */

 include code */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Host1x init for Tegra194 SoCs

 *

 * Copyright (c) 2018 NVIDIA Corporation.

 include hw specification */

 include code */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Host1x init for Tegra114 SoCs

 *

 * Copyright (c) 2013 NVIDIA Corporation.

 include hw specification */

 include code */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2010 Google, Inc.

 * Author: Erik Gilling <konkers@android.com>

 *

 * Copyright (C) 2011-2013 NVIDIA Corporation

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2010 Sascha Hauer <s.hauer@pengutronix.de>

 * Copyright (C) 2005-2009 Freescale Semiconductor, Inc.

 TVEv2 */

 The display interface number assigned to this dc channel */

	/*

	 * In interlaced mode we need more counters to create the asymmetric

	 * per-field VSYNC signals. The pixel active signal synchronising DC

	 * to DI moves to signal generator #6 (see ipu-di.c). In progressive

	 * mode counter #5 is used.

 Reserve 5 microcode template words for each DI */

 Init template microcode */

 Init template microcode */

 rgb24 */

 blue */

 green */

 red */

 rgb565 */

 blue */

 green */

 red */

 gbr24 */

 green */

 blue */

 red */

 bgr666 */

 blue */

 green */

 red */

 lvds666 */

 blue */

 green */

 red */

 bgr24 */

 red */

 green */

 blue */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2017 Lucas Stach, Pengutronix

 first get the engine out of reset and remove clock gating */

 init defaults that should be applied to all streams */

 calculate safe window for ctrl register updates */

 only support single buffer formats for now */

	/*

	 * Allocate IRAM buffer with maximum size. This could be made dynamic,

	 * but as there is no other user of this IRAM region and we can fit all

	 * max sized buffers into it, there is no need yet.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2012-2014 Mentor Graphics Inc.

 * Copyright 2005-2012 Freescale Semiconductor, Inc. All Rights Reserved.

 IC Register Offsets */

 IC Register Fields */

 NA */

 NA */

 NA */

 Cast to unsigned */

	/*

	 * Input size cannot be more than 4096, and output size cannot

	 * be more than 1024

 Cannot downsize more than 4:1 */

 Compute downsizing coefficient */

	/*

	 * compute resizing coefficient using the following equation:

	 * resize_coeff = M * (SI - 1) / (SO - 1)

	 * where M = 2^13, SI = input size, SO = output size

 need transparent CSC1 conversion */

 Setup vertical resizing */

 Setup horizontal resizing */

 Setup color space conversion */

 Need horizontal flip */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016-2017 Lucas Stach, Pengutronix

/*

 * The channel configuartion functions below are not thread safe, as they

 * must be only called from the atomic commit path in the DRM driver, which

 * is properly serialized.

	/*

	 * This isn't clearly documented in the RM, but IPU to PRG channel

	 * assignment is fixed, as only with this mapping the control signals

	 * match up.

 channel 0 is special as it is hardwired to one of the PREs */

 configure the PRE to PRG channel mux */

 check other mux, must not point to same channel */

 config AXI ID */

 enable channel */

 wait for both double buffers to be filled */

 init to free running mode */

 disable address threshold */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2019 Mentor Graphics Inc.

 identity matrix */

/*

 * RGB full-range to RGB limited-range

 *

 * R_lim = 0.8588 * R_full + 16

 * G_lim = 0.8588 * G_full + 16

 * B_lim = 0.8588 * B_full + 16

/*

 * RGB limited-range to RGB full-range

 *

 * R_full = 1.1644 * (R_lim - 16)

 * G_full = 1.1644 * (G_lim - 16)

 * B_full = 1.1644 * (B_lim - 16)

/*

 * YUV full-range to YUV limited-range

 *

 * Y_lim  = 0.8588 * Y_full + 16

 * Cb_lim = 0.8784 * (Cb_full - 128) + 128

 * Cr_lim = 0.8784 * (Cr_full - 128) + 128

/*

 * YUV limited-range to YUV full-range

 *

 * Y_full  = 1.1644 * (Y_lim - 16)

 * Cb_full = 1.1384 * (Cb_lim - 128) + 128

 * Cr_full = 1.1384 * (Cr_lim - 128) + 128

/*

 * BT.601 RGB full-range to YUV full-range

 *

 * Y =  .2990 * R + .5870 * G + .1140 * B

 * U = -.1687 * R - .3313 * G + .5000 * B + 128

 * V =  .5000 * R - .4187 * G - .0813 * B + 128

 BT.601 RGB full-range to YUV limited-range */

 BT.601 RGB limited-range to YUV full-range */

 BT.601 RGB limited-range to YUV limited-range */

/*

 * BT.601 YUV full-range to RGB full-range

 *

 * R = 1. * Y +      0 * (Cb - 128) + 1.4020 * (Cr - 128)

 * G = 1. * Y -  .3441 * (Cb - 128) -  .7141 * (Cr - 128)

 * B = 1. * Y + 1.7720 * (Cb - 128) +      0 * (Cr - 128)

 *

 * equivalently (factoring out the offsets):

 *

 * R = 1. * Y  +      0 * Cb + 1.4020 * Cr - 179.456

 * G = 1. * Y  -  .3441 * Cb -  .7141 * Cr + 135.450

 * B = 1. * Y  + 1.7720 * Cb +      0 * Cr - 226.816

 BT.601 YUV full-range to RGB limited-range */

 BT.601 YUV limited-range to RGB full-range */

 BT.601 YUV limited-range to RGB limited-range */

/*

 * REC.709 encoding from RGB full range to YUV full range:

 *

 * Y =  .2126 * R + .7152 * G + .0722 * B

 * U = -.1146 * R - .3854 * G + .5000 * B + 128

 * V =  .5000 * R - .4542 * G - .0458 * B + 128

 Rec.709 RGB full-range to YUV limited-range */

 Rec.709 RGB limited-range to YUV full-range */

 Rec.709 RGB limited-range to YUV limited-range */

/*

 * Inverse REC.709 encoding from YUV full range to RGB full range:

 *

 * R = 1. * Y +      0 * (Cb - 128) + 1.5748 * (Cr - 128)

 * G = 1. * Y -  .1873 * (Cb - 128) -  .4681 * (Cr - 128)

 * B = 1. * Y + 1.8556 * (Cb - 128) +      0 * (Cr - 128)

 *

 * equivalently (factoring out the offsets):

 *

 * R = 1. * Y  +      0 * Cb + 1.5748 * Cr - 201.574

 * G = 1. * Y  -  .1873 * Cb -  .4681 * Cr +  83.891

 * B = 1. * Y  + 1.8556 * Cb +      0 * Cr - 237.517

 Rec.709 YUV full-range to RGB limited-range */

 Rec.709 YUV limited-range to RGB full-range */

 Rec.709 YUV limited-range to RGB limited-range */

 YUV <-> RGB encoding is required */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2012-2016 Mentor Graphics Inc.

 *

 * Queued image conversion support, with tiling and rotation.

/*

 * The IC Resizer has a restriction that the output frame from the

 * resizer must be 1024 or less in both width (pixels) and height

 * (lines).

 *

 * The image converter attempts to split up a conversion when

 * the desired output (converted) frame resolution exceeds the

 * IC resizer limit of 1024 in either dimension.

 *

 * If either dimension of the output frame exceeds the limit, the

 * dimension is split into 1, 2, or 4 equal stripes, for a maximum

 * of 4*4 or 16 tiles. A conversion is then carried out for each

 * tile (but taking care to pass the full frame stride length to

 * the DMA channel's parameter memory!). IDMA double-buffering is used

 * to convert each tile back-to-back when possible (see note below

 * when double_buffering boolean is set).

 *

 * Note that the input frame must be split up into the same number

 * of tiles as the output frame:

 *

 *                       +---------+-----+

 *   +-----+---+         |  A      | B   |

 *   | A   | B |         |         |     |

 *   +-----+---+   -->   +---------+-----+

 *   | C   | D |         |  C      | D   |

 *   +-----+---+         |         |     |

 *                       +---------+-----+

 *

 * Clockwise 90Â° rotations are handled by first rescaling into a

 * reusable temporary tile buffer and then rotating with the 8x8

 * block rotator, writing to the correct destination:

 *

 *                                         +-----+-----+

 *                                         |     |     |

 *   +-----+---+         +---------+       | C   | A   |

 *   | A   | B |         | A,B, |  |       |     |     |

 *   +-----+---+   -->   | C,D  |  |  -->  |     |     |

 *   | C   | D |         +---------+       +-----+-----+

 *   +-----+---+                           | D   | B   |

 *                                         |     |     |

 *                                         +-----+-----+

 *

 * If the 8x8 block rotator is used, horizontal or vertical flipping

 * is done during the rotation step, otherwise flipping is done

 * during the scaling step.

 * With rotation or flipping, tile order changes between input and

 * output image. Tiles are numbered row major from top left to bottom

 * right for both input and output image.

 dimensions of one tile */

 size and strides are in bytes */

 start Y or packed offset of this tile */

 offset from start to tile in U plane, for planar formats */

 offset from start to tile in V plane, for planar formats */

 # of rows (horizontal stripes) if dest height is > 1024 */

 # of columns (vertical stripes) if dest width is > 1024 */

 V4L2 fourcc */

 total bpp */

 decimation in width for U/V planes */

 decimation in height for U/V planes */

 planar format */

 U and V planes are swapped */

 partial planar (U and V in same plane) */

 Source/destination image data and rotation mode */

 intermediate buffer for rotation */

 current buffer number for double buffering */

 can we use double-buffering for this conversion operation? */

 num_rows * num_cols */

 next tile to process */

 where to place converted tile in dest image */

 mask of completed EOF irqs at every tile conversion */

 the IPU end-of-frame irqs */

 list of convert contexts */

 queue of conversion runs */

 queue of completed runs */

 the current conversion run */

 Format found */

/*

 * Calculate downsizing coefficients, which are the same for all tiles,

 * and initial bilinear resizing coefficients, which are used to find the

 * best seam positions.

 * Also determine the number of tiles necessary to guarantee that no tile

 * is larger than 1024 pixels in either dimension at the output and between

 * IC downsizing and main processing sections.

 Do not let invalid input lead to an endless loop below */

	/*

	 * Calculate the bilinear resizing coefficients that could be used if

	 * we were converting with a single tile. The bottom right output pixel

	 * should sample as close as possible to the bottom right input pixel

	 * out of the decimator, but not overshoot it:

	/*

	 * Both the output of the IC downsizing section before being passed to

	 * the IC main processing section and the final output of the IC main

	 * processing section must be <= 1024 pixels in both dimensions.

/*

 * Find the best aligned seam position for the given column / row index.

 * Rotation and image offsets are out of scope.

 *

 * @index: column / row index, used to calculate valid interval

 * @in_edge: input right / bottom edge

 * @out_edge: output right / bottom edge

 * @in_align: input alignment, either horizontal 8-byte line start address

 *            alignment, or pixel alignment due to image format

 * @out_align: output alignment, either horizontal 8-byte line start address

 *             alignment, or pixel alignment due to image format or rotator

 *             block size

 * @in_burst: horizontal input burst size in case of horizontal flip

 * @out_burst: horizontal output burst size or rotator block size

 * @downsize_coeff: downsizing section coefficient

 * @resize_coeff: main processing section resizing coefficient

 * @_in_seam: aligned input seam position return value

 * @_out_seam: aligned output seam position return value

 Input / output seam position candidates */

 Start within 1024 pixels of the right / bottom edge */

 End before having to add more columns to the left / rows above */

	/*

	 * Limit input seam position to make sure that the downsized input tile

	 * to the right or bottom does not exceed 1024 pixels.

	/*

	 * Output tiles must start at a multiple of 8 bytes horizontally and

	 * possibly at an even line horizontally depending on the pixel format.

	 * Only consider output aligned positions for the seam.

		/*

		 * Tiles in the right row / bottom column may not be allowed to

		 * overshoot horizontally / vertically. out_burst may be the

		 * actual DMA burst size, or the rotator block size.

		/*

		 * Input sample position, corresponding to out_pos, 19.13 fixed

		 * point.

		/*

		 * The closest input sample position that we could actually

		 * start the input tile at, 19.13 fixed point.

 Convert 19.13 fixed point to integer */

/*

 * Tile left edges are required to be aligned to multiples of 8 bytes

 * by the IDMAC.

/*

 * Tile top edge alignment is only limited by chroma subsampling.

		/*

		 * The IC burst reads 8 pixels at a time. Reading beyond the

		 * end of the line is usually acceptable. Those pixels are

		 * ignored, unless the IC has to write the scaled line in

		 * reverse.

	/*

	 * Align to 16x16 pixel blocks for planar 4:2:0 chroma subsampled

	 * formats to guarantee 8-byte aligned line start addresses in the

	 * chroma planes when IRT is used. Align to 8x8 pixel IRT block size

	 * for all other formats.

	/*

	 * Align to 16x16 pixel blocks for planar 4:2:0 chroma subsampled

	 * formats to guarantee 8-byte aligned line start addresses in the

	 * chroma planes when IRT is used. Align to 8x8 pixel IRT block size

	 * for all other formats.

/*

 * Fill in left position and width and for all tiles in an input column, and

 * for all corresponding output tiles. If the 90Â° rotator is used, the output

 * tiles are in a row, and output tile top position and height are set.

/*

 * Fill in top position and height and for all tiles in an input row, and

 * for all corresponding output tiles. If the 90Â° rotator is used, the output

 * tiles are in a column, and output tile left position and width are set.

/*

 * Find the best horizontal and vertical seam positions to split into tiles.

 * Minimize the fractional part of the input sampling position for the

 * top / left pixels of each tile.

 Switch width/height and align top left to IRT block size */

		/*

		 * Align input width to burst length if the scaling step flips

		 * horizontally.

 burst length */,

 Up to 4096x4096 input tile size */

/*

 * Use the rotation transformation to find the tile coordinates

 * (row, col) of a tile in the destination frame that corresponds

 * to the given tile coordinates of a source frame. The destination

 * coordinate is then converted to a tile index.

 with no rotation it's a 1:1 mapping */

	/*

	 * before doing the transform, first we have to translate

	 * source row,col for an origin in the center of s_image

 do the rotation transform */

 apply flip */

	/*

	 * finally translate dest row,col using an origin in upper

	 * left of d_image

/*

 * Fill the out_tile_map[] with transformed destination tile indeces.

 setup some convenience vars */

 setup some convenience vars */

/*

 * Calculate the resizing ratio for the IC main processing section given input

 * size, fixed downsizing coefficient, and output size.

 * Either round to closest for the next tile's first pixel to minimize seams

 * and distortion (for all but right column / bottom row), or round down to

 * avoid sampling beyond the edges of the input image for this tile's last

 * pixel.

 * Returns the resizing coefficient, resizing ratio is 8192.0 / resize_coeff.

/*

 * Slightly modify resize coefficients per tile to hide the bilinear

 * interpolator reset at tile borders, shifting the right / bottom edge

 * by up to a half input pixel. This removes noticeable seams between

 * tiles at higher upscaling factors.

		/*

		 * With the horizontal scaling factor known, round up resized

		 * width (output width or height) to burst size.

		/*

		 * Calculate input width from the last accessed input pixel

		 * given resized width and scaling coefficients. Round up to

		 * burst size.

		/*

		 * With the vertical scaling factor known, round up resized

		 * height (output width or height) to IDMAC limitations.

		/*

		 * Calculate input width from the last accessed input pixel

		 * given resized height and scaling coefficients. Align to

		 * IDMAC restrictions.

/*

 * return the number of runs in given queue (pending_q or done_q)

 * for this context. hold irqlock when calling.

 disable IC tasks and the channels */

	/*

	 * Skip writing U and V components to odd rows in the output

	 * channels for planar 4:2:0.

	/*

	 * Setting a non-zero AXI ID collides with the PRG AXI snooping, so

	 * only do this when there is no PRG present.

 clear EOF irq mask */

 swap width/height for resizer */

 setup the IC resizer and CSC */

 init the source MEM-->IC PP IDMAC channel */

 init the IC PP-->MEM IDMAC channel */

 init the MEM-->IC PP ROT IDMAC channel */

 init the destination IC PP ROT-->MEM IDMAC channel */

 now link IC PP-->MEM to MEM-->IC PP ROT */

 init the destination IC PP-->MEM IDMAC channel */

 enable the IC */

 set buffers ready */

 enable the channels! */

 hold irqlock when calling */

 remove run from pending_q and set as current */

 hold irqlock when calling */

 skip contexts that are aborting */

		/*

		 * something went wrong with start, add the run

		 * to done q and continue to the next run in the

		 * pending q.

 call the completion callback and free the run */

/*

 * the bottom half thread clears out the done_q, calling the

 * completion handler for each.

	/*

	 * the done_q is cleared out, signal any contexts

	 * that are aborting that abort can complete.

 hold irqlock when calling */

	/*

	 * It is difficult to stop the channel DMA before the channels

	 * enter the paused state. Without double-buffering the channels

	 * are always in a paused state when the EOF irq occurs, so it

	 * is safe to stop the channels now. For double-buffering we

	 * just ignore the abort until the operation completes, when it

	 * is safe to shut down.

		/*

		 * the conversion is complete

	/*

	 * not done, place the next tile buffers.

 clear EOF irq mask for next tile */

 get current run and its context */

 this was NOT a rotation op, shouldn't happen */

/*

 * try to force the completion of runs for this ctx. Called when

 * abort wait times out in ipu_image_convert_abort().

 get IC */

 get IDMAC channels */

 acquire the EOF interrupts */

 borrowed from drivers/media/v4l2-core/v4l2-common.c */

 Bits that must be zero to be aligned */

 Clamp to aligned min and max */

 Round to nearest aligned value */

 Adjusts input/output images to IPU restrictions */

 set some default pixel formats if needed */

 image converter does not handle fields */

 resizer cannot downsize more than 4:1 */

 align input width/height */

 align output width/height */

 set input/output strides and image sizes */

/*

 * this is used by ipu_image_convert_prepare() to verify set input and

 * output images are valid before starting the conversion. Clients can

 * also call it before calling ipu_image_convert_prepare().

/*

 * Call ipu_image_convert_prepare() to prepare for the conversion of

 * given images and rotation mode. Returns a new conversion context.

 verify the in/out images before continuing */

 Sets ctx->in.num_rows/cols as well */

 set tiling and rotation */

	/*

	 * Can we use double-buffering for this operation? If there is

	 * only one tile (the whole image can be converted in a single

	 * operation) there's no point in using double-buffering. Also,

	 * the IPU's IDMAC channels allow only a single U and V plane

	 * offset shared between both buffers, but these offsets change

	 * for every tile, and therefore would have to be updated for

	 * each buffer which is not possible. So double-buffering is

	 * impossible when either the source or destination images are

	 * a planar format (YUV420, YUV422P, etc.). Further, differently

	 * sized tiles or different resizing coefficients per tile

	 * prevent double-buffering as well.

/*

 * Carry out a single image conversion run. Only the physaddr's of the input

 * and output image buffers are needed. The conversion context must have

 * been created previously with ipu_image_convert_prepare().

 Abort any active or pending conversions for this context */

 move all remaining pending runs in this context to done_q */

 Unprepare image conversion context */

 make sure no runs are hanging around */

/*

 * "Canned" asynchronous single image conversion. Allocates and returns

 * a new conversion run.  On successful return the caller must free the

 * run and call ipu_image_convert_unprepare() after conversion completes.

 "Canned" synchronous single image conversion */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2010 Sascha Hauer <s.hauer@pengutronix.de>

 * Copyright (C) 2005-2009 Freescale Semiconductor, Inc.

 Rec.709 limited range */

 BT.601 limited range */

		/*

		 * foreground and background are of same colorspace, put

		 * colorspace converter after combining unit.

			/*

			 * foreground identical to output, apply color

			 * conversion on background

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2010 Sascha Hauer <s.hauer@pengutronix.de>

 * Copyright (C) 2005-2009 Freescale Semiconductor, Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2008-2010 Freescale Semiconductor, Inc. All Rights Reserved.

SMFC Registers */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2010 Sascha Hauer <s.hauer@pengutronix.de>

 * Copyright (C) 2005-2009 Freescale Semiconductor, Inc.

/*

 * This is an undocumented feature, a write one to a channel bit in

 * IPU_CHA_CUR_BUF and IPU_CHA_TRIPLE_CUR_BUF will reset the channel's

 * internal current buffer pointer so that transfers start from buffer

 * 0 on the next channel enable (that's the theory anyway, the imx6 TRM

 * only says these are read-only registers). This operation is required

 * for channel linking to work correctly, for instance video capture

 * pipelines that carry out image rotations will fail after the first

 * streaming unless this function is called for each channel before

 * re-enabling the channels.

 locking disabled */

	/*

	 * IPUv3EX / i.MX51 has a different register layout, and on IPUv3M /

	 * i.MX53 channel arbitration locking doesn't seem to work properly.

	 * Allow enabling the lock feature on IPUv3H / i.MX6 only.

 Mark buffer as ready. */

 write one to clear */

 write one to set */

 Disable DMA channel(s) */

 Set channel buffers NOT to be ready */

 write one to clear */

 write one to set */

 Reset the double buffer */

/*

 * The imx6 rev. D TRM says that enabling the WM feature will increase

 * a channel's priority. Refer to Table 36-8 Calculated priority value.

 * The sub-module that is the sink or source for the channel must enable

 * watermark signal for this to take effect (SMFC_WM for instance).

/*

 * Set the source mux for the given CSI. Selects either parallel or

 * MIPI CSI2 sources.

/*

 * Set the source mux for the IC. Selects either CSI[01] or the VDI.

 Frame Synchronization Unit Channel Linking */

/*

 * Links a source channel to a sink channel in the FSU.

/*

 * Unlinks source and sink channels in the FSU.

 Link IDMAC channels in the FSU */

 Unlink IDMAC channels in the FSU */

 sentinel */ }

 These must be in the order of the corresponding device tree port nodes */

 Associate subdevice with the corresponding port node */

 Mask and clear all interrupts */

 TODO: remove irq_domain_generic_chips */

 Set MCU_T to divide MCU access window into 2 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2012 Mentor Graphics Inc.

 * Copyright 2005-2012 Freescale Semiconductor, Inc. All Rights Reserved.

/*

 * The V4L2 spec defines packed RGB formats in memory byte order, which from

 * point of view of the IPU corresponds to little-endian words with the first

 * component in the least significant bits.

 * The DRM pixel formats and IPU internal representation are ordered the other

 * way around, with the first named component ordered at the most significant

 * bits. Further, V4L2 formats are not well defined:

 *     https://linuxtv.org/downloads/v4l-dvb-apis/packed-rgb.html

 * We choose the interpretation which matches GStreamer behavior.

		/*

		 * Here we choose the 'corrected' interpretation of RGBP, a

		 * little-endian 16-bit word with the red component at the most

		 * significant bits:

		 * g[2:0]b[4:0] r[4:0]g[5:3] <=> [16:0] R:G:B

 B G R <=> [24:0] R:G:B */

 R G B <=> [24:0] B:G:R */

 B G R A <=> [32:0] A:B:G:R */

 R G B A <=> [32:0] A:B:G:R */

 B G R A <=> [32:0] A:R:G:B */

 B G R X <=> [32:0] X:R:G:B */

 A B G R <=> [32:0] R:G:B:A */

 X B G R <=> [32:0] R:G:B:X */

 R G B A <=> [32:0] A:B:G:R */

 R G B X <=> [32:0] X:B:G:R */

 A R G B <=> [32:0] B:G:R:A */

 X R G B <=> [32:0] B:G:R:X */

 rgb mode */

 raw mode */

 bits/pixel */

 pix fmt */

 burst size */

 bits/pixel */

 pix fmt */

 burst size */

 See Table 37-12. Alpha channels mapping. */

 pix format */

 burst size */

 pix format */

 burst size */

 pix format */

 burst size */

 pix format */

 burst size */

 pix format */

 burst size */

 bits/pixel */

 pix format */

 burst size */

 bits/pixel */

 pix format */

 burst size */

 This should not happen */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2010 Sascha Hauer <s.hauer@pengutronix.de>

 * Copyright (C) 2005-2009 Freescale Semiconductor, Inc.

 display input clock */

 IPU bus clock */

 resulting pixel clock */

 counter >= 2 only */

 counter >= 5 only */

 counter >= 6 only */

 Enable auto reload */

 1: internal VSYNC for each frame */

 == counter 7 */

 PIN2: HSYNC waveform */

 PIN3: VSYNC waveform */

 == counter 7 */

 == counter 7 */

 4: Field */

 5: Active lines */

 6: Active pixel, referenced by DC */

 7: Half line HSYNC */

 1: INT_HSYNC */

 PIN2: HSYNC */

 PIN3: VSYNC */

 4: Line Active */

 5: Pixel Active, referenced by DC */

 Line Active */

 unused */

 unused */

 can't use #7 and #8 for line active and pixel active counters */

 1: INT_HSYNC */

 2: VSYNC */

 3: Line Active */

 VSYNC */,

 PIN4: HSYNC for VGA via TVEv2 on TQ MBa53 */

 magic value from Freescale TVE driver */

 5: Pixel Active signal to DC */

 Line Active */

 PIN6: VSYNC for VGA via TVEv2 on TQ MBa53 */

 magic value from Freescale TVE driver */

 PIN4: HSYNC for VGA via TVEv2 on i.MX53-QSB */

 magic value from Freescale TVE driver */

 PIN6: VSYNC for VGA via TVEv2 on i.MX53-QSB */

 magic value from Freescale TVE driver */

 unused */

		/*

		 * CLKMODE_EXT means we must use the DI clock: this is

		 * needed for things like LVDS which needs to feed the

		 * DI and LDB with the same pixel clock.

			/*

			 * CLKMODE_SYNC means that we want the DI to be

			 * clocked at the same rate as the parent clock.

			 * This is needed (eg) for LDB which needs to be

			 * fed with the same pixel clock.  We assume that

			 * the LDB clock has already been set correctly.

			/*

			 * We can use the divider.  We should really have

			 * a flag here indicating whether the bridge can

			 * cope with a fractional divider or not.  For the

			 * time being, let's go for simplicitly and

			 * reliability.

		/*

		 * For other interfaces, we can arbitarily select between

		 * the DI specific clock and the internal IPU clock.  See

		 * DI_GENERAL bit 20.  We select the IPU clock if it can

		 * give us a clock rate within 1% of the requested frequency,

		 * otherwise we use the DI clock.

 Allow a 1% error */

 Set the divider */

	/*

	 * Set the high/low periods.  Bits 24:16 give us the falling edge,

	 * and bits 8:0 give the rising edge.  LSB is fraction, and is

	 * based on the divider above.  We want a 50% duty cycle, so set

	 * the falling edge to be half the divider.

 Finally select the input clock */

/*

 * This function is called to adjust a video mode to IPU restrictions.

 * It is meant to be called from drm crtc mode_fixup() methods.

 Now divider is integer portion */

 Setup pixel clock timing */

 Down time is half of period */

 set y_sel = 1 */

			/*

			 * TODO: change only for TVEv2, parallel display

			 * uses pin 2 / 3

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2012-2016 Mentor Graphics Inc.

 * Copyright (C) 2005-2009 Freescale Semiconductor, Inc.

 VDI Register Offsets */

 VDI Register Fields */

	/*

	 * Full motion, only vertical filter is used.

	 * Burst size is 4 accesses

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2012-2014 Mentor Graphics Inc.

 * Copyright (C) 2005-2009 Freescale Semiconductor, Inc.

 IPU bus clock */

 CSI Register Offsets */

 CSI Register Fields */

 MIPI CSI-2 data types */

 YYY.../UYVY.... */

 UYY.../VYY...   */

 UYVY...         */

/*

 * Bitfield of CSI bus signal polarities and modes.

/*

 * Enumeration of CSI data bus widths.

/*

 * Enumeration of CSI clock modes.

/*

 * Set mclk division ratio for generating test mode mclk. Only used

 * for test generator.

/*

 * Find the CSI data format and data width for the given V4L2 media

 * bus pixel format code.

 TODO */

 translate alternate field mode based on given standard */

/*

 * Fill a CSI bus config struct from mbus_config and mbus_framefmt.

 UYVY10_1X20 etc. should be supported as well */

		/*

		 * MIPI CSI-2 requires non gated clock mode, all other

		 * parameters are not applicable for MIPI CSI-2 bus.

 will never get here, keep compiler quiet */

 get translated field type of input and output */

	/*

	 * Write the H-V-F codes the CSI will match against the

	 * incoming data for start/end of active and blanking

	 * field intervals. If input and output field types are

	 * sequential but not the same (one is SEQ_BT and the other

	 * is SEQ_TB), swap the F-bit so that the CSI will capture

	 * field 1 lines before field 0 lines.

		/*

		 * Field0BlankEnd  = 110, Field0BlankStart  = 010

		 * Field0ActiveEnd = 100, Field0ActiveStart = 000

		 * Field1BlankEnd  = 111, Field1BlankStart  = 011

		 * Field1ActiveEnd = 101, Field1ActiveStart = 001

 same as above but with F-bit inverted */

 set default sensor frame width and height */

 Set the CSI_SENS_CONF register remaining fields */

 Set CCIR registers */

 Setup sensor frame size */

 Set sensb_mclk div_ratio */

 IC or VDIC */

 SPDX-License-Identifier: GPL-2.0

/*

 * GPU memory trace points

 *

 * Copyright (C) 2020 Google, Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	connector.c

 *

 * 2004+ Copyright (c) Evgeniy Polyakov <zbr@ioremap.net>

 * All rights reserved.

/*

 * Sends mult (multiple) cn_msg at a time.

 *

 * msg->seq and msg->ack are used to determine message genealogy.

 * When someone sends message it puts there locally unique sequence

 * and random acknowledge numbers.  Sequence number may be copied into

 * nlmsghdr->nlmsg_seq too.

 *

 * Sequence number is incremented with each message to be sent.

 *

 * If we expect a reply to our message then the sequence number in

 * received message MUST be the same as in original message, and

 * acknowledge number MUST be the same + 1.

 *

 * If we receive a message and its sequence number is not equal to the

 * one we are expecting then it is a new message.

 *

 * If we receive a message and its sequence number is the same as one

 * we are expecting but it's acknowledgement number is not equal to

 * the acknowledgement number in the original message + 1, then it is

 * a new message.

 *

 * If msg->len != len, then additional cn_msg messages are expected following

 * the first msg.

 *

 * The message is sent to, the portid if given, the group if given, both if

 * both, or if both are zero then the group is looked up and sent there.

 same as cn_netlink_send_mult except msg->len is used for len */

/*

 * Callback helper - queues work and setup destructor for given data.

 verify msg->len is within skb */

/*

 * Main netlink receiving function.

 *

 * It checks skb, netlink header and msg sizes, and calls callback helper.

/*

 * Callback add routing - adds callback with given ID and name.

 * If there is registered callback with the same ID it will not be added.

 *

 * May sleep.

/*

 * Callback remove routing - removes callback

 * with given ID.

 * If there is no registered callback with given

 * ID nothing happens.

 *

 * May sleep while waiting for reference counter to become zero.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * cn_proc.c - process events connector

 *

 * Copyright (C) Matt Helsley, IBM Corp. 2005

 * Based on cn_fork.c by Guillaume Thouvenin <guillaume.thouvenin@bull.net>

 * Original copyright notice follows:

 * Copyright (C) 2005 BULL SA.

/*

 * Size of a cn_msg followed by a proc_event structure.  Since the

 * sizeof struct cn_msg is a multiple of 4 bytes, but not 8 bytes, we

 * add one 4-byte word to the size here, and then start the actual

 * cn_msg structure 4 bytes into the stack buffer.  The result is that

 * the immediately following proc_event structure is aligned to 8 bytes.

 See comment above; we test our assumption about sizeof struct cn_msg here. */

 local_event.count is used as the sequence number of the netlink message */

	/*

	 * local_lock() disables preemption during send to ensure the messages

	 * are ordered according to their sequence numbers.

	 *

	 * If cn_netlink_send() fails, the data is not sent.

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

 not used */

/*

 * Send an acknowledgement message to userspace

 *

 * Use 0 for success, EFOO otherwise.

 * Note: this is the negative of conventional kernel error

 * values because it's not being returned via syscall return

 * mechanisms.

 not used */

/**

 * cn_proc_mcast_ctl

 * @data: message sent from userspace via the connector

	/* 

	 * Events are reported with respect to the initial pid

	 * and user namespaces so ignore requestors from

	 * other namespaces.

 Can only change if privileged. */

/*

 * cn_proc_init - initialization entry point

 *

 * Adds the connector callback to the connector driver.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	cn_queue.c

 *

 * 2004+ Copyright (c) Evgeniy Polyakov <zbr@ioremap.net>

 * All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * The input core

 *

 * Copyright (c) 1999-2002 Vojtech Pavlik

/*

 * input_mutex protects access to both input_dev_list and input_handler_list.

 * This also causes input_[un]register_device and input_[un]register_handler

 * be mutually exclusive which simplifies locking in drivers implementing

 * input handlers.

/*

 * Pass event first through all filters and then, if event has not been

 * filtered out, through all open handles. This function is called with

 * dev->event_lock held and interrupts disabled.

/*

 * Pass values first through all filters and then, if event has not been

 * filtered out, through all open handles. This function is called with

 * dev->event_lock held and interrupts disabled.

 trigger auto repeat for key events */

/*

 * Generate software autorepeat event. Note that we take

 * dev->event_lock here to avoid racing with input_event

 * which may cause keys get "stuck".

		/*

		 * "Stage" the event; we'll flush it later, when we

		 * get actual touch data.

		/*

		 * Bypass filtering for multi-touch events when

		 * not employing slots.

 Flush pending "slot" event */

 auto-repeat bypasses state updates */

 filter-out events from inhibited devices */

		/*

		 * Reset the timestamp on flush so we won't end up

		 * with a stale one. Note we only need to reset the

		 * monolithic one as we use its presence when deciding

		 * whether to generate a synthetic timestamp.

/**

 * input_event() - report new input event

 * @dev: device that generated the event

 * @type: type of the event

 * @code: event code

 * @value: value of the event

 *

 * This function should be used by drivers implementing various input

 * devices to report input events. See also input_inject_event().

 *

 * NOTE: input_event() may be safely used right after input device was

 * allocated with input_allocate_device(), even before it is registered

 * with input_register_device(), but the event will not reach any of the

 * input handlers. Such early invocation of input_event() may be used

 * to 'seed' initial state of a switch or initial position of absolute

 * axis, etc.

/**

 * input_inject_event() - send input event from input handler

 * @handle: input handle to send event through

 * @type: type of the event

 * @code: event code

 * @value: value of the event

 *

 * Similar to input_event() but will ignore event if device is

 * "grabbed" and handle injecting event is not the one that owns

 * the device.

/**

 * input_alloc_absinfo - allocates array of input_absinfo structs

 * @dev: the input device emitting absolute events

 *

 * If the absinfo struct the caller asked for is already allocated, this

 * functions will not do anything.

		/*

		 * We will handle this allocation failure in

		 * input_register_device() when we refuse to register input

		 * device with ABS bits but without absinfo.

/**

 * input_grab_device - grabs device for exclusive use

 * @handle: input handle that wants to own the device

 *

 * When a device is grabbed by an input handle all events generated by

 * the device are delivered only to this handle. Also events injected

 * by other input handles are ignored while device is grabbed.

 Make sure input_pass_event() notices that grab is gone */

/**

 * input_release_device - release previously grabbed device

 * @handle: input handle that owns the device

 *

 * Releases previously grabbed device so that other input handles can

 * start receiving input events. Upon release all handlers attached

 * to the device have their start() method called so they have a change

 * to synchronize device state with the rest of the system.

/**

 * input_open_device - open input device

 * @handle: handle through which device is being accessed

 *

 * This function should be called by input handlers when they

 * want to start receive events from given input device.

		/*

		 * Device is already opened and/or inhibited,

		 * so we can exit immediately and report success.

			/*

			 * Make sure we are not delivering any more events

			 * through this handle

/**

 * input_close_device - close input device

 * @handle: handle through which device is being accessed

 *

 * This function should be called by input handlers when they

 * want to stop receive events from given input device.

		/*

		 * synchronize_rcu() makes sure that input_pass_event()

		 * completed and that no more input events are delivered

		 * through this handle

/*

 * Simulate keyup events for all keys that are marked as pressed.

 * The function must be called with dev->event_lock held.

/*

 * Prepare device for unregistering

	/*

	 * Mark device as going away. Note that we take dev->mutex here

	 * not to protect access to dev->going_away but rather to ensure

	 * that there are no threads in the middle of input_open_device()

	/*

	 * Simulate keyup events for all pressed keys so that handlers

	 * are not left with "stuck" keys. The driver may continue

	 * generate events even after we done here but they will not

	 * reach any handlers.

/**

 * input_scancode_to_scalar() - converts scancode in &struct input_keymap_entry

 * @ke: keymap entry containing scancode to be converted.

 * @scancode: pointer to the location where converted scancode should

 *	be stored.

 *

 * This function is used to convert scancode stored in &struct keymap_entry

 * into scalar form understood by legacy keymap handling methods. These

 * methods expect scancodes to be represented as 'unsigned int'.

/*

 * Those routines handle the default case where no [gs]etkeycode() is

 * defined. In this case, an array indexed by the scancode is used.

 Setting the bit twice is useless, so break */

/**

 * input_get_keycode - retrieve keycode currently mapped to a given scancode

 * @dev: input device which keymap is being queried

 * @ke: keymap entry

 *

 * This function should be called by anyone interested in retrieving current

 * keymap. Presently evdev handlers use it.

/**

 * input_set_keycode - attribute a keycode to a given scancode

 * @dev: input device which keymap is being updated

 * @ke: new keymap entry

 *

 * This function should be called by anyone needing to update current

 * keymap. Presently keyboard and evdev handlers use it.

 Make sure KEY_RESERVED did not get enabled. */

	/*

	 * Simulate keyup event if keycode is not present

	 * in the keymap anymore

 !CONFIG_COMPAT */

 We need to fit into seq->private pointer */

	/*

	 * If no output was produced print a single 0.

 We need to fit into seq->private pointer */

 !CONFIG_PROC_FS */

	/*

	 * If no output was produced print a single 0.

/*

 * Input uevent interface - loading event handlers based on

 * device bitfields.

/**

 * input_reset_device() - reset/restore the state of input device

 * @dev: input device whose state needs to be reset

 *

 * This function tries to reset the state of an opened input device and

 * bring internal state and state if the hardware in sync with each other.

 * We mark all keys as released, restore LED state, repeat rate, etc.

	/*

	 * Keys that are pressed now are unlikely to be

	 * still pressed when we resume.

 Turn off LEDs and sounds, if any are active. */

 Restore state of LEDs and sounds, if any were active. */

	/*

	 * Keys that are pressed now are unlikely to be

	 * still pressed when we resume.

 Turn off LEDs and sounds, if any are active. */

 CONFIG_PM */

/**

 * input_allocate_device - allocate memory for new input device

 *

 * Returns prepared struct input_dev or %NULL.

 *

 * NOTE: Use input_free_device() to free devices that have not been

 * registered; input_unregister_device() should be used for already

 * registered devices.

/**

 * devm_input_allocate_device - allocate managed input device

 * @dev: device owning the input device being created

 *

 * Returns prepared struct input_dev or %NULL.

 *

 * Managed input devices do not need to be explicitly unregistered or

 * freed as it will be done automatically when owner device unbinds from

 * its driver (or binding fails). Once managed input device is allocated,

 * it is ready to be set up and registered in the same fashion as regular

 * input device. There are no special devm_input_device_[un]register()

 * variants, regular ones work with both managed and unmanaged devices,

 * should you need them. In most cases however, managed input device need

 * not be explicitly unregistered or freed.

 *

 * NOTE: the owner device is set up as parent of input device and users

 * should not override it.

/**

 * input_free_device - free memory occupied by input_dev structure

 * @dev: input device to free

 *

 * This function should only be used if input_register_device()

 * was not called yet or if it failed. Once device was registered

 * use input_unregister_device() and memory will be freed once last

 * reference to the device is dropped.

 *

 * Device should be allocated by input_allocate_device().

 *

 * NOTE: If there are references to the input device then memory

 * will not be freed until last reference is dropped.

/**

 * input_set_timestamp - set timestamp for input events

 * @dev: input device to set timestamp for

 * @timestamp: the time at which the event has occurred

 *   in CLOCK_MONOTONIC

 *

 * This function is intended to provide to the input system a more

 * accurate time of when an event actually occurred. The driver should

 * call this function as soon as a timestamp is acquired ensuring

 * clock conversions in input_set_timestamp are done correctly.

 *

 * The system entering suspend state between timestamp acquisition and

 * calling input_set_timestamp can result in inaccurate conversions.

/**

 * input_get_timestamp - get timestamp for input events

 * @dev: input device to get timestamp from

 *

 * A valid timestamp is a timestamp of non-zero value.

/**

 * input_set_capability - mark device as capable of a certain event

 * @dev: device that is capable of emitting or accepting event

 * @type: type of the event (EV_KEY, EV_REL, etc...)

 * @code: event code

 *

 * In addition to setting up corresponding bit in appropriate capability

 * bitmap the function also adjusts dev->evbit.

 do nothing */

 count SYN_MT_REPORT and SYN_REPORT */

 Make room for KEY and MSC events */

/**

 * input_enable_softrepeat - enable software autorepeat

 * @dev: input device

 * @delay: repeat delay

 * @period: repeat period

 *

 * Enable software autorepeat on the input device.

/**

 * input_register_device - register device with input core

 * @dev: device to be registered

 *

 * This function registers device with input core. The device must be

 * allocated with input_allocate_device() and all it's capabilities

 * set up before registering.

 * If function fails the device must be freed with input_free_device().

 * Once device has been successfully registered it can be unregistered

 * with input_unregister_device(); input_free_device() should not be

 * called in this case.

 *

 * Note that this function is also used to register managed input devices

 * (ones allocated with devm_input_allocate_device()). Such managed input

 * devices need not be explicitly unregistered or freed, their tear down

 * is controlled by the devres infrastructure. It is also worth noting

 * that tear down of managed input devices is internally a 2-step process:

 * registered managed input device is first unregistered, but stays in

 * memory and can still handle input_event() calls (although events will

 * not be delivered anywhere). The freeing of managed input device will

 * happen later, when devres stack is unwound to the point where device

 * allocation was made.

 Every input device generates EV_SYN/SYN_REPORT events. */

 KEY_RESERVED is not supposed to be transmitted to userspace. */

 Make sure that bitmasks not mentioned in dev->evbit are clean. */

	/*

	 * If delay and period are pre-set by the driver, then autorepeating

	 * is handled by the driver itself and we don't do it in input.c.

/**

 * input_unregister_device - unregister previously registered device

 * @dev: device to be unregistered

 *

 * This function unregisters an input device. Once device is unregistered

 * the caller should not try to access it as it may get freed at any moment.

		/*

		 * We do not do input_put_device() here because it will be done

		 * when 2nd devres fires up.

/**

 * input_register_handler - register a new input handler

 * @handler: handler to be registered

 *

 * This function registers a new input handler (interface) for input

 * devices in the system and attaches it to all input devices that

 * are compatible with the handler.

/**

 * input_unregister_handler - unregisters an input handler

 * @handler: handler to be unregistered

 *

 * This function disconnects a handler from its input devices and

 * removes it from lists of known handlers.

/**

 * input_handler_for_each_handle - handle iterator

 * @handler: input handler to iterate

 * @data: data for the callback

 * @fn: function to be called for each handle

 *

 * Iterate over @bus's list of devices, and call @fn for each, passing

 * it @data and stop when @fn returns a non-zero value. The function is

 * using RCU to traverse the list and therefore may be using in atomic

 * contexts. The @fn callback is invoked from RCU critical section and

 * thus must not sleep.

/**

 * input_register_handle - register a new input handle

 * @handle: handle to register

 *

 * This function puts a new input handle onto device's

 * and handler's lists so that events can flow through

 * it once it is opened using input_open_device().

 *

 * This function is supposed to be called from handler's

 * connect() method.

	/*

	 * We take dev->mutex here to prevent race with

	 * input_release_device().

	/*

	 * Filters go to the head of the list, normal handlers

	 * to the tail.

	/*

	 * Since we are supposed to be called from ->connect()

	 * which is mutually exclusive with ->disconnect()

	 * we can't be racing with input_unregister_handle()

	 * and so separate lock is not needed here.

/**

 * input_unregister_handle - unregister an input handle

 * @handle: handle to unregister

 *

 * This function removes input handle from device's

 * and handler's lists.

 *

 * This function is supposed to be called from handler's

 * disconnect() method.

	/*

	 * Take dev->mutex to prevent race with input_release_device().

/**

 * input_get_new_minor - allocates a new input minor number

 * @legacy_base: beginning or the legacy range to be searched

 * @legacy_num: size of legacy range

 * @allow_dynamic: whether we can also take ID from the dynamic range

 *

 * This function allocates a new device minor for from input major namespace.

 * Caller can request legacy minor by specifying @legacy_base and @legacy_num

 * parameters and whether ID can be allocated from dynamic range if there are

 * no free IDs in legacy range.

	/*

	 * This function should be called from input handler's ->connect()

	 * methods, which are serialized with input_mutex, so no additional

	 * locking is needed here.

/**

 * input_free_minor - release previously allocated minor

 * @minor: minor to be released

 *

 * This function releases previously allocated input minor so that it can be

 * reused later.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Input Power Event -> APM Bridge

 *

 *  Copyright (c) 2007 Richard Purdie

 only react on key down events */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Generic helper functions for touchscreens and other two-dimensional

 *  pointing devices

 *

 *  Copyright (c) 2014 Sebastian Reichel <sre@kernel.org>

/**

 * touchscreen_parse_properties - parse common touchscreen properties

 * @input: input device that should be parsed

 * @multitouch: specifies whether parsed properties should be applied to

 *	single-touch or multi-touch axes

 * @prop: pointer to a struct touchscreen_properties into which to store

 *	axis swap and invert info for use with touchscreen_report_x_y();

 *	or %NULL

 *

 * This function parses common properties for touchscreens and sets up the

 * input device accordingly. The function keeps previously set up default

 * values if no value is specified.

/**

 * touchscreen_set_mt_pos - Set input_mt_pos coordinates

 * @pos: input_mt_pos to set coordinates of

 * @prop: pointer to a struct touchscreen_properties

 * @x: X coordinate to store in pos

 * @y: Y coordinate to store in pos

 *

 * Adjust the passed in x and y values applying any axis inversion and

 * swapping requested in the passed in touchscreen_properties and store

 * the result in a struct input_mt_pos.

/**

 * touchscreen_report_pos - Report touchscreen coordinates

 * @input: input_device to report coordinates for

 * @prop: pointer to a struct touchscreen_properties

 * @x: X coordinate to report

 * @y: Y coordinate to report

 * @multitouch: Report coordinates on single-touch or multi-touch axes

 *

 * Adjust the passed in x and y values applying any axis inversion and

 * swapping requested in the passed in touchscreen_properties and then

 * report the resulting coordinates on the input_dev's x and y axis.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic support for sparse keymaps

 *

 * Copyright (c) 2009 Dmitry Torokhov

 *

 * Derived from wistron button driver:

 * Copyright (C) 2005 Miloslav Trmac <mitr@volny.cz>

 * Copyright (C) 2005 Bernhard Rosenkraenzer <bero@arklinux.org>

 * Copyright (C) 2005 Dmitry Torokhov <dtor@mail.ru>

/**

 * sparse_keymap_entry_from_scancode - perform sparse keymap lookup

 * @dev: Input device using sparse keymap

 * @code: Scan code

 *

 * This function is used to perform &struct key_entry lookup in an

 * input device using sparse keymap.

/**

 * sparse_keymap_entry_from_keycode - perform sparse keymap lookup

 * @dev: Input device using sparse keymap

 * @keycode: Key code

 *

 * This function is used to perform &struct key_entry lookup in an

 * input device using sparse keymap.

/**

 * sparse_keymap_setup - set up sparse keymap for an input device

 * @dev: Input device

 * @keymap: Keymap in form of array of &key_entry structures ending

 *	with %KE_END type entry

 * @setup: Function that can be used to adjust keymap entries

 *	depending on device's needs, may be %NULL

 *

 * The function calculates size and allocates copy of the original

 * keymap after which sets up input device event bits appropriately.

 * The allocated copy of the keymap is automatically freed when it

 * is no longer needed.

 to account for the last KE_END entry */

/**

 * sparse_keymap_report_entry - report event corresponding to given key entry

 * @dev: Input device for which event should be reported

 * @ke: key entry describing event

 * @value: Value that should be reported (ignored by %KE_SW entries)

 * @autorelease: Signals whether release event should be emitted for %KE_KEY

 *	entries right after reporting press event, ignored by all other

 *	entries

 *

 * This function is used to report input event described by given

 * &struct key_entry.

/**

 * sparse_keymap_report_event - report event corresponding to given scancode

 * @dev: Input device using sparse keymap

 * @code: Scan code

 * @value: Value that should be reported (ignored by %KE_SW entries)

 * @autorelease: Signals whether release event should be emitted for %KE_KEY

 *	entries right after reporting press event, ignored by all other

 *	entries

 *

 * This function is used to perform lookup in an input device using sparse

 * keymap and report corresponding event. Returns %true if lookup was

 * successful and %false otherwise.

 Report an unknown key event as a debugging aid */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Input Multitouch Library

 *

 * Copyright (c) 2008-2010 Henrik Rydberg

/**

 * input_mt_init_slots() - initialize MT input slots

 * @dev: input device supporting MT events and finger tracking

 * @num_slots: number of slots used by the device

 * @flags: mt tasks to handle in core

 *

 * This function allocates all necessary memory for MT slot handling

 * in the input device, prepares the ABS_MT_SLOT and

 * ABS_MT_TRACKING_ID events for use and sets up appropriate buffers.

 * Depending on the flags set, it also performs pointer emulation and

 * frame synchronization.

 *

 * May be called repeatedly. Returns -EINVAL if attempting to

 * reinitialize with a different number of slots.

 Mark slots as 'inactive' */

 Mark slots as 'unused' */

/**

 * input_mt_destroy_slots() - frees the MT slots of the input device

 * @dev: input device with allocated MT slots

 *

 * This function is only needed in error path as the input core will

 * automatically free the MT slots when the device is destroyed.

/**

 * input_mt_report_slot_state() - report contact state

 * @dev: input device with allocated MT slots

 * @tool_type: the tool type to use in this slot

 * @active: true if contact is active, false otherwise

 *

 * Reports a contact via ABS_MT_TRACKING_ID, and optionally

 * ABS_MT_TOOL_TYPE. If active is true and the slot is currently

 * inactive, or if the tool type is changed, a new tracking id is

 * assigned to the slot. The tool type is only reported if the

 * corresponding absbit field is set.

 *

 * Returns true if contact is active.

/**

 * input_mt_report_finger_count() - report contact count

 * @dev: input device with allocated MT slots

 * @count: the number of contacts

 *

 * Reports the contact count via BTN_TOOL_FINGER, BTN_TOOL_DOUBLETAP,

 * BTN_TOOL_TRIPLETAP and BTN_TOOL_QUADTAP.

 *

 * The input core ensures only the KEY events already setup for

 * this device will produce output.

/**

 * input_mt_report_pointer_emulation() - common pointer emulation

 * @dev: input device with allocated MT slots

 * @use_count: report number of active contacts as finger count

 *

 * Performs legacy pointer emulation via BTN_TOUCH, ABS_X, ABS_Y and

 * ABS_PRESSURE. Touchpad finger count is emulated if use_count is true.

 *

 * The input core ensures only the KEY and ABS axes already setup for

 * this device will produce output.

			/*

			 * Force reporting BTN_TOOL_FINGER for devices that

			 * only report general hover (and not per-contact

			 * distance) when contact is in proximity but not

			 * on the surface.

/**

 * input_mt_drop_unused() - Inactivate slots not seen in this frame

 * @dev: input device with allocated MT slots

 *

 * Lift all slots not seen since the last call to this function.

/**

 * input_mt_sync_frame() - synchronize mt frame

 * @dev: input device with allocated MT slots

 *

 * Close the frame and prepare the internal state for a new one.

 * Depending on the flags, marks unused slots as inactive and performs

 * pointer emulation.

 Improve convergence for positive matrices by penalizing overcovers */

/**

 * input_mt_assign_slots() - perform a best-match assignment

 * @dev: input device with allocated MT slots

 * @slots: the slot assignment to be filled

 * @pos: the position array to match

 * @num_pos: number of positions

 * @dmax: maximum ABS_MT_POSITION displacement (zero for infinite)

 *

 * Performs a best match against the current contacts and returns

 * the slot assignment list. New contacts are assigned to unused

 * slots.

 *

 * The assignments are balanced so that all coordinate displacements are

 * below the euclidian distance dmax. If no such assignment can be found,

 * some contacts are assigned to unused slots.

 *

 * Returns zero on success, or negative error in case of failure.

/**

 * input_mt_get_slot_by_key() - return slot matching key

 * @dev: input device with allocated MT slots

 * @key: the key of the sought slot

 *

 * Returns the slot of the given key, if it exists, otherwise

 * set the key on the first unused slot and return.

 *

 * If no available slot can be found, -1 is returned.

 * Note that for this function to work properly, input_mt_sync_frame() has

 * to be called at each frame.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Joystick device driver for the input driver suite.

 *

 * Copyright (c) 1999-2002 Vojtech Pavlik

 * Copyright (c) 1999 Colin Van Dyke

 protects client_list */

 protects access to buffer, head and tail */

	/*

	 * IRQs already disabled, just acquire the lock

/*

 * Wake up users waiting for IO so they can disconnect from

 * dead device.

/*

 * Old joystick interface

	/*

	 * Get device state

	/*

	 * Reset reader's event queue

 No kernel lock - fine */

 Validate the map. */

 Validate the map. */

 Process fixed-sized commands. */

	/*

	 * Process variable-sized commands (the axis and button map commands

	 * are considered variable-sized to decouple them from the values of

	 * ABS_MAX and KEY_MAX).

 CONFIG_COMPAT */

/*

 * Mark device non-existent. This disables writes, ioctls and

 * prevents new users from opening the device. Already posted

 * blocking reads will stay, however new ones will fail.

 joydev is marked dead so no one else accesses joydev->open */

/*

 * These codes are copied from from hid-ids.h, unfortunately there is no common

 * usb_ids/bt_ids.h header.

 Avoid touchpads and touchscreens */

 Avoid tablets, digitisers and similar devices */

 Disable accelerometers on composite devices */

 sentinel */ }

	/*

	 * Virtualization (VMware, etc) and remote management (HP

	 * ILO2) solutions use absolute coordinates for their virtual

	 * pointing devices so that there is one-to-one relationship

	 * between pointer position on the host screen and virtual

	 * guest screen, and so their mice use ABS_X, ABS_Y and 3

	 * primary button events. This clashes with what joydev

	 * considers to be joysticks (a device with at minimum ABS_X

	 * axis).

	 *

	 * Here we are trying to separate absolute mice from

	 * joysticks. A device is, for joystick detection purposes,

	 * considered to be an absolute mouse if the following is

	 * true:

	 *

	 * 1) Event types are exactly

	 *      EV_ABS, EV_KEY and EV_SYN

	 *    or

	 *      EV_ABS, EV_KEY, EV_SYN and EV_MSC

	 *    or

	 *      EV_ABS, EV_KEY, EV_SYN, EV_MSC and EV_REL.

	 * 2) Absolute events are exactly ABS_X and ABS_Y.

	 * 3) Keys are exactly BTN_LEFT, BTN_RIGHT and BTN_MIDDLE.

	 * 4) Device is not on "Amiga" bus.

 VMware VMMouse, HP ILO2 */

 HP ILO2, AMI BMC firmware */

 VMware Virtual USB Mouse, QEMU USB Tablet, ATEN BMC firmware */

	/*

	 * Amiga joystick (amijoy) historically uses left/middle/right

	 * button events.

 Disable blacklisted devices */

 Avoid absolute mice */

 Normalize device number if it falls into legacy range */

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Support for polling mode for input devices.

 msec */

 msec */

 msec */

 Only start polling if polling is enabled */

		/*

		 * We want to show message even though kzalloc() may have

		 * printed backtrace as knowing what instance of input

		 * device we were dealing with is helpful.

 SYSFS interface */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Force feedback support for Linux input subsystem

 *

 *  Copyright (c) 2006 Anssi Hannula <anssi.hannula@gmail.com>

 *  Copyright (c) 2006 Dmitry Torokhov <dtor@mail.ru>

/*

 #define DEBUG */

/*

 * Check that the effect_id is a valid effect and whether the user

 * is the owner

/*

 * Checks whether 2 effects can be combined together

/*

 * Convert an effect into compatible one

		/*

		 * calculate magnitude of sine wave as average of rumble's

		 * 2/3 of strong magnitude and 1/3 of weak magnitude

 Let driver handle conversion */

/**

 * input_ff_upload() - upload effect into force-feedback device

 * @dev: input device

 * @effect: effect to be uploaded

 * @file: owner of the effect

/*

 * Erases the effect if the requester is also the effect owner. The mutex

 * should already be locked before calling this function.

/**

 * input_ff_erase - erase a force-feedback effect from device

 * @dev: input device to erase effect from

 * @effect_id: id of the effect to be erased

 * @file: purported owner of the request

 *

 * This function erases a force-feedback effect from specified device.

 * The effect will only be erased if it was uploaded through the same

 * file handle that is requesting erase.

/*

 * input_ff_flush - erase all effects owned by a file handle

 * @dev: input device to erase effect from

 * @file: purported owner of the effects

 *

 * This function erases all force-feedback effects associated with

 * the given owner from specified device. Note that @file may be %NULL,

 * in which case all effects will be erased.

/**

 * input_ff_event() - generic handler for force-feedback events

 * @dev: input device to send the effect to

 * @type: event type (anything but EV_FF is ignored)

 * @code: event code

 * @value: event value

/**

 * input_ff_create() - create force-feedback device

 * @dev: input device supporting force-feedback

 * @max_effects: maximum number of effects supported by the device

 *

 * This function allocates all necessary memory for a force feedback

 * portion of an input device and installs all default handlers.

 * @dev->ffbit should be already set up before calling this function.

 * Once ff device is created you need to setup its upload, erase,

 * playback and other handlers before registering input device

 overflow */

 Copy "true" bits into ff device bitmap */

 we can emulate RUMBLE with periodic effects */

/**

 * input_ff_destroy() - frees force feedback portion of input device

 * @dev: input device supporting force feedback

 *

 * This function is only needed in error path as input core will

 * automatically free force feedback structures when device is

 * destroyed.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Event char devices, giving access to raw input device events.

 *

 * Copyright (c) 1999-2002 Vojtech Pavlik

 protects client_list */

 [future] position of the first element of next packet */

 protects access to buffer, head and tail */

 EV_SYN==0 is EV_CNT, _not_ SYN_CNT, see EVIOCGBIT */

 requires the buffer lock to be held */

 EV_SYN and unknown codes are never filtered */

 first test whether the type is filtered */

 unknown values are never filtered */

 flush queued events of type @type, caller must hold client->buffer_lock */

 init to 1 so a leading SYN_REPORT will not be dropped */

 drop matched entry */

 drop empty SYN_REPORT groups */

 move entry to fill the gap */

 drop queue but keep our SYN_DROPPED event */

		/*

		 * Flush pending events and queue SYN_DROPPED event,

		 * but only if the queue is not empty.

		/*

		 * This effectively "drops" all unconsumed events, leaving

		 * EV_SYN/SYN_DROPPED plus the newest event in the queue.

 Interrupts are disabled, just acquire the lock. */

 drop empty SYN_REPORT */

/*

 * Pass incoming events to all connected clients.

/*

 * Pass incoming event to all connected clients.

/*

 * Grabs an event device (along with underlying input device).

 * This function is called with evdev->mutex taken.

/*

 * Wake up users waiting for IO so they can disconnect from

 * dead device.

		/*

		 * count == 0 is special - no IO is done but we check

		 * for error conditions (see above).

 No kernel lock - fine */

 __BIG_ENDIAN */

 CONFIG_COMPAT */

 legacy case */

/*

 * If we transfer state to the user, we should flush all pending events

 * of the same type from the client's queue. Otherwise, they might end up

 * with duplicate events, which can screw up client's state tracking.

 * If bits_to_user fails after flushing the queue, we queue a SYN_DROPPED

 * event so user-space will notice missing events.

 *

 * LOCKING:

 * We need to take event_lock before buffer_lock to avoid dead-locks. But we

 * need the even_lock only to guarantee consistent state. We can safely release

 * it while flushing the queue. This allows input-core to handle filters while

 * we flush the queue.

 must be called with evdev-mutex held */

 we allow unknown types and 'codes_size > size' for forward-compat */

 must be called with evdev-mutex held */

 we allow unknown types and 'codes_size > size' for forward-compat */

 fake mask with all bits set */

 First we check for fixed-length commands */

 Now check variable-length commands */

 Multi-number variable-length handlers */

 We can't change number of reserved MT slots */

			/*

			 * Take event lock to ensure that we are not

			 * changing device parameters in the middle

			 * of event.

/*

 * Mark device non-existent. This disables writes, ioctls and

 * prevents new users from opening the device. Already posted

 * blocking reads will stay, however new ones will fail.

 evdev is marked dead so no one else accesses evdev->open */

/*

 * Create new evdev device. Note that input core serializes calls

 * to connect and disconnect.

 Normalize device number if it falls into legacy range */

 Matches all devices */

 Terminating zero entry */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * LED support for the input layer

 *

 * Copyright 2010-2015 Samuel Thibault <samuel.thibault@ens-lyon.org>

 One of LED_* constants */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * 32bit compatibility wrappers for the input subsystem.

 *

 * Very heavily based on evdev.c - Copyright (c) 1999-2002 Vojtech Pavlik

		/*

		 * It so happens that the pointer which needs to be changed

		 * is the last field in the structure, so we can retrieve the

		 * whole thing and replace just the pointer.

 CONFIG_COMPAT */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

/*

 *  Input driver event debug module - dumps all events into syslog

 Matches all devices */

 Terminating zero entry */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Helpers for matrix keyboard bindings

 *

 * Copyright (C) 2012 Google, Inc

 *

 * Author:

 *	Olof Johansson <olof@lixom.net>

/**

 * matrix_keypad_parse_properties() - Read properties of matrix keypad

 *

 * @dev: Device containing properties

 * @rows: Returns number of matrix rows

 * @cols: Returns number of matrix columns

 * @return 0 if OK, <0 on error

/**

 * matrix_keypad_build_keymap - convert platform keymap into matrix keymap

 * @keymap_data: keymap supplied by the platform code

 * @keymap_name: name of device tree property containing keymap (if device

 *	tree support is enabled).

 * @rows: number of rows in target keymap array

 * @cols: number of cols in target keymap array

 * @keymap: expanded version of keymap that is suitable for use by

 * matrix keyboard driver

 * @input_dev: input devices for which we are setting up the keymap

 *

 * This function converts platform keymap (encoded with KEY() macro) into

 * an array of keycodes that is suitable for using in a standard matrix

 * keyboard driver that uses row and col as indices.

 *

 * If @keymap_data is not supplied and device tree support is enabled

 * it will attempt load the keymap from property specified by @keymap_name

 * argument (or "linux,keymap" if @keymap_name is %NULL).

 *

 * If @keymap is %NULL the function will automatically allocate managed

 * block of memory to store the keymap. This memory will be associated with

 * the parent device and automatically freed when device unbinds from the

 * driver.

 *

 * Callers are expected to set up input_dev->dev.parent before calling this

 * function.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Input driver to ExplorerPS/2 device driver module.

 *

 * Copyright (c) 1999-2002 Vojtech Pavlik

 * Copyright (c) 2004      Dmitry Torokhov

 protects client_list */

 use X size for ABS_Y to keep the same scale */

 Just acquire the lock, interrupts already disabled */

			/*

			 * Toggle left button to emulate tap.

			 * We rely on the fact that mousedev_mix always has 0

			 * motion packet so we won't mess current position.

 Ignore joysticks */

				/*

				 * Input system eats duplicate events,

				 * but we need all of them to do correct

				 * averaging so apply present one forward

/*

 * Open all available devices so they can all be multiplexed in one.

 * stream. Note that this function is called with mousedev_mix->mutex

 * held.

/*

 * Close all devices that were opened as part of multiplexed

 * device. Note that this function is called with mousedev_mix->mutex

 * held.

 ACK */

 Poll */

 account for leading ACK */

 Get ID */

 Get info */

 Reset */

 No kernel lock - fine */

/*

 * Mark device non-existent. This disables writes, ioctls and

 * prevents new users from opening the device. Already posted

 * blocking reads will stay, however new ones will fail.

/*

 * Wake up users waiting for IO so they can disconnect from

 * dead device.

 mousedev is marked dead so no one else accesses mousedev->open */

 Normalize device number if it falls into legacy range */

	},	/* A mouse like device, at least one button,

 A separate scrollwheel */

	},	/* A tablet like device, at least touch detection,

 A touchpad */

	},	/* Mouse-like device with absolute X and Y but ordinary

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Force feedback support for memoryless devices

 *

 *  Copyright (c) 2006 Anssi Hannula <anssi.hannula@gmail.com>

 *  Copyright (c) 2006 Dmitry Torokhov <dtor@mail.ru>

/*

 #define DEBUG */

 Number of effects handled with memoryless devices */

 Envelope update interval in ms */

 effect state (STARTED, PLAYING, etc) */

 loop count of the effect */

 start time */

 stop time */

 last time the effect was sent */

/*

 * Check for the next time envelope requires an update on memoryless devices

 check when fading should start */

 already fading, advance to next checkpoint */

/*

 * Apply an envelope to a value

/*

 * Return the type the effect has to be converted into (memless devices)

/*

 * Only left/right direction should be used (under/over 0x8000) for

 * forward/reverse motor direction (to keep calculation fast & simple).

/*

 * Combine two effects and apply gain.

		/*

		 * here we abuse ff_ramp to hold x and y of constant force

		 * If in future any driver wants something else than x and y

		 * in s8, this should be changed to something more generic

 here we also scale it 0x7fff => 0xffff */

/*

 * Because memoryless devices have only one effect per effect type active

 * at one time we have to combine multiple effects into one

		/*

		 * here we have started effects that are either

		 * currently playing (and may need be aborted)

		 * or need to start playing.

/*

 * Sets requested gain for FF effects. Called with dev->event_lock held.

/*

 * Start/stop specified FF effect. Called with dev->event_lock held.

	/*

	 * Even though we stop all playing effects when tearing down

	 * an input device (via input_device_flush() that calls into

	 * input_ff_flush() that stops and erases all effects), we

	 * do not actually stop the timer, and therefore we should

	 * do it here.

/**

 * input_ff_create_memless() - create memoryless force-feedback device

 * @dev: input device supporting force-feedback

 * @data: driver-specific data to be passed into @play_effect

 * @play_effect: driver-specific method for playing FF effect

 we can emulate periodic effects with RUMBLE */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012-2015 Synaptics Incorporated

 * Copyright (C) 2016 Zodiac Inflight Innovations

 F54 data offsets */

/*

 * The smbus protocol can read only 32 bytes max at a time.

 * But this should be fine for i2c/spi as well.

 F54 commands */

 F54 capabilities */

/**

 * enum rmi_f54_report_type - RMI4 F54 report types

 *

 * @F54_REPORT_NONE:	No Image Report.

 *

 * @F54_8BIT_IMAGE:	Normalized 8-Bit Image Report. The capacitance variance

 *			from baseline for each pixel.

 *

 * @F54_16BIT_IMAGE:	Normalized 16-Bit Image Report. The capacitance variance

 *			from baseline for each pixel.

 *

 * @F54_RAW_16BIT_IMAGE:

 *			Raw 16-Bit Image Report. The raw capacitance for each

 *			pixel.

 *

 * @F54_TRUE_BASELINE:	True Baseline Report. The baseline capacitance for each

 *			pixel.

 *

 * @F54_FULL_RAW_CAP:   Full Raw Capacitance Report. The raw capacitance with

 *			low reference set to its minimum value and high

 *			reference set to its maximum value.

 *

 * @F54_FULL_RAW_CAP_RX_OFFSET_REMOVED:

 *			Full Raw Capacitance with Receiver Offset Removed

 *			Report. Set Low reference to its minimum value and high

 *			references to its maximum value, then report the raw

 *			capacitance for each pixel.

 *

 * @F54_MAX_REPORT_TYPE:

 *			Maximum number of Report Types.  Used for sanity

 *			checking.

 V4L2 support */

/*

 * Basic checks on report_type to ensure we write a valid type

 * to the sensor.

 Remaining values are zero via kzalloc */

 Write Report Type into F54_AD_Data0 */

	/*

	 * Small delay after disabling interrupts to avoid race condition

	 * in firmare. This value is a bit higher than absolutely necessary.

	 * Should be removed once issue is resolved in firmware.

 get frame data */

 V4L2 structures */

 retry won't help */

	/*

	 * Need to check if command has completed.

	 * If not try again later.

 register video device */

 initialize the queue */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015-2016 Red Hat

 * Copyright (C) 2015 Lyude Paul <thatslyude@gmail.com>

	/*

	 * The first generation of image sensors don't have a second part to

	 * their f03 query, as such we have to set some of these values manually

	/*

	 * Consume any pending data. Some devices like to spam with

	 * 0xaa 0x00 announcements which may confuse us as we try to

	 * probe the device.

		/*

		 * We must be re-configuring the sensor, just enable

		 * interrupts for this function.

 First grab the data passed by the transport device */

 Grab all of the data registers, and check them for data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2011-2016 Synaptics Incorporated

 * Copyright (c) 2011 Unixphere

/**

 * struct rmi_i2c_xport - stores information for i2c communication

 *

 * @xport: The transport interface structure

 * @client: The I2C client device structure

 *

 * @page_mutex: Locks current page to avoid changing pages in unexpected ways.

 * @page: Keeps track of the current virtual page

 *

 * @tx_buf: Buffer used for transmitting data to the sensor over i2c.

 * @tx_buf_size: Size of the buffer

 *

 * @supplies: Array of voltage regulators

 * @startup_delay: Milliseconds to pause after powering up the regulators

/*

 * rmi_set_page - Set RMI page

 * @xport: The pointer to the rmi_transport_dev struct

 * @page: The new page address.

 *

 * RMI devices have 16-bit addressing, but some of the transport

 * implementations (like SMBus) only have 8-bit addressing. So RMI implements

 * a page address at 0xff of every page so we can reliable page addresses

 * every 256 registers.

 *

 * The page_mutex lock must be held when this function is entered.

 *

 * Returns zero on success, non-zero on failure.

 success */

	/*

	 * Setting the page to zero will (a) make sure the PSR is in a

	 * known state, and (b) make sure we can talk to the device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2007-2016, Synaptics Incorporated

 * Copyright (C) 2016 Zodiac Inflight Innovations

		/*

		 * We only need to erase config if we haven't updated

		 * firmware.

	/*

	 * The status is the percentage complete, or once complete,

	 * zero for success or a negative return code.

 Enter flash mode */

 Tear down functions and re-probe */

 Perform firmware update */

 Re-probe */

 Driver already bound, so enable ATTN now. */

 v5 code only supported version 0, try V7 probe */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012-2016 Synaptics Incorporated

 Defs for Query 0 */

 Defs for Query 1 */

 Defs for Control Registers */

 Query Data */

 Control Register Data */

 Read the gpi led data. */

 can happen if gpio_data.disable is set */

 Try [re-]establish link to F03. */

 Write Control Register values back to device */

	/*

	 * ctrl2 -> dir == 0 -> input mode

	 * ctrl3 -> data == 1 -> actual button

	/*

	 * Buttonpad could be also inferred from f30->has_mech_mouse_btns,

	 * but I am not sure, so use only the pdata info and the number of

	 * mapped buttons.

 control 6 uses a byte per gpio/led */

 control 7 uses a byte per gpio/led */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2011-2016 Synaptics Incorporated

 * Copyright (c) 2011 Unixphere

 maximum ABS_MT_POSITION displacement (in mm) */

 we keep the previous values if the finger is released */

	/*

	 * Here checking if X offset or y offset are specified is

	 * redundant. We just add the offsets or clip the values.

	 *

	 * Note: offsets need to be applied before clipping occurs,

	 * or we could get funny values that are outside of

	 * clipping boundaries.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012-2015 Synaptics Incorporated

 * Copyright (C) 2016 Zodiac Inflight Innovations

 F55 data offsets */

 Only read required query registers */

 F55 capabilities */

		/*

		 * Calculate the number of enabled receive and transmit

		 * electrodes by reading F55:Ctrl1 (sensor receiver assignment)

		 * and F55:Ctrl2 (sensor transmitter assignment). The number of

		 * enabled electrodes is the sum of all field entries with a

		 * value other than 0xff.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015 - 2016 Red Hat, Inc

 * Copyright (c) 2011, 2012 Synaptics Incorporated

 * Copyright (c) 2011 Unixphere

 8 entry of 4 bytes each */

 Check if for SMBus new version device by reading version byte. */

 SMB block write - wrapper over ic2_smb_write_block */

/*

 * The function to get command code for smbus operations and keeps

 * records to the driver mapping table

 constructs mapping table data entry. 4 bytes each entry */

		/*

		 * if not written to device mapping table

		 * clear the driver mapping table records

 save to the driver level mapping table */

		/*

		 * break into 32 bytes chunks to write get command code

 prepare to write next block of bytes */

 SMB block read - wrapper over ic2_smb_read_block */

 break into 32 bytes chunks to write get command code */

 prepare to read next block of bytes */

 the mapping table has been flushed, discard the current one */

 we need to get the smbus version to activate the touchpad */

	/*

	 * we do not call the actual reset command, it has to be handled in

	 * PS/2 or there will be races between PS/2 and SMBus.

	 * PS/2 should ensure that a psmouse_reset is called before

	 * intializing the device and after it has been removed to be in a known

	 * state.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012-2016 Synaptics Incorporated

 F12 Data1 describes sensed objects */

 F12 Data5 describes finger ACM */

 F12 Data5 describes Pen */

 F12 Data9 reports relative data */

 Units 1/128 sensor pitch */

 Skip over sensor flags */

			/*

			 * The byte containing the EnableDribble bit will be

			 * in either byte 0 or byte 2 of control 20. Depending

			 * on the existence of subpacket 0. If control 20 is

			 * larger then 3 bytes, just read the first 3.

	/*

	 * Figure out what data is contained in the data registers. HID devices

	 * may have registers defined, but their data is not reported in the

	 * HID attention report. Registers which are not reported in the HID

	 * attention report check to see if the device is receiving data from

	 * HID attention reports.

 allocate the in-kernel tracking buffers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2011-2016 Synaptics Incorporated

 * Copyright (c) 2011 Unixphere

/*

 * RMI Physical devices

 *

 * Physical RMI device consists of several functions serving particular

 * purpose. For example F11 is a 2D touch sensor while F01 is a generic

 * function present in every RMI device.

/**

 * rmi_register_transport_device - register a transport device connection

 * on the RMI bus.  Transport drivers provide communication from the devices

 * on a bus (such as SPI, I2C, and so on) to the RMI4 sensor.

 *

 * @xport: the transport device to register

/**

 * rmi_unregister_transport_device - unregister a transport device connection

 * @xport: the transport driver to unregister

 *

 Function specific stuff */

/**

 * rmi_register_function_handler - register a handler for an RMI function

 * @handler: RMI handler that should be registered.

 * @owner: pointer to module that implements the handler

 * @mod_name: name of the module implementing the handler

 *

 * This function performs additional setup of RMI function handler and

 * registers it with the RMI core so that it can be bound to

 * RMI function devices.

/**

 * rmi_unregister_function_handler - unregister given RMI function handler

 * @handler: RMI handler that should be unregistered.

 *

 * This function unregisters given function handler from RMI core which

 * causes it to be unbound from the function devices.

 Bus specific stuff */

 First see if types are not compatible */

	/*

	 * We should only ever get here if all drivers are unloaded, so

	 * all we have to do at this point is unregister ourselves.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012-2020 Synaptics Incorporated

 Defs for Query 0 */

 Query Data */

 Try [re-]establish link to F03. */

 gpio exist && direction input */

 Query1 -> gpio exist */

 Ctrl1 -> gpio direction */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016, Zodiac Inflight Innovations

 * Copyright (c) 2007-2016, Synaptics Incorporated

 * Copyright (C) 2012 Alexandra Chin <alexandra.chin@tw.synaptics.com>

 * Copyright (C) 2012 Scott Lin <scott.lin@tw.synaptics.com>

 Eat leading zeros */

 Empty */;

 address of top level container */

 address of top level container content */

 Read bootloader version */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2011-2016 Synaptics Incorporated

 * Copyright (c) 2011 Unixphere

 *

 * This driver provides the core support for a single RMI4-based device.

 *

 * The RMI4 specification can be found here (URL split for line length):

 *

 * http://www.synaptics.com/sites/default/files/

 *      511-000136-01-Rev-E-RMI4-Interfacing-Guide.pdf

 Doing it in the reverse order so F01 will be removed last */

	/*

	 * At this point, irq_status has all bits that are set in the

	 * interrupt status register and are enabled.

/**

 * rmi_driver_set_input_params - set input device id and other data.

 *

 * @rmi_dev: Pointer to an RMI device

 * @input: Pointer to input device

 *

	/*

	 * Can get called before the driver is fully ready to deal with

	 * this situation.

	/*

	 * Count number of empty PDT pages. If a gap of two pages

	 * or more is found, stop scanning.

	/*

	 * The first register of the register descriptor is the size of

	 * the register descriptor's presense register.

	/*

	 * The presence register contains the size of the register structure

	 * and a bitmap which identified which packet registers are present

	 * for this particular register type (ie query, control, or data).

	/*

	 * Allocate a temporary buffer to hold the register structure.

	 * I'm not using devm_kzalloc here since it will not be retained

	 * after exiting this function

	/*

	 * The register structure contains information about every packet

	 * register of this type. This includes the size of the packet

	 * register and a bitmap of all subpackets contained in the packet

	 * register.

 Compute the register offset relative to the base address */

 F01 should always be on page 0. If we don't find it there, fail. */

	/*

	 * Call rmi_process_interrupt_requests() after enabling irq,

	 * otherwise we may lose interrupt on edge-triggered systems.

 make sure the fifo is clean */

	/*

	 * We need to count the IRQs and allocate their storage before scanning

	 * the PDT and creating the function entries, because adding a new

	 * function can trigger events that result in the IRQ related storage

	 * being accessed.

 Allocate and register a linear revmap irq_domain */

	/*

	 * Right before a warm boot, the sensor might be in some unusual state,

	 * such as F54 diagnostics, or F34 bootloader mode after a firmware

	 * or configuration update.  In order to clear the sensor to a known

	 * state and/or apply any updates, we issue a initial reset to clear any

	 * previous settings and force it into normal operation.

	 *

	 * We have to do this before actually building the PDT because

	 * the reflash updates (if any) might cause various registers to move

	 * around.

	 *

	 * For a number of reasons, this initial reset may fail to return

	 * within the specified time, but we'll still be able to bring up the

	 * driver normally after that failure.  This occurs most commonly in

	 * a cold boot situation (where then firmware takes longer to come up

	 * than from a warm boot) and the reset_delay_ms in the platform data

	 * has been set too short to accommodate that.  Since the sensor will

	 * eventually come up and be usable, we don't want to just fail here

	 * and leave the customer's device unusable.  So we warn them, and

	 * continue processing.

		/*

		 * we'll print out a warning and continue since

		 * failure to get the PDT properties is not a cause to fail

		/*

		 * The transport driver already has an input device.

		 * In some cases it is preferable to reuse the transport

		 * devices input device instead of creating a new one here.

		 * One example is some HID touchpads report "pass-through"

		 * button events are not reported by rmi registers.

 Driver already bound, so enable ATTN now. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2011-2016 Synaptics Incorporated

 * Copyright (c) 2011 Unixphere

 Force a firmware reset of the sensor */

 Various F01_RMI_QueryX bits */

 From Query 00 through 20 */

 YYYY/MM/DD + '\0' */

 F01 device status bits */

 Most recent device status event */

 The device has lost its configuration for some reason. */

 The device is in bootloader mode */

 Control register bits */

/*

 * Sleep mode controls power management on the device and affects all

 * functions of the device.

/*

 * This bit disables whatever sleep mode may be selected by the sleep_mode

 * field and forces the device to run at full power without sleeping.

/*

 * When this bit is set, the touch controller employs a noise-filtering

 * algorithm designed for use with a connected battery charger.

/*

 * Sets the report rate for the device. The effect of this setting is

 * highly product dependent. Check the spec sheet for your particular

 * touch sensor.

/*

 * Written by the host as an indicator that the device has been

 * successfully configured.

/**

 * struct f01_device_control - controls basic sensor functions

 *

 * @ctrl0: see the bit definitions above.

 * @doze_interval: controls the interval between checks for finger presence

 *	when the touch sensor is in doze mode, in units of 10ms.

 * @wakeup_threshold: controls the capacitance threshold at which the touch

 *	sensor will decide to wake up from that low power state.

 * @doze_holdoff: controls how long the touch sensor waits after the last

 *	finger lifts before entering the doze state, in units of 100ms.

 Now parse what we got */

	/*

	 * Set the configured bit and (optionally) other important stuff

	 * in the device control register.

	/*

	 * Sleep mode might be set as a hangover from a system crash or

	 * reboot without power cycle.  If so, clear it so the sensor

	 * is certain to function.

 Dummy read in order to clear irqs */

 Advance to interrupt control registers, then skip over them. */

 read control register */

 Note that the bus device is used, not the F01 device */

		/*

		 * Do not allow user unbinding F01 as it is critical

		 * function.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2011-2015 Synaptics Incorporated

 * Copyright (c) 2011 Unixphere

/*

 * A note about RMI4 F11 register structure.

 *

 * The properties for a given sensor are described by its query registers.  The

 * number of query registers and the layout of their contents are described by

 * the F11 device queries as well as the sensor query information.

 *

 * Similarly, each sensor has control registers that govern its behavior.  The

 * size and layout of the control registers for a given sensor can be determined

 * by parsing that sensors query registers.

 *

 * And in a likewise fashion, each sensor has data registers where it reports

 * its touch data and other interesting stuff.  The size and layout of a

 * sensors data registers must be determined by parsing its query registers.

 *

 * The short story is that we need to read and parse a lot of query

 * registers in order to determine the attributes of a sensor. Then

 * we need to use that data to compute the size of the control and data

 * registers for sensor.

 *

 * The end result is that we have a number of structs that aren't used to

 * directly generate the input events, but their size, location and contents

 * are critical to determining where the data we are interested in lives.

 *

 * At this time, the driver does not yet comprehend all possible F11

 * configuration options, but it should be sufficient to cover 99% of RMI4 F11

 * devices currently in the field.

 maximum ABS_MT_POSITION displacement (in mm) */

/*

 * Writing this to the F11 command register will cause the sensor to

 * calibrate to the current capacitive state.

* Defs for Query 1 */

* Defs for Query 2, 3, and 4. */

* Defs for Query 5 */

* Defs for Query 7 */

* Defs for Query 8 */

* Defs for Query 9. */

* Defs for Query 10. */

* Defs for Query 11 */

* Defs for Query 12. */

* Defs for Query 13. */

* Defs for Query 14. */

/**

 * struct f11_2d_sensor_queries - describes sensor capabilities

 *

 * Query registers 1 through 4 are always present.

 *

 * @nr_fingers: describes the maximum number of fingers the 2-D sensor

 *	supports.

 * @has_rel: the sensor supports relative motion reporting.

 * @has_abs: the sensor supports absolute poition reporting.

 * @has_gestures: the sensor supports gesture reporting.

 * @has_sensitivity_adjust: the sensor supports a global sensitivity

 *	adjustment.

 * @configurable: the sensor supports various configuration options.

 * @nr_x_electrodes:  the maximum number of electrodes the 2-D sensor

 *	supports on the X axis.

 * @nr_y_electrodes:  the maximum number of electrodes the 2-D sensor

 *	supports on the Y axis.

 * @max_electrodes: the total number of X and Y electrodes that may be

 *	configured.

 *

 * Query 5 is present if the has_abs bit is set.

 *

 * @abs_data_size: describes the format of data reported by the absolute

 *	data source.  Only one format (the kind used here) is supported at this

 *	time.

 * @has_anchored_finger: then the sensor supports the high-precision second

 *	finger tracking provided by the manual tracking and motion sensitivity

 *	options.

 * @has_adj_hyst: the difference between the finger release threshold and

 *	the touch threshold.

 * @has_dribble: the sensor supports the generation of dribble interrupts,

 *	which may be enabled or disabled with the dribble control bit.

 * @has_bending_correction: Bending related data registers 28 and 36, and

 *	control register 52..57 are present.

 * @has_large_object_suppression: control register 58 and data register 28

 *	exist.

 * @has_jitter_filter: query 13 and control 73..76 exist.

 *

 * Query 6 is present if the has_rel it is set.

 *

 * @f11_2d_query6: this register is reserved.

 *

 * Gesture information queries 7 and 8 are present if has_gestures bit is set.

 *

 * @has_single_tap: a basic single-tap gesture is supported.

 * @has_tap_n_hold: tap-and-hold gesture is supported.

 * @has_double_tap: double-tap gesture is supported.

 * @has_early_tap: early tap is supported and reported as soon as the finger

 *	lifts for any tap event that could be interpreted as either a single

 *	tap or as the first tap of a double-tap or tap-and-hold gesture.

 * @has_flick: flick detection is supported.

 * @has_press: press gesture reporting is supported.

 * @has_pinch: pinch gesture detection is supported.

 * @has_chiral: chiral (circular) scrolling  gesture detection is supported.

 * @has_palm_det: the 2-D sensor notifies the host whenever a large conductive

 *	object such as a palm or a cheek touches the 2-D sensor.

 * @has_rotate: rotation gesture detection is supported.

 * @has_touch_shapes: TouchShapes are supported.  A TouchShape is a fixed

 *	rectangular area on the sensor that behaves like a capacitive button.

 * @has_scroll_zones: scrolling areas near the sensor edges are supported.

 * @has_individual_scroll_zones: if 1, then 4 scroll zones are supported;

 *	if 0, then only two are supported.

 * @has_mf_scroll: the multifinger_scrolling bit will be set when

 *	more than one finger is involved in a scrolling action.

 * @has_mf_edge_motion: indicates whether multi-finger edge motion gesture

 *	is supported.

 * @has_mf_scroll_inertia: indicates whether multi-finger scroll inertia

 *	feature is supported.

 *

 * Convenience for checking bytes in the gesture info registers.  This is done

 * often enough that we put it here to declutter the conditionals

 *

 * @query7_nonzero: true if none of the query 7 bits are set

 * @query8_nonzero: true if none of the query 8 bits are set

 *

 * Query 9 is present if the has_query9 is set.

 *

 * @has_pen: detection of a stylus is supported and registers F11_2D_Ctrl20

 *	and F11_2D_Ctrl21 exist.

 * @has_proximity: detection of fingers near the sensor is supported and

 *	registers F11_2D_Ctrl22 through F11_2D_Ctrl26 exist.

 * @has_palm_det_sensitivity:  the sensor supports the palm detect sensitivity

 *	feature and register F11_2D_Ctrl27 exists.

 * @has_suppress_on_palm_detect: the device supports the large object detect

 *	suppression feature and register F11_2D_Ctrl27 exists.

 * @has_two_pen_thresholds: if has_pen is also set, then F11_2D_Ctrl35 exists.

 * @has_contact_geometry: the sensor supports the use of contact geometry to

 *	map absolute X and Y target positions and registers F11_2D_Data18

 *	through F11_2D_Data27 exist.

 * @has_pen_hover_discrimination: if has_pen is also set, then registers

 *	F11_2D_Data29 through F11_2D_Data31, F11_2D_Ctrl68.*, F11_2D_Ctrl69

 *	and F11_2D_Ctrl72 exist.

 * @has_pen_filters: if has_pen is also set, then registers F11_2D_Ctrl70 and

 *	F11_2D_Ctrl71 exist.

 *

 * Touch shape info (query 10) is present if has_touch_shapes is set.

 *

 * @nr_touch_shapes: the total number of touch shapes supported.

 *

 * Query 11 is present if the has_query11 bit is set in query 0.

 *

 * @has_z_tuning: if set, the sensor supports Z tuning and registers

 *	F11_2D_Ctrl29 through F11_2D_Ctrl33 exist.

 * @has_algorithm_selection: controls choice of noise suppression algorithm

 * @has_w_tuning: the sensor supports Wx and Wy scaling and registers

 *	F11_2D_Ctrl36 through F11_2D_Ctrl39 exist.

 * @has_pitch_info: the X and Y pitches of the sensor electrodes can be

 *	configured and registers F11_2D_Ctrl40 and F11_2D_Ctrl41 exist.

 * @has_finger_size: the default finger width settings for the sensor

 *	can be configured and registers F11_2D_Ctrl42 through F11_2D_Ctrl44

 *	exist.

 * @has_segmentation_aggressiveness: the sensorâs ability to distinguish

 *	multiple objects close together can be configured and register

 *	F11_2D_Ctrl45 exists.

 * @has_XY_clip: the inactive outside borders of the sensor can be

 *	configured and registers F11_2D_Ctrl46 through F11_2D_Ctrl49 exist.

 * @has_drumming_filter: the sensor can be configured to distinguish

 *	between a fast flick and a quick drumming movement and registers

 *	F11_2D_Ctrl50 and F11_2D_Ctrl51 exist.

 *

 * Query 12 is present if hasQuery12 bit is set.

 *

 * @has_gapless_finger: control registers relating to gapless finger are

 *	present.

 * @has_gapless_finger_tuning: additional control and data registers relating

 *	to gapless finger are present.

 * @has_8bit_w: larger W value reporting is supported.

 * @has_adjustable_mapping: TBD

 * @has_info2: the general info query14 is present

 * @has_physical_props: additional queries describing the physical properties

 *	of the sensor are present.

 * @has_finger_limit: indicates that F11 Ctrl 80 exists.

 * @has_linear_coeff_2: indicates that F11 Ctrl 81 exists.

 *

 * Query 13 is present if Query 5's has_jitter_filter bit is set.

 *

 * @jitter_window_size: used by Design Studio 4.

 * @jitter_filter_type: used by Design Studio 4.

 *

 * Query 14 is present if query 12's has_general_info2 flag is set.

 *

 * @light_control: Indicates what light/led control features are present,

 *	if any.

 * @is_clear: if set, this is a clear sensor (indicating direct pointing

 *	application), otherwise it's opaque (indicating indirect pointing).

 * @clickpad_props: specifies if this is a clickpad, and if so what sort of

 *	mechanism it uses

 * @mouse_buttons: specifies the number of mouse buttons present (if any).

 * @has_advanced_gestures: advanced driver gestures are supported.

 *

 * @x_sensor_size_mm: size of the sensor in millimeters on the X axis.

 * @y_sensor_size_mm: size of the sensor in millimeters on the Y axis.

 query1 */

 query2 */

 query3 */

 query4 */

 query5 */

 query 7 */

 query 8 */

 Query 9 */

 Query 10 */

 Query 11. */

 Query 12 */

 Query 13 */

 Query 14 */

 Query 15 - 18 */

 Defs for Ctrl0. */

 Defs for Ctrl1. */

 Defs for Data 8 */

 Defs for Data 9 */

/** Handy pointers into our data buffer.

 *

 * @f_state - start of finger state registers.

 * @abs_pos - start of absolute position registers (if present).

 * @rel_pos - start of relative data registers (if present).

 * @gest_1  - gesture flags (if present).

 * @gest_2  - gesture flags & finger count (if present).

 * @pinch   - pinch motion register (if present).

 * @flick   - flick distance X & Y, flick time (if present).

 * @rotate  - rotate motion and finger separation.

 * @multi_scroll - chiral deltas for X and Y (if present).

 * @scroll_zones - scroll deltas for 4 regions (if present).

/** Data pertaining to F11 in general.  For per-sensor data, see struct

 * f11_2d_sensor.

 *

 * @dev_query - F11 device specific query registers.

 * @dev_controls - F11 device specific control registers.

 * @dev_controls_mutex - lock for the control registers.

 * @rezero_wait_ms - if nonzero, upon resume we will wait this many

 * milliseconds before rezeroing the sensor(s).  This is useful in systems with

 * poor electrical behavior on resume, where the initial calibration of the

 * sensor(s) coming out of sleep state may be bogus.

 * @sensors - per sensor data structures.

 Possible of having 4 fingers per f_state register */

		/*

		 * the absolute part is made in 2 parts to allow the kernel

		 * tracking to take place.

 no need to send twice the error */

 Check if F11_2D_Query7 is non-zero */

 Check if F11_2D_Query7 or F11_2D_Query8 is non-zero */

 query 8 */

		/*

		 * query 15 - 18 contain the size of the sensor

		 * and query 19 - 26 contain bezel dimensions

	/*

	** init instance data, fill in values and create any sysfs files

		/*

		 * If device doesn't have abs or if it has been disables

		 * fallback to reporting rel data.

 allocate the in-kernel tracking buffers */

	/*

	 * If distance threshold values are set, switch to reduced reporting

	 * mode so they actually get used by the controller.

		/*

		 * The valid data in the attention report is less then

		 * expected. Only process the complete fingers.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2011-2016 Synaptics Incorporated

 * Copyright (c) 2011 Unixphere

	/*

	 * Allocate a pool of spi_transfer buffers for devices which need

	 * per byte delays.

		/*

		 * SPI needs an address. Use 0x7FF if we want to keep

		 * reading from the last position of the register pointer.

/*

 * rmi_set_page - Set RMI page

 * @xport: The pointer to the rmi_transport_dev struct

 * @page: The new page address.

 *

 * RMI devices have 16-bit addressing, but some of the transport

 * implementations (like SMBus) only have 8-bit addressing. So RMI implements

 * a page address at 0xff of every page so we can reliable page addresses

 * every 256 registers.

 *

 * The page_mutex lock must be held when this function is entered.

 *

 * Returns zero on success, non-zero on failure.

	/*

	 * Setting the page to zero will (a) make sure the PSR is in a

	 * known state, and (b) make sure we can talk to the device.

 SPDX-License-Identifier: BSD-2-Clause OR GPL-2.0-or-later

/*

 * Dell Wyse 3020 a.k.a. "Ariel" Power Button Driver

 *

 * Copyright (C) 2020 Lubomir Rintel

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for IMS Passenger Control Unit Devices

 *

 * Copyright (C) 2013 The IMS Company

 control interface's device, used for logging */

 Input and LED devices have been created */

/*********************************************************************

 *             Buttons Input device support                          *

/*********************************************************************

 *             Gamepad Input device support                          *

/*********************************************************************

 *             PCU Communication protocol handling                   *

 PCU commands */

 Pass data to bootloader */

 PCU responses */

 Originally 0xc1 */

 Originally 0xc4 */

 Bootloader response */

 Unsolicited, button state */

 Bits 7 through 16 */

 msec */

 msec */

		/*

		 * See if we got command completion.

		 * If both the sequence and response code match save

		 * the data and signal completion.

 Skip everything until we get Start Xmit */

 We know the command need not be escaped */

 Bootloader commands */

 Bootloader commands */

 originally 0xa7 */

 originally 0xa8 */

 Execute jump to the bootoloader */

/*********************************************************************

 *             Firmware Update handling                              *

		/*

		 * The firmware format is messed up for some reason.

		 * The address twice that of what is needed for some

		 * reason and we end up overwriting half of the data

		 * with the next record.

/*********************************************************************

 *             Backlight LED device support                          *

 Assume the LED is OFF */

/*********************************************************************

 *             Sysfs attributes handling                             *

	/*

	 * Even if update failed, let's fetch the info again as we just

	 * clobbered one of the fields.

	/*

	 * If we are already in bootloader mode we can proceed with

	 * flashing the firmware.

	 *

	 * If we are in application mode, then we need to switch into

	 * bootloader mode, which will cause the device to disconnect

	 * and reconnect as different device.

 Support for a separate OFN attribute group */

 We only need LSB */

 success */

 this urb is terminated, clean up */

	/*

	 * We are using usb_bulk_msg() for sending so there is no point

	 * in allocating memory with usb_alloc_coherent().

 Device does not respond to basic queries, hopeless */

		/*

		 * Do not signal error, but do not create input nor

		 * backlight devices either, let userspace figure this

		 * out (flash a new firmware?).

 Same as above, punt to userspace */

 Device appears to be operable, complete initialization */

	/*

	 * PCU-B devices, both GEN_1 and GEN_2 do not have OFN sensor

 make sure flag setting is not reordered */

 This error is not fatal, let userspace have another chance */

 Make sure our initial firmware request has completed */

	/*

	 * See if we are dealing with control or data interface. The cleanup

	 * happens when we unbind primary (control) interface.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2011 Kionix, Inc.

 * Written by Chris Hudson <chudson@kionix.com>

 OUTPUT REGISTERS */

 CONTROL REGISTERS */

 CONTROL REGISTER 1 BITS */

 Data ready funtion enable bit: set during probe if using irq mode */

 DATA CONTROL REGISTER BITS */

 INTERRUPT CONTROL REGISTER 1 BITS */

 Set these during probe if using irq mode */

 INPUT_ABS CONSTANTS */

 RESUME STATE INDICES */

/*

 * The following table lists the maximum appropriate poll interval for each

 * available output data rate.

 Data bytes from hardware xL, xH, yL, yH, zL, zH */

 data ready is the only possible interrupt type */

 Use the lowest ODR that can support the requested poll interval */

 ensure that PC1 is cleared before updating control registers */

 only write INT_CTRL_REG1 if in irq mode */

 turn on outputs */

 clear initial interrupt if in irq mode */

/*

 * When IRQ mode is selected, we need to provide an interface to allow the user

 * to change the output data rate of the part.  For consistency, we are using

 * the set_poll method, which accepts a poll interval in milliseconds, and then

 * calls update_odr() while passing this value as an argument.  In IRQ mode, the

 * data outputs will not be read AT the requested poll interval, rather, the

 * lowest ODR that can support the requested interval.  The client application

 * will be responsible for retrieving data from the input node at the desired

 * interval.

 Returns currently selected poll interval (in ms) */

 Allow users to select a new poll interval (in ms) */

 Lock the device to prevent races with open/close (and itself) */

	/*

	 * Set current interval to the greater of the minimum interval or

	 * the requested interval

 If in irq mode, populate INT_CTRL_REG1 and enable DRDY. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Onkey driver for Actions Semi ATC260x PMICs.

 *

 * Copyright (c) 2020 Cristian Ciocaltea <cristian.ciocaltea@gmail.com>

 <2s for short press, >2s for long press */

 Driver internals */

	/*

	 * The hardware generates interrupt only when the onkey pin is

	 * asserted. Hence, the deassertion of the pin is simulated through

	 * work queue.

	/*

	 * The key-down status bit is cleared when the On/Off button

	 * is released.

 Clear key press pending events and enable key press interrupts. */

 Disable key press interrupts. */

 Keep IRQ disabled until atc260x_onkey_open() is called. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Input driver for slidebars on some Lenovo IdeaPad laptops

 *

 * Copyright (C) 2013 Andrey Moiseev <o2g.org.ru@gmail.com>

 *

 * Reverse-engineered from Lenovo SlideNav software (SBarHook.dll).

 *

 * Trademarks are the property of their respective owners.

/*

 * Currently tested and works on:

 *	Lenovo IdeaPad Y550

 *	Lenovo IdeaPad Y550P

 *

 * Other models can be added easily. To test,

 * load with 'force' parameter set 'true'.

 *

 * LEDs blinking and input mode are managed via sysfs,

 * (hex, unsigned byte value):

 * /sys/devices/platform/ideapad_slidebar/slidebar_mode

 *

 * The value is in byte range, however, I only figured out

 * how bits 0b10011001 work. Some other bits, probably,

 * are meaningfull too.

 *

 * Possible states:

 *

 * STD_INT, ONMOV_INT, OFF_INT, LAST_POLL, OFF_POLL

 *

 * Meaning:

 *           released      touched

 * STD       'heartbeat'   lights follow the finger

 * ONMOV     no lights     lights follow the finger

 * LAST      at last pos   lights follow the finger

 * OFF       no lights     no lights

 *

 * INT       all input events are generated, interrupts are used

 * POLL      no input events by default, to get them,

 *	     send 0b10000000 (read below)

 *

 * Commands: write

 *

 * All      |  0b01001 -> STD_INT

 * possible |  0b10001 -> ONMOV_INT

 * states   |  0b01000 -> OFF_INT

 *

 *                      |  0b0 -> LAST_POLL

 * STD_INT or ONMOV_INT |

 *                      |  0b1 -> STD_INT

 *

 *                      |  0b0 -> OFF_POLL

 * OFF_INT or OFF_POLL  |

 *                      |  0b1 -> OFF_INT

 *

 * Any state |   0b10000000 ->  if the slidebar has updated data,

 *				produce one input event (last position),

 *				switch to respective POLL mode

 *				(like 0x0), if not in POLL mode yet.

 *

 * Get current state: read

 *

 * masked by 0x11 read value means:

 *

 * 0x00   LAST

 * 0x01   STD

 * 0x10   OFF

 * 0x11   ONMOV

 We are only interested in data coming form KBC port */

 Scancodes: e03b on move, e0bb on release. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2010, Lars-Peter Clausen <lars@metafoo.de>

 *  PWM beeper driver

 Sync up PWM state and ensure it is off. */

	/*

	 * Spinlock is taken here is not to protect write to

	 * beeper->suspended, but to ensure that pwm_beeper_event

	 * does not re-submit work once flag is set.

 Let worker figure out if we should resume beeping */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ADXL345/346 Three-Axis Digital Accelerometers

 *

 * Enter bugs at http://blackfin.uclinux.org/

 *

 * Copyright (C) 2009 Michael Hennerich, Analog Devices Inc.

 ADXL345/6 Register Map */

 R   Device ID */

 R/W Tap threshold */

 R/W X-axis offset */

 R/W Y-axis offset */

 R/W Z-axis offset */

 R/W Tap duration */

 R/W Tap latency */

 R/W Tap window */

 R/W Activity threshold */

 R/W Inactivity threshold */

 R/W Inactivity time */

 R/W Axis enable control for activity and */

 inactivity detection */

 R/W Free-fall threshold */

 R/W Free-fall time */

 R/W Axis control for tap/double tap */

 R   Source of tap/double tap */

 R/W Data rate and power mode control */

 R/W Power saving features control */

 R/W Interrupt enable control */

 R/W Interrupt mapping control */

 R   Source of interrupts */

 R/W Data format control */

 R   X-Axis Data 0 */

 R   X-Axis Data 1 */

 R   Y-Axis Data 0 */

 R   Y-Axis Data 1 */

 R   Z-Axis Data 0 */

 R   Z-Axis Data 1 */

 R/W FIFO control */

 R   FIFO status */

 R   Sign and source for tap/double tap */

 Orientation ADXL346 only */

 R/W Orientation configuration */

 R   Orientation status */

 DEVIDs */

 INT_ENABLE/INT_MAP/INT_SOURCE Bits */

 ACT_INACT_CONTROL Bits */

 TAP_AXES Bits */

 ACT_TAP_STATUS Bits */

 BW_RATE Bits */

 POWER_CTL Bits */

 DATA_FORMAT Bits */

/*

 * Maximum value our axis may get in full res mode for the input device

 * (signed 13 bits)

/*

 * Maximum value our axis may get in fixed res mode for the input device

 * (signed 10 bits)

 FIFO_CTL Bits */

 FIFO_STATUS Bits */

 TAP_SIGN Bits ADXL346 only */

 ORIENT_CONF ADXL346 only */

 ORIENT ADXL346 only */

 +X */

 -X */

 +Y */

 -Y */

 +X */

 -X */

 +Y */

 -Y */

 +Z */

 -Z */

 reentrant protection for struct */

 P: mutex */

 P: mutex */

 P: mutex */

 EV_REL */

 EV_REL */

 EV_REL */

 EV_KEY {x,y,z} */

	/*

	 * ACT_TAP_STATUS should be read before clearing the interrupt

	 * Avoid reading ACT_TAP_STATUS in case TAP detection is disabled

	/*

	 * ORIENTATION SENSING ADXL346 only

 Report orientation only when it changes */

 Report orientation only when it changes */

			/*

			 * To ensure that the FIFO has

			 * completely popped, there must be at least 5 us between

			 * the end of reading the data registers, signified by the

			 * transition to register 0x38 from 0x37 or the CS pin

			 * going high, and the start of new reads of the FIFO or

			 * reading the FIFO_STATUS register. For SPI operation at

			 * 1.5 MHz or lower, the register addressing portion of the

			 * transmission is sufficient delay to ensure the FIFO has

			 * completely popped. It is necessary for SPI operation

			 * greater than 1.5 MHz to de-assert the CS pin to ensure a

			 * total of 5 us, which is at most 3.4 us at 5 MHz

			 * operation.

	/*

	 * A '0' places the ADXL34x into standby mode

	 * with minimum power consumption.

	/*

	 * Hardware offset calibration has a resolution of 15.6 mg/LSB.

	 * We use HW calibration and handle the remaining bits in SW. (4mg/LSB)

	/*

	 * This allows basic ADXL register write access for debug purposes.

 EV_ABS */

 Signed 13-bit */

 Signed 10-bit */

 Map all INTs to INT2 */

 Map all INTs to INT1 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Input driver for PCAP events:

 *   * Power key

 *   * Headphone button

 *

 *  Copyright (c) 2008,2009 Ilya Petrov <ilya.muromec@gmail.com>

 PCAP2 interrupts us on keypress */

/**

 * twl4030-pwrbutton.c - TWL4030 Power Button Input Driver

 *

 * Copyright (C) 2008-2009 Nokia Corporation

 *

 * Written by Peter De Schrijver <peter.de-schrijver@nokia.com>

 * Several fixes by Felipe Balbi <felipe.balbi@nokia.com>

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Cobalt button interface driver.

 *

 *  Copyright (C) 2007-2008  Yoichi Yuasa <yuasa@linux-mips.org>

 msec */

 work with hotplug and coldplug */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DRV2665 haptics driver family

 *

 * Author: Dan Murphy <dmurphy@ti.com>

 *

 * Copyright: (C) 2015 Texas Instruments, Inc.

 Contol registers */

 Status Register */

 Control 1 Register */

 Control 2 Register */

/**

 * struct drv2665_data -

 * @input_dev: Pointer to the input device

 * @client: Pointer to the I2C client

 * @regmap: Register map of the device

 * @work: Work item used to off load the enable/disable of the vibration

 * @regulator: Pointer to the regulator for the IC

 8kHz Sine wave to stream to the FIFO */

/*

 * axp20x power button driver.

 *

 * Copyright (C) 2013 Carlo Caione <carlo@caione.org>

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the

 * GNU General Public License for more details.

	/*

	 * The power-button is connected to ground so a falling edge (dbf)

	 * means it is pressed.

		/*

		 * On Cherry Trail platforms (hrv == 3), do not register the

		 * input device if there is an "INTCFD9" or "ACPI0011" gpio

		 * button ACPI device, as that handles the power button too,

		 * and otherwise we end up reporting all presses twice.

	/*

	 * As nested threaded IRQs are not automatically disabled during

	 * suspend, we must explicitly disable non-wakeup IRQs.

	/*

	 * Clear interrupts from button presses during suspend, to avoid

	 * a wakeup power-button press getting reported to userspace.

 sentinel */ }

/*

 * HP i8042 SDC + MSM-58321 BBRTC driver.

 *

 * Copyright (c) 2001 Brian S. Julin

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL").

 *

 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR

 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 *

 * References:

 * System Device Controller Microprocessor Firmware Theory of Operation

 *      for Part Number 1820-4784 Revision B.  Dwg No. A-1820-4784-2

 * efirtc.c by Stephane Eranian/Hewlett Packard

 *

 write i8042[0x70] */

 BBRTC reg address */

 Trigger command   */

 expect 1 stat/dat pair back.   */

 buffer for stat/dat pair       */

 Put ourselves to sleep for results. */

 Check for nonpresence of BBRTC */

 MSM-58321 has no read latch, so must read twice and compare. */

 numreg assumed > 1 */

 Sleep if output regs in use. */

 Sleep until results come back. */

 Read the i8042 real-time clock */

 Read the i8042 fast handshake timer */

 Read the i8042 match timer (a.k.a. alarm) */

 Read the i8042 delay timer */

 Read the i8042 cycle timer (a.k.a. periodic) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DRV260X haptics driver family

 *

 * Author: Dan Murphy <dmurphy@ti.com>

 *

 * Copyright:   (C) 2014 Texas Instruments, Inc.

 Library Selection */

 Mode register */

 Audio to Haptics Control */

 Min/Max Input/Output Voltages */

 Feedback register */

 Control 1 register */

 Control 2 register */

 Control 3 Register */

 Control 4 Register */

/**

 * struct drv260x_data -

 * @input_dev: Pointer to the input device

 * @client: Pointer to the I2C client

 * @regmap: Register map of the device

 * @work: Work item used to off load the enable/disable of the vibration

 * @enable_gpio: Pointer to the gpio used for enable/disabling

 * @regulator: Pointer to the regulator for the IC

 * @magnitude: Magnitude of the vibration event

 * @mode: The operating mode of the IC (LRA_NO_CAL, ERM or LRA)

 * @library: The vibration library to be used

 * @rated_voltage: The rated_voltage of the actuator

 * @overdrive_voltage: The over drive voltage of the actuator

/*

 * Rated and Overdriver Voltages:

 * Calculated using the formula r = v * 255 / 5.6

 * where r is what will be written to the register

 * and v is the rated or overdriver voltage of the actuator

 Data sheet says to wait 250us before trying to communicate */

 No need to set GO bit here */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010-2011, 2020-2021, The Linux Foundation. All rights reserved.

 * Copyright (c) 2014, Sony Mobile Communications Inc.

 PMICs with revision 0 have the enable bit in same register as ctrl */

	/*

	 * Updates of PON_PS_HOLD_ENABLE requires 3 sleep cycles between

	 * writes.

		/*

		 * We failed to get regmap for parent. Let's see if we are

		 * a child of pon node and read regmap and reg from its

		 * parent.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * drivers/usb/input/yealink.c

 *

 * Copyright (c) 2005 Henk Vergonet <Henk.Vergonet@gmail.com>

/*

 * Description:

 *   Driver for the USB-P1K voip usb phone.

 *   This device is produced by Yealink Network Technology Co Ltd

 *   but may be branded under several names:

 *	- Yealink usb-p1k

 *	- Tiptel 115

 *	- ...

 *

 * This driver is based on:

 *   - the usbb2k-api	http://savannah.nongnu.org/projects/usbb2k-api/

 *   - information from	http://memeteau.free.fr/usbb2k

 *   - the xpad-driver	drivers/input/joystick/xpad.c

 *

 * Thanks to:

 *   - Olivier Vandorpe, for providing the usbb2k-api.

 *   - Martin Diehl, for spotting my memory allocation bug.

 *

 * History:

 *   20050527 henk	First version, functional keyboard. Keyboard events

 *			will pop-up on the ../input/eventX bus.

 *   20050531 henk	Added led, LCD, dialtone and sysfs interface.

 *   20050610 henk	Cleanups, make it ready for public consumption.

 *   20050630 henk	Cleanups, fixes in response to comments.

 *   20050701 henk	sysfs write serialisation, fix potential unload races

 *   20050801 henk	Added ringtone, restructure USB

 *   20050816 henk	Merge 2.6.13-rc6

 in [Hz] */

/*

 * Register the LCD segment and icon map

 input device */

 usb device */

 usb interface */

 irq input channel */

 control output channel */

 physical device path */

 state of LCD, LED ... */

 last reported key	 */

/*******************************************************************************

 * Yealink lcd interface

/*

 * Register a default 7 segment character set

 /* Display a char,

  * char '\9' and '\n' are placeholders and do not overwrite the original text.

  * A space will always hide an icon.

/*******************************************************************************

 * Yealink key interface

/* Map device buttons to internal key events.

 *

 * USB-P1K button layout:

 *

 *             up

 *       IN           OUT

 *            down

 *

 *     pickup   C    hangup

 *       1      2      3

 *       4      5      6

 *       7      8      9

 *       *      0      #

 *

 * The "up" and "down" keys, are symbolised by arrows on the button.

 * The "pickup" and "hangup" keys are symbolised by a green and red phone

 * on the button.

 phone key:	*/

   IN		*/

   up		*/

   OUT	*/

   down	*/

   pickup	*/

  C		*/

   hangup	*/

   1		*/

   2 		*/

   3		*/

   4		*/

   5		*/

   6		*/

   7		*/

   8		*/

   9		*/

 *		*/

   0		*/

   #		*/

/* Completes a request by converting the data into events for the

 * input subsystem.

 *

 * The key parameter can be cascaded: key2 << 8 | key1

 old key up */

 new valid key */

/*******************************************************************************

 * Yealink usb communication interface

 volume [0-255] */

 1250 [hz], 12/100 [s] */

 1000 [hz], 12/100 [s] */

 silent, 400/100 [s] */

 end of sequence */

 Set the ringtone volume */

/* keep stat_master & stat_copy in sync.

 If state update pointer wraps do a KEYPRESS first. */

 find update candidates: copy != master */

 nothing todo, wait a bit and poll for a KEYPRESS */

	/* TODO how can we wait abit. ??

	 * msleep_interruptible(1000 / YEALINK_POLLING_FREQUENCY);

 Setup an appropriate update request */

		/* Combine up to <len> consecutive LCD bytes in a singe request

/* Decide on how to handle responses

 *

 * The state transition diagram is somethhing like:

 *

 *          syncState<--+

 *               |      |

 *               |    idle

 *              \|/     |

 * init --ok--> waitForKey --ok--> getKey

 *  ^               ^                |

 *  |               +-------ok-------+

 * error,start

 *

 ask for a response */

 send new command */

/*******************************************************************************

 * input event interface

/* TODO should we issue a ringtone on a SND_BELL event?

static int input_ev(struct input_dev *dev, unsigned int type,

		unsigned int code, int value)

{



	if (type != EV_SND)

		return -EINVAL;



	switch (code) {

	case SND_BELL:

	case SND_TONE:

		break;

	default:

		return -EINVAL;

	}



	return 0;

}

 force updates to device */

 no keys pressed */

 issue INIT */

	/*

	 * Make sure the flag is seen by other CPUs before we start

	 * killing URBs so new URBs won't be submitted

/*******************************************************************************

 * sysfs interface

/* Interface to the 7-segments translation table aka. char set.

/* Interface to the LCD.

/* Reading /sys/../lineX will return the format string with its settings:

 *

 * Example:

 * cat ./line3

 * 888888888888

 * Linux Rocks!

/* Writing to /sys/../lineX will set the coresponding LCD line.

 * - Excess characters are ignored.

 * - If less characters are written than allowed, the remaining digits are

 *   unchanged.

 * - The '\n' or '\t' char is a placeholder, it does not overwrite the

 *   original content.

/* Interface to visible and audible "icons", these include:

 * pictures on the LCD, the LED, and the dialtone signal.

 Get a list of "switchable elements" with their current state. */

 Change the visibility of a particular element. */

/* Upload a ringtone to the device.

 Stores raw ringtone data in the phone */

 TODO locking with async usb control interface??? */

/*******************************************************************************

 * Linux interface and usb initialisation

 allocate usb buffers */

 allocate urb structures */

 get a handle to the interrupt data pipe */

 initialise irq urb */

 initialise ctl urb */

 find out the physical bus location */

 register settings for the input device */

 input_dev->event = input_ev;	TODO */

 register available key events */

 clear visible elements */

 display driver version on LCD line 3 */

 Register sysfs hooks (don't care about failure) */

 SPDX-License-Identifier: GPL-2.0+

/*

 * DA7280 Haptic device driver

 *

 * Copyright (c) 2020 Dialog Semiconductor.

 * Author: Roy Im <Roy.Im.Opensource@diasemi.com>

 Registers */

 Register field */

 DA7280_IRQ_EVENT1 (Address 0x03) */

 DA7280_IRQ_EVENT_WARNING_DIAG (Address 0x04) */

 DA7280_IRQ_EVENT_PAT_DIAG (Address 0x05) */

 DA7280_IRQ_STATUS1 (Address 0x06) */

 DA7280_IRQ_MASK1 (Address 0x07) */

 DA7280_ACTUATOR3 (Address 0x0e) */

 DA7280_TOP_CFG1 (Address 0x13) */

 DA7280_TOP_CFG2 (Address 0x14) */

 DA7280_TOP_CFG4 (Address 0x16) */

 DA7280_TOP_INT_CFG1 (Address 0x17) */

 DA7280_TOP_CTL1 (Address 0x22) */

 DA7280_SEQ_CTL2 (Address 0x28) */

 DA7280_GPIO_0_CTL (Address 0x29) */

 DA7280_GPIO_1_CTL (Address 0x2a) */

 DA7280_GPIO_2_CTL (Address 0x2b) */

 DA7280_MEM_CTL2 (Address 0x2d) */

 DA7280_TOP_CFG5 (Address 0x6e) */

 DA7280_IRQ_MASK2 (Address 0x83) */

 Controls */

 Maximum gain is 0x7fff for PWM mode */

 The patterns should be updated when haptic is not working */

 Patterns are not updated if the lock bit is enabled */

 Set to Inactive mode to make sure safety */

		/*

		 * The interpretation of duty cycle depends on the acc_en,

		 * it should be between 50% and 100% for acc_en = 0.

		 * See datasheet 'PWM mode' section.

 the valid range check when acc_en is enabled */

 Set level as a % of ACTUATOR_NOMMAX (nommax) */

		/*

		 * The pattern will be played by the PS_SEQ_ID and the

		 * PS_SEQ_LOOP

		/*

		 * The pattern will be played by the GPI[N] state,

		 * GPI(N)_SEQUENCE_ID and the PS_SEQ_LOOP. See the

		 * datasheet for the details.

 Set to Inactive mode */

 The effect should be uploaded when haptic is not working */

 DRO/PWM modes support this type */

 RTWM/ETWM modes support this type */

		/*

		 * Load the data and check the length.

		 * the data will be patterns in this case: 4 < X <= 100,

		 * and will be saved into the waveform memory inside DA728x.

		 * If X = 2, the data will be PS_SEQ_ID and PS_SEQ_LOOP.

		 * If X = 3, the 1st data will be GPIX_SEQUENCE_ID .

	/*

	 * If there is no property, then use the mode programmed into the chip.

 If no property, set to zero as default is to do nothing. */

 GPI0~2 Control */

 Check what events have happened */

 Clear events */

		/*

		 * Stop first if haptic is active, otherwise, the fault may

		 * happen continually even though the bit is cleared.

	/*

	 * If device type is DA7280_DEV_MAX then simply use currently

	 * programmed mode.

 Apply user settings */

 Set  PS_SEQ_ID and PS_SEQ_LOOP */

 GPI(N) CTL */

 Mask ADC_SAT_M bit as default */

 Clear Interrupts */

 Sync up PWM state and ensure it is off. */

		/*

		 * Check PWM period, PWM freq = 1000000 / state.period.

		 * The valid PWM freq range: 10k ~ 250kHz.

 Initialize input device for haptic device */

	/*

	 * Make sure no new requests will be submitted while device is

	 * suspended.

/**

 * CPCAP Power Button Input Driver

 *

 * Copyright (C) 2017 Sebastian Reichel <sre@kernel.org>

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * twl4030-vibra.c - TWL4030 Vibrator driver

 *

 * Copyright (C) 2008-2010 Nokia Corporation

 *

 * Written by Henrik Saari <henrik.saari@nokia.com>

 * Updates by Felipe Balbi <felipe.balbi@nokia.com>

 * Input by Jari Vanhala <ext-jari.vanhala@nokia.com>

 MODULE ID2 */

 ForceFeedback */

 range is 0 - 0xFFFF */

 Disable LEDA & LEDB, cannot be used with vibra (PWM) */

 Powers H-Bridge and enables audio clk */

 turn H-Bridge on */

 Power down H-Bridge */

 set vibra rotation direction */

 set PWM, 1 = max, 255 = min */

** Input/ForceFeedback ***/

** Module ***/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rotary_encoder.c

 *

 * (c) 2009 Daniel Mack <daniel@caiaq.de>

 * Copyright (C) 2011 Johan Hovold <jhovold@gmail.com>

 *

 * state machine code inspired by code from Tim Ruetz

 *

 * A generic driver for rotary encoders connected to GPIO lines.

 * See file:Documentation/input/devices/rotary-encoder.rst for more information

 1 - clockwise, -1 - CCW */

 convert from gray encoding to normal */

 turning counter-clockwise */

 turning clockwise */

		/*

		 * The 'half-period' property has been deprecated, you must

		 * use 'steps-per-period' and set an appropriate value, but

		 * we still need to parse it to maintain compatibility. If

		 * neither property is present we fall back to the one step

		 * per period behavior.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Rockchip RK805 PMIC Power Key driver

 *

 * Copyright (c) 2017, Fuzhou Rockchip Electronics Co., Ltd

 *

 * Author: Joseph Chen <chenjh@rock-chips.com>

/*

 * Hisilicon PMIC powerkey driver

 *

 * Copyright (C) 2013 Hisilicon Ltd.

 * Copyright (C) 2015, 2016 Linaro Ltd.

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 the held interrupt will trigger after 4 seconds */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014, National Instruments Corp. All rights reserved.

 *

 * Driver for NI Ettus Research USRP E3x0 Button Driver

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Supports for the button array on SoC tablets originally running

 * Windows 8.

 *

 * (C) Copyright 2014 Intel Corporation

/*

 * Some of the buttons like volume up/down are auto repeat, while others

 * are not. To support both, we register two platform devices, and put

 * buttons into them based on whether the key should be auto repeat.

/*

 * Some 2-in-1s which use the soc_button_array driver have this ugly issue in

 * their DSDT where the _LID method modifies the irq-type settings of the GPIOs

 * used for the power and home buttons. The intend of this AML code is to

 * disable these buttons when the lid is closed.

 * The AML does this by directly poking the GPIO controllers registers. This is

 * problematic because when re-enabling the irq, which happens whenever _LID

 * gets called with the lid open (e.g. on boot and on resume), it sets the

 * irq-type to IRQ_TYPE_LEVEL_LOW. Where as the gpio-keys driver programs the

 * type to, and expects it to be, IRQ_TYPE_EDGE_BOTH.

 * To work around this we don't set gpio_keys_button.gpio on these 2-in-1s,

 * instead we get the irq for the GPIO ourselves, configure it as

 * IRQ_TYPE_LEVEL_LOW (to match how the _LID AML code configures it) and pass

 * the irq in gpio_keys_button.irq. Below is a list of affected devices.

		/*

		 * Acer Switch 10 SW5-012. _LID method messes with home- and

		 * power-button GPIO IRQ settings. When (re-)enabling the irq

		 * it ors in its own flags without clearing the previous set

		 * ones, leading to an irq-type of IRQ_TYPE_LEVEL_LOW |

		 * IRQ_TYPE_LEVEL_HIGH causing a continuous interrupt storm.

		/*

		 * Acer One S1003. _LID method messes with power-button GPIO

		 * IRQ settings, leading to a non working power-button.

		/*

		 * Lenovo Yoga Tab2 1051L, something messes with the home-button

		 * IRQ settings, leading to a non working home-button.

 Terminating entry */

/*

 * Get the Nth GPIO number from the ACPI object.

			/*

			 * Skip GPIO if not present. Note we deliberately

			 * ignore -EPROBE_DEFER errors here. On some devices

			 * Intel is using so called virtual GPIOs which are not

			 * GPIOs at all but some way for AML code to check some

			 * random status bits without need a custom opregion.

			 * In some cases the resources table we parse points to

			 * such a virtual GPIO, since these are not real GPIOs

			 * we do not have a driver for these so they will never

			 * show up, therefore we ignore -EPROBE_DEFER.

 See dmi_use_low_level_irq[] comment */

 These devices often use cheap buttons, use 50 ms debounce */

 Parse a single ACPI0011 _DSD button descriptor */

 First byte should be 1 (control) */

 Third byte should be collection uid */

	/*

	 * The UUID: fa6bd625-9ce8-470d-a2c7-b3ca36c4282e descriptors use HID

	 * usage page and usage codes, but otherwise the device is not HID

	 * compliant: it uses one irq per button instead of generating HID

	 * input reports and some buttons should generate wakeups where as

	 * others should not, so we cannot use the HID subsystem.

	 *

	 * Luckily all devices only use a few usage page + usage combinations,

	 * so we can simply check for the known combinations here.

 ACPI0011 _DSD btns descriptors UUID: fa6bd625-9ce8-470d-a2c7-b3ca36c4282e */

 Parse ACPI0011 _DSD button descriptors */

 Look for the Button Descriptors UUID */

 The first package describes the collection */

 First byte should be 0 (collection) */

 Third byte should be 0 (top level collection) */

 There are package.count - 1 buttons + 1 terminating empty entry */

 Parse the button descriptors */

/*

 * Definition of buttons on the tablet. The ACPI index of each button

 * is defined in section 2.8.7.2 of "Windows ACPI Design Guide for SoC

 * Platforms"

/*

 * Special device check for Surface Book 2 and Surface Pro (2017).

 * Both, the Surface Pro 4 (surfacepro3_button.c) and the above mentioned

 * devices use MSHW0040 for power and volume buttons, however the way they

 * have to be addressed differs. Make sure that we only load this drivers

 * for the correct devices by checking the OEM Platform Revision provided by

 * the _DSM method.

 get OEM Platform Revision

 valid revisions are nonzero

 get OEM platform revision

	/*

	 * If the revision is zero here, the _DSM evaluation has failed. This

	 * indicates that we have a Pro 4 or Book 1 and this driver should not

	 * be used.

/*

 * Button infos for Microsoft Surface Book 2 and Surface Pro (2017).

 * Obtained from DSDT/testing.

 Microsoft Surface Devices (5th and 6th generation) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Fujitsu Lifebook Application Panel button drive

 *

 *  Copyright (C) 2007 Stephen Hemminger <shemminger@linux-foundation.org>

 *  Copyright (C) 2001-2003 Jochen Eisinger <jochen@penguin-breeder.org>

 *

 * Many Fujitsu Lifebook laptops have a small panel of buttons that are

 * accessible via the i2c/smbus interface. This driver polls those

 * buttons and generates input events.

 *

 * For more details see:

 *	http://apanel.sourceforge.net/tech.php

 How often we poll keys - msecs */

 Magic constants in BIOS that tell about buttons */

 Result of BIOS snooping/probing -- what features are supported */

/* Poll for key changes

 *

 * Read Application keys via SMI

 *  A (0x4), B (0x8), Internet (0x2), Email (0x1).

 *

 * CD keys:

 * Forward (0x100), Rewind (0x200), Stop (0x400), Pause (0x800)

 ignore errors (due to ACPI??) */

 write back to clear latch */

 Scan the system ROM for the signature "FJKEYINF" */

 Can't fail */

 just use the first address */

 translate alternative device numbers */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2010-2011, Code Aurora Forum. All rights reserved.

/**

 * struct pm8xxx_vib - structure to hold vibrator data

 * @vib_input_dev: input device supporting force feedback

 * @work: work structure to set the vibration parameters

 * @regmap: regmap for register read/write

 * @regs: registers' info

 * @speed: speed of vibration set from userland

 * @active: state of vibrator

 * @level: level of vibration to set in the chip

 * @reg_vib_drv: regs->drv_addr register value

/**

 * pm8xxx_vib_set - handler to start/stop vibration

 * @vib: pointer to vibrator structure

 * @on: state to set

/**

 * pm8xxx_work_handler - worker to set vibration level

 * @work: pointer to work_struct

	/*

	 * pmic vibrator supports voltage ranges from 1.2 to 3.1V, so

	 * scale the level to fit into these ranges.

/**

 * pm8xxx_vib_close - callback of input close callback

 * @dev: input device pointer

 *

 * Turns off the vibrator.

/**

 * pm8xxx_vib_play_effect - function to handle vib effects.

 * @dev: input device pointer

 * @data: data of effect

 * @effect: effect to play

 *

 * Currently this driver supports only rumble effects.

 operate in manual mode */

 Turn off the vibrator */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Support for the S1 button on Routerboard 532

 *

 * Copyright (C) 2009  Phil Sutter <n0-1@freewrt.org>

 msec */

/* The S1 button state is provided by GPIO pin 1. But as this

 * pin is also used for uart input as alternate function, the

 * operational modes must be switched first:

 * 1) disable uart using set_latch_u5()

 * 2) turn off alternate function implicitly through

 *    gpio_direction_input()

 * 3) read the GPIO's current value

 * 4) undo step 2 by enabling alternate function (in this

 *    mode the GPIO direction is fixed, so no change needed)

 * 5) turn on uart again

 * The GPIO value occurs to be inverted, so pin high means

 * button is not pressed.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator haptic driver

 *

 * Copyright (c) 2014 Samsung Electronics Co., Ltd.

 * Author: Jaewon Kim <jaewon02.kim@samsung.com>

 * Author: Hyunhee Kim <hyunhee.kim@samsung.com>

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  SGI Volume Button interface driver

 *

 *  Copyright (C) 2008  Thomas Bogendoerfer <tsbogend@alpha.franken.de>

 msec */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  PWM vibrator driver

 *

 *  Copyright (C) 2017 Collabora Ltd.

 *

 *  Based on previous work from:

 *  Copyright (C) 2012 Dmitry Torokhov <dmitry.torokhov@gmail.com>

 *

 *  Based on PWM beeper driver:

 *  Copyright (C) 2010, Lars-Peter Clausen <lars@metafoo.de>

 Sync up PWM state and ensure it is off. */

 Sync up PWM state and ensure it is off. */

 Direction PWM is optional */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Wistron laptop button driver

 * Copyright (C) 2005 Miloslav Trmac <mitr@volny.cz>

 * Copyright (C) 2005 Bernhard Rosenkraenzer <bero@arklinux.org>

 * Copyright (C) 2005 Dmitry Torokhov <dtor@mail.ru>

 How often we poll keys - msecs */

 when idle */

 when a key was recently pressed */

 BIOS subsystem IDs */

 = 0; */

 = NULL; */

 BIOS interface implementation */

 BIOS routine entry point */

 Can't fail */

 The Windows driver maps 0x10000 bytes, we keep only one page... */

 BIOS calls */

 Hardware database */

 = NULL; Current key map */

 bitmask of leds present */

 Fn+F1 */

 Fn+F4 */

 Fn+F10 */

 mail button */

 www button */

 satellite dish button */

 Fn+F1 */

 Fn+F4 */

 Fn+F10 */

 mail button */

 www button */

 satelite dish button */

 Display on/off */

 3020 has been tested */

 Display selection */

 lid close */

 lid open */

 not 370 */

 unusual map */

 no mail led */

/* Wifi subsystem only activates the led. Therefore we need to pass

 * wifi event as a normal key, then userspace can really change the wifi state.

 not 620 */

 Display selection */

 Display on/off */

 Display selection */

 Display on/off */

 Display on/off */

 lid close */

 lid open */

/*

 * If your machine is not here (which is currently rather likely), please send

 * a list of buttons and their key codes (reported when loading this module

 * with force=1) and the output of dmidecode to $MODULE_AUTHOR.

 Fujitsu-Siemens Amilo Pro V2000 */

 Fujitsu-Siemens Amilo Pro Edition V3505 */

 Fujitsu-Siemens Amilo Pro Edition V8210 */

 Fujitsu-Siemens Amilo M7400 */

 Maxdata Pro 7000 DX */

 Fujitsu N3510 */

 Acer Aspire 1500 */

 Acer Aspire 1600 */

 Acer Aspire 3020 */

 Acer Aspire 5020 */

 Acer TravelMate 2100 */

 Acer TravelMate 2410 */

 Acer TravelMate C300 */

 Acer TravelMate C100 */

 Acer TravelMate C110 */

 Acer TravelMate 380 */

 Acer TravelMate 370 */

 keyboard minus 1 key */

 Acer TravelMate 220 */

 Acer TravelMate 260 */

 Acer TravelMate 230 */

 acerhk looks for "TravelMate F4..." ?! */

 Acer TravelMate 280 */

 Acer TravelMate 240 */

 Acer TravelMate 250 */

 Acer TravelMate 2424NWXCi */

 Acer TravelMate 350 */

 Acer TravelMate 360 */

 Acer TravelMate 610 */

 Acer TravelMate 620 */

 Acer TravelMate 630 */

 AOpen 1559AS */

 Medion MD 9783 */

 Medion MD 40100 */

 Medion MD 2900 */

 Medion MD 42200 */

 Medion MD 96500 */

 Medion MD 95400 */

 Fujitsu Siemens Amilo D7820 */

 not sure */

 Fujitsu Siemens Amilo D88x0 */

 Copy the good keymap, as the original ones are free'd */

 Input layer interface */

 led management */

 same as setting up wifi card, but for laptops on which the led is managed */

 bios_get_default_setting(MAIL) always retuns 0, so just turn the led off */

 Flush stale event queue */

 Increase poll frequency if user is currently pressing keys (< 2s ago) */

 if wifi or bluetooth are not available, create normal keys */

 Driver core */

/*

 * 88pm860x_onkey.c - Marvell 88PM860x ONKEY driver

 *

 * Copyright (C) 2009-2010 Marvell International Ltd.

 *      Haojian Zhuang <haojian.zhuang@marvell.com>

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 88PM860x gives us an interrupt when ONKEY is held */

 Enable 8-second long onkey detection */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for PC-speaker like devices found on various Sparc systems.

 *

 *  Copyright (c) 2002 Vojtech Pavlik

 *  Copyright (c) 2002, 2006, 2008 David S. Miller (davem@davemloft.net)

 enable counter 2 */

 set command for counter 2, 2 byte write */

 select desired HZ */

 disable counter 2 */

 turn off the speaker */

 turn off the speaker */

 turn off the speaker */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Arizona haptics driver

 *

 * Copyright 2012 Wolfson Microelectronics plc

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 This enable sequence will be a noop if already enabled */

 This disable sequence will be a noop if already enabled */

 Scale the magnitude into the range the device supports */

/*

 * Retu power button driver.

 *

 * Copyright (C) 2004-2010 Nokia Corporation

 *

 * Original code written by Ari Saastamoinen, Juha YrjÃ¶lÃ¤ and Felipe Balbi.

 * Rewritten by Aaro Koskinen.

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the

 * GNU General Public License for more details.

 SPDX-License-Identifier: GPL-2.0+



 Power Button driver for RAVE SP



 Copyright (C) 2017 Zodiac Inflight Innovations





 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OnKey device driver for DA9063, DA9062 and DA9061 PMICs

 * Copyright (C) 2015  Dialog Semiconductor Ltd.

 REGS */

 MASKS */

 NAMES */

 REGS */

 MASKS */

 NAMES */

 REGS */

 MASKS */

 NAMES */

 Poll to see when the pin is released */

	/*

	 * If the fault log KEY_RESET is detected, then clear it

	 * and shut down the system.

			/* at this point we do any S/W housekeeping

			 * and then send shutdown command

/*

 * Copyright (C) 2011 Philippe RÃ©tornaz

 *

 * Based on twl4030-pwrbutton driver by:

 *     Peter De Schrijver <peter.de-schrijver@nokia.com>

 *     Felipe Balbi <felipe.balbi@nokia.com>

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA 02110-1335  USA

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for a keypad w/16 buttons connected to a PCF8574 I2C I/O expander

 *

 * Copyright 2005-2008 Analog Devices Inc.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Spreadtrum Communications Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  m68k beeper driver for Linux

 *

 *  Copyright (c) 2002 Richard Zidlicky

 *  Copyright (c) 2002 Vojtech Pavlik

 *  Copyright (c) 1992 Orest Zborowski

 turn off the speaker */

 turn off the speaker */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MAX8997-haptic controller driver

 *

 * Copyright (C) 2012 Samsung Electronics

 * Donggeun Kim <dg77.kim@samsung.com>

 *

 * This program is not provided / owned by Maxim Integrated Products.

 Haptic configuration 2 register */

 Haptic driver configuration register */

		/*

		 * FIXME: pwm_apply_args() should be removed when switching to

		 * the atomic PWM API.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AD714X CapTouch Programmable Controller driver (I2C bus)

 *

 * Copyright 2009-2011 Analog Devices Inc.

 BUS_I2C */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2010

 *

 * Author: Sundar Iyer <sundar.iyer@stericsson.com> for ST-Ericsson

 *

 * AB8500 Power-On Key handler

/**

 * struct ab8500_ponkey - ab8500 ponkey information

 * @idev: pointer to input device

 * @ab8500: ab8500 parent

 * @irq_dbf: irq number for falling transition

 * @irq_dbr: irq number for rising transition

 AB8500 gives us an interrupt when ONKEY is held */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ADLX345/346 Three-Axis Digital Accelerometers (SPI Interface)

 *

 * Enter bugs at http://blackfin.uclinux.org/

 *

 * Copyright (C) 2009 Michael Hennerich, Analog Devices Inc.

 BUS_SPI */

 don't exceed max specified SPI CLK frequency */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2011 Bosch Sensortec GmbH

 * Copyright (c) 2011 Unixphere

 *

 * This driver adds support for Bosch Sensortec's digital acceleration

 * sensors BMA150 and SMB380.

 * The SMB380 is fully compatible with BMA150 and only differs in packaging.

 *

 * The datasheet for the BMA150 chip can be found here:

 * http://www.bosch-sensortec.com/content/language1/downloads/BST-BMA150-DS000-07.pdf

 Each axis is represented by a 2-byte data word */

 Input poll interval in milliseconds */

 Data register addresses */

 Control register addresses */

 Configuration/Setting register addresses */

 Any-motion interrupt register fields */

 Advanced interrupt register fields */

 High-G interrupt register fields */

 Low-G interrupt register fields */

/*

 * The settings for the given range, bandwidth and interrupt features

 * are stated and verified by Bosch Sensortec where they are configured

 * to provide a generic sensitivity performance.

 As per specification, disable irq in between register writes */

	/*

	 * See if runtime PM woke up the device. If runtime PM

	 * is disabled we need to do it ourselves.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * twl6040-vibra.c - TWL6040 Vibrator driver

 *

 * Author:      Jorge Eduardo Candelaria <jorge.candelaria@ti.com>

 * Author:      Misael Lopez Cruz <misael.lopez@ti.com>

 *

 * Copyright:   (C) 2011 Texas Instruments, Inc.

 *

 * Based on twl4030-vibra.c by Henrik Saari <henrik.saari@nokia.com>

 *				Felipe Balbi <felipe.balbi@nokia.com>

 *				Jari Vanhala <ext-javi.vanhala@nokia.com>

 Recommended modulation index 85% */

		/*

		 * ERRATA: Disable overcurrent protection for at least

		 * 3ms when enabling vibrator drivers to avoid false

		 * overcurrent detection

 output swing */

 50mV per VIBDAT code step */

 scale speed to max allowed code */

 2's complement for direction > 180 degrees */

 weak motor */

 strong motor */

 Do not allow effect, while the routing is set to use audio */

	/*

	 * When booted with Device tree the regulators are attached to the

	 * parent device (twl6040 MFD core)

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Atmel Atmegaxx Capacitive Touch Button Driver

 *

 * Copyright (C) 2016 Google, inc.

/*

 * It's irrelevant that the HW used to develop captouch driver is based

 * on Atmega88PA part and uses QtouchADC parts for sensing touch.

 * Calling this driver "captouch" is an arbitrary way to distinguish

 * the protocol this driver supported by other atmel/qtouch drivers.

 *

 * Captouch driver supports a newer/different version of the I2C

 * registers/commands than the qt1070.c driver.

 * Don't let the similarity of the general driver structure fool you.

 *

 * For raw i2c access from userspace, use i2cset/i2cget

 * to poke at /dev/i2c-N devices.

 Maximum number of buttons supported */

 Registers */

/*

 * @i2c_client: I2C slave device client pointer

 * @input: Input device pointer

 * @num_btn: Number of buttons

 * @keycodes: map of button# to KeyCode

 * @prev_btn: Previous key state to detect button "press" or "release"

 * @xfer_buf: I2C transfer buffer

/*

 * Read from I2C slave device

 * The protocol is that the client has to provide both the register address

 * and the length, and while reading back the device would prepend the data

 * with address and length for verification.

/*

 * Handle interrupt and report the key changes to the input system.

 * Multi-touch can be supported; however, it really depends on whether

 * the device can multi-touch.

/*

 * Probe function to setup the device, input system and interrupt

 sentinel */ }

 Module information */

/*

 * Xen para-virtual input device

 *

 * Copyright (C) 2005 Anthony Liguori <aliguori@us.ibm.com>

 * Copyright (C) 2006-2008 Red Hat, Inc., Markus Armbruster <armbru@redhat.com>

 *

 *  Based on linux/drivers/input/mouse/sermouse.c

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License. See the file COPYING in the main directory of this archive for

 *  more details.

 current MT slot/contact ID we are injecting events in */

/*

 * Note: if you need to send out events, see xenfb_do_update() for how

 * to do that.

 Mark as autorepeat */

 ensure we see ring contents up to prod */

 ensure we got ring contents */

	/*

	 * The below are reverse logic, e.g. if the feature is set, then

	 * do not expose the corresponding virtual device.

 Direct logic: if set, then create multi-touch device. */

 keyboard */

 pointing device */

 Set input abs params to match backend screen res */

 multi-touch device */

		/*

		 * Work around xenbus race condition: If backend goes

		 * through InitWait to Connected fast enough, we can

		 * get Connected twice here.

 Missed the backend's CLOSING state */

 Nothing to do if running in dom0. */

/*

 * Texas Instruments' Palmas Power Button Input Driver

 *

 * Copyright (C) 2012-2014 Texas Instruments Incorporated - http://www.ti.com/

 *	Girish S Ghongdemath

 *	Nishanth Menon

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/**

 * struct palmas_pwron - Palmas power on data

 * @palmas:		pointer to palmas device

 * @input_dev:		pointer to input device

 * @input_work:		work for detecting release of key

 * @irq:		irq that we are hooked on to

/**

 * struct palmas_pwron_config - configuration of palmas power on

 * @long_press_time_val:	value for long press h/w shutdown event

 * @pwron_debounce_val:		value for debounce of power button

/**

 * palmas_power_button_work() - Detects the button release event

 * @work:	work item to detect button release

 The button is released, report event. */

 The button is still depressed, keep checking. */

/**

 * pwron_irq() - button press isr

 * @irq:		irq

 * @palmas_pwron:	pwron struct

 *

 * Return: IRQ_HANDLED

/**

 * palmas_pwron_params_ofinit() - device tree parameter parser

 * @dev:	palmas button device

 * @config:	configuration params that this fills up

 Default config parameters */

/**

 * palmas_pwron_probe() - probe

 * @pdev:	platform device for the button

 *

 * Return: 0 for successful probe else appropriate error

	/*

	 * Setup default hardware shutdown option (long key press)

	 * and debounce.

/**

 * palmas_pwron_remove() - Cleanup on removal

 * @pdev:	platform device for the button

 *

 * Return: 0

/**

 * palmas_pwron_suspend() - suspend handler

 * @dev:	power button device

 *

 * Cancel all pending work items for the power button, setup irq for wakeup

 *

 * Return: 0

/**

 * palmas_pwron_resume() - resume handler

 * @dev:	power button device

 *

 * Just disable the wakeup capability of irq here.

 *

 * Return: 0

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MAXIM MAX77693/MAX77843 Haptic device driver

 *

 * Copyright (C) 2014,2015 Samsung Electronics

 * Jaewon Kim <jaewon02.kim@samsung.com>

 * Krzysztof Kozlowski <krzk@kernel.org>

 *

 * This program is not provided / owned by Maxim Integrated Products.

	/*

	 * The magnitude comes from force-feedback interface.

	 * The formula to convert magnitude to pwm_duty as follows:

	 * - pwm_duty = (magnitude * pwm_period) / MAX_MAGNITUDE(0xFFFF)

 Variant-specific init */

 Get pwm and regulatot for haptic device */

	/*

	 * FIXME: pwm_apply_args() should be removed when switching to the

	 * atomic PWM API.

 Initialize input device for haptic device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  User level driver support for input subsystem

 *

 * Heavily based on evdev.c by Vojtech Pavlik

 *

 * Author: Aristeu Sergio Rozanski Filho <aris@cathedrallabs.org>

 *

 * Changes/Revisions:

 *	0.4	01/09/2014 (Benjamin Tissoires <benjamin.tissoires@redhat.com>)

 *		- add UI_GET_SYSNAME ioctl

 *	0.3	09/04/2006 (Anssi Hannula <anssi.hannula@gmail.com>)

 *		- updated ff support for the changes in kernel interface

 *		- added MODULE_VERSION

 *	0.2	16/10/2004 (Micah Dowty <micah@navi.cx>)

 *		- added force feedback support

 *              - added UI_SET_PHYS

 *	0.1	20/06/2002

 *		- first public version

 UI_FF_UPLOAD, UI_FF_ERASE */

 Atomically allocate an ID for the given request. Returns 0 on success. */

 Find an input request, by ID. Returns NULL if the ID isn't valid. */

 Allocate slot. If none are available right away, wait. */

 Mark slot as available */

	/*

	 * Tell our userspace application about this new request

	 * by queueing an input event.

/*

 * Fail all outstanding requests so handlers don't wait for the userspace

 * to finish processing them.

	/*

	 * uinput driver does not currently support periodic effects with

	 * custom waveform since it does not have a way to pass buffer of

	 * samples (custom_data) to userspace. If ever there is a device

	 * supporting custom waveforms we would need to define an additional

	 * ioctl (UI_UPLOAD_SAMPLES) but for now we just bail out.

	/*

	 * If we are called with file == NULL that means we are tearing

	 * down the device, and therefore we can not handle FF erase

	 * requests: either we are handling UI_DEV_DESTROY (and holding

	 * the udev->mutex), or the file descriptor is closed and there is

	 * nobody on the other side anymore.

		/*

		 * The standard input_ff_flush() implementation does

		 * not quite work for uinput as we can't reasonably

		 * handle FF requests during device teardown.

	/*

	 * Check if absmin/absmax/absfuzz/absflat are sane.

 legacy setup via write() */

 Ensure name is filled in */

		/*

		 * Note that even if some events were fetched successfully

		 * we are still going to return EFAULT instead of partial

		 * count to let userspace know that it got it's buffers

		 * all wrong.

 uinput is always writable */

		/*

		 * It so happens that the pointer that gives us the trouble

		 * is the last field in the structure. Since we don't support

		 * custom waveforms in uinput anyway we can just copy the whole

		 * thing (to the compat size) and ignore the pointer.

 force terminating '\0' */

 UI_ABS_SETUP is handled in the variable size ioctls */

 Now check variable-length commands */

/*

 * These IOCTLs change their size and thus their numbers between

 * 32 and 64 bits.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * keyspan_remote: USB driver for the Keyspan DMR

 *

 * Copyright (C) 2005 Zymeta Corporation - Michael Downey (downey@zymeta.com)

 *

 * This driver has been put together with the support of Innosys, Inc.

 * and Keyspan, Inc the manufacturers of the Keyspan USB DMR product.

 Parameters that can be passed to the driver. */

 Vendor and product ids */

 Defines for converting the data from the remote. */

 5 bits for a 0 */

 6 bits for a 1 */

 14 bits for a SYNC sequence */

 5 bits for the STOP sequence */

 The UIA-11 type have a 8 byte limit. */

/*

 * Table that maps the 31 possible keycodes to input keys.

 * Currently there are 15 and 17 button models so RESERVED codes

 * are blank areas in the mapping.

 0 is just a place holder. */

 table of devices that work with this driver */

 Terminating entry */

 Structure to store all the real stuff that a remote sends to us. */

 Structure used for all the bit testing magic needed to be done. */

 Structure to hold all of our driver specific stuff */

 variables used to parse messages from remote. */

/*

 * Debug routine that prints out what we've received from the remote.

unsigned char* data)*/

/*

 * Routine that manages the bit_tester structure.  It makes sure that there are

 * at least bits_needed bits loaded into the tester.

	/*

	 * Somehow we've missed the last message. The message will be repeated

	 * though so it's not too big a deal

 Load as much as we can into the tester. */

/*

 * Routine that handles all the logic needed to parse out the message from the remote.

		/*

		 * In stage 0 we want to find the start of a message.  The remote sends a 0xFF as filler.

		 * So the first byte that isn't a FF should be the start of a new message.

		/*

		 * Stage 1 we should have 16 bytes and should be able to detect a

		 * SYNC.  The SYNC is 14 bits, 7 0's and then 7 1's.

		/*

		 * Stage 2 we should have 24 bytes which will be enough for a full

		 * message.  We need to parse out the system code, button code,

		 * toggle code, and stop.

/*

 * Routine for sending all the initialization messages to the remote.

/*

 * Routine used to handle a new message that has come in.

 Check our status in case we need to bail out early. */

 Device went away so don't keep trying to read from it. */

 we found our interrupt in endpoint */

/*

 * Routine that sets up the driver to handle a specific USB device detected on the bus.

 Set to -1 so we will always not match the toggle from the first remote message. */

	/*

	 * Initialize the URB to access the device.

	 * The urb gets sent to the device in keyspan_open()

 we can register the device now, as it is ready */

 save our data pointer in this interface device */

/*

 * Routine called when a device is disconnected from the USB.

 We have a valid driver structure so clean up everything we allocated. */

/*

 * Standard driver set up sections

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * dm355evm_keys.c - support buttons and IR remote on DM355 EVM board

 *

 * Copyright (c) 2008 by David Brownell

/*

 * The MSP430 firmware on the DM355 EVM monitors on-board pushbuttons

 * and an IR receptor used for the remote control.  When any key is

 * pressed, or its autorepeat kicks in, an event is sent.  This driver

 * read those events from the small (32 event) queue and reports them.

 *

 * Note that physically there can only be one of these devices.

 *

 * This driver was tested with firmware revision A4.

 These initial keycodes can be remapped */

	/*

	 * Pushbuttons on the EVM board ... note that the labels for these

	 * are SW10/SW11/etc on the PC board.  The left/right orientation

	 * comes only from the firmware's documentation, and presumes the

	 * power connector is immediately in front of you and the IR sensor

	 * is to the right.  (That is, rotate the board counter-clockwise

	 * by 90 degrees from the SW10/etc and "DM355 EVM" labels.)

 SW12 */

 SW13 */

 SW11 */

 SW14 */

 SW10 */

	/*

	 * IR buttons ... codes assigned to match the universal remote

	 * provided with the EVM (Philips PM4S) using DVD code 0020.

	 *

	 * These event codes match firmware documentation, but other

	 * remote controls could easily send more RC5-encoded events.

	 * The PM4S manual was used in several cases to help select

	 * a keycode reflecting the intended usage.

	 *

	 * RC5 codes are 14 bits, with two start bits (0x3 prefix)

	 * and a toggle bit (masked out below).

 NOTE: docs omit this */

 "tv/vcr/..." */

 "info" */

 "up" */

 "in/out" */

 "left" */

 "ok" */

 "right" */

 "cc" */

 "down" */

 NOTE: docs wrongly say 0x30ca */

/*

 * Because we communicate with the MSP430 using I2C, and all I2C calls

 * in Linux sleep, we use a threaded IRQ handler.  The IRQ itself is

 * active low, but we go through the GPIO controller so we can trigger

 * on falling edges and not worry about enabling/disabling the IRQ in

 * the keypress handling path.

	/* For simplicity we ignore INPUT_COUNT and just read

	 * events until we get the "queue empty" indicator.

	 * Reading INPUT_LOW decrements the count.

		/* Press and release a button:  two events, same code.

		 * Press and hold (autorepeat), then release: N events

		 * (N > 2), same code.  For RC5 buttons the toggle bits

		 * distinguish (for example) "1-autorepeat" from "1 1";

		 * but PCB buttons don't support that bit.

		 *

		 * So we must synthesize release events.  We do that by

		 * mapping events to a press/release event pair; then

		 * to avoid adding extra events, skip the second event

		 * of each pair.

 ignore the RC5 toggle bit */

 find the key, or report it as unknown */

 report press + release */

----------------------------------------------------------------------*/

 REVISIT:  flush the event queue? */

 set up "threaded IRQ handler" */

 register */

/* REVISIT:  add suspend/resume when DaVinci supports it.  The IRQ should

 * be able to wake up the system.  When device_may_wakeup(&pdev->dev), call

 * enable_irq_wake() on suspend, and disable_irq_wake() on resume.

/*

 * I2C is used to talk to the MSP430, but this platform device is

 * exposed by an MFD driver that manages I2C communications.

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2018 BayLibre SAS

 Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>



 ONKEY driver for MAXIM 77650/77651 charger/power-supply.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Generic GPIO beeper driver

 *

 * Copyright (C) 2013-2014 Alexander Shiyan <shc_work@mail.ru>

 Schedule work to actually turn the beeper on or off */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * VTI CMA3000_D0x Accelerometer driver

 *

 * Copyright (C) 2010 Texas Instruments

 * Author: Hemanth V <hemanthv@ti.com>

 Settling time delay in ms */

 Delay for clearing interrupt in us */

/*

 * Bit weights in mg for bit 0, other bits need

 * multiply factor 2^n. Eight bit is the sign bit.

/*

 * Conversion for each of the eight modes to g, depending

 * on G range i.e 2G or 8G. Some modes always operate in

 * 8G.

 Data in 2's complement, convert to mg */

 Check if free fall is detected, report immediately */

 Interrupt not for this device */

 Decode register values to milli g */

 Reset sequence */

 Settling time delay */

 if no IRQ return error */

 SPDX-License-Identifier: GPL-2.0-or-later

/* NXP PCF50633 Input Driver

 *

 * (C) 2006-2008 by Openmoko, Inc.

 * Author: Balaji Rao <balajirrao@openmoko.org>

 * All rights reserved.

 *

 * Broken down from monstrous PCF50633 driver mainly by

 * Harald Welte, Andy Green and Werner Almesberger

 We report only one event depending on the key press status */

/*

 * MAX8925 ONKEY driver

 *

 * Copyright (C) 2009 Marvell International Ltd.

 *      Haojian Zhuang <haojian.zhuang@marvell.com>

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 0/1 -- up/down */

/*

 * MAX8925 gives us an interrupt when ONKEY is pressed or released.

 * max8925_set_bits() operates I2C bus and may sleep. So implement

 * it in thread IRQ handler.

 Enable hardreset to halt if system isn't shutdown on time */

/*

 * Copyright (C) 2016 Texas Instruments Incorporated - http://www.ti.com/

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * A generic driver to read multiple gpio lines and translate the

 * encoded numeric value into an input event.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Azoteq IQS269A Capacitive Touch Controller

 *

 * Copyright (C) 2020 Jeff LaBundy <jeff@labundy.com>

 *

 * This driver registers up to 3 input devices: one representing capacitive or

 * inductive keys as well as Hall-effect switches, and one for each of the two

 * axial sliders presented by the device.

	/*

	 * Volunteer all active channels to participate in ATI when REDO-ATI is

	 * manually triggered.

	/*

	 * Configure the device to automatically switch between normal and low-

	 * power modes as a function of sensing activity. Ultra-low-power mode,

	 * if enabled, is reserved for suspend.

	/*

	 * As per the datasheet, enable streaming during normal-power mode if

	 * either slider is in use. In that case, the device returns to event

	 * mode during low-power mode.

	/*

	 * The REDO-ATI and ATI channel selection fields must be written in the

	 * same block write, so every field between registers 0x80 through 0x8B

	 * (inclusive) must be written as well.

			/*

			 * Hall-effect sensing repurposes a pair of dedicated

			 * channels, only one of which reports events.

	/*

	 * The device resets itself if its own watchdog bites, which can happen

	 * in the event of an I2C communication error. In this case, the device

	 * asserts a SHOW_RESET interrupt and all registers must be restored.

		/*

		 * Report BTN_TOUCH if any channel that participates in the

		 * slider is in a state of touch.

	/*

	 * The device does not deassert its interrupt (RDY) pin until shortly

	 * after receiving an I2C stop condition; the following delay ensures

	 * the interrupt handler does not return before this time.

	/*

	 * Unsolicited I2C communication prompts the device to assert its RDY

	 * pin, so disable the interrupt line until the operation is finished

	 * and RDY has been deasserted.

	/*

	 * Automatic power mode switching must be disabled before the device is

	 * forced into any particular power mode. In this case, the device will

	 * transition into normal-power mode.

	/*

	 * The following check ensures the device has completed its transition

	 * into normal-power mode before a manual mode switch is performed.

	/*

	 * This last check ensures the device has completed its transition into

	 * the desired power mode to prevent any spurious interrupts from being

	 * triggered after iqs269_suspend has already returned.

	/*

	 * This check ensures the device has returned to normal-power mode

	 * before automatic power mode switching is re-enabled.

	/*

	 * This step reports any events that may have been "swallowed" as a

	 * result of polling PWR_MODE (which automatically acknowledges any

	 * pending interrupts).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DRV2667 haptics driver family

 *

 * Author: Dan Murphy <dmurphy@ti.com>

 *

 * Copyright: (C) 2014 Texas Instruments, Inc.

 Contol registers */

 Waveform sequencer */

 RAM fields */

 RAM Header addresses */

 RAM data addresses */

 Control 1 Register */

 Control 2 Register */

 RAM Envelope settings */

/**

 * struct drv2667_data -

 * @input_dev: Pointer to the input device

 * @client: Pointer to the I2C client

 * @regmap: Register map of the device

 * @work: Work item used to off load the enable/disable of the vibration

 * @regulator: Pointer to the regulator for the IC

 * @page: Page number

 * @magnitude: Magnitude of the vibration event

 * @frequency: Frequency of the vibration event

	/* Per the data sheet:

	 * Sinusoid Frequency (Hz) = 7.8125 x Frequency

 Reset back to original page */

 Set default haptic frequency to 195Hz on Page 1*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ON pin driver for Dialog DA9052 PMICs

 *

 * Copyright(c) 2012 Dialog Semiconductor Ltd.

 *

 * Author: David Dajun Chen <dchen@diasemi.com>

		/*

		 * Since interrupt for deassertion of ONKEY pin is not

		 * generated, onkey event state determines the onkey

		 * button state.

		/*

		 * Interrupt is generated only when the ONKEY pin

		 * is asserted.  Hence the deassertion of the pin

		 * is simulated through work queue.

 SPDX-License-Identifier: GPL-2.0+

/*

 *  GPIO vibrator driver

 *

 *  Copyright (C) 2019 Luca Weiss <luca@z3ntu.xyz>

 *

 *  Based on PWM vibrator driver:

 *  Copyright (C) 2017 Collabora Ltd.

 *

 *  Based on previous work from:

 *  Copyright (C) 2012 Dmitry Torokhov <dmitry.torokhov@gmail.com>

 *

 *  Based on PWM beeper driver:

 *  Copyright (C) 2010, Lars-Peter Clausen <lars@metafoo.de>

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PC Speaker beeper driver for Linux

 *

 *  Copyright (c) 2002 Vojtech Pavlik

 *  Copyright (c) 1992 Orest Zborowski

 set command for counter 2, 2 byte write */

 select desired HZ */

 enable counter 2 */

 disable counter 2 */

 turn off the speaker */

 turn off the speaker */

/*

 * Texas Instruments' TPS65217 and TPS65218 Power Button Input Driver

 *

 * Copyright (C) 2014 Texas Instruments Incorporated - http://www.ti.com/

 * Author: Felipe Balbi <balbi@ti.com>

 * Author: Marcin Niestroj <m.niestroj@grinn-global.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * A driver for the Griffin Technology, Inc. "PowerMate" USB controller dial.

 *

 * v1.1, (c)2002 William R Sowerbutts <will@sowerbutts.com>

 *

 * This device is a anodised aluminium knob which connects over USB. It can measure

 * clockwise and anticlockwise rotation. The dial also acts as a pushbutton with

 * a spring for automatic release. The base contains a pair of LEDs which illuminate

 * the translucent base. It rotates without limit and reports its relative rotation

 * back to the host when polled by the USB controller.

 *

 * Testing with the knob I have has shown that it measures approximately 94 "clicks"

 * for one full rotation. Testing with my High Speed Rotation Actuator (ok, it was

 * a variable speed cordless electric drill) has shown that the device can measure

 * speeds of up to 7 clicks either clockwise or anticlockwise between pollings from

 * the host. If it counts more than 7 clicks before it is polled, it will wrap back

 * to zero and start counting again. This was at quite high speed, however, almost

 * certainly faster than the human hand could turn it. Griffin say that it loses a

 * pulse or two on a direction change; the granularity is so fine that I never

 * noticed this in practice.

 *

 * The device's microcontroller can be programmed to set the LED to either a constant

 * intensity, or to a rhythmic pulsing. Several patterns and speeds are available.

 *

 * Griffin were very happy to provide documentation and free hardware for development.

 *

 * Some userspace tools are available on the web: http://sowerbutts.com/powermate/

 *

 Griffin Technology, Inc. */

 Griffin PowerMate */

 Griffin soundKnob */

 Contour Design, Inc. */

 Jog and Shuttle */

 these are the command codes we send to the device */

 these refer to bits in the powermate_device's requires_update field. */

/* at least two versions of the hardware exist, with differing payload

   sizes. the first three bytes always contain the "interesting" data in

 physical settings which are out of sync

 Callback for data arriving from the PowerMate over the USB interrupt pipe */

 success */

 this urb is terminated, clean up */

 handle updates to device state */

 Decide if we need to issue a control message and do so. Must be called with pm->lock taken */

 no updates are required */

 an update is already in progress; it'll issue this update when it completes */

		/* the powermate takes an operation and an argument for its pulse algorithm.

		   the operation can be:

		   0: divide the speed

		   1: pulse at normal speed

		   2: multiply the speed

		   the argument only has an effect for operations 0 and 2, and ranges between

		   1 (least effect) to 255 (maximum effect).



		   thus, several states are equivalent and are coalesced into one state.



		   we map this onto a range from 0 to 510, with:

		   0 -- 254    -- use divide (0 = slowest)

		   255         -- use normal speed

		   256 -- 510  -- use multiple (510 = fastest).



		   Only values of 'arg' quite close to 255 are particularly useful/spectacular.

 divide

 multiply

 normal speed

 can be any value

 fudge the bug */

	printk("powermate: %04x %04x\n", pm->configcr->wValue, pm->configcr->wIndex); */

 vendor request */

 Called when our asynchronous control message completes. We may need to issue another immediately */

 Set the LED up as described and begin the sync with the hardware if required */

 mark state updates which are required */

 Callback from the Input layer when an event arrives from userspace to configure the LED */

		/*

		    bits  0- 7: 8 bits: LED brightness

		    bits  8-16: 9 bits: pulsing speed modifier (0 ... 510); 0-254 = slower, 255 = standard, 256-510 = faster.

		    bits 17-18: 2 bits: pulse table (0, 1, 2 valid)

		    bit     19: 1 bit : pulse whilst asleep?

		    bit     20: 1 bit : pulse constantly?

 bits 0-7

 bits 8-16

 bits 17-18

 bit 19

 bit 20

 Called whenever a USB device matching one in our supported devices table is connected */

 get a handle to the interrupt data pipe */

 register our interrupt URB with the USB system */

 force an update of everything */

 set default pulse parameters

 Called when a USB device we've accepted ownership of is removed */

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Freescale's 3-Axis Accelerometer MMA8450

 *

 *  Copyright (C) 2011 Freescale Semiconductor, Inc. All Rights Reserved.

 register definitions */

 Initialize the MMA8450 chip */

 enable all events from X/Y/Z, no FIFO */

	/*

	 * Sleep mode poll rate - 50Hz

	 * System output data rate - 400Hz

	 * Full scale selection - Active, +/- 2G

/*

 * I2C init/probing/exit functions

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * Azoteq IQS626A Capacitive Touch Controller

 *

 * Copyright (C) 2020 Jeff LaBundy <jeff@labundy.com>

 *

 * This driver registers up to 2 input devices: one representing capacitive or

 * inductive keys as well as Hall-effect switches, and one for a trackpad that

 * can express various gestures.

			/*

			 * Trackpad touch events are simply described under the

			 * trackpad child node.

		/*

		 * In the case of the generic channels, the charge cycle time

		 * field doubles in size and straddles two separate registers.

	/*

	 * Enable streaming during normal-power mode if the trackpad is used to

	 * report raw coordinates instead of gestures. In that case, the device

	 * returns to event mode during low-power mode.

	/*

	 * Present the trackpad as a traditional pointing device if no gestures

	 * have been mapped to a keycode.

	/*

	 * The device resets itself if its own watchdog bites, which can happen

	 * in the event of an I2C communication error. In this case, the device

	 * asserts a SHOW_RESET interrupt and all registers must be restored.

	/*

	 * Unlike the ULP or generic channels, the Hall channel does not have a

	 * direction flag. Instead, the direction (i.e. magnet polarity) can be

	 * derived based on the sign of the 2's complement differential output.

	/*

	 * The following completion signals that ATI has finished, any initial

	 * switch states have been reported and the keypad can be registered.

			/*

			 * Momentary gestures are followed by a complementary

			 * release cycle so as to emulate a full keystroke.

	/*

	 * The device does not deassert its interrupt (RDY) pin until shortly

	 * after receiving an I2C stop condition; the following delay ensures

	 * the interrupt handler does not return before this time.

	/*

	 * The keypad may include one or more switches and is not registered

	 * until ATI is complete and the initial switch states are read.

	/*

	 * Automatic power mode switching must be disabled before the device is

	 * forced into any particular power mode. In this case, the device will

	 * transition into normal-power mode.

	/*

	 * The following check ensures the device has completed its transition

	 * into normal-power mode before a manual mode switch is performed.

	/*

	 * This last check ensures the device has completed its transition into

	 * the desired power mode to prevent any spurious interrupts from being

	 * triggered after iqs626_suspend has already returned.

	/*

	 * This check ensures the device has returned to normal-power mode

	 * before automatic power mode switching is re-enabled.

	/*

	 * This step reports any events that may have been "swallowed" as a

	 * result of polling PWR_MODE (which automatically acknowledges any

	 * pending interrupts).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AD714X CapTouch Programmable Controller driver supporting AD7142/3/7/8/7A

 *

 * Copyright 2009-2011 Analog Devices Inc.

/*

 * driver information which will be used to maintain the software flow

	/*

	 * Unlike slider/wheel/touchpad, all buttons point to

	 * same input_dev instance

/*

 * information to integrate all things which will be private data

 * of spi/i2c device

/*

 * One button can connect to multi positive and negative of CDCs

 * Multi-buttons can connect to same positive/negative of one CDC

/*

 * The response of a sensor is defined by the absolute number of codes

 * between the current CDC value and the ambient value.

/*

 * The formulae are very straight forward. It uses the sensor with the

 * highest response and the 2 adjacent ones.

 * When Sensor 0 has the highest response, only sensor 0 and sensor 1

 * are used in the calculations. Similarly when the last sensor has the

 * highest response, only the last sensor and the second last sensors

 * are used in the calculations.

 *

 * For i= idx_of_peak_Sensor-1 to i= idx_of_peak_Sensor+1

 *         v += Sensor response(i)*i

 *         w += Sensor response(i)

 * POS=(Number_of_Positions_Wanted/(Number_of_Sensors_Used-1)) *(v/w)

/*

 * To minimise the Impact of the noise on the algorithm, ADI developed a

 * routine that filters the CDC results after they have been read by the

 * host processor.

 * The filter used is an Infinite Input Response(IIR) filter implemented

 * in firmware and attenuates the noise on the CDC results after they've

 * been read by the host processor.

 * Filtered_CDC_result = (Filtered_CDC_result * (10 - Coefficient) +

 *				Latest_CDC_result * Coefficient)/10

			/* In End of Conversion interrupt mode, the AD714X

			 * continuously generates hardware interrupts.

				/* When the user lifts off the sensor, configure

				 * the AD714X back to threshold interrupt mode.

/*

 * When the scroll wheel is activated, we compute the absolute position based

 * on the sensor values. To calculate the position, we first determine the

 * sensor that has the greatest response among the 8 sensors that constitutes

 * the scrollwheel. Then we determined the 2 sensors on either sides of the

 * sensor with the highest response and we apply weights to these sensors.

/*

 * When the scroll wheel is activated, we compute the absolute position based

 * on the sensor values. To calculate the position, we first determine the

 * sensor that has the greatest response among the sensors that constitutes

 * the scrollwheel. Then we determined the sensors on either sides of the

 * sensor with the highest response and we apply weights to these sensors. The

 * result of this computation gives us the mean value.

			/* In End of Conversion interrupt mode, the AD714X

			 * continuously generates hardware interrupts.

				/* When the user lifts off the sensor, configure

				 * the AD714X back to threshold interrupt mode.

/*

 * If 2 fingers are touching the sensor then 2 peaks can be observed in the

 * distribution.

 * The arithmetic doesn't support to get absolute coordinates for multi-touch

 * yet.

/*

 * If only one finger is used to activate the touch pad then only 1 peak will be

 * registered in the distribution. This peak and the 2 adjacent sensors will be

 * used in the calculation of the absolute position. This will prevent hand

 * shadows to affect the absolute position calculation.

/*

 * To prevent distortion from showing in the absolute position, it is

 * necessary to detect the end points. When endpoints are detected, the

 * driver stops updating the status variables with absolute positions.

 * End points are detected on the 4 edges of the touchpad sensor. The

 * method to detect them is the same for all 4.

 * To detect the end points, the firmware computes the difference in

 * percent between the sensor on the edge and the adjacent one. The

 * difference is calculated in percent in order to make the end point

 * detection independent of the pressure.

 left endpoint detect */

 right endpoint detect */

 top endpoint detect */

 bottom endpoint detect */

			/* In End of Conversion interrupt mode, the AD714X

			 * continuously generates hardware interrupts.

				/* When the user lifts off the sensor, configure

				 * the AD714X back to threshold interrupt mode.

 configuration CDC and interrupts */

 clear all interrupts */

 initialize and request sw/hw resources */

 a slider uses one input_dev instance */

 a wheel uses one input_dev instance */

 a touchpad uses one input_dev instance */

 all buttons use one input node */

 resume to non-shutdown mode */

	/* make sure the interrupt output line is not low level after resume,

	 * otherwise we will get no chance to enter falling-edge irq again

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  atlas_btns.c - Atlas Wallmount Touchscreen ACPI Extras

 *

 *  Copyright (C) 2006 Jaya Kumar

 *  Based on Toshiba ACPI by John Belmonte and ASUS ACPI

 *  This work was sponsored by CIS(M) Sdn Bhd.

 button handling code */

 hookup button handler */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the VoIP USB phones with CM109 chipsets.

 *

 * Copyright (C) 2007 - 2008 Alfred E. Heggestad <aeh@db.org>

/*

 *   Tested devices:

 *	- Komunikate KIP1000

 *	- Genius G-talk

 *	- Allied-Telesis Corega USBPH01

 *	- ...

 *

 * This driver is based on the yealink.c driver

 *

 * Thanks to:

 *   - Authors of yealink.c

 *   - Thomas Reitmayr

 *   - Oliver Neukum for good review comments and code

 *   - Shaun Jackman <sjackman@gmail.com> for Genius G-talk keymap

 *   - Dmitry Torokhov for valuable input and review

 *

 * Todo:

 *   - Read/write EEPROM

 HID Registers */

 Record/Playback-mute button, Volume up/down  */

 GPI, generic registers or EEPROM_DATA0       */

 Generic registers or EEPROM_DATA1            */

 Generic registers or EEPROM_CTRL             */

 Mapping control, buzzer, SPDIF (offset 0x04) */

 GPO - General Purpose Output                 */

 Set GPIO to input/output mode                */

 SPDIF status channel or EEPROM_CTRL          */

 HID_IR0 */

 HID_OR0 */

	/* bits 7-6

	   0: HID_OR1-2 are used for GPO; HID_OR0, 3 are used for buzzer

	      and SPDIF

	   1: HID_OR0-3 are used as generic HID registers

	   2: Values written to HID_OR0-3 are also mapped to MCU_CTRL,

	      EEPROM_DATA0-1, EEPROM_CTRL (see Note)

	   3: Reserved

 up to 256 normal keys, up to 15 special key combinations */

 CM109 protocol packet */

 CM109 device structure */

 input device */

 usb device */

 irq input channel */

 control output channel */

	/*

	 * The 3 bitfields below are protected by ctl_submit_lock.

	 * They have to be separate since they are accessed from IRQ

	 * context.

 irq_urb is in flight */

 ctl_urb is in flight */

 need to issue buzz command */

 on/off */

 flags */

 This mutex protects writes to the above flags */

 physical device path */

 last reported key */

 0=new scan  1,2,4,8=scan columns  */

 Cached value of GPI (high nibble) */

/******************************************************************************

 * CM109 key interface

/* Map device buttons to internal key events.

 *

 * The "up" and "down" keys, are symbolised by arrows on the button.

 * The "pickup" and "hangup" keys are symbolised by a green and red phone

 * on the button.



 Komunikate KIP1000 Keyboard Matrix



     -> -- 1 -- 2 -- 3  --> GPI pin 4 (0x10)

      |    |    |    |

     <- -- 4 -- 5 -- 6  --> GPI pin 5 (0x20)

      |    |    |    |

     END - 7 -- 8 -- 9  --> GPI pin 6 (0x40)

      |    |    |    |

     OK -- * -- 0 -- #  --> GPI pin 7 (0x80)

      |    |    |    |



     /|\  /|\  /|\  /|\

      |    |    |    |

GPO

pin:  3    2    1    0

     0x8  0x4  0x2  0x1



 phone key:   */

   0          */

   1          */

   2          */

   3          */

   4          */

   5          */

   6          */

   7          */

   8          */

   9          */

   #          */

   *          */

   pickup     */

   hangup     */

   IN         */

   OUT        */

/*

  Contributed by Shaun Jackman <sjackman@gmail.com>



  Genius G-Talk keyboard matrix

     0 1 2 3

  4: 0 4 8 Talk

  5: 1 5 9 End

  6: 2 6 # Up

  7: 3 7 * Down

 # */

 * */

 Talk (green handset) */

 End (red handset) */

 Menu up (rocker switch) */

 Menu down (rocker switch) */

/*

 * Keymap for Allied-Telesis Corega USBPH01

 * http://www.alliedtelesis-corega.com/2/1344/1437/1360/chprd.html

 *

 * Contributed by july@nat.bg

   0          */

   1          */

   2          */

   3          */

   4          */

   5          */

   6          */

   7          */

   8          */

   9          */

   #          */

   *          */

   pickup     */

   hangup     */

   IN         */

   OUT        */

/*

 * Keymap for ATCom AU-100

 * http://www.atcom.cn/products.html 

 * http://www.packetizer.com/products/au100/

 * http://www.voip-info.org/wiki/view/AU-100

 *

 * Contributed by daniel@gimpelevich.san-francisco.ca.us

 phone key:   */

   0          */

   1          */

   2          */

   3          */

   4          */

   5          */

   6          */

   7          */

   8          */

   9          */

   #          */

   *          */

   pickup     */

   hangup     */

 left arrow   */

 right arrow  */

/*

 * Completes a request by converting the data into events for the

 * input subsystem.

 old key up */

 new valid key */

/*

 * Converts data of special key presses (volume, mute) into events

 * for the input subsystem, sends press-n-release for mute keys.

/******************************************************************************

 * CM109 usb communication interface

/*

 * IRQ handler

 Special keys */

 Scan key column */

 Any changes ? */

 ask for key data */

 URB completion will resubmit */

	/*

	 * Make sure other CPUs see this

		/*

		 * Restore buzzer state.

		 * This will also kick regular URB submission

/******************************************************************************

 * input event interface

 no keys pressed */

 issue INIT */

	/*

	 * Once we are here event delivery is stopped so we

	 * don't need to worry about someone starting buzzer

	 * again

/******************************************************************************

 * Linux interface and usb initialisation

 C-Media Electronics */

 CM109 defines range 0x0008 - 0x000f */

 table of devices that work with this driver */

 you can add more devices here with product ID 0x0008 - 0x000f */

 parameter validation in core/urb */

 parameter validation in core/urb */

 allocate usb buffers */

 allocate urb structures */

 get a handle to the interrupt data pipe */

 initialise irq urb */

 initialise ctl urb */

 find out the physical bus location */

 register settings for the input device */

 register available key events */

	/*

	 * Make sure input events don't try to toggle buzzer

	 * while we are resetting

 Load the phone keymap */

/*

 * Marvell 88PM80x ONKEY driver

 *

 * Copyright (C) 2012 Marvell International Ltd.

 * Haojian Zhuang <haojian.zhuang@marvell.com>

 * Qiao Zhou <zhouqiao@marvell.com>

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 1 .. 16 seconds */

 88PM80x gives us an interrupt when ONKEY is held */

 Enable long onkey detection */

 Set 8-second interval */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Implements I2C interface for VTI CMA300_D0x Accelerometer driver

 *

 * Copyright (C) 2010 Texas Instruments

 * Author: Hemanth V <hemanthv@ti.com>

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) STMicroelectronics 2018

 Author: Pascal Paillet <p.paillet@st.com> for STMicroelectronics.

/**

 * struct stpmic1_onkey - OnKey data

 * @input_dev:		pointer to input device

 * @irq_falling:	irq that we are hooked on to

 * @irq_rising:		irq that we are hooked on to

 interrupt is nested in a thread */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2010-2011, Code Aurora Forum. All rights reserved.

 Regulator master enable addresses */

 Regulator control registers for shutdown/reset */

 Buck CTRL register */

 Buck TEST2 registers for shutdown/reset */

 Buck TEST2 register bank 1 */

 Buck TEST2 register bank 7 */

/**

 * struct pmic8xxx_pwrkey - pmic8xxx pwrkey information

 * @key_press_irq: key press irq number

 * @regmap: device regmap

 * @shutdown_fn: shutdown configuration function

	/*

	 * Select action to perform (reset or shutdown) when PS_HOLD goes low.

	 * Also ensure that KPD, CBL0, and CBL1 pull ups are enabled and that

	 * USB charging is enabled.

/*

 * Set an SMPS regulator to be disabled in its CTRL register, but enabled

 * in the master enable register.  Also set it's pull down enable bit.

 * Take care to make sure that the output voltage doesn't change if switching

 * from advanced mode to legacy mode.

 Check if in advanced mode. */

 Determine current output voltage. */

 Round up if fine step is in use. */

 Set VLOW_SEL bit. */

 Switch to legacy mode */

 Enable locally, enable pull down, keep voltage the same. */

 Enable in master control register. */

 Disable locally and enable pull down. */

 Enable LDO in master control register. */

 Disable LDO in CTRL register and set pull down */

 When shutting down, enable active pulldowns on important rails. */

 Disable SMPS's 0,1,3 locally and set pulldown enable bits. */

 Disable LDO 21 locally and set pulldown enable bit. */

	/*

	 * Fix-up: Set regulator LDO22 to 1.225 V in high power mode. Leave its

	 * pull-down state intact. This ensures a safe shutdown.

 Enable SMPL if resetting is desired */

 Enable SMPL if resetting is desired */

 Valid range of pwr key trigger delay is 1/64 sec to 2 seconds. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AD714X CapTouch Programmable Controller driver (SPI bus)

 *

 * Copyright 2009-2011 Analog Devices Inc.

 BUS_SPI */

 bits 15:11 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ADLX345/346 Three-Axis Digital Accelerometers (I2C Interface)

 *

 * Enter bugs at http://blackfin.uclinux.org/

 *

 * Copyright (C) 2009 Michael Hennerich, Analog Devices Inc.

 BUS_I2C */

	/*

	 * The ADXL346 is backward-compatible with the ADXL345. Differences are

	 * handled by runtime detection of the device model, there's thus no

	 * need for listing the "adi,adxl346" compatible value explicitly.

	/*

	 * Deprecated, DT nodes should use one or more of the device-specific

	 * compatible values "adi,adxl345" and "adi,adxl346".

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ON pin driver for Dialog DA9055 PMICs

 *

 * Copyright(c) 2012 Dialog Semiconductor Ltd.

 *

 * Author: David Dajun Chen <dchen@diasemi.com>

		/*

		 * Onkey status bit is cleared when onkey button is released.

	/*

	 * Interrupt is generated only when the ONKEY pin is asserted.

	 * Hence the deassertion of the pin is simulated through work queue.

/*

 * wm831x-on.c - WM831X ON pin driver

 *

 * Copyright (C) 2009 Wolfson Microelectronics plc

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

/*

 * The chip gives us an interrupt when the ON pin is asserted but we

 * then need to poll to see when the pin is deasserted.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ati_remote2 - ATI/Philips USB RF remote driver

 *

 * Copyright (C) 2005-2008 Ville Syrjala <syrjala@sci.fi>

 * Copyright (C) 2007-2008 Peter Stokes <linux@dadeos.co.uk>

/*

 * ATI Remote Wonder II Channel Configuration

 *

 * The remote control can be assigned one of sixteen "channels" in order to facilitate

 * the use of multiple remote controls within range of each other.

 * A remote's "channel" may be altered by pressing and holding the "PC" button for

 * approximately 3 seconds, after which the button will slowly flash the count of the

 * currently configured "channel", using the numeric keypad enter a number between 1 and

 * 16 and then press the "PC" button again, the button will slowly flash the count of the

 * newly configured "channel".

 ATI Remote Wonder II */

 AUX1-AUX4 and PC */

 Each mode (AUX1-AUX4 and PC) can have an independent keymap. */

		/*

		 * For some incomprehensible reason the mouse pad generates

		 * events which look identical to the events from the last

		 * pressed mode key. Naturally we don't want to generate key

		 * events for the mouse pad so we filter out any subsequent

		 * events from the same mode key.

 release */

 press */

 repeat */

 No repeat for mouse buttons. */

 AUX1-AUX4 and PC generate the same scancode. */

	/*

	 * Configure receiver to only accept input from remote "channel"

	 *  channel == 0  -> Accept input from any remote channel

	 *  channel == 1  -> Only accept input from remote channel 1

	 *  channel == 2  -> Only accept input from remote channel 2

	 *  ...

	 *  channel == 16 -> Only accept input from remote channel 16

 Sanity check, first interface must have an endpoint */

 Sanity check, the device must have two interfaces */

 Sanity check, second interface must have an endpoint */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Source for:

 * Cypress TrueTouch(TM) Standard Product (TTSP) SPI touchscreen driver.

 * For use with Cypress Txx4xx parts.

 * Supported parts include:

 * TMA4XX

 * TMA1036

 *

 * Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.

 * Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>

 * Copyright (C) 2013 Cypress Semiconductor

 *

 * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>

 r/~w */

 from TRM *A protocol */

	/*

	  We set both TX and RX buffers because Cypress TTSP

	  requires full duplex operation.

		/*

		 * do not return here since was a bad ACK sequence

		 * let the following ACK check handle any errors and

		 * allow silent retries

 Set up SPI*/

/*

 * Touchscreen driver for the tps6507x chip.

 *

 * Copyright (c) 2009 RidgeRun (todd.fischer@ridgerun.com)

 *

 * Credits:

 *

 *    Using code from tsc2007, MtekVision Co., Ltd.

 *

 * For licencing details see kernel-base/COPYING

 *

 * TPS65070, TPS65073, TPS650731, and TPS650732 support

 * 10 bit touch screen interface.

 ms */

 Route input signal to A/D converter */

 Start A/D conversion */

/* Need to call tps6507x_adc_standby() after using A/D converter for the

 * touch screen interrupt to work properly.

	/*

	 * tps_board points to pmic related constants

	 * coming from the board-evm file.

	/*

	 * init_data points to array of regulator_init structures

	 * coming from the board-evm file.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016 Golden Delicious Comp. GmbH&Co. KG

 *	Nikolaus Schaller <hns@goldelico.com>

 Ohms? */

 Prepare for next touch reading - power down ADC, enable PENIRQ */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Penmount serial touchscreen driver

 *

 * Copyright (c) 2006 Rick Koch <n1gp@hotmail.com>

 * Copyright (c) 2011 John Sung <penmount.touch@gmail.com>

 *

 * Based on ELO driver (drivers/input/touchscreen/elo.c)

 * Copyright (c) 2004 Vojtech Pavlik

/*

 * Definitions & global arrays.

/*

 * Multi-touch slot

 is the touch valid? */

/*

 * Per-touchscreen data.

/*

 * pm_mtevent() sends mt events and also emulates pointer movement

/*

 * pm_checkpacket() checks if data packet is valid

/*

 * pm_disconnect() is the opposite of pm_connect()

/*

 * pm_connect() is the routine that is called when someone adds a

 * new serio device that supports PenMount protocol and registers it as

 * an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the Freescale Semiconductor MC13783 touchscreen.

 *

 * Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.

 * Copyright (C) 2009 Sascha Hauer, Pengutronix

 *

 * Initial development of this code was funded by

 * Phytec Messtechnik GmbH, http://www.phytec.de/

	/*

	 * Kick off reading coordinates. Note that if work happens already

	 * be queued for future execution (it rearms itself) it will not

	 * be rescheduled for immediate execution here. However the rearm

	 * delay is HZ / 50 which is acceptable.

	/*

	 * the values are 10-bit wide only, but the two least significant

	 * bits are for future 12 bit use and reading yields 0

 report the median coordinate and average pressure */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Atmel maXTouch Touchscreen driver

 *

 * Copyright (C) 2010 Samsung Electronics Co.Ltd

 * Copyright (C) 2011-2014 Atmel Corporation

 * Copyright (C) 2012 Google, Inc.

 * Copyright (C) 2016 Zodiac Inflight Innovations

 *

 * Author: Joonyoung Shim <jy0922.shim@samsung.com>

 Firmware files */

 Registers */

 Object types */

 MXT_GEN_MESSAGE_T5 object */

 MXT_GEN_COMMAND_T6 field */

 Define for T6 status byte */

 MXT_GEN_POWER_T7 field */

 MXT_TOUCH_MULTI_T9 field */

 MXT_TOUCH_MULTI_T9 status */

 MXT_TOUCH_MULTI_T9 orient */

 MXT_SPT_COMMSCONFIG_T18 */

 MXT_DEBUG_DIAGNOSTIC_T37 */

 Define for MXT_GEN_COMMAND_T6 */

 T100 Multiple Touch Touchscreen */

 Delay times */

 msec */

 msec */

 msec */

 msec */

 msec */

 msec */

 msec */

 msec */

 msec */

 Command to unlock bootloader */

 Bootloader mode status */

 valid 7 6 bit only */

 valid 7 6 bit only */

 valid 7 8 bit only */

 Touchscreen absolute values */

 Config update context */

 Each client has this additional data */

 device physical location */

 Cached parameters from object table */

 for fw update in bootloader */

 for reset handling */

 for config update handling */

 Chips after 1664S use different scheme */

 for normal case */

 Check app crc fail mode */

		/*

		 * In application update mode, the interrupt

		 * line signals state transitions. We must wait for the

		 * CHG assertion before reading the status byte.

		 * Once the status byte has been read, the line is deasserted.

			/*

			 * TODO: handle -ERESTARTSYS better by terminating

			 * fw update process before returning to userspace

			 * by writing length 0x000 to device (iff we are in

			 * WAITING_FRAME_DATA state).

 Write register */

 Read data */

 Detect reset */

 Output debug if status has changed */

 Save current status */

 Active-low switch */

 Handle 10/12 bit switching */

		/*

		 * Multiple bits may be set if the host is slow to read

		 * the status messages, indicating all the events that

		 * have happened.

 if active, pressure must be non-zero */

 Touch active */

 Touch no longer active, close out slot */

 ignore SCRSTATUS events */

			/*

			 * Passive stylus is reported with size zero so

			 * hardcode.

 Ignore suppressed touch */

	/*

	 * Values reported should be non-zero if tool is touching the

	 * device

 close out slot */

		/*

		 * Do not report events if input device

		 * is not yet registered.

 Safety check for msg_buf */

 Process remaining messages if necessary */

 return number of messages read */

 Read T44 and T5 together */

	/*

	 * This condition may be caused by the CHG line being configured in

	 * Mode 0. It results in unnecessary I2C operations but it is benign.

 Process first message */

 Process remaining messages if necessary */

 Read messages until we force an invalid */

 include final invalid message */

 if there were invalid messages, then we are done */

 keep reading two msgs until one is invalid or reportid limit */

 bootloader state transition completion */

 Ignore CHG line for 100ms after reset */

	/*

	 * On failure, CRC is set to 0 and config will always be

	 * downloaded.

	/*

	 * Wait for crc message. On failure, CRC is set to 0 and config will

	 * always be downloaded.

 if len is odd, fill the last byte with 0 */

 Mask to 24-bit */

 Read type, instance, length */

 EOF */

 Skip object */

			/*

			 * Either we are in fallback mode due to wrong

			 * config or config from a later fw version,

			 * or the file is corrupt or hand-edited.

			/*

			 * If firmware is upgraded, new bytes may be added to

			 * end of objects. It is generally forward compatible

			 * to zero these bytes - previous behaviour will be

			 * retained. However this does invalidate the CRC and

			 * will force fallback mode until the configuration is

			 * updated. We warn here but do nothing else - the

			 * malloc has zeroed the entire configuration.

 Write configuration as blocks */

/*

 * mxt_update_cfg - download configuration to chip

 *

 * Atmel Raw Config File Format

 *

 * The first four lines of the raw config file contain:

 *  1) Version

 *  2) Chip ID Information (first 7 bytes of device memory)

 *  3) Chip Information Block 24-bit CRC Checksum

 *  4) Chip Configuration 24-bit CRC Checksum

 *

 * The rest of the file consists of one line per object instance:

 *   <TYPE> <INSTANCE> <SIZE> <CONTENTS>

 *

 *   <TYPE> - 2-byte object type as hex

 *   <INSTANCE> - 2-byte object instance number as hex

 *   <SIZE> - 2-byte object size as hex

 *   <CONTENTS> - array of <SIZE> 1-byte hex values

 Make zero terminated copy of the OBP_RAW file */

 Load information block and check */

 Read CRCs */

	/*

	 * The Info Block CRC is calculated over mxt_info and the object

	 * table. If it does not match then we are trying to load the

	 * configuration from a different chip or firmware version, so

	 * the configuration CRC is invalid anyway.

 Malloc memory to store configuration */

 Calculate crc of the received configs (not the raw config file) */

 T7 config may have changed */

 Valid Report IDs start counting from 1 */

				/*

				 * On mXT224 firmware versions prior to V2.0

				 * read and discard unused CRC byte otherwise

				 * DMA reads are misaligned.

 CRC not enabled, so skip last byte */

 Only handle messages from first T9 instance */

 first two report IDs reserved */

 Store maximum reportid */

 If T44 exists, T5 position has to be directly after */

 If info block already allocated, free it */

 Read 7-byte ID information block starting at address 0 */

 Resize buffer to give space for rest of info block */

 Read rest of info block */

 Extract & calculate checksum */

	/*

	 * CRC mismatch can be caused by data corruption due to I2C comms

	 * issue or else device is not using Object Based Protocol (eg i2c-hid)

 Parse object table information */

 read touchscreen dimensions */

 read orientation config */

 allocate aux bytes */

 Handle default values and orientation switch */

 Register input device */

 For single touch */

 If device has buttons we assume it is a touchpad */

 For multi touch */

 Check bootloader state */

 Chip is not in appmode or bootloader mode */

 OK, we are in bootloader, see if we can recover */

			/*

			 * We can reflash from this state, so do not

			 * abort initialization.

 Attempt to exit bootloader into app mode */

 Handle orientation */

 Next value */

 Read back command byte */

 Field is cleared once the command has been processed */

 Read T37 page */

 For remaining pages, write PAGEUP rather than mode */

 V4L2 structures */

 Calculate size of data and allocate buffer */

 init channel to zero */

 register video device */

 initialize the queue */

 Firmware Version is returned as Major.Minor.Build */

 Hardware Version is returned as FamilyID.VariantID */

 Pre-allocate buffer large enough to hold max sized object. */

	/*

	 * To convert file try:

	 * xxd -r -p mXTXXX__APP_VX-X-XX.enc > maxtouch.fw

 Check for incorrect enc file */

 Change to the bootloader mode */

 Do not need to scan since we know family ID */

 Bootloader may still be unlocked from previous attempt */

 Unlock bootloader */

 Take account of CRC bytes */

 Write one frame to device */

 Back off by 20ms per retry */

 Wait for flash. */

	/*

	 * Wait for device to reset. Some bootloader versions do not assert

	 * the CHG line after bootloading has finished, so ignore potential

	 * errors.

 Touch enable */

 0x83 = SCANEN | RPTEN | ENABLE */

 Recalibrate since chip has been in deep sleep */

 Touch disable */

	/*

	 * Ignore devices that do not have device properties attached to

	 * them, as we need help determining whether we are dealing with

	 * touch screen or touchpad.

	 *

	 * So far on x86 the only users of Atmel touch controllers are

	 * Chromebooks, and chromeos_laptop driver will ensure that

	 * necessary properties are provided (if firmware does not do that).

	/*

	 * Ignore ACPI devices representing bootloader mode.

	 *

	 * This is a bit of a hack: Google Chromebook BIOS creates ACPI

	 * devices for both application and bootloader modes, but we are

	 * interested in application mode only (if device is in bootloader

	 * mode we'll end up switching into application anyway). So far

	 * application mode addresses were all above 0x40, so we'll use it

	 * as a threshold.

	/*

	 * VDDA is the analog voltage supply 2.57..3.47 V

	 * VDD  is the digital voltage supply 1.71..3.47 V

 Request the RESET line as asserted so we go into reset */

 Request the WAKE line as asserted so we go out of sleep */

	/*

	 * The device takes 40ms to come up after power-on according

	 * to the mXT224 datasheet, page 13.

 Wait a while and then de-assert the RESET GPIO line */

	/*

	 * Controllers like mXT1386 have a dedicated WAKE line that could be

	 * connected to a GPIO or to I2C SCL pin, or permanently asserted low.

	 *

	 * This WAKE line is used for waking controller from a deep-sleep and

	 * it needs to be asserted low for 25 milliseconds before I2C transfers

	 * could be accepted by controller if it was in a deep-sleep mode.

	 * Controller will go into sleep automatically after 2 seconds of

	 * inactivity if WAKE line is deasserted and deep sleep is activated.

	 *

	 * If WAKE line is connected to I2C SCL pin, then the first I2C transfer

	 * will get an instant NAK and transfer needs to be retried after 25ms.

	 *

	 * If WAKE line is connected to a GPIO line, the line must be asserted

	 * 25ms before the host attempts to communicate with the controller.

 Compatibles listed below are deprecated */

 Touchpad */

 Touchscreen */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * h3600 atmel micro companion support, touchscreen subdevice

 * Author : Alessandro Gardich <gremlin@gremlin.it>

 * Author : Dmitry Artamonow <mad_soft@inbox.ru>

 * Author : Linus Walleij <linus.walleij@linaro.org>

 SPDX-License-Identifier: GPL-2.0

/*

 * ADC generic resistive touchscreen (GRTS)

 * This is a generic input driver that connects to an ADC

 * given the channels in device tree, and reports events to the input

 * subsystem.

 *

 * Copyright (C) 2017,2018 Microchip Technology,

 * Author: Eugen Hristev <eugen.hristev@microchip.com>

 *

/**

 * struct grts_state - generic resistive touch screen information struct

 * @x_plate_ohms:	resistance of the X plate

 * @pressure_min:	number representing the minimum for the pressure

 * @pressure:		are we getting pressure info or not

 * @iio_chans:		list of channels acquired

 * @iio_cb:		iio_callback buffer for the data

 * @input:		the input device structure that we register

 * @prop:		touchscreen properties struct

 * @ch_map:		map of channels that are defined for the touchscreen

			/*

			 * On increased pressure the resistance (Rt) is

			 * decreasing so, convert values to make it looks as

			 * real pressure.

 report end of touch */

 report proper touch to subsystem*/

 pressure is optional */

 if no pressure is defined, try optional z1 + z2 */

 if z1 is provided z2 is not optional */

 get the channels from IIO device */

 parse optional device tree properties */

 sentinel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cyttsp_i2c.c

 * Cypress TrueTouch(TM) Standard Product (TTSP) I2C touchscreen driver.

 * For use with Cypress Txx3xx parts.

 * Supported parts include:

 * CY8CTST341

 * CY8CTMA340

 *

 * Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.

 * Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>

 *

 * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Elo serial touchscreen driver

 *

 * Copyright (c) 2004 Vojtech Pavlik

/*

 * This driver can handle serial Elo touchscreens using either the Elo standard

 * 'E271-2210' 10-byte protocol, Elo legacy 'E281A-4002' 6-byte protocol, Elo

 * legacy 'E271-140' 4-byte protocol and Elo legacy 'E261-280' 3-byte protocol.

/*

 * Definitions & global arrays.

/*

 * Per-touchscreen data.

 We are back in reporting mode, the command was ACKed */

/*

 * elo_disconnect() is the opposite of elo_connect()

/*

 * elo_connect() is the routine that is called when someone adds a

 * new serio device that supports Gunze protocol and registers it as

 * an input device.

 10-byte protocol */

 6-byte protocol */

 4-byte protocol */

 3-byte protocol */

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Sahara TouchIT-213 serial touchscreen driver

 *

 * Copyright (c) 2007-2008 Claudio Nieder <private@claudio.ch>

 *

 * Based on Touchright driver (drivers/input/touchscreen/touchright.c)

 * Copyright (c) 2006 Rick Koch <n1gp@hotmail.com>

 * Copyright (c) 2004 Vojtech Pavlik

 * and Dan Streetman <ddstreet@ieee.org>

/*

 * Definitions & global arrays.

/*

 * Data is received through COM1 at 9600bit/s,8bit,no parity in packets

 * of 5 byte each.

 *

 *   +--------+   +--------+   +--------+   +--------+   +--------+

 *   |1000000p|   |0xxxxxxx|   |0xxxxxxx|   |0yyyyyyy|   |0yyyyyyy|

 *   +--------+   +--------+   +--------+   +--------+   +--------+

 *                    MSB          LSB          MSB          LSB

 *

 * The value of p is 1 as long as the screen is touched and 0 when

 * reporting the location where touching stopped, e.g. where the pen was

 * lifted from the screen.

 *

 * When holding the screen in landscape mode as the BIOS text output is

 * presented, x is the horizontal axis with values growing from left to

 * right and y is the vertical axis with values growing from top to

 * bottom.

 *

 * When holding the screen in portrait mode with the Sahara logo in its

 * correct position, x ist the vertical axis with values growing from

 * top to bottom and y is the horizontal axis with values growing from

 * right to left.

/*

 * On my Sahara Touch-IT 213 I have observed x values from 0 to 0x7f0

 * and y values from 0x1d to 0x7e9, so the actual measurement is

 * probably done with an 11 bit precision.

/*

 * Per-touchscreen data.

/*

 * touchit213_disconnect() is the opposite of touchit213_connect()

/*

 * touchit213_connect() is the routine that is called when someone adds a

 * new serio device that supports the Touchright protocol and registers it as

 * an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Raydium touchscreen I2C driver.

 *

 * Copyright (C) 2012-2014, Raydium Semiconductor Corporation.

 *

 * Raydium reserves the right to make changes without further notice

 * to the materials described herein. Raydium does not assume any

 * liability arising out of the application described herein.

 *

 * Contact Raydium Semiconductor Corporation at www.rad-ic.com

 Slave I2C mode */

 I2C bootoloader commands */

 send bl page write */

 send bl write */

 send ack*/

 send data check */

 send wait bl data ready*/

 bl data ready */

 read hwid */

 I2C main commands */

 Touch relative info */

 Offsets in contact data */

 Bootloader relative info */

 bl flash wrt cmd size */

 bl wrt pkg size */

 Response to RM_CMD_DATA_BANK request */

device version */

 test version */

 units/mm */

 units/mm */

 struct raydium_data - represents state of Raydium touchscreen device */

/*

 * Header to be sent for RM_CMD_BANK_SWITCH command. This is used by

 * raydium_i2c_{read|send} below.

	/*

	 * If address is greater than 255, then RM_CMD_BANK_SWITCH needs to be

	 * sent first. Else, skip the header i.e. xfer[0].

		/*

		 * Perform as a single i2c_transfer transaction to ensure that

		 * no other I2C transactions are initiated on the bus to any

		 * other device in between. Initiating transacations to other

		 * devices after RM_CMD_BANK_SWITCH is sent is known to cause

		 * issues. This is also why regmap infrastructure cannot be used

		 * for this driver. Regmap handles page(bank) switch and reads

		 * as separate i2c_transfer() operations. This can result in

		 * problems if the Raydium device is on a shared I2C bus.

		/*

		 * Perform as a single i2c_transfer transaction to ensure that

		 * no other I2C transactions are initiated on the bus to any

		 * other device in between. Initiating transacations to other

		 * devices after RM_CMD_BANK_SWITCH is sent is known to cause

		 * issues. This is also why regmap infrastructure cannot be used

		 * for this driver. Regmap handles page(bank) switch and writes

		 * as separate i2c_transfer() operations. This can result in

		 * problems if the Raydium device is on a shared I2C bus.

		/*

		 * Warn user if we already allocated memory for reports and

		 * then the size changed (due to firmware update?) and keep

		 * old size instead.

 Wait for Hello packet */

 Make sure there is something at this address */

 Sleep is not available in BLDR recovery mode */

 sentinel */ }

 sentinel */ }

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Touch Screen driver for SiS 9200 family I2C Touch panels

 *

 * Copyright (C) 2015 SiS, Inc.

 * Copyright (C) 2016 Nextfour Group

/*

 * The I2C packet format:

 * le16		byte count

 * u8		Report ID

 * <contact data - variable length>

 * u8		Number of contacts

 * le16		Scan Time (optional)

 * le16		CRC

 *

 * One touch point information consists of 6+ bytes, the order is:

 * u8		contact state

 * u8		finger id

 * le16		x axis

 * le16		y axis

 * u8		contact width (optional)

 * u8		contact height (optional)

 * u8		pressure (optional)

 *

 * Maximum amount of data transmitted in one shot is 64 bytes, if controller

 * needs to report more contacts than fit in one packet it will send true

 * number of contacts in first packet and 0 as number of contacts in second

 * packet.

 Report ID/type */

 First contact */

 Supported report types */

 Contact properties within report */

 Contact size */

 Offsets within contact data */

 Contact ID */

 Individual contact state */

 Touchscreen parameters */

 Resolution diagonal */

((SIS_MAX_X^2) + (SIS_MAX_Y^2))^0.5*/

			/*

			 * Calculate CRC ignoring packet length

			 * in the beginning and CRC transmitted

			 * at the end of the packet.

				/*

				 * The remainder of contacts is sent

				 * in the 2nd packet.

 Get out of reset */

 sentinel */ }

 sentinel */  }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AD7879/AD7889 touchscreen (SPI bus)

 *

 * Copyright (C) 2008-2010 Michael Hennerich, Analog Devices Inc.

 BUS_SPI */

 AD7879/AD7889 */

 don't exceed max specified SPI CLK frequency */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Touchwindow serial touchscreen driver

 *

 * Copyright (c) 2006 Rick Koch <n1gp@hotmail.com>

 *

 * Based on MicroTouch driver (drivers/input/touchscreen/mtouch.c)

 * Copyright (c) 2004 Vojtech Pavlik

 * and Dan Streetman <ddstreet@ieee.org>

/*

 * 2005/02/19 Rick Koch:

 *   The Touchwindow I used is made by Edmark Corp. and

 *   constantly outputs a stream of 0's unless it is touched.

 *   It then outputs 3 bytes: X, Y, and a copy of Y.

/*

 * Definitions & global arrays.

/*

 * Per-touchscreen data.

 touch */

 verify length and that the two Y's are the same */

 untouch */

/*

 * tw_disconnect() is the opposite of tw_connect()

/*

 * tw_connect() is the routine that is called when someone adds a

 * new serio device that supports the Touchwin protocol and registers it as

 * an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Core Source for:

 * Cypress TrueTouch(TM) Standard Product (TTSP) touchscreen drivers.

 * For use with Cypress Txx3xx parts.

 * Supported parts include:

 * CY8CTST341

 * CY8CTMA340

 *

 * Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.

 * Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>

 *

 * Contact Cypress Semiconductor at www.cypress.com <kev@cypress.com>

 Bootloader number of command keys */

 helpers */

 ms */

 Active distance in pixels for a gesture to be reported */

 pixels */

 Active Power state scanning/processing refresh interval */

 ms */

 Low Power state scanning/processing refresh interval */

 ms */

 touch timeout for the Active power */

 ms */

 device mode bits */

 power mode select bits */

 return to Bootloader mode */

 Slots management */

 file offset */

 command */

 exit bootloader command */

 default keys */

 wait for TTSP Device to complete the operation */

 wait for TTSP Device to complete switch to Operational mode */

 switch to sysinfo mode */

 read sysinfo registers */

 set intrvl registers */

		/*

		 * According to the CY8CTMA340 datasheet page 21, the external

		 * reset pulse width should be >= 1 ms. The datasheet does not

		 * specify how long we have to wait after reset but a vendor

		 * tree specifies 5 ms here.

 wait for interrupt to set ready completion */

 Init gesture; active distance setup */

 terminate all active tracks */

 terminate all active tracks */

 terminate all active tracks */

 Get touch data from CYTTSP device */

 provide flow control handshake */

		/*

		 * TTSP device has reset back to bootloader mode.

		 * Restore to operational mode.

 init active distance */

	/*

	 * The device firmware can wake on an I2C or SPI memory slave

	 * address match. So just reading a register is sufficient to

	 * wake up the device. The first read attempt will fail but it

	 * will wake it up making the second read attempt successful.

 Set some default values */

 Register value is expressed in 0.01s / bit */

 Register value is expressed in 0.01s / bit */

	/*

	 * VCPIN is the analog voltage supply

	 * VDD is the digital voltage supply

 One byte for width 0..255 so this is the limit */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for ChipOne icn8505 i2c touchscreen controller

 *

 * Copyright (c) 2015-2018 Red Hat Inc.

 *

 * Red Hat authors:

 * Hans de Goede <hdegoede@redhat.com>

 Normal operation mode defines */

 ICN8505_REG_POWER commands */

/*

 * The Android driver uses these to turn on/off the charger filter, but the

 * filter is way too aggressive making e.g. onscreen keyboards unusable.

 Programming mode defines */

 Seems more like finger width then pressure really */

 The difference between 2 and 3 is unclear */

 No finger seen yet since wakeup */

 New or updated coordinates */

 New or updated coordinates */

 Finger lifted */

 3 bytes for 24 bit reg-addr + 32 bytes max len */

/*

 * Note this function uses a number of magic register addresses and values,

 * there are deliberately no defines for these because the algorithm is taken

 * from the icn85xx Android driver and I do not want to make up possibly wrong

 * names for the addresses and/or values.

 Put the controller in programming mode */

 Enable CRC mode */

 Send the firmware to SRAM */

 Disable CRC mode */

 Get and check length and CRC */

 Boot controller from SRAM */

	/*

	 * Always load the firmware, even if we don't need it at boot, we

	 * we may need it at resume. Having loaded it once will make the

	 * firmware class code cache it at suspend/resume.

 Check if the controller is not already up and running */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Pixcir I2C touchscreen controllers.

 *

 * Copyright (C) 2010-2011 Pixcir, Inc.

 Max fingers supported by driver */

/*

 * Register map

/*

 * Power modes:

 * active: max scan speed

 * idle: lower scan speed with automatic transition to active on touch

 * halt: datasheet says sleep but this is more like halt as the chip

 *       clocks are cut and it can only be brought out of this mode

 *	 using the RESET pin.

/*

 * Interrupt modes:

 * periodical: interrupt is asserted periodicaly

 * diff coordinates: interrupt is asserted when coordinates change

 * level on touch: interrupt level asserted during touch

 * pulse on touch: interrupt pulse asserted during touch

 *

/**

 * struct pixcir_i2c_chip_data - chip related data

 * @max_fingers:	Max number of fingers reported simultaneously by h/w

 * @has_hw_ids:		Hardware supports finger tracking IDs

 *

 parse packet */

 report it */

				/*

				 * Last report with no finger up?

				 * Do it now then.

 datasheet section 1.2.3 says 80ns min. */

 wait for controller ready. 100ms guess. */

 Always AUTO_IDLE */

/*

 * Set the interrupt mode for the device i.e. ATTB line behaviour

 *

 * @polarity : 1 for active high, 0 for active low.

/*

 * Enable/disable interrupt generation

 LEVEL_TOUCH interrupt with active low polarity */

 Update status before IRQ can fire */

 enable interrupt generation */

 Disable interrupt generation */

 Exit ISR if running, no more report parsing */

 update status before we synchronize irq */

 Wait till running ISR is complete */

 Always be in IDLE mode to save power, device supports auto wake */

 Stop device till opened */

 no hw id support */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Source for:

 * Cypress TrueTouch(TM) Standard Product (TTSP) SPI touchscreen driver.

 * For use with Cypress Txx3xx parts.

 * Supported parts include:

 * CY8CTST341

 * CY8CTMA340

 *

 * Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.

 * Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>

 * Copyright (C) 2013 Cypress Semiconductor

 *

 * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>

 r/~w */

 from protocol v.2 */

 from protocol v.2 */

 header byte 0 */

 header byte 1 */

 reg index */

 r/~w */

	/*

	  We set both TX and RX buffers because Cypress TTSP

	  requires full duplex operation.

		/*

		 * do not return here since was a bad ACK sequence

		 * let the following ACK check handle any errors and

		 * allow silent retries

 Set up SPI*/

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

 Samsung S6SY761 Touchscreen device driver



 Copyright (c) 2017 Samsung Electronics Co., Ltd.

 Copyright (c) 2017 Andi Shyti <andi@etezian.org>

 commands */

 R/W for get/set */

 events */

 info */

 firmware status */

/*

 * the functionalities are put as a reference

 * as in the device I am using none of them

 * works therefore not used in this driver yet.

 touchscreen functionalities */

 boot status (BS) */

 event id */

 event register masks */

 byte 0 */

 byte 3 */

 byte 6 */

 byte 7 */

 MSB in byte 6, LSB in byte 7 */

 event touch state values */

 application modes */

/*

 * We can't simply use i2c_smbus_read_i2c_block_data because we

 * need to read more than 255 bytes

 double check whether the touch is functional */

 for some reasons the device might be stuck in the bootloader */

 enable touch functionality */

 larger read size */

 if no tx channels defined, at least keep one */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for MAXI MAX11801 - A Resistive touch screen controller with

 * i2c interface

 *

 * Copyright (C) 2011 Freescale Semiconductor, Inc.

 * Author: Zhang Jiejing <jiejing.zhang@freescale.com>

 *

 * Based on mcs5000_ts.c

/*

 * This driver aims to support the series of MAXI touch chips max11801

 * through max11803. The main difference between these 4 chips can be

 * found in the table below:

 * -----------------------------------------------------

 * | CHIP     |  AUTO MODE SUPPORT(FIFO) | INTERFACE    |

 * |----------------------------------------------------|

 * | max11800 |  YES                     |   SPI        |

 * | max11801 |  YES                     |   I2C        |

 * | max11802 |  NO                      |   SPI        |

 * | max11803 |  NO                      |   I2C        |

 * ------------------------------------------------------

 *

 * Currently, this driver only supports max11801.

 *

 * Data Sheet:

 * http://www.maxim-ic.com/datasheet/index.mvp/id/5943

 Register Address define */

 only for max11800/max11801 */

 only for max11800/max11801 */

 FIFO is found only in max11800 and max11801 */

 These are the state of touch event state machine */

 XXX: The chip ignores LSB of register address */

 XXX: The chip ignores LSB of register address */

		/*

		 * We should get 4 bytes buffer that contains X,Y

		 * and event tag

 Average X,Y, take 16 samples, average eight media sample */

 X,Y panel setup time set to 20us */

 Rough pullup time (2uS), Fine pullup time (10us)  */

 Auto mode init period = 5ms , scan period = 5ms*/

 Aperture X,Y set to +- 4LSB */

 Enable Power, enable Automode, enable Aperture, enable Average X,Y */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ADS7846 based touchscreen and sensor driver

 *

 * Copyright (c) 2005 David Brownell

 * Copyright (c) 2006 Nokia Corporation

 * Various changes: Imre Deak <imre.deak@nokia.com>

 *

 * Using code from:

 *  - corgi_ts.c

 *	Copyright (C) 2004-2005 Richard Purdie

 *  - omap_ts.[hc], ads7846.h, ts_osk.c

 *	Copyright (C) 2002 MontaVista Software

 *	Copyright (C) 2004 Texas Instruments

 *	Copyright (C) 2005 Dirk Behme

/*

 * This code has been heavily tested on a Nokia 770, and lightly

 * tested on other ads7846 devices (OSK/Mistral, Lubbock, Spitz).

 * TSC2046 is just newer ads7846 silicon.

 * Support for ads7843 tested on Atmel at91sam926x-EK.

 * Support for ads7845 has only been stubbed in.

 * Support for Analog Devices AD7873 and AD7843 tested.

 *

 * IRQ handling needs a workaround because of a shortcoming in handling

 * edge triggered IRQs on some platforms like the OMAP1/2. These

 * platforms don't handle the ARM lazy IRQ disabling properly, thus we

 * have to maintain our own SW IRQ disabled status. This should be

 * removed as soon as the affected platform's IRQ handling is fixed.

 *

 * App note sbaa036 talks in more detail about accurate sampling...

 * that ought to help in situations like LCDs inducing noise (which

 * can also be helped by using synch signals) and more generally.

 * This driver tries to utilize the measures described in the app

 * note. The strength of filtering can be set in the board-* specific

 * files.

 ms delay before the first sample */

 ms delay between samples */

 this driver doesn't aim at the peak continuous sample rate */

cmd*/ + 16  before, after */)

/*

 * We allocate this separately to avoid cache line sharing issues when

 * driver is used with DMA-based SPI controllers (like atmel_spi) on

 * systems where main memory is not DMA-coherent (most non-x86 boards).

 P: lock */

 P: lock */

 P: lock */

 leave chip selected when we're done, for quicker re-select? */

--------------------------------------------------------------------------*/

/* The ADS7846 has touchscreen and other sensors.

 * Earlier ads784x chips are somewhat compatible.

 differential */

 differential */

 differential */

 differential */

 non-differential */

 non-differential */

 non-differential */

 non-differential */

 non-differential */

 differential */

 low power mode + penirq */

 ADC on */

 vREF on + penirq */

 ADC + vREF on */

 leave ADC powered up (disables penirq) between differential samples */

 LAST */

/* single-ended samples need to first power up reference voltage;

 * we leave both ADC and VREF powered

/* Order commands in the most optimal way to reduce Vref switching and

 * settling time:

 * Measure:  X; Vref: X+, X-; IN: Y+

 * Measure:  Y; Vref: Y+, Y-; IN: X+

 * Measure: Z1; Vref: Y+, X-; IN: X+

 * Measure: Z2; Vref: Y+, X-; IN: Y-

 Must be called with ts->lock held */

 Signal IRQ thread to stop polling and disable the handler. */

 Must be called with ts->lock held */

 Check if pen was released since last stop */

 Tell IRQ thread that it may poll the device. */

 Must be called with ts->lock held */

	/*

	 * We know the chip's in low power mode since we always

	 * leave it that way after every request

 Must be called with ts->lock held */

--------------------------------------------------------------------------*/

/*

 * Non-touchscreen sensors only use single-ended conversions.

 * The range is GND..vREF. The ads7843 and ads7835 must use external vREF;

 * ads7846 lets that pin be unconnected, to use internal vREF.

	/*

	 * DMA (thus cache coherency maintenance) requires the

	 * transfer buffers to live in their own cache lines.

	/*

	 * DMA (thus cache coherency maintenance) requires the

	 * transfer buffers to live in their own cache lines.

 maybe turn on internal vREF, and let it settle */

 for 1uF, settle for 800 usec; no cap, 100 usec.  */

 Enable reference voltage */

 Enable ADC in every case */

 take sample */

 REVISIT:  take a few more samples, and compare ... */

 converter in low power mode & enable PENIRQ */

 on-wire is a must-ignore bit, a BE12 value, then padding */

 BE12 value, then padding */

/* Sysfs conventions report temperatures in millidegrees Celsius.

 * ADS7846 could use the low-accuracy two-sample scheme, but can't do the high

 * accuracy scheme without calibration data.  For now we won't try either;

 * userspace sees raw sensor values, and must scale/calibrate appropriately.

 temp1_input */

 temp2_input */

/* sysfs conventions report voltages in millivolts.  We can convert voltages

 * if we know vREF.  userspace may need to scale vAUX to match the board's

 * external resistors; we assume that vBATT only uses the internal ones.

 external resistors may scale vAUX into 0..vREF */

 ads7846 has a resistor ladder to scale this signal down */

 in0, in1 */

 in0 */

 0 */

 1 */

 2 */

 3 */

 hwmon sensors need a reference voltage */

--------------------------------------------------------------------------*/

 Start over collecting consistent readings. */

		/*

		 * Repeat it, if this was the first read or the read

		 * wasn't consistent enough.

			/*

			 * Maximum number of debouncing reached and still

			 * not enough number of consistent readings. Abort

			 * the whole sample, repeat it in the next sampling

			 * period.

			/*

			 * Got a good reading for this coordinate,

			 * go for the next one.

 Read more values that are consistent. */

 enforce ADC output is 12 bits width */

 7846 specific commands  */

 range filtering */

 compute touch pressure resistance using equation #2 */

	/*

	 * Sample found inconsistent by debouncing or pressure is beyond

	 * the maximum. Don't report it to user space, repeat at least

	 * once more the measurement

	/*

	 * Maybe check the pendown state before reporting. This discards

	 * false readings when the pen is lifted.

	/*

	 * NOTE: We can't rely on the pressure to determine the pen down

	 * state, even this controller has a pressure sensor. The pressure

	 * value can fluctuate for quite a while after lifting the pen and

	 * in some cases may not even settle at the expected value.

	 *

	 * The only safe way to check for the pen up condition is in the

	 * timer by reading the pen signal state (it's a GPIO _and_ IRQ).

 Start with a small delay before checking pendown state */

 pen is down, continue with the measurement */

	/*

	 * REVISIT when the irq can be triggered active-low, or if for some

	 * reason the touchscreen isn't hooked up, we don't need to access

	 * the pendown state.

/*

 * Set up the transfers to read touchscreen state; this assumes we

 * use formula #2 for pressure, not #3.

 time per bit */

		/* ads7846_debounce_filter() is making ts->debounce_rep + 2

 x, y, z1, z2, pwdown */

 x, y, pwdown */

		/*

		 * The AD7873 is almost identical to the ADS7846

		 * keep VREF off during differential/ratiometric

		 * conversion modes.

	/*

	 * touchscreen-max-pressure gets parsed during

	 * touchscreen_parse_properties()

 don't exceed max specified sample rate */

	/*

	 * We'd set TX word size 8 bits and RX word size to 13 bits ... except

	 * that even if the hardware can do that, the SPI controller driver

	 * may not.  So we stick to very-portable 8 bit words, both RX and TX.

	/*

	 * Parse common framework properties. Must be done here to ensure the

	 * correct behaviour in case of using the legacy vendor bindings. The

	 * general binding value overrides the vendor specific one.

	/*

	 * Check if legacy ti,swap-xy binding is used instead of

	 * touchscreen-swapped-x-y

	/*

	 * Take a first sample, leaving nPENIRQ active and vREF off; avoid

	 * the touchscreen, in case it's not connected.

	/*

	 * If device does not carry platform data we must have allocated it

	 * when parsing DT data.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Touchscreen driver for Marvell 88PM860x

 *

 * Copyright (C) 2009 Marvell International Ltd.

 * 	Haojian Zhuang <haojian.zhuang@marvell.com>

 touch register */

 bit definitions of touch */

 resistor of Xplate */

 set GPADC MISC1 register */

 set tsi prebias time */

 set prebias & prechg time of pen detect */

 set GPADC MISC1 register */

 set tsi prebias time */

 set prebias & prechg time of pen detect */

 enable GPADC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/input/touchscreen/jornada720_ts.c

 *

 * Copyright (C) 2007 Kristoffer Ericson <Kristoffer.Ericson@gmail.com>

 *

 *  Copyright (C) 2006 Filip Zyzniewski <filip.zyzniewski@tefnet.pl>

 *  based on HP Jornada 56x touchscreen driver by Alex Lange <chicken@handhelds.org>

 *

 * HP Jornada 710/720/729 Touchscreen Driver

 X sample values */

 Y sample values */

 3 low word X samples */

 3 low word Y samples */

 combined x samples bits */

 combined y samples bits */

 If gpio is high then report pen up */

 proper reply to request is always TXDUMMY */

 work with hotplug and coldplug */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * LPC32xx built-in touchscreen driver

 *

 * Copyright (C) 2010 NXP Semiconductors

/*

 * Touchscreen controller register offsets

 FIFO overflow - throw away samples */

	/*

	 * Gather and normalize 4 samples. Pen-up events may have less

	 * than 4 samples, but its ok to pop 4 and let the last sample

	 * pen status check drop the samples.

 Data is only valid if pen is still down in last sample */

 Use average of 2nd and 3rd sample for position */

 Disable auto mode */

 Set the TSC FIFO depth to 4 samples @ 10-bits per sample (max) */

 These values are all preset */

 Aux support is not used */

	/*

	 * Set sample rate to about 240Hz per X/Y pair. A single measurement

	 * consists of 4 pairs which gives about a 60Hz sample rate based on

	 * a stable 32768Hz clock source. Values are in clocks.

	 * Rate is (32768 / (RTR + XCONV + RTR + YCONV + DXP + TTR + UTR) / 4

 Enable automatic ts event capture */

	/*

	 * Suspend and resume can be called when the device hasn't been

	 * enabled. If there are no users that have the device open, then

	 * avoid calling the TSC stop and start functions as the TSC

	 * isn't yet clocked.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/input/touchscreen/tsc2007.c

 *

 * Copyright (c) 2008 MtekVision Co., Ltd.

 *	Kwangwoo Lee <kwlee@mtekvision.com>

 *

 * Using code from:

 *  - ads7846.c

 *	Copyright (c) 2005 David Brownell

 *	Copyright (c) 2006 Nokia Corporation

 *  - corgi_ts.c

 *	Copyright (C) 2004-2005 Richard Purdie

 *  - omap_ts.[hc], ads7846.h, ts_osk.c

 *	Copyright (C) 2002 MontaVista Software

 *	Copyright (C) 2004 Texas Instruments

 *	Copyright (C) 2005 Dirk Behme

	/* The protocol and raw data format from i2c interface:

	 * S Addr Wr [A] Comm [A] S Addr Rd [A] [DataLow] A [DataHigh] NA P

	 * Where DataLow has [D11-D4], DataHigh has [D3-D0 << 4 | Dummy 4bit].

 y- still on; turn on only y+ (and ADC) */

 turn y- off, x+ on, then leave in lowpower */

 turn y+ off, x- on; we'll use formula #1 */

 Prepare for next touch reading - power down ADC, enable PENIRQ */

 range filtering */

 compute touch resistance using equation #1 */

	/*

	 * NOTE: We can't rely on the pressure to determine the pen down

	 * state, even though this controller has a pressure sensor.

	 * The pressure value can fluctuate for quite a while after

	 * lifting the pen and in some cases may not even settle at the

	 * expected value.

	 *

	 * The only safe way to check for the pen up condition is in the

	 * work function by reading the pen signal state (it's a GPIO

	 * and IRQ). Unfortunately such callback is not always available,

	 * in that case we assume that the pen is down and expect caller

	 * to fall back on the pressure reading.

 pen is down, continue with the measurement */

			/*

			 * If pressure reported is 0 and we don't have

			 * callback to check pendown state, we have to

			 * assume that pen was lifted up.

			/*

			 * Sample found inconsistent by debouncing or pressure is

			 * beyond the maximum. Don't report it to user space,

			 * repeat at least once more the measurement.

 Prepare for touch readings - power down ADC and enable PENIRQ */

 power down the chip (TSC2007_SETUP does not ACK on I2C) */

 chip does not respond */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

 Register Map */

 0~7 */

 Interrupt & status register flags */

 ms

 ms

 currently unused, but needed as padding:

 A single i2c_transfer() transaction does not work here. */

 initialize */

 clear queue */

 fall back to mode 2 */

		/*

		 * If there are devices that don't support mode 2, support

		 * for other modes (0, 1) will be needed.

/*

 * TI Touch Screen driver

 *

 * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

		/*

		 * Get the order in which TSC wires are attached

		 * w.r.t. each of the analog input lines on the EVM.

 Steps 16 to 16-coordinate_readouts is for X */

 1 ... coordinate_readouts is for Y */

 Make CHARGECONFIG same as IDLECONFIG */

 coordinate_readouts + 1 ... coordinate_readouts + 2 is for Z */

 The steps end ... end - readouts * 2 + 2 and bit 0 for TS_Charge */

	/*

	 * If co-ordinates readouts is less than 4 then

	 * report the average. In case of 4 or more

	 * readouts, sort the co-ordinate samples, drop

	 * min and max values and report the average of

	 * remaining values.

	/*

	 * ADC and touchscreen share the IRQ line.

	 * FIFO1 interrupts are used by ADC. Handle FIFO0 IRQs here only

			/*

			 * Calculate pressure using formula

			 * Resistance(touch) = x plate resistance *

			 * x postion/4096 * ((z2 / z1) - 1)

	/*

	 * Try with the new binding first. If it fails, try again with

	 * bogus, miss-spelled version.

	/*

	 * If ti,charge-delay value is not specified, then use

	 * CHARGEDLY_OPENDLY as the default value.

/*

 * The functions for inserting/removing driver as a module.

 Allocate memory for device */

 register to the input system */

 total steps followed by the enable mask */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TSC2004 touchscreen driver

 *

 * Copyright (C) 2015 QWERTY Embedded Design

 * Copyright (C) 2015 EMAC Inc.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Toradex Colibri VF50 Touchscreen driver

 *

 * Copyright 2015 Toradex AG

 *

 * Originally authored by Stefan Agner for 3.0 kernel

/*

 * Enables given plates and measures touch parameters using ADC

/*

 * Enable touch detection using falling edge detection on XM

 Enable plate YM (needs to be strong GND, high active) */

	/*

	 * Let the platform mux to idle state in order to enable

	 * Pull-Up on GPIO

 Wait for the pull-up to be stable on high */

/*

 * ADC touch screen sampling bottom half irq handler

 Disable the touch detection plates */

 Let the platform mux to default state in order to mux as ADC */

 X-Direction */

 Y-Direction */

		/*

		 * Touch pressure

		 * Measure on XP/YM

 Validate signal (avoid calculation using noise) */

			/*

			 * Calculate resistance between the plates

			 * lower resistance means higher pressure

		/*

		 * If touch pressure is too low, stop measuring and reenable

		 * touch detection

		/*

		 * The pressure may not be enough for the first x and the

		 * second y measurement, but, the pressure is ok when the

		 * driver is doing the third and fourth measurement. To

		 * take care of this, we drop the first measurement always.

			/*

			 * Report touch position and sleep for

			 * the next measurement.

 Report no more touch, re-enable touch detection */

 Mux detection before request IRQ, wait for pull-up to settle */

 Make sure IRQ is not running past close */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Touchscreen driver for WM831x PMICs

 *

 * Copyright 2011 Wolfson Microelectronics plc.

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

/*

 * R16424 (0x4028) - Touch Control 1

 TCH_ENA */

 TCH_CVT_ENA */

 TCH_SLPENA */

 TCH_Z_ENA */

 TCH_Y_ENA */

 TCH_X_ENA */

 TCH_DELAY - [7:5] */

 TCH_DELAY - [7:5] */

 TCH_DELAY - [7:5] */

 TCH_RATE - [4:0] */

 TCH_RATE - [4:0] */

 TCH_RATE - [4:0] */

/*

 * R16425 (0x4029) - Touch Control 2

 TCH_PD_WK */

 TCH_5WIRE */

 TCH_PDONLY */

 TCH_ISEL */

 TCH_RPU - [3:0] */

 TCH_RPU - [3:0] */

 TCH_RPU - [3:0] */

/*

 * R16426-8 (0x402A-C) - Touch Data X/Y/X

 TCH_PD1 */

 TCH_DATA - [11:0] */

 TCH_DATA - [11:0] */

 TCH_DATA - [11:0] */

	/*

	 * We get a pen down reading on every reading, report pen up if any

	 * individual reading does so.

 Switch from data to pen down */

 Don't need data any more */

 Flush any final samples that arrived while reading */

 Start collecting data */

 Switch from pen down to data */

 Shut the controller down, disabling all other functionality too */

	/* Make sure any pending IRQs are done, the above will prevent

	 * new ones firing.

 Make sure the IRQ completion work is quiesced */

	/* If we ended up with the pen down then make sure we revert back

	 * to pen detection state for the next time we start up.

	/*

	 * If we have a direct IRQ use it, otherwise use the interrupt

	 * from the WM831x IRQ controller.

 Five wire touchscreens can't report pressure */

 Pressure measurements are not possible for five wire mode */

 Default to 96 samples/sec */

 set up touch configuration */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Dynapro serial touchscreen driver

 *

 * Copyright (c) 2009 Tias Guns

 * Based on the inexio driver (c) Vojtech Pavlik and Dan Streetman and

 * Richard Lemon

/*

 * 2009/09/19 Tias Guns <tias@ulyssis.org>

 *   Copied inexio.c and edited for Dynapro protocol (from retired Xorg module)

/*

 * Definitions & global arrays.

/*

 * Per-touchscreen data.

/*

 * dynapro_connect() is the routine that is called when someone adds a

 * new serio device that supports dynapro protocol and registers it as

 * an input device. This is usually accomplished using inputattach.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Azoteq IQS550/572/525 Trackpad/Touchscreen Controller

 *

 * Copyright (C) 2018 Jeff LaBundy <jeff@labundy.com>

 *

 * These devices require firmware exported from a PC-based configuration tool

 * made available by the vendor. Firmware files may be pushed to the device's

 * nonvolatile memory by writing the filename to the 'fw_file' sysfs control.

 *

 * Link to PC-based configuration tool and datasheet: https://www.azoteq.com/

	/*

	 * The first addressing attempt outside of a communication window fails

	 * and must be retried, after which the device clock stretches until it

	 * is available.

	/*

	 * The first addressing attempt outside of a communication window fails

	 * and must be retried, after which the device clock stretches until it

	 * is available.

		/*

		 * This delay saves the bus controller the trouble of having to

		 * tolerate a relatively long clock-stretching period while the

		 * CRC is calculated.

	/*

	 * The device opens a bootloader polling window for 2 ms following the

	 * release of reset. If the host cannot establish communication during

	 * this time frame, it must cycle reset again.

	/*

	 * Addressing the device outside of a communication window prompts it

	 * to assert the RDY output, so disable the interrupt line to prevent

	 * the handler from servicing a false interrupt.

	/*

	 * The device reserves 0xFFFF for coordinates that correspond to slots

	 * which are not in a state of touch.

	/*

	 * A000 and B000 devices use 8-bit and 16-bit addressing, respectively.

	 * Querying an A000 device's version information with 16-bit addressing

	 * gives the appearance that the data is shifted by one byte; a nonzero

	 * leading array element suggests this could be the case (in which case

	 * the missing zero is prepended).

	/*

	 * With the product number recognized yet shifted by one byte, open the

	 * bootloader and wait for user space to convert the A000 device into a

	 * B000 device via new firmware.

	/*

	 * The following delay allows ATI to complete before the open and close

	 * callbacks are free to elicit I2C communication. Any attempts to read

	 * from or write to the device during this time may face extended clock

	 * stretching and prompt the I2C controller to report an error.

	/*

	 * This check is purely a precaution, as the device does not assert the

	 * RDY output during bootloader mode. If the device operates outside of

	 * bootloader mode, the input device is guaranteed to be allocated.

	/*

	 * Once the communication window is closed, a small delay is added to

	 * ensure the device's RDY output has been deasserted by the time the

	 * interrupt handler returns.

	/*

	 * Firmware exported from the vendor's configuration tool deviates from

	 * standard ihex as follows: (1) the checksum for records corresponding

	 * to user-exported settings is not recalculated, and (2) an address of

	 * 0xFFFF is used for the EOF record.

	 *

	 * Because the ihex2fw tool tolerates neither (1) nor (2), the slightly

	 * nonstandard ihex firmware is parsed directly by the driver.

	/*

	 * Disable the interrupt line in case the first attempt(s) to enter the

	 * bootloader don't happen quickly enough, in which case the device may

	 * assert the RDY output until the next attempt.

	/*

	 * If the input device was not allocated already, it is guaranteed to

	 * be allocated by this point and can finally be registered.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TSI driver for Dialog DA9052

 *

 * Copyright(c) 2012 Dialog Semiconductor Ltd.

 *

 * Author: David Dajun Chen <dchen@diasemi.com>

 Mask PEN_DOWN event and unmask TSI_READY event */

 Pen is still DOWN (or read error) */

 Pen UP */

 Report Pen UP */

			/*

			 * FIXME: Fixes the unhandled irq issue when quick

			 * pen down and pen up events occurs

 Mask TSI_READY event and unmask PEN_DOWN event */

 Measure TSI sample every 1ms */

 TSI_DELAY: 3 slots, TSI_SKIP: 0 slots, TSI_MODE: XYZP */

 Supply TSIRef through LD09 */

 Unmask PEN_DOWN event */

 Enable Pen Detect Circuit */

		/*

		 * If ADC was on that means that pendwn IRQ was disabled

		 * twice and we need to enable it to keep enable/disable

		 * counter balanced. IRQ is still off though.

 Disable Pen Detect Circuit */

 Disable Pen Detect Circuit */

 Disable ADC */

 Mask PEN_DOWN and TSI_READY events */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cyttsp_i2c_common.c

 * Cypress TrueTouch(TM) Standard Product (TTSP) I2C touchscreen driver.

 * For use with Cypress Txx3xx and Txx4xx parts.

 * Supported parts include:

 * CY8CTST341

 * CY8CTMA340

 * TMA4XX

 * TMA1036

 *

 * Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.

 * Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>

 *

 * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HTC Shift touchscreen driver

 *

 * Copyright (C) 2008 Pau Oliva Fora <pof@eslack.org>

 0 = press; 1 = release */

 get high resolution value of X and Y using LSB */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Elan Microelectronics touch panels with I2C interface

 *

 * Copyright (C) 2014 Elan Microelectronics Corporation.

 * Scott Liu <scott.liu@emc.com.tw>

 *

 * This code is partly based on hid-multitouch.c:

 *

 *  Copyright (c) 2010-2012 Stephane Chatty <chatty@enac.fr>

 *  Copyright (c) 2010-2012 Benjamin Tissoires <benjamin.tissoires@gmail.com>

 *  Copyright (c) 2010-2012 Ecole Nationale de l'Aviation Civile, France

 *

 * This code is partly based on i2c-hid.c:

 *

 * Copyright (c) 2012 Benjamin Tissoires <benjamin.tissoires@gmail.com>

 * Copyright (c) 2012 Ecole Nationale de l'Aviation Civile, France

 * Copyright (c) 2012 Red Hat, Inc

 Device, Driver information */

 Convert from rows or columns into resolution */

 FW header data */

 Buffer mode Queue Header information */

 Command header definition */

 FW position data */

 Header (4 bytes) plus 3 full 10-finger packets */

 FW read command, 0x53 0x?? 0x0, 0x01 */

 FW write command, 0x54 0x?? 0x0, 0x01 */

 calibration timeout definition */

 struct elants_data - represents state of Elan touchscreen device */

 resolution in units/mm */

 Guards against concurrent access to the device via sysfs */

 Must be last to be used for DMA operations */

	/*

	 * We should wait at least 10 msec (but no more than 40) before

	 * sending fastboot or IAP command to the device.

 Get X/Y size in mm */

 eKTF doesn't report max size, set it to default values */

 Get trace number */

 Get report resolution value of ABS_MT_TOUCH_MAJOR */

 Process mm_to_pixel information */

 translate trace number to TS resolution */

 Continue initializing if it's the last try */

 Continue initializing if it's the last try */

 Wait for Hello packet */

			/*

			 * Setting error code will mark device

			 * in recovery mode below.

 hw version is available even if device in recovery state */

/*

 * Firmware update interface.

 Compare TS Remark ID and FW Remark ID */

 Recovery mode detection! */

 Start IAP Procedure */

 Close idle mode */

 check IAP state */

 Clear the last page of Master */

 Old iap needs to wait 200ms for WDT and rest is for hello packets */

/*

 * Event reporting.

 Note: all fingers have the same tool type */

			/*

			 * eKTF3624 may have use "old" touch-report format,

			 * depending on a device and TS firmware version.

			 * For example, ASUS Transformer devices use the "old"

			 * format, while ASUS Nexus 7 uses the "new" formant.

 CMD_HEADER_REK */

			/*

			 * Depending on firmware version, eKTF3624 touchscreens

			 * may utilize one of these opcodes for the touch events:

			 * 0x63 (NORMAL) and 0x66 (NORMAL2).  The 0x63 is used by

			 * older firmware version and differs from 0x66 such that

			 * touch pressure value needs to be adjusted.  The 0x66

			 * opcode of newer firmware is equal to 0x63 of eKTH3500.

/*

 * sysfs interface

 2 HEX digits */

 4 HEX digits */

	/*

	 * If we do not have reset gpio assume platform firmware

	 * controls regulators and does power them on for us.

	/*

	 * We need to wait a bit after powering on controller before

	 * we are allowed to release reset GPIO.

		/*

		 * Activate reset gpio to prevent leakage through the

		 * pin once we shut off power to the controller.

 Don't bind to i2c-hid compatible devices, these are handled by the i2c-hid drv. */

 Make sure there is something at this address */

 Multitouch input params setup */

 calculate resolution from size */

	/*

	 * Platform code (ACPI, DTS) should normally set up interrupt

	 * for us, but in case it did not let's fall back to using falling

	 * edge to be compatible with older Chromebooks.

	/*

	 * Systems using device tree should set up wakeup via DTS,

	 * the rest will configure device as wakeup source by default.

 Command not support in IAP recovery mode */

		/*

		 * The device will automatically enter idle mode

		 * that has reduced power consumption.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MELFAS MIP4 Touchscreen

 *

 * Copyright (C) 2016 MELFAS Inc.

 *

 * Author : Sangwon Jee <jeesw@melfas.com>

/*****************************************************************

 * Protocol

 * Version : MIP 4.0 Rev 5.4

 Address */

 Value */

 2~ */

 0 (default) or 1 */

/*

 * Read chip firmware version

/*

 * Fetch device characteristics

	/*

	 * Make sure there is something at this address as we do not

	 * consider subsequent failures as fatal.

 Product name */

 Product ID */

 Firmware name */

 IC name */

 Firmware version */

 Resolution */

 Key ts */

 Protocol */

 Booting delay : 200~300ms */

/*

 * Clear touch input event status

 Screen */

 Keys */

/*****************************************************************

 * Input handling

 Report key event */

 Touch only */

 Touch + Force(Pressure) */

 Press or Move event */

 Release event */

 Should not happen unless we have corrupted firmware */

 Report input event */

 Read packet info */

 Check size */

 Read packet data */

/*****************************************************************

 * Firmware update

 Firmware Info */

 512 */

 512, 256, 128, 64, ... */

/*

 * Firmware binary tail info

/*

* Bootloader - Read status

/*

* Bootloader - Change mode

 Send mode change command */

 Wait */

 Verify target mode */

/*

 * Bootloader - Start bootloader mode

/*

 * Bootloader - Exit bootloader mode

 Addr */

 Size */

 Data */

 Command */

 Status */

 Addr */

 Size */

 Command */

 Status */

 Read */

/*

 * Flash chip firmware

 Enter bootloader mode */

 Read info */

 Program & Verify */

 Program */

 Verify */

 Exit bootloader mode */

 Reset chip */

 Refresh device parameters */

 Check bin format */

 Check F/W type */

 Update firmware */

 Enable IRQ */

	/*

	 * Take input mutex to prevent racing with itself and also with

	 * userspace opening and closing the device and also suspend/resume

	 * transitions.

 Take lock to prevent racing with firmware update */

 Take lock to prevent racing with firmware update */

	/*

	 * product_name shows the name or version of the hardware

	 * paired with current firmware in the chip.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AD7879-1/AD7889-1 touchscreen (I2C bus)

 *

 * Copyright (C) 2008-2010 Michael Hennerich, Analog Devices Inc.

 BUS_I2C */

 AD7879-1/AD7889-1 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Rohm BU21029 touchscreen controller driver

 *

 * Copyright (C) 2015-2018 Bosch Sicherheitssysteme GmbH

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

/*

 * HW_ID1 Register (PAGE=0, ADDR=0x0E, Reset value=0x02, Read only)

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |                                 HW_IDH                                |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * HW_ID2 Register (PAGE=0, ADDR=0x0F, Reset value=0x29, Read only)

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |                                 HW_IDL                                |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * HW_IDH: high 8bits of IC's ID

 * HW_IDL: low  8bits of IC's ID

/*

 * CFR0 Register (PAGE=0, ADDR=0x00, Reset value=0x20)

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   0    |   0    |  CALIB |  INTRM |   0    |   0    |   0    |   0    |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * CALIB: 0 = not to use calibration result (*)

 *        1 = use calibration result

 * INTRM: 0 = INT output depend on "pen down" (*)

 *        1 = INT output always "0"

/*

 * CFR1 Register (PAGE=0, ADDR=0x01, Reset value=0xA6)

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |  MAV   |         AVE[2:0]         |   0    |         SMPL[2:0]        |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * MAV:  0 = median average filter off

 *       1 = median average filter on (*)

 * AVE:  AVE+1 = number of average samples for MAV,

 *               if AVE>SMPL, then AVE=SMPL (=3)

 * SMPL: SMPL+1 = number of conversion samples for MAV (=7)

/*

 * CFR2 Register (PAGE=0, ADDR=0x02, Reset value=0x04)

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |          INTVL_TIME[3:0]          |          TIME_ST_ADC[3:0]         |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * INTVL_TIME: waiting time between completion of conversion

 *             and start of next conversion, only usable in

 *             autoscan mode (=20.480ms)

 * TIME_ST_ADC: waiting time between application of voltage

 *              to panel and start of A/D conversion (=100us)

/*

 * CFR3 Register (PAGE=0, ADDR=0x0B, Reset value=0x72)

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |  RM8   | STRETCH|  PU90K |  DUAL  |           PIDAC_OFS[3:0]          |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * RM8: 0 = coordinate resolution is 12bit (*)

 *      1 = coordinate resolution is 8bit

 * STRETCH: 0 = SCL_STRETCH function off

 *          1 = SCL_STRETCH function on (*)

 * PU90K: 0 = internal pull-up resistance for touch detection is ~50kohms (*)

 *        1 = internal pull-up resistance for touch detection is ~90kohms

 * DUAL: 0 = dual touch detection off (*)

 *       1 = dual touch detection on

 * PIDAC_OFS: dual touch detection circuit adjustment, it is not necessary

 *            to change this from initial value

/*

 * LDO Register (PAGE=0, ADDR=0x0C, Reset value=0x00)

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   0    |         PVDD[2:0]        |   0    |         AVDD[2:0]        |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * PVDD: output voltage of panel output regulator (=2.000V)

 * AVDD: output voltage of analog circuit regulator (=2.000V)

/*

 * Serial Interface Command Byte 1 (CID=1)

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * |   1    |                 CF                |  CMSK  |  PDM   |  STP   |

 * +--------+--------+--------+--------+--------+--------+--------+--------+

 * CF: conversion function, see table 3 in datasheet p6 (=0000, automatic scan)

 * CMSK: 0 = executes convert function (*)

 *       1 = reads the convert result

 * PDM: 0 = power down after convert function stops (*)

 *      1 = keep power on after convert function stops

 * STP: 1 = abort current conversion and power down, set to "0" automatically

/*

 * The timeout value needs to be larger than INTVL_TIME + tConv4 (sample and

 * conversion time), where tConv4 is calculated by formula:

 * tPON + tDLY1 + (tTIME_ST_ADC + (tADC * tSMPL) * 2 + tDLY2) * 3

 * see figure 8 in datasheet p15 for details of each field.

	/*

	 * compose upper 8 and lower 4 bits into a 12bit value:

	 * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

	 * |            ByteH              |            ByteL              |

	 * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

	 * |b07|b06|b05|b04|b03|b02|b01|b00|b07|b06|b05|b04|b03|b02|b01|b00|

	 * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

	 * |v11|v10|v09|v08|v07|v06|v05|v04|v03|v02|v01|v00| 0 | 0 | 0 | 0 |

	 * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

		/*

		 * calculate Rz (pressure resistance value) by equation:

		 * Rz = Rx * (x/Q) * ((z2/z1) - 1), where

		 * Rx is x-plate resistance,

		 * Q  is the touch screen resolution (8bit = 256, 12bit = 4096)

		 * x, z1, z2 are the measured positions.

	/*

	 * Read touch data and deassert interrupt (will assert again after

	 * INTVL_TIME + tConv4 for continuous touch)

 reset timer for pen up detection */

 take chip out of reset */

 sentinel */ }

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cyttsp_i2c.c

 * Cypress TrueTouch(TM) Standard Product (TTSP) I2C touchscreen driver.

 * For use with Cypress  Txx4xx parts.

 * Supported parts include:

 * TMA4XX

 * TMA1036

 *

 * Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.

 * Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>

 * Copyright (C) 2013 Cypress Semiconductor

 *

 * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm9705.c  --  Codec driver for Wolfson WM9705 AC97 Codec.

 *

 * Copyright 2003, 2004, 2005, 2006, 2007 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

 * Parts Copyright : Ian Molton <spyro@f2s.com>

 *                   Andrew Zabolotny <zap@homelink.ru>

 *                   Russell King <rmk@arm.linux.org.uk>

/*

 * Module parameters

/*

 * Set current used for pressure measurement.

 *

 * Set pil = 2 to use 400uA

 *     pil = 1 to use 200uA and

 *     pil = 0 to disable pressure measurement.

 *

 * This is used to increase the range of values returned by the adc

 * when measureing touchpanel pressure.

/*

 * Set threshold for pressure measurement.

 *

 * Pen down pressure below threshold is ignored.

/*

 * Set adc sample delay.

 *

 * For accurate touchpanel measurements, some settling time may be

 * required between the switch matrix applying a voltage across the

 * touchpanel plate and the ADC sampling the signal.

 *

 * This delay can be set by setting delay = n, where n is the array

 * position of the delay in the array delay_table below.

 * Long delays > 1ms are supported for completeness, but are not

 * recommended.

/*

 * Pen detect comparator threshold.

 *

 * 0 to Vmid in 15 steps, 0 = use zero power comparator with Vmid threshold

 * i.e. 1 =  Vmid/15 threshold

 *      15 =  Vmid/1 threshold

 *

 * Adjust this value if you are having problems with pen detect not

 * detecting any down events.

/*

 * Set adc mask function.

 *

 * Sources of glitch noise, such as signals driving an LCD display, may feed

 * through to the touch screen plates and affect measurement accuracy. In

 * order to minimise this, a signal may be applied to the MASK pin to delay or

 * synchronise the sampling.

 *

 * 0 = No delay or sync

 * 1 = High on pin stops conversions

 * 2 = Edge triggered, edge on pin delays conversion by delay param (above)

 * 3 = Edge triggered, edge on pin starts conversion after delay param

/*

 * ADC sample delay times in uS

 1 AC97 Link frames */

 2                  */

 4                  */

 8                  */

 16                 */

 32                 */

 48                 */

 64                 */

 96                 */

 128                */

 160                */

 192                */

 224                */

 256                */

 288                */

 No delay, switch matrix always on */

/*

 * Delay after issuing a POLL command.

 *

 * The delay is 3 AC97 link frames + the touchpanel settling delay

/*

 * set up the physical settings of the WM9705

	/*

	* mute VIDEO and AUX as they share X and Y touchscreen

	* inputs on the WM9705

 touchpanel pressure current*/

 polling mode sample settling delay */

 WM9705 pdd */

 mask */

 dummy read */

/*

 * Read a sample from the WM9705 adc in polling mode.

 set up digitiser */

 wait 3 AC97 time slots + delay for conversion */

 wait for POLL to go low */

 If PDEN is set, we can get a timeout when pen goes up */

 check we have correct sample */

/*

 * Sample the WM9705 touchscreen in polling mode

/*

 * Enable WM9705 continuous mode, i.e. touch data is streamed across

 * an AC97 slot

 continuous mode */

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * zylonite-wm97xx.c  --  Zylonite Continuous Touch screen driver

 *

 * Copyright 2004, 2007, 2008 Wolfson Microelectronics PLC.

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 * Parts Copyright : Ian Molton <spyro@f2s.com>

 *                   Andrew Zabolotny <zap@homelink.ru>

 *

 * Notes:

 *     This is a wm97xx extended touch driver supporting interrupt driven

 *     and continuous operation on Marvell Zylonite development systems

 *     (which have a WM9713 on board).

 codec id */

 continuous code */

 number of coord reads per read cycle */

 number of coords per second */

 continuous speed index */

/*

 * Pen sampling frequency (Hz) in continuous mode.

/*

 * Pressure readback.

 *

 * Set to 1 to read back pen down pressure

/*

 * AC97 touch data slot.

 *

 * Touch screen readback data ac97 slot

 flush AC97 slot 5 FIFO machines */

	/* When the AC97 queue has been drained we need to allow time

	 * to buffer up samples otherwise we end up spinning polling

	 * for samples.  The controller can't have a suitably low

	 * threshold set to use the notifications it gives.

 are samples valid */

 coordinate is good */

 check we have a codec */

 Go you big red fire engine */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 Touchscreen commands */

 This chip uses custom checksum at the end of data */

 Finger up */

 Touch indication */

 Touch indication */

 The firmware update blob might have changed the resolution. */

 The value reported by the firmware is invalid. */

 Get firmware version */

 Get kernel version */

 Get protocol version */

 Get chip boot mode */

 Wait for firmware to boot and stabilize itself. */

 Firmware does report valid information. */

 Application Mode */

 BootLoader Mode */

 Unknown Mode */

	/*

	 * The firmware ihex blob can never be bigger than 64 kiB, so make this

	 * simple -- allocate a 64 kiB buffer, iterate over the ihex blob records

	 * once, copy them all into this buffer at the right locations, and then

	 * do all operations on this linear buffer.

 The last 32 Byte firmware block can be 0xffe0 */

 Find the last address before DF start address, that is AC end */

 DF end address is the last address in the firmware blob */

 Switch mode between Application and BootLoader */

 Mode already set */

 Unlock writes */

 Select mode (BootLoader or Application) */

 Reboot into bootloader takes a lot of time ... */

 Read back mode */

 Check if mode is correct now. */

 The read_reg already contains suitable delay */

	/*

	 * The DF (dataflash) needs 2 bytes offset for unknown reasons,

	 * the AC (application) has 2 bytes CRC16-CCITT at the end.

 Unlock write to either AC (application) or DF (dataflash) area */

 Check CRC readback */

 Reset the controller */

	/*

	 * Disable touchscreen IRQ, so that we would not get spurious touch

	 * interrupt during firmware update, and so that the IRQ handler won't

	 * trigger and interfere with the firmware update. There is no bit in

	 * the touch controller to disable the IRQs during update, so we have

	 * to do it this way here.

 This may not succeed on first try, so re-try a few times. */

 The bootloader seems to need some time too. */

 This may not succeed on first try, so re-try a few times. */

 Calibrate is present on all ILI2xxx which have calibrate register */

 Firmware/Kernel/Protocol/BootMode is implememted only for ILI251x */

 Tell ISR to quit even if there is a contact. */

 Setup input device */

 Multi touch */

/*

 * Touchscreen driver for the TS-4800 board

 *

 * Copyright (c) 2015 - Savoir-faire Linux

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 polling interval in ms */

 sensor values are 12-bit wide */

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TSC2004/TSC2005 touchscreen driver core

 *

 * Copyright (C) 2006-2010 Nokia Corporation

 * Copyright (C) 2015 QWERTY Embedded Design

 * Copyright (C) 2015 EMAC Inc.

 *

 * Author: Lauri Leukkunen <lauri.leukkunen@nokia.com>

 * based on TSC2301 driver by Klaus K. Pedersen <klaus.k.pedersen@nokia.com>

/*

 * The touchscreen interface operates as follows:

 *

 * 1) Pen is pressed against the touchscreen.

 * 2) TSC200X performs AD conversion.

 * 3) After the conversion is done TSC200X drives DAV line down.

 * 4) GPIO IRQ is received and tsc200x_irq_thread() is scheduled.

 * 5) tsc200x_irq_thread() queues up a transfer to fetch the x, y, z1, z2

 *    values.

 * 6) tsc200x_irq_thread() reports coordinates to input layer and sets up

 *    tsc200x_penup_timer() to be called after TSC200X_PENUP_TIME_MS (40ms).

 * 7) When the penup timer expires, there have not been touch or DAV interrupts

 *    during the last 40ms which means the pen has been lifted.

 *

 * ESD recovery via a hardware reset is done if the TSC200X doesn't respond

 * after a configurable period (in ms) of activity. If esd_timeout is 0, the

 * watchdog is disabled.

 raw copy of previous x,y,z */

 read the coordinates */

 validate position */

 Skip reading if the pressure components are out of range */

       /*

	* Skip point if this is a pen down with the exact same values as

	* the value before pen-up - that implies SPI fed us stale data

	/*

	 * At this point we are happy we have a valid and useful reading.

	 * Remember it for later comparisons. We may now begin downsampling.

 Compute touch pressure resistance using equation #1 */

 only 10us required */

 must be called with ts->mutex held */

 must be called with ts->mutex held */

	/*

	 * Test TSC200X communications via temp high register.

 hardware reset */

 test that the reset really happened */

		/*

		 * If the mutex is taken, it means that disable or enable is in

		 * progress. In that case just reschedule the work. If the work

		 * is not needed, it will be canceled by disable.

 We should be able to read register without disabling interrupts. */

	/*

	 * If we could not read our known value from configuration register 0

	 * then we should reset the controller as if from power-up and start

	 * scanning again.

 re-arm the watchdog */

 Ensure the touchscreen is off */

 SPDX-License-Identifier: GPL-2.0

 STMicroelectronics FTS Touchscreen device driver



 Copyright (c) 2017 Samsung Electronics Co., Ltd.

 Copyright (c) 2017 Andi Shyti <andi@etezian.org>

 I2C commands */

 events */

 multi touch related event masks */

 key related event masks */

	/*

	 * Presence of ledvdd will be used also to check

	 * whether the LED is supported.

/*

 * We can't simply use i2c_smbus_read_i2c_block_data because we

 * need to read more than 255 bytes (

 I can still use only the touch screen */

	/*

	 * The datasheet does not specify the power on time, but considering

	 * that the reset time is < 10ms, I sleep 20ms to be sure

 optional tuning */

 optional tuning */

	/*

	 * At this point no one is using the touchscreen

	 * and I don't really care about the return value

/* This function is void because I don't want to prevent using the touch key

 * only because the LEDs don't get registered

 get the regulator for powering the leds on */

	/*

	 * stmfts_power_on expects interrupt to be disabled, but

	 * at this point the device is still off and I do not trust

	 * the status of the irq line that can generate some spurious

	 * interrupts. To be on the safe side it's better to not enable

	 * the interrupts during their request.

			/*

			 * Even if the LEDs have failed to be initialized and

			 * used in the driver, I can still use the device even

			 * without LEDs. The ledvdd regulator pointer will be

			 * used as a flag.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * mcs5000_ts.c - Touchscreen driver for MELFAS MCS-5000 controller

 *

 * Copyright (C) 2009 Samsung Electronics Co.Ltd

 * Author: Joonyoung Shim <jy0922.shim@samsung.com>

 *

 * Based on wm97xx-core.c

 Registers */

 Touchscreen absolute values */

 Each client has this additional data */

 TODO */

 TODO */

 TODO */

 Touch reset & sleep mode */

 Touch size */

 Touch active mode & 80 report rate */

 Touch sleep mode */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * iNexio serial touchscreen driver

 *

 * Copyright (c) 2008 Richard Lemon

 * Based on the mtouch driver (c) Vojtech Pavlik and Dan Streetman

/*

 * 2008/06/19 Richard Lemon <richard@codelemon.com>

 *   Copied mtouch.c and edited for iNexio protocol

/*

 * Definitions & global arrays.

 todo: check specs for max length of all responses */

/*

 * Per-touchscreen data.

/*

 * inexio_disconnect() is the opposite of inexio_connect()

/*

 * inexio_connect() is the routine that is called when someone adds a

 * new serio device that supports iNexio protocol and registers it as

 * an input device. This is usually accomplished using inputattach.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0

 Melfas MMS114/MMS136/MMS152 touchscreen device driver



 Copyright (c) 2012 Samsung Electronics Co., Ltd.

 Author: Joonyoung Shim <jy0922.shim@samsung.com>

 Write only registers */

 Read only registers */

 Minimum delay time is 50us between stop and start signal of i2c */

 200ms needs after power on */

 Touchscreen absolute values */

 Touch type */

 Use cache data for mode control register(write only) */

 Write register */

 Read data */

 MMS136 has slightly different event size */

 If active is false, sleep mode */

 MMS114, MMS134S and MMS136 have configuration and power on registers */

		/*

		 * The firmware handles movement and pressure fuzz, so

		 * don't duplicate that in software.

 Release all touch */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for I2C connected EETI EXC3000 multiple touch controller

 *

 * Copyright (C) 2017 Ahmet Inan <inan@distec.de>

 *

 * minimal implementation based on egalax_ts.c and egalax_i2c.c

 Read 2nd frame to get the rest of the contacts. */

 2nd chunk must have number of contacts set to 0. */

	/*

	 * We read full state successfully, no contacts will be "stuck".

 Schedule a timer to release "stuck" contacts */

 Schedule a timer to release "stuck" contacts */

 query bootloader info */

	/*

	 * If the bootloader version is non-zero then the device is in

	 * bootloader mode and won't answer a query for the application FW

	 * version, so we just use the bootloader version info.

	/*

	 * IÂ²C does not have built-in recovery, so retry on failure. This

	 * ensures, that the device probe will not fail for temporary issues

	 * on the bus.  This is not needed for the sysfs calls (userspace

	 * will receive the error code and can start another query) and

	 * cannot be done for touch events (but that only means loosing one

	 * or two touch events anyways).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Hampshire serial touchscreen driver

 *

 * Copyright (c) 2010 Adam Bennett

 * Based on the dynapro driver (c) Tias Guns

/*

 * 2010/04/08 Adam Bennett <abennett72@gmail.com>

 *   Copied dynapro.c and edited for Hampshire 4-byte protocol

/*

 * Definitions & global arrays.

/*

 * Per-touchscreen data.

/*

 * hampshire_connect() is the routine that is called when someone adds a

 * new serio device that supports hampshire protocol and registers it as

 * an input device. This is usually accomplished using inputattach.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2006-2008 Michael Hennerich, Analog Devices Inc.

 *

 * Description:	AD7877 based touchscreen, sensor (ADCs), DAC and GPIO driver

 * Based on:	ads7846.c

 *

 * Bugs:        Enter bugs at http://blackfin.uclinux.org/

 *

 * History:

 * Copyright (c) 2005 David Brownell

 * Copyright (c) 2006 Nokia Corporation

 * Various changes: Imre Deak <imre.deak@nokia.com>

 *

 * Using code from:

 *  - corgi_ts.c

 *	Copyright (C) 2004-2005 Richard Purdie

 *  - omap_ts.[hc], ads7846.h, ts_osk.c

 *	Copyright (C) 2002 MontaVista Software

 *	Copyright (C) 2004 Texas Instruments

 *	Copyright (C) 2005 Dirk Behme

 DAC Register Default RANGE 0 to Vcc, Volatge Mode, DAC On */

 If gpio3 is set AUX3/GPIO3 acts as GPIO Output */

 Control REG 2 */

 Control REG 1 */

 non-differential */

 differential */

 Do not convert */

 Single channel conversion */

 Sequence 0 in Slave Mode */

 Sequence 1 in Master Mode */

/*

 * Non-touchscreen sensors only use single-ended conversions.

	/*

	 * DMA (thus cache coherency maintenance) requires the

	 * transfer buffers to live in their own cache lines.

 P: mutex */

 P: mutex */

 P: mutex */

 P: lock */

	/*

	 * DMA (thus cache coherency maintenance) requires the

	 * transfer buffers to live in their own cache lines.

 activate reference, so it has time to settle; */

REF OFF*/

DEFAULT*/

	/* group all the transfers together, so we can't interfere with

	 * reading touchscreen state; disable penirq while sampling

	/*

	 * The samples processed here are already preprocessed by the AD7877.

	 * The preprocessing function consists of an averaging filter.

	 * The combination of 'first conversion delay' and averaging provides a robust solution,

	 * discarding the spurious noise in the signal and keeping only the data of interest.

	 * The size of the averaging filter is programmable. (dev.platform_data, see linux/spi/ad7877.h)

	 * Other user-programmable conversion controls include variable acquisition time,

	 * and first conversion delay. Up to 16 averages can be taken per conversion.

 compute touch pressure resistance using equation #1 */

		/*

		 * Sample found inconsistent, pressure is beyond

		 * the maximum. Don't report it to user space.

	/*

	 * We know the chip's in lowpower mode since we always

	 * leave it that way after every request

 Send ZERO */

 don't exceed max specified SPI CLK frequency */

 Request AD7877 /DAV GPIO interrupt */

 SPDX-License-Identifier: GPL-2.0

/*

 * Raspberry Pi firmware based touchscreen driver

 *

 * Copyright (C) 2015, 2017 Raspberry Pi

 * Copyright (C) 2018 Nicolas Saenz Julienne <nsaenzjulienne@suse.de>

 60fps */

 Not supported */

 Not supported */

	/*

	 * We poll the memory based register copy of the touchscreen chip using

	 * the number of points register to know whether the copy has been

	 * updated (we write 99 to the memory copy, the GPU will write between

	 * 0 - 10 points)

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Touchscreen driver for Dialog Semiconductor DA9034

 *

 * Copyright (C) 2006-2008 Marvell International Ltd.

 *	Fengwei Yin <fengwei.yin@marvell.com>

 *	Bin Yang  <bin.yang@marvell.com>

 *	Eric Miao <eric.miao@marvell.com>

 wait for pendown */

 TSI busy sampling */

 sample available */

 Wait to start next sample */

		/* Enable auto measurement of the TSI, this will

		 * automatically disable pen down detection

		/* Disable auto measurement of the TSI, so that

		 * pen down status will be available

		/* FIXME: PEN_{UP/DOWN} events are expected to be

		 * available by stopping TSI, but this is found not

		 * always true, delay and simulate such an event

		 * here is more reliable

 Enable ADC LDO */

 TSI_DELAY: 3 slots, TSI_SKIP: 3 slots */

 Disable ADC LDO */

 fallback into default */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Freescale MXS LRADC touchscreen driver

 *

 * Copyright (c) 2012 DENX Software Engineering, GmbH.

 * Copyright (c) 2017 Ksenija Stanojevic <ksenija.stanojevic@gmail.com>

 *

 * Authors:

 *  Marek Vasut <marex@denx.de>

 *  Ksenija Stanojevic <ksenija.stanojevic@gmail.com>

/*

 * Touchscreen handling

	/*

	 * When the touchscreen is enabled, we give it two private virtual

	 * channels: #6 and #7. This means that only 6 virtual channels (instead

	 * of 8) will be available for buffered capture.

 state machine */

 handle touchscreen's physical behaviour */

 samples per coordinate */

 time clocks between samples */

 time in clocks to wait after the plates where switched */

	/*

	 * prepare for oversampling conversion

	 *

	 * from the datasheet:

	 * "The ACCUMULATE bit in the appropriate channel register

	 * HW_LRADC_CHn must be set to 1 if NUM_SAMPLES is greater then 0;

	 * otherwise, the IRQs will not fire."

	/* from the datasheet:

	 * "Software must clear this register in preparation for a

	 * multi-cycle accumulation.

	/*

	 * prepare the delay/loop unit according to the oversampling count

	 *

	 * from the datasheet:

	 * "The DELAY fields in HW_LRADC_DELAY0, HW_LRADC_DELAY1,

	 * HW_LRADC_DELAY2, and HW_LRADC_DELAY3 must be non-zero; otherwise,

	 * the LRADC will not trigger the delay group."

	/*

	 * after changing the touchscreen plates setting

	 * the signals need some initial time to settle. Start the

	 * SoC's delay unit and start the conversion later

	 * and automatically.

/*

 * Pressure detection is special:

 * We want to do both required measurements for the pressure detection in

 * one turn. Use the hardware features to chain both conversions and let the

 * hardware report one interrupt if both conversions are done

	/*

	 * prepare for oversampling conversion

	 *

	 * from the datasheet:

	 * "The ACCUMULATE bit in the appropriate channel register

	 * HW_LRADC_CHn must be set to 1 if NUM_SAMPLES is greater then 0;

	 * otherwise, the IRQs will not fire."

	/* from the datasheet:

	 * "Software must clear this register in preparation for a

	 * multi-cycle accumulation.

 prepare the delay/loop unit according to the oversampling count */

	/*

	 * after changing the touchscreen plates setting

	 * the signals need some initial time to settle. Start the

	 * SoC's delay unit and start the conversion later

	 * and automatically.

 simply scale the value from 0 ... max ADC resolution */

/*

 * YP(open)--+-------------+

 *	     |		   |--+

 *	     |		   |  |

 *    YM(-)--+-------------+  |

 *	       +--------------+

 *	       |	      |

 *	   XP(weak+)	    XM(open)

 *

 * "weak+" means 200k Ohm VDDIO

 * (-) means GND

	/*

	 * In order to detect a touch event the 'touch detect enable' bit

	 * enables:

	 *  - a weak pullup to the X+ connector

	 *  - a strong ground at the Y- connector

/*

 * YP(meas)--+-------------+

 *	     |		   |--+

 *	     |		   |  |

 * YM(open)--+-------------+  |

 *	       +--------------+

 *	       |	      |

 *	     XP(+)	    XM(-)

 *

 * (+) means here 1.85 V

 * (-) means here GND

/*

 *   YP(+)--+-------------+

 *	    |		  |--+

 *	    |		  |  |

 *   YM(-)--+-------------+  |

 *	      +--------------+

 *	      |		     |

 *	   XP(open)	   XM(meas)

 *

 * (+) means here 1.85 V

 * (-) means here GND

/*

 *    YP(+)--+-------------+

 *	     |		   |--+

 *	     |		   |  |

 * YM(meas)--+-------------+  |

 *	       +--------------+

 *	       |	      |

 *	    XP(meas)	    XM(-)

 *

 * (+) means here 1.85 V

 * (-) means here GND

	/*

	 * start with the Y-pos, because it uses nearly the same plate

	 * settings like the touch detection

	/*

	 * start a dummy conversion to burn time to settle the signals

	 * note: we are not interested in the conversion's value

/*

 * in order to avoid false measurements, report only samples where

 * the surface is still touched after the position measurement

 if it is still touched, report the sample */

 if it is even still touched, continue with the next measurement */

 signal the release */

 if it is released, wait for the next touch via IRQ */

 touchscreen's state machine */

 IRQ Handling */

 Make sure we don't clear the next conversion's interrupt. */

 Enable the touch-detect circuitry. */

 stop all interrupts from firing */

 Power-down touchscreen touch-detect circuitry. */

 Configure the touchscreen type */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MicroTouch (3M) serial touchscreen driver

 *

 * Copyright (c) 2004 Vojtech Pavlik

/*

 * 2005/02/19 Dan Streetman <ddstreet@ieee.org>

 *   Copied elo.c and edited for MicroTouch protocol

/*

 * Definitions & global arrays.

 todo: check specs for max length of all responses */

/*

 * Per-touchscreen data.

 FIXME - process response */

/*

 * mtouch_disconnect() is the opposite of mtouch_connect()

/*

 * mtouch_connect() is the routine that is called when someone adds a

 * new serio device that supports MicroTouch (Format Tablet) protocol and registers it as

 * an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016, Jelle van der Waa <jelle@vdwaa.nl>

	/*

	 * First 3 bytes are an identifier, two bytes of finger data.

	 * X, Y data per finger is 4 bytes.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AD7879/AD7889 based touchscreen and GPIO driver

 *

 * Copyright (C) 2008-2010 Michael Hennerich, Analog Devices Inc.

 *

 * History:

 * Copyright (c) 2005 David Brownell

 * Copyright (c) 2006 Nokia Corporation

 * Various changes: Imre Deak <imre.deak@nokia.com>

 *

 * Using code from:

 *  - corgi_ts.c

 *	Copyright (C) 2004-2005 Richard Purdie

 *  - omap_ts.[hc], ads7846.h, ts_osk.c

 *	Copyright (C) 2002 MontaVista Software

 *	Copyright (C) 2004 Texas Instruments

 *	Copyright (C) 2005 Dirk Behme

 *  - ad7877.c

 *	Copyright (C) 2006-2008 Analog Devices Inc.

 Control REG 1 */

 Do not convert */

 Single channel conversion */

 Sequence 0 in Slave Mode */

 Sequence 1 in Master Mode */

 PENIRQ disabled INT enabled */

 Control REG 2 */

 non-differential */

 differential */

 Control REG 3 */

 P: input->mutex */

 P: input->mutex */

	/*

	 * The samples processed here are already preprocessed by the AD7879.

	 * The preprocessing function consists of a median and an averaging

	 * filter.  The combination of these two techniques provides a robust

	 * solution, discarding the spurious noise in the signal and keeping

	 * only the data of interest.  The size of both filters is

	 * programmable. (dev.platform_data, see linux/platform_data/ad7879.h)

	 * Other user-programmable conversion controls include variable

	 * acquisition time, and first conversion delay. Up to 16 averages can

	 * be taken per conversion.

 compute touch pressure resistance using equation #1 */

		/*

		 * Sample found inconsistent, pressure is beyond

		 * the maximum. Don't report it to user space.

		/*

		 * Note that we delay reporting events by one sample.

		 * This is done to avoid reporting last sample of the

		 * touch sequence, which may be incomplete if finger

		 * leaves the surface before last reading is taken.

 Touch continues */

 protected by input->mutex */

 protected by input->mutex */

 Do not create a chip unless flagged for it */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ROHM BU21023/24 Dual touch support resistive touch screen driver

 * Copyright (C) 2012 ROHM CO.,LTD.

 msec */

 zero for infinite */

/*

 * BU21023GUL/BU21023MUV/BU21024FV-M registers map

/*

 * Value for VADOUT_*_L

/*

 * Value for PRM*_*_L

/*

 * Value for POS_*_L

/*

 * Values for INT_*

/*

 * Values for ERR_*

 Not supported by BU21023 */

 10 / (reg + 1) MHz */

 The minimum value is 4 */

/*

 * rohm_i2c_burst_read - execute combined I2C message for ROHM BU21023/24

 * @client: Handle to ROHM BU21023/24

 * @start: Where to start read address from ROHM BU21023/24

 * @buf: Where to store read data from ROHM BU21023/24

 * @len: How many bytes to read

 *

 * Returns negative errno, else zero on success.

 *

 * Note

 * In BU21023/24 burst read, stop condition is needed after "address write".

 * Therefore, transmission is performed in 2 steps.

 for PRM1_X_H(0x08)-TOUCH(0x28) */

 wait 2 sampling for update */

 generate calibration parameter */

 generate adjustment parameter */

 X axis ajust */

 Y axis ajust */

 generate calibration setting value */

 convert for register format */

		/*

		 * force calibration sequcence

 clear all interrupts */

		/*

		 * Wait for the status change of calibration, max 10 sampling

 calibration data enable */

 wait 10 sampling */

 Clear all interrupts */

 for POS_X1_H(0x20)-TOUCH_GESTURE(0x29) */

 Clear all interrupts */

 generate coordinates */

 settings for retry */

 firmware load to the device */

 check firmware load result */

 clear all interrupts */

	/*

	 * Wait 200usec for reset

 Release analog reset */

 Waiting for the analog warm-up, max. 200usec */

 clear all interrupts */

	/*

	 * Panel setup, these values change with the panel.

 Fixed value settings */

	/*

	 * Manual calibration results are not changed in same environment.

	 * If the force calibration is performed,

	 * the controller will not require calibration request interrupt

	 * when the typical values are set to the calibration registers.

 Clear all interrupts */

 Enable coordinates update interrupt */

 controller CPU power on */

 Turn off CPU just in case */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Wacom Penabled Driver for I2C

 *

 * Copyright (c) 2011 - 2013 Tatsunosuke Tobita, Wacom.

 * <tobita.tatsunosuke@wacom.co.jp>

 Bitmasks (for data[3]) */

 Registers */

 Disable the IRQ, we'll enable it in wac_i2c_open() */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2021

 * Author(s): Giulio Benetti <giulio.benetti@benettiengineering.com>

 sentinel */ }

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Cypress CY8CTMA140 (TMA140) touchscreen

 * (C) 2020 Linus Walleij <linus.walleij@linaro.org>

 * (C) 2007 Cypress

 * (C) 2007 Google, Inc.

 *

 * Inspired by the tma140_skomer.c driver in the Samsung GT-S7710 code

 * drop. The GT-S7710 is codenamed "Skomer", the code also indicates

 * that the same touchscreen was used in a product called "Lucas".

 *

 * The code drop for GT-S7710 also contains a firmware downloader and

 * 15 (!) versions of the firmware drop from Cypress. But here we assume

 * the firmware got downloaded to the touchscreen flash successfully and

 * just use it to read the fingers. The shipped vendor driver does the

 * same.

 This message also fits some bytes for touchkeys, if used */

		/*

		 * Odd contacts have contact ID in the lower nibble of

		 * the preceding byte, whereas even contacts have it in

		 * the upper nibble of the following byte.

 Called from the registered devm action */

 One byte for width 0..255 so this is the limit */

	/*

	 * This sets up event max/min capabilities and fuzz.

	 * Some DT properties are compulsory so we do not need

	 * to provide defaults for X/Y max or pressure max.

	 *

	 * We just initialize a very simple MT touchscreen here,

	 * some devices use the capability of this touchscreen to

	 * provide touchkeys, and in that case this needs to be

	 * extended to handle touchkey input.

	 *

	 * The firmware takes care of finger tracking and dropping

	 * invalid ranges.

	/*

	 * VCPIN is the analog voltage supply

	 * VDD is the digital voltage supply

	 * since the voltage range of VDD overlaps that of VCPIN,

	 * many designs to just supply both with a single voltage

	 * source of ~3.3 V.

 sentinel */ }

 sentinel */ }

/*

* Copyright (C) 2015 Broadcom Corporation

*

* This program is free software; you can redistribute it and/or

* modify it under the terms of the GNU General Public License as

* published by the Free Software Foundation version 2.

*

* This program is distributed "as is" WITHOUT ANY WARRANTY of any

* kind, whether express or implied; without even the implied warranty

* of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the

* GNU General Public License for more details.

 Value given by controller for invalid coordinate. */

 Register offsets */

 Bit values for INTERRUPT_MASK and INTERRUPT_STATUS regs */

 Bit values for CONTROLLER_STATUS reg1 */

 Shift values for control reg1 */

 Shift values for coordinates from fifo */

 Bit values for REGCTL2 */

 Each step is 1024 us.  Valid 1-256 */

  Each step is 512 us.  Valid 0-255 */

	/*

	 * The settling duration (in ms) is the amount of time the tsc

	 * waits to allow the voltage to settle after turning on the

	 * drivers in detection mode. Valid values: 0-11

	 *   0 =  0.008 ms

	 *   1 =  0.01 ms

	 *   2 =  0.02 ms

	 *   3 =  0.04 ms

	 *   4 =  0.08 ms

	 *   5 =  0.16 ms

	 *   6 =  0.32 ms

	 *   7 =  0.64 ms

	 *   8 =  1.28 ms

	 *   9 =  2.56 ms

	 *   10 = 5.12 ms

	 *   11 = 10.24 ms

 touch timeout in sample counts */

	/*

	 * Number of data samples which are averaged before a final data point

	 * is placed into the FIFO

 FIFO threshold */

 Optional standard touchscreen properties. */

/*

 * Set default values the same as hardware reset values

 * except for fifo_threshold with is set to 1.

 1 to 256 */

 0 to 255 */

 0 to 11 */

 0 to 255 */

 entry 5 = 32 pts */

 0 to 31 */

 Clear all interrupt status bits, write-1-clear */

 Pen up/down */

 coordinates in FIFO exceed the theshold */

			/*

			 * The x and y coordinate are 16 bits each

			 * with the x in the lower 16 bits and y in the

			 * upper 16 bits.

 We only want to retain the 12 msb of the 16 */

 Adjust x y according to LCD tsc mount angle. */

 Enable clock */

	/*

	 * Interrupt is generated when:

	 *  FIFO reaches the int_th value, and pen event(up/down)

 Initialize control reg1 */

 Try to clear all interrupt status */

 Initialize control reg2 */

 PWR up LDO */

 PWR up ADC */

 PWR up BGP */

 PWR up TS */

	/*

	 * Disable FIFO int_th and pen event(up/down)Interrupts only

	 * as the interrupt mask register is shared between ADC, TS and

	 * flextimer.

 Only power down touch screen controller */

 Parse optional properties. */

 touchscreen controller memory mapped regs via syscon*/

 Set input device info  */

 get interrupt */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for ELAN eKTF2127 i2c touchscreen controller

 *

 * For this driver the layout of the Chipone icn8318 i2c

 * touchscreencontroller is used.

 *

 * Author:

 * Michel Verlaan <michel.verl@gmail.com>

 * Siebren Vroegindeweij <siebren.vroegindeweij@hotmail.com>

 *

 * Original chipone_icn8318 driver:

 * Hans de Goede <hdegoede@redhat.com>

 Packet header defines (first byte of data send / received) */

 Register defines (second byte of data send / received) */

 2 bytes header + 5 * 3 bytes coordinates + 3 bytes pressure info + footer */

 Request dimension */

 Read response */

 This requests the gpio *and* turns on the touchscreen controller */

 Read hello (ignore result, depends on initial power state) */

 Read resolution from chip */

 Stop device till opened */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Samsung S3C24XX touchscreen driver

 *

 * Copyright 2004 Arnaud Patard <arnaud.patard@rtp-net.org>

 * Copyright 2008 Ben Dooks <ben-linux@fluff.org>

 * Copyright 2009 Simtec Electronics <linux@simtec.co.uk>

 *

 * Additional work by Herbert PÃ¶tzl <herbert@13thfloor.at> and

 * Harald Welte <laforge@openmoko.org>

 ADCTSC Register Bits */

 ADCDAT0 Bits */

 ADCDAT1 Bits */

 HAS ADCCLRINTPNDNUP */

 Per-touchscreen data. */

/**

 * struct s3c2410ts - driver touchscreen state.

 * @client: The ADC client we registered with the core driver.

 * @dev: The device we are bound to.

 * @input: The input device we registered with the input subsystem.

 * @clock: The clock for the adc.

 * @io: Pointer to the IO base.

 * @xp: The accumulated X position data.

 * @yp: The accumulated Y position data.

 * @irq_tc: The interrupt number for pen up/down interrupt

 * @count: The number of samples collected.

 * @shift: The log2 of the maximum count to read in one go.

 * @features: The features supported by the TSADC MOdule.

/**

 * get_down - return the down state of the pen

 * @data0: The data read from ADCDAT0 register.

 * @data1: The data read from ADCDAT1 register.

 *

 * Return non-zero if both readings show that the pen is down.

 returns true if both data values show stylus down */

/**

 * stylus_irq - touchscreen stylus event interrupt

 * @irq: The interrupt number

 * @dev_id: The device ID.

 *

 * Called when the IRQ_TC is fired for a pen up or down event.

	/* TODO we should never get an interrupt with down set while

	 * the timer is running, but maybe we ought to verify that the

 Clear pen down/up interrupt */

/**

 * s3c24xx_ts_conversion - ADC conversion callback

 * @client: The client that was registered with the ADC core.

 * @data0: The reading from ADCDAT0.

 * @data1: The reading from ADCDAT1.

 * @left: The number of samples left.

 *

 * Called when a conversion has finished.

	/* From tests, it seems that it is unlikely to get a pen-up

	 * event during the conversion process which means we can

	 * ignore any pen-up events with less than the requisite

	 * count done.

	 *

	 * In several thousand conversions, no pen-ups where detected

	 * before count completed.

/**

 * s3c24xx_ts_select - ADC selection callback.

 * @client: The client that was registered with the ADC core.

 * @select: The reason for select.

 *

 * Called when the ADC core selects (or deslects) us as a client.

/**

 * s3c2410ts_probe - device core probe entry point

 * @pdev: The device we are being bound to.

 *

 * Initialise, find and allocate any resources we need to run and then

 * register with the ADC and input systems.

 Initialise input stuff */

 inititalise the gpio */

 Initialise registers */

 All went ok, so register to the input system */

/**

 * s3c2410ts_remove - device core removal entry point

 * @pdev: The device we are being removed from.

 *

 * Free up our state ready to be removed.

 Initialise registers */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm9713.c  --  Codec touch driver for Wolfson WM9713 AC97 Codec.

 *

 * Copyright 2003, 2004, 2005, 2006, 2007, 2008 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

 * Parts Copyright : Ian Molton <spyro@f2s.com>

 *                   Andrew Zabolotny <zap@homelink.ru>

 *                   Russell King <rmk@arm.linux.org.uk>

/*

 * Module parameters

/*

 * Set internal pull up for pen detect.

 *

 * Pull up is in the range 1.02k (least sensitive) to 64k (most sensitive)

 * i.e. pull up resistance = 64k Ohms / rpu.

 *

 * Adjust this value if you are having problems with pen detect not

 * detecting any down event.

/*

 * Set current used for pressure measurement.

 *

 * Set pil = 2 to use 400uA

 *     pil = 1 to use 200uA and

 *     pil = 0 to disable pressure measurement.

 *

 * This is used to increase the range of values returned by the adc

 * when measureing touchpanel pressure.

/*

 * Set threshold for pressure measurement.

 *

 * Pen down pressure below threshold is ignored.

/*

 * Set adc sample delay.

 *

 * For accurate touchpanel measurements, some settling time may be

 * required between the switch matrix applying a voltage across the

 * touchpanel plate and the ADC sampling the signal.

 *

 * This delay can be set by setting delay = n, where n is the array

 * position of the delay in the array delay_table below.

 * Long delays > 1ms are supported for completeness, but are not

 * recommended.

/*

 * Set five_wire = 1 to use a 5 wire touchscreen.

 *

 * NOTE: Five wire mode does not allow for readback of pressure.

/*

 * Set adc mask function.

 *

 * Sources of glitch noise, such as signals driving an LCD display, may feed

 * through to the touch screen plates and affect measurement accuracy. In

 * order to minimise this, a signal may be applied to the MASK pin to delay or

 * synchronise the sampling.

 *

 * 0 = No delay or sync

 * 1 = High on pin stops conversions

 * 2 = Edge triggered, edge on pin delays conversion by delay param (above)

 * 3 = Edge triggered, edge on pin starts conversion after delay param

/*

 * Coordinate Polling Enable.

 *

 * Set to 1 to enable coordinate polling. e.g. x,y[,p] is sampled together

 * for every poll.

/*

 * ADC sample delay times in uS

 1 AC97 Link frames */

 2 */

 4 */

 8 */

 16 */

 32 */

 48 */

 64 */

 96 */

 128 */

 160 */

 192 */

 224 */

 256 */

 288 */

 No delay, switch matrix always on */

/*

 * Delay after issuing a POLL command.

 *

 * The delay is 3 AC97 link frames + the touchpanel settling delay

/*

 * set up the physical settings of the WM9713

 default values */

 rpu */

 Five wire panel? */

 touchpanel pressure */

 sample settling delay */

 mask */

 dummy read */

/*

 * Read a sample from the WM9713 adc in polling mode.

 set up digitiser */

 WM97XX_ADCSEL_* channels need to be converted to WM9713 format */

 wait 3 AC97 time slots + delay for conversion */

 wait for POLL to go low */

 If PDEN is set, we can get a timeout when pen goes up */

 check we have correct sample */

/*

 * Read a coordinate from the WM9713 adc in polling mode.

 set up digitiser */

 wait 3 AC97 time slots + delay for conversion */

 wait for POLL to go low */

 If PDEN is set, we can get a timeout when pen goes up */

 read back data */

 check we have correct sample */

/*

 * Sample the WM9713 touchscreen in polling mode

/*

 * Enable WM9713 continuous mode, i.e. touch data is streamed across

 * an AC97 slot

 continuous mode */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ICS MK712 touchscreen controller driver

 *

 * Copyright (c) 1999-2002 Transmeta Corporation

 * Copyright (c) 2005 Rick Koch <n1gp@hotmail.com>

 * Copyright (c) 2005 Vojtech Pavlik <vojtech@suse.cz>

/*

 * This driver supports the ICS MicroClock MK712 TouchScreen controller,

 * found in Gateway AOL Connected Touchpad computers.

 *

 * Documentation for ICS MK712 can be found at:

 *	https://www.idt.com/general-parts/mk712-touch-screen-controller

/*

 * 1999-12-18: original version, Daniel Quinlan

 * 1999-12-19: added anti-jitter code, report pen-up events, fixed mk712_poll

 *             to use queue_empty, Nathan Laredo

 * 1999-12-20: improved random point rejection, Nathan Laredo

 * 2000-01-05: checked in new anti-jitter code, changed mouse protocol, fixed

 *             queue code, added module options, other fixes, Daniel Quinlan

 * 2002-03-15: Clean up for kernel merge <alan@redhat.com>

 *             Fixed multi open race, fixed memory checks, fixed resource

 *             allocation, fixed close/powerdown bug, switched to new init

 * 2005-01-18: Ported to 2.6 from 2.4.28, Rick Koch

 * 2005-02-05: Rewritten for the input layer, Vojtech Pavlik

 *

 Also 0x200, 0x208, 0x300 */

 Also 12, 14, 15 */

 eight 8-bit registers */

 status */

 control */

 Reset */

 187 points per second */

 Sanity check */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * mainstone-wm97xx.c  --  Mainstone Continuous Touch screen driver for

 *                         Wolfson WM97xx AC97 Codecs.

 *

 * Copyright 2004, 2007 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

 * Parts Copyright : Ian Molton <spyro@f2s.com>

 *                   Andrew Zabolotny <zap@homelink.ru>

 *

 * Notes:

 *     This is a wm97xx extended touch driver to capture touch

 *     data in a continuous manner on the Intel XScale architecture

 *

 *  Features:

 *       - codecs supported:- WM9705, WM9712, WM9713

 *       - processors supported:- Intel XScale PXA25x, PXA26x, PXA27x

 codec id */

 continuous code */

 number of coord reads per read cycle */

 number of coords per second */

 continuous speed index */

/*

 * Pen sampling frequency (Hz) in continuous mode.

/*

 * Pen down detection.

 *

 * This driver can either poll or use an interrupt to indicate a pen down

 * event. If the irq request fails then it will fall back to polling mode.

/*

 * Pressure readback.

 *

 * Set to 1 to read back pen down pressure

/*

 * AC97 touch data slot.

 *

 * Touch screen readback data ac97 slot

 flush AC97 slot 5 FIFO on pxa machines */

	/* When the AC97 queue has been drained we need to allow time

	 * to buffer up samples otherwise we end up spinning polling

	 * for samples.  The controller can't have a suitably low

	 * threshold set to use the notifications it gives.

 are samples valid */

 coordinate is good */

 check we have a codec */

 Go you big red fire engine */

 IRQ driven touchscreen is used on Palm hardware */

		/* There is some obscure mutant of WM9712 interbred with WM9713

 pen irq not supported */

 codec specific irq config */

 use PEN_DOWN GPIO 13 to assert IRQ on GPIO line 2 */

 codec specific deconfig */

 Module information */

 SPDX-License-Identifier: GPL-2.0



 Freescale i.MX6UL touchscreen controller driver



 Copyright (C) 2015 Freescale Semiconductor, Inc.

 ADC configuration registers field define */

 ADC registers */

 TSC registers */

 TSC configuration registers field define */

/*

 * TSC module need ADC to get the measure value. So

 * before config TSC, we should initialize ADC module.

 enable calibration interrupt */

 start ADC calibration */

 TSC need the ADC work in hardware trigger */

/*

 * This is a TSC workaround. Currently TSC misconnect two

 * ADC channels, this function remap channel configure for

 * hardware trigger.

/*

 * TSC setting, confige the pre-charge time and measure delay time.

 * different touch screen may need different pre-charge time and

 * measure delay time.

 start sense detection */

 TSC controller enters to idle status */

 ADC controller enters to stop mode */

 Delay some time (max 2ms), wait the pre-charge done. */

 write 1 to clear the bit measure-signal */

 It's a HW self-clean bit. Set this bit and start sense detection */

		/*

		 * In detect mode, we can get the xnur gpio value,

		 * otherwise assume contact is stiull active.

 value unused; initialize anyway */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Fujitsu serial touchscreen driver

 *

 * Copyright (c) Dmitry Torokhov <dtor@mail.ru>

/*

 * Per-touchscreen data.

/*

 * Decode serial data (5 bytes per packet)

 * First byte

 * 1 C 0 0 R S S S

 * Where C is 1 while in calibration mode (which we don't use)

 * R is 1 when no coordinate corection was done.

 * S are button state

 resync skip until start of frame */

 resync skip garbage */

/*

 * fujitsu_disconnect() is the opposite of fujitsu_connect()

/*

 * fujitsu_connect() is the routine that is called when someone adds a

 * new serio device that supports the Fujitsu protocol and registers it

 * as input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Philips UCB1400 touchscreen driver

 *

 *  Author:	Nicolas Pitre

 *  Created:	September 25, 2006

 *  Copyright:	MontaVista Software, Inc.

 *

 * Spliting done by: Marek Vasut <marek.vasut@gmail.com>

 * If something doesn't work and it worked before spliting, e-mail me,

 * dont bother Nicolas please ;-)

 *

 * This code is heavily based on ucb1x00-*.c copyrighted by Russell King

 * covering the UCB1100, UCB1200 and UCB1300..  Support for the UCB1400 has

 * been made separate from ucb1x00-core/ucb1x00-ts on Russell's request.

 ms */

 us */

 us */

 Switch to interrupt mode. */

/*

 * Switch to pressure mode, and read pressure.  We don't need to wait

 * here, since both plates are being driven.

/*

 * Switch to X position mode and measure Y plate.  We switch the plate

 * configuration in pressure mode, then switch to position mode.  This

 * gives a faster response time.  Even so, we need to wait about 55us

 * for things to stabilise.

/*

 * Switch to Y position mode and measure X plate.  We switch the plate

 * configuration in pressure mode, then switch to position mode.  This

 * gives a faster response time.  Even so, we need to wait about 55us

 * for things to stabilise.

/*

 * Switch to X plate resistance mode.  Set MX to ground, PX to

 * supply.  Measure current.

/*

 * Switch to Y plate resistance mode.  Set MY to ground, PY to

 * supply.  Measure current.

/*

 * A restriction with interrupts exists when using the ucb1400, as

 * the codec read/write routines may sleep while waiting for codec

 * access completion and uses semaphores for access control to the

 * AC97 bus. Therefore the driver is forced to use threaded interrupt

 * handler.

 Start with a small delay before checking pendown state */

 Switch back to interrupt mode. */

 Signal IRQ thread to stop polling and disable the handler. */

 Must be called with ts->lock held */

 Tell IRQ thread that it may poll the device. */

/*

 * Try to probe our interrupt, rather than relying on lots of

 * hard-coded machine dependencies.

 Enable the ADC interrupt. */

 Cause an ADC interrupt. */

 Wait for the conversion to complete. */

 Disable and clear interrupt. */

 Read triggered interrupt. */

 Only in case the IRQ line wasn't supplied, try detecting it */

	/*

	 * Enable ADC filter to prevent horrible jitter on Colibri.

	 * This also further reduces jitter on boards where ADCSYNC

	 * pin is connected.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Semtech SX8654 I2C touchscreen controller.

 *

 * Copyright (c) 2015 Armadeus Systems

 *	SÃ©bastien Szymanski <sebastien.szymanski@armadeus.com>

 *

 * Using code from:

 *  - sx865x.c

 *	Copyright (c) 2013 U-MoBo Srl

 *	Pierluigi Passaro <p.passaro@u-mobo.com>

 *  - sx8650.c

 *      Copyright (c) 2009 Wayne Roberts

 *  - tsc2007.c

 *      Copyright (c) 2008 Kwangwoo Lee

 *  - ads7846.c

 *      Copyright (c) 2005 David Brownell

 *      Copyright (c) 2006 Nokia Corporation

 *  - corgi_ts.c

 *      Copyright (C) 2004-2005 Richard Purdie

 *  - omap_ts.[hc], ads7846.h, ts_osk.c

 *      Copyright (C) 2002 MontaVista Software

 *      Copyright (C) 2004 Texas Instruments

 *      Copyright (C) 2005 Dirk Behme

 register addresses */

 commands */

 value for I2C_REG_SOFTRESET */

 bits for I2C_REG_IRQSRC */

 bits for RegTouch1 */

 bits for I2C_REG_CHANMASK */

 coordinates rate: higher nibble of CTRL0 register */

 power delay: lower nibble of CTRL0 register */

/* for sx8650, as we have no pen release IRQ there: timeout in ns following the

 * last PENIRQ after which we assume the pen is lifted.

 see datasheet section 5.1.5 */

 channel definition */

 for input reporting from irq/timer */

 invalid data */

 Tpulse > 1Âµs */

 enable pen trigger mode */

 enable manual mode mode */

 Disable the IRQ, we'll enable it in sx8654_open() */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Touch Screen driver for EETI's I2C connected touch screen panels

 *   Copyright (c) 2009,2018 Daniel Mack <daniel@zonque.org>

 *

 * See EETI's software guide for the protocol specification:

 *   http://home.eeti.com.tw/documentation.html

 *

 * Based on migor_ts.c

 *   Copyright (c) 2008 Magnus Damm

 *   Copyright (c) 2007 Ujjwal Pande <ujjwal@kenati.com>

 fix the range to 11 bits */

 Motion packet */

		/*

		 * If we have attention GPIO, trust it. Otherwise we'll read

		 * once and exit. We assume that in this case we are using

		 * level triggered interrupt and it will get raised again

		 * if/when there is more data.

	/*

	 * Kick the controller in case we are using edge interrupt and

	 * we missed our edge while interrupt was disabled. We expect

	 * the attention GPIO to be wired in this case.

	/*

	 * Not locking here, just setting a flag and expect that the

	 * interrupt thread will notice the flag eventually.

	/*

	 * In contrast to what's described in the datasheet, there seems

	 * to be no way of probing the presence of that device using I2C

	 * commands. So we need to blindly believe it is there, and wait

	 * for interrupts to occur.

	/*

	 * Disable the device for now. It will be enabled once the

	 * input device is opened.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Goodix Touchscreen firmware upload support

 *

 * Copyright (c) 2021 Hans de Goede <hdegoede@redhat.com>

 *

 * This is a rewrite of gt9xx_update.c from the Allwinner H3 BSP which is:

 * Copyright (c) 2010 - 2012 Goodix Technology.

 * Author: andrew@goodix.com

 pid is a 8 byte buffer containing a string, weird I know */

 DSP_CK and DSP_ALU_CK PowerOn */

 Disable watchdog */

 Clear cache enable */

 Set boot from SRAM */

 Software reboot */

 Clear control flag */

 Set scramble */

 Enable accessing code */

 Init software watchdog */

 Release SS51 & DSP */

 The value we've written to SW_WDT should have been cleared now */

 Re-init software watchdog */

 Select SRAM bank 0 and upload section 1 & 2 */

 Select SRAM bank 1 and upload section 3 & 4 */

 Select SRAM bank 2 and upload the DSP firmware */

 Already done */

	/*

	 * The bak_ref array contains the backup of an array of (self/auto)

	 * calibration related values which the Android version of the driver

	 * stores on the filesystem so that it can be restored after reboot.

	 * The mainline kernel never writes directly to the filesystem like

	 * this, we always start will all the values which give a correction

	 * factor in approx. the -20 - +20 range (in 2s complement) set to 0.

	 *

	 * Note the touchscreen works fine without restoring the reference

	 * values after a reboot / power-cycle.

	 *

	 * The last 2 bytes are a 16 bits unsigned checksum which is expected

	 * to make the addition al all 16 bit unsigned values in the array add

	 * up to 1 (rather then the usual 0), so we must set the last byte to 1.

 Default main clock */

 The value of all bytes combines must be 0 */

		/*

		 * If we read back our own last ack the IRQ was not for

		 * a request.

 Ack the request */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for MStar msg2638 touchscreens

 *

 * Copyright (c) 2021 Vincent Knecht <vincent.knecht@mailoo.org>

 *

 * Checksum and IRQ handler based on mstar_drv_common.c and

 * mstar_drv_mutual_fw_control.c

 * Copyright (c) 2006-2012 MStar Semiconductor, Inc.

 *

 * Driver structure based on zinitix.c by Michael Srba <Michael.Srba@seznam.cz>

 higher bits of x and y coordinates */

 Ignore non-pressed finger data */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for ChipOne icn8318 i2c touchscreen controller

 *

 * Copyright (c) 2015 Red Hat Inc.

 *

 * Red Hat authors:

 * Hans de Goede <hdegoede@redhat.com>

 Seems more like finger width then pressure really */

 The difference between 2 and 3 is unclear */

 No finger seen yet since wakeup */

 New or updated coordinates */

 New or updated coordinates */

 Finger lifted */

		/*

		 * Other data is invalid when a softbutton is pressed.

		 * This needs some extra devicetree bindings to map the icn8318

		 * softbutton codes to evdev codes. Currently no known devices

		 * use this.

 Stop device till opened */

 This is useless for OF-enabled devices, but it is needed by I2C subsystem */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Surface2.0/SUR40/PixelSense input driver

 *

 * Copyright (c) 2014 by Florian 'floe' Echtler <floe@butterbrot.org>

 *

 * Derived from the USB Skeleton driver 1.1,

 * Copyright (c) 2003 Greg Kroah-Hartman (greg@kroah.com)

 *

 * and from the Apple USB BCM5974 multitouch driver,

 * Copyright (c) 2008 Henrik Rydberg (rydberg@euromail.se)

 *

 * and from the generic hid-multitouch driver,

 * Copyright (c) 2010-2012 Stephane Chatty <chatty@enac.fr>

 *

 * and from the v4l2-pci-skeleton driver,

 * Copyright (c) Copyright 2014 Cisco Systems, Inc.

 read 512 bytes from endpoint 0x86 -> get header + blobs */

 always 0x0001 */

 count of blobs (if 0: continue prev. packet) */

 unique ID for all packets in one frame */

 milliseconds (inc. by 16 or 17 each frame) */

 "epoch?" always 02/03 00 00 00 */

 0x02 = enter/exit, 0x03 = update (?) */

 bitmask (0x01 blob,  0x02 touch, 0x04 tag) */

 upper left corner of bounding box */

 size of bounding box */

 finger tip position */

 centroid position */

 somehow related to major/minor axis, mostly: */

 axis_x == bb_size_y && axis_y == bb_size_x */

	__le32 angle;      /* orientation in radians relative to x axis -

 size in pixels/pressure (?) */

 valid when type == 0x04 (SUR40_TAG) */

 combined header/blob data */

/* read 512 bytes from endpoint 0x82 -> get header below

 "SUBF" */

 always 0x0007e900 = 960x540 */

 milliseconds (increases by 16 or 17 each frame) */

 "epoch?" always 02/03 00 00 00 */

 version information */

 vendor and device IDs */

 sensor resolution */

 touch data endpoint */

 video data endpoint */

 video header fields */

 polling interval (ms) */

 maximum number of contacts FIXME: this is a guess? */

 control commands */

 12 bytes string    */

  5 bytes           */

 24 bytes           */

 poke register byte */

 48 bytes registers */

  4 bytes state (?) */

  8 bytes sensors   */

 video controls */

 module parameters */

 master device state */

 forward declarations */

/*

 * Note: an earlier, non-public version of this driver used USB_RECIP_ENDPOINT

 * here by mistake which is very likely to have corrupted the firmware EEPROM

 * on two separate SUR40 devices. Thanks to Alan Stern who spotted this bug.

 * Should you ever run into a similar problem, the background story to this

 * incident and instructions on how to fix the corrupted EEPROM are available

 * at https://floe.butterbrot.org/matrix/hacking/surface/brick.html

 command wrapper */

 poke a byte in the panel register space */

 0xae for permanent write

 Initialization routine, called from sur40_open */

 stupidly replay the original MS driver init sequence */

	/*

	 * Discard the result buffer - no known data inside except

	 * some version strings, maybe extract these sometime...

/*

 * Callback routines from input_dev

 Enable the device, polling will now start. */

 Disable device, polling has stopped. */

	/*

	 * There is no known way to stop the device, so we simply

	 * stop polling.

/*

 * This function is called when a whole contact has been processed,

 * so that it can assign it to a slot and store the data there.

 TODO: use a better orientation measure */

 core function: poll for new input data */

 perform a blocking bulk read to get data from the device */

 first packet? */

 packet_id = le32_to_cpu(header->packet_id); */

		/*

		 * Sanity check. when video data is also being retrieved, the

		 * packet ID will usually increase in the middle of a series

		 * instead of at the end. However, the data is still consistent,

		 * so the packet ID is probably just valid for the first packet

		 * in a series.



		if (packet_id != le32_to_cpu(header->packet_id))

			dev_dbg(sur40->dev, "packet ID mismatch\n");

 packets always contain at least 4 blobs, even if empty */

 deal with video data */

 get a new buffer from the list */

 retrieve data via bulk read */

 return error if streaming was stopped in the meantime */

 mark as finished */

 Initialize input device parameters. */

	/* max value unknown, but major/minor axis

 Check candidate USB interface. */

 Check if we really have the right interface. */

 Use endpoint #4 (0x86). */

 Allocate memory for our device state and initialize it. */

 initialize locks/lists */

 Set up regular input device structure */

 use the bulk-in endpoint tested above */

 register the polled input device */

 register the video master device */

 initialize the lock and subdevice */

 initialize the queue */

 initialize the control handler for 4 controls */

 we can register the device now, as it is ready */

 Unregister device & clean up. */

/*

 * Setup the constraints of the queue: besides setting the number of planes

 * per buffer and the size and allocation context of each plane, it also

 * checks if sufficient buffers have been allocated. Usually 3 is a good

 * minimum number: many DMA engines need a minimum of 2 buffers in the

 * queue and you need to have another available for userspace processing.

/*

 * Prepare the buffer for queueing to the DMA engine: check and set the

 * payload size.

/*

 * Queue this buffer to the DMA engine.

/*

 * Start streaming. First check if the minimum number of buffers have been

 * queued. If not, then return -ENOBUFS and the vb2 framework will call

 * this function again the next time a buffer has been queued until enough

 * buffers are available to actually start the DMA engine.

/*

 * Stop the DMA engine. Any remaining buffers in the DMA queue are dequeued

 * and passed on to the vb2 framework marked as STATE_ERROR.

 Release all active buffers */

 V4L ioctl */

 Samsung SUR40 */

 terminating null entry */

 V4L2 structures */

	/*

	 * VB2_USERPTR in currently not enabled: passing a user pointer to

	 * dma-sg will result in segment sizes that are not a multiple of

	 * 512 bytes, which is required by the host controller.

 USB-specific object needed to register this driver with the USB subsystem. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TSC2005 touchscreen driver

 *

 * Copyright (C) 2006-2010 Nokia Corporation

 * Copyright (C) 2015 QWERTY Embedded Design

 * Copyright (C) 2015 EMAC Inc.

 *

 * Based on original tsc2005.c by Lauri Leukkunen <lauri.leukkunen@nokia.com>

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm97xx-core.c  --  Touch screen driver core for Wolfson WM9705, WM9712

 *                    and WM9713 AC97 Codecs.

 *

 * Copyright 2003, 2004, 2005, 2006, 2007, 2008 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

 * Parts Copyright : Ian Molton <spyro@f2s.com>

 *                   Andrew Zabolotny <zap@homelink.ru>

 *                   Russell King <rmk@arm.linux.org.uk>

 *

 * Notes:

 *

 *  Features:

 *       - supports WM9705, WM9712, WM9713

 *       - polling mode

 *       - continuous mode (arch-dependent)

 *       - adjustable rpu/dpp settings

 *       - adjustable pressure current

 *       - adjustable sample settle delay

 *       - 4 and 5 wire touchscreens (5 wire is WM9712 only)

 *       - pen down detection

 *       - battery monitor

 *       - sample AUX adcs

 *       - power management

 *       - codec GPIO

 *       - codec event notification

 * Todo

 *       - Support for async sampling control for noisy LCDs.

/*

 * Touchscreen absolute values

 *

 * These parameters are used to help the input layer discard out of

 * range readings and reduce jitter etc.

 *

 *   o min, max:- indicate the min and max values your touch screen returns

 *   o fuzz:- use a higher number to reduce jitter

 *

 * The default values correspond to Mainstone II in QVGA mode

 *

 * Please read

 * Documentation/input/input-programming.rst for more details.

/*

 * wm97xx IO access, all IO locking done by AC97 layer

 cache digitiser registers */

 cache gpio regs */

 wm9713 irq reg */

/**

 * wm97xx_read_aux_adc - Read the aux adc.

 * @wm: wm97xx device.

 * @adcsel: codec ADC to be read

 *

 * Reads the selected AUX ADC.

 get codec */

	/* When the touchscreen is not in use, we may have to power up

	 * the AUX ADC before we can use sample the AUX inputs->

 Prepare the codec for AUX reading */

 Turn polling mode on to read AUX ADC */

/**

 * wm97xx_get_gpio - Get the status of a codec GPIO.

 * @wm: wm97xx device.

 * @gpio: gpio

 *

 * Get the status of a codec GPIO pin

/**

 * wm97xx_set_gpio - Set the status of a codec GPIO.

 * @wm: wm97xx device.

 * @gpio: gpio

 * @status: status

 *

 * Set the status of a codec GPIO pin

/*

 * Codec GPIO pin configuration, this sets pin direction, polarity,

 * stickyness and wake up.

/*

 * Configure the WM97XX_PRP value to use while system is suspended.

 * If a value other than 0 is set then WM97xx pen detection will be

 * left enabled in the configured mode while the system is in suspend,

 * the device has users and suspend has not been disabled via the

 * wakeup sysfs entries.

 *

 * @wm:   WM97xx device to configure

 * @mode: WM97XX_PRP value to configure while suspended

/*

 * Handle a pen down interrupt.

 do we need to enable the touch panel reader */

	/* If the system is not using continuous mode or it provides a

	 * pen down operation then we need to schedule polls while the

	 * pen is down.  Otherwise the machine driver is responsible

	 * for scheduling reads.

 Data is not available immediately on pen down */

 Let ts_reader report the pen up for debounce. */

/*

 * Codec PENDOWN irq handler

 *

 * We have to disable the codec interrupt in the handler because it

 * can take up to 1ms to clear the interrupt source. We schedule a task

 * in a work queue to do the actual interaction with the chip.  The

 * interrupt is then enabled again in the slow handler when the source

 * has been cleared.

/*

 * initialise pen IRQ handler and workqueue

	/* If an interrupt is supplied an IRQ enable operation must also be

 Configure GPIO as interrupt source on WM971x */

			/* We need high frequency updates only while

			* pen is down, the user never will be able to

			* touch screen faster than a few times per

			* second... On the other hand, when the user

			* is actively working with the touchscreen we

			* don't want to lose the quick response. So we

			* will slowly increase sleep time after the

			* pen is up and quicky restore it to ~one task

			* switch when pen is down again.

/*

* The touchscreen sample reader.

/**

 * wm97xx_ts_input_open - Open the touch screen input device.

 * @idev:	Input device to be opened.

 *

 * Called by the input sub system to open a wm97xx touchscreen device.

 * Starts the touchscreen thread and touch digitiser.

 start digitiser */

	/* If we either don't have an interrupt for pen down events or

	 * failed to acquire it then we need to poll.

/**

 * wm97xx_ts_input_close - Close the touch screen input device.

 * @idev:	Input device to be closed.

 *

 * Called by the input sub system to close a wm97xx touchscreen

 * device.  Kills the touchscreen thread and stops the touch

 * digitiser.

 Return the interrupt to GPIO usage (disabling it) */

 Balance out interrupt disables/enables */

	/* ts_reader rearms itself so we need to explicitly stop it

	 * before we destroy the workqueue.

 stop digitiser */

 set up touch configuration */

	/*

	 * register our extended touch device (for machine specific

	 * extensions)

 check that we have a supported codec */

 set up physical characteristics */

 load gpio cache */

 Power down the digitiser (bypassing the cache for resume) */

	/* WM9713 has an additional power bit - turn it off if there

 restore digitiser and gpios */

/*

 * Machine specific operations

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Allwinner sunxi resistive touchscreen controller driver

 *

 * Copyright (C) 2013 - 2014 Hans de Goede <hdegoede@redhat.com>

 *

 * The hwmon parts are based on work by Corentin LABBE which is:

 * Copyright (C) 2013 Corentin LABBE <clabbe.montjoie@gmail.com>

/*

 * The sun4i-ts controller is capable of detecting a second touch, but when a

 * second touch is present then the accuracy becomes so bad the reported touch

 * location is not useable.

 *

 * The original android driver contains some complicated heuristics using the

 * aprox. distance between the 2 touches to see if the user is making a pinch

 * open / close movement, and then reports emulated multi-touch events around

 * the last touch coordinate (as the dual-touch coordinates are worthless).

 *

 * These kinds of heuristics are just asking for trouble (and don't belong

 * in the kernel). So this driver offers straight forward, reliable single

 * touch functionality only.

 *

 * s.a. A20 User Manual "1.15 TP" (Documentation/arm/sunxi.rst)

 * (looks like the description in the A20 User Manual v1.3 is better

 * than the one in the A10 User Manual v.1.5)

 TP_CTRL0 bits */

 8 bits */

 3 bits */

 4 bits */

 16 bits */

 TP_CTRL1 bits */

 8 bits */

 3 bits */

 on sun6i, bits 3~6 are left shifted by 1 to 4~7 */

 TP_CTRL2 bits */

 4 bits */

 2 bits */

 24 bits */

 TP_CTRL3 bits */

 2 bits */

 TP_INT_FIFOC irq and fifo mask / control bits */

 5 bits */

 TP_INT_FIFOS irq and fifo status bits */

 TP_TPR bits */

 t = x * 256 * 16 / clkin */

 The 1st location reported after an up event is unreliable */

			/*

			 * The hardware has a separate down status bit, but

			 * that gets set before we get the first location,

			 * resulting in reporting a click on the old location.

 Flush, set trig level to 1, enable temp, data and up irqs */

 Deactivate all input IRQs */

 No temp_data until the first irq */

 Allwinner SDK has temperature (C) = (value / 6) - 271 */

		/*

		 * The A10 temperature sensor has quite a wide spread, these

		 * parameters are based on the averaging of the calibration

		 * results of 4 completely different boards, with a spread of

		 * temp_step from 0.096 - 0.170 and temp_offset from 176 - 331.

		/*

		 * The user manuals do not contain the formula for calculating

		 * the temperature. The formula used here is from the AXP209,

		 * which is designed by X-Powers, an affiliate of Allwinner:

		 *

		 *     temperature (C) = (value * 0.1) - 144.7

		 *

		 * Allwinner does not have any documentation whatsoever for

		 * this hardware. Moreover, it is claimed that the sensor

		 * is inaccurate and cannot work properly.

	/*

	 * Select HOSC clk, clkin = clk / 6, adc samplefreq = clkin / 8192,

	 * t_acq = clkin / (16 * 64)

	/*

	 * tp_sensitive_adjust is an optional property

	 * tp_mode = 0 : only x and y coordinates, as we don't use dual touch

	/*

	 * Enable median and averaging filter, optional property for

	 * filter type.

 Enable temperature measurement, period 1953 (2 seconds) */

	/*

	 * Set stylus up debounce to aprox 10 ms, enable debounce, and

	 * finally enable tp mode.

	/*

	 * The thermal core does not register hwmon devices for DT-based

	 * thermal zone sensors, such as this one.

 Explicit unregister to avoid open/close changing the imask later */

 Deactivate all IRQs */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * EETI Egalax serial touchscreen driver

 *

 * Copyright (c) 2015 ZoltÃ¡n BÃ¶szÃ¶rmÃ©nyi <zboszor@pr.hu>

 *

 * based on the

 *

 * Hampshire serial touchscreen driver (Copyright (c) 2010 Adam Bennett)

/*

 * Definitions & global arrays.

/*

 * Per-touchscreen data.

/*

 * egalax_connect() is the routine that is called when someone adds a

 * new serio device that supports egalax protocol and registers it as

 * an input device. This is usually accomplished using inputattach.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * STMicroelectronics STMPE811 Touchscreen Driver

 *

 * (C) 2010 Luotao Fu <l.fu@pengutronix.de>

 * All rights reserved.

/* Register layouts and functionalities are identical on all stmpexxx variants

 * with touchscreen controller

/**

 * struct stmpe_touch - stmpe811 touch screen controller state

 * @stmpe: pointer back to STMPE MFD container

 * @idev: registered input device

 * @work: a work item used to scan the device

 * @dev: a pointer back to the MFD cell struct device*

 * @prop: Touchscreen properties

 * @ave_ctrl: Sample average control

 * (0 -> 1 sample, 1 -> 2 samples, 2 -> 4 samples, 3 -> 8 samples)

 * @touch_det_delay: Touch detect interrupt delay

 * (0 -> 10 us, 1 -> 50 us, 2 -> 100 us, 3 -> 500 us,

 * 4-> 1 ms, 5 -> 5 ms, 6 -> 10 ms, 7 -> 50 ms)

 * recommended is 3

 * @settling: Panel driver settling time

 * (0 -> 10 us, 1 -> 100 us, 2 -> 500 us, 3 -> 1 ms,

 * 4 -> 5 ms, 5 -> 10 ms, 6 for 50 ms, 7 -> 100 ms)

 * recommended is 2

 * @fraction_z: Length of the fractional part in z

 * (fraction_z ([0..7]) = Count of the fractional part)

 * recommended is 7

 * @i_drive: current limit value of the touchscreen drivers

 * (0 -> 20 mA typical 35 mA max, 1 -> 50 mA typical 80 mA max)

	/*

	 * touch_det sometimes get desasserted or just get stuck. This appears

	 * to be a silicon bug, We still have to clearify this with the

	 * manufacture. As a workaround We release the key anyway if the

	 * touch_det keeps coming in after 4ms, while the FIFO contains no value

	 * during the whole time.

 reset the FIFO before we report release event */

	/*

	 * Cancel scheduled polling for release if we have new value

	 * available. Wait if the polling is already running.

	/*

	 * The FIFO sometimes just crashes and stops generating interrupts. This

	 * appears to be a silicon bug. We still have to clearify this with

	 * the manufacture. As a workaround we disable the TSC while we are

	 * collecting data and flush the FIFO after reading

 flush the FIFO after we have read out our values. */

 reenable the tsc */

 start polling for touch_det to detect release */

 set FIFO to 1 for single point reading */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm9712.c  --  Codec driver for Wolfson WM9712 AC97 Codecs.

 *

 * Copyright 2003, 2004, 2005, 2006, 2007 Wolfson Microelectronics PLC.

 * Author: Liam Girdwood <lrg@slimlogic.co.uk>

 * Parts Copyright : Ian Molton <spyro@f2s.com>

 *                   Andrew Zabolotny <zap@homelink.ru>

 *                   Russell King <rmk@arm.linux.org.uk>

/*

 * Module parameters

/*

 * Set internal pull up for pen detect.

 *

 * Pull up is in the range 1.02k (least sensitive) to 64k (most sensitive)

 * i.e. pull up resistance = 64k Ohms / rpu.

 *

 * Adjust this value if you are having problems with pen detect not

 * detecting any down event.

/*

 * Set current used for pressure measurement.

 *

 * Set pil = 2 to use 400uA

 *     pil = 1 to use 200uA and

 *     pil = 0 to disable pressure measurement.

 *

 * This is used to increase the range of values returned by the adc

 * when measureing touchpanel pressure.

/*

 * Set threshold for pressure measurement.

 *

 * Pen down pressure below threshold is ignored.

/*

 * Set adc sample delay.

 *

 * For accurate touchpanel measurements, some settling time may be

 * required between the switch matrix applying a voltage across the

 * touchpanel plate and the ADC sampling the signal.

 *

 * This delay can be set by setting delay = n, where n is the array

 * position of the delay in the array delay_table below.

 * Long delays > 1ms are supported for completeness, but are not

 * recommended.

/*

 * Set five_wire = 1 to use a 5 wire touchscreen.

 *

 * NOTE: Five wire mode does not allow for readback of pressure.

/*

 * Set adc mask function.

 *

 * Sources of glitch noise, such as signals driving an LCD display, may feed

 * through to the touch screen plates and affect measurement accuracy. In

 * order to minimise this, a signal may be applied to the MASK pin to delay or

 * synchronise the sampling.

 *

 * 0 = No delay or sync

 * 1 = High on pin stops conversions

 * 2 = Edge triggered, edge on pin delays conversion by delay param (above)

 * 3 = Edge triggered, edge on pin starts conversion after delay param

/*

 * Coordinate Polling Enable.

 *

 * Set to 1 to enable coordinate polling. e.g. x,y[,p] is sampled together

 * for every poll.

/*

 * ADC sample delay times in uS

 1 AC97 Link frames */

 2 */

 4 */

 8 */

 16 */

 32 */

 48 */

 64 */

 96 */

 128 */

 160 */

 192 */

 224 */

 256 */

 288 */

 No delay, switch matrix always on */

/*

 * Delay after issuing a POLL command.

 *

 * The delay is 3 AC97 link frames + the touchpanel settling delay

/*

 * set up the physical settings of the WM9712

 WM9712 rpu */

 WM9712 five wire */

 touchpanel pressure current*/

 polling mode sample settling delay */

 mask */

 Set GPIO4 as Mask Pin*/

 wait - coord mode */

 dummy read */

/*

 * Read a sample from the WM9712 adc in polling mode.

 set up digitiser */

 wait 3 AC97 time slots + delay for conversion */

 wait for POLL to go low */

 If PDEN is set, we can get a timeout when pen goes up */

 check we have correct sample */

 Sometimes it reads a wrong value the first time. */

/*

 * Read a coord from the WM9712 adc in polling mode.

 set up digitiser */

 wait 3 AC97 time slots + delay for conversion and read x */

 wait for POLL to go low */

 If PDEN is set, we can get a timeout when pen goes up */

 read back y data */

 check we have correct sample */

/*

 * Sample the WM9712 touchscreen in polling mode

/*

 * Enable WM9712 continuous mode, i.e. touch data is streamed across

 * an AC97 slot

 continuous mode */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012-2013 MundoReader S.L.

 * Author: Heiko Stuebner <heiko@sntech.de>

 *

 * based in parts on Nook zforce driver

 *

 * Copyright (C) 2010 Barnes & Noble, Inc.

 * Author: Pieter Truter<ptruter@intrinsyc.com>

 Offsets of the different parts of the payload the controller sends */

 Response offsets */

 Commands */

/*

 * Responses the controller sends as a result of

 * command requests

/*

 * Notifications are sent by the touch controller without

 * being requested by the driver and include for example

 * touch indications

/*

 * @client		the i2c_client

 * @input		the input device

 * @suspending		in the process of going to suspend (don't emit wakeup

 *			events for commands executed to suspend the device)

 * @suspended		device suspended

 * @access_mutex	serialize i2c-access, to keep multipart reads together

 * @command_done	completion to wait for the command result

 * @command_mutex	serialize commands sent to the ic

 * @command_waiting	the id of the command that is currently waiting

 *			for a result

 * @command_result	returned result of the command

 Firmware version information */

 data size, command only */

 data size, command only */

 start sending touch events */

	/*

	 * Per NN, initial cal. take max. of 200msec.

	 * Allow time to complete this calibration

 Deactivates touch sensing and puts the device into sleep. */

 determine touch major, minor and orientation */

 the zforce id starts with "1", so needs to be decreased */

 read 2 byte message header */

 read the message */

	/*

	 * When still suspended, return.

	 * Due to the level-interrupt we will get re-triggered later.

 Don't emit wakeup events from commands run by zforce_suspend */

	/*

	 * Run at least once and exit the loop if

	 * - the optional interrupt GPIO isn't specified

	 *   (there is only one packet read per ISR invocation, then)

	 * or

	 * - the GPIO isn't active any more

	 *   (packet read until the level GPIO indicates that there is

	 *    no IRQ any more)

			/*

			 * Always report touch-events received while

			 * suspending, when being a wakeup source

			/*

			 * Version Payload Results

			 * [2:major] [2:minor] [2:build] [2:rev]

	/*

	 * When configured as a wakeup source device should always wake

	 * the system, therefore start device if necessary.

 Need to start device, if not open, to be a wakeup source. */

 need to stop device if it was not open on suspend */

		/*

		 * Deprecated GPIO handling for compatibility

		 * with legacy binding.

 INT GPIO */

 RST GPIO */

		/*

		 * according to datasheet add 100us grace time after regular

		 * regulator enable delay.

 hereafter the regulator will be disabled by the action */

 For multi touch */

	/*

	 * The zforce pulls the interrupt low when it has data ready.

	 * After it is triggered the isr thread runs until all the available

	 * packets have been read and the interrupt is high again.

	 * Therefore we can trigger the interrupt anytime it is low and do

	 * not need to limit it to the interrupt edge.

 let the controller boot */

 need to start device to get version information */

 this gets the firmware version among other information */

 stop device and put it into sleep until it is opened */

 SPDX-License-Identifier: GPL-2.0

/*

 * ST1232 Touchscreen Controller Driver

 *

 * Copyright (C) 2010 Renesas Solutions Corp.

 *	Tony SIM <chinyeow.sim.xt@renesas.com>

 *

 * Using code from:

 *  - android.git.kernel.org: projects/kernel/common.git: synaptics_i2c_rmi.c

 *	Copyright (C) 2007 Google, Inc.

 Device Status | Error Code */

 select resolution register */

 st1232 includes a z-axis / touch strength */

 First contact, request 100 us latency. */

 allocate a buffer according to the number of registers to read */

 Wait until device is ready */

 Read resolution from the chip */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Motorola PCAP2 touchscreen as found in the EZX phone platform.

 *

 *  Copyright (C) 2006 Harald Welte <laforge@openezx.org>

 *  Copyright (C) 2009 Daniel Ribeiro <drwyrm@gmail.com>

 msecs */

 pressure reading is unreliable */

 pen has been released */

 pen is touching the screen */

 switch back to pressure read mode */

 start adc conversion */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Touch Screen driver for Renesas MIGO-R Platform

 *

 * Copyright (c) 2008 Magnus Damm

 * Copyright (c) 2007 Ujjwal Pande <ujjwal@kenati.com>,

 *  Kenati Technologies Pvt Ltd.

	/*

	 * The touch screen controller chip is hooked up to the CPU

	 * using I2C and a single interrupt line. The interrupt line

	 * is pulled low whenever someone taps the screen. To deassert

	 * the interrupt line we need to acknowledge the interrupt by

	 * communicating with the controller over the slow i2c bus.

	 *

	 * Since I2C bus controller may sleep we are using threaded

	 * IRQ here.

 Set Index 0 */

 Now do Page Read */

X-Y swap*/

 enable controller */

 disable controller */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2012 Simon Budig, <simon.budig@kernelconcepts.de>

 * Daniel Wagener <daniel.wagener@kernelconcepts.de> (M09 firmware support)

 * Lothar WaÃmann <LW@KARO-electronics.de> (DT support)

/*

 * This is a driver for the EDT "Polytouch" family of touch controllers

 * based on the FocalTech FT5x06 line of chips.

 *

 * Development of this driver has been sponsored by Glyn:

 *    http://www.glyn.com/Products/Displays

 msec */

 usec */

 tell the controller to send touch data */

 where the actual touch data starts */

 data comes in so called frames */

 length of the crc data */

 M09/M12 does not send header or CRC */

 ignore Reserved events */

 M06 sometimes sends bogus coordinates in TOUCH_DOWN */

 The FT5x26 send the y coordinate first */

 m06, m09: range 0-31, m12: range 0-5 */

 m06, m09: range 0-31, m12: range 0-16 */

 m06, m09, m12: no supported, ev_ft: range 0-80 */

 m06, m09, m12: no supported, ev_ft: range 0-80 */

 m06: range 20 to 80, m09: range 0 to 30, m12: range 1 to 255... */

 m06: range 3 to 14, m12: (0x64: 100Hz) */

 mode register is 0x3c when in the work mode */

 mode register is 0x01 when in factory mode */

 mode register is 0x01 when in the factory mode */

 mode register is 0x01 when in factory mode */

 column index */

 CONFIG_DEBUGFS */

	/* see what we find if we assume it is a M06 *

	 * if we get less than EDT_NAME_LEN, we don't want

	 * to have garbage in there

	/* Probe content for something consistent.

	 * M06 starts with a response byte, M12 gives the data directly.

	 * M09/Generic does not provide model number information.

 remove last '$' end marker */

 look for Model/Version separator */

 remove last '$' end marker */

 look for Model/Version separator */

		/* If it is not an EDT M06/M12 touchscreen, then the model

		 * detection is a bit hairy. The different ft5x06

		 * firmares around don't reliably implement the

		 * identification registers. Well, we'll take a shot.

		 *

		 * The main difference between generic focaltec based

		 * touches and EDT M09 is that we know how to retrieve

		 * the max coordinates for the latter.

		/* This "model identification" is not exact. Unfortunately

		 * not all firmwares for the ft5x06 put useful values in

		 * the identification registers.

 EDT EP0110M09 */

 EDT EP0350M09 */

 EDT EP0430M09 */

 EDT EP0500M09 */

 EDT EP0570M09 */

 EDT EP0700M09 */

 EDT EP1010ML00 */

 Solomon Goldentek Display */

 Evervision Display with FT5xx6 TS */

 this is a guesswork */

 Delay enabling VCC for > 10us (T_ivd) after IOVCC */

	/*

	 * Check which sleep modes we can support. Power-off requieres the

	 * reset-pin to ensure correct power-down/power-up behaviour. Start with

	 * the EDT_PMODE_POWEROFF test since this is the deepest possible sleep

	 * mode.

	/*

	 * Dummy read access. EP0700MLP1 returns bogus data on the first

	 * register read access and ignores writes.

 Enter hibernate mode. */

	/*

	 * Power-off according the datasheet. Cut the power may leaf the irq

	 * line in an undefined state depending on the host pull resistor

	 * settings. Disable the irq to avoid adjusting each host till the

	 * device is back in a full functional state.

		/*

		 * We can't check if the regulator is a dummy or a real

		 * regulator. So we need to specify the 5ms reset time (T_rst)

		 * here instead of the 100us T_rtp time. We also need to wait

		 * 300ms in case it was a real supply and the power was cutted

		 * of. Toggle the reset pin is also a way to exit the hibernate

		 * mode.

 Delay enabling VCC for > 10us (T_ivd) after IOVCC */

 Note no edt- prefix for compatibility with the ft6236.c driver */

 sentinel */ }

 Note focaltech vendor prefix for compatibility with ft6236.c */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for AUO in-cell touchscreens

 *

 * Copyright (c) 2011 Heiko Stuebner <heiko@sntech.de>

 *

 * loosely based on auo_touch.c from Dell Streak vendor-kernel

 *

 * Copyright (c) 2008 QUALCOMM Incorporated.

 * Copyright (c) 2008 QUALCOMM USA, INC.

/*

 * Coordinate calculation:

 * X1 = X1_LSB + X1_MSB*256

 * Y1 = Y1_LSB + Y1_MSB*256

 * X2 = X2_LSB + X2_MSB*256

 * Y2 = Y2_LSB + Y2_MSB*256

/*

 * Power modes:

 * active:	scan speed 60Hz

 * sleep:	scan speed 10Hz can be auto-activated, wakeup on 1st touch

 * deep sleep:	scan speed 1Hz can only be entered or left manually.

 Touchscreen absolute values */

 special handling for touch_indicate interupt mode */

 touch coordinates */

 touch area */

 determine touch major, minor and orientation */

 check for up event in touch touch_ind_mode */

 we want to loop only in touch_ind_mode */

 use first finger as source for singletouch */

				/* number of touch points could also be queried

				 * via i2c but would require an additional call

 we want to loop only in touch_ind_mode */

/*

 * Set the power mode of the device.

 * Valid modes are

 * - AUO_PIXCIR_POWER_ACTIVE

 * - AUO_PIXCIR_POWER_SLEEP - automatically left on first touch

 * - AUO_PIXCIR_POWER_DEEP_SLEEP

 always use high for interrupts */

 control the generation of interrupts on the device side */

 disable receiving of interrupts */

	/* when configured as wakeup source, device should always wake system

	 * therefore start device if necessary

 need to start device if not open, to be wakeup source */

 need to stop device if it was not open on suspend */

 device wakes automatically from SLEEP */

 default to asserting the interrupt when the screen is touched */

 For single touch */

 For multi touch */

 stop device and put it into deep sleep until it is opened */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012-2017 Hideep, Inc.

 count(2) + touch data(100) + key data(6) */

 Touch & key event */

 command list */

 event bit */

 For NVM */

	/*

	 * Data buffer to read packet from the device (contacts and key

	 * states). We align it on double-word boundary to keep word-sized

	 * fields in contact data and double-word-sized fields in program

	 * packet aligned.

 flush invalid Tx load register */

 make it unprotected code */

 compare unmask code */

 erase page */

 write page */

 See if the page needs updating */

 enter program mode */

 get touch event count */

 check i2c bus */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000-2001 Vojtech Pavlik

/*

 * Gunze AHL-51S touchscreen driver for Linux

/*

/*

 * Definitions & global arrays.

/*

 * Per-touchscreen data.

/*

 * gunze_disconnect() is the opposite of gunze_connect()

/*

 * gunze_connect() is the routine that is called when someone adds a

 * new serio device that supports Gunze protocol and registers it as

 * an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for Goodix Touchscreens

 *

 *  Copyright (c) 2014 Red Hat Inc.

 *  Copyright (c) 2015 K. Merker <merker@debian.org>

 *

 *  This code is based on gt9xx.c authored by andrew@goodix.com:

 *

 *  2010 - 2012 Goodix Technology.

 Our special handling for GPIO accesses through ACPI is x86 specific */

 YB1-X91L/F and YB1-X90L/F */

/*

 * Those tablets have their x coordinate inverted

/**

 * goodix_i2c_read - read data from a register of the i2c slave device.

 *

 * @client: i2c device.

 * @reg: the register to read from.

 * @buf: raw write data buffer.

 * @len: length of the buffer to write

/**

 * goodix_i2c_write - write data to a register of the i2c slave device.

 *

 * @client: i2c device.

 * @reg: the register to write to.

 * @buf: raw data buffer to write.

 * @len: length of the buffer to write

	/*

	 * We are going to read 1-byte header,

	 * ts->contact_size * max(1, touch_num) bytes of coordinates

	 * and 1-byte footer which contains the touch-key code.

	/*

	 * The 'buffer status' bit, which indicates that the data is valid, is

	 * not set as soon as the interrupt is raised, but slightly after.

	 * This takes around 10 ms to happen, so we poll for 20 ms.

 Poll every 1 - 2 ms */

	/*

	 * The Goodix panel will send spurious interrupts after a

	 * 'finger up' event, which will always cause a timeout.

/**

 * goodix_process_events - Process incoming events

 *

 * @ts: our goodix_ts_data pointer

 *

 * Called when the IRQ is triggered. Read the current device state, and push

 * the input events to the user space.

/**

 * goodix_ts_irq_handler - The IRQ handler

 *

 * @irq: interrupt number.

 * @dev_id: private data pointer.

 Set "config_fresh" bit */

 Set "config_fresh" bit */

/**

 * goodix_check_cfg - Checks if config fw is valid

 *

 * @ts: goodix_ts_data pointer

 * @cfg: firmware config data

 * @len: config data length

/**

 * goodix_send_cfg - Write fw config to device

 *

 * @ts: goodix_ts_data pointer

 * @cfg: config firmware to write to device

 * @len: config data length

 Let the firmware reconfigure itself, so sleep for 10ms */

		/*

		 * The IRQ pin triggers on a falling edge, so its gets marked

		 * as active-low, use output_raw to avoid the value inversion.

 Never reached */

 Never reached */

 T5: 50ms */

/**

 * goodix_reset_no_int_sync - Reset device, leaving interrupt line in output mode

 *

 * @ts: goodix_ts_data pointer

 begin select I2C slave addr */

 T2: > 10ms */

 HIGH: 0x28/0x29, LOW: 0xBA/0xBB */

 T3: > 100us */

 T4: > 5ms */

 end select I2C slave addr */

/**

 * goodix_reset - Reset device during power on

 *

 * @ts: goodix_ts_data pointer

/*

 * This function gets called in case we fail to get the irq GPIO directly

 * because the ACPI tables lack GPIO-name to APCI _CRS index mappings

 * (no _DSD UUID daffd814-6eba-4d8c-8a91-bc9bbf4aa301 data).

 * In that case we add our own mapping and then goodix_get_gpio_config()

 * retries to get the GPIOs based on the added mapping.

 CONFIG_X86 && CONFIG_ACPI */

/**

 * goodix_get_gpio_config - Get GPIO config from ACPI/DT

 *

 * @ts: goodix_ts_data pointer

 Get the interrupt GPIO pin number */

 Get the reset line GPIO pin number */

		/*

		 * We end up here if goodix_add_acpi_gpio_mappings() has

		 * called devm_acpi_dev_add_driver_gpios() because the ACPI

		 * tables did not contain name to index mappings.

		 * Check that we successfully got both GPIOs after we've

		 * added our own acpi_gpio_mapping and if we did not get both

		 * GPIOs reset irq_pin_access_method to IRQ_PIN_ACCESS_NONE.

/**

 * goodix_read_config - Read the embedded configuration of the panel

 *

 * @ts: our goodix_ts_data pointer

 *

 * Must be called during probe

	/*

	 * On controllers where we need to upload the firmware

	 * (controllers without flash) ts->config already has the config

	 * at this point and the controller itself does not have it yet!

/**

 * goodix_read_version - Read goodix touchscreen version

 *

 * @ts: our goodix_ts_data pointer

/**

 * goodix_i2c_test - I2C test function to check if the device answers.

 *

 * @client: the i2c client

/**

 * goodix_configure_dev - Finish device initialization

 *

 * @ts: our goodix_ts_data pointer

 *

 * Must be called from probe to finish initialization of the device.

 * Contains the common initialization code for both devices that

 * declare gpio pins and devices that do not. It is either called

 * directly from probe or from request_firmware_wait callback.

 Capacitive Windows/Home button on some devices */

 Read configuration and apply touchscreen parameters */

 Try overriding touchscreen parameters via device properties */

/**

 * goodix_config_cb - Callback to finish device init

 *

 * @cfg: firmware config

 * @ctx: our goodix_ts_data pointer

 *

 * request_firmware_wait callback that finishes

 * initialization of the device.

 send device configuration to the firmware */

 power up the controller */

 reset the controller */

 Retry after a controller reset */

 update device config */

 We need gpio pins to suspend/resume */

 Free IRQ as IRQ pin is used as output in the suspend sequence */

 Save reference (calibration) info if necessary */

 Output LOW on the INT pin for 5 ms */

	/*

	 * The datasheet specifies that the interval between sending screen-off

	 * command and wake-up should be longer than 58 ms. To avoid waking up

	 * sooner, delay 58ms here.

	/*

	 * Exit sleep mode by outputting HIGH level to INT pin

	 * for 2ms~5ms.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2010

 * Author: Naveen Kumar G <naveen.gaddipati@stericsson.com> for ST-Ericsson

/**

 * struct bu21013_ts - touch panel data structure

 * @client: pointer to the i2c client

 * @in_dev: pointer to the input device structure

 * @props: the device coordinate transformation properties

 * @regulator: pointer to the Regulator used for touch screen

 * @cs_gpiod: chip select GPIO line

 * @int_gpiod: touch interrupt GPIO line

 * @touch_x_max: maximum X coordinate reported by the device

 * @touch_y_max: maximum Y coordinate reported by the device

 * @x_flip: indicates that the driver should invert X coordinate before

 *	reporting

 * @y_flip: indicates that the driver should invert Y coordinate before

 *	reporting

 * @touch_stopped: touch stop flag

 *

 * Touch panel device data structure

 register the device to input subsystem */

 Adjust for the legacy "flip" properties, if present */

 Named "CS" on the chip, DT binding is "reset" */

 Named "INT" on the chip, DT binding is "touch" */

 configure the touch panel controller */

 Make sure IRQ will exit quickly even if there is contact */

 The resources will be freed by devm */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for cypress touch screen controller

 *

 * Copyright (c) 2009 Aava Mobile

 *

 * Some cleanups by Alan Cox <alan@linux.intel.com>

 Touch coordinates */

 cy8ctmg110 register definitions */

/*

 * The touch driver structure.

/*

 * cy8ctmg110_power is the routine that is called when touch hardware

 * is being powered off or on. When powering on this routine de-asserts

 * the RESET line, when powering off reset line is asserted.

 first write slave position to i2c devices */

 Second read data from position */

 Reading coordinates */

 Number of touch */

 Request and assert reset line */

 SPDX-License-Identifier: GPL-2.0-or-later

/* -------------------------------------------------------------------------

 * Copyright (C) 2014-2015, Intel Corporation

 *

 * Derived from:

 *  gslX68X.c

 *  Copyright (C) 2010-2015, Shanghai Sileadinc Co.Ltd

 *

 * -------------------------------------------------------------------------

			/*

			 * For now only respond to softbutton == 0x01, some

			 * tablets *without* a capacative button send 0x04

			 * when crossing the edges of the screen.

		/*

		 * Bits 4-7 are the touch id, note not all models have

		 * hardware touch ids so atm we don't use these.

	/*

	 * Some buggy BIOS-es bring up the chip in a stuck state where it

	 * blocks the I2C bus. The following steps are necessary to

	 * unstuck the chip / bus:

	 * 1. Turn off the Silead chip.

	 * 2. Try to do an I2C transfer with the chip, this will fail in

	 *    response to which the I2C-bus-driver will call:

	 *    i2c_recover_bus() which will unstuck the I2C-bus. Note the

	 *    unstuck-ing of the I2C bus only works if we first drop the

	 *    chip off the bus by turning it off.

	 * 3. Turn the chip back on.

	 *

	 * On the x86/ACPI systems were this problem is seen, step 1. and

	 * 3. require making ACPI calls and dealing with ACPI Power

	 * Resources. The workaround below runtime-suspends the chip to

	 * turn it off, leaving it up to the ACPI subsystem to deal with

	 * this.

 The forbid will also resume the device */

 Most devices handle up-to 5 fingers */

 We must have the IRQ provided by DT or ACPI subsystem */

	/*

	 * Enable regulators at probe and disable them at remove, we need

	 * to keep the chip powered otherwise it forgets its firmware.

 Power GPIO pin */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cyttsp4_core.c

 * Cypress TrueTouch(TM) Standard Product V4 Core driver module.

 * For use with Cypress Txx4xx parts.

 * Supported parts include:

 * TMA4XX

 * TMA1036

 *

 * Copyright (C) 2012 Cypress Semiconductor

 *

 * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>

 Timeout in ms. */

	/*

	 * Mode change issued, handshaking now will cause endless mode change

	 * requests, for sync mode modechange will do same with handshake

/*

 * Gets number of bits for a touch filed as parameter,

 * sets maximum value for field which is used as bit mask

 * and returns number of bytes required for that field

 Print sysinfo data offsets */

 convert sysinfo data offset bytes into integers */

 Read the CYDA registers up to MFGID field */

 Check MFGID size */

 Read the CYDA registers for MFGID field */

 Read the rest of the CYDA registers */

 Get the old touch fields */

 button fields */

 Get the extended touch fields */

 provide flow control handshake */

 use 0 based track id's */

 all devices: position and pressure fields */

			/*

			 * TMA400 size and orientation fields:

			 * if pressure is non-zero and major touch

			 * signal is zero, then set major and minor touch

			 * signals to minimum non-zero value

 Get the extended touch fields */

 read xy_data for all current touches */

	/*

	 * Get event data from cyttsp4 device.

	 * The event data includes all data

	 * for all active touches.

	 * Event data also includes button data

	/*

	 * Use 2 reads:

	 * 1st read to get mode + button bytes + touch count (core)

	 * 2nd read (optional) to get touch 1 - touch n data

 read touches */

 print xy data */

 check any error conditions */

 extract xy_data for all currently reported touches */

 core handles handshake */

	/*

	 * Check whether this IRQ should be ignored (external)

	 * This should be the very first thing to check since

	 * ignore_irq may be set for a very short period of time

 Just to debug */

 Signal bootloader heartbeat heard */

 switch to bootloader */

 catch operation->bl glitch */

 Incase startup_state do not let startup_() */

		/*

		 * do not wake thread on this switch since

		 * it is possible to get an early heartbeat

		 * prior to performing the reset

 Check whether this IRQ should be ignored (internal) */

 Check for wake up interrupt */

 Expecting mode change interrupt */

 compare current core mode to current device mode */

 Unexpected mode change occurred */

 Expecting command complete interrupt */

		/*

		 * It is possible to receive a single interrupt for

		 * command complete and touch/button status report.

		 * Continue processing for a possible status report.

 This should be status report, read status regs */

 handshake the event */

	/*

	 * a non-zero udelay period is required for using

	 * IRQF_TRIGGER_LOW in order to delay until the

	 * device completes isr deassert

	/*

	 * Ensure we wait until the watchdog timer

	 * running on a different CPU finishes

/*

 * returns error if was not owned

 wait heartbeat */

 reset hardware */

/*

 * returns err if refused or timeout; block until mode change complete

 * bit is set (mode change interrupt)

 change mode */

 Clear device mode bits and set to new mode */

 wait for mode change done interrupt */

 Already in sleep mode? */

 Wait until currently running IRQ handler exits and disable IRQ */

 Give time to FW to sleep */

 reset hardware and wait for heartbeat */

 exit bl into sysinfo mode */

 Check for invalid/corrupted touch application */

 read sysinfo data */

 restore to sleep if was suspended */

 Don't return fail code, mode is already changed. */

 Wake the waiters for end of startup */

 Already woken? */

 Initiate a read transaction to wake up */

 Try starting up */

 get maximum values from the sysinfo data */

 set event signal capabilities */

 shift track ids down to start at 0 */

 Create the input device and register it. */

 get sysinfo */

 Initialize device info */

 Initialize mutexes and spinlocks */

 Initialize wait queue */

 Initialize works */

 Initialize IRQ */

 Call platform init function */

 use level triggered interrupts */

 use edge triggered interrupts */

 Setup watchdog timer */

	/*

	 * call startup directly to ensure that the device

	 * is tested before leaving the probe

 Do not fail probe if startup fails but the device is detected */

	/*

	 * Suspend the device before freeing the startup_work and stopping

	 * the watchdog since sleep function restarts watchdog on failure

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TSC-40 serial touchscreen driver. It should be compatible with

 * TSC-10 and 25.

 *

 * Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>

/*

 * Wacom W8001 penabled serial touchscreen driver

 *

 * Copyright (c) 2008 Jaya Kumar

 * Copyright (c) 2010 Red Hat, Inc.

 * Copyright (c) 2010 - 2011 Ping Cheng, Wacom. <pingc@wacom.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file COPYING in the main directory of this archive for

 * more details.

 *

 * Layout based on Elo serial touchscreen driver by Vojtech Pavlik

 set in first byte of touch data packets */

 length of data packets in bytes, depends on device. */

 control packet */

 resolution in points/mm */

 touch query reply packet */

/*

 * Per-touchscreen data.

 data[5,6] and [11,12] is finger capacity */

 scale to pen maximum */

	/* emulate single touch events when stylus is out of proximity.

	 * This is to make single touch backward support consistent

	 * across all Wacom single touch devices.

 Early days' single-finger touch models need the following defaults */

	/*

	 * We have 1 bit for proximity (rdy) and 3 bits for tip, side,

	 * side2/eraser. If rdy && f2 are set, this can be either pen + side2,

	 * or eraser. Assume:

	 * - if dev is already in proximity and f2 is toggled â pen + side2

	 * - if dev comes into proximity with f2 set â eraser

	 * If f2 disappears after assuming eraser, fake proximity out for

	 * eraser and in for pen.

 scale to pen maximum */

 Pen coordinates packet */

 control packet */

 2 finger touch packet */

		/*

		 * ThinkPad X60 Tablet PC (pen only device) sometimes

		 * sends invalid data packets that are larger than

		 * W8001_PKTLEN_TPCPEN. Let's start over again.

 wait 250ms before querying the device */

 penabled? */

 Touch enabled? */

	/*

	 * Some non-touch devices may reply to the touch query. But their

	 * second byte is empty, which indicates touch is not supported.

 if pen is supported scale to pen maximum */

/*

 * w8001_disconnect() is the opposite of w8001_connect()

/*

 * w8001_connect() is the routine that is called when someone adds a

 * new serio device that supports the w8001 protocol and registers it as

 * an input device.

	/* For backwards-compatibility we compose the basename based on

	 * capabilities and then just append the tool type

/*

 * Weida HiTech WDT87xx TouchScreen I2C driver

 *

 * Copyright (c) 2015  Weida Hi-Tech Co., Ltd.

 * HN Chen <hn.chen@weidahitech.com>

 *

 * This software is licensed under the terms of the GNU General Public

 * License, as published by the Free Software Foundation, and

 * may be copied, distributed, and modified under those terms.

 the finger definition of the report event */

 The definition of a report packet */

 The definition of the controller parameters */

 The definition of the device descriptor */

 Communication commands */

 The definition of the command packet */

 The definition of firmware chunk tags */

 Controller requires minimum 300us between commands */

 Mutex for fw update to prevent concurrent access */

 Get feature command packet */

 Set feature command packet */

 Set the command packet */

 Mode selector */

 Wait the device to be ready */

 chunk ID + size */

 Get the scaling factor of pixel to logical coordinate */

	/*

	 * Get the chip_id from the firmware. Make sure that it is the

	 * right controller to do the firmware and config update.

 Address and length should be 4 bytes aligned */

 Wait for the controller to finish the write */

 Delay for fw to clear watch dog */

 Wait the operation to complete */

 Refresh the parameters */

 Check if this is an active contact */

 Refuse incorrect coordinates */

 Check if the I2C function is ok in this adaptor */

	/*

	 * The chip may have been reset while system is resuming,

	 * give it some time to settle.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for Ntrig/Microsoft Touchscreens over SPI

 *

 *  Copyright (c) 2016 Red Hat Inc.

		/*

		 * When bit 5 of status is 1, it marks the end of the report:

		 * - touch present: 0xe7

		 * - touch released: 0xe4

		 * - nothing valuable: 0xff

 fake proximity out to switch tools */

 let the device settle a little */

/**

 * surface3_spi_get_gpio_config - Get GPIO config from ACPI/DT

 *

 * @data: surface3_spi_ts_data pointer

 Get the reset lines GPIO pin number */

 Microsoft */

 Microsoft */

 Set up SPI*/

 SPDX-License-Identifier: GPL-2.0

/*

 * ILITEK Touch IC driver for 23XX, 25XX and Lego series

 *

 * Copyright (C) 2011 ILI Technology Corporation.

 * Copyright (C) 2020 Luca Hsu <luca_hsu@ilitek.com>

 * Copyright (C) 2021 Joe Hung <joe_hung@ilitek.com>

 common cmds */

 ALWAYS keep at the end */

 ILITEK I2C R/W APIs */

 ILITEK ISR APIs */

 APIs of cmds for ILITEK Touch IC */

 common cmds */

 Probe APIs */

 Protocol v3 is not support currently */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Touchright serial touchscreen driver

 *

 * Copyright (c) 2006 Rick Koch <n1gp@hotmail.com>

 *

 * Based on MicroTouch driver (drivers/input/touchscreen/mtouch.c)

 * Copyright (c) 2004 Vojtech Pavlik

 * and Dan Streetman <ddstreet@ieee.org>

/*

 * Definitions & global arrays.

/*

 * Per-touchscreen data.

/*

 * tr_disconnect() is the opposite of tr_connect()

/*

 * tr_connect() is the routine that is called when someone adds a

 * new serio device that supports the Touchright protocol and registers it as

 * an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for EETI eGalax Multiple Touch Controller

 *

 * Copyright (C) 2011 Freescale Semiconductor, Inc.

 *

 * based on max11801_ts.c

/* EETI eGalax serial touch screen controller is a I2C based multiple

/* TODO:

  - auto idle mode support

/*

 * Mouse Mode: some panel may configure the controller to mouse mode,

 * which can only report one point at a given time.

 * This driver will ignore events in this mode.

/*

 * Vendor Mode: this mode is used to transfer some vendor specific

 * messages.

 * This driver will ignore events in this mode.

 Multiple Touch Mode */

 ignore mouse events and vendor events */

 wake up controller by an falling edge of interrupt gpio.  */

 wake up controller via an falling edge on IRQ gpio. */

 controller should be waken up, return irq.  */

 controller may be in sleep, wake it up. */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2014-2015 Pengutronix, Markus Pargmann <mpa@pengutronix.de>

 Based on driver from 2011:

   Juergen Beisert, Pengutronix <kernel@pengutronix.de>



 This is the driver for the imx25 TCQ (Touchscreen Conversion Queue)

 connected to the imx25 ADC.

 Sentinel */ }

 PRECHARGE */

 TOUCH_DETECT */

 X Measurement */

 Y Measurement */

 Enable the touch detection right now */

 Setup the conversion queue */

	/*

	 * We measure X/Y with 'sample_count' number of samples and execute a

	 * touch detection twice, with 1 sample each

 stop the queue from looping */

 for a clean touch detection, preload the X plane */

 waste some time now to pre-load the X plate to high voltage */

 re-enable the detection right now */

 enable the pen down event to be a source for the interrupt */

 lets fire the next IRQ if someone touches the touchscreen */

		/*

		 * only if both touch measures are below a threshold,

		 * the position is valid

 valid samples, generate a report */

 get next sample */

			/*

			 * if both samples are invalid,

			 * generate a release report

			/*

			 * if only one of both touch measurements are

			 * below the threshold, still some bouncing

			 * happens. Take additional samples in this

			 * case to be sure

	/*

	 * Check how many samples are available. We always have to read exactly

	 * sample_count samples from the fifo, or a multiple of sample_count.

	 * Otherwise we mixup samples into different touch events.

 configure the state machine for a 4-wire touchscreen */

 Reset */

 up to 128 * 8 ADC clocks are possible */

 up to 255 * 8 ADC clocks are possible */

 setup debounce count */

 enable debounce */

 enable the engine on demand */

 Enable repeat and repeat wait */

 Setup defaults */

 These are optional, we don't care about the return values */

 SPDX-License-Identifier: GPL-2.0-or-later

/******************************************************************************

 * usbtouchscreen.c

 * Driver for USB Touchscreens, supporting those devices:

 *  - eGalax Touchkit

 *    includes eTurboTouch CT-410/510/700

 *  - 3M/Microtouch  EX II series

 *  - ITM

 *  - PanJit TouchSet

 *  - eTurboTouch

 *  - Gunze AHL61

 *  - DMC TSC-10/25

 *  - IRTOUCHSYSTEMS/UNITOP

 *  - IdealTEK URTC1000

 *  - General Touch

 *  - GoTop Super_Q2/GogoPen/PenPower tablets

 *  - JASTEC USB touch controller/DigiTech DTR-02U

 *  - Zytronic capacitive touchscreen

 *  - NEXIO/iNexio

 *  - Elo TouchSystems 2700 IntelliTouch

 *  - EasyTouch USB Dual/Multi touch controller from Data Modul

 *

 * Copyright (C) 2004-2007 by Daniel Ritz <daniel.ritz@gmx.ch>

 * Copyright (C) by Todd E. Johnson (mtouchusb.c)

 *

 * Driver is based on touchkitusb.c

 * - ITM parts are from itmtouch.c

 * - 3M parts are from mtouchusb.c

 * - PanJit parts are from an unmerged driver by Lanslott Gish

 * - DMC TSC 10/25 are from Holger Schurig, with ideas from an unmerged

 *   driver from Marius Vollmer

 *

#define DEBUG

 device specifc data/functions */

	/*

	 * Always service the USB devices irq not just when the input device is

	 * open. This is useful when devices have a watchdog which prevents us

	 * from periodically polling the device. Leave this unset unless your

	 * touchscreen device requires it, as it does consume more of the USB

	 * bandwidth.

	/*

	 * used to get the packet len. possible return values:

	 * > 0: packet len

	 * = 0: skip one byte

	 * < 0: -return value more bytes needed

 a usbtouch device */

 serialize access to open/suspend */

 device types */

 ignore the HID capable devices, handled by usbhid */

 normal device IDs */

 TC5UH */

 TC4UM */

 data interface only */

/*****************************************************************************

 * e2i Part

/*****************************************************************************

 * eGalax part

	/*

	 * An eGalax diagnostic packet kicks the device into using the right

	 * protocol.  We send a "check active" packet.  The response will be

	 * read later and ignored.

 length */

 command - check active */

/*****************************************************************************

 * EasyTouch part

/*****************************************************************************

 * PanJit Part

/*****************************************************************************

 * 3M/Microtouch Part

 Default min/max xy are the raw values, override if using hw-calib */

/*****************************************************************************

 * ITM Part

	/*

	 * ITM devices report invalid x/y data if not touched.

	 * if the screen was touched before but is not touched any more

	 * report touch as 0 with the last valid x/y data once. then stop

	 * reporting data until touched again.

/*****************************************************************************

 * eTurboTouch part

 packets should start with sync */

/*****************************************************************************

 * Gunze part

/*****************************************************************************

 * DMC TSC-10/25 Part

 *

 * Documentation about the controller and it's protocol can be found at

 *   http://www.dmccoltd.com/files/controler/tsc10usb_pi_e.pdf

 *   http://www.dmccoltd.com/files/controler/tsc25_usb_e.pdf

 supported data rates. currently using 130 */

 commands */

 reset */

 TSC-25 data sheet specifies a delay after the RESET command */

 set coordinate output rate */

 start sending data */

/*****************************************************************************

 * IRTOUCH Part

/*****************************************************************************

 * ET&T TC5UH/TC4UM part

/*****************************************************************************

 * IdealTEK URTC1000 Part

 touch data in IdealTEK mode */

 touch data in MT emulation mode */

/*****************************************************************************

 * General Touch Part

/*****************************************************************************

 * GoTop Part

/*****************************************************************************

 * JASTEC Part

/*****************************************************************************

 * Zytronic Part

 command response */

 down */

 up */

/*****************************************************************************

 * NEXIO Part

 0xe1 = touch, 0xe1 = release */

 total bytes of touch data */

 bytes for X axis */

 bytes for Y axis */

 find first input and output endpoint */

 two empty reads */

 send init command */

 read replies */

 firmware version */

 device name */

 got touch data? */

 send ACK */

	/*

	 * The device reports state of IR sensors on X and Y axes.

	 * Each byte represents "darkness" percentage (0-100) of one element.

	 * 17" touchscreen reports only 64 x 52 bytes so the resolution is low.

	 * This also means that there's a limited multi-touch capability but

	 * it's disabled (and untested) here as there's no X driver for that.

 multi-touch */

 single touch */

/*****************************************************************************

 * ELO part

/*****************************************************************************

 * the different device descriptors

/*****************************************************************************

 * Generic Part

 process buffer */

 try to get size */

 drop? */

 need to append -pkt_len bytes before able to get size */

 append */

 loop over the received packet, process */

 get packet len */

 unknown packet: skip one byte */

 full packet: process */

 incomplete packet: save in buffer */

 success */

 this urb is timing out */

 this urb is terminated, clean up */

 reinit the device */

 restart IO if needed */

 some devices are ignored */

		/*

		 * When dealing with variable-length packets we should

		 * not request more than wMaxPacketSize bytes at once

		 * as we do not know if there is more data coming or

		 * we filled exactly wMaxPacketSize bytes and there is

		 * nothing else.

 device specific allocations */

 device specific initialisation*/

 this can't fail */

 this will stop IO via close */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Microchip AR1020 and AR1021 driver for I2C

 *

 * Author: Christian Gmeiner <christian.gmeiner@gmail.com>

 sync bit set ? */

 number of bytes after this */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/drivers/input/keyboard/omap-keypad.c

 *

 * OMAP Keypad Driver

 *

 * Copyright (C) 2003 Nokia Corporation

 * Written by Timo TerÃ¤s <ext-timo.teras@nokia.com>

 *

 * Added support for H2 & H3 Keypad

 * Copyright (C) 2004 Texas Instruments

 disable keyboard interrupt and schedule for handling */

 disable keyboard interrupt and schedule for handling */

 read the keypad status */

 check for any changes */

 check for changes and print those */

		/* some key is pressed - keep irq disabled and use timer

 enable interrupts */

 Disable the interrupt for the MPUIO keyboard */

 get the irq and init timer*/

 setup input device */

 scan current status and enable interrupt */

 disable keypad interrupt handling */

 unregister everything */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SuperH KEYSC Keypad Driver

 *

 * Copyright (C) 2008 Magnus Damm

 *

 * Based on gpio_keys.c, Copyright 2005 Phil Blundell

 drive one KEYOUT pin low, read KEYIN pins */

 set bit if key press has been detected */

 keep track of which KEYIN bits that have been set */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Stowaway keyboard driver for Linux

/*

 *  Copyright (c) 2006 Marek Vasut

 *

 *  Based on Newton keyboard driver for Linux

 *  by Justin Cormack

/*

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Allwinner sun4i low res adc attached tablet keys driver

 *

 * Copyright (C) 2014 Hans de Goede <hdegoede@redhat.com>

/*

 * Allwinnner sunxi SoCs have a lradc which is specifically designed to have

 * various (tablet) keys (ie home, back, search, etc). attached to it using

 * a resistor network. This driver is for the keys on such boards.

 *

 * There are 2 channels, currently this driver only supports channel 0 since

 * there are no boards known to use channel 1.

 LRADC_CTRL bits */

 8 bits */

 2 bits */

 4 bits */

 2 bits */

 4 bits */

 2 bits */

 2 bits */

 LRADC_INTC and LRADC_INTS bits */

/* struct lradc_variant - Describe sun4i-a10-lradc-keys hardware variant

 * @divisor_numerator:		The numerator of lradc Vref internally divisor

 * @divisor_denominator:	The denominator of lradc Vref internally divisor

	/*

	 * lradc supports only one keypress at a time, release does not give

	 * any info as to which key was released, so we cache the keycode.

	/*

	 * Set sample time to 4 ms / 250 Hz. Wait 2 * 4 ms for key to

	 * stabilize on press, wait (1 + 1) * 4 ms for key release

 Disable lradc, leave other settings unchanged */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Cypress StreetFighter Touchkey Driver

 *

 * Copyright (c) 2021 Yassine Oudjana <y.oudjana@protonmail.com>

 Default key count */

 Default keycodes */

 SPDX-License-Identifier: GPL-2.0

/*

 * MacBook (Pro) SPI keyboard and touchpad driver

 *

 * Copyright (c) 2015-2018 Federico Lorenzi

 * Copyright (c) 2017-2018 Ronald TschalÃ¤r

/*

 * The keyboard and touchpad controller on the MacBookAir6, MacBookPro12,

 * MacBook8 and newer can be driven either by USB or SPI. However the USB

 * pins are only connected on the MacBookAir6 and 7 and the MacBookPro12.

 * All others need this driver. The interface is selected using ACPI methods:

 *

 * * UIEN ("USB Interface Enable"): If invoked with argument 1, disables SPI

 *   and enables USB. If invoked with argument 0, disables USB.

 * * UIST ("USB Interface Status"): Returns 1 if USB is enabled, 0 otherwise.

 * * SIEN ("SPI Interface Enable"): If invoked with argument 1, disables USB

 *   and enables SPI. If invoked with argument 0, disables SPI.

 * * SIST ("SPI Interface Status"): Returns 1 if SPI is enabled, 0 otherwise.

 * * ISOL: Resets the four GPIO pins used for SPI. Intended to be invoked with

 *   argument 1, then once more with argument 0.

 *

 * UIEN and UIST are only provided on models where the USB pins are connected.

 *

 * SPI-based Protocol

 * ------------------

 *

 * The device and driver exchange messages (struct message); each message is

 * encapsulated in one or more packets (struct spi_packet). There are two types

 * of exchanges: reads, and writes. A read is signaled by a GPE, upon which one

 * message can be read from the device. A write exchange consists of writing a

 * command message, immediately reading a short status packet, and then, upon

 * receiving a GPE, reading the response message. Write exchanges cannot be

 * interleaved, i.e. a new write exchange must not be started till the previous

 * write exchange is complete. Whether a received message is part of a read or

 * write exchange is indicated in the encapsulating packet's flags field.

 *

 * A single message may be too large to fit in a single packet (which has a

 * fixed, 256-byte size). In that case it will be split over multiple,

 * consecutive packets.

 from experimentation, in Âµs */

/**

 * struct keyboard_protocol - keyboard message.

 * message.type = 0x0110, message.length = 0x000a

 *

 * @unknown1:		unknown

 * @modifiers:		bit-set of modifier/control keys pressed

 * @unknown2:		unknown

 * @keys_pressed:	the (non-modifier) keys currently pressed

 * @fn_pressed:		whether the fn key is currently pressed

 * @crc16:		crc over the whole message struct (message header +

 *			this struct) minus this @crc16 field

/**

 * struct tp_finger - single trackpad finger structure, le16-aligned

 *

 * @origin:		zero when switching track finger

 * @abs_x:		absolute x coordinate

 * @abs_y:		absolute y coordinate

 * @rel_x:		relative x coordinate

 * @rel_y:		relative y coordinate

 * @tool_major:		tool area, major axis

 * @tool_minor:		tool area, minor axis

 * @orientation:	16384 when point, else 15 bit angle

 * @touch_major:	touch area, major axis

 * @touch_minor:	touch area, minor axis

 * @unused:		zeros

 * @pressure:		pressure on forcetouch touchpad

 * @multi:		one finger: varies, more fingers: constant

 * @crc16:		on last finger: crc over the whole message struct

 *			(i.e. message header + this struct) minus the last

 *			@crc16 field; unknown on all other fingers.

/**

 * struct touchpad_protocol - touchpad message.

 * message.type = 0x0210

 *

 * @unknown1:		unknown

 * @clicked:		1 if a button-click was detected, 0 otherwise

 * @unknown2:		unknown

 * @number_of_fingers:	the number of fingers being reported in @fingers

 * @clicked2:		same as @clicked

 * @unknown3:		unknown

 * @fingers:		the data for each finger

/**

 * struct command_protocol_tp_info - get touchpad info.

 * message.type = 0x1020, message.length = 0x0000

 *

 * @crc16:		crc over the whole message struct (message header +

 *			this struct) minus this @crc16 field

/**

 * struct touchpad_info - touchpad info response.

 * message.type = 0x1020, message.length = 0x006e

 *

 * @unknown1:		unknown

 * @model_flags:	flags (vary by model number, but significance otherwise

 *			unknown)

 * @model_no:		the touchpad model number

 * @unknown2:		unknown

 * @crc16:		crc over the whole message struct (message header +

 *			this struct) minus this @crc16 field

/**

 * struct command_protocol_mt_init - initialize multitouch.

 * message.type = 0x0252, message.length = 0x0002

 *

 * @cmd:		value: 0x0102

 * @crc16:		crc over the whole message struct (message header +

 *			this struct) minus this @crc16 field

/**

 * struct command_protocol_capsl - toggle caps-lock led

 * message.type = 0x0151, message.length = 0x0002

 *

 * @unknown:		value: 0x01 (length?)

 * @led:		0 off, 2 on

 * @crc16:		crc over the whole message struct (message header +

 *			this struct) minus this @crc16 field

/**

 * struct command_protocol_bl - set keyboard backlight brightness

 * message.type = 0xB051, message.length = 0x0006

 *

 * @const1:		value: 0x01B0

 * @level:		the brightness level to set

 * @const2:		value: 0x0001 (backlight off), 0x01F4 (backlight on)

 * @crc16:		crc over the whole message struct (message header +

 *			this struct) minus this @crc16 field

/**

 * struct message - a complete spi message.

 *

 * Each message begins with fixed header, followed by a message-type specific

 * payload, and ends with a 16-bit crc. Because of the varying lengths of the

 * payload, the crc is defined at the end of each payload struct, rather than

 * in this struct.

 *

 * @type:	the message type

 * @zero:	always 0

 * @counter:	incremented on each message, rolls over after 255; there is a

 *		separate counter for each message type.

 * @rsp_buf_len:response buffer length (the exact nature of this field is quite

 *		speculative). On a request/write this is often the same as

 *		@length, though in some cases it has been seen to be much larger

 *		(e.g. 0x400); on a response/read this the same as on the

 *		request; for reads that are not responses it is 0.

 * @length:	length of the remainder of the data in the whole message

 *		structure (after re-assembly in case of being split over

 *		multiple spi-packets), minus the trailing crc. The total size

 *		of the message struct is therefore @length + 10.

 *

 * @keyboard:		Keyboard message

 * @touchpad:		Touchpad message

 * @tp_info:		Touchpad info (response)

 * @tp_info_command:	Touchpad info (CRC)

 * @init_mt_command:	Initialise Multitouch

 * @capsl_command:	Toggle caps-lock LED

 * @bl_command:		Keyboard brightness

 * @data:		Buffer data

 type + zero + counter + rsp_buf_len + length */

/**

 * struct spi_packet - a complete spi packet; always 256 bytes. This carries

 * the (parts of the) message in the data. But note that this does not

 * necessarily contain a complete message, as in some cases (e.g. many

 * fingers pressed) the message is split over multiple packets (see the

 * @offset, @remaining, and @length fields). In general the data parts in

 * spi_packet's are concatenated until @remaining is 0, and the result is an

 * message.

 *

 * @flags:	0x40 = write (to device), 0x20 = read (from device); note that

 *		the response to a write still has 0x40.

 * @device:	1 = keyboard, 2 = touchpad

 * @offset:	specifies the offset of this packet's data in the complete

 *		message; i.e. > 0 indicates this is a continuation packet (in

 *		the second packet for a message split over multiple packets

 *		this would then be the same as the @length in the first packet)

 * @remaining:	number of message bytes remaining in subsequents packets (in

 *		the first packet of a message split over two packets this would

 *		then be the same as the @length in the second packet)

 * @length:	length of the valid data in the @data in this packet

 * @data:	all or part of a message

 * @crc16:	crc over this whole structure minus this @crc16 field. This

 *		covers just this packet, even on multi-packet messages (in

 *		contrast to the crc in the message).

 cs-to-clk delay in us */

 active-to-receive delay? */

 ? (cur val: 10) */

 this mimics struct drm_rect */

 lock to protect the above parameters and flags below */

/*

 * This must have exactly as many entries as there are bits in

 * struct keyboard_protocol.modifiers .

 MB8 MB9 MB10 */

 MBP13,1 MBP13,2 MBP14,1 MBP14,2 */

 MBP13,3 MBP14,3 */

	/*

	 * All we need here is a delay at the beginning of the message before

	 * asserting cs. But the current spi API doesn't support this, so we

	 * end up with an extra unnecessary (but harmless) cs assertion and

	 * deassertion.

 check if SPI is already enabled, so we can skip the delay below */

 SIEN(1) will enable SPI communication */

	/*

	 * Allow the SPI interface to come up before returning. Without this

	 * delay, the SPI commands to enable multitouch mode may not reach

	 * the trackpad controller, causing pointer movement to break upon

	 * resume from sleep.

		/*

		 * If we got an error, we presumably won't get the expected

		 * response message either.

 check if draining */

 check whether send is in progress */

 set up packet */

 are we processing init commands? */

 build init command */

 build init command */

 do we need caps-lock command? */

 build led command */

 do we need backlight command? */

 build command buffer */

 everything's up-to-date */

 finalize packet */

 send command */

		/*

		 * The backlight does not turn on till level 32, so we scale

		 * the range here so that from a user's perspective it turns

		 * on at 1.

 lifted from the BCM5974 driver and renamed from raw2int */

 convert 16-bit little endian to signed integer */

 touchpad_input_dev is set async in worker */

 touchpad isn't initialized yet */

 check for rollover overflow, which is signalled by all keys == 1 */

 remap fn key if desired */

 check released keys */

 key is still pressed */

 check pressed keys */

 check control keys */

 check function key */

 done */

 set up touchpad dimensions */

 create touchpad input device */

 basic properties */

 finger touch area */

 finger approach area */

 finger orientation */

 finger position */

 touchpad button */

 multitouch */

 register input device */

 touchpad_input_dev is read async in spi callback */

		/*

		 * We're not allowed to sleep here, but registering an input

		 * device can sleep.

 process packet header */

 handle multi-packet messages */

 got complete message - verify */

 handle message */

		/*

		 * We don't actually know if this was a pure read, or a response

		 * to a write. But this is a rare error condition that should

		 * never occur, so clearing both flags to avoid deadlock.

 Save keyboard backlight level */

 check if the USB interface is present and enabled already */

 let the USB driver take over instead */

 allocate driver data */

 store the driver data */

 create our buffers */

 set up our spi messages */

 cache ACPI method handles */

 switch on the SPI interface */

 setup the keyboard input dev */

	/*

	 * The applespi device doesn't send interrupts normally (as is described

	 * in its DSDT), but rather seems to use ACPI GPEs.

 trigger touchpad setup */

	/*

	 * By default this device is not enabled for wakeup; but USB keyboards

	 * generally are, so the expectation is that by default the keyboard

	 * will wake the system.

 set up keyboard-backlight */

 set up debugfs entries for touchpad dimensions logging */

 turn off caps-lock - it'll stay on otherwise */

 disable the interrupt */

 ensure our flags and state reflect a newly resumed device */

 switch on the SPI interface */

 re-enable the interrupt */

 switch the touchpad into multitouch mode */

 SPDX-License-Identifier: GPL-2.0+



 Driver for the IMX SNVS ON/OFF Power Key

 Copyright (C) 2015 Freescale Semiconductor, Inc. All Rights Reserved.

 LP Status Register */

 LP Control Register */

 1:pressed */

 only report new event if status changed */

 repeat check if pressed long */

			/*

			 * The first generation i.MX6 SoCs only sends an

			 * interrupt on button release. To mimic power-key

			 * usage, we'll prepend a press event.

 clear SPO status */

 Get SNVS register Page */

 clear the unexpected interrupt before driver ready */

 input customer action to cancel release timer */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OMAP4 Keypad Driver

 *

 * Copyright (C) 2010 Texas Instruments

 *

 * Author: Abraham Arce <x0066660@ti.com>

 * Initial Code: Syed Rafiuddin <rafiuddin.syed@ti.com>

 OMAP4 registers */

 OMAP4 bit definitions */

 OMAP4 values */

/*

 * Errata i689: If a key is released for a time shorter than debounce time,

 * the keyboard will idle and never detect the key release. The workaround

 * is to use at least a 12ms debounce time. See omap5432 TRM chapter

 * "26.4.6.2 Keyboard Controller Timer" for more information.

 Approximate measured time */

 for key scan */

	/*

	 * Report key up events separately and first. This matters in case we

	 * lost key-up interrupt and just now catching up.

 Report key down events */

 Interrupt handlers */

 clear pending interrupts */

 clear pending interrupts */

 Disable interrupts and wake-up events */

 clear pending interrupts */

/*

 * Errata ID i689 "1.32 Keyboard Key Up Event Can Be Missed".

 * Interrupt may not happen for key-up events. We must clear stuck

 * key-up events after the keyboard hardware has auto-idled.

	/*

	 * Enable clocks for the keypad module so that we can read

	 * revision register.

 Ensure device does not raise interrupts */

 input device allocation */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/input/keyboard/jornada720_kbd.c

 *

 * HP Jornada 720 keyboard platform driver

 *

 * Copyright (C) 2006/2007 Kristoffer Ericson <Kristoffer.Ericson@Gmail.com>

 *

 *    Copyright (C) 2006 jornada 720 kbd driver by

		Filip Zyzniewsk <Filip.Zyzniewski@tefnet.plX

 *     based on (C) 2004 jornada 720 kbd driver by

		Alex Lange <chicken@handhelds.org>

 ROW */

 #1  */

  -> */

 #2  */

  -> */

 #3  */

  -> */

 #4  */

  -> */

 #5  */

  -> */

 #6  */

  -> */

  -> */

  -> */

  -> */

 startup ssp with spinlock */

 How many keycodes are waiting for us? */

 Lets drag them out one at a time */

 Exchange TxDummy for location (keymap[kbddata]) */

 release spinlock and turn off ssp */

 work with hotplug and coldplug */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  atakbd.c

 *

 *  Copyright (c) 2005 Michael Schmitz

 *

 * Based on amikbd.c, which is

 *

 *  Copyright (c) 2000-2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	Hamish Macdonald

/*

 * Atari keyboard driver for Linux/m68k

 *

 * The low level init and interrupt stuff is handled in arch/mm68k/atari/atakeyb.c

 * (the keyboard ACIA also handles the mouse and joystick data, and the keyboard

 * interrupt is shared with the MIDI ACIA so MIDI data also get handled there).

 * This driver only deals with handing key events off to the input layer.

/*

/*

 0x47: KP_7     71

 0x48: KP_8     72

 0x49: KP_9     73

 0x62: KP_/     98

 0x4b: KP_4     75

 0x4c: KP_5     76

 0x4d: KP_6     77

 0x37: KP_*     55

 0x4f: KP_1     79

 0x50: KP_2     80

 0x51: KP_3     81

 0x4a: KP_-     74

 0x52: KP_0     82

 0x53: KP_.     83

 0x4e: KP_+     78



 0x67: Up       103

 0x6c: Down     108

 0x69: Left     105

 0x6a: Right    106

 American layout */

 scancodes < 0xf3 are keys */

 report raw events here?

 scancodes >= 0xf3 are mouse data, most likely */

 need to init core driver if not already done so

 error check */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DaVinci Key Scan Driver for TI platforms

 *

 * Copyright (C) 2009 Texas Instruments, Inc

 *

 * Author: Miguel Aguilar <miguel.aguilar@ridgerun.com>

 *

 * Initial Code: Sandeep Paulraj <s-paulraj@ti.com>

 Key scan registers */

 Key Control Register (KEYCTRL) */

 Masks for the interrupts */

 Initializing the kp Module */

 Enable all interrupts */

 Clear interrupts if any */

 Setup the scan period = strobe + interval */

 Define matrix type */

 Enable key scan module and set matrix type */

 Disable interrupt */

 Reading previous and new status of the key scan */

		/*

		 * It goes through all bits in 'changed' to ensure

		 * that no key changes are being missed

 Clearing interrupt */

 Enable interrupts */

 Enable auto repeat feature of Linux input subsystem */

 Setup input device */

 Setup the platform data */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Keypad driver for Analog Devices ADP5520 MFD PMICs

 *

 * Copyright 2009 Analog Devices Inc.

 Read twice to clear */

 Read twice to clear */

 setup input device */

 SPDX-License-Identifier: GPL-2.0

 ChromeOS EC keyboard driver



 Copyright (C) 2012 Google, Inc.



 This driver uses the ChromeOS EC byte-level message-based protocol for

 communicating the keyboard state (which keys are pressed) from a keyboard EC

 to the AP over some bus (such as i2c, lpc, spi).  The EC does debouncing,

 but everything else (including deghosting) is done here.  The main

 motivation for this is to keep the EC firmware as simple as possible, since

 it cannot be easily upgraded and EC flash/IRAM space is relatively

 expensive.

/**

 * struct cros_ec_keyb - Structure representing EC keyboard device

 *

 * @rows: Number of rows in the keypad

 * @cols: Number of columns in the keypad

 * @row_shift: log2 or number of rows, rounded up

 * @keymap_data: Matrix keymap data used to convert to keyscan values

 * @ghost_filter: true to enable the matrix key-ghosting filter

 * @valid_keys: bitmap of existing keys for each matrix column

 * @old_kb_state: bitmap of keys pressed last scan

 * @dev: Device pointer

 * @ec: Top level ChromeOS device to use to talk to EC

 * @idev: The input device for the matrix keys.

 * @bs_idev: The input device for non-matrix buttons and switches (or NULL).

 * @notifier: interrupt event notifier for transport devices

 * @function_row_physmap: An array of the encoded rows/columns for the top

 *                        row function keys, in an order from left to right

 * @num_function_row_keys: The number of top row keys in a custom keyboard

/**

 * struct cros_ec_bs_map - Mapping between Linux keycodes and EC button/switch

 *	bitmap #defines

 *

 * @ev_type: The type of the input event to generate (e.g., EV_KEY).

 * @code: A linux keycode

 * @bit: A #define like EC_MKBP_POWER_BUTTON or EC_MKBP_LID_OPEN

 * @inverted: If the #define and EV_SW have opposite meanings, this is true.

 *            Only applicable to switches.

 cros_ec_keyb_bs - Map EC button/switch #defines into kernel ones */

 Buttons */

 Switches */

/*

 * Returns true when there is at least one combination of pressed keys that

 * results in ghosting.

	/*

	 * Ghosting happens if for any pressed key X there are other keys

	 * pressed both in the same row and column of X as, for instance,

	 * in the following diagram:

	 *

	 * . . Y . g .

	 * . . . . . .

	 * . . . . . .

	 * . . X . Z .

	 *

	 * In this case only X, Y, and Z are pressed, but g appears to be

	 * pressed too (see Wikipedia).

/*

 * Compares the new keyboard state to the old one and produces key

 * press/release events accordingly.  The keyboard state is 13 bytes (one byte

 * per column)

		/*

		 * Simple-minded solution: ignore this state. The obvious

		 * improvement is to only ignore changes to keys involved in

		 * the ghosting, but process the other changes.

/**

 * cros_ec_keyb_report_bs - Report non-matrixed buttons or switches

 *

 * This takes a bitmap of buttons or switches from the EC and reports events,

 * syncing at the end.

 *

 * @ckdev: The keyboard device.

 * @ev_type: The input event type (e.g., EV_KEY).

 * @mask: A bitmap of buttons from the EC.

	/*

	 * If not wake enabled, discard key state changes during

	 * suspend. Switches will be re-checked in

	 * cros_ec_keyb_resume() to be sure nothing is lost.

/*

 * Walks keycodes flipping bit in buffer COLUMNS deep where bit is ROW.  Used by

 * ghosting logic to ignore NULL or virtual keys.

/**

 * cros_ec_keyb_info - Wrap the EC command EC_CMD_MKBP_INFO

 *

 * This wraps the EC_CMD_MKBP_INFO, abstracting out all of the marshalling and

 * unmarshalling and different version nonsense into something simple.

 *

 * @ec_dev: The EC device

 * @info_type: Either EC_MKBP_INFO_SUPPORTED or EC_MKBP_INFO_CURRENT.

 * @event_type: Either EC_MKBP_EVENT_BUTTON or EC_MKBP_EVENT_SWITCH.  Actually

 *              in some cases this could be EC_MKBP_EVENT_KEY_MATRIX or

 *              EC_MKBP_EVENT_HOST_EVENT too but we don't use in this driver.

 * @result: Where we'll store the result; a union

 * @result_size: The size of the result.  Expected to be the size of one of

 *               the elements in the union.

 *

 * Returns 0 if no error or -error upon error.

 With older ECs we just return 0 for everything */

/**

 * cros_ec_keyb_query_switches - Query the state of switches and report

 *

 * This will ask the EC about the current state of switches and report to the

 * kernel.  Note that we don't query for buttons because they are more

 * transitory and we'll get an update on the next release / press.

 *

 * @ckdev: The keyboard device

 *

 * Returns 0 if no error or -error upon error.

/**

 * cros_ec_keyb_resume - Resume the keyboard

 *

 * We use the resume notification as a chance to query the EC for switches.

 *

 * @dev: The keyboard device

 *

 * Returns 0 if no error or -error upon error.

/**

 * cros_ec_keyb_register_bs - Register non-matrix buttons/switches

 *

 * Handles all the bits of the keyboard driver related to non-matrix buttons

 * and switches, including asking the EC about which are present and telling

 * the kernel to expect them.

 *

 * If this device has no support for buttons and switches we'll return no error

 * but the ckdev->bs_idev will remain NULL when this function exits.

 *

 * @ckdev: The keyboard device

 *

 * Returns 0 if no error or -error upon error.

	/*

	 * We call the non-matrix buttons/switches 'input1', if present.

	 * Allocate phys before input dev, to ensure correct tear-down

	 * ordering.

/**

 * cros_ec_keyb_register_bs - Register matrix keys

 *

 * Handles all the bits of the keyboard driver related to matrix keys.

 *

 * @ckdev: The keyboard device

 *

 * Returns 0 if no error or -error upon error.

	/*

	 * We call the keyboard matrix 'input0'. Allocate phys before input

	 * dev, to ensure correct tear-down ordering.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for keys on TCA6416 I2C IO expander

 *

 * Copyright (C) 2010 Texas Instruments

 *

 * Author : Sriramakrishnan.A.G. <srk@ti.com>

 Figure out which lines have changed */

/*

 * This is threaded IRQ handler and this can (and will) sleep.

 Get initial device state in case it has switches */

 ensure that keypad pins are set to input */

 Check functionality */

 Enable auto repeat feature of Linux input subsystem */

	/*

	 * Initialize cached registers from their original values.

	 * we can't share this chip with another i2c master.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2017 MediaTek, Inc.

 *

 * Author: Chen Zhong <chen.zhong@mediatek.com>

 sentinel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max7359_keypad.c - MAX7359 Key Switch Controller Driver

 *

 * Copyright (C) 2009 Samsung Electronics

 * Kim Kyuwon <q1.kim@samsung.com>

 *

 * Based on pxa27x_keypad.c

 *

 * Datasheet: http://www.maxim-ic.com/quick_view2.cfm/qv_pk/5456

/*

 * MAX7359 registers

/*

 * Configuration register bits

/*

 * Autosleep register values (ms)

 matrix key code map */

 runs in an IRQ thread -- can (and will!) sleep */

/*

 * Let MAX7359 fall into a deep sleep:

 * If no keys are pressed, enter sleep mode for 8192 ms. And if any

 * key is pressed, the MAX7359 returns to normal operating mode.

/*

 * Let MAX7359 take a catnap:

 * Autosleep just for 256 ms.

 Key release enable */

 Key press wakeup enable */

 Full key-scan functionality */

 nINT asserts every debounce cycles */

 Detect MAX7359: The initial Keys FIFO value is '0x3F' */

 Register the input device */

 Initialize MAX7359 */

 Restore the default setting */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * AT and PS/2 keyboard driver

 *

 * Copyright (c) 1999-2002 Vojtech Pavlik

/*

 * This driver can handle standard AT keyboards and PS/2 keyboards in

 * Translated and Raw Set 2 and Set 3, as well as AT keyboards on dumb

 * input-only controllers and AT keyboards connected over a one way RS232

 * converter.

/*

 * Scancode to keycode tables. These are just the default setting, and

 * are loadable via a userland utility.

 XXX: need a more general approach */

 include the keyboard scancodes */

 Reset to defaults and disable */

 Reset to defaults */

 Set all keys to give break codes */

 ... and repeat */

/*

 * The atkbd control structure

 Written only during init */

 Accessed only from interrupt */

 Serializes reconnect(), attr->set() and event work */

/*

 * System-specific keymap fixup routine

/*

 * Certain keyboards to not like ATKBD_CMD_RESET_DIS and stop responding

 * to many commands until full reset (ATKBD_CMD_RESET_BAT) is performed.

/*

 * Checks if we should mangle the scancode to extract 'release' bit

 * in translated mode.

/*

 * Calculates new value of xl_bit so the driver can distinguish

 * between make/break pair of scancodes for select keys and PS/2

 * protocol responses.

/*

 * Encode the scancode, 0xe0 prefix, and high bit into a single integer,

 * keeping kernel 2.4 compatibility for set 2

/*

 * atkbd_interrupt(). Here takes place processing of data received from

 * the keyboard into events.

 Workaround Toshiba laptop multiple keypress */

/*

 * atkbd_event_work() is used to complete processing of events that

 * can not be processed by input_event() which is often called from

 * interrupt context.

		/*

		 * Serio ports are resumed asynchronously so while driver core

		 * thinks that device is already fully operational in reality

		 * it may not be ready yet. In this case we need to keep

		 * rescheduling till reconnect completes.

/*

 * Schedule switch for execution. We need to throttle requests,

 * otherwise keyboard may become unresponsive.

/*

 * Event callback from the input module. Events that change the state of

 * the hardware are processed here. If action can not be performed in

 * interrupt context it is offloaded to atkbd_event_work.

/*

 * atkbd_enable() signals that interrupt handler is allowed to

 * generate input events.

/*

 * atkbd_disable() tells input handler that all incoming data except

 * for ACKs and command response should be dropped.

/*

 * Enable the keyboard to receive keystrokes.

/*

 * atkbd_deactivate() resets and disables the keyboard from sending

 * keystrokes.

/*

 * atkbd_probe() probes for an AT keyboard on a serio port.

/*

 * Some systems, where the bit-twiddling when testing the io-lines of the

 * controller may confuse the keyboard need a full reset of the keyboard. On

 * these systems the BIOS also usually doesn't do it for us.

/*

 * Then we check the keyboard ID. We should get 0xab83 under normal conditions.

 * Some keyboards report different values, but the first byte is always 0xab or

 * 0xac. Some old AT keyboards don't report anything. If a mouse is connected, this

 * should make sure we don't try to set the LEDs on it.

 initialize with invalid values */

/*

 * If the get ID command failed, we check if we can at least set the LEDs on

 * the keyboard. This should work on every keyboard out there. It also turns

 * the LEDs off, which we want anyway.

/*

 * Make sure nothing is coming from the keyboard and disturbs our

 * internal state.

/*

 * atkbd_select_set checks if a keyboard has a working Set 3 support, and

 * sets it into that. Unfortunately there are keyboards that can be switched

 * to Set 3, but don't work well in that (BTC Multimedia ...)

/*

 * For known special keyboards we can go ahead and set the correct set.

 * We check for NCD PS/2 Sun, NorthGate OmniKey 101 and

 * IBM RapidAccess / IBM EzButton / Chicony KBP-8993 keyboards.

/*

 * Set the LEDs to a predefined state (all off).

/*

 * Set autorepeat to fastest possible.

/*

 * atkbd_cleanup() restores the keyboard state so that BIOS is happy after a

 * reboot.

/*

 * atkbd_disconnect() closes and frees.

	/*

	 * Make sure we don't have a command in flight.

	 * Note that since atkbd->enabled is false event work will keep

	 * rescheduling itself until it gets canceled and will not try

	 * accessing freed input device or serio port.

/*

 * generate release events for the keycodes given in data

/*

 * Most special keys (Fn+F?) on Dell laptops do not generate release

 * events so we have to do it ourselves.

/*

 * Perform fixup for HP system that doesn't generate release

 * for its video switch

/*

 * Samsung NC10,NC20 with Fn+F? key release not working

/*

 * Amilo Pi 3525 key release for Fn+Volume keys not working

/*

 * Amilo Xi 3650 key release for light touch bar not working

/*

 * Soltech TA12 system with broken key release on volume keys and mute key

/*

 * Many notebooks don't send key release event for volume up/down

 * keys, with key list below common among them

/*

 * OQO 01+ multimedia keys (64--66) generate e0 6x upon release whereas

 * they should be generating e4-e6 (0x80 | code).

 Parse "linux,keymap" property */

/*

 * atkbd_set_keycode_table() initializes keyboard's keycode table

 * according to the selected scancode set

/*

 * HANGEUL and HANJA keys do not send release events so we need to

 * generate such events ourselves

/*

 * Perform additional fixups

/*

 * atkbd_set_device_attrs() sets up keyboard's input device structure

 Parse "function-row-physmap" property */

/*

 * atkbd_connect() is called when the serio module finds an interface

 * that isn't handled yet by an appropriate device driver. We check if

 * there is an AT keyboard out there and if yes, we register ourselves

 * to the input module.

/*

 * atkbd_reconnect() tries to restore keyboard into a sane state and is

 * most likely called on resume.

		/*

		 * Restore LED state and repeat rate. While input core

		 * will do this for us at resume time reconnect may happen

		 * because user requested it via sysfs or simply because

		 * keyboard was unplugged and plugged in again so we need

		 * to do it ourselves here.

	/*

	 * Reset our state machine in case reconnect happened in the middle

	 * of multi-byte scancode.

		/*

		 * Since device's properties will change we need to

		 * unregister old device. But allocate and register

		 * new one first to make sure we have it.

 64 bytes on stack should be acceptable */

/*

 * NOTE: do not add any more "force release" quirks to this table.  The

 * task of adjusting list of keys that should be "released" automatically

 * by the driver is now delegated to userspace tools, such as udev, so

 * submit such quirks there.

 Portable */

 Portable */

 Inventec Symphony */

 Samsung NC10 */

 Samsung NC20 */

 Samsung SQ45S70S */

 Fujitsu Amilo PA 1510 */

 Fujitsu Amilo Pi 3525 */

 Fujitsu Amilo Xi 3650 */

 OQO Model 01+ */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2009-2011, Code Aurora Forum. All rights reserved.

 in nanoseconds */

/* bits of these registers represent

 * '0' for key press

 * '1' for key release

/**

 * struct pmic8xxx_kp - internal keypad data structure

 * @num_cols: number of columns of keypad

 * @num_rows: number of row of keypad

 * @input: input device pointer for keypad

 * @regmap: regmap handle

 * @key_sense_irq: key press/release irq number

 * @key_stuck_irq: key stuck notification irq number

 * @keycodes: array to hold the key codes

 * @dev: parent device pointer

 * @keystate: present key press/release state

 * @stuckstate: present state when key stuck irq

 * @ctrl_reg: control register value

 all keys pressed on that particular row? */

/*

 * Synchronous read protocol for RevB0 onwards:

 *

 * 1. Write '1' to ReadState bit in KEYP_SCAN register

 * 2. Wait 2*32KHz clocks, so that HW can successfully enter read mode

 *    synchronously

 * 3. Read rows in old array first if events are more than one

 * 4. Read rows in recent array

 * 5. Wait 4*32KHz clocks

 * 6. Write '0' to ReadState bit of KEYP_SCAN register so that hw can

 *    synchronously exit read mode.

 2 * 32KHz clocks */

 4 * 32KHz clocks */

 detecting ghost key is not an error */

 two events - eventcounter is gray-coded */

/*

 * NOTE: We are reading recent and old data registers blindly

 * whenever key-stuck interrupt happens, because events counter doesn't

 * get updated when this interrupt happens due to key stuck doesn't get

 * considered as key state change.

 *

 * We are not using old data register contents after they are being read

 * because it might report the key which was pressed before the key being stuck

 * as stuck key because it's pressed status is stored in the old data

 * register.

 Find column bits */

 Find row bits */

 Row hold time is a multiple of 32KHz cycles. */

/*

 * keypad controller should be initialized in the following sequence

 * only, otherwise it might get into FSM stuck state.

 *

 * - Initialize keypad control parameters, like no. of rows, columns,

 *   timing values etc.,

 * - configure rows and column gpios pull up/down.

 * - set irq edge type.

 * - enable the keypad controller.

 legacy name */

 initialize keypad state */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * D-Link DIR-685 router I2C-based Touchkeys input driver

 * Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>

 *

 * This is a one-off touchkey controller based on the Cypress Semiconductor

 * CY8C214 MCU with some firmware in its internal 8KB flash. The circuit

 * board inside the router is named E119921

 Figure out if any bits went high or low since last message */

 Store currently down keys */

	/*

	 * This key appears in the vendor driver, but I have

	 * not been able to activate it.

 Set the brightness to max level */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Samsung keypad driver

 *

 * Copyright (C) 2010 Samsung Electronics Co.Ltd

 * Author: Joonyoung Shim <jy0922.shim@samsung.com>

 * Author: Donghwa Lee <dh09.lee@samsung.com>

 SAMSUNG_KEYIFCON */

 SAMSUNG_KEYIFSTSCLR */

 SAMSUNG_KEYIFCOL */

 SAMSUNG_KEYIFROW */

 SAMSUNG_KEYIFFC */

 KEYIFCOL reg clear */

 Clear interrupt. */

 Tell IRQ thread that it may poll the device. */

 Enable interrupt bits. */

 KEYIFCOL reg clear. */

 Signal IRQ thread to stop polling and disable the handler. */

 Clear interrupt. */

 Disable interrupt bits. */

	/*

	 * Now that chip should not generate interrupts we can safely

	 * re-enable the handler.

 legacy name */

 initialize the gpio */

 This may fail on some SoCs due to lack of controller support */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/hil/hilkbd.c

 *

 *  Copyright (C) 1998 Philip Blundell <philb@gnu.org>

 *  Copyright (C) 1999 Matthew Wilcox <willy@infradead.org>

 *  Copyright (C) 1999-2007 Helge Deller <deller@gmx.de>

 *

 *  Very basic HP Human Interface Loop (HIL) driver.

 *  This driver handles the keyboard on HP300 (m68k) and on some

 *  HP700 (parisc) series machines.

 HPA for the HIL device */

 HPPA (parisc) port address */

 HP300 (m68k) port address */

 HIL helper functions */

 HIL constants */

 set auto-repeat delay */

 set auto-repeat rate */

 set tone generator */

 clear nmi */

 Turn on interrupts. */

 Turn off interrupts. */

 HIL structure */

 native bus device */

 End of block */

 just in case */

 handle HIL interrupts */

 send a command to the HIL */

 wait */;

 wait */;

 initialize HIL */

 already initialized */

 Turn on interrupts */

 Look for keyboards */

 clear any pending data */

 set it to raw mode */

 Turn off interrupts */

 Only allow one HIL keyboard */

 Disabled to avoid conflicts with the HP SDC HIL drivers */

 !CONFIG_PARISC */

 Only allow one HIL keyboard */

 CONFIG_PARISC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Touchkey driver for Freescale MPR121 Controllor

 *

 * Copyright (C) 2011 Freescale Semiconductor, Inc.

 * Author: Zhang Jiejing <jiejing.zhang@freescale.com>

 *

 * Based on mcs_touchkey.c

 Register definitions */

/*

 * ELECTRODE_CONF_ADDR: This register configures the number of

 * enabled capacitance sensing inputs and its run/suspend mode.

 Threshold of touch/release trigger */

 Masks for touch and release triggers */

 MPR121 has 12 keys */

 use old press bit to figure out which bit changed */

 Set up touch/release threshold for ele0-ele11 */

 Set up init register */

	/*

	 * Capacitance on sensing input varies and needs to be compensated.

	 * The internal MPR121-auto-configuration can do this if it's

	 * registers are set properly (based on vdd_uv).

	/*

	 * Quick charge bit will let the capacitive charge to ready

	 * state quickly, or the buttons may not function after system

	 * boot.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Input driver for resistor ladder connected on ADC

 *

 * Copyright (c) 2016 Alexandre Belloni

 Forcibly release key if any was pressed */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * LoCoMo keyboard driver for Linux-based ARM PDAs:

 * 	- SHARP Zaurus Collie (SL-5500)

 * 	- SHARP Zaurus Poodle (SL-5600)

 *

 * Copyright (c) 2005 John Lenz

 * Based on from xtkbd.c

 0 - 9 */

 10 - 19 */

 20 - 29 */

 30 - 39 */

 40 - 49 */

 50 - 59 */

 60 - 69 */

 70 - 79 */

 80 - 89 */

 90 - 99 */

 100 - 109 */

 110 - 119 */

 120 - 128 */

 helper functions for reading the keyboard matrix */

/*

 * The LoCoMo keyboard only generates interrupts when a key is pressed.

 * So when a key is pressed, we enable a timer.  This timer scans the

 * keyboard, and this is how we detect when the key is released.

 Scan the hardware keyboard and push any changes up through the input layer */

			/* The "Cancel/ESC" key is labeled "On/Off" on

			 * Collie and Poodle and should suspend the device

 if any keys are pressed, enable the timer */

/*

 * LoCoMo keyboard interrupt handler.

 Ack */

* wait chattering delay **/

/*

 * LoCoMo timer checking for released keys

 try and claim memory region */

 attempt to get the interrupt */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2013 Daniel Tang <tangrs@tangrs.id.au>

 Maximum delay estimated assuming 33MHz APB */

 In microseconds (~2000us max) */

 In microseconds (~500us max) */

 Overflow */

 Overflow */

 Set scan mode to 3 (continuous scan) */

 Delay between scanning each row */

 Delay between scans */

 Enable interrupts */

 Disable interrupts */

 Acknowledge existing interrupts */

 Disable interrupts */

 Acknowledge existing interrupts */

 Disable GPIO interrupts to prevent hanging on touchpad */

 Possibly used to detect touchpad events */

 Acknowledge existing GPIO interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SEGA Dreamcast keyboard driver

 * Based on drivers/usb/usbkbd.c

 * Copyright (c) YAEGASHI Takeshi, 2001

 * Porting to 2.6 Copyright (c) Adrian McMenamin, 2007 - 2009

 Very simple mutex to ensure proper cleanup */

	/*

	 * We should always get the lock because the only

	 * time it may be locked is if the driver is in the cleanup phase.

 Maple polling is locked to VBLANK - which may be just 50/s */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TM2 touchkey device driver

 *

 * Copyright 2005 Phil Blundell

 * Copyright 2016 Samsung Electronics Co., Ltd.

 *

 * Author: Beomho Seo <beomho.seo@samsung.com>

 * Author: Jaechul Lee <jcsing.lee@samsung.com>

 waiting for device initialization, at least 150ms */

 touch turns backlight on, so make sure we're in sync */

 Save VDD for easy access */

 default keycodes */

 input device */

 led device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Keyboard class input driver for the NVIDIA Tegra SoC internal matrix

 * keyboard controller

 *

 * Copyright (c) 2009-2011, NVIDIA Corporation.

 Maximum row/column supported by Tegra KBC yet  is 16x8 */

 Maximum keys supported by Tegra KBC yet is 16 x 8*/

 KBC row scan time and delay for beginning the row scan. */

 KBC uses a 32KHz clock so a cycle = 1/32Khz */

 KBC Registers */

 KBC Control Register */

 KBC Interrupt Register */

 Tegra KBC hw support */

 If driver uses Fn map, do not report the Fn key. */

	/*

	 * Matrix keyboard designs are prone to keyboard ghosting.

	 * Ghosting occurs if there are 3 keys such that -

	 * any 2 of the 3 keys share a row, and any 2 of them share a column.

	 * If so ignore the key presses for this iteration.

			/*

			 * Find 2 keys such that one key is in the same row

			 * and the other is in the same column as the i-th key.

	/*

	 * If the platform uses Fn keymaps, translate keys on a Fn keypress.

	 * Function keycodes are max_keys apart from the plain keycodes.

 Ignore the key presses for this iteration? */

		/*

		 * If more than one keys are pressed we need not wait

		 * for the repoll delay.

 Release any pressed keys and exit the polling loop */

 All keys are released so enable the keypress interrupt */

	/*

	 * Quickly bail out & reenable interrupts if the fifo threshold

	 * count interrupt wasn't the interrupt source

		/*

		 * Until all keys are released, defer further processing to

		 * the polling loop in tegra_kbc_keypress_timer.

 We can be here only through system resume path */

 Either mask all keys or none. */

 Reset the KBC controller to clear all previous status.*/

 Keyboard debounce count is maximum of 12 bits. */

 set fifo interrupt threshold to 1 */

 interrupt on FIFO threshold */

 enable */

	/*

	 * Compute the delay(ns) from interrupt mode to continuous polling

	 * mode so the timer routine is scheduled appropriately.

	/*

	 * Atomically clear out any remaining entries in the key FIFO

	 * and enable keyboard interrupts.

 legacy */

 Set all pins as non-configured */

	/*

	 * The time delay between two consecutive reads of the FIFO is

	 * the sum of the repeat time and the time taken for scanning

	 * the rows. There is an additional delay before the row scanning

	 * starts. The repoll delay is computed in milliseconds.

 Forcefully clear the interrupt status */

		/*

		 * Store the previous resident time of continuous polling mode.

		 * Force the keyboard into interrupt mode.

 Enable keypress interrupt before going into suspend. */

 We will use fifo interrupts for key detection. */

 Restore the resident time of continuous polling mode. */

			/*

			 * We can't report events directly from the ISR

			 * because timekeeping is stopped when processing

			 * wakeup request and we get a nasty warning when

			 * we try to call do_gettimeofday() in evdev

			 * handler.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the enhanced rotary controller on pxa930 and pxa935

 allocate and register the input device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  qt2160.c - Atmel AT42QT2160 Touch Sense Controller

 *

 *  Copyright (C) 2009 Raphael Derosso Pereira <raphaelpereira@gmail.com>

		/*

		 * Changing this register will change the brightness

		 * of every LED in the qt2160. It's a HW limitation.

 CONFIG_LEDS_CLASS */

	/*

	 * Can't use SMBus block data read. Check for I2C functionality to speed

	 * things up whenever possible. Otherwise we will be forced to read

	 * sequentially.

	/*

	 * Read all registers from General Status Register

	 * to GPIOs register

 Avoid device lock up by checking every so often */

 Tur off LEDs */

 Read Chid ID to check if chip is valid */

 Read chip firmware version */

 Read chip firmware revision */

 Check functionality */

 Chip is valid and active. Allocate structure */

 Calibrate device */

 Release IRQ so no queue will be scheduled */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * twl4030_keypad.c - driver for 8x8 keypad controller in twl4030 chips

 *

 * Copyright (C) 2007 Texas Instruments, Inc.

 * Copyright (C) 2008 Nokia Corporation

 *

 * Code re-written for 2430SDP by:

 * Syed Mohammed Khasim <x0khasim@ti.com>

 *

 * Initial Code:

 * Manjunatha G K <manjugk@ti.com>

/*

 * The TWL4030 family chips include a keypad controller that supports

 * up to an 8x8 switch matrix.  The controller can issue system wakeup

 * events, since it uses only the always-on 32KiHz oscillator, and has

 * an internal state machine that decodes pressed keys, including

 * multi-key combinations.

 *

 * This driver lets boards define what keycodes they wish to report for

 * which scancodes, as part of the "struct twl4030_keypad_data" used in

 * the probe() routine.

 *

 * See the TPS65950 documentation; that's the general availability

 * version of the TWL5030 second generation part.

 TWL4030 hard limit */

/*

 * Note that we add space for an extra column so that we can handle

 * row lines connected to the gnd (see twl4030_col_xlate()).

----------------------------------------------------------------------*/

 arbitrary prescaler value 0..7 */

 Register Offsets */

 row 0 column status */

 ... row 1 ... */

 edge triggers */

 KEYP_CTRL_REG Fields */

 KEYP_DEB, KEYP_LONG_KEY, KEYP_TIMEOUT_x*/

 KEYP_LK_PTV_REG Fields */

 KEYP_{IMR,ISR,SIR} Fields */

 KEYP_EDR Fields */

----------------------------------------------------------------------*/

	/*

	 * If all bits in a row are active for all columns then

	 * we have that row line connected to gnd. Mark this

	 * key on as if it was on matrix position n_cols (i.e.

	 * one higher than the size of the matrix).

 check for any changes */

 panic ... */

 check for changes and print those */

 Extra column handles "all gnd" rows */

/*

 * Keypad interrupt handler

 Read & Clear TWL4030 pending interrupt */

	/*

	 * Release all keys if I2C has gone bad or

	 * the KEYP has gone to idle state.

 Enable controller, with hardware decoding but not autorepeat */

	/*

	 * NOTE: we could use sih_setup() here to package keypad

	 * event sources as four different IRQs ... but we don't.

 Enable TO rising and KP rising and falling edge detection */

 Set PTV prescaler Field */

 Set key debounce time to 20 ms */

 Set timeout period to 200 ms */

	/*

	 * Enable Clear-on-Read; disable remembering events that fire

	 * after the IRQ but before our handler acks (reads) them.

 initialize key state; irqs update it from here on */

/*

 * Registers keypad device with input subsystem

 * and configures TWL4030 keypad registers

 get the debug device */

 setup input device */

 Enable auto repeat feature of Linux input subsystem */

	/*

	 * This ISR will always execute in kernel thread context because of

	 * the need to access the TWL4030 over the I2C bus.

	 *

	 * NOTE:  we assume this host is wired to TWL4040 INT1, not INT2 ...

 Enable KP and TO interrupts now. */

 mask all events - we don't care about the result */

/*

 * NOTE: twl4030 are multi-function devices connected via I2C.

 * So this device is a child of an I2C parent, thus it needs to

 * support unplug/replug (which most platform devices don't).

 SPDX-License-Identifier: GPL-2.0



 Driver for the IMX keypad port.

 Copyright (C) 2009 Alberto Panizzo <maramaopercheseimorto@gmail.com>

/*

 * Keypad Controller registers (halfword)

 Keypad Control Register */

 Keypad Status Register */

 Key Press Interrupt Status bit (w1c) */

 Key Release Interrupt Status bit (w1c) */

 Key Depress Synch Chain Status bit (w1c)*/

 Key Release Synch Status bit (w1c)*/

 Key Depress Interrupt Enable Status bit */

 Key Release Interrupt Enable */

 Keypad Clock Enable */

 Keypad Data Direction Register */

 Keypad Data Register */

	/*

	 * The matrix is stable only if no changes are detected after

	 * IMX_KEYPAD_SCANS_FOR_STABILITY scans

 Masks for enabled rows/cols */

	/*

	 * Matrix states:

	 * -stable: achieved after a complete debounce process.

	 * -unstable: used in the debouncing process.

 Scan the matrix and return the new state in *matrix_volatile_state. */

		/*

		 * Discharge keypad capacitance:

		 * 2. write 1s on column data.

		 * 3. configure columns as totem-pole to discharge capacitance.

		 * 4. configure columns as open-drain.

		/*

		 * 5. Write a single column to 0, others to 1.

		 * 6. Sample row inputs and save data.

		 * 7. Repeat steps 2 - 6 for remaining columns.

		/*

		 * Delay added to avoid propagating the 0 from column to row

		 * when scanning.

		/*

		 * 1s in matrix_volatile_state[col] means key pressures

		 * throw data from non enabled rows.

	/*

	 * Return in standby mode:

	 * 9. write 0s to columns

/*

 * Compare the new matrix state (volatile) with the stable one stored in

 * keypad->matrix_stable_state and fire events if changes are detected.

 Column is not enabled */

 Column does not contain changes */

 Row is not enabled */

 Row does not contain changes */

/*

 * imx_keypad_check_for_events is the timer handler.

	/*

	 * If the matrix state is changed from the previous scan

	 *   (Re)Begin the debouncing process, saving the new state in

	 *    keypad->matrix_unstable_state.

	 * else

	 *   Increase the count of number of scans with a stable state.

	/*

	 * If the matrix is not as stable as we want reschedule scan

	 * in the near future.

	/*

	 * If the matrix state is stable, fire the events and save the new

	 * stable state. Note, if the matrix is kept stable for longer

	 * (keypad->stable_count > IMX_KEYPAD_SCANS_FOR_STABILITY) all

	 * events have already been generated.

		/*

		 * All keys have been released. Enable only the KDI

		 * interrupt for future key presses (clear the KDI

		 * status bit and its sync chain before that).

		/*

		 * Some keys are still pressed. Schedule a rescan in

		 * attempt to detect multiple key presses and enable

		 * the KRI interrupt to react quickly to key release

		 * event.

 Disable both interrupt types */

 Clear interrupts status bits */

 The matrix is supposed to be changed */

 Schedule the scanning procedure near in the future */

	/*

	 * Include enabled rows in interrupt generation (KPCR[7:0])

	 * Configure keypad columns as open-drain (KPCR[15:8])

 rows */

 cols */

 Write 0's to KPDR[15:8] (Colums) */

 Configure columns as output, rows as input (KDDR[15:0]) */

	/*

	 * Clear Key Depress and Key Release status bit.

	 * Clear both synchronizer chain.

 Enable KDI and disable KRI (avoid false release events). */

 Inhibit KDI and KRI interrupts. */

 Colums as open drain and disable all rows */

 Mark keypad as being inactive */

 Disable clock unit */

 Enable the kpp clock */

 We became active from now */

 Sanity control, not all the rows must be actived now. */

 sentinel */ }

 Init the Input device */

 Search for rows and cols enabled */

 Ensure that the keypad will stay dormant until opened */

 Register the input device */

 imx kbd can wake up system even clock is disabled */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the Cirrus EP93xx matrix keypad controller.

 *

 * Copyright (c) 2008 H Hartley Sweeten <hsweeten@visionengravers.com>

 *

 * Based on the pxa27x matrix keypad controller by Rodolfo Giometti.

 *

 * NOTE:

 *

 * The 3-key reset is triggered by pressing the 3 keys in

 * Row 0, Columns 2, 4, and 7 at the same time.  This action can

 * be disabled by setting the EP93XX_KEYPAD_DISABLE_3_KEY flag.

 *

 * Normal operation for the matrix does not autorepeat the key press.

 * This action can be enabled by setting the EP93XX_KEYPAD_AUTOREPEAT

 * flag.

/*

 * Keypad Interface Register offsets

 Key Scan Initialization register */

 Key Scan Diagnostic register */

 Key Value Capture register */

 Key Scan Initialization Register bit defines */

 Key Scan Diagnostic Register bit defines */

 Key Value Capture Register bit defines */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Atmel AT42QT1070 QTouch Sensor Controller

 *

 *  Copyright (C) 2011 Atmel

 *

 *  Authors: Bo Shen <voice.shen@atmel.com>

 *

 *  Base on AT42QT2160 driver by:

 *  Raphael Derosso Pereira <raphaelpereira@gmail.com>

 *  Copyright (C) 2009

 Address for each register */

 Calibrate */

 Reset */

 AT42QT1070 support up to 7 keys */

 Read Chip ID */

 Read firmware version */

 Read the detected status register, thus clearing interrupt */

 Read which key changed */

 Identify the qt1070 chip */

 Add the keycode */

 Calibrate device */

 Soft reset */

 Register the input device */

 Read to clear the chang line */

 Release IRQ */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * File: drivers/input/keyboard/adp5588_keys.c

 * Description:  keypad driver for ADP5588 and ADP5587

 *		 I2C QWERTY Keypad and IO Expander

 * Bugs: Enter bugs at http://blackfin.uclinux.org/

 *

 * Copyright (C) 2008-2010 Analog Devices Inc.

 Key Event Register xy */

 2^x-1 */

/*

 * Early pre 4.0 Silicon required to delay readout by at least 25ms,

 * since the Event Counter Register updated 25ms after the interrupt

 * asserted.

 Protect cached dir, dat_out */

 Unlikely and should never happen */

 Status is W1C */

	/*

	 * use keventd context to read the event fifo registers

	 * Schedule readout at least 25ms after notification for

	 * REVID < 4

 Status is W1C */

 setup input device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for keys on GPIO lines capable of generating interrupts.

 *

 * Copyright 2005 Phil Blundell

 * Copyright 2010, 2011 David Jander <david@protonic.nl>

 in msecs, for IRQ-only buttons */

 in msecs, for GPIO-driven buttons */

/*

 * SYSFS interface for enabling/disabling keys and switches:

 *

 * There are 4 attributes under /sys/devices/platform/gpio-keys/

 *	keys [ro]              - bitmap of keys (EV_KEY) which can be

 *	                         disabled

 *	switches [ro]          - bitmap of switches (EV_SW) which can be

 *	                         disabled

 *	disabled_keys [rw]     - bitmap of keys currently disabled

 *	disabled_switches [rw] - bitmap of switches currently disabled

 *

 * Userland can change these values and hence disable event generation

 * for each key (or switch). Disabling a key means its interrupt line

 * is disabled.

 *

 * For example, if we have following switches set up as gpio-keys:

 *	SW_DOCK = 5

 *	SW_CAMERA_LENS_COVER = 9

 *	SW_KEYPAD_SLIDE = 10

 *	SW_FRONT_PROXIMITY = 11

 * This is read from switches:

 *	11-9,5

 * Next we want to disable proximity (11) and dock (5), we write:

 *	11,5

 * to file disabled_switches. Now proximity and dock IRQs are disabled.

 * This can be verified by reading the file disabled_switches:

 *	11,5

 * If we now want to enable proximity (11) switch we write:

 *	5

 * to disabled_switches.

 *

 * We can disable only those keys which don't allow sharing the irq.

/**

 * get_n_events_by_type() - returns maximum number of events per @type

 * @type: type of button (%EV_KEY, %EV_SW)

 *

 * Return value of this function can be used to allocate bitmap

 * large enough to hold all bits for given type.

/**

 * get_bm_events_by_type() - returns bitmap of supported events per @type

 * @dev: input device from which bitmap is retrieved

 * @type: type of button (%EV_KEY, %EV_SW)

 *

 * Return value of this function can be used to allocate bitmap

 * large enough to hold all bits for given type.

/**

 * gpio_keys_disable_button() - disables given GPIO button

 * @bdata: button data for button to be disabled

 *

 * Disables button pointed by @bdata. This is done by masking

 * IRQ line. After this function is called, button won't generate

 * input events anymore. Note that one can only disable buttons

 * that don't share IRQs.

 *

 * Make sure that @bdata->disable_lock is locked when entering

 * this function to avoid races when concurrent threads are

 * disabling buttons at the same time.

		/*

		 * Disable IRQ and associated timer/work structure.

/**

 * gpio_keys_enable_button() - enables given GPIO button

 * @bdata: button data for button to be disabled

 *

 * Enables given button pointed by @bdata.

 *

 * Make sure that @bdata->disable_lock is locked when entering

 * this function to avoid races with concurrent threads trying

 * to enable the same button at the same time.

/**

 * gpio_keys_attr_show_helper() - fill in stringified bitmap of buttons

 * @ddata: pointer to drvdata

 * @buf: buffer where stringified bitmap is written

 * @type: button type (%EV_KEY, %EV_SW)

 * @only_disabled: does caller want only those buttons that are

 *                 currently disabled or all buttons that can be

 *                 disabled

 *

 * This function writes buttons that can be disabled to @buf. If

 * @only_disabled is true, then @buf contains only those buttons

 * that are currently disabled. Returns 0 on success or negative

 * errno on failure.

/**

 * gpio_keys_attr_store_helper() - enable/disable buttons based on given bitmap

 * @ddata: pointer to drvdata

 * @buf: buffer from userspace that contains stringified bitmap

 * @type: button type (%EV_KEY, %EV_SW)

 *

 * This function parses stringified bitmap from @buf and disables/enables

 * GPIO buttons accordingly. Returns 0 on success and negative error

 * on failure.

 First validate */

/*

 * ATTRIBUTES:

 *

 * /sys/devices/platform/gpio-keys/keys [ro]

 * /sys/devices/platform/gpio-keys/switches [ro]

/*

 * ATTRIBUTES:

 *

 * /sys/devices/platform/gpio-keys/disabled_keys [rw]

 * /sys/devices/platform/gpio-keys/disables_switches [rw]

			/*

			 * Simulate wakeup key press in case the key has

			 * already released by the time we got interrupt

			 * handler to run.

				/*

				 * GPIO is optional, we may be dealing with

				 * purely interrupt-driven setup.

		/*

		 * Legacy GPIO number, so request the GPIO here and

		 * convert it to descriptor.

 use timer if gpiolib doesn't provide debounce */

			/*

			 * If reading the GPIO won't sleep, we can use a

			 * hrtimer instead of a standard timer for the software

			 * debounce, to reduce the latency as much as possible.

			/*

			 * For other cases, we are OK letting suspend/resume

			 * not reconfigure the trigger type.

		/*

		 * For IRQ buttons, there is no interrupt for release.

		 * So we don't need to reconfigure the trigger type for wakeup.

	/*

	 * Install custom action to cancel release timer and

	 * workqueue item.

	/*

	 * If platform has specified that the button can be disabled,

	 * we don't want it to share the interrupt line.

 Report current state of buttons that are connected to GPIOs */

/*

 * Handlers for alternative sources of platform_data

/*

 * Translate properties into platform_data

 legacy name */

 Enable auto repeat feature of Linux input subsystem */

	/*

	 * The trigger type is always both edges for gpio-based keys and we do

	 * not support changing wakeup trigger for interrupt-based keys.

/*

 * SPEAr Keyboard Driver

 * Based on omap-keypad driver

 *

 * Copyright (C) 2010 ST Microelectronics

 * Rajeev Kumar <rajeevkumar.linux@gmail.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 Keyboard Registers */

 Register Values */

 following reads active (row, col) pair */

 clear interrupt */

 keyboard rate to be programmed is input clock (in MHz) - 1 */

 program keyboard */

 start key scan */

 stop key scan */

 explicitly enable clock as we may program device */

		/*

		 * reprogram the keyboard operating frequency as on some

		 * platform it may change during system suspended

 store current configuration */

 restore previous clk state */

 restore current configuration */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/input/keyboard/pxa27x_keypad.c

 *

 * Driver for the pxa27x matrix keyboard controller.

 *

 * Created:	Feb 22, 2007

 * Author:	Rodolfo Giometti <giometti@linux.it>

 *

 * Based on a previous implementations by Kevin O'Connor

 * <kevin_at_koconnor.net> and Alex Osborne <bobofdoom@gmail.com> and

 * on some suggestions by Nicolas Pitre <nico@fluxnic.net>.

/*

 * Keypad Controller registers

 Keypad Control register */

 Keypad Direct Key register */

 Keypad Rotary Encoder register */

 Keypad Matrix Key register */

 Keypad Automatic Scan register */

 Keypad Automatic Scan Multiple Key Presser register 0-3 */

 bit definitions */

 matrix key row number */

 matrix key column number */

 direct key number */

 Automatic Scan bit */

 Automatic Scan on Activity */

 Matrix interrupt bit */

 Ignore Multiple Key Press */

 Matrix scan line 'n' */

 Matrix Keypad Enable */

 Matrix Interrupt Enable */

 Direct Keypad Debounce Select */

 Direct key interrupt bit */

 Rotary Encoder Zero Debounce */

 Rotary Encoder1 Enable */

 Rotary Encoder0 Enable */

 Direct Keypad Enable */

 Direct Keypad interrupt Enable */

 state row bits of each column scan */

		/*

		 * If do not have marvel,direct-key-count defined,

		 * it means direct key is not supported.

		/*

		 * If marvell,direct-key-mask is not defined, driver will use

		 * default value. Default value is set when configure the keypad.

 Only MAX_DIRECT_KEY_NUM is accepted.*/

 if can read correct rotary key-code, we do not need this. */

 rotary0 taks lower half, rotary1 taks upper half. */

		/*

		 * If the prop is not set, it means keypad does not need

		 * initialize the rotaryX.

		/*

		 * Not all up/down key code are valid.

		 * Now we depends on direct-rel-code.

	/*

	 * The keycodes may not only includes matrix key but also the direct

	 * key or rotary key.

	/*

	 * The keycodes may not only include matrix keys but also the direct

	 * or rotary keys.

 For direct keys. */

 if invalid row/col, treat as no key pressed */

 simulate a press-n-release */

 read and reset to default count value */

	/*

	 * The KPDR_DK only output the key pin level, so it relates to board,

	 * and low level may be active.

 clear pending interrupt bit */

 enable matrix keys with automatic scan */

 enable rotary key, debounce interval same as direct keys */

	/*

	 * Direct keys usage may not start from KP_DKIN0, check the platfrom

	 * mask data to config the specific.

 enable direct key */

 Enable unit clock */

 Disable clock unit */

	/*

	 * If the keypad is used a wake up source, clock can not be disabled.

	 * Or it can not detect the key pressing.

	/*

	 * If the keypad is used as wake up source, the clock is not turned

	 * off. So do not need configure it again.

 Enable unit clock */

 Driver need build keycode from device tree or pdata */

		/*

		 * Data that we get from DT resides in dynamically

		 * allocated memory so we need to update our pdata

		 * pointer.

 Register the input device */

 work with hotplug and coldplug */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenCores Keyboard Controller Driver

 * http://www.opencores.org/project,keyboardcontroller

 *

 * Copyright 2007-2009 HV Sistemas S.L.

		/*

		 * OpenCores controller happens to have scancodes match

		 * our KEY_* definitions.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 true: pressed, false: released */

	/*

	 * The response data from SCU firmware is 4 bytes,

	 * but ONLY the first byte is the key state, other

	 * 3 bytes could be some dirty data, so we should

	 * ONLY take the first byte as key state.

 sentinel */ }

/*

 * Copyright (C) 2014 Broadcom Corporation

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 Register/field definitions */

 Macros to determine the row/column from a bit that is set in SSR0/1. */

 Structure representing various run-time entities */

/*

 * Returns the keycode from the input device keymap given the row and

 * column.

 Clear interrupts */

 The meaning of SSR register depends on pull mode. */

 Initialize the KPCR Keypad Configuration Register */

 Set row width for the ASIC block. */

 Set column width for the ASIC block. */

 Configure the IMR registers */

	/*

	 * IMR registers contain interrupt enable bits for 8x8 matrix

	 * IMR0 register format: <row3> <row2> <row1> <row0>

	 * IMR1 register format: <row7> <row6> <row5> <row4>

 Set column bits in rows 0 to 3 in IMR0 */

 Set column bits in rows 4 to 7 in IMR1 */

 Initialize the KPEMR Keypress Edge Mode Registers */

 Trigger on both edges */

	/*

	 * Obtain the Status filter debounce value and verify against the

	 * possible values specified in the DT binding.

	/*

	 * Obtain the Column filter debounce value and verify against the

	 * possible values specified in the DT binding.

	/*

	 * Determine between the row and column,

	 * which should be configured as output.

		/*

		* Set RowOContrl or ColumnOContrl in KPIOR

		* to the number of pins to drive as outputs

	/*

	 * Determine if the scan pull up needs to be enabled

 Enable auto repeat feature of Linux input subsystem */

 Get the KEYPAD base address */

 Enable clock */

 Put the kp into a known sane state */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Cirrus Logic CLPS711X Keypad driver

 *

 * Copyright (C) 2014 Alexander Shiyan <shc_work@mail.ru>

 Assert column */

 Scan rows */

 Read twice for protection against fluctuations */

 Set all columns to low */

 Set all columns to low */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  GPIO driven matrix keyboard driver

 *

 *  Copyright (c) 2008 Marek Vasut <marek.vasut@gmail.com>

 *

 *  Based on corgikbd.c

/*

 * NOTE: If drive_inactive_cols is false, then the GPIO has to be put into

 * HiZ when de-activated to cause minmal side effect when scanning other

 * columns. In that case it is configured here to be input, otherwise it is

 * driven with the inactive value.

/*

 * This gets the keys from keyboard and reports it to input subsystem

 de-activate all columns for scanning */

 assert each column and read the row status out */

 Enable IRQs again */

	/*

	 * See if another IRQ beaten us to it and scheduled the

	 * scan already. In that case we should not try to

	 * disable IRQs again.

	/*

	 * Schedule an immediate key scan to capture current key state;

	 * columns will be activated and IRQs be enabled after the scan.

	/*

	 * matrix_keypad_scan() will leave IRQs enabled;

	 * we should disable them now.

 initialized strobe lines as outputs, activated */

 initialized as disabled - enabled by input->open */

 legacy */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Input driver for Microchip CAP11xx based capacitive touch sensors

 *

 * (c) 2014 Daniel Mack <linux@zonque.org>

 config */

	/*

	 * Deassert interrupt. This needs to be done before reading the status

	 * registers, which will not carry valid values otherwise.

	/*

	 * DLSEEP mode will turn off all LEDS, prevent this

	/*

	 * All LEDs share the same duty cycle as this is a HW

	 * limitation. Brightness levels per LED are either

	 * 0 (OFF) and 1 (ON).

 Provide some useful defaults */

 Disable autorepeat. The Linux input system has its own handling. */

	/*

	 * Put the device in deep sleep mode for now.

	 * ->open() will bring it back once the it is actually needed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

/*

 * XT keyboard driver for Linux

/*

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for buttons on GPIO lines not capable of generating interrupts

 *

 *  Copyright (C) 2007-2010 Gabor Juhos <juhosg@openwrt.org>

 *  Copyright (C) 2010 Nuno Goncalves <nunojpg@gmail.com>

 *

 *  This file was based on: /drivers/input/misc/cobalt_btns.c

 *	Copyright (C) 2007 Yoichi Yuasa <yoichi_yuasa@tripeaks.co.jp>

 *

 *  also was based on: /drivers/input/keyboard/gpio_keys.c

 *	Copyright 2005 Phil Blundell

 legacy name */

 No legacy static platform data */

			/*

			 * Legacy GPIO number so request the GPIO here and

			 * convert it to descriptor.

 report initial state of the buttons */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2010

 *

 * Author: Naveen Kumar G <naveen.gaddipati@stericsson.com> for ST-Ericsson

 * Author: Sundar Iyer <sundar.iyer@stericsson.com> for ST-Ericsson

 *

 * Keypad controller driver for the SKE (Scroll Key Encoder) module used in

 * the Nomadik 8815 and Ux500 platforms.

 SKE_CR bits */

 SKE_IMSC bits */

 SKE_ICR bits */

 SKE_RIS bits */

 keypad auto scan registers */

/**

 * struct ske_keypad  - data structure used by keypad driver

 * @irq:	irq no

 * @reg_base:	ske registers base address

 * @input:	pointer to input device object

 * @board:	keypad platform device

 * @keymap:	matrix scan code table for keycodes

 * @clk:	clock structure pointer

 * @pclk:	clock structure pointer

 * @ske_keypad_lock: spinlock protecting the keypad read/writes

/*

 * ske_keypad_chip_init: init keypad controller configuration

 *

 * Enable Multi key press detection, auto scan mode

 check SKE_RIS to be 0 */

	/*

	 * set debounce value

	 * keypad dbounce is configured in DBCR[15:8]

	 * dbounce value in steps of 32/32.768 ms

 enable multi key detection */

	/*

	 * set up the number of columns

	 * KPCN[5:3] defines no. of keypad columns to be auto scanned

 clear keypad interrupt for auto(and pending SW) scans */

 un-mask keypad interrupts */

 enable automatic scan */

 find out the row */

	/*

	 * Read the auto scan registers

	 *

	 * Each SKE_ASRx (x=0 to x=3) contains two row values.

	 * lower byte contains row value for column 2*x,

	 * upper byte contains row value for column 2*x + 1

 now that ASRx is zero, find out the coloumn x and row y */

 disable auto scan interrupt; mask the interrupt generated */

 SKEx registers are stable and can be read */

 wait until raw interrupt is clear */

 enable auto scan interrupts */

 go through board initialization helpers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2010

 *

 * Author: Jayeeta Banerjee <jayeeta.banerjee@stericsson.com>

 * Author: Sundar Iyer <sundar.iyer@stericsson.com>

 *

 * TC35893 MFD Keypad Controller driver

 Maximum supported keypad matrix row/columns size */

 keypad related Constants */

 Pull up/down masks */

 Bit masks for IOCFG register */

 bit masks for RESTCTRL register */

 KBDMFS register bit mask */

 CLKEN register bitmask */

 RSTINTCLR register bit mask */

 bit masks for keyboard interrupts*/

 bit masks for keyboard interrupt clear*/

/**

 * struct tc35893_keypad_platform_data - platform specific keypad data

 * @keymap_data:        matrix scan code table for keycodes

 * @krow:               mask for available rows, value is 0xFF

 * @kcol:               mask for available columns, value is 0xFF

 * @debounce_period:    platform specific debounce time

 * @settle_time:        platform specific settle down time

 * @irqtype:            type of interrupt, falling or rising edge

 * @enable_wakeup:      specifies if keypad event can wake up system from sleep

 * @no_autorepeat:      flag for auto repetition

/**

 * struct tc_keypad - data structure used by keypad driver

 * @tc3589x:    pointer to tc35893

 * @input:      pointer to input device object

 * @board:      keypad platform device

 * @krow:	number of rows

 * @kcol:	number of columns

 * @keymap:     matrix scan code table for keycodes

 * @keypad_stopped: holds keypad status

 validate platform configuration */

 configure KBDSIZE 4 LSbits for cols and 4 MSbits for rows */

 configure dedicated key config, no dedicated key selected */

 Configure settle time */

 Configure debounce time */

 Start of initialise keypad GPIOs */

 Configure pull-up resistors for all row GPIOs */

 Configure pull-up resistors for all column GPIOs */

 loop till fifo is empty and no more keys are pressed */

 valid key is found */

 clear IRQ */

 enable IRQ */

 pull the keypad module out of reset */

 configure KBDMFS */

 enable the keypad clock */

 clear pending IRQs */

 enable the IRQs */

 clear IRQ */

 disable all interrupts */

 disable the keypad module */

 put the keypad module into reset */

 enable the keypad module */

 disable the keypad module */

 legacy name */

 The custom delay format is ms/16 */

 FIXME: should be property of the IRQ resource? */

 let platform decide if keypad is a wakeup source or not */

 keypad is already off; we do nothing */

 if device is not a wakeup source, disable it for powersave */

 enable the device to resume normal operations */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NXP LPC32xx SoC Key Scan Interface

 *

 * Authors:

 *    Kevin Wells <kevin.wells@nxp.com>

 *    Roland Stigge <stigge@antcom.de>

 *

 * Copyright (C) 2010 NXP Semiconductors

 * Copyright (C) 2012 Roland Stigge

 *

 * This controller supports square key matrices from 1x1 up to 8x8

/*

 * Key scanner register offsets

 1..8 */

 Size of matrix in XxY, ie. 3 = 3x3 */

 Debounce clocks (based on 32KHz clock) */

 Scan delay (based on 32KHz clock) */

 Pointer to key map for the scan matrix */

 Key state changed, signal an event */

 Setup key input */

 Get the key scanner clock */

 Configure the key scanner */

 Clear IRQ and disable clock */

 Enable clock and clear IRQ */

/*

 * Driver for TCA8418 I2C keyboard

 *

 * Copyright (C) 2011 Fuel7, Inc.  All rights reserved.

 *

 * Author: Kyle Manna <kyle.manna@fuel7.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public

 * License v2 as published by the Free Software Foundation.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public

 * License along with this program; if not, write to the

 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,

 * Boston, MA 021110-1307, USA.

 *

 * If you can't comply with GPLv2, alternative licensing terms may be

 * arranged. Please contact Fuel7, Inc. (http://fuel7.com/) for proprietary

 * alternative licensing inquiries.

 TCA8418 hardware limits */

 TCA8418 register offsets */

 TCA8418 bit definitions */

 TCA8418 register masks */

/*

 * Write a byte to the TCA8418

/*

 * Read a byte from the TCA8418

 Assume that key code 0 signifies empty FIFO */

/*

 * Threaded IRQ handler and this can (and will) sleep.

 Clear all interrupts, even IRQs we didn't check (GPI, CAD, LCK) */

/*

 * Configure the TCA8418 for keypad operation

 Assemble a mask for row and column registers */

 Set registers to keypad mode */

 Enable column debouncing */

 Check i2c driver capabilities */

 Allocate memory for keypad_data and input device */

 Read key lock register, if this fails assume device not present */

 Configure input device */

 Initialize the chip */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Description:  keypad driver for ADP5589, ADP5585

 *		 I2C QWERTY Keypad and IO Expander

 * Bugs: Enter bugs at http://blackfin.uclinux.org/

 *

 * Copyright (C) 2010-2011 Analog Devices Inc.

 ADP5589/ADP5585 Common Registers */

 ADP5589 Registers */

 ADP5585 Registers */

 ID Register */

 GENERAL_CFG Register */

 ADP5589 only */

 ADP5589 only */

 INT_EN Register */

 ADP5589 only */

 ADP5589 only */

 Interrupt Status Register */

 ADP5589 only */

 ADP5589 only */

 STATUS Register */

 ADP5589 only */

 ADP5589 only */

 PIN_CONFIG_D Register */

 RESET2 */

 RESET1 */

 LOCK_CFG */

 ADP5589 only */

 Key Event Register xy */

 10 on the ADP5585-01, 11 on ADP5585-02 */

 Protect cached dir, dat_out */

/*

 *  ADP5589 / ADP5585 derivative / variant handling

 ADP5589 */

 ADP5585 */

 Unlikely and should never happen */

 Status is W1C */

 Status is W1C */

 setup input device */

 Adds ROW5 to ADP5585 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/i2c/chips/lm8323.c

 *

 * Copyright (C) 2007-2009 Nokia Corporation

 *

 * Written by Daniel Stone <daniel.stone@nokia.com>

 *            Timo O. Karjalainen <timo.o.karjalainen@nokia.com>

 *

 * Updated by Felipe Balbi <felipe.balbi@nokia.com>

 Commands to send to the chip. */

 Read chip ID. */

 Set configuration item. */

 Get interrupt status. */

 Reset, same as external one */

 Set GPIO in/out. */

 Set GPIO pullup. */

 Get GPIO in/out. */

 Get GPIO pullup. */

 Read byte from FIFO. */

 Read FIFO (no increment). */

 Set active time. */

 Get error status. */

 Read rotator status. */

 Set debouncing time. */

 Set keypad size. */

 Get keypad size. */

 Get configuration item. */

 Set clock config. */

 Get clock config. */

 Write PWM script. */

 Start PWM engine. */

 Stop PWM engine. */

 Interrupt status. */

 Key event. */

 Rotator event. */

 Error: use CMD_READ_ERR. */

 Lost configuration. */

 PWM1 stopped. */

 PWM2 stopped. */

 PWM3 stopped. */

 Errors (signalled by INT_ERROR, read with CMD_READ_ERR). */

 Bad parameter. */

 Unknown command. */

 Too many keys pressed. */

 FIFO overflow. */

 Configuration keys (CMD_{WRITE,READ}_CFG). */

 Select MUX1_OUT input. */

 Enable MUX1_OUT. */

 Select MUX2_OUT input. */

 Enable MUX2_OUT. */

 Package size (must be 0). */

 Enable rotator. */

 Clock settings (CMD_{WRITE,READ}_CLOCK). */

 Enable 32.768kHz clock. */

 Enable slow pulse output. */

 The possible addresses corresponding to CONFIG1 and CONFIG2 pin wirings. */

 1000 010x */

 1000 011x */

 1000 100x */

 1000 101x */

 Key event fifo length */

 Commands for PWM engine; feed in with PWM_WRITE. */

 Load ramp counter from duty cycle field (range 0 - 0xff). */

 Go to start of script. */

/*

 * Stop engine (generates interrupt).  If reset is 1, clear the program

 * counter, else leave it.

/*

 * Ramp.  If s is 1, divide clock by 512, else divide clock by 16.

 * Take t clock scales (up to 63) per step, for n steps (up to 126).

 * If u is set, ramp up, else ramp down.

/*

 * Loop (i.e. jump back to pos) for a given number of iterations (up to 63).

 * If cnt is zero, execute until PWM_END is encountered.

/*

 * Wait for trigger.  Argument is a mask of channels, shifted by the channel

 * number, e.g. 0xa for channels 3 and 1.  Note that channels are numbered

 * from 1, not 0.

 Send trigger.  Argument is same as PWM_WAIT_TRIG. */

 pwm lock */

 device lock */

/*

 * To write, we just access the chip's address in write mode, and dump the

 * command and data out on the bus.  The command byte and data are taken as

 * sequential u8s out of varargs, to a maximum of LM8323_MAX_DATA.

	/*

	 * If the host is asleep while we send the data, we can get a NACK

	 * back while it wakes up, so try again, once.

/*

 * To read, we first send the command byte to the chip and end the transaction,

 * then access the chip in read mode, at which point it will send the data.

	/*

	 * If the host is asleep while we send the byte, we can get a NACK

	 * back while it wakes up, so try again, once.

/*

 * Set the chip active time (idle time before it enters halt).

/*

 * The signals are AT-style: the low 7 bits are the keycode, and the top

 * bit indicates the state (1 for down, 0 for up).

	/*

	 * Read all key events from the FIFO at once. Next READ_FIFO clears the

	 * FIFO even if we didn't read all events previously.

	/*

	 * Errata: We need to ensure that the chip never enters halt mode

	 * during a keypress, so set active time to 0.  When it's released,

	 * we can enter halt again, so set the active time back to normal.

 The docs say we must pass 0xAA as the data byte. */

	/*

	 * Active time must be greater than the debounce time: if it's

	 * a close-run thing, give ourselves a 12ms buffer.

	/*

	 * Not much we can do about errors at this point, so just hope

	 * for the best.

/*

 * Bottom half: handle the interrupt by posting key events, or dealing with

 * errors appropriately.

 We don't currently support the rotator. */

/*

 * Read the chip ID.

/*

 * Write a script into a given PWM engine, concluding with PWM_END.

 * If 'kill' is nonzero, the engine will be shut down at the end

 * of the script, producing a zero output. Otherwise the engine

 * will be kept running at the final PWM level indefinitely.

	/*

	 * Do nothing if we're already at the requested level,

	 * or previous setting is not yet complete. In the latter

	 * case we will be called again when the previous PWM script

	 * finishes.

	/*

	 * Convert time (in ms) into a divisor (512 or 16 on a refclk of

	 * 32768Hz), and number of ticks per step.

		/*

		 * Schedule PWM work as usual unless we are going into suspend

 Numbers only, please. */

	/* Nothing's set up to service the IRQ yet, so just spin for max.

 If a true probe check the device */

/*

 * We don't need to explicitly suspend the chip, as it already switches off

 * when there's no activity.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000-2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	Hamish Macdonald

/*

 * Amiga keyboard driver for Linux/m68k

/*

 We can spare 512 bytes on stack for temp_map in init path. */

 !CONFIG_HW_CONSOLE */

 !CONFIG_HW_CONSOLE */

 get and invert scancode (keyboard is active low) */

 switch SP pin to output for handshake */

 wait until 85 us have expired */

 switch CIA serial port to input mode */

 lowest bit is release bit */

 scancodes < 0x78 are keys */

 CapsLock is a toggle switch key on Amiga */

 scancodes >= 0x78 are error codes */

 serial data in, turn off TA */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Azoteq IQS620A/621/622/624/625 Keys and Switches

 *

 * Copyright (C) 2019 Jeff LaBundy <jeff@labundy.com>

		/*

		 * Discreet button, hysteresis and SAR UI flags represent keys

		 * and are unmasked if mapped to a valid keycode.

		/*

		 * Hall UI flags represent switches and are unmasked if their

		 * corresponding child nodes are present.

		/*

		 * Interval change events represent keys and are unmasked if

		 * either wheel movement flag is mapped to a valid keycode.

	/*

	 * Each frame contains at most one wheel event (up or down), in which

	 * case a complementary release cycle is emulated.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

/*

 * Sun keyboard driver for Linux

/*

/*

 * Per-keyboard data.

/*

 * sunkbd_interrupt() is called by the low level driver when a character

 * is received.

		/*

		 * If cp[i] is 0xff, sunkbd->reset will stay -1.

		 * The keyboard sends 0xff 0xff 0xID on powerup.

 All keys released */

/*

 * sunkbd_event() handles events from the input module.

/*

 * sunkbd_initialize() checks for a Sun keyboard attached, and determines

 * its type.

 Type 4 keyboard */

/*

 * sunkbd_set_leds_beeps() sets leds and beeps to a state the computer remembers

 * they were in.

/*

 * sunkbd_reinit() wait for the keyboard reset to complete and restores state

 * of leds and beeps.

	/*

	 * It is OK that we check sunkbd->enabled without pausing serio,

	 * as we only want to catch true->false transition that will

	 * happen once and we will be woken up for it.

/*

 * sunkbd_connect() probes for a Sun keyboard and fills the necessary

 * structures.

/*

 * sunkbd_disconnect() unregisters and closes behind us.

 sunkbd does probe */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * h3600 atmel micro companion support, key subdevice

 * based on previous kernel 2.4 version

 * Author : Alessandro Gardich <gremlin@gremlin.it>

 * Author : Linus Walleij <linus.walleij@linaro.org>

 1:  Record button			*/

 2:  Calendar				*/

 3:  Contacts (looks like Outlook)	*/

 4:  Envelope (Q on older iPAQs)	*/

 5:  Start (looks like swoopy arrow)	*/

 6:  Up				*/

 7:  Right				*/

 8:  Left				*/

 9:  Down				*/

/*

 * Generic linux-input device driver for keyboard devices

 *

 * Copyright (c) 2001 Brian S. Julin

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL").

 *

 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR

 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 *

 * References:

 * HP-HIL Technical Reference Manual.  Hewlett Packard Product No. 45918A

 *

 HIL keyboard */

 HIL mouse */

 Set2 is user defined */

 Input buffer and index for packets from HIL bus. */

 four counts per packet */

 Raw device info records from HIL bus, see hil.h for fields. */

 DID byte and IDD record */

 RSC record */

 EXD record */

 RNM record + NULL term. */

 Extra device details needed for pointing devices. */

 These occur when device isn't present */

 Anything else we'd like to know about. */

 8 or 16bit resolution */

 TODO: proximity == touch? */

 just in case somebody is waiting */

 Records of N 4-byte hil_packets must terminate with a command. */

 Swap buttons 2 and 3 */

 Get device info.  MLC driver supplies devid/status/etc. */

 TODO: get from kbd->rsc */

 TODO: get from kbd->rsc */

 Enable Keyswitch Autorepeat 1 */

 No need to wait for completion */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/input/keyboard/jornada680_kbd.c

 *

 * HP Jornada 620/660/680/690 scan keyboard platform driver

 *  Copyright (C) 2007  Kristoffer Ericson <Kristoffer.Ericson@gmail.com>

 *

 * Based on hp680_keyb.c

 *  Copyright (C) 2006 Paul Mundt

 *  Copyright (C) 2005 Andriy Skulysh

 * Split from drivers/input/keyboard/hp600_keyb.c

 *  Copyright (C) 2000 Yaegashi Takeshi (hp6xx kbd scan routine and translation table)

 *  Copyright (C) 2000 Niibe Yutaka (HP620 Keyb translation table)

 PTD1 */	KEY_CAPSLOCK, KEY_MACRO, KEY_LEFTCTRL, 0, KEY_ESC, KEY_KP5, 0, 0,			
  9  -> 16  */

 PTD5 */	KEY_SLASH, KEY_APOSTROPHE, KEY_ENTER, 0, KEY_Z, 0, 0, 0,				
  25 -> 32  */

 PTD7 */	KEY_KP2, KEY_KP6, KEY_KP3, 0, 0, 0, 0, 0,						
  41 -> 48  */

 PTE0 */	KEY_KATAKANA, KEY_KP0, KEY_GRAVE, 0, KEY_FINANCE, 0, 0, 0,				
  57 -> 64  */

 PTE1 */	KEY_SEMICOLON, KEY_RIGHTBRACE, KEY_BACKSLASH, 0, KEY_A, 0, 0, 0,			
  73 -> 80  */

 PTE3 */	KEY_KP8, KEY_LEFTMETA, KEY_RIGHTSHIFT, 0, KEY_TAB, 0, 0, 0,				
  89 -> 96  */

 PTE6 */	KEY_P, KEY_LEFTBRACE, KEY_BACKSPACE, 0, KEY_Q, 0, 0, 0,					
 105 -> 112 */

 PTE7 */	KEY_0, KEY_MINUS, KEY_EQUAL, 0, KEY_1, 0, 0, 0,						
 121 -> 128 */

 **** */	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 = UINT16_t */

 PTD1 PD(1) */

 PTD5 PD(5) */

 PTD7 PD(7) */

 PTE0 PE(0) */

 PTE1 PE(1) */

 PTE3 PE(3) */

 PTE6 PE(6) */

 PTE7 PE(7) */

	/* PD(x) :

	1.   0xcc0c & (1~(1 << (2*(x)+1)))))

	/* PE(x) :

	1.   0xcc0c & 0xffff

 PD(1) */

 PD(5) */

 PD(7) */

 PE(0) */

 PE(1) */

 PE(3) */

 PE(6) */

 PE(7) */

 Save these control reg bits */

 disable output for all but the one we want to scan */

 Get scanline row */

 Read data */

 Scan no lines */

 Enable all scanlines */

 Ignore extra keys and events */

 msec */);

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2007 Google, Inc.

 * Copyright (C) 2012 Intel, Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2004 by Jan-Benedict Glaw <jbglaw@lug-owl.de>

/*

 * LK keyboard driver for Linux, based on sunkbd.c (C) by Vojtech Pavlik

/*

 * DEC LK201 and LK401 keyboard driver for Linux (primary for DECstations

 * and VAXstations, but can also be used on any standard RS232 with an

 * adaptor).

 *

 * DISCLAIMER: This works for _me_. If you break anything by using the

 * information given below, I will _not_ be liable!

 *

 * RJ10 pinout:		To DE9:		Or DB25:

 *	1 - RxD <---->	Pin 3 (TxD) <->	Pin 2 (TxD)

 *	2 - GND <---->	Pin 5 (GND) <->	Pin 7 (GND)

 *	4 - TxD <---->	Pin 2 (RxD) <->	Pin 3 (RxD)

 *	3 - +12V (from HDD drive connector), DON'T connect to DE9 or DB25!!!

 *

 * Pin numbers for DE9 and DB25 are noted on the plug (quite small:). For

 * RJ10, it's like this:

 *

 *      __=__	Hold the plug in front of you, cable downwards,

 *     /___/|	nose is hidden behind the plug. Now, pin 1 is at

 *    |1234||	the left side, pin 4 at the right and 2 and 3 are

 *    |IIII||	in between, of course:)

 *    |    ||

 *    |____|/

 *      ||	So the adaptor consists of three connected cables

 *      ||	for data transmission (RxD and TxD) and signal ground.

 *		Additionally, you have to get +12V from somewhere.

 * Most easily, you'll get that from a floppy or HDD power connector.

 * It's the yellow cable there (black is ground and red is +5V).

 *

 * The keyboard and all the commands it understands are documented in

 * "VCB02 Video Subsystem - Technical Manual", EK-104AA-TM-001. This

 * document is LK201 specific, but LK401 is mostly compatible. It comes

 * up in LK201 mode and doesn't report any of the additional keys it

 * has. These need to be switched on with the LK_CMD_ENABLE_LK401

 * command. You'll find this document (scanned .pdf file) on MANX,

 * a search engine specific to DEC documentation. Try

 * http://www.vt100.net/manx/details?pn=EK-104AA-TM-001;id=21;cp=1

/*

/*

 * Known parameters:

 *	bell_volume

 *	keyclick_volume

 *	ctrlclick_volume

 *

 * Please notice that there's not yet an API to set these at runtime.

 % */

 % */

 % */

 LED control */

 Mode control */

 Misc commands */

 Misc responses from keyboard */

 Right Compose, that is. */

 Same as KEY_RIGHTSHIFT on LK201 */

 Left Compose, that is. */

/*

 * Per-keyboard data

/*

 * Responses from the keyboard and mapping back to their names.

 LKKBD_DEBUG */

/*

 * Calculate volume parameter byte for a given volume.

 12.5 */

 37.5 */

 62.5 */

 This is the default volume */

 87.5 */

	/*

	 * Reset setting for Compose key. Let Compose be KEY_COMPOSE.

	/*

	 * Print keyboard name and modify Compose=Alt on user's request.

	/*

	 * Report errors during keyboard boot-up.

 All okay */

	/*

	 * Try to hint user if there's a stuck key.

/*

 * lkkbd_interrupt() is called by the low level driver when a character

 * is received.

/*

 * lkkbd_event() handles events from the input module.

/*

 * lkkbd_reinit() sets leds and beeps to a state the computer remembers they

 * were in.

 Ask for ID */

 Reset parameters */

 Set LEDs */

	/*

	 * Try to activate extended LK401 mode. This command will

	 * only work with a LK401 keyboard and grants access to

	 * LAlt, RAlt, RCompose and RShift.

 Set all keys to UPDOWN mode */

 Enable bell and set volume */

 Enable/disable keyclick (and possibly set volume) */

 Sound the bell if needed */

/*

 * lkkbd_connect() probes for a LK keyboard and fills the necessary structures.

/*

 * lkkbd_disconnect() unregisters and closes behind us.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * STMicroelectronics Key Scanning driver

 *

 * Copyright (c) 2014 STMicroelectonics Ltd.

 * Author: Stuart Menefy <stuart.menefy@st.com>

 *

 * Based on sh_keysc.c, copyright 2008 Magnus Damm

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000 Justin Cormack

/*

 * Newton keyboard driver for Linux

/*

 invalid scan codes are probably the init sequence, so we ignore them */

 end of init sequence */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Touchkey driver for MELFAS MCS5000/5080 controller

 *

 * Copyright (C) 2010 Samsung Electronics Co.Ltd

 * Author: HeungJun Kim <riverful.kim@samsung.com>

 * Author: Joonyoung Shim <jy0922.shim@samsung.com>

 MCS5000 Touchkey */

 MCS5080 Touchkey */

 key_val is 0 when released, so we should use key_val of press. */

 Disable the work */

 Finally turn off the power */

 Enable the device first */

 Enable irq again */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2010

 *

 * Author: Rabin Vincent <rabin.vincent@stericsson.com> for ST-Ericsson

 These are at the same addresses in all STMPE variants */

 Make sure it covers all cases above */

/**

 * struct stmpe_keypad_variant - model-specific attributes

 * @auto_increment: whether the KPC_DATA_BYTE register address

 *		    auto-increments on multiple read

 * @set_pullup: whether the pins need to have their pull-ups set

 * @num_data: number of data bytes

 * @num_normal_data: number of normal keys' data bytes

 * @max_cols: maximum number of columns supported

 * @max_rows: maximum number of rows supported

 * @col_gpios: bitmask of gpios which can be used for columns

 * @row_gpios: bitmask of gpios which can be used for rows

 GPIO 0 - 7 */

 GPIO 8 - 15 */

 GPIO 0 - 7*/

 GPIO 8-14, 16-20 */

 GPIO 0 - 7*/

 GPIO 8-14, 16-20 */

/**

 * struct stmpe_keypad - STMPE keypad state container

 * @stmpe: pointer to parent STMPE device

 * @input: spawned input device

 * @variant: STMPE variant

 * @debounce_ms: debounce interval, in ms.  Maximum is

 *		 %STMPE_KEYPAD_MAX_DEBOUNCE.

 * @scan_count: number of key scanning cycles to confirm key data.

 *		Maximum is %STMPE_KEYPAD_MAX_SCAN_COUNT.

 * @no_autorepeat: disable key autorepeat

 * @rows: bitmask for the rows

 * @cols: bitmask for the columns

 * @keymap: the keymap

	/*

	 * Figure out which pins need to be set to the keypad alternate

	 * function.

	 *

	 * {cols,rows}_gpios are bitmasks of which pins on the chip can be used

	 * for the keypad.

	 *

	 * keypad->{cols,rows} are a bitmask of which pins (of the ones useable

	 * for the keypad) are used on the board.

	/*

	 * On STMPE24xx, set pin bias to pull-up on all keypad input

	 * pins (columns), this incidentally happen to be maximum 8 pins

	 * and placed at GPIO0-7 so only the LSB of the pull up register

	 * ever needs to be written.

 Do not touch unused pins, may be used for GPIO */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Microchip AT42QT1050 QTouch Sensor Controller

 *

 *  Copyright (C) 2019 Pengutronix, Marco Felsch <kernel@pengutronix.de>

 *

 *  Base on AT42QT1070 driver by:

 *  Bo Shen <voice.shen@atmel.com>

 *  Copyright (C) 2011 Atmel

 Chip ID */

 Firmware version */

 Detection status */

 Key status */

 Key Signals */

 Reference data */

 Negative threshold level */

 Pulse / Scale  */

 Detection integrator counter / AKS */

 Charge Share Delay */

 Low Power Mode */

 Calibration and Reset */

 Read Chip ID */

 Read firmware version */

 Read the detected status register, thus clearing interrupt */

 Read which key changed, keys are not continuous */

 Report registered keys only */

 Disable all keys and enable only the specified ones */

 Keep KEY_RESERVED keys off */

 Required properties */

 Optional properties */

 Check basic functionality */

 Identify the qt1050 chip */

 Get pdata */

 Add the keycode */

 Trigger re-calibration */

 Soft reset to set defaults */

 Set pdata */

 Clear #CHANGE line */

 Register the input device */

	/*

	 * Set measurement interval to 1s (125 x 8ms) if wakeup is allowed

	 * else turn off. The 1s interval seems to be a good compromise between

	 * low power and response time.

 Set measurement interval back to 16ms (2 x 8ms) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * LM8333 keypad driver

 * Copyright (C) 2012 Wolfram Sang, Pengutronix <kernel@pengutronix.de>

 The accessors try twice because the first access may be needed for wakeup */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Phoenix RC Flight Controller Adapter

 *

 * Copyright (C) 2018 Marcus Folkesson <marcus.folkesson@gmail.com>

 success */

 this urb is timing out */

 this urb is terminated, clean up */

 Resubmit to fetch new fresh URBs */

	/*

	 * Locate the endpoint information. This device only has an

	 * interrupt endpoint.

 All driver resources are devm-managed. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * X-Box gamepad driver

 *

 * Copyright (c) 2002 Marko Friedemann <mfr@bmx-chemnitz.de>

 *               2004 Oliver Schwartz <Oliver.Schwartz@gmx.de>,

 *                    Steven Toth <steve@toth.demon.co.uk>,

 *                    Franz Lehner <franz@caos.at>,

 *                    Ivan Hawkes <blackhawk@ivanhawkes.com>

 *               2005 Dominic Cerquetti <binary1230@yahoo.com>

 *               2006 Adam Buchbinder <adam.buchbinder@gmail.com>

 *               2007 Jan Kratochvil <honza@jikos.cz>

 *               2010 Christoph Fritz <chf.fritz@googlemail.com>

 *

 * This driver is based on:

 *  - information from     http://euc.jp/periphs/xbox-controller.ja.html

 *  - the iForce driver    drivers/char/joystick/iforce.c

 *  - the skeleton-driver  drivers/usb/usb-skeleton.c

 *  - Xbox 360 information http://www.free60.org/wiki/Gamepad

 *  - Xbox One information https://github.com/quantus/xbox-one-controller-protocol

 *

 * Thanks to:

 *  - ITO Takayuki for providing essential xpad information on his website

 *  - Vojtech Pavlik     - iforce driver / input subsystem

 *  - Greg Kroah-Hartman - usb-skeleton driver

 *  - XBOX Linux project - extra USB id's

 *  - Pekka PÃ¶yry (quantus) - Xbox One controller reverse engineering

 *

 * TODO:

 *  - fine tune axes (especially trigger axes)

 *  - fix "analog" buttons (reported as digital now)

 *  - get rumble working

 *  - need USB IDs for other dance pads

 *

 * History:

 *

 * 2002-06-27 - 0.0.1 : first version, just said "XBOX HID controller"

 *

 * 2002-07-02 - 0.0.2 : basic working version

 *  - all axes and 9 of the 10 buttons work (german InterAct device)

 *  - the black button does not work

 *

 * 2002-07-14 - 0.0.3 : rework by Vojtech Pavlik

 *  - indentation fixes

 *  - usb + input init sequence fixes

 *

 * 2002-07-16 - 0.0.4 : minor changes, merge with Vojtech's v0.0.3

 *  - verified the lack of HID and report descriptors

 *  - verified that ALL buttons WORK

 *  - fixed d-pad to axes mapping

 *

 * 2002-07-17 - 0.0.5 : simplified d-pad handling

 *

 * 2004-10-02 - 0.0.6 : DDR pad support

 *  - borrowed from the XBOX linux kernel

 *  - USB id's for commonly used dance pads are present

 *  - dance pads will map D-PAD to buttons, not axes

 *  - pass the module paramater 'dpad_to_buttons' to force

 *    the D-PAD to map to buttons if your pad is not detected

 *

 * Later changes can be tracked in SCM.

/*

 * xbox d-pads should map to buttons, as is required for DDR pads

 * but we map them to axes when possible to simplify things

 buttons shared with xbox and xbox360 */

 "analog" buttons */

 start/back/sticks */

 terminating entry */

 original xbox controllers only */

 "analog" buttons */

 terminating entry */

 used when dpad is mapped to buttons */

 d-pad left, right */

 d-pad up, down */

 terminating entry */

 used when triggers are mapped to buttons */

 triggers left/right */

 buttons for x360 controller */

 Button LB/RB */

 The big X button */

 left stick */

 right stick */

 terminating entry */

 used when dpad is mapped to axes */

 d-pad axes */

 terminating entry */

 used when triggers are mapped to axes */

 triggers left/right */

/*

 * Xbox 360 has a vendor-specific class, so we cannot match it with only

 * USB_INTERFACE_INFO (also specifically refused by USB subsystem), so we

 * match against vendor id as well. Wired Xbox 360 devices have protocol 1,

 * wireless controllers have protocol 129.

 The Xbox One controller uses subclass 71 and protocol 208. */

 X-Box USB-IF not approved class */

 GPD Win 2 Controller */

 Thrustmaster X-Box 360 controllers */

 Microsoft X-Box 360 controllers */

 Microsoft X-Box One controllers */

 Logitech X-Box 360 style controllers */

 Elecom JC-U3613M */

 Saitek P3600 */

 Mad Catz X-Box 360 controllers */

 Mad Catz Beat Pad */

 Mad Catz FightStick TE 2 */

 Mad Catz GamePad */

 0x0e6f X-Box 360 controllers */

 0x0e6f X-Box One controllers */

 Hori Controllers */

 Hori Controllers */

 SteelSeries Controllers */

 Nacon GC100XF */

 Ardwiino Controllers */

 X-Box 360 dance pads */

 RedOctane X-Box 360 controllers */

 BigBen Interactive Controllers */

 Razer Sabertooth */

 Razer Wildcat */

 Numark X-Box 360 controllers */

 Joytech X-Box 360 controllers */

 Razer Onza */

 Amazon controllers */

 Harminix Rock Band Guitar and Drums */

 PowerA Controllers */

 PowerA Controllers */

 PowerA Controllers */

 PowerA Controllers */

 Hyperkin Duke X-Box One pad */

 GameSir Controllers */

 Nacon GC-100 */

/*

 * This packet is required for all Xbox One pads with 2015

 * or later firmware installed (or present from the factory).

/*

 * This packet is required for Xbox One S (0x045e:0x02ea)

 * and Xbox One Elite Series 2 (0x045e:0x0b00) pads to

 * initialize the controller that was previously used in

 * Bluetooth mode.

/*

 * This packet is required for the Titanfall 2 Xbox One pads

 * (0x0e6f:0x0165) to finish initialization and for Hori pads

 * (0x0f0d:0x0067) to make the analog sticks work.

/*

 * This packet is required for most (all?) of the PDP pads to start

 * sending input reports. These pads include: (0x0e6f:0x02ab),

 * (0x0e6f:0x02a4), (0x0e6f:0x02a6).

/*

 * This packet is required for most (all?) of the PDP pads to start

 * sending input reports. These pads include: (0x0e6f:0x02ab),

 * (0x0e6f:0x02a4), (0x0e6f:0x02a6).

/*

 * A specific rumble packet is required for some PowerA pads to start

 * sending input reports. One of those pads is (0x24c6:0x543a).

/*

 * A rumble packet with zero FF intensity will immediately

 * terminate the rumbling required to init PowerA pads.

 * This should happen fast enough that the motors don't

 * spin up to enough speed to actually vibrate the gamepad.

/*

 * This specifies the selection of init packets that a gamepad

 * will be sent on init *and* the order in which they will be

 * sent. The correct sequence number will be added when the

 * packet is going to be sent.

 input device interface */

 usb device */

 usb interface */

 urb for interrupt in report */

 input data */

 urb for interrupt out report */

 we must not use an active URB */

 serial number for xbox one protocol */

 output data */

 physical device path */

 map d-pad to buttons or to axes */

 type of xbox device */

 the order x360 pads were attached */

 name of the device */

 init/remove device from callback */

/*

 *	xpad_process_packet

 *

 *	Completes a request by converting the data into events for the

 *	input subsystem.

 *

 *	The used report descriptor was taken from ITO Takayukis website:

 *	 http://euc.jp/periphs/xbox-controller.ja.html

 left stick */

 right stick */

 triggers left/right */

 digital pad */

 dpad as buttons (left, right, up, down) */

 start/back buttons and stick press left/right */

 "analog" buttons A, B, X, Y */

 "analog" buttons black, white */

/*

 *	xpad360_process_packet

 *

 *	Completes a request by converting the data into events for the

 *	input subsystem. It is version for xbox 360 controller

 *

 *	The used report descriptor was taken from:

 *		http://www.free60.org/wiki/Gamepad

 valid pad data */

 digital pad */

 dpad as buttons (left, right, up, down) */

	/*

	 * This should be a simple else block. However historically

	 * xbox360w has mapped DPAD to buttons while xbox360 did not. This

	 * made no sense, but now we can not just switch back and have to

	 * support both behaviors.

 start/back buttons */

 stick press left/right */

 buttons A,B,X,Y,TL,TR and MODE */

 left stick */

 right stick */

 triggers left/right */

 complain only, not much else we can do here */

		/*

		 * Now that we are sure xpad360w_process_packet is not

		 * using input device we can get rid of it.

/*

 * xpad360w_process_packet

 *

 * Completes a request by converting the data into events for the

 * input subsystem. It is version for xbox 360 wireless controller.

 *

 * Byte.Bit

 * 00.1 - Status change: The controller or headset has connected/disconnected

 *                       Bits 01.7 and 01.6 are valid

 * 01.7 - Controller present

 * 01.6 - Headset present

 * 01.1 - Pad state (Bytes 4+) valid

 *

 Presence change */

 Valid pad data */

/*

 *	xpadone_process_packet

 *

 *	Completes a request by converting the data into events for the

 *	input subsystem. This version is for the Xbox One controller.

 *

 *	The report format was gleaned from

 *	https://github.com/kylelemons/xbox/blob/master/xbox.go

 the xbox button has its own special report */

		/*

		 * The Xbox One S controller requires these reports to be

		 * acked otherwise it continues sending them forever and

		 * won't report further mode button events.

 check invalid packet */

 menu/view buttons */

 buttons A,B,X,Y */

 digital pad */

 dpad as buttons (left, right, up, down) */

 TL/TR */

 stick press left/right */

 left stick */

 right stick */

 triggers left/right */

 success */

 this urb is terminated, clean up */

 Callers must hold xpad->odata_lock spinlock */

 Perform initialization sequence for Xbox One pads that require it */

 This packet applies to our device, so prepare to send it */

 Update packet with current sequence number */

 Callers must hold xpad->odata_lock spinlock */

 We may have init packets to send before we can send user commands */

 Callers must hold xpad->odata_lock spinlock */

 success */

 this urb is terminated, clean up */

 Reset the sequence so we send out presence first */

	/*

	 * Begin the init sequence by attempting to send a packet.

	 * We will cycle through the init packet sequence before

	 * sending any packets from the output ring.

 Reset the sequence so we send out the ack now */

 left actuator */

 right actuator */

 left actuator? */

 right actuator? */

 activate rumble */

 left actuator */

 right actuator */

 on period */

 off period */

 repeat count */

/*

 * set the LEDs on Xbox360 / Wireless Controllers

 * @param command

 *  0: off

 *  1: all blink, then previous setting

 *  2: 1/top-left blink, then on

 *  3: 2/top-right blink, then on

 *  4: 3/bottom-left blink, then on

 *  5: 4/bottom-right blink, then on

 *  6: 1/top-left on

 *  7: 2/top-right on

 *  8: 3/bottom-left on

 *  9: 4/bottom-right on

 * 10: rotate

 * 11: blink, based on previous setting

 * 12: slow blink, based on previous setting

 * 13: rotate with two lights

 * 14: persistent slow all blink

 * 15: blink once, then previous setting

/*

 * Light up the segment corresponding to the pad number on

 * Xbox 360 Controllers.

 Reset the sequence so we send out poweroff now */

	/*

	 * Send presence packet.

	 * This will force the controller to resend connection packets.

	 * This is useful in the case we activate the module after the

	 * adapter has been plugged in, as it won't automatically

	 * send us info about the controllers.

 Make sure we are done with presence work if it was scheduled */

 the two sticks */

 the triggers (if mapped to axes) */

 the d-pad (only if dpad is mapped to axes */

 x360w controllers and the receiver have different ids */

 set up axes */

 set up standard buttons */

 set up model-specific ones */

	/*

	 * This should be a simple else block. However historically

	 * xbox360w has mapped DPAD to buttons while xbox360 did not. This

	 * made no sense, but now we can not just switch back and have to

	 * support both behaviors.

		/*

		 * The Xbox One controller lists three interfaces all with the

		 * same interface class, subclass and protocol. Differentiate by

		 * interface number.

		/*

		 * Submit the int URB immediately rather than waiting for open

		 * because we get status messages from the device whether

		 * or not any controllers are attached.  In fact, it's

		 * exactly the message that a controller has arrived that

		 * we're waiting for.

		/*

		 * Wireless controllers require RESET_RESUME to work properly

		 * after suspend. Ideally this quirk should be in usb core

		 * quirk list, but we have too many vendors producing these

		 * controllers and we'd need to maintain 2 identical lists

		 * here in this driver and in usb core.

	/*

	 * Now that both input device and LED device are gone we can

	 * stop output URB.

		/*

		 * Wireless controllers always listen to input so

		 * they are notified when controller shows up

		 * or goes away.

		/*

		 * The wireless adapter is going off now, so the

		 * gamepads are going to become disconnected.

		 * Unless explicitly disabled, power them down

		 * so they don't just sit there flashing.

			/*

			 * Even if there are no users, we'll send Xbox One pads

			 * the startup sequence so they don't sit there and

			 * blink until somebody opens the input device again.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2001 Vojtech Pavlik

/*

 * Guillemot Digital Interface Protocol driver for Linux

/*

 600 us */

 60 us */

 17 bytes */

/*

 * guillemot_read_packet() reads Guillemot joystick data.

/*

 * guillemot_poll() reads and analyzes Guillemot joystick data.

/*

 * guillemot_open() is a callback from the input open routine.

/*

 * guillemot_close() is a callback from the input close routine.

/*

 * guillemot_connect() probes for Guillemot joysticks.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	David Thompson

/*

 * SpaceTec SpaceOrb 360 and Avenger 6dof controller driver for Linux

/*

/*

 * Constants.

/*

 * Per-Orb data.

/*

 * spaceorb_process_packet() decodes packets the driver receives from the

 * SpaceOrb.

 Reset packet */

 Ball + button data */

 Button data */

 Error packet */

/*

 * spaceorb_disconnect() is the opposite of spaceorb_connect()

/*

 * spaceorb_connect() is the routine that is called when someone adds a

 * new serio device that supports SpaceOrb/Avenger protocol and registers

 * it as an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1998-2005 Vojtech Pavlik

/*

 * Logitech ADI joystick family driver for Linux

/*

/*

 * Times, array sizes, flags, ids.

 Trigger to packet timeout [200us] */

 Single bit timeout [40us] */

 Delay after init packet [10ms] */

 Delay after data packet [4ms] */

/*

 * Names, buttons, axes ...

/*

 * Hat to axis conversion arrays.

/*

 * Per-port information.

/*

 * adi_read_packet() reads a Logitech ADI packet.

/*

 * adi_move_bits() detects a possible 2-stream mode, and moves

 * the bits accordingly.

/*

 * adi_get_bits() gathers bits from the data packet.

/*

 * adi_decode() decodes Logitech joystick data into input events.

/*

 * adi_read() reads the data packet and decodes it.

/*

 * adi_poll() repeatedly polls the Logitech joysticks.

/*

 * adi_open() is a callback from the input open routine.

/*

 * adi_close() is a callback from the input close routine.

/*

 * adi_init_digital() sends a trigger & delay sequence

 * to reset and initialize a Logitech joystick into digital mode.

 It looks like mdelay() is off by approx 1.4% */

 Minimum ID packet length */

/*

 * adi_connect() probes for Logitech ADI joysticks.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1996-2001 Vojtech Pavlik

/*

 * Analog joystick and gamepad driver for Linux

/*

/*

 * Option parsing.

/*

 * Times, feature definitions.

 3 ms */

 2 * loop */

 200 us */

 2000 us */

 2 * refresh */

 8 times */

 2 bit more */

 36 u*ms/loop */

/*

 * analog_decode() decodes analog joystick data and reports input events.

/*

 * analog_cooked_read() reads analog joystick data.

/*

 * analog_poll() repeatedly polls the Analog joysticks.

/*

 * analog_open() is a callback from the input open routine.

/*

 * analog_close() is a callback from the input close routine.

/*

 * analog_calibrate_timer() calibrates the timer and computes loop

 * and timeout values for a joystick port.

/*

 * analog_name() constructs a name for an analog joystick.

/*

 * analog_init_device()

/*

 * analog_init_devices() sets up device-specific values and registers the input devices.

 FIXME !!! - need to specify options for different ports */

 FIXME - more than one port */

 FIXME - more than one port */

/*

 * The gameport device structure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1998-2001 Vojtech Pavlik

 *

 *   Based on the work of:

 *	Trystan Larey-Williams

/*

 * ThrustMaster DirectConnect (BSP) joystick family driver for Linux

/*

 600 us */

 60 us */

/*

 * tmdc_read_packet() reads a ThrustMaster packet.

 Start bit */

 Stop bit */

 Data bit */

/*

 * tmdc_poll() reads and analyzes ThrustMaster joystick data.

 empty */;

/*

 * tmdc_probe() probes for ThrustMaster type joysticks.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

/*

 * Creative Labs Blaster GamePad Cobra driver for Linux

/*

 45 us max wait for first strobe */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	David Thompson

 *	Joseph Krahn

/*

 * SpaceTec SpaceBall 2003/3003/4000 FLX driver for Linux

/*

/*

 * Constants.

/*

 * Per-Ball data.

/*

 * spaceball_process_packet() decodes packets the driver receives from the

 * SpaceBall.

 Ball data */

 Button data */

 Advanced button data */

 Device error */

 Bad command packet */

/*

 * Spaceball 4000 FLX packets all start with a one letter packet-type decriptor,

 * and end in 0x0d. It uses '^' as an escape for CR, XOFF and XON characters which

 * can occur in the axis values.

/*

 * spaceball_disconnect() is the opposite of spaceball_connect()

/*

 * spaceball_connect() is the routine that is called when someone adds a

 * new serio device that supports Spaceball protocol and registers it as

 * an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000-2001 Vojtech Pavlik

 *  Copyright (c) 2000 Mark Fletcher

/*

 * Gravis Stinger gamepad driver for Linux

/*

/*

 * Constants.

/*

 * Per-Stinger data.

/*

 * stinger_process_packet() decodes packets the driver receives from the

 * Stinger. It updates the data accordingly.

/*

 * stinger_interrupt() is called by the low level driver when characters

 * are ready for us. We then buffer them for further processing, or call the

 * packet processing routine.

 All Stinger packets are 4 bytes */

/*

 * stinger_disconnect() is the opposite of stinger_connect()

/*

 * stinger_connect() is the routine that is called when someone adds a

 * new serio device that supports Stinger protocol and registers it as

 * an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PlayStation 1/2 joypads via SPI interface Driver

 *

 * Copyright (C) 2017 Tomohiro Yoshidomi <sylph23k@gmail.com>

 *

 * PlayStation 1/2 joypad's plug (not socket)

 *  123 456 789

 * (...|...|...)

 *

 * 1: DAT -> MISO (pullup with 1k owm to 3.3V)

 * 2: CMD -> MOSI

 * 3: 9V (for motor, if not use N.C.)

 * 4: GND

 * 5: 3.3V

 * 6: Attention -> CS(SS)

 * 7: SCK -> SCK

 * 8: N.C.

 * 9: ACK -> N.C.

 PlayStation 1/2 joypad command and response are LSBFIRST. */

/*

 *	0x01, 0x42, 0x00, 0x00, 0x00,

 *	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

 *	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

	0x01, 0x43, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 */

	0x01, 0x43, 0x00, 0x00, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A */

	0x01, 0x4D, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF */

 CONFIG_JOYSTICK_PSXPAD_SPI_FF */

 CONFIG_JOYSTICK_PSXPAD_SPI_FF */

 0x73 : analog 1 */

 button data is inverted */

 0x41 : digital */

 button data is inverted */

 input poll device settings */

 input device settings */

 key/value map settings */

 SPI settings */

 (PlayStation 1/2 joypad might be possible works 250kHz/500kHz) */

 pad settings */

 poll interval is about 60fps */

 register input poll device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1996-2001 Vojtech Pavlik

/*

 * This is just a very simple driver that can dump the data

 * out of the joystick port into the syslog ...

/*

 all entries */

 one entry each */

 10 ms */

/*

 * Dump data.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2001 Arndt Schoenewald

 *  Copyright (c) 2000-2001 Vojtech Pavlik

 *  Copyright (c) 2000 Mark Fletcher

 *

 *  Sponsored by Quelltext AG (http://www.quelltext-ag.de), Dortmund, Germany

/*

 * Driver to use Handykey's Twiddler (the first edition, i.e. the one with

 * the RS232 interface) as a joystick under Linux

 *

 * The Twiddler is a one-handed chording keyboard featuring twelve buttons on

 * the front, six buttons on the top, and a built-in tilt sensor. The buttons

 * on the front, which are grouped as four rows of three buttons, are pressed

 * by the four fingers (this implies only one button per row can be held down

 * at the same time) and the buttons on the top are for the thumb. The tilt

 * sensor delivers X and Y axis data depending on how the Twiddler is held.

 * Additional information can be found at http://www.handykey.com.

 *

 * This driver does not use the Twiddler for its intended purpose, i.e. as

 * a chording keyboard, but as a joystick: pressing and releasing a button

 * immediately sends a corresponding button event, and tilting it generates

 * corresponding ABS_X and ABS_Y events. This turns the Twiddler into a game

 * controller with amazing 18 buttons :-)

 *

 * Note: The Twiddler2 (the successor of the Twiddler that connects directly

 * to the PS/2 keyboard and mouse ports) is NOT supported by this driver!

 *

 * For questions or feedback regarding this driver module please contact:

 * Arndt Schoenewald <arndt@quelltext.com>

/*

/*

 * Constants.

/*

 * Per-Twiddler data.

/*

 * twidjoy_process_packet() decodes packets the driver receives from the

 * Twiddler. It updates the data accordingly.

/*

 * twidjoy_interrupt() is called by the low level driver when characters

 * are ready for us. We then buffer them for further processing, or call the

 * packet processing routine.

	/* All Twiddler packets are 5 bytes. The fact that the first byte

	 * has a MSB of 0 and all other bytes have a MSB of 1 can be used

 this byte starts a new packet */

 wrong MSB -- ignore this byte */

/*

 * twidjoy_disconnect() is the opposite of twidjoy_connect()

/*

 * twidjoy_connect() is the routine that is called when someone adds a

 * new serio device. It looks for the Twiddler, and if found, registers

 * it as an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Parallel port to Walkera WK-0701 TX joystick

 *

 *  Copyright (c) 2008 Peter Popovec

 *

 *  More about driver:  <file:Documentation/input/devices/walkera0701.rst>

/*

 * For now, only one device is supported, if somebody need more devices, code

 * can be expanded, one struct walkera_dev per device must be allocated and

 * set up by walkera0701_connect (release of device by walkera0701_disconnect)

 sign */

 sign */

 sign */

 sign */

 sign */

 sign */

sign */

sign */

 falling edge, prepare to BIN value calculation */

 cancel timer, if in handler or active do resync */

 full frame */

 new frame sync */

 overtiping is safe, pulsetime < s32.. */

 frame sync .. */

 TODO what id vendor/product/version ? */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for the Gravis Grip Multiport, a gamepad "hub" that

 *  connects up to four 9-pin digital gamepads/joysticks.

 *  Driver tested on SMP and UP kernel versions 2.4.18-4 and 2.4.18-5.

 *

 *  Thanks to Chris Gassib for helpful advice.

 *

 *  Copyright (c)      2002 Brian Bonnlander, Bill Soudan

 *  Copyright (c) 1998-2000 Vojtech Pavlik

/*

 * Grip multiport state

 individual gamepad states */

 has the state been updated? */

/*

 * Multiport packet interpretation

 packet is full                        */

 3 bits per gameport read              */

 1 bit per gameport read               */

 multiport wants to send more          */

 multiport done sending                */

/*

 * Packet status code interpretation

 Got a packet                           */

 Used 3 data bits per gameport read     */

 Multiport physical slot status changed */

 Multiport is done sending packets      */

 Try again later to get packet          */

 Force multiport to resend all packets  */

/*

 * Gamepad configuration data.  Other 9-pin digital joystick devices

 * may work with the multiport, so this may not be an exhaustive list!

 * Commodore 64 joystick remains untested.

  2 ms */

 Maps multiport directional values to X,Y axis values (each axis encoded in 3 bits) */

/*

 * Returns whether an odd or even number of bits are on in pkt.

/*

 * Poll gameport; return true if all bits set in 'onbits' are on and

 * all bits set in 'offbits' are off.

/*

 * Gets a 28-bit packet from the multiport.

 *

 * After getting a packet successfully, commands encoded by sendcode may

 * be sent to the multiport.

 *

 * The multiport clock value is reflected in gameport bit B4.

 *

 * Returns a packet status code indicating whether packet is valid, the transfer

 * mode, and any error conditions.

 *

 * sendflags:      current I/O status

 * sendcode:   data to send to the multiport if sendflags is nonzero

 raw data from gameport */

 packet data bits from raw_data */

 packet temporary storage */

 num packet bits per gameport read */

 used for port value sanity check */

 Gameport bits B0, B4, B5 should first be off, then B4 should come on. */

 Demux B4, B5 */

 B4, B5 off */

 Determine packet transfer mode and prepare for packet construction. */

 3 data bits/read */

 Compare B4-B7 before & after trigger */

 1 data bit/read */

 Construct a packet.  Final data bits must be zero. */

 If 3 bits/read used, drop from 30 bits to 28. */

 Acknowledge packet receipt */

 Return if we just wanted the packet or multiport wants to send more */

 Multiport is done sending packets and is ready to receive data */

 Trigger gameport based on bits in sendcode */

/*

 * Disables and restores interrupts for mp_io(), which does the actual I/O.

/*

 * Puts multiport into digital mode.  Multiport LED turns green.

 *

 * Returns true if a valid digital packet was received, false otherwise.

 Send magic sequence */

 Wait for multiport to settle */

 Reset multiport and try getting a packet */

/*

 * Packet structure: B0-B15   => gamepad state

 *                   B16-B20  => gamepad device type

 *                   B21-B24  => multiport slot index (1-4)

 *

 * Known device types: 0x1f (grip pad), 0x0 (no device).  Others may exist.

 *

 * Returns the packet status.

 Get a packet and check for validity */

 Ignore non-gamepad packets, e.g. multiport hardware version */

	/*

	 * Handle "reset" packets, which occur at startup, and when gamepads

	 * are removed or plugged in.  May contain configuration of a new gamepad.

 Interpret a grip pad packet */

 eight way directional value */

 Handle non-grip device codes.  For now, just print diagnostics. */

/*

 * Returns true if all multiport slot states appear valid.

 Return true if no active slot but multiport sent all its data */

 Return false if invalid device code received */

/*

 * Returns whether the multiport was placed into digital mode and

 * able to communicate its state successfully.

 Get packets, store multiport state, and check state's validity */

/*

 * Reports joystick state to the linux input layer.

 Store button states with linux input driver */

 Store axis states with linux driver */

 Tell the receiver of the events to process them */

/*

 * Get the multiport state.

/*

 * Called when a joystick device file is opened

/*

 * Called when a joystick device file is closed

/*

 * Tell the linux input layer about a newly plugged-in gamepad.

 report initial state, if any */

 nothing plugged in */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	Toby Deshane

/*

 * InterAct digital gamepad/joystick driver for Linux

/*

 400 us */

 40 us */

 32 bits */

 HammerHead/FX */

 ProPad 8 */

/*

 * interact_read_packet() reads and InterAct joystick data.

/*

 * interact_poll() reads and analyzes InterAct joystick data.

/*

 * interact_open() is a callback from the input open routine.

/*

 * interact_close() is a callback from the input close routine.

/*

 * interact_connect() probes for InterAct joysticks.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

/*

 * Logitech WingMan Warrior joystick driver for Linux

/*

/*

 * Constants.

/*

 * Per-Warrior data.

/*

 * warrior_process_packet() decodes packets the driver receives from the

 * Warrior. It updates the data accordingly.

 Button data */

 XY-axis info->data */

 Throttle, spinner, hat info->data */

/*

 * warrior_interrupt() is called by the low level driver when characters

 * are ready for us. We then buffer them for further processing, or call the

 * packet processing routine.

/*

 * warrior_disconnect() is the opposite of warrior_connect()

/*

 * warrior_connect() is the routine that is called when someone adds a

 * new serio device. It looks for the Warrior, and if found, registers

 * it as an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1998-2001 Vojtech Pavlik

/*

 * Gravis/Kensington GrIP protocol joystick and gamepad driver for Linux

/*

 200 us */

 64 us */

/*

 * grip_gpp_read_packet() reads a Gravis GamePad Pro packet.

/*

 * grip_xt_read_packet() reads a Gravis Xterminator packet.

/*

 * grip_timer() repeatedly polls the joysticks and generates events.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1998-2001 Vojtech Pavlik

/*

 * FP-Gaming Assassin 3D joystick driver for Linux

/*

 600 us */

 80 us */

 40*3 bits */

 Assassin 3D */

 Panther */

 Panther OEM version */

 Panther XL */

/*

 * a3d_read_packet() reads an Assassin 3D packet.

/*

 * a3d_csum() computes checksum of triplet packet

/*

 * a3d_poll() reads and analyzes A3D joystick data.

/*

 * a3d_adc_cooked_read() copies the acis and button data to the

 * callers arrays. It could do the read itself, but the caller could

 * call this more than 50 times a second, which would use too much CPU.

/*

 * a3d_adc_open() is the gameport open routine. It refuses to serve

 * any but cooked data.

/*

 * a3d_adc_close() is a callback from the input close routine.

/*

 * a3d_open() is a callback from the input open routine.

/*

 * a3d_close() is a callback from the input close routine.

/*

 * a3d_connect() probes for A3D joysticks.

 SPDX-License-Identifier: GPL-2.0

/*

 * Input driver for joysticks connected over ADC.

 * Copyright (c) 2019-2020 Artur Rojek <contact@artur-rojek.eu>

			/*

			 * Data is aligned to the sample size by IIO core.

			 * Call `get_unaligned_xe16` to hide type casting.

 IIO_CPU */

 Count how many channels we got. NULL terminated. */

 SPDX-License-Identifier: GPL-2.0

/*

 * FS-iA6B iBus RC receiver driver

 *

 * This driver provides all 14 channels of the FlySky FS-ia6B RC receiver

 * as analog values.

 *

 * Additionally, the channels can be converted to discrete switch values.

 * By default, it is configured for the offical FS-i6 remote control.

 * If you use a different hardware configuration, you can configure it

 * using the `switch_config` parameter.

 Register switch configuration */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1998-2001 Vojtech Pavlik

/*

 * Genius Flight 2000 joystick driver for Linux

/*

 The time we wait for the first bit [400 us] */

 The time we wait for the first bit [40 us] */

 Wait for everything to settle [4 ms] */

 Max number of triplets in a packet */

/*

 * Genius joystick ids ...

/*

 * gf2k_read_packet() reads a Genius Flight2000 packet.

/*

 * gf2k_trigger_seq() initializes a Genius Flight2000 joystick

 * into digital mode.

/*

 * js_sw_get_bits() composes bits from the triplet buffer into a __u64.

 * Parameter 'pos' is bit number inside packet where to start at, 'num' is number

 * of bits to be read, 'shift' is offset in the resulting __u64 to start at, bits

 * is number of bits per triplet.

/*

 * gf2k_poll() reads and analyzes Genius joystick data.

/*

 * gf2k_connect() probes for Genius id joysticks.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1998-2001 Vojtech Pavlik

/*

 * Driver for Amiga joysticks for Linux/m68k

/*

 SPDX-License-Identifier: GPL-2.0-only

/*

 *	SEGA Dreamcast controller driver

 *	Based on drivers/usb/iforce.c

 *

 *	Copyright Yaegashi Takeshi, 2001

 *	Adrian McMenamin, 2008 - 2009

 allow the controller to be used */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NES, SNES, N64, MultiSystem, PSX gamepad driver for Linux

 *

 *  Copyright (c) 1999-2004	Vojtech Pavlik <vojtech@suse.cz>

 *  Copyright (c) 2004		Peter Nelson <rufus-kernel@hackish.org>

 *

 *  Based on the work of:

 *	Andree Borrmann		John Dahlstrom

 *	David Kuder		Nathan Hand

 *	Raphael Assenat

/*

 see also gs_psx_delay parameter in PSX support section */

/*

 * N64 support.

 N64 bit length, not including stop bit */

 Length of encoded stop bit */

 Encoded stop bit */

 the request data command */

 delay between transmit request, and response ready (us) */

 delay between write segments (required for sound playback because of ISA DMA) */

 GC_N64_DWS > 24 is known to fail */

 power during write (transmit request) */

 power during read */

 output bits to the 4 pads */

 Reading the main axes of any N64 pad is known to fail if the corresponding bit */

 in GC_N64_OUT is pulled low on the output port (by any routine) for more */

 than 123 us */

 clock bits for read */

/*

 * Used for rumble code.

 Send encoded command */

 Send stop bit */

/*

 * gc_n64_read_packet() reads an N64 packet.

 * Each pad uses one bit per byte. So all pads connected to this port

 * are read in parallel.

/*

 * Request the pad to transmit data

/*

 * Wait for the pad response to be loaded into the 33-bit register

 * of the adapter.

/*

 * Grab data (ignoring the last bit, which is a stop bit)

/*

 * We must wait 200 ms here for the controller to reinitialize before

 * the next read request. No worries as long as gc_read is polled less

 * frequently than this.

 select desired pin */

 Init Rumble - 0x03, 0x80, 0x01, (34)0x80 */

 Now start or stop it - 0x03, 0xc0, 0zx1b, (32)0x01/0x00 */

/*

 * NES/SNES support.

 Delay between bits - 6us */

 The NES pads use 8 bits of data */

#define GC_SNES_LENGTH		12	/* The SNES true length is 16, but the

#define GC_SNESMOUSE_LENGTH	32	/* The SNES mouse uses 32 bits, the first

/*

 * gc_nes_read_packet() reads a NES/SNES packet.

 * Each pad uses one bit per byte. So all pads connected to

 * this port are read in parallel.

			/*

			 * The 4 unused bits from SNES controllers appear

			 * to be ID bits so use them to make sure we are

			 * dealing with a mouse.

			 * gamepad is connected. This is important since

			 * my SNES gamepad sends 1's for bits 16-31, which

			 * cause the mouse pointer to quickly move to the

			 * upper left corner of the screen.

/*

 * Multisystem joystick support

 Multi system joystick packet length is 5 */

 One more bit for one more button */

/*

 * gc_multi_read_packet() reads a Multisystem joystick packet.

/*

 * PSX support

 *

 * See documentation at:

 *	http://www.geocities.co.jp/Playtown/2004/psx/ps_eng.txt	

 *	http://www.gamesx.com/controldata/psxcont/psxcont.htm

 *

 25 usec */

 talk to the controller in bits */

 the maximum number of bytes to read off the controller */

 Mouse */

 NegCon */

 Digital / Analog or Rumble in Digital mode  */

 Analog in Analog mode / Rumble in Green mode */

 Rumble in Red mode */

 Pin 4 */

 Pin 2 */

 Pins 5-9 */

 Pin 3 */

 High nibble is device type */

 Low nibble is length in bytes/2 */

/*

 * gc_psx_command() writes 8bit command and reads 8bit data from

 * the psx pad.

/*

 * gc_psx_read_packet() reads a whole psx packet and returns

 * device identifier code.

 Select pad */

 Deselect, begin command */

 Access pad */

 Get device ids */

 Dump status */

 Find the longest pad */

 Read in all the data */

 Set id's to the real value */

			/*

			 * For some reason if the extra axes are left unset

			 * they drift.

			 * for (i = 0; i < 4; i++)

				input_report_abs(dev, gc_psx_abs[i + 2], 128);

			 * This needs to be debugged properly,

			 * maybe fuzz processing needs to be done

			 * in input_sync()

			 *				 --vojtech

 not a pad, ignore */

/*

 * gc_timer() initiates reads of console pads data.

/*

 * N64 pads - must be read first, any read confuses them for 200 us

/*

 * NES and SNES pads or mouse

/*

 * Multi and Multi2 joysticks

/*

 * PSX controllers

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2010, 2011 Fabien Marteau <fabien.marteau@armadeus.com>

 * Sponsored by ARMadeus Systems

 *

 * Driver for Austria Microsystems joysticks AS5011

 *

 * TODO:

 *	- Power on the chip when open() and power down when close()

 *	- Manage power mode

 registers */

 CTRL1 bits */

 CTRL2 bits */

 chip soft reset */

 write threshold */

 to free irq gpio in chip */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	Andree Borrmann		Mats SjÃ¶vall

/*

 * Atari, Amstrad, Commodore, Amiga, Sega, etc. joystick driver for Linux

/*

/*

 * Saturn controllers

/*

 * db9_saturn_write_sub() writes 2 bit data.

 DPP1 */

 DPP2 */

 DB9 */

/*

 * gc_saturn_read_sub() reads 4 bit data.

 DPP */

 DB9 */

/*

 * db9_saturn_read_analog() sends clock and reads 8 bit data.

/*

 * db9_saturn_read_packet() reads whole saturn packet at connector

 * and returns device identifier code.

 1111  no pad */

 ?100 : digital controller */

 data[2] |= db9_saturn_read_sub(port, type); */

 0001 : analog controller or multitap */

 read analog controller */

 read multitap */

 read each pad */

 0000 : mouse */

/*

 * db9_saturn_report() analyzes packet and reports.

 multi controller (analog 4 axis) */

 mission stick (analog 3 axis) */

 racing controller (analog 1 axis) */

 saturn keyboard (udlr ZXC ASD QE Esc) */

 digital pad (digital 2 axis + buttons) */

 mission stick x2 (analog 6 axis + buttons) */

			/*

			input_report_abs(dev, db9_abs[8], (data[j + 6] & 128 ? 0 : 1) - (data[j + 6] & 64 ? 0 : 1));

			input_report_abs(dev, db9_abs[9], (data[j + 6] & 32 ? 0 : 1) - (data[j + 6] & 16 ? 0 : 1));

 sankyo ff (analog 1 axis + stop btn) */

 shuttle mouse (analog 2 axis + buttons. signed value) */

 */

 no pad */

 1 */

 2 */

 3 */

 4 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

/*

 * Magellan and Space Mouse 6dof controller driver for Linux

/*

/*

 * Definitions & global arrays.

/*

 * Per-Magellan data.

/*

 * magellan_crunch_nibbles() verifies that the bytes sent from the Magellan

 * have correct upper nibbles for the lower ones, if not, the packet will

 * be thrown away. It also strips these upper halves to simplify further

 * processing.

 Axis data */

 Button data */

/*

 * magellan_disconnect() is the opposite of magellan_connect()

/*

 * magellan_connect() is the routine that is called when someone adds a

 * new serio device that supports Magellan protocol and registers it as

 * an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  derived from "twidjoy.c"

 *

 *  Copyright (c) 2008 Martin Kebert

 *  Copyright (c) 2001 Arndt Schoenewald

 *  Copyright (c) 2000-2001 Vojtech Pavlik

 *  Copyright (c) 2000 Mark Fletcher

/*

 * Driver to use 4CH RC transmitter using Zhen Hua 5-byte protocol (Walkera Lama,

 * EasyCopter etc.) as a joystick under Linux.

 *

 * RC transmitters using Zhen Hua 5-byte protocol are cheap four channels

 * transmitters for control a RC planes or RC helicopters with possibility to

 * connect on a serial port.

 * Data coming from transmitter is in this order:

 * 1. byte = synchronisation byte

 * 2. byte = X axis

 * 3. byte = Y axis

 * 4. byte = RZ axis

 * 5. byte = Z axis

 * (and this is repeated)

 *

 * For questions or feedback regarding this driver module please contact:

 * Martin Kebert <gkmarty@gmail.com> - but I am not a C-programmer nor kernel

 * coder :-(

/*

/*

 * Constants.

/*

 * Zhen Hua data.

/*

 * zhenhua_process_packet() decodes packets the driver receives from the

 * RC transmitter. It updates the data accordingly.

/*

 * zhenhua_interrupt() is called by the low level driver when characters

 * are ready for us. We then buffer them for further processing, or call the

 * packet processing routine.

	/* All Zhen Hua packets are 5 bytes. The fact that the first byte

	 * is allways 0xf7 and all others are in range 0x32 - 0xc8 (50-200)

 this byte starts a new packet */

 wrong MSB -- ignore this byte */

/*

 * zhenhua_disconnect() is the opposite of zhenhua_connect()

/*

 * zhenhua_connect() is the routine that is called when someone adds a

 * new serio device. It looks for the Twiddler, and if found, registers

 * it as an input device.

/*

 * The serio driver structure.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2021 Oleh Kravchenko <oleg@kaa.org.ua>

 *

 * SparkFun Qwiic Joystick

 * Product page:https://www.sparkfun.com/products/15168

 * Firmware and hardware sources:https://github.com/sparkfun/Qwiic_Joystick

 CONFIG_OF */

 SPDX-License-Identifier: GPL-2.0

/*

 * Support for the four N64 controllers.

 *

 * Copyright (c) 2021 Lauri Kasanen

 unused */

 unused */

 unused */

 d-pad */

 c buttons */

 matching buttons */

 remaining ones: a, b, l, r */

		/*

		 * We could use the vblank irq, but it's not important if

		 * the poll point slightly changes.

/*

 * The target device is embedded and RAM-constrained. We save RAM

 * by initializing in __init code that gets dropped late in boot.

 * For the same reason there is no module or unloading support.

 The controllers are not hotpluggable, so we can scan in init */

 d-pad */

 c buttons */

 matching buttons */

 remaining ones: a, b, l, r */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1998-2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	Steffen Schwenke

/*

 * TurboGraFX parallel port interface driver for Linux.

/*

 10 ms */

/*

 * tgfx_timer() reads and analyzes TurboGraFX joystick data.

 CAVEAT parport */

/*

 * tgfx_probe() probes for tg gamepads.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1998-2005 Vojtech Pavlik

/*

 * Microsoft SideWinder joystick family driver for Linux

/*

/*

 * These are really magic values. Changing them can make a problem go away,

 * as well as break everything.

 The time we wait for the first bit [600 us] */

 Max time per bit [60 us] */

 Wait for everything to settle [6 ms] */

 Wait after A0 fall till kick [45 us] */

 Number of bits before end of packet to kick */

 Number of packet read errors to fail and reinitialize */

 Number of packet read errors to switch off 3d Pro optimization */

 Number of packet read successes to switch optimization back on */

 Max number of bits in a packet */

/*

 * SideWinder joystick types ...

/*

 * Names, buttons, axes ...

/*

 * sw_read_packet() is a function which reads either a data packet, or an

 * identification packet from a SideWinder joystick. The protocol is very,

 * very, very braindamaged. Microsoft patented it in US patent #5628686.

 Don't care about data, only want ID */

 Set up global timeout for ID packet */

 Set up kick timeout for ID packet */

 Quiet, please */

 Trigger */

 Wait for first falling edge on clock */

 Extend time if not timed out */

 Decrement timers */

 Rising edge on clock - data bit */

 Want this data */

 Store it */

 Advance index */

 Extend timeout for next bit */

 Falling edge on axis 0 */

 Schedule second trigger */

 Don't schedule next time on falling edge */

 Mark schedule */

 Second trigger time */

 Trigger */

 Long bit timeout */

 Unmark schedule */

 Switch from global to bit timeouts */

 Done - relax */

/*

 * sw_get_bits() and GB() compose bits from the triplet buffer into a __u64.

 * Parameter 'pos' is bit number inside packet where to start at, 'num' is number

 * of bits to be read, 'shift' is offset in the resulting __u64 to start at, bits

 * is number of bits per triplet.

 Start position */

 Transfer bit */

 Next triplet */

/*

 * sw_init_digital() initializes a SideWinder 3D Pro joystick

 * into digital mode.

 Trigger */

 Wait for axis to fall back to 0 */

 Delay magic time */

 Last trigger */

/*

 * sw_parity() computes parity of __u64

/*

 * sw_ccheck() checks synchronization bits and computes checksum of nibbles.

 Sync */

 Sum */

/*

 * sw_parse() analyzes SideWinder joystick data, and writes the results into

 * the axes and buttons arrays.

/*

 * sw_read() reads SideWinder joystick data, and reinitializes

 * the joystick in case of persistent problems. This is the function that is

 * called from the generic code to poll the joystick.

 Broken packet, try to fix */

 Last init failed, 1 bit mode */

 Reinitialize */

 Bogus value */

 1 == 3 */

 Everything is fine */

 1 == 2 */

 Everything is fine */

 2 == 3 */

 Move data */

 Carry on */

 Parse data */

 Many packets OK */

 Consecutive bad packets */

 Not enough, don't reinitialize yet */

 3D Pro can be in analog mode */

 Read normal data packet */

 Read ID packet, this initializes the stick */

/*

 * sw_print_packet() prints the contents of a SideWinder packet.

/*

 * sw_3dp_id() translates the 3DP id into a human legible string.

 * Unfortunately I don't know how to do this for the other SW types.

 ASCII PnP ID */

 ASCII firmware revision */

 Two 6-bit values */

/*

 * sw_guess_mode() checks the upper two button bits for toggling -

 * indication of that the joystick is in 3-bit mode. This is documented

 * behavior for 3DP ID packet, and for example the FSP does this in

 * normal packets instead. Fun ...

/*

 * sw_connect() probes for SideWinder type joysticks.

 [SW_LENGTH] */

 [SW_LENGTH] */

 Read normal packet */

 No data. 3d Pro analog mode? */

 Switch to digital */

 Retry reading packet */

 No data -> FAIL */

 Read ID. This initializes the stick */

 ID packet should carry mode info [3DP] */

 Read ID failed. Happens in 1-bit mode on PP */

 Retry reading packet */

 Retry reading ID */

 Try SW_FAIL times */

 Read data packet */

 Longer? As we can only lose bits, it makes */

 no sense to try detection for a packet shorter */

 than the previous one */

 Ambiguous packet length */

 ID length less or eq 40 -> FSP */

 Ambiguous */

 ID length 14*3 -> FFP */

 SPDX-License-Identifier: GPL-2.0-or-later

 /*

 *  Copyright (c) 2000-2002 Vojtech Pavlik <vojtech@ucw.cz>

 *  Copyright (c) 2001-2002, 2007 Johann Deneux <johann.deneux@gmail.com>

 *

 *  USB/RS232 I-Force joysticks and wheels.

 Copy rest of data then */

	/* The IFORCE_XMIT_RUNNING bit is not cleared here. That's intended.

	 * As long as the urb completion handler is not called, the transmiting

 success */

 this urb is terminated, clean up */

 Thrustmaster Motor Sport GT */

 Logitech WingMan Force */

 Logitech WingMan Formula Force */

 AVB Top Shot Pegasus */

 AVB Mag Turbo Force */

 AVB Top Shot FFB Racing Wheel */

 ACT LABS Force RS */

 ACT LABS Force RS */

 Saitek R440 Force Wheel */

 Guillemot Race Leader Force Feedback */

 Guillemot Jet Leader Force Feedback */

 Guillemot Force Feedback Racing Wheel */

 Guillemot Jet Leader 3D */

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000-2002 Vojtech Pavlik <vojtech@ucw.cz>

 *  Copyright (c) 2001-2002, 2007 Johann Deneux <johann.deneux@gmail.com>

 *

 *  USB/RS232 I-Force joysticks and wheels.

/*

 * Set the magnitude of a constant force effect

 * Return error code

 *

 * Note: caller must ensure exclusive access to device

/*

 * Upload the component of an effect dealing with the period, phase and magnitude

/*

 * Uploads the part of an effect setting the envelope of the force

/*

 * Component of spring, friction, inertia... effects

 Dangerous: the sign is extended by gcc on plateforms providing an arith shift */

 This code is incorrect on cpus lacking arith shift */

/*

 * Analyse the changes in an effect, and tell if we need to send an condition

 * parameter packet

/*

 * Analyse the changes in an effect, and tell if we need to send a magnitude

 * parameter packet

/*

 * Analyse the changes in an effect, and tell if we need to send an envelope

 * parameter packet

/*

 * Analyse the changes in an effect, and tell if we need to send a periodic

 * parameter effect

/*

 * Analyse the changes in an effect, and tell if we need to send an effect

 * packet

/*

 * Send the part common to all effects to the device

 Stop effect */

	iforce_control_playback(iforce, id, 0);*/

 If needed, restart effect */

 BUG: perhaps we should replay n times, instead of 1. But we do not know n */

/*

 * Upload a periodic effect to the device

 * See also iforce_upload_constant.

	/* If one of the parameter creation failed, we already returned an

	 * error code.

	 * If the core creation failed, we return its error code.

	 * Else: if one parameter at least was created, we return 0

	 *       else we return 1;

/*

 * Upload a constant force effect

 * Return value:

 *  <0 Error code

 *  0 Ok, effect created or updated

 *  1 effect did not change since last upload, and no packet was therefore sent

	/* If one of the parameter creation failed, we already returned an

	 * error code.

	 * If the core creation failed, we return its error code.

	 * Else: if one parameter at least was created, we return 0

	 *       else we return 1;

/*

 * Upload an condition effect. Those are for example friction, inertia, springs...

	/* If the parameter creation failed, we already returned an

	 * error code.

	 * If the core creation failed, we return its error code.

	 * Else: if a parameter  was created, we return 0

	 *       else we return 1;

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000-2002 Vojtech Pavlik <vojtech@ucw.cz>

 *  Copyright (c) 2001-2002, 2007 Johann Deneux <johann.deneux@gmail.com>

 *

 *  USB/RS232 I-Force joysticks and wheels.

/*

 * Send a packet of bytes to the device

 Copy data to buffer */

/*

 * Update head and tail of xmit buffer

/*

 * Store packet in xmit buffer

/*

 * If necessary, start the transmission

 Start or stop an effect */

/* Mark an effect that was being updated as ready. That means it can be updated

 If there are untouched bits left, interpret them as the second hat */

 joystick position data */

 wheel position data */

 status report */

 Check if an effect was just started or stopped */

 Report play event */

 Report stop event */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000-2001 Vojtech Pavlik <vojtech@ucw.cz>

 *  Copyright (c) 2001, 2007 Johann Deneux <johann.deneux@gmail.com>

 *

 *  USB/RS232 I-Force joysticks and wheels.

 No special handling required */

TODO: Wait for the last packets to be sent

 Handle command completion */

 Signal that command is done */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000-2002 Vojtech Pavlik <vojtech@ucw.cz>

 *  Copyright (c) 2001-2002, 2007 Johann Deneux <johann.deneux@gmail.com>

 *

 *  USB/RS232 I-Force joysticks and wheels.

?

?

?

?

?

?

/*

 * Function called when an ioctl is performed on the event dev entry.

 * It uploads an effect to the device

 Check the effect is not already being updated */

/*

 * Upload the effect

		/* A packet was sent, forbid new updates until we are notified

		 * that the packet was updated

/*

 * Erases an effect: it frees the effect id and mark as unused the memory

 * allocated for the parameters

 TODO: remember to change that if more FF_MOD* bits are added */

 Enable force feedback */

 Check: no effects should be present in memory */

 Disable force feedback playback */

 Wait for the command to complete */

/*

 * Input device fields.

/*

 * On-device memory allocation.

/*

 * Wait until device ready - until it sends its first response.

 5 seconds */

/*

 * Get device info.

 Check if the device can store more effects than the driver can really handle */

/*

 * Display additional info.

/*

 * Disable spring, enable force feedback.

/*

 * Find appropriate device entry

/*

 * Set input device bitfields and ranges.

/*

 * Register input device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Altera University Program PS2 controller driver

 *

 * Copyright (C) 2008 Thomas Chou <thomas@wytron.com.tw>

 *

 * Based on sa1111ps2.c, which is:

 * Copyright (C) 2002 Russell King

/*

 * Read all bytes waiting in the PS2 port.  There should be

 * at the most one, but we loop for safety.

/*

 * Write a byte to the PS2 port.

 clear fifo */

 empty */;

 enable rx irq */

 disable rx irq */

/*

 * Add one device to this driver.

/*

 * Remove one device from this driver.

 CONFIG_OF */

/*

 * Our device driver structure

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/input/serio/sa1111ps2.c

 *

 *  Copyright (C) 2002 Russell King

/*

 * Read all bytes waiting in the PS2 port.  There should be

 * at the most one, but we loop for safety.  If there was a

 * framing error, we have to manually clear the status.

/*

 * Completion of ps2 write

 done */

/*

 * Write a byte to the PS2 port.  We have to wait for the

 * port to indicate that the transmitter is empty.

	/*

	 * If the TX register is empty, we can go straight out.

/*

 * Clear the input buffer.

/*

 * Test the keyboard interface.  We basically check to make sure that

 * we can drive each line to the keyboard independently of each other.

/*

 * Add one device to this driver.

	/*

	 * Request the physical region for this PS2 port.

	/*

	 * Our parent device has already mapped the region.

 Incoming clock is 8MHz */

	/*

	 * Flush any pending input.

	/*

	 * Test the keyboard interface.

	/*

	 * Flush any pending input.

/*

 * Remove one device from this driver.

/*

 * Our device driver structure

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000-2001 Vojtech Pavlik

 *  Copyright (c) 2002 Russell King

/*

 * Acorn RiscPC PS/2 keyboard controller driver for Linux/ARM

/*

 Reset the keyboard state machine. */

/*

 * Allocate and initialize serio structure for subsequent registration

 * with serio core.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  i8042 keyboard and mouse controller driver for Linux

 *

 *  Copyright (c) 1999-2004 Vojtech Pavlik

/*

 * i8042_lock protects serialization between i8042_command and

 * the interrupt handler.

/*

 * Writers to AUX and KBD ports as well as users issuing i8042_command

 * directly should acquire i8042_mutex (by means of calling

 * i8042_lock_chip() and i8042_unlock_chip() helpers) to ensure that

 * they do not disturb each other (unfortunately in many i8042

 * implementations write to one of the ports will immediately abort

 * command that is being processed by another port).

/*

 * The i8042_wait_read() and i8042_wait_write functions wait for the i8042 to

 * be ready for reading values from it / writing values to it.

 * Called always with i8042_lock held.

/*

 * i8042_flush() flushes all data that may be in the keyboard and mouse buffers

 * of the i8042 down the toilet.

/*

 * i8042_command() executes a command on the i8042. It also sends the input

 * parameter(s) of the commands to it, and receives the output value(s). The

 * parameters are to be stored in the param array, and the output is placed

 * into the same array. The number of the parameters and output values is

 * encoded in bits 8-11 of the command number.

/*

 * i8042_kbd_write() sends a byte out through the keyboard interface.

/*

 * i8042_aux_write() sends a byte out through the aux interface.

/*

 * i8042_port_close attempts to clear AUX or KBD port state by disabling

 * and then re-enabling it.

	/*

	 * See if there is any data appeared while we were messing with

	 * port state.

/*

 * i8042_start() is called by serio core when port is about to finish

 * registering. It will mark port as existing so i8042_interrupt can

 * start sending data through it.

	/*

	 * On platforms using suspend-to-idle, allow the keyboard to

	 * wake up the system from sleep by enabling keyboard wakeups

	 * by default.  This is consistent with keyboard wakeup

	 * behavior on many platforms using suspend-to-RAM (ACPI S3)

	 * by default.

/*

 * i8042_stop() marks serio port as non-existing so i8042_interrupt

 * will not try to send data to the port that is about to go away.

 * The function is called by serio core as part of unregister procedure.

	/*

	 * We need to make sure that interrupt handler finishes using

	 * our serio port before we return from this function.

	 * We synchronize with both AUX and KBD IRQs because there is

	 * a (very unlikely) chance that AUX IRQ is raised for KBD port

	 * and vice versa.

/*

 * i8042_filter() filters out unwanted bytes from the input data stream.

 * It is called from i8042_interrupt and thus is running with interrupts

 * off and i8042_lock held.

/*

 * i8042_interrupt() is the most important function in this driver -

 * it handles the interrupts from the i8042, and sends incoming bytes

 * to the upper layers.

/*

 * When MUXERR condition is signalled the data register can only contain

 * 0xfd, 0xfe or 0xff if implementation follows the spec. Unfortunately

 * it is not always the case. Some KBCs also report 0xfc when there is

 * nothing connected to the port while others sometimes get confused which

 * port the data came from and signal error leaving the data intact. They

 * _do not_ revert to legacy mode (actually I've never seen KBC reverting

 * to legacy mode yet, when we see one we'll add proper handling).

 * Anyway, we process 0xfc, 0xfd, 0xfe and 0xff as timeouts, and for the

 * rest assume that the data came from the same serio last byte

 * was transmitted (if transmission happened not too long ago).

 report timeout */

/*

 * i8042_enable_kbd_port enables keyboard port on chip

/*

 * i8042_enable_aux_port enables AUX (mouse) port on chip

/*

 * i8042_enable_mux_ports enables 4 individual AUX ports after

 * the controller has been switched into Multiplexed mode

/*

 * i8042_set_mux_mode checks whether the controller has an

 * active multiplexor and puts the chip into Multiplexed (true)

 * or Legacy (false) mode.

/*

 * Get rid of bytes in the queue.

/*

 * Internal loopback test - send three bytes, they should come back from the

 * mouse interface, the last should be version.

/*

 * Workaround for interference with USB Legacy emulation

 * that causes a v10.12 MUX to be found.

/*

 * i8042_check_mux() checks whether the controller supports the PS/2 Active

 * Multiplexing specification by Synaptics, Phoenix, Insyde and

 * LCS/Telegraphics.

/*

 * Disable all muxed ports by disabling AUX.

/*

 * The following is used to test AUX IRQ delivery.

/*

 * i8042_toggle_aux - enables or disables AUX port on i8042 via command and

 * verifies success by readinng CTR. Used when testing for presence of AUX

 * port.

 some chips need some time to set the I8042_CTR_AUXDIS bit */

/*

 * i8042_check_aux() applies as much paranoia as it can at detecting

 * the presence of an AUX interface.

/*

 * Get rid of bytes in the queue.

/*

 * Internal loopback test - filters out AT-type i8042's. Unfortunately

 * SiS screwed up and their 5597 doesn't support the LOOP command even

 * though it has an AUX port.

/*

 * External connection test - filters out AT-soldered PS/2 i8042's

 * 0x00 - no error, 0x01-0x03 - clock/data stuck, 0xff - general error

 * 0xfa - no error on some notebooks which ignore the spec

 * Because it's common for chipsets to return error on perfectly functioning

 * AUX ports, we test for this only when the LOOP command failed.

/*

 * If AUX_LOOP completed without error but returned unexpected data

 * mark it as broken

/*

 * Bit assignment test - filters out PS/2 i8042's in AT mode

/*

 * Reset keyboard (needed on some laptops to successfully detect

 * touchpad, e.g., some Gigabyte laptop models with Elantech

 * touchpads).

/*

 * Test AUX IRQ delivery to make sure BIOS did not grab the IRQ and

 * used it for a PCI card or somethig else.

/*

 * Without LOOP command we can't test AUX IRQ delivery. Assume the port

 * is working and hope we are right.

/*

 * AUX IRQ was never delivered so we need to flush the controller to

 * get rid of the byte we put there; otherwise keyboard may not work.

/*

 * Disable the interface.

	/*

	 * We try this 5 times; on some really fragile systems this does not

	 * take the first time...

	/*

	 * On x86, we don't fail entire i8042 initialization if controller

	 * reset fails in hopes that keyboard port will still be functional

	 * and user will still get a working keyboard. This is especially

	 * important on netbooks. On other arches we trust hardware more.

/*

 * i8042_controller_init initializes the i8042 controller, and,

 * most importantly, sets it into non-xlated mode if that's

 * desired.

/*

 * Save the CTR for restore on unload / reboot.

/*

 * Disable the keyboard interface and interrupt.

/*

 * Handle keylock.

/*

 * If the chip is configured into nontranslated mode by the BIOS, don't

 * bother enabling translating and be happy.

/*

 * Set nontranslated mode for the kbd interface if requested by an option.

 * After this the kbd interface becomes a simple serial in/out, like the aux

 * interface is. We don't do this by default, since it can confuse notebook

 * BIOSes.

/*

 * Write CTR back.

/*

 * Flush whatever accumulated while we were disabling keyboard port.

/*

 * Reset the controller and reset CRT to the original value set by BIOS.

/*

 * Disable both KBD and AUX interfaces so they don't get in the way

/*

 * Disable MUX mode if present.

/*

 * Reset the controller if requested.

/*

 * Restore the original control register setting.

/*

 * i8042_panic_blink() will turn the keyboard LEDs on or off and is called

 * when kernel panics. Flashing LEDs is useful for users running X who may

 * not see the console and will help distinguishing panics from "real"

 * lockups.

 *

 * Note that DELAY has a limit of 10ms so we will not get stuck here

 * waiting for KBC to free up even if KBD interrupt is off

 set leds */

/*

 * Here we try to reset everything back to a state we had

 * before suspending.

/*

 * Restore original CTR value and disable all ports

/*

 * Here we try to restore the original BIOS settings to avoid

 * upsetting it.

 Set up serio interrupts for system wakeup. */

	/*

	 * If platform firmware was not going to be involved in suspend, we did

	 * not restore the controller state to whatever it had been at boot

	 * time, so we do not need to do anything.

	/*

	 * We only need to reset the controller if we are resuming after handing

	 * off control to the platform firmware, otherwise we can simply restore

	 * the mode.

 CONFIG_PM */

/*

 * We need to reset the 8042 back to original mode on system shutdown,

 * because otherwise BIOSes will be confused.

/*

 * Ok, everything is ready, let's register all serio ports

 in case KBD failed but AUX not */

 Set this before creating the dev to allow i8042_command to work right away */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  The Serio abstraction module

 *

 *  Copyright (c) 1999-2004 Vojtech Pavlik

 *  Copyright (c) 2004 Dmitry Torokhov

 *  Copyright (c) 2003 Daniele Bellucci

/*

/*

 * serio_mutex protects entire serio subsystem and is taken every time

 * serio port or driver registered or unregistered.

/*

 * Basic serio -> driver core mappings

/*

 * Serio event processing.

 protects serio_event_list */

			/*

			 * If this event is of different type we should not

			 * look further - we only suppress duplicate events

			 * that were sent back-to-back.

	/*

	 * Scan event list for the other events for the same serio port,

	 * starting with the most recent one. If event is the same we

	 * do not need add new one. If event is of different type we

	 * need to add this event and should not look further because

	 * we need to preseve sequence of distinct events.

/*

 * Remove all events that have been submitted for a given

 * object, be it serio port or driver.

/*

 * Locate child serio port (if any) that has not been fully registered yet.

 *

 * Children are registered by driver's connect() handler so there can't be a

 * grandchild pending registration together with a child.

/*

 * Serio port operations

/*

 * Prepare serio port for registration.

/*

 * Complete serio port registration.

 * Driver core will attempt to find appropriate driver for the port.

/*

 * serio_destroy_port() completes unregistration process and removes

 * port from the system

/*

 * Reconnect serio port (re-initialize attached device).

 * If reconnect fails (old device is no longer attached or

 * there was no device to begin with) we do full rescan in

 * hope of finding a driver for the port.

/*

 * Reconnect serio port and all its children (re-initialize attached

 * devices).

			/*

			 * Reconnect was successful, move on to do the

			 * first child.

		/*

		 * Either it was a leaf node or reconnect failed and it

		 * became a leaf node. Continue reconnecting starting with

		 * the next sibling of the parent node.

/*

 * serio_disconnect_port() unbinds a port from its driver. As a side effect

 * all children ports are unbound and destroyed.

	/*

	 * Children ports should be disconnected and destroyed

	 * first; we travel the tree in depth-first order.

 Locate a leaf */

		/*

		 * Prune this leaf node unless it is the one we

		 * started with.

	/*

	 * OK, no children left, now disconnect this port.

/*

 * Submits register request to kseriod for subsequent execution.

 * Note that port registration is always asynchronous.

/*

 * Synchronously unregisters serio port.

/*

 * Safely unregisters children ports if they are present.

/*

 * Serio driver operations

	/*

	 * Temporarily disable automatic binding because probing

	 * takes long time and we are better off doing it in kseriod

	/*

	 * Restore original bind mode and let kseriod bind the

	 * driver to free ports

 so serio_find_driver ignores it */

 we could've deleted some ports, restart */

		/*

		 * Driver reconnect can take a while, so better let

		 * kseriod deal with it.

 CONFIG_PM */

 called from serio_driver->connect/disconnect methods under serio_mutex */

 called from serio_driver->connect/disconnect methods under serio_mutex */

	/*

	 * There should not be any outstanding events but work may

	 * still be scheduled so simply cancel it.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *	Driver for Allwinner A10 PS2 host controller

 *

 *	Author: Vishnu Patekar <vishnupatekar0510@gmail.com>

 *		Aaron.maoye <leafy.myeh@newbietech.com>

 register offset definitions */

 PS2 Module Global Control Reg */

 PS2 Module Data Reg		*/

 PS2 Module Line Control Reg */

 PS2 Module Line Status Reg	*/

 PS2 Module FIFO Control Reg */

 PS2 Module FIFO Status Reg	*/

 PS2 Module Clock Divider Reg*/

  PS2 GLOBAL CONTROL REGISTER PS2_GCTL */

 PS2 LINE CONTROL REGISTER */

 PS2 LINE STATUS REGISTER */

 PS2 FIFO CONTROL REGISTER */

 PS2 FIFO STATUS REGISTER */

 IO mapping base */

 clock management */

 irq */

 Get the PS/2 interrupts and clear them */

 Check line status register */

 Check FIFO status register */

 Set line control and enable interrupt */

 Reset FIFO */

 Set clock divider register */

 Set global control register */

 Shut off the interrupt */

 IO mem resources */

 IO */

 shutoff interrupt */

 Get IRQ for the device */

 success */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2004, 2007-2010, 2011-2012 Synopsys, Inc. (www.synopsys.com)

 *

 * Driver is originally developed by Pavel Sokolov <psokolov@synopsys.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * GPIO based serio bus driver for bit banging the PS/2 protocol

 *

 * Author: Danilo Krummrich <danilokrummrich@dk-develop.de>

 start bit should be low */

 processing data bits */

 check odd parity */

		/* Do not send spurious ACK's and NACK's when write fn is

		 * not provided.

		/* Let's send the data without waiting for the stop bit to be

		 * sent. It may happen that we miss the stop bit. When this

		 * happens we have no way to recover from this, certainly

		 * missing the parity bit would be recognized when processing

		 * the stop bit. When missing both, data is lost.

 stop bit should be high */

 success */

 success */

 should never happen */

 do odd parity */

 release data line to generate stop bit */

		/* Devices generate one extra clock pulse before sending the

		 * acknowledgment.

 success */

		/* Probably we missed the stop bit. Therefore we release data

		 * line and try again.

 success */

 Keep irq disabled until serio->open is called. */

	/* Write can be enabled in platform/dt data, but possibly it will not

	 * work because of the tough timings.

	/* Tx count always starts at 1, as the start bit is sent implicitly by

	 * host-to-device communication initialization.

 success */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PS/2 driver library

 *

 * Copyright (c) 1999-2002 Vojtech Pavlik

 * Copyright (c) 2004 Dmitry Torokhov

/*

 * ps2_sendbyte() sends a byte to the device and waits for acknowledge.

 * It doesn't handle retransmission, the caller is expected to handle

 * it when needed.

 *

 * ps2_sendbyte() can only be called from a process context.

/*

 * ps2_drain() waits for device to transmit requested number of bytes

 * and discards them.

/*

 * ps2_is_keyboard_id() checks received ID byte against the list of

 * known keyboard IDs.

 Regular keyboards		*/

 NCD Sun keyboard		*/

 Trust keyboard, translated	*/

 Trust keyboard		*/

 NMB SGI keyboard, translated */

 NMB SGI keyboard		*/

/*

 * ps2_adjust_timeout() is called after receiving 1st byte of command

 * response and tries to reduce remaining timeout to speed up command

 * completion.

		/*

		 * Device has sent the first response byte after

		 * reset command, reset is thus done, so we can

		 * shorten the timeout.

		 * The next byte will come soon (keyboard) or not

		 * at all (mouse).

		/*

		 * Microsoft Natural Elite keyboard responds to

		 * the GET ID command as it were a mouse, with

		 * a single byte. Fail the command so atkbd will

		 * use alternative probe to detect it.

		/*

		 * If device behind the port is not a keyboard there

		 * won't be 2nd byte of ID response.

/*

 * ps2_command() sends a command and its parameters to the mouse,

 * then waits for the response and puts it in the param array.

 *

 * ps2_command() can only be called from a process context

 Signal that we are sending the command byte */

	/*

	 * Some devices (Synaptics) peform the reset before

	 * ACKing the reset command, and so it can take a long

	 * time before the ACK arrives.

 Now we are sending command parameters, if any */

	/*

	 * The reset command takes a long time to execute.

	/*

	 * ps_command() handles resends itself, so do not leak -EAGAIN

	 * to the callers.

/*

 * ps2_sliced_command() sends an extended PS/2 command to the mouse

 * using sliced syntax, understood by advanced devices, such as Logitech

 * or Synaptics touchpads. The command is encoded as:

 * 0xE6 0xE8 rr 0xE8 ss 0xE8 tt 0xE8 uu where (rr*64)+(ss*16)+(tt*4)+uu

 * is the command.

/*

 * ps2_init() initializes ps2dev structure

/*

 * ps2_handle_ack() is supposed to be used in interrupt handler

 * to properly process ACK/NAK of a command from a PS/2 device.

	/*

	 * Workaround for mice which don't ACK the Get ID command.

	 * These are valid mouse IDs that we recognize.

		/*

		 * Do not signal errors if we get unexpected reply while

		 * waiting for an ACK to the initial (first) command byte:

		 * the device might not be quiesced yet and continue

		 * delivering data.

		 * Note that we reset PS2_FLAG_WAITID flag, so the workaround

		 * for mice not acknowledging the Get ID command only triggers

		 * on the 1st byte; if device spews data we really want to see

		 * a real ACK from it.

/*

 * ps2_handle_response() is supposed to be used in interrupt handler

 * to properly store device's response to a command and notify process

 * waiting for completion of the command.

 reset all flags except last nack */

/*

 * userio kernel serio device emulation module

 * Copyright (C) 2015 Red Hat

 * Copyright (C) 2015 Stephen Chandler Paul <thatslyude@gmail.com>

 *

 * This program is free software; you can redistribute it and/or modify it

 * under the terms of the GNU Lesser General Public License as published by

 * the Free Software Foundation; either version 2 of the License, or (at

 * your option) any later version.

 *

 * This program is distributed in the hope that it will be useful, but

 * WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser

 * General Public License for more details.

/**

 * userio_device_write - Write data from serio to a userio device in userspace

 * @id: The serio port for the userio device

 * @val: The data to write to the device

		/*

		 * Don't free the serio port here, serio_unregister_port()

		 * does it for us.

	/*

	 * By the time we get here, the data that was waiting might have

	 * been taken by another thread. Grab the buffer lock and check if

	 * there's still any data waiting, otherwise repeat this process

	 * until we have data (unless the file descriptor is non-blocking

	 * of course).

 buffer was/is empty */

		/*

		 * count == 0 is special - no IO is done but we check

		 * for error conditions (see above).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Input device TTY line discipline

 *

 * Copyright (c) 1999-2002 Vojtech Pavlik

 *

 * This is a module that converts a tty line into a much simpler

 * 'serial io port' abstraction that the input device drivers use.

/*

 * Callback functions from the serio code.

/*

 * serport_ldisc_open() is the routine that is called upon setting our line

 * discipline on a tty. It prepares the serio struct.

/*

 * serport_ldisc_close() is the opposite of serport_ldisc_open()

/*

 * serport_ldisc_receive() is called by the low level tty driver when characters

 * are ready for us. We forward the characters and flags, one by one to the

 * 'interrupt' routine.

/*

 * serport_ldisc_read() just waits indefinitely if everything goes well.

 * However, when the serio driver closes the serio port, it finishes,

 * returning 0 characters.

/*

 * serport_ldisc_ioctl() allows to set the port protocol, and device ID

/*

 * The line discipline structure.

/*

 * The functions for insering/removing us as a module.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (c) 2013, Microsoft Corporation.

/*

 * Current version 1.0

 *

/*

 * Message types in the synthetic input protocol

/*

 * Basic message structures.

 Enclosed message */

/*

 * Protocol messages

 Additional information */

/*

 * Represents a keyboard device

 Synchronize the request/response if needed */

 protects 'started' field */

		/*

		 * Validate the information provided by the host.

		 * If the host is giving us a bogus packet,

		 * drop the packet (hoping the problem

		 * goes away).

		/*

		 * Validate the information provided by the host.

		 * If the host is giving us a bogus packet,

		 * drop the packet (hoping the problem

		 * goes away).

		/*

		 * Inject the information through the serio interrupt.

		/*

		 * Only trigger a wakeup on key down, otherwise

		 * "echo freeze > /sys/power/state" can't really enter the

		 * state because the Enter-UP can trigger a wakeup at once.

		/*

		 * We have a packet that has "inband" data. The API used

		 * for retrieving the packet guarantees that the complete

		 * packet is read. So, minimally, we should be able to

		 * parse the payload header safely (assuming that the host

		 * can be trusted.  Trusting the host seems to be a

		 * reasonable assumption because in a virtualized

		 * environment there is not whole lot you can do if you

		 * don't trust the host.

		 *

		 * Nonetheless, let us validate if the host can be trusted

		 * (in a trivial way).  The interesting aspect of this

		 * validation is how do you recover if we discover that the

		 * host is not to be trusted? Simply dropping the packet, I

		 * don't think is an appropriate recovery.  In the interest

		 * of failing fast, it may be better to crash the guest.

		 * For now, I will just drop the packet!

			/*

			 * Drop the packet and hope

			 * the problem magically goes away.

 Keyboard guid */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SGI O2 MACE PS2 controller driver for linux

 *

 * Copyright (C) 2002 Vivien Chappelier

 in 50us unit */

 external clock signal */

 clken output signal */

 transmission in progress */

 empty transmit buffer */

 full receive buffer */

 reception in progress */

 parity error */

 framing error */

 inhibit clock signal after TX */

 transmit enable */

 enable transmit interrupt */

 enable receive interrupt */

 pause reception if set to 0 */

 reset */

 Reset port */

 Enable interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/input/serio/ambakmi.c

 *

 *  Copyright (C) 2000-2003 Deep Blue Solutions Ltd.

 *  Copyright (C) 2002 Russell King.

 timeout in 100ms */

 kick the serio layer to rescan this port */

/*

 * HIL MLC state machine and serio interface driver

 *

 * Copyright (c) 2001 Brian S. Julin

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL").

 *

 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR

 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 *

 * References:

 * HP-HIL Technical Reference Manual.  Hewlett Packard Product No. 45918A

 *

 *

 *	Driver theory of operation:

 *

 *	Some access methods and an ISR is defined by the sub-driver

 *	(e.g. hp_sdc_mlc.c).  These methods are expected to provide a

 *	few bits of logic in addition to raw access to the HIL MLC,

 *	specifically, the ISR, which is entirely registered by the

 *	sub-driver and invoked directly, must check for record

 *	termination or packet match, at which point a semaphore must

 *	be cleared and then the hil_mlcs_tasklet must be scheduled.

 *

 *	The hil_mlcs_tasklet processes the state machine for all MLCs

 *	each time it runs, checking each MLC's progress at the current

 *	node in the state machine, and moving the MLC to subsequent nodes

 *	in the state machine when appropriate.  It will reschedule

 *	itself if output is pending.  (This rescheduling should be replaced

 *	at some point with a sub-driver-specific mechanism.)

 *

 *	A timer task prods the tasklet once per second to prevent

 *	hangups when attached devices do not return expected data

 *	and to initiate probes of the loop for new devices.

 #define HIL_MLC_DEBUG */

********************* Device info/instance management **********************/

 In-use slots are not eligible. */

	/* TODO: Pick all-zero slots first, failing that,

	 * randomize the slot picked among those eligible.

 Note: It is guaranteed at least one above will match */

************************** State engine *********************************/

 Schedule the tasklet		*/

 Wait until next pass		*/

 relative node#, decrement	*/

 relative node#, increment	*/

 use retval as next node#	*/

 An LCV used to prevent runaway loops, forces 5 second sleep when reset. */

 Management of the discovered device index (zero based, -1 means no devs) */

	/* Help the state engine:

	 * Is this a real IDD response or just an echo?

	 *

	 * Real IDD response does not start with a command.

 Should have the command echoed further down. */

 And the rest of the packets should still be clear. */

 Next step is to see if RSC supported */

 This should send us off to ACF */

 Next step is to see if EXD supported (IDD has already been read) */

 Next step is to see if RNM supported. */

 0  HILSEN_START */

 1  HILSEN_RESTART */

 Disable APE */

 Disable test mode */

 9  HILSEN_DHR */

 10 HILSEN_DHR2 */

 14 HILSEN_IFC */

	/* If devices are there, they weren't in PUP or other loopback mode.

	 * We're more concerned at this point with restoring operation

	 * to devices than discovering new ones, so we try to salvage

	 * the loop configuration by closing off the loop.

 16 HILSEN_HEAL0 */

 18 HILSEN_HEAL */

 21 HILSEN_ACF */

 22 HILSEN_ACF2 */

 25 HILSEN_DISC0 */

 Only enter here if response just received */

 27 HILSEN_DISC */

 40 HILSEN_MATCH */

 TODO */ 0)

 41 HILSEN_OPERATE */

 44 HILSEN_PROBE */

 52 HILSEN_DSR */

 55 HILSEN_REPOLL */

 58 HILSEN_IFCACF */

 60 HILSEN_END */

 For debug */

 Already set up from previous HILSE_OUT_* */

 Prepare to receive input */

******************* tasklet context functions **************************/

************************ Keepalive timer task *********************/

 could not send packet - stop immediately. */

 Re-insert the periodic task. */

******************* user/kernel context functions **********************/

 for now only commands */

 TODO wake up interruptable */

 HIL port no. */

 not found in list */

*************************** Module interface *************************/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2013 Aeroflex Gaisler

 *

 * This driver supports the APBPS2 PS/2 core available in the GRLIB

 * VHDL IP core library.

 *

 * Full documentation of the APBPS2 core can be found here:

 * http://www.gaisler.com/products/grlib/grip.pdf

 *

 * See "Documentation/devicetree/bindings/input/ps2keyb-mouse-apbps2.txt" for

 * information on open firmware properties.

 *

 * Contributors: Daniel Hellstrom <daniel@gaisler.com>

 0x00 */

 0x04 */

 0x08 */

 0x0c */

 clear error bits? */

 timeout in 100ms */

 delay until PS/2 controller has room for more chars */

 clear error flags */

 Clear old data if available (unlikely) */

 Enable reciever and it's interrupt */

 stop interrupts at PS/2 HW level */

 Initialize one APBPS2 PS/2 core */

 Find Device Address */

 Reset hardware, disable interrupt */

 IRQ */

 Get core frequency */

 Set reload register to core freq in kHz/10 */

 SPDX-License-Identifier: GPL-2.0

/*

 * SGI IOC3 PS/2 controller driver for linux

 *

 * Copyright (C) 2019 Thomas Bogendoerfer <tbogendoerfer@suse.de>

 *

 * Based on code Copyright (C) 2005 Stanislaw Skowronek <skylark@unaligned.org>

 *               Copyright (C) 2009 Johannes Dickgreber <tanzy@gmx.de>

 enable ports */

/*

 * drivers/input/serio/gscps2.c

 *

 * Copyright (c) 2004-2006 Helge Deller <deller@gmx.de>

 * Copyright (c) 2002 Laurent Canet <canetl@esiee.fr>

 * Copyright (c) 2002 Thibaut Varene <varenet@parisc-linux.org>

 *

 * Pieces of code based on linux-2.4's hp_mouse.c & hp_keyb.c

 *	Copyright (c) 1999 Alex deVries <alex@onefishtwo.ca>

 *	Copyright (c) 1999-2000 Philipp Rumpf <prumpf@tux.org>

 *	Copyright (c) 2000 Xavier Debacker <debackex@esiee.fr>

 *	Copyright (c) 2000-2001 Thomas Marteau <marteaut@esiee.fr>

 *

 * HP GSC PS/2 port driver, found in PA/RISC Workstations

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 *

 * TODO:

 * - Dino testing (did HP ever shipped a machine on which this port

 *                 was usable/enabled ?)

/*

 * Driver constants

 various constants */

 offset for DINO controller versus LASI one */

 PS/2 IO port offsets */

 device ID offset (see: GSC_ID_XXX) */

 reset port offset */

 receive port offset */

 transmit port offset */

 see: Control register bits */

 see: Status register bits */

 Control register bits */

 enable interface */

 loopback operation */

 directly control clock/data line */

 data line direct control */

 clock line direct control */

 Status register bits */

 Receive Buffer Not Empty */

 Transmit Buffer Not Empty */

 Timeout Error */

 Parity Error */

 Composite Interrupt = irq on any port */

 Data Line Shadow */

 Clock Line Shadow */

 IDs returned by GSC_ID port register */

 device ID values */

 GSC PS/2 port device struct */

 position in buffer[] */

/*

 * Various HW level routines

/*

 * wait_TBE() - wait for Transmit Buffer Empty

 device is expected to react within 250 msec */

 This should not happen */

/*

 * gscps2_flush() - flush the receive buffer

/*

 * gscps2_writeb_output() - write a byte to the port

 *

 * returns 1 on success, 0 on error

 wait */;

 this is ugly, but due to timing of the port it seems to be necessary. */

 make sure any received data is returned as fast as possible */

 this is important e.g. when we set the LEDs on the keyboard */

/*

 * gscps2_enable() - enables or disables the port

 now enable/disable the port */

/*

 * gscps2_reset() - resets the PS/2 port

 reset the interface */

/**

 * gscps2_interrupt() - Interruption service routine

 *

 * This function reads received PS/2 bytes and processes them on

 * all interfaces.

 * The problematic part here is, that the keyboard and mouse PS/2 port

 * share the same interrupt and it's not possible to send data if any

 * one of them holds input data. To solve this problem we try to receive

 * the data as fast as possible and handle the reporting to the upper layer

 * later.

 list_for_each_entry */

 all data was read from the ports - now report the data to upper layer */

	    /* Did new data arrived while we read existing data ?

 while() */

 list_for_each_entry */

/*

 * gscps2_write() - send a byte out through the aux interface.

/*

 * gscps2_open() is called when a port is opened by the higher layer.

 * It resets and enables the port.

 enable it */

/*

 * gscps2_close() disables the port

/**

 * gscps2_probe() - Probes PS2 devices

 * @return: success/error report

 Offset for DINO PS/2. Works with LASI even */

/**

 * gscps2_remove() - Removes PS2 devices

 * @return: success/error report

 LASI PS/2 */

 DINO PS/2 */

 0 terminated list */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Xilinx XPS PS/2 device driver

 *

 * (c) 2005 MontaVista Software, Inc.

 * (c) 2008 Xilinx, Inc.

 Register offsets for the xps2 device */

 Software Reset register */

 Status register */

 Receive Data register */

 Transmit Data register */

 Global Interrupt Enable reg */

 Interrupt Status register */

 Interrupt Enable register */

 Reset Register Bit Definitions */

 Software Reset  */

 Status Register Bit Positions */

 Receive Full  */

 Transmit Full  */

/*

 * Bit definitions for ISR/IER registers. Both the registers have the same bit

 * definitions and are only defined once.

 Watchdog Timeout Interrupt */

 Transmit No ACK Interrupt */

 Transmit ACK (Data) Interrupt */

 Receive Overflow Interrupt */

 Receive Error Interrupt */

 Receive Data Interrupt */

 Mask for all the Transmit Interrupts */

 Mask for all the Receive Interrupts */

 Mask for all the Interrupts */

 Global Interrupt Enable mask */

 virt. address of control registers */

 serio */

***********************************/

 XPS PS/2 data transmission calls */

***********************************/

/**

 * xps2_recv() - attempts to receive a byte from the PS/2 port.

 * @drvdata:	pointer to ps2 device private data structure

 * @byte:	address where the read data will be copied

 *

 * If there is any data available in the PS/2 receiver, this functions reads

 * the data, otherwise it returns error.

 If there is data available in the PS/2 receiver, read it */

********************/

 Interrupt handler */

********************/

 Get the PS/2 interrupts and clear them */

 Check which interrupt is active */

 Error, if a byte is not received */

******************/

 serio callbacks */

******************/

/**

 * sxps2_write() - sends a byte out through the PS/2 port.

 * @pserio:	pointer to the serio structure of the PS/2 port

 * @c:		data that needs to be written to the PS/2 port

 *

 * This function checks if the PS/2 transmitter is empty and sends a byte.

 * Otherwise it returns error. Transmission fails only when nothing is connected

 * to the PS/2 port. Thats why, we do not try to resend the data in case of a

 * failure.

 If the PS/2 transmitter is empty send a byte of data */

/**

 * sxps2_open() - called when a port is opened by the higher layer.

 * @pserio:	pointer to the serio structure of the PS/2 device

 *

 * This function requests irq and enables interrupts for the PS/2 device.

 start reception by enabling the interrupts */

 success */

/**

 * sxps2_close() - frees the interrupt.

 * @pserio:	pointer to the serio structure of the PS/2 device

 *

 * This function frees the irq and disables interrupts for the PS/2 device.

 Disable the PS2 interrupts */

/**

 * xps2_of_probe - probe method for the PS/2 device.

 * @of_dev:	pointer to OF device structure

 * @match:	pointer to the structure used for matching a device

 *

 * This function probes the PS/2 device in the device tree.

 * It initializes the driver data structure and the hardware.

 * It returns 0, if the driver is bound to the PS/2 device, or a negative

 * value if there is an error.

 IO mem resources */

 Get iospace for the device */

 Get IRQ for the device */

 Fill in configuration data and add them to the list */

 Disable all the interrupts, just in case */

	/*

	 * Reset the PS2 device and abort any current transaction,

	 * to make sure we have the PS2 in a good state.

 success */

/**

 * xps2_of_remove - unbinds the driver from the PS/2 device.

 * @of_dev:	pointer to OF device structure

 *

 * This function is called if a device is physically removed from the system or

 * if the driver module is being unloaded. It frees any resources allocated to

 * the device.

 IO mem resources */

 Get iospace of the device */

 Match table for of_platform binding */

 end of list */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OLPC serio driver for multiplexed input from Marvell MMP security processor

 *

 * Copyright (C) 2011-2013 One Laptop Per Child

/*

 * The OLPC XO-1.75 and XO-4 laptops do not have a hardware PS/2 controller.

 * Instead, the OLPC firmware runs a bit-banging PS/2 implementation on an

 * otherwise-unused slow processor which is included in the Marvell MMP2/MMP3

 * SoC, known as the "Security Processor" (SP) or "Wireless Trusted Module"

 * (WTM). This firmware then reports its results via the WTM registers,

 * which we read from the Application Processor (AP, i.e. main CPU) in this

 * driver.

 *

 * On the hardware side we have a PS/2 mouse and an AT keyboard, the data

 * is multiplexed through this system. We create a serio port for each one,

 * and demultiplex the data accordingly.

 WTM register offsets */

/*

 * The upper byte of SECURE_PROCESSOR_COMMAND and COMMAND_RETURN_STATUS is

 * used to identify which port (device) is being talked to. The lower byte

 * is the data being sent/received.

 COMMAND_FIFO_STATUS */

 Number of pending/unprocessed commands */

 from device specs */

 PJ_RST_INTERRUPT */

 PJ_INTERRUPT_MASK */

 COMMAND_FIFO_STATUS */

 SP busy. This has not been seen in practice. */

	/*

	 * Write 1 to PJ_RST_INTERRUPT to acknowledge and clear the interrupt

	 * Write 0xff00 to SECURE_PROCESSOR_COMMAND.

 Ack and clear interrupt */

 Enable interrupt 0 by clearing its bit */

 Disable interrupt 0 */

 KEYBOARD */

 TOUCHPAD */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

/*

 *  82C710 C&T mouse port chip driver for Linux

/*

/*

 * ct82c710 interface

 Device Idle */

 Device Char received */

 Device XMIT Idle */

 Device Reset */

 Device Interrupt On */

 Device Error */

 Device Clear */

 Device Enable */

/*

 * Interrupt handler for the 82C710 mouse port. A character

 * is waiting in the 82C710.

/*

 * Wait for device to send output char and flush any input char.

 Enable interrupts */

/*

 * Write to the 82C710 mouse device.

/*

 * See if we can find a 82C710 device. Read mouse address.

 Any value except 9, ff or 36 */

 Inverse of 55 */

 Address the chip */

 390/4; 390 = config address */

 Inverse of e4 */

 Write index */

 Config address found? */

 No: no 82C710 here */

 Write index */

 Get mouse I/O address */

 Close config mode */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000-2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	Richard Zidlicky <Richard.Zidlicky@stud.informatik.uni-erlangen.de>

/*

 * Q40 PS/2 keyboard controller driver for Linux/m68k

/*

/*

 * q40kbd_flush() flushes all data that may be in the keyboard buffers

/*

 * q40kbd_open() is called when a port is open by the higher layer.

 * It allocates the interrupt and enables in in the chip.

 off we go */

	/*

	 * q40kbd_close() will be called as part of unregistering

	 * and will ensure that IRQ is turned off, so it is safe

	 * to unregister port first and free IRQ later.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TQC PS/2 Multiplexer driver

 *

 * Copyright (C) 2010 Dmitry Eremin-Solenikov

 First MUST come PS2MULT_NUM_PORTS selectors */

 Note that serio core already take care of children ports */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Raw serio device providing access to a raw byte stream from underlying

 * serio port. Closely emulates behavior of pre-2.6 /dev/psaux device

 *

 * Copyright (c) 2004 Dmitry Torokhov

/*********************************************************************

 *             Interface with userspace (file operations)            *

 Either signal error or partial write */

/*********************************************************************

 *                   Interface with serio port                       *

 we are holding serio->lock here so we are protected */

	/*

	 * Nothing needs to be done here, we just need this method to

	 * keep the same device.

/*

 * Wake up users waiting for IO so they can disconnect from

 * dead device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Amstrad E3 (Delta) keyboard port driver

 *

 *  Copyright (c) 2006 Matt Callow

 *  Copyright (c) 2010 Janusz Krzysztofik

 *

 * Thanks to Cliff Lawson for his help

 *

 * The Amstrad Delta keyboard (aka mailboard) uses normal PC-AT style serial

 * transmission.  The keyboard port is formed of two GPIO lines, for clock

 * and data.  Due to strict timing requirements of the interface,

 * the serial data stream is read and processed by a FIQ handler.

 * The resulting words are fetched by this driver from a circular buffer.

 *

 * Standard AT keyboard driver (atkbd) is used for handling the keyboard data.

 * However, when used with the E3 mailboard that producecs non-standard

 * scancodes, a custom key table must be prepared and loaded from userspace.

 check valid stop bit */

 calculate the parity */

 it should be odd */

	/*

	 * Read data from the circular buffer, check it

	 * and then pass it on the serio

 enable keyboard */

 disable keyboard */

		/*

		 * When running on a non-dt platform and requested regulator

		 * is not available, devm_regulator_get() never returns

		 * -EPROBE_DEFER as it is not able to justify if the regulator

		 * may still appear later.  On the other hand, the board can

		 * still set full constriants flag at late_initcall in order

		 * to instruct devm_regulator_get() to returnn a dummy one

		 * if sufficient.  Hence, if we get -ENODEV here, let's convert

		 * it to -EPROBE_DEFER and wait for the board to decide or

		 * let Deferred Probe infrastructure handle this error.

/*

 * HP i8042-based System Device Controller driver.

 *

 * Copyright (c) 2001 Brian S. Julin

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL").

 *

 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR

 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 *

 * References:

 * System Device Controller Microprocessor Firmware Theory of Operation

 *      for Part Number 1820-4784 Revision B.  Dwg No. A-1820-4784-2

 * Helge Deller's original hilkbd.c port for PA-RISC.

 *

 *

 * Driver theory of operation:

 *

 * hp_sdc_put does all writing to the SDC.  ISR can run on a different

 * CPU than hp_sdc_put, but only one CPU runs hp_sdc_put at a time

 * (it cannot really benefit from SMP anyway.)  A tasket fit this perfectly.

 *

 * All data coming back from the SDC is sent via interrupt and can be read

 * fully in the ISR, so there are no latency/throughput problems there.

 * The problem is with output, due to the slow clock speed of the SDC

 * compared to the CPU.  This should not be too horrible most of the time,

 * but if used with HIL devices that support the multibyte transfer command,

 * keeping outbound throughput flowing at the 6500KBps that the HIL is

 * capable of is more than can be done at HZ=100.

 *

 * Busy polling for IBF clear wastes CPU cycles and bus cycles.  hp_sdc.ibf

 * is set to 0 when the IBF flag in the status register has cleared.  ISR

 * may do this, and may also access the parts of queued transactions related

 * to reading data back from the SDC, but otherwise will not touch the

 * hp_sdc state. Whenever a register is written hp_sdc.ibf is set to 1.

 *

 * The i8042 write index and the values in the 4-byte input buffer

 * starting at 0x70 are kept track of in hp_sdc.wi, and .r7[], respectively,

 * to minimize the amount of IO needed to the SDC.  However these values

 * do not need to be locked since they are only ever accessed by hp_sdc_put.

 *

 * A timer task schedules the tasklet once per second just to make

 * sure it doesn't freeze up and to allow for bad reads to time out.

 Machine-specific abstraction */

 All driver state is kept in here. */

************** primitives for use in any context *********************/

/*	Care must be taken to only invoke hp_sdc_spin_ibf when

 *	absolutely needed, or in rarely invoked subroutines.

 *	Not only does it waste CPU cycles, it also wastes bus cycles.

*********************** Interrupt context functions ************************/

 All data has been gathered. */

 Return control of this transaction */

 Read data unconditionally to advance i8042. */

 For now we are ignoring these until we get the SDC to behave. */

 This case is not documented. */

 TODO: pass this on to the HIL handler, or do SAK here? */

**************** Kernel (tasklet) context functions ****************/

			/* If this turns out to be a normal failure mode

			 * we'll need to figure out a way to communicate

			 * it back to the application. and be less verbose.

				/* Note this means that irqhooks may be called

				 * in tasklet/bh context.

	/* If i8042 buffers are full, we cannot do anything that

 See if we are in the middle of a sequence. */

 Wrap to top */

 Found one. */

 There's nothing queued to do. */

 Check to see if the interrupt mask needs to be set. */

 Interleave outbound data between the transactions. */

 Interleave outbound data between the transactions. */

 act finished? */

 skip quantity field if data-out sequence follows. */

 act finished? */

 Need to point the write index register */

 write index register autoincrements */

	/* We don't go any further in the command if there is a pending read,

 curr->idx should == idx at this point. */

 Start a new read */

 Still need to lock here in case of spurious irq. */

 This transaction is over. */

 Interleave outbound data between the transactions. */

	/* If by some quirk IBF has cleared and our ISR has run to

****** Functions called in either user or kernel context ****/

 Can't have same transaction on queue twice */

 Search for empty slot */

 TODO: don't remove it if it's not done. */

********************* User context functions **************************/

 Enable interrupts from the timers */

 Enable interrupts from the HIL MLC */

 Disable interrupts from the timers */

 Disable interrupts from HIL only if there is no cooked driver. */

 Disable interrupts from HIL only if there is no raw HIL driver. */

************************ Keepalive timer task *********************/

 Re-insert the periodic task. */

************************* Module Initialization ***************************/

 __hppa__ */

 Mask maskable irqs */

 Sync the output buffer registers, thus scheduling hp_sdc_tasklet. */

 Wait for t_sync to complete */

 Create the keepalive task */

 We only expect one SDC */

	/* after successful initialization give SDC some time to settle

 __hppa__ */

 do nothing if we don't have a SDC */

 Turn off all maskable "sub-function" irq's. */

 Wait until we know this has been processed by the i8042 */

/* Timing notes:  These measurements taken on my 64MHz 7100-LC (715/64)

 *                                              cycles cycles-adj    time

 * between two consecutive mfctl(16)'s:              4        n/a    63ns

 * hp_sdc_spin_ibf when idle:                      119        115   1.7us

 * gsc_writeb status register:                      83         79   1.2us

 * IBF to clear after sending SET_IM:             6204       6006    93us

 * IBF to clear after sending LOAD_RT:            4467       4352    68us

 * IBF to clear after sending two LOAD_RTs:      18974      18859   295us

 * READ_T1, read status/data, IRQ, call handler: 35564        n/a   556us

 * cmd to ~IBF READ_T1 2nd time right after:   5158403        n/a    81ms

 * between IRQ received and ~IBF for above:    2578877        n/a    40ms

 *

 * Performance stats after a run of this module configuring HIL and

 * receiving a few mouse events:

 *

 * status in8  282508 cycles 7128 calls

 * status out8   8404 cycles  341 calls

 * data out8     1734 cycles   78 calls

 * isr         174324 cycles  617 calls (includes take)

 * take          1241 cycles    2 calls

 * put        1411504 cycles 6937 calls

 * task       1655209 cycles 6937 calls (includes put)

 *

/*

 * Access to HP-HIL MLC through HP System Device Controller.

 *

 * Copyright (c) 2001 Brian S. Julin

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL").

 *

 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR

 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 *

 * References:

 * HP-HIL Technical Reference Manual.  Hewlett Packard Product No. 45918A

 * System Device Controller Microprocessor Firmware Theory of Operation

 *      for Part Number 1820-4784 Revision B.  Dwg No. A-1820-4784-2

 *

************************ Interrupt context ******************************/

 We know status is 5X */

 No more data will be coming due to an error. */

******************* Tasklet or userspace context functions ****************/

 Try to down the semaphore */

 printk(KERN_DEBUG PREFIX ">[%x]\n", mlc->ipacket[0]); */

			/*	printk("!%i %i",

				tv.tv_usec - mlc->instart.tv_usec,

				mlc->intimeout);

 Try to down the semaphores -- they should be up. */

 Try to down the semaphore -- it should be up. */

 Shouldn't be sending commands when loop may be busy */

 No timeout */

 we cannot emulate this, it should not be used. */

 Should not send command/data after engaging APE */

	/* Disengaging APE this way would not be valid either since

	 * the loop must be allowed to idle.

	 *

	 * So, it works out that we really never actually send control

	 * and data when using SDC, we just send the data.

 priv->tseq[3] = (mlc->ddc + 1) | HP_SDC_LPS_ACSUCC; */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Parallel port to Keyboard port adapter driver for Linux

 *

 *  Copyright (c) 1999-2004 Vojtech Pavlik

/*

 * To connect an AT or XT keyboard to the parallel port, a fairly simple adapter

 * can be made:

 * 

 *  Parallel port            Keyboard port

 *

 *     +5V --------------------- +5V (4)

 *  

 *                 ______

 *     +5V -------|______|--.

 *                          |

 *     ACK (10) ------------|

 *                          |--- KBD CLOCK (5)

 *     STROBE (1) ---|<|----'

 *     

 *                 ______

 *     +5V -------|______|--.

 *                          |

 *     BUSY (11) -----------|

 *                          |--- KBD DATA (1)

 *     AUTOFD (14) --|<|----'

 *

 *     GND (18-25) ------------- GND (3)

 *     

 * The diodes can be fairly any type, and the resistors should be somewhere

 * around 5 kOhm, but the adapter will likely work without the resistors,

 * too.

 *

 * The +5V source can be taken either from USB, from mouse or keyboard ports,

 * or from a joystick port. Unfortunately, the parallel port of a PC doesn't

 * have a +5V pin, and feeding the keyboard from signal pins is out of question

 * with 300 mA power reqirement of a typical AT keyboard.

 Strobe & Ack */

 AutoFd & Busy */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/input/serio/pcips2.c

 *

 *  Copyright (C) 2003 Russell King, All Rights Reserved.

 *

 *  I'm not sure if this is a generic PS/2 PCI interface or specific to

 *  the Mobility Electronics docking station.

 MOBILITY */

 Keyboard */

 MOBILITY */

 Mouse */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Focaltech TouchPad PS/2 mouse driver

 *

 * Copyright (c) 2014 Red Hat Inc.

 * Copyright (c) 2014 Mathias Gottschlag <mgottschlag@gmail.com>

 *

 * Red Hat authors:

 *

 * Hans de Goede <hdegoede@redhat.com>

/*

 * Even if the kernel is built without support for Focaltech PS/2 touchpads (or

 * when the real driver fails to recognize the device), we still have to detect

 * them in order to avoid further detection attempts confusing the touchpad.

 * This way it at least works in PS/2 mouse compatibility mode.

/*

 * Packet types - the numbers are not consecutive, so we might be missing

 * something here.

 bitmap of active fingers */

 absolute position of one finger */

 relative position of 1-2 fingers */

/*

 * Current state of a single finger on the touchpad.

 The touchpad has generated a touch event for the finger */

	/*

	 * The touchpad has sent position data for the finger. The

	 * flag is 0 when the finger is not active, and there is a

	 * time between the first touch event for the finger and the

	 * following absolute position packet for the finger where the

	 * touchpad has declared the finger to be valid, but we do not

	 * have any valid position yet.

	/*

	 * Absolute position (from the bottom left corner) of the

	 * finger.

/*

 * Description of the current state of the touchpad hardware.

	/*

	 * The touchpad tracks the positions of the fingers for us,

	 * the array indices correspond to the finger indices returned

	 * in the report packages.

	/*

	 * Finger width 0-7 and 15 for a very big contact area.

	 * 15 value stays until the finger is released.

	 * Width is reported only in absolute packets.

	 * Since hardware reports width only for last touching finger,

	 * there is no need to store width for every specific finger,

	 * so we keep only last value reported.

 True if the clickpad has been pressed. */

			/*

			 * The touchpad might report invalid data, so we clamp

			 * the resulting values so that we do not confuse

			 * userspace.

 the second byte contains a bitmap of all fingers touching the pad */

			/*

			 * Even when the finger becomes active again, we still

			 * will have to wait for the first valid position.

	/*

	 * If there is an odd number of fingers, the last relative

	 * packet only contains one finger. In this case, the second

	 * finger index in the packet is 0 (we subtract 1 in the lines

	 * above to create array indices, so the finger will overflow

	 * and be above FOC_MAX_FINGERS).

 Full packet received */

	/*

	 * We might want to do some validation of the data here, but

	 * we do not know the protocol well enough

	/*

	 * Undo part of setup done for us by psmouse core since touchpad

	 * is not a relative device.

	/*

	 * Now set up our capabilities.

 not sure whether this is 100% correct */

 not supported yet */

 not supported yet */

 not supported yet */

 resync is not supported yet */

	/*

	 * rate/resolution/scale changes are not supported yet, and

	 * the generic implementations of these functions seem to

	 * confuse some touchpads

 CONFIG_MOUSE_PS2_FOCALTECH */

 SPDX-License-Identifier: GPL-2.0-or-later

/* ----------------------------------------------------------------------------

 * touchkit_ps2.c  --  Driver for eGalax TouchKit PS/2 Touchscreens

 *

 * Copyright (C) 2005 by Stefan Lucke

 * Copyright (C) 2004 by Daniel Ritz

 * Copyright (C) by Todd E. Johnson (mtouchusb.c)

 *

 * Based upon touchkitusb.c

 *

 * Vendor documentation is available at:

 * http://home.eeti.com.tw/web20/drivers/Software%20Programming%20Guide_v2.0.pdf 

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Apple USB Touchpad (for post-February 2005 PowerBooks and MacBooks) driver

 *

 * Copyright (C) 2001-2004 Greg Kroah-Hartman (greg@kroah.com)

 * Copyright (C) 2005-2008 Johannes Berg (johannes@sipsolutions.net)

 * Copyright (C) 2005-2008 Stelian Pop (stelian@popies.net)

 * Copyright (C) 2005      Frank Arnold (frank@scirocco-5v-turbo.de)

 * Copyright (C) 2005      Peter Osterlund (petero2@telia.com)

 * Copyright (C) 2005      Michael Hanselmann (linux-kernel@hansmi.ch)

 * Copyright (C) 2006      Nicolas Boichat (nicolas@boichat.ch)

 * Copyright (C) 2007-2008 Sven Anders (anders@anduras.de)

 *

 * Thanks to Alex Harper <basilisk@foobox.net> for his inputs.

/*

 * Note: We try to keep the touchpad aspect ratio while still doing only

 * simple arithmetics:

 *	0 <= x <= (xsensors - 1) * xfact

 *	0 <= y <= (ysensors - 1) * yfact

 number of X sensors */

 17" models have more sensors */

 number of Y sensors */

 X multiplication factor */

 Y multiplication factor */

 size of USB transfers */

 callback function */

 fuzz touchpad generates */

 Apple */				\

/*

 * Table of devices (Product IDs) that work with this driver.

 * (The names come from Info.plist in AppleUSBTrackpad.kext,

 *  According to Info.plist Geyser IV is the same as Geyser III.)

 PowerBooks Feb 2005, iBooks G4 */

 FOUNTAIN ANSI */

 FOUNTAIN ISO */

 FOUNTAIN TP ONLY */

 GEYSER 1 TP ONLY */

 PowerBooks Oct 2005 */

 GEYSER 2 ANSI */

 GEYSER 2 ISO */

 GEYSER 2 JIS */

 Core Duo MacBook & MacBook Pro */

 GEYSER 3 ANSI */

 GEYSER 3 ISO */

 GEYSER 3 JIS */

 Core2 Duo MacBook & MacBook Pro */

 GEYSER 4 ANSI */

 GEYSER 4 ISO */

 GEYSER 4 JIS */

 Core2 Duo MacBook3,1 */

 GEYSER 4 HF ANSI */

 GEYSER 4 HF ISO */

 GEYSER 4 HF JIS */

 Terminating entry */

 maximum number of sensors */

/*

 * The largest possible bank of sensors with additional buffer of 4 extra values

 * on either side, for an array of smoothed sensor values.

 maximum pressure this driver will report */

/*

 * Threshold for the touchpad sensors. Any change less than ATP_THRESHOLD is

 * ignored.

/*

 * How far we'll bitshift our sensor values before averaging them. Mitigates

 * rounding errors.

 Geyser initialization constants */

/**

 * enum atp_status_bits - status bit meanings

 *

 * These constants represent the meaning of the status bits.

 * (only Geyser 3/4)

 *

 * @ATP_STATUS_BUTTON: The button was pressed

 * @ATP_STATUS_BASE_UPDATE: Update of the base values (untouched pad)

 * @ATP_STATUS_FROM_RESET: Reset previously performed

 Structure to hold all of our device specific stuff */

 usb device */

 usb interface */

 usb request block */

 transferred data */

 input dev */

 touchpad model */

 are the samples valid? */

 last reported finger count */

 last reported x/y, */

 used for smoothing */

 number of empty packets */

/*

 * Make the threshold a module parameter

/*

 * By default newer Geyser devices send standard USB HID mouse

 * packets (Report ID 2). This code changes device mode, so it

 * sends raw sensor reports (Report ID 5).

 Apply the mode switch */

/*

 * Reinitialise the device. This usually stops stream of empty packets

 * coming from it.

	/*

	 * Use offset to point xy_sensors at the first value in dev->xy_acc

	 * for whichever dimension we're looking at this particular go-round.

 values to calculate mean */

		/*

		 * Makes the finger detection more versatile.  For example,

		 * two fingers with no gap will be detected.  Also, my

		 * tests show it less likely to have intermittent loss

		 * of multiple finger readings while moving around (scrolling).

		 *

		 * Changes the multiple finger detection to counting humps on

		 * sensors (transitions from nonincreasing to increasing)

		 * instead of counting transitions from low sensors (no

		 * finger reading) to high sensors (finger above

		 * sensor)

		 *

		 * - Jason Parekh <jasonparekh@gmail.com>

 No need to continue if no fingers are found. */

	/*

	 * Use a smoothed version of sensor data for movement calculations, to

	 * combat noise without needing to rely so heavily on a threshold.

	 * This improves tracking.

	 *

	 * The smoothed array is bigger than the original so that the smoothing

	 * doesn't result in edge values being truncated.

 Pull base values, scaled up to help avoid truncation errors. */

 Handle edge. */

 Average values with neighbors. */

 Handle other edge. */

		/*

		 * Skip values if they're small enough to be truncated to 0

		 * by scale. Mostly noise.

 Scale down pressure output. */

 Check URB status and for correct length of data package */

 success */

 This urb is terminated, clean up */

 drop incomplete datasets */

 17" Powerbooks have extra X sensors */

/*

 * USB interrupt callback functions

 Interrupt function for older touchpads: FOUNTAIN/GEYSER1/GEYSER2 */

 reorder the sensors values */

		/*

		 * The values are laid out like this:

		 * Y1, Y2, -, Y3, Y4, -, ..., X1, X2, -, X3, X4, -, ...

		 * '-' is an unused value.

 read X values */

 read Y values */

 X values */

 Y values */

 first sample */

 Store first sample */

 Perform size detection, if not done already */

 accumulate the change */

 prevent down drifting */

 reset the accumulator on release */

 Interrupt function for older touchpads: GEYSER3/GEYSER4 */

	/* Reorder the sensors values:

	 *

	 * The values are laid out like this:

	 * -, Y1, Y2, -, Y3, Y4, -, ..., -, X1, X2, -, X3, X4, ...

	 * '-' is an unused value.

 read X values */

 read Y values */

 Just update the base values (i.e. touchpad in untouched state) */

 calculate the change */

 this is a round-robin value, so couple with that */

 prevent down drifting */

 reset the accumulator on release */

	/*

	 * Geysers 3/4 will continue to send packets continually after

	 * the first touch unless reinitialised. Do so if it's been

	 * idle for a while in order to avoid waking the kernel up

	 * several hundred times a second.

	/*

	 * Button must not be pressed when entering suspend,

	 * otherwise we will never release the button.

 Don't resubmit urb here, wait for reinit */

 switch to raw sensor mode */

 set up the endpoint information */

 use only the first interrupt-in endpoint */

 we found an interrupt in endpoint */

 allocate memory for our device state and initialize it */

 save our data pointer in this interface device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for	DEC VSXXX-AA mouse (hockey-puck mouse, ball or two rollers)

 *		DEC VSXXX-GA mouse (rectangular mouse, with ball)

 *		DEC VSXXX-AB tablet (digitizer with hair cross or stylus)

 *

 * Copyright (C) 2003-2004 by Jan-Benedict Glaw <jbglaw@lug-owl.de>

 *

 * The packet format was initially taken from a patch to GPM which is (C) 2001

 * by	Karsten Merker <merker@linuxtag.org>

 * and	Maciej W. Rozycki <macro@ds2.pg.gda.pl>

 * Later on, I had access to the device's documentation (referenced below).

/*

/*

 * Building an adaptor to DE9 / DB25 RS232

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * DISCLAIMER: Use this description AT YOUR OWN RISK! I'll not pay for

 * anything if you break your mouse, your computer or whatever!

 *

 * In theory, this mouse is a simple RS232 device. In practice, it has got

 * a quite uncommon plug and the requirement to additionally get a power

 * supply at +5V and -12V.

 *

 * If you look at the socket/jack (_not_ at the plug), we use this pin

 * numbering:

 *    _______

 *   / 7 6 5 \

 *  | 4 --- 3 |

 *   \  2 1  /

 *    -------

 *

 *	DEC socket	DE9	DB25	Note

 *	1 (GND)		5	7	-

 *	2 (RxD)		2	3	-

 *	3 (TxD)		3	2	-

 *	4 (-12V)	-	-	Somewhere from the PSU. At ATX, it's

 *					the thin blue wire at pin 12 of the

 *					ATX power connector. Only required for

 *					VSXXX-AA/-GA mice.

 *	5 (+5V)		-	-	PSU (red wires of ATX power connector

 *					on pin 4, 6, 19 or 20) or HDD power

 *					connector (also red wire).

 *	6 (+12V)	-	-	HDD power connector, yellow wire. Only

 *					required for VSXXX-AB digitizer.

 *	7 (dev. avail.)	-	-	The mouse shorts this one to pin 1.

 *					This way, the host computer can detect

 *					the mouse. To use it with the adaptor,

 *					simply don't connect this pin.

 *

 * So to get a working adaptor, you need to connect the mouse with three

 * wires to a RS232 port and two or three additional wires for +5V, +12V and

 * -12V to the PSU.

 *

 * Flow specification for the link is 4800, 8o1.

 *

 * The mice and tablet are described in "VCB02 Video Subsystem - Technical

 * Manual", DEC EK-104AA-TM-001. You'll find it at MANX, a search engine

 * specific for DEC documentation. Try

 * http://www.vt100.net/manx/details?pn=EK-104AA-TM-001;id=21;cp=1

 At least 5 is needed for a full tablet packet */

/*

 * Returns number of bytes to be dropped, 0 if packet is okay.

 First byte must be a header byte */

 Check all following bytes */

	/*

	 * Check for normal stream packets. This is three bytes,

	 * with the first byte's 3 MSB set to 100.

	 *

	 * [0]:	1	0	0	SignX	SignY	Left	Middle	Right

	 * [1]: 0	dx	dx	dx	dx	dx	dx	dx

	 * [2]:	0	dy	dy	dy	dy	dy	dy	dy

	/*

	 * Low 7 bit of byte 1 are abs(dx), bit 7 is

	 * 0, bit 4 of byte 0 is direction.

	/*

	 * Low 7 bit of byte 2 are abs(dy), bit 7 is

	 * 0, bit 3 of byte 0 is direction.

	/*

	 * Get button state. It's the low three bits

	 * (for three buttons) of byte 0.

	/*

	 * Report what we've found so far...

	/*

	 * Tablet position / button packet

	 *

	 * [0]:	1	1	0	B4	B3	B2	B1	Pr

	 * [1]:	0	0	X5	X4	X3	X2	X1	X0

	 * [2]:	0	0	X11	X10	X9	X8	X7	X6

	 * [3]:	0	0	Y5	Y4	Y3	Y2	Y1	Y0

	 * [4]:	0	0	Y11	Y10	Y9	Y8	Y7	Y6

	/*

	 * Get X/Y position. Y axis needs to be inverted since VSXXX-AB

	 * counts down->top while monitor counts top->bottom.

	/*

	 * Get button state. It's bits <4..1> of byte 0.

	/*

	 * Report what we've found so far...

	/*

	 * Check for Power-On-Reset packets. These are sent out

	 * after plugging the mouse in, or when explicitly

	 * requested by sending 'T'.

	 *

	 * [0]:	1	0	1	0	R3	R2	R1	R0

	 * [1]:	0	M2	M1	M0	D3	D2	D1	D0

	 * [2]:	0	E6	E5	E4	E3	E2	E1	E0

	 * [3]:	0	0	0	0	0	Left	Middle	Right

	 *

	 * M: manufacturer location code

	 * R: revision code

	 * E: Error code. If it's in the range of 0x00..0x1f, only some

	 *    minor problem occurred. Errors >= 0x20 are considered bad

	 *    and the device may not work properly...

	 * D: <0010> == mouse, <0100> == tablet

	/*

	 * Get button state. It's the low three bits

	 * (for three buttons) of byte 0. Maybe even the bit <3>

	 * has some meaning if a tablet is attached.

 No (serious) error. Report buttons */

	/*

	 * If the mouse was hot-plugged, we need to force differential mode

	 * now... However, give it a second to recover from it's reset.

 Standard format */

 Incremental */

 72 samples/sec */

	/*

	 * Parse buffer to death...

		/*

		 * Out of sync? Throw away what we don't understand. Each

		 * packet starts with a byte whose bit 7 is set. Unhandled

		 * packets (ie. which we don't know about or simply b0rk3d

		 * data...) will get shifted out of the buffer after some

		 * activity on the mouse.

		/*

		 * Check for packets we know about.

 Check for broken packet */

 Check for broken packet */

 Check for broken packet */

 No REL, ABS or POR packet found */

 We have buttons */

 We have 3 buttons */

 ...and Tablet */

	/*

	 * Request selftest. Standard packet format and differential

	 * mode will be requested after the device ID'ed successfully.

 Test */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ALPS touchpad PS/2 mouse driver

 *

 * Copyright (c) 2003 Neil Brown <neilb@cse.unsw.edu.au>

 * Copyright (c) 2003-2005 Peter Osterlund <petero2@telia.com>

 * Copyright (c) 2004 Dmitry Torokhov <dtor@mail.ru>

 * Copyright (c) 2005 Vojtech Pavlik <vojtech@suse.cz>

 * Copyright (c) 2009 Sebastian Kapfer <sebastian_kapfer@gmx.net>

 *

 * ALPS detection, tap switching and status querying info is taken from

 * tpconfig utility (by C. Scott Ananian and Bruce Kall).

/*

 * Definitions for ALPS version 3 and 4 command mode protocol

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 a */

 b */

 c */

 d */

 e */

 f */

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 a */

 b */

 c */

 d */

 e */

 f */

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 a */

 b */

 c */

 d */

 e */

 f */

 touchpad has trackstick */

 device has a pass-through port */

 hardware wheel present */

 front & back buttons present */

 front & back buttons present */

 4 direction button present */

#define ALPS_PS2_INTERLEAVED	0x80	/* 3-byte PS/2 packet interleaved with

 separate stick button bits */

 device is a clickpad */

 device can report trackpoint pressure */

	/*

	 * XXX This entry is suspicious. First byte has zero lower nibble,

	 * which is what a normal mouse would report. Also, the value 0x0e

	 * isn't valid per PS/2 spec.

 Dell Latitude D600 */

 Toshiba Salellite Pro M10 */

 UMAX-530T */

 Toshiba Tecra A11-11L */

 HP ze1115 */

 Dell Latitude E5500, E6400, E6500, Precision M4400 */

 Fujitsu Siemens S6010 */

 Toshiba Satellite S2400-103 */

 NEC Versa L320 */

 Dell Latitude D800 */

 ThinkPad R61 8918-5QG */

 Dell XT2 */

 Ahtec Laptop */

 Dell Vostro 1400 */

/*

 * Some v2 models report the stick buttons in separate bits

 Extrapolated from other entries */

 Reported-by: Hans de Bruin <jmdebruin@xmsnet.nl> */

 Reported-by: Hans de Goede <hdegoede@redhat.com> */

 Extrapolated from other entries */

 Packet formats are described in Documentation/input/devices/alps.rst */

	/*

	 * If shared button has already been reported on the

	 * other device (dev2) then this event should be also

	 * sent through that device.

	/*

	 * Sync the _other_ device now, we'll do the first

	 * device later once we report the rest of the events.

 Some models have separate stick button bits */

 Convert hardware tap to a reasonable Z value */

	/*

	 * A "tap and drag" operation is reported by the hardware as a transition

	 * from (!fin && ges) to (fin && ges). This should be translated to the

	 * sequence Z>0, Z==0, Z>0, so the Z==0 event has to be generated manually.

/*

 * Process bitmap data from semi-mt protocols. Returns the number of

 * fingers detected. A return value of 0 means at least one of the

 * bitmaps was empty.

 *

 * The bitmaps don't have enough data to track fingers, so this function

 * only generates points representing a bounding box of all contacts.

 * These points are returned in fields->mt when the return value

 * is greater than 0.

	/*

	 * Fingers can overlap, so we use the maximum count of fingers

	 * on either axis as the finger count.

	/*

	 * If an axis reports only a single contact, we have overlapping or

	 * adjacent fingers. Divide the single contact between the two points.

 top-left corner */

 top-right corner */

 bottom-right corner */

 bottom-left corner */

 x-bitmap order is reversed on v5 touchpads  */

 y-bitmap order is reversed on v3 and v4 touchpads  */

	/*

	 * We only select a corner for the second touch once per 2 finger

	 * touch sequence to avoid the chosen corner (and thus the coordinates)

	 * jumping around when the first touch is in the middle.

 Find corner closest to our st coordinates */

 And select the opposite corner to use for the 2nd touch */

 Use st data when we don't have mt data */

 It should be a DualPoint when received trackstick packet */

 Sanity check packet */

	/*

	 * There's a special packet that seems to indicate the end

	 * of a stream of trackstick data. Filter these out.

	/*

	 * The x and y values tend to be quite large, and when used

	 * alone the trackstick is difficult to use. Scale them down

	 * to compensate.

	/*

	 * Most ALPS models report the trackstick buttons in the touchpad

	 * packets, but a few report them here. No reliable way has been

	 * found to differentiate between the models upfront, so we enable

	 * the quirk in response to seeing a button press in the trackstick

	 * packet.

 Y-profile is stored in P(0) to p(n-1), n = y_bits; */

 X-profile is stored in p(n) to p(n+m-1), m = x_bits; */

	/*

	 * There's no single feature of touchpad position and bitmap packets

	 * that can be used to distinguish between them. We rely on the fact

	 * that a bitmap packet should always follow a position packet with

	 * bit 6 of packet[4] set.

		/*

		 * Sometimes a position packet will indicate a multi-packet

		 * sequence, but then what follows is another position

		 * packet. Check for this, and when it happens process the

		 * position packet as usual.

			/*

			 * Bitmap processing uses position packet's coordinate

			 * data, so we need to do decode it first.

 Use st data */

	/*

	 * Bit 6 of byte 0 is not usually set in position packets. The only

	 * times it seems to be set is in situations where the data is

	 * suspect anyway, e.g. a palm resting flat on the touchpad. Given

	 * this combined with the fact that this bit is useful for filtering

	 * out misidentified bitmap packets, we reject anything with this

	 * bit set.

	/*

	 * Sometimes the hardware sends a single packet with z = 0

	 * in the middle of a stream. Real releases generate packets

	 * with x, y, and z all zero, so these seem to be flukes.

	 * Ignore them.

	/*

	 * v3 protocol packets come in three types, two representing

	 * touchpad data and one representing trackstick data.

	 * Trackstick packets seem to be distinguished by always

	 * having 0x3f in the last byte. This value has never been

	 * observed in the last byte of either of the other types

	 * of packets.

	/*

	 * We can use Byte5 to distinguish if the packet is from Touchpad

	 * or Trackpoint.

	 * Touchpad:	0 - 0x7E

	 * Trackpoint:	0x7F

 It should be a DualPoint when received Trackpoint packet */

 Trackpoint packet */

 To prevent the cursor jump when finger lifted */

 Divide 4 since trackpoint's speed is too fast */

 Touchpad packet */

 v6 touchpad does not have middle button */

	/*

	 * v4 has a 6-byte encoding for bitmap data, but this data is

	 * broken up between 3 normal packets. Use priv->multi_packet to

	 * track our position in the bitmap packet.

 sync, reset position */

 Detect false-positive touches where x & y report max value */

 y gets set to 0 at the end of this function */

	/*

	 * NEW packets are send to indicate a discontinuity in the finger

	 * coordinate reporting. Specifically a finger may have moved from

	 * slot 0 to 1 or vice versa. INPUT_MT_TRACK takes care of this for

	 * us.

	 *

	 * NEW packets have 3 problems:

	 * 1) They do not contain middle / right button info (on non clickpads)

	 *    this can be worked around by preserving the old button state

	 * 2) They do not contain an accurate fingercount, and they are

	 *    typically send when the number of fingers changes. We cannot use

	 *    the old finger count as that may mismatch with the amount of

	 *    touch coordinates we've available in the NEW packet

	 * 3) Their x data for the second touch is inaccurate leading to

	 *    a possible jump of the x coordinate by 16 units when the first

	 *    non NEW packet comes in

	 * Since problems 2 & 3 cannot be worked around, just ignore them.

 pkt_id == V7_PACKET_ID_MULTI */

 Sometimes a single touch is reported in mt[1] rather then mt[0] */

 It should be a DualPoint when received trackstick packet */

 two-finger finger positions */

 stick pointer */

 third and fourth finger positions */

 Current packet is 1Finger coordinate packet */

		/*

		 * When a button is held the device will give us events

		 * with x, y, and pressure of 0. This causes annoying jumps

		 * if a touch is released while the button is held.

		 * Handle this by claiming zero contacts.

		/*

		 * x, y, and pressure are decoded in

		 * alps_process_packet_ss4_v2()

 handle buttons */

		/*

		 * Sometimes the first packet will indicate a multi-packet

		 * sequence, but sometimes the next multi-packet would not

		 * come. Check for this, and when it happens process the

		 * position packet as usual.

 Now process the 1st packet */

	/*

	 * "f.is_mp" would always be '0' after merging the 1st and 2nd packet.

	 * When it is set, it means 2nd packet comes without 1st packet come.

 Save the first packet */

 Report trackstick */

 Report touchpad */

	/*

	 * format of input device name is: "protocol vendor name"

	 * see function psmouse_switch_protocol() in psmouse-base.c

	/*

	 * Save the error code so that we can detect that we

	 * already tried to create the device.

 Figure out which device to use to report the bare packet */

 On V2 devices the DualPoint Stick reports bare packets */

 Register dev3 mouse if we received PS/2 packet first time */

		/*

		 * Start a timer to flush the packet if it ends up last

		 * 6-byte packet in the stream. Timer needs to fire

		 * psmouse core times out itself. 20 ms should be enough

		 * to decide if we are getting more data or not.

		/*

		 * Highest bit is set - that means we either had

		 * complete ALPS packet and this is start of the

		 * next packet or we got garbage.

 Continue with the next packet */

		/*

		 * High bit is 0 - that means that we indeed got a PS/2

		 * packet in the middle of ALPS packet.

		 *

		 * There is also possibility that we got 6-byte ALPS

		 * packet followed  by 3-byte packet from trackpoint. We

		 * can not distinguish between these 2 scenarios but

		 * because the latter is unlikely to happen in course of

		 * normal operation (user would need to press all

		 * buttons on the pad and start moving trackpoint

		 * without touching the pad surface) we assume former.

		 * Even if we are wrong the wost thing that would happen

		 * the cursor would jump but we should not get protocol

		 * de-synchronization.

		/*

		 * Continue with the standard ALPS protocol handling,

		 * but make sure we won't process it as an interleaved

		 * packet again, which may happen if all buttons are

		 * pressed. To avoid this let's reset the 4th bit which

		 * is normally 1.

		/*

		 * We did not any more data in reasonable amount of time.

		 * Validate the last 3 bytes and process as a standard

		 * ALPS packet.

	/*

	 * Check if we are dealing with a bare PS/2 packet, presumably from

	 * a device connected to the external PS/2 port. Because bare PS/2

	 * protocol does not have enough constant bits to self-synchronize

	 * properly we only do this if the device is fully synchronized.

	 * Can not distinguish V8's first byte from PS/2 packet's

 Check for PS/2 packet stuffed in the middle of ALPS packet. */

 Bytes 2 - pktsize should have 0 in the highest bit */

			/*

			 * Some Dell boxes, such as Latitude E6440 or E7440

			 * with closed lid, quite often smash last byte of

			 * otherwise valid packet with 0xff. Given that the

			 * next packet is very likely to be valid let's

			 * report PSMOUSE_FULL_PACKET but not process data,

			 * rather than reporting PSMOUSE_BAD_DATA and

			 * filling the logs.

	/*

	 * The address being read is returned in the first two bytes

	 * of the result. Check that this address matches the expected

	 * address.

/*

 * For DualPoint devices select the device that should respond to

 * subsequent commands. It looks like glidepad is behind stickpointer,

 * I'd thought it would be other way around...

 we may get 3 more bytes, just ignore them */

 Try ALPS magic knock - 4 disable before enable */

	/*

	 * Switch mouse to poll (remote) mode so motion data will not

	 * get in our way

	/*

	 * b0-b11 are valid bits, send sequence is inverse.

	 * e.g. when word = 0x0123, nibble send sequence is 3, 2, 1

 0x0A0 is the command to write the word */

 EC E9 F5 F5 E7 E6 E7 E9 to enter monitor mode */

 EC to exit monitor mode */

 enter monitor mode, to write the register */

 Get status: 0xF5 0xF5 0xF5 0xE9 */

/*

 * Turn touchpad tapping on or off. The sequences are:

 * 0xE9 0xF5 0xF5 0xF3 0x0A to enable,

 * 0xE9 0xF5 0xF5 0xE8 0x00 to disable.

 * My guess that 0xE9 (GetInfo) is here as a sync point.

 * For models that also have stickpointer (DualPoints) its tapping

 * is controlled separately (0xE6 0xE6 0xE6 0xF3 0x14|0x0A) but

 * we don't fiddle with it.

/*

 * alps_poll() - poll the touchpad for current motion packet.

 * Used in resync.

/*

 * Poll the track stick ...

 ALPS needs stream mode, otherwise it won't report any data */

 Must be in passthrough mode when calling this function */

 Enter passthrough mode to let trackpoint enter 6byte raw mode */

/*

 * Enable or disable passthrough mode to the trackstick.

 Must be in command mode when calling this function */

 bit 7: trackstick is present */

	/*

	 * We need to configure trackstick to report data for touchpad in

	 * extended format. And also we need to tell touchpad to expect data

	 * from trackstick in extended format. Without this configuration

	 * trackstick packets sent from touchpad are in basic format which is

	 * different from what we expect.

	/*

	 * E7 report for the trackstick

	 *

	 * There have been reports of failures to seem to trace back

	 * to the above trackstick check failing. When these occur

	 * this E7 report fails, so when that happens we continue

	 * with the assumption that there isn't a trackstick after

	 * all.

		/*

		 * Tell touchpad that trackstick is now in extended mode.

		 * If bit 1 isn't set the packet format is different.

 Set rate and enable data reporting */

	/*

	 * Leaving the touchpad in command mode will essentially render

	 * it unusable until the machine reboots, so exit it here just

	 * to be safe

 sign extend lower 4 bits */

 In 0.1 mm units */

 sign extend upper 4 bits */

 In 0.1 mm units */

 sign extend lower 4 bits */

 sign extend upper 4 bits */

 In 0.1 mm units */

 In 0.1 mm units */

 units / mm */

 units / mm */

 enter absolute mode */

 Must be in command mode when calling this function */

	/*

	 * This sequence changes the output from a 9-byte to an

	 * 8-byte format. All the same data seems to be present,

	 * just in a more compact format.

 Set rate and enable data reporting */

	/*

	 * Leaving the touchpad in command mode will essentially render

	 * it unusable until the machine reboots, so exit it here just

	 * to be safe

 In 0.1 mm units */

 In 0.1 mm units */

 units / mm */

 units / mm */

 For support TrackStick of Thinkpad L/E series */

	/*

	 * Dolphin's sensor line number is not fixed. It can be calculated

	 * by adding the device's register value with DOLPHIN_PROFILE_X/YOFFSET.

	 * Further more, we can get device's x_max and y_max by multiplying

	 * sensor line number with DOLPHIN_COUNT_PER_ELECTRODE.

	 *

	 * e.g. When we get register's sensor_x = 11 & sensor_y = 8,

	 *	real sensor line number X = 11 + 8 = 19, and

	 *	real sensor line number Y = 8 + 1 = 9.

	 *	So, x_max = (19 - 1) * 64 = 1152, and

	 *	    y_max = (9 - 1) * 64 = 512.

 This is dolphin "v1" as empirically defined by florin9doi */

 enter absolute mode */

 T.B.D. Decread noise packet number, delete in the future */

	/*

	 * param[0] contains the trackpoint device variant_id while

	 * param[1] contains the firmware_id. So far all alps

	 * trackpoint-only devices have their variant_ids equal

	 * TP_VARIANT_ALPS and their firmware_ids are in 0x20~0x2f range.

	/*

	 * First try "E6 report".

	 * ALPS should return 0,0,10 or 0,0,100 if no buttons are pressed.

	 * The bits 0-2 of the first byte will be 1s if some buttons are

	 * pressed.

	/*

	 * Now get the "E7" and "EC" reports.  These will uniquely identify

	 * most ALPS touchpads.

 Save Device ID and Firmware version */

	/*

	 * Undo part of setup done for us by psmouse core since touchpad

	 * is not a relative device.

	/*

	 * Now set up our capabilities.

		/*

		 * format of input device name is: "protocol vendor name"

		 * see function psmouse_switch_protocol() in psmouse-base.c

 We are having trouble resyncing ALPS touchpads so disable it for now */

 Allow 2 invalid packets without resetting device */

	/*

	 * Even though we did not allocate psmouse->private we do free

	 * it here.

	/*

	 * ALPS cs19 is a trackpoint-only device, and uses different

	 * protocol than DualPoint ones, so we return -EINVAL here and let

	 * trackpoint.c drive this device. If the trackpoint driver is not

	 * enabled, the device will fall back to a bare PS/2 mouse.

	 * If ps2_command() fails here, we depend on the immediately

	 * followed psmouse_reset() to reset the device to normal state.

	/*

	 * Reset the device to make sure it is fully operational:

	 * on some laptops, like certain Dell Latitudes, we may

	 * fail to properly detect presence of trackstick if device

	 * has not been reset.

		/*

		 * Destroy alps_data structure we allocated earlier since

		 * this was just a "trial run". Otherwise we'll keep it

		 * to be used by alps_init() which has to be called if

		 * we succeed and set_properties is true.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2017 Red Hat, Inc

		/*

		 * Here would be a good place to check if device is actually

		 * present, but it seems that SMBus will not respond unless we

		 * fully reset PS/2 connection.  So cross our fingers, and try

		 * to switch over, hopefully our system will not have too many

		 * "host notify" I2C adapters.

/*

 * This schedules removal of SMBus companion device. We have to do

 * it in a separate tread to avoid deadlocking on psmouse_mutex in

 * case the device has a trackstick (which is also driven by psmouse).

 *

 * Note that this may be racing with i2c adapter removal, but we

 * can't do anything about that: i2c automatically destroys clients

 * attached to an adapter that is being removed. This has to be

 * fixed in i2c core.

 We have our(?) device, stop iterating i2c bus. */

 Bind to already existing adapters right away */

 We have our companion device */

	/*

	 * If we did not create i2c device we will not need platform

	 * data even if we are leaving breadcrumbs.

/*

 * Cypress APA trackpad with I2C interface

 *

 * Author: Dudley Du <dudl@cypress.com>

 * Further cleanup and restructuring by:

 *   Daniel Kurtz <djkurtz@chromium.org>

 *   Benson Leung <bleung@chromium.org>

 *

 * Copyright (C) 2011-2015 Cypress Semiconductor, Inc.

 * Copyright (C) 2011-2012 Google, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive for

 * more details.

 Macro for register map group offset. */

 Unit: us */

/*

 * CYAPA trackpad device states.

 * Used in register 0x00, bit1-0, DeviceStatus field.

 * Other values indicate device is in an abnormal state and must be reset.

	/*

	 * high bits or x/y position value

	 * bit 7 - 4: high 4 bits of x position value

	 * bit 3 - 0: high 4 bits of y position value

 low 8 bits of x position value. */

 low 8 bits of y position value. */

 id range is 1 - 15.  It is incremented with every new touch. */

	/*

	 * bit 0 - 1: device status

	 * bit 3 - 2: power mode

	 * bit 6 - 4: reserved

	 * bit 7: interrupt valid bit

	/*

	 * bit 7 - 4: number of fingers currently touching pad

	 * bit 3: valid data check bit

	 * bit 2: middle mechanism button state if exists

	 * bit 1: right mechanism button state if exists

	 * bit 0: left mechanism button state if exists

 CYAPA reports up to 5 touches per packet. */

 Always be 0xff */

 command code: 0x39 */

 8-byte security key */

 Calculated using bytes 12 - 75 */

 Calculated using bytes 0-76 */

 for byte read/write command */

 for group registers read/write command */

 for register block read/write command */

 register block read/write command in bootloader mode */

 register block read/write command in operational mode */

 maps generic CYAPA_CMD_* code to the I2C equivalent */

 CYAPA_CMD_SOFT_RESET */

 CYAPA_CMD_POWER_MODE */

 CYAPA_CMD_DEV_STATUS */

 CYAPA_CMD_GROUP_DATA */

 CYAPA_CMD_GROUP_CMD */

 CYAPA_CMD_GROUP_QUERY */

 CYAPA_CMD_BL_STATUS */

 CYAPA_CMD_BL_HEAD */

 CYAPA_CMD_BL_CMD */

 CYAPA_CMD_BL_DATA */

 CYAPA_CMD_BL_ALL */

 CYAPA_CMD_BLK_PRODUCT_ID */

 CYAPA_CMD_BLK_HEAD */

 CYAPA_CMD_MAX_BASELINE */

 CYAPA_CMD_MIN_BASELINE */

 CYAPA_CMD_SOFT_RESET */

 CYAPA_CMD_POWER_MODE */

 CYAPA_CMD_DEV_STATUS */

 CYAPA_CMD_GROUP_DATA */

 CYAPA_CMD_GROUP_CMD */

 CYAPA_CMD_GROUP_QUERY */

 CYAPA_CMD_BL_STATUS */

 CYAPA_CMD_BL_HEAD */

 CYAPA_CMD_BL_CMD */

 CYAPA_CMD_BL_DATA */

 CYAPA_CMD_BL_ALL */

 CYAPA_CMD_BLK_PRODUCT_ID */

 CYAPA_CMD_BLK_HEAD */

 CYAPA_CMD_MAX_BASELINE */

 CYAPA_CMD_MIN_BASELINE */

/*

 * cyapa_smbus_read_block - perform smbus block read command

 * @cyapa  - private data structure of the driver

 * @cmd    - the properly encoded smbus command

 * @len    - expected length of smbus command result

 * @values - buffer to store smbus command result

 *

 * Returns negative errno, else the number of bytes written.

 *

 * Note:

 * In trackpad device, the memory block allocated for I2C register map

 * is 256 bytes, so the max read block for I2C bus is 256 bytes.

 read specific block registers command. */

/*

 * Determine the Gen3 trackpad device's current operating state.

 *

 Parse based on Gen3 characteristic registers and bits */

		/*

		 * Normal state after power on or reset,

		 * REG_BL_STATUS == 0x11, firmware image checksum is valid.

		 * REG_BL_STATUS == 0x10, firmware image checksum is invalid.

		/*

		 * Normal state when running in operational mode,

		 * may also not in full power state or

		 * busying in command process.

 Finger number data is valid. */

 Op state when first two registers overwritten with 0x00 */

/*

 * Enter bootloader by soft resetting the device.

 *

 * If device is already in the bootloader, the function just returns.

 * Otherwise, reset the device; after reset, device enters bootloader idle

 * state immediately.

 *

 * Returns:

 *   0        on success

 *   -EAGAIN  device was reset, but is not now in bootloader idle state

 *   < 0      if the device never responds within the timeout

 Already in BL_IDLE. Skipping reset. */

 For some shipset, max waiting time is 1~2s. */

 Wait for bootloader to activate; takes between 2 and 12 seconds */

 Wait for bootloader to switch to idle state; should take < 100ms */

/*

 * Exit bootloader

 *

 * Send bl_exit command, then wait 50 - 100 ms to let device transition to

 * operational mode.  If this is the first time the device's firmware is

 * running, it can take up to 2 seconds to calibrate its sensors.  So, poll

 * the device's new state for up to 2 seconds.

 *

 * Returns:

 *   -EIO    failure while reading from device

 *   -EAGAIN device is stuck in bootloader, b/c it has invalid firmware

 *   0       device is supported and in operational mode

	/*

	 * Wait for bootloader to exit, and operation mode to start.

	 * Normally, this takes at least 50 ms.

	/*

	 * In addition, when a device boots for the first time after being

	 * updated to new firmware, it must first calibrate its sensors, which

	 * can take up to an additional 2 seconds. If the device power is

	 * running low, this may take even longer.

/*

 * Verify the integrity of a CYAPA firmware image file.

 *

 * The firmware image file is 30848 bytes, composed of 482 64-byte blocks.

 *

 * The first 2 blocks are the firmware header.

 * The next 480 blocks are the firmware image.

 *

 * The first two bytes of the header hold the header checksum, computed by

 * summing the other 126 bytes of the header.

 * The last two bytes of the header hold the firmware image checksum, computed

 * by summing the 30720 bytes of the image modulo 0xffff.

 *

 * Both checksums are stored little-endian.

 Firmware must match exact 30848 bytes = 482 64-byte blocks. */

 Verify header block */

 Verify firmware image */

/*

 * Write a |len| byte long buffer |buf| to the device, by chopping it up into a

 * sequence of smaller |CYAPA_CMD_LEN|-length write commands.

 *

 * The data bytes for a write command are prepended with the 1-byte offset

 * of the data relative to the start of |buf|.

/*

 * A firmware block write command writes 64 bytes of data to a single flash

 * page in the device.  The 78-byte block write command has the format:

 *   <0xff> <CMD> <Key> <Start> <Data> <Data-Checksum> <CMD Checksum>

 *

 *  <0xff>  - every command starts with 0xff

 *  <CMD>   - the write command value is 0x39

 *  <Key>   - write commands include an 8-byte key: { 00 01 02 03 04 05 06 07 }

 *  <Block> - Memory Block number (address / 64) (16-bit, big-endian)

 *  <Data>  - 64 bytes of firmware image data

 *  <Data Checksum> - sum of 64 <Data> bytes, modulo 0xff

 *  <CMD Checksum> - sum of 77 bytes, from 0xff to <Data Checksum>

 *

 * Each write command is split into 5 i2c write transactions of up to 16 bytes.

 * Each transaction starts with an i2c register offset: (00, 10, 20, 30, 40).

 Set write command and security key bytes. */

 Wait for write to finish */

 Programming for one block can take about 100ms. */

 Check block write command result status. */

 Ignore WATCHDOG bit and reserved bits. */

 First write data, starting at byte 128 of fw->data */

 Then write checksum */

 max recalibration timeout 2s. */

		/*

		 * For this recalibration, the max time will not exceed 2s.

		 * The average time is approximately 500 - 700 ms, and we

		 * will check the status every 100 - 200ms.

 Try for 30 to 60 ms */

/*

 * cyapa_get_wait_time_for_pwr_cmd

 *

 * Compute the amount of time we need to wait after updating the touchpad

 * power mode. The touchpad needs to consume the incoming power mode set

 * command at the current clock rate.

/*

 * Set device power mode

 *

 * Write to the field to configure power state. Power states include :

 *   Full : Max scans and report rate.

 *   Idle : Report rate set by user specified time.

 *   ButtonOnly : No scans for fingers. When the button is triggered,

 *     a slave interrupt is asserted to notify host to wake up.

 *   Off : Only awake for i2c commands from host. No function for button

 *     or touch sensors.

 *

 * The power_mode command should conform to the following :

 *   Full : 0x3f

 *   Idle : Configurable from 20 to 1000ms. See note below for

 *     cyapa_sleep_time_to_pwr_cmd and cyapa_pwr_cmd_to_sleep_time

 *   ButtonOnly : 0x01

 *   Off : 0x00

 *

 * Device power mode can only be set when device is in operational mode.

	/*

	 * Return early if the power mode to set is the same as the current

	 * one.

	/*

	 * Wait for the newly set power command to go in at the previous

	 * clock speed (scanrate) used by the touchpad firmware. Not

	 * doing so before issuing the next command may result in errors

	 * depending on the command's content.

 Try to polling in 120Hz, read may fail, just ignore it. */

	/*

	 * This value will be updated again when entered application mode.

	 * If TP failed to enter application mode, this fw version values

	 * can be used as a reference.

	 * This firmware version valid when fw image checksum is valid.

/*

 * Check if device is operational.

 *

 * An operational device is responding, has exited bootloader, and has

 * firmware supported by this driver.

 *

 * Returns:

 *   -EBUSY  no device or in bootloader

 *   -EIO    failure while reading from device

 *   -EAGAIN device is still in bootloader

 *           if ->state = CYAPA_STATE_BL_IDLE, device has invalid firmware

 *   -EINVAL device is in operational mode, but not supported by this driver

 *   0       device is supported

 Try to get firmware version in bootloader mode. */

		/*

		 * Reading query data before going back to the full mode

		 * may cause problems, so we set the power mode first here.

 Only support firmware protocol gen3 */

 Only support product ID starting with CYTRA */

/*

 * Return false, do not continue process

 * Return true, continue process.

 Not gen3 irq command response, skip for continue. */

	/*

	 * Driver in detecting or other interface function processing,

	 * so, stop cyapa_gen3_irq_handler to continue process to

	 * avoid unwanted to error detecting and processing.

	 *

	 * And also, avoid the periodically asserted interrupts to be processed

	 * as touch inputs when gen3 failed to launch into application mode,

	 * which will cause gen3 stays in bootloader mode.

 Note: touch->id range is 1 to 15; slots are 0 to 14. */

/*

 * This function will be called in the cyapa_gen3_set_power_mode function,

 * and it's known that it may failed in some situation after the set power

 * mode command was sent. So this function is aimed to avoid the knwon

 * and unwanted output I2C and data parse error messages.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PXA930 track ball mouse driver

 *

 * Copyright (C) 2007 Marvell International Ltd.

 * 2008-02-28: Yong Yao <yaoyong@marvell.com>

 *             initial version

 Trackball Controller Register Definitions */

 Memory Mapped Register */

	/* According to the spec software must read TBCNTR twice:

	 * if the read value is the same, the reading is valid

 For TBCR, we need to wait for a while to make sure it has been modified. */

 According to spec, need to write the filters of x,y to 0xf first! */

 According to spec, set TBCR_TBRST first, before clearing it! */

 Held in reset, gate the 32-KHz input clock off */

 held the module in reset, will be enabled in open() */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Elan I2C/SMBus Touchpad driver - I2C interface

 *

 * Copyright (c) 2013 ELAN Microelectronics Corp.

 *

 * Author: ææ¿ç¶­ (Duson Lin) <dusonlin@emc.com.tw>

 *

 * Based on cyapa driver:

 * copyright (c) 2011-2012 Cypress Semiconductor, Inc.

 * copyright (c) 2011-2012 Google, Inc.

 *

 * Trademarks are the property of their respective owners.

 Elan i2c commands */

 Wait for the device to reset */

 get reset acknowledgement 0000 */

	/*

	 * Not all versions of firmware implement "get pattern" command.

	 * When this command is not implemented the device will respond

	 * with 0xFF 0xFF, which we will treat as "old" pattern 0.

 Get FW in which mode	(IAP_MODE/MAIN_MODE)  */

 Reset IC */

 Set flash key*/

 Wait for F/W IAP initialization */

 Check if we are in IAP mode or not */

 Set flash key again */

 Wait for F/W IAP initialization */

 read back to check we actually enabled successfully. */

 recode checksum at last two bytes */

 Wait for F/W to update one page ROM data. */

/*

 * Cypress APA trackpad with I2C interface

 *

 * Author: Dudley Du <dudl@cypress.com>

 * Further cleanup and restructuring by:

 *   Daniel Kurtz <djkurtz@chromium.org>

 *   Benson Leung <bleung@chromium.org>

 *

 * Copyright (C) 2011-2015 Cypress Semiconductor, Inc.

 * Copyright (C) 2011-2012 Google, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive for

 * more details.

 Returns 0 on success, else negative errno on failure. */

/**

 * cyapa_i2c_write - Execute i2c block data write operation

 * @cyapa: Handle to this driver

 * @reg: Offset of the data to written in the register map

 * @len: number of bytes to write

 * @values: Data to be written

 *

 * Return negative errno code on error; return zero when success.

/*

 * Query device for its current operating state.

 The i2c address of gen4 and gen5 trackpad device must be even. */

	/*

	 * Get trackpad status by reading 3 registers starting from 0.

	 * If the device is in the bootloader, this will be BL_HEAD.

	 * If the device is in operation mode, this will be the DATA regs.

	 *

	/*

	 * On smbus systems in OP mode, the i2c_reg_read will fail with

	 * -ETIMEDOUT.  In this case, try again using the smbus equivalent

	 * command.  This should return a BL_HEAD indicating CYAPA_STATE_OP.

	/*

	 * Detect trackpad protocol based on characteristic registers and bits.

 For old Gen5 trackpads detecting. */

		/*

		 * Write 0x00 0x00 to trackpad device to force update its

		 * status, then redo the detection again.

/*

 * Poll device for its status in a loop, waiting up to timeout for a response.

 *

 * When the device switches state, it usually takes ~300 ms.

 * However, when running a new firmware image, the device must calibrate its

 * sensors, which can take as long as 2 seconds.

 *

 * Note: The timeout has granularity of the polling rate, which is 100 ms.

 *

 * Returns:

 *   0 when the device eventually responds with a valid non-busy state.

 *   -ETIMEDOUT if device never responds (too many -EAGAIN)

 *   -EAGAIN    if bootload is busy, or unknown state.

 *   < 0        other errors

/*

 * Check if device is operational.

 *

 * An operational device is responding, has exited bootloader, and has

 * firmware supported by this driver.

 *

 * Returns:

 *   -ENODEV no device

 *   -EBUSY  no device or in bootloader

 *   -EIO    failure while reading from device

 *   -ETIMEDOUT timeout failure for bus idle or bus no response

 *   -EAGAIN device is still in bootloader

 *           if ->state = CYAPA_STATE_BL_IDLE, device has invalid firmware

 *   -EINVAL device is in operational mode, but not supported by this driver

 *   0       device is supported

/*

 * Returns 0 on device detected, negative errno on no device detected.

 * And when the device is detected and operational, it will be reset to

 * full power active mode automatically.

		/*

		 * though failed to set active power mode,

		 * but still may be able to work in lower scan rate

		 * when in operational mode.

 Means any product in eventcomm. */

 Finger position */

		/*

		 * Orientation is the angle between the vertical axis and

		 * the major axis of the contact ellipse.

		 * The range is -127 to 127.

		 * the positive direction is clockwise form the vertical axis.

		 * If the ellipse of contact degenerates into a circle,

		 * orientation is reported as 0.

		 *

		 * Also, for Gen5 trackpad the accurate of this orientation

		 * value is value + (-30 ~ 30).

 Handle pointer emulation and unused slots in core */

 Register the device in input subsystem */

		/*

		 * When input is NULL, TP must be in deep sleep mode.

		 * In this mode, later non-power I2C command will always failed

		 * if not bring it out of deep sleep mode firstly,

		 * so must command TP to active mode here.

 Gen3 always using polling mode for command. */

/*

 * cyapa_sleep_time_to_pwr_cmd and cyapa_pwr_cmd_to_sleep_time

 *

 * These are helper functions that convert to and from integer idle

 * times and register settings to write to the PowerMode register.

 * The trackpad supports between 20ms to 1000ms scan intervals.

 * The time will be increased in increments of 10ms from 20ms to 100ms.

 * From 100ms to 1000ms, time will be increased in increments of 20ms.

 *

 * When Idle_Time < 100, the format to convert Idle_Time to Idle_Command is:

 *   Idle_Command = Idle Time / 10;

 * When Idle_Time >= 100, the format to convert Idle_Time to Idle_Command is:

 *   Idle_Command = Idle Time / 20 + 5;

 0 on driver initialize and detected successfully, negative on failure. */

	/*

	 * Set to hard code default, they will be updated with trackpad set

	 * default values after probe and initialized.

 ops.initialize() is aimed to prepare for module communications. */

 Power down the device until we need it. */

 Avoid command failures when TP was in OFF state. */

 Reset to power OFF state to save power when no user open. */

		/*

		 * Make sure only enable runtime PM when device is

		 * in operational mode and input->users > 0.

 Interrupt event can be caused by host command to trackpad device. */

		/*

		 * Interrupt event maybe from trackpad device input reporting.

			/*

			 * Still in probing or in firmware image

			 * updating or reading.

			/*

			 * Apply runtime power management to touch report event

			 * except the events caused by the command responses.

			 * Note:

			 * It will introduce about 20~40 ms additional delay

			 * time in receiving for first valid touch report data.

			 * The time is used to execute device runtime resume

			 * process.

/*

 **************************************************************

 * sysfs interface

 **************************************************************

 CONFIG_PM_SLEEP */

	/*

	 * When the suspend scanrate is changed, pm_runtime_get to resume

	 * a potentially suspended device, update to the new pwr_cmd

	 * and then pm_runtime_put to suspend into the new power mode.

 runtime is enabled until device is operational and opened. */

 CONFIG_PM */

	/*

	 * Resume the potentially suspended device because doing FW

	 * update on a device not in the FULL mode has a chance to

	 * fail.

 Require IRQ support for firmware update commands. */

		/*

		 * Force the input device to be registered after the firmware

		 * image is updated, so if the corresponding parameters updated

		 * in the new firmware image can taken effect immediately.

		/*

		 * Whatever, do reinitialize to try to recover TP state to

		 * previous state just as it entered fw update entrance.

	/*

	 * Re-detect trackpad device states because firmware update process

	 * will reset trackpad device into bootloader mode.

 Still running in bootloader mode. */

 Still running in bootloader mode. */

 Normal valid state. */

 Make sure there is something at this address */

 i2c isn't supported, use smbus */

 Disable IRQ until the device is opened */

	/*

	 * Register the device in the input subsystem when it's operational.

	 * Otherwise, keep in this driver, so it can be be recovered or updated

	 * through the sysfs mode and update_fw interfaces by user or apps.

	/*

	 * Runtime PM is enable only when device is in operational mode and

	 * users in use, so need check it before disable it to

	 * avoid unbalance warning.

	/*

	 * Set trackpad device to idle mode if wakeup is allowed,

	 * otherwise turn off.

	/*

	 * Disable proximity interrupt when system idle, want true touch to

	 * wake the system.

	/*

	 * Update device states and runtime PM states.

	 * Re-Enable proximity interrupt after enter operational mode.

 Gen3 trackpad with 0x67 I2C address. */

 Gen5 trackpad with 0x24 I2C address. */

 Gen6 trackpad with 0x24 I2C address. */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for simulating a mouse on GPIO lines.

 *

 * Copyright (C) 2007 Atmel Corporation

 * Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>

/**

 * struct gpio_mouse

 * @scan_ms: the scan interval in milliseconds.

 * @up: GPIO line for up value.

 * @down: GPIO line for down value.

 * @left: GPIO line for left value.

 * @right: GPIO line for right value.

 * @bleft: GPIO line for left button.

 * @bmiddle: GPIO line for middle button.

 * @bright: GPIO line for right button.

 *

 * This struct must be added to the platform_device in the board code.

 * It is used by the gpio_mouse driver to setup GPIO lines and to

 * calculate mouse movement.

/*

 * Timer function which is run every scan_ms ms when the device is opened.

 * The dev input variable is set to the the input_dev pointer.

 Assign some default scanning time */

 work with hotplug and coldplug */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Synaptics NavPoint (PXA27x SSP/SPI) driver.

 *

 * Copyright (C) 2012 Paul Parsons <lost.distance@yahoo.com>

/*

 * Synaptics Modular Embedded Protocol: Module Packet Format.

 * Module header byte 2:0 = Length (# bytes that follow)

 * Module header byte 4:3 = Control

 * Module header byte 7:5 = Module Address

/*

 * Initialization values for SSCR0_x, SSCR1_x, SSSR_x.

 TIM = 1; No TUR interrupts */

 RIM = 1; No ROR interrupts */

 SSE = 1; SSP enabled */

 FRF = 0; Motorola SPI */

 DSS = 15; Data size = 16-bit */

 SCFR = 1; SSPSCLK only during transfers */

 SCLKDIR = 1; Slave mode */

 SFRMDIR = 1; Slave mode */

 RWOT = 1; Receive without transmit mode */

 RFT = 0; Receive FIFO threshold = 1 */

 SPH = 1; SSPSCLK inactive 0.5 + 1 cycles */

 RIE = 1; Receive FIFO interrupt enabled */

 BCE = 1; Clear BCE */

 TUR = 1; Clear TUR */

 EOC = 1; Clear EOC */

 TINT = 1; Clear TINT */

 PINT = 1; Clear PINT */

 ROR = 1; Clear ROR */

/*

 * MEP Query $22: Touchpad Coordinate Range Query is not supported by

 * the NavPoint module, so sampled values provide the default limits.

 Garbage (packet?) between reset and Hello packet */

 Module 0, NULL packet */

 Module 0, Absolute packet */

 Module 0, Hello packet */

 SSCR0_SSE written last */

 Wait until SSP port is ready for slave clock operations */

 HaRET does not disable devices before jumping into Linux */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Apple USB BCM5974 (Macbook Air and Penryn Macbook Pro) multitouch driver

 *

 * Copyright (C) 2008	   Henrik Rydberg (rydberg@euromail.se)

 * Copyright (C) 2015      John Horan (knasher@gmail.com)

 *

 * The USB initialization and package decoding was made by

 * Scott Shawcroft as part of the touchd user-space driver project:

 * Copyright (C) 2008	   Scott Shawcroft (scott.shawcroft@gmail.com)

 *

 * The BCM5974 driver is based on the appletouch driver:

 * Copyright (C) 2001-2004 Greg Kroah-Hartman (greg@kroah.com)

 * Copyright (C) 2005      Johannes Berg (johannes@sipsolutions.net)

 * Copyright (C) 2005	   Stelian Pop (stelian@popies.net)

 * Copyright (C) 2005	   Frank Arnold (frank@scirocco-5v-turbo.de)

 * Copyright (C) 2005	   Peter Osterlund (petero2@telia.com)

 * Copyright (C) 2005	   Michael Hanselmann (linux-kernel@hansmi.ch)

 * Copyright (C) 2006	   Nicolas Boichat (nicolas@boichat.ch)

 MacbookAir, aka wellspring */

 MacbookProPenryn, aka wellspring2 */

 Macbook5,1 (unibody), aka wellspring3 */

 MacbookAir3,2 (unibody), aka wellspring5 */

 MacbookAir3,1 (unibody), aka wellspring4 */

 Macbook8 (unibody, March 2011) */

 MacbookAir4,1 (unibody, July 2011) */

 MacbookAir4,2 (unibody, July 2011) */

 Macbook8,2 (unibody) */

 MacbookPro10,1 (unibody, June 2012) */

 MacbookPro10,2 (unibody, October 2012) */

 MacbookAir6,2 (unibody, June 2013) */

 MacbookPro12,1 (2015) */

 table of devices that work with this driver */

 MacbookAir1.1 */

 MacbookProPenryn */

 Macbook5,1 */

 MacbookAir3,2 */

 MacbookAir3,1 */

 MacbookPro8 */

 MacbookAir4,1 */

 MacbookAir4,2 */

 MacbookPro8,2 */

 MacbookPro10,1 */

 MacbookPro10,2 */

 MacbookAir6,2 */

 MacbookPro12,1 */

 Terminating entry */

 button data structure */

 constant */

 left button */

 relative x coordinate */

 relative y coordinate */

 trackpad header types */

 plain trackpad */

 button integrated in trackpad */

 additional header fields since June 2013 */

 additional header field for pressure data */

 trackpad finger data offsets, le16-aligned */

 trackpad button data offsets */

 list of device capability bits */

 trackpad finger data block size */

 offset from header to finger struct */

 usb control message mode switch data */

 Wellspring initialization constants */

 trackpad finger structure, le16-aligned */

 zero when switching track finger */

 absolute x coodinate */

 absolute y coodinate */

 relative x coodinate */

 relative y coodinate */

 tool area, major axis */

 tool area, minor axis */

 16384 when point, else 15 bit angle */

 touch area, major axis */

 touch area, minor axis */

 zeros */

 pressure on forcetouch touchpad */

 one finger: varies, more fingers: constant */

 trackpad finger data size, empirically at least ten fingers */

 device-specific parameters */

 signal-to-noise ratio */

 device minimum reading */

 device maximum reading */

 device-specific configuration */

 the product id of this device */

 device capability bitmask */

 the endpoint of the button interface */

 data length of the button interface */

 the endpoint of the trackpad interface */

 type of trackpad interface */

 bytes in header block */

 data length of the trackpad interface */

 offset to button data */

 bytes in single finger block */

 offset from header to finger struct */

 usb control message length */

 usb control message value */

 usb control message index */

 usb control message mode switch index */

 usb control message mode switch on */

 usb control message mode switch off */

 finger pressure limits */

 finger width limits */

 horizontal limits */

 vertical limits */

 orientation limits */

 logical device structure */

 usb device */

 our interface */

 input dev */

 device configuration */

 serialize access to open/suspend */

 1: opened, 0: closed */

 button usb request block */

 button transferred data */

 trackpad usb request block */

 trackpad transferred data */

 finger index data */

 position array */

 slot assignments */

 trackpad finger block data, le16-aligned */

 logical signal quality */

 pressure signal-to-noise ratio */

 width signal-to-noise ratio */

 coordinate signal-to-noise ratio */

 orientation signal-to-noise ratio */

 device constants */

 return the device-specific configuration by device */

 convert 16-bit little endian to signed integer */

 setup which logical events to report */

 for synaptics only */

 finger touch area */

 finger approach area */

 finger orientation */

 finger position */

 report button data as logical button state */

 report trackpad data as logical trackpad state */

 later types report button events via integrated button only */

 Type 3 does not require a mode switch */

 read configuration */

 apply the mode switch */

 write configuration */

 control response ignored */

/*

 * The Wellspring trackpad, like many recent Apple trackpads, share

 * the usb device with the keyboard. Since keyboards are usually

 * handled by the HID system, the device ends up being handled by two

 * modules. Setting up the device therefore becomes slightly

 * complicated. To enable multitouch features, a mode switch is

 * required, which is usually applied via the control interface of the

 * device.  It can be argued where this switch should take place. In

 * some drivers, like appletouch, the switch is made during

 * probe. However, the hid module may also alter the state of the

 * device, resulting in trackpad malfunction under certain

 * circumstances. To get around this problem, there is at least one

 * example that utilizes the USB_QUIRK_RESET_RESUME quirk in order to

 * receive a reset_resume request rather than the normal resume.

 * Since the implementation of reset_resume is equal to mode switch

 * plus start_traffic, it seems easier to always do the switch when

 * starting traffic on the device.

/*

 * The code below implements open/close and manual suspend/resume.

 * All functions may be called in random order.

 *

 * Opening a suspended device fails with EACCES - permission denied.

 *

 * Failing a resume leaves the device resumed but closed.

 find the product index */

 allocate memory for our device state and initialize it */

 setup urbs */

 create bcm5974 device */

 report driver capabilities via the version field */

 save our data pointer in this interface device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *	SEGA Dreamcast mouse driver

 *	Based on drivers/usb/usbmouse.c

 *

 *	Copyright (c) Yaegashi Takeshi, 2001

 *	Copyright (c) Adrian McMenamin, 2008 - 2009

 allow the mouse to be used */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Fujitsu B-series Lifebook PS/2 TouchScreen driver

 *

 * Copyright (c) 2005 Vojtech Pavlik <vojtech@suse.cz>

 * Copyright (c) 2005 Kenan Esau <kenan.esau@conan.de>

 *

 * TouchScreen detection, absolute mode setting and packet layout is taken from

 * Harald Hoyer's description of the device.

 Relative device */

 FLORA-ie 55mi */

 LifeBook B */

 LifeBook B */

 Lifebook B */

 Lifebook B-2130 */

 Lifebook B213x/B2150 */

 Zephyr */

 Panasonic CF-18 */

 Panasonic CF-28 */

 Panasonic CF-29 */

 Panasonic CF-72 */

 Lifebook B142 */

 report data */

	/*

	 * Enable absolute output -- ps2_command fails always but if

	 * you leave this call out the touchscreen will never send

	 * absolute coordinates

 Clear default capabilities */

	/*

	 * Use packet size = 3 even when using 6-byte protocol because

	 * that's what POLL will return on Lifebooks (according to spec).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Virtual PS/2 Mouse on VMware and QEMU hypervisors.

 *

 * Copyright (C) 2014, VMware, Inc. All Rights Reserved.

 *

 * Twin device code is hugely inspired by the ALPS driver.

 * Authors:

 *   Dmitry Torokhov <dmitry.torokhov@gmail.com>

 *   Thomas Hellstrom <thellstrom@vmware.com>

/*

 * Main commands supported by the vmmouse hypervisor port.

/*

 * Subcommands for VMMOUSE_PROTO_CMD_ABSPOINTER_COMMAND

/*

 * VMMouse Restrict command

/**

 * struct vmmouse_data - private data structure for the vmmouse driver

 *

 * @abs_dev: "Absolute" device used to report absolute mouse movement.

 * @phys: Physical path for the absolute device.

 * @dev_name: Name attribute name for the absolute device.

/*

 * Hypervisor-specific bi-directional communication channel

 * implementing the vmmouse protocol. Should never execute on

 * bare metal hardware.

/**

 * vmmouse_report_button - report button state on the correct input device

 *

 * @psmouse:  Pointer to the psmouse struct

 * @abs_dev:  The absolute input device

 * @rel_dev:  The relative input device

 * @pref_dev: The preferred device for reporting

 * @code:     Button code

 * @value:    Button value

 *

 * Report @value and @code on @pref_dev, unless the button is already

 * pressed on the other device, in which case the state is reported on that

 * device.

/**

 * vmmouse_report_events - process events on the vmmouse communications channel

 *

 * @psmouse: Pointer to the psmouse struct

 *

 * This function pulls events from the vmmouse communications channel and

 * reports them on the correct (absolute or relative) input device. When the

 * communications channel is drained, or if we've processed more than 255

 * psmouse commands, the function returns PSMOUSE_FULL_PACKET. If there is a

 * host- or synchronization error, the function returns PSMOUSE_BAD_DATA in

 * the hope that the caller will reset the communications channel.

 See if we have motion data. */

			/*

			 * After a few attempts this will result in

			 * reconnect.

 Now get it */

		/*

		 * And report what we've got. Prefer to report button

		 * events on the same device where we report motion events.

		 * This doesn't work well with the mouse wheel, though. See

		 * below. Ideally we would want to report that on the

		 * preferred device as well.

 Xorg seems to ignore wheel events on absolute devices */

/**

 * vmmouse_process_byte - process data on the ps/2 channel

 *

 * @psmouse: Pointer to the psmouse struct

 *

 * When the ps/2 channel indicates that there is vmmouse data available,

 * call vmmouse channel processing. Otherwise, continue to accept bytes. If

 * there is a synchronization or communication data error, return

 * PSMOUSE_BAD_DATA in the hope that the caller will reset the mouse.

/**

 * vmmouse_disable - Disable vmmouse

 *

 * @psmouse: Pointer to the psmouse struct

 *

 * Tries to disable vmmouse mode.

/**

 * vmmouse_enable - Enable vmmouse and request absolute mode.

 *

 * @psmouse: Pointer to the psmouse struct

 *

 * Tries to enable vmmouse mode. Performs basic checks and requests

 * absolute vmmouse mode.

 * Returns 0 on success, -ENODEV on failure.

	/*

	 * Try enabling the device. If successful, we should be able to

	 * read valid version ID back from it.

	/*

	 * See if version ID can be retrieved.

 single item */,

	/*

	 * Restrict ioport access, if possible.

/*

 * Array of supported hypervisors.

/**

 * vmmouse_check_hypervisor - Check if we're running on a supported hypervisor

/**

 * vmmouse_detect - Probe whether vmmouse is available

 *

 * @psmouse: Pointer to the psmouse struct

 * @set_properties: Whether to set psmouse name and vendor

 *

 * Returns 0 if vmmouse channel is available. Negative error code if not.

 Check if the device is present */

/**

 * vmmouse_disconnect - Take down vmmouse driver

 *

 * @psmouse: Pointer to the psmouse struct

 *

 * Takes down vmmouse driver and frees resources set up in vmmouse_init().

/**

 * vmmouse_reconnect - Reset the ps/2 - and vmmouse connections

 *

 * @psmouse: Pointer to the psmouse struct

 *

 * Attempts to reset the mouse connections. Returns 0 on success and

 * -1 on failure.

/**

 * vmmouse_init - Initialize the vmmouse driver

 *

 * @psmouse: Pointer to the psmouse struct

 *

 * Requests the device and tries to enable vmmouse mode.

 * If successful, sets up the input device for relative movement events.

 * It also allocates another input device and sets it up for absolute motion

 * events. Returns 0 on success and -1 on failure.

 Set up and register absolute device */

 Mimic name setup for relative device in psmouse-base.c */

 Set absolute device capabilities */

 Add wheel capability to the relative device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Atari mouse driver for Linux/m68k

 *

 *  Copyright (c) 2005 Michael Schmitz

 *

 *  Based on:

 *  Amiga mouse driver for Linux/m68k

 *

 *  Copyright (c) 2000-2002 Vojtech Pavlik

/*

 * The low level init and interrupt stuff is handled in arch/mm68k/atari/atakeyb.c

 * (the keyboard ACIA also handles the mouse and joystick data, and the keyboard

 * interrupt is shared with the MIDI ACIA so MIDI data also get handled there).

 * This driver only deals with handing key events off to the input layer.

 *

 * Largely based on the old:

 *

 * Atari Mouse Driver for Linux

 * by Robert de Vries (robert@and.nl) 19Jul93

 *

 * 16 Nov 1994 Andreas Schwab

 * Compatibility with busmouse

 * Support for three button mouse (shamelessly stolen from MiNT)

 * third button wired to one of the joystick directions on joystick 1

 *

 * 1996/02/11 Andreas Schwab

 * Module support

 * Allow multiple open's

 *

 * Converted to use new generic busmouse code.  5 Apr 1998

 *   Russell King <rmk@arm.uk.linux.org>

 only relative events get here */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	Teemu Rantanen		Derrick Cole

 *	Peter Cervasio		Christoph Niemann

 *	Philip Blundell		Russell King

 *	Bob Harris

/*

 * Inport (ATI XL and Microsoft) busmouse driver for Linux

/*

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Synaptics TouchPad PS/2 mouse driver

 *

 *   2003 Dmitry Torokhov <dtor@mail.ru>

 *     Added support for pass-through port. Special thanks to Peter Berg Larsen

 *     for explaining various Synaptics quirks.

 *

 *   2003 Peter Osterlund <petero2@telia.com>

 *     Ported to 2.5 input device infrastructure.

 *

 *   Copyright (C) 2001 Stefan Gmeiner <riddlebox@freesurf.ch>

 *     start merging tpconfig and gpm code to a xfree-input module

 *     adding some changes and extensions (ex. 3rd and 4th button)

 *

 *   Copyright (c) 1997 C. Scott Ananian <cananian@alumni.priceton.edu>

 *   Copyright (c) 1998-2000 Bruce Kalk <kall@compass.com>

 *     code for the special synaptics commands (from the tpconfig-source)

 *

 * Trademarks are the property of their respective owners.

/*

 * The x/y limits are taken from the Synaptics TouchPad interfacing Guide,

 * section 2.3.2, which says that they should be valid regardless of the

 * actual size of the sensor.

 * Note that newer firmware allows querying device for maximum useable

 * coordinates.

 Size in bits of absolute position values reported by the hardware */

/*

 * These values should represent the absolute maximum value that will

 * be reported for a positive position value. Some Synaptics firmware

 * uses this value to indicate a finger near the edge of the touchpad

 * whose precise position cannot be determined.

 *

 * At least one touchpad is known to report positions in excess of this

 * value which are actually negative values truncated to the 13-bit

 * reporting range. These values have never been observed to be lower

 * than 8184 (i.e. -8), so we treat all values greater than 8176 as

 * negative and any other value as positive.

 maximum ABS_MT_POSITION displacement (in mm) */

/*****************************************************************************

 *	Stuff we need even when we do not want native Synaptics support

/*

 * Set the synaptics touchpad mode byte by special commands

 reset touchpad back to relative mode, gestures enabled */

 This list has been kindly provided by Synaptics. */

 Helix */

 T431s, L440, L540, T540, W540, X1 Carbon 2nd */

 X240 */

 T440 */

 X1 Carbon 2nd */

 T440s */

 Yoga */

 S540 */

 Edge E431 */

 Edge E531 */

 L440 */

 Edge E440/E540 */

 all of the topbuttonpad_pnp_ids are valid, we just add some extras */

 X1 Carbon 3 */

 X250 */

 Yoga 11e */

 W541 */

 P50 */

 T560 */

 T470s */

 T470s */

 T480 */

 X1 Carbon Gen 5 (2017) - Elan/ALPS trackpoint */

 X1 Carbon G5 (Elantech) */

 X1 Carbon 6 */

 X1 Carbon 6 */

 T480 */

 X280 */

 X280 -> ALPS trackpoint */

 X1 Extreme Gen 1 / P1 Gen 1 */

 T580 */

 X1 Extreme Gen 2 / P1 Gen 2 */

 T450s */

 L470  */

 E480 */

 E580 */

 T14 Gen 1 */

 HP EliteBook 840 G4 */

 HP 15-ay000 */

 HP Spectre X360 13-w013dx */

 HP Envy 13-ad105ng */

/*

 * Send a command to the synaptics touchpad by special commands

/*

 * Identify Touchpad

 * See also the SYN_ID_* macros

/*

 * Read the model-id bytes from the touchpad

 * see also SYN_MODEL_* macros

/*

 * Read the firmware id from the touchpad

/*

 * Read the board id and the "More Extended Queries" from the touchpad

 * The board id is encoded in the "QUERY MODES" response

 firmwares prior 7.5 have no board_id encoded */

/*

 * Read the capability-bits from the touchpad

 * see also the SYN_CAP_* macros

	/*

	 * Older firmwares had submodel ID fixed to 0x47

	/*

	 * Unless capExtended is set the rest of the flags should be ignored

			/*

			 * if nExtBtn is greater than 8 it should be considered

			 * invalid and treated as 0

/*

 * Read touchpad resolution and maximum reported coordinates

 * Resolution is left zero if touchpad does not support the query

 x resolution in units/mm */

 y resolution in units/mm */

	     /*

	      * Firmware v8.1 does not report proper number of extended

	      * capabilities, but has been proven to report correct min

	      * coordinates.

 CONFIG_MOUSE_PS2_SYNAPTICS || CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS */

/*****************************************************************************

 *	Synaptics communications functions

/*

 * Synaptics touchpads report the y coordinate from bottom to top, which is

 * opposite from what userspace expects.

 * This function is used to invert y before reporting.

/*

 * Apply quirk(s) if the hardware matches

/*****************************************************************************

 *	Synaptics pass-through PS/2 port support

 indicates that we want pass-through port */

 adjust the touchpad to child's choice of protocol */

/*****************************************************************************

 *	Functions to interpret the absolute mode packets

 Gesture packet: (x, y, z) half resolution */

 AGM-CONTACT packet: we are only interested in the count */

			/*

			 * ForcePads, like Clickpads, use middle button

			 * bits to report primary button clicks.

			 * Unfortunately they report primary button not

			 * only when user presses on the pad above certain

			 * threshold, but also when there are more than one

			 * finger on the touchpad, which interferes with

			 * out multi-finger gestures.

 No contacts */

				/*

				 * Single-finger touch with pressure above

				 * the threshold. If pressure stays long

				 * enough, we'll start reporting primary

				 * button. We rely on the device continuing

				 * sending data even if finger does not

				 * move.

			/*

			 * Clickpad's button is transmitted as middle button,

			 * however, since it is primary button, we will report

			 * it as BTN_LEFT.

	/*

	 * Convert wrap-around values to negative. (X|Y)_MAX_POSITIVE

	 * is used by some firmware to indicate a finger at the edge of

	 * the touchpad whose precise position cannot be determined, so

	 * convert these values to the maximum axis value.

 Bug in FW 8.1 & 8.2, buttons are reported only when ExtBit is 1 */

	/*

	 * This generation of touchpads has the trackstick buttons

	 * physically wired to the touchpad. Re-route them through

	 * the pass-through interface.

 The trackstick expects at most 3 buttons */

 Don't use active slot count to generate BTN_TOOL events. */

 Send the number of fingers reported by touchpad itself. */

	/*

	 * Update mt_state using the new finger count and current mt_state.

 Send resulting input events to user space */

 Advanced gesture mode also sends multi finger data */

/*

 *  called for each full received packet from the touchpad

				/*

				 * SYN_MODEL_PEN(info->model_id): even if

				 * the device supports pen, we treat it as

				 * a single finger.

	/* Post events

	 * BTN_TOUCH has to be first as mousedev relies on it when doing

	 * absolute -> relative conversion

 Full packet received */

/*****************************************************************************

 *	Driver initialization/cleanup functions

 Reset default psmouse capabilities */

 Things that apply to both modes */

 Clickpads report only left button */

 Relative mode */

 Absolute mode */

 Image sensors can report per-contact pressure */

 Image sensors can signal 4 and 5 finger clicks */

		/*

		 * Profile sensor in CR-48 tracks contacts reasonably well,

		 * other non-image sensors with AGM use semi-mt.

		/*

		 * For semi-mt devices we send ABS_X/Y ourselves instead of

		 * input_mt_report_pointer_emulation. But

		 * input_mt_init_slots() resets the fuzz to 0, leading to a

		 * filtered ABS_MT_POSITION_X but an unfiltered ABS_X

		 * position. Let's re-initialize ABS_X/Y here.

	/*

	 * We might have left a breadcrumb when trying to

	 * set up SMbus companion.

			/*

			 * On some boxes, right after resuming, the touchpad

			 * needs some time to finish initializing (I assume

			 * it needs time to calibrate) and start responding

			 * to Synaptics-specific queries, so let's wait a

			 * bit.

 Toshiba Satellite */

 Toshiba Dynabook */

 Toshiba Portege M300 */

 Toshiba Portege M300 */

 OLPC XO-1 or XO-1.5 */

 Cr-48 Chromebook (Codename Mario) */

	/*

	 * Unfortunately ForcePad capability is not exported over PS/2,

	 * so we have to resort to checking PNP IDs.

	/*

	 * Encode touchpad model so that it can be used to set

	 * input device->id.version and be visible to userspace.

	 * Because version is __u16 we have to drop something.

	 * Hardware info bits seem to be good candidates as they

	 * are documented to be for Synaptics corp. internal use.

 Relative mode follows standard PS/2 mouse protocol */

 Synaptics can usually stay in sync without extra help */

	/*

	 * Toshiba's KBC seems to have trouble handling data from

	 * Synaptics at full rate.  Switch to a lower rate (roughly

	 * the same rate as a standard PS/2 mouse).

	/*

	 * The OLPC XO has issues with Synaptics' absolute mode; the constant

	 * packet spew overloads the EC such that key presses on the keyboard

	 * are missed.  Given that, don't even attempt to use Absolute mode.

	 * Relative mode seems to work just fine.

 CONFIG_MOUSE_PS2_SYNAPTICS */

 CONFIG_MOUSE_PS2_SYNAPTICS */

/*

 * The newest Synaptics device can use a secondary bus (called InterTouch) which

 * provides a better bandwidth and allow a better control of the touchpads.

 * This is used to decide if we need to use this bus or not.

/*

 * synaptics_setup_intertouch - called once the PS/2 devices are enumerated

 * and decides to instantiate a SMBus InterTouch device.

 CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS */

 CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS */

 Forcepads need F21, which is not ready */

		/*

		 * Not using any flavor of Synaptics support, so clean up

		 * SMbus breadcrumbs, if any.

 CONFIG_MOUSE_PS2_SYNAPTICS || CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS */

 CONFIG_MOUSE_PS2_SYNAPTICS || CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * USB Synaptics device driver

 *

 *  Copyright (c) 2002 Rob Miller (rob@inpharmatica . co . uk)

 *  Copyright (c) 2003 Ron Lee (ron@debian.org)

 *	cPad driver for kernel 2.4

 *

 *  Copyright (c) 2004 Jan Steinhoff (cpad@jan-steinhoff . de)

 *  Copyright (c) 2004 Ron Lee (ron@debian.org)

 *	rewritten for kernel 2.6

 *

 *  cPad display character device part is not included. It can be found at

 *  http://jan-steinhoff.de/linux/synaptics-usb.html

 *

 * Bases on:	usb_skeleton.c v2.2 by Greg Kroah-Hartman

 *		drivers/hid/usbhid/usbmouse.c by Vojtech Pavlik

 *		drivers/input/mouse/synaptics.c by Peter Osterlund

 *

 * Trademarks are the property of their respective owners.

/*

 * There are three different types of Synaptics USB devices: Touchpads,

 * touchsticks (or trackpoints), and touchscreens. Touchpads are well supported

 * by this driver, touchstick support has not been tested much yet, and

 * touchscreens have not been tested at all.

 *

 * Up to three alternate settings are possible:

 *	setting 0: one int endpoint for relative movement (used by usbhid.ko)

 *	setting 1: one int endpoint for absolute finger position

 *	setting 2 (cPad only): one int endpoint for absolute finger position and

 *		   two bulk endpoints for the display (in/out)

 * This driver uses setting 1.

 Synaptics USB TouchPad */

 Integrated USB TouchPad */

 Synaptics cPad */

 Synaptics TouchScreen */

 Synaptics USB Styk */

 Synaptics USB WheelPad */

 Composite USB TouchPad */

 Wireless TouchPad */

 DisplayPad */

 For cPad */

 Composite device (TP + stick) */

 serialize access to open/suspend */

 input device related data structures */

 characteristics of the device */

 pen, pretend its a finger */

	/*

	 * Post events

	 * BTN_TOUCH has to be first as mousedev relies on it when doing

	 * absolute -> relative conversion

 Check our status in case we need to bail out early. */

 Device went away so don't keep trying to read from it. */

 we found our interrupt in endpoint */

		/*

		 * This is a combo device, we need to set proper

		 * capability, depending on the interface.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Elan I2C/SMBus Touchpad driver

 *

 * Copyright (c) 2013 ELAN Microelectronics Corp.

 *

 * Author: ææ¿ç¶­ (Duson Lin) <dusonlin@emc.com.tw>

 * Author: KT Liao <kt.liao@emc.com.tw>

 * Version: 1.6.3

 *

 * Based on cyapa driver:

 * copyright (c) 2011-2012 Cypress Semiconductor, Inc.

 * copyright (c) 2011-2012 Google, Inc.

 *

 * Trademarks are the property of their respective owners.

 quirks to control the device */

 The main device structure */

 trackpoint input node */

 for fw update */

 Various quirks */

 unknown ic type clear value */

 Attempt to power the chip back up */

 ASUS EeeBook X205TA */

	/*

	 * Some ASUS devices were shipped with firmware that requires

	 * touchpads to be woken up first, before attempting to switch

	 * them into absolute reporting mode.

	/*

	 * pattern <= 0x01:

	 *	(value from firmware) * 10 + 790 = dpi

	 * else

	 *	((value from firmware) + 3) * 100 = dpi

	/*

	 * We also have to convert dpi to dots/mm (*10/254 to avoid floating

	 * point).

 size is the maximum + 1 */

/*

 **********************************************************

 * IAP firmware updater related routines

 **********************************************************

 Wait WDT reset and power on reset */

 Reinitialize TP after fw is updated */

/*

 *******************************************************************

 * SYSFS attributes

 *******************************************************************

 Look for a firmware with the product id appended. */

 Firmware file must match signature data */

 Wait 250ms before checking if calibration has completed. */

 calibration done */

/*

 ******************************************************************

 * Elan isr functions

 ******************************************************************

			/*

			 * To avoid treating large finger as palm, let's reduce

			 * the width x and y per trace.

	/*

	 * When device is connected to i2c bus, when all IAP page writes

	 * complete, the driver will receive interrupt and must read

	 * 0000 to confirm that IAP is finished.

/*

 ******************************************************************

 * Elan initialization functions

 ******************************************************************

 Set up ST parameters */

 And MT parameters */

 Make sure there is something at this address */

 Initialize the touchpad. */

 Set up input device properties based on queried parameters. */

	/*

	 * Platform code (ACPI, DTS) should normally set up interrupt

	 * for us, but in case it did not let's fall back to using falling

	 * edge to be compatible with older Chromebooks.

	/*

	 * Systems using device tree should set up wakeup via DTS,

	 * the rest will configure device as wakeup source by default.

	/*

	 * We are taking the mutex to make sure sysfs operations are

	 * complete before we attempt to bring the device into low[er]

	 * power mode.

 Enable wake from IRQ */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	James Banks		Matthew Dillon

 *	David Giller		Nathan Laredo

 *	Linus Torvalds		Johan Myreen

 *	Cliff Matthews		Philip Blundell

 *	Russell King

/*

 * Logitech Bus Mouse Driver for Linux

/*

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Logitech PS/2++ mouse driver

 *

 * Copyright (c) 1999-2003 Vojtech Pavlik <vojtech@suse.cz>

 * Copyright (c) 2003 Eric Wong <eric@yhbt.net>

 Logitech mouse types */

 Logitech mouse features */

/*

 * Process a PS2++ or PS2T++ packet.

/*

 * Full packet accumulated, process it

 Logitech extended packet */

 Mouse extra info */

 buttons 4, 5, 6, 7, 8, 9, 10 info */

 TouchPad extra info */

 Standard PS/2 motion data */

/*

 * ps2pp_cmd() sends a PS2++ command, sliced into two bit

 * pieces through the SETRES command. This is needed to send extended

 * commands to mice on notebooks that try to understand the PS/2 protocol

 * Ugly.

/*

 * SmartScroll / CruiseControl for some newer Logitech mice Defaults to

 * enabled if we do nothing to it. Of course I put this in because I want it

 * disabled :P

 * 1 - enabled (if previously disabled, also default)

 * 0 - disabled

/*

 * Support 800 dpi resolution _only_ if the user wants it (there are good

 * reasons to not use it even if the mouse supports it, and of course there are

 * also good reasons to use it, let the user decide).

 Simple 2-button mouse */

 MX1000 */

 Cordless MouseMan Wheel */

 MX700 */

 MX3100 receiver */

 T-CH11: TrackMan Marble */

 TrackMan FX */

 TrackMan with wheel */

 MX510 */

 MX300 reports task button as side */

 MX500 */

 MX310 */

/*

 * Set up input device's properties based on the detected mouse model.

		/*

		 * Set name to "Mouse" only when using PS2++,

		 * otherwise let other protocols define suitable

		 * name

/*

 * Logitech magic init. Detect whether the mouse is a Logitech one

 * and its exact model and try turning on extended protocol for ones

 * that support it.

/*

 * Do Logitech PS2++ / PS2T++ magic init.

 Touch Pad 3 */

 Unprotect RAM */

 Enable features */

 Enable PS2++ */

 Magic knock */

/*

 * Cypress APA trackpad with I2C interface

 *

 * Author: Dudley Du <dudl@cypress.com>

 *

 * Copyright (C) 2014-2015 Cypress Semiconductor, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive for

 * more details.

 Macro of TSG firmware image */

 Macro of PIP interface */

 Special for old Gen5 TP. */

 Macro of Gen5 */

 Unit: ms */

 Unit: ms */

 The offset only valid for retrieve PWC and panel scan commands */

	/*

	 * Bit 7 - 3: reserved

	 * Bit 2 - 0: touch type;

	 *            0 : standard finger;

	 *            1 : proximity (Start supported in Gen5 TP).

	 *            2 : finger hover (defined, but not used yet.)

	 *            3 - 15 : reserved.

	/*

	 * Bit 7: indicates touch liftoff status.

	 *		0 : touch is currently on the panel.

	 *		1 : touch record indicates a liftoff.

	 * Bit 6 - 5: indicates an event associated with this touch instance

	 *		0 : no event

	 *		1 : touchdown

	 *		2 : significant displacement (> active distance)

	 *		3 : liftoff (record reports last known coordinates)

	 * Bit 4 - 0: An arbitrary ID tag associated with a finger

	 *		to allow tracking a touch as it moves around the panel.

 Bit 7 - 0 of X-axis coordinate of the touch in pixel. */

 Bit 15 - 8 of X-axis coordinate of the touch in pixel. */

 Bit 7 - 0 of Y-axis coordinate of the touch in pixel. */

 Bit 15 - 8 of Y-axis coordinate of the touch in pixel. */

	/*

	 * The meaning of this value is different when touch_type is different.

	 * For standard finger type:

	 *	Touch intensity in counts, pressure value.

	 * For proximity type (Start supported in Gen5 TP):

	 *	The distance, in surface units, between the contact and

	 *	the surface.

	/*

	 * The length of the major axis of the ellipse of contact between

	 * the finger and the panel (ABS_MT_TOUCH_MAJOR).

	/*

	 * The length of the minor axis of the ellipse of contact between

	 * the finger and the panel (ABS_MT_TOUCH_MINOR).

	/*

	 * The length of the major axis of the approaching tool.

	 * (ABS_MT_WIDTH_MAJOR)

	/*

	 * The length of the minor axis of the approaching tool.

	 * (ABS_MT_WIDTH_MINOR)

	/*

	 * The angle between the panel vertical axis and

	 * the major axis of the contact ellipse. This value is an 8-bit

	 * signed integer. The range is -127 to +127 (corresponding to

	 * -90 degree and +90 degree respectively).

	 * The positive direction is clockwise from the vertical axis.

	 * If the ellipse of contact degenerates into a circle,

	 * orientation is reported as 0.

 Unit: bytes, including itself. */

 Reserved as 0. */

 Reserved as 0. */

 The number of bytes of flash data contained in this record. */

 The flash program data. */

 Start of packet, must be 01h */

 Size of data parameter start from data[0] */

 End of packet, must be 17h */

 Output report register address, must be 0004h */

 Size of packet not including output report register address */

 Bootloader output report id, must be 40h */

 Reserved, must be 0 */

 Command data variable based on commands */

 Initiate bootload command data structure. */

 Key must be "A5h 01h 02h 03h FFh FEh FDh 5Ah" */

 Padding data must be 0 */

 CRC starts at offset of 60 */

 Bootload program and verify row command data structure */

 Output report register address, must be 0004h */

 Size of packet not including output report register address */

 Application output report id, must be 2Fh */

 Reserved, must be 0 */

	/*

	 * Bit 7: reserved, must be 0.

	 * Bit 6-0: command code.

 Parameter data variable based on cmd_code */

 Application get/set parameter command data structure */

 Return negative errno, or else the number of bytes read. */

/*

 * Return a negative errno code else zero on success.

 Indicates the pip->pm_stage is not valid. */

/*

 * This function is aimed to dump all not read data in Gen5 trackpad

 * before send any command, otherwise, the interrupt line will be blocked.

 max 7 pending data before command response data */

		/*

		 * Depending on testing in cyapa driver, there are max 5 "02 00"

		 * packets between two valid buffered data report in firmware.

		 * So in order to dump all buffered data out and

		 * make interrupt line release for reassert again,

		 * we must set the empty_count check value bigger than 5 to

		 * make it work. Otherwise, in some situation,

		 * the interrupt line may unable to reactive again,

		 * which will cause trackpad device unable to

		 * report data any more.

		 * for example, it may happen in EFT and ESD testing.

 Should not happen */

 Application or bootloader launch data polled out. */

 Response found, success. */

 Response found, success. */

 Parse the data and report it if it's valid. */

 Wait for interrupt to set ready completion */

 Wait for interrupt to indicate command is completed. */

 Commands must be serialized. */

 Application command */

 Bootloader command */

 Send command data, wait and read output response data's length. */

			/*

			 * For some old version, there was no interrupt for

			 * the command response data, so need to poll here

			 * to try to get the response data.

 Bootloader input report id 30h */

 Unsupported command code */

 Correct command response received */

	/*

	 * After reset or power on, trackpad device always sets to 0x00 0x00

	 * to indicate a reset or power on event.

 Check hid descriptor. */

 BL mode HID Descriptor */

 APP mode HID Descriptor */

	/*

	 * Dump all buffered data firstly for the situation

	 * when the trackpad is just power on the cyapa go here.

 Normal state of Gen5 with no data to response */

 Read description from trackpad device */

 BL mode HID Description read */

 APP mode HID Description read */

 Should not happen!!! */

	/* 0x20 0x00 0xF7 is Gen5 Application HID Description Header;

	 * 0x20 0x00 0xFF is Gen5 Bootloader HID Description Header.

	 *

	 * Must read HID Description content through out,

	 * otherwise Gen5 trackpad cannot response next command

	 * or report any touch or button data.

			/*

			 * BL mode HID Description has been previously

			 * read out.

			/*

			 * APP mode HID Description has been previously

			 * read out.

 BL mode HID Description read. */

 APP mode HID Description read. */

 Should not happen!!! */

	/*

	 * Must read report data through out,

	 * otherwise Gen5 trackpad cannot response next command

	 * or report any touch or button data.

 Previous command has read the data through out. */

 Gen5 BL command response data detected */

 Gen5 APP command response data detected */

 Gen5 BL command response data detected */

 Gen5 APP command response data detected */

 Should not happen!!! */

 Parse based on Gen5 characteristic registers and bits */

 0xEE 0x00 0xF6 is Gen5 APP report description header. */

 0x1D 0x00 0xFE is Gen5 BL report descriptor header. */

		/*

		 * Must read the content (e.g.: report description and so on)

		 * from trackpad device throughout. Otherwise,

		 * Gen5 trackpad cannot response to next command or

		 * report any touch or button data later.

 Try to dump all buffered report data before any send command. */

 8 key bytes and 128 bytes block size */

 APP_INTEGRITY row is always the last row block */

 Exit bootloader failed for some reason. */

 Already in bootloader mode, Skipping exit. */

 Try to dump all buffered report data before any send command. */

	/*

	 * Send bootloader enter command to trackpad device,

	 * after enter bootloader, the response data is two bytes of 0x00 0x00.

 Gen5 without proximity support. */

 Verify the firmware image not miss-used for Gen5 and Gen6. */

	/*

	 * APP_INTEGRITY row is always the last row block,

	 * and the row id must be 0x01ff.

 Verify app_integrity crc */

 Verify application image CRC. */

 Don't include 2 bytes register address */

 1 (Flash Array ID) + 2 (Flash Row ID) + 128 (flash data) */

	/*

	 * The last flash row 0x01ff has been written through bl_initiate

	 * command, so DO NOT write flash 0x01ff to trackpad device.

	/*

	 * Don't include unused parameter value bytes and

	 * 2 bytes register address.

 Don't include 2 bytes register address */

		/*

		 * Assume TP in deep sleep mode when driver is loaded,

		 * avoid driver unload and reload command IO issue caused by TP

		 * has been set into deep sleep mode when unloading.

 Has in correct power mode state, early return. */

	/*

	 * When trackpad in power off mode, it cannot change to other power

	 * state directly, must be wake up from sleep firstly, then

	 * continue to do next power sate change.

		/*

		 * Continue to change power mode even failed to set

		 * interval time, it won't affect the power mode change.

		 * except the sleep interval time is not correct.

		/*

		 * Disable pip report for a little time, firmware will

		 * re-enable it automatically. It's used to fix the issue

		 * that trackpad unable to report signal to wake system up

		 * in the special situation that system is in suspending, and

		 * at the same time, user touch trackpad to wake system up.

		 * This function can avoid the data to be buffered when system

		 * is suspending which may cause interrupt line unable to be

		 * asserted again.

 Try to dump all buffered data before doing command. */

 Try to dump all buffered data when resuming scanning. */

 Try to dump all buffered data before doing command. */

 Try to dump all buffered data when suspending scanning. */

 Try to dump all buffered data before doing command. */

 1. Suspend Scanning*/

 2. Do mutual capacitance fine calibrate. */

 3. Do self capacitance calibrate. */

 4. Resume Scanning*/

 Should not happen, just as default case here. */

/*

 * Read all the global mutual or self idac data or mutual or self local PWC

 * data based on the @idac_data_type.

 * If the input value of @data_size is 0, then means read global mutual or

 * self idac data. For read global mutual idac data, @idac_max, @idac_min and

 * @idac_ave are in order used to return the max value of global mutual idac

 * data, the min value of global mutual idac and the average value of the

 * global mutual idac data. For read global self idac data, @idac_max is used

 * to return the global self cap idac data in Rx direction, @idac_min is used

 * to return the global self cap idac data in Tx direction. @idac_ave is not

 * used.

 * If the input value of @data_size is not 0, than means read the mutual or

 * self local PWC data. The @idac_max, @idac_min and @idac_ave are used to

 * return the max, min and average value of the mutual or self local PWC data.

 * Note, in order to read mutual local PWC data, must read invoke this function

 * to read the mutual global idac data firstly to set the correct Rx number

 * value, otherwise, the read mutual idac and PWC data may not correct.

		/*

		 * Read global idac values firstly.

		 * Currently, no idac data exceed 4 bytes.

 Calculate the start offset in bytes of local PWC data. */

 Rx's self global idac data. */

 Tx's self global idac data. */

 Read mutual global idac or local mutual/self PWC data. */

				/*

				 * The value gap between global and local mutual

				 * idac data must bigger than 50%.

				 * Normally, global value bigger than 50,

				 * local values less than 10.

 Max bytes can transfer one time. */

 Assume max element size is 4 currently. */

 1. Suspend Scanning*/

 2.  Read global and local mutual IDAC data. */

 3.  Read global and local self IDAC data. */

 4. Execute panel scan. It must be executed before read data. */

 5. Retrieve panel scan, mutual cap raw data. */

 6. Retrieve panel scan, self cap raw data. */

 7. Retrieve panel scan, mutual cap diffcount raw data. */

 8. Retrieve panel scan, self cap diffcount raw data. */

 9. Retrieve panel scan, mutual cap baseline raw data. */

 10. Retrieve panel scan, self cap baseline raw data. */

 11. Resume Scanning*/

 12. Output data strings */

 Check the report id and command code */

 Gen5 firmware that does not support proximity. */

 Try to update trackpad product information. */

		/*

		 * If trackpad device in deep sleep mode,

		 * the app command will fail.

		 * So always try to reset trackpad device to full active when

		 * the device state is required.

 By default, the trackpad proximity function is enabled. */

 Get trackpad product information. */

 Only support product ID starting with CYTRA */

/*

 * Return false, do not continue process

 * Return true, continue process.

 Polling command response data. */

		/*

		 * Read out all none command response data.

		 * these output data may caused by user put finger on

		 * trackpad when host waiting the command response.

			/*

			 * Cover the Gen5 V1 firmware issue.

			 * The issue is no interrupt would be asserted from

			 * trackpad device to host for the command response

			 * ready event. Because when there was a finger touch

			 * on trackpad device, and the firmware output queue

			 * won't be empty (always with touch report data), so

			 * the interrupt signal won't be asserted again until

			 * the output queue was previous emptied.

			 * This issue would happen in the scenario that

			 * user always has his/her fingers touched on the

			 * trackpad device during system booting/rebooting.

 Invalid length or internal reset happened. */

 Idle, no data for report. */

 Idle, no data for report. */

		/*

		 * Device wake event from deep sleep mode for touch.

		 * This interrupt event is used to wake system up.

		 *

		 * Note:

		 * It will introduce about 20~40 ms additional delay

		 * time in receiving for first valid touch report data.

		 * The time is used to execute device runtime resume

		 * process.

 Running in BL mode or unknown response data read. */

 Invalid report data length for finger packet. */

 Invalid report data length of button packet. */

 Invalid report data length of proximity packet. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Elantech Touchpad driver (v6)

 *

 * Copyright (C) 2007-2009 Arjan Opmeer <arjan@opmeer.net>

 *

 * Trademarks are the property of their respective owners.

/*

 * Send a Synaptics style sliced query command

/*

 * V3 and later support this fast command

/*

 * A retrying version of ps2_command

/*

 * Send an Elantech style special command to read 3 bytes from a register

/*

 * Send an Elantech style special command to write a register with a parameter

/*

 * Send an Elantech style special command to read a value from a register

/*

 * Send an Elantech style special command to write a register with a value

/*

 * Dump a complete mouse movement packet to the syslog

/*

 * Advertise INPUT_PROP_BUTTONPAD for clickpads. The testing of bit 12 in

 * fw_version for this is based on the following fw_version & caps table:

 *

 * Laptop-model:           fw_version:     caps:           buttons:

 * Acer S3                 0x461f00        10, 13, 0e      clickpad

 * Acer S7-392             0x581f01        50, 17, 0d      clickpad

 * Acer V5-131             0x461f02        01, 16, 0c      clickpad

 * Acer V5-551             0x461f00        ?               clickpad

 * Asus K53SV              0x450f01        78, 15, 0c      2 hw buttons

 * Asus G46VW              0x460f02        00, 18, 0c      2 hw buttons

 * Asus G750JX             0x360f00        00, 16, 0c      2 hw buttons

 * Asus TP500LN            0x381f17        10, 14, 0e      clickpad

 * Asus X750JN             0x381f17        10, 14, 0e      clickpad

 * Asus UX31               0x361f00        20, 15, 0e      clickpad

 * Asus UX32VD             0x361f02        00, 15, 0e      clickpad

 * Avatar AVIU-145A2       0x361f00        ?               clickpad

 * Fujitsu CELSIUS H760    0x570f02        40, 14, 0c      3 hw buttons (**)

 * Fujitsu CELSIUS H780    0x5d0f02        41, 16, 0d      3 hw buttons (**)

 * Fujitsu LIFEBOOK E544   0x470f00        d0, 12, 09      2 hw buttons

 * Fujitsu LIFEBOOK E546   0x470f00        50, 12, 09      2 hw buttons

 * Fujitsu LIFEBOOK E547   0x470f00        50, 12, 09      2 hw buttons

 * Fujitsu LIFEBOOK E554   0x570f01        40, 14, 0c      2 hw buttons

 * Fujitsu LIFEBOOK E557   0x570f01        40, 14, 0c      2 hw buttons

 * Fujitsu T725            0x470f01        05, 12, 09      2 hw buttons

 * Fujitsu H730            0x570f00        c0, 14, 0c      3 hw buttons (**)

 * Gigabyte U2442          0x450f01        58, 17, 0c      2 hw buttons

 * Lenovo L430             0x350f02        b9, 15, 0c      2 hw buttons (*)

 * Lenovo L530             0x350f02        b9, 15, 0c      2 hw buttons (*)

 * Samsung NF210           0x150b00        78, 14, 0a      2 hw buttons

 * Samsung NP770Z5E        0x575f01        10, 15, 0f      clickpad

 * Samsung NP700Z5B        0x361f06        21, 15, 0f      clickpad

 * Samsung NP900X3E-A02    0x575f03        ?               clickpad

 * Samsung NP-QX410        0x851b00        19, 14, 0c      clickpad

 * Samsung RC512           0x450f00        08, 15, 0c      2 hw buttons

 * Samsung RF710           0x450f00        ?               2 hw buttons

 * System76 Pangolin       0x250f01        ?               2 hw buttons

 * (*) + 3 trackpoint buttons

 * (**) + 0 trackpoint buttons

 * Note: Lenovo L430 and Lenovo L530 have the same fw_version/caps

/*

 * Interpret complete data packets and report absolute mode input events for

 * hardware version 1. (4 byte packets)

		/*

		 * byte 0:  D   U  p1  p2   1  p3   R   L

		 * byte 1:  f   0  th  tw  x9  x8  y9  y8

		/*

		 * byte 0: n1  n0  p2  p1   1  p3   R   L

		 * byte 1:  0   0   0   0  x9  x8  y9  y8

 Discard first 2 reports of one finger, bogus */

	/*

	 * byte 2: x7  x6  x5  x4  x3  x2  x1  x0

	 * byte 3: y7  y6  y5  y4  y3  y2  y1  y0

 rocker up */

 rocker down */

 x1 < x2 and y1 < y2 when two fingers, x = y = 0 when not pressed */

/*

 * Interpret complete data packets and report absolute mode input events for

 * hardware version 2. (6 byte packets)

 byte 0: n1  n0   .   .   .   .   R   L */

		/*

		 * Same as one finger, except report of more than 3 fingers:

		 * byte 3:  n4  .   w1  w0   .   .   .   .

		/*

		 * byte 1:  .   .   .   .  x11 x10 x9  x8

		 * byte 2: x7  x6  x5  x4  x4  x2  x1  x0

		/*

		 * byte 4:  .   .   .   .  y11 y10 y9  y8

		 * byte 5: y7  y6  y5  y4  y3  y2  y1  y0

		/*

		 * The coordinate of each finger is reported separately

		 * with a lower resolution for two finger touches:

		 * byte 0:  .   .  ay8 ax8  .   .   .   .

		 * byte 1: ax7 ax6 ax5 ax4 ax3 ax2 ax1 ax0

 byte 2: ay7 ay6 ay5 ay4 ay3 ay2 ay1 ay0 */

		/*

		 * byte 3:  .   .  by8 bx8  .   .   .   .

		 * byte 4: bx7 bx6 bx5 bx4 bx3 bx2 bx1 bx0

 byte 5: by7 by8 by5 by4 by3 by2 by1 by0 */

 Unknown so just report sensible values */

	/*

	 * byte 0:  0   0  sx  sy   0   M   R   L

	 * byte 1:~sx   0   0   0   0   0   0   0

	 * byte 2:~sy   0   0   0   0   0   0   0

	 * byte 3:  0   0 ~sy ~sx   0   1   1   0

	 * byte 4: x7  x6  x5  x4  x3  x2  x1  x0

	 * byte 5: y7  y6  y5  y4  y3  y2  y1  y0

	 *

	 * x and y are written in two's complement spread

	 * over 9 bits with sx/sy the relative top bit and

	 * x7..x0 and y7..y0 the lower bits.

	 * The sign of y is opposite to what the input driver

	 * expects for a relative movement

		/*

		 * This firmware misreport coordinates for trackpoint

		 * occasionally. Discard packets outside of [-127, 127] range

		 * to prevent cursor jumps.

 Dump unexpected packet sequences if debug=1 (default) */

/*

 * Interpret complete data packets and report absolute mode input events for

 * hardware version 3. (12 byte packets for two fingers)

 byte 0: n1  n0   .   .   .   .   R   L */

		/*

		 * byte 1:  .   .   .   .  x11 x10 x9  x8

		 * byte 2: x7  x6  x5  x4  x4  x2  x1  x0

		/*

		 * byte 4:  .   .   .   .  y11 y10 y9  y8

		 * byte 5: y7  y6  y5  y4  y3  y2  y1  y0

			/*

			 * byte 1:   .    .    .    .  ax11 ax10 ax9  ax8

			 * byte 2: ax7  ax6  ax5  ax4  ax3  ax2  ax1  ax0

			/*

			 * byte 4:   .    .    .    .  ay11 ay10 ay9  ay8

			 * byte 5: ay7  ay6  ay5  ay4  ay3  ay2  ay1  ay0

			/*

			 * wait for next packet

 packet_type == PACKET_V3_TAIL */

 For clickpads map both buttons to BTN_LEFT */

 For clickpads map both buttons to BTN_LEFT */

 notify finger state change */

 report this for backwards compatibility */

	/*

	 * Motion packets give us the delta of x, y values of specific fingers,

	 * but in two's complement. Let the compiler do the conversion for us.

	 * Also _enlarge_ the numbers to int, in case of overflow.

 impossible to get here */

 Parity bits are placed differently */

 byte 0:  D   U  p1  p2   1  p3   R   L */

 byte 0: n1  n0  p2  p1   1  p3   R   L */

        /*

         * When we encounter packet that matches this exactly, it means the

         * hardware is in debounce status. Just ignore the whole packet.

	/*

	 * V2 hardware has two flavors. Older ones that do not report pressure,

	 * and newer ones that reports pressure and width. With newer ones, all

	 * packets (1, 2, 3 finger touch) have the same constant bits. With

	 * older ones, 1/3 finger touch packets and 2 finger touch packets

	 * have different constant bits.

	 * With all three cases, if the constant bits are not exactly what I

	 * expected, I consider them invalid.

/*

 * We check the constant bits to determine what packet type we get,

 * so packet checking is mandatory for v3 and later hardware.

	/*

	 * check debounce first, it has the same signature in byte 0

	 * and byte 3 as PACKET_V3_HEAD.

	/*

	 * If the hardware flag 'crc_enabled' is set the packets have

	 * different signatures.

 This represents the version of IC body. */

	/*

	 * Sanity check based on the constant bits of a packet.

	 * The constant bits change depending on the value of

	 * the hardware flag 'crc_enabled' and the version of

	 * the IC body, but are the same for every packet,

	 * regardless of the type.

/*

 * Process byte stream from mouse and handle complete packets

 ignore debounce */

 ignore debounce */

/*

 * This writes the reg_07 value again to the hardware at the end of every

 * set_rate call because the register loses its value. reg_07 allows setting

 * absolute mode on v4 hardware

/*

 * Put the touchpad into absolute mode

 Windows driver values */

 0x8a */

 0x00 */

 v4 has no reg 0x10 to read */

		/*

		 * Read back reg 0x10. For hardware version 1 we must make

		 * sure the absolute mode bit is set. For hardware version 2

		 * the touchpad is probably initializing and not ready until

		 * we read back the value we just wrote.

/*

 * (value from firmware) * 10 + 790 = dpi

 * we also have to convert dpi to dots/mm (*10/254 to avoid floating point)

/*

 * Some hw_version 4 models do have a middle button

 Fujitsu H730 has a middle button */

 Fujitsu H760 also has a middle button */

 Fujitsu H780 also has a middle button */

/*

 * Set the appropriate event bits for the input subsystem

 Rocker button */

 For X to recognize me as touchpad. */

		/*

		 * range of pressure and width is the same as v2,

		 * report ABS_PRESSURE, ABS_TOOL_WIDTH for compatibility.

 Multitouch capable pad, up to 5 fingers. */

		/*

		 * The firmware reports how many trace lines the finger spans,

		 * convert to surface unit as Protocol-B requires.

/*

 * Display a register value by reading a sysfs entry

/*

 * Write a register value by writing a sysfs entry

 Do we need to preserve some bits for version 2 hardware too? */

 Force absolute mode always on */

 Force 4 byte mode always on */

	/*

	 * Some hw_version >= 4 models have a revision higher then 20. Meaning

	 * that param[2] may be 10 or 20, skip the rates check for these.

/*

 * Use magic knock to detect Elantech touchpad

	/*

	 * Report this in case there are Elantech models that use a different

	 * set of magic numbers

	/*

	 * Query touchpad's firmware version and see if it reports known

	 * value to avoid mis-detection. Logitech mice are known to respond

	 * to Elantech magic knock and there might be more.

/*

 * Clean up sysfs entries when disconnecting

	/*

	 * We might have left a breadcrumb when trying to

	 * set up SMbus companion.

/*

 * Put the touchpad back into absolute mode when reconnecting

/*

 * Some hw_version 4 models do not work with crc_disabled

 Fujitsu H730 does not work with crc_enabled == 0 */

 Fujitsu H760 does not work with crc_enabled == 0 */

 Fujitsu LIFEBOOK E544  does not work with crc_enabled == 0 */

 Fujitsu LIFEBOOK E546  does not work with crc_enabled == 0 */

 Fujitsu LIFEBOOK E547 does not work with crc_enabled == 0 */

 Fujitsu LIFEBOOK E554  does not work with crc_enabled == 0 */

 Fujitsu LIFEBOOK E556 does not work with crc_enabled == 0 */

 Fujitsu LIFEBOOK E557 does not work with crc_enabled == 0 */

 Fujitsu LIFEBOOK U745 does not work with crc_enabled == 0 */

/*

 * Some hw_version 3 models go into error state when we try to set

 * bit 3 and/or bit 1 of r10.

 Gigabyte U2442 */

/*

 * Change Report id 0x5E to 0x5F.

/*

 * determine hardware version and set some properties according to it.

 This represents the version of IC body. */

 Early version of Elan touchpads doesn't obey the rule. */

 Get information pattern for hw_version 4 */

 decide which send_cmd we're gonna use early */

 Turn on packet checking by default */

	/*

	 * This firmware suffers from misreporting coordinates when

	 * a touch action starts causing the mouse cursor or scrolled page

	 * to jump. Enable a workaround.

 For now show extra debug information */

	/*

	 * The signatures of v3 and v4 packets change depending on the

	 * value of this hardware flag.

 Enable real hardware resolution on hw_version 3 ? */

	/*

	 * Do the version query again so we can store the result

		/*

		 * This module has a bug which makes absolute mode

		 * unusable, so let's abort so we'll be using standard

		 * PS/2 protocol.

 The MSB indicates the presence of the trackpoint */

		/*

		 * This module has a bug which makes trackpoint in SMBus

		 * mode return invalid data unless trackpoint is switched

		 * from using 0x5e reports to 0x5f. If we are not able to

		 * make the switch, let's abort initialization so we'll be

		 * using standard PS/2 protocol.

 query range information */

 column number of traces */

 row number of traces */

 check for the middle button: DMI matching or new v4 firmwares */

/*

 * The newest Elantech device can use a secondary bus (over SMBus) which

 * provides a better bandwidth and allow a better control of the touchpads.

 * This is used to decide if we need to use this bus or not.

	/*

	 * These are known to not be working properly as bits are missing

	 * in elan_i2c.

/*

 * elantech_setup_smbus - called once the PS/2 devices are enumerated

 * and decides to instantiate a SMBus InterTouch device.

		/*

		 * New ICs are enabled by default, unless mentioned in

		 * i2c_blacklist_pnp_ids.

		 * Old ICs are up to the user to decide.

 expected case */

 CONFIG_MOUSE_PS2_ELANTECH_SMBUS */

/*

 * Initialize the touchpad and create sysfs entries

 CONFIG_MOUSE_PS2_ELANTECH_SMBUS */

		/*

		 * Not using any flavor of Elantech support, so clean up

		 * SMbus breadcrumbs, if any.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PS/2 mouse driver

 *

 * Copyright (c) 1999-2002 Vojtech Pavlik

 * Copyright (c) 2003-2004 Dmitry Torokhov

/*

 * psmouse_mutex protects all operations changing state of mouse

 * (connecting, disconnecting, changing rate or resolution via

 * sysfs). We could use a per-device semaphore but since there

 * rarely more than one PS/2 mouse connected and since semaphore

 * is taken in "slow" paths it is not worth it.

/*

 * psmouse_process_byte() analyzes the PS/2 data stream and reports

 * relevant events to the input module once full packet has arrived.

 Full packet accumulated, process it */

 IntelliMouse has scroll wheel */

 Scroll wheel and buttons on IntelliMouse Explorer */

 vertical scroll on IntelliMouse Explorer 4.0 */

 horizontal scroll on IntelliMouse Explorer 4.0 */

			/*

			 * Some A4Tech mice have two scroll wheels, with first

			 * one reporting +/-1 in the lower nibble, and second

			 * one reporting +/-2.

 Report scroll buttons on NetMice */

 Extra buttons on Genius NewNet 3D */

 Extra button on ThinkingMouse */

		/*

		 * Without this bit of weirdness moving up gives wildly

		 * high Y changes.

		/*

		 * Cortron PS2 Trackball reports SIDE button in the

		 * 4th bit of the first byte.

 Generic PS/2 Mouse */

/*

 * __psmouse_set_state() sets new psmouse state and resets all flags.

/*

 * psmouse_set_state() sets new psmouse state and resets all flags and

 * counters while holding serio lock so fighting with interrupt handler

 * is not a concern.

/*

 * psmouse_handle_byte() processes one byte of the input data stream

 * by calling corresponding protocol handler.

/*

 * psmouse_interrupt() handles incoming characters, either passing them

 * for normal processing or gathering them as command response.

 Check if this is a new device announcement (0xAA 0x00) */

 Not a new device, try processing first byte normally */

	/*

	 * See if we need to force resync because mouse was idle for

	 * too long.

/*

 * psmouse_reset() resets the mouse into power-on state.

/*

 * Here we set the mouse resolution.

/*

 * Here we set the mouse report rate.

/*

 * Here we set the mouse scaling.

/*

 * psmouse_poll() - default poll handler. Everyone except for ALPS uses it.

/*

 * psmouse_matches_pnp_id - check if psmouse matches one of the passed in ids.

/*

 * Genius NetMouse magic init.

/*

 * IntelliMouse magic init.

/*

 * Try IntelliMouse/Explorer magic init.

 Magic to enable horizontal scrolling on IntelliMouse 4.0 */

/*

 * Kensington ThinkingMouse / ExpertMouse magic init.

/*

 * Bare PS/2 protocol "detection". Always succeeds.

		/*

		 * We have no way of figuring true number of buttons so let's

		 * assume that the device has 3.

/*

 * Cortron PS/2 protocol detection. There's no special way to detect it, so it

 * must be forced by sysfs protocol writing.

/*

 * Apply default settings to the psmouse structure. Most of them will

 * be overridden by individual protocol initialization routines.

			/*

			 * We detected device, but init failed. Adjust

			 * max_proto so we only try standard protocols.

/*

 * psmouse_extensions() probes for any extensions to the basic PS/2 protocol

 * the mouse may have.

	/*

	 * Always check for focaltech, this is safe as it uses pnp-id

	 * matching.

		/*

		 * Restrict psmouse_max_proto so that psmouse_initialize()

		 * does not try to reset rate and resolution, because even

		 * that upsets the device.

		 * This also causes us to basically fall through to basic

		 * protocol detection, where we fully reset the mouse,

		 * and set it up as bare PS/2 protocol device.

	/*

	 * We always check for LifeBook because it does not disturb mouse

	 * (it only checks DMI information).

	/*

	 * Try Kensington ThinkingMouse (we try first, because Synaptics

	 * probe upsets the ThinkingMouse).

	/*

	 * Try Synaptics TouchPad. Note that probing is done even if

	 * Synaptics protocol support is disabled in config - we need to

	 * know if it is Synaptics so we can reset it properly after

	 * probing for IntelliMouse.

			/*

			 * Try activating protocol, but check if support is

			 * enabled first, since we try detecting Synaptics

			 * even when protocol is disabled.

			/*

			 * Some Synaptics touchpads can emulate extended

			 * protocols (like IMPS/2).  Unfortunately

			 * Logitech/Genius probes confuse some firmware

			 * versions so we'll have to skip them.

		/*

		 * Make sure that touchpad is in relative mode, gestures

		 * (taps) are enabled.

	/*

	 * Try Cypress Trackpad. We must try it before Finger Sensing Pad

	 * because Finger Sensing Pad probe upsets some modules of Cypress

	 * Trackpads.

 Try ALPS TouchPad */

 Try OLPC HGPK touchpad */

 Try Elantech touchpad */

	/*

	 * Try Finger Sensing Pad. We do it here because its probe upsets

	 * Trackpoint devices (causing TP_READ_ID command to time out).

	/*

	 * Reset to defaults in case the device got confused by extended

	 * protocol probes. Note that we follow up with full reset because

	 * some mice put themselves to sleep when they see PSMOUSE_RESET_DIS.

	/*

	 * Okay, all failed, we have a standard mouse here. The number of

	 * the buttons is still a question, though. We assume 3.

		/*

		 * We detected Synaptics hardware but it did not respond to

		 * IMPS/2 probes.  We need to reset the touchpad because if

		 * there is a track point on the pass through port it could

		 * get disabled while probing for protocol extensions.

/*

 * psmouse_probe() probes for a PS/2 mouse.

	/*

	 * First, we check if it's a mouse. It should send 0x00 or 0x03 in

	 * case of an IntelliMouse in 4-byte mode or 0x04 for IM Explorer.

	 * Sunrex K8561 IR Keyboard/Mouse reports 0xff on second and

	 * subsequent ID queries, probably due to a firmware bug.

	/*

	 * Then we reset and disable the mouse so that it doesn't generate

	 * events.

/*

 * psmouse_initialize() initializes the mouse to a sane state.

	/*

	 * We set the mouse report rate, resolution and scaling.

/*

 * psmouse_activate() enables the mouse so that we get motion reports from it.

/*

 * psmouse_deactivate() puts the mouse into poll mode so that we don't get

 * motion reports from it unless we explicitly request it.

/*

 * psmouse_resync() attempts to re-validate current protocol.

	/*

	 * Some mice don't ACK commands sent while they are in the middle of

	 * transmitting motion packet. To avoid delay we use ps2_sendbyte()

	 * instead of ps2_command() which would wait for 200ms for an ACK

	 * that may never come.

	 * As an additional quirk ALPS touchpads may not only forget to ACK

	 * disable command but will stop reporting taps, so if we see that

	 * mouse at least once ACKs disable we will do full reconnect if ACK

	 * is missing.

	/*

	 * Poll the mouse. If it was reset the packet will be shorter than

	 * psmouse->pktsize and ps2_command will fail. We do not expect and

	 * do not handle scenario when mouse "upgrades" its protocol while

	 * disconnected since it would require additional delay. If we ever

	 * see a mouse that does it we'll adjust the code.

	/*

	 * Now try to enable mouse. We try to do that even if poll failed

	 * and also repeat our attempts 5 times, otherwise we may be left

	 * out with disabled mouse.

/*

 * psmouse_cleanup() resets the mouse into power-on state.

	/*

	 * Disable stream mode so cleanup routine can proceed undisturbed.

	/*

	 * Reset the mouse to defaults (bare PS/2 protocol).

	/*

	 * Some boxes, such as HP nx7400, get terribly confused if mouse

	 * is not fully enabled before suspending/shutting down.

/*

 * psmouse_disconnect() closes and frees.

 make sure we don't have a resync in progress */

	/*

	 * If mouse's packet size is 3 there is no point in polling the

	 * device in hopes to detect protocol reset - we won't get less

	 * than 3 bytes response anyhow.

	/*

	 * Some smart KVMs fake response to POLL command returning just

	 * 3 bytes and messing up our resync logic, so if initial poll

	 * fails we won't try polling the device anymore. Hopefully

	 * such KVM will maintain initially selected protocol.

/*

 * psmouse_connect() is a callback from the serio module when

 * an unhandled serio port is found.

	/*

	 * If this is a pass-through port deactivate parent so the device

	 * connected to this port can be successfully identified

 give PT device some time to settle down before probing */

 Smbus companion will be reporting events, not us. */

	/*

	 * PS/2 devices having SMBus companions should stay disabled

	 * on PS/2 side, in order to have SMBus part operable.

 If this is a pass-through port the parent needs to be re-activated */

 so we don't try to free it below */

	/*

	 * OK, the device type (and capabilities) match the old one,

	 * we can continue using it, complete initialization

	/*

	 * PS/2 devices having SMBus companions should stay disabled

	 * on PS/2 side, in order to have SMBus part operable.

 If this is a pass-through port the parent waits to be activated */

 switched by other thread */

 default to PSMOUSE_PS2 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * OLPC HGPK (XO-1) touchpad PS/2 mouse driver

 *

 * Copyright (c) 2006-2008 One Laptop Per Child

 * Authors:

 *   Zephaniah E. Hull

 *   Andres Salomon <dilinger@debian.org>

 *

 * This driver is partly based on the ALPS driver, which is:

 *

 * Copyright (c) 2003 Neil Brown <neilb@cse.unsw.edu.au>

 * Copyright (c) 2003-2005 Peter Osterlund <petero2@telia.com>

 * Copyright (c) 2004 Dmitry Torokhov <dtor@mail.ru>

 * Copyright (c) 2005 Vojtech Pavlik <vojtech@suse.cz>

/*

 * The spec from ALPS is available from

 * <http://wiki.laptop.org/go/Touch_Pad/Tablet>.  It refers to this

 * device as HGPK (Hybrid GS, PT, and Keymatrix).

 *

 * The earliest versions of the device had simultaneous reporting; that

 * was removed.  After that, the device used the Advanced Mode GS/PT streaming

 * stuff.  That turned out to be too buggy to support, so we've finally

 * switched to Mouse Mode (which utilizes only the center 1/3 of the touchpad).

/*

 * see if new value is within 20% of half of old value

/*

 * Throw out oddly large delta packets, and any that immediately follow whose

 * values are each approximately half of the previous.  It seems that the ALPS

 * firmware emits errant packets, and they get averaged out slowly.

 discard if too big, or half that but > 4 times the prev delta */

/*

 * We have no idea why this particular hardware bug occurs.  The touchpad

 * will randomly start spewing packets without anything touching the

 * pad.  This wouldn't necessarily be bad, but it's indicative of a

 * severely miscalibrated pad; attempting to use the touchpad while it's

 * spewing means the cursor will jump all over the place, and act "drunk".

 *

 * The packets that are spewed tend to all have deltas between -2 and 2, and

 * the cursor will move around without really going very far.  It will

 * tend to end up in the same location; if we tally up the changes over

 * 100 packets, we end up w/ a final delta of close to 0.  This happens

 * pretty regularly when the touchpad is spewing, and is pretty hard to

 * manually trigger (at least for *my* fingers).  So, it makes a perfect

 * scheme for detecting spews.

	/* ignore button press packets; many in a row could trigger

 don't track spew if the workaround feature has been turned off */

 no spew, or spew ended */

	/* Keep a tally of the overall delta to the cursor position caused by

 we're not spewing, but this packet might be the start */

 excessive spew detected, request recalibration */

		/* only recalibrate when the overall delta to the cursor

		 * is really small. if the spew is causing significant cursor

		 * movement, it is probably a case of the user moving the

		/* we already detected a spew and requested a recalibration,

/*

 * HGPK Mouse Mode format (standard mouse format, sans middle button)

 *

 * byte 0:	y-over	x-over	y-neg	x-neg	1	0	swr	swl

 * byte 1:	x7	x6	x5	x4	x3	x2	x1	x0

 * byte 2:	y7	y6	y5	y4	y3	y2	y1	y0

 *

 * swr/swl are the left/right buttons.

 * x-neg/y-neg are the x and y delta negative bits

 * x-over/y-over are the x and y overflow bits

 *

 * ---

 *

 * HGPK Advanced Mode - single-mode format

 *

 * byte 0(PT):  1    1    0    0    1    1     1     1

 * byte 0(GS):  1    1    1    1    1    1     1     1

 * byte 1:      0   x6   x5   x4   x3   x2    x1    x0

 * byte 2(PT):  0    0   x9   x8   x7    ? pt-dsw    0

 * byte 2(GS):  0  x10   x9   x8   x7    ? gs-dsw pt-dsw

 * byte 3:      0   y9   y8   y7    1    0   swr   swl

 * byte 4:      0   y6   y5   y4   y3   y2    y1    y0

 * byte 5:      0   z6   z5   z4   z3   z2    z1    z0

 *

 * ?'s are not defined in the protocol spec, may vary between models.

 *

 * swr/swl are the left/right buttons.

 *

 * pt-dsw/gs-dsw indicate that the pt/gs sensor is detecting a

 * pen/finger

		/*

		 * PenTablet mode does not report pressure, so we don't

		 * report it here

	/*

	 * If this packet says that the finger was removed, reset our position

	 * tracking so that we don't erroneously detect a jump on next press.

	/*

	 * Weed out duplicate packets (we get quite a few, and they mess up

	 * our jump detection)

 not a duplicate, continue with position reporting */

 Don't apply hacks in PT mode, it seems reliable */

			/*

			 * ugh, got a packet inside our recalibration

			 * window, schedule another recalibration.

	/*

	 * 4 disables to enable advanced mode

	 * then 3 0xf2 bytes as the preamble for GS/PT selection

 Switch to 'Advanced mode.', four disables in a row. */

 select between GlideSensor (mouse) or PenTablet */

 All modes report left and right buttons */

 GlideSensor has pressure sensor, PenTablet does not */

 From device specs */

 Calculated by hand based on usable size (52mm x 38mm) */

 From device specs */

 Calculated by hand based on usable size (156mm x 38mm) */

 send the recalibrate request */

 according to ALPS, 150mS is required for recalibration */

 C-series touchpads added the recalibrate command */

 we don't want to race with the irq handler, nor with resyncs */

 start by resetting the device */

	/*

	 * XXX: If a finger is down during this delay, recalibration will

	 * detect capacitance incorrectly.  This is a hardware bug, and

	 * we don't have a good way to deal with it.  The 2s window stuff

	 * (below) is our best option for now.

	/*

	 * If we get packets right away after recalibrating, it's likely

	 * that a finger was on the touchpad.  If so, it's probably

	 * miscalibrated, so we optionally schedule another.

/*

 * This puts the touchpad in a power saving mode; according to ALPS, current

 * consumption goes down to 50uA after running this.  To turn power back on,

 * we drive MS-DAT low.  Measuring with a 1mA resolution ammeter says that

 * the current on the SUS_3.3V rail drops from 3mA or 4mA to 0 when we do this.

 *

 * We have no formal spec that details this operation -- the low-power

 * sequence came from a long-lost email trail.

 Added on D-series touchpads */

		/*

		 * Sending a byte will drive MS-DAT low; this will wake up

		 * the controller.  Once we get an ACK back from it, it

		 * means we can continue with the touchpad re-init.  ALPS

		 * tells us that 1s should be long enough, so set that as

		 * the upper bound. (in practice, it takes about 3 loops.)

 should be all set, enable the touchpad */

 probably won't see an ACK, the touchpad will be off */

 We can't poll, so always return failure. */

	/*

	 * During suspend/resume the ps2 rails remain powered.  We don't want

	 * to do a reset because it's flush data out of buffers; however,

	 * earlier prototypes (B1) had some brokenness that required a reset.

		/*

		 * hgpk_toggle_power will deal w/ state so

		 * we're not racing w/ irq

 Switch device into the new mode */

	/*

	 * We queue work instead of doing recalibration right here

	 * to avoid adding locking to to hgpk_force_recalibrate()

	 * since workqueue provides serialization.

 register handlers */

 Disable the idle resync. */

 Reset after a lot of bad bytes. */

 C-series touchpads added the recalibrate command */

 E7, E7, E7, E9 gets us a 3 byte identifier */

 HGPK signature: 0x67, 0x00, 0x<model> */

/*

 * Synaptics touchpad with I2C interface

 *

 * Copyright (C) 2009 Compulab, Ltd.

 * Mike Rapoport <mike@compulab.co.il>

 * Igor Grinberg <grinberg@compulab.co.il>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive for

 * more details.

 maximum product id is 15 characters */

/*

 * after soft reset, we should wait for 1 ms

 * before the device becomes operational

 and after hard reset, we should wait for max 500ms */

 Registers by SMBus address */

 Registers by RMI address */

 Register bits */

 Device Control Register Bits */

 Interrupt Enable Register Bits (INTERRUPT_EN_REG) */

 Interrupt Request Register Bits (INT_REQ_STAT_REG | DEVICE_STATUS_REG) */

 Device Status Register Bits (DEVICE_STATUS_REG) */

 Device Command Register Bits (DEV_COMMAND_REG) */

 Data Register 0 Bits (DATA_REG0) */

 Device Query Registers Bits */

 DEV_QUERY_REG3 */

 General 2D Control Register Bits (GENERAL_2D_CONTROL_REG) */

 Function Masks */

 Device Control Register Masks (DEV_CONTROL_REG) */

 Device Sleep Modes */

 Interrupt Register Mask */

 (INT_REQ_STAT_REG | DEVICE_STATUS_REG | INTERRUPT_EN_REG) */

 Device Status Register Masks (DEVICE_STATUS_REG) */

 Data Register 0 Masks */

/*

 * MSB Position Register Masks

 * ABS_MSB_X_REG | ABS_MSB_Y_REG | SENS_MAX_POS_MSB_REG |

 * DEV_QUERY_REG3 | DEV_QUERY_REG5

 Device Query Registers Masks */

 DEV_QUERY_REG2 */

 When in IRQ mode read the device every THREAD_IRQ_SLEEP_SECS */

/*

 * When in Polling mode and no data received for NO_DATA_THRES msecs

 * reduce the polling rate to NO_DATA_SLEEP_MSECS

 Control touchpad's No Deceleration option */

 Control touchpad's Reduced Reporting option */

 Control touchpad's No Filter option */

/*

 * touchpad Attention line is Active Low and Open Drain,

 * therefore should be connected to pulled up line

 * and the irq configuration should be set to Falling Edge Trigger

 Control IRQ / Polling option */

 Control Polling Rate */

 The main device structure */

/*

 * Driver's initial design makes no race condition possible on i2c bus,

 * so there is no need in any locking.

 * Keep it in mind, while playing with the code.

 set Report Rate to Device Highest (>=80) and Sleep to normal */

 set Interrupt Disable to Func20 / Enable to Func10) */

 No Deceleration */

 Reduced Reporting */

 No Filter */

 Reset the Touchpad */

 Deal with spontaneous resets and errors */

 Get Gesture Bit */

	/*

	 * Get Relative axes. we have to get them in one shot,

	 * so we get 2 bytes starting from REL_X_REG.

 Separate X from Y */

 Report the button event */

 Report the deltas */

 Control the Device polling rate / Work Handler sleep time */

 Work Handler */

	/*

	 * While interrupt driven, there is no real need to poll the device.

	 * But touchpads are very sensitive, so there could be errors

	 * related to physical environment and the attention line isn't

	 * necessarily asserted. In such case we can lose the touchpad.

	 * We poll the device once in THREAD_IRQ_SLEEP_SECS and

	 * if error is detected, we try to reset and reconfigure the touchpad.

 Save some power */

 Register the device as mouse */

 Register device's buttons and keys */

 Register the device in input subsystem */

 Save some power */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Acorn RiscPC mouse driver for Linux/ARM

 *

 *  Copyright (c) 2000-2002 Vojtech Pavlik

 *  Copyright (C) 1996-2002 Russell King

/*

 *

 * This handles the Acorn RiscPCs mouse.  We basically have a couple of

 * hardware registers that track the sensor count for the X-Y movement and

 * another register holding the button state.  On every VSYNC interrupt we read

 * the complete state and then work out if something has changed.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Stephen Evanchik <evanchsa@gmail.com>

 *

 * Trademarks are the property of their respective owners.

/*

 * Power-on Reset: Resets all trackpoint parameters, including RAM values,

 * to defaults.

 * Returns zero on success, non-zero on failure.

 Check for success response -- 0xAA00 */

/*

 * Device IO: read, write and toggle bit

 Bad things will happen if the loc param isn't in this range */

/*

 * Trackpoint-specific attributes

/*

 * Write parameters to trackpad.

 * in_power_on_state: Set to true if TP is in default / power-on state (ex. if

 *		      power-on reset was run). If so, values will only be

 *		      written to TP if they differ from power-on default.

		/*

		 * Disable features that may make device unusable

		 * with this driver.

	/*

	 * These properties can be changed in this driver. Only

	 * configure them if the values are non-default or if the TP is in

	 * an unknown state.

 toggles */

 toggles */

 Newer variants do not support extended button query. */

		/*

		 * Write defaults to TP if we did not reset the trackpoint.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

/*

 *  Serial mouse driver for Linux

/*

/*

 * sermouse_process_msc() analyzes the incoming MSC/Sun bytestream and

 * applies some prediction to the data, resulting in 96 updates per

 * second, which is as good as a PS/2 or USB mouse.

/*

 * sermouse_process_ms() anlyzes the incoming MS(Z/+/++) bytestream and

 * generates events. With prediction it gets 80 updates/sec, assuming

 * standard 3-byte packets and 1200 bps.

 Guessing the state of the middle button on 3-button MS-protocol mice - ugly. */

 M++ Wireless Extension packet. */

 MZ++ packet type. We can get these bytes for M++ too but we ignore them later. */

 Ignore anything besides MZ++ */

 Extra mouse info */

 We don't decode anything else yet. */

/*

 * sermouse_interrupt() handles incoming characters, either gathering them into

 * packets or passing them to the command routine as command output.

/*

 * sermouse_disconnect() cleans up after we don't want talk

 * to the mouse anymore.

/*

 * sermouse_connect() is a callback form the serio module when

 * an unhandled serio port is found.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * BYD TouchPad PS/2 mouse driver

 *

 * Copyright (C) 2015 Chris Diamand <chris@diamand.org>

 * Copyright (C) 2015 Richard Pospesel

 * Copyright (C) 2015 Tai Chi Minh Ralph Eastwood

 * Copyright (C) 2015 Martin Wimpress

 * Copyright (C) 2015 Jay Kuri

 PS2 Bits */

/*

 * BYD pad constants

/*

 * True device resolution is unknown, however experiments show the

 * resolution is about 111 units/mm.

 * Absolute coordinate packets are in the range 0-255 for both X and Y

 * we pick ABS_X/ABS_Y dimensions which are multiples of 256 and in

 * the right ballpark given the touchpad's physical dimensions and estimate

 * resolution per spec sheet, device active area dimensions are

 * 101.6 x 60.1 mm.

/*

 * Given the above dimensions, relative packets velocity is in multiples of

 * 1 unit / 11 milliseconds.  We use this dt to estimate distance traveled

 Time in jiffies used to timeout various touch events (64 ms) */

 BYD commands reverse engineered from windows driver */

/*

 * Swipe gesture from off-pad to on-pad

 *  0 : disable

 *  1 : enable

/*

 * Tap and drag delay time

 *  0 : disable

 *  1 - 8 : least to most delay

/*

 * Physical buttons function mapping

 *  0 : enable

 *  4 : normal

 *  5 : left button custom command

 *  6 : right button custom command

 *  8 : disable

/*

 * Absolute mode (1 byte X/Y resolution)

 *  0 : disable

 *  2 : enable

/*

 * Two finger scrolling

 *  1 : vertical

 *  2 : horizontal

 *  3 : vertical + horizontal

 *  4 : disable

/*

 * Handedness

 *  1 : right handed

 *  2 : left handed

/*

 * Tap to click

 *  1 : enable

 *  2 : disable

/*

 * Tap and drag

 *  1 : tap and hold to drag

 *  2 : tap and hold to drag + lock

 *  3 : disable

/*

 * Touch sensitivity

 *  1 - 7 : least to most sensitive

/*

 * One finger scrolling

 *  1 : vertical

 *  2 : horizontal

 *  3 : vertical + horizontal

 *  4 : disable

/*

 * One finger scrolling function

 *  1 : free scrolling

 *  2 : edge motion

 *  3 : free scrolling + edge motion

 *  4 : disable

/*

 * Sliding speed

 *  1 - 5 : slowest to fastest

/*

 * Edge motion

 *  1 : disable

 *  2 : enable when dragging

 *  3 : enable when dragging and pointing

/*

 * Left edge region size

 *  0 - 7 : smallest to largest width

/*

 * Top edge region size

 *  0 - 9 : smallest to largest height

/*

 * Disregard palm press as clicks

 *  1 - 6 : smallest to largest

/*

 * Right edge region size

 *  0 - 7 : smallest to largest width

/*

 * Bottom edge region size

 *  0 - 9 : smallest to largest height

/*

 * Multitouch gestures

 *  1 : enable

 *  2 : disable

/*

 * Edge motion speed

 *  0 : control with finger pressure

 *  1 - 9 : slowest to fastest

/*

 * Two finger scolling function

 *  0 : free scrolling

 *  1 : free scrolling (with momentum)

 *  2 : edge motion

 *  3 : free scrolling (with momentum) + edge motion

 *  4 : disable

/*

 * The touchpad generates a mixture of absolute and relative packets, indicated

 * by the the last byte of each packet being set to one of the following:

 Multitouch gesture packets */

	/*

	 * Move cursor back to center of pad when we lose touch - this

	 * specifically improves user experience when moving cursor with one

	 * finger, and pressing a button with another.

 Otherwise, a full packet has been received */

 Only use absolute packets for the start of movement. */

 needed to detect tap */

 init abs position */

 Standard packet */

 Sign-extend if a sign bit is set. */

 Update position based on velocity */

 Reset time since last touch. */

		/*

		 * Intellimouse initialization sequence, to get 4-byte instead

		 * of 3-byte packets.

		/*

		 * BYD-specific initialization, which enables absolute mode and

		 * (if desired), the touchpad's built-in gesture detection.

 The touchpad should reply with 4 seemingly-random bytes */

 Pairs of parameters and values. */

 Finalize initialization. */

 Touchpad */

 Buttons */

 Absolute position */

 No relative support */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Amiga mouse driver for Linux/m68k

 *

 *  Copyright (c) 2000-2002 Vojtech Pavlik

 *

 *  Based on the work of:

 *	Michael Rausch		James Banks

 *	Matther Dillon		David Giller

 *	Nathan Laredo		Linus Torvalds

 *	Johan Myreen		Jes Sorensen

 *	Russell King

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2000-2001 Vojtech Pavlik

 *

 *  Based on the work of:

 *	Alan Cox	Robin O'Leary

/*

 * IBM PC110 touchpad driver for Linux

/*

/*

 * We try to avoid enabling the hardware if it's not

 * there, but we don't know how to test. But we do know

 * that the PC110 is not a PCI system. So if we find any

 * PCI devices in the machine, we don't have a PC110.

 SPDX-License-Identifier: GPL-2.0-or-later

/*-

 * Finger Sensing Pad PS/2 mouse driver.

 *

 * Copyright (C) 2005-2007 Asia Vital Components Co., Ltd.

 * Copyright (C) 2005-2012 Tai-hwa Liang, Sentelic Corporation.

/*

 * Timeout for FSP PS/2 command only (in milliseconds).

* Driver version. */

/*

 * Make sure that the value being sent to FSP will not conflict with

 * possible sample rate values.

		/*

		 * The requested value being sent to FSP matched to possible

		 * sample rates, swap the given value such that the hardware

		 * wouldn't get confused.

 swap isn't necessary */

/*

 * Make sure that the value being sent to FSP will not conflict with certain

 * commands.

		/*

		 * The requested value being sent to FSP matched to certain

		 * commands, inverse the given value such that the hardware

		 * wouldn't get confused.

 inversion isn't necessary */

	/*

	 * We need to shut off the device and switch it into command

	 * mode so we don't confuse our protocol handler. We don't need

	 * to do that for writes because sysfs set helper does this for

	 * us.

 should return 0xfe(request for resending) */

 should return 0xfc(failed) */

 swapping is required */

 expect 0xfe */

 swapping isn't necessary */

 expect 0xfe */

 should return 0xfc(failed) */

 inversion is required */

 swapping is required */

 swapping isn't necessary */

 write the register address in correct order */

 inversion is required */

 swapping is required */

 swapping isn't necessary */

 write the register value in correct order */

 Enable register clock gating for writing certain registers */

 only write if necessary */

 get the returned result */

 swapping is required */

 swapping isn't necessary */

 production number since Cx is available at: 0x0b40 ~ 0x0b42 */

 Left/Middle/Right/Forward/Backward & Scroll Up/Down */

 Left/Middle/Right & Scroll Up/Down/Right/Left */

 Left/Middle/Right & Scroll Up/Down */

 Left/Middle/Right */

 Enable on-pad command tag output */

 only write if necessary */

 reconfigure horizontal scrolling packet output */

/*

 * Write device specific initial parameters.

 *

 * ex: 0xab 0xcd - write oxcd into register 0xab

/*

 * Read a register from device.

 *

 * ex: 0xab -- read content from register 0xab

 Interpret & dump the packet data. */

	/*

	 * Full packet accumulated, process it

			/*

			 * Ignore coordinate noise when finger leaving the

			 * surface, otherwise cursor may jump to upper-left

			 * corner.

			/*

			 * MFMC packet: assume that there are two fingers on

			 * pad

 MFMC packet */

 2nd finger */

					/*

					 * workaround for buggy firmware

					 * which doesn't clear MFMC bit if

					 * the 1st finger is up

 1st finger */

					/*

					 * workaround for buggy firmware

					 * which doesn't clear MFMC bit if

					 * the 2nd finger is up

 SFAC packet */

				/* On-pad click in SFAC mode should be handled

				 * by userspace.  On-pad clicks in MFMC mode

				 * are real clickpad clicks, and not ignored.

 no multi-finger information */

 on-pad click, filter it if necessary */

 normal packet */

 special packet data translation from on-pad packets */

 wheel down */

 wheel up */

 horizontal left */

 horizontal right */

 push back to packet queue */

		/*

		 * Processing wheel up/down and extra button events

		/*

		 * Standard PS/2 Mouse

	/*

	 * Standard procedure to enter FSP Intellimouse mode

	 * (scrolling wheel, 4th and 5th buttons)

 Preparing relative coordinates output for older hardware */

 Ensure we are not in absolute mode */

 Left/Middle/Right & Scroll Up/Down/Right/Left */

		/*

		 * Enable OPC tags such that driver can tell the difference

		 * between on-pad and real button click

 enable on-pad click by default */

 Enable on-pad vertical and horizontal scrolling */

 Enable absolute coordinates output for Cx/Dx hardware */

		/*

		 * Hardware prior to Cx performs much better in relative mode;

		 * hence, only enable absolute coordinates output as well as

		 * multi-touch output for the newer hardware.

		 *

		 * Maximum coordinates can be computed as:

		 *

		 *	number of scanlines * 64 - 57

		 *

		 * where number of X/Y scanline lines are 16/12.

 firmware information is only available since C0 */

 Set up various supported input event bits */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Elan I2C/SMBus Touchpad driver - SMBus interface

 *

 * Copyright (c) 2013 ELAN Microelectronics Corp.

 *

 * Author: ææ¿ç¶­ (Duson Lin) <dusonlin@emc.com.tw>

 *

 * Based on cyapa driver:

 * copyright (c) 2011-2012 Cypress Semiconductor, Inc.

 * copyright (c) 2011-2012 Google, Inc.

 *

 * Trademarks are the property of their respective owners.

 Elan SMbus commands */

 Get hello packet */

 compare hello packet */

 enable tp */

 XXX should we send ETP_SMBUS_ENABLE_TP here? */

 A no-op */

 Get FW in which mode	(IAP_MODE/MAIN_MODE)  */

 set flash key */

 write iap password */

		/*

		 * Read back password to make sure we enabled flash

		 * successfully.

 Wait 30ms for MAIN_MODE change to IAP_MODE */

 Reset IC */

	/*

	 * Due to the limitation of smbus protocol limiting

	 * transfer to 32 bytes at a time, we must split block

	 * in 2 transfers.

 Wait for F/W to update one page ROM data. */

	/*

	 * SMBus controllers with pattern 2 lack area info, as newer

	 * high-precision packets use that space for coordinates.

 No special handling unlike I2C transport */

/*

 * Cypress APA trackpad with I2C interface

 *

 * Author: Dudley Du <dudl@cypress.com>

 *

 * Copyright (C) 2015 Cypress Semiconductor, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive for

 * more details.

 Reserved, must be 0 */

 bit7: resv, set to 0; bit6~0: command code.*/

 Reserved, must be 0 */

 bit7: TGL; bit6~0: command code.*/

	/*

	 * The value of data_status can be the first byte of data or

	 * the command status or the unsupported command code depending on the

	 * requested command code.

 Read Bootloader Information to determine Gen5 or Gen6. */

 Get App System Information to determine Gen5 or Gen6. */

 Try to wake from it deep sleep state if it is. */

 Empty the buffer queue to get fresh data with later commands. */

	/*

	 * Read description info from trackpad device to determine running in

	 * APP mode or Bootloader mode.

 Get PIP fixed information to determine Gen5 or Gen6. */

 Get App System Information to determine Gen5 or Gen6. */

 Get the number of Rx electrodes. */

 New power state applied in device not match the set power state. */

 Reserved, must be 0 */

 Get the real set intervals from response. */

		/*

		 * Send ping command to notify device prepare for wake up

		 * when it's in deep sleep mode. At this time, device will

		 * response nothing except an I2C NAK.

		/*

		 * Assume TP in deep sleep mode when driver is loaded,

		 * avoid driver unload and reload command IO issue caused by TP

		 * has been set into deep sleep mode when unloading.

 Has in correct power mode state, early return. */

	/*

	 * When trackpad in power off mode, it cannot change to other power

	 * state directly, must be wake up from sleep firstly, then

	 * continue to do next power sate change.

	/*

	 * Disable device assert interrupts for command response to avoid

	 * disturbing system suspending or hibernating process.

 Sync the interval setting from device. */

		/*

		 * Gen6 internally supports to 2 low power scan interval time,

		 * so can help to switch power mode quickly.

		 * such as runtime suspend and system suspend.

 1. Suspend Scanning*/

 2. IDAC and RX Attenuator Calibration Data (Center Frequency). */

 RX Attenuator Mutual */

 IDAC Mutual */

 RX Attenuator Self RX */

 IDAC Self RX */

 RX Attenuator Self TX */

 IDAC Self TX */

 3. Read Attenuator Trim. */

 set attenuator trim values. */

 4. Resume Scanning*/

 Try to update trackpad product information. */

		/*

		 * If trackpad device in deep sleep mode,

		 * the app command will fail.

		 * So always try to reset trackpad device to full active when

		 * the device state is required.

 By default, the trackpad proximity function is enabled. */

 Get trackpad product information. */

 Only support product ID starting with CYTRA */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Cypress Trackpad PS/2 mouse driver

 *

 * Copyright (c) 2012 Cypress Semiconductor Corporation.

 *

 * Author:

 *   Dudley Du <dudl@cypress.com>

 *

 * Additional contributors include:

 *   Kamal Mostafa <kamal@canonical.com>

 *   Kyle Fazzari <git@status.e4ward.com>

 define this and DEBUG for more verbose dump */

		/*

		 * Send extension command byte (0xE8 or 0xF3).

		 * If sending the command fails, send recovery command

		 * to make the device return to the ready state.

 callers will do further checking. */

 Check for Cypress Trackpad signature bytes: 0x33 0xCC */

 Check for Cypress Trackpad signature bytes: 0x33 0xCC */

	/*

	 * Trackpad fw_version 11 (in Dell XPS12) yields a bogus response to

	 * CYTP_CMD_READ_TP_METRICS so do not try to use it. LP: #1103594.

 set default values for tp metrics. */

 Update trackpad parameters. */

/*

 * Reset trackpad device.

 * This is also the default mode when trackpad powered on.

 finger position */

 HSCROLL gets added on to 0 finger count. */

 Invalid contact (e.g. palm). Ignore it. */

	/*

	 * This is only true if one of the mouse buttons were tapped.  Make

	 * sure it doesn't turn into a click. The regular tap-to-click

	 * functionality will handle that on its own. If we don't do this,

	 * disabling tap-to-click won't affect the mouse button zones.

 call packet process for reporting finger leave. */

	/*

	 * Perform validation (and adjust packet size) based only on the

	 * first byte; allow all further bytes through.

	/*

	 * If absolute/relative mode bit has not been set yet, just pass

	 * the byte through.

	/*

	 * Reset Cypress Trackpad as a standard mouse. Then

	 * let psmouse driver commmunicating with it as default PS2 mouse.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2001-2005 Edouard TISSERANT   <edouard.tisserant@wanadoo.fr>

 *  Copyright (c) 2004-2005 Stephane VOLTZ      <svoltz@numericable.fr>

 *

 *  USB Acecad "Acecad Flair" tablet support

 *

 *  Changelog:

 *      v3.2 - Added sysfs support

/*

 success */

 this urb is terminated, clean up */

 Pressure should compute the same way for flair and 302 */

 event termination */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pressure-threshold modules param code from Alex Perry <alex.perry@ieee.org>

 success */

 this urb is terminated, clean up */

input_report_key(dev, BTN_TOUCH , data[0] & 0x01);*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pegasus Mobile Notetaker Pen input tablet driver

 *

 * Copyright (c) 2016 Martin Kepplinger <martink@posteo.de>

/*

 * request packet (control endpoint):

 * |-------------------------------------|

 * | Report ID | Nr of bytes | command   |

 * | (1 byte)  | (1 byte)    | (n bytes) |

 * |-------------------------------------|

 * | 0x02      | n           |           |

 * |-------------------------------------|

 *

 * data packet after set xy mode command, 0x80 0xb5 0x02 0x01

 * and pen is in range:

 *

 * byte	byte name		value (bits)

 * --------------------------------------------

 * 0	status			0 1 0 0 0 0 X X

 * 1	color			0 0 0 0 H 0 S T

 * 2	X low

 * 3	X high

 * 4	Y low

 * 5	Y high

 *

 * X X	battery state:

 *	no state reported	0x00

 *	battery low		0x01

 *	battery good		0x02

 *

 * H	Hovering

 * S	Switch 1 (pen button)

 * T	Tip

 USB HID defines */

 device specific defines */

 in xy data packet */

 serialize access to open/suspend */

 device button pressed */

 xy data */

 pen-up event */

 We control interface 0 */

 Sanity check that the device has an endpoint */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  USB Hanwang tablet support

 *

 *  Copyright (c) 2010 Xing Wei <weixing@hanwang.com.cn>

/*

 device IDs */

 match vendor and interface info  */

 data packet */

 tool prox out */

 artmaster ii pen leave */

 first time tool prox in */

 art_master III */

 art_master_HD */

 art_master III */

 art_master_HD */

 tool data packet */

 roll wheel */

 success */;

 this urb is terminated, clean up */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Native support for the Aiptek HyperPen USB Tablets

 *  (4000U/5000U/6000U/8000U/12000U)

 *

 *  Copyright (c) 2001      Chris Atenasio   <chris@crud.net>

 *  Copyright (c) 2002-2004 Bryan W. Headley <bwheadley@earthlink.net>

 *

 *  based on wacom.c by

 *     Vojtech Pavlik      <vojtech@suse.cz>

 *     Andreas Bach Aaen   <abach@stofanet.dk>

 *     Clifford Wolf       <clifford@clifford.at>

 *     Sam Mosel           <sam.mosel@computer.org>

 *     James E. Blair      <corvus@gnu.org>

 *     Daniel Egger        <egger@suse.de>

 *

 *  Many thanks to Oliver Kuechemann for his support.

 *

 *  ChangeLog:

 *      v0.1 - Initial release

 *      v0.2 - Hack to get around fake event 28's. (Bryan W. Headley)

 *      v0.3 - Make URB dynamic (Bryan W. Headley, Jun-8-2002)

 *             Released to Linux 2.4.19 and 2.5.x

 *      v0.4 - Rewrote substantial portions of the code to deal with

 *             corrected control sequences, timing, dynamic configuration,

 *             support of 6000U - 12000U, procfs, and macro key support

 *             (Jan-1-2003 - Feb-5-2003, Bryan W. Headley)

 *      v1.0 - Added support for diagnostic messages, count of messages

 *             received from URB - Mar-8-2003, Bryan W. Headley

 *      v1.1 - added support for tablet resolution, changed DV and proximity

 *             some corrections - Jun-22-2003, martin schneebacher

 *           - Added support for the sysfs interface, deprecating the

 *             procfs interface for 2.5.x kernel. Also added support for

 *             Wheel command. Bryan W. Headley July-15-2003.

 *      v1.2 - Reworked jitter timer as a kernel thread.

 *             Bryan W. Headley November-28-2003/Jan-10-2004.

 *      v1.3 - Repaired issue of kernel thread going nuts on single-processor

 *             machines, introduced programmableDelay as a command line

 *             parameter. Feb 7 2004, Bryan W. Headley.

 *      v1.4 - Re-wire jitter so it does not require a thread. Courtesy of

 *             Rene van Paassen. Added reporting of physical pointer device

 *             (e.g., stylus, mouse in reports 2, 3, 4, 5. We don't know

 *             for reports 1, 6.)

 *             what physical device reports for reports 1, 6.) Also enabled

 *             MOUSE and LENS tool button modes. Renamed "rubber" to "eraser".

 *             Feb 20, 2004, Bryan W. Headley.

 *      v1.5 - Added previousJitterable, so we don't do jitter delay when the

 *             user is holding a button down for periods of time.

 *

 * NOTE:

 *      This kernel driver is augmented by the "Aiptek" XFree86 input

 *      driver for your X server, as well as the Gaiptek GUI Front-end

 *      "Tablet Manager".

 *      These three products are highly interactive with one another,

 *      so therefore it's easier to document them all as one subsystem.

 *      Please visit the project's "home page", located at,

 *      http://aiptektablet.sourceforge.net.

/*

 * Aiptek status packet:

 *

 * (returned as Report 1 - relative coordinates from mouse and stylus)

 *

 *        bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0

 * byte0   0     0     0     0     0     0     0     1

 * byte1   0     0     0     0     0    BS2   BS    Tip

 * byte2  X7    X6    X5    X4    X3    X2    X1    X0

 * byte3  Y7    Y6    Y5    Y4    Y3    Y2    Y1    Y0

 *

 * (returned as Report 2 - absolute coordinates from the stylus)

 *

 *        bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0

 * byte0   0     0     0     0     0     0     1     0

 * byte1  X7    X6    X5    X4    X3    X2    X1    X0

 * byte2  X15   X14   X13   X12   X11   X10   X9    X8

 * byte3  Y7    Y6    Y5    Y4    Y3    Y2    Y1    Y0

 * byte4  Y15   Y14   Y13   Y12   Y11   Y10   Y9    Y8

 * byte5   *     *     *    BS2   BS1   Tip   IR    DV

 * byte6  P7    P6    P5    P4    P3    P2    P1    P0

 * byte7  P15   P14   P13   P12   P11   P10   P9    P8

 *

 * (returned as Report 3 - absolute coordinates from the mouse)

 *

 *        bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0

 * byte0   0     0     0     0     0     0     1     1

 * byte1  X7    X6    X5    X4    X3    X2    X1    X0

 * byte2  X15   X14   X13   X12   X11   X10   X9    X8

 * byte3  Y7    Y6    Y5    Y4    Y3    Y2    Y1    Y0

 * byte4  Y15   Y14   Y13   Y12   Y11   Y10   Y9    Y8

 * byte5   *     *     *    BS2   BS1   Tip   IR    DV

 * byte6  P7    P6    P5    P4    P3    P2    P1    P0

 * byte7  P15   P14   P13   P12   P11   P10   P9    P8

 *

 * (returned as Report 4 - macrokeys from the stylus)

 *

 *        bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0

 * byte0   0     0     0     0     0     1     0     0

 * byte1   0     0     0    BS2   BS    Tip   IR    DV

 * byte2   0     0     0     0     0     0     1     0

 * byte3   0     0     0    K4    K3    K2    K1    K0

 * byte4  P7    P6    P5    P4    P3    P2    P1    P0

 * byte5  P15   P14   P13   P12   P11   P10   P9    P8

 *

 * (returned as Report 5 - macrokeys from the mouse)

 *

 *        bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0

 * byte0   0     0     0     0     0     1     0     1

 * byte1   0     0     0    BS2   BS    Tip   IR    DV

 * byte2   0     0     0     0     0     0     1     0

 * byte3   0     0     0    K4    K3    K2    K1    K0

 * byte4  P7    P6    P5    P4    P3    P2    P1    P0

 * byte5  P15   P14   P13   P12   P11   P10   P9    P8

 *

 * IR: In Range = Proximity on

 * DV = Data Valid

 * BS = Barrel Switch (as in, macro keys)

 * BS2 also referred to as Tablet Pick

 *

 * Command Summary:

 *

 * Use report_type CONTROL (3)

 * Use report_id   2

 *

 * Command/Data    Description     Return Bytes    Return Value

 * 0x10/0x00       SwitchToMouse       0

 * 0x10/0x01       SwitchToTablet      0

 * 0x18/0x04       SetResolution       0

 * 0x12/0xFF       AutoGainOn          0

 * 0x17/0x00       FilterOn            0

 * 0x01/0x00       GetXExtension       2           MaxX

 * 0x01/0x01       GetYExtension       2           MaxY

 * 0x02/0x00       GetModelCode        2           ModelCode = LOBYTE

 * 0x03/0x00       GetODMCode          2           ODMCode

 * 0x08/0x00       GetPressureLevels   2           =512

 * 0x04/0x00       GetFirmwareVersion  2           Firmware Version

 * 0x11/0x02       EnableMacroKeys     0

 *

 * To initialize the tablet:

 *

 * (1) Send Resolution500LPI (Command)

 * (2) Query for Model code (Option Report)

 * (3) Query for ODM code (Option Report)

 * (4) Query for firmware (Option Report)

 * (5) Query for GetXExtension (Option Report)

 * (6) Query for GetYExtension (Option Report)

 * (7) Query for GetPressureLevels (Option Report)

 * (8) SwitchToTablet for Absolute coordinates, or

 *     SwitchToMouse for Relative coordinates (Command)

 * (9) EnableMacroKeys (Command)

 * (10) FilterOn (Command)

 * (11) AutoGainOn (Command)

 *

 * (Step 9 can be omitted, but you'll then have no function keys.)

	/* PointerMode codes

	/* CoordinateMode code

       /* XTilt and YTilt values

	/* Wheel values

	/* ToolCode values, which BTW are 0x140 .. 0x14f

	 * We have things set up such that if the tool button has changed,

	 * the tools get reset.

	/* toolMode codes

	/* Diagnostic message codes

	/* Time to wait (in ms) to help mask hand jittering

	 * when pressing the stylus buttons.

	/* Time to wait (in ms) in-between sending the tablet

	 * a command and beginning the process of reading the return

	 * sequence from the tablet.

	/* Mouse button programming

	/* Stylus button programming

	/* Length of incoming packet from the tablet

	/* We report in EV_MISC both the proximity and

	 * whether the report came from the stylus, tablet mouse

	 * or "unknown" -- Unknown when the tablet is in relative

	 * mode, because we only get report 1's.

 Tablet manufacturer code       */

 Tablet model code (not unique) */

 prom/eeprom version            */

 device's physical usb path     */

 stylus-, mouse-only or either */

 absolute/relative coords      */

 pen, pencil, brush, etc. tool */

 synthetic xTilt amount        */

 synthetic yTilt amount        */

 synthetic wheel amount        */

 stylus upper btn delivers...  */

 stylus lower btn delivers...  */

 mouse left btn delivers...    */

 mouse middle btn delivers...  */

 mouse right btn delivers...   */

 delay for tablet programming  */

 delay for hand jittering      */

 input device struct           */

 usb interface struct          */

 urb for incoming reports      */

 our dma stuffage              */

 tablet's array of features    */

 tablet's current programmable */

 ... and new param settings    */

 interface number for IO       */

 tablet diagnostic codes       */

 event count                   */

 jitter: in jitter delay?      */

 jitter: time when delay ends  */

 jitterable prev value     */

 macro key to reset            */

 pen, pencil, brush, etc. tool */

 incoming packet data          */

/*

 * Permit easy lookup of keyboard events to send, versus

 * the bitmap which comes from the tablet. This hides the

 * issue that the F_keys are not sequentially numbered.

/***********************************************************************

 * Map values to strings and back. Every map should have the following

 * as its last element: { NULL, AIPTEK_INVALID_VALUE }.

/***********************************************************************

 * aiptek_irq can receive one of six potential reports.

 * The documentation for each is in the body of the function.

 *

 * The tablet reports on several attributes per invocation of

 * aiptek_irq. Because the Linux Input Event system allows the

 * transmission of ONE attribute per input_report_xxx() call,

 * collation has to be done on the other end to reconstitute

 * a complete tablet report. Further, the number of Input Event reports

 * submitted varies, depending on what USB report type, and circumstance.

 * To deal with this, EV_MSC is used to indicate an 'end-of-report'

 * message. This has been an undocumented convention understood by the kernel

 * tablet driver and clients such as gpm and XFree86's tablet drivers.

 *

 * Of the information received from the tablet, the one piece I

 * cannot transmit is the proximity bit (without resorting to an EV_MSC

 * convention above.) I therefore have taken over REL_MISC and ABS_MISC

 * (for relative and absolute reports, respectively) for communicating

 * Proximity. Why two events? I thought it interesting to know if the

 * Proximity event occurred while the tablet was in absolute or relative

 * mode.

 * Update: REL_MISC proved not to be such a good idea. With REL_MISC you

 * get an event transmitted each time. ABS_MISC works better, since it

 * can be set and re-set. Thus, only using ABS_MISC from now on.

 *

 * Other tablets use the notion of a certain minimum stylus pressure

 * to infer proximity. While that could have been done, that is yet

 * another 'by convention' behavior, the documentation for which

 * would be spread between two (or more) pieces of software.

 *

 * EV_MSC usage was terminated for this purpose in Linux 2.5.x, and

 * replaced with the input_sync() method (which emits EV_SYN.)

 Success */

 This urb is terminated, clean up */

	/* See if we are in a delay loop -- throw out report if true.

	/* Report 1 delivers relative coordinates with either a stylus

	 * or the mouse. You do not know, however, which input

	 * tool generated the event.

			/* jitterable keeps track of whether any button has been pressed.

			 * We're also using it to remap the physical mouse button mask

			 * to pseudo-settings. (We don't specifically care about it's

			 * value after moving/transposing mouse button bitmasks, except

			 * that a non-zero value indicates that one or more

			 * mouse button was pressed.)

			/* Wheel support is in the form of a single-event

			 * firing.

	/* Report 2 is delivered only by the stylus, and delivers

	 * absolute coordinates.

			/* Use jitterable to re-arrange button masks

			/* dv indicates 'data valid' (e.g., the tablet is in sync

			 * and has delivered a "correct" report) We will ignore

			 * all 'bad' reports...

				/* If the selected tool changed, reset the old

				 * tool key, and set the new one.

					/* Wheel support is in the form of a single-event

					 * firing.

	/* Report 3's come from the mouse in absolute mode.

				/* If the selected tool changed, reset the old

				 * tool key, and set the new one.

					/* Wheel support is in the form of a single-event

					 * firing.

	/* Report 4s come from the macro keys when pressed by stylus

		        /* If the selected tool changed, reset the old

			 * tool key, and set the new one.

	/* Report 5s come from the macro keys when pressed by mouse

		        /* If the selected tool changed, reset the old

			 * tool key, and set the new one.

	/* We have no idea which tool can generate a report 6. Theoretically,

	 * neither need to, having been given reports 4 & 5 for such use.

	 * However, report 6 is the 'official-looking' report for macroKeys;

	 * reports 4 & 5 supposively are used to support unnamed, unknown

	 * hat switches (which just so happen to be the macroKeys.)

		/* If the selected tool changed, reset the old

		   tool key, and set the new one.

	/* Jitter may occur when the user presses a button on the stlyus

	 * or the mouse. What we do to prevent that is wait 'x' milliseconds

	 * following a 'jitterable' event, which should give the hand some time

	 * stabilize itself.

	 *

	 * We just introduced aiptek->previousJitterable to carry forth the

	 * notion that jitter occurs when the button state changes from on to off:

	 * a person drawing, holding a button down is not subject to jittering.

	 * With that in mind, changing from upper button depressed to lower button

	 * WILL transition through a jitter delay.

/***********************************************************************

 * These are the USB id's known so far. We do not identify them to

 * specific Aiptek model numbers, because there has been overlaps,

 * use, and reuse of id's in existing models. Certain models have

 * been known to use more than one ID, indicative perhaps of

 * manufacturing revisions. In any event, we consider these

 * IDs to not be model-specific nor unique.

/***********************************************************************

 * Open an instance of the tablet driver.

/***********************************************************************

 * Close an instance of the tablet driver.

/***********************************************************************

 * aiptek_set_report and aiptek_get_report() are borrowed from Linux 2.4.x,

 * where they were known as usb_set_report and usb_get_report.

/***********************************************************************

 * Send a command to the tablet.

/***********************************************************************

 * Retrieve information from the tablet. Querying info is defined as first

 * sending the {command,data} sequence as a command, followed by a wait

 * (aka, "programmaticDelay") and then a "read" request.

/***********************************************************************

 * Program the tablet into either absolute or relative mode.

 * We also get information about the tablet's size.

 Execute Resolution500LPI */

 Query getModelCode */

 Query getODMCode */

 Query getFirmwareCode */

 Query getXextension */

 Query getYextension */

 Query getPressureLevels */

	/* Depending on whether we are in absolute or relative mode, we will

	 * do a switchToTablet(absolute) or switchToMouse(relative) command.

 Execute switchToTablet */

 Execute switchToMouse */

 Enable the macro keys */

 Execute FilterOn */

 Execute AutoGainOn */

	/* Reset the eventCount, so we track events from last (re)programming

/***********************************************************************

 * Sysfs functions. Sysfs prefers that individually-tunable parameters

 * exist in their separate pseudo-files. Summary data that is immutable

 * may exist in a singular file so long as you don't define a writeable

 * interface.

/***********************************************************************

 * support the 'size' file -- display support

/* These structs define the sysfs files, param #1 is the name of the

 * file, param 2 is the file permissions, param 3 & 4 are to the

 * output generator and input parser routines. Absence of a routine is

 * permitted -- it only means can't either 'cat' the file, or send data

 * to it.

/***********************************************************************

 * support routines for the 'pointer_mode' file. Note that this file

 * both displays current setting and allows reprogramming.

/***********************************************************************

 * support routines for the 'coordinate_mode' file. Note that this file

 * both displays current setting and allows reprogramming.

/***********************************************************************

 * support routines for the 'tool_mode' file. Note that this file

 * both displays current setting and allows reprogramming.

/***********************************************************************

 * support routines for the 'xtilt' file. Note that this file

 * both displays current setting and allows reprogramming.

/***********************************************************************

 * support routines for the 'ytilt' file. Note that this file

 * both displays current setting and allows reprogramming.

/***********************************************************************

 * support routines for the 'jitter' file. Note that this file

 * both displays current setting and allows reprogramming.

/***********************************************************************

 * support routines for the 'delay' file. Note that this file

 * both displays current setting and allows reprogramming.

/***********************************************************************

 * support routines for the 'event_count' file. Note that this file

 * only displays current setting.

/***********************************************************************

 * support routines for the 'diagnostic' file. Note that this file

 * only displays current setting.

/***********************************************************************

 * support routines for the 'stylus_upper' file. Note that this file

 * both displays current setting and allows for setting changing.

/***********************************************************************

 * support routines for the 'stylus_lower' file. Note that this file

 * both displays current setting and allows for setting changing.

/***********************************************************************

 * support routines for the 'mouse_left' file. Note that this file

 * both displays current setting and allows for setting changing.

/***********************************************************************

 * support routines for the 'mouse_middle' file. Note that this file

 * both displays current setting and allows for setting changing.

/***********************************************************************

 * support routines for the 'mouse_right' file. Note that this file

 * both displays current setting and allows for setting changing.

/***********************************************************************

 * support routines for the 'wheel' file. Note that this file

 * both displays current setting and allows for setting changing.

/***********************************************************************

 * support routines for the 'execute' file. Note that this file

 * both displays current setting and allows for setting changing.

	/* There is nothing useful to display, so a one-line manual

	 * is in order...

	/* We do not care what you write to this file. Merely the action

	 * of writing to this file triggers a tablet reprogramming.

/***********************************************************************

 * support routines for the 'odm_code' file. Note that this file

 * only displays current setting.

/***********************************************************************

 * support routines for the 'model_code' file. Note that this file

 * only displays current setting.

/***********************************************************************

 * support routines for the 'firmware_code' file. Note that this file

 * only displays current setting.

/***********************************************************************

 * This routine is called when a tablet has been identified. It basically

 * sets up the tablet and the driver's internal structures.

	/* programmableDelay is where the command-line specified

	 * delay is kept. We make it the first element of speeds[],

	 * so therefore, your override speed is tried first, then the

	 * remainder. Note that the default value of 400ms will be tried

	 * if you do not specify any command line parameter.

	/* Set up the curSettings struct. Said struct contains the current

	 * programmable parameters. The newSetting struct contains changes

	 * the user makes to the settings via the sysfs interface. Those

	 * changes are not "committed" to curSettings until the user

	 * writes to the sysfs/.../execute file.

	/* Both structs should have equivalent settings

	/* Determine the usb devices' physical path.

	 * Asketh not why we always pretend we're using "../input0",

	 * but I suspect this will have to be refactored one

	 * day if a single USB device can be a keyboard & a mouse

	 * & a tablet, and the inputX number actually will tell

	 * us something...

	/* Set up client data, pointers to open and close routines

	 * for the input device.

	/* Now program the capacities of the tablet, in terms of being

	 * an input device.

 Set up key and button codes */

	/*

	 * Program the input device coordinate capacities. We do not yet

	 * know what maximum X, Y, and Z values are, so we're putting fake

	 * values in. Later, we'll ask the tablet to put in the correct

	 * values.

 Verify that a device really has an endpoint */

	/* Go set up our URB, which is called when the tablet receives

	 * input.

	/* Program the tablet. This sets the tablet up in the mode

	 * specified in newSetting, and also queries the tablet's

	 * physical capacities.

	 *

	 * Sanity check: if a tablet doesn't like the slow programmatic

	 * delay, we often get sizes of 0x0. Let's use that as an indicator

	 * to try faster delays, up to 25 ms. If that logic fails, well, you'll

	 * have to explain to us how your tablet thinks it's 0x0, and yet that's

	 * not an error :-)

	/* Murphy says that some day someone will have a tablet that fails the

	/* Associate this driver's struct with the usb interface.

	/* Set up the sysfs files

	/* Register the tablet as an Input Device

/***********************************************************************

 * Deal with tablet disconnecting from the system.

	/* Disassociate driver's struct with usb interface

		/* Free & unhook everything from the system.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Wacom protocol 4 serial tablet driver

 *

 * Copyright 2014      Hans de Goede <hdegoede@redhat.com>

 * Copyright 2011-2012 Julian Squires <julian@cipht.net>

 *

 * Many thanks to Bill Seremetis, without whom PenPartner support

 * would not have been possible. Thanks to Patrick Mahoney.

 *

 * This driver was developed with reference to much code written by others,

 * particularly:

 *  - elo, gunze drivers by Vojtech Pavlik <vojtech@ucw.cz>;

 *  - wacom_w8001 driver by Jaya Kumar <jayakumar.lkml@gmail.com>;

 *  - the USB wacom input driver, credited to many people

 *    (see drivers/input/tablet/wacom.h);

 *  - new and old versions of linuxwacom / xf86-input-wacom credited to

 *    Frederic Lepied, France. <Lepied@XFree86.org> and

 *    Ping Cheng, Wacom. <pingc@wacom.com>;

 *  - and xf86wacom.c (a presumably ancient version of the linuxwacom code),

 *    by Frederic Lepied and Raph Levien <raph@gtk.org>.

 *

 * To do:

 *  - support pad buttons; (requires access to a model with pad buttons)

 *  - support (protocol 4-style) tilt (requires access to a > 1.4 rom model)

/*

 * Wacom serial protocol 4 documentation taken from linuxwacom-0.9.9 code,

 * protocol 4 uses 7 or 9 byte of data in the following format:

 *

 *	Byte 1

 *	bit 7  Sync bit always 1

 *	bit 6  Pointing device detected

 *	bit 5  Cursor = 0 / Stylus = 1

 *	bit 4  Reserved

 *	bit 3  1 if a button on the pointing device has been pressed

 *	bit 2  P0 (optional)

 *	bit 1  X15

 *	bit 0  X14

 *

 *	Byte 2

 *	bit 7  Always 0

 *	bits 6-0 = X13 - X7

 *

 *	Byte 3

 *	bit 7  Always 0

 *	bits 6-0 = X6 - X0

 *

 *	Byte 4

 *	bit 7  Always 0

 *	bit 6  B3

 *	bit 5  B2

 *	bit 4  B1

 *	bit 3  B0

 *	bit 2  P1 (optional)

 *	bit 1  Y15

 *	bit 0  Y14

 *

 *	Byte 5

 *	bit 7  Always 0

 *	bits 6-0 = Y13 - Y7

 *

 *	Byte 6

 *	bit 7  Always 0

 *	bits 6-0 = Y6 - Y0

 *

 *	Byte 7

 *	bit 7 Always 0

 *	bit 6  Sign of pressure data; or wheel-rel for cursor tool

 *	bit 5  P7; or REL1 for cursor tool

 *	bit 4  P6; or REL0 for cursor tool

 *	bit 3  P5

 *	bit 2  P4

 *	bit 1  P3

 *	bit 0  P2

 *

 *	byte 8 and 9 are optional and present only

 *	in tilt mode.

 *

 *	Byte 8

 *	bit 7 Always 0

 *	bit 6 Sign of tilt X

 *	bit 5  Xt6

 *	bit 4  Xt5

 *	bit 3  Xt4

 *	bit 2  Xt3

 *	bit 1  Xt2

 *	bit 0  Xt1

 *

 *	Byte 9

 *	bit 7 Always 0

 *	bit 6 Sign of tilt Y

 *	bit 5  Yt6

 *	bit 4  Yt5

 *	bit 3  Yt4

 *	bit 2  Yt3

 *	bit 1  Yt2

 *	bit 0  Yt1

/*

 * Note: sending "\r$\r" causes at least the Digitizer II to send

 * packets in ASCII instead of binary.  "\r#" seems to undo that.

 Note that this is a protocol 4 packet without tilt information. */

 flags */

 device IDs */

 PL */

 DT */

 UD */

 ET */

 CT */

 KT */

 UNTESTED */

 PL-710 */

 PL-550 */

 PL-800 */

 UNTESTED */

 handle relative wheel for non-stylus device */

	/*

	 * We're either expecting a carriage return-terminated ASCII

	 * response string, or a seven-byte packet with the MSB set on

	 * the first byte.

	 *

	 * Note however that some tablets (the PenPartner, for

	 * example) don't send a carriage return at the end of a

	 * command.  We handle these by waiting for timeout.

 Leave place for 0 termination */

 UNTESTED */

 Timeout, process what we've received. */

	/* Note that setting the link speed is the job of inputattach.

	 * We assume that reset negotiation has already happened,

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1998-2001 Vojtech Pavlik

/*

 * PDPI Lightning 4 gamecard driver for Linux.

/*

 80 us */

/*

 * l4_wait_ready() waits for the L4 to become ready.

/*

 * l4_cooked_read() reads data from the Lightning 4.

/*

 * l4_getcal() reads the L4 with calibration values.

/*

 * l4_setcal() programs the L4 with calibration values.

/*

 * l4_calibrate() calibrates the L4 for the attached device, so

 * that the device's resistance fits into the L4's 8-bit range.

 on 2.9+ the setcal command works correctly */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 2001 Vojtech Pavlik

/*

 * EMU10k1 - SB Live / Audigy - gameport driver for Linux

/*

 SB Live gameport */

 Audigy gameport */

 Dell SB Live */

 Audigy LS gameport */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999-2001 Vojtech Pavlik

 *  Copyright (c) 1999 Brian Gerst

/*

 * NS558 based standard IBM game port driver for Linux

/*

/*

 * ns558_isa_probe() tries to find an isa gameport at the

 * specified address, and also checks for mirrors.

 * A joystick must be attached for this to work.

/*

 * No one should be using this address.

/*

 * We must not be able to write arbitrary values to the port.

 * The lower two axis bits must be 1 after a write.

/*

 * After a trigger, there must be at least some bits changing.

/*

 * After some time (4ms) the axes shouldn't change anymore.

/*

 * And now find the number of mirrors of the port.

 Don't disturb anyone */

 We allow 30% difference */

 ALS 100 */

 ALS 200 */

 ALS 100+ */

 ALS 120 */

 AdLib NSC16 */

 AZT1008 */

 Opl3-SAx */

 CS4232 */

 CS4236 */

 CS4327 */

 SB16 */

 AWE64 */

 Vibra16 */

 SoundscapeVIVO */

 ES1869 */

 ES1878 */

 ES688 */

 CS4232 */

 OPTi Audio16 */

 Opl3-SA */

 Opl3-SAx */

 Generic */

 should be ENOSYS really */

/*

 * Probe ISA ports after PnP, so that PnP ports that are already

 * enabled get detected as PnP. This may be suboptimal in multi-device

 * configurations, but saves hassle with simple setups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic gameport layer

 *

 * Copyright (c) 1999-2002 Vojtech Pavlik

 * Copyright (c) 2005 Dmitry Torokhov

 HZ */

#include <asm/io.h>*/

/*

 * gameport_mutex protects entire gameport subsystem and is taken

 * every time gameport port or driver registrered or unregistered.

/*

 * gameport_measure_speed() measures the gameport i/o speed.

/*

 * Basic gameport -> driver core mappings

/*

 * Gameport event processing.

 protects gameport_event_list */

			/*

			 * If this event is of different type we should not

			 * look further - we only suppress duplicate events

			 * that were sent back-to-back.

	/*

	 * Note that we handle only one event here to give swsusp

	 * a chance to freeze kgameportd thread. Gameport events

	 * should be pretty rare so we are not concerned about

	 * taking performance hit.

	/*

	 * Scan event list for the other events for the same gameport port,

	 * starting with the most recent one. If event is the same we

	 * do not need add new one. If event is of different type we

	 * need to add this event and should not look further because

	 * we need to preserve sequence of distinct events.

/*

 * Remove all events that have been submitted for a given object,

 * be it a gameport port or a driver.

/*

 * Destroy child gameport port (if any) that has not been fully registered yet.

 *

 * Note that we rely on the fact that port can have only one child and therefore

 * only one child registration request can be pending. Additionally, children

 * are registered by driver's connect() handler so there can't be a grandchild

 * pending registration together with a child.

/*

 * Gameport port operations

/*

 * Prepare gameport port for registration.

/*

 * Complete gameport port registration.

 * Driver core will attempt to find appropriate driver for the port.

/*

 * gameport_destroy_port() completes deregistration process and removes

 * port from the system

/*

 * Reconnect gameport port and all its children (re-initialize attached devices)

 Ok, old children are now gone, we are done */

/*

 * gameport_disconnect_port() unbinds a port from its driver. As a side effect

 * all child ports are unbound and destroyed.

		/*

		 * Children ports should be disconnected and destroyed

		 * first, staring with the leaf one, since we don't want

		 * to do recursion

 empty */;

	/*

	 * Ok, no children left, now disconnect this port

/*

 * Submits register request to kgameportd for subsequent execution.

 * Note that port registration is always asynchronous.

/*

 * Synchronously unregisters gameport port.

/*

 * Gameport driver operations

	/*

	 * Temporarily disable automatic binding because probing

	 * takes long time and we are better off doing it in kgameportd

	/*

	 * Reset ignore flag and let kgameportd bind the driver to free ports

 so gameport_find_driver ignores it */

 we could've deleted some ports, restart */

	/*

	 * There should not be any outstanding events but work may

	 * still be scheduled so simply cancel it.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  FM801 gameport driver for Linux

 *

 *  Copyright (c) by Takashi Iwai <tiwai@suse.de>

 reset */

 enable joystick 1 and 2 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pwrseq_sd8787.c - power sequence support for Marvell SD8787 BT + Wifi chip

 *

 * Copyright (C) 2016 Matt Ranostay <matt@ranostay.consulting>

 *

 * Based on the original work pwrseq_simple.c

 *  Copyright (C) 2014 Linaro Ltd

 *  Author: Ulf Hansson <ulf.hansson@linaro.org>

 sentinel */},

 SPDX-License-Identifier: GPL-2.0

/*

 * Helper functions for MMC regulators.

/**

 * mmc_ocrbitnum_to_vdd - Convert a OCR bit number to its voltage

 * @vdd_bit:	OCR bit number

 * @min_uV:	minimum voltage value (mV)

 * @max_uV:	maximum voltage value (mV)

 *

 * This function returns the voltage range according to the provided OCR

 * bit number. If conversion is not possible a negative errno value returned.

	/*

	 * REVISIT mmc_vddrange_to_ocrmask() may have set some

	 * bits this regulator doesn't quite support ... don't

	 * be too picky, most cards and regulators are OK with

	 * a 0.1V range goof (it's a small error percentage).

/**

 * mmc_regulator_get_ocrmask - return mask of supported voltages

 * @supply: regulator to use

 *

 * This returns either a negative errno, or a mask of voltages that

 * can be provided to MMC/SD/SDIO devices using the specified voltage

 * regulator.  This would normally be called before registering the

 * MMC host adapter.

/**

 * mmc_regulator_set_ocr - set regulator to match host->ios voltage

 * @mmc: the host to regulate

 * @supply: regulator to use

 * @vdd_bit: zero for power off, else a bit number (host->ios.vdd)

 *

 * Returns zero on success, else negative errno.

 *

 * MMC host drivers may use this to enable or disable a regulator using

 * a particular supply voltage.  This would normally be called from the

 * set_ios() method.

	/*

	 * Check if supported first to avoid errors since we may try several

	 * signal levels during power up and don't want to show errors.

	/*

	 * The voltage is already set, no need to switch.

	 * Return 1 to indicate that no switch happened.

/**

 * mmc_regulator_set_vqmmc - Set VQMMC as per the ios

 * @mmc: the host to regulate

 * @ios: io bus settings

 *

 * For 3.3V signaling, we try to match VQMMC to VMMC as closely as possible.

 * That will match the behavior of old boards where VQMMC and VMMC were supplied

 * by the same supply.  The Bus Operating conditions for 3.3V signaling in the

 * SD card spec also define VQMMC in terms of VMMC.

 * If this is not possible we'll try the full 2.7-3.6V of the spec.

 *

 * For 1.2V and 1.8V signaling we'll try to get as close as possible to the

 * requested voltage.  This is definitely a good idea for UHS where there's a

 * separate regulator on the card that's trying to make 1.8V and it's best if

 * we match.

 *

 * This function is expected to be used by a controller's

 * start_signal_voltage_switch() function.

 If no vqmmc supply then we can't change the voltage */

		/*

		 * Due to a limitation in the current implementation of

		 * regulator_set_voltage_triplet() which is taking the lowest

		 * voltage possible if below the target, search for a suitable

		 * voltage in two steps and try to stay close to vmmc

		 * with a 0.3V tolerance at first.

 CONFIG_REGULATOR */

/**

 * mmc_regulator_get_supply - try to get VMMC and VQMMC regulators for a host

 * @mmc: the host to regulate

 *

 * Returns 0 or errno. errno should be handled, it is either a critical error

 * or -EPROBE_DEFER. 0 means no critical error but it does not mean all

 * regulators have been found because they all are optional. If you require

 * certain regulators, you need to check separately in your driver if they got

 * populated after calling this function.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/mmc/core/sd_ops.h

 *

 *  Copyright 2006-2007 Pierre Ossman

 Check that card supported application commands */

	/*

	 * We have to resend MMC_APP_CMD for each attempt so

	 * we cannot use the retries field in mmc_command.

 no point in retrying; no APP commands allowed */

 no point in retrying illegal APP commands */

 SPI only defines one bit */

 if we're just probing, do a single pass */

 otherwise wait until reset completes */

	/*

	 * To support SD 2.0 cards, we must always invoke SD_SEND_IF_COND

	 * before SD_APP_OP_COND. This command will harmlessly fail for

	 * SD 1.0 cards.

 Probe card for SD express support via PCIe. */

 Probe also for 1.2V support. */

 Continue with the SD express init, if the card supports it. */

		/*

		 * According to the spec the clock shall also be gated, but

		 * let's leave this to the host driver for more flexibility.

 NOTE: caller guarantees scr is heap-allocated */

	/* dma onto stack is unsafe/nonportable, but callers to this

	 * routine normally provide temporary on-stack buffers ...

 NOTE: caller guarantees resp is heap-allocated */

 NOTE: caller guarantees ssr is heap-allocated */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mmc/core/bus.c

 *

 *  Copyright (C) 2003 Russell King, All Rights Reserved.

 *  Copyright (C) 2007 Pierre Ossman

 *

 *  MMC card bus driver model

/*

 * This currently matches any MMC driver to any MMC card - drivers

 * themselves make the decision whether to drive this card in their

 * probe method.

	/*

	 * SDIO (non-combo) cards are not handled by mmc_block driver and do not

	 * have accessible CID register which used by mmc_card_name() function.

	/*

	 * Request the mmc_block device.  Note: that this is a direct request

	 * for the module it carries no information as to what is inserted.

 !CONFIG_PM */

/**

 *	mmc_register_driver - register a media driver

 *	@drv: MMC media driver

/**

 *	mmc_unregister_driver - unregister a media driver

 *	@drv: MMC media driver

/*

 * Allocate and initialise a new MMC card structure.

/*

 * Register a new MMC card with the driver model.

/*

 * Unregister a new MMC card with the driver model, and

 * (eventually) free it.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015, Samsung Electronics Co., Ltd.

 *

 * Author: Marek Szyprowski <m.szyprowski@samsung.com>

 *

 * Simple eMMC hardware reset provider

		/*

		 * register reset handler to ensure emmc reset also from

		 * emergency_reboot(), priority 255 is the highest priority

		 * so it will be executed before any system reboot handler.

 sentinel */},

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SDIO UART/GPS driver

 *

 * Based on drivers/serial/8250.c and drivers/serial/serial_core.c

 * by Russell King.

 *

 * Author:	Nicolas Pitre

 * Created:	June 15, 2007

 * Copyright:	MontaVista Software, Inc.

/*

 * Note: Although this driver assumes a 16550A-like UART implementation,

 * it is not possible to leverage the common 8250/16550 driver, nor the

 * core UART infrastructure, as they assumes direct access to the hardware

 * registers, often under a spinlock.  This is not possible in the SDIO

 * context as SDIO access functions must be able to sleep.

 *

 * Because we need to lock the SDIO host to ensure an exclusive access to

 * the card, we simply rely on that lock to also prevent and serialize

 * concurrent access to the same port.

 Number of UARTs this driver can handle */

	/*

	 * We're killing a port that potentially still is in use by

	 * the tty layer. Be careful to prevent any further access

	 * to the SDIO function and arrange for the tty layer to

	 * give up on that port ASAP.

	 * Beware: the lock ordering is critical.

 tty_hangup is async so is this safe as is ?? */

	/* FIXME: What stops this losing the delta bits and breaking

 Special case: B0 rate. */

		/*

		 * Oops, the quotient was zero.  Try again with the old

		 * baud rate if possible, otherwise default to 9600.

	/*

	 * Characters to ignore

		/*

		 * If we're ignoring parity and break indicators,

		 * ignore overruns too (for real raw support).

	/*

	 * ignore all characters if CREAD is not set

	/*

	 * CTS flow control flag and modem status interrupts

			/*

			 * For statistics only

			/*

			 * Mask off conditions which should be ignored.

		/*

		 * Overrun is special.  Since it's reported immediately,

		 * it doesn't affect the current character.

 DCD raise - wake for open */

 DCD drop - hang up if tty attached */

/*

 * This handles the interrupt from one port.

	/*

	 * In a few places sdio_uart_irq() is called directly instead of

	 * waiting for the actual interrupt to be raised and the SDIO IRQ

	 * thread scheduled in order to reduce latency.  However, some

	 * interaction with the tty core may end up calling us back

	 * (serial echo, flow control, etc.) through those same places

	 * causing undesirable effects.  Let's stop the recursion here.

 Missing hardware shouldn't block for carrier */

/**

 *	uart_dtr_rts		-	 port helper to set uart signals

 *	@tport: tty port to be updated

 *	@onoff: set to turn on DTR/RTS

 *

 *	Called by the tty port helpers when the modem signals need to be

 *	adjusted during an open, close and hangup.

/**

 *	sdio_uart_activate	-	start up hardware

 *	@tport: tty port to activate

 *	@tty: tty bound to this port

 *

 *	Activate a tty port. The port locking guarantees us this will be

 *	run exactly once per set of opens, and if successful will see the

 *	shutdown method run exactly once to match. Start up and shutdown are

 *	protected from each other by the internal locking and will not run

 *	at the same time even during a hangup event.

 *

 *	If we successfully start up the port we take an extra kref as we

 *	will keep it around until shutdown when the kref is dropped.

	/*

	 * Set the TTY IO error marker - we will only clear this

	 * once we have successfully opened the port.

	/*

	 * Clear the FIFO buffers and disable them.

	 * (they will be reenabled in sdio_change_speed())

	/*

	 * Clear the interrupt registers.

	/*

	 * Now, initialize the UART

 Kick the IRQ handler once while we're still holding the host lock */

/**

 *	sdio_uart_shutdown	-	stop hardware

 *	@tport: tty port to shut down

 *

 *	Deactivate a tty port. The port locking guarantees us this will be

 *	run only if a successful matching activate already ran. The two are

 *	protected from each other by the internal locking and will not run

 *	at the same time even during a hangup event.

 Disable interrupts from this port */

 Disable break condition and FIFOs. */

/**

 *	sdio_uart_install	-	install method

 *	@driver: the driver in use (sdio_uart in our case)

 *	@tty: the tty being bound

 *

 *	Look up and bind the tty and the driver together. Initialize

 *	any needed private data (in our case the termios)

 This is the ref sdio_uart_port get provided */

/**

 *	sdio_uart_cleanup	-	called on the last tty kref drop

 *	@tty: the tty being destroyed

 *

 *	Called asynchronously when the last reference to the tty is dropped.

 *	We cannot destroy the tty->driver_data port kref until this point

 Bug trap */

/*

 *	Open/close/hangup is now entirely boilerplate

 Handle transition to B0 status */

 Handle transition away from B0 status */

 Handle turning off CRTSCTS */

 Handle turning on CRTSCTS */

		/*

		 * We need tuple 0x91.  It contains SUBTPL_SIOREG

		 * and SUBTPL_RCVCAPS.

 SUBTPL_SIOREG */

 end: all zeroes */				},

 dynamically allocated */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright 2007-2008 Pierre Ossman

/*

 * Limit the test area size to the maximum MMC HC erase group size.  Note that

 * the maximum SD allocation unit size is just 4MiB.

/**

 * struct mmc_test_pages - pages allocated by 'alloc_pages()'.

 * @page: first page in the allocation

 * @order: order of the number of pages allocated

/**

 * struct mmc_test_mem - allocated memory.

 * @arr: array of allocations

 * @cnt: number of allocations

/**

 * struct mmc_test_area - information for performance tests.

 * @max_sz: test area size (in bytes)

 * @dev_addr: address on card at which to do performance tests

 * @max_tfr: maximum transfer size allowed by driver (in bytes)

 * @max_segs: maximum segments allowed by driver in scatterlist @sg

 * @max_seg_sz: maximum segment size allowed by driver

 * @blocks: number of (512 byte) blocks currently mapped by @sg

 * @sg_len: length of currently mapped scatterlist @sg

 * @mem: allocated memory

 * @sg: scatterlist

 * @sg_areq: scatterlist for non-blocking request

/**

 * struct mmc_test_transfer_result - transfer results for performance tests.

 * @link: double-linked list

 * @count: amount of group of sectors to check

 * @sectors: amount of sectors to check in one group

 * @ts: time values of transfer

 * @rate: calculated transfer rate

 * @iops: I/O operations per second (times 100)

/**

 * struct mmc_test_general_result - results for tests.

 * @link: double-linked list

 * @card: card under test

 * @testcase: number of test case

 * @result: result of test run

 * @tr_lst: transfer measurements if any as mmc_test_transfer_result

/**

 * struct mmc_test_dbgfs_file - debugfs related file.

 * @link: double-linked list

 * @card: card under test

 * @file: file created under debugfs

/**

 * struct mmc_test_card - test information.

 * @card: card under test

 * @scratch: transfer buffer

 * @buffer: transfer buffer

 * @highmem: buffer for highmem tests

 * @area: information for performance tests

 * @gr: pointer to results of current testcase

******************************************************************/

  General helper functions                                       */

******************************************************************/

/*

 * Configure correct block size in card

/*

 * Fill in the mmc_request structure given a set of transfer parameters.

/*

 * Wait for the card to finish the busy state

/*

 * Transfer a single sector of kernel addressable data

/*

 * Allocate a lot of memory, preferably max_sz but at least min_sz.  In case

 * there isn't much memory do not exceed 1/16th total lowmem pages.  Also do

 * not exceed a maximum number of segments and try not to make segments much

 * bigger than maximum segment size.

/*

 * Map memory into a scatterlist.  Optionally allow the same memory to be

 * mapped more than once.

/*

 * Map memory into a scatterlist so that no pages are contiguous.  Allow the

 * same memory to be mapped more than once.

/*

 * Calculate transfer rate in bytes per second.

/*

 * Save transfer results for future usage

/*

 * Print the transfer rate.

 I/O ops per sec x 100 */

/*

 * Print the average transfer rate.

 I/O ops per sec x 100 */

/*

 * Return the card size in sectors.

******************************************************************/

  Test preparation and cleanup                                   */

******************************************************************/

/*

 * Fill the first couple of sectors of the card with known data

 * so that bad reads/writes can be detected

******************************************************************/

  Test execution helpers                                         */

******************************************************************/

/*

 * Modifies the mmc_request to perform the "short transfer" tests

/*

 * Checks that a normal transfer didn't have any errors

/*

 * Checks that a "short transfer" behaved as expected

/*

 * Tests nonblock transfer with certain parameters

/*

 * Tests a basic transfer with certain parameters

/*

 * Tests a transfer where the card will fail completely or partly

/*

 * Does a complete transfer test where data is also validated

 *

 * Note: mmc_test_prepare() must have been done before this call

******************************************************************/

  Tests                                                          */

******************************************************************/

 CONFIG_HIGHMEM */

/*

 * Map sz bytes so that it can be transferred.

/*

 * Transfer bytes mapped by mmc_test_area_map().

/*

 * Map and transfer bytes for multiple transfers.

	/*

	 * In the case of a maximally scattered transfer, the maximum transfer

	 * size is further limited by using PAGE_SIZE segments.

/*

 * Write the test area entirely.

/*

 * Erase the test area entirely.

/*

 * Cleanup struct mmc_test_area.

/*

 * Initialize an area for testing large transfers.  The test area is set to the

 * middle of the card because cards may have different characteristics at the

 * front (for FAT file system optimization).  Optionally, the area is erased

 * (if the card supports it) which may improve write performance.  Optionally,

 * the area is filled with data for subsequent read tests.

 Make the test area size about 4MiB */

	/*

	 * Try to allocate enough memory for a max. sized transfer.  Less is OK

	 * because the same memory can be mapped into the scatterlist more than

	 * once.  Also, take into account the limits imposed on scatterlist

	 * segments by the host driver.

/*

 * Prepare for large transfers.  Do not erase the test area.

/*

 * Prepare for large transfers.  Do erase the test area.

/*

 * Prepare for large transfers.  Erase and fill the test area.

/*

 * Test best-case performance.  Best-case performance is expected from

 * a single large transfer.

 *

 * An additional option (max_scatter) allows the measurement of the same

 * transfer but with no contiguous pages in the scatter list.  This tests

 * the efficiency of DMA to handle scattered pages.

/*

 * Best-case read performance.

/*

 * Best-case write performance.

/*

 * Best-case read performance into scattered pages.

/*

 * Best-case write performance from scattered pages.

/*

 * Single read performance by transfer size.

/*

 * Single write performance by transfer size.

/*

 * Single trim performance by transfer size.

/*

 * Consecutive read performance by transfer size.

/*

 * Consecutive write performance by transfer size.

/*

 * Consecutive trim performance by transfer size.

		/*

		 * When writing, try to get more consistent results by running

		 * the test twice with exactly the same I/O but outputting the

		 * results only for the 2nd run.

/*

 * Random read performance by transfer size.

/*

 * Random write performance by transfer size.

	/*

	 * In the case of a maximally scattered transfer, the maximum transfer

	 * size is further limited by using PAGE_SIZE segments.

 Round to 64MiB boundary */

/*

 * Large sequential read performance.

/*

 * Large sequential write performance.

 Set up test area */

 Round to 64MiB boundary */

 Round to 1MiB boundary */

 prepare test area */

 Run test */

/*

 * Multiple blocking write 4k to 4 MB chunks

/*

 * Multiple non-blocking write 4k to 4 MB chunks

/*

 * Multiple blocking read 4k to 4 MB chunks

/*

 * Multiple non-blocking read 4k to 4 MB chunks

/*

 * Multiple blocking write 1 to 512 sg elements

/*

 * Multiple non-blocking write 1 to 512 sg elements

/*

 * Multiple blocking read 1 to 512 sg elements

/*

 * Multiple non-blocking read 1 to 512 sg elements

/*

 * eMMC hardware reset.

		/*

		 * Reset will re-enable the card's command queue, but tests

		 * expect it to be disabled.

 Start ongoing data request */

 Send status command while data transfer in progress */

 Wait for data request to complete */

	/*

	 * For cap_cmd_during_tfr request, upper layer must send stop if

	 * required.

/*

 * Commands during read - no Set Block Count (CMD23).

/*

 * Commands during write - no Set Block Count (CMD23).

/*

 * Commands during read - use Set Block Count (CMD23).

/*

 * Commands during write - use Set Block Count (CMD23).

/*

 * Commands during non-blocking read - use Set Block Count (CMD23).

/*

 * Commands during non-blocking write - use Set Block Count (CMD23).

 CONFIG_HIGHMEM */

 Assign data what we know already */

 Append container to global one */

			/*

			 * Save the pointer to created container in our private

			 * structure.

 Save the result */

	/*

	 * Remove all test cases associated with given card. Thus we have only

	 * actual data of the last run.

 Clear stalled data if card is still plugged */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mmc/core/sd.c

 *

 *  Copyright (C) 2003-2004 Russell King, All Rights Reserved.

 *  SD support Copyright (C) 2004 Ian Molton, All Rights Reserved.

 *  Copyright (C) 2005-2007 Pierre Ossman, All Rights Reserved.

/*

 * Given the decoded CSD structure, decode the raw CID to our CID structure.

	/*

	 * SD doesn't currently have a version field so we will

	 * have to assume we can parse this.

 SD cards year offset */

/*

 * Given a 128-bit response, decode to our card CSD structure.

		/*

		 * This is a block-addressed SDHC or SDXC card. Most

		 * interesting fields are unused and have fixed

		 * values. To avoid getting tripped by buggy cards,

		 * we assume those fixed values ourselves.

 Unused */

 Unused */

 SDXC cards have a minimum C_SIZE of 0x00FFFF */

 Unused */

/*

 * Given a 64-bit response, decode to our card SCR structure.

 Check if Physical Layer Spec v3.0 is supported */

 SD Spec says: any SD Card shall set at least bits 0 and 2 */

/*

 * Fetch and process SD Status register.

	/*

	 * UNSTUFF_BITS only works with four u32s so we have to offset the

	 * bitfield positions accordingly.

	/*

	 * starting SD5.1 discard is supported if DISCARD_SUPPORT (b313) is set

/*

 * Fetches and decodes switch information

	/*

	 * Find out the card's support bits with a mode 0 operation.

	 * The argument does not matter, as the support bits do not

	 * change with the arguments.

		/*

		 * If the host or the card can't do the switch,

		 * fail more gracefully.

 Driver Strengths supported by the card */

/*

 * Test if the card supports high-speed mode and, if so, switch to it.

	/*

	 * If the host doesn't support any of the UHS-I modes, fallback on

	 * default speed.

 Get host's max current setting at its current voltage */

	/*

	 * Current limit switch is only defined for SDR50, SDR104, and DDR50

	 * bus speed modes. For other bus speed modes, we do not change the

	 * current limit.

	/*

	 * Host has different current capabilities when operating at

	 * different voltages, so find out its max current first.

	/*

	 * We only check host's capability here, if we set a limit that is

	 * higher than the card's maximum current, the card will be using its

	 * maximum current, e.g. if the card's maximum current is 300ma, and

	 * when we set current limit to 200ma, the card will draw 200ma, and

	 * when we set current limit to 400/600/800ma, the card will draw its

	 * maximum 300ma from the host.

	 *

	 * The above is incorrect: if we try to set a current limit that is

	 * not supported by the card, the card can rightfully error out the

	 * attempt, and remain at the default current limit.  This results

	 * in a 300mA card being limited to 200mA even though the host

	 * supports 800mA. Failures seen with SanDisk 8GB UHS cards with

	 * an iMX6 host. --rmk

/*

 * UHS-I specific initialization procedure

 Set 4-bit bus width */

	/*

	 * Select the bus speed mode depending on host

	 * and card capability.

 Set the driver strength for the card */

 Set current limit for the card */

 Set bus speed mode of the card */

	/*

	 * SPI mode doesn't define CMD19 and tuning is only valid for SDR50 and

	 * SDR104 mode SD-cards. Note that tuning is mandatory for SDR104.

		/*

		 * As SD Specifications Part1 Physical Layer Specification

		 * Version 3.01 says, CMD19 tuning is available for unlocked

		 * cards in transfer state of 1.8V signaling mode. The small

		 * difference between v3.00 and 3.01 spec means that CMD19

		 * tuning is also available for DDR50 mode.

 return default DSR value */

 CIS vendor and device ids, revision and info string are available only for Combo cards */

/*

 * Fetch CID from card.

	/*

	 * Since we're changing the OCR value, we seem to

	 * need to tell some cards to go back to the idle

	 * state.  We wait 1ms to give cards time to

	 * respond.

	/*

	 * If SD_SEND_IF_COND indicates an SD 2.0

	 * compliant card and we should set bit 30

	 * of the ocr to indicate that we can handle

	 * block-addressed SDHC cards.

	/*

	 * If the host supports one of UHS-I modes, request the card

	 * to switch to 1.8V signaling level. If the card has failed

	 * repeatedly to switch however, skip this.

	/*

	 * If the host can supply more than 150mA at current voltage,

	 * XPC should be set to 1.

	/*

	 * In case the S18A bit is set in the response, let's start the signal

	 * voltage switch procedure. SPI mode doesn't support CMD11.

	 * Note that, according to the spec, the S18A bit is not valid unless

	 * the CCS bit is set as well. We deliberately deviate from the spec in

	 * regards to this, which allows UHS-I to be supported for SDSC cards.

	/*

	 * Fetch CSD from card.

	/*

	 * Some systems don't feature a write-protect pin and don't need one.

	 * E.g. because they only have micro-SD card slot. For those systems

	 * assume that the SD card is always read-write.

		/*

		 * Fetch SCR from card.

		/*

		 * Fetch and process SD Status register.

 Erase init depends on CSD and SSR */

		/*

		 * Fetch switch information from card.

	/*

	 * For SPI, enable CRC as appropriate.

	 * This CRC enable is located AFTER the reading of the

	 * card registers because some SDHC cards are not able

	 * to provide valid CRCs for non-512-byte blocks.

	/*

	 * Check if read-only switch is active.

	/*

	 * According to the SD spec., the Bus Speed Mode (function group 1) bits

	 * 2 to 4 are zero if the card is initialized at 3.3V signal level. Thus

	 * they can be used to determine if the card has already switched to

	 * 1.8V signaling.

	/*

	 * Arguments of CMD49:

	 * [31:31] MIO (0 = memory).

	 * [30:27] FNO (function number).

	 * [26:26] MW - mask write mode (0 = disable).

	 * [25:18] page number.

	 * [17:9] offset address.

	 * [8:0] length (0 = 1 byte).

 The first byte in the buffer is the data to be written. */

	/*

	 * Note that, the SD card is allowed to signal busy on DAT0 up to 1s

	 * after the CMD49. Although, let's leave this to be managed by the

	 * caller.

	/*

	 * Command arguments of CMD48:

	 * [31:31] MIO (0 = memory).

	 * [30:27] FNO (function number).

	 * [26:26] reserved (0).

	 * [25:18] page number.

	 * [17:9] offset address.

	 * [8:0] length (0 = 1 byte, 1ff = 512 bytes).

 Read the extension register for power management function. */

 PM revision consists of 4 bits. */

 Power Off Notification support at bit 4. */

 Power Sustenance support at bit 5. */

 Power Down Mode support at bit 6. */

 PERF revision. */

 FX_EVENT support at bit 0. */

 Card initiated self-maintenance support at bit 0. */

 Host initiated self-maintenance support at bit 1. */

 Cache support at bit 0. */

 Command queue support indicated via queue depth bits (0 to 4). */

	/*

	 * Parse only one register set per extension, as that is sufficient to

	 * support the standard functions. This means another 48 bytes in the

	 * buffer must be available.

 Standard Function Code */

 Address to the next extension. */

 Number of registers for this extension. */

 We support only one register per extension. */

 Extension register address. */

 9 bits (0 to 8) contains the offset address. */

 8 bits (9 to 16) contains the page number. */

 4 bits (18 to 21) contains the function number. */

 Standard Function Code for power management. */

 Standard Function Code for performance enhancement. */

	/*

	 * Read 512 bytes of general info, which is found at function number 0,

	 * at page 0 and with no offset.

 General info structure revision. */

 Length of general info in bytes. */

 Number of extensions to be find. */

 We support revision 0, but limit it to 512 bytes for simplicity. */

	/*

	 * Parse the extension registers. The first extension should start

	 * immediately after the general info header (16 bytes).

	/*

	 * Set Flush Cache at bit 0 in the performance enhancement register at

	 * 261 bytes offset.

	/*

	 * Read the Flush Cache bit. The card shall reset it, to confirm that

	 * it's has completed the flushing of the cache.

	/*

	 * Set Cache Enable at bit 0 in the performance enhancement register at

	 * 260 bytes offset.

/*

 * Handle the detection and initialisation of a card.

 *

 * In the case of a resume, "oldcard" will contain the card

 * we're trying to reinitialise.

		/*

		 * Allocate card structure.

	/*

	 * Call the optional HC's init_card function to handle quirks.

	/*

	 * For native busses:  get card RCA and quit open drain mode.

	/*

	 * handling only for cards supporting DSR and hosts requesting

	 * DSR configuration

	/*

	 * Select card, as all following commands rely on that.

	/*

	 * If the card has not been power cycled, it may still be using 1.8V

	 * signaling. Detect that situation and try to initialize a UHS-I (1.8V)

	 * transfer mode.

		/*

		 * Re-read switch information in case it has changed since

		 * oldcard was initialized.

 Initialization sequence for UHS-I cards */

		/*

		 * Attempt to change to high-speed (if supported)

		/*

		 * Set bus speed.

		/*

		 * Switch to wider bus (if supported).

 Read/parse the extension registers. */

 Enable internal SD cache if supported. */

/*

 * Host is being removed. Free up the current card.

/*

 * Card detection - card is alive.

/*

 * Card detection callback from host.

	/*

	 * Just check if our card has been removed.

	/*

	 * Read the status register for the power management function. It's at

	 * one byte offset and is one byte long. The Power Off Notification

	 * Ready is bit 0.

	/*

	 * Set the Power Off Notification bit in the power management settings

	 * register at 2 bytes offset.

/*

 * Callback for suspend

/*

 * This function tries to determine if the same card is still present

 * and, if so, restore all state to it.

/*

 * Callback for resume

/*

 * Callback for runtime_suspend.

/*

 * Callback for runtime_resume.

/*

 * Starting point for SD card init.

	/*

	 * We need to get OCR a different way for SPI.

	/*

	 * Some SD cards claims an out of spec VDD voltage range. Let's treat

	 * these bits as being in-valid and especially also bit7.

	/*

	 * Can we support the voltage(s) of the card(s)?

	/*

	 * Detect and init the card.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MMC crypto engine (inline encryption) support

 *

 * Copyright 2020 Google LLC

 Reset might clear all keys, so reprogram all the keys. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic GPIO card-detect helper

 *

 * Copyright (C) 2011, Guennadi Liakhovetski <g.liakhovetski@gmx.de>

 Schedule a card detection after a debounce timeout */

	/*

	 * Do not use IRQ if the platform prefers to poll, e.g., because that

	 * IRQ number is already used by another unit and cannot be shared.

/* Register an alternate interrupt service routine for

 * the card-detect GPIO.

/**

 * mmc_gpiod_request_cd - request a gpio descriptor for card-detection

 * @host: mmc host

 * @con_id: function within the GPIO consumer

 * @idx: index of the GPIO to obtain in the consumer

 * @override_active_level: ignore %GPIO_ACTIVE_LOW flag

 * @debounce: debounce time in microseconds

 *

 * Note that this must be called prior to mmc_add_host()

 * otherwise the caller must also call mmc_gpiod_request_cd_irq().

 *

 * Returns zero on success, else an error.

 Update default label if no con_id provided */

 override forces default (active-low) polarity ... */

 ... or active-high */

/**

 * mmc_gpiod_request_ro - request a gpio descriptor for write protection

 * @host: mmc host

 * @con_id: function within the GPIO consumer

 * @idx: index of the GPIO to obtain in the consumer

 * @debounce: debounce time in microseconds

 *

 * Returns zero on success, else an error.

 Update default label if no con_id provided */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2014 Linaro Ltd

 *

 * Author: Ulf Hansson <ulf.hansson@linaro.org>

 *

 *  Simple MMC power sequence management

 sentinel */},

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2014 Linaro Ltd

 *

 * Author: Ulf Hansson <ulf.hansson@linaro.org>

 *

 *  MMC power sequence management

 SPDX-License-Identifier: GPL-2.0

/*

 * Block driver for media (i.e., flash cards)

 *

 * Copyright 2002 Hewlett-Packard Company

 * Copyright 2005-2008 Pierre Ossman

 *

 * Use consistent with the GNU GPL is permitted,

 * provided that this copyright notice is

 * preserved in its entirety in all copies and derived works.

 *

 * HEWLETT-PACKARD COMPANY MAKES NO WARRANTIES, EXPRESSED OR IMPLIED,

 * AS TO THE USEFULNESS OR CORRECTNESS OF THIS CODE OR ITS

 * FITNESS FOR ANY PARTICULAR PURPOSE.

 *

 * Many thanks to Alessandro Rubini and Jonathan Corbet!

 *

 * Author:  Andrew Christian

 *          28 May 2002

/*

 * Set a 10 second timeout for polling write request busy state. Note, mmc core

 * is setting a 3 second timeout for SD cards, and SDHCI has long had a 10

 * second software timer to timeout the whole request, so 10 seconds should be

 * ample.

/*

 * The defaults come from config options but can be overriden by module

 * or bootarg options.

/*

 * We've only got one major, so number of mmcblk devices is

 * limited to (1 << 20) / number of minors per device.  It is also

 * limited by the MAX_DEVICES below.

/*

 * There is one mmc_blk_data per slot.

 Can do SET_BLOCK_COUNT for multiblock */

 MMC Reliable write support */

	/*

	 * Only set in main mmc_blk_data associated

	 * with mmc_card with dev_set_drvdata, and keeps

	 * track of the current selected device partition.

 debugfs files (only in main mmc_blk_data) */

 Device type for RPMB character devices */

 Bus type for RPMB character devices */

/**

 * struct mmc_rpmb_data - special RPMB device type for these areas

 * @dev: the device for the RPMB area

 * @chrdev: character device for the RPMB area

 * @id: unique device ID number

 * @part_index: partition index (0 on first)

 * @md: parent MMC block device

 * @node: list item, so we can put this device on a list

 Dispatch locking to the block layer */

	/*

	 * The RPMB accesses comes in from the character device, so we

	 * need to target these explicitly. Else we just target the

	 * partition type for the block device the ioctl() was issued

	 * on.

 Support multiple RPMB partitions */

 data.flags must already be set before doing this. */

 Allow overriding the timeout_ns for empirical tuning. */

			/*

			 * Pretend this is a data transfer and rely on the

			 * host driver to compute timeout.  When all host

			 * drivers support cmd.cmd_timeout for R1B, this

			 * can be changed to:

			 *

			 *     mrq.data = NULL;

			 *     cmd.cmd_timeout = idata->ic.cmd_timeout_ms;

		/*

		 * We don't do any blockcount validation because the max size

		 * may be increased by a future standard. We just copy the

		 * 'Reliable Write' bit here.

	/*

	 * Make sure the cache of the PARTITION_CONFIG register and

	 * PARTITION_ACCESS bits is updated in case the ioctl ext_csd write

	 * changed it successfully.

		/*

		 * Update cache so the next mmc_blk_part_switch call operates

		 * on up-to-date data.

	/*

	 * Make sure to update CACHE_CTRL in case it was changed. The cache

	 * will get turned back on if the card is re-initialized, e.g.

	 * suspend/resume or hw reset in recovery.

	/*

	 * According to the SD specs, some commands require a delay after

	 * issuing the command.

		/*

		 * Ensure RPMB/R1B command has completed by polling CMD13

		 * "Send Status".

 This will be NULL on non-RPMB ioctl():s */

	/*

	 * Dispatch the ioctl() into the block request queue.

 This will be NULL on non-RPMB ioctl():s */

	/*

	 * Dispatch the ioctl()s into the block request queue.

 copy to user if data and response */

	/*

	 * The caller must have CAP_SYS_RAWIO, and must be calling this on the

	 * whole block device, not on a partition.  This prevents overspray

	 * between sibling partitions.

 Clock may be subject to a divisor, fudge it by a factor of 2. */

 How can there be no clock */

 100 kHz is minimum possible value */

 Ensure we switch back to the correct partition */

			/*

			 * We have failed to get back into the correct

			 * partition, so we need to abort the whole request.

/*

 * The non-block commands come back from the block layer after it queued it and

 * processed it with all other requests and then they get issued in this

 * function.

 Always switch back to main area after RPMB access */

/*

 * Reformat current write as a reliable write, supporting

 * both legacy and the enhanced reliable write MMC cards.

 * In each transfer we'll handle only as much as a single

 * reliable write can handle, thus finish the request in

 * partial completions.

 Legacy mode imposes restrictions on transfers. */

 Misaligned address */		\

 Transferred block length incorrect */\

 Tried to write to protected block */	\

 Card ECC failed */			\

 Card controller error */		\

 General/unknown error */

 Command argument out of range */	\

	/*

	 * Per the SD specification(physical layer version 4.10)[1],

	 * section 4.3.3, it explicitly states that "When the last

	 * block of user area is read using CMD18, the host should

	 * ignore OUT_OF_RANGE error that may occur even the sequence

	 * is correct". And JESD84-B51 for eMMC also has a similar

	 * statement on section 6.8.3.

	 *

	 * Multiple block read/write could be done by either predefined

	 * method, namely CMD23, or open-ending mode. For open-ending mode,

	 * we should ignore the OUT_OF_RANGE error as it's normal behaviour.

	 *

	 * However the spec[1] doesn't tell us whether we should also

	 * ignore that for predefined method. But per the spec[1], section

	 * 4.15 Set Block Count Command, it says"If illegal block count

	 * is set, out of range error will be indicated during read/write

	 * operation (For example, data transfer is stopped at user area

	 * boundary)." In another word, we could expect a out of range error

	 * in the response for the following CMD18/25. And if argument of

	 * CMD23 + the argument of CMD18/25 exceed the max number of blocks,

	 * we could also expect to get a -ETIMEDOUT or any error number from

	 * the host drivers due to missing data response(for write)/data(for

	 * read), as the cards will stop the data transfer by itself per the

	 * spec. So we only need to check R1_OUT_OF_RANGE for open-ending mode.

 If there is no error yet, check R1 response */

	/*

	 * Reliable writes are used to implement Forced Unit Access and

	 * are supported only on MMCs.

	/*

	 * The command queue supports 2 priorities: "high" (1) and "simple" (0).

	 * The eMMC will give "high" priority tasks priority over "simple"

	 * priority tasks. Here we always set "simple" priority by not setting

	 * MMC_DATA_PRIO.

	/*

	 * The block layer doesn't support all sector count

	 * restrictions, so we need to be prepared for too big

	 * requests.

		/*

		 * Some SD cards in SPI mode return a CRC error or even lock up

		 * completely when trying to read the last block using a

		 * multiblock read command.

		/*

		 * After a read error, we redo the request one sector

		 * at a time in order to accurately determine which

		 * sectors can be read successfully.

		/*

		 * Some controllers have HW issues while operating

		 * in multiple I/O mode

	/*

	 * Data tag is used only during writing meta data to speed

	 * up write and any subsequent read of this meta data

	/*

	 * Adjust the sg list so it is the same size as the

	 * request.

	/*

	 * Block layer timeouts race with completions which means the normal

	 * completion path cannot be used during recovery.

		/* SPI multiblock writes terminate using a special

		 * token, not a STOP_TRANSMISSION request.

	/*

	 * Pre-defined multi-block transfers are preferable to

	 * open ended-ones (and necessary for reliable writes).

	 * However, it is not sufficient to just send CMD23,

	 * and avoid the final CMD12, as on an error condition

	 * CMD12 (stop) needs to be sent anyway. This, coupled

	 * with Auto-CMD23 enhancements provided by some

	 * hosts, means that the complexity of dealing

	 * with this is best left to the host. If CMD23 is

	 * supported by card and host, we'll fill sbc in and let

	 * the host deal with handling it correctly. This means

	 * that for hosts that don't expose MMC_CAP_CMD23, no

	 * change of behavior will be observed.

	 *

	 * N.B: Some MMC cards experience perf degradation.

	 * We'll avoid using CMD23-bounded multiblock writes for

	 * these, while retaining features like reliable writes.

 Some hosts wait for busy anyway, so provide a busy timeout */

 Single sector read during recovery */

 Let it try the remaining request again */

/*

 * Check for errors the host controller driver might not have seen such as

 * response mode errors or invalid card state.

/*

 * Requests are completed by mmc_blk_mq_complete_rq() which sets simple

 * policy:

 * 1. A request that has transferred at least some data is considered

 * successful and will be requeued if there is remaining data to

 * transfer.

 * 2. Otherwise the number of retries is incremented and the request

 * will be requeued if there are remaining retries.

 * 3. Otherwise the request will be errored out.

 * That means mmc_blk_mq_complete_rq() is controlled by bytes_xfered and

 * mqrq->retries. So there are only 4 possible actions here:

 *	1. do not accept the bytes_xfered value i.e. set it to zero

 *	2. change mqrq->retries to determine the number of retries

 *	3. try to reset the card

 *	4. read one sector at a time

	/*

	 * Some errors the host driver might not have seen. Set the number of

	 * bytes transferred to zero in that case.

	/*

	 * Try again to get the status. This also provides an opportunity for

	 * re-tuning.

	/*

	 * Nothing more to do after the number of bytes transferred has been

	 * updated and there is no card.

 Try to get back to "tran" state */

	/*

	 * Special case for SD cards where the card might record the number of

	 * blocks written.

 Reset if the card is in a bad state */

	/*

	 * If anything was done, just return and if there is anything remaining

	 * on the request it will get requeued.

 Reset before last retry */

 Command errors fail fast, so use all MMC_MAX_RETRIES */

 Reduce the remaining retries for data errors */

 FIXME: Missing single sector read for large sector size */

 Read one sector at a time */

 Accumulate response error bits. */

	/*

	 * Do not assume data transferred correctly if there are any error bits

	 * set.

 Copy the exception bit so it will be seen later on */

	/*

	 * Block layer timeouts race with completions which means the normal

	 * completion path cannot be used during recovery.

	/*

	 * Block layer timeouts race with completions which means the normal

	 * completion path cannot be used during recovery.

		/*

		 * We cannot complete the request in this context, so record

		 * that there is a request to complete, and that a following

		 * request does not need to wait (although it does need to

		 * complete complete_req first).

		/*

		 * If 'waiting' then the waiting task will complete this

		 * request, otherwise queue a work to do it. Note that

		 * complete_work may still race with the dispatch of a following

		 * request.

 Take the recovery path for errors or urgent background operations */

	/*

	 * Wait while there is another request in progress, but not if recovery

	 * is needed. Also indicate whether there is a request waiting to start.

 Always complete the previous request if there is one */

 Release re-tuning here where there is no synchronization required */

		/*

		 * We get -ENOSPC because there are no more any available

		 * devidx. The reason may be that, either userspace haven't yet

		 * unmounted the partitions, which postpones mmc_blk_release()

		 * from being called, or the device has more partitions than

		 * what we support.

	/*

	 * Set the read-only status based on the supported commands

	 * and the write protect switch.

	/*

	 * As discussed on lkml, GENHD_FL_REMOVABLE should:

	 *

	 * - be set for removable media with permanent block devices

	 * - be unset for removable block devices with permanent media

	 *

	 * Since MMC block devices clearly fall under the second

	 * case, we do not set GENHD_FL_REMOVABLE.  Userspace

	 * should use the block device creation/destruction hotplug

	 * messages to tell when the card is present.

 used in ->open, must be set before add_disk: */

		/*

		 * The EXT_CSD sector count is in number or 512 byte

		 * sectors.

		/*

		 * The CSD capacity field is in units of read_blkbits.

		 * set_capacity takes units of 512 bytes.

/**

 * mmc_rpmb_ioctl() - ioctl handler for the RPMB chardev

 * @filp: the character device file

 * @cmd: the ioctl() command

 * @arg: the argument from userspace

 *

 * This will essentially just redirect the ioctl()s coming in over to

 * the main block device spawning the RPMB character device.

 This creates the minor number for the RPMB char device */

/* MMC Physical partitions consist of two boot partitions and

 * up to four general purpose partitions.

 * For each partition enabled in EXT_CSD a block device will be allocatedi

 * to provide access to the partition.

			/*

			 * RPMB partitions does not provide block access, they

			 * are only accessed using ioctl():s. Thus create

			 * special RPMB block devices that do not have a

			 * backing block queue for these.

	/*

	 * Flush remaining requests and free queues. It is freeing the queue

	 * that stops new requests from being accepted.

 Remove RPMB partitions */

 Remove block partitions */

 Ask the block layer about the card status */

 That is two digits * 512 + 1 for newline */

 Ask the block layer for the EXT CSD */

 CONFIG_DEBUG_FS */

	/*

	 * Check that the card supports the command class(es) we need.

 Add two debugfs entries */

	/*

	 * Don't enable runtime PM for SD-combo cards here. Leave that

	 * decision to be taken during the SDIO init sequence instead.

		/*

		 * Resume involves the card going into idle state,

		 * so current partition is always the main one.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/mmc/sdio_ops.c

 *

 *  Copyright 2006-2007 Pierre Ossman

 if we're just probing, do a single pass */

 otherwise wait until reset completes */

			/*

			 * Both R1_SPI_IDLE and MMC_CARD_BUSY indicate

			 * an initialized card under SPI, but some cards

			 * (Marvell's) only behave when looking at this

			 * one.

 sanity check */

 host driver already reported errors */

 sanity check */

 byte mode */

 block mode */

 Code in host drivers/fwk assumes that "blocks" always is >=1 */

 host driver already reported errors */

 SDIO Simplified Specification V2.0, 4.4 Reset for SDIO */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Debugfs support for hosts and cards

 *

 * Copyright (C) 2008 Atmel Corporation

 CONFIG_FAIL_MMC_REQUEST */

 The debugfs functions are optimized away when CONFIG_DEBUG_FS isn't set. */

 We need this check due to input value is u64 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/drivers/mmc/core/sdio_cis.c

 *

 * Author:	Nicolas Pitre

 * Created:	June 11, 2007

 * Copyright:	MontaVista Software Inc.

 *

 * Copyright 2007 Pierre Ossman

 10s */

	/* Find all null-terminated (including zero length) strings in

 TPLMID_MANF */

 TPLMID_CARD */

 look for a matching code in the table */

 known tuple, not parsed */

 invalid tuple */

 unknown tuple */

 Only valid for the common CIS (function 0) */

 TPLFE_FN0_BLK_SIZE */

 TPLFE_MAX_TRAN_SPEED */

 Only valid for the individual function's CIS (1-7) */

	/*

	 * This tuple has a different length depending on the SDIO spec

	 * version.

 TPLFE_MAX_BLK_SIZE */

 TPLFE_ENABLE_TIMEOUT_VAL, present in ver 1.1 and above */

/*

 * Known TPLFE_TYPEs table for CISTPL_FUNCE tuples.

 *

 * Note that, unlike PCMCIA, CISTPL_FUNCE tuples are not parsed depending

 * on the TPLFID_FUNCTION value of the previous CISTPL_FUNCID as on SDIO

 * TPLFID_FUNCTION is always hardcoded to 0x0C.

 CISTPL_FUNCE_LAN_NODE_ID */	},

 Known TPL_CODEs table for CIS tuples */

 cistpl_funcid */	},

 cistpl_sdio_std */	},

	/*

	 * Note that this works for the common CIS (function number 0) as

	 * well as a function's CIS * since SDIO_CCCR_CIS and SDIO_FBR_CIS

	 * have the same offset.

 0xff means we're done */

 null entries have no link field or data */

 a size of 0xff also means we're done */

 Try to parse the CIS tuple */

			/*

			 * The tuple is unknown or known but not parsed.

			 * Queue the tuple for the function driver.

				/*

				 * Tuples in this range are reserved for

				 * vendors, so don't warn about them

 keep on analyzing tuples */

			/*

			 * We don't need the tuple anymore if it was

			 * successfully parsed by the SDIO core or if it is

			 * not going to be queued for a driver.

	/*

	 * Link in all unknown tuples found in the common CIS so that

	 * drivers don't have to go digging in two places.

	/*

	 * Since we've linked to tuples in the card structure,

	 * we must make sure we have a reference to it.

	/*

	 * Vendor/device id is optional for function CIS, so

	 * copy it from the card structure as needed.

	/*

	 * We have now removed the link to the tuples in the

	 * card structure, so remove the reference.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mmc/core/core.c

 *

 *  Copyright (C) 2003-2004 Russell King, All Rights Reserved.

 *  SD support Copyright (C) 2004 Ian Molton, All Rights Reserved.

 *  Copyright (C) 2005-2008 Pierre Ossman, All Rights Reserved.

 *  MMCv4 support Copyright (C) 2006 Philip Langdale, All Rights Reserved.

 The max erase timeout, used when host->max_busy_timeout isn't specified */

 60 s */

/*

 * Enabling software CRCs on the data blocks can be a significant (30%)

 * performance cost, and for other reasons may not always be desired.

 * So we allow it it to be disabled.

	/*

	 * We use the system_freezable_wq, because of two reasons.

	 * First, it allows several works (not the same work item) to be

	 * executed simultaneously. Second, the queue becomes frozen when

	 * userspace becomes frozen during system PM.

/*

 * Internal function. Inject random data errors.

 * If mmc_data is NULL no errors are injected.

 CONFIG_FAIL_MMC_REQUEST */

 CONFIG_FAIL_MMC_REQUEST */

/**

 *	mmc_request_done - finish processing an MMC request

 *	@host: MMC host which completed request

 *	@mrq: MMC request which request

 *

 *	MMC drivers should call this function when they have completed

 *	their processing of a request.

 Flag re-tuning needed on CRC errors */

	/*

	 * We list various conditions for the command to be considered

	 * properly done:

	 *

	 * - There was no error, OK fine then

	 * - We are not doing some kind of retry

	 * - The card was removed (...so just complete everything no matter

	 *   if there are errors or retries)

	/*

	 * Request starter must handle retries - see

	 * mmc_wait_for_req_done().

 Assumes host controller has been runtime resumed by mmc_claim_host */

	/*

	 * For sdio rw commands we must wait for card busy otherwise some

	 * sdio devices won't work properly.

	 * And bypass I/O abort, reset and bus suspend operations.

 Wait aprox 500ms at maximum */

		/*

		 * Retry path could come through here without having waiting on

		 * cmd_completion, so ensure it is reinitialised.

	/*

	 * If there is an ongoing transfer, wait for the command line to become

	 * available.

/*

 * mmc_cqe_start_req - Start a CQE request.

 * @host: MMC host to start the request

 * @mrq: request to start

 *

 * Start the request, re-tuning if needed and it is possible. Returns an error

 * code if the request fails to start or -EBUSY if CQE is busy.

	/*

	 * CQE cannot process re-tuning commands. Caller must hold retuning

	 * while CQE is in use.  Re-tuning can happen here only when CQE has no

	 * active requests i.e. this is the first.  Note, re-tuning will call

	 * ->cqe_off().

/**

 *	mmc_cqe_request_done - CQE has finished processing an MMC request

 *	@host: MMC host which completed request

 *	@mrq: MMC request which completed

 *

 *	CQE drivers should call this function when they have completed

 *	their processing of a request.

 Flag re-tuning needed on CRC errors */

/**

 *	mmc_cqe_post_req - CQE post process of a completed MMC request

 *	@host: MMC host

 *	@mrq: MMC request to be processed

 Arbitrary 1 second timeout */

/*

 * mmc_cqe_recovery - Recover from CQE errors.

 * @host: MMC host to recover

 *

 * Recovery consists of stopping CQE, stopping eMMC, discarding the queue in

 * in eMMC, and discarding the queue in CQE. CQE must call

 * mmc_cqe_request_done() on all requests. An error is returned if the eMMC

 * fails to discard its queue.

	/*

	 * Recovery is expected seldom, if at all, but it reduces performance,

	 * so make sure it is not completely silent.

 Ignore CRC */

 Discard entire queue */

 Ignore CRC */

/**

 *	mmc_is_req_done - Determine if a 'cap_cmd_during_tfr' request is done

 *	@host: MMC host

 *	@mrq: MMC request

 *

 *	mmc_is_req_done() is used with requests that have

 *	mrq->cap_cmd_during_tfr = true. mmc_is_req_done() must be called after

 *	starting a request and before waiting for it to complete. That is,

 *	either in between calls to mmc_start_req(), or after mmc_wait_for_req()

 *	and before mmc_wait_for_req_done(). If it is called at other times the

 *	result is not meaningful.

/**

 *	mmc_wait_for_req - start a request and wait for completion

 *	@host: MMC host to start command

 *	@mrq: MMC request to start

 *

 *	Start a new MMC custom command request for a host, and wait

 *	for the command to complete. In the case of 'cap_cmd_during_tfr'

 *	requests, the transfer is ongoing and the caller can issue further

 *	commands that do not use the data lines, and then wait by calling

 *	mmc_wait_for_req_done().

 *	Does not attempt to parse the response.

/**

 *	mmc_wait_for_cmd - start a command and wait for completion

 *	@host: MMC host to start command

 *	@cmd: MMC command to start

 *	@retries: maximum number of retries

 *

 *	Start a new MMC command for a host, and wait for the command

 *	to complete.  Return any error that occurred while the command

 *	was executing.  Do not attempt to parse the response.

/**

 *	mmc_set_data_timeout - set the timeout for a data command

 *	@data: data phase for command

 *	@card: the MMC card associated with the data transfer

 *

 *	Computes the data timeout parameters according to the

 *	correct algorithm given the card type.

	/*

	 * SDIO cards only define an upper 1 s limit on access.

	/*

	 * SD cards use a 100 multiplier rather than 10

	/*

	 * Scale up the multiplier (and therefore the timeout) by

	 * the r2w factor for writes.

	/*

	 * SD cards also have an upper limit on the timeout.

			/*

			 * The MMC spec "It is strongly recommended

			 * for hosts to implement more than 500ms

			 * timeout value even if the card indicates

			 * the 250ms maximum busy length."  Even the

			 * previous value of 300ms is known to be

			 * insufficient for some cards.

		/*

		 * SDHC cards always use these fixed values.

 assign limit value if invalid */

	/*

	 * Some cards require longer data read timeout than indicated in CSD.

	 * Address this by setting the read timeout to a "reasonably high"

	 * value. For the cards tested, 600ms has proven enough. If necessary,

	 * this value can be increased if other problematic cards require this.

	/*

	 * Some cards need very high timeouts if driven in SPI mode.

	 * The worst observed timeout was 900ms after writing a

	 * continuous stream of data until the internal logic

	 * overflowed.

 1s */

 100ms */

/*

 * Allow claiming an already claimed host if the context is the same or there is

 * no context but the task is the same.

/**

 *	__mmc_claim_host - exclusively claim a host

 *	@host: mmc host to claim

 *	@ctx: context that claims the host or NULL in which case the default

 *	context will be used

 *	@abort: whether or not the operation should be aborted

 *

 *	Claim a host for a set of operations.  If @abort is non null and

 *	dereference a non-zero value then this will return prematurely with

 *	that non-zero value without acquiring the lock.  Returns zero

 *	with the lock held otherwise.

/**

 *	mmc_release_host - release a host

 *	@host: mmc host to release

 *

 *	Release a MMC host, allowing others to claim the host

 *	for their operations.

 Release for nested claim */

/*

 * This is a helper function, which fetches a runtime pm reference for the

 * card device and also claims the host.

/*

 * This is a helper function, which releases the host and drops the runtime

 * pm reference for the card device.

/*

 * Internal function that does the actual ios call to the host driver,

 * optionally printing some debug output.

/*

 * Control chip select pin on a host.

/*

 * Sets the host clock to the highest possible frequency that

 * is below "hz".

 Only print error when we don't check for card removal */

/*

 * Change the bus mode (open drain/push-pull) of a host.

/*

 * Change data bus width of a host.

/*

 * Set initial state after a power cycle or a hw_reset.

	/*

	 * Make sure we are in non-enhanced strobe mode before we

	 * actually enable it in ext_csd.

/**

 * mmc_vdd_to_ocrbitnum - Convert a voltage to the OCR bit number

 * @vdd:	voltage (mV)

 * @low_bits:	prefer low bits in boundary cases

 *

 * This function returns the OCR bit number according to the provided @vdd

 * value. If conversion is not possible a negative errno value returned.

 *

 * Depending on the @low_bits flag the function prefers low or high OCR bits

 * on boundary voltages. For example,

 * with @low_bits = true, 3300 mV translates to ilog2(MMC_VDD_32_33);

 * with @low_bits = false, 3300 mV translates to ilog2(MMC_VDD_33_34);

 *

 * Any value in the [1951:1999] range translates to the ilog2(MMC_VDD_20_21).

 Base 2000 mV, step 100 mV, bit's base 8. */

/**

 * mmc_vddrange_to_ocrmask - Convert a voltage range to the OCR mask

 * @vdd_min:	minimum voltage value (mV)

 * @vdd_max:	maximum voltage value (mV)

 *

 * This function returns the OCR mask bits according to the provided @vdd_min

 * and @vdd_max values. If conversion is not possible the function returns 0.

 *

 * Notes wrt boundary cases:

 * This function sets the OCR bits for all boundary voltages, for example

 * [3300:3400] range is translated to MMC_VDD_32_33 | MMC_VDD_33_34 |

 * MMC_VDD_34_35 mask.

 Prefer high bits for the boundary vdd_max values. */

 Prefer low bits for the boundary vdd_min values. */

 Fill the mask, from max bit to min bit. */

/*

 * Mask off any voltages we don't support and select

 * the lowest voltage

	/*

	 * Sanity check the voltages that the card claims to

	 * support.

 Try to set signal voltage to 3.3V but fall back to 1.8v or 1.2v */

	/*

	 * During a signal voltage level switch, the clock must be gated

	 * for 5 ms according to the SD spec

 Keep clock gated for at least 10 ms, though spec only says 5 ms */

	/*

	 * If we cannot switch voltages, return failure so the caller

	 * can continue without UHS mode

	/*

	 * The card should drive cmd and dat[0:3] low immediately

	 * after the response of cmd11, but wait 1 ms to be sure

		/*

		 * Voltages may not have been switched, but we've already

		 * sent CMD11, so a power cycle is required anyway

 Wait for at least 1 ms according to spec */

	/*

	 * Failure to switch is indicated by the card holding

	 * dat[0:3] low

/*

 * Select timing parameters for host.

/*

 * Select appropriate driver type for host.

 Use SD definition of driver strength for hosts */

	/*

	 * The drive strength that the hardware can support

	 * depends on the board design.  Pass the appropriate

	 * information and let the hardware specific code

	 * return what is possible given the options

/*

 * Apply power to the MMC stack.  This is a two-stage process.

 * First, we enable power to the card without the clock running.

 * We then wait a bit for the power to stabilise.  Finally,

 * enable the bus drivers and clock to the card.

 *

 * We must _NOT_ enable the clock prior to power stablising.

 *

 * If a host does all the power sequencing itself, ignore the

 * initial MMC_POWER_UP stage.

 Set initial state and call mmc_set_ios */

	/*

	 * This delay should be sufficient to allow the power supply

	 * to reach the minimum voltage.

	/*

	 * This delay must be at least 74 clock sizes, or 1 ms, or the

	 * time required to reach a stable voltage.

 Set initial state and call mmc_set_ios */

	/*

	 * Some configurations, such as the 802.11 SDIO card in the OLPC

	 * XO-1.5, require a short delay after poweroff before the card

	 * can be successfully turned on again.

 Wait at least 1 ms according to SD spec */

/*

 * Assign a mmc bus handler to a host. Only one bus handler may control a

 * host at any given time.

/*

 * Remove the current bus handler from a host.

	/*

	 * Prevent system sleep for 5s to allow user space to consume the

	 * corresponding uevent. This is especially useful, when CD irq is used

	 * as a system wakeup, but doesn't hurt in other cases.

/**

 *	mmc_detect_change - process change of state on a MMC socket

 *	@host: host which changed state.

 *	@delay: optional delay to wait before detection (jiffies)

 *

 *	MMC drivers should call this when they detect a card has been

 *	inserted or removed. The MMC layer will confirm that any

 *	present card is still functional, and initialize any newly

 *	inserted.

	/*

	 * It is possible to erase an arbitrarily large area of an SD or MMC

	 * card.  That is not desirable because it can take a long time

	 * (minutes) potentially delaying more important I/O, and also the

	 * timeout calculations become increasingly hugely over-estimated.

	 * Consequently, 'pref_erase' is defined as a guide to limit erases

	 * to that size and alignment.

	 *

	 * For SD cards that define Allocation Unit size, limit erases to one

	 * Allocation Unit at a time.

	 * For MMC, have a stab at ai good value and for modern cards it will

	 * end up being 4MiB. Note that if the value is too small, it can end

	 * up taking longer to erase. Also note, erase_size is already set to

	 * High Capacity Erase Size if available when this function is called.

 High Capacity Erase Group Size uses HC timeouts */

 CSD Erase Group Size uses write timeout */

 Avoid overflow: e.g. taac_ns=80000000 mult=1280 */

		/*

		 * ios.clock is only a target.  The real clock rate might be

		 * less but not that much less, so fudge it by multiplying by 2.

		/*

		 * Theoretically, the calculation could underflow so round up

		 * to 1ms in that case.

 Multiplier for secure operations */

	/*

	 * Ensure at least a 1 second timeout for SPI as per

	 * 'mmc_set_data_timeout()'

	/* for DISCARD none of the below calculation applies.

	 * the busy timeout is 250msec per discard command.

 Erase timeout specified in SD Status Register (SSR) */

		/*

		 * Erase timeout not specified in SD Status Register (SSR) so

		 * use 250ms per write block.

 Must not be less than 1 second */

	/*

	 * qty is used to calculate the erase timeout which depends on how many

	 * erase groups (or allocation units in SD terminology) are affected.

	 * We count erasing part of an erase group as one erase group.

	 * For SD, the allocation units are always a power of 2.  For MMC, the

	 * erase group size is almost certainly also power of 2, but it does not

	 * seem to insist on that in the JEDEC standard, so we fall back to

	 * division in that case.  SD may not specify an allocation unit size,

	 * in which case the timeout is based on the number of write blocks.

	 *

	 * Note that the timeout for secure trim 2 will only be correct if the

	 * number of erase groups specified is the same as the total of all

	 * preceding secure trim 1 commands.  Since the power may have been

	 * lost since the secure trim 1 commands occurred, it is generally

	 * impossible to calculate the secure trim 2 timeout correctly.

	/*

	 * In case of when R1B + MMC_CAP_WAIT_WHILE_BUSY is used, the polling

	 * shall be avoided.

 Let's poll to find out when the erase operation completes. */

	/*

	 * When the 'card->erase_size' is power of 2, we can use round_up/down()

	 * to align the erase size efficiently.

/**

 * mmc_erase - erase sectors.

 * @card: card to erase

 * @from: first sector to erase

 * @nr: number of sectors to erase

 * @arg: erase command argument

 *

 * Caller must claim host before calling this function.

 'from' and 'to' are inclusive */

	/*

	 * Special case where only one erase-group fits in the timeout budget:

	 * If the region crosses an erase-group boundary on this particular

	 * case, we will be trimming more than one erase-group which, does not

	 * fit in the timeout budget of the controller, so we need to split it

	 * and call mmc_do_erase() twice if necessary. This special case is

	 * identified by the card->eg_boundary flag.

	/*

	 * As there's no way to detect the discard support bit at v4.5

	 * use the s/w feature support filed.

	/*

	 * We should not only use 'host->max_busy_timeout' as the limitation

	 * when deciding the max discard sectors. We should set a balance value

	 * to improve the erase speed, and it can not get too long timeout at

	 * the same time.

	 *

	 * Here we set 'card->pref_erase' as the minimal discard sectors no

	 * matter what size of 'host->max_busy_timeout', but if the

	 * 'host->max_busy_timeout' is large enough for more discard sectors,

	 * then we can continue to increase the max discard sectors until we

	 * get a balance value. In cases when the 'host->max_busy_timeout'

	 * isn't specified, use the default max erase timeout.

	/*

	 * When specifying a sector range to trim, chances are we might cross

	 * an erase-group boundary even if the amount of sectors is less than

	 * one erase-group.

	 * If we can only fit one erase-group in the controller timeout budget,

	 * we have to care that erase-group boundaries are not crossed by a

	 * single trim operation. We flag that special case with "eg_boundary".

	 * In all other cases we can just decrement qty and pretend that we

	 * always touch (qty + 1) erase-groups as a simple optimization.

 Convert qty to sectors */

	/*

	 * Without erase_group_def set, MMC erase timeout depends on clock

	 * frequence which can change.  In that case, the best choice is

	 * just the preferred erase size.

/**

 * mmc_hw_reset - reset the card in hardware

 * @host: MMC host to which the card is attached

 *

 * Hard reset the card. This function is only for upper layers, like the

 * block layer or card drivers. You cannot use it in host drivers (struct

 * mmc_card might be gone then).

 *

 * Return: 0 on success, -errno on failure

	/*

	 * Some eMMCs (with VCCQ always on) may not be reset after power up, so

	 * do a hardware reset if possible.

	/*

	 * sdio_reset sends CMD52 to reset card.  Since we do not know

	 * if the card is being re-initialized, just send it.  CMD52

	 * should be ignored by SD/eMMC cards.

	 * Skip it if we already know that we do not support SDIO commands

 Order's important: probe SDIO, then SD, then MMC */

	/*

	 * Card detect status and alive check may be out of sync if card is

	 * removed slowly, when card detect switch changes while card/slot

	 * pads are still contacted in hardware (refer to "SD Card Mechanical

	 * Addendum, Appendix C: Card Detection Switch"). So reschedule a

	 * detect work 200ms later for this case.

	/*

	 * The card will be considered unchanged unless we have been asked to

	 * detect a change or host requires polling to provide card detection.

			/*

			 * Schedule a detect work as soon as possible to let a

			 * rescan handle the card removal.

 filter out unrelated cards */

	/*

	 * eMMC storage has two special boot partitions in addition to the

	 * main one.  NVIDIA's bootloader linearizes eMMC boot0->boot1->main

	 * accesses, this means that the partition table addresses are shifted

	 * by the size of boot partitions.  In accordance with the eMMC

	 * specification, the boot partition size is calculated as follows:

	 *

	 *	boot partition size = 128K byte x BOOT_SIZE_MULT

	 *

	 * Calculate number of sectors occupied by the both boot partitions.

 Defined by NVIDIA and used by Android devices. */

 If there is a non-removable card registered, only scan once */

 Verify a registered card to be functional, else remove it. */

 if there still is a card present, stop here */

 If an SD express card is present, then leave it as is. */

 clear pm flags now and let card drivers set them as needed */

 Calling bus_ops->remove() with a claimed host can deadlock */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/mmc/sdio.c

 *

 *  Copyright 2006-2007 Pierre Ossman

	/*

	 * It is okay to remove the function here even though we hold

	 * the host lock as we haven't registered the device yet.

 if no uhs mode ensure we check for high speed */

 set as 4-bit bus width */

/*

 * If desired, disconnect the pull-up resistor on CD/DAT[3] (pin 1)

 * of the card. This may be required on certain setups of boards,

 * controllers and embedded sdio device which do not need the card's

 * pull-up. As a result, card detection is disabled and power is saved.

/*

 * Devices that remain active during a system suspend are

 * put back into 1-bit mode.

/*

 * Test if the card supports high-speed mode and, if so, switch to it.

/*

 * Enable SDIO/combo card's high-speed mode. Return 0/1 if [not]supported.

		/*

		 * The SDIO specification doesn't mention how

		 * the CIS transfer speed register relates to

		 * high-speed, but it seems that 50 MHz is

		 * mandatory.

 if error just use default for drive strength B */

 if error default to drive strength B */

	/*

	 * If the host doesn't support any of the UHS-I modes, fallback on

	 * default speed.

/*

 * UHS-I specific initialization procedure

 Switch to wider bus */

 Set the driver strength for the card */

 Set bus speed mode of the card */

	/*

	 * SPI mode doesn't define CMD19 and tuning is only valid for SDR50 and

	 * SDR104 mode SD-cards. Note that tuning is mandatory for SDR104.

	/*

	 * Reset the card by performing the same steps that are taken by

	 * mmc_rescan_try_freq() and mmc_attach_sdio() during a "normal" probe.

	 *

	 * sdio_reset() is technically not needed. Having just powered up the

	 * hardware, it should already be in reset state. However, some

	 * platforms (such as SD8686 on OLPC) do not instantly cut power,

	 * meaning that a reset is required when restoring power soon after

	 * powering off. It is harmless in other cases.

	 *

	 * The CMD5 reset (mmc_send_io_op_cond()), according to the SDIO spec,

	 * is not necessary for non-removable cards. However, it is required

	 * for OLPC SD8686 (which expects a [CMD5,5,3,7] init sequence), and

	 * harmless in other situations.

	 *

/*

 * Handle the detection and initialisation of a card.

 *

 * In the case of a resume, "oldcard" will contain the card

 * we're trying to reinitialise.

 to query card if 1.8V signalling is supported */

	/*

	 * Inform the card of the voltage

	/*

	 * For SPI, enable CRC as appropriate.

	/*

	 * Allocate card structure.

	/*

	 * Call the optional HC's init_card function to handle quirks.

	/*

	 * If the host and card support UHS-I mode request the card

	 * to switch to 1.8V signaling level.  No 1.8v signalling if

	 * UHS mode is not enabled to maintain compatibility and some

	 * systems that claim 1.8v signalling in fact do not support

	 * it. Per SDIO spec v3, section 3.1.2, if the voltage is already

	 * 1.8v, the card sets S18A to 0 in the R4 response. So it will

	 * fails to check rocr & R4_18V_PRESENT,  but we still need to

	 * try to init uhs card. sdio_read_cccr will take over this task

	 * to make sure which speed mode should work.

	/*

	 * For native busses:  set card RCA and quit open drain mode.

		/*

		 * Update oldcard with the new RCA received from the SDIO

		 * device -- we're doing this so that it's updated in the

		 * "card" struct when oldcard overwrites that later.

	/*

	 * Read CSD, before selecting the card

	/*

	 * Select card, as all following commands rely on that.

		/*

		 * This is non-standard SDIO device, meaning it doesn't

		 * have any CIA (Common I/O area) registers present.

		 * It's host's responsibility to fill cccr and cis

		 * structures in init_card().

	/*

	 * Read the common registers. Note that we should try to

	 * validate whether UHS would work or not.

 Retry init sequence, but without R4_18V_PRESENT. */

	/*

	 * Read the common CIS tuples.

 handle as SDIO-only card if memory init failed */

 should not fail, as it worked previously */

	/*

	 * If needed, disconnect card detection pull-up resistor.

 Initialization sequence for UHS-I cards */

 Only if card supports 1.8v and UHS signaling */

		/*

		 * Switch to high-speed (if supported).

		/*

		 * Change to the card's maximum speed.

		/*

		 * Switch to wider bus (if supported).

/*

 * Host is being removed. Free up the current card.

/*

 * Card detection - card is alive.

/*

 * Card detection callback from host.

 Make sure card is powered before detecting it */

	/*

	 * Just check if our card has been removed.

	/*

	 * Tell PM core it's OK to power off the card now.

	 *

	 * The _sync variant is used in order to ensure that the card

	 * is left powered off in case an error occurred, and the card

	 * is going to be removed.

	 *

	 * Since there is no specific reason to believe a new user

	 * is about to show up at this point, the _sync variant is

	 * desirable anyway.

/*

 * SDIO pre_suspend.  We need to suspend all functions separately.

 * Therefore all registered functions must have drivers with suspend

 * and resume methods.  Failing that we simply remove the whole card.

 force removal of entire card in that case */

 Don't remove a non-removable card - we can't re-detect it. */

 Remove the SDIO card and let it be re-detected later on. */

/*

 * SDIO suspend.  Suspend all functions separately.

 Prevent processing of SDIO IRQs in suspended state. */

 Basic card reinitialization. */

	/*

	 * Restore power and reinitialize the card when needed. Note that a

	 * removable card is checked from a detect work later on in the resume

	 * process.

		/*

		 * Tell runtime PM core we just powered up the card,

		 * since it still believes the card is powered off.

		 * Note that currently runtime PM is only enabled

		 * for SDIO cards that are MMC_CAP_POWER_OFF_CARD

 We may have switched to 1-bit mode during suspend */

 Allow SDIO IRQs to be processed again. */

 No references to the card, cut the power to it. */

 Restore power and re-initialize. */

/*

 * SDIO HW reset

 *

 * Returns 0 if the HW reset was executed synchronously, returns 1 if the HW

 * reset was asynchronously scheduled, else a negative error code.

	/*

	 * In case the card is shared among multiple func drivers, reset the

	 * card through a rescan work. In this way it will be removed and

	 * re-detected, thus all func drivers becomes informed about it.

	/*

	 * A single func driver has been probed, then let's skip the heavy

	 * hotplug dance above and execute the reset immediately.

/*

 * Starting point for SDIO card init.

	/*

	 * Can we support the voltage(s) of the card(s)?

	/*

	 * Detect and init the card.

	/*

	 * Enable runtime PM only if supported by host+card+board

		/*

		 * Do not allow runtime suspend until after SDIO function

		 * devices are added.

		/*

		 * Let runtime PM core know our card is active

		/*

		 * Enable runtime PM for this card

	/*

	 * The number of functions on the card is encoded inside

	 * the ocr.

	/*

	 * Initialize (but don't add) all present functions.

		/*

		 * Enable Runtime PM for this func (if supported)

	/*

	 * First add the card to the driver model...

	/*

	 * ...then the SDIO functions.

	/*

	 * The devices are being deleted so it is not necessary to disable

	 * runtime PM. Similarly we also don't pm_runtime_put() the SDIO card

	 * because it needs to be active to remove any function devices that

	 * were probed, and after that it gets deleted.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/mmc/core/mmc_ops.h

 *

 *  Copyright 2006-2007 Pierre Ossman

 120s */

 240s */

	/* NOTE: callers are required to understand the difference

	 * between "native" and SPI format status words!

/*

 * Write the value specified in the device tree or board code into the optional

 * 16 bit Driver Stage Register. This can be used to tune raise/fall times and

 * drive strength of the DAT and CMD outputs. The actual meaning of a given

 * value is hardware dependant.

 * The presence of the DSR register can be determined from the CSD register,

 * bit 76.

	/*

	 * Non-SPI hosts need to prevent chipselect going active during

	 * GO_IDLE; that would put chips into SPI mode.  Remind them of

	 * that in case of hardware that won't pull up DAT3/nCS otherwise.

	 *

	 * SPI hosts ignore ios.chip_select; it's managed according to

	 * rules that must accommodate non-MMC slaves which this layer

	 * won't even know about.

 wait until reset completes */

		/*

		 * According to eMMC specification v5.1 section 6.4.3, we

		 * should issue CMD1 repeatedly in the idle state until

		 * the eMMC is ready. Otherwise some eMMC devices seem to enter

		 * the inactive mode after mmc_init_card() issued CMD0 when

		 * the eMMC device is busy.

/*

 * NOTE: void *buf, caller for the buf is required to use DMA-capable

 * buffer or on-stack buffer (with some overhead in callee).

	/* NOTE HACK:  the MMC_RSP_SPI_R1 is always correct here, but we

	 * rely on callers to never use this with "native" calls for reading

	 * CSD or CID.  Native versions of those commands use the R2 type,

	 * not R1 plus a data block.

		/*

		 * The spec states that CSR and CID accesses have a timeout

		 * of 64 clock cycles.

	/*

	 * As the ext_csd is so large and mostly unused, we don't store the

	 * raw block in mmc_card.

 Caller must hold re-tuning */

		/*

		 * Due to the possibility of being preempted while polling,

		 * check the expiration time first.

 Timeout if the device still remains busy. */

 Throttle the polling rate to avoid hogging the CPU. */

	/*

	 * If the max_busy_timeout of the host is specified, make sure it's

	 * enough to fit the used timeout_ms. In case it's not, let's instruct

	 * the host to avoid HW busy detection, by converting to a R1 response

	 * instead of a R1B. Note, some hosts requires R1B, which also means

	 * they are on their own when it comes to deal with the busy timeout.

/**

 *	__mmc_switch - modify EXT_CSD register

 *	@card: the MMC card associated with the data transfer

 *	@set: cmd set values

 *	@index: EXT_CSD register index

 *	@value: value to program into EXT_CSD register

 *	@timeout_ms: timeout (ms) for operation performed by register write,

 *                   timeout of zero implies maximum possible timeout

 *	@timing: new timing to change to

 *	@send_status: send status cmd to poll for busy

 *	@retry_crc_err: retry when CRC errors when polling with CMD13 for busy

 *	@retries: number of retries

 *

 *	Modifies the EXT_CSD register for selected card.

If SPI or used HW busy detection above, then we don't need to poll. */

	/*

	 * If the host doesn't support HW polling via the ->card_busy() ops and

	 * when it's not allowed to poll by using CMD13, then we need to rely on

	 * waiting the stated timeout to be sufficient.

 Let's try to poll to find out when the command is completed. */

 Switch to new timing before check switch status. */

	/*

	 * According to the tuning specs, Tuning process

	 * is normally shorter 40 executions of CMD19,

	 * and timeout value should be shorter than 150 ms

	/*

	 * eMMC specification specifies that CMD12 can be used to stop a tuning

	 * command, but SD specification does not, so do nothing unless it is

	 * eMMC.

	/*

	 * For drivers that override R1 to R1b, set an arbitrary timeout based

	 * on the tuning timeout i.e. 150ms.

	/* dma onto stack is unsafe/nonportable, but callers to this

	 * routine normally provide temporary on-stack buffers ...

	/* NOTE HACK:  the MMC_RSP_SPI_R1 is always correct here, but we

	 * rely on callers to never use this with "native" calls for reading

	 * CSD or CID.  Native versions of those commands use the R2 type,

	 * not R1 plus a data block.

 no need for test */

	/*

	 * Ignore errors from BUS_TEST_W.  BUS_TEST_R will fail if there

	 * is a problem.  This improves chances that the test will work.

 No need to poll when using HW busy detection. */

 Let's poll to find out when the HPI request completes. */

/**

 *	mmc_interrupt_hpi - Issue for High priority Interrupt

 *	@card: the MMC card associated with the HPI transfer

 *

 *	Issued High Priority Interrupt, and check for card status

 *	until out-of prg-state.

		/*

		 * In idle and transfer states, HPI is not needed and the caller

		 * can issue the next intended command immediately

 In all other states, it's illegal to issue HPI */

/**

 *	mmc_run_bkops - Run BKOPS for supported cards

 *	@card: MMC card to run BKOPS for

 *

 *	Run background operations synchronously for cards having manual BKOPS

 *	enabled and in case it reports urgent BKOPS level.

	/*

	 * For urgent BKOPS status, LEVEL_2 and higher, let's execute

	 * synchronously. Future wise, we may consider to start BKOPS, for less

	 * urgent levels by using an asynchronous background task, when idle.

	/*

	 * If the BKOPS timed out, the card is probably still busy in the

	 * R1_STATE_PRG. Rather than continue to wait, let's try to abort

	 * it with a HPI command to get back into R1_STATE_TRAN.

	/*

	 * If the sanitize operation timed out, the card is probably still busy

	 * in the R1_STATE_PRG. Rather than continue to wait, let's try to abort

	 * it with a HPI command to get back into R1_STATE_TRAN.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * linux/drivers/mmc/core/sdio_irq.c

 *

 * Author:      Nicolas Pitre

 * Created:     June 18, 2007

 * Copyright:   MontaVista Software Inc.

 *

 * Copyright 2008 Pierre Ossman

		/* A fake interrupt could be created when we poll SDIO_CCCR_INTx

		 * register with a Marvell SD8797 card. A dummy CMD52 read to

		 * function 0 register 0xff can avoid this.

 Don't process SDIO IRQs if the card is suspended. */

 Clear the flag to indicate that we have processed the IRQ. */

	/*

	 * Optimization, if there is only 1 function interrupt registered

	 * and we know an IRQ was signaled then call irq handler directly.

	 * Otherwise do the full probe.

	/*

	 * We want to allow for SDIO cards to work even on non SDIO

	 * aware hosts.  One thing that non SDIO host cannot do is

	 * asynchronous notification of pending SDIO card interrupts

	 * hence we poll for them in that case.

		/*

		 * We claim the host here on drivers behalf for a couple

		 * reasons:

		 *

		 * 1) it is already needed to retrieve the CCCR_INTx;

		 * 2) we want the driver(s) to clear the IRQ condition ASAP;

		 * 3) we need to control the abort condition locally.

		 *

		 * Just like traditional hard IRQ handlers, we expect SDIO

		 * IRQ handlers to be quick and to the point, so that the

		 * holding of the host lock does not cover too much work

		 * that doesn't require that lock to be held.

		/*

		 * Give other threads a chance to run in the presence of

		 * errors.

		/*

		 * Adaptive polling frequency based on the assumption

		 * that an interrupt will be closely followed by more.

		 * This has a substantial benefit for network devices.

 If there is only 1 function registered set sdio_single_irq */

/**

 *	sdio_claim_irq - claim the IRQ for a SDIO function

 *	@func: SDIO function

 *	@handler: IRQ handler callback

 *

 *	Claim and activate the IRQ for the given SDIO function. The provided

 *	handler will be called when that IRQ is asserted.  The host is always

 *	claimed already when the handler is called so the handler should not

 *	call sdio_claim_host() or sdio_release_host().

 Master interrupt enable */

/**

 *	sdio_release_irq - release the IRQ for a SDIO function

 *	@func: SDIO function

 *

 *	Disable and release the IRQ for the given SDIO function.

 Disable master interrupt with the last function interrupt */

