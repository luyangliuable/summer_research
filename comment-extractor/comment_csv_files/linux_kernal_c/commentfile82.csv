 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPCA508 chip based cameras subdriver

 *

 * Copyright (C) 2009 Jean-Francois Moine <http://moinejf.free.fr>

 specific webcam descriptor */

 !! must be the first item */

 Frame packet header offsets for the spca508 */

/*

 * Initialization data: this is the first set-up data written to the

 * device (before the open data).

 Video drop enable, ISO streaming disable */

 Reset compression & memory */

 Disable all outputs */

 READ {0x0000, 0x8114} -> 0000: 00  */

 SW GPIO data */

 Enable charge pump output */

 200 kHz pump clock */

 UNKNOWN DIRECTION (URB_FUNCTION_SELECT_INTERFACE:) */

 Reset compression & memory */

 Normal mode (not reset) */

 Enable charge pump output, sync.serial,external 2x clock */

 SW GPIO data */

 200 kHz pump clock */

 Video drop enable, ISO streaming disable */

 --------------------------------------- */

 memory bank */

 ... address */

 --------------------------------------- */

 0x88__ is Synchronous Serial Interface. */

 TBD: This table could be expressed more compactly */

 using spca508_write_i2c_vector(). */

 TBD: Should see if the values in spca50x_i2c_data */

 would work with the VQ110 instead of the values */

 below. */

 SSI slave addr */

 375 Khz SSI clock */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 375 Khz SSI clock */

 SSI reg addr */

 SSI data to write */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 375 Khz SSI clock */

 SSI reg addr */

 SSI data to write */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 375 Khz SSI clock */

 SSI reg addr */

 SSI data to write */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00 */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00 */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 --------------------------------------- */

 Clock speed 48Mhz/(2+2)/2= 6 Mhz */

 CKx1 clock delay adj */

 CKx1 clock delay adj */

 CKOx2 output */

 --------------------------------------- */

 Line memory read counter (L) */

 reserved */

 Line memory read counter (H) 0x6480=25,728 */

	{0x002a, 0x8601},	/* CDSP sharp interpolation mode,

 optical black level for user settng = 0 */

 Line memory read counter (L) */

	{0x000a, 0x8603},	/* optical black level calc mode:

 Horiz offset for valid pixels (L)=0xdf */

 Vert offset for valid lines (L)=0x12 */

 The following two lines seem to be the "wrong" resolution. */

 But perhaps these indicate the actual size of the sensor */

 rather than the size of the current video mode. */

 Horiz valid pixels (*4) (L) = 352 */

 Vert valid lines (*4) (L) = 288 */

 A11 Coef ... */

 R offset for white balance ... */

 R gain for white balance ... */

	{0x0001, 0x863f},	/* Fixed gamma correction enable, USB control,

	{0x00a1, 0x8656},	/* Window1 size 256x256, Windows2 size 64x64,

				 * gamma look-up disable,

 Edge gain high thresh */

 Edge gain low thresh */

 Edge bandwidth high threshold */

 Edge bandwidth low threshold */

 -------------------------------- */

 Video drop enable, ISO streaming enable */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 SSI reg addr */

 SSI data to write */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 ----- Read back coefs we wrote earlier. */

 READ { 0x0000, 0x8608 } -> 0000: 15  */

 READ { 0x0000, 0x8609 } -> 0000: 30  */

 READ { 0x0000, 0x860a } -> 0000: fb  */

 READ { 0x0000, 0x860b } -> 0000: 3e  */

 READ { 0x0000, 0x860c } -> 0000: ce  */

 READ { 0x0000, 0x860d } -> 0000: f4  */

 READ { 0x0000, 0x860e } -> 0000: eb  */

 READ { 0x0000, 0x860f } -> 0000: dc  */

 READ { 0x0000, 0x8610 } -> 0000: 39  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 08  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 This chunk is seemingly redundant with */

 earlier commands (A11 Coef...), but if I disable it, */

 the image appears too dark.  Maybe there was some kind of */

 reset since the earlier commands, so this is necessary again. */

 Disable compression. */

	/* Previous line was:

 compression stuff */

 compression stuff */

 compression stuff */

 compression stuff */

 compression stuff */

 *** Video mode: 160x120 */

 Hardware-dominated snap control */

	{0x0061, 0x8656},	/* Window1 size 128x128, Windows2 size 128x128,

				 * gamma look-up disable,

 Window1 start X (*2) */

 Window1 start Y (*2) */

	{0x0061, 0x8656},	/* Window1 size 128x128, Windows2 size 128x128,

				 * gamma look-up disable,

 Window2 start X (*2) */

 Window2 start Y (*2) */

 High lum thresh for white balance */

 Low lum thresh for white balance */

 Clock speed 48Mhz/(2+2)/2= 6 Mhz */

 Clock speed 48Mhz/(2+2)/2= 6 Mhz */

 READ { 0x0000, 0x8656 } -> 0000: 61  */

 375 Khz SSI clock, SSI r/w sync with VSYNC */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 28  */

 375 Khz SSI clock, SSI r/w sync with VSYNC */

 SSI reg addr */

 SSI data to write */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 28  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 optical black level for user settning = 1 */

 Original: */

 Clock speed 48Mhz/(3+2)/4= 2.4 Mhz */

 optical black level for user settning = 15 */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 28  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 R gain for white balance ... */

 READ { 0x0000, 0x8655 } -> 0000: 00  */

 Video drop enable, ISO streaming enable */

 Video drop enable, ISO streaming disable */

 UNKNOWN DIRECTION (URB_FUNCTION_SELECT_INTERFACE: (ALT=0) ) */

/*

 * Initialization data for Intel EasyPC Camera CS110

 Reset CTL3 */

 Soft Reset compression, memory, TG & CDSP */

 Normal operation on reset */

 External Clock 2x & Synchronous Serial Interface Output */

 Video Drop packet enable */

 Software GPIO output data */

 Initial sequence Synchronous Serial Interface */

 Memory bank Address */

 Memory bank Address */

 SSI Slave address */

 93.75kHz SSI Clock Two DataByte */

 93.75kHz SSI Clock two DataByte */

 a - NWG: Dunno what this is about */

 External input CKIx1 */

 1 Line memory Read Counter (H) Result: (d)410 */

 Line memory Read Counter (L) */

 1 Horizontal Offset for Valid Pixel(L) */

 3 Vertical Offset for Valid Lines(L) */

 58 Horizontal Valid Pixel Window(L) */

 Nibble data + input order */

 Optical black level set to 0x0a */

 Optical black level Offset */

	{0x0000, 0x8611},	 * 0 R  Offset for white Balance */

	{0x0000, 0x8612},	 * 1 Gr Offset for white Balance */

	{0x0000, 0x8613},	 * 1f B  Offset for white Balance */

	{0x0000, 0x8614},	 * f0 Gb Offset for white Balance */

 2b BLUE gain for white balance  good at all 60 */

 41 Gr Gain for white Balance (L) */

 26 RED gain for white balance */

 40Gb Gain for white Balance (L) */

 Fixed Gamma correction enabled (makes colours look better) */

 High bits for white balance*****brightness control*** */

 This line seems to setup the frame/canvas */

 These 6 lines are needed to startup the webcam */

 This part seems to make the pictures darker? (autobrightness?) */

/* This section is just needed, it probably

 * does something like the previous section,

 * but the cam won't start if it's not included.

/* Makes the picture darker - and the

 * cam won't start if not included

 seems to place the colors ontop of each other #1 */

 if not included the pictures becomes _very_ dark */

 seems to place the colors ontop of each other #2 */

 webcam won't start if not included */

 adjusts the colors */

 This line starts it all, it is not needed here */

 since it has been build into the driver */

 jfm: don't start now */

	{0x0030, 0x8112}, */

/*

 * Initialization data for Creative Webcam Vista

 Clear register */

 Reset CTL3 */

 Video Drop packet enable */

 Soft Reset compression, memory, TG & CDSP */

 Disable everything */

 Software GPIO output data */

 Enable: SSI output, External 2X clock output */

 Memory bank Address */

 Memory bank Address */

 SSI Slave address */

 93.75kHz SSI Clock Two DataByte */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 Will write 2 bytes (DATA1+DATA2) */

 Register address for SSI read/write */

 DATA2 */

 DATA1 -> write triggered */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 READ { 0x0001, 0x8802 } -> 0000: 10  */

 READ { 0x0001, 0x8803 } -> 0000: 00  */

 External input CKIx1 */

 Select CKOx2 output */

 Line memory Read Counter (L) */

 1 Line memory Read Counter (H) Result: (d)410 */

 1 Horizontal Offset for Valid Pixel(L) */

 Vertical offset for valid lines (L) */

 Horizontal valid pixels window (L) */

 Vertical valid lines window (L) */

 Enable nibble data input, select nibble input order */

 A11 Coeficients for color correction */

 Note: these values are confirmed at the end of array */

 ... */

 A33 Coef. */

 White balance offset: R */

 White balance offset: Gr */

 White balance offset: B */

 White balance offset: Gb */

 R gain for white balance (L) */

 Gr gain for white balance (L) */

 B gain for white balance (L) */

 Gb gain for white balance (L) */

 Enable fixed gamma correction */

	{0x00a1, 0x8656},	/* Size - Window1: 256x256, Window2: 128x128,

				 * UV division: UV no change,

 Edge gain high threshold */

 Edge gain low threshold */

 Edge bandwidth high threshold */

 Edge bandwidth low threshold */

 UV filter enable */

 Bad pixels compensation address */

 X coord for bad pixels compensation (L) */

 Y coord for bad pixels compensation (L) */

 READ { 0x0000, 0x8608 } -> 0000: 13  */

 READ { 0x0000, 0x8609 } -> 0000: 28  */

 READ { 0x0000, 0x8610 } -> 0000: 05  */

 READ { 0x0000, 0x8611 } -> 0000: 25  */

 READ { 0x0000, 0x8612 } -> 0000: e1  */

 READ { 0x0000, 0x8613 } -> 0000: fa  */

 READ { 0x0000, 0x8614 } -> 0000: f4  */

 READ { 0x0000, 0x8615 } -> 0000: e8  */

 READ { 0x0000, 0x8616 } -> 0000: 25  */

 request */

 read 1 byte */

 returns: negative is error, pos or zero is data */

 wIndex */

 register */

 value */

 timeout */

 send 1 or 2 bytes to the sensor via the Synchronous Serial Interface */

 if 2 bytes */

 poll until not busy */

 delay */

 this function is called at probe time */

 CreativeVista 0 */

 HamaUSBSightcam 1 */

 HamaUSBSightcam2 2 */

 IntelEasyPCCamera 3 */

 MicroInnovationIC200 4 */

 ViewQuestVQ110 5 */

	/* Read from global register the USB product and vendor IDs, just to

	 * prove that we can communicate with the device.  This works, which

	 * confirms at we are communicating properly and that the device

 this function is called at probe and resume time */

 clock */

	case 2: */

	case 3: */

 clock */

 Video ISO disable, Video Drop Packet enable: */

 isoc packet */

 iso packet length */

 start of frame */

 drop */

 MX seem contrast */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * STV0680 USB Camera Driver

 *

 * Copyright (C) 2009 Hans de Goede <hdegoede@redhat.com>

 *

 * This module is adapted from the in kernel v4l1 stv680 driver:

 *

 *  STV0680 USB Camera Driver, by Kevin Sisson (kjsisson@bellsouth.net)

 *

 * Thanks to STMicroelectronics for information on the usb commands, and

 * to Steve Miller at STM for his help and encouragement while I was

 * writing this driver.

 specific webcam descriptor */

 !! must be the first item */

  0xc1  */

  0x41  */

  0x80  */

  0x40  */

 Get Last Error */

 Note not sure if this init of usb_buf is really necessary */

 01 = VGA, 03 = QVGA, 00 = CIF */

 Verify we got what we've asked for */

 this function is called at probe time */

	/* Give the camera some time to settle, otherwise initialization will

 ping camera to be sure STV0680 is present */

 get camera descriptor */

 CIF */

 QVGA */

 FW rev, ASIC rev, sensor ID  */

 Get mode details */

 The cam cannot handle more */

 322, 356, 644 */

 242, 292, 484 */

 origGain = gspca_dev->usb_buf[12]; */

 this function is called at probe and resume time */

 -- start the camera -- */

	/* Start stream at:

	   0x0000 = CIF (352x288)

	   0x0100 = VGA (640x480)

 This is a high priority command; it stops all lower order cmds */

	/* Every now and then the camera sends a 16 byte packet, no idea

	   what it contains, but it is not image data, when this

	   happens the frame received before this packet is corrupt,

	/* Finish the previous frame, we do this upon reception of the next

	   packet, even though it is already complete so that the strange 16

 Store the just received frame */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Sunplus spca561 subdriver

 *

 * Copyright (C) 2004 Michel Xhaard mxhaard@magic.fr

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

 specific webcam descriptor */

 !! must be the first item */

 hue/contrast control cluster */

 expo/gain? for rev 12a */

/*

 * Initialization data

 * I'm not very sure how to split initialization from open data

 * chunks. For now, we'll consider everything as initialization

 Frame packet header offsets for the spca561 */

 Software GPIO output data */

 Software GPIO output data */

 Some kind of reset */

 PCLK clock delay adjustment */

 HSYNC from cmos inverted */

 Enable and conf sensor */

 Conf sensor */

 I know nothing about these */

 0x88xx registers, so I won't */

 Pixel/line selection for color separation */

 Optical black level for user setting */

 Optical black horizontal offset */

 Optical black vertical offset */

 Non-automatic optical black level */

 Horizontal offset for valid pixels */

 Vertical valid pixels window (x2) */

 Horizontal valid pixels window (x2) */

 Vertical valid lines window (x2) */

 Memory buffer threshold */

 Compensation memory stuff */

 Output address for r/w serial EEPROM */

 Clear valid bit for serial EEPROM */

 OprMode to be executed by hardware */

 from ms-win */

 R offset for white balance */

 Gr offset for white balance */

 B offset for white balance */

 Gb offset for white balance */

 from ms-win */

 R gain for white balance */

 Gr gain for white balance */

 B gain for white balance */

 Gb gain for white balance */

 Maximum average bit rate stuff */

 Set master clock (96Mhz????) */

 Master clock output enable */

 Set image type (352x288 no compression) */

 Originally was 0x0010 (352x288 compression) */

 Horizontal offset for valid pixels */

 Vertical offset for valid lines */

 blanking control column */

 blanking mode row*/

	{0x0009, 0x1061},	/* setexposure times && pixel clock

******************* QC Express etch2 stuff ********************/

 reg, value */

 image area */

fixme: win:07*/

fixme: was 0419*/

 reg, value */

 Control register (various enable bits) */

 GPIO: Led off */

 0x0e stream off 0x3e stream on */

 white balance - new */

 windows uses 08 */

 windows uses 02 */

 sensor gains */

 white balance - new */

 white balance - new */

 *red */

 3f   *green */

 green *blue */

 blue *green */

 green *red - white balance - was 0x35 */

 40   *green - white balance - was 0x35 */

 7a   *blue - white balance - was 0x35 */

 40   *green - white balance - was 0x35 */

 0c */

 c8 */

 c8 */

 23 */

 1f */

 dd */

 e1 */

 1d */

 21 */

 e3 */

 df */

	{0x99, 0x8700},		 * - white balance - new (removed) */

	/* HDG we used to do this in stop0, making the init state and the state

 request */

 read 'len' bytes to gspca_dev->usb_buf */

 request */

 value */

 write 'len' bytes from gspca_dev->usb_buf */

 request */

 value */

fixme: should be in sd_start*/

 this function is called at probe time */

	/* Read frm global register the USB product and vendor IDs, just to

	 * prove that we can communicate with the device.  This works, which

	 * confirms at we are communicating properly and that the device

 this function is called at probe and resume time */

 R */

 Gr */

 B */

 Gb */

 try to emulate MS-win as possible */

 Gr */

 Gb */

 rev 12a only */

	/* Register 0x8309 controls exposure for the spca561,

	   the basic exposure setting goes from 1-2047, where 1 is completely

	   dark and 2047 is very bright. It not only influences exposure but

	   also the framerate (to allow for longer exposure) from 1 - 300 it

	   only raises the exposure time then from 300 - 600 it halves the

	   framerate to be able to further raise the exposure time and for every

	   300 more it halves the framerate again. This allows for a maximum

	   exposure time of circa 0.2 - 0.25 seconds (30 / (2000/3000) fps).

	   Sometimes this is not enough, the 1-2047 uses bits 0-10, bits 11-12

	   configure a divider for the base framerate which us used at the

	   exposure setting of 1-300. These bits configure the base framerate

	/* We choose to use the high bits setting the fixed framerate divisor

	   asap, as setting high basic exposure setting without the fixed

 rev 12a only */

	/* gain reg low 6 bits  0-63 gain, bit 6 and 7, both double the

	   sensitivity when set, so 31 + one of them set == 63, and 15

 Use compression on 320x240 and above */

		/* I couldn't get the compression to work below 320x240

		 * Fortunately at these resolutions the bandwidth

 -- qq@kuku.eu.org */

 clock - lower 0x8X values lead to fps > 30 */

 0x8f 0x85 0x27 clock */

 Led ON (bit 3 -> 0 */

 ms-win 0x87 */

 0x27 clock */

 mode */

	setbrightness(gspca_dev);	 * fixme: bad values */

 Led Off (bit 3 -> 1 */

		reg_w_val(gspca_dev, 0x8102, 0x00); ?? */

 u= (128*B-(43*(Gr+Gb+R))) >> 8; */

 v= (128*R-(53*(Gr+Gb))-21*B) >> 8; */

 isoc packet */

 iso packet length */

 sequence number */

 start of frame */

 This should never happen */

 compressed bayer */

 raw bayer (with a header, which we skip) */

 drop (empty mpackets) */

 hue/contrast control cluster for 72a */

 just plain hue control for 12a */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Sonix sn9c201 sn9c202 library

 *

 * Copyright (C) 2012 Jean-Francois Moine <http://moinejf.free.fr>

 *	Copyright (C) 2008-2009 microdia project <microdia@googlegroups.com>

 *	Copyright (C) 2009 Brian Johnson <brijohn@gmail.com>

/*

 * Pixel format private data

 camera flags */

 some cameras unset gpio to turn on leds */

 specific webcam descriptor */

 color control cluster */

 blue/red balance control cluster */

 h/vflip control cluster */

 autogain and exposure or gain control cluster */

 (used by pkt_scan) */

 (used for JPEG QTAB update */

 Gain = (bit[3:0] / 16 + 1) * (bit[4] + 1) * (bit[5] + 1) * (bit[6] + 1) */

 1x */, 0x04  1.5x */, 0x0c 
 2x */, 0x12  2.5x */, 0x16 
 3x */, 0x1a  3.5x */, 0x1e 
 4x */, 0x31  4.5x */, 0x33 
 5x */, 0x35  5.5x */, 0x37 
 6x */, 0x39  6.5x */, 0x3b 
 7x */, 0x3d  7.5x */, 0x3f 
 8x */

 Gain = (bit[8] + 1) * (bit[7] + 1) * (bit[6:0] * 0.03125) */

 1x   1.25x   1.5x    1.75x */

 2x   2.25x   2.5x    2.75x */

 3x   3.25x   3.5x    3.75x */

 4x   4.25x   4.5x    4.75x */

 5x   5.25x   5.5x    5.75x */

 6x   6.25x   6.5x    6.75x */

 7x   7.25x   7.5x    7.75x */

 8x */

 mt9m001 sensor uses a different gain formula then other micron sensors */

 Gain = (bit[6] + 1) * (bit[5-0] * 0.125) */

 1x   1.25x   1.5x    1.75x */

 2x   2.25x   2.5x    2.75x */

 3x   3.25x   3.5x    3.75x */

 4x   4.25x   4.5x    4.75x */

 5x   5.25x   5.5x    5.75x */

 6x   6.25x   6.5x    6.75x */

 7x   7.25x   7.5x    7.75x */

 8x */

 Gain = .5 + bit[7:0] / 16 */

 1x */, 0x0c  1.5x */, 0x14 
 2x */, 0x1c  2.5x */, 0x24 
 3x */, 0x2c  3.5x */, 0x34 
 4x */, 0x3c  4.5x */, 0x44 
 5x */, 0x4c  5.5x */, 0x54 
 6x */, 0x5c  6.5x */, 0x64 
 7x */, 0x6c  7.5x */, 0x74 
 8x */

	/* HDG Set hstart and hstop, datasheet default 0x11, 0x61, using

 hres = 1280 */

 vres = 1024 */

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

	gspca_dev->usb_err = -EIO;	fixme: may occur */

	/*

	 * from the point of view of the bridge, the length

	 * includes the address

	/*

	 * from the point of view of the bridge, the length

	 * includes the address

 sensor reset */

 sensor reset */

 sensor reset */

 sensor reset */

 sensor reset */

 must be 0x8411 or 0x8421 for colour sensor and 8431 for bw */

 AECH */

 COM1 */

 ADVFL & ADVFH */

 or 1d ? */

 stop transfer */

 write QTAB */

 restart transfer */

 invert QTAB use + write */

 i2c 100 Kb/s */

 i2c 400 Kb/s */

 color control cluster */

 blue/red balance cluster */

 h/vflip cluster */

 standalone exposure control */

 standalone gain control */

 autogain + exposure or gain control cluster */

			/* this sensor doesn't have the exposure control and

			   autogain is clustered with gain instead. This works

 Otherwise autogain is clustered with exposure. */

	/*

	 * When using the SN9C20X_I420 fmt the sn9c20x needs more bandwidth

	 * than our regular bandwidth calculations reserve, so we force the

	 * use of a specific altsetting when using the SN9C20X_I420 fmt.

 160x120 */

 320x240 */

 >= 640x480 */

 YUV 420 */

 if JPEG, prepare the compression quality update */

 called on streamoff with alt==0 and on disconnect */

 the usb_lock is held at entry - restore on exit */

	/*

	 * some hardcoded values are present

	 * like those for maximal/minimal exposure

	 * and exposure steps

 JPEG quality update */

 This function is executed from a work queue. */

 To protect gspca_dev->usb_buf and gspca_dev->usb_err */

 interrupt packet */

 interrupt packet length */

 check the JPEG compression */

 if USB error, discard the frame and decrease the quality */

 USB FIFO full */

 else, compute the filling rate and a new JPEG quality */

			/* Note: we are in interrupt context, so we can't

			   use v4l2_ctrl_g/s_ctrl here. Access the value

 isoc packet */

 iso packet length */

 if JPEG, count the packets and their size */

 sub-driver description */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * cpia CPiA (1) gspca driver

 *

 * Copyright (C) 2010-2011 Hans de Goede <hdegoede@redhat.com>

 *

 * This module is adapted from the in kernel v4l1 cpia driver which is :

 *

 * (C) Copyright 1999-2000 Peter Pregler

 * (C) Copyright 1999-2000 Scott J. Bertin

 * (C) Copyright 1999-2000 Johannes Erdfelt <johannes@erdfelt.com>

 * (C) Copyright 2000 STMicroelectronics

 constant value's */

 176x144 */

 352x288 */

 End Of Image */

 End Of Line */

 Image grab modes */

 Compression parameters */

 Return offsets for GetCameraState */

 SystemState */

 GrabState */

 StreamState */

 Fatal Error, CmdError, and DebugFlags */

 VPStatus */

 default (minimum) compensation values */

 exposure status */

 Constants for automatic frame rate adjustment */

/* Developer's Guide Table 5 p 3-34

 CIF/QCIF */

 Intel QX3 specific data */

 a QX3 is present */

 top light lit , R/W */

 bottom light lit, R/W */

 snapshot button pressed (R/O) */

 microscope is in cradle (R/O) */

 skip first 8*colStart pixels */

 finish at 8*colEnd pixels */

 skip first 4*rowStart lines */

 finish at 4*rowEnd lines */

 specific webcam descriptor */

 !! must be the first item */

 camera settings */

 0 = 50hz, 1 = 60hz */

		/* The sizeimage is trial and error, as with low framerates

		 *  the camera will pad out usb frames, making the image

		 *  data larger than strictly necessary

/**********************************************************************

 *

 * General functions

 *

 Sometimes we see spurious EPIPE errors */

 send an arbitrary command to the camera */

 test button press */

 button pressed - unlock the latch */

 test whether microscope is cradled */

 send a command to the camera with an additional data transaction */

/*  find_over_exposure

 *  Finds a suitable value of OverExposure for use with SetFlickerCtrl

 *  Some calculation is required because this value changes with the brightness

 *  set with SetColourParameters

 *

 *  Parameters: Brightness - last brightness value set with SetColourParameters

 *

 *  Returns: OverExposure value to use with SetFlickerCtrl

 initialise cam_data structure  */

	/* The following parameter values are the defaults from

	 * "Software Developer's Guide for CPiA Cameras".  Any changes

 AEC */

 ACB */

 End of default values from Software Developer's Guide */

	/* Set Sensor FPS to 15fps. This seems better than 30fps

 From windows driver */

 From windows driver */

 From windows driver */

 From windows driver */

 windows driver does it too */

 GetCPIAVersion */

 GetPnPID */

 Everything in here is from the Windows driver */

 define for compgain calculation */

 equivalent functions without floating point math */

 round down current exposure to nearest value */

 Average equivalent coarse for each comp channel */

 monitor the exposure and adjust the sensor frame rate if needed */

 get necessary stats and register settings from camera */

 do_command can't handle this, so do it ourselves */

 Flicker control on */

 decode */

 dark */

 very dark */

 just dark */

 light */

 very light */

 just light */

 not dark or light */

 Flicker control off */

 dark */

 very dark */

 just dark */

 light */

 very light */

 just light */

 not dark or light */

 Flicker control on */

 dark for too long */

 light for too long */

 Flicker control off */

 dark for too long */

 light for too long */

-----------------------------------------------------------------*/

/* if flicker is switched off, this function switches it back on.It checks,

   however, that conditions are suitable before restarting it.

   This should only be called for firmware version 1.2.



   It also adjust the colour balance when an exposure step is detected - as

   long as flicker is running

	/*

	  see how far away camera exposure is from a valid

	  flicker exposure value

 Flicker control auto-disabled */

		/* exposure is now high enough to switch

 this function is called at probe time */

 Check the firmware version. */

 A bug in firmware 1-02 limits gainMode to 2 */

 set QX3 detected flag */

 -- start the camera -- */

 Start the camera in low power mode */

 FIXME: this is just dirty trial and error */

 procedure described in developer's guide p3-28 */

 Check the firmware version. */

	/* The fatal error checking should be done after

	/* Set streamState before transition to high power to avoid bug

 GotoHiPower */

 Check the camera status */

	/* VPVersion can't be retrieved before the camera is in HiPower,

 Determine video mode settings */

 crop */

 quarter */

 And now set the camera to a known state */

	/* We start with compression disabled, as we need one uncompressed

 Start stream */

	/* Wait 6 frames before turning compression on for the sensor to get

 save camera state for later open (developers guide ch 3.5.3) */

 GotoLoPower */

 Update the camera status */

 If the last button state is pressed, release it now! */

		/* The camera latch will hold the pressed state until we reset

		   the latch, so we do not reset sd->params.qx3.button now, to

 this function is called at probe and resume time */

	/* Start / Stop the camera to make sure we are talking to

	   a supported camera, and to get some information from it

	/* Ensure the QX3 illuminators' states are restored upon resume,

 Check for SOF */

 Check for proper EOF for last frame */

	/* Set the normal compression settings once we have captured a

 Switch flicker control back on if it got turned off */

	/* If AEC is enabled, monitor the exposure and

 Update our knowledge of the camera state */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Z-star vc0321 library

 *

 * Copyright (C) 2009-2010 Jean-François Moine <http://moinejf.free.fr>

 * Copyright (C) 2006 Koninski Artur takeshi87@o2.pl

 * Copyright (C) 2006 Michel Xhaard

moinejf.free.fr>");

 specific webcam descriptor */

 !! must be the first item */

 hvflip cluster */

 SamsungQ1 (2 sensors) */

 mirrored by default */

 vertical flipped by default */

 mi1310_soc only */

 OV7660/7670 registers */

 i2c add: 5d */

 i2c add: 5d */

 h/v flip */

 h/v flip */

 h/v flip */

 i2c add: 48 */

 h/v flips - was 03 */

 i2c add: 48 */

 h/v flip */

 h/v flip */

 h/v flip */

 h/v flip */

 h/v flip */

 h/v flip */

 h/v flip */

 i2c add: 76 */

/*	{0x00, 0xd1, 0x00, 0xaa},	{0x00, 0x20, 0xc4, 0xaa},

	{0x00, 0xd5, 0x7c, 0xaa}, */

 i2c add: 11 */

 0xb315  <-0 href startl */

 i2c add: 21 */

 13 */

 MVFP */

 0x3d <-40 gamma 01 */

 edge 00 */

 0 * Nightframe 1/4 + 50Hz -> 0xC8 */

 mx change yuyv format 00, 04, 01; 08, 0c*/

 agc ampli */

 0xb315  <-0 href startl */

 13 */

 sizer */

 MVFP */

 0x3d <-40 gamma 01 */

 edge 00 */

 0  * Nightframe 1/4 + 50Hz -> 0xC8 */

 mx change yuyv format 00, 04, 01; 08, 0c*/

 agc ampli */

 sizer filters */

 */

 */

 */

 ff */

 45 */

 i2c add: 21 */

 MVFP */

 MVFP */

 i2c add: 21 */

 MVFP */

 MVFP */

 PO1200 - values from usbvm326.inf and ms-win trace */

 reset? */

	{0x00, 0x00, 0x33, 0xdd}, */

 i2c add: 5c */

 h/v flip */

 sharpness */

 sharpness? */

 end of usbvm326.inf - start of ms-win trace */

read b306*/

read b827*/

gamma - to do?*/

gamma again*/

matrix*/

gamma*/

matrix*/

read 46*/

read bfff*/

write 89 0400 1415*/

 i2c add: 76 */

 sensor height = 1024 */

 sensor width = 1280 */

 reinit on alt 2 (qvga) or alt7 (vga) */

 gamma 0 */

 gamma 1 */

 gamma 2 */

 change to 640x480 */

 delay 1s */

 change to 320x240 */

 delay 1s */

 probe values */

      sensorId,	   I2cAdd,	IdAdd,  VpId,  m1,    m2,  op */

 0 OV9640 */

 1 ICM108T (may respond on IdAdd == 0x83 - tested in vc032x_probe_sensor) */

 2 PO2130 (may detect PO3130NC - tested in vc032x_probe_sensor)*/

 3 MI1310 */

 4 MI360 - tested in vc032x_probe_sensor */

	{SENSOR_MI0360,	    0x80 | 0x5d, 0x00, 0x8243, 0x24, 0x25, 0x01}, */

 5 7131R */

 6 OV7649 */

 7 PAS302BCW */

 8 OV7660 */

 9 PO3130NC - (tested in vc032x_probe_sensor) */

	{SENSOR_PO3130NC,   0x80 | 0x76, 0x00, 0x3130, 0x24, 0x25, 0x01}, */

 10 PO1030KC */

 11 MI1310_SOC */

 12 OV9650 */

 13 S5K532 */

 14 MI360_SOC - ??? */

 15 PO1200N */

 16 PO3030K */

 17 PO2030 */

 ?? */

      sensorId,	   I2cAdd,	IdAdd,  VpId,  m1,    m2,  op */

 0 OV9640 */

 1 ICM108T (may respond on IdAdd == 0x83 - tested in vc032x_probe_sensor) */

 2 PO2130 (may detect PO3130NC - tested in vc032x_probe_sensor)*/

 3 MI1310 */

 4 MI360 - tested in vc032x_probe_sensor */

	{SENSOR_MI0360,	    0x80 | 0x5d, 0x00, 0x8243, 0x24, 0x25, 0x01}, */

 5 7131R */

 6 OV7649 */

 7 PAS302BCW */

 8 OV7660 */

 9 PO3130NC - (tested in vc032x_probe_sensor) */

	{SENSOR_PO3130NC,   0x80 | 0x76, 0x00, 0x3130, 0x24, 0x25, 0x01}, */

 10 PO1030KC */

 11 MI1310_SOC */

 12 OV9650 */

 13 S5K532 */

 14 MI360_SOC - ??? */

 15 PO1200N */

 16 ?? */

 17 PO2030 */

 ?? */

fixme: not in the ms-win probe - may be found before? */

 read 'len' bytes in gspca_dev->usb_buf */

 value */

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

fixme: should also check the other sensor (back mi1320_soc, front mc501cb)*/

 select the back sensor */

 1 or 2 */

fixme:should check if (!(gspca_dev->usb_buf[0] & 0x02)) error*/

 normal write */

 i2c op */

 i2c op */

not reached*/

 this function is called at probe time */

 no probe */

 this function is called at probe and resume time */

 number of packets per ISOC message */

 select page 0 */

 def = max */

fixme:to do */

fixme:to do - valid when reg d1 = 0x1c - (reg16 + reg15 = 0xa3)*/

fixme: back sensor only*/

 Assume start use the good resolution from gspca_dev->mode */

 320x240 */

 640x480 */

 320x240 */

 640x480 */

 320x240 */

 640x480 */

 320x240 */

 640x480 */

 1280x1024 */

 320x240 */

 640x480 */

 320x240 */

 640x480 */

	case SENSOR_POxxxx: */

fixme: i2c read 04 and 05*/

 led on */

 called on streamoff with alt 0 and on disconnect */

fixme: is this useful?*/

 isoc packet */

 iso pkt length */

	/* The vc0321 sends some additional data after sending the complete

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * kinect sensor device camera, gspca driver

 *

 * Copyright (C) 2011  Antonio Ospite <ospite@studenti.unina.it>

 *

 * Based on the OpenKinect project and libfreenect

 * http://openkinect.org/wiki/Init_Analysis

 *

 * Special thanks to Steven Toth and kernellabs.com for sponsoring a Kinect

 * sensor device which I tested the driver on.

 specific webcam descriptor */

 !! must be the first item */

 a sequence number for packets */

 to identify different stream types */

 output buffer for control commands */

 input buffer for control commands */

 this function is called at probe time */

 Setting those values is not needed for video stream */

 this function is called at probe and resume time */

 format */

 turn off IR-reset function */

 Reset video stream */

	/* Due to some ridiculous condition in the firmware, we have to start

	 * and stop the depth stream before the camera will hand us 1280x1024

	 * IR.  This is a stupid workaround, but we've yet to find a better

	 * solution.

	 *

	 * Thanks to Drew Fisher for figuring this out.

 Start video stream */

 disable Hflip */

 turn off IR-reset function */

 reset depth stream */

 Depth Stream Format 0x03: 11 bit stream | 0x02: 10 bit */

 Depth Stream Resolution 1: standard (640x480) */

 Depth Framerate / 0x1e (30): 30 fps */

 Depth Stream Control  / 2: Open Depth Stream */

 disable depth hflip / LSB = 0: Smoothing Disabled */

 reset video stream */

 reset depth stream */

 sub-driver description */

	/*

	.get_streamparm = sd_get_streamparm,

	.set_streamparm = sd_set_streamparm,

	/*

	.get_streamparm = sd_get_streamparm,

	.set_streamparm = sd_set_streamparm,

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Quickcam cameras initialization data

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

 specific webcam descriptor */

 !! must be the first item */

 TV-8532A (ICM532A) registers (LE) */

 [10] */

 GPIO */

 GPIO */

	dataH dataM dataL */

 write 1 byte */

 value */

 write 2 bytes */

 value */

 this function is called at probe time */

 Test0Sel = 10 */

*****************************************************/

 begin active line */

 mirror and digital gain */

 = 0x84 */

 this function is called at probe and resume time */

 0x84 */

 -- start the camera -- */

 0x20; 0x0c */

***********************************************/

 0x72 compressed mode 0x28 */

 176x144 */

 CIF - 2 lines/packet */

 352x288 */

 CIF - 2 lines/packet */

***********************************************/

 slow clock */

***********************************************/

 update registers */

 end update */

 check the empty packets */

 ignore the first packets */

 Test0Sel = 11 = GPIO */

 isoc packet */

 iso packet length */

 2 more lines in 352x288 ! */

	/* each packet contains:

	 * - header 2 bytes

	 * - RGRG line

	 * - 4 bytes

	 * - GBGB line

	 * - 4 bytes

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DivIO nw80x subdriver

 *

 * Copyright (C) 2011 Jean-François Moine (http://moinejf.free.fr)

 * Copyright (C) 2003 Sylvain Munaut <tnt@246tNt.com>

 *			Kjell Claesson <keyson@users.sourceforge.net>

moinejf.free.fr>");

 specific webcam descriptor */

 !! must be the first item */

 and et31x110 */

 Trust 120 SpaceCam */

 other Trust 120 SpaceCam */

 Conceptronic Video Pro */

 number of webcams */

	[Generic800]	= BRIDGE_NW800,	/* 06a5:0000

	[SpaceCam]	= BRIDGE_NW800,	/* 06a5:d800

	[SpaceCam2]	= BRIDGE_NW800,	/* 06a5:d800 - pas106

	[Cvideopro]	= BRIDGE_NW802,	/* 06a5:d001

	[Dlink350c]	= BRIDGE_NW802,	/* 06a5:d001

	[DS3303u]	= BRIDGE_NW801,	/* 06a5:d001

	[Kr651us]	= BRIDGE_NW802,	/* 06a5:d001

	[Kritter]	= BRIDGE_NW802,	/* 06a5:d001

	[Mustek300]	= BRIDGE_NW802,	/* 055f:d001

	[Proscope]	= BRIDGE_NW802,	/* 06a5:d001

	[Twinkle]	= BRIDGE_NW800,	/* 06a5:d800 - hv7121b? (seems pas106)

					 * Divio Chicony TwinkleCam

	[DvcV6]		= BRIDGE_NW802,	/* 0502:d001

	[P35u]		= BRIDGE_NW801,	/* 052b:d001, 06a5:d001 and 06be:d001

/*

 * other webcams:

 *	- nw801 046d:d001

 *		Logitech QuickCam Pro (dark focus ring)

 *	- nw801 0728:d001

 *		AVerMedia Camguard

 *	- nw??? 06a5:d001

 *		D-Link NetQam Pro 250plus

 *	- nw800 065a:d800

 *		Showcam NGS webcam

 *	- nw??? ????:????

 *		Sceptre svc300

/*

 * registers

 *    nw800/et31x110	  nw801		  nw802

 *	0000..009e	0000..00a1	0000..009e

 *	0200..0211	   id		   id

 *	0300..0302	   id		   id

 *	0400..0406	  (inex)	0400..0406

 *	0500..0505	0500..0506	  (inex)

 *	0600..061a	0600..0601	0600..0601

 *	0800..0814	   id		   id

 *	1000..109c	1000..10a1	1000..109a

/* resolutions

 *	nw800: 320x240, 352x288

 *	nw801/802: 320x240, 640x480

/*

 * The sequences below contain:

 *	- 1st and 2nd bytes: either

 *		- register number (BE)

 *		- I2C0 + i2c address

 *	- 3rd byte: data length (=0 for end of sequence)

 *	- n bytes: data

/* 06a5:d001 - nw801 - Panasonic

 AE window */

 clock */

 .. gain .. */

 nw802 (sharp IR3Y38M?) */

/*			  0x00, 0x0e, 0x35, 0x4f, 0x62, 0x71, 0x7f, 0x8b,

 *			  0x96, 0xa0, 0xa9, 0xb2, 0xbb, 0xc3, 0xca, 0xd2,

 et31x110 - Trust 120 SpaceCam */

 et31x110 - pas106 - other Trust SpaceCam120 */

 i2c end */

 pixel clock */

 i2c end */

 exposure */

 i2c end */

 gains */

 nw802 - Conceptronic Video Pro */

 nw802 - D-link dru-350c cam */

/* 06a5:d001 - nw801 - Sony

fixme: 320x240 only*/

/* 06a5:d001 - nw802 - Panasonic

 nw802 - iRez Kritter cam */

 nw802 - Mustek Wcam 300 mini */

 nw802 - Scope USB Microscope M2 (ProScope) (Hitachi HD49322BF) */

 nw800 - hv7121b? (seems pas106) - Divio Chicony TwinkleCam */

 i2c end */

 nw802 dvc-v6 */

 -- write a register -- */

 value */

 -- read registers in usb_buf -- */

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

 0 - 253 */

 SIF reg0/1 (AGC) */

 if AE_FULL_FRM */

 get the AE window size */

 write the value */

 read it */

 this function is called at probe time */

	/*

	 * Autodetect sequence inspired from some log.

	 * We try to detect what registers exist or not.

	 * If 0x0500 does not exist => NW802

	 * If it does, test 0x109b. If it doesn't exist,

	 * then it's a NW801. Else, a NW800

	 * If a et31x110 (nw800 and 06a5:d800)

	 *	get the sensor ID

 GPIO */

 ?? */

 Hynix? */

 Pixart */

 qvga */

 cif */

 qvga only */

 this function is called at probe and resume time */

 -- start the camera -- */

 'go' off */

 LED off */

 isoc packet */

 iso packet length */

	/*

	 * frame header = '00 00 hh ww ss xx ff ff'

	 * with:

	 *	- 'hh': height / 4

	 *	- 'ww': width / 4

	 *	- 'ss': frame sequence number c0..dd

 get the average luma */

 autogain/gain/exposure control cluster */

	/* Some webcams only have exposure, so handle that separately from the

		/* For P35u choose coarse expo auto gain function gain minimum,

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Fujifilm Finepix subdriver

 *

 * Copyright (C) 2008 Frank Zago

 Default timeout, in ms */

/* Maximum transfer size to use. The windows driver reads by chunks of

 * 0x2000 bytes, so do the same. Note: reading more seems to work

 Structure to hold all of our device specific stuff */

 !! must be the first item */

/* Delay after which claim the next frame. If the delay is too small,

 * the camera will return old frames. On the 4800Z, 20ms is bad, 25ms

 * will fail every 4 or 5 frames, but 30ms is perfect. On the A210,

 These cameras only support 320x200. */

 send a command to the webcam */

 0: reset, 1: frame request */

 reset */

 fr req */

/*

 * This function is called as a workqueue function and runs whenever the camera

 * is streaming data. Because it is a workqueue function it is allowed to sleep

 * so we can use synchronous USB calls. To avoid possible collisions with other

 * threads attempting to use gspca_dev->usb_buf we take the usb_lock when

 * performing USB operations using it. In practice we don't really need this

 * as the camera doesn't provide any controls.

 loop reading a frame */

 request a frame */

 the frame comes in parts */

				/* Most of the time we get a timeout

				/* If the result is less than what was asked

				 * for, then it's the end of the

				 * frame. Sometimes the jpeg is not complete,

				 * but there's nothing we can do. We also end

				 * here if the the jpeg ends right at the end

 got a partial image */

		/* We must wait before trying reading the next

		 * frame. If we don't, or if the delay is too short,

 this function is called at probe time */

 this function is called at probe and resume time */

 start the camera */

 Init the device */

	/* Read the result of the command. Ignore the result, for it

 Request a frame, but don't read it */

 Again, reset bulk in endpoint */

 called on streamoff with alt==0 and on disconnect */

 the usb_lock is held at entry - restore on exit */

 wait for the work queue to terminate */

 Table of supported USB devices */

 sub-driver description */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * GSPCA sub driver for W996[78]CF JPEG USB Dual Mode Camera Chip.

 *

 * Copyright (C) 2009 Hans de Goede <hdegoede@redhat.com>

 *

 * This module is adapted from the in kernel v4l1 w9968cf driver:

 *

 * Copyright (C) 2002-2004 by Luca Risolia <luca.risolia@studio.unibo.it>

/* Note this is not a stand alone driver, it gets included in ov519.c, this

   is a bit of a hack, but it needs the driver code for a lot of different

   ov sensors which is already present in ov519.c (the old v4l1 driver used

   the ovchipcam framework). When we have the time we really should move

   the sensor drivers to v4l2 sub drivers, and properly split of this

 delay in us for I2C bit r/w operations */

/*--------------------------------------------------------------------------

  Write 64-bit data to the fast serial bus registers.

  Return 0 on success, -1 otherwise.

 Avoid things going to fast for the bridge with a xhci host */

/*--------------------------------------------------------------------------

  Write data to the serial bus control register.

  Return 0 on success, a negative number otherwise.

 Avoid things going to fast for the bridge with a xhci host */

	/* We don't use reg_w here, as that would cause all writes when

/*--------------------------------------------------------------------------

  Read data from the serial bus control register.

  Return 0 on success, a negative number otherwise.

 Avoid things going to fast for the bridge with a xhci host */

	/* We don't use reg_r here, as the w9968cf is special and has 16

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

/*--------------------------------------------------------------------------

  Upload quantization tables for the JPEG compression.

  This function is called by w9968cf_start_transfer().

  Return 0 on success, a negative number otherwise.

 JPEG clock enable */

 JPEG encoder enable */

/****************************************************************************

 * Low-level I2C I/O functions.                                             *

 * The adapter supports the following I2C transfer functions:               *

 * i2c_adap_fastwrite_byte_data() (at 400 kHz bit frequency only)           *

 * i2c_adap_read_byte_data()                                                *

 * i2c_adap_read_byte()                                                     *

 SDE=1, SDA=0, SCL=1 */

 SDE=1, SDA=0, SCL=0 */

 SDE=1, SDA=0, SCL=0 */

 SDE=1, SDA=0, SCL=1 */

 SDE=1, SDA=1, SCL=1 */

 SDE=1, SDA=sda, SCL=0 */

 SDE=1, SDA=sda, SCL=1 */

 SDE=1, SDA=sda, SCL=0 */

	/* No need to ensure SDA is high as we are always called after

 SDE=1, SDA=1, SCL=1 */

 SDE=1, SDA=1, SCL=0 */

	/* No need to ensure SDA is high as we are always called after

 SDE=1, SDA=1, SCL=1 */

 SDE=1, SDA=1, SCL=0 */

 Ensure SDA is high before raising clock to avoid a spurious stop */

 SDE=1, SDA=1, SCL=0 */

 SDE=1, SDA=1, SCL=1 */

 SDE=1, SDA=1, SCL=0 */

 SMBus protocol: S Addr Wr [A] Subaddr [A] Value [A] P */

 SMBus protocol: S Addr Wr [A] Subaddr [A] P S Addr+1 Rd [A] [Value] NA P */

 Fast serial bus data control disable */

 don't change ! */

	/* signal we don't want to read anymore, the v4l1 driver used to

	   send an ack here which is very wrong! (and then fixed

 Fast serial bus data control re-enable */

/*--------------------------------------------------------------------------

  Turn on the LED on some webcams. A beep should be heard too.

  Return 0 on success, a negative number otherwise.

 power-down */

 reset everything */

 normal operation */

 serial bus, SDS high */

 serial bus, SDS low */

 ..high 'beep-beep' */

 Set sda scl to FSB mode */

 power off */

 power on */

 DRAM timings */

 SDRAM timings */

 Y buf.0, low */

 Y buf.0, high */

 U buf.0, low */

 U buf.0, high */

 V buf.0, low */

 V buf.0, high */

 Y buf.1, low */

 Y buf.1, high */

 U buf.1, low */

 U buf.1, high */

 V buf.1, low */

 V buf.1, high */

 JPEG buf 0 low */

 JPEG buf 0 high */

 JPEG buf 1 low */

 JPEG bug 1 high */

 JPEG restart interval */

JPEG VLE FIFO threshold*/

 disable hw up-scaling */

 JPEG/MCTL test data */

		/*

		 * Sigh, this is dependend on the clock / framerate changes

		 * made by the frequency control, sick.

		 *

		 * Note we cannot use v4l2_ctrl_g_ctrl here, as we get called

		 * from ov519.c:setfreq() with the ctrl lock held!

 Work around to avoid FP arithmetic */

 Scaling factors */

 JPEG width & height */

 Y & UV frame buffer strides (in WORD) */

 reset everything */

 normal operation */

 Transfer size in WORDS (for UYVY format only) */

 low bits */

 high bits */

 We may get called multiple times (usb isoc bw negotiat.) */

 JPEG 420 */

 Video Capture Control Register */

 Seems to work around a bug in the image sensor */

	/* NOTE: We may not have enough memory to do double buffering while

	   doing compression (amount of memory differs per model cam).

	   So we use the second image buffer also as jpeg stream buffer

 val |= 0x0002; YUV422P */

 YUV420P */

 Enable HW double buffering */

 val |= 0x0020; enable clamping */

 val |= 0x0008; enable (1-2-1) filter */

 val |= 0x000c; enable (2-3-6-3-2) filter */

 capt. enable */

 disable JPEG encoder */

 stop video capture */

/* The w9968cf docs say that a 0 sized packet means EOF (and also SOF

   for the next frame). This seems to simply not be true when operating

   in JPEG mode, in this case there may be empty packets within the

   frame. So in JPEG mode use the JPEG SOI marker to detect SOF.



   Note to make things even more interesting the w9968cf sends *PLANAR* jpeg,

   to be precise it sends: SOI, SOF, DRI, SOS, Y-data, SOS, U-data, SOS,

 isoc packet */

 iso packet length */

			/* Strip the ff d8, our own header (which adds

 In UYVY mode an empty packet signals EOF */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Topro TP6800/6810 webcam driver.

 *

 * Copyright (C) 2011 Jean-François Moine (http://moinejf.free.fr)

 * Copyright (C) 2009 Anders Blomdell (anders.blomdell@control.lth.se)

 * Copyright (C) 2008 Thomas Champagne (lafeuil@gmail.com)

moinejf.free.fr>, Anders Blomdell <anders.blomdell@control.lth.se>");

 JPEG header */

 jpeg */

 quantization table quality 50% */

 DQT */

 Define Huffman table (thanks to Thomas Kaiser) */

 SOF0 (start of frame 0 */

 data precision */

 height */

 width */

 component number */

 samples Y = jpeg 422 */

 quant Y */

 samples CbCr - quant CbCr */

 SOS (start of scan) */

 !! must be the first item */

 webcam current JPEG quality (0..16) */

 autogain / start counter for tp6810 */

 check gain every N frames */

 ~= ov7630 / ov7648 */

/*

 * JPEG quality

 * index: webcam compression

 * value: JPEG quality in %

/*

 * webcam quality in %

 * the last value is the ultra fine quality

 TP6800 register offsets */

 CX0342 register offsets */

 Define quantization table (thanks to Thomas Kaiser) */

 Quality 0 */

 Quality 1 */

 Quality 2 */

 Quality 3 */

 Quality 4 */

 Quality 5 */

 Quality 6 */

 Quality 7 */

 Quality 8 */

 Quality 9 */

 Quality 10 */

 Quality 11 */

 Quality 12 */

 Quality 13 */

 Quality 14 */

 Quality 15 */

 Quality 16-31 */

 later after isoc start */

 define the JPEG header */

 set the JPEG quality for sensor soi763a */

 the returned value is in gspca_dev->usb_buf */

 error */

 i2c 16 bits */

 ov??? */

 i2c 8 bits */

 (unknown i2c) */

 i2c 8 bits */

 tas??? / hv??? */

 po??? */

 i2c 16 bits */

 mi/mt??? */

 mi/mt??? */

 (unknown i2c) */

 i2c 8 bits */

 cx0342 */

 cx0342 I2C addr */

 7630 = soi673a */

 omnivision */

 sensor reset */

 set the gain and exposure */

 soi763a */

 AEC_H (exposure time) */

	i2c_w(gspca_dev, 0x76, 0x02);	 * AEC_L ([1:0] */

 gain */

 set the JPEG quantization tables */

 update the jpeg quantization tables */

 set the JPEG compression quality factor */

 auto quality */

 Y R/G/B (LE values) */

 U R/G/B */

 V R/G/B */

 Y R/G/B (LE values) */

 U R/G/B */

 V R/G/B */

 gamma 0 - from tp6800 + soi763a */

 gamma 1 - from tp6810 + soi763a */

 gamma 2 */

 gamma 3 - from tp6810 + cx0342 */

 gamma 4 - from tp6800 + soi763a */

 gamma 5 */

	msleep(50); */

	msleep(50); */

 grid compensation enable */

 vga */

 scaling down enable */

 set the resolution for sensor cx0342 */

 qvga */

 vga */

 convert the frame rate to a tp68x0 value */

 1 = 5fps .. 6 = 30fps */

 640x480 * 30 fps does not work */

 if 30 fps */

 15 fps */

 3 = 5fps .. 7 = 30fps */

 640x480 * 30 fps does not work */

 if 30 fps */

 15 fps */

 clock * 1 */

 lower frame rate */

 this function is called at probe time */

 this function is called at probe and resume time */

 sif */

 LED off */

 LED off */

/* values:

 *	0x80: snapshot button

 *	0x40: LED

 *	0x20: (bridge / sensor) reset for tp6810 ?

 *	0x07: sensor type ?

 guess the sensor type */

fixme: not sure this is working*/

 This function is called before choosing the alt setting */

 exposure */

 gain */

 fixme: is this useful? */

 i2c 8 bits */

 G1B..RG0 */

 cx0342 i2c addr */

fixme: gains, but 00..80 only*/

 vga */

 qvga */

	setquality(gspca_dev, v4l2_ctrl_g_ctrl(sd->jpegqual)); */

 i2c 8 bits */

 BG1..G0R */

 15 fps */

 scale down - medium edge */

 qvga */

 soi763a i2c addr */

 mirror - RGB */

 clock - no AGC nor AEC */

 saturation */

 hue */

 contrast */

 brightness */

 AEC */

 clock rate */

 640x480 */

 H href start */

 H href end */

 V start */

 V end */

 blue gain */

 red gain */

 sensor reset */

 vga */

 qvga */

 -- start the camera -- */

	/* the start of frame contains:

	 *	ff d8

	 *	ff fe

	 *	width / 16

	 *	height / 8

	 *	quality

fixme: don't discard the whole frame..*/

fixme: there may be information in the 4 high bits*/

 Have only seen this with corrupt frames */

	case 5: */

 values not used (unknown) */

 desired luma */

 dead zone */

 gain knee */

 expo knee */

 get stream parameters (framerate) */

 set stream parameters (framerate) */

 Return the actual framerate */

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Mars MR97310A library

 *

 * The original mr97310a driver, which supported the Aiptek Pencam VGA+, is

 * Copyright (C) 2009 Kyle Guinn <elyk03@gmail.com>

 *

 * Support for the MR97310A cameras in addition to the Aiptek Pencam VGA+

 * and for the routines for detecting and classifying these various cameras,

 * is Copyright (C) 2009 Theodore Kilgore <kilgota@auburn.edu>

 *

 * Support for the control settings for the CIF cameras is

 * Copyright (C) 2009 Hans de Goede <hdegoede@redhat.com> and

 * Thomas Kaiser <thomas@kaiser-linux.li>

 *

 * Support for the control settings for the VGA cameras is

 * Copyright (C) 2009 Theodore Kilgore <kilgota@auburn.edu>

 *

 * Several previously unsupported cameras are owned and have been tested by

 * Hans de Goede <hdegoede@redhat.com> and

 * Thomas Kaiser <thomas@kaiser-linux.li> and

 * Theodore Kilgore <kilgota@auburn.edu> and

 * Edmond Rodriguez <erodrig_97@yahoo.com> and

 * Aurelien Jacobs <aurel@gnuage.org>

 *

 * The MR97311A support in gspca/mars.c has been helpful in understanding some

 * of the registers in these cameras.

 global parameters */

 specific webcam descriptor */

 !! must be the first item */

 exposure/min_clockdiv control cluster */

 0 is CIF and 1 is VGA */

 We use 0 and 1 here, too. */

 the bytes to write are in gspca_dev->usb_buf */

 the bytes are read into gspca_dev->usb_buf */

 ISOC transferring enable... */

 This function is called at probe time */

	/* Several of the supported CIF cameras share the same USB ID but

	 * require different initializations and different control settings.

	 * The same is true of the VGA cameras. Therefore, we are forced

	 * to start the initialization process in order to determine which

	 * camera is present. Some of the supported cameras require the

	 * memory pointer to be set to 0 as the very first item of business

	 * or else they will not stream. So we do that immediately.

 Now, the query for sensor type. */

		/*

		 * All but one of the known CIF cameras share the same USB ID,

		 * but two different init routines are in use, and the control

		 * settings are different, too. We need to detect which camera

		 * of the two known varieties is connected!

		 *

		 * A list of known CIF cameras follows. They all report either

		 * 0200 for type 0 or 0300 for type 1.

		 * If you have another to report, please do

		 *

		 * Name		sd->sensor_type		reported by

		 *

		 * Sakar 56379 Spy-shot	0		T. Kilgore

		 * Innovage		0		T. Kilgore

		 * Vivitar Mini		0		H. De Goede

		 * Vivitar Mini		0		E. Rodriguez

		 * Vivitar Mini		1		T. Kilgore

		 * Elta-Media 8212dc	1		T. Kaiser

		 * Philips dig. keych.	1		T. Kilgore

		 * Trust Spyc@m 100	1		A. Jacobs

		/*

		 * Here is a table of the responses to the query for sensor

		 * type, from the known MR97310A VGA cameras. Six different

		 * cameras of which five share the same USB ID.

		 *

		 * Name			gspca_dev->usb_buf[]	sd->sensor_type

		 *				sd->do_lcd_stop

		 * Aiptek Pencam VGA+	0300		0		1

		 * ION digital		0300		0		1

		 * Argus DC-1620	0450		1		0

		 * Argus QuickClix	0420		1		1

		 * Sakar 77379 Digital	0350		0		1

		 * Sakar 1638x CyberPix	0120		0		2

		 *

		 * Based upon these results, we assume default settings

		 * and then correct as necessary, as follows.

		 *

 Sakar Digital color needs to be adjusted. */

 Nothing to do here. */

 Stop streaming as we've started it only to probe the sensor type. */

 this function is called at probe and resume time */

 Hsize/8 for 352 or 320 */

 Vsize/4 for 288 or 240 */

 or 0xbb, depends on sensor */

 Hstart, depends on res. */

 reserved ? */

 Vstart, depends on res. and sensor */

 0x54 to get 176 or 160 */

 Note: Some of the above descriptions guessed from MR97113A driver */

 reg 8, 2:1 scale down from 320 */

 reg 2, H size/8 */

 reg 3, V size/4 */

 reg 5, H start  */

 reg 7, V start  */

 reg 8, 2:1 scale down from 352 */

 reg 2, H size/8 */

 reg 3, V size/4 */

 reg 5, H start  */

 reg 7, V start  */

 sd->sensor_type = 1 */

 Reg 3,4, 7,8 get set by the controls */

 5/6 also seen as 65h/32h */

 Without this command the cam won't work with USB-UHCI */

 What some of these mean is explained in start_cif_cam(), above */

 reg 8, 4:1 scale down */

 reg 8, 2:1 scale down */

 reg 2, H size/8 */

 reg 3, V size/4 */

 reg 5, H start */

 reg 7, V start */

 Bayer tile shifted */

 reg 8, 2:1 scale down */

 reg 2, H size */

 reg 3, V size */

 reg 5, H start */

 reg 7, V start */

 Bayer tile shifted */

				/* adjusted blue, green, red gain correct

 default blue, green, red gain settings */

 These settings may be better for some cameras */

 {0x0a, 0x00, {0x01, 0x06, 0x00, 0x00, 0x01, */

 sensor type == 2 */

 Reg 3 msb and 4 is lsb of the exposure setting*/

			/* The following are used in the gain control

			 * which is BTW completely borked in the OEM driver

			 * The values for each color go from 0 to 0x7ff

			 *{0x0a, 0x00, {0x01}, 1},  green1 gain msb

			 *{0x0b, 0x00, {0x10}, 1},  green1 gain lsb

			 *{0x0c, 0x00, {0x01}, 1},  red gain msb

			 *{0x0d, 0x00, {0x10}, 1},  red gain lsb

			 *{0x0e, 0x00, {0x01}, 1},  blue gain msb

			 *{0x0f, 0x00, {0x10}, 1},  blue gain lsb

			 *{0x10, 0x00, {0x01}, 1}, green2 gain msb

			 *{0x11, 0x00, {0x10}, 1}, green2 gain lsb

 weird effect on colors */

 vertical alignment */

 don't mess with */

 {0x1c, 0x00, {0x17}, 1}, contrast control */

 moving causes a mess */

 moving jams the camera */

	/* Some of the VGA cameras require the memory pointer

	 * to be set to 0 again. We have been forced to start the

	 * stream in sd_config() to detect the hardware, and closed it.

 Not all the cams need this, but even if not, probably a good idea */

 This reg and the next one used on CIF cams. */

 VGA cams seem to use regs 0x0b and 0x0c */

	  0  1  2   3  4  5  6  7  8  9  10  11  12  13  14  15 */

 Note register 7 is also seen as 0x8x or 0xCx in some dumps */

 Use lookup table for funky Argus QuickClix brightness */

		/* This cam does not like exposure settings < 300,

		/* We have both a clock divider and an exposure register.

		   We first calculate the clock divider, as that determines

		   the maximum exposure and then we calculate the exposure

		   register setting (which goes from 0 - 511).



		   Note our 0 - 4095 exposure is mapped to 0 - 511

 Limit framerate to not exceed usb bandwidth */

		/* Frame exposure time in ms = 1000 * clockdiv / 60 ->

 exposure register value is reversed! */

 Setup controls depending on camera type */

 No brightness for sensor_type 0 */

 All controls need to be disabled if VGA sensor_type is 0 */

 no controls! */

	/* Separate brightness control description for Argus QuickClix as it has

	 * different limits from the other mr97310a cameras, and separate gain

	/*

	 * This control is disabled for CIF type 1 and VGA type 0 cameras.

	 * It does not quite act linearly for the Argus QuickClix camera,

	 * but it does control brightness. The values are 0 - 15 only, and

	 * the table above makes them act consecutively.

 Include pac common sof detection functions */

 isoc packet */

 iso packet length */

 finish decoding current frame */

 Start next frame. */

 sub-driver description */

 -- module initialisation -- */

 Trust Spyc@m 100 */

 Aiptek Pencam VGA+ */

 All other known MR97310A VGA cams */

 All known MR97310A CIF cams */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SQ905 subdriver

 *

 * Copyright (C) 2008, 2009 Adam Baker and Theodore Kilgore

/*

 * History and Acknowledgments

 *

 * The original Linux driver for SQ905 based cameras was written by

 * Marcell Lengyel and further developed by many other contributors

 * and is available from http://sourceforge.net/projects/sqcam/

 *

 * This driver takes advantage of the reverse engineering work done for

 * that driver and for libgphoto2 but shares no code with them.

 *

 * This driver has used as a base the finepix driver and other gspca

 * based drivers and may still contain code fragments taken from those

 * drivers.

 Default timeouts, in ms */

 Maximum transfer size to use. */

 The known modes, or registers. These go in the "value" slot. */

 00 is "none" obviously */

 precedes any bulk read */

 precedes the command codes below */

 when reading an "idling" command */

 ack bulk read completed */

/* Any non-zero value in the bottom 2 bits of the 2nd byte of

 * the ID appears to indicate the camera can do 640*480. If the

 * LSB of that byte is set the image is just upside down, otherwise

 Some command codes. These go in the "index" slot. */

 asks for model string */

 gets photo alloc. table, not used here */

 accesses photo data, not used here */

 clear everything */

 Starts capture at 160x120 */

 Starts capture at 320x240 */

 Starts capture at 640x480 (some cams only) */

 note that the capture command also controls the output dimensions */

 Structure to hold all of our device specific stuff */

 !! must be the first item */

	/*

	 * Driver stuff

/*

 * Send a command to the camera.

 request */

 request */

/*

 * Acknowledge the end of a frame - see warning on sq905_command.

 request */

/*

 *  request and read a block of data - see warning on sq905_command.

 request */

 successful, it returns 0, otherwise  negative */

/*

 * This function is called as a workqueue function and runs whenever the camera

 * is streaming data. Because it is a workqueue function it is allowed to sleep

 * so we can use synchronous USB calls. To avoid possible collisions with other

 * threads attempting to use gspca_dev->usb_buf we take the usb_lock when

 * performing USB operations using it. In practice we don't really need this

 * as the camera doesn't provide any controls.

 bytes remaining in current frame. */

 size to use for the next read. */

 true if we have already read the frame header. */

		/* request some data and then read it until we have

		/* Note we do not check for gspca_dev->streaming here, as

		   we must finish reading an entire frame, otherwise the

		   next time we stream we start reading in the middle of a

				/* The first 64 bytes of each frame are

			/* If entire frame fits in one packet we still

 acknowledge the frame */

 This function is called at probe time just before sd_init */

 We don't use the buffer gspca allocates so make it small. */

 called on streamoff with alt==0 and on disconnect */

 the usb_lock is held at entry - restore on exit */

 wait for the work queue to terminate */

 This waits for sq905_dostream to finish */

 this function is called at probe and resume time */

	/* connect to the camera and read

	 * the model ID and process that and put it away.

	/* usb_buf is allocated with kmalloc so is aligned.

	 * Camera model number is the right way round if we assume this

 Set up for getting frames. */

 "Open the shutter" and set size, to start capture */

	case 2: */

 Start the workqueue function to do the streaming */

 Table of supported USB devices */

 sub-driver description */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Jeilinj subdriver

 *

 * Supports some Jeilin dual-mode cameras which use bulk transport and

 * download raw JPEG data.

 *

 * Copyright (C) 2009 Theodore Kilgore

 *

 * Sportscam DV15 support and control settings are

 * Copyright (C) 2011 Patrice Chotard

 Default timeouts, in ms */

 Maximum transfer size to use. */

 highest cam quality */

 lowest cam quality  */

 Structure to hold all of our device specific stuff */

 !! must be the first item */

 Driver stuff */

 image quality */

 AFAICT these cameras will only do 320x240. */

/*

 * cam uses endpoint 0x03 to send commands, 0x84 for read commands,

 * and 0x82 for bulk transfer.

 All commands are two bytes only */

 Responses are one byte only */

 adapt camera quality from jpeg quality */

 start streaming ??*/

	/* Under Windows, USB spy shows that only the 9 first start

	 * commands are used for SPORTSCAM_DV15 webcam

 check if it's start of frame */

 Start a new frame, and add the JPEG header, first thing */

 Toss line 0 of data block 0, keep the rest. */

 Discard data until a new frame starts. */

 This function is called at probe time just before sd_init */

 get the image remaining blocks */

 search for 0xff 0xd9  (EOF for JPEG) */

 last remaining block found */

 this function is called at probe and resume time */

 Set up for getting frames. */

 create the JPEG header */

 JPEG 422 */

 Table of supported USB devices */

 sub-driver description */

 sub-driver description */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *		Mars-Semi MR97311A library

 *		Copyright (C) 2005 <bradlch@hotmail.com>

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

 specific webcam descriptor */

 !! must be the first item */

 illuminator control cluster */

 V4L2 controls supported by the driver */

	 01    02   03     04    05    06    07    08 */

	 09    0a   0b     0c    0d    0e    0f    10 */

	 11    12   13     14    15    16    17    18 */

	 19    1a   1b     1c    1d    1e    1f    20 */

 write <len> bytes from gspca_dev->usb_buf */

 timeout in milliseconds */

 control byte */

 both are off if not streaming */

 only one can be on at a time */

 this function is called at probe time */

 this function is called at probe time */

 this function is called at probe and resume time */

 create the JPEG header */

 JPEG 422 */

 address */

	/*

	   Initialize the MR97113 chip register

 address */

 reg 0 */

 reg 1 */

 h_size , reg 2 */

 v_size , reg 3 */

	data[5] = 0x30;		/* reg 4, MI, PAS5101 :

 reg 5, H start - was 0x04 */

 reg 0x06: gamma */

 reg 7, V start - was 0x03 */

	if (h_size == 320 ) */

		data[9]= 0x56;	 * reg 8, 24MHz, 2:1 scale down */

	else */

 reg 8, 24MHz, no scale down */

jfm: from win trace*/

 address */

 reg 35, append frame header */

 address */

	if (gspca_dev->width == 1280) */

/*		data[1] = 200;	 * reg 60, pc-cam frame size

	else */

	data[1] = 50;		/* 50 reg 60, pc-cam frame size

 auto dark-gain */

 address */

 reg 94, Y Gain (auto) */

jfm: from win trace*/

 reg 0x5f/0x60 (LE) = saturation */

				/* h (60): xxxx x100

 reg 0x61 = brightness */

jfm: from win trace*/

jfm: win trace - many writes here to reg 0x64*/

 initialize the MI sensor */

 ISOC transferring enable... */

 isoc packet */

 iso packet length */

		gspca_dev->last_packet_type = DISCARD_PACKET; */

 put the JPEG header */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Pixart PAC207BCA library

 *

 * Copyright (C) 2008 Hans de Goede <hdegoede@redhat.com>

 * Copyright (C) 2005 Thomas Kaiser thomas@kaiser-linux.li

 * Copyleft (C) 2005 Michel Xhaard mxhaard@magic.fr

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

 Include pac common sof detection functions */

 ms */

 1 sec expo time / 1 fps */

 power on default: 3 */

 power on default: 9 */

 global parameters */

 specific webcam descriptor */

 !! must be the first item */

 uncompressed, add 2 bytes / line for line header */

			/* compressed, but only when needed (not compressed

 this function is called at probe time */

 this function is called at probe and resume time */

 mode: Image Format (Bit 0), LED (1), Compr. test mode (2) */

 Power Control */

 Bit 0, auto clear */

 not documented */

		/* when switching to autogain set defaults to make sure

		   we are on a valid point of the autogain gain /

		   exposure knee graph, and give this change time to

 this function is called at probe time */

 -- start the camera -- */

 Power control (Bit 6-0) */

 Compression Balance */

 Sram test value */

 PGA global gain (Bit 4-0) */

 PXCK = 12MHz /n */

 mode: Image Format (Bit 0), LED (1), Compr. test mode (2) */

 176x144 */

 352x288 */

 Bit 0, auto clear */

 not documented */

 Start ISO pipe */

 mode: Image Format (Bit 0), LED (1), Compr. test mode (2) */

 Stop ISO pipe */

 Turn off LED */

 Power Control */

 finish decoding current frame */

 get average lumination from frame header (byte 5) */

 skip the rest of the header */

 interrupt packet data */

 interrupt packet length */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Jeilin JL2005B/C/D library

 *

 * Copyright (C) 2011 Theodore Kilgore <kilgota@auburn.edu>

 Default timeouts, in ms */

 Maximum transfer size to use. */

 specific webcam descriptor */

 !! must be the first item */

 Driver stuff */

 block size of camera */

 1 if vga cam, 0 if cif cam */

 Camera has two resolution settings. What they are depends on model. */

/*

 * cam uses endpoint 0x03 to send commands, 0x84 for read commands,

 * and 0x82 for bulk data transfer.

 All commands are two bytes only */

 Response to a command is one byte in usb_buf[0], only if requested. */

 Response appears in gspca_dev->usb_buf[0] */

 put register to read in byte 1 */

 Send the read request */

 If we tried 20 times, give up. */

 Read the first ID byte once for warmup */

 Now actually get the ID string */

/*

 * This function is called as a workqueue function and runs whenever the camera

 * is streaming data. Because it is a workqueue function it is allowed to sleep

 * so we can use synchronous USB calls. To avoid possible collisions with other

 * threads attempting to use gspca_dev->usb_buf we take the usb_lock when

 * performing USB operations using it. In practice we don't really need this

 * as the camera doesn't provide any controls.

 bytes remaining in current frame. */

 size to use for the next read. */

 Check if this is a new frame. If so, start the frame first */

 Check whether we actually got the first blodk */

			/* total size to fetch is byte 7, times blocksize

 We keep the header. It has other information, too.*/

 This function is called at probe time */

 We don't use the buffer gspca allocates so make it small. */

 For the rest, the camera needs to be detected */

	/* Here are some known firmware IDs

	 * First some JL2005B cameras

	 * {0x41, 0x07, 0x04, 0x2c, 0xe8, 0xf2}	Sakar KidzCam

	 * {0x45, 0x02, 0x08, 0xb9, 0x00, 0xd2}	No-name JL2005B

	 * JL2005C cameras

	 * {0x01, 0x0c, 0x16, 0x10, 0xf8, 0xc8}	Argus DC-1512

	 * {0x12, 0x04, 0x03, 0xc0, 0x00, 0xd8}	ICarly

	 * {0x86, 0x08, 0x05, 0x02, 0x00, 0xd4}	Jazz

	 *

	 * Based upon this scanty evidence, we can detect a CIF camera by

	 * testing byte 0 for 0x4x.

 this function is called at probe and resume time */

 called on streamoff with alt==0 and on disconnect */

 the usb_lock is held at entry - restore on exit */

 wait for the work queue to terminate */

 This waits for sq905c_dostream to finish */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *		Connexant Cx11646 library

 *		Copyright (C) 2004 Michel Xhaard mxhaard@magic.fr

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

 special JPEG header */

 specific webcam descriptor */

 !! must be the first item */

 the read bytes are found in gspca_dev->usb_buf */

 the bytes to write are in gspca_dev->usb_buf */

 3 */

 5 */

 8 */

 640 */

352{0x05,0x0e,0x06,0x11};  352{0x04,0x0a,0x06,0x12}; //352{0x05,0x0e,0x06,0x11}; //352 */

320 */

 176 */

	case 2: */

 176x144 */

	case 2: */

 1 */

 79 */

 1 */

 27 */

 27 */

 640 take with the zcx30x part */

 18 */

	case 2: */

 wait for completion */

 0x07 until 0x00 */

 send the qtable now */

 -> 0x18 */

 0x00 */

 0x00 */

 0x40 */

 0x40 */

 0x38 */

 0x00 */

 0x00 */

 0x00 */

	reg_w_val(gspca_dev, 0x003d, 0x60); */

 ->0x07 */

 -> 0x00 */

 -> 0x01 */

 this function is called at probe time */

 this function is called at probe and resume time */

 create the JPEG header */

 JPEG 411 */

 called on streamoff with alt 0 and on disconnect */

		reg_r(gspca_dev, 0x0002, 1);*/

 isoc packet */

 iso packet length */

 start of frame */

 put the JPEG header in the new frame */

 0x00 */

 seem MSB */

	__u8 regE5bcx[] = { 0x88, 0x0b, 0x12, 0x01};	 * LSB */

 0x00 */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Z-Star/Vimicro zc301/zc302p/vc30x driver

 *

 * Copyright (C) 2009-2012 Jean-Francois Moine <http://moinejf.free.fr>

 * Copyright (C) 2004 2005 2006 Michel Xhaard mxhaard@magic.fr

moinejf.free.fr>, Serge A. Suchkov <Serge.A.S@tochka.ru>");

 default JPEG compression (75%) */

 specific webcam descriptor */

 !! must be the first item */

 gamma/brightness/contrast control cluster */

 autogain/exposure control cluster */

 webcam compression quality */

 Type of image sensor chip */

 (mi360soc) zc301 */

 (mi360soc) zc303 */

 OV7648 - same values */

/*

 * Bridge reg08 bits 1-2 -> JPEG quality conversion table. Note the highest

 * quality setting is not usable as USB 1 does not have enough bandwidth.

 94 */};

 usb exchanges */

 00,00,01,cc */

 00,02,04,cc */

 00,08,03,cc */

 00,10,0a,cc */

 00,8b,d3,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,d8,cc */

 00,01,01,cc */

 00,12,03,cc */

 00,12,01,cc */

 00,12,05,cc */

 00,98,00,cc */

 00,9a,00,cc */

 01,1a,00,cc */

 01,1c,00,cc */

 00,9c,de,cc */

 00,9e,86,cc */

 04,00,00,bb */

 00,00,10,dd */

 14,0f,0f,bb */

 01,01,37,cc */

 01,00,0d,cc */

 01,89,06,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,16,58,cc */

 01,18,5a,cc */

 01,80,02,cc */

 00,8b,d3,cc */

 04,00,08,bb */

 00,02,00,dd */

 04,00,00,bb */

 00,00,10,dd */

 14,0f,0f,bb */

 0c,e0,2e,bb */

 20,01,00,bb */

 24,96,00,bb */

 10,06,06,bb */

 00,10,01,cc */

 00,00,10,dd */

 00,fe,02,aa */

 00,10,0a,cc */

 00,00,10,dd */

 20,5f,90,bb */

 80,01,00,bb */

 84,09,00,bb */

 00,86,02,bb */

 04,e6,01,bb */

 08,86,02,bb */

 0c,e6,01,bb */

 00,10,01,cc */

 00,00,10,dd */

 00,fe,00,aa */

 00,10,0a,cc */

 00,00,10,dd */

 00,10,01,cc */

 00,fe,20,aa */

mswin+*/

mswin-*/

 00,10,0a,cc */

 00,10,01,cc */

 00,00,10,dd */

 00,fe,00,aa */

 00,10,0a,cc */

 00,00,10,dd */

 04,04,00,bb */

 00,01,00,dd */

 04,01,00,bb */

 00,10,01,cc */

 00,fe,02,aa */

 00,10,0a,cc */

 28,41,03,bb */

 2c,40,03,bb */

 00,10,01,cc */

 00,fe,10,aa */

 00,00,01,cc */

 00,02,10,cc */

 00,08,03,cc */

 00,10,0a,cc */

 00,8b,d3,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,d0,cc */

 00,01,01,cc */

 00,12,03,cc */

 00,12,01,cc */

 00,12,05,cc */

 00,98,00,cc */

 00,9a,00,cc */

 01,1a,00,cc */

 01,1c,00,cc */

 00,9c,d8,cc */

 00,9e,88,cc */

 04,00,00,bb */

 00,00,10,dd */

 14,0f,0f,bb */

 01,01,37,cc */

 01,00,0d,cc */

 01,89,06,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,16,58,cc */

 01,18,5a,cc */

 01,80,02,cc */

 00,8b,d3,cc */

 04,00,08,bb */

 00,02,00,dd */

 04,00,00,bb */

 00,00,50,dd */

 14,0f,0f,bb */

 0c,e0,2e,bb */

 20,01,00,bb */

 24,96,00,bb */

 10,06,06,bb */

 00,10,01,cc */

 00,00,10,dd */

 00,fe,02,aa */

 00,10,0a,cc */

 00,00,10,dd */

 20,5f,90,bb */

 80,01,00,bb */

 84,09,00,bb */

 00,88,02,bb */

 04,e6,01,bb */

 08,88,02,bb */

 0c,e6,01,bb */

 00,10,01,cc */

 00,00,10,dd */

 00,fe,00,aa */

 00,10,0a,cc */

 00,00,10,dd */

 00,10,01,cc */

 00,fe,20,aa */

******/

 00,10,0a,cc */

 00,10,01,cc */

 00,00,10,dd */

 00,fe,00,aa */

 00,10,0a,cc */

 00,00,10,dd */

 04,04,00,bb */

 00,01,00,dd */

 04,01,00,bb */

 00,10,01,cc */

 00,fe,02,aa */

 00,10,0a,cc */

 28,41,03,bb */

 2c,40,03,bb */

 00,10,01,cc */

 00,fe,10,aa */

 00,10,01,cc */

 00,fe,02,aa */

 00,10,0a,cc */

 84,05,00,bb */

 b0,d0,07,bb */

 b8,a0,0f,bb */

 00,10,01,cc */

 00,fe,10,aa */

 00,26,d0,aa */

 00,28,02,aa */

 00,10,01,cc */

 00,fe,02,aa */

 00,10,0a,cc */

 84,07,00,bb */

 b0,82,06,bb */

 b8,04,0d,bb */

 00,10,01,cc */

 00,fe,10,aa */

 00,26,57,aa */

 00,28,02,aa */

 00,10,01,cc */

 00,fe,02,aa */

 00,10,0a,cc */

 84,07,00,bb */

 b0,05,00,bb */

 b8,a0,01,bb */

 00,10,01,cc */

 00,fe,10,aa */

 320x240 */

 00 */

 640x480 */

 00 */

 CS2102_KOCOM */

 clock ? */

 sharpness+ */

 sharpness- */

 gamma 4 */

 matrix */

fixme: next sequence = i2c exchanges*/

 clock ? */

 sharpness+ */

 sharpness- */

 gamma 4 */

 matrix */

fixme:what does the next sequence?*/

 640x480 */

 00,00,01,cc */

 00,08,03,cc */

 00,10,01,cc */

 00,02,04,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,e0,cc */

 00,01,01,cc */

 00,12,03,cc */

 00,12,01,cc */

 00,98,00,cc */

 00,9a,00,cc */

 01,1a,00,cc */

 01,1c,00,cc */

 00,9c,e6,cc */

 00,9e,86,cc */

 00,8b,98,cc */

 00,13,02,aa */

 00,15,03,aa */

 00,01,00,aa */

 00,02,00,aa */

 00,1a,00,aa */

 00,1c,17,aa */

 00,1d,80,aa */

 00,1f,08,aa */

 00,21,12,aa */

 00,86,82,cc */

 00,87,83,cc */

 00,88,84,cc */

 00,05,00,aa */

 00,0a,00,aa */

 00,0b,b0,aa */

 00,0c,00,aa */

 00,0d,b0,aa */

 00,0e,00,aa */

 00,0f,b0,aa */

 00,10,00,aa */

 00,11,b0,aa */

 00,16,01,aa */

 00,17,e6,aa */

 00,18,02,aa */

 00,19,86,aa */

 00,20,00,aa */

 00,1b,20,aa */

 01,01,b7,cc */

 00,12,05,cc */

 01,00,0d,cc */

 01,89,76,cc */

 01,ad,09,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,a8,60,cc */

 01,8d,85,cc */

 01,1e,00,cc */

 01,16,52,cc */

 01,17,40,cc */

 01,18,52,cc */

 01,13,03,cc */

 320x240 */

 00,00,01,cc */

 00,08,03,cc */

 00,10,01,cc */

 00,02,10,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,e0,cc */

 00,01,01,cc */

 00,12,03,cc */

 00,12,01,cc */

 00,98,00,cc */

 00,9a,00,cc */

 01,1a,00,cc */

 01,1c,00,cc */

 00,9c,e8,cc */

 00,9e,88,cc */

 00,8b,98,cc */

 00,13,00,aa */

 00,15,01,aa */

 00,01,00,aa */

 00,02,00,aa */

 00,1a,00,aa */

 00,1c,17,aa */

 00,1d,80,aa */

 00,1f,08,aa */

 00,21,12,aa */

 00,86,82,cc */

 00,87,83,cc */

 00,88,84,cc */

 00,05,00,aa */

 00,0a,00,aa */

 00,0b,b0,aa */

 00,0c,00,aa */

 00,0d,b0,aa */

 00,0e,00,aa */

 00,0f,b0,aa */

 00,10,00,aa */

 00,11,b0,aa */

 00,16,01,aa */

 00,17,e8,aa */

 00,18,02,aa */

 00,19,88,aa */

 00,20,00,aa */

 00,1b,20,aa */

 01,01,b7,cc */

 00,12,05,cc */

 01,00,0d,cc */

 01,89,76,cc */

 01,ad,09,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,a8,60,cc */

 01,1e,00,cc */

 01,16,52,cc */

 01,17,40,cc */

 01,18,52,cc */

 01,13,03,cc */

 00,82,00,aa */

 00,83,02,aa */

 00,84,38,aa */	
 01,90,00,cc */

 01,91,0b,cc */

 01,92,18,cc */

 win: 01,92,10 */

 01,95,00,cc */

 01,96,00,cc */

 01,97,8e,cc */

 win: 01,97,ec */

 01,8c,0e,cc */

 01,8f,15,cc */

 01,a9,10,cc */

 01,aa,24,cc */

 00,1d,62,cc */

 00,1e,90,cc */

 00,1f,c8,cc */

 00,20,ff,cc */

 01,1d,60,cc */

 01,80,42,cc */

/*	{0xa0, 0x85, ZC3XX_R18D_YTARGET},	 * 01,8d,85,cc *

 00,82,00,aa */

 00,83,00,aa */

 00,84,ec,aa */

 01,90,00,cc */

 01,91,0b,cc */

 01,92,10,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,ec,cc */

 01,8c,0e,cc */

 01,8f,15,cc */

 01,a9,10,cc */

 01,aa,24,cc */

 00,1d,62,cc */

 00,1e,90,cc */

 00,1f,c8,cc */

 00,20,ff,cc */

 01,1d,60,cc */

 01,80,42,cc */

 01,8d,80,cc */

 01,00,0c,cc */

 00,82,00,aa */

 00,83,00,aa */

 00,84,20,aa */

 01,90,00,cc */

 01,91,00,cc */

 01,92,48,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,10,cc */

 01,8c,0e,cc */

 01,8f,15,cc */

 00,1d,62,cc */

 00,1e,90,cc */

 00,1f,c8,cc */

 00,20,ff,cc */

 01,1d,60,cc */

 01,80,03,cc */

 01,8d,80,cc */

 qtable 0x05 */

 set sensor gain */

 clock ? */

 sharpness+ */

 sharpness- */

 gamma 4 */

 matrix */

 0x14 */

 original setting */

 clock ? */

 sharpness+ */

 sharpness- */

 gamma 4 */

 matrix */

*** set exposure ***/

 00,19,00,cc */

 00,13,18,aa */

 00,14,01,aa */

 00,0e,05,aa */

 00,19,1f,aa */

 01,90,00,cc */

 01,91,02,cc */

 01,92,76,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,46,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,0c,cc */

 01,aa,28,cc */

 00,1d,05,cc */

 00,1e,1a,cc */

 00,1f,2f,cc */

 00,19,00,cc */

 00,13,31,aa */

 00,14,01,aa */

 00,0e,04,aa */

 00,19,cd,aa */

 01,90,00,cc */

 01,91,02,cc */

 01,92,62,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,3d,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,0c,cc */

 01,aa,28,cc */

 00,1d,04,cc */

 00,1e,18,cc */

 00,1f,2c,cc */

 00,19,00,cc */

 00,13,10,aa */

 00,14,01,aa */

 00,0e,04,aa */

 00,19,00,aa */

 01,90,00,cc */

 01,91,02,cc */

 01,92,70,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,10,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,00,cc */

 01,aa,00,cc */

 00,1d,04,cc */

 00,1e,17,cc */

 00,1f,2a,cc */

 320x240 */

 00 */

 {0xaa, 0x13, 0x0000}, */

 00,17,88,aa */

 00,02,80,aa */

 640x480*/

 00 */

 {0xaa, 0x13, 0x0001}; */

 {0xaa, 0x02, 0x0080}, */

 640x480*/

 00,19,00,cc */

 00,25,07,aa */

 00,26,53,aa */

 00,27,00,aa */

 00,20,00,aa */

 00,21,50,aa */

 00,22,1b,aa */

 00,23,fc,aa */

 01,90,2f,cc */

 01,91,9b,cc */

 01,92,80,cc */

 01,95,00,cc */

 01,96,ea,cc */

 01,97,60,cc */

 01,8c,0c,cc */

 01,8f,18,cc */

 01,a9,18,cc */

 01,aa,24,cc */

 00,1d,00,cc */

 00,1e,50,cc */

 00,1f,1b,cc */

 00,20,fc,cc */

 320x240 */

 00,19,00,cc */

 00,25,07,aa */

 00,26,53,aa */

 00,27,00,aa */

 00,20,00,aa */

 00,21,50,aa */

 00,22,12,aa */

 00,23,80,aa */

 01,90,2f,cc */

 01,91,9b,cc */

 01,92,80,cc */

 01,95,01,cc */

 01,96,d4,cc */

 01,97,c0,cc */

 01,8c,07,cc */

 01,8f,0f,cc */

 01,a9,18,cc */

 01,aa,24,cc */

 00,1d,00,cc */

 00,1e,50,cc */

 00,1f,12,cc */

 00,20,80,cc */

 640x480*/

 00,19,00,cc */

 00,25,07,aa */

 00,26,a1,aa */

 00,27,20,aa */

 00,20,00,aa */

 00,21,40,aa */

 00,22,13,aa */

 00,23,4c,aa */

 01,90,2f,cc */

 01,91,4d,cc */

 01,92,60,cc */

 01,95,00,cc */

 01,96,c3,cc */

 01,97,50,cc */

 01,8c,0c,cc */

 01,8f,18,cc */

 01,a9,18,cc */

 01,aa,24,cc */

 00,1d,00,cc */

 00,1e,40,cc */

 00,1f,13,cc */

 00,20,4c,cc */

 320x240 */

 00,19,00,cc */

 00,25,07,aa */

 00,26,a1,aa */

 00,27,20,aa */

 00,20,00,aa */

 00,21,a0,aa */

 00,22,16,aa */

 00,23,40,aa */

 01,90,2f,cc */

 01,91,4d,cc */

 01,92,60,cc */

 01,95,01,cc */

 01,96,86,cc */

 01,97,a0,cc */

 01,8c,07,cc */

 01,8f,0f,cc */

 01,a9,18,cc */

 01,aa,24,cc */

 00,1d,00,cc */

 00,1e,a0,cc */

 00,1f,16,cc */

 00,20,40,cc */

 640x480*/

 00,19,00,cc */

 00,25,03,aa */

 00,26,00,aa */

 00,27,00,aa */

 00,20,00,aa */

 00,21,10,aa */

 00,22,00,aa */

 00,23,03,aa */

 01,90,2f,cc */

 01,91,f8,cc */

 01,92,00,cc */

 01,95,00,cc */

 01,96,02,cc */

 01,97,00,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,00,cc */

 01,aa,00,cc */

 00,1d,00,cc */

 00,1e,10,cc */

 00,1f,00,cc */

 00,20,03,cc */

 320x240 */

 00,19,00,cc */

 00,25,03,aa */

 00,26,00,aa */

 00,27,00,aa */

 00,20,00,aa */

 00,21,a0,aa */

 00,22,16,aa */

 00,23,40,aa */

 01,90,2f,cc */

 01,91,f8,cc */

 01,92,00,cc */

 01,95,00,cc */

 01,96,02,cc */

 01,97,00,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,00,cc */

 01,aa,00,cc */

 00,1d,00,cc */

 00,1e,a0,cc */

 00,1f,16,cc */

 00,20,40,cc */

 from lPEPI264v.inf (hv7131b!) */

 clock ? */

 sharpness+ */

 sharpness- */

 matrix */

 clock ? */

 sharpness+ */

 sharpness- */

 matrix */

 00,19,00,cc */

 00,0d,03,aa */

 00,0c,20,aa */

 00,0e,0e,aa */

 00,0f,02,aa */

 00,1c,0d,aa */

 00,1d,02,aa */

 00,20,80,aa */

 00,22,80,aa */

 00,24,80,aa */

 00,26,80,aa */

 00,00,84,aa */

 00,a3,02,cc */

 00,a4,0d,cc */

 01,90,00,cc */

 01,91,04,cc */

 01,92,1a,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,4b,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,10,cc */

 01,aa,12,cc */

 00,1d,c8,cc */

 00,1e,d8,cc */

 00,1f,ea,cc */

 00,20,ff,cc */

 00,19,00,cc */

 00,0d,03,aa */

 00,0c,8c,aa */

 00,0e,95,aa */

 00,0f,02,aa */

 00,1c,94,aa */

 00,1d,02,aa */

 00,20,80,aa */

 00,22,80,aa */

 00,24,80,aa */

 00,26,80,aa */

 00,00,84,aa */

 00,a3,02,cc */

 00,a4,94,cc */

 01,90,00,cc */

 01,91,04,cc */

 01,92,20,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,84,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,10,cc */

 01,aa,12,cc */

 00,1d,e3,cc */

 00,1e,ec,cc */

 00,1f,f5,cc */

 00,20,ff,cc */

 01,a7,00,cc */

 01,a8,c0,cc */

 00,19,00,cc */

 00,0d,03,aa */

 00,0c,04,aa */

 00,0e,0d,aa */

 00,0f,02,aa */

 00,1c,08,aa */

 00,1d,02,aa */

 00,20,80,aa */

 00,22,80,aa */

 00,24,80,aa */

 00,26,80,aa */

 00,00,84,aa */

 00,a3,02,cc */

 00,a4,08,cc */

 01,90,00,cc */

 01,91,04,cc */

 01,92,10,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,41,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,10,cc */

 01,aa,12,cc */

 00,1d,c1,cc */

 00,1e,d4,cc */

 00,1f,e8,cc */

 00,20,ff,cc */

 00,19,00,cc */

 00,0d,03,aa */

 00,0c,08,aa */

 00,0e,86,aa */

 00,0f,02,aa */

 00,1c,85,aa */

 00,1d,02,aa */

 00,20,80,aa */

 00,22,80,aa */

 00,24,80,aa */

 00,26,80,aa */

 00,00,84,aa */

 00,a3,02,cc */

 00,a4,85,cc */

 01,90,00,cc */

 01,91,04,cc */

 01,92,08,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,81,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,10,cc */

 01,aa,12,cc */

 00,1d,c2,cc */

 00,1e,d6,cc */

 00,1f,ea,cc */

 00,20,ff,cc */

 01,a7,00,cc */

 01,a8,c0,cc */

 00,19,00,cc */

 00,0d,03,aa */

 00,0c,04,aa */

 00,0e,0d,aa */

 00,0f,02,aa */

 00,1c,00,aa */

 00,1d,02,aa */

 00,20,80,aa */

 00,22,80,aa */

 00,24,80,aa */

 00,26,80,aa */

 00,00,84,aa */

 00,a3,02,cc */

 00,a4,00,cc */

 01,90,00,cc */

 01,91,04,cc */

 01,92,20,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,10,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,00,cc */

 01,aa,00,cc */

 00,1d,c1,cc */

 00,1e,d4,cc */

 00,1f,e8,cc */

 00,20,ff,cc */

 00,19,00,cc */

 00,0d,03,aa */

 00,0c,04,aa */

 00,0e,81,aa */

 00,0f,02,aa */

 00,1c,80,aa */

 00,1d,02,aa */

 00,20,80,aa */

 00,22,80,aa */

 00,24,80,aa */

 00,26,80,aa */

 00,00,84,aa */

 00,a3,02,cc */

 00,a4,80,cc */

 01,90,00,cc */

 01,91,04,cc */

 01,92,20,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,10,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,00,cc */

 01,aa,00,cc */

 00,1d,c1,cc */

 00,1e,d4,cc */

 00,1f,e8,cc */

 00,20,ff,cc */

 01,a7,00,cc */

 01,a8,c0,cc */

 00,00,01,cc */

 00,02,00,cc */

 00,10,01,cc */

 00,01,01,cc */

 00,08,03,cc */

 00,12,01,cc */

 00,12,05,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,d8,cc */

 00,98,00,cc */

 00,9a,00,cc */

 01,1a,00,cc */

 01,1c,00,cc */

 00,9b,01,cc */

 00,9c,de,cc */

 00,9d,02,cc */

 00,9e,86,cc */

 00,86,33,cc */

 00,87,34,cc */

 00,88,35,cc */

 00,8b,b0,cc */

 00,12,05,cc */

 00,01,01,aa */

 00,01,03,aa */

 00,01,01,aa */

 00,03,00,aa */

 00,10,00,aa */

 00,11,80,aa */

 00,12,00,aa */

 00,13,00,aa */

 00,14,00,aa */

 00,15,00,aa */

 00,16,00,aa */

 00,17,01,aa */

 00,18,de,aa */

 00,19,02,aa */

 00,1a,86,aa */

 00,20,a8,aa */

 00,22,00,aa */

 00,23,00,aa */

 00,24,00,aa */

 00,40,33,aa */

 00,41,77,aa */

 00,42,53,aa */

 00,43,b0,aa */

 00,4b,01,aa */

 00,72,20,aa */

 00,73,00,aa */

 00,80,00,aa */

 00,85,50,aa */

 00,91,70,aa */

 00,92,72,aa */

 00,03,01,aa */

 00,10,a0,aa */

 00,11,01,aa */

 00,30,00,aa */

 00,60,00,aa */

 00,a0,1a,aa */

 00,a1,00,aa */

 00,a2,3f,aa */

 00,a3,28,aa */

 00,a4,10,aa */

 00,a5,20,aa */

 00,b1,44,aa */

 00,d0,01,aa */

 00,d1,85,aa */

 00,d2,80,aa */

 00,d3,80,aa */

 00,d4,80,aa */

 00,d5,80,aa */

 00,c0,c3,aa */

 00,c2,44,aa */

 00,c4,40,aa */

 00,c5,20,aa */

 00,c6,08,aa */

 00,03,04,aa */

 00,10,00,aa */

 00,40,30,aa */

 00,41,20,aa */

 00,42,2d,aa */

 00,03,03,aa */

 00,1C,50,aa */

 00,11,81,aa */

 00,3b,1D,aa */

 00,3c,4C,aa */

 00,3d,18,aa */

 00,3e,6A,aa */

 00,01,00,aa */

 00,52,FF,aa */

 00,19,00,cc */

 01,00,0d,cc */

 01,01,37,cc */

 01,89,06,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,80,02,cc */

 00,03,02,aa */

 00,51,27,aa */

 00,52,20,aa */

 00,03,03,aa */

 00,50,10,aa */

 00,51,10,aa */

 00,54,10,aa */

 00,55,10,aa */

 01,99,F0,cc */

 01,9A,80,cc */

 00,03,03,aa */

 00,10,fc,aa */

 00,36,1D,aa */

 00,37,4C,aa */

 00,3B,1D,aa */

 320x240 */

 00,00,01,cc */

 00,02,10,cc */

 00,10,01,cc */

 00,01,01,cc */

 00,08,03,cc */

 00,12,01,cc */

 00,12,05,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,d0,cc */

 00,98,00,cc */

 00,9a,00,cc */

 01,1a,00,cc */

 01,1c,00,cc */

 00,9b,01,cc */

 00,9c,d8,cc */

 00,9d,02,cc */

 00,9e,88,cc */

 00,86,33,cc */

 00,87,34,cc */

 00,88,35,cc */

 00,8b,b0,cc */

 00,12,05,cc */

 00,01,01,aa */

 00,01,03,aa */

 00,01,01,aa */

 00,03,00,aa */

 00,10,00,aa */

 00,11,80,aa */

 00,12,00,aa */

 00,13,00,aa */

 00,14,00,aa */

 00,15,00,aa */

 00,16,00,aa */

 00,17,01,aa */

 00,18,d8,aa */

 00,19,02,aa */

 00,1a,88,aa */

 00,20,a8,aa */

 00,22,00,aa */

 00,23,00,aa */

 00,24,00,aa */

 00,40,33,aa */

 00,41,77,aa */

 00,42,53,aa */

 00,43,b0,aa */

 00,4b,01,aa */

 00,72,20,aa */

 00,73,00,aa */

 00,80,00,aa */

 00,85,50,aa */

 00,91,70,aa */

 00,92,72,aa */

 00,03,01,aa */

 00,10,a0,aa */

 00,11,01,aa */

 00,30,00,aa */

 00,60,00,aa */

 00,a0,1a,aa */

 00,a1,00,aa */

 00,a2,3f,aa */

 00,a3,28,aa */

 00,a4,10,aa */

 00,a5,20,aa */

 00,b1,44,aa */

 00,d0,01,aa */

 00,d1,85,aa */

 00,d2,80,aa */

 00,d3,80,aa */

 00,d4,80,aa */

 00,d5,80,aa */

 00,c0,c3,aa */

 00,c2,44,aa */

 00,c4,40,aa */

 00,c5,20,aa */

 00,c6,08,aa */

 00,03,04,aa */

 00,10,00,aa */

 00,40,30,aa */

 00,41,20,aa */

 00,42,2d,aa */

 00,03,03,aa */

 00,1c,50,aa */

 00,11,81,aa */

 00,3b,3A,aa */

 00,3c,98,aa */

 00,3d,30,aa */

 00,3E,D4,aa */

 00,01,00,aa */

 00,52,FF,aa */

 00,19,00,cc */

 01,00,0d,cc */

 01,01,37,cc */

 01,89,06,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,80,02,cc */

 00,03,02,aa */

 00,51,4E,aa */

 00,52,41,aa */

 00,03,03,aa */

 00,50,10,aa */

 00,51,10,aa */

 00,54,10,aa */

 00,55,10,aa */

 01,99,F0,cc */

 01,9A,80,cc */

 00,03,03,aa */

 00,10,fc,aa */

 00,36,1D,aa */

 00,37,4C,aa */

 00,3B,1D,aa */

 00,3C,4C,aa */

 00,3D,1D,aa */

 00,3E,4C,aa */

 00,03,03,aa */

 00,10,fc,aa */

 00,36,3A,aa */

 00,37,98,aa */

 00,3B,3A,aa */

 00,3C,98,aa */

 00,3D,3A,aa */

 00,3E,98,aa */

 00,03,03,aa */

 00,10,fc,aa */

 00,36,18,aa */

 00,37,6A,aa */

 00,3D,18,aa */

 00,3E,6A,aa */

 00,3B,18,aa */

 00,3C,6A,aa */

 00,03,03,aa */

 00,10,fc,aa */

 00,36,30,aa */

 00,37,D4,aa */

 00,3D,30,aa */

 00,3E,D4,aa */

 00,3B,30,aa */

 00,3C,D4,aa */

 00,03,03,aa */

 00,10,fc,aa */

 00,36,18,aa */

 00,37,6A,aa */

 00,3D,18,aa */

 00,3E,6A,aa */

 00,3B,18,aa */

 00,3C,6A,aa */

 00,03,03,aa */

 00,10,fc,aa */

 00,36,30,aa */

 00,37,D4,aa */

 00,3D,30,aa */

 00,3E,D4,aa */

 00,3B,30,aa */

 00,3C,D4,aa */

 from zs211.inf */

 640x480 */

 00,00,01,cc */

 00,02,40,cc */

 00,08,00,cc */

 00,01,01,cc */

 00,10,06,cc */

 00,83,02,cc */

 00,85,01,cc */

 00,86,80,cc */

 00,87,81,cc */

 00,88,10,cc */

 00,8b,a1,cc */

 00,8d,08,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,d8,cc */

 00,12,03,cc */

 00,12,01,cc */

 00,98,00,cc */

 00,9a,00,cc */

 01,1a,00,cc */

 01,1c,00,cc */

 00,9c,de,cc */

 00,9e,86,cc */

 00,12,88,aa */

 00,12,48,aa */

 00,75,8a,aa */

 00,13,a3,aa */

 00,04,00,aa */

 00,05,00,aa */

 00,14,00,aa */

 00,15,04,aa */

 00,17,18,aa */

 00,18,ba,aa */

 00,19,02,aa */

 00,1a,f1,aa */

 00,20,40,aa */

 00,24,88,aa */

 00,25,78,aa */

 00,27,f6,aa */

 00,28,a0,aa */

 00,21,00,aa */

 00,2a,83,aa */

 00,2b,96,aa */

 00,2d,05,aa */

 00,74,20,aa */

 00,61,68,aa */

 00,64,88,aa */

 00,00,00,aa */

 00,06,80,aa */

 00,01,90,aa */

 00,02,30,aa */

 01,01,77,cc */

 00,12,05,cc */

 01,00,0d,cc */

 01,89,06,cc */

 01,ad,00,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,16,68,cc */

 01,18,52,cc */

 01,1d,40,cc */

 01,80,02,cc */

 01,a8,50,cc */

 320x240 */

 00,00,01,cc */

 00,02,50,cc */

 00,08,00,cc */

 mx change? */

 00,01,01,cc */

 00,10,06,cc */

 00,83,02,cc */

 00,85,01,cc */

 00,86,80,cc */

 00,87,81,cc */

 00,88,10,cc */

 00,8b,a1,cc */

 00,8d,08,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,d0,cc */

 00,12,03,cc */

 00,12,01,cc */

 00,98,00,cc */

 00,9a,00,cc */

 01,1a,00,cc */

 01,1c,00,cc */

 00,9c,d6,cc */

 OV7648 00,9c,d8,cc */

 00,9e,88,cc */

 00,12,88,aa */

 00,12,48,aa */

 00,75,8a,aa */

 00,13,a3,aa */

 00,04,00,aa */

 00,05,00,aa */

 00,14,00,aa */

 00,15,04,aa */

 00,24,88,aa */

 00,25,78,aa */

 00,17,18,aa */

 00,18,ba,aa */

 00,19,02,aa */

 00,1a,f2,aa */

 00,20,40,aa */

 00,27,f6,aa */

 00,28,a0,aa */

 00,21,00,aa */

 00,2a,83,aa */

 00,2b,96,aa */

 00,2d,05,aa */

 00,74,20,aa */

 00,61,68,aa */

 00,64,88,aa */

 00,00,00,aa */

 00,06,80,aa */

 00,01,90,aa */

 00,02,30,aa */

 01,01,77,cc */

 00,12,05,cc */

 01,00,0d,cc */

 01,89,06,cc */

 01,ad,00,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,16,68,cc */

 01,18,52,cc */

 01,1d,50,cc */

 01,80,02,cc */

 01,a8,50,cc */

 00,01,00,dd */

 00,2b,96,aa */

 enable 1/120s & 1/100s exposures for banding filter */

 00,2d,05,aa */

 01,90,00,cc */

 01,91,04,cc */

 01,92,18,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,83,cc */

 00,76,03,aa */

/*	{0xa0, 0x40, ZC3XX_R002_CLOCKSELECT},		 * 00,02,40,cc

 00,01,00,dd */

 00,2b,00,aa */

 enable 1/120s & 1/100s exposures for banding filter */

 00,2d,05,aa */

 01,90,00,cc */

 01,91,04,cc */

 01,92,18,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,83,cc */

 00,76,03,aa */

/*	{0xa0, 0x40, ZC3XX_R002_CLOCKSELECT},	 * 00,02,40,cc

/* ?? in gspca v1, it was

	{0xa0, 0x00, 0x0039},  * 00,00,00,dd *

 00,01,00,dd */

 00,2b,00,aa */

 disable 1/120s & 1/100s exposures for banding filter */

 00,2d,01,aa */

 01,90,00,cc */

 01,91,04,cc */

 01,92,18,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,01,cc */

/*	{0xa0, 0x44, ZC3XX_R002_CLOCKSELECT},	 * 00,02,44,cc

/* ?? was

	{0xa0, 0x00, 0x0039},  * 00,00,00,dd *

 0x10, */

 matrix */

 clock ? */

 sharpness+ */

 sharpness- */

 gamma 2 ?*/

 matrix */

 40 */

 i2c */

 matrix */

 clock ? */

 sharpness+ */

 sharpness- */

 gamma ~4 */

 matrix */

 Sream and Sensor specific */

 CMOSSensorSelect */

 System */

 SystemControl */

 SystemControl */

 Picture size */

 ClockSelect */

 176x144 */

 JPEG control */

 Sream and Sensor specific */

 Picture size */

 System */

 Sream and Sensor specific */

 Sensor Interface */

 Window inside sensor array */

 Init the sensor */

 Other registers */

 Frame retrieving */

 Gains */

 Unknown */

 Sharpness */

 Other registers */

 Auto exposure and white balance */

Dead pixels */

 EEPROM */

 JPEG control */

 Other registers */

 Auto exposure and white balance */

Dead pixels */

 EEPROM */

 JPEG control */

 matrix */

 Auto correction */

 Auto exposure and white balance */

 sensor on */

 Gains */

 Auto correction */

 AutoCorrectEnable */

 Gains */

 352x288 */

 JPEG control */

 Sream and Sensor specific */

 Picture size */

 System */

 Sream and Sensor specific */

 Sensor Interface */

 Window inside sensor array */

 Init the sensor */

 Other registers */

 Frame retrieving */

 Gains */

 Unknown */

 Sharpness */

 Other registers */

 Auto exposure and white balance */

Dead pixels */

 EEPROM */

 JPEG control */

 Other registers */

 Auto exposure and white balance */

Dead pixels */

 EEPROM */

 JPEG control */

 matrix */

 Auto correction */

 Auto exposure and white balance */

 sensor on */

 Gains */

 Auto correction */

 AutoCorrectEnable */

 Gains */

 AutoCorrectEnable */

 Frame adjust */

 01,90,00,cc */

 01,91,06,cc */

 01,92,54,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,87,cc */

 01,8c,10,cc */

 01,8f,30,cc */

 00,03,21,aa */

 00,04,0c,aa */

 00,05,02,aa */

 00,07,1c,aa */

 01,a9,04,cc */

 01,90,00,cc */

 01,91,06,cc */

 01,92,2e,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,71,cc */

 01,8c,10,cc */

 01,8f,30,cc */

 00,03,1c,aa */

 00,04,04,aa */

 00,05,01,aa */

 00,07,c4,aa */

 01,a9,04,cc */

 01,90,00,cc */

 01,91,06,cc */

 01,92,50,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,10,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 00,03,13,aa */

 00,04,00,aa */

 00,05,01,aa */

 00,07,30,aa */

 01,a9,00,cc */

 from lvWIMv.inf 046d:08a2/:08aa 2007/06/03 */

 640x480 */

 00,00,01,cc */

 00,10,0e,cc */

 00,02,00,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,e0,cc */

 00,01,01,cc */

 00,12,03,cc */

 00,12,01,cc */

 00,8d,08,cc */

 00,98,00,cc */

 00,9a,03,cc */

 01,1a,00,cc */

 01,1c,03,cc */

 00,9b,01,cc */

 00,9c,e6,cc */

 00,9d,02,cc */

 00,9e,86,cc */

 00,02,04,aa --> 02 */

 00,07,06,aa */

 00,08,02,aa */

 00,09,06,aa */

 00,0a,01,aa */

 00,0b,01,aa */

 00,0d,00,aa */

 00,10,00,aa */

 00,12,05,aa */

 00,13,63,aa */

 00,15,70,aa */

 01,01,b7,cc */

 01,00,0d,cc */

 01,89,06,cc */

 01,ad,00,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,8d,70,cc */

 320x240 */

 00,00,01,cc */

 00,10,0e,cc */

 00,02,10,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,01,01,cc */

 00,12,03,cc */

 00,12,01,cc */

 00,8d,08,cc */

 00,98,08,cc */

 00,9a,02,cc */

 01,1a,08,cc */

 01,1c,02,cc */

 00,9b,01,cc */

 00,9d,02,cc */

 00,9e,88,cc */

 00,02,02,aa */

 00,07,06,aa */

 00,08,02,aa */

 00,09,06,aa */

 00,0a,01,aa */

 00,0b,01,aa */

 00,0d,00,aa */

 00,10,00,aa */

 00,12,05,aa */

 00,13,63,aa */

 00,15,70,aa */

 01,01,37,cc */

 01,00,0d,cc */

 01,89,06,cc */

 01,ad,00,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,8d,70,cc */

 00,19,00,cc */

 00,87,20,cc */

 00,88,21,cc */

 00,20,02,aa */

 00,03,44,aa */

 00,0e,01,aa */

 00,0f,00,aa */

 01,aa,24,cc */

 01,90,00,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,4d,cc */

 00,1d,44,cc */

 00,1e,6f,cc */

 00,1f,ad,cc */

 00,20,eb,cc */

 00,87,0f,cc */

 00,88,0e,cc */

 00,19,00,cc */

 00,87,20,cc */

 00,88,21,cc */

 00,03,41,aa */

 00,0e,01,aa */

 00,0f,00,aa */

 01,aa,24,cc */

 01,90,00,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,9b,cc */

 00,1d,41,cc */

 00,1e,6f,cc */

 00,1f,ad,cc */

 00,20,ff,cc */

 00,87,0f,cc */

 00,88,0e,cc */

 00,19,00,cc */

 00,87,20,cc */

 00,88,21,cc */

 00,20,02,aa */

 00,21,00,aa */

 00,03,45,aa */

 00,04,08,aa */

 00,05,00,aa */

 00,0e,01,aa */

 00,0f,00,aa */

 01,aa,24,cc */

 01,90,00,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,40,cc */

 00,1d,45,cc */

 00,1e,8e,cc */

 00,1f,c1,cc */

 00,20,f5,cc */

 00,87,0f,cc */

 00,88,0e,cc */

 00,19,00,cc */

 00,87,20,cc */

 00,88,21,cc */

 00,03,42,aa */

 00,0e,01,aa */

 00,0f,00,aa */

 01,aa,24,cc */

 01,90,00,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,81,cc */

 00,1d,42,cc */

 00,1e,6f,cc */

 00,1f,af,cc */

 00,20,ff,cc */

 00,87,0f,cc */

 00,88,0e,cc */

 00,19,00,cc */

 00,87,20,cc */

 00,88,21,cc */

 00,20,02,aa */

 00,03,40,aa */

 00,04,08,aa */

 00,0e,01,aa */

 00,0f,00,aa */

 01,90,00,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,00,cc */

 00,1d,40,cc */

 00,1e,60,cc */

 00,1f,90,cc */

 00,20,ff,cc */

 00,87,0f,cc */

 00,88,0e,cc */

 00,19,00,cc */

 00,87,20,cc */

 00,88,21,cc */

 00,03,40,aa */

 00,0e,01,aa */

 00,0f,00,aa */

 01,90,00,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,02,cc */

 01,8c,10,cc */

 01,8f,20,cc */

 01,a9,00,cc */

 00,1d,40,cc */

 00,1e,60,cc */

 00,1f,90,cc */

 00,20,ff,cc */

 00,87,0f,cc */

 00,88,0e,cc */

 mt9v111 (mi0360soc) and pb0330 from vm30x.inf 0ac8:301b 07/02/13 */

 640x480 */

jfm: was 01e7*/

jfm: was 0287*/

jfm: was 0030*/

jfm: was 0030*/

jfm: was 0030*/

jfm: was 00*/

 320x240 */

jfm: was 0050*/

jfm: was 28*/

jfm: was 30*/

jfm: was 30*/

jfm: was 28*/

jfm: was 00*/

 from usbvm303.inf 0ac8:303b 07/03/25 (3 - tas5130c) */

 select IFP/SOC registers */

 operating mode control */

 output format control */

					/* H red first, V red or blue first,

 select sensor core registers */

 row start */

 column start */

 window height - 1 */

 window width - 1 */

 output control */

 read mode: bits 8 & 12 (?) */

 global gain */

 green1 gain */

 blue gain */

 red gain */

 green2 gain */

 horizontal blanking */

 shutter width */

 640x480 */

 00 */

jfm: was 1e7*/

jfm: was 0287*/

jfm: was 00 */

jfm: was 6c*/

 320x240 */

 00 */

jfm: was 6c*/

 from oem9.inf */

 640x480 */

 00,00,01,cc */

 00,02,04,cc */

 00,10,01,cc */

 00,01,01,cc */

 00,80,04,cc */

 00,81,05,cc */

 00,83,16,cc */

 00,85,18,cc */

 00,86,1a,cc */

 00,87,1b,cc */

 00,88,1c,cc */

 00,8b,ee,cc */

 00,08,03,cc */

 00,12,03,cc */

 00,12,01,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,e0,cc */

 01,80,42,cc */

 00,8d,08,aa */

 00,98,00,cc */

 00,9a,00,cc */

 01,1a,00,cc */

 01,1c,00,cc */

 00,9c,e6,cc */

 00,9e,86,cc */

 00,09,ce,aa */

 00,0b,05,aa */

 00,0d,54,aa */

 00,0f,eb,aa */

 00,87,00,aa */

 00,88,04,aa */

 00,89,00,aa */

 00,8a,05,aa */

 00,13,03,aa */

 00,16,40,aa */

 00,18,40,aa */

 00,1d,02,aa */

 00,29,e8,aa */

 00,45,45,aa */

 00,50,ed,aa */

 00,51,25,aa */

 00,52,42,aa */

 00,53,2f,aa */

 00,79,25,aa */

 00,7b,00,aa */

 00,7e,25,aa */

 00,7f,25,aa */

 00,21,00,aa */

 00,33,36,aa */

 00,36,60,aa */

 00,37,08,aa */

 00,3b,31,aa */

 00,44,0f,aa */

 00,58,02,aa */

 00,66,c0,aa */

 00,67,44,aa */

 00,6b,a0,aa */

 00,6c,54,aa */

 00,d6,07,aa */

 01,01,f7,cc */

 00,12,05,cc */

 01,00,0d,cc */

 01,89,06,cc */

 01,ad,00,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,16,7a,cc */

 01,18,4a,cc */

 from oem9.inf */

 320x240 */

 00,00,01,cc */

 00,02,10,cc */

 00,10,01,cc */

 00,01,01,cc */

 00,80,04,cc */

 00,81,05,cc */

 00,83,16,cc */

 00,85,18,cc */

 00,86,1a,cc */

 00,87,1b,cc */

 00,88,1c,cc */

 00,8b,ee,cc */

 00,08,03,cc */

 00,12,03,cc */

 00,12,01,cc */

 00,03,02,cc */

 00,04,80,cc */

 00,05,01,cc */

 00,06,e0,cc */

 01,80,42,cc */

 00,8d,08,aa */

 00,98,00,cc */

 00,9a,00,cc */

 01,1a,00,cc */

 01,1c,00,cc */

 00,9c,e8,cc */

 00,9e,88,cc */

 00,09,cc,aa */

 00,0b,05,aa */

 00,0d,58,aa */

 00,0f,ed,aa */

 00,87,00,aa */

 00,88,04,aa */

 00,89,00,aa */

 00,8a,05,aa */

 00,13,03,aa */

 00,16,40,aa */

 00,18,40,aa */

 00,1d,02,aa */

 00,29,e8,aa */

 00,45,45,aa */

 00,50,ed,aa */

 00,51,25,aa */

 00,52,42,aa */

 00,53,2f,aa */

 00,79,25,aa */

 00,7b,00,aa */

 00,7e,25,aa */

 00,7f,25,aa */

 00,21,00,aa */

 00,33,36,aa */

 00,36,60,aa */

 00,37,08,aa */

 00,3b,31,aa */

 00,44,0f,aa */

 00,58,02,aa */

 00,66,c0,aa */

 00,67,44,aa */

 00,6b,a0,aa */

 00,6c,54,aa */

 00,d6,07,aa */

 01,01,f7,cc */

 00,12,05,cc */

 01,00,0d,cc */

 01,89,06,cc */

 01,ad,00,cc */

 01,c5,03,cc */

 01,cb,13,cc */

 02,50,08,cc */

 03,01,08,cc */

 01,16,7a,cc */

 01,18,4a,cc */

 00,8d,08,aa */

 00,1a,01,aa */

 00,1b,0a,aa */

 00,1c,b0,aa */

 01,90,05,cc */

 01,91,35,cc */

 01,92,70,cc */

 01,95,00,cc */

 01,96,85,cc */

 01,97,58,cc */

 01,8c,0c,cc */

 01,8f,18,cc */

 01,a8,60,cc */

 01,a9,10,cc */

 01,aa,22,cc */

 01,8d,88,cc */

 01,1d,58,cc */

 01,80,42,cc */

 00,8d,08,aa */

 00,1a,00,aa */

 00,1b,de,aa */

 00,1c,40,aa */

 01,90,08,cc */

 01,91,ae,cc */

 01,92,80,cc */

 01,95,00,cc */

 01,96,6f,cc */

 01,97,20,cc */

 01,8c,0c,cc */

 01,8f,18,cc */

 01,a8,60,cc */

 01,a9,10,cc */

 01,aa,22,cc */

 01,8d,88,cc */

 win: 01,8d,80 */

 01,1d,58,cc */

 01,80,42,cc */

 01,80,02,cc */

 00,8d,0d,aa */

 00,1a,00,aa */

 00,1b,02,aa */

 00,1c,78,aa */

 00,46,00,aa */

 00,15,00,aa */

 320x240 */

 640x480 */

 00,19,00,cc */

 00,a3,01,aa */

 00,a4,63,aa */

 00,a3,01,cc */

 00,a4,63,cc */

 01,90,00,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,47,cc */

 00,1d,d3,cc */

 00,1e,da,cc */

 00,1f,ea,cc */

 00,20,ff,cc */

 00,9f,03,cc */

 00,19,00,cc */

 00,a3,01,aa */

 00,a4,77,aa */

 00,a3,01,cc */

 00,a4,77,cc */

 01,90,00,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,7d,cc */

 00,1d,f0,cc */

 00,1e,f4,cc */

 00,1f,f8,cc */

 00,20,ff,cc */

 00,9f,03,cc */

 00,19,00,cc */

 00,a3,01,aa */

 00,a4,36,aa */

 00,a3,01,cc */

 00,a4,36,cc */

 01,90,00,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,3e,cc */

 00,1d,ca,cc */

 00,1e,d0,cc */

 00,1f,e0,cc */

 00,20,ff,cc */

 00,9f,03,cc */

 00,19,00,cc */

 00,a3,01,aa */

 00,a4,77,aa */

 00,a3,01,cc */

 00,a4,77,cc */

 01,90,00,cc */

 01,95,00,cc */

 01,96,00,cc */

 01,97,7d,cc */

 00,1d,c8,cc */

 00,1e,d0,cc */

 00,1f,e0,cc */

 00,20,ff,cc */

 00,9f,03,cc */

 00,19,00,cc */

 00,a3,01,aa */

 00,a4,40,aa */

 00,a3,01,cc */

 00,a4,40,cc */

 01,90,00,cc */

 01,a9,00,cc */

 01,aa,00,cc */

 00,1d,bc,cc */

 00,1e,d0,cc */

 00,1f,e0,cc */

 00,20,ff,cc */

 00,9f,02,cc */

 00,19,00,cc */

 00,a3,01,aa */

 00,a4,90,aa */

 00,a3,01,cc */

 00,a4,90,cc */

 01,90,00,cc */

 01,a9,00,cc */

 01,aa,00,cc */

 00,1d,bc,cc */

 00,1e,d0,cc */

 00,1f,e0,cc */

 00,20,ff,cc */

 00,9f,02,cc */

 from usbvm305.inf 0ac8:305b 07/06/15 (3 - tas5130c) */

 00,00,01,cc, */

 00,08,02,cc, */

 00,10,01,cc, */

 00,03,02,cc, */

 00,04,80,cc, */

 00,05,01,cc, */

 00,06,e0,cc, */

 00,8b,98,cc, */

 00,01,01,cc, */

 00,12,03,cc, */

 00,12,01,cc, */

 00,98,00,cc, */

 00,9a,00,cc, */

 01,1a,00,cc, */

 01,1c,00,cc, */

	{0xa0, 0xe8, ZC3XX_R09C_WINHEIGHTLOW},		/* 00,9c,e6,cc,

	{0xa0, 0x88, ZC3XX_R09E_WINWIDTHLOW},		/* 00,9e,86,cc,

 00,87,10,cc, */

 00,8b,98,cc, */

 00,1a,00,aa, */

 00,1c,17,aa, */

 00,86,82,cc, */

 00,87,83,cc, */

 00,88,84,cc, */

 00,05,10,aa, */

 00,16,01,aa, */

 00,17,e6,aa, (e6 -> e8) */

 00,18,02,aa, */

 00,19,86,aa, */

 00,20,20,aa, */

 01,01,b7,cc, */

 00,12,05,cc, */

 01,00,0d,cc, */

 01,89,76,cc, */

 01,ad,09,cc, */

 01,c5,03,cc, */

 01,cb,13,cc, */

 02,50,08,cc, */

 03,01,08,cc, */

 01,16,61,cc, */

 01,18,65,cc */

 00,00,01,cc, */

 00,08,02,cc, */

 00,10,01,cc, */

 00,03,02,cc, */

 00,04,80,cc, */

 00,05,01,cc, */

 00,06,e0,cc, */

 00,8b,98,cc, */

 00,01,01,cc, */

 00,12,03,cc, */

 00,12,01,cc, */

 00,98,00,cc, */

 00,9a,00,cc, */

 01,1a,00,cc, */

 01,1c,00,cc, */

	{0xa0, 0xe8, ZC3XX_R09C_WINHEIGHTLOW},		/* 00,9c,e8,cc,

	{0xa0, 0x88, ZC3XX_R09E_WINWIDTHLOW},		/* 00,9e,88,cc,

 00,87,10,cc, */

 00,8b,98,cc, */

 00,1a,00,aa, */

 00,1c,17,aa, */

 00,86,82,cc, */

 00,87,83,cc, */

 00,88,84,cc, */

 00,05,10,aa, */

 00,16,01,aa, */

 00,17,e6,aa (e6 -> e8) */

 00,18,02,aa, */

 00,19,88,aa, */

 01,01,b7,cc, */

 00,12,05,cc, */

 01,00,0d,cc, */

 01,89,76,cc, */

 01,ad,09,cc, */

 01,c5,03,cc, */

 01,cb,13,cc, */

 02,50,08,cc, */

 03,01,08,cc, */

 01,16,61,cc, */

 01,18,65,cc */

 00,82,00,aa */

 00,83,01,aa */

 01,90,00,cc, */

 01,91,0d,cc, */

 01,92,50,cc, */

 01,95,00,cc, */

 01,96,00,cc, */

 01,97,47,cc, */

 01,8c,0e,cc, */

 01,8f,15,cc, */

 01,a9,10,cc, */

 00,1d,62,cc, */

 00,1e,90,cc, */

 00,1f,c8,cc, */

 00,20,ff,cc, */

 01,1d,58,cc, */

 01,80,42,cc, */

 00,82,00,aa */

 00,83,03,aa */

 00,84,54,aa */

 01,90,00,cc, */

 01,91,0d,cc, */

 01,92,50,cc, */

 01,95,00,cc, */

 01,96,00,cc, */

 01,97,8e,cc, */

 01,8c,0e,cc, */

 01,8f,15,cc, */

 01,a9,10,cc, */

 01,aa,24,cc, */

 00,1d,62,cc, */

 00,1e,90,cc, */

 00,1f,c8,cc, */

 00,20,ff,cc, */

 01,1d,58,cc, */

 01,80,42,cc, */

 00,82,00,aa */

 01,90,00,cc, */

 01,91,05,cc, */

 01,92,88,cc, */

 01,95,00,cc, */

 01,96,00,cc, */

 01,97,3b,cc, */

 01,8c,0e,cc, */

 01,8f,15,cc, */

 01,a9,10,cc, */

 01,aa,24,cc, */

 00,1d,62,cc, */

 00,1e,90,cc, */

 00,1f,c8,cc, */

 00,20,ff,cc, */

 01,1d,58,cc, */

 01,80,42,cc, */

 00,82,00,aa */

 01,90,00,cc, */

 01,1,0b,cc, */

 01,2,10,cc, */

 01,5,00,cc, */

 01,6,00,cc, */

 01,7,76,cc, */

 01,c,0e,cc, */

 01,f,15,cc, */

 01,9,10,cc, */

 01,a,24,cc, */

 00,d,62,cc, */

 00,e,90,cc, */

 00,f,c8,cc, */

 00,0,ff,cc, */

 01,d,58,cc, */

 01,80,42,cc, */

 01,00,0c,cc, */

 00,82,00,aa */

 00,83,00,aa */

 00,84,20,aa */

 01,0,00,cc, */

 01,95,00,cc, */

 01,96,00,cc, */

 01,97,10,cc, */

 01,8c,0e,cc, */

 01,8f,15,cc, */

 00,1d,62,cc, */

 00,1e,90,cc, */

 00,1f,c8,cc, */

 00,20,ff,cc, */

 01,1d,58,cc, */

 01,80,03,cc */

 01,00,0c,cc, */

 00,82,00,aa */

 00,83,00,aa */

 00,84,20,aa */

 01,90,00,cc, */

 01,95,00,cc, */

 01,96,00,cc, */

 01,97,10,cc, */

 01,8c,0e,cc, */

 01,8f,15,cc, */

 00,1d,62,cc, */

 00,1e,90,cc, */

 00,1f,c8,cc, */

 00,20,ff,cc, */

 01,1d,58,cc, */

 01,80,03,cc */

 value */

 <- read command */

 read status */

 read Lowbyte */

 read Hightbyte */

 <- write command */

 read status */

 write register */

 read status */

 reg */

 valL */

 valH */

 reg */

 valL */

 valH */

		case 0xdd:	 * delay */

		{0x66, 0xed, 0xed, 0xed, 0x66, 0xed, 0xed, 0xed, 0x66}; */

ms-win*/

 matrix already loaded */

 delta for brightness */

 delta for contrast */

 -128 / 127 */

 -128 / 92 */

 gamma */

 gradient */

/* Matches the sensor's internal frame rate to the lighting frequency.

 * Valid frequencies are:

 *	50Hz, for European and Asian lighting (default)

 *	60Hz, for American lighting

 *	0 = No Flicker (for outdoor usage)

 currently disabled */

 320x240 */

 if 320x240 */

 and 50Hz */

 win: 0x80, 0x018d */

 if 640x480 */

 and filter */

/*

 * Update the transfer parameters.

 * This function is executed from a work queue.

 reg07 gets set to 0 by sd_start before starting us */

 To protect gspca_dev->usb_buf and gspca_dev->usb_err */

 Bit 0 of register 11 indicates FIFO overflow */

 overflow */

 Bit Rate Control not enabled? */

 Allow 98 bytes / unit */

 Decrease allowed bytes / unit */

 no overflow */

 BRC enabled? */

 Something went wrong. Unlock and return */

 bridge reset */

 start probe 2 wires */

	msleep(2); */

 PAS106 */

 PAS106 */

 HV7131B */

 HV7131B */

 CS2102 */

 CS2102 */

 OmniVision */

 (should have returned 0xaa) --> Omnivision? */

 reg_r 0x10 -> 0x06 -->  */

 HDCS2020 */

 HDCS2020 */

 PB0330 */

 PB0330 */

 PB0330 ?? */

 PB0330 ?? */

 ICM105A */

 ICM105A */

 PAS202BCB */

 PAS202BCB */

 TAS5130C */

 TAS5130C */

 ?? */

 OmniVision */

 sensor reset */

 OV7630C */

 OV7620 */

 OV7648 */

 not OmniVision */

 TAS5130C */

 MT9V111 */

 CS2102K */

 MT9V111 */

fixme: lack of 8b=b3 (11,12)-> 10, 8b=e0 (14,15,16)-> 12 found in gspcav1*/

 HV7131R */

 HV7131R */

 HV7131R */

 TAS5130C */

 check PB0330 */

 PB0330 */

 probe gc0303 / gc0305 */

 gc0303 */

 gc0305 */

 check OmniVision */

 OV7610 - manufacturer ID */

 OmniVision confirm ? */

 ID 0 */

 ID 1 */

 revision number */

 adcm2700 (6100/6200) */

 don't probe */

 may probe but with no write in reg 0x0010 */

 don't probe */

 this function is called at probe time */

 define some sensors from the vendor/product */

 With high quality settings we need max bandwidth */

 gamma/brightness/contrast cluster */

 autogain/exposure cluster */

 this function is called at probe and resume time */

 check the sensor type */

 hv7131b */

 hv7131e */

			case 2:			 * hv7131r */

 same sensor (?) */

	case 2: */

 switch off the led */

 create the JPEG header */

 JPEG 422 */

		msleep(100);			 * ?? */

 --> 0x40 */

 (from win traces) */

 set the gamma tables when not set */

 gamma set in xxx_Initial */

 one more time? */

 from win */

 Start with BRC disabled, transfer_update will enable it if needed */

 (from win traces) */

 ms-win + */

 (from win traces) */

		reg_w(gspca_dev, 0x40, ZC3XX_R117_GGAIN); in win traces */

fixme: returns 0xa3 */

fixme: returned value to send? */

 Start the transfer parameters update thread */

 called on streamoff with alt==0 and on disconnect */

 the usb_lock is held at entry - restore on exit */

 check the JPEG end of frame */

fixme: what does the last byte mean?*/

 check the JPEG start of a frame */

 put the JPEG header in the new frame */

		/* remove the webcam's header:

		 * ff d8 ff fe 00 0e 00 00 ss ss 00 01 ww ww hh hh pp pp

		 *	- 'ss ss' is the frame sequence number (BE)

		 *	- 'ww ww' and 'hh hh' are the window dimensions (BE)

		 *	- 'pp pp' is the packet sequence number (BE)

 interrupt packet data */

 interrupt packet length */

 end of entry */

 -- device connect -- */

 USB driver */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPCA500 chip based cameras initialization data

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

 specific webcam descriptor */

 !! must be the first item */

 Frame packet header offsets for the spca500 */

	{0x00, 0x0003, 0x816b},	/* SSI not active sync with vsync,

				 * hue (H byte) = 0,

				 * saturation/hue enable,

				 * brightness/contrast enable.

 brightness = 0 */

 contrast = 0 */

	{0x00, 0x0003, 0x816b},	/* SSI not active sync with vsync,

				 * hue (H byte) = 0, saturation/hue enable,

				 * brightness/contrast enable.

				 * was 0x0003, now 0x0000.

 hue (L byte) = 0 */

 saturation = 0x20 */

 edge gain high threshold */

 edge gain low threshold */

 edge bandwidth high threshold */

 edge bandwidth low threshold */

 clock rate compensation = 1/25 sec/frame */

 set interface */

 Q-table Y-components */

 Q-table C-components */

 Q-table Y-components */

 Q-table C-components */

 Q-table Y-components start registers 0x8800 */

 Q-table C-components start registers 0x8840 */

 read 'len' bytes to gspca_dev->usb_buf */

 value */

 returns: negative is error, pos or zero is data */

 bRequest */

 wIndex */

 wLength (1 or 2 only) */

 value */

 timeout */

/*

 * Simple function to wait for a given 8-bit value to be returned from

 * a reg_read call.

 * Returns: negative is error or timeout, zero is success.

 loop over y components */

 loop over c components */

 00 for adjust shutter */

 set x multiplier */

 set y multiplier */

 use compressed mode, VGA, with mode specific subsample */

 send the reset command */

 wait for the reset to complete */

 all ok */

 Synchro the Bridge with sensor */

 Maybe that will work on all spca500 chip */

 because i only own a clicksmart310 try for that chip */

 using spca50x_set_packet_size() cause an Ooops here */

 usb_set_interface from kernel 2.6.x clear all the urb stuff */

 up-port the same feature as in 2.4.x kernel */

 need alt setting here */

 Windoze use pipe with altsetting 6 why 7 here */

 some unknown command from Aiptek pocket dv and family300 */

 enable drop packet */

 set qtable index */

 family cam Quicksmart stuff */

 Set agc transfer: synced between frames */

 Init SDRAM - needed for SDRAM access */

Start init sequence or stream */

 switch to video camera mode */

 this function is called at probe time */

 this function is called at probe and resume time */

 initialisation of spca500 based cameras is deferred */

/*	else

 create the JPEG header */

 JPEG 411 */

 is there a sensor here ? */

 setup qtable */

 enable drop packet */

 Init SDRAM - needed for SDRAM access */

 switch to video camera mode */

 enable drop packet */

 Init SDRAM - needed for SDRAM access */

 switch to video camera mode */

 Creative PC-CAM 300 640x480 CCD */

	case IntelPocketPCCamera:	/* FIXME: Temporary fix for

					 *	Intel Pocket PC Camera

 do a full reset */

 enable drop packet */

 switch to video camera mode */

		write_vector(gspca_dev, spca500_visual_defaults); */

 Kodak EZ200 */

 do a full reset */

 enable drop packet */

 switch to video camera mode */

		write_vector(gspca_dev, spca500_visual_defaults); */

 FamilyCam 300 */

 Aiptek PocketDV */

Mustek Gsmart Mini */

 Mustek Gsmart 300 */

 enable drop packet */

 familycam Quicksmart pocketDV stuff */

 Set agc transfer: synced between frames */

 Init SDRAM - needed for SDRAM access */

 switch to video camera mode */

 enable drop packet */

 Init SDRAM - needed for SDRAM access */

 switch to video camera mode */

 switch to video camera mode */

 isoc packet */

 iso packet length */

 frames are jpeg 4.1.1 without 0xff escape */

 drop packet */

			gspca_dev->last_packet_type = DISCARD_PACKET; */

 put the JPEG header in the new frame */

 add 0x00 after 0xff */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OV519 driver

 *

 * Copyright (C) 2008-2011 Jean-François Moine <moinejf@free.fr>

 * Copyright (C) 2009 Hans de Goede <hdegoede@redhat.com>

 *

 * This module is adapted from the ov51x-jpeg package, which itself

 * was adapted from the ov511 driver.

 *

 * Original copyright for the ov511 driver is:

 *

 * Copyright (c) 1999-2006 Mark W. McClelland

 * Support for OV519, OV8610 Copyright (c) 2003 Joerg Heckenbach

 * Many improvements by Bret Wallach <bwallac1@san.rr.com>

 * Color fixes by by Orion Sky Lawlor <olawlor@acm.org> (2/26/2000)

 * OV7620 fixes by Charl P. Botha <cpbotha@ieee.org>

 * Changes by Claudio Matsuoka <claudio@conectiva.com>

 *

 * ov51x-jpeg original copyright is:

 *

 * Copyright (c) 2004-2007 Romain Beauxis <toots@rastageeks.org>

 * Support for OV7670 sensors was contributed by Sam Skipsey <aoanla@yahoo.com>

 The jpeg_hdr is used by w996Xcf only */

 The CONEX_CAM define for jpeg.h needs renaming, now its used here too */

moinejf.free.fr>");

 global parameters */

/* Number of times to retry a failed I2C transaction. Increase this if you

 ov519 device descriptor */

 !! must be the first item */

 h/vflip control cluster */

 autobrightness/brightness control cluster */

 = ov530 */

 Determined by sensor type */

 Streaming is temporarily paused */

 current Framerate */

 clockdiv override */

 Type of image sensor chip (SEN_*) */

/* Note this is a bit of a hack, but the w9968cf driver needs the code for all

   the ov sensors which is already present here. When we have the time we

 table of the disabled controls */

 No controls */

/* Note some of the sizeimage values for the ov511 / ov518 may seem

   larger then necessary, however they need to be this big as the ov511 /

   ov518 always fills the entire isoc frame, using 0 padding bytes when

   it doesn't have any data. So with low framerates the amount of data

   transferred can become quite large (libv4l will remove all the 0 padding

 Registers common to OV511 / OV518 */

 2 bytes wide w/ OV518(+) */

 Reset type flags */

 OV511 Camera interface register numbers */

 OV511+ only */

 OV518 Camera interface register numbers */

 OV518(+) only */

 OV518(+) only */

 OV519 Camera interface register numbers */

 OV519 System Controller register numbers */

#define OV511_ENDPOINT_ADDRESS 1	 * Isoc endpoint number */

/*

 * The FX2 chip does not give us a zero length read at end of frame.

 * It does, however, give a short read at the end of a frame, if

 * necessary, rather than run two frames together.

 *

 * By choosing the right bulk transfer size, we are guaranteed to always

 * get a short read for the last read of each frame.  Frame sizes are

 * always a composite number (width * height, or a multiple) so if we

 * choose a prime number, we are guaranteed that the last read of a

 * frame will be short.

 *

 * But it isn't that easy: the 2.6 kernel requires a multiple of 4KB,

 * otherwise EOVERFLOW "babbling" errors occur.  I have not been able

 * to figure out why.  [PMiller]

 *

 * The constant (13 * 4096) is the largest "prime enough" number less than 64KB.

 *

 * It isn't enough to know the number of bytes per frame, in case we

 * have data dropouts or buffer overruns (even though the FX2 double

 * buffers, there are some pretty strict real time constraints for

 * isochronous transfer for larger frame sizes).

jfm: this value does not work for 800x600 - see isoc_init */

 I2C registers */

 OV518(+) only */

 I2C ADDRESSES */

 OV9xxx / OV2xxx / OV3xxx */

 OV7610 registers */

 gain setting (5:0) */

 blue channel balance */

 red channel balance */

 saturation */

 04 reserved */

 Y contrast */

 Y brightness */

 misc common regs */

 manufacturer ID MSB */

 manufacturer ID LSB */

 misc settings */

 OV7660 and OV7670 registers */

 Gain lower 8 bits (rest in vref) */

 blue gain */

 red gain */

 Pieces of GAIN, VSTART, VSTOP */

 Control 1 */

#define OV7670_R07_AECHH	0x07	 * AEC MS 5 bits */

 Control 3 */

 Control 4 */

 All "reserved" */

 Control 6 */

 More bits of AEC value */

 Clock control */

 Control 7 */

#define   OV7670_COM7_YUV	 0x00	 * YUV */

 QVGA format */

 Register reset */

 Control 8 */

 Auto exposure enable */

 White balance enable */

 Auto gain enable */

 Band filter enable */

 Unlimited AEC step size */

 Enable fast AGC/AEC */

 Control 9 - gain ceiling */

 Control 10 */

 Horiz start high bits */

 Horiz stop high bits */

 Vert start high bits */

 Vert stop high bits */

 Mirror / vflip */

 vertical flip */

 Mirror image */

 AGC upper limit */

 AGC lower limit */

 AGC/AEC fast mode op region */

 HREF pieces */

 lots of stuff */

 Control 11 */

 Auto detect 50/60 Hz */

 Control 12 */

 Control 13 */

 Gamma enable */

 UV saturation auto adjustment */

 Control 14 */

 Edge enhancement factor */

 Control 15 */

#define   OV7670_COM15_R00FF	 0xc0	 *	00 to FF */

 Control 16 */

 AWB gain enable */

 end of ov7660 common registers */

 Brightness */

 Contrast control */

 Fix gain control */

#define OV7670_R8C_RGB444	0x8c	 * RGB 444 control */

 Hist AEC/AGC control 1 */

 Hist AEC/AGC control 2 */

 50hz banding step limit */

 Hist AEC/AGC control 3 */

 Hist AEC/AGC control 4 */

 Hist AEC/AGC control 5 */

 Hist AEC/AGC control 6 */

 Hist AEC/AGC control 7 */

 60hz banding step limit */

 Settings for OV2610 camera chip */

 reset */

 reset */

 1600x1200 */

 ms-win traces */

 clock / 3 ? */

 60 Hz filter */

 normal colors */

	/*

	 * From the datasheet: "Note that after writing to register COMH

	 * (0x12) to change the sensor mode, registers related to the

	 * sensor's cropping window will be reset back to their default

	 * values."

	 *

	 * "wait 4096 external clock ... to make sure the sensor is

	 * stable and ready to access registers" i.e. 160us at 24MHz

 COMH reset */

 QXGA, master */

	/*

	 * 11 CLKRC "Clock Rate Control"

	 * [7] internal frequency doublers: on

	 * [6] video port mode: master

	 * [5:0] clock divider: 1

	/*

	 * 13 COMI "Common Control I"

	 *                  = 192 (0xC0) 11000000

	 *    COMI[7] "AEC speed selection"

	 *                  =   1 (0x01) 1....... "Faster AEC correction"

	 *    COMI[6] "AEC speed step selection"

	 *                  =   1 (0x01) .1...... "Big steps, fast"

	 *    COMI[5] "Banding filter on off"

	 *                  =   0 (0x00) ..0..... "Off"

	 *    COMI[4] "Banding filter option"

	 *                  =   0 (0x00) ...0.... "Main clock is 48 MHz and

	 *                                         the PLL is ON"

	 *    COMI[3] "Reserved"

	 *                  =   0 (0x00) ....0...

	 *    COMI[2] "AGC auto manual control selection"

	 *                  =   0 (0x00) .....0.. "Manual"

	 *    COMI[1] "AWB auto manual control selection"

	 *                  =   0 (0x00) ......0. "Manual"

	 *    COMI[0] "Exposure control"

	 *                  =   0 (0x00) .......0 "Manual"

	/*

	 * 09 COMC "Common Control C"

	 *                  =   8 (0x08) 00001000

	 *    COMC[7:5] "Reserved"

	 *                  =   0 (0x00) 000.....

	 *    COMC[4] "Sleep Mode Enable"

	 *                  =   0 (0x00) ...0.... "Normal mode"

	 *    COMC[3:2] "Sensor sampling reset timing selection"

	 *                  =   2 (0x02) ....10.. "Longer reset time"

	 *    COMC[1:0] "Output drive current select"

	 *                  =   0 (0x00) ......00 "Weakest"

	/*

	 * 0C COMD "Common Control D"

	 *                  =   8 (0x08) 00001000

	 *    COMD[7] "Reserved"

	 *                  =   0 (0x00) 0.......

	 *    COMD[6] "Swap MSB and LSB at the output port"

	 *                  =   0 (0x00) .0...... "False"

	 *    COMD[5:3] "Reserved"

	 *                  =   1 (0x01) ..001...

	 *    COMD[2] "Output Average On Off"

	 *                  =   0 (0x00) .....0.. "Output Normal"

	 *    COMD[1] "Sensor precharge voltage selection"

	 *                  =   0 (0x00) ......0. "Selects internal

	 *                                         reference precharge

	 *                                         voltage"

	 *    COMD[0] "Snapshot option"

	 *                  =   0 (0x00) .......0 "Enable live video output

	 *                                         after snapshot sequence"

	/*

	 * 0D COME "Common Control E"

	 *                  = 161 (0xA1) 10100001

	 *    COME[7] "Output average option"

	 *                  =   1 (0x01) 1....... "Output average of 4 pixels"

	 *    COME[6] "Anti-blooming control"

	 *                  =   0 (0x00) .0...... "Off"

	 *    COME[5:3] "Reserved"

	 *                  =   4 (0x04) ..100...

	 *    COME[2] "Clock output power down pin status"

	 *                  =   0 (0x00) .....0.. "Tri-state data output pin

	 *                                         on power down"

	 *    COME[1] "Data output pin status selection at power down"

	 *                  =   0 (0x00) ......0. "Tri-state VSYNC, PCLK,

	 *                                         HREF, and CHSYNC pins on

	 *                                         power down"

	 *    COME[0] "Auto zero circuit select"

	 *                  =   1 (0x01) .......1 "On"

	/*

	 * 0E COMF "Common Control F"

	 *                  = 112 (0x70) 01110000

	 *    COMF[7] "System clock selection"

	 *                  =   0 (0x00) 0....... "Use 24 MHz system clock"

	 *    COMF[6:4] "Reserved"

	 *                  =   7 (0x07) .111....

	 *    COMF[3] "Manual auto negative offset canceling selection"

	 *                  =   0 (0x00) ....0... "Auto detect negative

	 *                                         offset and cancel it"

	 *    COMF[2:0] "Reserved"

	 *                  =   0 (0x00) .....000

	/*

	 * 0F COMG "Common Control G"

	 *                  =  66 (0x42) 01000010

	 *    COMG[7] "Optical black output selection"

	 *                  =   0 (0x00) 0....... "Disable"

	 *    COMG[6] "Black level calibrate selection"

	 *                  =   1 (0x01) .1...... "Use optical black pixels

	 *                                         to calibrate"

	 *    COMG[5:4] "Reserved"

	 *                  =   0 (0x00) ..00....

	 *    COMG[3] "Channel offset adjustment"

	 *                  =   0 (0x00) ....0... "Disable offset adjustment"

	 *    COMG[2] "ADC black level calibration option"

	 *                  =   0 (0x00) .....0.. "Use B/G line and G/R

	 *                                         line to calibrate each

	 *                                         channel's black level"

	 *    COMG[1] "Reserved"

	 *                  =   1 (0x01) ......1.

	 *    COMG[0] "ADC black level calibration enable"

	 *                  =   0 (0x00) .......0 "Disable"

	/*

	 * 14 COMJ "Common Control J"

	 *                  = 198 (0xC6) 11000110

	 *    COMJ[7:6] "AGC gain ceiling"

	 *                  =   3 (0x03) 11...... "8x"

	 *    COMJ[5:4] "Reserved"

	 *                  =   0 (0x00) ..00....

	 *    COMJ[3] "Auto banding filter"

	 *                  =   0 (0x00) ....0... "Banding filter is always

	 *                                         on off depending on

	 *                                         COMI[5] setting"

	 *    COMJ[2] "VSYNC drop option"

	 *                  =   1 (0x01) .....1.. "SYNC is dropped if frame

	 *                                         data is dropped"

	 *    COMJ[1] "Frame data drop"

	 *                  =   1 (0x01) ......1. "Drop frame data if

	 *                                         exposure is not within

	 *                                         tolerance.  In AEC mode,

	 *                                         data is normally dropped

	 *                                         when data is out of

	 *                                         range."

	 *    COMJ[0] "Reserved"

	 *                  =   0 (0x00) .......0

	/*

	 * 15 COMK "Common Control K"

	 *                  =   2 (0x02) 00000010

	 *    COMK[7] "CHSYNC pin output swap"

	 *                  =   0 (0x00) 0....... "CHSYNC"

	 *    COMK[6] "HREF pin output swap"

	 *                  =   0 (0x00) .0...... "HREF"

	 *    COMK[5] "PCLK output selection"

	 *                  =   0 (0x00) ..0..... "PCLK always output"

	 *    COMK[4] "PCLK edge selection"

	 *                  =   0 (0x00) ...0.... "Data valid on falling edge"

	 *    COMK[3] "HREF output polarity"

	 *                  =   0 (0x00) ....0... "positive"

	 *    COMK[2] "Reserved"

	 *                  =   0 (0x00) .....0..

	 *    COMK[1] "VSYNC polarity"

	 *                  =   1 (0x01) ......1. "negative"

	 *    COMK[0] "HSYNC polarity"

	 *                  =   0 (0x00) .......0 "positive"

	/*

	 * 33 CHLF "Current Control"

	 *                  =   9 (0x09) 00001001

	 *    CHLF[7:6] "Sensor current control"

	 *                  =   0 (0x00) 00......

	 *    CHLF[5] "Sensor current range control"

	 *                  =   0 (0x00) ..0..... "normal range"

	 *    CHLF[4] "Sensor current"

	 *                  =   0 (0x00) ...0.... "normal current"

	 *    CHLF[3] "Sensor buffer current control"

	 *                  =   1 (0x01) ....1... "half current"

	 *    CHLF[2] "Column buffer current control"

	 *                  =   0 (0x00) .....0.. "normal current"

	 *    CHLF[1] "Analog DSP current control"

	 *                  =   0 (0x00) ......0. "normal current"

	 *    CHLF[1] "ADC current control"

	 *                  =   0 (0x00) ......0. "normal current"

	/*

	 * 34 VBLM "Blooming Control"

	 *                  =  80 (0x50) 01010000

	 *    VBLM[7] "Hard soft reset switch"

	 *                  =   0 (0x00) 0....... "Hard reset"

	 *    VBLM[6:4] "Blooming voltage selection"

	 *                  =   5 (0x05) .101....

	 *    VBLM[3:0] "Sensor current control"

	 *                  =   0 (0x00) ....0000

	/*

	 * 36 VCHG "Sensor Precharge Voltage Control"

	 *                  =   0 (0x00) 00000000

	 *    VCHG[7] "Reserved"

	 *                  =   0 (0x00) 0.......

	 *    VCHG[6:4] "Sensor precharge voltage control"

	 *                  =   0 (0x00) .000....

	 *    VCHG[3:0] "Sensor array common reference"

	 *                  =   0 (0x00) ....0000

	/*

	 * 37 ADC "ADC Reference Control"

	 *                  =   4 (0x04) 00000100

	 *    ADC[7:4] "Reserved"

	 *                  =   0 (0x00) 0000....

	 *    ADC[3] "ADC input signal range"

	 *                  =   0 (0x00) ....0... "Input signal 1.0x"

	 *    ADC[2:0] "ADC range control"

	 *                  =   4 (0x04) .....100

	/*

	 * 38 ACOM "Analog Common Ground"

	 *                  =  82 (0x52) 01010010

	 *    ACOM[7] "Analog gain control"

	 *                  =   0 (0x00) 0....... "Gain 1x"

	 *    ACOM[6] "Analog black level calibration"

	 *                  =   1 (0x01) .1...... "On"

	 *    ACOM[5:0] "Reserved"

	 *                  =  18 (0x12) ..010010

	/*

	 * 3A FREFA "Internal Reference Adjustment"

	 *                  =   0 (0x00) 00000000

	 *    FREFA[7:0] "Range"

	 *                  =   0 (0x00) 00000000

	/*

	 * 3C FVOPT "Internal Reference Adjustment"

	 *                  =  31 (0x1F) 00011111

	 *    FVOPT[7:0] "Range"

	 *                  =  31 (0x1F) 00011111

	/*

	 * 44 Undocumented  =   0 (0x00) 00000000

	 *    44[7:0] "It's a secret"

	 *                  =   0 (0x00) 00000000

	/*

	 * 40 Undocumented  =   0 (0x00) 00000000

	 *    40[7:0] "It's a secret"

	 *                  =   0 (0x00) 00000000

	/*

	 * 41 Undocumented  =   0 (0x00) 00000000

	 *    41[7:0] "It's a secret"

	 *                  =   0 (0x00) 00000000

	/*

	 * 42 Undocumented  =   0 (0x00) 00000000

	 *    42[7:0] "It's a secret"

	 *                  =   0 (0x00) 00000000

	/*

	 * 43 Undocumented  =   0 (0x00) 00000000

	 *    43[7:0] "It's a secret"

	 *                  =   0 (0x00) 00000000

	/*

	 * 45 Undocumented  = 128 (0x80) 10000000

	 *    45[7:0] "It's a secret"

	 *                  = 128 (0x80) 10000000

	/*

	 * 48 Undocumented  = 192 (0xC0) 11000000

	 *    48[7:0] "It's a secret"

	 *                  = 192 (0xC0) 11000000

	/*

	 * 49 Undocumented  =  25 (0x19) 00011001

	 *    49[7:0] "It's a secret"

	 *                  =  25 (0x19) 00011001

	/*

	 * 4B Undocumented  = 128 (0x80) 10000000

	 *    4B[7:0] "It's a secret"

	 *                  = 128 (0x80) 10000000

	/*

	 * 4D Undocumented  = 196 (0xC4) 11000100

	 *    4D[7:0] "It's a secret"

	 *                  = 196 (0xC4) 11000100

	/*

	 * 35 VREF "Reference Voltage Control"

	 *                  =  76 (0x4c) 01001100

	 *    VREF[7:5] "Column high reference control"

	 *                  =   2 (0x02) 010..... "higher voltage"

	 *    VREF[4:2] "Column low reference control"

	 *                  =   3 (0x03) ...011.. "Highest voltage"

	 *    VREF[1:0] "Reserved"

	 *                  =   0 (0x00) ......00

	/*

	 * 3D Undocumented  =   0 (0x00) 00000000

	 *    3D[7:0] "It's a secret"

	 *                  =   0 (0x00) 00000000

	/*

	 * 3E Undocumented  =   0 (0x00) 00000000

	 *    3E[7:0] "It's a secret"

	 *                  =   0 (0x00) 00000000

	/*

	 * 3B FREFB "Internal Reference Adjustment"

	 *                  =  24 (0x18) 00011000

	 *    FREFB[7:0] "Range"

	 *                  =  24 (0x18) 00011000

	/*

	 * 33 CHLF "Current Control"

	 *                  =  25 (0x19) 00011001

	 *    CHLF[7:6] "Sensor current control"

	 *                  =   0 (0x00) 00......

	 *    CHLF[5] "Sensor current range control"

	 *                  =   0 (0x00) ..0..... "normal range"

	 *    CHLF[4] "Sensor current"

	 *                  =   1 (0x01) ...1.... "double current"

	 *    CHLF[3] "Sensor buffer current control"

	 *                  =   1 (0x01) ....1... "half current"

	 *    CHLF[2] "Column buffer current control"

	 *                  =   0 (0x00) .....0.. "normal current"

	 *    CHLF[1] "Analog DSP current control"

	 *                  =   0 (0x00) ......0. "normal current"

	 *    CHLF[1] "ADC current control"

	 *                  =   0 (0x00) ......0. "normal current"

	/*

	 * 34 VBLM "Blooming Control"

	 *                  =  90 (0x5A) 01011010

	 *    VBLM[7] "Hard soft reset switch"

	 *                  =   0 (0x00) 0....... "Hard reset"

	 *    VBLM[6:4] "Blooming voltage selection"

	 *                  =   5 (0x05) .101....

	 *    VBLM[3:0] "Sensor current control"

	 *                  =  10 (0x0A) ....1010

	/*

	 * 3B FREFB "Internal Reference Adjustment"

	 *                  =   0 (0x00) 00000000

	 *    FREFB[7:0] "Range"

	 *                  =   0 (0x00) 00000000

	/*

	 * 33 CHLF "Current Control"

	 *                  =   9 (0x09) 00001001

	 *    CHLF[7:6] "Sensor current control"

	 *                  =   0 (0x00) 00......

	 *    CHLF[5] "Sensor current range control"

	 *                  =   0 (0x00) ..0..... "normal range"

	 *    CHLF[4] "Sensor current"

	 *                  =   0 (0x00) ...0.... "normal current"

	 *    CHLF[3] "Sensor buffer current control"

	 *                  =   1 (0x01) ....1... "half current"

	 *    CHLF[2] "Column buffer current control"

	 *                  =   0 (0x00) .....0.. "normal current"

	 *    CHLF[1] "Analog DSP current control"

	 *                  =   0 (0x00) ......0. "normal current"

	 *    CHLF[1] "ADC current control"

	 *                  =   0 (0x00) ......0. "normal current"

	/*

	 * 34 VBLM "Blooming Control"

	 *                  =  80 (0x50) 01010000

	 *    VBLM[7] "Hard soft reset switch"

	 *                  =   0 (0x00) 0....... "Hard reset"

	 *    VBLM[6:4] "Blooming voltage selection"

	 *                  =   5 (0x05) .101....

	 *    VBLM[3:0] "Sensor current control"

	 *                  =   0 (0x00) ....0000

	/*

	 * 12 COMH "Common Control H"

	 *                  =  64 (0x40) 01000000

	 *    COMH[7] "SRST"

	 *                  =   0 (0x00) 0....... "No-op"

	 *    COMH[6:4] "Resolution selection"

	 *                  =   4 (0x04) .100.... "XGA"

	 *    COMH[3] "Master slave selection"

	 *                  =   0 (0x00) ....0... "Master mode"

	 *    COMH[2] "Internal B/R channel option"

	 *                  =   0 (0x00) .....0.. "B/R use same channel"

	 *    COMH[1] "Color bar test pattern"

	 *                  =   0 (0x00) ......0. "Off"

	 *    COMH[0] "Reserved"

	 *                  =   0 (0x00) .......0

	/*

	 * 17 HREFST "Horizontal window start"

	 *                  =  31 (0x1F) 00011111

	 *    HREFST[7:0] "Horizontal window start, 8 MSBs"

	 *                  =  31 (0x1F) 00011111

	/*

	 * 18 HREFEND "Horizontal window end"

	 *                  =  95 (0x5F) 01011111

	 *    HREFEND[7:0] "Horizontal Window End, 8 MSBs"

	 *                  =  95 (0x5F) 01011111

	/*

	 * 19 VSTRT "Vertical window start"

	 *                  =   0 (0x00) 00000000

	 *    VSTRT[7:0] "Vertical Window Start, 8 MSBs"

	 *                  =   0 (0x00) 00000000

	/*

	 * 1A VEND "Vertical window end"

	 *                  =  96 (0x60) 01100000

	 *    VEND[7:0] "Vertical Window End, 8 MSBs"

	 *                  =  96 (0x60) 01100000

	/*

	 * 32 COMM "Common Control M"

	 *                  =  18 (0x12) 00010010

	 *    COMM[7:6] "Pixel clock divide option"

	 *                  =   0 (0x00) 00...... "/1"

	 *    COMM[5:3] "Horizontal window end position, 3 LSBs"

	 *                  =   2 (0x02) ..010...

	 *    COMM[2:0] "Horizontal window start position, 3 LSBs"

	 *                  =   2 (0x02) .....010

	/*

	 * 03 COMA "Common Control A"

	 *                  =  74 (0x4A) 01001010

	 *    COMA[7:4] "AWB Update Threshold"

	 *                  =   4 (0x04) 0100....

	 *    COMA[3:2] "Vertical window end line control 2 LSBs"

	 *                  =   2 (0x02) ....10..

	 *    COMA[1:0] "Vertical window start line control 2 LSBs"

	 *                  =   2 (0x02) ......10

	/*

	 * 11 CLKRC "Clock Rate Control"

	 *                  = 128 (0x80) 10000000

	 *    CLKRC[7] "Internal frequency doublers on off seclection"

	 *                  =   1 (0x01) 1....... "On"

	 *    CLKRC[6] "Digital video master slave selection"

	 *                  =   0 (0x00) .0...... "Master mode, sensor

	 *                                         provides PCLK"

	 *    CLKRC[5:0] "Clock divider { CLK = PCLK/(1+CLKRC[5:0]) }"

	 *                  =   0 (0x00) ..000000

	/*

	 * 12 COMH "Common Control H"

	 *                  =   0 (0x00) 00000000

	 *    COMH[7] "SRST"

	 *                  =   0 (0x00) 0....... "No-op"

	 *    COMH[6:4] "Resolution selection"

	 *                  =   0 (0x00) .000.... "QXGA"

	 *    COMH[3] "Master slave selection"

	 *                  =   0 (0x00) ....0... "Master mode"

	 *    COMH[2] "Internal B/R channel option"

	 *                  =   0 (0x00) .....0.. "B/R use same channel"

	 *    COMH[1] "Color bar test pattern"

	 *                  =   0 (0x00) ......0. "Off"

	 *    COMH[0] "Reserved"

	 *                  =   0 (0x00) .......0

	/*

	 * 12 COMH "Common Control H"

	 *                  =  64 (0x40) 01000000

	 *    COMH[7] "SRST"

	 *                  =   0 (0x00) 0....... "No-op"

	 *    COMH[6:4] "Resolution selection"

	 *                  =   4 (0x04) .100.... "XGA"

	 *    COMH[3] "Master slave selection"

	 *                  =   0 (0x00) ....0... "Master mode"

	 *    COMH[2] "Internal B/R channel option"

	 *                  =   0 (0x00) .....0.. "B/R use same channel"

	 *    COMH[1] "Color bar test pattern"

	 *                  =   0 (0x00) ......0. "Off"

	 *    COMH[0] "Reserved"

	 *                  =   0 (0x00) .......0

	/*

	 * 17 HREFST "Horizontal window start"

	 *                  =  31 (0x1F) 00011111

	 *    HREFST[7:0] "Horizontal window start, 8 MSBs"

	 *                  =  31 (0x1F) 00011111

	/*

	 * 18 HREFEND "Horizontal window end"

	 *                  =  95 (0x5F) 01011111

	 *    HREFEND[7:0] "Horizontal Window End, 8 MSBs"

	 *                  =  95 (0x5F) 01011111

	/*

	 * 19 VSTRT "Vertical window start"

	 *                  =   0 (0x00) 00000000

	 *    VSTRT[7:0] "Vertical Window Start, 8 MSBs"

	 *                  =   0 (0x00) 00000000

	/*

	 * 1A VEND "Vertical window end"

	 *                  =  96 (0x60) 01100000

	 *    VEND[7:0] "Vertical Window End, 8 MSBs"

	 *                  =  96 (0x60) 01100000

	/*

	 * 32 COMM "Common Control M"

	 *                  =  18 (0x12) 00010010

	 *    COMM[7:6] "Pixel clock divide option"

	 *                  =   0 (0x00) 00...... "/1"

	 *    COMM[5:3] "Horizontal window end position, 3 LSBs"

	 *                  =   2 (0x02) ..010...

	 *    COMM[2:0] "Horizontal window start position, 3 LSBs"

	 *                  =   2 (0x02) .....010

	/*

	 * 03 COMA "Common Control A"

	 *                  =  74 (0x4A) 01001010

	 *    COMA[7:4] "AWB Update Threshold"

	 *                  =   4 (0x04) 0100....

	 *    COMA[3:2] "Vertical window end line control 2 LSBs"

	 *                  =   2 (0x02) ....10..

	 *    COMA[1:0] "Vertical window start line control 2 LSBs"

	 *                  =   2 (0x02) ......10

	/*

	 * 02 RED "Red Gain Control"

	 *                  = 175 (0xAF) 10101111

	 *    RED[7] "Action"

	 *                  =   1 (0x01) 1....... "gain = 1/(1+bitrev([6:0]))"

	 *    RED[6:0] "Value"

	 *                  =  47 (0x2F) .0101111

	/*

	 * 2D ADDVSL "VSYNC Pulse Width"

	 *                  = 210 (0xD2) 11010010

	 *    ADDVSL[7:0] "VSYNC pulse width, LSB"

	 *                  = 210 (0xD2) 11010010

	/*

	 * 00 GAIN          =  24 (0x18) 00011000

	 *    GAIN[7:6] "Reserved"

	 *                  =   0 (0x00) 00......

	 *    GAIN[5] "Double"

	 *                  =   0 (0x00) ..0..... "False"

	 *    GAIN[4] "Double"

	 *                  =   1 (0x01) ...1.... "True"

	 *    GAIN[3:0] "Range"

	 *                  =   8 (0x08) ....1000

	/*

	 * 01 BLUE "Blue Gain Control"

	 *                  = 240 (0xF0) 11110000

	 *    BLUE[7] "Action"

	 *                  =   1 (0x01) 1....... "gain = 1/(1+bitrev([6:0]))"

	 *    BLUE[6:0] "Value"

	 *                  = 112 (0x70) .1110000

	/*

	 * 10 AEC "Automatic Exposure Control"

	 *                  =  10 (0x0A) 00001010

	 *    AEC[7:0] "Automatic Exposure Control, 8 MSBs"

	 *                  =  10 (0x0A) 00001010

 reset */

 For when autoadjust is off */

 The ratio of 0x0c and 0x0d controls the white point */

 COMS */

 AEC Exposure time */

 Enable AGC */

 0x16: 0x06 helps frame stability with moving objects */

	{ 0x20, 0x30 },  * Aperture correction enable */

 BLC enable */

 0x28: 0x05 Selects RGB format if RGB on */

 Disable framerate adjust */

	{ 0x2b, 0xac },  * Framerate; Set 2a[7] first */

 Color Processing Parameter */

 Max A/D range */

 Enable AEC mode changing */

 Change AEC mode */

 Disable AEC mode changing */

	/* These next two registers (0x4a, 0x4b) are undocumented.

 This reduces noise a bit */

 Do 50-53 have any effect? */

 Toggle 0x12[2] off and on here? */

 Reset */

 Gain */

 Blue gain */

 Red gain */

 Saturation */

 Contrast */

 Brightness */

 Sharpness */

 Was 0x20, bit7 enables a 2x gain which we need */

 Pixel clock = fastest */

 Enable AGC and AWB */

 Crystal circuit power level */

 Increase AEC black ratio */

 BLC enable */

 60 Hz power */

 60 Hz power */

 Enable auto-brightness */

 White bal */

 White bal */

 White bal */

 U = 0.563u, V = 0.714v */

 UV avg., col. killer: max */

 Max AGC gain: 18dB */

 AGC dark current comp.: +1 */

 AWB chrominance levels */

 Toggle AWB */

/* Lawrence Glaister <lg@jfm.bc.ca> reports:

 *

 * Register 0x0f in the 7610 has the following effects:

 *

 * 0x85 (AEC method 1): Best overall, good contrast range

 * 0x45 (AEC method 2): Very overexposed

 * 0xa5 (spec sheet default): Ok, but the black level is

 *	shifted resulting in loss of contrast

 * 0x05 (old driver setting): very overexposed, too much

 *	contrast

 0c */

 lg's setting */

 reset */

 gain */

 blue gain */

 red gain */

 OV7670_R03_VREF */

 Was 0x20, bit1 enables a 2x gain which we need */

 7640 and 7648. The defaults should be OK for most registers. */

 Turn off suspend mode */

 0x9f enables the (unused) microcontroller */

 bit2 (jpeg enable) */

 a2-a5 are undocumented */

 SetUsbInit */

 4.096 Mhz audio clock */

 Enable both fields, YUV Input, disable defect comp (why?) */

 0x0d does U <-> V swap */

 undocumented */

 undocumented */

 I2C timeout counter */

 I2C clock prescaler */

 DM_LNL */

 DM_LNH */

 BD50ST */

 BD60ST */

 RSVD */

 PSHFT */

 RSVD */

 CHLF */

 ARBLM */

 RSVD */

 RSVD */

 ADC */

 OFON */

 DBLV */

 RSVD */

 HV */

 RSVD.. */

 RSVD */

 DSPC2 */

 matrix */

 matrix sign */

 RSVD */

 gamma curve */

 gamma curve */

 LCC1 */

 LCC2 */

 LCC3 */

 LCC4 */

 LCC5 */

 RSVD.. */

/* 7670. Defaults taken from OmniVision provided data,

 OV */

 VGA */

/*

 * Set the hardware window.  These values from OV don't entirely

 * make sense - hstop is less than hstart.  But they work...

 Mystery scaling numbers */

	{ OV7670_R15_COM10, 0x0 }, */

 Gamma curve values */

/* AGC and AEC parameters.  Note we start by disabling those features,

 magic reserved bit */

 4x gain + magic rsvd bit */

 magic */

 Almost all of these are magic "reserved" values.  */

 More reserved magic, some of which tweaks white balance */

 "9e for advance AWB" */

 Matrix coefficients */

 was 3 */

 Extra-weird stuff.  Some sort of multiplexor register */

 was 0x10, new from windrv 090403 */

 was 0x80, new from windrv 090403 */

 Lin and Win think different about UV order */

 was 0x2f, new from windrv 090403 */

 was 0xcf, new from windrv 090403 */

 was 0x06, new from windrv 090403 */

 was 0x90, new from windrv 090403 */

 was 0x00, new from windrv 090403 */

 was 0x1d, new from windrv 090403 */

 was 0x57, new from windrv 090403 */

 was 0xcc, new from windrv 090403 */

 was 0xd5, new from windrv 090403 */

 was 0x01, new from windrv 090403 */

 was 0x10, new from windrv 090403 */

 was 0x01, new from windrv 090403 */

 was 0x09, new from windrv 090403 */

 was 0xd7, new from windrv 090403 */

	{ 0x64, 0x53 }, /* new windrv 090403 says 0x57,

 was 0xaf, new from windrv 090403 */

	{ 0x6c, 0x99 }, /* was 0x80, old windrv says 0x00, but

 was 0x00, new from windrv 090403 */

 was 0x00, new from windrv 090403 */

 0x60? - was 0x00, new from windrv 090403 */

 was 0x02, new from windrv 090403 */

 was 0x13, new from windrv 090403 */

 was 0x09, new from windrv 090403 */

 was 0xc0, new from windrv 090403 */

 was 0x61, new from windrv 090403 */

 was 0x24, new from windrv 090403 */

 Write a OV519 register */

 Avoid things going to fast for the bridge with a xhci host */

 Read from a OV519 register, note not valid for the w9968cf!! */

 returns: negative is error, pos or zero is data */

 Avoid things going to fast for the bridge with a xhci host */

		/*

		 * Make sure the result is zeroed to avoid uninitialized

		 * values.

 Read 8 values from a OV519 register */

 Avoid things going to fast for the bridge with a xhci host */

 REQ_IO */

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

/*

 * Writes bits at positions specified by mask to an OV51x reg. Bits that are in

 * the same position as 1's in "mask" are cleared and set to "value". Bits

 * that are in the same position as 0's in "mask" are preserved, regardless

 * of their respective state in "value".

 Enforce mask on value */

 Clear the masked bits */

 Set the desired bits */

/*

 * Writes multiple (n) byte value to a single register. Only valid with certain

 * registers (0x30 and 0xc4 - 0xce).

 Avoid things going to fast for the bridge with a xhci host */

 REG_IO */,

 Three byte write cycle */

 Select camera register */

 Write "value" to I2C data port of OV511 */

 Initiate 3-byte write cycle */

 Retry until idle */

 Ack? */

 Two byte write cycle */

 Select camera register */

 Initiate 2-byte write cycle */

 Retry until idle */

 Ack? */

 I2C abort */

 Two byte read cycle */

 Initiate 2-byte read cycle */

 Retry until idle */

 Ack? */

 I2C abort */

 This is needed to make i2c_w() work */

/*

 * The OV518 I2C I/O procedure is different, hence, this function.

 * This is normally only called from i2c_w(). Note that this function

 * always succeeds regardless of whether the sensor is present and working.

 Select camera register */

 Write "value" to I2C data port of OV511 */

 Initiate 3-byte write cycle */

 wait for write complete */

/*

 * returns: negative is error, pos or zero is data

 *

 * The OV518 I2C I/O procedure is different, hence, this function.

 * This is normally only called from i2c_r(). Note that this function

 * always succeeds regardless of whether the sensor is present and working.

 Select camera register */

 Initiate 2-byte write cycle */

 Initiate 2-byte read cycle */

 Up on sensor reset empty the register cache */

/* Writes bits at positions specified by mask to an I2C reg. Bits that are in

 * the same position as 1's in "mask" are cleared and set to "value". Bits

 * that are in the same position as 0's in "mask" are preserved, regardless

 * of their respective state in "value".

 Enforce mask on value */

 Clear the masked bits */

 Set the desired bits */

/* Temporarily stops OV511 from functioning. Must do this before changing

 FRAR */

 stop USB transfer */

/* Restarts OV511 after ov511_stop() is called. Has no effect if it is not

 Reinitialize the stream */

 FRAR */

 USB FIFO enable */

/* This does an initial reset of an OmniVision sensor and ensures that I2C

 * is synchronized. Returns <0 on failure.

 Reset the sensor */

 Wait for it to initialize */

 Reset the sensor */

 Wait for it to initialize */

 Dummy read to sync I2C */

/* Set the read and write slave IDs. The "slave" argument is the write slave,

 * and the read slave will be set to (slave + 1).

 * This should not be called from outside the i2c I/O functions.

 * Sets I2C read and write slave IDs. Returns <0 for error

/****************************************************************************

 *

 * OV511 and sensor configuration

 *

 This initializes the OV2x10 / OV3610 / OV3620 / OV9600 */

 Detect sensor (sub)type */

 info("%x, %x", high, low); */

/* This initializes the OV8110, OV8610 sensor. The OV8110 uses

 * the same register settings as the OV8610, since they are very similar.

 Detect sensor (sub)type */

/* This initializes the OV7610, OV7620, or OV76BE sensor. The OV76BE uses

 * the same register settings as the OV7610, since they are very similar.

 Detect sensor (sub)type */

	/* add OV7670 here

 quick hack to make OV7670s work */

 info("%x, %x", high, low); */

 I don't know what's different about the 76BE yet. */

 try to read product id registers */

 FIXME */

 FIXME */

 This initializes the OV6620, OV6630, OV6630AE, or OV6630AF sensor. */

 Detect sensor (sub)type */

	/* Ugh. The first two bits are the version bits, but

	 * the entire register value must be used. I guess OVT

 Set sensor-specific vars */

 Turns on or off the LED. Only has an effect with OV511+/OV518(+)/OV519 */

 OV511 has no LED control */

	/* Note it is important that we clear sd->snapshot_needs_reset,

	   before actually clearing the snapshot state in the bridge

 Reset */

 Enable */

 OV518 quantization tables are 8x4 (instead of 8x8) */

 This initializes the OV511/OV511+ and the sensor */

 For 511 and 511+ */

 Init compression */

 This initializes the OV518/OV518+ and the sensor */

 For 518 and 518+ */

 Reset */

 Enable */

 Reset */

 Enable */

 First 5 bits of custom ID reg are a revision ID on OV518 */

 Set LED GPIO pin to output mode */

 EnableSystem */

 don't enable the microcontroller */

 set bit2 to enable jpeg */

		/* Set LED pin to output mode. Bit 4 must be cleared or sensor

 windows reads 0x55 at this point*/

 set the mode */

 This function works for ov7660 only */

		{0x33, 0x00}, */

		{0x34, 0x07}, */

		{0x36, 0x00}, */

		{0x6b, 0x0a}, */

 set the frame rate */

 This function works for sensors ov7640, ov7648 ov7660 and ov7670 only */

	/* frame rate table with indices:

	 *	- mode = 0: 320x240, 1: 640x480

	 *	- fr rate = 0: 30, 1: 25, 2: 20, 3: 15, 4: 10, 5: 5

	 *	- reg = 0: bridge a4, 1: bridge 23, 2: sensor 11 (clock)

 enable double clock */

 this function is called at probe time */

 this function is called at probe and resume time */

	/* The OV519 must be more aggressive about sensor detection since

	 * I2C write will never fail if the sensor is not present. We have

 Test for 76xx */

 Test for 6xx0 */

 Test for 8xx0 */

 Test for 3xxx / 2xxx */

 turn LED off */

 w9968cf needs initialisation once the sensor is known */

 initialize the sensor */

 Enable autogain, autoexpo, awb, bandfilter */

 enable autoexpo */

 Enable autogain, autoexpo, awb, bandfilter */

	case SEN_OV7610: */

	case SEN_OV76BE: */

 640x480 */

 not in win traces */

 enable autoexpo */

		i2c_w_mask(sd, 0x13, 0x05, 0x05); */

 function called at start time before URB creation */

/* Set up the OV511/OV511+ with the given image parameters.

 *

 * Do not put any sensor-specific code in here (including I2C I/O functions)

	/* Here I'm assuming that snapshot size == image size.

	 * I hope that's always true. --claudio

 YUV420, low pass filter on */

 Snapshot additions */

******* Set the framerate ********/

 No framerate control, doesn't like higher rates yet */

	/* Note once the FIXME's in mode_init_ov_sensor_regs() are fixed

 Not enough bandwidth to do 640x480 @ 30 fps */

 For 640x480 case */

		case 20: */

		case 15: */

 Higher then 10 does not work */

 No framerate control ?? */

 Check if we have enough bandwidth to disable compression */

 1000 isoc packets/sec */

 Enable Y and UV quantization and compression */

/* Sets up the OV518/OV518+ with the given image parameters

 *

 * OV518 needs a completely different approach, until we can figure out what

 * the individual registers do. Also, only 15 FPS is supported now.

 *

 * Do not put any sensor-specific code in here (including I2C I/O functions)

******* Set the mode ********/

 Set 8-bit (YVYU) input format */

 Set 12-bit (4:2:0) output format */

 Windows driver does this here; who knows why */

******* Set the framerate ********/

 Mode independent, but framerate dependent, regs */

 0x51: Clock divider; Only works on some cams which use 2 crystals */

			/*

			 * HdG: 640x480 needs special handling on device

			 * revision 2, we check for device revision > 0 to

			 * avoid regressions, as we don't know the correct

			 * thing todo for revision 1.

			 *

			 * Also this likely means we don't need to

			 * differentiate between the OV7620 and OV7620AE,

			 * earlier testing hitting this same problem likely

			 * happened to be with revision < 2 cams using an

			 * OV7620 and revision 2 cams using an OV7620AE.

 Compression-related? */

 FIXME: Sensor-specific */

 Bit 5 is what matters here. Of course, it is "reserved" */

 190h   */

 21ch   */

 21ch   */

 6ch    */

 2001ah */

 214h   */

 960h   */

 20h    */

 260h   */

 190h   */

 17dh   */

 17dh   */

 80h    */

 2cc23h */

 2eah   */

 6d6h   */

 2dh    */

 353h   */

/* Sets up the OV519 with the given image parameters

 *

 * OV519 needs a completely different approach, until we can figure out what

 * the individual registers do.

 *

 * Do not put any sensor-specific code in here (including I2C I/O functions)

 Turn off suspend mode */

 was 9b in 1.65-1.08 */

 bit2 (jpeg enable) */

 a2-a5 are undocumented */

 SetUsbInit */

 4.096 Mhz audio clock */

 Enable both fields, YUV Input, disable defect comp (why?) */

 undocumented */

 undocumented */

 I2C timeout counter */

 I2C clock prescaler */

 new from windrv 090403 */

 undocumented */

 windows reads 0x55 at this point, why? */

 Turn off suspend mode */

 was 9b in 1.65-1.08 */

 bit2 (jpeg enable) */

 a2-a5 are undocumented */

 SetUsbInit */

 4.096 Mhz audio clock */

 Enable both fields, YUV Input, disable defect comp (why?) */

 undocumented */

 undocumented */

 I2C timeout counter */

 I2C clock prescaler */

 new from windrv 090403 */

 undocumented */

 windows reads 0x55 at this point, why? */

******* Set the mode ********/

 Select 8-bit input mode */

 done by ov519_set_mode/fr() */

 YUV422 */

 Undocumented */

******* Set the framerate ********/

 FIXME: These are only valid at the max resolution. */

		case 30: */

 15 fps */

		case 15: */

 guesses, based on 7640 */

		case 15: */

******* Mode (VGA/QVGA) and sensor specific regs ********/

		/* frame rates:

		 *	10fps / 5 fps for 1600x1200

		 *	40fps / 20fps for 800x600

		/* Writing to the COMH register resets the other windowing regs

 For OV8610 qvga means qsvga */

 Select 16 bit data bus */

 AWB: 1 Test pattern: 0 */

 from windrv 090403 */

 progressive mode on */

 Select 16 bit data bus */

 AWB: 1 Test pattern: 0 */

 Select 16 bit data bus */

 AWB: 1 Test pattern: 0 */

		/* Setting this undocumented bit in qvga mode removes a very

 Unknown */

 Allow higher automatic gain (to allow higher framerates) */

 AWB: 1 */

		/* set COM7_FMT_VGA or COM7_FMT_QVGA

		 * do we need to set anything else?

 Select 16 bit data bus */

		if (qvga) {		/* QVGA from ov7670.c by

 VGA */

		/* OV7670 hardware window registers are split across

		msleep(10);	/* need to sleep between read and write to

		msleep(10);	/* need to sleep between read and write to

 Select 16 bit data bus */

 AWB: 1 Test pattern: 0 */

 AWB: 1 Test pattern: 0 */

		/* frame rates:

		 *	15fps / 7.5 fps for 1280x1024

		 *	30fps / 15fps for 640x480

******* Clock programming ********/

 this function works for bridge ov519 and sensors ov7660 and ov7670 only */

 block stream */

 restart stream */

 mode setup is fully handled in mode_init_ov_sensor_regs for these */

	/* The different sensor ICs handle setting up of window differently.

 HDG: this fixes U and V getting swapped */

 From 7620.SET (spec is wrong) */

 QCIF */

 CIF */

			vwscale = 1;	/* The datasheet says 0;

 QSVGA */

 SVGA */

 SEN_OV7xx0 */

 QVGA */

 VGA */

 -- start the camera -- */

 Default for most bridges, allow bridge_mode_init_regs to override */

 case BRIDGE_OVFX2: nothing to do */

	/* Force clear snapshot state in case the snapshot button was

 If the last button state is pressed, release it now! */

		/* On the ov511 / ov519 we need to reset the button state

		   multiple times, as resetting does not work as long as the

 isoc packet */

 iso packet length */

	/* SOF/EOF packets have 1st to 8th bytes zeroed and the 9th

	 * byte non-zero. The EOF packet has image width/height in the

	 * 10th and 11th bytes. The 9th byte is given as follows:

	 *

	 * bit 7: EOF

	 *     6: compression enabled

	 *     5: 422/420/400 modes

	 *     4: 422/420/400 modes

	 *     3: 1

	 *     2: snapshot button on

	 *     1: snapshot frame

	 *     0: even/odd field

 Frame end */

 Add 11 byte footer to frame, might be useful */

 Frame start */

 Ignore the packet number */

 intermediate packet */

 isoc packet */

 iso packet length */

	/* A false positive here is likely, until OVT gives me

 Does this device use packet numbers ? */

		/* The last few packets of the frame (which are all 0's

		   except that they may contain part of the footer), are

 intermediate packet */

 isoc packet */

 iso packet length */

	/* Header of ov519 is 16 bytes:

	 *     Byte     Value      Description

	 *	0	0xff	magic

	 *	1	0xff	magic

	 *	2	0xff	magic

	 *	3	0xXX	0x50 = SOF, 0x51 = EOF

	 *	9	0xXX	0x01 initial frame without data,

	 *			0x00 standard frame with image

	 *	14	Lo	in EOF: length of image data / 8

	 *	15	Hi

 start of frame */

			/* Don't check the button state here, as the state

			   usually (always ?) changes at EOF and checking it

 end of frame */

 intermediate packet */

 isoc packet */

 iso packet length */

 A short read signals EOF */

		/* If the frame is short, and it is one of the first ones

 isoc packet */

 iso packet length */

 -- management routines -- */

/*win trace

 Use Y gamma control instead. Bit 0 enables it. */

 Use Y gamma control instead. Bit 0 enables it. */

 check that this isn't just the same as ov7610 */

 Use UV gamma control instead. Bits 0 & 7 are reserved. */

/*		rc = ov_i2c_write(sd->dev, 0x62, (val >> 9) & 0x7e);

		if (rc < 0)

		/* supported later once I work out how to do it

 set REG_COM13 values for UV sat auto mode */

 Banding filter disabled */

 50 hz */

 60 hz */

 Auto hz - ov7670 only */

 Banding filter disabled */

 50 hz (filter on and framerate adj) */

 20 fps -> 16.667 fps */

 60 hz (filter on, ...) */

 20 fps -> 15 fps */

 no framerate adj. */

 Ugly but necessary */

 Should never happen, as we grab the ctrl */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Pixart PAC7302 driver

 *

 * Copyright (C) 2008-2012 Jean-Francois Moine <http://moinejf.free.fr>

 * Copyright (C) 2005 Thomas Kaiser thomas@kaiser-linux.li

 *

 * Separated from Pixart PAC7311 library by Márton Németh

 * Camera button input handling by Márton Németh <nm127@freemail.hu>

 * Copyright (C) 2009-2010 Márton Németh <nm127@freemail.hu>

/*

 * Some documentation about various registers as determined by trial and error.

 *

 * Register page 0:

 *

 * Address	Description

 * 0x01		Red balance control

 * 0x02		Green balance control

 * 0x03		Blue balance control

 *		     The Windows driver uses a quadratic approach to map

 *		     the settable values (0-200) on register values:

 *		     min=0x20, default=0x40, max=0x80

 * 0x0f-0x20	Color and saturation control

 * 0xa2-0xab	Brightness, contrast and gamma control

 * 0xb6		Sharpness control (bits 0-4)

 *

 * Register page 1:

 *

 * Address	Description

 * 0x78		Global control, bit 6 controls the LED (inverted)

 * 0x80		Compression balance, 2 interesting settings:

 *		0x0f Default

 *		0x50 Values >= this switch the camera to a lower compression,

 *		     using the same table for both luminance and chrominance.

 *		     This gives a sharper picture. Only usable when running

 *		     at < 15 fps! Note currently the driver does not use this

 *		     as the quality gain is small and the generated JPG-s are

 *		     only understood by v4l-utils >= 0.8.9

 *

 * Register page 3:

 *

 * Address	Description

 * 0x02		Clock divider 3-63, fps = 90 / val. Must be a multiple of 3 on

 *		the 7302, so one of 3, 6, 9, ..., except when between 6 and 12?

 * 0x03		Variable framerate ctrl reg2==3: 0 -> ~30 fps, 255 -> ~22fps

 * 0x04		Another var framerate ctrl reg2==3, reg3==0: 0 -> ~30 fps,

 *		63 -> ~27 fps, the 2 msb's must always be 1 !!

 * 0x05		Another var framerate ctrl reg2==3, reg3==0, reg4==0xc0:

 *		1 -> ~30 fps, 2 -> ~20 fps

 * 0x0e		Exposure bits 0-7, 0-448, 0 = use full frame time

 * 0x0f		Exposure bit 8, 0-448, 448 = no exposure at all

 * 0x10		Gain 0-31

 * 0x12		Another gain 0-31, unlike 0x10 this one seems to start with an

 *		amplification value of 1 rather then 0 at its lowest setting

 * 0x21		Bitfield: 0-1 unused, 2-3 vflip/hflip, 4-5 unknown, 6-7 unused

 * 0x80		Another framerate control, best left at 1, moving it from 1 to

 *		2 causes the framerate to become 3/4th of what it was, and

 *		also seems to cause pixel averaging, resulting in an effective

 *		resolution of 320x240 and thus a much blockier image

 *

 * The registers are accessed in the following functions:

 *

 * Page | Register   | Function

 * -----+------------+---------------------------------------------------

 *  0   | 0x01       | setredbalance()

 *  0   | 0x03       | setbluebalance()

 *  0   | 0x0f..0x20 | setcolors()

 *  0   | 0xa2..0xab | setbrightcont()

 *  0   | 0xb6       | setsharpness()

 *  0   | 0xc6       | setwhitebalance()

 *  0   | 0xdc       | setbrightcont(), setcolors()

 *  3   | 0x02       | setexposure()

 *  3   | 0x10, 0x12 | setgain()

 *  3   | 0x11       | setcolors(), setgain(), setexposure(), sethvflip()

 *  3   | 0x21       | sethvflip()

 Include pac common sof detection functions */

 33 ms / 30 fps */

 66 ms / 15 fps */

moinejf.free.fr>, Thomas Kaiser thomas@kaiser-linux.li");

 !! must be the first item */

 brightness / contrast cluster */

 flip cluster */

 mirrored by default */

 vertical flipped by default */

	index,value */

 page 1 */

 deactivate */

 led off */

	index, len, [value]* */

 page 0 */

 page 1 */

 page 2 */

 page 3 */

 load the page 3 */

 page 2 */

 page 1 */

 end of sequence */

 page 3 - the value SKIP says skip the index - see reg_w_page() */

 request */

 value */

 request */

 load the beginning of a page */

 skip this index */

 request */

 output a variable sequence */

 not reached */

 this function is called at probe time for pac7302 */

 only 640x480 */

 page 0 */

 200 ? */

 page 3 */

 page 0 */

 page 0 */

 precision factor */

 Normed value [0...k] */

 Qudratic apporach improves control at small (register) values: */

	/* Y = 64*X*X + 32*X + 32

	/* NOTE: for full value range (0x00-0xff) use

	 *         Y = 254*X*X + X

 page 0 */

 page 0 */

 page 3 */

 load registers to sensor (Bit 0, auto clear) */

	/*

	 * Register 2 of frame 3 contains the clock divider configuring the

	 * no fps according to the formula: 90 / reg. sd->exposure is the

	 * desired exposure time in 0.5 ms.

	/*

	 * Note clockdiv = 3 also works, but when running at 30 fps, depending

	 * on the scene being recorded, the camera switches to another

	 * quantization table for certain JPEG blocks, and we don't know how

	 * to decompress these blocks. So we cap the framerate at 15 fps.

	/*

	 * Register 2 MUST be a multiple of 3, except when between 6 and 12?

	 * Always round up, otherwise we cannot get the desired frametime

	 * using the partial frame time exposure control.

	/*

	 * frame exposure time in ms = 1000 * clockdiv / 90    ->

	 * exposure = (sd->exposure / 2) * 448 / (1000 * clockdiv / 90)

 0 = use full frametime, 448 = no exposure, reverse it */

 page 3 */

 load registers to sensor (Bit 0, auto clear) */

 page 3 */

 load registers to sensor (Bit 0, auto clear) */

 page 0 */

 this function is called at probe and resume time for pac7302 */

		/* when switching to autogain set defaults to make sure

		   we are on a valid point of the autogain gain /

		   exposure knee graph, and give this change time to

 this function is called at probe time */

 -- start the camera -- */

 start stream */

 stop stream */

 called on streamoff with alt 0 and on disconnect for pac7302 */

 JPEG header */

 SOI: Start of Image */

 SOF0: Start of Frame (Baseline DCT) */

 length = 17 bytes (including this length field) */

 Precision: 8 */

 height = 640 (image rotated) */

 width = 480 */

 Number of image components: 3 */

 ID=1, Subsampling 1x1, Quantization table: 0 */

 ID=2, Subsampling 2x1, Quantization table: 1 */

 ID=3, Subsampling 2x1, Quantization table: 1 */

 SOS: Start Of Scan */

 length = 12 bytes (including this length field) */

 number of components: 3 */

 selector 1, table 0x00 */

 selector 2, table 0x11 */

 selector 3, table 0x11 */

 Spectral selection: 0 .. 63 */

 Successive approximation: 0 */

 this function is run at interrupt level */

 isoc packet */

 iso packet length */

		/*

		 * 6 bytes after the FF D9 EOF marker a number of lumination

		 * bytes are send corresponding to different parts of the

		 * image, the 14th and 15th byte after the EOF seem to

		 * correspond to the center of the image.

 Finish decoding current frame */

 Get average lumination */

 Start the new frame with the jpeg header */

 The PAC7302 has the image rotated 90 degrees */

	/*

	 * reg->reg: bit0..15: reserved for register index (wIndex is 16bit

	 *		       long on the USB bus)

 Currently writing to page 0 is only supported. */

 reg_w() only supports 8bit index */

		/*

		 * Note that there shall be no access to other page

		 * by any other function between the page switch and

		 * the actual register write.

 page 0 */

 interrupt packet data */

 interrupt packet length */

 sub-driver description for pac7302 */

 -- module initialisation -- */

 SpeedLink Snappy Mic SL-6825-SBK */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPCA505 chip based cameras initialization data

 *

 * V4L2 by Jean-Francis Moine <http://moinejf.free.fr>

 specific webcam descriptor */

 !! must be the first item */

 spca505 501 */

 spca505 */

 spca505 */

 spca505 */

 Global control device ID select spca505 */

 Global control miscellaneous 0 spca505 */

 505 */

 505 */

 Not sure about this one spca505 */

 Image format and compression control */

/*

 * Data to initialize a SPCA505. Common to the CCD and external modes

 bmRequest,value,index */

 Sensor reset */

 Block USB reset */

 Maybe power down some stuff */

 Setup internal CCD  ? */

/*

 * Data to initialize the camera using the internal CCD

 bmRequest,value,index */

 Internal CCD data set */

 This could be a reset */

	/* Setup compression and image registers. 0x6 and 0x7 seem to be

 DIFF(0x50), was (0x10) */

 DIFF (0x4a), was (0xa) */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF not written */

 DIFF (0x3,0x28,0x3) */

 DIFF not written */

 DIFF (0x39) */

 Extra block copied from init to hopefully ensure CCD is in a sane state */

 End of extra block */

 Block skipped */

 */

 4 was 0 */

  */

  */

 */

 */

 */

 Compress = OFF (0x1 to turn on) */

 was 5 (Image Type ? ) */

 */

/*

 * Made by Tomasz Zablocki (skalamandra@poczta.onet.pl)

 * SPCA505b chip based cameras initialization data

 jfm */

 0x0(white)-0xff(black) */

0x0(white)-0xff(black) */

/*

 * Data to initialize a SPCA505. Common to the CCD and external modes

 start */

 init */

/*

 * Data to initialize the camera using the internal CCD

 {0x02,0x00,0x00}, */

 rst */

 same as 505 */

 max exposure off (0=on) */

 contrast */

 maybe saturation (4d) */

 making green (84) */

 sharpness (1) */

 maybe hue (18) */

 maybe contrast (18) */

 compression */

 imagetype (1d) */

 hardware snapcontrol */

 returns: negative is error, pos or zero is data */

 bRequest */

 wIndex */

 value */

 timeout */

 this function is called at probe time */

 no 640x480 for IntelPCCameraPro */

 this function is called at probe and resume time */

	  r00   r06   r07	*/

 640x480 */

 352x288 */

 320x240 */

 176x144 */

 160x120 */

	/* necessary because without it we can see stream

 stopping usb registers Tomasz change */

 Disable ISO packet machine */

 called on streamoff with alt 0 and on disconnect */

 This maybe reset or power control */

 isoc packet */

 iso packet length */

 start of frame */

 drop */

 sub-driver description */

 -- module initialisation -- */

fixme: may be UsbGrabberPV321 BRIDGE_SPCA506 SENSOR_SAA7113 */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * spca1528 subdriver

 *

 * Copyright (C) 2010-2011 Jean-Francois Moine (http://moinejf.free.fr)

moinejf.free.fr>");

 specific webcam descriptor */

 !! must be the first item */

/*		(does not work correctly)

	{176, 144, V4L2_PIX_FMT_JPEG, V4L2_FIELD_NONE,

		.bytesperline = 176,

		.sizeimage = 176 * 144 * 5 / 8 + 590,

		.colorspace = V4L2_COLORSPACE_JPEG,

		.priv = 3},

 read <len> bytes to gspca usb_buf */

 value */

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

 this function is called at probe time */

 number of packets per ISOC message */

fixme: 256 in ms-win traces*/

 this function is called at probe and resume time */

 function called at start time before URB creation */

 420 */

/* not useful..

 -- start the camera -- */

 initialize the JPEG header */

 JPEG 411 */

 the JPEG quality shall be 85% */

 start the capture */

 start request */

 stop the capture */

 stop request */

 move a packet adding 0x00 after 0xff */

 isoc packet */

 iso packet length */

	/* image packets start with:

	 *	02 8n

	 * with <n> bit:

	 *	0x01: even (0) / odd (1) image

	 *	0x02: end of image when set

 empty packet */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 the video interface for isochronous transfer is 1 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *		sonix sn9c102 (bayer) library

 *

 * Copyright (C) 2009-2011 Jean-François Moine <http://moinejf.free.fr>

 * Copyright (C) 2003 2004 Michel Xhaard mxhaard@magic.fr

 * Add Pas106 Stefano Mozzi (C) 2004

/* Some documentation on known sonixb registers:



Reg	Use

sn9c101 / sn9c102:

0x10	high nibble red gain low nibble blue gain

0x11	low nibble green gain

sn9c103:

0x05	red gain 0-127

0x06	blue gain 0-127

0x07	green gain 0-127

all:

0x08-0x0f i2c / 3wire registers

0x12	hstart

0x13	vstart

0x15	hsize (hsize = register-value * 16)

0x16	vsize (vsize = register-value * 16)

0x17	bit 0 toggle compression quality (according to sn9c102 driver)

0x18	bit 7 enables compression, bit 4-5 set image down scaling:

	00 scale 1, 01 scale 1/2, 10, scale 1/4

0x19	high-nibble is sensor clock divider, changes exposure on sensors which

	use a clock generated by the bridge. Some sensors have their own clock.

0x1c	auto_exposure area (for avg_lum) startx (startx = register-value * 32)

0x1d	auto_exposure area (for avg_lum) starty (starty = register-value * 32)

0x1e	auto_exposure area (for avg_lum) stopx (hsize = (0x1e - 0x1c) * 32)

0x1f	auto_exposure area (for avg_lum) stopy (vsize = (0x1f - 0x1d) * 32)

moinejf.free.fr>");

 specific webcam descriptor */

 !! must be the first item */

 Header without sof marker */

 Type of bridge */

 We make no difference between 101 and 102 */

 Type of image sensor chip */

 sensor_data flags */

 sif or vga */

 priv field of struct v4l2_pix_format flags (do not use low nibble!) */

 raw bayer mode */

 vga mode (320x240 / 160x120) on sif cam */

0x07 */

0x09 */

fixme: Bayer - 0x50 for JPEG ??*/

/* We calculate the autogain at the end of the transfer of a frame, at this

   moment a frame with the old settings is being captured and transmitted. So

   if we adjust the gain or exposure we must ignore at least the next frame for

 reset level */

 pixel bias volt */

	/* Bright, contrast, etc are set through SCBB interface.

 Anyway, some registers appears to alter bright and constrat */

 Reset sensor */

 Set clock register 0x11 low nibble is clock divider */

 Next some unknown stuff */

/*	{0xa0, 0x60, 0x1b, 0x01, 0x02, 0x18, 0xc1, 0x10},

		 * THIS SET GREEN SCREEN

		 * (pixels could be innverted in decode kind of "brg",

 format out? */

 Enable rgb brightness control */

	/* HDG: Note windows uses the line below, which sets both register 0x60

	   and 0x61 I believe these registers of the ov6650 are identical as

	   those of the ov7630, because if this is true the windows settings

	   add a bit additional red gain and a lot additional blue gain, which

	   matches my findings that the windows settings make blue much too

	   blue and red a little too red.

 Some more unknown stuff */

 Clipreg */

 r01 .. r08 */

 r09 .. r10 */

 r11 .. r14 */

 H & V sizes     r15 .. r16 */

 r17 .. r19 */

	{0xd0, 0x21, 0x12, 0x7c, 0x01, 0x80, 0x34, 0x10},	   jfm */

 jfm */

	{0xb0, 0x21, 0x60, 0xa9, 0x42, 0xa0, 0x30, 0x10},	 * jfm */

 compression 0x86 mckinit1 0x2b */

/* "Known" PAS106B registers:

  0x02 clock divider

  0x03 Variable framerate bits 4-11

  0x04 Var framerate bits 0-3, one must leave the 4 msb's at 0 !!

       The variable framerate control must never be set lower then 300,

       which sets the framerate at 90 / reg02, otherwise vsync is lost.

  0x05 Shutter Time Line Offset, this can be used as an exposure control:

       0 = use full frame time, 255 = no exposure at all

       Note this may never be larger then "var-framerate control" / 2 - 2.

       When var-framerate control is < 514, no exposure is reached at the max

       allowed value for the framerate control value, rather then at 255.

  0x06 Shutter Time Pixel Offset, like reg05 this influences exposure, but

       only a very little bit, leave at 0xcd

  0x07 offset sign bit (bit0 1 > negative offset)

  0x08 offset

  0x09 Blue Gain

  0x0a Green1 Gain

  0x0b Green2 Gain

  0x0c Red Gain

  0x0e Global gain

  0x13 Write 1 to commit settings to sensor

 Pixel Clock Divider 6 */

 Frame Time MSB (also seen as 0x12) */

 Frame Time LSB (also seen as 0x05) */

 Shutter Time Line Offset (also seen as 0x6d) */

 Shutter Time Pixel Offset (also seen as 0xb1) */

 Black Level Subtract Sign (also seen 0x00) */

 Black Level Subtract Level (also seen 0x01) */

 Color Gain B Pixel 5 a */

 Color Gain G1 Pixel 1 5 */

 Color Gain G2 Pixel 1 0 5 */

 Color Gain R Pixel 3 1 */

 Color GainH  Pixel */

 Global Gain */

 Contrast */

 H&V synchro polarity */

 ?default */

 DAC scale */

 ?default */

 Validate Settings */

/* "Known" PAS202BCB registers:

  0x02 clock divider

  0x04 Variable framerate bits 6-11 (*)

  0x05 Var framerate  bits 0-5, one must leave the 2 msb's at 0 !!

  0x07 Blue Gain

  0x08 Green Gain

  0x09 Red Gain

  0x0b offset sign bit (bit0 1 > negative offset)

  0x0c offset

  0x0e Unknown image is slightly brighter when bit 0 is 0, if reg0f is 0 too,

       leave at 1 otherwise we get a jump in our exposure control

  0x0f Exposure 0-255, 0 = use full frame time, 255 = no exposure at all

  0x10 Master gain 0 - 31

  0x11 write 1 to apply changes

  (*) The variable framerate control must never be set lower then 500

      which sets the framerate at 30 / reg02, otherwise vsync is lost.

	/* Set the clock divider to 4 -> 30 / 4 = 7.5 fps, we would like

	   to set it lower, but for some reason the bridge starts missing

 Same as above, except a different hstart */

 tas5110c is 3 wire, tas5110d is 2 wire (regular i2c) */

/* Known TAS5110D registers

 * reg02: gain, bit order reversed!! 0 == max gain, 255 == min gain

 * reg03: bit3: vflip, bit4: ~hflip, bit7: ~gainboost (~ == inverted)

 *        Note: writing reg03 seems to only work when written together with 02

 reset */

/*	{0x30, 0x11, 0x00, 0x40, 0x47, 0x00, 0x00, 0x10},

 shutter 0x01 long exposure */

 get one byte in gspca_dev->usb_buf */

 request */

 index */

		/*

		 * Make sure the result is zeroed to avoid uninitialized

		 * values.

 request */

 index */

 is i2c ready */

 change reg 0x06 */

 PAS106 uses reg 7 and 8 instead of b and c */

 change reg 0x0b, signreg */

 set reg 0x0c, offset */

 The bits in the register are the wrong way around!! */

		/*

		 * The ov7630's gain is weird, at 32 the gain drops to the

		 * same level as at 16, so skip 32-47 (of the 0-63 scale).

 PAS106 uses different regs (and has split green gains) */

 R, G, B */

 Red and blue */

 Green */

		/* Note the datasheet wrongly says line mode exposure uses reg

		/* register 19's high nibble contains the sn9c10x clock divider

		   The high nibble configures the no fps according to the

		/* The ov6650 / ov7630 have 2 registers which both influence

		   exposure, register 11, whose low nibble sets the nr off fps

		   according to: fps = 30 / (low_nibble + 1)



		   The fps configures the maximum exposure setting, but it is

		   possible to use less exposure then what the fps maximum

		   allows by setting register 10. register 10 configures the

		   actual exposure as quotient of the full exposure, with 0

		   being no exposure at all (not very useful) and reg10_max

		   being max exposure possible at that framerate.



		   The code maps our 0 - 510 ms exposure ctrl to these 2

		   registers, trying to keep fps as high as possible.

		/* ov6645 datasheet says reg10_max is 9a, but that uses

		   tline * 2 * reg10 as formula for calculating texpo, the

		   ov6650 probably uses the same formula as the 7730 which uses

		   tline * 4 * reg10, which explains why the reg10max we've

		   found experimentally for the ov6650 is exactly half that of

 OV6650 needs non default vsync pol */

		/* In 640x480, if the reg11 has less than 4, the image is

		   unstable (the bridge goes into a higher compression mode

		/* frame exposure time in ms = 1000 * reg11 / 30    ->

		reg10 = (gspca_dev->exposure->val / 2) * reg10_max

		/* Don't allow this to get below 10 when using autogain, the

		   steps become very large (relatively) when below 10 causing

		   the image to oscillate from much too dark, to much too bright

 Write reg 10 and reg11 low nibble */

 If register 11 didn't change, don't change it */

		/* The exposure knee for the autogain algorithm is 200

		   (100 ms / 10 fps on other sensors), for values below this

		   use the control for setting the partial frame expose time,

		   above that use variable framerate. This way we run at max

		   framerate (640x480@7.5 fps, 320x240@10fps) until the knee

		   is reached. Using the variable framerate control above 200

		   is better then playing around with both clockdiv + partial

		   frame exposure times (like we are doing with the ov chips),

		   as that sometimes leads to jumps in the exposure control,

			/* The PAS202's exposure control goes from 0 - 4095,

			   but anything below 500 causes vsync issues, so scale

		/* For values below 150 use partial frame exposure, above

			/* The PAS106's exposure control goes from 0 - 4095,

			   but anything below 300 causes vsync issues, so scale

		/* Framerate adjust register for artificial light 50 hz flicker

		   compensation, for the ov6650 this is identical to ov6630

		   0x2b register, see ov6630 datasheet.

		case 0:			 * no filter*/

		case 2:			 * 60 hz */

 50 hz */

	/* SIF / VGA sensors have a different autoexposure area and thus

 SIF sensors tend to overexpose, so keep this small */

 this function is called at probe time */

 copy the webcam info from the device id */

 36 packets per ISOC message */

 this function is called at probe and resume time */

 Disable stream turn of LED */

		/* when switching to autogain set defaults to make sure

		   we are on a valid point of the autogain gain /

		   exposure knee graph, and give this change time to

 this function is called at probe time */

 Gain range is sensor dependent */

 Exposure range is sensor dependent, and not all have exposure */

 -- start the camera -- */

 Copy registers 0x01 - 0x19 from the template */

 Set the mode */

 Set bridge gain to 1.0 */

 Red */

 Green */

 Blue */

 Red and blue */

 Green */

 Setup pixel numbers and auto exposure window */

 HO_SIZE 640, makes no sense */

 VO_SIZE 320, makes no sense */

 AE H-start 64 */

 AE V-start 64 */

 AE H-end 288 */

 AE V-end 224 */

 HO_SIZE 960, makes no sense */

 VO_SIZE 512, makes no sense */

 AE H-start 160 */

 AE V-start 96 */

 AE H-end 480 */

 AE V-end 384 */

 Setup the gamma table (only used with the sn9c103 bridge) */

 Special cases where some regs depend on mode or bridge */

		/* FIXME / TESTME

		   probably not mode specific at all most likely the upper

		   nibble of 0x19 is exposure (clock divider) just as with

		/* FIXME / TESTME for some reason with the 101/102 bridge the

		   clock is set to 12 Mhz (reg1 == 0x04), rather then 24.

		   Also the hstart needs to go from 1 to 2 when using a 103,

 Select 24 Mhz clock */

 Set hstart to 2 */

		/* For some unknown reason we need to increase hstart by 1 on

 Disable compression when the raw bayer format has been selected */

 Vga mode emulation on SIF sensor? */

 hstart adjust */

 vstart adjust */

 hsize */

 vsize */

 reg 0x01 bit 2 video transfert on */

 reg 0x17 SensorClk enable inv Clk 0x60 */

 Set the registers from the template */

 Init the sensor */

 Mode / bridge specific sensor setup */

 clockdiv from 4 to 3 (7.5 -> 10 fps) when in low res mode */

		/* FIXME / TESTME We should be able to handle this identical

 H_size V_size 0x28, 0x1e -> 640x480. 0x16, 0x12 -> 352x288 */

 compression register */

 H_start */

 V_START */

 reset 0x17 SensorClk enable inv Clk 0x60 */

fixme: ov7630 [17]=68 8f (+20 if 102)*/

MCKSIZE ->3 */	
 AE_STRX AE_STRY AE_ENDX AE_ENDY */

 Enable video transfert */

 Compression */

	/* frames start with:

	 *	ff ff 00 c4 c4 96	synchro

	 *	00		(unknown)

	 *	xx		(frame sequence / size / compression)

	 *	(xx)		(idem - extra byte for sn9c103)

	 *	ll mm		brightness sum inside auto exposure

	 *	ll mm		brightness sum outside auto exposure

	 *	(xx xx xx xx xx)	audio values for snc103

 isoc packet */

 iso packet length */

		/* In raw mode we sometimes get some garbage after the frame

		/* When exposure changes midway a frame we

		   get a lum of 0 in this case drop 2 frames

		   as the frames directly after an exposure

		   change have an unstable image. Sometimes lum

		   *really* is 0 (cam used in low light with

		   low exposure setting), so do not drop frames

 interrupt packet data */

 interrupt packet length */

 sub-driver description */

 -- module initialisation -- */

 TAS5110C1B */

 TAS5110C1B */

 TAS5110D */

 Genius Eye 310 */

 {USB_DEVICE(0x0c45, 0x602b), SB(MI0343, 102)}, */

 {USB_DEVICE(0x0c45, 0x6030), SB(MI03XX, 102)}, */ 
 {USB_DEVICE(0x0c45, 0x6082), SB(MI03XX, 103)}, */ 
 {USB_DEVICE(0x0c45, 0x608e), SB(CISVF10, 103)}, */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Main USB camera driver

 *

 * Copyright (C) 2008-2011 Jean-François Moine <http://moinejf.free.fr>

 *

 * Camera button input handling by Márton Németh

 * Copyright (C) 2009-2010 Márton Németh <nm127@freemail.hu>

 global values */

 default number of URBs */

moinejf.free.fr>");

 specific memory types - !! should be different from V4L2_MEMORY_xxx */

 V4L2_MEMORY_xxx starts from 1 */

/*

 * Input and interrupt endpoint handling functions

		/* Stop is requested either by software or hardware is gone,

		 * keep the ret value non-zero and don't resubmit later.

/*

 * fill a video frame from an URB and resubmit

 address of data in the iso message */

 disconnection */

 check the packet status and length */

 let the packet be analyzed by the subdriver */

 resubmit the URB */

/*

 * ISOC message interrupt from the USB device

 *

 * Analyse each packet and call the subdriver for copy to the frame buffer.

/*

 * bulk message interrupt from the USB device

 disconnection */

 resubmit the URB */

/*

 * add data to the current frame

 *

 * This function is called by the subdrivers at interrupt level.

 *

 * To build a frame, these ones must add

 *	- one FIRST_PACKET

 *	- 0 or many INTER_PACKETs

 *	- one LAST_PACKET

 * DISCARD_PACKET invalidates the whole frame.

 if there is no queued buffer, discard the whole frame */

 append the packet to the frame buffer */

/* !! image is NULL only when last pkt is LAST or DISCARD

			if (gspca_dev->image == NULL) {

				pr_err("gspca_frame_add() image == NULL\n");

				return;

			}

	/* if last packet, invalidate packet concatenation until

	 * next first packet, wake up the application and advance

	/* Killing all URBs guarantee that no URB completion

	 * handler is running. Therefore, there shouldn't

	 * be anyone trying to access gspca_dev->urb[i]

/*

 * look for an input transfer endpoint in an alternate setting.

 *

 * If xfer_ep is invalid, return the first valid ep found, otherwise

 * look for exactly the ep with address equal to xfer_ep.

 compute the minimum bandwidth for the current transfer */

 get the (max) image size */

 if the image is compressed, estimate its mean size */

 0.375 */

 estimate the frame rate */

		/* don't hope more than 15 fps with USB 1.1 and

 15 fps */

 30 fps */

 endpoint table */

/*

 * build the table of the endpoints

 * and compute the minimum bandwidth for the image transfer

 fixme: should warn */

 build the endpoint table */

	/*

	 * If the camera:

	 * has a usb audio class interface (a built in usb mic); and

	 * is a usb 1 full speed device; and

	 * uses the max full speed iso bandwidth; and

	 * and has more than 1 alt setting

	 * then skip the highest alt setting to spare bandwidth for the mic

 get the requested bandwidth and start at the highest atlsetting */

/*

 * create the URBs for image transfer

 calculate the packet size and the number of packets */

 isoc */

 See paragraph 5.9 / table 5-11 of the usb 2.0 spec. */

 default value */

 bulk */

 ISOC */

 bulk */

 Note: both the queue and the usb locks should be held when calling this */

/*

 * start the USB transfer

 reset the streaming variables */

 do the specific subdriver stuff before endpoint selection */

 if bulk or the subdriver forced an altsetting, get the endpoint */

 (previous version compatibility) */

		/* else, compute the minimum bandwidth

	/* set the highest alternate setting and

fixme: ugly*/

 clear the bulk endpoint */

 start the cam */

 some bulk transfers are started by the subdriver */

 submit the URBs */

 transfer is started */

		/* something when wrong

		/* the bandwidth is not wide enough

 wait for kill complete */

 take the highest mode */

 does nothing if ctrl_handler == NULL */

/*

 * search a mode with the right pixel format

 give an index to each format */

 new format */

 no more format */

 some drivers use priv internally, so keep the original value */

 search the nearest mode for width and height */

 OK if right palette */

 else, search the closest mode with the same pixel format */

 pass original resolution to subdriver try_fmt */

 used when s_fmt */

 some drivers use priv internally, so keep the original value */

 subdriver try_fmt can modify format parameters */

 some drivers use priv internally, so keep the original value */

 Release all active buffers */

 We use v4l2_dev.release */

/*

 * probe and create a new gspca device

 *

 * This function must be called by the sub-driver when it is

 * called for probing a new device.

 create the device */

 check if any audio device */

 don't check the empty packets */

 Initialize the vb2 queue */

 configure the subdriver and initialize the USB device */

 init video stuff */

 same function as the previous one, but check the interface */

 we don't handle multi-config cameras */

 the USB video interface must be the first one */

/*

 * USB disconnection

 *

 * This function must be called by the sub-driver

 * when the device disconnects, after the specific resources are freed.

 (this will call gspca_release() immediately or on last close) */

 avoid urb error messages */

	/*

	 * Most subdrivers send all ctrl values on sd_start and thus

	 * only write to the device registers on s_ctrl when streaming ->

	 * Clear streaming to avoid setting all ctrls twice.

 -- module insert / remove -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Subdriver for Scopium astro-camera (DTCS033, 0547:7303)

 *

 * Copyright (C) 2014 Robert Butora (robert.butora.fi@gmail.com)

 send a usb request */

 send several usb in/out requests */

 -- subdriver interface implementation -- */

 raw Bayer patterned output */

 this mode will demosaic the Bayer pattern */

 config called at probe time */

 init called at probe and resume time */

 start stop the camera */

 intercept camera image data */

 packet data */

 packet data length */

 drop incomplete frames */

 gspca.c: discard invalidates the whole frame. */

 forward complete frames */

 skip first & last 16 lines */

 -- controls: exposure and gain -- */

 gain [dB] encoding */

 exposure time [msec] encoding */

 specific webcam descriptor */

 !! must be the first item */

 exposure & gain controls */

                               min max step default */

 [msec] */

 [dB] */

 sub-driver description */

 -- module initialisation -- */

 device connect */

/* ---------------------------------------------------------

 USB requests to start/stop the camera [USB 2.0 spec Ch.9].



 bRequestType :

 0x40 =  USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,

 0xC0 =  USB_DIR_IN  | USB_TYPE_VENDOR | USB_RECIP_DEVICE,

 -- bRequest,wValue,wIndex,wLength */

 -- bRequest,wValue,wIndex,wLength */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SQ905C subdriver

 *

 * Copyright (C) 2009 Theodore Kilgore

/*

 *

 * This driver uses work done in

 * libgphoto2/camlibs/digigr8, Copyright (C) Theodore Kilgore.

 *

 * This driver has also used as a base the sq905c driver

 * and may contain code fragments from it.

 Default timeouts, in ms */

 Maximum transfer size to use. */

 Commands. These go in the "value" slot. */

 clear everything */

 Read version number */

 Starts capture at 160x120 */

 Starts capture at 320x240 */

 Starts capture at 320x240 */

 For capture, this must go in the "index" slot. */

 Structure to hold all of our device specific stuff */

 !! must be the first item */

 Driver stuff */

/*

 * Most of these cameras will do 640x480 and 320x240. 160x120 works

 * in theory but gives very poor output. Therefore, not supported.

 * The 0x2770:0x9050 cameras have max resolution of 320x240.

 Send a command to the camera. */

 request */

 request */

/*

 * This function is called as a workqueue function and runs whenever the camera

 * is streaming data. Because it is a workqueue function it is allowed to sleep

 * so we can use synchronous USB calls. To avoid possible collisions with other

 * threads attempting to use gspca_dev->usb_buf we take the usb_lock when

 * performing USB operations using it. In practice we don't really need this

 * as the camera doesn't provide any controls.

 bytes remaining in current frame. */

 size to use for the next read. */

 Request the header, which tells the size to download */

 size is read from 4 bytes starting 0x40, little endian */

 We keep the header. It has other information, too. */

 This function is called at probe time just before sd_init */

 Note we leave out the usb id and the manufacturing date */

 We don't use the buffer gspca allocates so make it small. */

 called on streamoff with alt==0 and on disconnect */

 the usb_lock is held at entry - restore on exit */

 wait for the work queue to terminate */

 This waits for sq905c_dostream to finish */

 this function is called at probe and resume time */

 connect to the camera and reset it. */

 Set up for getting frames. */

 "Open the shutter" and set size, to start capture */

 320 */

 Start the workqueue function to do the streaming */

 Table of supported USB devices */

 sub-driver description */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * USB IBM C-It Video Camera driver

 *

 * Supports Xirlink C-It Video Camera, IBM PC Camera,

 * IBM NetCamera and Veo Stingray.

 *

 * Copyright (C) 2010 Hans de Goede <hdegoede@redhat.com>

 *

 * This driver is based on earlier work of:

 *

 * (C) Copyright 1999 Johannes Erdfelt

 * (C) Copyright 1999 Randy Dunlap

 FIXME we should autodetect this */

 FIXME this should be handled through the V4L2 input selection API */

 specific webcam descriptor */

 !! must be the first item */

 bcd version 0.01 cams ie the xvp-500 */

 The model 1 - 4 nomenclature comes from the old */

 ibmcam driver */

/*

 * 01.01.08 - Added for RCA video in support -LO

 * This struct is used to init the Model3 cam to use the RCA video in port

 * instead of the CCD sensor.

/* TESTME the old ibmcam driver repeats certain commands to Model1 cameras, we

/*

 * cit_send_FF_04_02()

 *

 * This procedure sends magic 3-command prefix to the camera.

 * The purpose of this prefix is not known.

 *

 * History:

 * 1/2/00   Created.

/*

 * cit_model3_Packet1()

 *

 * 00_0078_012d

 * 00_0097_012f

 * 00_d141_0124

 * 00_0096_0127

 * 00_fea8_0124

 this function is called at probe time */

 no 160x120 */

 no 640 x 480 */

 turn on led */

 turn on autogain ? */

 this function is called at probe and resume time */

 All is done in sd_start */

 No (known) brightness control for these */

 Model 1: Brightness range 0 - 63 */

 Model 2: Brightness range 0x60 - 0xee */

 Scale 0 - 63 to 0x60 - 0xee */

 Model 3: Brightness range 'i' in [0x0C..0x3F] */

 Model 4: Brightness range 'i' in [0x04..0xb4] */

 Scale 0 - 63 to 0x04 - 0xb4 */

 gain 0-15, 0-20 -> 0-15 */

 gain 0-31, may not be lower then 0x0422, 0-20 -> 0-31 */

 gain 0-127, may not be lower then 0x0423, 0-20 -> 0-63  */

 gain 0-127, may not be lower then 0x0424, , 0-20 -> 0-127 */

 These models do not have this control. */

 Scale 0 - 20 to 15 - 0 */

 Preset hardware values */

 Minimum */

 Maximum */

 No hue control for these models */

 cit_model2_Packet1(gspca_dev, 0x0020, sat); */

 Model 3: Brightness range 'i' in [0x05..0x37] */

 TESTME according to the ibmcam driver this does not work */

 Scale 0 - 127 to 0x05 - 0x37 */

		/* HDG: taken from ibmcam, setting the color gains does not

		 * really belong here.

		 *

		 * I am not sure r/g/b_gain variables exactly control gain

		 * of those channels. Most likely they subtly change some

		 * very internal image processing settings in the camera.

		 * In any case, here is what they do, and feel free to tweak:

		 *

		 * r_gain: seriously affects red gain

		 * g_gain: seriously affects green gain

		 * b_gain: seriously affects blue gain

		 * hue: changes average color from violet (0) to red (0xFF)

 Green gain */

 Red gain */

 Blue gain */

 Hue */

 These models do not have this control */

	{	/*

		 * "Use a table of magic numbers.

		 *  This setting doesn't really change much.

		 *  But that's how Windows does it."

 Smoothest */

 Sharpest */

/*

 * cit_set_lighting()

 *

 * Camera model 1:

 * We have 3 levels of lighting conditions: 0=Bright, 1=Medium, 2=Low.

 *

 * Camera model 2:

 * We have 16 levels of lighting, 0 for bright light and up to 15 for

 * low light. But values above 5 or so are useless because camera is

 * not really capable to produce anything worth viewing at such light.

 * This setting may be altered only in certain camera state.

 *

 * Low lighting forces slower FPS.

 *

 * History:

 * 1/5/00   Created.

 * 2/20/00  Added support for Model 2 cameras.

 Go! */

 Go! */

 Clear button events from while we were not streaming */

 Calculate the clockdiv giving us max fps given the available bandwidth */

 0=30 1=25 2=20 3=15 4=12 5=7.5 6=6 7=3fps ?? */

 0=none, 7=best frame rate */

 turn on led */

 160x120 */

 176x144 */

 320x240 */

 LED On  */

 LED Off */

 LED On  */

	/* TESTME These are handled through controls

 This is default brightness */

 128x96 */

 Same everywhere */

 Same everywhere */

 176x144 */

 Same everywhere */

 Same everywhere */

 352x288 */

 Same everywhere */

 Same everywhere */

	/* TESTME These are handled through controls

 This is another brightness - don't know why */

 Default contrast */

 Default sharpness */

 Default lighting conditions */

 Assorted init */

 128x96 */

 Same everywhere */

 Same everywhere */

 Same everywhere */

 Same everywhere */

 176x144 */

 Same everywhere */

 Same everywhere */

 Same everywhere */

 Same everywhere */

 352x288 */

 Same everywhere */

 Same everywhere */

 Same everywhere */

 Same everywhere */

 LED On  */

 LED on */

 176x144 */

 All except 320x240 */

 Same */

 176x144, 352x288 */

 Unique to this mode */

 Unique to this mode */

		/* TESTME HDG: this does not seem right

 320x240 */

 Unique to this mode */

 Same */

 320x240, 352x240 */

 All except 176x144 */

 All except 176x144 */

 All except 320x240 */

 Same */

 320x240, 352x240 */

 All except 176x144 */

 All except 176x144 */

 352x288 */

 All except 320x240 */

 Same */

 176x144, 352x288 */

 All except 176x144 */

 All except 176x144 */

 LED on */

 176x144 */

 320x240 */

 352x288 */

	/*

	 * Hardware settings, may affect CMOS sensor; not user controls!

	 * -------------------------------------------------------------

	 * 0x0004: no effect

	 * 0x0006: hardware effect

	 * 0x0008: no effect

	 * 0x000a: stops video stream, probably important h/w setting

	 * 0x000c: changes color in hardware manner (not user setting)

	 * 0x0012: changes number of colors (does not affect speed)

	 * 0x002a: no effect

	 * 0x002c: hardware setting (related to scan lines)

	 * 0x002e: stops video stream, probably important h/w setting

	/*

	 * Function 0x0030 pops up all over the place. Apparently

	 * it is a hardware control register, with every bit assigned to

	 * do something.

	/*

	 * Magic control of CMOS sensor. Only lower values like

	 * 0-3 work, and picture shifts left or right. Don't change.

 176x144 */

 Horizontal shift */

 Another hardware setting */

 320x240 */

 Horizontal shift */

 Another hardware setting */

 This mode doesn't work as Windows programs it; changed to work */

 Windows sets this to 8 */

 Horizontal shift */

 Windows sets this to 0x0045 */

 352x288 */

 Horizontal shift */

 Another hardware setting */

	/* TESTME These are handled through controls

	/*

	 * We have our own frame rate setting varying from 0 (slowest) to 6

	 * (fastest). The camera model 2 allows frame rate in range [0..0x1F]

	 # where 0 is also the slowest setting. However for all practical

	 # reasons high settings make no sense because USB is not fast enough

	 # to support high FPS. Be aware that the picture datastream will be

	 # severely disrupted if you ask for frame rate faster than allowed

	 # for the video size - see below:

	 *

	 * Allowable ranges (obtained experimentally on OHCI, K6-3, 450 MHz):

	 * -----------------------------------------------------------------

	 * 176x144: [6..31]

	 * 320x240: [8..31]

	 * 352x240: [10..31]

	 * 352x288: [16..31] I have to raise lower threshold for stability...

	 *

	 * As usual, slower FPS provides better sensitivity.

	/*

	 * This setting does not visibly affect pictures; left it here

	 * because it was present in Windows USB data stream. This function

	 * does not allow arbitrary values and apparently is a bit mask, to

	 * be activated only at appropriate time. Don't change it randomly!

 176x144 */

 320x240 */

 352x288 */

 model2 cannot change the backlight compensation while streaming */

 color balance rg2 */

 saturation */

 color balance yb */

 Hardware control command */

 0=none, 7=best frame rate */

	/* HDG not in ibmcam driver, added to see if it helps with

	/* TESTME HDG not in ibmcam driver, added to see if it helps with

 Same on 160x120, 320x240 */

 Same on 160x120, 320x240 */

 Same on 160x120, 320x240 */

 Same */

 Differs everywhere */

 Same on 160x120, 320x240 */

 Same on 160x120, 640x480 */

 Same */

 Same */

 Same */

 Same */

 Same on 160x120, 320x240 */

 Same on 160x120, 320x240 */

 Same on 160x120, 320x240 */

 Same */

 Differs everywhere */

 Same */

 Same */

 Same */

 4 commands from 160x120 skipped */

 Same */

 Same */

 Same on 320x240, 640x480 */

 Same */

 Differs everywhere */

 Same on 320x240, 640x480 */

 Same on 320x240, 640x480 */

 NC */

 Same on 160x120, 640x480 */

 Same */

 Same */

 Same on 320x240, 640x480 */

 NC */

 Same on 320x240, 640x480 */

 Same on 320x240, 640x480 */

 Same */

 Same on 320x240, 640x480 */

 Same */

 Same on 320x240, 640x480 */

 Hue */

 Brightness */

 Sharpness */

 Sharpness */

 Sharpness */

 Sharpness */

 Red sharpness */

 Blue sharpness */

 Contrast */

 Contrast */

 Contrast */

 Was 1, broke 640x480 */

 Red sharpness */

 Blue sharpness */

	/* FIXME we should probably use cit_get_clock_div() here (in

	   combination with isoc negotiation using the programmable isoc size)

 Clock Divider */

 Same */

 Same */

 Same */

 Same */

 Same */

 Same */

 !Same */

 !Same */

	if (sd->input_index) { */

 128x96 */

 160x120 */

 176x144 */

		/* TESTME HDG: this does not seem right

 320x240 */

 352x288 */

 0=none, 7=best frame rate */

 cit_write_reg(gspca_dev, 0x0002, 0x0112); see sd_stop0 */

 cit_write_reg(gspca_dev, 0x000b, 0x0115); see sd_stop0 */

 Same on 160x120, 320x240 */

 Hstart */

 Same on 160x120, 320x240 */

 Same on 160x120, 320x240 */

 Same */

 Same on 160x120, 320x240 */

 Same */

 Same */

 Same */

 160x120 */

 320x240 */

	if (sd->input_index) { */

 -- start the camera -- */

 Program max isoc packet size */

 Start isoc bandwidth "negotiation" at max isoc bandwidth */

	/*

	 * Existence of altsetting and endpoint was verified in sd_isoc_init()

		/* HDG windows does this, but it causes the cams autogain to

		   restart from a gain of 0, which does not look good when

 cit_write_reg(gspca_dev, 0x0000, 0x0112); */

 LED Off */

 LED Off */

 LED Off */

		/* HDG windows does this, but I cannot get the camera

		   to restart with this without redoing the entire init

 cit_write_reg(gspca_dev, 0x0006, 0x0115); */

		/* HDG windows does this, but I get a green picture when

 cit_write_reg(gspca_dev, 0x0000, 0x0112); */

 If the last button state is pressed, release it now! */

 160x120 */

 176x144 */

 320x240 */

 352x288 */

 These have a different byte3 */

			/* For this model the SOF always starts at offset 0

		/* TESTME we need to find a longer sof signature to avoid

 finish decoding current frame */

 TEST ME unknown if this works on other models too */

 Read the button state */

	/* Tell the cam we've seen the button press, notice that this

	   is a nop (iow the cam keeps reporting pressed) until the

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

		/* FIXME this likely applies to all model3 cams and probably

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPCA506 chip based cameras function

 * M Xhaard 15/04/2004 based on different work Mark Taylor and others

 * and my own snoopy file on a pv-321c donate by a german compagny

 *                "Firma Frank Gmbh" from  Saarbruecken

 *

 * V4L2 by Jean-Francois Moine <http://moinejf.free.fr>

 specific webcam descriptor */

 !! must be the first item */

 defaults 0x80 */

 defaults 0x47 */

 defaults 0x40 */

 defaults 0x00 */

 read 'len' bytes to gspca_dev->usb_buf */

 value */

 fixme: check if channel == 0..3 and 6..9 (8 values) */

 NTSC bit0 -> 1(525 l) PAL SECAM bit0 -> 0 (625 l) */

 Composite channel bit1 -> 1 S-video bit 1 -> 0 */

 and exclude SAA7113 reserved channel set default 0 otherwise */

 Chrominance Control NTSC N */

 Chrominance Control SECAM */

 Chrominance Control PAL BGHIV */

	/* Read the register is not so good value change so

 Soft snap 0x40 Hard 0x41 */

 reserved */

 reserved */

 reserved */

 reserced */

 reserved */

 compression 1 */

 T=64 -> 2 */

 threshold2D */

 quantization */

 this function is called at probe time */

 this function is called at probe and resume time */

 Init on PAL and composite input0 */

***********************************************/

 for a better reading mx :)	  */

sdca506_WriteI2c(value,register) */

 input composite video */

 Chroma Pal adjust */

*************************************/

sdca506_WriteI2c(value,register) */

 Increment Delay */

	spca506_WriteI2c(gspca_dev, 0xc0, 0x02); * Analog Input Control 1 */

 Analog Input Control 2 */

 Analog Input Control 3 */

 Analog Input Control 4 */

 Horizontal Sync Start 0xe9-0x0d */

 Horizontal Sync Stop  0x0d-0xf0 */

 Sync Control */

		Defaults value			*/

 Luminance Control */

 Luminance Brightness */

 Luminance Contrast */

 Chrominance Saturation */

 Chrominance Hue Control */

 Chrominance Gain Control */

*************************************/

 Format/Delay Control */

 Output Control 1 */

 Output Control 2 */

 Output Control 3 */

 reserved */

 VGATE START */

 VGATE STOP */

 VGATE Control (MSB) */

*************************************/

	case 5: */

 compress setting and size */

 set i2c luma */

 isoc packet */

 iso packet length */

 start of frame */

 drop */

		gspca_dev->last_packet_type = DISCARD_PACKET; */

 sub-driver description */

 -- module initialisation -- */

	{USB_DEVICE(0x0733, 0x0430)}, FIXME: may be IntelPCCameraPro BRIDGE_SPCA505 */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ov534-ov9xxx gspca driver

 *

 * Copyright (C) 2009-2011 Jean-Francois Moine http://moinejf.free.fr

 * Copyright (C) 2008 Antonio Ospite <ospite@studenti.unina.it>

 * Copyright (C) 2008 Jim Paris <jim@jtan.com>

 *

 * Based on a prototype written by Mark Ferrell <majortrips@gmail.com>

 * USB protocol reverse engineered by Jim Paris <jim@jtan.com>

 * https://jim.sh/svn/jim/devl/playstation/ps3/eye/test/

 sensor address */

 specific webcam descriptor */

 !! must be the first item */

 ov9657 */

 ov9712 */

 ov5621 */

 ov3610 */

 Hsize[7:0] */

 Hsize[15:8] Write Only, can't read */

 Vsize[7:0] */

 Vsize[15:8] Write Only, can't read */

 for Iso */

 RAW input */

 RAW output, Iso transfer */

 turn off JPEG, Iso mode */

 for Iso */

 Hsize[7:0] */

 Hsize[15:8] Write Only, can't read */

 Vsize[7:0] */

 Vsize[15:8] Write Only, can't read */

 for Iso */

 RAW input  */

 RAW output, Iso transfer */

 turn off JPEG, Iso mode */

 for Iso */

 Hsize[7:0]*/

 Hsize[15:8] Write Only, can't read */

 Vsize[7:0] */

 Vsize[15:8] Write Only, can't read */

 for Iso */

 RAW input */

 RAW output, Iso transfer */

 turn off JPEG, Iso mode */

 for Iso */

 Hsize[7:0] */

 Hsize[15:8] Write Only, can't read */

 Vsize[7:0] */

 Vsize[15:8] Write Only, can't read */

 for Iso */

 RAW input */

 RAW output, Iso transfer; */

 turn off JPEG, Iso mode */

 for Iso */

 Hsize[7:0] */

 Hsize[15:8] Write Only, can't read */

 Vsize[7:0] */

 Vsize[15:8] Write Only, can't read */

 for Iso */

 RAW input */

 RAW output, Iso transfer */

 turn off JPEG, Iso mode */

 for Iso */

 com7 - SSCB reset */

 gain */

 blue */

 red */

 vref */

 com1 - exposure low bits */

 ver */

 com5 */

 com6 */

 clkrc */

 com7 - 15fps VGA YUYV */

 com8 - everything (AGC, AWB and AEC) */

 com9 */

 reg16 */

 hstart*/

 hstop */

 vstrt */

 vstop*/

 mvfp */

 aew */

 aeb */

 vpt */

 bbias */

 gbbias */

 gr com */

 exhch */

 exhcl */

 rbias */

 href */

 chlf */

 aref1 */

 aref2 */

 aref3 */

 adc2 */

 aref4 */

 tslb - yuyv */

 com11 - night mode 1/4 frame rate */

 com13 */

 edge */

 com15 */

 com16 */

 com17 */

 rsvd */

 matrix */

 matrix coef sign */

 AWB control */

 AWB blue limit */

 AWB red limit */

 AWB green limit */

 lcc1 */

 lcc2 */

 lcc3 */

 lcc4 */

 lcc5 */

 hv */

 dbvl */

 dnsth */

 poidx */

 pckdv */

 xindx */

 yindx */

 gamma curve */

 com19 */

 com9 */

 lcc6 */

 lcc7 */

 aechm */

 com21 */

 com26 */

 AWB green */

 refa8 */

 refa9 */

 black level control */

 ctrlb4 */

 ADC channel offsets */

 com24 */

 matrix */

 read 41, write ff 00 */

 com16 */

 60 Hz banding filter */

 50 Hz banding filter */

 com7 - 30fps VGA YUV */

 aref3 */

 hv */

 com22 */

 com9 */

 com16 */

 vref */

 hstart */

 hstop */

 vstrt */

 vstop */

 href */

 mvfp */

 com8 */

 gain */

 com8 - everything (AGC, AWB and AEC) */

 clkrc */

 dblv */

 read 42, write ff 00 */

 com17 */

 read 42, write ff 00 */

 com17 */

 sharpness */

 read 42, write ff 00 */

 com17 */

 saturation */

 matrix */

 read 41, write ff 00 */

 com16 */

 contrast */

 brightness */

 expo */

 aech - exposure high bits */

 read 13, write ff 00 */

 com8 - everything (AGC, AWB and AEC) */

{0x98, 0x00},*/

{0x99, 0x00},*/

{0x9a, 0x00},*/

{0x58, 0xc8},*/

{0x59, 0xa0},*/

{0xbd, 0xa0},*/

{0xbe, 0xc8},*/

 same for qvga */

 com7 - 30fps VGA YUV */

 aref3 */

 hv */

 com22 */

 com9 */

 com14 */

 com16 */

 com24 */

 vref */

 hstart */

 hstop */

 vstrt */

 vstop */

 href */

 com7 - YUYV - VGA 15 full resolution */

 aref3 */

 hv */

 com22 */

 com14 */

 com16 */

 com24 */

 vref */

 hstart */

 hstop */

 vstrt */

 vstop */

 href */

 com7 */

 aref3 */

 hv */

 com22 */

 com9 */

 com14 */

 com16 */

 com24 */

 vref */

 hstart */

 hstop */

 vstrt */

 vstop */

 href */

 com7 */

 aref3 */

 hv */

 com22 */

 com9 */

 com14 */

 com16 */

 com24 */

 vref */

 hstart */

 hstop */

 vstrt */

 vstop */

 href */

 com11 - night mode 1/4 frame rate */

 mvfp */

 com8 */

 com8 - everything (AGC, AWB and AEC) */

 clkrc */

 dblv */

 50 Hz banding filter */

 60 Hz banding filter */

 bd50 */

 bd60 */

 read 13, write ff 00 */

 tslb - yuyv */

 com11 - night mode 1/4 frame rate */

 mvfp */

 com8 */

 com8 - everything (AGC, AWB and AEC) */

 clkrc */

 dblv */

 50 Hz banding filter */

 60 Hz banding filter */

 bd50 */

 bd60 */

 advfl */

 same for xga */

 com11 - night mode 1/4 frame rate */

 mvfp */

 com8 */

 com8 - everything (AGC, AWB and AEC) */

 clkrc */

 dblv */

 50 Hz banding filter */

 60 Hz banding filter */

 bd50 */

 bd60 */

 com8 */

 com8 - everything (AGC, AWB and AEC) */

 com11 - night mode 1/4 frame rate */

 mvfp */

 clkrc */

 dblv */

 50 Hz banding filter */

 60 Hz banding filter */

 bd50 */

 bd60 */

 output a bridge sequence (reg - val) */

 output a sensor sequence (reg - val) */

/* Two bits control LED: 0x21 bit 7 and 0x23 bit 7.

 f .. 8 */

 0 .. 7 */

 brtn - brightness adjustment */

 cnst1 - contrast 1 ctrl coeff */

fixme: should adjust agc/awb/aec by different controls */

 com8 */

 agc & aec */

 aec[9:2] */

 com8 */

 aech */

 aec[15:10] = 0 */

 auto */

 com17 */

 Edge enhancement strength auto adjust */

 edge - edge enhance. factor */

 com17 */

 matrix coeff */

 mtxs - coeff signs */

 com16 */

 com8 */

 com17 */

 this function is called at probe time */

 this function is called at probe and resume time */

 reset bridge */

 initialize the sensor address */

 reset sensor */

 probe the sensor */

 initialize */

 set video format on bridge processor */

 access bridge processor's video format registers at: 0x00 */

set register: 0x00 is 'RAW8', 0x40 is 'YUV422' (YUYV?)*/

		/* Will W. specific stuff

		 * set VSYNC to

		 *	output (0x1f) if first webcam

 start transfer */

 320x240 */

 640x480 */

 800x600 */

 1024x768 */

	case SXGA_MODE:			 * 1280x1024 */

 stop transfer */

 reg_w(gspca_dev, 0x31, 0x09); */

 Values for bmHeaderInfo (Video and Still Image Payload Headers, 2.4.3.3) */

		/* Payloads are prefixed with a UVC-style header.  We

		   consider a frame to start when the FID toggles, or the PTS

		   changes.  A frame ends when EOF is set, and we've received

 Verify UVC header.  Header length is always 12 */

 Check errors */

 Extract PTS and FID */

 If PTS or FID has changed, start a new frame. */

 If this packet is marked as EOF, end the frame */

 Add the data from this payload */

 Done this payload */

 Discard data until a new frame starts. */

 -1 = auto */

 sub-driver description */

 -- module initialisation -- */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * GSPCA Endpoints (formerly known as AOX) se401 USB Camera sub Driver

 *

 * Copyright (C) 2011 Hans de Goede <hdegoede@redhat.com>

 *

 * Based on the v4l1 se401 driver which is:

 *

 * Copyright (c) 2000 Jeroen B. Vreeken (pe1rxq@amsat.org)

/* The se401 compression algorithm uses a fixed quant factor, which

   can be configured by setting the high nibble of the SE401_OPERATINGMODE

 exposure change state machine states */

 specific webcam descriptor */

 !! must be the first item */

 exposure/freq control cluster */

		/*

		 * Make sure the buffer is zeroed to avoid uninitialized

		 * values.

 HDG: this does not seem to do anything on my cam */

 red color gain */

 green color gain */

 blue color gain */

	/* Do this before the set_feature calls, for proper timing wrt

	   the interrupt driven pkt_scan. Note we may still race but that

	   is not a big issue, the expo change state machine is merely for

	   avoiding underexposed frames getting send out, if one sneaks

 integration time low */

 integration time mid */

 integration time high */

 Read the camera descriptor */

		/* Sometimes after being idle for a while the se401 won't

 Some cameras start with their LED on */

 janggu compression only works for 1/4th or 1/16th res */

		/* 1/16th if available too is better then 1/4th, because

 Not a 1/4th or 1/16th res, use bayer */

 Found a match use janggu compression */

 Set initial resetlevel */

 See if the camera supports brightness */

 this function is called at probe and resume time */

 function called at start time before URB creation */

 Ignore the bogus isoc alt settings */

 -- start the camera -- */

		/* Sometimes after being idle for a while the se401 won't

 set size + mode */

	/*

	 * HDG: disabled this as it does not seem to do anything

	 * se401_write_req(gspca_dev, SE401_REQ_SET_OUTPUT_MODE,

	 *		   SE401_FORMAT_BAYER, 0);

 Raw bayer */

 1/4th janggu */

 1/16th janggu */

 Restart the stream if requested do so by pkt_scan */

	/* Automatically adjust sensor reset level

	   Hyundai have some really nice docs about this and other sensor

	/* For some reason this normally read-only register doesn't get reset

 Not an exact science, but it seems to work pretty well... */

 Detect ping-pong-ing and halve adjustment to avoid overshoot */

		/* The exposure was changed while this frame

		/* The exposure was changed while this frame

 Sometimes a 1024 bytes garbage bulk packet is send between frames */

 Read header if not already be present from prev bulk pkt */

 Sanity checks */

 Read (remainder of) packet contents */

 Frame data */

 EOF */

 Discard the rest of the bulk packet !! */

 SOF */

	/* Give userspace a 0 bytes frame, so our dq callback gets

 mult == 1 means raw bayer */

 max is really 63 but > 50 is not pretty */

 sub-driver description */

 -- module initialisation -- */

 Endpoints/Aox SE401 */

 Philips PCVC665K */

 Kensington 67014 */

 Kensington 6701(5/7) */

 Kensington 67016 */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Subdriver for the GL860 chip with the MI1320 sensor

 * Author Olivier LORIN from own logs

 Sensor : MI1320 */

==========================================================================*/

 10 but not working with this driver */

==========================================================================*/

 reserved for FETCH functions */

	ctrl_out(gspca_dev, 0x40, 11, 0x0000, 0x0000, 0, NULL); */

 Normal light */

 Low light */

 Back light */

 0=normal  1=NB  2="sepia"  3=negative  4=other  5=other2 */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Subdriver for the GL860 chip with the OV2640 sensor

 * Author Olivier LORIN, from Malmostoso's logs

 Sensor : OV2640 */

 expected */

 expected */

 expected */

 expected */

 expected */

==========================================================================*/

==========================================================================*/

	ctrl_out(gspca_dev, 0x40, 11, 0x0000, 0x0000, 0, NULL); */

 reserved for FETCH functions */

 No sd->vold.backlight=backlight; (to be done again later) */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Subdriver for the GL860 chip with the MI2020 sensor

 * Author Olivier LORIN, from logs by Iceman/Soro2005 + Fret_saw/Hulkie/Tricid

 * with the help of Kytrix/BUGabundo/Blazercist.

 * Driver achieved thanks to a webcam gift by Kytrix.

 Sensor : MI2020 */

 12 */

 - */

==========================================================================*/

 50, not done by hardware */

 200, not done by hardware */

 100, not done by hardware */

 100, not done by hardware */

==========================================================================*/

	ctrl_out(gspca_dev, 0x40, 11, 0x0000, 0x0000,  0, NULL); */

	msleep(36); */

 These controls need to be reset */

 If not different from default, they do not need to be set */

 AC power frequency */

 light source */

 hvflip */

 Less than 4 images received -> too early to set the settings */

 SPDX-License-Identifier: GPL-2.0-or-later

/* GSPCA subdrivers for Genesys Logic webcams with the GL860 chip

 * Subdriver core

 *

 * 2009/09/24 Olivier Lorin <o.lorin@laposte.net>

 * GSPCA by Jean-Francois Moine <http://moinejf.free.fr>

 * Thanks BUGabundo and Malmostoso for your amazing help!

======================== static function declarations ====================*/

============================ driver options ==============================*/

============================ webcam controls =============================*/

==================== sud-driver structure initialisation =================*/

=========================== sub-driver image sizes =======================*/

========================= sud-driver functions ===========================*/

 This function is called at probe time */

 Get USB VendorID and ProductID */

 Get sensor and set the suitable init/start/../stop functions */

 This function is called at probe time after sd_config */

 This function is called before to choose the alt setting */

 This function is called to start the webcam */

 This function is called to stop the webcam */

 This function is called when an image is being received */

 Test only against 0202h, so endianness does not matter */

 End of frame, start a new one */

 This function is called when an image has been read */

 This function is used to monitor webcam orientation */

 Probe sensor orientation */

 C8/40 means upside-down (looking backwards) */

 D8/50 means right-up (looking onwards) */

=================== USB driver structure initialisation ==================*/

====================== Init and Exit module functions ====================*/

==========================================================================*/

 Send */

 Receive */

 Wait for 26(OV2640) or 96(OV9655) */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Subdriver for the GL860 chip with the OV9655 sensor

 * Author Olivier LORIN, from logs done by Simon (Sur3) and Almighurt

 * on dsd's weblog

 Sensor : OV9655 */

==========================================================================*/

==========================================================================*/

	ctrl_out(gspca_dev, 0x40, 11, 0x0000, 0x0000, 0, NULL);*/

 reserved for FETCH functions */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2001 Jean-Fredric Clere, Nikolas Zimmermann, Georg Acher

 *		      Mark Cave-Ayland, Carlo E Prelz, Dick Streefland

 * Copyright (c) 2002, 2003 Tuukka Toivonen

 * Copyright (c) 2008 Erik Andrén

 * Copyright (c) 2008 Chia-I Wu

 *

 * P/N 861037:      Sensor HDCS1000        ASIC STV0600

 * P/N 861050-0010: Sensor HDCS1000        ASIC STV0600

 * P/N 861050-0020: Sensor Photobit PB100  ASIC STV0600-1 - QuickCam Express

 * P/N 861055:      Sensor ST VV6410       ASIC STV0610   - LEGO cam

 * P/N 861075-0040: Sensor HDCS1000        ASIC

 * P/N 961179-0700: Sensor ST VV6410       ASIC STV0602   - Dexxa WebCam USB

 * P/N 861040-0000: Sensor ST VV6410       ASIC STV0610   - QuickCam Web

 no lock? */

 visible area of the sensor array */

 Column timing overhead */

 Column processing overhead */

 Row sample period constant */

 Exposure reset duration */

		/* All addresses are shifted left one bit

 we need to go idle before running or sleeping */

 Update the state if the write succeeded */

 Column time period */

 Column processing period */

 Row processing period */

	/* Minimum number of column timing periods

 the cycles one row takes */

 the remaining cycles */

 calculate sub-row exposure */

 see HDCS-1020 datasheet 3.5.6.4, p. 63 */

 see HDCS-1000 datasheet 3.4.5.5, p. 61 */

 Stop streaming */

 Clear exposure error flag*/

 Restart streaming */

 Stop streaming */

 Clear exposure error flag*/

 Restart streaming */

 the voltage gain Av = (1 + 19 * val / 127) * (1 + bit7) */

 must be multiple of 4 */

 the borders are also invalid */

 Update the current width and height */

	/*

	 * Frame rate on HDCS-1000 with STV600 depends on PSMP:

	 *  4 = doesn't work at all

	 *  5 = 7.8 fps,

	 *  6 = 6.9 fps,

	 *  8 = 6.3 fps,

	 * 10 = 5.5 fps,

	 * 15 = 4.4 fps,

	 * 31 = 2.8 fps

	 *

	 * Frame rate on HDCS-1000 with STV602 depends on PSMP:

	 * 15 = doesn't work at all

	 * 18 = doesn't work at all

	 * 19 = 7.3 fps

	 * 20 = 7.4 fps

	 * 21 = 7.4 fps

	 * 22 = 7.4 fps

	 * 24 = 6.3 fps

	 * 30 = 5.4 fps

	/*

	 * From Andrey's test image: looks like HDCS-1020 upper-left

	 * visible pixel is at 24,8 (y maybe even smaller?) and lower-right

	 * visible pixel at 375,299 (x maybe even larger?)

 Set the STV0602AA in STV0600 emulation mode */

 Execute the bridge init */

 sensor soft reset */

 Execute the sensor init */

 Enable continuous frame capture, bit 2: stop when frame complete */

	/* Set PGA sample duration

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Support for the sensor part which is integrated (I think) into the

 * st6422 stv06xx alike bridge, as its integrated there are no i2c writes

 * but instead direct bridge writes.

 *

 * Copyright (c) 2009 Hans de Goede <hdegoede@redhat.com>

 *

 * Strongly based on qc-usb-messenger, which is:

 * Copyright (c) 2001 Jean-Fredric Clere, Nikolas Zimmermann, Georg Acher

 *		      Mark Cave-Ayland, Carlo E Prelz, Dick Streefland

 * Copyright (c) 2002, 2003 Tuukka Toivonen

	/* Note we actually get 124 lines of data, of which we skip the 4st

	/* Note we actually get 248 lines of data, of which we skip the 4st

	   4 as they are garbage, and we tell the app it only gets the

	   first 240 of the 244 lines it actually gets, so that it ignores

 V4L2 controls supported by the driver */

 commit settings */

 disable capture */

 0x00-0x1F brightness */

 0x00-0x0F contrast */

 R */

 G */

 B */

 0x00-0x07 ??? */

 160x120, 0x00-0x01 night filter */

 640x480 */

 18 bayes */

 10 compressed? */

 anti-noise?  0xa2 gives a perfect image */

 0x00-0x01 - ??? */

 shutter time 0x0000-0x03FF */

 low value  give good picures on moving objects (but requires much light) */

 high value gives good picures in darkness (but tends to be overexposed) */

 write: 1x1x xxxx */

 read:  1x1x xxxx */

        bit 5 == button pressed and hold if 0 */

 write 0xe2,0xea */

 0x144a */

 0x00 init */

 bit 7 == button has been pressed, but not handled */

 interrupt */

 if(urb->iso_frame_desc[i].status == 0x80) { */

 if(urb->iso_frame_desc[i].status == 0x88) { */

 0x00 - 0xFF  0x80 == compr ? */

 high val-> light area gets darker */

 low val -> light area gets lighter */

 high val-> light area gets darker */

 low val -> light area gets lighter */

 high val-> light area gets darker */

 low val -> light area gets lighter */

 2  : 324x248  80352 bytes */

 7  : 248x162  40176 bytes */

 c+f: 162*124  20088 bytes */

 0x04/0x14 ... test pictures ??? */

 commit settings */

 val goes from 0 -> 31 */

 Val goes from 0 -> 15 */

 Set red, green, blue, gain */

 2 mystery writes */

 commit settings */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2001 Jean-Fredric Clere, Nikolas Zimmermann, Georg Acher

 *		      Mark Cave-Ayland, Carlo E Prelz, Dick Streefland

 * Copyright (c) 2002, 2003 Tuukka Toivonen

 * Copyright (c) 2008 Erik Andrén

 *

 * P/N 861037:      Sensor HDCS1000        ASIC STV0600

 * P/N 861050-0010: Sensor HDCS1000        ASIC STV0600

 * P/N 861050-0020: Sensor Photobit PB100  ASIC STV0600-1 - QuickCam Express

 * P/N 861055:      Sensor ST VV6410       ASIC STV0610   - LEGO cam

 * P/N 861075-0040: Sensor HDCS1000        ASIC

 * P/N 961179-0700: Sensor ST VV6410       ASIC STV0602   - Dexxa WebCam USB

 * P/N 861040-0000: Sensor ST VV6410       ASIC STV0610   - QuickCam Web

/*

 * The spec file for the PB-0100 suggests the following for best quality

 * images after the sensor has been reset :

 *

 * PB_ADCGAINL      = R60 = 0x03 (3 dec)      : sets low reference of ADC

						to produce good black level

 * PB_PREADCTRL     = R32 = 0x1400 (5120 dec) : Enables global gain changes

						through R53

 * PB_ADCMINGAIN    = R52 = 0x10 (16 dec)     : Sets the minimum gain for

						auto-exposure

 * PB_ADCGLOBALGAIN = R53 = 0x10 (16 dec)     : Sets the global gain

 * PB_EXPGAIN       = R14 = 0x11 (17 dec)     : Sets the auto-exposure value

 * PB_UPDATEINT     = R23 = 0x02 (2 dec)      : Sets the speed on

						auto-exposure routine

 * PB_CFILLIN       = R5  = 0x0E (14 dec)     : Sets the frame rate

 one big happy control cluster... */

/* low res / subsample modes disabled as they are only half res horizontal,

 If we don't have enough bandwidth use a lower framerate */

 Setup sensor window */

 Wrong, FIXME */

 larger -> slower */

 Set bit 1 to zero */

/* FIXME: Sort the init commands out and put them into tables,

/* FIXME: No error handling for now,

 Reset sensor */

 Disable chip */

 Gain stuff...*/

 Set up auto-exposure */

	/* ADC VREF_HI new setting for a transition

 gain max for autoexposure */

 gain min for autoexposure  */

	/* Maximum frame integration time (programmed into R8)

	/* Minimum frame integration time (programmed into R8)

 R15  Expose0 (maximum that auto-exposure may use) */

 R17  Expose2 (minimum that auto-exposure may use) */

 0x14 */

 0x0D */

 Set black level (important!) */

 ??? */

 Scan/timing for the sensor */

	/* Number of pixels counted by the sensor when subsampling the pixels.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2001 Jean-Fredric Clere, Nikolas Zimmermann, Georg Acher

 *		      Mark Cave-Ayland, Carlo E Prelz, Dick Streefland

 * Copyright (c) 2002, 2003 Tuukka Toivonen

 * Copyright (c) 2008 Erik Andrén

 *

 * P/N 861037:      Sensor HDCS1000        ASIC STV0600

 * P/N 861050-0010: Sensor HDCS1000        ASIC STV0600

 * P/N 861050-0020: Sensor Photobit PB100  ASIC STV0600-1 - QuickCam Express

 * P/N 861055:      Sensor ST VV6410       ASIC STV0610   - LEGO cam

 * P/N 861075-0040: Sensor HDCS1000        ASIC

 * P/N 961179-0700: Sensor ST VV6410       ASIC STV0602   - Dexxa WebCam USB

 * P/N 861040-0000: Sensor ST VV6410       ASIC STV0610   - QuickCam Web

	/* Disable the hardware VFLIP and HFLIP as we currently lack a

	   mechanism to adjust the image offset in such a way that

 v4l2_ctrl_new_std(hdl, &vv6410_ctrl_ops, */

		V4L2_CID_HFLIP, 0, 1, 1, 0); */

 v4l2_ctrl_new_std(hdl, &vv6410_ctrl_ops, */

		V4L2_CID_VFLIP, 0, 1, 1, 0); */

 Turn on LED */

 Turn off LED */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2001 Jean-Fredric Clere, Nikolas Zimmermann, Georg Acher

 *		      Mark Cave-Ayland, Carlo E Prelz, Dick Streefland

 * Copyright (c) 2002, 2003 Tuukka Toivonen

 * Copyright (c) 2008 Erik Andrén

 *

 * P/N 861037:      Sensor HDCS1000        ASIC STV0600

 * P/N 861050-0010: Sensor HDCS1000        ASIC STV0600

 * P/N 861050-0020: Sensor Photobit PB100  ASIC STV0600-1 - QuickCam Express

 * P/N 861055:      Sensor ST VV6410       ASIC STV0610   - LEGO cam

 * P/N 861075-0040: Sensor HDCS1000        ASIC

 * P/N 961179-0700: Sensor ST VV6410       ASIC STV0602   - Dexxa WebCam USB

 * P/N 861040-0000: Sensor ST VV6410       ASIC STV0610   - QuickCam Web

/* Wraps the normal write sensor bytes / words functions for writing a

 Build the command buffer */

 Number of commands to send - 1 */

 Build the command buffer */

 Number of commands to send - 1 */

 Clear mem */

 Read I2C register */

 Dumps all bridge registers */

 this function is called at probe and resume time */

	/* Let the usb init settle for a bit

 this function is called at probe time */

 Start the camera */

 Prepare the sensor for start */

 Start isochronous streaming */

 Start isoc bandwidth "negotiation" at max isoc bandwidth */

	/*

	 * Existence of altsetting and endpoint was verified in

	 * stv06xx_isoc_init()

 stop ISO-streaming */

/*

 * Analyse an USB packet of the data stream and store it appropriately.

 * Each packet contains an integral number of chunks. Each chunk has

 * 2-bytes identification, followed by 2-bytes that describe the chunk

 * length. Known/guessed chunk identifications are:

 * 8001/8005/C001/C005 - Begin new frame

 * 8002/8006/C002/C006 - End frame

 * 0200/4200           - Contains actual image data, bayer or compressed

 * 0005                - 11 bytes of unknown data

 * 0100                - 2 bytes of unknown data

 * The 0005 and 0100 chunks seem to appear only in compressed stream.

 isoc packet */

 iso packet length */

	/* A packet may contain several frames

 Capture the id */

 Capture the chunk length */

 First byte seem to be 02=data 2nd byte is unknown??? */

 Create a new frame, chunk length should be zero */

 Complete the last frame (if any) */

			/* Unknown chunk with 11 bytes of data,

			   occurs just before end of each frame

			/* Unknown chunk with 2 bytes of data,

 Special chunk seen sometimes on the ST6422 */

 Unknown chunk */

 interrupt packet data */

 interrupt packet length */

 sub-driver description */

 This function is called at probe time */

 -- module initialisation -- */

 QuickCam Express */

 LEGO cam / QuickCam Web */

 Dexxa WebCam USB */

 QuickCam Messenger */

 QuickCam Communicate */

 QuickCam Messenger (new) */

 -- device connect -- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the ov9650 sensor

 *

 * Copyright (C) 2008 Erik Andrén

 * Copyright (C) 2007 Ilyes Gouta. Based on the m5603x Linux Driver Project.

 * Copyright (C) 2005 m5603x Linux Driver Project <m5602@x3ng.com.br>

 *

 * Portions of code to USB interface and ALi driver software,

 * Copyright (c) 2006 Willem Duinker

 * v4l2 interface modeled after the V4L2 driver

 * for SN9C10x PC Camera Controllers

 [INITCAM] */

 Reset chip */

 Enable double clock */

 Do something out of spec with the power */

 [INITCAM] */

 Reset chip */

	/* One extra reset is needed in order to make the sensor behave

 Enable double clock */

 Do something out of spec with the power */

 Set fast AGC/AEC algorithm with unlimited step size */

 Turn off color matrix coefficient double option */

	/* Enable color matrix for RGB/YUV, Delay Y channel,

 Enable digital BLC, Set output mode to U Y V Y */

 Limit the AGC/AEC stable upper region */

 Enable HREF and some out of spec things */

	/* Set all DBLC offset signs to positive and

 Necessary, no camera stream without it */

 Enable full range output */

	/* Enable HREF at optical black, enable ADBLC bias,

 Subtract 32 from the B channel bias */

 Subtract 32 from the Gb channel bias */

 Do not bypass the analog BLC and to some out of spec stuff */

 Subtract 32 from the R channel bias */

 Subtract 32 from the R channel bias */

 Set the AGC/AEC stable region upper limit */

 Set the AGC/AEC stable region lower limit */

 Set the high and low limit nibbles to 3 */

	/* Set the Automatic Gain Ceiling (AGC) to 128x,

	drop VSYNC at frame drop,

	limit exposure timing,

	/* Set VSYNC negative, Set RESET to SLHS (slave mode horizontal sync)

 Set horizontal column start high to default value */

 210 */

 Set horizontal column end */

 1534 */

 Complementing register to the two writes above */

 Set vertical row start high bits */

 Set vertical row end low bits */

 Set complementing vertical frame control */

 Enable denoise, and white-pixel erase */

 Enable VARIOPIXEL */

 Put the sensor in soft sleep mode */

/* Vertically and horizontally flips the image if matched, needed for machines

		/* If we want to force another sensor,

 Run the pre-init before probing the sensor */

 Synthesize the vsync/hsync setup */

 The 6 MSBs */

 The 8 middle bits */

 The 2 LSBs */

 The 2 MSB */

	/* Read the OV9650_VREF register first to avoid

 Mask away all uninteresting bits */

 The 8 LSBs */

 When vflip is toggled we need to readjust the bridge hsync/vsync */

 Restore original value */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the po1030 sensor

 *

 * Copyright (c) 2008 Erik Andrén

 * Copyright (c) 2007 Ilyes Gouta. Based on the m5603x Linux Driver Project.

 * Copyright (c) 2005 m5603x Linux Driver Project <m5602@x3ng.com.br>

 *

 * Portions of code to USB interface and ALi driver software,

 * Copyright (c) 2006 Willem Duinker

 * v4l2 interface modeled after the V4L2 driver

 * for SN9C10x PC Camera Controllers

 Set the width to 751 */

 Set the height to 540 */

 Set the x window to 1 */

 Set the y window to 1 */

	/* with a very low lighted environment increase the exposure but

		/* If we want to force another sensor, don't try to probe this

 Run the pre-init to actually probe the unit */

 Init the sensor */

 Restore original value */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the s5k4aa sensor

 *

 * Copyright (C) 2008 Erik Andrén

 * Copyright (C) 2007 Ilyes Gouta. Based on the m5603x Linux Driver Project.

 * Copyright (C) 2005 m5603x Linux Driver Project <m5602@x3ng.com.br>

 *

 * Portions of code to USB interface and ALi driver software,

 * Copyright (c) 2006 Willem Duinker

 * v4l2 interface modeled after the V4L2 driver

 * for SN9C10x PC Camera Controllers

 VSYNC_PARA, VSYNC_PARA : img height 480 = 0x01e0 */

 HSYNC_PARA, HSYNC_PARA : img width 640 = 0x0280 */

 48 MHz */

	/* 0x37 : Fix image stability when light is too bright and improves

 ROWSTART_HI, ROWSTART_LO : 10 + (1024-960)/2 = 42 = 0x002a */

 window_height_hi, window_height_lo : 960 = 0x03c0 */

 window_width_hi, window_width_lo : 1280 = 0x0500 */

 helps to sync... */

 VSYNC_PARA, VSYNC_PARA : img height 1024 = 0x0400 */

 HSYNC_PARA, HSYNC_PARA : img width 1280 = 0x0500 */

 48 MHz */

		/* If we want to force another sensor, don't try to probe this

 Preinit the sensor */

 Test some registers, but we don't know their exact meaning yet */

 Restore original value */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the ov7660 sensor

 *

 * Copyright (C) 2009 Erik Andrén

 * Copyright (C) 2007 Ilyes Gouta. Based on the m5603x Linux Driver Project.

 * Copyright (C) 2005 m5603x Linux Driver Project <m5602@x3ng.com.br>

 *

 * Portions of code to USB interface and ALi driver software,

 * Copyright (c) 2006 Willem Duinker

 * v4l2 interface modeled after the V4L2 driver

 * for SN9C10x PC Camera Controllers

		/* If we want to force another sensor,

 Do the preinit */

 Init the sensor */

 Restore original value */

 SPDX-License-Identifier: GPL-2.0-only

 /*

 * USB Driver for ALi m5602 based webcams

 *

 * Copyright (C) 2008 Erik Andrén

 * Copyright (C) 2007 Ilyes Gouta. Based on the m5603x Linux Driver Project.

 * Copyright (C) 2005 m5603x Linux Driver Project <m5602@x3ng.com.br>

 *

 * Portions of code to USB interface and ALi driver software,

 * Copyright (c) 2006 Willem Duinker

 * v4l2 interface modeled after the V4L2 driver

 * for SN9C10x PC Camera Controllers

 Kernel module parameters */

 A skeleton used for sending messages to the sensor */

 A skeleton used for sending messages to the m5602 bridge */

 Reads a byte from the m5602 */

	/* usb_control_msg(...) returns the number of bytes sent upon success,

 Writes a byte to the m5602 */

	/* usb_control_msg(...) returns the number of bytes sent upon success,

	/* Sensors with registers that are of only

 FIXME: This works with the ov9650, but has issues with the po1030 */

 No sensor with a data width larger than 16 bits has yet been seen */

 Special case larger sensor writes */

 Copy a four byte write sequence for each byte to be written to */

 Copy the tailer */

 Set the total length */

/* Dump all the registers of the m5602 bridge,

 Try the po1030 */

 Try the mt9m111 sensor */

 Try the s5k4aa */

 Try the ov9650 */

 Try the ov7660 */

 Try the s5k83a */

 More sensor probe function goes here */

 Run the init sequence */

 Send start command to the camera */

 Frame delimiter: ff xx xx xx ff ff */

 Remove the extra fluff appended on each header */

 Complete the last frame (if any) */

 Create a new frame */

 Remove urb header */

 Add the remaining data up to frame size */

 Run the sensor specific end transfer sequence */

 sub-driver description */

 this function is called at probe time */

 Probe sensor */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the mt9m111 sensor

 *

 * Copyright (C) 2008 Erik Andrén

 * Copyright (C) 2007 Ilyes Gouta. Based on the m5603x Linux Driver Project.

 * Copyright (C) 2005 m5603x Linux Driver Project <m5602@x3ng.com.br>

 *

 * Portions of code to USB interface and ALi driver software,

 * Copyright (c) 2006 Willem Duinker

 * v4l2 interface modeled after the V4L2 driver

 * for SN9C10x PC Camera Controllers

 13 */

 18 */

 1024 */

 1296 */

 352 */

 17 */

 352 */

 17 */

 271 */

 Set number of blank rows chosen to 400 */

		/* If we want to force another sensor, don't try to probe this

 Do the preinit */

 Init the sensor */

 The mt9m111 is flipped by default */

 Set the correct page map */

 Set the correct page map */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the s5k83a sensor

 *

 * Copyright (C) 2008 Erik Andrén

 * Copyright (C) 2007 Ilyes Gouta. Based on the m5603x Linux Driver Project.

 * Copyright (C) 2005 m5603x Linux Driver Project <m5602@x3ng.com.br>

 *

 * Portions of code to USB interface and ALi driver software,

 * Copyright (c) 2006 Willem Duinker

 * v4l2 interface modeled after the V4L2 driver

 * for SN9C10x PC Camera Controllers

/* This could probably be considerably shortened.

   I don't have the hardware to experiment with it, patches welcome

	/* The following sequence is useless after a clean boot

 488 */

 648 */

 32 */

 152 */

 741 */

	/* normal colors

 484 */

 639 */

		/* If we want to force another sensor, don't try to probe this

 Preinit the sensor */

	/* We don't know what register (if any) that contain the product id

	 * Just pick the first addresses that seem to produce the same results

 null the pointer! thread is't running now */

 return to "front" flip */

	/* Create another thread, polling the GPIO ports of the camera to check

	   if it got rotated. This is how the windows driver does it so we have

 Preinit the sensor */

	/* FIXME: This is not sane, we need to figure out the composition

 gain, high 5 bits */

 gain, high 7 bits */

 six bit is vflip, seven is hflip */

 Get camera rotation on Acer notebooks */

 Restore original val */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Zoran 364xx based USB webcam module version 0.73

 *

 * Allows you to use your USB webcam with V4L2 applications

 * This is still in heavy development !

 *

 * Copyright (C) 2004  Antoine Jacquet <royale@zerezo.com>

 * http://royale.zerezo.com/zr364xx/

 *

 * Heavily inspired by usb-skeleton.c, vicam.c, cpia.c and spca50x.c drivers

 * V4L2 version inspired by meye.c driver

 *

 * Some video buffer code by Lamarque based on s2255drv.c and vivi.c drivers.

 Version Information */

royale.zerezo.com/"

 Camera */

 Debug macro */

#define FULL_DEBUG 1*/

/* Init methods, need to find nicer names for these

 Module parameters */

 Module parameters interface */

/* Devices supported by this driver

 Terminating entry */

 frame structure */

	unsigned long ulState;	/* ulState:ZR364XX_READ_IDLE,

 image data */

 current data copied to it */

 image buffer structure */

 number of frames in buffer */

 array of FRAME structures */

 back pointer to zr364xx_camera struct */

 image formats.  */

 Camera stuff */

 save off the usb device pointer */

 the interface for this device */

 v4l video device */

 owns the streaming */

 buffer for one video frame */

 common v4l buffer stuff -- must be first */

 function used to send initialisation commands to the camera */

/* Control messages sent to the camera to initialize it

 method 0 */

 method 1 */

 method 2 */

 init table */

 JPEG static data in header (Huffman table, etc) */

	/*

	0xFF, 0xE0, 0x00, 0x10, 'J', 'F', 'I', 'F',

	0x00, 0x01, 0x01, 0x00, 0x33, 0x8A, 0x00, 0x00, 0x33, 0x88,

/* ------------------------------------------------------------------

   Videobuf operations

*******************/

 V4L2 integration */

*******************/

 NoMan Sux ! */

/* video buffer vmalloc implementation based partly on VIVI driver which is

 *          Copyright (c) 2006 by

 *                  Mauro Carvalho Chehab <mchehab--a.t--infradead.org>

 *                  Ted Walther <ted--a.t--enumera.com>

 *                  John Sokol <sokol--a.t--videotechnology.com>

 *                  http://v4l.videotechnology.com/

 *

 tell v4l buffer was filled */

 no one active */

/* this function moves the usb stream read pipe data

 * into the system buffers.

 * returns 0 on success, EAGAIN if more data to process (call this

 * function again).

 swap bytes if camera needs it */

 search done.  now find out if should be acquiring */

 we found a frame, but this channel is turned off */

 header incomplete */

	/*_DBG("cur_size %lu urb size %d\n", frm->cur_size,

 end of system frame ring buffer, start at zero */

 frame ready */

 go back to find the JPEG EOI marker */

		/* Sometimes there is junk data in the middle of the picture,

 we skip the 2 first frames which are usually buggy */

 done successfully */

 hardware brightness */

 special case for METHOD3, the modes are different */

	/* Added some delay here, since opening/closing the camera quickly,

	 * like Ekiga does during its startup, can crash the webcam

 if shutting down, do not resubmit, exit immediately */

 reuse urb */

 transfer buffer allocated in board_init */

 cancel urb */

 starts acquisition process */

 open the camera */

	/* Added some delay here, since opening/closing the camera quickly,

	 * like Ekiga does during its startup, can crash the webcam

 release sys buffers */

 release transfer buffer */

 release the camera */

 turn off stream */

	/* Added some delay here, since opening/closing the camera quickly,

	 * like Ekiga does during its startup, can crash the webcam

******************/

 USB integration */

******************/

** start create system buffers ***/

 always allocate maximum size for system buffers */

 make sure internal states are set */

** end create system buffers ***/

 start read pipe */

 save the init method used by this camera */

 special case for METHOD3, the modes are different */

 set up the endpoint information  */

 we found the bulk in endpoint */

 v4l */

 load zr364xx board specific */

 stops the read pipe if it is running */

*********************/

 Module integration */

*********************/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Abilis Systems Single DVB-T Receiver

 * Copyright (C) 2008 Pierrick Hascoet <pierrick.hascoet@abilis.com>

/**

 * as10x_cmd_add_PID_filter - send add filter command to AS10x

 * @adap:      pointer to AS10x bus adapter

 * @filter:    TSFilter filter for DVB-T

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

 Response OK -> get response data */

/**

 * as10x_cmd_del_PID_filter - Send delete filter command to AS10x

 * @adap:         pointer to AS10x bus adapte

 * @pid_value:    PID to delete

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

/**

 * as10x_cmd_start_streaming - Send start streaming command to AS10x

 * @adap:   pointer to AS10x bus adapter

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

/**

 * as10x_cmd_stop_streaming - Send stop streaming command to AS10x

 * @adap:   pointer to AS10x bus adapter

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Abilis Systems Single DVB-T Receiver

 * Copyright (C) 2008 Pierrick Hascoet <pierrick.hascoet@abilis.com>

 * Copyright (C) 2010 Devin Heitmueller <dheitmueller@kernellabs.com>

/*

 * Parse INTEL HEX firmware file to extract address and data.

 locate end of line */

 parse line to split addr / data */

 check if data is an address */

 return read value + ':' + '\n' */

 parse intel hex line */

 detect the end of file */

 send EOF command */

 prepare command to send */

 send cmd to device */

 select fw file to upload */

 allocate buffer to store firmware upload command and data */

 request kernel to locate firmware file: part1 */

 initiate firmware upload */

 wait for boot to complete */

 request kernel to locate firmware file: part2 */

 initiate firmware upload */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Abilis Systems Single DVB-T Receiver

 * Copyright (C) 2008 Pierrick Hascoet <pierrick.hascoet@abilis.com>

 * Copyright (C) 2010 Devin Heitmueller <dheitmueller@kernellabs.com>

 Terminating entry */

/* Note that this table must always have the same number of entries as the

 Terminating entry */

/* eLNA configuration: devices built on the reference design work best

 Terminating entry */

 value */

 index */

 200 */);

 value */

 index */

 200 */);

 is not stopped, re-submit urb */

 init urb buffers */

 extract as102_dev_t from usb_device private data */

 unregister dvb layer */

 free usb buffers */

 usb unregister device */

 decrement usage counter */

 This should never actually happen */

 Assign the user-friendly device name */

 set private callback functions */

 init cmd token for usb bus */

 init kernel device reference */

 store as102 device to usb_device private data */

 store in as102 device the usb_device pointer */

 we can register the device now, as it is ready */

 something prevented us from registering this driver */

 request buffer allocation for streaming */

 register dvb layer */

 read minor from inode */

 fetch device from usb interface */

 get our device */

 save our device object in the file's private structure */

 increment our usage count for the device */

 decrement the count on our device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Abilis Systems Single DVB-T Receiver

 * Copyright (C) 2008 Pierrick Hascoet <pierrick.hascoet@abilis.com>

 * Copyright (C) 2010 Devin Heitmueller <dheitmueller@kernellabs.com>

/**

 * as10x_cmd_turn_on - send turn on command to AS10x

 * @adap:   pointer to AS10x bus adapter

 *

 * Return 0 when no error, < 0 in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

/**

 * as10x_cmd_turn_off - send turn off command to AS10x

 * @adap:   pointer to AS10x bus adapter

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

/**

 * as10x_cmd_set_tune - send set tune command to AS10x

 * @adap:    pointer to AS10x bus adapter

 * @ptune:   tune parameters

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

/**

 * as10x_cmd_get_tune_status - send get tune status command to AS10x

 * @adap: pointer to AS10x bus adapter

 * @pstatus: pointer to updated status structure of the current tune

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

 Response OK -> get response data */

/**

 * as10x_cmd_get_tps - send get TPS command to AS10x

 * @adap:      pointer to AS10x handle

 * @ptps:      pointer to TPS parameters structure

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

 Response OK -> get response data */

/**

 * as10x_cmd_get_demod_stats - send get demod stats command to AS10x

 * @adap:          pointer to AS10x bus adapter

 * @pdemod_stats:  pointer to demod stats parameters structure

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

 Response OK -> get response data */

/**

 * as10x_cmd_get_impulse_resp - send get impulse response command to AS10x

 * @adap:     pointer to AS10x bus adapter

 * @is_ready: pointer to value indicating when impulse

 *	      response data is ready

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

 Response OK -> get response data */

/**

 * as10x_cmd_build - build AS10x command header

 * @pcmd:     pointer to AS10x command buffer

 * @xid:      sequence id of the command

 * @cmd_len:  length of the command

/**

 * as10x_rsp_parse - Parse command response

 * @prsp:       pointer to AS10x command buffer

 * @proc_id:    id of the command

 *

 * Return 0 on success or negative value in case of error.

 extract command error code */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Abilis Systems Single DVB-T Receiver

 * Copyright (C) 2008 Pierrick Hascoet <pierrick.hascoet@abilis.com>

**************************/

 FUNCTION DEFINITION     */

**************************/

/**

 * as10x_cmd_get_context - Send get context command to AS10x

 * @adap:      pointer to AS10x bus adapter

 * @tag:       context tag

 * @pvalue:    pointer where to store context value read

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response: context command do not follow the common response */

 structure -> specific handling response parse required            */

 Response OK -> get response data */

 value returned is always a 32-bit value */

/**

 * as10x_cmd_set_context - send set context command to AS10x

 * @adap:      pointer to AS10x bus adapter

 * @tag:       context tag

 * @value:     value to set in context

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 pcmd->body.context.req.reg_val.mode initialization is not required */

 send command */

 parse response: context command do not follow the common response */

 structure -> specific handling response parse required            */

/**

 * as10x_cmd_eLNA_change_mode - send eLNA change mode command to AS10x

 * @adap:      pointer to AS10x bus adapter

 * @mode:      mode selected:

 *		- ON    : 0x0 => eLNA always ON

 *		- OFF   : 0x1 => eLNA always OFF

 *		- AUTO  : 0x2 => eLNA follow hysteresis parameters

 *				 to be ON or OFF

 *

 * Return 0 on success or negative value in case of error.

 prepare command */

 fill command */

 send command */

 parse response */

/**

 * as10x_context_rsp_parse - Parse context command response

 * @prsp:       pointer to AS10x command response buffer

 * @proc_id:    id of the command

 *

 * Since the contex command response does not follow the common

 * response, a specific parse function is required.

 * Return 0 on success or negative value in case of error.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Abilis Systems Single DVB-T Receiver

 * Copyright (C) 2008 Pierrick Hascoet <pierrick.hascoet@abilis.com>

 * Copyright (C) 2010 Devin Heitmueller <dheitmueller@kernellabs.com>

 header file for usb device driver*/

 Set frontend arguments */

 send abilis command: GET_TPS */

 send abilis command: GET_TUNE_STATUS */

 send abilis command: GET_TUNE_STATUS */

 Attach the frontend */

 init bus mutex for token locking */

 init start / stop stream mutex */

	/*

	 * try to load as102 firmware. If firmware upload failed, we'll be

	 * able to upload it later.

 unregister as102 frontend */

 detach frontend */

 unregister demux device */

 unregister dvb adapter */

 modinfo details */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant linux driver for GL861 USB2.0 devices.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 USB control message buffer */

 Avoid I2C errors */

 XXX: I2C adapter maximum data lengths are not tested */

 I2C write */

 I2C write + read */

 I2C read */

 Unsupported I2C message */

 Callbacks for DVB USB */

	/*

	 * There is 2 interfaces. Interface 0 is for TV and interface 1 is

	 * for HID remote controller. Interface 0 has 2 alternate settings.

	 * For some reason we need to set interface explicitly, defaulted

	 * as alternate setting 1?

 DVB USB Driver stuff */

/*

 * For Friio

 GPIO control in Friio */

 control PIC16F676 attached to Friio */

 send 2bit header (&B10) */

 send 32bit(satur, R, G, B) data in serial */

 set the strobe off */

 init/config of gl861 for Friio */

/* NOTE:

 * This function cannot be moved to friio_init()/dvb_usbv2_init(),

 * because the init defined here includes a whole device reset,

 * it must be run early before any activities like I2C,

 * but friio_init() is called by dvb-usbv2 after {_frontend, _tuner}_attach(),

 * where I2C communication is used.

 * In addition, this reset is required in reset_resume() as well.

 * Thus this function is set to be called from _power_ctl().

 *

 * Since it will be called on the early init stage

 * where the i2c adapter is not initialized yet,

 * we cannot use i2c_transfer() here.

	/*

	 * Check if the dev is really a Friio White, since it might be

	 * another device, Friio Black, with the same VID/PID.

/*

 * DVB callbacks for Friio

 power on LNA? */

 init/config demod */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Realtek RTL28xxU DVB USB driver

 *

 * Copyright (C) 2009 Antti Palosaari <crope@iki.fi>

 * Copyright (C) 2011 Antti Palosaari <crope@iki.fi>

 * Copyright (C) 2012 Thomas Mair <thomas.mair86@googlemail.com>

 write */

 read */

		/*

		 * Zero-length transfers must use usb_sndctrlpipe() and

		 * rtl28xxu_identify_state() uses a zero-length i2c read

		 * command to determine the chip type.

 read request, copy returned data to return buf */

 no need for read if whole reg is written */

 I2C */

	/*

	 * It is not known which are real I2C bus xfer limits, but testing

	 * with RTL2831U + MT2060 gives max RD 24 and max WR 22 bytes.

	 * TODO: find out RTL2832U lens

	/*

	 * I2C adapter logic looks rather complicated due to fact it handles

	 * three different access methods. Those methods are;

	 * 1) integrated demod access

	 * 2) old I2C access

	 * 3) new I2C access

	 *

	 * Used method is selected in order 1, 2, 3. Method 3 can handle all

	 * requests but there is two reasons why not use it always;

	 * 1) It is most expensive, usually two USB messages are needed

	 * 2) At least RTL2831U does not support it

	 *

	 * Method 3 is needed in case of I2C write+read (typical register read)

	 * where write is more than one byte.

 TODO: check msg[0].len max */

 method 1 - integrated demod */

 return demod page from driver cache */

 method 2 - old I2C */

 method 3 - new I2C */

 TODO: check msg[0].len max */

 method 1 - integrated demod */

 save demod page for later demod access */

 method 2 - old I2C */

 method 3 - new I2C */

 Retry failed I2C messages */

 open RTL2831U/RTL2830 I2C gate */

 tuner probes */

	/*

	 * RTL2831U GPIOs

	 * =========================================================

	 * GPIO0 | tuner#0 | 0 off | 1 on  | MXL5005S (?)

	 * GPIO2 | LED     | 0 off | 1 on  |

	 * GPIO4 | tuner#1 | 0 on  | 1 off | MT2060

 GPIO direction */

 enable as output GPIO0, GPIO2, GPIO4 */

	/*

	 * Probe used tuner. We need to know used tuner before demod attach

	 * since there is some demod params needed to set according to tuner.

 demod needs some time to wake up */

 open demod I2C gate */

 check QT1010 ID(?) register; reg=0f val=2c */

 open demod I2C gate */

 check MT2060 ID register; reg=00 val=63 */

 assume MXL5005S */

 open RTL2832U/RTL2832 I2C gate */

 close RTL2832U/RTL2832 I2C gate */

 tuner probes */

 enable GPIO3 and GPIO6 as output */

	/*

	 * Probe used tuner. We need to know used tuner before demod attach

	 * since there is some demod params needed to set according to tuner.

 open demod I2C gate */

 check FC0012 ID register; reg=00 val=a1 */

 check FC0013 ID register; reg=00 val=a3 */

 check MT2266 ID register; reg=00 val=85 */

 check FC2580 ID register; reg=01 val=56 */

 check MT2063 ID register; reg=00 val=9e || 9c */

 check MAX3543 ID register; reg=00 val=38 */

 check TUA9001 ID register; reg=7e val=2328 */

 check MXL5007R ID register; reg=d9 val=14 */

 check E4000 ID register; reg=02 val=40 */

 check TDA18272 ID register; reg=00 val=c760  */

 check R820T ID register; reg=00 val=69 */

 check R828D ID register; reg=00 val=69 */

 GPIO0 and GPIO5 to reset Si2157/Si2168 tuner and demod */

 check Si2157 ID register; reg=c0 val=80 */

 probe slave demod */

 power off slave demod on GPIO0 to reset CXD2837ER */

 power on slave demod on GPIO0 */

 slave demod needs some time to wake up */

 check slave answers */

 check Si2168 ID register; reg=c8 val=80 */

 close demod I2C gate */

	/*

	 * Detect chip type using I2C command that is not supported

	 * by old RTL2831U.

 Retry failed I2C messages */

 attach demodulator */

 set output values */

 set GPIO6 low */

 set GPIO6 high */

	/*

	 * CEN     always enabled by hardware wiring

	 * RESETN  GPIO4

	 * RXEN    GPIO1

	/*

	 * All tuners are connected to demod muxed I2C adapter. We have to

	 * resolve its parent adapter in order to get handle for this driver

	 * private data. That is a bit hackish solution, GPIO or direct driver

	 * callback would be better...

 attach demodulator */

 set fe callback */

 attach slave demodulator */

 for Si2168 devices use only new I2C write method */

	/*

	 * We continue on reduced mode, without DVB-T2/C, using master

	 * demod, when slave demod fails.

 remove I2C slave demod */

 remove I2C demod */

 0xc4 */

 0xc0 */

 0xc6 */

 0xc6 >> 1 */

		/* since fc0012 includs reading the signal strength delegate

 fc0013 also supports signal strength reading */

 enable GPIO1 and GPIO4 as output */

 Use tuner to get the signal strength */

 copy tuner ops for 2nd FE as tuner is shared */

 register SDR */

 remove platform SDR */

 remove I2C tuner */

 init USB endpoints */

 enable DMA and Full Packet Mode*/

 set EPA maximum packet size to 0x0200 */

 change EPA FIFO length */

 demod adc */

 tuner power, read GPIOs */

 GPIO0 = 1 */

 GPIO4 = 0 */

 GPIO2 = 1, LED on */

 clear stall */

 clear reset */

 GPIO0 = 0 */

 GPIO4 = 1 */

 GPIO2 = 1, LED off */

 set stall */

 set reset */

 demod adc */

 tuner power, write GPIOs */

 streaming EP: stall & reset */

 GPIO3=1, GPIO4=0 */

 suspend? */

 enable PLL */

 disable reset */

 streaming EP: clear stall & reset */

 GPIO4=1 */

 disable PLL */

 streaming EP: set stall & reset */

 control internal demod ADC */

 enable ADC */

 disable ADC */

 bypass slave demod TS through master demod */

 init remote controller */

 NEC standard (16 bit) */

 NEC extended (24 bit) */

 NEC full (32 bit) */

 repeated intentionally to avoid extra keypress */

 init remote controller */

 read raw code from hw */

 let hw receive new code */

 pass data to Kernel IR decoder */

 'flush' ir_raw_event_store_with_filter() */

 disable IR interrupts in order to avoid SDR sample loss */

 load empty to enable rc */

 we program idle len to 0xc0, set timeout to one less */

 RTL2831U devices: */

 RTL2832U devices: */

 RTL2832P devices: */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for AzureWave 6007 DVB-C/T USB2.0 and clones

 *

 * Copyright (c) Henry Wang <Henry.wang@AzureWave.com>

 *

 * This driver was made publicly available by Terratec, at:

 *	http://linux.terratec.de/files/TERRATEC_H7/20110323_TERRATEC_H7_Linux.tar.gz

 * The original driver's license is GPL, as declared with MODULE_LICENSE()

 *

 * Copyright (c) 2010-2012 Mauro Carvalho Chehab

 *	Driver modified by in order to work with upstream drxk driver, and

 *	tons of bugs got fixed, and converted to use dvb-usb-v2.

 Known requests (Cypress FX2 firmware + az6007 "private" ones*/

 remote control stuff (does not work with my box) */

 flags */

 n_slots */

 Attach mt2063 to DVB-C frontend */

 I2C */

			/*

			 * A write + read xfer for the same address, where

			 * the first xfer has just 1 byte length.

			 * Need to join both into one operation

 write bytes */

 read bytes */

 Try to read the mac address */

 DVB USB Driver stuff */

 ditch get_rc_config as it can't work (TS35 remote, I believe it's rc5) */

 usb specific object needed to register this driver with the usb subsystem */

	/*

	 * FIXME: need to implement reset_resume, likely with

	 * dvb-usb-v2 core support

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  mxl111sf-tuner.c - driver for the MaxLinear MXL111SF CMOS tuner

 *

 *  Copyright (C) 2010-2014 Michael Krufky <mkrufky@linuxtv.org>

 debug */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

	{0x1d, 0x7f, 0x00}, /* channel bandwidth section 1/2/3,

 channel frequency (lo and fractional) */

 channel frequency (hi for integer portion) */

 ------------------------------------------------------------------------ */

 set channel bandwidth */

 ATSC */

 QAM */

 calculate RF channel */

 do round */

 set bandwidth */

 set RF */

 start tune */

 set IF polarity */

 do round */

 stop tune */

 check device mode */

 Fill out registers for channel tune */

 IF tuner mode only */

 ------------------------------------------------------------------------ */

 ATSC */

 US CABLE */

 ------------------------------------------------------------------------ */

 wake from standby handled by usb driver */

 enter standby mode handled by usb driver */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 4.0   MHz */

 4.5   MHz */

 4.57  MHz */

 5.0   MHz */

 5.38  MHz */

 6.0   MHz */

 6.28  MHz */

 7.2   MHz */

 35.25 MHz */

 36    MHz */

 36.15 MHz */

 44    MHz */

 ------------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Intel CE6230 DVB USB driver

 *

 * Copyright (C) 2009 Antti Palosaari <crope@iki.fi>

 write */

 read */

 avoid I2C errors */

 read request, copy returned data to return buf */

 I2C */

 Callbacks for DVB USB */

	/* InterfaceNumber 1 / AlternateSetting 0     idle

 DVB USB Driver stuff */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  mxl111sf-gpio.c - driver for the MaxLinear MXL111SF

 *

 *  Copyright (C) 2010-2014 Michael Krufky <mkrufky@linuxtv.org>

 ------------------------------------------------------------------------- */

 invalid pin */

 invalid pin */

 ------------------------------------------------------------------------- */

 0x17 <6> */

 0x18 <0> */

 0x18 <1> */

 0x3D <7> */

 0x12 <2> */

 0x15 <6> */

 0x3D <4> */

 0x82 <4> */

 0x82 <5> */

 0x82 <6> */

 0x82 <7> */

 0x84 <4> */

 0x84 <5> */

 0x84 <6> */

 0x84 <7> */

 0x89 <4> */

 0x89 <5> */

 0x89 <6> */

 0x89 <7> */

 mpeg_mode = 1 */

 mpeg_par_en = 1 */

 mpeg_ser_en = 0 */

 mpg_in_mux = 0 */

 bt656_enable = 0 */

 i2s_enable = 0 */

 spi_mode = 0 */

 mclk_en_ctrl = 1 */

 mperr_en_ctrl = 1 */

 mdval_en_ctrl = 1 */

 mpsyn_en_ctrl = 1 */

 mdat_en_ctrl[3:0] = 0xF */

 mdat_en_ctrl[7:4] = 0xF */

 mpeg_mode = 1 */

 mpeg_par_en = 0 */

 mpeg_ser_en = 1 */

 mpg_in_mux = 0 */

 bt656_enable = 0 */

 i2s_enable = 0 */

 spi_mode = 0 */

 mclk_en_ctrl = 1 */

 mperr_en_ctrl = 1 */

 mdval_en_ctrl = 1 */

 mpsyn_en_ctrl = 1 */

 mdat_en_ctrl[3:0] = 0xF */

 mdat_en_ctrl[7:4] = 0xF */

 mpeg_mode = 0 */

 mpeg_par_en = 0 */

 mpeg_ser_en = 0 */

 mpg_in_mux = 0 */

 bt656_enable = 0 */

 i2s_enable = 0 */

 spi_mode = 0 */

 mclk_en_ctrl = 0 */

 mperr_en_ctrl = 0 */

 mdval_en_ctrl = 0 */

 mpsyn_en_ctrl = 0 */

 mdat_en_ctrl[3:0] = 0x0 */

 mdat_en_ctrl[7:4] = 0x0 */

 mpeg_mode = 0 */

 mpeg_par_en = 0 */

 mpeg_ser_en = 1 */

 mpg_in_mux = 0 */

 bt656_enable = 0 */

 i2s_enable = 0 */

 spi_mode = 0 */

 mclk_en_ctrl = 0 */

 mperr_en_ctrl = 0 */

 mdval_en_ctrl = 0 */

 mpsyn_en_ctrl = 0 */

 mdat_en_ctrl[3:0] = 0x0 */

 mdat_en_ctrl[7:4] = 0x0 */

 mpeg_mode = 0 */

 mpeg_par_en = 0 */

 mpeg_ser_en = 1 */

 mpg_in_mux = 1 */

 bt656_enable = 0 */

 i2s_enable = 0 */

 spi_mode = 0 */

 mclk_en_ctrl = 0 */

 mperr_en_ctrl = 0 */

 mdval_en_ctrl = 0 */

 mpsyn_en_ctrl = 0 */

 mdat_en_ctrl[3:0] = 0x0 */

 mdat_en_ctrl[7:4] = 0x0 */

 mpeg_mode = 0 */

 mpeg_par_en = 0 */

 mpeg_ser_en = 1 */

 mpg_in_mux = 1 */

 bt656_enable = 0 */

 i2s_enable = 1 */

 spi_mode = 1 */

 mclk_en_ctrl = 0 */

 mperr_en_ctrl = 0 */

 mdval_en_ctrl = 0 */

 mpsyn_en_ctrl = 0 */

 mdat_en_ctrl[3:0] = 0x0 */

 mdat_en_ctrl[7:4] = 0x0 */

 mpeg_mode = 0 */

 mpeg_par_en = 0 */

 mpeg_ser_en = 1 */

 mpg_in_mux = 0 */

 bt656_enable = 0 */

 i2s_enable = 1 */

 spi_mode = 1 */

 mclk_en_ctrl = 0 */

 mperr_en_ctrl = 0 */

 mdval_en_ctrl = 0 */

 mpsyn_en_ctrl = 0 */

 mdat_en_ctrl[3:0] = 0x0 */

 mdat_en_ctrl[7:4] = 0x0 */

 mpeg_mode = 0 */

 mpeg_par_en = 1 */

 mpeg_ser_en = 0 */

 mpg_in_mux = 0 */

 bt656_enable = 0 */

 i2s_enable = 0 */

 spi_mode = 0 */

 mclk_en_ctrl = 0 */

 mperr_en_ctrl = 0 */

 mdval_en_ctrl = 0 */

 mpsyn_en_ctrl = 0 */

 mdat_en_ctrl[3:0] = 0x0 */

 mdat_en_ctrl[7:4] = 0x0 */

 mpeg_mode = 0 */

 mpeg_par_en = 0 */

 mpeg_ser_en = 0 */

 mpg_in_mux = 0 */

 bt656_enable = 1 */

 i2s_enable = 1 */

 spi_mode = 0 */

 mclk_en_ctrl = 0 */

 mperr_en_ctrl = 0 */

 mdval_en_ctrl = 0 */

 mpsyn_en_ctrl = 0 */

 mdat_en_ctrl[3:0] = 0x0 */

 mdat_en_ctrl[7:4] = 0x0 */

 mpeg_mode = 1 */

 mpeg_par_en = 0 */

 mpeg_ser_en = 0 */

 mpg_in_mux = 0 */

 bt656_enable = 0 */

 i2s_enable = 0 */

 spi_mode = 0 */

 mclk_en_ctrl = 0 */

 mperr_en_ctrl = 0 */

 mdval_en_ctrl = 0 */

 mpsyn_en_ctrl = 0 */

 mdat_en_ctrl[3:0] = 0x0 */

 mdat_en_ctrl[7:4] = 0x0 */

 ------------------------------------------------------------------------- */

 write protect enabled, signal LEDs off */

 read current GPIO levels from flip-flop */

 prepare write buffer with current GPIO levels */

 clear the desired GPIO */

 set the desired GPIO value */

 write new GPIO levels to flip-flop */

 write protect enabled, signal LEDs off */

 configure all pins as outputs */

 read current GPIO levels from flip-flop */

 ------------------------------------------------------------------------ */

/*	GPO:

 *	3 - ATSC/MH#   | 1 = ATSC transport, 0 = MH transport      | default 0

 *	4 - ATSC_RST## | 1 = ATSC enable, 0 = ATSC Reset           | default 0

 *	5 - ATSC_EN    | 1 = ATSC power enable, 0 = ATSC power off | default 0

 *	6 - MH_RESET#  | 1 = MH enable, 0 = MH Reset               | default 0

 *	7 - MH_EN      | 1 = MH power enable, 0 = MH power off     | default 0

 DVBT / STANDBY */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Afatech AF9035 DVB USB driver

 *

 * Copyright (C) 2009 Antti Palosaari <crope@iki.fi>

 * Copyright (C) 2012 Antti Palosaari <crope@iki.fi>

 Max transfer size done by I2C transfer functions */

 send header size */

 rece header size */

 buffer overflow check */

 calc and add checksum */

 no ack for these packets */

 no ack for those packets */

 verify checksum */

 check status */

 fw returns status 1 when IR code was not received */

 read request, copy returned data to return buf */

 write multiple registers */

 read multiple registers */

 write single register */

 read single register */

 write single register with mask */

 no need for read if whole reg is written */

 find first free client */

 register I2C device */

 increase I2C driver usage count */

 find last used client */

 decrease I2C driver usage count */

 unregister I2C device */

	/*

	 * AF9035 I2C sub header is 5 bytes long. Meaning of those bytes are:

	 * 0: data len

	 * 1: I2C addr << 1

	 * 2: reg addr len

	 *    byte 3 and 4 can be used as reg addr

	 * 3: reg addr MSB

	 *    used when reg addr len is set to 2

	 * 4: reg addr LSB

	 *    used when reg addr len is set to 1 or 2

	 *

	 * For the simplify we do not use register addr at all.

	 * NOTE: As a firmware knows tuner type there is very small possibility

	 * there could be some tuner I2C hacks done by firmware and this may

	 * lead problems if firmware expects those bytes are used.

	 *

	 * TODO: Here is few hacks. AF9035 chip integrates AF9033 demodulator.

	 * IT9135 chip integrates AF9033 demodulator and RF tuner. For dual

	 * tuner devices, there is also external AF9033 demodulator connected

	 * via external I2C bus. All AF9033 demod I2C traffic, both single and

	 * dual tuner configuration, is covered by firmware - actual USB IO

	 * looks just like a memory access.

	 * In case of IT913x chip, there is own tuner driver. It is implemented

	 * currently as a I2C driver, even tuner IP block is likely build

	 * directly into the demodulator memory space and there is no own I2C

	 * bus. I2C subsystem does not allow register multiple devices to same

	 * bus, having same slave address. Due to that we reuse demod address,

	 * shifted by one bit, on that case.

	 *

	 * For IT930x we use a different command and the sub header is

	 * different as well:

	 * 0: data len

	 * 1: I2C bus (0x03 seems to be only value used)

	 * 2: I2C addr << 1

 TODO: correct limits > 40 */

 demod access via firmware interface */

 I2C write + read */

 I2C bus */

 reg addr MSB */

 reg addr LSB */

 Keep prev behavior for write req len > 2*/

 reg addr len */

 Use reg addr fields if write req len <= 2 */

 TODO: correct limits > 40 */

 demod access via firmware interface */

 I2C write */

 I2C bus */

 reg addr len */

 reg addr MSB */

 reg addr LSB */

 TODO: correct limits > 40 */

 I2C read */

 I2C bus */

 reg addr len */

 reg addr MSB */

 reg addr LSB */

		/*

		 * We support only three kind of I2C transactions:

		 * 1) 1 x write + 1 x read (repeated start)

		 * 2) 1 x write

		 * 3) 1 x read

 Check if eeprom exists */

 Read and store eeprom */

 check for dual tuner mode */

 AF9035 */

	/*

	 * Thanks to Daniel Glöckner <daniel-gl@gmx.net> about that info!

	 *

	 * byte 0: MCS 51 core

	 *  There are two inside the AF9035 (1=Link and 2=OFDM) with separate

	 *  address spaces

	 * byte 1-2: Big endian destination address

	 * byte 3-4: Big endian number of data bytes following the header

	 * byte 5-6: Big endian header checksum, apparently ignored by the chip

	 *  Calculated as ~(h[0]*256+h[1]+h[2]*256+h[3]+h[4]*256)

 download begin packet */

 download firmware packet(s) */

 download end packet */

 print warn if firmware is bad, continue and see what happens */

	/*

	 * There seems to be following firmware header. Meaning of bytes 0-3

	 * is unknown.

	 *

	 * 0: 3

	 * 1: 0, 1

	 * 2: 0

	 * 3: 1, 2, 3

	 * 4: addr MSB

	 * 5: addr LSB

	 * 6: count of data bytes ?

	/*

	 * In case of dual tuner configuration we need to do some extra

	 * initialization in order to download firmware to slave demod too,

	 * which is done by master demod.

	 * Master feeds also clock and controls power via GPIO.

 configure gpioh1, reset & power slave demod */

 tell the slave I2C address */

 Use default I2C address if eeprom has no address set */

 8-bit format used by chip */

 enable clock out */

 firmware loaded, request boot */

 ensure firmware starts */

 Demod I2C address */

 feed clock for integrated RF tuner */

 Remote controller to NEC polling by default */

		/*

		 * IT930x is an USB bridge, only single demod-single tuner

		 * configurations seen so far.

 Remote controller */

 Read 2nd demodulator I2C address. 8-bit format on eeprom */

 tuner */

 tuner sanity check */

 IT9135 BX (v2) */

 IT9135 AX (v1) */

 AF9035 */

 disable dual mode if driver does not support it */

 tuner IF frequency */

 shift for the 2nd tuner params */

 get demod clock */

 Some MXL5007T devices cannot properly handle tuner I2C read ops. */

	/*

	 * CEN     always enabled by hardware wiring

	 * RESETN  GPIOT3

	 * RXEN    GPIOT2

 Tuner enable */

 LED */

 unsupported tuner */

 disable I2C-gate */

/*

 * The I2C speed register is calculated with:

 *	I2C speed register = (1000000000 / (24.4 * 16 * I2C_speed))

 *

 * The default speed register for it930x is 7, with means a

 * speed of ~366 kbps

 I2C master bus 2 clock speed 366k */

 I2C master bus 1,3 clock speed 366k */

 set gpio11 low */

 Tuner enable using gpiot2_en, gpiot2_on and gpiot2_o (reset) */

 I2C bus select hack */

	/*

	 * XXX: Hack used in that function: we abuse unused I2C address bit [7]

	 * to carry info about used I2C bus for dual tuner configuration.

		/*

		 * AF9035 gpiot3 = TUA9001 RESETN

		 * AF9035 gpiot2 = TUA9001 RXEN

 configure gpiot2 and gpiot2 as output */

 attach tuner */

 I2C bus hack */

 attach tuner */

 attach tuner */

 Tuner enable using gpiot2_o, gpiot2_en and gpiot2_on  */

 attach tuner */

		/*

		 * AF9035 gpiot2 = FC0012 enable

		 * XXX: there seems to be something on gpioh8 too, but on my

		 * my test I didn't find any difference.

 configure gpiot2 as output and high */

			/*

			 * FIXME: That belongs for the FC0012 driver.

			 * Write 02 to FC0012 master tuner register 0d directly

			 * in order to make slave tuner working.

	/*

	 * HACK: The Logilink VG0022A and TerraTec TC2 Stick have

	 * a bug: when the si2157 firmware that came with the device

	 * is replaced by a new one, the I2C transfers to the tuner

	 * will return just 0xff.

	 *

	 * Probably, the vendor firmware has some patch specifically

	 * designed for this device. So, we can't replace by the

	 * generic firmware. The right solution would be to extract

	 * the si2157 firmware from the original driver and ask the

	 * driver to load the specifically designed firmware, but,

	 * while we don't have that, the next best solution is to just

	 * keep the original firmware at the device.

 init endpoints */

 ignore_sync_byte */

 dvbt_inten */

 mpeg_full_speed */

 dvbt_en */

 mp2_sw_rst, reset EP4 */

 ep4_tx_en, disable EP4 */

 ep4_tx_nak, disable EP4 NAK */

 ep4_tx_en, enable EP4 */

 ep5_tx_en, disable EP5 */

 ep5_tx_nak, disable EP5 NAK */

 enable EP5 */

 mp2_sw_rst, disable */

 slew rate ctrl: slew rate boosts */

 Bit 0 of output driving control */

 Bit 1 of output driving control */

 Bit 2 of output driving control */

 suspend gpio1 for TS-C */

 gpio1 */

 gpio1 */

 gpio1 */

 suspend gpio7 for TS-D */

 gpio7 */

 gpio7 */

 gpio7 */

 suspend gpio13 for TS-B */

 gpio13 */

 gpio13 */

 gpio13 */

 suspend gpio14 for TS-E */

 gpio14 */

 gpio14 */

 gpio14 */

 suspend gpio15 for TS-A */

 gpio15 */

 gpio15 */

 gpio15 */

 ts_in_src, serial */

 ts0_aggre_mode */

 ts0_sync_byte */

 ts0_en */

 ts_fail_ignore */

 init endpoints */

 NEC standard 16bit */

 NEC extended 24bit */

 NEC full code 32bit */

 don't activate rc if in HID mode or if not available */

 NEC */

 RC6 */

 load empty to enable rc */

	/*

	 * There is two devices having same ID but different chipset. One uses

	 * AF9015 and the other IT9135 chipset. Only difference seen on lsusb

	 * is iManufacturer string.

	 *

	 * idVendor           0x0ccd TerraTec Electronic GmbH

	 * idProduct          0x0099

	 * bcdDevice            2.00

	 * iManufacturer           1 Afatech

	 * iProduct                2 DVB-T 2

	 *

	 * idVendor           0x0ccd TerraTec Electronic GmbH

	 * idProduct          0x0099

	 * bcdDevice            2.00

	 * iManufacturer           1 ITE Technologies, Inc.

	 * iProduct                2 DVB-T TV Stick

/* interface 0 is used by DVB-T receiver and

 AF9035 devices */

 IT9135 devices */

 XXX: that same ID [0ccd:0099] is used by af9015 driver too */

 IT930x devices */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DVB USB Linux driver for Afatech AF9015 DVB-T USB2.0 receiver

 *

 * Copyright (C) 2007 Antti Palosaari <crope@iki.fi>

 *

 * Thanks to Afatech who kindly provided information.

 send header size */

 rece header size */

 set I2C direction */

 Buffer overflow check */

	/*

	 * Write receives seq + status = 2 bytes

	 * Read receives seq + status + data = 2 + N bytes

 no ack for these packets */

 check status */

 read request, copy returned data to return buf */

	/*

	 * I2C multiplexing:

	 * There could be two tuners, both using same I2C address. Demodulator

	 * I2C-gate is only possibility to select correct tuner.

	 *

	 * ...........................................

	 * . AF9015 integrates AF9013 demodulator    .

	 * . ____________               ____________ .             ____________

	 * .|   USB IF   |             |   demod    |.            |   tuner    |

	 * .|------------|             |------------|.            |------------|

	 * .|   AF9015   |             |   AF9013   |.            |   MXL5003  |

	 * .|            |--+--I2C-----|-----/ -----|.----I2C-----|            |

	 * .|            |  |          | addr 0x1c  |.            |  addr 0x63 |

	 * .|____________|  |          |____________|.            |____________|

	 * .................|.........................

	 *                  |           ____________               ____________

	 *                  |          |   demod    |             |   tuner    |

	 *                  |          |------------|             |------------|

	 *                  |          |   AF9013   |             |   MXL5003  |

	 *                  +--I2C-----|-----/ -----|-----I2C-----|            |

	 *                             | addr 0x1d  |             |  addr 0x63 |

	 *                             |____________|             |____________|

 i2c write */

 i2c write + read */

 i2c read */

 Calc checksum, we need it when copy firmware to slave demod */

 Max payload size */

 2^31 + 2^29 - 2^25 + 2^22 - 2^19 - 2^16 + 1 */

 hash (and dump) eeprom */

 read eeprom */

 calculate checksum */

 IR remote controller */

 first message will timeout often due to possible hw bug */

 TS mode - one or two receivers */

 read 2nd demodulator I2C address */

 xtal */

 IF frequency */

 MT2060 IF1 */

 tuner */

	/*

	 * AverMedia AVerTV Volar Black HD (A850) device have bad EEPROM

	 * content :-( Override some wrong values here. Ditto for the

	 * AVerTV Red HD+ (A850T) device.

 disable dual mode */

 set correct IF */

 USB IF stream settings */

 1st USB IF (EP4) stream settings */

 2nd USB IF (EP5) stream settings */

 TS IF settings */

 Adapter 0 stream on. EP4: clear NAK, enable, clear reset */

 Adapter 1 stream on. EP5: clear NAK, enable, clear reset */

 Adapter 0 stream off. EP4: set reset, disable, set NAK */

 Adapter 1 stream off. EP5: set reset, disable, set NAK */

 override demod callbacks for resource locking */

 override demod callbacks for resource locking */

 override demod callbacks for resource locking */

 override demod callbacks for resource locking */

 override tuner callbacks for resource locking */

 override tuner callbacks for resource locking */

 Check whether firmware is already running */

 Set i2c clock to 625kHz to speed up firmware copy */

 Copy firmware from master demod to slave demod */

 Set i2c clock to 125kHz */

 Boot firmware */

 Poll firmware ready */

 Check firmware status. 0c=OK, 04=fail */

 copy firmware to 2nd demodulator */

 Wait 2nd demodulator ready */

 Add I2C demod */

	/*

	 * AF9015 firmware does not like if it gets interrupted by I2C adapter

	 * request on some critical phases. During normal operation I2C adapter

	 * is used only 2nd demodulator and tuner on dual tuner devices.

	 * Override demodulator callbacks and use mutex for limit access to

	 * those "critical" paths to keep AF9015 happy.

 Remove I2C demod */

 max wr bytes AF9015 I2C adap can handle at once */

 init RC canary */

 MYGICTV U718 */

 LC-Power LC-USB-DVBT */

 read registers needed to detect remote controller code */

 If any of these are non-zero, assume invalid data */

 Check for repeat of previous code */

 Only process key if canary killed */

 Reset the canary */

 Remember this key */

 NEC */

 NEC extended*/

 32 bit NEC */

 Invalidate last keypress */

 Not really needed, but helps with debug */

 allow random errors as dvb-usb will stop polling on error */

 try to load remote based module param */

 try to load remote based eeprom hash */

 try to load remote based USB iManufacturer string */

		/*

		 * Check USB manufacturer and product strings and try

		 * to determine correct remote in case of chip vendor

		 * reference IDs are used.

		 * DO NOT ADD ANYTHING NEW HERE. Use hashes instead.

			/*

			 * iManufacturer 1 MSI

			 * iProduct      2 MSI K-VOX

 load empty to enable rc */

	/*

	 * There is two devices having same ID but different chipset. One uses

	 * AF9015 and the other IT9135 chipset. Only difference seen on lsusb

	 * is iManufacturer string.

	 *

	 * idVendor           0x0ccd TerraTec Electronic GmbH

	 * idProduct          0x0099

	 * bcdDevice            2.00

	 * iManufacturer           1 Afatech

	 * iProduct                2 DVB-T 2

	 *

	 * idVendor           0x0ccd TerraTec Electronic GmbH

	 * idProduct          0x0099

	 * bcdDevice            2.00

	 * iManufacturer           1 ITE Technologies, Inc.

	 * iProduct                2 DVB-T TV Stick

/*

 * Interface 0 is used by DVB-T receiver and

 * interface 1 is for remote controller (HID)

 XXX: that same ID [0ccd:0099] is used by af9035 driver too */

 usb specific object needed to register this driver with the usb subsystem */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DVB USB framework

 *

 * Copyright (C) 2004-6 Patrick Boettcher <patrick.boettcher@posteo.de>

 * Copyright (C) 2012 Antti Palosaari <crope@iki.fi>

 an answer is expected */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant linux driver for

 *

 * DM04/QQBOX DVB-S USB BOX	LME2510C + SHARP:BS2F7HZ7395

 *				LME2510C + LG TDQY-P001F

 *				LME2510C + BS2F7HZ0194

 *				LME2510 + LG TDQY-P001F

 *				LME2510 + BS2F7HZ0194

 *

 * MVB7395 (LME2510C+SHARP:BS2F7HZ7395)

 * SHARP:BS2F7HZ7395 = (STV0288+Sharp IX2505V)

 *

 * MV001F (LME2510+LGTDQY-P001F)

 * LG TDQY - P001F =(TDA8263 + TDA10086H)

 *

 * MVB0001F (LME2510C+LGTDQT-P001F)

 *

 * MV0194 (LME2510+SHARP:BS2F7HZ0194)

 * SHARP:BS2F7HZ0194 = (STV0299+IX2410)

 *

 * MVB0194 (LME2510C+SHARP0194)

 *

 * LME2510C + M88RS2000

 *

 * For firmware see Documentation/admin-guide/media/lmedm04.rst

 *

 * I2C addresses:

 * 0xd0 - STV0288	- Demodulator

 * 0xc0 - Sharp IX2505V	- Tuner

 * --

 * 0x1c - TDA10086   - Demodulator

 * 0xc0 - TDA8263    - Tuner

 * --

 * 0xd0 - STV0299	- Demodulator

 * 0xc0 - IX2410	- Tuner

 *

 * VID = 3344  PID LME2510=1122 LME2510C=1120

 *

 * Copyright (C) 2010 Malcolm Priestley (tvboxspy@gmail.com)

 * LME2510(C)(C) Leaguerme (Shenzhen) MicroElectronics Co., Ltd.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 *

 * Known Issues :

 *	LME2510: Non Intel USB chipsets fail to maintain High Speed on

 * Boot or Hot Plug.

 *

 * QQbox suffers from noise on LNB voltage.

 *

 *	LME2510: SHARP:BS2F7HZ0194(MV0194) cannot cold reset and share system

 * with other tuners. After a cold reset streaming will not start.

 *

 * M88RS2000 suffers from loss of lock.

 debug */

 Frontend original calls */

Restart Stream Command*/

 Convert range from 0x00-0xff to 0x0000-0xffff */

 Tweak for earlier firmware*/

 Interrupt will also throw just BIT 0 as lock */

	/* Interrupt urb is due every 48 msecs while streaming the buffer

	 * stores up to 4 periods if missed. Allow 200 msec for next interrupt.

 Quirk of pipe reporting PIPE_BULK but behaves as interrupt */

 Streaming is started by FE_HAS_LOCK */

 mutex is here only to avoid collision with I2C */

 Timeout of interrupt reached on RS2000 */

 Start the Interrupt*/

 Turn PID filter on the fly by module option */

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ZyDAS ZD1301 driver (USB interface)

 *

 * Copyright (C) 2015 Antti Palosaari <crope@iki.fi>

 bulk USB control message */

			/*

			 * Chip replies often with 3 byte len stub. On that case

			 * we have to query new reply.

 Add platform demod */

 Add I2C tuner */

 Remove I2C tuner */

 Remove platform demod */

 Usb specific object needed to register this driver with the usb subsystem */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  mxl111sf-phy.c - driver for the MaxLinear MXL111SF

 *

 *  Copyright (C) 2010-2014 Michael Krufky <mkrufky@linuxtv.org>

 ED_LE_WIN_OLD = 0 */

 NEGATE_Q */

 DIG_RFREFSELECT = 12 */

 DIG_REG_AMP = 4 */

 SSPUR_FS_PRIO = 4 */

 SPUR_ROT_PRIO_VAL = 1 */

 INF_FILT1_THD_SC = 100 */

 INF_FILT2_THD_SC = 100 */

 INF_THD = 240 */

 DFE_DLY = 11 */

 Change to page 1 */

 DSM_FERR_BYPASS = 1 */

 DIG_FREQ_CORR = 1 */

 SPUR_TEST_NOISE_TH = 15 */

 SPUR_TEST_NOISE_PAPR = 12 */

 Change to page 0 */

 AIC */

 get out of reset */

 set device mode */

				      0x00 : /* enable impulse noise filter,

				      0x40); /* disable impulse noise filter,

 power up tuner */

 initialize TSIF as input port of MxL1X1SF for MPEG2 data transfer */

 Enable PIN MUX */

 Configure MPEG Clock phase */

	/* Configure data input mode, MPEG Valid polarity, MPEG Sync polarity

 Data Input mode */

 Disable serial mode */

 Enable Parallel mode */

 Disable Parallel mode */

 Enable Serial Mode */

		/* If serial interface is chosen, configure

 MPEG Sync polarity */

 MPEG Valid polarity */

 pin mux mode, Choose 656/I2S input */

 Enable I2S */

		{0x17, 0xe0, 0x20}, /* Input, MPEG MODE USB,

				       Inverted 656 Clock, I2S_SOFT_RESET,

 AUDIO_IRQ_CLR (Overflow Indicator) */

 Change to Control Page */

 I2S_MODE & BT656_SRC_SEL for FPGA only */

 current value will be set for both automatic & manual IDAC control */

 enable manual control of IDAC */

 enable current sinking in manual mode */

 disable current sinking in manual mode */

 disable manual control of IDAC */

 set hysteresis value  reg: 0x0B<5:0> */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DVB USB Linux driver for Alcor Micro AU6610 DVB-T USB2.0.

 *

 * Copyright (C) 2006 Antti Palosaari <crope@iki.fi>

	/*

	 * allocate enough for all known requests,

	 * read returns 5 and write 6 bytes

 requested value is always 5th byte in buffer */

 write-only */

 rw */

 I2C */

 write/read request */

 Callbacks for DVB USB */

 TODO: this functionality belongs likely to the streaming control */

 bInterfaceNumber 0, bAlternateSetting 5 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for DVBSky USB2.0 receiver

 *

 * Copyright (C) 2013 Max nibble <nibble.max@gmail.com>

2000*/

 fe hook functions*/

 GPIO */

 I2C */

 single read */

 write */

 write then read */

 it need resync slave fifo when signal change from unlock to lock.*/

 attach demod */

 attach tuner */

 delegate signal strength measurement to tuner */

 hook fe: need to resync the slave fifo when signal locks. */

 hook fe: LNB off/on is control by Cypress usb chip. */

high part of address*/

low part of address*/

 attach demod */

 attach tuner */

 attach ci controller */

 delegate signal strength measurement to tuner */

 hook fe: need to resync the slave fifo when signal locks. */

 hook fe: LNB off/on is control by Cypress usb chip. */

 attach demod */

 attach tuner */

 attach ci controller */

 attach demod */

 attach tuner */

 attach demod */

 attach tuner */

 DVB USB Driver stuff */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  mxl111sf-demod.c - driver for the MaxLinear MXL111SF DVB-T demodulator

 *

 *  Copyright (C) 2010-2014 Michael Krufky <mkrufky@linuxtv.org>

 debug */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 TPS */

 bit<2:0> - 000:1/2, 001:2/3, 010:3/4, 011:5/6, 100:7/8 */

 Constellation, 00 : QPSK, 01 : 16QAM, 10:64QAM */

 FFT Mode, 00:2K, 01:8K, 10:4K */

 00:1/32, 01:1/16, 10:1/8, 11:1/4 */

 bit<6:4> - 000:Non hierarchy, 001:1, 010:2, 011:4 */

 ------------------------------------------------------------------------ */

 LOCKS */

 ------------------------------------------------------------------------ */

 change page to 1 */

 change page to 0 */

 ------------------------------------------------------------------------ */

 resets TS Packet error count */

 After setting 7th bit of V5_PER_COUNT_RESET_REG, it should be reset to 0. */

 returns TS Packet error count */

 PER Count = FEC_PER_COUNT * (2 ** (FEC_PER_SCALE * 4)) */

 FEC_PER_COUNT Register */

 FEC_PER_SCALE Register */

/* FIXME: leaving this enabled breaks the build on some architectures,

 * and we shouldn't have any floating point math in the kernel, anyway.

 *

 * These macros need to be re-written, but it's harmless to simply

 0.1 dB */

 false positives? */

 FIXME */ ? INVERSION_ON : INVERSION_OFF;

 SPDX-License-Identifier: GPL-2.0

/* usb-urb.c is part of the DVB USB library.

 *

 * Copyright (C) 2004-6 Patrick Boettcher (patrick.boettcher@posteo.de)

 * see dvb-usb-init.c for copyright information.

 *

 * This file keeps functions for initializing and handling the

 * BULK and ISOC USB data transfers in a generic way.

 * Can be used for DVB-only and also, that's the plan, for

 * Hybrid USB devices (analog and DVB).

 URB stuff for streaming */

 success */

 NAK */

 kill */

 error */

 stop the URB */

 free the URBs */

 allocate the URBs */

 allocate the URBs */

 check allocated buffers are large enough for the request */

 check if all fields are same */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * E3C EC168 DVB USB driver

 *

 * Copyright (C) 2009 Antti Palosaari <crope@iki.fi>

 write */

 read */

 avoid I2C errors */

 read request, copy returned data to return buf */

 I2C */

 reg */

 bytes to read */

 val */

 reg */

 val */

 I2C addr */

 Callbacks for DVB USB */

 max packet size */

 set "warm"? */

 really needed - no idea what does */

 activate tuner I2C? */

 not real address, demod is integrated */

 DVB USB Driver stuff */

/* bInterfaceNumber 0 is HID

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DVB USB Linux driver for Anysee E30 DVB-C & DVB-T USB2.0 receiver

 *

 * Copyright (C) 2007 Antti Palosaari <crope@iki.fi>

 *

 * TODO:

 * - add smart card reader support for Conditional Access (CA)

 *

 * Card reader in Anysee is nothing more than ISO 7816 card reader.

 * There is no hardware CAM in any Anysee device sold.

 * In my understanding it should be implemented by making own module

 * for ISO 7816 card reader, like dvb_ca_en50221 is implemented. This

 * module registers serial interface that can be used to communicate

 * with any ISO 7816 smart card.

 *

 * Any help according to implement serial smart card reader support

 * is highly welcome!

	/* We need receive one message more after dvb_usb_generic_rw due

	/* TODO FIXME: dvb_usb_generic_rw() fails rarely with error code -32

	 * (EPIPE, Broken pipe). Function supports currently msleep() as a

	 * parameter but I would not like to use it, since according to

	 * Documentation/timers/timers-howto.rst it should not be used such

	 * short, under < 20ms, sleeps. Repeating failed message would be

	 * better choice as not to add unwanted delays...

	 * Fixing that correctly is one of those or both;

	 * 1) use repeat if possible

	 * 2) add suitable delay

 get answer, retry few times if error returned */

 receive 2nd answer */

 all retries failed, it is fatal */

 read request, copy returned data to return buf */

 write single register with mask */

 no need for read if whole reg is written */

 read single register with mask */

 find position of the first bit */

 I2C */

 4 + 48 (I2C WR USB command header + I2C WR max) */

 Callbacks for DVB USB */

 1 Vpp */

 (0xda >> 1) */

/*

 * New USB device strings: Mfr=1, Product=2, SerialNumber=0

 * Manufacturer: AMT.CO.KR

 *

 * E30 VID=04b4 PID=861f HW=2 FW=2.1 Product=????????

 * PCB: ?

 * parts: DNOS404ZH102A(MT352, DTT7579(?))

 *

 * E30 VID=04b4 PID=861f HW=2 FW=2.1 "anysee-T(LP)"

 * PCB: PCB 507T (rev1.61)

 * parts: DNOS404ZH103A(ZL10353, DTT7579(?))

 * OEA=0a OEB=00 OEC=00 OED=ff OEE=00

 * IOA=45 IOB=ff IOC=00 IOD=ff IOE=00

 *

 * E30 Plus VID=04b4 PID=861f HW=6 FW=1.0 "anysee"

 * PCB: 507CD (rev1.1)

 * parts: DNOS404ZH103A(ZL10353, DTT7579(?)), CST56I01

 * OEA=80 OEB=00 OEC=00 OED=ff OEE=fe

 * IOA=4f IOB=ff IOC=00 IOD=06 IOE=01

 * IOD[0] ZL10353 1=enabled

 * IOA[7] TS 0=enabled

 * tuner is not behind ZL10353 I2C-gate (no care if gate disabled or not)

 *

 * E30 C Plus VID=04b4 PID=861f HW=10 FW=1.0 "anysee-DC(LP)"

 * PCB: 507DC (rev0.2)

 * parts: TDA10023, DTOS403IH102B TM, CST56I01

 * OEA=80 OEB=00 OEC=00 OED=ff OEE=fe

 * IOA=4f IOB=ff IOC=00 IOD=26 IOE=01

 * IOD[0] TDA10023 1=enabled

 *

 * E30 S2 Plus VID=04b4 PID=861f HW=11 FW=0.1 "anysee-S2(LP)"

 * PCB: 507SI (rev2.1)

 * parts: BS2N10WCC01(CX24116, CX24118), ISL6423, TDA8024

 * OEA=80 OEB=00 OEC=ff OED=ff OEE=fe

 * IOA=4d IOB=ff IOC=00 IOD=26 IOE=01

 * IOD[0] CX24116 1=enabled

 *

 * E30 C Plus VID=1c73 PID=861f HW=15 FW=1.2 "anysee-FA(LP)"

 * PCB: 507FA (rev0.4)

 * parts: TDA10023, DTOS403IH102B TM, TDA8024

 * OEA=80 OEB=00 OEC=ff OED=ff OEE=ff

 * IOA=4d IOB=ff IOC=00 IOD=00 IOE=c0

 * IOD[5] TDA10023 1=enabled

 * IOE[0] tuner 1=enabled

 *

 * E30 Combo Plus VID=1c73 PID=861f HW=15 FW=1.2 "anysee-FA(LP)"

 * PCB: 507FA (rev1.1)

 * parts: ZL10353, TDA10023, DTOS403IH102B TM, TDA8024

 * OEA=80 OEB=00 OEC=ff OED=ff OEE=ff

 * IOA=4d IOB=ff IOC=00 IOD=00 IOE=c0

 * DVB-C:

 * IOD[5] TDA10023 1=enabled

 * IOE[0] tuner 1=enabled

 * DVB-T:

 * IOD[0] ZL10353 1=enabled

 * IOE[0] tuner 0=enabled

 * tuner is behind ZL10353 I2C-gate

 * tuner is behind TDA10023 I2C-gate

 *

 * E7 TC VID=1c73 PID=861f HW=18 FW=0.7 AMTCI=0.5 "anysee-E7TC(LP)"

 * PCB: 508TC (rev0.6)

 * parts: ZL10353, TDA10023, DNOD44CDH086A(TDA18212)

 * OEA=80 OEB=00 OEC=03 OED=f7 OEE=ff

 * IOA=4d IOB=00 IOC=cc IOD=48 IOE=e4

 * IOA[7] TS 1=enabled

 * IOE[4] TDA18212 1=enabled

 * DVB-C:

 * IOD[6] ZL10353 0=disabled

 * IOD[5] TDA10023 1=enabled

 * IOE[0] IF 1=enabled

 * DVB-T:

 * IOD[5] TDA10023 0=disabled

 * IOD[6] ZL10353 1=enabled

 * IOE[0] IF 0=enabled

 *

 * E7 S2 VID=1c73 PID=861f HW=19 FW=0.4 AMTCI=0.5 "anysee-E7S2(LP)"

 * PCB: 508S2 (rev0.7)

 * parts: DNBU10512IST(STV0903, STV6110), ISL6423

 * OEA=80 OEB=00 OEC=03 OED=f7 OEE=ff

 * IOA=4d IOB=00 IOC=c4 IOD=08 IOE=e4

 * IOA[7] TS 1=enabled

 * IOE[5] STV0903 1=enabled

 *

 * E7 T2C VID=1c73 PID=861f HW=20 FW=0.1 AMTCI=0.5 "anysee-E7T2C(LP)"

 * PCB: 508T2C (rev0.3)

 * parts: DNOQ44QCH106A(CXD2820R, TDA18212), TDA8024

 * OEA=80 OEB=00 OEC=03 OED=f7 OEE=ff

 * IOA=4d IOB=00 IOC=cc IOD=48 IOE=e4

 * IOA[7] TS 1=enabled

 * IOE[5] CXD2820R 1=enabled

 *

 * E7 PTC VID=1c73 PID=861f HW=21 FW=0.1 AMTCI=?? "anysee-E7PTC(LP)"

 * PCB: 508PTC (rev0.5)

 * parts: ZL10353, TDA10023, DNOD44CDH086A(TDA18212)

 * OEA=80 OEB=00 OEC=03 OED=f7 OEE=ff

 * IOA=4d IOB=00 IOC=cc IOD=48 IOE=e4

 * IOA[7] TS 1=enabled

 * IOE[4] TDA18212 1=enabled

 * DVB-C:

 * IOD[6] ZL10353 0=disabled

 * IOD[5] TDA10023 1=enabled

 * IOE[0] IF 1=enabled

 * DVB-T:

 * IOD[5] TDA10023 0=disabled

 * IOD[6] ZL10353 1=enabled

 * IOE[0] IF 0=enabled

 *

 * E7 PS2 VID=1c73 PID=861f HW=22 FW=0.1 AMTCI=?? "anysee-E7PS2(LP)"

 * PCB: 508PS2 (rev0.4)

 * parts: DNBU10512IST(STV0903, STV6110), ISL6423

 * OEA=80 OEB=00 OEC=03 OED=f7 OEE=ff

 * IOA=4d IOB=00 IOC=c4 IOD=08 IOE=e4

 * IOA[7] TS 1=enabled

 * IOE[5] STV0903 1=enabled

	/*

	 * Check which hardware we have.

	 * We must do this call two times to get reliable values (hw/fw bug).

	/*

	 * Meaning of these info bytes are guessed.

 external I2C gate used for DNOD44CDH086A(TDA18212) tuner module */

 enable / disable tuner access on IOE[4] */

 no frontend sleep control */

 15 */

 E30 Combo Plus */

 E30 C Plus */

 disable DVB-T demod on IOD[0] */

 enable DVB-C demod on IOD[5] */

 enable DVB-C tuner on IOE[0] */

 disable DVB-C demod on IOD[5] */

 enable DVB-T demod on IOD[0] */

 enable DVB-T tuner on IOE[0] */

 18 */

 21 */

 E7 TC */

 E7 PTC */

 disable DVB-T demod on IOD[6] */

 enable DVB-C demod on IOD[5] */

 enable IF route on IOE[0] */

 disable DVB-C demod on IOD[5] */

 enable DVB-T demod on IOD[6] */

 enable IF route on IOE[0] */

 find first free client */

 register I2C device */

 increase I2C driver usage count */

 find last used client */

 decrease I2C driver usage count */

 unregister I2C device */

 2 */

 E30 */

 attach demod */

 attach demod */

 6 */

 E30 Plus */

 enable DVB-T demod on IOD[0] */

 enable transport stream on IOA[7] */

 attach demod */

 10 */

 E30 C Plus */

 enable DVB-C demod on IOD[0] */

 attach demod */

 11 */

 E30 S2 Plus */

 enable DVB-S/S2 demod on IOD[0] */

 attach demod */

 15 */

 E30 Combo Plus */

 E30 C Plus */

 enable tuner on IOE[4] */

 probe TDA18212 */

 disable tuner on IOE[4] */

 disable DVB-T demod on IOD[0] */

 enable DVB-C demod on IOD[5] */

 attach demod */

 TDA18212 config */

 I2C gate for DNOD44CDH086A(TDA18212) tuner module */

 PLL config */

 break out if first frontend attaching fails */

 disable DVB-C demod on IOD[5] */

 enable DVB-T demod on IOD[0] */

 attach demod */

 TDA18212 config */

 I2C gate for DNOD44CDH086A(TDA18212) tuner module */

 PLL config */

 18 */

 21 */

 E7 TC */

 E7 PTC */

 disable DVB-T demod on IOD[6] */

 enable DVB-C demod on IOD[5] */

 attach demod */

 I2C gate for DNOD44CDH086A(TDA18212) tuner module */

 break out if first frontend attaching fails */

 disable DVB-C demod on IOD[5] */

 enable DVB-T demod on IOD[6] */

 attach demod */

 I2C gate for DNOD44CDH086A(TDA18212) tuner module */

 19 */

 22 */

 E7 S2 */

 E7 PS2 */

 enable DVB-S/S2 demod on IOE[5] */

 attach demod */

 20 */

 E7 T2C */

 enable DVB-T/T2/C demod on IOE[5] */

 attach demod */

 we have no frontend :-( */

 2 */

 E30 */

 attach tuner */

 6 */

 E30 Plus */

 attach tuner */

 10 */

 E30 C Plus */

 attach tuner */

 11 */

 E30 S2 Plus */

 attach LNB controller */

 15 */

 E30 Combo Plus */

 E30 C Plus */

		/* Try first attach TDA18212 silicon tuner on IOE[4], if that

 attach tuner */

 copy tuner ops for 2nd FE as tuner is shared */

 attach tuner */

 attach tuner for 2nd FE */

 18 */

 21 */

 E7 TC */

 E7 PTC */

 copy tuner ops for 2nd FE as tuner is shared */

 19 */

 22 */

 E7 S2 */

 E7 PS2 */

 attach tuner */

 attach LNB controller */

 20 */

 E7 T2C */

	/* Remote controller is basic NEC using address byte 0x08.

	   Anysee device RC query returns only two bytes, status and code,

	   address byte is dropped. Also it does not return any value for

	   NEC RCs having address byte other than 0x08. Due to that, we

	   cannot use that device as standard NEC receiver.

	   It could be possible make hack which reads whole code directly

 windows driver uses 500ms */

 detach CI */

	/* There is one interface with two alternate settings.

	   Alternate setting 0 is for bulk transfer.

	   Alternate setting 1 is for isochronous transfer.

 LED light */

 enable IR */

 attach CI */

 DVB USB Driver stuff */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  mxl111sf-i2c.c - driver for the MaxLinear MXL111SF

 *

 *  Copyright (C) 2010-2014 Michael Krufky <mkrufky@linuxtv.org>

 SW-I2C ----------------------------------------------------------------- */

 last bit was 0 so we need to release SDA */

 CLK high for ACK readback */

 drop the CLK after getting ACK, SDA will go high right away */

 start */

 stop */

 pull SDA low */

 SDA high to signal last byte read from slave */

 ------------------------------------------------------------------------ */

 FIXME: we only want to do this on the last transaction */

 HW-I2C ----------------------------------------------------------------- */

 FIXME */

 Check for I2C NACK status */

 command to indicate data payload is destined for I2C interface */

 enable I2C interface */

 enable I2C interface */

 set Timeout register on I2C interface */

 enable Interrupts on I2C interface */

 write data on I2C bus */

 control register on I2C interface to initialize I2C bus */

 I2C Slave device Address */

 check for slave device status */

 if NACK, stop I2C bus and exit */

		/* I2C interface can do I2C operations in block of 8 bytes of

		   I2C data. calculation to figure out number of blocks of i2c

 write data on I2C interface */

 check for I2C NACK status */

 if NACK, stop I2C bus and exit */

 check for I2C NACK status */

 if NACK, stop I2C bus and exit */

 issue I2C STOP after write */

 read data from I2C bus */

		/* command to indicate data payload is

 I2C xfer length */

 I2C slave device Address */

 check for I2C NACK status */

 if NACK, stop I2C bus and exit */

		/* I2C interface can do I2C operations in block of 8 bytes of

		   I2C data. calculation to figure out number of blocks of

 command to read data from I2C interface */

 setup I2C read request packet on I2C interface */

 check for I2C NACK status */

 if NACK, stop I2C bus and exit */

 copy data from i2c data payload to read buffer */

 read again */

 check for I2C NACK status */

 if NACK, stop I2C bus and exit */

		/* indicate I2C interface to issue NACK

 control register */

 control register */

 STOP and disable I2C MUX */

 de-initilize I2C BUS */

 Control Register */

 disable I2C interface */

 de-initilize I2C BUS */

 disable I2C interface */

 disable I2C interface */

 disable I2C interface */

 ------------------------------------------------------------------------ */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2010-2014 Michael Krufky (mkrufky@linuxtv.org)

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 write-only */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 don't know why this usually errors out on the first try */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

	/* power control depends on which adapter is being woken:

 exit if we didn't initialize the driver yet */

		msleep(100); /* add short delay after enabling

 exit if we didn't initialize the driver yet */

 ------------------------------------------------------------------------ */

 save a pointer to the dvb_usb_device in device state */

 save a pointer to the dvb_usb_device in device state */

 LG2161_OIF_SPI_MAS */

 LG2161_OIF_SPI_MAS */

 save a pointer to the dvb_usb_device in device state */

 LG2161_OIF_SERIAL_TS */

 LG2161_OIF_SERIAL_TS */

 save a pointer to the dvb_usb_device in device state */

 save a pointer to the dvb_usb_device in device state */

 don't care if this fails */

 FIXME: must force EXTERNAL for QAM - done elsewhere */

 return with EXTERNAL enabled */

 return with INTERNAL enabled */

 applies to external IF output, only */

 DVB USB Driver stuff */

/* dvbt       mxl111sf

 * bulk       EP4/BULK/5/8192

 * isoc       EP4/ISOC/5/96/564

/* atsc       lgdt3305

 * bulk       EP6/BULK/5/8192

 * isoc       EP6/ISOC/5/24/3072

/* mh         lg2160

 * bulk       EP5/BULK/5/8192/RAW

 * isoc       EP5/ISOC/5/96/200/RAW

/* atsc mh    lgdt3305           mxl111sf          lg2160

 * bulk       EP6/BULK/5/8192    EP4/BULK/5/8192   EP5/BULK/5/8192/RAW

 * isoc       EP6/ISOC/5/24/3072 EP4/ISOC/5/96/564 EP5/ISOC/5/96/200/RAW

/* mercury    lgdt3305           mxl111sf          lg2161

 * tp bulk    EP6/BULK/5/8192    EP4/BULK/5/8192   EP6/BULK/5/8192/RAW

 * tp isoc    EP6/ISOC/5/24/3072 EP4/ISOC/5/96/564 EP6/ISOC/5/24/3072/RAW

 * spi bulk   EP6/BULK/5/8192    EP4/BULK/5/8192   EP5/BULK/5/8192/RAW

 * spi isoc   EP6/ISOC/5/24/3072 EP4/ISOC/5/96/564 EP5/ISOC/5/96/200/RAW

/* mercury mh mxl111sf          lg2161

 * tp bulk    EP4/BULK/5/8192   EP6/BULK/5/8192/RAW

 * tp isoc    EP4/ISOC/5/96/564 EP6/ISOC/5/24/3072/RAW

 * spi bulk   EP4/BULK/5/8192   EP5/BULK/5/8192/RAW

 * spi isoc   EP4/ISOC/5/96/564 EP5/ISOC/5/96/200/RAW

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DVB USB framework

 *

 * Copyright (C) 2004-6 Patrick Boettcher <patrick.boettcher@posteo.de>

 * Copyright (C) 2012 Antti Palosaari <crope@iki.fi>

	/*

	 * When the parameter has been set to 1 via sysfs while the

	 * driver was running, or when bulk mode is enabled after IR init.

 stop polling */

 disable rc when there is no keymap defined */

 start polling if needed */

 initialize a work queue for handling polling */

 wait init is done */

 skip feed setup if we are already feeding */

 set 'streaming' status bit */

 resolve input and output streaming parameters */

 submit USB streaming packets */

 enable HW PID filter */

 ask device to start streaming */

 add PID to device HW PID filter */

 remove PID from device HW PID filter */

 we cannot stop streaming until last PID is removed */

 ask device to stop streaming */

 disable HW PID filter */

 kill USB streaming packets */

 clear 'streaming' status bit */

 when switching from 1 to 0 or from 0 to 1 */

 re-assign sleep and wakeup functions */

 resolve adapter count */

 speed - when running at FULL speed we need a HW PID filter */

 use exclusive FE lock if there is multiple shared FEs */

 general initialization functions */

 device is warm, continue initialization */

				/*

				 * USB core will call disconnect() and then

				 * probe() as device reconnects itself from the

				 * USB bus. disconnect() will release all driver

				 * resources and probe() is called for 'new'

				 * device. As 'new' device is warm we should

				 * never go here again.

 stop remote controller poll */

 stop usb streaming */

 resume usb streaming */

 start remote controller poll */

 SPDX-License-Identifier: GPL-2.0-or-later

/****************************************************************



Siano Mobile Silicon, Inc.

MDTV receiver kernel modules.

Copyright (C) 2005-2009, Uri Shkolnik, Anatoly Greenblat





 For the bottom half */

/*

 * Completing URB's callback handler - bottom half (process context)

 * submits the URB prepared on smsusb_onresponse()

/*

 * Completing URB's callback handler - top half (interrupt context)

 * adds completing sms urb to the global surbs list and activtes the worker

 * thread the surb

 * IMPORTANT - blocking functions must not be called from here !!!



 * @param urb pointer to a completing urb object

 sanity check */

				/* move buffer pointer and

 This function can sleep */

 unregister from smscore */

 create device object */

 Missing endpoints? */

 register in smscore */

 initialize urbs */

 Detected a Siano Stellar uninitialized */

 This device will reset and gain another USB ID */

smscore_set_power_mode(dev, SMS_POWER_MODE_SUSPENDED);*/

 This device is only present before firmware load */

 This device pops up after firmware load */

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DVB USB library - provides a generic interface for a DVB USB device driver.

 *

 * dvb-usb-init.c

 *

 * Copyright (C) 2004-6 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 debug */

 speed - when running at FULL speed we need a HW PID filter */

 use exclusive FE lock if there is multiple shared FEs */

	/*

	 * when reloading the driver w/o replugging the device

	 * sometimes a timeout occurs, this helps

 general initialization functions */

 check the capabilities and set appropriate variables */

 determine the name and the state of the just found USB device */

 when switching from 1 to 0 or from 0 to 1 */

/*

 * USB

 SPDX-License-Identifier: GPL-2.0-only

/* Linux driver for devices based on the DiBcom DiB0700 USB bridge

 *

 *  Copyright (C) 2005-9 DiBcom, SA et al

/* Hauppauge Nova-T 500 (aka Bristol)

 STK7700D: Pinnacle/Terratec/Hauppauge Dual DVB-T Diversity */

 MT226x */

		/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=1, P_agc_inv_pwm1=1, P_agc_inv_pwm2=1,

		/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=1, P_agc_inv_pwm1=1, P_agc_inv_pwm2=1,

 STK7700-PH: Digital/Analog Hybrid Tuner, e.h. Cinergy HT USB HE */

	/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=0,

	 * P_agc_inv_pwm1=0, P_agc_inv_pwm2=0, P_agc_inh_dc_rv_est=0,

 PLL Configuration for COFDM BW_MHz = 8.00 with external clock = 30.00 */

 sad_cfg: refsel, sel, freq_15k */

 ifreq = 5.200000 MHz */

 Send the tuner in then out of reset */

 FIXME: generalize & move to common area */

/*

 * This function is used only when firmware is < 1.20 version. Newer

 * firmwares use bulk mode, with functions implemented at dib0700_core,

 * at dib0700_rc_urb_completion()

		/* For 1.20 firmware , We need to keep the RC polling

		   callback so we can reuse the input device setup in

		   dvb-usb-remote.c.  However, the actual work is being done

 losing half of KEY_0 events from Philipps rc5 remotes.. */

 info("%d: %2X %2X %2X %2X",dvb_usb_dib0700_ir_proto,(int)st->buf[3 - 2],(int)st->buf[3 - 3],(int)st->buf[3 - 1],(int)st->buf[3]);  */

 reset ir sensor data to prevent false events */

 NEC protocol sends repeat code as 0 0 0 FF */

 RC-5 protocol changes toggle bit on new keypress */

 STK7700P: Hauppauge Nova-T Stick, AVerMedia Volar */

	/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=5, P_agc_inv_pwm1=0, P_agc_inv_pwm2=0,

	/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=5, P_agc_inv_pwm1=0, P_agc_inv_pwm2=0,

 unless there is no real power management in DVB - we leave the device on GPIO6 */

 DIB7070 generic */

	/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=5, P_agc_inv_pwm1=0, P_agc_inv_pwm2=0,

 STK7070P */

 STK7770P */

 DIB807x generic */

		/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0,

		 * P_agc_freq_pwm_div=1, P_agc_inv_pwm1=0,

		 * P_agc_inv_pwm2=0,P_agc_inh_dc_rv_est=0,

		 * P_agc_time_est=3, P_agc_freeze=0, P_agc_nb_est=5,

 setup*/

 inv_gain*/

 time_stabiliz*/

 alpha_level*/

 thlock*/

 wbd_inv*/

 wbd_ref*/

 wbd_sel*/

 wbd_alpha*/

 agc1_max*/

 agc1_min*/

 agc2_max*/

 agc2_min*/

 agc1_pt1*/

 agc1_pt2*/

 agc1_pt3*/

 agc1_slope1*/

 agc1_slope2*/

 agc2_pt1*/

 agc2_pt2*/

 agc2_slope1*/

 agc2_slope2*/

 alpha_mant*/

 alpha_exp*/

 beta_mant*/

 beta_exp*/

 perform_agc_softsplit*/

		/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0,

		 * P_agc_freq_pwm_div=1, P_agc_inv_pwm1=0,

		 * P_agc_inv_pwm2=0, P_agc_inh_dc_rv_est=0,

		 * P_agc_time_est=3, P_agc_freeze=0, P_agc_nb_est=5,

 setup */

 inv_gain*/

 time_stabiliz*/

 alpha_level*/

 thlock*/

 wbd_inv*/

 wbd_ref*/

 wbd_sel*/

 wbd_alpha*/

 agc1_max*/

 agc1_min*/

 agc2_max*/

 agc2_min*/

 agc1_pt1*/

 agc1_pt2*/

 agc1_pt3*/

 agc1_slope1*/

 agc1_slope2*/

 agc2_pt1*/

 agc2_pt2*/

 agc2_slope1*/

 agc2_slope2*/

 alpha_mant*/

 alpha_exp*/

 beta_mant*/

 beta_exp*/

 perform_agc_softsplit*/

 sad_cfg: refsel, sel, freq_15k*/

 ifreq = 0.000000 MHz*/

 fall-thru wanted */

 STK807x */

 STK807xPVR */

 initialize IC 0 */

 initialize IC 1 */

 STK8096GP */

	/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=1,

	 * P_agc_inv_pwm1=0, P_agc_inv_pwm2=0, P_agc_inh_dc_rv_est=0,

	/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=1,

	 * P_agc_inv_pwm1=0, P_agc_inv_pwm2=0, P_agc_inh_dc_rv_est=0,

 before AGC startup */

 max freq ; cold slope ; cold offset ; warm slope ; warm offset ; wbd gain */

 CBAND */

 CBAND */

 VHF */

 high UHF */

 default */

 Update PLL if needed ratio */

 Get optimize PLL ratio to remove spurious */

 Update ratio */

 dib0090_get_wbd_target is returning any possible temperature compensated wbd-target */

 activate the external attenuator in case of very high input power */

 for everything else than CBAND we are using standard AGC */

 FIXME: if adap->id != 0, check if it is fe_adap[1] */

 Needed to increment refcount */

 TFE8096P */

		/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0,

		   P_agc_freq_pwm_div=1, P_agc_inv_pwm1=0,

		   P_agc_inv_pwm2=0, P_agc_inh_dc_rv_est=0,

		   P_agc_time_est=3, P_agc_freeze=0, P_agc_nb_est=5,

		/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0,

		   P_agc_freq_pwm_div=1, P_agc_inv_pwm1=0,

		   P_agc_inv_pwm2=0, P_agc_inh_dc_rv_est=0,

		   P_agc_time_est=3, P_agc_freeze=0, P_agc_nb_est=5,

 RF freq MHz */

 New Timf */

 New prediv */

 New loopdiv */

 PLL, Minimum Frequency of phase comparator (KHz) */

 PLL, Maximum Frequency of phase comparator (KHz) */

 140MHz max SDRAM freq */

 Find Min and Max prediv */

 test min/max system restrictions */

 test fs harmonics positions */

	/* dib0090_get_wbd_target is returning any possible

 STK9090M */

 GPIO 3 to 1 for VHF */

 GPIO 3 to 0 for UHF */

 GPIO 1 and 2 to 1 for VHF */

 GPIO 1 and 2 to 0 for UHF */

 Make use of the new i2c functions from FW 1.20 */

 Make use of the new i2c functions from FW 1.20 */

 NIM7090 */

 PLL Minimum Frequency comparator KHz */

 PLL Maximum Frequency comparator KHz */

 Find Min and Max prediv */

 test min/max system restrictions */

 test fs harmonics positions */

 before AGC startup */

		/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=1, P_agc_inv_pwm1=0, P_agc_inv_pwm2=0,

		/* P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=1, P_agc_inv_pwm1=0, P_agc_inv_pwm2=0,

 GPIO used is the same as TFE7790 */

 The TFE7090 requires the dib0700 to not be in master mode */

 initialize IC 0 */

 the master device has not been initialized */

 The TFE7790P requires the dib0700 to not be in master mode */

 STK7070PD */

 turn off LED */

/*

 * novatd_frontend_attach - Nova-TD specific attach

 *

 * Nova-TD has GPIO0, 1 and 2 for LEDs. So do not fiddle with them except for

 * information purposes.

 turn the power LED on, the other two off (just in case) */

 S5H1411 */

/* Pinnacle PCTV HD Pro 801e GPIOs map:

   GPIO0  - currently unknown

   GPIO1  - xc5000 tuner reset

   GPIO2  - CX25843 sleep

   GPIO3  - currently unknown

   GPIO4  - currently unknown

   GPIO6  - currently unknown

   GPIO7  - currently unknown

   GPIO9  - currently unknown

   GPIO10 - CX25843 reset

 Make use of the new i2c functions from FW 1.20 */

 The s5h1411 requires the dib0700 to not be in master mode */

 All msleep values taken from Windows USB trace */

 Put the CX25843 to sleep for now since we're in digital mode */

 GPIOs are initialized, do the attach */

 Reset the tuner */

 FIXME: generalize & move to common area */

 Reset the tuner */

 sad_cfg: refsel, sel, freq_15k */

 FIXME: none of these inputs are validated yet */

/* PCTV 340e GPIOs map:

   dib0700:

   GPIO2  - CX25843 sleep

   GPIO3  - CS5340 reset

   GPIO5  - IRD

   GPIO6  - Power Supply

   GPIO8  - LNA (1=off 0=on)

   GPIO10 - CX25843 reset

   dib7000:

   GPIO8  - xc4000 reset

 Power Supply on */

 Allow power supply to settle before probing */

 cx25843 reset */

 cx25843 datasheet say 350us required */

 LNA off for now */

 Put the CX25843 to sleep for now since we're in digital mode */

 FIXME: not verified yet */

 Demodulator not found for some reason? */

 The xc4000 is not on the main i2c bus */

 Setup the reset callback */

/* TIGER-ATSC map:

   GPIO0  - LNA_CTR  (H: LNA power enabled, L: LNA power disabled)

   GPIO1  - ANT_SEL  (H: VPA, L: MCX)

   GPIO4  - SCL2

   GPIO6  - EN_TUNER

   GPIO7  - SDA2

   GPIO10 - DEM_RST



   MXL is behind LG's i2c repeater.  LG is on SCL2/SDA2 gpios on the DIB

 Make use of the new i2c functions from FW 1.20 */

 fe power enable */

 demod reset */

 fe power enable */

 demod reset */

 attach demod */

 attach tuner */

 DVB-USB and USB stuff follows */

 0 */	{ USB_DEVICE(USB_VID_DIBCOM,    USB_PID_DIBCOM_STK7700P) },

 5 */	{ USB_DEVICE(USB_VID_AVERMEDIA, USB_PID_AVERMEDIA_VOLAR) },

 10 */{ USB_DEVICE(USB_VID_AVERMEDIA, USB_PID_AVERMEDIA_VOLAR_2) },

 15 */{ USB_DEVICE(USB_VID_DIBCOM,    USB_PID_DIBCOM_STK7070P) },

 20 */{ USB_DEVICE(USB_VID_AVERMEDIA, USB_PID_AVERMEDIA_EXPRESS) },

 25 */{ USB_DEVICE(USB_VID_HAUPPAUGE, USB_PID_HAUPPAUGE_NOVA_T_STICK_3) },

 30 */{ USB_DEVICE(USB_VID_PINNACLE,	USB_PID_PINNACLE_PCTV73E) },

 35 */{ USB_DEVICE(USB_VID_HAUPPAUGE, USB_PID_HAUPPAUGE_NOVA_TD_STICK_52009) },

 40 */{ USB_DEVICE(USB_VID_PINNACLE,  USB_PID_PINNACLE_PCTV801E) },

 45 */{ USB_DEVICE(USB_VID_YUAN,      USB_PID_YUAN_PD378S) },

 50 */{ USB_DEVICE(USB_VID_ELGATO,	USB_PID_ELGATO_EYETV_DTT_Dlx) },

 55 */{ USB_DEVICE(USB_VID_YUAN,	USB_PID_YUAN_STK7700D_2) },

 60 */{ USB_DEVICE(USB_VID_TERRATEC,	USB_PID_TERRATEC_CINERGY_T_XXS_2) },

 65 */{ USB_DEVICE(USB_VID_PINNACLE,	USB_PID_PINNACLE_PCTV73ESE) },

 70 */{ USB_DEVICE(USB_VID_DIBCOM,    USB_PID_DIBCOM_NIM8096MD) },

 75 */{ USB_DEVICE(USB_VID_MEDION,    USB_PID_CREATIX_CTX1921) },

 80 */{ USB_DEVICE(USB_VID_ELGATO,	USB_PID_ELGATO_EYETV_DTT_2) },

 85 */{ USB_DEVICE(USB_VID_HAMA,	USB_PID_HAMA_DVBT_HYBRID) },

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TerraTec Cinergy T2/qanu USB2 DVB-T adapter.

 *

 * Copyright (C) 2007 Tomi Orava (tomimo@ncircle.nullnet.fi)

 *

 * Based on the dvb-usb-framework code and the

 * original Terratec Cinergy T2 driver by:

 *

 * Copyright (C) 2004 Daniel Mack <daniel@qanu.de> and

 *		    Holger Waechtler <holger@qanu.de>

 *

 *  Protocol Spec published on http://qanu.de/specs/terratec_cinergyT2.pdf

 debug */

 Forward declaration */

 Number of keypresses to ignore before detect repeating */

 key repeat */

 hack to pass checksum on the custom field */

 parameter for the MPEG2-data transfer */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PCTV 452e DVB driver

 *

 * Copyright (c) 2006-2008 Dominik Kuhlen <dkuhlen@gmx.net>

 *

 * TT connect S2-3650-CI Common Interface support, MAC readout

 * Copyright (C) 2008 Michael H. Schimek <mschimek@gmx.at>

 dvb usb framework */

 Demodulator */

 Tuner */

 FE Power */

 guessed: (copied from ttusb-budget) */

 command to poll IR receiver */

 command to send I2C  */

 pctv452e sends us this amount of data for each issued usb-command */

 Wait up to 1000ms for device  */

/*

 * stores all private variables for communication with the PCTV452e DVB-S2

 transaction counter, wraps around...  */

 set to 1 if 0x15 has been sent */

 delay_ms */ 0);

 enable */ 0);

 enable */ 1);

 FTA */

 Error ignored. */

 slot */ 0, 
 flags */ 0,

 n_slots */ 1);

 rcv_len */ 64,

 delay_ms */ 0);

 TT USB protocol error. */

 I2C device didn't respond as expected. */

 hmm where should this should go? */

 this is a one-time initialization, don't know where to put */

 reset board */

 reset board (again?) */

 prepare command header  */

 send ir request */

 got a "press" event */

 snd_len */ 1,

 rcv_len */ 20);

		/* Caution! A 24C16 interprets 0xA2 0x1F 0xCC as a

 0xa8 */

 Inversion */

 LED: 0x02 green, 0x82 orange */

 0x11 DVB-S; 0x1c DVB-S2 (1c, rjkm) */

 0x15 27Mhz, F/3 198MHz, F/6 108MHz */

 0x00 CLKI, 0x02 XTALI */

 orig: 0x00 budget-ci: 0x20 */

 rjkm */

 DVB = 0xb1, DSS = 0xa1 */

 0x0d for CAM */

 I2C Address */

 ? */

 Assume Hz ? */

 Use parallel mode */

 helper for switching LED green/orange */

 Error ignored. */

 more ? */

 parameter for the MPEG2-data transfer */

 allow generice rw function */

 this is a warm only device */

 more ? */

 parameter for the MPEG2-data transfer */

 allow generic rw function*/

 this is a warm only device */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant linux driver for Technotrend DVB USB boxes and clones

 * (e.g. Pinnacle 400e DVB-S USB2.0).

 *

 * The Pinnacle 400e uses the same protocol as the Technotrend USB1.1 boxes.

 *

 * TDA8263 + TDA10086

 *

 * I2C addresses:

 * 0x08 - LNBP21PD   - LNB power supply

 * 0x0e - TDA10086   - Demodulator

 * 0x50 - FX2 eeprom

 * 0x60 - TDA8263    - Tuner

 * 0x78 ???

 *

 * Copyright (c) 2002 Holger Waechtler <holger@convergence.de>

 * Copyright (c) 2003 Felix Domke <tmbinc@elitedvb.net>

 * Copyright (C) 2005-6 Patrick Boettcher <pb@linuxtv.org>

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 CA */

 debug */

 ci */

 (64 -4) */

 FTA */

 flags */ 0,

 n_slots */ 1);

 read request */

 command to poll IR receiver (copied from pctv452e.c) */

 IR */

 A CMD_GET_IR_CODE reply is 9 bytes long */

 got a "press" event */

 Callbacks for DVB USB */

 FE 0 DVB-C */

 tuner is behind TDA10023 I2C-gate */

 MFE: select correct FE to attach tuner since that's called twice */

 attach tuner */

 DVB USB Driver stuff */

 Terminating entry */

 ttusb2_streaming_ctrl,

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 Less than IR_KEYPRESS_TIMEOUT */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 SPDX-License-Identifier: GPL-2.0-only

/* Common methods for dibusb-based-receivers.

 *

 * Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 Max transfer size done by I2C transfer functions */

 common stuff used by the different dibusb modules */

 write only ? */

/*

 * I2C master xfer function

 write/read request */

			/* 0x50 is the address of the eeprom - we need to protect it

			 * from dibusb's bad i2c implementation: reads without

/*

 * common remote control stuff

 Key codes for the little Artec T1/Twinhan/HAMA/ remote. */

 Heart symbol - Channel list. */

 Recall - Previous channel. */

 Full screen mode. */

 MTS - Switch to secondary audio. */

 additional keys TwinHan VisionPlus, the Artec seemingly not have */

 Cancel */

 EPG */

 Tab */

 Preview */

 RecordList */

 Teletext */

 Key codes for the KWorld/ADSTech/JetWay remote. */

 source */

 scan */

 preview */

 snap */

 pip */

 Key codes for the DiBcom MOD3000 remote. */

 Pictures */

 SAP */

 DVD Menu */

 SPDX-License-Identifier: GPL-2.0

/* dvb-usb-firmware.c is part of the DVB USB library.

 *

 * Copyright (C) 2004-6 Patrick Boettcher (patrick.boettcher@posteo.de)

 * see dvb-usb-init.c for copyright information.

 *

 * This file contains functions for downloading the firmware to Cypress FX 1 and 2 based devices.

 *

 * FIXME: This part does actually not belong to dvb-usb, but to the usb-subsystem.

 name of the usb controller */

 needs to be restarted, when the firmware has been downloaded. */

/*

 * load a firmware packet to the device

 stop the CPU */

 restart the CPU */

 b[4] and b[5] are the Extended linear address record data field */

/*		hx->len -= 2;

 SPDX-License-Identifier: GPL-2.0

/* dvb-usb-remote.c is part of the DVB USB library.

 *

 * Copyright (C) 2004-6 Patrick Boettcher (patrick.boettcher@posteo.de)

 * see dvb-usb-init.c for copyright information.

 *

 * This file contains functions for initializing the input-device and for handling remote-control-queries.

 See if we can match the raw key code. */

 See if there is an unused hole in the map */

	/*

	 * FIXME: Currently, it is not possible to increase the size of

	 * scancode table. For it to happen, one possibility

	 * would be to allocate a table with key_map_size + 1,

	 * copying data, appending the new key on it, and freeing

	 * the old one - or maybe just allocating some spare space

/* Remote-control poll function - called every dib->rc_query_interval ms to see

 * whether the remote control has received anything.

 *

 * TODO: Fix the repeat rate of the input device.

	/* TODO: need a lock here.  We can simply skip checking for the remote control

 when the parameter has been set to 1 via sysfs while the driver was running */

/* improved repeat handling ???

	switch (state) {

		case REMOTE_NO_KEY_PRESSED:

			deb_rc("NO KEY PRESSED\n");

			if (d->last_state != REMOTE_NO_KEY_PRESSED) {

				deb_rc("releasing event %d\n",d->last_event);

				input_event(d->rc_input_dev, EV_KEY, d->last_event, 0);

				input_sync(d->rc_input_dev);

			}

			d->last_state = REMOTE_NO_KEY_PRESSED;

			d->last_event = 0;

			break;

		case REMOTE_KEY_PRESSED:

			deb_rc("KEY PRESSED\n");

			deb_rc("pressing event %d\n",event);



			input_event(d->rc_input_dev, EV_KEY, event, 1);

			input_sync(d->rc_input_dev);



			d->last_event = event;

			d->last_state = REMOTE_KEY_PRESSED;

			break;

		case REMOTE_KEY_REPEAT:

			deb_rc("KEY_REPEAT\n");

			if (d->last_state != REMOTE_NO_KEY_PRESSED) {

				deb_rc("repeating event %d\n",d->last_event);

				input_event(d->rc_input_dev, EV_KEY, d->last_event, 2);

				input_sync(d->rc_input_dev);

				d->last_state = REMOTE_KEY_REPEAT;

			}

		default:

			break;

	}

 set the bits for the keys */

 setting these two values to non-zero, we have to manage key repeats */

/* Remote-control poll function - called every dib->rc_query_interval ms to see

 * whether the remote control has received anything.

 *

 * TODO: Fix the repeat rate of the input device.

	/* TODO: need a lock here.  We can simply skip checking for the remote control

	/* when the parameter has been set to 1 via sysfs while the

	 * driver was running, or when bulk mode is enabled after IR init

 Polling mode - initialize a work queue for handling it */

 Start the remote-control polling. */

 default */

 See if we can match the raw key code. */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant linux driver for Conexant USB reference design.

 *

 * The Conexant reference design I saw on their website was only for analogue

 * capturing (using the cx25842). The box I took to write this driver (reverse

 * engineered) is the one labeled Medion MD95700. In addition to the cx25842

 * for analogue capturing it also has a cx22702 DVB-T demodulator on the main

 * board. Besides it has a atiremote (X10) and a USB2.0 hub onboard.

 *

 * Maybe it is a little bit premature to call this driver cxusb, but I assume

 * the USB protocol is identical or at least inherited from the reference

 * design, so it can be reused for the "analogue-only" device (if it will

 * appear at all).

 *

 *

 * Copyright (C) 2005 Patrick Boettcher (patrick.boettcher@posteo.de)

 * Copyright (C) 2006 Michael Krufky (mkrufky@linuxtv.org)

 * Copyright (C) 2006, 2007 Chris Pascoe (c.pascoe@itee.uq.edu.au)

 * Copyright (C) 2011, 2017 Maciej S. Szmigiero (mail@maciej.szmigiero.name)

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 debug */

 GPIO */

 mask of bits to keep */

 new values for bits  */

 I2C */

 read only */

 write to then read from same address */

 write only */

 Nothing */

		/*

		 * FIXME: We don't know why, but we need to configure the

		 * lgdt3303 with the register settings below on resume

 Discard remaining data in video pipe */

 Discard remaining data in video pipe */

 used in both lgz201 and th7579 */

 used in both lgz201 and th7579 */

 FIXME: needs tweaking */

 FIXME: needs tweaking */

 Callbacks for DVB USB */

		/*

		 * make sure that DVB core won't put to sleep (reset, really)

		 * tuner when we might be open in analog mode

 FIXME: generalize & move to common area */

	/*

	 * switching mode while doing an I2C transaction often causes

	 * the device to crash

 pipes need to be cleared after setting interface */

 mode switch seems to reset GPIO states */

 used in both lgz201 and th7579 */

 reset the tuner and demodulator */

 try to determine if there is no IR decoder on the I2C bus */

	/*

	 * P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=5,

	 * P_agc_inv_pwm1=0, P_agc_inv_pwm2=0, P_agc_inh_dc_rv_est=0,

	 * P_agc_time_est=3, P_agc_freeze=0, P_agc_nb_est=5, P_agc_write=0

 refsel, sel, freq_15k */

	/*

	 * No need to call dvb7000p_attach here, as it was called

	 * already, as frontend_attach method is called first, and

	 * tuner_attach is only called on success.

 reset the tuner and demodulator */

 30.4 MHz */

 5.725 MHz */

 Select required USB configuration */

 Unblock all USB pipes */

 Drain USB pipes to avoid hang after reboot */

 Reset the tuner */

 Attach frontend */

 in kHz */

 zero IF */

 Select required USB configuration */

 Unblock all USB pipes */

 Reset the tuner */

 Attach frontend */

/*

 * DViCO has shipped two devices with the same USB ID, but only one of them

 * needs a firmware download.  Check the device class details to see if they

 * have non-default values to decide whether the device is actually cold or

 * not, and forget a match if it turns out we selected the wrong device.

/*

 * DViCO bluebird firmware needs the "warm" product ID to be patched into the

 * firmware file before download.

 digital */

 DVB USB Driver stuff */

 Medion 95700 */

 release device from INIT mode to normal operation */

 remove I2C client for tuner */

 remove I2C client for demodulator */

 Terminating entry */

 parameter for the MPEG2-data transfer */

	/*

	 * use usb alt setting 0 for EP4 transfer (dvb-t),

	 * use usb alt setting 7 for EP2 transfer (atsc)

 parameter for the MPEG2-data transfer */

	/*

	 * use usb alt setting 0 for EP4 transfer (dvb-t),

	 * use usb alt setting 7 for EP2 transfer (atsc)

 parameter for the MPEG2-data transfer */

	/*

	 * use usb alt setting 0 for EP4 transfer (dvb-t),

	 * use usb alt setting 7 for EP2 transfer (atsc)

 parameter for the MPEG2-data transfer */

	/*

	 * use usb alt setting 0 for EP4 transfer (dvb-t),

	 * use usb alt setting 7 for EP2 transfer (atsc)

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant Linux driver for the

 *  - GENPIX 8pks/qpsk/DCII USB2.0 DVB-S module

 *

 * Copyright (C) 2006,2007 Alan Nisota (alannisota@gmail.com)

 * Copyright (C) 2006,2007 Genpix Electronics (genpix@genpix-electronics.com)

 *

 * Thanks to GENPIX for the sample code used to implement this module.

 *

 * This module is based off the vp7045 and vp702x modules

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 debug */

 started */

 BCM4500 firmware loaded */

 LNB Power */

 Set DVB mode to 1 */

 Abort possible TS (if previous tune crashed) */

 Turn off LNB power */

 Turn off 8psk power */

 Turn off 8psk power */

 Turn On 8psk power */

 load BCM4500 firmware */

 Callbacks for gp8psk-fe.c */

	    { USB_DEVICE(USB_VID_GENPIX, USB_PID_GENPIX_SKYWALKER_CW3K) }, */

 parameter for the MPEG2-data transfer */

 usb specific object needed to register this driver with the usb subsystem */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * DVB USB Linux driver for AME DTV-5100 USB2.0 DVB-T

 *

 * Copyright (C) 2008  Antoine Jacquet <royale@zerezo.com>

 * http://royale.zerezo.com/dtv5100/

 *

 * Inspired by gl861.c and au6610.c drivers

 debug */

 write { reg }, read { value } */

 write { reg, value } */

 avoid I2C errors */

 I2C */

 write/read request */

 Callbacks for DVB USB */

 disable i2c gate, or it won't work... is this safe? */

 DVB USB Driver stuff */

 initialize non qt1010/zl10353 part? */

 Terminating entry */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant linux driver for Nebula Electronics uDigiTV DVB-T USB2.0

 * receiver

 *

 * Copyright (C) 2005 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * partly based on the SDK published by Nebula Electronics

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 debug */

 write-only */

 I2C */

 write/read request */

 Callbacks for DVB USB */

 labelled 'Picture' */

 16:9 */

 14:9 */

 AD */

 chapter */

 picture in picture */

 zoom in */

 zoom out */

 capture */

 web */

	/* Tell the device we've read the remote. Not sure how necessary

 if something is inside the buffer, simulate key press */

 DVB USB Driver stuff */

 do that only when the firmware is loaded */

 Terminating entry */

 parameter for the MPEG2-data transfer */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant Linux driver for the AZUREWAVE DVB-S/S2 USB2.0 (AZ6027)

 * receiver.

 *

 * Copyright (C) 2009 Adams.Xu <adams.xu@azwave.com.cn>

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 0x0000000b, SYSREG */

 SYSREG ? */

 0x11 */

 AGCBB2CFG */

 AGCBB1CFG */

 0x15 = 27 Mhz Clock, F/3 = 198MHz, F/6 = 99MHz */

 0x00 = CLK from CLKI, 0x02 = CLK from XTALI */

 DVB = 0xb1, DSS = 0xa1 */

 0x0d for CAM */

 0x68, 0xd0 >> 1 */

 check for mutex FIXME */

 keys for the enclosed remote control */

 remote control stuff (does not work with my box) */

/*

int az6027_power_ctrl(struct dvb_usb_device *d, int onoff)

{

	u8 v = onoff;

	return az6027_usb_out_op(d,0xBC,v,3,NULL,1);

}

 flags */

 n_slots */

/*

static int az6027_read_mac_addr(struct dvb_usb_device *d, u8 mac[6])

{

	az6027_usb_in_op(d, 0xb7, 6, 0, &mac[0], 6);

	return 0;

}

	/*

	 * 2   --18v

	 * 1   --13v

	 * 0   --off

 power on */

 reset demodulator */

 high */

 low */

high */

 TS passthrough */

 I2C */

 write/read request */

 demod 16bit addr */

 parameter for the MPEG2-data transfer */

/*

	.power_ctrl       = az6027_power_ctrl,

	.read_mac_address = az6027_read_mac_addr,

 usb specific object needed to register this driver with the usb subsystem */

 SPDX-License-Identifier: GPL-2.0

/* dvb-usb-dvb.c is part of the DVB USB library.

 *

 * Copyright (C) 2004-6 Patrick Boettcher (patrick.boettcher@posteo.de)

 * see dvb-usb-init.c for copyright information.

 *

 * This file contains functions for initializing and handling the

 * linux-dvb API.

 does the complete input transfer handling */

 stop feed before setting a new pid if there will be no pid anymore */

 activate the pid on the device specific pid_filter */

	/* start the feed if this was the first feed and there is still a feed

	 * for reception.

 register all given adapter frontends */

 only print error when there is no FE at all */

 re-assign sleep and wakeup functions */

			/* In error case, do not try register more FEs,

 only attach the tuner if the demod is there */

 unregister all given adapter frontends */

 SPDX-License-Identifier: GPL-2.0

/* dvb-usb-i2c.c is part of the DVB USB library.

 *

 * Copyright (C) 2004-6 Patrick Boettcher (patrick.boettcher@posteo.de)

 * see dvb-usb-init.c for copyright information.

 *

 * This file contains functions for (de-)initializing an I2C adapter.

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB framework compliant Linux driver for the HanfTek UMT-010 USB2.0

 * DVB-T receiver.

 *

 * Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 USB Driver stuff */

 do not change the order of the ID table */

 00 */	{ USB_DEVICE(USB_VID_HANFTEK, USB_PID_HANFTEK_UMT_010_COLD) },

 01 */	{ USB_DEVICE(USB_VID_HANFTEK, USB_PID_HANFTEK_UMT_010_WARM) },

 Terminating entry */

 parameter for the MPEG2-data transfer */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB frontend part of the Linux driver for the TwinhanDTV StarBox USB2.0

 * DVB-S receiver.

 *

 * Copyright (C) 2005 Ralph Metzler <rjkm@metzlerbros.de>

 *                    Metzler Brothers Systementwicklung GbR

 *

 * Copyright (C) 2005 Patrick Boettcher <patrick.boettcher@posteo.de>

 *

 * Thanks to Twinhan who kindly provided hardware and information.

 *

 * This file can be removed soon, after the DST-driver is rewritten to provice

 * the frontend-controlling separately.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 not supported by this Frontend */

 not supported by this Frontend */

CalFrequency*/

	u16 frequencyRef[16] = { 2, 4, 8, 16, 32, 64, 128, 256, 24, 5, 10, 20, 40, 80, 160, 320 }; */

 divrate == 4 -> frequencyRef[1] -> 1 here */

/*	if (fep->inversion == INVERSION_ON)

/*	if (fep->symbol_rate > 8000000)

		cmd[6] |= 0x20;



	if (fep->frequency < 1531000)

		cmd[6] |= 0x04;



	if (st->tone_mode == SEC_TONE_ON)

 0=tone burst, 2=data burst, ff=off */

 ppm */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB library compliant Linux driver for the WideView/ Yakumo/ Hama/

 * Typhoon/ Yuan/ Miglia DVB-T USB2.0 receiver.

 *

 * Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * Thanks to Steve Chang from WideView for providing support for the WT-220U.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 debug */

 Extended NEC */

 Check command checksum is ok */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

		  /* This device turns into WT220U_ZL0353_WARM when fw

 usb specific object needed to register this driver with the usb subsystem */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Frontend part of the Linux driver for the Afatech 9005

 * USB1.1 DVB-T receiver.

 *

 * Copyright (C) 2007 Luca Olivetti (luca@ventoso.org)

 *

 * Thanks to Afatech who kindly provided information.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 retraining parameters */

 statistics */

 check if error bit count is ready */

 get abort count */

 get error count */

 get RSD packet number */

 ERR_APO_VTB_COUNTER_NOT_READY; */

 read fft mode */

 2K */

 8k */

 read modulation mode */

 QPSK */

 QAM_16 */

 QAM_64 */

 set super frame count to 1 */

 reset pre viterbi error count */

 set packet unit */

 reset post viterbi error count */

			/* according to v 0.0.4 of the dvb api ber should be a multiple

			   of 10E-9 so we have to multiply the error count by

 statistics */

	/* this value has no real meaning, but i don't have the tables that relate

	/* the snr can be derived from the ber and the modulation

	   but I don't think this kind of complex calculations belong

	/*

	 *  write NS_coeff1_2048Nu

  big endian to make 8051 happy */

  cfoe_NS_2k_coeff1_25_24 */

  cfoe_NS_2k_coeff1_23_16 */

  cfoe_NS_2k_coeff1_15_8 */

  cfoe_NS_2k_coeff1_7_0 */

	/*

	 *  write NS_coeff2_2k

  big endian to make 8051 happy */

	/*

	 *  write NS_coeff1_8191Nu

  big endian to make 8051 happy */

	/*

	 *  write NS_coeff1_8192Nu

  big endian to make 8051 happy */

	/*

	 *  write NS_coeff1_8193Nu

  big endian to make 8051 happy */

	/*

	 *  write NS_coeff2_8k

  big endian to make 8051 happy */

 reset */

 clear ofdm reset */

	/*FIXME in the dump

	   write B200 A9

	   write xd_g_reg_ofsm_clk 7

	   read eepr c6 (2)

	   read eepr c7 (2)

	   misc ctrl 3 -> 1

	   read eepr ca (6)

	   write xd_g_reg_ofsm_clk 0

	   write B200 a1

 don't know what register aefc is, but this is what the windows driver does */

 set stand alone chip */

 set dca upper & lower chip */

 set 2wire master clock to 0x14 (for 60KHz) */

 clear dca enable chip */

 FIXME these are register bits, but I don't know which ones */

 init other parameters: program cfoe and select bandwidth */

 set read-update bit for modulation */

	/* sample code has a set MPEG TS code here

 set read-update bit to 1 for DCA modulation */

 enable fec monitor */

 FIXME should be register bits, I don't know which ones */

 set api_retrain_never_freeze */

 load init script */

 save 3 bytes of original fcw */

 save original unplug threshold */

 save original TOPs */

  RF TOP */

  IF TOP */

  ACI 0 IF TOP */

  ACI 1 IF TOP */

 attach tuner and init */

 read tuner and board id from eeprom */

 MT2060 */

 read if1 from eeprom */

 QT1010 */

 QT1010B */

 not in the log */

 not sure about the bits */

 set FCW to default value */

 restore original TOPs */

 select bandwidth */

 clear easy mode flag */

 set unplug threshold to original value */

 set tuner */

 trigger ofsm */

 clear retrain and freeze flag */

 reset pre viterbi and post viterbi registers and statistics */

 state->unc = 0; commented out since it should be ever increasing */

 mode */

 tps hierarchy and alpha value */

  high/low priority     */

 if temp is set = high priority */

 high coderate */

 low coderate */

 guard interval */

 fft */

 bandwidth      */

 allocate memory for the internal state */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TerraTec Cinergy T2/qanu USB2 DVB-T adapter.

 *

 * Copyright (C) 2007 Tomi Orava (tomimo@ncircle.nullnet.fi)

 *

 * Based on the dvb-usb-framework code and the

 * original Terratec Cinergy T2 driver by:

 *

 * Copyright (C) 2004 Daniel Mack <daniel@qanu.de> and

 *                  Holger Waechtler <holger@qanu.de>

 *

 *  Protocol Spec published on http://qanu.de/specs/terratec_cinergyT2.pdf

/*

 *  convert linux-dvb frontend parameter set into TPS.

 *  See ETSI ETS-300744, section 4.6.2, table 9 for details.

 *

 *  This function is probably reusable and may better get placed in a support

 *  library.

 *

 *  We replace erroneous fields by default TPS fields (the ones with value 0).

 tps |= (0 << 7) */;

 tps |= (0 << 4) */;

 tps |= (0 << 13) */;

 tps |= (0 << 0) */;

 tps |= (0 << 2) */;

 tps |= (0 << 10) */;

 SPDX-License-Identifier: GPL-2.0-or-later

/* DVB USB compliant Linux driver for the Afatech 9005

 * USB1.1 DVB-T receiver.

 *

 * Copyright (C) 2007 Luca Olivetti (luca@ventoso.org)

 *

 * Thanks to Afatech who kindly provided information.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 debug */

 enable obnoxious led */

 eeprom dump */

 remote control decoder */

 rest of buffer length low */

 rest of buffer length high */

 register operation */

 rest of buffer length */

 sequence number */

 register address */

 read command for tuner, the first byte contains the i2c address */

 sanity check */

	/*

	 * In thesis, both input and output buffers should have

	 * identical values for st->data[5] to st->data[8].

	 * However, windows driver doesn't check these fields, in fact

	 * sometimes the register in the reply is different that what

	 * has been sent

	/* don't let the name of this function mislead you: it's just used

	   as an interface from the firmware to the i2c bus. The actual

 check if write done (0xa40d bit 1) or fail (0xa40d bit 2) */

 clear write fail bit */

 clear write done bit */

	/* don't let the name of this function mislead you: it's just used

	   as an interface from the firmware to the i2c bus. The actual

 tuner i2c address */

 tuner register */

 i2c read address */

 write tuner i2c address to tuner, 0c00c0 undocumented, found by sniffing */

 send read command to ofsm */

 check if read done */

 clear read done bit (by writing 1) */

 get read data (available from 0xa400) */

	/* only implements what the mt2060 module does, don't know how

 reads a single register */

 write one or more registers */

 packet type */

 length of rest of packet low */

 length of rest of packer high */

 read/write eeprom */

 size */

 read */

 sequence number, original driver doesn't increment it here */

 sequence number, original driver doesn't increment it here */

 sequence number, original driver doesn't increment it here */

	/* without these calls the first commands after downloading

	   the firmware fail. I put these calls here to simulate

	   what it is done in dvb-usb-init.c.

 it shouldn't never come here */

 deb_info("rc_query\n"); */

 rest of packet length low */

 rest of packet length high */

 read remote */

 rest of packet length */

 sequence number */

		/* cannot use it as pid_filter_ctrl since it has to be done

 .pid_filter_ctrl = af9005_pid_filter_control, */

 .tuner_attach     = af9005_tuner_attach, */

 parameter for the MPEG2-data transfer */

 actual size seen is 3948 */

 usb specific object needed to register this driver with the usb subsystem */

 module stuff */

 FIXME: convert to todays kernel IR infrastructure */

 release rc decode symbols */

 deregister this driver from the USB subsystem */

 SPDX-License-Identifier: GPL-2.0-or-later

/* DVB USB compliant Linux driver for the Afatech 9005

 * USB1.1 DVB-T receiver.

 *

 * Standard remote decode function

 *

 * Copyright (C) 2007 Luca Olivetti (luca@ventoso.org)

 *

 * Thanks to Afatech who kindly provided information.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 debug */

 marked jump on the remote */

 marked jump on the remote */

32 bits + start code */

 SPDX-License-Identifier: GPL-2.0-only

/* Frontend part of the Linux driver for the WideView/ Yakumo/ Hama/

 * Typhoon/ Yuan DVB-T USB2.0 receiver.

 *

 * Copyright (C) 2005 Patrick Boettcher <patrick.boettcher@posteo.de>

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 pending */

 during set_frontend */

 failed */

 allocate memory for the internal state */

 SPDX-License-Identifier: GPL-2.0+



 DVB USB compliant linux driver for Conexant USB reference design -

 (analog part).



 Copyright (C) 2011, 2017, 2018

	Maciej S. Szmigiero (mail@maciej.szmigiero.name)



 In case there are new analog / DVB-T hybrid devices released in the market

 using the same general design as Medion MD95700: a CX25840 video decoder

 outputting a BT.656 stream to a USB bridge chip which then forwards it to

 the host in isochronous USB packets this code should be made generic, with

 board specific bits implemented via separate card structures.



 This is, however, unlikely as the Medion model was released

 years ago (in 2005).



 TODO:

  * audio support,

  * finish radio support (requires audio of course),

  * VBI support,

  * controls support

 returns false if some data was overwritten */

 returns whether the whole 4-byte code should be skipped in the buffer */

 TODO: copy VBI samples */

				/*

				 * is this a field change?

				 * if so, terminate copying the current field

	/*

	 * if this is a new frame

	 * fetch a buffer from list

		/*

		 * do not trim buffer there in case

		 * we need to reset the search later

			/*

			 * append new data to auxbuf while

			 * overwriting old data if necessary

			 *

			 * if any overwrite happens then we can no

			 * longer rely on consistency of the whole

			 * data so let's start again the current

			 * auxbuf frame assembling process from

			 * the beginning

 next URB is complete already? reschedule us then to handle it */

 reschedule us until auxbuf no longer can produce any frame */

 VBI lines */);

	/*

	 * try to fit a whole frame into each URB, as long as doing so

	 * does not require very high order memory allocations

 is525 */

 TV tuner is PAL-only so it is always TB */

 stream is being stopped */

		/*

		 * TODO: change this to an array of single pages to avoid

		 * doing a large continuous allocation when (if)

		 * s-g isochronous USB transfers are supported

 let URB completion run */

 free transfer buffer and URB */

 cxusb_vprintk(dvbdev, OPS, "mmmm.. a fresh buffer...\n"); */

 no autodetection support */

 on composite or S-Video any std is acceptable */

 TV tuner is only able to demodulate PAL */

	/*

	 * fills:

	 * always: capability (static), rangelow (static), rangehigh (static)

	 * radio mode: afc (may fail silently), rxsubchans (static), audmode

	/*

	 * fills:

	 * always: capability (static), rangelow (static), rangehigh (static)

	 * radio mode: rxsubchans (always stereo), audmode,

	 * signal (might be wrong)

	/*

	 * fills: TV mode: capability, rxsubchans, audmode, signal

	/*

	 * make sure that cx25840 is in a correct TV / radio mode,

	 * since calls above may have changed it for tuner / IF demod

	/*

	 * make sure that cx25840 is in a correct TV / radio mode,

	 * since calls above may have changed it for tuner / IF demod

	/*

	 * make sure we don't have improper std bits set for the TV tuner

	 * (could happen when no signal was present yet after reset)

/*

 * in principle, this should be const, but s_io_pin_config is declared

 * to take non-const, and gcc complains

 switch tuner to analog mode so IF demod will become accessible */

	/*

	 * cx25840 might have lost power during mode switching so we need

	 * to set it again

 composite */

 TODO: setup audio samples insertion */

 make sure that we aren't in radio mode */

	/*

	 * no locking needed since this call only modifies analog

	 * state if there are no other analog handles currenly

	 * opened so ops done via them cannot create a conflict

 attach cx25840 capture chip */

	/*

	 * Initialize cx25840 chip by calling its subdevice init core op.

	 *

	 * This switches it into the generic mode that disables some of

	 * ivtv-related hacks in the cx25840 driver while allowing setting

	 * of the chip video output configuration (passed in the call below

	 * as the last argument).

 attach analog tuner */

 configure it */

 attach IF demod */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant linux driver for mobile DVB-T USB devices based on

 * reference designs made by DiBcom (http://www.dibcom.fr/) (DiB3000M-C/P)

 *

 * Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * based on GPL code from DiBcom, which has

 * Copyright (C) 2004 Amaury Demol for DiBcom

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 USB Driver stuff */

 do not change the order of the ID table */

 00 */	{ USB_DEVICE(USB_VID_DIBCOM,		USB_PID_DIBCOM_MOD3001_COLD) },

 01 */	{ USB_DEVICE(USB_VID_DIBCOM,		USB_PID_DIBCOM_MOD3001_WARM) },

 02 */	{ USB_DEVICE(USB_VID_ULTIMA_ELECTRONIC,	USB_PID_ULTIMA_TVBOX_USB2_COLD) },

 ( ? )

 04 */	{ USB_DEVICE(USB_VID_LITEON,		USB_PID_LITEON_DVB_T_COLD) },

 05 */	{ USB_DEVICE(USB_VID_LITEON,		USB_PID_LITEON_DVB_T_WARM) },

 06 */	{ USB_DEVICE(USB_VID_EMPIA,		USB_PID_DIGIVOX_MINI_SL_COLD) },

 07 */	{ USB_DEVICE(USB_VID_EMPIA,		USB_PID_DIGIVOX_MINI_SL_WARM) },

 08 */	{ USB_DEVICE(USB_VID_GRANDTEC,          USB_PID_GRANDTEC_DVBT_USB2_COLD) },

 09 */	{ USB_DEVICE(USB_VID_GRANDTEC,          USB_PID_GRANDTEC_DVBT_USB2_WARM) },

 10 */	{ USB_DEVICE(USB_VID_ULTIMA_ELECTRONIC,	USB_PID_ARTEC_T14_COLD) },

 11 */	{ USB_DEVICE(USB_VID_ULTIMA_ELECTRONIC,	USB_PID_ARTEC_T14_WARM) },

 12 */	{ USB_DEVICE(USB_VID_LEADTEK,		USB_PID_WINFAST_DTV_DONGLE_COLD) },

 13 */	{ USB_DEVICE(USB_VID_LEADTEK,		USB_PID_WINFAST_DTV_DONGLE_WARM) },

 14 */	{ USB_DEVICE(USB_VID_HUMAX_COEX,	USB_PID_DVB_T_USB_STICK_HIGH_SPEED_COLD) },

 15 */	{ USB_DEVICE(USB_VID_HUMAX_COEX,	USB_PID_DVB_T_USB_STICK_HIGH_SPEED_WARM) },

 Terminating entry */

 parameter for the MPEG2-data transfer */

 FIXME */

 Also rebranded as Intuix S800, Toshiba */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant Linux driver for the

 *  - TwinhanDTV Alpha/MagicBoxII USB2.0 DVB-T receiver

 *  - DigitalNow TinyUSB2 DVB-t receiver

 *

 * Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * Thanks to Twinhan who kindly provided hardware and information.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 debug */

		/*

		 * The 8 bit address isn't available, but since the remote uses

		 * address 0 we'll use that. nec repeats are ignored too, even

		 * though the remote sends them.

	Dump the EEPROM */

	vp7045_read_eeprom(d,buf, 255, FX2_ID_ADDR); */

 parameter for the MPEG2-data transfer */

 usb specific object needed to register this driver with the usb subsystem */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB framework compliant Linux driver for the Opera1 DVB-S Card

*

* Copyright (C) 2006 Mario Hlawitschka (dh1pa@amsat.org)

* Copyright (C) 2006 Marco Gittler (g.marco@freenet.de)

*

* see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 I2C */

chanup */

chandown */

voldown */

volup */

tab */

play ok */

zoom */

mute */

tv/f */

rec */

Stop */

pause */

<- -> */

capture */

exit */

power */

 clear fpga ? */

 restart the CPU */

 parameter for the MPEG2-data transfer */

 SPDX-License-Identifier: GPL-2.0

/* usb-urb.c is part of the DVB USB library.

 *

 * Copyright (C) 2004-6 Patrick Boettcher (patrick.boettcher@posteo.de)

 * see dvb-usb-init.c for copyright information.

 *

 * This file keeps functions for initializing and handling the

 * BULK and ISOC USB data transfers in a generic way.

 * Can be used for DVB-only and also, that's the plan, for

 * Hybrid USB devices (analog and DVB).

 URB stuff for streaming */

 success */

 NAK */

 kill */

 error */

 stop the URB */

 allocate the URBs */

 allocate the URBs */

 free the URBs */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB framework compliant Linux driver for the Hauppauge WinTV-NOVA-T usb2

 * DVB-T receiver.

 *

 * Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 Hauppauge NOVA-T USB2 keys */

 # */

 Skip backwards */

/* Firmware bug? sometimes, when a new key is pressed, the previous pressed key

 * is delivered. No workaround yet, maybe a new firmware.

 this is a complete guess, but works for my box */

 USB Driver stuff */

 do not change the order of the ID table */

 00 */	{ USB_DEVICE(USB_VID_HAUPPAUGE,     USB_PID_WINTV_NOVA_T_USB2_COLD) },

 01 */	{ USB_DEVICE(USB_VID_HAUPPAUGE,     USB_PID_WINTV_NOVA_T_USB2_WARM) },

 Terminating entry */

 parameter for the MPEG2-data transfer */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB framework compliant Linux driver for the AVerMedia AverTV DVB-T

 * USB2.0 (A800) DVB-T receiver.

 *

 * Copyright (C) 2005 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * Thanks to

 *   - AVerMedia who kindly provided information and

 *   - Glen Harris who suffered from my mistakes during development.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 do nothing for the AVerMedia */

 assure to put cold to 0 for iManufacturer == 1 */

 Note that extended nec and nec32 are dropped */

 USB Driver stuff */

 do not change the order of the ID table */

 00 */	{ USB_DEVICE(USB_VID_AVERMEDIA,     USB_PID_AVERMEDIA_DVBT_USB2_COLD) },

 01 */	{ USB_DEVICE(USB_VID_AVERMEDIA,     USB_PID_AVERMEDIA_DVBT_USB2_WARM) },

 Terminating entry */

 parameter for the MPEG2-data transfer */

/*

 * Linux driver for Technisat DVB-S/S2 USB 2.0 device

 *

 * Copyright (C) 2010 Patrick Boettcher,

 *                    Kernel Labs Inc. PO Box 745, St James, NY 11780

 *

 * Development was sponsored by Technisat Digital UK Limited, whose

 * registered office is Witan Gate House 500 - 600 Witan Gate West,

 * Milton Keynes, MK9 1SH

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation; either version 2 of the

 * License, or (at your option) any later version.

 *

 *

 * THIS PROGRAM IS PROVIDED "AS IS" AND BOTH THE COPYRIGHT HOLDER AND

 * TECHNISAT DIGITAL UK LTD DISCLAIM ALL WARRANTIES WITH REGARD TO

 * THIS PROGRAM INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY OR

 * FITNESS FOR A PARTICULAR PURPOSE.  NEITHER THE COPYRIGHT HOLDER

 * NOR TECHNISAT DIGITAL UK LIMITED SHALL BE LIABLE FOR ANY SPECIAL,

 * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER

 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION

 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR

 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS PROGRAM. See the

 * GNU General Public License for more details.

 module parameters */

/* disables all LED control command and

 device private data */

 debug print helpers */

 vendor requests */

 i2c-access methods */

 handle tuner-i2c-nak */

 && device_is_technisat_usb2 */))

	/* Ensure nobody else hits the i2c bus while we're sending our

 LED control */

 method to find out whether the firmware has to be downloaded or not */

 first select the interface */

 by default do not download a firmware - just in case something is wrong */

 power control */

 green led is turned off in any case - will be turned on when tuning */

 red led is turned on all the time */

 mac address reading - from the eeprom */

 full EEPROM dump */

 frontend attach */

 0 = 2, 1 = 3, 2 = 4 */

 high - voltage ? */

			/* call the init function once to initialize

			   tuner's clock output divider and demod's

 if everything was successful assign a nice name to the frontend */

 Remote control */

/* the device is giving providing raw IR-signals to the host mapping

 * it only to one remote control is just the default implementation

 no key pressed */

 decoding */

 DVB-USB and USB stuff follows */

 Terminating entry */

 device description */

 work and stuff was only created when the device is is hot-state */

 SPDX-License-Identifier: GPL-2.0-only

/* Common methods for dibusb-based-receivers.

 *

 * Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@desy.de)

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 3000MC/P stuff */

 Config Adjacent channels  Perf -cal22

 First IF calibration for Liteon Sticks

 not found - use panasonic pll parameters */

 set the correct parameters for the dib3000p */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant linux driver for MSI Mega Sky 580 DVB-T USB2.0 receiver

 *

 * Copyright (C) 2006 Aapo Tahkola (aet@rasterburn.org)

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 debug */

 Remote controller init. */

 Some devices(Dposh) might crash if we attempt touch at all. */

 framing error or "invalid code" */

 pinnacle PCTV310e */

 pinnacle PCTV310e */

 prevent immediate auto-repeat */

 I2C */

			/* For a 0 byte message, I think sending the address

			 * to index 0x80|0x40 would be the correct thing to

			 * do.  However, zero byte messages are only used for

			 * probing, and since we don't know how to get the

 Send START & address/RW bit */

 Should check for ack here, if we knew how. */

				/* Last byte of transaction?

 Last byte of transaction? Then send STOP. */

 Should check for ack here too. */

 pid filter */

 Disable all filters */

 Set */

 Will stall if using fw->data ... */

 m920x will disconnect itself from the bus after this. */

 Callbacks for DVB USB */

 demod configurations */

 uses firmware EEPROM */

 tuner configurations */

 0xc0 */

 Callbacks for DVB USB */

		/* XXX without these commands the frontend cannot be detected,

 terminating entry */

 device-specific initialization */

 terminating entry */

 terminating entry */

 without these the tuner doesn't work */

 rc settings */

 terminating entry */

 terminating entry */

 ir keymaps */

 min/max */

 TS */

 swap */

 screenshot */

 "MTS" */

 Full Screen */

 snapshot */

 Play/Pause */

 Timeshift */

 Recall */

 source */

 TWIN PIP */

 preview */

 record list */

 could also be KEY_OK */

 Replay */

 Skip */

 Capture */

	{ 0x50, KEY_SAP },	*/		
 Pip */

 FullScreen */

	{ 0x49, KEY_LR },	*/		
 Hibernate */

 A/V */

 Recall */

 Red */

 Green */

 Yellow */

 Blue */

 DVB USB Driver stuff */

		/* Single-tuner device, or first interface on

		 * multi-tuner device

 No remote control, so no rc_init_seq */

 This configures both tuners on the TV Walker Twin */

 Remote controller not supported yet. */

 Another interface on a multi-tuner device */

		/* The LifeView TV Walker Twin gets here, but struct

		 * tvwalkertwin_properties already configured both

		 * tuners, so there is nothing for us to do here

 Terminating entry */

/* LifeView TV Walker Twin support by Nick Andrew <nick@nick-andrew.net>

 *

 * LifeView TV Walker Twin has 1 x M9206, 2 x TDA10046, 2 x TDA8275A

 * TDA10046 #0 is located at i2c address 0x08

 * TDA10046 #1 is located at i2c address 0x0b

 * TDA8275A #0 is located at i2c address 0x60

 * TDA8275A #1 is located at i2c address 0x61

 Hardware pid filters don't work with this device/firmware */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant linux driver for mobile DVB-T USB devices based on

 * reference designs made by DiBcom (http://www.dibcom.fr/) (DiB3000M-B)

 *

 * Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * based on GPL code from DiBcom, which has

 * Copyright (C) 2004 Amaury Demol for DiBcom

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

/* Some of the Artec 1.1 device aren't equipped with the default tuner

 * (Thomson Cable), but with a Panasonic ENV77H11D5.  This function figures

 the Panasonic sits on I2C addrass 0x60, the Thomson on 0x61 */

 USB Driver stuff */

 do not change the order of the ID table */

 00 */	{ USB_DEVICE(USB_VID_WIDEVIEW,		USB_PID_AVERMEDIA_DVBT_USB_COLD) },

 01 */	{ USB_DEVICE(USB_VID_WIDEVIEW,		USB_PID_AVERMEDIA_DVBT_USB_WARM) },

 02 */	{ USB_DEVICE(USB_VID_COMPRO,		USB_PID_COMPRO_DVBU2000_COLD) },

 03 */	{ USB_DEVICE(USB_VID_COMPRO,		USB_PID_COMPRO_DVBU2000_WARM) },

 04 */	{ USB_DEVICE(USB_VID_COMPRO_UNK,	USB_PID_COMPRO_DVBU2000_UNK_COLD) },

 05 */	{ USB_DEVICE(USB_VID_DIBCOM,		USB_PID_DIBCOM_MOD3000_COLD) },

 06 */	{ USB_DEVICE(USB_VID_DIBCOM,		USB_PID_DIBCOM_MOD3000_WARM) },

 07 */	{ USB_DEVICE(USB_VID_EMPIA,		USB_PID_KWORLD_VSTREAM_COLD) },

 08 */	{ USB_DEVICE(USB_VID_EMPIA,		USB_PID_KWORLD_VSTREAM_WARM) },

 09 */	{ USB_DEVICE(USB_VID_GRANDTEC,		USB_PID_GRANDTEC_DVBT_USB_COLD) },

 10 */	{ USB_DEVICE(USB_VID_GRANDTEC,		USB_PID_GRANDTEC_DVBT_USB_WARM) },

 11 */	{ USB_DEVICE(USB_VID_GRANDTEC,		USB_PID_DIBCOM_MOD3000_COLD) },

 12 */	{ USB_DEVICE(USB_VID_GRANDTEC,		USB_PID_DIBCOM_MOD3000_WARM) },

 13 */	{ USB_DEVICE(USB_VID_HYPER_PALTEK,	USB_PID_UNK_HYPER_PALTEK_COLD) },

 14 */	{ USB_DEVICE(USB_VID_HYPER_PALTEK,	USB_PID_UNK_HYPER_PALTEK_WARM) },

 15 */	{ USB_DEVICE(USB_VID_VISIONPLUS,	USB_PID_TWINHAN_VP7041_COLD) },

 16 */	{ USB_DEVICE(USB_VID_VISIONPLUS,	USB_PID_TWINHAN_VP7041_WARM) },

 17 */	{ USB_DEVICE(USB_VID_TWINHAN,		USB_PID_TWINHAN_VP7041_COLD) },

 18 */	{ USB_DEVICE(USB_VID_TWINHAN,		USB_PID_TWINHAN_VP7041_WARM) },

 19 */	{ USB_DEVICE(USB_VID_ULTIMA_ELECTRONIC,	USB_PID_ULTIMA_TVBOX_COLD) },

 20 */	{ USB_DEVICE(USB_VID_ULTIMA_ELECTRONIC,	USB_PID_ULTIMA_TVBOX_WARM) },

 21 */	{ USB_DEVICE(USB_VID_ULTIMA_ELECTRONIC,	USB_PID_ULTIMA_TVBOX_AN2235_COLD) },

 22 */	{ USB_DEVICE(USB_VID_ULTIMA_ELECTRONIC,	USB_PID_ULTIMA_TVBOX_AN2235_WARM) },

 23 */	{ USB_DEVICE(USB_VID_ADSTECH,		USB_PID_ADSTECH_USB2_COLD) },

 device ID with default DIBUSB2_0-firmware and with the hacked firmware */

 24 */	{ USB_DEVICE(USB_VID_ADSTECH,		USB_PID_ADSTECH_USB2_WARM) },

 25 */	{ USB_DEVICE(USB_VID_KYE,		USB_PID_KYE_DVB_T_COLD) },

 26 */	{ USB_DEVICE(USB_VID_KYE,		USB_PID_KYE_DVB_T_WARM) },

 27 */	{ USB_DEVICE(USB_VID_KWORLD,		USB_PID_KWORLD_VSTREAM_COLD) },

 28 */	{ USB_DEVICE(USB_VID_ULTIMA_ELECTRONIC,	USB_PID_ULTIMA_TVBOX_USB2_COLD) },

 29 */	{ USB_DEVICE(USB_VID_ULTIMA_ELECTRONIC,	USB_PID_ULTIMA_TVBOX_USB2_WARM) },

/*

 * XXX: As Artec just 'forgot' to program the EEPROM on some Artec T1 devices

 *      we don't catch these faulty IDs (namely 'Cypress FX1 USB controller') that

 *      have been left on the device. If you don't have such a device but an Artec

 *      device that's supposed to work with this driver but is not detected by it,

 *      free to enable CONFIG_DVB_USB_DIBUSB_MB_FAULTY via your kernel config.

 30 */	{ USB_DEVICE(USB_VID_ANCHOR,		USB_PID_ULTIMA_TVBOX_ANCHOR_COLD) },

 Terminating entry */

 parameter for the MPEG2-data transfer */

 wow, that is ugly ... I want to load it to the driver dynamically */

 parameter for the MPEG2-data transfer */

 wow, that is ugly ... I want to load it to the driver dynamically */

 parameter for the MPEG2-data transfer */

 wow, that is ugly ... I want to load it to the driver dynamically */

 parameter for the MPEG2-data transfer */

 wow, that is ugly ... I want to load it to the driver dynamically */

 SPDX-License-Identifier: GPL-2.0-only

/* Linux driver for devices based on the DiBcom DiB0700 USB bridge

 *

 *  Copyright (C) 2005-6 DiBcom, SA

 debug */

 expecting rx buffer: request data[0] data[1] ... data[2] */

 expecting tx buffer: request data[0] ... data[n] (n <= 4) */

 length in case of success */

/*

 * I2C master xfer function (supported in 1.20 firmware)

	/* The new i2c firmware messages are more reliable and in particular

 0=eeprom bus, 1=frontend bus */

 0=master i2c, 1=gpio i2c */

	/* Ensure nobody else hits the i2c bus while we're sending our

 First message in the transaction */

 Device supports repeated-start */

			/* Not the first packet and device doesn't support

 Last message in the transaction */

 Read request */

 I2C ctrl + FE bus; */

 Write request */

 I2C ctrl + FE bus; */

 The Actual i2c payload */

/*

 * I2C master xfer function (pre-1.20 firmware)

 fill in the address */

 fill the buffer */

 write/read request */

 special thing in the current firmware: when length is zero the read-failed */

 User running at least fw 1.20 */

 Use legacy calls */

 MSB */

 LSB */

 MSB */

 LSB */

 MSB */

 LSB */

 MSB */

 LSB */

 clock: 72MHz */

 start the firmware */

 the number of ts packet has to be at least 1 */

 get the firmware version */

	/* set the buffer size - DVB-USB is allocating URB buffers

				/* for fw version older than 1.20.1,

		/* for firmware later than 1.20.1,

	/* this bit gives a kind of command,

 Master mode */

 Set the IR mode */

 This is the structure of the RC response packet starting in firmware 1.20 */

 This will occur if disable_rc_polling=1 */

 NEC protocol sends repeat code as 0 0 0 FF */

 Key failed integrity check */

 Clean the buffer before we requeue */

 Requeue URB */

 Poll-based. Don't initialize bulk mode */

 Starting in firmware 1.20, the RC info is provided on a bulk pipe */

	/*

	 * Some devices like the Hauppauge NovaTD model 52009 use an interrupt

	 * endpoint, while others use a bulk one.

 Disable polling mode on newer firmwares */

 remove I2C client for tuner */

 remove I2C client for demodulator */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB compliant Linux driver for the TwinhanDTV StarBox USB2.0 DVB-S

 * receiver.

 *

 * Copyright (C) 2005 Ralph Metzler <rjkm@metzlerbros.de>

 *                    Metzler Brothers Systementwicklung GbR

 *

 * Copyright (C) 2005 Patrick Boettcher <patrick.boettcher@posteo.de>

 *

 * Thanks to Twinhan who kindly provided hardware and information.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 debug */

 bypass */

 filter */

 keys for the enclosed remote control */

 remote control stuff (does not work with my box) */

 remove the following return to enabled remote querying */

	    { USB_DEVICE(USB_VID_VISIONPLUS, USB_PID_TWINHAN_VP7020_COLD) },

	    { USB_DEVICE(USB_VID_VISIONPLUS, USB_PID_TWINHAN_VP7020_WARM) },

 parameter for the MPEG2-data transfer */

/*		{ .name = "TwinhanDTV StarBox DVB-S USB2.0 (VP7020)",

		  .cold_ids = { &vp702x_usb_table[2], NULL },

		  .warm_ids = { &vp702x_usb_table[3], NULL },

		},

 usb specific object needed to register this driver with the usb subsystem */

 SPDX-License-Identifier: GPL-2.0

/* dvb-usb-urb.c is part of the DVB USB library.

 *

 * Copyright (C) 2004-6 Patrick Boettcher (patrick.boettcher@posteo.de)

 * see dvb-usb-init.c for copyright information.

 *

 * This file keeps functions for initializing and handling the

 * USB and URB stuff.

 an answer is expected, and no error before */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB USB framework compliant Linux driver for the

 *	DVBWorld DVB-S 2101, 2102, DVB-S2 2104, DVB-C 3101,

 *	TeVii S421, S480, S482, S600, S630, S632, S650, S660, S662,

 *	Prof 1100, 7500,

 *	Geniatech SU3000, T220,

 *	TechnoTrend S2-4600,

 *	Terratec Cinergy S2 cards

 * Copyright (C) 2008-2012 Igor M. Liplianin (liplianin@me.by)

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

 Max transfer size done by I2C transfer functions */

 on my own*/

 fe hook functions*/

 debug */

 demod probe */

 I2C */

 read stv0299 register */

 register */

 write to stv0299 register */

 write to tuner pll */

 read from tuner */

 read si2109 register by number */

 read si2109 register */

 write to si2109 register */

 read */

 first write first register number */

 second read registers */

 write to register */

 write to tuner */

		/*case 0x55: cx24116

		case 0x6a: stv0903

		case 0x68: ds3000, stv0903

 read registers */

 write firmware */

 write registers */

 read */

 first write first register number */

 second read registers */

 write to register */

 off-on */

 13v-18v */

		/*case 0x55: cx24116

		case 0x6a: stv0903

		case 0x68: ds3000, stv0903, rs2000

		case 0x60: ts2020, stv6110, stb6100

 read registers */

 write firmware */

 write register addr before read */

 write registers */

 always i2c write*/

 always i2c read */

 reset board */

 resync slave fifo when signal change from unlock to lock */

 0-CLKI, 2-XTALI, else AUTO */

 2/3 PWM */

 0x60 */

 2 Vpp */

 1 Vpp */

 0-CLKI, 2-XTALI, else AUTO */

 2/3 PWM */

 0x60 */

 2 Vpp */

 (0xd8 >> 1) */

dw2102_properties.adapter->tuner_attach = NULL;*/

dw2102_properties.adapter->tuner_attach = dw2102_tuner_attach;*/

 fail(7) or error, no device at address */

 probing successful */

 probe for demodulator i2c address */

 attach demod */

 attach tuner */

 delegate signal strength measurement to tuner */

 hook fe: need to resync the slave fifo when signal locks */

stop the CPU*/

 restart the CPU */

 init registers */

 check STV0299 frontend  */

 check STV0288 frontend  */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 parameter for the MPEG2-data transfer */

 copy default structure */

 fill only different fields */

 clean up copied properties */

 remove I2C client for tuner */

 remove I2C client for demodulator */

 SPDX-License-Identifier: GPL-2.0-only

/* DVB frontend part of the Linux driver for TwinhanDTV Alpha/MagicBoxII USB2.0

 * DVB-T receiver.

 *

 * Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * Thanks to Twinhan who kindly provided hardware and information.

 *

 * see Documentation/driver-api/media/drivers/dvb-usb.rst for more information

/* It is a Zarlink MT352 within a Samsung Tuner (DNOS404ZH102A) - 040929 - AAT

 *

 * Programming is hidden inside the firmware, so set_frontend is very easy.

 * Even though there is a Firmware command that one can use to access the demod

 * via its registers. This is used for status information.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Mirics MSi2500 driver

 * Mirics MSi3101 SDR Dongle driver

 *

 * Copyright (C) 2013 Antti Palosaari <crope@iki.fi>

 *

 * That driver is somehow based of pwc driver:

 *  (C) 1999-2004 Nemosoft Unv.

 *  (C) 2004-2006 Luc Saillard (luc@saillard.org)

 *  (C) 2011 Hans de Goede <hdegoede@redhat.com>

/*

 *   iConfiguration          0

 *     bInterfaceNumber        0

 *     bAlternateSetting       1

 *     bNumEndpoints           1

 *       bEndpointAddress     0x81  EP 1 IN

 *       bmAttributes            1

 *         Transfer Type            Isochronous

 *       wMaxPacketSize     0x1400  3x 1024 bytes

 *       bInterval               1

/*

 * TODO: These formats should be moved to V4L2 API. Formats are currently

 * disabled from formats[] table, not visible to userspace.

 signed 12-bit */

 Mirics MSi2500 format 384 */

 stream formats */

 format descriptions for capture and preview */

 intermediate buffers with raw data from the USB device */

 common v4l buffer stuff -- must be first */

 videobuf2 queue and queued buffers list */

 Protects queued_bufs */

 Note if taking both locks v4l2_lock must always be locked first! */

 Protects everything else */

 Protects vb_queue and capt_file */

 Pointer to our usb_device, will be NULL after unplug */

 Both mutexes most be hold when setting! */

 number of contiguous ISOC errors */

 vb is full and packets dropped */

 Controls */

 for track lost packets */

 for sample rate calc */

 Private functions */

/*

 * +===========================================================================

 * |   00-1023 | USB packet type '504'

 * +===========================================================================

 * |   00-  03 | sequence number of first sample in that USB packet

 * +---------------------------------------------------------------------------

 * |   04-  15 | garbage

 * +---------------------------------------------------------------------------

 * |   16-1023 | samples

 * +---------------------------------------------------------------------------

 * signed 8-bit sample

 * 504 * 2 = 1008 samples

 *

 *

 * +===========================================================================

 * |   00-1023 | USB packet type '384'

 * +===========================================================================

 * |   00-  03 | sequence number of first sample in that USB packet

 * +---------------------------------------------------------------------------

 * |   04-  15 | garbage

 * +---------------------------------------------------------------------------

 * |   16- 175 | samples

 * +---------------------------------------------------------------------------

 * |  176- 179 | control bits for previous samples

 * +---------------------------------------------------------------------------

 * |  180- 339 | samples

 * +---------------------------------------------------------------------------

 * |  340- 343 | control bits for previous samples

 * +---------------------------------------------------------------------------

 * |  344- 503 | samples

 * +---------------------------------------------------------------------------

 * |  504- 507 | control bits for previous samples

 * +---------------------------------------------------------------------------

 * |  508- 667 | samples

 * +---------------------------------------------------------------------------

 * |  668- 671 | control bits for previous samples

 * +---------------------------------------------------------------------------

 * |  672- 831 | samples

 * +---------------------------------------------------------------------------

 * |  832- 835 | control bits for previous samples

 * +---------------------------------------------------------------------------

 * |  836- 995 | samples

 * +---------------------------------------------------------------------------

 * |  996- 999 | control bits for previous samples

 * +---------------------------------------------------------------------------

 * | 1000-1023 | garbage

 * +---------------------------------------------------------------------------

 *

 * Bytes 4 - 7 could have some meaning?

 *

 * Control bits for previous samples is 32-bit field, containing 16 x 2-bit

 * numbers. This results one 2-bit number for 8 samples. It is likely used for

 * for bit shifting sample by given bits, increasing actual sampling resolution.

 * Number 2 (0b10) was never seen.

 *

 * 6 * 16 * 2 * 4 = 768 samples. 768 * 4 = 3072 bytes

 *

 *

 * +===========================================================================

 * |   00-1023 | USB packet type '336'

 * +===========================================================================

 * |   00-  03 | sequence number of first sample in that USB packet

 * +---------------------------------------------------------------------------

 * |   04-  15 | garbage

 * +---------------------------------------------------------------------------

 * |   16-1023 | samples

 * +---------------------------------------------------------------------------

 * signed 12-bit sample

 *

 *

 * +===========================================================================

 * |   00-1023 | USB packet type '252'

 * +===========================================================================

 * |   00-  03 | sequence number of first sample in that USB packet

 * +---------------------------------------------------------------------------

 * |   04-  15 | garbage

 * +---------------------------------------------------------------------------

 * |   16-1023 | samples

 * +---------------------------------------------------------------------------

 * signed 14-bit sample

 There could be 1-3 1024 byte transactions per packet */

		/*

		 * Dump all unknown 'garbage' data - maybe we will discover

		 * someday if there is something rational...

 skip header */

 504 x IQ samples */

 252 x IQ samples */

 sign extension */

 sign extension from 14-bit to signed int */

 from signed int to unsigned int */

 from 14-bit to 16-bit */

 384 x IQ samples */

 Dump unknown 'garbage' data */

 504 x IQ samples */

 336 x IQ samples */

 252 x IQ samples */

 calculate sample rate and output it in 10 seconds intervals */

/*

 * This gets called for the Isochronous pipe (stream). This is done in interrupt

 * time, so it has to be fast, not crash, and not stall. Neat.

 Give up after a number of contiguous errors */

 Reset ISOC error counter. We did get here, after all. */

 Compact data */

 Check frame error */

 Check if that frame contains data */

 Get free framebuffer */

 fill framebuffer */

 Unlinking ISOC buffers one by one */

 Freeing ISOC buffers one by one */

 Both v4l2_lock and vb_queue_lock should be locked when calling this */

 Both v4l2_lock and vb_queue_lock should be locked when calling this */

 Allocate and init Isochronuous urbs */

 link */

 All is done... */

 Must be called with vb_queue_lock hold */

 The user yanked out the cable... */

 No need to keep the urbs around after disconnection */

 Videobuf2 operations */

 Absolute min and max number of buffers available for mmap() */

 Check the device has not disconnected between prep and queuing */

 set tuner, subdev, filters according to sampling rate */

 select stream format */

 504 */

 252 */

 504 */

 384 */

 336 */

 252 */

 504 */

	/*

	 * Fractional-N synthesizer

	 *

	 *           +----------------------------------------+

	 *           v                                        |

	 *  Fref   +----+     +-------+     +-----+         +------+     +---+

	 * ------> | PD | --> |  VCO  | --> | /2  | ------> | /N.F | <-- | K |

	 *         +----+     +-------+     +-----+         +------+     +---+

	 *                      |

	 *                      |

	 *                      v

	 *                    +-------+     +-----+  Fout

	 *                    | /Rout | --> | /12 | ------>

	 *                    +-------+     +-----+

	/*

	 * Synthesizer config is just a educated guess...

	 *

	 * [7:0]   0x03, register address

	 * [8]     1, power control

	 * [9]     ?, power control

	 * [12:10] output divider

	 * [13]    0 ?

	 * [14]    0 ?

	 * [15]    fractional MSB, bit 20

	 * [16:19] N

	 * [23:20] ?

	 * [24:31] 0x01

	 *

	 * output divider

	 * val   div

	 *   0     - (invalid)

	 *   1     4

	 *   2     6

	 *   3     8

	 *   4    10

	 *   5    12

	 *   6    14

	 *   7    16

	 *

	 * VCO 202000000 - 720000000++

 XXX: Filters? AGC? VCO band? */

 Calculate PLL integer and fractional control word. */

 [20] */

 [19:0] */

 wake-up tuner */

 according to tests, at least 700us delay is required  */

 sleep USB IF / ADC */

 sleep tuner */

 reg 9 is SPI adapter */

 Init videobuf2 queue structure */

 Init video_device structure */

 Register the v4l2_device structure */

 SPI master adapter */

 load v4l2 subdevice */

 Register controls */

 currently all controls are from subdev */

 USB device ID list */

 Mirics MSi3101 SDR Dongle */

 Hauppauge WinTV 133559 LF */

 USB subsystem interface */

 SPDX-License-Identifier: GPL-2.0+



 em28xx-i2c.c - driver for Empia EM2800/EM2820/2840 USB video capture devices



 Copyright (C) 2005 Ludovico Cavedon <cavedon@sssup.it>

		      Markus Rechberger <mrechberger@gmail.com>

		      Mauro Carvalho Chehab <mchehab@kernel.org>

		      Sascha Sommer <saschasommer@freenet.de>

 Copyright (C) 2013 Frank Schäfer <fschaefer.oss@googlemail.com>



 This program is free software; you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation; either version 2 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.

 ----------------------------------------------------------- */

/*

 * Time in msecs to wait for i2c xfers to finish.

 * 35ms is the maximum time a SMBUS device could wait when

 * clock stretching is used. As the transfer itself will take

 * some time to happen, set it to 35 ms.

 *

 * Ok, I2C doesn't specify any limit. So, eventually, we may need

 * to increase this timeout.

 ms */

 Assume 4 ms for transfers */

 Assume 1 ms for transfers */

 EM28XX_I2C_FREQ_1_5_MHZ */

/*

 * em2800_i2c_send_bytes()

 * send up to 4 bytes to the em2800 i2c device

 trigger write */

 wait for completion */

/*

 * em2800_i2c_recv_bytes()

 * read up to 4 bytes from the em2800 i2c device

 trigger read */

 wait for completion */

 get the received message */

/*

 * em2800_i2c_check_for_device()

 * check if there is an i2c device at the supplied address

/*

 * em28xx_i2c_send_bytes()

	/*

	 * NOTE: limited by the USB ctrl message constraints

	 * Zero length reads always succeed, even if no device is connected

 Write to i2c device */

 wait for completion */

 success */

		/*

		 * NOTE: do we really have to wait for success ?

		 * Never seen anything else than 0x00 or 0x10

		 * (even with high payload) ...

 NOTE: these errors seem to be related to clock stretching */

/*

 * em28xx_i2c_recv_bytes()

 * read a byte from the i2c device

	/*

	 * NOTE: limited by the USB ctrl message constraints

	 * Zero length reads always succeed, even if no device is connected

 Read data from i2c device */

	/*

	 * NOTE: some devices with two i2c buses have the bad habit to return 0

	 * bytes if we are on bus B AND there was no write attempt to the

	 * specified slave address before AND no device is present at the

	 * requested slave address.

	 * Anyway, the next check will fail with -ENXIO in this case, so avoid

	 * spamming the system log on device probing and do nothing here.

 Check success of the i2c operation */

 success */

 NOTE: these errors seem to be related to clock stretching */

/*

 * em28xx_i2c_check_for_device()

 * check if there is a i2c_device at the supplied address

/*

 * em25xx_bus_B_send_bytes

 * write bytes to the i2c device

	/*

	 * NOTE: limited by the USB ctrl message constraints

	 * Zero length reads always succeed, even if no device is connected

 Set register and write value */

 Check success */

	/*

	 * NOTE: the only error we've seen so far is

	 * 0x01 when the slave device is not present

	/*

	 * NOTE: With chip types (other chip IDs) which actually don't support

	 * this operation, it seems to succeed ALWAYS ! (even if there is no

	 * slave device or even no second i2c bus provided)

/*

 * em25xx_bus_B_recv_bytes

 * read bytes from the i2c device

	/*

	 * NOTE: limited by the USB ctrl message constraints

	 * Zero length reads always succeed, even if no device is connected

 Read value */

	/*

	 * NOTE: some devices with two i2c buses have the bad habit to return 0

	 * bytes if we are on bus B AND there was no write attempt to the

	 * specified slave address before AND no device is present at the

	 * requested slave address.

	 * Anyway, the next check will fail with -ENXIO in this case, so avoid

	 * spamming the system log on device probing and do nothing here.

 Check success */

	/*

	 * NOTE: the only error we've seen so far is

	 * 0x01 when the slave device is not present

	/*

	 * NOTE: With chip types (other chip IDs) which actually don't support

	 * this operation, it seems to succeed ALWAYS ! (even if there is no

	 * slave device or even no second i2c bus provided)

/*

 * em25xx_bus_B_check_for_device()

 * check if there is a i2c device at the supplied address

	/*

	 * NOTE: With chips which do not support this operation,

	 * it seems to succeed ALWAYS ! (even if no device connected)

/*

 * em28xx_i2c_xfer()

 * the main i2c transfer function

	/*

	 * prevent i2c xfer attempts after device is disconnected

	 * some fe's try to do i2c writes/reads from their release

	 * interfaces when called in disconnect path

 Switch I2C bus if needed */

			/*

			 * no len: check only for device presence

			 * This code is only called during device probe.

 read bytes */

 write bytes */

/*

 * based on linux/sunrpc/svcauth.h and linux/hash.h

 * The original hash function returns a different value, if arch is x86_64

 * or i386.

/*

 * Helper function to read data blocks from i2c clients with 8 or 16 bit

 * address width, 8 bit register width and auto incrementation been activated

 Sanity check */

 Select address */

 Read data */

	/*

	 * FIXME common length/size for bytes to read, to display, hash

	 * calculation and returned device dataset. Simplifies the code a lot,

	 * but we might have to deal with multiple sizes in the future !

 EEPROM is always on i2c bus 0 on all known devices. */

 Check if board has eeprom */

 Read EEPROM content */

 Display eeprom content */

 new eeprom format; size 4-64kb */

 usually 0x0004 */

		/*

		 * boot configuration (address 0x0002):

		 * [0]   microcode download speed: 1 = 400 kHz; 0 = 100 kHz

		 * [1]   always selects 12 kb RAM

		 * [2]   USB device speed: 1 = force Full Speed; 0 = auto detect

		 * [4]   1 = force fast mode and no suspend for device testing

		 * [5:7] USB PHY tuning registers; determined by device

		 *       characterization

		/*

		 * Read hardware config dataset offset from address

		 * (microcode start + 46)

 Calculate hardware config dataset start address */

 Read hardware config dataset */

		/*

		 * NOTE: the microcode copy can be multiple pages long, but

		 * we assume the hardware config dataset is the same as in

		 * the old eeprom and not longer than 256 bytes.

		 * tveeprom is currently also limited to 256 bytes.

 Verify hardware config dataset */

 NOTE: not all devices provide this type of dataset */

		/*

		 * TODO: decrypt eeprom data for camera bridges

		 * (em25xx, em276x+)

 ----------------------------------------------------------- */

/*

 * functionality()

 ----------------------------------------------------------- */

/*

 * i2c_devs

 * incomplete list of known devices

/*

 * do_i2c_scan()

 * check i2c address range for devices

/*

 * em28xx_i2c_register()

 * register i2c bus

 Up to now, all eeproms are at bus 0 */

/*

 * em28xx_i2c_unregister()

 * unregister i2c_bus

 SPDX-License-Identifier: GPL-2.0+



 em28xx-video.c - driver for Empia EM2800/EM2820/2840 USB

		    video capture devices



 Copyright (C) 2005 Ludovico Cavedon <cavedon@sssup.it>

		      Markus Rechberger <mrechberger@gmail.com>

		      Mauro Carvalho Chehab <mchehab@kernel.org>

		      Sascha Sommer <saschasommer@freenet.de>

 Copyright (C) 2012 Frank Schäfer <fschaefer.oss@googlemail.com>



	Some parts based on SN9C10x PC Camera Controllers GPL driver made

		by Luca Risolia <luca.risolia@studio.unibo.it>



 This program is free software; you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation; either version 2 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.

 supported video standards */

FIXME: maxw should be dependent of alt mode */

 Modprobe option to manually disable */

 FIXME: check subdevices for VBI support */

 Version of em28xx that does not support VBI */

/*

 * em28xx_wake_i2c()

 * configure i2c attached devices

	/*

	 * NOTE: it's not clear if this is really needed !

	 * The datasheets say bit 5 is a reserved bit and devices seem to work

	 * fine without it. But the Windows driver sets it for em2710/50+em28xx

	 * devices and we've always been setting it, too.

	 *

	 * em2765 (em25xx, em276x/7x/8x) devices do NOT work with this bit set,

	 * it's likely used for an additional (compressed ?) format there.

 NTSC */

 PAL */

 NOTE: size limit: 2047x1023 = 2MPix */

 FIXME: function/meaning of these registers ? */

 FIXME: align width+height to multiples of 4 ?! */

 the em2800 scaler only supports scaling down to 50% */

		/*

		 * it seems that both H and V scalers must be active

		 * to work correctly

 FIXME: this only function read values from dev */

 Properly setup VBI */

	/*

	 * If we don't set the start position to 2 in VBI mode, we end up

	 * with line 20/21 being YUYV encoded instead of being in 8-bit

	 * greyscale.  The core of the issue is that line 21 (and line 23 for

	 * PAL WSS) are inside of active video region, and as a result they

	 * get the pixelformatting associated with that area.  So by cropping

	 * it out, we end up with the same format as the rest of the VBI

	 * region

 Set USB alternate setting for analog video */

	/*

	 * NOTE: for isoc transfers, only alt settings > 0 are allowed

	 * bulk transfers seem to work only with alt=0 !

	/*

	 * When image size is bigger than a certain value,

	 * the frame size should be increased, otherwise, only

	 * green screen will be received.

 stop when the selected alt setting offers enough bandwidth */

		/*

		 * otherwise make sure that we end up with the maximum

		 * bandwidth because the min_pkt_size equation might be wrong.

		 *

	/*

	 * NOTE: for bulk transfers, we need to call usb_set_interface()

	 * even if the previous settings were the same. Otherwise streaming

	 * fails with all urbs having status = -EOVERFLOW !

 USB 2.0 spec */

 isoc */

/*

 * DMA and thread functions

/*

 * Finish the current buffer

/*

 * Copy picture data from USB buffer to videobuf buffer

 interlaced mode, even nr. of lines */

/*

 * Copy VBI data from USB buffer to videobuf buffer

 Make sure the bottom field populates the second half of the frame */

/*

 * get the next available buffer from dma queue

 Get the next buffer */

 Cleans up buffer - Useful for testing for frame/URB loss */

/*

 * Finish the current buffer if completed and prepare for the next field

 Brand new frame */

/*

 * Process data packet according to the em2710/em2750/em28xx frame data format

	/*

	 * capture type 0 = vbi start

	 * capture type 1 = vbi in progress

	 * capture type 2 = video start

	 * capture type 3 = video in progress

		/*

		 * NOTE: Headers are always 4 bytes and

		 * never split across packets

 Continuation */

 Field start (VBI mode) */

 Field start (VBI disabled) */

	/*

	 * NOTE: With bulk transfers, intermediate data packets

	 * have no continuation header

 Copy VBI data */

 Continue with copying video data */

/*

 * Process data packet according to the em25xx/em276x/7x/8x frame data format

 Check for header */

	/*

	 * NOTE: at least with bulk transfers, only the first packet

	 * has a header and has always set the FRAME_END bit

 em25xx header is only 2 bytes long */

 Finish field and prepare next (BULK only) */

		/*

		 * NOTE: in ISOC mode when a new frame starts and buf==NULL,

		 * we COULD already prepare a buffer here to avoid skipping the

		 * first frame.

 Copy data */

 Finish frame (ISOC only) => avoids lag of 1 frame */

	/*

	 * NOTES:

	 *

	 * 1) Tested with USB bulk transfers only !

	 * The wording in the datasheet suggests that isoc might work different.

	 * The current code assumes that with isoc transfers each packet has a

	 * header like with the other em28xx devices.

	 *

	 * 2) Support for interlaced mode is pure theory. It has not been

	 * tested and it is unknown if these devices actually support it.

 Processes and copies the URB data content (video and VBI data) */

 bulk */

 isoc */

 bulk */

 isoc */

 NOTE: happens very often with isoc transfers */

 em28xx_usbdbg("packet %d is empty",i); - spammy */

 Indicate that device is busy */

 Usage lock check functions */

 is it free? */

 no, someone else uses it */

 it's free, grab it */

/*

 * Media Controller helper functions

	/*

	 * This will find the tuner that is connected into the decoder.

	 * Technically, this is not 100% correct, as the device may be

	 * using an analog input instead of the tuner. However, as we can't

	 * do DVB streaming while the DMA engine is being used for V4L2,

	 * this should be enough for the actual needs.

 Initialize Video, VBI and Radio pads */

 Webcams don't have input connectors */

 Create entities for each input connector */

 EM28XX_VMUX_TELEVISION or EM28XX_RADIO */

/*

 * Videobuf2 operations

	/*

	 * Make sure streaming is not already in progress for this type

	 * of filehandle (e.g. video, vbi)

 First active streaming user, so allocate all the URBs */

 Allocate the USB bandwidth */

		/*

		 * Needed, since GPIO might have disabled power of

		 * some i2c device

		/*

		 * djh: it's not clear whether this code is still needed.  I'm

		 * leaving it in here for now entirely out of concern for

		 * backward compatibility (the old code did it)

 Ask tuner to go to analog or radio mode */

 Enable video stream at TV decoder */

 Disable video stream at TV decoder */

 Last active user, so shutdown all the URBS */

 Disable video stream at TV decoder */

 Last active user, so shutdown all the URBS */

 Setup Videobuf2 for Video capture */

 Setup Videobuf2 for VBI capture */

/*

 * v4l2 interface

 Note: this is msp3400 specific */

	/*

	 * In the case of non-AC97 volume controls, we still need

	 * to do some setups at em28xx, in order to mute/unmute

	 * and to adjust audio volume. However, the value ranges

	 * should be checked by the corresponding V4L subdriver.

 Don't let width or height to be zero */

/*

 * IOCTL vidioc handling

 FIXME: TOP? NONE? BOTTOM? ALTENATE? */

 the em2800 can only scale down to 50% */

		/*

		 * MaxPacketSize for em2800 is too small to capture at full

		 * resolution use half of maxw as the scaler can only scale

		 * to 50%

		/*

		 * width must even because of the YUYV format

		 * height must be even because of interlacing

 Avoid division by zero at size_to_scale */

 set new image size */

 Adjusts width/height, if needed */

 set new image size */

 webcams do not have the STD API */

 Dynamically generates an audioset bitmask */

	/*

	 * With msp3400, almost all mappings use the default (amux = 0).

	 * The only one may use a different value is WinTV USB2, where it

	 * can also be SCART1 input.

	 * As it is very doubtful that we would see new boards with msp3400,

	 * let's just reuse the existing switch.

 Should never happen! */

	/*

	 * FIXME: This is wrong, as different inputs at em28xx_cards

	 * may have different audio outputs. So, the right thing

	 * to do is to implement VIDIOC_G_AUDOUT/VIDIOC_S_AUDOUT.

	 * With the current board definitions, this would work fine,

	 * as, currently, all boards fit.

 Match host */

 Match host */

 Report a continuous range */

 RAW VBI ioctls */

 Varies by video standard (NTSC, PAL, etc.) */

 NTSC */

 PAL */

/*

 * RADIO ESPECIFIC IOCTLS

/*

 * em28xx_free_v4l2() - Free struct em28xx_v4l2

 *

 * @ref: struct kref for struct em28xx_v4l2

 *

 * Called when all users of struct em28xx_v4l2 are gone

/*

 * em28xx_v4l2_open()

 * inits the device and starts isoc transfer

		/*

		 * Needed, since GPIO might have disabled power

		 * of some i2c devices

/*

 * em28xx_v4l2_fini()

 * unregisters the v4l2,i2c and usb devices

 * called when the device gets disconnected or at module unload

 Shouldn't initialize IR for this interface */

 This device does not support the v4l2 extension */

 what do we do here */

/*

 * em28xx_v4l2_close()

 * stops streaming and deallocates all resources allocated by the v4l2

 * calls and ioctls

 No sense to try to write to the device */

 Save some power by putting tuner to sleep */

 do this before setting alternate! */

 set alternate 0 */

 I2C possible address to saa7115, tvp5150, msp3400, tvaudio */

 SAA7111, SAA7111A and SAA7113 */

 SAA7114, SAA7115 and SAA7118 */

******************************* usb interface ******************************/

 configure tuner */

 just a magic number */

 Shouldn't initialize IR for this interface */

 This device does not support the v4l2 extension */

	/*

	 * Default format, used for tvp5150 or saa711x output formats

 request some modules */

 Initialize tuner and camera */

 Configure audio */

 install the em28xx notify callback */

 wake i2c devices */

 init video dma queues */

 Send a reset to other chips via gpio */

 set default norm */

 Analog specific initialization */

	/*

	 * MaxPacketSize for em2800 is too small to capture at full resolution

	 * use half of maxw as the scaler can only scale to 50%

 Audio defaults */

	em28xx_write_reg(dev, EM28XX_R0E_AUDIOSRC, 0xc0); audio register */

 Add image controls */

	/*

	 * NOTE: at this point, the subdevices are already registered, so

	 * bridge controls are only added/enabled when no subdevice provides

	 * them

 Reset image controls */

 allocate and fill video video_device struct */

 disable inapplicable ioctls */

 register v4l2 video video_device */

 Allocate and fill vbi video_device struct */

 disable inapplicable ioctls */

 register v4l2 vbi video_device */

 Init entities at the Media Controller */

 Save some power by putting tuner to sleep */

 initialize videobuf2 stuff */

 SPDX-License-Identifier: GPL-2.0+



 em28xx-vbi.c - VBI driver for em28xx



 Copyright (C) 2009 Devin Heitmueller <dheitmueller@kernellabs.com>



 This work was sponsored by EyeMagnet Limited.



 This program is free software; you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation; either version 2 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.

 ------------------------------------------------------------------ */

 SPDX-License-Identifier: GPL-2.0+



 Empiatech em28x1 audio extension



 Copyright (C) 2006 Markus Rechberger <mrechberger@gmail.com>



 Copyright (C) 2007-2016 Mauro Carvalho Chehab

	- Port to work with the in-kernel driver

	- Cleanups, fixes, alsa-controls, etc.



 This driver is based on my previous au600 usb pstn audio driver

 and inherits all the copyrights



 This program is free software; you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation; either version 2 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.

 success */

 NAK */

 kill */

 error */

 Start streaming */

 just about the value in usbaudio.c */

	/*

	 * The period is 12.288 bytes. Allow a 10% of variation along its

	 * value, in order to avoid overruns/underruns due to some clock

	 * drift.

	 *

	 * FIXME: This period assumes 64 packets, and a 48000 PCM rate.

	 * Calculate it dynamically.

 12544, */

 audio is on a separate interface */

 audio is on the same interface as video */

				/*

				 * FIXME: The intention seems to be to select

				 * the alt setting with the largest

				 * wMaxPacketSize for the video endpoint.

				 * At least dev->alt should be used instead, but

				 * we should probably not touch it at all if it

				 * is already >0, because wMaxPacketSize of the

				 * audio endpoints seems to be the same for all.

 Sets volume, mute, etc */

 Dynamically adjust the period size */

/*

 * AC97 volume control support

 Preserve the mute flag */

 Add Mute Control */

 Add Volume Control */

/*

 * register/unregister code and data

 high bandwidth multiplier, as encoded in highspeed endpoint descriptors */

 Calculate the number and size of URBs to better fit the audio samples */

	/*

	 * Estimate the number of bytes per DMA transfer.

	 *

	 * This is given by the bit rate (for now, only 48000 Hz) multiplied

	 * by 2 channels and 2 bytes/sample divided by the number of microframe

	 * intervals and by the microframe rate (125 us)

	/*

	 * Estimate the number of transfer URBs. Don't let it go past the

	 * maximum number of URBs that is known to be supported by the device.

	/*

	 * Now that we know the number of bytes per transfer and the number of

	 * URBs, estimate the typical size of an URB, in order to adjust the

	 * minimal number of packets.

	/*

	 * Now, calculate the amount of audio packets to be filled on each

	 * URB. In order to preserve the old behaviour, use a minimal

	 * threshold for this value.

 Estimate the bytes per period */

 Allocate space to store the number of URBs to be used */

 Alloc memory for each URB and for each transfer buffer */

		/*

		 * This device does not support the extension (in this case

		 * the device is expecting the snd-usb-audio module or

		 * doesn't have analog audio support at all)

		/*

		 * This device does not support the extension (in this case

		 * the device is expecting the snd-usb-audio module or

		 * doesn't have analog audio support at all)

 Nothing to do other than schedule_work() ?? */

 SPDX-License-Identifier: GPL-2.0+



 handle em28xx IR remotes via linux kernel input layer.



 Copyright (C) 2005 Ludovico Cavedon <cavedon@sssup.it>

		      Markus Rechberger <mrechberger@gmail.com>

		      Mauro Carvalho Chehab <mchehab@kernel.org>

		      Sascha Sommer <saschasommer@freenet.de>



 This program is free software; you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation; either version 2 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.

 [ms] */

 [ms] */

/*

 * Polling structure used by em28xx IR's

 poll decoder */

/*

 * I2C IR based get keycodes - should be used with ir-kbd-i2c

 poll IR chip */

	/*

	 * it seems that 0xFE indicates that a button is still hold

	 * down, while 0xff indicates that no button is hold down.

 keep old data */

 poll IR chip */

 Does eliminate repeated parity code */

	/*

	 * Rearranges bits to the right order.

	 * The bit order were determined experimentally by using

	 * The original Hauppauge Grey IR and another RC5 that uses addr=0x08

	 * The RC5 code has 14 bits, but we've experimentally determined

	 * the meaning for only 11 bits.

	 * So, the code translation is not complete. Yet, it is enough to

	 * work with the provided RC5 IR.

 poll IR chip */

/*

 * Poll based get keycode functions

 This is for the em2860/em2880 */

	/*

	 * Read key toggle, brand, and key code

	 * on registers 0x45, 0x46 and 0x47

 Infrared toggle (Reg 0x45[7]) */

 Infrared read count (Reg 0x45[6:0] */

 Remote Control Address/Data (Regs 0x46/0x47) */

	/*

	 * Read key toggle, brand, and key code

	 * on registers 0x51-55

 Infrared toggle (Reg 0x51[7]) */

 Infrared read count (Reg 0x51[6:0] */

	/*

	 * Remote Control Address (Reg 0x52)

	 * Remote Control Data (Reg 0x53-0x55)

/*

 * Polling code for em28xx

 read the registers containing the IR status */

			/*

			 * The em2874 clears the readcount field every time the

			 * register is read.  The em2860/2880 datasheet says

			 * that it is supposed to clear the readcount, but it

			 * doesn't. So with the em2874, we are looking for a

			 * non-zero read count as opposed to a readcount

			 * that is incrementing

 external i2c device */

 internal device */

 Adjust xclk based on IR table for RC5/NEC tables */

 Adjust xclk and set type based on IR table for RC5/NEC/RC6 tables */

 Setup the proper handler based on the chip */

	/*

	 * Leadtek winfast tv USBII deluxe can find a non working IR-device

	 * at address 0x18, so if that address is needed for another board in

	 * the future, please put it after 0x1f.

/*

 * Handle buttons

 Poll and evaluate all addresses */

 Read value from register */

 Check states of the buttons and act */

 Check if button uses the current address */

 Determine if button is and was pressed last time */

 Clear button state (if needed) */

 Handle button state */

 Emulate the keypress */

 Unpress the key */

 Switch illumination LED on/off */

 Next button */

 Save current value for comparison during the next polling */

 Schedule next poll */

 Check if polling address is already on the list */

 Check if max. number of polling addresses is exceeded */

 Button role specific checks and actions */

 Register input device */

 Check sanity */

 Add read address to list of polling addresses */

 Reduce polling interval if necessary */

 Next button */

 Start polling */

 Cancel polling */

 Clear polling addresses list */

 Deregister input devices */

 Shouldn't initialize IR for this interface */

 No remote control support */

 record handles to ourself */

 external i2c device */

 NOTE: all other fields of i2c_client are unused */

 internal device */

 By default, keep protocol field untouched */

 This is how often we ask the chip for IR information */

 ms */

 all done */

 Shouldn't initialize IR for this interface */

 skip detach on non attached boards */

 done */

	/*

	 * is canceling delayed work sufficient or does the rc event

	 * kthread needs stopping? kthread is stopped in

	 * ir_raw_event_unregister()

	/*

	 * if suspend calls ir_raw_event_unregister(), the should call

	 * ir_raw_event_register()

 SPDX-License-Identifier: GPL-2.0+



 em28xx-camera.c - driver for Empia EM25xx/27xx/28xx USB video capture devices



 Copyright (C) 2009 Mauro Carvalho Chehab <mchehab@kernel.org>

 Copyright (C) 2013 Frank Schäfer <fschaefer.oss@googlemail.com>



 This program is free software; you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation; either version 2 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.

 Possible i2c addresses of Micron sensors */

 MT9V111, MT9V403 */

 MT9M001/011/111/112, MT9V011/012/112, MT9D011 */

 MT9V012/112, MT9D011 (alternative address) */

 Possible i2c addresses of Omnivision sensors */

 OV7725, OV7670/60/48 */

 OV2640, OV9650/53/55 */

 FIXME: Should be replaced by a proper mt9m111 driver */

 reset and use defaults */

 full readout spd, no row/col skip */

 FIXME: This won't be creating a sensor at the media graph */

 FIXME: Should be replaced by a proper mt9m001 driver */

 hres = 1280 */

 vres = 1024 */

 FIXME: This won't be creating a sensor at the media graph */

/*

 * Probes Micron sensors with 8 bit address and 16 bit register width

 Read chip ID from register 0x00 */

 assumes LE */

 LE -> BE */

 Read chip ID from register 0xff */

 Validate chip ID to be sure we have a Micron device */

 Check chip ID */

 MI370 */ 
 640x480 */

 1280x1024 */

 found in the ECS G200 */

 MI1310 */ 
 MI1320 */ 
 MI2010 */ 
 rev B */

 MI360 */ 
 1280x1024 */

/*

 * Probes Omnivision sensors with 8 bit address and register width

	/*

	 * NOTE: these devices have the register auto incrementation disabled

	 * by default, so we have to use single byte reads !

 Read manufacturer ID from registers 0x1c-0x1d (BE) */

 Check manufacturer ID */

 Read product ID from registers 0x0a-0x0b (BE) */

 Check product ID */

 Rev 2 */

 Rev 3 */

 OV9653 */

 Rev 4 */

 Rev 5 */

	/*

	 * NOTE: the Windows driver also probes i2c addresses

	 *       0x22 (Samsung ?) and 0x66 (Kodak ?)

		/*

		 * FIXME: mt9v011 uses I2S speed as xtal clk - at least with

		 * the Silvercrest cam I have here for testing - for higher

		 * resolutions, a high clock cause horizontal artifacts, so we

		 * need to use a lower xclk frequency.

		 * Yet, it would be possible to adjust xclk depending on the

		 * desired resolution, since this affects directly the

		 * frame rate.

		/*

		 * FIXME: sensor supports resolutions up to 1600x1200, but

		 * resolution setting/switching needs to be modified to

		 * - switch sensor output resolution (including further

		 *   configuration changes)

		 * - adjust bridge xclk

		 * - disable 16 bit (12 bit) output formats on high resolutions

 NOTE: for UXGA=1600x1200 switch to 12MHz */

 SPDX-License-Identifier: GPL-2.0



 DVB device driver for em28xx



 (c) 2008-2011 Mauro Carvalho Chehab <mchehab@kernel.org>



 (c) 2008 Devin Heitmueller <devin.heitmueller@gmail.com>

	- Fixes for the driver to properly work with HVR-950

	- Fixes for the driver to properly work with Pinnacle PCTV HD Pro Stick

	- Fixes for the driver to properly work with AMD ATI TV Wonder HD 600



 (c) 2008 Aidan Thornton <makosoft@googlemail.com>



 (c) 2012 Frank Schäfer <fschaefer.oss@googlemail.com>



 Based on cx88-dvb, saa7134-dvb and videobuf-dvb originally written by:

	(c) 2004, 2005 Chris Pascoe <c.pascoe@itee.uq.edu.au>

	(c) 2004 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]



 This program is free software; you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation version 2 of the License.

 FIXME */

 feed count management */

 general boilerplate stuff */

 Due to DRX-K - probably need changes */

 bulk */

 isoc */

 USB 2.0 spec */

 isoc */

 ------------------------------------------------------------------ */

 ------------------------------------------------------------------ */

 Required for the antenna_gpio to disable LNA. */

 The windows driver uses the same. This will disable LNA. */

 disable LNA */

 disable LNA */

	/*

	 * GPIO configuration:

	 * 0xff: unknown (does not affect DVB-T).

	 * 0xf6: DRX-K (demodulator).

	 * 0xe6: unknown (does not affect DVB-T).

	 * 0xb6: unknown (does not affect DVB-T).

	/*

	 * Init the analog decoder (not yet supported), but

	 * it's probably still a good idea.

	/*

	 * Init the analog decoder (not yet supported), but

	 * it's probably still a good idea.

	/*

	 * Init AVF4910B analog decoder. Looks like I2C traffic to

	 * digital demodulator and tuner are routed via AVF4910B.

 0x41 */

 enable LNA */

 disable LNA */

 Values extracted from a USB trace of the Terratec Windows driver */

 sleeping ISDB-T */

 sleeping ISDB-S */

 ------------------------------------------------------------------ */

 ------------------------------------------------------------------ */

 register adapter */

 Ensure all frontends negotiate bus access */

 register frontend */

 register 2nd frontend */

 register demux stuff */

 register network adapter */

 If the analog part won't create RF connectors, DVB will do it */

 attach demod + tuner combo */

 40.444 MHz */

 attach SEC */

 attach demod */

 attach tuner */

 delegate signal strength measurement to tuner */

 attach SEC */

 attach demod */

 attach tuner */

 delegate signal strength measurement to tuner */

 attach SEC */

 attach demod */

 attach tuner */

 attach demod */

 attach tuner */

 attach demod */

 attach tuner */

 attach demod */

 attach tuner */

 attach demod */

 attach tuner */

 attach demod/tuner combo */

 Shouldn't initialize IR for this interface */

 This device does not support the extension */

 pre-allocate DVB usb transfer buffers */

 init frontend */

		/*

		 * Those boards could have either a zl10353 or a mt352.

		 * If the chip id isn't for zl10353, try mt352.

 Philips CU1216L NIM (Philips TDA10023 + Infineon TUA6034) */

 set default GPIO0 for LNA, used if GPIOLIB is undefined */

 FE 0 attach tuner */

 enable LNA for DVB-T, DVB-T2 and DVB-C */

 continue even set LNA fails */

 FIXME: do we need a pll semaphore? */

 Attach xc5000 */

 FIXME: do we need a pll semaphore? */

 Attach tda18271 to DVB-C frontend */

 attach demodulator */

 disable I2C-gate */

 attach tuner */

 attach demodulator */

 attach tuner */

 attach demodulator */

 Attach the demodulator. */

 attach demodulator */

 Attach the demodulator. */

 Attach the demodulator. */

 attach tuner */

 define general-purpose callback pointer */

 register everything */

 isoc */

 Shouldn't initialize IR for this interface */

 This device does not support the extension */

		/*

		 * We cannot tell the device to sleep

		 * once it has been unplugged.

 release I2C module bindings */

 SPDX-License-Identifier: GPL-2.0+



 em28xx-core.c - driver for Empia EM2800/EM2820/2840 USB video capture devices



 Copyright (C) 2005 Ludovico Cavedon <cavedon@sssup.it>

		      Markus Rechberger <mrechberger@gmail.com>

		      Mauro Carvalho Chehab <mchehab@kernel.org>

		      Sascha Sommer <saschasommer@freenet.de>

 Copyright (C) 2012 Frank Schäfer <fschaefer.oss@googlemail.com>



 This program is free software; you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation; either version 2 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.

 #define ENABLE_DEBUG_ISOC_FRAMES */

 FIXME: don't abuse core_debug */

/*

 * em28xx_read_reg_req()

 * reads data from the usb device specifying bRequest

/*

 * em28xx_read_reg_req()

 * reads data from the usb device specifying bRequest

/*

 * em28xx_write_regs_req()

 * sends data to the usb device, specifying bRequest

 Write a single register */

/*

 * em28xx_write_reg_bits()

 * sets only some bits (specified by bitmask) of a register, by first reading

 * the actual value

/*

 * em28xx_toggle_reg_bits()

 * toggles/inverts the bits (specified by bitmask) of a register

/*

 * em28xx_is_ac97_ready()

 * Checks if ac97 is ready

 Wait up to 50 ms for AC97 command to complete */

/*

 * em28xx_read_ac97()

 * write a 16 bit value to the specified AC97 address (LSB first!)

/*

 * em28xx_write_ac97()

 * write a 16 bit value to the specified AC97 address (LSB first!)

	/*

	 * EM28XX_AMUX_VIDEO2 is a special case used to indicate that

	 * em28xx should point to LINE IN, while AC97 should use VIDEO

 Mute all entres but the one that were selected */

	/*

	 * It is assumed that all devices use master volume for output.

	 * It would be possible to use also line output.

 Mute all outputs */

 Selects the proper audio input */

 Sets volume */

 LSB: left channel - both channels with the same level */

 Mute device, if needed */

 Sets volume */

			/*

			 * Use the same input for both left and right

			 * channels

 Digital only device - don't load any alsa module */

 See how this device is configured */

 Register read error */

 Be conservative */

 The device doesn't have vendor audio at all */

 Skip the code that does AC97 vendor detection */

		/*

		 * Device likely doesn't support AC97

		 * Note: (some) em2800 devices without eeprom reports 0x91 on

		 *	 CHIPCFG register, even not having an AC97 chip

 Try to identify what audio processor we have */

 Reports detected AC97 processor */

 The Transport Stream Enable Register moved in em2874 */

 Max Tx Size = 188 * 256 = 48128 - LCM(188,512) * 2 */

 ISOC Maximum Transfer Size = 188 * 5 */

 FIXME: which is the best order? */

 video registers are sampled by VREF */

 Enable video capture */

 disable video capture */

 Send GPIO reset sequences specified at board entry */

 FIXME: add suspend support for ac97 */

/*

 *URB control

/*

 * URB completion handler for isoc/bulk transfers

 success */

 NAK */

 kill */

 error */

 Copy data from URB */

 Reset urb buffers */

 isoc only (bulk: number_of_packets = 0) */

/*

 * Stop and Deallocate URBs

/*

 * Stop URBs

/*

 * Allocate URBs

	/*

	 * Check mode and if we have an endpoint for the selected

	 * transfer type, select buffer

 De-allocates all pending stuff */

 allocate urbs and transfer buffers */

 bulk */

 isoc */

/*

 * Allocate URBs and start IRQ

 no need to free/alloc usb buffers in digital mode */

 submit urbs and enables IRQ */

/*

 * Device control list

/*

 * Extension interface

 SPDX-License-Identifier: GPL-2.0+



 em28xx-cards.c - driver for Empia EM2800/EM2820/2840 USB

		    video capture devices



 Copyright (C) 2005 Ludovico Cavedon <cavedon@sssup.it>

		      Markus Rechberger <mrechberger@gmail.com>

		      Mauro Carvalho Chehab <mchehab@kernel.org>

		      Sascha Sommer <saschasommer@freenet.de>

 Copyright (C) 2012 Frank Schäfer <fschaefer.oss@googlemail.com>



 This program is free software; you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation; either version 2 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.

 Bitmask marking allocated devices from 0 to EM28XX_MAXBOARDS - 1 */

/*

 *  Reset sequences for analog/digital modes

 Reset for the most [analog] boards */

 Reset for the most [digital] boards */

 Board :Zolid Hybrid Tv Stick */

 Board Hauppauge WinTV HVR 900 analog */

 Board Hauppauge WinTV HVR 900 digital */

 Board Hauppauge WinTV HVR 900 (R2) digital */

 Boards - EM2880 MSI DIGIVOX AD and EM2880_BOARD_MSI_DIGIVOX_AD_II */

 Board - EM2882 Kworld 315U digital */

/*

 * Evga inDtube

 * GPIO0 - Enable digital power (s5h1409) - low to enable

 * GPIO1 - Enable analog power (tvp5150/emp202) - low to enable

 * GPIO4 - xc3028 reset

 * GOP3  - s5h1409 reset

/*

 * KWorld PlusTV 340U, UB435-Q and UB435-Q V2 (ATSC) GPIOs map:

 * EM_GPIO_0 - currently unknown

 * EM_GPIO_1 - LED disable/enable (1 = off, 0 = on)

 * EM_GPIO_2 - currently unknown

 * EM_GPIO_3 - currently unknown

 * EM_GPIO_4 - TDA18271HD/C1 tuner (1 = active, 0 = in reset)

 * EM_GPIO_5 - LGDT3304 ATSC/QAM demod (1 = active, 0 = in reset)

 * EM_GPIO_6 - currently unknown

 * EM_GPIO_7 - currently unknown

 Pinnacle Hybrid Pro eb1a:2881 */

 zl10353 reset */

/*

 * PCTV HD Mini (80e) GPIOs

 * 0-5: not used

 * 6:   demod reset, active low

 * 7:   LED on, active high

400 KHz*/

Demod reset*/

/*

 * eb1a:2868 Reddo DVB-C USB TV Box

 * GPIO4 - CU1216L NIM

 * Other GPIOs seems to be don't care.

 Callback for the most boards */

 Mute/unmute */

 Terratec AV350 */

 Reset for the most [digital] boards */

/*

 * 2013:024f PCTV nanoStick T2 290e

 * GPIO_6 - demod reset

 * GPIO_7 - LED

 GPIO_6 = 1 */

 GPIO_7 = 1 */

/*

 * 2013:024f PCTV DVB-S2 Stick 460e

 * GPIO_0 - POWER_ON

 * GPIO_1 - BOOST

 * GPIO_2 - VUV_LNB (red LED)

 * GPIO_3 - EXT_12V

 * GPIO_4 - INT_DEM (DEMOD GPIO_0)

 * GPIO_5 - INT_LNB

 * GPIO_6 - RESET_DEM

 * GPIO_7 - LED (green LED)

 GPIO_6=1 */

 GPIO_5=1 */

 xc5000 reset */

/*

 * 2013:0258 PCTV DVB-S2 Stick (461e)

 * GPIO 0 = POWER_ON

 * GPIO 1 = BOOST

 * GPIO 2 = VUV_LNB (red LED)

 * GPIO 3 = #EXT_12V

 * GPIO 4 = INT_DEM

 * GPIO 5 = INT_LNB

 * GPIO 6 = #RESET_DEM

 * GPIO 7 = P07_LED (green LED)

 reset demod */

 reset demod */

 parallel? | null discard */

 xc5000 reset */

/*

 * 1b80:e425 MaxMedia UB425-TC

 * 1b80:e1cc Delock 61959

 * GPIO_6 - demod reset, 0=active

 * GPIO_7 - LED, 0=active

 GPIO_6 = 1 */

 GPIO_7 = 0 */

/*

 * 2304:0242 PCTV QuatroStick (510e)

 * GPIO_2: decoder reset, 0=active

 * GPIO_4: decoder suspend, 0=active

 * GPIO_6: demod reset, 0=active

 * GPIO_7: LED, 1=active

 GPIO_2 = 1 */

 GPIO_6 = 1 */

/*

 * 2013:0251 PCTV QuatroStick nano (520e)

 * GPIO_2: decoder reset, 0=active

 * GPIO_4: decoder suspend, 0=active

 * GPIO_6: demod reset, 0=active

 * GPIO_7: LED, 1=active

 GPIO_2 = 1 */

 GPIO_6 = 1 */

 GPIO_7 = 1 */

/*

 * 1ae7:9003/9004 SpeedLink Vicious And Devine Laplace webcam

 * reg 0x80/0x84:

 * GPIO_0: capturing LED, 0=on, 1=off

 * GPIO_2: AV mute button, 0=pressed, 1=unpressed

 * GPIO 3: illumination button, 0=pressed, 1=unpressed

 * GPIO_6: illumination/flash LED, 0=on, 1=off

 * reg 0x81/0x85:

 * GPIO_7: snapshot button, 0=pressed, 1=unpressed

/*

 * 2040:0265 Hauppauge WinTV-dualHD DVB Isoc

 * 2040:8265 Hauppauge WinTV-dualHD DVB Bulk

 * 2040:026d Hauppauge WinTV-dualHD ATSC/QAM Isoc

 * 2040:826d Hauppauge WinTV-dualHD ATSC/QAM Bulk

 * reg 0x80/0x84:

 * GPIO_0: Yellow LED tuner 1, 0=on, 1=off

 * GPIO_1: Green LED tuner 1, 0=on, 1=off

 * GPIO_2: Yellow LED tuner 2, 0=on, 1=off

 * GPIO_3: Green LED tuner 2, 0=on, 1=off

 * GPIO_5: Reset #2, 0=active

 * GPIO_6: Reset #1, 0=active

 demod 1 reset */

 demod 2 reset */

 disable TS filters */

 Hauppauge USB QuadHD */

 demod 1 reset */

 demod 2 reset */

/*

 *  Button definitions

/*

 *  LED definitions

/*

 *  Board definitions

 To enable sensor probe */

 Beijing Huaqi Information Digital Technology Co., Ltd */

 Capture only device */

 Beijing Huaqi Information Digital Technology Co., Ltd */

 Capture only device */

 Capture only device */

 Capture only device */

 Those boards with em2870 are DVB Only*/

 MT2060 */

 MT2060 */

 djh - I have serious doubts this is right... */

 MT2060 */

 FIXME: probably wrong */

 FIXME: probably wrong */

 FIXME: Add analog support */

 FIXME: Add analog support - need a saa7136 driver */

 Digital-only TDA18271HD */

 NEC IR */

	/*

	 * maybe there's a reason behind it why Terratec sells the Hybrid XS

	 * as Prodigy XS with a different PID, let's keep it separated for now

	 * maybe we'll need it later on

 capture only board */

 Capture-only board */

 capture only board */

 I2S */

 Line out pin */

 I2S */

 Line out pin */

 S-video has not been tested yet */

 FIXME: Analog mode - still not ready */

 NEC IR */

 Composite has not been tested yet */

 S-video has not been tested yet */

 Capture only device */

 NEC IR */

	/*

	 * eb1a:2868 Empia EM2870 + Philips CU1216L NIM

	 * (Philips TDA10023 + Infineon TUA6034)

	/*

	 * 1b80:a340 - Empia EM2870, NXP TDA18271HD and LG DT3304, sold

	 * initially as the KWorld PlusTV 340U, then as the UB435-Q.

	 * Early variants have a TDA18271HD/C1, later ones a TDA18271HD/C2

 Digital-only TDA18271HD */

	/*

	 * 2013:024f PCTV nanoStick T2 290e.

	 * Empia EM28174, Sony CXD2820R and NXP TDA18271HD/C2

	/*

	 * 2013:024f PCTV DVB-S2 Stick 460e

	 * Empia EM28174, NXP TDA10071, Conexant CX24118A and Allegro A8293

	/*

	 * eb1a:5006 Honestech VIDBOX NW03

	 * Empia EM2860, Philips SAA7113, Empia EMP202, No Tuner

 S-VIDEO needs check */

	/*

	 * 1b80:e425 MaxMedia UB425-TC

	 * Empia EM2874B + Micronas DRX 3913KA2 + NXP TDA18271HDC2

	/*

	 * 2304:0242 PCTV QuatroStick (510e)

	 * Empia EM2884 + Micronas DRX 3926K + NXP TDA18271HDC2

	/*

	 * 2013:0251 PCTV QuatroStick nano (520e)

	 * Empia EM2884 + Micronas DRX 3926K + NXP TDA18271HDC2

	/*

	 * 1b80:e1cc Delock 61959

	 * Empia EM2874B + Micronas DRX 3913KA2 + NXP TDA18271HDC2

	 * mostly the same as MaxMedia UB-425-TC but different remote

	/*

	 * 1b80:e346 KWorld USB ATSC TV Stick UB435-Q V2

	 * Empia EM2874B + LG DT3305 + NXP TDA18271HDC2

	/*

	 * 1b80:e34c KWorld USB ATSC TV Stick UB435-Q V3

	 * Empia EM2874B + LG DT3305 + NXP TDA18271HDC2

	/*

	 * 1ae7:9003/9004 SpeedLink Vicious And Devine Laplace webcam

	 * Empia EM2765 + OmniVision OV2640

	/*

	 * 2013:0258 PCTV DVB-S2 Stick (461e)

	 * Empia EM28178, Montage M88DS3103, Montage M88TS2022, Allegro A8293

	/*

	 * 2013:0259 PCTV DVB-S2 Stick (461e_v2)

	 * Empia EM28178, Montage M88DS3103b, Montage M88TS2022, Allegro A8293

	/*

	 * 2013:025f PCTV tripleStick (292e).

	 * Empia EM28178, Silicon Labs Si2168, Silicon Labs Si2157

 Capture only device */

	/*

	 * eb1a:8179 Terratec Cinergy T2 Stick HD.

	 * Empia EM28178, Silicon Labs Si2168, Silicon Labs Si2146

	/*

	 * 3275:0085 PLEX PX-BCUD.

	 * Empia EM28178, TOSHIBA TC90532XBG, Sharp QM1D1C0042

	/*

	 * 2040:0265 Hauppauge WinTV-dualHD (DVB version) Isoc.

	 * 2040:8265 Hauppauge WinTV-dualHD (DVB version) Bulk.

	 * Empia EM28274, 2x Silicon Labs Si2168, 2x Silicon Labs Si2157

	/*

	 * 2040:026d Hauppauge WinTV-dualHD (model 01595 - ATSC/QAM) Isoc.

	 * 2040:826d Hauppauge WinTV-dualHD (model 01595 - ATSC/QAM) Bulk.

	 * Empia EM28274, 2x LG LGDT3306A, 2x Silicon Labs Si2157

	/*

	 * 1b80:e349 Magix USB Videowandler-2

	 * (same chips as Honestech VIDBOX NW03)

	 * Empia EM2860, Philips SAA7113, Empia EMP202, No Tuner

	/*

	 * 1f4d:1abe MyGica iGrabber

	 * (same as several other EM2860 devices)

	 * Empia EM2860, Philips SAA7113, Empia EMP202, No Tuner

	/* 2040:826d Hauppauge USB QuadHD

	 * Empia 28274, Max Linear 692 ATSC combo demod/tuner

 table of devices that work with this driver */

 used by :Zolid Hybrid Tv Stick */

 MSI Digivox Trio */

 Kaiser Baas Video to DVD maker */

 Kworld DVD Maker 2 */

 Cinergy HTC USB XS Rev. 1 */

 Cinergy HTC USB XS Rev. 2 */

 H5 Rev. 1 */

 H5 Rev. 2 */

 H5 Rev. 3 */

 H6 */

 HCW HVR-980 */

 HP  HVR-950 */

 RP  HVR-950 */

 Sveon STV40 */

 Bulk transport 461e */

 Bulk transport 461e v2 */

 Hauppauge WinTV-soloHD 292e SE */

 Hauppauge WinTV-soloHD Isoc */

 Hauppauge OEM Generic WinTV-soloHD Bulk */

 Hauppauge Retail WinTV-soloHD Bulk */

 Ion Video 2 PC MKII / Startech svid2usb23 / Raygo R12-41373 */

 Magix USB Videowandler-2 */

/*

 * EEPROM hash table for devices with generic USB IDs

 P/N: SA 60002070465 Tuner: TVF7533-MF */

 I2C devicelist hash table for devices with generic USB IDs */

 NOTE: introduce a separate hash table for devices with 16 bit eeproms */

	/*

	 * Those are the default values for the majority of boards

	 * Use those values if not specified otherwise at boards entry

 Should be initialized early, for I2C to work */

/*

 * Wait until AC97_RESET reports the expected value reliably before proceeding.

 * We also check that two unrelated registers accesses don't return the same

 * value to avoid premature return.

 * This procedure helps ensuring AC97 register accesses are reliable.

/*

 * Since em28xx_pre_card_setup() requires a proper dev->model,

 * this won't work for boards with generic PCI IDs

	/*

	 * Set the initial XCLK and I2C clock values based on the board

	 * definition

 request some modules */

 Sets the msp34xx I2S speed */

		/*

		 * TODO: someone can do some cleanup here...

		 *	 not everything's needed

		/*

		 * this device needs some gpio writes to get the DVB-T

		 * demod work

		/*

		 * this device needs some gpio writes to get the

		 * DVB-T demod work

 enables audio for that devices */

		/*

		 * HACK?: Ensure AC97 register reading is reliable before

		 * proceeding. In practice, this will wait about 1.6 seconds.

 Unlock device */

 FIXME: IMPROVE ! */

	/*

	 * HINT method: EEPROM

	 *

	 * This method works only for boards with eeprom.

	 * Uses a hash of all eeprom bytes. The hash should be

	 * unique for a vendor/tuner pair.

	 * There are a high chance that tuners for different

	 * video standards produce different hashes.

	/*

	 * HINT method: I2C attached devices

	 *

	 * This method works for all boards.

	 * Uses a hash of i2c scanned devices.

	 * Devices with the same i2c attached chips will

	 * be considered equal.

	 * This method is less precise than the eeprom one.

 user did not request i2c scanning => do it now */

	/*

	 * If the device can be a webcam, seek for a sensor.

	 * If sensor is not found, then it isn't a webcam.

 NOTE: error/unknown sensor/no sensor */

		/*

		 * The K-WORLD DVB-T 310U is detected as an MSI Digivox AD.

		 *

		 * This occurs because they share identical USB vendor and

		 * product IDs.

		 *

		 * What we do here is look up the EEPROM hash of the K-WORLD

		 * and if it is found then we decide that we do not have

		 * a DIGIVOX and reset the device to the K-WORLD instead.

		 *

		 * This solution is only valid if they do not share eeprom

		 * hash identities which has not been determined as yet.

 request some modules */

 Call first TVeeprom */

 GPIO enables sound on KWORLD PVR TV 2800RF */

		/*

		 * The K-WORLD DVB-T 310U is detected as an MSI Digivox AD.

		 *

		 * This occurs because they share identical USB vendor and

		 * product IDs.

		 *

		 * What we do here is look up the EEPROM hash of the K-WORLD

		 * and if it is found then we decide that we do not have

		 * a DIGIVOX and reset the device to the K-WORLD instead.

		 *

		 * This solution is only valid if they do not share eeprom

		 * hash identities which has not been determined as yet.

		/*

		 * In cases where we had to use a board hint, the call to

		 * em28xx_set_mode() in em28xx_pre_card_setup() was a no-op,

		 * so make the call now so the analog GPIOs are set properly

		 * before probing the i2c bus.

		/*

		 * The Dikom DK300 is detected as an Kworld VS-DVB-T 323UR.

		 *

		 * This occurs because they share identical USB vendor and

		 * product IDs.

		 *

		 * What we do here is look up the EEPROM hash of the Dikom

		 * and if it is found then we decide that we do not have

		 * a Kworld and reset the device to the Dikom instead.

		 *

		 * This solution is only valid if they do not share eeprom

		 * hash identities which has not been determined as yet.

		/*

		 * In cases where we had to use a board hint, the call to

		 * em28xx_set_mode() in em28xx_pre_card_setup() was a no-op,

		 * so make the call now so the analog GPIOs are set properly

		 * before probing the i2c bus.

 Free eeprom data memory */

 Allow override tuner type by a module parameter */

	/*

	 * Dynamically generate a list of valid audio inputs for this

	 * specific board, mapping them via enum em28xx_amux.

 Skip already mapped audio inputs */

 FIXME: Better to specify the needed IF */

	/*

	 * The em28xx extensions can be modules or builtin. If the

	 * modules are already loaded or are built in, those extensions

	 * can be initialised right now. Otherwise, the module init

	 * code will do it.

	/*

	 * Devices with an audio-only intf also have a V4L/DVB/RC

	 * intf. Don't register extensions twice on those devices.

 CONFIG_MODULES */

/*

 * em28xx_release_resources()

 * unregisters the v4l2,i2c and usb devices

 * called when the device gets disconnected or at module unload

FIXME: I2C IR should be disconnected */

 Mark device as unused */

/**

 * em28xx_free_device() - Free em28xx device

 *

 * @ref: struct kref for em28xx device

 *

 * This is called when all extensions and em28xx core unregisters a device

/*

 * em28xx_init_dev()

 * allocates and inits the device structs, registers i2c bus and v4l device

 Based on the Chip ID, set the device configuration */

 NOTE: the em2820 is used in webcams, too ! */

 register i2c bus 0 */

 register i2c bus 1 */

 Do board specific init and eeprom reading */

 Check to see next free device and mark as used */

 No free device slots */

 high bandwidth multiplier, as encoded in highspeed endpoint descriptors */

	/*

	 * NOTE:

	 *

	 * Old logic with support for isoc transfers only was:

	 *  0x82	isoc		=> analog

	 *  0x83	isoc		=> audio

	 *  0x84	isoc		=> digital

	 *

	 * New logic with support for bulk transfers

	 *  0x82	isoc		=> analog

	 *  0x82	bulk		=> analog

	 *  0x83	isoc*		=> audio

	 *  0x84	isoc		=> digital

	 *  0x84	bulk		=> analog or digital**

	 *  0x85	isoc		=> digital TS2

	 *  0x85	bulk		=> digital TS2

	 * (*: audio should always be isoc)

	 * (**: analog, if ep 0x82 is isoc, otherwise digital)

	 *

	 * The new logic preserves backwards compatibility and

	 * reflects the endpoint configurations we have seen

	 * so far. But there might be devices for which this

	 * logic is not sufficient...

 Only inspect input endpoints */

					/*

					 * 2) some manufacturers (e.g. Terratec)

					 * disable endpoints by setting

					 * wMaxPacketSize to 0 bytes for all

					 * alt settings. So far, we've seen

					 * this for DVB isoc endpoints only.

/*

 * em28xx_usb_probe()

 * checks for supported devices

 Check to see next free device and mark as used */

 No free device slots */

 Don't register audio interfaces */

 allocate memory for our device state and initialize it */

 compute alternate max packet sizes */

 Get endpoints */

	/*

	 * Make sure we have 480 Mbps of bandwidth, otherwise things like

	 * video stream wouldn't likely work, since 12 Mbps is generally

	 * not enough even for most Digital TV streams.

 Checks if audio is provided by a USB Audio Class intf */

 save our data pointer in this intf device */

 allocate device struct and check if the device is a webcam */

 Disable V4L2 if the device doesn't have a decoder or image sensor */

		/*

		 * The logic with sets alternate is not ready for dual-tuners

		 * which analog modes.

 Select USB transfer types to use */

 No IR for 2nd tuner */

 No IR for 2nd tuner */

 Select USB transfer types to use */

 Configure hardware to support TS2*/

 The ep4 and ep5 are configured for BULK */

 The ep4 and ep5 are configured for ISO */

	/*

	 * Do it at the end, to reduce dynamic configuration changes during

	 * the device init. Yet, as request_modules() can be async, the

	 * topology will likely change after the load of the em28xx subdrivers.

/*

 * em28xx_usb_disconnect()

 * called when the device gets disconnected

 * video device will be unregistered on v4l2_close in case it is still open

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TTUSB DEC Frontend Driver

 *

 * Copyright (C) 2003-2004 Alex Woods <linux-dvb@giblets.org>

 configuration settings */

 not tuned yet */

 no signal/no lock*/

 signal found and locked*/

 Drift compensation makes no sense for DVB-T */

 allocate memory for the internal state */

 setup the state */

 create dvb_frontend */

 allocate memory for the internal state */

 setup the state */

 create dvb_frontend */

 guessed */

 guessed */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TTUSB DEC Driver

 *

 * Copyright (C) 2003-2004 Alex Woods <linux-dvb@giblets.org>

 * IR support by Peter Beutner <p.beutner@gmx.net>

 DVB bits */

 USB bits */

 Loaded successfully */

len=6+((pes[4]<<8)|pes[5]);

success*/

 this urb is dead, cleanup */

		/*

		 * IR - Event

		 *

		 * this is an fact a bit too simple implementation;

		 * the box also reports a keyrepeat signal

		 * (with buffer[3] == 0x40) in an interval of ~100ms.

		 * But to handle this correctly we had to imlemenent some

		 * kind of timer which signals a 'key up' event if no

		 * keyrepeat signal is received for lets say 200ms.

		 * this should/could be added later ...

		 * for now lets report each signal as a key down and up

 VideoStream */

 MainAudioStream */

 -ENOENT is expected when unlinking urbs */

/* Setting the interface of the DEC tends to take down the USB communications

 * for a short period, so it's important not to call this function just before

 * trying to talk to it.

 enable irq pipe */

	/* a 32 bit checksum over the first 56 bytes of the DSP Code is stored

	   at offset 56 of file, so use it to check if the firmware file is

		/* We can't trust the USB IDs that some firmwares

		/* we have to check whether the irq URB is already submitted.

		 * As the irq is submitted after the interface is changed,

		 * this is the best method i figured out.

 DEC3000-s */

{USB_DEVICE(0x0b48, 0x1007)},	   Unconfirmed */

 DEC2000-t */

 DEC2540-t */

 SPDX-License-Identifier: GPL-2.0-or-later

/****************************************************************************

 *

 *  Filename: cpia2_core.c

 *

 *  Copyright 2001, STMicrolectronics, Inc.

 *      Contact:  steve.miller@st.com

 *

 *  Description:

 *     This is a USB driver for CPia2 based video cameras.

 *     The infrastructure of this driver is based on the cpia usb driver by

 *     Jochen Scharrlach and Johannes Erdfeldt.

 *

 *  Stripped of 2.4 stuff ready for main kernel submit by

 *		Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 #define _CPIA2_DEBUG_ */

 default 0 - DEBUG_REG */

/******************************************************************************

 *

 *  Forward Declarations

 *

/* Here we want the physical address of the memory.

 * This is used when initializing the contents of the

 * area and marking the pages as reserved.

 restore the offset */

 Round it off to PAGE_SIZE */

 Clear the ram out, no junk to the user */

/******************************************************************************

 *

 *  cpia2_do_command

 *

 *  Send an arbitrary command to the camera.  For commands that read from

 *  the camera, copy the buffers into the proper param structures.

 default */

	/***

	 * Set up the command.

 clear fifo and enable stream block */

	case CPIA2_CMD_SET_USER_EFFECTS:  /* Note: Be careful with this as

					     this register can also affect

	/***

	 * Now copy any results from a read into the appropriate param struct.

/******************************************************************************

 *

 *  cpia2_send_command

 *

 For patch blocks only */

/*************

 * Functions to implement camera functionality

/******************************************************************************

 *

 *  cpia2_get_version_info

 *

/******************************************************************************

 *

 *  cpia2_reset_camera

 *

 *  Called at least during the open process, sets up initial params.

	/***

	 * VC setup

 Clear FIFO and route/enable stream block */

 Enable button notification */

 wait for vp to go to sleep */

	/***

	 * If this is a 676, apply VP5 fixes before we start streaming

 The following writes improve the picture */

		cmd.buffer.registers[0].value = 0; /* reduce from the default

		cmd.buffer.registers[1].value = 0x92; /* increase from 100% to

						       * (256/256 - 31) to fill

		cmd.buffer.registers[2].value = 0xFF; /* Increase from the

						       * default rec 601 ceiling

		cmd.buffer.registers[3].value = 0xFF; /* Increase from the rec

						       * 601 100% level (128)

		cmd.buffer.registers[4].value = 0x80;  /* Inhibit the

 The following 4 writes are a fix to allow QVGA to work at 30 fps */

 Activate all settings and start the data stream */

 Set user mode */

 Give VP time to wake up */

	/***

	 * Set audio regulator off.  This and the code to set the compresison

	 * state are too complex to form a CPIA2_CMD_, and seem to be somewhat

	 * intertwined.  This stuff came straight from the windows driver.

 Turn AutoExposure off in VP and enable the serial bridge to the sensor */

 Set the correct I2C address in the CPiA-2 system register */

 Now have sensor access - set bit to turn the audio regulator off */

 Set the correct I2C address in the CPiA-2 system register */

 0x88

 0x8a

 increase signal drive strength */

 Start autoexposure */

 Set compression state */

	/* Set target size (kb) on vc

	   This is a heuristic based on the quality parameter and the raw

	   framesize in kB divided by 16 (the compression factor when the

 Wiggle VC Reset */

	/***

	 * First read and wait a bit.

/******************************************************************************

 *

 *  cpia2_set_high_power

 *

 Read system status */

 If there is an error, clear it */

 Try to set high power mode */

 Try to read something in VP to check if everything is awake */

/******************************************************************************

 *

 *  cpia2_set_low_power

 *

/******************************************************************************

 *

 *  apply_vp_patch

 *

 First send the start address... */

 hi */

 lo */

 ... followed by the data payload */

 Data */

 Next send the start address... */

 hi */

 lo */

 ... followed by the 'goto' command */

/******************************************************************************

 *

 *  set_default_user_mode

 *

	if (cam->params.pnp_id.device_type == DEVICE_STV_676)

		cpia2_do_command(cam,

				 CPIA2_CMD_SET_VP_SYSTEM_CTRL,

				 TRANSFER_WRITE,

				 CPIA2_VP_SYSTEMCTRL_HK_CONTROL |

				 CPIA2_VP_SYSTEMCTRL_POWER_CONTROL);

/******************************************************************************

 *

 *  cpia2_match_video_size

 *

 *  return the best match, where 'best' is as always

 *  the largest that is not bigger than what is requested.

/******************************************************************************

 *

 *  SetVideoSize

 *

/******************************************************************************

 *

 *  configure_sensor

 *

/******************************************************************************

 *

 *  config_sensor_410

 *

	/***

	 *  Make sure size doesn't exceed CIF.

 VC Format */

 VC Clocks */

 Input reqWidth from VC */

 Timings */

 Output Image Size */

 Cropping */

 Scaling registers (defaults) */

 = 8/1 = 8 (HIBYTE/LOBYTE) */

 = 8/1 = 8 (HIBYTE/LOBYTE) */

/******************************************************************************

 *

 *  config_sensor_500(cam)

 *

 VC Format */

 VC Clocks */

 Input width from VP */

 Timings */

 Output Image Size */

 Cropping */

if (image_type == VIDEOSIZE_QCIF)*/

if (image_type == VIDEOSIZE_QCIF)*/

 Scaling registers (defaults) */

 2/11 */

 8/1 */

 1/3 */

 8/1 */

/******************************************************************************

 *

 *  setallproperties

 *

 *  This sets all user changeable properties to the values in cam->params.

	/**

	 * Don't set target_kb here, it will be set later.

	 * framerate and user_mode were already set (set_default_user_mode).

/******************************************************************************

 *

 *  cpia2_save_camera_state

 *

 Don't get framerate or target_kb. Trust the values we already have */

/******************************************************************************

 *

 *  cpia2_set_flicker_mode

 *

 Set the appropriate bits in FLICKER_MODES, preserving the rest */

 Set the appropriate bits in EXP_MODES, preserving the rest */

/******************************************************************************

 *

 *  cpia2_set_property_flip

 *

/******************************************************************************

 *

 *  cpia2_set_property_mirror

 *

/******************************************************************************

 *

 *  cpia2_set_gpio

 *

	/* Set the microport direction (register 0x90, should be defined

	 * already) to 1 (user output), and set the microport data (0x91) to

	 * the value in the ioctl argument.

/******************************************************************************

 *

 *  cpia2_set_fps

 *

 Work around bug in VP4 */

/******************************************************************************

 *

 *  cpia2_set_brightness

 *

	/***

	 * Don't let the register be set to zero - bug in VP4 - flash of full

	 * brightness

/******************************************************************************

 *

 *  cpia2_set_contrast

 *

/******************************************************************************

 *

 *  cpia2_set_saturation

 *

/******************************************************************************

 *

 *  wake_system

 *

/******************************************************************************

 *

 *  set_lowlight_boost

 *

 *  Valid for STV500 sensor only

 High byte of address to write to */

 Low byte of address to write to */

 High byte of data to write */

 Low byte data to write */

 Rehash the VP4 values */

/******************************************************************************

 *

 *  cpia2_set_format

 *

 *  Assumes that new size is already set in param struct.

 reset camera to new size */

/******************************************************************************

 *

 * cpia2_dbg_dump_registers

 *

 Start with bank 0 (SYSTEM) */

 Bank 1 (VC) */

 ST_CTRL */

 Stream status */

 USB status */

 USB settings */

 VC stuff */

** VP ***/

/******************************************************************************

 *

 *  reset_camera_struct

 *

 *  Sets all values to the defaults

	/***

	 * The following parameter values are the defaults from the register map.

 FlickerModes */

 jpeg params */

 gpio params */

 write, the default safe mode */

 Target kb params */

	/***

	 * Set Sensor FPS as fast as possible.

	/***

	 * Set default video mode as large as possible :

	 * for vga sensor set to vga, for cif sensor set to CIF.

/******************************************************************************

 *

 *  cpia2_init_camera_struct

 *

 *  Deinitialize camera struct

/******************************************************************************

 *

 *  cpia2_init_camera_struct

 *

 *  Initializes camera struct, does not call reset to fill in defaults.

/******************************************************************************

 *

 *  cpia2_init_camera

 *

 *  Initializes camera.

 Get sensor and asic types before reset. */

 Set GPIO direction and data to a safe state. */

 resetting struct requires version info for sensor and asic types */

/******************************************************************************

 *

 *  cpia2_allocate_buffers

 *

/******************************************************************************

 *

 *  cpia2_free_buffers

 *

/******************************************************************************

 *

 *  cpia2_read

 *

 Start streaming */

 Copy cam->curbuff in case it changes while we're processing */

 copy data to user space */

/******************************************************************************

 *

 *  cpia2_poll

 *

 Start streaming */

/******************************************************************************

 *

 *  cpia2_remap_buffer

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/****************************************************************************

 *

 *  Filename: cpia2_usb.c

 *

 *  Copyright 2001, STMicrolectronics, Inc.

 *      Contact:  steve.miller@st.com

 *

 *  Description:

 *     This is a USB driver for CPia2 based video cameras.

 *     The infrastructure of this driver is based on the cpia usb driver by

 *     Jochen Scharrlach and Johannes Erdfeldt.

 *

 *  Stripped of 2.4 stuff ready for main kernel submit by

 *		Alan Cox <alan@lxorguk.ukuu.org.uk>

 USBIF_CMDONLY

 USBIF_BULK

 USBIF_ISO_1

 USBIF_ISO_2

 USBIF_ISO_3

 USBIF_ISO_4

 USBIF_ISO_5

 USBIF_ISO_6

 STV0676 */

 Terminating entry */

/******************************************************************************

 *

 *  process_frame

 *

	/***

	 * Now the output buffer should have a JPEG image in it.

		/* Always skip the first image after streaming

 No junk in the buffers */

			/* During normal reading, the most recent

			 * frame will be read.  If the current frame

			 * hasn't started reading yet, it will never

			 * be read, so mark it empty.  If the buffer is

			 * mmapped, or we have few buffers, we need to

			 * wait for the user to free the buffer.

			 *

			 * NOTE: This is not entirely foolproof with 3

			 * buffers, but it would take an EXTREMELY

			 * overloaded system to cause problems (possible

			 * image data corruption).  Basically, it would

			 * need to take more time to execute cpia2_read

			 * than it would for the camera to send

			 * cam->num_frames-2 frames before problems

			 * could occur.

/******************************************************************************

 *

 *  add_APPn

 *

 *  Adds a user specified APPn record

/******************************************************************************

 *

 *  add_COM

 *

 *  Adds a user specified COM record

/******************************************************************************

 *

 *  cpia2_usb_complete

 *

 *  callback when incoming packet is received

	/***

	 * Packet collater

DBG("Collating %d packets\n", urb->number_of_packets);

 Try to find an available buffer */

 No READING or EMPTY buffers left */

DBG("   Packet %d length = %d, status = %d\n", i, n, st);

				/* frame is skipped, but increment total

 resubmit */

/******************************************************************************

 *

 * configure_transfer_mode

 *

	/***

	 * Write the isoc registers according to the alternate selected

	/***

	 * Enable relevant streams before starting polling.

	 * First read USB Stream Config Register.

 Clear iso, bulk, and int */

 Enable Bulk */

/******************************************************************************

 *

 * cpia2_usb_change_streaming_alternate

 *

 Reset the camera to prevent image quality degradation */

/******************************************************************************

 *

 * set_alternate

 *

/******************************************************************************

 *

 * free_sbufs

 *

 * Free all cam->sbuf[]. All non-NULL .data and .urb members that are non-NULL

 * are assumed to be allocated. Non-NULL .urb members are also assumed to be

 * submitted (and must therefore be killed before they are freed).

/*******

* Convenience functions

/****************************************************************************

 *

 *  write_packet

 *

 value */

 index */

 buffer */

/****************************************************************************

 *

 *  read_packet

 *

 value */

 index */

 buffer */

/******************************************************************************

 *

 *  cpia2_usb_transfer_cmd

 *

/******************************************************************************

 *

 *  submit_urbs

 *

	/* We double buffer the Isoc lists, and also know the polling

	 * interval is every frame (1 == (1 << (bInterval -1))).

ISOC endpoint*/);

 Queue the ISO urbs, and resubmit in the completion handler */

/******************************************************************************

 *

 *  cpia2_usb_stream_start

 *

/******************************************************************************

 *

 *  cpia2_usb_stream_pause

 *

/******************************************************************************

 *

 *  cpia2_usb_stream_resume

 *

			/* for some reason the user effects need to be set

/******************************************************************************

 *

 *  cpia2_usb_stream_stop

 *

/******************************************************************************

 *

 *  cpia2_usb_probe

 *

 *  Probe and initialize.

 A multi-config CPiA2 camera? */

 If we get to this point, we found a CPiA2 camera */

/******************************************************************************

 *

 *  cpia2_disconnect

 *

 Resume device - start device. */

/******************************************************************************

 *

 *  usb_cpia2_init

 *

/******************************************************************************

 *

 *  usb_cpia_cleanup

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/****************************************************************************

 *

 *  Filename: cpia2_v4l.c

 *

 *  Copyright 2001, STMicrolectronics, Inc.

 *      Contact:  steve.miller@st.com

 *  Copyright 2001,2005, Scott J. Bertin <scottbertin@yahoo.com>

 *

 *  Description:

 *     This is a USB driver for CPia2 based video cameras.

 *     The infrastructure of this driver is based on the cpia usb driver by

 *     Jochen Scharrlach and Johannes Erdfeldt.

 *

 *  Stripped of 2.4 stuff ready for main kernel submit by

 *		Alan Cox <alan@lxorguk.ukuu.org.uk>

/******************************************************************************

 *

 *  cpia2_open

 *

 reset the camera */

/******************************************************************************

 *

 *  cpia2_close

 *

 save camera state for later open */

/******************************************************************************

 *

 *  cpia2_v4l_read

 *

/******************************************************************************

 *

 *  cpia2_v4l_poll

 *

/******************************************************************************

 *

 *  ioctl_querycap

 *

 *  V4L2 device capabilities

 *

/******************************************************************************

 *

 *  ioctl_input

 *

 *  V4L2 input get/set/enumerate

 *

/******************************************************************************

 *

 *  ioctl_enum_fmt

 *

 *  V4L2 format enumerate

 *

/******************************************************************************

 *

 *  ioctl_try_fmt

 *

 *  V4L2 format try

 *

/******************************************************************************

 *

 *  ioctl_set_fmt

 *

 *  V4L2 format set

 *

	/* NOTE: This should be set to 1 for MJPEG, but some apps don't handle

	 * the missing Huffman table properly.

f->fmt.pix.pixelformat == V4L2_PIX_FMT_MJPEG;*/

	/* we set the video window to something smaller or equal to what

	 * is requested by the user???

/******************************************************************************

 *

 *  ioctl_get_fmt

 *

 *  V4L2 format get

 *

/******************************************************************************

 *

 *  ioctl_cropcap

 *

 *  V4L2 query cropping capabilities

 *  NOTE: cropping is currently disabled

 *

 Maximum 15 fps for this model */

 Maximum 15 fps for this model */

/******************************************************************************

 *

 *  ioctl_s_ctrl

 *

 *  V4L2 set the value of a control variable

 *

/******************************************************************************

 *

 *  ioctl_g_jpegcomp

 *

 *  V4L2 get the JPEG compression parameters

 *

 TODO: Can this be made meaningful?

/******************************************************************************

 *

 *  ioctl_s_jpegcomp

 *

 *  V4L2 set the JPEG compression parameters

 *  NOTE: quality and some jpeg_markers are ignored.

 *

/******************************************************************************

 *

 *  ioctl_reqbufs

 *

 *  V4L2 Initiate memory mapping.

 *  NOTE: The user's request is ignored. For now the buffers are fixed.

 *

/******************************************************************************

 *

 *  ioctl_querybuf

 *

 *  V4L2 Query memory buffer status.

 *

/******************************************************************************

 *

 *  ioctl_qbuf

 *

 *  V4L2 User is freeing buffer

 *

/******************************************************************************

 *

 *  find_earliest_filled_buffer

 *

 *  Helper for ioctl_dqbuf. Find the next ready buffer.

 *

 find which buffer is earlier */

/******************************************************************************

 *

 *  ioctl_dqbuf

 *

 *  V4L2 User is asking for a filled buffer.

 *

 Wait for a frame to become available */

/******************************************************************************

 *

 *  cpia2_mmap

 *

/******************************************************************************

 *

 *  reset_camera_struct_v4l

 *

 *  Sets all values to the defaults

 Flicker modes */

 stream modes */

/***

 * The v4l video device structure initialized for this device

 I could not find any place for the old .initialize initializer?? */

/******************************************************************************

 *

 *  cpia2_register_camera

 *

 VP5 Only */

 Flicker control only valid for 672 */

 Light control only valid for the QX5 Microscope */

 register v4l device */

/******************************************************************************

 *

 *  cpia2_unregister_camera

 *

/******************************************************************************

 *

 *  check_parameters

 *

 *  Make sure that all user-supplied parameters are sensible

 arbitrary upper limiit */

***********   Module Stuff ***************/

/******************************************************************************

 *

 * cpia2_init/module_init

 *

/******************************************************************************

 *

 * cpia2_exit/module_exit

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AirSpy SDR driver

 *

 * Copyright (C) 2014 Antti Palosaari <crope@iki.fi>

 AirSpy USB API commands (from AirSpy Library) */

/*

 *       bEndpointAddress     0x81  EP 1 IN

 *         Transfer Type            Bulk

 *       wMaxPacketSize     0x0200  1x 512 bytes

 stream formats */

 format descriptions for capture and preview */

 intermediate buffers with raw data from the USB device */

 common v4l buffer stuff -- must be first */

 videobuf2 queue and queued buffers list */

 Protects queued_bufs */

 Buffer sequence counter */

 vb is full and packets dropped */

 Note if taking both locks v4l2_lock must always be locked first! */

 Protects everything else */

 Protects vb_queue and capt_file */

 USB control message buffer */

 Current configuration */

 Controls */

 Sample rate calc */

 execute firmware command */

 write request */

 read request */

 Private functions */

 calculate sample rate and output it in 10 seconds intervals */

 total number of samples */

/*

 * This gets called for the bulk stream pipe. This is done in interrupt

 * time, so it has to be fast, not crash, and not stall. Neat.

 success */

 NAK */

 kill */

 error */

 get free framebuffer */

 fill framebuffer */

 stop the URB */

 free the URBs */

 allocate the URBs */

 Must be called with vb_queue_lock hold */

 The user yanked out the cable... */

 No need to keep the urbs around after disconnection */

 Videobuf2 operations */

 Need at least 8 buffers */

 Check the device has not disconnected between prep and queuing */

 start hardware streaming */

 return all queued buffers to vb2 */

 stop hardware streaming */

 Detect device */

 Init videobuf2 queue structure */

 Init video_device structure */

 Register the v4l2_device structure */

 Register controls */

 USB device ID list */

 AirSpy */

 USB subsystem interface */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux driver for digital TV devices equipped with B2C2 FlexcopII(b)/III

 * flexcop-usb.c - covers the USB part

 * see flexcop.c for copyright information

 Version information */

 debug */

/* JLP 111700: we will include the 1 bit gap between the upper and lower 3 bits

 * in the IBI address, to make the V8 code simpler.

 * PCI ADDRESS FORMAT: 0x71C -> 0000 0111 0001 1100 (the six bits used)

 *                  in general: 0000 0HHH 000L LL00

 * IBI ADDRESS FORMAT:                    RHHH BLLL

 *

 * where R is the read(1)/write(0) bit, B is the busy bit

 * and HHH and LLL are the two sets of three bits from the PCI address.

/*

 * DKT 020228

 * - forget about this VENDOR_BUFFER_SIZE, read and write register

 *   deal with DWORD or 4 bytes, that should be should from now on

 * - from now on, we don't support anything older than firm 1.00

 *   I eliminated the write register as a 2 trip of writing hi word and lo word

 *   and force this to write only 4 bytes at a time.

 *   NOTE: this should work with all the firmware from 1.00 and newer

 0xc0 read or 0x40 write */

/*

 * DKT 010817 - add support for V8 memory read/write and flash update

 usb i2c stuff */

 DKT 020208 - add this to support special case of DiSEqC */

/* actual bus specific access functions,

 media packet */

 submit/kill iso packets */

 creating iso urbs */

 initialising and submitting iso urbs */

 SRAM */

 use the alternate setting with the larges buffer */

 general flexcop init */

 bus specific part */

 init flexcop */

 xfer init */

 usb specific object needed to register this driver with the usb subsystem */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TTUSB DVB driver

 *

 * Copyright (c) 2002 Holger Waechtler <holger@convergence.de>

 * Copyright (c) 2003 Felix Domke <tmbinc@elitedvb.net>

/*

  TTUSB_HWSECTIONS:

    the DSP supports filtering in hardware, however, since the "muxstream"

    is a bit braindead (no matching channel masks or no matching filter mask),

    we won't support this - yet. it doesn't event support negative filters,

    so the best way is maybe to keep TTUSB_HWSECTIONS undef'd and just

    parse TS data. USB bandwidth will be a problem when having large

    datastreams, especially for dvb-net, but hey, that's not my problem.



  TTUSB_DISEQC, TTUSB_TONE:

    let the STC do the diseqc/tone stuff. this isn't supported at least with

    my TTUSB, so let it undef'd unless you want to implement another

    frontend. never tested.



  debug:

    define it to > 3 for really hardcore debugging. you probably don't want

    this unless the device doesn't load at all. > 2 for bandwidth statistics.

 ??? */

/*

 *  since we're casting (struct ttusb*) <-> (struct dvb_demux*) around

 *  the dvb_demux field must be the first in struct!!

 and one for USB access. */

 transaction counter, wraps around...  */

 0..2 - MuxSyncWord, 3 - nMuxPacks,    4 - muxpack

 MuxCounter - will increment on EVERY MUX PACKET */

 (including stuffing. yes. really.) */

 check if the i2c transaction was successful */

 BootBlock */

 upload dsp code in 32 byte steps (36 didn't work for me ...) */

 32 is max packet size, no messages should be split. */

 last block ... */

 BootEnd */

 SetChannel */

 DelChannel */

 SetFilter */

 DelFilter */

 i2c write read: 5 bytes, addr 0x10, 0x02 bytes write, 1 bytes read. */

 reset board */

 reset board (again?) */

 set i2c bit rate */

 send diseqc master, not burst */

 Diseqc */

power: */ 1,

 SetLNB */

****************************************************************************/

 section data */

 check offset flag */

 we have TS data here! */

 maximum bytes, until we know the length */

 determine length */

			/*

			 * if length is valid and we reached the end:

			 * goto next muxpack

 maximum bytes, until we know the length */

				/*

				 * no muxpacks left?

				 * return to search-sync state

      struct dvb_demux_feed *dvbdmxfeed = channel->dvbdmxfeed;

      dvbdmxfeed->cb.sec(data, len, 0, 0, &dvbdmxfeed->feed.sec, 0);

 setup PLL configuration

 disable the mc44BC374c (do not check for errors)

 determine charge pump

 determine band

 setup PLL filter

 calculate divisor

 ((36130000+((1000000/6)/2)) + Finput)/(1000000/6)

 setup tuner buffer

 F22FR = 0x7d, F22 = f_VCO / 128 / 0x7d = 22 kHz */

 I2CT = 0, SCLT = 1, SDAT = 1 */

 DAC not used, set to high impendance mode */

 DAC LSB */

 DiSEqC off, LNB power on OP2/LOCK pin on */

 FIFO */

 OP1 ctl = Normal, OP1 val = 1 (LNB Power ON) */

 DC offset compensation = ON, beta_agc1 = 2 */

 alpha_tmg = 2, beta_tmg = 3 */

 AGC2  0x3d

 lock detector threshold

 out imp: normal  out type: parallel FEC mode:0

 1/2 threshold

 2/3 threshold

 3/4 threshold

 5/6 threshold

 7/8 threshold

 test all FECs

 viterbi and synchro search

 rs control

 error control

 F22FR = 0x7d, F22 = f_VCO / 128 / 0x7d = 22 kHz */

 I2CT = 0, SCLT = 1, SDAT = 1 */

 DAC not used, set to high impendance mode */

 DAC LSB */

 DiSEqC off, LNB power on OP2/LOCK pin on */

 FIFO */

 OP1 ctl = Normal, OP1 val = 1 (LNB Power ON) */

 DC offset compensation = ON, beta_agc1 = 2 */

 alpha_tmg = 2, beta_tmg = 3 */

 AGC2  0x3d

 lock detector threshold

 out imp: normal  out type: parallel FEC mode:0

 1/2 threshold

 2/3 threshold

 3/4 threshold

 5/6 threshold

 7/8 threshold

 test all FECs

 viterbi and synchro search

 rs control

 error control

 round correctly */

 BSBE1 wants XCE bit set */

 determine charge pump

 assume PLL filter should always be 8MHz for the moment.

 calculate divisor

 (Finput + Fif)/Fref; Fif = 36125000 Hz, Fref = 62500 Hz

 setup tuner buffer

 Hauppauge/TT Nova-USB-S budget (stv0299/ALPS BSRU6|BSBE1(tsa5059))

 try the stv0299 based first

 ALPS BSBE1

 ALPS BSRU6

 Grundig 29504-491

 Hauppauge/TT DVB-C budget (ves1820/ALPS TDBE2(sp5659))

 Hauppauge/TT Nova-USB-t budget (tda10046/Philips td1316(tda6651tt) OR cx22700/ALPS TDMB7(??))

 try the ALPS TDMB7 first

 Philips td1316

 i2c */

FIXME dmxdev (nur WAS?)

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 *  Copyright (C) 2004 Aurelien Alleaume <slts@free.fr>

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 Streaming is on

 OK to pass data to client

 Passing data to client now

 State relevant to current buffer being read */

 An allocation appears to have failed

---TRACE_READ---*/ pvr2_ioread_stop id=%p",cp);

---TRACE_READ---*/ sync_state <== 0");

---TRACE_READ---*/ pvr2_ioread_start id=%p",cp);

---TRACE_READ---*/ pvr2_ioread_start id=%p error=%d",

---TRACE_READ---*/ sync_state <== 1");

---TRACE_READ---*/ pvr2_ioread_setup (tear-down) id=%p",

---TRACE_READ---*/ pvr2_ioread_setup (setup) id=%p",

 Flush out current buffer first.

 Streaming error...

---TRACE_READ---*/ pvr2_ioread_read id=%p queue_error=%d",

 Now get a freshly filled buffer.

 Nothing ready; done.

 Nothing transferred.  Was there an error?

 Streaming error...

---TRACE_READ---*/ pvr2_ioread_read id=%p buffer_error=%d",

 Give up.

 Start over...

 Search the stream for our synchronization key.  This is made

 complicated by the fact that in order to be honest with

 ourselves here we must search across buffer boundaries...

 Ensure we have a buffer

 Now walk the buffer contents until we match the key or

 run out of buffer data.

 Found the next key byte

 Whoops, mismatched.  Start key over...

 Consume what we've walked through

 If we've found the key, then update state and get out.

---TRACE_READ---*/ sync_state <== 2 (skipped %u bytes)",

 Sanity check - should NEVER get here

 Get out so we don't get stuck in an infinite

 loop.

 (for clarity)

 Stream is not enabled; so this is an I/O error

 No data available at all right now.

 Haven't buffered up enough yet; try again later

---TRACE_READ---*/ data is %s",

---TRACE_READ---*/ pvr2_ioread_read id=%p ZERO Request? Returning zero.",

 Suck data out of the buffers and copy to the user

 We're repeating the sync key data into

 the stream.

 Normal buffer copy

 Don't run past user's buffer

 User supplied a bad pointer?

 Give up - this *will* cause data

 to be lost.

 Update offset inside sync key that we're

 repeating back out.

 Consumed entire key; switch mode

 to normal.

---TRACE_READ---*/ sync_state <== 0");

 Update buffer offset.

 If anything was copied, return that count

 Nothing copied; suggest to caller that another

 attempt should be tried again later

---TRACE_READ---*/ pvr2_ioread_read id=%p request=%d result=%d",

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 *  Copyright (C) 2004 Aurelien Alleaume <slts@free.fr>

 for linux/firmware.h

 Firmware mailbox flags - definitions found from ivtv */

	/*



	Format: First byte must be 0x01.  Remaining 32 bit words are

	spread out into chunks of 7 bytes each, with the first 4 bytes

	being the data word (little endian), and the next 3 bytes

	being the address where that data word is to be written (big

	endian).  Repeat request for additional words, with offset

	adjusted accordingly.



	/*



	Format: First byte must be 0x02 (status check) or 0x28 (read

	back block of 32 bit words).  Next 6 bytes must be zero,

	followed by a single byte of MBOX_BASE+offset for portion to

	be read.  Returned data is packed set of 32 bits words that

	were read.



/* This prototype is set up to be compatible with the

   cx2341x_mbox_func prototype in cx2341x.h, which should be in

   kernels 2.6.18 or later.  We do this so that we can enable

   cx2341x.ko to write to our encoder (by handing it a pointer to this

 These sizes look to be limited by the FX2 firmware implementation */

	/*



	The encoder seems to speak entirely using blocks 32 bit words.

	In ivtv driver terms, this is a mailbox at MBOX_BASE which we

	populate with data and watch what the hardware does with it.

	The first word is a set of flags used to control the

	transaction, the second word is the command to execute, the

	third byte is zero (ivtv driver suggests that this is some

	kind of return value), and the fourth byte is a specified

	timeout (windows driver always uses 0x00060000 except for one

	case when it is zero).  All successive words are the argument

	words for the command.



	First, write out the entire set of words, with the first word

	being zero.



	Next, write out just the first word again, but set it to

	IVTV_MBOX_DRIVER_DONE | IVTV_DRIVER_BUSY this time (which

	probably means "go").



	Next, read back the return count words.  Check the first word,

	which should have IVTV_MBOX_FIRMWARE_DONE set.  If however

	that bit is not set, then the command isn't done so repeat the

	read until it is set.



	Finally, write out just the first word again, but set it to

	0x0 this time (which probably means "idle").



/* This implements some extra setup for the encoder that seems to be

	/* This inexplicable bit happens in the Hauppauge windows

	   driver (for both 24xxx and 29xxx devices).  However I

	   currently see no difference in behavior with or without

	   this stuff.  Leave this here as a note of its existence,

	/* Mike Isely <isely@pobox.com> 26-Jan-2006 The windows driver

	   sends the following list of ENC_MISC commands (for both

	   24xxx and 29xxx devices).  Meanings are not entirely clear,

	   however without the ENC_MISC(3,1) command then we risk

	   random perpetual video corruption whenever the video input

	/* This ENC_MISC(5,0) command seems to hurt 29xxx sync

	   performance on channel changes, but is not a problem on

	/* This ENC_MISC(3,encMisc3Arg) command is critical - without

	   it there will eventually be video corruption.  Also, the

	   saa7115 case is strange - the Windows driver is passing 1

	   regardless of device type but if we have 1 for saa7115

	/* This ENC_MISC(4,1) command is poisonous, so it is commented

	   out.  But I'm leaving it here anyway to document its

	   existence in the Windows driver.  The effect of this

	   command is that apps displaying the stream become sluggish

	/* prevent the PTSs from slowly drifting away in the generated

 saa7115: 0xf0 */

 ivtv cx25840: 0x140 */

 setup firmware to notify us about some events (don't know why...) */

 unmask some interrupts */

 Unhandled cases for now */

 mask all interrupts */

 Unhandled cases for now */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

		/* Trigger wakeup on control thread in case it is waiting

 Finish hardware initialization */

			/* Trigger interface initialization.  By doing this

			   here initialization runs in our own safe and

			/* Even though initialization did not succeed,

			   we're still going to continue anyway.  We need

			   to do this in order to await the expected

			   disconnect (which we will detect in the normal

 Go away... */

 No change; nothing to do */

			/* Internal failure changing allowed list; probably

 This is the marker for the real beginning of a legitimate mpeg2 stream.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 *  Copyright (C) 2004 Aurelien Alleaume <slts@free.fr>

 MUST be first! */

 Information about this device: */

 Expected stream format */

 V4L defined type for this device node */

 pvr2-understood minor device type */

 Map contiguous ordinal value to input id */

	/* streams - Note that these must be separately, individually,

	 * allocated pointers.  This is because the v4l core is going to

 FIXME : Don't know what to put here... */

/*

 * This is part of Video 4 Linux API. These procedures handle ioctl() calls.

	/* Don't bother with audioset, since this driver currently

	   always switches the audio whenever the video is

	/* Handling std is a tougher problem.  It doesn't make

	   sense in cases where a device might be multi-standard.

	   We could just copy out the current value for the

	   standard, but it can change over time.  For now just

	/* pkt: FIXME: We are returning one "fake" input here

	   which could very well be called "whatever_we_like".

	   This is for apps that want to see an audio input

	   just to feel comfortable, as well as to test if

	   it can do stereo or sth. There is actually no guarantee

	   that the actual audio input cannot change behind the app's

	   back, but most applications should not mind that either.



	   Hopefully, mplayer people will work with us on this (this

	   whole mess is to support mplayer pvr://), or Hans will come

	   up with a more standard way to say "we have inputs but we

	   don 't want you to change them independent of video" which

	   will sort this mess.

 pkt: FIXME: see above comment (VIDIOC_ENUMAUDIO) */

 Only answer for the 1st tuner */

 Only one format is supported: MPEG. */

		/* No stream defined for this node.  This means

		   that we're not currently allowed to stream from

		/* No stream defined for this node.  This means

		   that we're not currently allowed to stream from

		/* Ensure that if read as a 64 bit value, the user

	/* For the moment just validate that the requested control

	/* Construct the unregistration message *before* we actually

	   perform the unregistration step.  By doing it this way we don't

 Paranoia */

	/* Actual deallocation happens later when all internal references

 Our own context pointer */

		/* Opening device as a radio, legal input selection subset

		/* Opening the main V4L device, legal input selection

		/* No stream defined for this node.  This means that we're

	/* First read() attempt.  Try to claim the stream and start

 Someone else must already have it */

 Doing blocking I/O.  Wait here. */

 Bail out (this should be impossible) */

 register streams */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 *  Copyright (C) 2004 Aurelien Alleaume <slts@free.fr>

/*



   This source file is specifically designed to interface with the

   saa711x support that is available in the v4l available starting

   with linux 2.6.15.



	/* In radio mode, we mute the video, but point at one

 or SVIDEO0, it seems */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 Set the given control. */

 Set/clear specific bits of the given control. */

 Get the current value of the given control. */

 Retrieve control's type */

 Retrieve control's maximum value (int type) */

 Retrieve control's minimum value (int type) */

 Retrieve control's default value (any type) */

 Retrieve control's enumeration count (enum only) */

 Retrieve control's valid mask bits (bit mask only) */

 Retrieve the control's name */

 Retrieve the control's desc */

 Retrieve a control enumeration or bit mask value */

 Return V4L ID for this control or zero if none */

 Return true if control is writable */

 Return true if control has custom symbolic representation */

 Convert a given mask/val to a custom symbolic value */

 Convert a symbolic value to a mask/value pair */

 Convert a symbolic value to a mask/value pair */

 Convert a given mask/val to a symbolic value */

 Convert a given mask/val to a symbolic value */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 *  Copyright (C) 2004 Aurelien Alleaume <slts@free.fr>

/*



   This source file is specifically designed to interface with the

   v4l-dvb cs53l32a module.



 1 or 2 seems to work here */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 Mapping of standard bits to color system */

 Mapping of standard bits to modulation system */

 Search an array of std_name structures and return a pointer to the

 element with the matching name.

 No more characters

 Illegal color system name

 Illegal modulation system ID

 Specific color + modulation system illegal

 Template data for possible enumerated video standards.  Here we group

 standards which share common frame rates and resolution.

 This is a total wild guess

 This is total wild guess

/* These are special cases of combined standards that we should enumerate

 Don't complain about ATSC standard values */

 paranoia

 Enumerate potential special cases */

 Now enumerate individual pieces */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 *  Copyright (C) 2004 Aurelien Alleaume <slts@free.fr>

/*



   Read and analyze data in the eeprom.  Use tveeprom to figure out

   the packet structure, since this is another Hauppauge device and

   internally it has a family resemblance to ivtv-type devices



 We seem to only be interested in the last 128 bytes of the EEPROM */

 Grab EEPROM contents, needed for direct method. */

	/* Seems that if the high bit is set, then the *real* eeprom

	   address is shifted right now bit position (noticed this in

	/* FX2 documentation states that a 16bit-addressed eeprom is

	   expected if the I2C address is an odd number (yeah, this is

	/* We have to do the actual eeprom data fetch ourselves, because

	   (1) we're only fetching part of the eeprom, and (2) if we were

	   getting the whole thing our I2C driver can't grab it in one

 Directly call eeprom analysis function within tveeprom. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2007 Mike Isely <isely@pobox.com>

/*



This source file should encompass ALL per-device type information for the

driver.  To define a new device, add elements to the pvr2_device_table and

pvr2_device_desc structures.



 This is needed in order to pull in tuner type ids... */

------------------------------------------------------------------------*/

 Hauppauge PVR-USB2 Model 29xxx */

------------------------------------------------------------------------*/

 Hauppauge PVR-USB2 Model 24xxx */

------------------------------------------------------------------------*/

 GOTVIEW USB2.0 DVD2 */

------------------------------------------------------------------------*/

 GOTVIEW USB2.0 DVD Deluxe */

 (same module list as gotview_2) */

------------------------------------------------------------------------*/

 Terratec Grabster AV400 */

------------------------------------------------------------------------*/

 OnAir Creator */

------------------------------------------------------------------------*/

 OnAir USB 2.0 */

------------------------------------------------------------------------*/

 Hauppauge PVR-USB2 Model 73xxx */

------------------------------------------------------------------------*/

 Hauppauge PVR-USB2 Model 75xxx */

------------------------------------------------------------------------*/

    Hauppauge PVR-USB2 Model 160000 / 160111 -- HVR-1955 / HVR-1975     */

2, 1-serial, 2-parallel.*/

0-disabled, 1-enabled.*/

0-not-invert, 1-invert*/

0-not-invert, 1-invert*/

 demod clock MHz; 24/25 supported */

------------------------------------------------------------------------*/

 Logically identical to 2900 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  pvrusb2-dvb.c - linux-dvb api interface to the pvrusb2 driver.

 *

 *  Copyright (C) 2007, 2008 Michael Krufky <mkrufky@linuxtv.org>

 Not sure about this... */

			/* Since we know we did something to a buffer,

			   just go back and try again.  No point in

			   blocking unless we really ran out of

		/* Wait until more buffers become available or we're

	/* If we get here and ret is < 0, then an error has occurred.

 from videobuf-dvb.c: */

 somebody else already has the stream */

&hdw->usb_dev->owner*/,

 MFE lock */

		/* Device lacks a digital interface so don't set up

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 *  Copyright (C) 2004 Aurelien Alleaume <slts@free.fr>

 CONFIG_VIDEO_PVRUSB2_SYSFS */

 CONFIG_VIDEO_PVRUSB2_SYSFS */

 Create association with v4l layer */

 Create association with dvb layer */

 CONFIG_VIDEO_PVRUSB2_SYSFS */

 Create underlying hardware interface */

/*

 * pvr_disconnect()

 *

/*

 * pvr_init() / pvr_exit()

 *

 * This code is run to initialize/exit the driver.

 *

 CONFIG_VIDEO_PVRUSB2_SYSFS */

 CONFIG_VIDEO_PVRUSB2_SYSFS */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

/* This defines a minimum interval that the decoder must remain quiet

/* This defines a minimum interval that the decoder must be allowed to run

/* This defines a minimum interval that the encoder must remain quiet

/* This defines the minimum interval that the encoder must successfully run

   before we consider that the encoder has run at least once since its

   firmware has been loaded.  This measurement is in important for cases

   where we can't do something until we know that the encoder has been run

 US Broadcast channel 3 (61.25 MHz), to help with testing */

 104.3 MHz, a usable FM station for my area */

 size of a firmware chunk */

/* Define the list of additional controls we'll dynamically construct based

 Already using audio_mode elsewhere :-( */

xawtv needs this name*/

		/* Handle side effects correctly - if we're tuned to this

		   slot, then forgot the slot id relation since the stored

 Actual maximum depends on the video standard in effect. */

 Actual minimum depends on device digitizer type. */

 Safety fallback */

 Safety fallback */

		/* Oops.  cx2341x is telling us it's not safe to change

		   this control while we're capturing.  Make a note of this

		   fact so that the pipeline will be stopped the next time

		   controls are committed.  Then go on ahead and store this

	/* Strip out the const so we can adjust a function pointer.  It's

	   OK to do this here because we know this is a dynamically created

	   control, so the underlying storage for the info pointer is (a)

	   private to us, and (b) not in read-only storage.  Either we do

	   this or we significantly complicate the underlying control

 Table definition of all controls which can be manipulated */

		/* Hook in check for video standard and adjust maximum

		/* Hook in check for input value (tv/radio) and adjust

		/* Hook in check for input value (tv/radio) and adjust

		/* For this type we "borrow" the V4L2_TUNER_MODE enum from

		   v4l.  Nothing outside of this module cares about this,

		   but I reuse it in order to also reuse the

/* Set the currently tuned frequency and account for all possible

 Swing over to radio frequency selection */

 Swing over to television frequency selection */

/* Attempt to locate one of the given set of files.  Messages are logged

   appropriate to what has been found.  The return value will be 0 or

   greater on success (it will be the index of the file name found) and

   fw_entry will be filled in.  Otherwise a negative error is returned on

   failure.  If the return value is -ENOENT then no viable firmware file

/*

 * pvr2_upload_firmware1().

 *

 * Send the 8051 firmware to the device.  After the upload, arrange for

 * device to re-enumerate.

 *

 * NOTE : the pointer to the firmware data given by request_firmware()

 * is not suitable for an usb transaction.

 *

 default result

 We have to hold the CPU during firmware upload. */

	/* upload the firmware to address 0000-1fff in 2048 (=0x800) bytes

 Now release the CPU.  It will disconnect and reconnect later. */

 We should have written fwsize bytes */

/*

 * pvr2_upload_firmware2()

 *

 * This uploads encoder firmware on endpoint 2.

 *

	/* Since we're about to completely reinitialize the encoder,

	   invalidate our cached copy of its configuration state.  Next

	/* Encoder is about to be reset so note that as far as we're

 First prepare firmware loading */

interrupt mask*/

gpio dir*/

gpio output state*/

APU command*/

gpio dir*/

gpio output state*/

VPU ctrl*/

reset hw blocks*/

encoder SDRAM refresh*/

encoder SDRAM pre-charge*/

I2C clock*/

unknown*/

unknown*/

unknown*/

unknown*/

 Now send firmware */

 Usbsnoop log shows that we must swap bytes... */

		/* Some background info: The data being swapped here is a

		   firmware image destined for the mpeg encoder chip that

		   lives at the other end of a USB endpoint.  The encoder

		   chip always talks in 32 bit chunks and its storage is

		   organized into 32 bit words.  However from the file

		   system to the encoder chip everything is purely a byte

		   stream.  The firmware file's contents are always 32 bit

		   swapped from what the encoder expects.  Thus the need

		   always exists to swap the bytes regardless of the endian

		   type of the host processor and therefore swab32() makes

 Finish upload */

reset hw blocks*/

VPU ctrl*/

		/* Ensure that GPIO 11 is set to output for GOTVIEW

	/* Even though we really only care about the video decoder chip at

	   this point, we'll broadcast stream on/off to all sub-devices

	   anyway, just in case somebody else wants to hear the

		/* We get here if the encoder has been noticed.  Otherwise

		   we'll issue a warning to the user (which should

--TRACE_STREAM--*/ %s",

	/* Try a harmless request to fetch the eeprom's address over

	   endpoint 1.  See what happens.  Only the full FX2 image can

	   respond to this.  If this probe fails then likely the FX2

 Pattern to match */

 Which bits we care about */

 What additional standards or default to set */

/* This data structure labels specific combinations of standards from

   tveeprom that we'll try to recognize.  If we recognize one, then assume

   a specified default standard to use.  This is here because tveeprom only

   tells us about available standards not the intended default standard (if

   any) for the device in question.  We guess the default based on what has

   been reported as available.  Note that this is only for guessing a

   default - which can always be overridden explicitly - and if the user

   has otherwise named a default then that default will always be used in

 PAL(B/G) */

 NTSC(M) */

 PAL(I) */

 SECAM(L/L') */

 PAL(D/D1/K) */

	/*

	  Mike Isely <isely@pobox.com> 19-Nov-2006 - This bit of nuttiness

	  for cx25840 causes that module to correctly set up its video

	  scaling.  This is really a problem in the cx25840 module itself,

	  but we work around it here.  The problem has not been seen in

	  ivtv because there VBI is supported and set up.  We don't do VBI

	  here (at least not yet) and thus we never attempted to even set

	  it up.

 We're not using a cx25840 so don't enable the hack */

 Arbitrary count - max # i2c addresses we will probe */

 Second chance: Try default i2c address list */

	/* Tag this sub-device instance with the module ID we know about.

	   In other places we'll use that tag to determine if the instance

 client-specific setup... */

 Take the IR chip out of reset, if appropriate */

 This step MUST happen after the earlier powerup step */

 Reset demod only on Hauppauge 160xxx platform */

 TODO: not sure this is proper place to reset once only */

	/* Set up special default values for the television and radio

	   frequencies here.  It's not really important what these defaults

	   are, but I set them to something usable in the Chicago area just

 Do not use pvr2_reset_ctl_endpoints() here.  It is not

 thread-safe against the normal pvr2_send_request() mechanism.

 (We should make it thread safe).

		/* Ensure that GPIO 11 is set to output for GOTVIEW

/* Set up the structure and attempt to put the device into a usable state.

   This can be a time-consuming operation, which is why it is not done

/* Perform second stage initialization.  Set callback pointer first so that

   we can avoid a possible initialization race (if the kernel thread runs

			/* Handle a race here: If we're already

			   disconnected by this point, then give up.  If we

			   get past this then we'll remain connected for

			   the duration of initialization since the entire

			   initialization sequence is now protected by the

/* Create, set up, and return a structure for interacting with the

 Calculate which inputs are OK */

	/* If not a hybrid device, pathway_state never changes.  So

 Ensure that default input choice is a valid one. */

 Define and configure additional controls from cx2341x module. */

 Initialize control data regarding video standard masks

/* Remove _all_ associations between this driver and the underlying USB

	/* If we don't do this, then there will be a dangling struct device

	   reference to our disappearing device persisting inside the V4L

 Destroy hardware interaction structure */

 Called when hardware has been unplugged */

 Get the number of defined controls */

 Retrieve a control handle given its index (0..count-1) */

 Retrieve a control handle given its index (0..count-1) */

 This could be made a lot more efficient, but for now... */

 Given a V4L ID, retrieve the control structure associated with it. */

 This could be made a lot more efficient, but for now... */

/* Given a V4L ID for its immediate predecessor, retrieve the control

 This could be made a lot more efficient, but for now... */

/* Execute whatever commands are required to update the state of all the

 ((fv * 1000) / 62500) */

		/* tuner-core currently doesn't seem to care about this, but

	/* Unable to set crop parameters; there is apparently no equivalent

/* Figure out if we need to commit control changes.  If so, mark internal

   state flags to indicate this fact and return true.  Otherwise do nothing

--TRACE_COMMIT--*/ %.*s",

 Nothing has changed */

/* Perform all operations needed to commit all control changes.  This must

   be performed in synchronization with the pipeline state and is thus

   expected to be called as part of the driver's worker thread.  Return

   true if commit successful, otherwise return false to indicate that

 Change of mode being asked for... */

 Can't commit anything until pathway is ok. */

	/* Handle some required side effects when the video standard is

		/* Rewrite the vertical resolution to be appropriate to the

		/* Rewrite the GOP size to be appropriate to the video

	/* The broadcast decoder can only scale down, so if

	 * res_*_dirty && crop window < output format ==> enlarge crop.

	 *

	 * The mpeg encoder receives fields of res_hor_val dots and

	 * res_ver_val halflines.  Limits: hor<=720, ver<=576.

 must rescale */

	/* If any of the below has changed, then we can't do the update

	   while the pipeline is running.  Pipeline must be paused first

	   and decoder -> encoder connection be made quiescent before we

		/* Pipeline is not idle; we can't proceed.  Arrange to

		   cause pipeline to stop so that we can try this again

		/* Write new sample rate into control structure since

		 * the master copy is stale.  We must track srate

		 * separate from the mpeg control structure because

 Handle any side effects of stream config here */

 Handle GOTVIEW audio switching */

 Set GPIO 11 */

 Clear GPIO 11 */

 Check and update state for all sub-devices. */

		/* If encoder isn't running or it can't be touched, then

		   this will get worked out later when we start the

	/* Hardware state may have changed in a way to cause the cropping

	   capabilities to have changed.  So mark it stale, which will

 Return name for this driver instance */

 Execute poll of tuner status */

 Return information about cropping capabilities */

 Return information about the tuner */

 Get handle to video output stream */

 Grab EEPROM contents, needed for direct method. */

	/* Seems that if the high bit is set, then the *real* eeprom

	   address is shifted right now bit position (noticed this in

	/* FX2 documentation states that a 16bit-addressed eeprom is

	   expected if the I2C address is an odd number (yeah, this is

	/* We have to do the actual eeprom data fetch ourselves, because

	   (1) we're only fetching part of the eeprom, and (2) if we were

	   getting the whole thing our I2C driver can't grab it in one

				/* Now release the CPU.  It will disconnect

 We have to hold the CPU during firmware upload. */

			/* download the firmware from address 0000-1fff in 2048

 Return true if we're in a mode for retrieval CPU firmware */

 Store a v4l minor device number */

/* Issue a command and get a response from the device.  This extended

   version includes a probe flag (which if set means that device errors

   should not be logged or treated as fatal) and a timeout in jiffies.

 Ensure that we have sane parameters */

 Initialize common stuff */

 Transfer write data to internal buffer */

 Initiate a write request */

 Initiate a read request */

 Start timer */

 Now wait for all I/O to complete */

 Stop timer */

 Validate results of write request */

			/* USB subsystem is reporting some kind of failure

 Failed to write enough data */

 Validate results of read request */

			/* USB subsystem is reporting some kind of failure

 Failed to read enough data */

 Transfer retrieved data out from internal buffer */

 write register prefix */

 read register prefix */

	/* Write the CPUCS register on the 8051.  The lsb of the register

 Use this for Hauppauge 160xxx only */

 Can't reset 160xxx or it will trash Demod tristate */

	/* Compare digital/analog desired setting with current setting.  If

 They match; nothing to do */

			/* If moving to analog mode, also force the decoder

			   to reset.  If no decoder is attached, then it's

			   ok to ignore this because if/when the decoder

		/* Supposedly we should always have the power on whether in

		   digital or analog mode.  But for now do what appears to

	/* change some GPIO data

	 *

	 * note: bit d7 of dir appears to control the LED,

	 * so we shut it off here.

	 *

 Toggle LED */

 Stop / start video stream transport */

	/* If we're in analog mode, then just issue the usual analog

Note: Not reached */

 Whoops, we don't know what mode we're in... */

	/* To get here we have to be in digital mode.  The mechanism here

	   is unfortunately different for different vendors.  So we switch

	   on the device's digital scheme attribute in order to figure out

 Evaluate whether or not state_pathway_ok can change */

 Nothing to do if pathway is already ok */

 Not allowed to change anything if pipeline is not idle */

 Evaluate whether or not state_encoder_ok can change */

 Evaluate whether or not state_encoder_config can change */

 paranoia - solve race if timer just completed */

			/* We must reset the enforced wait interval if

			   anything has happened that might have disturbed

				/* Must clear the state - therefore we did

				   something to a state bit and must also

				/* waitok flag wasn't set and timer isn't

				   running.  Check flag once more to avoid

				   a race then start the timer.  This is

				   the point when we measure out a minimal

				   quiet interval before doing something to

			/* We can't continue until we know we have been

			   quiet for the interval measured by this

 Return true if the encoder should not be running. */

 Encoder isn't healthy at the moment, so stop it. */

		/* Mode is not understood at the moment (i.e. it wants to

			/* We're in analog mode and the decoder is not

			   running; thus the encoder should be stopped as

			/* This is a funny case.  We're in digital mode so

			   really the encoder should be stopped.  However

			   if it really is running, only kill it after

			   runok has been set.  This gives a chance for the

			   onair quirk to function (encoder must run

			   briefly first, at least once, before onair

 Unknown mode; so encoder should be stopped. */

	/* If we get here, we haven't found a reason to stop the

 Return true if the encoder should be running. */

 Don't run the encoder if it isn't healthy... */

		/* Don't run the encoder if we don't (yet) know what mode

			/* In analog mode, if the decoder is running, then

			/* This is a quirk.  OnAir hardware won't stream

			   digital until the encoder has been run at least

			   once, for a minimal period of time (empiricially

			   measured to be 1/4 second).  So if we're on

			   OnAir hardware and the encoder has never been

			   run at all, then start the encoder.  Normal

			   state machine logic in the driver will

 For completeness (unknown mode; encoder won't run ever) */

	/* If we get here, then we haven't found any reason to run the

 Evaluate whether or not state_encoder_run can change */

 Timeout function for quiescent timer. */

 Timeout function for decoder stabilization timer. */

 Timeout function for encoder wait timer. */

 Timeout function for encoder run timer. */

 Evaluate whether or not state_decoder_run can change */

 paranoia - solve race if timer(s) just completed */

		/* Kill the stabilization timer, in case we're killing the

		   encoder before the previous stabilization interval has

				/* We don't do something about the

				   quiescent timer until right here because

				   we also want to catch cases where the

				   decoder was already not running (like

				   after initialization) as opposed to

				   knowing that we had just stopped it.

				   The second flag check is here to cover a

				   race - the timer could have run and set

				   this flag just after the previous check

			/* Don't allow decoder to start again until it has

			   been quiesced first.  This little detail should

 Evaluate whether or not state_usbstream_run can change */

				/* OnAir digital receivers won't stream

				   unless the analog encoder has run first.

				   Why?  I have no idea.  But don't even

				   try until we know the analog side is

 Attempt to configure pipeline, if needed */

/* Update pipeline idle and pipeline pause tracking states based on other

   inputs.  This must be called whenever the other relevant inputs have

 Update pipeline state */

 Set of functions to be run to evaluate various states in the driver. */

 Process various states and return true if we did anything interesting. */

	/* This loop is the heart of the entire driver.  It keeps trying to

	   evaluate various bits of driver state until nothing changes for

	   one full iteration.  Each "bit of state" tracks some global

	   aspect of the driver, e.g. whether decoder should run, if

	   pipeline is configured, usb streaming is on, etc.  We separately

	   evaluate each of those questions based on other driver state to

 Iterate over each bit of state */

/* Generate report containing info about attached sub-devices and attached

   i2c clients, including an indication of which attached i2c clients are

/* Evaluate and update the driver's current state, taking various actions

 Process all state and get back over disposition */

 Update master state based upon all other states. */

 Trigger anyone waiting on any state changes here. */

 Cause kernel thread to check / update driver state */

	/* Note: There apparently is no replacement for VIDIOC_CROPCAP

	   using v4l2-subdev - therefore we can't support that AT ALL right

	   now.  (Of course, no sub-drivers seem to implement it either.

	/* We have to do this to avoid getting into constant polling if

	/* Handle side effects - if we switch to a mode that needs the RF

	   tuner, then select the right frequency choice as well and mark

 No legal modes left; return error instead. */

			/* Current mode is still in the allowed mask, so

		/* Select and switch to a mode that is still in the allowed

 Nothing legal; give up */

 Find I2C address of eeprom */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

/*



  This module attempts to implement a compliant I2C adapter for the pvrusb2

  device.



 Context */

 I2C address we're talking to */

 Data to write */

 Size of data to write */

 Return value - default 0 means success */

 Clear the command buffer (likely to be paranoia) */

 Set up command buffer for an I2C write */

 write prefix */

 i2c addr of chip */

 length of what follows */

 Do the operation */

 Context */

 I2C address we're talking to */

 Data to write */

 Size of data to write */

 Where to put data we read */

 Amount of data to read */

 Return value - default 0 means success */

 Clear the command buffer (likely to be paranoia) */

 Set up command buffer for an I2C write followed by a read */

 read prefix */

 arg length */

	hdw->cmd_buffer[2] = rlen;  /* answer length. Device will send one

 i2c addr of chip */

 Do the operation */

 Copy back the result */

 Error, just blank out the return buffer */

/* This is the common low level entry point for doing I2C operations to the

/* This is a special entry point for cases of I2C transaction attempts to

   the IR receiver.  The implementation here simulates the IR receiver by

   issuing a command to the FX2 firmware and using that response to return

   what the real I2C receiver would have returned.  We use this for 24xxx

   devices, where the IR receiver chip has been removed and replaced with

 This is a probe attempt.  Just let it succeed. */

 We don't understand this kind of transaction */

		/* Mike Isely <isely@pobox.com> Appears to be a probe

		   attempt from lirc.  Just fill in zeroes and return.  If

		   we try instead to do the full transaction here, then bad

		   things seem to happen within the lirc driver module

		   (version 0.8.0-7 sources from Debian, when run under

		   vanilla 2.6.17.6 kernel) - and I don't have the patience

 Issue a command to the FX2 to read the IR receiver. */

 Give up if that operation failed. */

	/* Mangle the results into something that looks like the real IR

 No code received. */

		/* Mash the FX2 firmware-provided IR code into something

/* This is a special entry point that is entered if an I2C operation is

   attempted to a wm8775 chip on model 24xxx hardware.  Autodetect of this

   part doesn't work, but we know it is really there.  So let's look for

 This is a probe attempt.  Just let it succeed.

/* This is an entry point designed to always fail any attempt to perform a

   transfer.  We use this to cause certain I2C addresses to not be

/* This is a special entry point that is entered if an I2C operation is

   attempted to a cx25840 chip on model 24xxx hardware.  This chip can

   sometimes wedge itself.  Worse still, when this happens msp3400 can

   falsely detect this part and then the system gets hosed up after msp3400

   gets confused and dies.  What we want to do here is try to keep msp3400

   away and also try to notice if the chip is wedged and send a warning to

 Probe attempt - always just succeed and don't bother the

 hardware (this helps to make the state machine further

 down somewhat easier).

	/* We're looking for the exact pattern where the revision register

	   is being read.  The cx25840 module will always look at the

	   revision register first.  Any other pattern of access therefore

	   has to be a probe attempt from somebody else so we'll reject it.

	   Normally we could just let each client just probe the part

	   anyway, but when the cx25840 is wedged, msp3400 will get a false

	/* If we get to here then we have a legitimate read for one of the

 This blocks all further communication with the part.

 Success! */

/* This is a very, very limited I2C adapter implementation.  We can only

 Simple read */

 Length == 0 read.  This is a probe. */

			/* If the read is short enough we'll do the whole

			   thing atomically.  Otherwise we have no choice

 Simple write */

			/* Write followed by atomic read.  If the read

			   portion is short enough we'll do the whole thing

			   atomically.  Otherwise we have no choice but to

 Return true if device exists at given address */

 FX2-controlled IR */

 Original 29xxx device */

 ms From ir-kbd-i2c */

 IR Receiver */

 HVR-1950 style */

 24xxx MCE device */

 IR Transceiver */

		/* The device either doesn't support I2C-based IR or we

	/* The default action for all possible I2C addresses is just to do

 However, deal with various special cases for 24xxx hardware. */

			/* Set up translation so that our IR looks like a

 Configure the adapter and set up everything else related to it.

		/* Probe for a different type of IR receiver on this

		   device.  This is really the only way to differentiate

		   older 24xxx devices from 24xxx variants that include an

		   IR blaster.  If the IR blaster is present, the IR

		   receiver is part of that chip and thus we must disable

 Remember that this is a different device... */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 #define SANITY_CHECK_BUFFERS

 Buffers queued for reading */

 Buffers with retrieved data */

 Buffers available for use */

 Pointers to all buffers */

 Array size of buffers */

 Total buffers actually in circulation */

 Designed number of buffers to be in circulation */

 Executed when ready list become non-empty */

 Context for transfer endpoint */

 Overhead for mutex enforcement */

 Tracking state for tolerating errors */

 Pointer to storage area */

 Size of storage area */

 Amount of valid data in storage area */

 Transfer result status */

  SANITY_CHECK_BUFFERS  */

---TRACE_FLOW---*/ bufferPool	%8s dec cap=%07d cnt=%02d",

---TRACE_FLOW---*/ bufferState    %p %6s --> %6s",

---TRACE_FLOW---*/ bufferState    %p %6s --> %6s",

---TRACE_FLOW---*/ bufferPool	%8s inc cap=%07d cnt=%02d",

---TRACE_FLOW---*/ bufferState    %p %6s --> %6s",

---TRACE_FLOW---*/ bufferPool	%8s inc cap=%07d cnt=%02d",

---TRACE_FLOW---*/ bufferState    %p %6s --> %6s",

---TRACE_FLOW---*/ bufferPool	%8s inc cap=%07d cnt=%02d",

---TRACE_FLOW---*/ bufferInit     %p stream=%p", bp, sp);

---TRACE_FLOW---*/ bufferDone     %p",

 Allocate buffers pointer array in multiples of 32 entries */

---TRACE_FLOW---*/ poolResize	stream=%p cur=%d adj=%+d",

 Paranoia */

---TRACE_FLOW---*/ poolCheck	stream=%p cur=%d tgt=%d",

		/* At this point, we should be guaranteed that no

		   completion callback may happen on this buffer.  But it's

		   possible that it might have completed after we noticed

		   it but before we wiped it.  So double check its status

---TRACE_FLOW---*/ bufferComplete %p stat=%d cnt=%d",

 We can tolerate this error, because we're below the

 threshold...

 Query / set the nominal buffer count */

 struct urb *urb

 struct usb_device *dev

 endpoint (below)

 void *transfer_buffer

 int buffer_length

---TRACE_FLOW---*/ bufferPool	%8s cap cap=%07d cnt=%02d",

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 *  Copyright (C) 2004 Aurelien Alleaume <slts@free.fr>

/*



   This source file is specifically designed to interface with the

   wm8775.



 All other cases just use the second input */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 CONFIG_VIDEO_PVRUSB2_DEBUGIFC */

 CONFIG_VIDEO_PVRUSB2_DEBUGIFC */

 CONFIG_VIDEO_PVRUSB2_DEBUGIFC */

 Control is an enumeration

 Control is an integer

 Control is an bitmask

 CONFIG_VIDEO_PVRUSB2_DEBUGIFC */

 CONFIG_VIDEO_PVRUSB2_DEBUGIFC */

 CONFIG_VIDEO_PVRUSB2_DEBUGIFC */

 CONFIG_VIDEO_PVRUSB2_DEBUGIFC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2005 Mike Isely <isely@pobox.com>

 *  Copyright (C) 2004 Aurelien Alleaume <slts@free.fr>

/*



   This source file is specifically designed to interface with the

   cx2584x, in kernels 2.6.16 or newer.



 Treat the same as composite */

 Specific to gotview device */

		/* line-in is used for radio and composite.  A GPIO is

 Specific to grabster av400 device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Hauppauge HD PVR USB driver - video 4 linux 2 interface

 *

 * Copyright (C) 2008      Janne Grunau (j@jannau.net)

 0.09 seconds */

 Use 480i59 as the default timings */

=========================================================================*/

 urb callback */

 marking buffer as received and wake waiting */

=========================================================================*/

 buffer bits */

 function expects dev->io_mutex to be hold by caller */

 function expects dev->io_mutex to be hold by caller */

 function expects dev->io_mutex to be hold by caller */

 function expects dev->io_mutex to be hold by caller */

 start streaming 2 request */

 function expects dev->io_mutex to be hold by caller */

 kill the still outstanding urbs */

 emptying the device buffer beforeshutting it down */

=======================================================================*/

/*

 * video 4 linux 2 file operations

/*

 * hdpvr_v4l2_read()

 * will allocate buffers when called for the first time

 wait for the first buffer */

 return nonblocking */

				/*

				 * The FW needs about 4 seconds after streaming

				 * stopped before it is ready to restart

				 * streaming.

 set remaining bytes to copy */

 finished, take next buffer */

 only wait if no data is available */

=======================================================================*/

/*

 * V4L2 ioctl handling

		/*

		 * Unfortunately gstreamer calls ENUMSTD and bails out if it

		 * won't find any formats, even though component input is

		 * selected. This means that we have to leave tvnorms at

		 * V4L2_STD_ALL. We cannot use the 'legacy' trick since

		 * tvnorms is set at the device node level and not at the

		 * filehandle level.

		 *

		 * Comment this out for now, but if the legacy mode can be

		 * removed in the future, then this code should be enabled

		 * again.

		dev->video_dev.tvnorms =

			(index != HDPVR_COMPONENT) ? V4L2_STD_ALL : 0;

	case V4L2_CID_MPEG_VIDEO_B_FRAMES: */

		if (ctrl->value == 0 && !(opt->gop_mode & 0x2)) { */

			opt->gop_mode |= 0x2; */

			hdpvr_config_call(dev, CTRL_GOP_MODE_VALUE, */

					  opt->gop_mode); */

		} */

		if (ctrl->value == 128 && opt->gop_mode & 0x2) { */

			opt->gop_mode &= ~0x2; */

			hdpvr_config_call(dev, CTRL_GOP_MODE_VALUE, */

					  opt->gop_mode); */

		} */

		break; */

	/*

	 * The original driver would always returns the current detected

	 * resolution as the format (and EFAULT if it couldn't be detected).

	 * With the introduction of VIDIOC_QUERY_DV_TIMINGS there is now a

	 * better way of doing this, but to stay compatible with existing

	 * applications we assume legacy mode every time an application opens

	 * the device. Only if one of the new DV_TIMINGS ioctls is called

	 * will the filehandle go into 'normal' mode where g_fmt returns the

	 * last set format.

 SDTV formats */

 HDTV formats */

 deregister I2C adapter */

 CONFIG_I2C */

 setup and register video device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Hauppauge HD PVR USB driver

 *

 * Copyright (C) 2001-2004 Greg Kroah-Hartman (greg@kroah.com)

 * Copyright (C) 2008      Janne Grunau (j@jannau.net)

 * Copyright (C) 2008      John Poet

 holds the number of currently registered devices */

 table of devices that work with this driver */

 Terminating entry */

 try to init the device like the windows driver */

 default options for init */

 set filter options */

 enable fan and bling leds */

 boost analog audio */

 6 mbps */

 9 mbps */

 original picture controls for firmware version <= 0x15 */

 updated in device_authorization() for newer firmware */

 allocate memory for our device state and initialize it */

 init video transfer queues first of all */

 to prevent oops in hdpvr_delete() on error paths */

 register v4l2_device early so it can be used for printks */

 set up the endpoint information */

 use only the first bulk-in and bulk-out endpoints */

			/* USB interface description is buggy, reported max

 init the device */

 let the user know what node this device is now attached to */

 prevent more I/O from starting and stop any ongoing */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Hauppauge HD PVR USB driver - video 4 linux 2 interface

 *

 * Copyright (C) 2008      Janne Grunau (j@jannau.net)

 suppress compiler warning */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Hauppauge HD PVR USB driver

 *

 * Copyright (C) 2008      Janne Grunau (j@jannau.net)

 *

 * IR device registration code is

 * Copyright (C) 2010	Andy Walls <awalls@md.metrocast.net>

 Our default information for ir-kbd-i2c.c to use */

 ms, duplicated from Windows */

		/*

		 * Write followed by atomic read is the only complex xfer that

		 * we actually support here.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * HackRF driver

 *

 * Copyright (C) 2014 Antti Palosaari <crope@iki.fi>

/*

 * Used Avago MGA-81563 RF amplifier could be destroyed pretty easily with too

 * strong signal or transmitting to bad antenna.

 * Set RF gain control to 'grabbed' state by default for sure.

 HackRF USB API commands (from HackRF Library) */

/*

 *       bEndpointAddress     0x81  EP 1 IN

 *         Transfer Type            Bulk

 *       wMaxPacketSize     0x0200  1x 512 bytes

 max u32, hw goes over 7GHz */

 stream formats */

 format descriptions for capture and preview */

 intermediate buffers with raw data from the USB device */

 XXX: set manually */

 videobuf2 queue and queued buffers list */

 Protects buffer_list */

 Buffer sequence counter */

 vb is full and packets dropped */

 vb is empty and packets dropped */

 Note if taking both locks v4l2_lock must always be locked first! */

 Protects everything else */

 Protects vb_queue */

 USB control message buffer */

 Current configuration */

 Controls */

 Sample rate calc */

 execute firmware command */

 write request */

 read request */

  1.75 MHz */

  2.5  MHz */

  3.5  MHz */

  5    MHz */

  5.5  MHz */

  6    MHz */

  7    MHz */

  8    MHz */

  9    MHz */

 10    MHz */

 12    MHz */

 14    MHz */

 15    MHz */

 20    MHz */

 24    MHz */

 28    MHz */

 ADC / DAC frequency */

 bandwidth */

 RX / TX RF frequency */

 RX RF gain */

 TX RF gain */

 RX LNA gain */

 RX IF gain */

 TX LNA gain */

 Private functions */

 calculate sample rate and output it in 10 seconds intervals */

 total number of samples */

/*

 * This gets called for the bulk stream pipe. This is done in interrupt

 * time, so it has to be fast, not crash, and not stall. Neat.

 success */

 NAK */

 kill */

 error */

 get buffer to write */

 success */

 NAK */

 kill */

 error */

 get buffer to read */

 stop the URB */

 free the URBs */

 allocate the URBs */

 The user yanked out the cable... */

 No need to keep the urbs around after disconnection */

 Videobuf2 operations */

 Need at least 8 buffers */

 Allow only RX or TX, not both same time */

 start hardware streaming */

 stop hardware streaming */

 Detect device */

 Init vb2 queue structure for receiver */

 Init vb2 queue structure for transmitter */

 Register controls for receiver */

 Register controls for transmitter */

 Register the v4l2_device structure */

 Init video_device structure for receiver */

 Init video_device structure for transmitter */

 USB device ID list */

 HackRF One */

 USB subsystem interface */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      uvc_debugfs.c --  USB Video Class driver - Debugging support

 *

 *      Copyright (C) 2011

 *          Laurent Pinchart (laurent.pinchart@ideasonboard.com)

/* -----------------------------------------------------------------------------

 * Statistics

/* -----------------------------------------------------------------------------

 * Global and stream initialization/cleanup

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      uvc_metadata.c  --  USB Video Class driver - Metadata handling

 *

 *      Copyright (C) 2016

 *          Guennadi Liakhovetski (guennadi.liakhovetski@intel.com)

/* -----------------------------------------------------------------------------

 * V4L2 ioctls

	/*

	 * We could in principle switch at any time, also during streaming.

	 * Metadata buffers would still be perfectly parseable, but it's more

	 * consistent and cleaner to disallow that.

/* -----------------------------------------------------------------------------

 * V4L2 File Operations

	/*

	 * The video interface queue uses manual locking and thus does not set

	 * the queue pointer. Set it manually here.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      uvc_entity.c  --  USB Video Class driver

 *

 *      Copyright (C) 2005-2011

 *          Laurent Pinchart (laurent.pinchart@ideasonboard.com)

 For lack of a better option. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      uvc_video.c  --  USB Video Class driver - Video handling

 *

 *      Copyright (C) 2005-2010

 *          Laurent Pinchart (laurent.pinchart@ideasonboard.com)

/* ------------------------------------------------------------------------

 * UVC Controls

 Cannot happen - we received a STALL */

 Not ready */

 Wrong state */

 Power */

 Out of range */

 Invalid unit */

 Invalid control */

 Invalid Request */

		/*

		 * The firmware has not properly implemented

		 * the control or there has been a HW error.

 Invalid value within range */

 reserved or unknown */

	/*

	 * The response of the Elgato Cam Link 4K is incorrect: The second byte

	 * contains bFormatIndex (instead of being the second byte of bmHint).

	 * The first byte is always zero. The third byte is always 1.

	 *

	 * The UVC 1.5 class specification defines the first five bits in the

	 * bmHint bitfield. The remaining bits are reserved and should be zero.

	 * Therefore a valid bmHint will be less than 32.

	 *

	 * Latest Elgato Cam Link 4K firmware as of 2021-03-23 needs this fix.

	 * MCU: 20.02.19, FPGA: 67

	/* The "TOSHIBA Web Camera - 5M" Chicony device (04f2:b50b) seems to

	 * compute the bandwidth on 16 bits and erroneously sign-extend it to

	 * 32 bits, resulting in a huge bandwidth value. Detect and fix that

	 * condition by setting the 16 MSBs to 0 when they're all equal to 1.

		/* Compute a bandwidth estimation by multiplying the frame

		 * size by the number of video frames per second, divide the

		 * result by the number of USB frames (or micro-frames for

		 * high-speed devices) per second and add the UVC header size

		 * (assumed to be 12 bytes long).

		/* The bandwidth estimate is too low for many cameras. Don't use

		 * maximum packet sizes lower than 1024 bytes to try and work

		 * around the problem. According to measurements done on two

		 * different camera models, the value is high enough to get most

		 * resolutions working while not preventing two simultaneous

		 * VGA streams at 15 fps.

	/*

	 * Return the size of the video probe and commit controls, which depends

	 * on the protocol version.

		/* Some cameras, mostly based on Bison Electronics chipsets,

		 * answer a GET_MIN or GET_MAX request with the wCompQuality

		 * field only.

		/* Many cameras don't support the GET_DEF request on their

		 * video probe control. Warn once and return, the caller will

		 * fall back to GET_CUR.

	/* Some broken devices return null or wrong dwMaxVideoFrameSize and

	 * dwMaxPayloadTransferSize fields. Try to get the value from the

	 * format and frame descriptors.

	/* Perform probing. The device should adjust the requested values

	 * according to its capabilities. However, some devices, namely the

	 * first generation UVC Logitech webcams, don't implement the Video

	 * Probe control properly, and just return the needed bandwidth. For

	 * that reason, if the needed bandwidth exceeds the maximum available

	 * bandwidth, try to lower the quality.

 Get the minimum and maximum values for compression settings. */

 TODO: negotiate compression parameters */

/* -----------------------------------------------------------------------------

 * Clocks and timestamps

 Check for invalid headers. */

	/* Extract the timestamps:

	 *

	 * - store the frame PTS in the buffer structure

	 * - if the SCR field is present, retrieve the host SOF counter and

	 *   kernel timestamps and store them with the SCR STC and SOF fields

	 *   in the ring buffer

	/* To limit the amount of data, drop SCRs with an SOF identical to the

	 * previous one.

	/* The UVC specification allows device implementations that can't obtain

	 * the USB frame number to keep their own frame counters as long as they

	 * match the size and frequency of the frame number associated with USB

	 * SOF tokens. The SOF values sent by such devices differ from the USB

	 * SOF tokens by a fixed offset that needs to be estimated and accounted

	 * for to make timestamp recovery as accurate as possible.

	 *

	 * The offset is estimated the first time a device SOF value is received

	 * as the difference between the host and device SOF values. As the two

	 * SOF values can differ slightly due to transmission delays, consider

	 * that the offset is null if the difference is not higher than 10 ms

	 * (negative differences can not happen and are thus considered as an

	 * offset). The video commit control wDelay field should be used to

	 * compute a dynamic threshold instead of using a fixed 10 ms value, but

	 * devices don't report reliable wDelay values.

	 *

	 * See uvc_video_clock_host_sof() for an explanation regarding why only

	 * the 8 LSBs of the delta are kept.

 Update the sliding window head and count. */

/*

 * uvc_video_clock_host_sof - Return the host SOF value for a clock sample

 *

 * Host SOF counters reported by usb_get_current_frame_number() usually don't

 * cover the whole 11-bits SOF range (0-2047) but are limited to the HCI frame

 * schedule window. They can be limited to 8, 9 or 10 bits depending on the host

 * controller and its configuration.

 *

 * We thus need to recover the SOF value corresponding to the host frame number.

 * As the device and host frame numbers are sampled in a short interval, the

 * difference between their values should be equal to a small delta plus an

 * integer multiple of 256 caused by the host frame number limited precision.

 *

 * To obtain the recovered host SOF value, compute the small delta by masking

 * the high bits of the host frame counter and device SOF difference and add it

 * to the device SOF value.

 The delta value can be negative. */

/*

 * uvc_video_clock_update - Update the buffer timestamp

 *

 * This function converts the buffer PTS timestamp to the host clock domain by

 * going through the USB SOF clock domain and stores the result in the V4L2

 * buffer timestamp field.

 *

 * The relationship between the device clock and the host clock isn't known.

 * However, the device and the host share the common USB SOF clock which can be

 * used to recover that relationship.

 *

 * The relationship between the device clock and the USB SOF clock is considered

 * to be linear over the clock samples sliding window and is given by

 *

 * SOF = m * PTS + p

 *

 * Several methods to compute the slope (m) and intercept (p) can be used. As

 * the clock drift should be small compared to the sliding window size, we

 * assume that the line that goes through the points at both ends of the window

 * is a good approximation. Naming those points P1 and P2, we get

 *

 * SOF = (SOF2 - SOF1) / (STC2 - STC1) * PTS

 *     + (SOF1 * STC2 - SOF2 * STC1) / (STC2 - STC1)

 *

 * or

 *

 * SOF = ((SOF2 - SOF1) * PTS + SOF1 * STC2 - SOF2 * STC1) / (STC2 - STC1)   (1)

 *

 * to avoid losing precision in the division. Similarly, the host timestamp is

 * computed with

 *

 * TS = ((TS2 - TS1) * SOF + TS1 * SOF2 - TS2 * SOF1) / (SOF2 - SOF1)	     (2)

 *

 * SOF values are coded on 11 bits by USB. We extend their precision with 16

 * decimal bits, leading to a 11.16 coding.

 *

 * TODO: To avoid surprises with device clock values, PTS/STC timestamps should

 * be normalized using the nominal device clock frequency reported through the

 * UVC descriptors.

 *

 * Both the PTS/STC and SOF counters roll over, after a fixed but device

 * specific amount of time for PTS/STC and after 2048ms for SOF. As long as the

 * sliding window size is smaller than the rollover period, differences computed

 * on unsigned integers will produce the correct result. However, the p term in

 * the linear relations will be miscomputed.

 *

 * To fix the issue, we subtract a constant from the PTS and STC values to bring

 * PTS to half the 32 bit STC range. The sliding window STC values then fit into

 * the 32 bit range without any rollover.

 *

 * Similarly, we add 2048 to the device SOF values to make sure that the SOF

 * computed by (1) will never be smaller than 0. This offset is then compensated

 * by adding 2048 to the SOF values used in (2). However, this doesn't prevent

 * rollovers between (1) and (2): the SOF value computed by (1) can be slightly

 * lower than 4096, and the host SOF counters can have rolled over to 2048. This

 * case is handled by subtracting 2048 from the SOF value if it exceeds the host

 * SOF value at the end of the sliding window.

 *

 * Finally we subtract a constant from the host timestamps to bring the first

 * timestamp of the sliding window to 1s.

	/*

	 * We will get called from __vb2_queue_cancel() if there are buffers

	 * done but not dequeued by the user, but the sample array has already

	 * been released at that time. Just bail out in that case.

 First step, PTS to SOF conversion. */

 Second step, SOF to host clock conversion. */

	/* Interpolated and host SOF timestamps can wrap around at slightly

	 * different times. Handle this by adding or removing 2048 to or from

	 * the computed SOF value to keep it close to the SOF samples mean

	 * value.

 Update the V4L2 buffer. */

/* ------------------------------------------------------------------------

 * Stream statistics

 Check for invalid headers. */

 Extract the timestamps. */

 Is PTS constant through the whole frame ? */

	/* Do all frames have a PTS in their first non-empty packet, or before

	 * their first empty packet ?

 Do the SCR.STC and SCR.SOF fields vary through the frame ? */

 Expand the SOF counter to 32 bits and store its value. */

 Record the first non-empty packet number. */

 Update the frame size. */

 Update the packets counters. */

	/* Compute the SCR.SOF frequency estimate. At the nominal 1kHz SOF

	 * frequency this will not overflow before more than 1h.

/* ------------------------------------------------------------------------

 * Video codecs

/* Video payload decoding is handled by uvc_video_decode_start(),

 * uvc_video_decode_data() and uvc_video_decode_end().

 *

 * uvc_video_decode_start is called with URB data at the start of a bulk or

 * isochronous payload. It processes header data and returns the header size

 * in bytes if successful. If an error occurs, it returns a negative error

 * code. The following error codes have special meanings.

 *

 * - EAGAIN informs the caller that the current video buffer should be marked

 *   as done, and that the function should be called again with the same data

 *   and a new video buffer. This is used when end of frame conditions can be

 *   reliably detected at the beginning of the next frame only.

 *

 * If an error other than -EAGAIN is returned, the caller will drop the current

 * payload. No call to uvc_video_decode_data and uvc_video_decode_end will be

 * made until the next payload. -ENODATA can be used to drop the current

 * payload if no other error code is appropriate.

 *

 * uvc_video_decode_data is called for every URB with URB data. It copies the

 * data to the video buffer.

 *

 * uvc_video_decode_end is called with header data at the end of a bulk or

 * isochronous payload. It performs any additional header data processing and

 * returns 0 or a negative error code if an error occurred. As header data have

 * already been processed by uvc_video_decode_start, this functions isn't

 * required to perform sanity checks a second time.

 *

 * For isochronous transfers where a payload is always transferred in a single

 * URB, the three functions will be called in a row.

 *

 * To let the decoder process header data and update its internal state even

 * when no video buffer is available, uvc_video_decode_start must be prepared

 * to be called with a NULL buf parameter. uvc_video_decode_data and

 * uvc_video_decode_end will never be called with a NULL buffer.

	/* Sanity checks:

	 * - packet must be at least 2 bytes long

	 * - bHeaderLength value must be at least 2 bytes (see above)

	 * - bHeaderLength value can't be larger than the packet size.

	/* Increase the sequence number regardless of any buffer states, so

	 * that discontinuous sequence numbers always indicate lost frames.

	/* Store the payload FID bit and return immediately when the buffer is

	 * NULL.

 Mark the buffer as bad if the error bit is set. */

	/* Synchronize to the input stream by waiting for the FID bit to be

	 * toggled when the the buffer state is not UVC_BUF_STATE_ACTIVE.

	 * stream->last_fid is initialized to -1, so the first isochronous

	 * frame will always be in sync.

	 *

	 * If the device doesn't toggle the FID bit, invert stream->last_fid

	 * when the EOF bit is set to force synchronisation on the next packet.

 TODO: Handle PTS and SCR. */

	/* Mark the buffer as done if we're at the beginning of a new frame.

	 * End of frame detection is better implemented by checking the EOF

	 * bit (FID bit toggling is delayed by one frame compared to the EOF

	 * bit), but some devices don't set the bit at end of frame (and the

	 * last payload can be lost anyway). We thus must check if the FID has

	 * been toggled.

	 *

	 * stream->last_fid is initialized to -1, so the first isochronous

	 * frame will never trigger an end of frame detection.

	 *

	 * Empty buffers (bytesused == 0) don't trigger end of frame detection

	 * as it doesn't make sense to return an empty buffer. This also

	 * avoids detecting end of frame conditions at FID toggling if the

	 * previous payload had the EOF bit set.

 Sync DMA. */

/*

 * uvc_video_decode_data_work: Asynchronous memcpy processing

 *

 * Copy URB data to video buffers in process context, releasing buffer

 * references and requeuing the URB when done.

 Release reference taken on this buffer. */

 Take a buffer reference for async work. */

 Complete the current frame if the buffer size was exceeded. */

 Mark the buffer as done if the EOF marker is set. */

/* Video payload encoding is handled by uvc_video_encode_header() and

 * uvc_video_encode_data(). Only bulk transfers are currently supported.

 *

 * uvc_video_encode_header is called at the start of a payload. It adds header

 * data to the transfer buffer and returns the header size. As the only known

 * UVC output device transfers a whole frame in a single payload, the EOF bit

 * is always set in the header.

 *

 * uvc_video_encode_data is called for every URB and copies the data from the

 * video buffer to the transfer buffer.

 Header length */

 Copy video data to the URB buffer. */

/* ------------------------------------------------------------------------

 * Metadata

/*

 * Additionally to the payload headers we also want to provide the user with USB

 * Frame Numbers and system time values. The resulting buffer is thus composed

 * of blocks, containing a 64-bit timestamp in  nanoseconds, a 16-bit USB Frame

 * Number, and a copy of the payload header.

 *

 * Ideally we want to capture all payload headers for each frame. However, their

 * number is unknown and unbound. We thus drop headers that contain no vendor

 * data and that either contain no SCR value or an SCR value identical to the

 * previous header.

/* ------------------------------------------------------------------------

 * URB handling

/*

 * Set error flag for incomplete buffer.

/*

 * Completion handler for video URBs.

 Mark the buffer as faulty. */

 Decode the payload header. */

 Decode the payload data. */

 Process the header again. */

	/*

	 * Ignore ZLPs if they're not part of a frame, otherwise process them

	 * to trigger the end of payload detection.

	/* If the URB is the first of its payload, decode and save the

	 * header.

 If an error occurred skip the rest of the payload. */

	/* The buffer queue might have been cancelled while a bulk transfer

	 * was in progress, so we can reach here with buf equal to NULL. Make

	 * sure buf is never dereferenced if NULL.

 Prepare video data for processing. */

	/* Detect the payload end by a URB smaller than the maximum size (or

	 * a payload size equal to the maximum) and process the header again.

 If the URB is the first of its payload, add the header. */

 Process video data. */

 usb_poison_urb() called. */

 usb_unlink_urb() called. */

 The endpoint is being disabled. */

 Re-initialise the URB async work. */

 Sync DMA and invalidate vmap range. */

	/*

	 * Process the URB headers, and optionally queue expensive memcpy tasks

	 * to be deferred to a work queue.

 If no async work is needed, resubmit the URB immediately. */

/*

 * Free transfer buffers.

/*

 * Allocate transfer buffers. This function can be called with buffers

 * already allocated when resuming from suspend, in which case it will

 * return without touching the buffers.

 *

 * Limit the buffer size to UVC_MAX_PACKETS bulk/isochronous packets. If the

 * system is too low on memory try successively smaller numbers of packets

 * until allocation succeeds.

 *

 * Return the number of allocated packets on success or 0 when out of memory.

 Buffers are already allocated, bail out. */

	/* Compute the number of packets. Bulk endpoints might transfer UVC

	 * payloads across multiple URBs.

 Retry allocations until one succeed. */

/*

 * Uninitialize isochronous/bulk URBs and free transfer buffers.

	/*

	 * We must poison the URBs rather than kill them to ensure that even

	 * after the completion handler returns, any asynchronous workqueues

	 * will be prevented from resubmitting the URBs.

/*

 * Compute the maximum number of bytes per interval for an endpoint.

/*

 * Initialize isochronous URBs and allocate transfer buffers. The packet size

 * is given by the endpoint.

/*

 * Initialize bulk URBs and allocate transfer buffers. The packet size is

 * given by the endpoint.

/*

 * Initialize isochronous/bulk URBs and allocate transfer buffers.

 Isochronous endpoint, select the alternate setting. */

 Check if the bandwidth is high enough. */

 Bulk endpoint, proceed to URB initialization. */

 Submit the URBs. */

	/* The Logitech C920 temporarily forgets that it should not be adjusting

	 * Exposure Absolute during init so restore controls to stored values.

/* --------------------------------------------------------------------------

 * Suspend/resume

/*

 * Stop streaming without disabling the video queue.

 *

 * To let userspace applications resume without trouble, we must not touch the

 * video buffers in any way. We mark the device as frozen to make sure the URB

 * completion handler won't try to cancel the queue when we kill the URBs.

/*

 * Reconfigure the video interface and restart streaming if it was enabled

 * before suspend.

 *

 * If an error occurs, disable the video queue. This will wake all pending

 * buffers, making sure userspace applications are notified of the problem

 * instead of waiting forever.

	/* If the bus has been reset on resume, set the alternate setting to 0.

	 * This should be the default value, but some devices crash or otherwise

	 * misbehave if they don't receive a SET_INTERFACE request before any

	 * other video control request.

/* ------------------------------------------------------------------------

 * Video device

/*

 * Initialize the UVC video device by switching to alternate setting 0 and

 * retrieve the default format.

 *

 * Some cameras (namely the Fuji Finepix) set the format and frame

 * indexes to zero. The UVC standard doesn't clearly make this a spec

 * violation, so try to silently fix the values if possible.

 *

 * This function is called before registering the device with V4L.

	/* Alternate setting 0 should be the default, yet the XBox Live Vision

	 * Cam (and possibly other devices) crash or otherwise misbehave if

	 * they don't receive a SET_INTERFACE request before any other video

	 * control request.

	/* Set the streaming probe control with default streaming parameters

	 * retrieved from the device. Webcams that don't support GET_DEF

	 * requests on the probe control will just keep their current streaming

	 * parameters.

	/* Initialize the streaming parameters with the probe control current

	 * value. This makes sure SET_CUR requests on the streaming commit

	 * control will always use values retrieved from a successful GET_CUR

	 * request on the probe control, as required by the UVC specification.

	/* Check if the default format descriptor exists. Use the first

	 * available format otherwise.

	/* Zero bFrameIndex might be correct. Stream-based formats (including

	 * MPEG-2 TS and DV) do not support frames but have a dummy frame

	 * descriptor with bFrameIndex set to zero. If the default frame

	 * descriptor is not found, use the first available frame.

 Select the video decoding function */

 Prepare asynchronous work items. */

 Commit the streaming parameters. */

		/* UVC doesn't specify how to inform a bulk-based device

		 * when the video stream is stopped. Windows sends a

		 * CLEAR_FEATURE(HALT) request to the video streaming

		 * bulk endpoint, mimic the same behaviour.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      uvc_ctrl.c  --  USB Video Class driver - Controls

 *

 *      Copyright (C) 2005-2010

 *          Laurent Pinchart (laurent.pinchart@ideasonboard.com)

/* ------------------------------------------------------------------------

 * Controls

/* ------------------------------------------------------------------------

 * Utility functions

/* Extract the bit string specified by mapping->offset and mapping->size

 * from the little-endian data stored at 'data' and return the result as

 * a signed 32bit integer. Sign extension will be performed if the mapping

 * references a signed data type.

 Sign-extend the value if needed. */

/* Set the bit string specified by mapping->offset and mapping->size

 * in the little-endian data stored at 'data' to the value 'value'.

	/* According to the v4l2 spec, writing any value to a button control

	 * should result in the action belonging to the button control being

	 * triggered. UVC devices however want to see a 1 written -> override

	 * value.

/* ------------------------------------------------------------------------

 * Terminal and unit management

/* ------------------------------------------------------------------------

 * UVC Controls

 Mask the query flags. */

 Find the control. */

			/* GET_RES is mandatory for XU controls, but some

			 * cameras still choke on it. Ignore errors and set the

			 * resolution value to zero.

 Check if the ctrl is a know class */

	/*

	 * If we're enumerating control with V4L2_CTRL_FLAG_NEXT_CTRL, check if

	 * a class should be inserted between the previous control and the one

	 * we have just found.

/*

 * Mapping V4L2 controls to UVC controls can be straightforward if done well.

 * Most of the UVC controls exist in V4L2, and can be mapped directly. Some

 * must be grouped (for instance the Red Balance, Blue Balance and Do White

 * Balance V4L2 controls use the White Balance Component UVC control) or

 * otherwise translated. The approach we take here is to use a translation

 * table for the controls that can be mapped directly, and handle the others

 * manually.

/* --------------------------------------------------------------------------

 * Ctrl event handling

/*

 * Send control change events to all subscribers for the @ctrl control. By

 * default the subscriber that generated the event, as identified by @handle,

 * is not notified unless it has set the V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK flag.

 * @handle can be NULL for asynchronous events related to auto-update controls,

 * in which case all subscribers are notified.

/*

 * Send control change events for the slave of the @master control identified

 * by the V4L2 ID @slave_id. The @handle identifies the event subscriber that

 * generated the event and may be NULL for auto-update events.

		/*

		 * handle may be NULL here if the device sends auto-update

		 * events without a prior related control set from userspace.

 Resubmit the URB. */

 Notification will be sent from an Interrupt event. */

			/*

			 * We can skip sending an event for the slave if the

			 * slave is being modified in the same transaction.

		/*

		 * If the master is being modified in the same transaction

		 * flags may change too.

		/* Mark the queue as active, allowing this initial

/* --------------------------------------------------------------------------

 * Control transactions

 *

 * To make extended set operations as atomic as the hardware allows, controls

 * are handled using begin/commit/rollback operations.

 *

 * At the beginning of a set request, uvc_ctrl_begin should be called to

 * initialize the request. This function acquires the control lock.

 *

 * When setting a control, the new value is stored in the control data field

 * at position UVC_CTRL_DATA_CURRENT. The control is then marked as dirty for

 * later processing. If the UVC and V4L2 control sizes differ, the current

 * value is loaded from the hardware before storing the new value in the data

 * field.

 *

 * After processing all controls in the transaction, uvc_ctrl_commit or

 * uvc_ctrl_rollback must be called to apply the pending changes to the

 * hardware or revert them. When applying changes, all controls marked as

 * dirty will be modified in the UVC device, and the dirty flag will be

 * cleared. When reverting controls, the control data field

 * UVC_CTRL_DATA_CURRENT is reverted to its previous value

 * (UVC_CTRL_DATA_BACKUP) for all dirty controls. Both functions release the

 * control lock.

		/* Reset the loaded flag for auto-update controls that were

		 * marked as loaded in uvc_ctrl_get/uvc_ctrl_set to prevent

		 * uvc_ctrl_get from using the cached value, and for write-only

		 * controls to prevent uvc_ctrl_set from setting bits not

		 * explicitly set by the user.

 Find the control. */

 Clamp out of range values. */

		/* Valid menu indices are reported by the GET_RES request for

		 * UVC controls that support it.

	/* If the mapping doesn't span the whole UVC control, the current value

	 * needs to be loaded from the device to perform the read-modify-write

	 * operation.

 Backup the current value in case we need to rollback later. */

/* --------------------------------------------------------------------------

 * Dynamic controls

/*

 * Retrieve flags for a given control

/*

 * Query control information (size and flags) for XU controls.

 Query and verify the control length (GET_LEN) */

 Find the extension unit. */

 Find the control and perform delayed initialization if needed. */

 Validate the required buffer size and flags for the request */

/* --------------------------------------------------------------------------

 * Suspend/resume

/*

 * Restore control values after resume, skipping controls that haven't been

 * changed.

 *

 * TODO

 * - Don't restore modified controls that are back to their default value.

 * - Handle restore order (Auto-Exposure Mode should be restored before

 *   Exposure Time).

 Walk the entities list and restore controls when possible. */

/* --------------------------------------------------------------------------

 * Control and mapping handling

/*

 * Add control information to a given control.

 Allocate an array to save control values (cur, def, max, etc.) */

/*

 * Add a control mapping to a given control.

	/* Most mappings come from static kernel data and need to be duplicated.

	 * Mappings that come from userspace will be unnecessarily duplicated,

	 * this could be optimized.

 Search for the matching (GUID/CS) control on the current chain */

 Perform delayed initialization of XU controls */

 Validate the user-provided bit-size and offset */

 Prevent excess memory consumption */

/*

 * Prune an entity of its bogus controls using a blacklist. Bogus controls

 * are currently the ones that crash the camera or unconditionally return an

 * error when queried.

 Gain */

 WB Temperature */

 Hue */

 Zoom, Absolute */

/*

 * Add control information and hardcoded stock control mappings to the given

 * device.

	/* XU controls initialization requires querying the device for control

	 * information. As some buggy UVC devices will crash when queried

	 * repeatedly in a tight loop, delay XU controls initialization until

	 * first use.

			/*

			 * Retrieve control flags from the device. Ignore errors

			 * and work with default flag values from the uvc_ctrl

			 * array when the device doesn't properly implement

			 * GET_INFO on standard controls.

/*

 * Initialize device controls.

 Walk the entities list and instantiate controls */

 Remove bogus/blacklisted controls */

 Count supported controls and allocate the controls array */

 Initialize all supported controls */

/*

 * Cleanup device controls.

 Can be uninitialized if we are aborting on probe error. */

 Free controls and control mappings for all entities. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      uvc_queue.c  --  USB Video Class driver - Buffers management

 *

 *      Copyright (C) 2005-2010

 *          Laurent Pinchart (laurent.pinchart@ideasonboard.com)

/* ------------------------------------------------------------------------

 * Video buffers queue management.

 *

 * Video queues is initialized by uvc_queue_init(). The function performs

 * basic initialization of the uvc_video_queue struct and never fails.

 *

 * Video buffers are managed by videobuf2. The driver uses a mutex to protect

 * the videobuf2 queue operations by serializing calls to videobuf2 and a

 * spinlock to protect the IRQ queue that holds the buffers to be processed by

 * the driver.

/*

 * Return all queued buffers to videobuf2 in the requested state.

 *

 * This function must be called with the queue spinlock held.

/* -----------------------------------------------------------------------------

 * videobuf2 queue operations

	/*

	 * When called with plane sizes, validate them. The driver supports

	 * single planar formats only, and requires buffers to be large enough

	 * to store a complete frame.

		/* If the device is disconnected return the buffer to userspace

		 * directly. The next QBUF call will fail with -ENODEV.

/* -----------------------------------------------------------------------------

 * V4L2 queue operations

/* -----------------------------------------------------------------------------

 *

/*

 * Check if buffers have been allocated.

/*

 * Cancel the video buffers queue.

 *

 * Cancelling the queue marks all buffers on the irq queue as erroneous,

 * wakes them up and removes them from the queue.

 *

 * If the disconnect parameter is set, further calls to uvc_queue_buffer will

 * fail with -ENODEV.

 *

 * This function acquires the irq spinlock and can be called from interrupt

 * context.

	/* This must be protected by the irqlock spinlock to avoid race

	 * conditions between uvc_buffer_queue and the disconnection event that

	 * could result in an interruptible wait in uvc_dequeue_buffer. Do not

	 * blindly replace this logic by checking for the UVC_QUEUE_DISCONNECTED

	 * state outside the queue code.

/*

 * uvc_queue_get_current_buffer: Obtain the current working output buffer

 *

 * Buffers may span multiple packets, and even URBs, therefore the active buffer

 * remains on the queue until the EOF marker.

/*

 * uvc_queue_buffer_requeue: Requeue a buffer on our internal irqqueue

 *

 * Reuse a buffer through our internal queue without the need to 'prepare'.

 * The buffer will be returned to userspace through the uvc_buffer_queue call if

 * the device has been disconnected.

/*

 * Release a reference on the buffer. Complete the buffer when the last

 * reference is released.

/*

 * Remove this buffer from the queue. Lifetime will persist while async actions

 * are still running (if any), and uvc_queue_buffer_release will give the buffer

 * back to VB2 when all users have completed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      uvc_driver.c  --  USB Video Class driver

 *

 *      Copyright (C) 2005-2010

 *          Laurent Pinchart (laurent.pinchart@ideasonboard.com)

/* ------------------------------------------------------------------------

 * Video formats

/* ------------------------------------------------------------------------

 * Utility functions

 Unspecified */

 Reserved */

	/*

	 * V4L2 does not currently have definitions for all possible values of

	 * UVC transfer characteristics. If v4l2_xfer_func is extended with new

	 * values, the mapping below should be updated.

	 *

	 * Substitutions are taken from the mapping given for

	 * V4L2_XFER_FUNC_DEFAULT documented in videodev2.h.

 Unspecified */

 Substitution for BT.470-2 M */

 Substitution for BT.470-2 B, G */

 Substitution for SMPTE 170M */

 Reserved */

	/*

	 * V4L2 does not currently have definitions for all possible values of

	 * UVC matrix coefficients. If v4l2_ycbcr_encoding is extended with new

	 * values, the mapping below should be updated.

	 *

	 * Substitutions are taken from the mapping given for

	 * V4L2_YCBCR_ENC_DEFAULT documented in videodev2.h.

	 *

	 * FCC is assumed to be close enough to 601.

 Unspecified */

 Substitution for FCC */

 Substitution for BT.470-2 B, G */

 Reserved */

/* Simplify a fraction using a simple continued fraction decomposition. The

 * idea here is to convert fractions such as 333333/10000000 to 1/30 using

 * 32 bit arithmetic only. The algorithm is not perfect and relies upon two

 * arbitrary parameters to remove non-significative terms from the simple

 * continued fraction decomposition. Using 8 and 333 for n_terms and threshold

 * respectively seems to give nice results.

	/* Convert the fraction to a simple continued fraction. See

	 * https://mathforum.org/dr.math/faq/faq.fractions.html

	 * Stop if the current term is bigger than or equal to the given

	 * threshold.

 Expand the simple continued fraction back to an integer fraction. */

/* Convert a fraction to a frame interval in 100ns multiples. The idea here is

 * to compute numerator / denominator * 10000000 using 32 bit fixed point

 * arithmetic only.

 Saturate the result if the operation would overflow. */

	/* Divide both the denominator and the multiplier by two until

	 * numerator * multiplier doesn't overflow. If anyone knows a better

	 * algorithm please let me know.

/* ------------------------------------------------------------------------

 * Terminal and unit management

/* ------------------------------------------------------------------------

 * Streaming Object Management

 Allocate a stream specific work queue for asynchronous tasks. */

/* ------------------------------------------------------------------------

 * Descriptors parsing

 Find the format descriptor from its GUID. */

		/* Some devices report a format that doesn't match what they

		 * really send.

 Some devices report bpp that doesn't match the format. */

 Create a dummy frame descriptor. */

 Not supported yet. */

	/* Parse the frame descriptors. Only uncompressed, MJPEG and frame

	 * based formats have frame descriptors.

		/* Several UVC chipsets screw up dwMaxVideoFrameBufferSize

		 * completely. Observed behaviours range from setting the

		 * value to 1.1x the actual frame size to hardwiring the

		 * 16 low bits to 0. This results in a higher than necessary

		 * memory usage as well as a wrong image size information. For

		 * uncompressed formats this can be fixed by computing the

		 * value from the frame size.

		/* Some bogus devices report dwMinFrameInterval equal to

		 * dwMaxFrameInterval and have dwFrameIntervalStep set to

		 * zero. Setting all null intervals to 1 fixes the problem and

		 * some other divisions by zero that could happen.

		/* Make sure that the default frame interval stays between

		 * the boundaries.

	/* The Pico iMage webcam has its class-specific interface descriptors

	 * after the endpoint descriptors.

 Skip the standard interface descriptors. */

 Parse the header descriptor. */

 Count the format and frame descriptors. */

			/* DV format has no frame descriptor. We will create a

			 * dummy frame descriptor with a dummy frame interval.

 Parse the format descriptors. */

 Parse the alternate settings to find the maximum bandwidth. */

	/*

	 * Set the GUID for standard entity types. For extension units, the GUID

	 * is initialized by the caller.

 Parse vendor-specific extensions. */

 Logitech */

		/* Logitech implements several vendor specific functions

		 * through vendor specific extension units (LXU).

		 *

		 * The LXU descriptors are similar to XU descriptors

		 * (see "USB Device Video Class for Video Devices", section

		 * 3.7.2.6 "Extension Unit Descriptor") with the following

		 * differences:

		 *

		 * ----------------------------------------------------------

		 * 0		bLength		1	 Number

		 *	Size of this descriptor, in bytes: 24+p+n*2

		 * ----------------------------------------------------------

		 * 23+p+n	bmControlsType	N	Bitmap

		 *	Individual bits in the set are defined:

		 *	0: Absolute

		 *	1: Relative

		 *

		 *	This bitset is mapped exactly the same as bmControls.

		 * ----------------------------------------------------------

		 * 23+p+n*2	bReserved	1	Boolean

		 * ----------------------------------------------------------

		 * 24+p+n*2	iExtension	1	Index

		 *	Index of a string descriptor that describes this

		 *	extension unit.

		 * ----------------------------------------------------------

 Parse all USB Video Streaming interfaces. */

		/*

		 * Reject invalid terminal types that would cause issues:

		 *

		 * - The high byte must be non-zero, otherwise it would be

		 *   confused with a unit.

		 *

		 * - Bit 15 must be 0, as we use it internally as a terminal

		 *   direction flag.

		 *

		 * Other unknown types are accepted.

		/* Make sure the terminal type MSB is not null, otherwise it

		 * could be confused with a unit.

	/* Parse the default alternate setting only, as the UVC specification

	 * defines a single alternate setting, the default alternate setting

	 * zero.

	/* Check if the optional status endpoint is present. Built-in iSight

	 * webcams have an interrupt endpoint but spit proprietary data that

	 * don't conform to the UVC status endpoint messages. Don't try to

	 * handle the interrupt endpoint for those cameras.

/* -----------------------------------------------------------------------------

 * Privacy GPIO

 GPIO entities are always on the first chain. */

/* ------------------------------------------------------------------------

 * UVC device scan

/*

 * Scan the UVC descriptors to locate a chain starting at an Output Terminal

 * and containing the following units:

 *

 * - one or more Output Terminals (USB Streaming or Display)

 * - zero or one Processing Unit

 * - zero, one or more single-input Selector Units

 * - zero or one multiple-input Selector Units, provided all inputs are

 *   connected to input terminals

 * - zero, one or mode single-input Extension Units

 * - one or more Input Terminals (Camera, External or USB Streaming)

 *

 * The terminal and units must match on of the following structures:

 *

 * ITT_*(0) -> +---------+    +---------+    +---------+ -> TT_STREAMING(0)

 * ...         | SU{0,1} | -> | PU{0,1} | -> | XU{0,n} |    ...

 * ITT_*(n) -> +---------+    +---------+    +---------+ -> TT_STREAMING(n)

 *

 *                 +---------+    +---------+ -> OTT_*(0)

 * TT_STREAMING -> | PU{0,1} | -> | XU{0,n} |    ...

 *                 +---------+    +---------+ -> OTT_*(n)

 *

 * The Processing Unit and Extension Units can be in any order. Additional

 * Extension Units connected to the main chain as single-unit branches are

 * also supported. Single-input Selector Units are ignored.

 Single-input selector units are ignored. */

 Forward scan */

			/*

			 * Some devices reference an output terminal as the

			 * source of extension units. This is incorrect, as

			 * output terminals only have an input pin, and thus

			 * can't be connected to any entity in the forward

			 * direction. The resulting topology would cause issues

			 * when registering the media controller graph. To

			 * avoid this problem, connect the extension unit to

			 * the source of the output terminal instead.

 Single-input selector units are ignored. */

 Entity must not be part of an existing chain */

 Process entity */

 Forward scan */

 Backward scan */

/*

 * Fallback heuristic for devices that don't connect units and terminals in a

 * valid chain.

 *

 * Some devices have invalid baSourceID references, causing uvc_scan_chain()

 * to fail, but if we just take the entities we can find and put them together

 * in the most sensible chain we can think of, turns out they do work anyway.

 * Note: This heuristic assumes there is a single chain.

 *

 * At the time of writing, devices known to have such a broken chain are

 *  - Acer Integrated Camera (5986:055a)

 *  - Realtek rtl157a7 (0bda:57a7)

	/*

	 * Start by locating the input and output terminals. We only support

	 * devices with exactly one of each for now.

 Allocate the chain and fill it. */

	/*

	 * Add all Processing and Extension Units with two pads. The order

	 * doesn't matter much, use reverse list traversal to connect units in

	 * UVC descriptor order as we build the chain from output to input. This

	 * leads to units appearing in the order meant by the manufacturer for

	 * the cameras known to require this heuristic.

/*

 * Scan the device for video chains and register video devices.

 *

 * Chains are scanned starting at their output terminals and walked backwards.

		/* If the terminal is already included in a chain, skip it.

		 * This can happen for chains that have multiple output

		 * terminals, where all output terminals beside the first one

		 * will be inserted in the chain in forward scans.

 Add GPIO entity to the first chain. */

/* ------------------------------------------------------------------------

 * Video device registration and unregistration

/*

 * Delete the UVC device.

 *

 * Called by the kernel when the last reference to the uvc_device structure

 * is released.

 *

 * As this function is called after or during disconnect(), all URBs have

 * already been cancelled by the USB core. There is no need to kill the

 * interrupt URB manually.

/*

 * Unregister the video devices.

 Initialize the video buffers queue. */

 Register the device with V4L. */

	/*

	 * We already hold a reference to dev->udev. The video device will be

	 * unregistered before the reference is released, so we don't need to

	 * get another one.

	/*

	 * Set the driver data before calling video_register_device, otherwise

	 * the file open() handler might race us.

 Initialize the streaming interface with default parameters. */

 Register the device with V4L. */

/*

 * Register all video devices in all chains.

		/* Register a metadata node, but ignore a possible failure,

		 * complete registration of video nodes anyway.

/* ------------------------------------------------------------------------

 * USB probe, disconnect, suspend and resume

 Allocate memory for the device and initialize it. */

	/*

	 * Add iFunction or iInterface to names when available as additional

	 * distinguishers between interfaces. iFunction is prioritized over

	 * iInterface which matches Windows behavior at the point of writing.

 Initialize the media device. */

 Parse the Video Class control descriptor. */

 Parse the associated GPIOs. */

 Register the V4L2 device. */

 Scan the device for video chains. */

 Initialize controls. */

 Register video device nodes. */

 Register the media device node */

 Save our data pointer in the interface data. */

 Initialize the interrupt URB. */

	/* Set the USB interface data to NULL. This can be done outside the

	 * lock, as there's no other reader.

 Controls are cached on the fly so they don't need to be saved. */

/* ------------------------------------------------------------------------

 * Module parameters

/* ------------------------------------------------------------------------

 * Driver initialization and cleanup

/*

 * The Logitech cameras listed below have their interface class set to

 * VENDOR_SPEC because they don't announce themselves as UVC devices, even

 * though they are compliant.

 LogiLink Wireless Webcam */

 Genius eFace 2025 */

 Microsoft Lifecam NX-6000 */

 Microsoft Lifecam NX-3000 */

 Microsoft Lifecam VX-7000 */

 Logitech Quickcam Fusion */

 Logitech Quickcam Orbit MP */

 Logitech Quickcam Pro for Notebook */

 Logitech Quickcam Pro 5000 */

 Logitech Quickcam OEM Dell Notebook */

 Logitech Quickcam OEM Cisco VT Camera II */

 Logitech HD Pro Webcam C920 */

 Chicony CNF7129 (Asus EEE 100HE) */

 Alcor Micro AU3820 (Future Boy PC USB Webcam) */

 Dell XPS m1530 */

 Dell SP2008WFP Monitor */

 Dell Alienware X51 */

 Dell Studio Hybrid 140g (OmniVision webcam) */

 Dell XPS M1330 (OmniVision OV7670 webcam) */

 Apple Built-In iSight */

 Apple Built-In iSight via iBridge */

 Foxlink ("HP Webcam" on HP Mini 5103) */

 Genesys Logic USB 2.0 PC Camera */

 Hercules Classic Silver */

 ViMicro Vega */

 ViMicro - Minoru3D */

 ViMicro Venus - Minoru3D */

 Ophir Optronics - SPCAM 620U */

 MT6227 */

 IMC Networks (Medion Akoya) */

 JMicron USB2.0 XGA WebCam */

 Syntek (HP Spartan) */

 Syntek (Samsung Q310) */

 Syntek (Packard Bell EasyNote MX52 */

 Syntek (Asus F9SG) */

 Syntek (Asus U3S) */

 Syntek (JAOtech Smart Terminal) */

 Miricle 307K */

 Lenovo Thinkpad SL400/SL500 */

 Aveo Technology USB 2.0 Camera */

 Aveo Technology USB 2.0 Camera (Tasco USB Microscope) */

 Ecamm Pico iMage */

 Manta MM-353 Plako */

 FSC WebCam V30S */

 Arkmicro unbranded */

 The Imaging Source USB CCD cameras */

 Bodelin ProScopeHR */

 MSI StarCam 370i */

 Generalplus Technology Inc. 808 Camera */

 Shenzhen Aoni Electronic Co.,Ltd 2K FHD camera */

 SiGma Micro USB Web Camera */

 Oculus VR Positional Tracker DK2 */

 Oculus VR Rift Sensor */

 GEO Semiconductor GC6500 */

 Intel RealSense D4M */

 Generic USB Video Class */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      uvc_v4l2.c  --  USB Video Class driver - V4L2 API

 *

 *      Copyright (C) 2005-2010

 *          Laurent Pinchart (laurent.pinchart@ideasonboard.com)

/* ------------------------------------------------------------------------

 * UVC ioctls

 Non standard control id. */

		/* Prevent excessive memory consumption, as well as integer

		 * overflows.

/* ------------------------------------------------------------------------

 * V4L2 interface

/*

 * Find the frame interval closest to the requested frame interval for the

 * given frame format and size. This should be done by the device as part of

 * the Video Probe and Commit negotiation, but some hardware don't implement

 * that feature.

	/* Check if the hardware supports the requested format, use the default

	 * format otherwise.

	/* Find the closest image size. The distance between image sizes is

	 * the size in pixels of the non-overlapping regions between the

	 * requested size and the frame-specified size.

 Use the default frame interval. */

 Set the format index, frame index and frame interval. */

 dwFrameInterval */

	/* Some webcams stall the probe control set request when the

	 * dwMaxVideoFrameSize field is set to zero. The UVC specification

	 * clearly states that the field is read-only from the host, so this

	 * is a webcam bug. Set dwMaxVideoFrameSize to the value reported by

	 * the webcam to work around the problem.

	 *

	 * The workaround could probably be enabled for all webcams, so the

	 * quirk can be removed if needed. It's currently useful to detect

	 * webcam bugs and fix them before they hit the market (providing

	 * developers test their webcams with the Linux driver as well as with

	 * the Windows driver).

 Probe the device. */

	/* After the probe, update fmt with the values returned from

	 * negotiation with the device. Some devices return invalid bFormatIndex

	 * and bFrameIndex values, in which case we can only assume they have

	 * accepted the requested format as-is.

 Try frames with matching size to find the best frame interval. */

 Probe the device with the new settings. */

 Return the actual frame period. */

/* ------------------------------------------------------------------------

 * Privilege management

/*

 * Privilege management is the multiple-open implementation basis. The current

 * implementation is completely transparent for the end-user and doesn't

 * require explicit use of the VIDIOC_G_PRIORITY and VIDIOC_S_PRIORITY ioctls.

 * Those ioctls enable finer control on the device (by making possible for a

 * user to request exclusive access to a device), but are not mature yet.

 * Switching to the V4L2 priority mechanism might be considered in the future

 * if this situation changes.

 *

 * Each open instance of a UVC device can either be in a privileged or

 * unprivileged state. Only a single instance can be in a privileged state at

 * a given time. Trying to perform an operation that requires privileges will

 * automatically acquire the required privileges if possible, or return -EBUSY

 * otherwise. Privileges are dismissed when closing the instance or when

 * freeing the video buffers using VIDIOC_REQBUFS.

 *

 * Operations that require privileges are:

 *

 * - VIDIOC_S_INPUT

 * - VIDIOC_S_PARM

 * - VIDIOC_S_FMT

 * - VIDIOC_REQBUFS

 Always succeed if the handle is already privileged. */

 Check if the device already has a privileged handle. */

/* ------------------------------------------------------------------------

 * V4L2 file operations

 Create the device handle. */

 Only free resources if this is a privileged handle. */

 Release the file handle. */

 Look for the given pixel format */

 Skip duplicate frame sizes */

 Look for the given pixel format and frame size */

 Dynamic controls. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      uvc_status.c  --  USB Video Class driver - Status endpoint

 *

 *      Copyright (C) 2005-2009

 *          Laurent Pinchart (laurent.pinchart@ideasonboard.com)

/* --------------------------------------------------------------------------

 * Input device

 CONFIG_USB_VIDEO_CLASS_INPUT_EVDEV */

/* --------------------------------------------------------------------------

 * Status interrupt endpoint

 Find the control. */

 usb_kill_urb() called. */

 usb_unlink_urb() called. */

 The endpoint is being disabled. */

	case -EPROTO:		/* Device is disconnected (reported by some

 The URB will be resubmitted in work context. */

 Resubmit the URB. */

	/* For high-speed interrupt endpoints, the bInterval value is used as

	 * an exponent of two. Some developers forgot about it.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      uvc_isight.c  --  USB Video Class driver - iSight support

 *

 *	Copyright (C) 2006-2007

 *		Ivan N. Zlatev <contact@i-nz.net>

 *	Copyright (C) 2008-2009

 *		Laurent Pinchart <laurent.pinchart@ideasonboard.com>

/* Built-in iSight webcams implements most of UVC 1.0 except a

 * different packet format. Instead of sending a header at the

 * beginning of each isochronous transfer payload, the webcam sends a

 * single header per image (on its own in a packet), followed by

 * packets containing data only.

 *

 * Offset   Size (bytes)	Description

 * ------------------------------------------------------------------

 * 0x00	1	Header length

 * 0x01	1	Flags (UVC-compliant)

 * 0x02	4	Always equal to '11223344'

 * 0x06	8	Always equal to 'deadbeefdeadface'

 * 0x0e	16	Unknown

 *

 * The header can be prefixed by an optional, unknown-purpose byte.

 Synchronize to the input stream by waiting for a header packet. */

	/* Mark the buffer as done if we're at the beginning of a new frame.

	 *

	 * Empty buffers (bytesused == 0) don't trigger end of frame detection

	 * as it doesn't make sense to return an empty buffer.

	/* Copy the video data to the buffer. Skip header packets, as they

	 * contain no data.

		/* Decode the payload packet.

		 * uvc_video_decode is entered twice when a frame transition

		 * has been detected because the end of frame can only be

		 * reliably detected when the first packet of the new frame

		 * is processed. The first pass detects the transition and

		 * closes the previous frame's buffer, the second pass

		 * processes the data of the first payload of the new frame.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * STK1160 driver

 *

 * Copyright (C) 2012 Ezequiel Garcia

 * <elezegarcia--a.t--gmail.com>

 *

 * Based on Easycap driver by R.M. Thomas

 *	Copyright (C) 2010 R.M. Thomas

 *	<rmthomas--a.t--sciolus.org>

 supported video standards */

/*

 * Helper to find the next divisor that results in modulo being zero.

 * This is required to guarantee valid decimation unit counts.

 720x480 */

 Frame start */

 Frame end */

 720x576 */

 TODO: Each line of frame has some junk at the end */

 Frame start */

 Frame end */

		/*

		 * Since the format is UYVY, the device must skip or send

		 * a number of rows/columns multiple of four. This way, the

		 * colour format is preserved. The STK1160_DEC_UNIT_SIZE bit

		 * does exactly this.

 Horizontal count units */

 Vertical count units */

 Decimation control */

/*

 * Set a new alternate setting.

 * Returns true is dev->max_pkt_size has changed, false otherwise.

	/*

	 * If we don't set right alternate,

	 * then we will get a green screen with junk.

 stop when the selected alt setting offers enough bandwidth */

		/*

		 * otherwise make sure that we end up with the maximum bandwidth

		 * because the min_pkt_size equation might be wrong...

 Check device presence */

	/*

	 * For some reason it is mandatory to set alternate *first*

	 * and only *then* initialize isoc urbs.

	 * Someone please explain me why ;)

	/*

	 * We (re)allocate isoc urbs if:

	 * there is no allocated isoc urbs, OR

	 * a new dev->max_pkt_size is detected

 submit urbs and enables IRQ */

 Start saa711x */

 Start stk1160 */

 Must be called with v4l_lock hold */

 If the device is not physically present, there is nothing to do */

 set alternate 0 */

 Stop stk1160 */

 Stop saa711x */

	/*

	 * Once URBs are cancelled, the URB complete handler

	 * won't be running. This is required to safely release the

	 * current buffer (dev->isoc_ctl.buf).

	/*

	 * It is possible to keep buffers around using a module parameter.

	 * This is intended to avoid memory fragmentation.

/*

 * vidioc ioctls

 Minimum width and height is 5% the frame size */

 Let's set default no decimation values */

		/*

		 * The device will send count units for each

		 * unit skipped. This means count unit is:

		 *

		 * n = width / (frame width - width)

		 *

		 * And the width is:

		 *

		 * width = (n / n + 1) * frame width

		/*

		 * The device will skip count units for each

		 * unit sent. This means count is:

		 *

		 * n = (frame width / width) - 1

		 *

		 * And the width is:

		 *

		 * width = frame width / (n + 1)

 Check device presence */

 We need to set this now, before we call stk1160_set_std */

 Calling with NULL disables frame decimation */

 S-Video special handling */

 Match host */

 Match host */

 vb2 takes care of these */

*******************************************************************/

/*

 * Videobuf2 operations

	/*

	 * Here we can change the number of buffers being requested.

	 * So, we set a minimum and a maximum like this:

 This means a packed colorformat */

		/*

		 * If the device is disconnected return the buffer to userspace

		 * directly. The next QBUF call will fail with -ENODEV.

		/*

		 * If buffer length is less from expected then we return

		 * the buffer to userspace directly.

 abort streaming and wait for last buffer */

*******************************************************************/

 Must be called with both v4l_lock and vb_queue_lock hold */

 Release all active buffers */

 It's important to release the current buffer */

 initialize video dma queue */

 Initialize video_device with a template structure */

	/*

	 * Provide mutexes for v4l2 core and for videobuf2 queue.

	 * It will be used to protect *only* v4l2 ioctls.

 This will be used to set video_device parent */

 NTSC is default */

 set default format */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * STK1160 driver

 *

 * Copyright (C) 2012 Ezequiel Garcia

 * <elezegarcia--a.t--gmail.com>

 *

 * Based on Easycap driver by R.M. Thomas

 *	Copyright (C) 2010 R.M. Thomas

 *	<rmthomas--a.t--sciolus.org>

 *

 * TODO:

 *

 * 1. Support stream at lower speed: lower frame rate or lower frame size.

 Devices supported by this driver */

 saa7113 I2C address */

/*

 * Read/Write stk registers

 TODO: We should break this into pieces */

 Timing generator setup */

 high bandwidth multiplier, as encoded in highspeed endpoint descriptors */

/*

 * Scan usb interface and populate max_pkt_size array

 * with information on each alternate setting.

 * The array should be allocated by the caller.

 Get endpoints */

 This isn't clear enough, at least to me */

 Is this even possible? */

 This should never happen, since we rejected audio interfaces */

	/*

	 * Make sure we have 480 Mbps of bandwidth, otherwise things like

	 * video stream wouldn't likely work, since 12 Mbps is generally

	 * not enough even for most streams.

 array of wMaxPacketSize */

	/*

	 * Since usb audio class is supported by snd-usb-audio,

	 * we reject audio interface.

 Alloc an array for all possible max_pkt_size */

	/*

	 * Scan usb possibilities and populate alt_max_pkt_size array.

	 * Also, check if device speed is fast enough.

 We save struct device for debug purposes only */

 initialize videobuf2 stuff */

	/*

	 * There is no need to take any locks here in probe

	 * because we register the device node as the *last* thing.

	/*

	 * We obtain a v4l2_dev but defer

	 * registration of video device node as the last thing.

	 * There is no need to set the name if we give a device struct

	/*

	 * To the best of my knowledge stk1160 boards only have

	 * saa7113, but it doesn't hurt to support them all.

 i2c reset saa711x */

 reset stk1160 to default values */

 select default input */

	/*

	 * Wait until all current v4l2 operation are finished

	 * then deallocate resources

 Here is the only place where isoc get released */

 This way current users can detect device is gone */

	/*

	 * This calls stk1160_release if it's the last reference.

	 * Otherwise, release is postponed until there are no users left.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * STK1160 driver

 *

 * Copyright (C) 2012 Ezequiel Garcia

 * <elezegarcia--a.t--gmail.com>

 *

 * Copyright (C) 2016 Marcel Hasler

 * <mahasler--a.t--gmail.com>

 *

 * Based on Easycap driver by R.M. Thomas

 *	Copyright (C) 2010 R.M. Thomas

 *	<rmthomas--a.t--sciolus.org>

 Wait for AC97 transfer to complete */

 Set codec register address */

 Set codec command */

 Set command write bit to initiate write operation */

 Wait for command write bit to be cleared */

 Set codec register address */

 Set command read bit to initiate read operation */

 Wait for command read bit to be cleared */

 Retrieve register value */

 CD volume */

 Line-in volume */

 MIC volume (mono) */

 Aux volume */

 Record select */

 Master volume */

 Record gain */

 Two-step reset AC97 interface and hardware codec */

 Set 16-bit audio data and choose L&R channel*/

 Setup channels */

 CD volume */

 Line-in volume */

 MIC volume (mono) */

 Aux volume */

 Record select */

 Master volume */

 Record gain */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * STK1160 driver

 *

 * Copyright (C) 2012 Ezequiel Garcia

 * <elezegarcia--a.t--gmail.com>

 *

 * Based on Easycap driver by R.M. Thomas

 *	Copyright (C) 2010 R.M. Thomas

 *	<rmthomas--a.t--sciolus.org>

 Current buffer must be NULL when this functions gets called */

	/*

	 * TODO: These stk1160_dbg are very spammy!

	 * We should 1) check why we are getting them

	 * and 2) add ratelimit.

	 *

	 * UPDATE: One of the reasons (the only one?) for getting these

	 * is incorrect standard (mismatch between expected and configured).

	 * So perhaps, we could add a counter for errors. When the counter

	 * reaches some value, we simply stop streaming.

 offset in current line */

 Multiply linesdone by two, to take account of the other field */

 Copy the remaining of current line */

	/*

	 * Check if we have enough space left in the buffer.

	 * In that case, we force loop exit after copy.

 Check if the copy is done */

 Let the bug hunt begin! sanity checks! */

 Copy current field line by line, interlacing with the other field */

 Copy one line at a time */

		/*

		 * Check if we have enough space left in the buffer.

		 * In that case, we force loop exit after copy.

 Check if the copy is done */

/*

 * Controls the isoc copy of each urb packet

 Print status and drop current packet (or field?) */

 Get packet actual length and pointer to data */

 Empty packet */

		/*

		 * An 8-byte packet sequence means end of field.

		 * So if we don't have any packet, we start receiving one now

		 * and if we do have a packet, then we are done with it.

		 *

		 * These end of field packets are always 0xc0 or 0x80,

		 * but not always 8-byte long so we don't check packet length.

			/*

			 * If first byte is 0xc0 then we received

			 * second field, and frame has ended.

		/*

		 * If we don't have a buffer here, then it means we

		 * haven't found the start mark sequence.

			/* We set next packet parity and

			 * continue to get next one

/*

 * IRQ callback, called by URB callback

 kill */

 TODO: check uvc driver: he frees the queue here */

 Reset urb buffers */

/*

 * Cancel urbs

 * This function can't be called in atomic context

	/*

	 * This check is not necessary, but we add it

	 * to avoid a spurious debug message

		/*

		 * To kill urbs we can't be in atomic context.

		 * We don't care for NULL pointer since

		 * usb_kill_urb allows it.

/*

 * Releases urb and transfer buffers

 * Obviusly, associated urb must be killed before releasing it.

/*

 * Helper for cancelling and freeing urbs

 * This function can't be called in atomic context

/*

 * Allocate URBs

	/*

	 * It may be necessary to release isoc here,

	 * since isoc are only released on disconnection.

	 * (see new_pkt_size flag)

 allocate urbs and transfer buffers */

 Not enough transfer buffers, so just give up */

		/*

		 * FIXME: Where can I get the endpoint?

 At last we can say we have some buffers */

	/*

	 * Failed to allocate desired buffer count. However, we may have

	 * enough to work fine, so we just free the extra urb,

	 * store the allocated count and keep going, fingers crossed!

 Save the allocated buffers so far, so we can properly free them */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * STK1160 driver

 *

 * Copyright (C) 2012 Ezequiel Garcia

 * <elezegarcia--a.t--gmail.com>

 *

 * Based on Easycap driver by R.M. Thomas

 *	Copyright (C) 2010 R.M. Thomas

 *	<rmthomas--a.t--sciolus.org>

 Wait until read/write finish bit is set */

 read/write done? */

 Set serial device address */

 Set i2c device register sub-address */

 Set i2c device register value */

 Start write now */

 Set serial device address */

 Set i2c device register sub-address */

 Start read now */

/*

 * stk1160_i2c_check_for_device()

 * check if there is a i2c_device at the supplied address

 Set serial device address */

 Set device sub-address, we'll chip version reg */

 Start read now */

/*

 * stk1160_i2c_xfer()

 * the main i2c transfer function

 no len: check only for device presence */

 read request without preceding register selection */

 consumed two msgs, so we skip one of them */

/*

 * functionality(), what da heck is this?

/*

 * stk1160_i2c_register()

 * register i2c bus

 Set i2c clock divider device address */

 ??? */

/*

 * stk1160_i2c_unregister()

 * unregister i2c_bus

 SPDX-License-Identifier: GPL-2.0+

/*

 * A virtual v4l2-mem2mem example device.

 *

 * This is a virtual device driver for testing mem-to-mem videobuf framework.

 * It simulates a device that uses memory buffers for both source and

 * destination, processes the data and issues an "irq" (simulated by a delayed

 * workqueue).

 * The device is capable of multi-instance, multi-buffer-per-transaction

 * operation (via the mem2mem framework).

 *

 * Copyright (c) 2009-2010 Samsung Electronics Co., Ltd.

 * Pawel Osciak, <pawel@osciak.com>

 * Marek Szyprowski, <m.szyprowski@samsung.com>

 Default transaction time in msec */

 Max 25 fps */

 Pixel alignment for non-bayer formats */

 Pixel alignment for bayer formats */

 Flags that indicate a format can be used for capture/output */

 Per queue */

 In bytes, per queue */

 Flags that indicate processing mode */

 Types the format can be used for */

 rrrrrggg gggbbbbb */

 gggbbbbb rrrrrggg */

 Per-queue, driver-specific private data */

 Processed buffers in this transaction */

 Transaction length (i.e. how many buffers per transaction) */

 Transaction time (i.e. simulated processing time) in milliseconds */

 Abort requested by m2m */

 Processing mode */

 Source and destination queue data */

 Step 1: read two consecutive pixels from src pointer */

 rrrrrggg gggbbbbb */

 gggbbbbb rrrrrggg */

 Step 2: store two consecutive points, reversing them if needed */

 rrrrrggg gggbbbbb */

 gggbbbbb rrrrrggg */

 As we're doing scaling, use the output dimensions here */

	/*

	 * When format and resolution are identical,

	 * we can use a faster copy logic

 Slower algorithm with format conversion, hflip, vflip and scaler */

 To speed scaler up, use Bresenham for X dimension */

 Calculate the next p_in_x0 */

/*

 * mem2mem callbacks

/*

 * job_ready() - check whether an instance is ready to be scheduled to run

 Will cancel the transaction in the next interrupt handler */

/* device_run() - prepares and starts the device

 *

 * This simulates all the immediate preparations required before starting

 * a device. This will be called by the framework when it decides to schedule

 * a particular instance.

 Apply request controls if any */

 Complete request controls if any */

 Run delayed work, which simulates a hardware irq  */

/*

 * video ioctls

 index-th format of type type found ? */

			/*

			 * Correct type but haven't reached our index yet,

			 * just increment per-type index

 Format found */

 Format not found */

	/*

	 * V4L2 specification specifies the driver corrects the

	 * format struct if any of the dimensions is unsupported

/*

 * Queue operations

/*

 * File operations

 vim2m_device_release called by video_unregister_device to release various objects */

 SPDX-License-Identifier: GPL-2.0

/*

 * The Virtual DVB test driver serves as a reference DVB driver and helps

 * validate the existing APIs in the media subsystem. It can also aid

 * developers working on userspace applications.

 *

 * Copyright (C) 2020 Daniel W. S. Almeida

/**

 * vidtv_memcpy() - wrapper routine to be used by MPEG-TS

 *	generator, in order to avoid going past the

 *	output buffer.

 * @to:	Starting element to where a MPEG-TS packet will

 *	be copied.

 * @to_offset:	Starting position of the @to buffer to be filled.

 * @to_size:	Size of the @to buffer.

 * @from:	Starting element of the buffer to be copied.

 * @len:	Number of elements to be copy from @from buffer

 *	into @to+ @to_offset buffer.

 *

 * Note:

 *	Real digital TV demod drivers should not have memcpy

 *	wrappers. We use it here because emulating MPEG-TS

 *	generation at kernelspace requires some extra care.

 *

 * Return:

 *	Returns the number of bytes written

/**

 * vidtv_memset() - wrapper routine to be used by MPEG-TS

 *	generator, in order to avoid going past the

 *	output buffer.

 * @to:	Starting element to set

 * @to_offset:	Starting position of the @to buffer to be filled.

 * @to_size:	Size of the @to buffer.

 * @c:		The value to set the memory to.

 * @len:	Number of elements to be copy from @from buffer

 *	into @to+ @to_offset buffer.

 *

 * Note:

 *	Real digital TV demod drivers should not have memset

 *	wrappers. We use it here because emulating MPEG-TS

 *	generation at kernelspace requires some extra care.

 *

 * Return:

 *	Returns the number of bytes written

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * The Virtual DVB test driver serves as a reference DVB driver and helps

 * validate the existing APIs in the media subsystem. It can also aid

 * developers working on userspace applications.

 *

 * Copyright (C) 2020 Daniel W. S. Almeida

 * Based on the example driver written by Emard <emard@softhome.net>

 ms */

 from libdvbv5 source code, in milli db */

 from libdvbv5 source code, in milli db */

 from libdvbv5 source code, in milli db */

 from libdvbv5 source code, in milli db*/

 not found */

 Fill the length of each status counter */

 Signal is always available */

 Usually available only after Viterbi lock */

 Those depends on full lock */

	/*

	 * Add a 0.5% of randomness at the signal strength and CNR,

	 * and make them different, as we want to have something closer

	 * to a real case scenario.

	 *

	 * Also, usually, signal strength is a negative number in dBm.

 Adjust to a better range */

 Simulate random lost of signal due to a bad-tuned channel */

 eventually lose the TS lock */

 recover if the signal improves */

/*

 * NOTE:

 * This is implemented here just to be used as an example for real

 * demod drivers.

 *

 * Should only be implemented if it actually reads something from the hardware.

 * Also, it should check for the locks, in order to avoid report wrong data

 * to userspace.

 store the CNR returned by the tuner */

/*

 * NOTE:

 * This is implemented here just to be used as an example for real

 * demod drivers.

 *

 * Should only be implemented if the demod has support for DVB-S or DVB-S2

/*

 * NOTE:

 * This is implemented here just to be used as an example for real

 * demod drivers.

 *

 * Should only be implemented if the demod has support for DVB-S or DVB-S2

/*

 * NOTE:

 * This is implemented here just to be used as an example for real

 * demod drivers.

 *

 * Should only be implemented if the demod has support for DVB-S or DVB-S2

/*

 * NOTE:

 * This is implemented here just to be used as an example for real

 * demod drivers.

 *

 * Should only be implemented if the demod has support for DVB-S or DVB-S2

 For DVB-S/S2 */

 allocate memory for the internal state */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0

/*

 * Vidtv serves as a reference DVB driver and helps validate the existing APIs

 * in the media subsystem. It can also aid developers working on userspace

 * applications.

 *

 * This file contains the code for an AES3 (also known as AES/EBU) encoder.

 * It is based on EBU Tech 3250 and SMPTE 302M technical documents.

 *

 * This encoder currently supports 16bit AES3 subframes using 16bit signed

 * integers.

 *

 * Note: AU stands for Access Unit, and AAU stands for Audio Access Unit

 *

 * Copyright (C) 2020 Daniel W. S. Almeida

 PES: private_stream_1 */

 these are retrieved empirically from ffmpeg/libavcodec */

 Used by the tone generator: number of samples for PI */

 from ffmpeg */

 beats per minute */

 use the same pts from the video access unit*/

		/*

		 * Simple tone generator: play the tones at the

		 * beethoven_fur_elise array.

 Handle pause notes */

 bug somewhere */

 let the source know we are out of data */

 from ffmpeg: see s302enc.c */

 2 channels, ident: 0, 16 bits per sample */

	/*

	 * According to SMPTE 302M, an audio access unit is specified as those

	 * AES3 words that are associated with a corresponding video frame.

	 * Therefore, there is one audio access unit for every video access unit

	 * in the corresponding video encoder ('sync'), using the same values

	 * for PTS as used by the video encoder.

	 *

	 * Assuming that it is also possible to send audio without any

	 * associated video, as in a radio-like service, a single audio access unit

	 * is created with values for 'num_samples' and 'pts' taken empirically from

	 * ffmpeg

 SPDX-License-Identifier: GPL-2.0

/*

 * The Virtual DVB test driver serves as a reference DVB driver and helps

 * validate the existing APIs in the media subsystem. It can also aid

 * developers working on userspace applications.

 *

 * The vidtv tuner should support common TV standards such as

 * DVB-T/T2/S/S2, ISDB-T and ATSC when completed.

 *

 * Copyright (C) 2020 Daniel W. S. Almeida

 attempt to use the same values as libdvbv5 */

 from libdvbv5 source code, in milli db */

 from libdvbv5 source code, in milli db */

 from libdvbv5 source code, in milli db */

 from libdvbv5 source code, in milli db*/

/**

 * struct vidtv_tuner_hardware_state - Simulate the tuner hardware status

 * @asleep: whether the tuner is asleep, i.e whether _sleep() or _suspend() was

 * called.

 * @lock_status: Whether the tuner has managed to lock on the requested

 * frequency.

 * @if_frequency: The tuner's intermediate frequency. Hardcoded for the purposes

 * of simulation.

 * @tuned_frequency: The actual tuned frequency.

 * @bandwidth: The actual bandwidth.

 *

 * This structure is meant to simulate the status of the tuner hardware, as if

 * we had a physical tuner hardware.

/**

 * struct vidtv_tuner_dev - The tuner struct

 * @fe: A pointer to the dvb_frontend structure allocated by vidtv_demod

 * @hw_state: A struct to simulate the tuner's hardware state as if we had a

 * physical tuner hardware.

 * @config: The configuration used to start the tuner module, usually filled

 * by a bridge driver. For vidtv, this is filled by vidtv_bridge before the

 * tuner module is probed.

		/*

		 * This will provide a value from 0 to 100 that would

		 * indicate how far is the tuned frequency from the

		 * right one.

		/*

		 * Channel tuned at wrong frequency. Simulate that the

		 * Carrier S/N ratio is not too good.

	/*

	 * do a linear interpolation between 34dB and 10dB if we can't

	 * match against the table

 SPDX-License-Identifier: GPL-2.0

/*

 * Vidtv serves as a reference DVB driver and helps validate the existing APIs

 * in the media subsystem. It can also aid developers working on userspace

 * applications.

 *

 * This file contains the multiplexer logic for TS packets from different

 * elementary streams

 *

 * Loosely based on libavcodec/mpegtsenc.c

 *

 * Copyright (C) 2020 Daniel W. S. Almeida

 push the pcr pid ctx */

 push the NULL packet pid ctx */

 push the PAT pid ctx */

 push the SDT pid ctx */

 push the NIT pid ctx */

 push the EIT pid ctx */

 add a ctx for all PMT sections */

 call this at every thread iteration */

 update the 27Mhz clock proportionally to the elapsed time */

 write each section into buffer */

 the 27Mhz clock will feed both parts of the PCR bitfield */

 forbidden value '01'... */

 ...for PTS_DTS flags    */

 see SMPTE 302M clause 6.4 */

	/*

	 * clear the encoder state once the ES data has been written to the mux

	 * buffer

 get the TS packets into the mux buffer */

 grab next encoder */

 grab the next channel */

 sanity check */

 clear the packets currently in the mux */

 point to the beginning of the buffer again */

 if the buffer is not aligned there is a bug somewhere */

		/*

		 * Update bytes and packet counts at DVBv5 stats

		 *

		 * For now, both pre and post bit counts are identical,

		 * but post BER count can be lower than pre BER, if the error

		 * correction logic discards packages.

		/*

		 * Even without any visible errors for the user, the pre-BER

		 * stats usually have an error range up to 1E-6. So,

		 * add some random error increment count to it.

		 *

		 * Please notice that this is a poor guy's implementation,

		 * as it will produce one corrected bit error every time

		 * ceil(total bytes / ERR_RATE) is incremented, without

		 * any sort of (pseudo-)randomness.

 thread will quit */

 will alloc data for pmt_sections after initializing pat */

 SPDX-License-Identifier: GPL-2.0

/*

 * The Virtual DVB test driver serves as a reference DVB driver and helps

 * validate the existing APIs in the media subsystem. It can also aid

 * developers working on userspace applications.

 *

 * Copyright (C) 2020 Daniel W. S. Almeida

 Exact same from ffmpeg. PCR is a counter driven by a 27Mhz clock */

 pcr_low = pcr % 300 */

 pcr_high = pcr / 300 */

 copy TS header */

 fill the rest with empty data */

 we should have written exactly _one_ 188byte packet */

 cc is not incremented, but it is needed. see 13818-1 clause 2.4.3.3 */

 13818-1 clause 2.4.3.5 */

 copy TS header */

 write the adap after the TS header */

 write the PCR optional */

 we should have written exactly _one_ 188byte packet */

 SPDX-License-Identifier: GPL-2.0

/*

 * This file contains the logic to work with MPEG Program-Specific Information.

 * These are defined both in ISO/IEC 13818-1 (systems) and ETSI EN 300 468.

 * PSI is carried in the form of table structures, and although each table might

 * technically be broken into one or more sections, we do not do this here,

 * hence 'table' and 'section' are interchangeable for vidtv.

 *

 * Copyright (C) 2020 Daniel W. S. Almeida

 from libdvbv5 */

 from libdvbv5 */

/*

 * Packetize PSI sections into TS packets:

 * push a TS header (4bytes) every 184 bytes

 * manage the continuity_counter

 * add stuffing (i.e. padding bytes) after the CRC

 no adaptation field */

 forcibly align and hope for the best */

 if at a packet boundary, write a new TS header */

			/*

			 * This will trigger a discontinuity if the buffer is full,

			 * effectively dropping the packet.

 write the pointer_field in the first byte of the payload */

 write as much of the payload as possible */

 'payload_write_len' written from a total of 'len' requested*/

	/*

	 * fill the rest of the packet if there is any remaining space unused

 the CRC is the last entry in the section */

 nothing to do */

 from 'length' field until the end of the descriptor */

 see ISO/IEC 13818-1 : 2000 p.43 */

 from immediately after 'section_length' until 'last_section_number'*/

 do not count the pointer */

 see ISO/IEC 13818-1 : 2000 p.46 */

 from immediately after 'section_length' until 'program_info_length'*/

 skip both pointers at the end */

 see ETSI EN 300 468 V 1.10.1 p.24 */

	/*

	 * from immediately after 'section_length' until

	 * 'reserved_for_future_use'

 skip both pointers at the end */

 pid for the PMT section in the TS */

 This function transfers ownership of p to the table */

 Recompute section length */

 note that the field 'u16 programs' is not really part of the PAT */

 copy the PAT programs */

 skip the pointer */

 Write the CRC32 at the end */

 This function transfers ownership of s to the table */

	/*

	 * service_id is the same as program_number in the

	 * corresponding program_map_section

	 * see ETSI EN 300 468 v1.15.1 p. 24

 not found */

 write the two bitfields */

 write the descriptors, if any */

 write the streams, if any */

 write the stream descriptors, if any */

 Write the CRC32 at the end */

	/*

	 * This is a 16-bit field which serves as a label for identification

	 * of the TS, about which the SDT informs, from any other multiplex

	 * within the delivery system.

	/*

	 * FIXME: The network_id range from 0xFF01 to 0xFFFF is used to

	 * indicate temporary private use. For now, let's use the first

	 * value.

	 * This can be changed to something more useful, when support for

	 * NIT gets added

 see ETSI EN 300 468 v1.15.1 p. 11 */

 copy u16 network_id + u8 reserved)*/

 skip both pointers at the end */

 copy the services, if any */

 copy the service descriptors, if any */

 Write the CRC at the end */

	/*

	 * ETSI 300 468: this is a 16bit field which serves as a label to

	 * identify this service from any other service within the TS.

	 * The service id is the same as the program number in the

	 * corresponding program_map_section

 recompute section length */

/*

 * PMTs contain information about programs. For each program,

 * there is one PMT section. This function will create a section

 * for each program found in the PAT

	/*

	 * The number of PMT entries is the number of PAT entries

	 * that contain service_id. That exclude special tables, like NIT

 find the PMT section associated with 'program_num' */

 not found */

	/*

	 * from immediately after 'section_length' until

	 * 'network_descriptor_length'

 skip both pointers at the end */

 Actually sets the transport stream loop len, maybe rename this function later

 ACTUAL_NETWORK

 write the bitfield */

 write the descriptors, if any */

 write the second bitfield */

 write the transport sections, if any */

 write the transport descriptors, if any */

 Write the CRC32 at the end */

	/*

	 * from immediately after 'section_length' until

	 * 'last_table_id'

 skip both pointers at the end */

actual_transport_stream: present/following

 not implemented */

 not implemented */

 skip both pointers at the end */

 copy the events, if any */

 copy the event descriptors, if any */

 Write the CRC at the end */

 BCD encoded */

 Convert date to Modified Julian Date - per EN 300 468 Annex C */

	/*

	 * Store MJD and hour/min/sec to the event.

	 *

	 * Let's make the event to start on a full hour

	/*

	 * TODO: for now, the event will last for a day. Should be

	 * enough for testing purposes, but if one runs the driver

	 * for more than that, the current event will become invalid.

	 * So, we need a better code here in order to change the start

	 * time once the event expires.

 SPDX-License-Identifier: GPL-2.0

/*

 * Vidtv serves as a reference DVB driver and helps validate the existing APIs

 * in the media subsystem. It can also aid developers working on userspace

 * applications.

 *

 * This file contains the logic to translate the ES data for one access unit

 * from an encoder into MPEG TS packets. It does so by first encapsulating it

 * with a PES header and then splitting it into TS packets.

 *

 * Copyright (C) 2020 Daniel W. S. Almeida

 private_stream_1. See SMPTE 302M-2007 p.6 */

 the flags must always be sent */

 From all optionals, we might send these for now */

 PES header length notwithstanding stuffing bytes */

	/*

	 * This is a fixed 8-bit value equal to '0xFF' that can be inserted

	 * by the encoder, for example to meet the requirements of the channel.

	 * It is discarded by the decoder. No more than 32 stuffing bytes shall

	 * be present in one PES packet header.

 the number of bytes written by this function */

 see ISO/IEC 13818-1 : 2000 p. 32 */

 copy PTS/DTS optional */

 the number of bytes written by this function */

 copy header */

 copy optional header bits */

 copy the timing information */

 write any PES header stuffing */

 Exact same from ffmpeg. PCR is a counter driven by a 27Mhz clock */

 pcr_low = pcr % 300 */

 pcr_high = pcr / 300 */

 length _immediately_ following 'adaptation_field_length' */

 write the adap after the TS header */

 write the optional PCR */

 write the stuffing bytes, if are there anything left */

	/*

	 * The n_stuffing_bytes contain a pre-calculated value of

	 * the amount of data that this function would read, made from

	 * vidtv_pes_h_get_len(). If something went wrong, print a warning

 number of bytes written by this function */

 write the TS header */

 write stuffing, if any */

 forcibly align and hope for the best */

		/*

		 * The amount of space initially available in the TS packet.

		 * if this is the beginning of the PES packet, take into account

		 * the space needed for the TS header _and_ for the PES header

		/*

		 * if the encoder has inserted stuffing bytes in the PES

		 * header, account for them.

 Take the extra adaptation into account if need to send PCR */

		/*

		 * how much of the _actual_ payload should be written in this

		 * packet.

 Last frame should ensure 188-bytes PS alignment */

			/*

			 * Ensure that the stuff bytes will be within the

			 * allowed range, decrementing the number of payload

			 * bytes to write if needed.

 write ts header */

 write the PES header only once */

 write as much of the payload as we possibly can */

 SPDX-License-Identifier: GPL-2.0

/*

 * The Virtual DTV test driver serves as a reference DVB driver and helps

 * validate the existing APIs in the media subsystem. It can also aid

 * developers working on userspace applications.

 *

 * When this module is loaded, it will attempt to modprobe 'dvb_vidtv_tuner'

 * and 'dvb_vidtv_demod'.

 *

 * Copyright (C) 2020 Daniel W. S. Almeida

/*

 * The LNBf fake parameters here are the ranges used by an

 * Universal (extended) European LNBf, which is likely the most common LNBf

 * found on Satellite digital TV system nowadays.

 high IF frequency */

 low IF frequency */

 transition frequency */

/*

 * Influences the signal acquisition time. See ISO/IEC 13818-1 : 2000. p. 113.

/*

 * called on a separate thread by the mux when new packets become available

 drop packets if we lose the lock */

 the demod will set this when its probe function runs */

	/*

	 * Right now, this virtual driver doesn't really send or receive

	 * messages from I2C. A real driver will require an implementation

	 * here.

 driver will not work anyways so bail out */

 retrieve a ptr to the frontend state */

 TODO: check if the frequencies are at a valid range */

	/*

	 * Convert Satellite frequencies from Ku-band in kHZ into S-band

	 * frequencies in Hz.

		/*

		 * The source of the demux is a frontend connected

		 * to the demux.

 CONFIG_MEDIA_CONTROLLER_DVB */

 CONFIG_MEDIA_CONTROLLER_DVB */

 CONFIG_MEDIA_CONTROLLER_DVB */

 SPDX-License-Identifier: GPL-2.0

/*

 * Vidtv serves as a reference DVB driver and helps validate the existing APIs

 * in the media subsystem. It can also aid developers working on userspace

 * applications.

 *

 * This file contains the code for a 'channel' abstraction.

 *

 * When vidtv boots, it will create some hardcoded channels.

 * Their services will be concatenated to populate the SDT.

 * Their programs will be concatenated to populate the PAT

 * Their events will be concatenated to populate the EIT

 * For each program in the PAT, a PMT section will be created

 * The PMT section for a channel will be assigned its streams.

 * Every stream will have its corresponding encoder polled to produce TS packets

 * These packets may be interleaved by the mux and then delivered to the bridge

 *

 *

 * Copyright (C) 2020 Daniel W. S. Almeida

 forward the call to the derived type */

/*

 * init an audio only channel with a s302m encoder

 packet id for the ES */

 packet id for PMT*/

 Concatenate the events */

 Concatenate the services */

 Concatenate the programs */

 Add the NIT table */

/*

 * Match channels to their respective PMT sections, then assign the

 * streams

 elementary stream pid */

 we got a match */

 clone the streams for the PMT */

 look for a service descriptor for every service */

 use these descriptors to build the NIT */

 assemble all programs and assign to PAT */

 assemble all services and assign to SDT */

 assemble all events and assign to EIT */

 this is the place to add new 'channels' for vidtv */

 SPDX-License-Identifier: LGPL-2.1+

/*

 * Copyright 2016 Tom aan de Wiel

 * Copyright 2018 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 *

 * 8x8 Fast Walsh Hadamard Transform in sequency order based on the paper:

 *

 * A Recursive Algorithm for Sequency-Ordered Fast Walsh Transforms,

 * R.D. Brown, 1977

/*

 * Note: bit 0 of the header must always be 0. Otherwise it cannot

 * be guaranteed that the magic 8 byte sequence (see below) can

 * never occur in the rlc output.

/*

 * noinline_for_stack to work around

 * https://bugs.llvm.org/show_bug.cgi?id=38809

 read in block from framebuffer */

 keep track of amount of trailing zeros */

 count leading zeros */

 4 bits for run, 12 for coefficient (quantization by 4) */

/*

 * This function will worst-case increase rlc_in by 65*2 bytes:

 * one s16 value for the header and 8 * 8 coefficients of type s16.

 header */

	/*

	 * Now de-compress, it expands one byte to up to 15 bytes

	 * (or fills the remainder of the 64 bytes with zeroes if it

	 * is the last byte to expand).

	 *

	 * So block has to be 8 * 8 + 16 bytes, the '+ 16' is to

	 * allow for overflow if the incoming data was malformed.

 fill remainder with zeros */

 we'll need more than 8 bits for the transformed coefficients */

 stage 1 */

 stage 2 */

 stage 3 */

 stage 1 */

 stage 2 */

 stage 3 */

/*

 * Not the nicest way of doing it, but P-blocks get twice the range of

 * that of the I-blocks. Therefore we need a type bigger than 8 bits.

 * Furthermore values can be negative... This is just a version that

 * works with 16 signed data

 we'll need more than 8 bits for the transformed coefficients */

 stage 1 */

 stage 2 */

 stage 3 */

 stage 1 */

 stage 2 */

 stage 3 */

	/*

	 * we'll need more than 8 bits for the transformed coefficients

	 * use native unit of cpu

 stage 1 */

 stage 2 */

 stage 3 */

 stage 1 */

 stage 2 */

 stage 3 */

			/*

			 * Due to quantizing, it might possible that the

			 * decoded coefficients are slightly out of range

 intra code, first frame is always intra coded. */

 inter code */

		/*

		 * The compressed stream should never contain the magic

		 * header, so when we copy the YUV data we replace 0xff

		 * by 0xfe. Since YUV is limited range such values

		 * shouldn't appear anyway.

	/*

	 * When decoding each macroblock the rlco pointer will be increased

	 * by 65 * 2 bytes worst-case.

	 * To avoid overflow the buffer has to be 65/64th of the actual raw

	 * image size, just in case someone feeds it malicious data.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * A virtual codec example device.

 *

 * Copyright 2018 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 *

 * This is a virtual codec device driver for testing the codec framework.

 * It simulates a device that uses memory buffers for both source and

 * destination and encodes or decodes the data.

 Chroma plane subsampling */

 Per-queue, driver-specific private data */

 Source and destination queue data */

		/*

		 * set the reference buffer from the reference timestamp

		 * only if this is a P-frame

/*

 * mem2mem callbacks

 device_run() - prepares and starts the device */

	/*

	 * This function should not be used by a stateless codec since

	 * it changes values in q_data that are not request specific

	/*

	 * The current scanned frame might be the first frame of a new

	 * resolution so its size might be larger than ctx->comp_max_size.

	 * In that case it is copied up to the current buffer capacity and

	 * the copy will continue after allocating new large enough buffer

	 * when restreaming

	/*

	 * if the header is invalid the device_run will just drop the frame

	 * with an error

/*

 * video ioctls

	/*

	 * encoder supports only cropping on the OUTPUT buffer

	 * decoder supports only composing on the CAPTURE buffer

/*

 * Queue operations

 buf_queue handles only the first source change event */

	/*

	 * if both queues are streaming, the source change event is

	 * handled in job_ready

	/*

	 * source change event is relevant only for the stateful decoder

	 * in the compressed stream

		/*

		 * p points right after the end of the header in the

		 * buffer. If the header is invalid we set p to point

		 * to the next byte after the start of the header

	/*

	 * if state->compressed_frame was already allocated then

	 * it contain data of the first frame of the new resolution

/*

 * File operations

 SPDX-License-Identifier: LGPL-2.1

/*

 * A V4L2 frontend for the FWHT codec

 *

 * Copyright 2018 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

	/*

	 * The buffer is NULL if it is the reference

	 * frame of an I-frame in the stateless decoder

 TODO: support resolution changes */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vimc-sensor.c Virtual Media Controller Driver

 *

 * Copyright (C) 2015-2017 Helen Koike <helen.fornazier@gmail.com>

 The active format */

 Only accept code in the pix map table */

 TODO: add support for V4L2_FIELD_ALTERNATE */

 Only accept code in the pix map table */

 TODO: add support for V4L2_FIELD_ALTERNATE */

 Do not change the format while stream is on */

 Set the new format */

 old */

 new */

 Calculate the frame size */

		/*

		 * Allocate the frame buffer. Use vmalloc to be able to

		 * allocate a large amount of memory

 configure the test pattern generator */

 Image Processing Controls */

 Allocate the vsen struct */

 Initialize the test pattern generator */

 Initialize ved and sd */

 Initialize the frame format */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vimc-capture.c Virtual Media Controller Driver

 *

 * Copyright (C) 2015-2017 Helen Koike <helen.fornazier@gmail.com>

	/*

	 * NOTE: in a real driver, a spin lock must be used to access the

	 * queue because the frames are generated from a hardware interruption

	 * and the isr is not allowed to sleep.

	 * Even if it is not necessary a spinlock in the vimc driver, we

	 * use it here as a code reference

	/*

	 * struct vb2_v4l2_buffer must be the first element

	 * the videobuf2 framework will allocate this struct based on

	 * buf_struct_size and use the first sizeof(struct vb2_buffer) bytes of

	 * memory as a vb2_buffer

 Don't accept a pixelformat that is not on the table */

 TODO: Add support for custom bytesperline values */

 Do not change the format while stream is on */

 old */

 new */

 Only accept code in the pix map table */

 Start the media pipeline */

/*

 * Stop the stream engine. Any remaining buffers in the stream queue are

 * dequeued and passed on to the vb2 framework marked as STATE_ERROR.

 Stop the media pipeline */

 Release all active buffers */

 We don't support multiplanes for now */

	/*

	 * Since q->lock is set we can use the standard

	 * vb2_ops_wait_prepare/finish helper functions.

 Get the first entry of the list */

 Remove this entry from the list */

 Fill the buffer */

 Set it as ready */

 Allocate the vimc_cap_device struct */

 Initialize the media entity */

 Initialize the lock */

 Initialize the vb2 queue */

 Initialize buffer list and its lock */

 Set default frame format */

 Fill the vimc_ent_device struct */

 Initialize the video_device struct */

 Register the video_device with the v4l2 and the media framework */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vimc-core.c Virtual Media Controller Driver

 *

 * Copyright (C) 2015-2017 Helen Koike <helen.fornazier@gmail.com>

 Structure which describes links between entities */

 Structure which describes the whole topology */

/* --------------------------------------------------------------------------

 * Topology Configuration

 TODO: change this to vimc-input when it is implemented */

 Link: Sensor A (Pad 0)->(Pad 0) Debayer A */

 Link: Sensor A (Pad 0)->(Pad 0) Raw Capture 0 */

 Link: Sensor B (Pad 0)->(Pad 0) Debayer B */

 Link: Sensor B (Pad 0)->(Pad 0) Raw Capture 1 */

 Link: Debayer A (Pad 1)->(Pad 0) Scaler */

 Link: Debayer B (Pad 1)->(Pad 0) Scaler */

 Link: RGB/YUV Input (Pad 0)->(Pad 0) Scaler */

 Link: Scaler (Pad 1)->(Pad 0) RGB/YUV Capture */

 -------------------------------------------------------------------------- */

 Initialize the links between entities */

 Register the v4l2 struct */

 allocate ent_devs */

 Invoke entity config hooks to initialize and register subdevs */

 Initialize links */

 Register the media device */

 Expose all subdev's nodes*/

 Link the media device within the v4l2_device */

 Initialize media device */

	/*

	 * the release cb is set only after successful registration.

	 * if the registration fails, we release directly from probe

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vimc-debayer.c Virtual Media Controller Driver

 *

 * Copyright (C) 2015-2017 Helen Koike <helen.fornazier@gmail.com>

 The active format */

 Values calculated when the stream starts */

 Get the current sink format */

 Set the right code for the source pad */

 Don't accept a code that is not on the debayer table */

 Do not change the format while stream is on */

	/*

	 * Do not change the format of the source pad,

	 * it is propagated from the sink

 Set the new format in the sink pad */

 old */

 new */

 Calculate the frame size of the source pad */

 Save the bytes per pixel of the sink */

 Get the corresponding pixel map from the table */

		/*

		 * Allocate the frame buffer. Use vmalloc to be able to

		 * allocate a large amount of memory

	/*

	 * Calculate how many we need to subtract to get to the pixel in

	 * the top left corner of the mean window (considering the current

	 * pixel as the center)

 Sum the values of the colors in the mean window */

	/*

	 * Iterate through all the lines in the mean window, start

	 * with zero if the pixel is outside the frame and don't pass

	 * the height when the pixel is in the bottom border of the

	 * frame

		/*

		 * Iterate through all the columns in the mean window, start

		 * with zero if the pixel is outside the frame and don't pass

		 * the width when the pixel is in the right border of the

		 * frame

 Check which color this pixel is */

 Get its value */

 Save how many values we already added */

 Calculate the mean */

 If the stream in this node is not active, just return */

 Allocate the vdeb struct */

 Create controls: */

 Initialize ved and sd */

 Initialize the frame format */

	/*

	 * TODO: Add support for more output formats, we only support

	 * RGB888 for now

	 * NOTE: the src format is always the same as the sink, except

	 * for the code

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vimc-common.c Virtual Media Controller Driver

 *

 * Copyright (C) 2015-2017 Helen Koike <helen.fornazier@gmail.com>

/*

 * NOTE: non-bayer formats need to come first (necessary for enum_mbus_code

 * in the scaler)

 TODO: add all missing formats */

 RGB formats */

 Bayer formats */

 10bit raw bayer a-law compressed to 8 bits */

 10bit raw bayer DPCM compressed to 8 bits */

 src */

 sink */

 The width, height and pixelformat must match. */

	/*

	 * The field order must match, or the sink field order must be NONE

	 * to support interlaced hardware connected to bridges that support

	 * progressive formats only.

	/*

	 * If colorspace is DEFAULT, then assume all the colorimetry is also

	 * DEFAULT, return 0 to skip comparing the other colorimetry parameters

 Colorspace must match. */

 Colorimetry must match if they are not set to DEFAULT */

 Fill the vimc_ent_device struct */

 Initialize the subdev */

 Expose this subdev to user space */

 Initialize the media entity */

 Register the subdev with the v4l2 and the media framework */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vimc-scaler.c Virtual Media Controller Driver

 *

 * Copyright (C) 2015-2017 Helen Koike <helen.fornazier@gmail.com>

 Pad identifier */

 Frame format for both sink and src pad */

 Values calculated when the stream starts */

 Get the crop bounds to clamp the crop rectangle correctly */

 We don't support bayer format */

 Only accept code in the pix map table in non bayer format */

 Do not change the active format while stream is on */

	/*

	 * The media bus code and colorspace can only be changed on the sink

	 * pad, the source pad only follows.

 Only accept code in the pix map table in non bayer format. */

 Clamp the colorspace to valid values. */

 Clamp and align the width and height */

	/*

	 * Propagate the sink pad format to the crop rectangle and the source

	 * pad.

 Disallow rectangles smaller than the minimal one. */

 Only support setting the crop of the sink pad */

 Save the bytes per pixel of the sink */

 Calculate the frame size of the source pad */

		/* Allocate the frame buffer. Use vmalloc to be able to

		 * allocate a large amount of memory

 Set each pixel at the src_frame to its sink_frame equivalent */

 If the stream in this node is not active, just return */

 Allocate the vsca struct */

 Initialize ved and sd */

 Initialize the frame format */

 Initialize the crop selection */

 SPDX-License-Identifier: GPL-2.0+

/*

 * vimc-streamer.c Virtual Media Controller Driver

 *

 * Copyright (C) 2018 Lucas A. M. Magalhães <lucmaga@gmail.com>

 *

/**

 * vimc_get_source_entity - get the entity connected with the first sink pad

 *

 * @ent:	reference media_entity

 *

 * Helper function that returns the media entity containing the source pad

 * linked with the first sink pad from the given media entity pad list.

 *

 * Return: The source pad or NULL, if it wasn't found.

/**

 * vimc_streamer_pipeline_terminate - Disable stream in all ved in stream

 *

 * @stream: the pointer to the stream structure with the pipeline to be

 *	    disabled.

 *

 * Calls s_stream to disable the stream in each entity of the pipeline

 *

/**

 * vimc_streamer_pipeline_init - Initializes the stream structure

 *

 * @stream: the pointer to the stream structure to be initialized

 * @ved:    the pointer to the vimc entity initializing the stream

 *

 * Initializes the stream structure. Walks through the entity graph to

 * construct the pipeline used later on the streamer thread.

 * Calls vimc_streamer_s_stream() to enable stream in all entities of

 * the pipeline.

 *

 * Return: 0 if success, error code otherwise.

 Check if the end of the pipeline was reached */

 the first entity of the pipe should be source only */

 Get the next device in the pipeline */

/**

 * vimc_streamer_thread - Process frames through the pipeline

 *

 * @data:	vimc_stream struct of the current stream

 *

 * From the source to the sink, gets a frame from each subdevice and send to

 * the next one of the pipeline at a fixed framerate.

 *

 * Return:

 * Always zero (created as ``int`` instead of ``void`` to comply with

 * kthread API).

wait for 60hz

/**

 * vimc_streamer_s_stream - Start/stop the streaming on the media pipeline

 *

 * @stream:	the pointer to the stream structure of the current stream

 * @ved:	pointer to the vimc entity of the entity of the stream

 * @enable:	flag to determine if stream should start/stop

 *

 * When starting, check if there is no ``stream->kthread`` allocated. This

 * should indicate that a stream is already running. Then, it initializes the

 * pipeline, creates and runs a kthread to consume buffers through the pipeline.

 * When stopping, analogously check if there is a stream running, stop the

 * thread and terminates the pipeline.

 *

 * Return: 0 if success, error code otherwise.

		/*

		 * kthread_stop returns -EINTR in cases when streamon was

		 * immediately followed by streamoff, and the thread didn't had

		 * a chance to run. Ignore errors to stop the stream in the

		 * pipeline.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-kthread-cap.h - video/vbi capture thread support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 Coarse scaling with Bresenham */

	/*

	 * We always combine two pixels to prevent color bleed in the packed

	 * yuv case.

/*

 * Precalculate the rectangles needed to perform video looping:

 *

 * The nominal pipeline is that the video output buffer is cropped by

 * crop_out, scaled to compose_out, overlaid with the output overlay,

 * cropped on the capture side by crop_cap and scaled again to the video

 * capture buffer using compose_cap.

 *

 * To keep things efficient we calculate the intersection of compose_out

 * and crop_cap (since that's the only part of the video that will

 * actually end up in the capture buffer), determine which part of the

 * video output buffer that is and which part of the video capture buffer

 * so we can scale the video straight from the output buffer to the capture

 * buffer without any intermediate steps.

 *

 * If we need to deal with an output overlay, then there is no choice and

 * that intermediate step still has to be taken. For the output overlay

 * support we calculate the intersection of the framebuffer and the overlay

 * window (which may be partially or wholly outside of the framebuffer

 * itself) and the intersection of that with loop_vid_copy (i.e. the part of

 * the actual looped video that will be overlaid). The result is calculated

 * both in framebuffer coordinates (loop_fb_copy) and compose_out coordinates

 * (loop_vid_overlay). Finally calculate the part of the capture buffer that

 * will receive that overlaid video.

 Framebuffer rectangle */

 Overlay window rectangle in framebuffer coordinates */

 shift r_overlay to the same origin as compose_out */

 shift dev->loop_fb_copy back again to the fb origin */

 Coarse scaling with Bresenham */

		/*

		 * If there is nothing to copy, then just fill the capture window

		 * with black.

 quick is true if no video scaling is needed */

 osdline is true if this line requires overlay blending */

		/*

		 * If this line of the capture buffer doesn't get any video, then

		 * just fill with black.

 fill the left border with black */

 fill the right border with black */

			/*

			 * Offset in bytes within loop_vid_copy to the start of the

			 * loop_vid_overlay rectangle.

		/*

		 * 60 Hz standards start with the bottom field, 50 Hz standards

		 * with the top field. So if the 0-based seq_count is even,

		 * then the field is TOP for 50 Hz and BOTTOM for 60 Hz

		 * standards.

		/*

		 * The sequence counter counts frames, not fields. So divide

		 * by two.

		/*

		 * The first plane of a multiplanar format has a non-zero

		 * data_offset. This helps testing whether the application

		 * correctly supports non-zero data offsets.

 Updates stream time, only update at the start of a new frame. */

/*

 * Return true if this pixel coordinate is a valid video pixel.

		/*

		 * Only if the corresponding bit in the bitmap is set can

		 * the video pixel be shown. Coordinates are relative to

		 * the overlay window set by VIDIOC_S_FMT.

		/*

		 * Only if the framebuffer coordinate is not in any of the

		 * clip rectangles will be video pixel be shown.

/*

 * Draw the image into the overlay buffer.

 * Note that the combination of overlay and multiplanar is not supported.

 if quick is true, then valid_pix() doesn't have to be called */

	/*

	 * Overlay support is only supported for formats that have a twopixelsize

	 * that's >= 2. Warn and bail out if that's not the case.

	/*

	 * If "End of Frame", then offset the exposure time by 0.9

	 * of the frame period.

 Drop a certain percentage of buffers. */

 Fill buffer */

 Handle overlay */

 If capturing a VBI, offset by 0.05 */

 Update the test pattern movement counters */

 Resets frame counters */

 Calculate the number of jiffies since we started streaming */

 Get the number of buffers streamed since the start */

		/*

		 * After more than 0xf0000000 (rounded down to a multiple of

		 * 'jiffies-per-day' to ease jiffies_to_msecs calculation)

		 * jiffies have passed since we started streaming reset the

		 * counters and keep track of the sequence offset.

		/*

		 * Calculate the number of 'numerators' streamed since we started,

		 * including the current buffer.

 And the number of jiffies since we started */

		/*

		 * Calculate when that next buffer is supposed to start

		 * in jiffies since we started streaming.

 If it is in the past, then just schedule asap */

 Resets frame counters */

 Release all active buffers */

 shutdown control thread */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-cec.c - A Virtual Video Test Driver, cec emulation

 *

 * Copyright 2016 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

/*

 * If an adapter tries to send successive messages, it must wait for the

 * longest signal-free time between its transmissions. But, if another

 * adapter sends a message in the interim, then the wait can be reduced

 * because the messages are no longer successive. Make these adjustments

 * if necessary. Should be called holding cec_xfers_slock.

/*

 * The main emulation of the bus on which CEC adapters attempt to send

 * messages to each other. The bus keeps track of how long it has been

 * signal-free and accepts a pending transmission only if the state of

 * the bus matches the transmission's signal-free requirements. It calls

 * cec_transmit_attempt_done() for all transmits that enter the bus and

 * cec_received_msg() for successful transmits.

		/*

		 * Move the messages that are ready onto the bus. The adapter with

		 * the most leading zeros will win control of the bus and any other

		 * adapters will lose arbitration.

				/*

				 * For simplicity wait for all 4 bits of the initiator's

				 * address even though HDMI specification uses bit-level

				 * precision.

			/*

			 * Message length is in bytes, but each byte is transmitted in

			 * a block of 10 bits.

			/*

			 * A message that is not acknowledged stops transmitting after

			 * the header block of 10 bits.

 Sleep as if sending messages on a real hardware bus. */

		/*

		 * If the emulated transfer took more or less time than it should

		 * have, then compensate by adjusting the wait time needed for the

		 * bus to be signal-free for 3 bit periods (the retry time).

		/*

		 * If there are no messages that need to be retried, check if any

		 * adapters that did not just transmit a message are ready to

		 * transmit. If none of these adapters are ready, then increase

		 * the signal-free time so that the bus is available to all

		 * adapters and go back to waiting for a transmission.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-kthread-out.h - video/vbi output thread support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 Drop a certain percentage of buffers. */

	/*

	 * Only dequeue buffer if there is at least one more pending.

	 * This makes video loopback possible.

			/*

			 * The sequence counter counts frames, not fields.

			 * So divide by two.

 Resets frame counters */

 Calculate the number of jiffies since we started streaming */

 Get the number of buffers streamed since the start */

		/*

		 * After more than 0xf0000000 (rounded down to a multiple of

		 * 'jiffies-per-day' to ease jiffies_to_msecs calculation)

		 * jiffies have passed since we started streaming reset the

		 * counters and keep track of the sequence offset.

		/*

		 * Calculate the number of 'numerators' streamed since we started,

		 * not including the current buffer.

 And the number of jiffies since we started */

 Increase by the 'numerator' of one buffer */

		/*

		 * Calculate when that next buffer is supposed to start

		 * in jiffies since we started streaming.

 If it is in the past, then just schedule asap */

 Resets frame counters */

 Release all active buffers */

 shutdown control thread */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-touch-cap.c - touch support functions.

		/*

		 * Error injection: test what happens if buf_prepare() returns

		 * an error.

 abort streaming and wait for last buffer */

 Fill 10% of the values within range -3 and 3, zero the others */

 16 pressure points */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-vid-common.c - common video support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 keep this initialization for compatibility with GCC < 4.4.6 */

/* ------------------------------------------------------------------

	Basic structures

 uuuvvvvv ayyyyyuu */

 uuuvvvvv yyyyyuuu */

 uuuuvvvv aaaayyyy */

 ayuv */

 rrrgggbb */

 gggbbbbb rrrrrggg */

 rrrrrggg gggbbbbb */

 ggggbbbb xxxxrrrr */

 ggggbbbb xxxxrrrr */

 ggggbbbb aaaarrrr */

 bbbbxxxx rrrrgggg */

 bbbbaaaa rrrrgggg */

 ggggrrrr xxxxbbbb */

 ggggrrrr aaaabbbb */

 rrrrxxxx bbbbgggg */

 rrrraaaa bbbbgggg  */

 gggbbbbb xrrrrrgg */

 gggbbbbb xrrrrrgg */

 gggbbbbb arrrrrgg */

 ggbbbbbx rrrrrggg */

 ggbbbbba rrrrrggg */

 gggrrrrr xbbbbbgg */

 gggrrrrr abbbbbgg */

 ggrrrrrx bbbbbggg */

 ggrrrrra bbbbbggg */

 xrrrrrgg gggbbbbb */

 xrrrrrgg gggbbbbb */

 arrrrrgg gggbbbbb */

 rgb */

 bgr */

 bbbbbbgg ggggrrrr rrxxxxxx */

 xrgb */

 bgrx */

 xrgb */

 bgrx */

 argb */

 bgra */

 rgbx */

 xbgr */

 rgba */

 abgr */

 Bayer BG/GR */

 Bayer GB/RG */

 Bayer GR/BG */

 Bayer RG/GB */

 Bayer BG/GR */

 Bayer GB/RG */

 Bayer GR/BG */

 Bayer RG/GB */

 Bayer BG/GR */

 Bayer GB/RG */

 Bayer GR/BG */

 Bayer RG/GB */

 Bayer BG/GR */

 Bayer GB/RG */

 Bayer GR/BG */

 Bayer RG/GB */

 HSV 24bits */

 HSV 32bits */

 Multiplanar formats */

 There are this many multiplanar formats in the list */

	/*

	 * While this can be supported, it is just too much work

	 * to actually implement.

/*

 * Conversion function that converts a single-planar format to a

 * single-plane multiplanar format.

 Also copies hsv_enc */

 Converts to a mplane format */

 Passes it to the generic mplane format function */

 Copies back the mplane data to the single plane format */

 Also copies hsv_enc */

 sanitize w and h in case someone passes ~0 as the value */

 sanitize left and top in case someone passes ~0 as the value */

	/*

	 * For capture devices, we support the CSC API.

	 * We allow userspace to:

	 * 1. set the colorspace

	 * 2. set the xfer_func

	 * 3. set the ycbcr_enc on YUV formats

	 * 4. set the hsv_enc on HSV formats

	 * 5. set the quantization on YUV and RGB formats

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-sdr-cap.c - software defined radio support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 stream formats */

 format descriptions for capture and preview */

 ADC band midpoints */

 Drop a certain percentage of buffers. */

 Resets frame counters */

 Calculate the number of jiffies since we started streaming */

 Get the number of buffers streamed since the start */

		/*

		 * After more than 0xf0000000 (rounded down to a multiple of

		 * 'jiffies-per-day' to ease jiffies_to_msecs calculation)

		 * jiffies have passed since we started streaming reset the

		 * counters and keep track of the sequence offset.

		/*

		 * Calculate the number of samples streamed since we started,

		 * not including the current buffer.

 And the number of jiffies since we started */

 Increase by the number of samples in one buffer */

		/*

		 * Calculate when that next buffer is supposed to start

		 * in jiffies since we started streaming.

 If it is in the past, then just schedule asap */

 2 = max 16-bit sample returned */

		/*

		 * Error injection: test what happens if buf_prepare() returns

		 * an error.

 abort streaming and wait for last buffer */

 shutdown control thread */

 resync the thread's timings */

 calculate phase step */

 1kHz beep */

		/*

		 * Transfer phase angle to [0, 2xPI] in order to avoid variable

		 * overflow and make it suitable for cosine implementation

		 * used, which does not support negative angles.

		/* Normalize fraction values represented with 32 bit precision

 convert 'fixp float' to u8 [0, +255] */

 u8 = X * 127.5 + 127.5; X is float [-1.0, +1.0] */

 convert 'fixp float' to s8 [-128, +127] */

 s8 = X * 127.5 - 0.5; X is float [-1.0, +1.0] */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-vid-cap.c - video capture support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 gggbbbbb rrrrrggg */

 gggbbbbb arrrrrgg */

 gggbbbbb arrrrrgg */

 The number of discrete webcam framesizes */

 The number of discrete webcam frameintervals */

 Sizes must be in increasing order */

/*

 * Intervals must be in increasing order and there must be twice as many

 * elements in this array as there are in webcam_sizes.

		/*

		 * You cannot use read() with FIELD_ALTERNATE since the field

		 * information (TOP/BOTTOM) cannot be passed back to the user.

		/*

		 * Error injection: test what happens if queue_setup() returns

		 * an error.

		/*

		 * Check if the number of requested planes match

		 * the number of buffers in the current format. You can't mix that.

		/*

		 * Error injection: test what happens if buf_prepare() returns

		 * an error.

	/*

	 * Set the timecode. Rarely used, so it is interesting to

	 * test this.

 abort streaming and wait for last buffer */

/*

 * Determine the 'picture' quality based on the current TV frequency: either

 * COLOR for a good 'signal', GRAY (grayscale picture) for a slightly off

 * signal or NOISE for no signal.

		/*

		 * The 'noise' will only be replaced by the actual video

		 * if the output video matches the input video settings.

	/*

	 * There is a fake channel every 6 MHz at 49.25, 55.25, etc.

	 * From +/- 0.25 MHz around the channel there is color, and from

	 * +/- 1 MHz there is grayscale (chroma is lost).

	 * Everywhere else it is just noise.

 (43.25-1) * 16 */) % (6 * 16);

0.75 * 16*/ || freq_modulus > 20 
/*

 * Get the current picture quality and the associated afc value.

	/*

	 * There is a fake channel every 6 MHz at 49.25, 55.25, etc.

	 * From +/- 0.25 MHz around the channel there is color, and from

	 * +/- 1 MHz there is grayscale (chroma is lost).

	 * Everywhere else it is just gray.

 (43.25-1) * 16 */) % (6 * 16);

/*

 * Called whenever the format has to be reset which can occur when

 * changing inputs, standard, timings, etc.

		/*

		 * We can be called from within s_ctrl, in that case we can't

		 * set/get controls. Luckily we don't need to in that case.

 Map the field to something that is valid for the current input */

 This driver supports custom bytesperline values */

 Calculate the minimum supported bytesperline value */

 Calculate the maximum supported bytesperline value */

 Note: the webcam input doesn't support scaling, cropping or composing */

 Guaranteed to be a match */

		/*

		 * Yeah, so sue me, it's an O(n^2) algorithm. But n is a small

		 * number and it's typically a one-time deal.

	/*

	 * Modify the brightness range depending on the input.

	 * This makes it easy to use vivid to test if applications can

	 * handle control range modifications and is also how this is

	 * typically used in practice as different inputs may be hooked

	 * up to different receivers with different control ranges.

 Restore per-input states. */

 Must remain in sync with the vivid_ctrl_standard_strings array */

 Must remain in sync with the vivid_standard array */

 default to 16:9 */

 TODO: a proper hotplug detect cycle should be emulated here */

 timeperframe is arbitrary and continuous */

 resync the thread's timings */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-rds-gen.c - rds (radio data system) generator support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

/*

 * This RDS generator creates 57 RDS groups (one group == four RDS blocks).

 * Groups 0-3, 22-25 and 44-47 (spaced 22 groups apart) are filled with a

 * standard 0B group containing the PI code and PS name.

 *

 * Groups 4-19 and 26-41 use group 2A for the radio text.

 *

 * Group 56 contains the time (group 4A).

 *

 * All remaining groups use a filler group 15B block that just repeats

 * the PI and PTY codes.

 Group 0B */

 Group 2A */

			/*

			 * Group 4A

			 *

			 * Uses the algorithm from Annex G of the RDS standard

			 * EN 50067:1998 to convert a UTC date to an RDS Modified

			 * Julian Day.

 Group 15B */

 Alternate PTY between Info and Weather */

 'KLNX' call sign */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-radio-rx.c - radio receiver support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 Re-init the RDS generator */

	/*

	 * No data is available if there hasn't been time to get new data,

	 * or if the RDS receiver has been disabled, or if we use the data

	 * from the RDS transmitter and that RDS transmitter has been disabled,

	 * or if the signal quality is too weak.

 abs(dev->radio_rx_sig_qual) <= 200, map that to a 0-50% range */

 Skip block altogether */

				/*

				 * Must make sure at least one block is

				 * returned, otherwise the application

				 * might think that end-of-file occurred.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-meta-cap.c - meta capture support functions.

		/*

		 * Error injection: test what happens if buf_prepare() returns

		 * an error.

 abort streaming and wait for last buffer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-vbi-cap.c - vbi capture support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

		/*

		 * Error injection: test what happens if buf_prepare() returns

		 * an error.

 abort streaming and wait for last buffer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-ctrls.c - control support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 General User Controls */

 Framebuffer Controls */

 Video User Controls */

 Video Capture Controls */

 Video Loop Control */

 VBI Capture Control */

 Video Output Controls */

 Streaming Controls */

		/*

		 * We want to set the time 16 seconds before the 32 bit tv_sec

		 * value of struct timeval would wrap around. So first we

		 * calculate ktime_get_ns() % ((1 << 32) * NSEC_PER_SEC), and

		 * then we set the offset to ((1 << 32) - 16) * NSEC_PER_SEC).

 SDTV Capture Controls */

 Radio Receiver Controls */

 Radio Transmitter Controls */

 SDR Capture Controls */

 Metadata Capture Control */

 User Controls */

 Image Processing Controls */

	/*

	 * Testing this driver with v4l2-compliance will trigger the error

	 * injection controls, and after that nothing will work as expected.

	 * So we have a module option to drop these error injecting controls

	 * allowing us to run v4l2_compliance again.

		/*

		 * We aren't doing anything with this at the moment, but

		 * HDMI outputs typically have this controls.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-radio-tx.c - radio transmitter support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

	/*

	 * No data is available if there hasn't been time to get new data,

	 * or if the RDS receiver has been disabled, or if we use the data

	 * from the RDS transmitter and that RDS transmitter has been disabled,

	 * or if the signal quality is too weak.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-radio-common.c - common radio rx/tx support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

/*

 * These functions are shared between the vivid receiver and transmitter

 * since both use the same frequency bands.

 Band FM */

 Band AM */

 Band SW */

/*

 * Initialize the RDS generator. If we can loop, then the RDS generator

 * is set up with the values from the RDS TX controls, otherwise it

 * will fill in standard values using one of two alternates.

 Do nothing, blocks will be filled by the transmitter */

/*

 * Calculate the emulated signal quality taking into account the frequency

 * the transmitter is using.

	/*

	 * For SW and FM there is a channel every 1000 kHz, for AM there is one

	 * every 100 kHz.

		/*

		 * Zero the internal rds buffer if we are going to loop

		 * rds blocks.

	/*

	 * For both receiver and transmitter recalculate the signal quality

	 * (since that depends on both frequencies) and re-init the rds

	 * generator.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-vbi-gen.c - vbi generator support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 WSS has a 5 MHz transmission rate */

 Teletext has a 6.9375 MHz transmission rate */

 prevents 32 bit overflow */

 CC has a 1 MHz transmission rate */

 Clock run-in: 7 cycles */

 2 cycles of 0 */

 Start bit of 1 (each bit is two cycles) */

 Resume Caption Loading */

 End of Caption */

 Resume Caption Loading */

 End of Caption */

 subcode */

 4x3 video aspect ratio */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-meta-out.c - meta output support functions.

		/*

		 * Error injection: test what happens if buf_prepare() returns

		 * an error.

 abort streaming and wait for last buffer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-vid-out.c - video output support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

		/*

		 * You cannot use write() with FIELD_ALTERNATE since the field

		 * information (TOP/BOTTOM) cannot be passed to the kernel.

		/*

		 * Error injection: test what happens if queue_setup() returns

		 * an error.

		/*

		 * Check if the number of requested planes match

		 * the number of planes in the current format. You can't mix that.

		/*

		 * Error injection: test what happens if buf_prepare() returns

		 * an error.

 abort streaming and wait for last buffer */

/*

 * Called whenever the format has to be reset which can occur when

 * changing outputs, standard, timings, etc.

 Map the field to something that is valid for the current output */

 This driver supports custom bytesperline values */

 Calculate the minimum supported bytesperline value */

 Calculate the maximum supported bytesperline value */

	/*

	 * Allow for changing the colorspace on the fly. Useful for testing

	 * purposes, and it is something that HDMI transmitters are able

	 * to do.

	/*

	 * It makes no sense for an OSD to overlay only top or bottom fields,

	 * so always set this to ANY.

		/*

		 * Yeah, so sue me, it's an O(n^2) algorithm. But n is a small

		 * number and it's typically a one-time deal.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-osd.c - osd support for testing overlays.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

/*

 * Order: white, yellow, cyan, green, magenta, red, blue, black,

 * and same again with the alpha bit set (if any)

 --------------------------------------------------------------------- */

 Framebuffer device handling */

/* Check the requested display mode, returning -EINVAL if we can't

 Dummy values */

/* We don't really support blanking. All this does is enable or

 Initialization */

 Setup our initial video mode */

 Color mode */

 Vertical size & position */

 Generate a valid fb_var_screeninfo */

 set default to 1:5:5:5 */

	/* We've filled in the most data, let the usual mode check

 Generate valid fb_fix_screeninfo */

 Generate valid fb_info */

 Supply some monitor specs. Bogus values will do for now */

 Allocate color map */

 Allocate the pseudo palette */

 Release any memory we've grabbed */

 Release cmap */

 Release pseudo palette */

 Initialize the specified card */

 Set the startup video mode information */

 Register the framebuffer */

 Set the card to the requested mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-vbi-out.c - vbi output support functions.

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

		/*

		 * Error injection: test what happens if buf_prepare() returns

		 * an error.

 abort streaming and wait for last buffer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-core.c - A Virtual Video Test Driver, core initialization

 *

 * Copyright 2014 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 The maximum number of vivid devices */

/*

 * Default: video + vbi-cap (raw and sliced) + radio rx + radio tx + sdr +

 * vbi-out + vid-out + meta-cap

 Default: 4 inputs */

 Default: input 0 = WEBCAM, 1 = TV, 2 = SVID, 3 = HDMI */

 Default: 2 outputs */

 Default: output 0 = SVID, 1 = HDMI */

		/*

		 * I am the last user of this driver, and a disconnect

		 * was forced (since this video_device is unregistered),

		 * so re-register all video_device's again.

	/*

	 * Sliced and raw VBI capture share the same queue so we must

	 * change the type.

	/*

	 * Sliced and raw VBI capture share the same queue so we must

	 * change the type.

/* -----------------------------------------------------------------

	Initialization and module stuff

 do we use single- or multi-planar? */

 how many inputs do we have and of what type? */

 The CEC physical address only allows for max 15 inputs */

 how many outputs do we have and of what type? */

		/*

		 * The CEC physical address only allows for max 15 inputs,

		 * so outputs are also limited to 15 to allow for easy

		 * CEC output to input mapping.

 do we create a video capture device? */

 do we create a vbi capture device? */

 do we create a meta capture device */

 sanity checks */

 do we create a video output device? */

 do we create a vbi output device? */

 do we create a metadata output device */

 sanity checks */

 do we create a radio receiver device? */

 do we create a radio transmitter device? */

 do we create a software defined radio capture device? */

 do we have a TV tuner? */

 do we have a tuner? */

 do we have a modulator? */

 do we have a framebuffer for overlay testing? */

 can we do crop/compose/scaling while capturing? */

 if ccs_cap == -1, then the user can select it using controls */

 can we do crop/compose/scaling with video output? */

 if ccs_out == -1, then the user can select it using controls */

 do we create a touch capture device */

 set up the capabilities of the video capture device */

 set up the capabilities of the video output device */

 set up the capabilities of the vbi capture device */

 set up the capabilities of the vbi output device */

 set up the capabilities of the sdr capture device */

 set up the capabilities of the radio receiver device */

 set up the capabilities of the radio transmitter device */

 set up the capabilities of meta capture device */

 set up the capabilities of meta output device */

 set up the capabilities of the touch capture device */

 disable invalid ioctls based on the feature set */

	/*

	 * Create a char pointer array that points to the names of all the

	 * preset timings

	/*

	 * Create a string array containing the names of all the preset

	 * timings. Each name is max 31 chars long (+ terminating 0).

 start creating the vb2 queues */

 initialize vid_cap queue */

 initialize vid_out queue */

 initialize vbi_cap queue */

 initialize vbi_out queue */

 initialize sdr_cap queue */

 initialize meta_cap queue */

 initialize meta_out queue */

 initialize touch_cap queue */

 Create framebuffer for testing capture/output overlay */

		/*

		 * Provide a mutex to v4l2 core. It will be used to protect

		 * all fops and v4l2 ioctls.

		/*

		 * Provide a mutex to v4l2 core. It will be used to protect

		 * all fops and v4l2 ioctls.

 Register the media device */

 allocate main vivid state structure */

 Initialize media device */

 register v4l2_device */

 initialize the test pattern generator */

 load the edid */

 configure internal data */

 175.25 * 16 */;

 create all controls */

 enable/disable interface specific controls */

	/*

	 * update the capture and output formats to do a proper initial

	 * configuration.

 initialize overlay */

 update touch configuration */

 initialize locks */

 init dma queues */

 finally start creating the device nodes */

 Now that everything is fine, let's add it to device list */

/* This routine allocates from 1 to n_devs virtual drivers.



   The real maximum number of virtual drivers will depend on how many drivers

   will succeed. This is limited to the maximum number of devices that

   videodev supports, which is equal to VIDEO_NUM_DEVICES.

 If some instantiations succeeded, keep driver */

 n_devs will reflect the actual number of allocated devices */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vivid-kthread-touch.c - touch capture thread support functions.

 *

 Resets frame counters */

 Calculate the number of jiffies since we started streaming */

 Get the number of buffers streamed since the start */

		/*

		 * After more than 0xf0000000 (rounded down to a multiple of

		 * 'jiffies-per-day' to ease jiffies_to_msecs calculation)

		 * jiffies have passed since we started streaming reset the

		 * counters and keep track of the sequence offset.

		/*

		 * Calculate the number of 'numerators' streamed

		 * since we started, including the current buffer.

 And the number of jiffies since we started */

		/*

		 * Calculate when that next buffer is supposed to start

		 * in jiffies since we started streaming.

 If it is in the past, then just schedule asap */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Media device

 *

 * Copyright (C) 2010 Nokia Corporation

 *

 * Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 *	     Sakari Ailus <sakari.ailus@iki.fi>

/*

 * Legacy defines from linux/media.h. This is the only place we need this

 * so we just define it here. The media.h header doesn't expose it to the

 * kernel to prevent it from being used by drivers, but here (and only here!)

 * we need it to handle the legacy behavior.

/* -----------------------------------------------------------------------------

 * Userspace API

 Unused */

 Unused */

	/*

	 * Workaround for a bug at media-ctl <= v1.10 that makes it to

	 * do the wrong thing if the entity function doesn't belong to

	 * either MEDIA_ENT_F_OLD_BASE or MEDIA_ENT_F_OLD_SUBDEV_BASE

	 * Ranges.

	 *

	 * Non-subdevices are expected to be at the MEDIA_ENT_F_OLD_BASE,

	 * or, otherwise, will be silently ignored by media-ctl when

	 * printing the graphviz diagram. So, map them into the devnode

	 * old range.

 Ignore backlinks. */

	/* Find the source and sink entities and link.

 Setup the link on both entities. */

 Get entities and number of entities */

 Copy fields to userspace struct if not error */

 Get interfaces and number of interfaces */

 Copy intf fields to userspace struct */

 Get pads and number of pads */

 Copy pad fields to userspace struct */

 Get links and number of links */

 Copy link fields to userspace struct */

 Do acquire the graph mutex */

 the table is indexed by _IOC_NR(cmd) */

 struct media_pad_desc * */

 struct media_link_desc * */

 CONFIG_COMPAT */

 CONFIG_COMPAT */

/* -----------------------------------------------------------------------------

 * sysfs

/* -----------------------------------------------------------------------------

 * Registration/unregistration

 Remove all interface links pointing to this entity */

 Remove all data links that belong to this entity */

 Remove all pads that belong to this entity */

 Remove the entity */

 invoke entity_notify callbacks to handle entity removal?? */

/**

 * media_device_register_entity - Register an entity with a media device

 * @mdev:	The media device

 * @entity:	The entity

 Warn if we apparently re-register an entity */

 Initialize media_gobj embedded at the entity */

 Initialize objects at the pads */

 invoke entity_notify callbacks */

		/*

		 * Initialise the new graph walk before cleaning up

		 * the old one in order not to spoil the graph walk

		 * object of the media device if graph walk init fails.

/**

 * media_device_init() - initialize a media device

 * @mdev:	The media device

 *

 * The caller is responsible for initializing the media device before

 * registration. The following fields must be set:

 *

 * - dev must point to the parent device

 * - model must be filled with the device model name

 Register the device node. */

 Set version 0 to indicate user-space that the graph is static */

 devnode free is handled in media_devnode_*() */

 devnode free is handled in media_devnode_*() */

/*

 * Note: Should be called with mdev->lock held.

 Check if mdev was ever registered at all */

 Clear the devnode register bit to avoid races with media dev open */

 Remove all entities from the media device */

 Remove all entity_notify callbacks from the media device */

 Remove all interfaces from the media device */

		/*

		 * Unlink the interface, but don't free it here; the

		 * module which created it is responsible for freeing

		 * it

 devnode free is handled in media_devnode_*() */

 CONFIG_MEDIA_CONTROLLER */

 SPDX-License-Identifier: GPL-2.0

/*

 * Media device request objects

 *

 * Copyright 2018 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 * Copyright (C) 2018 Intel Corporation

 * Copyright (C) 2018 Google, Inc.

 *

 * Author: Hans Verkuil <hans.verkuil@cisco.com>

 * Author: Sakari Ailus <sakari.ailus@linux.intel.com>

 Just a sanity check. No other code path is allowed to change this. */

 No other users, no need for a spinlock */

	/*

	 * Ensure the request that is validated will be the one that gets queued

	 * next by serialising the queueing process. This mutex is also used

	 * to serialize with canceling a vb2 queue and with setting values such

	 * as controls in a request.

	/*

	 * If the req_validate was successful, then we mark the state as QUEUED

	 * and call req_queue. The reason we set the state first is that this

	 * allows req_queue to unbind or complete the queued objects in case

	 * they are immediately 'consumed'. State changes from QUEUED to another

	 * state can only happen if either the driver changes the state or if

	 * the user cancels the vb2 queue. The driver can only change the state

	 * after each object is queued through the req_queue op (and note that

	 * that op cannot fail), so setting the state to QUEUED up front is

	 * safe.

	 *

	 * The other reason for changing the state is if the vb2 queue is

	 * canceled, and that uses the req_queue_mutex which is still locked

	 * while req_queue is called, so that's safe as well.

 CONFIG_COMPAT */

	/*

	 * Note: as long as someone has an open filehandle of the request,

	 * the request can never be released. The fdget() above ensures that

	 * even if userspace closes the request filehandle, the release()

	 * fop won't be called, so the media_request_get() always succeeds

	 * and there is no race condition where the request was released

	 * before media_request_get() is called.

 Either both are NULL or both are non-NULL */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Media device node

 *

 * Copyright (C) 2010 Nokia Corporation

 *

 * Based on drivers/media/video/v4l2_dev.c code authored by

 *	Mauro Carvalho Chehab <mchehab@kernel.org> (version 2)

 *	Alan Cox, <alan@lxorguk.ukuu.org.uk> (version 1)

 *

 * Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 *	     Sakari Ailus <sakari.ailus@iki.fi>

 *

 * --

 *

 * Generic media device node infrastructure to register and unregister

 * character devices using a dynamic major number and proper reference

 * counting.

/*

 *	Active devices

 Called when the last user of the media device exits. */

 Mark device node number as free */

 Release media_devnode and perform other cleanups as needed. */

 CONFIG_COMPAT */

 Override for the open function */

	/* Check if the media device is available. This needs to be done with

	 * the media_devnode_lock held to prevent an open/unregister race:

	 * without the lock, the device could be unregistered and freed between

	 * the media_devnode_is_registered() and get_device() calls, leading to

	 * a crash.

	/* return ENXIO if the media device has been removed

 and increase the device refcount */

 Override for the release function */

	/* decrease the refcount unconditionally since the release()

 CONFIG_COMPAT */

 Part 1: Find a free minor number */

 Part 1: Initialize dev now to use dev.kobj for cdev.kobj.parent */

 Part 2: Initialize the character device */

 Part 3: Add the media and char device */

 Part 4: Activate this minor. The char device can now be used. */

 Check if devnode was ever registered at all */

 Delete the cdev on this minor as well */

/*

 *	Initialise media for linux

 SPDX-License-Identifier: GPL-2.0

/*

 * media-dev-allocator.c - Media Controller Device Allocator API

 *

 * Copyright (c) 2019 Shuah Khan <shuah@kernel.org>

 *

 * Credits: Suggested by Laurent Pinchart <laurent.pinchart@ideasonboard.com>

/*

 * This file adds a global refcounted Media Controller Device Instance API.

 * A system wide global media device list is managed and each media device

 * includes a kref count. The last put on the media device releases the media

 * device instance.

 *

 Callers should hold media_device_lock when calling this function */

 get module reference for the media_device owner */

 check if media device is already initialized */

 put module reference for the media_device owner */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Media entity

 *

 * Copyright (C) 2010 Nokia Corporation

 *

 * Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 *	     Sakari Ailus <sakari.ailus@iki.fi>

/**

 *  dev_dbg_obj - Prints in debug mode a change on some object

 *

 * @event_name:	Name of the event to report. Could be __func__

 * @gobj:	Pointer to the object

 *

 * Enabled only if DEBUG or CONFIG_DYNAMIC_DEBUG. Otherwise, it

 * won't produce any code.

 Create a per-type unique object ID */

 Do nothing if the object is not linked. */

 Remove the object from mdev list */

/*

 * TODO: Get rid of this.

/* -----------------------------------------------------------------------------

 * Graph traversal

 push an entity to traversal stack */

/**

 * media_graph_walk_init - Allocate resources for graph walk

 * @graph: Media graph structure that will be used to walk the graph

 * @mdev: Media device

 *

 * Reserve resources for graph walk in media device's current

 * state. The memory must be released using

 * media_graph_walk_free().

 *

 * Returns error on failure, zero on success.

/**

 * media_graph_walk_cleanup - Release resources related to graph walking

 * @graph: Media graph structure that was used to walk the graph

 The link is not enabled so we do not follow. */

 Get the entity at the other end of the link. */

 Has the entity already been visited? */

 Push the new entity to stack and start over. */

	/*

	 * Depth first search. Push entity to stack and continue from

	 * top of the stack until no more entities on the level can be

	 * found.

/* -----------------------------------------------------------------------------

 * Pipeline management

 Already streaming --- no need to check. */

 Mark that a pad is connected by a link. */

			/*

			 * Pads that either do not need to connect or

			 * are connected through an enabled link are

			 * fine.

			/*

			 * Link validation will only take place for

			 * sink ends of the link that are enabled.

 Either no links or validated links are fine. */

	/*

	 * Link validation on graph failed. We revert what we did and

	 * return the error.

 Sanity check for negative stream_count */

		/*

		 * We haven't increased stream_count further than this

		 * so we quit here.

	/*

	 * If the following check fails, the driver has performed an

	 * unbalanced call to media_pipeline_stop()

 Sanity check for negative stream_count */

/* -----------------------------------------------------------------------------

 * Links management

 Remove the remote link */

 This is an error! */

 Initialize graph object embedded at the new link */

	/* Create the backlink. Backlinks are used to help graph traversal and

	 * are not reported to userspace.

 Initialize graph object embedded at the new link */

 Trivial case: 1:1 relation */

 Worse case scenario: n:n relation */

 Handle 1:n and n:1 cases */

 Do nothing if the entity is not registered. */

 Notify both entities. */

 The non-modifiable link flags must not be modified. */

 Functions related to the media interface via device nodes */

 Initialize graph object embedded at the new link */

 Do nothing if the intf is not registered. */

 Do nothing if the intf is not registered. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Pulse Eight HDMI CEC driver

 *

 * Copyright 2016 Hans Verkuil <hverkuil@xs4all.nl

/*

 * Notes:

 *

 * - Devices with firmware version < 2 do not store their configuration in

 *   EEPROM.

 *

 * - In autonomous mode, only messages from a TV will be acknowledged, even

 *   polling messages. Upon receiving a message from a TV, the dongle will

 *   respond to messages from any logical address.

 *

 * - In autonomous mode, the dongle will by default reply Feature Abort

 *   [Unrecognized Opcode] when it receives Give Device Vendor ID. It will

 *   however observe vendor ID's reported by other devices and possibly

 *   alter this behavior. When TV's (and TV's only) report that their vendor ID

 *   is LG (0x00e091), the dongle will itself reply that it has the same vendor

 *   ID, and it will respond to at least one vendor specific command.

 *

 * - In autonomous mode, the dongle is known to attempt wakeup if it receives

 *   <User Control Pressed> ["Power On"], ["Power] or ["Power Toggle"], or if it

 *   receives <Set Stream Path> with its own physical address. It also does this

 *   if it receives <Vendor Specific Command> [0x03 0x00] from an LG TV.

 0x08 */

 0x10 */

 0x18 */

 0x20 */

 Removed in FW >= 10 */

 0x28 */

 New for FW >= 10 */

 protect rx_msg_cur_idx and rx_msg_num */

 locks access to the adapter */

			/*

			 * Test if we are receiving a new msg when a previous

			 * message is still pending.

			/*

			 * A NACK for a broadcast message makes no sense, these

			 * seem to be spurious messages and are skipped.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * RainShadow Tech HDMI CEC driver

 *

 * Copyright 2016 Hans Verkuil <hverkuil@xs4all.nl

/*

 * Notes:

 *

 * The higher level protocols are currently disabled. This can be added

 * later, similar to how this is done for the Pulse Eight CEC driver.

 *

 * Documentation of the protocol is available here:

 *

 * http://rainshadowtech.com/doc/HDMICECtoUSBandRS232v2.0.pdf

 Low-level ringbuffer, collecting incoming characters */

 command buffer */

 reply to a command, only used to store the firmware version */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cec-core.c - HDMI Consumer Electronics Control framework - Core

 *

 * Copyright 2016 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 Active devices */

 dev to cec_devnode */

	/*

	 * Check if the cec device is available. This needs to be done with

	 * the devnode->lock held to prevent an open/unregister race:

	 * without the lock, the device could be unregistered and freed between

	 * the devnode->registered check and get_device() calls, leading to

	 * a crash.

	/*

	 * return ENXIO if the cec device has been removed

	 * already or if it is not registered anymore.

 and increase the device refcount */

 Called when the last user of the cec device exits. */

 Mark device node number as free */

/*

 * Register a cec device node

 *

 * The registration code assigns minor numbers and registers the new device node

 * with the kernel. An error is returned if no free minor number can be found,

 * or if the registration of the device node fails.

 *

 * Zero is returned on success.

 *

 * Note that if the cec_devnode_register call fails, the release() callback of

 * the cec_devnode structure is *not* called, so the caller is responsible for

 * freeing any data.

 Part 1: Find a free minor number */

 Part 2: Initialize and register the character device */

/*

 * Unregister a cec device node

 *

 * This unregisters the passed device. Future open calls will be met with

 * errors.

 *

 * This function can safely be called if the device node has never been

 * registered or has already been unregistered.

 Check if devnode was never registered or already unregistered */

 adap->devnode initialization */

 Prepare the RC input device */

 Note: rc_unregister also calls rc_free */

 Note: rc_unregister also calls rc_free */

/*

 *	Initialise cec for linux

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cec-notifier.c - notify CEC drivers of physical address changes

 *

 * Copyright 2016 Russell King.

 * Copyright 2016-2017 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

/**

 * cec_notifier_get_conn - find or create a new cec_notifier for the given

 * device and connector tuple.

 * @hdmi_dev: device that sends the events.

 * @port_name: the connector name from which the event occurs

 *

 * If a notifier for device @dev already exists, then increase the refcount

 * and return that notifier.

 *

 * If it doesn't exist, then allocate a new notifier struct and return a

 * pointer to that new struct.

 *

 * Return NULL if the memory could not be allocated.

	/*

	 * Note that the device struct is only used as a key into the

	 * cec_notifiers list, it is never actually accessed.

	 * So we decrement the reference here so we don't leak

	 * memory.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2017 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 Only when 18 bits have been received do we have a valid cmd */

 Invalid bit position may not be the Ack bit */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cec-api.c - HDMI Consumer Electronics Control framework - API

 *

 * Copyright 2016 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 CEC file operations */

	/*

	 * Exclusive initiators and followers can always access the CEC adapter

	/*

	 * All others can only access the CEC adapter if there is no

	 * exclusive initiator and they are in INITIATOR mode.

	/*

	 * We use memcpy here instead of assignment since there is a

	 * hole at the end of struct cec_log_addrs that an assignment

	 * might ignore. So when we do copy_to_user() we could leak

	 * one byte of memory.

 Called by CEC_RECEIVE: wait for a message to arrive */

 Are there received messages queued up? */

 Yes, return the first one */

 restore original timeout value */

 No, return EAGAIN in non-blocking mode or wait */

 Return when in non-blocking mode */

 The user specified a timeout */

 Wait indefinitely */

 Exit on error, otherwise loop to get the new message */

 Find the oldest event */

 Follower modes should always be able to send CEC messages */

 Monitor modes require CEC_MODE_NO_INITIATOR */

 Monitor modes require CAP_NET_ADMIN */

	/*

	 * You can't become exclusive follower if someone else already

	 * has that job.

	/*

	 * You can't become exclusive initiator if someone else already

	 * has that job.

	/*

	 * Initial events that are automatically sent when the cec device is

	 * opened.

 Queue up initial state events */

 Override for the release function */

 Unhook pending transmits from this filehandle. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2017 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 All timings are in microseconds */

 start bit timings */

 data bit timings */

 earliest safe time to sample the bit state */

 earliest time the bit is back to 1 (T7 + 50) */

 when idle, sample once per millisecond */

 when processing the start bit, sample twice per millisecond */

 when polling for a state change, sample once every 50 microseconds */

/*

 * Total data bit time that is too short/long for a valid bit,

 * used for error injection.

/*

 * Total start bit time that is too short/long for a valid bit,

 * used for error injection.

 Data bits are 0-7, EOM is bit 8 and ACK is bit 9 */

	/*

	 * Reset all status fields, release the bus and

	 * go to idle state.

/*

 * Handle Transmit-related states

 *

 * Basic state changes when transmitting:

 *

 * Idle -> Tx Wait (waiting for the end of signal free time) ->

 *	Tx Start Bit Low -> Tx Start Bit High ->

 *

 *   Regular data bits + EOM:

 *	Tx Data 0 Low -> Tx Data 0 High ->

 *   or:

 *	Tx Data 1 Low -> Tx Data 1 High ->

 *

 *   First 4 data bits or Ack bit:

 *	Tx Data 0 Low -> Tx Data 0 High ->

 *   or:

 *	Tx Data 1 Low -> Tx Data 1 High -> Tx Data 1 Pre Sample ->

 *		Tx Data 1 Post Sample ->

 *

 *   After the last Ack go to Idle.

 *

 * If it detects a Low Drive condition then:

 *	Tx Wait For High -> Idle

 *

 * If it loses arbitration, then it switches to state Rx Data Post Sample.

			/*

			 * Error Injection: send an invalid (too short)

			 * start pulse.

			/*

			 * Error Injection: send an invalid (too long)

			 * start pulse.

 Generate start bit */

 Generate start bit */

		/*

		 * If the read value is 1, then all is OK, otherwise we have a

		 * low drive condition.

		 *

		 * Special case: when we generate a poll message due to an

		 * Arbitration Lost error injection, then ignore this since

		 * the pin can actually be low in that case.

			/*

			 * It's 0, so someone detected an error and pulled the

			 * line low for 1.5 times the nominal bit period.

 Error Injection: just stop sending after this bit */

 Error injection: go to low drive */

			/*

			 * In the CEC_ERROR_INJ_TX_ADD_BYTES case we transmit

			 * extra bytes, so pin->tx_bit / 10 can become >= 16.

			 * Generate bit values for those extra bytes instead

			 * of reading them from the transmit buffer.

 Error injection: set EOM one byte early */

 Error injection: no EOM */

 Error Injection: send an invalid (too short) bit */

 Error Injection: send an invalid (too long) bit */

 Read the CEC value at the sample time */

		/*

		 * If v == 0 and we're within the first 4 bits

		 * of the initiator, then someone else started

		 * transmitting and we lost the arbitration

		 * (i.e. the logical address of the other

		 * transmitter has more leading 0 bits in the

		 * initiator).

 Error Injection: send an invalid (too short) bit */

 Error Injection: send an invalid (too long) bit */

 Was the message ACKed? */

			/*

			 * Note: the CEC spec is ambiguous regarding

			 * what action to take when a NACK appears

			 * before the last byte of the payload was

			 * transmitted: either stop transmitting

			 * immediately, or wait until the last byte

			 * was transmitted.

			 *

			 * Most CEC implementations appear to stop

			 * immediately, and that's what we do here

			 * as well.

/*

 * Handle Receive-related states

 *

 * Basic state changes when receiving:

 *

 *	Rx Start Bit Low -> Rx Start Bit High ->

 *   Regular data bits + EOM:

 *	Rx Data Sample -> Rx Data Post Sample -> Rx Data High ->

 *   Ack bit 0:

 *	Rx Ack Low -> Rx Ack Low Post -> Rx Data High ->

 *   Ack bit 1:

 *	Rx Ack High Post -> Rx Data High ->

 *   Ack bit 0 && EOM:

 *	Rx Ack Low -> Rx Ack Low Post -> Rx Ack Finish -> Idle

 Receive states */

 Start bit low is too short, go back to idle */

		/*

		 * Unfortunately the spec does not specify when to give up

		 * and go to idle. We just pick TOTAL_LONG.

 Start bit is too short, go back to idle */

 Error injection: go to low drive */

		/*

		 * Unfortunately the spec does not specify when to give up

		 * and go to idle. We just pick TOTAL_LONG.

 Error injection: go to low drive */

		/*

		 * Go to low drive state when the total bit time is

		 * too short.

 for_us == broadcast or directed to us */

 ACK bit value */

 Error injection: toggle the ACK bit */

 No need to write to the bus, just wait */

/*

 * Main timer function

 *

 Keep track of timer overruns */

		/*

		 * If we are monitoring the pin, then we have to

		 * sample at regular intervals.

 Transmit states */

 Receive states */

 Start bit, switch to receive state */

			/*

			 * If a transmit is pending, then that transmit should

			 * use a signal free time of no more than

			 * CEC_SIGNAL_FREE_TIME_NEW_INITIATOR since it will

			 * have a new initiator due to the receive that is now

			 * starting.

			/*

			 * Check if the bus has been free for long enough

			 * so we can kick off the pending transmit.

 Generate start bit */

 Generate custom pulse */

 Switch to interrupt mode */

 Error injection: add byte to the message */

 Error injection: remove byte from message */

	/*

	 * If a receive is in progress, then this transmit should use

	 * a signal free time of max CEC_SIGNAL_FREE_TIME_NEW_INITIATOR

	 * since when it starts transmitting it will have a new initiator.

 Error injection: add byte to the message */

 Error injection: remove byte from the message */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cec-adap.c - HDMI Consumer Electronics Control framework - CEC adapter

 *

 * Copyright 2016 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

/*

 * 400 ms is the time it takes for one 16 byte message to be

 * transferred and 5 is the maximum number of retries. Add

 * another 100 ms as a margin. So if the transmit doesn't

 * finish before that time something is really wrong and we

 * have to time out.

 *

 * This is a sign that something it really wrong and a warning

 * will be issued.

/*

 * Queue a new event for this filehandle. If ts == 0, then set it

 * to the current time.

 *

 * We keep a queue of at most max_event events where max_event differs

 * per event. If the queue becomes full, then drop the oldest event and

 * keep track of how many events we've dropped.

 Add new msg at the end of the queue */

 drop the oldest event */

 Mark that events were lost */

 Queue a new event for all open filehandles. */

 Notify userspace that the CEC pin changed state at the given time. */

 Notify userspace that the HPD pin changed state at the given time. */

 Notify userspace that the 5V pin changed state at the given time. */

/*

 * Queue a new message for this filehandle.

 *

 * We keep a queue of at most CEC_MAX_MSG_RX_QUEUE_SZ messages. If the

 * queue becomes full, then drop the oldest message and keep track

 * of how many messages we've dropped.

 Add new msg at the end of the queue */

 All is fine if there is enough room */

		/*

		 * if the message queue is full, then drop the oldest one and

		 * send a lost message event.

	/*

	 * We lost a message, either because kmalloc failed or the queue

	 * was full.

/*

 * Queue the message for those filehandles that are in monitor mode.

 * If valid_la is true (this message is for us or was sent by us),

 * then pass it on to any monitoring filehandle. If this message

 * isn't for us or from us, then only give it to filehandles that

 * are in MONITOR_ALL mode.

 *

 * This can only happen if the CEC_CAP_MONITOR_ALL capability is

 * set and the CEC adapter was placed in 'monitor all' mode.

/*

 * Queue the message for follower filehandles.

 Notify userspace of an adapter state change. */

/*

 * A CEC transmit (and a possible wait for reply) completed.

 * If this was in blocking mode, then complete it, otherwise

 * queue the message for userspace to dequeue later.

 *

 * This function is called with adap->lock held.

	/*

	 * Delete this transmit from the filehandle's xfer_list since

	 * we're done with it.

	 *

	 * Note that if the filehandle is closed before this transmit

	 * finished, then the release() function will set data->fh to NULL.

	 * Without that we would be referring to a closed filehandle.

		/*

		 * Someone is blocking so mark the message as completed

		 * and call complete.

		/*

		 * No blocking, so just queue the message if needed and

		 * free the memory.

/*

 * A pending CEC transmit needs to be cancelled, either because the CEC

 * adapter is disabled or the transmit takes an impossibly long time to

 * finish.

 *

 * This function is called with adap->lock held.

	/*

	 * It's either the current transmit, or it is a pending

	 * transmit. Take the appropriate action to clear it.

 Queue transmitted message for monitoring purposes */

/*

 * Flush all pending transmits and cancel any pending timeout work.

 *

 * This function is called with adap->lock held.

	/*

	 * If the adapter is disabled, or we're asked to stop,

	 * then cancel any pending transmits.

 Cancel the pending timeout work. */

		/*

		 * If cancel_delayed_work returned false, then

		 * the cec_wait_timeout function is running,

		 * which will call cec_data_completed. So no

		 * need to do anything special in that case.

	/*

	 * If something went wrong and this counter isn't what it should

	 * be, then this will reset it back to 0. Warn if it is not 0,

	 * since it indicates a bug, either in this framework or in a

	 * CEC driver.

/*

 * Main CEC state machine

 *

 * Wait until the thread should be stopped, or we are not transmitting and

 * a new transmit message is queued up, in which case we start transmitting

 * that message. When the adapter finished transmitting the message it will

 * call cec_transmit_done().

 *

 * If the adapter is disabled, then remove all queued messages instead.

 *

 * If the current transmit times out, then cancel that transmit.

			/*

			 * We are transmitting a message, so add a timeout

			 * to prevent the state machine to get stuck waiting

			 * for this message to finalize and add a check to

			 * see if the adapter is disabled in which case the

			 * transmit should be canceled.

 Otherwise we just wait for something to happen. */

			/*

			 * If we timeout, then log that. Normally this does

			 * not happen and it is an indication of a faulty CEC

			 * adapter driver, or the CEC bus is in some weird

			 * state. On rare occasions it can happen if there is

			 * so much traffic on the bus that the adapter was

			 * unable to transmit for CEC_XFER_TIMEOUT_MS (2.1s).

 Just give up on this. */

		/*

		 * If we are still transmitting, or there is nothing new to

		 * transmit, then just continue waiting.

 Get a new message to transmit */

 Make this the current transmitting message */

		/*

		 * Suggested number of attempts as per the CEC 2.0 spec:

		 * 4 attempts is the default, except for 'secondary poll

		 * messages', i.e. poll messages not sent during the adapter

		 * configuration phase when it allocates logical addresses.

 Set the suggested signal free time */

 should be >= 3 data bit periods for a retry */

 should be >= 5 data bit periods for new initiator */

			/*

			 * should be >= 7 data bit periods for sending another

			 * frame immediately after another.

 Tell the adapter to transmit, cancel on error */

/*

 * Called by the CEC adapter if a transmit finished.

		/*

		 * This might happen if a transmit was issued and the cable is

		 * unplugged while the transmit is ongoing. Ignore this

		 * transmit in that case.

 Drivers must fill in the status! */

 Mark that we're done with this transmit */

	/*

	 * If there are still retry attempts left and there was an error and

	 * the hardware didn't signal that it retried itself (by setting

	 * CEC_TX_STATUS_MAX_RETRIES), then we will retry ourselves.

 Retry this message */

 Add the message in front of the transmit queue */

 Always set CEC_TX_STATUS_MAX_RETRIES on error */

 Queue transmitted message for monitoring purposes */

		/*

		 * Queue the message into the wait queue if we want to wait

		 * for a reply.

 Otherwise we're done */

	/*

	 * Wake up the main thread to see if another message is ready

	 * for transmitting or to retry the current message.

 Should never happen */

/*

 * Called when waiting for a reply times out.

	/*

	 * Sanity check in case the timeout and the arrival of the message

	 * happened at the same time.

 Mark the message as timed out */

/*

 * Transmit a message. The fh argument may be NULL if the transmit is not

 * associated with a specific filehandle.

 *

 * This function is called with adap->lock held.

 Make sure the timeout isn't 0. */

 Sanity checks */

 A CDC-Only device can only send CDC messages */

				/*

				 * If the destination is a logical address our

				 * adapter has already claimed, then just NACK

				 * this. It depends on the hardware what it will

				 * do with a POLL to itself (some OK this), so

				 * it is just as easy to handle it here so the

				 * behavior will be consistent.

		/*

		 * Special case: allow Ping and IMAGE/TEXT_VIEW_ON to be

		 * transmitted to a TV, even if the adapter is unconfigured.

		 * This makes it possible to detect or wake up displays that

		 * pull down the HPD when in standby.

 All done if we don't need to block waiting for completion */

	/*

	 * Release the lock and wait, retake the lock afterwards.

 Cancel the transmit if it was interrupted */

 The transmit completed (possibly with an error) */

 Helper function to be used by drivers and this framework. */

/*

 * I don't like forward references but without this the low-level

 * cec_received_msg() function would come after a bunch of high-level

 * CEC protocol handling functions. That was very confusing.

 broadcast only allowed for >= 2.0 */

/*

 * Specify minimum length and whether the message is directed, broadcast

 * or both. Messages that do not match the criteria are ignored as per

 * the CEC specification.

 Called by the CEC adapter if a message is received */

	/*

	 * Some CEC adapters will receive the messages that they transmitted.

	 * This test filters out those messages by checking if we are the

	 * initiator, and just returning in that case.

	 *

	 * Note that this won't work if this is an Unregistered device.

	 *

	 * It is bad practice if the hardware receives the message that it

	 * transmitted and luckily most CEC adapters behave correctly in this

	 * respect.

 Check if this message was for us (directed or broadcast). */

	/*

	 * Check if the length is not too short or if the message is a

	 * broadcast message where a directed message was expected or

	 * vice versa. If so, then the message has to be ignored (according

	 * to section CEC 7.3 and CEC 12.2).

 These messages have special length requirements */

 It's a valid message and not a poll or CDC message */

 The aborted command is in msg[2] */

		/*

		 * Walk over all transmitted messages that are waiting for a

		 * reply.

			/*

			 * The *only* CEC message that has two possible replies

			 * is CEC_MSG_INITIATE_ARC.

			 * In this case allow either of the two replies.

 Does the command match? */

 Does the addressing match? */

 We got a reply */

 Remove it from the wait_queue */

 Cancel the pending timeout work */

			/*

			 * Mark this as a reply, provided someone is still

			 * waiting for the answer.

 Pass the message on to any monitoring filehandles */

 We're done if it is not for us or a poll message */

	/*

	 * Process the message on the protocol level. If is_reply is true,

	 * then cec_receive_notify() won't pass on the reply to the listener(s)

	 * since that was already done by cec_data_completed() above.

 Logical Address Handling */

/*

 * Attempt to claim a specific logical address.

 *

 * This function is called with adap->lock held.

 Send poll message */

		/*

		 * While trying to poll the physical address was reset

		 * and the adapter was unconfigured, so bail out.

		/*

		 * The message was aborted due to a disconnect or

		 * unconfigure, just bail out.

		/*

		 * Retry up to max_retries times if the message was neither

		 * OKed or NACKed. This can happen due to e.g. a Lost

		 * Arbitration condition.

	/*

	 * If we are unable to get an OK or a NACK after max_retries attempts

	 * (and note that each attempt already consists of four polls), then

	 * we assume that something is really weird and that it is not a

	 * good idea to try and claim this logical address.

	/*

	 * Message not acknowledged, so this logical

	 * address is free to use.

/*

 * Unconfigure the adapter: clear all logical addresses and send

 * the state changed event.

 *

 * This function is called with adap->lock held.

/*

 * Attempt to claim the required logical addresses.

 The various LAs for each type of device */

		/*

		 * The TV functionality can only map to physical address 0.

		 * For any other address, try the Specific functionality

		 * instead as per the spec.

 Reused last LA */

 Tried this one already, skip it */

 The backup addresses are CEC 2.0 specific */

 LA is in use */

 Done, claimed an LA */

 Fall back to unregistered */

	/*

	 * Now post the Report Features and Report Physical Address broadcast

	 * messages. Note that these are non-blocking transmits, meaning that

	 * they are just queued up and once adap->lock is unlocked the main

	 * thread will kick in and start transmitting these.

	 *

	 * If after this function is done (but before one or more of these

	 * messages are actually transmitted) the CEC adapter is unconfigured,

	 * then any remaining messages will be dropped by the main thread.

 Report Features must come first according to CEC 2.0 */

 Report Physical Address */

 Report Vendor ID */

/*

 * Called from either __cec_s_phys_addr or __cec_s_log_addrs to claim the

 * logical addresses.

 *

 * This function is called with adap->lock held.

 Ready to kick off the thread */

/* Set a new physical address and send an event notifying userspace of this.

 *

 * This function is called with adap->lock held.

 Disabling monitor all mode should always succeed */

/*

 * Called from either the ioctl or a driver to set the logical addresses.

 *

 * This function is called with adap->lock held.

		/*

		 * Sanitize log_addrs fields if a CDC-Only device is

		 * requested.

		/*

		 * This is just an internal convention since a CDC-Only device

		 * doesn't have to be a switch. But switches already use

		 * unregistered, so it makes some kind of sense to pick this

		 * as the primary device. Since a CDC-Only device never sends

		 * any 'normal' CEC messages this primary device type is never

		 * sent over the CEC bus.

 Ensure the osd name is 0-terminated */

 Sanity checks */

	/*

	 * Vendor ID is a 24 bit number, so check if the value is

	 * within the correct range.

 Record already contains the playback functionality */

 Zero unused part of the feature array */

 Zero unused LAs */

 High-level core CEC message handling */

 Fill in the Report Features message */

 Report Features */

 Write RC Profiles first, then Device Features */

 Transmit the Feature Abort message */

	/*

	 * Don't reply with CEC_MSG_FEATURE_ABORT to a CEC_MSG_FEATURE_ABORT

	 * message!

 Don't Feature Abort messages from 'Unregistered' */

/*

 * Called when a CEC message is received. This function will do any

 * necessary core processing. The is_reply bool is true if this message

 * is a reply to an earlier transmit.

 *

 * The message is either a broadcast message or a valid directed message.

 If this is a CDC-Only device, then ignore any non-CDC messages */

 Allow drivers to process the message first */

	/*

	 * REPORT_PHYSICAL_ADDR, CEC_MSG_USER_CONTROL_PRESSED and

	 * CEC_MSG_USER_CONTROL_RELEASED messages always have to be

	 * handled by the CEC core, even if the passthrough mode is on.

	 * The others are just ignored if passthrough mode is on.

		/*

		 * These messages reply with a directed message, so ignore if

		 * the initiator is Unregistered.

		/*

		 * Skip processing these messages if the passthrough mode

		 * is on.

 Ignore if addressing is wrong */

 Wrong addressing mode: don't process */

		/*

		 * This message is always processed, regardless of the

		 * passthrough setting.

		 *

		 * Exception: don't process if wrong addressing mode.

 The following messages are processed but still passed through */

		/*

		 * Play function, this message can have variable length

		 * depending on the specific play function that is used.

		/*

		 * Other function messages that are not handled.

		 * Currently the RC framework does not allow to supply an

		 * additional parameter to a keypress. These "keys" contain

		 * other information such as channel number, an input number

		 * etc.

		 * For the time being these messages are not processed by the

		 * framework and are simply forwarded to the user space.

	/*

	 * The remaining messages are only processed if the passthrough mode

	 * is off.

 Do nothing for CEC switches using addr 15 */

 Do nothing for CEC switches */

		/*

		 * Unprocessed messages are aborted if userspace isn't doing

		 * any processing either.

 If this was a reply, then we're done, unless otherwise specified */

	/*

	 * Send to the exclusive follower if there is one, otherwise send

	 * to all followers.

/*

 * Helper functions to keep track of the 'monitor all' use count.

 *

 * These functions are called with adap->lock held.

/*

 * Helper functions to keep track of the 'monitor pin' use count.

 *

 * These functions are called with adap->lock held.

/*

 * Log the current state of the CEC adapter.

 * Very useful for debugging.

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the Chrontel CH7322 CEC Controller

 *

 * Copyright 2020 Google LLC.

/*

 * Notes

 *

 * - This device powers on in Auto Mode which has limited functionality. This

 *   driver disables Auto Mode when it attaches.

 *

 Write buffer is 0x01-0x10 */

 Read buffer is 0x41-0x50 */

 BOK status means NACK */

 Device will retry automatically */

 device access mutex */

 Buffer not ready */

 Message not ready */

 Read entire RDBUF to clear state */

	/*

	 * The device returns a one-bit OK status which usually means ACK but

	 * actually means NACK when sending a logical address query or a

	 * broadcast.

/*

 * This device can either monitor the DDC lines to obtain the physical address

 * or it can allow the host to program it. This driver lets the device obtain

 * it.

 This device is always enabled */

 Make a best-effort attempt to locate a matching HDMI port */

 Disable auto mode */

 Enable logical address register */

 Configure, mask, and clear interrupt */

 If HPD is up read physical address */

 Unmask interrupt */

 Mask interrupt */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Amlogic Meson AO CEC G12A Controller

 *

 * Copyright (C) 2017 Amlogic, Inc. All rights reserved

 * Copyright (C) 2019 BayLibre, SAS

 * Author: Neil Armstrong <narmstrong@baylibre.com>

 CEC Registers */

/*

 * [14:12] Filter_del. For glitch-filtering CEC line, ignore signal

 *       change pulse width < filter_del * T(filter_tick) * 3.

 * [9:8] Filter_tick_sel: Select which periodical pulse for

 *       glitch-filtering CEC line signal.

 *  - 0=Use T(xtal)*3 = 125ns;

 *  - 1=Use once-per-1us pulse;

 *  - 2=Use once-per-10us pulse;

 *  - 3=Use once-per-100us pulse.

 * [3]   Sysclk_en. 0=Disable system clock; 1=Enable system clock.

 * [2:1] cntl_clk

 *  - 0 = Disable clk (Power-off mode)

 *  - 1 = Enable gated clock (Normal mode)

 *  - 2 = Enable free-run clk (Debug mode)

 * [0] SW_RESET 1=Apply reset; 0=No reset.

/*

 * [7:0] cec_reg_addr

 * [15:8] cec_reg_wrdata

 * [16] cec_reg_wr

 *  - 0 = Read

 *  - 1 = Write

 * [31:24] cec_reg_rddata

/*

 * [0] DONE Interrupt

 * [1] End Of Message Interrupt

 * [2] Not Acknowlegde Interrupt

 * [3] Arbitration Loss Interrupt

 * [4] Initiator Error Interrupt

 * [5] Follower Error Interrupt

 * [6] Wake-Up Interrupt

 CEC Commands */

 Setup the internal CECB_CTRL2 register */

/*

 * The AO-CECB embeds a dual/divider to generate a more precise

 * 32,768KHz clock for CEC core clock.

 *                      ______   ______

 *                     |      | |      |

 *         ______      | Div1 |-| Cnt1 |       ______

 *        |      |    /|______| |______|\     |      |

 * Xtal-->| Gate |---|  ______   ______  X-X--| Gate |-->

 *        |______| |  \|      | |      |/  |  |______|

 *                 |   | Div2 |-| Cnt2 |   |

 *                 |   |______| |______|   |

 *                 |_______________________|

 *

 * The dividing can be switched to single or dual, with a counter

 * for each divider to set when the switching is done.

 * The entire dividing mechanism can be also bypassed.

 Disable Input & Output */

 Set N1 & N2 */

 Set M1 & M2 */

 Enable Dual divisor */

 Disable divisor bypass */

 Enable Input & Output */

 Initiator reports an error on the CEC bus */

 Follower reports a receive error, just reset RX buffer */

 Assume this will allways succeed */

 Always set Broadcast/Unregistered 15 address */

 Check if RX is in progress */

 Check if TX Busy */

 Setup Filter */

 Enable System Clock */

 Enable gated clock (Normal mode). */

 Release Reset */

 Setup Hardware */

 sentinel */ }

/*

 * Driver for Amlogic Meson AO CEC Controller

 *

 * Copyright (C) 2015 Amlogic, Inc. All rights reserved

 * Copyright (C) 2017 BayLibre, SAS

 * Author: Neil Armstrong <narmstrong@baylibre.com>

 *

 * SPDX-License-Identifier: GPL-2.0+

 CEC Registers */

/*

 * [2:1] cntl_clk

 *  - 0 = Disable clk (Power-off mode)

 *  - 1 = Enable gated clock (Normal mode)

 *  - 2 = Enable free-run clk (Debug mode)

/*

 * [7:0] cec_reg_addr

 * [15:8] cec_reg_wrdata

 * [16] cec_reg_wr

 *  - 0 = Read

 *  - 1 = Write

 * [23] bus free

 * [31:24] cec_reg_rddata

/*

 * [1] tx intr

 * [2] rx intr

 CEC Commands */

 CEC_TX_MSG_CMD definition */

 No transaction */

 Transmit earliest message in buffer */

 Abort transmitting earliest message */

 Overwrite earliest msg, transmit next */

 tx_msg_status definition */

 No transaction */

 Transmitter is busy */

 Message successfully transmitted */

 Message transmitted with error */

 rx_msg_cmd */

 No transaction */

 Read earliest message in buffer */

 Disable receiving latest message */

 Clear earliest msg, read next */

 rx_msg_status */

 No transaction */

 Receiver is busy */

 Message has been received successfully */

 Message has been received with error */

 RX_CLEAR_BUF options */

 CEC_LOGICAL_ADDRx options */

 Clear Interruption */

 Stop TX */

 Clear Interruption */

 Ack RX message */

 Clear RX buffer */

 Enable gated clock (Normal mode). */

 Release Reset */

 Clear buffers */

 CEC arbitration 3/5/7 bit time set. */

 Use 1 for now */

 Setup Hardware */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2017 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-or-later

/* drivers/media/platform/s5p-cec/s5p_cec.c

 *

 * Samsung S5P CEC driver

 *

 * Copyright (c) 2014 Samsung Electronics Co., Ltd.

 *

 * This driver is based on the "cec interface driver for exynos soc" by

 * SangPil Moon.

	/*

	 * Unclear if 0 retries are allowed by the hardware, so have 1 as

	 * the minimum.

 Clear interrupt pending bit */

 SPDX-License-Identifier: GPL-2.0-only

/* drivers/media/platform/s5p-cec/exynos_hdmi_cecctrl.c

 *

 * Copyright (c) 2009, 2014 Samsung Electronics

 *		http://www.samsung.com/

 *

 * cec ftn file for Samsung TVOUT driver

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * CEC driver for SECO X86 Boards

 *

 * Author:  Ettore Chimenti <ek5.chimenti@gmail.com>

 * Copyright (C) 2018, SECO SpA.

 * Copyright (C) 2018, Aidilab Srl.

 CEC Framework */

 Active wait until ready */

 Reset the lock instead of failing */

 Clear the status register */

 Enable the interrupts */

 Clear the status register */

 Disable the interrupts */

 Disable device */

	/* Write logical address

	 * NOTE: CEC_LOG_ADDR_INVALID is mapped to the 'Unregistered' LA

 Re-enable device */

 Device msg len already accounts for header */

 Send data length */

 Send Operation ID if present */

 Send data if present */

 Only data; */

 Copy message into registers */

 hi byte */

 lo byte */

 Send msg source/destination and fire msg */

 Reset status reg */

 NOTE: Untested, it also might not be necessary */

 Read message length */

 Device msg len already accounts for the header */

 Read logical address */

 device stores source LA and destination */

 Read operation ID */

 Read data if present */

 device stores 2 bytes in every 16-bit val */

 low byte, skipping header */

 hi byte */

 Reset status reg */

 Reset error reg */

 Low-level callbacks */

 Prepare the RC input device */

 Clear the status register */

 Enable the interrupts */

  Read status register */

 Read CEC status register */

  Reset status register */

  Reset status register */

 UDOO X86 */

 Find the device, bail out if not yet registered */

 Request SMBus regions */

 Firmware version check */

 Allocate CEC adapter */

 Clear the status register */

 Disable the interrupts */

 Clear the status register */

 Enable the interrupts */

 SPDX-License-Identifier: GPL-2.0

/*

 * STM32 CEC driver

 * Copyright (C) STMicroelectronics SA 2017

 *

 CEC registers  */

 Control Register */

 ConFiGuration Register */

 Rx data Register */

 Rx data Register */

 Interrupt and status Register */

 Interrupt enable Register */

/*

 * 400 ms is the time it takes for one 16 byte message to be

 * transferred and 5 is the maximum number of retries. Add

 * another 100 ms as a margin.

 send next byte */

 TXEOM is set to command transmission of the last byte */

 Poll every 100µs the register CEC_CR to wait end of transmission */

 Copy message */

	/*

	 * If the CEC message consists of only one byte,

	 * TXEOM must be set before of TXSOM.

 TXSOM is set to command transmission of the first byte */

 Write the header (first byte of message) */

	/*

	 * CEC_CAP_PHYS_ADDR caps should be removed when a cec notifier is

	 * available for example when a drm driver can provide edid

 end node */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * CEC driver for ChromeOS Embedded Controller

 *

 * Copyright (c) 2018 BayLibre, SAS

 * Author: Neil Armstrong <narmstrong@baylibre.com>

/**

 * struct cros_ec_cec - Driver data for EC CEC

 *

 * @cros_ec: Pointer to EC device

 * @notifier: Notifier info for responding to EC events

 * @adap: CEC adapter

 * @notify: CEC notifier pointer

 * @rx_msg: storage for a received message

 FW takes care of all retries, tell core to avoid more retries */

/*

 * The Firmware only handles a single CEC interface tied to a single HDMI

 * connector we specify along with the DRM device name handling the HDMI output

 Google Fizz */

 Find the device, bail out if not yet registered */

 Hardware support must be added in the cec_dmi_match_table */

 Get CEC events from the EC. */

 SPDX-License-Identifier: GPL-2.0

/*

 * STIH4xx CEC driver

 * Copyright (C) STMicroelectronics SA 2016

 *

 CEC registers  */

 CEC_CTRL2 */

 CEC_DATA_ARRAY_CTRL */

 CEC_TX_ARRAY_CTRL */

 CEC_IRQ_CTRL */

 CEC_CTRL */

 CEC_STATUS */

 Signal free time in bit periods (2.4ms) */

 Constants for CEC_BIT_TOUT_THRESH register */

 Constants for CEC_BIT_PULSE_THRESH register */

 Constants for CEC_DATA_ARRAY_STATUS register */

 The doc says (input TCLK_PERIOD * CEC_CLK_DIV) = 0.1ms */

 Configuration of the durations activating a timeout */

 Configuration of the smallest allowed duration for pulses */

 Minimum received bit period threshold */

 Configuration of transceiver data arrays */

 Configuration of the control bits for CEC Transceiver */

 Clear logical addresses */

 Clear the status register */

 Enable the interrupts */

 Clear logical addresses */

 Clear the status register */

 Disable the interrupts */

 Copy message into registers */

	/*

	 * Start transmission, configure hardware to add start and stop bits

	 * Signal free time is handled by the hardware

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Tegra CEC implementation

 *

 * The original 3.10 CEC driver using a custom API:

 *

 * Copyright (c) 2012-2015, NVIDIA CORPORATION.  All rights reserved.

 *

 * Conversion to the CEC framework and to the mainline kernel:

 *

 * Copyright 2016-2017 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 set context info. */

 SPDX-License-Identifier: GPL-2.0

 tuner-xc2028



 Copyright (c) 2007-2008 Mauro Carvalho Chehab <mchehab@kernel.org>



 Copyright (c) 2007 Michel Ludwig (michel.ludwig@gmail.com)

       - frontend interface

 Max transfer size done by I2C transfer functions */

 Registers (Write-only) */

 Registers (Read-only) */

 struct for storing firmware table */

 free allocated f/w string */

 Checks if there's enough bytes to read */

 Seek for exact match */

 Seek for generic video standard match */

 Supports all the requested standards */

FIXME: Would make sense to seek for type "hint" match ? */

	/* analog side (tuner-core) uses i2c_adap->algo_data.

	 * digital side is not guaranteed to have algo_data defined.

	 *

	 * digital side will always have fe->dvb defined.

	 * analog side (tuner-core) doesn't (yet) define fe->dvb.

 Checks if there's enough bytes to read */

 Special callback command received */

 Checks for a sleep command */

 Sends message chunks */

 silently fail if the frontend doesn't support I2C flush */

		/* 16 SCODE entries per file; each SCODE entry is 12 bytes and

	/*

	 * No need to reload base firmware if it matches and if the tuner

	 * is not at sleep mode

 Updating BASE - forget about all currently loaded firmware */

 Reset is needed before loading firmware */

 BASE firmwares are all std0 */

 Load INIT1, if needed */

	/*

	 * No need to reload standard specific firmware if base firmware

	 * was not reloaded and requested video standards have not changed.

 Reloading std-specific firmware forces a SCODE update */

 Load SCODE firmware, if exists */

 Check firmware version against what we downloaded. */

 Check that the tuner hardware model remains consistent over time. */

	/*

	 * By setting BASE in cur_fw.type only after successfully loading all

	 * firmwares, we can:

	 * 1. Identify that BASE firmware with type=0 has been loaded;

	 * 2. Tell whether BASE firmware was just changed the next time through.

 Firmware didn't load. Put the device to sleep */

 If the device is sleeping, no channel is tuned */

 Sync Lock Indicator */

 Frequency didn't lock */

 Get SNR of the video signal */

 Signal level is 3 bits only */

 If the device is sleeping, no channel is tuned */

 Sync Lock Indicator */

 Frequency didn't lock */

 Get AFC */

 Hz */

 in HZ */,

	/* On some cases xc2028 can disable video output, if

	 * very weak signals are received. By sending a soft

	 * reset, this is re-enabled. So, it is better to always

	 * send a soft reset before changing channels, to be sure

	 * that xc2028 will be in a safe state.

	 * Maybe this might also be needed for DTV.

 Analog mode requires offset = 0 */

 Radio mode requires offset = 0 */

		/*

		 * Digital modes require an offset to adjust to the

		 * proper frequency. The offset depends on what

		 * firmware version is used.

		/*

		 * Adjust to the center frequency. This is calculated by the

		 * formula: offset = 1.25MHz - BW/2

		 * For DTV 7/8, the firmware uses BW = 8000, so it needs a

		 * further adjustment to get the frequency center on VHF

		/*

		 * The firmware DTV78 used to work fine in UHF band (8 MHz

		 * bandwidth) but not at all in VHF band (7 MHz bandwidth).

		 * The real problem was connected to the formula used to

		 * calculate the center frequency offset in VHF band.

		 * In fact, removing the 500KHz adjustment fixed the problem.

		 * This is coherent to what was implemented for the DTV7

		 * firmware.

		 * In the end, now the center frequency is the same for all 3

		 * firmwares (DTV7, DTV8, DTV78) and doesn't depend on channel

		 * bandwidth.

 DTV7 or DTV8 or DTV78 */

		/*

		 * xc3028 additional "magic"

		 * Depending on the firmware version, it needs some adjustments

		 * to properly centralize the frequency. This seems to be

		 * needed to compensate the SCODE table adjustments made by

		 * newer firmwares

		/*

		 * The proper adjustment would be to do it at s-code table.

		 * However, this didn't work, as reported by

		 * Robert Lowery <rglowery@exemail.com.au>

		/*

		 * Still need tests for XC3028L (firmware 3.2 or upper)

		 * So, for now, let's just comment the per-firmware

		 * version of this change. Reports with xc3028l working

		 * with and without the lines below are welcome

 DVB @6MHz, DTV 8 and DTV 7/8 */

 CMD= Set frequency */

	/* Return code shouldn't be checked.

	   The reset CLK is needed only with tm6000.

	   Driver should work fine even if this fails.

 if std is not defined, choose one */

 PAL/M, PAL/N, PAL/Nc and NTSC variants should use 6MHz firmware */

 Add audio hack to std mask */

		/*

		 * The only countries with 6MHz seem to be Taiwan/Uruguay.

		 * Both seem to require QAM firmware for OFDM decoding

		 * Tested in Taiwan by Terry Wu <terrywu2009@gmail.com>

 Zarlink seems to need D2633 */

 The only ATSC firmware (at least on v2.7) is D2633 */

 DVB-S and pure QAM (FE_QAM) are not supported */

 All S-code tables need a 200kHz shift */

		/*

		 * Newer firmwares require a 200 kHz offset only for ATSC

		/*

		 * The DTV7 S-code table needs a 700 kHz shift.

		 *

		 * DTV7 is only used in Australia.  Germany or Italy may also

		 * use this firmware after initialization, but a tune to a UHF

		 * channel should then cause DTV78 to be used.

		 *

		 * Unfortunately, on real-field tests, the s-code offset

		 * didn't work as expected, as reported by

		 * Robert Lowery <rglowery@exemail.com.au>

 Device is already in sleep mode */

 Avoid firmware reload on slow devices or if PM disabled */

 only perform final cleanup if this is the last instance */

	/*

	 * Copy the config data.

	/*

	 * If firmware name changed, frees firmware. As free_firmware will

	 * reset the status to NO_FIRMWARE, this forces a new request_firmware

 memory allocation failure */

 new tuner instance */

 existing tuner instance */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for the internal tuner of Montage M88RS6000

 *

 * Copyright (C) 2014 Max nibble <nibble.max@gmail.com>

 set demod main mclk and ts mclk */

 select demod main mclk */

 mclk = 110.25MHz */

 mclk = 96MHz */

 set ts mclk */

 program and recalibrate demod PLL */

 in kHz */

 set tuner pll.*/

 set demod mlck */

 Zero-IF */

 scale value to 0x0000-0xffff */

 check tuner chip id */

 tuner init. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Elonics E4000 silicon tuner driver

 *

 * Copyright (C) 2012 Antti Palosaari <crope@iki.fi>

 reset */

 disable output clock */

 configure gains */

 DC offset control */

 gain control */

 gain control manual */

	/*

	 * Fractional-N synthesizer

	 *

	 *           +----------------------------+

	 *           v                            |

	 *  Fref   +----+     +-------+         +------+     +---+

	 * ------> | PD | --> |  VCO  | ------> | /N.F | <-- | K |

	 *         +----+     +-------+         +------+     +---+

	 *                      |

	 *                      |

	 *                      v

	 *                    +-------+  Fout

	 *                    | /Rout | ------>

	 *                    +-------+

 calculate PLL integer and fractional control word */

 LNA filter (RF filter) */

 IF filters */

 frequency band */

 DC offset */

 gain control auto */

/*

 * V4L2 API

		/*

		 * TODO: Auto logic does not work 100% correctly as tuner driver

		 * do not have information to calculate maximum suitable

		 * bandwidth. Calculating it is responsible of master driver.

/*

 * DVB API

 Zero-IF */

 check if the tuner is there */

 put sleep as chip seems to be in normal mode by default */

 Register controls */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Microtune MT2266 "Direct conversion low power broadband tuner"

 *

 *  Copyright (c) 2007 Olivier DANET <odanet@caramail.com>

 Here, frequencies are expressed in kiloHertz to avoid 32 bits overflows */

 Reads a single register

 Writes a single register

 Writes a set of consecutive registers

 Initialisation sequences

 Quartz oscillator 30 MHz

 Hz -> kHz */

 Gap between VHF and UHF bands */

 Wait for pll lock or timeout */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Xceive XC4000 "QAM/8VSB single chip tuner"

 *

 *  Copyright (c) 2007 Xceive Corporation

 *  Copyright (c) 2007 Steven Toth <stoth@linuxtv.org>

 *  Copyright (c) 2009 Devin Heitmueller <dheitmueller@kernellabs.com>

 *  Copyright (c) 2009 Davide Ferri <d.ferri@zero11.it>

 *  Copyright (c) 2010 Istvan Varga <istvan_v@mailbox.hu>

 struct for storing firmware table */

 Misc Defines */

 Signal Types */

 Product id */

 Registers (Write-only) */

 Registers (Read-only) */

/*

   Basic firmware description. This will remain with

   the driver for documentation purposes.



   This represents an I2C firmware file encoded as a

   string of unsigned char. Format is as follows:



   char[0  ]=len0_MSB  -> len = len_MSB * 256 + len_LSB

   char[1  ]=len0_LSB  -> length of first write transaction

   char[2  ]=data0 -> first byte to be sent

   char[3  ]=data1

   char[4  ]=data2

   char[   ]=...

   char[M  ]=dataN  -> last byte to be sent

   char[M+1]=len1_MSB  -> len = len_MSB * 256 + len_LSB

   char[M+2]=len1_LSB  -> length of second write transaction

   char[M+3]=data0

   char[M+4]=data1

   ...

   etc.



   The [len] value should be interpreted as follows:



   len= len_MSB _ len_LSB

   len=1111_1111_1111_1111   : End of I2C_SEQUENCE

   len=0000_0000_0000_0000   : Reset command: Do hardware reset

   len=0NNN_NNNN_NNNN_NNNN   : Normal transaction: number of bytes = {1:32767)

   len=1WWW_WWWW_WWWW_WWWW   : Wait command: wait for {1:32767} ms



   For the RESET and WAIT commands, the two following bytes will contain

   immediately the length of the following transaction.

 Tuner standards */

 RESET command */

 NOTE: this is ignored, as the reset callback was */

 already called by check_firmware() */

 WAIT command */

			/* Send i2c data whilst ensuring individual transactions

			 * do not exceed XC_MAX_I2C_WRITE_LENGTH bytes.

 Don't complain when the request fails because of i2c stretching */

	/* WAS: Starting in firmware version 1.1.44, Xceive recommends using the

	   FINERFREQ for all normal tuning (the doc indicates reg 0x03 should

 WAS: XREG_FINERFREQ */

 Don't complain when the request fails because of i2c stretching */

 wait for lock only in analog TV mode */

	/* Wait for stats to stabilize.

	 * Frame Lines needs two frame times after initial lock

	 * before it is valid.

 Seek for generic video standard match */

 Supports all the requested standards */

 FIXME: Would make sense to seek for type "hint" match ? */

 Don't complain when the request fails because of i2c stretching */

 Checks if there's enough bytes to read */

 Enter direct-mode */

		/* Even if the send failed, make sure we set back to indirect

 Switch back to indirect-mode */

 No need to reload base firmware if it matches */

 Updating BASE - forget about all currently loaded firmware */

 Reset is needed before loading firmware */

 BASE firmwares are all std0 */

 Load INIT1, if needed */

	/*

	 * No need to reload standard specific firmware if base firmware

	 * was not reloaded and requested video standards have not changed.

 Reloading std-specific firmware forces a SCODE update */

 Load the standard firmware */

 Load SCODE firmware, if exists */

 Check firmware version against what we downloaded. */

 Check that the tuner hardware model remains consistent over time. */

	/*

	 * By setting BASE in cur_fw.type only after successfully loading all

	 * firmwares, we can:

	 * 1. Identify that BASE firmware with type=0 has been loaded;

	 * 2. Tell whether BASE firmware was just changed the next time through.

 Make sure the correct firmware type is loaded */

 DJH - do not return when it fails... */

 goto fail; */

 goto fail; */

 params->frequency is in units of 62.5khz */

 if std is not defined, choose one */

 default to NICAM audio standard */

 default to A2 audio standard */

 default to NICAM audio standard */

 default to NICAM audio standard */

 FIXME: it could be air. */

	/* Information from real testing of DVB-T and radio part,

	   coefficient for one dB is 0xff.

 all known digital modes */

	/* Analog mode has NOISE LEVEL important, signal

	   depends only on gain of antenna and amplifiers,

	   but it doesn't tell anything about real quality

	   of reception.

 highest noise level: 32dB */

	/* Digital mode has SIGNAL LEVEL important and real

	   noise level is stored in demodulator registers.

 best signal: -50dB */

 minimum: -114dB - should be 0x7200 but real zero is 0x713A */

 Avoid firmware reload on slow devices */

 force reset and firmware reload */

 new tuner instance */

 set default configuration */

 existing tuner instance */

 copy configuration if provided by the caller */

	/* Check if firmware has been loaded. It is possible that another

	   instance of the driver has loaded the firmware.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Fitipower FC0011 tuner driver

 *

 * Copyright (C) 2012 Michael Buesch <m@bues.ch>

 *

 * Derived from FC0012 tuner driver:

 * Copyright (C) 2012 Hans-Frieder Vogt <hfvogt@gmx.net>

 Tuner registers */

 FA */

 FP */

 XIN high 8 bit */

 XIN low 8 bit */

 VCO */

 VCO select */

 Unknown tuner reg 7 */

 Unknown tuner reg 8 */

 Unknown tuner reg 10 */

 Unknown tuner reg 11 */

 RC calibrate */

 VCO calibrate */

 Unknown tuner reg 16 */

 Number of registers */

 VCO select 2 */

 VCO select 1 */

 Fix clock out */

 7MHz bw */

 6MHz bw */

 force */

 VCO calibration run */

 VCO calibration value mask */

 VCO calibration Ok */

 VCO calibration reset */

 Initiate VCO calibration */

 Read VCO calibration value */

 Set VCO freq and VCO div */

 Calc XIN. The PLL reference frequency is 18 MHz. */

 Calc FP and FA */

 round */

 Select bandwidth */

 Pre VCO select */

 Fix for low freqs */

 Clock out fix */

 Write the cached registers */

 VCO calibration */

 Reset the tuner and try again */

 Reinit tuner config */

 VCO calibration */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * i2c tv tuner chip device driver

 * controls microtune tuners, mt2032 + mt2050 at the moment.

 *

 * This "mt20xx" module was split apart from the original "tuner" module.

 ---------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

unsigned int radio_if2;

 IsSpurInBand()?

scale to kHz to avoid 32bit overflows

all in Hz

5.25MHz

 >1090

 <1958

 >1090

scale to fit in 32bit arith

 should recalculate lo1 (one step up/down)

 set up MT2032 register map for transfer over i2c

 LOGC

reserved

 set PKEN per rev 1.2

reserved

reserved

reserved

 Lo2RST

 send only the relevant registers per Rev. 1.2

 wait for PLLs to lock (per manual), retry LINT if not.

 set LINT to re-init PLLs

 LOGC for optimal phase noise

 signal bandwidth and picture carrier

 NTSC

 PAL

 per Manual for FM tuning: first if center freq. 1085 MHz

 Initialization as described in "MT203x Programming Procedures", Rev 1.2, Feb.2001

 Initialize Registers per spec.

 Index to register 2

 Index register 6

 Index register 13

 Adjust XOGC (register 7), wait for XOK

 min. 4 per spec

 todo spurchecks

 NTSC

 PAL

 DVB (pinnacle 300i)

 power */

 m1lo */

priv->radio_if2 = 10700 * 1000;	/* 10.7MHz - FM radio */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NXP TDA18212HN silicon tuner driver

 *

 * Copyright (C) 2011 Antti Palosaari <crope@iki.fi>

 reg:   0f    13    23 */

 open I2C-gate */

 default value */

 actual IF rounded as it is on register */

 close I2C-gate */

 check if the tuner is there */

 open I2C-gate */

 close I2C-gate */

 master */

 slave */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  mxl5007t.c - driver for the MaxLinear MxL5007T silicon tuner

 *

 *  Copyright (C) 2008, 2009 Michael Krufky <mkrufky@linuxtv.org>

 ------------------------------------------------------------------------- */

 ------------------------------------------------------------------------- */

 ------------------------------------------------------------------------- */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 TOP_MASTER_ENABLE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 TOP_MASTER_ENABLE */

 ------------------------------------------------------------------------- */

 abort tune */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 OVERRIDE */

 freq dependent */

 start tune */

 ------------------------------------------------------------------------- */

 ------------------------------------------------------------------------- */

 called by _init and _rftun to manipulate the register arrays */

 ------------------------------------------------------------------------- */

 set inverted IF or normal IF */

 select xtal freq & ref freq */

 ------------------------------------------------------------------------- */

		val = 0x15; /* set DIG_MODEINDEX, DIG_MODEINDEX_A,

	/* Convert RF frequency into 16 bits =>

 add to have shift center point by 7.8124 kHz */

 ------------------------------------------------------------------------- */

 calculate initialization reg array */

 calculate channel change reg array */

 ------------------------------------------------------------------------- */

 ------------------------------------------------------------------------- */

 ------------------------------------------------------------------------- */

 ------------------------------------------------------------------------- */

 wake from standby */

 enter standby mode */

 ------------------------------------------------------------------------- */

 ------------------------------------------------------------------------- */

 new tuner instance */

 check return value of mxl5007t_get_chip_id */

 existing tuner instance */

/*

    MaxLinear MXL5005S VSB/QAM/DVBT tuner driver



    Copyright (C) 2008 MaxLinear

    Copyright (C) 2006 Steven Toth <stoth@linuxtv.org>

      Functions:

	mxl5005s_reset()

	mxl5005s_writereg()

	mxl5005s_writeregs()

	mxl5005s_init()

	mxl5005s_reconfigure()

	mxl5005s_AssignTunerMode()

	mxl5005s_set_params()

	mxl5005s_get_frequency()

	mxl5005s_get_bandwidth()

	mxl5005s_release()

	mxl5005s_attach()



    Copyright (C) 2008 Realtek

    Copyright (C) 2008 Jan Hoogenraad

      Functions:

	mxl5005s_SetRfFreqHz()



    This program is free software; you can redistribute it and/or modify

    it under the terms of the GNU General Public License as published by

    the Free Software Foundation; either version 2 of the License, or

    (at your option) any later version.



    This program is distributed in the hope that it will be useful,

    but WITHOUT ANY WARRANTY; without even the implied warranty of

    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

    GNU General Public License for more details.



    You should have received a copy of the GNU General Public License

    along with this program; if not, write to the Free Software

    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



/*

    History of this driver (Steven Toth):

      I was given a public release of a linux driver that included

      support for the MaxLinear MXL5005S silicon tuner. Analysis of

      the tuner driver showed clearly three things.



      1. The tuner driver didn't support the LinuxTV tuner API

	 so the code Realtek added had to be removed.



      2. A significant amount of the driver is reference driver code

	 from MaxLinear, I felt it was important to identify and

	 preserve this.



      3. New code has to be added to interface correctly with the

	 LinuxTV API, as a regular kernel module.



      Other than the reference driver enum's, I've clearly marked

      sections of the code and retained the copyright of the

      respective owners.

 Enumeration of Master Control Register State */

 Enumeration of MXL5005 Tuner Modulation Type */

 MXL5005 Tuner Register Struct */

 Tuner Register Address */

 Current sw programmed value waiting to be written */

 Initialization Control Names */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 10 */

 11 */

 12 */

 13 */

 14 */

 15 */

 16 */

 17 */

 18 */

 19 */

 20 */

 21 */

 22 */

 23 */

 24 */

 25 */

 26 */

 27 */

 28 */

 29 */

 30 */

 31 */

 32 */

 33 */

 34 */

 35 */

 36 */

 37 */

 38 */

 39 */

 40 */

 Channel Change Control Names */

 51 */

 52 */

 53 */

 54 */

 55 */

 56 */

 57 */

 58 */

 59 */

 60 */

 61 */

 62 */

 63 */

 64 */

 65 */

 66 */

 67 */

 68 */

 69 */

 70 */

 71 */

 72 */

 73 */

 74 */

 75 */

 76 */

 77 */

 78 */

 79 */

 80 */

 81 */

 82 */

 83 */

 84 */

 85 */

 86 */

 87 */

 88 */

 89 */

/*

 * The following context is source code provided by MaxLinear.

 * MaxLinear source code - Common_MXL.h (?)

 Constants */

 Register address, MSB, and LSB */

 Standard modes */

 Bandwidth modes */

 MXL5005 Tuner Control Struct */

 Control Number */

 Number of bits to represent Value */

 Array of Tuner Register Address for each bit pos */

 Array of bit pos in Reg Addr for each bit pos */

 Binary representation of Value */

 MXL5005 Tuner Struct */

 0: Analog Mode ; 1: Digital Mode */

 for Analog Mode, 0: zero IF; 1: low IF */

 filter  channel bandwidth (6, 7, 8) */

 Desired IF Out Frequency */

 IF Out Load Resistor (200/300 Ohms) */

 RF Input Frequency */

 XTAL Frequency */

 AGC Mode 0: Dual AGC; 1: Single AGC */

 Value: take over point */

 0: turn off clk out; 1: turn on clock out */

 4MHz or 16MHz */

 0: disable On-Chip pulling cap; 1: enable */

 0: disable RSSI; 1: enable RSSI */

 Modulation Type; */

 0 - Default;	1 - DVB-T; 2 - ATSC; 3 - QAM; 4 - Analog Cable */

 Tracking Filter Type */

 0 - Default; 1 - Off; 2 - Type C; 3 - Type C-H */

 Calculated Settings */

 Synth RF LO Frequency */

 Synth IF LO Frequency */

 Synth TG_LO Frequency */

 Pointers to ControlName Arrays */

 Number of INIT Control Names */

 INIT Control Names Array Pointer */

 Number of CH Control Names */

 CH Control Name Array Pointer */

 Number of MXL Control Names */

 MXL Control Name Array Pointer */

 Pointer to Tuner Register Array */

 Number of Tuner Registers */

 Tuner Register Array Pointer */

 Linux driver framework specific */

 Cache values */

/* ----------------------------------------------------------------

 * Begin: Custom code salvaged from the Realtek driver.

 * Copyright (C) 2008 Realtek

 * Copyright (C) 2008 Jan Hoogenraad

 * This code is placed under the terms of the GNU General Public License

 *

 * Released by Realtek under GPLv2.

 * Thanks to Realtek for a lot of support we received !

 *

 *  Revision: 080314 - original version

 Set MxL5005S tuner RF frequency according to example code. */

 Tuner RF frequency setting stage 0 */

 Tuner RF frequency setting stage 1 */

 Wait 30 ms. */

 Tuner RF frequency setting stage 2 */

 End: Custom code taken from the Realtek driver */

/* ----------------------------------------------------------------

 * Begin: Reference driver code found in the Realtek driver.

 * Copyright (C) 2008 MaxLinear

 0: Analog Mode ; 1: Digital Mode */

 for Analog Mode, 0: zero IF; 1: low IF */

 filter  channel bandwidth (6, 7, 8) */

 Desired IF Out Frequency */

 XTAL Frequency */

 AGC Mode - Dual AGC: 0, Single AGC: 1 */

 0: Dual AGC; Value: take over point */

 IF Out Load Resistor (200 / 300 Ohms) */

 0: turn off clk out; 1: turn on clock out */

 0: Div-1; 1: Div-4 */

 0: disable On-Chip pulling cap; 1: enable */

 0: disable RSSI; 1: enable RSSI */

 Modulation Type; */

 0 - Default;	1 - DVB-T; 2 - ATSC; 3 - QAM; 4 - Analog Cable */

 Tracking Filter */

 0 - Default; 1 - Off; 2 - Type C; 3 - Type C-H */

 Initialize all the controls and registers */

 Synthesizer LO frequency calculation */

 Digital Mode */

 Analog Mode */ {

 Analog Zero IF mode */

 Analog Low IF mode */

 Digital Mode */ {

 remove 20.48MHz setting for 2.6.10 */

 change for 2.6.6 */

 Analog Mode */ {

 Analog Zero IF mode */ {

 Analog Low IF mode */ {

 Downconverter Control Dig Ana */

 Filter Control  Dig  Ana */

 Initialize Low-Pass Filter */

 Digital Mode */

 Analog Mode */

 Low Zero */

 Charge Pump Control Dig  Ana */

 AGC TOP Control */

 Dual AGC */ {

  Single AGC Mode Dig  Ana */

 TOP == 5.5 */

 TOP == 7.2 */

 TOP == 9.2 */

 TOP == 11.0 */

 TOP == 12.9 */

 TOP == 14.7 */

 TOP == 16.8 */

 TOP == 19.4 */

 TOP == 21.2 */

 TOP == 23.2 */

 TOP == 25.2 */

 TOP == 27.1 */

 TOP == 29.2 */

 TOP == 31.7 */

 TOP == 34.9 */

 IF Synthesizer Control */

 IF UpConverter Control */

	/* Anti-Alias Filtering Control

	 * initialise Anti-Aliasing Filter

 Digital Mode */

 Analog Mode */

 Demod Clock Out */

 Crystal Control */

 Misc Controls */

 Analog LowIF mode */

 status += MXL_ControlRead(fe, IF_DIVVAL, &IF_DIVVAL_Val); */

 Set TG_R_DIV */

 Apply Default value to BB_INITSTATE_DLPF_TUNE */

 RSSI Control */

 RSSI reference point */

 TOP point */

	/* Modulation type bit settings

	 * Override the control values preset

 DVB-T Mode */ {

 Single AGC Mode */

 Enable RSSI */

 RSSI reference point */

 TOP point */

 Low IF */

 High IF */

 ATSC Mode */ {

 Single AGC Mode */

 Enable RSSI */

 RSSI reference point */

 TOP point */

 Low Zero */

 Low IF */

 High IF */

 QAM Mode */ {

 state->AGC_Mode = 1; */ 
 Disable RSSI */	
 RSSI reference point */

 change here for v2.6.5 */

 Low IF */

 High IF */

 Analog Cable Mode */

 state->Mode = MXL_DIGITAL_MODE; */

 Single AGC Mode */

 Disable RSSI */

 change for 2.6.3 */

 Analog OTA Terrestrial mode add for 2.6.7 */

 state->Mode = MXL_ANALOG_MODE; */

 Enable RSSI */

 RSSI reference point */

 RSSI disable */

 IF Synthesizer Control */

 Analog Low IF mode */ {

 add for 2.6.8 */ {

 CHCAL_INT_MOD_IF */

 CHCAL_FRAC_MOD_IF */

	/* Downconverter Controls

	 * Look-Up Table Implementation for:

	 *	DN_POLY

	 *	DN_RFGAIN

	 *	DN_CAP_RFLPF

	 *	DN_EN_VHFUHFBAR

	 *	DN_GAIN_ADJUST

	 *  Change the boundary reference from RF_IN to RF_LO

	DN_IQTNBUF_AMP */

	DN_IQTNGNBFBIAS_BST */

	/*

	 * Set RF Synth and LO Path Control

	 *

	 * Look-Up table implementation for:

	 *	RFSYN_EN_OUTMUX

	 *	RFSYN_SEL_VCO_OUT

	 *	RFSYN_SEL_VCO_HI

	 *  RFSYN_SEL_DIVM

	 *	RFSYN_RF_DIV_BIAS

	 *	DN_SEL_FREQ

	 *

	 * Set divider_val, Fmax, Fmix to use in Equations

	/*	CHCAL_INT_MOD_RF

	 *	CHCAL_FRAC_MOD_RF

	 *	RFSYN_LPF_R

	 *	CHCAL_EN_INT_RF

 Equation E3 RFSYN_VCO_BIAS */

 Equation E4 CHCAL_INT_MOD_RF */

 Equation E5 CHCAL_FRAC_MOD_RF CHCAL_EN_INT_RF */

 Equation E5A RFSYN_LPF_R */

 Euqation E5B CHCAL_EN_INIT_RF */

	/*if (E5 == 0)

	 *	status += MXL_ControlWrite(fe, CHCAL_EN_INT_RF, 1);

	 *else

	 *	status += MXL_ControlWrite(fe, CHCAL_FRAC_MOD_RF, E5);

	/*

	 * Set TG Synth

	 *

	 * Look-Up table implementation for:

	 *	TG_LO_DIVVAL

	 *	TG_LO_SELVAL

	 *

	 * Set divider_val, Fmax, Fmix to use in Equations

 TG_DIV_VAL */

	/* prevent overflow of 32 bit unsigned integer, use

	 * following equation. Edit for v2.6.4

 Fref_TF = Fref_TG * 1000 */

 Fvco = Fvco/10 */

	/* below equation is same as above but much harder to debug.

	 *

	 * static u32 MXL_GetXtalInt(u32 Xtal_Freq)

	 * {

	 *	if ((Xtal_Freq % 1000000) == 0)

	 *		return (Xtal_Freq / 10000);

	 *	else

	 *		return (((Xtal_Freq / 1000000) + 1)*100);

	 * }

	 *

	 * u32 Xtal_Int = MXL_GetXtalInt(state->Fxtal);

	 * tg_lo = ( ((Fmax/10000 * Xtal_Int)/100) -

	 * ((state->TG_LO/10000)*divider_val *

	 * (state->Fxtal/10000)/100) )*32/((Fmax-Fmin)/10000 *

	 * Xtal_Int/100) + 8;

 add for 2.6.5 Special setting for QAM */

 Off Chip Tracking Filter Control */

 Tracking Filter Off State; turn off all the banks */

 Bank1 Off */

 Bank2 Off */

 Bank3 Off */

 Tracking Filter type C */ {

 Tracking Filter type C-H for Hauppauge only */

 Tracking Filter type D */

 Tracking Filter type D-L for Lumanate ONLY change 2.6.3 */

 if UHF and terrestrial => Turn off Tracking Filter */

 Turn off all the banks */

 if VHF or cable => Turn on Tracking Filter */

 Tracking Filter type E */ {

 Tracking Filter type F */

 Tracking Filter type E_2 */

 Tracking Filter type G add for v2.6.8 */

 Tracking Filter type E-NA for Empia ONLY change for 2.6.8 */

 if UHF and terrestrial=> Turn off Tracking Filter */

 Turn off all the banks */

 2.6.12 Turn on RSSI */

 RSSI reference point */

			/* following parameter is from analog OTA mode,

 if VHF or Cable =>  Turn on Tracking Filter */

 2.6.12 Turn off RSSI */

 change back from above condition */

 GPIO2 is not available */

 tri-state */

 tri-state */

 Will write ALL Matching Control Name */

 Write Matching INIT Control */

 Write Matching CH Control */

 Write Matching MXL Control */

 Initial Control */ {

 Chan change Control */ {

 Maxlinear Control */ {

 successful return */

 Retrieve the Initialization Registers */

 add 77, 166, 167, 168 register for 2.6.12 */

	/*

	u8 RegAddr[171];

	for (i = 0; i <= 170; i++)

		RegAddr[i] = i;

 Load_Start */

 Power_Down */

 Synth_Reset */

 Seq_Off */

 Analog Low IF Mode */

 Analog Zero IF Mode */

 Digital Mode */ {

 Analog Low IF Mode */

 Analog Zero IF Mode */

 Digital Mode */ {

 Analog Low IF Mode */

 Analog Zero IF Mode */

 Digital Mode */ {

 Analog Low IF Mode */

 Analog Zero IF Mode */

 Digital Mode */ {

/* End: Reference driver code found in the Realtek driver that

/* ----------------------------------------------------------------

 * Begin: Everything after here is new code to adapt the

 * proprietary Realtek driver into a Linux API tuner.

 * Copyright (C) 2008 Steven Toth <stoth@linuxtv.org>

/* Write a single byte to a single reg, latch the value if required by

 * following the transaction with the latch byte.

 Tuner initialization stage 0 */

 Tuner initialization stage 1 */

 Set MxL5005S parameters. */

 Assume DVB-T */

 Change tuner for new modulation type if reqd */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * i2c tv tuner chip device type database.

 *

 ---------------------------------------------------------------------- */

/*

 *	The floats in the tuner struct are computed at compile time

 *	by gcc and cast back to integers. Thus we don't violate the

 *	"no float in kernel" rule.

 *

 *	A tuner_range may be referenced by multiple tuner_params structs.

 *	There are many duplicates in here. Reusing tuner_range structs,

 *	rather than defining new ones for each tuner, will cut down on

 *	memory usage, and is preferred when possible.

 *

 *	Each tuner_params array may contain one or more elements, one

 *	for each video standard.

 *

 *	FIXME: tuner_params struct contains an element, tda988x. We must

 *	set this for all tuners that contain a tda988x chip, and then we

 *	can remove this setting from the various card structs.

 *

 *	FIXME: Right now, all tuners are using the first tuner_params[]

 *	array element for analog mode. In the future, we will be merging

 *	similar tuner definitions together, such that each tuner definition

 *	will have a tuner_params struct for each available video standard.

 *	At that point, the tuner_params[] array element will be chosen

 *	based on the video standard in use.

 The following was taken from dvb-pll.c: */

/* Set AGC TOP value to 103 dBuV:

 *	0x80 = Control Byte

 *	0x40 = 250 uA charge pump (irrelevant)

 *	0x18 = Aux Byte to follow

 *	0x06 = 64.5 kHz divider (irrelevant)

 *	0x01 = Disable Vt (aka sleep)

 *

 *	0x00 = AGC Time constant 2s Iagc = 300 nA (vs 0x80 = 9 nA)

 *	0x50 = AGC Take over point = 103 dBuV

/*	0x04 = 166.67 kHz divider

 *

 *	0x80 = AGC Time constant 50ms Iagc = 9 uA

 *	0x20 = AGC Take over point = 112 dBuV

 0-9 */

 ------------ TUNER_TEMIC_PAL - TEMIC PAL ------------ */

MHz*/, 0x8e, 0x02, },

MHz*/, 0x8e, 0x04, },

 ------------ TUNER_PHILIPS_PAL_I - Philips PAL_I ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_PHILIPS_NTSC - Philips NTSC ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_PHILIPS_SECAM - Philips SECAM ------------ */

MHz*/, 0x8e, 0xa7, },

MHz*/, 0x8e, 0x97, },

 ------------ TUNER_PHILIPS_PAL - Philips PAL ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_TEMIC_NTSC - TEMIC NTSC ------------ */

MHz*/, 0x8e, 0x02, },

MHz*/, 0x8e, 0x04, },

 ------------ TUNER_TEMIC_PAL_I - TEMIC PAL_I ------------ */

MHz*/, 0x8e, 0x02, },

MHz*/, 0x8e, 0x04, },

 ------------ TUNER_TEMIC_4036FY5_NTSC - TEMIC NTSC ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_ALPS_TSBH1_NTSC - TEMIC NTSC ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 10-19 */

 ------------ TUNER_ALPS_TSBE1_PAL - TEMIC PAL ------------ */

 ------------ TUNER_ALPS_TSBB5_PAL_I - Alps PAL_I ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 ------------ TUNER_ALPS_TSBE5_PAL - Alps PAL ------------ */

 ------------ TUNER_ALPS_TSBC5_PAL - Alps PAL ------------ */

 ------------ TUNER_TEMIC_4006FH5_PAL - TEMIC PAL ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_ALPS_TSHC6_NTSC - Alps NTSC ------------ */

MHz*/, 0x8e, 0x14, },

MHz*/, 0x8e, 0x12, },

 ------------ TUNER_TEMIC_PAL_DK - TEMIC PAL ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_PHILIPS_NTSC_M - Philips NTSC ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_TEMIC_4066FY5_PAL_I - TEMIC PAL_I ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_TEMIC_4006FN5_MULTI_PAL - TEMIC PAL ------------ */

 20-29 */

 ------------ TUNER_TEMIC_4009FR5_PAL - TEMIC PAL ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_TEMIC_4039FR5_NTSC - TEMIC NTSC ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_TEMIC_4046FM5 - TEMIC PAL ------------ */

 ------------ TUNER_PHILIPS_PAL_DK - Philips PAL ------------ */

 ------------ TUNER_PHILIPS_FQ1216ME - Philips PAL ------------ */

 ------------ TUNER_LG_PAL_I_FM - LGINNOTEK PAL_I ------------ */

 ------------ TUNER_LG_PAL_I - LGINNOTEK PAL_I ------------ */

 ------------ TUNER_LG_NTSC_FM - LGINNOTEK NTSC ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_LG_PAL_FM - LGINNOTEK PAL ------------ */

 ------------ TUNER_LG_PAL - LGINNOTEK PAL ------------ */

 30-39 */

 ------------ TUNER_TEMIC_4009FN5_MULTI_PAL_FM - TEMIC PAL ------------ */

 ------------ TUNER_SHARP_2U5JF5540_NTSC - SHARP NTSC ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 ------------ TUNER_Samsung_PAL_TCPM9091PD27 - Samsung PAL ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_TEMIC_4106FH5 - TEMIC PAL ------------ */

 ------------ TUNER_TEMIC_4012FY5 - TEMIC PAL ------------ */

 ------------ TUNER_TEMIC_4136FY5 - TEMIC NTSC ------------ */

 ------------ TUNER_LG_PAL_NEW_TAPC - LGINNOTEK PAL ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 ------------ TUNER_PHILIPS_FM1216ME_MK3 - Philips PAL ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 ------------ TUNER_PHILIPS_FM1216MK5 - Philips PAL ------------ */

MHz*/, 0xce, 0x01, },

MHz*/, 0xce, 0x02, },

 ------------ TUNER_LG_NTSC_NEW_TAPC - LGINNOTEK NTSC ------------ */

 40-49 */

 ------------ TUNER_HITACHI_NTSC - HITACHI NTSC ------------ */

 ------------ TUNER_PHILIPS_PAL_MK - Philips PAL ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0xc2, },

 ---- TUNER_PHILIPS_FCV1236D - Philips FCV1236D (ATSC/NTSC) ---- */

MHz*/, 0x8e, 0xa2, },

MHz*/, 0x8e, 0x92, },

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_PHILIPS_FM1236_MK3 - Philips NTSC ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 ------------ TUNER_PHILIPS_4IN1 - Philips NTSC ------------ */

 ------------ TUNER_MICROTUNE_4049FM5 - Microtune PAL ------------ */

 33.3 MHz */

 ------------ TUNER_PANASONIC_VP27 - Panasonic NTSC ------------ */

MHz*/, 0xce, 0x01, },

MHz*/, 0xce, 0x02, },

 ------------ TUNER_TNF_8831BGFF - Philips PAL ------------ */

MHz*/, 0x8e, 0xa0, },

MHz*/, 0x8e, 0x90, },

 ------------ TUNER_MICROTUNE_4042FI5 - Microtune NTSC ------------ */

MHz*/, 0x8e, 0xa2, },

MHz*/, 0x8e, 0x94, },

MHz*/, 0x8e, 0xa1, },

MHz*/, 0x8e, 0x91, },

MHz*/,

 50-59 */

 ------------ TUNER_TCL_2002N - TCL NTSC ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 ------------ TUNER_PHILIPS_FM1256_IH3 - Philips PAL ------------ */

 33.3 MHz */

 ------------ TUNER_THOMSON_DTT7610 - THOMSON ATSC ------------ */

 single range used for both ntsc and atsc */

MHz*/, 0x8e, 0x39, },

MHz*/, 0x8e, 0x3a, },

MHz*/,

 ------------ TUNER_PHILIPS_FQ1286 - Philips NTSC ------------ */

MHz*/, 0x8e, 0x41, },

MHz*/, 0x8e, 0x42, },

 ------------ TUNER_TCL_2002MB - TCL PAL ------------ */

MHz*/, 0xce, 0x01, },

MHz*/, 0xce, 0x02, },

 ------------ TUNER_PHILIPS_FQ1216AME_MK4 - Philips PAL ------------ */

MHz*/, 0xce, 0x01, },

MHz*/, 0xce, 0x02, },

 ------------ TUNER_PHILIPS_FQ1236A_MK4 - Philips NTSC ------------ */

 ------------ TUNER_YMEC_TVF_8531MF - Philips NTSC ------------ */

 ------------ TUNER_YMEC_TVF_5533MF - Philips NTSC ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 60-69 */

 ------------ TUNER_THOMSON_DTT761X - THOMSON ATSC ------------ */

 DTT 7611 7611A 7612 7613 7613A 7614 7615 7615A */

MHz*/, 0x8e, 0x39, },

MHz*/, 0x8e, 0x3a, },

MHz*/, 0x8e, 0x39, },

MHz*/, 0x8e, 0x3a, },

 41.3 MHz */

MHz*/

 ------------ TUNER_TENA_9533_DI - Philips PAL ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 ------------ TUNER_TENA_TNF_5337 - Tena tnf5337MFD STD M/N ------------ */

MHz*/, 0x86, 0x01, },

MHz*/, 0x86, 0x02, },

 ------------ TUNER_PHILIPS_FMD1216ME(X)_MK3 - Philips PAL ------------ */

MHz*/, 0x86, 0x51, },

MHz*/, 0x86, 0x52, },

MHz*/, 0xbc, 0x41 },

MHz*/, 0xf4, 0x41 },

MHz*/, 0xbc, 0x42 },

MHz*/, 0xf4, 0x42 },

MHz*/, 0xbc, 0x44 },

MHz*/, 0xf4, 0x44 },

MHz*/

MHz*/

 ------ TUNER_LG_TDVS_H06XF - LG INNOTEK / INFINEON ATSC ----- */

MHz*/, 0x8e, 0x01 },

MHz*/, 0x8e, 0x02 },

MHz*/, 0xce, 0x01 },

MHz*/, 0xce, 0x02 },

 ------------ TUNER_YMEC_TVF66T5_B_DFF - Philips PAL ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 ------------ TUNER_LG_NTSC_TALN_MINI - LGINNOTEK NTSC ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 ------------ TUNER_PHILIPS_TD1316 - Philips PAL ------------ */

MHz*/, 0xc8, 0xa1, },

MHz*/, 0xc8, 0xa2, },

MHz*/, 0xca, 0x60, },

MHz*/, 0xca, 0xa0, },

MHz*/, 0xca, 0xc0, },

MHz*/, 0xca, 0x60, },

MHz*/, 0xca, 0xa0, },

MHz*/, 0xca, 0xc0, },

MHz*/, 0xca, 0x60, },

MHz*/, 0xca, 0xa0, },

MHz*/,

 ------------ TUNER_PHILIPS_TUV1236D - Philips ATSC ------------ */

MHz*/, 0xce, 0x01, },

MHz*/, 0xce, 0x02, },

MHz*/, 0xc6, 0x41, },

MHz*/, 0xc6, 0x42, },

 ------------ TUNER_TNF_xxx5  - Texas Instruments--------- */

/* This is known to work with Tenna TVF58t5-MFF and TVF5835 MFF

 *	but it is expected to work also with other Tenna/Ymec

 *	models based on TI SN 761677 chip on both PAL and NTSC

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 70-79 */

 ------------ TUNER_SAMSUNG_TCPN_2121P30A - Samsung NTSC ------------ */

 '+ 4' turns on the Low Noise Amplifier */

MHz*/, 0xce, 0x01 + 4, },

MHz*/, 0xce, 0x02 + 4, },

 ------------ TUNER_THOMSON_FE6600 - DViCO Hybrid PAL ------------ */

MHz*/, 0xfe, 0x11, },

MHz*/, 0xf6, 0x12, },

MHz*/, 0xb4, 0x12, },

MHz*/, 0xfe, 0x11, },

MHz*/, 0xbc, 0x18, },

MHz*/,

 ------------ TUNER_SAMSUNG_TCPG_6121P30A - Samsung PAL ------------ */

 '+ 4' turns on the Low Noise Amplifier */

MHz*/, 0xce, 0x01 + 4, },

MHz*/, 0xce, 0x02 + 4, },

 ------------ TUNER_TCL_MF02GIP-5N-E - TCL MF02GIP-5N ------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 80-89 */

 --------- TUNER_PHILIPS_FQ1216LME_MK3 -- active loopthrough, no FM ------- */

 not specified, but safe to do */

 TDA9886 */

 ----- TUNER_PARTSNIC_PTI_5NF05 - Partsnic (Daewoo) PTI-5NF05 NTSC ----- */

 The datasheet specified channel ranges and the bandswitch byte */

 The control byte value of 0x8e is just a guess */

MHz*/, 0x8e, 0x01, }, 
MHz*/, 0x8e, 0x02, }, 
 Channels W+12 -   69 */

 not specified but safe to do */

 --------- TUNER_PHILIPS_CU1216L - DVB-C NIM ------------------------- */

MHz*/, 0xce, 0x01 },

MHz*/, 0xce, 0x02 },

MHz*/

 ---------------------- TUNER_SONY_BTF_PXN01Z ------------------------ */

MHz*/, 0x8e, 0x01, },

MHz*/, 0x8e, 0x02, },

 ------------ TUNER_PHILIPS_FQ1236_MK5 - Philips NTSC ------------ */

 TDA9885, no FM radio */

 --------- Sony BTF-PG472Z PAL/SECAM ------- */

MHz*/, 0xc6, 0x01, },

MHz*/, 0xc6, 0x02, },

 90-99 */

 --------- Sony BTF-PG467Z NTSC-M-JP ------- */

MHz*/, 0xc6, 0x01, },

MHz*/, 0xc6, 0x02, },

 --------- Sony BTF-PG463Z NTSC-M ------- */

MHz*/, 0xc6, 0x01, },

MHz*/, 0xc6, 0x02, },

 --------------------------------------------------------------------- */

 0-9 */

 TEMIC PAL */

 Philips PAL_I */

 Philips NTSC */

 Philips SECAM */

 Tuner Absent */

 Philips PAL */

 TEMIC NTSC */

 TEMIC PAL_I */

 TEMIC NTSC */

 TEMIC NTSC */

 10-19 */

 TEMIC PAL */

 Alps PAL_I */

 Alps PAL */

 Alps PAL */

 TEMIC PAL */

 Alps NTSC */

 TEMIC PAL */

 Philips NTSC */

 TEMIC PAL_I */

 TEMIC PAL */

 20-29 */

 TEMIC PAL */

 TEMIC NTSC */

 TEMIC PAL */

 Philips PAL */

 Philips PAL */

 LGINNOTEK PAL_I */

 LGINNOTEK PAL_I */

 LGINNOTEK NTSC */

 LGINNOTEK PAL */

 LGINNOTEK PAL */

 30-39 */

 TEMIC PAL */

 SHARP NTSC */

 Samsung PAL */

 Microtune PAL|NTSC */

 see mt20xx.c for details */ },

 TEMIC PAL */

 TEMIC PAL */

 TEMIC NTSC */

 LGINNOTEK PAL */

 Philips PAL */

 LGINNOTEK NTSC */

 40-49 */

 HITACHI NTSC */

 Philips PAL */

 Philips ATSC */

 Philips NTSC */

 Philips NTSC */

 Microtune PAL */

 Panasonic NTSC */

 LGINNOTEK NTSC */

 Philips PAL */

 Microtune NTSC */

 50-59 */

 TCL NTSC */

 Philips PAL */

 THOMSON ATSC */

 Philips NTSC */

 Philips PAL|NTSC */

 see tda8290.c for details */ },

 TCL PAL */

 Philips PAL */

 Philips NTSC */

 Philips NTSC */

 Philips NTSC */

 60-69 */

 THOMSON ATSC */

 DTT 7611 7611A 7612 7613 7613A 7614 7615 7615A */

 Philips PAL */

 Philips RADIO */

 see tea5767.c for details */

 Philips PAL */

 LGINNOTEK ATSC */

 H061F, H062F & H064F */

 Philips PAL */

 LGINNOTEK NTSC / PAL / SECAM */

 Philips PAL */

 Philips ATSC */

 Tenna PAL/NTSC */

 70-79 */

 Samsung NTSC */

 Xceive 2028 */

 see tuner-xc2028.c for details */

 Thomson PAL / DVB-T */

 Samsung PAL */

	[TUNER_TDA9887] = { /* Philips TDA 9887 IF PLL Demodulator.

 see tda9887.c for details */

 Philips RADIO */

 see tea5767.c for details */

 Xceive 5000 */

 see xc5000.c for details */

 Xceive 4000 */

 see xc4000.c for details */

 TCL tuner MF02GIP-5N-E */

 Philips PAL */

 Philips PAL */

 80-89 */

 PAL/SECAM, Loop-thru, no FM */

 see tda18271-fe.c for details */

 NTSC, TDA9885, no FM radio */

 Tena 5337 MFD */

 Xceive 5000C */

 see xc5000.c for details */

 90-99 */

 see si2157.c for details */

 SPDX-License-Identifier: GPL-2.0

/*

 * Sharp QM1D1B0004 satellite tuner

 *

 * Copyright (C) 2014 Akihiro Tsukada <tskd08@gmail.com>

 *

 * based on (former) drivers/media/pci/pt1/va1j5jf8007s.c.

/*

 * Note:

 * Since the data-sheet of this tuner chip is not available,

 * this driver lacks some tuner_ops and config options.

 * In addition, the implementation might be dependent on the specific use

 * in the FE module: VA1J5JF8007S and/or in the product: Earthsoft PT1/PT2.

/*

 * Tuner I/F (copied from the former va1j5jf8007s.c)

 * b[0] I2C addr

 * b[1] "0":1, BG:2, divider_quotient[7:3]:5

 * b[2] divider_quotient[2:0]:3, divider_remainder:5

 * b[3] "111":3, LPF[3:2]:2, TM:1, "0":1, REF:1

 * b[4] BANDX, PSC:1, LPF[1:0]:2, DIV:1, "0":1

 *

 * PLL frequency step :=

 *    REF == 0 -> PLL XTL frequency(4MHz) / 8

 *    REF == 1 -> PLL XTL frequency(4MHz) / 4

 *

 * PreScaler :=

 *    PSC == 0 -> x32

 *    PSC == 1 -> x16

 *

 * divider_quotient := (frequency / PLL frequency step) / PreScaler

 * divider_remainder := (frequency / PLL frequency step) % PreScaler

 *

 * LPF := LPF Frequency / 1000 / 2 - 2

 * LPF Frequency @ baudrate=28.86Mbps = 30000

 *

 * band (1..9)

 *   band 1 (freq <  986000) -> DIV:1, BANDX:5, PSC:1

 *   band 2 (freq < 1072000) -> DIV:1, BANDX:6, PSC:1

 *   band 3 (freq < 1154000) -> DIV:1, BANDX:7, PSC:0

 *   band 4 (freq < 1291000) -> DIV:0, BANDX:1, PSC:0

 *   band 5 (freq < 1447000) -> DIV:0, BANDX:2, PSC:0

 *   band 6 (freq < 1615000) -> DIV:0, BANDX:3, PSC:0

 *   band 7 (freq < 1791000) -> DIV:0, BANDX:4, PSC:0

 *   band 8 (freq < 1972000) -> DIV:0, BANDX:5, PSC:0

 *   band 9 (freq < 2150000) -> DIV:0, BANDX:6, PSC:0

 Currently unused */

 step.1: set frequency with BG:2, TM:0(4MHZ), LPF:4MHz */

 inconsisnten with the above I/F doc. maybe the doc is wrong */

 step.2: set TM:1 */

 step.3: set LPF */

 step.4: read PLL lock? */

 SPDX-License-Identifier: GPL-2.0-only

/* Chips:

   TDA9885 (PAL, NTSC)

   TDA9886 (PAL, SECAM, NTSC)

   TDA9887 (PAL, SECAM, NTSC, FM Radio)



   Used as part of several tuners

 ---------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */



 TDA defines



 first reg (b)

 bit b0

 bit b0

 bit b1

 bit b1

 bit b2

 bit b2

 bit b3:4

 bit b3:4

 bit b3:4

 bit b5

 bit b5

 bit b6

 bit b6

 bit b7

 bit b7

 second reg (c)

 bit c5

 bit c5

 bit c6

 bit c6

 bit c7

 bit c7

 bit c0:4

 bit c0:4

 third reg (e)

 bit e0:1

 bit e0:1

 bit e0:1

 bit e0:1

 bit e2:4

 Video IF selection in TV Mode (bit B3=0) */

 bit e2:4

 bit e2:4

 bit e2:4

 bit e2:4

 bit e2:4

 bit e2:4

 bit e2:4

 bit e2:4

 IF1 selection in Radio Mode (bit B3=1) */

 bit e2,4 (also 0x10,0x14)

 bit e2,4

 Output of AFC pin in radio mode when bit E7=1 */

 bit e3

 bit e3

 bit e5

 bit e5

 bit e6

 bit e6

 bit e7

 bit e7

 ---------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

 radio */

 video */

 ---------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

	/* A note on the port settings:

	   These settings tend to depend on the specifics of the board.

	   By default they are set to inactive (bit value 1) by this driver,

	   overwriting any changes made by the tvnorm. This means that it

	   is the responsibility of the module using the tda9887 to set

	   these values in case of changes in the tvnorm.

	   In many cases port 2 should be made active (0) when selecting

	   SECAM-L, and port 2 should remain inactive (1) for SECAM-L'.



	   For the other standards the tda9887 application note says that

	   the ports should be set to active (0), but, again, that may

	   differ depending on the precise hardware configuration.

 ---------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Freescale MC44S803 Low Power CMOS Broadband Tuner

 *

 *  Copyright (c) 2009 Jochen Friedrich <jochen@scram.de>

 Writes a single register */

 Reads a single register */

 Reset chip */

 Power Up and Start Osc */

 Setup Mixer */

 Setup Cirquit Adjust */

 Setup Digtune */

 Setup AGC */

 36.125 MHz */

/* This functions tries to identify a MC44S803 tuner by reading the ID

 open i2c_gate */

 close i2c_gate */

 close i2c_gate */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for mt2063 Micronas tuner

 *

 * Copyright (c) 2011 Mauro Carvalho Chehab

 *

 * This driver came from a driver originally written by:

 *		Henry Wang <Henry.wang@AzureWave.com>

 * Made publicly available by Terratec, at:

 *	http://linux.terratec.de/files/TERRATEC_H7/20110323_TERRATEC_H7_Linux.tar.gz

 positive error codes used internally */

  Info: Unavoidable LO-related spur may be present in the output  */

  Info: Mask of bits used for # of LO-related spurs that were avoided during tuning  */

  Info: Upconverter frequency is out of range (may be reason for MT_UPC_UNLOCK) */

  Info: Downconverter frequency is out of range (may be reason for MT_DPC_UNLOCK) */

/*

 *  Constant defining the version of the following structure

 *  and therefore the API for this code.

 *

 *  When compiling the tuner driver, the preprocessor will

 *  check against this version number to make sure that

 *  it matches the version that the tuner driver knows about.

 DECT Frequency Avoidance */

 Do not create DECT exclusion zones.     */

 Avoid US DECT frequencies.              */

 Avoid European DECT frequencies.        */

 Avoid both regions. Not typically used. */

/*

 *  Structure of data needed for Spur Avoidance

/*

 * Parameter for function MT2063_SetPowerMask that specifies the power down

 * of various sections of the MT2063.

 Shutdown regulator                 */

 Shutdown SRO                       */

 Shutdown AFC A/D                   */

 Enable power detector shutdown     */

 Enable power detector A/D shutdown */

 Enable VCO shutdown                */

 Enable LTX shutdown                */

 Enable LT1 shutdown                */

 Enable LNA shutdown                */

 Enable upconverter shutdown        */

 Enable downconverter shutdown      */

 Enable VGA shutdown                */

 Enable AMP shutdown                */

 All shutdown bits for this tuner   */

 No shutdown bits                   */

/*

 *  Possible values for MT2063_DNC_OUTPUT

/*

 *  Two-wire serial bus subaddresses of the tuner registers.

 *  Also known as the tuner's register addresses.

  0x00: Part/Rev Code         */

  0x01: LO1C Queued Byte 1    */

  0x02: LO1C Queued Byte 2    */

  0x03: LO2C Queued Byte 1    */

  0x04: LO2C Queued Byte 2    */

  0x05: LO2C Queued Byte 3    */

  0x06: Reserved              */

  0x07: LO Status             */

  0x08: FIFF Center           */

  0x09: ClearTune Filter      */

  0x0A: ADC_OUT               */

  0x0B: LO1C Byte 1           */

  0x0C: LO1C Byte 2           */

  0x0D: LO2C Byte 1           */

  0x0E: LO2C Byte 2           */

  0x0F: LO2C Byte 3           */

  0x10: Reserved              */

  0x11: PWR Byte 1            */

  0x12: PWR Byte 2            */

  0x13: Temp Status           */

  0x14: Crystal Status        */

  0x15: RF Attn Status        */

  0x16: FIF Attn Status       */

  0x17: LNA Attn Override     */

  0x18: RF Attn Override      */

  0x19: FIF Attn Override     */

  0x1A: Reserved              */

  0x1B: Pwr Det 1 Target      */

  0x1C: Pwr Det 2 Target      */

  0x1D: Reserved              */

  0x1E: Reserved              */

  0x1F: Reserved              */

  0x20: Reserved              */

  0x21: Bypass Control        */

  0x22: Reserved              */

  0x23: Reserved              */

  0x24: Reserved              */

  0x25: Reserved              */

  0x26: Reserved              */

  0x27: Reserved              */

  0x28: FIFF Control          */

  0x29: FIFF Offset           */

  0x2A: Reserved              */

  0x2B: Reserved              */

  0x2C: Reserved              */

  0x2D: Fiff Control          */

  0x2E: Reserved              */

  0x2F: DNC Control           */

  0x30: VGA Gain Ctrl         */

  0x31: Reserved              */

  0x32: Temperature Selection */

  0x33: Reserved              */

  0x34: Reserved              */

  0x35: Reserved              */

  0x36: Reserved              */

  0x37: Reserved              */

  0x38: Reserved              */

  0x39: Reserved              */

  0x3A: Reserved              */

  0x3B: Reserved              */

  0x3C: Reserved              */

/*

 * mt2063_write - Write data into the I2C bus

/*

 * mt2063_write - Write register data into the I2C bus, caching the value

/*

 * mt2063_read - Read data from the I2C bus

 Status to be returned        */

/*

 * FIXME: Is this really needed?

	/*

	 *  ToDo:  Add code here to implement a OS blocking

/*

 * Microtune spur avoidance

  Implement ceiling, floor functions.  */

  Check for a node in the free list  */

  Use one from the free list  */

  Grab a node from the array  */

  insert at the beginning of the list  */

  Make previous node point to the subsequent node  */

  Add pNodeToRemove to the beginning of the freeZones  */

  Decrement node count  */

/*

 * MT_AddExclZone()

 *

 * Add (and merge) an exclusion zone into the list.

 * If the range (f_min, f_max) is totally outside the

 * 1st IF BW, ignore the entry.

 * If the range (f_min, f_max) is negative, ignore the entry.

  Check to see if this overlaps the 1st IF filter  */

		/*

		 *                1        2         3      4       5        6

		 *

		 *   New entry:  |---|    |--|      |--|    |-|    |---|    |--|

		 *                or       or        or     or      or

		 *   Existing:  |--|      |--|      |--|    |---|  |-|      |--|

  Check for our place in the list  */

  Combine me with pNode  */

  Look for merging possibilities  */

  Remove pNext, return ptr to pNext->next  */

/*

 *  Reset all exclusion zones.

 *  Add zones to protect the PLL FracN regions near zero

  this clears the used list  */

  reset ptr                  */

  reset ptr                  */

  Exclude LO1 FracN  */

  Exclude LO2 FracN  */

  Exclude LO1 values that conflict with DECT channels */

 Ctr = 1921.536 */

 Ctr = 1923.264 */

 Ctr = 1924.992 */

 Ctr = 1926.720 */

 Ctr = 1928.448 */

 Ctr = 1897.344 */

 Ctr = 1895.616 */

 Ctr = 1893.888 */

 Ctr = 1892.16  */

 Ctr = 1890.432 */

 Ctr = 1888.704 */

 Ctr = 1886.976 */

 Ctr = 1885.248 */

 Ctr = 1883.52  */

 Ctr = 1881.792 */

/*

 * MT_ChooseFirstIF - Choose the best available 1st IF

 *                    If f_Desired is not excluded, choose that first.

 *                    Otherwise, return the value closest to f_Center that is

 *                    not excluded

	/*

	 * Update "f_Desired" to be the nearest "combinational-multiple" of

	 * "f_LO1_Step".

	 * The resulting number, F_LO1 must be a multiple of f_LO1_Step.

	 * And F_LO1 is the arithmetic sum of f_in + f_Center.

	 * Neither f_in, nor f_Center must be a multiple of f_LO1_Step.

	 * However, the sum must be.

	/*

	 *  f_Center needs to be an integer multiple of f_Step away

	 *  from f_Desired

	/*

	 * Take MT_ExclZones, center around f_Center and change the

	 * resolution to f_Step

  floor function  */

  ceil function  */

  See if this zone overlaps the previous  */

  Add new zone  */

	/*

	 *  If the desired is okay, return with it

	/*

	 *  If the desired is excluded and the center is okay, return with it

  Find the value closest to 0 (f_Center)  */

/**

 * IsSpurInBand() - Checks to see if a spur will be present within the IF's

 *                  bandwidth. (fIFOut +/- fIFBW, -fIFOut +/- fIFBW)

 *

 *                    ma   mb                                     mc   md

 *                  <--+-+-+-------------------+-------------------+-+-+-->

 *                     |   ^                   0                   ^   |

 *                     ^   b=-fIFOut+fIFBW/2      -b=+fIFOut-fIFBW/2   ^

 *                     a=-fIFOut-fIFBW/2              -a=+fIFOut+fIFBW/2

 *

 *                  Note that some equations are doubled to prevent round-off

 *                  problems when calculating fIFBW/2

 *

 * @pAS_Info:	Avoid Spurs information block

 * @fm:		If spur, amount f_IF1 has to move negative

 * @fp:		If spur, amount f_IF1 has to move positive

 *

 *  Returns 1 if an LO spur would be present, otherwise 0.

	/*

	 **  Calculate LO frequency settings.

	/*

	 ** For each edge (d, c & f), calculate a scale, based on the gcd

	 ** of f_LO1, f_LO2 and the edge value.  Use the larger of this

	 ** gcd-based scale factor or f_Scale.

  Check out all multiples of LO1 from n0 to m_maxLOSpurHarmonic  */

  If # fLO2 harmonics > m_maxLOSpurHarmonic, then no spurs present  */

  If no spurs between +/- (f_out + f_IFBW/2), then try next harmonic  */

  Location of Zero-IF-spur to be checked  */

  No spurs found  */

/*

 * MT_AvoidSpurs() - Main entry point to avoid spurs.

 *                   Checks for existing spurs in present LO1, LO2 freqs

 *                   and if present, chooses spur-free LO1, LO2 combination

 *                   that tunes the same input/output frequencies.

  restricted range on LO's        */

	/*

	 * Avoid LO Generated Spurs

	 *

	 * Make sure that have no LO-related spurs within the IF output

	 * bandwidth.

	 *

	 * If there is an LO spur in this band, start at the current IF1 frequency

	 * and work out until we find a spur-free frequency or run up against the

	 * 1st IF SAW band edge.  Use temporary copies of fLO1 and fLO2 so that they

	 * will be unchanged if a spur-free setting is not found.

  current attempt at a 1st IF  */

  current attempt at an LO1 freq  */

  current attempt at an LO2 freq  */

		/*

		 **  Spur was found, attempt to find a spur-free 1st IF

  Raise f_IF1_upper, if needed  */

  Choose next IF1 that is closest to f_IF1_CENTER              */

		/*

		 *  Continue while the new 1st IF is still within the 1st IF bandwidth

		 *  and there is a spur in the band (again)

		/*

		 * Use the LO-spur free values found.  If the search went all

		 * the way to the 1st IF band edge and always found spurs, just

		 * leave the original choice.  It's as "good" as any other.

/*

 * Constants used by the tuning algorithm

 Reference oscillator Frequency (in Hz) */

 The IF1 filter bandwidth (in Hz) */

 Tune in steps of 50 kHz */

 Step size (in Hz) to move IF1 when avoiding spurs */

 Zero-IF spur-free bandwidth (in Hz) */

 Highest intra-tuner LO Spur Harmonic to be avoided */

 Highest inter-tuner LO Spur Harmonic to be avoided */

 Minimum inter-tuner LO frequency separation */

 LO1 FracN numerator avoid region (in Hz) */

 LO2 FracN numerator avoid region (in Hz) */

 Minimum input frequency (in Hz) */

 Maximum input frequency (in Hz) */

 Minimum output frequency (in Hz) */

 Maximum output frequency (in Hz) */

 Minimum LO2 frequency (in Hz) */

 Maximum LO2 frequency (in Hz) */

 Minimum LO1 frequency (in Hz) */

 Maximum LO1 frequency (in Hz) */

/*

 *  Define the supported Part/Rev codes for the MT2063

/**

 * mt2063_lockStatus - Checks to see if LO1 and LO2 are locked

 *

 * @state:	struct mt2063_state pointer

 *

 * This function returns 0, if no lock, 1 if locked and a value < 1 if error

  wait a maximum of 100 msec   */

  poll status bits every 2 ms */

  LO2 Lock bit was in a different place for B0 version  */

  Wait between retries  */

	/*

	 * Got no lock or partial lock

/*

 *  Constants for setting receiver modes.

 *  (6 modes defined at this time, enumerated by mt2063_delivery_sys)

 *  (DNC1GC & DNC2GC are the values, which are used, when the specific

 *   DNC Output is selected, the other is always off)

 *

 *                enum mt2063_delivery_sys

 * -------------+----------------------------------------------

 * Mode 0 :     | MT2063_CABLE_QAM

 * Mode 1 :     | MT2063_CABLE_ANALOG

 * Mode 2 :     | MT2063_OFFAIR_COFDM

 * Mode 3 :     | MT2063_OFFAIR_COFDM_SAWLESS

 * Mode 4 :     | MT2063_OFFAIR_ANALOG

 * Mode 5 :     | MT2063_OFFAIR_8VSB

 * --------------+----------------------------------------------

 *

 *                |<----------   Mode  -------------->|

 *    Reg Field   |  0  |  1  |  2  |  3  |  4  |  5  |

 *    ------------+-----+-----+-----+-----+-----+-----+

 *    RFAGCen     | OFF | OFF | OFF | OFF | OFF | OFF

 *    LNARin      |   0 |   0 |   3 |   3 |  3  |  3

 *    FIFFQen     |   1 |   1 |   1 |   1 |  1  |  1

 *    FIFFq       |   0 |   0 |   0 |   0 |  0  |  0

 *    DNC1gc      |   0 |   0 |   0 |   0 |  0  |  0

 *    DNC2gc      |   0 |   0 |   0 |   0 |  0  |  0

 *    GCU Auto    |   1 |   1 |   1 |   1 |  1  |  1

 *    LNA max Atn |  31 |  31 |  31 |  31 | 31  | 31

 *    LNA Target  |  44 |  43 |  43 |  43 | 43  | 43

 *    ign  RF Ovl |   0 |   0 |   0 |   0 |  0  |  0

 *    RF  max Atn |  31 |  31 |  31 |  31 | 31  | 31

 *    PD1 Target  |  36 |  36 |  38 |  38 | 36  | 38

 *    ign FIF Ovl |   0 |   0 |   0 |   0 |  0  |  0

 *    FIF max Atn |   5 |   5 |   5 |   5 |  5  |  5

 *    PD2 Target  |  40 |  33 |  42 |  42 | 33  | 42

/*

 * mt2063_set_dnc_output_enable()

 if DNC1 is off */

 if DNC2 is off */

 DNC1 is on */

 if DNC2 is off */

/*

 * mt2063_set_dnc_output_enable()

 Status to be returned        */

 selects, which DNC output is used */

 Set DNC1GC=3 */

 Set DNC2GC=3 */

 Set PD2MUX=0 */

 Set DNC1GC=x */

 Set DNC2GC=3 */

 Set PD2MUX=0 */

 Set DNC1GC=3 */

 Set DNC2GC=x */

 Set PD2MUX=1 */

 Set DNC1GC=x */

 Set DNC2GC=x */

 Set PD2MUX=1 */

/*

 * MT2063_SetReceiverMode() - Set the MT2063 receiver mode, according with

 *			      the selected enum mt2063_delivery_sys type.

 *

 *  (DNC1GC & DNC2GC are the values, which are used, when the specific

 *   DNC Output is selected, the other is always off)

 *

 * @state:	ptr to mt2063_state structure

 * @Mode:	desired receiver delivery system

 *

 * Note: Register cache must be valid for it to work

 Status to be returned        */

 RFAGCen */

 LNARin */

 FIFFQEN and FIFFQ */

 trigger FIFF calibration, needed after changing FIFFQ */

 DNC1GC & DNC2GC */

 acLNAmax */

 LNATGT */

 ACRF */

 PD1TGT */

 FIFATN */

 PD2TGT */

 Ignore ATN Overload */

 Ignore FIF Overload */

/*

 * MT2063_ClearPowerMaskBits () - Clears the power-down mask bits for various

 *				  sections of the MT2063

 *

 * @Bits:		Mask bits to be cleared.

 *

 * See definition of MT2063_Mask_Bits type for description

 * of each of the power bits.

 Only valid bits for this tuner */

/*

 * MT2063_SoftwareShutdown() - Enables or disables software shutdown function.

 *			       When Shutdown is 1, any section whose power

 *			       mask is set will be shutdown.

/**

 * MT2063_fLO_FractionalTerm - Calculates the portion contributed by FracN / denom.

 *                        This function preserves maximum precision without

 *                        risk of overflow.  It accurately calculates

 *                        f_ref * num / denom to within 1 HZ with fixed math.

 *

 * @f_ref:	SRO frequency.

 * @num:	Fractional portion of the multiplier

 * @denom:	denominator portion of the ratio

 *

 * This calculation handles f_ref as two separate 14-bit fields.

 * Therefore, a maximum value of 2^28-1 may safely be used for f_ref.

 * This is the genesis of the magic number "14" and the magic mask value of

 * 0x03FFF.

 *

 * This routine successfully handles denom values up to and including 2^18.

 *  Returns:        f_ref * num / denom

/*

 * MT2063_CalcLO1Mult - Calculates Integer divider value and the numerator

 *                value for a FracN PLL.

 *

 *                This function assumes that the f_LO and f_Ref are

 *                evenly divisible by f_LO_Step.

 *

 * @Div:	OUTPUT: Whole number portion of the multiplier

 * @FracN:	OUTPUT: Fractional portion of the multiplier

 * @f_LO:	desired LO frequency.

 * @f_LO_Step:	Minimum step size for the LO (in Hz).

 * @f_Ref:	SRO frequency.

 * @f_Avoid:	Range of PLL frequencies to avoid near integer multiples

 *		of f_Ref (in Hz).

 *

 * Returns:        Recalculated LO frequency.

  Calculate the whole number portion of the divider */

  Calculate the numerator value (round to nearest f_LO_Step) */

/**

 * MT2063_CalcLO2Mult - Calculates Integer divider value and the numerator

 *                 value for a FracN PLL.

 *

 *                  This function assumes that the f_LO and f_Ref are

 *                  evenly divisible by f_LO_Step.

 *

 * @Div:	OUTPUT: Whole number portion of the multiplier

 * @FracN:	OUTPUT: Fractional portion of the multiplier

 * @f_LO:	desired LO frequency.

 * @f_LO_Step:	Minimum step size for the LO (in Hz).

 * @f_Ref:	SRO frequency.

 *

 * Returns: Recalculated LO frequency.

  Calculate the whole number portion of the divider */

  Calculate the numerator value (round to nearest f_LO_Step) */

/*

 * FindClearTuneFilter() - Calculate the corrrect ClearTune filter to be

 *			   used for a given input frequency.

 *

 * @state:	ptr to tuner data structure

 * @f_in:	RF input center frequency (in Hz).

 *

 * Returns: ClearTune filter number (0-31)

  index loop                      */

	/*

	 **  Find RF Band setting

  def when f_in > all    */

/*

 * MT2063_Tune() - Change the tuner's tuned frequency to RFin.

 RF input center frequency   */

  1st LO register value           */

  Numerator for LO1 reg. value    */

  1st IF requested                */

  2nd LO register value           */

  Numerator for LO2 reg. value    */

  last time's LO frequencies      */

  FIFF center freq from tuner     */

  Offset from FIFF center freq    */

  Mask for LO1 Lock bit           */

  Mask for LO2 Lock bit           */

  Check the input and output frequency ranges                   */

	/*

	 * Save original LO1 and LO2 register values

	/*

	 * Find and set RF Band setting

	/*

	 * Read the FIFF Center Frequency from the tuner

	/*

	 * Assign in the requested values

  Request a 1st IF such that LO1 is on a step size */

	/*

	 * Calculate frequency settings.  f_IF1_FREQ + f_in is the

	 * desired LO1 frequency

	/*

	 * Check for any LO spurs in the output bandwidth and adjust

	 * the LO settings to avoid them if needed

	/*

	 * MT_AvoidSpurs spurs may have changed the LO1 & LO2 values.

	 * Recalculate the LO frequencies and the values to be placed

	 * in the tuning registers.

	/*

	 *  Check the upconverter and downconverter frequency ranges

  LO2 Lock bit was in a different place for B0 version  */

	/*

	 *  If we have the same LO frequencies and we're already locked,

	 *  then skip re-programming the LO registers.

		/*

		 * Calculate the FIFFOF register value

		 *

		 *           IF1_Actual

		 * FIFFOF = ------------ - 8 * FIFFC - 4992

		 *            f_ref/64

		/*

		 * Place all of the calculated values into the local tuner

		 * register fields.

 DIV1q */

 NUM1q */

 DIV2q */

 NUM2q (hi) */

 NUM2q (mid) */

 NUM2q (lo) */

			/*

			 * Now write out the computed register values

			 * IMPORTANT: There is a required order for writing

			 *            (0x05 must follow all the others).

 0x01 - 0x05 */

 Re-write the one-shot bits to trigger the tune operation */

 0x05 */

 Write out the FIFF offset only if it's changing */

		/*

		 * Check for LO's locking

 Couldn't lock */

		/*

		 * If we locked OK, assign calculated data to mt2063_state structure

 Reg,  Value */

  bit at 0x20 is cleared below  */

  bit at 0x20 is cleared here   */

  Set the FIFCrst bit here      */

  Clear the FIFCrst bit here    */

 writing 0x05 0xf0 sw-resets all registers, so we write only needed changes */

 Reg,  Value */

 New Enable AFCsd */

 New - ver 1.03 */

 New - ver 1.10 */

 New - ver 1.03 */

  bit at 0x20 is cleared below  */

  FIFFQ=0  */

 New - ver 1.11 */

 New - ver 1.11 */

  bit at 0x20 is cleared here  */

  Set the FIFCrst bit here      */

  Clear the FIFCrst bit here    */

 writing 0x05 0xf0 sw-resets all registers, so we write only needed changes */

 Reg,  Value */

  bit at 0x20 is cleared below  */

  bit at 0x20 is cleared here  */

  Set the FIFCrst bit here      */

  Clear the FIFCrst bit here    */

 reset/load bits */

  Read the Part/Rev code from the tuner */

 Check the part/rev code */

  Wrong tuner Part/Rev code */

  Check the 2nd byte of the Part/Rev code from the tuner */

 b7 != 0 ==> NOT MT2063 */

  Wrong tuner Part/Rev code */

  Reset the tuner  */

 change all of the default values that vary from the HW reset values */

  def = (state->reg[PART_REV] == MT2063_B0) ? MT2063B0_defaults : MT2063B1_defaults; */

  Wait for FIFF location to complete.  */

 Read back all the registers from the tuner */

  Initialize the tuner state.  */

	/*

	 **   Fetch the FCU osc value and use it and the fRef value to

	 **   scale all of the Band Max values

  Read the ClearTune filter calibration value  */

  Adjust each of the values in the ClearTune filter cross-over table  */

 PAL/SECAM standards */

 FIXME: probably 5000 for FM */

/*

 * As defined on EN 300 429, the DVB-C roll-off factor is 0.15.

 * So, the amount of the needed bandwidth is given by:

 *	Bw = Symbol_rate * (1 + 0.15)

 * As such, the maximum symbol rate supported by 6 MHz is given by:

 *	max_symbol_rate = 6 MHz / 1.15 = 5217391 Bauds

 FIXME: probably 5000 for FM */

 kHz */

/*

 * Ancillary routines visible outside mt2063

 * FIXME: Remove them in favor of using standard tuner callbacks

 SPDX-License-Identifier: GPL-2.0

 For Philips TEA5767 FM Chip used on some TV Cards like Prolink Pixelview

 I2C address is always 0xC0.



 Copyright (c) 2005 Mauro Carvalho Chehab <mchehab@kernel.org>



 tea5767 autodetection thanks to Torsten Seeboth and Atsushi Nakagawa

 from their contributions on DScaler.

****************************************************************************/

****************************************************************************/

/******************************

 * Write mode register values *

 First register */

 Mutes output */

 Activates station search */

 Bits 0-5 for divider MSB */

 Second register */

 Bits 0-7 for divider LSB */

 Third register */

 Station search from botton to up */

 Searches with ADC output = 10 */

 Searches with ADC output = 10 */

 Searches with ADC output = 5 */

 if on, div=4*(Frf+Fif)/Fref otherwise, div=4*(Frf-Fif)/Freq) */

 Disable stereo */

 Disable right channel and turns to mono */

 Disable left channel and turns to mono */

 Fourth register */

 Chips stops working. Only I2C bus remains on */

 Japan freq (76-108 MHz. If disabled, 87.5-108 MHz */

 Unselected means 32.768 KHz freq as reference. Otherwise Xtal at 13 MHz */

 Cuts weak signals */

 Activates high cut control */

 Activates stereo noise control */

 If activate PORT 1 indicates SEARCH or else it is used as PORT1 */

 Fifth register */

 By activating, it will use Xtal at 13 MHz as reference for divider */

 By activating, deemphasis=50, or else, deemphasis of 50us */

/*****************************

 * Read mode register values *

 First register */

 Bits 0-5 for divider MSB after search or preset */

 Second register */

 Bits 0-7 for divider LSB after search or preset */

 Third register */

 Fourth register */

 should be 0 */

 Fifth register */

 Reserved for future extensions */

****************************************************************************/

 Freq in KHz */

 Freq in KHz */

 Freq in KHz */

 Freq in KHz */

 Freq should be specifyed at 62.5 Hz */

 Rounds freq to next decimal value - for 62.5 KHz step */

 frq = 20*(frq/16)+radio_frq[frq%16]; */

 const 700=4000*175 Khz - to adjust freq to right value */

 Set frequency to 87.5 MHz */

 If all bytes are the same then it's a TV tuner and not a tea5767 */

	/*  Status bytes:

	 *  Byte 4: bit 3:1 : CI (Chip Identification) == 0

	 *          bit 0   : internally set to 0

	 *  Byte 5: bit 7:0 : == 0

 Philips TEA5767HN FM Radio

 SPDX-License-Identifier: GPL-2.0

/*

 * MaxLinear MxL301RF OFDM tuner driver

 *

 * Copyright (C) 2014 Akihiro Tsukada <tskd08@gmail.com>

/*

 * NOTICE:

 * This driver is incomplete and lacks init/config of the chips,

 * as the necessary info is not disclosed.

 * Other features like get_if_frequency() are missing as well.

 * It assumes that users of this driver (such as a PCI bridge of

 * DTV receiver cards) properly init and configure the chip

 * via I2C *before* calling this driver's init() function.

 *

 * Currently, PT3 driver is the only one that uses this driver,

 * and contains init/config code in its firmware.

 * Thus some part of the code might be dependent on PT3 specific config.

 tuner_ops */

 get RSSI and update propery cache, set to *out in % */

 x8 dBm */

 *out = (level - min) * 100 / (max - min) */

 spur shift parameters */

 Channel center frequency */

 Offset frequency threshold */

 Spur shift value */

 Spur shift direction */

 abort tuning */

 BW */

 spur shift value (placeholder) */

 spur shift direction (placeholder) */

 RF frequency L (placeholder) */

 RF frequency H (placeholder) */

 start tune */

 spur shift function (for analog) */

 convert freq to 10.6 fixed point float [MHz] */

/* init sequence is not public.

 * the parent must have init'ed the device.

 * just wake up here.

 I2C driver functions */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    tda18271-maps.c - driver for the Philips / NXP TDA18271 silicon tuner



    Copyright (C) 2007, 2008 Michael Krufky <mkrufky@linuxtv.org>



 post div */

      div */

---------------------------------------------------------------------*/

 end */

 end */

 end */

 end */

 end */

 end */

 end */

 end */

 end */

 end */

 end */

 end */

 end */

---------------------------------------------------------------------*/

 end */

---------------------------------------------------------------------*/

 end */

---------------------------------------------------------------------*/

 end */

---------------------------------------------------------------------*/

---------------------------------------------------------------------*/

 we should never get here */

 we should never get here */

---------------------------------------------------------------------*/

 EP3[4:0] 0x18 */

 EP3[4:0] 0x0e */

 EP3[4:0] 0x0f */

 EP3[4:0] 0x0f */

 EP3[4:0] 0x0f */

 EP3[4:0] 0x0f */

 EP3[4:0] 0x0f */

 EP3[4:0] 0x0d */

 EP3[4:0] 0x1c */

 EP3[4:0] 0x1c */

 EP3[4:0] 0x1d */

 EP3[4:0] 0x1e */

 EP3[4:0] 0x1d */

 EP3[4:0] 0x1e */

 EP3[4:0] 0x1f */

 EP3[4:0] 0x18 */

 EP3[4:0] 0x0d */

 EP3[4:0] 0x0e */

 EP3[4:0] 0x0e */

 EP3[4:0] 0x0e */

 EP3[4:0] 0x0e */

 EP3[4:0] 0x0e */

 EP3[4:0] 0x0c */

 EP3[4:0] 0x1c */

 EP3[4:0] 0x1c */

 EP3[4:0] 0x1c */

 EP3[4:0] 0x1d */

 EP3[4:0] 0x1d */

 EP3[4:0] 0x1e */

 EP3[4:0] 0x1f */

---------------------------------------------------------------------*/

 SPDX-License-Identifier: GPL-2.0

 Rafael Micro R820T driver



 Copyright (C) 2013 Mauro Carvalho Chehab



 This driver was written from scratch, based on an existing driver

 that it is part of rtl-sdr git tree, released under GPLv2:

	https:
	https:


 From what I understood from the threads, the original driver was converted

 to userspace from a Realtek tree. I couldn't find the original tree.

 However, the original driver look awkward on my eyes. So, I decided to

 write a new version from it from the scratch, while trying to reproduce

 everything found there.



 TODO:

	After locking, the original driver seems to have some routines to

		improve reception. This was not implemented here yet.



	RF Gain set/get is not implemented.

/*

 * FIXME: I think that there are only 32 registers, but better safe than

 *	  sorry. After finishing the driver, we may review it.

/*

 * enums and structures

 kHz */

 Store current mode */

 in MHz */

 Not used, currently */

/*

 * Static constants

 Those initial values start from REG_SHADOW_START */

 05 to 07 */

 08 to 0b */

 0c to 0f */

 10 to 13 */

 14 to 17 */

 18 to 1b */

 1c to 1f */

 Tuner frequency ranges */

 low */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band2,band0 */

 R16[1:0]  20pF (10)   */

 Start freq, in MHz */

 low */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band4,band1  */

 R16[1:0]  20pF (10)   */

 Start freq, in MHz */

 low */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band7,band4 */

 R16[1:0]  20pF (10)   */

 Start freq, in MHz */

 low */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band8,band4 */

 R16[1:0]  20pF (10)   */

 Start freq, in MHz */

 low */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band9,band6 */

 R16[1:0]  20pF (10)   */

 Start freq, in MHz */

 low */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band10,band7 */

 R16[1:0]  20pF (10)   */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band11,band11 */

 R16[1:0]  20pF (10)   */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band11,band11 */

 R16[1:0]  20pF (10)   */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band12,band11 */

 R16[1:0]  10pF (01)   */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band12,band11 */

 R16[1:0]  10pF (01)    */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band13,band11 */

 R16[1:0]  10pF (01)   */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band13,band11 */

 R16[1:0]  10pF (01)   */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band14,band11 */

 R16[1:0]  10pF (01)   */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band14,band12 */

 R16[1:0]  0pF (00)   */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  band14,band12 */

 R16[1:0]  0pF (00)   */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  highest,highest */

 R16[1:0]  0pF (00)   */

 Start freq, in MHz */

 high */

 R26[7:6]=0 (LPF)  R26[1:0]=2 (low) */

 R27[7:0]  highest,highest */

 R16[1:0]  0pF (00)   */

 Start freq, in MHz */

 high */

 R26[7:6]=1 (bypass)  R26[1:0]=1 (middle) */

 R27[7:0]  highest,highest */

 R16[1:0]  0pF (00)   */

 Start freq, in MHz */

 high */

 R26[7:6]=1 (bypass)  R26[1:0]=1 (middle) */

 R27[7:0]  highest,highest */

 R16[1:0]  0pF (00)   */

 Start freq, in MHz */

 high */

 R26[7:6]=1 (bypass)  R26[1:0]=0 (highest) */

 R27[7:0]  highest,highest */

 R16[1:0]  0pF (00)   */

 Start freq, in MHz */

 high */

 R26[7:6]=1 (bypass)  R26[1:0]=0 (highest) */

 R27[7:0]  highest,highest */

 R16[1:0]  0pF (00)   */

/*

 * I2C read/write code and shadow registers logic

 Store the shadow registers */

 Fill I2C buffer */

 work around GCC PR81715 with asan-stack=1 */

 Copy data to the output buffer */

/*

 * r820t tuning logic

 Get the proper frequency range */

 Open Drain */

 RF_MUX,Polymux */

 TF BAND */

 XTAL CAP & Drive */

 VCO contribution by SDM (kHz) */

 Frequency in kHz */

 Doesn't exist on rtl-sdk, and on field tests, caused troubles */

 ref set refdiv2, reffreq = Xtal/2 on ATV application */

 set pll autotune = 128kHz */

 set VCO current = 100 */

 Calculate divider */

	/*

	 * XXX: R828D/16MHz seems to have always vco_fine_tune=1.

	 * Due to that, this calculation goes wrong.

 boundary spur prevention */

 pw_sdm */

 sdm calculator */

 Check if PLL has locked */

 Didn't lock. Increase VCO current */

 set pll autotune = 8kHz */

 mixer top:14 , top-1, low-discharge */

 detect bw 3, lna top:4, predet top:2 */

 101, 0.2 */

 10, 200u */

 mixer top:13 , top-1, low-discharge */

 detect bw 3, lna top:4, predet top:2 */

 111, auto */

 11, 150u */

 lna vth 0.84	,  vtl 0.64 */

 mixer vth 1.04, vtl 0.84 */

 10, low */

 mixer top:13 , top-1, low-discharge */

 detect bw 3, lna top:4, predet top:2 */

 lna vth 0.84	,  vtl 0.64 */

 mixer vth 1.04, vtl 0.84 */

 111, auto */

 11, 150u */

 10, low */

 mixer top:13 , top-1, low-discharge */

 detect bw 3, lna top:4, predet top:2 */

 lna vth 1.04	,  vtl 0.84 */

 mixer vth 1.04, vtl 0.84 */

 111, auto */

 11, 150u */

 10, low */

 mixer top:13 , top-1, low-discharge */

 111, auto */

 11, 150u */

 10, low */

 DVB-T 8M */

 mixer top:13 , top-1, low-discharge */

 detect bw 3, lna top:4, predet top:2 */

 lna vth 0.84	,  vtl 0.64 */

 mixer vth 1.04, vtl 0.84 */

 111, auto */

 11, 150u */

 10, low */

 Air-IN only for Astrometa */

	/*

	 * Original driver initializes regs 0x05 and 0x06 with the

	 * same value again on this point. Probably, it is just an

	 * error there

	/*

	 * Set LNA

 LNA TOP: lowest */

 0: normal mode */

 0: PRE_DECT off */

 agc clk 250hz */

 write LNA TOP = 3 */

		/*

		 * write discharge mode

		 * FIXME: IMHO, the mask here is wrong, but it matches

		 * what's there at the original driver

 LNA discharge current */

 agc clk 60hz */

 PRE_DECT off */

 write LNA TOP */

		/*

		 * write discharge mode

		 * FIXME: IMHO, the mask here is wrong, but it matches

		 * what's there at the original driver

 LNA discharge current */

 agc clk 1Khz, external det1 cap 1u */

 +3db, 6mhz on */

 image negative */

 r10[4]:low q(1'b1) */

 1.7m disable, +2cap, 1.25mhz */

 r30[6], ext enable; r30[5]:0 ext at lna max */

 r5[7], lt on */

 r31[7], lt att enable */

 r15[7]: flt_ext_wide on */

 r25[6:5]:min */

 +3db, 6mhz on */

 image negative */

 r10[4]:low q(1'b1) */

 1.7m disable, +0cap, 1.0mhz */

 r30[6]=1 ext enable; r30[5]:1 ext at lna max-1 */

 r5[7], lt on */

 r31[7], lt att enable */

 r15[7]: flt_ext_wide off */

 r25[6:5]:min */

 +3db, 6mhz on */

 image negative */

 r10[4]:low q(1'b1) */

 1.7m disable, +0cap, 1.0mhz */

 r30[6]=1 ext enable; r30[5]:1 ext at lna max-1 */

 r5[7], lt on */

 r31[7], lt att enable */

 r15[7]: flt_ext_wide on */

 r25[6:5]:min */

 52000->56000 */

 +3db, 6mhz on */

 image negative */

 r10[4]:low q(1'b1) */

 1.7m disable, +2cap, 1.0mhz */

 r30[6]=1 ext enable; r30[5]:1 ext at lna max-1 */

 r5[7], lt on */

 r31[7], lt att enable */

 r15[7]: flt_ext_wide off */

 r25[6:5]:min */

			/*

			 * There are two 7 MHz tables defined on the original

			 * driver, but just the second one seems to be visible

			 * by rtl2832. Keep this one here commented, as it

			 * might be needed in the future

 +3db, 6mhz on */

 image negative */

 r10[4]:low q(1'b1) */

 1.7m disable, +1cap, 1.0mhz */

 r30[6]=1 ext enable; r30[5]:1 ext at lna max-1 */

 r5[7], lt on */

 r31[7], lt att enable */

 r15[7]: flt_ext_wide off */

 r25[6:5]:min */

 7 MHz, second table */

 +3db, 6mhz on */

 image negative */

 r10[4]:low q(1'b1) */

 1.7m disable, +1cap, 1.25mhz */

 r30[6]=1 ext enable; r30[5]:1 ext at lna max-1 */

 r5[7], lt on */

 r31[7], lt att enable */

 r15[7]: flt_ext_wide off */

 r25[6:5]:min */

 +3db, 6mhz on */

 image negative */

 r10[4]:low q(1'b1) */

 1.7m disable, +0cap, 1.0mhz */

 r30[6]=1 ext enable; r30[5]:1 ext at lna max-1 */

 r5[7], lt on */

 r31[7], lt att enable */

 r15[7]: flt_ext_wide off */

 r25[6:5]:min */

 Initialize the shadow registers */

 Init Flag & Xtal_check Result */

 version */

 for LT Gain test */

 Check if standard changed. If so, filter calibration is needed */

 Set filt_cap */

 set cali clk =on */

 X'tal cap 0pF for PLL */

 Start Trigger */

 Stop Trigger */

 set cali clk =off */

 Check if calibration worked */

 narrowest */

 Set BW, Filter_gain, & HP corner */

 Set Img_R */

 Set filt_3dB, V6MHz */

 channel filter extension */

 Loop through */

 Loop through attenuation */

 filter extension widest */

 RF poly filter current */

 Store current standard. If it changes, re-calibrate the tuner */

 FIXME: This routine requires more testing */

/*

 * measured with a Racal 6103E GSM test set at 928 MHz with -60 dBm

 * input power, for raw results see:

 *	http://steve-m.de/projects/rtl-sdr/gain_measurement/r820t/

 LNA auto off */

 Mixer auto off */

 set fixed VGA gain for now (16.3 dB) */

 set LNA gain */

 set Mixer gain */

 LNA */

 Mixer */

 set fixed VGA gain for now (26.5 dB) */

 in HZ */,

/*

 * r820t standby logic

 If device was not initialized yet, don't need to standby */

 Force initial calibration */

/*

 * r820t device init logic

 Initialize the shadow registers */

 cap 30pF & Drive Low */

 set pll autotune = 128kHz */

 set manual initial reg = 111111;  */

 set auto */

 Try several xtal capacitor alternatives */

 Initialize the shadow registers */

 lna off (air-in off) */

 mixer gain mode = manual */

 filter corner = lowest */

 filter bw=+2cap, hp=5M */

 adc=on, vga code mode, gain = 26.5dB   */

 ring clk = on */

 ring power = on */

 from ring = ring pll in */

 sw_pdect = det3 */

 Set filt_3dB */

 (0,0)(0,Q-1)(0,I-1)(Q-1,0)(I-1,0) */

 0 */

 Q-1 */

 0 */

 I-1 */

 Q-1 */

 I-1 */

 y-direction */

 (0,0) or x-direction */

	/*

	 * Purpose: if (Gain<9 or Phase<9), Gain+1 or Phase+1 and compare

	 * with min value:

	 *  new < min => update to min and continue

	 *  new > min => Exit

 min value already saved in iq[0] */

	/*

	 * record IMC results by input gain/phase location then adjust

	 * gain or phase positive 1 step and negative 1 step,

	 * both record results

 try right-side point */

 try left-side point */

 if absolute location is 1, change I/Q direction */

 b[5]:I/Q selection. 0:Q-path, 1:I-path */

 Try X-1 column and save min result to compare_bet[0] */

 Q-path, Gain=1 */

 left point */

 y-direction */

 Try X column and save min result to compare_bet[1] */

 Try X+1 column and save min result to compare_bet[2] */

 I-path, Gain=1 */

 increase vga power to let image significant */

 1:x, 0:y */

 compare and find min of 3 points. determine i/q direction */

 increase step to find min value of this direction */

 the other direction */

 compare and find min of 3 points. determine i/q direction */

 increase step to find min value on this direction */

 check 3 points again */

 section-9 check */

 reset gain/phase control setting */

	/*

	 * search surrounding points from previous point

	 * try (x-1), (x), (x+1) columns, and find min IMR result point

 set ring[3:0] */

 clear ring_se23 */

 clear ring_seldiv */

 clear ring_att */

 ring_se23 = 1 */

 ring_seldiv = 3 */

 ring_att 10 */

 ring_se23 = 0 */

 ring_seldiv = 2 */

 pw_ring 00 */

 ring_se23 = 0 */

 ring_seldiv = 1 */

 pw_ring 11 */

 ring_se23 = 1 */

 ring_seldiv = 0 */

 pw_ring 11 */

 ring_se23 = 0 */

 ring_seldiv = 0 */

 pw_ring 01 */

 ring_se23 = 0 */

 ring_seldiv = 0 */

 pw_ring 01 */

 write pw_ring, n_ring, ringdiv2 registers */

 n_ring, ring_se23 */

 ring_sediv */

 pw_ring */

 mux input freq ~ rf_in freq */

 save IMR value */

 Detect Xtal capacitance */

 Initialize registers */

	/*

	 * Disables IMR calibration. That emulates the same behaviour

	 * as what is done by rtl-sdr userspace library. Useful for testing

 Initialize registers */

 Not used, for now */

/*

 *  r820t frontend operations and tuner attach code

 *

 * All driver locks and i2c control are only in this part of the code

 Initialize registers */

 if std is not defined, choose one */

 A higher gain at LNA means a lower signal strength */

 memory allocation failure */

 new tuner instance */

 existing tuner instance */

 check if the tuner is there */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * FCI FC2580 silicon tuner driver

 *

 * Copyright (C) 2012 Antti Palosaari <crope@iki.fi>

/*

 * TODO:

 * I2C write and read works only for one single register. Multiple registers

 * could not be accessed using normal register address auto-increment.

 * There could be (very likely) register to change that behavior....

/* write single register conditionally only when value differs from 0xff

 * XXX: This is special routine meant only for writing fc2580_freq_regs_lut[]

	/*

	 * Fractional-N synthesizer

	 *

	 *                      +---------------------------------------+

	 *                      v                                       |

	 *  Fref   +----+     +----+     +-------+         +----+     +------+     +---+

	 * ------> | /R | --> | PD | --> |  VCO  | ------> | /2 | --> | /N.F | <-- | K |

	 *         +----+     +----+     +-------+         +----+     +------+     +---+

	 *                                 |

	 *                                 |

	 *                                 v

	 *                               +-------+  Fout

	 *                               | /Rout | ------>

	 *                               +-------+

 select reference divider R (keep PLL div N in valid range) */

 calculate PLL integer and fractional control word */

 registers */

 IF filters */

 trigger filter */

 locked when [7:6] are set (val: d7 6MHz, d5 7MHz, cd 8MHz) */

/*

 * DVB API

 Zero-IF */

/*

 * V4L2 API

		/*

		 * TODO: Auto logic does not work 100% correctly as tuner driver

		 * do not have information to calculate maximum suitable

		 * bandwidth. Calculating it is responsible of master driver.

 internal clock */

 check if the tuner is there */

 Register controls */

 SPDX-License-Identifier: GPL-2.0

/*

 * Sharp QM1D1C0042 8PSK tuner driver

 *

 * Copyright (C) 2014 Akihiro Tsukada <tskd08@gmail.com>

/*

 * NOTICE:

 * As the disclosed information on the chip is very limited,

 * this driver lacks some features, including chip config like IF freq.

 * It assumes that users of this driver (such as a PCI bridge of

 * DTV receiver cards) know the relevant info and

 * configure the chip via I2C if necessary.

 *

 * Currently, PT3 driver is the only one that uses this driver,

 * and contains init/config code in its firmware.

 * Thus some part of the code might be dependent on PT3 specific config.

 set fast search mode */

 BB_Reg_enable */

 NORMAL (wake-up) */

 pfd_rst NORMAL */

 tuner_ops */

 divisor, vco_band parameters */

  {maxfreq,  param1(band?), param2(div?) */

 div2/vco_band */

 LPF */

 LPF_CLK, LPF_FC */

	/*

	 * b = (freq / state->cfg.xtal_freq - a) << 20;

	 * sd = b          (b >= 0)

	 *      1<<22 + b  (b < 0)

 CSEL_Offset */

 VCO_TM, LPF_TM */

 LPF_FC */

 CSEL_Offset */

 BB_Reg_disable */

 STDBY */

 pfd_rst STANDBY */

 soft reset on */

 soft reset off */

 check ID and choose initial registers corresponding ID */

 set all writable registers */

 I2C driver functions */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * i2c tv tuner chip device driver

 * controls all those simple 4-control-bytes style tuners.

 *

 * This "tuner-simple" module was split apart from the original "tuner" module.

 ---------------------------------------------------------------------- */

/* tv standard selection for Temic 4046 FM5

   this value takes the low bits of control byte 2

   from datasheet Rev.01, Feb.00

     standard     BG      I       L       L2      D

     picture IF   38.9    38.9    38.9    33.95   38.9

     sound 1      33.4    32.9    32.4    40.45   32.4

     sound 2      33.16

     NICAM        33.05   32.348  33.05           33.05

 SECAM ? */

 change IF ! */

/* tv tuner system standard selection for Philips FQ1216ME

   this value takes the low bits of control byte 2

   from datasheet "1999 Nov 16" (supersedes "1999 Mar 23")

     standard		BG	DK	I	L	L`

     picture carrier	38.90	38.90	38.90	38.90	33.95

     colour		34.47	34.47	34.47	34.47	38.38

     sound 1		33.40	32.40	32.90	32.40	40.45

     sound 2		33.16	-	-	-	-

     NICAM		33.05	33.05	32.35	33.05	39.80

 Bit 2 always zero !*/

/* system switching for Philips FI1216MF MK2

   from datasheet "1996 Jul 09",

    standard         BG     L      L'

    picture carrier  38.90  38.90  33.95

    colour	     34.47  34.37  38.38

    sound 1          33.40  32.40  40.45

    sound 2          33.16  -      -

    NICAM            33.05  33.05  39.80

 Bit 2 must be zero, Bit 3 is system output */

 Used on Secam France */

 Used on SECAM L' */

 Control byte */

 Bit cb1:cb2 */

 Bit cb6 */

 Status byte */

 ---------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

 use default tuner params if desired_type not available */

 ---------------------------------------------------------------------- */

 tv norm specific stuff for multi-norm tuners */

 FI1216MF */

 0x01 -> ??? no change ??? */

 0x02 -> PAL BDGHI / SECAM L */

 0x04 -> ??? PAL others / SECAM others ??? */

 also valid for V4L2_STD_SECAM */

 V4L2_STD_B|V4L2_STD_GH */

 0x00 -> ATSC antenna input 1 */

 0x01 -> ATSC antenna input 2 */

 0x02 -> NTSC antenna input 1 */

 0x03 -> NTSC antenna input 2 */

 Set the charge pump for fast tuning */

 0x40 -> ATSC antenna input 1 */

 0x48 -> ATSC antenna input 2 */

 0x00 -> NTSC antenna input 1 */

 0x08 -> NTSC antenna input 2 */

 set to the correct mode (analog or digital) */

 External AGC */

 FIXME - this may also work for other tuners */

 Wait until the PLL locks */

 Set the charge pump for optimized phase noise figure */

 Set the low band for sanity, since it covers 88-108 MHz */

 ---------------------------------------------------------------------- */

	/* IFPCoff = Video Intermediate Frequency - Vif:

		940  =16*58.75  NTSC/J (Japan)

		732  =16*45.75  M/N STD

		704  =16*44     ATSC (at DVB code)

		632  =16*39.50  I U.K.

		622.4=16*38.90  B/G D/K I, L STD

		592  =16*37.00  D China

		590  =16.36.875 B Australia

		543.2=16*33.95  L' STD

		171.2=16*10.70  FM Radio (at set_radio_freq)

 tv norm specific stuff for multi-norm tuners */

 default t_params (j=0) will be used if desired type wasn't found */

 Select Radio 1st IF used */

 10.7 MHz */

 33.3 MHz */

 41.3 MHz */

 50 kHz step */

 Bandswitch byte */

	/* Convert from 1/16 kHz V4L steps to 1/20 MHz (=50 kHz) PLL steps

	   freq * (1 Mhz / 16000 V4L steps) * (20 PLL steps / 1 MHz) =

 Write AUX byte */

 set TOP AGC */

 determine band */

 setup PLL filter */

 This function returns the tuned frequency on success, 0 on error */

		/* tuner-core was loaded before the digital tuner was

 failure */

 failure */

 calculate the frequency we set it to */

 put analog demod in standby when tuning digital */

	/* buf[0] contains the i2c address, but *

 calc_regs sets frequency and bandwidth. if we failed, unset them */

	/* If i2c_adap is set, check that the tuner is at the correct address.

	 * Otherwise, if i2c_adap is NULL, the tuner will be programmed directly

	 * by the digital demod via calc_regs.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Mirics MSi001 silicon tuner driver

 *

 * Copyright (C) 2013 Antti Palosaari <crope@iki.fi>

 * Copyright (C) 2014 Antti Palosaari <crope@iki.fi>

 Controls */

 Register format: 4 bits addr + 20 bits value */

 AM_MODE2, antenna 2 */

 VHF_MODE */

 B3_MODE */

 B45_MODE */

 BL_MODE */

 Zero IF */

 450 kHz IF */

 1.62 MHz IF */

 2.048 MHz IF */

 200 kHz */

 300 kHz */

 600 kHz */

 1.536 MHz */

 5 MHz */

 6 MHz */

 7 MHz */

 8 MHz */

	/*

	 * bandwidth (Hz)

	 * 200000, 300000, 600000, 1536000, 5000000, 6000000, 7000000, 8000000

	/*

	 * intermediate frequency (Hz)

	 * 0, 450000, 1620000, 2048000

 AM_MODE is upconverted */

 filters */

	/*

	 * Fractional-N synthesizer

	 *

	 *           +---------------------------------------+

	 *           v                                       |

	 *  Fref   +----+     +-------+         +----+     +------+     +---+

	 * ------> | PD | --> |  VCO  | ------> | /4 | --> | /N.F | <-- | K |

	 *         +----+     +-------+         +----+     +------+     +---+

	 *                      |

	 *                      |

	 *                      v

	 *                    +-------+  Fout

	 *                    | /Rout | ------>

	 *                    +-------+

 Calculate PLL integer and fractional control word. */

 Find out greatest common divisor and divide to smaller. */

 Force divide to reg max. Resolution will be reduced. */

 Calculate real RF set. */

 Register controls */

 control init failed, free handler */

	/*

	 * Registered by v4l2_spi_new_subdev() from master driver, but we must

	 * unregister it from here. Weird.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Maxim MAX2165 silicon tuner

 *

 *  Copyright (c) 2009 David T. L. Wong <davidtlwong@gmail.com>

MHz*/)

 Set PLL divider according to RF frequency */

 20-bit fraction */

 Norch Filter */

 Tracking filter balun */

 Setup initial values */

 Fractional Mode on */

 LNA on */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Infineon TUA9001 silicon tuner driver

 *

 * Copyright (C) 2009 Antti Palosaari <crope@iki.fi>

 Zero-IF */

 SPDX-License-Identifier: GPL-2.0

 For Philips TEA5761 FM Chip

 I2C address is always 0x20 (0x10 at 7-bit mode).



 Copyright (c) 2005-2007 Mauro Carvalho Chehab <mchehab@kernel.org>

****************************************************************************/

/***************************

 * TEA5761HN I2C registers *

 INTREG - Read: bytes 0 and 1 / Write: byte 0 */

 first byte for reading */

 second byte for reading / byte for writing */

 FRQSET - Read: bytes 2 and 3 / Write: byte 1 and 2 */

 First byte */

 1=Station search from botton to up */

 1=Search mode */

 Bits 0-5 for divider MSB */

 Second byte */

 Bits 0-7 for divider LSB */

 TNCTRL - Read: bytes 4 and 5 / Write: Bytes 3 and 4 */

 first byte */

 Power UP/Power Down MSB */

 1= Japan Frequencies, 0= European frequencies */

 1= software port is FRRFLAG */

 1= IF count time 15.02 ms, 0= IF count time 2.02 ms */

 1= Soft mute */

 second byte */

 1=Hard mute */

 1 = mono */

 1 = deemphasis 50 us, 0 = deemphasis 75 us */

 FRQCHECK - Read: bytes 6 and 7  */

 First byte */

 Bits 0-5 for divider MSB */

 Second byte */

 Bits 0-7 for divider LSB */

 TUNCHECK - Read: bytes 8 and 9  */

 First byte */

 IF count */

 Second byte */

 Level Count */

 TESTREG - Read: bytes 10 and 11 / Write: bytes 5 and 6 */

 All zero = no test mode */

 MANID - Read: bytes 12 and 13 */

 First byte - should be 0x10 */

 Version = 1 */

 Manufacurer ID - should be 0 */

 Second byte - Should be 0x2b */

 Manufacturer ID - should be 0x15 */

 1 = Chip has ID, 0 = Chip has no ID */

 Chip ID - Read: bytes 14 and 15 */

 First byte - should be 0x57 */

 Second byte - should be 0x61 */

****************************************************************************/

 for TEA5767, it is 700 to give the right freq */

 Freq in KHz */

 Freq should be specifyed at 62.5 Hz */

 Philips TEA5761HN FM Radio

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Fitipower FC0013 tuner driver

 *

 * Copyright (C) 2012 Hans-Frieder Vogt <hfvogt@gmx.net>

 * partially based on driver code from Fitipower

 * Copyright (C) 2010 Fitipower Integrated Technology Inc

 reg. 0x00: dummy */

 reg. 0x01 */

 reg. 0x02 */

 reg. 0x03 */

 reg. 0x04 */

 reg. 0x05 */

 reg. 0x06 */

 reg. 0x07: CHECK */

		0xff,	/* reg. 0x08: AGC Clock divide by 256, AGC gain 1/256,

 reg. 0x09: enable LoopThrough */

 reg. 0x0a: Disable LO Test Buffer */

 reg. 0x0b: CHECK */

 reg. 0x0c: depending on AGC Up-Down mode, may need 0xf8 */

 reg. 0x0d: AGC Not Forcing & LNA Forcing, may need 0x02 */

 reg. 0x0e */

 reg. 0x0f */

 reg. 0x10 */

 reg. 0x11 */

 reg. 0x12 */

 reg. 0x13 */

		0x50,	/* reg. 0x14: DVB-t High Gain, UHF.

 reg. 0x15 */

 open I2C-gate */

 close I2C-gate */

 nothing to do here */

 open I2C-gate */

 push rc_cal value, get rc_cal value */

 get rc_cal value */

 forcing rc_cal */

 modify rc_cal value */

 close I2C-gate */

 open I2C-gate */

 close I2C-gate */

 VHF Track: 7 */

 VHF Track: 6 */

 VHF Track: 5 */

 VHF Track: 4 */

 VHF Track: 3 */

 VHF Track: 2 */

 VHF Track: 1 */

 UHF and GPS */

 open I2C-gate */

 set VHF track */

 enable VHF filter */

 disable UHF & disable GPS */

 disable VHF filter */

 enable UHF & disable GPS */

 disable VHF filter */

 disable UHF & enable GPS */

 select frequency divider and the frequency of VCO */

 freq * 96 < 3560000 */

 freq * 64 < 3560000 */

 freq * 48 < 3560000 */

 freq * 32 < 3560000 */

 freq * 24 < 3560000 */

 freq * 16 < 3560000 */

 freq * 12 < 3560000 */

 freq * 8 < 3560000 */

 freq * 6 < 3560000 */

 freq * 4 < 3800000 */

 From divided value (XDIV) determined the FA and FP value */

 fix for frequency less than 45 MHz */

 fix clock out */

	/* From VCO frequency determines the XIN ( fractional part of Delta

 bits 6 and 7 describe the bandwidth */

 modified for Realtek demod */

 VCO Calibration */

 VCO Re-Calibration if needed */

 vco selection */

 close I2C-gate */

 always ? */

 low gain */

 middle gain */

 high gain */

 open I2C-gate */

 close I2C-gate */

 100% */

 close I2C-gate */

 estimate */

 CHECK */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Microtune MT2060 "Single chip dual conversion broadband tuner"

 *

 *  Copyright (c) 2006 Olivier DANET <odanet@caramail.com>

 In that file, frequencies are expressed in kiloHertz to avoid 32 bits overflows */

 Reads a single register

 Writes a single register

 Writes a set of consecutive registers

 Initialisation sequences

 LNABAND=3, NUM1=0x3C, DIV1=0x74, NUM2=0x1080, DIV2=0x49

 FMCG=2, GP2=0, GP1=0

  VGAG=3, V1CSE=1

/* The function below calculates the frequency offset between the output frequency if2

 kHz

 Calculates the frequency offset to add to avoid spurs. Returns 0 if no offset is needed */

 Potential spurs detected */

 IF2 frequency = 36.150 MHz

 Quartz oscillator 16 MHz

 open i2c_gate */

 Hz -> kHz */

 From the Comtech datasheet, the step used is 50kHz. The tuner chip could be more precise

 LO-related spurs detection and correction

Frequency LO1 = 16MHz * (DIV1 + NUM1/64 )

 Frequency LO2 = 16MHz * (DIV2 + NUM2/8192 )

Waits for pll lock or timeout

 close i2c_gate */

 initialize the clock output */

 FM1SS;

 FM1CA;

 FM1CA;

 FM1SS

 now find out, what is fmreq used for :)

 open i2c_gate */

 close i2c_gate */

 open i2c_gate */

 close i2c_gate */

 This functions tries to identify a MT2060 tuner by reading the PART/REV register. This is hasty. */

 open i2c_gate */

 close i2c_gate */

 Power on, calibrate, sleep */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



   i2c tv tuner chip device driver

   controls the philips tda8290+75 tuner chip combo.





   This "tda8290" module was split apart from the original "tuner" module.

 ---------------------------------------------------------------------- */

---------------------------------------------------------------------*/

 let the bridge stabilize */

 let the bridge stabilize */

---------------------------------------------------------------------*/

 Set TDA8295 to FM radio; Start TDA8290 with MN values */

 Put device into expert mode */

 Disable NOTCH and VIDEO filters */

 Disable color carrier filter (SSIF) */

 ADC headroom */

 group delay flat */

 use the same radio DTO values as a tda8295 */

 PLL off, no video carrier detect */

 disable auto mute if no video */

 FIXME: allow using a different deemphasis */

 adjust headroom resp. gain */

 l/ l' deadlock? */

---------------------------------------------------------------------*/

 clb_stdbt */

 rising edge sets regs 0x02 - 0x23 */

 reset active bit */

---------------------------------------------------------------------*/

 DIV_FUNC */

 clear GPIO_0 bits 3-0 */

 config GPIO_0 as Open Drain Out */

 set GPIO_0 pin low */

---------------------------------------------------------------------*/

---------------------------------------------------------------------*/

---------------------------------------------------------------------*/

 Put AGC in tri-state */

---------------------------------------------------------------------*/

	/* only try to release the tuner if we've

 probe for tuner chip */

	/* if there is more than one tuner, we expect the right one is

	   behind the bridge and we choose the highest address that doesn't

	   give a response now

 detect tda8290 */

 detect tda8295 */

 rule out tda9887, which would return the same byte repeatedly */

 all bytes are equal, not a tda829x - probably a tda9887 */

 fall back to old probing method */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NXP TDA18218HN silicon tuner driver

 *

 * Copyright (C) 2010 Antti Palosaari <crope@iki.fi>

 Max transfer size done by I2C transfer functions */

 write multiple registers */

 read multiple registers */

 we must start read always from reg 0x00 */

 write single register */

 read single register */

 TODO: find out correct AGC algorithm */

 open I2C-gate */

 low-pass filter cut-off frequency */

 band-pass filter */

 BP_Filter */

 LP_Fc */

 LO_Frac_0 */

 LO_Frac_1 */

 LO_Frac_2 */

 Freq_prog_Start */

 Freq_prog_Start */

 trigger AGC */

 close I2C-gate */

 open I2C-gate */

 standby */

 close I2C-gate */

 TODO: calibrations */

 open I2C-gate */

 close I2C-gate */

 chip default registers values */

 open I2C-gate */

 check if the tuner is there */

 loop-through enabled chip default register values */

 standby */

 close I2C-gate */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Fitipower FC0012 tuner driver

 *

 * Copyright (C) 2012 Hans-Frieder Vogt <hfvogt@gmx.net>

 dummy reg. 0 */

 reg. 0x01 */

 reg. 0x02 */

 reg. 0x03 */

 reg. 0x04 */

 reg. 0x05: may also be 0x0a */

 reg. 0x06: divider 2, VCO slow */

 reg. 0x07: may also be 0x0f */

		0xff,	/* reg. 0x08: AGC Clock divide by 256, AGC gain 1/256,

 reg. 0x09: Disable LoopThrough, Enable LoopThrough: 0x6f */

 reg. 0x0a: Disable LO Test Buffer */

		0x82,	/* reg. 0x0b: Output Clock is same as clock frequency,

 reg. 0x0c: depending on AGC Up-Down mode, may need 0xf8 */

 reg. 0x0d: AGC Not Forcing & LNA Forcing, 0x02 for DVB-T */

 reg. 0x0e */

 reg. 0x0f */

 reg. 0x10: may also be 0x0d */

 reg. 0x11 */

 reg. 0x12: Set to maximum gain */

		0x08,	/* reg. 0x13: Set to Middle Gain: 0x08,

 reg. 0x14 */

 reg. 0x15: Enable LNA COMPS */

 open I2C-gate */

 close I2C-gate */

 select frequency divider and the frequency of VCO */

 freq * 96 < 3560000 */

 freq * 64 < 3560000 */

 freq * 48 < 3560000 */

 freq * 32 < 3560000 */

 freq * 24 < 3560000 */

 freq * 16 < 3560000 */

 freq * 12 < 3560000 */

 freq * 8 < 3560000 */

 freq * 6 < 3560000 */

 From divided value (XDIV) determined the FA and FP value */

 fix for frequency less than 45 MHz */

 fix clock out */

	/* From VCO frequency determines the XIN ( fractional part of Delta

 xin with 9 bit resolution */

 bits 6 and 7 describe the bandwidth */

 modified for Realtek demod */

 open I2C-gate */

 VCO Calibration */

 VCO Re-Calibration if needed */

 vco selection */

 close I2C-gate */

 Zero-IF */

 low gain */

 middle gain */

 high gain */

 open I2C-gate */

 close I2C-gate */

 100% */

 close I2C-gate */

 estimate */

 estimate */

 check if the tuner is there */

	/*

	 * TODO: Clock out en or div?

	 * For dual tuner configuration clearing bit [0] is required.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Xceive XC5000 "QAM/8VSB single chip tuner"

 *

 *  Copyright (c) 2007 Xceive Corporation

 *  Copyright (c) 2007 Steven Toth <stoth@linuxtv.org>

 *  Copyright (c) 2009 Devin Heitmueller <dheitmueller@kernellabs.com>

 Misc Defines */

 Time to suspend after the .sleep callback is called */

 ms */

 Signal Types */

 Product id */

 Registers */

 Obsolete */

 Set the output amplitude - SIF for analog, DTVP/DTVN for digital */

 0=Air, 1=Cable */

/*

   Basic firmware description. This will remain with

   the driver for documentation purposes.



   This represents an I2C firmware file encoded as a

   string of unsigned char. Format is as follows:



   char[0  ]=len0_MSB  -> len = len_MSB * 256 + len_LSB

   char[1  ]=len0_LSB  -> length of first write transaction

   char[2  ]=data0 -> first byte to be sent

   char[3  ]=data1

   char[4  ]=data2

   char[   ]=...

   char[M  ]=dataN  -> last byte to be sent

   char[M+1]=len1_MSB  -> len = len_MSB * 256 + len_LSB

   char[M+2]=len1_LSB  -> length of second write transaction

   char[M+3]=data0

   char[M+4]=data1

   ...

   etc.



   The [len] value should be interpreted as follows:



   len= len_MSB _ len_LSB

   len=1111_1111_1111_1111   : End of I2C_SEQUENCE

   len=0000_0000_0000_0000   : Reset command: Do hardware reset

   len=0NNN_NNNN_NNNN_NNNN   : Normal transaction: number of bytes = {1:32767)

   len=1WWW_WWWW_WWWW_WWWW   : Wait command: wait for {1:32767} ms



   For the RESET and WAIT commands, the two following bytes will contain

   immediately the length of the following transaction.



 Tuner standards */

/* This routine is never used because the only time we read data from the

   i2c bus is when we read registers, and we want that to be an atomic i2c

 wait for busy flag to clear */

 busy flag cleared */

 wait 5 ms */

 RESET command */

 WAIT command */

			/* Send i2c data whilst ensuring individual transactions

			 * do not exceed XC_MAX_I2C_WRITE_LENGTH bytes.

	/* Starting in firmware version 1.1.44, Xceive recommends using the

	   FINERFREQ for all normal tuning (the doc indicates reg 0x03 should

 32.000 MHz xtal is default */

 32.000 MHz xtal is default */

 31.875 MHz xtal configuration */

 request the firmware, this will block and timeout */

	/* Wait for stats to stabilize.

	 * Frame Lines needs two frame times after initial lock

	 * before it is valid.

 All ISDB-T are currently for 6 MHz bw */

 fall to OFDM handling */

 Fix me: it could be air. */

 params->frequency is in units of 62.5khz */

	/* FIX ME: Some video standards may have several possible audio

		   standards. We simply default to one of them here.

 default to BTSC audio standard */

 default to NICAM audio standard */

 default to NICAM audio standard */

 default to NICAM audio standard */

 default to A2 DK1 audio standard */

 PLL is unlocked, force reload of the firmware */

 Try up to 5 times to load firmware */

 Start the tuner self-calibration process */

		/* Wait for calibration to complete.

		 * We could continue but XC5000 will clock stretch subsequent

		 * I2C transactions until calibration is complete.  This way we

		 * don't have to rely on clock stretching working.

 PLL is unlocked, force reload of the firmware */

 Default to "CABLE" mode */

	/* According to Xceive technical support, the "powerdown" register

	   was removed in newer versions of the firmware.  The "supported"

 Avoid firmware reload on slow devices */

	/* suspended before firmware is loaded.

 new tuner instance */

 existing tuner instance */

		/* If the IF hasn't been set yet, use the value provided by

		   the caller (occurs in hybrid devices where the analog

	/* don't override chip id if it's already been set

		/* use default chip id if none specified, set to 0 so

	/* don't override output_amp if it's already been set

 use default output_amp value if none specified */

	/* Check if firmware has been loaded. It is possible that another

	   instance of the driver has loaded the firmware.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NXP TDA18250 silicon tuner driver

 *

 * Copyright (C) 2017 Olli Salonen <olli.salonen@iki.fi>

 check for the IRQ

 default values for various regs */

 crystal related regs depend on frequency */

 reg:   4d    4e    4f    50    51 */

 set initial register values */

 set xtal related regs */

 clear IRQ */

 start HW init */

 tuner calibration */

 power up LNA */

 AGC1 */

 DVB-C/QAM */

 7.935 and 8 MHz */

 AGC2 */

 DVB-C/QAM */

 7.935 and 8 MHz */

 DVB-C/QAM */

 AGC3 */

 DVB-C/QAM */

 S2D */

 DVB-C/QAM */

 7.935 and 8 MHz */

 DVB-C/QAM */

 DVB-C/QAM */

 set delivery system dependent registers */

 set IF if needed */

 set frequency */

 initial tune */

 calc ndiv and rdiv */

 clear IRQ */

 tune again */

 tune */

 go */

 pll locking */

 restore AGCK */

 charge pump */

 power down LNA */

 set if freq to 0 in order to make sure it's set after wake up */

 some registers are always read from HW */

 read the three chip ID registers */

 put the tuner in standby */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Quantek QT1010 silicon tuner

 *

 *  Copyright (C) 2006 Antti Palosaari <crope@iki.fi>

 *                     Aapo Tahkola <aet@rasterburn.org>

 read single register */

 write single register */

 02 c write */

 04 c write */

 06 c write */

 07 c write */

 08 c write */

 10 c write */

 13 c write */

 14 c write */

 15 c write */

 16 c read */

 20 c read */

 21 c read */

 25 c read */

 26 c read */

 31 c read */

 35 c write */

 40 c write */

 41 c write */

 43 c write */

 45 c write */

 32 MHz */

 4 MHz Quartz oscillator in the stick? */

 open i2c_gate */

 reg 05 base value */

 290 MHz */

 610 MHz */

 802 MHz */

 0x5 */

 07 - set frequency: 32 MHz scale */

 09 - changes every 8/24 MHz */

 0a - set frequency: 4 MHz scale (max 28 MHz) */

  +0 MHz */

  +4 MHz */

  +8 MHz */

 +12 MHz */

 +16 MHz */

 +20 MHz */

 +24 MHz */

 +28 MHz */

 0b - changes every 2/2 MHz */

 1a - set frequency: 125 kHz scale (max 3875 kHz)*/

 byte, overflows intentionally */

 11 */

 TODO: correct value calculation */

 12 */

 TODO: correct value calculation */

 22 */

 450 MHz */

 482 MHz */

 514 MHz */

 546 MHz */

 610 MHz */

 05 */

 1f */

 20 */

 25 */

 00 */

 TODO: correct value calculation */

 read is required to proper locking */

 close i2c_gate */

 get reg 25 init value */

 get reg 25 init value */

 get reg 1f init value */

 get reg 1f init value */

 get reg 20 init value */

 open i2c_gate */

 0x31 - 0x39 */

 Sigmatek DVB-110 545000000 */

 MSI Megasky 580 GL861 533000000 */

 TODO: implement sleep */

 open i2c_gate */

 Try to detect tuner chip. Probably this is not correct register. */

 close i2c_gate */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Silicon Labs Si2146/2147/2148/2157/2158 silicon tuner driver

 *

 * Copyright (C) 2014 Antti Palosaari <crope@iki.fi>

 execute firmware command */

 write cmd and args for firmware */

 wait cmd execution terminate */

 firmware ready? */

 check error status bit */

 Try to get Xtal trim property, to verify tuner still running */

 we no longer know current tuner state */

 power up */

 Si2141 needs a second command before it answers the revision query */

 query chip revision */

 request the firmware, this will block and timeout */

 firmware should be n chunks of 17 bytes */

 reboot the tuner with new firmware? */

 query firmware version */

 enable tuner status flags */

 init statistics in order signal app which are supported */

 start statistics polling */

 stop statistics polling */

 standby */

 wait tuner command complete */

 tuner done? */

 if we tuned ok, wait a bit for tuner lock */

 tuner locked? */

 it seems DVB-T and DVB-T2 both are 0x20 here */

 set digital if frequency if needed */

 set digital frequency */

 wait to complete, ignore any errors */

 for debugging */

 0=NTSC/PAL, 0x10=SECAM */

 analog tuner spectrum; 0=normal, 1=inverted */

	/*

	 * std = "fm";

	 * bandwidth = 1700000; //best can do for FM, AGC will be a mess though

	 * if_frequency = 1250000;  //HVR-225x(saa7164), HVR-12xx(cx23885)

	 * if_frequency = 6600000;  //HVR-9xx(cx231xx)

	 * if_frequency = 5500000;  //HVR-19xx(pvrusb2)

 convert to HZ */

 is freq in KHz */

 if_frequency values based on tda187271C2 */

 TODO: does not work yet */

 TODO: does not work yet */

 TODO: untested */

 TODO: untested */

 calc channel center freq */

 set analog IF port */

 in using dev->if_port, we assume analog and digital IF's */

   are always on different ports */

 assumes if_port definition is 0 or 1 for digital out */

 Analog AGC assumed external */

 set analog IF output config */

 make this distinct from a digital IF */

 calc and set tuner analog if center frequency */

 set analog AGC config */

 set analog video mode */

 can use dev->inversion if assumed applies to both digital/analog */

 set analog frequency */

 wait to complete, ignore any errors */

 strip analog IF indicator bit */

	/* normalize values based on Silicon Labs reference

	 * add 100, then anything > 80 is 100% signal

 default value of property 0x0706 */

 check if the tuner is there */

 stop statistics polling */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    tda18271-fe.c - driver for the Philips / NXP TDA18271 silicon tuner



    Copyright (C) 2007, 2008 Michael Krufky <mkrufky@linuxtv.org>



---------------------------------------------------------------------*/

---------------------------------------------------------------------*/

 IF notch = 0 */

 IF notch = 1 */

 update TV broadcast parameters */

 set standard */

 clear std bits */

 set rfagc to high speed mode */

 set cal mode to normal */

 update IF output level */

 clear if level bits */

 update FM_RFn */

 update rf top / if top */

 --------------------------------------------------------------- */

 disable Power Level Indicator */

 make sure thermometer is off */

 frequency dependent parameters */

 --------------------------------------------------------------- */

 dual tuner and agc1 extra configuration */

 main vco */

 cal vco */

 agc1 always active */

 agc1 has priority on agc2 */

 --------------------------------------------------------------- */

 force charge pump source */

 return pll to normal operation */

 set rfagc to normal speed mode */

 switch thermometer on */

 read thermometer info */

 temperature sensing */

 read thermometer info */

 switch thermometer off */

 set CAL mode to normal */

 ------------------------------------------------------------------ */

 power up */

 read die current temperature */

 frequency dependent parameters */

 calculate temperature compensation */

 power up detector 1 */

 turn agc1 loop on */

 set agc1_gain to  6 dB */

 set agc2_gain to -6 dB */

 POR mode */

 disable 1.5 MHz low pass filter */

 forcelp_fc2_en = 0 */

 XXX: lp_fc[2] = 0 */

 set CAL mode to normal */

 switch off agc1 */

 sm_lt = 1 */

 set agc1_gain to 15 dB */

 frequency dependent parameters */

 main pll charge pump source */

 cal pll charge pump source */

 force dcdc converter to 0 V */

 disable plls lock */

 set CAL mode to RF tracking filter calibration */

 --------------------------------------------------------------- */

 set the internal calibration signal */

 downconvert internal calibration */

 --------------------------------------------------------------- */

 normal operation for the main pll */

 normal operation for the cal pll  */

 plls locking */

 launch the rf tracking filters calibration */

 calibration */

 --------------------------------------------------------------- */

 set CAL mode to normal */

 switch on agc1 */

 sm_lt = 0 */

 set agc1_gain to  6 dB */

 synchronization */

 get calibration result */

 downconvert frequency */

 pll locking */

 detection mode */

 launch power detection measurement */

 read power detection info, stored in EB10 */

 algorithm initialization */

 downconvert updated freq to 1 MHz */

 pll locking */

 pll locking */

 launch power detection measurement */

 read power detection info, stored in EB10 */

 set standard to digital */

 clear std bits */

 set cal mode to normal */

 update IF output level */

 clear if level bits */

 set agc1_gain to   6 dB */

 set agc2_gain to -15 dB */

 1.5 MHz low pass filter */

 forcelp_fc2_en = 1 */

 lp_fc[2] = 1 */

 look for optimized calibration frequency */

 wait for die temperature stabilization */

 rf band calibration */

 ------------------------------------------------------------------ */

 test RF_CAL_OK to see if we need init */

 calculate bp filter */

 set cal mode to RF tracking filter calibration */

 calculate cal pll */

 calculate main pll */

 RF tracking filter calibration initialization */

 search for K,M,CO for RF calibration */

 search for rf band */

 search for gain taper */

 pll locking */

 RF tracking filter calibration completion */

 set cal mode to normal */

 RF tracking filter correction for VHF_Low band */

 ------------------------------------------------------------------ */

 test IR_CAL_OK to see if we need init */

 full power up */

 initialization */

 enter standby mode, with required output features enabled */

 ------------------------------------------------------------------ */

 no external agc configuration required */

 switch with GPIO of saa713x */

 n/a - currently not supported */

 ------------------------------------------------------------------ */

 When tuning digital, the analog demod must be tri-stated */

 ------------------------------------------------------------------ */

 tda18271_cal_on_startup == -1 when cal module option is unset */

 honor configuration setting */

 module option overrides configuration setting */

 override default std map with values in config struct */

 new tuner instance */

		/* if delay_cal is set, delay IR & RF calibration until init()

 enter standby mode, with required output features enabled */

 existing tuner instance */

 allow dvb driver to override configuration settings */

 override default std map with values in config struct */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ITE IT913X silicon tuner driver

 *

 *  Copyright (C) 2011 Malcolm Priestley (tvboxspy@gmail.com)

 *  IT9137 Copyright (C) ITE Tech Inc.

 12.000 MHz */

 20.480 MHz */

	/*

	 * Chip version BX never sets that flag so we just wait 50ms in that

	 * case. It is possible poll BX similarly than AX and then timeout in

	 * order to get 50ms delay, but that causes about 120 extra I2C

	 * messages. As for now, we just wait and reduce IO.

	/*

	 * Writing '0x00' to master tuner register '0x80ec08' causes slave tuner

	 * communication lost. Due to that, we cannot put master full sleep.

 Frequency OMEGA_IQIK_M_CAL_MID*/

 XXX: latest windows driver does not set that at all */

 8000000 */

 XXX: latest windows driver sets different value (a8 != 68) */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 * (c) 2005 Hartmut Hackmann

 * (c) 2007 Michael Krufky

 if frequency is 5.5 MHz */

 ------------------------------------------------------------------ */

 8 MHz */

 correct CP value */

 ------------------------------------------------------------------ */

 Vsync en */

 ------------------------------------------------------------------ */

 no LNA */

 switch is GPIO 0 of tda8290 */

 turn Vsync on */

 switch with GPIO of saa713x */

 8 MHz */

 subaddress

 lpsel, for 6MHz + 2

 lpsel, for 6MHz + 2

 correct CP value */

 lpsel, for 6MHz + 2

 freeze AGC1 */

 ------------------------------------------------------------------ */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    tda18271-common.c - driver for the Philips / NXP TDA18271 silicon tuner



    Copyright (C) 2007, 2008 Michael Krufky <mkrufky@linuxtv.org>



---------------------------------------------------------------------*/

 only dump extended regs if DBG_ADV is set */

	/* W indicates write-only registers.

 read all registers */

 read all registers */

 don't update write-only registers */

	/*

	 * If lock_i2c is true, it will take the I2C bus for tda18271 private

	 * usage during the entire write ops, as otherwise, bad things could

	 * happen.

	 * During device init, several write operations will happen. So,

	 * tda18271_init_regs controls the I2C lock directly,

	 * disabling lock_i2c here.

 write registers */

---------------------------------------------------------------------*/

	/*

	 * Don't let any other I2C transfer to happen at adapter during init,

	 * as those could cause bad things

 initialize registers */

 setup agc1 gain */

 setup agc2 gain */

 image rejection calibration */

 low-band */

 main pll cp source on */

 main pll cp source off */

 pll locking */

 launch detector */

 wanted low measurement */

 pll locking */

 launch optimization algorithm */

 image low optimization completion */

 mid-band */

 pll locking */

 launch detector */

 wanted mid measurement */

 pll locking */

 launch optimization algorithm */

 image mid optimization completion */

 high-band */

 pll locking */

 launch detector */

 wanted high measurement */

 pll locking */

 launch optimization algorithm */

 image high optimization completion */

 return to normal mode */

 synchronize */

---------------------------------------------------------------------*/

/*

 *  Standby modes, EP3 [7:5]

 *

 *  | SM  || SM_LT || SM_XT || mode description

 *  |=====\\=======\\=======\\====================================

 *  |  0  ||   0   ||   0   || normal mode

 *  |-----||-------||-------||------------------------------------

 *  |     ||       ||       || standby mode w/ slave tuner output

 *  |  1  ||   0   ||   0   || & loop through & xtal oscillator on

 *  |-----||-------||-------||------------------------------------

 *  |  1  ||   1   ||   0   || standby mode w/ xtal oscillator on

 *  |-----||-------||-------||------------------------------------

 *  |  1  ||   1   ||   1   || power off

 *

 clear sm, sm_lt, sm_xt */

---------------------------------------------------------------------*/

 sets main post divider & divider bytes, but does not write them */

 sets cal post divider & divider bytes, but does not write them */

---------------------------------------------------------------------*/

 sets bp filter bits, but does not write them */

 clear bp filter bits */

 sets K & M bits, but does not write them */

 clear k & m bits */

 sets rf band bits, but does not write them */

 clear rf band bits */

 sets gain taper bits, but does not write them */

 clear gain taper bits */

 sets IR Meas bits, but does not write them */

 sets rf cal byte (RFC_Cprog), but does not write it */

	/* The TDA18271HD/C1 rf_cal map lookup is expected to go out of range

	 * for frequencies above 61.1 MHz.  In these cases, the internal RF

	 * tracking filters calibration mechanism is used.

	 *

	 * There is no need to warn the user about this.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Microtune MT2131 "QAM/8VSB single chip tuner"

 *

 *  Copyright (c) 2006 Steven Toth <stoth@linuxtv.org>

 Hz -> kHz */

 Frequency LO1 = 16MHz * (DIV1 + NUM1/8192 ) */

 Frequency LO2 = 16MHz * (DIV2 + NUM2/8192 ) */

 Wait for lock */

 SPDX-License-Identifier: GPL-2.0-or-later

 /*

    tea6415c - i2c-driver for the tea6415c by SGS Thomson



    Copyright (C) 1998-2003 Michael Hunold <michael@mihu.de>

    Copyright (C) 2008 Hans Verkuil <hverkuil@xs4all.nl>



    The tea6415c is a bus controlled video-matrix-switch

    with 8 inputs and 6 outputs.

    It is cascadable, i.e. it can be found at the addresses

    0x86 and 0x06 on the i2c-bus.



    For detailed information download the specifications directly

    from SGS Thomson at http://www.st.com



 makes a connection between the input-pin 'i' and the output-pin 'o' */

 check if the pins are valid */

 to understand this, have a look at the tea6415c-specs (p.5) */

 ----------------------------------------------------------------------- */

 let's see whether this adapter can support what we need */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Analog Devices AD9389B/AD9889B video encoder driver

 *

 * Copyright 2012 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

/*

 * References (c = chapter, p = page):

 * REF_01 - Analog Devices, Programming Guide, AD9889B/AD9389B,

 * HDMI Transitter, Rev. A, October 2010

/*

**********************************************************************

*

*  Arrays with configuration parameters for the AD9389B

*

**********************************************************************

 total number of blocks */

 Number of segments read */

 Number of EDID read retries left */

 Is the ad9389b powered on? */

 Did we receive hotplug and rx-sense signals? */

 timings from s_dv_timings */

 controls */

 Running counter of the number of detected EDIDs (for debugging) */

 work entry */

 ------------------------ I2C ----------------------------------------------- */

/* To set specific bits in the register, a clear-mask is given (to be AND-ed),

 A */

 B */

 C */

 enable CSC */

 AVI infoframe: Limited range RGB (16-235) */

 disable CSC */

 AVI infoframe: Full range RGB (0-255) */

 CE format, not IT  */

 IT format */

 automatic */

 CE format, RGB limited range (16-235) */

 not CE format, RGB full range (0-255) */

 RGB limited range (16-235) */

 RGB full range (0-255) */

	/* Workaround for TMDS PLL problem

	 * The TMDS PLL in AD9389b change gear when the chip is heated above a

	 * certain temperature. The output is disabled when the PLL change gear

	 * so the monitor has to lock on the signal again. A workaround for

	 * this is to use the manual PLL gears. This is a solution from Analog

	 * Devices that is not documented in the datasheets.

	 * 0x98 [7] = enable manual gearing. 0x98 [6:4] = gear

	 *

	 * The pixel frequency ranges are based on readout of the gear the

	 * automatic gearing selects for different pixel clocks

	 * (read from 0x9e [3:1]).

 4th gear */

 3rd gear */

 2nd gear */

 1st gear */

 0th gear */

 ------------------------------ CTRL OPS ------------------------------ */

 Set HDMI or DVI-D */

 ---------------------------- CORE OPS ------------------------------------------- */

 HDMI only */

 Power up/down ad9389b */

 Power down */

 Power up */

	/* The ad9389b does not always come up immediately.

 Select chip: AD9389B */

 Reserved registers that must be set according to REF_01 p. 11*/

 Differential output drive strength */

 Set number of attempts to read the EDID */

 Enable interrupts */

	/* The datasheet says that the EDID ready interrupt should be

	/*

	 * This i2c write can fail (approx. 1 in 1000 writes). But it

	 * is essential that this register is correct, so retry it

	 * multiple times.

	 *

	 * Note that the i2c write does not report an error, but the readback

	 * clearly shows the wrong value.

 Interrupt handler */

 disable interrupts to prevent a race condition */

 clear detected interrupts */

 enable interrupts */

 ------------------------------ VIDEO OPS ------------------------------ */

 Enable/disable ad9389b output */

 keep this initialization for compatibility with GCC < 4.4.6 */

 quick sanity check */

	/* Fill the optional fields .standards and .flags in struct v4l2_dv_timings

 save timings */

 update quantization range based on new dv_timings */

 update PLL gear based on new dv_timings */

 update AVI infoframe */

 ------------------------------ PAD OPS ------------------------------ */

 ------------------------------ AUDIO OPS ------------------------------ */

 Set N (used with CTS to regenerate the audio clock) */

 Set sampling frequency for I2S audio to 48 kHz */

 TODO based on input/output/config */

 TODO See datasheet "Programmers guide" p. 39-40 */

 Only 2 channels in use for application */

 Speaker mapping */

 TODO Where should this be placed? */

 16 bit audio word length */

 --------------------- SUBDEV OPS --------------------------------------- */

 ----------------------------------------------------------------------- */

 Return if we received the EDID. */

		/* We must retry reading the EDID several times, it is possible

		 * that initially the EDID couldn't be read due to i2c errors

 We failed to read the EDID, so send an event for this. */

 Initial setup of AD9389b */

 Configure hdmi transmitter. */

 Input format: RGB 4:4:4 */

 Output format: RGB 4:4:4 */

	/* 1st order interpolation 4:2:2 -> 4:4:4 up conversion,

 Output format: RGB 4:4:4, Active Format Information is valid. */

 Underscanned */

 Setup video format */

 Active format aspect ratio: same as picure. */

 No encryption */

 Positive clk edge capture for input video clock */

 read hotplug and rx-sense state */

 update read only ctrls */

 update with setting from ctrls */

	/*

	 * Rapid toggling of the hotplug may leave the chip powered off,

	 * even if we think it is on. In that case reset and power up again.

 edid crc error, force reread of edid segment */

 one more segment read ok */

 Request next EDID segment */

 report when we have all segments but report only for segment 0 */

 ----------------------------------------------------------------------- */

 clear all interrupts */

 Check if the adapter supports the needed features */

 Platform data */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for AK8813 / AK8814 TV-ecoders from Asahi Kasei Microsystems Co., Ltd. (AKM)

 *

 * Copyright (C) 2010, Guennadi Liakhovetski <g.liakhovetski@gmx.de>

 DEVICE_REVISION content */

 No SECAM or PAL_N/Nc supported */

 For colour-bar testing set bit 6 of AK881X_VIDEO_PROCESS1 */

 Default: composite output */

 Turn on the DAC(s) */

 ...and clear bit 6 of AK881X_VIDEO_PROCESS1 here */

		/*

		 * "Line Blanking No." seems to be the same as the number of

		 * "black" lines on, e.g., SuperH VOU, whose default value of 20

		 * "incidentally" matches ak881x' default

 Hardware default: NTSC-M */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  bt819 - BT819A VideoStream Decoder (Rockwell Part)

 *

 * Copyright (C) 1999 Mike Bernson <mike@mlb.org>

 * Copyright (C) 1998 Dave Perks <dperks@ibm.net>

 *

 * Modifications for LML33/DC10plus unified driver

 * Copyright (C) 2000 Serguei Miridonov <mirsev@cicese.mx>

 *

 * Changes by Ronald Bultje <rbultje@ronald.bitfreak.net>

 *    - moved over to linux>=2.4.x i2c protocol (9/9/2002)

 *

 * This code was modify/ported from the saa7111 driver written

 * by Dave Perks.

 ----------------------------------------------------------------------- */

 for values, see the bt819 datasheet */

 ----------------------------------------------------------------------- */

	/* the bt819 has an autoincrement function, use it if

 do raw I2C, not smbus compatible */

 do some slow I2C emulation kind of thing */

0x1f, 0x00,*/     
 0x01 input format */

 0x02 temporal decimation */

 0x03 Cropping msb */

 0x04 Vertical Delay, lsb */

 0x05 Vertical Active lsb */

 0x06 Horizontal Delay lsb */

 0x07 Horizontal Active lsb */

 0x08 Horizontal Scaling msb */

 0x09 Horizontal Scaling lsb */

 0x0a Brightness control */

 0x0b Miscellaneous control */

 0x0c Luma Gain lsb */

 0x0d Chroma Gain (U) lsb */

 0x0e Chroma Gain (V) msb */

 0x0f Hue control */

 0x12 Output Format */

		0x13, 0x20,	/* 0x13 Vertical Scaling msb 0x00

					   chroma comb OFF, line drop scaling, interlace scaling

					   BUG? Why does turning the chroma comb on screw up color?

					   Bug in the bt819 stepping on my board?

 0x14 Vertical Scaling lsb */

		0x16, 0x07,	/* 0x16 Video Timing Polarity

					   ACTIVE=active low

					   FIELD: high=odd,

					   vreset=active high,

 0x18 AGC Delay */

 0x19 Burst Gate Delay */

 0x1a ADC Interface */

 0x15 in array is address 0x19 */

 Chroma burst delay */

 reset */

 init */

 ----------------------------------------------------------------------- */

 bt819_setbit(decoder, 0x1a,  5, 1); */

 bt819_setbit(decoder, 0x1a,  5, 0); */

 select mode */

		/* Ratio between U gain and V gain must stay the same as

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 Check if the adapter supports the needed features */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    bt866 - BT866 Digital Video Encoder (Rockwell Part)



    Copyright (C) 1999 Mike Bernson <mike@mlb.org>

    Copyright (C) 1998 Dave Perks <dperks@ibm.net>



    Modifications for LML33/DC10plus unified driver

    Copyright (C) 2000 Serguei Miridonov <mirsev@cicese.mx>



    This code was modify/ported from the saa7111 driver written

    by Dave Perks.



    This code was adapted for the bt866 by Christer Weinigel and ported

    to 2.6 by Martin Samuelsson.



 ----------------------------------------------------------------------- */

 Only PAL supported by this driver at the moment! */

 CRSCALE */

 CBSCALE */

 YC16 | OSDNUM */

  */

 SETMODE | PAL */

 EACTIVE */

 overlay colors */

 white */

 yellow */

 cyan */

 green */

 magenta */

 red */

 blue */

 black */

 white */

 yellow */

 cyan */

 green */

 magenta */

 red */

 blue */

 black */

 CBSWAP */

 !CBSWAP */

 OSDBAR */

 !OSDBAR */

/* Code to setup square pixels, might be of some use in the future,

 SQUARE */

 !SQUARE */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * saa717x - Philips SAA717xHL video decoder driver

 *

 * Based on the saa7115 driver

 *

 * Changes by Ohta Kyuma <alpha292@bremen.or.jp>

 *    - Apply to SAA717x,NEC uPD64031,uPD64083. (1/31/2004)

 *

 * Changes by T.Adachi (tadachi@tadachi-net.com)

 *    - support audio, video scaler etc, and checked the initialize sequence.

 *

 * Cleaned up by Hans Verkuil <hverkuil@xs4all.nl>

 *

 * Note: this is a reversed engineered driver based on captures from

 * the I2C bus under Windows. This chip is very similar to the saa7134,

 * though. Unfortunately, this driver is currently only working for NTSC.

/*

 * Generic i2c probe

 * concerning the addresses: i2c wants 7 bit (without the r/w bit), so '>>1'

 ----------------------------------------------------------------------- */

 for audio mode */

 LL */

 LR */

 LL */

 RR */

 ----------------------------------------------------------------------- */

 Long Registers have *only* three bytes! */

 Multibyte Registers contains *only* 3 bytes */

 ----------------------------------------------------------------------- */

 from linux driver */

 Increment delay */

 Analog input control 2 */

 Analog input control 3 */

 Analog input control 4 */

 Horizontal sync start */

 Horizontal sync stop */

 Luminance control */

 Chroma gain control */

 Chroma control 2 */

 analog/ADC */

 RAW data gain */

 RAW data offset */

 VBI horizontal input window start (L) TASK A */

 VBI horizontal input window start (H) TASK A */

 VBI horizontal input window stop (L) TASK A */

 VBI horizontal input window stop (H) TASK A */

 VBI vertical input window start (H) TASK A */

 VBI horizontal output length (L) TASK A */

 VBI horizontal output length (H) TASK A */

 Lumina brightness TASK A */

 Luminance contrast TASK A */

 Chroma saturation TASK A */

 067H: Reserved */

 VBI horizontal scaling increment (L) TASK A */

 VBI horizontal scaling increment (H) TASK A */

 VBI phase offset TASK A */

 Horizontal phase offset Luma TASK A */

 Horizontal phase offset Chroma TASK A */

 Vertical filter mode TASK A */

 VBI horizontal input window start (L) TAKS B */

 VBI horizontal input window start (H) TAKS B */

 VBI horizontal input window stop (L) TAKS B */

 VBI horizontal input window stop (H) TAKS B */

 VBI vertical input window start (H) TAKS B */

 VBI horizontal output length (L) TASK B */

 VBI horizontal output length (H) TASK B */

 Lumina brightness TASK B */

 Luminance contrast TASK B */

 Chroma saturation TASK B */

 0A7H reserved */

 VBI horizontal scaling increment (L) TASK B */

 VBI horizontal scaling increment (H) TASK B */

 VBI phase offset TASK B */

 Horizontal phase offset Luma TASK B */

Horizontal phase offset Chroma TASK B */

 Vertical filter mode TASK B */

 Start point GREEN path */

 Start point BLUE path */

 Start point RED path */

 GREEN path gamma curve --- */

 --- GREEN path gamma curve */

 BLUE path gamma curve --- */

 --- BLUE path gamma curve */

 RED path gamma curve --- */

 --- RED path gamma curve */

 Luminance control  */

*** from app start ****/

 AGC gain control */

 Program count */

 Status reset */

 Number of audio samples (L) */

 Number of audio samples (M) */

 Number of audio samples (H) */

 Audio select */

 Audio channel assign1 */

 Audio channel assign2 */

 Audio channel assign3 */

 Audio format */

 SIF control */

 ?? */

 ?? */

 ?? */

 Digital input crossbar1 */

 Digital output selection1-3 */

 Digital output selection4-6 */

 Sound feature control */

 Softmute control */

 Sound Easy programming(reset) */

 Sound Easy programming(reset) */

*** common setting( of DVD play, including scaler commands) ****/

 Data path configuration for VBI (TASK A) */

 Data path configuration for VBI (TASK B) */

 Sync control */

 ??? */

 select video input "mode 9" */

 Mode/delay control */

 Chroma control 1 */

 SIF, analog I/O select */

 Sound  */

 Tuner */

 Sync control */

 Mode/delay control */

 Chroma control 1 */

 Composite */

 Sync control */

 Mode/delay control */

 Chroma control 1 */

 S-Video */

 Sync control */

 Mode/delay control */

 Chroma control 1 */

	{ /* for MONO

		tadachi 6/29 DMA audio output select?

		Register 0x46c

		7-4: DMA2, 3-0: DMA1 ch. DMA4, DMA3 DMA2, DMA1

		0: MAIN left,  1: MAIN right

		2: AUX1 left,  3: AUX1 right

		4: AUX2 left,  5: AUX2 right

		6: DPL left,   7: DPL  right

		8: DPL center, 9: DPL surround

		/* tadachi 6/29 DAC and I2S output select?

		   Register 0x470

		   7-4:DAC right ch. 3-0:DAC left ch.

 for STEREO */

 for LANG1 */

 for LANG2/SAP */

 Get detected audio flags (from saa7134 driver) */

 (demdec status: 0x528) */

 read current status */

 regs write to set audio mode */

 write regs to set audio volume, bass and treble */

 -84 dB */

 set SIF analog I/O select */

 normalize ( 65535 to 0 -> 24 to -40 (not -84)) */

 set main volume */

 main volume L[7-0],R[7-0],0x00  24=24dB,-83dB, -84(mute) */

    def:0dB->6dB(MPG600GR) */

 if mute is on, set mute */

 set bass and treble */

********* scaling staff ***********/

 XPSC XACL XC2_1 XDCG VPFY */

 horizontal prescaling */

 accumulation length */

 level control */

FIR prefilter control */

********* scaling staff ***********/

 Vertical scaling ratio (LOW) */

 Vertical scaling ratio (HI) */

 tuner input flag */

 inputs from 0-9 are available*/

 saa717x have mode0-mode9 but mode5 is reserved. */

 select mode */

 bypass chrominance trap for modes 6..9 */

 change audio_mode */

 tuner */

			/* Force to STEREO mode if Composite or

 change initialize procedure (Composite/S-Video) */

 FIXME need better bounds checking here */

 scaling setting */

 NTSC and interlace only */

 interlace */

 Horizontal prescaling etc */

 Horizontal scaling increment */

 TASK A */

 TASK B */

 Vertical prescaling etc */

 set video output size */

 video number of pixels at output */

 TASK A */

 TASK B */

 video number of lines at output */

 TASK A */

 TASK B */

 FIXME! --tadachi */

 change audio mode */

 The registers are not changed here. */

 See DECODER_ENABLE_OUTPUT section. */

 mono */

 stereo */

 dual */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 i2c implementation */

 ----------------------------------------------------------------------- */

 Check if the adapter supports the needed features */

 add in ascending ID order */

 FIXME!! */

 initially capture mode used */

 DECODER_AUDIO_48_KHZ */

 FIXME!! */

 set volume, bass and treble */

 FIXME!! */

 ----------------------------------------------------------------------- */

/*

 * ths7303/53- THS7303/53 Video Amplifier driver

 *

 * Copyright (C) 2009 Texas Instruments Incorporated - http://www.ti.com/

 * Copyright 2013 Cisco Systems, Inc. and/or its affiliates.

 *

 * Author: Chaithrika U S <chaithrika@ti.com>

 *

 * Contributors:

 *     Hans Verkuil <hans.verkuil@cisco.com>

 *     Lad, Prabhakar <prabhakar.lad@ti.com>

 *     Martin Bugge <marbugge@cisco.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed .as is. WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 following function is used to set ths7303 */

1080p and SXGA/UXGA */

720p, 1080i and SVGA/XGA */

 EDTV 480p/576p and VGA */

 SDTV, S-Video, 480i/576i */

 disable all channels */

 disable all channels */

 for setting filter for HD output */

 set to default 480I_576I filter mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * OmniVision ov9282 Camera Sensor Driver

 *

 * Copyright (C) 2021 Intel Corporation

 Streaming Mode */

 Lines per frame */

 Chip ID */

 Exposure control */

 Analog gain control */

 Group hold register */

 Input clock rate */

 CSI2 HW configuration */

/**

 * struct ov9282_reg - ov9282 sensor register

 * @address: Register address

 * @val: Register value

/**

 * struct ov9282_reg_list - ov9282 sensor register list

 * @num_of_regs: Number of registers in the list

 * @regs: Pointer to register list

/**

 * struct ov9282_mode - ov9282 sensor mode structure

 * @width: Frame width

 * @height: Frame height

 * @code: Format code

 * @hblank: Horizontal blanking in lines

 * @vblank: Vertical blanking in lines

 * @vblank_min: Minimum vertical blanking in lines

 * @vblank_max: Maximum vertical blanking in lines

 * @pclk: Sensor pixel clock

 * @link_freq_idx: Link frequency index

 * @reg_list: Register list for sensor mode

/**

 * struct ov9282 - ov9282 sensor device structure

 * @dev: Pointer to generic device

 * @client: Pointer to i2c client

 * @sd: V4L2 sub-device

 * @pad: Media pad. Only one pad supported

 * @reset_gpio: Sensor reset gpio

 * @inclk: Sensor input clock

 * @ctrl_handler: V4L2 control handler

 * @link_freq_ctrl: Pointer to link frequency control

 * @pclk_ctrl: Pointer to pixel clock control

 * @hblank_ctrl: Pointer to horizontal blanking control

 * @vblank_ctrl: Pointer to vertical blanking control

 * @exp_ctrl: Pointer to exposure control

 * @again_ctrl: Pointer to analog gain control

 * @vblank: Vertical blanking in lines

 * @cur_mode: Pointer to current selected sensor mode

 * @mutex: Mutex for serializing sensor controls

 * @streaming: Flag indicating streaming state

 Sensor mode registers */

 Supported sensor mode configurations */

/**

 * to_ov9282() - ov9282 V4L2 sub-device to ov9282 device.

 * @subdev: pointer to ov9282 V4L2 sub-device

 *

 * Return: pointer to ov9282 device

/**

 * ov9282_read_reg() - Read registers.

 * @ov9282: pointer to ov9282 device

 * @reg: register address

 * @len: length of bytes to read. Max supported bytes is 4

 * @val: pointer to register value to be filled.

 *

 * Return: 0 if successful, error code otherwise.

 Write register address */

 Read data from register */

/**

 * ov9282_write_reg() - Write register

 * @ov9282: pointer to ov9282 device

 * @reg: register address

 * @len: length of bytes. Max supported bytes is 4

 * @val: register value

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_write_regs() - Write a list of registers

 * @ov9282: pointer to ov9282 device

 * @regs: list of registers to be written

 * @len: length of registers array

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_update_controls() - Update control ranges based on streaming mode

 * @ov9282: pointer to ov9282 device

 * @mode: pointer to ov9282_mode sensor mode

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_update_exp_gain() - Set updated exposure and gain

 * @ov9282: pointer to ov9282 device

 * @exposure: updated exposure value

 * @gain: updated analog gain value

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_set_ctrl() - Set subdevice control

 * @ctrl: pointer to v4l2_ctrl structure

 *

 * Supported controls:

 * - V4L2_CID_VBLANK

 * - cluster controls:

 *   - V4L2_CID_ANALOGUE_GAIN

 *   - V4L2_CID_EXPOSURE

 *

 * Return: 0 if successful, error code otherwise.

 Set controls only if sensor is in power on state */

 V4l2 subdevice control ops*/

/**

 * ov9282_enum_mbus_code() - Enumerate V4L2 sub-device mbus codes

 * @sd: pointer to ov9282 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @code: V4L2 sub-device code enumeration need to be filled

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_enum_frame_size() - Enumerate V4L2 sub-device frame sizes

 * @sd: pointer to ov9282 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @fsize: V4L2 sub-device size enumeration need to be filled

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_fill_pad_format() - Fill subdevice pad format

 *                            from selected sensor mode

 * @ov9282: pointer to ov9282 device

 * @mode: pointer to ov9282_mode sensor mode

 * @fmt: V4L2 sub-device format need to be filled

/**

 * ov9282_get_pad_format() - Get subdevice pad format

 * @sd: pointer to ov9282 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @fmt: V4L2 sub-device format need to be set

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_set_pad_format() - Set subdevice pad format

 * @sd: pointer to ov9282 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @fmt: V4L2 sub-device format need to be set

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_init_pad_cfg() - Initialize sub-device pad configuration

 * @sd: pointer to ov9282 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_start_streaming() - Start sensor stream

 * @ov9282: pointer to ov9282 device

 *

 * Return: 0 if successful, error code otherwise.

 Write sensor mode registers */

 Setup handler will write actual exposure and gain */

 Start streaming */

/**

 * ov9282_stop_streaming() - Stop sensor stream

 * @ov9282: pointer to ov9282 device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_set_stream() - Enable sensor streaming

 * @sd: pointer to ov9282 subdevice

 * @enable: set to enable sensor streaming

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_detect() - Detect ov9282 sensor

 * @ov9282: pointer to ov9282 device

 *

 * Return: 0 if successful, -EIO if sensor id does not match

/**

 * ov9282_parse_hw_config() - Parse HW configuration and check if supported

 * @ov9282: pointer to ov9282 device

 *

 * Return: 0 if successful, error code otherwise.

 Request optional reset pin */

 Get sensor input clock */

 V4l2 subdevice ops */

/**

 * ov9282_power_on() - Sensor power on sequence

 * @dev: pointer to i2c device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_power_off() - Sensor power off sequence

 * @dev: pointer to i2c device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * ov9282_init_controls() - Initialize sensor subdevice controls

 * @ov9282: pointer to ov9282 device

 *

 * Return: 0 if successful, error code otherwise.

 Serialize controls with sensor device */

 Initialize exposure and gain */

 Read only controls */

/**

 * ov9282_probe() - I2C client device binding

 * @client: pointer to i2c client device

 *

 * Return: 0 if successful, error code otherwise.

 Initialize subdev */

 Check module identity */

 Set default mode to max resolution */

 Initialize subdev */

 Initialize source pad */

/**

 * ov9282_remove() - I2C client device unbinding

 * @client: pointer to I2C client device

 *

 * Return: 0 if successful, error code otherwise.

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018 Intel Corporation

 Chip ID */

 V_TIMING internal */

 Exposure control */

/*

 *  the digital control register for all color control looks like:

 *  +-----------------+------------------+

 *  |      [7:0]      |       [15:8]     |

 *  +-----------------+------------------+

 *  |	  0x020f      |       0x020e     |

 *  --------------------------------------

 *  it is used to calculate the digital gain times value(integral + fractional)

 *  the [15:8] bits is the fractional part and [7:0] bits is the integral

 *  calculation equation is:

 *      gain value (unit: times) = REG[15:8] + REG[7:0]/0x100

 *  Only value in 0x0100 ~ 0x0FFF range is allowed.

 *  Analog gain use 10 bits in the registers and allowed range is 0 ~ 960

 Analog gain control */

 Digital gain control */

 Test Pattern Control */

 Flip Control */

 default link frequency and external clock */

 Mode : resolution and related config&values */

 Frame width */

 Frame height */

 V-timing */

 H-timing */

 index of link frequency */

 Default register values */

 sensor external clk */

 CSI-2 link frequencies */

 V4L2 Controls */

 Current mode */

 CSI-2 link default frequency */

	/*

	 * Mutex for serialized access:

	 * Protect sensor set pad format and start/stop streaming safely.

	 * Protect access to sensor v4l2 controls.

 Streaming on/off */

 True if the device has been identified */

 supported link frequencies */

 Mode configs */

 Get bayer order based on flip setting. */

	/*

	 * Only one bayer order is supported.

	 * It depends on the flip settings.

 Read registers up to 4 at a time */

 Write register address */

 Read data from register */

 Write registers up to 4 at a time */

 Write a list of registers */

 Open sub-device */

 Initialize try_fmt */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

	/*

	 * Applying V4L2 control value only happens

	 * when power is up for streaming

 Analog gain = 1024/(1024 - ctrl->val) times */

 Update FLL that meets expected vertical blanking */

	/*

	 * Only one bayer order is supported.

	 * It depends on the flip settings.

 Update limits and set FPS to default */

		/*

		 * Currently hblank is not changeable.

		 * So FPS control is done only by vblank.

 Verify chip ID */

 Start streaming */

 Global Setting */

 Apply default values of current mode */

 set digital gain control to all color mode */

 Apply customized values from user */

 Stop streaming */

		/*

		 * Apply default & customized values

		 * and then start streaming.

 vflip and hflip cannot change during streaming */

 Initialize control handlers */

 pixel_rate = link_freq * 2 * nr_of_lanes / bits_per_sample */

 By default, PIXEL_RATE is read only */

 Initial vblank/hblank/exposure parameters based on current mode */

 fll >= exposure time + adjust parameter (default value is 18) */

 Digital gain */

 Initialize subdev */

 Check module identity */

 Set default mode to max resolution */

 Initialize subdev */

 Initialize source pad */

 Set the device's state to active if it's in D0 state. */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Sony IMX290 CMOS Image Sensor Driver

 *

 * Copyright (C) 2019 FRAMOS GmbH.

 *

 * Copyright (C) 2019 Linaro Ltd.

 * Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>

 mode settings */

 data rate settings */

 mode settings */

 data rate settings */

 supported link frequencies */

/*

 * In this function and in the similar ones below We rely on imx290_probe()

 * to ensure that nlanes is either 2 or 4.

 Mode configs */

 Provide 10ms settle time */

 Stop streaming */

 V4L2 controls values will be applied only when power is already up */

 12 bits per pixel */

 pixel rate = link_freq * 2 * nr_of_lanes / bits_per_sample */

 Start streaming */

 Set init register settings */

 Apply the register values related to current frame format */

 Apply default values of current mode */

 Apply customized values from user */

 Start streaming */

		/*

		 * We should never hit this since the data lane count is

		 * validated in probe itself

 Set data lane count */

/*

 * Returns 0 if all link frequencies used by the driver for the given number

 * of MIPI data lanes are mentioned in the device tree, or the value of the

 * first missing frequency otherwise.

 Only CSI2 is supported for now: */

 Get number of data lanes */

 Check that link frequences for all the modes are in device tree */

 get system clock (xclk) */

 external clock must be 37.125 MHz */

	/*

	 * Initialize the frame format. In particular, imx290->current_mode

	 * and imx290->bpp are set to defaults: imx290_calc_pixel_rate() call

	 * below relies on these fields.

 Power on the device to match runtime PM state below */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

 /*

    tea6420 - i2c-driver for the tea6420 by SGS Thomson



    Copyright (C) 1998-2003 Michael Hunold <michael@mihu.de>

    Copyright (C) 2008 Hans Verkuil <hverkuil@xs4all.nl>



    The tea6420 is a bus controlled audio-matrix with 5 stereo inputs,

    4 stereo outputs and gain control for each output.

    It is cascadable, i.e. it can be found at the addresses 0x98

    and 0x9a on the i2c-bus.



    For detailed information download the specifications directly

    from SGS Thomson at http://www.st.com



/* make a connection between the input 'i' and the output 'o'

 check if the parameters are valid */

 to understand this, have a look at the tea6420-specs (p.5) */

 ----------------------------------------------------------------------- */

 let's see whether this adapter can support what we need */

 set initial values: set "mute"-input to all outputs at gain 0 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm8775 - driver version 0.0.1

 *

 * Copyright (C) 2004 Ulf Eklund <ivtv at eklund.to>

 *

 * Based on saa7115 driver

 *

 * Copyright (C) 2005 Hans Verkuil <hverkuil@xs4all.nl>

 * - Cleanup

 * - V4L2 API update

 * - sound fixes

 ----------------------------------------------------------------------- */

 R17: use zero cross detection, ALC hold time 42.6 ms */

 R17: ALC enable */

 Last selected input (0-0xf) */

 normalize ( 65535 to 0 -> 255 to 0 (+24dB to -103dB) ) */

 Mute */

 0x100= Left channel ADC zero cross enable */

 0x100= Right channel ADC zero cross enable */

 Un-mute */

	/* There are 4 inputs and one output. Zero or more inputs

	   are multiplexed together to the output. Hence there are

	   16 combinations.

	   If only one input is active (the normal case) then the

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 i2c implementation */

/*

 * Generic i2c probe

 * concerning the addresses: i2c wants 7 bit (without the r/w bit), so '>>1'

 Check if the adapter supports the needed features */

 0dB*/

 Initialize wm8775 */

 RESET */

 Disable zero cross detect timeout */

 HPF enable, left justified, 24-bit (Philips) mode */

 Master mode, clock ratio 256fs */

 Powered up */

 ADC gain +2.5dB, enable zero cross */

 ADC gain +2.5dB, enable zero cross */

 ALC Stereo, ALC target level -1dB FS max gain +8dB */

		/* Enable gain control, use zero cross detection,

 ALC stereo, ALC target level -5dB FS, ALC max gain +8dB */

 Set ALC mode and hold time */

 ALC gain ramp up delay 34 s, ALC gain ramp down delay 33 ms */

 Enable noise gate, threshold -72dBfs */

 Transient window 4ms, lower PGA gain limit -1dB */

 LRBOTH = 1, use input 2. */

 Transient window 4ms, ALC min gain -5dB  */

 set volume/mute/mux */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2017 Intel Corporation.

 vertical-timings from sensor */

 default for 30 fps */

 horizontal-timings from sensor */

/*

 * Pixels-per-line(PPL) = Time-per-line * pixel-rate

 * In OV5670, Time-per-line = HTS/SCLK.

 * HTS is fixed for all resolutions, not recommended to change.

 Pixels per line */

 Exposure controls from sensor */

 Analog gain controls from sensor */

 Digital gain controls from sensor */

 Test Pattern Control */

 Initial number of frames to skip to avoid possible garbage */

 Frame width in pixels */

 Frame height in pixels */

 Default vertical timining size */

 Min vertical timining size */

 Link frequency needed for this resolution */

 Sensor register settings for this resolution */

 Supported link frequencies */

 pixel_rate = link_freq * 2 * nr_of_lanes / bits_per_sample */

/*

 * OV5670 sensor supports following resolutions with full FOV:

 * 4:3  ==> {2592x1944, 1296x972, 648x486}

 * 16:9 ==> {2560x1440, 1280x720, 640x360}

 V4L2 Controls */

 Current mode */

 To serialize asynchronus callbacks */

 Streaming on/off */

 Read registers up to 4 at a time */

 Write register address */

 Read data from register */

 Write registers up to 4 at a time */

 Write a list of registers */

 Open sub-device */

 Initialize try_fmt */

 No crop or compose */

 Set the bayer order that we support */

 Initialize control handlers */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

 V4L2 controls values will be applied only when power is already up */

 4 least significant bits of expsoure are fractional part */

 Update VTS that meets expected vertical blanking */

 Initialize control handlers */

 By default, V4L2_CID_PIXEL_RATE is read only */

 Get min, max, step, default from sensor */

 Digital gain */

 Get min, max, step, default from sensor */

 Only one bayer order GRBG is supported */

 Update limits and set FPS to default */

 Prepare streaming by writing default values and customized values */

 Get out of from software reset */

 Setup PLL */

 Apply default values of current mode */

 Write stream on list */

	/* Return success even if it was an error, as there is nothing the

	 * caller can do about it.

 Verify chip ID */

 Initialize subdev */

 Check module identity */

 Set default mode to max resolution */

 Source pad initialization */

 Async register for subdev */

	/*

	 * Device is already turned on by i2c-core with ACPI domain PM.

	 * Enable runtime PM and turn off the device.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for ST MIPID02 CSI-2 to PARALLEL bridge

 *

 * Copyright (C) STMicroelectronics SA 2019

 * Authors: Mickael Guene <mickael.guene@st.com>

 *          for STMicroelectronics.

 *

 *

 Bits definition for MIPID02_CLK_LANE_REG1 */

 Bits definition for MIPID02_CLK_LANE_REG3 */

 Bits definition for MIPID02_DATA_LANE0_REG1 */

 Bits definition for MIPID02_DATA_LANEx_REG2 */

 Bits definition for MIPID02_MODE_REG1 */

 Bits definition for MIPID02_MODE_REG2 */

 Bits definition for MIPID02_DATA_SELECTION_CTRL */

 regulator supplies */

 1.8V digital I/O supply */

 1V8 voltage regulator supply */

 endpoints info */

 remote source */

 registers */

 lock to protect all members below */

	/*

	 * There is no version registers. Just try to read register

	 * MIPID02_CLK_LANE_WR_REG1.

/*

 * We need to know link frequency to setup clk_lane_reg1 timings. Link frequency

 * will be computed using connected device V4L2_CID_PIXEL_RATE, bit per pixel

 * and number of lanes.

 midid02 doesn't support clock lane remapping */

	/*

	 * data lane 0 as pin swap polarity reversed compared to clock and

	 * data lane 1

 Disable all lanes */

 build registers content */

 write mipi registers */

 second CSI-2 pad not yet supported */

 code may need to be converted for source */

 source pad mirror active sink pad */

 but code may need to be converted */

 only apply format for V4L2_SUBDEV_FORMAT_TRY case */

 second CSI-2 pad not yet supported */

 parse rx (endpoint 0) */

 do some sanity checks */

 register it for later use */

 register async notifier so we get noticed when sensor is connected */

 parse tx (endpoint 2) */

 got and check clock */

 enable clock, power and reset device if available */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2021 Intel Corporation

 Chip ID */

 V_TIMING internal */

 HBLANK control - read only */

 Exposure control */

 Analog gain control */

 Digital gain control */

 Orientation */

 Test Pattern Control */

 OTP Access */

 Link frequency config */

 PLL registers for this link frequency */

 Mode : resolution and related config&values */

 Frame width */

 Frame height */

 V-timing */

 Index of Link frequency config to be used */

 Default register values */

 Configurations for supported link frequencies */

/*

 * pixel_rate = link_freq * data-rate * nr_of_lanes / bits_per_sample

 * data rate => double data rate; number of lanes => 2; bits per pixel => 10

 Menu items for LINK_FREQ V4L2 control */

 Link frequency configs */

 Mode configs */

 V4L2 Controls */

 Current mode */

	/*

	 * Mutex for serialized access:

	 * Protect sensor set pad format and start/stop streaming safely.

	 * Protect access to sensor v4l2 controls.

 Streaming on/off */

 OTP data */

 Get bayer order based on flip setting. */

	/*

	 * Only one bayer order is supported.

	 * It depends on the flip settings.

 Read registers up to 4 at a time */

 Write register address */

 Read data from register */

 Write registers up to 4 at a time */

 Write a list of registers */

 Open sub-device */

 Initialize try_fmt */

	/*

	 * Applying V4L2 control value only happens

	 * when power is up for streaming

 Update VTS that meets expected vertical blanking */

 Update limits and set FPS to default */

 Start streaming */

 Setup PLL */

 Apply default values of current mode */

 Apply customized values from user */

 set stream on register */

 Stop streaming */

 set stream off register */

	/*

	 * Return success even if it was an error, as there is nothing the

	 * caller can do about it.

		/*

		 * Apply default & customized values

		 * and then start streaming.

 vflip and hflip cannot change during streaming */

 Verify chip ID */

 Write register address */

 Read data from registers */

 Initialize control handlers */

 By default, PIXEL_RATE is read only */

 Initialize subdev */

 Check module identity */

 Set default mode to max resolution */

 Initialize subdev */

 Initialize source pad */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/media/i2c/lm3560.c

 * General device driver for TI lm3559, lm3560, FLASH LED Driver

 *

 * Copyright (C) 2013 Texas Instruments

 *

 * Contact: Daniel Jeong <gshark.jeong@gmail.com>

 *			Ldd-Mlp <ldd-mlp@list.ti.com>

 registers definitions */

 fault mask */

/**

 * struct lm3560_flash

 *

 * @dev: pointer to &struct device

 * @pdata: platform data

 * @regmap: reg. map for i2c

 * @lock: muxtex for serial access.

 * @led_mode: V4L2 LED mode

 * @ctrls_led: V4L2 controls

 * @subdev_led: V4L2 subdev

 enable mode control */

 led1/2 enable/disable */

 torch1/2 brightness control */

 flash1/2 brightness control */

 v4l2 controls  */

 flash mode */

 flash source */

 flash strobe */

 flash strobe stop */

 flash strobe timeout */

 flash brt */

 torch brt */

 fault */

 initialize device */

 set peak current */

 output disable */

 reset faults */

 if there is no platform data, use chip default value */

 led 1 */

 led 2 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for MT9M111/MT9M112/MT9M131 CMOS Image Sensor from Micron/Aptina

 *

 * Copyright (C) 2008, Robert Jarzmik <robert.jarzmik@free.fr>

/*

 * MT9M111, MT9M112 and MT9M131:

 * i2c address is 0x48 or 0x5d (depending on SADDR pin)

 * The platform has to define struct i2c_board_info objects and link to them

 * from struct soc_camera_host_desc

/*

 * Sensor core register addresses (0x000..0x0ff)

/*

 * Colorpipe register addresses (0x100..0x1ff)

/*

 * Camera control register addresses (0x200..0x2ff not implemented)

 MT9M111 has only one fixed colorspace per pixelcode */

 cropping rectangle */

 output */

 sizes */

 lock to protect power_count */

 PageMap cache value */

 user point of view - 0: falling 1: rising edge */

 Find a data format by a pixel code */

 IFP in use, down-scaling possible */

 Bayer format - even size lengths */

 Let the user play with the starting pixel */

 FIXME: the datasheet doesn't specify minimum sizes */

 receiver samples on falling edge, chip-hw default is rising */

	/*

	 * With Bayer format enforce even side lengths, but let the user play

	 * with the starting pixel

 IFP bypass mode, no scaling */

 No upscaling */

	/*

	 * The fps selection is based on the row, column skipping mechanism.

	 * So ensure that the sensor window is set to default else the fps

	 * aren't calculated correctly within the sensor hw.

 30fps only supported for images not exceeding 640x512 */

 find best matched fps */

	/*

	 * Use context a/b default timing values instead of calculate blanking

	 * timing values.

	/*

	 * If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

 Update the power count. */

 Find best fitting mode. Do not update the mode if no one was found. */

/*

 * Interface active, can use i2c. If it fails, it can indeed mean, that

 * this wasn't our capture interface, so, we wait for the right one

 MT9M111 or MT9M131 */

 MT9M112 */

 Default HIGHPOWER context */

 Second stage probe - when a capture adapter is there */

 SPDX-License-Identifier: GPL-2.0

/*

 * For the STS-Thompson TDA7432 audio processor chip

 *

 * Handles audio functions: volume, balance, tone, loudness

 * This driver will not complain if used with any

 * other i2c device with the same address.

 *

 * Muting and tone control by Jonathan Isom <jisom@ematic.com>

 *

 * Copyright (c) 2000 Eric Sandeen <eric_sandeen@bigfoot.com>

 * Copyright (c) 2006 Mauro Carvalho Chehab <mchehab@kernel.org>

 *

 * Based on tda9855.c by Steve VanDeBogart (vandebo@uclink.berkeley.edu)

 * Which was based on tda8425.c by Greg Alexander (c) 1998

 *

 * OPTIONS:

 * debug    - set to 1 if you'd like to see debug messages

 *            set to 2 if you'd like to be inundated with debug messages

 *

 * loudness - set between 0 and 15 for varying degrees of loudness effect

 *

 * maxvol   - set maximum volume to +20db (1), default is 0db(0)

 disable loudness by default */

 insmod parameter */

 Structure of address and subaddresses for the tda7432 */

 bass/treble cluster */

 mute/balance cluster */

/* The TDA7432 is made by STS-Thompson

 * http://www.st.com

 * http://us.st.com/stonline/books/pdf/docs/4056.pdf

 *

 * TDA7432: I2C-bus controlled basic audio processor

 *

 * The TDA7432 controls basic audio functions like volume, balance,

 * and tone control (including loudness).  It also has four channel

 * output (for front and rear).  Since most vidcap cards probably

 * don't have 4 channel output, this driver will set front & rear

 * together (no independent control).

 Subaddresses for TDA7432 */

 Input select                 */

 Volume                       */

 Bass, Treble (Tone)          */

 Attenuation LF (Left Front)  */

 Attenuation LR (Left Rear)   */

 Attenuation RF (Right Front) */

 Attenuation RR (Right Rear)  */

 Loudness                     */

 Masks for bits in TDA7432 subaddresses */

 Many of these not used - just for documentation */

 Subaddress 0x00 - Input selection and bass control */

/* Bits 0,1,2 control input:

 * 0x00 - Stereo input

 * 0x02 - Mono input

 * 0x03 - Mute  (Using Attenuators Plays better with modules)

 * Mono probably isn't used - I'm guessing only the stereo

 * input is connected on most cards, so we'll set it to stereo.

 *

 * Bit 3 controls bass cut: 0/1 is non-symmetric/symmetric bass cut

 * Bit 4 controls bass range: 0/1 is extended/standard bass range

 *

 * Highest 3 bits not used

 Probably won't be used */

 Subaddress 0x01 - Volume */

/* Lower 7 bits control volume from -79dB to +32dB in 1dB steps

 * Recommended maximum is +20 dB

 *

 * +32dB: 0x00

 * +20dB: 0x0c

 *   0dB: 0x20

 * -79dB: 0x6f

 *

 * MSB (bit 7) controls loudness: 1/0 is loudness on/off

 Subaddress 0x02 - Tone control */

/* Bits 0,1,2 control absolute treble gain from 0dB to 14dB

 * 0x0 is 14dB, 0x7 is 0dB

 *

 * Bit 3 controls treble attenuation/gain (sign)

 * 1 = gain (+)

 * 0 = attenuation (-)

 *

 * Bits 4,5,6 control absolute bass gain from 0dB to 14dB

 * (This is only true for normal base range, set in 0x00)

 * 0x0 << 4 is 14dB, 0x7 is 0dB

 *

 * Bit 7 controls bass attenuation/gain (sign)

 * 1 << 7 = gain (+)

 * 0 << 7 = attenuation (-)

 *

 * Example:

 * 1 1 0 1 0 1 0 1 is +4dB bass, -4dB treble

 Subaddress 0x03 - Left  Front attenuation */

 Subaddress 0x04 - Left  Rear  attenuation */

 Subaddress 0x05 - Right Front attenuation */

 Subaddress 0x06 - Right Rear  attenuation */

/* Bits 0,1,2,3,4 control attenuation from 0dB to -37.5dB

 * in 1.5dB steps.

 *

 * 0x00 is     0dB

 * 0x1f is -37.5dB

 *

 * Bit 5 mutes that channel when set (1 = mute, 0 = unmute)

 * We'll use the mute on the input, though (above)

 * Bits 6,7 unused

 Subaddress 0x07 - Loudness Control */

/* Bits 0,1,2,3 control loudness from 0dB to -15dB in 1dB steps

 * when bit 4 is NOT set

 *

 * 0x0 is   0dB

 * 0xf is -15dB

 *

 * If bit 4 is set, then there is a flat attenuation according to

 * the lower 4 bits, as above.

 *

 * Bits 5,6,7 unused

 Begin code */

 Main (stereo) input   */

 Symmetric bass cut    */

 Normal bass range     */

 Turn loudness on?     */

 shifted to left, attenuate right */

 shifted to right, attenuate left */

 centered */

 Mute & update balance*/

 Turn on the loudness bit */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

/* *********************** *

 * i2c interface functions *

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2017 Intel Corporation.

 PLL1 generates PCLK and MIPI_PHY_CLK */

 PLL2 generates DAC_CLK, SCLK and SRAM_CLK */

 Chip ID */

 V_TIMING internal */

 30 fps */

 60 fps */

 HBLANK control - read only */

 Exposure control */

 Analog gain control */

 Digital gain control */

 Max = 16 X */

 Default gain = 1 X */

 Each step = 1/1024 */

 Test Pattern Control */

 Number of frames to skip */

 Link frequency config */

 PLL registers for this link frequency */

 Mode : resolution and related config&values */

 Frame width */

 Frame height */

 V-timing */

 Index of Link frequency config to be used */

 Default register values */

 4224x3136 needs 1080Mbps/lane, 4 lanes */

 PLL1 registers */

 PLL2 registers */

/*

 * 2112x1568, 2112x1188, 1056x784 need 540Mbps/lane,

 * 4 lanes

 PLL1 registers */

 PLL2 registers */

 Configurations for supported link frequencies */

/*

 * pixel_rate = link_freq * data-rate * nr_of_lanes / bits_per_sample

 * data rate => double data rate; number of lanes => 4; bits per pixel => 10

 Menu items for LINK_FREQ V4L2 control */

 Link frequency configs */

 Mode configs */

 V4L2 Controls */

 Current mode */

 Mutex for serialized access */

 Streaming on/off */

 Read registers up to 4 at a time */

 Write register address */

 Read data from register */

 Write registers up to 4 at a time */

 Write a list of registers */

 Open sub-device */

 Initialize try_fmt */

 No crop or compose */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

	/*

	 * Applying V4L2 control value only happens

	 * when power is up for streaming

 Update VTS that meets expected vertical blanking */

 Only one bayer order(GRBG) is supported */

 Only one raw bayer(GRBG) order is supported */

 Update limits and set FPS to default */

 Start streaming */

 Get out of from software reset */

 Setup PLL */

 Apply default values of current mode */

 Apply customized values from user */

 Stop streaming */

		/*

		 * Apply default & customized values

		 * and then start streaming.

 Verify chip ID */

 Initialize control handlers */

 By default, PIXEL_RATE is read only */

 Digital gain */

 Initialize subdev */

 Check module identity */

 Set default mode to max resolution */

 Initialize subdev */

 Initialize source pad */

	/*

	 * Device is already turned on by i2c-core with ACPI domain PM.

	 * Enable runtime PM and turn off the device.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for MT9M032 CMOS Image Sensor from Micron

 *

 * Copyright (C) 2010-2011 Lund Engineering

 * Contact: Gil Lund <gwlund@lundeng.com>

 * Author: Martin Hostettler <martin@neutronstar.dyndns.org>

/*

 * width and height include active boundary and black parts

 *

 * column    0-  15 active boundary

 * column   16-1455 image

 * column 1456-1471 active boundary

 * column 1472-1599 black

 *

 * row       0-  51 black

 * row      53-  59 active boundary

 * row      60-1139 image

 * row    1140-1147 active boundary

 * row    1148-1151 black

 write only */

/*

 * The available MT9M032 datasheet is missing documentation for register 0x10

 * MT9P031 seems to be close enough, so use constants from that datasheet for

 * now.

 * But keep the name MT9P031 to remind us, that this isn't really confirmed

 * for this sensor.

 Protects streaming, format, interval and crop */

 empirical value */

 hardware limits to 11 bit values */

 enforce minimal 1.6ms blanking time. */

 parts reserved! */

 possibly for changing to 14-bit mode */

 pixclock enable */

 more reserved, Continuous, Master Mode */

 14-bit */

/* -----------------------------------------------------------------------------

 * Subdev pad operations

/**

 * __mt9m032_get_pad_crop() - get crop rect

 * @sensor: pointer to the sensor struct

 * @sd_state: v4l2_subdev_state for getting the try crop rect from

 * @which: select try or active crop rect

 *

 * Returns a pointer the current active or fh relative try crop rect

/**

 * __mt9m032_get_pad_format() - get format

 * @sensor: pointer to the sensor struct

 * @sd_state: v4l2_subdev_state for getting the try format from

 * @which: select try or active format

 *

 * Returns a pointer the current active or fh relative try format

 Scaling is not supported, the format is thus fixed. */

	/* Clamp the crop rectangle boundaries and align them to a multiple of 2

	 * pixels to ensure a GRBG Bayer pattern.

		/* Reset the output image size if the crop rectangle size has

		 * been modified.

 Avoid divisions by 0. */

/* -----------------------------------------------------------------------------

 * V4L2 subdev core operations

/* -----------------------------------------------------------------------------

 * V4L2 subdev control operations

 in 1/8th (0..127) */

 0 or 1 */

 in 1/16th. (0..63) */

 from setup example */

 a_gain = (1 + analog_mul) + (analog_gain_val + 1) / 16 */

 overall_gain = a_gain * (1 + digital_gain_val / 8) */

 round because of multiplier used for values >= 63 */

 case V4L2_CID_VFLIP: -- In the same cluster */

 -------------------------------------------------------------------------- */

/* -----------------------------------------------------------------------------

 * Driver initialization and probing

 reset on */

 reset off */

 SIZE */

 reserved !!! */

 reserved !!! */

 reserved !!! */

 reserved !!! */

 Restart on */

 Restart off */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * saa7185 - Philips SAA7185B video encoder driver version 0.0.3

 *

 * Copyright (C) 1998 Dave Perks <dperks@ibm.net>

 *

 * Slight changes for video timing and attachment output by

 * Wolfgang Scherr <scherr@net4you.net>

 *

 * Changes by Ronald Bultje <rbultje@ronald.bitfreak.net>

 *    - moved over to linux>=2.4.x i2c protocol (1/1/2003)

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

	/* the adv7175 has an autoincrement function, use it if

 do raw I2C, not smbus compatible */

 do some slow I2C emulation kind of thing */

 ----------------------------------------------------------------------- */

	0x3a, 0x0f,		/* CBENB=0, V656=0, VY2C=1,

 OVLY0=107 */

 OVLU0=0     white */

 OVLV0=0   */

 OVLY1=34  */

 OVLU1=172   yellow */

 OVLV1=14  */

 OVLY2=3   */

 OVLU2=29    cyan */

 OVLV2=172 */

 OVLY3=240 */

 OVLU3=200   green */

 OVLV3=185 */

 OVLY4=212 */

 OVLU4=56    magenta */

 OVLV4=71  */

 OVLY5=193 */

 OVLU5=227   red */

 OVLV5=84  */

 OVLY6=163 */

 OVLU6=84    blue */

 OVLV6=242 */

 OVLY7=144 */

 OVLU7=0     black */

 OVLV7=0   */

 CHPS=0    */

 GAINU=118 */

 GAINV=165 */

 BLCKL=60  */

 BLNNL=58  */

 CCRS=0, BLNVB=58 */

 NULL      */

 0x61 - 0x66 set according to norm */

 0 : caption 1st byte odd  field */

 0 : caption 2nd byte odd  field */

 0 : caption 1st byte even field */

 0 : caption 2nd byte even field */

 MODIN=2, PCREF=0, SCCLN=17 */

	0x6c, 0x20,		/* SRCV1=0, TRCV2=1, ORCV1=0, PRCV1=0,

 SRCM1=0, CCEN=0 */

	0x6e, 0x0e,		/* HTRIG=0x005, approx. centered, at

 HTRIG upper bits */

 PHRES=0, SBLN=1, VTRIG=0 */

 The following should not be needed */

 BMRQ=0x115 */

 EMRQ=0x690 */

 EMRQ=0x690, BMRQ=0x115 */

 NULL       */

 NULL       */

 NULL       */

 BRCV=0x115 */

 ERCV=0x690 */

 ERCV=0x690, BRCV=0x115 */

 Field length controls */

 FLC=0 */

 The following should not be needed if SBLN = 1 */

 FAL=22 */

 LAL=244 */

 LAL=244, FAL=22 */

	0x61, 0x1e,		/* FISE=0, PAL=1, SCBW=1, RTCE=1,

 DECTYP=1, BSTA=72 */

 FSC0 */

 FSC1 */

 FSC2 */

 FSC3 */

	0x61, 0x1d,		/* FISE=1, PAL=0, SCBW=1, RTCE=1,

 DECTYP=1, BSTA=102 */

 FSC0 */

 FSC1 */

 FSC2 */

 FSC3 */

	/* RJ: input = 0: input is from SA7111

 turn off colorbar */

 Switch RTCE to 1 */

 turn off colorbar */

 Switch RTCE to 0 */

 SW: a slight sync problem... */

 turn on colorbar */

 Switch RTCE to 0 */

 SW: a slight sync problem... */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 Check if the adapter supports the needed features */

 SW: output off is active */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/media/i2c/tvp514x.c

 *

 * TI TVP5146/47 decoder driver

 *

 * Copyright (C) 2008 Texas Instruments Inc

 * Author: Vaibhav Hiremath <hvaibhav@ti.com>

 *

 * Contributors:

 *     Sivaraj R <sivaraj@ti.com>

 *     Brijesh R Jadav <brijesh.j@ti.com>

 *     Hardik Shah <hardik.shah@ti.com>

 *     Manjunath Hadli <mrh@ti.com>

 *     Karicheri Muralidharan <m-karicheri2@ti.com>

 *     Prabhakar Lad <prabhakar.lad@ti.com>

 Private macros for TVP */

 Debug functions */

 enum tvp514x_std - enum for supported standards */

/**

 * struct tvp514x_std_info - Structure to store standard information

 * @width: Line width in pixels

 * @height:Number of active lines

 * @video_std: Value to write in REG_VIDEO_STD register

 * @standard: v4l2 standard structure information

/**

 * struct tvp514x_decoder - TVP5146/47 decoder object

 * @sd: Subdevice Slave handle

 * @hdl: embedded &struct v4l2_ctrl_handler

 * @tvp514x_regs: copy of hw's regs with preset values.

 * @pdata: Board specific

 * @ver: Chip version

 * @streaming: TVP5146/47 decoder streaming - enabled or disabled.

 * @pix: Current pixel format

 * @num_fmts: Number of formats

 * @fmt_list: Format list

 * @current_std: Current standard

 * @num_stds: Number of standards

 * @std_list: Standards list

 * @input: Input routing at chip level

 * @output: Output routing at chip level

 * @pad: subdev media pad associated with the decoder

 * @format: media bus frame format

 * @int_seq: driver's register init sequence

 Input and Output Routing parameters */

 mc related members */

 TVP514x default register values */

 Composite selected */

 Auto mode */

 Reserved */

 Reserved */

 Reserved */

 NTSC timing */

 NTSC timing */

 NTSC timing */

 NTSC timing */

 Reserved */

 Reserved */

 Reserved */

 Reserved */

 Reserved */

 Reserved */

 Reserved */

 HS, VS active high */

 10-bit BT.656 */

 Enable clk & data */

 Enable AVID & FLD */

 Enable VS & HS */

 Clear status */

/*

 * List of image formats supported by TVP5146/47 decoder

 * Currently we are using 8 bit mode only, but can be

 * extended to 10/20 bit mode.

/*

 * Supported standards -

 *

 * Currently supports two standards only, need to add support for rest of the

 * modes, like SECAM, etc...

 Standard: STD_NTSC_MJ */

 Standard: STD_PAL_BDGHIN */

 Standard: need to add for additional standard */

/**

 * tvp514x_read_reg() - Read a value from a register in an TVP5146/47.

 * @sd: ptr to v4l2_subdev struct

 * @reg: TVP5146/47 register address

 *

 * Returns value read if successful, or non-zero (-1) otherwise.

/**

 * dump_reg() - dump the register content of TVP5146/47.

 * @sd: ptr to v4l2_subdev struct

 * @reg: TVP5146/47 register address

/**

 * tvp514x_write_reg() - Write a value to a register in TVP5146/47

 * @sd: ptr to v4l2_subdev struct

 * @reg: TVP5146/47 register address

 * @val: value to be written to the register

 *

 * Write a value to a register in an TVP5146/47 decoder device.

 * Returns zero if successful, or non-zero otherwise.

/**

 * tvp514x_write_regs() : Initializes a list of TVP5146/47 registers

 * @sd: ptr to v4l2_subdev struct

 * @reglist: list of TVP5146/47 registers and values

 *

 * Initializes a list of TVP5146/47 registers:-

 *		if token is TOK_TERM, then entire write operation terminates

 *		if token is TOK_DELAY, then a delay of 'val' msec is introduced

 *		if token is TOK_SKIP, then the register write is skipped

 *		if token is TOK_WRITE, then the register write is performed

 * Returns zero if successful, or non-zero otherwise.

/**

 * tvp514x_query_current_std() : Query the current standard detected by TVP5146/47

 * @sd: ptr to v4l2_subdev struct

 *

 * Returns the current standard detected by TVP5146/47, STD_INVALID if there is no

 * standard detected.

 use the standard status register */

 use the standard register itself */

 TVP5146/47 register dump function */

/**

 * tvp514x_configure() - Configure the TVP5146/47 registers

 * @sd: ptr to v4l2_subdev struct

 * @decoder: ptr to tvp514x_decoder structure

 *

 * Returns zero if successful, or non-zero otherwise.

 common register initialization */

/**

 * tvp514x_detect() - Detect if an tvp514x is present, and if so which revision.

 * @sd: pointer to standard V4L2 sub-device structure

 * @decoder: pointer to tvp514x_decoder structure

 *

 * A device is considered to be detected if the chip ID (LSB and MSB)

 * registers match the expected values.

 * Any value of the rom version register is accepted.

 * Returns ENODEV error number if no device is detected, or zero

 * if a device is detected.

		/* We didn't read the values we expected, so this must not be

		 * an TVP5146/47.

/**

 * tvp514x_querystd() - V4L2 decoder interface handler for querystd

 * @sd: pointer to standard V4L2 sub-device structure

 * @std_id: standard V4L2 std_id ioctl enum

 *

 * Returns the current standard detected by TVP5146/47. If no active input is

 * detected then *std_id is set to 0 and the function returns 0.

 To query the standard the TVP514x must power on the ADCs. */

 query the current standard */

Need to add other interfaces*/

 check whether signal is locked */

 No input detected */

/**

 * tvp514x_s_std() - V4L2 decoder interface handler for s_std

 * @sd: pointer to standard V4L2 sub-device structure

 * @std_id: standard V4L2 v4l2_std_id ioctl enum

 *

 * If std_id is supported, sets the requested standard. Otherwise, returns

 * -EINVAL

/**

 * tvp514x_s_routing() - V4L2 decoder interface handler for s_routing

 * @sd: pointer to standard V4L2 sub-device structure

 * @input: input selector for routing the signal

 * @output: output selector for routing the signal

 * @config: config value. Not used

 *

 * If index is valid, selects the requested input. Otherwise, returns -EINVAL if

 * the input is not supported or there is no active signal present in the

 * selected input.

 Index out of bound */

/**

 * tvp514x_s_ctrl() - V4L2 decoder interface handler for s_ctrl

 * @ctrl: pointer to v4l2_ctrl structure

 *

 * If the requested control is supported, sets the control's current

 * value in HW. Otherwise, returns -EINVAL if the control is not supported.

/**

 * tvp514x_g_frame_interval() - V4L2 decoder interface handler

 * @sd: pointer to standard V4L2 sub-device structure

 * @ival: pointer to a v4l2_subdev_frame_interval structure

 *

 * Returns the decoder's video CAPTURE parameters.

 get the current standard */

/**

 * tvp514x_s_frame_interval() - V4L2 decoder interface handler

 * @sd: pointer to standard V4L2 sub-device structure

 * @ival: pointer to a v4l2_subdev_frame_interval structure

 *

 * Configures the decoder to use the input parameters, if possible. If

 * not possible, returns the appropriate error code.

 get the current standard */

/**

 * tvp514x_s_stream() - V4L2 decoder i/f handler for s_stream

 * @sd: pointer to standard V4L2 sub-device structure

 * @enable: streaming enable or disable

 *

 * Sets streaming to enable or disable, if possible.

 Power Down Sequence */

 Power Up Sequence */

 Detect if not already detected */

/**

 * tvp514x_enum_mbus_code() - V4L2 decoder interface handler for enum_mbus_code

 * @sd: pointer to standard V4L2 sub-device structure

 * @sd_state: subdev state

 * @code: pointer to v4l2_subdev_mbus_code_enum structure

 *

 * Enumertaes mbus codes supported

/**

 * tvp514x_get_pad_format() - V4L2 decoder interface handler for get pad format

 * @sd: pointer to standard V4L2 sub-device structure

 * @sd_state: subdev state

 * @format: pointer to v4l2_subdev_format structure

 *

 * Retrieves pad format which is active or tried based on requirement

/**

 * tvp514x_set_pad_format() - V4L2 decoder interface handler for set pad format

 * @sd: pointer to standard V4L2 sub-device structure

 * @sd_state: subdev state

 * @fmt: pointer to v4l2_subdev_format structure

 *

 * Set pad format for the output pad

 Default to NTSC 8-bit YUV 422 */

/**

 * tvp514x_probe() - decoder driver i2c probe handler

 * @client: i2c driver client device structure

 * @id: i2c driver id table

 *

 * Register decoder as an i2c client device and V4L2

 * device.

 Check if the adapter supports the needed features */

 Initialize the tvp514x_decoder with default configuration */

 Copy default register configuration */

 Copy board specific information here */

	/**

	 * Fetch platform specific data, and configure the

	 * tvp514x_reg_list[] accordingly. Since this is one

	 * time configuration, no need to preserve.

 Set default standard to auto */

 Register with V4L2 layer as slave device */

/**

 * tvp514x_remove() - decoder driver i2c remove handler

 * @client: i2c driver client device structure

 *

 * Unregister decoder as an i2c client device and V4L2

 * device. Complement of tvp514x_probe().

 TVP5146 Init/Power on Sequence */

 TVP5147 Init/Power on Sequence */

 TVP5146M2/TVP5147M1 Init/Power on Sequence */

/*

 * I2C Device Table -

 *

 * name - Name of the actual device/chip.

 * driver_data - Driver data

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0



 tvp5150 - Texas Instruments TVP5150A/AM1 and TVP5151 video decoder driver



 Copyright (c) 2005,2006 Mauro Carvalho Chehab <mchehab@kernel.org>

 Check dt-bindings for more information */

 Current set standard */

/****************************************************************************

			Basic functions

 Only tvp5150am1 and tvp5151 have signal generator support */

	/*

	 * Setup the FID/GLCO/VLK/HVLK and INTREQ/GPCL/VBLK output signals. For

	 * S-Video we output the vertical lock (VLK) signal on FID/GLCO/VLK/HVLK

	 * and set INTREQ/GPCL/VBLK to logic 0. For composite we output the

	 * field indicator (FID) signal on FID/GLCO/VLK/HVLK and set

	 * INTREQ/GPCL/VBLK to logic 1.

 Default values as sugested at TVP5150AM1 datasheet */

 0x00 */

 0x01 */

 0x02 */

 0x03 */

 0x06 */

 0x07 */

 0x08 */

 0x09 */

 0x0a */

 0x0b */

 0x0c */

 0x0d */

 0x0e */

 0x0f */

 0x11 */

 0x12 */

 0x13 */

 0x14 */

 0x15 */

 0x16 */

 0x18 */

 0x19 */

 0x1a */

 0x1b */

 0x1c */

 0x1d */

 0x1e */

 0x28 */

 0x2e */

 0x2f */

 0xbb */

 0xc0 */

 0xc1 */

 0xc2 */

 0xc8 */

 0xc9 */

 0xca */

 0xcb */

 0xcc */

 0xcd */

 0xcf */

 0xd0 */

 0xfc */

 end of data */

 Default values as sugested at TVP5150AM1 datasheet */

 Automatic offset and AGC enabled */

 Activate YCrCb output 0x9 or 0xd ? */

 Activates video std autodetection for all standards */

 Default format: 0x47. For 4:2:2: 0x40 */

 Non documented, but initialized on WinTV USB2 */

/* This struct have the values for each supported VBI Standard

 * by

 tvp5150_vbi_types should follow the same order as vbi_ram_default

 * value 0 means rom position 0x10, value 1 means rom position 0x30

 * and so on. There are 16 possible locations from 0 to 15.

	/*

	 * FIXME: Current api doesn't handle all VBI types, those not

	 * yet supported are placed under #if 0

 Teletext, SECAM, WST System A */

 Teletext, PAL, WST System B */

 Teletext, PAL, WST System C */

 Teletext, NTSC, WST System B */

 Tetetext, NTSC NABTS System C */

 Teletext, NTSC-J, NABTS System D */

 Closed Caption, PAL/SECAM */

 Closed Caption, NTSC */

 Wide Screen Signal, PAL/SECAM */

 Wide Screen Signal, NTSC C */

 Vertical Interval Timecode (VITC), PAL/SECAM */

 Vertical Interval Timecode (VITC), NTSC */

 Video Program System (VPS), PAL */

 0x1d0 User programmable */

 Disable Full Field */

 Before programming, Line mode should be at 0xff */

 Load Ram Table */

 Fills VBI capabilities based on i2c_vbi_ram_value struct */

/* Set vbi processing

 * type - one of tvp5150_vbi_types

 * line - line to gather data

 * fields: bit 0 field1, bit 1, field2

 * flags (default=0xf0) is a bitmask, were set means:

 *	bit 7: enable filtering null bytes on CC

 *	bit 6: send data also to FIFO

 *	bit 5: don't allow data with errors on FIFO

 *	bit 4: enable ECC when possible

 * pix_align = pix alignment:

 *	LSB = field1

 *	MSB = field2

 Don't follow NTSC Line number convension */

 Don't follow NTSC Line number convension */

 First tests should be against specific std */

 Then, test against generic ones */

 In case of no of-connectors are available no limitations are made */

	/*

	 * Check if requested std or group of std's is/are supported by the

	 * connector.

 Change cropping height limits */

 Set only the specific supported std in case of group of std's. */

 For standard detection, we need the 3 locks */

 Initializes TVP5150 to its default values */

 Configure pins: FID, VSYNC, INTREQ, SCLK */

 Set interrupt polarity to active high */

 Configure pins: FID, VSYNC, GPCL/VBLK, SCLK */

 Keep interrupt polarity active low */

 Initializes VDP registers */

 Selects decoder input */

 Initialize image preferences */

 Initializes TVP5150 to stream enabled values */

 Disable autoswitch mode */

	/*

	 * Enable the YCbCr and clock outputs. In discrete sync mode

	 * (non-BT.656) additionally enable the sync outputs.

 8-bit 4:2:2 YUV with discrete sync output */

 Default is no cropping */

 Calculate height based on current standard */

 tvp5150 has some special limits */

	/*

	 * alignments:

	 *  - width = 2 due to UYVY colorspace

	 *  - height, image = no special alignment

	/*

	 * Update output image size if the selection (crop) rectangle size or

	 * position has been modified.

 Calculate height based on current standard */

/****************************************************************************

			V4L2 subdev pad ops

	/*

	 * Reset selection to maximum on subdev_open() if autodetection is on

	 * and a standard change is detected.

/****************************************************************************

 *			Media entity ops

	/*

	 * The TVP5150 state is determined by the enabled sink pad link(s).

	 * Enabling or disabling the source pad link has no effect.

 Check if the svideo connector should be enabled */

	/*

	 * The TVP5150 has an internal mux which allows the following setup:

	 *

	 * comp-connector1  --\

	 *		       |---> AIP1A

	 *		      /

	 * svideo-connector -|

	 *		      \

	 *		       |---> AIP1B

	 * comp-connector2  --/

	 *

	 * We can't rely on user space that the current connector gets disabled

	 * first before enabling the new connector. Disable all active

	 * connector links to be on the safe side.

		/*

		 * S-Video connector is conneted to both ports AIP1A and AIP1B.

		 * Both links must be enabled in one-shot regardless which link

		 * the user requests.

 Update the current connector */

		/*

		 * Do nothing if the new connector supports the same tv-norms as

		 * the old one.

		/*

		 * Fallback to the new connector tv-norms if we can't find any

		 * common between the current tv-norm and the new one.

/****************************************************************************

			I2C Command

 Disable lock interrupt */

 Enable lock interrupt */

 Enable outputs if decoder is locked */

	/*

	 * this is for capturing 36 raw vbi lines

	 * if there's a way to cut off the beginning 2 vbi lines

	 * with the tvp5150 then the vbi line count could be lowered

	 * to 17 lines/field again, although I couldn't find a register

	 * which could do that cropping

 Enables FIFO */

 Disables FIFO*/

 Disable Full Field */

 Disable Line modes */

	/*

	 * Setup connector pads and links. Enable the link to the first

	 * available connector per default.

			/*

			 * Check tvp5150_link_setup() comments for more

			 * information.

 Enable default input. */

 ----------------------------------------------------------------------- */

/****************************************************************************

			I2C Client & Driver

 CC, WSS, VPS, VITC data? */

	/*

	 * Read consequent registers - TVP5150_MSB_DEV_ID, TVP5150_LSB_DEV_ID,

	 * TVP5150_ROM_MAJOR_VER, TVP5150_ROM_MINOR_VER

 ITU-T BT.656.4 timing */

 Delay time between power supplies active and reset */

 RESETB pulse duration */

 Delay time between end of reset to I2C active */

 !defined(CONFIG_MEDIA_CONTROLLER) */

 defined(CONFIG_MEDIA_CONTROLLER) */

 At least 1 output and 1 input */

	/* Layout if all connectors are used:

	 *

	 * tvp-5150 port@0 (AIP1A)

	 *	endpoint@0 -----------> Comp0-Con  port

	 *	endpoint@1 --------+--> Svideo-Con port

	 * tvp-5150 port@1 (AIP1B) |

	 *	endpoint@1 --------+

	 *	endpoint@0 -----------> Comp1-Con  port

	 * tvp-5150 port@2

	 *	endpoint (video bitstream output at YOUT[0-7] parallel bus)

 Adding the 2nd svideo link */

 Check if the adapter supports the needed features */

 Default to BT.656 embedded sync */

	/*

	 * Iterate over all available connectors in case they are supported and

	 * successfully parsed. Fallback to default autodetect in case they

	 * aren't supported.

 Calls v4l2_ctrl_handler_setup() */

 ----------------------------------------------------------------------- */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/* Texas Instruments Triple 8-/10-BIT 165-/110-MSPS Video and Graphics

 * Digitizer with Horizontal PLL registers

 *

 * Copyright (C) 2009 Texas Instruments Inc

 * Author: Santiago Nunez-Corrales <santiago.nunez@ridgerun.com>

 *

 * This code is partially based upon the TVP5150 driver

 * written by Mauro Carvalho Chehab <mchehab@kernel.org>,

 * the TVP514x driver written by Vaibhav Hiremath <hvaibhav@ti.com>

 * and the TVP7002 driver in the TI LSP 2.10.00.14. Revisions by

 * Muralidharan Karicheri and Snehaprabha Narnakaje (TI).

 I2C retry attempts */

 End of registers */

 Read write definition for registers */

 Interlaced vs progressive mask and shift */

 Shift for CPL and LPF registers */

 Debug functions */

 Structure for register values */

/*

 * Register default values (according to tvp7002 datasheet)

 * In the case of read-only registers, the value (0xff) is

 * never written. R/W functionality is controlled by the

 * writable bit in the register struct definition.

 PWR_CTL is controlled only by the probe and reset functions */

 This signals end of register values */

 Register parameters for 480P */

 Register parameters for 576P */

 Register parameters for 1080I60 */

 Register parameters for 1080P60 */

 Register parameters for 1080I50 */

 Register parameters for 720P60 */

 Register parameters for 720P50 */

 Timings definition for handling device operation */

 Struct list for digital video timings */

 Device definition */

/*

 * to_tvp7002 - Obtain device handler TVP7002

 * @sd: ptr to v4l2_subdev struct

 *

 * Returns device handler tvp7002.

/*

 * tvp7002_read - Read a value from a register in an TVP7002

 * @sd: ptr to v4l2_subdev struct

 * @addr: TVP7002 register address

 * @dst: pointer to 8-bit destination

 *

 * Returns value read if successful, or non-zero (-1) otherwise.

/*

 * tvp7002_read_err() - Read a register value with error code

 * @sd: pointer to standard V4L2 sub-device structure

 * @reg: destination register

 * @val: value to be read

 * @err: pointer to error value

 *

 * Read a value in a register and save error value in pointer.

 * Also update the register table if successful

/*

 * tvp7002_write() - Write a value to a register in TVP7002

 * @sd: ptr to v4l2_subdev struct

 * @addr: TVP7002 register address

 * @value: value to be written to the register

 *

 * Write a value to a register in an TVP7002 decoder device.

 * Returns zero if successful, or non-zero otherwise.

/*

 * tvp7002_write_err() - Write a register value with error code

 * @sd: pointer to standard V4L2 sub-device structure

 * @reg: destination register

 * @val: value to be written

 * @err: pointer to error value

 *

 * Write a value in a register and save error value in pointer.

 * Also update the register table if successful

/*

 * tvp7002_write_inittab() - Write initialization values

 * @sd: ptr to v4l2_subdev struct

 * @regs: ptr to i2c_reg_value struct

 *

 * Write initialization values.

 * Returns zero or -EINVAL if read operation fails.

 Initialize the first (defined) registers */

/*

 * tvp7002_s_ctrl() - Set a control

 * @ctrl: ptr to v4l2_ctrl struct

 *

 * Set a control in TVP7002 decoder device.

 * Returns zero when successful or -EINVAL if register access fails.

/*

 * tvp7002_query_dv() - query DV timings

 * @sd: pointer to standard V4L2 sub-device structure

 * @index: index into the tvp7002_timings array

 *

 * Returns the current DV timings detected by TVP7002. If no active input is

 * detected, returns -EINVAL

 Return invalid index if no active input is detected */

 Read standards from device registers */

 Get lines per frame, clocks per line and interlaced/progresive */

 Do checking of video modes */

 Update lines per frame and clocks per line info */

/*

 * tvp7002_g_register() - Get the value of a register

 * @sd: ptr to v4l2_subdev struct

 * @reg: ptr to v4l2_dbg_register struct

 *

 * Get the value of a TVP7002 decoder device register.

 * Returns zero when successful, -EINVAL if register read fails or

 * access to I2C client fails.

/*

 * tvp7002_s_register() - set a control

 * @sd: ptr to v4l2_subdev struct

 * @reg: ptr to v4l2_dbg_register struct

 *

 * Get the value of a TVP7002 decoder device register.

 * Returns zero when successful, -EINVAL if register read fails.

/*

 * tvp7002_s_stream() - V4L2 decoder i/f handler for s_stream

 * @sd: pointer to standard V4L2 sub-device structure

 * @enable: streaming enable or disable

 *

 * Sets streaming to enable or disable, if possible.

 low impedance: on, high impedance: off */

/*

 * tvp7002_log_status() - Print information about register settings

 * @sd: ptr to v4l2_subdev struct

 *

 * Log register values of a TVP7002 decoder device.

 * Returns zero or -EINVAL if read operation fails.

 Find my current timings */

 Print the current value of the gain control */

 Check requested format index is within range */

/*

 * tvp7002_enum_mbus_code() - Enum supported digital video format on pad

 * @sd: pointer to standard V4L2 sub-device structure

 * @cfg: pad configuration

 * @code: pointer to subdev enum mbus code struct

 *

 * Enumerate supported digital video formats for pad.

 Check requested format index is within range */

/*

 * tvp7002_get_pad_format() - get video format on pad

 * @sd: pointer to standard V4L2 sub-device structure

 * @cfg: pad configuration

 * @fmt: pointer to subdev format struct

 *

 * get video format for pad.

/*

 * tvp7002_set_pad_format() - set video format on pad

 * @sd: pointer to standard V4L2 sub-device structure

 * @cfg: pad configuration

 * @fmt: pointer to subdev format struct

 *

 * set video format for pad.

 V4L2 core operation handlers */

 Specific video subsystem operation handlers */

 media pad related operation handlers */

 V4L2 top level operation handlers */

/*

 * tvp7002_probe - Probe a TVP7002 device

 * @c: ptr to i2c_client struct

 * @id: ptr to i2c_device_id struct

 *

 * Initialize the TVP7002 device

 * Returns zero when successful, -EINVAL if register read fails or

 * -EIO if i2c access is not available.

 Check if the adapter supports the needed features */

 Tell v4l2 the device is ready */

 Get revision number */

 Initializes TVP7002 to its default values */

 Set polarity information after registers have been set */

 Set registers according to default video mode */

/*

 * tvp7002_remove - Remove TVP7002 device support

 * @c: ptr to i2c_client struct

 *

 * Reset the TVP7002 device

 * Returns zero.

 I2C Device ID table */

 sentinel */ },

 I2C driver data */

 SPDX-License-Identifier: GPL-2.0+

/*

 * IMI RDACM20 GMSL Camera Driver

 *

 * Copyright (C) 2017-2020 Jacopo Mondi

 * Copyright (C) 2017-2020 Kieran Bingham

 * Copyright (C) 2017-2019 Laurent Pinchart

 * Copyright (C) 2017-2019 Niklas Söderlund

 * Copyright (C) 2016 Renesas Electronics Corporation

 * Copyright (C) 2015 Cogent Embedded, Inc.

/*

 * The camera is made of an Omnivision OV10635 sensor connected to a Maxim

 * MAX9271 GMSL serializer.

 VTS = PCLK / FPS / HTS / 2 (= 88MHz / 1572 / 30 / 2) */

 FPS = 29,9998 */

/*

 * As the drivers supports a single MEDIA_BUS_FMT_UYVY8_2X8 format we

 * can harcode the pixel rate.

 *

 * PCLK is fed through the system clock, programmed @88MHz.

 * MEDIA_BUS_FMT_UYVY8_2X8 format = 2 samples per pixel.

 *

 * Pixelrate = PCLK / 2

 * FPS = (OV10635_VTS * OV10635_HTS) / PixelRate

 *     = 29,9998

 fifo_line_length = 2*hts */

 fifo_hsync_start = 2*(hts - xres) */

 BT601: 0x08 is also acceptable as HS/VS mode */

 8 bits */

 Swap data bits order [9:0] -> [0:9] */

 PCLK falling edge */

 enable FSIN (FRAMESYNC input) functionality */

 Serial link disabled during config as it needs a valid pixel clock. */

	/*

	 *  Ensure that we have a good link configuration before attempting to

	 *  identify the device.

	/*

	 * Hold OV10635 in reset during max9271 configuration. The reset signal

	 * has to be asserted for at least 200 microseconds.

	/*

	 * Release ov10635 from reset and initialize it. The image sensor

	 * requires at least 2048 XVCLK cycles (85 micro-seconds at 24MHz)

	 * before being available. Stay safe and wait up to 500 micro-seconds.

 Change the sensor I2C address. */

 Program the 0V10635 initial configuration. */

	/*

	 * Set reverse channel high threshold to increase noise immunity.

	 *

	 * This should be compensated by increasing the reverse channel

	 * amplitude on the remote deserializer side.

	 *

	 * TODO Inspect the embedded MCU programming sequence to make sure

	 * there are no conflicts with the configuration applied here.

	 *

	 * TODO Clarify the embedded MCU startup delay to avoid write

	 * collisions on the I2C bus.

 Create the dummy I2C client for the sensor. */

 Initialize the hardware. */

 Initialize and register the subdevice. */

 make sure stream off during shutdown (reset/reboot) */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Maxim MAX9286 GMSL Deserializer Driver

 *

 * Copyright (C) 2017-2019 Jacopo Mondi

 * Copyright (C) 2017-2019 Kieran Bingham

 * Copyright (C) 2017-2019 Laurent Pinchart

 * Copyright (C) 2017-2019 Niklas Söderlund

 * Copyright (C) 2016 Renesas Electronics Corporation

 * Copyright (C) 2015 Cogent Embedded, Inc.

 Register 0x00 */

 Register 0x01 */

 Register 0x0a */

 Register 0x0c */

 Register 0x0f */

 Register 0x12 */

 Register 0x15 */

 Register 0x1b */

 Register 0x27 */

 Register 0x31 */

 Register 0x34 */

 Register 0x3b */

 in mV */

 Register 0x3f */

 Register 0x49 */

 Register 0x69 */

/*

 * The sink and source pads are created to match the OF graph port numbers so

 * that their indexes can be used interchangeably.

 The initial reverse control channel amplitude. */

 Protects controls and fmt structures */

/* -----------------------------------------------------------------------------

 * I2C IO

/* -----------------------------------------------------------------------------

 * I2C Multiplexer

	/*

	 * We must sleep after any change to the forward or reverse channel

	 * configuration.

 Open all channels on the MAX9286 */

	/*

	 * Ensure that both the forward and reverse channel are disabled on the

	 * mux, and that the channel ID is invalidated to ensure we reconfigure

	 * on the next max9286_i2c_mux_select() call.

 Channel select is disabled when configured in the opened state. */

 Reverse channel transmission time: default to 1. */

	/*

	 * Reverse channel setup.

	 *

	 * - Enable custom reverse channel configuration (through register 0x3f)

	 *   and set the first pulse length to 35 clock cycles.

	 * - Adjust reverse channel amplitude: values > 130 are programmed

	 *   using the additional +100mV REV_AMP_X boost flag

 It is not possible to express values (100 < x < 130) */

/*

 * max9286_check_video_links() - Make sure video links are detected and locked

 *

 * Performs safety checks on video link status. Make sure they are detected

 * and all enabled links are locked.

 *

 * Returns 0 for success, -EIO for errors.

	/*

	 * Make sure valid video links are detected.

	 * The delay is not characterized in de-serializer manual, wait up

	 * to 5 ms.

 Make sure all enabled links are locked (4ms max). */

/*

 * max9286_check_config_link() - Detect and wait for configuration links

 *

 * Determine if the configuration channel is up and settled for a link.

 *

 * Returns 0 for success, -EIO for errors.

	/*

	 * Make sure requested configuration links are detected.

	 * The delay is not characterized in the chip manual: wait up

	 * to 5 milliseconds.

/* -----------------------------------------------------------------------------

 * V4L2 Subdev

 Pixel rate is mandatory to be reported by sources. */

 All source must report the same pixel rate. */

	/*

	 * The CSI-2 transmitter pixel rate is the single source rate multiplied

	 * by the number of available sources.

	/*

	 * As we register a subdev notifiers we won't get a .complete() callback

	 * here, so we have to use bound_sources to identify when all remote

	 * serializers have probed.

	/*

	 * All enabled sources have probed and enabled their reverse control

	 * channels:

	 *

	 * - Increase the reverse channel amplitude to compensate for the

	 *   remote ends high threshold

	 * - Verify all configuration links are properly detected

	 * - Disable auto-ack as communication on the control channel are now

	 *   stable.

		/*

		 * The frame sync between cameras is transmitted across the

		 * reverse channel as GPIO. We must open all channels while

		 * streaming to allow this synchronisation signal to be shared.

 Start all cameras. */

		/*

		 * Wait until frame synchronization is locked.

		 *

		 * Manual says frame sync locking should take ~6 VTS.

		 * From practical experience at least 8 are required. Give

		 * 12 complete frames time (~400ms at 30 fps) to achieve frame

		 * locking before returning error.

 Invalid cross-device link */

		/*

		 * Enable CSI output, VC set according to link number.

		 * Bit 7 must be set (chip manual says it's 0 and reserved).

 Stop all cameras. */

 Refuse non YUV422 formats as we hardcode DT to 8 bit YUV422 */

	/*

	 * Multiplexed Stream Support: Support link validation by returning the

	 * format of the first bound link. All links must have the same format,

	 * as we do not support mixing and matching of cameras connected to the

	 * max9286.

 Register v4l2 async notifiers for connected Camera subdevices */

 Configure V4L2 for the MAX9286 itself */

/* -----------------------------------------------------------------------------

 * Probe/Remove

	/*

	 * Link ordering values for all enabled links combinations. Orders must

	 * be assigned sequentially from 0 to the number of enabled links

	 * without leaving any hole for disabled links. We thus assign orders to

	 * enabled links first, and use the remaining order values for disabled

	 * links are all links must have a different order value;

 xxxx */

 xxx0 */

 xx0x */

 xx10 */

 x0xx */

 x1x0 */

 x10x */

 x210 */

 0xxx */

 1xx0 */

 1x0x */

 2x10 */

 10xx */

 21x0 */

 210x */

 3210 */

	/*

	 * Set the I2C bus speed.

	 *

	 * Enable I2C Local Acknowledge during the probe sequences of the camera

	 * only. This should be disabled after the mux is initialised.

	/*

	 * Enable GMSL links, mask unused ones and autodetect link

	 * used as CSI clock source.

	/*

	 * Video format setup:

	 * Disable CSI output, VC is set according to Link number.

 Enable CSI-2 Lane D0-D3 only, DBL mode, YUV422 8-bit. */

 Automatic: FRAMESYNC taken from the slowest Link. */

 Enable HS/VS encoding, use D14/15 for HS/VS, invert VS. */

	/*

	 * The overlap window seems to provide additional validation by tracking

	 * the delay between vsync and frame sync, generating an error if the

	 * delay is bigger than the programmed window, though it's not yet clear

	 * what value should be set.

	 *

	 * As it's an optional value and can be disabled, we do so by setting

	 * a 0 overlap value.

	/*

	 * Wait for 2ms to allow the link to resynchronize after the

	 * configuration change.

 Configure the GPIO */

 GPIO values default to high */

 Enable the bus power. */

	/*

	 * Register all V4L2 interactions for the MAX9286 and notifiers for

	 * any subdevices connected.

 Leave the mux channels disabled until they are selected. */

 Balance the of_node_put() performed by of_find_node_by_name(). */

 Identify which i2c-mux channels are enabled */

 Parse the endpoints */

 For the source endpoint just parse the bus configuration. */

 Skip if the corresponding GMSL link is unavailable. */

	/*

	 * Parse the initial value of the reverse channel amplitude from

	 * the firmware interface and convert it to millivolts.

	 *

	 * Default it to 170mV for backward compatibility with DTBs that do not

	 * provide the property.

 Wait at least 4ms before the I2C lines latch to the address */

	/*

	 * The MAX9286 starts by default with all ports enabled, we disable all

	 * ports early to ensure that all channels are disabled if we error out

	 * and keep the bus consistent.

	/*

	 * The MAX9286 initialises with auto-acknowledge enabled by default.

	 * This can be invasive to other transactions on the same bus, so

	 * disable it early. It will be enabled only as and when needed.

/*

 * adv7393 - ADV7393 Video Encoder Driver

 *

 * The encoder hardware does not support SECAM.

 *

 * Copyright (C) 2010-2012 ADVANSEE - http://www.advansee.com/

 * Benoît Thébaudeau <benoit.thebaudeau@advansee.com>

 *

 * Based on ADV7343 driver,

 *

 * Copyright (C) 2009 Texas Instruments Incorporated - http://www.ti.com/

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed .as is. WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 *			    2^32

 * FSC(reg) =  FSC (HZ) * --------

 *			  27000000

 FSC(Hz) = 4,433,618.75 Hz */

 FSC(Hz) = 3,579,545.45 Hz */

 FSC(Hz) = 3,575,611.00 Hz */

 FSC(Hz) = 3,582,056.00 Hz */

 FSC(Hz) = 4,433,618.75 Hz */

 FSC(Hz) = 4,433,618.75 Hz */

 FSC(Hz) = 4,433,618.75 Hz */

 Set the standard */

 Configure the input mode register */

 Program the sub carrier frequency registers */

 Pedestal settings */

 Enable Appropriate DAC */

 Enable YUV output */

 configure SD DAC Output 1 bit */

 configure ED/HD Color DAC Swap bit to zero */

 Configure for default video standard */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 * keyboard input driver for i2c IR remote controls

 *

 * Copyright (c) 2000-2003 Gerd Knorr <kraxel@bytesex.org>

 * modified for PixelView (BT878P+W/FM) by

 *      Michal Kochanowicz <mkochano@pld.org.pl>

 *      Christoph Bartelmus <lirc@bartelmus.de>

 * modified for KNC ONE TV Station/Anubis Typhoon TView Tuner by

 *      Ulrich Mueller <ulrich.mueller42@web.de>

 * modified for em2820 based USB TV tuners by

 *      Markus Rechberger <mrechberger@gmail.com>

 * modified for DViCO Fusion HDTV 5 RT GOLD by

 *      Chaogui Zhang <czhang1974@gmail.com>

 * modified for MSI TV@nywhere Plus by

 *      Henry Wong <henry@stuffedcow.net>

 *      Mark Schultz <n9xmj@yahoo.com>

 *      Brian Rogers <brian_rogers@comcast.net>

 * modified for AVerMedia Cardbus by

 *      Oldrich Jedlicka <oldium.pro@seznam.cz>

 * Zilog Transmitter portions/ideas were derived from GPLv2+ sources:

 *  - drivers/char/pctv_zilogir.[ch] from Hauppauge Broadway product

 *	Copyright 2011 Hauppauge Computer works

 *  - drivers/staging/media/lirc/lirc_zilog.c

 *	Copyright (c) 2000 Gerd Knorr <kraxel@goldbach.in-berlin.de>

 *	Michal Kochanowicz <mkochano@pld.org.pl>

 *	Christoph Bartelmus <lirc@bartelmus.de>

 *	Ulrich Mueller <ulrich.mueller42@web.de>

 *	Stefan Jahn <stefan@lkcc.org>

 *	Jerome Brock <jbrock@users.sourceforge.net>

 *	Thomas Reitmayr (treitmayr@yahoo.com)

 *	Mark Weaver <mark@npsl.co.uk>

 *	Jarod Wilson <jarod@redhat.com>

 *	Copyright (C) 2011 Andy Walls <awalls@md.metrocast.net>

 poll IR chip */

 split rc5 data block ... */

		/* rc5 has two start bits

		 * the first bit must be one

		 * the second bit defines the command range:

		 * 1 = 0-63, 0 = 64 - 127

 no key pressed */

 filter out invalid key presses */

	/*

	 * This is the same apparent "are you ready?" poll command observed

	 * watching Windows driver traffic and implemented in lirc_zilog. With

	 * this added, we get far saner remote behavior with z8 chips on usb

	 * connected devices, even with the default polling interval of 100ms.

 poll IR chip */

 poll IR chip */

 no key pressed or signal from other ir remote */

 poll IR chip */

	/* it seems that 0xFE indicates that a button is still hold

	   down, while 0xff indicates that no button is hold

 keep old data */

 AVerMedia EM78P153 */

 ----------------------------------------------------------------------- */

	/*

	 * If the transmit code is holding the lock, skip polling for

	 * IR, we'll get it to it next time round

 Zilog Transmit Interface */

/*

 * As you can see here, very few different lengths of pulse and space

 * can be encoded. This means that the hardware does not work well with

 * recorded IR. It's best to work with generated IR, like from ir-ctl or

 * the in-kernel encoders.

 not aligned */

 not aligned */

/*

 * If the last slot for pulse is the same as the current slot for pulse,

 * then use slot no 7.

/*

 * When looking for repeats, we don't care about the trailing space. This

 * is set to the shortest possible anyway.

		/*

		 * Lengths more than 142220us cannot be encoded; also

		 * this checks for multiply overflow

 We have a pulse and space */

 We have to encode the trailing pulse. Find the shortest space */

	/*

	 * Are the last N codes (so pulse + space) repeating 3 times?

	 * if so we can shorten the codes list and use code 0xc0 to repeat

	 * them.

 first copy any leading non-repeating */

	/*

	 * This bit NAKs until the device is ready, so we retry it

	 * sleeping a bit each time.  This seems to be what the windows

	 * driver does, approximately.

	 * Try for up to 1s.

 Oh good, it worked */

 RM-KV remote, seems to be same as RM-K6 */

 Let the caller override settings */

 The bridge driver provided us its own function */

		/*

		 * If platform_data doesn't specify rc_dev, initialize it

		 * internally

 Make sure we are all setup before going on */

	/*

	 * Initialize input_dev fields

	 * It doesn't make sense to allow overriding them via platform_data

	/*

	 * Initialize the other fields of rc_dev

 Only frees rc if it were allocated internally */

 Generic entry for any IR receiver */

 IR device specific entries should be added here */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OKI Semiconductor ML86V7667 video decoder driver

 *

 * Author: Vladimir Barinov <source@cogentembedded.com>

 * Copyright (C) 2013 Cogent Embedded, Inc.

 * Copyright (C) 2013 Renesas Solutions Corp.

 Subaddresses */

 Mode Register A */

 Mode Register C */

 Luminance Control */

 Contrast level control */

 Sync separation level */

 Chrominance Control A */

 ACC Loop filter & Chrominance control */

 ACC Reference level control */

 Hue control */

 ADC Register 2 */

 PLL Register 1 */

 STATUS Register */

 Mode Register A register bits */

 Mode Register C register bits */

 Luminance Control register bits */

 Contrast level control register bits */

 Sync separation level register bits */

 Chrominance Control A register bits */

 ACC Loop filter & Chrominance control register bits */

 ACC Reference level control register bits */

 ADC Register 2 register bits */

 PLL Register 1 register bits */

 STATUS Register register bits */

 The top field is always transferred first by the chip */

 PAL/NTSC ITU-R BT.601 input mode */

 BT.656-4 output mode, register mode */

 PLL circuit fixed clock, 32MHz */

 ADC2 clamping voltage maximum  */

 enable luminance function */

 enable contrast function */

	/*

	 * PAL/NTSC autodetection is enabled after reset,

	 * set the autodetected std in manual std mode and

	 * disable autodetection

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * tlv320aic23b - driver version 0.0.1

 *

 * Copyright (C) 2006 Scott Alfter <salfter@ssai.us>

 *

 * Based on wm8775 driver

 *

 * Copyright (C) 2004 Ulf Eklund <ivtv at eklund.to>

 * Copyright (C) 2005 Hans Verkuil <hverkuil@xs4all.nl>

 ----------------------------------------------------------------------- */

 set sample rate to 32 kHz */

 set sample rate to 44.1 kHz */

 set sample rate to 48 kHz */

 mute both channels */

 set gain on both channels to +3.0 dB */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 i2c implementation */

/*

 * Generic i2c probe

 * concerning the addresses: i2c wants 7 bit (without the r/w bit), so '>>1'

 Check if the adapter supports the needed features */

 Initialize tlv320aic23b */

 RESET */

 turn off DAC & mic input */

 left-justified, 24-bit, master mode */

 set gain on both channels to +3.0 dB */

 set sample rate to 48 kHz */

 activate digital interface */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Sony imx412 Camera Sensor Driver

 *

 * Copyright (C) 2021 Intel Corporation

 Streaming Mode */

 Lines per frame */

 Chip ID */

 Exposure control */

 Analog gain control */

 Group hold register */

 Input clock rate */

 CSI2 HW configuration */

/**

 * struct imx412_reg - imx412 sensor register

 * @address: Register address

 * @val: Register value

/**

 * struct imx412_reg_list - imx412 sensor register list

 * @num_of_regs: Number of registers in the list

 * @regs: Pointer to register list

/**

 * struct imx412_mode - imx412 sensor mode structure

 * @width: Frame width

 * @height: Frame height

 * @code: Format code

 * @hblank: Horizontal blanking in lines

 * @vblank: Vertical blanking in lines

 * @vblank_min: Minimum vertical blanking in lines

 * @vblank_max: Maximum vertical blanking in lines

 * @pclk: Sensor pixel clock

 * @link_freq_idx: Link frequency index

 * @reg_list: Register list for sensor mode

/**

 * struct imx412 - imx412 sensor device structure

 * @dev: Pointer to generic device

 * @client: Pointer to i2c client

 * @sd: V4L2 sub-device

 * @pad: Media pad. Only one pad supported

 * @reset_gpio: Sensor reset gpio

 * @inclk: Sensor input clock

 * @ctrl_handler: V4L2 control handler

 * @link_freq_ctrl: Pointer to link frequency control

 * @pclk_ctrl: Pointer to pixel clock control

 * @hblank_ctrl: Pointer to horizontal blanking control

 * @vblank_ctrl: Pointer to vertical blanking control

 * @exp_ctrl: Pointer to exposure control

 * @again_ctrl: Pointer to analog gain control

 * @vblank: Vertical blanking in lines

 * @cur_mode: Pointer to current selected sensor mode

 * @mutex: Mutex for serializing sensor controls

 * @streaming: Flag indicating streaming state

 Sensor mode registers */

 Supported sensor mode configurations */

/**

 * to_imx412() - imx412 V4L2 sub-device to imx412 device.

 * @subdev: pointer to imx412 V4L2 sub-device

 *

 * Return: pointer to imx412 device

/**

 * imx412_read_reg() - Read registers.

 * @imx412: pointer to imx412 device

 * @reg: register address

 * @len: length of bytes to read. Max supported bytes is 4

 * @val: pointer to register value to be filled.

 *

 * Return: 0 if successful, error code otherwise.

 Write register address */

 Read data from register */

/**

 * imx412_write_reg() - Write register

 * @imx412: pointer to imx412 device

 * @reg: register address

 * @len: length of bytes. Max supported bytes is 4

 * @val: register value

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_write_regs() - Write a list of registers

 * @imx412: pointer to imx412 device

 * @regs: list of registers to be written

 * @len: length of registers array

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_update_controls() - Update control ranges based on streaming mode

 * @imx412: pointer to imx412 device

 * @mode: pointer to imx412_mode sensor mode

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_update_exp_gain() - Set updated exposure and gain

 * @imx412: pointer to imx412 device

 * @exposure: updated exposure value

 * @gain: updated analog gain value

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_set_ctrl() - Set subdevice control

 * @ctrl: pointer to v4l2_ctrl structure

 *

 * Supported controls:

 * - V4L2_CID_VBLANK

 * - cluster controls:

 *   - V4L2_CID_ANALOGUE_GAIN

 *   - V4L2_CID_EXPOSURE

 *

 * Return: 0 if successful, error code otherwise.

 Set controls only if sensor is in power on state */

 V4l2 subdevice control ops*/

/**

 * imx412_enum_mbus_code() - Enumerate V4L2 sub-device mbus codes

 * @sd: pointer to imx412 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @code: V4L2 sub-device code enumeration need to be filled

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_enum_frame_size() - Enumerate V4L2 sub-device frame sizes

 * @sd: pointer to imx412 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @fsize: V4L2 sub-device size enumeration need to be filled

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_fill_pad_format() - Fill subdevice pad format

 *                            from selected sensor mode

 * @imx412: pointer to imx412 device

 * @mode: pointer to imx412_mode sensor mode

 * @fmt: V4L2 sub-device format need to be filled

/**

 * imx412_get_pad_format() - Get subdevice pad format

 * @sd: pointer to imx412 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @fmt: V4L2 sub-device format need to be set

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_set_pad_format() - Set subdevice pad format

 * @sd: pointer to imx412 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @fmt: V4L2 sub-device format need to be set

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_init_pad_cfg() - Initialize sub-device pad configuration

 * @sd: pointer to imx412 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_start_streaming() - Start sensor stream

 * @imx412: pointer to imx412 device

 *

 * Return: 0 if successful, error code otherwise.

 Write sensor mode registers */

 Setup handler will write actual exposure and gain */

 Delay is required before streaming*/

 Start streaming */

/**

 * imx412_stop_streaming() - Stop sensor stream

 * @imx412: pointer to imx412 device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_set_stream() - Enable sensor streaming

 * @sd: pointer to imx412 subdevice

 * @enable: set to enable sensor streaming

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_detect() - Detect imx412 sensor

 * @imx412: pointer to imx412 device

 *

 * Return: 0 if successful, -EIO if sensor id does not match

/**

 * imx412_parse_hw_config() - Parse HW configuration and check if supported

 * @imx412: pointer to imx412 device

 *

 * Return: 0 if successful, error code otherwise.

 Request optional reset pin */

 Get sensor input clock */

 V4l2 subdevice ops */

/**

 * imx412_power_on() - Sensor power on sequence

 * @dev: pointer to i2c device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_power_off() - Sensor power off sequence

 * @dev: pointer to i2c device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx412_init_controls() - Initialize sensor subdevice controls

 * @imx412: pointer to imx412 device

 *

 * Return: 0 if successful, error code otherwise.

 Serialize controls with sensor device */

 Initialize exposure and gain */

 Read only controls */

/**

 * imx412_probe() - I2C client device binding

 * @client: pointer to i2c client device

 *

 * Return: 0 if successful, error code otherwise.

 Initialize subdev */

 Check module identity */

 Set default mode to max resolution */

 Initialize subdev */

 Initialize source pad */

/**

 * imx412_remove() - I2C client device unbinding

 * @client: pointer to I2C client device

 *

 * Return: 0 if successful, error code otherwise.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2017-2020 Jacopo Mondi

 * Copyright (C) 2017-2020 Kieran Bingham

 * Copyright (C) 2017-2020 Laurent Pinchart

 * Copyright (C) 2017-2020 Niklas Söderlund

 * Copyright (C) 2016 Renesas Electronics Corporation

 * Copyright (C) 2015 Cogent Embedded, Inc.

 *

 * This file exports functions to control the Maxim MAX9271 GMSL serializer

 * chip. This is not a self-contained driver, as MAX9271 is usually embedded in

 * camera modules with at least one image sensor and optional additional

 * components, such as uController units or ISPs/DSPs.

 *

 * Drivers for the camera modules (i.e. rdacm20/21) are expected to use

 * functions exported from this library driver to maximize code re-use.

/*

 * max9271_pclk_detect() - Detect valid pixel clock from image sensor

 *

 * Wait up to 10ms for a valid pixel clock.

 *

 * Returns 0 for success, < 0 for pixel clock not properly detected

	/*

	 * Use the chip default address as this function has to be called

	 * before any other one.

	/*

	 * The serializer temporarily disables the reverse control channel for

	 * 350µs after starting/stopping the forward serial link, but the

	 * deserializer synchronization time isn't clearly documented.

	 *

	 * According to the serializer datasheet we should wait 3ms, while

	 * according to the deserializer datasheet we should wait 5ms.

	 *

	 * Short delays here appear to show bit-errors in the writes following.

	 * Therefore a conservative delay seems best here.

	/* The delay required after an I2C bus configuration change is not

	 * characterized in the serializer manual. Sleep up to 5msec to

	 * stay safe.

	/*

	 * Enable or disable reverse channel high threshold to increase

	 * immunity to power supply noise.

	/*

	 * Configure the GMSL link:

	 *

	 * - Double input mode, high data rate, 24-bit mode

	 * - Latch input data on PCLKIN rising edge

	 * - Enable HS/VS encoding

	 * - 1-bit parity error detection

	 *

	 * TODO: Make the GMSL link configuration parametric.

	/*

	 * Adjust spread spectrum to +4% and auto-detect pixel clock

	 * and serial link rate.

 BIT(0) reserved: GPO is always enabled. */

 BIT(0) reserved: GPO cannot be disabled */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * cs53l32a (Adaptec AVC-2010 and AVC-2410) i2c ivtv driver.

 * Copyright (C) 2005  Martin Vaughan

 *

 * Audio source switching for Adaptec AVC-2410 added by Trev Jackson

 ----------------------------------------------------------------------- */

	/* There are 2 physical inputs, but the second input can be

	   placed in two modes, the first mode bypasses the PGA (gain),

	   the second goes through the PGA. Hence there are three

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 i2c implementation */

/*

 * Generic i2c probe

 * concerning the addresses: i2c wants 7 bit (without the r/w bit), so '>>1'

 Check if the adapter supports the needed features */

 Set cs53l32a internal register for Adaptec 2010/2410 setup */

 Display results, should be 0x21,0x29,0x30,0x00,0x00,0x00,0x00 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vs6624.c ST VS6624 CMOS image sensor driver

 *

 * Copyright (c) 2011 Analog Devices Inc.

 Enableconstrainedwhitebalance */

 Damper PeakGain Output MSB */

 Damper PeakGain Output LSB */

 Damper Low MSB */

 Damper Low LSB */

 Damper High MSB */

 Damper High LSB */

 Damper Min output MSB */

 Damper Min output LSB */

 Nora fDisable */

 Nora usage */

 Damper Low MSB Changed 0x63 to 0x65 */

 Damper Low LSB */

 Damper High MSB */

 Damper High LSB */

 Damper Min output MSB */

 Damper Min output LSB */

 Disable */

 MAXWeightHigh */

 fpDamperLowThresholdHigh MSB */

 fpDamperLowThresholdHigh LSB */

 fpDamperHighThresholdHigh MSB */

 fpDamperHighThresholdHigh LSB */

 fpMinimumDamperOutputLow MSB */

 fpMinimumDamperOutputLow LSB */

 MAXWeightLow */

 MAXWeightHigh */

 Red A MSB */

 Red A LSB */

 Blue A MSB */

 BLue A LSB */

 RED B MSB */

 RED B LSB */

 Blue B MSB */

 Blue B LSB */

 Max Distance from Locus MSB */

 Max Distance from Locus MSB */

 Enable constrainer */

 default to first format */

 sensor mode is VGA */

 set image format */

 set image size */

 reset to max frame rate */

 Check if the adapter supports the needed features */

 wait 100ms before any further i2c writes are performed */

 set frame rate */

 hook the control handler into the driver */

 initialize the hardware to the default control values */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Sony imx335 Camera Sensor Driver

 *

 * Copyright (C) 2021 Intel Corporation

 Streaming Mode */

 Lines per frame */

 Chip ID */

 Exposure control */

 Analog gain control */

 Group hold register */

 Input clock rate */

 CSI2 HW configuration */

/**

 * struct imx335_reg - imx335 sensor register

 * @address: Register address

 * @val: Register value

/**

 * struct imx335_reg_list - imx335 sensor register list

 * @num_of_regs: Number of registers in the list

 * @regs: Pointer to register list

/**

 * struct imx335_mode - imx335 sensor mode structure

 * @width: Frame width

 * @height: Frame height

 * @code: Format code

 * @hblank: Horizontal blanking in lines

 * @vblank: Vertical blanking in lines

 * @vblank_min: Minimum vertical blanking in lines

 * @vblank_max: Maximum vertical blanking in lines

 * @pclk: Sensor pixel clock

 * @link_freq_idx: Link frequency index

 * @reg_list: Register list for sensor mode

/**

 * struct imx335 - imx335 sensor device structure

 * @dev: Pointer to generic device

 * @client: Pointer to i2c client

 * @sd: V4L2 sub-device

 * @pad: Media pad. Only one pad supported

 * @reset_gpio: Sensor reset gpio

 * @inclk: Sensor input clock

 * @ctrl_handler: V4L2 control handler

 * @link_freq_ctrl: Pointer to link frequency control

 * @pclk_ctrl: Pointer to pixel clock control

 * @hblank_ctrl: Pointer to horizontal blanking control

 * @vblank_ctrl: Pointer to vertical blanking control

 * @exp_ctrl: Pointer to exposure control

 * @again_ctrl: Pointer to analog gain control

 * @vblank: Vertical blanking in lines

 * @cur_mode: Pointer to current selected sensor mode

 * @mutex: Mutex for serializing sensor controls

 * @streaming: Flag indicating streaming state

 Sensor mode registers */

 Supported sensor mode configurations */

/**

 * to_imx335() - imx335 V4L2 sub-device to imx335 device.

 * @subdev: pointer to imx335 V4L2 sub-device

 *

 * Return: pointer to imx335 device

/**

 * imx335_read_reg() - Read registers.

 * @imx335: pointer to imx335 device

 * @reg: register address

 * @len: length of bytes to read. Max supported bytes is 4

 * @val: pointer to register value to be filled.

 *

 * Big endian register addresses with little endian values.

 *

 * Return: 0 if successful, error code otherwise.

 Write register address */

 Read data from register */

/**

 * imx335_write_reg() - Write register

 * @imx335: pointer to imx335 device

 * @reg: register address

 * @len: length of bytes. Max supported bytes is 4

 * @val: register value

 *

 * Big endian register addresses with little endian values.

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_write_regs() - Write a list of registers

 * @imx335: pointer to imx335 device

 * @regs: list of registers to be written

 * @len: length of registers array

 *

 * Return: 0 if successful. error code otherwise.

/**

 * imx335_update_controls() - Update control ranges based on streaming mode

 * @imx335: pointer to imx335 device

 * @mode: pointer to imx335_mode sensor mode

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_update_exp_gain() - Set updated exposure and gain

 * @imx335: pointer to imx335 device

 * @exposure: updated exposure value

 * @gain: updated analog gain value

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_set_ctrl() - Set subdevice control

 * @ctrl: pointer to v4l2_ctrl structure

 *

 * Supported controls:

 * - V4L2_CID_VBLANK

 * - cluster controls:

 *   - V4L2_CID_ANALOGUE_GAIN

 *   - V4L2_CID_EXPOSURE

 *

 * Return: 0 if successful, error code otherwise.

 Set controls only if sensor is in power on state */

 V4l2 subdevice control ops*/

/**

 * imx335_enum_mbus_code() - Enumerate V4L2 sub-device mbus codes

 * @sd: pointer to imx335 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @code: V4L2 sub-device code enumeration need to be filled

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_enum_frame_size() - Enumerate V4L2 sub-device frame sizes

 * @sd: pointer to imx335 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @fsize: V4L2 sub-device size enumeration need to be filled

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_fill_pad_format() - Fill subdevice pad format

 *                            from selected sensor mode

 * @imx335: pointer to imx335 device

 * @mode: pointer to imx335_mode sensor mode

 * @fmt: V4L2 sub-device format need to be filled

/**

 * imx335_get_pad_format() - Get subdevice pad format

 * @sd: pointer to imx335 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @fmt: V4L2 sub-device format need to be set

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_set_pad_format() - Set subdevice pad format

 * @sd: pointer to imx335 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 * @fmt: V4L2 sub-device format need to be set

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_init_pad_cfg() - Initialize sub-device pad configuration

 * @sd: pointer to imx335 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device configuration

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_start_streaming() - Start sensor stream

 * @imx335: pointer to imx335 device

 *

 * Return: 0 if successful, error code otherwise.

 Write sensor mode registers */

 Setup handler will write actual exposure and gain */

 Start streaming */

 Initial regulator stabilization period */

/**

 * imx335_stop_streaming() - Stop sensor stream

 * @imx335: pointer to imx335 device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_set_stream() - Enable sensor streaming

 * @sd: pointer to imx335 subdevice

 * @enable: set to enable sensor streaming

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_detect() - Detect imx335 sensor

 * @imx335: pointer to imx335 device

 *

 * Return: 0 if successful, -EIO if sensor id does not match

/**

 * imx335_parse_hw_config() - Parse HW configuration and check if supported

 * @imx335: pointer to imx335 device

 *

 * Return: 0 if successful, error code otherwise.

 Request optional reset pin */

 Get sensor input clock */

 V4l2 subdevice ops */

/**

 * imx335_power_on() - Sensor power on sequence

 * @dev: pointer to i2c device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_power_off() - Sensor power off sequence

 * @dev: pointer to i2c device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx335_init_controls() - Initialize sensor subdevice controls

 * @imx335: pointer to imx335 device

 *

 * Return: 0 if successful, error code otherwise.

 Serialize controls with sensor device */

 Initialize exposure and gain */

 Read only controls */

/**

 * imx335_probe() - I2C client device binding

 * @client: pointer to i2c client device

 *

 * Return: 0 if successful, error code otherwise.

 Initialize subdev */

 Check module identity */

 Set default mode to max resolution */

 Initialize subdev */

 Initialize source pad */

/**

 * imx335_remove() - I2C client device unbinding

 * @client: pointer to I2C client device

 *

 * Return: 0 if successful, error code otherwise.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Video Capture Driver (Video for Linux 1/2)

 * for the Matrox Marvel G200,G400 and Rainbow Runner-G series

 *

 * This module is an interface to the KS0127 video decoder chip.

 *

 * Copyright (C) 1999  Ryan Drake <stiletto@mediaone.net>

 *

 *****************************************************************************

 *

 * Modified and extended by

 *	Mike Bernson <mike@mlb.org>

 *	Gerard v.d. Horst

 *	Leon van Stuivenberg <l.vanstuivenberg@chello.nl>

 *	Gernot Ziegler <gz@lysator.liu.se>

 *

 * Version History:

 * V1.0 Ryan Drake	   Initial version by Ryan Drake

 * V1.1 Gerard v.d. Horst  Added some debugoutput, reset the video-standard

 Addresses */

 ks0127 control registers */

/****************************************************************************

* mga_dev : represents one ks0127 chip.

 insmod parameter */

 VSE=0, CCIR 601, autodetect standard */

 VALIGN=0, AGC control and input */

 Test options */

 clock & input select, write 1 to PORTA */

 HAV Start Control */

 HAV End Control */

 HS1 Start Control */

 HS1 End Control */

 HS2 Start Control */

 HS2 End Control */

 Manual setting for AGC */

 Extra Bits for HAV and HS1/2 */

 Chroma Demodulation Control */

 port B is input, port A output GPPORT */

 Luma control */

 Contrast Control */

 Brightness Control */

 Chroma control A */

 Chroma control B */

 Chroma Demodulation Control & Status */

 Color Saturation Control*/

 Hue Control */

 Vertical Processing Control A */

 Vertical Processing Control B, luma 1 line delayed */

 Vertical Processing Control C */

 Horizontal Scaling Ratio Low */

 Horizontal Scaling Ratio High */

 Vertical Scaling Ratio Low */

 Vertical Scaling Ratio High */

 16 bit YCbCr 4:2:2 output; I can't make the bt866 like 8 bit /Sam */

 Output Control B */

 VBI Decoder Control; 4bit fmt: avoid Y overflow */

 Read Only register */

 Read Only register */

 VBI data decoding options */

 VBI data decoding options */

 VBI data decoding options */

 VBI data decoding options */

 Teletext frame alignment pattern */

 test register, shouldn't be written */

 UV Offset Adjustment High */

 UV Offset Adjustment Low */

 U Component Gain Adjustment */

 V Component Gain Adjustment */

 VAV Begin */

 VAV End */

 Chroma Tracking Control */

 Timing Signal Polarity Control */

 Reference Code Insertion Control */

 Invalid Y Code */

 Invalid U Code */

 Invalid V Code */

 Unused Y Code */

 Unused U Code */

 Unused V Code */

 reserved */

 reserved */

 User Defined SHS1 A */

 User Defined SHS1 B, ALT656=1 on 0127B */

 User Defined SHS1 C */

 Command Register E */

 VS Delay Control */

 Command Register F, update -immediately- */

 (there might come no vsync)*/

/* We need to manually read because of a bug in the KS0127 chip.

 *

 * An explanation from kayork@mail.utexas.edu:

 *

 * During I2C reads, the KS0127 only samples for a stop condition

 * during the place where the acknowledge bit should be. Any standard

 * I2C implementation (correctly) throws in another clock transition

 * at the 9th bit, and the KS0127 will not recognize the stop condition

 * and will continue to clock out data.

 *

 * So we have to do the read ourself.  Big deal.

 *	   workaround in i2c-algo-bit

 generic bit-twiddling */

/****************************************************************************

* ks0127 private api

 initialize all registers to known values */

 (except STAT, 0x21, 0x22, TEST and 0x38,0x39) */

 autodetect 50/60 Hz */

 VSE=0 */

 set input line */

 non-freerunning mode */

 analog input */

 enable chroma demodulation */

 chroma trap, HYBWR=1 */

 scaler fullbw, luma comb off */

 manual chroma comb .25 .5 .25 */

 chroma path delay */

 autodetect 50/60 Hz */

 VSE=0 */

 set input line */

 non-freerunning mode */

 analog input */

 enable chroma demodulation */

 disable luma comb */

 force 60 Hz */

 force 50 Hz */

 VSE=1 */

 set input line and VALIGN */

 freerunning mode, */

 TSTGEN = 1 TSTGFR=11 TSTGPH=0 TSTGPK=0  VMEM=1*/

 digital input, SYNDIR = 0 INPSL=01 CLKDIR=0 EAV=0 */

 disable chroma demodulation */

 HYPK =01 CTRAP = 0 HYBWR=0 PED=1 RGBH=1 UNIT=1 */

 scaler fullbw, luma comb off */

 spec: 34 */

 spec: 229 (e5) */

UOFF:0x30, VOFF:0x30, TSTCGN=1 */

 hack: CDMLPF sometimes spontaneously switches on; */

 force back off */

 Set to automatic SECAM/Fsc mode */

 set to secam autodetection */

 did it autodetect? */

 force to secam mode */

 All output pins on */

 Obey the OEN pin */

 Video output pins off */

 Ignore the OEN pin */

 NOVID not set */

 CLOCK set */

 PALDET set */

 PALDET set */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 power up */

 reset the device */

 tristate */

 power down */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * saa7110 - Philips SAA7110(A) video decoder driver

 *

 * Copyright (C) 1998 Pauline Middelink <middelin@polyware.nl>

 *

 * Copyright (C) 1999 Wolfgang Scherr <scherr@net4you.net>

 * Copyright (C) 2000 Serguei Miridonov <mirsev@cicese.mx>

 *    - some corrections for Pinnacle Systems Inc. DC10plus card.

 *

 * Changes by Ronald Bultje <rbultje@ronald.bitfreak.net>

 *    - moved over to linux>=2.4.x i2c protocol (1/1/2003)

 6 CVBS, 3 SVHS */

 1 YUV */

 ----------------------------------------------------------------------- */

 I2C support functions						   */

 ----------------------------------------------------------------------- */

 first register to write to */

 Sanity check */

	/* the saa7110 has an autoincrement function, use it if

 Cache the written data */

 ----------------------------------------------------------------------- */

 SAA7110 functions							   */

 ----------------------------------------------------------------------- */

0x13*/

0xC0*/

 mode 0 */

 mode 1 */

 mode 2 */

 mode 3 */

 mode 4 */

 mode 5 */

 mode 6 */

 mode 7 */

 mode 8 */

 Luminance control    */

 Analog Control #1    */

 Analog Control #2    */

 Mixer Control #1     */

 Mixer Control #2     */

 ADCs gain control    */

 Mixer Control #3     */

 Analog Control #2    */

 0x08 */ 0xF8, 0xF8, 0x60, 0x60, 0x00, 0x86, 0x18, 0x90,

 0x10 */ 0x00, 0x59, 0x40, 0x46, 0x42, 0x1A, 0xFF, 0xDA,

 0x18 */ 0xF2, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

 0x20 */ 0xD9, 0x16, 0x40, 0x41, 0x80, 0x41, 0x80, 0x4F,

 0x28 */ 0xFE, 0x01, 0xCF, 0x0F, 0x03, 0x01, 0x03, 0x0C,

 0x30 */ 0x44, 0x71, 0x02, 0x8C, 0x02

 mode changed, start automatic detection */

saa7110_write(sd,0x2E,0x81);*/

saa7110_write(sd,0x2E,0x9A);*/

saa7110_write(sd,0x06,0x03);*/

 60Hz */

saa7110_write(sd,0x2E,0x81);*/

 50Hz -> PAL/SECAM */

saa7110_write(sd,0x2E,0x9A);*/

saa7110_write(sd, 0x06, 0x03);*/

saa7110_write(sd, 0x2E, 0x81);*/

saa7110_write(sd, 0x2E, 0x9A);*/

saa7110_write(sd, 0x2E, 0x9A);*/

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 Check if the adapter supports the needed features */

mdelay(150);*/

saa7110_write(sd, 0x2E, 0x9A);*/

saa7110_selmux(sd,0);*/

determine_norm(sd);*/

 setup and implicit mode 0 select has been performed */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019 Intel Corporation.

 vertical-timings from sensor */

 horizontal-timings from sensor */

 Exposure controls from sensor */

 Analog gain controls from sensor */

 Digital gain controls from sensor */

 Test Pattern Control */

 Flip Mirror Controls from sensor */

 Frame width in pixels */

 Frame height in pixels */

 Horizontal timining size */

 Default vertical timining size */

 Min vertical timining size */

 Link frequency needed for this resolution */

 Sensor register settings for this resolution */

 V4L2 Controls */

 Current mode */

 To serialize asynchronus callbacks */

 Streaming on/off */

/*

 * OV5675 supports keeping the pixel order by mirror and flip function

 * The Bayer order isn't affected by the flip controls

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

 V4L2 controls values will be applied only when power is already up */

		/* 4 least significant bits of expsoure are fractional part

		 * val = val << 4

		 * for ov5675, the unit of exposure is differnt from other

		 * OmniVision sensors, its exposure value is twice of the

		 * register value, the exposure should be divided by 2 before

		 * set register, e.g. val << 3.

 Update limits and set FPS to default */

	/*

	 * Device is already turned on by i2c-core with ACPI domain PM.

	 * Enable runtime PM and turn off the device.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * adv7170 - adv7170, adv7171 video encoder driver version 0.0.1

 *

 * Copyright (C) 2002 Maxim Yevtyushkin <max@linuxmedialabs.com>

 *

 * Based on adv7176 driver by:

 *

 * Copyright (C) 1998 Dave Perks <dperks@ibm.net>

 * Copyright (C) 1999 Wolfgang Scherr <scherr@net4you.net>

 * Copyright (C) 2000 Serguei Miridonov <mirsev@cicese.mx>

 *    - some corrections for Pinnacle Systems Inc. DC10plus card.

 *

 * Changes by Ronald Bultje <rbultje@ronald.bitfreak.net>

 *    - moved over to linux>=2.4.x i2c protocol (1/1/2003)

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

	/* the adv7170 has an autoincrement function, use it if

 do raw I2C, not smbus compatible */

 do some slow I2C emulation kind of thing */

 ----------------------------------------------------------------------- */

 MR0 */

 MR1 */

 MR2 RTC control: bits 2 and 1 */

 MR3 */

 MR4 */

 Reserved */

 Reserved */

 TM0 */

 TM1 */

 Fsc0 */

 Fsc1 */

 Fsc2 */

 Fsc3 */

 Subcarrier Phase */

 Closed Capt. Ext 0 */

 Closed Capt. Ext 1 */

 Closed Capt. 0 */

 Closed Capt. 1 */

 Pedestal Ctl 0 */

 Pedestal Ctl 1 */

 Pedestal Ctl 2 */

 Pedestal Ctl 3 */

 CGMS_WSS_0 */

 CGMS_WSS_1 */

 CGMS_WSS_2 */

 Teletext Ctl */

 MR0 */

 MR1 */

 MR2 RTC control: bits 2 and 1 */

 MR3 */

 MR4 */

 Reserved */

 Reserved */

 TM0 */

 TM1 */

 Fsc0 */

 Fsc1 */

 Fsc2 */

 Fsc3 */

 Subcarrier Phase */

 Closed Capt. Ext 0 */

 Closed Capt. Ext 1 */

 Closed Capt. 0 */

 Closed Capt. 1 */

 Pedestal Ctl 0 */

 Pedestal Ctl 1 */

 Pedestal Ctl 2 */

 Pedestal Ctl 3 */

 CGMS_WSS_0 */

 CGMS_WSS_1 */

 CGMS_WSS_2 */

 Teletext Ctl */

 Enable genlock */

 Enable genlock */

	/* RJ: input = 0: input is from decoder

	   input = 1: input is from ZR36060

 TR1 */

 Enable genlock */

 udelay(10); */

 TR1 */

 udelay(10); */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 Check if the adapter supports the needed features */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2021 Intel Corporation.

 Chip ID */

 V_TIMING internal */

 HBLANK control - read only */

 Exposure control */

 Analog gain control */

 Digital gain control */

 Min = 1 X */

 Max = 4 X */

 Default gain = 2.5 X */

 Each step = 1/1024 */

 Test Pattern Control */

 Flip Control */

 Horizontal Window Offset */

 Vertical Window Offset */

 Link frequency config */

 registers for this link frequency */

 Mode : resolution and related config&values */

 Frame width */

 Frame height */

 V-timing */

 Index of Link frequency config to be used */

 Default register values */

 4208x3120 needs 1120Mbps/lane, 4 lanes */

 Configurations for supported link frequencies */

/*

 * pixel_rate = link_freq * data-rate * nr_of_lanes / bits_per_sample

 * data rate => double data rate; number of lanes => 4; bits per pixel => 10

 Menu items for LINK_FREQ V4L2 control */

 Link frequency configs */

 Mode configs */

 V4L2 Controls */

 Current mode */

 Mutex for serialized access */

 Streaming on/off */

 Read registers up to 4 at a time */

 Write register address */

 Read data from register */

 Write registers up to 4 at a time */

 Write a list of registers */

 Open sub-device */

 Initialize try_fmt */

 No crop or compose */

	/*

	 * 0x350C[7:6], 0x350B[7:0], 0x350A[1:0]

	/*

	 * Applying cropping offset to reverse the change of Bayer order

	 * after mirroring image

	/*

	 * Applying cropping offset to reverse the change of Bayer order

	 * after flipping image

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

	/*

	 * Applying V4L2 control value only happens

	 * when power is up for streaming

 Only one bayer order(GRBG) is supported */

 Only one raw bayer(GRBG) order is supported */

 Update limits and set FPS to default */

 Get out of from software reset */

 Apply default values of current mode */

 Apply customized values from user */

 Stop streaming */

		/*

		 * Apply default & customized values

		 * and then start streaming.

 Verify chip ID */

 Initialize control handlers */

 By default, PIXEL_RATE is read only */

 Digital gain */

 Check HW config */

 Initialize subdev */

 Check module identity */

 Set default mode to max resolution */

 Initialize subdev */

 Initialize source pad */

	/*

	 * Device is already turned on by i2c-core with ACPI domain PM.

	 * Enable runtime PM and turn off the device.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * wm8739

 *

 * Copyright (C) 2005 T. Adachi <tadachi@tadachi-net.com>

 *

 * Copyright (C) 2005 Hans Verkuil <hverkuil@xs4all.nl>

 * - Cleanup

 ------------------------------------------------------------------------ */

 audio cluster */

 ------------------------------------------------------------------------ */

 +12dB to -34.5dB 1.5dB step (5bit) def:0dB */

 +12dB to -34.5dB 1.5dB step (5bit) def:0dB */

 normalize ( 65535 to 0 -> 31 to 0 (12dB to -34.5dB) ) */

 set audio volume etc. */

	/* Volume setting: bits 0-4, 0x1f = 12 dB, 0x00 = -34.5 dB

	 * Default setting: 0x17 = 0 dB

 ------------------------------------------------------------------------ */

 de-activate */

 256fps, fs=44.1k */

 256fps, fs=48k */

 256fps, fs=32k */

 activate */

 ----------------------------------------------------------------------- */

 ------------------------------------------------------------------------ */

 i2c implementation */

 Check if the adapter supports the needed features */

 Initialize wm8739 */

 reset */

 filter setting, high path, offet clear */

 ADC, OSC, Power Off mode Disable */

	/* Digital Audio interface format:

 sampling control: normal, 256fs, 48KHz sampling rate */

 activate */

 set volume/mute */

 SPDX-License-Identifier: GPL-2.0

/*

 * ov2685 driver

 *

 * Copyright (C) 2017 Fuzhou Rockchip Electronics Co., Ltd.

 Analog power */

 Digital I/O power */

 Digital core power */

 PLL settings bases on 24M xvclk */

 Write registers up to 4 at a time */

 Read registers up to 4 at a time */

 Write register address */

 Read data from register */

 only one mode supported for now */

 Calculate the delay in us by clock rate and clock cycles */

 The minimum delay between power supplies and reset rising can be 0 */

 8192 xvclk cycles prior to the first SCCB transaction */

	/* HACK: ov2685 would output messy data after reset(R0103),

	 * writing register before .s_stream() as a workaround

 512 xvclk cycles after the last SCCB transaction or MIPI frame end */

 Initialize try_fmt */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Samsung S5K6A3 image sensor driver

 *

 * Copyright (C) 2013 Samsung Electronics Co., Ltd.

 * Author: Sylwester Nawrocki <s.nawrocki@samsung.com>

/**

 * struct s5k6a3 - fimc-is sensor data structure

 * @dev: pointer to this I2C client device structure

 * @subdev: the image sensor's v4l2 subdev

 * @pad: subdev media source pad

 * @supplies: image sensor's voltage regulator supplies

 * @gpio_reset: GPIO connected to the sensor's reset pin

 * @lock: mutex protecting the structure's members below

 * @format: media bus format at the sensor's source pad

 * @clock: pointer to &struct clk.

 * @clock_frequency: clock frequency

 * @power_count: stores state if device is powered

 Delay needed for the sensor initialization */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for MT9P031 CMOS Image Sensor from Aptina

 *

 * Copyright (C) 2011, Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 * Copyright (C) 2011, Javier Martin <javier.martin@vista-silicon.com>

 * Copyright (C) 2011, Guennadi Liakhovetski <g.liakhovetski@gmx.de>

 *

 * Based on the MT9V032 driver and Bastian Hecht's code.

 Sensor window */

 lock to protect power_count */

 Registers cache */

 Disable chip output, synchronous option update */

	/* If the external clock frequency is out of bounds for the PLL use the

	 * pixel clock divider only and disable the PLL.

 Ensure RESET_BAR is active */

 Bring up the supplies */

 Enable clock */

 Now RESET_BAR must be high */

 Configure the pixel clock polarity */

/* -----------------------------------------------------------------------------

 * V4L2 subdev video operations

	/* Windows position and size.

	 *

	 * TODO: Make sure the start coordinates and window size match the

	 * skipping, binning and mirroring (see description of registers 2 and 4

	 * in table 13, and Binning section on page 41).

	/* Row and column binning and skipping. Use the maximum binning value

	 * compatible with the skipping settings.

	/* Blanking - use minimum value for horizontal blanking and default

	 * value for vertical blanking.

 enable pause restart */

 enable restart + keep pause restart set */

 Stop sensor readout */

 Switch to master "normal" mode */

	/*

	 * - clear pause restart

	 * - don't clear restart as clearing restart manually can cause

	 *   undefined behavior

 Clamp the width and height to avoid dividing by zero. */

	/* Clamp the crop rectangle boundaries and align them to a multiple of 2

	 * pixels to ensure a GRBG Bayer pattern.

		/* Reset the output image size if the crop rectangle size has

		 * been modified.

/* -----------------------------------------------------------------------------

 * V4L2 subdev control operations

		/* Gain is controlled by 2 analog stages and a digital stage.

		 * Valid values for the 3 stages are

		 *

		 * Stage                Min     Max     Step

		 * ------------------------------------------

		 * First analog stage   x1      x2      1

		 * Second analog stage  x1      x4      0.125

		 * Digital stage        x1      x16     0.125

		 *

		 * To minimize noise, the gain stages should be used in the

		 * second analog stage, first analog stage, digital stage order.

		 * Gain from a previous stage should be pushed to its maximum

		 * value before the next stage is used.

		/* The digital side of the Black Level Calibration function must

		 * be disabled when generating a test pattern to avoid artifacts

		 * in the image. Activate (deactivate) the BLC-related controls

		 * when the test pattern is enabled (disabled).

 Restore the BLC settings. */

 Disable digital BLC when generating a test pattern. */

/* -----------------------------------------------------------------------------

 * V4L2 subdev core operations

	/* If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

 Update the power count. */

/* -----------------------------------------------------------------------------

 * V4L2 subdev internal operations

 Read out the chip version register */

/* -----------------------------------------------------------------------------

 * Driver initialization and probing

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/media/i2c/ad5820.c

 *

 * AD5820 DAC driver for camera voice coil focus.

 *

 * Copyright (C) 2008 Nokia Corporation

 * Copyright (C) 2007 Texas Instruments

 * Copyright (C) 2016 Pavel Machek <pavel@ucw.cz>

 *

 * Contact: Tuukka Toivonen <tuukkat76@gmail.com>

 *	    Sakari Ailus <sakari.ailus@iki.fi>

 *

 * Based on af_d88.c by Texas Instruments.

 Register definitions */

/*

 * Calculate status word and write it to the device based on current

 * values of V4L2 controls. It is assumed that the stored V4L2 control

 * values are properly limited and rounded.

/*

 * Power handling

	/*

	 * Go to standby first as real power off my be denied by the hardware

	 * (single power line control for both coil and sensor).

 Restore the hardware settings. */

/*

 * V4L2 controls

	/*

	 * V4L2_CID_FOCUS_ABSOLUTE

	 *

	 * Minimum current is 0 mA, maximum is 100 mA. Thus, 1 code is

	 * equivalent to 100/1023 = 0.0978 mA. Nevertheless, we do not use [mA]

	 * for focus position, because it is meaningless for user. Meaningful

	 * would be to use focus distance or even its inverse, but since the

	 * driver doesn't have sufficiently knowledge to do the conversion, we

	 * will just use abstract codes here. In any case, smaller value = focus

	 * position farther from camera. The default zero value means focus at

	 * infinity, and also least current consumption.

/*

 * V4L2 subdev operations

	/*

	 * If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

 Update the power count. */

/*

 * I2C driver

 SPDX-License-Identifier: GPL-2.0

/*

 * Omnivision OV2680 CMOS Image Sensor driver

 *

 * Copyright (C) 2018 Linaro Ltd

 *

 * Based on OV5640 Sensor Driver

 * Copyright (C) 2011-2013 Freescale Semiconductor, Inc. All Rights Reserved.

 * Copyright (C) 2014-2017 Mentor Graphics Inc.

 *

 protect members */

 Set clock lane into LP-11 state */

 set initial mode */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * OmniVision OV96xx Camera Driver

 *

 * Copyright (C) 2009 Marek Vasut <marek.vasut@gmail.com>

 *

 * Based on ov772x camera driver:

 *

 * Copyright (C) 2008 Renesas Solutions Corp.

 * Kuninori Morimoto <morimoto.kuninori@renesas.com>

 *

 * Based on ov7670 and soc_camera_platform driver,

 * transition from soc_camera to pxa_camera based on mt9m111

 *

 * Copyright 2006-7 Jonathan Corbet <corbet@lwn.net>

 * Copyright (C) 2008 Magnus Damm

 * Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>

 default register setup */

 Gamma curve P */

 Gamma curve T */

/* Configurations

 * NOTE: for YUV, alter the following registers:

 *		COM12 |= OV9640_COM12_YUV_AVG

 *

 *	 for RGB, alter the following registers:

 *		COM7  |= OV9640_COM7_RGB

 *		COM13 |= OV9640_COM13_RGB_AVG

 *		COM15 |= proper RGB color encoding mode

 read a register */

 write a register */

 we have to read the register back ... no idea why, maybe HW bug */

 Read a register, alter its bits, write it back */

 Soft reset the camera. This has nothing to do with the RESET pin! */

 Start/Stop streaming from the device */

 Set status of additional camera capabilities */

 select nearest higher resolution for capture */

 Prepare necessary register changes depending on color encoding */

 Setup registers according to resolution and color encoding */

 select register configuration for given resolution */

 select color matrix configuration for given color encoding */

 write register settings into the module */

 write color matrix configuration into the module */

 program default register values */

 wait for the changes to actually happen, 140ms are not enough yet */

 set the format we will capture in */

	/*

	 * check and show product ID and manufacturer ID

 Request bus settings on camera side */

/*

 * i2c_driver function

 SPDX-License-Identifier: GPL-2.0



 mt9v011 -Micron 1/4-Inch VGA Digital Image Sensor



 Copyright (c) 2009 Mauro Carvalho Chehab <mchehab@kernel.org>

/*

 * Values used at the original driver

 * Some values are marked as Reserved at the datasheet

 chip enable */

 recommended minimum */

 Avoid bogus calculus */

 round to the closest value */

 Avoid having a negative value for speed */

 Avoid speed overflow */

	/*

	 * The mt9v011 doesn't have scaling. So, in order to select the desired

	 * resolution, we're cropping at the middle of the sensor.

	 * hblank and vblank should be adjusted, in order to warrant that

	 * we'll preserve the line timings for 30 fps, no matter what resolution

	 * is selected.

	 * NOTE: datasheet says that width (and height) should be filled with

	 * width-1. However, this doesn't work, since one pixel per line will

	 * be missing.

 Recalculate and update fps info */

/****************************************************************************

			I2C Client & Driver

 Check if the adapter supports the needed features */

 Check if the sensor is really a MT9V011 */

 Hz */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Analog Devices ADV7511 HDMI Transmitter Device Driver

 *

 * Copyright 2013 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

/*

 * This file is named adv7511-v4l2.c so it doesn't conflict with the Analog

 * Device ADV7511 (config fragment CONFIG_DRM_I2C_ADV7511).

/*

**********************************************************************

*

*  Arrays with configuration parameters for the ADV7511

*

**********************************************************************

 total number of blocks */

 Number of segments read */

 Number of EDID read retries left */

 Is the adv7511 powered on? */

 Did we receive hotplug and rx-sense signals? */

 timings from s_dv_timings */

 controls */

 Running counter of the number of detected EDIDs (for debugging) */

 work entry */

 keep this initialization for compatibility with GCC < 4.4.6 */

 ------------------------ I2C ----------------------------------------------- */

/* To set specific bits in the register, a clear-mask is given (to be AND-ed),

/* To set specific bits in the register, a clear-mask is given (to be AND-ed),

 A */

 B */

 C */

 enable CSC */

 AVI infoframe: Limited range RGB (16-235) */

 disable CSC */

 AVI infoframe: Full range RGB (0-255) */

 Only makes sense for RGB formats */

 so just keep quantization */

 automatic */

 CE format, RGB limited range (16-235) */

 not CE format, RGB full range (0-255) */

 RGB limited range (16-235) */

 RGB full range (0-255) */

 ------------------------------ CTRL OPS ------------------------------ */

 Set HDMI or DVI-D */

 ---------------------------- CORE OPS ------------------------------------------- */

 compute checksum */

 HDMI only */

 Power up/down adv7511 */

 Power down */

 Power up */

	/* The adv7511 does not always come up immediately.

 Reserved registers that must be set */

 Set number of attempts to read the EDID */

 power up cec section */

 legacy mode and clear all rx buffers */

 initially disable tx */

 enabled irqs: */

 tx: ready */

 tx: arbitration lost */

 tx: retry timeout */

 rx: ready 1 */

 disable address mask 1-3 */

 power down cec section */

 enable address mask 0 */

 set address for mask 0 */

 enable address mask 1 */

 set address for mask 1 */

 enable address mask 2 */

 set address for mask 1 */

	/*

	 * The number of retries is the number of attempts - 1, but retry

	 * at least once. It's not clear if a value of 0 is allowed, so

	 * let's do at least one retry.

 clear cec tx irq status */

 write data */

 set length (data + header) */

 start transmit, enable tx */

		/*

		 * We set this status bit since this hardware performs

		 * retransmissions.

 Enable interrupts */

	/* The datasheet says that the EDID ready interrupt should be

	/*

	 * This i2c write can fail (approx. 1 in 1000 writes). But it

	 * is essential that this register is correct, so retry it

	 * multiple times.

	 *

	 * Note that the i2c write does not report an error, but the readback

	 * clearly shows the wrong value.

 Interrupt handler */

 disable interrupts to prevent a race condition */

 clear detected interrupts */

 toggle to re-enable rx 1 */

 enable interrupts */

 ------------------------------ VIDEO OPS ------------------------------ */

 Enable/disable adv7511 output */

 quick sanity check */

	/* Fill the optional fields .standards and .flags in struct v4l2_dv_timings

 save timings */

 set h/vsync polarities */

 update quantization range based on new dv_timings */

 ------------------------------ AUDIO OPS ------------------------------ */

 Set N (used with CTS to regenerate the audio clock) */

 Set sampling frequency for I2S audio to 48 kHz */

 Only 2 channels in use for application */

 Speaker mapping */

 16 bit audio word length */

 ---------------------------- PAD OPS ------------------------------------- */

	/*

	 * Bitfield namings come the CEA-861-F standard, table 8 "Auxiliary

	 * Video Information (AVI) InfoFrame Format"

	 *

	 * c = Colorimetry

	 * ec = Extended Colorimetry

	 * y = RGB or YCbCr

	 * q = RGB Quantization Range

	 * yq = YCC Quantization Range

 Not yet available in hdmi.h */

 Not yet available in hdmi.h */

	/*

	 * CEA-861-F says that for RGB formats the YCC range must match the

	 * RGB range, although sources should ignore the YCC range.

	 *

	 * The RGB quantization range shouldn't be non-zero if the EDID doesn't

	 * have the Q bit set in the Video Capabilities Data Block, however this

	 * isn't checked at the moment. The assumption is that the application

	 * knows the EDID and can detect this.

	 *

	 * The same is true for the YCC quantization range: non-standard YCC

	 * quantization ranges should only be sent if the EDID has the YQ bit

	 * set in the Video Capabilities Data Block.

 --------------------- SUBDEV OPS --------------------------------------- */

 ----------------------------------------------------------------------- */

 We failed to read the EDID, so send an event for this. */

 Return if we received the EDID. */

		/* We must retry reading the EDID several times, it is possible

		 * that initially the EDID couldn't be read due to i2c errors

 We failed to read the EDID, so send an event for this. */

 Configure hdmi transmitter. */

 Input format: RGB 4:4:4 */

 Output format: RGB 4:4:4 */

 1st order interpolation 4:2:2 -> 4:4:4 up conversion, Aspect ratio: 16:9 */

 Disable pixel repetition */

 Disable CSC */

	/* Output format: RGB 4:4:4, Active Format Information is valid,

 AVI Info frame packet enable, Audio Info frame disable */

 Colorimetry, Active format aspect ratio: same as picure. */

 No encryption */

 Positive clk edge capture for input video clock */

 read hotplug and rx-sense state */

 update read only ctrls */

 Couldn't read EDID or EDID is invalid. Force retry! */

 one more segment read ok */

 Request next EDID segment */

		/* report when we have all segments

		   but report only for segment 0

 ----------------------------------------------------------------------- */

 Setup ADV7511 */

 clear all interrupts */

	/*

	 * Stop HPD from resetting a lot of registers.

	 * It might leave the chip in a partly un-initialized state,

	 * in particular with regards to hotplug bounces.

 cec soft reset */

 legacy mode */

 Check if the adapter supports the needed features */

 Platform data */

 add in ascending ID order */

 EDID and CEC i2c addr */

 power up cec section */

 power down cec section */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

 #define MPX_DEBUG */

/*

 * Note:

 *

 * AS(IF/MPX) pin:      LOW      HIGH/OPEN

 * IF/MPX address:   0x42/0x40   0x43/0x44

/*

 * MPX register values for the BTF-PG472Z:

 *

 *                                 FM_     NICAM_  SCART_

 *          MODUS  SOURCE    ACB   PRESCAL PRESCAL PRESCAL SYSTEM  VOLUME

 *         10/0030 12/0008 12/0013 12/000E 12/0010 12/0000 10/0020 12/0000

 *         ---------------------------------------------------------------

 * Auto     1003    0020    0100    2603    5000    XXXX    0001    7500

 *

 * B/G

 *  Mono    1003    0020    0100    2603    5000    XXXX    0003    7500

 *  A2      1003    0020    0100    2601    5000    XXXX    0003    7500

 *  NICAM   1003    0120    0100    2603    5000    XXXX    0008    7500

 *

 * I

 *  Mono    1003    0020    0100    2603    7900    XXXX    000A    7500

 *  NICAM   1003    0120    0100    2603    7900    XXXX    000A    7500

 *

 * D/K

 *  Mono    1003    0020    0100    2603    5000    XXXX    0004    7500

 *  A2-1    1003    0020    0100    2601    5000    XXXX    0004    7500

 *  A2-2    1003    0020    0100    2601    5000    XXXX    0005    7500

 *  A2-3    1003    0020    0100    2601    5000    XXXX    0007    7500

 *  NICAM   1003    0120    0100    2603    5000    XXXX    000B    7500

 *

 * L/L'

 *  Mono    0003    0200    0100    7C03    5000    2200    0009    7500

 *  NICAM   0003    0120    0100    7C03    5000    XXXX    0009    7500

 *

 * M

 *  Mono    1003    0200    0100    2B03    5000    2B00    0002    7500

 *

 * For Asia, replace the 0x26XX in FM_PRESCALE with 0x14XX.

 *

 * Bilingual selection in A2/NICAM:

 *

 *         High byte of SOURCE     Left chan   Right chan

 *                 0x01              MAIN         SUB

 *                 0x03              MAIN         MAIN

 *                 0x04              SUB          SUB

 *

 * Force mono in NICAM by setting the high byte of SOURCE to 0x02 (L/L') or

 * 0x00 (all other bands).  Force mono in A2 with FMONO_A2:

 *

 *                      FMONO_A2

 *                      10/0022

 *                      --------

 *     Forced mono ON     07F0

 *     Forced mono OFF    0190

 Auto */	{ AUD_MONO,	0x1003, 0x0020, 0x0100, 0x2603,

 B/G Mono */	{ AUD_MONO,	0x1003, 0x0020, 0x0100, 0x2603,

 B/G A2 */	{ AUD_A2,	0x1003, 0x0020, 0x0100, 0x2601,

 B/G NICAM */ { AUD_NICAM,	0x1003, 0x0120, 0x0100, 0x2603,

 I Mono */	{ AUD_MONO,	0x1003, 0x0020, 0x0100, 0x2603,

 I NICAM */	{ AUD_NICAM,	0x1003, 0x0120, 0x0100, 0x2603,

 D/K Mono */	{ AUD_MONO,	0x1003, 0x0020, 0x0100, 0x2603,

 D/K A2-1 */	{ AUD_A2,	0x1003, 0x0020, 0x0100, 0x2601,

 D/K A2-2 */	{ AUD_A2,	0x1003, 0x0020, 0x0100, 0x2601,

 D/K A2-3 */	{ AUD_A2,	0x1003, 0x0020, 0x0100, 0x2601,

 D/K NICAM */	{ AUD_NICAM,	0x1003, 0x0120, 0x0100, 0x2603,

 L/L' Mono */	{ AUD_MONO,	0x0003, 0x0200, 0x0100, 0x7C03,

 L/L' NICAM */{ AUD_NICAM_L,	0x0003, 0x0120, 0x0100, 0x7C03,

 reset MPX */

 --------------------------------------------------------------------------*/

 --------------------------------------------------------------------------*/

 Initialize sony_btf_mpx */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vp27smpx - driver version 0.0.1

 *

 * Copyright (C) 2007 Hans Verkuil <hverkuil@xs4all.nl>

 *

 * Based on a tvaudio patch from Takahiro Adachi <tadachi@tadachi-net.com>

 * and Kazuhiko Kawakami <kazz-0@mail.goo.ne.jp>

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 i2c implementation */

/*

 * Generic i2c probe

 * concerning the addresses: i2c wants 7 bit (without the r/w bit), so '>>1'

 Check if the adapter supports the needed features */

 initialize vp27smpx */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

 /*

    saa6752hs - i2c-driver for the saa6752hs by Philips



    Copyright (C) 2004 Andrew de Quincey



    AC-3 support:



    Copyright (C) 2008 Hans Verkuil <hverkuil@xs4all.nl>



 standard D1 video format: 720x576 */

 2/3D1 video format: 480x576 */

 1/2D1 video format: 352x576 */

 SIF video format: 352x288 */

 transport streams */

 audio */

 video */

 video bitrate mode control cluster */

 ---------------------------------------------------------------------- */

 i2c register */

 table number for encoder */

 sync */

 transport_error_indicator(0), payload_unit_start(1), transport_priority(0), pid(0) */

 transport_scrambling_control(00), adaptation_field_control(01), continuity_counter(0) */

 PSI pointer to start of table */

 tid(0) */

 section_syntax_indicator(1), section_length(13) */

 transport_stream_id(1) */

 version_number(0), current_next_indicator(1) */

 section_number(0), last_section_number(0) */

 program_number(1) */

 PMT PID */

 CRC32 */

 i2c register */

 table number for encoder */

 sync */

 transport_error_indicator(0), payload_unit_start(1), transport_priority(0), pid */

 transport_scrambling_control(00), adaptation_field_control(01), continuity_counter(0) */

 PSI pointer to start of table */

 tid(2) */

 section_syntax_indicator(1), section_length(23) */

 program_number(1) */

 version_number(0), current_next_indicator(1) */

 section_number(0), last_section_number(0) */

 PCR_PID */

 program_info_length(0) */

 video stream type(2), pid */

 audio stream type(4), pid */

 CRC32 */

 i2c register */

 table number for encoder(1) */

 sync */

 transport_error_indicator(0), payload_unit_start(1), transport_priority(0) */

 PMT PID (0x0010) */

 transport_scrambling_control(00), adaptation_field_control(01), continuity_counter(0) */

 PSI pointer to start of table */

 TID (2) */

 section_syntax_indicator(1), section_length(26) */

 program_number(1) */

 version_number(0), current_next_indicator(1) */

 section_number(0), last_section_number(0) */

 PCR_PID (0x0104) */

 program_info_length(0) */

 video stream type(2), pid */

 audio stream type(6), pid */

 AC3 */

 Descriptor_length(1) */

 component_type_flag(0), bsid_flag(0), mainid_flag(0), asvc_flag(0), reserved flags(0) */

 CRC32 BE */

 ---------------------------------------------------------------------- */

 execute the command */

 set it and wait for it to be so */

 get the current status */

 delay a bit to let encoder settle */

 set the bitrate mode */

 set the video bitrate */

 set the target bitrate */

 set the max bitrate */

 set the target bitrate (no max bitrate for CBR) */

 set the audio encoding */

 set the audio bitrate */

	/* Note: the total max bitrate is determined by adding the video and audio

	   bitrates together and also adding an extra 768kbit/s to stay on the

	   safe side. If more control should be required, then an extra MPEG control

 set the total bitrate */

 peak bitrate shall be >= normal bitrate */

 Set video format - must be done first as it resets other settings */

 Set number of lines in input signal */

 set bitrate */

 Set GOP structure {3, 13} */

 Set minimum Q-scale {4} */

 Set maximum Q-scale {12} */

 Set Output Protocol */

 Set video output stream format {TS} */

 Set leading null byte for TS */

 compute PAT */

 compute PMT */

 Set Audio PID */

 Set Video PID */

 Set PCR PID */

 Send SI tables */

 mute then unmute audio. This removes buzzing artefacts */

 start it going */

 readout current state */

 change aspect ratio */

	/*

	  FIXME: translate and round width/height into EMPRESS

	  subsample type:



	  type   |   PAL   |  NTSC

	  ---------------------------

	  SIF    | 352x288 | 352x240

	  1/2 D1 | 352x576 | 352x480

	  2/3 D1 | 480x576 | 480x480

	  D1     | 720x576 | 720x480

 ----------------------------------------------------------------------- */

 Assume 625 input lines */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ov2640 Camera Driver

 *

 * Copyright (C) 2010 Alberto Panizzo <maramaopercheseimorto@gmail.com>

 *

 * Based on ov772x, ov9640 drivers and previous non merged implementations.

 *

 * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.

 * Copyright (C) 2006, OmniVision

/*

 * DSP registers

 * register offset for BANK_SEL == BANK_SEL_DSP

 Bypass DSP */

 Bypass DSP, sensor out directly */

 Use the internal DSP */

 Quantization Scale Factor */

 H_SIZE[7:0] (real/4) */

 V_SIZE[7:0] (real/4) */

 OFFSET_X[7:0] */

 OFFSET_Y[7:0] */

 Offset and size completion */

 Horizontal size completion */

 Zoom: Out Width  OUTW[7:0] (real/4) */

 Zoom: Out Height OUTH[7:0] (real/4) */

 Zoom: Speed and H&W completion */

 SDE Indirect Register Access: Address */

 SDE Indirect Register Access: Data */

 DSP Module enable 2 */

 DSP Module enable 3 */

 Image Size Completion */

 Image Horizontal Size HSIZE[10:3] */

 Image Vertical Size VSIZE[10:3] */

 DSP Module enable 0 */

 DSP Module enable 1 */

/*      REG 0xC7 (unknown name): affects Auto White Balance (AWB)

 *	  AWB_OFF            0x40

 *	  AWB_SIMPLE         0x10

 DVP output speed control */

#define   R_DVP_SP_DVP_MASK  0x3F /* DVP PCLK = sysclk (48)/[6:0] (YUV0);

 Image Output Format Select */

 (DVP) */

#define   IMAGE_MODE_HREF_VSYNC  0x02 /* HREF timing select in DVP JPEG output

#define   IMAGE_MODE_LBYTE_FIRST 0x01 /* Byte swap enable for DVP

				       *    1: Low byte first UYVY (C2[4] =0)

				       *        VYUY (C2[4] =1)

				       *    0: High byte first YUYV (C2[4]=0)

 Reset */

 Register ED */

 SCCB Master Speed */

 SCCB Slave ID */

 SCCB Slave Control */

 Microcontroller misc register */

 Microcontroller Reset */

 Register Bank Select */

/*

 * Sensor registers

 * register offset for BANK_SEL == BANK_SEL_SENS

 AGC - Gain control gain setting */

 Common control 1 */

 Register 04 */

 Always set */

 Horizontal mirror image ON/OFF */

 Vertical flip image ON/OFF */

 Frame Exposure One-pin Control Pre-charge Row Num */

 Common control 2 */

 Soft sleep mode */

 Output drive capability */

 N = [1x .. 4x] */

 Product ID Number MSB */

 Product ID Number LSB */

 Common control 3 */

 0 For Banding at 60H */

 Auto Banding */

#define   COM3_SING_FR_SNAPSH  0x01 /* 0 For enable live video output after the

 AEC[9:2] Exposure Value */

 Internal clock */

 CLK = XVCLK/(x) */

 Common control 7 */

#define   COM7_SRST            0x80 /* Initiates system reset. All registers are

				     * set to factory default values after which

 Resolution selectors for UXGA */

 SVGA */

 CIF */

 Enable Zoom mode */

 Enable Color Bar Test Pattern */

 Common control 8 */

 Banding filter ON/OFF */

 AGC Auto/Manual control selection */

 Auto/Manual Exposure control */

#define COM9        0x14 /* Common control 9

 000 :   2x */

 001 :   4x */

 010 :   8x */

 011 :  16x */

 100 :  32x */

 101 :  64x */

 110 : 128x */

 Common control 10 */

 PCLK output qualified by HREF */

#define   COM10_PCLK_RISE      0x10 /* Data is updated at the rising edge of

				     * PCLK (user can latch data at the next

				     * falling edge of PCLK).

#define   COM10_HREF_INV       0x08 /* Invert HREF polarity:

 Invert VSYNC polarity */

 Horizontal Window start MSB 8 bit */

 Horizontal Window end MSB 8 bit */

 Vertical Window start MSB 8 bit */

 Vertical Window end MSB 8 bit */

 Manufacturer ID byte - high */

 Manufacturer ID byte - low  */

 AGC/AEC - Stable operating region (upper limit) */

 AGC/AEC - Stable operating region (lower limit) */

 AGC/AEC Fast mode operating region */

 Dummy pixel insert MSB */

 Dummy pixel insert LSB */

 LSB of insert dummy lines in Vertical direction */

 MSB of insert dummy lines in Vertical direction */

 Y/G Channel Average value */

 Common Control 32 */

 PCLK freq divided by 2 */

 PCLK freq divided by 4 */

 Zoom: Horizontal start point */

 Register 45 */

 Frame Length Adjustment LSBs */

 Frame Length Adjustment MSBs */

 Zoom: Vertical start point */

 Zoom: Vertical start point */

 Flash light control */

 For Banding operations */

 50Hz Bd. AEC 2 MSBs */

 60Hz Bd. AEC 2 MSBs */

 50Hz Banding AEC 8 LSBs */

 60Hz Banding AEC 8 LSBs */

 50/60Hz Banding Maximum AEC Step */

 50Hz Banding Max. AEC Step */

 60Hz Banding Max. AEC Step */

 AVGsel[7:0],   16-zone average weight option */

 AVGsel[15:8],  16-zone average weight option */

 AVGsel[23:16], 16-zone average weight option */

 AVGsel[31:24], 16-zone average weight option */

 Histogram Algorithm Low Level */

 Histogram Algorithm High Level */

/*

 * ID

/*

 * Struct

 lock to protect streaming and power_count */

/*

 * Registers settings

 0x57 */

 0x00 */

 0xbb */

 0x9c */

 simple AWB */

/*

 * Register settings for window size

 * The preamble, setup the internal DSP to input an UXGA (1600x1200) image.

 * Then the different zooming configurations will setup the output image size.

/*

 * Register settings for pixel formats

/*

 * General functions

/*

 * functions

 v4l2_ctrl_lock() locks our own mutex */

	/*

	 * If the device is not powered up by the host driver, do not apply any

	 * controls to H/W at this time. Instead the controls will be restored

	 * when the streaming is started.

 NOTE: REG04_VREF_EN: 1 line shift / even/odd line swap */

 Active the resetb pin to perform a reset pulse */

	/*

	 * If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

 Select the nearest higher resolution for capture */

 reset hardware */

 initialize the sensor with default data */

 select preamble */

 set size win */

 cfmt preamble */

 set cfmt */

 select suitable win */

 select win */

 select format */

	/*

	 * check and show product ID and manufacturer ID

 Request the reset GPIO deasserted */

 Request the power down GPIO asserted */

/*

 * i2c_driver functions

 SPDX-License-Identifier: GPL-2.0

/*

 * adv7180.c Analog Devices ADV7180 video decoder driver

 * Copyright (c) 2009 Intel Corporation

 * Copyright (C) 2013 Cogent Embedded, Inc.

 * Copyright (C) 2013 Renesas Solutions Corp.

 Contrast */

Unsigned */

 Brightness*/

Signed */

 Hue */

Signed, inverted */

 Saturation */

Unsigned */

Unsigned */

 Initial number of frames to skip to avoid possible garbage */

 mutual excl. when accessing chip */

 in case V4L2_IN_ST_NO_SIGNAL */

 Make sure we can support this std */

Hue is inverted according to HSL chart */

		/*

		 *This could be V4L2_CID_BLUE_BALANCE/V4L2_CID_RED_BALANCE

		 *Let's not confuse the user, everybody understands saturation

 ADI required write */

 ADI required write */

		/*

		 * The ADV7180 sensor supports BT.601/656 output modes.

		 * The BT.656 is default and not yet configurable by s/w.

 It's always safe to stop streaming, no need to take the lock */

 Must wait until querystd released the lock */

 clear */

 ITU-R BT.656-4 compatible */

 Manually set V bit end position in NTSC mode */

 ADI recommended writes for improved video quality */

 ADI required writes */

 ITU-R BT.656-4 compatible */

 Manually set NEWAVMODE */

 Manually set V bit end position in NTSC mode */

 Will never happen */

 ADI recommended writes to registers 0x52, 0x53, 0x54 */

 Reset clamp circuitry - ADI recommended writes */

 ADI recommends to use the SH1 filter */

 ADI required writes to make differential CVBS work */

	/* We cannot discriminate between LQFP and 40-pin LFCSP, so accept

	 * all inputs and let the card driver take care of validation

 register for interrupts */

 config the Interrupt pin to be active low */

 enable AD change interrupts interrupts */

 Check if the adapter supports the needed features */

 SPDX-License-Identifier: GPL-2.0

/*

 * video-i2c.c - Support for I2C transport video devices

 *

 * Copyright (C) 2018 Matt Ranostay <matt.ranostay@konsulko.com>

 *

 * Supported:

 * - Panasonic AMG88xx Grid-Eye Sensors

 * - Melexis MLX90640 Thermal Cameras

 24 lines of pixel data + 2 lines of processing data */

 video dimensions */

 available frame intervals */

 pixel buffer size */

 pixel size in bits */

 setup function */

 xfer function */

 power control function */

 hwmon init function */

 Power control register */

 Reset register */

 Frame rate register */

 Thermistor register */

 Temperature register */

 Control register */

	/*

	 * Wait two frames before reading thermistor and temperature registers

	/*

	 * Wait for a while to avoid resuming normal mode immediately after

	 * entering sleep mode, otherwise the device occasionally goes wrong

	 * (thermistor and temperature registers are not updated at all)

	/*

	 * Check for sign bit, this isn't a two's complement value but an

	 * absolute temperature that needs to be inverted in the case of being

	 * negative.

 currently only one frame size is allowed */

 SPDX-License-Identifier: GPL-2.0

/*

 * tw9910 Video Driver

 *

 * Copyright (C) 2017 Jacopo Mondi <jacopo+renesas@jmondi.org>

 *

 * Copyright (C) 2008 Renesas Solutions Corp.

 * Kuninori Morimoto <morimoto.kuninori@renesas.com>

 *

 * Based on ov772x driver,

 *

 * Copyright (C) 2008 Kuninori Morimoto <morimoto.kuninori@renesas.com>

 * Copyright 2006-7 Jonathan Corbet <corbet@lwn.net>

 * Copyright (C) 2008 Magnus Damm

 * Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>

/*

 * register offset

 Product ID Code Register */

 Chip Status Register I */

 Input Format */

 Output Format Control Register */

 Hysteresis and HSYNC Delay Control */

 Output Control I */

 Analog Control Register 1 */

 Cropping Register, High */

 Vertical Delay Register, Low */

 Vertical Active Register, Low */

 Horizontal Delay Register, Low */

 Horizontal Active Register, Low */

 Control Register I */

 Vertical Scaling Register, Low */

 Scaling Register, High */

 Horizontal Scaling Register, Low */

 BRIGHTNESS Control Register */

 CONTRAST Control Register */

 SHARPNESS Control Register I */

 Chroma (U) Gain Register */

 Chroma (V) Gain Register */

 Hue Control Register */

 Coring and IF compensation */

 VBI Control Register */

 Analog Control 2 */

 Output Control 2 */

 Standard Selection */

 Standard Recognition */

 Test Control Register */

 Clamping Gain */

 Individual AGC Gain */

 AGC Gain */

 White Peak Threshold */

 Clamp level */

 Sync Amplitude */

 Sync Miss Count Register */

 Clamp Position Register */

 Vertical Control I */

 Vertical Control II */

 Color Killer Level Control */

 Comb Filter Control */

 Luma Delay and H Filter Control */

 Miscellaneous Control I */

 LOOP Control Register */

 Miscellaneous Control II */

 Macrovision Detection */

 Chip STATUS II */

 H monitor */

 CLAMP MODE */

 ID Detection Control */

 Clamp Control I */

/*

 * register detail

 INFORM */

 1 : Input crystal clock frequency is 27MHz */

 0 : Square pixel mode. */

     Must use 24.54MHz for 60Hz field rate */

     source or 29.5MHz for 50Hz field rate */

 01 : S-video decoding */

 00 : Composite video decoding */

 Y input video selection */

  00 : Mux0 selected */

  01 : Mux1 selected */

  10 : Mux2 selected */

  11 : Mux3 selected */

 OPFORM */

 0 : CCIR601 compatible YCrCb 4:2:2 format */

 1 : ITU-R-656 compatible data sequence format */

 0 : 8-bit YCrCb 4:2:2 output format */

 1 : 16-bit YCrCb 4:2:2 output format.*/

 1 : LLC output mode. */

 0 : free-run output mode */

 Serial interface auto-indexing control */

 0 : auto-increment */

 1 : non-auto */

 1 : Vertical out ctrl by DVALID */

 0 : Vertical out ctrl by HACTIVE and DVALID */

 Enable output for Rev0/Rev1 */

 All tri-stated for Rev0 */

 All tri-stated for Rev1 */

 OUTCTR1 */

 0 : VS pin output polarity is active low */

 1 : VS pin output polarity is active high. */

 VS pin output control */

   0 : VSYNC  */

   1 : VACT   */

   2 : FIELD  */

   3 : VVALID */

   7 : 0      */

 0 : HS pin output polarity is active low */

 1 : HS pin output polarity is active high.*/

 HS pin output control */

   0 : HACT   */

   1 : HSYNC  */

   2 : DVALID */

   3 : HLOCK  */

   4 : ASYNCW */

   7 : 0      */

 ACNTL1 */

#define SRESET      0x80 /* resets the device to its default state

			  * but all register content remain unchanged.

			  * This bit is self-resetting.

 system clock power down */

 Luma ADC power down */

 Chroma ADC power down */

 ACNTL2 */

 PLL power down */

 VBICNTL */

 RTSEL : control the real time signal output from the MPOUT pin */

 0000 = Video loss */

 0001 = H-lock */

 0010 = S-lock */

 0011 = V-lock */

 0100 = MONO */

 0101 = DET50 */

 0110 = FIELD */

 0111 = RTCO ( Real Time Control ) */

 HSYNC start and end are constant for now */

/*

 * structure

/*

 * general function

 bit 10 - 3 */

 bit 10 - 3 */

 So far only revisions 0 and 1 have been seen. */

 bit 2 - 0 */

/*

 * subdevice operations

	/*

	 * ret      = int

	 * reg->val = __u64

	/*

	 * FIXME: The reset signal is connected to a shared GPIO on some

	 * platforms (namely the SuperH Migo-R). Until a framework becomes

	 * available to handle this cleanly, request the GPIO temporarily

	 * to avoid conflicts.

 Select suitable norm. */

 Reset hardware. */

 Set bus width. */

 Select MPOUT behavior. */

 Set scale. */

 Set hsync. */

 Only CROP, CROP_DEFAULT and CROP_BOUNDS are supported. */

 Check color format. */

 Select suitable norm. */

 TW9910 only use 8 or 16 bit bus width. */

	/*

	 * Check and show Product ID.

	 * So far only revisions 0 and 1 have been seen.

/*

 * i2c_driver function

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/media/i2c/lm3646.c

 * General device driver for TI lm3646, Dual FLASH LED Driver

 *

 * Copyright (C) 2014 Texas Instruments

 *

 * Contact: Daniel Jeong <gshark.jeong@gmail.com>

 *			Ldd-Mlp <ldd-mlp@list.ti.com>

 registers definitions */

 Fault Mask */

/*

 * struct lm3646_flash

 *

 * @pdata: platform data

 * @regmap: reg. map for i2c

 * @lock: muxtex for serial access.

 * @led_mode: V4L2 LED mode

 * @ctrls_led: V4L2 controls

 * @subdev_led: V4L2 subdev

 * @mode_reg : mode register value

 enable mode control */

 V4L2 controls  */

 switch to SHDN mode before flash strobe on */

 read and check current mode of chip to start flash */

 flash on */

		/*

		 * flash mode will be turned automatically

		 * from FLASH mode to SHDN mode after flash duration timeout

		 * read and check current mode of chip to stop flash

 flash mode */

 flash source */

 flash strobe */

 flash strobe stop */

 flash strobe timeout */

 max flash current */

 max torch current */

 fault */

 initialize device */

 read the value of mode register to reduce redundant i2c accesses */

 output disable */

	/*

	 * LED1 flash current setting

	 * LED2 flash current = Total(Max) flash current - LED1 flash current

	/*

	 * LED1 torch current setting

	 * LED2 torch current = Total(Max) torch current - LED1 torch current

 Reset flag register */

 check device tree if there is no platform data */

 use default data in case of no platform data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

/*

 * This driver is based on the wis-tw9903.c source that was in

 * drivers/staging/media/go7007. That source had commented out code for

 * saturation and scaling (neither seemed to work). If anyone ever gets

 * hardware to test this driver, then that code might be useful to look at.

 * You need to get the kernel sources of, say, kernel 3.8 where that

 * wis-tw9903 driver is still present.

 input 1, composite */

 correct digital format */

 or 0x00 for PAL */

 second internal current reference */

 window */

 window */

 window */

 window */

 window */

 scaling */

 scaling */

 scaling */

 brightness */

 contrast */

 sharpness */

 U gain */

 V gain */

 hue */

 sharpness */

 vbi */

 video norm */

 video norm */

 clamping gain (working 0x50) */

 burst PLL control (working: a9) */

 0xea is blue test frame -- 0xe0 for normal */

 reset device */

 Terminator (reg 0x00 is read-only) */

 --------------------------------------------------------------------------*/

 --------------------------------------------------------------------------*/

 Check if the adapter supports the needed features */

 Initialize tw9903 */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Omnivision OV2659 CMOS Image Sensor driver

 *

 * Copyright (C) 2015 Texas Instruments, Inc.

 *

 * Benoit Parrot <bparrot@ti.com>

 * Lad, Prabhakar <prabhakar.csengg@gmail.com>

/*

 * OV2659 register definitions

 Array end token */

 Output format Register Value (REG_FORMAT_CTRL00) */

 used to control the sensor PWDN pin */

 used to control the sensor RESETB pin */

 1280X720 720p */

 1600X1200 UXGA */

 1280X1024 SXGA */

 1024X768 SXGA */

 800X600 SVGA */

 640X480 VGA */

 320X240 QVGA */

 QVGA */

 VGA */

 SVGA */

 XGA */

 720P */

 SXGA */

 UXGA */

 YUV422 YUYV*/

 YUV422 UYVY  */

 Raw Bayer BGGR */

 RGB565 */

 sensor register write */

 sensor register read */

/*

 * V4L2 subdev video and pad level operations

 Stop Streaming Sequence */

 V4L2 controls values will be applied only when power is already up */

/* -----------------------------------------------------------------------------

 * V4L2 subdev internal operations

 Check sensor revision */

 Optional gpio don't fail if not present */

 Optional gpio don't fail if not present */

 Calculate the PLL register value needed */

 sentinel */ },

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/media/i2c/ccs-pll.c

 *

 * Generic MIPI CCS/SMIA/SMIA++ PLL calculator

 *

 * Copyright (C) 2020 Intel Corporation

 * Copyright (C) 2011--2012 Nokia Corporation

 * Contact: Sakari Ailus <sakari.ailus@linux.intel.com>

 Return an even number or one. */

 Return an even number or one. */

	/*

	 * Find limits for sys_clk_div. Not all values are possible with all

	 * values of pix_clk_div.

 Make sure PLL input frequency is within limits */

	/*

	 * Find out whether a sensor supports derating. If it does not, VT and

	 * OP domains are required to run at the same pixel rate.

		/*

		 * Some sensors perform analogue binning and some do this

		 * digitally. The ones doing this digitally can be roughly be

		 * found out using this formula. The ones doing this digitally

		 * should run at higher clock rate, so smaller divisor is used

		 * on video timing side.

		/*

		 * Profile 2 supports vt_pix_clk_div E [4, 10]

		 *

		 * Horizontal binning can be used as a base for difference in

		 * divisors. One must make sure that horizontal blanking is

		 * enough to accommodate the CSI-2 sync codes.

		 *

		 * Take scaling factor and number of VT lanes into account as well.

		 *

		 * Find absolute limits for the factor of vt divider.

 Find smallest and biggest allowed vt divisor. */

	/*

	 * Find pix_div such that a legal pix_div * sys_div results

	 * into a value which is not smaller than div, the desired

	 * divisor.

 Check if this one is better. */

 Bail out if we've already found the best value. */

/*

 * Heuristically guess the PLL tree for a given common multiplier and

 * divisor. Begin with the operational timing and continue to video

 * timing once operational timing has been verified.

 *

 * @mul is the PLL multiplier and @div is the common divisor

 * (pre_pll_clk_div and op_sys_clk_div combined). The final PLL

 * multiplier will be a multiple of @mul.

 *

 * @return Zero on success, error code on error.

	/*

	 * Higher multipliers (and divisors) are often required than

	 * necessitated by the external clock and the output clocks.

	 * There are limits for all values in the clock tree. These

	 * are the minimum and maximum multiplier for mul.

	/*

	 * Get pre_pll_clk_div so that our pll_op_clk_freq_hz won't be

	 * too high.

 Don't go above max pll multiplier. */

 Don't go above max pll op frequency. */

 Don't go above the division capability of op sys clock divider. */

 Ensure we won't go above max_pll_multiplier. */

 Ensure we won't go below min_pll_op_clk_freq_hz. */

 Ensure we won't go below min_pll_multiplier. */

		/*

		 * If there's no OP PLL at all, use the VT values

		 * instead. The OP values are ignored for the rest of

		 * the PLL calculation.

	/*

	 * Make sure op_pix_clk_div will be integer --- unless flexible

	 * op_pix_clk_div is supported

 Figure out limits for OP pre-pll divider based on extclk */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Aptina Sensor PLL Configuration

 *

 * Copyright (C) 2012 Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 Compute the multiplier M and combined N*P1 divisor. */

	/* We now have the smallest M and N*P1 values that will result in the

	 * desired pixel clock frequency, but they might be out of the valid

	 * range. Compute the factor by which we should multiply them given the

	 * following constraints:

	 *

	 * - minimum/maximum multiplier

	 * - minimum/maximum multiplier output clock frequency assuming the

	 *   minimum/maximum N value

	 * - minimum/maximum combined N*P1 divisor

	/*

	 * We're looking for the highest acceptable P1 value for which a

	 * multiplier factor MF exists that fulfills the following conditions:

	 *

	 * 1. p1 is in the [p1_min, p1_max] range given by the limits and is

	 *    even

	 * 2. mf is in the [mf_min, mf_max] range computed above

	 * 3. div * mf is a multiple of p1, in order to compute

	 *	n = div * mf / p1

	 *	m = pll->m * mf

	 * 4. the internal clock frequency, given by ext_clock / n, is in the

	 *    [int_clock_min, int_clock_max] range given by the limits

	 * 5. the output clock frequency, given by ext_clock / n * m, is in the

	 *    [out_clock_min, out_clock_max] range given by the limits

	 *

	 * The first naive approach is to iterate over all p1 values acceptable

	 * according to (1) and all mf values acceptable according to (2), and

	 * stop at the first combination that fulfills (3), (4) and (5). This

	 * has a O(n^2) complexity.

	 *

	 * Instead of iterating over all mf values in the [mf_min, mf_max] range

	 * we can compute the mf increment between two acceptable values

	 * according to (3) with

	 *

	 *	mf_inc = p1 / gcd(div, p1)			(6)

	 *

	 * and round the minimum up to the nearest multiple of mf_inc. This will

	 * restrict the number of mf values to be checked.

	 *

	 * Furthermore, conditions (4) and (5) only restrict the range of

	 * acceptable p1 and mf values by modifying the minimum and maximum

	 * limits. (5) can be expressed as

	 *

	 *	ext_clock / (div * mf / p1) * m * mf >= out_clock_min

	 *	ext_clock / (div * mf / p1) * m * mf <= out_clock_max

	 *

	 * or

	 *

	 *	p1 >= out_clock_min * div / (ext_clock * m)	(7)

	 *	p1 <= out_clock_max * div / (ext_clock * m)

	 *

	 * Similarly, (4) can be expressed as

	 *

	 *	mf >= ext_clock * p1 / (int_clock_max * div)	(8)

	 *	mf <= ext_clock * p1 / (int_clock_min * div)

	 *

	 * We can thus iterate over the restricted p1 range defined by the

	 * combination of (1) and (7), and then compute the restricted mf range

	 * defined by the combination of (2), (6) and (8). If the resulting mf

	 * range is not empty, any value in the mf range is acceptable. We thus

	 * select the mf lwoer bound and the corresponding p1 value.

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020 Intel Corporation.

 ov9734 only support 1-lane mipi output */

 vertical-timings from sensor */

 horizontal-timings from sensor */

 Exposure controls from sensor */

 Analog gain controls from sensor */

 Digital gain controls from sensor */

 Test Pattern Control */

 Group Access */

 Frame width in pixels */

 Frame height in pixels */

 Horizontal timining size */

 Default vertical timining size */

 Min vertical timining size */

 Link frequency needed for this resolution */

 Sensor register settings for this resolution */

 V4L2 Controls */

 Current mode */

 To serialize asynchronus callbacks */

 Streaming on/off */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

 V4L2 controls values will be applied only when power is already up */

 4 least significant bits of expsoure are fractional part */

 Update limits and set FPS to default */

	/*

	 * Device is already turned on by i2c-core with ACPI domain PM.

	 * Enable runtime PM and turn off the device.

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020 Intel Corporation.

 vertical-timings from sensor */

 horizontal-timings from sensor */

 Exposure controls from sensor */

 Analog gain controls from sensor */

 Digital gain controls from sensor */

 Test Pattern Control */

 Group Access */

 ISP CTRL00 */

 ISP CTRL01 */

 Customer Addresses: 0x7010 - 0x710F */

 OTP registers from sensor */

 Frame width in pixels */

 Frame height in pixels */

 Horizontal timining size */

 Default vertical timining size */

 Min vertical timining size */

 Link frequency needed for this resolution */

 Sensor register settings for this resolution */

 V4L2 Controls */

 Current mode */

 To serialize asynchronus callbacks */

 Streaming on/off */

 NVM data inforamtion */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

 V4L2 controls values will be applied only when power is already up */

 4 least significant bits of expsoure are fractional part */

 Clear bit 5 of ISP CTRL00 */

 Clear bit 7 of ISP CTRL01 */

	/*

	 * Users are not allowed to access OTP-related registers and memory

	 * during the 20 ms period after streaming starts (0x100 = 0x01).

 Update limits and set FPS to default */

	/*

	 * Device is already turned on by i2c-core with ACPI domain PM.

	 * Enable runtime PM and turn off the device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for MT9T001 CMOS Image Sensor from Aptina (Micron)

 *

 * Copyright (C) 2010-2011, Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 *

 * Based on the MT9M001 driver,

 *

 * Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>

 lock to protect power_count */

 Reset the chip and stop data read out */

 Bring up the supplies */

 Enable clock */

/* -----------------------------------------------------------------------------

 * V4L2 subdev video operations

 Configure the pixel clock polarity */

 Configure the window size and row/column bin */

 Switch to master "normal" mode */

 Clamp the width and height to avoid dividing by zero. */

	/* Clamp the crop rectangle boundaries and align them to a multiple of 2

	 * pixels.

		/* Reset the output image size if the crop rectangle size has

		 * been modified.

/* -----------------------------------------------------------------------------

 * V4L2 subdev control operations

	/* Gain is controlled by 2 analog stages and a digital stage. Valid

	 * values for the 3 stages are

	 *

	 * Stage		Min	Max	Step

	 * ------------------------------------------

	 * First analog stage	x1	x2	1

	 * Second analog stage	x1	x4	0.125

	 * Digital stage	x1	x16	0.125

	 *

	 * To minimize noise, the gain stages should be used in the second

	 * analog stage, first analog stage, digital stage order. Gain from a

	 * previous stage should be pushed to its maximum value before the next

	 * stage is used.

		/* Disable control updates if more than one control has changed

		 * in the cluster.

 Update the gain controls. */

 Enable control updates. */

/* -----------------------------------------------------------------------------

 * V4L2 subdev core operations

	/* If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

 Update the power count. */

/* -----------------------------------------------------------------------------

 * V4L2 subdev internal operations

 Read out the chip version register */

 SPDX-License-Identifier: GPL-2.0

/*

 * mt9t112 Camera Driver

 *

 * Copyright (C) 2018 Jacopo Mondi <jacopo+renesas@jmondi.org>

 *

 * Copyright (C) 2009 Renesas Solutions Corp.

 * Kuninori Morimoto <morimoto.kuninori@renesas.com>

 *

 * Based on ov772x driver, mt9m111 driver,

 *

 * Copyright (C) 2008 Kuninori Morimoto <morimoto.kuninori@renesas.com>

 * Copyright (C) 2008, Robert Jarzmik <robert.jarzmik@free.fr>

 * Copyright 2006-7 Jonathan Corbet <corbet@lwn.net>

 * Copyright (C) 2008 Magnus Damm

 * Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>

 *

 * TODO: This driver lacks support for frame rate control due to missing

 *	 register level documentation and suitable hardware for testing.

 *	 v4l-utils compliance tools will report errors.

 you can check PLL/clock info */

 #define EXT_CLOCK 24000000 */

/************************************************************************

 *			macro

/*

 * frame size

/*

 * macro of read/write

/*

 * Logical address

/************************************************************************

 *			struct

/************************************************************************

 *			supported format

/************************************************************************

 *			general function

	/*

	 * If return value of this function is < 0, it means error, else,

	 * below 16bit is valid data.

	/*

	 * i2c_transfer return message length, but this function should

	 * return 0 if correct case.

 mcu access */

 kbyte order */

 (Context A) Image Width/Height. */

 (Context A) Output Width/Height. */

 (Context A) Start Row/Column. */

 (Context A) End Row/Column. */

 N/M */

 P1/P2/P3 */

 P4/P5/P6 */

 P7 */

 PLL control: BYPASS PLL = 8517. */

 Replace these registers when new timing parameters are generated. */

	/*

	 * TEST_BYPASS  on

	 * PLL_ENABLE   on

	 * SEL_LOCK_DET on

	 * TEST_BYPASS  off

	/*

	 * PLL_BYPASS off

	 * Reference clock count

	 * I2C Master Clock Divider

 JPEG initialization workaround */

 External sensor clock is PLL bypass. */

 MCU disabled. */

 Out of standby. */

	/*

	 * Standby Workaround

	 * Disable Secondary I2C Pads

 Poll to verify out of standby. Must Poll this bit. */

 Adaptive Output Clock (A) */

 Read Mode (A) */

 Fine Correction (A) */

 Fine IT Min (A) */

 Fine IT Max Margin (A) */

 Base Frame Lines (A) */

 Min Line Length (A) */

 Line Length (A) */

 Adaptive Output Clock (B) */

 Row Start (B) */

 Column Start (B) */

 Row End (B) */

 Column End (B) */

 Fine Correction (B) */

 Fine IT Min (B) */

 Fine IT Max Margin (B) */

 Base Frame Lines (B) */

 Min Line Length (B) */

 Line Length (B) */

	/*

	 * Flicker Detection registers.

	 * This section should be replaced whenever new timing file is

	 * generated. All the following registers need to be replaced.

	 * Following registers are generated from Register Wizard but user can

	 * modify them. For detail see auto flicker detection tuning.

 FD_FDPERIOD_SELECT */

 PRI_B_CONFIG_FD_ALGO_RUN */

 PRI_A_CONFIG_FD_ALGO_RUN */

	/*

	 * AFD range detection tuning registers.

 Search_f1_50 */

 Search_f2_50 */

 Search_f1_60 */

 Search_f2_60 */

 Period_50Hz (A) */

 Secret register by Aptina. */

 Period_50Hz (A MSB) */

 Period_60Hz (A) */

 Secret register by Aptina. */

 Period_60Hz (A MSB) */

 Period_50Hz (B) */

 Secret register by Aptina. */

 Period_50Hz (B) MSB */

 Period_60Hz (B) */

 Secret register by Aptina. */

 Period_60Hz (B) MSB */

 FD Mode */

 Stat_min */

 Stat_max */

 Min_amplitude */

 RX FIFO Watermark (A) */

 RX FIFO Watermark (B) */

	/* MCLK: 16MHz

	 * PCLK: 73MHz

	 * CorePixCLK: 36.5 MHz

 Analog setting B.*/

	/*

	 * Disable adaptive clock.

	 * PRI_A_CONFIG_JPEG_OB_TX_CONTROL_VAR

	 * PRI_B_CONFIG_JPEG_OB_TX_CONTROL_VAR

	/*

	 * Configure Status in Status_before_length Format and enable header.

	 * PRI_B_CONFIG_JPEG_OB_TX_CONTROL_VAR

	/*

	 * Enable JPEG in context B.

	 * PRI_B_CONFIG_JPEG_OB_TX_CONTROL_VAR

 Disable Dac_TXLO. */

 Set max slew rates. */

/************************************************************************

 *			v4l2_subdev_core_ops

/************************************************************************

 *			v4l2_subdev_video_ops

		/* FIXME

		 *

		 * If user selected large output size, and used it long time,

		 * mt9t112 camera will be very warm.

		 *

		 * But current driver can not stop mt9t112 camera.

		 * So, set small size here to solve this problem.

 Invert PCLK (Data sampled on falling edge of pixclk). */

	/*

	 * get color format

	/*

	 * frame size check

/************************************************************************

 *			i2c driver

 Check and show chip ID. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Driver for SAA6588 RDS decoder



    (c) 2005 Hans J. Koch



 insmod options */

 ---------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

/*

 * SAA6588 defines

 Initialization and mode control byte (0w) */

 bit 0+1 (DAC0/DAC1) */

 bit 2 (RBDS) */

 bit 3+4 (SYM0/SYM1) */

 bit 5 (NWSY) */

 bit 6 (TSQD) */

 bit 7 (SQCM) */

 Pause level and flywheel control byte (1w) */

 bits 0..5 (FEB0..FEB5) */

 bits 6+7 (PL0/PL1) */

 Pause time/oscillator frequency/quality detector control byte (1w) */

 bits 0..4 (SQS0..SQS4) */

 bit 5 (SOSC) */

 bit 6+7 (PTF0/PTF1) */

 ---------------------------------------------------------------------- */

	/* Although we only need 3 bytes, we have to read at least 6.

	/*

	   Byte order according to v4l2 specification:



	   Byte 0: Least Significant Byte of RDS Block

	   Byte 1: Most Significant Byte of RDS Block

	   Byte 2 Bit 7: Error bit. Indicates that an uncorrectable error

	   occurred during reception of this block.

	   Bit 6: Corrected bit. Indicates that an error was

	   corrected for this data block.

	   Bits 5-3: Same as bits 0-2.

	   Bits 2-0: Block number.



	   SAA6588 byte order is Status-MSB-LSB, so we have to swap the

	   first and the last of the 3 bytes block.

 Map 'Invalid block E' to 'Invalid Block' */

	/* And if are not in mmbs mode, then 'Block E' is also mapped

	   to 'Invalid Block'. As far as I can tell MMBS is discontinued,

	   and if there is ever a need to support E blocks, then please

 Received offset == Offset Name (OK ?) */

 uncorrectable error */

 corrected error */

 Is this enough ? Should we also check other bits ? */

 nothing */

 nothing */

 ---------------------------------------------------------------------- */

 --- close() for /dev/radio --- */

 --- read() for /dev/radio --- */

 --- poll() for /dev/radio --- */

 nothing */

 ----------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

 start polling via eventd */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019 Intel Corporation.

 module revisions */

/* the OTP read-out buffer is at 0x7000 and 0xf is the offset

 * of the byte in the OTP that means the module revision

 vertical-timings from sensor */

 horizontal-timings from sensor */

 Exposure controls from sensor */

 Analog gain controls from sensor */

 Digital gain controls from sensor */

 Test Pattern Control */

 Flip Mirror Controls from sensor */

 Digital I/O power */

 Analog power */

 Digital core power */

 Frame width in pixels */

 Frame height in pixels */

 Horizontal timining size */

 Default vertical timining size */

 Min vertical timining size */

 Link frequency needed for this resolution */

 Sensor register settings for this resolution */

 Number of data lanes */

 Default MEDIA_BUS_FMT for this mode */

mipi_data_rate_1440mbps

mipi_data_rate_720mbps

mipi_data_rate_720mbps

mipi_data_rate_360mbps

 3280x2464 resolution */

 1640x1232 resolution */

 3280x2464 resolution */

 1640x1232 resolution */

 3264x2448 resolution */

 1632x1224 resolution */

 V4L2 Controls */

 Current mode */

 Application specified mbus format */

 To serialize asynchronus callbacks */

 Streaming on/off */

 lanes index */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

 V4L2 controls values will be applied only when power is already up */

 4 least significant bits of expsoure are fractional part */

 Update limits and set FPS to default */

 Get number of data lanes */

	/*

	 * Device is already turned on by i2c-core with ACPI domain PM.

	 * Enable runtime PM and turn off the device.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Programming the mspx4xx sound processor family

 *

 * (c) 1997-2001 Gerd Knorr <kraxel@bytesex.org>

/* this one uses the automatic sound standard detection of newer msp34xx

 EOF */

 AM (for carrier detect / msp3400) */

 AM (for carrier detect / msp3410) */

 FM Radio */

 Terrestrial FM-mono + FM-stereo */

 Sat FM-mono */

 NICAM/FM --  B/G (5.5/5.85), D/K (6.5/5.85) */

 NICAM/FM -- I (6.0/6.552) */

 NICAM/AM -- L (6.5/5.85) */

 main carrier */

 PAL B/G */

 PAL SAT / SECAM */

 ------------------------------------------------------------------------ */

 I2S1 */

 I2S2 */

 LOAD_REG_1/2 */

 fir 1 */

 fir 2 */

 set prescales */

 volume prescale for SCART (AM mono input) */

 nicam prescale */

/* Set audio mode. Note that the pre-'G' models do not support BTSC+SAP,

 channel source: FM/AM, nicam or SCART */

		/* this method would break everything, let's make sure

		 * it's never called

	/* Note: for the C and D revs no NTSC stereo + SAP is possible as

	   the hardware does not support SAP. So the rxsubchans combination

 switch to mono if only mono is available */

 if bilingual */

 and mono or stereo, then fallback to lang1 */

 if stereo, and audmode is not mono, then switch to stereo */

 switch demodulator */

 NICAM */

 SCART */

 switch audio */

 AM mono decoding is handled by tuner, not MSP chip */

 SCART switching control register */

 ----------------------------------------------------------------------- */

 nicam synced */

/*

 * A kernel thread for msp3400 control -- we don't want to block the

 * in the ioctl while doing the sound carrier & stereo detect

 stereo/multilang monitoring */

 no carrier scan, just unmute */

 mute audio */

 wait for tuner to settle down after a channel change */

 carrier detect pass #1 -- main carrier */

 autodetect doesn't work well with AM ... */

 carrier detect pass #2 -- second (stereo) carrier */

 5.5 */

 6.5 */

 4.5 */

 6.0 */

 autodetect doesn't work well with AM ... */

 program the msp3400 according to the results */

 5.5 */

 B/G FM-stereo */

 B/G NICAM */

 6.0 */

 PAL I NICAM */

 6.5 */

 D/K FM-stereo */

 L NICAM or AM-mono */

 D/K NICAM */

 4.5 */

 unmute */

		/* monitor tv audio mode, the first time don't wait

 no carrier scan needed, just unmute */

 mute audio */

		/* start autodetect. Note: autodetect is not supported for

		   NTSC-M and radio, hence we force the standard in those

 wait for tuner to settle down after a channel change */

 programmed some specific mode */

 triggered autodetect */

 check results */

 autodetection has failed, let backup */

 set stereo */

 B/G NICAM */

 I NICAM */

 D/K NICAM */

 just turn on stereo */

 BTSC */

 The pre-'G' models only have BTSC-mono */

 FM radio */

			/* not needed in theory if we have radio, but

 set various prescales */

 scart */

 FM */

 nicam */

 unmute */

		/* monitor tv audio mode, the first time don't wait

 ----------------------------------------------------------------------- */

/* msp34xxG + (autoselect no-thread)

 * this one uses both automatic standard detection and automatic sound

 * select which are available in the newer G versions

 * struct msp: only norm, acb and source are really used in this mode

 mono only */

 stereo or B */

 stereo or A|B */

 stereo or A */

 stereo or A */

	/* the msp34x2g puts the MAIN_AVC, MAIN and AUX sources in 12, 13, 14

 quasi-peak detector is set to same input as the loudspeaker (MAIN) */

 (re-)initialize the msp34xxg */

	/* initialize std to 1 (autodetect) to signal that no standard is

 step-by-step initialisation, as described in the manual */

	/* write the dsps that may have an influence on

 scart */

 FM */

 nicam */

	/* set identification threshold. Personally, I

	 * I set it to a higher value than the default

	 * of 0x190 to ignore noisy stereo signals.

	 * this needs tuning. (recommended range 0x00a0-0x03c0)

	 * 0x7f0 = forced mono mode

	 *

	 * a2 threshold for stereo/bilingual.

	 * Note: this register is part of the Manual/Compatibility mode.

	 * It is supported by all 'G'-family chips.

 no carrier scan needed, just unmute */

 setup the chip*/

 start autodetect */

 watch autodetect */

 check results */

 AM NICAM mode */

 unmute: dispatch sound to scart output, set scart volume */

 restore ACB */

		/* the periodic stereo/SAP check is only relevant for

		/* monitor tv audio mode, the first time don't wait

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Samsung S5K5BAF UXGA 1/5" 2M CMOS Image Sensor

 * with embedded SoC ISP.

 *

 * Copyright (C) 2013, Samsung Electronics Co., Ltd.

 * Andrzej Hajda <a.hajda@samsung.com>

 *

 * Based on S5K6AA driver authored by Sylwester Nawrocki

 * Copyright (C) 2013, Samsung Electronics Co., Ltd.

 Default number of MIPI CSI-2 data lanes used */

/*

 * Register interface pages (the most significant word of the address)

/*

 * H/W register Interface (PAGE_IF_HW)

/*

 * S/W register interface (PAGE_IF_SW)

 Firmware revision information */

 Initialization parameters */

 Master clock frequency in KHz */

 Clock configurations, n = 0..2. REG_I_* frequency unit is 4 kHz. */

 General purpose parameters */

 Preview control section. n = 0...4. */

 Binning enabled */

 Binning disabled */

 Frame period in 0.1 ms units */

 x100 us */

 x100 us */

 The below 5 registers are for "device correction" values */

 Extended image property controls */

 Exposure time in 10 us units */

 Output interface (parallel/MIPI) setup */

 Auto-algorithms enable mask */

 Pointers to color correction matrices */

 Analog power supply 2.8V (2.6V to 3.0V) */

	"vddreg",	/* Regulator input power supply 1.8V (1.7V to 1.9V)

	"vddio",	/* I/O power supply 1.8V (1.65V to 1.95V)

 REG_P_FMT(x) register value */

 Auto / manual white balance cluster */

 Mirror cluster */

 Auto exposure / manual exposure and gain cluster */

 protects the struct members below */

 index to s5k5baf_formats array */

 actual frame interval in 100us */

 requested frame interval in 100us */

 cache for REG_DBG_AUTOALG_EN register */

 range 16-240 */

/* Setfile contains set of I2C command sequences. Each sequence has its ID.

 * setfile format:

 *	u8 magic[4];

 *	u16 count;		number of sequences

 *	struct {

 *		u16 id;		sequence id

 *		u16 offset;	sequence offset in data array

 *	} seq[count];

 *	u16 data[*];		array containing sequences

 *

 add items count at the beginning of the list */

/*

 * s5k5baf_write_nseq() - Writes sequences of values to sensor memory via i2c

 * @nseq: sequence of u16 words in format:

 *	(N, address, value[1]...value[N-1])*,0

 * Ex.:

 *	u16 seq[] = { NSEQ(0x4000, 1, 1), NSEQ(0x4010, 640, 480), 0 };

 *	ret = s5k5baf_write_nseq(c, seq);

 set custom color correction matrices for various illuminations */

 CIS sensor tuning, based on undocumented android driver code */

 Set horizontal and vertical image flipping */

 Configure auto/manual white balance and R/G/B gains */

 Program FW with exposure time, 'exposure' in us units */

 Set auto/manual exposure and total gain */

		/* The V4L2_CID_LINE_FREQUENCY control values match

 retry crop with frame interval set to max */

/*

 * V4L2 subdev core and video operations

/*

 * V4L2 subdev pad level and video operations

 bounds range [start, start+len) to [0, max) and aligns to 2 */

 allow only scaling on compose */

 adjust sel->r to avoid output resolution change */

/*

 * V4L2 subdev controls

 Auto white balance cluster */

 Exposure time: x 1 us */

 Total gain: 256 <=> 1x */

/*

 * V4L2 subdev internal operations

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018 Intel Corporation

 Chip ID */

 V_TIMING internal */

 Exposure control */

 Analog gain control */

 Digital gain control */

 Test Pattern Control */

 Flip Control */

 default link frequency and external clock */

 Mode : resolution and related config&values */

 Frame width */

 Frame height */

 V-timing */

 H-timing */

 index of link frequency */

 Default register values */

 sensor external clk */

 CSI-2 link frequencies */

 V4L2 Controls */

 Current mode */

 CSI-2 link default frequency */

	/*

	 * Mutex for serialized access:

	 * Protect sensor set pad format and start/stop streaming safely.

	 * Protect access to sensor v4l2 controls.

 Streaming on/off */

 supported link frequencies */

 Mode configs */

 Get bayer order based on flip setting. */

	/*

	 * Only one bayer order is supported.

	 * It depends on the flip settings.

 Read registers up to 4 at a time */

 Write register address */

 Read data from register */

 Write registers up to 4 at a time */

 Write a list of registers */

 Open sub-device */

 Initialize try_fmt */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

	/*

	 * Applying V4L2 control value only happens

	 * when power is up for streaming

 Analog gain = 1024/(1024 - ctrl->val) times */

 Update FLL that meets expected vertical blanking */

	/*

	 * Only one bayer order is supported.

	 * It depends on the flip settings.

 Update limits and set FPS to default */

		/*

		 * Currently hblank is not changeable.

		 * So FPS control is done only by vblank.

 Start streaming */

 Global Setting */

 Apply default values of current mode */

 set digital gain control to all color mode */

 Apply customized values from user */

 Stop streaming */

		/*

		 * Apply default & customized values

		 * and then start streaming.

 vflip and hflip cannot change during streaming */

 Verify chip ID */

 Initialize control handlers */

 pixel_rate = link_freq * 2 * nr_of_lanes / bits_per_sample */

 By default, PIXEL_RATE is read only */

 Initialize vblank/hblank/exposure parameters based on current mode */

 fll >= exposure time + adjust parameter (default value is 10) */

 Digital gain */

 Initialize subdev */

 Check module identity */

 Set default mode to max resolution */

 Initialize subdev */

 Initialize source pad */

	/*

	 * Device is already turned on by i2c-core with ACPI domain PM.

	 * Enable runtime PM and turn off the device.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * m52790 i2c ivtv driver.

 * Copyright (C) 2007  Hans Verkuil

 *

 * A/V source switching Mitsubishi M52790SP/FP

 ----------------------------------------------------------------------- */

/* Note: audio and video are linked and cannot be switched separately.

   So audio and video routing commands are identical for this chip.

   In theory the video amplifier and audio modes could be handled

   separately for the output, but that seems to be overkill right now.

   The same holds for implementing an audio mute control, this is now

   part of the audio output routing. The normal case is that another

   chip takes care of the actual muting so making it part of the

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 i2c implementation */

 Check if the adapter supports the needed features */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

 UDA1342 wants MSB first, but SMBus sends LSB first */

 select input 1 */

 select input 2 */

 reset registers */

 select input 1 */

 SPDX-License-Identifier: GPL-2.0

/*

 * A V4L2 driver for OmniVision OV5647 cameras.

 *

 * Based on Samsung S5K6AAFX SXGA 1/6" 1.3M CMOS Image Sensor driver

 * Copyright (C) 2011 Sylwester Nawrocki <s.nawrocki@samsung.com>

 *

 * Based on Omnivision OV7670 Camera Driver

 * Copyright (C) 2006-7 Jonathan Corbet <corbet@lwn.net>

 *

 * Copyright (C) 2016, Synopsys, Inc.

/*

 * From the datasheet, "20ms after PWDN goes low or 20ms after RESETB goes

 * high if reset is inserted after PWDN goes high, host can access sensor's

 * SCCB to initialize sensor."

 OV5647 native and active pixel array size */

 2592x1944 full resolution full FOV 10-bit mode. */

 1080p30 10-bit mode. Full resolution centre-cropped down to 1080p. */

 2x2 binned full FOV 10-bit mode. */

 10-bit VGA full FOV 60fps. 2x2 binned and subsampled down to VGA. */

 Default sensor mode is 2x2 binned 640x480 SBGGR10_1X10. */

 Apply customized values from user when stream starts. */

 Stream off to coax lanes into LP-11 state. */

 Enter software standby */

 Subdev core operations registration */

 Update the sensor mode and apply at it at streamon time. */

 Non-zero turns on AGC by clearing bit 1.*/

	/*

	 * Everything except V4L2_EXPOSURE_MANUAL turns on AEC by

	 * clearing bit 0.

 10 bits of gain, 2 in the high register. */

	/*

	 * Sensor has 20 bits, but the bottom 4 bits are fractions of a line

	 * which we leave as zero (and don't receive in "val").

 v4l2_ctrl_lock() locks our own mutex */

 Update max exposure while meeting expected vblanking */

	/*

	 * If the device is not powered up do not apply any controls

	 * to H/W at this time. Instead the controls will be restored

	 * at s_stream(1) time.

 Read-only, but we adjust it based on mode. */

 Read-only, but we adjust it based on mode. */

 min: 16 = 1.0x; max (10 bits); default: 32 = 2.0x. */

 By default, PIXEL_RATE is read only, but it does change per mode */

 By default, HBLANK is read only, but it does change per mode. */

 Request the power down GPIO asserted. */

 Enable runtime PM and turn off the device */

 sentinel */ }

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * saa7127 - Philips SAA7127/SAA7129 video encoder driver

 *

 * Copyright (C) 2003 Roy Bulter <rbulter@hetnet.nl>

 *

 * Based on SAA7126 video encoder driver by Gillem & Andreas Oberritter

 *

 * Copyright (C) 2000-2001 Gillem <htoa@gmx.net>

 * Copyright (C) 2002 Andreas Oberritter <obi@saftware.de>

 *

 * Based on Stadis 4:2:2 MPEG-2 Decoder Driver by Nathan Laredo

 *

 * Copyright (C) 1999 Nathan Laredo <laredo@gnu.org>

 *

 * This driver is designed for the Hauppauge 250/350 Linux driver

 * from the ivtv Project

 *

 * Copyright (C) 2003 Kevin Thayer <nufan_wfk@yahoo.com>

 *

 * Dual output support:

 * Copyright (C) 2004 Eric Varsanyi

 *

 * NTSC Tuning and 7.5 IRE Setup

 * Copyright (C) 2004  Chris Kennedy <c@groovy.org>

 *

 * VBI additions & cleanup:

 * Copyright (C) 2004, 2005 Hans Verkuil <hverkuil@xs4all.nl>

 *

 * Note: the saa7126 is identical to the saa7127, and the saa7128 is

 * identical to the saa7129, except that the saa7126 and saa7128 have

 * macrovision anti-taping support. This driver will almost certainly

 * work fine for those chips, except of course for the missing anti-taping

 * support.

/*

 * SAA7127 registers

/*

 **********************************************************************

 *

 *  Arrays with configuration parameters for the SAA7127

 *

 **********************************************************************

 Macrovision enable/disable */

 for color bars */

 BURST_END is also used as a chip ID in saa7127_probe */

 BURST_END is also used as a chip ID in saa7127_probe */

 BURST_END is also used as a chip ID in saa7127_probe */

/*

 **********************************************************************

 *

 *  Encoder Struct, holds the configuration state of the encoder

 *

 **********************************************************************

 colorbar bit */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 If and only if SECAM, with a SAA712[89] */

 Write Table */

 ----------------------------------------------------------------------- */

 RGB + CVBS (for sync) */

 by default switch YUV to RGB-matrix on */

 CVBS only */

 00001000 CVBS only, RGB DAC's off (high impedance mode) */

 by default switch YUV to RGB-matrix on */

 Y + C */

11111111  croma -> R, luma -> CVBS + G + B */

 by default switch YUV to RGB-matrix on */

 reg 2D = 01001111, all DAC's on, RGB + VBS */

 reg 3A = 00001011, bypass RGB-matrix */

 reg 2D = 00001111, all DAC's on, RGB + CVBS */

 reg 3A = 00001011, bypass RGB-matrix */

 by default switch YUV to RGB-matrix on */

 Configure Encoder */

 ----------------------------------------------------------------------- */

 avia */

 color bar */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 set to disabled */

 Check if the adapter supports the needed features */

	/* First test register 0: Bits 5-7 are a version ID (should be 0),

	   and bit 2 should also be 0.

	   This is rather general, so the second test is more specific and

	   looks at the 'ending point of burst in clock cycles' which is

 Chip type is already known */

 Needs detection */

 Detect if it's an saa7129 */

 The Encoder has an internal Colorbar generator */

 This can be used for debugging */

 ----------------------------------------------------------------------- */

 Turn off TV output */

 ----------------------------------------------------------------------- */

 auto-detection */

 SPDX-License-Identifier: GPL-2.0

/*

 * V4L2 sensor driver for Aptina MT9V111 image sensor

 * Copyright (C) 2018 Jacopo Mondi <jacopo@jmondi.org>

 *

 * Based on mt9v032 driver

 * Copyright (C) 2010, Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 * Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>

 *

 * Based on mt9v011 driver

 * Copyright (c) 2009 Mauro Carvalho Chehab <mchehab@kernel.org>

/*

 * MT9V111 is a 1/4-Inch CMOS digital image sensor with an integrated

 * Image Flow Processing (IFP) engine and a sensor core loosely based on

 * MT9V011.

 *

 * The IFP can produce several output image formats from the sensor core

 * output. This driver currently supports only YUYV format permutations.

 *

 * The driver allows manual frame rate control through s_frame_interval subdev

 * operation or V4L2_CID_V/HBLANK controls, but it is known that the

 * auto-exposure algorithm might modify the programmed frame rate. While the

 * driver initially programs the sensor with auto-exposure and

 * auto-white-balancing enabled, it is possible to disable them and more

 * precisely control the frame rate.

 *

 * While it seems possible to instruct the auto-exposure control algorithm to

 * respect a programmed frame rate when adjusting the pixel integration time,

 * registers controlling this feature are not documented in the public

 * available sensor manual used to develop this driver (09005aef80e90084,

 * MT9V111_1.fm - Rev. G 1/05 EN).

 The default sensor configuration at startup time. */

 Output image format and sizes. */

 Protects power up/down sequences. */

 Protects stream on/off sequences. */

 Flags to mark HW settings as not yet applied. */

 Clock provider and system clock frequency. */

/*

 * mt9v111_mbus_fmt - List all media bus formats supported by the driver.

 *

 * Only list the media bus code here. The image sizes are freely configurable

 * in the pixel array sizes range.

 *

 * The desired frame interval, in the supported frame interval range, is

 * obtained by configuring blanking as the sensor does not have a PLL but

 * only a fixed clock divider that generates the output pixel clock.

/*

 * mt9v111_frame_sizes - List sensor's supported resolutions.

 *

 * Resolution generated through decimation in the IFP block from the

 * full VGA pixel array.

 --- Device I/O access --- */

 Verify address space has been updated */

 Select register address space first. */

 Select register address space first. */

 Select register address space first. */

 Read the current register value, then update it. */

 --- Sensor HW operations --- */

 Software reset core and IFP blocks. */

 Approximate to the closest supported frame interval. */

	/*

	 * The sensor does not provide a PLL circuitry and pixel clock is

	 * generated dividing the master clock source by two.

	 *

	 * Trow = (W + Hblank + 114) * 2 * (1 / SYSCLK)

	 * TFrame = Trow * (H + Vblank + 2)

	 *

	 * FPS = (SYSCLK / 2) / (Trow * (H + Vblank + 2))

	 *

	 * This boils down to tune H and V blanks to best approximate the

	 * above equation.

	 *

	 * Test all available H/V blank values, until we reach the

	 * desired frame rate.

 Force device reset. */

 Configure internal clock sample rate. */

	/*

	 * Configure output image format components ordering.

	 *

	 * TODO: IFP block can also output several RGB permutations, we only

	 *	 support YUYV permutations at the moment.

	/*

	 * Do not change default sensor's core configuration:

	 * output the whole 640x480 pixel array, skip 18 columns and 6 rows.

	 *

	 * Instead, control the output image size through IFP block.

	 *

	 * TODO: No zoom&pan support. Currently we control the output image

	 *	 size only through decimation, with no zoom support.

 Apply controls to set auto exp, auto awb and timings */

	/*

	 * Set pixel integration time to the whole frame time.

	 * This value controls the the shutter delay when running with AE

	 * disabled. If longer than frame time, it affects the output

	 * frame rate.

 ---  V4L2 subdev operations --- */

	/*

	 * Make sure we're transitioning from 0 to 1, or viceversa,

	 * before actually changing the power state.

 All went well, updated power counter. */

	/*

	 * Update power counter to keep track of how many nested calls we

	 * received.

		/*

		 * No need to update control here as far as only H/VBLANK are

		 * supported and immediately programmed to registers in .s_ctrl

 Make sure frame rate/image sizes constraints are respected. */

 Update mbus format code and sizes. */

 Update the device (or pad) format if it has changed. */

 Format hasn't changed, stop here. */

 Update the format and sizes, then  mark changes as pending. */

 --- V4L2 ctrl --- */

	/*

	 * If sensor is powered down, just cache new control values,

	 * no actual register access.

	/*

	 * Flickering control gets disabled if both auto exp and auto awb

	 * are disabled too. If any of the two is enabled, enable it.

	 *

	 * Disabling flickering when ae and awb are off allows a more precise

	 * control of the programmed frame rate.

 PIXEL_RATE is fixed: just expose it to user space. */

 Start with default configuration: 640x480 UYVY. */

 Re-calculate blankings for 640x480@15fps. */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0+

/*

 * IMI RDACM21 GMSL Camera Driver

 *

 * Copyright (C) 2017-2020 Jacopo Mondi

 * Copyright (C) 2017-2019 Kieran Bingham

 * Copyright (C) 2017-2019 Laurent Pinchart

 * Copyright (C) 2017-2019 Niklas Söderlund

 * Copyright (C) 2016 Renesas Electronics Corporation

 * Copyright (C) 2015 Cogent Embedded, Inc.

/*

 * The SCCB slave handling is undocumented; the registers naming scheme is

 * totally arbitrary.

	/*

	 * OV490 EMB line disable in YUV and RAW data,

	 * NOTE: EMB line is still used in ISP and sensor

	/*

	 * PCLK polarity - useless due to silicon bug.

	 * Use 0x808000bb register instead.

 bit[3]=0 - PCLK polarity workaround. */

 Ov490 FSIN: app_fsin_from_fsync */

 FSIN0 source. */

 FSIN0 delay. */

 FSIN1 delay. */

 FSIN0 length. */

 FSIN1 length. */

	/*

	 * Load fsin0,load fsin1,load other,

	 * It will be cleared automatically.

 Sensor FSIN. */

 ov10640 FSIN enable */

 ov10640 HFLIP=1 by default */

	/*

	 * Enable serial link now that the ISP provides a valid pixel clock

	 * to start serializing video data on the GMSL link.

 Enable GPIO0#0 (reset) and GPIO1#0 (pwdn) as output lines. */

 Power up OV10640 and then reset it. */

 Read OV10640 ID to test communications. */

		/*

		 * Trigger SCCB slave transaction and give it some time

		 * to complete.

	/*

	 * Read OV490 Id to test communications. Give it up to 40msec to

	 * exit from reset.

 Wait for firmware boot by reading streamon status. */

 Program OV490 with register-value table. */

	/*

	 * The ISP is programmed with the content of a serial flash memory.

	 * Read the firmware configuration to reflect it through the V4L2 APIs.

 Set bus width to 12 bits with [0:11] ordering. */

 Enable reverse channel and disable the serial link. */

 Configure I2C bus at 105Kbps speed and configure GMSL. */

	/*

	 * Enable GPIO1 and hold OV490 in reset during max9271 configuration.

	 * The reset signal has to be asserted for at least 250 useconds.

 Release OV490 from reset and initialize it. */

	/*

	 * Set reverse channel high threshold to increase noise immunity.

	 *

	 * This should be compensated by increasing the reverse channel

	 * amplitude on the remote deserializer side.

 Create the dummy I2C client for the sensor. */

 Initialize and register the subdevice. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Programming the mspx4xx sound processor family

 *

 * (c) 1997-2001 Gerd Knorr <kraxel@bytesex.org>

 *

 * what works and what doesn't:

 *

 *  AM-Mono

 *      Support for Hauppauge cards added (decoding handled by tuner) added by

 *      Frederic Crozat <fcrozat@mail.dotcom.fr>

 *

 *  FM-Mono

 *      should work. The stereo modes are backward compatible to FM-mono,

 *      therefore FM-Mono should be always available.

 *

 *  FM-Stereo (B/G, used in germany)

 *      should work, with autodetect

 *

 *  FM-Stereo (satellite)

 *      should work, no autodetect (i.e. default is mono, but you can

 *      switch to stereo -- untested)

 *

 *  NICAM (B/G, L , used in UK, Scandinavia, Spain and France)

 *      should work, with autodetect. Support for NICAM was added by

 *      Pekka Pietikainen <pp@netppl.fi>

 *

 * TODO:

 *   - better SAT support

 *

 * 980623  Thomas Sailer (sailer@ife.ee.ethz.ch)

 *         using soundcore instead of OSS

 ---------------------------------------------------------------------- */

 module parameters */

 msp_debug output */

 no continuous stereo monitoring */

bool msp_amsound;	 /* hard-wire AM sound at 6.5 Hz (france),

int msp_standard = 1;    /* Override auto detect of audio msp_standard,

int msp_stereo_thresh = 0x190; /* a2 threshold for stereo/bilingual

 read-only */

 read-write */

 ---------------------------------------------------------------------- */

 control subaddress */

 demodulator unit subaddress */

 DSP unit subaddress */

 ----------------------------------------------------------------------- */

 functions for talking to the MSP3400C Sound processor                   */

 reset and read revision code */

/* ----------------------------------------------------------------------- *

 * bits  9  8  5 - SCART DSP input Select:

 *       0  0  0 - SCART 1 to DSP input (reset position)

 *       0  1  0 - MONO to DSP input

 *       1  0  0 - SCART 2 to DSP input

 *       1  1  1 - Mute DSP input

 *

 * bits 11 10  6 - SCART 1 Output Select:

 *       0  0  0 - undefined (reset position)

 *       0  1  0 - SCART 2 Input to SCART 1 Output (for devices with 2 SCARTS)

 *       1  0  0 - MONO input to SCART 1 Output

 *       1  1  0 - SCART 1 DA to SCART 1 Output

 *       0  0  1 - SCART 2 DA to SCART 1 Output

 *       0  1  1 - SCART 1 Input to SCART 1 Output

 *       1  1  1 - Mute SCART 1 Output

 *

 * bits 13 12  7 - SCART 2 Output Select (for devices with 2 Output SCART):

 *       0  0  0 - SCART 1 DA to SCART 2 Output (reset position)

 *       0  1  0 - SCART 1 Input to SCART 2 Output

 *       1  0  0 - MONO input to SCART 2 Output

 *       0  0  1 - SCART 2 DA to SCART 2 Output

 *       0  1  1 - SCART 2 Input to SCART 2 Output

 *       1  1  0 - Mute SCART 2 Output

 *

 * Bits 4 to 0 should be zero.

 MASK   IN1     IN2     IN3     IN4     IN1_DA  IN2_DA  MONO    MUTE   */

 SCART DSP Input select */

 SCART1 Output select */

 SCART2 Output select */

 Mute Input and SCART 1 Output */

 Sets I2S speed 0 = 1.024 Mbps, 1 = 2.048 Mbps */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 audio volume cluster */

 Force an update of the volume/mute cluster */

 --- v4l2 ioctls --- */

 set msp3400 to FM radio mode */

 the thread will do for us */

 new channel -- kick audio carrier scan */

 check if the tuner input is used */

 wake thread when a new input is chosen */

 TODO: add mono/stereo support for radio */

 only set audmode */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 These are the reset input/output positions */

 Rev B=2, C=3, D=4, G=7 */

 Has NICAM support: all mspx41x and mspx45x products have NICAM */

 Has radio support: was added with revision G */

 Has headphones output: not for stripped down products */

 Has scart2 input: not in stripped down products of the '3' family */

 Has scart3 input: not in stripped down products of the '3' family */

 Has scart4 input: not in pre D revisions, not in stripped D revs */

	/* Has scart2 output: not in stripped down products of

 Has scart2 a volume control? Not in pre-D revisions. */

 Has a configurable i2s out? */

	/* Has subwoofer output: not in pre-D revs and not in stripped down

	/* Has soundprocessing (bass/treble/balance/loudness/equalizer):

 Has Virtual Dolby Surround: only in msp34x1 */

 Has Virtual Dolby Surround & Dolby Pro Logic: only in msp34x2 */

	/* The msp343xG supports BTSC only and cannot do Automatic Standard

 MSP revision G and up have both autodetect and autoselect */

 MSP revision D and up have autodetect */

 version-specific initialization */

 startup control thread if needed */

 shutdown control thread */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018 Intel Corporation

/*

 * This sets the minimum granularity for the focus positions.

 * A value of 1 gives maximum accuracy for a desired focus position.

/*

 * This acts as the minimum granularity of lens movement.

 * Keep this value power of 2, so the control steps can be

 * uniformly adjusted for gradual lens movement, with desired

 * number of control steps.

/*

 * DW9807 separates two registers to control the VCM position.

 * One for MSB value, another is LSB value.

	/*

	 * According to the datasheet, need to check the bus status before we

	 * write VCM position. This ensure that we really write the value

	 * into the register

 Write VCM position to registers */

/*

 * This function sets the vcm position, so it consumes least current

 * The lens position is gradually moved in units of DW9807_CTRL_STEPS,

 * to make the movements smoothly.

 Power down */

/*

 * This function sets the vcm position to the value set by the user

 * through v4l2_ctrl_ops s_ctrl handler

 * The lens position is gradually moved in units of DW9807_CTRL_STEPS,

 * to make the movements smoothly.

 Power on */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * adv7842 - Analog Devices ADV7842 video decoder driver

 *

 * Copyright 2013 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

/*

 * References (c = chapter, p = page):

 * REF_01 - Analog devices, ADV7842,

 *		Register Settings Recommendations, Rev. 1.9, April 2011

 * REF_02 - Analog devices, Software User Guide, UG-206,

 *		ADV7842 I2C Register Maps, Rev. 0, November 2010

 * REF_03 - Analog devices, Hardware User Guide, UG-214,

 *		ADV7842 Fast Switching 2:1 HDMI 1.4 Receiver with 3D-Comb

 *		Decoder and Digitizer , Rev. 0, January 2011

 ADV7842 system clock frequency */

/*

**********************************************************************

*

*  Arrays with configuration parameters for the ADV7842

*

**********************************************************************

 i2c clients */

 controls */

 Unsupported timings. This device cannot support 720p30. */

 sorted by number of lines */

 { V4L2_DV_BT_CEA_720X480P59_94, 0x0a, 0x00 }, TODO flickering */

 TODO add 1920x1080P60_RB (CVT timing) */

 sorted by number of lines */

 TODO not tested */

 TODO add 1600X1200P60_RB (not a DMT timing) */

 TODO not tested */

 sorted by number of lines */

 sorted by number of lines */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

/* -----------------------------------------------------------------------------

 * Format helpers

 ----------------------------------------------------------------------- */

 keep this initialization for compatibility with GCC < 4.4.6 */

 keep this initialization for compatibility with GCC < 4.4.6 */

 ----------------------------------------------------------------------- */

 port A */

 port B */

 HPA disable on port A and B */

 Disable I2C access to internal EDID ram from VGA DDC port */

 edid segment pointer '1' for VGA port */

	/* Calculates the checksums and enables I2C access

	 * to internal EDID ram from VGA DDC port.

 enable hotplug after 200 ms */

 HPA disable on port A and B */

 Disable I2C access to internal EDID ram from HDMI DDC ports */

		/*

		 * There is no SPA, so just set spa_loc to 128 and pa to whatever

		 * data is there.

 set edid segment pointer for HDMI ports */

	/* Calculates the checksums and enables I2C access to internal

	 * EDID ram from HDMI DDC ports

 enable hotplug after 200 ms */

 ----------------------------------------------------------------------- */

 video std */

 v_freq and prim mode */

 reset to default values */

 disable embedded syncs for auto graphics mode */

 auto graphics */

 video std */

 prim mode */

 enable embedded syncs for auto graphics mode */

 Should only be set in auto-graphics mode [REF_02, p. 91-92] */

 setup PLL_DIV_MAN_EN and PLL_DIV_RATIO */

 IO-map reg. 0x16 and 0x17 should be written in sequence */

 active video - horizontal timing */

 active video - vertical timing */

		/* set default prim_mode/vid_std for HDMI

 video std */

 prim mode */

 Registers must be written in this order with no i2c access in between */

 Registers must be written in this order with no i2c access in between */

			/* Receiving analog RGB signal

			/* Receiving analog YPbPr signal

			/* Receiving HDMI signal

		/* Receiving DVI-D signal

		 * ADV7842 selects RGB limited range regardless of

 RGB limited range (16-235) */

 RGB full range (0-255) */

 YCrCb limited range (16-235) */

 RGB limited range (16-235) */

 YCrCb full range (0-255) */

 RGB full range (0-255) */

 Adjust gain/offset for DVI-D signals only */

	/* TODO SDP ctrls

	   contrast/brightness/hue/free run is acting a bit strange,

	   not sure if sdp csc is correct.

 standard ctrls */

 ignore lsb sdp 0x17[3:2] */

 ignore lsb sdp 0x17[1:0] */

 ignore lsb sdp 0x17[5:4] */

 ignore lsb sdp 0x17[7:6] */

 custom ctrls */

 RGB -> YUV, numerical approximation */

 Scale down to 8 bits with rounding */

 make U,V positive */

 CP */

 SDP */

 status from SDP block */

 status from CP block */

 TODO channel 2 */

/* Fill the optional fields .standards and .flags in struct v4l2_dv_timings

 SDP block */

 read STDI */

 adjust for deep color mode */

		/* find format

		 * Since LCVS values are inaccurate [REF_03, p. 339-340],

		 * stdi2dv_timings() is called with lcvs +-1 if the first attempt fails.

			/*

			 * The STDI block may measure wrong values, especially

			 * for lcvs and lcf. If the driver can not find any

			 * valid timing, the STDI block is restarted to measure

			 * the video timings again. The function will return an

			 * error, but the restart of STDI will generate a new

			 * STDI interrupt and the format detection process will

			 * restart.

 TODO restart STDI for Sync Channel 2 */

 enter one-shot mode */

 trigger STDI restart */

 reset to continuous mode */

 Use prim_mode and vid_std when available */

		/* custom settings when the video format

 Disable Tristate of Pins (no audio) */

 Enable HDMI clock terminators */

 Disable Tristate of Pins */

 Unmute audio */

 Mute audio [REF_01, c. 2.2.2] */

 512 samples with >= 32 kHz sample rate [REF_03, c. 8.29] */

 Tristate all outputs from video core */

 Disable HDMI clock terminators */

 csc auto/manual */

 csc scaling */

 A coeff */

 A scale */

 B coeff */

 B scale */

 C coeff */

 C scale */

 video std: CVBS or YC mode */

 prim mode */

 enable embedded syncs for auto graphics mode */

 power up ADC */

 phase control */

 Manual 2x output clock */

 script says register 0xde, which don't exist in manual */

 Manual analog input muxing mode, CVBS (6.4)*/

 ADC0 to AIN10 (CVBS), ADC1 N/C*/

 ADC2 N/C,ADC3 N/C*/

 ADC0 to AIN10 (CVBS), ADC1 N/C*/

 ADC2 to AIN12, ADC3 N/C*/

 ADI recommend write */

 ADI recommend write */

 Disable AV codes */

 Disable Ancillary data */

 SDP recommended settings */

 Autodetect PAL NTSC (not SECAM) */

 Pedestal Off */

 Manual VCR Gain Luma 0x40B */

 Manual Luma setting */

 Manual Chroma setting 0x3FE */

 Manual Chroma setting */

 Frame TBC,I_P, 3D comb enabled */

 ADI Recommended Write */

 Disable H and v blanking */

 deinterlacer enabled and 3D comb */

 Automatic analog input muxing mode */

 set mode and select free run resolution */

 video std */

 prim mode */

		cp_write_and_or(sd, 0x81, 0xef, 0x10); /* enable embedded syncs

 power up ADC */

 phase control */

 force to YCrCb */

 force to RGB */

 set ADI recommended settings for digitizer */

		/* "ADV7842 Register Settings Recommendations

 ADC Range improvement */

 ADC Range improvement */

 set to default gain for RGB */

 CP core pre-gain control */

 CP coast control. Graphics mode */

 CP core pre-gain control. Graphics mode */

 Automatic analog input muxing mode */

 set mode and select free run resolution */

 select port A */

 select port B */

 video std */

 prim mode */

		cp_write_and_or(sd, 0x81, 0xef, 0x00); /* disable embedded syncs

 set ADI recommended settings for HDMI: */

		/* "ADV7842 Register Settings Recommendations

 ADI recommended write */

 ADI recommended write */

 TMDS PLL optimization */

 ADI recommended write */

 TMDS PLL optimization */

 TMDS PLL optimization */

 TMDS PLL optimization */

 TMDS PLL optimization */

		hdmi_write(sd, 0x6c, 0x18); /* Disable ISRC clearing bit,

 DDC drive strength */

 equaliser */

 ADI recommended write */

 equaliser */

 equaliser */

 equaliser */

 equaliser */

 ADI recommended write */

 ADI recommended write */

 equaliser */

 power down ADC */

 phase control */

 set to default gain for HDMI */

 reset ADI recommended settings for digitizer */

		/* "ADV7842 Register Settings Recommendations

 ADC noise shaping filter controls */

 CP core gain controls */

 CP core pre-gain control */

 CP coast control */

 Component mode */

 color space conversion, autodetect color space */

/*

 * Compute the op_ch_sel value required to obtain on the bus the component order

 * corresponding to the selected format taking into account bus reordering

 * applied by the board at the output of the device.

 *

 * The following table gives the op_ch_value from the format component order

 * (expressed as op_ch_sel value in column) and the bus reordering (expressed as

 * adv7842_bus_order value in row).

 *

 *           |	GBR(0)	GRB(1)	BGR(2)	RGB(3)	BRG(4)	RBG(5)

 * ----------+-------------------------------------------------

 * RGB (NOP) |	GBR	GRB	BGR	RGB	BRG	RBG

 * GRB (1-2) |	BGR	RGB	GBR	GRB	RBG	BRG

 * RBG (2-3) |	GRB	GBR	BRG	RBG	BGR	RGB

 * BGR (1-3) |	RBG	BRG	RGB	BGR	GRB	GBR

 * BRG (ROR) |	BRG	RBG	GRB	GBR	RGB	BGR

 * GBR (ROL) |	RGB	BGR	RBG	BRG	GBR	GRB

 NOP */ = _SEL(GBR, GRB, BGR, RGB, BRG, RBG),

 1-2 */ = _SEL(BGR, RGB, GBR, GRB, RBG, BRG),

 2-3 */ = _SEL(GRB, GBR, BRG, RBG, BGR, RGB),

 1-3 */ = _SEL(RBG, BRG, RGB, BGR, GRB, GBR),

 ROR */ = _SEL(BRG, RBG, GRB, GBR, RGB, BGR),

 ROL */ = _SEL(RGB, BGR, RBG, BRG, GBR, GRB),

 SPD block */

 valid signal */

 Enable SSPD, STDI and CP locked/unlocked interrupts */

 ESDP_50HZ_DET interrupt */

 Enable CABLE_DET_A/B_ST (+5v) interrupt */

 Enable V_LOCKED and DE_REGEN_LCK interrupts */

 Enable SDP Standard Detection Change and SDP Video Detected */

 Enable HDMI_MODE interrupt */

		/*

		 * We set this status bit since this hardware performs

		 * retransmissions.

 cec controller */

 re-enable rx */

 power up cec */

 cec soft reset */

 initially disable tx */

 enabled irqs: */

 tx: ready */

 tx: arbitration lost */

 tx: retry timeout */

 rx: ready */

 enable rx */

 disable cec interrupts */

 disable address mask 1-3 */

 power down cec section */

 enable address mask 0 */

 set address for mask 0 */

 enable address mask 1 */

 set address for mask 1 */

 enable address mask 2 */

 set address for mask 1 */

	/*

	 * The number of retries is the number of attempts - 1, but retry

	 * at least once. It's not clear if a value of 0 is allowed, so

	 * let's do at least one retry.

 write data */

 set length (data + header) */

 start transmit, enable tx */

 read status */

 and clear */

 format change CP */

 format change SDP */

 digital format CP */

 format change */

 HDMI/DVI mode */

 cec */

 tx 5v detect */

/*

 * If the VGA_EDID_ENABLE bit is set (Repeater Map 0x7f, bit 7), then

 * the first two blocks of the EDID are for the HDMI, and the first block

 * of segment 1 (i.e. the third block of the EDID) is for VGA.

 * So if a VGA EDID is installed, then the maximum size of the HDMI EDID

 * is 2 blocks.

 todo, per edid */

 Let's keep it here for now, as it could be useful for debug */

 SDP (Standard definition processor) block */

 CP block */

 NTSC-M/J */

 NTSC-443 */

 60HzSECAM */

 PAL-M */

 PAL-60 */

 PAL-CombN */

 PAL-BGHID */

 SECAM */

 set to default */

 ----------------------------------------------------------------------- */

	/*

	 * Disable I2C access to internal EDID ram from HDMI DDC ports

	 * Disable auto edid enable when leaving powerdown mode

 power */

 Power up part and power down VDP */

 Power up pads */

 video format */

 HDMI audio */

 Wait 1 s before unmute */

 Drive strength */

 HDMI free run */

 SPD free run */

 TODO from platform data */

 Enable CP CSC */

 positive VS and HS and DE */

 Low threshold to enter/exit free run mode */

 Setting MCLK to 256Fs */

 Select analog input muxing mode */

 todo, improve settings for sdram */

 Frame TBC,3D comb enabled */

 SDP setup for the AD eval board */

 DDR mode */

 128 MB memory size */

 Timing Adjustment */

 Timing Adjustment */

 SDRAM reset */

 64 MB memory size ?*/

 must be zero for sdr sdram */

			sdp_io_write(sd, 0x79, 0x33); /* CAS latency to 3,

 SDR mode */

 Timing Adjustment */

 Timing Adjustment */

 SDRAM reset */

		/*

		 * Manual UG-214, rev 0 is bit confusing on this bit

		 * but a '1' disables any signal if the Ram is active.

 Tristate memory interface */

 HPA auto, HPA 0.5s after Edid set and Cable detect */

 HPA manual */

 HPA disable on port A and B */

 LLC */

 interrupts */

 Configure INT1 */

 ----------------------------------------------------------------------- */

	/*

	 * From ADV784x external Memory test.pdf

	 *

	 * Reset must just been performed before running test.

	 * Recommended to reset after test.

 Program SDP 4x1 */

 Program SDP mode */

 SDP Recommended Write */

 SDP Recommended Write ADV7844ES1 */

 SDP Recommended Write ADV7844ES1 */

 SDP Recommended Write ADV7844ES1 */

 SDP Recommended Write ADV7844ES1 */

 Memory BIST Initialisation */

 Power up ADV7844 */

 Enable outputs */

 Disable 3D comb, Frame TBC & 3DNR */

 Reset memory controller */

 Disable 3D Comb, Frame TBC & 3DNR */

 Memory BIST Initialisation */

 Memory BIST Initialisation */

 Memory BIST Initialisation */

 Memory BIST Initialisation */

 Memory BIST Initialisation */

 Memory BIST Initialisation */

 Memory BIST Initialisation */

 Memory BIST Initialisation */

 Memory BIST Initialisation */

 Memory BIST Initialisation */

 Enable BIST Test */

 Enable FRAME TBC & 3D COMB */

 run ram test */

 and re-init chip and state */

 ----------------------------------------------------------------------- */

 -------------------------- custom ctrls ---------------------------------- */

 Check if the adapter supports the needed features */

 platform data */

 i2c access to adv7842? */

 control handlers */

 add in ascending ID order */

 custom controls */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

/*

 * Driver for simple i2c audio chips.

 *

 * Copyright (c) 2000 Gerd Knorr

 * based on code by:

 *   Eric Sandeen (eric_sandeen@bigfoot.com)

 *   Steve VanDeBogart (vandebo@uclink.berkeley.edu)

 *   Greg Alexander (galexand@acm.org)

 *

 * For the TDA9875 part:

 * Copyright (c) 2000 Guillaume Delvit based on Gerd Knorr source

 * and Eric Sandeen

 *

 * Copyright(c) 2005-2008 Mauro Carvalho Chehab

 *	- Some cleanups, code fixes, etc

 *	- Convert it to V4L2 API

 *

 * This code is placed under the terms of the GNU General Public License

 *

 * OPTIONS:

 *   debug - set to 1 if you'd like to see debug messages

 *

 ---------------------------------------------------------------------- */

 insmod args                                                            */

 insmod parameter */

 ---------------------------------------------------------------------- */

 our structs                                                            */

 i2c command */

 # of bytes to send */

 addr, data, data, ... */

 chip description */

 chip name         */

 i2c address range */

 # of registers    */

 various i2c command sequences */

 which register has which value */

 initialize with (defaults to 65535/32768/32768 */

 functions to convert the values (v4l -> chip) */

 get/set mode */

 input switch register + values for v4l inputs */

 current state of the chip */

 volume/balance cluster */

	/* chip-specific description - should point to

 shadow register set */

 current settings */

 thread */

 ---------------------------------------------------------------------- */

 i2c I/O functions                                                      */

 FIXME: it seems that the shadow bytes are wrong below !*/

 update our shadow register set; print bytes if (debug > 0) */

 send data to the chip */

 ---------------------------------------------------------------------- */

/* kernel thread for doing i2c stuff asyncronly

 *   right now it is used only to check the audio mode (mono/stereo/whatever)

 *   some time after switching to another TV channel, then turn on stereo

 *   if available, ...

 don't do anything for radio */

 have a look what's going on */

 chip detected a new audio mode - set it */

 schedule next check */

 ---------------------------------------------------------------------- */

 audio chip descriptions - defines+functions for tda9840                */

 Dual sound identified          */

 Stereo sound identified        */

 Power-on reset detected if = 1 */

 Integration time 0.5s when set */

 Disables integrator function */

 lower 5 bits should be 0 */

 ---------------------------------------------------------------------- */

 audio chip descriptions - defines+functions for tda985x                */

 subaddresses for TDA9855 */

 Volume, right */

 Volume, left */

 Bass */

 Treble */

 Subwoofer - not connected on DTV2000 */

 subaddresses for TDA9850 */

 Control 1 for TDA9850 */

 subaddesses for both chips */

 Control 2 for TDA9850, Control 1 for TDA9855 */

 Control 3 for TDA9850, Control 2 for TDA9855 */

 Control 4 for TDA9850, Control 3 for TDA9855 */

 Alignment 1 for both chips */

 Alignment 2 for both chips */

 Alignment 3 for both chips */

 Masks for bits in TDA9855 subaddresses */

 0x00 - VR in TDA9855 */

 0x01 - VL in TDA9855 */

/* lower 7 bits control gain from -71dB (0x28) to 16dB (0x7f)

 0x02 - BA in TDA9855 */

/* lower 5 bits control bass gain from -12dB (0x06) to 16.5dB (0x19)

 0x03 - TR in TDA9855 */

/* 4 bits << 1 control treble gain from -12dB (0x3) to 12dB (0xb)

 Masks for bits in both chips' subaddresses */

 0x04 - SW in TDA9855, C4/Control 1 in TDA9850 */

 Unique to TDA9855: */

/* 4 bits << 2 control subwoofer/surround gain from -14db (0x1) to 14db (0xf)

 Unique to TDA9850: */

/* lower 4 bits control stereo noise threshold, over which stereo turns off

 0x05 - C5 - Control 1 in TDA9855 , Control 2 in TDA9850*/

 Unique to TDA9855: */

 GMU, Mute at outputs */

 AVL, Automatic Volume Level */

 Loudness, 1==off */

 Surround / Subwoofer 1==.5(L-R) 0==.5(L+R) */

			     /* Bits 0 to 3 select various combinations

			      * of line in and line out, only the

 Selects inputs LIR and LIL.  Pins 41 & 12 */

 Selects inputs LOR and LOL.  (internal) */

 Unique to TDA9850:  */

/* lower 4 bits control SAP noise threshold, over which SAP turns off

 0x06 - C6 - Control 2 in TDA9855, Control 3 in TDA9850 */

 Common to TDA9855 and TDA9850: */

 Selects SAP output, mute if not received */

 Selects Mono on left, SAP on right */

 Selects Stereo output, mono if not received */

 Forces Mono output */

 Mute (LOR/LOL for 9855, OUTL/OUTR for 9850) */

 Unique to TDA9855: */

 If set, don't mute till zero crossing */

 If set, don't change volume till zero crossing*/

 Linear Stereo */

 Pseudo Stereo */

 Spatial Stereo, 30% anti-phase crosstalk */

 Spatial Stereo, 52% anti-phase crosstalk */

 Forced mono - mono select elseware, so useless*/

 0x07 - C7 - Control 3 in TDA9855, Control 4 in TDA9850 */

 Common to both TDA9855 and TDA9850: */

/* lower 4 bits control input gain from -3.5dB (0x0) to 4dB (0xF)

 0x08, 0x09 - A1 and A2 (read/write) */

 Common to both TDA9855 and TDA9850: */

/* lower 5 bites are wideband and spectral expander alignment

 Stereo Pilot/detect (read-only) */

 SAP Pilot/detect (read-only) */

 Stereo trigger 1= <35mV 0= <30mV (write-only)*/

 0x0a - A3 */

 Common to both TDA9855 and TDA9850: */

/* lower 3 bits control timing current for alignment: -30% (0x0), -20% (0x1),

 Stereo adjust on/off (wideband and spectral */

 Add mono mode regardless of SAP and stereo */

 Allows forced mono */

 ---------------------------------------------------------------------- */

 audio chip descriptions - defines+functions for tda9873h               */

 Subaddresses for TDA9873H */

 Switching                    */

 Adjust                       */

 Port                         */

/* Subaddress 0x00: Switching Data

 * B7..B0:

 *

 * B1, B0: Input source selection

 *  0,  0  internal

 *  1,  0  external stereo

 *  0,  1  external mono

/*    B3, B2: output signal select

 * B4    : transmission mode

 *  0, 0, 1   Mono

 *  1, 0, 0   Stereo

 *  1, 1, 1   Stereo (reversed channel)

 *  0, 0, 0   Dual AB

 *  0, 0, 1   Dual AA

 *  0, 1, 0   Dual BB

 *  0, 1, 1   Dual BA

/* output level controls

 * B5:  output level switch (0 = reduced gain, 1 = normal gain)

 * B6:  mute                (1 = muted)

 * B7:  auto-mute           (1 = auto-mute enabled)

 Subaddress 0x01:  Adjust/standard */

/* Lower 4 bits (C3..C0) control stereo adjustment on R channel (-0.6 - +0.7 dB)

 * Recommended value is +0 dB

 0dB gain */

/* Bits C6..C4 control FM stantard

 * C6, C5, C4

 *  0,  0,  0   B/G (PAL FM)

 *  0,  0,  1   M

 *  0,  1,  0   D/K(1)

 *  0,  1,  1   D/K(2)

 *  1,  0,  0   D/K(3)

 *  1,  0,  1   I

/* C7 controls identification response time (1=fast/0=normal)

 Subaddress 0x02: Port data */

/* E1, E0   free programmable ports P1/P2

    0,  0   both ports low

    0,  1   P1 high

    1,  0   P2 high

    1,  1   both ports high

 E2: test port */

/* E5..E3 control mono output channel (together with transmission mode bit B4)

 *

 * E5 E4 E3 B4     OUTM

 *  0  0  0  0     mono

 *  0  0  1  0     DUAL B

 *  0  1  0  1     mono (from stereo decoder)

 Status bits: (chip read) */

 Power-on reset detected if = 1 */

 Stereo sound is identified     */

 Dual sound is identified       */

	int adj_data = chip->shadow.bytes[TDA9873_AD+1] ; */

 ---------------------------------------------------------------------- */

 audio chip description - defines+functions for tda9874h and tda9874a   */

 Dariusz Kowalewski <darekk@automex.pl>                                 */

 Subaddresses for TDA9874H and TDA9874A (slave rx) */

 AGC gain */

 general config */

 monitor select */

 carrier 1 freq. */

 carrier 1 freq. */

 carrier 1 freq. */

 carrier 2 freq. */

 carrier 2 freq. */

 carrier 2 freq. */

 demodulator config */

 FM de-emphasis */

 FM dematrix */

 ch.1 output level adj. */

 ch.2 output level adj. */

 NICAM config */

 NICAM output level adj. */

 NICAM lower error limit */

 NICAM upper error limit */

 audio mute control */

 stereo DAC output select */

 analog output select */

 digital audio interface config */

 I2S-bus output select */

 I2S-bus output level adj. */

 mono DAC output select (tda9874a) */

 easy standard progr. (tda9874a) */

 Subaddresses for TDA9874H and TDA9874A (slave tx) */

 device status */

 NICAM status */

 NICAM error count */

 add. data LSB */

 add. data MSB */

 monitor level read-out LSB */

 monitor level read-out MSB */

 SIF level */

 test reg. 2 */

 test reg. 1 */

 device id. code */

 software id. code */

 0: A2, 1: NICAM */

 default config. input pin: SIFSEL=0 */

 default NICAM config.: AMSEL=0,AMUTE=1 */

 default standard: NICAM D/K */

 device id. code */

 insmod options for tda9874a */

/*

 * initialization table for tda9874 decoder:

 *  - carrier 1 freq. registers (3 bytes)

 *  - carrier 2 freq. registers (3 bytes)

 *  - demudulator config register

 *  - FM de-emphasis register (slow identification mode)

 * Note: frequency registers must be written in single i2c transfer.

 default */

 0 dB */

 dic == 0x07 */

 0 dB */

 0 dB */

 0 dB */

 Note: If signal quality is poor you may want to change NICAM */

 error limit registers (NLELR and NUELR) to some greater values. */

 Then the sound would remain stereo, but won't be so clear. */

 default */

 default */

 dic == 0x07 */

 or 0x10 */

 just for debugging */

 need to store dsr/nsr somewhere */

		/* Note: DSR.RSSF and DSR.AMSTAT bits are also checked.

		 * If NICAM auto-muting is enabled, DSR.AMSTAT=1 indicates

		 * that sound has (temporarily) switched from NICAM to

		 * mono FM (or AM) on 1st sound carrier due to high NICAM bit

		 * error count. So in fact there is no stereo in this case :-(

		 * But changing the mode to V4L2_TUNER_MODE_MONO would switch

		 * external 4052 multiplexer in audio_hook().

 NSR.S/MB=1 */

 NSR.D/SB=1 */

 DSR.IDSTE=1 */

 DSR.IDDUA=1 */

 Disable/enable NICAM auto-muting (based on DSR.RSSF status bit). */

 If auto-muting is disabled, we can hear a signal of degrading quality. */

 DSR.RSSF=1 */

 enable */

 disable */

	/* Note: TDA9874A supports automatic FM dematrixing (FMMR register)

	 * and has auto-select function for audio output (AOSR register).

	 * Old TDA9874H doesn't support these features.

	 * TDA9874A also has additional mono output pin (OUTM), which

	 * on same (all?) tv-cards is not used, anyway (as well as MONOIN).

 auto-select, dual A/A */

 auto-select, dual B/B */

 always route L to L and R to R */

 dic == 0x07 */

 mono */

 A/A */

 handled by NICAM auto-mute */

 stereo */

 dual */

 dual A/A */

 dual */

 dual B/B */

 dual */

 dual A/B */

 device id. and software id. codes */

 remember device id. */

 not found */

 sound IF input 1 */

 sound IF input 2 */

 auto-mute: analog mono input */

 auto-mute: 1st carrier FM or AM */

 ---------------------------------------------------------------------- */

 audio chip description - defines+functions for tda9875                 */

/* The TDA9875 is made by Philips Semiconductor

 * http://www.semiconductors.philips.com

 * TDA9875: I2C-bus controlled DSP audio processor, FM demodulator

 *

 subaddresses for TDA9875 */

General mute  (value --> 0b11001100*/

 Config register (value --> 0b00000000 */

DAC i/o select (ADC) 0b0000100*/

Line output select regirter 0b0100 0001*/

Channel 1 volume (mute)*/

Channel 2 volume (mute)*/

SCART 1 in (mono)*/

SCART 2 in (mono)*/

ADC input select (mono) 0b0110 000*/

Audio effect (AVL+Pseudo) 0b0000 0110*/

Main channel select (DAC) 0b0000100*/

 Main volume gauche */

 Main volume droite */

 Main Basse */

 Main treble */

 Auxiliary channel select (FM) 0b0000000*/

 Auxiliary volume gauche */

 Auxiliary volume droite */

 Auxiliary Basse */

 Auxiliary treble */

 Monitor select register */

 Carrier 1 (FM) frequency register MSB */

 Carrier 1 (FM) frequency register (16-8]b */

 Carrier 1 (FM) frequency register LSB */

 Carrier 2 (nicam) frequency register MSB */

 Carrier 2 (nicam) frequency register (16-8]b */

 Carrier 2 (nicam) frequency register LSB */

 Demodulateur configuration regirter*/

 FM de-emphasis regirter*/

 FM Matrix regirter*/

 values */

 general mute */

 general no mute */

reg de config 0 (reset)*/

 Monitor 0b00000XXX*/

Car1(FM) MSB XMHz*/

Car1(FM) MIB XMHz*/

Car1(FM) LSB XMHz*/

Car2(NICAM) MSB XMHz*/

Car2(NICAM) MIB XMHz*/

Car2(NICAM) LSB XMHz*/

Demod config 0x00*/

DE-Emph 0b0100 0100*/

FM Matrix reg 0x00*/

 SCART 1 (SC1)*/

 SCART 2 (sc2)*/

 Channel volume 1 mute*/

 Channel volume 2 mute */

 sig DAC i/o(in:nicam)*/

 sig ADC input(in:mono)*/

 line out (in:mono)*/

06 Effect (AVL+PSEUDO) */

 Main ch select (DAC) */

 Vol Main left 10dB */

 Vol Main right 10dB*/

 Main Bass Main 0dB*/

 Main Treble Main 0dB*/

 Aux chan select (dac)*/

 Vol Aux left 0dB*/

 Vol Aux right 0dB*/

 Aux Bass Main 0dB*/

 Aux Aigus Main 0dB*/

 General mute  */

 ----------------------------------------------------------------------- */

/* *********************** *

 * i2c interface functions *

 tda9875 and tda9875A */

 ---------------------------------------------------------------------- */

 audio chip descriptions - defines+functions for tea6420                */

 volume left */

 volume right */

 bass */

 treble */

 fader control */

 switch register */

 values for those registers: */

 stereo A input */

 stereo B */

 stereo C */

 general mute */

 volume (0-5)/loudness off (6)/zero crossing mute(7) */

 fader front right (0-5) */

 fader front left (0-5) */

 fader rear right (0-5) */

 fader rear left (0-5) */

 bass (0-4) */

 treble (0-4) */

 switch register */

 values for those registers: */

 stereo A input */

 stereo B */

 stereo C */

 stereo D */

 general mute */

 stereo A input */

 stereo B */

 stereo C */

 stereo D */

 stereo E */

 general mute */

 Assumes 16bit input (values 0x3f to 0x0c are unique, values less than */

 0x0c mirror those immediately higher) */

 ---------------------------------------------------------------------- */

 audio chip descriptions - defines+functions for tda8425                */

 volume left */

 volume right */

 bass */

 treble */

 switch functions */

 values for those registers: */

 audio off (mute on) */

 audio channel 1 (mute off) - "linear stereo" mode */

 audio channel 2 (mute off) - "linear stereo" mode */

 mute bit */

 stereo bits */

 spatial stereo */

 linear stereo */

 pseudo stereo */

 forced mono */

 language selector */

 sound a */

 sound b */

 stereo */

 channel selector */

 ---------------------------------------------------------------------- */

 audio chip descriptions - defines+functions for pic16c54 (PV951)       */

 the registers of 16C54, I2C sub address. */

 Not use. */

 bit definition of the RESET register, I2C data. */

 bit 0, Reset to receive the key */

        code of remote controller */

 bit 1 */

 bit 2 */

 bit 3 */

 bit 4, Mute Audio(Line-in and Tuner) */

 bit 5 */

 bit 6	, Switch to Line-in */

 bit 7	, Switch to Tuner */

 ---------------------------------------------------------------------- */

 audio chip descriptions - defines+functions for TA8874Z                */

 write 1st byte */

 write 2nd byte */

#define TA8874Z_TI	0x80  */ 
 read */

/*

 *        B1 B0

 * mono    L  H

 * stereo  L  L

 * BIL     H  L

	/* v4l2_dbg(1, debug, &chip->sd,

		 "ta8874z_getrxsubchans(): raw chip read: 0x%02x, return: 0x%02x\n",

 ---------------------------------------------------------------------- */

 audio chip descriptions - struct CHIPDESC                              */

 insmod options to enable/disable individual audio chips */

 default 0 - address clash with msp34xx */

 default 0 - address clash with msp34xx */

 default 0 - address clash with tda9840 */

 callbacks */

 ,TDA9840_SW, TDA9840_MONO */} }

 callbacks */

 callbacks */

 callbacks */

 callbacks */

 callbacks */

 callbacks */

 callbacks */

 callbacks */

 EOF */

 ---------------------------------------------------------------------- */

 ---------------------------------------------------------------------- */

 video4linux interface                                                  */

 del_timer(&chip->wt); */

 There are four inputs: tuner, radio, extern and intern. */

	/* For chips that provide getrxsubchans and setaudmode, and doesn't

	   automatically follows the stereo carrier, a kthread is

	   created to set the audio standard. In this case, when then

	   the video channel is changed, tvaudio starts on MONO mode.

	   After waiting for 2 seconds, the kernel thread is called,

	   to follow whatever audio standard is pointed by the

	   audio carrier.

 reset previous mode */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 i2c registration                                                       */

 find description for the chip */

 fill required data structures */

 initialization  */

			/* This shouldn't be happen. Warn user, but keep working

			   without volume controls

			/* This shouldn't be happen. Warn user, but keep working

			   without bass/treble controls

 set controls to the default values */

			/* This shouldn't be happen. Warn user, but keep working

			   without kthread

 start async thread */

 shutdown async thread */

/* This driver supports many devices and the idea is to let the driver

   detect which device is present. So rather than listing all supported

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for the OV5645 camera sensor.

 *

 * Copyright (c) 2011-2015, The Linux Foundation. All rights reserved.

 * Copyright (C) 2015 By Tech Design S.L. All Rights Reserved.

 * Copyright (C) 2012-2013 Freescale Semiconductor, Inc. All Rights Reserved.

 *

 * Based on:

 * - the OV5645 driver from QC msm-3.10 kernel on codeaurora.org:

 *   https://us.codeaurora.org/cgit/quic/la/kernel/msm-3.10/tree/drivers/

 *       media/platform/msm/camera_v2/sensor/ov5645.c?h=LA.BR.1.2.4_rb1.41

 * - the OV5640 driver posted on linux-media:

 *   https://www.mail-archive.com/linux-media%40vger.kernel.org/msg92671.html

/*

 regulator supplies */

 Digital I/O (1.8V) supply */

 Analog (2.8V) supply */

 Digital Core (1.5V) supply */

 Cached register values */

 lock to protect power state */

 an index in link_freq[] */

 an index in link_freq[] */

 an index in link_freq[] */

 V4L2_EXPOSURE_MANUAL */

	/* If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

 Update the power count. */

 get system clock (xclk) */

 external clock must be 24MHz, allow 1% tolerance */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

 saa711x - Philips SAA711x video decoder driver

 This driver can work with saa7111, saa7111a, saa7113, saa7114,

			     saa7115 and saa7118.



 Based on saa7114 driver by Maxim Yevtyushkin, which is based on

 the saa7111 driver by Dave Perks.



 Copyright (C) 1998 Dave Perks <dperks@ibm.net>

 Copyright (C) 2002 Maxim Yevtyushkin <max@linuxmedialabs.com>



 Slight changes for video timing and attachment output by

 Wolfgang Scherr <scherr@net4you.net>



 Moved over to the linux >= 2.4.x i2c protocol (1/1/2003)

 by Ronald Bultje <rbultje@ronald.bitfreak.net>



 Added saa7115 support by Kevin Thayer <nufan_wfk at yahoo.com>

 (2/17/2003)



 VBI support (2004) and cleanups (2005) by Hans Verkuil <hverkuil@xs4all.nl>



 Copyright (c) 2005-2006 Mauro Carvalho Chehab <mchehab@kernel.org>

	SAA7111, SAA7113 and SAA7118 support

 chroma gain control cluster */

 ----------------------------------------------------------------------- */

 Sanity routine to check if a register is present */

 common for saa7113/4/5/8 */

		/* According with datasheets, reserved regs should be

 ----------------------------------------------------------------------- */

 SAA7111 initialization table */

 reserved */

front end */

 FUSE=3, GUDL=2, MODE=0 */

	R_03_INPUT_CNTL_2, 0x23,	/* HLNRS=0, VBSL=1, WPOFF=0, HOLDG=0,

 GAI1=256 */

 GAI2=256 */

 decoder */

	R_06_H_SYNC_START, 0xf3,	/* HSB at  13(50Hz) /  17(60Hz)

	R_07_H_SYNC_STOP, 0xe8,		/* HSS seems to be needed to

	R_08_SYNC_CNTL, 0xc8,		/* AUFD=1, FSEL=1, EXFIL=0,

	R_09_LUMA_CNTL, 0x01,		/* BYPS=0, PREF=0, BPSS=0,

 0b - CONT=1.109 */

	R_0E_CHROMA_CNTL_1, 0x01,	/* 0e - CDTO=0, CSTD=0, DCCF=0,

 reserved */

 10 - OFTS=1, HDEL=0, VRLN=1, YDEL=0 */

	R_11_MODE_DELAY_CNTL, 0x1c,	/* 11 - GPSW=0, CM99=0, FECO=0, COMPO=1,

 12 - output control 2 */

 13 - output control 3 */

/*

 * This table has one illegal value, and some values that are not

 * correct according to the datasheet initialization table.

 *

 *  If you need a table with legal/default values tell the driver in

 *  i2c_board_info.platform_data, and you will get the gm7113c_init

 *  table instead.

 SAA7113 Init codes */

	R_06_H_SYNC_START, 0x89,	/* Illegal value -119,

	R_08_SYNC_CNTL, 0x88,		/* Not datasheet default.

	R_10_CHROMA_CNTL_2, 0x08,	/* Not datsheet default.

	R_12_RT_SIGNAL_CNTL, 0x07,	/* Not datasheet default,

/*

 * GM7113C is a clone of the SAA7113 chip

 *  This init table is copied out of the saa7113 datasheet.

 *  In R_08 we enable "Automatic Field Detection" [AUFD],

 *  this is disabled when saa711x_set_v4lstd is called.

/* If a value differs from the Hauppauge driver values, then the comment starts with

   'was 0xXX' to denote the Hauppauge value. Otherwise the value is identical to what the

 SAA7114 and SAA7115 initialization table */

 Front-End Part */

 white peak control disabled */

 was 0x30. 0x20: long vertical blanking */

 analog gain set to 0 */

 analog gain set to 0 */

 Decoder Part */

 horiz sync begin = -21 */

 horiz sync stop = -17 */

 0x53, was 0x56 for 60hz. luminance control */

 was 0x88. decoder brightness, 0x80 is itu standard */

 was 0x48. decoder contrast, 0x44 is itu standard */

 was 0x47. decoder saturation, 0x40 is itu standard */

 use automatic gain  */

 chroma: active adaptive combfilter */

 RTS0 output control: VGATE */

 ITU656 standard mode, RTCO output enable RTCE */

 gain 0x00 = nominal */

 recommended value */

 recommended value */

 recommended value */

 recommended value */

 No tasks enabled at init */

 Power Device Control */

 reset device */

 set device programmed, all in operational mode */

 Used to reset saa7113, saa7114 and saa7115 */

 disable I-port output */

 reset scaler */

 activate scaler */

 enable I-port output */

 ============== SAA7715 VIDEO templates =============  */

 reset tasks */

 reset scaler */

 0xBO: auto detection, 0x68 = NTSC */

 video autodetection is on */

 standard 60hz value for ITU656 line counting */

 Task A */

 hoffset low (input), 0x0002 is minimum */

 hsize low (input), 0x02d0 = 720 */

 Task B */

 0x0002 is minimum */

 0x02d0 = 720 */

 vwindow start 0x12 = 18 */

 vwindow length 0xf8 = 248 */

 hwindow 0x02d0 = 720 */

 Set PLL Register. 60hz 525 lines per frame, 27 MHz */

 low bit with 0xF0 */

 reset scaler */

 VGATE start */

 0x28 = PAL */

 standard 50hz value */

 Task A */

 This is weird: the datasheet says that you should use 2 as the minimum value, */

 but Hauppauge uses 0, and changing that to 2 causes indeed problems (for 50hz) */

 hoffset low (input), 0x0002 is minimum */

 hsize low (input), 0x02d0 = 720 */

 vsize 0x12 = 18 */

 hsize 0x05a0 = 1440 */

 hsize hi (output) */

 vsize low (output), 0x12 = 18 */

 vsize hi (output) */

 Task B */

 This is weird: the datasheet says that you should use 2 as the minimum value, */

 but Hauppauge uses 0, and changing that to 2 causes indeed problems (for 50hz) */

 hoffset low (input), 0x0002 is minimum. See comment above. */

 hsize 0x02d0 = 720 */

 voffset 0x16 = 22 */

 vsize 0x0120 = 288 */

 hsize 0x02d0 = 720 */

 Set PLL Register. 50hz 625 lines per frame, 27 MHz */

 low bit with 0xF0, (was 0x05) */

 ============== SAA7715 VIDEO templates (end) =======  */

 reset tasks */

 reset scaler */

 Activate both tasks */

 activate scaler */

 Enable I-port output */

 reset tasks */

 reset scaler */

 Activate only task "B" */

 activate scaler */

 Enable I-port output */

 Task A */

 Configure controls at nominal value*/

 note: 2 x zoom ensures that VBI lines have same length as video lines. */

 must be horiz lum scaling / 2 */

 must be offset luma / 2 */

 Task B */

 Configure controls at nominal value*/

 hor lum scaling 0x0400 = 1 */

 must be hor lum scaling / 2 */

 must be offset luma / 2 */

 crystal clock = 24.576 MHz, target = 27MHz */

 not the recommended settings! */

 PLL2 lock detection settings: 71 lines 50% phase error */

 Turn off VBI */

 No framing code errors allowed. */

 input tuner -> input 4, amplifier active */

 enable task B */

 reg 0x3a, audio clock control */

 Checks for chips that don't have audio clock (saa7111, saa7113) */

 sanity check */

 hz is the refresh rate times 100 */

 acpf = (256 * freq) / field_frequency == (256 * 100 * freq) / hz */

	/* acni = (256 * freq * 2^23) / crystal_frequency =

		  (freq * 2^(8+23)) / crystal_frequency =

 chroma gain cluster */

 chroma gain cluster */

 FIXME need better bounds checking here */

 Decoder only supports 720 columns and 480 or 576 lines */

 probably have a valid size, let's set it */

 Set output width/height */

 width */

 Vertical Scaling uses height/2 */

 On 60Hz, it is using a higher Vertical Output Size */

 height */

 Scaling settings */

 Hprescaler is floor(inres/outres) */

 0 is not allowed (div. by zero) */

	/* FIXME hardcodes to "Task B"

 write H fine-scaling (luminance) */

	/* write H fine-scaling (chrominance)

 Correct Contrast and Luminance */

 write V fine-scaling (luminance) */

 write V fine-scaling (chrominance) */

 Activates task "B" */

	/* Prevent unnecessary standard changes. During a standard

	   change the I-Port is temporarily disabled. Any devices

	   reading from that port can get confused.

	   Note that s_std is also used to switch from

	   radio to TV mode, so if a s_std is broadcast to

	   all I2C devices then you do not want to have an unwanted

 This works for NTSC-M, SECAM-L and the 50Hz PAL variants.

	/* Register 0E - Bits D6-D4 on NO-AUTO mode

		(SAA7111 and SAA7113 doesn't have auto mode)

	    50 Hz / 625 lines           60 Hz / 525 lines

	000 PAL BGDHI (4.43Mhz)         NTSC M (3.58MHz)

	001 NTSC 4.43 (50 Hz)           PAL 4.43 (60 Hz)

	010 Combination-PAL N (3.58MHz) NTSC 4.43 (60 Hz)

	011 NTSC N (3.58MHz)            PAL M (3.58MHz)

	100 reserved                    NTSC-Japan (3.58MHz)

 restart task B if needed */

 switch audio mode too! */

 setup the sliced VBI lcr registers according to the sliced VBI format */

 saa7113/7114/7118 VBI support are experimental */

 SAA7113 and SAA7118 also should support VBI - Need testing */

 raw VBI */

 sliced VBI */

 first clear lines that cannot be captured */

 Now set the lcr values according to the specified service */

 write the lcr registers */

 enable/disable raw VBI capturing */

 1 */

 4 */

 5 */

 7 */

 done if using raw VBI */

/* Decode the sliced VBI data stream as created by the saa7115.

   The format is described in the saa7115 datasheet in Tables 25 and 26

   and in Figure 33.

   The current implementation uses SAV/EAV codes and not the ancillary data

   headers. The vbi->p pointer points to the R_5E_SDID byte right after the SAV

 the ID1 and ID2 bytes from the internal header */

 mark result as a failure */

 Note: the field bit is inverted for 60 Hz video */

 Skip internal header, p now points to the start of the payload */

 calculate field and line number of the VBI packet (1-23) */

 Obtain data type */

	/* If the VBI slicer does not detect any signal it will fill up

 decode payloads */

 ============ SAA7115 AUDIO settings (end) ============= */

 saa7111/3 does not have these inputs */

 saa7111 has slightly different input numbering */

 saa7111 specific */

 select mode */

 bypass chrominance trap for S-Video modes */

	/* Note: the internal field ID is inverted for NTSC,

	   so data->field 0 maps to the saa7115 even field,

 CC */

 XDS */

	/*

	 * The V4L2 core already initializes std with all supported

	 * Standards. All driver needs to do is to mask it, to remove

	 * standards that don't apply from the mask

			/*

			 * V4L2_STD_PAL just cover the european PAL standards.

			 * This is wrong, as the device could also be using an

			 * other PAL standard.

 Can't detect anything */

 horizontal/vertical not locked */

 status for the saa7114 */

 status for the saa7115 */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

		/* According to the datasheet,

/**

 * saa711x_detect_chip - Detects the saa711x (or clone) variant

 * @client:		I2C client structure.

 * @id:			I2C device ID structure.

 * @name:		Name of the device to be filled.

 *

 * Detects the Philips/NXP saa711x chip, or some clone of it.

 * if 'id' is NULL or id->driver_data is equal to 1, it auto-probes

 * the analog demod.

 * If the tuner is not found, it returns -ENODEV.

 * If auto-detection is disabled and the tuner doesn't match what it was

 *	required, it returns -EINVAL and fills 'name'.

 * If the chip is found, it returns the chip ID and fills 'name'.

 Read the chip version register */

 Check if it is a Philips/NXP chip */

 Check if it is a gm7113c */

		/*

		 * Note: From the datasheet, only versions 1 and 2

		 * exists. However, tests on a device labeled as:

		 * "GM7113C 1145" returned "10" on all 16 chip

		 * version (reg 0x00) reads. So, we need to also

		 * accept at least version 0. For now, let's just

		 * assume that a device that returns "0000" for

		 * the lower nibble is a gm7113c.

 Check if it is a CJC7113 */

 CJC7113 seems to be SAA7113-compatible */

 Chip was not discovered. Return its ID and don't bind */

 Check if the adapter supports the needed features */

 Chip exists, but doesn't match */

 add in ascending ID order */

 init to 60hz/48khz */

 ----------------------------------------------------------------------- */

 autodetect */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2020 Kévin L'hôpital <kevin.lhopital@bootlin.com>

 * Copyright 2020 Bootlin

 * Author: Paul Kocialkowski <paul.kocialkowski@bootlin.com>

 Clock rate */

 Register definitions */

 System */

 Exposure/gain */

 Timing */

 PSRAM */

 Black Level */

 VFIFO */

 MIPI */

 ISP */

 VarioPixel */

 Pre-DSP */

 Macros */

 Data structures */

/*

 * PLL1 Clock Tree:

 *

 * +-< EXTCLK

 * |

 * +-+ pll_pre_div_half (0x30a [0])

 *   |

 *   +-+ pll_pre_div (0x300 [2:0], special values:

 *     |              0: 1, 1: 1.5, 3: 2.5, 4: 3, 5: 4, 7: 8)

 *     +-+ pll_mul (0x301 [1:0], 0x302 [7:0])

 *       |

 *       +-+ m_div (0x303 [3:0])

 *       | |

 *       | +-> PHY_SCLK

 *       | |

 *       | +-+ mipi_div (0x304 [1:0], special values: 0: 4, 1: 5, 2: 6, 3: 8)

 *       |   |

 *       |   +-+ pclk_div (0x3020 [3])

 *       |     |

 *       |     +-> PCLK

 *       |

 *       +-+ sys_pre_div (0x305 [1:0], special values: 0: 3, 1: 4, 2: 5, 3: 6)

 *         |

 *         +-+ sys_div (0x306 [0])

 *           |

 *           +-+ sys_sel (0x3032 [7], 0: PLL1, 1: PLL2)

 *             |

 *             +-+ sclk_sel (0x3033 [1], 0: sys_sel, 1: PLL2 DAC_CLK)

 *               |

 *               +-+ sclk_pre_div (0x3106 [3:2], special values:

 *                 |               0: 1, 1: 2, 2: 4, 3: 1)

 *                 |

 *                 +-+ sclk_div (0x3106 [7:4], special values: 0: 1)

 *                   |

 *                   +-> SCLK

/*

 * PLL2 Clock Tree:

 *

 * +-< EXTCLK

 * |

 * +-+ pll_pre_div_half (0x312 [4])

 *   |

 *   +-+ pll_pre_div (0x30b [2:0], special values:

 *     |              0: 1, 1: 1.5, 3: 2.5, 4: 3, 5: 4, 7: 8)

 *     +-+ pll_mul (0x30c [1:0], 0x30d [7:0])

 *       |

 *       +-+ dac_div (0x312 [3:0])

 *       | |

 *       | +-> DAC_CLK

 *       |

 *       +-+ sys_pre_div (0x30f [3:0])

 *         |

 *         +-+ sys_div (0x30e [2:0], special values:

 *           |          0: 1, 1: 1.5, 3: 2.5, 4: 3, 5: 3.5, 6: 4, 7:5)

 *           |

 *           +-+ sys_sel (0x3032 [7], 0: PLL1, 1: PLL2)

 *             |

 *             +-+ sclk_sel (0x3033 [1], 0: sys_sel, 1: PLL2 DAC_CLK)

 *               |

 *               +-+ sclk_pre_div (0x3106 [3:2], special values:

 *                 |               0: 1, 1: 2, 2: 4, 3: 1)

 *                 |

 *                 +-+ sclk_div (0x3106 [7:4], special values: 0: 1)

 *                   |

 *                   +-> SCLK

/*

 * General formulas for (array-centered) mode calculation:

 * - photo_array_width = 3296

 * - crop_start_x = (photo_array_width - output_size_x) / 2

 * - crop_end_x = crop_start_x + offset_x + output_size_x - 1

 *

 * - photo_array_height = 2480

 * - crop_start_y = (photo_array_height - output_size_y) / 2

 * - crop_end_y = crop_start_y + offset_y + output_size_y - 1

 With auto size, only output and total sizes need to be set. */

 Bits for the format register, used for binning. */

 Static definitions */

/*

 * EXTCLK = 24 MHz

 * PHY_SCLK = 720 MHz

 * MIPI_PCLK = 90 MHz

/*

 * EXTCLK = 24 MHz

 * DAC_CLK = 360 MHz

 * SCLK = 144 MHz

/*

 * EXTCLK = 24 MHz

 * DAC_CLK = 360 MHz

 * SCLK = 80 MHz

 Sensor */

 PSRAM */

 ADC Sync */

 Sensor */

 PSRAM */

 ADC Sync */

 3264x2448 */

 Horizontal */

 Vertical */

 Subsample increase */

 VFIFO */

 Black Level */

 Frame Interval */

 PLL */

 Registers */

 3264x1836 */

 Horizontal */

 Vertical */

 Subsample increase */

 VFIFO */

 Black Level */

 Frame Interval */

 PLL */

 Registers */

 1632x1224 */

 Horizontal */

 Vertical */

 Subsample increase */

 Binning */

 VFIFO */

 Black Level */

 Frame Interval */

 PLL */

 Registers */

 800x600 (SVGA) */

 Horizontal */

 Vertical */

 Subsample increase */

 Binning */

 VFIFO */

 Black Level */

 Frame Interval */

 PLL */

 Registers */

 Analog */

 Sensor */

 ADC Sync */

 Input/Output */

 Sensor */

	/*

	 * This value might need to change depending on PCLK rate,

	 * but it's unclear how. This value seems to generally work

	 * while the default value was found to cause transmission errors.

 Trigger BLC on relevant events and enable filter. */

 Lower BLC offset trigger threshold. */

 Increase BLC offset maximum limit. */

 Disable lens correction. */

 VarioPixel coefs needs to be > 1. */

 Note that a zero value for blc_col_shift_mask is the default 256. */

 BLC top zero line */

 BLC top black line */

 BLC bottom zero line */

 BLC bottom black line */

 BLC anchor */

 Output Size X */

 Horizontal Total Size */

 Output Size Y */

 Vertical Total Size */

 Auto Size */

 Crop Start X */

 Offset X */

 Crop End X */

 Crop Start Y */

 Offset Y */

 Crop End Y */

 VFIFO */

 Binning */

 Black Level */

 PLLs */

 Extra registers */

 Exposure */

 Gain */

 White Balance */

 Flip */

 Test Pattern */

 State */

 State will be configured at first power on otherwise. */

 Sensor Base */

 Configure current mode. */

 Keep initialized to zero for disable label. */

 Time to enter streaming mode according to power timings. */

 Controls */

 Wait for the sensor to be on before setting controls. */

 Use our mutex for ctrl locking. */

 Exposure */

 Gain */

 White Balance */

 Flip */

 Test Pattern */

 MIPI CSI-2 */

 Subdev Video Operations */

 Subdev Pad Operations */

 Try to find requested mbus code. */

 Fallback to default. */

 Find the mode with nearest dimensions. */

	/*

	 * Multiple modes with the same dimensions may have different frame

	 * intervals, so look up each relevant mode.

 Graph Endpoint */

 GPIOs */

 Regulators */

 DVDD: digital core */

 DOVDD: digital I/O */

 AVDD: analog */

 External Clock */

 Subdev, entity and pad */

 Mutex */

 Sensor */

 Runtime PM */

 V4L2 subdev register */

 SPDX-License-Identifier: GPL-2.0

/*

 * imx274.c - IMX274 CMOS Image Sensor driver

 *

 * Copyright (C) 2017, Leopard Imaging, Inc.

 *

 * Leon Luo <leonl@leopardimaging.com>

 * Edwin Zou <edwinz@leopardimaging.com>

 * Luca Ceresoli <luca@lucaceresoli.net>

/*

 * See "SHR, SVR Setting" in datasheet

/*

 * See "Frame Rate Adjustment" in datasheet

/*

 * The input gain is shifted by IMX274_GAIN_SHIFT to get

 * decimal number. The real gain is

 * (float)input_gain_value / (1 << IMX274_GAIN_SHIFT)

/*

 * See "Analog Gain" and "Digital Gain" in datasheet

 * min gain is 1X

 * max gain is calculated based on IMX274_GAIN_REG_MAX

 for gain formula */

/*

 * 1 line time in us = (HMAX / 72), minimal is 4 lines

/*

 * register SHR is limited to (SVR value + 1) x VMAX value - 4

/*

 * Min and max sensor reset delay (microseconds)

/*

 * shift and mask constants

/*

 * IMX274 register definitions

 SHR */

 SHR */

 SVR */

 SVR */

 VMAX, MSB */

 VMAX */

 VMAX, LSB */

 HMAX */

 HMAX */

 ANALOG GAIN LSB */

 ANALOG GAIN MSB */

 Digital Gain */

 VERTICAL FLIP */

 TEST PATTERN */

 STANDBY */

 regulator supplies */

 IF (1.2V) supply */

 Digital Core (1.8V) supply */

 Analog (2.8V) supply */

/*

 * imx274 I2C operation related structure

/*

 * Parameters for each imx274 readout mode.

 *

 * These are the values to configure the sensor in one of the

 * implemented modes.

 *

 * @init_regs: registers to initialize the mode

 * @wbin_ratio: width downscale factor (e.g. 3 for 1280; 3 = 3840/1280)

 * @hbin_ratio: height downscale factor (e.g. 3 for 720; 3 = 2160/720)

 * @min_frame_len: Minimum frame length for each mode (see "Frame Rate

 *                 Adjustment (CSI-2)" in the datasheet)

 * @min_SHR: Minimum SHR register value (see "Shutter Setting (CSI-2)" in the

 *           datasheet)

 * @max_fps: Maximum frames per second

 * @nocpiop: Number of clocks per internal offset period (see "Integration Time

 *           in Each Readout Drive Mode (CSI-2)" in the datasheet)

/*

 * imx274 test pattern related structure

 VERTICAL STRIPE PATTERN 555H/AAAH */

 VERTICAL STRIPE PATTERN AAAH/555H */

 VERTICAL STRIPE PATTERN 000H/555H */

 VERTICAL STRIPE PATTERN 555H/000H */

 VERTICAL STRIPE PATTERN 000H/FFFH */

 VERTICAL STRIPE PATTERN FFFH/000H */

/*

 * All-pixel scan mode (10-bit)

 * imx274 mode1(refer to datasheet) register configuration with

 * 3840x2160 resolution, raw10 data and mipi four lane output

 output XVS, HVS */

/*

 * Horizontal/vertical 2/2-line binning

 * (Horizontal and vertical weightedbinning, 10-bit)

 * imx274 mode3(refer to datasheet) register configuration with

 * 1920x1080 resolution, raw10 data and mipi four lane output

 output XVS, HVS */

/*

 * Vertical 2/3 subsampling binning horizontal 3 binning

 * imx274 mode5(refer to datasheet) register configuration with

 * 1280x720 resolution, raw10 data and mipi four lane output

 output XVS, HVS */

/*

 * Vertical 2/8 subsampling horizontal 3 binning

 * imx274 mode6(refer to datasheet) register configuration with

 * 1280x540 resolution, raw10 data and mipi four lane output

 mode setting */

 mode setting */

 output XVS, HVS */

 mode setting */

/*

 * imx274 first step register configuration for

 * starting stream

 PLRD: clock settings */

 PLSTMG */

 PLSTMG01 */

 PSMIPI */

 PSMIPI1 */

/*

 * imx274 second step register configuration for

 * starting stream

 SYS_MODE = 2 */

/*

 * imx274 third step register configuration for

 * starting stream

 XHS VHS OUTPUT */

/*

 * imx274 register configuration for stopping stream

/*

 * imx274 disable test pattern register configuration

/*

 * imx274 test pattern register configuration

 * reg 0x303D defines the test pattern modes

 nocpiop happens to be the same number for the implemented modes */

 mode 1, 4K */

 3840 */

 2160 */

 mode 3, 1080p */

 1920 */

 1080 */

 mode 5, 720p */

 1280 */

 720 */

 mode 6, 540p */

 1280 */

 540 */

/*

 * struct imx274_ctrls - imx274 ctrl structure

 * @handler: V4L2 ctrl handler structure

 * @exposure: Pointer to expsure ctrl structure

 * @gain: Pointer to gain ctrl structure

 * @vflip: Pointer to vflip ctrl structure

 * @test_pattern: Pointer to test pattern ctrl structure

/*

 * struct stim274 - imx274 device structure

 * @sd: V4L2 subdevice structure

 * @pad: Media pad structure

 * @client: Pointer to I2C client

 * @ctrls: imx274 control structure

 * @crop: rect to be captured

 * @compose: compose rect, i.e. output resolution

 * @format: V4L2 media bus frame format structure

 *          (width and height are in sync with the compose rect)

 * @frame_rate: V4L2 frame rate structure

 * @regmap: Pointer to regmap structure

 * @reset_gpio: Pointer to reset gpio

 * @supplies: List of analog and digital supply regulators

 * @inck: Pointer to sensor input clock

 * @lock: Mutex structure

 * @mode: Parameters for the selected readout mode

 mutex lock for operations */

/*

 * Function declaration

/*

 * v4l2_ctrl and v4l2_subdev related operations

/*

 * Writing a register table

 *

 * @priv: Pointer to device

 * @table: Table containing register values (with optional delays)

 *

 * This is used to write register table into sensor's reg map.

 *

 * Return: 0 on success, errors otherwise

 Handle special address values */

/**

 * imx274_read_mbreg - Read a multibyte register.

 *

 * Uses a bulk read where possible.

 *

 * @priv: Pointer to device structure

 * @addr: Address of the LSB register.  Other registers must be

 *        consecutive, least-to-most significant.

 * @val: Pointer to store the register value (cpu endianness)

 * @nbytes: Number of bytes to read (range: [1..3]).

 *          Other bytes are zet to 0.

 *

 * Return: 0 on success, errors otherwise

/**

 * imx274_write_mbreg - Write a multibyte register.

 *

 * Uses a bulk write where possible.

 *

 * @priv: Pointer to device structure

 * @addr: Address of the LSB register.  Other registers must be

 *        consecutive, least-to-most significant.

 * @val: Value to be written to the register (cpu endianness)

 * @nbytes: Number of bytes to write (range: [1..3])

/*

 * Set mode registers to start stream.

 * @priv: Pointer to device structure

 *

 * Return: 0 on success, errors otherwise

/*

 * imx274_start_stream - Function for starting stream per mode index

 * @priv: Pointer to device structure

 *

 * Return: 0 on success, errors otherwise

	/*

	 * Refer to "Standby Cancel Sequence when using CSI-2" in

	 * imx274 datasheet, it should wait 10ms or more here.

	 * give it 1 extra ms for margin

	/*

	 * Refer to "Standby Cancel Sequence when using CSI-2" in

	 * imx274 datasheet, it should wait 7ms or more here.

	 * give it 1 extra ms for margin

/*

 * imx274_reset - Function called to reset the sensor

 * @priv: Pointer to device structure

 * @rst: Input value for determining the sensor's end state after reset

 *

 * Set the senor in reset and then

 * if rst = 0, keep it in reset;

 * if rst = 1, bring it out of reset.

 *

 keep sensor in reset before power on */

/**

 * imx274_s_ctrl - This is used to set the imx274 V4L2 controls

 * @ctrl: V4L2 control to be set

 *

 * This function is used to set the V4L2 controls for the imx274 sensor.

 *

 * Return: 0 on success, errors otherwise

/**

 * __imx274_change_compose - Helper function to change binning and set both

 *	compose and format.

 *

 * We have two entry points to change binning: set_fmt and

 * set_selection(COMPOSE). Both have to compute the new output size

 * and set it in both the compose rect and the frame format size. We

 * also need to do the same things after setting cropping to restore

 * 1:1 binning.

 *

 * This function contains the common code for these three cases, it

 * has many arguments in order to accommodate the needs of all of

 * them.

 *

 * Must be called with imx274->lock locked.

 *

 * @imx274: The device object

 * @sd_state: The subdev state we are editing for TRY requests

 * @which:  V4L2_SUBDEV_FORMAT_ACTIVE or V4L2_SUBDEV_FORMAT_TRY from the caller

 * @width:  Input-output parameter: set to the desired width before

 *          the call, contains the chosen value after returning successfully

 * @height: Input-output parameter for height (see @width)

 * @flags:  Selection flags from struct v4l2_subdev_selection, or 0 if not

 *          available (when called from set_fmt)

/**

 * imx274_get_fmt - Get the pad format

 * @sd: Pointer to V4L2 Sub device structure

 * @sd_state: Pointer to sub device state structure

 * @fmt: Pointer to pad level media bus format

 *

 * This function is used to get the pad format information.

 *

 * Return: 0 on success

/**

 * imx274_set_fmt - This is used to set the pad format

 * @sd: Pointer to V4L2 Sub device structure

 * @sd_state: Pointer to sub device state information structure

 * @format: Pointer to pad level media bus format

 *

 * This function is used to set the pad format.

 *

 * Return: 0 on success

	/*

	 * __imx274_change_compose already set width and height in the

	 * applicable format, but we need to keep all other format

	 * values, so do a full copy here

	/*

	 * h_step could be 12 or 24 depending on the binning. But we

	 * won't know the binning until we choose the mode later in

	 * __imx274_change_compose(). Thus let's be safe and use the

	 * most conservative value in all cases.

 Constraint: HTRIMMING_END - HTRIMMING_START >= 144 */

 __imx274_change_compose needs the new size in *tgt_crop */

 if crop size changed then reset the output image size */

		/*

		 * __imx274_change_compose already set width and

		 * height in set->r, we still need to set top-left

 Use the minimum allowed value of HMAX */

 Note: except in mode 1, (width / 16 + 23) is always < hmax_min */

 Note: 260 is the minimum HMAX in all implemented modes */

 invert v_pos if VFLIP */

/**

 * imx274_g_frame_interval - Get the frame interval

 * @sd: Pointer to V4L2 Sub device structure

 * @fi: Pointer to V4l2 Sub device frame interval structure

 *

 * This function is used to get the frame interval.

 *

 * Return: 0 on success

/**

 * imx274_s_frame_interval - Set the frame interval

 * @sd: Pointer to V4L2 Sub device structure

 * @fi: Pointer to V4l2 Sub device frame interval structure

 *

 * This function is used to set the frame intervavl.

 *

 * Return: 0 on success

		/*

		 * exposure time range is decided by frame interval

		 * need to update it after frame interval changes

 update exposure time accordingly */

/**

 * imx274_load_default - load default control values

 * @priv: Pointer to device structure

 *

 * Return: 0 on success, errors otherwise

 load default control values */

/**

 * imx274_s_stream - It is used to start/stop the streaming.

 * @sd: V4L2 Sub device

 * @on: Flag (True / False)

 *

 * This function controls the start or stop of streaming for the

 * imx274 sensor.

 *

 * Return: 0 on success, errors otherwise

 load mode registers */

		/*

		 * update frame rate & expsoure. if the last mode is different,

		 * HMAX could be changed. As the result, frame rate & exposure

		 * are changed.

		 * gain is not affected.

 start stream */

 stop stream */

/*

 * imx274_get_frame_length - Function for obtaining current frame length

 * @priv: Pointer to device structure

 * @val: Pointer to obainted value

 *

 * frame_length = vmax x (svr + 1), in unit of hmax.

 *

 * Return: 0 on success

 convert to raw shr */

/*

 * imx274_set_digital gain - Function called when setting digital gain

 * @priv: Pointer to device structure

 * @dgain: Value of digital gain.

 *

 * Digital gain has only 4 steps: 1x, 2x, 4x, and 8x

 *

 * Return: 0 on success

/*

 * imx274_set_gain - Function called when setting gain

 * @priv: Pointer to device structure

 * @val: Value of gain. the real value = val << IMX274_GAIN_SHIFT;

 * @ctrl: v4l2 control pointer

 *

 * Set the gain based on input value.

 * The caller should hold the mutex lock imx274->lock if necessary

 *

 * Return: 0 on success

 convert to register value, refer to imx274 datasheet */

 convert register value back to gain value */

/*

 * imx274_set_coarse_time - Function called when setting SHR value

 * @priv: Pointer to device structure

 * @val: Value for exposure time in number of line_length, or [HMAX]

 *

 * Set SHR value based on input value.

 *

 * Return: 0 on success

 convert exposure_time to appropriate SHR value */

/*

 * imx274_set_exposure - Function called when setting exposure time

 * @priv: Pointer to device structure

 * @val: Variable for exposure time, in the unit of micro-second

 *

 * Set exposure time based on input value.

 * The caller should hold the mutex lock imx274->lock if necessary

 *

 * Return: 0 on success

 exposure time in unit of line (HMAX)*/

 step 1: convert input exposure_time (val) into number of 1[HMAX] */

 step 2: convert exposure_time into SHR value */

 set SHR */

/*

 * imx274_set_vflip - Function called when setting vertical flip

 * @priv: Pointer to device structure

 * @val: Value for vflip setting

 *

 * Set vertical flip based on input value.

 * val = 0: normal, no vertical flip

 * val = 1: vertical flip enabled

 * The caller should hold the mutex lock imx274->lock if necessary

 *

 * Return: 0 on success

/*

 * imx274_set_test_pattern - Function called when setting test pattern

 * @priv: Pointer to device structure

 * @val: Variable for test pattern

 *

 * Set to different test patterns based on input value.

 *

 * Return: 0 on success

/*

 * imx274_set_frame_length - Function called when setting frame length

 * @priv: Pointer to device structure

 * @val: Variable for frame length (= VMAX, i.e. vertical drive period length)

 *

 * Set frame length based on input value.

 *

 * Return: 0 on success

/*

 * imx274_set_frame_interval - Function called when setting frame interval

 * @priv: Pointer to device structure

 * @frame_interval: Variable for frame interval

 *

 * Change frame interval by updating VMAX value

 * The caller should hold the mutex lock imx274->lock if necessary

 *

 * Return: 0 on success

 boundary check */

	/*

	 * VMAX = 1/frame_rate x 72M / (SVR+1) / HMAX

	 * frame_length (i.e. VMAX) = (frame_interval) x 72M /(SVR+1) / HMAX

 initialize imx274 */

 initialize format */

 initialize regmap */

 initialize subdevice */

 initialize subdev media pad */

 initialize sensor reset gpio */

 power on the sensor */

 initialize controls */

 add new controls */

 load default control values */

 register subdevice */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Gateworks Corporation

 debug level */

 Audio formats */

 PCM Samples */

 High Bit Rate Audio */

 One-Bit Audio */

 Direct Stream Transfer */

 Audio output port formats */

 Video input formats */

 Video output port formats */

 RGB/YUV444 16bit data bus, 8bpp */

 YUV422 16bit data base, 8bpp */

 BT656 (YUV 8bpp 2 clock per pixel) */

/*

 * Colorspace conversion matrices

 Input offsets */

 Coeficients */

 Output offsets */

 NB: 4096 is 1.0 using fixed point numbers */

 keep this initialization for compatibility with GCC < 4.4.6 */

 min/max width */

 min/max height */

 min/max pixelclock */

 standards */

 capabilities */

 regulator supplies */

 Digital I/O supply */

 Digital Core supply */

 Analog supply */

 detected info from chip */

 status info */

 video */

 available modes */

 current mode */

 controls */

 audio */

 EDID */

/* -----------------------------------------------------------------------------

 * I2C transfer

/* -----------------------------------------------------------------------------

 * Hotplug

 HPD low and pulse of at least 100ms */

 HPD low and pulse of at least 100ms */

 HIGH */

 HPD low pulse */

 manual HPD (Hot Plug Detect) control */

 mask out unused bits */

 HPD low and pulse of at least 100ms */

 hpd_bp=0 */

 disable HPD_A and HPD_B */

 HPD high */

 hpd_bp=1 */

 HPD low and pulse of at least 100ms */

 disable HPD_A and HPD_B */

 hp_other=0 */

 HPD high */

 HPD low pulse */

 disable HPD_A and HPD_B */

 Set HPD high */

 Set HPD low */

 Enable hotplug after 100ms */

/* -----------------------------------------------------------------------------

 * Signal Control

/*

 * configure vid_fmt based on mbus_code

/*

 * The color conversion matrix will convert between the colorimetry of the

 * HDMI input to the desired output format RGB|YUV. RGB output is to be

 * full-range and YUV is to be limited range.

 *

 * RGB full-range uses values from 0 to 255 which is recommended on a monitor

 * and RGB Limited uses values from 16 to 236 (16=black, 235=white) which is

 * typically recommended on a TV.

 Blanking code values depend on output colorspace (RGB or YUV) */

 RGB output */

 YUV output */

 semi-planar */

 CCIR656 */

 enable matrix conversion */

 offset inputs */

 coefficients */

 offset outputs */

 disable matrix conversion */

 SetBlankingCodes */

 Configure frame detection window and VHREF timing generator */

	/*

	 * Configure Frame Detection Window:

	 *  horiz area where the VHREF module consider a VSYNC a new frame

 start position */

 end position */

 Set Pixel And Line Counters */

	/*

	 * Configure the VHRef timing generator responsible for rebuilding all

	 * horiz and vert synch and ref signals from its input allowing auto

	 * detection algorithms and forcing predefined modes (480i & 576i)

	/*

	 * Configure the VHRef timing values. In case the VHREF generator has

	 * been configured in manual mode, this will allow to manually set all

	 * horiz and vert ref values (non-active pixel areas) of the generator

	 * and allows setting the frame reference params.

 horizontal reference start/end */

 vertical reference f1 start/end */

 vertical reference f2 start/end */

 F1/F2 FREF, field polarity */

 Configure Video Output port signals */

 Configure pixel clock generator: delay, polarity, rate */

 Configure pre-filter */

 filters off */

 YUV422 mode requires conversion */

 2/7 taps for Rv and Bu */

 Configure video port */

 Configure formatter and conversions */

 pre-filter is needed unless (REG_FILTERS_CTRL == 0) */

 formatter is needed for YUV422 and for trc/blc codes */

 formatter and compdel needed for timing/blanking codes */

 activate compdel for small sync delays */

 Configure DE output signal: delay, polarity, and source */

 Configure HS/HREF output signal: delay, polarity, and source */

 Configure VS/VREF output signal: delay, polarity, and source */

 Configure Audio output port signals */

 channel assignment (CEA-861-D Table 20) */

 Audio output configuration */

 demuxed via AP0:AP3 */

 straight via AP0 */

 automatic hardware mute */

 clock polarity */

 audio layout */

 FIFO Latency value */

 Audio output port config */

 specific cases where AP1 is not used */

 specific cases where AP2 is not used */

 reset test mode to normal audio freq auto selection */

 Soft Reset of specific hdmi info */

 reset infoframe engine packets */

 if infoframe engine has been reset clear INT_FLG_MODE */

 Disable REFTIM to restart start-up-sequencer (SUS) */

 Automatic control of TMDS */

 Enable current bias unit */

 Enable deep color PLL */

 Output buffers active */

 Power down EDID mode sequence */

 Output buffers in HiZ */

 Disable deep color PLL */

 Disable current bias unit */

 Manual control of TMDS */

	/*

	 * Read the FMT registers

	 *   REG_V_PER: Period of a frame (or field) in MCLK (27MHz) cycles

	 *   REG_H_PER: Period of a line in MCLK (27MHz) cycles

	 *   REG_HS_WIDTH: Period of horiz sync pulse in MCLK (27MHz) cycles

 full frame */);

 some sort of errata workaround for chip revision 0 (N1) */

 clear HDMI mode flag in BCAPS */

/*

 * Activity detection must only be notified when stable_clk_x AND active_x

 * bits are set to 1. If only stable_clk_x bit is set to 1 but not

 * active_x, it means that the TMDS clock is not in the defined range

 * and activity detection must not be notified.

 Read CLK_A_STATUS register */

 ignore if not active */

 Read CLK_B_STATUS register */

 ignore if not active */

 Read the SUS_STATUS register */

 If state = 5 => TMDS is locked */

 If ycbcr_enc is V4L2_YCBCR_ENC_DEFAULT, we receive RGB */

 parse an infoframe and do some sanity checks on it */

 read data */

 Audio InfoFrame: see HDMI spec 8.2.2 */

 sample rate */

 sample size */

 Channel Count */

 use the channel assignment from the infoframe */

 reset the audio FIFO */

 Auxiliary Video information (AVI) InfoFrame: see HDMI spec 8.2.1 */

 configure upsampler: 0=bypass 1=repeatchroma 2=interpolate */

 ConfigurePixelRepeater: repeat n-times each pixel */

 configure the receiver with the new colorspace */

 reset MTP in use flag if set */

 reset audio FIFO */

 reset HDMI flags */

 filter FMT interrupt based on SUS state */

 notify user of change in resolution */

 reset MTP in use flag if set */

 Detection of +5V */

 read status regs */

	/*

	 * read clock status reg until INT_FLG_CLR_RATE is still 0

	 * after the read to make sure its the last one

 we only pay attention to stability change events */

 state change */

 activity lost */

 bypass up/down sampler and pixel repeater */

 activity detected */

 hold onto current state */

 Audio infoframe */

 Source Product Descriptor infoframe change */

 Auxiliary Video Information infoframe */

 reset audio FIFO on FIFO pointer error or audio mute */

 audio reset audio FIFO */

 reset channel status IT if present */

 reset MTP in use flag if set */

 REPEATER: mask AUDIO and IF irqs to avoid IF during auth */

 read interrupt flags */

 SUS interrupt source (Input activity events) */

 DDC interrupt source (Display Data Channel) */

 RATE interrupt source (Digital Input activity) */

 Infoframe change interrupt */

		/* Audio interrupt source:

		 *   freq change, DST,OBA,HBR,ASP flags, mute, FIFO err

 HDCP interrupt source (content protection) */

/* -----------------------------------------------------------------------------

 * v4l2_subdev_video_ops

	/*

	 * The tda1997x supports A/B inputs but only a single output.

	 * The irq handler monitors for timing changes on both inputs and

	 * sets the input_detect array to 0|1 depending on signal presence.

	 * I believe selection of A vs B is automatic.

	 *

	 * The vper/hper/hsper registers provide the frame period, line period

	 * and horiz sync period (units of MCLK clock cycles (27MHz)) and

	 * testing shows these values to be random if no signal is present

	 * or locked.

 no changes */

 setup frame detection window and VHREF timing generator */

 configure colorspace conversion */

/* -----------------------------------------------------------------------------

 * v4l2_subdev_pad_ops

 mbus_code has changed - re-configure csc/vidout */

 write base EDID */

 write CEA Extension */

 store state */

/* -----------------------------------------------------------------------------

 * v4l2_subdev_core_ops

 read data */

/* -----------------------------------------------------------------------------

 * v4l2_subdev_ops

/* -----------------------------------------------------------------------------

 * v4l2_controls

 allow overriding the default RGB quantization range */

 disable HPD */

 reset infoframe at end of start-up-sequencer */

 Enable TMDS pull-ups */

 enable sync measurement timing */

 adjust CEC clock divider */

 enable power switch */

 read the chip version */

 get the chip configuration */

 enable interrupts we care about */

 config_mtp,fmt,sus_end,sus_st */

 rate stability change for inputs A/B */

 aud,spd,avi*/

 audio_freq,audio_flg,mute_flg,fifo_err */

 HDCP C5 state reached */

 5V detect and HDP pulse end */

 don't care about AFE/MODE */

 clear all interrupts */

 init TMDS equalizer */

 DC filter */

 disable test pattern */

 update HDMI INFO CTRL */

 write HDMI INFO EXCEED value */

	/*

	 * No HDCP acknowledge when HDCP is disabled

	 * and reset SUS to force format detection

 Set HPD low */

 Configure receiver capabilities */

 Configure HDMI: Auto HDCP mode, packet controlled mute */

 reset start-up-sequencer to force format detection */

 disable matrix conversion */

 set video output mode */

 configure video output port */

 configure audio output port */

 configure audio clock freq */

 reset advanced infoframes (ISRC1/ISRC2/ACP) */

 reset infoframe */

 reset audio infoframes */

 reset gamut */

 get initial HDMI status */

	/*

	 * setup default values:

	 * - HREF: active high from start to end of row

	 * - VS: Vertical Sync active high at beginning of frame

	 * - DE: Active high when data valid

	 * - A_CLK: 128*Fs

 polarity of HS/VS/DE */

 video output port config */

 default to channel layout dictated by packet header */

 Read chip configuration*/

 use tmds clock B_inv for B */

 tmds of input B */

 30bit vs 24bit */

 output supply 2.5v */

 read chip revision */

/* -----------------------------------------------------------------------------

 * HDMI Audio Codec

 refine sample-rate based on HDMI source */

 Check if the adapter supports the needed features */

 set video format based on chip and bus width */

 initialize subdev */

 set allowed mbus modes based on chip, bus-type, and bus-width */

 default format */

	/*

	 * default to SRGB full range quantization

	 * (in case we don't get an infoframe such as DVI signal

 disable/reset HDCP to get correct I2C access to Rx HDMI */

	/*

	 * if N2 version, reset compdel_bp as it may generate some small pixel

	 * shifts in case of embedded sync/or delay lower than 4

 control handlers */

 custom controls */

 initialize source pads */

 register audio DAI */

 request irq */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2017 Microchip Corporation.

 OV7740 register tables */

 Gain lower 8 bits (rest in vref) */

 blue gain */

 red gain */

 green gain */

 analog setting, don't change*/

 b channel average */

 g channel average */

 r channel average */

 filp enable */

 blc line */

 auto exposure cntrl */

 auto exposure cntrl */

 Clock control */

 Clock PLL DIV/PreDiv */

 auto/manual AGC, AEC, Write Balance*/

 manufacture id byte */

 manufacture id byre */

 Product ID MSB */

 Product ID LSB */

 lots of stuff */

 sub-addr */

 Horiz start high bits */

 Vert start high bits */

 Pixel delay after HREF */

 DSP output size H/V LSB*/

 ygain for contrast control */

 Current format */

 gain cluster */

 exposure cluster */

 saturation/hue cluster */

 To serialize asynchronus callbacks */

 Streaming on/off */

 Turn off AEC/AGC */

 Turn off AEC/AGC */

 default to first format */

 sentinel */ }

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018 Intel Corporation

/*

 * This sets the minimum granularity for the focus positions.

 * A value of 1 gives maximum accuracy for a desired focus position

/*

 * This acts as the minimum granularity of lens movement.

 * Keep this value power of 2, so the control steps can be

 * uniformly adjusted for gradual lens movement, with desired

 * number of control steps.

 ak7375 device structure */

 active or standby mode */

/*

 * This function sets the vcm position, so it consumes least current

 * The lens position is gradually moved in units of AK7375_CTRL_STEPS,

 * to make the movements smoothly.

/*

 * This function sets the vcm position to the value set by the user

 * through v4l2_ctrl_ops s_ctrl handler

 * The lens position is gradually moved in units of AK7375_CTRL_STEPS,

 * to make the movements smoothly.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * ov5695 driver

 *

 * Copyright (C) 2017 Fuzhou Rockchip Electronics Co., Ltd.

 45Mhz * 4 Binning */

 Analog power */

 Digital I/O power */

 Digital core power */

/*

 * Xclk 24Mhz

 * Pclk 45Mhz

 * linelength 672(0x2a0)

 * framelength 2232(0x8b8)

 * grabwindow_width 1296

 * grabwindow_height 972

 * max_framerate 30fps

 * mipi_datarate per lane 840Mbps

/*

 * Xclk 24Mhz

 * Pclk 45Mhz

 * linelength 740(0x2e4)

 * framelength 2024(0x7e8)

 * grabwindow_width 2592

 * grabwindow_height 1944

 * max_framerate 30fps

 * mipi_datarate per lane 840Mbps

/*

 * Xclk 24Mhz

 * Pclk 45Mhz

 * linelength 672(0x2a0)

 * framelength 2232(0x8b8)

 * grabwindow_width 1920

 * grabwindow_height 1080

 * max_framerate 30fps

 * mipi_datarate per lane 840Mbps

/*

 * Xclk 24Mhz

 * Pclk 45Mhz

 * linelength 740(0x02e4)

 * framelength 1012(0x03f4)

 * grabwindow_width 1296

 * grabwindow_height 972

 * max_framerate 60fps

 * mipi_datarate per lane 840Mbps

/*

 * Xclk 24Mhz

 * Pclk 45Mhz

 * linelength 672(0x2a0)

 * framelength 2232(0x8b8)

 * grabwindow_width 1280

 * grabwindow_height 720

 * max_framerate 30fps

 * mipi_datarate per lane 840Mbps

/*

 * Xclk 24Mhz

 * Pclk 45Mhz

 * linelength 672(0x2a0)

 * framelength 558(0x22e)

 * grabwindow_width 640

 * grabwindow_height 480

 * max_framerate 120fps

 * mipi_datarate per lane 840Mbps

 Write registers up to 4 at a time */

 Read registers up to 4 at a time */

 Write register address */

 Read data from register */

 In case these controls are set before streaming */

	/*

	 * The hardware requires the regulators to be powered on in order,

	 * so enable them one by one.

	/*

	 * The hardware requires the regulators to be powered off in order,

	 * so disable them one by one.

 Initialize try_fmt */

 No crop or compose */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

 4 least significant bits of expsoure are fractional part */

 Digital gain */

 SPDX-License-Identifier: GPL-2.0

/*

 * Maxim Integrated MAX2175 RF to Bits tuner driver

 *

 * This driver & most of the hard coded values are based on the reference

 * application delivered by Maxim for this device.

 *

 * Copyright (C) 2016 Maxim Integrated Products

 * Copyright (C) 2017 Renesas Electronics Corporation

 Rx mode */

 Associated band */

 Default freq in Hz */

 Bit value */

 Register map to define preset values */

 Register index */

 Register value */

 EU modes */

 NA modes */

/*

 * Preset values:

 * Based on Maxim MAX2175 Register Table revision: 130p10

 DAB1.2 settings */

 EU FM 1.2 settings */

 FM NA 1.0 settings */

 FM NA 2.0 settings */

 Tuner bands */

 Regmap settings */

 Sub-device */

 I2C client */

 Controls */

 LNA gain value */

 I/F gain value */

 PLL lock */

 I2S output enable */

 High-side/Low-side polarity */

 Receive mode */

 Regmap */

 Cached configuration */

 Tuned freq In Hz */

 EU or NA modes */

 EU or NA bands */

 Device settings */

 Ref Oscillator freq in Hz */

 Master/Slave */

 AM Hi-Z filter */

 ROM values */

 Driver private variables */

 Flag to sanity check settings */

 Get bitval of a given val */

 Read/Write bit(s) on top of regmap */

 Checks expected pattern every msec until timeout */

 Stuff bits are zeroed */

 Keep SCK alive */

 Load the Channel Filter Coefficients into channel filter bank #2 */

 Load the Channel Filter Coefficients into channel filter bank #2 */

 Wait for a fixed settle down time depending on new mode */

 51.1ms */

	/*

	 * Other mode switches need different sleep values depending on band &

	 * mode

 Other actions can be added in future when needed */

 Check CSM is not busy */

 Write the calculated values to the appropriate registers */

/*

 * Helper similar to DIV_ROUND_CLOSEST but an inline function that accepts s64

 * dividend and s32 divisor

 Check CSM is not busy */

 Write the calculated values to the appropriate registers */

 Master is the default setting */

 Master is the default setting */

 Load the Channel Filter Coefficients into channel filter bank #2 */

 Load BB filter trim values saved in ROM */

 Set HSLS */

 Use i2s enable settings */

 Pick the first match always */

 Execute on-chip power-up/calibration */

 Wait for the power manager to finish. */

 ADC Re-calibration */

 MAX2175 uses 36.864MHz clock for EU & 40.154MHz for NA region */

 The default settings assume master */

 Set REFOUT */

 ADC Reset */

 Load ADC preset values */

 Initialize the power management state machine */

 Recalibrate ADC */

 Load ROM values to appropriate registers */

 Load FIR coefficients into bank 0 */

 Load FIR coefficients into bank 0 */

 Load mode. Range check already done */

 Check if current freq valid for mode & update */

 Use default freq of mode if current freq is not valid */

 Get band from frequency */

 Load mode */

 Tune to the new freq given */

 Check new freq valid for rx_mode if already resolved */

 Find default rx_mode for freq and tune to it */

 RF freq */

 Check tuner index is valid */

/*

 * I2S output enable/disable configuration. This is a private control.

 * Refer to Documentation/userspace-api/media/drivers/max2175.rst for more details.

/*

 * HSLS value control LO freq adjacent location configuration.

 * Refer to Documentation/userspace-api/media/drivers/max2175.rst for more details.

/*

 * Rx modes below are a set of preset configurations that decides the tuner's

 * sck and sample rate of transmission. They are separate for EU & NA regions.

 * Refer to Documentation/userspace-api/media/drivers/max2175.rst for more details.

 REFOUT disabled */

 Parse DT properties */

 Slave tuner */

 Alloc tuner context */

 Controls */

 Set the defaults */

 Register subdev */

 Initialize device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for SiliconFile SR030PC30 VGA (1/10-Inch) Image Sensor with ISP

 *

 * Copyright (C) 2010 Samsung Electronics Co., Ltd

 * Author: Sylwester Nawrocki, s.nawrocki@samsung.com

 *

 * Based on original driver authored by Dongsoo Nathaniel Kim

 * and HeungJun Kim <riverful.kim@samsung.com>.

 *

 * Based on mt9v011 Micron Digital Image Sensor driver

 * Copyright (c) 2009 Mauro Carvalho Chehab

/*

 * Register offsets within a page

 * b15..b8 - page id, b7..b0 - register address

 page 10 */

 page 11 */

 page 12 */

 page 14 - Lens Shading Compensation */

 page 15 - Color correction */

 Color correction coefficients */

 Color correction offset coefficients */

 page 16 - Gamma correction */

 Gamma correction coefficients 0.14 */

 page 20 - Auto Exposure */

 page 22 - Auto White Balance */

 RGB gain control (manual WB) when AWB_CTL1[7]=0 */

 R, B gain range in bright light conditions */

 manual white balance, when AWB_CTL2[0]=1 */

 the token to mark an array end */

 Minimum and maximum exposure time in ms */

 auto whitebalance control cluster */

 auto exposure control cluster */

 supported resolutions */

 supported pixel formats */

 Window size and position within pixel matrix */

 Color corection and saturation */

 Color corection coefficients */

 Noise reduction, Z-LPF, YC-LPF and BLPF filters setup */

 Automatic white balance */

 Auto exposure */

 Lens shading compensation */

 Device reset and sleep mode control */

 Configure resolution, color format and image flip */

 Configure the resolution through subsampling */

 Find nearest matching image pixel size. */

 auto anti-flicker is also enabled here */

 Return nearest media bus frame format. */

 Return nearest media bus frame format. */

 Setting up manual exposure time range */

	/*

	 * Put sensor into power sleep mode before switching off

	 * power and disabling MCLK.

 set_power controls sensor's power and clock */

/*

 * Detect sensor type. Return 0 if SR030PC30 was detected

 * or -ENODEV otherwise.

 Enable sensor's power and clock */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Omnivision OV9650/OV9652 CMOS Image Sensor driver

 *

 * Copyright (C) 2013, Sylwester Nawrocki <sylvester.nawrocki@gmail.com>

 *

 * Register definitions and initial settings based on a driver written

 * by Vladimir Fonov.

 * Copyright (c) 2010, Vladimir Fonov

/*

 * OV9650/OV9652 register definitions

 Gain control, AGC[7:0] */

 AWB - Blue channel gain */

 AWB - Red channel gain */

 [7:6] - AGC[9:8], [5:3]/[2:0] */

 - VREF end/start low 3 bits */

 Product ID MSB */

 Product ID LSB */

 Vario Pixels  */

 System clock options */

 HREF & ADBLC options */

 Exposure value, AEC[9:2] */

 Clock control */

 Use external clock directly */

 Mask for internal clock scale */

 SCCB reset, output format */

 AGC/AEC options */

 Enable fast AGC/AEC */

 Unlimited AEC step size */

 Band filter enable */

 Auto gain enable */

 White balance enable */

 Auto exposure enable */

 Gain ceiling */

 */

 PCLK, HREF, HSYNC signals polarity */

 HSYNC instead of HREF */

 Suppress PCLK on horiz blank */

 Reverse HREF */

 VSYNC on clock leading edge */

 VSYNC negative */

 HSYNC negative */

 Horiz start high bits */

 Horiz stop high bits */

 Vert start high bits */

 Vert stop high bits */

 Pixel delay after HREF */

 Manufacturer ID MSB */

 Manufufacturer ID LSB */

 Image mirror/flip */

 Mirror image */

 Vertical flip */

 B channel Offset */

 Gb channel Offset */

 Gr channel Offset */

 R channel Offset */

 AGC upper limit */

 AGC lower limit */

 AGC/AEC fast mode op region */

 B channel output bias */

 Gb channel output bias */

 Analog BLC & regulator */

 Dummy pixel insert MSB */

 Dummy pixel insert LSB */

 R channel output bias */

 LSB of dummy line insert */

 MSB of dummy line insert */

 Y/G channel average value */

 HSYNC rising edge delay LSB*/

 HSYNC falling edge delay LSB*/

 HREF pieces */

 reserved */

 reserved */

 reserved */

 Power down register */

 Power down bit */

 YUVU format */

 UYVY or VYUY - see com13 */

 Night mode, banding filter enable */

 Night mode enable */

 Two bit NM frame rate */

 Banding filter */

 AEC reference area selection */

 HREF option, UV average */

 HREF always */

 Gamma selection, Color matrix en. */

 Gamma enable */

 UV saturation auto adjustment */

 V before U - w/TSLB */

 Edge enhancement options */

 Edge enhancement factor */

 Output range, RGB 555/565 */

 Data range 10 to F0 */

 01 to FE */

 00 to FF */

 RGB565 output */

 RGB555 output */

 Swap R&B */

 Color matrix coeff options */

 Single frame out, banding filter */

 n = 1...9, 0x4f..0x57 */

 Lens Correction Option 1...5, __n = 0...5 */

 LCC5, enable lens correction */

 Manual U value */

 Manual V value */

 Manual banding filter MSB */

 Manual banding filter value */

 reserved */

 Gamma curve */

 Gamma curve */

 Edge enhancement, denoising */

 White pixel correction enable */

 White pixel correction option */

 White pixel correction option */

 Color bar test, color gain */

 Digital BLC */

 Digital BLC B channel offset */

 Digital BLC R channel offset */

 Dummy line low 8 bits */

 Dummy line high 8 bits */

 Lens Correction B channel */

 Lens Correction R channel */

 Digital BLC GB chan offset */

 Digital BLC GR chan offset */

 Exposure value - bits AEC[15:10] */

 Banding filter value for 50Hz */

 Banding filter value for 60Hz */

 Array end token */

 Maximum resolution for this interval */

 External master clock frequency */

 Protects the struct fields below */

 Exposure row interval in us */

 YUYV sequence (pixel format) control register */

 Pointer to frame rate control data structure */

 Set soft sleep mode */

 System clock options */

 Output drive, soft sleep mode */

 Slave mode, HREF vs HSYNC, signals negate */

 Edge enhancement treshhold and factor */

 Color matrix coeff double option */

 Single frame out, banding filter */

 Reserved  */

 HREF option, UV average  */

 Output range, RGB 555/565 */

 Analog BLC & regulator */

 HREF & ADBLC options */

 AGC/AEC options */

 Gamma selection, colour matrix, UV delay */

 Manual banding filter MSB  */

 Reserved up to 0xa5 */

 reserved */

 Color gain analog/_digital_ */

 Enable AEC, AWB, AEC */

 Edge enhancement, denoising */

 Digital BLC */

 Digital BLC B chan offset */

 Digital BLC R chan offset */

 Digital BLC GB chan offset */

 Gain ceiling 16x */

/*

 * COM7,  COM3,  COM4, HSTART, HSTOP, HREF, VSTART, VSTOP, VREF,

 * EXHCH, EXHCL, ADC,  OCOM,   OFON

 Determined empirically. */

 REG_TSLB value, only bits [3:2] may be set. */

/*

 * This table specifies possible frame resolution and interval

 * combinations. Default CLKRC[5:0] divider values are valid

 * only for 24 MHz external clock frequency.

 6.25 fps */

 12.5 fps */

 12.5 fps */

 25 fps */

 25 fps */

 Values taken from OV application note. */

 MTX1..MTX9, MTXS */

/*

 * V4L2 controls

 Calculate internal clock frequency */

 and the row interval (in us). */

 Update exposure time range to match current frame format. */

 Set minimal exposure time for 50/60 HZ lighting */

 -3 */

 -2 */

 -1 */

  0 */

 +1 */

 +2 */

 +3 */

	/*

	 * For manual mode we need to disable AGC first, so

	 * gain value in REG_VREF, REG_GAIN is not overwritten.

		/*

		 * Convert gain control value to the sensor's gain

		 * registers (VREF[7:6], GAIN[7:0]) format.

 Sanity check: don't adjust the gain with a negative value */

 Return updated control's value to userspace */

		/*

		 * Manual exposure value

		 * [b15:b0] - AECHM (b15:b10), AECH (b9:b2), COM1 (b1:b0)

 Update the value to minimize rounding errors */

 MTX(1)...MTX(6) */

 -2 */

 -1 */

  0 */

 +1 */

 +2 */

	/*

	 * If the device is not powered up now postpone applying control's

	 * value to the hardware, until it is ready to accept commands.

 Auto/manual white balance */

 Auto/manual exposure */

 Exposure time, in 100 us units. min/max is updated dynamically. */

 Auto/manual gain */

/*

 * V4L2 subdev video and pad level operations

 Reset to minimum possible frame interval */

	/*

	 * Select manual banding filter, the filter will

	 * be enabled further if required.

	/*

	 * Banding filter (REG_MBD value) needs to match selected

	 * resolution and frame rate, so it's always updated here.

			/*

			 * ov965x_s_ctrl callback takes the mutex

			 * so it needs to be released here.

/*

 * V4L2 subdev internal operations

/*

 * Reset and power down GPIOs configuration

 Check sensor revision */

 Update exposure time min/max to match frame format */

 sentinel */ }

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for RJ54N1CB0C CMOS Image Sensor from Sharp

 *

 * Copyright (C) 2018, Jacopo Mondi <jacopo@jmondi.org>

 *

 * Copyright (C) 2009, Guennadi Liakhovetski <g.liakhovetski@gmx.de>

/*

 * When cropping, the camera automatically centers the cropped region, there

 * doesn't seem to be a way to specify an explicit location of the rectangle.

 I2C addresses: 0x50, 0x51, 0x60, 0x61 */

 RJ54N1CB0C has only one fixed colorspace per pixelcode */

 Find a data format by a pixel code in an array */

 can be 0 or an odd number */

 Sensor window */

 Output window */

 Sensor * 1024 / resize = Output */

 Clock dividers - these are default register values, divider = register + 1 */

 default: 5 */,

 default: 1 */,

 default: 0 */,

 default: 5 */,

 default: 0 */,

 set bank */

 set bank */

 Switch between preview and still shot modes */

/*

 * Some commands, specifically certain initialisation sequences, require

 * a commit operation.

 arbitrary minimum width and height, edges unimportant */

/*

 * The actual geometry configuration routine. It scales the input window into

 * the output one, updates the window sizes and returns an error or the resize

 * coefficient on success. Note: we only use the "Fixed Scaling" on this camera.

	/*

	 * We have a problem with crops, where the window is larger than 512x384

	 * and output window is larger than a half of the input one. In this

	 * case we have to either reduce the input window to equal or below

	 * 512x384 or the output window to equal or below 1/2 of the input.

 Idea: use the read mode for snapshots, handle separate geometries */

 We want max(resize_x, resize_y), check if it still fits */

 Prohibited value ranges */

 Set scaling */

	/*

	 * Configure a skipping bitmask. The sensor will select a skipping value

	 * among set bits automatically. This is very unclear in the datasheet

	 * too. I was told, in this register one enables all skipping values,

	 * that are required for a specific resize, and the camera selects

	 * automatically, which ones to use. But it is unclear how to identify,

	 * which cropping values are needed. Secondly, why don't we just set all

	 * bits and let the camera choose? Would it increase processing time and

	 * reduce the framerate? Using 0xfffc for INC_USE_SEL doesn't seem to

	 * improve the image quality or stability for larger frames (see comment

	 * above), but I didn't check the framerate.

 Auto white balance window */

 Antiflicker */

 Start resizing */

 Constant taken from manufacturer's example */

 Enable external clock */

 Leave stand-by. Note: use this when implementing suspend / resume */

 TGCLK dividers */

 Enable TGCLK & RAMP */

 Disable clock output */

 Set divisors */

 Enable OCLK */

 Use PLL for Timing Generator, write 2 to reserved bits */

 Take sensor out of reset */

 Enable PLL */

 Wait for PLL to stabilise */

 Enable clock to frequency divider */

 Start the PLL */

 Enable OCLK */

 Set binning divisors */

 Switch to fixed resize mode */

 Set gain */

	/*

	 * Mirror the image back: default is upside down and left-to-right...

	 * Set manual preview / still shot switching

 Auto exposure area */

 Check current auto WB config */

 Commit init */

 Take DSP, TG, sensor out of reset */

 Start register update? Same register as 0x?FE in many bank_* sets */

 Constant taken from manufacturer's example */

	/*

	 * Verify if the sensor has just been powered on. TODO: replace this

	 * with proper PM, when a suitable API is available.

 RA_SEL_UL is only relevant for raw modes, ignored otherwise. */

 Special case: a raw mode with 10 bits of data per clock tick */

 Supported scales 1:1 >= scale > 1:16 */

 Registers > 0x0800 are only available from Sharp support */

 Registers >= 0x0800 are only available from Sharp support */

 Auto WB area - whole image */

/*

 * Interface active, can use i2c. If it fails, it can indeed mean, that

 * this wasn't our capture interface, so, we wait for the right one

 Read out the chip version register */

 Configure IOCTL polarity from the platform data: 0 or 1 << 7. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Samsung S5K4ECGX 1/4" 5Mp CMOS Image Sensor SoC

 * with an Embedded Image Signal Processor.

 *

 * Copyright (C) 2012, Linaro, Sangwook Lee <sangwook.lee@linaro.org>

 * Copyright (C) 2012, Insignal Co,. Ltd, Homin Lee <suapapa@insignal.co.kr>

 *

 * Based on s5k6aa and noon010pc30 driver

 * Copyright (C) 2011, Samsung Electronics Co., Ltd.

 Firmware revision information */

 General purpose parameters */

 Preview context register sets. n = 0...4. */

 Frame period in 0.1 ms units */

 n = 0...4 */

 Reduce sharpness range for user space API */

/*

 * FIXME: This is copied from s5k6aa, because of no information

 * in the S5K4ECGX datasheet.

 * H/W register Interface (0xd0000000 - 0xd0000fff)

 Fixed sensor matrix crop rectangle */

/*

 * TODO: currently only preview is supported and snapshot (capture)

 * is not implemented yet

 REG_TC_PCFG_Format register value */

 By default value, output from sensor will be YUV422 0-255 */

	/*

	 * Usually 2.8V is used for analog power (vdda)

	 * and digital IO (vddio, vdddcore)

 The internal s5k4ecgx regulator's supply (1.8V) */

 Set APB peripherals start address */

	/*

	 * FIXME: This is copied from s5k6aa, because of no information

	 * in s5k4ecgx's datasheet.

	 * sw_reset is activated to put device into idle status

 Halt ARM CPU */

 Register address, value are 4, 2 bytes */

/*

 * The firmware has following format:

 * < total number of records (4 bytes + 2 bytes padding) N >,

 * < record 0 >, ..., < record N - 1 >, < CRC32-CCITT (4-bytes) >,

 * where "record" is a 4-byte register address followed by 2-byte

 * register value (little endian).

 * The firmware generator can be found in following git repository:

 * git://git.linaro.org/people/sangwook/fimc-v4l2-app.git

 Add header */

 Set preview and capture input window */

 Set preview and capture zoom input window */

 The delay is from manufacturer's settings */

 The polarity of STBY is controlled by TSP */

 Find nearest matching image pixel size. */

/*

 * V4L2 subdev controls

 TODO: Revisit, is this setting for all presets ? */

/*

 * Reading s5k4ecgx version information

/*

 * V4L2 subdev internal operations

 Time to stabilize sensor */

	/*

	 * This enables/disables preview stream only. Capture requests

	 * are not supported yet.

/*

 * GPIO setup

 Sharpness default is 24612, and then (24612/SHARPNESS_DIV) = 2 */

 Registering subdev */

 Static name; NEVER use in new drivers! */

 Support v4l2 sub-device user space API */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2015--2017 Intel Corporation.

/*

 * This sets the minimum granularity for the focus positions.

 * A value of 1 gives maximum accuracy for a desired focus position

/*

 * This acts as the minimum granularity of lens movement.

 * Keep this value power of 2, so the control steps can be

 * uniformly adjusted for gradual lens movement, with desired

 * number of control steps.

/*

 * S[3:2] = 0x00, codes per step for "Linear Slope Control"

 * S[1:0] = 0x00, step period

 dw9714 device structure */

/*

 * This function sets the vcm position, so it consumes least current

 * The lens position is gradually moved in units of DW9714_CTRL_STEPS,

 * to make the movements smoothly.

/*

 * This function sets the vcm position to the value set by the user

 * through v4l2_ctrl_ops s_ctrl handler

 * The lens position is gradually moved in units of DW9714_CTRL_STEPS,

 * to make the movements smoothly.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tc358743 - Toshiba HDMI to CSI-2 bridge

 *

 * Copyright 2015 Cisco Systems, Inc. and/or its affiliates. All rights

 * reserved.

/*

 * References (c = chapter, p = page):

 * REF_01 - Toshiba, TC358743XBG (H2C), Functional Specification, Rev 0.60

 * REF_02 - Toshiba, TC358743XBG_HDMI-CSI_Tv11p_nm.xls

 keep this initialization for compatibility with GCC < 4.4.6 */

 Pixel clock from REF_01 p. 20. Min/max height/width are unknown */

 CONFCTL is modified in ops and tc358743_hdmi_sys_int_handler */

 controls */

 edid  */

 --------------- I2C --------------- */

 --------------- STATUS --------------- */

 Register FS_SET is not cleared when the cable is disconnected */

 --------------- TIMINGS --------------- */

	/* frame interval in milliseconds * 10

 --------------- HOTPLUG / HDCP / EDID --------------- */

	/* DDC access to EDID is also disabled when hotplug is disabled. See

	/* Enable hotplug after 100 ms. DDC access to EDID is also enabled when

 --------------- AVI infoframe --------------- */

 --------------- CTRLS --------------- */

 --------------- INIT --------------- */

		/* It is critical for CSI receiver to see lane transition

		 * LP11->HS. Set to non-continuous mode to enable clock lane

 Set to continuous mode to trigger LP11->HS transition */

 Unmute video */

		/* Mute video so that all data lanes go to LSP11 state.

	/* Only rewrite when needed (new value or disabled), since rewriting

 REF_02, Sheet "Source HDMI" */

	/*

	 * Trial and error suggests that the default register value

	 * of 656 is for a 42 MHz reference clock. Use that to derive

	 * a new value based on the actual reference clock.

	/* Default settings from REF_02, sheet "Source HDMI"

 Default settings from REF_02, sheet "Source HDMI" */

 Default settings from REF_02, sheet "Source HDMI" */

	/*

	 * IR is not supported by this driver.

	 * CEC is only enabled if needed.

 All CE and IT formats are detected as RGB full range in DVI mode */

 --------------- CEC --------------- */

			/*

			 * Not sure when this bit is set. Treat

			 * it as an error for now.

 --------------- IRQ --------------- */

 clear interrupt status registers */

		/* Reset the HDMI PHY to try to trigger proper lock on the

		 * incoming video format. Erase BKSV to prevent that old keys

 Bit 7 and bit 6 are set even when they are masked */

		/* If the source switch to a new resolution with the same pixel

		 * frequency as the existing (e.g. 1080p25 -> 720p50), the

		 * I_SYNC_CHG interrupt is not always triggered, while the

		 * I_IN_DE_CHG interrupt seems to work fine. Format change

		 * notifications are only sent when the signal is stable to

		/* Reset the HDMI PHY to try to trigger proper lock on the

		 * incoming video format. Erase BKSV to prevent that old keys

 Register is reset in DVI mode (REF_01, c. 6.6.41) */

 --------------- CORE OPS --------------- */

 REF_01 p. 66-72 */

	/* It should not be possible for the user to enable HDCP with a simple

	 * v4l2-dbg command.

	 *

	 * DO NOT REMOVE THIS unless all other issues with HDCP have been

	 * resolved.

	/*

	 * If CEC is present, then we need to poll more frequently,

	 * otherwise we will miss CEC messages.

 --------------- VIDEO OPS --------------- */

 Support for non-continuous CSI-2 clock is missing in the driver */

 Put all lanes in LP-11 state (STOPSTATE) */

 --------------- PAD OPS --------------- */

 is overwritten by get_fmt */

 -------------------------------------------------------------------------- */

 --------------- CUSTOM CTRLS --------------- */

 --------------- PROBE / REMOVE --------------- */

 A FIFO level of 16 should be enough for 2-lane 720p60 at 594 MHz. */

	/*

	 * The PLL input clock is obtained by dividing refclk by pll_prd.

	 * It must be between 6 MHz and 40 MHz, lower frequency is better.

	/*

	 * The CSI bps per lane must be between 62.5 Mbps and 1 Gbps.

	 * The default is 594 Mbps for 4-lane 1080p60 or 2-lane 720p60.

 The CSI speed per lane is refclk / pll_prd * pll_fbd */

	/*

	 * FIXME: These timings are from REF_02 for 594 Mbps per lane (297 MHz

	 * link frequency). In principle it should be possible to calculate

	 * them based on link frequency and resolution.

 tclk-preparecnt: 3, tclk-zerocnt: 20 */

 ths-preparecnt: 3, ths-zerocnt: 1 */

 platform data */

 i2c access */

 control handlers */

 custom controls */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2021 Purism SPC

 Frame length lines / vertical timings */

 Horizontal timing */

/*

 * Long exposure time. Actually, exposure is a 20 bit value that

 * includes the lower 4 bits of 0x0073 too. Only 16 bits are used

 * right now

 Analog gain controls from sensor */

 Digital gain controls from sensor */

 Formatter */

 MIPI */

 ISP Common */

 Test Pattern Control */

 1-9 */

 Windowing */

 ISP Common */

 Horizontal Binning Mode */

 BLC (Black Level Calibration) */

 PLL */

 Frame width in pixels */

 Frame height in pixels */

 Horizontal timing size */

 Link frequency needed for this resolution */

 Vertical timining size */

 Position inside of the 3264x2448 pixel array */

 regs below are unknown */

 regs above are unknown */

 for OTP */

 for OTP */

 For OTP */

 For OTP */

 360Mbps */

 For OTP */

 Digital I/O (1.8V or 2.8V) */

 Analog (2.8V) */

 Digital Core (1.2V) */

 protect cur_mode, streaming and chip access */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

 margin */

 max frame len */

 Update FLL that meets expected vertical blanking */

	/*

	 * Reading 0x0034 is purely done for debugging reasons: It is not

	 * documented in the DS but only mentioned once:

	 * "If 0x0034[2] bit is disabled , Visible pixel width and height is 0."

	 * So even though that sounds like we won't see anything, we don't

	 * know more about this, so in that case only inform the user but do

	 * nothing more.

 30us = 2400 cycles at 80Mhz */

 Update limits and set FPS to default */

 Check that link frequences for all the modes are in device tree */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

 Terminator (reg 0xFF is unused) */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0

/*

 * ov772x Camera Driver

 *

 * Copyright (C) 2017 Jacopo Mondi <jacopo+renesas@jmondi.org>

 *

 * Copyright (C) 2008 Renesas Solutions Corp.

 * Kuninori Morimoto <morimoto.kuninori@renesas.com>

 *

 * Based on ov7670 and soc_camera_platform driver,

 *

 * Copyright 2006-7 Jonathan Corbet <corbet@lwn.net>

 * Copyright (C) 2008 Magnus Damm

 * Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>

/*

 * register offset

 AGC - Gain control gain setting */

 AWB - Blue channel gain setting */

 AWB - Red   channel gain setting */

 AWB - Green channel gain setting */

 Common control 1 */

 U/B Average Level */

 Y/Gb Average Level */

 V/R Average Level */

 Exposure Value - AEC MSBs */

 Common control 2 */

 Product ID Number MSB */

 Product ID Number LSB */

 Common control 3 */

 Common control 4 */

 Common control 5 */

 Common control 6 */

 Exposure Value */

 Internal clock */

 Common control 7 */

 Common control 8 */

 Common control 9 */

 Common control 10 */

 Register 16 */

 Horizontal sensor size */

 Horizontal frame (HREF column) end high 8-bit */

 Vertical frame (row) start high 8-bit */

 Vertical sensor size */

 Data format - pixel delay select */

 Manufacturer ID byte - high */

 Manufacturer ID byte - low  */

 Fine AEC value */

 Common control 11 */

 Banding filter Minimum AEC value */

 Banding filter Maximum Setp */

 AGC/AEC - Stable operating region (upper limit) */

 AGC/AEC - Stable operating region (lower limit) */

 AGC/AEC Fast mode operating region */

 Register 28 */

 Horizontal data output size MSBs */

 Dummy pixel insert MSB */

 Dummy pixel insert LSB */

 Vertical data output size MSBs */

 LSB of insert dummy lines in Vertical direction */

 MSG of insert dummy lines in Vertical direction */

 Y/G Channel Average value */

 Histogram AEC/AGC Luminance high level threshold */

 Histogram AEC/AGC Luminance low  level threshold */

 Image start and size control */

 Dummy line low  8 bits */

 Dummy line high 8 bits */

 AD offset compensation value for B  channel */

 AD offset compensation value for R  channel */

 AD offset compensation value for Gb channel */

 AD offset compensation value for Gr channel */

 Analog process B  channel offset value */

 Analog process R  channel offset value */

 Analog process Gb channel offset value */

 Analog process Gr channel offset value */

 Common control 12 */

 Common control 13 */

 Common control 14 */

 Common control 15*/

 Common control 16 */

 BLC blue channel target value */

 BLC red  channel target value */

 BLC Gb   channel target value */

 BLC Gr   channel target value */

 for ov7720 */

 Lens correction control 0 */

 Lens correction option 1 - X coordinate */

 Lens correction option 2 - Y coordinate */

 Lens correction option 3 */

 Lens correction option 4 - radius of the circular */

 Lens correction option 5 */

 Lens correction option 6 */

 for ov7725 */

 Lens correction control */

 X coordinate of lens correction center relative */

 Y coordinate of lens correction center relative */

 Lens correction coefficient */

 Lens correction radius */

 Lens B channel compensation coefficient */

 Lens R channel compensation coefficient */

 Analog fix gain amplifer */

 Sensor reference control */

 Sensor reference current control */

 Analog reference control */

 ADC    reference control */

 ADC    reference control */

 ADC    reference control */

 Analog reference control */

 Analog reference control */

 U channel fixed value output */

 V channel fixed value output */

 AWB option for advanced AWB */

 AWB control byte 0 */

 DSP control byte 1 */

 DSP control byte 2 */

 DSP control byte 3 */

 DSP control byte 4 */

 AWB BLC level clip */

 AWB control  1 */

 AWB control  2 */

 AWB control  3 */

 AWB control  4 */

 AWB control  5 */

 AWB control  6 */

 AWB control  7 */

 AWB control  8 */

 AWB control  9 */

 AWB control 10 */

 AWB control 11 */

 AWB control 12 */

 AWB control 13 */

 AWB control 14 */

 AWB control 15 */

 AWB control 16 */

 AWB control 17 */

 AWB control 18 */

 AWB control 19 */

 AWB control 20 */

 AWB control 21 */

 Gamma Curve  1st segment input end point */

 Gamma Curve  2nd segment input end point */

 Gamma Curve  3rd segment input end point */

 Gamma Curve  4th segment input end point */

 Gamma Curve  5th segment input end point */

 Gamma Curve  6th segment input end point */

 Gamma Curve  7th segment input end point */

 Gamma Curve  8th segment input end point */

 Gamma Curve  9th segment input end point */

 Gamma Curve 10th segment input end point */

 Gamma Curve 11th segment input end point */

 Gamma Curve 12th segment input end point */

 Gamma Curve 13th segment input end point */

 Gamma Curve 14th segment input end point */

 Gamma Curve 15th segment input end point */

 Gamma curve highest segment slope */

 De-noise threshold */

 Edge strength  control when manual mode */

 Edge threshold control when manual mode */

 Auto De-noise threshold control */

 Edge strength upper limit when Auto mode */

 Edge strength lower limit when Auto mode */

 Matrix coefficient 1 */

 Matrix coefficient 2 */

 Matrix coefficient 3 */

 Matrix coefficient 4 */

 Matrix coefficient 5 */

 Matrix coefficient 6 */

 Matrix control */

 Brightness control */

 Contrast contrast */

 Contrast contrast center */

 Auto UV adjust contrast 0 */

 Auto UV adjust contrast 1 */

 Scaling control 0 */

 Scaling control 1 */

 Scaling control 2 */

 FIFO manual mode delay control */

 FIFO auto   mode delay control */

 Special digital effect control */

 U component saturation control */

 V component saturation control */

 for ov7720 */

 Hue control 0 */

 Hue control 1 */

 for ov7725 */

 Cosine value */

 Sine value */

 Sign bit for Hue and contrast */

 DSP auto function ON/OFF control */

/*

 * register detail

 COM2 */

 Soft sleep mode */

 Output drive capability */

 1x */

 2x */

 3x */

 4x */

 COM3 */

 Vertical flip image ON/OFF selection */

 Horizontal mirror image ON/OFF selection */

 Swap B/R  output sequence in RGB mode */

 Swap Y/UV output sequence in YUV mode */

 Swap output MSB/LSB */

 Tri-state option for output clock */

   0: Tri-state    at this period */

   1: No tri-state at this period */

 Tri-state option for output data */

   0: Tri-state    at this period */

   1: No tri-state at this period */

 Sensor color bar test pattern */

 COM4 */

 PLL frequency control */

  00: Bypass PLL */

  01: PLL 4x */

  10: PLL 6x */

  11: PLL 8x */

 AEC evaluate window */

  00: Full window */

  01: 1/2  window */

  10: 1/4  window */

  11: Low 2/3 window */

 Reserved bit */

 COM5 */

 Auto frame rate control ON/OFF selection */

 Auto frame rate control speed selection */

 Auto frame rate max rate control */

     No  reduction of frame rate */

     Max reduction to 1/2 frame rate */

     Max reduction to 1/4 frame rate */

 Max reduction to 1/8 frame rate */

 Auto frame rate active point control */

     Add frame when AGC reaches  2x gain */

     Add frame when AGC reaches  4x gain */

     Add frame when AGC reaches  8x gain */

 Add frame when AGC reaches 16x gain */

 AEC max step control */

   0 : AEC incease step has limit */

   1 : No limit to AEC increase step */

 CLKRC */

 Input clock divider register */

 Reserved bit */

 COM7 */

 SCCB Register Reset */

   0 : No change */

   1 : Resets all registers to default */

 Resolution selection */

   Mask of VGA or QVGA */

   0 : VGA */

   1 : QVGA */

 ITU656 protocol ON/OFF selection */

 Sensor RAW */

 RGB output format control */

      Mask of color format */

      00 : GBR 4:2:2 */

      01 : RGB 565 */

      10 : RGB 555 */

 11 : RGB 444 */

 Output format control */

      Mask of output format */

      00 : YUV */

      01 : Processed Bayer RAW */

      10 : RGB */

 11 : Bayer RAW */

 COM8 */

 Enable fast AGC/AEC algorithm */

 AEC Setp size limit */

   0 : Step size is limited */

   1 : Unlimited step size */

 Banding filter ON/OFF */

 Enable AEC below banding value */

 Fine AEC ON/OFF control */

 AGC Enable */

 AWB Enable */

 AEC Enable */

 COM9 */

 Histogram or average based AEC/AGC */

 Automatic gain ceiling - maximum AGC value */

    000 :   2x */

    001 :   4x */

    010 :   8x */

    011 :  16x */

    100 :  32x */

 101 :  64x */

 110 : 128x */

 Drop VSYNC output of corrupt frame */

 Drop HREF  output of corrupt frame */

 COM11 */

 Single frame ON/OFF selection */

 Single frame transfer trigger */

 HREF */

 VSTART LSB */

 HSTART 2 LSBs */

 VSIZE LSB */

 HSIZE 2 LSBs */

 EXHCH */

 VOUTSIZE LSB */

 HOUTSIZE 2 LSBs */

 DSP_CTRL1 */

 FIFO enable/disable selection */

 UV adjust function ON/OFF selection */

 YUV444 to 422 UV channel option selection */

 Color matrix ON/OFF selection */

 Interpolation ON/OFF selection */

 Gamma function ON/OFF selection */

 Black defect auto correction ON/OFF */

 White define auto correction ON/OFF */

 DSP_CTRL3 */

 UV output sequence option */

   ON */

   OFF */

 DSP Color bar mask */

   ON */

   OFF */

 DSP_CTRL4 */

 DSPAUTO (DSP Auto Function ON/OFF Control) */

 AWB auto threshold control */

 De-noise auto threshold control */

 Edge enhancement auto strength control */

 UV adjust auto slope control */

 Auto scaling factor control */

 Auto scaling factor control */

/*

 * ID

/*

 * PLL multipliers

/*

 * struct

 band_filter = COM8[5] ? 256 - BDBASE : 0 */

 lock to protect power_count and streaming */

/*

 * supported color format list

		/* Setting DSP4 to DSP_OFMT_RAW8 still gives 10-bit output,

		 * regardless of the COM7 value. We can thus only support 10-bit

		 * Bayer until someone figures it out.

/*

 * window size list

/*

 * frame rate settings lists

/*

 * general function

/*

 * subdev ops

 Approximate to the closest supported frame interval. */

 Use image size (with blankings) to calculate desired pixel clock. */

	/*

	 * Pixel clock generation circuit is pretty simple:

	 *

	 * Fin -> [ / CLKRC_div] -> [ * PLL_mult] -> pclk

	 *

	 * Try to approximate the desired pixel clock testing all available

	 * PLL multipliers (1x, 4x, 6x, 8x) and calculate corresponding

	 * divisor with:

	 *

	 * div = PLL_mult * Fin / pclk

	 *

	 * and re-calculate the pixel clock using it:

	 *

	 * pclk = Fin * PLL_mult / CLKRC_div

	 *

	 * Choose the PLL_mult and CLKRC_div pair that gives a pixel clock

	 * closer to the desired one.

	 *

	 * The desired pixel clock is calculated using a known frame size

	 * (blanking included) and FPS.

	/*

	 * If the device is not powered up by the host driver do

	 * not apply any changes to H/W at this time. Instead

	 * the frame rate will be restored right after power-up.

 v4l2_ctrl_lock() locks our own mutex */

	/*

	 * If the device is not powered up by the host driver do

	 * not apply any controls to H/W at this time. Instead

	 * the controls will be restored right after power-up.

 Switch the filter off, it is on now */

 Switch the filter on, set AEC low limit */

	/*

	 * FIXME: The reset signal is connected to a shared GPIO on some

	 * platforms (namely the SuperH Migo-R). Until a framework becomes

	 * available to handle this cleanly, request the GPIO temporarily

	 * to avoid conflicts.

	/* If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

			/*

			 * Restore the format, the frame rate, and

			 * the controls

 Update the power count. */

 Select a format. */

 Select a window size. */

		/*

		 * Manual Edge Control Mode.

		 *

		 * Edge auto strength bit is set by default.

		 * Remove it when manual mode.

		/*

		 * Auto Edge Control Mode.

		 *

		 * Set upper and lower limit.

 Reset hardware. */

 Edge Ctrl. */

 Format and window size. */

 Set DSP_CTRL3. */

 DSP_CTRL4: AEC reference point and DSP output format. */

 Set COM3. */

 COM7: Sensor resolution and output format control. */

 COM4, CLKRC: Set pixel clock and framerate. */

 Set COM8. */

	/*

	 * If the device is not powered up by the host driver do

	 * not apply any changes to H/W at this time. Instead

	 * the format will be restored right after power-up.

 Check and show product ID and manufacturer ID. */

	/*

	 * For backward compatibility with older DTS where the

	 * bus-type property was not mandatory, assume

	 * V4L2_MBUS_PARALLEL as it was the only supported bus at the

	 * time. v4l2_fwnode_endpoint_alloc_parse() will not fail if

	 * 'bus-type' is not specified.

/*

 * i2c_driver function

 Use our mutex for the controls */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  adv7175 - adv7175a video encoder driver version 0.0.3

 *

 * Copyright (C) 1998 Dave Perks <dperks@ibm.net>

 * Copyright (C) 1999 Wolfgang Scherr <scherr@net4you.net>

 * Copyright (C) 2000 Serguei Miridonov <mirsev@cicese.mx>

 *    - some corrections for Pinnacle Systems Inc. DC10plus card.

 *

 * Changes by Ronald Bultje <rbultje@ronald.bitfreak.net>

 *    - moved over to linux>=2.4.x i2c protocol (9/9/2002)

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

	/* the adv7175 has an autoincrement function, use it if

 do raw I2C, not smbus compatible */

 do some slow I2C emulation kind of thing */

	/* for some reason pass_through NTSC needs

 ----------------------------------------------------------------------- */

 Output filter:  S-Video  Composite */

 0x09 */

 0x0c */

 ----------------------------------------------------------------------- */

 MR0, PAL enabled */

 MR1 */

 subc. freq. */

 subc. freq. */

 subc. freq. */

 subc. freq. */

 subc. phase */

 TR0, 16bit */

  */

  */

  */

  */

 TR1 */

 MR2 */

  */

  */

  */

  */

 MR0, PAL enabled */

 MR1 */

 subc. freq. */

 subc. freq. */

 subc. freq. */

 subc. freq. */

 subc. phase */

 MR0, NTSC enabled */

 MR1 */

 subc. freq. */

 subc. freq. */

 subc. freq. */

 subc. freq. */

 subc. phase */

 This is just for testing!!! */

 Enable genlock */

 Enable genlock */

		/* This is an attempt to convert

		 * SECAM->PAL (typically it does not work

		 * due to genlock: when decoder is in SECAM

		 * and encoder in in PAL the subcarrier can

		 * not be synchronized with horizontal

 Disable genlock */

	/* RJ: input = 0: input is from decoder

	   input = 1: input is from ZR36060

 TR1 */

 Disable genlock */

 Enable genlock */

udelay(10);*/

 TR1 */

 udelay(10); */

 udelay(10); */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 Check if the adapter supports the needed features */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * V4L2 subdevice driver for OmniVision OV6650 Camera Sensor

 *

 * Copyright (C) 2010 Janusz Krzysztofik <jkrzyszt@tis.icnet.pl>

 *

 * Based on OmniVision OV96xx Camera Driver

 * Copyright (C) 2009 Marek Vasut <marek.vasut@gmail.com>

 *

 * Based on ov772x camera driver:

 * Copyright (C) 2008 Renesas Solutions Corp.

 * Kuninori Morimoto <morimoto.kuninori@renesas.com>

 *

 * Based on ov7670 and soc_camera_platform driver,

 * Copyright 2006-7 Jonathan Corbet <corbet@lwn.net>

 * Copyright (C) 2008 Magnus Damm

 * Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>

 *

 * Hardware specific bits initially based on former work by Matt Callow

 * drivers/media/video/omap/sensor_ov6650.c

 * Copyright (C) 2006 Matt Callow

 Register definitions */

 range 00 - 3F */

 [7:4] saturation [0:3] reserved */

 [7:6] rsrvd [5] hue en [4:0] hue */

 Data Format and Internal Clock */

 [7:6] Input system clock (MHz)*/

   00=8, 01=12, 10=16, 11=24 */

 [5:0]: Internal Clock Pre-Scaler */

 [7] Reset */

 Register bits, values, etc. */

 high byte of product ID number */

 low byte of product ID number */

 high byte of mfg ID */

 low byte of mfg ID */

 supported resolutions */

 exposure/autoexposure cluster */

 gain/autogain cluster */

 blue/red/autowhitebalance cluster */

 scale down output by 2 */

 sensor cropping window */

 as requested with s_frame_interval */

 read a register */

 write a register */

 Read a register, alter its bits, write it back */

 Start/Stop streaming from the device */

 Get status of additional camera capabilities */

 Set status of additional camera capabilities */

 initialize response with default media bus frame format */

 update media bus format code and frame size */

 set the format we will capture in */

 select color matrix configuration for given color encoding */

 store media bus format code and frame size in pad config */

 return default mbus frame format updated with pad config */

 apply new media bus format code and frame size */

 return default format updated with active size and code */

 Reset to full rate */

 Soft reset the camera. This has nothing to do with the RESET pin! */

 program default register values */

 ~COMA_RESET */

	/*

	 * check and show product ID and manufacturer ID

 Request bus settings on camera side */

 Alter bus settings on camera side */

	/*

	 * Update the configuration to report what is actually applied to

	 * the hardware.

/*

 * i2c_driver function

 Hardware default frame interval */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018 Intel Corporation

 Chip ID */

 V_TIMING internal */

Frame Length Line*/

 HBLANK control - read only */

 Exposure control */

 Analog gain control */

 Digital gain control */

 Max = 0xFFF */

 HDR control */

 Test Pattern Control */

 Orientation */

 Input clock frequency in Hz */

 Link frequency config */

 PLL registers for this link frequency */

 Mode : resolution and related config&values */

 Frame width */

 Frame height */

 V-timing */

 Index of Link frequency config to be used */

 Default register values */

 4208x3118 needs 1267Mbps/lane, 4 lanes */

 Configurations for supported link frequencies */

/*

 * pixel_rate = link_freq * data-rate * nr_of_lanes / bits_per_sample

 * data rate => double data rate; number of lanes => 4; bits per pixel => 10

 Menu items for LINK_FREQ V4L2 control */

 Link frequency configs */

 Mode configs */

 V4L2 Controls */

 Current mode */

	/*

	 * Mutex for serialized access:

	 * Protect sensor module set pad format and start/stop streaming safely.

 Streaming on/off */

 Read registers up to 2 at a time */

 Write register address */

 Read data from register */

 Write registers up to 2 at a time */

 Write a list of registers */

 Open sub-device */

 Initialize try_fmt */

	/*

	 * Applying V4L2 control value only happens

	 * when power is up for streaming

 Only one bayer order(GRBG) is supported */

 Only one raw bayer(GBRG) order is supported */

 Update limits and set FPS to default */

 Start streaming */

 Setup PLL */

 Apply default values of current mode */

 Set Orientation be 180 degree */

 Apply customized values from user */

 set stream on register */

 Stop streaming */

 set stream off register */

	/*

	 * Return success even if it was an error, as there is nothing the

	 * caller can do about it.

		/*

		 * Apply default & customized values

		 * and then start streaming.

 Verify chip ID */

 Initialize control handlers */

 By default, PIXEL_RATE is read only */

	/*

	 * Check that the device is mounted upside down. The driver only

	 * supports a single pixel order right now.

 Initialize subdev */

 Will be powered off via pm_runtime_idle */

 Check module identity */

 Set default mode to max resolution */

 Initialize subdev */

 Initialize source pad */

 sentinel */ }

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020 MediaTek Inc.

/*

 * This sets the minimum granularity for the focus positions.

 * A value of 1 gives maximum accuracy for a desired focus position

/*

 * Ring control and Power control register

 * Bit[1] RING_EN

 * 0: Direct mode

 * 1: AAC mode (ringing control mode)

 * Bit[0] PD

 * 0: Normal operation mode

 * 1: Power down mode

 * DW9768 requires waiting time of Topr after PD reset takes place.

/*

 * DW9768 separates two registers to control the VCM position.

 * One for MSB value, another is LSB value.

 * DAC_MSB: D[9:8] (ADD: 0x03)

 * DAC_LSB: D[7:0] (ADD: 0x04)

 * D[9:0] DAC data input: positive output current = D[9:0] / 1023 * 100[mA]

/*

 * AAC mode control & prescale register

 * Bit[7:5] Namely AC[2:0], decide the VCM mode and operation time.

 * 001 AAC2 0.48 x Tvib

 * 010 AAC3 0.70 x Tvib

 * 011 AAC4 0.75 x Tvib

 * 101 AAC8 1.13 x Tvib

 * Bit[2:0] Namely PRESC[2:0], set the internal clock dividing rate as follow.

 * 000 2

 * 001 1

 * 010 1/2

 * 011 1/4

 * 100 8

 * 101 4

/*

 * VCM period of vibration register

 * Bit[5:0] Defined as VCM rising periodic time (Tvib) together with PRESC[2:0]

 * Tvib = (6.3ms + AACT[5:0] * 0.1ms) * Dividing Rate

 * Dividing Rate is the internal clock dividing rate that is defined at

 * PRESCALE register (ADD: 0x06)

/*

 * DW9768 requires waiting time (delay time) of t_OPR after power-up,

 * or in the case of PD reset taking place.

/*

 * This acts as the minimum granularity of lens movement.

 * Keep this value power of 2, so the control steps can be

 * uniformly adjusted for gradual lens movement, with desired

 * number of control steps.

 Digital I/O power */

 Digital core power */

 dw9768 device structure */

/*

 * DW9768_AAC_PRESC_REG & DW9768_AAC_TIME_REG determine VCM operation time.

 * For current VCM mode: AAC3, Operation Time would be 0.70 x Tvib.

 * Tvib = (6.3ms + AACT[5:0] * 0.1MS) * Dividing Rate.

 * Below is calculation of the operation delay for each step.

 Write VCM position to registers */

 Reset DW9768_RING_PD_CONTROL_REG to default status 0x00 */

	/*

	 * DW9769 requires waiting delay time of t_OPR

	 * after PD reset takes place.

 Set DW9768_RING_PD_CONTROL_REG to DW9768_AAC_MODE_EN(0x01) */

 Set AAC mode */

 Set clock presc */

 Set AAC Timing */

	/*

	 * DW9769 requires waiting delay time of t_OPR

	 * after PD reset takes place.

	/*

	 * The datasheet refers to t_OPR that needs to be waited before sending

	 * I2C commands after power-up.

 Initialize subdev */

 Optional indication of AAC mode select */

 Optional indication of clock pre-scale select */

 Optional indication of AAC Timing */

 Initialize controls */

 Initialize subdev */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * upd6408x - NEC Electronics 3-Dimensional Y/C separation driver

 *

 * 2003 by T.Adachi (tadachi@tadachi-net.com)

 * 2003 by Takeru KOMORIYA <komoriya@paken.org>

 * 2006 by Hans Verkuil <hverkuil@xs4all.nl>

/* Initial values when used in combination with the

 we use EXCSS=0 */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 ----------------------------------------------------------------------- */

 ------------------------------------------------------------------------ */

 i2c implementation */

 Initially assume that a ghost reduction chip is present */

 YCS mode */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for MT9M001 CMOS Image Sensor from Micron

 *

 * Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>

/*

 * mt9m001 i2c address 0x5d

 mt9m001 selected register addresses */

 MT9M001 has only one fixed colorspace per pixelcode */

 Find a data format by a pixel code in an array */

	/*

	 * Order important: first natively supported,

	 * second supported with a GPIO extender

 Order important - see above */

 exposure/auto-exposure cluster */

 Sensor window */

 Lines to skip at the top */

		/*

		 * Issue a soft reset. This returns all registers to their

		 * default values.

 Disable chip, synchronous option update */

 Blanking and start values - default... */

		/*

		 * The caller provides a supported format, as verified per

		 * call to .set_fmt(FORMAT_TRY).

 Switch to master "normal" mode */

 Switch to master stop sensor readout */

		/*

		 * Bayer format - even number of rows for simplicity,

		 * but let the user play with the top row.

 Datasheet requirement: see register description */

 No support for scaling so far, just crop. TODO: use skipping */

 See Datasheet Table 7, Gain settings. */

 Pack it into 0..1 step 0.125, register values 0..8 */

 Pack it into 1.125..15 variable step, register values 9..67 */

 We assume qctrl->maximum - qctrl->default_value - 1 > 0 */

/*

 * Interface active, can use i2c. If it fails, it can indeed mean, that

 * this wasn't our capture interface, so, we wait for the right one

 Enable the chip */

 Read out the chip version register */

 must be 0x8411 or 0x8421 for colour sensor and 8431 for bw */

 mt9m001_init() has reset the chip, returning registers to defaults */

 MT9M001 has all capture_format parameters fixed */

	/*

	 * Simulated autoexposure. If enabled, we calculate shutter width

	 * ourselves in the driver based on vertical blanking and frame width

 Second stage probe - when a capture adapter is there */

	/*

	 * As it increments RPM usage_count even on errors, we don't need to

	 * check the returned code here.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

 /*

    tda9840 - i2c-driver for the tda9840 by SGS Thomson



    Copyright (C) 1998-2003 Michael Hunold <michael@mihu.de>

    Copyright (C) 2008 Hans Verkuil <hverkuil@xs4all.nl>



    The tda9840 is a stereo/dual sound processor with digital

    identification. It can be found at address 0x84 on the i2c-bus.



    For detailed information download the specifications directly

    from SGS Thomson at http://www.st.com



 mono input */

 stereo input */

 bilingual */

 Incorrect detect */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 let's see whether this adapter can support what we need */

 set initial values for level & stereo - adjustment, mode */

 SPDX-License-Identifier: GPL-2.0

/*

 * imx214.c - imx214 sensor driver

 *

 * Copyright 2018 Qtechnology A/S

 *

 * Ricardo Ribalda <ribalda@kernel.org>

	/*

	 * Serialize control access, get/set format, get selection

	 * and start streaming.

From imx214_mode_tbls.h*/

 software reset */

 software standby settings */

 ATR setting */

 external clock setting */

 global setting */

 basic config */

 analog setting */

 embedded data */

 imagequality */

 HDR setting */

 CNR parameter setting */

 Moire reduction */

 image enhancement */

 white balanace */

 ATR setting */

/*

 * Declare modes in order, from biggest

 * to smallest height.

	/*

	 * Applying V4L2 control value only happens

	 * when power is up for streaming

	/*

	 * Enable power initially, to avoid warnings

	 * from clk_disable on power_off

	/*

	 * WARNING!

	 * Values obtained reverse engineering blobs and/or devices.

	 * Ranges and functionality might be wrong.

	 *

	 * Sony, please release some register set documentation for the

	 * device.

	 *

	 * Yours sincerely, Ricardo.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Cirrus Logic cs3308 8-Channel Analog Volume Control

 *

 * Copyright (C) 2010 Devin Heitmueller <dheitmueller@kernellabs.com>

 * Copyright (C) 2012 Steven Toth <stoth@kernellabs.com>

 *

 * Derived from cs5345.c Copyright (C) 2007 Hans Verkuil

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 Check if the adapter supports the needed features */

 Set some reasonable defaults */

 Power up all channels */

 Master Power */

 Device Configuration */

 Set volume for each channel */

 Unmute all channels */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for MT9V022, MT9V024, MT9V032, and MT9V034 CMOS Image Sensors

 *

 * Copyright (C) 2010, Laurent Pinchart <laurent.pinchart@ideasonboard.com>

 *

 * Based on the MT9M001 driver,

 *

 * Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>

 The first four rows are black rows. The active area spans 753x481 pixels. */

 MT9V022IX7ATC */

 MT9V022IX7ATM */

 MT9V024IA7XTC */

 MT9V024IA7XTM */

 MT9V032C12STM */

 MT9V032C12STC */

 System clock has to be enabled before releasing the reset */

		/* After releasing reset we need to wait 10 clock cycles

		 * before accessing the sensor over I2C. As the minimum SYSCLK

		 * frequency is 13MHz, waiting 1µs will be enough in the worst

		 * case.

 Reset the chip and stop data read out */

 Configure the pixel clock polarity */

 Disable the noise correction algorithm and restore the controls. */

/* -----------------------------------------------------------------------------

 * V4L2 subdev video operations

 Configure the window size and row/column bin */

 Switch to master "normal" mode */

	/* Compute the power-of-two binning factor closest to the input size to

	 * output size ratio. Given that the output size is bounded by input/4

	 * and input, a generic implementation would be an ineffective luxury.

 Clamp the width and height to avoid dividing by zero. */

	/* Clamp the crop rectangle boundaries and align them to a non multiple

	 * of 2 pixels to ensure a GRBG Bayer pattern.

		/* Reset the output image size if the crop rectangle size has

		 * been modified.

/* -----------------------------------------------------------------------------

 * V4L2 subdev control operations

/*

 * Value between 1 and 64 to set the desired bin. This is effectively a measure

 * of how bright the image is supposed to be. Both AGC and AEC try to reach

 * this.

/*

 * LPF is the low pass filter capability of the chip. Both AEC and AGC have

 * this setting. This limits the speed in which AGC/AEC adjust their settings.

 * Possible values are 0-2. 0 means no LPF. For 1 and 2 this equation is used:

 *

 * if |(calculated new exp - current exp)| > (current exp / 4)

 *	next exp = calculated new exp

 * else

 *	next exp = current exp + ((calculated new exp - current exp) / 2^LPF)

/*

 * Value between 0 and 15. This is the number of frames being skipped before

 * updating the auto exposure/gain.

/*

 * Maximum shutter width used for AEC.

/* -----------------------------------------------------------------------------

 * V4L2 subdev core operations

	/* If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

 Update the power count. */

/* -----------------------------------------------------------------------------

 * V4L2 subdev internal operations

 Read and check the sensor version */

/* -----------------------------------------------------------------------------

 * Driver initialization and probing

 MT9V022, MT9V032 revisions 1/2/3 */

 MT9V024, MT9V034 */

 Sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Sony imx334 sensor driver

 *

 * Copyright (C) 2021 Intel Corporation

 Streaming Mode */

 Lines per frame */

 Chip ID */

 Exposure control */

 Analog gain control */

 Group hold register */

 Input clock rate */

 CSI2 HW configuration */

/**

 * struct imx334_reg - imx334 sensor register

 * @address: Register address

 * @val: Register value

/**

 * struct imx334_reg_list - imx334 sensor register list

 * @num_of_regs: Number of registers in the list

 * @regs: Pointer to register list

/**

 * struct imx334_mode - imx334 sensor mode structure

 * @width: Frame width

 * @height: Frame height

 * @code: Format code

 * @hblank: Horizontal blanking in lines

 * @vblank: Vertical blanking in lines

 * @vblank_min: Minimal vertical blanking in lines

 * @vblank_max: Maximum vertical blanking in lines

 * @pclk: Sensor pixel clock

 * @link_freq_idx: Link frequency index

 * @reg_list: Register list for sensor mode

/**

 * struct imx334 - imx334 sensor device structure

 * @dev: Pointer to generic device

 * @client: Pointer to i2c client

 * @sd: V4L2 sub-device

 * @pad: Media pad. Only one pad supported

 * @reset_gpio: Sensor reset gpio

 * @inclk: Sensor input clock

 * @ctrl_handler: V4L2 control handler

 * @link_freq_ctrl: Pointer to link frequency control

 * @pclk_ctrl: Pointer to pixel clock control

 * @hblank_ctrl: Pointer to horizontal blanking control

 * @vblank_ctrl: Pointer to vertical blanking control

 * @exp_ctrl: Pointer to exposure control

 * @again_ctrl: Pointer to analog gain control

 * @vblank: Vertical blanking in lines

 * @cur_mode: Pointer to current selected sensor mode

 * @mutex: Mutex for serializing sensor controls

 * @streaming: Flag indicating streaming state

 Sensor mode registers */

 Supported sensor mode configurations */

/**

 * to_imx334() - imv334 V4L2 sub-device to imx334 device.

 * @subdev: pointer to imx334 V4L2 sub-device

 *

 * Return: pointer to imx334 device

/**

 * imx334_read_reg() - Read registers.

 * @imx334: pointer to imx334 device

 * @reg: register address

 * @len: length of bytes to read. Max supported bytes is 4

 * @val: pointer to register value to be filled.

 *

 * Big endian register addresses with little endian values.

 *

 * Return: 0 if successful, error code otherwise.

 Write register address */

 Read data from register */

/**

 * imx334_write_reg() - Write register

 * @imx334: pointer to imx334 device

 * @reg: register address

 * @len: length of bytes. Max supported bytes is 4

 * @val: register value

 *

 * Big endian register addresses with little endian values.

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_write_regs() - Write a list of registers

 * @imx334: pointer to imx334 device

 * @regs: list of registers to be written

 * @len: length of registers array

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_update_controls() - Update control ranges based on streaming mode

 * @imx334: pointer to imx334 device

 * @mode: pointer to imx334_mode sensor mode

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_update_exp_gain() - Set updated exposure and gain

 * @imx334: pointer to imx334 device

 * @exposure: updated exposure value

 * @gain: updated analog gain value

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_set_ctrl() - Set subdevice control

 * @ctrl: pointer to v4l2_ctrl structure

 *

 * Supported controls:

 * - V4L2_CID_VBLANK

 * - cluster controls:

 *   - V4L2_CID_ANALOGUE_GAIN

 *   - V4L2_CID_EXPOSURE

 *

 * Return: 0 if successful, error code otherwise.

 Set controls only if sensor is in power on state */

 V4l2 subdevice control ops*/

/**

 * imx334_enum_mbus_code() - Enumerate V4L2 sub-device mbus codes

 * @sd: pointer to imx334 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device state

 * @code: V4L2 sub-device code enumeration need to be filled

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_enum_frame_size() - Enumerate V4L2 sub-device frame sizes

 * @sd: pointer to imx334 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device state

 * @fsize: V4L2 sub-device size enumeration need to be filled

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_fill_pad_format() - Fill subdevice pad format

 *                            from selected sensor mode

 * @imx334: pointer to imx334 device

 * @mode: pointer to imx334_mode sensor mode

 * @fmt: V4L2 sub-device format need to be filled

/**

 * imx334_get_pad_format() - Get subdevice pad format

 * @sd: pointer to imx334 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device state

 * @fmt: V4L2 sub-device format need to be set

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_set_pad_format() - Set subdevice pad format

 * @sd: pointer to imx334 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device state

 * @fmt: V4L2 sub-device format need to be set

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_init_pad_cfg() - Initialize sub-device pad configuration

 * @sd: pointer to imx334 V4L2 sub-device structure

 * @sd_state: V4L2 sub-device state

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_start_streaming() - Start sensor stream

 * @imx334: pointer to imx334 device

 *

 * Return: 0 if successful, error code otherwise.

 Write sensor mode registers */

 Setup handler will write actual exposure and gain */

 Start streaming */

/**

 * imx334_stop_streaming() - Stop sensor stream

 * @imx334: pointer to imx334 device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_set_stream() - Enable sensor streaming

 * @sd: pointer to imx334 subdevice

 * @enable: set to enable sensor streaming

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_detect() - Detect imx334 sensor

 * @imx334: pointer to imx334 device

 *

 * Return: 0 if successful, -EIO if sensor id does not match

/**

 * imx334_parse_hw_config() - Parse HW configuration and check if supported

 * @imx334: pointer to imx334 device

 *

 * Return: 0 if successful, error code otherwise.

 Request optional reset pin */

 Get sensor input clock */

 V4l2 subdevice ops */

/**

 * imx334_power_on() - Sensor power on sequence

 * @dev: pointer to i2c device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_power_off() - Sensor power off sequence

 * @dev: pointer to i2c device

 *

 * Return: 0 if successful, error code otherwise.

/**

 * imx334_init_controls() - Initialize sensor subdevice controls

 * @imx334: pointer to imx334 device

 *

 * Return: 0 if successful, error code otherwise.

 Serialize controls with sensor device */

 Initialize exposure and gain */

 Read only controls */

/**

 * imx334_probe() - I2C client device binding

 * @client: pointer to i2c client device

 *

 * Return: 0 if successful, error code otherwise.

 Initialize subdev */

 Check module identity */

 Set default mode to max resolution */

 Initialize subdev */

 Initialize source pad */

/**

 * imx334_remove() - I2C client device unbinding

 * @client: pointer to I2C client device

 *

 * Return: 0 if successful, error code otherwise.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * upd64031A - NEC Electronics Ghost Reduction for NTSC in Japan

 *

 * 2003 by T.Adachi <tadachi@tadachi-net.com>

 * 2003 by Takeru KOMORIYA <komoriya@paken.org>

 * 2006 by Hans Verkuil <hverkuil@xs4all.nl>

 --------------------- read registers functions define -------------------- */

 bit masks */

 -------------------------------------------------------------------------- */

	/* unused registers

	 R10, R11, R12, R13, R14,

	 R15, R16, R17,

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 The input changed due to new input or channel changed */

 ------------------------------------------------------------------------ */

 ----------------------------------------------------------------------- */

 ------------------------------------------------------------------------ */

 i2c implementation */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for SiliconFile NOON010PC30 CIF (1/11") Image Sensor with ISP

 *

 * Copyright (C) 2010 - 2011 Samsung Electronics Co., Ltd.

 * Contact: Sylwester Nawrocki, <s.nawrocki@samsung.com>

 *

 * Initial register configuration based on a driver authored by

 * HeungJun Kim <riverful.kim@samsung.com>.

/*

 * Register offsets within a page

 * b15..b8 - page id, b7..b0 - register address

 Window size and position */

 VSYNC control */

 page 1 */

 Color correction */

 Gamma correction */

 Lens Shading */

 Page 3 - Auto Exposure */

 Page 4 - Auto White Balance */

 Manual white balance, when AWB_CTL2[0]=1 */

 The token to mark an array end */

 Protects the struct members below */

 Supported resolutions. */

 Supported pixel formats. */

 Color corection and saturation */

 Automatic white balance */

 Auto exposure */

 Lens shading compensation */

 Device reset and sleep mode control */

 Automatic white balance control */

 Called with struct noon010_info.lock mutex held */

 Configure resolution and color format */

 Find nearest matching image pixel size. */

 Called with info.lock mutex held */

 Called with info.lock mutex held */

	/*

	 * If the device is not powered up by the host driver do

	 * not apply any controls to H/W at this time. Instead

	 * the controls will be restored right after power-up.

 Return nearest media bus frame format. */

 Called with struct noon010_info.lock mutex held */

 Restore the controls state */

 Return 0 if NOON010PC30L sensor type was detected or -ENODEV otherwise. */

 Static name; NEVER use in new drivers! */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * cs5345 Cirrus Logic 24-bit, 192 kHz Stereo Audio ADC

 * Copyright (C) 2007 Hans Verkuil

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 Check if the adapter supports the needed features */

 set volume/mute */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

 input 0, composite */

 correct digital format */

 or 0x01 for PAL */

 window */

 window */

 window */

 window */

 window */

 scaling */

 scaling */

 scaling */

 brightness */

 contrast */

 sharpness */

 U gain */

 V gain */

 hue */

 vbi */

 Terminator (reg 0x00 is read-only) */

 --------------------------------------------------------------------------*/

 Check if the adapter supports the needed features */

 Initialize tw9906 */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019 Intel Corporation.

 vertical-timings from sensor */

 horizontal-timings from sensor */

 Exposure controls from sensor */

 Analog gain controls from sensor */

 Digital gain controls from sensor */

 Test Pattern Control */

 Frame width in pixels */

 Frame height in pixels */

 Horizontal timining size */

 Default vertical timining size */

 Min vertical timining size */

 Link frequency needed for this resolution */

 Sensor register settings for this resolution */

SENSOR_INITIALIZATION

 V4L2 Controls */

 Current mode */

 To serialize asynchronus callbacks */

 Streaming on/off */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

 V4L2 controls values will be applied only when power is already up */

 Update FLL that meets expected vertical blanking */

 Update limits and set FPS to default */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2020 Bootlin

 * Author: Paul Kocialkowski <paul.kocialkowski@bootlin.com>

 Clock rate */

 Register definitions */

 System */

 Group Hold */

 Exposure/gain/banding */

 Timing */

 Strobe/exposure */

 OTP */

 PSRAM */

 Black Level */

 Frame */

 MIPI CSI-2 */

 ISP */

 White Balance */

 Macros */

 Data structures */

/*

 * PLL1 Clock Tree:

 *

 * +-< XVCLK

 * |

 * +-+ pll_pre_div (0x3037 [3:0], special values: 5: 1.5, 7: 2.5)

 *   |

 *   +-+ pll_mul (0x3036 [7:0])

 *     |

 *     +-+ sys_div (0x3035 [7:4])

 *       |

 *       +-+ mipi_div (0x3035 [3:0])

 *       | |

 *       | +-> MIPI_SCLK

 *       | |

 *       | +-+ mipi_phy_div (2)

 *       |   |

 *       |   +-> MIPI_CLK

 *       |

 *       +-+ root_div (0x3037 [4])

 *         |

 *         +-+ bit_div (0x3034 [3:0], 8 bits: 2, 10 bits: 2.5, other: 1)

 *           |

 *           +-+ sclk_div (0x3106 [3:2])

 *             |

 *             +-> SCLK

 *             |

 *             +-+ mipi_div (0x3035, 1: PCLK = SCLK)

 *               |

 *               +-> PCLK

/*

 * PLL2 Clock Tree:

 *

 * +-< XVCLK

 * |

 * +-+ plls_pre_div (0x303d [5:4], special values: 0: 1, 1: 1.5)

 *   |

 *   +-+ plls_div_r (0x303d [2])

 *     |

 *     +-+ plls_mul (0x303b [4:0])

 *       |

 *       +-+ sys_div (0x303c [3:0])

 *         |

 *         +-+ sel_div (0x303d [1:0], special values: 0: 1, 3: 2.5)

 *           |

 *           +-> ADCLK

/*

 * General formulas for (array-centered) mode calculation:

 * - photo_array_width = 2624

 * - crop_start_x = (photo_array_width - output_size_x) / 2

 * - crop_end_x = crop_start_x + offset_x + output_size_x - 1

 *

 * - photo_array_height = 1956

 * - crop_start_y = (photo_array_height - output_size_y) / 2

 * - crop_end_y = crop_start_y + offset_y + output_size_y - 1

 8-bit frame interval followed by 10-bit frame interval. */

 8-bit config followed by 10-bit config. */

 Static definitions */

/*

 * XVCLK = 24 MHz

 * SCLK  = 84 MHz

 * PCLK  = 84 MHz

/*

 * XVCLK = 24 MHz

 * SCLK  = 84 MHz

 * PCLK  = 84 MHz

/*

 * XVCLK = 24 MHz

 * ADCLK = 200 MHz

 2592x1944 */

 Horizontal */

 Vertical */

 Subsample increase */

 Frame Interval */

 PLL */

 1600x1200 (UXGA) */

 Horizontal */

 Vertical */

 Subsample increase */

 Frame Interval */

 PLL */

 1920x1080 (Full HD) */

 Horizontal */

 Vertical */

 Subsample increase */

 Frame Interval */

 PLL */

 1280x960 */

 Horizontal */

 Vertical */

 Binning */

 Subsample increase */

 Frame Interval */

 PLL */

 1280x720 (HD) */

 Horizontal */

 Vertical */

 Binning */

 Subsample increase */

 Frame Interval */

 PLL */

 640x480 (VGA) */

 Horizontal */

 Vertical */

 Binning */

 Subsample increase */

 Frame Interval */

 PLL */

 PSRAM */

 Input/Output */

 Sensor */

 Configure pads as input. */

 Disable FREX pin. */

 Up to 6 lines are available for black level calibration. */

 Enable black and white level correction. */

 Enable AWB. */

 Enable AWB gain and windowing. */

 Enable buffering and auto-binning. */

 Enable post-binning filters. */

 Disable debanding and night mode. Debug bit seems necessary. */

 Crop Start X */

 Offset X */

 Output Size X */

 Crop End X */

 Horizontal Total Size */

 Crop Start Y */

 Offset Y */

 Output Size Y */

 Crop End Y */

 Vertical Total Size */

 Flip/Mirror/Binning */

	/*

	 * A debug bit is enabled by default and needs to be cleared for

	 * subsampling to work.

 PLLs */

 Extra registers */

 Exposure */

 Gain */

 White Balance */

 Flip */

 Test Pattern */

 State */

 State will be configured at first power on otherwise. */

 Sensor Base */

 Configure current mode. */

 Keep initialized to zero for disable label. */

	/*

	 * General notes about the power sequence:

	 * - power-down GPIO must be active (low) during power-on;

	 * - reset GPIO state does not matter during power-on;

	 * - XVCLK must be provided 1 ms before register access;

	 * - 10 ms are needed between power-down deassert and register access.

 Note that regulator-and-GPIO-based power is untested. */

 According to OV5648 power up diagram. */

 Controls */

 Wait for the sensor to be on before setting controls. */

 Use our mutex for ctrl locking. */

 Exposure */

 Gain */

 White Balance */

 Flip */

 Test Pattern */

 MIPI CSI-2 */

 Subdev Video Operations */

 Subdev Pad Operations */

 Try to find requested mbus code. */

 Fallback to default. */

 Find the mode with nearest dimensions. */

	/*

	 * Multiple modes with the same dimensions may have different frame

	 * intervals, so look up each relevant mode.

 Graph Endpoint */

 GPIOs */

 Regulators */

 DVDD: digital core */

 DOVDD: digital I/O */

 AVDD: analog */

 External Clock */

 Subdev, entity and pad */

 Mutex */

 Sensor */

 Runtime PM */

 V4L2 subdev register */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * adv7604 - Analog Devices ADV7604 video decoder driver

 *

 * Copyright 2012 Cisco Systems, Inc. and/or its affiliates. All rights reserved.

 *

/*

 * References (c = chapter, p = page):

 * REF_01 - Analog devices, ADV7604, Register Settings Recommendations,

 *		Revision 2.5, June 2010

 * REF_02 - Analog devices, Register map documentation, Documentation of

 *		the register maps, Software manual, Rev. F, June 2010

 * REF_03 - Analog devices, ADV7604, Hardware Manual, Rev. F, August 2010

 ADV7604 system clock frequency */

 including ADV7610

 0 = AFE, 1 = HDMI */

 Masks for timings */

/*

 **********************************************************************

 *

 *  Arrays with configuration parameters for the ADV7604

 *

 **********************************************************************

 CEC */

 i2c clients */

 Regmaps */

 controls */

 Unsupported timings. This device cannot support 720p30. */

 sorted by number of lines */

 { V4L2_DV_BT_CEA_720X480P59_94, 0x0a, 0x00 }, TODO flickering */

 TODO add 1920x1080P60_RB (CVT timing) */

 sorted by number of lines */

 TODO not tested */

 TODO add 1600X1200P60_RB (not a DMT timing) */

 TODO not tested */

 sorted by number of lines */

 sorted by number of lines */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

/* adv76xx_write_block(): Write raw data with a maximum of I2C_SMBUS_BLOCK_MAX

 * size to one or more registers.

 *

 * A value of zero will be returned on success, a negative errno will

 * be returned in error cases.

 ----------------------------------------------------------------------- */

/* -----------------------------------------------------------------------------

 * Format helpers

 ----------------------------------------------------------------------- */

 keep this initialization for compatibility with GCC < 4.4.6 */

 keep this initialization for compatibility with GCC < 4.4.6 */

/*

 * Return the DV timings capabilities for the requested sink pad. As a special

 * case, pad value -1 returns the capabilities for the currently selected input.

 ----------------------------------------------------------------------- */

	/*  Reads CABLE_DET_A_RAW. For input B support, need to

	 *  account for bit 7 [MSB] of 0x6a (ie. CABLE_DET_B_RAW)

 video std */

 v_freq and prim mode */

 reset to default values */

 disable embedded syncs for auto graphics mode */

 auto graphics */

 video std */

 prim mode */

 enable embedded syncs for auto graphics mode */

 Should only be set in auto-graphics mode [REF_02, p. 91-92] */

 setup PLL_DIV_MAN_EN and PLL_DIV_RATIO */

 IO-map reg. 0x16 and 0x17 should be written in sequence */

 active video - horizontal timing */

 active video - vertical timing */

		/* set default prim_mode/vid_std for HDMI

 video std */

 prim mode */

 Registers must be written in this order with no i2c access in between */

 Registers must be written in this order with no i2c access in between */

			/* Receiving analog RGB signal

			/* Receiving analog YPbPr signal

			/* Receiving HDMI signal

		/* Receiving DVI-D signal

		 * ADV7604 selects RGB limited range regardless of

 RGB limited range (16-235) */

 RGB full range (0-255) */

 YCrCb limited range (16-235) */

 RGB limited range (16-235) */

 YCrCb full range (0-255) */

 RGB full range (0-255) */

 Adjust gain/offset for DVI-D signals only */

		/* Set the analog sampling phase. This is needed to find the

		   best sampling phase for analog video: an application or

		   driver has to try a number of phases and analyze the picture

		/* Use the default blue color for free running mode,

 ----------------------------------------------------------------------- */

 Entire chip or CP powered off */

	/*

	 * Chips without a AFE don't expose registers for the SSPD, so just assume

	 * that we have a lock.

 TODO channel 2 */

 TODO channel 2 */

	/* CP has detected a non standard number of lines on the incoming

 ----------------------------------------------------------------------- */

 read STDI */

 read SSPD */

/* Fill the optional fields .standards and .flags in struct v4l2_dv_timings

 adjust for deep color mode and pixel repetition */

 read STDI */

		/* find format

		 * Since LCVS values are inaccurate [REF_03, p. 275-276],

		 * stdi2dv_timings() is called with lcvs +-1 if the first attempt fails.

			/*

			 * The STDI block may measure wrong values, especially

			 * for lcvs and lcf. If the driver can not find any

			 * valid timing, the STDI block is restarted to measure

			 * the video timings again. The function will return an

			 * error, but the restart of STDI will generate a new

			 * STDI interrupt and the format detection process will

			 * restart.

 TODO restart STDI for Sync Channel 2 */

 enter one-shot mode */

 trigger STDI restart */

 reset to continuous mode */

 Use prim_mode and vid_std when available */

		/* custom settings when the video format

 Disable Tristate of Pins (no audio) */

 Disable Tristate of Pins */

 Unmute audio */

 Mute audio */

 512 samples with >= 32 kHz sample rate [REF_03, c. 7.16.10] */

 Tristate all outputs from video core */

 power up ADC */

 power up Analog Front End */

 phase control */

 power down ADC */

 power down Analog Front End */

 phase control */

 CP core pre-gain control */

 CP coast control. Graphics mode */

 CP core pre-gain control. Graphics mode */

/*

 * Compute the op_ch_sel value required to obtain on the bus the component order

 * corresponding to the selected format taking into account bus reordering

 * applied by the board at the output of the device.

 *

 * The following table gives the op_ch_value from the format component order

 * (expressed as op_ch_sel value in column) and the bus reordering (expressed as

 * adv76xx_bus_order value in row).

 *

 *           |	GBR(0)	GRB(1)	BGR(2)	RGB(3)	BRG(4)	RBG(5)

 * ----------+-------------------------------------------------

 * RGB (NOP) |	GBR	GRB	BGR	RGB	BRG	RBG

 * GRB (1-2) |	BGR	RGB	GBR	GRB	RBG	BRG

 * RBG (2-3) |	GRB	GBR	BRG	RBG	BGR	RGB

 * BGR (1-3) |	RBG	BRG	RGB	BGR	GRB	GBR

 * BRG (ROR) |	BRG	RBG	GRB	GBR	RGB	BGR

 * GBR (ROL) |	RGB	BGR	RBG	BRG	GBR	GRB

 NOP */ = _SEL(GBR, GRB, BGR, RGB, BRG, RBG),

 1-2 */ = _SEL(BGR, RGB, GBR, GRB, RBG, BRG),

 2-3 */ = _SEL(GRB, GBR, BRG, RBG, BGR, RGB),

 1-3 */ = _SEL(RBG, BRG, RGB, BGR, GRB, GBR),

 ROR */ = _SEL(BRG, RBG, GRB, GBR, RGB, BGR),

 ROL */ = _SEL(RGB, BGR, RBG, BRG, GBR, GRB),

 Only CROP, CROP_DEFAULT and CROP_BOUNDS are supported */

		/*

		 * We set this status bit since this hardware performs

		 * retransmissions.

 cec controller */

 re-enable rx */

		/*

		 * Note: the bit order is swapped between 0x4d and 0x4e

		 * on adv7604

 power up cec */

 cec soft reset */

 initially disable tx */

 enabled irqs: */

 tx: ready */

 tx: arbitration lost */

 tx: retry timeout */

 rx: ready */

 disable cec interrupts */

 disable address mask 1-3 */

 power down cec section */

 enable address mask 0 */

 set address for mask 0 */

 enable address mask 1 */

 set address for mask 1 */

 enable address mask 2 */

 set address for mask 1 */

	/*

	 * The number of retries is the number of attempts - 1, but retry

	 * at least once. It's not clear if a value of 0 is allowed, so

	 * let's do at least one retry.

 write data */

 set length (data + header) */

 start transmit, enable tx */

 format change */

 HDMI/DVI mode */

 cec */

 tx 5v detect */

 Disable hotplug and I2C access to EDID RAM from DDC port */

 Fall back to a 16:9 aspect ratio */

		/*

		 * There is no SPA, so just set spa_loc to 128 and pa to whatever

		 * data is there.

 Disable hotplug and I2C access to EDID RAM from DDC port */

	/* adv76xx calculates the checksums and enables I2C access to internal

 enable hotplug after 100 ms */

********** avi info frame CEA-861-E **************/

 ----------------------------------------------------------------------- */

 -------------------------- custom ctrls ---------------------------------- */

 ----------------------------------------------------------------------- */

 power */

 Power up part and power down VDP */

 Power down ESDP block */

 Power down macrovision */

 HPD */

 Set manual HPD values to 0 */

		/*

		 * Set HPA_DELAY to 200 ms and set automatic HPD control

		 * to: internal EDID is active AND a cable is detected

		 * AND the manual HPD control is set to 1.

 video format */

 Enable CP CSC */

 VS, HS polarities */

 Adjust drive strength */

 HDMI free run */

 Low threshold to enter/exit free run mode */

	cp_write(sd, 0xf9, 0x23); /*  STDI ch. 1 - LCVS change threshold -

	cp_write(sd, 0x45, 0x23); /*  STDI ch. 2 - LCVS change threshold -

	cp_write(sd, 0xc9, 0x2d); /* use prim_mode and vid_std as free run resolution

 HDMI audio */

 Mute on FIFO over-/underflow [REF_01, c. 1.2.18] */

 Wait 1 s before unmute */

 FIFO reset on over-/underflow [REF_01, c. 1.2.19] */

 TODO from platform data */

 Setting MCLK to 256Fs */

 Select analog input muxing mode */

 interrupts */

 Configure INT1 */

 Enable SSPD, STDI and CP unlocked interrupts */

 Enable V_LOCKED and DE_REGEN_LCK interrupts */

 Enable cable detection (+5v) interrupts */

 STDI irq for any change, disable INT2 */

 STDI irq for any change, disable INT2 */

 disable INT2 */

 reset ADI recommended settings for HDMI: */

 "ADV7604 Register Settings Recommendations (rev. 2.5, June 2010)" p. 4. */

 HDMI filter optimization */

 HDMI filter optimization */

 DDC bus active pull-up control */

 TMDS PLL optimization */

 TMDS PLL optimization */

 TMDS PLL optimization */

 TMDS PLL optimization */

 equaliser */

 equaliser */

 equaliser */

 equaliser */

 enable automatic EQ changing */

 set ADI recommended settings for digitizer */

 "ADV7604 Register Settings Recommendations (rev. 2.5, June 2010)" p. 17. */

 ADC noise shaping filter controls */

 CP core gain controls */

 CP core pre-gain control */

 CP coast control. Graphics mode */

 CP core pre-gain control. Graphics mode */

 set ADI recommended settings for HDMI: */

 "ADV7604 Register Settings Recommendations (rev. 2.5, June 2010)" p. 4. */

 HDMI filter optimization */

 DDC bus active pull-up control */

 TMDS PLL optimization */

 TMDS PLL optimization */

 TMDS PLL optimization */

 TMDS PLL optimization */

 equaliser */

 equaliser */

 equaliser */

 equaliser */

 enable automatic EQ changing */

 reset ADI recommended settings for digitizer */

 "ADV7604 Register Settings Recommendations (rev. 2.5, June 2010)" p. 17. */

 ADC noise shaping filter controls */

 CP core gain controls */

 ADV7611 Register Settings Recommendations Rev 1.5, May 2014 */

 B not supported */

 normally 2 */

 Parse the endpoint. */

 Disable the interrupt for now as no DT-based board uses it. */

 Hardcode the remaining platform data fields. */

 ADV76XX can be reset by a low reset pulse of minimum 5 ms. */

 It is recommended to wait 5 ms after the low pulse before */

 an I2C write is performed to the ADV76XX. */

 Check if the adapter supports the needed features */

 initialize variables */

 Request GPIOs. */

 Configure IO Regmap region */

	/*

	 * Verify that the chip is present. On ADV7604 the RD_INFO register only

	 * identifies the revision, while on ADV7611 it identifies the model as

	 * well. Use the HDMI slave address on ADV7604 and RD_INFO on ADV7611.

 control handlers */

 custom controls */

 Configure regmaps */

 ----------------------------------------------------------------------- */

 disable interrupts */

 ----------------------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2006 Micronas USA Inc.

 Terminator (reg 0xff does not exist) */

 Terminator (reg 0xff does not exist) */

/*

 * These volatile controls are needed because all four channels share

 * these controls. So a change made to them through one channel would

 * require another channel to be updated.

 *

 * Normally this would have been done in a different way, but since the one

 * board that uses this driver sees this single chip as if it was on four

 * different i2c adapters (each adapter belonging to a separate instance of

 * the same USB driver) there is no reliable method that I have found to let

 * the instances know about each other.

 *

 * So implementing these global registers as volatile is the best we can do.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/media/i2c/adp1653.c

 *

 * Copyright (C) 2008--2011 Nokia Corporation

 *

 * Contact: Sakari Ailus <sakari.ailus@iki.fi>

 *

 * Contributors:

 *	Sakari Ailus <sakari.ailus@iki.fi>

 *	Tuukka Toivonen <tuukkat76@gmail.com>

 *	Pavel Machek <pavel@ucw.cz>

 *

 * TODO:

 * - fault interrupt handling

 * - hardware strobe

 * - power doesn't need to be ON if all lights are off

 Write values into ADP1653 registers. */

 Flash mode, light on with strobe, duration from timer */

 Torch mode, light immediately on, duration indefinite */

 Clear faults. */

 Software strobe using i2c */

/* --------------------------------------------------------------------------

 * V4L2 controls

/* --------------------------------------------------------------------------

 * V4L2 subdev operations

 Clear FAULT register by writing zero to OUT_SEL */

 Reset faults before reading new ones. */

 Some delay is apparently required. */

	/* If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

 Update the power count. */

/* --------------------------------------------------------------------------

 * I2C driver

 CONFIG_PM */

/*

 * adv7343 - ADV7343 Video Encoder Driver

 *

 * The encoder hardware does not support SECAM.

 *

 * Copyright (C) 2009 Texas Instruments Incorporated - http://www.ti.com/

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed .as is. WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 *			    2^32

 * FSC(reg) =  FSC (HZ) * --------

 *			  27000000

 FSC(Hz) = 3,579,545.45 Hz */

 FSC(Hz) = 3,575,611.00 Hz */

 FSC(Hz) = 3,582,056.00 */

 FSC(Hz) = 4,433,618.75 Hz */

 FSC(Hz) = 4,433,618.75 Hz */

 FSC(Hz) = 4,433,618.75 Hz */

 FSC(Hz) = 4,433,618.75 Hz */

 Set the standard */

 Configure the input mode register */

 Program the sub carrier frequency registers */

 Filter settings */

 Enable Appropriate DAC */

 configure default configuration */

 Enable YUV output */

 configure SD DAC Output 2 and SD DAC Output 1 bit to zero */

	/* configure ED/HD Color DAC Swap and ED/HD RGB Input Enable bit to

 Configure for default video standard */

 Copy board specific information here */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2011-2013 Freescale Semiconductor, Inc. All Rights Reserved.

 * Copyright (C) 2014-2017 Mentor Graphics Inc.

 min/typical/max system clock (xclk) frequencies */

/*

 * FIXME: remove this when a subdev API becomes available

 * to set the MIPI CSI-2 virtual channel.

 regulator supplies */

 Digital I/O (1.8V) supply */

 Analog (2.8V) supply */

 Digital Core (1.5V) supply */

/*

 * Image size under 1280 * 960 are SUBSAMPLING

 * Image size upper 1280 * 960 are SCALING

 the parsed DT endpoint info */

 system clock to OV5640 */

 lock to protect all members below */

/*

 * FIXME: all of these register tables are likely filled with

 * entries that set the register to their power-on default values,

 * and which are otherwise not touched by this driver. Those entries

 * should be identified and removed to speed register load time

 * over i2c.

 YUV422 UYVY VGA@30fps */

 power-on sensor init reg table */

/*

 * After trying the various combinations, reading various

 * documentations spread around the net, and from the various

 * feedback, the clock tree is probably as follows:

 *

 *   +--------------+

 *   |  Ext. Clock  |

 *   +-+------------+

 *     |  +----------+

 *     +->|   PLL1   | - reg 0x3036, for the multiplier

 *        +-+--------+ - reg 0x3037, bits 0-3 for the pre-divider

 *          |  +--------------+

 *          +->| System Clock |  - reg 0x3035, bits 4-7

 *             +-+------------+

 *               |  +--------------+

 *               +->| MIPI Divider | - reg 0x3035, bits 0-3

 *               |  +-+------------+

 *               |    +----------------> MIPI SCLK

 *               |    +  +-----+

 *               |    +->| / 2 |-------> MIPI BIT CLK

 *               |       +-----+

 *               |  +--------------+

 *               +->| PLL Root Div | - reg 0x3037, bit 4

 *                  +-+------------+

 *                    |  +---------+

 *                    +->| Bit Div | - reg 0x3034, bits 0-3

 *                       +-+-------+

 *                         |  +-------------+

 *                         +->| SCLK Div    | - reg 0x3108, bits 0-1

 *                         |  +-+-----------+

 *                         |    +---------------> SCLK

 *                         |  +-------------+

 *                         +->| SCLK 2X Div | - reg 0x3108, bits 2-3

 *                         |  +-+-----------+

 *                         |    +---------------> SCLK 2X

 *                         |  +-------------+

 *                         +->| PCLK Div    | - reg 0x3108, bits 4-5

 *                            ++------------+

 *                             +  +-----------+

 *                             +->|   P_DIV   | - reg 0x3035, bits 0-3

 *                                +-----+-----+

 *                                       +------------> PCLK

 *

 * This is deviating from the datasheet at least for the register

 * 0x3108, since it's said here that the PCLK would be clocked from

 * the PLL.

 *

 * There seems to be also (unverified) constraints:

 *  - the PLL pre-divider output rate should be in the 4-27MHz range

 *  - the PLL multiplier output rate should be in the 500-1000MHz range

 *  - PCLK >= SCLK * 2 in YUV, >= SCLK in Raw or JPEG

 *

 * In the two latter cases, these constraints are met since our

 * factors are hardcoded. If we were to change that, we would need to

 * take this into account. The only varying parts are the PLL

 * multiplier and the system clock divider, which are shared between

 * all these clocks so won't cause any issue.

/*

 * This is supposed to be ranging from 1 to 8, but the value is always

 * set to 3 in the vendor kernels.

/*

 * This is supposed to be ranging from 1 to 16, but the value is

 * always set to either 1 or 2 in the vendor kernels.

/*

 * Hardcode these values for scaler and non-scaler modes.

 * FIXME: to be re-calcualted for 1 data lanes setups

/*

 * This is supposed to be ranging from 1 to 2, but the value is always

 * set to 2 in the vendor kernels.

/*

 * We only supports 8-bit formats at the moment

/*

 * This is supposed to be ranging from 1 to 8, but the value is always

 * set to 2 in the vendor kernels.

/*

 * This is hardcoded so that the consistency is maintained between SCLK and

 * SCLK 2x.

/*

 * This is supposed to be ranging from 1 to 8, but the value is always

 * set to 1 in the vendor kernels.

 PLL1 output cannot exceed 1GHz. */

			/*

			 * The PLL multiplier cannot be odd if above

			 * 127.

			/*

			 * We have reached the maximum allowed PLL1 output,

			 * increase sysdiv.

			/*

			 * Prefer rates above the expected clock rate than

			 * below, even if that means being less precise.

/*

 * ov5640_set_mipi_pclk() - Calculate the clock tree configuration values

 *			    for the MIPI CSI-2 output.

 *

 * @rate: The requested bandwidth per lane in bytes per second.

 *	  'Bandwidth Per Lane' is calculated as:

 *	  bpl = HTOT * VTOT * FPS * bpp / num_lanes;

 *

 * This function use the requested bandwidth to calculate:

 * - sample_rate = bpl / (bpp / num_lanes);

 *	         = bpl / (PLL_RDIV * BIT_DIV * PCLK_DIV * MIPI_DIV / num_lanes);

 *

 * - mipi_sclk   = bpl / MIPI_DIV / 2; ( / 2 is for CSI-2 DDR)

 *

 * with these fixed parameters:

 *	PLL_RDIV	= 2;

 *	BIT_DIVIDER	= 2; (MIPI_BIT_MODE == 8 ? 2 : 2,5);

 *	PCLK_DIV	= 1;

 *

 * The MIPI clock generation differs for modes that use the scaler and modes

 * that do not. In case the scaler is in use, the MIPI_SCLK generates the MIPI

 * BIT CLk, and thus:

 *

 * - mipi_sclk = bpl / MIPI_DIV / 2;

 *   MIPI_DIV = 1;

 *

 * For modes that do not go through the scaler, the MIPI BIT CLOCK is generated

 * from the pixel clock, and thus:

 *

 * - sample_rate = bpl / (bpp / num_lanes);

 *	         = bpl / (2 * 2 * 1 * MIPI_DIV / num_lanes);

 *		 = bpl / (4 * MIPI_DIV / num_lanes);

 * - MIPI_DIV	 = bpp / (4 * num_lanes);

 *

 * FIXME: this have been tested with 16bpp and 2 lanes setup only.

 * MIPI_DIV is fixed to value 2, but it -might- be changed according to the

 * above formula for setups with 1 lane or image formats with different bpp.

 *

 * FIXME: this deviates from the sensor manual documentation which is quite

 * thin on the MIPI clock tree generation part.

	/*

	 * 1280x720 is reported to use 'SUBSAMPLING' only,

	 * but according to the sensor manual it goes through the

	 * scaler before subsampling.

	/*

	 * We need to set sysdiv according to the clock, and to clear

	 * the MIPI divider.

 set JPEG framing sizes */

	/*

	 * compression mode 3 timing

	 *

	 * Data is transmitted with programmable width (VFIFO_HSIZE).

	 * No padding done. Last line may have less data. Varying

	 * number of lines per frame, depending on amount of data.

 download ov5640 settings to sensor through i2c */

 remain in power down mode for DVP */

 read exposure, in number of line periods */

 write exposure, given number of line periods */

	/*

	 * Enable/disable the MIPI interface

	 *

	 * 0x300e = on ? 0x45 : 0x40

	 *

	 * FIXME: the sensor manual (version 2.03) reports

	 * [7:5] = 000  : 1 data lane mode

	 * [7:5] = 001  : 2 data lanes mode

	 * But this settings do not work, while the following ones

	 * have been validated for 2 data lanes mode.

	 *

	 * [7:5] = 010	: 2 data lanes mode

	 * [4] = 0	: Power up MIPI HS Tx

	 * [3] = 0	: Power up MIPI LS Rx

	 * [2] = 1/0	: MIPI interface enable/disable

	 * [1:0] = 01/00: FIXME: 'debug'

 calculate sysclk */

 read HTS from register settings */

 read HTS from register settings */

 get banding filter value */

 manual */

 50Hz */

 60Hz */

 auto */

 50Hz */

 60Hz */

 read preview PCLK */

 read preview HTS */

 read preview VTS */

 calculate banding filter */

 60Hz */

 50Hz */

 stable in high */

 0.92 */

 1.08 */

	/*

	 * TIMING TC REG21:

	 * - [0]:	Horizontal binning enable

	/*

	 * TIMING TC REG20:

	 * - [0]:	Undocumented, but hardcoded init sequences

	 *		are always setting REG21/REG20 bit 0 to same value...

 Check to see if the current mode exceeds the max frame rate */

/*

 * sensor changes between scaling and subsampling, go through

 * exposure calculation

 read preview shutter */

 read preview gain */

 get average */

 turn off night mode for capture */

 Write capture setting */

 read capture VTS */

 calculate capture banding filter */

 60Hz */

 50Hz */

 calculate capture shutter/gain16 */

 in stable range */

 gain to shutter */

 shutter < 1/100 */

 exposure reach max */

 1/100 < (cap_shutter = n/100) =< max */

 set capture gain */

 write capture shutter */

 set exposure */

/*

 * if sensor changes inside scaling or subsampling

 * change mode directly

 Write capture setting */

 auto gain and exposure must be turned off when changing modes */

	/*

	 * All the formats we support have 16 bits per pixel, seems to require

	 * the same rate than YUV, so we can just use 16 bpp all the time.

		/*

		 * change between subsampling and scaling

		 * go through exposure calculation

		/*

		 * change inside subsampling or scaling

		 * download firmware directly

 restore auto gain and exposure */

 restore the last set video mode after chip power-on */

 first load the initial register values */

 now restore the last capture mode */

 camera power cycle */

 Reset MIPI bus settings to their default values. */

	/*

	 * Power up MIPI HS Tx and LS Rx; 2 data lanes mode

	 *

	 * 0x300e = 0x40

	 * [7:5] = 010	: 2 data lanes mode (see FIXME note in

	 *		  "ov5640_set_stream_mipi()")

	 * [4] = 0	: Power up MIPI HS Tx

	 * [3] = 0	: Power up MIPI LS Rx

	 * [2] = 0	: MIPI interface disabled

	/*

	 * Gate clock and set LP11 in 'no packets mode' (idle)

	 *

	 * 0x4800 = 0x24

	 * [5] = 1	: Gate clock when 'no packets'

	 * [2] = 1	: MIPI bus in LP11 when 'no packets'

	/*

	 * Set data lanes and clock in LP11 when 'sleeping'

	 *

	 * 0x3019 = 0x70

	 * [6] = 1	: MIPI data lane 2 in LP11 when 'sleeping'

	 * [5] = 1	: MIPI data lane 1 in LP11 when 'sleeping'

	 * [4] = 1	: MIPI clock lane in LP11 when 'sleeping'

 Give lanes some time to coax into LP11 state. */

 Reset settings to their default values. */

	/*

	 * Note about parallel port configuration.

	 *

	 * When configured in parallel mode, the OV5640 will

	 * output 10 bits data on DVP data lines [9:0].

	 * If only 8 bits data are wanted, the 8 bits data lines

	 * of the camera interface must be physically connected

	 * on the DVP data lines [9:2].

	 *

	 * Control lines polarity can be configured through

	 * devicetree endpoint control lines properties.

	 * If no endpoint control lines properties are set,

	 * polarity will be as below:

	 * - VSYNC:	active high

	 * - HREF:	active low

	 * - PCLK:	active low

	 *

	 * VSYNC & HREF are not configured if BT656 bus mode is selected

	/*

	 * BT656 embedded synchronization configuration

	 *

	 * CCIR656 CTRL00

	 * - [7]:	SYNC code selection (0: auto generate sync code,

	 *		1: sync code from regs 0x4732-0x4735)

	 * - [6]:	f value in CCIR656 SYNC code when fixed f value

	 * - [5]:	Fixed f value

	 * - [4:3]:	Blank toggle data options (00: data=1'h040/1'h200,

	 *		01: data from regs 0x4736-0x4738, 10: always keep 0)

	 * - [1]:	Clip data disable

	 * - [0]:	CCIR656 mode enable

	 *

	 * Default CCIR656 SAV/EAV mode with default codes

	 * SAV=0xff000080 & EAV=0xff00009d is enabled here with settings:

	 * - CCIR656 mode enable

	 * - auto generation of sync codes

	 * - blank toggle data 1'h040/1'h200

	 * - clip reserved data (0x00 & 0xff changed to 0x01 & 0xfe)

	/*

	 * configure parallel port control lines polarity

	 *

	 * POLARITY CTRL0

	 * - [5]:	PCLK polarity (0: active low, 1: active high)

	 * - [1]:	HREF polarity (0: active low, 1: active high)

	 * - [0]:	VSYNC polarity (mismatch here between

	 *		datasheet and hardware, 0 is active high

	 *		and 1 is active low...)

	/*

	 * powerdown MIPI TX/RX PHY & enable DVP

	 *

	 * MIPI CONTROL 00

	 * [4] = 1	: Power down MIPI HS Tx

	 * [3] = 1	: Power down MIPI LS Rx

	 * [2] = 0	: DVP enable (MIPI disable)

	/*

	 * enable VSYNC/HREF/PCLK DVP control lines

	 * & D[9:6] DVP data lines

	 *

	 * PAD OUTPUT ENABLE 01

	 * - 6:		VSYNC output enable

	 * - 5:		HREF output enable

	 * - 4:		PCLK output enable

	 * - [3:0]:	D[9:6] output enable

	/*

	 * enable D[5:0] DVP data lines

	 *

	 * PAD OUTPUT ENABLE 02

	 * - [7:2]:	D[5:0] output enable

 --------------- Subdev Operations --------------- */

	/*

	 * If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

 Update the power count. */

 restore controls */

 YUV422, UYVY */

 YUV422, YUYV */

 RGB565 {g[2:0],b[4:0]},{r[4:0],g[5:3]} */

 RGB565 {r[4:0],g[5:3]},{g[2:0],b[4:0]} */

 YUV422, YUYV */

 Raw, BGBG... / GRGR... */

 Raw bayer, GBGB... / RGRG... */

 Raw bayer, GRGR... / BGBG... */

 Raw bayer, RGRG... / GBGB... */

 FORMAT CONTROL00: YUV and RGB formatting */

 FORMAT MUX CONTROL: ISP YUV or RGB */

	/*

	 * TIMING TC REG21:

	 * - [5]:	JPEG enable

	/*

	 * SYSTEM RESET02:

	 * - [4]:	Reset JFIFO

	 * - [3]:	Reset SFIFO

	 * - [2]:	Reset JPEG

	/*

	 * CLOCK ENABLE02:

	 * - [5]:	Enable JPEG 2x clock

	 * - [3]:	Enable JPEG clock

/*

 * Sensor Controls.

 rolling horizontal bar */

 black & white squares */

	/*

	 * If sensor is mounted upside down, mirror logic is inversed.

	 *

	 * Sensor is a BSI (Back Side Illuminated) one,

	 * so image captured is physically mirrored.

	 * This is why mirror logic is inversed in

	 * order to cancel this mirror effect.

	/*

	 * TIMING TC REG21:

	 * - [2]:	ISP mirror

	 * - [1]:	Sensor mirror

 If sensor is mounted upside down, flip logic is inversed */

	/*

	 * TIMING TC REG20:

	 * - [2]:	ISP vflip

	 * - [1]:	Sensor vflip

 v4l2_ctrl_lock() locks our own mutex */

 v4l2_ctrl_lock() locks our own mutex */

	/*

	 * If the device is not powered up by the host driver do

	 * not apply any controls to H/W at this time. Instead

	 * the controls will be restored right after power-up.

 we can use our own mutex for the ctrl lock */

 Clock related controls */

 Auto/manual white balance */

 Auto/manual exposure */

 Auto/manual gain */

 Always return a valid frame interval value */

	/*

	 * default init sequence initialize sensor to

	 * YUV422 UYVY VGA@30fps

 optional indication of physical rotation of sensor */

 get system clock (xclk) */

 request optional power down pin */

 request optional reset pin */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * A V4L2 driver for Sony IMX219 cameras.

 * Copyright (C) 2019, Raspberry Pi (Trading) Ltd

 *

 * Based on Sony imx258 camera driver

 * Copyright (C) 2018 Intel Corporation

 *

 * DT / fwnode changes, and regulator / GPIO control taken from imx214 driver

 * Copyright 2018 Qtechnology A/S

 *

 * Flip handling taken from the Sony IMX319 driver.

 * Copyright (C) 2018 Intel Corporation

 *

 Chip ID */

 External clock frequency is 24.0M */

 Pixel rate is fixed at 182.4M for all the modes */

 V_TIMING internal */

Frame Length Line*/

 HBLANK control - read only */

 Exposure control */

 Analog gain control */

 Digital gain control */

 Test Pattern Control */

 Test pattern colour components */

 IMX219 native and active pixel array size. */

 Mode : resolution and related config&values */

 Frame width */

 Frame height */

 Analog crop rectangle. */

 V-timing */

 Default register values */

/*

 * Register sets lifted off the i2C interface from the Raspberry Pi firmware

 * driver.

 * 3280x2464 = mode 2, 1920x1080 = mode 1, 1640x1232 = mode 4, 640x480 = mode 7.

 regulator supplies */

 Supplies can be enabled in any order */

 Analog (2.8V) supply */

 Digital Core (1.8V) supply */

 IF (1.2V) supply */

/*

 * The supported formats.

 * This table MUST contain 4 entries per format, to cover the various flip

 * combinations in the order

 * - no flip

 * - h flip

 * - v flip

 * - h&v flips

/*

 * Initialisation delay between XCLR low->high and the moment when the sensor

 * can start capture (i.e. can leave software stanby) must be not less than:

 *   t4 + max(t5, t6 + <time to initialize the sensor register over I2C>)

 * where

 *   t4 is fixed, and is max 200uS,

 *   t5 is fixed, and is 6000uS,

 *   t6 depends on the sensor external clock, and is max 32000 clock periods.

 * As per sensor datasheet, the external clock must be from 6MHz to 27MHz.

 * So for any acceptable external clock t6 is always within the range of

 * 1185 to 5333 uS, and is always less than t5.

 * For this reason this is always safe to wait (t4 + t5) = 6200 uS, then

 * initialize the sensor over I2C, and then exit the software standby.

 *

 * This start-up time can be optimized a bit more, if we start the writes

 * over I2C after (t4+t6), but before (t4+t5) expires. But then sensor

 * initialization over I2C may complete before (t4+t5) expires, and we must

 * ensure that capture is not started before (t4+t5).

 *

 * This delay doesn't account for the power supply startup time. If needed,

 * this should be taken care of via the regulator framework. E.g. in the

 * case of DT for regulator-fixed one should define the startup-delay-us

 * property.

 Mode configs */

 8MPix 15fps mode */

 1080P 30fps cropped */

 2x2 binned 30fps mode */

 640x480 30fps mode */

 system clock to IMX219 */

 V4L2 Controls */

 Current mode */

	/*

	 * Mutex for serialized access:

	 * Protect sensor module set pad format and start/stop streaming safely.

 Streaming on/off */

 Read registers up to 2 at a time */

 Write register address */

 Read data from register */

 Write registers up to 2 at a time */

 Write a list of registers */

 Get bayer order based on flip setting. */

 Initialize try_fmt */

 Initialize try_crop rectangle. */

 Update max exposure while meeting expected vblanking */

	/*

	 * Applying V4L2 control value only happens

	 * when power is up for streaming

 update the code which could change due to vflip or hflip: */

 Bayer order varies with flips */

 Update limits and set FPS to default */

 Update max exposure while meeting expected vblanking */

		/*

		 * Currently PPL is fixed to IMX219_PPL_DEFAULT, so hblank

		 * depends on mode->width only, and is not changeble in any

		 * way other than changing the mode.

 Apply default values of current mode */

 Apply customized values from user */

 set stream on register */

 vflip and hflip cannot change during streaming */

 set stream off register */

		/*

		 * Apply default & customized values

		 * and then start streaming.

 Power/clock management functions */

 Verify chip ID */

 Initialize control handlers */

 By default, PIXEL_RATE is read only */

 Initial vblank/hblank/exposure parameters based on current mode */

		/*

		 * The assumption is that

		 * V4L2_CID_TEST_PATTERN_GREENR == V4L2_CID_TEST_PATTERN_RED + 1

		 * V4L2_CID_TEST_PATTERN_BLUE   == V4L2_CID_TEST_PATTERN_RED + 2

		 * V4L2_CID_TEST_PATTERN_GREENB == V4L2_CID_TEST_PATTERN_RED + 3

 The "Solid color" pattern is white by default */

 Check the number of MIPI CSI2 data lanes */

 Check the link frequency set in device tree */

 Check the hardware configuration in device tree */

 Get system clock (xclk) */

 Request optional enable pin */

	/*

	 * The sensor must be powered for imx219_identify_module()

	 * to be able to read the CHIP_ID register

 Set default mode to max resolution */

	/* sensor doesn't enter LP-11 state upon power up until and unless

	 * streaming is started, so upon power up switch the modes to:

	 * streaming -> standby

 put sensor back to standby mode */

 Initialize subdev */

 Initialize source pad */

 Initialize default format */

 Enable runtime PM and turn off the device */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Samsung S5K6AAFX SXGA 1/6" 1.3M CMOS Image Sensor

 * with embedded SoC ISP.

 *

 * Copyright (C) 2011, Samsung Electronics Co., Ltd.

 * Sylwester Nawrocki <s.nawrocki@samsung.com>

 *

 * Based on a driver authored by Dongsoo Nathaniel Kim.

 * Copyright (C) 2009, Dongsoo Nathaniel Kim <dongsoo45.kim@samsung.com>

 The token to indicate array termination */

/*

 * H/W register Interface (0xD0000000 - 0xD0000FFF)

/*

 * Host S/W Register interface (0x70000000 - 0x70002000)

 * The value of the two most significant address bytes is 0x7000,

 * (HOST_SWIF_OFFS_H). The register addresses below specify 2 LSBs.

 Initialization parameters */

 Master clock frequency in KHz */

 Clock configurations, n = 0..2. REG_I_* frequency unit is 4 kHz. */

 General purpose parameters */

 Preview control section. n = 0...4. */

 Binning enabled */

 Binning disabled */

 Frame period in 0.1 ms units */

 Conversion to REG_P_[MAX/MIN]_FR_TIME value; __t: time in us */

 us */

 us */

 x100 us */

 The below 5 registers are for "device correction" values */

 Extended image property controls */

 Exposure time in 10 us units */

 Output interface (parallel/MIPI) setup */

 Auto-algorithms enable mask */

 Firmware revision information */

 For now we use only one user configuration register set */

 Digital core supply 1.5V (1.4V to 1.6V) */

 Analog power supply 2.8V (2.6V to 3.0V) */

	"vdd_reg",	/* Regulator input power 1.8V (1.7V to 1.9V)

	"vddio",	/* I/O supply 1.8V (1.65V to 1.95V)

 REG_P_FMT(x) register value */

 output pixel format and resolution */

 Auto / manual white balance cluster */

 Mirror cluster */

 Auto exposure / manual exposure and gain cluster */

 Maximum rectangle for the interval */

 external master clock frequency */

 ISP internal master clock frequency */

 output pixel clock frequency range */

 protects the struct members below */

 sensor matrix scan window */

 Analog settings */

 TODO: Add RGB888 and Bayer format */

 range 16-240 */

 10 fps */

 15 fps */

 20 fps */

 25 fps */

 30 fps */

 15 fps */

 Set initial values for all preview presets */

 The command register write, assumes Command_Wr_addH = 0x7000. */

 The command register read, assumes Command_Rd_addH = 0x7000. */

 Assume that msg->addr is always less than 0xfffc */

 Configure the AHB high address bytes for GTG registers access */

/**

 * s5k6aa_configure_pixel_clocks - apply ISP main clock/PLL configuration

 * @s5k6aa: pointer to &struct s5k6aa describing the device

 *

 * Configure the internal ISP PLL for the required output frequency.

 * Locking: called with s5k6aa.lock mutex held.

 External input clock frequency in kHz */

 Internal PLL frequency */

 Set horizontal and vertical image flipping */

 Configure auto/manual white balance and R/G/B gains */

 Program FW with exposure time, 'exposure' in us units */

 Set auto/manual exposure and total gain */

		/* The V4L2_CID_LINE_FREQUENCY control values match

/**

 * s5k6aa_configure_video_bus - configure the video output interface

 * @s5k6aa: pointer to &struct s5k6aa describing the device

 * @bus_type: video bus type: parallel or MIPI-CSI

 * @nlanes: number of MIPI lanes to be used (MIPI-CSI only)

 *

 * Note: Only parallel bus operation has been tested.

	/*

	 * TODO: The sensor is supposed to support BT.601 and BT.656

	 * but there is nothing indicating how to switch between both

	 * in the datasheet. For now default BT.601 interface is assumed.

 This function should be called when switching to new user configuration set*/

/**

 * s5k6aa_set_prev_config - write user preview register set

 * @s5k6aa: pointer to &struct s5k6aa describing the device

 * @preset: s5kaa preset to be applied

 *

 * Configure output resolution and color format, pixel clock

 * frequency range, device frame rate type and frame period range.

/**

 * s5k6aa_initialize_isp - basic ISP MCU initialization

 * @sd: pointer to V4L2 sub-device descriptor

 *

 * Configure AHB addresses for registers read/write; configure PLLs for

 * required output pixel clock. The ISP power supply needs to be already

 * enabled, with an optional H/W reset.

 * Locking: called with s5k6aa.lock mutex held.

/*

 * V4L2 subdev core and video operations

/*

 * V4L2 subdev pad level and video operations

		/*

		 * Make sure the crop window is valid, i.e. its size is

		 * greater than the output window, as the ISP supports

		 * only down-scaling.

 Reset to minimum possible frame interval */

/*

 * V4L2 subdev controls

	/*

	 * If the device is not powered up by the host driver do

	 * not apply any controls to H/W at this time. Instead

	 * the controls will be restored right after power-up.

 Auto white balance cluster */

 Exposure time: x 1 us */

 Total gain: 256 <=> 1x */

/*

 * V4L2 subdev internal operations

/*

 * GPIO setup

 Static name; NEVER use in new drivers! */

/*

 * ths8200 - Texas Instruments THS8200 video encoder driver

 *

 * Copyright 2013 Cisco Systems, Inc. and/or its affiliates.

 *

 * This program is free software; you may redistribute it and/or modify

 * it under the terms of the GNU General Public License as published by

 * the Free Software Foundation; version 2 of the License.

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed .as is. WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 Is the ths8200 powered on? */

 keep this initialization for compatibility with GCC < 4.4.6 */

/* To set specific bits in the register, a clear-mask is given (to be AND-ed),

 * and then the value-mask (to be OR-ed).

 Power up/down ths8200 */

 Power up/down - leave in reset state until input video is present */

/* -----------------------------------------------------------------------------

 * V4L2 subdev video operations

 setup clocks */

*** Data path control (DATA) ****/

	/* Set FSADJ 700 mV,

	 * bypass 422-444 interpolation,

	 * input format 30 bit RGB444

	/* DTG Mode (Video blocked during blanking

	 * VESA slave

*** Display Timing Generator Control, Part 1 (DTG1). ****/

	/* Disable embedded syncs on the output by setting

	 * the amplitude to zero for all channels.

** System ****/

 Set chip in reset while it is configured */

 configure video output timings */

 Zero for progressive scan formats.*/

	/* Distance from leading edge of h sync to start of active video.

	 * MSB in 0x2b

 Zero for SDTV-mode. MSB in 0x2b */

	/*

	 * MSB for dtg1_spec(d/e/h). See comment for

	 * corresponding LSB registers.

 h front porch */

 Half the line length. Used to calculate SDTV line types. */

 Total pixels per line (ex. 720p: 1650) */

 Frame height and field height */

	/* Field height should be programmed higher than frame_size for

	 * progressive scan formats

	/* Should be programmed higher than frame_size

	 * for progressive formats

*** Display Timing Generator Control, Part 2 (DTG2). ****/

	/* Set breakpoint line numbers and types

	 * THS8200 generates line types with different properties. A line type

	 * that sets all the RGB-outputs to zero is used in the blanking areas,

	 * while a line type that enable the RGB-outputs is used in active video

	 * area. The line numbers for start of active video, start of front

	 * porch and after the last line in the frame must be set with the

	 * corresponding line types.

	 *

	 * Line types:

	 * 0x9 - Full normal sync pulse: Blocks data when dtg1_pass is off.

	 *       Used in blanking area.

	 * 0x0 - Active video: Video data is always passed. Used in active

	 *       video area.

 line types */

 h sync width transmitted */

 The pixel value h sync is asserted on */

 v sync width transmitted (must add 1 to get correct output) */

 The pixel value v sync is asserted on (must add 1 to get correct output) */

	/* For progressive video vlength2 must be set to all 0 and vdly2 must

	 * be set to all 1.

 Internal delay factors to synchronize the sync pulses and the data */

 Experimental values delays (hor 0, ver 0) */

 Polarity of received and transmitted sync signals */

 HS_IN */

 HS_OUT */

 VS_IN */

 VS_OUT */

 RGB mode, no embedded timings */

	/* Timing of video input bus is derived from HS, VS, and FID dedicated

	 * inputs

 leave reset */

 save timings */

 Specific video subsystem operation handlers */

 V4L2 top level operation handlers */

 Check if the adapter supports the needed features */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * bt856 - BT856A Digital Video Encoder (Rockwell Part)

 *

 * Copyright (C) 1999 Mike Bernson <mike@mlb.org>

 * Copyright (C) 1998 Dave Perks <dperks@ibm.net>

 *

 * Modifications for LML33/DC10plus unified driver

 * Copyright (C) 2000 Serguei Miridonov <mirsev@cicese.mx>

 *

 * This code was modify/ported from the saa7111 driver written

 * by Dave Perks.

 *

 * Changes by Ronald Bultje <rbultje@ronald.bitfreak.net>

 *   - moved over to linux>=2.4.x i2c protocol (9/9/2002)

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 This is just for testing!!! */

bt856_setbit(encoder, 0xdc, 6, 0);*/

bt856_setbit(encoder, 0xda, 0, 1);*/

	/* We only have video bus.

	 * input= 0: input is from bt819

 Color bar */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 Check if the adapter supports the needed features */

bt856_setbit(encoder, 0xdc, 6, 0);*/

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020 MediaTek Inc.

 Bit[1] vertical upside down */

 Bit[0] horizontal mirror */

 Orientation */

 Bit[2:0] MIPI transmission speed select */

 Exposure control */

 Vblanking control */

 Analog gain control */

 Test pattern control */

 Number of lanes supported by this driver */

 Bits per sample of sensor output */

 Digital I/O power */

 Analog power */

 Digital core power */

 Indication of MIPI transmission speed select */

	/*

	 * Serialize control access, get/set format, get selection

	 * and start streaming.

/*

 * eclk 24Mhz

 * pclk 39Mhz

 * linelength 934(0x3a6)

 * framelength 1390(0x56E)

 * grabwindow_width 1600

 * grabwindow_height 1200

 * max_framerate 30fps

 * mipi_datarate per lane 780Mbps

 Only one sensor mode supported */

 Validate the chip ID */

 Apply default values of current mode */

 Apply customized values from user */

 Set orientation to 180 degree */

 Set MIPI TX speed according to DT property */

 Set stream on register */

 Propagate change of current control to all related controls */

 Update max exposure while meeting expected vblanking */

 V4L2 controls values will be applied only when power is already up */

 Optional indication of MIPI clock voltage unit */

 Optional indication of physical rotation of sensor */

 Set default mode */

 Initialize subdev */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * A V4L2 driver for OmniVision OV7670 cameras.

 *

 * Copyright 2006 One Laptop Per Child Association, Inc.  Written

 * by Jonathan Corbet with substantial inspiration from Mark

 * McClelland's ovcamchip code.

 *

 * Copyright 2006-7 Jonathan Corbet <corbet@lwn.net>

/*

 * The 7670 sits on i2c with ID 0x42

 Registers */

 Gain lower 8 bits (rest in vref) */

 blue gain */

 red gain */

 Pieces of GAIN, VSTART, VSTOP */

 Control 1 */

 CCIR656 enable */

 U/B Average level */

 Y/Gb Average level */

 AEC MS 5 bits */

 V/R Average level */

 Control 2 */

 Soft sleep mode */

 Product ID MSB */

 Product ID LSB */

 Control 3 */

 Byte swap */

 Enable scaling */

 Enable downsamp/crop/window */

 Control 4 */

 All "reserved" */

 Control 6 */

 More bits of AEC value */

 Clocl control */

 Use external clock directly */

 Mask for internal clock scale */

 Control 7 */

 Register reset */

 CIF format */

 QVGA format */

 QCIF format */

 bits 0 and 2 - RGB format */

 YUV */

 Bayer format */

 "Processed bayer" */

 Control 8 */

 Enable fast AGC/AEC */

 Unlimited AEC step size */

 Band filter enable */

 Auto gain enable */

 White balance enable */

 Auto exposure enable */

 Control 9  - gain ceiling */

 Control 10 */

 HSYNC instead of HREF */

 Suppress PCLK on horiz blank */

 Reverse HREF */

 VSYNC on clock leading edge */

 VSYNC negative */

 HSYNC negative */

 Horiz start high bits */

 Horiz stop high bits */

 Vert start high bits */

 Vert stop high bits */

 Pixel delay after HREF */

 Manuf. ID high */

 Manuf. ID low */

 Mirror / vflip */

 Mirror image */

 Vertical flip */

 AGC upper limit */

 AGC lower limit */

 AGC/AEC fast mode op region */

 HSYNC rising edge delay */

 HSYNC falling edge delay */

 HREF pieces */

 lots of stuff */

 UYVY or VYUY - see com13 */

 Control 11 */

 NIght mode enable */

 Two bit NM frame rate */

 Auto detect 50/60 Hz */

 Manual 50Hz select */

 Control 12 */

 HREF always */

 Control 13 */

 Gamma enable */

 UV saturation auto adjustment */

 V before U - w/TSLB */

 Control 14 */

 DCW/PCLK-scale enable */

 Edge enhancement factor */

 Control 15 */

 Data range 10 to F0 */

            01 to FE */

            00 to FF */

 RGB565 output */

 RGB555 output */

 Control 16 */

 AWB gain enable */

 Control 17 */

 AEC window - must match COM4 */

 DSP Color bar */

/*

 * This matrix defines how the colors are generated, must be

 * tweaked to adjust hue and saturation.

 *

 * Order: v-red, v-green, v-blue, u-red, u-green, u-blue

 *

 * They are nine-bit signed quantities, with the sign bit

 * stored in 0x58.  Sign for v-red is bit 0, and up from there.

 Brightness */

 Contrast control */

 Fix gain control */

 PLL control an debugging */

 Bypass PLL */

 clock x4 */

 clock x6 */

 clock x8 */

 Test pattern and horizontal scale factor */

 Test pattern and vertical scale factor */

 OV's name */

 Black pixel correction enable */

 White pixel correction enable */

 RGB 444 control */

 Turn on RGB444, overrides 5x5 */

 Empty nibble at end */

 Hist AEC/AGC control 1 */

 Hist AEC/AGC control 2 */

 50hz banding step limit */

 Hist AEC/AGC control 3 */

 Hist AEC/AGC control 4 */

 Hist AEC/AGC control 5 */

 Hist AEC/AGC control 6 */

 Hist AEC/AGC control 7 */

 60hz banding step limit */

 Start/stop values for the camera.  Note */

 that they do not always make complete */

 sense to humans, but evidently the sensor */

 will do the right thing... */

 Regs to tweak */

 formats supported for each model */

 callbacks for frame rate control */

/*

 * Information we maintain about a known sensor.

 coming later */

 gain cluster */

 exposure cluster */

 saturation/hue cluster */

 Current format */

 Media bus configuration flags */

 Filter out smaller sizes */

 Filter out smaller sizes */

 External clock speed (MHz) */

 Clock divider value */

 Use smbus I/O instead of I2C */

 Device specifics */

/*

 * The default register settings, as obtained from OmniVision.  There

 * is really no making sense of most of these - lots of "reserved" values

 * and such.

 *

 * These settings give VGA YUYV.

/*

 * Clock scale: 3 = 15fps

 *              2 = 20fps

 *              1 = 30fps

 OV: clock scale (30 fps) */

 OV */

 VGA */

	/*

	 * Set the hardware window.  These values from OV don't entirely

	 * make sense - hstop is less than hstart.  But they work...

 Mystery scaling numbers */

 Gamma curve values */

	/* AGC and AEC parameters.  Note we start by disabling those features,

 magic reserved bit */

 4x gain + magic rsvd bit */

 magic */

 Almost all of these are magic "reserved" values.  */

 More reserved magic, some of which tweaks white balance */

 "9e for advance AWB" */

 Matrix coefficients */

 Extra-weird stuff.  Some sort of multiplexor register */

 END MARKER */

/*

 * Here we'll try to encapsulate the changes for just the output

 * video format.

 *

 * RGB656 and YUV422 come from OV; RGB444 is homebrewed.

 *

 * IMPORTANT RULE: the first entry must be for COM7, see ov7670_s_fmt for why.

 Selects YUV mode */

 No RGB444 please */

 CCIR601 */

 32x gain ceiling; 0x8 is reserved bit */

 "matrix coefficient 1" */

 "matrix coefficient 2" */

 vb */

 "matrix coefficient 4" */

 "matrix coefficient 5" */

 "matrix coefficient 6" */

 Selects RGB mode */

 No RGB444 please */

 CCIR601 */

 16x gain ceiling; 0x8 is reserved bit */

 "matrix coefficient 1" */

 "matrix coefficient 2" */

 vb */

 "matrix coefficient 4" */

 "matrix coefficient 5" */

 "matrix coefficient 6" */

 Selects RGB mode */

 Enable xxxxrrrr ggggbbbb */

 CCIR601 */

 Data range needed? */

 16x gain ceiling; 0x8 is reserved bit */

 "matrix coefficient 1" */

 "matrix coefficient 2" */

 vb */

 "matrix coefficient 4" */

 "matrix coefficient 5" */

 "matrix coefficient 6" */

 Magic rsvd bit */

 No gamma, magic rsvd bit */

 Edge enhancement, denoise */

 Pix correction, magic rsvd */

/*

 * Low-level register I/O.

 *

 * Note that there are two versions of these.  On the XO 1, the

 * i2c controller only does SMBUS, so that's what we use.  The

 * ov7670 is not really an SMBUS device, though, so the communication

 * is not always entirely reliable.

 Wait for reset to run */

/*

 * On most platforms, we'd rather do straight i2c I/O.

	/*

	 * Send out the register address...

	/*

	 * ...then read back the result.

 Wait for reset to run */

/*

 * Write a list of register settings; ff/ff stops the process.

/*

 * Stuff that knows about the sensor.

 OV manuf. id. */

	/*

	 * OK, we know we have an OmniVision chip...but which one?

 PID + VER = 0x76 / 0x73 */

 PID + VER = 0x76 / 0x73 */

/*

 * Store information about the video data format.  The color matrix

 * is deeply tied into the format, so keep the relevant values here.

 * The magic matrix numbers come from OmniVision.

/*

 * Then there is the issue of window sizes.  Try to capture the info here.

/*

 * QCIF mode is done (by OV) in a very strange way - it actually looks like

 * VGA with weird scaling options - they do *not* use the canned QCIF mode

 * which is allegedly provided by the sensor.  So here's the weird register

 * settings.

 VGA */

 These values from */

 Omnivision */

 CIF */

 Empirically determined */

 QVGA */

 Empirically determined */

 QCIF */

 see comment above */

 Empirically determined */

	/*

	 * Currently, only VGA is supported. Theoretically it could be possible

	 * to support CIF, QVGA and QCIF too. Taking values for ov7670 as a

	 * base and tweak them empirically could be required.

 These values from */

 Omnivision */

 Empirically determined */

	/*

	 * The formula is fps = 5/4*pixclk for YUV/RGB and

	 * fps = 5/2*pixclk for RAW.

	 *

	 * pixclk = clock_speed / (clkrc + 1) * PLLfactor

	 *

	/*

	 * The datasheet claims that clkrc = 0 will divide the input clock by 1

	 * but we've checked with an oscilloscope that it divides by 2 instead.

	 * So, if clkrc = 0 just bypass the divider.

 Recalculate frame rate */

	/*

	 * If the device is not powered up by the host driver do

	 * not apply any changes to H/W at this time. Instead

	 * the framerate will be restored right after power-up.

 Reset to full rate */

	/*

	 * If the device is not powered up by the host driver do

	 * not apply any changes to H/W at this time. Instead

	 * the framerate will be restored right after power-up.

/*

 * Store a set of start/stop values into the camera.

	/*

	 * Horizontal: 11 bits, top 8 live in hstart and hstop.  Bottom 3 of

	 * hstart are in href[2:0], bottom 3 of hstop in href[5:3].  There is

	 * a mystery "edge offset" value in the top two bits of href.

 Vertical: similar arrangement, but only 10 bits. */

 default to first format */

	/*

	 * Fields: the OV devices claim to be progressive.

	/*

	 * Don't consider values that don't match min_height and min_width

	 * constraints.

	/*

	 * Round requested image size down to the nearest

	 * we support, but not below the smallest.

 Take the smallest one */

	/*

	 * Note the size we'll actually handle.

	/*

	 * COM7 is a pain in the ass, it doesn't like to be read then

	 * quickly written afterward.  But we have everything we need

	 * to set it absolutely here, as long as the format-specific

	 * register sets list it first.

	/*

	 * Configure the media bus through COM10 register

	/*

	 * Now write the rest of the array.  Also store start/stops

	/*

	 * If we're running RGB565, we must rewrite clkrc after setting

	 * the other parameters or the image looks poor.  If we're *not*

	 * doing RGB565, we must not rewrite clkrc or the image looks

	 * *really* poor.

	 *

	 * (Update) Now that we retain clkrc state, we should be able

	 * to write it unconditionally, and that will make the frame

	 * rate persistent too.

/*

 * Set a format.

	/*

	 * If the device is not powered up by the host driver do

	 * not apply any changes to H/W at this time. Instead

	 * the frame format will be restored right after power-up.

/*

 * Implement G/S_PARM.  There is a "high quality" mode we could try

 * to do someday; for now, we just do the frame rate tweak.

/*

 * Frame intervals.  Since frame rates are controlled with the clock

 * divider, we can only do 30/n for integer n values.  So no continuous

 * or stepwise options.  Here we just pick a handful of logical values.

	/*

	 * Check if the width/height is valid.

	 *

	 * If a minimum width/height was requested, filter out the capture

	 * windows that fall outside that.

/*

 * Frame size enumeration

	/*

	 * If a minimum width/height was requested, filter out the capture

	 * windows that fall outside that.

/*

 * Code for dealing with controls.

	/*

	 * Weird crap seems to exist in the upper part of

	 * the sign bits register, so let's preserve it.

/*

 * Hue also requires messing with the color matrix.  It also requires

 * trig functions, which tend not to be well supported in the kernel.

 * So here is a simple table of sine values, 0-90 degrees, in steps

 * of five degrees.  Values are multiplied by 1000.

 *

 * The following naive approximate trig functions require an argument

 * carefully limited to -180 <= theta <= 180.

	/*

	 * Apply the current saturation setting first.

	/*

	 * Then, if need be, rotate the hue value.

/*

 * Some weird registers seem to store values in a sign/magnitude format!

 FIXME */

 FIXME */

/*

 * GAIN is split between REG_GAIN and REG_VREF[7:6].  If one believes

 * the data sheet, the VREF parts should be the most significant, but

 * experience shows otherwise.  There seems to be little value in

 * messing with the VREF bits, so we leave them alone.

 Have to turn off AGC as well */

/*

 * Tweak autogain.

 Have to turn off AEC as well */

/*

 * Tweak autoexposure.

		/* Only set manual gain if auto gain is not explicitly

 ov7670_s_gain turns off auto gain */

		/* Only set manual exposure if auto exposure is not explicitly

 ov7670_s_exp turns off auto exposure */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

/*

 * ov7670_parse_dt() - Parse device tree to collect mbus configuration

 *			properties

 default: a guess */

		/*

		 * Must apply configuration before initializing device, because it

		 * selects I/O method.

 optional */

 Make sure it's an ov7670 */

 Set default frame rate to 30 fps */

	/*

	 * We have checked empirically that hw allows to read back the gain

	 * value chosen by auto gain but that's not the case for auto exposure.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vpx3220a, vpx3216b & vpx3214c video decoder driver version 0.0.1

 *

 * Copyright (C) 2001 Laurent Pinchart <lpinchart@freegates.be>

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 Write the 16-bit address to the FPWR register */

 Write the 16-bit data to the FPDAT register */

 Write the 16-bit address to the FPRD register */

 Read the 16-bit data from the FPDAT register */

 ---------------------------------------------------------------------- */

 NTSC tint angle */

 Window 1 vertical */

 Vertical lines in */

 Vertical lines out */

 Horizontal begin */

 Horizontal length */

 Number of pixels */

 Disable window 2 */

	0xf0, 0x73,		/* 13.5 MHz transport, Forced

 NTSC M, composite input */

	0xe7, 0x1e1,		/* Enable vertical standard

 Window 1 vertical begin */

	0x89, 288,		/* Vertical lines in (16 lines

	0x8a, 288,		/* Vertical lines out (16 lines

 Horizontal begin */

 Horizontal length */

	0x8d, 784,		/* Number of pixels

 Disable window 2 */

	0xf0, 0x77,		/* 13.5 MHz transport, Forced

 PAL B,G,H,I, composite input */

 PAL/SECAM set to 288 lines */

 Window 1 vertical begin */

	0x89, 288,		/* Vertical lines in (16 lines

	0x8a, 288,		/* Vertical lines out (16 lines

 Horizontal begin */

 Horizontal length */

	0x8d, 784,		/* Number of pixels

 Disable window 2 */

	0xf0, 0x77,		/* 13.5 MHz transport, Forced

 SECAM, composite input */

 PAL/SECAM set to 288 lines */

 Disable all outputs */

	0x33, 0x0d,		/* Luma : VIN2, Chroma : CIN

	0xd8, 0xa8,		/* HREF/VREF active high, VREF

 IF compensation 0dB/oct */

 Open up all comparators */

 Brightness set to 0 */

	0xe7, 0xe0,		/* Contrast to 1.0, noise shaping

	0xe8, 0xf8,		/* YUV422, CbCr binary offset,

	0xea, 0x18,		/* LLC2 connected, output FIFO

	0xf0, 0x8a,		/* Half full level to 10, bus

	0xf1, 0x18,		/* Single clock, sync mode, no

	0xf8, 0x12,		/* Port A, PIXCLK, HF# & FE#

	0xf9, 0x24,		/* Port B, HREF, VREF, PREF &

 ACC reference */

 PLL gain */

	/* Here we back up the input selection because it gets

	   overwritten when we fill the registers with the

 And here we set the backed up video input again */

	/* RJ:   input = 0: ST8 (PCTV) input

		 input = 1: COMPOSITE  input

 0x0010 is required to latch the setting */

 Bit 7 and 8 is for noise shaping */

 ----------------------------------------------------------------------- */

/* -----------------------------------------------------------------------

 * Client management code

 Check if the adapter supports the needed features */

 Default to PAL */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * adv7183.c Analog Devices ADV7183 video decoder driver

 *

 * Copyright (c) 2011 Analog Devices Inc.

 Current set standard */

/* EXAMPLES USING 27 MHz CLOCK

 * Mode 1 CVBS Input (Composite Video on AIN5)

 * All standards are supported through autodetect, 8-bit, 4:2:2, ITU-R BT.656 output on P15 to P8.

 CVBS input on AIN5 */

 Slow down digital clamps */

 Set CSFM to SH1 */

 Power down ADC 1 and ADC 2 */

 Set DNR threshold to 4 for flat response */

 ADI recommended programming sequence */

 wait 5ms before any further i2c writes are performed */

 enable autodetection block */

 wait autodetection switch */

 get autodetection result */

 after std detection, write back user set std */

 Check if the adapter supports the needed features */

 hook the control handler into the driver */

 v4l2 doesn't support an autodetect standard, pick PAL as default */

 reset chip */

 reset pulse width at least 5ms */

 wait 5ms before any further i2c writes are performed */

 initialize the hardware to the default control values */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the OV7251 camera sensor.

 *

 * Copyright (c) 2017-2018, The Linux Foundation. All rights reserved.

 * Copyright (c) 2017-2018, Linaro Ltd.

 Cached register values */

 lock to protect power state, ctrls and mode */

 pll2 pre divider */

 pll2 multiplier */

 pll2 sys divider */

 pll2 adc divider */

 pll2 divider */

 pll1 pix divider */

 pll1 divider */

 pll1 multiplier */

 pll1 pre divider */

 pll1 mipi divider */

 width high */

 width low */

 height high */

 height low */

 total horiz timing high */

 total horiz timing low */

 total vertical timing high */

 total vertical timing low */

 pll2 pre divider */

 pll2 multiplier */

 pll2 sys divider */

 pll2 adc divider */

 pll2 divider */

 pll1 pix divider */

 pll1 divider */

 pll1 multiplier */

 pll1 pre divider */

 pll1 mipi divider */

 width high */

 width low */

 height high */

 height low */

 total horiz timing high */

 total horiz timing low */

 total vertical timing high */

 total vertical timing low */

 pll2 pre divider */

 pll2 multiplier */

 pll2 sys divider */

 pll2 adc divider */

 pll2 divider */

 pll1 pix divider */

 pll1 divider */

 pll1 multiplier */

 pll1 pre divider */

 pll1 mipi divider */

 width high */

 width low */

 height high */

 height low */

 total horiz timing high */

 total horiz timing low */

 total vertical timing high */

 total vertical timing low */

 an index in link_freq[] */

 an index in link_freq[] */

 an index in link_freq[] */

	/* OV7251 power up sequence requires core regulator

	 * to be enabled not earlier than io regulator

 goes to OV7251_AEC_EXPO_0 */

 goes to OV7251_AEC_EXPO_1 */

 goes to OV7251_AEC_EXPO_2 */

 goes to OV7251_AEC_AGC_ADJ_0 */

 goes to OV7251_AEC_AGC_ADJ_1 */

 wait at least 65536 external clock cycles */

 If the power state is not modified - no work to do. */

 v4l2_ctrl_lock() locks our mutex */

 get system clock (xclk) */

 external clock must be 24MHz, allow 1% tolerance */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/* cx25840 firmware functions

/*

 * Mike Isely <isely@pobox.com> - The FWSEND parameter controls the

 * size of the firmware chunks sent down the I2C bus to the chip.

 * Previously this had been set to 1024 but unfortunately some I2C

 * implementations can't transfer data in such big gulps.

 * Specifically, the pvrusb2 driver has a hard limit of around 60

 * bytes, due to the encapsulation there of I2C traffic into USB

 * messages.  So we have to significantly reduce this parameter.

 DL_ADDR_LB=0 DL_ADDR_HB=0 */

 DL_MAP=3 DL_AUTO_INC=0 DL_ENABLE=1

 AUTO_INC_DIS=1 */

 AUTO_INC_DIS=0 */

 DL_ENABLE=0 */

 DL_ADDR_HB DL_ADDR_LB */

 Preserve the GPIO OE and output bits */

 cx231xx cannot accept more than 16 bytes at a time */

 Restore GPIO configuration after f/w load */

 SPDX-License-Identifier: GPL-2.0-or-later

/* cx25840 - Conexant CX25840 audio/video decoder driver

 *

 * Copyright (C) 2004 Ulf Eklund

 *

 * Based on the saa7115 driver and on the first version of Chris Kennedy's

 * cx25840 driver.

 *

 * Changes by Tyler Trafford <tatrafford@comcast.net>

 *    - cleanup/rewrite for V4L2 API (2005)

 *

 * VBI support by Hans Verkuil <hverkuil@xs4all.nl>.

 *

 * NTSC sliced VBI support by Christopher Neufeld <television@cneufeld.ca>

 * with additional fixes by Hans Verkuil <hverkuil@xs4all.nl>.

 *

 * CX23885 support by Steven Toth <stoth@linuxtv.org>.

 *

 * CX2388[578] IRQ handling, IO Pin mux configuration and other small fixes are

 * Copyright (C) 2010 Andy Walls <awalls@md.metrocast.net>

 *

 * CX23888 DIF support for the HVR1850

 * Copyright (C) 2011 Steven Toth <stoth@kernellabs.com>

 *

 * CX2584x pin to pad mapping and output format configuration support are

 * Copyright (C) 2011 Maciej S. Szmigiero <mail@maciej.szmigiero.name>

 ----------------------------------------------------------------------- */

 Write register address */

 Read data from register */

 Write register address */

 Read data from registers */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 GPIO16 */

 IRQ_N */

 IR_RX */

 GPIO19 */

 IR_TX */

 GPIO20 */

 I2S_SDAT */

 TODO: Input or Output config */

 GPIO21 */

 I2S_WCLK */

 TODO: Input or Output config */

 GPIO22 */

 I2S_BCLK */

 TODO: Input or Output config */

 GPIO23 */

 CX25840_PIN_DRIVE_MEDIUM */

 CX25840_PIN_DRIVE_MEDIUM */

 ----------------------------------------------------------------------- */

	/*

	 * This is the Hauppauge sequence used to

	 * initialize the Delay Lock Loop 1 (ADC DLL).

	/*

	 * This is the Hauppauge sequence used to

	 * initialize the Delay Lock Loop 2 (ADC DLL).

	/*

	 *reset configuration is described on page 3-77

	 * of the CX25836 datasheet

 2. */

 3a. */

 3b. */

 3c. */

 3d. */

 3e. */

 3f. */

 3g. */

 3h. */

 apply current vconfig to hardware regs */

 zero */

 zero */

 datasheet startup in numbered steps, refer to page 3-77 */

 2. */

	/*

	 * The default of this register should be 4, but I get 0 instead.

	 * Set this register to 4 manually.

 3. */

 4. */

 5. */

	/*

	 * Do the firmware load in a work handler to prevent.

	 * Otherwise the kernel is blocked waiting for the

	 * bit-banging i2c interface to finish uploading the

	 * firmware.

 6. */

 7. */

 8. */

 steps 8c and 8d are done in change_input() */

 10. */

 trial and error says these are needed to get audio */

 stereo preferred */

 AC97 shift */

 (re)set input */

 start microcontroller */

 cx23885 sets hostdata to clk_freq pointer */

	/*

	 * Come out of digital power down

	 * The CX23888, at least, needs this, otherwise registers aside from

	 * 0x0-0x2 can't be read or written.

 Internal Reset */

 Stop microcontroller */

 DIF in reset? */

	/*

	 * Trust the default xtal, no division

	 * '885: 28.636363... MHz

	 * '887: 25.000000 MHz

	 * '888: 50.000000 MHz

 Power up all the PLL's and DLL */

 Sys PLL */

		/*

		 * 50.0 MHz * (0xb + 0xe8ba26/0x2000000)/4 = 5 * 28.636363 MHz

		 * 572.73 MHz before post divide

 888/ImpactVCBe or 25Mhz xtal */

 nothing to do */

 HVR1850 or 50MHz xtal */

		/*

		 * 25.0 MHz * (0x16 + 0x1d1744c/0x2000000)/4 = 5 * 28.636363 MHz

		 * 572.73 MHz before post divide

		/*

		 * 28.636363 MHz * (0x14 + 0x0/0x2000000)/4 = 5 * 28.636363 MHz

		 * 572.73 MHz before post divide

 Disable DIF bypass */

 DIF Src phase inc */

	/*

	 * Vid PLL

	 * Setup for a BT.656 pixel clock of 13.5 Mpixels/second

	 *

	 * 28.636363 MHz * (0xf + 0x02be2c9/0x2000000)/4 = 8 * 13.5 MHz

	 * 432.0 MHz before post divide

 HVR1850 */

 888/ImpactVCBe or 25MHz xtal */

 888/HVR1250 or 50MHz xtal */

 Luma */

 Chroma */

	/*

	 * Aux PLL

	 * Initial setup for audio sample clock:

	 * 48 ksps, 16 bits/sample, x160 multiplier = 122.88 MHz

	 * Initial I2S output/master clock(?):

	 * 48 ksps, 16 bits/sample, x16 multiplier = 12.288 MHz

		/*

		 * 50.0 MHz * (0x7 + 0x0bedfa4/0x2000000)/3 = 122.88 MHz

		 * 368.64 MHz before post divide

		 * 122.88 MHz / 0xa = 12.288 MHz

 HVR1850 or 50MHz xtal or 25MHz xtal */

		/*

		 * 25.0 MHz * (0xe + 0x17dbf48/0x2000000)/3 = 122.88 MHz

		 * 368.64 MHz before post divide

		 * 122.88 MHz / 0xa = 12.288 MHz

		/*

		 * 28.636363 MHz * (0xc + 0x1bf0c9e/0x2000000)/3 = 122.88 MHz

		 * 368.64 MHz before post divide

		 * 122.88 MHz / 0xa = 12.288 MHz

 ADC2 input select */

 VIN1 & VIN5 */

 Enable format auto detect */

 Fast subchroma lock */

 White crush, Chroma AGC & Chroma Killer enabled */

 Select AFE clock pad output source */

	/* Drive GPIO2 direction and values for HVR1700

	 * where an onboard mux selects the output of demodulator

	 * vs the 417. Failure to set this results in no DTV.

	 * It's safe to set this across all Hauppauge boards

	 * currently, regardless of the board type.

	/*

	 * Do the firmware load in a work handler to prevent.

	 * Otherwise the kernel is blocked waiting for the

	 * bit-banging i2c interface to finish uploading the

	 * firmware.

	/*

	 * Call the cx23888 specific std setup func, we no longer rely on

	 * the generic cx24840 func.

 (re)set input */

 start microcontroller */

 Disable and clear video interrupts - we don't use them */

 Disable and clear audio interrupts - we don't use them */

 CC raw enable */

	/*

	 *  - VIP 1.1 control codes - 10bit, blue field enable.

	 *  - enable raw data during vertical blanking.

	 *  - enable ancillary Data insertion for 656 or VIP.

 CC on  - VBI_LINE_CTRL3, FLD_VBI_MD_LINE12 */

 HVR-1250 / HVR1850 DIF related */

 Power everything up */

 SRC_COMB_CFG */

 AFE_CLK_OUT_CTRL - Select the clock output source as output */

	/* I2C_OUT_CTL - I2S output configuration as

	 * Master, Sony, Left justified, left sample on WS=1

 AFE_DIAG_CTRL1 */

 AFE_DIAG_CTRL3 - Inverted Polarity for Audio and Video */

 ----------------------------------------------------------------------- */

 Internal Reset */

 Stop microcontroller */

 DIF in reset? */

 Trust the default xtal, no division */

 This changes for the cx23888 products */

 Bring down the regulator for AUX clk */

 Disable DIF bypass */

 DIF Src phase inc */

 Luma */

 Chroma */

 ADC2 input select */

 VIN1 & VIN5 */

 Enable format auto detect */

 Fast subchroma lock */

 White crush, Chroma AGC & Chroma Killer enabled */

	/*

	 * Do the firmware load in a work handler to prevent.

	 * Otherwise the kernel is blocked waiting for the

	 * bit-banging i2c interface to finish uploading the

	 * firmware.

 (re)set input */

 start microcontroller */

 CC raw enable */

 CC on */

 ----------------------------------------------------------------------- */

 datasheet startup, step 8d */

 generic mode uses the values that the chip autoconfig would set */

 DEBUG: Displays configured PLL frequency */

 Sets horizontal blanking delay and active lines */

 Sets burst gate delay */

 Sets vertical blanking delay and active duration */

 Sets src decimation rate */

 Sets Luma and UV Low pass filters */

 Enables comb filters */

 Sets SC Step*/

 Sets VBI parameters */

 ----------------------------------------------------------------------- */

 Follow step 8c and 8d of section 3.16 in the cx25840 datasheet */

 Don't write into audio registers on cx2583x chips */

		/*

		 * Certain Hauppauge PVR150 models have a hardware bug

		 * that causes audio to drop out. For these models the

		 * audio standard must be set explicitly.

		 * To be precise: it affects cards with tuner models

		 * 85, 99 and 112 (model numbers from tveeprom).

 Japan uses EIAJ audio standard */

 South Korea uses A2 audio standard */

 Others use the BTSC audio standard */

 Autodetect audio standard and audio system */

		/*

		 * Since system PAL-L is pretty much non-existent and

		 * not used by any public broadcast network, force

		 * 6.5 MHz carrier to be interpreted as System DK,

		 * this avoids DK audio detection instability

 Autodetect audio standard and audio system */

		/*

		 * If only one of SECAM-DK / SECAM-L is required, then force

		 * 6.5MHz carrier, else autodetect it

 6.5 MHz carrier to be interpreted as System DK */

 6.5 MHz carrier to be interpreted as System L */

 6.5 MHz carrier to be autodetected */

	/* The caller has previously prepared the correct routing

	 * configuration in reg (for the cx23885) so we have no

	 * need to attempt to flip bits for earlier av decoders.

 do nothing, use serial audio input */

 Set INPUT_MODE to Composite, S-Video or Component */

 Enable or disable the DIF for tuner use */

 Set of defaults for NTSC and PAL */

			/* 18271 IF - Nobody else yet uses a different

			 * tuner with the DIF, so these are reasonable

			 * assumptions (HVR1250 and HVR1850 specific).

 888 MISC_TIM_CTRL */

 888 FIELD_COUNT */

 888 VSCALE_CTRL */

 888 DFE_CTRL1 */

 888 DFE_CTRL2 */

 888 DFE_CTRL3 */

 888 PLL_CTRL */

 888 HTL_CTRL */

 DIF BYPASS */

 Reset the DIF */

 Set CH_SEL_ADC2 to 1 if input comes from CH3 */

 Set DUAL_MODE_ADC2 to 1 if input comes from both CH2&CH3 */

 Set DUAL_MODE_ADC2 to 1 if component*/

 ADC2 input select channel 2 */

 S-Video */

 ADC2 input select channel 3 */

 ADC2 input select channel 2 */

 cx23885 / SVIDEO */

 YC */

 Chroma in select */

			/* Clear VGA_SEL_CH2 and VGA_SEL_CH3 (bits 7 and 8).

			 * This sets them to use video rather than audio.

			 * Only one of the two will be in use.

 Audio channel 1 src : Parallel 1 */

 Select AFE clock pad output source */

 I2S_IN_CTL: I2S_IN_SONY_MODE, LEFT SAMPLE on WS=1 */

		/* I2S_OUT_CTL:

		 * I2S_IN_SONY_MODE, LEFT SAMPLE on WS=1

		 * I2S_OUT_MASTER_MODE = Master

 Audio channel 1 src : Parallel 1 */

 I2S_IN_CTL: I2S_IN_SONY_MODE, LEFT SAMPLE on WS=1 */

		/* I2S_OUT_CTL:

		 * I2S_IN_SONY_MODE, LEFT SAMPLE on WS=1

		 * I2S_OUT_MASTER_MODE = Master

 Configure audio from LR1 or LR2 input */

 Configure audio from tuner/sif input */

		/*

		 * HVR1850

		 *

		 * AUD_IO_CTRL - I2S Input, Parallel1

		 *  - Channel 1 src - Parallel1 (Merlin out)

		 *  - Channel 2 src - Parallel2 (Merlin out)

		 *  - Channel 3 src - Parallel3 (Merlin AC97 out)

		 *  - I2S source and dir - Merlin, output

			/*

			 * Stop microcontroller if we don't need it

			 * to avoid audio popping on svideo/composite use.

 ----------------------------------------------------------------------- */

 zero is autodetect */

 First tests should be against specific std */

 Then, test against generic ones */

	/*

	 * Follow step 9 of section 3.16 in the cx25840 datasheet.

	 * Without this PAL may display a vertical ghosting effect.

	 * This happens for example with the Yuan MPC622.

 Set format to NTSC-M */

 Turn off LCOMB */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

		/*

		 * cx23888 in 525-line mode is programmed for 486 active lines

		 * while other chips use 487 active lines.

		 *

		 * See reg 0x428 bits [21:12] in cx23888_std_setup() vs

		 * vactive in cx25840_std_setup().

		/*

		 * that's the best we can do since the output picture

		 * size is completely unknown in this case

 HSCALE=hsc */

 VSCALE=vsc VS_INTRLACE=1 VFILT=filter */

 VSCALE=vsc */

 VS_INTRLACE=1 VFILT=filter */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 apply incoming options to the current vconfig */

 ----------------------------------------------------------------------- */

/*

 * Initializes the device in the generic mode.

 * For cx2584x chips also adds additional video output settings provided

 * in @val parameter (CX25840_VCONFIG_*).

 *

 * The generic mode disables some of the ivtv-related hacks in this driver.

 * For cx2584x chips it also enables setting video output configuration while

 * setting it according to datasheet defaults by default.

 set datasheet video output defaults */

 add additional settings */

 TODO: generic mode needs to be developed for other chips */

/*

 * This load_fw operation must be called to load the driver's firmware.

 * This will load the firmware on the first invocation (further ones are NOP).

 * Without this the audio standard detection will fail and you will

 * only get mono.

 * Alternatively, you can call the reset operation instead of this one.

 *

 * Since loading the firmware is often problematic when the driver is

 * compiled into the kernel I recommend postponing calling this function

 * until the first open of the video device. Another reason for

 * postponing it is that loading this firmware takes a long time (seconds)

 * due to the slow i2c bus speed. So it will speed up the boot process if

 * you can avoid loading the fw as long as the video device isn't used.

 initialize and load firmware */

	/*

	 * It's not clear what should be done for these devices.

	 * The original code used the same addresses as for the cx25840, but

	 * those addresses do something else entirely on the cx2388x and

	 * cx231xx. Since it never did anything in the first place, just do

	 * nothing.

 Query the current detected video format */

 0000 */ V4L2_STD_UNKNOWN,

 0001 */ V4L2_STD_NTSC_M,

 0010 */ V4L2_STD_NTSC_M_JP,

 0011 */ V4L2_STD_NTSC_443,

 0100 */ V4L2_STD_PAL,

 0101 */ V4L2_STD_PAL_M,

 0110 */ V4L2_STD_PAL_N,

 0111 */ V4L2_STD_PAL_Nc,

 1000 */ V4L2_STD_PAL_60,

 1001 */ V4L2_STD_UNKNOWN,

 1010 */ V4L2_STD_UNKNOWN,

 1011 */ V4L2_STD_UNKNOWN,

 1100 */ V4L2_STD_SECAM,

 1101 */ V4L2_STD_UNKNOWN,

 1110 */ V4L2_STD_UNKNOWN,

 1111 */ V4L2_STD_UNKNOWN

	/*

	 * A limited function that checks for signal status and returns

	 * the state.

 Check for status of Horizontal lock (SRC lock isn't reliable) */

 get rxsubchans and audmode */

		/*

		 * mono      -> mono

		 * stereo    -> mono

		 * bilingual -> lang1

		/*

		 * mono      -> mono

		 * stereo    -> stereo

		 * bilingual -> lang1

		/*

		 * mono      -> mono

		 * stereo    -> stereo

		 * bilingual -> lang1/lang2

		/*

		 * mono      -> mono

		 * stereo    -> stereo

		 * bilingual -> lang2

 Only support the CX2388[578] AV Core for now */

 ----------------------------------------------------------------------- */

 Assuming TV */

 Calculate the PLL frequency word based on the adjusted ifHz */

 Round down to the nearest 100KHz */

 Horiz / vert timing */

 DIF NTSC */

 DIF I/F */

 Horiz / vert timing */

 DIF */

 DIF I/F */

	/* Explicitly ensure the inputs are reconfigured after

	 * a standard change.

 ----------------------------------------------------------------------- */

 calling the (optional) init op will turn on the generic mode */

 ----------------------------------------------------------------------- */

 Come out of digital power down */

	/*

	 * Detecting whether the part is cx23885/7/8 is more

	 * difficult than it needs to be. No ID register. Instead we

	 * probe certain registers indicated in the datasheets to look

	 * for specific defaults that differ between the silicon designs.

 It's either 885/7 if the IR Tx Clk Divider register exists */

		/*

		 * CX23885 returns bogus repetitive byte values for the DIF,

		 * which doesn't exist for it. (Ex. 8a8a8a8a or 31313131)

 No DIF */

			/*

			 * CX23887 has a broken DIF, but the registers

			 * appear valid (but unused), good enough to detect.

 DIF PLL Freq Word reg exists; chip must be a CX23888 */

 Back into digital power down */

 Check if the adapter supports the needed features */

	/*

	 * The high byte of the device ID should be

	 * 0x83 for the cx2583x and 0x84 for the cx2584x

 The CX23100 (0x5A3C = 23100) doesn't have an A/V decoder */

	/*

	 * TODO: add media controller support for analog video inputs like

	 * composite, svideo, etc.

	 * A real input pad for this analog demod would be like:

	 *                 ___________

	 * TUNER --------> |         |

	 *		   |         |

	 * SVIDEO .......> | cx25840 |

	 *		   |         |

	 * COMPOSITE1 ...> |_________|

	 *

	 * However, at least for now, there's no much gain on modelling

	 * those extra inputs. So, let's add it only when needed.

		/*

		 * Note: revision '(device_id & 0x0f) == 2' was never built.

		 * The marking skips from 0x1 == 22 to 0x3 == 23.

		/*

		 * Enforce the legacy PVR-350/MSP3400 to PVR-150/CX25843 volume

		 * scale mapping limits to avoid -ERANGE errors when

		 * initializing the volume control

 Bottom out at -96 dB, v4l2 vol range 0x2e00-0x2fff */

 Top out at + 8 dB, v4l2 vol range 0xfe00-0xffff */

 SPDX-License-Identifier: GPL-2.0-or-later

/* cx25840 audio functions

/*

 * Note: The PLL and SRC parameters are based on a reference frequency that

 * would ideally be:

 *

 * NTSC Color subcarrier freq * 8 = 4.5 MHz/286 * 455/2 * 8 = 28.63636363... MHz

 *

 * However, it's not the exact reference frequency that matters, only that the

 * firmware and modules that comprise the driver for a particular board all

 * use the same value (close to the ideal value).

 *

 * Comments below will note which reference frequency is assumed for various

 * parameters.  They will usually be one of

 *

 *	ref_freq = 28.636360 MHz

 *		or

 *	ref_freq = 28.636363 MHz

			/*

			 * VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04

			 * AUX_PLL Integer = 0x06, AUX PLL Post Divider = 0x10

			/*

			 * VID_PLL Fraction (register 0x10c) = 0x2be2fe

			 * 28636360 * 0xf.15f17f0/4 = 108 MHz

			 * 432 MHz pre-postdivide

			/*

			 * AUX_PLL Fraction = 0x1bb39ee

			 * 28636363 * 0x6.dd9cf70/0x10 = 32000 * 384

			 * 196.6 MHz pre-postdivide

			 * FIXME < 200 MHz is out of specified valid range

			 * FIXME 28636363 ref_freq doesn't match VID PLL ref

			/*

			 * SA_MCLK_SEL = 1

			 * SA_MCLK_DIV = 0x10 = 384/384 * AUX_PLL post dvivider

 src3/4/6_ctl */

 0x1.f77f = (4 * 28636360/8 * 2/455) / 32000 */

			/*

			 * VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04

			 * AUX_PLL Integer = 0x09, AUX PLL Post Divider = 0x10

			/*

			 * VID_PLL Fraction (register 0x10c) = 0x2be2fe

			 * 28636360 * 0xf.15f17f0/4 = 108 MHz

			 * 432 MHz pre-postdivide

			/*

			 * AUX_PLL Fraction = 0x0ec6bd6

			 * 28636363 * 0x9.7635eb0/0x10 = 44100 * 384

			 * 271 MHz pre-postdivide

			 * FIXME 28636363 ref_freq doesn't match VID PLL ref

			/*

			 * SA_MCLK_SEL = 1

			 * SA_MCLK_DIV = 0x10 = 384/384 * AUX_PLL post dvivider

 src3/4/6_ctl */

 0x1.6d59 = (4 * 28636360/8 * 2/455) / 44100 */

			/*

			 * VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04

			 * AUX_PLL Integer = 0x0a, AUX PLL Post Divider = 0x10

			/*

			 * VID_PLL Fraction (register 0x10c) = 0x2be2fe

			 * 28636360 * 0xf.15f17f0/4 = 108 MHz

			 * 432 MHz pre-postdivide

			/*

			 * AUX_PLL Fraction = 0x098d6e5

			 * 28636363 * 0xa.4c6b728/0x10 = 48000 * 384

			 * 295 MHz pre-postdivide

			 * FIXME 28636363 ref_freq doesn't match VID PLL ref

			/*

			 * SA_MCLK_SEL = 1

			 * SA_MCLK_DIV = 0x10 = 384/384 * AUX_PLL post dvivider

 src3/4/6_ctl */

 0x1.4faa = (4 * 28636360/8 * 2/455) / 48000 */

			/*

			 * VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04

			 * AUX_PLL Integer = 0x08, AUX PLL Post Divider = 0x1e

			/*

			 * VID_PLL Fraction (register 0x10c) = 0x2be2fe

			 * 28636360 * 0xf.15f17f0/4 = 108 MHz

			 * 432 MHz pre-postdivide

			/*

			 * AUX_PLL Fraction = 0x12a0869

			 * 28636363 * 0x8.9504348/0x1e = 32000 * 256

			 * 246 MHz pre-postdivide

			 * FIXME 28636363 ref_freq doesn't match VID PLL ref

			/*

			 * SA_MCLK_SEL = 1

			 * SA_MCLK_DIV = 0x14 = 256/384 * AUX_PLL post dvivider

 src1_ctl */

 0x1.0000 = 32000/32000 */

 src3/4/6_ctl */

 0x2.0000 = 2 * (32000/32000) */

			/*

			 * VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04

			 * AUX_PLL Integer = 0x09, AUX PLL Post Divider = 0x18

			/*

			 * VID_PLL Fraction (register 0x10c) = 0x2be2fe

			 * 28636360 * 0xf.15f17f0/4 = 108 MHz

			 * 432 MHz pre-postdivide

			/*

			 * AUX_PLL Fraction = 0x0ec6bd6

			 * 28636363 * 0x9.7635eb0/0x18 = 44100 * 256

			 * 271 MHz pre-postdivide

			 * FIXME 28636363 ref_freq doesn't match VID PLL ref

			/*

			 * SA_MCLK_SEL = 1

			 * SA_MCLK_DIV = 0x10 = 256/384 * AUX_PLL post dvivider

 src1_ctl */

 0x1.60cd = 44100/32000 */

 src3/4/6_ctl */

 0x1.7385 = 2 * (32000/44100) */

			/*

			 * VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04

			 * AUX_PLL Integer = 0x0a, AUX PLL Post Divider = 0x18

			/*

			 * VID_PLL Fraction (register 0x10c) = 0x2be2fe

			 * 28636360 * 0xf.15f17f0/4 = 108 MHz

			 * 432 MHz pre-postdivide

			/*

			 * AUX_PLL Fraction = 0x098d6e5

			 * 28636363 * 0xa.4c6b728/0x18 = 48000 * 256

			 * 295 MHz pre-postdivide

			 * FIXME 28636363 ref_freq doesn't match VID PLL ref

			/*

			 * SA_MCLK_SEL = 1

			 * SA_MCLK_DIV = 0x10 = 256/384 * AUX_PLL post dvivider

 src1_ctl */

 0x1.8000 = 48000/32000 */

 src3/4/6_ctl */

 0x1.5555 = 2 * (32000/48000) */

			/* We don't have register values

 FIXME return -EINVAL; */

			/* We don't have register values

 FIXME return -EINVAL; */

 src1_ctl */

 0x1.867c = 48000 / (2 * 28636360/8 * 2/455) */

 src3/4/6_ctl */

 0x1.4faa = (4 * 28636360/8 * 2/455) / 48000 */

 src3/4/6_ctl */

 0x1.f77f = (4 * 28636360/8 * 2/455) / 32000 */

 src3/4/6_ctl */

 0x1.6d59 = (4 * 28636360/8 * 2/455) / 44100 */

 src3/4/6_ctl */

 0x1.4faa = (4 * 28636360/8 * 2/455) / 48000 */

 FIXME These cases make different assumptions about audclk */

 src1_ctl */

 0x1.0000 = 32000/32000 */

 src3/4/6_ctl */

 0x2.0000 = 2 * (32000/32000) */

 src1_ctl */

 0x1.60cd = 44100/32000 */

 src3/4/6_ctl */

 0x1.7385 = 2 * (32000/44100) */

 src1_ctl */

 0x1.867c = 48000 / (2 * 28636360/8 * 2/455) */

 src3/4/6_ctl */

 0x1.4faa = (4 * 28636360/8 * 2/455) / 48000 */

 assert soft reset */

 stop microcontroller */

 Mute everything to prevent the PFFT! */

 Set Path1 to Serial Audio Input */

			/* The microcontroller should not be started for the

			 * non-tuner inputs: autodetection is specific for

 Set Path1 to Analog Demod Main Channel */

			/* When the microcontroller detects the

 deassert soft reset */

 Ensure the controller is running when we exit */

 Convert the volume to msp3400 values (0-127) */

	/* now scale it up to cx25840 values

	 * -114dB to -96dB maps to 0

 PATH1_VOLUME */

 PATH1_BAL_LEFT */

 PATH1_BAL_LEVEL */

 PATH1_BAL_LEFT */

 PATH1_BAL_LEVEL */

 PATH1_EQ_BASS_VOL */

 PATH1_EQ_TREBLE_VOL */

 SPDX-License-Identifier: GPL-2.0-or-later

/* cx25840 VBI functions

 1 */

 4 */

 6 */

 9 */

 we're done if raw VBI is active */

 TODO: this will have to be changed for generic_mode VBI */

 Setup standard */

 VBI Offset */

 TODO: this will have to be changed for generic_mode VBI */

 Setup standard */

 Sliced VBI */

 TODO: this will have to be changed for generic_mode VBI */

 Ancillary data */

 TODO: this will have to be changed for generic_mode VBI */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for the Conexant CX2584x Audio/Video decoder chip and related cores

 *

 *  Integrated Consumer Infrared Controller

 *

 *  Copyright (C) 2010  Andy Walls <awalls@md.metrocast.net>

 108 MHz, BT.656 */

/*

 * We use this union internally for convenience, but callers to tx_write

 * and rx_read will be expecting records of type struct ir_raw_event.

 * Always ensure the size of this union is dictated by struct ir_raw_event.

 protects Rx parameter settings cache */

 protect Rx data kfifo */

 protects Tx parameter settings cache */

/*

 * Rx and Tx Clock Divider register computations

 *

 * Note the largest clock divider value of 0xffff corresponds to:

 *	(0xffff + 1) * 1000 / 108/2 MHz = 1,213,629.629... ns

 * which fits in 21 bits, so we'll use unsigned int for time arguments.

 Period of the Rx or Tx clock in ns */

/*

 * Low Pass Filter register calculations

 *

 * Note the largest count value of 0xffff corresponds to:

 *	0xffff * 1000 / 108/2 MHz = 1,213,611.11... ns

 * which fits in 21 bits, so we'll use unsigned int for time arguments.

 Duration of the Low Pass Filter rejection window in ns */

 Duration of the Low Pass Filter rejection window in us */

/*

 * FIFO register pulse width count computations

	/*

	 * Resolution is the duration of 1 tick of the readable portion of

	 * of the pulse width counter as read from the FIFO.  The two lsb's are

	 * not readable, hence the << 2.  This function returns ns.

	/*

	 * The 2 lsb's of the pulse width timer count are not readable, hence

	 * the (count << 2) | 0x3

 millicycles */

 / MHz => ns */

 Keep as we will need this for Transmit functionality */

	/*

	 * The 2 lsb's of the pulse width timer count are not accessible, hence

	 * the (1 << 2)

 millicycles */

 millicycles/count */

	/*

	 * The 2 lsb's of the pulse width timer count are not readable, hence

	 * the (count << 2) | 0x3

 cycles      */

 / MHz => us */

/*

 * Pulse Clocks computations: Combined Pulse Width Count & Rx Clock Counts

 *

 * The total pulse clock count is an 18 bit pulse width timer count as the most

 * significant part and (up to) 16 bit clock divider count as a modulus.

 * When the Rx clock divider ticks down to 0, it increments the 18 bit pulse

 * width timer count's least significant bit.

 millicycles  */

 /1000 = cycles */

 net result needs to be rounded down and decremented by 1 */

/*

 * IR Control Register helpers

/*

 * IR Rx & Tx Clock Register helpers

/*

 * IR Tx Carrier Duty Cycle register helpers

 16ths of 100% */

/*

 * IR Filter Register helpers

/*

 * IR IRQ Enable Register helpers

/*

 * V4L2 Subdevice IR Ops

 Only support the IR controller for the CX2388[57] AV Core for now */

 Tx FIFO Service Request */

 Rx FIFO Service Request */

 Rx Pulse Width Timer Time Out */

 Rx FIFO Over Run */

 Tx FIFO Service Request IRQ Enable */

 Rx FIFO Service Request IRQ Enable */

 Rx Pulse Width Timer Time Out IRQ Enable */

 Rx FIFO Over Run IRQ Enable */

	/*

	 * Transmitter interrupt service

		/*

		 * TODO:

		 * Check the watermark threshold setting

		 * Pull FIFO_TX_DEPTH or FIFO_TX_DEPTH/2 entries from tx_kfifo

		 * Push the data to the hardware FIFO.

		 * If there was nothing more to send in the tx_kfifo, disable

		 *	the TSR IRQ and notify the v4l2_device.

		 * If there was something in the tx_kfifo, check the tx_kfifo

		 *      level and notify the v4l2_device, if it is low.

 For now, inhibit TSR interrupt until Tx is implemented */

	/*

	 * Receiver interrupt service

		/*

		 * Receive data on RSR to clear the STATS_RSR.

		 * Receive data on RTO, since we may not have yet hit the RSR

		 * watermark when we receive the RTO.

 rx_kfifo over run */

		/*

		 * The RX FIFO Enable (CNTRL_RFE) must be toggled to clear

		 * the Rx FIFO Over Run status (STATS_ROR)

		/*

		 * The IR Receiver Enable (CNTRL_RXE) must be toggled to clear

		 * the Rx Pulse Width Timer Time Out (STATS_RTO)

 Clear STATS_ROR & STATS_RTO as needed by resetting hardware */

 Receiver */

 Assume RTO was because of no IR light input */

 Disable or slow down all IR Rx circuits and counters */

 Before we tweak the hardware, we have to disable the receiver */

 FIXME - make this dependent on resolution for better performance */

 Transmitter */

	/*

	 * FIXME - the code below is an incomplete and untested sketch of what

	 * may need to be done.  The critical part is to get 4 (or 8) pulses

	 * from the tx_kfifo, or converted from ns to the proper units from the

	 * input, and push them off to the hardware Tx FIFO right away, if the

	 * HW TX fifo needs service.  The rest can be pushed to the tx_kfifo in

	 * a less critical timeframe.  Also watch out for overruning the

	 * tx_kfifo - don't let it happen and let the caller know not all his

	 * pulses were written.

 Compute how much we can fit in the tx kfifo */

	/* FIXME - turn on Tx Fifo service interrupt

	 * check hardware fifo level, and other stuff

 For now enable the Tx FIFO Service interrupt & pretend we did work */

 Disable or slow down all IR Tx circuits and counters */

 Before we tweak the hardware, we have to disable the transmitter */

 FIXME - make this dependent on resolution for better performance */

	/*

	 * FIXME: we don't have hardware help for IO pin level inversion

	 * here like we have on the CX23888.

	 * Act on this with some mix of logical inversion of data levels,

	 * carrier polarity, and carrier duty cycle.

 reset tx_fifo here */

/*

 * V4L2 Subdevice Core Ops support

 The CX23888 chip doesn't have an IR controller on the A/V core */

 36 kHz - RC-5, and RC-6 carrier */

 RC-5: 666,667 ns = 1/36 kHz * 32 cycles * 1 mark * 0.75 */

 RC-6: 333,333 ns = 1/36 kHz * 16 cycles * 1 mark * 0.75 */

 ns */

 36 kHz - RC-5 carrier */

 25 %   - RC-5 carrier */

 Only init the IR controller for the CX2388[57] AV Core for now */

 Ensure no interrupts arrive yet */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for M-5MOLS 8M Pixel camera sensor with ISP

 *

 * Copyright (C) 2011 Samsung Electronics Co., Ltd.

 * Author: HeungJun Kim <riverful.kim@samsung.com>

 *

 * Copyright (C) 2009 Samsung Electronics Co., Ltd.

 * Author: Dongsoo Nathaniel Kim <dongsoo45.kim@samsung.com>

 The regulator consumer names for external voltage regulators */

 ARM core power, 1.2V */

 digital power 1, 1.8V */

 sensor power 1, 1.8V */

 digital power 2, 2.8V */

 analog power */

 digital power 3, 1.2V */

 SUB-QCIF */

 QQVGA */

 QCIF */

 QVGA */

 QVGA */

 WQVGA */

 WQVGA */

 CIF */

 qHD */

 VGA */

 WVGA */

 SVGA */

 HD */

 1080p */

 2.63fps 8M */

 AHS_MON debug */

 QVGA */

 WQVGA */

 qHD */

 VGA */

 WVGA */

 HD */

 1M */

 2M */

 Full-HD */

 3Mega */

 4Mega */

 5Mega */

 6Mega */

 8Mega */

/**

 * m5mols_swap_byte - an byte array to integer conversion function

 * @data: byte array

 * @length: size in bytes of I2C packet defined in the M-5MOLS datasheet

 *

 * Convert I2C data byte array with performing any required byte

 * reordering to assure proper values for each data type, regardless

 * of the architecture endianness.

/**

 * m5mols_read -  I2C read function

 * @sd: sub-device, as pointed by struct v4l2_subdev

 * @size: desired size of I2C packet

 * @reg: combination of size, category and command for the I2C packet

 * @val: read value

 *

 * Returns 0 on success, or else negative errno.

 minimum stabilization time */

/**

 * m5mols_write - I2C command write function

 * @sd: sub-device, as pointed by struct v4l2_subdev

 * @reg: combination of size, category and command for the I2C packet

 * @val: value to write

 *

 * Returns 0 on success, or else negative errno.

 minimum stabilization time */

/**

 * m5mols_busy_wait - Busy waiting with I2C register polling

 * @sd: sub-device, as pointed by struct v4l2_subdev

 * @reg: the I2C_REG() address of an 8-bit status register to check

 * @value: expected status register value

 * @mask: bit mask for the read status register value

 * @timeout: timeout in milliseconds, or -1 for default timeout

 *

 * The @reg register value is ORed with @mask before comparing with @value.

 *

 * Return: 0 if the requested condition became true within less than

 *         @timeout ms, or else negative errno.

/**

 * m5mols_enable_interrupt - Clear interrupt pending bits and unmask interrupts

 * @sd: sub-device, as pointed by struct v4l2_subdev

 * @reg: combination of size, category and command for the I2C packet

 *

 * Before writing desired interrupt value the INT_FACTOR register should

 * be read to clear pending interrupts.

/**

 * m5mols_reg_mode - Write the mode and check busy status

 * @sd: sub-device, as pointed by struct v4l2_subdev

 * @mode: the required operation mode

 *

 * It always accompanies a little delay changing the M-5MOLS mode, so it is

 * needed checking current busy status to guarantee right mode.

/**

 * m5mols_set_mode - set the M-5MOLS controller mode

 * @info: M-5MOLS driver data structure

 * @mode: the required operation mode

 *

 * The commands of M-5MOLS are grouped into specific modes. Each functionality

 * can be guaranteed only when the sensor is operating in mode which a command

 * belongs to.

/**

 * m5mols_get_version - retrieve full revisions information of M-5MOLS

 * @sd: sub-device, as pointed by struct v4l2_subdev

 *

 * The version information includes revisions of hardware and firmware,

 * AutoFocus alghorithm version and the version string.

/**

 * __find_restype - Lookup M-5MOLS resolution type according to pixel code

 * @code: pixel code

/**

 * __find_resolution - Lookup preset and type of M-5MOLS's resolution

 * @sd: sub-device, as pointed by struct v4l2_subdev

 * @mf: pixel format to find/negotiate the resolution preset for

 * @type: M-5MOLS resolution type

 * @resolution:	M-5MOLS resolution preset register value

 *

 * Find nearest resolution matching resolution preset and adjust mf

 * to supported values.

	/*

	 * .get_frame_desc is only used for compressed formats,

	 * thus we always return the capture frame parameters here.

/**

 * m5mols_restore_controls - Apply current control values to the registers

 * @info: M-5MOLS driver data structure

 *

 * m5mols_do_scenemode() handles all parameters for which there is yet no

 * individual control. It should be replaced at some point by setting each

 * control individually, in required register set up order.

/**

 * m5mols_start_monitor - Start the monitor mode

 * @info: M-5MOLS driver data structure

 *

 * Before applying the controls setup the resolution and frame rate

 * in PARAMETER mode, and then switch over to MONITOR mode.

 m5mols_update_fw - optional firmware update routine */

/**

 * m5mols_fw_start - M-5MOLS internal ARM controller initialization

 * @sd: sub-device, as pointed by struct v4l2_subdev

 *

 * Execute the M-5MOLS internal ARM controller initialization sequence.

 * This function should be called after the supply voltage has been

 * applied and before any requests to the device are made.

 Wait until I2C slave is initialized in Flash Writer mode */

 Execute the lens soft-landing algorithm */

/**

 * m5mols_s_power - Main sensor power control function

 * @sd: sub-device, as pointed by struct v4l2_subdev

 * @on: if true, powers on the device; powers off otherwise.

 *

 * To prevent breaking the lens when the sensor is powered off the Soft-Landing

 * algorithm is called where available. The Soft-Landing algorithm availability

 * dependends on the firmware provider.

/*

 * V4L2 subdev internal operations

 Static name; NEVER use in new drivers! */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * The Capture code for Fujitsu M-5MOLS ISP

 *

 * Copyright (C) 2011 Samsung Electronics Co., Ltd.

 * Author: HeungJun Kim <riverful.kim@samsung.com>

 *

 * Copyright (C) 2009 Samsung Electronics Co., Ltd.

 * Author: Dongsoo Nathaniel Kim <dongsoo45.kim@samsung.com>

/**

 * m5mols_read_rational - I2C read of a rational number

 * @sd: sub-device, as pointed by struct v4l2_subdev

 * @addr_num: numerator register

 * @addr_den: denominator register

 * @val: place to store the division result

 *

 * Read numerator and denominator from registers @addr_num and @addr_den

 * respectively and return the division result in @val.

/**

 * m5mols_capture_info - Gather captured image information

 * @info: M-5MOLS driver data structure

 *

 * For now it gathers only EXIF information and file size.

	/*

	 * Synchronize the controls, set the capture frame resolution and color

	 * format. The frame capture is initiated during switching from Monitor

	 * to Capture mode.

 Wait until a frame is captured to ISP internal memory */

	/*

	 * Initiate the captured data transfer to a MIPI-CSI receiver.

 Wait for the capture completion interrupt */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Controls for M-5MOLS 8M Pixel camera sensor with ISP

 *

 * Copyright (C) 2011 Samsung Electronics Co., Ltd.

 * Author: HeungJun Kim <riverful.kim@samsung.com>

 *

 * Copyright (C) 2009 Samsung Electronics Co., Ltd.

 * Author: Dongsoo Nathaniel Kim <dongsoo45.kim@samsung.com>

/**

 * m5mols_do_scenemode() - Change current scenemode

 * @info: M-5MOLS driver data structure

 * @mode:	Desired mode of the scenemode

 *

 * WARNING: The execution order is important. Do not change the order.

 Unlock auto exposure */

	/*

	 * If needed, defer restoring the controls until

	 * the device is fully initialized.

 Supported manual ISO values */

 AE_ISO: 0x01...0x07 (ISO: 50...3200) */

 Supported Exposure Bias values, -2.0EV...+2.0EV */

 AE_INDEX: 0x00...0x08 */

 Determine the firmware dependent control range and step values */

 Exposure control cluster */

 ISO control cluster */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Analog Devices ADV748X HDMI receiver with AFE

 *

 * Copyright (C) 2017 Renesas Electronics Corp.

 *

 * Authors:

 *	Koji Matsuoka <koji.matsuoka.xm@renesas.com>

 *	Niklas Söderlund <niklas.soderlund@ragnatech.se>

 *	Kieran Bingham <kieran.bingham@ideasonboard.com>

/* -----------------------------------------------------------------------------

 * Register manipulation

/* adv748x_write_block(): Write raw data with a maximum of I2C_SMBUS_BLOCK_MAX

 * size to one or more registers.

 *

 * A value of zero will be returned on success, a negative errno will

 * be returned in error cases.

/**

 * struct adv748x_reg_value - Register write instruction

 * @page:		Regmap page identifier

 * @reg:		I2C register

 * @value:		value to write to @page at @reg

/* -----------------------------------------------------------------------------

 * TXA and TXB

 Enable n-lane MIPI */

 Set Auto DPHY Timing */

 ADI Required Write */

 i2c_dphy_pwdn - 1'b0 */

 ADI Required Writes*/

 i2c_mipi_pll_en - 1'b1 */

 Power-up CSI-TX */

 ADI Required Writes */

 ADI Required Writes */

 Enable n-lane MIPI */

 i2c_mipi_pll_en - 1'b1 */

 ADI Required Write */

	/*

	 * This test against BIT(6) is not documented by the datasheet, but was

	 * specified in the downstream driver.

	 * Track with a WARN_ONCE to determine if it is ever set by HW.

/* -----------------------------------------------------------------------------

 * Media Operations

 Refuse to enable multiple links to the same TX at the same time. */

 Set or clear the source (HDMI or AFE) and the current TX. */

 AFE Requires TXA enabled, even when output to TXB */

			/*

			 * Output from the SD-core (480i and 576i) from the TXA

			 * interface requires reducing the number of enabled

			 * data lanes in order to guarantee a valid link

			 * frequency.

 TXB has a single data lane, no need to adjust. */

		/*

		 * Restore the number of active lanes, in case we have gone

		 * through an AFE->TXA streaming sessions.

/* -----------------------------------------------------------------------------

 * HW setup

 Initialize CP Core with RGB888 format. */

 Disable chip powerdown & Enable HDMI Rx block */

 Enable HDCP 1.1 */

 Foreground Channel = A */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 Enable All Terminations */

 ADI Required Write */

 ADI Required Write */

 HPA Manual Enable */

 HPA Asserted */

 Audio Mute Speed Set to Fastest */

 (Smallest Step Size) */

 RGB Out of CP */

 CSC Depends on ip Packets, SDR 444 */

 Luma & Chroma can reach 254d */

 CP-Insert_AV_Code */

 ADI Required Write */

 Enable LLC_DLL & Double LLC Timing */

 LLC/PIX/SPI PINS TRISTATED AUD */

 End of register table */

 Initialize AFE core with YUV8 format. */

 Disable chip powerdown Rx */

 Enable I2C Read Auto-Increment */

 LLC/PIX/AUD/SPI PINS TRISTATED */

 Exit Power Down Mode */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 ADI recommended writes for improved video quality */

 ADI Required Write */

 ADI Required Write */

 ADI Required Write */

 Tri-S Output , PwrDwn 656 pads */

 ITU-R BT.656-4 compatible */

 ADI Required Write */

 Select SH1 */

 ADI Required Write */

 V bit end pos manually in NTSC */

 End of register table */

 Disable CEC Wakeup from power-down mode */

 Enable I2C Read Auto-Increment for consecutive reads */

 Initialize CP and AFE cores. */

 Reset TXA and TXB */

 Disable chip powerdown & Enable HDMI Rx block */

 Conditionally enable TXa and TXb. */

 Use vid_std and v_freq as freerun resolution for CP */

/* -----------------------------------------------------------------------------

 * Suspend / Resume

/* -----------------------------------------------------------------------------

 * i2c driver

 the owner is the same as the i2c_client's driver owner */

 initialize name */

		/*

		 * At least one input endpoint and one output endpoint shall

		 * be defined.

 Store number of CSI-2 lanes used for TXA and TXB. */

 Check if the adapter supports the needed features */

	/*

	 * We can not use container_of to get back to the state with two TXs;

	 * Initialize the TXs's fields unconditionally on the endpoint

	 * presence to access them later.

 Discover and process ports declared by the Device tree endpoints */

 Configure IO Regmap region */

 Configure remaining pages as I2C clients with regmap access */

 SW reset ADV748X to its default values */

 Initialise HDMI */

 Initialise AFE */

 Initialise TXA */

 Initialise TXB */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Analog Devices ADV748X CSI-2 Transmitter

 *

 * Copyright (C) 2017 Renesas Electronics Corp.

/**

 * adv748x_csi2_register_link : Register and link internal entities

 *

 * @tx: CSI2 private entity

 * @v4l2_dev: Video registration device

 * @src: Source subdevice to establish link

 * @src_pad: Pad number of source to link to this @tx

 * @enable: Link enabled flag

 *

 * Ensure that the subdevice is registered against the v4l2_device, and link the

 * source pad to the sink pad of the CSI2 bus entity.

/* -----------------------------------------------------------------------------

 * v4l2_subdev_internal_ops

 *

 * We use the internal registered operation to be able to ensure that our

 * incremental subdevices (not connected in the forward path) can be registered

 * against the resulting video path and media device.

	/*

	 * Link TXA to AFE and HDMI, and TXB to AFE only as TXB cannot output

	 * HDMI.

	 *

	 * The HDMI->TXA link is enabled by default, as is the AFE->TXB one.

 TXB can output AFE signals only. */

 Register link to HDMI for TXA only. */

 The default HDMI output is TXA. */

/* -----------------------------------------------------------------------------

 * v4l2_subdev_video_ops

/* -----------------------------------------------------------------------------

 * v4l2_subdev_pad_ops

 *

 * The CSI2 bus pads are ignorant to the data sizes or formats.

 * But we must support setting the pad formats for format propagation.

/* -----------------------------------------------------------------------------

 * v4l2_subdev_ops

/* -----------------------------------------------------------------------------

 * Subdev module and controls

 Ensure that matching is based upon the endpoint fwnodes */

 Register internal ops for incremental subdev registration */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Analog Devices ADV748X HDMI receiver and Component Processor (CP)

 *

 * Copyright (C) 2017 Renesas Electronics Corp.

/* -----------------------------------------------------------------------------

 * HDMI and CP

 V4L2_DV_BT_CEA_720X480I59_94 - 0.5 MHz */

 V4L2_DV_BT_DMT_1600X1200P60 */

 keep this initialization for compatibility with GCC < 4.4.6 */

 SVGA */

 SXGA */

 VGA */

 XGA */

 UXGA */

 TODO: The colorspace depends on the AVI InfoFrame contents */

 Check that VERT_FILTER and DE_REGEN is locked */

	/*

	 * The high 9 bits store TMDS frequency measurement in MHz

	 * The low 7 bits of TMDS_2 store the 7-bit TMDS fractional frequency

	 * measurement in 1/128 MHz

/*

 * adv748x_hdmi_set_de_timings: Adjust horizontal picture offset through DE

 *

 * HDMI CP uses a Data Enable synchronisation timing reference

 *

 * Vary the leading and trailing edge position of the DE signal output by the CP

 * core. Values are stored as signed-twos-complement in one-pixel-clock units

 *

 * The start and end are shifted equally by the 10-bit shift value.

 POS_HIGH stores bits 8 and 9 of both the start and end */

 The sequence of the writes is important and must be followed */

	/*

	 * When setting cp_vid_std to either 720p, 1080i, or 1080p, the video

	 * will get shifted horizontally to the left in active video mode.

	 * The de_h_start and de_h_end controls are used to centre the picture

	 * correctly

 720p */

 1080i */

 1080p */

/* -----------------------------------------------------------------------------

 * v4l2_subdev_video_ops

	/*

	 * No interrupt handling is implemented yet.

	 * There should be an IRQ when a cable is plugged and the new timings

	 * should be figured out and stored to state.

/* -----------------------------------------------------------------------------

 * v4l2_subdev_pad_ops

 Fall back to a 16:9 aspect ratio */

 Disable the EDID */

/* -----------------------------------------------------------------------------

 * v4l2_subdev_ops

/* -----------------------------------------------------------------------------

 * Controls

 Enable video adjustment first */

 Pattern is 0-indexed. Ctrl Menu is 1-indexed */

 Use our mutex for the controls */

	/*

	 * Todo: V4L2_CID_DV_RX_POWER_PRESENT should also be supported when

	 * interrupts are handled correctly

 Initialise a default 16:9 aspect ratio */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Analog Devices ADV748X 8 channel analog front end (AFE) receiver

 * with standard definition processor (SDP)

 *

 * Copyright (C) 2017 Renesas Electronics Corp.

/* -----------------------------------------------------------------------------

 * SDP

 Select SDP Read-Only Main Map */

 Read status from reg 0x10 of SDP RO Map */

 Standard not valid if there is no signal */

 Field height */

/* -----------------------------------------------------------------------------

 * v4l2_subdev_video_ops

 Set auto detect mode */

 Read detected standard */

 Restore original state */

/* -----------------------------------------------------------------------------

 * v4l2_subdev_pad_ops

	/*

	 * The ADV748x ADC sampling frequency is twice the externally supplied

	 * clock whose frequency is required to be 28.63636 MHz. It oversamples

	 * with a factor of 4 resulting in a pixel rate of 14.3180180 MHz.

 It makes no sense to get the format of the analog sink pads */

 It makes no sense to get the format of the analog sink pads */

/* -----------------------------------------------------------------------------

 * v4l2_subdev_ops

/* -----------------------------------------------------------------------------

 * Controls

 Hue is inverted according to HSL chart */

 Enable/Disable Color bar test patterns */

 Use our mutex for the controls */

 Identify the first connector found as a default input if set */

 Inputs and ports are 1-indexed to match the data sheet */

 Entity pads and sinks are 0-indexed to match the pads */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/media/i2c/ccs/ccs-core.c

 *

 * Generic driver for MIPI CCS/SMIA/SMIA++ compliant camera sensors

 *

 * Copyright (C) 2020 Intel Corporation

 * Copyright (C) 2010--2012 Nokia Corporation

 * Contact: Sakari Ailus <sakari.ailus@linux.intel.com>

 *

 * Based on smiapp driver by Vimarsh Zutshi

 * Based on jt8ev1.c by Vimarsh Zutshi

 * Based on smia-sensor.c by Tuukka Toivonen <tuukkat76@gmail.com>

/*

 * ccs_module_idents - supported camera modules

/*

 *

 * Dynamic Capability Identification

 *

 Handle row descriptors */

 Lane op clock ratio does not apply here. */

/*

 *

 * V4L2 Controls handling

 *

/*

 * Order matters.

 *

 * 1. Bits-per-pixel, descending.

 * 2. Bits-per-pixel compressed, descending.

 * 3. Pixel order, same as in pixel_order_str. Formats for all four pixel

 *    orders must be defined.

 For v4l2_ctrl_s_ctrl_int64() used internally. */

 Exposure limits will be updated soon, use just something here. */

/*

 * For controls that require information on available media bus codes

 * and linke frequencies.

 Figure out which BPP values can be used with which formats. */

 Output from pixel array, including blanking */

/*

 *

 * SMIA++ NVM handling

 *

/*

 *

 * SMIA++ CCI address control

 *

 verify addr change went ok */

/*

 *

 * SMIA++ Mode Control

 *

	/*

	 * How to calculate registers related to strobe length. Please

	 * do not change, or if you do at least know what you're

	 * doing. :-)

	 *

	 * Sakari Ailus <sakari.ailus@linux.intel.com> 2010-10-25

	 *

	 * flash_strobe_length [us] / 10^6 = (tFlash_strobe_width_ctrl

	 *	/ EXTCLK freq [Hz]) * flash_strobe_adjustment

	 *

	 * tFlash_strobe_width_ctrl E N, [1 - 0xffff]

	 * flash_strobe_adjustment E N, [1 - 0xff]

	 *

	 * The formula above is written as below to keep it on one

	 * line:

	 *

	 * l / 10^6 = w / e * a

	 *

	 * Let's mark w * a by x:

	 *

	 * x = w * a

	 *

	 * Thus, we get:

	 *

	 * x = l * e / 10^6

	 *

	 * The strobe width must be at least as long as requested,

	 * thus rounding upwards is needed.

	 *

	 * x = (l * e + 10^6 - 1) / 10^6

	 * -----------------------------

	 *

	 * Maximum possible accuracy is wanted at all times. Thus keep

	 * a as small as possible.

	 *

	 * Calculate a, assuming maximum w, with rounding upwards:

	 *

	 * a = (x + (2^16 - 1) - 1) / (2^16 - 1)

	 * -------------------------------------

	 *

	 * Thus, we also get w, with that a, with rounding upwards:

	 *

	 * w = (x + a - 1) / a

	 * -------------------

	 *

	 * To get limits:

	 *

	 * x E [1, (2^16 - 1) * (2^8 - 1)]

	 *

	 * Substituting maximum x to the original formula (with rounding),

	 * the maximum l is thus

	 *

	 * (2^16 - 1) * (2^8 - 1) * 10^6 = l * e + 10^6 - 1

	 *

	 * l = (10^6 * (2^16 - 1) * (2^8 - 1) - 10^6 + 1) / e

	 * --------------------------------------------------

	 *

	 * flash_strobe_length must be clamped between 1 and

	 * (10^6 * (2^16 - 1) * (2^8 - 1) - 10^6 + 1) / EXTCLK freq.

	 *

	 * Then,

	 *

	 * flash_strobe_adjustment = ((flash_strobe_length *

	 *	EXTCLK freq + 10^6 - 1) / 10^6 + (2^16 - 1) - 1) / (2^16 - 1)

	 *

	 * tFlash_strobe_width_ctrl = ((flash_strobe_length *

	 *	EXTCLK freq + 10^6 - 1) / 10^6 +

	 *	flash_strobe_adjustment - 1) / flash_strobe_adjustment

/* -----------------------------------------------------------------------------

 * Power management

	/*

	 * The sub-device related to the I2C device is always the

	 * source one, i.e. ssds[0].

	/*

	 * Failures to respond to the address change command have been noticed.

	 * Those failures seem to be caused by the sensor requiring a longer

	 * boot time than advertised. An additional 10ms delay seems to work

	 * around the issue, but the SMIA++ I2C write retry hack makes the delay

	 * unnecessary. The failures need to be investigated to find a proper

	 * fix, and a delay will likely need to be added here if the I2C write

	 * retry hack is reverted before the root cause of the boot time issue

	 * is found.

	/*

	 * Currently power/clock to lens are enable/disabled separately

	 * but they are essentially the same signals. So if the sensor is

	 * powered off while the lens is powered on the sensor does not

	 * really see a power off and next time the cci address change

	 * will fail. So do a soft reset explicitly here.

/* -----------------------------------------------------------------------------

 * Video stream management

 Binning configuration */

 Set up PLL */

 Analog crop start coordinates */

 Analog crop end coordinates */

	/*

	 * Output from pixel array, including blanking, is set using

	 * controls below. No need to set here.

 Digital crop */

 Scaling */

 Output size from sensor */

/* -----------------------------------------------------------------------------

 * V4L2 subdev video operations

	/*

	 * It can't use pm_runtime_resume_and_get() here, as the driver

	 * relies at the returned value to detect if the device was already

	 * active or not.

 Device was already active, so don't set controls */

 Restore V4L2 controls to the previously suspended device */

 Keep PM runtime usage_count incremented on success */

 Changes require propagation only on sink pad. */

	/*

	 * Media bus code is changeable on src subdev's source pad. On

	 * other source pads we just get format here.

 Sink pad. Width and height are changeable here. */

/*

 * Calculate goodness of scaled image size compared to expected image

 * size and flags provided.

/*

 * Calculate best scaling ratio and mode for given output resolution.

 *

 * Try all of these: horizontal ratio, vertical ratio and smallest

 * size possible (horizontally).

 *

 * Also try whether horizontal scaler or full scaler gives a better

 * result.

 We're only called on source pads. This function sets scaling. */

 We only implement crop in three places. */

/* -----------------------------------------------------------------------------

 * sysfs attributes

	/*

	 * NVM is still way below a PAGE_SIZE, so we can safely

	 * assume this for now.

/* -----------------------------------------------------------------------------

 * V4L2 subdev core operations

 Module info */

 Sensor info */

 SMIA */

	/*

	 * Some modules have bad data in the lvalues below. Hope the

	 * rvalues have better stuff. The lvalues are module

	 * parameters whereas the rvalues are sensor parameters.

/* -----------------------------------------------------------------------------

 * I2C Driver

 save state for resume */

	/*

	 * Note that we do need to rely on detecting the bus type between CSI-2

	 * D-PHY and CCP2 as the old bindings did not require it.

 guardian */,

 Support old users that may have used "xshutdown" property. */

	/*

	 * Handle Sensor Module orientation on the board.

	 *

	 * The application of H-FLIP and V-FLIP on the sensor is modified by

	 * the sensor orientation on the board.

	 *

	 * For CCS_BOARD_SENSOR_ORIENT_180 the default behaviour is to set

	 * both H-FLIP and V-FLIP for normal operation which also implies

	 * that a set/unset operation for user space HFLIP and VFLIP v4l2

	 * controls will need to be internally inverted.

	 *

	 * Rotation also changes the bayer pattern.

 No OP clock branch */

 We have a scaler or digital crop. */

 prepare PLL configuration input values */

 Use sensor default in PLL mode selection */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/media/i2c/ccs/ccs-quirk.c

 *

 * Generic driver for MIPI CCS/SMIA/SMIA++ compliant camera sensors

 *

 * Copyright (C) 2020 Intel Corporation

 * Copyright (C) 2011--2012 Nokia Corporation

 * Contact: Sakari Ailus <sakari.ailus@linux.intel.com>

 Below 24 gain doesn't have effect at all, */

 but ~59 is needed for full dynamic range */

 Output port control : LVDS ports only */

 0x0307 pll_multiplier maximum value on PLL input 9.6MHz ( 19.2MHz is divided on pre_pll_div) */

 0x0307 pll_multiplier maximum value on PLL input 9.6MHz ( 19.2MHz is divided on pre_pll_div) */

 Adjusting Processing Image Size to Scaler Toshiba Recommendation Setting */

 Horizontal Noise Reduction Control Toshiba Recommendation Setting */

 Horizontal Noise Reduction Control Toshiba Recommendation Setting */

 Analog Gain Control Toshiba Recommendation Setting */

 Analog Gain Control Toshiba Recommendation Setting */

 Analog Gain Control Toshiba Recommendation Setting */

 Pixel Reference Voltage Control Toshiba Recommendation Setting */

 Pixel Reference Voltage Control Toshiba Recommendation Setting */

 Pixel Reference Voltage Control Toshiba Recommendation Setting */

 Pixel Reference Voltage Control Toshiba Recommendation Setting */

 Black Hole Sun Correction Control Toshiba Recommendation Setting */

 Black Hole Sun Correction Control Toshiba Recommendation Setting */

 Black Hole Sun Correction Control Toshiba Recommendation Setting */

 Black Hole Sun Correction Control Toshiba Recommendation Setting */

 Black Hole Sun Correction Control Toshiba Recommendation Setting */

 Read Out Timing Control Toshiba Recommendation Setting */

 Read Out Timing Control Toshiba Recommendation Setting */

 Read Out Timing Control Toshiba Recommendation Setting */

 Black Hole Sun Correction Control Toshiba Recommendation Setting */

 Horizontal Noise Reduction Control Toshiba Recommendation Setting */

 Taken from v03. No idea what the rest are. */

 Taken from v02. No idea what the other two are. */

		/*

		 * 0x3302: clk during frame blanking:

		 * 0x00 - HS mode, 0x01 - LP11

 For digital binning (EQ_MONI) */

 FLASH STROBE enable */

 For control of pulse timing for ADC */

 For analog bias for sensor */

 Adjust the FBC speed */

 Adjust the parameter for logic function */

 For Black sun */

 Ugh. No idea what's this. */

 For control of ADC clock */

 Workaround: allows fast standby to work properly */

 Wait for 1 ms + one line => 2 ms is likely enough */

 Restore it */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/media/i2c/ccs/ccs-reg-access.c

 *

 * Generic driver for MIPI CCS/SMIA/SMIA++ compliant camera sensors

 *

 * Copyright (C) 2020 Intel Corporation

 * Copyright (C) 2011--2012 Nokia Corporation

 * Contact: Sakari Ailus <sakari.ailus@linux.intel.com>

 Inf. */

 Valid cases begin here */

 Valid zero */

 larger than 4294967295 */

	/*

	 * Unbias exponent (note how phloat is now guaranteed to

	 * have 0 in the high bit)

 Extract mantissa, add missing '1' bit and it's in MHz */

 Remove mantissa bias */

/*

 * Read a 8/16/32-bit i2c register.  The value is returned in 'val'.

 * Returns zero if successful, or non-zero otherwise.

 Read a register using 8-bit access only. */

/*

 * Read a 8/16/32-bit i2c register.  The value is returned in 'val'.

 * Returns zero if successful, or non-zero otherwise.

		/*

		 * Due to unknown reason sensor stops responding. This

		 * loop is a temporaty solution until the root cause

		 * is found.

 Write */

/*

 * Write to a 8/16-bit register.

 * Returns zero if successful, or non-zero otherwise.

 \0 */] = { 0 };

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * CCS static data binary parser library

 *

 * Copyright 2019--2020 Intel Corporation

 Size of a single rule */

 Also check there is no extra data */

/**

 * ccs_data_parse - Parse a CCS static data file into a usable in-memory

 *		    data structure

 * @ccsdata:	CCS static data in-memory data structure

 * @data:	CCS static data binary

 * @len:	Length of @data

 * @dev:	Device the data is related to (used for printing debug messages)

 * @verbose:	Whether to be verbose or not

 SPDX-License-Identifier: GPL-2.0-only OR BSD-3-Clause

 Copyright (C) 2019--2020 Intel Corporation */

/*

 * Generated by Documentation/driver-api/media/drivers/ccs/mk-ccs-regs;

 * do not modify.

 Guardian */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * et8ek8_mode.c

 *

 * Copyright (C) 2008 Nokia Corporation

 *

 * Contact: Sakari Ailus <sakari.ailus@iki.fi>

 *          Tuukka Toivonen <tuukkat76@gmail.com>

/*

 * Stingray sensor mode settings for Scooby

 Mode1_poweron_Mode2_16VGA_2592x1968_12.07fps */

/* (without the +1)

 * SPCK       = 80 MHz

 * CCP2       = 640 MHz

 * VCO        = 640 MHz

 * VCOUNT     = 84 (2016)

 * HCOUNT     = 137 (3288)

 * CKREF_DIV  = 2

 * CKVAR_DIV  = 200

 * VCO_DIV    = 0

 * SPCK_DIV   = 7

 * MRCK_DIV   = 7

 * LVDSCK_DIV = 0

 .max_gain = 0, */

 Need to set firstly */

 Strobe and Data of CCP2 delay are minimized. */

 Refined value of Min H_COUNT  */

 Frequency of SPCK setting (SPCK=MRCK) */

 From parallel out to serial out */

 From w/ embedded data to w/o embedded data */

 CCP2 out is from STOP to ACTIVE */

 Initial setting for improvement2 of lower frequency noise */

 Switch of Preset-White-balance (0d:disable / 1d:enable) */

 Switch of blemish correction (0d:disable / 1d:enable) */

 Switch of auto noise correction (0d:disable / 1d:enable) */

 CCP_LVDS_MODE/  */

 Mode1_16VGA_2592x1968_13.12fps_DPCM10-8 */

/* (without the +1)

 * SPCK       = 80 MHz

 * CCP2       = 560 MHz

 * VCO        = 560 MHz

 * VCOUNT     = 84 (2016)

 * HCOUNT     = 128 (3072)

 * CKREF_DIV  = 2

 * CKVAR_DIV  = 175

 * VCO_DIV    = 0

 * SPCK_DIV   = 6

 * MRCK_DIV   = 7

 * LVDSCK_DIV = 0

 .max_gain = 0, */

 <-changed to v14 7E->80 */

 CCP_LVDS_MODE/  */

 Mode3_4VGA_1296x984_29.99fps_DPCM10-8 */

/* (without the +1)

 * SPCK       = 96.5333333333333 MHz

 * CCP2       = 579.2 MHz

 * VCO        = 579.2 MHz

 * VCOUNT     = 84 (2016)

 * HCOUNT     = 133 (3192)

 * CKREF_DIV  = 2

 * CKVAR_DIV  = 181

 * VCO_DIV    = 0

 * SPCK_DIV   = 5

 * MRCK_DIV   = 7

 * LVDSCK_DIV = 0

 .max_gain = 0, */

 CCP_LVDS_MODE/  */

 Mode4_SVGA_864x656_29.88fps */

/* (without the +1)

 * SPCK       = 80 MHz

 * CCP2       = 320 MHz

 * VCO        = 640 MHz

 * VCOUNT     = 84 (2016)

 * HCOUNT     = 166 (3984)

 * CKREF_DIV  = 2

 * CKVAR_DIV  = 200

 * VCO_DIV    = 0

 * SPCK_DIV   = 7

 * MRCK_DIV   = 7

 * LVDSCK_DIV = 1

 .max_gain = 0, */

 CCP_LVDS_MODE/  */

 Mode5_VGA_648x492_29.93fps */

/* (without the +1)

 * SPCK       = 80 MHz

 * CCP2       = 320 MHz

 * VCO        = 640 MHz

 * VCOUNT     = 84 (2016)

 * HCOUNT     = 221 (5304)

 * CKREF_DIV  = 2

 * CKVAR_DIV  = 200

 * VCO_DIV    = 0

 * SPCK_DIV   = 7

 * MRCK_DIV   = 7

 * LVDSCK_DIV = 1

 .max_gain = 0, */

 CCP_LVDS_MODE/  */

 Mode2_16VGA_2592x1968_3.99fps */

/* (without the +1)

 * SPCK       = 80 MHz

 * CCP2       = 640 MHz

 * VCO        = 640 MHz

 * VCOUNT     = 254 (6096)

 * HCOUNT     = 137 (3288)

 * CKREF_DIV  = 2

 * CKVAR_DIV  = 200

 * VCO_DIV    = 0

 * SPCK_DIV   = 7

 * MRCK_DIV   = 7

 * LVDSCK_DIV = 0

 .max_gain = 0, */

 Mode_648x492_5fps */

/* (without the +1)

 * SPCK       = 13.3333333333333 MHz

 * CCP2       = 53.3333333333333 MHz

 * VCO        = 640 MHz

 * VCOUNT     = 84 (2016)

 * HCOUNT     = 221 (5304)

 * CKREF_DIV  = 2

 * CKVAR_DIV  = 200

 * VCO_DIV    = 5

 * SPCK_DIV   = 7

 * MRCK_DIV   = 7

 * LVDSCK_DIV = 1

 .max_gain = 0, */

 CCP_LVDS_MODE/  */

 Mode3_4VGA_1296x984_5fps */

/* (without the +1)

 * SPCK       = 49.4 MHz

 * CCP2       = 395.2 MHz

 * VCO        = 790.4 MHz

 * VCOUNT     = 250 (6000)

 * HCOUNT     = 137 (3288)

 * CKREF_DIV  = 2

 * CKVAR_DIV  = 247

 * VCO_DIV    = 1

 * SPCK_DIV   = 7

 * MRCK_DIV   = 7

 * LVDSCK_DIV = 0

 .max_gain = 0, */

 CCP_LVDS_MODE/  */

 Mode_4VGA_1296x984_25fps_DPCM10-8 */

/* (without the +1)

 * SPCK       = 84.2666666666667 MHz

 * CCP2       = 505.6 MHz

 * VCO        = 505.6 MHz

 * VCOUNT     = 88 (2112)

 * HCOUNT     = 133 (3192)

 * CKREF_DIV  = 2

 * CKVAR_DIV  = 158

 * VCO_DIV    = 0

 * SPCK_DIV   = 5

 * MRCK_DIV   = 7

 * LVDSCK_DIV = 0

 .max_gain = 0, */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * et8ek8_driver.c

 *

 * Copyright (C) 2008 Nokia Corporation

 *

 * Contact: Sakari Ailus <sakari.ailus@iki.fi>

 *          Tuukka Toivonen <tuukkat76@gmail.com>

 *          Pavel Machek <pavel@ucw.cz>

 *

 * Based on code from Toni Leinonen <toni.leinonen@offcode.fi>.

 *

 * This driver is based on the Micron MT9T012 camera imager driver

 * (C) Texas Instruments.

/*

 * This table describes what should be written to the sensor register

 * for each gain value. The gain(index in the table) is in terms of

 * 0.1EV, i.e. 10 indexes in the table give 2 time more gain [0] in

 * the *analog gain, [1] in the digital gain

 *

 * Analog gain [dB] = 20*log10(regvalue/32); 0x20..0x100

 x1 */

 x2 */

 x4 */

 x8 */

 x16 */

 Register definitions */

 msec delay b/w accesses */

/*

 * Register access helpers

 *

 * Read a 8/16/32-bit i2c register.  The value is returned in 'val'.

 * Returns zero if successful, or non-zero otherwise.

 high byte goes out first */

 high byte comes first */

 Write */

 high byte goes out first */

/*

 * A buffered write method that puts the wanted register write

 * commands in smaller number of message lists and passes the lists to

 * the i2c framework

 Create new write messages for all writes */

 Update write count */

/*

 * Write a list of registers to i2c device.

 *

 * The list of registers is terminated by ET8EK8_REG_TERM.

 * Returns zero if successful, or non-zero otherwise.

 Initialize list pointers to the start of the list */

		/*

		 * We have to go through the list to figure out how

		 * many regular writes we have in a row

			/*

			 * Here we check that the actual length fields

			 * are valid

			/*

			 * Increment count of successive writes and

			 * read pointer

 Now we start writing ... */

 ... and then check that everything was OK */

		/*

		 * If we ran into a sleep statement when going through

		 * the list, this is where we snooze for the required time

			/*

			 * ZZZ ...

			 * Update list pointers and cnt and start over ...

/*

 * Write to a 8/16-bit register.

 * Returns zero if successful, or non-zero otherwise.

	/*

	 * Find the mode with the closest image size. The distance between

	 * image sizes is the size in pixels of the non-overlapping regions

	 * between the requested size and the frame-specified size.

	 *

	 * Store both the closest mode that matches the requested format, and

	 * the closest mode for all other formats. The best match is returned

	 * if found, otherwise the best mode with a non-matching format is

	 * returned.

 Put real modes in the beginning. */

 Descending width. */

/* Called to change the V4L2 gain control value. This function

 * rounds and clamps the given value and updates the V4L2 control value.

 * If power is on, also updates the sensor analog and digital gains.

 * gain is in 0.1 EV (exposure value) units.

 FIXME: optimise I2C writes! */

 Values for normal mode */

 Test pattern mode */

/* -----------------------------------------------------------------------------

 * V4L2 controls

 V4L2_CID_GAIN */

 V4L2_CID_PIXEL_RATE */

 V4L2_CID_TEST_PATTERN */

	/*

	 * Calculate average pixel clock per line. Assume buffers can spread

	 * the data over horizontal blanking time. Rounding upwards.

	 * Formula taken from stock Nokia N900 kernel.

	/* Controls set while the power to the sensor is turned off are saved

	 * but not applied to the hardware. Now that we're about to start

	 * streaming apply all the current values to the hardware.

/* --------------------------------------------------------------------------

 * V4L2 subdev operations

 I wish this is a good value */

 Wait 5000 cycles */

 TODO get crc setting from DT */

/* --------------------------------------------------------------------------

 * V4L2 subdev video operations

 Assume that the modes are grouped by frame size. */

 Read the EEPROM window-by-window, each window 8 bytes */

 Set the current window */

 Wait for status bit */

 Read window, 8 bytes at once, and copy to user space */

 Offset within this window */

 Needed to be able to read EEPROM */

/* --------------------------------------------------------------------------

 * sysfs attributes

/* --------------------------------------------------------------------------

 * V4L2 subdev core operations

	/* If the power count is modified from 0 to != 0 or from != 0 to 0,

	 * update the power state.

 Update the power count. */

/* --------------------------------------------------------------------------

 * I2C driver

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Samsung LSI S5C73M3 8M pixel camera driver

 *

 * Copyright (C) 2012, Samsung Electronics, Co., Ltd.

 * Sylwester Nawrocki <s.nawrocki@samsung.com>

 * Andrzej Hajda <a.hajda@samsung.com>

 Set exposure metering/exposure bias */

 V4L2_SCENE_MODE_NONE */

 V4L2_SCENE_MODE_BACKLIGHT */

 V4L2_SCENE_MODE_BEACH_SNOW */

 V4L2_SCENE_MODE_CANDLE_LIGHT */

 V4L2_SCENE_MODE_DAWN_DUSK */

 V4L2_SCENE_MODE_FALL_COLORS */

 V4L2_SCENE_MODE_FIREWORKS */

 V4L2_SCENE_MODE_LANDSCAPE */

 V4L2_SCENE_MODE_NIGHT */

 V4L2_SCENE_MODE_PARTY_INDOOR */

 V4L2_SCENE_MODE_PORTRAIT */

 V4L2_SCENE_MODE_SPORTS */

 V4L2_SCENE_MODE_SUNSET */

 V4L2_SCENE_MODE_TEXT */

	/*

	 * If the device is not powered up by the host driver do

	 * not apply any controls to H/W at this time. Instead

	 * the controls will be restored right after power-up.

 Supported manual ISO values */

 COMM_ISO: 0x0001...0x0004 */

 Supported exposure bias values (-2.0EV...+2.0EV) */

 COMM_EV: 0x0000...0x0008 */

 White balance */

 Exposure (only automatic exposure) */

 Auto focus */

 ISO sensitivity */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Samsung LSI S5C73M3 8M pixel camera driver

 *

 * Copyright (C) 2012, Samsung Electronics, Co., Ltd.

 * Sylwester Nawrocki <s.nawrocki@samsung.com>

 * Andrzej Hajda <a.hajda@samsung.com>

 Digital Core supply (1.2V), CAM_ISP_CORE_1.2V */

 Analog Core supply (1.2V), CAM_SENSOR_CORE_1.2V */

 Regulator input supply (2.8V), CAM_SENSOR_A2.8V */

	"vddio-host",	/* Digital Host I/O power supply (1.8V...2.8V),

	"vddio-cis",	/* Digital CIS I/O power (1.2V...1.8V),

 Lens, CAM_AF_2.8V */

 30 fps */

	/*

	 * Issue repeated START after writing 2 address bytes and

	 * just one STOP only after reading the data bytes.

 Run ARM MCU */

 Check booting status */

 P,M,S and Boot Mode */

 Check SPI status */

 Firmware download over SPI */

 MCU reset */

 Remap */

 MCU restart */

 Run ARM MCU */

 Check booting status */

 Change I/O Driver Current in order to read from F-ROM */

 Offset Setting */

 P,M,S and Boot Mode */

 Check SPI status */

 ARM reset */

 Remap */

 Run ARM MCU */

 Check booting status */

 Check the binary read status */

 ARM reset */

 Remap */

 MCU re-start */

	/*

	 * Number of MIPI CSI-2 data lanes is currently not configurable,

	 * always a default value of 4 lanes is used.

 Static name; NEVER use in new drivers! */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Samsung LSI S5C73M3 8M pixel camera driver

 *

 * Copyright (C) 2012, Samsung Electronics, Co., Ltd.

 * Sylwester Nawrocki <s.nawrocki@samsung.com>

 * Andrzej Hajda <a.hajda@samsung.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * stv6110.c

 *

 * Driver for ST STV6110 satellite tuner IC.

 *

 * Copyright (C) 2009 NetUP Inc.

 * Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>

 Max transfer size done by I2C transfer functions */

BW/2 max=31+5=36 mhz for r8=31*/

 BW/2 min=5Mhz for F=0 */

if 5 < BW/2 < 36*/

 ctrl3, RCCLKOFF = 0 Activate the calibration Clock */

 ctrl3, CF = r8 Set the LPF value */

 stat1, CALRCSTRT = 1 Start LPF auto calibration*/

 Wait for CALRCSTRT == 0 */

 wait for LPF auto calibration */

 RCCLKOFF = 1 calibration done, deactivate the calibration Clock */

 K = (Reference / 1000000) - 16 */

 divisor value for the output clock */

N*/

R*/

p*/

 K = (Reference / 1000000) - 16 */

 BB_GAIN = db/2 */

 DIV4SEL = p*/

 PRESC32ON = presc */

 P = 2 or P = 4 */

 RDIV = r_div_opt */

 NDIV_MSB = MSB(divider) */

 NDIV_LSB, LSB(divider) */

 CALVCOSTRT = 1 VCO Auto Calibration */

 Wait for CALVCOSTRT == 0 */

 wait for VCO auto calibration */

 CF */

 x2 for ZIF tuner BW/2 = F+5 Mhz */

 divisor value for the output clock */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Montage Technology M88DS3103/M88RS6000 demodulator driver

 *

 * Copyright (C) 2013 Antti Palosaari <crope@iki.fi>

 write single register with mask */

 no need for read if whole reg is written */

 write reg val table using reg addr auto increment */

/*

 * m88ds3103b demod has an internal device related to clocking. First the i2c

 * gate must be opened, for one transaction, then writes will be allowed.

/*

 * m88ds3103b demod has an internal device related to clocking. First the i2c

 * gate must be opened, for two transactions, then reads will be allowed.

/*

 * Get the demodulator AGC PWM voltage setting supplied to the tuner.

 CNR */

 more iterations for more accurate estimation */

 use of single register limits max value to 15 dB */

 SNR(X) dB = 10 * ln(X) / ln(10) dB */

 [13:6] */

  [5:0] */

 SNR(X) dB = 10 * log10(X) dB */

 BER */

 measurement ready? */

 restart measurement */

 enough data? */

 TODO: FEC */

 restart measurement */

 TODO: IS THIS NECESSARY ? */

 Write to registers */

reg15 &= 0x01;

reg15 |= (pll_div_fb >> 8) & 0x01;

reg16 = pll_div_fb & 0xFF;

 silence compiler warning */

 reset */

 Disable demod clock path */

 program tuner */

		/*

		 * Use nominal target frequency as tuner driver does not provide

		 * actual frequency used. Carrier offset calculation is not

		 * valid.

 set M88RS6000/DS3103B demod main mclk and ts mclk from tuner die */

 Enable demod clock path */

 set M88DS3103 mclk and ts mclk. */

 0b10 */

 0b01 */

 0b00 */

 0b01 */

 0b11 */

 0b00 */

 program init table */

 TS mode */

 u8tmp1[5:2] => fe[3:0], u8tmp1[1:0] => ea[7:6] */

 u8tmp2[5:0] => ea[5:0] */

 enable/disable 192M LDPC clock */

 Use 32-bit calc as there is no s64 version of DIV_ROUND_CLOSEST() */

 set cold state by default */

 wake up device from sleep */

 firmware status */

 global reset, global diseqc reset, global fec reset */

 cold state - try to download firmware */

 request the firmware, this will block and timeout */

 warm state */

 init stats here in order signal app which stats are supported */

 TS Hi-Z */

 sleep */

 output pin polarity */

 wait DiSEqC TX ready */

 DiSEqC message period is 13.5 ms per byte */

 wait DiSEqC TX ready */

 DiSEqC ToneBurst period is 12.5 ms */

 Open tuner I2C repeater for 1 xfer, closes automatically */

/*

 * XXX: That is wrapper to m88ds3103_probe() via driver core in order to provide

 * proper I2C client for legacy media attach binding.

 * New users must use I2C client binding directly!

 create regmap */

 0x00: chip id[6:0], 0x01: chip ver[7:0], 0x02: chip ver[15:8] */

 0x29 register is defined differently for m88rs6000. */

 set internal tuner address to 0x21 */

 sleep */

 create mux i2c adapter for tuner */

 create dvb_frontend */

 setup callbacks */

 enable i2c repeater for tuner */

 get frontend address */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Driver for Zarlink VP310/MT312/ZL10313 Satellite Channel Decoder



    Copyright (C) 2003 Andreas Oberritter <obi@linuxtv.org>

    Copyright (C) 2008 Matthias Schwarzott <zzam@gentoo.org>





    References:

    http://products.zarlink.com/product_profiles/MT312.htm

    http://products.zarlink.com/product_profiles/SL1935.htm

 Max transfer size done by I2C transfer functions */

 configuration settings */

 10 MHz */

 10.111 MHz */

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

 auto inversion was used */

 symbol rate search was used */

 wake up */

 wait at least 150 usec */

 full reset */

/* Per datasheet, write correct values. 09/28/03 ACCJr.

 enable ADC */

 configure ZL10313 for optimal ADC performance */

 enable MPEG output and ADCs */

 SYS_CLK */

 DISEQC_RATIO */

 different MOCLK polarity */

 TS_SW_LIM */

 is there a better way to wait for message to be transmitted */

 set DISEQC_MODE[2:0] to zero if a return message is expected */

 signal noise ratio */

 qpsk carrier lock */

 viterbi lock */

 byte align lock */

 qpsk lock */

	/* For now we will do this only for the VP310.

	 * It should be better for the mt312 as well,

	 * but tuning will be slower. ACCJr 09/29/03

 Note that 30MS/s should use 90MHz */

 We are running 60MHz */

 We are running 90MHz */

 sr = (u16)(sr * 256.0 / 1000000.0) */

 SYM_RATE */

 VIT_MODE */

 QPSK_CTRL */

 swap I and Q before QPSK demodulation */

 use afc mode */

 GO */

 preserve this bit to not accidentally shutdown ADC */

 reset all registers to defaults */

 reset ADC */

 full shutdown of ADCs, mpeg bus tristated */

 enter standby */

 90 MHz */

 FIXME: adjust freq to real used xtal */

 FIXME as above */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

  /*

     Driver for Philips tda1004xh OFDM Demodulator



     (c) 2003, 2004 Andrew de Quincey & Robert Schlabbach





/*

 * This driver needs external firmware. Please use the commands

 * "<kerneldir>/scripts/get_dvb_firmware tda10045",

 * "<kerneldir>/scripts/get_dvb_firmware tda10046" to

 * download/extract them, and then copy them to /usr/lib/hotplug/firmware

 * or /lib/firmware (depending on configuration of firmware hotplug).

 read a byte and check

 mask if off

 write it out again

 clear code counter */

 work out how much to send this time

 send the chunk

 give the DSP a chance to settle 03/10/05 Hac */

 check upload was OK

 we want to read from the DSP

 don't re-upload unless necessary */

 request the firmware, this will block until someone uploads it */

 reset chip */

 set parameters */

 wait for DSP to initialise */

 DSPREADY doesn't seem to work on the TDA10045H */

 PLL M = 8

 PLL M = 3

 PLL P = N = 0

 PLL P = 0, N = 3

 Note clock frequency is handled implicitly */

 default bandwidth 8 MHz */

 let the PLLs settle */

 reset + wake up chip */

 set GPIO 1 and 3 */

 let the clocks recover from sleep */

 The PLLs need to be reprogrammed after sleep */

 don't re-upload unless necessary */

	/*

	   For i2c normal work, we need to slow down the bus speed.

	   However, the slow down breaks the eeprom firmware load.

	   So, use normal speed for eeprom booting and then restore the

	   i2c speed after that. Tested with MSI TV @nyware A/D board,

	   that comes with firmware version 29 inside their eeprom.



	   It should also be noticed that no other I2C transfer should

	   be in course while booting from eeprom, otherwise, tda10046

	   goes into an instable state. So, proper locking are needed

	   at the i2c bus master.

 Checks if eeprom firmware went without troubles */

 eeprom firmware didn't work. Load one manually. */

 request the firmware, this will block until someone uploads it */

 remain compatible to old bug: try to load with tda10045 image name */

 going to boot from HOST

 convert known FEC values

 unsupported

 convert known FEC values

 unsupported

 wake up the ADC

 tda setup

 disable DSP watchdog timer

 select HP stream

 set polarity of VAGC signal

 enable pulse killer

 enable auto offset

 no frequency offset

 setup MPEG2 TS interface

 setup MPEG2 TS interface

 10^6 VBER measurement bits

 VAGC polarity

 tda setup

 disable DSP watchdog timer

 100 ppm crystal, select HP stream

 enable pulse killer

 AGC setup

 set AGC polarities

 AGC setup

 set AGC polarities

 AGC setup

 set AGC polarities

 AGC setup

 AGC Threshold

 Gain Renormalize

 set AGC polarities

 Turn IF AGC output on

 }

 } AGC min/max values

 }

 }

 IF gain 2, TUN gain 1

 10^6 VBER measurement bits

 MPEG2 interface config

 MPEG2 interface config

 tda1004x_write_mask(state, 0x50, 0x80, 0x80);         
 setup auto offset

 disable agc_conf[2]

 set frequency

 Hardcoded to use auto as much as possible on the TDA10045 as it

 is very unreliable if AUTO mode is _not_ used.

 Set standard params.. or put them to auto

 enable auto

 turn off modulation bits */

 turn off hierarchy bits

 turn off FEC bits

 disable auto

 set HP FEC

 set LP FEC

 set modulation */

 set hierarchy

 set bandwidth

 set inversion

 set guard interval

 set transmission mode

 start the lock

 Only update the properties cache if device is locked */

 inversion status

 bandwidth

 FEC

 modulation */

 transmission mode

 guard interval

 hierarchy

 read status

 decode

 if we don't already have VITERBI (i.e. not LOCKED), see if the viterbi

 is getting anything valid

 read the CBER

 The address 0x20 should be read to cope with a TDA10046 bug

 if we DO have some valid VITERBI output, but don't already have SYNC

 bytes (i.e. not LOCKED), see if the RS decoder is getting anything valid.

 read the VBER

 The CVBER_LUT should be read to cope with TDA10046 hardware bug

 if RS has passed some valid TS packets, then we must be

 getting some SYNC bytes

 success

 determine the register to use

 read it

 read it

 read the UCBLOCKS and reset

 read it in

 The address 0x20 should be read to cope with a TDA10046 bug

 set outputs to tristate */

 invert GPIO 1 and 3 if desired*/

 Drift compensation makes no sense for DVB-T */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * CIMaX SP2/SP2HF (Atmel T90FJR) CI driver

 *

 * Copyright (C) 2014 Olli Salonen <olli.salonen@iki.fi>

 *

 * Heavily based on CIMax2(R) SP2 driver in conjunction with NetUp Dual

 * DVB-S2 CI card (cimax2) with following copyrights:

 *

 *  Copyright (C) 2009 NetUP Inc.

 *  Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>

 *  Copyright (C) 2009 Abylay Ospan <aospan@netup.ru>

	/*

	 * change module access type between IO space and attribute memory

	 * when needed

 implementation of ci_op_cam is device specific */

 RST on */

 RST off */

 not implemented */

 disable bypass and enable TS */

	/*

	 * CAM module INSERT/REMOVE processing. Slow operation because of i2c

	 * transfers. Throttle read to one per sec.

 module A control*/

 auto select mask high A */

 auto select mask low A */

 auto select pattern high A */

 auto select pattern low A */

 memory access time A, 600 ns */

 invert input A */

 RFU */

 RFU */

 module B control*/

 auto select mask high B */

 auto select mask low B */

 auto select pattern high B */

 auto select pattern low B */

 memory access time B, 600 ns */

 invert input B */

 RFU */

 RFU */

 auto select mask high Ext */

 auto select mask low Ext */

 auto select pattern high Ext */

 auto select pattern low Ext */

 RFU */

 destination - module A */

 power control reg, VCC power on */

 RFU */

 int status read only */

 Interrupt Mask Register */

 EXTINT=active-high, INT=push-pull */

 USCG1 */

 ack active low */

 LOCK = 0 */

 unknown */

 synchronization? */

 initialize all regs */

 lock registers */

 power on slots */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *    Support for Legend Silicon GB20600 (a.k.a DMB-TH) demodulator

 *    LGS8913, LGS8GL5, LGS8G75

 *    experimental support LGS8G42, LGS8G52

 *

 *    Copyright (C) 2007-2009 David T.L. Wong <davidtlwong@gmail.com>

 *    Copyright (C) 2008 Sirius International (Hong Kong) Limited

 *    Timothy Lee <timothy.lee@siriushk.com> (for initial work on LGS8GL5)

 LGS8GXX internal helper functions */

 AGC output on, RF_AGC output off; */

 Baseband */

in kHz*/)

 clear FEC self reset */

 FEC auto detect */

 BER test mode */

 turn off auto-detect; manual settings */

 Wait for Code Acquisition Lock */

 Guard Interval */

 Apply detected parameters */

 Fix 8913 time interleaver detection bug */

 lgs8gxx_soft_reset(priv); */

 Enter manual mode */

 A/D input peak-to-peak voltage range */

 LGS8913 demod frontend functions */

 LGS8913 specific */

 LGS8913 specific */

 Setup MPEG output format */

 set frequency */

 start auto lock */

 TODO: get real readings from device */

 bandwidth */

 transmission mode */

 guard interval */

 hierarchy */

 FIXME: copy from tda1004x.c */

 success */

 check if the demod is there */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * E3C EC100 demodulator driver

 *

 * Copyright (C) 2009 Antti Palosaari <crope@iki.fi>

 write single register */

 read single register */

 program tuner */

	/* reg/bw |   6  |   7  |   8

	   -------+------+------+------

	   A 0x1b | 0xa1 | 0xe7 | 0x2c

	   A 0x1c | 0x55 | 0x63 | 0x72

	   -------+------+------+------

	   B 0x1b | 0xb7 | 0x00 | 0x49

 if freq */

 if freq */

 go */

 go */

 bit7 set - have lock */

 bit4 set - have signal */

 bit0 clear - have ~valid signal */

 if counter overflow or clear */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Auvitek AU8522 QAM/8VSB demodulator driver



    Copyright (C) 2008 Steven Toth <stoth@linuxtv.org>

    Copyright (C) 2008 Devin Heitmueller <dheitmueller@linuxtv.org>

    Copyright (C) 2005-2008 Auvitek International, Ltd.

    Copyright (C) 2012 Michael Krufky <mkrufky@linuxtv.org>





/* Despite the name "hybrid_tuner", the framework works just as well for

 16 bit registers, 8 bit values */

		/* We're being asked to manage the gate even though we're

		   not in digital mode.  This can occur if we get switched

		   over to analog mode before the dvb_frontend kernel thread

/* Reset the demod hardware and reset all of the configuration registers

 bail out if we can't control an LED */

 enable GPIO output */

 disable GPIO output */

/* led = 0 | off

 * led = 1 | signal ok

 * led = 2 | signal strong

 * led < 0 | only light led if leds are currently off

 bail out if we can't control an LED */

 if LED is already lit, then leave it as-is */

 toggle LED if changing state */

 start with all leds off */

 set selected LED state */

	/* Clear out any state associated with the digital side of the

	   chip, so that when it gets powered back up it won't think

 Only power down if the digital side is currently using the chip */

		/* We're not in one of the expected power modes, which means

		   that the DVB thread is probably telling us to go to sleep

		   even though the analog frontend has already started using

 turn off led */

 Power down the chip */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Realtek RTL2832 DVB-T demodulator driver

 *

 * Copyright (C) 2012 Thomas Mair <thomas.mair86@gmail.com>

 * Copyright (C) 2012-2014 Antti Palosaari <crope@iki.fi>

	/*

	* PSET_IFFREQ = - floor((IfFreqHz % CrystalFreqHz) * pow(2, 22)

	*		/ CrystalFreqHz)

 initialization values for the demodulator registers */

 load tuner specific settings */

 init stats here in order signal app which stats are supported */

 6 MHz bandwidth */

  7 MHz bandwidth */

  8 MHz bandwidth */

 program tuner */

 If the frontend has get_if_frequency(), use it */

	/* calculate and set resample ratio

	* RSAMP_RATIO = floor(CrystalFreqHz * 7 * pow(2, 22)

	*	/ ConstWithBandwidthMode)

	/* calculate and set cfreq off ratio

	* CFREQ_OFF_RATIO = - floor(ConstWithBandwidthMode * pow(2, 20)

	*	/ (CrystalFreqHz * 7))

 soft reset */

 signal strength */

 read digital AGC */

 CNR */

 [3:2] */

 [6:4] */

 BER */

 report SNR in resolution of 0.1 dB */

/*

 * I2C gate/mux/repeater logic

 * There is delay mechanism to avoid unneeded I2C gate open / close. Gate close

 * is delayed here a little bit in order to see if there is sequence of I2C

 * messages sent to same I2C bus.

 close gate */

 terminate possible gate closing */

 open gate */

 enable / disable PID filter */

 skip invalid PIDs (0x2000) */

 enable / disable PIDs */

 add PID */

 allocate memory for the internal state */

 setup the state */

 create regmap */

 check if the demod is there */

 create muxed i2c adapter for demod tuner bus */

 create dvb_frontend */

 setup callbacks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux-DVB Driver for DiBcom's second generation DiB7000P (PC).

 *

 * Copyright (C) 2005-7 DiBcom (http://www.dibcom.fr/)

 for the I2C transfer */

 for DVBv5 stats */

 dib7090 specific functions */

 0x0400 */

 0x0440 */

 0x0480 */

 0x0500 */

 synchronous fread */

 P_Div_active */

 P_dvsy_sync_mode = 0, P_dvsy_sync_enable=1, P_dvcb_comb_mode=2 */

 by default everything is powered off */

 now, depending on the requested mode, we power on */

 power up everything in the demod */

 dem, cfg, iqc, sad, agc */

 nud */

 Dout */

 just leave power on the control-interfaces: GPIO and (I2C or SDIO) */

 TODO power up either SDIO or I2C */

 TODO following stuff is just converted from the dib7000-driver - check when is used what */

 en_slowAdc = 1 & reset_sladc = 1 */

 read access to make it works... strange ... */

 en_slowAdc = 1 & reset_sladc = 0 */

 ref = Vin1 => Vbg ; sel = Vin0 or Vin3 ; (Vin2 = Vcm) */

 reset_sladc = 1 en_slowAdc = 0 */

	dprintk( "908: %x, 909: %x\n", reg_908, reg_909);

 store the current bandwidth for later use

 internal */

 do the calibration */

 force PLL bypass */

 P_pll_cfg */

 get back old values */

 write new system clk into P_sec_len */

 new internal */

 reset the GPIOs */

 TODO 1031 is P_gpio_od */

 reset the direction bit */

 set the new direction */

 reset the direction bit */

 set the new value */

 auto search configuration

 Equal Lock */

 set ADC level to -16 */

 disable power smoothing */

 restart all parts */

 default */

 impulse noise */

 P_iqc_thsat_ipc = 1 ; P_iqc_win2 = 3 */

-300 fag P_iqc_dect_min = -280 */

 300 fag P_iqc_dect_min = +280 */

 unforce divstr regardless whether i2c enumeration was done or not */

 P_iqc_impnc_on =1 & P_iqc_corr_inh = 1 for impulsive noise */

 P_restart_iqc & P_restart_agc

 AGC */

 Demod AGC loop configuration

 AGC continued */

 2**26 / Fsampling is the unit 1KHz offset */

 IF tuner */

 /100 because of /100 on the unit_khz_dds_val line calc for better accuracy */

 Max dds offset is the half of the demod freq */

 lsb */

 enable adc i & q */

 we are using the wbd - so slow AGC startup */

 force 0 split on WBD and restart AGC */

 default AGC startup */

 wait AGC rough lock time */

 fast split search path after 5sec */

 freeze AGC loop */

 fast split search 0.25kHz */

 split search ended */

 store the split value for the next time */

 set AGC gain start value */

 std AGC loop */

 standard split search */

 LNA startup */

 nfft, guard, qam, alpha */

 do not force tps, search list 0 */

 P_dintl_native, P_dintlv_inv, P_hrch, P_code_rate, P_select_hp */

 offset loop parameters */

 P_dvsy_sync_wait */

 deactivate the possibility of diversity reception if extended interleaver */

 channel estimation fine configuration */

 P_adp_regul_cnt 0.04 */

 P_adp_noise_cnt -0.002 */

 P_adp_regul_ext 0.02 */

 P_adp_noise_ext -0.001 */

 P_adp_regul_cnt 0.07 */

 P_adp_noise_cnt -0.004 */

 P_adp_regul_ext 0.02 */

 P_adp_noise_ext -0.002 */

 P_adp_regul_cnt 0.3 */

 P_adp_noise_cnt -0.01 */

 P_adp_regul_ext 0.1 */

 P_adp_noise_ext -0.002 */

 restart demod

 P_ctrl_inh_cor=0, P_ctrl_alpha_cor=4, P_ctrl_inh_isi=0, P_ctrl_alpha_isi=3, P_ctrl_inh_cor4=1, P_ctrl_alpha_cor4=3 */

 never achieved a lock with that bandwidth so far - wait for osc-freq to update

 offset loop parameters */

 P_timf_alpha, P_corm_alpha=6, P_corm_thres=0x80 */

 timf_a(6xxx) */

 P_ctrl_freeze_pha_shift=0, P_ctrl_pha_off_max */

 P_ctrl_sfreq_inh=0, P_ctrl_sfreq_step */

 restart the fec */

 we achieved a lock - it's time to update the osc freq

 P_timf_alpha += 2 */

 case 2: fep->transmission_mode = TRANSMISSION_MODE_4K; break; */

 as long as the frontend_param structure is fixed for hierarchical transmission I refuse to use it */

 (tps >> 13) & 0x1 == hrch is used, (tps >> 10) & 0x7 == alpha */

 native interleaver: (dib7000p_read_word(state, 464) >>  5) & 0x1 */

 maybe the parameter has been changed */

 start up the AGC */

 make this a config parameter */

/*

 * Table to estimate signal strength in dBm.

 * This table should be empirically determinated by measuring the signal

 * strength generated by a RF generator directly connected into

 * a device.

 * This table was determinated by measuring the signal strength generated

 * by a DTA-2111 RF generator directly connected into a dib7000p device

 * (a Hauppauge Nova-TD stick), using a good quality 3 meters length

 * RC6 cable and good RC6 connectors, connected directly to antenna 1.

 * As the minimum output power of DTA-2111 is -31dBm, a 16 dBm attenuator

 * were used, for the lower power values.

 * The real value can actually be on other devices, or even at the

 * second antena input, depending on several factors, like if LNA

 * is enabled or not, if diversity is enabled, type of connectors, etc.

 * Yet, it is better to use this measure in dB than a random non-linear

 * percentage value, especially for antenna adjustments.

 * On my tests, the precision of the measure using this table is about

 * 0.5 dB, with sounds reasonable enough to adjust antennas.

 If value is identical, no need to interpolate */

 Linear interpolation between the two (x,y) points */

 FIXME: may require changes - this one was borrowed from dib8000 */

	/*

	 * FIXME: check if the math makes sense. If so, fill the

	 * interleaving var.

 If calculus gets wrong, wait for 1s for the next stats */

 Estimate the period for the total bit rate */

 Get Signal strength */

 UCB/BER/CNR measures require lock */

 Check if time for stats was elapsed */

 Get SNR */

 Get UCB measures */

 Estimate the number of packets based on bitrate */

 Get post-BER measures */

 Get PER measures */

 designated i2c address */

 sram lead in, rdy */

 sram lead in, rdy */

 start diversity to pull_down div_str - just for i2c-enumeration */

 set new i2c address and force divstart */

 unforce divstr

 deactivate div - it was just for i2c-enumeration */

 index of the LUT */

 else = Tuner regs to ignore : DIG_CFG, CTRL_RF_LT, PLL_CFG, PWM1_REG, ADCCLK, DIG_CFG_3; SLEEP_EN... */

 write */

 read */

 write */

 write */

 Set the proper input */

 R/W access via APB */

 R/W access via SERPAR  */

 drive host bus 2, 3, 4 */

 drive host bus 5,6 */

 drive host bus 7, 8, 9 */

 drive host bus 10, 11 */

 drive host bus 12, 13, 14 */

 If the input mode is MPEG do not divide the serial clock */

 only use the internal way - not the diversity input */

 Do not divide the serial clock of MPEG MUX */

 in SERIAL MODE in case input mode MPEG is used */

 enSerialClkDiv2 == 1 ? */

 force enSerialClkDiv2 = 0 */

 both ways */

 only the diversity input */

 Use Smooth block */

 Use Smooth block */

 Using Smooth block only */

 Using Smooth block because not supported by new Mpeg Mux bloc */

 synchronous fread */

	/* Ensure the output mode remains at the previous default if it's

	 * not specifically set by the caller.

 sram lead in, rdy */

	/* FIXME: make sure the dev.parent field is initialized, or else

	   request_firmware() will hit an OOPS (this should be moved somewhere

 init 7090 tuner adapter */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux-DVB Driver for DiBcom's DiB0070 base-band RF Tuner.

 *

 * Copyright (C) 2005-9 DiBcom (http://www.dibcom.fr/)

 *

 * This code is more or less generated from another driver, please

 * excuse some codingstyle oddities.

 for the captrim binary search */

 for the I2C transfer */

 sharpen the BB filter in ISDB-T to have higher immunity to adjacent channels */

 for every frequency less than or equal to that field: this information is correct */

 for every frequency less than or equal to that field: this information is correct */

 UHF */

 LBAND */

 SBAND */

 FM below 92MHz cannot be tuned */

 VHF */

 UHF */

 LBAND or everything higher than UHF */

 VHF */

 UHF */

 LBAND or everything higher than UHF */

 VHF */

 UHF */

 LBAND or everything higher than UHF */

 1ms is the default delay most of the time */

 find the right one */

 find the right one */

 we are already tuned to this frequency - the configuration is correct  */

 wakeup time */

 find the right one */

 tuner finished, time to call again infinite */

 find the right one */

 P1F or not */

      .get_bandwidth = dib0070_get_bandwidth

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drxd_firm.c : DRXD firmware tables

 *

 * Copyright (C) 2006-2007 Micronas

 TODO: generate this file with a script from a settings file */

/* Contains A2 firmware version: 1.4.2

 * Contains B1 firmware version: 3.3.33

 * Contains settings from driver 1.4.23

 Is written via block write, must be little endian */

 HI firmware patches */

 size of this function in instruction words */

 0         -> ring.rdy;           */

 r0rami.dt -> ring.xba;           */

 r0rami.dt -> ring.xad;           */

 HI_RA_RAM_USR_BEGIN -> ring.iad; */

 (long immediate)                 */

 r0rami.dt -> ring.len;           */

 r0rami.dt -> ring.ctl;           */

 0         -> ring.rdy;           */

 0         -> jumps.ad;           */

/* Pins D0 and D1 of the parallel MPEG output can be used

 size of this function in instruction words */

 D0 Version */

 MASK      -> reg0.dt;                        */

 (EC__BLK << 6) + EC_OC_REG__BNK -> ring.xba; */

 EC_OC_REG_OC_MPG_SIO__A -> ring.xad;         */

 M_BNK_ID_DAT -> ring.iba;                    */

 &data     -> ring.iad;                       */

 0         -> ring.len;                       */

 M_RC_CTR_SWAP | M_RC_CTR_READ -> ring.ctl;   */

 0         -> ring.rdy;                       */

 &data+1   -> w0ram.ad;                       */

 -1        -> w0ram.dt;                       */

 &data+1   -> ring.iad;                       */

 M_RC_CTR_SWAP | M_RC_CTR_WRITE -> ring.ctl;  */

 0         -> ring.rdy;                       */

 EC_OC_REG_OCR_MPG_USR_DAT__A -> ring.xad;    */

 M_RC_CTR_SWAP | M_RC_CTR_READ -> ring.ctl;   */

 0         -> ring.rdy;                       */

 EC_OC_REG_OC_MPG_SIO__A -> ring.xad;         */

 &data     -> ring.iad;                       */

 M_RC_CTR_SWAP | M_RC_CTR_WRITE -> ring.ctl;  */

 0         -> ring.rdy;                       */

 &data+1   -> w0ram.ad;                       */

 r0ram.dt  -> and.op;                         */

 reg0.dt   -> and.tr;                         */

 and.rs    -> add.op;                         */

 DEF_DEV_ID -> add.tr;                        */

 add.rs    -> add.tr;                         */

 add.rs    -> reg0.dt;                        */

 reg0.dt   -> w0ram.dt;                       */

 SLV0_BASE -> w0rami.ad;                      */

 0         -> w0rami.dt;                      */

 reg0.dt   -> w0rami.dt;                      */

 SLV1_BASE -> w0rami.ad;                      */

 0         -> w0rami.dt;                      */

 reg0.dt   -> w0rami.dt;                      */

 CMD_BASE  -> w0rami.ad;                      */

 0         -> w0rami.dt;                      */

 0         -> w0rami.dt;                      */

 0         -> w0rami.dt;                      */

 M_IC_SEL_PT1 -> i2c.sel;                     */

 M_IC_CMD_RESET -> i2c.cmd;                   */

 M_IC_SEL_PT0 -> i2c.sel;                     */

 M_IC_CMD_RESET -> i2c.cmd;                   */

 0x2F      -> jumps.ad;                       */

 Force quick and dirty reset */

 D0,D1 Version */

 MASK      -> reg0.dt;                        */

 (EC__BLK << 6) + EC_OC_REG__BNK -> ring.xba; */

 EC_OC_REG_OC_MPG_SIO__A -> ring.xad;         */

 M_BNK_ID_DAT -> ring.iba;                    */

 &data     -> ring.iad;                       */

 0         -> ring.len;                       */

 M_RC_CTR_SWAP | M_RC_CTR_READ -> ring.ctl;   */

 0         -> ring.rdy;                       */

 &data+1   -> w0ram.ad;                       */

 -1        -> w0ram.dt;                       */

 &data+1   -> ring.iad;                       */

 M_RC_CTR_SWAP | M_RC_CTR_WRITE -> ring.ctl;  */

 0         -> ring.rdy;                       */

 EC_OC_REG_OCR_MPG_USR_DAT__A -> ring.xad;    */

 M_RC_CTR_SWAP | M_RC_CTR_READ -> ring.ctl;   */

 0         -> ring.rdy;                       */

 EC_OC_REG_OC_MPG_SIO__A -> ring.xad;         */

 &data     -> ring.iad;                       */

 M_RC_CTR_SWAP | M_RC_CTR_WRITE -> ring.ctl;  */

 0         -> ring.rdy;                       */

 &data+1   -> w0ram.ad;                       */

 r0ram.dt  -> and.op;                         */

 reg0.dt   -> and.tr;                         */

 and.rs    -> add.op;                         */

 DEF_DEV_ID -> add.tr;                        */

 add.rs    -> add.tr;                         */

 add.rs    -> reg0.dt;                        */

 reg0.dt   -> w0ram.dt;                       */

 SLV0_BASE -> w0rami.ad;                      */

 0         -> w0rami.dt;                      */

 reg0.dt   -> w0rami.dt;                      */

 SLV1_BASE -> w0rami.ad;                      */

 0         -> w0rami.dt;                      */

 reg0.dt   -> w0rami.dt;                      */

 CMD_BASE  -> w0rami.ad;                      */

 0         -> w0rami.dt;                      */

 0         -> w0rami.dt;                      */

 0         -> w0rami.dt;                      */

 M_IC_SEL_PT1 -> i2c.sel;                     */

 M_IC_CMD_RESET -> i2c.cmd;                   */

 M_IC_SEL_PT0 -> i2c.sel;                     */

 M_IC_CMD_RESET -> i2c.cmd;                   */

 0x2F      -> jumps.ad;                       */

 Force quick and dirty reset */

 CE_REG_FR_TREAL00__A */

 CE_REG_FR_TIMAG00__A */

 CE_REG_FR_TREAL01__A */

 CE_REG_FR_TIMAG01__A */

 CE_REG_FR_TREAL02__A */

 CE_REG_FR_TIMAG02__A */

 CE_REG_FR_TREAL03__A */

 CE_REG_FR_TIMAG03__A */

 CE_REG_FR_TREAL04__A */

 CE_REG_FR_TIMAG04__A */

 CE_REG_FR_TREAL05__A */

 CE_REG_FR_TIMAG05__A */

 CE_REG_FR_TREAL06__A */

 CE_REG_FR_TIMAG06__A */

 CE_REG_FR_TREAL07__A */

 CE_REG_FR_TIMAG07__A */

 CE_REG_FR_TREAL08__A */

 CE_REG_FR_TIMAG08__A */

 CE_REG_FR_TREAL09__A */

 CE_REG_FR_TIMAG09__A */

 CE_REG_FR_TREAL10__A */

 CE_REG_FR_TIMAG10__A */

 CE_REG_FR_TREAL11__A */

 CE_REG_FR_TIMAG11__A */

 CE_REG_FR_MID_TAP__A */

 CE_REG_FR_SQS_G00__A */

 CE_REG_FR_SQS_G01__A */

 CE_REG_FR_SQS_G02__A */

 CE_REG_FR_SQS_G03__A */

 CE_REG_FR_SQS_G04__A */

 CE_REG_FR_SQS_G05__A */

 CE_REG_FR_SQS_G06__A */

 CE_REG_FR_SQS_G07__A */

 CE_REG_FR_SQS_G08__A */

 CE_REG_FR_SQS_G09__A */

 CE_REG_FR_SQS_G10__A */

 CE_REG_FR_SQS_G11__A */

 CE_REG_FR_SQS_G12__A */

 CE_REG_FR_RIO_G00__A */

 CE_REG_FR_RIO_G01__A */

 CE_REG_FR_RIO_G02__A */

 CE_REG_FR_RIO_G03__A */

 CE_REG_FR_RIO_G04__A */

 CE_REG_FR_RIO_G05__A */

 CE_REG_FR_RIO_G06__A */

 CE_REG_FR_RIO_G07__A */

 CE_REG_FR_RIO_G08__A */

 CE_REG_FR_RIO_G09__A */

 CE_REG_FR_RIO_G10__A */

 CE_REG_FR_MODE__A     */

 CE_REG_FR_SQS_TRH__A  */

 CE_REG_FR_RIO_GAIN__A */

 CE_REG_FR_BYPASS__A   */

 CE_REG_FR_PM_SET__A   */

 CE_REG_FR_ERR_SH__A   */

 CE_REG_FR_MAN_SH__A   */

 CE_REG_FR_TAP_SH__A   */

 FE_AD_REG_PD__A          */

 FE_AD_REG_INVEXT__A      */

 FE_AD_REG_CLKNEG__A      */

 FE_AG_REG_DCE_AUR_CNT__A */

 FE_AG_REG_DCE_RUR_CNT__A */

 FE_AG_REG_ACE_AUR_CNT__A */

 FE_AG_REG_ACE_RUR_CNT__A */

 FE_AG_REG_EGC_FLA_RGN__A */

 FE_AG_REG_EGC_SLO_RGN__A */

 FE_AG_REG_EGC_JMP_PSN__A */

 FE_AG_REG_EGC_FLA_INC__A */

 FE_AG_REG_EGC_FLA_DEC__A */

 FE_AG_REG_GC1_AGC_MAX__A */

 FE_AG_REG_GC1_AGC_MIN__A */

 FE_AG_REG_IND_WIN__A     */

 FE_AG_REG_IND_THD_LOL__A */

 FE_AG_REG_IND_THD_HIL__A */

 FE_AG_REG_IND_DEL__A     don't care */

 FE_AG_REG_IND_PD1_WRI__A */

 FE_AG_REG_PDA_AUR_CNT__A */

 FE_AG_REG_PDA_RUR_CNT__A */

 FE_AG_REG_PDA_AVE_DAT__A don't care  */

 FE_AG_REG_PDC_RUR_CNT__A */

 FE_AG_REG_PDC_SET_LVL__A */

 FE_AG_REG_PDC_FLA_RGN__A */

 FE_AG_REG_PDC_JMP_PSN__A don't care  */

 FE_AG_REG_PDC_FLA_STP__A */

 FE_AG_REG_PDC_SLO_STP__A */

 FE_AG_REG_PDC_PD2_WRI__A don't care  */

 FE_AG_REG_PDC_MAP_DAT__A don't care  */

 FE_AG_REG_PDC_MAX__A     */

 FE_AG_REG_TGA_AUR_CNT__A */

 FE_AG_REG_TGA_RUR_CNT__A */

 FE_AG_REG_TGA_AVE_DAT__A don't care  */

 FE_AG_REG_TGC_RUR_CNT__A */

 FE_AG_REG_TGC_SET_LVL__A */

 FE_AG_REG_TGC_FLA_RGN__A */

 FE_AG_REG_TGC_JMP_PSN__A don't care  */

 FE_AG_REG_TGC_FLA_STP__A */

 FE_AG_REG_TGC_SLO_STP__A */

 FE_AG_REG_TGC_MAP_DAT__A don't care  */

 FE_AG_REG_FGA_AUR_CNT__A */

 FE_AG_REG_FGA_RUR_CNT__A */

 FE_AG_REG_BGC_FGC_WRI__A */

 FE_AG_REG_BGC_CGC_WRI__A */

 FE_FD_REG_SCL__A         */

 FE_FD_REG_MAX_LEV__A     */

 FE_FD_REG_NR__A          */

 FE_CF_REG_SCL__A         */

 FE_CF_REG_MAX_LEV__A     */

 FE_CF_REG_NR__A          */

 FE_CF_REG_IMP_VAL__A     */

 FE_CF_REG_MEAS_VAL__A    */

 FE_CU_REG_FRM_CNT_RST__A */

 FE_CU_REG_FRM_CNT_STR__A */

 with PGA */

   WR16COND( DRXD_WITH_PGA, FE_AG_REG_AG_PGA_MODE__A   , 0x0004), */

 without PGA */

   WR16COND( DRXD_WITHOUT_PGA, FE_AG_REG_AG_PGA_MODE__A   , 0x0001), */

   WR16(FE_AG_REG_AG_AGC_SIO__A,  (extAttr -> FeAgRegAgAgcSio), 0x0000 );*/

   WR16(FE_AG_REG_AG_PWD__A        ,(extAttr -> FeAgRegAgPwd), 0x0000 );*/

 Activate measurement, activate scale */

 with PGA */

      WR16(B_FE_AG_REG_AG_PGA_MODE__A   , 0x0000, 0x0000); */

 without PGA */

/*      WR16(B_FE_AG_REG_AG_PGA_MODE__A   ,

*added HS 23-05-2005 */
added HS 23-05-2005 */

   WR16(B_FE_AG_REG_AG_PWD__A    ,(extAttr -> FeAgRegAgPwd), 0x0000 );*/

 RF-AGC setup */

 CP_REG_BR_SPL_OFFSET__A  */

 CP_REG_BR_STR_DEL__A     */

 CP_REG_RT_ANG_INC0__A    */

 CP_REG_RT_ANG_INC1__A    */

 CP_REG_RT_DETECT_ENA__A  */

 CP_REG_RT_DETECT_TRH__A  */

 CP_REG_AC_NEXP_OFFS__A   */

 CP_REG_AC_AVER_POW__A    */

 CP_REG_AC_MAX_POW__A     */

 CP_REG_AC_WEIGHT_MAN__A  */

 CP_REG_AC_WEIGHT_EXP__A  */

 CP_REG_AC_AMP_MODE__A    */

 CP_REG_AC_AMP_FIX__A     */

 CE_REG_AVG_POW__A        */

 CE_REG_MAX_POW__A        */

 CE_REG_ATT__A            */

 CE_REG_NRED__A           */

 CE_REG_NE_ERR_SELECT__A  */

 CE_REG_NE_TD_CAL__A      */

 CE_REG_NE_MIXAVG__A      */

 CE_REG_NE_NUPD_OFS__A    */

 CE_REG_PE_NEXP_OFFS__A   */

 CE_REG_PE_TIMESHIFT__A   */

 CE_REG_TP_A0_TAP_NEW__A       */

 CE_REG_TP_A0_TAP_NEW_VALID__A */

 CE_REG_TP_A0_MU_LMS_STEP__A   */

 CE_REG_TP_A1_TAP_NEW__A        */

 CE_REG_TP_A1_TAP_NEW_VALID__A  */

 CE_REG_TP_A1_MU_LMS_STEP__A    */

 CE_REG_FI_SHT_INCR__A          */

 CE_REG_FI_EXP_NORM__A          */

 CE_REG_IR_INPUTSEL__A          */

 CE_REG_IR_STARTPOS__A          */

 CE_REG_IR_NEXP_THRES__A        */

 EQ_REG_OT_QNT_THRES0__A        */

 EQ_REG_OT_QNT_THRES1__A        */

 EQ_REG_OT_CSI_STEP__A          */

 EQ_REG_OT_CSI_OFFSET__A        */

 Reset packet sync bytes in EC_VD ram */

 Reset packet sync bytes in EC_RS ram */

 EC_SB_REG_CSI_HI__A            */

 EC_SB_REG_CSI_LO__A            */

 EC_SB_REG_SMB_TGL__A           */

 EC_SB_REG_SNR_HI__A            */

 EC_SB_REG_SNR_MID__A           */

 EC_SB_REG_SNR_LO__A            */

 EC_RS_REG_REQ_PCK_CNT__A       */

 EC_RS_REG_VAL__A               */

 EC_OC_REG_TMD_TOP_MODE__A      */

 EC_OC_REG_TMD_TOP_CNT__A       */

 EC_OC_REG_TMD_HIL_MAR__A       */

 EC_OC_REG_TMD_LOL_MAR__A       */

 EC_OC_REG_TMD_CUR_CNT__A       */

 EC_OC_REG_AVR_ASH_CNT__A       */

 EC_OC_REG_AVR_BSH_CNT__A       */

 EC_OC_REG_RCN_MODE__A          */

 EC_OC_REG_RCN_CRA_LOP__A       */

 EC_OC_REG_RCN_CRA_HIP__A       */

 EC_OC_REG_RCN_CST_LOP__A       */

 EC_OC_REG_RCN_CST_HIP__A       */

 EC_OC_REG_RCN_SET_LVL__A       */

 EC_OC_REG_RCN_GAI_LVL__A       */

 EC_OC_REG_RCN_CLP_LOP__A       */

 EC_OC_REG_RCN_CLP_HIP__A       */

 Output zero on monitorbus pads, power saving */

   CHK_ERROR(ResetECRAM(demod)); */

 Reset packet sync bytes in EC_VD ram */

 Reset packet sync bytes in EC_RS ram */

 Needed because shadow registers do not have correct default value */

   CHK_ERROR(ResetECRAM(demod)); */

 Reset packet sync bytes in EC_VD ram */

 Reset packet sync bytes in EC_RS ram */

 EC_OC_REG_TMD_TOP_MODE__A      */

 EC_OC_REG_TMD_TOP_CNT__A       */

 EC_OC_REG_TMD_HIL_MAR__A       */

 EC_OC_REG_TMD_LOL_MAR__A       */

 EC_OC_REG_TMD_CUR_CNT__A       */

 EC_OC_REG_AVR_ASH_CNT__A       */

 EC_OC_REG_AVR_BSH_CNT__A       */

 EC_OC_REG_RCN_MODE__A          */

 EC_OC_REG_RCN_CRA_LOP__A       */

 EC_OC_REG_RCN_CRA_HIP__A       */

 EC_OC_REG_RCN_CST_LOP__A       */

 EC_OC_REG_RCN_CST_HIP__A       */

 EC_OC_REG_RCN_SET_LVL__A       */

 EC_OC_REG_RCN_GAI_LVL__A       */

 EC_OC_REG_RCN_CLP_LOP__A       */

 EC_OC_REG_RCN_CLP_HIP__A       */

 Output zero on monitorbus pads, power saving */

   CHK_ERROR(ResetECRAM(demod)); */

 Reset packet sync bytes in EC_VD ram */

 Reset packet sync bytes in EC_RS ram */

 SC is not started, this is done in SetChannels() */

 Diversity settings */

 Start demod ********* RF in , diversity out **************************** */

* CE to PASS mux */
 CE to PASS mux */

 End demod *********** combining RF in and diversity in, MPEG TS out **** */

 disable near/far; switch on timing slave mode */

 MV from CtrlDiversity */

 combining disabled */

 Start demod, RF in and diversity out, no combining */

 EQ to MB out */

 CE to PASS mux */

 End demod, combining RF in and diversity in, MPEG TS out */

 disable impulse noise cruncher */

 clock inversion (for sohard board) */

 apparently no mb delay matching is best */

 org = 0x81 combining enabled */

 also used ok for 7 MHz */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	TDA665x tuner driver

	Copyright (C) Manu Abraham (abraham.manu@gmail.com)



 restore frequency */

 VHF-L */

 fc, Low Band, 47 - 153 MHz */

 83uA */

 122uA */

 163uA */

 254uA */

 VHF-H */

 fc, Mid Band, 153 - 438 MHz */

 UHF */

 fc, High Band, 438 - 862 MHz */

 Set params */

 sleep for some time */

 check status */

 cache successful state */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * horus3a.h

 *

 * Sony Horus3A DVB-S/S2 tuner driver

 *

 * Copyright 2012 Sony Corporation

 * Copyright (C) 2014 NetUP Inc.

 * Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>

 * Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

 IQ Generator disable */

 MDIV_EN = 0 */

 VCO disable preparation */

 VCO buffer disable */

 VCO calibration disable */

 Power save setting (xtal is not stopped) */

 LNA is Disabled */

 0x11 - 0x12 */

 Leave power save */

 LNA is Disabled */

 0x11 - 0x12 */

 VCO buffer enable */

 VCO calibration enable */

 MDIV_EN = 1 */

 frequency should be X MHz (X : integer) */

 Assumed that fREF == 1MHz (1000kHz) */

 15 bit */

 F_CTL=11100 G_CTL=001 */

 F_CTL=11000 G_CTL=010 */

 F_CTL=10100 G_CTL=010 */

 F_CTL=10000 G_CTL=011 */

 F_CTL=01100 G_CTL=100 */

 F_CTL=01010 G_CTL=100 */

 F_CTL=00111 G_CTL=101 */

 F_CTL=00100 G_CTL=010 */

 F_CTL=00010 G_CTL=001 */

 F_CTL=00000 G_CTL=000 */

 LPF cutoff frequency setting */

		/*

		 * rolloff = 0.35

		 * SR <= 4.3

		 * fc_lpf = 5

		 * 4.3 < SR <= 10

		 * fc_lpf = SR * (1 + rolloff) / 2 + SR / 2 =

		 *	SR * 1.175 = SR * (47/40)

		 * 10 < SR

		 * fc_lpf = SR * (1 + rolloff) / 2 + 5 =

		 *	SR * 0.675 + 5 = SR * (27/40) + 5

		 * NOTE: The result should be round up.

 5 <= fc_lpf <= 36 */

		/*

		 * SR <= 4.5:

		 * fc_lpf = 5

		 * 4.5 < SR <= 10:

		 * fc_lpf = SR * (1 + rolloff) / 2 + SR / 2

		 * 10 < SR:

		 * fc_lpf = SR * (1 + rolloff) / 2 + 5

		 * NOTE: The result should be round up.

 5 <= fc_lpf <= 36 is valid */

 0x00 - 0x04 */

 Write G_CTL, F_CTL */

 Write LPF cutoff frequency */

 Start Calibration */

 IQ Generator enable */

 tuner stabilization time */

 Store tuned frequency to the struct */

 wait 4ms after power on */

 IQ Generator disable */

 REF_R = Xtal Frequency */

 0x6 - 0x8 */

 IQ Out = Single Ended */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * stv0367.c

 *

 * Driver for ST STV0367 DVB-T & DVB-C demodulator IC.

 *

 * Copyright (C) ST Microelectronics.

 * Copyright (C) 2010,2011 NetUP Inc.

 * Copyright (C) 2010,2011 Igor M. Liplianin <liplianin@netup.ru>

 Max transfer size done by I2C transfer functions */

 DVB-C */

 results */

 channel found		*/

 found frequency (in kHz)	*/

 found symbol rate (in Bds)	*/

 Spectrum Inversion	*/

 status reg to poll for FEC Lock */

 DVB-T */

 mode 2K or 8K */

  current search spectrum */

 force mode/guard */

 channel width 6, 7 or 8 in MHz */

 channel width used during previous lock */

 echo position */

 config settings */

 DVB-C */

 DVB-T */

 flags for operation control */

 RF Level (for RF AGC->AGC1) Lookup Table, depends on the board and tuner.*/

AGC1*/

RF(dbm)*/

 RF Level (for IF AGC->AGC2) Lookup Table, depends on the board and tuner.*/

AGC2*/

RF(dbm)*/

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

 Currently, unused */

	/* note on regs: R367TER_* and R367CAB_* defines each point to

	 * 0xf0d8, so just use R367TER_ for both cases

 PLLMDIV: 27, PLLNDIV: 232 */

 set internal freq to 53.125MHz */

 hz -> khz */

 CELL 1 COEFFS 27M*/

 CELL 2 COEFFS */

 CELL 3 COEFFS */

 CELL 4 COEFFS */

 CELL 5 COEFFS */

 CELL 6 COEFFS */

 CELL 1 COEFFS 25M*/

 CELL 6 COEFFS */

 30M */

 CELL 1 COEFFS 27M*/

 CELL 2 COEFFS */

 CELL 3 COEFFS */

 CELL 4 COEFFS */

 CELL 5 COEFFS */

 CELL 6 COEFFS */

25M*/

 30M */

 CELL 1 COEFFS 27M*/

 CELL 2 COEFFS */

 CELL 3 COEFFS */

 CELL 4 COEFFS */

 CELL 5 COEFFS */

 CELL 6 COEFFS */

25M*/

 30M */

 master clock frequency (Hz) */

 equivalent to Xtal 25M on 362*/

 equivalent to Xtal 27M on 362*/

 equivalent to Xtal 30M on 362*/

 Lock detect 1 */

 Lock detect 2 */

 Lock detect 3 */

 Lock detect 4 */

	msleep(local_tempo);  */

2k mode*/

8k mode*/

4k mode*/

drives to NOCPAMP	*/

dprintk("CPAMPvalue= %d at wd=%d\n",CPAMPvalue,wd); */

 suggest 2k 1/4 */

		else { /*

			if chip locked on wrong mode first try,

guard=stv0367_readbits(state,F367TER_SYR_GUARD); */

	/*suppress EPQ auto for SYR_GARD 1/16 or 1/32

reset fec an reedsolo FOR 367 only*/

	u_var4=stv0367_readbits(state,F367TER_TSFIFO_LINEOK); */

while ( ((!u_var1)||(!u_var2)||(!u_var3)||(!u_var4))  && (wd>=0)) */

u_var4=stv0367_readbits(state, F367TER_TSFIFO_LINEOK); */

stv0367_writereg(state,R367TER_CHC_CTL, 0x1);*/

stv0367_writereg(state,R367TER_CHC_CTL, 0x11);*/

 apply Sfec workaround if 8K 64QAM CR!=1/2*/

 for 367 leave COM_N at 0x7 for IQ_mode*/

	/*if(ter_state->if_iq_mode!=FE_TER_NORMAL_IF_TUNER) {

		tempo=0;

		while ((stv0367_readbits(state,F367TER_COM_USEGAINTRK)!=1) &&

		(stv0367_readbits(state,F367TER_COM_AGCLOCK)!=1)&&(tempo<100)) {

			ChipWaitOrAbort(state,1);

			tempo+=1;

		}



		stv0367_writebits(state,F367TER_COM_N,0x17);

for removing warning :default we can assume in parallel mode*/

case FE_TER_CLOCK_POLARITY_DEFAULT:*/

Set TS1 and TS2 to serial or parallel mode */

constell,*/ counter;

 Normal IF mode */

 Long IF mode */

 IQ mode */

set fine agc target to 180 for LPIF or IQ mode*/

 set Q_AGCTarget */

stv0367_writebits(state,AUT_AGC_TARGET_LSB,0x04); */

 set Q_AGCTarget */

stv0367_writebits(state,AUT_AGC_TARGET_LSB,0x04); */

set IIR filter once for 6,7 or 8MHz BW*/

 liplianin */

 liplianin */

 we know sense now :) */

 Carrier offset calculation */

** 1 FFT BIN=4.464khz***/

** 1 FFT BIN=2.23khz***/

** 1 FFT BIN=1.1khz***/

 exit even if timing_offset stays null */

was 20ms  */

 fine tuning of timing offset if required */

	/* unlocks could happen in case of trl centring big step,

u8 trials[2]; */

/*	case TRANSMISSION_MODE_4K:

		pLook.mode = FE_TER_MODE_4K;

 invert spectrum sense */

wait for counting completion*/

 snr = 0,*/ Data = 0;

 Get the Hierarchical mode */

 error */

 Get the FEC Rate */

 error */

/*	case FE_TER_MODE_4K:

		p->transmission_mode = TRANSMISSION_MODE_4K;

cut 1.0 cut 1.1*/

cu2.0*/

average on 10 values*/

wait for counting completion*/

measurement not completed, load previous value*/

if (Errors<4294967) 2^22 max error*/

 still to *10 */

 Byte error*/

tber=Errors/(8*(1 <<14));*/

tber=Errors/(8*(1 <<16));*/

tber=Errors/(8*(1 <<18));*/

tber=Errors/(8*(1 <<20));*/

tber=Errors/(8*(1 <<22));*/

 should not pass here*/

 save actual value */

if(Errors<=429496)  2^16 errors max*/

 pkt error*/

Per=Errors/(1 << 8);*/

Per=Errors/(1 << 10);*/

Per=Errors/(1 << 12);*/

Per=Errors/(1 << 14);*/

Per=Errors/(1 << 16);*/

 save actual value */

 too slow */

	.read_signal_strength = stv0367_read_signal_strength,*/

 allocate memory for the internal state */

 setup the state */

 demod operation options */

 check if the demod is there */

 master clock frequency (Hz) */

 Set QAM size */

 Set Registers settings specific to the QAM size */

 ZIF operation */

 Set Correction factor of SRC gain */

 Transfer ratio calculation */

 Symbol rate and SRC gain calculation */

 TRL works at half the system clock */

 2097152 = 2^21 */

 Symbol rate calculation */

 2048 = 2^11 */

 16384 = 2^14 */

 125 = 1000/2^3 */

 8 = 2^3 */

 SRC Gain Calculation */

 *2*2^10 */

 *2/878 */

 *2^8 */

 /(AdpClk in kHz) */

 *1000*corr factor */

 4194304 = 2**22 */

 Symbol rate calculation */

 1024 = 2**10 */

 16384 = 2**14 */

 125 = 1000/2**3 */

 16 = 2**4 */

 SRC Gain Calculation */

 *2*2^9 */

 *2/878 */

 *2^8 */

 /(AdpClk in kHz)*/

 *1000*corr factor */

 8388607 = 2**23 */

 Symbol rate calculation */

 512 = 2**9 */

 16384 = 2**14 */

 125 = 1000/2**3 */

 32 = 2**5 */

 SRC Gain Calculation */

 *2*2^8 */

 *2/878 */

 *2^8 */

 /(AdpClk in kHz) */

 *1000*corr factor */

 Symbol rate calculation */

 256 = 2**8 */

 16384 = 2**13 */

 125 = 1000/2**3 */

 64 = 2**6 */

 SRC Gain Calculation */

 2*2^7 */

 *2/878 */

 *2^8 */

 /(AdpClk in kHz) */

 *1000*corr factor */

	/* Filters' coefficients are calculated and written

		/* AllPass filter must be enabled

		/* AllPass filter must be disabled

 TRL works at half the system clock */

 134217728L = 2**27*/

 32 = 2**5 */

 32768L = 2**15 */

 AdpClk in kHz */

 128 = 2**7 */

 125 = 1000/2**3 */

 2048 = 2**11	*/

 268435456L = 2**28 */

 16 = 2**4 */

 32768L = 2**15 */

 AdpClk in kHz */

 128 = 2**7 */

 125 = 1000/2**3*/

 256 = 2**10*/

 536870912L = 2**29*/

 8 = 2**3 */

 32768L = 2**15 */

 AdpClk in kHz */

 128 = 2**7 */

 125 = 1000/2**3 */

 128 = 2**9 */

 4 = 2**2 */

 32768L = 2**15 */

 AdpClk in kHz */

 128 = 2**7 */

 125 = 1000/2**3 */

 64 = 2**8 */

 update cab_state->state from QAM_FSM_STATUS */

PLL enabled and used */

 Timeouts calculation */

 A max lock time of 25 ms is allowed for delayed AGC */

 100000 symbols needed by the TRL as a maximum value */

	/* CRLSymbols is the needed number of symbols to achieve a lock

	   within [-4%, +4%] of the symbol rate.

	   CRL timeout is calculated

	   for a lock within [-search_range, +search_range].

	   EQL timeout can be changed depending on

	   the micro-reflections we want to handle.

	   A characterization must be performed

	   with these echoes to get new timeout values.

 Timeouts below 50ms are coerced */

	/* A maximum of 100 TS packets is needed to get FEC lock even in case

	the spectrum inversion needs to be changed.

	   This is equal to 20 ms in case of the lowest symbol rate of 0.87Msps

	/* Reset the TRL to ensure nothing starts until the

	   AGC is stable which ensures a better lock time

	/* Set AGC accumulation time to minimum and lock threshold to maximum

 Modulus Mapper is disabled */

 Disable the sweep function */

 The sweep function is never used, Sweep rate must be set to 0 */

 Set the derotator frequency in Hz */

 Disable the Allpass Filter when the symbol rate is out of range */

 Check if the tuner is locked */

 Release the TRL to start demodulator acquisition */

 Wait for QAM lock */

			/*

			 * We don't wait longer, the frequency/phase offset

			 * must be too big

			/*

			 * We don't wait longer, either there is no signal or

			 * it is not the right symbol rate or it is an analog

			 * carrier

 Wait for FEC lock */

 not clear for me */

 stv0367_setbits(state, F367CAB_AGC_ACCUMRSTSEL,7);*/

 Set the AGC control values to tracking values */

 Tuner Frequency Setting */

 Search algorithm launch, [-1.1*RangeOffset, +1.1*RangeOffset] scan */

 For DTT75467 on NIM */

if IF AGC>10*/

 table values, not needed to calculate logarithms */

 FE_CAN_QAM_4 */

	.read_ber				= stv0367cab_read_ber, */

 allocate memory for the internal state */

 setup the state */

 demod operation options */

 check if the demod is there */

/*

 * Functions for operation on Digital Devices hardware

 R367CAB_CTRL_1 */

 R367CAB_CTRL_2 */

 Tuner Setup */

 Buffer Q disabled, I Enabled, unsigned ADC */

 ADCQ disabled */

 Clock setup */

 PLL bypassed and disabled */

 Set OFDM */

 IC runs at 54 MHz with a 27 MHz crystal */

 PLL enabled and used */

 R367CAB_CTRL_1 */

 R367CAB_CTRL_2 */

 Tuner Setup */

 Buffer Q disabled, I Enabled, signed ADC */

 ADCQ disabled */

 Clock setup */

 PLL bypassed and disabled */

 Set QAM */

 IC runs at 58 MHz with a 27 MHz crystal */

 PLL enabled and used */

 protect against division error oopses */

 prevent division by zero */

 stop and report on *_read_status failure */

 read carrier/noise when a carrier is detected */

 read uncorrected blocks on FE_HAS_LOCK */

 OFDM TS Setup */

 Fixed at 54 MHz */

 Also needed for QAM */

 AGC Pin setup */

 QAM TS setup, note exact format also depends on descrambler */

 settings */

 Inverted Clock, Swap, serial */

 Clock setup (PLL bypassed and disabled) */

 IC runs at 58 MHz with a 27 MHz crystal */

 Tuner setup */

 Buffer Q disabled, I Enabled, signed ADC */

 ADCQ disabled */

 Improves the C/N lock limit */

 ZIF/IF Automatic mode */

 Improving burst noise performances */

 Improving ACI performances */

 PLL enabled and used */

 DVB-C */

 FE_CAN_QAM_4 */

 DVB-T */

 valid for TER and CAB */

 allocate memory for the internal state */

 setup the state */

 demod operation options */

 check if the demod is there */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Zarlink ZL10039 DVB-S tuner

 *

 *  Copyright 2007 Jan D. Louw <jd.louw@mweb.co.za>

 Max transfer size done by I2C transfer functions */

 Write register address */

 Read count bytes */

 Success */

 Write register address and data in one go */

 Success */

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

 Reset logic */

 Wake up */

 Assumed 10.111 MHz crystal oscillator */

 Cancelled num/den 80 to prevent overflow */

 Cancelled num/den 10 to prevent overflow */

PLL divider*/

Reference divider*/

 Select reference ratio of 80 */

PLL test modes*/

RF Control register*/

 Bypass enable */

Baseband filter cutoff */

 Open i2c gate */

 BR = 10, Enable filter adjustment */

 Write new config values */

 BR = 10, Disable filter adjustment */

 Close i2c gate */

 Open i2c gate */

 check if this is a valid tuner */

 Close i2c gate */

 Close i2c gate */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *    Support for AltoBeam GB20600 (a.k.a DMB-TH) demodulator

 *    ATBM8830, ATBM8831

 *

 *    Copyright (C) 2009 David T.L. Wong <davidtlwong@gmail.com>

 Lock register latch so that multi-register read is atomic */

in kHz*/)

 0x100000 * freq / 30.4MHz */

in kHz*/)

 2 * PI * (freq - fs) / fs * (2 ^ 22) */

 Zero IF */

 no effect if both min and max are zero */

 For single carrier */

 frame_count_max0 */

 frame_count_max1 */

Set parallel/serial ts mode*/

Set ts sampling edge*/

Set ts clock freerun*/

Set oscillator frequency*/

Set IF frequency*/

Set AGC Config*/

Set static channel mode*/

Turn off DSP reset*/

SW version test*/

 Run */

 set frequency */

 start auto lock */

 TODO: get real readings from device */

 inversion status */

 bandwidth */

 transmission mode */

 guard interval */

 hierarchy */

 check if the demod is there */

/*

 * Support for the Broadcom BCM3510 ATSC demodulator (1st generation Air2PC)

 *

 *  Copyright (C) 2001-5, B2C2 inc.

 *

 *  GPL/Linux driver written by Patrick Boettcher <patrick.boettcher@posteo.de>

 *

 *  This driver is "hard-coded" to be used with the 1st generation of

 *  Technisat/B2C2's Air2PC ATSC PCI/USB cards/boxes. The pll-programming

 *  (Panasonic CT10S) is located here, which is actually wrong. Unless there is

 *  another device with a BCM3510, this is no problem.

 *

 *  The driver works also with QAM64 DVB-C, but had an unreasonable high

 *  UNC. (Tested with the Air2PC ATSC 1st generation)

 *

 *  You'll need a firmware for this driver in order to get it running. It is

 *  called "dvb-fe-bcm3510-01.fw".

 *

 * This program is free software; you can redistribute it and/or modify it

 * under the terms of the GNU General Public License as published by the Free

 * Software Foundation; either version 2 of the License, or (at your option)

 * any later version.

 *

 * This program is distributed in the hope that it will be useful, but WITHOUT

 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or

 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for

 * more details.

 *

 * You should have received a copy of the GNU General Public License along with

 * this program; if not, write to the Free Software Foundation, Inc., 675 Mass

 * Ave, Cambridge, MA 02139, USA.

 Max transfer size done by bcm3510_do_hab_cmd() function */

 demodulator private data */

 transfer functions */

 Host Access Buffer transfers */

/* Check if any previous HAB request still needs to be serviced by the

		return -EBUSY;

/* Send the start HAB Address (automatically incremented after write of

/* Set the HABR bit to indicate AP request in progress (LBHABR allows HABR to

 Polling method: Wait until the AP finishes processing the HAB request */

 not needed, we use a semaphore to prevent HAB races */

 clear residual bit counter TODO  */

 more frequently checks if no lock has been achieved yet */

 normalize if necessary */

 tuner frontend programming */

 I2C Mode disabled,  set 16 control / Data pairs */

/* CS1, CS0, DATA, CLK bits control the tuner RF_AGC_SEL pin is set to

 Set duration of the initial state of TUNCTL = 3.34 micro Sec */

 PRESCALER DIVIDE RATIO | BC1_2_3_4; (band switch), 1stosc REFERENCE COUNTER REF_S12 and REF_S11 */

 Control DATA pin, 1stosc REFERENCE COUNTER REF_S10 to REF_S3 */

 set CONTROL BIT 1 to 1, 1stosc REFERENCE COUNTER REF_S2 to REF_S1 */

 control CS0 pin, pulse byte ? */

 PGM_S18 to PGM_S11 */

 PGM_S10 to PGM_S8, SWL_S7 to SWL_S3 */

 SWL_S2 and SWL_S1, set CONTROL BIT 2 to 0 */

 control CS0 pin, pulse byte ? */

 PRESCALER DIVIDE RATIO, 2ndosc REFERENCE COUNTER REF_S12 and REF_S11 */

 2ndosc REFERENCE COUNTER REF_S10 to REF_S3 */

 set CONTROL BIT 1 to 1, 2ndosc REFERENCE COUNTER REF_S2 to REF_S1 */

 pulse byte */

 PGM_S18 to PGM_S11 */

 PGM_S10 to PGM_S8 and SWL_S7 to SWL_S3 */

 SWL_S2 and SWL_S1 and set CONTROL BIT 2 to 0 */

 Pulse Byte */

 set Band Switch */

/*	if (enableOffset) {

		cmd.IF_OFFSET0 = xx;

		cmd.IF_OFFSET1 = xx;



		cmd.SYM_OFFSET0 = xx;

		cmd.SYM_OFFSET1 = xx;

		if (enableNtscSweep) {

			cmd.NTSC_OFFSET0;

			cmd.NTSC_OFFSET1;

		}

 doing it with different MSGIDs, data book and source differs */

 Give the AP some time */

/* firmware download:

 * firmware file is build up like this:

 * 16bit addr, 16bit length, 8byte of length

 (un)resetting the AP */

 verify that reset is cleared */

 read Acquisation Processor status register and check it is not in RUN mode */

 tri-state */

 anything left here to Let the acquisition processor begin execution at program counter 0000 ??? */

 allocate memory for the internal state */

 setup the state */

 create dvb_frontend */

 cold */

 warm */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Silicon Labs Si2161 DVB-T and Si2165 DVB-C/-T Demodulator

 *

 *  Copyright (C) 2013-2017 Matthias Schwarzott <zzam@gentoo.org>

 *

 *  References:

 *  https://www.silabs.com/Support%20Documents/TechnicalDocs/Si2165-short.pdf

/*

 * Hauppauge WinTV-HVR-930C-HD B130 / PCTV QuatroStick 521e 1113xx

 * uses 16 MHz xtal

 *

 * Hauppauge WinTV-HVR-930C-HD B131 / PCTV QuatroStick 522e 1114xx

 * uses 24 MHz clock provided by tuner

 calculated by xtal and div settings */

 DVBv3 stats */

 1..7 */

 only 1 or 4 */

 1..63 */

	/*

	 * hardcoded values can be deleted if calculation is verified

	 * or it yields the same values as the windows driver

 ref_freq / divr must be between 4 and 16 MHz */

		/*

		 * now select divn and divp such that

		 * fvco is in 1624..1824 MHz

 is this already correct regarding rounding? */

 adc_clk and sys_clk depend on xtal and pll settings */

 write all 4 pll registers 0x00a0..0x00a3 at once */

 assume Oversampling mode Ovr4 is used */

 int ret; */

 revision D */

 request the firmware, this will block and timeout */

 check header (8 bytes) */

 start uploading fw */

 boot/wdog status */

 reset */

 boot/wdog status */

 enable reset on error */

 start right after the header */

 reset crc */

 read crc */

 reset watchdog error register */

 enable reset on error */

 powerup */

 dsp_clock_enable */

 verify chip_mode */

 agc */

 rssi pad */

 enable chip_init */

 set start_init */

 disable chip_init */

 ber_pkt - default 65535 */

 dsp_addr_jump */

 boot/wdog status */

 ts output config */

 dsp clock disable */

 chip mode */

 check fast signal type */

 searching */

 nothing */

 digital signal */

 check packet sync lock */

 check fec_lock */

 CNR */

		/*

		 * svalue =

		 * 1000 * c_n/dB =

		 * 1000 * 10 * log10(2^24 / regval) =

		 * 1000 * 10 * (log10(2^24) - log10(regval)) =

		 * 1000 * 10 * (intlog10(2^24) - intlog10(regval)) / 2^24

		 *

		 * intlog10(x) = log10(x) * 2^24

		 * intlog10(2^24) = log10(2^24) * 2^24 = 121210686

 BER */

 start new sampling period to get rid of old data*/

 set scale to enter read code on next call */

			/*

			 * reset DVBv3 value to deliver a good result

			 * for the first call

 start new sampling period */

 if_freq_shift, usbdump contained 0x023ee08f; */

 standard = DVB-T */

 impulsive_noise_remover */

 agc2 */

 agc */

 agc */

 freq_sync_range */

 gp_reg0 */

 no bandwidth auto-detection */

 bandwidth in 10KHz steps */

 standard = DVB-C */

 agc2 */

 agc */

 agc */

 Oversampling */

 initial setting of if freq shift */

 dsp_addr_jump */

 recalc if_freq_shift if IF might has changed */

 boot/wdog status */

 reset all */

 gp_reg0 */

 write adc values after each reset*/

 start_synchro */

 boot/wdog status */

 For DVB-C */

 For DVB-T */

 allocate memory for the internal state */

 create regmap */

 setup the state */

 create dvb_frontend */

 powerup */

 powerdown */

 return fe pointer */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Realtek RTL2830 DVB-T demodulator driver

 *

 * Copyright (C) 2011 Antti Palosaari <crope@iki.fi>

 Our regmap is bypassing I2C adapter lock, thus we do it! */

 TODO: spec init */

 soft reset */

 init stats here in order signal app which stats are supported */

 6 MHz */

 7 MHz */

 8 MHz */

 6 MHz */

 7 MHz */

 8 MHz */

 program tuner */

 program if frequency */

 [7:6] */

 1/2 split I2C write */

 2/2 split I2C write */

 [6:3] */

 Signal strength */

 Read IF AGC */

 CNR */

 [3:2] */

 [6:4] */

 BER */

 enable / disable PID filter */

 skip invalid PIDs (0x2000) */

 enable / disable PIDs */

 add PID */

/*

 * I2C gate/mux/repeater logic

 * We must use unlocked __i2c_transfer() here (through regmap) because of I2C

 * adapter lock is already taken by tuner driver.

 * Gate is closed automatically after single I2C transfer.

 open I2C repeater for 1 transfer, closes automatically */

 XXX: regmap_update_bits() does not lock I2C adapter */

/*

 * We implement own I2C access routines for regmap in order to get manual access

 * to I2C adapter lock, which is needed for I2C mux adapter.

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create muxed i2c adapter for tuner */

 create dvb frontend */

 setup callbacks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	STB6100 Silicon Tuner

	Copyright (C) Manu Abraham (abraham.manu@gmail.com)



	Copyright (C) ST Microelectronics



 Max transfer size done by I2C transfer functions */

 Register names for easy debugging.	*/

/* Template for normalisation, i.e. setting unused or undocumented

 * bits as required according to the documentation.

/*

 * Currently unused. Some boards might need it in the future

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

 x2 for ZIF	*/

 ZIF */

 F[4:0] BW/2 max =31+5=36 mhz for F=31	*/

 bw/2 min = 5Mhz for F=0			*/

 if 5 < bw/2 < 36				*/

	/* Turn on LPF bandwidth setting clock control,

	 * set bandwidth, wait 10ms, turn off.

  This is dangerous as another (related) thread may start */

  This is dangerous as another (related) thread may start */

 Set up tuner cleanly, LPF calibration on */

 allow LPF calibration */

 PLL Loop disabled, bias on, VCO on, synth on */

 Program the registers with their data values */

 VCO divide ratio (LO divide ratio, VCO prescaler enable).	*/

 VCO enabled, search clock off as per LL3.7, 3.4.1 */

 OSM	*/

 F(VCO) = F(LO) * (ODIV == 0 ? 2 : 4)			*/

 N(I) = floor(f(VCO) / (f(XTAL) * (PSD2 ? 2 : 1)))	*/

 N(F) = round(f(VCO) / f(XTAL) * (PSD2 ? 2 : 1) - N(I)) * 2 ^ 9	*/

 NI */

 NF */

 K */

 G Baseband gain. */

  +4 dB */

  +8 dB */

 +14 dB */

 mask GCT */

 2Vp-p Mode */

 F we don't write as it is set up in BW set */

 DLB set DC servo loop BW to 160Hz (LLA 3.8 / 2.1) */

 Set up the test registers */

 Bring up tuner according to LLA 3.7 3.4.1, step 2 */

 PLL Loop enabled, bias on, VCO on, synth on */

 Bring up tuner according to LLA 3.7 3.4.1, step 3 */

 VCO fast search		*/

  This is dangerous as another (related) thread may start */ 
 vco search disabled		*/

 search clock off		*/

 Stop LPF calibration */

  This is dangerous as another (related) thread may start */

 wait for stabilisation, (should not be necessary)		*/

 TODO: power down	*/

 Hz */

	/*

	 * iqsense = 1

	 * tunerstep = 125000

 Hz	*/

 kHz	*/

 Set default bandwidth. Modified, PN 13-May-10	*/

 kHz */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Driver for ST STV0288 demodulator

	Copyright (C) 2006 Georg Acher, BayCom GmbH, acher (at) baycom (dot) de

		for Reel Multimedia

	Copyright (C) 2008 TurboSight.com, Bob Liu <bob@turbosight.com>

	Copyright (C) 2008 Igor M. Liplianin <liplianin@me.by>

		Removed stb6000 specific tuner code and revised some

		procedures.

	2010-09-01 Josef Pavlik <josef@pavlik.it>

		Fixed diseqc_msg, diseqc_burst and set_tone problems





 SFRH */

 SFRM */

 SFRL */

 modulated mode, single shot */

 burst mode, single shot */

 cont carrier */

 burst mode off*/

 we have default inittab */

 only frequency & symbol_rate are used for tuner*/

 Carrier lock control register */

 CFRL */

 Viterbi status */

 ppm */

 allocate memory for the internal state */

 setup the state */

 register 0x00 contains 0x11 for STV0288  */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Conexant cx24120/cx24118 - DVBS/S2 Satellite demod/tuner driver



    Copyright (C) 2008 Patrick Boettcher <pb@linuxtv.org>

    Copyright (C) 2009 Sergey Tyurin <forum.free-x.de>

    Updated 2012 by Jannis Achstetter <jannis_achstetter@web.de>

    Copyright (C) 2015 Jemma Denson <jdenson@gmail.com>

	April 2015

	    Refactored & simplified driver

	    Updated to work with delivery system supplied by DVBv5

	    Add frequency, fec & pilot to get_frontend



	Cards supported: Technisat Skystar S2



 cx24120 i2c registers  */

 write cmd_id */

 write command arguments */

 write 0x01 for end */

 frequency */

 FEC status */

 Tuner status */

 Signal strength high */

 Signal strength low byte */

 SNR high byte */

 SNR low byte */

 BER high byte of high word */

 BER low byte of high word */

 BER high byte of low word */

 BER low byte of low word */

 UCB high byte */

 UCB low byte  */

 Chip revision (ro) */

 Command messages */

 cmd.len = 12; */

 cmd.len = 15; */

 cmd.len = 4; */

 cmd.len = 7; */

 cmd.len = 12; */

 read clock */

 cmd.len = 10; */

 cmd.len = 11; */

 cmd.len = d->msg_len + 6; */

 cmd.len = 2; */

 cmd.len = 4; */

 cmd.len not used !!! */

 Read signal strength */

 ??? */

 cmd.len = 0x03; */

 pilot mask */

 signal status */

 ber window */

 The Demod/Tuner can't easily provide these, we cache them */

 Demod values */

 Private state */

 current and next tuning parameters */

 dvbv5 stats calculations */

 Command message to firmware */

 Read single register */

 Write single register */

 Write multiple registers in chunks of i2c_wr_max-sized buffers */

 data length revers counter */

 incr data pointer */

 don't forget the addr byte */

 setup the state */

 check if the demod is present and has proper type */

 create dvb_frontend */

 Check if we're running a command that needs to disable mpeg out */

 Old driver would do a msleep(100) here */

 Send a message to the firmware */

 Disable mpeg out on certain commands */

 Send a message and fill arg[] with the results */

 Read numreg registers starting from register cmd->len */

 sequental number - can be 0,1,2 */

	/*

	 * Yes, cmd.len is set to zero. The old driver

	 * didn't specify any len, but also had a

	 * memset 0 before every use of the cmd struct

	 * which would have set it to zero.

	 * This quite probably needs looking into.

 signal strength */

 raw */

 cooked */

 CNR */

 guessed - seems about right */

 BER & UCB require lock */

 BER */

 UCB */

 handle reset */

 Read current tuning status */

	/*

	 * TODO: is FE_HAS_SYNC in the right place?

	 * Other cx241xx drivers have this slightly

	 * different

 Set the clock once tuned in */

 Set clock ratios */

 Old driver would do a msleep(200) here */

 Renable mpeg output */

/*

 * FEC & modulation lookup table

 * Used for decoding the REG_FECMODE register

 * once tuned in.

delsys     mod    fec       val */

 Retrieve current fec, modulation & pilot values */

 Lower 6 bits */

 found */

 save values back to cache */

 Calculate ber window time */

	/*

	 * Calculate bitrate from rate in the clock ratios table.

	 * This isn't *exactly* right but close enough.

 usecs per ber window */

/*

 * Clock ratios lookup table

 *

 * Values obtained from much larger table in old driver

 * which had numerous entries which would never match.

 *

 * There's probably some way of calculating these but I

 * can't determine the pattern

delsys     pilot      mod    fec       m_rat    n_rat   rate */

 Set clock ratio from lookup table */

 Find fec, modulation, pilot */

 Find the clock ratios in the lookup table */

 found */

 Read current values? */

 in cmd[0]-[5] - result */

 Set the clock */

 Calculate ber window rates for stat work */

 Set inversion value */

 FEC lookup table for tuning */

delsys     mod    fec       val */

 Set fec_val & fec_mask values from delsys, modulation & fec */

 Lookup fec_val from modfec table */

 found */

 DVBS2 auto is 0x00/0x00 */

 Set DVB-S to auto */

 Set pilot */

 Pilot only valid in DVBS2 */

 Set symbol rate */

 Check symbol rate */

 Overwrite the current tuning params, we are about to tune */

 discard the 'current' tuning parameters and prepare to tune */

 Flag that clock needs to be set after tune */

 Tune in */

 maybe rolloff? */

 Send tune command */

 Write symbol rate values */

 Set vco from config */

 ???? */

 firmware_size in bytes */

 fw 1st byte */

 fw 2d byte */

 fw before last byte */

 fw last byte */

 Check final byte matches final byte of firmware */

 Start tuner */

 Set VCO */

 set bandwidth */

 Initialise mpeg outputs */

 Set size of BER window */

 Firmware CMD 35: Get firmware version */

 init stats here in order signal app which stats are supported */

 TODO: Do we need to set delay? */

 don't return empty data if we're not tuned in */

 Get frequency */

 Get modulation, fec, pilot */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ascot2e.c

 *

 * Sony Ascot3E DVB-T/T2/C/C2 tuner driver

 *

 * Copyright 2012 Sony Corporation

 * Copyright (C) 2014 NetUP Inc.

 * Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>

 * Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

 IF_OUT_SEL / AGC_SEL setting */

 AGC pin setting from parameter table */

 IFOUT pin setting from parameter table */

 Set bit[4:2] only */

 0x06 - 0x0F */

 REF_R setting (0x06) */

 xtal, xtal*2 */

 xtal/8, xtal/4 */

 XOSC_SEL=100uA */

 KBW setting (0x08), KC0 setting (0x09), KC1 setting (0x0A) */

 ORDER/R2_RANGE/R2_BANK/C2_BANK setting (0x0B) */

 Set MIX_OLL (0x0C) value from parameter table */

 Set RF_GAIN (0x0D) setting from parameter table */

 RF_GAIN auto control enable */

 RF_GAIN Default value */

 RF_GAIN auto control disable */

 Set IF_BPF_GC/FIF_OFFSET (0x0E) value from parameter table */

 Set BW_OFFSET (0x0F) value from parameter table */

	/*

	 * 0x45 - 0x47

	 * LNA optimization setting

	 * RF_LNA_DIST1-5, RF_LNA_CM

	/* 0x49 - 0x4A

 Set IF_BPF_F0 value from parameter table */

	/*

	 * Tune now

	 * RFAGC fast mode / RFAGC auto control enable

	 * (set bit[7], bit[5:4] only)

	 * vco_cal = 1, set MIX_OL_CPU_EN

 Logic wake up, CPU wake up */

 0x10 - 0x14 */

 0x10: FRF_L */

 0x11: FRF_M */

 0x12: FRF_H (bit[3:0]) */

 0x12: BW (bit[5:4]) */

 0x13: VCO calibration enable */

 0x14: Analog block enable */

 Tune (Burst write) */

 CPU deep sleep */

 Logic sleep */

 RFAGC normal mode (set bit[5:4] only) */

 16 MHz xTal frequency */

 VCO current setting */

 Logic wake up, CPU boot */

 RFVGA optimization setting (RF_DIST0 - RF_DIST2) */

 PLL mode setting */

 RSSI setting */

 TODO check CPU HW error state here */

 Xtal oscillator current control setting */

 XOSC_SEL=100uA */

 CPU deep sleep */

 Logic sleep */

 Power save setting */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    NXP TDA10048HN DVB OFDM demodulator driver



    Copyright (C) 2009 Steven Toth <stoth@kernellabs.com>





 Register name definitions */

 We'll cache and update the attach config settings */

 PHY2 = (if2/fs) * 2^15 */

 PHY2 = ((IF1-fs)/fs) * 2^15 */

 WREF = (B / (7 * fs)) * 2^31 */

 avoid warning: this decimal constant is unsigned only in ISO C90 */

 t *= 2147483648 on 32bit platforms */

 INVWREF = ((7 * fs) / B) * 2^5 */

 Bandwidth setting may need to be adjusted */

 based on target bandwidth and clk we calculate pll factors */

 Calculate the sample frequency */

 Update the I/F */

 request the firmware, this will block and timeout */

 Soft reset */

 Put the demod into host download mode */

 Boot the DSP */

 Prepare for download */

 Download the firmware payload */

 Wait up to 250ms for the DSP to boot */

 Retrieve the demod settings */

 Make sure the TPS regs are valid */

 Ensure pins are out of tri-state */

 Talk to the demod, set the FEC, GUARD, QAM settings etc */

 TODO: Support manual tuning with specific params */

 Update the I/F pll's if the bandwidth changes */

 Enable demod TPS auto detection and begin acquisition */

 trigger cber and vber acquisition */

 Establish sane defaults and load firmware. */

 PLL */

 Apply register defaults */

 Set either serial or parallel */

 Set inversion */

 Establish default RF values */

 Ensure we leave the gate closed */

 update cber on interrupt */

 retrigger cber acquisition */

 actual cber is (*ber)/1e8 */

 SNR lookup table */

 clear the uncorrected TS packets counter when saturated */

 Validate/default the config */

 allocate memory for the internal state */

 setup the state and clone the config */

 check if the demod is present */

 create dvb_frontend */

 set pll */

 Establish any defaults the the user didn't pass */

 Set the xtal and freq defaults */

 Default bandwidth */

 Leave the gate closed */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Afatech AF9013 demodulator driver

 *

 * Copyright (C) 2007 Antti Palosaari <crope@iki.fi>

 * Copyright (C) 2011 Antti Palosaari <crope@iki.fi>

 *

 * Thanks to Afatech who kindly provided information.

 RF and IF AGC limits used for signal strength calc */

	/*

	 * GPIO0 & GPIO1 0xd735

	 * GPIO2 & GPIO3 0xd736

 program tuner */

 program CFOE coefficients */

 Return an error if can't find bandwidth or the right clock */

 program frequency control */

 get used IF frequency */

 clear TPS lock flag */

 clear MPEG2 lock flag */

 empty channel function */

 empty DVB-T channel function */

 transmission parameters */

 Use HP. How and which case we can switch to LP? */

 clear easy mode flag */

 set easy mode flag */

 Reset FSM */

	/*

	 * Return status from the cache if it is younger than 2000ms with the

	 * exception of last tune is done during 4000ms.

 MPEG2 lock */

 TPS lock */

 Signal strength */

 Check if we support signal strength */

 Read agc values for signal strength estimation */

 Signal strength is not supported */

 Read value */

		/*

		 * Construct line equation from tuner dependent -80/-50 dBm agc

		 * limits and use it to map current agc value to dBm estimate

 Convert [-90, -30] dBm to [0x0000, 0xffff] for dvbv3 */

 CNR */

 Check if cnr ready */

 Read value */

 Read current modulation */

			/*

			 * QPSK

			 * CNR[dB] 13 * -log10((1690000 - value) / value) + 2.6

			 * value [653799, 1689999], 2.6 / 13 = 3355443

			/*

			 * QAM-16

			 * CNR[dB] 6 * log10((value - 370000) / (828000 - value)) + 15.7

			 * value [371105, 827999], 15.7 / 6 = 43900382

			/*

			 * QAM-64

			 * CNR[dB] 8 * log10((value - 193000) / (425000 - value)) + 23.8

			 * value [193246, 424999], 23.8 / 8 = 49912218

 BER / PER */

 Check if ber / ucb is ready */

 Read value */

 Use 10000 TS packets for measure */

 Reset ber / ucb counter */

 ADC on */

 Clear reset */

 Disable reset */

 write API version to firmware */

 program ADC control */

 28.800 MHz */

 20.480 MHz */

 28.000 MHz */

 25.000 MHz */

 Demod core settings */

 Demod tuner specific settings */

 TS interface */

 enable lock led */

 disable lock led */

 Enable reset */

 Start reset execution */

 Wait reset performs */

 ADC off */

 Check whether firmware is already running */

 Request the firmware, will block and timeout */

 Write firmware checksum & size */

 Download firmware */

 Boot firmware */

 Check firmware status. 0c=OK, 04=fail */

 0x2000 is kernel virtual pid for whole ts (all pids) */

/*

 * XXX: Hackish solution. We use virtual register, reg bit 16, to carry info

 * about i2c adapter locking. Own locking is needed because i2c mux call has

 * already locked i2c adapter.

 Own I2C access routines needed for regmap as chip uses extra command byte */

 Firmware download */

 Actual reg is 16 bits, see i2c adapter lock */

 Setup the state */

 Create mux i2c adapter */

 Download firmware */

 Firmware version */

 Set GPIOs */

 Create dvb frontend */

 Setup callbacks */

 Init stats to indicate which stats are supported */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Zarlink DVB-T ZL10353 demodulator

 *

 * Copyright (C) 2006, 2007 Christopher Pascoe <c.pascoe@itee.uq.edu.au>

 Dump all registers. */

 45.056 MHz */

 45.056  MHz */

 36.1667 MHz */

 These are extrapolated from the 7 and 8MHz values */

 Hint at TPS settings */

	/*

	 * If there is no tuner attached to the secondary I2C bus, we call

	 * set_params to program a potential tuner attached somewhere else.

	 * Otherwise, we update the PLL registers via calc_regs.

 If no attached tuner or invalid PLL registers, just start the FSM. */

 no FE or TPS lock */

 Do a "hard" reset if not already done */

 No tuner attached to the internal I2C bus */

 If set enable I2C bridge, the main I2C bus stopped hardly */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux-DVB Driver for DiBcom's DiB7000M and

 *              first generation DiB7000P-demodulator-family.

 *

 * Copyright (C) 2005-7 DiBcom (http://www.dibcom.fr/)

 offset is 1 in case of the 7000MC */

 for the I2C transfer */

 compensate for 7000MC

 by default SRAM output is disabled */

 STBs with parallel gated clock

 0x0400 */

 STBs with parallel continues clock

 0x0440 */

 STBs with serial input

 0x0482 */

 0x0500 */

 e.g. USB feeding

 disable

 synchronous fread */

 P_O_CLK_en

 by default everything is going to be powered off */

 now, depending on the requested mode, we power on */

 power up everything in the demod */

 just leave power on the control-interfaces: GPIO and (I2C or SDIO or SRAM) */

 TODO power up either SDIO or I2C or SRAM */

 always power down unused parts */

 P_sdio_select_clk = 0 on MC and after*/

 workaround for PA/MA

 power-up ADC

 power-down bandgag

 leave the VBG voltage on

	dprintk("913: %x, 914: %x\n", reg_913, reg_914);

 store the current bandwidth for later use

 internal */

	dib7000m_write_word(state, 928, (3 << 14) | (1 << 12) | (524 << 0)); 
 0.625*3.3 / 4096

 do the calibration */

 default */

 for this oscillator frequency should be 30 MHz for the Master (default values in the board_parameters give that value)

 this is only working only for 30 MHz crystals

 forcing the predivider to 1

 if the previous front-end is baseband, its output frequency is 15 MHz (prev freq divided by 2)

 otherwise the previous front-end puts out its input (default 30MHz) - no extra division necessary

 pll cfg

 clk cfg0

 clk_cfg1

 clk_cfg0

 clk_cfg1

dib7000m_write_word(state, 908, (1 << 14) | (3 << 12) |(0 << 11) |

 smpl_cfg

 reset the GPIOs */

 TODO 782 is P_gpio_od */

 auto search configuration

 P_corm_thres Lock algorithms configuration

 P_palf_alpha_regul, P_palf_filter_freeze, P_palf_filter_on

 P_fft_nb_to_cut

 P_pha3_thres

 P_cti_use_cpe, P_cti_use_prog

 P_cspu_regul, P_cspu_win_cut

 P_adp_regul_cnt

 P_adp_noise_cnt

 P_adp_regul_ext

 P_adp_noise_ext

 P_adp_fil

 P_2d_byp_ti_num

 P_equal_thres_wgn

 P_fec_*

 P_smo_mode, P_smo_rs_discard, P_smo_fifo_flush, P_smo_pid_parse, P_smo_error_discard

 set ADC level to -16 */

 Tuner IO bank: max drive (14mA)

 always leave the VBG voltage on - it consumes almost nothing but takes a long time to start */

 restart all parts */

 unforce divstr regardless whether i2c enumeration was done or not */

 select DVB-T output

 P_iqc_alpha_pha, P_iqc_alpha_amp, P_iqc_dcc_alpha, ...

 P_divclksel=3 P_divbitsel=1

 P_restart_iqc & P_restart_agc

 n_agc_global

 P_agc_force_split and P_agc_split_offset

 read dyn_gain here (because it is demod-dependent and not fe)

 LNA has changed

 AGC */

 Demod AGC loop configuration

 AGC continued */

 use default

 settings for the MC

		dprintk("929: %x %d %d\n",

			(dib7000m_read_word(state, 929) & 0xffe3) | (agc->wbd_inv << 4) | (agc->wbd_sel << 2), agc->wbd_inv, agc->wbd_sel);

 wrong default values

 set power-up level: interf+analog+AGC

 ADC power up */

 AGC initialization */

 we are using the wbd - so slow AGC startup */

 force 0 split on WBD and restart AGC */

 default AGC startup */

 wait AGC rough lock time */

 fast split search path after 5sec */

 freeze AGC loop */

 fast split search 0.25kHz */

 split search ended */

 store the split value for the next time */

 set AGC gain start value */

 std AGC loop */

 standard split search */

 LNA startup */

 wait AGC accurate lock time */

 wait only AGC rough lock time

 nfft, guard, qam, alpha */

 P_dintl_native, P_dintlv_inv, P_hrch, P_code_rate, P_select_hp */

 offset loop parameters */

 P_timf_alpha = 6, P_corm_alpha=6, P_corm_thres=0x80 */

 P_ctrl_inh_cor=0, P_ctrl_alpha_cor=4, P_ctrl_inh_isi=1, P_ctrl_alpha_isi=3, P_ctrl_inh_cor4=1, P_ctrl_alpha_cor4=3 */

 P_ctrl_freeze_pha_shift=0, P_ctrl_pha_off_max=3 */

 P_ctrl_sfreq_inh=0, P_ctrl_sfreq_step=5 */

 P_dvsy_sync_wait */

 add 50% SFN margin + compensate for one DVSY-fifo TODO

 deactivate the possibility of diversity reception if extended interleave - not for 7000MC */

 P_dvsy_sync_mode = 0, P_dvsy_sync_enable=1, P_dvcb_comb_mode=2 */

 channel estimation fine configuration */

 P_adp_regul_cnt 0.04 */

 P_adp_noise_cnt -0.002 */

 P_adp_regul_ext 0.02 */

 P_adp_noise_ext -0.001 */

 P_adp_regul_cnt 0.07 */

 P_adp_noise_cnt -0.004 */

 P_adp_regul_ext 0.02 */

 P_adp_noise_ext -0.002 */

 P_adp_regul_cnt 0.3 */

 P_adp_noise_cnt -0.01 */

 P_adp_regul_ext 0.1 */

 P_adp_noise_ext -0.002 */

 set power-up level: autosearch

 always use the setting for 8MHz here lock_time for 7,6 MHz are longer

 lock0 wait time

 lock0 wait time

 lock1 wait time

 lock1 wait time

 lock2 wait time

 lock2 wait time

 start search

 clear n_irq_pending */

 failed

 succeeded

 still pending

 we are already tuned - just resuming from suspend

 restart demod

 P_ctrl_inh_cor=0, P_ctrl_alpha_cor=4, P_ctrl_inh_isi=0, P_ctrl_alpha_isi=3, P_ctrl_inh_cor4=1, P_ctrl_alpha_cor4=3 */

 never achieved a lock before - wait for timfreq to update

dump_reg(state);

 P_timf_alpha, P_corm_alpha=6, P_corm_thres=0x80 */

 P_ctrl_freeze_pha_shift=0, P_ctrl_pha_off_max */

 P_ctrl_sfreq_inh=0, P_ctrl_sfreq_step */

 we achieved a lock - it's time to update the timf freq

 protect this driver to be used with 7000PC */

 case 2: fep->transmission_mode = TRANSMISSION_MODE_4K; break; */

 as long as the frontend_param structure is fixed for hierarchical transmission I refuse to use it */

 (tps >> 13) & 0x1 == hrch is used, (tps >> 10) & 0x7 == alpha */

 native interleaver: (dib7000m_read_word(state, 481) >>  5) & 0x1 */

 start up the AGC */

 no channel found

 make this a config parameter */

 used with some prototype boards */

 designated i2c address */

 start diversity to pull_down div_str - just for i2c-enumeration */

 select DVB-T output

 set new i2c address and force divstart */

 unforce divstr

 deactivate div - it was just for i2c-enumeration */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Conexant 22702 DVB OFDM demodulator driver



    based on:

	Alps TDMB7 DVB OFDM demodulator driver



    Copyright (C) 2001-2002 Convergence Integrated Media GmbH

	  Holger Waechtler <holger@convergence.de>



    Copyright (C) 2004 Steven Toth <stoth@linuxtv.org>





 configuration settings */

 previous uncorrected block counter */

 Register values to initialise the demod */

 Stop acquisition */

 Retrieve the demod settings */

 Make sure the TPS regs are valid */

 Talk to the demod, set the FEC, GUARD, QAM settings etc */

 set inversion */

 set bandwidth */

 temp hack as manual not working */

 use auto configuration? */

 TPS Source - use hardware driven values */

 Begin acquisition */

 manually programmed values */

 mask 0x18 */

 mask 0x07 */

 mask 0x38 */

 mask 0x07 */

 mask 0x0c */

 mask 0x03 */

 Begin channel acquisition */

/* Reset the demod hardware and reset all of the configuration registers

 Realtime statistics */

 Averagtine statistics */

	/*

	 * Experience suggests that the strength signal register works as

	 * follows:

	 * - In the absence of signal, value is 0xff.

	 * - In the presence of a weak signal, bit 7 is set, not sure what

	 *   the lower 7 bits mean.

	 * - In the presence of a strong signal, the register holds a 7-bit

	 *   value (bit 7 is cleared), with greater values standing for

	 *   weaker signals.

 Scale to 16 bit */

 Realtime statistics */

 Averagine statistics */

 RS Uncorrectable Packet Count then reset */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Driver for ST STV0299 demodulator



    Copyright (C) 2001-2002 Convergence Integrated Media GmbH

	<ralph@convergence.de>,

	<holger@convergence.de>,

	<js@convergence.de>





    Philips SU1278/SH



    Copyright (C) 2002 by Peter Schildmann <peter.schildmann@web.de>





    LG TDQF-S001F



    Copyright (C) 2002 Felix Domke <tmbinc@elitedvb.net>

		     & Andreas Oberritter <obi@linuxtv.org>





    Support for Samsung TBMU24112IMB used on Technisat SkyStar2 rev. 2.6B



    Copyright (C) 2003 Vadim Catana <skystar@moldova.cc>:



    Support for Philips SU1278 on Technotrend hardware



    Copyright (C) 2004 Andrew de Quincey <adq_dvb@lidskialf.net>





 check rate is within limits

 calculate value to program

 round correctly

 DiSEqC mode */

 burst mode */

	/*

	 *  H/V switching over OP0, OP1 and OP2 are LNB power enable bits

 OP1 off, OP0 on */

 OP1 on, OP0 off */

 OP1 on, OP0 on */

 LNB power off! */

 set LNB to 18V */

 set voltage to (last ? 13V : 18V) */

 set the inversion

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 standby off */

 register 0x00 contains 0xa1 for STV0299 and STV0299B */

 register 0x00 might contain 0x80 when returning from standby */

 create dvb_frontend */

 ppm */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Afatech AF9033 demodulator driver

 *

 * Copyright (C) 2009 Antti Palosaari <crope@iki.fi>

 * Copyright (C) 2012 Antti Palosaari <crope@iki.fi>

 for old read_ber we return (curr - prev) */

 Write reg val table using reg addr auto increment */

 Main clk control */

 ADC clk control */

 Config register table */

 Demod clk output */

 TS interface */

 Demod core settings */

 Demod tuner specific settings */

 Force to program all parameters */

 Init stats here in order signal app which stats are supported */

 Prevent current leak by setting TS interface to parallel mode */

 Enable parallel TS */

 800 => 2000 because IT9135 v2 is slow to gain lock */

 Check bandwidth */

 Program tuner */

 Coefficients */

 IF frequency control */

 Get used IF frequency */

 VHF */

 UHF */

 Reset FSM */

 Read all needed TPS registers */

 Radio channel status: 0=no result, 1=has signal, 2=no signal */

 Has signal */

 TPS lock */

 Full lock */

 Signal strength */

 CNR */

 Read raw SNR value */

 Read superframe number */

 Read current transmission mode */

 2k */

 8k */

 4k */

 Read current modulation */

			/*

			 * QPSK

			 * CNR[dB] 13 * -log10((1690000 - value) / value) + 2.6

			 * value [653799, 1689999], 2.6 / 13 = 3355443

			/*

			 * QAM-16

			 * CNR[dB] 6 * log10((value - 370000) / (828000 - value)) + 15.7

			 * value [371105, 827999], 15.7 / 6 = 43900382

			/*

			 * QAM-64

			 * CNR[dB] 8 * log10((value - 193000) / (425000 - value)) + 23.8

			 * value [193246, 424999], 23.8 / 8 = 49912218

 UCB/PER/BER */

 Outer FEC, 204 byte packets */

 Inner FEC, bits */

		/*

		 * Packet count used for measurement is 10000

		 * (rsd_packet_count). Maybe it should be increased?

 Use DVBv5 CNR */

 Return 0.1 dB for AF9030 and 0-0xffff for IT9130. */

 1000x => 10x (0.1 dB) */

 1000x => 1x (1 dB) */

 Read current modulation */

 scale value to 0x0000-0xffff */

 Read signal strength of 0-100 scale */

 Scale value to 0x0000-0xffff */

 VHF */

 UHF */

 Scale value to 0x0000-0xffff */

 Allocate memory for the internal state */

 Setup the state */

 USB mode for AF9035 */

 Create regmap */

 Firmware version */

 Sleep as chip seems to be partly active by default */

 IT9135 did not like to sleep at that early */

 Create dvb frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *    Support for OR51132 (pcHDTV HD-3000) - VSB/QAM

 *

 *    Copyright (C) 2007 Trent Piepho <xyzzy@speakeasy.org>

 *

 *    Copyright (C) 2005 Kirk Lapray <kirk_lapray@bigfoot.com>

 *

 *    Based on code from Jack Kelliher (kelliher@xmission.com)

 *                           Copyright (C) 2002 & pcHDTV, inc.

/*

 * This driver needs two external firmware files. Please copy

 * "dvb-fe-or51132-vsb.fw" and "dvb-fe-or51132-qam.fw" to

 * /usr/lib/hotplug/firmware/ or /lib/firmware/

 * (depending on configuration of firmware hotplug).

 Configuration settings */

 Demodulator private data */

 Result of last SNR calculation */

 Tuner private data */

 Write buffer to demod */

 msleep(20); */ 
/* Write constant bytes, e.g. or51132_writebytes(state, 0x04, 0x42, 0x00);

   Less code and more efficient that loading a buffer on the stack with

 Read data from demod into buffer.  Returns 0 on success. */

 msleep(20); */ 
 Reads a 16-bit demod register.  Returns <0 on error. */

 Get size of firmware A and B */

 Upload firmware */

 50ms for operation to begin */

 Read back ucode version to besure we loaded correctly and are really up and running */

 Get uCode version */

		/* Once upon a time, this command might have had something

		   to do with getting the firmware version, but it's

		   not used anymore:

 Read 8 bytes, two bytes at a time */

 Auto CH, Auto NTSC rej, MPEGser, MPEG2tr, phase noise-high */

 REC MODE inv IF spectrum, Normal */

 Channel MODE ATSC/VSB8 */

	/* All QAM modes are:

	   Auto-deinterleave; MPEGser, MPEG2tr, phase noise-high

 Channel MODE Auto QAM64/256 */

 Channel MODE QAM256 */

 Channel MODE QAM64 */

 Set Receiver 1 register */

 Set operation mode in Receiver 6 register */

/* Some modulations use the same firmware.  This classifies modulations

 Upload new firmware only if we need a different one */

 Set non-punctured clock for VSB */

 Set punctured clock for QAM */

 Change only if we are actually changing the modulation */

 Set to current mode */

 Update current frequency */

 Receiver Status */

 FIXME: Read frequency from frontend, take AFC into account */

 FIXME: How to read inversion setting? Receiver 6 register? */

 Receiver Status */

 Receiver Lock */

/* Calculate SNR estimation (scaled by 2^24)



   8-VSB SNR and QAM equations from Oren datasheets



   For 8-VSB:

     SNR[dB] = 10 * log10(897152044.8282 / MSE^2 ) - K



     Where K = 0 if NTSC rejection filter is OFF; and

	   K = 3 if NTSC rejection filter is ON



   For QAM64:

     SNR[dB] = 10 * log10(897152044.8282 / MSE^2 )



   For QAM256:

     SNR[dB] = 10 * log10(907832426.314266  / MSE^2 )



   We re-write the snr equation as:

     SNR * 2^24 = 10*(c - 2*intlog10(MSE))

   Where for QAM256, c = log10(907832426.314266) * 2^24

 No signal */

		/* Negative SNR, which is possible, but realisticly the

		demod will lose lock before the signal gets this bad.  The

 SNR after Equalizer */

	/* Read status, contains modulation type for QAM_AUTO and

 QAM64 */

 Calculate SNR using noise, c, and NTSC rejection correction */

 Calculate Strength from SNR up to 35dB */

 Even though the SNR can go higher than 35dB, there is some comfort */

 factor in having a range of strong signals that can show at 100%   */

 Rather than use the 8.8 value snr, use state->snr which is 8.24 */

 scale the range 0 - 35*2^24 into 0 - 65535 */

 Allocate memory for the internal state */

 Setup the state */

 Create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Samsung S5H1411 VSB/QAM demodulator driver



    Copyright (C) 2008 Steven Toth <stoth@linuxtv.org>





 configuration settings */

 Register values to initialise the demod, defaults to VSB */

 VSB SNR lookup table */

 QAM64 SNR lookup table */

 QAM256 SNR lookup table */

 8 bit registers, 16 bit values */

 Configure MPEG Signal Timing charactistics */

 Inverted */

 Talk to the demod, set the FEC, GUARD, QAM settings etc */

	/* Issue a reset to the demod so it knows to resync against the

/* Reset the demod hardware and reset all of the configuration registers

 The datasheet says that after initialisation, VSB is default */

	/* Although the datasheet says it's in VSB, empirical evidence

	   shows problems getting lock on the first tuning request.  Make

 Serial */

 Parallel */

 Note: Leaving the I2C gate closed. */

 Register F2 bit 15 = Master Lock, removed */

 QAM FEC Lock */

 QAM EQ Lock */

 FEC Lock */

 EQ Lock */

 AFC Lock */

 Get the tuner status */

	/* borrowed from lgdt330x.c

	 *

	 * Calculate strength from SNR up to 35dB

	 * Even though the SNR can go higher than 35dB,

	 * there is some comfort factor in having a range of

	 * strong signals that can show at 100%

		/* The following calculation method was chosen

		 * purely for the sake of code re-use from the

 Convert from SNR in dB * 10 to 8.24 fixed-point */

		/* Convert from 8.24 fixed-point to

 allocate memory for the internal state */

 setup the state */

 check if the demod exists */

 create dvb_frontend */

 Note: Leaving the I2C gate open here. */

 Put the device into low-power mode until first use */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * stv0900_sw.c

 *

 * Driver for ST STV0900 satellite demodulator IC.

 *

 * Copyright (C) ST Microelectronics.

 * Copyright (C) 2009 NetUP Inc.

 * Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>

 cut 3.0 */

cut 3.0 */

cut 2.0 and 1.x*/

cut 1.x and 2.0*/

cut 1.x and 2.0*/

cut 2.0*/

cut 3.0*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tda18271c2dd: Driver for the TDA18271C2 tuner

 *

 * Copyright (C) 2010 Digital Devices GmbH

 Max transfer size done by I2C transfer functions */

 Tracking filter settings for band 0..6 */

 Calibration temperature */

 true to use Pin 8 for FM Radio */

 Send in stdb, but leave osc on */

 Thermometer off */

 CAL_mode = 0 ????????? */

 PD_AGC1_Det = 0 */

 AGC1_loop_off = 0, AGC1_Gain = 6 dB */

 AGC2_Gain = -6 dB */

 ForceLP_Fc2_En = 0, LP_Fc[2] = 0 */

 CalDiv = u32( OscFreq * 16384 / 16000000 ); */

 CAL_mode = 0 */

 AGC1_Gain = 3 */

 Switching off LT (as datasheet says) causes calibration on C1 to fail */

 (Readout of Cprog is always 255) */

 C1: ID == 83, C2: ID == 84 */

 SM_LT = 1 */

 LO_ForceSrce = 1 */

 CAL_ForceSrce = 1 */

 RFC_Cprog = 0 */

 ForceLock = 0; */

 CAL_Mode = 3 */

 LO_ForceSrce = 0 */

 CAL_ForceSrce = 0 */

 ForceLock = 1; */

 CAL_Mode = 0 */

 SM_LT = 0 */

 AGC1_Gain = 0 */

 state->m_RF_A1[RF_Band] = ???? */

 CAL_mode = 1 */

 Launch power measurement */

 Chip version, (needed for C1 workaround in CalibrateRF) */

 Launch power measurement */

 If level = 0, Cal mode = 0 */

 AGC 1 Gain = 0 */

 AGC 2 Gain = 0 (Datasheet = 3) */

 ForceLP_Fc2_En = 1, LPFc[2] = 1 */

 Temperature stabilisation */

 also switches off Cal mode !!! */

 AGC1 gain setup */

 IRC Cal Low band */

 diff between sw and datasheet (ep3-md3) */

 missing in sw */

 IRC Cal mid band */

 Datasheet = 0xA9 */

 IRC Cal high band */

 Datasheet = 0x91 */

 Back to normal */

 m_bInitDone = true; */

 Power up */

 TODO Temperature compensation. There is defenitely a scale factor */

      missing in the datasheet, so leave it out for now.           */

 printk("tda18271c2dd: %s Freq = %d Standard = %d IF = %d\n", __func__, Frequency, Standard, IntermediateFrequency); */

 get values from tables */

 switch RFAGC to high speed mode */

 m_EP4 default for XToutOn, CAL_Mode (0) */

 state->m_Regs[EP4] = state->m_EP4 | state->m_IFLevelDigital; */

 Add IF_notch for digital */

 Note: This is missing from flowchart in TDA18271 specification ( 1.5 MHz cutoff for FM ) */

 ForceLP_Fc2_En = 1, LPFc[2] = 1 */

 ForceLP_Fc2_En = 0, LPFc[2] = 0 */

 Dis_Power_level = 1, Filter */

 CALVCO_FortLOn = MS */

 AGC1_always_master = 0 */

 AGC_firstn = 0 */

 LO_forceSrce = 1 */

 LO_forceSrce = 0 */

 CAL_forceSrce = 1 */

 CAL_forceSrce = 0 */

 RFAGC to normal mode */

 Allow AGC's to settle down */

 Scale this from 0 to 50000 */

 Scale range 500-1500 to 50000-80000 */

 struct tda_state *state = fe->tuner_priv; */

 *bandwidth = priv->bandwidth; */

 SPDX-License-Identifier: GPL-2.0-or-later

/* DVB compliant Linux driver for the DVB-S si2109/2110 demodulator

*

* Copyright (C) 2008 Igor M. Liplianin (liplianin@me.by)

Sampling rate of the ADC in MHz*/

	register default initialization */

 set i2c_inc_disable */

	low level read/writes */

 = { reg1, data };*/

fill the FIFO*/

 begin LNB signaling */

	30.06.2008 */

DVB QPSK SYSTEM MODE REG*/

transport stream config*/

	/*

	mode = PARALLEL;

	sdata_form = LSB_FIRST;

	clk_edge = FALLING_EDGE;

	clk_mode = CLK_GAPPED_MODE;

	strt_len = BYTE_WIDE;

	sync_pol = ACTIVE_HIGH;

	val_pol = ACTIVE_HIGH;

	err_pol = ACTIVE_HIGH;

	sclk_rate = 0x00;

	parity = 0x00 ;

	data_delay = 0x00;

	clk_delay = 0x00;

	pclk_smooth = 0x00;

	/*	sclk_rate + (parity << 2)

		+ (data_delay << 3) + (clk_delay << 4)

		+ (pclk_smooth << 5);

	/*status = si21_readreg(state, ANALOG_AGC_POWER_LEVEL_REG,

/*	initiates a channel acquisition sequence

 write code rates to use in the Viterbi search */

 clear acq_start bit */

 use new Carrier Frequency Offset Estimator (QuickLock) */

 start automatic acq */

	/* freq		Channel carrier frequency in KHz (i.e. 1550000 KHz)

 in MHz */

 boolean */

 INTERMEDIATE VALUES */

 MHz */

 MHz */

 allowable sample rates for ADC in MHz */

 in MHz */

 in MHz */

ADC MHz*/

 ppm */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 standby off */

	/* register 0x00 contains:

		0x34 for SI2107

		0x24 for SI2108

		0x14 for SI2109

		0x04 for SI2110

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-only

/*

   Driver for the Spase sp887x demodulator

/*

 * This driver needs external firmware. Please use the command

 * "<kerneldir>/scripts/get_dvb_firmware sp887x" to

 * download/extract it, and then copy it to /usr/lib/hotplug/firmware

 * or /lib/firmware (depending on configuration of firmware hotplug).

 demodulator private data */

		/*

		 *  in case of soft reset we ignore ACK errors...

 microcontroller STOP */

 microcontroller START */

 setup AGC parameters */

/*

 *  load firmware and setup MPEG interface...

 ignore the first 10 bytes, then we expect 0x4000 bytes of firmware */

 soft reset */

 setup write pointer to -1 (end of memory) */

 bit 0x8000 in address is set to enable 13bit mode */

 dummy write (wrap around to start of memory) */

 bit 0x8000 in address is set to enable 13bit mode */

 bit 0x4000 enables multibyte read/write transfers */

 write register is 0xf0a */

 don't write RS bytes between packets */

 suppress clock if (!data_valid) */

 setup MPEG interface... */

 parallel mode (serial mode == 1) */

 ADC mode, 2 for MT8872, 3 for SP8870/SP8871 */

 bit 0x010: enable data valid signal */

 use specified parameters */

 enable autoprobing */

/*

 *  estimates division of two 24bit numbers,

 *  derived from the ves1820/stv0299 driver code

[kHz]

 sample rate correction */

 carrier offset correction */

 setup the PLL */

 read status reg in order to clear <pending irqs */

 filter for 6/7/8 Mhz channel */

 scan order: 2k first = 0, 8k first = 1 */

	/* enable OFDM and SAW bits as lock indicators in sync register 0xf17,

	 * optimize algorithm for given bandwidth...

if (sync0x200 & 0x004)

	*status |= FE_HAS_SYNC | FE_HAS_CARRIER;

if (sync0x200 & 0x008)

	*status |= FE_HAS_VITERBI;

 tuner adjustment requested...*/

 tristate TS output and disable interface pins */

 request the firmware, this will block until someone uploads it */

 enable TS output and interface pins */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	STB0899 Multistandard Frontend driver

	Copyright (C) Manu Abraham (abraham.manu@gmail.com)



	Copyright (C) ST Microelectronics



 Max transfer size done by I2C transfer functions */

1;

 C/N in dB/10, NIRM/NIRL */

/* DVB-S AGCIQ_VALUE vs. signal level in dBm/10.

 * As measured, connected to a modulator.

 * -8.0 to -50.0 dBm directly connected,

 * -52.0 to -74.8 with extra attenuation.

 * Cut-off to AGCIQ_VALUE = 0x80 below -74.8dBm.

 * Crude linear extrapolation below -84.8dBm and above -8.0dBm.

/* DVB-S2 IF_AGC_GAIN vs. signal level in dBm/10.

 * As measured, connected to a modulator.

 * -8.0 to -50.1 dBm directly connected,

 * -53.0 to -76.6 with extra attenuation.

 * Cut-off to IF_AGC_GAIN = 0x3fff below -76.6dBm.

 * Crude linear extrapolation below -76.6dBm and above -8.0dBm.

 DVB-S2 Es/N0 quant in dB/100 vs read value * 100*/

 DVB-S2 Es/N0 estimate in dB/100 vs read value */

	/*

	 * Bug ID 9:

	 * access to 0xf2xx/0xf6xx

	 * must be followed by read from 0xf2ff/0xf6ff.

 0xf3	S2 Base Address (MSB)	*/

 0xfc	S2 Base Address (LSB)	*/

 0x00	Base Address (LSB)	*/

 0x04	Base Address (LSB)	*/

 0x00	Base Address (MSB)	*/

 0x00	Base Address (MSB)	*/

 0xf3	Reg Offset	*/

 0x44	Reg Offset	*/

 Dummy	*/

 Actual	*/

 Base Address Setup	*/

 0xf3	S2 Base Address (MSB)	*/

 0xfc	S2 Base Address (LSB)	*/

 0x00	Base Address (LSB)	*/

 0x04	Base Address (LSB)	*/

 0x00	Base Address (MSB)	*/

 0x00	Base Address (MSB)	*/

 0xf3	Reg Offset	*/

 0x44	Reg Offset	*/

 data			*/

 data			*/

 data			*/

 data			*/

	/*

	 * Bug ID 9:

	 * access to 0xf2xx/0xf6xx

	 * must be followed by read from 0xf2ff/0xf6ff.

	/*

	 * Bug ID 9:

	 * access to 0xf2xx/0xf6xx

	 * must be followed by read from 0xf2ff/0xf6ff.

/*

 * stb0899_get_mclk

 * Get STB0899 master clock frequency

 * ExtClk: external clock frequency (Hz)

/*

 * stb0899_set_mclk

 * Set STB0899 master Clock frequency

 * Mclk: demodulator master clock

 * ExtClk: external clock frequency (Hz)

 post process event */

 post process event */

/*

 * stb0899_get_alpha

 * return: rolloff

/*

 * stb0899_init_calc

 Read registers (in burst mode)	*/

 AGC1R and AGC2O	*/

 Initial calculations	*/

 DVBS2 Initial calculations	*/

 Set AGC value to the middle	*/

/*

	if ((pParams->SpectralInv == FE_IQ_NORMAL) || (pParams->SpectralInv == FE_IQ_AUTO))

		pParams->IQLocked = 0;

	else

		pParams->IQLocked = 1;

 enable FIFO precharge	*/

 wait for FIFO empty	*/

 extract data */

 wait for diseqc idle	*/

 set to burst mode	*/

 unmodulated	*/

 modulated	*/

 wait for diseqc idle	*/

 restore state	*/

/*

	struct dvb_diseqc_slave_reply rx_data;

 count = 0, i; */

 disable Tx spy	*/

 DiSEqC Tx freq	*/

/*

	u8 reg;

 post process event */

 Activate all clocks; DVB-S2 registers are inaccessible otherwise. */

 post process event */

 init device		*/

 init S2 demod	*/

 init S1 demod	*/

 init S2 fec		*/

 init test		*/

 C/N = 30.1 dB */

 C/N = 27.0 dB */

 quantn = 100 * log(quant^2) */

 estn = 100 * log(est) */

 snr(dBm/10) = -10*(log(est)-log(quant^2)) => snr(dBm/10) = (100*log(quant^2)-100*log(est))/10 */

 post process event */

 post process event */

/*

 * stb0899_get_error

 * viterbi error for DVB-S/DSS

 * packet error for DVB-S2

 * Bit Error Rate or Packet Error Rate * 10 ^ 7

 Viterbi Check	*/

 Error Rate		*/

 ber = ber * 10 ^ 7	*/

 ber = ber * 10 ^ 7	*/

 wait for diseqc idle	*/

 FECM/Viterbi ON	*/

 FECM/Viterbi OFF	*/

 FECM/Viterbi ON	*/

/*

 * stb0899_set_iterations

 * set the LDPC iteration scale function

 checking Search Range is meaningless for a fixed 3 Mhz			*/

 15Mb < srate < 45Mb, gain = 8dB	*/

  5Mb < srate < 15Mb, gain = 12dB	*/

  1Mb < srate <  5Mb, gain = 14db	*/

			/*

			 * search = user search range +

			 *	    500Khz +

			 *	    2 * Tuner_step_size +

			 *	    10% of the symbol rate

 What to do for tuners having no bandwidth setup ?	*/

 enable tuner I/O */

 disable tuner I/O */

 Set DVB-S1 AGC		*/

 Run the search algorithm	*/

				stb0899_write_reg(state, STB0899_ERRCTRL1, 0x3d); /* Viterbi Errors	*/

				internal->v_status = stb0899_read_reg(state, STB0899_VSTATUS);

				internal->err_ctrl = stb0899_read_reg(state, STB0899_ERRCTRL1);

				dprintk(state->verbose, FE_DEBUG, 1, "VSTATUS=0x%02x", internal->v_status);

				dprintk(state->verbose, FE_DEBUG, 1, "ERR_CTRL=0x%02x", internal->err_ctrl);

 enable tuner I/O */

 disable tuner I/O */

			pParams->SpectralInv		= pSearch->IQ_Inversion;

 Set DVB-S2 AGC		*/

 Set IterScale =f(MCLK,SYMB)	*/

 Run the search algorithm	*/

				stb0899_write_reg(state, STB0899_ERRCTRL1, 0xb6); /* Packet Errors	*/

				internal->v_status = stb0899_read_reg(state, STB0899_VSTATUS);

				internal->err_ctrl = stb0899_read_reg(state, STB0899_ERRCTRL1);

	.wakeup				= stb0899_wakeup,

 use configured inversion as default -- we'll later autodetect inversion */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Panasonic MN88473 DVB-T/T2/C demodulator driver

 *

 * Copyright (C) 2014 Antti Palosaari <crope@iki.fi>

 Program tuner */

 Calculate IF registers */

 PLP */

 Reset FSM */

 Lock detection */

 Signal strength */

 AGCRD[15:6] gives us a 10bit value ([5:0] are always 0) */

 CNR */

 DVB-T CNR */

 CNR[dB]: 10 * (log10(65536 / value) + 0.2) */

 log10(65536) = 80807124, 0.2 = 3355443 */

 DVB-T2 CNR */

 0=SISO, 1=MISO */

 CNR[dB]: 10 * (log10(16384 / value) - 0.6) */

 log10(16384) = 70706234, 0.6 = 10066330 */

 CNR[dB]: 10 * (log10(65536 / value) + 0.2) */

 log10(65536) = 80807124, 0.2 = 3355443 */

 DVB-C CNR */

 signal */

 noise */

 CNR[dB]: 10 * log10(8 * (signal / noise)) */

 log10(8) = 15151336 */

 BER */

 DVB-T & DVB-C BER */

 PER */

 Check if firmware is already running */

 Request the firmware, this will block and timeout */

 Parity check of firmware */

 TS config */

 init stats here to indicate which stats are supported */

 Caller really need to provide pointer for frontend we create */

	/*

	 * Chip has three I2C addresses for different register banks. Used

	 * addresses are 0x18, 0x1a and 0x1c. We register two dummy clients,

	 * 0x1a and 0x1c, in order to get own I2C client for each register bank.

	 *

	 * Also, register bank 2 do not support sequential I/O. Only single

	 * register write or read is allowed to that bank.

 Check demod answers with correct chip id */

 Sleep because chip is active by default */

 Create dvb frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *    Support for LGDT3306A - 8VSB/QAM-B

 *

 *    Copyright (C) 2013 Fred Richter <frichter@hauppauge.com>

 *    - driver structure based on lgdt3305.[ch] by Michael Krufky

 *    - code based on LG3306_V0.35 API by LG Electronics Inc.

/*

 * Older drivers treated QAM64 and QAM256 the same; that is the HW always

 * used "Auto" mode during detection.  Setting "forced_manual"=1 allows

 * the user to treat these modes as separate.  For backwards compatibility,

 * it's off by default.  QAM_AUTO can now be specified to achive that

 * effect even if "forced_manual"=1

 FGR - comment out to remove dump code */

/*

 * LG3306A Register Usage

 *  (LG does not really name the registers, so this code does not either)

 *

 * 0000 -> 00FF Common control and status

 * 1000 -> 10FF Synchronizer control and status

 * 1F00 -> 1FFF Smart Antenna control and status

 * 2100 -> 21FF VSB Equalizer control and status

 * 2800 -> 28FF QAM Equalizer control and status

 * 3000 -> 30FF FEC control and status

 ------------------------------------------------------------------------ */

 transport packet format - TPSENB=0x80 */

	/*

	 * start of packet signal duration

	 * TPSSOPBITEN=0x40; 0=byte duration, 1=bit duration

 TPCLKSUPB=0x10 */

 TPCLKPOL=0x04, TPVALPOL=0x02 */

		/*

		 * Tristate bus; TPOUTEN=0x80, TPCLKOUTEN=0x20,

		 * TPDATAOUTEN=0x08

 AGCIFOUTENB=0x40; 1=Disable IFAGC pin */

 enable IFAGC pin */

 enable bus */

 into reset */

 power down */

 out of reset */

 power up */

 0. Spectrum inversion detection manual; spectrum inverted */

 SPECINVAUTO Off */

 SPECINV On */

 1. Selection of standard mode(0x08=QAM, 0x80=VSB) */

 2. Bandwidth mode for VSB(6MHz) */

 STDOPDETTMODE[2:0]=3 */

 3. QAM mode detection mode(None) */

 STDOPDETCMODE[1:0]=0 */

 4. ADC sampling frequency rate(2x sampling) */

 SAMPLING4XFEN=0 */

 FGR - disable any AICC filtering, testing only */

 AICCFIXFREQ0 NT N-1(Video rejection) */

 AICCFIXFREQ1 NT N-1(Audio rejection) */

 AICCFIXFREQ2 NT Co-Channel(Video rejection) */

 AICCFIXFREQ3 NT Co-Channel(Audio rejection) */

 FGR - this works well for HVR-1955,1975 */

 5. AICCOPMODE  NT N-1 Adj. */

 AICCFIXFREQ0 NT N-1(Video rejection) */

 AICCFIXFREQ1 NT N-1(Audio rejection) */

 AICCFIXFREQ2 NT Co-Channel(Video rejection) */

 AICCFIXFREQ3 NT Co-Channel(Audio rejection) */

 6. EQ step size */

 7. Reset */

 1. Selection of standard mode(0x08=QAM, 0x80=VSB) */

 1a. Spectrum inversion detection to Auto */

 SPECINV Off */

 SPECINVAUTO On */

 2. Bandwidth mode for QAM */

 STDOPDETTMODE[2:0]=0 VSB Off */

 3. : 64QAM/256QAM detection(manual, auto) */

 Check for forced Manual modulation modes; otherwise always "auto" */

 STDOPDETCMODE[1:0]= 1=Manual */

 STDOPDETCMODE[1:0]= 2=Auto */

 3a. : 64QAM/256QAM selection for manual */

 QMDQMODE[2:0]=2=QAM64 */

 QMDQMODE[2:0]=4=QAM256 */

 4. ADC sampling frequency rate(4x sampling) */

 SAMPLING4XFEN=1 */

 5. No AICC operation in QAM mode */

 5.1 V0.36 SRDCHKALWAYS : For better QAM detection */

 5.2 V0.36 Control of "no signal" detector function */

 5.3 Fix for Blonder Tongue HDE-2H-QAM and AQM modulators */

 SELFSYNCFINDEN_CQS=0; disable auto reset */

 6. Reset */

 ------------------------------------------------------------------------ */

 TODO: anything we want to do here??? */

 ------------------------------------------------------------------------ */

 0=Manual 1=Auto(QAM only) - SPECINVAUTO=0x04 */

 3.25Mhz */

 3.50Mhz */

 4.00Mhz */

 5.00Mhz */

 5.38Mhz */

 ------------------------------------------------------------------------ */

 NI2CRPTEN=0x80 */

 force re-tune, when we wake */

 disable data bus */

 power down */

 1. Normal operation mode */

 SIMFASTENB=0x01 */

 2. Spectrum inversion auto detection (Not valid for VSB) */

 3. Spectrum inversion(According to the tuner configuration) */

 4. Peak-to-peak voltage of ADC input signal */

 ADCSEL1V=0x80=1Vpp; 0x00=2Vpp */

 5. ADC output data capture clock phase */

 0=same phase as ADC clock */

 5a. ADC sampling clock source */

 ADCCLKPLLSEL=0x08; 0=use ext clock, not PLL */

 6. Automatic PLL set */

 PLLSETAUTO=0x40; 0=off */

 24MHz */

 7. Frequency for PLL output(0x2564 for 192MHz for 24MHz) */

 8. ADC sampling frequency(0x180000 for 24MHz sampling) */

 25MHz */

 7. Frequency for PLL output */

 8. ADC sampling frequency(0x190000 for 25MHz sampling) */

 9. Center frequency of input signal of ADC */

 3.25MHz */

 10. Fixed gain error value */

 gain error=0 */

 10a. VSB TR BW gear shift initial step */

 SAMGSAUTOSTL_V[3:0] = 2 */

 10b. Timing offset calibration in low temperature for VSB */

 10c. Timing offset calibration in low temperature for QAM */

 11. Using the imaginary part of CIR in CIR loading */

 do not use imaginary of CIR */

 12. Control of no signal detector function */

 NOUSENOSIGDET=0, enable no signal detector */

 FGR - put demod in some known mode */

 13. TP stream format */

 14. disable output buses */

 15. Sleep (in reset) */

 power up */

 spectral_inversion defaults already set for VSB and QAM */

 enable data bus */

 ------------------------------------------------------------------------ */

 Carrier offset sub loop bandwidth */

 SNR is over 18dB and no ghosting */

 final bandwidth = 0 */

 final bandwidth = 4 */

 Adjust Notch Filter */

 Turn on the Notch Filter */

 VSB Timing Recovery output normalization */

 Channel variation */

 SNR of Frame sync */

 Strong Main CIR */

 Dynamic ghost exists */

 Weak ghost or static channel */

 signal error */

 log(1)=0 */

 x > 10 */

 was our input an exact multiple of 10 */

 don't need to interpolate */

 find our place on the log curve */

 do a linear interpolation to get in-between values */

 Mean-Square Error */

 Constelation power */

 no signal */

 report SNR in dB * 10 */

	/*

	 * Calculate some sort of "strength" from SNR

 snr_x10 */

 snr*100 */

 16dB */

 need to know actual modulation to set proper SNR baseline */

 QAM-256 28dB */

 QAM-64  22dB */

 65% */

 78%-100% */

 ------------------------------------------------------------------------ */

	/* FGR - FIXME - I don't know what value is expected by dvb_core

 NBERVALUE[24-31] */

 NBERVALUE[16-23] */

 NBERVALUE[8-15] */

 NBERVALUE[0-7] */

	/* FGR - FIXME - I don't know what value is expected by dvb_core

 TPIFTPERRCNT[0-7] */

 force re-tune */

 set frontend */

 check if we have a valid signal */

 verify that we're talking to a lg3306a */

	/* FGR - NOTE - there is no obvious ChipId to check; we check

 FIXME - re-enable when we know this is right */

 FIXME - re-enable when we know this is right */

 FIXME - re-enable when we know this is right */

 SOFTRSTB 1'b1 1'b1 1'b1 ADCPDB 1'b1 PLLPDB GBBPDB 11111111 */

 1'b1 1'b1 1'b0 1'b0 AUTORPTRS */

 NI2CRPTEN 1'b0 1'b0 1'b0 SPECINVAUT */

 AGCRFOUT */

 ADCSEL1V ADCCNT ADCCNF ADCCNS ADCCLKPLL */

 PLLINDIVSE */

 PLLCTRL[7:0] 11100001 */

 SYSINITWAITTIME[7:0] (msec) 00001000 */

 STDOPMODE[7:0] 10000000 */

 1'b0 1'b0 1'b0 STDOPDETTMODE[2:0] STDOPDETCMODE[1:0] 00011110 */

 DAFTEN 1'b1 x x SCSYSLOCK */

 SCSYSLOCKCHKTIME[7:0] (10msec) 01100100 */

 x SAMPLING4 */

 SAMFREQ[15:8] 00000000 */

 SAMFREQ[7:0] 00000000 */

 IFFREQ[15:8] 01100000 */

 IFFREQ[7:0] 00000000 */

 AGCEN AGCREFMO */

 AGCRFFIXB AGCIFFIXB AGCLOCKDETRNGSEL[1:0] 1'b1 1'b0 1'b0 1'b0 11101000 */

 AGCFIXVALUE[7:0] 01111111 */

 AGCREF[15:8] 00001010 */

 AGCREF[7:0] 11100100 */

 AGCDELAY[7:0] 00100000 */

 AGCRFBW[3:0] AGCIFBW[3:0] 10001000 */

 AGCUDOUTMODE[1:0] AGCUDCTRLLEN[1:0] AGCUDCTRL */

 1'b1 PFEN MFEN AICCVSYNC */

 1'b0 1'b1 1'b0 1'b1 AICCVSYNC */

 AICCALPHA[3:0] 1'b1 1'b0 1'b1 1'b0 01111010 */

 AICCDETTH[19:16] AICCOFFTH[19:16] 00000000 */

 AICCDETTH[15:8] 01111100 */

 AICCDETTH[7:0] 00000000 */

 AICCOFFTH[15:8] 00000101 */

 AICCOFFTH[7:0] 11100000 */

 AICCOPMODE3[1:0] AICCOPMODE2[1:0] AICCOPMODE1[1:0] AICCOPMODE0[1:0] 00000000 */

 AICCFIXFREQ3[23:16] 00000000 */

 AICCFIXFREQ3[15:8] 00000000 */

 AICCFIXFREQ3[7:0] 00000000 */

 AICCFIXFREQ2[23:16] 00000000 */

 AICCFIXFREQ2[15:8] 00000000 */

 AICCFIXFREQ2[7:0] 00000000 */

 AICCFIXFREQ1[23:16] 00000000 */

 AICCFIXFREQ1[15:8] 00000000 */

 AICCFIXFREQ1[7:0] 00000000 */

 AICCFIXFREQ0[23:16] 00000000 */

 AICCFIXFREQ0[15:8] 00000000 */

 AICCFIXFREQ0[7:0] 00000000 */

 1'b0 1'b1 1'b0 1'b0 x DAGC1STER */

 DAGC1STEN DAGC1STER */

 DAGC1STREF[15:8] 00001010 */

 DAGC1STREF[7:0] 11100100 */

 DAGC2NDE */

 DAGC2NDREF[15:8] 00001010 */

 DAGC2NDREF[7:0] 10000000 */

 DAGC2NDLOCKDETRNGSEL[1:0] */

 1'b1 SAMGEARS */

 SAMLFGMA */

 SAMLFBWM */

 1'b1 CRGEARSHE */

 CRLFGMAN */

 CFLFBWMA */

 CRLFGMAN */

 x x x x CRLFGSTEP_VS[3:0] xxxx1001 */

 CRLFBWMA */

 CRLFBWMA */

 1'b0 1'b1 1'b1 1'b0 MSECALCDA */

 TPOUTEN TPIFEN TPCLKOUTE */

 TPSENB TPSSOPBITE */

 TP47HINS x x CHBERINT PERMODE[1:0] PERINT[1:0] 1xx11100 */

 x x x x x IQSWAPCTRL[2:0] xxxxx000 */

 NBERCON NBERST NBERPOL NBERWSYN */

 x NBERLOSTTH[2:0] NBERACQTH[3:0] x0000000 */

 NBERPOLY[31:24] 00000000 */

 NBERPOLY[23:16] 00000000 */

 NBERPOLY[15:8] 00000000 */

 NBERPOLY[7:0] 00000000 */

 NBERPED[31:24] 00000000 */

 NBERPED[23:16] 00000000 */

 NBERPED[15:8] 00000000 */

 NBERPED[7:0] 00000000 */

 x AGCLOCK DAGCLOCK SYSLOCK x x NEVERLOCK[1:0] */

 SPECINVST */

 SYSLOCKTIME[15:8] */

 SYSLOCKTIME[7:0] */

 FECLOCKTIME[15:8] */

 FECLOCKTIME[7:0] */

 AGCACCOUT[15:8] */

 AGCACCOUT[7:0] */

 AICCREJSTATUS[3:0] AICCREJBUSY[3:0] */

 AICCVSYNC */

 CARRFREQOFFSET[15:8] */

 CARRFREQOFFSET[7:0] */

 SAMFREQOFFSET[23:16] */

 SAMFREQOFFSET[15:8] */

 SAMFREQOFFSET[7:0] */

 SYNCLOCK SYNCLOCKH */

 covered elsewhere */

 CONSTPWR[15:8] */

 CONSTPWR[7:0] */

 BMSE[15:8] */

 BMSE[7:0] */

 MSE[15:8] */

 MSE[7:0] */

 CONSTI[7:0] */

 CONSTQ[7:0] */

 TPIFTPERRCNT[7:0] */

 TPCORREC */

 VBBER[15:8] */

 VBBER[7:0] */

 VABER[15:8] */

 VABER[7:0] */

 TPERRCNT[7:0] */

 NBERLOCK x x x x x x x */

 NBERVALUE[31:24] */

 NBERVALUE[23:16] */

 NBERVALUE[15:8] */

 NBERVALUE[7:0] */

 1'b0 WODAGCOU */

 x x 1'b1 1'b1 x SRD_Q_QM */

 SRDWAITTIME[7:0] (10msec) 00100011 */

 SRDWAITTIME_CQS[7:0] (msec) 01100100 */

 x 1'b1 1'b0 1'b0 x QMDQAMMODE[2:0] x100x010 */

 1'b0 1'b1 1'b0 1'b0 SAMGSEND_CQS[3:0] 01001110 */

 SAMGSAUTOSTL_V[3:0] SAMGSAUTOEDL_V[3:0] 01000110 */

 1'b1 1'b1 SAMCNORMBP_V[1:0] 1'b0 1'b0 SAMMODESEL_V[1:0] 11100001 */

 SAMZTEDSE */

 EQSTATUSE */

 x PMAPG2_V[2:0] x DMAPG2_V[2:0] x001x011 */

 1'b1 EQSTATUSE */

 CRMAPBWSTL_V[3:0] CRMAPBWEDL_V[3:0] 00000100 */

 1'b0 x CRMODE_V[1:0] 1'b1 x 1'b1 x 0x111x1x */

 1'b0 1'b0 1'b1 1'b0 1'b1 PNBOOSTSE */

 CREPHNGAIN2_V[3:0] CREPHNPBW_V[3:0] 10010001 */

 x x x x x CREPHNEN_ */

 CREPHNTH_V[7:0] 00010101 */

 CRSWEEPN */

 CRPGAIN_V[3:0] x x 1'b1 1'b1 1001xx11 */

 CRPBW_V[3:0] x x 1'b1 1'b1 0001xx11 */

 DAFTSTATUS[1:0] x x x x x x */

 SRDSTATUS[1:0] x x x x x SRDLOCK */

 EQSTATUS_CQS[1:0] x x x x x x */

 EQSTATUS_V[1:0] x x x x x x */

 SMART_ANT */

 MODEDETE */

 x x x x x x x SFNRST xxxxxxx0 */

 NUMOFANT[7:0] 10000000 */

 x SELMASK[6:0] x0000000 */

 x SETMASK[6:0] x0000000 */

 x TXDATA[6:0] x0000000 */

 x CHNUMBER[6:0] x0000000 */

 AGCTIME[23:16] 10011000 */

 AGCTIME[15:8] 10010110 */

 AGCTIME[7:0] 10000000 */

 ANTTIME[31:24] 00000000 */

 ANTTIME[23:16] 00000011 */

 ANTTIME[15:8] 10010000 */

 ANTTIME[7:0] 10010000 */

 SYNCTIME[23:16] 10011000 */

 SYNCTIME[15:8] 10010110 */

 SYNCTIME[7:0] 10000000 */

 SNRTIME[31:24] 00000001 */

 SNRTIME[23:16] 01111101 */

 SNRTIME[15:8] 01111000 */

 SNRTIME[7:0] 01000000 */

 FECTIME[23:16] 00000000 */

 FECTIME[15:8] 01110010 */

 FECTIME[7:0] 01110000 */

 FECTHD[7:0] 00000011 */

 SNRTHD[23:16] 00001000 */

 SNRTHD[15:8] 01111111 */

 SNRTHD[7:0] 10000101 */

 IRQFLG x x SFSDRFLG MODEBFLG SAVEFLG SCANFLG TRACKFLG */

 x SYNCCON SNRCON FECCON x STDBUSY SYNCRST AGCFZCO */

 x x x SCANOPCD[4:0] */

 x x x x MAINOPCD[3:0] */

 x x RXDATA[13:8] */

 RXDATA[7:0] */

 x x SDTDATA[13:8] */

 SDTDATA[7:0] */

 ANTSNR[23:16] */

 ANTSNR[15:8] */

 ANTSNR[7:0] */

 x x x x ANTFEC[13:8] */

 ANTFEC[7:0] */

 MAXCNT[7:0] */

 SCANCNT[7:0] */

 MAXPW[23:16] */

 MAXPW[15:8] */

 MAXPW[7:0] */

 CURPWMSE[23:16] */

 CURPWMSE[15:8] */

 CURPWMSE[7:0] */

 SMART_ANT */

 1'b1 1'b1 1'b1 CIRQEN x x 1'b0 1'b0 1111xx00 */

 EQAUTOST */

 CHFAST[7:0] 01100000 */

 FFFSTEP_V[3:0] x FBFSTEP_V[2:0] 0001x001 */

 PHDEROTBWSEL[3:0] 1'b1 1'b1 1'b1 1'b0 10001110 */

 1'b1 1'b1 1'b1 1'b1 x x TPIFLOCKS */

 DYNTRACKFDEQ[3:0] x 1'b0 1'b0 1'b0 1010x000 */

 TRMODE[1:0] 1'b1 1'b1 1'b0 1'b1 1'b1 1'b1 01110111 */

 AICCCTRLE */

 PHNCNFCNT[7:0] 00000100 */

 1'b0 1'b0 1'b0 1'b1 x BADSINGLEDYNTRACKFBF[2:0] 0001x001 */

 1'b0 1'b0 1'b0 1'b1 x BADSLOWSINGLEDYNTRACKFBF[2:0] 0001x001 */

 CNFCNTTPIF[7:0] 00001000 */

 TPERRCNTTPIF[7:0] 00000001 */

 x x x x x x FBDLYCIR[9:8] */

 FBDLYCIR[7:0] */

 MAXPWRMAIN[7:0] */

 NCOMBDET x x x x x x x */

 x MAINSTRON */

 FFFEQSTEPOUT_V[3:0] FBFSTEPOUT_V[2:0] */

 x x SNRREF[5:0] */

 1'b0 1'b1 x x FFFSTEP_CQS[1:0] FFFCENTERTAP[1:0] 01xx1110 */

 1'b0 x 1'b0 1'b1 FBFSTEP_CQS[1:0] 1'b1 1'b0 0x011110 */

 ENNOSIGDE */

 1'b1 1'b1 NOUSENOSI */

 EQINITWAITTIME[7:0] 01100100 */

 1'b1 1'b1 1'b1 x x x 1'b0 RPTRSTM */

 RPTRSTWAITTIME[7:0] (100msec) 00110010 */

 FRAMELOC */

 1'b1 1'b0 1'b0 1'b0 x x FRAMELOCKMODE_CQS[1:0] 1000xx11 */

 VDLOCK_Q FRAMELOCK */

 MPEGLOCK */

 suppress DBG_REG during reg dump */

 DBG_DUMP */

 if this is set, it overrides the default swzigzag */

 create mux i2c adapter for tuner */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Sony CXD2820R demodulator driver

 *

 * Copyright (C) 2010 Antti Palosaari <crope@iki.fi>

 Write register table */

 update GPIOs only when needed */

 enable / disable */

 input / output */

 high / low */

 write bits [7:2] */

 write bits [5:0] */

 switch between DVB-T and DVB-T2 when tune fails */

 set frontend */

 frontend lock wait loop count */

 wait frontend lock */

 check if we have a valid signal */

 default: DVB-T/T2 */

/*

 * XXX: That is wrapper to cxd2820r_probe() via driver core in order to provide

 * proper I2C client for legacy media attach binding.

 * New users must use I2C client binding directly!

 Check demod answers with correct chip id */

	/*

	 * Chip has two I2C addresses for different register banks. We register

	 * one dummy I2C client in in order to get own I2C client for each

	 * register bank.

 Add GPIOs */

 Dynamic allocation */

		/*

		 * Use static GPIO configuration if GPIOLIB is undefined.

		 * This is fallback condition.

 Create dvb frontend */

 Setup callbacks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *    Support for LGDT3302 and LGDT3303 - VSB/QAM

 *

 *    Copyright (C) 2005 Wilson Michaels <wilsonmichaels@earthlink.net>

/*

 *                      NOTES ABOUT THIS DRIVER

 *

 * This Linux driver supports:

 *   DViCO FusionHDTV 3 Gold-Q

 *   DViCO FusionHDTV 3 Gold-T

 *   DViCO FusionHDTV 5 Gold

 *   DViCO FusionHDTV 5 Lite

 *   DViCO FusionHDTV 5 USB Gold

 *   Air2PC/AirStar 2 ATSC 3rd generation (HD5000)

 *   pcHDTV HD5500

 *

 Use Equalizer Mean Squared Error instead of Phaser Tracker MSE */

 #define USE_EQMSE */

 Configuration settings */

 Demodulator private data */

 Result of last SNR calculation */

 Tuner private data */

 data bytes to send */

 number of bytes to send */)

/*

 * This routine writes the register (reg) to the demod bus

 * then reads the data returned for (len) bytes.

 Software reset */

		/*

		 * bit 6 is active low software reset

		 * bits 5-0 are 1 to mask interrupts

 force reset high (inactive) and unmask interrupts */

 bit 0 is active low software reset */

 force reset high (inactive) */

	/*

	 * Array of byte pairs <address, value>

	 * to initialize each different chip

 Use 50MHz param values from spec sheet since xtal is 50 */

		/*

		 * Change the value of NCOCTFV[25:0] of carrier

		 * recovery center frequency register

		/*

		 * Change the TPCLK pin polarity

		 * data is valid on falling clock

		/*

		 * Change the value of IFBW[11:0] of

		 * AGC IF/RF loop filter bandwidth register

		/*

		 * Change the value of bit 6, 'nINAGCBY' and

		 * 'NSSEL[1:0] of ACG function control register 2

		/*

		 * Change the value of bit 6 'RFFIX'

		 * of AGC function control register 3

		/*

		 * Set the value of 'INLVTHD' register 0x2a/0x2c

		 * to 0x7fe

		/*

		 * Change the value of IAGCBW[15:8]

		 * of inner AGC loop filter bandwidth

	/*

	 * Hardware reset is done using gpio[0] of cx23880x chip.

	 * I'd like to do it here, but don't know how to find chip address.

	 * cx88-cards.c arranges for the reset bit to be inactive (high).

	 * Maybe there needs to be a callable function in cx88-core or

	 * the caller of this function needs to do it.

	/*

	 * Array of byte pairs <address, value>

	 * to initialize 8VSB for lgdt3303 chip 50 MHz IF

	/*

	 * Array of byte pairs <address, value>

	 * to initialize QAM for lgdt3303 chip

 Change only if we are actually changing the modulation */

 Select VSB mode */

 Select ANT connector if supported by card */

 Select QAM_64 mode */

 Select CABLE connector if supported by card */

 Select QAM_256 mode */

 Select CABLE connector if supported by card */

		/*

		 * select serial or parallel MPEG hardware interface

		 * Serial:   0x04 for LGDT3302 or 0x40 for LGDT3303

		 * Parallel: 0x00

 Select the requested mode */

 Tune to the specified frequency */

 Keep track of the new frequency */

	/*

	 * FIXME this is the wrong way to do this...

	 * The tuner is shared with the video4linux analog API

/*

 * Calculate SNR estimation (scaled by 2^24)

 *

 * 8-VSB SNR equations from LGDT3302 and LGDT3303 datasheets, QAM

 * equations from LGDT3303 datasheet.  VSB is the same between the '02

 * and '03, so maybe QAM is too?  Perhaps someone with a newer datasheet

 * that has QAM information could verify?

 *

 * For 8-VSB: (two ways, take your pick)

 * LGDT3302:

 *   SNR_EQ = 10 * log10(25 * 24^2 / EQ_MSE)

 * LGDT3303:

 *   SNR_EQ = 10 * log10(25 * 32^2 / EQ_MSE)

 * LGDT3302 & LGDT3303:

 *   SNR_PT = 10 * log10(25 * 32^2 / PT_MSE)  (we use this one)

 * For 64-QAM:

 *   SNR    = 10 * log10( 688128   / MSEQAM)

 * For 256-QAM:

 *   SNR    = 10 * log10( 696320   / MSEQAM)

 *

 * We re-write the snr equation as:

 *   SNR * 2^24 = 10*(c - intlog10(MSE))

 * Where for 256-QAM, c = log10(696320) * 2^24, and so on.

 No signal */

		/*

		 * Negative SNR, which is possible, but realisticly the

		 * demod will lose lock before the signal gets this bad.

		 * The API only allows for unsigned values, so just return 0

 read data buffer */

 noise value */

 per-modulation SNR calculation constant */

 Use Equalizer Mean-Square Error Register */

 SNR for ranges from -15.61 to +41.58 */

 log10(25*24^2)*2^24 */

 Use Phase Tracker Mean-Square Error Register */

 SNR for ranges from -13.11 to +44.08 */

 log10(25*32^2)*2^24 */

 log10(688128)*2^24 and log10(696320)*2^24 */

 return -EDRIVER_IS_GIBBERED; */

 read data buffer */

 noise value */

 per-modulation SNR calculation constant */

 Use Equalizer Mean-Square Error Register */

 SNR for ranges from -16.12 to +44.08 */

 log10(25*32^2)*2^24 */

 Use Phase Tracker Mean-Square Error Register */

 SNR for ranges from -13.11 to +44.08 */

 log10(25*32^2)*2^24 */

 log10(688128)*2^24 and log10(696320)*2^24 */

 return -EDRIVER_IS_GIBBERED; */

 Convert from 8.24 fixed-point to 8.8 */

 Calculate Strength from SNR up to 35dB */

	/*

	 * Even though the SNR can go higher than 35dB, there is some comfort

	 * factor in having a range of strong signals that can show at 100%

 Rather than use the 8.8 value snr, use state->snr which is 8.24 */

 scale the range 0 - 35*2^24 into 0 - 65535 */

 Reset status result */

 AGC status register */

		/*

		 * Test signal does not exist flag

		 * as well as the AGC lock flag.

	/*

	 * You must set the Mask bits to 1 in the IRQ_MASK in order

	 * to see that status bit in the IRQ_STATUS register.

	 * This is done in SwReset();

 signal status */

 sync status */

 FEC error status */

 Carrier Recovery Lock Status Register */

 Need to understand why there are 3 lock levels here */

 FIXME: what's the basis for block count */

 Reset status result */

 lgdt3303 AGC status register */

		/*

		 * Test input signal does not exist flag

		 * as well as the AGC lock flag.

 Carrier Recovery Lock Status Register */

 Need to understand why there are 3 lock levels here */

 FIXME: what's the basis for block count */

 I have no idea about this - it may not be needed */

 Allocate memory for the internal state */

 Setup the state */

 Create dvb_frontend */

 Setup get frontend callback */

 Verify communication with demod chip */

 QAM 64 */

 VSB 8  */

 QAM 64 */

 VSB 8  */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    cx24110 - Single Chip Satellite Channel Receiver driver module



    Copyright (C) 2002 Peter Hettkamp <peter.hettkamp@htp-tel.de> based on

    work

    Copyright (C) 1999 Convergence Integrated Media GmbH <ralph@convergence.de>





		      /* Comments beginning with @ denote this value should

 SoftResetAll */

 release reset */

 MSB of code rate 27.5MS/s */

 middle byte " */

 LSB         " */

 @ DVB mode, standard code rate 3/4 */

 @ PLL 60MHz */

 @ Fclk, i.e. sampling clock, 60MHz */

 @ partial chip disables, do not set */

	 {0x0b,0x01}, /* set output clock in gapped mode, start signal low

 no parity bytes, large hold time, serial data out */

 @ RS Sync/Unsync thresholds */

	 {0x10,0x40}, /* chip doc is misleading here: write bit 6 as 1

			 to avoid starting the BER counter. Reset the

	 {0x15,0xff}, /* @ size of the limited time window for RS BER

			 estimation. It is <value>*256 RS blocks, this

 @ enable all RS output ports */

 @ time window allowed for the RS to sync */

	 {0x18,0xae}, /* @ allow all standard DVB code rates to be scanned

		      /* leave the current code rate and normalization

	 {0x21,0x10}, /* @ during AutoAcq, search each viterbi setting

	 {0x23,0x18}, /* @ size of the limited time window for Viterbi BER

			 estimation. It is <value>*65536 channel bits, i.e.

 do not trigger Viterbi CRC test. Finite count window */

 leave front-end AGC parameters at default values */

 leave decimation AGC parameters at default values */

 disable all interrupts. They are not connected anyway */

 clear all interrupt pending flags */

 @ fully enable AutoAcqq state machine */

 @ enable fade recovery, but not autostart AutoAcq */

 leave the equalizer parameters on their default values */

 leave the final AGC parameters on their default values */

 @ MSB of front-end derotator frequency */

 @ middle bytes " */

 @ LSB          " */

 leave the carrier tracking loop parameters on default */

 leave the bit timing loop parameters at default */

 set the filtune voltage to 2.7V, as recommended by */

 the cx24108 data sheet for symbol rates above 15MS/s */

 @ Filter sigma delta enabled, positive */

 GPIO pins 1-4 have special function */

 GPIO pin 5 has special function, pin 6 is GPIO */

 All GPIO pins use CMOS output characteristics */

 GPIO 6 is input, all others are outputs */

 tuner auto mode clock freq 62kHz */

 use auto mode, tuner word is 21 bits long */

 @ disable several demod bypasses */

 @  " */

 @  " */

 the remaining registers are for SEC */

 fixme (low): error handling */

 AcqSpectrInvDis on. No idea why someone should want this */

 Initial value 0 at start of acq */

 current value 0 */

		/* The cx24110 manual tells us this reg is read-only.

 AcqSpectrInvDis on. No idea why someone should want this */

 Initial value 1 at start of acq */

 current value 1 */

 AcqSpectrInvDis off. Leave initial & current states as is */

	/* Well, the AutoAcq engine of the cx24106 and 24110 automatically

	   searches all enabled viterbi rates, and can handle non-standard

 (re-)establish AutoAcq behaviour */

 clear AcqVitDis bit */

 allow all DVB standard code rates */

 set nominal Viterbi rate 3/4 */

 set current Viterbi rate 3/4 */

 set the puncture registers for code rate 3/4 */

 set AcqVitDis bit */

 set nominal Viterbi rate */

 set current Viterbi rate */

 not sure if this is the right way: I always used AutoAcq mode */

/* fixme (low): a special code rate has been selected. In theory, we need to

   return a denominator value, a numerator value, and a pair of puncture

   maps to correctly describe this mode. But this should never happen in

 fixme (low): add error handling */

	/* first, check which sample rate is appropriate: 45, 60 80 or 90 MHz,

	   and set the PLL accordingly (R07[1:0] Fclk, R06[7:4] PLLmult,

 sample rate 45MHz*/

 sample rate 60MHz */

 sample rate 80MHz */

 sample rate 90MHz */

	/* we need to divide two integers with approx. 27 bits in 32 bit

	/* the maximum dividend is 90999000/2, 0x02b6446c, this number is

	   also the most complex divisor. Hence, the dividend has,

	   assuming 32bit unsigned arithmetic, 6 clear bits on top, the

	   divisor 2 unused bits at the bottom. Also, the quotient is

 tuner data is 21 bits long, must be left-aligned in data */

 tuner cx24108 is written through a dedicated 3wire interface on the demod chip */

 FIXME (low): add error handling, avoid infinite loops if HW fails... */

 auto mode at 62kHz */

 auto mode 21 bits */

 if the auto tuner writer is still busy, clear it out */

 write the topmost 8 bits */

 wait for the send to be completed */

 send another 8 bytes */

 and the topmost 5 bits of this byte */

 now strobe the enable line once */

 fixme (low): error handling */

 wait for LNB ready */

 not implemented */

 reportedly fixes switching problems */

 wait for LNB ready */

 fixme (maybe): value range is 16 bit. Scale? */

 the Viterbi error counter has finished one counting window */

 select the ber reg */

 start new count window */

 no provision in hardware. Read the frontend AGC accumulator. No idea how to scale this, but I know it is 2s complement */

 no provision in hardware. Can be computed from the Es/N0 estimator, but I don't know how. */

 the Es/N0 error counter has finished one counting window */

 start new count window */

 the RS error counter has finished one counting window */

 select the byer reg */

 select the bler reg */

 start new count window */

 start acquisition */

 cannot read back tuner settings (freq). Need to have some private storage */

/* ok, real AFC (FEDR) freq. is afc/2^24*fsamp, fsamp=45/60/80/90MHz.

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0

/*

 * Toshiba TC90522 Demodulator

 *

 * Copyright (C) 2014 Akihiro Tsukada <tskd08@gmail.com>

/*

 * NOTICE:

 * This driver is incomplete and lacks init/config of the chips,

 * as the necessary info is not disclosed.

 * It assumes that users of this driver (such as a PCI bridge of

 * DTV receiver cards) properly init and configure the chip

 * via I2C *before* calling this driver's init() function.

 *

 * Currently, PT3 driver is the only one that uses this driver,

 * and contains init/config code in its firmware.

 * Thus some part of the code might be dependent on PT3 specific config.

 frontend ops */

 input level under min ? */

 carrier? */

 unused */

 for BPSK */

 for QPSK */

 for 8PSK. (trellis code) */

 high/single layer */

 slots */

 low layer */

 no low layer */

 slots */

		/*

		 * actually, BPSK if v==1, but not defined in

		 * enum fe_modulation

 statistics */

 let the connected tuner set RSSI property cache */

 cndat: 4.12 fixed point float */

		/*

		 * cnr[mdB] = -1634.6 * P^5 + 14341 * P^4 - 50259 * P^3

		 *                 + 88977 * P^2 - 89565 * P + 58857

		 *  (P = sqrt(cndat) / 64)

 p := sqrt(cndat) << 8 = P << 14, 2.14 fixed  point float */

 cn = cnr << 3 */

 per-layer post viterbi BER (or PER? config dependent?) */

 layer A */

 layer B */

 layer C */

 statistics */

 let the connected tuner set RSSI property cache */

		/*

		 * cnr[mdB] = 0.024 P^4 - 1.6 P^3 + 39.8 P^2 + 549.1 P + 3096.5

		 * (P = 10log10(5505024/cndat))

 cn = cnr << 3 (61.3 fixed point float */

 p = 10log10(5505024/cndat) << 24  (8.24 fixed point float)*/

 per-layer post viterbi BER (or PER? config dependent?) */

	/*

	 * Because the init sequence is not public,

	 * the parent device/driver should have init'ed the device before.

	 * just wake up the device here.

 prefer 'all-layers' to 'none' as a default */

/*

 * tuner I2C adapter functions

		/*

		 * Split transactions at each I2C_M_RD message.

		 * Some of the parent device require this,

		 * such as Friio (see. dvb-usb-gl861).

/*

 * I2C driver functions

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    TDA10023  - DVB-C decoder

    (as used in Philips CU1216-3 NIM and the Reelbox DVB-C tuner card)



    Copyright (C) 2005 Georg Acher, BayCom GmbH (acher at baycom dot de)

    Copyright (c) 2006 Hartmut Birr (e9hack at gmail dot com)



    Remotely based on tda10021.c

    Copyright (C) 1999 Convergence Integrated Media GmbH <ralph@convergence.de>

    Copyright (C) 2004 Markus Schulz <msc@antzsystem.de>

		   Support for TDA10021



 configuration settings */

 clock settings */

get access to tuner

release access from tuner

	/* avoid floating point operations multiplying syscloc and divider

 BDRX/=SYSCLK; */

        reg  mask val */

 000 */ 0x2a, 0xff, 0x02,  
 003 */ 0xff, 0x64, 0x00,  
 006 */ 0x2a, 0xff, 0x03,  
 009 */ 0xff, 0x64, 0x00,  
 PLL1 */

 012 */ 0x28, 0xff, (state->pll_m-1),

 PLL2 */

 015 */ 0x29, 0xff, ((state->pll_p-1)<<6)|(state->pll_n-1),

 GPR FSAMPLING=1 */

 018 */ 0x00, 0xff, REG0_INIT_VAL,

 021 */ 0x2a, 0xff, 0x08,  
 024 */ 0xff, 0x64, 0x00,  
 027 */ 0x1f, 0xff, 0x00,  
 030 */ 0xff, 0x64, 0x00,  
 033 */ 0xe6, 0x0c, 0x04,  
 036 */ 0x10, 0xc0, 0x80,  
 039 */ 0x0e, 0xff, 0x82,  
 042 */ 0x03, 0x08, 0x08,  
/* 045 */ 0x2e, 0xbf, 0x30,  /* AGCCONF2 TRIAGC=0,POSAGC=ENAGCIF=1

 048 */ 0x01, 0xff, 0x30,  
 051 */ 0x1e, 0x84, 0x84,  
 054 */ 0x1b, 0xff, 0xc8,  
 057 */ 0x3b, 0xff, 0xff,  
 060 */ 0x3c, 0xff, 0x00,  
 063 */ 0x34, 0xff, 0x00,  
 066 */ 0x35, 0xff, 0xff,  
 069 */ 0x36, 0xff, 0x00,  
 072 */ 0x06, 0xff, 0x7f,  
 075 */ 0x1c, 0x30, 0x30,  
 078 */ 0x37, 0xff, 0xf6,  
 081 */ 0x38, 0xff, 0xff,  
 084 */ 0x02, 0xff, 0x93,  
 087 */ 0x2d, 0xff, 0xf6,  
 090 */ 0x04, 0x10, 0x00,  
/* 093 */ 0x12, 0xff, TDA10023_OUTPUT_MODE_PARALLEL_B, /*

 096 */ 0x2b, 0x01, 0xa1,  
 099 */ 0x20, 0xff, 0x04,  
 102 */ 0x2c, 0xff, 0x0d,  
 105 */ 0xc4, 0xff, 0x00,

 108 */ 0xc3, 0x30, 0x00,

 111 */ 0xb5, 0xff, 0x19,  
 114 */ 0x00, 0x03, 0x01,  
 117 */ 0x00, 0x03, 0x03,  
 120 */ 0xff, 0x64, 0x00,  
 123 */ 0xff, 0xff, 0xff

 override default values if set in config */

 Modulation  QAM    LOCKTHR   MSETH   AREF AGCREFNYQ ERAGCNYQ_THD */

	/*

	 * gcc optimizes the code below the same way as it would code:

	 *		 "if (qam > 5) return -EINVAL;"

	 * Yet, the code is clearer, as it shows what QAM standards are

	 * supported by the driver, and avoids the usage of magic numbers on

	 * it.

0x11[1] == CARLOCK -> Carrier locked

0x11[2] == FSYNC -> Frame synchronisation

0x11[3] == FEL -> Front End locked

0x11[6] == NODVB -> DVB Mode Information

 Max raw value is about 0xb0 -> Normalize to >0xf0 after 0x90

 AFC only valid when carrier has been recovered */

 pdown ADC */

 standby */

 allocate memory for the internal state */

 setup the state */

 wakeup if in standby */

 check if the demod is there */

 create dvb_frontend */

 set default values if not defined in config */

 calc sysclk */

 set in tda10023_attach */

 set in tda10023_attach */

FE_CAN_QAM_4

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drxk_hard: DRX-K DVB-C/T demodulator driver

 *

 * Copyright (C) 2010-2011 Digital Devices GmbH

 32-28 == 4 shifts possible at max */

	Q1 = a / c;		/*

				 * integer part, only the 4 least significant

				 * bits will be visible in the result

 division using radix 16, 7 nibbles in the result */

 rounding */

**************************************************************************/

 I2C **********************************************************************/

**************************************************************************/

 Make sure all clk domains are active */

 Enable pll lock tests */

	/*

	 * FIXME: most (all?) of the values below should be moved into

	 * struct drxk_config, as they are probably board-specific

 io_pad_cfg register (8 bit reg.) MSB bit is 1 (default value) */

 io_pad_cfg_mode output mode is drive always */

 io_pad_cfg_drive is set to power 2 (23 mA) */

 real system clock frequency in kHz */

 Timing div, 250ns/Psys */

 Timing div, = (delay (nano seconds) * sysclk (kHz))/ 1000 */

 Clipping */

 port/bridge/power down ctrl */

 Init AGC and PGA parameters */

 VSB IF */

 VSB RF */

 ATV IF */

 ATV RF */

 DVBT RF */

 DVBT IF */

 state->m_dvbtPgaCfg = 140; */

 QAM RF */

 QAM IF */

 MPEG output configuration */

 If TRUE; enable MPEG output */

 If TRUE; insert RS byte */

 If TRUE; invert DATA signals */

 If TRUE; invert ERR signal */

 If TRUE; invert STR signals */

 If TRUE; invert VAL signals */

 If TRUE; invert CLK signals */

	/* If TRUE; static MPEG clockrate will be used;

 Maximum bitrate in b/s in case static clockrate is selected */

 QAM defaults */

 fecRsPlen  annex A */

 stop lock indicator process */

 Check device id */

 driver 0.9.0 */

 stop lock indicator process */

 ignore (bypass ?) */

 27 MHz */

 20.25 MHz */

 4 MHz */

	/*

		Determine device capabilities

		Based on pinning v14

 driver 0.9.0 */

 typeId = DRX3913K_TYPE_ID */

 typeId = DRX3915K_TYPE_ID */

 typeId = DRX3916K_TYPE_ID */

 typeId = DRX3918K_TYPE_ID */

 typeId = DRX3921K_TYPE_ID */

 typeId = DRX3923K_TYPE_ID */

 typeId = DRX3925K_TYPE_ID */

 typeId = DRX3926K_TYPE_ID */

 Write command */

 Wait until command rdy */

 port/bridge/power down ctrl */

 stop lock indicator process */

  MPEG TS pad configuration */

  Set MPEG TS pads to inputmode */

 Enable MPEG output */

 parallel -> enable MD1 to MD7 */

 serial -> disable MD1 to MD7 */

  Enable MB output over MPEG pads and ctl input */

  Write nomagic word to enable pdr reg write */

 down the drain (we don't care about MAGIC_WORD) */

 For future reference */

 For future reference */

 For future reference */

 tokenring already has correct status */

 Disable/enable dvbt tokenring bridge   */

 Graceful shutdown (byte boundaries) */

 Suppress MCLK during absence of data */

	/* assume that the command register is ready

 Wait until SCU has processed command */

 read results */

 Check if an error was reported by SCU */

 check for the known error codes */

 Other negative values are errors */

 Configure IQM */

 Check arguments */

 Unknow sleep mode */

 If already in requested power mode, do nothing */

 For next steps make sure to start from DRX_POWER_UP mode */

 Restore analog & pin configuration */

 Power down to requested mode */

 Backup some register settings */

		/* Set pins with possible pull-ups connected

 Analog power down */

 ADC power down */

 Power down device */

 stop all comm_exec */

 Stop and power down previous standard */

 Send OFDM stop command */

 Send OFDM reset command */

 Reset datapath for OFDM, processors first */

 powerdown AFE                   */

 powerdown to OFDM mode          */

	/*

	   Stop and power down previous standard

	   TODO investigate total power down instead of partial

	   power down depending on "previous" standard.

 disable HW lock indicator */

 Device is already at the required mode */

 OM_NONE was added for start up */

	/*

		Power up new standard

 define the SCU command code */

 Allow OC to sync again */

 Rate integration settings */

 Additional configuration */

 FEC_OC_MODE       register value */

 FEC_OC_IPR_MODE   register value */

 FEC_OC_IPR_INVERT register value */

 FEC_OC_IPR_INVERT register value */

 FEC_OC_IPR_INVERT register value */

 FEC_OC_IPR_INVERT register value */

 FEC_OC_IPR_INVERT register value */

 Check insertion of the Reed-Solomon parity bytes */

 enable parity symbol forward */

 MVAL disable during parity bytes */

 TS burst length to 204 */

 Check serial or parallel output */

 MPEG data output is serial -> set ipr_mode[0] */

 good for >63 Mb/s */

 switch (standard) */

 Configure DTO's */

		/* Rational DTO for MCLK source (static MCLK rate),

			Dynamic DTO for optimal grouping

			(avoid intra-packet gaps),

 Check user defined bitrate */

 max is 75.9 Mb/s */

		/* Rational DTO period:

			dto_period = (Fsys / bitrate) - 2



			result should be floored,

			to make sure >= requested bitrate

 (commonAttr->static_clk == false) => dynamic mode */

 Write appropriate registers with requested configuration */

 Rate integration settings */

 Data mask for the output data byte */

 Control selective inversion of output bits */

 Enable RF AGC DAC */

 Enable SCU RF AGC loop */

 Polarity */

 Set speed (using complementary reduction value) */

 Set TOP, only if IF-AGC is in AUTO mode */

 Cut-Off current */

 Max. output level */

 Enable RF AGC DAC */

 Disable SCU RF AGC loop */

 SCU c.o.c. to 0, enabling full control range */

 Write value to output pin */

 Disable RF AGC DAC */

 Disable SCU RF AGC loop */

 Enable IF AGC DAC */

 Enable SCU IF AGC loop */

 Polarity */

 Set speed (using complementary reduction value) */

 Restore TOP */

 Enable IF AGC DAC */

 Disable SCU IF AGC loop */

 Polarity */

 Write value to output pin */

 Disable If AGC DAC */

 Disable SCU IF AGC loop */

 switch (agcSettingsIf->ctrl_mode) */

	/* always set the top to support

	u16 qam_sl_err_power = 0;	/* accum. error between

	u32 qam_sl_sig_power = 0;	/* used for MER, depends of

 QAM MER */

 MER calculation */

 get the register value needed for MER */

 Extend SQR_ERR_I operational range */

 Extend SQR_ERR_Q operational range */

 Check input data for MER */

 MER calculation (in 0.1 dB) without math.h */

		/* No error at all, this must be the HW reset value

			* Apparently no first measurement yet

		/* IMER = 100 * log10 (x)

			where x = (eq_reg_td_tps_pwr_ofs^2 *

			eq_reg_td_req_smb_cnt * tps_cnt)/sqr_err_iq



			=> IMER = a + b -c

			where a = 100 * log10 (eq_reg_td_tps_pwr_ofs^2)

			b = 100 * log10 (eq_reg_td_req_smb_cnt * tps_cnt)

			c = 100 * log10 (sqr_err_iq)

 log(x) x = 9bits * 9bits->18 bits  */

 log(x) x = 16bits * 7bits->23 bits  */

 log(x) x = (16bits + 16bits) << 15 ->32 bits  */

 SNR Values for quasi errorfree reception rom Nordig 2.2 */

 QPSK 1/2 */

 QPSK 2/3 */

 QPSK 3/4 */

 QPSK 5/6 */

 QPSK 7/8 */

 16-QAM 1/2 */

 16-QAM 2/3 */

 16-QAM 3/4 */

 16-QAM 5/6 */

 16-QAM 7/8 */

 64-QAM 1/2 */

 64-QAM 2/3 */

 64-QAM 3/4 */

 64-QAM 5/6 */

 64-QAM 7/8 */

 Not in NorDig */

 Free data ram in SIO HI */

 start measurement */

 Try sampling on a different edge */

	/*

	   Program frequency shifter

	   No need to account for mirroring on RF

 tuner doesn't mirror */

 tuner mirrors */

 adc mirrors */

 adc doesn't mirror */

 Program frequency shifter with tuner offset compensation */

 frequency_shift += tuner_freq_offset; TODO */

 Common settings */

 AGCInit() not available for DVBT; init done in microcode */

 FIXME: Analog TV AGC require different settings */

 Standard specific settings */

 Initialize inner-loop KI gain factors */

 SC is not running */

 Wait until sc is ready to receive command */

 Write sub-command */

 All commands using sub-cmd */

 Do nothing */

 Write needed parameters and the command */

 All commands using 5 parameters */

 All commands using 4 parameters */

 All commands using 3 parameters */

 All commands using 2 parameters */

 All commands using 1 parameters */

 All commands using 0 parameters */

 Write command */

 Unknown command */

 Wait until sc is ready processing command */

 Check for illegal cmd */

 illegal command */

 Retrieve results parameters from SC */

 All commands yielding 5 results */

 All commands yielding 4 results */

 All commands yielding 3 results */

 All commands yielding 2 results */

 All commands yielding 1 result */

 All commands yielding 0 results */

 Unknown command */

 switch (cmd->cmd) */

 write mask to 1 */

 write mask to 0 */

============================================================================*/

/*

* \brief Activate DVBT specific presets

* \param demod instance of demodulator.

* \return DRXStatus_t.

*

* Called in DVBTSetStandard

*

============================================================================*/

/*

* \brief Initialize channelswitch-independent settings for DVBT.

* \param demod instance of demodulator.

* \return DRXStatus_t.

*

* For ROM code channel filter taps are loaded from the bootloader. For microcode

* the DVB-T taps from the drxk_filters.h are used.

 added antenna switch */

 send OFDM reset command */

 send OFDM setenv command */

 reset datapath for OFDM, processors first */

 IQM setup */

 synchronize on ofdstate->m_festart */

 window size for clipping ADC detection */

 window size for for sense pre-SAW detection */

 sense threshold for sense pre-SAW detection */

 Impulse noise cruncher setup */

 crunch in IQM_CF */

 detect in IQM_CF */

 peak detector window length */

 enable output 2 */

 decimate output 2 */

 virtual clipping threshold for clipping ADC detection */

 crunching threshold */

 peak detector threshold */

 enable power measurement interrupt */

 IQM will not be reset from here, sync ADC and update/init AGC */

 Halt SCU to enable safe non-atomic accesses */

 Set Noise Estimation notch width and enable DC fix */

 Activate SCU to enable SCU commands */

 AGCInit() is not done for DVBT, so set agcfast_clip_ctrl_delay  */

 OFDM_SC setup */

 FEC setup */

 OFDM input */

 Setup MPEG bus */

 Set DVBT Presets */

============================================================================*/

/*

* \brief start dvbt demodulating for channel.

* \param demod instance of demodulator.

* \return DRXStatus_t.

 drxk_ofdm_sc_cmd_t scCmd; */

 start correct processes to get in lock */

 DRXK: OFDM_SC_RA_RAM_PROC_LOCKTRACK is no longer in mapfile! */

 start FEC OC */

============================================================================*/

/*

* \brief Set up dvbt demodulator for channel.

* \param demod instance of demodulator.

* \return DRXStatus_t.

* // original DVBTSetChannel()

 Halt SCU to enable safe non-atomic accesses */

 Stop processors */

	/* Mandatory fix, always stop CP, required to set spl offset back to

== Write channel settings to device ================================*/

 mode */

 try first guess DRX_FFTMODE_8K */

 guard */

 try first guess DRX_GUARD_1DIV4 */

 hierarchy */

 try first guess SC_RA_RAM_OP_PARAM_HIER_NO */

 transmission_params |= OFDM_SC_RA_RAM_OP_PARAM_HIER_NO; */

 modulation */

 try first guess DRX_CONSTELLATION_QAM64 */

 No hierarchical channels support in BDA */

 Priority (only for hierarchical channels) */

 Set Priority high */

 coderate */

 try first guess DRX_CODERATE_2DIV3 */

	/*

	 * SAW filter selection: normally not necessary, but if wanted

	 * the application can select a SAW filter via the driver by

	 * using UIOs

 First determine real bandwidth (Hz) */

 Also set delay for impulse noise cruncher */

	/*

	 * Also set parameters for EC_OC fix, note EC_OC_REG_TMD_HIL_MAR is

	 * changed by SC for fix for some 8K,1/8 guard but is restored by

	 * InitEC and ResetEC functions

 cochannel protection for PAL 8 MHz */

 cochannel protection for PAL 7 MHz */

 cochannel protection for NTSC 6 MHz */

		/* Now compute IQM_RC_RATE_OFS

			(((SysFreq/BandWidth)/2)/2) -1) * 2^23)

			=>

			((SysFreq / BandWidth) * (2^21)) - (2^23)

 (SysFreq / BandWidth) * (2^28)  */

		/*

		 * assert (MAX(sysClk)/MIN(bandwidth) < 16)

		 *	=> assert(MAX(sysClk) < 16*MIN(bandwidth))

		 *	=> assert(109714272 > 48000000) = true

		 * so Frac 28 can be used

 (SysFreq / BandWidth) * (2^21), rounding before truncating */

 ((SysFreq / BandWidth) * (2^21)) - (2^23)  */

 Bandwidth setting done */

== start SC, write channel settings to SC ==========================*/

 Activate SCU to enable SCU commands */

 Enable SC after setting all other parameters */

 Write SC parameter registers, set all AUTO flags in operation mode */

============================================================================*/

/*

* \brief Retrieve lock status .

* \param demod    Pointer to demodulator instance.

* \param lockStat Pointer to lock status structure.

* \return DRXStatus_t.

*

 driver 0.9.0 */

 Check if SC is running */

 Power Down QAM */

		/*

			STOP demodulator

			QAM and HW blocks

 stop all comstate->m_exec */

 powerdown AFE                   */

============================================================================*/

/*

* \brief Setup of the QAM Measurement intervals for signal quality

* \param demod instance of demod.

* \param modulation current modulation.

* \return DRXStatus_t.

*

*  NOTE:

*  Take into account that for certain settings the errorcounters can overflow.

*  The implementation does not check this.

*

 BER accounting period */

 Total period */

 ReedSolomon Measurement Prescale */

 Value for corresponding I2C register */

	/* fec_bits_desired = symbol_rate [kHz] *

		FrameLenght [ms] *

		(modulation + 1) *

		SyncLoss (== 1) *

		ViterbiLoss (==1)

 symbol_rate [Hz] -> symbol_rate [kHz] */

 meas. period [ms] */

 Annex A/C: bits/RsPeriod = 204 * 8 = 1632 */

 fec_rs_period_total = fec_bits_desired / 1632 */

 roughly ceil */

 fec_rs_period_total =  fec_rs_prescale * fec_rs_period  */

 Divide by zero (though impossible) */

 write corresponding registers */

 QAM Equalizer Setup */

 Equalizer */

 Decision Feedback Equalizer */

 QAM Slicer Settings */

 QAM Loop Controller Coeficients */

 QAM State Machine (FSM) Thresholds */

 QAM FSM Tracking Parameters */

============================================================================*/

/*

* \brief QAM32 specific setup

* \param demod instance of demod.

* \return DRXStatus_t.

 QAM Equalizer Setup */

 Equalizer */

 Decision Feedback Equalizer */

 QAM Slicer Settings */

 QAM Loop Controller Coeficients */

 QAM State Machine (FSM) Thresholds */

 QAM FSM Tracking Parameters */

============================================================================*/

/*

* \brief QAM64 specific setup

* \param demod instance of demod.

* \return DRXStatus_t.

 QAM Equalizer Setup */

 Equalizer */

 Decision Feedback Equalizer */

 QAM Slicer Settings */

 QAM Loop Controller Coeficients */

 QAM State Machine (FSM) Thresholds */

 QAM FSM Tracking Parameters */

============================================================================*/

/*

* \brief QAM128 specific setup

* \param demod: instance of demod.

* \return DRXStatus_t.

 QAM Equalizer Setup */

 Equalizer */

 Decision Feedback Equalizer */

 QAM Slicer Settings */

 QAM Loop Controller Coeficients */

 QAM State Machine (FSM) Thresholds */

 QAM FSM Tracking Parameters */

============================================================================*/

/*

* \brief QAM256 specific setup

* \param demod: instance of demod.

* \return DRXStatus_t.

 QAM Equalizer Setup */

 Equalizer */

 Decision Feedback Equalizer */

 QAM Slicer Settings */

 QAM Loop Controller Coeficients */

 QAM State Machine (FSM) Thresholds */

 QAM FSM Tracking Parameters */

============================================================================*/

/*

* \brief Reset QAM block.

* \param demod:   instance of demod.

* \param channel: pointer to channel data.

* \return DRXStatus_t.

 Stop QAM comstate->m_exec */

============================================================================*/

/*

* \brief Set QAM symbolrate.

* \param demod:   instance of demod.

* \param channel: pointer to channel data.

* \return DRXStatus_t.

 Select & calculate correct IQM rate */

	/*

		IqmRcRate = ((Fadc / (symbolrate * (4<<ratesel))) - 1) * (1<<23)

 Divide by zero */

	/*

		LcSymbFreq = round (.125 *  symbolrate / adc_freq * (1<<15))

 Divide by zero */

============================================================================*/

/*

* \brief Get QAM lock status.

* \param demod:   instance of demod.

* \param channel: pointer to channel data.

* \return DRXStatus_t.

 0x0000 NOT LOCKED */

 0x4000 DEMOD LOCKED */

 0x8000 DEMOD + FEC LOCKED (system lock) */

 0xC000 NEVER LOCKED */

 (system will never be able to lock to the signal) */

		/*

		 * TODO: check this, intermediate & standard specific lock

		 * states are not taken into account here

 modulation     */

 interleave mode   */

 Env parameters */

 check for LOCKRANGE Extended */

 set_param_parameters[3] |= QAM_LOCKRANGE_NORMAL; */

	/*

	 * STEP 1: reset demodulator

	 *	resets FEC DI and FEC RS

	 *	resets QAM block

	 *	resets SCU variables

	/*

	 * STEP 2: configure demodulator

	 *	-set params; resets IQM,QAM,FEC HW; initializes some

	 *       SCU variables

 Set params */

	/* Use the 4-parameter if it's requested or we're probing for

	/* Use the 2-parameter command if it was requested or if we're

	 * probing for the correct command and the 4-parameter command

		/*

		 * One of our commands was successful. We don't need to

		 * auto-probe anymore, now that we got the correct command.

	/*

	 * STEP 3: enable the system in a mode where the ADC provides valid

	 * signal setup modulation independent registers

 Setup BER measurement */

 Reset default values */

 Reset default LC values */

 Mirroring, QAM-block starting point not inverted */

 Halt SCU to enable safe non-atomic accesses */

 STEP 4: modulation specific setup */

 Activate SCU to enable SCU commands */

 Re-configure MPEG output, requires knowledge of channel bitrate */

 extAttr->currentChannel.modulation = channel->modulation; */

 extAttr->currentChannel.symbolrate    = channel->symbolrate; */

 start processes */

 STEP 5: start QAM demodulator (starts FEC, QAM and IQM HW) */

 update global DRXK data container */

?     extAttr->qamInterleaveMode = DRXK_QAM_I12_J17; */

 added antenna switch */

 Ensure correct power-up mode */

 Reset QAM block */

 Setup IQM */

	/* Upload IQM Channel Filter settings by

 IQM Impulse Noise Processing Unit */

 turn on IQMAF. Must be done before setAgc**() */

 IQM will not be reset from here, sync ADC and update/init AGC */

 Set the FSM step period */

 Halt SCU to enable safe non-atomic accesses */

	/* No more resets of the IQM, current standard correctly set =>

 Configure AGC's */

 Activate SCU to enable SCU commands */

 stop lock indicator process */

  Write magic word to enable pdr reg write               */

 UIO-1 */

 write to io pad configuration register - output mode */

 use corresponding bit in io data output registar */

 write zero to 15th bit - 1st UIO */

 write one to 15th bit - 1st UIO */

 write back to io data output register */

 UIO-2 */

 write to io pad configuration register - output mode */

 use corresponding bit in io data output registar */

 write zero to 14th bit - 2st UIO */

 write one to 14th bit - 2st UIO */

 write back to io data output register */

 UIO-3 */

 write to io pad configuration register - output mode */

 use corresponding bit in io data output registar */

 write zero to 2nd bit - 3rd UIO */

 write one to 2nd bit - 3rd UIO */

 write back to io data output register */

  Write magic word to disable pdr reg write               */

 Antenna is on DVB-T mode. Switch */

 Antenna is on DVB-C mode. Switch */

 Power down to requested mode */

 Backup some register settings */

 Set pins with possible pull-ups connected to them in input mode */

 Analog power down */

 ADC power down */

 Power down device */

 Open I2C bridge before power down of DRXK */

 driver 0.9.0 */

 Soft reset of OFDM-, sys- and osc-clockdomain */

		/*

		 * TODO is this needed? If yes, how much delay in

		 * worst case scenario

 Bridge delay, uses oscilator clock */

 Delay = (delay (nano seconds) * oscclk (kHz))/ 1000 */

 SDA brdige delay */

 Clipping */

 SCL bridge delay, same as SDA for now */

 disable various processes */

 disable MPEG port */

 Stop AUD and SCU */

 enable token-ring bus through OFDM block for possible ucode upload */

 include boot loader section */

 disable token-ring bus through OFDM block for possible ucode upload */

 Run SCU for a little while to initialize microcode version numbers */

 added for test */

		/* Stamp driver version number in SCU data RAM in BCD code

			Done to enable field application engineers to retrieve drxdriver version

			via I2C from SCU RAM.

			Not using SCU command interface for SCU register access since no

			microcode may be present.

		/*

		 * Dirty fix of default values for ROM/PATCH microcode

		 * Dirty because this fix makes it impossible to setup

		 * suitable values before calling DRX_Open. This solution

		 * requires changes to RF AGC speed to be done via the CTRL

		 * function after calling DRX_Open

 m_dvbt_rf_agc_cfg.speed = 3; */

 Reset driver debug flags to 0 */

 driver 0.9.0 */

		/* Setup FEC OC:

 MPEGTS functions are still the same */

 added: configure GPIO */

 Initialize the supported delivery systems */

		/*

		 * As firmware is now load asynchronous, it is not possible

		 * anymore to fail at frontend attach. We might silently

		 * return here, and hope that the driver won't crash.

		 * We might also change all DVB callbacks to return -ENODEV

		 * if the device is not initialized.

		 * As the DRX-K devices have their own internal firmware,

		 * let's just hope that it will match a firmware revision

		 * compatible with this driver and proceed.

 After set_frontend, stats aren't available */

 printk(KERN_DEBUG "drxk: %s IF=%d done\n", __func__, IF); */

 FIXME: those are part of the tuner presets */

 Default value on az6007 driver */

 Default value on az6007 driver */

 SCU output_level */

 SCU c.o.c. */

 Take RF gain into account */

 clip output value */

 Take IF gain into account */

 clip output value */

	/*

	 * Convert to 0..65535 scale.

	 * If it can't be measured (AGC is disabled), just show 100%.

 get status */

	/*

	 * Estimate signal strength from AGC

 Get post BER */

 BER measurement is valid if at least FEC lock is achieved */

	/*

	 * OFDM_EC_VD_REQ_SMB_CNT__A and/or OFDM_EC_VD_REQ_BIT_CNT can be

	 * written to set nr of symbols or bits over which to measure

	 * EC_VD_REG_ERR_BIT_CNT__A . See CtrlSetCfg().

 Read registers for post/preViterbi BER calculation */

 Number of bit-errors */

 Store the results */

 No negative SNR, clip to zero */

 .delsys will be filled dynamically */

 For DVB-C */

 For DVB-T */

 NOTE: as more UIO bits will be used, add them to the mask */

 Default gpio to DVB-C */

 Load firmware and initialize DRX-K */

 Initialize stats */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Fujitsu MB86A16 DVB-S/DSS DC Receiver driver



	Copyright (C) Manu Abraham (abraham.manu@gmail.com)



 tuning parameters */

 Internal stuff */

 Frequency Set */

 kHz */

 MHz */

 MHz */

 kHz */

 positive v (case 1) */

 (case 2) */

 (case 3) */

 (case 4) */

 Negative v (case 1) */

 (case 2) */

 (case 3) */

 (case 4) */

 (case 5) */

 (case 6) */

 SLOCK0 = 0 */

 Viterbi Rate, IQ Settings */

	unsigned char S2T, S3T; */

	int freq_err; */

 (0, 0) */

 (1, smrt) = (1, symbolrate) */

 (0, 1, 2) */

 (0, 0) */

 Upper bound */

 Lower bound */

 changed */

 delay 4~200 */

 FOS */

 5/6 */

 1/2, 2/3, 3/4, 7/8 */

 BER monitor invalid when BER_EN = 0	*/

 coarse, fast calculation	*/

			/*

			 * BER_SEL = 1, The monitored BER is the estimated

			 * value with a Reed-Solomon decoder error amount at

			 * the deinterleaver output.

			 * monitored BER is expressed as a 20 bit output in total

 ber_rst == 3 */

			/*

			 * BER_SEL = 0, The monitored BER is the estimated

			 * value with a Viterbi decoder error amount at the

			 * QPSK demodulator output.

			 * monitored BER is expressed as a 24 bit output in total

 ber_tim == 1 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Frontend driver for the GENPIX 8pks/qpsk/DCII USB2.0 DVB-S module

 *

 * Copyright (C) 2006,2007 Alan Nisota (alannisota@gmail.com)

 * Copyright (C) 2006,2007 Genpix Electronics (genpix@genpix-electronics.com)

 *

 * Thanks to GENPIX for the sample code used to implement this module.

 *

 * This module is based off the vp7045 and vp702x modules

 not supported by this Frontend */

 not supported by this Frontend */

 snr is reported in dBu*256 */

 snr is reported in dBu*256 */

 snr / 38.4 ~= 100% strength */

 snr * 17 returns 100% strength as 65535 */

 snr*17 */

 backwards compatibility: DVB-S + 8-PSK were used for Turbo-FEC */

 kept for backwards compatibility */

 PSK_8 is for compatibility with DN */

 QAM_16 is for compatibility with DN */

 Unknown modulation */

 These commands are certainly wrong */

 ppm */

			/*

			 * FE_CAN_QAM_16 is for compatibility

			 * (Myth incorrectly detects Turbo-QPSK as plain QAM-16)

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lnbp22.h - driver for lnb supply and control ic lnbp22

 *

 * Copyright (C) 2006 Dominik Kuhlen

 * Based on lnbp21 driver

 *

 * the project's page is at https://linuxtv.org

 Power down */

 LNBP power off */

 free data */

 default configuration */

 ? */

 ? */

 ? */

 Power down */

 detect if it is present or not */

 install release callback */

 override frontend ops */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * stv0900_core.c

 *

 * Driver for ST STV0900 satellite demodulator IC.

 *

 * Copyright (C) ST Microelectronics.

 * Copyright (C) 2009 NetUP Inc.

 * Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>

 internal params node */

 pointer for internal params, one for each pair of demods */

 first internal params */

 find chip by i2c adapter and i2c address */

		/*

		 Search of the last stv0900 chip or

 deallocating chip */

 allocating new chip */

Startup sequence*/

 preserve SELOSCI bit */

Set the DiseqC frequency to 22KHz */

	/*

		Formula:

		DiseqC_TX_Freq= MasterClock/(32*F22TX_Reg)

		DiseqC_RX_Freq= MasterClock/(32*F22RX_Reg)

	/*	Formulat :

	Tuner_Frequency(MHz)	= Regs / 64

	Tuner_granularity(MHz)	= Regs / 2048

	real_Tuner_Frequency	= Tuner_Frequency(MHz) - Tuner_granularity(MHz)

	/* Formulat:

	Tuner_frequency_reg= Frequency(MHz)*64

 Low Pass Filter = BW /2 (MHz)*/

 Tuner Write trig */

 DVB-S2 delineator errors count */

 retrieving number for errnous headers */

 retrieving number for errnous packets */

cut 3.0 above*/

cut 3.0*/

 tuner init */

FE_AUTO_STB6100:*/

 27MHz */

 case FE_SW_TUNER: */

 hw tuner */

 tuner init */

FE_AUTO_STB6100:*/

 27MHz */

 case FE_SW_TUNER: */

 hw tuner */

 Print TS bitrate */

 Formula Bit rate = Mclk * px_tsfifo_bitrate / 16384 */

 Speeds up DVB-S searching */

 checkpatch complains */

 Unmodulated */

 Modulated */

Set the DiseqC mode to 22Khz _continues_ tone*/

release DiseqC reset to enable the 22KHz tone*/

		/*return diseqc mode to config->diseqc_mode.

maintain the DiseqC reset to disable the 22KHz tone*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * NXP TDA10071 + Conexant CX24118A DVB-S/S2 demodulator + tuner driver

 *

 * Copyright (C) 2011 Antti Palosaari <crope@iki.fi>

/*

 * XXX: regmap_update_bits() does not fit our needs as it does not support

 * partially volatile registers. Also it performs register read even mask is as

 * wide as register value.

 write single register with mask */

 no need for read if whole reg is written */

 execute firmware command */

 write cmd and args for firmware */

 start cmd execution */

 wait cmd execution terminate */

 wait LNB TX */

 wait LNB RX */

 reply len */

 [4:0] */

 truncate API max */

 read reply */

 wait LNB TX */

 0x39[0] tuner PLL */

 demod PLL */

 viterbi or LDPC*/

 RS or BCH */

 signal strength */

 input power estimate dBm */

 CNR */

 Es/No */

 UCB/PER/BER */

 TODO: report total bits/packets */

 -75dBm - -20dBm */

 scale value to 0x0000-0xffff */

		/* 2 = auto; try first on then off

 warm state - wake up device from sleep */

 cold state - try to download firmware */

 request the firmware, this will block and timeout */

 init */

  download firmware */

 do not download last byte */

 wait firmware start */

 firmware status */

 init stats here in order signal app which stats are supported */

 chip ID */

 chip type */

 chip version */

 create dvb_frontend */

 setup callbacks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * cxd2841er.c

 *

 * Sony digital demodulator driver for

 *	CXD2841ER - DVB-S/S2/T/T2/C/C2

 *	CXD2854ER - DVB-S/S2/T/T2/C/C2, ISDB-T/S

 *

 * Copyright 2012 Sony Corporation

 * Copyright (C) 2014 NetUP Inc.

 * Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>

 * Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>

 DVB-C constellation */

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

	/*

	 * regValue = (symbolRateKSps * 2^14 / 1000) + 0.5

	 *          = ((symbolRateKSps * 2^14) + 500) / 1000

	 *          = ((symbolRateKSps * 16384) + 500) / 1000

 Set SLV-T Bank : 0xAE */

 Set demod mode */

 Set SLV-X Bank : 0x00 */

 DVB-S/S2 */

 Set SLV-T Bank : 0x00 */

 Enable S/S2 auto detection 1 */

 Set SLV-T Bank : 0xAE */

 Enable S/S2 auto detection 2 */

 Set SLV-T Bank : 0x00 */

 Enable demod clock */

 Enable ADC clock */

 Enable ADC 1 */

 Enable ADC 2 */

 Set SLV-X Bank : 0x00 */

 Enable ADC 3 */

 Set SLV-T Bank : 0xA3 */

 Set SLV-T Bank : 0xAB */

 Set demod parameter */

 Set SLV-T Bank : 0x00 */

 disable Hi-Z setting 1 */

 disable Hi-Z setting 2 */

 Set SLV-T Bank : 0x00 */

 disable TS output */

 Set SLV-T Bank : 0x00 */

 disable TS output */

 enable Hi-Z setting 1 */

 enable Hi-Z setting 2 */

 Set SLV-X Bank : 0x00 */

 disable ADC 1 */

 Set SLV-T Bank : 0x00 */

 disable ADC clock */

 disable ADC 2 */

 disable ADC 3 */

 SADC Bias ON */

 disable demod clock */

 Set SLV-T Bank : 0xAE */

 disable S/S2 auto detection1 */

 Set SLV-T Bank : 0x00 */

 disable S/S2 auto detection2 */

 Set SLV-T Bank : 0x00 */

 Disable DSQOUT */

 Disable DSQIN */

 Set SLV-X Bank : 0x00 */

 Disable oscillator */

 Set demod mode */

 Set SLV-X Bank : 0x00 */

 Disable oscillator */

 Set demod mode */

 Set SLV-T Bank : 0x00 */

 disable TS output */

 enable Hi-Z setting 1 */

 enable Hi-Z setting 2 */

 Set SLV-X Bank : 0x00 */

 disable ADC 1 */

 Set SLV-T Bank : 0x00 */

 Disable ADC 2 */

 Disable ADC 3 */

 Disable ADC clock */

 Disable RF level monitor */

 Disable demod clock */

 Set SLV-T Bank : 0x00 */

 disable TS output */

 enable Hi-Z setting 1 */

 enable Hi-Z setting 2 */

 Cancel DVB-T2 setting */

 Set SLV-X Bank : 0x00 */

 disable ADC 1 */

 Set SLV-T Bank : 0x00 */

 Disable ADC 2 */

 Disable ADC 3 */

 Disable ADC clock */

 Disable RF level monitor */

 Disable demod clock */

 Set SLV-T Bank : 0x00 */

 disable TS output */

 enable Hi-Z setting 1 */

 enable Hi-Z setting 2 */

 Cancel DVB-C setting */

 Set SLV-X Bank : 0x00 */

 disable ADC 1 */

 Set SLV-T Bank : 0x00 */

 Disable ADC 2 */

 Disable ADC 3 */

 Disable ADC clock */

 Disable RF level monitor */

 Disable demod clock */

 Set SLV-T Bank : 0x00 */

 disable TS output */

 enable Hi-Z setting 1 */

 enable Hi-Z setting 2 */

 TODO: Cancel demod parameter */

 Set SLV-X Bank : 0x00 */

 disable ADC 1 */

 Set SLV-T Bank : 0x00 */

 Disable ADC 2 */

 Disable ADC 3 */

 Disable ADC clock */

 Disable RF level monitor */

 Disable demod clock */

 Set SLV-X Bank : 0x00 */

 Clear all demodulator registers */

 Set SLV-X Bank : 0x00 */

 Set demod SW reset */

 Select demod frequency */

 Set demod mode */

 Clear demod SW reset */

 Set SLV-T Bank : 0x00 */

 enable DSQOUT */

 enable DSQIN */

 TADC Bias On */

 SADC Bias On */

 Set SLV-X Bank : 0x00 */

 Clear all demodulator registers */

 Set SLV-X Bank : 0x00 */

 Set demod SW reset */

 Select ADC clock mode */

 Select demod frequency */

 Clear demod SW reset */

 Set SLV-T Bank : 0x00 */

 TADC Bias On */

 SADC Bias On */

 Set SLV-T Bank : 0x00 */

 SW Reset */

 Enable TS output */

 Set TS parallel mode */

 Set SLV-T Bank : 0x00 */

	/*

	 * slave    Bank    Addr    Bit    default    Name

	 * <SLV-T>  00h     C4h     [1:0]  2'b??      OSERCKMODE

	/*

	 * slave    Bank    Addr    Bit    default    Name

	 * <SLV-T>  00h     D1h     [1:0]  2'b??      OSERDUTYMODE

	/*

	 * slave    Bank    Addr    Bit    default    Name

	 * <SLV-T>  00h     D9h     [7:0]  8'h08      OTSCKPERIOD

	/*

	 * Disable TS IF Clock

	 * slave    Bank    Addr    Bit    default    Name

	 * <SLV-T>  00h     32h     [0]    1'b1       OREG_CK_TSIF_EN

	/*

	 * slave    Bank    Addr    Bit    default    Name

	 * <SLV-T>  00h     33h     [1:0]  2'b01      OREG_CKSEL_TSIF

	/*

	 * Enable TS IF Clock

	 * slave    Bank    Addr    Bit    default    Name

	 * <SLV-T>  00h     32h     [0]    1'b1       OREG_CK_TSIF_EN

 Enable parity period for DVB-T */

 Enable parity period for DVB-C */

 Set SLV-T Bank : 0xA0 */

	/*

	 *  slave     Bank      Addr      Bit      Signal name

	 * <SLV-T>    A0h       11h       [2]      ITSLOCK

 Set SLV-T Bank : 0x10 */

 Set SLV-T Bank : 0x20 */

 Set SLV-T Bank : 0x60 */

	/*

	 * Get High Sampling Rate mode

	 *  slave     Bank      Addr      Bit      Signal name

	 * <SLV-T>    A0h       10h       [0]      ITRL_LOCK

		/*

		 *  slave     Bank      Addr      Bit      Signal name

		 * <SLV-T>    A0h       50h       [4]      IHSMODE

	/*

	 *  slave     Bank      Addr      Bit      Signal name

	 * <SLV-T>    A0h       45h       [4:0]    ICFRL_CTRLVAL[20:16]

	 * <SLV-T>    A0h       46h       [7:0]    ICFRL_CTRLVAL[15:8]

	 * <SLV-T>    A0h       47h       [7:0]    ICFRL_CTRLVAL[7:0]

 Layer A */

 Layer B */

 Layer C */

 Set SLV-T Bank : 0xA0 */

	/*

	 *  slave     Bank      Addr      Bit      Signal name

	 * <SLV-T>    A0h       35h       [0]      IFVBER_VALID

	 * <SLV-T>    A0h       36h       [5:0]    IFVBER_BITERR[21:16]

	 * <SLV-T>    A0h       37h       [7:0]    IFVBER_BITERR[15:8]

	 * <SLV-T>    A0h       38h       [7:0]    IFVBER_BITERR[7:0]

	 * <SLV-T>    A0h       3Dh       [5:0]    IFVBER_BITNUM[21:16]

	 * <SLV-T>    A0h       3Eh       [7:0]    IFVBER_BITNUM[15:8]

	 * <SLV-T>    A0h       3Fh       [7:0]    IFVBER_BITNUM[7:0]

 Set SLV-T Bank : 0xB2 */

	/*

	 *  slave     Bank      Addr      Bit      Signal name

	 * <SLV-T>    B2h       30h       [0]      IFLBER_VALID

	 * <SLV-T>    B2h       31h       [3:0]    IFLBER_BITERR[27:24]

	 * <SLV-T>    B2h       32h       [7:0]    IFLBER_BITERR[23:16]

	 * <SLV-T>    B2h       33h       [7:0]    IFLBER_BITERR[15:8]

	 * <SLV-T>    B2h       34h       [7:0]    IFLBER_BITERR[7:0]

 Bit error count */

 Set SLV-T Bank : 0xA0 */

 Measurement period */

	/*

	 * FIXME: the right thing would be to return bit_error untouched,

	 * but, as we don't know the scale returned by the counters, let's

	 * at least preserver BER = bit_error/bit_count.

	/*

	 * FIXME: the right thing would be to return bit_error untouched,

	 * but, as we don't know the scale returned by the counters, let's

	 * at least preserver BER = bit_error/bit_count.

	/*

	 * Freeze registers: ensure multiple separate register reads

	 * are from the same snapshot

	/*

	 * un-freeze registers

 Set SLV-T Bank : 0xA1 */

	/*

	 *  slave     Bank      Addr      Bit     Signal name

	 * <SLV-T>    A1h       10h       [0]     ICPM_QUICKRDY

	 * <SLV-T>    A1h       11h       [4:0]   ICPM_QUICKCNDT[12:8]

	 * <SLV-T>    A1h       12h       [7:0]   ICPM_QUICKCNDT[7:0]

 SNR(dB) = -9.50 * ln(IREG_SNR_ESTIMATE / (24320)) */

 SNR(dB) = -8.75 * ln(IREG_SNR_ESTIMATE / (20800)) */

 Set SLV-T Bank : 0xA0 */

	/*

	 *  slave     Bank      Addr      Bit       Signal name

	 * <SLV-T>    A0h       1Fh       [4:0]     IRFAGC_GAIN[12:8]

	 * <SLV-T>    A0h       20h       [7:0]     IRFAGC_GAIN[7:0]

 Formula was empirically determinated @ 410 MHz */

 Code moved out of the function */

		/*

		 * Formula was empirically determinated via linear regression,

		 * using frequencies: 175 MHz, 410 MHz and 800 MHz, and a

		 * stream modulated with QAM64

		/*

		 * Formula was empirically determinated via linear regression,

		 * using frequencies: 175 MHz, 410 MHz and 800 MHz.

 Set early unlock time */

 Set early unlock time */

 Set early unlock time */

 Set SLV-T Bank : 0x2E */

 Set profile and tune mode */

 Set SLV-T Bank : 0x2B */

 Set early unlock detection time */

 Set SLV-T Bank : 0x23 */

 Manual PLP selection mode. Set the data PLP Id. */

 Auto PLP select (Scanning mode = 0x00). Data PLP select = 0x01. */

 TRCG Nominal Rate [37:0] */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 TRCG Nominal Rate [37:0] */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 TRCG Nominal Rate [37:0] */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 TRCG Nominal Rate [37:0] */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 TRCG Nominal Rate [37:0] */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 20.5MHz XTal */

 24MHz XTal   */

 41MHz XTal   */

 20.5MHz XTal */

 24MHz XTal   */

 41MHz XTal   */

 20.5MHz XTal */

 24MHz XTal   */

 41MHz XTal   */

 20.5MHz XTal */

 24MHz XTal   */

 41MHz XTal   */

 20.5MHz XTal */

 24MHz XTal   */

 41MHz XTal   */

 Set SLV-T Bank : 0x20 */

 <Timing Recovery setting> */

 Set SLV-T Bank : 0x27 */

 Set SLV-T Bank : 0x10 */

		/* Group delay equaliser settings for

		 * ASCOT2D, ASCOT2E and ASCOT3 tuners

 <IF freq setting> */

 System bandwidth setting */

 <Timing Recovery setting> */

 Set SLV-T Bank : 0x27 */

 Set SLV-T Bank : 0x10 */

		/* Group delay equaliser settings for

		 * ASCOT2D, ASCOT2E and ASCOT3 tuners

 <IF freq setting> */

 System bandwidth setting */

 <Timing Recovery setting> */

 Set SLV-T Bank : 0x27 */

 Set SLV-T Bank : 0x10 */

		/* Group delay equaliser settings for

		 * ASCOT2D, ASCOT2E and ASCOT3 tuners

 <IF freq setting> */

 System bandwidth setting */

 <Timing Recovery setting> */

 Set SLV-T Bank : 0x27 */

 Set SLV-T Bank : 0x10 */

		/* Group delay equaliser settings for

		 * ASCOT2D, ASCOT2E and ASCOT3 tuners

 <IF freq setting> */

 System bandwidth setting */

 <Timing Recovery setting> */

 Set SLV-T Bank : 0x27 */

 Set SLV-T Bank : 0x10 */

		/* Group delay equaliser settings for

		 * ASCOT2D, ASCOT2E and ASCOT3 tuners

 <IF freq setting> */

 System bandwidth setting */

 TRCG Nominal Rate [37:0] */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 TRCG Nominal Rate [37:0] */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 TRCG Nominal Rate [37:0] */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 TRCG Nominal Rate [37:0] */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 20.5MHz XTal */

 24MHz XTal   */

 41MHz XTal   */

 20.5MHz XTal */

 24MHz XTal   */

 41MHz XTal   */

 20.5MHz XTal */

 24MHz XTal   */

 41MHz XTal   */

 20.5MHz XTal */

 24MHz XTal   */

 41MHz XTal   */

 Set SLV-T Bank : 0x13 */

 Echo performance optimization setting */

 Set SLV-T Bank : 0x10 */

 <Timing Recovery setting> */

		/* Group delay equaliser settings for

		 * ASCOT2D, ASCOT2E and ASCOT3 tuners

 <IF freq setting> */

 System bandwidth setting */

 Demod core latency setting */

 Notch filter setting */

 <Timing Recovery setting> */

		/* Group delay equaliser settings for

		 * ASCOT2D, ASCOT2E and ASCOT3 tuners

 <IF freq setting> */

 System bandwidth setting */

 Demod core latency setting */

 Notch filter setting */

 <Timing Recovery setting> */

		/* Group delay equaliser settings for

		 * ASCOT2D, ASCOT2E and ASCOT3 tuners

 <IF freq setting> */

 System bandwidth setting */

 Demod core latency setting */

 Notch filter setting */

 <Timing Recovery setting> */

		/* Group delay equaliser settings for

		 * ASCOT2D, ASCOT2E and ASCOT3 tuners

 <IF freq setting> */

 System bandwidth setting */

 Demod core latency setting */

 Notch filter setting */

 TRCG Nominal Rate */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 20.5MHz XTal */

 24MHz XTal */

 41MHz XTal */

 20.5MHz XTal */

 24MHz Xtal */

 41MHz XTal   */

 20.5MHz XTal */

 24MHz Xtal */

 41MHz XTal   */

 20.5MHz XTal */

 24MHz Xtal   */

 41MHz XTal   */

 Set SLV-T Bank : 0x10 */

	/*  20.5/41MHz Xtal support is not available

	 *  on ISDB-T 7MHzBW and 8MHzBW

 TRCG Nominal Rate */

  Group delay equaliser settings for ASCOT tuners optimized */

 IF freq setting */

 System bandwidth setting */

 Demod core latency setting */

 Acquisition optimization setting */

 TRCG Nominal Rate */

  Group delay equaliser settings for ASCOT tuners optimized */

 IF freq setting */

 System bandwidth setting */

 Demod core latency setting */

 Acquisition optimization setting */

 TRCG Nominal Rate */

  Group delay equaliser settings for ASCOT tuners optimized */

 IF freq setting */

 System bandwidth setting */

 Demod core latency setting */

 Acquisition optimization setting */

 <IF freq setting> */

 Set SLV-T Bank : 0x11 */

 Set SLV-T Bank : 0x40 */

 Set SLV-X Bank : 0x00 */

 Set demod mode */

 Set SLV-T Bank : 0x00 */

 Enable demod clock */

 Disable RF level monitor */

 Enable ADC clock */

 Enable ADC 1 */

 Enable ADC 2 & 3 */

 Enable ADC 4 */

 Set SLV-T Bank : 0x10 */

 IFAGC gain settings */

 Set SLV-T Bank : 0x11 */

 BBAGC TARGET level setting */

 Set SLV-T Bank : 0x10 */

 ASCOT setting */

 Set SLV-T Bank : 0x18 */

 Pre-RS BER monitor setting */

 FEC Auto Recovery setting */

 Set SLV-T Bank : 0x00 */

 TSIF setting */

 Set SLV-T Bank : 0x10 */

 Set SLV-T Bank : 0x00 */

 Disable HiZ Setting 1 */

 Disable HiZ Setting 2 */

 Set SLV-X Bank : 0x00 */

 Set demod mode */

 Set SLV-T Bank : 0x00 */

 Enable demod clock */

 Disable RF level monitor */

 Enable ADC clock */

 Enable ADC 1 */

 Enable ADC 4 */

 Set SLV-T Bank : 0x10 */

 IFAGC gain settings */

 Set SLV-T Bank : 0x11 */

 BBAGC TARGET level setting */

 Set SLV-T Bank : 0x10 */

 ASCOT setting */

 Set SLV-T Bank : 0x20 */

 Acquisition optimization setting */

 Set SLV-T Bank : 0x2b */

 Set SLV-T Bank : 0x23 */

 L1 Control setting */

 Set SLV-T Bank : 0x00 */

 TSIF setting */

 DVB-T2 initial setting */

 Set SLV-T Bank : 0x2a */

 Set SLV-T Bank : 0x2b */

 24MHz Xtal setting */

 Set SLV-T Bank : 0x11 */

 Set SLV-T Bank : 0x20 */

 Set SLV-T Bank : 0x24 */

 Set SLV-T Bank : 0x25 */

 Set SLV-T Bank : 0x27 */

 Set SLV-T Bank : 0x2B */

 Set SLV-T Bank : 0x2D */

 Set SLV-T Bank : 0x5E */

 Set SLV-T Bank : 0x00 */

 Disable HiZ Setting 1 */

 Disable HiZ Setting 2 */

 ISDB-Tb part */

 Set SLV-X Bank : 0x00 */

 Set demod mode */

 Set SLV-T Bank : 0x00 */

 Enable demod clock */

 Enable RF level monitor */

 Enable ADC clock */

 Enable ADC 1 */

 xtal freq 20.5MHz or 24M */

 Enable ADC 4 */

 ASCOT setting */

 FEC Auto Recovery setting */

 ISDB-T initial setting */

 Set SLV-T Bank : 0x00 */

 Set SLV-T Bank : 0x10 */

 Set SLV-T Bank : 0x15 */

 Set SLV-T Bank : 0x1E */

 Set SLV-T Bank : 0x63 */

 for xtal 24MHz */

 Set SLV-T Bank : 0x10 */

 Set SLV-T Bank : 0x60 */

 Set SLV-T Bank : 0x00 */

 Disable HiZ Setting 1 */

 Disable HiZ Setting 2 */

 Set SLV-X Bank : 0x00 */

 Set demod mode */

 Set SLV-T Bank : 0x00 */

 Enable demod clock */

 Disable RF level monitor */

 Enable ADC clock */

 Enable ADC 1 */

 xtal freq 20.5MHz */

 Enable ADC 4 */

 Set SLV-T Bank : 0x10 */

 IFAGC gain settings */

 Set SLV-T Bank : 0x11 */

 BBAGC TARGET level setting */

 Set SLV-T Bank : 0x10 */

 ASCOT setting */

 Set SLV-T Bank : 0x40 */

 Demod setting */

 Set SLV-T Bank : 0x00 */

 TSIF setting */

 Set SLV-T Bank : 0x00 */

 Disable HiZ Setting 1 */

 Disable HiZ Setting 2 */

 Prevent retrieving stats faster than once per second */

 Reset stats */

 Reset the wait for jiffies logic */

 deconfigure/put demod to sleep on delsys switch if active */

 correct bandwidth */

 DiDEqC enable */

 cmd1 length & data */

 repeat count for cmd1 */

 repeat count for cmd2: always 0 */

 start transmit */

 wait for 1 sec timeout */

 sanity. force demod to SHUTDOWN state */

 SONY_DEMOD_CONFIG_SAT_IFAGCNEG set to 1 */

 SONY_DEMOD_CONFIG_IFAGCNEG = 1 (0 for NO_AGCNEG */

 SONY_DEMOD_CONFIG_IFAGC_ADC_FS = 0 */

 SONY_DEMOD_CONFIG_PARALLEL_SEL = 1 */

 clear TSCFG bits 3+4 */

 allocate memory for the internal state */

 create dvb_frontend */

 will set in attach function */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	STB0899 Multistandard Frontend driver

	Copyright (C) Manu Abraham (abraham.manu@gmail.com)



	Copyright (C) ST Microelectronics



 wrap do_div() for ease of use */

 These functions are currently unused */

/*

 * stb0899_calc_srate

 * Compute symbol rate

 srate = (SFR * master_clk) >> 20 */

 sfr is of size 20 bit, stored with an offset of 4 bit */

/*

 * stb0899_get_srate

 * Get the current symbol rate

/*

 * stb0899_set_srate

 * Set symbol frequency

 * MasterClock: master clock frequency (hz)

 * SymbolRate: symbol rate (bauds)

 * return symbol frequency

	/*

	 * in order to have the maximum precision, the symbol rate entered into

	 * the chip is computed as the closest value of the "true value".

	 * In this purpose, the symbol rate value is rounded (1 is added on the bit

	 * below the LSB )

	 *

	 * srate = (SFR * master_clk) >> 20

	 *      <=>

	 *   SFR = srate << 20 / master_clk

	 *

	 * rounded:

	 *   SFR = (srate << 21 + master_clk) / (2 * master_clk)

	 *

	 * stored as 20 bit number with an offset of 4 bit:

	 *   sfr = SFR << 4;

/*

 * stb0899_calc_derot_time

 * Compute the amount of time needed by the derotator to lock

 * SymbolRate: Symbol rate

 * return: derotator time constant (ms)

/*

 * stb0899_carr_width

 * Compute the width of the carrier

 * return: width of carrier (kHz or Mhz)

/*

 * stb0899_first_subrange

 * Compute the first subrange of the search

/*

 * stb0899_check_tmg

 * check for timing lock

 * internal.Ttiming: time to wait for loop lock

/*

 * stb0899_search_tmg

 * perform a fs/2 zig-zag to find timing

 timing loop computation & symbol rate optimisation	*/

 next derot zig zag position	*/

 derotator frequency		*/

 Change zigzag direction		*/

 get derotator frequency		*/

/*

 * stb0899_check_carrier

 * Check for carrier found

 wait for derotator ok	*/

/*

 * stb0899_search_carrier

 * Search for a QPSK carrier with the derotator

 next zig zag derotator position */

 derotator frequency	*/

 Change zigzag direction */

 get derotator frequency */

/*

 * stb0899_check_data

 * Check for data found

 RESET FEC	*/

 clear previous failed END_LOOPVIT */

 force search loop	*/

 WARNING! VIT LOCKED has to be tested before VIT_END_LOOOP	*/

 DATA LOCK indicator	*/

/*

 * stb0899_search_data

 * Search for a QPSK carrier with the derotator

 next zig zag derotator position */

 derotator frequency	*/

 change zig zag direction */

 get derotator frequency */

 store autodetected IQ swapping as default for DVB-S2 tuning */

/*

 * stb0899_check_range

 * check if the found frequency is in the correct range

/*

 * NextSubRange

 * Compute the next subrange of the search

/*

 * stb0899_dvbs_algo

 * Search for a signal, timing, carrier and data for a

 * given frequency in a given range

 BETA values rated @ 99MHz	*/

  5   10   20   30MBps */

 QPSK 1/2	*/

 QPSK 2/3	*/

 QPSK 3/4	*/

 QPSK 5/6	*/

 QPSK 7/8	*/

 Carrier loop optimization versus symbol rate for acquisition*/

 Set the timing loop to acquisition	*/

	/* !! WARNING !!

	 * Do not read any status variables while acquisition,

	 * If any needed, read before the acquisition starts

	 * querying status while acquiring causes the

	 * acquisition to go bad and hence no locks.

 Initial calculations	*/

 DerotStep/1000 * Fsymbol	*/

 RESET Stream merger	*/

	/*

	 * Set KDIVIDER to an intermediate value between

	 * 1/2 and 7/8 for acquisition

 Equalizer OFF while acquiring */

 Initialisations */

 RESET derotator frequency	*/

 enable tuner I/O */

 Move tuner to frequency */

 AGC1, AGC2 and timing loop	*/

 There is signal in the band	*/

 disable tuner I/O */

 For low rates (SCPC)	*/

 For high rates (MCPC)	*/

 Search for carrier	*/

 Check for data	*/

 Set the timing loop to tracking	*/

 if locked and range ok, set Kdiv	*/

 Equalizer OFF while acquiring	*/

 SN to b'11 for acquisition		*/

		/*

		 * Carrier loop optimization versus

		 * symbol Rate/Puncture Rate for Tracking

 13	*/

 18	*/

 21	*/

 24	*/

 25	*/

 26	*/

 release stream merger RESET	*/

 disable carrier detector	*/

/*

 * stb0899_dvbs2_config_uwp

 * Configure UWP state machine

/*

 * stb0899_dvbs2_config_csm_auto

 * Set CSM to AUTO mode

/*

 * stb0899_dvbs2_calc_srate

 * compute BTR_NOM_FREQ for the symbol rate

/*

 * stb0899_dvbs2_calc_dev

 * compute the correction to be applied to symbol rate

 for integer Calculation*/

 for integer Calculation*/

/*

 * stb0899_dvbs2_set_srate

 * Set DVBS2 symbol rate

set decimation to 1*/

 (FSamp/Fsymbol *100) for integer Calculation */

 don't band limit signal going into btr block*/

 band limit signal going into btr block*/

 scale UWP+CSM frequency to sample rate*/

/*

 * stb0899_dvbs2_set_btr_loopbw

 * set bit timing loop bandwidth as a percentage of the symbol rate

k=k 10^-8*/

wn =wn 10^-8*/

kindirect = kindirect 10^-6*/

kDirect = kDirect 10^-2*/

- 2*/;

/*

 * stb0899_dvbs2_set_carr_freq

 * set nominal frequency for carrier search

/*

 * stb0899_dvbs2_init_calc

 * Initialize DVBS2 UWP, CSM, carrier and timing loops

 config uwp and csm */

 initialize BTR	*/

Set Carrier Search params (zigzag, num steps and freq step size*/

/*

 * stb0899_dvbs2_btr_init

 * initialize the timing loop

 set enable BTR loopback	*/

 fix btr freq accum at 0	*/

 fix btr freq accum at 0	*/

/*

 * stb0899_dvbs2_reacquire

 * trigger a DVB-S2 acquisition

 demod soft reset	*/

Reset Timing Loop	*/

 reset Carrier loop	*/

release demod soft reset	*/

 start acquisition process	*/

 equalizer Init	*/

Start equilizer	*/

 RESET Packet delineator	*/

/*

 * stb0899_dvbs2_get_dmd_status

 * get DVB-S2 Demod LOCK status

/*

 * stb0899_dvbs2_get_data_lock

 * get FEC status

/*

 * stb0899_dvbs2_get_fec_status

 * get DVB-S2 FEC LOCK status

/*

 * stb0899_dvbs2_init_csm

 * set parameters for manual mode

/*

 * stb0899_dvbs2_get_srate

 * get DVB-S2 Symbol Rate

 only for integer calculation	*/

symbrate = (btrnomfreq_register_val*MasterClock)/2^(27+decim_rate_field) */

/*

 * stb0899_dvbs2_algo

 * Search for signal, timing, carrier and data for a given

 * frequency in a given range

 5000 ms max time to lock UWP and CSM, SYMB <= 2Mbs		*/

 350  ms max time to lock FEC, SYMB <= 2Mbs			*/

 2500 ms max time to lock UWP and CSM, 2Mbs < SYMB <= 5Mbs	*/

 170  ms max time to lock FEC, 2Mbs< SYMB <= 5Mbs		*/

 1500 ms max time to lock UWP and CSM, 5Mbs <SYMB <= 10Mbs	*/

 80  ms max time to lock FEC, 5Mbs< SYMB <= 10Mbs		*/

 500 ms max time to lock UWP and CSM, 10Mbs <SYMB <= 15Mbs	*/

 50  ms max time to lock FEC, 10Mbs< SYMB <= 15Mbs		*/

 300 ms max time to lock UWP and CSM, 15Mbs < SYMB <= 20Mbs	*/

 50  ms max time to lock FEC, 15Mbs< SYMB <= 20Mbs		*/

 250 ms max time to lock UWP and CSM, 20 Mbs < SYMB <= 25Mbs	*/

 25 ms max time to lock FEC, 20Mbs< SYMB <= 25Mbs		*/

 150 ms max time to lock UWP and CSM, SYMB > 25Mbs		*/

 20 ms max time to lock FEC, 20Mbs< SYMB <= 25Mbs		*/

 Maintain Stream Merger in reset during acquisition	*/

 enable tuner I/O */

 Move tuner to frequency	*/

 disable tuner I/O */

 Set IF AGC to acquisition	*/

 Initialisation	*/

 Wait for demod lock (UWP and CSM)	*/

 Demod Locked, check FEC status	*/

If false lock (UWP and CSM Locked but no FEC) try 3 time max*/

	Read the frequency offset*/

 Set the Nominal frequency to the found frequency offset for the next reacquire*/

 IQ Spectrum Inversion	*/

 start acquistion process	*/

 Wait for demod lock (UWP and CSM)	*/

 Demod Locked, check FEC	*/

try thrice for false locks, (UWP and CSM Locked but no FEC)	*/

	Read the frequency offset*/

 Set the Nominal frequency to the found frequency offset for the next reacquire*/

/*

		if (pParams->DVBS2State == FE_DVBS2_FEC_LOCKED)

			pParams->IQLocked = !iqSpectrum;

 Wait for UWP,CSM and data LOCK 20ms max	*/

 Equalizer Disable update	 */

 slow down the Equalizer once locked	*/

 Store signal parameters	*/

 store current inversion for next run */

 Set IF AGC to tracking	*/

 if QPSK 1/2,QPSK 3/5 or QPSK 2/3 set IF AGC reference to 16 otherwise 32*/

 Release Stream Merger Reset		*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Auvitek AU8522 QAM/8VSB demodulator driver



    Copyright (C) 2008 Steven Toth <stoth@linuxtv.org>





 default to on */

 VSB SNR lookup table */

 QAM64 SNR lookup table */

 QAM256 SNR lookup table */

 VSB Modulation table */

 QAM64 Modulation table */

 QAM256 Modulation table */

 Talk to the demod, set the FEC, GUARD, QAM settings etc */

 Allow the tuner to settle */

 Get the tuner status */

 turn on LED, if it isn't on already */

 turn off LED */

 bail out if we can't control an LED */

 (state->current_modulation == VSB_8) */

		/* snr didn't change enough to bother

 VSB_8 */

	/* borrowed from lgdt330x.c

	 *

	 * Calculate strength from SNR up to 35dB

	 * Even though the SNR can go higher than 35dB,

	 * there is some comfort factor in having a range of

	 * strong signals that can show at 100%

		/* The following calculation method was chosen

		 * purely for the sake of code re-use from the

 Convert from SNR in dB * 10 to 8.24 fixed-point */

		/* Convert from 8.24 fixed-point to

 allocate memory for the internal state */

 new demod instance */

 existing demod instance */

 setup the state */

 create dvb_frontend */

 Note: Leaving the I2C gate open here. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *   Fujitu mb86a20s ISDB-T/ISDB-Tsb Module driver

 *

 *   Copyright (C) 2010-2013 Mauro Carvalho Chehab

 *   Copyright (C) 2009-2010 Douglas Landgraf <dougsland@redhat.com>

 Seconds */

/*

 * Initialization sequence: Use whatevere default values that PV SBTVD

 * does on its initialisation, obtained via USB snoop

	/*

	 * On this demod, when the bit count reaches the count below,

	 * it collects the bit error count. The bit counters are initialized

	 * to 65535 here. This warrants that all of them will be quickly

	 * calculated when device gets locked. As TMCC is parsed, the values

	 * will be adjusted later in the driver's code.

 Turn on BER before Viterbi */

	/*

	 * On this demod, post BER counts blocks. When the count reaches the

	 * value below, it collects the block error count. The block counters

	 * are initialized to 127 here. This warrants that all of them will be

	 * quickly calculated when device gets locked. As TMCC is parsed, the

	 * values will be adjusted later in the driver's code.

 Turn on BER after Viterbi */

	/*

	 * On this demod, when the block count reaches the count below,

	 * it collects the block error count. The block counters are initialized

	 * to 127 here. This warrants that all of them will be quickly

	 * calculated when device gets locked. As TMCC is parsed, the values

	 * will be adjusted later in the driver's code.

 Enable PER */

 MER manual mode */

 MER symbol 4 */

 CN symbol 4 */

 CN manual mode */

 pre BER Counter reset */

 post BER Counter reset */

 PER Counter reset */

/*

 * I2C read/write functions and macros

/*

 * Ancillary internal routines (likely compiled inlined)

 *

 * The functions below assume that gateway lock has already obtained

	/*

	 * Actually, on state S8, it starts receiving TS, but the TS

	 * output is only on normal state after the transition to S9.

 Reset its value if an error happen */

 Does a binary search to get RF strength */

 Rescale it from 2^12 (4096) to 2^16 */

 Layer A */

 Layer B */

 Layer C */

 Layer A */

 Layer B */

 Layer C */

 Layer A */

 Layer B */

 Layer C */

 Layer A */

 Layer B */

 Layer C */

 Fixed parameters */

 Initialize values that will be later autodetected */

/*

 * Estimates the bit rate using the per-segment bit rate given by

 * ABNT/NBR 15601 spec (table 4).

 DQPSK/QPSK */

 1/2 */

 2/3 */

 3/4 */

 5/6 */

 7/8 */

 QAM16 */

 1/2 */

 2/3 */

 3/4 */

 5/6 */

 7/8 */

 QAM64 */

 1/2 */

 2/3 */

 3/4 */

 5/6 */

 7/8 */

	/*

	 * If modulation/fec/guard is not detected, the default is

	 * to consider the lowest bit rate, to avoid taking too long time

	 * to get BER.

 Reset frontend cache to default values */

 Check for partial reception */

 Get per-layer data */

 Avoids sampling too quickly or to overflow the register */

 At least, one segment should exist */

 Get transmission mode and guard interval */

 Only modes 2 and 3 are supported */

 Guard interval 1/32 is not supported */

 per-layer info is incomplete; discard all per-layer */

 Reset the counters, if the channel changed */

 Clear status for most stats */

 BER/PER counter reset */

 CNR counter reset */

 MER counter reset */

 Check if the BER measures are already available */

 Check if data is available for that layer */

 Read Bit Error Count */

 Read Bit Count */

	/*

	 * As we get TMCC data from the frontend, we can better estimate the

	 * BER bit counters, in order to do the BER measure during a longer

	 * time. Use those data, if available, to update the bit count

	 * measure.

 Turn off BER before Viterbi */

 Update counter for this layer */

 Turn on BER before Viterbi */

 Reset all preBER counters */

 Reset counter to collect new data */

 Check if the BER measures are already available */

 Check if data is available for that layer */

 Read Bit Error Count */

 Read Bit Count */

	/*

	 * As we get TMCC data from the frontend, we can better estimate the

	 * BER bit counters, in order to do the BER measure during a longer

	 * time. Use those data, if available, to update the bit count

	 * measure.

 Turn off BER after Viterbi */

 Update counter for this layer */

 Turn on BER after Viterbi */

 Reset all preBER counters */

 Reset counter to collect new data */

 Check if the PER measures are already available */

 Check if data is available for that layer */

 Read Packet error Count */

 Read Bit Count */

	/*

	 * As we get TMCC data from the frontend, we can better estimate the

	 * BER bit counters, in order to do the BER measure during a longer

	 * time. Use those data, if available, to update the bit count

	 * measure.

 Stop PER measurement */

 Update this layer's counter */

 start PER measurement */

 Reset all counters to collect new data */

 Reset counter to collect new data */

/*

 * All tables below return a dB/1000 measurement

 If value is identical, no need to interpolate */

 Linear interpolation between the two (x,y) points */

 Check if CNR is available */

 CNR counter reset */

 Check if the measures are already available */

 Check if data is available */

 Read all layers */

 Start a new MER measurement */

 MER counter reset */

 Fill the length of each status counter */

 Only global stats */

 Per-layer stats - 3 layers + global */

 Signal is always available */

 Put all of them at FE_SCALE_NOT_AVAILABLE */

 Get per-layer stats */

	/*

	 * At state 7, only CNR is available

	 * For BER measures, state=9 is required

	 * FIXME: we may get MER measures with state=8

 Layer is active and has rc segments */

 Handle BER before vterbi */

				/*

					* If an I/O error happened,

					* measures are now unavailable

 Handle BER post vterbi */

				/*

					* If an I/O error happened,

					* measures are now unavailable

 Handle Block errors for PER/UCB reports */

				/*

					* If an I/O error happened,

					* measures are now unavailable

 Update total preBER */

 Update total postBER */

 Update total PER */

	/*

	 * Start showing global count if at least one error count is

	 * available.

		/*

		 * At least one per-layer BER measure was read. We can now

		 * calculate the total BER

		 *

		 * Total Bit Error/Count is calculated as the sum of the

		 * bit errors on all active layers.

	/*

	 * Start showing global count if at least one error count is

	 * available.

		/*

		 * At least one per-layer BER measure was read. We can now

		 * calculate the total BER

		 *

		 * Total Bit Error/Count is calculated as the sum of the

		 * bit errors on all active layers.

		/*

		 * At least one per-layer UCB measure was read. We can now

		 * calculate the total UCB

		 *

		 * Total block Error/Count is calculated as the sum of the

		 * block errors on all active layers.

/*

 * The functions below are called via DVB callbacks, so they need to

 * properly use the I2C gate control

 Initialize the frontend */

 Adjust IF frequency to match tuner */

 pll = freq[Hz] * 2^24/10^6 / 16.285714286 */

	/*

	 * Gate should already be opened, but it doesn't hurt to

	 * double-check

	/*

	 * Make it more reliable: if, for some reason, the initial

	 * device initialization doesn't happen, initialize it when

	 * a SBTVD parameters are adjusted.

	 *

	 * Unfortunately, due to a hard to track bug at tda829x/tda18271,

	 * the agc callback logic is not called during DVB attach time,

	 * causing mb86a20s to not be initialized with Kworld SBTVD.

	 * So, this hack is needed, in order to make Kworld SBTVD to work.

	 *

	 * It is also needed to change the IF after the initial init.

	 *

	 * HACK: Always init the frontend when set_frontend is called:

	 * it was noticed that, on some devices, it fails to lock on a

	 * different channel. So, it is better to reset everything, even

	 * wasting some time, than to loose channel lock.

 Get lock */

 Get signal strength */

 Status is OK */

 Get TMCC info*/

 Status is OK */

 Get statistics */

 Don't return EBUSY to userspace */

 allocate memory for the internal state */

 setup the state */

 create dvb_frontend */

 Check if it is a mb86a20s frontend */

 Use dib8000 values per default */

 Actually, those values depend on the used tuner */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	STV6110(A) Silicon tuner driver



	Copyright (C) Manu Abraham <abraham.manu@gmail.com>



	Copyright (C) ST Microelectronics



 Max transfer size done by I2C transfer functions */

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

 VCO Auto calibration */

 LPF */

 LPF */

 LPF */

 cal. clk activated */

 LPF auto cal */

 cal. done */

 setup divider */

 setup callbacks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Abilis Systems Single DVB-T Receiver

 * Copyright (C) 2008 Pierrick Hascoet <pierrick.hascoet@abilis.com>

 * Copyright (C) 2010 Devin Heitmueller <dheitmueller@kernellabs.com>

 signal strength */

 bit error rate */

 set frequency */

 fix interleaving_mode */

	/*

	 * Detect a hierarchy selection

	 * if HP/LP are both set to FEC_NONE, HP will be selected.

 Set frontend arguments */

 send abilis command: GET_TPS */

 extract constellation */

 extract hierarchy */

 extract code rate HP */

 extract code rate LP */

 extract guard interval */

 extract transmission mode */

 send abilis command: GET_TUNE_STATUS */

/*

 * Note:

 * - in AS102 SNR=MER

 *   - the SNR will be returned in linear terms, i.e. not in dB

 *   - the accuracy equals ±2dB for a SNR range from 4dB to 30dB

 *   - the accuracy is >2dB for SNR values outside this range

 init frontend callback ops */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * isl6405.c - driver for dual lnb supply and control ic ISL6405

 *

 * Copyright (C) 2008 Hartmut Hackmann

 * Copyright (C) 2006 Oliver Endriss

 *

 * the project's page is at https://linuxtv.org

 power off */

 free */

 default configuration */

 bits which should be forced to '1' */

 bits which should be forced to '0' */

 detect if it is present or not */

 install release callback */

 override frontend ops */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Allegro A8293 SEC driver

 *

 * Copyright (C) 2011 Antti Palosaari <crope@iki.fi>

 ENB=0 */

 VSEL0=1, VSEL1=0, VSEL2=0, VSEL3=0, ENB=1*/

 VSEL0=0, VSEL1=0, VSEL2=0, VSEL3=1, ENB=1*/

 TMODE=0, TGATE=1 */

 check if the SEC is there */

 override frontend ops */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	STV0900/0903 Multistandard Broadcast Frontend driver

	Copyright (C) Manu Abraham <abraham.manu@gmail.com>



	Copyright (C) ST Microelectronics



 for demodulator internal modes */

 Max transfer size done by I2C transfer functions */

 internal params node */

 pointer for internal params, one for each pair of demods */

 first internal params */

 find chip by i2c adapter and i2c address */

	/*

	 Search of the last stv0900 chip or

 deallocating chip */

 allocating new chip */

 append to list */

 DVBS1 and DSS C/N Lookup table */

  0.0dB */

  0.5dB */

  1.0dB */

  1.5dB */

  2.0dB */

  2.5dB */

  3.0dB */

  3.5dB */

  4.0dB */

  4.5dB */

  5.0dB */

  5.5dB */

  6.0dB */

  6.5dB */

  7.0dB */

  7.5dB */

  8.0dB */

  8.5dB */

  9.0dB */

  9.5dB */

 10.0dB */

 10.5dB */

 11.0dB */

 11.5dB */

 12.0dB */

 12.5dB */

 13.0dB */

 13.5dB */

 14.0dB */

 14.5dB */

 15.0dB */

 16.0dB */

 17.0dB */

 18.0dB */

 19.0dB */

 20.0dB */

 21.0dB */

 22.0dB */

 23.0dB */

 24.0dB */

 25.0dB */

 26.0dB */

 27.0dB */

 28.0dB */

 29.0dB */

 30.0dB */

 31.0dB */

 32.0dB */

 33.0dB */

 40.0dB */

 45.0dB */

 50.0dB */

 DVBS2 C/N Lookup table */

 -3.0dB */

 -2d.0B */

 -1.0dB */

 -0.0dB */

  0.5dB */

  1.0dB */

  1.5dB */

  2.0dB */

  2.5dB */

  3.0dB */

  3.5dB */

  4.0dB */

  4.5dB */

  5.0dB */

  5.5dB */

  6.0dB */

  6.5dB */

  7.0dB */

  7.5dB */

  8.0dB */

  8.5dB */

  9.0dB */

  9.5dB */

 10.0dB */

 10.5dB */

 11.0dB */

 11.5dB */

 12.0dB */

 12.5dB */

 13.0dB */

 13.5dB */

 14.0dB */

 14.5dB */

 15.0dB */

 16.0dB */

 17.0dB */

 18.0dB */

 19.0dB */

 20.0dB */

 21.0dB */

 22.0dB */

 23.0dB */

 24.0dB */

 25.0dB */

 26.0dB */

 27.0dB */

 28.0dB */

 29.0dB */

 30.0dB */

 31.0dB */

 32.0dB */

 33.0dB */

 40.0dB */

 45.0dB */

 50.0dB */

 RF level C/N lookup table */

  -5dBm */

 -10dBm */

 -15dBm */

 -20dBm */

 -25dBm */

 -30dBm */

 -35dBm */

 -40dBm */

 -45dBm */

 -50dBm */

 -55dBm */

 -60dBm */

 -65dBm */

 -70dBm */

 disable DSS modes */

 disable DSS modes */

 disable PR 6/7 */

 disable PR 6/7 */

disable the DSS mode */

disable puncture rate 6/7*/

 Cut 2.0 Long Frame Tracking CR loop */

 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff */

 Cut 3.0 Long Frame Tracking CR loop */

 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff */

 Cut 2.0 Long Frame Tracking CR Loop */

 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff */

 Cut 3.0 Long Frame Tracking CR Loop */

 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff */

 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff */

 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff */

 Cut 2.0 Short Frame Tracking CR Loop */

 MODCOD	  2M    5M    10M   20M   30M */

 Cut 3.0 Short Frame Tracking CR Loop */

 MODCOD	  2M	5M    10M   20M	  30M */

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

	/*

	 * NOTE! A lock is used as a FSM to control the state in which

	 * access is serialized between two tuners on the same demod.

	 * This has nothing to do with a lock to protect a critical section

	 * which may in some other cases be confused with protecting I/O

	 * access to the demodulator gate.

	 * In case of any error, the lock is unlocked and exit within the

	 * relevant operations themselves.

10Msps< SR <=15Msps*/

10Msps< SR <=15Msps*/

SR >20Msps*/

SR <=1Msps*/

1Msps < SR <= 2Msps */

2Msps < SR <= 5Msps */

5Msps < SR <= 10Msps */

10Msps < SR <= 20Msps */

SR >20Msps*/

 SR * 2^16 / master_clk */

 MSB */

 LSB */

 SR * 2^16 / master_clk */

 MSB */

 LSB */

 MSB */

 LSB */

 SR * 2^16 / master_clk */

 MSB */

 LSB */

 DVB-S and DVB-S2 */

 all puncture rate */

 disable DSS */

 all */

 1/2, 2/3, 6/7 */

 Set ACLC BCLC optimised value vs SR */

 Cut 2.0 */

		/* Activate Viterbi decoder in legacy search,

		 * do not use FRESVIT1, might impact VITERBI2

 disable DVB-S2 */

 stop DVB-S CR loop */

 enable S2 carrier loop */

 > Cut 3: Stop carrier 3 */

 Cut 2: enable link during search */

			/* Single demodulator

			 * Authorize SHORT and LONG frames,

			 * QPSK, 8PSK, 16APSK and 32APSK

 enable DVB-S2 and DVB-S2 in Auto MODE */

 enable S2 carrier loop */

 > Cut 3: Stop carrier 3 */

 Cut 2: enable link during search */

			/* Single demodulator

			 * Authorize SHORT and LONG frames,

			 * QPSK, 8PSK, 16APSK and 32APSK

 Reset demodulator */

enlarge the timing bandwidth for Low SR*/

			/* If the symbol rate is >5 Msps

reduce the timing bandwidth for high SR*/

 >= Cut 3 */

 enlarge the timing bandwidth for Low SR */

 reduce timing bandwidth for high SR */

 Set CFR min and max to manual mode */

			/* WARM Start

			 * CFR min = -1MHz,

			 * CFR max = +1MHz

			/* COLD Start

			 * CFR min =- (SearchRange / 2 + 600KHz)

			 * CFR max = +(SearchRange / 2 + 600KHz)

			 * (600KHz for the tuner step size)

Frequency offset detector setting*/

 Cut 2 */

 Cut 3 */

		/* The symbol rate and the exact

		 * carrier Frequency are known

 The symbol rate is known */

 SR = 65 Msps Max */

 SR= 400 ksps Min */

 stop acq @ coarse carrier state */

 Demod RESET */

 Demod RESET */

 Demod RESET */

 Demod RESET */

 trigger acquisition */

 Setup tuner */

 SFRUP = SFR + 30% */

 Demod RESET */

 SFRUP = SFR + 30% */

 SFRLOW = SFR - 30% */

 SFRUP = SFR + 30% */

 SFRLOW = SFR - 30% */

 trigger acquisition */

 searching */

 first PLH detected */

 DVB-S2 mode */

 DVB-S1/legacy mode */

 > Cut 3 */

 set viterbi hysteresis */

 stop carrier offset search */

 set car ofset to 0 */

 trigger acquisition */

 DVB-S1 timing */

 DVB-S2 timing */

 cold start wait */

 Setup tuner */

 maxcarrier should be<= +-1/4 Mclk */

 freq step = 3% of srate */

 increment <= 1/8 Mclk */

 27.5 Msps reference */

 min steps = 3 */

 max steps <= 100 */

 10% margin */

 stop DVB-S2 packet delin */

 get params */

 accelerate the frequency detector */

 accelerate the frequency detector */

run the SW search 2 times maximum*/

Check if the demod is not losing lock in DVBS2*/

Check if the demod is not losing lock in DVBS2*/

if correct frames is decrementing */

FALSE lock, The demod is losing lock */

 in Hz */

 carrier_frequency = MasterClock * Reg / 2^24 */

 2's complement */

 >= Cut 3 */

 16APSK and 32APSK */

		/*

		 * This should never happen in practice, except if

		 * something is really wrong at the car_loop table.

 Cut 3.0 and up */

 Cut 2.0 and up: we don't support cuts older than 2.0 */

Carrier loop setting for short frame*/

 PER */

 AUTO tracking MODE */

 AUTO tracking MODE */

 update initial carrier freq with the found freq offset */

 blind search: wait 50ms for SR stabilization */

 searching */

 first PLH detected */

 DVB-S2 mode */

 DVB-S1/legacy mode */

 rolloff to auto mode if DVBS2 */

 DVB-S2 rolloff to auto mode if DVBS2 */

 Stop path 1 stream merger */

 Demod stop */

 wide bw for unknown srate */

 wider srate scan */

 initial srate = 1Msps */

 known srate */

 SR < 2MSPS */

 SR >= 2Msps */

		/* if cold start or warm  (Symbolrate is known)

		 * use a Narrow symbol rate scan range

 narrow srate scan */

 Setup tuner */

 default: 10dB */

		/* If AGC1 integrator value is 0

		 * then read POWERI, POWERQ

 rolloff to auto mode if DVBS2 */

 DVB-S2 rolloff to auto mode if DVBS2 */

 signal within Range */

			/* >= Cut 2.0 :release TS reset after

			 * demod lock and optimized Tracking

 release merger reset */

 merger reset */

 release merger reset */

 Reset DVBS2 packet delinator error counter */

 PER */

 Reset the Total packet counter */

 Reset the packet Error counter2 */

 searching */

 first PLH detected */

 DVB-S2 mode */

 DVB-S1/legacy mode */

 Max PER */

 Counter 2 */

 power off ADC 1 */

 power off DiSEqC 1 */

		/* check whether path 2 is already sleeping, that is when

 stop clocks */

 packet delineator 1 clock */

 ADC 1 clock */

		/* FEC clock is shared between the two paths, only stop it

 sampling 1 clock */

 viterbi 1 clock */

		/* TS clock is shared between the two paths, only stop it

 power off ADC 2 */

 power off DiSEqC 2 */

		/* check whether path 1 is already sleeping, that is when

 stop clocks */

 packet delineator 2 clock */

 ADC 2 clock */

		/* FEC clock is shared between the two paths, only stop it

 sampling 2 clock */

 viterbi 2 clock */

		/* TS clock is shared between the two paths, only stop it

 general power off */

 general power on */

 power on ADC 1 */

 power on DiSEqC 1 */

 activate clocks */

 packet delineator 1 clock */

 ADC 1 clock */

 FEC clock */

 sampling 1 clock */

 viterbi 1 clock */

 TS clock */

 power on ADC 2 */

 power on DiSEqC 2 */

 activate clocks */

 packet delineator 2 clock */

 ADC 2 clock */

 FEC clock */

 sampling 2 clock */

 viterbi 2 clock */

 TS clock */

 set LDPC to dual mode */

 path 2 */

 path 1 */

 return (Hz), clk in Hz*/

 kHz */

Set the DiseqC frequency to 22KHz */

 Mux'd stream mode */

		/* call tuner init to configure the tuner's clock output

		   divider directly before setting up the master clock of

 135 Mhz */

 STV090x init */

 Stop Demod */

 Set No Tuner Mode */

 I2C repeater OFF */

 set PLL divider */

 1/41 oversampling */

 enable PLL */

 write initval */

 write cut20_val*/

 we shouldn't bail out from here */

 ADC1 range */

 ADC2 range */

 workaround for stuck DiSEqC output */

 Single or Dual mode */

 default */

 setup callbacks */

 Single or Dual mode */

 default */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the MaxLinear MxL5xx family of tuners/demods

 *

 * Copyright (C) 2014-2015 Ralph Metzler <rjkm@metzlerbros.de>

 *                         Marcus Metzler <mocm@metzlerbros.de>

 *                         developed for Digital Devices GmbH

 *

 * based on code:

 * Copyright (c) 2011-2013 MaxLinear, Inc. All rights reserved

 * which was released under GPL V2

 do nothing */

 init fe stats */

 Release one frontend, two more shall take its place! */

struct mxl *state = fe->demodulator_priv;*/

CfgDemodAbortTune(state);*/

 CfgDemodAbortTune(state); */

 fix scale */

 signal statistics */

 signal strength is always available */

 25 * 4 bytes */

 read demod channel parameters */

 4 bytes */

	/*

	 * p->delivery_system =

	 *	(MXL_HYDRA_BCAST_STD_E) regData[DMD_STANDARD_ADDR];

	 * p->inversion =

	 *	(MXL_HYDRA_SPECTRUM_E) regData[DMD_SPECTRUM_INVERSION_ADDR];

	 * freqSearchRangeKHz =

	 *	(regData[DMD_FREQ_SEARCH_RANGE_IN_KHZ_ADDR]);

 put CPU into reset */

 Reset TX FIFO's, BBAND, XBAR */

	/* Disable clock to Baseband, Wideband, SerDes,

	 * Alias ext & Transport modules

 Clear Software & Host interrupt status - (Clear on read) */

 bring XCPU out of reset */

 Enable XCPU UART message processing in MCPU */

 Bring CPU out of reset */

 Wait until FW boots */

 Initialize XPT XBAR */

	/* sometimes register values are wrong shortly

	 * after first heart beats

 Reg Addr */

 LSB pos */

 Num of bits */

 Data */

  supports only (0-104&139)MHz */

 139; */

 MXL_HYDRA_MPEG_CLK_GAPPED; */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ZyDAS ZD1301 driver (demodulator)

 *

 * Copyright (C) 2015 Antti Palosaari <crope@iki.fi>

 Program tuner */

 ~180ms seems to be enough */

	/*

	 * Interesting registers here are:

	 * 0x6a05: get some gain value

	 * 0x6a06: get about same gain value than set to 0x6a43

	 * 0x6a07: get some gain value

	 * 0x6a43: set gain value by driver

	 * 0x6a24: get demod lock bits (FSM stage?)

	 *

	 * Driver should implement some kind of algorithm to calculate suitable

	 * value for register 0x6a43, based likely values from register 0x6a05

	 * and 0x6a07. Looks like gain register 0x6a43 value could be from

	 * range 0x00 - 0x70.

 Poll xfer ready */

 Poll xfer ready */

 Platform driver interface */

 Setup the state */

 Sleep */

 Create I2C adapter */

 Create dvb frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Conexant cx22700 DVB OFDM demodulator driver



    Copyright (C) 2001-2002 Convergence Integrated Media GmbH

	Holger Waechtler <holger@convergence.de>





 use user tps parameters */

 restart acquisition */

  tps valid? */

  soft reset */

 XXX CHECKME: soft reset*/

 PAL loop filter off */

 restart acquire */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Sony CXD2820R demodulator driver

 *

 * Copyright (C) 2010 Antti Palosaari <crope@iki.fi>

 program tuner */

 tune stops BER counter */

 program IF frequency */

 Lock detection */

 Signal strength */

 Scale value to 0x0000-0xffff */

 CNR */

 log2(e) << 24 */

 BER */

 no zigzag */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux-DVB Driver for DiBcom's DiB9000 and demodulator-family.

 *

 * Copyright (C) 2005-10 DiBcom (http://www.dibcom.fr/)

 common for all chips */

 to protect read/write operations */

 to protect the whole mailbox handling */

 to protect the memory accesses */

 to protect the memory-based mailbox */

 common for all platforms */

 for the I2C transfer */

 -1: empty list; -2: do not use the list */

 memory_access requests */

      dprintk("%d memcmd: %d %d %d\n", state->fe_id, addr, addr+len, len); */

      b[0] = 0 << 7; */

      b[2] = 0; */

      b[3] = 0; */

      b[10] = 0; */

      b[11] = 0; */

      b[6] = 0; */

      b[7] = 0; */

 if it was called directly reset it - to force a future setup-call to set it */

 decide whether we need to "refresh" the memory controller */

 same command */

 and we do not want to read something with less than 67 bytes looping - working around a bug in the memory controller */

 config crtl reg */

 Reset mailbox  */

 Read reset status */

dprintk( "MBX: size: %d\n", size); */

 byte-order conversion - works on big (where it is not necessary) or little endian */

 write msg */

 update register nb_mes_in_RX */

 Length and type in the first word */

 Initial word already read */

 to word conversion */

 Initial word already read */

 Update register nb_mes_in_TX */

 Bullet proof the buffer */

 find a free slot */

                      dprintk( "MBX: fetched %04x message to cache\n", *block); */

 debug-messages are going to be printed right away */

 free the block */

 FE-TRACE */

 5 bit field */

 7 bit field */

 1=RiscB */

 Clear the IRQ */

      if (tmp) */

              dprintk( "cleared IRQ: %x\n", tmp); */

 dib9000_mbx_get_from_cache(); */

 free the block */

 signal that we found a message */

 try to fetch one message - if any */

 Reconfig pool mac ram */

 A: 8k C, 4 k D - B: 32k C 6 k D - IRAM 96k */

 Toggles IP crypto to Host APB interface. */

 Set jump and no jump in the dma box */

 Set MAC as APB Master. */

 Reset the RISCs */

 Run the RISCs */

 protect this driver to be used with 7000PC */

 by default everything is going to be powered off */

 keep settings for RISC */

 now, depending on the requested mode, we power on */

 power up everything in the demod */

 just leave power on the control-interfaces: GPIO and (I2C or SDIO or SRAM) */

 TODO power up either SDIO or I2C or SRAM */

 always power down unused parts */

 P_sdio_select_clk = 0 on MC and after */

 reset the i2c-master to use the host interface */

 unforce divstr regardless whether i2c enumeration was done or not */

 restart all parts */

 dprintk( "APB access through rd fw %d %x\n", address, attribute); */

 dprintk( "APB access through wr fw %d %x\n", address, attribute); */

 initialize the firmware */

 subband */

 type == 0 -> GPIO - PWM not yet supported */

 fe_id */

 0 - id, 1 - no_of_frontends */

 0 = i2c-address demod, 0 = tuner */

 do not wait for CELL ID when doing autosearch */

 write the channel context - a channel is initialized to 0, so it is OK */

 something happened */

 tps locks are "slower" than MPEG locks -> even in autosearch data is OK here */

 0x0400 */

 0x0440 */

 0x0482 */

 0x0500 */

 read */

 start read */

 start write */

 I2C */

 SCL frequency */

 scl */

 write-part */

 do the transaction */

 read back any possible result */

 reset the direction bit */

 set the new direction */

 reset the direction bit */

 set the new value */

 postpone the pid filtering cmd */

 postpone the pid filtering cmd */

 synchronize the cache with the other frontends */

 get the channel from master chip */

 synchronize the cache with the other frontends */

 check that the correct parameters are set */

 postpone the pid filtering cmd */

 set the master status */

 no channel specified, autosearch the channel */

 set mode and status for the different frontends */

 synchronization of the cache */

 actual tune */

 0: tune pending; 1: tune failed; 2:tune success */

 tune success */

 some frontends are still tuning */

 if all tune are done and no success, exit: tune failed */

 check the tune result */

 tune failed */

 tune failed; put all the pid filtering cmd to junk */

 synchronize all the channel cache */

 retune the other frontends with the found channel */

 only retune the frontends which was not tuned success */

 some frontends are still tuning */

 set the output mode */

 turn off the diversity for the last frontend */

 do not postpone any more the pid filtering */

 designated i2c address */

	/* Ensure the output mode remains at the previous default if it's

	 * not specifically set by the caller.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	TDA8261 8PSK/QPSK tuner driver

	Copyright (C) Manu Abraham (abraham.manu@gmail.com)



 state cache */

 kHz */

	/*

	 * N = Max VCO Frequency / Channel Spacing

	 * Max VCO Frequency = VCO frequency + (channel spacing - 1)

	 * (to account for half channel spacing on either side)

 Set params */

 sleep for some time */

 check status */

 cache successful state */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Driver for M88RS2000 demodulator and tuner



	Copyright (C) 2012 Malcolm Priestley (tvboxspy@gmail.com)

	Beta Driver



	Include various calculation code from DS3000 driver.

	Copyright (C) 2009 Konstantin Dimitrov.





 Must not be 0x00 or 0xff */

 Carrier Offset */

 TODO complete this section */

 set voltage pin always set 1*/

 bit0 V/H, bit1 off/on */

 Setup frontend from shutdown/cold */

 Shutdown the frondend */

 needs twice */

 needs two times */

 Set Tuner */

 default mclk value 96.4285 * 2 * 1000 = 192857 */

 Reset demod by symbol rate */

 Set FEC */

 Set Symbol Rate */

 Set up Demod */

 Unknown suspect SNR level */

 ppm */

 allocate memory for the internal state */

 setup the state */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for

 *    Samsung S5H1420 and

 *    PnpNetwork PN1010 QPSK Demodulator

 *

 * Copyright (C) 2005 Andrew de Quincey <adq_dvb@lidskialf.net>

 * Copyright (C) 2005-8 Patrick Boettcher <pb@linuxtv.org>

	/* FIXME: ugly workaround for flexcop's incapable i2c-controller

	 * it does not support repeated-start, workaround: write addr-1

	 * and then read

 dprintk("rd(%02x): %02x %02x\n", state->config->demod_address, reg, b[0]); */

 dprintk("wr(%02x): %02x %02x\n", state->config->demod_address, reg, data); */

 setup for DISEQC */

 write the DISEQC command bytes */

 kick off transmission */

 wait for transmission to complete */

 restore original settings */

 setup for DISEQC receive */

 FIXME: guess - do we need to set DIS_RDY(0x08) in receive mode? */

 wait for reception to complete */

 FIXME: do we test DIS_RDY(0x08) or RCV_EN(0x80)? */

	/* check error flag - FIXME: not sure what this does - docs do not describe

 check length */

 extract data */

 restore original settings */

 setup for tone burst */

 set value for B position if requested */

 start transmission */

 wait for transmission to complete */

 restore original settings */

 determine lock state */

	/* fix for FEC 5/6 inversion issue - if it doesn't quite lock, invert

 wait a bit then update lock status */

 perform post lock setup */

 calculate the data rate */

 set the MPEG_CLK_INTL for the calculated data rate */

 Enable "MPEG_Out" */

 kicker disable */

 DC freeze TODO it was never activated by default or it can stay activated */

 post-lock processing has been done! */

	/* remember freqoffset is in kHz, but the chip wants the offset in Hz, so

	/* remember freqoffset is in kHz, but the chip wants the offset in Hz, so

 check if we should do a fast-tune */

 first of all, software reset */

 set s5h1420 fclk PLL according to desired symbol rate */

 TODO DC offset removal, config parameter ? */

 set misc registers */

 e7 for s5h1420 */

 78 for s5h1420 */

 unfreeze DC compensation */

 Parallel output more, disabled -> enabled later */

 0x1d for s5h1420 */

 0x8e for s5h1420 */

 Tuner i2c address - for the gate controller */

 set tuner PLL */

 set the reset of the parameters */

 start QPSK */

 disable power down and do reset */

 repeater stops once there was a stop condition */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there + identify it */

 create dvb_frontend */

 create tuner i2c adapter */

  .symbol_rate_tolerance  = ???,*/

 SPDX-License-Identifier: GPL-2.0-or-later

  /*

     Driver for Philips tda8262/tda8263 DVBS Silicon tuners



     (c) 2006 Andrew de Quincey





 i2c details */

 BW = ((1 + RO) * SR/2 + 5) * 1.3      [SR in MSPS, BW in MHz] */

 with R0 = 0.35 and some transformations: */

 subaddress

 powerdown RSSI + the magic value 1

 power down loopthrough if not needed

 1Mhz + 0.45 VCO

 baseband cut-off */

 baseband gain 9 db + no RF attenuation

 charge pumps at high, tests off

 recommended value 4 for AMPVCO + disable ports.

 normal caltime + recommended values for SELTH + SELVTL

 recommended value 13 for BBIAS + unknown bit set on

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Auvitek AU8522 QAM/8VSB demodulator driver and video decoder

 *

 * Copyright (C) 2009 Devin Heitmueller <dheitmueller@linuxtv.org>

 * Copyright (C) 2005-2008 Auvitek International, Ltd.

/* Developer notes:

 *

 * Enough is implemented here for CVBS and S-Video inputs, but the actual

 *  analog demodulator code isn't implemented (not needed for xc5000 since it

 *  has its own demodulator and outputs CVBS)

 *

/* Video Decoder Filter Coefficients

   The values are as follows from left to right

   0="ATV RF" 1="ATV RF13" 2="CVBS" 3="S-Video" 4="PAL" 5=CVBS13" 6="SVideo13"

/* Registers 0x060b through 0x0652 are the LP Filter coefficients

   The values are as follows from left to right

   0="SIF" 1="ATVRF/ATVRF13"

   Note: the "ATVRF/ATVRF13" mode has never been tested

 Provide reasonable defaults for picture tuning values */

 Other decoder registers */

 NTSC */

	/*

	 * Despite what the table says, for the HVR-950q we still need

	 * to be in CVBS mode for the S-Video input (reason unknown).

 filter_coef_type = 3; */

 Load the Video Decoder Filter Coefficients */

	/* It's not clear what these registers are for, but they are always

 here we're going to try the pre-programmed route */

 PGA in automatic mode */

 Enable clamping control */

 here we're going to try the pre-programmed route */

	/* It's not clear why we have to have the PGA in automatic mode while

 Enable clamping control */

 Disable automatic PGA (since the CVBS is coming from the tuner) */

 Set input mode to CVBS on channel 4 with SIF audio input enabled */

 Set input to Y on Channe1, C on Channel 3 */

 PGA in automatic mode */

 Enable clamping control */

 ----------------------------------------------------------------------- */

 0=disable, 1=SIF */

	/* Note that this function needs to be used in conjunction with setting

 The caller asked for a mode we don't currently support */

 Load the Audio Decoder Filter Coefficients */

 Set the volume */

 Not sure what this does */

 Setup the audio mode to stereo DBX */

 Start the audio processing module */

 Set the audio frequency to 48 KHz */

 Set the I2S parameters (WS, LSB, mode, sample rate */

 Enable the I2S output */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

		/*

		 * Clear out any state associated with the digital side of the

		 * chip, so that when it gets powered back up it won't think

		 * that it is already tuned

		/* This does not completely power down the device

 Interrogate the decoder to see if we are getting a real signal */

 ----------------------------------------------------------------------- */

 ----------------------------------------------------------------------- */

 Check if the adapter supports the needed features */

 allocate memory for the internal state */

 new demod instance */

 existing demod instance */

 Jam open the i2c gate to the tuner */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Montage Technology TS2020 - Silicon Tuner driver

    Copyright (C) 2009-2012 Konstantin Dimitrov <kosio.dimitrov@gmail.com>



    Copyright (C) 2009-2012 TurboSight.com



 in kHz */

 i2c details */

 LO output divider switch frequency */

 actual used LO frequency */

 XXX: probably wrong */

 stop statistics polling */

 Initialise v5 stats here */

 Start statistics polling by invoking the work function */

	/*

	 * Integer-N PLL synthesizer

	 * kHz is used for all calculations to keep calculations within 32-bit

 select LO output divider */

 Tuner RF */

 FIXME: ~always too wide filter */

 Zero-IF */

/*

 * Get the tuner gain.

 * @fe: The front end for which we're determining the gain

 * @v_agc: The voltage of the AGC from the demodulator (0-2600mV)

 * @_gain: Where to store the gain (in 0.001dB units)

 *

 * Returns 0 or a negative error code.

 Read the RF gain */

 Read the baseband gain */

 gain in range -19600 to -116850 in units of 0.001dB */

 gain in range -47320 to -158950 in units of 0.001dB */

/*

 * Get the AGC information from the demodulator and use that to calculate the

 * tuner gain.

 Read the AGC PWM rate from the demodulator */

/*

 * Gather statistics on a regular basis

/*

 * Read TS2020 signal strength in v3 format.

 Calculate the signal strength based on the total gain of the tuner */

 0%: no signal or weak signal */

 0% - 60%: weak signal */

 60% - 90%: normal signal */

 90% - 99%: strong signal */

 This is only used by ts2020_probe() so can be on the stack */

/*

 * We implement own regmap locking due to legacy DVB attach which uses frontend

 * gate control callback to control I2C bus access. We can open / close gate and

 * serialize whole open / I2C-operation / close sequence at the same.

 create regmap */

 check if the tuner is there */

 sleep */

 stop statistics polling */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Samsung s5h1432 DVB-T demodulator driver

 *

 *  Copyright (C) 2009 Bill Liu <Bill.Liu@Conexant.com>

 configuration settings */

 Register [0x2E] bit 3:2 : 8MHz = 0; 7MHz = 1; 6MHz = 2 */

 Talk to the demod, set the FEC, GUARD, QAM settings etc */

current_frequency = p->frequency; */

state->current_frequency = p->frequency; */

fe->ops.tuner_ops.set_params(fe); */

Soft Reset chip*/

fe->ops.tuner_ops.set_params(fe); */

Soft Reset chip*/

Set VSB mode as default, this also does a soft reset */

Initialize registers */

 s5h1432_writereg(state, S5H1432_I2C_TOP_ADDR, 0xf4, 0xa1); */

For NXP tuner*/

Set 3.3MHz as default IF frequency */

 Set reg 0x1E to get the full dynamic range */

 Mode setting in demod */

 Serial mode */

 Soft Reset chip */

 allocate memory for the internal state */

 setup the state */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Conexant cx24123/cx24109 - DVB QPSK Satellite demod/tuner driver

 *

 *   Copyright (C) 2005 Steven Toth <stoth@linuxtv.org>

 *

 *   Support for KWorld DVB-S 100 by Vadim Catana <skystar@moldova.cc>

 *

 *   Support for CX24123/CX24113-NIM by Patrick Boettcher <pb@linuxtv.org>

 Some PLL specifics for tuning */

 The Demod/Tuner can't easily provide these, we cache them */

 Various tuner defaults need to be established for a given symbol rate Sps */

		/* the specs recommend other values for VGA offsets,

 0.41 V */

 0.90 V */

 2.70 V */

/*

 * Various tuner defaults need to be established for a given frequency kHz.

 * fixme: The bounds on the bands do not match the doc in real life.

 * fixme: Some of them have been moved, other might need adjustment.

 band 1 */

 band 2 */

 band 3 */

 band 4 */

 band 5 */

 band 6 */

 band 7 */

 band 8 */

 band 9 */

 Reset system */

 Clear reset */

 QPSK, DVB, Auto Acquisition (default) */

 MPEG */

 MPEG */

 MPEG (default) */

 Freq search start point (default) */

 Demodulator sample gain (default) */

 Force driver to shift until the maximum (+-10 MHz) */

 Default non-inverted, FEC 3/4 (default) */

 FEC search mask (all supported codes) */

 Default search inversion, no repeat (default) */

 Enable reading of frequency */

 Enable EsNO Ready Counter */

 Enable error counter */

 Tuner burst clock rate = 500KHz */

 Tuner burst mode, word length = 0x15 */

 Enable FILTERV with positive pol., DiSEqC 2.x off */

 DiSEqC LNB_DC off */

 DiSEqC Parameters (default) */

 DiSEqC Tone Frequency (default) */

 DiSEqC Message (0x2c - 0x31) */

 DiSEqC Parameters (default) */

 Interrupts off (0x33 - 0x34) */

 DiSEqC Tone Amplitude (default) */

 DiSEqC Parameters (default) */

 DiSEqC Parameters (default) */

 Enable AGC accumulator (for signal strength) */

 Constellation (default) */

 Symbol count (default) */

 Symbol rate estimator on (default) */

 Error Counter = Viterbi BER */

 Error Counter Window (default) */

 Acquisition AFC Expiration window (default is 0x10) */

 Non-DCII symbol clock */

 printk(KERN_DEBUG "wr(%02x): %02x %02x\n", i2c_addr, reg, data); */

 printk(KERN_DEBUG "rd(%02x): %02x %02x\n", i2c_addr, reg, b); */

 Set the soft decision threshold */

 this can happen when there's no lock */

/* Approximation of closest integer of log2(a/b). It actually gives the

  check if symbol rate is within limits */

	/* choose the sampling rate high enough for the required operation,

 SYSSymbolRate[21:0] = (srate << 23) / sample_rate */

 also set the demodulator sample gain */

/*

 * Based on the required frequency and symbolrate, the tuner AGC has

 * to be configured and the correct band selected.

 * Calculate those values.

 Defaults for low freq, low rate */

	/* For the given symbol rate, determine the VCA, VGA and

 determine the band to use */

 determine the charge pump current */

 Determine the N/A dividers for the requested lband freq (in kHz). */

	/* Note: the reference divider R=10, frequency is in KHz,

	/* control bits 11, refdiv 11, charge pump polarity 1,

/*

 * Tuner data is 21 bits long, must be left-aligned in data.

 * Tuner cx24109 is written through a dedicated 3wire interface

 * on the demod chip.

 align the 21 bytes into to bit23 boundary */

 Reset the demod pll word length to 0x15 bits */

 write the msb 8 bits, wait for the send to be completed */

 send another 8 bytes, wait for the send to be completed */

	/* send the lower 5 bits of this byte, padded with 3 LBB,

 Trigger the demod to configure the tuner */

 Write the new VCO/VGA */

 Write the new bandselect and pll args */

 set the FILTUNE voltage */

/*

 * 0x23:

 *    [7:7] = BTI enabled

 *    [6:6] = I2C repeater enabled

 *    [5:5] = I2C repeater start

 *    [0:0] = BTI start

 mode == 1 -> i2c-repeater, 0 -> bti */

 Configure the demod to a good set of defaults */

 Set the LNB polarity */

 already handled in cx88-dvb */

 wait for diseqc queue to become ready (or timeout) */

 stop continuous tone if enabled */

 wait for diseqc queue ready */

 select tone mode */

 wait for diseqc message to finish sending */

 restart continuous tone if enabled */

 stop continuous tone if enabled */

 wait for diseqc queue ready */

 select tone mode */

 restart continuous tone if enabled */

 Phase locked */

 Reed-Solomon Status */

Full Sync */

/*

 * Configured to return the measurement of errors in blocks,

 * because no UCBLOCKS value is available, so this value doubles up

 * to satisfy both measurements.

	/* The true bit error rate is this value divided by

 larger = better */

	/* Inverted raw Es/N0 count, totally bogus but better than the

 Enable automatic acquisition and reset cycle */

 wait for diseqc queue ready */

 this repeater closes after the first stop */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 create tuner i2c adapter */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *    Support for LG Electronics LGDT3304 and LGDT3305 - VSB/QAM

 *

 *    Copyright (C) 2008, 2009, 2010 Michael Krufky <mkrufky@linuxtv.org>

 *

 *    LGDT3304 support by Jarod Wilson <jarod@redhat.com>

 ------------------------------------------------------------------------ */

 FIXME: verify & document the LGDT3304 registers */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

		/* FIXME: investigate optimal ifbw & rfbw values for the

 (state->cfg->demod_chip == LGDT3305) */

 rf agc loop filter bandwidth */

 if agc loop filter bandwidth */

 control agc function */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 hold in software reset while sleeping */

 tristate the IF-AGC pin */

 tristate the RF-AGC pin */

 disable vsb/qam module */

 disable adc module */

 reg 0x030d is 3304-only... seen in vsb and qam usbsnoops... */

 lgdt3305_mpeg_mode_polarity calls lgdt3305_soft_reset */

 low if */

 lgdt3305_mpeg_mode_polarity calls lgdt3305_soft_reset */

 ------------------------------------------------------------------------ */

 signal bit is unreliable on the DT3304 in QAM mode */

 ------------------------------------------------------------------------ */

 borrowed from lgdt330x.c */

 no signal */

		/* Negative SNR, which is possible, but realisticly the

		demod will lose lock before the signal gets this bad.  The

 noise value */

 per-modulation SNR calculation constant */

 Use Phase Tracker Mean-Square Error Register */

 SNR for ranges from -13.11 to +44.08 */

 log10(25*32^2)*2^24 */

 Use Equalizer Mean-Square Error Register */

 SNR for ranges from -16.12 to +44.08 */

 log10(25*32^2)*2^24 */

 log10(688128)*2^24 and log10(696320)*2^24 */

 report SNR in dB * 10 */

	/* borrowed from lgdt330x.c

	 *

	 * Calculate strength from SNR up to 35dB

	 * Even though the SNR can go higher than 35dB,

	 * there is some comfort factor in having a range of

	 * strong signals that can show at 100%

 Rather than use the 8.8 value snr, use state->snr which is 8.24 */

 scale the range 0 - 35*2^24 into 0 - 65535 */

 ------------------------------------------------------------------------ */

 verify that we're talking to a lg dt3304/5 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Sony CXD2820R demodulator driver

 *

 * Copyright (C) 2010 Antti Palosaari <crope@iki.fi>

 6 MHz */

 7 MHz */

 8 MHz */

 6 MHz */

 7 MHz */

 8 MHz */

 program tuner */

 tune stops BER counter */

 program IF frequency */

 Lock detection */

 Signal strength */

 Scale value to 0x0000-0xffff */

 CNR */

 BER */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux-DVB Driver for DiBcom's DiB0090 base-band RF Tuner.

 *

 * Copyright (C) 2005-9 DiBcom (http://www.dibcom.fr/)

 *

 * This code is more or less generated from another driver, please

 * excuse some codingstyle oddities.

 not in the 0x24 reg, only in 0x1b */

 Calibration defines */

 Use those defines to identify SOC version */

 else use thos ones to check */

 Single 9090/8096 */

 Single Sband */

 Dual diversity VHF-UHF-LBAND */

 Dual diversity 29098 CBAND-UHF-LBAND-SBAND */

 for every frequency less than or equal to that field: this information is correct */

 for every frequency less than or equal to that field: this information is correct */

 in dB */

 take-over-point: where to split between bb and rf gain */

 keeps the currently programmed gain */

 new binary search */

 for channel monitoring */

 for the software AGC ramps */

 for the captrim/dc-offset search */

 for the I2C transfer */

 for the I2C transfer */

 without PLL lock info */

 without PLL lock info */

 PLL, DIG_CLK and CRYSTAL remain */

 adcClkOutRatio=8->7, release reset */

 Read Pll current config * */

* Reconfigure PLL if current setting is different from default setting **/

 Set Bypass mode */

 Set Reset Pll */

** Set new Pll configuration in bypass and reset state ***/

 Remove Reset Pll */

** Wait for PLL lock ***/

 Finally Remove Bypass mode */

 PLL, DIG_CLK and CRYSTAL remain */

 Read Pll current config * */

* Reconfigure PLL if current setting is different from default setting **/

 Set Bypass mode */

 Set Reset Pll */

** Set new Pll configuration in bypass and reset state ***/

 Remove Reset Pll */

** Wait for PLL lock ***/

 Finally Remove Bypass mode */

 enable dataTX in case we have been restarted in the wrong moment */

 max BB gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> BB_RAMP2 */

 BB_RAMP3 = 26dB */

 BB_RAMP4 */

 BB_RAMP5 = 29dB */

 BB_RAMP6 */

 max RF gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> RF_RAMP2 */

 ramp_max = maximum X used on the ramp */

 RF_RAMP5, LNA 1 = 8dB */

 RF_RAMP6, LNA 1 */

 RF_RAMP7, LNA 2 = 7.7dB */

 RF_RAMP8, LNA 2 */

 GAIN_4_1, LNA 3 = 6.8dB */

 GAIN_4_2, LNA 3 */

 RF_RAMP3, LNA 4 = 6.2dB */

 RF_RAMP4, LNA 4 */

 max RF gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> RF_RAMP2 */

 ramp_max = maximum X used on the ramp */

 RF_RAMP5, LNA 1 = 10dB */

 RF_RAMP6, LNA 1 */

 RF_RAMP7, LNA 2 = 0 dB */

 RF_RAMP8, LNA 2 */

 GAIN_4_1, LNA 3 = 6.8dB */ 
 GAIN_4_2, LNA 3 */

 RF_RAMP3, LNA 4 = 6.2dB */ 
 RF_RAMP4, LNA 4 */

 max RF gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> RF_RAMP2 */

 ramp_max = maximum X used on the ramp */

 RF_RAMP5, LNA 1 = 8dB */ 
 RF_RAMP6, LNA 1 */

 RF_RAMP7, LNA 2 = 0 dB */

 RF_RAMP8, LNA 2 */

 GAIN_4_1, LNA 3 = 6.8dB */ 
 GAIN_4_2, LNA 3 */

 RF_RAMP3, LNA 4 = 6.2dB */ 
 RF_RAMP4, LNA 4 */

 max RF gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> RF_RAMP2 */

 ramp_max = maximum X used on the ramp */

 RF_RAMP3, LNA 1 = 8dB */

 RF_RAMP4, LNA 1 */

 RF_RAMP5, LNA 2 = 9.5dB */

 RF_RAMP6, LNA 2 */

 RF_RAMP7, LNA 3 = 10.5dB */

 RF_RAMP8, LNA 3 */

 GAIN_4_1, LNA 4 = 7dB */

 GAIN_4_2, LNA 4 */

 max RF gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> RF_RAMP2 */

 ramp_max = maximum X used on the ramp */

 RF_RAMP3, LNA 1 = 14.7dB */

 RF_RAMP4, LNA 1 */

 RF_RAMP5, LNA 2 = 8dB */

 RF_RAMP6, LNA 2 */

 RF_RAMP7, LNA 3 = 6.8dB */

 RF_RAMP8, LNA 3 */

 GAIN_4_1, LNA 4 = 11.5dB */

 GAIN_4_2, LNA 4 */

 max RF gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> RF_RAMP2 */

 ramp_max = maximum X used on the ramp */

 RF_RAMP3, LNA 1 = 14.7dB */

 RF_RAMP4, LNA 1 */

 RF_RAMP5, LNA 2 = 8dB */

 RF_RAMP6, LNA 2 */

 RF_RAMP7, LNA 3 = 6dB */

 RF_RAMP8, LNA 3 */

 GAIN_4_1, LNA 4 = 11.5dB */

 GAIN_4_2, LNA 4 */

 GENERAL PWM ramp definition for all other Krosus */

 max BB gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> BB_RAMP2 */

 BB_RAMP3 = 21dB */

 BB_RAMP4 */

 BB_RAMP5 = 29dB */

 BB_RAMP6 */

 Currently unused */

 max BB gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> BB_RAMP2 */

 BB_RAMP3 = 26dB */

 BB_RAMP4 */

 BB_RAMP5 = 29dB */

 BB_RAMP6 */

 max RF gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> RF_RAMP2 */

 ramp_max = maximum X used on the ramp */

 RF_RAMP3, LNA 1 = 0dB */

 RF_RAMP4, LNA 1 */

 RF_RAMP5, LNA 2 = 0dB */

 RF_RAMP6, LNA 2 */

 RF_RAMP7, LNA 3 = 0dB */

 RF_RAMP8, LNA 3 */

 GAIN_4_1, LNA 4 = 0dB */

 GAIN_4_2, LNA 4 */

 max RF gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> RF_RAMP2 */

 ramp_max = maximum X used on the ramp */

 RF_RAMP3, LNA 1 = 13.2dB */

 RF_RAMP4, LNA 1 */

 RF_RAMP5, LNA 2 = 10.5dB */

 RF_RAMP6, LNA 2 */

 RF_RAMP7, LNA 3 = 5dB */

 RF_RAMP8, LNA 3 */

 GAIN_4_1, LNA 4 = 12.5dB */

 GAIN_4_2, LNA 4 */

 max RF gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> RF_RAMP2 */

 ramp_max = maximum X used on the ramp */

 RF_RAMP3, LNA 1 = 13.2dB */

 RF_RAMP4, LNA 1 */

 RF_RAMP5, LNA 2 = 10.5dB */

 RF_RAMP6, LNA 2 */

 RF_RAMP7, LNA 3 = 5dB */

 RF_RAMP8, LNA 3 */

 GAIN_4_1, LNA 4 = 12.5dB */

 GAIN_4_2, LNA 4 */

 Currently unused */

 max RF gain in 10th of dB */

 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz / ramp_slope -> RF_RAMP2 */

 RF_RAMP3, LNA 1 = 14.1dB */

 RF_RAMP4, LNA 1 */

 RF_RAMP5, LNA 2 = 11.2dB */

 RF_RAMP6, LNA 2 */

 RF_RAMP7, LNA 3 = 0dB */

 RF_RAMP8, LNA 3 */

 GAIN_4_1, LNA 4 = 0dB */

 GAIN_4_2, LNA 4 */

 -64,-52: offset -   65 */

 -52,-35: 65     -  665 */

 -45,-10: 665    - 835 */

 -64dB is the floor */

 TODO : DAB digital N+/-1 interferer perfs : offset = 10 */

 overflow */

underflow */

 use gain as a temporary variable and correct current_gain */

 overflow */

 cannot be less than 0 (only if gain_delta is less than 0 we can have current_gain < 0) */

 now split total gain to rf and bb gain */

 requested gain is bigger than rf gain limit - ACI/WBD adjustment */

 high signal level -> all gains put on RF */

 software ramp */

 Start with RF gains */

 point on RF LNA1 max gain */

 Go over all amplifiers => 5RF amps + 2 BB amps = 7 amps */

 if total gain of the current amp is null or this amp is not concerned because it starts to work from an higher gain value */

 force the gain to write for the current amp to be null */

 Gain to set is higher than the high working point of this amp */

 force this amp to be full gain */

 compute the value to set to this amp because we are somewhere in his range */

 LNA 1 reg mapping */

 LNA 2 reg mapping */

 LNA 3 reg mapping */

 LNA 4 reg mapping */

 CBAND LNA reg mapping */

 BB gain 1 reg mapping */

 BB gain 2 reg mapping */

 go to next gain bloc */

 When RF is finished, start with BB */

 point on BB gain 1 max gain */

 Write the amplifier regs */

 we want the boost if the gain is higher that 50dB */

 we want the boost if the gain is higher that 50dB */

 default baseband config */

 reset the AGC */

 rf_ramp = &rf_ramp_pwm_vhf_socs; */ 
 activate the ramp generator using PWM control */

 Set fast servo cutoff to start AGC; 0 = 1KHz ; 1 = 50Hz ; 2 = 150Hz ; 3 = 50KHz ; 4 = servo fast*/

 0 gain by default */

 in case of CBAND tune reduce first the lt_gain2 before adjusting the RF gain */

 reduce in 3 steps from 7 to 0 */

 calc the adc power */

 included in [0:-700] */

 quickly go to the correct range of the ADC power */

 cap value = 63 : narrow BB filter : Fc = 1.8MHz */

0 = 1KHz ; 1 = 150Hz ; 2 = 50Hz ; 3 = 50KHz ; 4 = servo fast */

 everything higher than or equal to CT_AGC_STOP means tracking */

 10ms interval */

 apply gain */

 Remove the redundancy  */

 Load the BB_2 */

 it is P1B - reset is already done */

 charge pump current = 0 */

 Update the efuse : Only available for KROSUS > P1C  and SOC as well*/

 Congigure in function of the crystal */

 enable iq-offset-calibration and wbd-calibration when tuning next time */

 Turns to positive */

 Turns to negative */

 Step1 BB gain1= 26 with boost 1, gain 2 = 0 */

 Step 2 BB gain 1 = 26 with boost = 1 & gain 2 = 29 */

 Step1 BB gain1= 26 with boost 1, gain 2 = 0 */

 addr ; trim reg offset ; pga ; CTRL_BB1 value ; i or q */

 Step 2 BB gain 1 = 26 with boost = 1 & gain 2 = 29 */

 force vcm2 = 0.8V */

 the LNA AND LO are off */

 shutdown lna and lo */

 found an offset */

 first turn for this frequency */

 Look for a change of Sign in the Adc_diff.min_adc_diff is used to STORE the setp N-1 */

 stop search when the delta the sign is changing and Steps =15 and Step=0 is force for continuance */

 the minimum was what we have seen in the step before */

 done */

 reset done -> real tuning can now begin */

 the WBD calibration has already been done */

 wait for the WBDMUX to switch and for the ADC to sample */

 reset done -> real tuning can now begin */

 be sure that we have the right bb-filter */

 = 0x6008 : vcm3_trim = 1 ; filter2_gm1_trim = 8 ; filter2_cutoff_freq = 0 */

 0 = 1KHz ; 1 = 50Hz ; 2 = 150Hz ; 3 = 50KHz ; 4 = servo fast */

 attenuator_ibias_tri = 2 ; input_stage_ibias_tr = 1 ; nc = 11 ; ext_gm_trim = 1 ; obuf_ibias_trim = 4 ; filter13_gm2_ibias_t = 15 */

 22 = cap_value */

 = 0xabcd : attenuator_ibias_tri = 2 ; input_stage_ibias_tr = 2 ; nc = 11 ; ext_gm_trim = 1 ; obuf_ibias_trim = 4 ; filter13_gm2_ibias_t = 13 */

 prepare a complete captrim */

 we are already tuned to this frequency - the configuration is correct  */

 do a minimal captrim even if the frequency has not changed */

 MERGE for all krosus before P1G */

 Just for 8090P SOCS where auto captrim HW bug : TO CHECK IN ACI for SOCS !!! if 400 for 8090p SOC => tune issue !!! */

 this step is only used by krosus < P1G */

write the final cptrim config */

 wait for the WBDMUX to switch and for the ADC to sample */

 write back original WBDMUX */

 1 1 1 1 0000 0 0 1 */

 1ms is the default delay most of the time */

************************ VCO ***************************/

 Default values for FG                                 */

 from these are needed :                               */

 Cp,HFdiv,VCOband,SD,Num,Den,FB and REFDiv             */

 in any case we first need to do a calibration if needed */

 deactivate DataTX before some calibrations */

 Activate DataTX in case a calibration has been done before */

 if soc and AGC pwm control, disengage mux to be able to R/W access to 0x01 register to set the right filter (cutoff_freq_select) during the tune sequence, otherwise, SOC SERPAR error when accessing to 0x01 */

 in ISDB-T 1seg we shift tuning frequency */

 Use the CBAND input for all band */

 Use the CBAND input for all band under UHF */

 CBAND tuner version for VHF */

 Force CBAND */

 Look for the interval */

			/* external loop filter, otherwise:

			 * lo5 = (0 << 15) | (0 << 12) | (0 << 11) | (3 << 9) | (4 << 6) | (3 << 4) | 4;

 Bias is done automatically in P1G */

 bit 15 is the split to the slave, we do not do it here */

 captrim search now */

 Warning : because of captrim cal, if you change this step, change it also in _cal.c file because it is the step following captrim cal state machine */

 1 1 1 1 0000 0 0 1 */

 initialize the lt gain register */

		/*

		 * Despite dib0090_tune returns time at a 0.1 ms range,

		 * the actual sleep time depends on CONFIG_HZ. The worse case

		 * is when CONFIG_HZ=100. In such case, the minimum granularity

		 * is 10ms. On some real field tests, the tuner sometimes don't

		 * lock when this timer is lower than 10ms. So, enforce a 10ms

		 * granularity and use usleep_range() instead of msleep().

 SPDX-License-Identifier: GPL-2.0



 Driver for LNB supply and control IC STMicroelectronics LNBH29



 Copyright (c) 2018 Socionext Inc.

/**

 * struct lnbh29_priv - LNBH29 driver private data

 * @i2c:         Pointer to the I2C adapter structure

 * @i2c_address: I2C address of LNBH29 chip

 * @config:      Registers configuration

 *               offset 0: 1st register address, always 0x01 (DATA)

 *               offset 1: DATA register value

 Min: 13.188V, Typ: 13.667V, Max:14V */

 Min: 18.158V, Typ: 18.817V, Max:19.475V */

 Soft-start time (Vout 0V to 18V) is Typ. 6ms. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for the Integrant ITD1000 "Zero-IF Tuner IC for Direct Broadcast Satellite"

 *

 *  Copyright (c) 2007-8 Patrick Boettcher <pb@linuxtv.org>

 Max transfer size done by I2C transfer functions */

 don't write more than one byte with flexcop behind */

 itd_dbg("wr %02x: %02x\n", reg, v[0]); */

 ugly flexcop workaround */

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

 PLLFH */

 BBGVMIN */

 not sure what is that ? - starting to download the table */

 this is intentional. */

 reserved bit again (reset ?) */

 RFTR, RFST1 - RFST9 */

 Compute the factional part times 1000 */

 PLLNH */

 Register does not change */

 Bits [7:6] do not change */

 No such regsister defined */

 No such regsister defined */

 No such regsister defined */

 No such regsister defined */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lnbp21.c - driver for lnb supply and control ic lnbp21

 *

 * Copyright (C) 2006, 2009 Oliver Endriss <o.endriss@gmx.de>

 * Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>

 *

 * the project's page is at https://linuxtv.org

 LNBP power off */

 free data */

 default configuration */

 bits which should be forced to '1' */

 bits which should be forced to '0' */

 detect if it is present or not */

 install release callback */

 override frontend ops */

22kHz logic controlled by demod*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Conexant cx24116/cx24118 - DVBS/S2 Satellite demod/tuner driver



    Copyright (C) 2006-2008 Steven Toth <stoth@hauppauge.com>

    Copyright (C) 2006-2007 Georg Acher

    Copyright (C) 2007-2008 Darron Broad

	March 2007

	    Fixed some bugs.

	    Added diseqc support.

	    Added corrected signal strength support.

	August 2007

	    Sync with legacy version.

	    Some clean ups.

    Copyright (C) 2008 Igor Liplianin

	September, 9th 2008

	    Fixed locking on high symbol rates (>30000).

	    Implement MPEG initialization parameter.

	January, 17th 2009

	    Fill set_voltage with actually control voltage code.

	    Correct set tone to not affect voltage.



 known registers */

 command args 0x00..0x1e */

 execute command */

 FW or multipurpose mailbox? */

 reset status > 0     */

 signal low           */

 signal high / status */

 configured fec (not tuned) or actual FEC (tuned) 1=1/2 2=2/3 etc */

 FECSTATUS bits */

 mask to determine configured fec (not tuned) or actual fec (tuned) */

 Select DVB-S demodulator, else DVB-S2 */

 Unknown/unused */

 Pilot mode requested when tuning else always reset when tuned */

 arg buffer size */

 rolloff */

 pilot bit */

 signal status */

 toneburst never sent */

 toneburst cached     */

 message cached       */

 arg offset for DiSEqC */

 unknown value=2 */

 unknown value=0 */

 unknown value=0 */

 DiSEqC burst */

 DiSEqC tone burst */

 SNR measurements */

 Formerly CMD_SEND_DISEQC */

 Unknown */

 The Demod/Tuner can't easily provide these, we cache them */

 Demod values */

 Basic commands that are sent to the firmware */

 Bulk byte writes to a single I2C address, for 32k firmware load */

/*

 * modfec (modulation and FEC)

 * ===========================

 *

 * MOD          FEC             mask/val    standard

 * ----         --------        ----------- --------

 * QPSK         FEC_1_2         0x02 0x02+X DVB-S

 * QPSK         FEC_2_3         0x04 0x02+X DVB-S

 * QPSK         FEC_3_4         0x08 0x02+X DVB-S

 * QPSK         FEC_4_5         0x10 0x02+X DVB-S (?)

 * QPSK         FEC_5_6         0x20 0x02+X DVB-S

 * QPSK         FEC_6_7         0x40 0x02+X DVB-S

 * QPSK         FEC_7_8         0x80 0x02+X DVB-S

 * QPSK         FEC_8_9         0x01 0x02+X DVB-S (?) (NOT SUPPORTED?)

 * QPSK         AUTO            0xff 0x02+X DVB-S

 *

 * For DVB-S high byte probably represents FEC

 * and low byte selects the modulator. The high

 * byte is search range mask. Bit 5 may turn

 * on DVB-S and remaining bits represent some

 * kind of calibration (how/what i do not know).

 *

 * Eg.(2/3) szap "Zone Horror"

 *

 * mask/val = 0x04, 0x20

 * status 1f | signal c3c0 | snr a333 | ber 00000098 | unc 0 | FE_HAS_LOCK

 *

 * mask/val = 0x04, 0x30

 * status 1f | signal c3c0 | snr a333 | ber 00000000 | unc 0 | FE_HAS_LOCK

 *

 * After tuning FECSTATUS contains actual FEC

 * in use numbered 1 through to 8 for 1/2 .. 2/3 etc

 *

 * NBC=NOT/NON BACKWARD COMPATIBLE WITH DVB-S (DVB-S2 only)

 *

 * NBC-QPSK     FEC_1_2         0x00, 0x04      DVB-S2

 * NBC-QPSK     FEC_3_5         0x00, 0x05      DVB-S2

 * NBC-QPSK     FEC_2_3         0x00, 0x06      DVB-S2

 * NBC-QPSK     FEC_3_4         0x00, 0x07      DVB-S2

 * NBC-QPSK     FEC_4_5         0x00, 0x08      DVB-S2

 * NBC-QPSK     FEC_5_6         0x00, 0x09      DVB-S2

 * NBC-QPSK     FEC_8_9         0x00, 0x0a      DVB-S2

 * NBC-QPSK     FEC_9_10        0x00, 0x0b      DVB-S2

 *

 * NBC-8PSK     FEC_3_5         0x00, 0x0c      DVB-S2

 * NBC-8PSK     FEC_2_3         0x00, 0x0d      DVB-S2

 * NBC-8PSK     FEC_3_4         0x00, 0x0e      DVB-S2

 * NBC-8PSK     FEC_5_6         0x00, 0x0f      DVB-S2

 * NBC-8PSK     FEC_8_9         0x00, 0x10      DVB-S2

 * NBC-8PSK     FEC_9_10        0x00, 0x11      DVB-S2

 *

 * For DVB-S2 low bytes selects both modulator

 * and FEC. High byte is meaningless here. To

 * set pilot, bit 6 (0x40) is set. When inspecting

 * FECSTATUS bit 7 (0x80) represents the pilot

 * selection whilst not tuned. When tuned, actual FEC

 * in use is found in FECSTATUS as per above. Pilot

 * value is reset.

/* A table of modulation, fec and configuration bytes for the demod.

 * Not all S2 mmodulation schemes are support and not all rates with

 * a scheme are support. Especially, no auto detect when in S2 mode.

 In DVBS mode this is used to autodetect */

 Passed to the firmware to indicate mode selection */

 QPSK. For unknown rates we set hardware to auto detect 0xfe 0x30 */

mod   fec       mask  val */

 00000010 00101110 */

 00000100 00101111 */

 00001000 00110000 */

 000?0000 ?        */

 00100000 00110001 */

 0?000000 ?        */

 10000000 00110010 */

 0000000? ?        */

 NBC-QPSK */

 8PSK */

 /*

  * `val' can be found in the FECSTATUS register when tuning.

  * FECSTATUS will give the actual FEC in use if tuning was successful.

  check if symbol rate is within limits */

 Load firmware */

 request the firmware, this will block until loaded */

		/* Make sure we don't recurse back through here

 Ensure firmware is always loaded if required */

/* Take a basic firmware command structure, format it

 * and forward it for processing

 Load the firmware if required */

 Write the command */

 Start execution and wait for cmd to terminate */

			/* Avoid looping forever if the firmware does

 Toggle 88x SRST pin to reset demod */

 Begin the firmware load process */

 Prepare the demod, load the firmware, cleanup after load */

 Init PLL */

 Start PLL */

 Unknown */

 Unknown */

	/* Split firmware to the max I2C write len and write.

 enough for 32k firmware */

 Firmware CMD 10: VCO config */

 Firmware CMD 14: Tuner config */

 Firmware CMD 13: MPEG config */

 Firmware CMD 35: Get firmware version */

 TODO Determine function and scale appropriately */

 Firmware CMD 19: Get AGC */

 SNR (0..100)% = (sig & 0xf0) * 10 + (sig & 0x0f) * 10 / 16 */

 10 x Table (rounded up) */

 100% */)

/* The reelbox patches show the value in the registers represents

 * ESNO, from 0->30db (values 0->300). We provide this value by

 * default.

 Overwrite the current tuning params, we are about to tune */

 Wait for LNB */

 Wait for up to 300 ms */

 -EBUSY ? */

 Wait for LNB ready */

 Wait for voltage/min repeat delay */

 Min delay time before DiSEqC send */

 Wait for LNB ready */

 Min delay time after DiSEqC send */

 XXX determine is FW does this, see send_diseqc/burst */

 Now we set the tone */

 Min delay time before DiSEqC send */

 XXX determine is FW does this, see send_diseqc/burst */

 Initialise DiSEqC */

 Firmware CMD 20: LNB/DiSEqC config */

 Prepare a DiSEqC command */

 DiSEqC burst */

 Unknown */

 Continuation flag? */

 DiSEqC message length */

 Command length */

 Send DiSEqC message with derived burst (hack) || previous burst */

 Validate length */

 Dump DiSEqC message */

 DiSEqC message */

 DiSEqC message length */

 Command length */

 DiSEqC toneburst */

 Message is cached */

 Message is sent without burst */

		/*

		 * Message is sent with derived else cached burst

		 *

		 * WRITE PORT GROUP COMMAND 38

		 *

		 * 0/A/A: E0 10 38 F0..F3

		 * 1/B/B: E0 10 38 F4..F7

		 * 2/C/A: E0 10 38 F8..FB

		 * 3/D/B: E0 10 38 FC..FF

		 *

		 * databyte[3]= 8421:8421

		 *              ABCD:WXYZ

		 *              CLR :SET

		 *

		 *              WX= PORT SELECT 0..3    (X=TONEBURST)

		 *              Y = VOLTAGE             (0=13V, 1=18V)

		 *              Z = BAND                (0=LOW, 1=HIGH(22K))

 Wait for LNB ready */

 Wait for voltage/min repeat delay */

 Command */

	/*

	 * Wait for send

	 *

	 * Eutelsat spec:

	 * >15ms delay          + (XXX determine if FW does this, see set_tone)

	 *  13.5ms per byte     +

	 * >15ms delay          +

	 *  12.5ms burst        +

	 * >15ms delay            (XXX determine if FW does this, see set_tone)

 Send DiSEqC burst */

 DiSEqC burst */

 DiSEqC toneburst */

 Burst is cached */

 Burst is to be sent with cached message */

 Wait for LNB ready */

 Wait for voltage/min repeat delay */

 Command */

	/*

	 * Wait for send

	 *

	 * Eutelsat spec:

	 * >15ms delay          + (XXX determine if FW does this, see set_tone)

	 *  13.5ms per byte     +

	 * >15ms delay          +

	 *  12.5ms burst        +

	 * >15ms delay            (XXX determine if FW does this, see set_tone)

 allocate memory for the internal state */

 check if the demod is present */

 create dvb_frontend */

/*

 * Initialise or wake up device

 *

 * Power config will reset and load initial firmware if required

 Power on */

 Firmware CMD 36: Power config */

 HVR-4000 needs this */

/*

 * Put device to sleep

 Firmware CMD 36: Power config */

 Power off (Shutdown clocks) */

/* dvb-core told us to tune, the tv property cache will be complete,

 * it's safe for is to pull values and use them for tuning purposes.

 Only QPSK is supported for DVB-S */

 Pilot doesn't exist in DVB-S, turn bit off */

 DVB-S only supports 0.35 */

		/*

		 * NBC 8PSK/QPSK with DVB-S is supported for DVB-S2,

		 * but not hardware auto detection

 Not supported but emulated */

 Rolloff must be explicit */

 FEC_NONE/AUTO for DVB-S2 is not supported and detected here */

 discard the 'current' tuning parameters and prepare to tune */

 This is also done in advise/acquire on HVR4000 but not on LITE */

 Set/Reset B/W */

 Prepare a tune request */

 Frequency */

 Symbol Rate */

 Automatic Inversion */

 Modulation / FEC / Pilot */

	/* We need to support pilot and non-pilot tuning in the

	 * driver automatically. This is a workaround for because

	 * the demod does not support autodetect.

 Reset status register */

 Tune */

		/*

		 * Wait for up to 500 ms before retrying

		 *

		 * If we are able to tune then generally it occurs within 100ms.

		 * If it takes longer, try a different toneburst setting.

 Toggle pilot bit when in auto-pilot */

 Set/Reset B/W */

	/*

	 * It is safe to discard "params" here, as the DVB core will sync

	 * fe->dtv_property_cache with fepriv->parameters_in, where the

	 * DVBv3 params are stored. The only practical usage for it indicate

	 * that re-tuning is needed, e. g. (fepriv->state & FESTATE_RETUNE) is

	 * true.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *    Support for LG2160 - ATSC/MH

 *

 *    Copyright (C) 2010 Michael Krufky <mkrufky@linuxtv.org>

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 if NOT zero IF, 6 MHz is the default */

 ------------------------------------------------------------------------ */

 FIXME: needs sanity check */

 ------------------------------------------------------------------------ */

 invalid value */

 invalid value */

 invalid value */

 invalid value */

 invalid value */

 invalid value */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 #else */

 no fix needed here (as far as we know) */

 be tuned before this point */

 ------------------------------------------------------------------------ */

 ------------------------------------------------------------------------ */

 BCD */

	/* borrowed from lgdt330x.c

	 *

	 * Calculate strength from SNR up to 35dB

	 * Even though the SNR can go higher than 35dB,

	 * there is some comfort factor in having a range of

	 * strong signals that can show at 100%

 Rather than use the 8.8 value snr, use state->snr which is 8.24 */

 scale the range 0 - 35*2^24 into 0 - 65535 */

 ------------------------------------------------------------------------ */

 parade 1 by default */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Driver for STV0297 demodulator



    Copyright (C) 2004 Andrew de Quincey <adq_dvb@lidskialf.net>

    Copyright (C) 2003-2004 Dennis Noermann <dennis.noermann@noernet.de>



 this device needs a STOP between the register and data

 this device needs a STOP between the register and data

 131072 = 2^17  */

 1/4 = 2^-2 */

 8192 = 2^13 */

 262144 = 2*18 */

 1024 = 2*10   */

 adjust

 symrate is hardcoded to 10000 */

 (2**28)/10000 */

/*

static long stv0297_get_carrieroffset(struct stv0297_state *state)

{

	s64 tmp;



	stv0297_writereg(state, 0x6B, 0x00);



	tmp = stv0297_readreg(state, 0x66);

	tmp |= (stv0297_readreg(state, 0x67) << 8);

	tmp |= (stv0297_readreg(state, 0x68) << 16);

	tmp |= (stv0297_readreg(state, 0x69) & 0x0F) << 24;



	tmp *= stv0297_get_symbolrate(state);

	tmp >>= 28;



	return (s32) tmp;

}

 load init table */

 freeze the counters */

 clear the counters */

 re-enable the counters */

 determine inversion dependent parameters

 clear software interrupts */

 set initial demodulation frequency */

 setup AGC */

 setup STL */

 disable frequency sweep */

 reset deinterleaver */

 ??? */

 reset equaliser */

 data comes from internal A/D */

 clear phase registers */

 set parameters */

 kick off lock */

 Disable corner detection for higher QAMs */

 wait for WGAGC lock */

 wait for equaliser partial convergence */

 wait for equaliser full convergence */

 disable sweep */

 wait for main lock */

 is it still locked after that delay? */

 success!! */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0



 Socionext MN88443x series demodulator driver for ISDB-S/ISDB-T.



 Copyright (c) 2018 Socionext Inc.

 ISDB-S registers */

 Primary ISDB-T */

 Secondary ISDB-T (for MN884434 only) */

 ISDB-T registers */

 512 / 63 MHz */

 Common */

 ISDB-S */

 ISDB-T */

 Sync detection */

 Signal strength */

 C/N rate */

 CNR[dB]: 10 * log10(D) - 30.74 / D^3 - 3 */

   D = x^2 / (2^15 * y - x^2) */

 (2^4 * D)^3 = 2^12 * D^3 */

 3.074 * 2^(12 + 24) = 211243671486 */

 0.3 * 2^24 = 5033164 */

 BER */

 Clock buffer (but not supported) or XTAL */

 Direct IF or Low IF */

 Level of IF */

 Polarity of AGC */

 Lower output level of AGC */

 Sync detection */

 Signal strength */

 C/N rate */

 CNR[dB]: 10 * (log10(65536 / value) + 0.2) */

 intlog10(65536) = 80807124, 0.2 * 2^24 = 3355443 */

 BER */

	/*

	 * Chip has two I2C addresses for each satellite/terrestrial system.

	 * ISDB-T uses address ISDB-S + 4, so we register a dummy client.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * helene.c

 *

 * Sony HELENE DVB-S/S2 DVB-T/T2 DVB-C/C2 ISDB-T/S tuner driver (CXD2858ER)

 *

 * Copyright 2012 Sony Corporation

 * Copyright (C) 2014 NetUP Inc.

 * Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>

 Terrestrial Analog */

*< System-M (Japan) (IF: Fp=5.75MHz in default) */

*< System-M (US)    (IF: Fp=5.75MHz in default) */

*< System-M (Korea) (IF: Fp=5.9MHz in default) */

*< System-B/G       (IF: Fp=7.3MHz in default) */

*< System-I         (IF: Fp=7.85MHz in default) */

*< System-D/K       (IF: Fp=7.85MHz in default) */

*< System-L         (IF: Fp=7.85MHz in default) */

*< System-L DASH    (IF: Fp=2.2MHz in default) */

 Terrestrial/Cable Digital */

*< ATSC 8VSB        (IF: Fc=3.7MHz in default) */

*< US QAM           (IF: Fc=3.7MHz in default) */

*< ISDB-T 6MHzBW    (IF: Fc=3.55MHz in default) */

*< ISDB-T 7MHzBW    (IF: Fc=4.15MHz in default) */

*< ISDB-T 8MHzBW    (IF: Fc=4.75MHz in default) */

*< DVB-T 5MHzBW     (IF: Fc=3.6MHz in default) */

*< DVB-T 6MHzBW     (IF: Fc=3.6MHz in default) */

*< DVB-T 7MHzBW     (IF: Fc=4.2MHz in default) */

*< DVB-T 8MHzBW     (IF: Fc=4.8MHz in default) */

*< DVB-T2 1.7MHzBW  (IF: Fc=3.5MHz in default) */

*< DVB-T2 5MHzBW    (IF: Fc=3.6MHz in default) */

*< DVB-T2 6MHzBW    (IF: Fc=3.6MHz in default) */

*< DVB-T2 7MHzBW    (IF: Fc=4.2MHz in default) */

*< DVB-T2 8MHzBW    (IF: Fc=4.8MHz in default) */

*< DVB-C 6MHzBW     (IF: Fc=3.7MHz in default) */

*< DVB-C 8MHzBW     (IF: Fc=4.9MHz in default) */

*< DVB-C2 6MHzBW    (IF: Fc=3.7MHz in default) */

*< DVB-C2 8MHzBW    (IF: Fc=4.9MHz in default) */

*< DTMB             (IF: Fc=5.1MHz in default) */

 Satellite */

*< ISDB-S */

*< DVB-S */

*< DVB-S2 */

*< Minimum analog terrestrial system */

*< Maximum analog terrestrial system */

*< Minimum digital terrestrial system */

*< Maximum digital terrestrial system */

*< Number of supported terrestrial broadcasting system */

*< Minimum satellite system */

*< Maximum satellite system */

	/* < Addr:0x69 Bit[6:4] : RFVGA gain.

	 * 0xFF means Auto. (RF_GAIN_SEL = 1)

	/* < Addr:0x69 Bit[3:0] : IF_BPF gain.

	/* < Addr:0x6B Bit[3:0] : RF overload

	 * RF input detect level. (FRF <= 172MHz)

	/* < Addr:0x6B Bit[3:0] : RF overload

	 * RF input detect level. (172MHz < FRF <= 464MHz)

	/* < Addr:0x6B Bit[3:0] : RF overload

	 * RF input detect level. (FRF > 464MHz)

	/* < Addr:0x6C Bit[2:0] :

	 * Internal RFAGC detect level. (FRF <= 172MHz)

	/* < Addr:0x6C Bit[2:0] :

	 * Internal RFAGC detect level. (172MHz < FRF <= 464MHz)

	/* < Addr:0x6C Bit[2:0] :

	 * Internal RFAGC detect level. (FRF > 464MHz)

	/* < Addr:0x6D Bit[5:4] :

	 * IF filter center offset.

	/* < Addr:0x6D Bit[1:0] :

	 * 6MHzBW(0x00) or 7MHzBW(0x01)

	 * or 8MHzBW(0x02) or 1.7MHzBW(0x03)

	/* < Addr:0x6E Bit[4:0] :

	 * 5bit signed. IF offset (kHz) = FIF_OFFSET x 50

	/* < Addr:0x6F Bit[4:0] :

	 * 5bit signed. BW offset (kHz) =

	 * BW_OFFSET x 50 (BW_OFFSET x 10 in 1.7MHzBW)

	/* < Addr:0x9C Bit[0]   :

	 * Local polarity. (0: Upper Local, 1: Lower Local)

< SONY_HELENE_TV_SYSTEM_UNKNOWN */

 Analog */

*< SONY_HELENE_ATV_MN_EIAJ   (System-M (Japan)) */

*< SONY_HELENE_ATV_MN_SAP    (System-M (US)) */

*< SONY_HELENE_ATV_MN_A2     (System-M (Korea)) */

*< SONY_HELENE_ATV_BG        (System-B/G) */

*< SONY_HELENE_ATV_I         (System-I) */

*< SONY_HELENE_ATV_DK        (System-D/K) */

*< SONY_HELENE_ATV_L         (System-L) */

*< SONY_HELENE_ATV_L_DASH    (System-L DASH) */

 Digital */

*< SONY_HELENE_DTV_8VSB      (ATSC 8VSB) */

*< SONY_HELENE_DTV_QAM       (US QAM) */

*< SONY_HELENE_DTV_ISDBT_6   (ISDB-T 6MHzBW) */

*< SONY_HELENE_DTV_ISDBT_7   (ISDB-T 7MHzBW) */

*< SONY_HELENE_DTV_ISDBT_8   (ISDB-T 8MHzBW) */

*< SONY_HELENE_DTV_DVBT_5    (DVB-T 5MHzBW) */

*< SONY_HELENE_DTV_DVBT_6    (DVB-T 6MHzBW) */

*< SONY_HELENE_DTV_DVBT_7    (DVB-T 7MHzBW) */

*< SONY_HELENE_DTV_DVBT_8    (DVB-T 8MHzBW) */

*< SONY_HELENE_DTV_DVBT2_1_7 (DVB-T2 1.7MHzBW) */

*< SONY_HELENE_DTV_DVBT2_5   (DVB-T2 5MHzBW) */

*< SONY_HELENE_DTV_DVBT2_6   (DVB-T2 6MHzBW) */

*< SONY_HELENE_DTV_DVBT2_7   (DVB-T2 7MHzBW) */

*< SONY_HELENE_DTV_DVBT2_8   (DVB-T2 8MHzBW) */

*< SONY_HELENE_DTV_DVBC_6    (DVB-C 6MHzBW) */

*< SONY_HELENE_DTV_DVBC_8    (DVB-C 8MHzBW) */

*< SONY_HELENE_DTV_DVBC2_6   (DVB-C2 6MHzBW) */

*< SONY_HELENE_DTV_DVBC2_8   (DVB-C2 8MHzBW) */

*< SONY_HELENE_DTV_DTMB      (DTMB) */

 see gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 */

 Standby setting for CPU */

 Standby setting for internal logic block */

 Standby setting for internal logic block */

 Standby setting for CPU */

 RF switch turn to satellite */

 Disable IF signal output */

 RFIN matching in power save (Sat) reset */

 Analog block setting (0x6A, 0x6B) */

 Tuning setting for CPU (0x61) */

 Satellite mode select (0x01) */

 Clock enable for internal logic block, CPU wake-up (0x04, 0x05) */

 Setting for analog block (0x07). LOOPFILTER INTERNAL */

	/* Tuning setting for analog block

	 * (0x08, 0x09, 0x0A, 0x0B). LOOPFILTER INTERNAL

 Enable for analog block (0x0C, 0x0D, 0x0E). SAT LNA ON */

 POWERSAVE_TERR_RF_ACTIVE */

 Setting for LPF cutoff frequency (0x0F) */

 22MHz */

 5 <= lpf_cutoff <= 36 is valid */

 5 <= lpf_cutoff <= 36 is valid */

 RF tuning frequency setting (0x10, 0x11, 0x12) */

 FRF_L */

 FRF_M */

 FRF_H (bit[3:0]) */

 Tuning command (0x13) */

 Setting for IQOUT_LIMIT (0x14) 0.75Vpp */

 Enable IQ output (0x15) */

 mode select */

 Disable IF signal output */

 Initial setting for internal analog block (0x91, 0x92) */

 Setting for analog block */

 Setting for local polarity (0x9D) */

 Enable for analog block */

 Tuning setting for CPU */

 Setting for PLL reference divider for xtal=24MHz */

 Tuning setting for analog block */

 LT_AMP_EN should be 0 */

 Setting for IFOUT_LIMIT */

 1.5Vpp */

 RF_GAIN setting */

 RF_GAIN_SEL = 1 */

 IF_BPF_GC setting */

 Setting for internal RFAGC (0x6A, 0x6B, 0x6C) */

 Setting for IF frequency and bandwidth */

 IF filter center frequency offset (IF_BPF_F0) (0x6D) */

 IF filter band width (BW) (0x6D) */

 IF frequency offset value (FIF_OFFSET) (0x6E) */

 IF band width offset value (BW_OFFSET) (0x6F) */

 RF tuning frequency setting (0x70, 0x71, 0x72) */

 FRF_L */

 FRF_M */

 FRF_H (bit[3:0]) */

 Tuning command */

 Enable IF output, AGC and IFOUT pin selection (0x74) */

/* power-on tuner

 * call once after reset

 RFIN matching in power save (terrestrial) = ACTIVE */

 RFIN matching in power save (satellite) = ACTIVE */

 SAT_RF_ACTIVE = true, lnaOff = false, terrRfActive = true */

 mode select */

 Initial setting for internal logic block */

 0x81 - 0x94 */

 xtal 16 MHz */

 xtal 24 MHz */

 4 x 25 = 100uA */

 38 x 0.25 = 9.5pF */

 REFOUT signal output 500mVpp */

 GPIO settings */

 GPIO settings */

 Clock enable for internal logic block */

 Start CPU boot-up */

 For burst-write */

 Setting for internal RFAGC */

 Setting for analog block */

 Initial setting for internal analog block */

 Setting for internal RFAGC */

 Check CPU_STT/CPU_ERR */

 VCO current setting */

 Disable IF signal output */

 Standby setting for CPU */

 Standby setting for internal logic block */

 Load capacitance control setting for crystal oscillator */

 Satellite initial setting */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * isl6421.h - driver for lnb supply and control ic ISL6421

 *

 * Copyright (C) 2006 Andrew de Quincey

 * Copyright (C) 2006 Oliver Endriss

 *

 * the project's page is at https://linuxtv.org

	/*

	 * If LNBf were not powered on, disable dynamic current limit, as,

	 * according with datasheet, highly capacitive load on the output may

	 * cause a difficult start-up.

 Store off status now in case future commands fail */

 On overflow, the device will try again after 900 ms (typically) */

 Re-enable dynamic current limit */

 Check if overload flag is active. If so, disable power */

 power off */

 free */

 default configuration */

 bits which should be forced to '1' */

 bits which should be forced to '0' */

 detect if it is present or not */

 install release callback */

 override frontend ops */

 SPDX-License-Identifier: GPL-2.0-only

 i2c timed out */

 no acknowledge */

 start */

 stop */

 start */

 stop */

 bit 7 = use master or not, if 0, the gate is open

 open the gate */

 close the gate */

 open the gate */

 close the gate */

 initialize the i2c-master by closing the gate */

 the first time force a select of the I2C

 initialize the i2c-master by closing the gate */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Infineon tua6100 pll.

 *

 * (c) 2006 Andrew de Quincey

 *

 * Based on code found in budget-av.c, which has the following:

 * Compiled from various sources by Michael Hunold <michael@mihu.de>

 *

 * CI interface support (c) 2004 Olivier Gournet <ogournet@anevia.com> &

 *                               Andrew de Quincey <adq_dvb@lidskialf.net>

 *

 * Copyright (C) 2002 Ralph Metzler <rjkm@metzlerbros.de>

 *

 * Copyright (C) 1999-2002 Ralph  Metzler

 *                       & Marcus Metzler for convergence integrated media GmbH

 i2c details */

 setup register 0

 setup register 1

 register 2

	/*

	 * The N divisor ratio (note: c->frequency is in kHz, but we

	 * need it in Hz)

 Finally, calculate and store the value for A

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Linux-DVB Driver for DiBcom's DiB8000 chip (ISDB-T).

 *

 * Copyright (C) 2009 DiBcom (http://www.dibcom.fr/)

 #define DIB8000_AGC_FREEZE */

 for the I2C transfer */

 for DVBv5 stats */

 by default SDRAM deintlv is enabled */

 STBs with parallel gated clock

 0x0400 */

 STBs with parallel continues clock

 0x0440 */

 STBs with serial input

 0x0482 */

 0x0500 */

 e.g. USB feeding

 disable

 synchronous fread */

dvsy_off_lmod4 = 1

 sync_enable = 1; comb_mode = 2

dvsy_off_lmod4 = 0

 sync_enable = 0; comb_mode = 0

 only use the internal way - not the diversity input */

 both ways */

 only the diversity input */

 by default everything is going to be powered off */

 now, depending on the requested mode, we power on */

 power up everything in the demod */

 en_slowAdc = 1 & reset_sladc = 1 */

 read access to make it works... strange ... */

 en_slowAdc = 1 & reset_sladc = 0 */

			/* ref = Vin1 => Vbg ; sel = Vin0 or Vin3 ;

 reset_sladc = 1 en_slowAdc = 0 */

 leave the VBG voltage on

 internal */

 do the calibration */

 smpl_cfg: P_refclksel=2, P_ensmplsel=1 nodivsmpl=1 */

 Force clk out pll /2 */

 get back old values */

 disable PLL */

 write new system clk into P_sec_len */

 enable PLL */

 verify */

* Bandwidth change => force PLL update **/

* Full PLL change only if prediv is changed **/

* full update => bypass and reconfigure **/

 bypass PLL */

 sad */

* ratio update => only change ratio **/

 only the PLL ratio is updated. */

 reset the GPIOs */

 TODO 782 is P_gpio_od */

 reset the direction bit */

 set the new direction */

 reset the direction bit */

 set the new value */

	/* auto search configuration - lock0 by default waiting

	/*1, 32,

 P_corm_thres Lock algorithms configuration */

 set ADC level to -16 */

 P_fft_nb_to_cut

 P_coff_corthres_ ( 2k 4k 8k ) 0x2800

 P_coff_cpilthres_ ( 2k 4k 8k ) 0x2800

 P_pha3_thres

 P_cti_use_cpe, P_cti_use_prog

 P_cspu_regul, P_cspu_win_cut

 P_des_shift_work

 P_adp_regul_cnt

 P_adp_noise_cnt

 P_adp_regul_ext

 P_adp_noise_ext

 P_adp_fil

 P_2d_byp_ti_num

P_equal_thres_wgn

 P_equal_ctrl_synchro, P_equal_speedmode

 P_div_lock0_wait

p_fec_

 P_smo_mode, P_smo_rs_discard, P_smo_fifo_flush, P_smo_pid_parse, P_smo_error_discard */

 P_ctrl_corm_thres4pre_freq_inh=1

 P_ctrl_pre_freq_inh=0 */

 P_ctrl_pre_freq_step=3 */

 P_pre_freq_win_len=1 */

because of glitches sometimes

 sram lead in, rdy */

 always leave the VBG voltage on - it consumes almost nothing but takes a long time to start */

 restart all parts */

 restart sad */

 sad

 drives */

 min drive SDRAM - not optimal - adjust */

 P_iqc_alpha_pha, P_iqc_alpha_amp, P_iqc_dcc_alpha, ...

 P_iqc_ca2 = 0; P_iqc_impnc_on = 0; P_iqc_mode = 0; */

 P_iqc_corr_inh = 0 enable IQcorr block */

 P_iqc_corr_inh = 1 disable IQcorr block */

div_cfg override for special configs

 unforce divstr regardless whether i2c enumeration was done or not */

 ber_rs_len = 3 */

 P_restart_iqc & P_restart_agc

 read dyn_gain here (because it is demod-dependent and not tuner)

 AGC */

 Demod AGC loop configuration

 AGC continued */

 use default

 n_agc_global

 P_agc_force_split and P_agc_split_offset

 set power-up level: interf+analog+AGC

 bit 14 = enDemodGain */

 enable adc i & q */

AGC initialization

 wait AGC rough lock time

 wait AGC accurate lock time

 wait only AGC rough lock time

 drive host bus 2, 3, 4 */

 drive host bus 5,6 */

 drive host bus 7, 8, 9 */

 drive host bus 10, 11 */

 drive host bus 12, 13, 14 */

 If the input mode is MPEG do not divide the serial clock */

 only use the internal way - not the diversity input */

 outputRate = 8 */

			/* Do not divide the serial clock of MPEG MUX in

 enSerialClkDiv2 == 1 ? */

 force enSerialClkDiv2 = 0 */

 both ways */

 only the diversity input */

 Use Smooth block */

 Use Smooth block */

 Using Smooth block only */

			/* Using Smooth block because not supported

 synchronous fread */

 write */

 read */

 write */

 get sad sel request */

 write */

 in the VGAMODE Sel are located on bit 0/1 */

 Set the proper input */

 R/W access via APB */

 R/W access via SERPAR  */

 LNAs and MIX are ON and therefore it is a valid configuration */

 index of the LUT */

 P_adp_regul_cnt 0.04, P_adp_noise_cnt -0.002, P_adp_regul_ext 0.02, P_adp_noise_ext -0.001 */

 P_adp_regul_cnt 0.07, P_adp_noise_cnt -0.004, P_adp_regul_ext 0.02, P_adp_noise_ext -0.002 */

 P_adp_regul_cnt 0.3,  P_adp_noise_cnt -0.01,  P_adp_regul_ext 0.1,  P_adp_noise_ext -0.002 */

 channel estimation fine configuration */

 update ADC target depending on ana_gain */

 set -16dB ADC target for ana_gain=-1 */

 set -22dB ADC target for ana_gain=0 */

 All 13 segments enabled */

 ---- COFF ---- Carloff, the most robust --- */

 if not Sound Broadcasting mode : put default values for 13 segments */

 P_ctrl_corm_thres4pre_freq_inh=1, P_ctrl_pre_freq_mode_sat=1 */

 P_ctrl_pre_freq_mode_sat=1, P_ctrl_pre_freq_inh=0, P_ctrl_pre_freq_step = 3, P_pre_freq_win_len=1 */

 P_ctrl_pre_freq_win_len=8, P_ctrl_pre_freq_thres_lockin=6 */

 P_ctrl_pre_freq_thres_lockout=4, P_small_use_tmcc/ac/cp=1 */

 default value */

 default value */

 init value */

	/*

	 * make the cpil_coff_lock more robust but slower p_coff_winlen

	 * 6bits; p_coff_thres_lock 6bits (for coff lock if needed)

 P_equal_noise_seg_inh */

 ADDR 1 */

 P_small_coef_ext_enable=ISDB-Tsb, P_small_narrow_band=ISDB-Tsb, P_small_last_seg=13, P_small_offset_num_car=5 */

 ---- SMALL ---- */

 1-seg */

 DQPSK */

 QPSK or QAM */

 3-segments */

 DQPSK on central segment */

 DQPSK on external segments */

 QPSK or QAM on external segments */

 QPSK or QAM on central segment */

 DQPSK on external segments */

 QPSK or QAM on external segments */

 1-seg */

 DQPSK */

 QPSK or QAM */

 3-segments */

 DQPSK on central segment */

 DQPSK on external segments */

 QPSK or QAM on external segments */

 QPSK or QAM on central segment */

 DQPSK on external segments */

 QPSK or QAM on external segments */

 1-seg */

 DQPSK */

 QPSK or QAM */

 3-segments */

 DQPSK on central segment */

 DQPSK on external segments */

 QPSK or QAM on external segments */

 QPSK or QAM on central segment */

 DQPSK on external segments */

 QPSK or QAM on external segments */

 adp_pass =1 */

 pha3_force_pha_shift = 1 */

 adp_pass =0 */

 pha3_force_pha_shift = 0 */

 3-segments */

 1-segment */

 ---- COFF ---- Carloff, the most robust --- */

 P_coff_cpil_alpha=4, P_coff_inh=0, P_coff_cpil_winlen=64, P_coff_narrow_band=1, P_coff_square_val=1, P_coff_one_seg=~partial_rcpt, P_coff_use_tmcc=1, P_coff_use_ac=1 */

 P_ctrl_pre_freq_win_len=16, P_ctrl_pre_freq_thres_lockin=8 */

 P_ctrl_pre_freq_thres_lockout=6, P_small_use_tmcc/ac/cp=1 */

 Sound Broadcasting mode 1 seg */

 P_coff_winlen=63, P_coff_thres_lock=15, P_coff_one_seg_width = (P_mode == 3) , P_coff_one_seg_sym = (P_mode-1) */

 P_ctrl_corm_thres4pre_freq_inh=1,P_ctrl_pre_freq_mode_sat=1, P_ctrl_pre_freq_inh=0, P_ctrl_pre_freq_step = 5, P_pre_freq_win_len=4 */

 Sound Broadcasting mode 3 seg */

 P_ctrl_corm_thres4pre_freq_inh = 1, P_ctrl_pre_freq_mode_sat=1, P_ctrl_pre_freq_inh=0, P_ctrl_pre_freq_step = 4, P_pre_freq_win_len=4 */

 P_2d_mode_byp=1 */

 P_cspu_win_cut = 0 */

 P_equal_noise_sel = 15 */

 Write COFF thres */

	/*

	 * make the cpil_coff_lock more robust but slower p_coff_winlen

	 * 6bits; p_coff_thres_lock 6bits (for coff lock if needed)

 P_equal_noise_seg_inh */

 P_fft_powrange = 64 */

 P_fft_powrange = 32 */

 P_mode */

 init mode */

 set guard */

 signal optimization parameter */

init value */

 WRITE: Mode & Diff mask */

 channel estimation fine configuration */

 update ana_gain depending on max constellation */

 ---- ANA_FE ---- */

 3-segments */

 1-segment */

 TSB or ISDBT ? apply it now */

 SMALL */

 ---- CHAN_BLK ---- */

 p_cfr_left_edge */

 p_cfr_right_edge */

 "P_cspu_left_edge" & "P_cspu_right_edge" not used => do not care */

 P_lmod4_seg_inh */

 P_pha3_seg_inh */

 P_tac_seg_inh */

 P_tmcc_seg_eq_inh */

disable equalisation of the tmcc when autosearch to be able to find the DQPSK channels. */

 P_des_seg_enabled */

 P_tmcc_seg_inh */

 P_fft_powrange = 32 */

 ---- TMCC ---- */

 Quantif of "P_tmcc_dec_thres_?k" is (0, 5+mode, 9); */

 Threshold is set at 1/4 of max power. */

 P_tmcc_dec_thres_2k */

 P_tmcc_dec_thres_4k */

 P_tmcc_dec_thres_8k */

dib8000_write_word(state, 287, (1 << 13) | 0x1000 ); */

 ---- PHA3 ---- */

 p_2d_hspeed_thr0 */

 P_search_end0 wait time */

 P_search_end0 start addr */

 P_ctrl_pha_off_max default values */

 P_ana_gain to 0 */

 P_mode = 0, P_restart_search=1 */

 P_guard = 0 */

 P_lock0_mask = 0 */

 P_lock1_mask = 0 */

 P_lock2_mask = 0 */

 P_search_list=16, P_search_maxtrial=0 */

 time in ms configure P_search_end0 P_search_end1 P_search_end2 */

 time in ms configure P_search_end0 P_search_end1 P_search_end2 */

 P_search_rstst = 200 */

 P_search_rstend = 400 */

 P_search_checkst */

 P_corm_alpha = 0 */

 P_corm_alpha = 3 */

 P_search_param_max = 2 */

 P_search_param_select = (1 | 1<<4 | 1 << 8) */

 P_restart_ccg = 1 */

 P_restart_ccg = 0 */

 P_restart_search = 0; */

 set lock_mask values */

 tmcc_dec_lock, tmcc_sync_lock, tmcc_data_lock, tmcc_bch_uncor */

 set lock_mask wait time values */

 time in ms configure P_search_end0 P_search_end1 P_search_end2 */

 time in ms configure P_search_end0 P_search_end1 P_search_end2 */

 P_search_param_max = 3 */

 P_search_param_select = 0xf; look for the 4 different guard intervals */

 reset the INT. n_irq_pending */

 choose the right list, in sb, always do everything */

 P_mode = 1 to have autosearch start ok with mode2 */

 P_mode = 1 */

 set lock_mask values */

 set lock_mask wait time values */

 time in ms configure P_search_end0 P_search_end1 P_search_end2 */

 time in ms configure P_search_end0 P_search_end1 P_search_end2 */

 reset the INT. n_irq_pending */

 failed */

 succeeded */

 still pending

 start P_restart_chd : channel_decoder */

 stop P_restart_chd : channel_decoder */

 IF tuner */

 Max dds offset is the half of the demod freq */

 P_dds_invspec */

 low if tuner */

 apply dds offset now */

 P_timf_alpha = (11-P_mode), P_corm_alpha=6, P_corm_thres=0x40 */

 P_ctrl_pha_off_max=3   P_ctrl_sfreq_inh =0  P_ctrl_sfreq_step = (10-P_mode)  */

 Sound Broadcasting mode 3 seg */

 P_timf_alpha = (10-P_mode), P_corm_alpha=6, P_corm_thres=0x60 */

 P_ctrl_pha_off_max=3   P_ctrl_sfreq_inh =0  P_ctrl_sfreq_step = (9-P_mode)  */

 13-seg start conf offset loop parameters */

 P_timf_alpha = (9-P_mode, P_corm_alpha=6, P_corm_thres=0x80 */

 P_ctrl_pha_off_max=3   P_ctrl_sfreq_inh =0  P_ctrl_sfreq_step = 9  */

 Sound Broadcasting mode 1 seg */

 P_timf_alpha = (13-P_mode) , P_corm_alpha=6, P_corm_thres=0x40*/

 Sound Broadcasting mode 3 seg */

 P_timf_alpha = (12-P_mode) , P_corm_alpha=6, P_corm_thres=0x60 */

 13 seg */

 P_timf_alpha = 8 , P_corm_alpha=6, P_corm_thres=0x80 */

 P_dvsy_sync_wait - reuse mode */

 add 50% SFN margin + compensate for one DVSY-fifo */

 add 50% SFN margin + compensate for DVSY-fifo */

 P_dintlv_delay_ram = 7 because of MobileSdram */

 force restart P_restart_sdram */

 release restart P_restart_sdram */

/**

 * is_manual_mode - Check if TMCC should be used for parameters settings

 * @c:	struct dvb_frontend_properties

 *

 * By default, TMCC table should be used for parameter settings on most

 * usercases. However, sometimes it is desirable to lock the demod to

 * use the manual parameters.

 *

 * On manual mode, the current dib8000_tune state machine is very restrict:

 * It requires that both per-layer and per-transponder parameters to be

 * properly specified, otherwise the device won't lock.

 *

 * Check if all those conditions are properly satisfied before allowing

 * the device to use the manual frequency lock mode.

 Use auto mode on DVB-T compat mode */

	/*

	 * Transmission mode is only detected on auto mode, currently

	/*

	 * Guard interval is only detected on auto mode, currently

	/*

	 * If no layer is enabled, assume auto mode, as at least one

	 * layer should be enabled

	/*

	 * Check if the per-layer parameters aren't auto and

	 * disable a layer if segment count is 0 or invalid.

	/*

	 * Userspace specified a wrong number of segments.

	 *	fallback to auto mode.

 Everything looks ok for manual mode */

 1 symbol duration (in 100us unit) delay most of the time */

 30 */

 force chan dec in restart */

 Layer monitor */

 The channel struct is unknown, search it ! */

 we already know the channel struct so TUNE only ! */

 51 */

 31 */

 fail */

 else we are done here */

 Success */

 signal to the upper layer, that there was a channel found and the parameters can be read */

 Autosearch FFT max correlation endded */

 searching for the correct FFT */

 dprintk("corm fft: %u %u %u\n", corm[0], corm[1], corm[2]); */

 dprintk("Autosearch FFT has found Mode %d\n", max_value + 1); */

 searching for the correct guard interval */

 dprintk("guard interval found=%i\n", state->found_guard); */

 the demod should never be in this state */

 else we are done here */

 33 */

 setting the known channel parameters here */

 (34) */

 P_coff_winlen ? */

 coff should lock over P_coff_winlen ofdm symbols : give 3 times this length to lock */

 (35) */

 coff-lock and off_cpil_lock achieved */

 we achieved a coff_cpil_lock - it's time to update the timf */

 2 times lmod4_win_len + 10 symbols (pipe delay after coff + nb to compute a 1st correlation) */

 goto check for diversity input connection */

 (36)  if there is an input (diversity) */

 if there is a diversity fe in input and this fe is has not already failed : wait here until this this fe has succedeed or failed */

 Something is locked on the input fe */

 go for mpeg */

 fe in input failed also, break the current one */

 else we are done here ; step 8 will close the loops and exit */

 start viterbi chandec */

 start viterbi chandec */

 else we are done here ; step 8 will close the loops and exit */

 37 */

 lmod4_lock */

 wait for 14 symbols */

 goto check for diversity input connection */

 38 */

 start viterbi chandec */

 mpeg will never lock on this condition because init_prbs is not set : search for it !*/

 39 */

 fe capable of deinterleaving : esram */

 defines timeout for mpeg lock depending on interleaver length of longest layer */

 valid layer */

 locks is the tmp local variable name */

 because of diversity sync */

 give the mpeg lock 800ms if sram is present */

 40 */

 mpeg lock : check the longest one */

 signal to the upper layer, that there was a channel found and the parameters can be read */

 continue to try init prbs autosearch */

 we are done mpeg of the longest interleaver xas not locking but let's try if an other layer has locked in the same time */

 41 : init prbs autosearch */

 tuning is finished - cleanup the demod */

 (42) */

 at least one symbol */

	/*

	 * If called to early, get_frontend makes dib8000_tune to either

	 * not lock or not sync. This causes dvbv5-scan/dvbv5-zap to fail.

	 * So, let's just return if frontend 0 has not locked.

 synchronize the cache with the other frontends */

 Interleaving can be 0, 1, 2 or 4 */

 synchronize the cache with the other frontends */

 synchronization of the cache */

 set output mode and diversity input */

 tune the tuner */

 turn off the diversity of the last chip */

 start up the AGC */

		/*

		 * Despite dib8000_agc_startup returns time at a 0.1 ms range,

		 * the actual sleep time depends on CONFIG_HZ. The worse case

		 * is when CONFIG_HZ=100. In such case, the minimum granularity

		 * is 10ms. On some real field tests, the tuner sometimes don't

		 * lock when this timer is lower than 10ms. So, enforce a 10ms

		 * granularity.

 we are in autosearch */

 searching */

 we read the channel parameters from the frontend which was successful */

 and for all frontend except the successful one */

 tuning is done when the master frontend is done (failed or success) */

 we need to wait for all frontends to be finished */

 set output mode */

 Equal */

 TMCC_SYNC */

 FEC MPEG */

 Viterbi Layer A */

 Viterbi Layer B */

 Viterbi Layer C */

 13 segments */

 packet error on 13 seg */

/*

 * Table to estimate signal strength in dBm.

 * This table was empirically determinated by measuring the signal

 * strength generated by a DTA-2111 RF generator directly connected into

 * a dib8076 device (a PixelView PV-D231U stick), using a good quality

 * 3 meters RC6 cable and good RC6 connectors.

 * The real value can actually be different on other devices, depending

 * on several factors, like if LNA is enabled or not, if diversity is

 * enabled, type of connectors, etc.

 * Yet, it is better to use this measure in dB than a random non-linear

 * percentage value, especially for antenna adjustments.

 * On my tests, the precision of the measure using this table is about

 * 0.5 dB, with sounds reasonable enough.

 -22.5 dBm */

 -35 dBm */

 -51 dBm */

 If value is identical, no need to interpolate */

 Linear interpolation between the two (x,y) points */

 If all goes wrong, wait for 1s for the next stats */

 Estimate the period for the total bit rate */

 Get Signal strength */

 UCB/BER/CNR measures require lock */

 Check if time for stats was elapsed */

 Get SNR */

 Get UCB measures */

 Estimate the number of packets based on bitrate */

 Get post-BER measures */

 designated i2c address */

 sram lead in, rdy */

 sram lead in, rdy */

 start diversity to pull_down div_str - just for i2c-enumeration */

 set new i2c address and force divstart */

 unforce divstr

 deactivate div - it was just for i2c-enumeration */

	/* Ensure the output mode remains at the previous default if it's

	 * not specifically set by the caller.

 init 8096p tuner adapter */

 ber_rs_len = 3 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	Intersil ISL6423 SEC and LNB Power supply controller



	Copyright (C) Manu Abraham <abraham.manu@gmail.com>



 EN = 1, VSPEN = 1, VBOT = 1 */

 EN = 1, VSPEN = 1, VBOT = 0 */

 EN = 0 */

 EN = 1, VSPEN = 1, VTOP = 0, VBOT = 0 */

 EN = 1, VSPEN = 1, VTOP = 1, VBOT = 0 */

 275mA */

 ISELH = 0, ISELL = 0 */

 515mA */

 ISELH = 0, ISELL = 1 */

 635mA */

 ISELH = 1, ISELL = 0 */

 800mA */

 ISELH = 1, ISELL = 1 */

 DCL = 0 */

 DCL = 1 */

 SR3H = 0, SR3M = 1, SR3L = 0 */

 SR4H = 0, SR4M = 1, SR4L = 1 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    driver for LSI L64781 COFDM demodulator



    Copyright (C) 2001 Holger Waechtler for Convergence Integrated Media GmbH

		       Marko Kohtala <marko.kohtala@luukku.com>





 private demodulator data */

	/* This here is a little bit questionable because it enables

	   the automatic update of TPS registers. I think we'd need to

	   handle the IRQ from FE to update some other registers as

	   well, or at least implement some magic to tuning to correct

	/* Set AFC stall for the AFC_INIT_FRQ setting, TIM_STALL for

 stall AFC */

 AFC INIT FREQ */

 AGC gain to zero in beginning */

 stall TIM */

 TIM_OFFSET_LSB */

 NOTE: this is correct in writing to address 0x00

 The coderates for FEC_NONE, FEC_4_5 and FEC_FEC_6_7 are arbitrary */

 QPSK, QAM_16, QAM_64 */

 The Grundig 29504-401.04 Tuner comes with 18.432MHz crystal. */

	u32 ddfs_offset_variable = 0x6000-((1000000UL+ppm)/ */

			bw_tab[p->bandWidth]<<10)/15625; */

 This works up to 20000 ppm, it overflows if too large ppm! */

 SPI bias calculation is slightly modified to fit in 32bit */

 will work for high ppm only... */

 Technical manual section 2.6.1, TIM_IIR_GAIN optimal values */

  clear interrupt registers... */

  dto. */

  clear interrupt registers... */

  dto. */

 VCXO locked, this criteria should be ok */

	/*   XXX FIXME: set up counting period (reg 0x26...0x28)

 not exact, but...*/

 Power down */

 Power up */

 Reset hard */

 Set tuner specific things */

 AFC_POL, set also in reset_afc */

 Use internal ADC */

 AGC loop gain, and polarity is positive */

 Internal ADC outputs two's complement */

	/* With ppm=8000, it seems the DTR_SENSITIVITY will result in

	   value of 2 with all possible bandwidths and guard

l64781_writereg (state, 0x19, 0x92);*/

 Everything is two's complement, soft bit and CSI_OUT too */

 delay a bit after first init attempt */

 allocate memory for the internal state */

 setup the state */

	/*

	 *  the L64781 won't show up before we send the reset_and_configure()

	 *  broadcast. If nothing responds there is no L64781 on the bus...

 The chip always responds to reads */

 Save current register contents for bailout */

 Reading the POWER_DOWN register always returns 0 */

 Turn the chip off */

 Responds to all reads with 0 */

 Turn the chip on */

 Responds with register default value */

 create dvb_frontend */

 restore reg 0x3e */

	.frequency_min_hz = ???,*/

	.frequency_max_hz = ???,*/

      .symbol_rate_tolerance = ???,*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drxd_hard.c: DVB-T Demodulator Micronas DRX3975D-A2,DRX397xD-B1

 *

 * Copyright (C) 2003-2007 Micronas

***************************************************************************/

 range [0, ... , 1023], 1/n of fullscale range */

 range [0, ... , 1023], 1/n of fullscale range */

 range [0, ... , 1023], 1/n of fullscale range */

 range [0, ... , 1023], 1/n of fullscale range */

 range [0, ... , 1023], 1/n of fullscale range */

***************************************************************************/

 I2C **********************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

***************************************************************************/

 start ce */

 Store output configuration */

 CHK_ERROR(Read16(EC_OC_REG_OC_MODE_LOP__A, &ocModeLop)); */

 m_EcOcRegOcModeLop = ocModeLop; */

 Flush FIFO (byte-boundary) at fixed rate */

 Output pins to '0' */

 Force the OC out of sync */

 Magically-out-of-sync */

 Stop OC */

 Restore output configuration */

 Output pins active again */

 Start OC */

***************************************************************************/

 == Mode == */

 == Settle level == */

 == Min/Max == */

 == Speed == */

				/*

				   fastInc = default *

				   (2^(fineSpeed/fineSteps))

				   => range[default...2*default>

				   slowInc = default *

				   (2^(fineSpeed/fineSteps))

 No OFF mode for IF control */

==== Mode ====*/

 Powerdown PD2, WRI source */

 enable AGC2 pin */

 Automatic control */

 Powerup PD2, AGC2 as output, TGC source */

 Settle level */

 Min/max: don't care */

 Speed: TODO */

 enable AGC2 pin */

 No RF AGC control */

 Powerdown PD2, AGC2 as output, WRI source */

 set FeAgRegAgAgcSio AGC2 (RF) as input */

			/*           3.3V

			   |

			   R1

			   |

			   Vin - R3 - * -- Vout

			   |

			   R2

			   |

			   GND

 We're not using Flags */

 Flags = (pSrc[0] << 8) | pSrc[1]; */

 We're not using Flags */

 u16 Flags = (pSrc[0] << 8) | pSrc[1]; */

 We're not using BlockCRC */

 u16 BlockCRC = (pSrc[0] << 8) | pSrc[1]; */

 port/bridge/power down ctrl */

 Parameter check */

 Instruct HI to read n bytes */

 TODO use proper names forthese egisters */

 disable? monitor bus observe @ EC_OC */

 do inverse broadcast, followed by explicit write to HI */

 Configure PGA switch */

 PGA on */

 fine gain */

 coarse gain */

			/* enable fine and coarse gain, enable AAF,

 PGA off, bypass */

 fine gain */

 coarse gain */

			/* disable fine and coarse gain, enable AAF,

	/*

	   norm OFFSET,  MB says =2 voor 8K en =3 voor 2K waarschijnlijk

	   SC stuff

CHK_ERROR(Read16(state, EC_OC_REG_OC_MODE_LOP__A, &EcOcRegOcModeLop, 0)); */

 Don't Insert RS Byte */

 Mode = Parallel */

 Invert Data */

 EcOcRegIprInvMpg |= 0x00FF; */

 Invert Error ( we don't use the pin ) */

  EcOcRegIprInvMpg |= 0x0100; */

 Invert Start ( we don't use the pin ) */

 EcOcRegIprInvMpg |= 0x0200; */

 Invert Valid ( we don't use the pin ) */

 EcOcRegIprInvMpg |= 0x0400; */

 Invert Clock */

 EcOcRegIprInvMpg |= 0x0800; */

 EcOcRegOcModeLop =0x05; */

 TODO: why twice? */

 on A2 only 3975 available */

 Init Table selection */

 in kHz */

 Retrieve bandwidth and incr, sanity check */

		/* These accesses should be AtomicReadReg32, but that

		/* Compute new sysclock value

 rounding */

 Compute clock deviation in ppm */

printk(KERN_INFO "sysclockdiff=%d\n", Diff); */

 switch OFF SRMM scan in SC */

			/* overrule FE_IF internal value for

 Stop relevant processors off the device */

 Stop all processors except HI & CC & FE */

 Currently unused */

			/* We need to check how to

  combining enabled */

	/* Handle all mirroring

	 *

	 * Note: ADC mirroring (aliasing) is implictly handled by limiting

	 * feFsRegAddInc to 28 bits below

	 * (if the result before masking is more than 28 bits, this means

	 *  that the ADC is mirroring.

	 * The masking is in fact the aliasing of the ADC)

	 *

 Compute register value, unsigned computation */

 Remove integer part */

	/* Save the frequency shift without tunerOffset compensation

 Remove integer part */

 Restore current IF & RF AGC settings */

 Not set, detect it automatically */

 try first guess DRX_FFTMODE_8K */

 Not set, detect it automatically */

 try first guess 1/4 */

 Not set, detect it automatically, start with none */

 try first guess DRX_CONSTELLATION_QAM64 */

 First determine real bandwidth (Hz) */

 Also set delay for impulse noise cruncher (only A2) */

		/* Also set parameters for EC_OC fix, note

		   EC_OC_REG_TMD_HIL_MAR is changed

		   by SC for fix for some 8K,1/8 guard but is restored by

		   InitEC and ResetEC

 (64/7)*(8/8)*1000000 */

 (64/7)*(7/8)*1000000 */

binary:0100 1000 0000 0111 */

 (64/7)*(6/8)*1000000 */

binary: 0000 1111 0000 0111 */

			/* enable SLAVE mode in 2k 1/32 to

 enable slave */

 disable slave */

 switch on SRMM scan in SC */

            CHK_ERROR(Write16(SC_RA_RAM_SAMPLE_RATE_STEP__A, DRXD_OSCDEV_STEP, 0x0000));*/

 Now compute FE_IF_REG_INCR */

		/*((( SysFreq/BandWidth)/2)/2) -1) * 2^23) =>

 Bandwidth setting done */

 Mirror & frequency offset */

 Start SC, write channel settings to SC */

 Enable SC after setting all other parameters */

 Write SC parameter registers, operation mode */

 Start correct processes to get in lock */

 Optimum value for MT2060 */

 Currently unused */

 Currently unused */

 Currently unused */

2;   Off */

 Auto */

 Dynamic DTO source */

 rest of the RFAgcCfg structure currently unused */

 discrete filter */

 SAW filter */

 modify tuner and clock attributes */

 expected system clock frequency in kHz */

 real system clock frequency in kHz */

 modify MPEG output attributes */

 Timing div, 250ns/Psys */

 Timing div, = ( delay (nano seconds) * sysclk (kHz) )/ 1000 */

 Bridge delay, uses oscilator clock */

 Delay = ( delay (nano seconds) * oscclk (kHz) )/ 1000 */

 state->m_FeAgRegAgPwd = DRXD_DEF_AG_PWD_PRO; */

 Apply I2c address patch to B1 */

			/* HI firmware patch for UIO readout,

 Handle clock deviation */

 deviation in kHz */

 rounding, signed */

 add +1 or -1 */

 PGA = 0 dB */

if (*pLockStatus&DRX_LOCK_MPEG) */

 Get status again, in case we have MPEG lock now */

DRX_GetLockStatus(state, pLockStatus); */

***************************************************************************/

***************************************************************************/

***************************************************************************/

 No MPEG lock in V255 firmware, bug ? */

 add few initialization to allow gate control */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Driver for VES1893 and VES1993 QPSK Demodulators



    Copyright (C) 1999 Convergence Integrated Media GmbH <ralph@convergence.de>

    Copyright (C) 2001 Ronny Strutz <3des@elitedvb.de>

    Copyright (C) 2002 Dennis Noermann <dennis.noermann@noernet.de>

    Copyright (C) 2002-2003 Andreas Oberritter <obi@linuxtv.org>





 configuration settings */

 previous uncorrected block counter */

	/*

	 * inversion on/off are interchanged because i and q seem to

	 * be swapped on the hardware

FCONF	 = 0x80 | ((FNR & 0x01) << 5) | (((FNR > 1) & 0x03) << 3) | ((FNR >> 1) & 0x07);*/

 ves1993 hates this, will lose lock */

 invert PWM */

	/*

	 * The ves1893 sometimes returns sync values that make no sense,

	 * because, e.g., the SIGNAL bit is 0, while some of the higher

	 * bits are 1 (and how can there be a CARRIER w/o a SIGNAL?).

	 * Tests showed that the VITERBI and SYNC bits are returned

	 * reliably, while the SIGNAL and CARRIER bits ar sometimes wrong.

	 * If such a case occurs, we read the value again, until we get a

	 * valid value.

 just for safety - let's not get stuck here */

 counter overflow... */

 reset the counter */

 dto. */

	/*

	 * inversion indicator is only valid

	 * if auto inversion was used

  XXX FIXME: timing offset !! */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there + identify it */

 VES1893A rev1 */

 VES1893A rev2 */

 VES1993 */

 create dvb_frontend */

	.symbol_rate_tolerance	=	???,*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Conexant cx24117/cx24132 - Dual DVBS/S2 Satellite demod/tuner driver



    Copyright (C) 2013 Luis Alves <ljalvs@gmail.com>

	July, 6th 2013

	    First release based on cx24116 driver by:

	    Steven Toth and Georg Acher, Darron Broad, Igor Liplianin

	    Cards currently supported:

		TBS6980 - Dual DVBS/S2 PCIe card

		TBS6981 - Dual DVBS/S2 PCIe card



 known registers */

 command buffer */

 execute command */

 frequency */

 demod0 signal high / status */

 +-freq */

 +- 1000 * srate */

 frequency */

 demod1 signal high / status */

 +- freq */

 arg buffer size */

 rolloff */

 pilot bit */

 signal status */

 arg offset for DiSEqC */

 unknown value=2 */

 unknown value=0 */

 unknown value=0 */

 DiSEqC burst */

 0 disabled / 2 enabled */

 0 disabled / 1 enabled */

 The Demod/Tuner can't easily provide these, we cache them */

 Demod values */

 Basic commands that are sent to the firmware */

 common to both fe's */

 Used for sharing this struct between demods */

 one per each fe */

 modfec (modulation and FEC) lookup table */

 Check cx24116.c for a detailed description of each field */

 In DVBS mode this is used to autodetect */

 Passed to the firmware to indicate mode selection */

 QPSK. For unknown rates we set hardware to auto detect 0xfe 0x30 */

mod   fec       mask  val */

 00000010 00101110 */

 00000100 00101111 */

 00001000 00110000 */

 000?0000 ?        */

 00100000 00110001 */

 0?000000 ?        */

 10000000 00110010 */

 0000000? ?        */

 NBC-QPSK */

 8PSK */

	/*

	 * 'val' can be found in the FECSTATUS register when tuning.

	 * FECSTATUS will give the actual FEC in use if tuning was successful.

 check if firmware is already running */

 Load firmware */

 request the firmware, this will block until loaded */

		/* Make sure we don't recurse back through here

 Ensure firmware is always loaded if required */

/* Take a basic firmware command structure, format it

 * and forward it for processing

 Load the firmware if required */

 Write the command */

 Start execution and wait for cmd to terminate */

			/* Avoid looping forever if the firmware does

 fw upload reg */

 prepare i2c message to send */

 send fw */

 Init demodulator */

 Set VCO frequency */

 Tuner init */

 Global MPEG config */

 MPEG config for each demod */

 Get firmware version */

 Read AGC accumulator register */

 Overwrite the current tuning params, we are about to tune */

 Wait for LNB */

 Wait for up to 300 ms */

 -EBUSY ? */

 Prepare a set GPIO logic level CMD */

 mask */

 power on LNB */

 Wait for voltage/min repeat delay */

 Set 13V/18V select pin */

 Min delay time before DiSEqC send */

 power off LNB */

 Wait for LNB ready */

 Min delay time after DiSEqC send */

 Set the tone */

 Initialise DiSEqC */

 Prepare a DiSEqC command */

 demod */

 DiSEqC burst */

 Unknown */

 Continuation flag? */

 DiSEqC message length */

 Command length */

 Send DiSEqC message */

 Dump DiSEqC message */

 Validate length */

 DiSEqC message */

 DiSEqC message length */

 Command length */

	/*

	 * Message is sent with derived else cached burst

	 *

	 * WRITE PORT GROUP COMMAND 38

	 *

	 * 0/A/A: E0 10 38 F0..F3

	 * 1/B/B: E0 10 38 F4..F7

	 * 2/C/A: E0 10 38 F8..FB

	 * 3/D/B: E0 10 38 FC..FF

	 *

	 * databyte[3]= 8421:8421

	 *              ABCD:WXYZ

	 *              CLR :SET

	 *

	 *              WX= PORT SELECT 0..3    (X=TONEBURST)

	 *              Y = VOLTAGE             (0=13V, 1=18V)

	 *              Z = BAND                (0=LOW, 1=HIGH(22K))

 Wait for LNB ready */

 Wait for voltage/min repeat delay */

 Command */

	/*

	 * Wait for send

	 *

	 * Eutelsat spec:

	 * >15ms delay          + (XXX determine if FW does this, see set_tone)

	 *  13.5ms per byte     +

	 * >15ms delay          +

	 *  12.5ms burst        +

	 * >15ms delay            (XXX determine if FW does this, see set_tone)

 Send DiSEqC burst */

 DiSEqC burst */

 get the common data struct for both demods */

 new priv instance */

 existing priv instance */

 allocate memory for the internal state */

 create dvb_frontend */

/*

 * Initialise or wake up device

 *

 * Power config will reset and load initial firmware if required

 Set sleep mode off */

 Set BER control */

 Set RS correction (enable/disable) */

 Set GPIO direction */

 Set as output - controls LNB power on/off */

/*

 * Put device to sleep

 Set sleep mode on */

/* dvb-core told us to tune, the tv property cache will be complete,

 * it's safe for is to pull values and use them for tuning purposes.

 Only QPSK is supported for DVB-S */

 Pilot doesn't exist in DVB-S, turn bit off */

 DVB-S only supports 0.35 */

		/*

		 * NBC 8PSK/QPSK with DVB-S is supported for DVB-S2,

		 * but not hardware auto detection

 soft-auto rolloff */

 discard the 'current' tuning parameters and prepare to tune */

 Prepare a tune request */

 demod */

 Frequency */

 Symbol Rate */

 Automatic Inversion */

 Modulation / FEC / Pilot */

 Reset status register */

 Tune */

		/*

		 * Wait for up to 500 ms before retrying

		 *

		 * If we are able to tune then generally it occurs within 100ms.

		 * If it takes longer, try a different rolloff setting.

 try next rolloff value */

 Read current tune parameters */

 read all required regs at once */

 get spectral inversion */

 modulation and fec */

 frequency */

 symbol rate */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    VES1820  - Single Chip Cable Channel Receiver driver module



    Copyright (C) 1999 Convergence Integrated Media GmbH <ralph@convergence.de>



 configuration settings */

 private demodulator data */

 yeuch! */

 XXX FIXME! */

 reset uncorrected block counter */

 AFC only valid when carrier has been recovered */

 pdown ADC */

 standby */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SACLK/64 == (XIN/2)/64 */

 SACLK/4 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Sharp IX2505V (marked B0017) DVB-S silicon tuner

 *

 * Copyright (C) 2010 Malcolm Priestley

/*

 *  Data read format of the Sharp IX2505V B0017

 *

 *  byte1:   1   |   1   |   0   |   0   |   0   |  MA1  |  MA0  |  1

 *  byte2:  POR  |   FL  |  RD2  |  RD1  |  RD0  |   X   |   X   |  X

 *

 *  byte1 = address

 *  byte2;

 *	POR = Power on Reset (VCC H=<2.2v L=>2.2v)

 *	FL  = Phase Lock (H=lock L=unlock)

 *	RD0-2 = Reserved internal operations

 *

 * Only POR can be used to check the tuner is present

 *

 * Caution: after byte2 the I2C reverts to write mode continuing to read

 *          may corrupt tuning data.

 *

/*

 *  Data write format of the Sharp IX2505V B0017

 *

 *  byte1:   1   |   1   |   0   |   0   |   0   | 0(MA1)| 0(MA0)|  0

 *  byte2:   0   |  BG1  |  BG2  |   N8  |   N7  |   N6  |  N5   |  N4

 *  byte3:   N3  |   N2  |   N1  |   A5  |   A4  |   A3  |   A2  |  A1

 *  byte4:   1   | 1(C1) | 1(C0) |  PD5  |  PD4  |   TM  | 0(RTS)| 1(REF)

 *  byte5:   BA2 |   BA1 |  BA0  |  PSC  |  PD3  |PD2/TS2|DIV/TS1|PD0/TS0

 *

 *  byte1 = address

 *

 *  Write order

 *  1) byte1 -> byte2 -> byte3 -> byte4 -> byte5

 *  2) byte1 -> byte4 -> byte5 -> byte2 -> byte3

 *  3) byte1 -> byte2 -> byte3 -> byte4

 *  4) byte1 -> byte4 -> byte5 -> byte2

 *  5) byte1 -> byte2 -> byte3

 *  6) byte1 -> byte4 -> byte5

 *  7) byte1 -> byte2

 *  8) byte1 -> byte4

 *

 *  Recommended Setup

 *  1 -> 8 -> 6

 REF =1 */

 PSC = 0 */

 local osc = 4Mhz */

PD5,PD4 & TM = 0|C1,C0|REF=1*/

frequency up to 2150000*/

 all other bits set 0 */

 set TM = 1 other bits same */

 write byte 4 only */

 lpf */

 write byte 4 & 5 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Zarlink DVB-T MT352 demodulator

 *

 *  Written by Holger Waechtler <holger@qanu.de>

 *	 and Daniel Mack <daniel@qanu.de>

 *

 *  AVerMedia AVerTV DVB-T 771 support by

 *       Wolfram Joost <dbox2@frokaschwei.de>

 *

 *  Support for Samsung TDTC9251DH01C(M) tuner

 *  Copyright (C) 2004 Antonio Mancuso <antonio.mancuso@digitaltelevision.it>

 *                     Amauri  Celani  <acelani@essegi.net>

 *

 *  DVICO FusionHDTV DVB-T1 and DVICO FusionHDTV DVB-T Lite support by

 *       Christopher Pascoe <c.pascoe@itee.uq.edu.au>

 configuration settings */

 20.340 MHz */

 20.480000 MHz */

 36.166667 MHz */

 TPS_GIVEN_1 and following registers */

 TPS_GIVEN_(1|0) */

 old

	buf[3] = 0xf4;  
	/* Use TPS_RECEIVED-registers, not the TPS_CURRENT-registers because

	 * the mt352 sometimes works with the wrong parameters

	/* FIXME:

	 *

	 * The MT352 design manual from Zarlink states (page 46-47):

	 *

	 * Notes about the TUNER_GO register:

	 *

	 * If the Read_Tuner_Byte (bit-1) is activated, then the tuner status

	 * byte is copied from the tuner to the STATUS_3 register and

	 * completion of the read operation is indicated by bit-5 of the

	 * INTERRUPT_3 register.

 align the 12 bit AGC gain with the most significant bits */

 inverse of gain is signal strength */

 Do a "hard" reset */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Silicon Labs Si2168 DVB-T/T2/C demodulator driver

 *

 * Copyright (C) 2014 Antti Palosaari <crope@iki.fi>

 execute firmware command */

 write cmd and args for firmware */

 wait cmd execution terminate */

 firmware ready? */

 error bit set? */

 set manual value */

 set TS_MODE property */

 BER */

		/*

		 * Firmware returns [0, 255] mantissa and [0, 8] exponent.

		 * Convert to DVB API: mantissa * 10^(8 - exponent) / 10^8

 10^8 */

 UCB */

 Sometimes firmware returns bogus value */

 program tuner */

 that has no big effect */

 select PLP */

 set DVB-C symbol rate */

 enable ts bus */

 initialize */

 resume */

 power up */

 request the firmware, this will block and timeout */

 fallback mechanism to handle old name for Si2168 B40 fw */

 firmware is in the new format */

 firmware is in the old format */

 bad or unknown firmware format */

 query firmware version */

 set ts mode */

 Init stats here to indicate which stats are supported */

 tri-state data bus */

 Firmware later than B 4.0-11 loses warm state during sleep */

 open I2C gate */

 close I2C gate */

 Initialize */

 Power up */

 Query chip revision */

 create mux i2c adapter for tuner */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Montage Technology DS3000 - DVBS/S2 Demodulator driver

    Copyright (C) 2009-2012 Konstantin Dimitrov <kosio.dimitrov@gmail.com>



    Copyright (C) 2009-2012 TurboSight.com



 as of March 2009 current DS3000 firmware version is 1.78 */

 DS3000 FW v1.78 MD5: a32d17910c4f370073f9346e71d34b80 */

 in kHz */

 Register values to initialise the demod in DVB-S mode */

 Register values to initialise the demod in DVB-S2 mode */

 previous uncorrected block counter for DVB-S2 */

 I2C write for 8k firmware load */

 Load firmware */

 request the firmware, this will block until someone uploads it */

 Begin the firmware load process */

 write the entire firmware */

 bit0 V/H, bit1 off/on */

 read DS3000 BER value */

		/* set the number of bytes checked during

 read BER estimation status */

 check if BER estimation is ready */

			/* this is the number of error bits,

			to calculate the bit error rate

 start counting error bits */

			/* need to be set twice

			/* used to indicate that BER estimation

 read the number of LPDC decoded frames */

 read the number of packets with bad CRC */

 clear LPDC frame counters */

 clear bad packets counter */

 enable bad packets counter */

 enable LPDC frame counters */

			/* used to indicate that BER estimation is not ready,

 calculate DS3000 snr value in dB */

 20 x Table (rounded up) */

 80 x Table (rounded up) */

			/* cook the value to be suitable for szap-s2

			/* cook the value to be suitable for szap-s2

			/* cook the value to be suitable for szap-s2

 read DS3000 uncorrected blocks */

 clear packet counters */

 enable packet counters */

 Dump DiSEqC message */

 enable DiSEqC message send pin */

 DiSEqC message */

	/* clear DiSEqC message length and status,

	/* set DiSEqC mode, modulation active during 33 pulses,

 wait up to 150ms for DiSEqC transmission to complete */

 DiSEqC timeout after 150ms */

 Send DiSEqC burst */

 DiSEqC burst */

 Unmodulated tone burst */

 Modulated tone burst */

 allocate memory for the internal state */

 check if the demod is present */

	/*

	 * Some devices like T480 starts with voltage on. Be sure

	 * to turn voltage off during init, as this can otherwise

	 * interfere with Unicable SCR systems.

 Tune */

 ds3000 global reset */

 ds3000 built-in uC reset */

 ds3000 software reset */

 initialise the demod in DVB-S mode */

 initialise the demod in DVB-S2 mode */

 enable 27MHz clock output */

 enable ac coupling */

 enhance symbol rate performance */

 normalized symbol rate rounded to the closest integer */

 co-channel interference cancellation disabled */

 equalizer disabled */

	/*ds3000_writereg(state, 0x08, 0x03);

	ds3000_writereg(state, 0xfd, 0x22);

	ds3000_writereg(state, 0x08, 0x07);

	ds3000_writereg(state, 0xfd, 0x42);

 ds3000 out of software reset */

 start ds3000 built-in uC */

/*

 * Initialise or wake up device

 *

 * Power config will reset and load initial firmware if required

 hard reset */

 Load the firmware if required */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	NxtWave Communications - NXT6000 demodulator driver



    Copyright (C) 2002-2003 Florian Schirmer <jolt@tuxbox.org>

    Copyright (C) 2003 Paul Andreassen <paul@andreassen.com.au>



 configuration settings */

(1 << 2) | */ (0x01 << 1) | 0x01);

 BER Timer = 0x000200 * 256 = 131072 bits





 Enable BER interrupts

 Enable BER measurement

 CHECKME */

 Strange magic required to gain access to RF_AGC_STATUS */

 Clear BER Done interrupts

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

* FIXME: 12% of SR */
 FIXME: 12% of SR */

 FIXME */

 FIXME */

 SPDX-License-Identifier: GPL-2.0-or-later

  /*

     Driver for Philips tda10086 DVBS Demodulator



     (c) 2006 Andrew de Quincey





 private demod data */

 read a byte and check */

 mask if off */

 write it out again */

 reset */

 misc setup */

 NOTE: TT drivers appear to disable CSWP */

 noise threshold */

 misc */

 acquisition period length */

 irq off */

 setup AFC */

 setup PLL (this assumes SACLK = 96MHz) */

 misc PLL setup */

 M=12 */

 P=2 */

 M=24 */

 P=1 */

 powerup PLL */

 setup TS interface */

 parallel mode A + MSBFIRST */

 powerdown WPLL - unused in the mode we use */

 bypass WPLL - unused in the mode we use */

 setup ADC */

 ADC setup */

 powerup ADC */

 setup AGC */

 NOTE: flydvb varies it */

 setup viterbi */

 VBER 10^6, DVB, QPSK */

 setup carrier recovery */

 setup SEC */

 all SEC off, 22k tone */

 setup the decimation and anti-aliasing filters.. */

 calculate BDR */

 calculate BDRI */

 modify parameters for tuning */

 set params */

 calculate the frequency offset (in *Hz* not kHz) */

 soft reset + disable TS output until lock */

 check for invalid symbol rate */

 calculate the updated frequency (note: we convert from Hz->kHz) */

 the inversion */

 calculate the updated symbol rate */

 the FEC */

 modify parameters for stable reception */

 read it */

 reset counter */

 read it */

 allocate memory for the internal state */

 setup the state */

 check if the demod is there */

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *    Support for NXT2002 and NXT2004 - VSB/QAM

 *

 *    Copyright (C) 2005 Kirk Lapray <kirk.lapray@gmail.com>

 *    Copyright (C) 2006-2014 Michael Krufky <mkrufky@linuxtv.org>

 *    based on nxt2002 by Taylor Jacob <rtjacob@earthlink.net>

 *    and nxt2004 by Jean-Francois Thibert <jeanfrancois@sagetv.com>

/*

 *                      NOTES ABOUT THIS DRIVER

 *

 * This Linux driver supports:

 *   B2C2/BBTI Technisat Air2PC - ATSC (NXT2002)

 *   AverTVHD MCE A180 (NXT2004)

 *   ATI HDTV Wonder (NXT2004)

 *

 * This driver needs external firmware. Please use the command

 * "<kerneldir>/scripts/get_dvb_firmware nxt2002" or

 * "<kerneldir>/scripts/get_dvb_firmware nxt2004" to

 * download/extract the appropriate firmware, and then copy it to

 * /usr/lib/hotplug/firmware/ or /lib/firmware/

 * (depending on configuration of firmware hotplug).

 Max transfer size done by I2C transfer functions */

 demodulator private data */

 set multi register register */

 send the actual data */

 probably not right, but gives correct values */

 set write bit */

 set multi register length */

 toggle the multireg write bit */

 set multi register register */

 set multi register length */

 read the actual data */

 probably not right, but gives correct values */

 set multi register length */

 toggle the multireg bit*/

 read the actual data */

 set correct stop value */

	/* if NXT2004, write directly to tuner. if NXT2002, write through NXT chip.

 wait until we have a lock */

 set the i2c transfer speed to the tuner */

 setup to transfer 4 bytes via i2c */

 write actual tuner bytes */

 set tuner i2c address */

 write UC Opmode to begin transfer */

 Get the RAM base for this nxt2002 */

 Hold the micro in reset while loading firmware */

 write starting address */

 write remaining bytes of firmware */

 write crc */

 do a read to stop things */

 set transfer mode to complete */

 set rambase */

 hold the micro in reset while loading firmware */

 calculate firmware CRC */

 write starting address */

 write crc */

 do a read to stop things */

 set transfer mode to complete */

 stop the micro first */

 make sure demod is set to digital */

 set additional params */

 Set punctured clock for QAM */

 This is just a guess since I am unable to test it */

 Set non-punctured clock for VSB */

 get tuning information */

 write frequency information */

 reset the agc now that tuning has been completed */

 set target power level */

 configure sdm */

 write sdm1 input */

 write sdmx input */

 write adc power lpf fc */

 write ??? */

 write accumulator2 input */

 write kg1 */

 write sdm12 lpf fc */

 write agc control reg */

 soft reset? */

 write agc ucgp0 */

 write agc control reg */

 write accumulator2 input */

 write agc control reg */

 ???? */

	/* adjacent channel detection should be done here, but I don't

 setup to read cluster variance */

 get multreg val */

 setup to read cluster variance */

 get multreg val from 0xA6 */

 snr will be in db */

 the value reported back from the frontend will be FFFF=32db 0000=0db */

 request the firmware, this will block until someone uploads it */

 Put the micro into reset */

 ensure transfer is complete */

 Put the micro into reset for real this time */

 soft reset everything (agc,frontend,eq,fec)*/

 write agc sdm configure */

 write mod output format */

 write fec mpeg mode */

 write mux selection */

 ??? */

 request the firmware, this will block until someone uploads it */

 ensure transfer is complete */

 soft reset everything (agc,frontend,eq,fec)*/

 write agc sdm configure */

 ???*/

 ???*/

 ???*/

 write fec mpeg mode */

 write mux selection */

 ???*/

 soft reset? */

 ???*/

 soft reset? */

 initialize tuner */

 allocate memory for the internal state */

 setup the state */

 read card id */

 set demod chip */

 make sure demod chip is supported */

 device id */

 fab id */

 month */

 year msb */

 year lsb */

 device id */

 create dvb_frontend */

 stepsize is just a guess */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * lnbh25.c

 *

 * Driver for LNB supply and control IC LNBH25

 *

 * Copyright (C) 2014 NetUP Inc.

 * Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>

 * Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>

/**

 * struct lnbh25_priv - LNBH25 driver private data

 * @i2c:		pointer to the I2C adapter structure

 * @i2c_address:	I2C address of LNBH25 SEC chip

 * @config:		Registers configuration:

 *			offset 0: 1st register address, always 0x02 (DATA1)

 *			offset 1: DATA1 register value

 *			offset 2: DATA2 register value

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Panasonic MN88472 DVB-T/T2/C demodulator driver

 *

 * Copyright (C) 2013 Antti Palosaari <crope@iki.fi>

 Signal strength */

 CNR */

 DVB-T CNR */

 CNR[dB]: 10 * log10(65536 / value) + 2 */

 log10(65536) = 80807124, 0.2 = 3355443 */

 DVB-T2 CNR */

 0=SISO, 1=MISO */

 CNR[dB]: 10 * log10(16384 / value) - 6 */

 log10(16384) = 70706234, 0.6 = 10066330 */

 CNR[dB]: 10 * log10(65536 / value) + 2 */

 log10(65536) = 80807124, 0.2 = 3355443 */

 DVB-C CNR */

 signal */

 noise */

 CNR[dB]: 10 * log10(8 * (signal / noise)) */

 log10(8) = 15151336 */

 PER */

 Program tuner */

 IF */

 Bandwidth */

 Reset FSM */

 Power up */

 Check if firmware is already running */

 Parity check of firmware */

 TS config */

 Power down */

	/*

	 * Chip has three I2C addresses for different register banks. Used

	 * addresses are 0x18, 0x1a and 0x1c. We register two dummy clients,

	 * 0x1a and 0x1c, in order to get own I2C client for each register bank.

	 *

	 * Also, register bank 2 do not support sequential I/O. Only single

	 * register write or read is allowed to that bank.

 Check demod answers with correct chip id */

 Sleep because chip is active by default */

 Create dvb frontend */

 Init stats to indicate which stats are supported */

 Setup callbacks */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the MaxLinear MxL69x family of combo tuners/demods

 *

 * Copyright (C) 2020 Brad Love <brad@nextdimension.cc>

 *

 * based on code:

 * Copyright (c) 2016 MaxLinear, Inc. All rights reserved

 * which was released under GPL V2

 i2c command mutex */

 do nothing */

 skip API header */

 no swapping - all get opcodes */

 ATSC/OOB no swapping */

 skip API header */

 no swapping - all set opcodes */

 4 byte alignment */

 4 byte alignment */

 4 byte alignment */

 4 byte alignment */

 Read in 4 byte chunks */

 cksum is big endian */

 send Tx message */

 receive Rx message (polling) */

 cksum is big endian */

 DRAM */

 IRAM */

 release CPU from reset */

 verify FW is alive */

 legacy i2c override */

 verify sku */

 configure main regulator according to the power supply source */

 configure digital regulator to high current mode */

 set XTAL capacitance */

 set CLK OUT */

 set CLK OUT divider */

 set XTAL sharing */

 enable/disable XTAL calibration, based on master/slave device */

 enable XTAL calibration and set XTAL amplitude to a higher value */

 disable XTAL calibration */

 set XTAL bias value */

 start XTAL calibration */

 was 1000! */

 Config Device Power Mode */

 was 500! */

 Init stats here to indicate which stats are supported */

 was 500! */

 was 500! */

 was 500! */

 ber */

 ucb */

 No lock, reset all statistics */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Dummy Frontend

 *

 *  Written by Emard <emard@softhome.net>

/*

 * Should only be implemented if it actually reads something from the hardware.

 * Also, it should check for the locks, in order to avoid report wrong data

 * to userspace.

 allocate memory for the internal state */

 create dvb_frontend */

 allocate memory for the internal state */

 create dvb_frontend */

 allocate memory for the internal state */

 create dvb_frontend */

 symbol_rate_min: SACLK/64 == (XIN/2)/64 */

 SACLK/4 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the ST STV0910 DVB-S/S2 demodulator.

 *

 * Copyright (C) 2014-2015 Ralph Metzler <rjkm@metzlerbros.de>

 *                         Marcus Metzler <mocm@metzlerbros.de>

 *                         developed for Digital Devices GmbH

 shared I2C access protect */

 shared register write protect */

 C/N=   0dB */

 C/N= 0.5dB */

 C/N= 1.0dB */

 C/N= 1.5dB */

 C/N= 2.0dB */

 C/N= 2.5dB */

 C/N= 3.0dB */

 C/N= 3.5dB */

 C/N= 4.0dB */

 C/N= 4.5dB */

 C/N= 5.0dB */

 C/N= 5.5dB */

 C/N= 6.0dB */

 C/N= 6.5dB */

 C/N= 7.0dB */

 C/N= 7.5dB */

 C/N= 8.0dB */

 C/N= 8.5dB */

 C/N= 9.0dB */

 C/N= 9.5dB */

 C/N=10.0dB */

 C/N=10.5dB */

 C/N=11.0dB */

 C/N=11.5dB */

 C/N=12.0dB */

 C/N=12.5dB */

 C/N=13.0dB */

 C/N=13.5dB */

 C/N=14.0dB */

 C/N=14.5dB */

 C/N=15.0dB */

 C/N=16.0dB */

 C/N=17.0dB */

 C/N=18.0dB */

 C/N=19.0dB */

 C/N=20.0dB */

 C/N=21.0dB */

 C/N=22.0dB */

 C/N=23.0dB */

 C/N=24.0dB */

 C/N=25.0dB */

 C/N=26.0dB */

 C/N=27.0dB */

 C/N=28.0dB */

 C/N=29.0dB */

 C/N=30.0dB */

 C/N=31.0dB */

 C/N=32.0dB */

 C/N=33.0dB */

 C/N=33.0dB */

 C/N=40.0dB */

 C/N=45.0dB */

 C/N=50.0dB */

 C/N=51.0dB */

 C/N=-2.5dB */

 C/N=-2.5dB */

 C/N=-2.0dB */

 C/N=-1.5dB */

 C/N=-1.0dB */

 C/N=-0.5dB */

 C/N=   0dB */

 C/N= 0.5dB */

 C/N= 1.0dB */

 C/N= 1.5dB */

 C/N= 2.0dB */

 C/N= 2.5dB */

 C/N= 3.0dB */

 C/N= 3.5dB */

 C/N= 4.0dB */

 C/N= 4.5dB */

 C/N= 5.0dB */

 C/N= 5.5dB */

 C/N= 6.0dB */

 C/N= 6.5dB */

 C/N= 7.0dB */

 C/N= 7.5dB */

 C/N= 8.0dB */

 C/N= 8.5dB */

 C/N= 9.0dB */

 C/N= 9.5dB */

 C/N=10.0dB */

 C/N=10.5dB */

 C/N=11.0dB */

 C/N=11.5dB */

 C/N=12.0dB */

 C/N=12.5dB */

 C/N=13.0dB */

 C/N=13.5dB */

 C/N=14.0dB */

 C/N=14.5dB */

 C/N=15.0dB */

 C/N=16.0dB */

 C/N=17.0dB */

 C/N=18.0dB */

 C/N=19.0dB */

 C/N=20.0dB */

 C/N=21.0dB */

 C/N=22.0dB */

 C/N=23.0dB */

 C/N=24.0dB */

 C/N=25.0dB */

 C/N=26.0dB */

 C/N=27.0dB */

 C/N=28.0dB */

 C/N=29.0dB */

 C/N=30.0dB */

 C/N=31.0dB */

 C/N=32.0dB */

 C/N=33.0dB */

 C/N=35.0dB */

 C/N=40.0dB */

 C/N=45.0dB */

 C/N=50.0dB */

 C/N=51.0dB */

 PADC= +0dBm */

 PADC= -1dBm */

 PADC= -2dBm */

 PADC= -3dBm */

 PADC= -4dBm */

 PADC= -5dBm */

 PADC= -6dBm */

 PADC= -7dBm */

 PADC= -9dBm */

 PADC=-11dBm */

 PADC=-13dBm */

 PADC=-15dBm */

 PADC=-17dBm */

 PADC=-19dBm */

 PADC=-20dBm */

 PADC=-21dBm */

/*********************************************************************

 * Tracking carrier loop carrier QPSK 1/4 to 8PSK 9/10 long Frame

	/*

	 * Modcod  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff

	 * 20MPon 20MPoff 30MPon 30MPoff

 FE_QPSK_14  */

 FE_QPSK_13  */

 FE_QPSK_25  */

 FE_QPSK_12  */

 FE_QPSK_35  */

 FE_QPSK_23  */

 FE_QPSK_34  */

 FE_QPSK_45  */

 FE_QPSK_56  */

 FE_QPSK_89  */

 FE_QPSK_910 */

 FE_8PSK_35  */

 FE_8PSK_23  */

 FE_8PSK_34  */

 FE_8PSK_56  */

 FE_8PSK_89  */

 FE_8PSK_910 */

	/**********************************************************************

	 * Tracking carrier loop carrier 16APSK 2/3 to 32APSK 9/10 long Frame

	/*

	 * Modcod 2MPon  2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon

	 * 20MPoff 30MPon 30MPoff

 FE_16APSK_23  */

 FE_16APSK_34  */

 FE_16APSK_45  */

 FE_16APSK_56  */

 FE_16APSK_89  */

 FE_16APSK_910 */

 FE_32APSK_34  */

 FE_32APSK_45  */

 FE_32APSK_56  */

 FE_32APSK_89  */

 FE_32APSK_910 */

 Sign extent */

 Disable Reed-Solomon */

 Assumes Table[0].RegValue > Table[imax].RegValue */

 DUMMY_PLF   */

 QPSK_1_4,   */

 QPSK_1_3,   */

 QPSK_2_5,   */

 QPSK_1_2,   */

 QPSK_3_5,   */

 QPSK_2_3,   */

 QPSK_3_4,   */

 QPSK_4_5,   */

 QPSK_5_6,   */

 QPSK_8_9,   */

 QPSK_9_10,  */

 8PSK_3_5,   */

 8PSK_2_3,   */

 8PSK_3_4,   */

 8PSK_5_6,   */

 8PSK_8_9,   */

 8PSK_9_10,  */

 16APSK_2_3, */

 16APSK_3_4, */

 16APSK_4_5, */

 16APSK_5_6, */

 16APSK_8_9, */

 16APSK_9_10 */

 32APSK_3_4, */

 32APSK_4_5, */

 32APSK_5_6, */

 32APSK_8_9, */

 32APSK_9_10 */

 release reset DVBS2 packet delin */

 Blind optim*/

 Stop the demod */

 PLROOT2 bit 2 = gold code */

 C/N= 1.5dB */

 C/N= 4.5dB */

 C/N= 6.5dB */

 C/N= 8.5dB */

 C/N=10.5dB */

 Demod Stop */

 SR <=1Msps */

 1Msps < SR <=2Msps */

 2Msps< SR <=5Msps */

 5Msps< SR <=10Msps */

 10Msps< SR <=20Msps */

 SR >=20Msps */

 Set the Init Symbol rate */

 FE_STV0910_SetSearchStandard */

 Disable DSS */

 8PSK 3/5, 8PSK 2/3 Poff tracking optimization WA */

	/*

	 * Reset CAR3, bug DVBS2->DVBS1 lock

	 * Note: The bit is only pulsed -> no lock on shared register needed

 Reset demod */

 CFR Low Setting */

 init the demod frequency offset to 0 */

 Trigger acq */

 Address offset */

 Disable receiver */

 Reset = 1 */

 Reset = 0 */

 Configure the I2C repeater to off */

 Configure the I2C repeater to off */

 Set the I2C to oversampling ratio */

 state->i2ccfg */

 OUTCFG */

 RFAGC Pads Dev = 05 */

 SYNTCTRL */

 TSGENERAL */

 CFGEXT */

 GENCFG */

 GENCFG */

 IQSWAP = 0 */

 IQSWAP = 1 */

 LDPC Reset */

 TS output */

 Manual speed */

 Manual speed */

 Reset stream merger */

	/*

	 * mutex_lock note: Concurrent I2C gate bus accesses must be

	 * prevented (STV0910 = dual demod on a single IC with a single I2C

	 * gate/bus, and two tuners attached), similar to most (if not all)

	 * other I2C host interfaces/buses.

	 *

	 * enable=1 (open I2C gate) will grab the lock

	 * enable=0 (close I2C gate) releases the lock

 don't hold the I2C bus lock on failure */

 fix scale */

 reset signal statistics */

				/*

				 * FSTV0910_P2_MANUALSX_ROLLOFF,

				 * FSTV0910_P2_MANUALS2_ROLLOFF = 0

 reset DVBS2 packet delinator error counter */

 reset DVBS2 packet delinator error counter */

 force to PRE BCH Rate */

 force to PRE RS Rate */

 Reset the Total packet counter */

			/*

			 * Reset the packet Error counter2 (and Set it to

			 * infinite error count mode)

 Use highest signaled ModCod for quality */

 read signal statistics */

 read signal strength */

 read carrier/noise on FE_HAS_CARRIER */

 read ber */

 use safe tsspeed value if unspecified through stv0910_cfg */

 Inversion : Auto with reset to 0 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Sony CXD2820R demodulator driver

 *

 * Copyright (C) 2010 Antti Palosaari <crope@iki.fi>

 5 MHz */

 6 MHz */

 7 MHz */

 8 MHz */

 program tuner */

 program IF frequency */

 PLP filtering */

 Lock detection */

 Signal strength */

 Scale value to 0x0000-0xffff */

 CNR */

 log10(8) << 24 */

 BER */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Conexant CX24113/CX24128 Tuner (Satellite)

 *

 *  Copyright (C) 2007-8 Patrick Boettcher <pb@linuxtv.org>

 *

 *  Developed for BBTI / Technisat

 nothing to be done */

 did something */

 calculate tuner PLL settings: */

 For round up. */

 do_div needs an u64 as first argument */

 or 2 */

 The need for this sleep is not clear. But helps in some cases */

 to force a gain-setting initialization */

 for a ROLL-OFF factor of 0.35, 0.2: 600, 0.25: 625 */

 this only works with the current CX24123 implementation */

 allocate memory for the internal state */

 setup the state */

	/* making a dummy read, because of some expected troubles

 create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Samsung S5H1409 VSB/QAM demodulator driver



    Copyright (C) 2006 Steven Toth <stoth@linuxtv.org>





 configuration settings */

 previous uncorrected block counter */

 QAM tuning state goes through the following state transitions */

 Register values to initialise the demod, this will set VSB by default */

 VSB SNR lookup table */

 QAM64 SNR lookup table */

 QAM256 SNR lookup table */

 8 bit registers, 16 bit values */

 Inverted */

 Normal */

		/* We should not perform amhum optimization until

		/* We've already reached the maximum optimization level, so

 QAM EQ lock check */

 QAM EQ lock check */

 We've done the optimization already */

 Master lock */

 Master lock */

 Talk to the demod, set the FEC, GUARD, QAM settings etc */

	/* Issue a reset to the demod so it knows to resync against the

 Optimize the demod for QAM */

		/* This almost certainly applies to all boards, but for now

		   only do it for the HVR-1600.  Once the other boards are

 Configure MPEG Signal Timing charactistics */

/* Reset the demod hardware and reset all of the configuration registers

 The datasheet says that after initialisation, VSB is default */

	/* Optimize for the HVR-1600 if appropriate.  Note that some of these

	   may get folded into the generic case after testing with other

 VSB AGC REF */

 Unknown but Windows driver does it... */

 QAM AGC REF */

 Serial */

 Parallel */

 Note: Leaving the I2C gate closed. */

 Optimize the demod for QAM */

		/* This almost certainly applies to all boards, but for now

		   only do it for the HVR-1600.  Once the other boards are

 Get the demodulator status */

 Get the tuner status */

	/* borrowed from lgdt330x.c

	 *

	 * Calculate strength from SNR up to 35dB

	 * Even though the SNR can go higher than 35dB,

	 * there is some comfort factor in having a range of

	 * strong signals that can show at 100%

		/* The following calculation method was chosen

		 * purely for the sake of code re-use from the

 Convert from SNR in dB * 10 to 8.24 fixed-point */

		/* Convert from 8.24 fixed-point to

 allocate memory for the internal state */

 setup the state */

 check if the demod exists */

 create dvb_frontend */

 Note: Leaving the I2C gate open here. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for DiBcom DiB3000MC/P-demodulator.

 *

 * Copyright (C) 2004-7 DiBcom (http://www.dibcom.fr/)

 * Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)

 *

 * This code is partially based on the previous dib3000mc.c .

 default value for 8MHz

 first time we do an update

 keep the pid_parse bit */

 disable

 STBs with parallel gated clock

 STBs with parallel continues clock

 STBs with serial input

 e.g. USB feeding

			/*ADDR @ 206 :

			P_smo_error_discard  [1;6:6] = 0

			P_smo_rs_discard     [1;5:5] = 0

			P_smo_pid_parse      [1;4:4] = 0

			P_smo_fifo_flush     [1;3:3] = 0

			P_smo_mode           [2;2:1] = 11

			P_smo_ovf_prot       [1;0:0] = 0

 P_smo_rs_discard     [1;5:5] = 1

smo_ mode*/

 synchronous fread */

 P_out_cfg */

 settings here are for 27.7MHz */

 P_sec_len

 Timing configuration

 Restart Configuration

 power up the demod + mobility configuration

 P_clk_cfg

 other configurations

 P_ctrl_sfreq

 Phase noise control

 P_fft_phacor_inh, P_fft_phacor_cpe, P_fft_powrange

 P_agc_global

 agc setup misc

 P_agc_counter_lock

 P_agc_counter_unlock

 agc */

 set_agc_loop_Bw

 Begin: TimeOut registers

 P_pha3_thres

 P_timf_alpha = 6, P_corm_alpha = 6, P_corm_thres = 0x80

 lock_mask0

 lock_mask1

 lock_mask2

 P_search_maxtrial=1

 div_lock_mask

 Spurious rm cfg

 P_cspu_regul, P_cspu_win_cut

 P_adp_selec_monit

 Fec cfg

 diversity register: P_dvsy_sync_wait..

 Impulse noise configuration

 output mode set-up

 close the i2c-gate */

Default cfg isi offset adp

 diversity synchro delay add 50% SFN margin

 restart demod

	u32 val;

 TODO what is that ? */

 a channel for autosearch */

 failed

 succeeded

 still pending

 ** configure demod **

 activates isi

 P_pha3_force_pha_shift

 P_pha3_force_pha_shift

 as long as the frontend_param structure is fixed for hierarchical transmission I refuse to use it */

 (tps >> 12) & 0x1 == hrch is used, (tps >> 9) & 0x7 == alpha */

 maybe the parameter has been changed */

 no channel found

 make this a config parameter */

 designated i2c address */

 set new i2c address and force divstr (Bit 1) to value 0 (Bit 0)

 turn off data output */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *    Support for OR51211 (pcHDTV HD-2000) - VSB

 *

 *    Copyright (C) 2005 Kirk Lapray <kirk_lapray@bigfoot.com>

 *

 *    Based on code from Jack Kelliher (kelliher@xmission.com)

 *                           Copyright (C) 2002 & pcHDTV, inc.

/*

 * This driver needs external firmware. Please use the command

 * "<kerneldir>/scripts/get_dvb_firmware or51211" to

 * download/extract it, and then copy it to /usr/lib/hotplug/firmware

 * or /lib/firmware (depending on configuration of firmware hotplug).

 ATSC

 Configuration settings */

 Demodulator private data */

 Result of last SNR calculation */

 Tuner private data */

 Get eprom data */

 Create firmware buffer */

 Wait at least 5 msec */

 Wait at least 5 msec */

	/* Set operation mode in Receiver 1 register;

	 * type 1:

	 * data 0x50h  Automatic sets receiver channel conditions

	 *             Automatic NTSC rejection filter

	 *             Enable  MPEG serial data output

	 *             MPEG2tr

	 *             High tuner phase noise

	 *             normal +/-150kHz Carrier acquisition range

 Change only if we are actually changing the channel */

 Set to ATSC mode */

 Update current frequency */

 Receiver Status */

 Receiver Lock */

/* Calculate SNR estimation (scaled by 2^24)



   8-VSB SNR equation from Oren datasheets



   For 8-VSB:

     SNR[dB] = 10 * log10(219037.9454 / MSE^2 )



   We re-write the snr equation as:

     SNR * 2^24 = 10*(c - 2*intlog10(MSE))

 No signal */

		/* Negative SNR, which is possible, but realisticly the

		demod will lose lock before the signal gets this bad.  The

 SNR after Equalizer */

 Calculate Strength from SNR up to 35dB */

 Even though the SNR can go higher than 35dB, there is some comfort */

 factor in having a range of strong signals that can show at 100%   */

 Rather than use the 8.8 value snr, use state->snr which is 8.24 */

 scale the range 0 - 35*2^24 into 0 - 65535 */

 Request the firmware, this will block until it uploads */

		/* Set operation mode in Receiver 1 register;

		 * type 1:

		 * data 0x50h  Automatic sets receiver channel conditions

		 *             Automatic NTSC rejection filter

		 *             Enable  MPEG serial data output

		 *             MPEG2tr

		 *             High tuner phase noise

		 *             normal +/-150kHz Carrier acquisition range

 Read back ucode version to besure we loaded correctly */

 and are really up and running */

 If we didn't receive the right index, try again */

 Allocate memory for the internal state */

 Setup the state */

 Create dvb_frontend */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * descriptions + helper functions for simple dvb plls.

 *

 * (c) 2004 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]

 pll number */

 i2c details */

 the PLL descriptor */

 cached frequency/bandwidth */

 ----------------------------------------------------------- */

 ----------------------------------------------------------- */

 descriptions                                                */

 used by dntv live dvb-t */

/* Infineon TUA6010XS

 * used in Thomson Cable Tuner

 Panasonic env57h1xd5 (some Philips PLL ?) */

/* Philips TDA6650/TDA6651

 * used in Panasonic ENV77H11D5

 011 0 0 0  01 */ },

 101 0 0 0  01 */ },

 101 0 0 0  01 */ },

 110 0 0 0  10 */ },

 011 0 0 0  10 */ },

 101 0 0 0  10 */ },

 110 0 0 0  10 */ },

 110 0 0 1  00 */ },

 011 0 0 1  00 */ },

 101 0 0 1  00 */ },

 110 0 0 1  00 */ },

 111 0 0 1  00 */ },

/* Infineon TUA6034

 * used in LG TDTP E102P

/* ALPS TDED4

 * used in Nebula-Cards and USB boxes

/* ALPS TDHU2

 * used in AverTVHD MCE A180

/* Samsung TBMV30111IN / TBMV30712IN1

 * used in Air2PC ATSC - 2nd generation (nxt2002)

/*

 * Philips SD1878 Tuner.

 zero-IF, offset 249 is to round up */

 Flip bits 3-5 */

 Set lpf */

 unknown pll used in Samsung DTOS403IH102A DVB-C tuner */

 Samsung TDTC9251DH0 DVB-T NIM, as used on AirStar 2 */

 Samsung TBDU18132 DVB-S NIM with TSA5059 PLL, used in SkyStar2 DVB-S 2.3 */

 guesses */

	/* TSA5059 PLL has a 17 bit divisor rather than the 15 bits supported

	 * by this driver.  The two extra bits are 0x60 in the third byte.  15

	 * bits is enough for over 4 GHz, which is enough to cover the range

	 * of this tuner.  We could use the additional divisor bits by adding

	 * more entries, e.g.

	 { 0x0ffff * 125 + 125/2, 125, 0x84 | 0x20, },

	 { 0x17fff * 125 + 125/2, 125, 0x84 | 0x40, },

 Samsung TBMU24112 DVB-S NIM with SL1935 zero-IF tuner */

 guesses */

 Alps TDEE4 DVB-C NIM, used on Cablestar 2 */

/* byte 4 : 1  *   *   AGD R3  R2  R1  R0

 * byte 5 : C1 *   RE  RTS BS4 BS3 BS2 BS1

 * AGD = 1, R3 R2 R1 R0 = 0 1 0 1 => byte 4 = 1**10101 = 0x95

 * Range(MHz)  C1 *  RE RTS BS4 BS3 BS2 BS1  Byte 5

 *  47 - 153   0  *  0   0   0   0   0   1   0x01

 * 153 - 430   0  *  0   0   0   0   1   0   0x02

 * 430 - 822   0  *  0   0   1   0   0   0   0x08

 Infineon TUA6034 ISDB-T, used in Friio */

 CP cur. 50uA, AGC takeover: 103dBuV, PORT3 on */

 Philips TDA6651 ISDB-T, used in Earthsoft PT1 */

 ----------------------------------------------------------- */

 ----------------------------------------------------------- */

 code                                                        */

 calculate the frequency we set it to

 Shouldn't be called when initdata is NULL, maybe BUG()? */

 Shouldn't be called when initdata is NULL, maybe BUG()? */

	/*

	 * Unset tuner_ops.release (== dvb_pll_release)

	 * which has been just set in the above dvb_pll_attach(),

	 * because if tuner_ops.release was left defined,

	 * this module would be 'put' twice on exit:

	 * once by dvb_frontend_detach() and another by dvb_module_release().

	 *

	 * dvb_pll_release is instead executed in the i2c driver's .remove(),

	 * keeping dvb_pll_attach untouched for legacy (dvb_attach) drivers.

